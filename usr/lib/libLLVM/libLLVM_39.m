unint64_t *sub_1CCB13CD8(uint64_t *a1)
{
  uint64_t v2;
  char *v3;
  const llvm::APInt *v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::PointerType *v8;
  uint64_t v9;
  llvm::ConstantInt *v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  const char *v15;
  unsigned int v16;
  __int16 v17;

  v2 = a1[2];
  v3 = (char *)operator new(0x78uLL);
  v5 = (unint64_t *)(v3 + 32);
  *((_DWORD *)v3 + 13) = *((_DWORD *)v3 + 13) & 0x38000000 | 1;
  *(void *)v3 = 0;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *((void *)v3 + 3) = v3 + 32;
  v6 = *a1;
  v7 = **(void **)(a1[1] + 64);
  v8 = (llvm::PointerType *)(v7 + 1960);
  v9 = *(unsigned __int8 *)(v2 + 8);
  v10 = *(llvm::ConstantInt **)(v7 + 1960);
  v11 = *(unsigned int *)(v7 + 1968);
  v16 = v11 >> 8;
  if (v11 >> 8 > 0x40) {
    operator new[]();
  }
  if (v11 <= 0xFF) {
    v12 = 0;
  }
  else {
    v12 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v11) + 63);
  }
  v15 = (const char *)(v12 & v9);
  v13 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v15, v4);
  if (v16 >= 0x41 && v15) {
    MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
  }
  v15 = "__msan_keep_going";
  v17 = 259;
  return llvm::GlobalVariable::GlobalVariable(v5, v6, v8, 1, 5, (unint64_t)v13, &v15, 0, 0, 0, 0);
}

void sub_1CCB13E70(uint64_t *a1, llvm::GlobalObject *a2)
{
  v3 = (uint64_t *)*a1;
  if (byte_1EBCE9240)
  {
    inserted = llvm::Module::getOrInsertComdat(*a1, "msan.module_ctor", 0x10uLL);
    llvm::GlobalObject::setComdat(a2, (llvm::Comdat *)inserted);
    v3 = (uint64_t *)*a1;
    uint64_t v4 = (uint64_t)a2;
    v5 = a2;
  }
  else
  {
    uint64_t v4 = (uint64_t)a2;
    v5 = 0;
  }

  sub_1CD1CEB38("llvm.global_ctors", v3, v4, 0, v5);
}

void sub_1CCB13F08()
{
}

void sub_1CCB13FC8(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F262C068;
  if (*((unsigned char *)a1 + 680)) {
    *((unsigned char *)a1 + 680) = 0;
  }
  llvm::Pass::~Pass(a1);
}

void sub_1CCB13FF4(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F262C068;
  if (*((unsigned char *)a1 + 680)) {
    *((unsigned char *)a1 + 680) = 0;
  }
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CCB14054()
{
  return "MemorySanitizerLegacyPass";
}

uint64_t sub_1CCB14064(uint64_t a1, llvm::Module *a2)
{
  if (!*(unsigned char *)(a1 + 688))
  {
    v5[3] = (uint64_t)a2;
    llvm::getOrCreateSanitizerCtorAndInitFunctions(a2, "msan.module_ctor", (const char *)0x10, "__msan_init", (const char *)0xB, 0, 0, v5);
  }
  if (*(unsigned char *)(a1 + 680)) {
    *(unsigned char *)(a1 + 680) = 0;
  }
  sub_1CCB0F6FC(a1 + 32, (llvm::IntegerType **)a2, *(void *)(a1 + 688), *(_DWORD *)(a1 + 696));
  *(unsigned char *)(a1 + 680) = 1;
  return 1;
}

void sub_1CCB14118(uint64_t a1, uint64_t a2)
{
}

void sub_1CCB14128(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(char **)v4 != llvm::TargetLibraryInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v6 + 96))(v6, llvm::TargetLibraryInfoWrapperPass::ID);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v8 = v7 + 32;
  if (!*(unsigned char *)(v7 + 232))
  {
    uint64_t v9 = *(void *)(a2 + 40) + 216;
    __int16 v21 = 260;
    v20[0] = v9;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v20);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v33 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(void *)&long long v10 = -1;
    *((void *)&v10 + 1) = -1;
    *(_OWORD *)__src = v10;
    long long v25 = v10;
    long long v26 = v10;
    long long v27 = v10;
    long long v28 = v10;
    long long v29 = v10;
    *(_OWORD *)v30 = v10;
    *(void *)&v30[13] = -1;
    sub_1CC153974((uint64_t)__src, (int *)__p);
    sub_1CD4D04B8(v8, (uint64_t)__src);
    sub_1CD4CFA4C((uint64_t *)__src);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1CC1569E8(__src, v8);
}

void *sub_1CCB14468(void *a1)
{
  *a1 = &unk_1F262C130;
  v2 = (void *)a1[8];
  if (v2 != a1 + 10) {
    free(v2);
  }
  return a1;
}

void sub_1CCB144BC(void *a1)
{
  *a1 = &unk_1F262C130;
  v2 = (void *)a1[8];
  if (v2 != a1 + 10) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

llvm::Instruction *sub_1CCB14530(uint64_t a1, uint64_t a2, const llvm::APInt *a3)
{
  int v4 = *(_DWORD *)(a2 + 20);
  uint64_t v5 = v4 & 0x7FFFFFF;
  int v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 == 84)
  {
    uint64_t v7 = (uint64_t)a3;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    if (v6 == 39) {
      uint64_t v9 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else {
      uint64_t v9 = 2;
    }
    uint64_t v7 = (uint64_t)a3;
    uint64_t v8 = a1;
  }
  unsigned int v10 = *(_DWORD *)(v8 + 8);
  uint64_t v11 = a2 - 32 * v5;
  if (v4 < 0)
  {
    uint64_t v87 = *(void *)(v11 - 8);
    if ((v87 & 0xFFFFFFFF0) != 0) {
      uint64_t v12 = (*(_DWORD *)(v11 - 12) - *(_DWORD *)(v11 - v87));
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v7 = (uint64_t)a3;
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v12 = 0;
  }
  if (v11 != a2 - 32 * v9 - 32 * v12 - 32)
  {
    unsigned int v93 = v10;
    unsigned int v13 = 0;
    v91 = (llvm::DataLayout *)(*(void *)(*(void *)(v8 + 16) + 40) + 272);
    uint64_t v14 = -32 * v5;
    unint64_t v15 = (32 * v9 + 32 * v12) ^ 0xFFFFFFFFFFFFFFE0;
    unsigned int v98 = 48;
    unint64_t v96 = v15;
    while (1)
    {
      int v16 = *(llvm::CastInst **)(a2 + v14);
      unint64_t v17 = (v14 + 32 * (unint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) >> 5;
      unsigned int v18 = *(_DWORD *)(*(void *)(a2 + 72) + 12) - 1;
      if (llvm::CallBase::paramHasAttr(a2, v17, 69))
      {
        if (v18 <= v17)
        {
          unsigned int v97 = v13;
          int v19 = (llvm::Type *)sub_1CD49471C(a2, v17);
          uint64_t v20 = sub_1CB83544C((uint64_t)v91, (uint64_t)v19);
          BOOL v22 = v21 == 1;
          char Alignment = llvm::DataLayout::getAlignment(v91, v19, 1);
          if (v22) {
          unint64_t v25 = ((1 << Alignment) + ((unint64_t)(v20 + 7) >> 3) - 1) & -(1 << Alignment);
          }
          long long v28 = sub_1CCB15F70(a1, (uint64_t)v19, v7, v93, (llvm::Instruction *)((v25 + 7) & 0xFFFFFFF8));
          if (*(_DWORD *)(*(void *)(a1 + 24) + 4)) {
            long long v29 = sub_1CCB161A0(a1, v7, v93, v26, v27);
          }
          else {
            long long v29 = 0;
          }
          v93 += (v25 + 7) & 0xFFFFFFF8;
          if (!v28)
          {
            uint64_t v8 = a1;
            goto LABEL_62;
          }
          v90 = (llvm::Value *)v29;
          unint64_t v88 = v88 & 0xFFFFFFFFFFFF0000 | HIBYTE(word_1EBCE87F0) | 0x100;
          v61 = sub_1CCB163B4(*(void **)(a1 + 32), v16, v7, (llvm::PointerType *)(**(void **)(v7 + 64) + 1912), (llvm::Instruction *)v88, 0);
          v63 = v62;
          uint64_t v64 = v7;
          __int16 v65 = HIBYTE(word_1EBCE87F0);
          uint64_t v66 = **(void **)(v64 + 64);
          v67 = *(llvm::ConstantInt **)(v66 + 1984);
          unint64_t v68 = *(unsigned int *)(v66 + 1992);
          unsigned int v100 = v68 >> 8;
          if (v68 >> 8 > 0x40) {
            operator new[]();
          }
          if (v68 <= 0xFF) {
            unint64_t v69 = 0;
          }
          else {
            unint64_t v69 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v68) + 63);
          }
          unint64_t v99 = v69 & v25;
          v70 = llvm::ConstantInt::get(v67, (llvm::LLVMContext *)&v99, v60);
          if (v100 >= 0x41 && v99) {
            MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
          }
          __int16 v71 = v65 | 0x100;
          uint64_t v7 = (uint64_t)a3;
          llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)a3, 194, (llvm::Value *)v28, v71, (llvm::Value *)v61, v71, v70, 0, 0, 0, 0, 0);
          uint64_t v8 = a1;
          unsigned int v13 = v97;
          if (*(_DWORD *)(*(void *)(a1 + 24) + 4))
          {
            __int16 v72 = HIBYTE(word_1EBCE87F0);
            uint64_t v73 = **((void **)a3 + 8);
            v74 = *(llvm::ConstantInt **)(v73 + 1984);
            unint64_t v75 = *(unsigned int *)(v73 + 1992);
            unsigned int v100 = v75 >> 8;
            if (v75 >> 8 > 0x40) {
              operator new[]();
            }
            if (v75 <= 0xFF) {
              unint64_t v76 = 0;
            }
            else {
              unint64_t v76 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v75) + 63);
            }
            unint64_t v99 = v76 & v25;
            v77 = llvm::ConstantInt::get(v74, (llvm::LLVMContext *)&v99, a3);
            if (v100 >= 0x41 && v99) {
              MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
            }
            __int16 v78 = v72 | 0x100;
            uint64_t v7 = (uint64_t)a3;
            llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)a3, 194, v90, v78, v63, v78, v77, 0, 0, 0, 0, 0);
            uint64_t v8 = a1;
          }
LABEL_63:
          unint64_t v15 = v96;
          goto LABEL_64;
        }
        goto LABEL_64;
      }
      uint64_t v30 = *(void *)v16;
      unsigned int v31 = *(_DWORD *)(*(void *)v16 + 8);
      unsigned int v32 = v31;
      if ((*(_DWORD *)(*(void *)v16 + 8) & 0xFE) == 0x12) {
        unsigned int v32 = *(unsigned __int8 *)(**(void **)(v30 + 16) + 8);
      }
      if (v32 < 7 || v31 == 10)
      {
        int v35 = 1;
      }
      else
      {
        if (v31 != 13) {
          goto LABEL_24;
        }
        unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v16);
        if (v33 == 1) {
        if (PrimitiveSizeInBits >= 0x41)
        }
        {
          unsigned int v31 = *(unsigned __int8 *)(v30 + 8);
          uint64_t v8 = a1;
          unint64_t v15 = v96;
LABEL_24:
          int v35 = 2 * (v31 != 15);
          goto LABEL_25;
        }
        int v35 = 0;
        uint64_t v8 = a1;
        unint64_t v15 = v96;
      }
LABEL_25:
      if (v13 > 0x2F && v35 == 0) {
        int v35 = 2;
      }
      if (!v35)
      {
        v39 = sub_1CCB15F70(v8, *(void *)v16, v7, v13, (llvm::Instruction *)8);
        if (*(_DWORD *)(*(void *)(v8 + 24) + 4)) {
          v40 = sub_1CCB161A0(v8, v7, v13, v48, v49);
        }
        else {
          v40 = 0;
        }
        unsigned int v97 = v13 + 8;
        goto LABEL_47;
      }
      if (v35 != 2)
      {
        if (v35 != 1) {
          goto LABEL_64;
        }
        if (v98 < *(_DWORD *)(v8 + 8))
        {
          unsigned int v97 = v13;
          v39 = sub_1CCB15F70(v8, *(void *)v16, v7, v98, (llvm::Instruction *)0x10);
          if (*(_DWORD *)(*(void *)(v8 + 24) + 4)) {
            v40 = sub_1CCB161A0(v8, v7, v98, v37, v38);
          }
          else {
            v40 = 0;
          }
          unsigned int v50 = v98 + 16;
          goto LABEL_50;
        }
      }
      if (v18 <= v17)
      {
        unsigned int v97 = v13;
        v41 = *(llvm::Type **)v16;
        v89 = (llvm::Value *)sub_1CB83544C((uint64_t)v91, *(void *)v16);
        BOOL v43 = v42 == 1;
        char v45 = llvm::DataLayout::getAlignment(v91, v41, 1);
        if (v43) {
        v39 = sub_1CCB15F70(a1, *(void *)v16, (uint64_t)a3, v93, (llvm::Instruction *)8);
        }
        if (*(_DWORD *)(*(void *)(a1 + 24) + 4)) {
          v40 = sub_1CCB161A0(a1, (uint64_t)a3, v93, v46, v47);
        }
        else {
          v40 = 0;
        }
        v93 += ((((1 << v45) - 1 + (((unint64_t)v89 + 7) >> 3)) & -(1 << v45)) + 7) & 0xFFFFFFF8;
        uint64_t v7 = (uint64_t)a3;
        uint64_t v8 = a1;
LABEL_47:
        unsigned int v50 = v98;
LABEL_50:
        BOOL v51 = v18 > v17 || v39 == 0;
        unsigned int v98 = v50;
        if (!v51)
        {
          v52 = sub_1CCB16AB0(*(void *)(v8 + 32), (uint64_t)v16);
          v53 = (uint64_t *)v7;
          v54 = (uint64_t *)v52;
          unint64_t v55 = v92 & 0xFFFFFFFFFFFF0000 | HIBYTE(word_1EBCE87F0) | 0x100;
          sub_1CC27BF8C(v53, (uint64_t)v52, (uint64_t)v39, HIBYTE(word_1EBCE87F0) | 0x100, 0);
          unint64_t v92 = v55;
          if (*(_DWORD *)(*(void *)(v8 + 24) + 4))
          {
            v56 = sub_1CCB176E8(*(void *)(v8 + 32), (uint64_t)v16, a3);
            uint64_t v58 = sub_1CB83544C((uint64_t)v91, *v54);
            if (v57 == 1) {
            if (HIBYTE(word_1EBCE87F0) <= word_1EBCE87F0)
            }
              unsigned __int8 v59 = word_1EBCE87F0;
            else {
              unsigned __int8 v59 = HIBYTE(word_1EBCE87F0);
            }
            uint64_t v7 = (uint64_t)a3;
            sub_1CCB17798(*(void **)(v8 + 32), (uint64_t *)a3, v56, (llvm::CastInst *)v40, (unint64_t)(v58 + 7) >> 3, v59);
          }
          else
          {
            uint64_t v7 = (uint64_t)a3;
          }
        }
LABEL_62:
        unsigned int v13 = v97;
        goto LABEL_63;
      }
LABEL_64:
      v14 += 32;
      if (v15 == v14)
      {
        unsigned int v79 = *(_DWORD *)(v8 + 8);
        unsigned int v10 = v93;
        goto LABEL_88;
      }
    }
  }
  unsigned int v79 = v10;
LABEL_88:
  uint64_t v80 = **(void **)(v7 + 64);
  uint64_t v81 = v10 - v79;
  v82 = *(llvm::ConstantInt **)(v80 + 1984);
  unsigned int v83 = *(_DWORD *)(v80 + 1992);
  unsigned int v100 = v83 >> 8;
  if (v83 >> 8 > 0x40) {
    operator new[]();
  }
  if (v83 <= 0xFF) {
    unint64_t v84 = 0;
  }
  else {
    unint64_t v84 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v83) + 63);
  }
  unint64_t v99 = v84 & v81;
  v85 = llvm::ConstantInt::get(v82, (llvm::LLVMContext *)&v99, a3);
  if (v100 >= 0x41 && v99) {
    MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
  }
  return sub_1CC27BF8C((uint64_t *)v7, (uint64_t)v85, *(void *)(*(void *)(v8 + 24) + 88), 0, 0);
}

void sub_1CCB14E44(uint64_t a1, uint64_t **a2)
{
  if ((*(_WORD *)(*(void *)(a1 + 16) + 18) & 0x3FF0) != 0x4F0)
  {
    unsigned int v2 = *(_DWORD *)(a1 + 72);
    if (v2 >= *(_DWORD *)(a1 + 76)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 64) + 8 * v2) = a2;
    ++*(_DWORD *)(a1 + 72);
    sub_1CCB18394(a1, a2);
  }
}

void sub_1CCB14EDC(uint64_t a1, uint64_t **a2)
{
  if ((*(_WORD *)(*(void *)(a1 + 16) + 18) & 0x3FF0) != 0x4F0) {
    sub_1CCB18394(a1, a2);
  }
}

void sub_1CCB14EF8(uint64_t a1)
{
  v133[1] = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a1 + 72)) {
    return;
  }
  uint64_t v2 = 0;
  v3 = *(uint64_t ***)(*(void *)(a1 + 32) + 448);
  uint64_t v4 = **v3;
  v118 = (llvm::MDNode **)v120;
  uint64_t v119 = 0x200000000;
  uint64_t v123 = v4;
  v124 = &v132;
  v125 = v133;
  uint64_t v126 = 0;
  int v127 = 0;
  __int16 v128 = 512;
  char v129 = 7;
  uint64_t v130 = 0;
  uint64_t v131 = 0;
  v132 = &unk_1F2616E88;
  v133[0] = &unk_1F2617008;
  v121 = v3[5];
  v122 = v3 + 3;
  uint64_t v5 = (unsigned __int8 *)v3[6];
  v113[0] = v5;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)v113, v5, 2);
    uint64_t v2 = v113[0];
  }
  sub_1CB8461A4((uint64_t)&v118, 0, v2);
  if (v113[0])
  {
    int v104 = *(unsigned __int8 *)v113[0];
    if ((v104 - 4) > 0x1E)
    {
      if ((v104 - 3) >= 0xFFFFFFFE) {
        uint64_t v107 = v113[0];
      }
      else {
        uint64_t v107 = 0;
      }
      if ((v104 - 3) < 0xFFFFFFFE)
      {
        if (v104 == 3) {
          *(void *)(v113[0] + 8) = 0;
        }
        goto LABEL_5;
      }
      unint64_t v106 = v107 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v113[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v113[0] + 12)) {
        goto LABEL_5;
      }
      uint64_t v105 = *(void *)(v113[0] + 16);
      if ((v105 & 4) == 0) {
        goto LABEL_5;
      }
      unint64_t v106 = v105 & 0xFFFFFFFFFFFFFFF8;
      if (!v106) {
        goto LABEL_5;
      }
    }
    v115 = (const char *)v113;
    sub_1CC5FA668(v106 + 16, &v115);
  }
LABEL_5:
  int v6 = (llvm::Type *)(*(void *)v123 + 1984);
  uint64_t v7 = *(void *)(*(void *)(a1 + 24) + 88);
  __int16 v114 = 257;
  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v121[7] + 40) + 272), v6, 1);
  uint64_t v9 = operator new(0x60uLL);
  v9[13] = v9[13] & 0x38000000 | 1;
  unsigned int v10 = (llvm::Instruction *)(v9 + 8);
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = v9 + 8;
  __int16 v117 = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v9 + 8), (uint64_t)v6, v7, &v115, 0, Alignment, 0);
  (*(void (**)(void *, llvm::Instruction *, void *, uint64_t *, uint64_t **))(*v125 + 16))(v125, v10, v113, v121, v122);
  if (v119)
  {
    v102 = v118;
    v103 = (char *)&v118[2 * v119];
    do
    {
      llvm::Instruction::setMetadata(v10, *(_DWORD *)v102, v102[1]);
      v102 += 2;
    }
    while (v102 != (llvm::MDNode **)v103);
  }
  *(void *)(a1 + 56) = v10;
  uint64_t v11 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 24) + 24), *(unsigned int *)(a1 + 8), 0);
  uint64_t v12 = *(void *)(a1 + 56);
  __int16 v117 = 257;
  unsigned int v13 = sub_1CB844A3C((uint64_t)&v118, v11, v12, (uint64_t)&v115, 0, 0);
  uint64_t v14 = (llvm::Type *)(**(void **)(*(void *)(a1 + 24) + 16) + 1912);
  __int16 v117 = 257;
  unint64_t v15 = sub_1CB935044((uint64_t *)&v118, v14, v13, (uint64_t)&v115);
  *(void *)(a1 + 40) = v15;
  llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v118, 194, v15, 259, *(llvm::Value **)(*(void *)(a1 + 24) + 72), 259, (uint64_t *)v13, 0, 0, 0, 0, 0);
  uint64_t v16 = *(void *)(a1 + 24);
  if (*(_DWORD *)(v16 + 4))
  {
    unint64_t v17 = (llvm::Type *)(**(void **)(v16 + 16) + 1912);
    __int16 v117 = 257;
    unsigned int v18 = sub_1CB935044((uint64_t *)&v118, v17, v13, (uint64_t)&v115);
    *(void *)(a1 + 48) = v18;
    llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v118, 194, v18, 259, *(llvm::Value **)(*(void *)(a1 + 24) + 80), 259, (uint64_t *)v13, 0, 0, 0, 0, 0);
  }
  if (v118 != (llvm::MDNode **)v120) {
    free(v118);
  }
  uint64_t v108 = *(unsigned int *)(a1 + 72);
  if (v108)
  {
    for (uint64_t i = 0; i != v108; ++i)
    {
      uint64_t v20 = 0;
      uint64_t v21 = *(void *)(*(void *)(a1 + 64) + 8 * i);
      uint64_t v22 = *(void *)(v21 + 32);
      if (v22) {
        BOOL v23 = v22 == *(void *)(v21 + 40) + 40;
      }
      else {
        BOOL v23 = 1;
      }
      if (v23) {
        v24 = 0;
      }
      else {
        v24 = (uint64_t **)(v22 - 24);
      }
      uint64_t v25 = **v24;
      v118 = (llvm::MDNode **)v120;
      uint64_t v119 = 0x200000000;
      uint64_t v123 = v25;
      v124 = &v132;
      v125 = v133;
      uint64_t v126 = 0;
      int v127 = 0;
      __int16 v128 = 512;
      char v129 = 7;
      v121 = 0;
      v122 = 0;
      uint64_t v130 = 0;
      uint64_t v131 = 0;
      v132 = &unk_1F2616E88;
      v133[0] = &unk_1F2617008;
      v121 = v24[5];
      v122 = v24 + 3;
      uint64_t v26 = (unsigned __int8 *)v24[6];
      v113[0] = v26;
      if (v26)
      {
        llvm::MetadataTracking::track((uint64_t)v113, v26, 2);
        uint64_t v20 = v113[0];
      }
      sub_1CB8461A4((uint64_t)&v118, 0, v20);
      if (!v113[0]) {
        goto LABEL_21;
      }
      int v90 = *(unsigned __int8 *)v113[0];
      if ((v90 - 4) > 0x1E)
      {
        if ((v90 - 3) >= 0xFFFFFFFE) {
          uint64_t v93 = v113[0];
        }
        else {
          uint64_t v93 = 0;
        }
        if ((v90 - 3) < 0xFFFFFFFE)
        {
          if (v90 == 3) {
            *(void *)(v113[0] + 8) = 0;
          }
          goto LABEL_21;
        }
        unint64_t v92 = v93 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v113[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v113[0] + 12)) {
          goto LABEL_21;
        }
        uint64_t v91 = *(void *)(v113[0] + 16);
        if ((v91 & 4) == 0) {
          goto LABEL_21;
        }
        unint64_t v92 = v91 & 0xFFFFFFFFFFFFFFF8;
        if (!v92) {
          goto LABEL_21;
        }
      }
      v115 = (const char *)v113;
      sub_1CC5FA668(v92 + 16, &v115);
LABEL_21:
      long long v27 = *(unsigned __int8 **)(v21 - 32 * (*(_DWORD *)(v21 + 20) & 0x7FFFFFF));
      long long v28 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(**(void **)(*(void *)(a1 + 24) + 16) + 1984), 0);
      uint64_t v29 = *(void *)(*(void *)(a1 + 24) + 24);
      __int16 v114 = 257;
      uint64_t v30 = (llvm::Instruction *)v27;
      if (*(void *)v27 != v29)
      {
        if (v27[16] <= 0x14u)
        {
          uint64_t v33 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v124 + 28))(v124, 47, v27, v29);
          uint64_t v30 = (llvm::Instruction *)v33;
          if (v33)
          {
            if (*(unsigned __int8 *)(v33 + 16) >= 0x1Cu)
            {
              (*(void (**)(void *, uint64_t, void *, uint64_t *, uint64_t **))(*v125 + 16))(v125, v33, v113, v121, v122);
              if (v119)
              {
                unsigned int v98 = v118;
                unint64_t v99 = (char *)&v118[2 * v119];
                do
                {
                  llvm::Instruction::setMetadata(v30, *(_DWORD *)v98, v98[1]);
                  v98 += 2;
                }
                while (v98 != (llvm::MDNode **)v99);
              }
            }
          }
        }
        else
        {
          __int16 v117 = 257;
          uint64_t v30 = llvm::CastInst::Create(47, (uint64_t)v27, v29, &v115, 0);
          (*(void (**)(void *, llvm::Instruction *, void *, uint64_t *, uint64_t **))(*v125 + 16))(v125, v30, v113, v121, v122);
          if (v119)
          {
            unsigned int v31 = v118;
            unsigned int v32 = (char *)&v118[2 * v119];
            do
            {
              llvm::Instruction::setMetadata(v30, *(_DWORD *)v31, v31[1]);
              v31 += 2;
            }
            while (v31 != (llvm::MDNode **)v32);
          }
        }
      }
      long long v34 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 24) + 24), 0x10uLL, 0);
      __int16 v112 = 257;
      int v35 = (unsigned __int8 *)sub_1CB844A3C((uint64_t)&v118, v30, (uint64_t)v34, (uint64_t)v111, 0, 0);
      unint64_t v36 = llvm::PointerType::get(v28, 0);
      __int16 v110 = 257;
      if (*(void *)v35 != v36)
      {
        if (v35[16] <= 0x14u)
        {
          int v35 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v124
                                    + 28))(v124, 48, v35, v36);
          if (v35) {
            BOOL v39 = v35[16] >= 0x1Cu;
          }
          else {
            BOOL v39 = 0;
          }
          if (v39)
          {
            (*(void (**)(void *, unsigned __int8 *, unsigned char *, uint64_t *, uint64_t **))(*v125 + 16))(v125, v35, v109, v121, v122);
            if (v119)
            {
              v94 = v118;
              v95 = (char *)&v118[2 * v119];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v35, *(_DWORD *)v94, v94[1]);
                v94 += 2;
              }
              while (v94 != (llvm::MDNode **)v95);
            }
          }
        }
        else
        {
          __int16 v117 = 257;
          int v35 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v35, v36, &v115, 0);
          (*(void (**)(void *, unsigned __int8 *, unsigned char *, uint64_t *, uint64_t **))(*v125 + 16))(v125, v35, v109, v121, v122);
          if (v119)
          {
            uint64_t v37 = v118;
            v38 = (char *)&v118[2 * v119];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v35, *(_DWORD *)v37, v37[1]);
              v37 += 2;
            }
            while (v37 != (llvm::MDNode **)v38);
          }
        }
      }
      __int16 v114 = 257;
      char v40 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v121[7] + 40) + 272), v28, 1);
      v41 = operator new(0x60uLL);
      v41[13] = v41[13] & 0x38000000 | 1;
      int v42 = (llvm::Instruction *)(v41 + 8);
      *(void *)v41 = 0;
      *((void *)v41 + 1) = 0;
      *((void *)v41 + 2) = 0;
      *((void *)v41 + 3) = v41 + 8;
      __int16 v117 = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v41 + 8), (uint64_t)v28, (uint64_t)v35, &v115, 0, v40, 0);
      (*(void (**)(void *, llvm::Instruction *, void *, uint64_t *, uint64_t **))(*v125 + 16))(v125, v42, v113, v121, v122);
      if (v119)
      {
        v86 = v118;
        uint64_t v87 = (char *)&v118[2 * v119];
        do
        {
          llvm::Instruction::setMetadata(v42, *(_DWORD *)v86, v86[1]);
          v86 += 2;
        }
        while (v86 != (llvm::MDNode **)v87);
      }
      v44 = sub_1CCB163B4(*(void **)(a1 + 32), v42, (uint64_t)&v118, (llvm::PointerType *)(*(void *)v123 + 1912), (llvm::Instruction *)0x104, 1);
      uint64_t v46 = v45;
      v47 = *(llvm::Value **)(a1 + 40);
      uint64_t v48 = *(unsigned int *)(a1 + 8);
      v49 = *(llvm::ConstantInt **)(*(void *)v123 + 1984);
      unsigned int v50 = *(_DWORD *)(*(void *)v123 + 1992);
      unsigned int v116 = v50 >> 8;
      if (v50 >> 8 > 0x40) {
        operator new[]();
      }
      if (v50 <= 0xFF) {
        unint64_t v51 = 0;
      }
      else {
        unint64_t v51 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v50) + 63);
      }
      v115 = (const char *)(v51 & v48);
      v52 = llvm::ConstantInt::get(v49, (llvm::LLVMContext *)&v115, v43);
      if (v116 >= 0x41 && v115) {
        MEMORY[0x1D25D9CB0](v115, 0x1000C8000313F17);
      }
      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v118, 194, (llvm::Value *)v44, 260, v47, 260, v52, 0, 0, 0, 0, 0);
      uint64_t v54 = *(void *)(a1 + 24);
      if (*(_DWORD *)(v54 + 4))
      {
        unint64_t v55 = *(llvm::Value **)(a1 + 48);
        uint64_t v56 = *(unsigned int *)(a1 + 8);
        v57 = *(llvm::ConstantInt **)(*(void *)v123 + 1984);
        unsigned int v58 = *(_DWORD *)(*(void *)v123 + 1992);
        unsigned int v116 = v58 >> 8;
        if (v58 >> 8 > 0x40) {
          operator new[]();
        }
        if (v58 <= 0xFF) {
          unint64_t v59 = 0;
        }
        else {
          unint64_t v59 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v58) + 63);
        }
        v115 = (const char *)(v59 & v56);
        v60 = llvm::ConstantInt::get(v57, (llvm::LLVMContext *)&v115, v53);
        if (v116 >= 0x41 && v115) {
          MEMORY[0x1D25D9CB0](v115, 0x1000C8000313F17);
        }
        llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v118, 194, v46, 260, v55, 260, v60, 0, 0, 0, 0, 0);
        uint64_t v54 = *(void *)(a1 + 24);
      }
      v61 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(**(void **)(v54 + 16) + 1984), 0);
      uint64_t v62 = *(void *)(*(void *)(a1 + 24) + 24);
      __int16 v114 = 257;
      if (*(void *)v27 != v62)
      {
        if (v27[16] <= 0x14u)
        {
          uint64_t v65 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v124 + 28))(v124, 47, v27, v62);
          long long v27 = (unsigned __int8 *)v65;
          if (v65)
          {
            if (*(unsigned __int8 *)(v65 + 16) >= 0x1Cu)
            {
              (*(void (**)(void *, uint64_t, void *, uint64_t *, uint64_t **))(*v125 + 16))(v125, v65, v113, v121, v122);
              if (v119)
              {
                unsigned int v100 = v118;
                v101 = (char *)&v118[2 * v119];
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v27, *(_DWORD *)v100, v100[1]);
                  v100 += 2;
                }
                while (v100 != (llvm::MDNode **)v101);
              }
            }
          }
        }
        else
        {
          __int16 v117 = 257;
          long long v27 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v27, v62, &v115, 0);
          (*(void (**)(void *, unsigned __int8 *, void *, uint64_t *, uint64_t **))(*v125 + 16))(v125, v27, v113, v121, v122);
          if (v119)
          {
            v63 = v118;
            uint64_t v64 = (char *)&v118[2 * v119];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v27, *(_DWORD *)v63, v63[1]);
              v63 += 2;
            }
            while (v63 != (llvm::MDNode **)v64);
          }
        }
      }
      uint64_t v66 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 24) + 24), 8uLL, 0);
      __int16 v112 = 257;
      v67 = (unsigned __int8 *)sub_1CB844A3C((uint64_t)&v118, v27, (uint64_t)v66, (uint64_t)v111, 0, 0);
      unint64_t v68 = llvm::PointerType::get(v61, 0);
      __int16 v110 = 257;
      if (*(void *)v67 != v68)
      {
        if (v67[16] <= 0x14u)
        {
          v67 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v124
                                    + 28))(v124, 48, v67, v68);
          if (v67) {
            BOOL v71 = v67[16] >= 0x1Cu;
          }
          else {
            BOOL v71 = 0;
          }
          if (v71)
          {
            (*(void (**)(void *, unsigned __int8 *, unsigned char *, uint64_t *, uint64_t **))(*v125 + 16))(v125, v67, v109, v121, v122);
            if (v119)
            {
              unint64_t v96 = v118;
              unsigned int v97 = (char *)&v118[2 * v119];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v67, *(_DWORD *)v96, v96[1]);
                v96 += 2;
              }
              while (v96 != (llvm::MDNode **)v97);
            }
          }
        }
        else
        {
          __int16 v117 = 257;
          v67 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v67, v68, &v115, 0);
          (*(void (**)(void *, unsigned __int8 *, unsigned char *, uint64_t *, uint64_t **))(*v125 + 16))(v125, v67, v109, v121, v122);
          if (v119)
          {
            unint64_t v69 = v118;
            v70 = (char *)&v118[2 * v119];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v67, *(_DWORD *)v69, v69[1]);
              v69 += 2;
            }
            while (v69 != (llvm::MDNode **)v70);
          }
        }
      }
      __int16 v114 = 257;
      char v72 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v121[7] + 40) + 272), v61, 1);
      uint64_t v73 = operator new(0x60uLL);
      v73[13] = v73[13] & 0x38000000 | 1;
      v74 = (llvm::Instruction *)(v73 + 8);
      *(void *)uint64_t v73 = 0;
      *((void *)v73 + 1) = 0;
      *((void *)v73 + 2) = 0;
      *((void *)v73 + 3) = v73 + 8;
      __int16 v117 = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v73 + 8), (uint64_t)v61, (uint64_t)v67, &v115, 0, v72, 0);
      (*(void (**)(void *, llvm::Instruction *, void *, uint64_t *, uint64_t **))(*v125 + 16))(v125, v74, v113, v121, v122);
      if (v119)
      {
        unint64_t v88 = v118;
        v89 = (char *)&v118[2 * v119];
        do
        {
          llvm::Instruction::setMetadata(v74, *(_DWORD *)v88, v88[1]);
          v88 += 2;
        }
        while (v88 != (llvm::MDNode **)v89);
      }
      unint64_t v75 = sub_1CCB163B4(*(void **)(a1 + 32), v74, (uint64_t)&v118, (llvm::PointerType *)(*(void *)v123 + 1912), (llvm::Instruction *)0x104, 1);
      v77 = v76;
      uint64_t v78 = *(void *)v123 + 1912;
      unsigned int v79 = *(const llvm::APInt **)(a1 + 40);
      int v80 = *(_DWORD *)(a1 + 8);
      __int16 v117 = 257;
      uint64_t v81 = sub_1CB930CF4((uint64_t *)&v118, v78, v79, v80, (uint64_t)&v115);
      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v118, 194, (llvm::Value *)v75, 260, v81, 260, *(uint64_t **)(a1 + 56), 0, 0, 0, 0, 0);
      if (*(_DWORD *)(*(void *)(a1 + 24) + 4))
      {
        uint64_t v82 = *(void *)v123 + 1912;
        unsigned int v83 = *(const llvm::APInt **)(a1 + 48);
        int v84 = *(_DWORD *)(a1 + 8);
        __int16 v117 = 257;
        v85 = sub_1CB930CF4((uint64_t *)&v118, v82, v83, v84, (uint64_t)&v115);
        llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v118, 194, v77, 260, v85, 260, *(uint64_t **)(a1 + 56), 0, 0, 0, 0, 0);
      }
      if (v118 != (llvm::MDNode **)v120) {
        free(v118);
      }
    }
  }
}

unsigned __int8 *sub_1CCB15F70(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, llvm::Instruction *a5)
{
  if (a5 + a4 > 0x320) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(llvm::CastInst **)(v10 + 72);
  uint64_t v12 = *(llvm::Value **)(v10 + 24);
  __int16 v28 = 257;
  unsigned int v13 = sub_1CC277FE0(a3, v11, v12, (uint64_t)v27, a5);
  uint64_t v14 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 24) + 24), a4, 0);
  __int16 v28 = 257;
  uint64_t v5 = (unsigned __int8 *)sub_1CB844A3C(a3, v13, (uint64_t)v14, (uint64_t)v27, 0, 0);
  sub_1CCB17A70(*(void **)(a1 + 32), a2);
  unint64_t v16 = llvm::PointerType::get(v15, 0);
  v25[0] = "_msarg_va_s";
  __int16 v26 = 259;
  if (*(void *)v5 != v16)
  {
    if (v5[16] <= 0x14u)
    {
      uint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**(void **)(a3 + 72) + 224))(*(void *)(a3 + 72), 48, v5, v16);
      if (v5) {
        BOOL v20 = v5[16] >= 0x1Cu;
      }
      else {
        BOOL v20 = 0;
      }
      if (v20)
      {
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v5, v25, *(void *)(a3 + 48), *(void *)(a3 + 56));
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        if (v22)
        {
          uint64_t v23 = *(void *)a3;
          uint64_t v24 = v23 + 16 * v22;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v23, *(llvm::MDNode **)(v23 + 8));
            v23 += 16;
          }
          while (v23 != v24);
        }
      }
    }
    else
    {
      __int16 v28 = 257;
      uint64_t v5 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v5, v16, v27, 0);
      (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v5, v25, *(void *)(a3 + 48), *(void *)(a3 + 56));
      uint64_t v17 = *(unsigned int *)(a3 + 8);
      if (v17)
      {
        uint64_t v18 = *(void *)a3;
        uint64_t v19 = v18 + 16 * v17;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v18, *(llvm::MDNode **)(v18 + 8));
          v18 += 16;
        }
        while (v18 != v19);
      }
    }
  }
  return v5;
}

unsigned __int8 *sub_1CCB161A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, llvm::Instruction *a5)
{
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(llvm::CastInst **)(v8 + 80);
  uint64_t v10 = *(llvm::Value **)(v8 + 24);
  __int16 v26 = 257;
  uint64_t v11 = sub_1CC277FE0(a2, v9, v10, (uint64_t)v25, a5);
  uint64_t v12 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 24) + 24), a3, 0);
  __int16 v26 = 257;
  unsigned int v13 = (unsigned __int8 *)sub_1CB844A3C(a2, v11, (uint64_t)v12, (uint64_t)v25, 0, 0);
  unint64_t v14 = llvm::PointerType::get(*(llvm::PointerType **)(*(void *)(a1 + 24) + 32), 0);
  v23[0] = "_msarg_va_o";
  __int16 v24 = 259;
  if (*(void *)v13 != v14)
  {
    if (v13[16] <= 0x14u)
    {
      unsigned int v13 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**(void **)(a2 + 72) + 224))(*(void *)(a2 + 72), 48, v13, v14);
      if (v13) {
        BOOL v18 = v13[16] >= 0x1Cu;
      }
      else {
        BOOL v18 = 0;
      }
      if (v18)
      {
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v13, v23, *(void *)(a2 + 48), *(void *)(a2 + 56));
        uint64_t v20 = *(unsigned int *)(a2 + 8);
        if (v20)
        {
          uint64_t v21 = *(void *)a2;
          uint64_t v22 = v21 + 16 * v20;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v13, *(_DWORD *)v21, *(llvm::MDNode **)(v21 + 8));
            v21 += 16;
          }
          while (v21 != v22);
        }
      }
    }
    else
    {
      __int16 v26 = 257;
      unsigned int v13 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v13, v14, v25, 0);
      (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v13, v23, *(void *)(a2 + 48), *(void *)(a2 + 56));
      uint64_t v15 = *(unsigned int *)(a2 + 8);
      if (v15)
      {
        uint64_t v16 = *(void *)a2;
        uint64_t v17 = v16 + 16 * v15;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v13, *(_DWORD *)v16, *(llvm::MDNode **)(v16 + 8));
          v16 += 16;
        }
        while (v16 != v17);
      }
    }
  }
  return v13;
}

unsigned __int8 *sub_1CCB163B4(void *a1, llvm::CastInst *this, uint64_t a3, llvm::PointerType *a4, llvm::Instruction *a5, int a6)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a1[1];
  if (*(unsigned char *)v10)
  {
    unint64_t v13 = (unint64_t)(sub_1CB83544C(*(void *)(*a1 + 40) + 272, (uint64_t)a4) + 7) >> 3;
    if (v12 == 1) {
    unint64_t v14 = 0;
    }
    uint64_t v15 = 448;
    if (a6) {
      uint64_t v15 = 512;
    }
    uint64_t v16 = (uint64_t ***)(a1[1] + v15);
    uint64_t v17 = 0;
    switch((int)v13)
    {
      case 1:
        BOOL v18 = v16 + 1;
        goto LABEL_40;
      case 2:
        BOOL v18 = v16 + 3;
        v16 += 2;
        goto LABEL_40;
      case 3:
      case 5:
      case 6:
      case 7:
        break;
      case 4:
        BOOL v18 = v16 + 5;
        v16 += 4;
        goto LABEL_40;
      case 8:
        BOOL v18 = v16 + 7;
        v16 += 6;
LABEL_40:
        uint64_t v17 = *v16;
        unint64_t v14 = *v18;
        break;
      default:
        uint64_t v17 = 0;
        break;
    }
    v44 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(**(void **)(a3 + 64) + 1912), 0);
    __int16 v72 = 257;
    uint64_t v46 = sub_1CC277FE0(a3, this, v44, (uint64_t)v71, v45);
    v70 = v46;
    if (v14)
    {
      __int16 v72 = 257;
      v47 = (uint64_t *)&v70;
      uint64_t v48 = (uint64_t *)a3;
      v49 = v17;
      unsigned int v50 = v14;
      uint64_t v51 = 1;
    }
    else
    {
      v52 = v46;
      v53 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1[1] + 24), (int)v13, 0);
      uint64_t v54 = a1[1];
      uint64_t v55 = v54 + 432;
      uint64_t v56 = 416;
      if (a6) {
        uint64_t v56 = 432;
      }
      else {
        uint64_t v55 = v54 + 416;
      }
      v49 = *(uint64_t ***)(v54 + v56);
      unsigned int v50 = *(uint64_t ***)(v55 + 8);
      v73[0] = v52;
      v73[1] = v53;
      __int16 v72 = 257;
      v47 = v73;
      uint64_t v48 = (uint64_t *)a3;
      uint64_t v51 = 2;
    }
    v57 = (uint64_t *)sub_1CB845BAC(v48, v49, v50, v47, v51, (uint64_t)v71, 0);
    LODWORD(v73[0]) = 0;
    __int16 v72 = 257;
    unsigned int v58 = sub_1CC2415A4(a3, v57, (unsigned int *)v73, 1, (uint64_t)v71);
    unint64_t v59 = (llvm::Value *)llvm::PointerType::get(a4, 0);
    __int16 v72 = 257;
    __int16 v28 = (unsigned __int8 *)sub_1CC277FE0(a3, v58, v59, (uint64_t)v71, v60);
    LODWORD(v73[0]) = 1;
    __int16 v72 = 257;
    sub_1CC2415A4(a3, v57, (unsigned int *)v73, 1, (uint64_t)v71);
  }
  else
  {
    __int16 v19 = (__int16)a5;
    uint64_t v20 = *(llvm::Value **)(v10 + 24);
    __int16 v72 = 257;
    uint64_t v21 = sub_1CC277FE0(a3, this, v20, (uint64_t)v71, a5);
    uint64_t v22 = a1[1];
    uint64_t v23 = *(void **)(v22 + 592);
    if (*v23)
    {
      __int16 v24 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v22 + 24), ~*v23, 0);
      __int16 v72 = 257;
      uint64_t v21 = sub_1CBF52474(a3, v21, (uint64_t)v24, (uint64_t)v71);
      uint64_t v22 = a1[1];
      uint64_t v23 = *(void **)(v22 + 592);
    }
    unint64_t v25 = v23[1];
    if (v25)
    {
      __int16 v26 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v22 + 24), v25, 0);
      __int16 v72 = 257;
      uint64_t v21 = sub_1CC2428C0(a3, (uint64_t)v21, (uint64_t)v26, (uint64_t)v71);
      uint64_t v22 = a1[1];
      uint64_t v23 = *(void **)(v22 + 592);
    }
    unint64_t v27 = v23[2];
    __int16 v28 = (unsigned __int8 *)v21;
    if (v27)
    {
      uint64_t v29 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v22 + 24), v27, 0);
      __int16 v72 = 257;
      __int16 v28 = (unsigned __int8 *)sub_1CB844A3C(a3, v21, (uint64_t)v29, (uint64_t)v71, 0, 0);
    }
    unint64_t v30 = llvm::PointerType::get(a4, 0);
    __int16 v74 = 257;
    if (*(void *)v28 != v30)
    {
      if (v28[16] <= 0x14u)
      {
        __int16 v28 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**(void **)(a3 + 72) + 224))(*(void *)(a3 + 72), 48, v28, v30);
        if (v28) {
          BOOL v34 = v28[16] >= 0x1Cu;
        }
        else {
          BOOL v34 = 0;
        }
        if (v34)
        {
          (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v28, v73, *(void *)(a3 + 48), *(void *)(a3 + 56));
          uint64_t v67 = *(unsigned int *)(a3 + 8);
          if (v67)
          {
            uint64_t v68 = *(void *)a3;
            uint64_t v69 = *(void *)a3 + 16 * v67;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v28, *(_DWORD *)v68, *(llvm::MDNode **)(v68 + 8));
              v68 += 16;
            }
            while (v68 != v69);
          }
        }
      }
      else
      {
        __int16 v72 = 257;
        __int16 v28 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v28, v30, v71, 0);
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v28, v73, *(void *)(a3 + 48), *(void *)(a3 + 56));
        uint64_t v31 = *(unsigned int *)(a3 + 8);
        if (v31)
        {
          uint64_t v32 = *(void *)a3;
          uint64_t v33 = *(void *)a3 + 16 * v31;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v28, *(_DWORD *)v32, *(llvm::MDNode **)(v32 + 8));
            v32 += 16;
          }
          while (v32 != v33);
        }
      }
    }
    uint64_t v35 = a1[1];
    if (*(_DWORD *)(v35 + 4))
    {
      unint64_t v36 = *(void *)(*(void *)(v35 + 592) + 24);
      if (v36)
      {
        uint64_t v37 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v35 + 24), v36, 0);
        __int16 v72 = 257;
        uint64_t v21 = sub_1CB844A3C(a3, v21, (uint64_t)v37, (uint64_t)v71, 0, 0);
        uint64_t v35 = a1[1];
      }
      if ((v19 & 0xFF00) == 0 || v19 < word_1EBCE87F0)
      {
        v38 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v35 + 24), -1 << word_1EBCE87F0, 0);
        __int16 v72 = 257;
        uint64_t v21 = sub_1CBF52474(a3, v21, (uint64_t)v38, (uint64_t)v71);
        uint64_t v35 = a1[1];
      }
      unint64_t v39 = llvm::PointerType::get(*(llvm::PointerType **)(v35 + 32), 0);
      __int16 v74 = 257;
      if (*(void *)v21 != v39)
      {
        if (*((unsigned __int8 *)v21 + 16) <= 0x14u)
        {
          uint64_t v62 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, unint64_t))(**(void **)(a3 + 72) + 224))(*(void *)(a3 + 72), 48, v21, v39);
          if (v62) {
            BOOL v63 = v62[16] >= 0x1Cu;
          }
          else {
            BOOL v63 = 0;
          }
          if (v63)
          {
            (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v62, v73, *(void *)(a3 + 48), *(void *)(a3 + 56));
            uint64_t v64 = *(unsigned int *)(a3 + 8);
            if (v64)
            {
              uint64_t v65 = *(void *)a3;
              uint64_t v66 = v65 + 16 * v64;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v62, *(_DWORD *)v65, *(llvm::MDNode **)(v65 + 8));
                v65 += 16;
              }
              while (v65 != v66);
            }
          }
        }
        else
        {
          __int16 v72 = 257;
          char v40 = llvm::CastInst::Create(48, (uint64_t)v21, v39, v71, 0);
          (*(void (**)(void, llvm::Instruction *, void *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v40, v73, *(void *)(a3 + 48), *(void *)(a3 + 56));
          uint64_t v41 = *(unsigned int *)(a3 + 8);
          if (v41)
          {
            uint64_t v42 = *(void *)a3;
            uint64_t v43 = v42 + 16 * v41;
            do
            {
              llvm::Instruction::setMetadata(v40, *(_DWORD *)v42, *(llvm::MDNode **)(v42 + 8));
              v42 += 16;
            }
            while (v42 != v43);
          }
        }
      }
    }
  }
  return v28;
}

llvm::Value *sub_1CCB16AB0(uint64_t a1, uint64_t a2)
{
  v137[1] = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v4 >= 0x1C)
  {
    if (*(unsigned char *)(a1 + 457)
      && (!*(void *)(a2 + 48) && (*(unsigned char *)(a2 + 23) & 0x20) == 0
       || !llvm::Instruction::getMetadataImpl((uint64_t ***)a2, "nosanitize", 0xAuLL)))
    {
      return (llvm::Value *)*sub_1CD694530(a1 + 304, a2);
    }
    goto LABEL_18;
  }
  if (a2 && v4 - 13 >= 0xFFFFFFFE)
  {
    if (*(unsigned char *)(a1 + 457) && *(unsigned char *)(a1 + 459))
    {
      sub_1CCB17A70((void *)a1, *(void *)a2);
      if (v6)
      {
        return (llvm::Value *)sub_1CCB181BC(v6, v7, v8);
      }
      return 0;
    }
LABEL_18:
    sub_1CCB17A70((void *)a1, *(void *)a2);
    if (v10)
    {
      return llvm::Constant::getNullValue(v10, v11, v12);
    }
    return 0;
  }
  if (!a2 || v4 != 21) {
    goto LABEL_18;
  }
  unint64_t v13 = sub_1CD694530(a1 + 304, a2);
  unint64_t v5 = *v13;
  if (*v13) {
    return (llvm::Value *)v5;
  }
  unsigned int v116 = v13;
  uint64_t v14 = 0;
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = *(uint64_t ***)(a1 + 448);
  uint64_t v17 = **v16;
  v122 = v124;
  uint64_t v123 = 0x200000000;
  uint64_t v127 = v17;
  __int16 v128 = &v136;
  char v129 = v137;
  uint64_t v130 = 0;
  int v131 = 0;
  __int16 v132 = 512;
  char v133 = 7;
  v125 = 0;
  uint64_t v126 = 0;
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  v136 = &unk_1F2616E88;
  v137[0] = &unk_1F2617008;
  v125 = v16[5];
  uint64_t v126 = v16 + 3;
  BOOL v18 = (unsigned __int8 *)v16[6];
  v117[0] = v18;
  if (v18)
  {
    llvm::MetadataTracking::track((uint64_t)v117, v18, 2);
    uint64_t v14 = v117[0];
  }
  sub_1CB8461A4((uint64_t)&v122, 0, v14);
  if (v117[0])
  {
    int v67 = *(unsigned __int8 *)v117[0];
    if ((v67 - 4) > 0x1E)
    {
      if ((v67 - 3) >= 0xFFFFFFFE) {
        uint64_t v70 = v117[0];
      }
      else {
        uint64_t v70 = 0;
      }
      if ((v67 - 3) < 0xFFFFFFFE)
      {
        if (v67 == 3) {
          *(void *)(v117[0] + 8) = 0;
        }
        goto LABEL_28;
      }
      unint64_t v69 = v70 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v117[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v117[0] + 12)) {
        goto LABEL_28;
      }
      uint64_t v68 = *(void *)(v117[0] + 16);
      if ((v68 & 4) == 0) {
        goto LABEL_28;
      }
      unint64_t v69 = v68 & 0xFFFFFFFFFFFFFFF8;
      if (!v69) {
        goto LABEL_28;
      }
    }
    uint64_t v119 = (const char *)v117;
    sub_1CC5FA668(v69 + 16, &v119);
  }
LABEL_28:
  uint64_t v19 = *(void *)(v15 + 40);
  if (*(_WORD *)(v15 + 18))
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)v15);
    uint64_t v20 = *(void *)(v15 + 88);
    if (*(_WORD *)(v15 + 18))
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v15);
      uint64_t v21 = *(void *)(v15 + 88);
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v20 = *(void *)(v15 + 88);
  }
  uint64_t v21 = v20;
LABEL_31:
  uint64_t v22 = v21 + 40 * *(void *)(v15 + 96);
  if (v20 == v22) {
    goto LABEL_124;
  }
  int v23 = 0;
  __int16 v24 = (llvm::DataLayout *)(v19 + 272);
  while (1)
  {
    ParamByValType = *(llvm::Type **)v20;
    unsigned int v26 = *(unsigned __int8 *)(*(void *)v20 + 8);
    if (v26 > 0x11) {
      goto LABEL_47;
    }
    if (((1 << v26) & 0xAC7F) != 0) {
      goto LABEL_35;
    }
    if (((1 << v26) & 0x30000) == 0)
    {
LABEL_47:
      if ((v26 & 0xFE) != 0x12 && v26 != 21) {
        goto LABEL_42;
      }
    }
    if (!llvm::Type::isSizedDerivedType(*(void *)v20, 0)) {
      goto LABEL_42;
    }
    ParamByValType = *(llvm::Type **)v20;
    unsigned int v26 = *(unsigned __int8 *)(*(void *)v20 + 8);
LABEL_35:
    int v27 = v23;
    if (v26 == 15)
    {
      uint64_t v28 = *(void *)(v20 + 24);
      uint64_t v31 = *(void *)(v28 + 112);
      uint64_t v29 = (llvm::AttributeList *)(v28 + 112);
      uint64_t v30 = v31;
      if (v31)
      {
        int v32 = *(_DWORD *)(v20 + 32);
        if ((v32 + 2) < *(_DWORD *)(v30 + 8))
        {
          uint64_t v41 = *(void *)(v30 + 8 * (v32 + 2) + 40);
          if (v41)
          {
            if ((*(unsigned char *)(v41 + 20) & 0x20) != 0) {
              ParamByValType = (llvm::Type *)llvm::AttributeList::getParamByValType(v29, v32);
            }
          }
        }
      }
    }
    uint64_t v33 = sub_1CB83544C((uint64_t)v24, (uint64_t)ParamByValType);
    int v35 = v34;
    char Alignment = llvm::DataLayout::getAlignment(v24, ParamByValType, 1);
    if (v35 == 1) {
    unint64_t v39 = ((1 << Alignment) + ((unint64_t)(v33 + 7) >> 3) - 1) & -(1 << Alignment);
    }
    if (v20 == a2) {
      break;
    }
    int v23 = v27 + ((v39 + (1 << SHIBYTE(word_1EBCE87F0)) - 1) & -(int)(1 << SHIBYTE(word_1EBCE87F0)));
LABEL_42:
    v20 += 40;
    if (v20 == v22) {
      goto LABEL_124;
    }
  }
  unsigned int v42 = v27 + v39;
  if (*(unsigned char *)(*(void *)a2 + 8) == 15)
  {
    uint64_t v43 = *(void *)(a2 + 24);
    uint64_t v46 = *(void *)(v43 + 112);
    char v45 = (llvm::AttributeList *)(v43 + 112);
    uint64_t v44 = v46;
    if (v46)
    {
      int v47 = *(_DWORD *)(a2 + 32);
      if ((v47 + 2) < *(_DWORD *)(v44 + 8))
      {
        uint64_t v73 = *(llvm::AttributeSetNode **)(v44 + 8 * (v47 + 2) + 40);
        if (v73)
        {
          if ((*((unsigned char *)v73 + 20) & 0x20) != 0)
          {
            __int16 v74 = llvm::AttributeSetNode::getAlignment(v73);
            uint64_t v75 = (llvm::Type *)llvm::AttributeList::getParamByValType(v45, v47);
            unint64_t v76 = __clz(1 << v74) ^ 0x13F;
            if ((v74 & 0xFF00) == 0) {
              unint64_t v76 = 0;
            }
            unsigned __int8 v77 = v76;
            if (v76 <= 0xFF) {
              unsigned __int8 v77 = llvm::DataLayout::getAlignment(v24, v75, 1);
            }
            uint64_t v78 = sub_1CCB163B4((void *)a1, (llvm::CastInst *)a2, (uint64_t)&v122, (llvm::PointerType *)(*(void *)v127 + 1912), (llvm::Instruction *)(v77 | 0x100), 1);
            __int16 v114 = v79;
            v115 = (llvm::Value *)v78;
            uint64_t v82 = v39;
            if (*(unsigned char *)(a1 + 457) && v42 < 0x321)
            {
              v113 = sub_1CCB17D74((void *)a1, (uint64_t *)a2, (uint64_t)&v122, v27, v81);
              if (HIBYTE(word_1EBCE87F0) >= v77) {
                __int16 v84 = v77;
              }
              else {
                __int16 v84 = HIBYTE(word_1EBCE87F0);
              }
              __int16 v85 = v84 | 0x100;
              v86 = *(llvm::ConstantInt **)(*(void *)v127 + 1984);
              unsigned int v87 = *(_DWORD *)(*(void *)v127 + 1992);
              unsigned int v120 = v87 >> 8;
              if (v87 >> 8 > 0x40) {
                operator new[]();
              }
              if (v87 <= 0xFF) {
                LODWORD(v88) = 0;
              }
              else {
                unint64_t v88 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v87) + 63);
              }
              uint64_t v119 = (const char *)(v88 & v39);
              v89 = llvm::ConstantInt::get(v86, (llvm::LLVMContext *)&v119, v83);
              if (v120 >= 0x41 && v119) {
                MEMORY[0x1D25D9CB0](v119, 0x1000C8000313F17);
              }
              llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v122, 194, v115, v85, v113, v85, v89, 0, 0, 0, 0, 0);
              if (*(_DWORD *)(*(void *)(a1 + 8) + 4))
              {
                unint64_t v92 = sub_1CCB17F94(a1, (uint64_t)&v122, v27, v90, v37);
                uint64_t v93 = -(int)(1 << word_1EBCE87F0) & (v39 + (1 << word_1EBCE87F0) - 1);
                __int16 v94 = word_1EBCE87F0 | 0x100;
                v95 = *(llvm::ConstantInt **)(*(void *)v127 + 1984);
                unsigned int v96 = *(_DWORD *)(*(void *)v127 + 1992);
                unsigned int v120 = v96 >> 8;
                if (v96 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v96 <= 0xFF) {
                  unint64_t v97 = 0;
                }
                else {
                  unint64_t v97 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v96) + 63);
                }
                uint64_t v119 = (const char *)(v97 & v93);
                unsigned int v98 = llvm::ConstantInt::get(v95, (llvm::LLVMContext *)&v119, v91);
                if (v120 >= 0x41 && v119) {
                  MEMORY[0x1D25D9CB0](v119, 0x1000C8000313F17);
                }
                llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v122, 194, v114, v94, v92, v94, v98, 0, 0, 0, 0, 0);
              }
            }
            else
            {
              NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(void *)v127 + 1912), v79, v80);
              v109 = *(llvm::ConstantInt **)(*(void *)v127 + 1984);
              unsigned int v110 = *(_DWORD *)(*(void *)v127 + 1992);
              unsigned int v120 = v110 >> 8;
              if (v110 >> 8 > 0x40) {
                operator new[]();
              }
              if (v110 <= 0xFF) {
                unint64_t v111 = 0;
              }
              else {
                unint64_t v111 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v110) + 63);
              }
              uint64_t v119 = (const char *)(v111 & v82);
              __int16 v112 = llvm::ConstantInt::get(v109, (llvm::LLVMContext *)&v119, v107);
              if (v120 >= 0x41 && v119) {
                MEMORY[0x1D25D9CB0](v119, 0x1000C8000313F17);
              }
              llvm::IRBuilderBase::CreateMemSet((uint64_t)&v122, v115, (uint64_t)NullValue, v112, v77 | 0x100, 0, 0, 0, 0);
            }
          }
        }
      }
    }
  }
  uint64_t v48 = *(uint64_t ***)a2;
  if (!*(unsigned char *)(a1 + 457)
    || v42 > 0x320
    || *((unsigned char *)v48 + 8) == 15
    && (uint64_t v49 = *(void *)(*(void *)(a2 + 24) + 112)) != 0
    && (unsigned int v50 = *(_DWORD *)(a2 + 32) + 2, v50 < *(_DWORD *)(v49 + 8))
    && (uint64_t v101 = *(void *)(v49 + 8 * v50 + 40)) != 0
    && (*(unsigned char *)(v101 + 20) & 0x20) != 0
    || *(unsigned char *)(*(void *)(a1 + 8) + 9)
    && (uint64_t v51 = *(void *)(*(void *)(a2 + 24) + 112)) != 0
    && (unsigned int v52 = *(_DWORD *)(a2 + 32) + 2, v52 < *(_DWORD *)(v51 + 8))
    && (uint64_t v102 = *(void *)(v51 + 8 * v52 + 40)) != 0
    && (*(unsigned char *)(v102 + 16) & 0x10) != 0)
  {
    sub_1CCB17A70((void *)a1, (uint64_t)v48);
    if (v103) {
      v103 = llvm::Constant::getNullValue(v103, v104, v105);
    }
    *unsigned int v116 = (unint64_t)v103;
    unint64_t v106 = llvm::Constant::getNullValue(*(llvm::Constant **)(*(void *)(a1 + 8) + 32), v104, v105);
    if (!*(_DWORD *)(*(void *)(a1 + 8) + 4)) {
      goto LABEL_124;
    }
    uint64_t v66 = v106;
LABEL_127:
    *sub_1CD694530(a1 + 368, a2) = (unint64_t)v66;
    goto LABEL_124;
  }
  int v53 = v27;
  uint64_t v54 = sub_1CCB17D74((void *)a1, (uint64_t *)a2, (uint64_t)&v122, v27, v37);
  sub_1CCB17A70((void *)a1, *(void *)a2);
  uint64_t v56 = v55;
  char v57 = HIBYTE(word_1EBCE87F0);
  __int16 v118 = 257;
  unsigned int v58 = operator new(0x60uLL);
  v58[13] = v58[13] & 0x38000000 | 1;
  unint64_t v59 = (llvm::Instruction *)(v58 + 8);
  *(void *)unsigned int v58 = 0;
  *((void *)v58 + 1) = 0;
  *((void *)v58 + 2) = 0;
  *((void *)v58 + 3) = v58 + 8;
  __int16 v121 = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v58 + 8), v56, (uint64_t)v54, &v119, 0, v57, 0);
  (*(void (**)(void *, llvm::Instruction *, void *, uint64_t *, uint64_t **))(*v129 + 16))(v129, v59, v117, v125, v126);
  if (v123)
  {
    BOOL v71 = (llvm::MDNode **)v122;
    __int16 v72 = (llvm::MDNode **)((char *)v122 + 16 * v123);
    do
    {
      llvm::Instruction::setMetadata(v59, *(_DWORD *)v71, v71[1]);
      v71 += 2;
    }
    while (v71 != v72);
  }
  *unsigned int v116 = (unint64_t)v59;
  if (*(_DWORD *)(*(void *)(a1 + 8) + 4))
  {
    uint64_t v62 = sub_1CCB17F94(a1, (uint64_t)&v122, v53, v60, v61);
    BOOL v63 = *(llvm::Type **)(*(void *)(a1 + 8) + 32);
    __int16 v118 = 257;
    char v64 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v125[7] + 40) + 272), v63, 1);
    uint64_t v65 = operator new(0x60uLL);
    v65[13] = v65[13] & 0x38000000 | 1;
    uint64_t v66 = (llvm::Instruction *)(v65 + 8);
    *(void *)uint64_t v65 = 0;
    *((void *)v65 + 1) = 0;
    *((void *)v65 + 2) = 0;
    *((void *)v65 + 3) = v65 + 8;
    __int16 v121 = 257;
    llvm::LoadInst::LoadInst((llvm::Value *)(v65 + 8), (uint64_t)v63, (uint64_t)v62, &v119, 0, v64, 0);
    (*(void (**)(void *, llvm::Instruction *, void *, uint64_t *, uint64_t **))(*v129 + 16))(v129, v66, v117, v125, v126);
    if (v123)
    {
      unint64_t v99 = (llvm::MDNode **)v122;
      unsigned int v100 = (llvm::MDNode **)((char *)v122 + 16 * v123);
      do
      {
        llvm::Instruction::setMetadata(v66, *(_DWORD *)v99, v99[1]);
        v99 += 2;
      }
      while (v99 != v100);
    }
    if (*(_DWORD *)(*(void *)(a1 + 8) + 4)) {
      goto LABEL_127;
    }
  }
LABEL_124:
  unint64_t v5 = *v116;
  if (v122 != v124) {
    free(v122);
  }
  return (llvm::Value *)v5;
}

llvm::Value *sub_1CCB176E8(uint64_t a1, uint64_t a2, const llvm::APFloat *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(_DWORD *)(v3 + 4)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 457))
  {
    unsigned int v6 = *(unsigned __int8 *)(a2 + 16);
    if (v6 > 0x14)
    {
      if (v6 < 0x1C
        || !*(void *)(a2 + 48) && (*(unsigned char *)(a2 + 23) & 0x20) == 0
        || !llvm::Instruction::getMetadataImpl((uint64_t ***)a2, "nosanitize", 0xAuLL))
      {
        return (llvm::Value *)*sub_1CD694530(a1 + 368, a2);
      }
      uint64_t v3 = *(void *)(a1 + 8);
    }
  }
  uint64_t v7 = *(llvm::Constant **)(v3 + 32);

  return llvm::Constant::getNullValue(v7, (llvm::Type *)a2, a3);
}

uint64_t sub_1CCB17798(void *a1, uint64_t *a2, llvm::CastInst *a3, llvm::CastInst *a4, unsigned int a5, unsigned __int8 a6)
{
  uint64_t v11 = a1;
  uint64_t v12 = *(void *)(*a1 + 40) + 272;
  unsigned __int8 Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)v12, *(llvm::Type **)(a1[1] + 24), 1);
  uint64_t result = sub_1CB83544C(v12, *(void *)(v11[1] + 24));
  unint64_t v16 = result + 7;
  if (v15 == 1) {
  unint64_t v17 = v16 >> 3;
  }
  if (a6 >= Alignment && v17 >= 5)
  {
    unsigned __int8 v42 = a6;
    uint64_t v22 = sub_1CB83544C(*(void *)(*v11 + 40) + 272, *(void *)(v11[1] + 24)) + 7;
    if (v20 == 1) {
    unsigned __int8 v44 = Alignment;
    }
    int v23 = a3;
    if ((v22 & 0x7FFFFFFF8) != 0x20)
    {
      __int16 v24 = *(llvm::Type ****)(v11[1] + 24);
      __int16 v48 = 257;
      uint64_t v12 = (uint64_t)sub_1CBF56614((uint64_t)a2, a3, v24, 0, (uint64_t)v47, v21);
      __int16 v48 = 257;
      unint64_t v25 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v12, 0x20uLL, 0);
      unsigned int v26 = sub_1CC242524((uint64_t)a2, v12, (uint64_t)v25, (uint64_t)v47, 0, 0);
      __int16 v46 = 257;
      int v23 = sub_1CB844AF4((uint64_t)a2, (void *)v12, (uint64_t)v26, (uint64_t)v45);
    }
    uint64_t v43 = v11;
    int v27 = (llvm::Value *)llvm::PointerType::get(*(llvm::PointerType **)(v11[1] + 24), 0);
    __int16 v48 = 257;
    uint64_t result = (uint64_t)sub_1CC277FE0((uint64_t)a2, a4, v27, (uint64_t)v47, v28);
    if (v17 <= a5)
    {
      uint64_t v29 = (const llvm::APInt *)result;
      uint64_t v41 = a3;
      LODWORD(v12) = 0;
      unsigned int v19 = 0;
      unsigned int v40 = a5;
      unsigned int v30 = a5 / v17;
      unsigned int v31 = v17 >> 2;
      if (v30 <= 1) {
        int v32 = 1;
      }
      else {
        int v32 = v30;
      }
      unsigned __int8 v33 = v42;
      do
      {
        int v34 = v29;
        if (v12)
        {
          uint64_t v35 = *(void *)(v43[1] + 24);
          __int16 v48 = 257;
          int v34 = sub_1CB930CF4(a2, v35, v29, v12, (uint64_t)v47);
        }
        unint64_t v36 = v17 & 0xFFFFFFFFFFFF0000 | v33;
        unint64_t v17 = v36 | 0x100;
        uint64_t result = (uint64_t)sub_1CC27BF8C(a2, (uint64_t)v23, (uint64_t)v34, (unsigned __int16)v36 | 0x100u, 0);
        v19 += v31;
        uint64_t v12 = (v12 + 1);
        unsigned __int8 v33 = v44;
      }
      while (v32 != v12);
      a6 = v44;
      a3 = v41;
      uint64_t v11 = v43;
      a5 = v40;
    }
    else
    {
      unsigned int v19 = 0;
      a6 = v42;
    }
  }
  else
  {
    unsigned int v19 = 0;
  }
  if (v19 < (a5 + 3) >> 2)
  {
    do
    {
      uint64_t v37 = a4;
      if (v19)
      {
        uint64_t v38 = *(void *)(v11[1] + 32);
        __int16 v48 = 257;
        uint64_t v37 = sub_1CB930CF4(a2, v38, a4, v19, (uint64_t)v47);
      }
      unint64_t v39 = v12 & 0xFFFFFFFFFFFF0000 | a6;
      uint64_t v12 = v39 | 0x100;
      uint64_t result = (uint64_t)sub_1CC27BF8C(a2, (uint64_t)a3, (uint64_t)v37, (unsigned __int16)v39 | 0x100u, 0);
      a6 = word_1EBCE87F0;
      ++v19;
    }
    while ((a5 + 3) >> 2 != v19);
  }
  return result;
}

void sub_1CCB17A70(void *a1, uint64_t a2)
{
  v22[4] = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *(_DWORD *)(a2 + 8);
  if (v4 > 0x11u) {
    goto LABEL_30;
  }
  if (((1 << v4) & 0xAC7F) == 0)
  {
    if (((1 << v4) & 0x30000) != 0)
    {
LABEL_17:
      if (!llvm::Type::isSizedDerivedType(a2, 0)) {
        return;
      }
      unsigned int v4 = *(_DWORD *)(a2 + 8);
      goto LABEL_3;
    }
LABEL_30:
    if ((v4 & 0xFE) != 0x12 && v4 != 21) {
      return;
    }
    goto LABEL_17;
  }
LABEL_3:
  if (v4 != 13)
  {
    uint64_t v5 = *(void *)(*a1 + 40) + 272;
    if ((v4 & 0xFE) == 0x12)
    {
      uint64_t v7 = (llvm::LLVMContext *)sub_1CB83544C(v5, *(void *)(a2 + 24));
      if (v6 == 1) {
      uint64_t v8 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)(a1[1] + 16), v7);
      }
      uint64_t v9 = (llvm::Type *)*(unsigned int *)(a2 + 32);
      llvm::FixedVectorType::get(v8, v9);
    }
    else if (v4 == 16)
    {
      unsigned int v21 = 0;
      uint64_t v12 = *(unsigned int *)(a2 + 12);
      if (v12)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 8 * v12;
        do
        {
          uint64_t v15 = sub_1CCB17A70(a1, *(void *)(*(void *)(a2 + 16) + v13));
          if (v21 >= 4uLL) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v22[v21] = v15;
          uint64_t v16 = ++v21;
          v13 += 8;
        }
        while (v14 != v13);
        unsigned int v4 = *(_DWORD *)(a2 + 8);
      }
      else
      {
        uint64_t v16 = 0;
      }
      llvm::StructType::get(*(uint64_t **)(a1[1] + 16), (uint64_t)v22, v16, (v4 >> 9) & 1);
    }
    else if (v4 == 17)
    {
      uint64_t v10 = (llvm::ArrayType *)sub_1CCB17A70(a1, *(void *)(a2 + 24));
      uint64_t v11 = *(llvm::Type **)(a2 + 32);
      llvm::ArrayType::get(v10, v11);
    }
    else
    {
      BOOL v18 = (llvm::LLVMContext *)sub_1CB83544C(v5, a2);
      if (v17 == 1) {
      unsigned int v19 = *(llvm::IntegerType **)(a1[1] + 16);
      }
      llvm::IntegerType::get(v19, v18);
    }
  }
}

llvm::Instruction *sub_1CCB17D74(void *a1, uint64_t *a2, uint64_t a3, int a4, llvm::Instruction *a5)
{
  uint64_t v9 = a1[1];
  uint64_t v10 = *(llvm::CastInst **)(v9 + 40);
  uint64_t v11 = *(llvm::Value **)(v9 + 24);
  __int16 v27 = 257;
  uint64_t v12 = sub_1CC277FE0(a3, v10, v11, (uint64_t)v26, a5);
  if (a4)
  {
    uint64_t v13 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1[1] + 24), a4, 0);
    __int16 v27 = 257;
    uint64_t v12 = sub_1CB844A3C(a3, v12, (uint64_t)v13, (uint64_t)v26, 0, 0);
  }
  sub_1CCB17A70(a1, *a2);
  unint64_t v15 = llvm::PointerType::get(v14, 0);
  v24[0] = "_msarg";
  __int16 v25 = 259;
  if (*(void *)v12 != v15)
  {
    if (*((unsigned __int8 *)v12 + 16) <= 0x14u)
    {
      uint64_t v12 = (llvm::Instruction *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, unint64_t))(**(void **)(a3 + 72) + 224))(*(void *)(a3 + 72), 48, v12, v15);
      if (v12) {
        BOOL v19 = *((unsigned __int8 *)v12 + 16) >= 0x1Cu;
      }
      else {
        BOOL v19 = 0;
      }
      if (v19)
      {
        (*(void (**)(void, llvm::Instruction *, void *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v12, v24, *(void *)(a3 + 48), *(void *)(a3 + 56));
        uint64_t v21 = *(unsigned int *)(a3 + 8);
        if (v21)
        {
          uint64_t v22 = *(void *)a3;
          uint64_t v23 = v22 + 16 * v21;
          do
          {
            llvm::Instruction::setMetadata(v12, *(_DWORD *)v22, *(llvm::MDNode **)(v22 + 8));
            v22 += 16;
          }
          while (v22 != v23);
        }
      }
    }
    else
    {
      __int16 v27 = 257;
      uint64_t v12 = llvm::CastInst::Create(48, (uint64_t)v12, v15, v26, 0);
      (*(void (**)(void, llvm::Instruction *, void *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v12, v24, *(void *)(a3 + 48), *(void *)(a3 + 56));
      uint64_t v16 = *(unsigned int *)(a3 + 8);
      if (v16)
      {
        uint64_t v17 = *(void *)a3;
        uint64_t v18 = v17 + 16 * v16;
        do
        {
          llvm::Instruction::setMetadata(v12, *(_DWORD *)v17, *(llvm::MDNode **)(v17 + 8));
          v17 += 16;
        }
        while (v17 != v18);
      }
    }
  }
  return v12;
}

llvm::Instruction *sub_1CCB17F94(uint64_t a1, uint64_t a2, int a3, uint64_t a4, llvm::Instruction *a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (!*(_DWORD *)(v5 + 4)) {
    return 0;
  }
  uint64_t v9 = *(llvm::CastInst **)(v5 + 48);
  uint64_t v10 = *(llvm::Value **)(v5 + 24);
  __int16 v25 = 257;
  uint64_t v11 = sub_1CC277FE0(a2, v9, v10, (uint64_t)v24, a5);
  if (a3)
  {
    uint64_t v12 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 8) + 24), a3, 0);
    __int16 v25 = 257;
    uint64_t v11 = sub_1CB844A3C(a2, v11, (uint64_t)v12, (uint64_t)v24, 0, 0);
  }
  unint64_t v13 = llvm::PointerType::get(*(llvm::PointerType **)(*(void *)(a1 + 8) + 32), 0);
  v22[0] = "_msarg_o";
  __int16 v23 = 259;
  if (*(void *)v11 != v13)
  {
    if (*((unsigned __int8 *)v11 + 16) <= 0x14u)
    {
      uint64_t v11 = (llvm::Instruction *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, unint64_t))(**(void **)(a2 + 72) + 224))(*(void *)(a2 + 72), 48, v11, v13);
      if (v11) {
        BOOL v17 = *((unsigned __int8 *)v11 + 16) >= 0x1Cu;
      }
      else {
        BOOL v17 = 0;
      }
      if (v17)
      {
        (*(void (**)(void, llvm::Instruction *, void *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v11, v22, *(void *)(a2 + 48), *(void *)(a2 + 56));
        uint64_t v19 = *(unsigned int *)(a2 + 8);
        if (v19)
        {
          uint64_t v20 = *(void *)a2;
          uint64_t v21 = v20 + 16 * v19;
          do
          {
            llvm::Instruction::setMetadata(v11, *(_DWORD *)v20, *(llvm::MDNode **)(v20 + 8));
            v20 += 16;
          }
          while (v20 != v21);
        }
      }
    }
    else
    {
      __int16 v25 = 257;
      uint64_t v11 = llvm::CastInst::Create(48, (uint64_t)v11, v13, v24, 0);
      (*(void (**)(void, llvm::Instruction *, void *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v11, v22, *(void *)(a2 + 48), *(void *)(a2 + 56));
      uint64_t v14 = *(unsigned int *)(a2 + 8);
      if (v14)
      {
        uint64_t v15 = *(void *)a2;
        uint64_t v16 = v15 + 16 * v14;
        do
        {
          llvm::Instruction::setMetadata(v11, *(_DWORD *)v15, *(llvm::MDNode **)(v15 + 8));
          v15 += 16;
        }
        while (v15 != v16);
      }
    }
  }
  return v11;
}

void *sub_1CCB181BC(uint64_t a1, llvm::Type *a2, const llvm::APInt *a3)
{
  v19[4] = *MEMORY[0x1E4F143B8];
  int v5 = *(_DWORD *)(a1 + 8);
  if (v5 != 13 && (*(_DWORD *)(a1 + 8) & 0xFE) != 18)
  {
    if (v5 == 16)
    {
      BOOL v17 = v19;
      uint64_t v18 = 0x400000000;
      uint64_t v11 = *(unsigned int *)(a1 + 12);
      if (v11)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 8 * v11;
        do
        {
          uint64_t v14 = sub_1CCB181BC(*(void *)(*(void *)(a1 + 16) + v12));
          if (v18 >= (unint64_t)HIDWORD(v18)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v17 + v18) = v14;
          uint64_t v15 = (v18 + 1);
          LODWORD(v18) = v18 + 1;
          v12 += 8;
        }
        while (v13 != v12);
        uint64_t v16 = (llvm::Type *)v17;
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v16 = (llvm::Type *)v19;
      }
      uint64_t v3 = llvm::ConstantStruct::get((llvm::PoisonValue *)a1, v16, v15);
      uint64_t v10 = v17;
      if (v17 == v19) {
        return v3;
      }
    }
    else
    {
      if (v5 != 17) {
        return v3;
      }
      unint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = sub_1CCB181BC(*(void *)(a1 + 24));
      BOOL v17 = v19;
      uint64_t v18 = 0x400000000;
      sub_1CBFC6B20((uint64_t)&v17, v8, v9);
      uint64_t v3 = llvm::ConstantArray::get((llvm::PoisonValue *)a1, (llvm::Type *)v17, v18);
      uint64_t v10 = v17;
      if (v17 == v19) {
        return v3;
      }
    }
    free(v10);
    return v3;
  }

  return llvm::Constant::getAllOnesValue((llvm::Constant *)a1, a2, a3);
}

void sub_1CCB18394(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = 0;
  v37[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = **a2;
  v25[0] = v26;
  v25[1] = (void *)0x200000000;
  uint64_t v27 = v5;
  uint64_t v28 = &v36;
  uint64_t v29 = v37;
  uint64_t v30 = 0;
  int v31 = 0;
  __int16 v32 = 512;
  char v33 = 7;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  unint64_t v36 = &unk_1F2616E88;
  v37[0] = &unk_1F2617008;
  unsigned int v6 = a2 + 3;
  unint64_t v8 = a2[5];
  uint64_t v7 = (unsigned __int8 *)a2[6];
  v26[4] = v8;
  v26[5] = v6;
  uint64_t v22 = v7;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)&v22, v7, 2);
    uint64_t v4 = (uint64_t)v22;
  }
  sub_1CB8461A4((uint64_t)v25, 0, v4);
  if (v22)
  {
    int v18 = *v22;
    if ((v18 - 4) > 0x1E)
    {
      if ((v18 - 3) >= 0xFFFFFFFE) {
        uint64_t v21 = v22;
      }
      else {
        uint64_t v21 = 0;
      }
      if ((v18 - 3) < 0xFFFFFFFE)
      {
        if (v18 == 3) {
          *((void *)v22 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v20 = (unint64_t)(v21 + 8);
    }
    else
    {
      if ((v22[1] & 0x7F) != 2 && !*((_DWORD *)v22 + 3)) {
        goto LABEL_4;
      }
      uint64_t v19 = *((void *)v22 + 2);
      if ((v19 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFF8;
      if (!v20) {
        goto LABEL_4;
      }
    }
    __int16 v23 = &v22;
    sub_1CC5FA668(v20 + 16, &v23);
  }
LABEL_4:
  uint64_t v9 = sub_1CCB163B4(*(void **)(a1 + 32), (llvm::CastInst *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], (uint64_t)v25, (llvm::PointerType *)(*(void *)v27 + 1912), (llvm::Instruction *)0x103, 1);
  NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(void *)v27 + 1912), v10, v11);
  uint64_t v14 = *(llvm::ConstantInt **)(*(void *)v27 + 1984);
  unsigned int v15 = *(_DWORD *)(*(void *)v27 + 1992);
  unsigned int v24 = v15 >> 8;
  if (v15 >> 8 > 0x40) {
    operator new[]();
  }
  if (v15 <= 0xFF) {
    LOBYTE(v16) = 0;
  }
  else {
    unint64_t v16 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v15) + 63);
  }
  __int16 v23 = (unsigned __int8 **)(v16 & 0x18);
  BOOL v17 = llvm::ConstantInt::get(v14, (llvm::LLVMContext *)&v23, v12);
  if (v24 >= 0x41 && v23) {
    MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
  }
  llvm::IRBuilderBase::CreateMemSet((uint64_t)v25, (llvm::Value *)v9, (uint64_t)NullValue, v17, 259, 0, 0, 0, 0);
  if (v25[0] != v26) {
    free(v25[0]);
  }
}

void *sub_1CCB186A4(void *a1)
{
  *a1 = &unk_1F262C170;
  uint64_t v2 = (void *)a1[6];
  if (v2 != a1 + 8) {
    free(v2);
  }
  return a1;
}

void sub_1CCB186F8(void *a1)
{
  *a1 = &unk_1F262C170;
  uint64_t v2 = (void *)a1[6];
  if (v2 != a1 + 8) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

llvm::Instruction *sub_1CCB1876C(void *a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a2 + 20);
  uint64_t v5 = a2 - 32 * (v4 & 0x7FFFFFF);
  int v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 == 84)
  {
    uint64_t v7 = 0;
  }
  else if (v6 == 39)
  {
    uint64_t v7 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v7 = 2;
  }
  unint64_t v8 = (llvm::Type ***)(v5 + 32 * (*(_DWORD *)(*(void *)(a2 + 72) + 12) - 1));
  if (v4 < 0 && (uint64_t v48 = *(void *)(v5 - 8), (v48 & 0xFFFFFFFF0) != 0)) {
    uint64_t v9 = (*(_DWORD *)(v5 - 12) - *(_DWORD *)(v5 - v48));
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v51 = a2 - 32 * v7 - 32 * v9 - 32;
  if (v8 != (llvm::Type ***)v51)
  {
    unsigned int v10 = 0;
    unsigned int v50 = (llvm::DataLayout *)(*(void *)(a1[1] + 40) + 272);
    while (1)
    {
      uint64_t v11 = (const char *)(*(void *)(a1[1] + 40) + 216);
      __int16 v60 = 260;
      v59[0] = v11;
      llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)v59);
      uint64_t v12 = *v8;
      uint64_t v13 = **v8;
      uint64_t v14 = sub_1CB83544C((uint64_t)v50, (uint64_t)v13);
      BOOL v16 = v15 == 1;
      char Alignment = llvm::DataLayout::getAlignment(v50, v13, 1);
      if (v16)
      {
        char v38 = Alignment;
        char Alignment = v38;
      }
      unint64_t v20 = ((1 << Alignment) + ((unint64_t)(v14 + 7) >> 3) - 1) & -(1 << Alignment);
      BOOL v21 = v56 != 18 || v20 >= 8;
      unint64_t v22 = v21 ? v10 : v10 - v20 + 8;
      int v23 = v22 + v20;
      if ((v22 + v20) < 0x321) {
        break;
      }
      unsigned int v10 = (v23 + 7) & 0xFFFFFFF8;
LABEL_28:
      if (v55 < 0) {
        operator delete(__p);
      }
      v8 += 4;
      if (v8 == (llvm::Type ***)v51) {
        goto LABEL_40;
      }
    }
    uint64_t v24 = (uint64_t)*v12;
    uint64_t v25 = a1[2];
    unsigned int v26 = *(llvm::CastInst **)(v25 + 72);
    uint64_t v27 = *(llvm::Value **)(v25 + 24);
    __int16 v60 = 257;
    uint64_t v28 = sub_1CC277FE0(a3, v26, v27, (uint64_t)v59, v19);
    uint64_t v29 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1[2] + 24), v22, 0);
    __int16 v60 = 257;
    uint64_t v30 = (unsigned __int8 *)sub_1CB844A3C(a3, v28, (uint64_t)v29, (uint64_t)v59, 0, 0);
    sub_1CCB17A70((void *)a1[3], v24);
    unint64_t v32 = llvm::PointerType::get(v31, 0);
    v57[0] = "_msarg";
    __int16 v58 = 259;
    if (*(void *)v30 != v32)
    {
      if (v30[16] > 0x14u)
      {
        __int16 v60 = 257;
        uint64_t v30 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v30, v32, v59, 0);
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v30, v57, *(void *)(a3 + 48), *(void *)(a3 + 56));
        uint64_t v33 = *(unsigned int *)(a3 + 8);
        if (v33)
        {
          uint64_t v36 = *(void *)a3;
          uint64_t v37 = *(void *)a3 + 16 * v33;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v30, *(_DWORD *)v36, *(llvm::MDNode **)(v36 + 8));
            v36 += 16;
          }
          while (v36 != v37);
        }
LABEL_20:
        unsigned int v10 = (v23 + 7) & 0xFFFFFFF8;
        if (!v30) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
      uint64_t v30 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**(void **)(a3 + 72) + 224))(*(void *)(a3 + 72), 48, v30, v32);
      if (v30) {
        BOOL v34 = v30[16] >= 0x1Cu;
      }
      else {
        BOOL v34 = 0;
      }
      if (v34)
      {
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v30, v57, *(void *)(a3 + 48), *(void *)(a3 + 56));
        uint64_t v39 = *(unsigned int *)(a3 + 8);
        if (v39)
        {
          uint64_t v40 = *(void *)a3;
          uint64_t v41 = *(void *)a3 + 16 * v39;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v30, *(_DWORD *)v40, *(llvm::MDNode **)(v40 + 8));
            v40 += 16;
          }
          while (v40 != v41);
          goto LABEL_20;
        }
      }
    }
    unsigned int v10 = (v23 + 7) & 0xFFFFFFF8;
LABEL_27:
    uint64_t v35 = sub_1CCB16AB0(a1[3], (uint64_t)v12);
    unint64_t v49 = v49 & 0xFFFFFFFFFFFF0000 | HIBYTE(word_1EBCE87F0) | 0x100;
    sub_1CC27BF8C((uint64_t *)a3, (uint64_t)v35, (uint64_t)v30, HIBYTE(word_1EBCE87F0) | 0x100, 0);
    goto LABEL_28;
  }
  unsigned int v10 = 0;
LABEL_40:
  uint64_t v42 = **(void **)(a3 + 64);
  uint64_t v43 = *(llvm::ConstantInt **)(v42 + 1984);
  unint64_t v44 = *(unsigned int *)(v42 + 1992);
  unsigned int v54 = v44 >> 8;
  if (v44 >> 8 > 0x40) {
    operator new[]();
  }
  if (v44 <= 0xFF) {
    LODWORD(v45) = 0;
  }
  else {
    unint64_t v45 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v44) + 63);
  }
  __p = (void *)(v45 & v10);
  __int16 v46 = llvm::ConstantInt::get(v43, (llvm::LLVMContext *)&__p, (const llvm::APInt *)a3);
  if (v54 >= 0x41 && __p) {
    MEMORY[0x1D25D9CB0](__p, 0x1000C8000313F17);
  }
  return sub_1CC27BF8C((uint64_t *)a3, (uint64_t)v46, *(void *)(a1[2] + 88), 0, 0);
}

void sub_1CCB18C80(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = 0;
  v38[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = **a2;
  v26[0] = v27;
  v26[1] = (void *)0x200000000;
  uint64_t v28 = v5;
  uint64_t v29 = &v37;
  uint64_t v30 = v38;
  uint64_t v31 = 0;
  int v32 = 0;
  __int16 v33 = 512;
  char v34 = 7;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = &unk_1F2616E88;
  v38[0] = &unk_1F2617008;
  int v6 = a2 + 3;
  unint64_t v8 = a2[5];
  uint64_t v7 = (unsigned __int8 *)a2[6];
  v27[4] = v8;
  v27[5] = v6;
  int v23 = v7;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)&v23, v7, 2);
    uint64_t v4 = (uint64_t)v23;
  }
  sub_1CB8461A4((uint64_t)v26, 0, v4);
  if (v23)
  {
    int v19 = *v23;
    if ((v19 - 4) > 0x1E)
    {
      if ((v19 - 3) >= 0xFFFFFFFE) {
        unint64_t v22 = v23;
      }
      else {
        unint64_t v22 = 0;
      }
      if ((v19 - 3) < 0xFFFFFFFE)
      {
        if (v19 == 3) {
          *((void *)v23 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v21 = (unint64_t)(v22 + 8);
    }
    else
    {
      if ((v23[1] & 0x7F) != 2 && !*((_DWORD *)v23 + 3)) {
        goto LABEL_4;
      }
      uint64_t v20 = *((void *)v23 + 2);
      if ((v20 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v21 = v20 & 0xFFFFFFFFFFFFFFF8;
      if (!v21) {
        goto LABEL_4;
      }
    }
    uint64_t v24 = &v23;
    sub_1CC5FA668(v21 + 16, &v24);
  }
LABEL_4:
  unsigned int v9 = *(_DWORD *)(a1 + 56);
  if (v9 >= *(_DWORD *)(a1 + 60)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 48) + 8 * v9) = a2;
  ++*(_DWORD *)(a1 + 56);
  unsigned int v10 = sub_1CCB163B4(*(void **)(a1 + 24), (llvm::CastInst *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], (uint64_t)v26, (llvm::PointerType *)(*(void *)v28 + 1912), (llvm::Instruction *)0x103, 1);
  NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(void *)v28 + 1912), v11, v12);
  int v15 = *(llvm::ConstantInt **)(*(void *)v28 + 1984);
  unsigned int v16 = *(_DWORD *)(*(void *)v28 + 1992);
  unsigned int v25 = v16 >> 8;
  if (v16 >> 8 > 0x40) {
    operator new[]();
  }
  if (v16 <= 0xFF) {
    LOBYTE(v17) = 0;
  }
  else {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v16) + 63);
  }
  uint64_t v24 = (unsigned __int8 **)(v17 & 8);
  int v18 = llvm::ConstantInt::get(v15, (llvm::LLVMContext *)&v24, v13);
  if (v25 >= 0x41 && v24) {
    MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
  }
  llvm::IRBuilderBase::CreateMemSet((uint64_t)v26, (llvm::Value *)v10, (uint64_t)NullValue, v18, 259, 0, 0, 0, 0);
  if (v26[0] != v27) {
    free(v26[0]);
  }
}

void sub_1CCB18FCC(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = 0;
  v38[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = **a2;
  v26[0] = v27;
  v26[1] = (void *)0x200000000;
  uint64_t v28 = v5;
  uint64_t v29 = &v37;
  uint64_t v30 = v38;
  uint64_t v31 = 0;
  int v32 = 0;
  __int16 v33 = 512;
  char v34 = 7;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = &unk_1F2616E88;
  v38[0] = &unk_1F2617008;
  int v6 = a2 + 3;
  unint64_t v8 = a2[5];
  uint64_t v7 = (unsigned __int8 *)a2[6];
  v27[4] = v8;
  v27[5] = v6;
  int v23 = v7;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)&v23, v7, 2);
    uint64_t v4 = (uint64_t)v23;
  }
  sub_1CB8461A4((uint64_t)v26, 0, v4);
  if (v23)
  {
    int v19 = *v23;
    if ((v19 - 4) > 0x1E)
    {
      if ((v19 - 3) >= 0xFFFFFFFE) {
        unint64_t v22 = v23;
      }
      else {
        unint64_t v22 = 0;
      }
      if ((v19 - 3) < 0xFFFFFFFE)
      {
        if (v19 == 3) {
          *((void *)v23 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v21 = (unint64_t)(v22 + 8);
    }
    else
    {
      if ((v23[1] & 0x7F) != 2 && !*((_DWORD *)v23 + 3)) {
        goto LABEL_4;
      }
      uint64_t v20 = *((void *)v23 + 2);
      if ((v20 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v21 = v20 & 0xFFFFFFFFFFFFFFF8;
      if (!v21) {
        goto LABEL_4;
      }
    }
    uint64_t v24 = &v23;
    sub_1CC5FA668(v21 + 16, &v24);
  }
LABEL_4:
  unsigned int v9 = *(_DWORD *)(a1 + 56);
  if (v9 >= *(_DWORD *)(a1 + 60)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 48) + 8 * v9) = a2;
  ++*(_DWORD *)(a1 + 56);
  unsigned int v10 = sub_1CCB163B4(*(void **)(a1 + 24), (llvm::CastInst *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], (uint64_t)v26, (llvm::PointerType *)(*(void *)v28 + 1912), (llvm::Instruction *)0x103, 1);
  NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(void *)v28 + 1912), v11, v12);
  int v15 = *(llvm::ConstantInt **)(*(void *)v28 + 1984);
  unsigned int v16 = *(_DWORD *)(*(void *)v28 + 1992);
  unsigned int v25 = v16 >> 8;
  if (v16 >> 8 > 0x40) {
    operator new[]();
  }
  if (v16 <= 0xFF) {
    LOBYTE(v17) = 0;
  }
  else {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v16) + 63);
  }
  uint64_t v24 = (unsigned __int8 **)(v17 & 8);
  int v18 = llvm::ConstantInt::get(v15, (llvm::LLVMContext *)&v24, v13);
  if (v25 >= 0x41 && v24) {
    MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
  }
  llvm::IRBuilderBase::CreateMemSet((uint64_t)v26, (llvm::Value *)v10, (uint64_t)NullValue, v18, 259, 0, 0, 0, 0);
  if (v26[0] != v27) {
    free(v26[0]);
  }
}

void sub_1CCB19318(uint64_t a1)
{
  uint64_t v2 = 0;
  v93[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 448);
  uint64_t v4 = **(void ***)v3;
  uint64_t v78 = (llvm::MDNode **)v80;
  uint64_t v79 = 0x200000000;
  unsigned int v83 = v4;
  __int16 v84 = &v92;
  __int16 v85 = v93;
  uint64_t v86 = 0;
  int v87 = 0;
  __int16 v88 = 512;
  char v89 = 7;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  unint64_t v92 = &unk_1F2616E88;
  v93[0] = &unk_1F2617008;
  uint64_t v81 = *(void *)(v3 + 40);
  uint64_t v82 = v3 + 24;
  uint64_t v5 = *(char **)(v3 + 48);
  v59[0] = v5;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)v59, (unsigned __int8 *)v5, 2);
    uint64_t v2 = v59[0];
  }
  sub_1CB8461A4((uint64_t)&v78, 0, (uint64_t)v2);
  if (v59[0])
  {
    int v49 = *v59[0];
    if ((v49 - 4) > 0x1E)
    {
      if ((v49 - 3) >= 0xFFFFFFFE) {
        unsigned int v52 = v59[0];
      }
      else {
        unsigned int v52 = 0;
      }
      if ((v49 - 3) < 0xFFFFFFFE)
      {
        if (v49 == 3) {
          *((void *)v59[0] + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v51 = (unint64_t)(v52 + 8);
    }
    else
    {
      if ((v59[0][1] & 0x7F) != 2 && !*((_DWORD *)v59[0] + 3)) {
        goto LABEL_4;
      }
      uint64_t v50 = *((void *)v59[0] + 2);
      if ((v50 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v51 = v50 & 0xFFFFFFFFFFFFFFF8;
      if (!v51) {
        goto LABEL_4;
      }
    }
    v61 = v59;
    sub_1CC5FA668(v51 + 16, &v61);
  }
LABEL_4:
  int v6 = (llvm::Type *)(*v83 + 1984);
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 88);
  __int16 v60 = 257;
  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v81 + 56) + 40) + 272), v6, 1);
  unsigned int v9 = operator new(0x60uLL);
  v9[13] = v9[13] & 0x38000000 | 1;
  unsigned int v10 = (llvm::Instruction *)(v9 + 8);
  *(void *)unsigned int v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = v9 + 8;
  __int16 v64 = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v9 + 8), (uint64_t)v6, v7, (const char **)&v61, 0, Alignment, 0);
  (*(void (**)(void *, llvm::Instruction *, const char **, uint64_t, uint64_t))(*v85 + 16))(v85, v10, v59, v81, v82);
  if (v79)
  {
    int v47 = v78;
    uint64_t v48 = (char *)&v78[2 * v79];
    do
    {
      llvm::Instruction::setMetadata(v10, *(_DWORD *)v47, v47[1]);
      v47 += 2;
    }
    while (v47 != (llvm::MDNode **)v48);
  }
  *(void *)(a1 + 40) = v10;
  uint64_t v11 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 16) + 24), 0, 0);
  uint64_t v12 = *(void *)(a1 + 40);
  __int16 v64 = 257;
  unsigned int v54 = sub_1CB844A3C((uint64_t)&v78, v11, v12, (uint64_t)&v61, 0, 0);
  if (*(_DWORD *)(a1 + 56))
  {
    uint64_t v13 = (llvm::Type *)(**(void **)(*(void *)(a1 + 16) + 16) + 1912);
    __int16 v64 = 257;
    uint64_t v14 = sub_1CB935044((uint64_t *)&v78, v13, v54, (uint64_t)&v61);
    *(void *)(a1 + 32) = v14;
    llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v78, 194, v14, 259, *(llvm::Value **)(*(void *)(a1 + 16) + 72), 259, (uint64_t *)v54, 0, 0, 0, 0, 0);
    uint64_t v53 = *(unsigned int *)(a1 + 56);
    if (v53)
    {
      for (uint64_t i = 0; i != v53; ++i)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8 * i);
        uint64_t v18 = *(void *)(v17 + 32);
        if (v18) {
          BOOL v19 = v18 == *(void *)(v17 + 40) + 40;
        }
        else {
          BOOL v19 = 1;
        }
        if (v19) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = (uint64_t **)(v18 - 24);
        }
        uint64_t v21 = **v20;
        v61 = v63;
        uint64_t v62 = 0x200000000;
        uint64_t v67 = v21;
        uint64_t v68 = &v76;
        unint64_t v69 = &v77;
        uint64_t v70 = 0;
        int v71 = 0;
        __int16 v72 = 512;
        char v73 = 7;
        uint64_t v65 = 0;
        uint64_t v66 = 0;
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        unint64_t v76 = &unk_1F2616E88;
        unsigned __int8 v77 = &unk_1F2617008;
        uint64_t v65 = v20[5];
        uint64_t v66 = v20 + 3;
        unint64_t v22 = (unsigned __int8 *)v20[6];
        v57[0] = v22;
        if (v22)
        {
          llvm::MetadataTracking::track((uint64_t)v57, v22, 2);
          uint64_t v16 = v57[0];
        }
        sub_1CB8461A4((uint64_t)&v61, 0, v16);
        if (!v57[0]) {
          goto LABEL_17;
        }
        int v39 = *(unsigned __int8 *)v57[0];
        if ((v39 - 4) > 0x1E)
        {
          if ((v39 - 3) >= 0xFFFFFFFE) {
            uint64_t v42 = v57[0];
          }
          else {
            uint64_t v42 = 0;
          }
          if ((v39 - 3) < 0xFFFFFFFE)
          {
            if (v39 == 3) {
              *(void *)(v57[0] + 8) = 0;
            }
            goto LABEL_17;
          }
          unint64_t v41 = v42 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v57[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v57[0] + 12)) {
            goto LABEL_17;
          }
          uint64_t v40 = *(void *)(v57[0] + 16);
          if ((v40 & 4) == 0) {
            goto LABEL_17;
          }
          unint64_t v41 = v40 & 0xFFFFFFFFFFFFFFF8;
          if (!v41) {
            goto LABEL_17;
          }
        }
        v59[0] = (const char *)v57;
        sub_1CC5FA668(v41 + 16, v59);
LABEL_17:
        int v23 = *(unsigned __int8 **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
        uint64_t v24 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(**(void **)(*(void *)(a1 + 16) + 16) + 1984), 0);
        uint64_t v25 = *(void *)(*(void *)(a1 + 16) + 24);
        __int16 v58 = 257;
        if (*(void *)v23 != v25)
        {
          if (v23[16] <= 0x14u)
          {
            uint64_t v28 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v68 + 28))(v68, 47, v23, v25);
            int v23 = (unsigned __int8 *)v28;
            if (v28)
            {
              if (*(unsigned __int8 *)(v28 + 16) >= 0x1Cu)
              {
                (*((void (**)(void **, uint64_t, void *, uint64_t *, uint64_t **))*v69 + 2))(v69, v28, v57, v65, v66);
                if (v62)
                {
                  unint64_t v45 = (llvm::MDNode **)v61;
                  __int16 v46 = (llvm::MDNode **)((char *)v61 + 16 * v62);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v23, *(_DWORD *)v45, v45[1]);
                    v45 += 2;
                  }
                  while (v45 != v46);
                }
              }
            }
          }
          else
          {
            __int16 v60 = 257;
            int v23 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v23, v25, v59, 0);
            (*((void (**)(void **, unsigned __int8 *, void *, uint64_t *, uint64_t **))*v69 + 2))(v69, v23, v57, v65, v66);
            if (v62)
            {
              unsigned int v26 = (llvm::MDNode **)v61;
              uint64_t v27 = (llvm::MDNode **)((char *)v61 + 16 * v62);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v23, *(_DWORD *)v26, v26[1]);
                v26 += 2;
              }
              while (v26 != v27);
            }
          }
        }
        unint64_t v29 = llvm::PointerType::get(v24, 0);
        __int16 v56 = 257;
        if (*(void *)v23 != v29)
        {
          if (v23[16] <= 0x14u)
          {
            int v23 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v68
                                      + 28))(v68, 48, v23, v29);
            if (v23) {
              BOOL v32 = v23[16] >= 0x1Cu;
            }
            else {
              BOOL v32 = 0;
            }
            if (v32)
            {
              (*((void (**)(void **, unsigned __int8 *, unsigned char *, uint64_t *, uint64_t **))*v69 + 2))(v69, v23, v55, v65, v66);
              if (v62)
              {
                uint64_t v43 = (llvm::MDNode **)v61;
                unint64_t v44 = (llvm::MDNode **)((char *)v61 + 16 * v62);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v23, *(_DWORD *)v43, v43[1]);
                  v43 += 2;
                }
                while (v43 != v44);
              }
            }
          }
          else
          {
            __int16 v60 = 257;
            int v23 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v23, v29, v59, 0);
            (*((void (**)(void **, unsigned __int8 *, unsigned char *, uint64_t *, uint64_t **))*v69 + 2))(v69, v23, v55, v65, v66);
            if (v62)
            {
              uint64_t v30 = (llvm::MDNode **)v61;
              uint64_t v31 = (llvm::MDNode **)((char *)v61 + 16 * v62);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v23, *(_DWORD *)v30, v30[1]);
                v30 += 2;
              }
              while (v30 != v31);
            }
          }
        }
        __int16 v58 = 257;
        char v33 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v65[7] + 40) + 272), v24, 1);
        char v34 = operator new(0x60uLL);
        v34[13] = v34[13] & 0x38000000 | 1;
        uint64_t v35 = (llvm::Instruction *)(v34 + 8);
        *(void *)char v34 = 0;
        *((void *)v34 + 1) = 0;
        *((void *)v34 + 2) = 0;
        *((void *)v34 + 3) = v34 + 8;
        __int16 v60 = 257;
        llvm::LoadInst::LoadInst((llvm::Value *)(v34 + 8), (uint64_t)v24, (uint64_t)v23, v59, 0, v33, 0);
        (*((void (**)(void **, llvm::Instruction *, void *, uint64_t *, uint64_t **))*v69 + 2))(v69, v35, v57, v65, v66);
        if (v62)
        {
          uint64_t v37 = (llvm::MDNode **)v61;
          char v38 = (llvm::MDNode **)((char *)v61 + 16 * v62);
          do
          {
            llvm::Instruction::setMetadata(v35, *(_DWORD *)v37, v37[1]);
            v37 += 2;
          }
          while (v37 != v38);
        }
        uint64_t v36 = sub_1CCB163B4(*(void **)(a1 + 24), v35, (uint64_t)&v61, (llvm::PointerType *)(*(void *)v67 + 1912), (llvm::Instruction *)0x103, 1);
        llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v61, 194, (llvm::Value *)v36, 259, *(llvm::Value **)(a1 + 32), 259, (uint64_t *)v54, 0, 0, 0, 0, 0);
        if (v61 != v63) {
          free(v61);
        }
      }
    }
  }
  if (v78 != (llvm::MDNode **)v80) {
    free(v78);
  }
}

void *sub_1CCB19C28(void *a1)
{
  *a1 = &unk_1F262C1B0;
  uint64_t v2 = (void *)a1[6];
  if (v2 != a1 + 8) {
    free(v2);
  }
  return a1;
}

void sub_1CCB19C7C(void *a1)
{
  *a1 = &unk_1F262C1B0;
  uint64_t v2 = (void *)a1[6];
  if (v2 != a1 + 8) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

llvm::Instruction *sub_1CCB19CF0(uint64_t a1, uint64_t a2, const llvm::APInt *a3)
{
  int v4 = *(_DWORD *)(a2 + 20);
  uint64_t v5 = v4 & 0x7FFFFFF;
  int v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 == 84)
  {
    uint64_t v7 = (uint64_t)a3;
    unint64_t v8 = (void *)a1;
    uint64_t v9 = 0;
  }
  else
  {
    if (v6 == 39) {
      uint64_t v9 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else {
      uint64_t v9 = 2;
    }
    uint64_t v7 = (uint64_t)a3;
    unint64_t v8 = (void *)a1;
  }
  uint64_t v10 = a2 - 32 * v5;
  if (v4 < 0)
  {
    uint64_t v43 = *(void *)(v10 - 8);
    if ((v43 & 0xFFFFFFFF0) != 0) {
      uint64_t v11 = (*(_DWORD *)(v10 - 12) - *(_DWORD *)(v10 - v43));
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v7 = (uint64_t)a3;
    unint64_t v8 = (void *)a1;
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (v10 != a2 - 32 * v9 - 32 * v11 - 32)
  {
    unsigned int v12 = 0;
    uint64_t v13 = -32 * v5;
    unint64_t v44 = (llvm::DataLayout *)(*(void *)(v8[1] + 40) + 272);
    unint64_t v49 = (32 * v9 + 32 * v11) ^ 0xFFFFFFFFFFFFFFE0;
    unsigned int v46 = 192;
    unsigned int v50 = 64;
    while (1)
    {
      uint64_t v14 = *(llvm::Type ***)(a2 + v13);
      int v15 = *v14;
      unsigned int v16 = *((_DWORD *)*v14 + 2);
      unsigned int v17 = v16;
      if ((*((_DWORD *)*v14 + 2) & 0xFE) == 0x12) {
        unsigned int v17 = *(unsigned __int8 *)(**((void **)v15 + 2) + 8);
      }
      int v18 = *(_DWORD *)(a2 + 20);
      int v19 = *(_DWORD *)(*(void *)(a2 + 72) + 12);
      if (v17 < 7)
      {
        int v20 = 1;
        goto LABEL_18;
      }
      if (v16 == 13)
      {
        unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*v14);
        if (v21 == 1) {
        if (PrimitiveSizeInBits < 0x41)
        }
        {
          int v20 = 0;
          unint64_t v8 = (void *)a1;
          goto LABEL_18;
        }
        unsigned int v16 = *((unsigned __int8 *)v15 + 8);
        unint64_t v8 = (void *)a1;
      }
      int v20 = 2 * (v16 != 15);
LABEL_18:
      unint64_t v23 = (v13 + 32 * (unint64_t)(v18 & 0x7FFFFFF)) >> 5;
      unsigned int v24 = v19 - 1;
      if (v12 > 0x3F && v20 == 0) {
        int v20 = 2;
      }
      if (v50 > 0xBF && v20 == 1) {
        int v20 = 2;
      }
      switch(v20)
      {
        case 2:
          if (v24 <= v23)
          {
            uint64_t v28 = *v14;
            uint64_t v29 = sub_1CB83544C((uint64_t)v44, (uint64_t)*v14);
            BOOL v31 = v30 == 1;
            char Alignment = llvm::DataLayout::getAlignment(v44, v28, 1);
            if (v31) {
            char v34 = (llvm::Instruction *)(((((1 << Alignment) - 1 + ((unint64_t)(v29 + 7) >> 3)) & -(1 << Alignment))
            }
                                       + 7) & 0xFFFFFFF8);
            uint64_t v27 = sub_1CCB1B204(a1, (uint64_t)*v14, (uint64_t)a3, v46, v34);
            v46 += v34;
            unint64_t v8 = (void *)a1;
            uint64_t v7 = (uint64_t)a3;
            goto LABEL_37;
          }
          break;
        case 1:
          uint64_t v27 = sub_1CCB1B204((uint64_t)v8, (uint64_t)*v14, v7, v50, (llvm::Instruction *)8);
          v50 += 16;
LABEL_37:
          if (v24 <= v23 && v27 != 0)
          {
            uint64_t v36 = sub_1CCB16AB0(v8[3], (uint64_t)v14);
            unint64_t v48 = v48 & 0xFFFFFFFFFFFF0000 | HIBYTE(word_1EBCE87F0) | 0x100;
            sub_1CC27BF8C((uint64_t *)v7, (uint64_t)v36, (uint64_t)v27, HIBYTE(word_1EBCE87F0) | 0x100, 0);
          }
          break;
        case 0:
          uint64_t v27 = sub_1CCB1B204((uint64_t)v8, (uint64_t)*v14, v7, v12, (llvm::Instruction *)8);
          v12 += 8;
          goto LABEL_37;
      }
      v13 += 32;
      if (v49 == v13) {
        goto LABEL_45;
      }
    }
  }
  unsigned int v46 = 192;
LABEL_45:
  uint64_t v37 = **(void **)(v7 + 64);
  char v38 = *(llvm::ConstantInt **)(v37 + 1984);
  unint64_t v39 = *(unsigned int *)(v37 + 1992);
  unsigned int v52 = v39 >> 8;
  if (v39 >> 8 > 0x40) {
    operator new[]();
  }
  if (v39 <= 0xFF) {
    LODWORD(v40) = 0;
  }
  else {
    unint64_t v40 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v39) + 63);
  }
  uint64_t v51 = v40 & (v46 - 192);
  unint64_t v41 = llvm::ConstantInt::get(v38, (llvm::LLVMContext *)&v51, a3);
  if (v52 >= 0x41 && v51) {
    MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
  }
  return sub_1CC27BF8C((uint64_t *)a3, (uint64_t)v41, *(void *)(v8[2] + 88), 0, 0);
}

void sub_1CCB1A160(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = 0;
  v38[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = **a2;
  v26[0] = v27;
  v26[1] = (void *)0x200000000;
  uint64_t v28 = v5;
  uint64_t v29 = &v37;
  int v30 = v38;
  uint64_t v31 = 0;
  int v32 = 0;
  __int16 v33 = 512;
  char v34 = 7;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = &unk_1F2616E88;
  v38[0] = &unk_1F2617008;
  int v6 = a2 + 3;
  unint64_t v8 = a2[5];
  uint64_t v7 = (unsigned __int8 *)a2[6];
  v27[4] = v8;
  v27[5] = v6;
  unint64_t v23 = v7;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)&v23, v7, 2);
    uint64_t v4 = (uint64_t)v23;
  }
  sub_1CB8461A4((uint64_t)v26, 0, v4);
  if (v23)
  {
    int v19 = *v23;
    if ((v19 - 4) > 0x1E)
    {
      if ((v19 - 3) >= 0xFFFFFFFE) {
        unint64_t v22 = v23;
      }
      else {
        unint64_t v22 = 0;
      }
      if ((v19 - 3) < 0xFFFFFFFE)
      {
        if (v19 == 3) {
          *((void *)v23 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v21 = (unint64_t)(v22 + 8);
    }
    else
    {
      if ((v23[1] & 0x7F) != 2 && !*((_DWORD *)v23 + 3)) {
        goto LABEL_4;
      }
      uint64_t v20 = *((void *)v23 + 2);
      if ((v20 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v21 = v20 & 0xFFFFFFFFFFFFFFF8;
      if (!v21) {
        goto LABEL_4;
      }
    }
    unsigned int v24 = &v23;
    sub_1CC5FA668(v21 + 16, &v24);
  }
LABEL_4:
  unsigned int v9 = *(_DWORD *)(a1 + 56);
  if (v9 >= *(_DWORD *)(a1 + 60)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 48) + 8 * v9) = a2;
  ++*(_DWORD *)(a1 + 56);
  uint64_t v10 = sub_1CCB163B4(*(void **)(a1 + 24), (llvm::CastInst *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], (uint64_t)v26, (llvm::PointerType *)(*(void *)v28 + 1912), (llvm::Instruction *)0x103, 1);
  NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(void *)v28 + 1912), v11, v12);
  int v15 = *(llvm::ConstantInt **)(*(void *)v28 + 1984);
  unsigned int v16 = *(_DWORD *)(*(void *)v28 + 1992);
  unsigned int v25 = v16 >> 8;
  if (v16 >> 8 > 0x40) {
    operator new[]();
  }
  if (v16 <= 0xFF) {
    LOBYTE(v17) = 0;
  }
  else {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v16) + 63);
  }
  unsigned int v24 = (unsigned __int8 **)(v17 & 0x20);
  int v18 = llvm::ConstantInt::get(v15, (llvm::LLVMContext *)&v24, v13);
  if (v25 >= 0x41 && v24) {
    MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
  }
  llvm::IRBuilderBase::CreateMemSet((uint64_t)v26, (llvm::Value *)v10, (uint64_t)NullValue, v18, 259, 0, 0, 0, 0);
  if (v26[0] != v27) {
    free(v26[0]);
  }
}

void sub_1CCB1A4AC(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = 0;
  v38[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = **a2;
  v26[0] = v27;
  v26[1] = (void *)0x200000000;
  uint64_t v28 = v5;
  uint64_t v29 = &v37;
  int v30 = v38;
  uint64_t v31 = 0;
  int v32 = 0;
  __int16 v33 = 512;
  char v34 = 7;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = &unk_1F2616E88;
  v38[0] = &unk_1F2617008;
  int v6 = a2 + 3;
  unint64_t v8 = a2[5];
  uint64_t v7 = (unsigned __int8 *)a2[6];
  v27[4] = v8;
  v27[5] = v6;
  unint64_t v23 = v7;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)&v23, v7, 2);
    uint64_t v4 = (uint64_t)v23;
  }
  sub_1CB8461A4((uint64_t)v26, 0, v4);
  if (v23)
  {
    int v19 = *v23;
    if ((v19 - 4) > 0x1E)
    {
      if ((v19 - 3) >= 0xFFFFFFFE) {
        unint64_t v22 = v23;
      }
      else {
        unint64_t v22 = 0;
      }
      if ((v19 - 3) < 0xFFFFFFFE)
      {
        if (v19 == 3) {
          *((void *)v23 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v21 = (unint64_t)(v22 + 8);
    }
    else
    {
      if ((v23[1] & 0x7F) != 2 && !*((_DWORD *)v23 + 3)) {
        goto LABEL_4;
      }
      uint64_t v20 = *((void *)v23 + 2);
      if ((v20 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v21 = v20 & 0xFFFFFFFFFFFFFFF8;
      if (!v21) {
        goto LABEL_4;
      }
    }
    unsigned int v24 = &v23;
    sub_1CC5FA668(v21 + 16, &v24);
  }
LABEL_4:
  unsigned int v9 = *(_DWORD *)(a1 + 56);
  if (v9 >= *(_DWORD *)(a1 + 60)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 48) + 8 * v9) = a2;
  ++*(_DWORD *)(a1 + 56);
  uint64_t v10 = sub_1CCB163B4(*(void **)(a1 + 24), (llvm::CastInst *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], (uint64_t)v26, (llvm::PointerType *)(*(void *)v28 + 1912), (llvm::Instruction *)0x103, 1);
  NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(void *)v28 + 1912), v11, v12);
  int v15 = *(llvm::ConstantInt **)(*(void *)v28 + 1984);
  unsigned int v16 = *(_DWORD *)(*(void *)v28 + 1992);
  unsigned int v25 = v16 >> 8;
  if (v16 >> 8 > 0x40) {
    operator new[]();
  }
  if (v16 <= 0xFF) {
    LOBYTE(v17) = 0;
  }
  else {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v16) + 63);
  }
  unsigned int v24 = (unsigned __int8 **)(v17 & 0x20);
  int v18 = llvm::ConstantInt::get(v15, (llvm::LLVMContext *)&v24, v13);
  if (v25 >= 0x41 && v24) {
    MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
  }
  llvm::IRBuilderBase::CreateMemSet((uint64_t)v26, (llvm::Value *)v10, (uint64_t)NullValue, v18, 259, 0, 0, 0, 0);
  if (v26[0] != v27) {
    free(v26[0]);
  }
}

void sub_1CCB1A7F8(uint64_t a1)
{
  v94[1] = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a1 + 56)) {
    goto LABEL_8;
  }
  uint64_t v2 = 0;
  uint64_t v3 = *(uint64_t ***)(*(void *)(a1 + 24) + 448);
  uint64_t v4 = (uint64_t *)**v3;
  uint64_t v79 = v81;
  uint64_t v80 = 0x200000000;
  __int16 v84 = v4;
  __int16 v85 = &v93;
  uint64_t v86 = v94;
  uint64_t v87 = 0;
  int v88 = 0;
  __int16 v89 = 512;
  char v90 = 7;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  uint64_t v93 = &unk_1F2616E88;
  v94[0] = &unk_1F2617008;
  uint64_t v82 = v3[5];
  unsigned int v83 = v3 + 3;
  uint64_t v5 = (unsigned __int8 *)v3[6];
  v74[0] = v5;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)v74, v5, 2);
    uint64_t v2 = v74[0];
  }
  sub_1CB8461A4((uint64_t)&v79, 0, v2);
  if (v74[0])
  {
    int v67 = *(unsigned __int8 *)v74[0];
    if ((v67 - 4) > 0x1E)
    {
      if ((v67 - 3) >= 0xFFFFFFFE) {
        uint64_t v70 = v74[0];
      }
      else {
        uint64_t v70 = 0;
      }
      if ((v67 - 3) < 0xFFFFFFFE)
      {
        if (v67 == 3) {
          *(void *)(v74[0] + 8) = 0;
        }
        goto LABEL_5;
      }
      unint64_t v69 = v70 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v74[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v74[0] + 12)) {
        goto LABEL_5;
      }
      uint64_t v68 = *(void *)(v74[0] + 16);
      if ((v68 & 4) == 0) {
        goto LABEL_5;
      }
      unint64_t v69 = v68 & 0xFFFFFFFFFFFFFFF8;
      if (!v69) {
        goto LABEL_5;
      }
    }
    unint64_t v76 = (const char *)v74;
    sub_1CC5FA668(v69 + 16, &v76);
  }
LABEL_5:
  int v6 = (llvm::Type *)(*v84 + 1984);
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 88);
  __int16 v75 = 257;
  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v82[7] + 40) + 272), v6, 1);
  unsigned int v9 = operator new(0x60uLL);
  v9[13] = v9[13] & 0x38000000 | 1;
  uint64_t v10 = (llvm::Instruction *)(v9 + 8);
  *(void *)unsigned int v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = v9 + 8;
  __int16 v78 = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v9 + 8), (uint64_t)v6, v7, &v76, 0, Alignment, 0);
  (*(void (**)(void *, llvm::Instruction *, void *, uint64_t *, uint64_t **))(*v86 + 16))(v86, v10, v74, v82, v83);
  if (v80)
  {
    uint64_t v65 = (llvm::MDNode **)v79;
    uint64_t v66 = (llvm::MDNode **)((char *)v79 + 16 * v80);
    do
    {
      llvm::Instruction::setMetadata(v10, *(_DWORD *)v65, v65[1]);
      v65 += 2;
    }
    while (v65 != v66);
  }
  *(void *)(a1 + 40) = v10;
  uint64_t v11 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 16) + 24), 0xC0uLL, 0);
  uint64_t v12 = *(void *)(a1 + 40);
  __int16 v78 = 257;
  uint64_t v13 = sub_1CB844A3C((uint64_t)&v79, v11, v12, (uint64_t)&v76, 0, 0);
  uint64_t v14 = (llvm::Type *)(**(void **)(*(void *)(a1 + 16) + 16) + 1912);
  __int16 v78 = 257;
  int v15 = sub_1CB935044((uint64_t *)&v79, v14, v13, (uint64_t)&v76);
  *(void *)(a1 + 32) = v15;
  llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v79, 194, v15, 259, *(llvm::Value **)(*(void *)(a1 + 16) + 72), 259, (uint64_t *)v13, 0, 0, 0, 0, 0);
  if (v79 != v81) {
    free(v79);
  }
LABEL_8:
  __int16 v72 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 16) + 24), 0x40uLL, 0);
  char v73 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 16) + 24), 0x80uLL, 0);
  uint64_t v16 = *(unsigned int *)(a1 + 56);
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v71 = 8 * v16;
    do
    {
      uint64_t v18 = 0;
      uint64_t v19 = *(void *)(*(void *)(a1 + 48) + v17);
      uint64_t v20 = *(void *)(v19 + 32);
      if (v20) {
        BOOL v21 = v20 == *(void *)(v19 + 40) + 40;
      }
      else {
        BOOL v21 = 1;
      }
      if (v21) {
        unint64_t v22 = 0;
      }
      else {
        unint64_t v22 = (uint64_t **)(v20 - 24);
      }
      unint64_t v23 = (uint64_t *)**v22;
      uint64_t v79 = v81;
      uint64_t v80 = 0x200000000;
      __int16 v84 = v23;
      __int16 v85 = &v93;
      uint64_t v86 = v94;
      uint64_t v87 = 0;
      int v88 = 0;
      __int16 v89 = 512;
      char v90 = 7;
      uint64_t v82 = 0;
      unsigned int v83 = 0;
      uint64_t v91 = 0;
      uint64_t v92 = 0;
      uint64_t v93 = &unk_1F2616E88;
      v94[0] = &unk_1F2617008;
      uint64_t v82 = v22[5];
      unsigned int v83 = v22 + 3;
      unsigned int v24 = (unsigned __int8 *)v22[6];
      v74[0] = v24;
      if (v24)
      {
        llvm::MetadataTracking::track((uint64_t)v74, v24, 2);
        uint64_t v18 = v74[0];
      }
      sub_1CB8461A4((uint64_t)&v79, 0, v18);
      if (!v74[0]) {
        goto LABEL_19;
      }
      int v61 = *(unsigned __int8 *)v74[0];
      if ((v61 - 4) > 0x1E)
      {
        if ((v61 - 3) >= 0xFFFFFFFE) {
          uint64_t v64 = v74[0];
        }
        else {
          uint64_t v64 = 0;
        }
        if ((v61 - 3) < 0xFFFFFFFE)
        {
          if (v61 == 3) {
            *(void *)(v74[0] + 8) = 0;
          }
          goto LABEL_19;
        }
        unint64_t v63 = v64 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v74[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v74[0] + 12)) {
          goto LABEL_19;
        }
        uint64_t v62 = *(void *)(v74[0] + 16);
        if ((v62 & 4) == 0) {
          goto LABEL_19;
        }
        unint64_t v63 = v62 & 0xFFFFFFFFFFFFFFF8;
        if (!v63) {
          goto LABEL_19;
        }
      }
      unint64_t v76 = (const char *)v74;
      sub_1CC5FA668(v63 + 16, &v76);
LABEL_19:
      uint64_t v25 = *(void *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF));
      unsigned int v26 = sub_1CCB1B434(a1, (uint64_t)&v79, v25, 0);
      uint64_t v27 = sub_1CCB1B434(a1, (uint64_t)&v79, v25, (llvm::Type *)8);
      uint64_t v28 = sub_1CCB1B868(a1, (uint64_t)&v79, v25, (llvm::Type *)0x18);
      __int16 v78 = 257;
      uint64_t v29 = sub_1CB844A3C((uint64_t)&v79, v27, (uint64_t)v28, (uint64_t)&v76, 0, 0);
      int v30 = sub_1CCB1B434(a1, (uint64_t)&v79, v25, (llvm::Type *)0x10);
      uint64_t v31 = sub_1CCB1B868(a1, (uint64_t)&v79, v25, (llvm::Type *)0x1C);
      __int16 v78 = 257;
      int v32 = sub_1CB844A3C((uint64_t)&v79, v30, (uint64_t)v31, (uint64_t)&v76, 0, 0);
      __int16 v78 = 257;
      __int16 v33 = sub_1CB844A3C((uint64_t)&v79, v72, (uint64_t)v28, (uint64_t)&v76, 0, 0);
      char v34 = sub_1CCB163B4(*(void **)(a1 + 24), v29, (uint64_t)&v79, (llvm::PointerType *)(*v84 + 1912), (llvm::Instruction *)0x103, 1);
      uint64_t v35 = *v84 + 1912;
      uint64_t v36 = *(uint64_t **)(a1 + 32);
      __int16 v78 = 257;
      uint64_t v37 = sub_1CC278130((uint64_t *)&v79, v35, v36, (const char *)v33, (uint64_t)&v76);
      __int16 v78 = 257;
      char v38 = (uint64_t *)sub_1CB84494C((uint64_t)&v79, (uint64_t)v72, (uint64_t)v33, (uint64_t)&v76, 0, 0);
      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v79, 194, (llvm::Value *)v34, 259, v37, 259, v38, 0, 0, 0, 0, 0);
      __int16 v78 = 257;
      unint64_t v39 = sub_1CB844A3C((uint64_t)&v79, v73, (uint64_t)v31, (uint64_t)&v76, 0, 0);
      unint64_t v41 = sub_1CCB163B4(*(void **)(a1 + 24), v32, (uint64_t)&v79, (llvm::PointerType *)(*v84 + 1912), (llvm::Instruction *)0x103, 1);
      uint64_t v42 = *v84;
      uint64_t v43 = *(uint64_t **)(a1 + 32);
      unint64_t v44 = *(llvm::ConstantInt **)(*v84 + 1960);
      unsigned int v45 = *(_DWORD *)(*v84 + 1968);
      unsigned int v77 = v45 >> 8;
      if (v45 >> 8 > 0x40) {
        operator new[]();
      }
      if (v45 <= 0xFF) {
        LOBYTE(v46) = 0;
      }
      else {
        unint64_t v46 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v45) + 63);
      }
      unint64_t v76 = (const char *)(v46 & 0x40);
      int v47 = (const char *)llvm::ConstantInt::get(v44, (llvm::LLVMContext *)&v76, v40);
      if (v77 >= 0x41 && v76) {
        MEMORY[0x1D25D9CB0](v76, 0x1000C8000313F17);
      }
      uint64_t v48 = v42 + 1912;
      __int16 v78 = 257;
      unint64_t v49 = (uint64_t *)sub_1CC278130((uint64_t *)&v79, v48, v43, v47, (uint64_t)&v76);
      __int16 v75 = 257;
      unsigned int v50 = sub_1CC278130((uint64_t *)&v79, v48, v49, (const char *)v39, (uint64_t)v74);
      __int16 v78 = 257;
      uint64_t v51 = (uint64_t *)sub_1CB84494C((uint64_t)&v79, (uint64_t)v73, (uint64_t)v39, (uint64_t)&v76, 0, 0);
      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v79, 194, (llvm::Value *)v41, 259, v50, 259, v51, 0, 0, 0, 0, 0);
      uint64_t v53 = sub_1CCB163B4(*(void **)(a1 + 24), v26, (uint64_t)&v79, (llvm::PointerType *)(*v84 + 1912), (llvm::Instruction *)0x104, 1);
      uint64_t v54 = *v84;
      char v55 = *(uint64_t **)(a1 + 32);
      __int16 v56 = *(llvm::ConstantInt **)(*v84 + 1960);
      unsigned int v57 = *(_DWORD *)(*v84 + 1968);
      unsigned int v77 = v57 >> 8;
      if (v57 >> 8 > 0x40) {
        operator new[]();
      }
      if (v57 <= 0xFF) {
        LOBYTE(v58) = 0;
      }
      else {
        unint64_t v58 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v57) + 63);
      }
      unint64_t v76 = (const char *)(v58 & 0xC0);
      unint64_t v59 = (const char *)llvm::ConstantInt::get(v56, (llvm::LLVMContext *)&v76, v52);
      if (v77 >= 0x41 && v76) {
        MEMORY[0x1D25D9CB0](v76, 0x1000C8000313F17);
      }
      __int16 v78 = 257;
      __int16 v60 = sub_1CC278130((uint64_t *)&v79, v54 + 1912, v55, v59, (uint64_t)&v76);
      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v79, 194, (llvm::Value *)v53, 260, v60, 260, *(uint64_t **)(a1 + 40), 0, 0, 0, 0, 0);
      if (v79 != v81) {
        free(v79);
      }
      v17 += 8;
    }
    while (v71 != v17);
  }
}

unsigned __int8 *sub_1CCB1B204(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, llvm::Instruction *a5)
{
  if (a5 + a4 > 0x320) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(llvm::CastInst **)(v10 + 72);
  uint64_t v12 = *(llvm::Value **)(v10 + 24);
  __int16 v28 = 257;
  uint64_t v13 = sub_1CC277FE0(a3, v11, v12, (uint64_t)v27, a5);
  uint64_t v14 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 16) + 24), a4, 0);
  __int16 v28 = 257;
  uint64_t v5 = (unsigned __int8 *)sub_1CB844A3C(a3, v13, (uint64_t)v14, (uint64_t)v27, 0, 0);
  sub_1CCB17A70(*(void **)(a1 + 24), a2);
  unint64_t v16 = llvm::PointerType::get(v15, 0);
  v25[0] = "_msarg";
  __int16 v26 = 259;
  if (*(void *)v5 != v16)
  {
    if (v5[16] <= 0x14u)
    {
      uint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**(void **)(a3 + 72) + 224))(*(void *)(a3 + 72), 48, v5, v16);
      if (v5) {
        BOOL v20 = v5[16] >= 0x1Cu;
      }
      else {
        BOOL v20 = 0;
      }
      if (v20)
      {
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v5, v25, *(void *)(a3 + 48), *(void *)(a3 + 56));
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        if (v22)
        {
          uint64_t v23 = *(void *)a3;
          uint64_t v24 = v23 + 16 * v22;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v23, *(llvm::MDNode **)(v23 + 8));
            v23 += 16;
          }
          while (v23 != v24);
        }
      }
    }
    else
    {
      __int16 v28 = 257;
      uint64_t v5 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v5, v16, v27, 0);
      (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v5, v25, *(void *)(a3 + 48), *(void *)(a3 + 56));
      uint64_t v17 = *(unsigned int *)(a3 + 8);
      if (v17)
      {
        uint64_t v18 = *(void *)a3;
        uint64_t v19 = v18 + 16 * v17;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v18, *(llvm::MDNode **)(v18 + 8));
          v18 += 16;
        }
        while (v18 != v19);
      }
    }
  }
  return v5;
}

llvm::Instruction *sub_1CCB1B434(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Type *a4)
{
  unsigned int v4 = a4;
  uint64_t v5 = (unsigned __int8 *)a3;
  uint64_t v8 = *(void *)(*(void *)(a1 + 16) + 24);
  __int16 v38 = 257;
  if (*(void *)a3 != v8)
  {
    if (*(unsigned __int8 *)(a3 + 16) <= 0x14u)
    {
      uint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a2 + 72)
                                                                                           + 224))(*(void *)(a2 + 72), 47, a3, v8);
      if (v5) {
        BOOL v12 = v5[16] >= 0x1Cu;
      }
      else {
        BOOL v12 = 0;
      }
      if (v12)
      {
        (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v5, v37, *(void *)(a2 + 48), *(void *)(a2 + 56));
        uint64_t v28 = *(unsigned int *)(a2 + 8);
        if (v28)
        {
          uint64_t v29 = *(void *)a2;
          uint64_t v30 = *(void *)a2 + 16 * v28;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v29, *(llvm::MDNode **)(v29 + 8));
            v29 += 16;
          }
          while (v29 != v30);
        }
      }
    }
    else
    {
      __int16 v40 = 257;
      uint64_t v5 = (unsigned __int8 *)llvm::CastInst::Create(47, a3, v8, v39, 0);
      (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v5, v37, *(void *)(a2 + 48), *(void *)(a2 + 56));
      uint64_t v9 = *(unsigned int *)(a2 + 8);
      if (v9)
      {
        uint64_t v10 = *(void *)a2;
        uint64_t v11 = *(void *)a2 + 16 * v9;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v10, *(llvm::MDNode **)(v10 + 8));
          v10 += 16;
        }
        while (v10 != v11);
      }
    }
  }
  uint64_t v13 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 16) + 24), v4, 0);
  __int16 v36 = 257;
  uint64_t v14 = (unsigned __int8 *)sub_1CB844A3C(a2, v5, (uint64_t)v13, (uint64_t)v35, 0, 0);
  unint64_t v15 = llvm::PointerType::get((llvm::PointerType *)(**(void **)(*(void *)(a1 + 16) + 16) + 1984), 0);
  v34[16] = 257;
  if (*(void *)v14 != v15)
  {
    if (v14[16] <= 0x14u)
    {
      uint64_t v14 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**(void **)(a2 + 72) + 224))(*(void *)(a2 + 72), 48, v14, v15);
      if (v14) {
        BOOL v19 = v14[16] >= 0x1Cu;
      }
      else {
        BOOL v19 = 0;
      }
      if (v19)
      {
        (*(void (**)(void, unsigned __int8 *, _WORD *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v14, v34, *(void *)(a2 + 48), *(void *)(a2 + 56));
        uint64_t v31 = *(unsigned int *)(a2 + 8);
        if (v31)
        {
          uint64_t v32 = *(void *)a2;
          uint64_t v33 = *(void *)a2 + 16 * v31;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v14, *(_DWORD *)v32, *(llvm::MDNode **)(v32 + 8));
            v32 += 16;
          }
          while (v32 != v33);
        }
      }
    }
    else
    {
      __int16 v40 = 257;
      uint64_t v14 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v14, v15, v39, 0);
      (*(void (**)(void, unsigned __int8 *, _WORD *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v14, v34, *(void *)(a2 + 48), *(void *)(a2 + 56));
      uint64_t v16 = *(unsigned int *)(a2 + 8);
      if (v16)
      {
        uint64_t v17 = *(void *)a2;
        uint64_t v18 = *(void *)a2 + 16 * v16;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v14, *(_DWORD *)v17, *(llvm::MDNode **)(v17 + 8));
          v17 += 16;
        }
        while (v17 != v18);
      }
    }
  }
  BOOL v20 = (llvm::Type *)(**(void **)(*(void *)(a1 + 16) + 16) + 1984);
  __int16 v38 = 257;
  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(a2 + 48) + 56) + 40) + 272), v20, 1);
  uint64_t v22 = operator new(0x60uLL);
  v22[13] = v22[13] & 0x38000000 | 1;
  uint64_t v23 = (llvm::Instruction *)(v22 + 8);
  *(void *)uint64_t v22 = 0;
  *((void *)v22 + 1) = 0;
  *((void *)v22 + 2) = 0;
  *((void *)v22 + 3) = v22 + 8;
  __int16 v40 = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v22 + 8), (uint64_t)v20, (uint64_t)v14, v39, 0, Alignment, 0);
  (*(void (**)(void, llvm::Instruction *, unsigned char *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v23, v37, *(void *)(a2 + 48), *(void *)(a2 + 56));
  uint64_t v24 = *(unsigned int *)(a2 + 8);
  if (v24)
  {
    uint64_t v26 = *(void *)a2;
    uint64_t v27 = v26 + 16 * v24;
    do
    {
      llvm::Instruction::setMetadata(v23, *(_DWORD *)v26, *(llvm::MDNode **)(v26 + 8));
      v26 += 16;
    }
    while (v26 != v27);
  }
  return v23;
}

unsigned __int8 *sub_1CCB1B868(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Type *a4)
{
  unsigned int v4 = a4;
  uint64_t v5 = (unsigned __int8 *)a3;
  uint64_t v8 = *(void *)(*(void *)(a1 + 16) + 24);
  __int16 v46 = 257;
  if (*(void *)a3 != v8)
  {
    if (*(unsigned __int8 *)(a3 + 16) <= 0x14u)
    {
      uint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a2 + 72)
                                                                                           + 224))(*(void *)(a2 + 72), 47, a3, v8);
      if (v5) {
        BOOL v12 = v5[16] >= 0x1Cu;
      }
      else {
        BOOL v12 = 0;
      }
      if (v12)
      {
        (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v5, v45, *(void *)(a2 + 48), *(void *)(a2 + 56));
        uint64_t v33 = *(unsigned int *)(a2 + 8);
        if (v33)
        {
          uint64_t v34 = *(void *)a2;
          uint64_t v35 = *(void *)a2 + 16 * v33;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v34, *(llvm::MDNode **)(v34 + 8));
            v34 += 16;
          }
          while (v34 != v35);
        }
      }
    }
    else
    {
      __int16 v48 = 257;
      uint64_t v5 = (unsigned __int8 *)llvm::CastInst::Create(47, a3, v8, v47, 0);
      (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v5, v45, *(void *)(a2 + 48), *(void *)(a2 + 56));
      uint64_t v9 = *(unsigned int *)(a2 + 8);
      if (v9)
      {
        uint64_t v10 = *(void *)a2;
        uint64_t v11 = *(void *)a2 + 16 * v9;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v10, *(llvm::MDNode **)(v10 + 8));
          v10 += 16;
        }
        while (v10 != v11);
      }
    }
  }
  uint64_t v13 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 16) + 24), v4, 0);
  __int16 v44 = 257;
  uint64_t v14 = (unsigned __int8 *)sub_1CB844A3C(a2, v5, (uint64_t)v13, (uint64_t)v43, 0, 0);
  unint64_t v15 = llvm::PointerType::get((llvm::PointerType *)(**(void **)(*(void *)(a1 + 16) + 16) + 1960), 0);
  v42[16] = 257;
  if (*(void *)v14 != v15)
  {
    if (v14[16] <= 0x14u)
    {
      uint64_t v14 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**(void **)(a2 + 72) + 224))(*(void *)(a2 + 72), 48, v14, v15);
      if (v14) {
        BOOL v19 = v14[16] >= 0x1Cu;
      }
      else {
        BOOL v19 = 0;
      }
      if (v19)
      {
        (*(void (**)(void, unsigned __int8 *, _WORD *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v14, v42, *(void *)(a2 + 48), *(void *)(a2 + 56));
        uint64_t v36 = *(unsigned int *)(a2 + 8);
        if (v36)
        {
          uint64_t v37 = *(void *)a2;
          uint64_t v38 = *(void *)a2 + 16 * v36;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v14, *(_DWORD *)v37, *(llvm::MDNode **)(v37 + 8));
            v37 += 16;
          }
          while (v37 != v38);
        }
      }
    }
    else
    {
      __int16 v48 = 257;
      uint64_t v14 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v14, v15, v47, 0);
      (*(void (**)(void, unsigned __int8 *, _WORD *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v14, v42, *(void *)(a2 + 48), *(void *)(a2 + 56));
      uint64_t v16 = *(unsigned int *)(a2 + 8);
      if (v16)
      {
        uint64_t v17 = *(void *)a2;
        uint64_t v18 = *(void *)a2 + 16 * v16;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v14, *(_DWORD *)v17, *(llvm::MDNode **)(v17 + 8));
          v17 += 16;
        }
        while (v17 != v18);
      }
    }
  }
  BOOL v20 = (llvm::Type *)(**(void **)(a2 + 64) + 1960);
  __int16 v46 = 257;
  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(a2 + 48) + 56) + 40) + 272), v20, 1);
  uint64_t v22 = (char *)operator new(0x60uLL);
  *((_DWORD *)v22 + 13) = *((_DWORD *)v22 + 13) & 0x38000000 | 1;
  uint64_t v23 = (unsigned __int8 *)(v22 + 32);
  *(void *)uint64_t v22 = 0;
  *((void *)v22 + 1) = 0;
  *((void *)v22 + 2) = 0;
  *((void *)v22 + 3) = v22 + 32;
  __int16 v48 = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v22 + 32), (uint64_t)v20, (uint64_t)v14, v47, 0, Alignment, 0);
  (*(void (**)(void, char *, unsigned char *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v22 + 32, v45, *(void *)(a2 + 48), *(void *)(a2 + 56));
  uint64_t v24 = *(unsigned int *)(a2 + 8);
  if (v24)
  {
    uint64_t v31 = *(void *)a2;
    uint64_t v32 = *(void *)a2 + 16 * v24;
    do
    {
      llvm::Instruction::setMetadata((llvm::Instruction *)v23, *(_DWORD *)v31, *(llvm::MDNode **)(v31 + 8));
      v31 += 16;
    }
    while (v31 != v32);
  }
  uint64_t v25 = *(void *)(*(void *)(a1 + 16) + 24);
  __int16 v46 = 257;
  if (*(void *)v23 != v25)
  {
    if (v22[48] <= 0x14u)
    {
      uint64_t v23 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a2 + 72) + 224))(*(void *)(a2 + 72), 40, v23, v25);
      if (v23) {
        BOOL v29 = v23[16] >= 0x1Cu;
      }
      else {
        BOOL v29 = 0;
      }
      if (v29)
      {
        (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v23, v45, *(void *)(a2 + 48), *(void *)(a2 + 56));
        uint64_t v39 = *(unsigned int *)(a2 + 8);
        if (v39)
        {
          uint64_t v40 = *(void *)a2;
          uint64_t v41 = v40 + 16 * v39;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v23, *(_DWORD *)v40, *(llvm::MDNode **)(v40 + 8));
            v40 += 16;
          }
          while (v40 != v41);
        }
      }
    }
    else
    {
      __int16 v48 = 257;
      uint64_t v23 = (unsigned __int8 *)llvm::CastInst::Create(40, (uint64_t)v23, v25, v47, 0);
      (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v23, v45, *(void *)(a2 + 48), *(void *)(a2 + 56));
      uint64_t v26 = *(unsigned int *)(a2 + 8);
      if (v26)
      {
        uint64_t v27 = *(void *)a2;
        uint64_t v28 = v27 + 16 * v26;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v23, *(_DWORD *)v27, *(llvm::MDNode **)(v27 + 8));
          v27 += 16;
        }
        while (v27 != v28);
      }
    }
  }
  return v23;
}

void *sub_1CCB1BDF4(void *a1)
{
  *a1 = &unk_1F262C1F0;
  uint64_t v2 = (void *)a1[6];
  if (v2 != a1 + 8) {
    free(v2);
  }
  return a1;
}

void sub_1CCB1BE48(void *a1)
{
  *a1 = &unk_1F262C1F0;
  uint64_t v2 = (void *)a1[6];
  if (v2 != a1 + 8) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCB1BEBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 40) + 216;
  __int16 v87 = 260;
  unint64_t v85 = v6;
  llvm::Triple::Triple((llvm::Triple *)&v88, (const llvm::Twine *)&v85);
  if (v90 == 23) {
    int v8 = 48;
  }
  else {
    int v8 = 32;
  }
  int v9 = *(_DWORD *)(a2 + 20);
  uint64_t v10 = v9 & 0x7FFFFFF;
  int v11 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v77 = a1;
  uint64_t v78 = a3;
  uint64_t v79 = a2;
  if (v11 == 84)
  {
    uint64_t v12 = 0;
  }
  else if (v11 == 39)
  {
    uint64_t v12 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v12 = 2;
  }
  uint64_t v13 = a2 - 32 * v10;
  if (v9 < 0)
  {
    uint64_t v74 = *(void *)(v13 - 8);
    if ((v74 & 0xFFFFFFFF0) != 0) {
      uint64_t v14 = (*(_DWORD *)(v13 - 12) - *(_DWORD *)(v13 - v74));
    }
    else {
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  if (v13 != a2 - 32 * v12 - 32 * v14 - 32)
  {
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v16 = -32 * v10;
    uint64_t v17 = (llvm::DataLayout *)(*(void *)(v15 + 40) + 272);
    unint64_t v80 = (32 * v12 + 32 * v14) ^ 0xFFFFFFFFFFFFFFE0;
    uint64_t v81 = v17;
    LODWORD(v18) = v8;
    while (1)
    {
      BOOL v19 = *(llvm::CastInst **)(a2 + v16);
      unint64_t v20 = (v16 + 32 * (unint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) >> 5;
      unsigned int v83 = *(_DWORD *)(*(void *)(a2 + 72) + 12) - 1;
      unsigned int v84 = v20;
      if (llvm::CallBase::paramHasAttr(a2, v20, 69))
      {
        unsigned int v45 = (llvm::Type *)sub_1CD49471C(a2, v20);
        uint64_t v46 = sub_1CB83544C((uint64_t)v17, (uint64_t)v45);
        int v47 = v17;
        BOOL v49 = v48 == 1;
        char Alignment = llvm::DataLayout::getAlignment(v47, v45, 1);
        if (v49) {
        uint64_t v52 = *(void *)(a2 + 64);
        }
        if (v52)
        {
          if (v84 + 2 < *(_DWORD *)(v52 + 8) && (uint64_t v53 = *(llvm::AttributeSetNode **)(v52 + 8 * (v84 + 2) + 40)) != 0)
          {
            __int16 v54 = llvm::AttributeSetNode::getAlignment(v53);
            LODWORD(v52) = v54;
            int v55 = HIBYTE(v54);
          }
          else
          {
            int v55 = 0;
            LODWORD(v52) = 0;
          }
        }
        else
        {
          int v55 = 0;
        }
        unint64_t v56 = v52 | (v55 << 8);
        BOOL v57 = v56 >= 0x100 && v52 >= 3;
        unint64_t v58 = 259;
        if (v57) {
          unint64_t v58 = v56;
        }
        if (v58 >= 0x100) {
          uint64_t v18 = (v18 + (1 << v58) - 1) & -(1 << v58);
        }
        unint64_t v59 = ((1 << Alignment) + ((unint64_t)(v46 + 7) >> 3) - 1) & -(1 << Alignment);
        unsigned int v40 = v84;
        unsigned int v41 = v83;
        if (v83 <= v84)
        {
          __int16 v60 = sub_1CCB1B204(v77, (uint64_t)v45, v78, (int)v18 - v8, (llvm::Instruction *)v59);
          if (v60)
          {
            int v61 = (llvm::Value *)v60;
            unint64_t v75 = v75 & 0xFFFFFFFFFFFF0000 | HIBYTE(word_1EBCE87F0) | 0x100;
            uint64_t v82 = sub_1CCB163B4(*(void **)(v77 + 24), v19, v78, (llvm::PointerType *)(**(void **)(v78 + 64) + 1912), (llvm::Instruction *)v75, 0);
            uint64_t v63 = **(void **)(v78 + 64);
            uint64_t v64 = *(llvm::ConstantInt **)(v63 + 1984);
            unint64_t v65 = *(unsigned int *)(v63 + 1992);
            unsigned int v86 = v65 >> 8;
            __int16 v66 = HIBYTE(word_1EBCE87F0);
            if (v65 >> 8 > 0x40) {
              operator new[]();
            }
            if (v65 <= 0xFF) {
              unint64_t v67 = 0;
            }
            else {
              unint64_t v67 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v65) + 63);
            }
            unint64_t v85 = v67 & v59;
            uint64_t v68 = llvm::ConstantInt::get(v64, (llvm::LLVMContext *)&v85, v62);
            a2 = v79;
            if (v86 >= 0x41 && v85) {
              MEMORY[0x1D25D9CB0](v85, 0x1000C8000313F17);
            }
            llvm::IRBuilderBase::CreateMemTransferInst(v78, 194, v61, v66 | 0x100, (llvm::Value *)v82, v66 | 0x100, v68, 0, 0, 0, 0, 0);
            unsigned int v40 = v84;
          }
          else
          {
            a2 = v79;
          }
          unsigned int v41 = v83;
        }
        LODWORD(v18) = ((v59 + 7) & 0xFFFFFFF8) + v18;
        uint64_t v17 = v81;
        goto LABEL_33;
      }
      BOOL v21 = *(llvm::Type **)v19;
      uint64_t v22 = sub_1CB83544C((uint64_t)v17, *(void *)v19);
      BOOL v24 = v23 == 1;
      char v26 = llvm::DataLayout::getAlignment(v17, v21, 1);
      if (v24) {
      uint64_t v27 = *(void *)v19;
      }
      int v28 = *(unsigned __int8 *)(*(void *)v19 + 8);
      if (v28 == 17)
      {
        uint64_t v27 = **(void **)(v27 + 16);
        if (*(unsigned char *)(v27 + 8) != 6) {
          goto LABEL_17;
        }
      }
      else if ((v28 & 0xFE) == 0x12)
      {
LABEL_17:
        uint64_t v17 = v81;
        unint64_t v30 = (unint64_t)(sub_1CB83544C((uint64_t)v81, v27) + 7) >> 3;
        BOOL v32 = v31 == 1;
        char v33 = llvm::DataLayout::getAlignment(v81, (llvm::Type *)v27, 1);
        unint64_t v29 = ((1 << v33) + v30 - 1) & -(1 << v33);
        if (v32) {
        goto LABEL_19;
        }
      }
      unint64_t v29 = 8;
      uint64_t v17 = v81;
LABEL_19:
      uint64_t v35 = (llvm::Instruction *)(((1 << v26) + ((unint64_t)(v22 + 7) >> 3) - 1) & -(1 << v26));
      unint64_t v36 = 8;
      if (v29 > 8) {
        unint64_t v36 = v29;
      }
      unint64_t v37 = (v36 + v18 - 1) / v36 * v36;
      if ((unint64_t)v35 >= 8 || *(unsigned char *)v17 == 0) {
        int v39 = v37;
      }
      else {
        int v39 = v37 - v35 + 8;
      }
      unsigned int v40 = v84;
      unsigned int v41 = v83;
      if (v83 <= v84)
      {
        uint64_t v42 = sub_1CCB1B204(v77, *(void *)v19, v78, v39 - v8, v35);
        if (v42)
        {
          uint64_t v43 = (uint64_t)v42;
          __int16 v44 = sub_1CCB16AB0(*(void *)(v77 + 24), (uint64_t)v19);
          unint64_t v76 = v76 & 0xFFFFFFFFFFFF0000 | HIBYTE(word_1EBCE87F0) | 0x100;
          sub_1CC27BF8C((uint64_t *)v78, (uint64_t)v44, v43, HIBYTE(word_1EBCE87F0) | 0x100, 0);
        }
        a2 = v79;
        unsigned int v40 = v84;
        unsigned int v41 = v83;
      }
      else
      {
        a2 = v79;
      }
      LODWORD(v18) = (v39 + v35 + 7) & 0xFFFFFFF8;
LABEL_33:
      if (v41 > v40) {
        int v8 = v18;
      }
      v16 += 32;
      if (v80 == v16) {
        goto LABEL_68;
      }
    }
  }
  LODWORD(v18) = v8;
LABEL_68:
  uint64_t v69 = **(void **)(v78 + 64);
  uint64_t v70 = *(llvm::ConstantInt **)(v69 + 1984);
  unint64_t v71 = *(unsigned int *)(v69 + 1992);
  unsigned int v86 = v71 >> 8;
  if (v71 >> 8 > 0x40) {
    operator new[]();
  }
  if (v71 <= 0xFF) {
    LODWORD(v72) = 0;
  }
  else {
    unint64_t v72 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v71) + 63);
  }
  unint64_t v85 = v72 & (v18 - v8);
  char v73 = llvm::ConstantInt::get(v70, (llvm::LLVMContext *)&v85, v7);
  if (v86 >= 0x41 && v85) {
    MEMORY[0x1D25D9CB0](v85, 0x1000C8000313F17);
  }
  sub_1CC27BF8C((uint64_t *)v78, (uint64_t)v73, *(void *)(*(void *)(v77 + 16) + 88), 0, 0);
  if (v89 < 0) {
    operator delete(v88);
  }
}

void sub_1CCB1C5F0(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = 0;
  v38[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = **a2;
  v26[0] = v27;
  v26[1] = (void *)0x200000000;
  uint64_t v28 = v5;
  unint64_t v29 = &v37;
  unint64_t v30 = v38;
  uint64_t v31 = 0;
  int v32 = 0;
  __int16 v33 = 512;
  char v34 = 7;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  unint64_t v37 = &unk_1F2616E88;
  v38[0] = &unk_1F2617008;
  uint64_t v6 = a2 + 3;
  int v8 = a2[5];
  uint64_t v7 = (unsigned __int8 *)a2[6];
  v27[4] = v8;
  v27[5] = v6;
  int v23 = v7;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)&v23, v7, 2);
    uint64_t v4 = (uint64_t)v23;
  }
  sub_1CB8461A4((uint64_t)v26, 0, v4);
  if (v23)
  {
    int v19 = *v23;
    if ((v19 - 4) > 0x1E)
    {
      if ((v19 - 3) >= 0xFFFFFFFE) {
        uint64_t v22 = v23;
      }
      else {
        uint64_t v22 = 0;
      }
      if ((v19 - 3) < 0xFFFFFFFE)
      {
        if (v19 == 3) {
          *((void *)v23 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v21 = (unint64_t)(v22 + 8);
    }
    else
    {
      if ((v23[1] & 0x7F) != 2 && !*((_DWORD *)v23 + 3)) {
        goto LABEL_4;
      }
      uint64_t v20 = *((void *)v23 + 2);
      if ((v20 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v21 = v20 & 0xFFFFFFFFFFFFFFF8;
      if (!v21) {
        goto LABEL_4;
      }
    }
    BOOL v24 = &v23;
    sub_1CC5FA668(v21 + 16, &v24);
  }
LABEL_4:
  unsigned int v9 = *(_DWORD *)(a1 + 56);
  if (v9 >= *(_DWORD *)(a1 + 60)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 48) + 8 * v9) = a2;
  ++*(_DWORD *)(a1 + 56);
  uint64_t v10 = sub_1CCB163B4(*(void **)(a1 + 24), (llvm::CastInst *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], (uint64_t)v26, (llvm::PointerType *)(*(void *)v28 + 1912), (llvm::Instruction *)0x103, 1);
  NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(void *)v28 + 1912), v11, v12);
  uint64_t v15 = *(llvm::ConstantInt **)(*(void *)v28 + 1984);
  unsigned int v16 = *(_DWORD *)(*(void *)v28 + 1992);
  unsigned int v25 = v16 >> 8;
  if (v16 >> 8 > 0x40) {
    operator new[]();
  }
  if (v16 <= 0xFF) {
    LOBYTE(v17) = 0;
  }
  else {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v16) + 63);
  }
  BOOL v24 = (unsigned __int8 **)(v17 & 8);
  uint64_t v18 = llvm::ConstantInt::get(v15, (llvm::LLVMContext *)&v24, v13);
  if (v25 >= 0x41 && v24) {
    MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
  }
  llvm::IRBuilderBase::CreateMemSet((uint64_t)v26, (llvm::Value *)v10, (uint64_t)NullValue, v18, 259, 0, 0, 0, 0);
  if (v26[0] != v27) {
    free(v26[0]);
  }
}

void sub_1CCB1C93C(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = 0;
  v37[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = **a2;
  v25[0] = v26;
  v25[1] = (void *)0x200000000;
  uint64_t v27 = v5;
  uint64_t v28 = &v36;
  unint64_t v29 = v37;
  uint64_t v30 = 0;
  int v31 = 0;
  __int16 v32 = 512;
  char v33 = 7;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = &unk_1F2616E88;
  v37[0] = &unk_1F2617008;
  uint64_t v6 = a2 + 3;
  int v8 = a2[5];
  uint64_t v7 = (unsigned __int8 *)a2[6];
  v26[4] = v8;
  v26[5] = v6;
  uint64_t v22 = v7;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)&v22, v7, 2);
    uint64_t v4 = (uint64_t)v22;
  }
  sub_1CB8461A4((uint64_t)v25, 0, v4);
  if (v22)
  {
    int v18 = *v22;
    if ((v18 - 4) > 0x1E)
    {
      if ((v18 - 3) >= 0xFFFFFFFE) {
        unint64_t v21 = v22;
      }
      else {
        unint64_t v21 = 0;
      }
      if ((v18 - 3) < 0xFFFFFFFE)
      {
        if (v18 == 3) {
          *((void *)v22 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v20 = (unint64_t)(v21 + 8);
    }
    else
    {
      if ((v22[1] & 0x7F) != 2 && !*((_DWORD *)v22 + 3)) {
        goto LABEL_4;
      }
      uint64_t v19 = *((void *)v22 + 2);
      if ((v19 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFF8;
      if (!v20) {
        goto LABEL_4;
      }
    }
    int v23 = &v22;
    sub_1CC5FA668(v20 + 16, &v23);
  }
LABEL_4:
  unsigned int v9 = sub_1CCB163B4(*(void **)(a1 + 24), (llvm::CastInst *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], (uint64_t)v25, (llvm::PointerType *)(*(void *)v27 + 1912), (llvm::Instruction *)0x103, 1);
  NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(void *)v27 + 1912), v10, v11);
  uint64_t v14 = *(llvm::ConstantInt **)(*(void *)v27 + 1984);
  unsigned int v15 = *(_DWORD *)(*(void *)v27 + 1992);
  unsigned int v24 = v15 >> 8;
  if (v15 >> 8 > 0x40) {
    operator new[]();
  }
  if (v15 <= 0xFF) {
    LOBYTE(v16) = 0;
  }
  else {
    unint64_t v16 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v15) + 63);
  }
  int v23 = (unsigned __int8 **)(v16 & 8);
  unint64_t v17 = llvm::ConstantInt::get(v14, (llvm::LLVMContext *)&v23, v12);
  if (v24 >= 0x41 && v23) {
    MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
  }
  llvm::IRBuilderBase::CreateMemSet((uint64_t)v25, (llvm::Value *)v9, (uint64_t)NullValue, v17, 259, 0, 0, 0, 0);
  if (v25[0] != v26) {
    free(v25[0]);
  }
}

void sub_1CCB1CC4C(uint64_t a1)
{
  uint64_t v2 = 0;
  v93[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 448);
  uint64_t v4 = **(void ***)v3;
  uint64_t v78 = (llvm::MDNode **)v80;
  uint64_t v79 = 0x200000000;
  unsigned int v83 = v4;
  unsigned int v84 = &v92;
  unint64_t v85 = v93;
  uint64_t v86 = 0;
  int v87 = 0;
  __int16 v88 = 512;
  char v89 = 7;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = &unk_1F2616E88;
  v93[0] = &unk_1F2617008;
  uint64_t v81 = *(void *)(v3 + 40);
  uint64_t v82 = v3 + 24;
  uint64_t v5 = *(char **)(v3 + 48);
  v59[0] = v5;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)v59, (unsigned __int8 *)v5, 2);
    uint64_t v2 = v59[0];
  }
  sub_1CB8461A4((uint64_t)&v78, 0, (uint64_t)v2);
  if (v59[0])
  {
    int v49 = *v59[0];
    if ((v49 - 4) > 0x1E)
    {
      if ((v49 - 3) >= 0xFFFFFFFE) {
        uint64_t v52 = v59[0];
      }
      else {
        uint64_t v52 = 0;
      }
      if ((v49 - 3) < 0xFFFFFFFE)
      {
        if (v49 == 3) {
          *((void *)v59[0] + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v51 = (unint64_t)(v52 + 8);
    }
    else
    {
      if ((v59[0][1] & 0x7F) != 2 && !*((_DWORD *)v59[0] + 3)) {
        goto LABEL_4;
      }
      uint64_t v50 = *((void *)v59[0] + 2);
      if ((v50 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v51 = v50 & 0xFFFFFFFFFFFFFFF8;
      if (!v51) {
        goto LABEL_4;
      }
    }
    int v61 = v59;
    sub_1CC5FA668(v51 + 16, &v61);
  }
LABEL_4:
  uint64_t v6 = (llvm::Type *)(*v83 + 1984);
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 88);
  __int16 v60 = 257;
  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v81 + 56) + 40) + 272), v6, 1);
  unsigned int v9 = operator new(0x60uLL);
  v9[13] = v9[13] & 0x38000000 | 1;
  uint64_t v10 = (llvm::Instruction *)(v9 + 8);
  *(void *)unsigned int v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = v9 + 8;
  __int16 v64 = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v9 + 8), (uint64_t)v6, v7, (const char **)&v61, 0, Alignment, 0);
  (*(void (**)(void *, llvm::Instruction *, const char **, uint64_t, uint64_t))(*v85 + 16))(v85, v10, v59, v81, v82);
  if (v79)
  {
    int v47 = v78;
    int v48 = (char *)&v78[2 * v79];
    do
    {
      llvm::Instruction::setMetadata(v10, *(_DWORD *)v47, v47[1]);
      v47 += 2;
    }
    while (v47 != (llvm::MDNode **)v48);
  }
  *(void *)(a1 + 40) = v10;
  int v11 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 16) + 24), 0, 0);
  uint64_t v12 = *(void *)(a1 + 40);
  __int16 v64 = 257;
  __int16 v54 = sub_1CB844A3C((uint64_t)&v78, v11, v12, (uint64_t)&v61, 0, 0);
  if (*(_DWORD *)(a1 + 56))
  {
    uint64_t v13 = (llvm::Type *)(**(void **)(*(void *)(a1 + 16) + 16) + 1912);
    __int16 v64 = 257;
    uint64_t v14 = sub_1CB935044((uint64_t *)&v78, v13, v54, (uint64_t)&v61);
    *(void *)(a1 + 32) = v14;
    llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v78, 194, v14, 259, *(llvm::Value **)(*(void *)(a1 + 16) + 72), 259, (uint64_t *)v54, 0, 0, 0, 0, 0);
    uint64_t v53 = *(unsigned int *)(a1 + 56);
    if (v53)
    {
      for (uint64_t i = 0; i != v53; ++i)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8 * i);
        uint64_t v18 = *(void *)(v17 + 32);
        if (v18) {
          BOOL v19 = v18 == *(void *)(v17 + 40) + 40;
        }
        else {
          BOOL v19 = 1;
        }
        if (v19) {
          unint64_t v20 = 0;
        }
        else {
          unint64_t v20 = (uint64_t **)(v18 - 24);
        }
        uint64_t v21 = **v20;
        int v61 = v63;
        uint64_t v62 = 0x200000000;
        uint64_t v67 = v21;
        uint64_t v68 = &v76;
        uint64_t v69 = &v77;
        uint64_t v70 = 0;
        int v71 = 0;
        __int16 v72 = 512;
        char v73 = 7;
        unint64_t v65 = 0;
        __int16 v66 = 0;
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        unint64_t v76 = &unk_1F2616E88;
        uint64_t v77 = &unk_1F2617008;
        unint64_t v65 = v20[5];
        __int16 v66 = v20 + 3;
        uint64_t v22 = (unsigned __int8 *)v20[6];
        v57[0] = v22;
        if (v22)
        {
          llvm::MetadataTracking::track((uint64_t)v57, v22, 2);
          uint64_t v16 = v57[0];
        }
        sub_1CB8461A4((uint64_t)&v61, 0, v16);
        if (!v57[0]) {
          goto LABEL_17;
        }
        int v39 = *(unsigned __int8 *)v57[0];
        if ((v39 - 4) > 0x1E)
        {
          if ((v39 - 3) >= 0xFFFFFFFE) {
            uint64_t v42 = v57[0];
          }
          else {
            uint64_t v42 = 0;
          }
          if ((v39 - 3) < 0xFFFFFFFE)
          {
            if (v39 == 3) {
              *(void *)(v57[0] + 8) = 0;
            }
            goto LABEL_17;
          }
          unint64_t v41 = v42 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v57[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v57[0] + 12)) {
            goto LABEL_17;
          }
          uint64_t v40 = *(void *)(v57[0] + 16);
          if ((v40 & 4) == 0) {
            goto LABEL_17;
          }
          unint64_t v41 = v40 & 0xFFFFFFFFFFFFFFF8;
          if (!v41) {
            goto LABEL_17;
          }
        }
        v59[0] = (const char *)v57;
        sub_1CC5FA668(v41 + 16, v59);
LABEL_17:
        int v23 = *(unsigned __int8 **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
        unsigned int v24 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(**(void **)(*(void *)(a1 + 16) + 16) + 1984), 0);
        uint64_t v25 = *(void *)(*(void *)(a1 + 16) + 24);
        __int16 v58 = 257;
        if (*(void *)v23 != v25)
        {
          if (v23[16] <= 0x14u)
          {
            uint64_t v28 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v68 + 28))(v68, 47, v23, v25);
            int v23 = (unsigned __int8 *)v28;
            if (v28)
            {
              if (*(unsigned __int8 *)(v28 + 16) >= 0x1Cu)
              {
                (*((void (**)(void **, uint64_t, void *, uint64_t *, uint64_t **))*v69 + 2))(v69, v28, v57, v65, v66);
                if (v62)
                {
                  unsigned int v45 = (llvm::MDNode **)v61;
                  uint64_t v46 = (llvm::MDNode **)((char *)v61 + 16 * v62);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v23, *(_DWORD *)v45, v45[1]);
                    v45 += 2;
                  }
                  while (v45 != v46);
                }
              }
            }
          }
          else
          {
            __int16 v60 = 257;
            int v23 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v23, v25, v59, 0);
            (*((void (**)(void **, unsigned __int8 *, void *, uint64_t *, uint64_t **))*v69 + 2))(v69, v23, v57, v65, v66);
            if (v62)
            {
              char v26 = (llvm::MDNode **)v61;
              uint64_t v27 = (llvm::MDNode **)((char *)v61 + 16 * v62);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v23, *(_DWORD *)v26, v26[1]);
                v26 += 2;
              }
              while (v26 != v27);
            }
          }
        }
        unint64_t v29 = llvm::PointerType::get(v24, 0);
        __int16 v56 = 257;
        if (*(void *)v23 != v29)
        {
          if (v23[16] <= 0x14u)
          {
            int v23 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v68
                                      + 28))(v68, 48, v23, v29);
            if (v23) {
              BOOL v32 = v23[16] >= 0x1Cu;
            }
            else {
              BOOL v32 = 0;
            }
            if (v32)
            {
              (*((void (**)(void **, unsigned __int8 *, unsigned char *, uint64_t *, uint64_t **))*v69 + 2))(v69, v23, v55, v65, v66);
              if (v62)
              {
                uint64_t v43 = (llvm::MDNode **)v61;
                __int16 v44 = (llvm::MDNode **)((char *)v61 + 16 * v62);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v23, *(_DWORD *)v43, v43[1]);
                  v43 += 2;
                }
                while (v43 != v44);
              }
            }
          }
          else
          {
            __int16 v60 = 257;
            int v23 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v23, v29, v59, 0);
            (*((void (**)(void **, unsigned __int8 *, unsigned char *, uint64_t *, uint64_t **))*v69 + 2))(v69, v23, v55, v65, v66);
            if (v62)
            {
              uint64_t v30 = (llvm::MDNode **)v61;
              int v31 = (llvm::MDNode **)((char *)v61 + 16 * v62);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v23, *(_DWORD *)v30, v30[1]);
                v30 += 2;
              }
              while (v30 != v31);
            }
          }
        }
        __int16 v58 = 257;
        char v33 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v65[7] + 40) + 272), v24, 1);
        uint64_t v34 = operator new(0x60uLL);
        v34[13] = v34[13] & 0x38000000 | 1;
        uint64_t v35 = (llvm::Instruction *)(v34 + 8);
        *(void *)uint64_t v34 = 0;
        *((void *)v34 + 1) = 0;
        *((void *)v34 + 2) = 0;
        *((void *)v34 + 3) = v34 + 8;
        __int16 v60 = 257;
        llvm::LoadInst::LoadInst((llvm::Value *)(v34 + 8), (uint64_t)v24, (uint64_t)v23, v59, 0, v33, 0);
        (*((void (**)(void **, llvm::Instruction *, void *, uint64_t *, uint64_t **))*v69 + 2))(v69, v35, v57, v65, v66);
        if (v62)
        {
          unint64_t v37 = (llvm::MDNode **)v61;
          uint64_t v38 = (llvm::MDNode **)((char *)v61 + 16 * v62);
          do
          {
            llvm::Instruction::setMetadata(v35, *(_DWORD *)v37, v37[1]);
            v37 += 2;
          }
          while (v37 != v38);
        }
        uint64_t v36 = sub_1CCB163B4(*(void **)(a1 + 24), v35, (uint64_t)&v61, (llvm::PointerType *)(*(void *)v67 + 1912), (llvm::Instruction *)0x103, 1);
        llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v61, 194, (llvm::Value *)v36, 259, *(llvm::Value **)(a1 + 32), 259, (uint64_t *)v54, 0, 0, 0, 0, 0);
        if (v61 != v63) {
          free(v61);
        }
      }
    }
  }
  if (v78 != (llvm::MDNode **)v80) {
    free(v78);
  }
}

void *sub_1CCB1D55C(void *a1)
{
  *a1 = &unk_1F262C230;
  uint64_t v2 = (void *)a1[7];
  if (v2 != a1 + 9) {
    free(v2);
  }
  return a1;
}

void sub_1CCB1D5B0(void *a1)
{
  *a1 = &unk_1F262C230;
  uint64_t v2 = (void *)a1[7];
  if (v2 != a1 + 9) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

llvm::Instruction *sub_1CCB1D624(uint64_t a1, uint64_t a2, const llvm::APFloat *a3, uint64_t a4, llvm::Instruction *a5)
{
  uint64_t v5 = (uint64_t)a3;
  uint64_t v7 = (void *)a1;
  uint64_t v8 = *(void *)(*(void *)(a2 - 32) + 112);
  if (!v8 || !*(_DWORD *)(v8 + 8) || (uint64_t v9 = *(void *)(v8 + 40)) == 0 || (v10 = *(_DWORD *)(v9 + 40)) == 0)
  {
LABEL_22:
    BOOL v20 = 1;
    goto LABEL_23;
  }
  uint64_t v11 = *(void *)(v9 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v96 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v96 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v96;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  unint64_t v12 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xA5B7BEF690D4EBC0)) ^ ((0x9DDFEA08EB382D69
                                                                             * (qword_1EBCBE580 ^ 0xA5B7BEF690D4EBC0)) >> 47) ^ 0xD1D1D185BDB198B5);
  unsigned int v13 = (-348639895 * ((v12 >> 47) ^ v12)) ^ 0x662D7466;
  for (int i = 1; ; ++i)
  {
    unsigned int v15 = v13 & (v10 - 1);
    uint64_t v16 = v11 + 24 * v15;
    uint64_t v17 = *(void **)v16;
    if (*(void *)v16 == -1)
    {
      if ("use-soft-float" == (char *)-1) {
        goto LABEL_20;
      }
      goto LABEL_9;
    }
    if (v17 != (void *)-2) {
      break;
    }
    if ("use-soft-float" == (char *)-2) {
      goto LABEL_20;
    }
LABEL_9:
    if (v17 == (void *)-1) {
      goto LABEL_24;
    }
    unsigned int v13 = i + v15;
  }
  if (*(void *)(v16 + 8) != 14) {
    goto LABEL_9;
  }
  if (*v17 != 0x74666F732D657375 || *(void *)((char *)v17 + 6) != 0x74616F6C662D7466) {
    goto LABEL_9;
  }
LABEL_20:
  uint64_t v19 = *(void *)(v16 + 16);
  if (!v19)
  {
LABEL_24:
    int v100 = 1;
    uint64_t v7 = (void *)a1;
    goto LABEL_25;
  }
  uint64_t v7 = (void *)a1;
  if (*(_DWORD *)(v19 + 16) != 4) {
    goto LABEL_22;
  }
  BOOL v20 = *(_DWORD *)(v19 + *(unsigned int *)(v19 + 12) + 25) != *(_DWORD *)"true";
LABEL_23:
  int v100 = v20;
LABEL_25:
  int v21 = *(_DWORD *)(a2 + 20);
  uint64_t v22 = (llvm::PointerType ***)(a2 - 32 * (v21 & 0x7FFFFFF));
  int v23 = *(unsigned __int8 *)(a2 + 16);
  unsigned int v98 = (uint64_t *)v5;
  if (v23 == 84)
  {
    uint64_t v24 = 0;
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_153:
    uint64_t v97 = (uint64_t)*(v22 - 1);
    if ((v97 & 0xFFFFFFFF0) != 0) {
      uint64_t v25 = (*((_DWORD *)v22 - 3) - *(_DWORD *)((char *)v22 - v97));
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v7 = (void *)a1;
  }
  else
  {
    if (v23 == 39) {
      uint64_t v24 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else {
      uint64_t v24 = 2;
    }
    uint64_t v7 = (void *)a1;
    if (v21 < 0) {
      goto LABEL_153;
    }
LABEL_27:
    uint64_t v25 = 0;
  }
  uint64_t v26 = a2 - 32 * v24 - 32 * v25 - 32;
  if (v22 != (llvm::PointerType ***)v26)
  {
    unsigned int v107 = 0;
    unint64_t v99 = (llvm::DataLayout *)(*(void *)(v7[1] + 40) + 272);
    unsigned int v102 = 160;
    uint64_t v27 = 128;
    unsigned int v28 = 16;
    uint64_t v106 = a2 - 32 * v24 - 32 * v25 - 32;
    while (1)
    {
      unint64_t v29 = *v22;
      int v30 = *(_DWORD *)(a2 + 20);
      int v31 = *(_DWORD *)(*(void *)(a2 + 72) + 12);
      BOOL v32 = **v22;
      int v33 = *((_DWORD *)v32 + 2);
      if (v33 == 32781 || v33 == 5)
      {
        uint64_t v35 = v27;
        unint64_t v36 = llvm::PointerType::get(**v22, 0);
        uint64_t v27 = v35;
        BOOL v32 = (llvm::Type *)v36;
        unsigned int v37 = 0;
      }
      else if (v33 >= 7u)
      {
        int v38 = v33 | 2;
        if ((v33 & 0xFE) == 0x12) {
          int v39 = 2;
        }
        else {
          int v39 = 3;
        }
        if (v38 == 15) {
          unsigned int v37 = 0;
        }
        else {
          unsigned int v37 = v39;
        }
      }
      else
      {
        unsigned int v37 = v100;
      }
      unint64_t v40 = ((unint64_t)&v22[4 * (v30 & 0x7FFFFFF)] - a2) >> 5;
      unsigned int v41 = v31 - 1;
      if (v28 > 0x37 && v37 == 0) {
        unsigned int v37 = 3;
      }
      if (v27 > 0x9F && v37 == 1) {
        unsigned int v37 = 3;
      }
      if (v41 <= v40 || v107 > 7) {
        unsigned int v45 = 3;
      }
      else {
        unsigned int v45 = 2;
      }
      if (v37 == 2) {
        uint64_t v46 = v45;
      }
      else {
        uint64_t v46 = v37;
      }
      switch(v46)
      {
        case 1:
          if (v27 > 0x318)
          {
            uint64_t v27 = 800;
          }
          else
          {
            uint64_t v69 = (v27 + 8);
            if (v41 <= v40)
            {
              int v70 = v27;
              uint64_t v67 = (unsigned __int8 *)sub_1CCB1F160((uint64_t)v7, v5, v27, a4, a5);
              if (*(_DWORD *)(v7[2] + 4)) {
                uint64_t v68 = sub_1CCB1F1F8((uint64_t)v7, v5, v70, a4, a5);
              }
              else {
                uint64_t v68 = 0;
              }
              int v51 = 0;
              uint64_t v27 = v69;
              goto LABEL_107;
            }
            uint64_t v27 = (v27 + 8);
            uint64_t v26 = v106;
          }
          goto LABEL_124;
        case 2:
          ++v107;
          goto LABEL_124;
        case 3:
          if (v41 <= v40)
          {
            unsigned int v104 = v27;
            uint64_t v53 = sub_1CB83544C((uint64_t)v99, (uint64_t)v32);
            BOOL v55 = v54 == 1;
            char Alignment = llvm::DataLayout::getAlignment(v99, v32, 1);
            if (v55) {
            unint64_t v58 = ((1 << Alignment) + ((unint64_t)(v53 + 7) >> 3) - 1) & -(1 << Alignment);
            }
            unint64_t v59 = (v58 + 7) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v60 = v59 + v102;
            if (v60 > 0x320)
            {
              unsigned int v102 = 800;
              uint64_t v5 = (uint64_t)v98;
              uint64_t v7 = (void *)a1;
              uint64_t v26 = v106;
              uint64_t v27 = v104;
            }
            else
            {
              int HasAttr = llvm::CallBase::paramHasAttr(a2, v40, 67);
              if (llvm::CallBase::paramHasAttr(a2, v40, 48)) {
                int v64 = 2;
              }
              else {
                int v64 = 0;
              }
              if (HasAttr) {
                int v51 = 1;
              }
              else {
                int v51 = v64;
              }
              int v65 = v59 - v58;
              if (v51) {
                int v65 = 0;
              }
              int v66 = v65 + v102;
              uint64_t v7 = (void *)a1;
              uint64_t v5 = (uint64_t)v98;
              uint64_t v67 = (unsigned __int8 *)sub_1CCB1F160(a1, (uint64_t)v98, v65 + v102, v62, v63);
              if (*(_DWORD *)(*(void *)(a1 + 16) + 4)) {
                uint64_t v68 = sub_1CCB1F1F8(a1, (uint64_t)v98, v66, a4, a5);
              }
              else {
                uint64_t v68 = 0;
              }
              uint64_t v27 = v104;
              unsigned int v102 = v60;
LABEL_107:
              uint64_t v26 = v106;
              if (v67) {
                goto LABEL_111;
              }
            }
          }
          goto LABEL_124;
        default:
          if (v28 > 0x318)
          {
            unsigned int v28 = 800;
          }
          else
          {
            if (v41 <= v40)
            {
              unsigned int v103 = v27;
              int v47 = llvm::CallBase::paramHasAttr(a2, v40, 67);
              if (llvm::CallBase::paramHasAttr(a2, v40, 48)) {
                int v50 = 2;
              }
              else {
                int v50 = 0;
              }
              if (v47) {
                int v51 = 1;
              }
              else {
                int v51 = v50;
              }
              if (v51)
              {
                LODWORD(v52) = 0;
              }
              else
              {
                uint64_t v71 = sub_1CB83544C((uint64_t)v99, (uint64_t)v32);
                BOOL v73 = v72 == 1;
                char v75 = llvm::DataLayout::getAlignment(v99, v32, 1);
                if (v73) {
                unint64_t v52 = 8 - (((1 << v75) + ((unint64_t)(v71 + 7) >> 3) - 1) & -(1 << v75));
                }
                uint64_t v7 = (void *)a1;
              }
              uint64_t v26 = v106;
              int v76 = v28 + v52;
              uint64_t v67 = (unsigned __int8 *)sub_1CCB1F160((uint64_t)v7, v5, v28 + v52, v48, v49);
              if (*(_DWORD *)(v7[2] + 4)) {
                uint64_t v68 = sub_1CCB1F1F8((uint64_t)v7, v5, v76, a4, a5);
              }
              else {
                uint64_t v68 = 0;
              }
              v28 += 8;
              uint64_t v27 = v103;
              if (!v67) {
                goto LABEL_124;
              }
LABEL_111:
              uint64_t v105 = (llvm::CastInst *)v68;
              uint64_t v77 = v27;
              uint64_t v78 = (uint64_t *)sub_1CCB16AB0(v7[3], (uint64_t)v29);
              if (v51) {
                uint64_t v78 = (uint64_t *)sub_1CCB1F40C((void *)v7[3], v5, v78, **(void **)(v5 + 64) + 1984, (llvm::Type *)(v51 == 2));
              }
              unint64_t v79 = llvm::PointerType::get((llvm::PointerType *)*v78, 0);
              v108[0] = "_msarg_va_s";
              __int16 v109 = 259;
              if (*(void *)v67 != v79)
              {
                if (v67[16] > 0x14u)
                {
                  __int16 v112 = 257;
                  uint64_t v67 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v67, v79, &v110, 0);
                  (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(v5 + 80)
                                                                                              + 16))(*(void *)(v5 + 80), v67, v108, *(void *)(v5 + 48), *(void *)(v5 + 56));
                  uint64_t v80 = *(unsigned int *)(v5 + 8);
                  if (v80)
                  {
                    uint64_t v85 = *(void *)v5;
                    uint64_t v86 = *(void *)v5 + 16 * v80;
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v67, *(_DWORD *)v85, *(llvm::MDNode **)(v85 + 8));
                      v85 += 16;
                    }
                    while (v85 != v86);
                  }
                  goto LABEL_116;
                }
                uint64_t v81 = (*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**(void **)(v5 + 72) + 224))(*(void *)(v5 + 72), 48, v67, v79);
                uint64_t v67 = (unsigned __int8 *)v81;
                if (v81 && *(unsigned __int8 *)(v81 + 16) >= 0x1Cu)
                {
                  (*(void (**)(void, uint64_t, void *, void, void))(**(void **)(v5 + 80) + 16))(*(void *)(v5 + 80), v81, v108, *(void *)(v5 + 48), *(void *)(v5 + 56));
                  uint64_t v87 = *(unsigned int *)(v5 + 8);
                  if (v87)
                  {
                    uint64_t v88 = *v98;
                    uint64_t v89 = *v98 + 16 * v87;
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v67, *(_DWORD *)v88, *(llvm::MDNode **)(v88 + 8));
                      v88 += 16;
                    }
                    while (v88 != v89);
                  }
                  uint64_t v5 = (uint64_t)v98;
LABEL_116:
                  uint64_t v7 = (void *)a1;
                }
              }
              sub_1CC27BF8C((uint64_t *)v5, (uint64_t)v78, (uint64_t)v67, 0, 0);
              if (*(_DWORD *)(v7[2] + 4))
              {
                uint64_t v82 = sub_1CCB176E8(v7[3], (uint64_t)v29, a3);
                uint64_t v84 = sub_1CB83544C((uint64_t)v99, *v78);
                if (v83 == 1) {
                sub_1CCB17798((void *)v7[3], (uint64_t *)v5, v82, v105, (unint64_t)(v84 + 7) >> 3, word_1EBCE87F0);
                }
              }
              uint64_t v26 = v106;
              uint64_t v27 = v77;
              goto LABEL_124;
            }
            v28 += 8;
          }
LABEL_124:
          v22 += 4;
          if (v22 == (llvm::PointerType ***)v26) {
            goto LABEL_135;
          }
          break;
      }
    }
  }
  unsigned int v102 = 160;
LABEL_135:
  uint64_t v90 = **(void **)(v5 + 64);
  uint64_t v91 = *(llvm::ConstantInt **)(v90 + 1984);
  unint64_t v92 = *(unsigned int *)(v90 + 1992);
  unsigned int v111 = v92 >> 8;
  if (v92 >> 8 > 0x40) {
    operator new[]();
  }
  if (v92 <= 0xFF) {
    LODWORD(v93) = 0;
  }
  else {
    unint64_t v93 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v92) + 63);
  }
  unsigned int v110 = (const char *)(v93 & (v102 - 160));
  __int16 v94 = llvm::ConstantInt::get(v91, (llvm::LLVMContext *)&v110, a3);
  if (v111 >= 0x41 && v110) {
    MEMORY[0x1D25D9CB0](v110, 0x1000C8000313F17);
  }
  return sub_1CC27BF8C((uint64_t *)v5, (uint64_t)v94, *(void *)(*(void *)(a1 + 16) + 88), 0, 0);
}

void sub_1CCB1E06C(uint64_t a1, uint64_t **a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 64);
  if (v2 >= *(_DWORD *)(a1 + 68)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 56) + 8 * v2) = a2;
  ++*(_DWORD *)(a1 + 64);

  sub_1CCB1F898(a1, a2);
}

void sub_1CCB1E0E8(uint64_t a1)
{
  v129[1] = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a1 + 64)) {
    return;
  }
  uint64_t v2 = 0;
  uint64_t v3 = *(uint64_t ***)(*(void *)(a1 + 24) + 448);
  uint64_t v4 = **v3;
  __int16 v114 = (llvm::MDNode **)v116;
  uint64_t v115 = 0x200000000;
  uint64_t v119 = v4;
  unsigned int v120 = &v128;
  __int16 v121 = v129;
  uint64_t v122 = 0;
  int v123 = 0;
  __int16 v124 = 512;
  char v125 = 7;
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  __int16 v128 = &unk_1F2616E88;
  v129[0] = &unk_1F2617008;
  __int16 v117 = v3[5];
  __int16 v118 = v3 + 3;
  uint64_t v5 = (unsigned __int8 *)v3[6];
  v109[0] = v5;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)v109, v5, 2);
    uint64_t v2 = v109[0];
  }
  sub_1CB8461A4((uint64_t)&v114, 0, v2);
  if (v109[0])
  {
    int v100 = *(unsigned __int8 *)v109[0];
    if ((v100 - 4) > 0x1E)
    {
      if ((v100 - 3) >= 0xFFFFFFFE) {
        uint64_t v103 = v109[0];
      }
      else {
        uint64_t v103 = 0;
      }
      if ((v100 - 3) < 0xFFFFFFFE)
      {
        if (v100 == 3) {
          *(void *)(v109[0] + 8) = 0;
        }
        goto LABEL_5;
      }
      unint64_t v102 = v103 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v109[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v109[0] + 12)) {
        goto LABEL_5;
      }
      uint64_t v101 = *(void *)(v109[0] + 16);
      if ((v101 & 4) == 0) {
        goto LABEL_5;
      }
      unint64_t v102 = v101 & 0xFFFFFFFFFFFFFFF8;
      if (!v102) {
        goto LABEL_5;
      }
    }
    unsigned int v111 = (const char *)v109;
    sub_1CC5FA668(v102 + 16, &v111);
  }
LABEL_5:
  uint64_t v6 = (llvm::Type *)(*(void *)v119 + 1984);
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 88);
  __int16 v110 = 257;
  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v117[7] + 40) + 272), v6, 1);
  uint64_t v9 = operator new(0x60uLL);
  v9[13] = v9[13] & 0x38000000 | 1;
  int v10 = (llvm::Instruction *)(v9 + 8);
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = v9 + 8;
  __int16 v113 = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v9 + 8), (uint64_t)v6, v7, &v111, 0, Alignment, 0);
  (*(void (**)(void *, llvm::Instruction *, void *, uint64_t *, uint64_t **))(*v121 + 16))(v121, v10, v109, v117, v118);
  if (v115)
  {
    unsigned int v98 = v114;
    unint64_t v99 = (char *)&v114[2 * v115];
    do
    {
      llvm::Instruction::setMetadata(v10, *(_DWORD *)v98, v98[1]);
      v98 += 2;
    }
    while (v98 != (llvm::MDNode **)v99);
  }
  *(void *)(a1 + 48) = v10;
  uint64_t v11 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 16) + 24), 0xA0uLL, 0);
  uint64_t v12 = *(void *)(a1 + 48);
  __int16 v113 = 257;
  unsigned int v13 = sub_1CB844A3C((uint64_t)&v114, v11, v12, (uint64_t)&v111, 0, 0);
  uint64_t v14 = (llvm::Type *)(**(void **)(*(void *)(a1 + 16) + 16) + 1912);
  __int16 v113 = 257;
  unsigned int v15 = sub_1CB935044((uint64_t *)&v114, v14, v13, (uint64_t)&v111);
  *(void *)(a1 + 32) = v15;
  llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v114, 194, v15, 259, *(llvm::Value **)(*(void *)(a1 + 16) + 72), 259, (uint64_t *)v13, 0, 0, 0, 0, 0);
  uint64_t v16 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v16 + 4))
  {
    uint64_t v17 = (llvm::Type *)(**(void **)(v16 + 16) + 1912);
    __int16 v113 = 257;
    uint64_t v18 = sub_1CB935044((uint64_t *)&v114, v17, v13, (uint64_t)&v111);
    *(void *)(a1 + 40) = v18;
    llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v114, 194, v18, 259, *(llvm::Value **)(*(void *)(a1 + 16) + 80), 259, (uint64_t *)v13, 0, 0, 0, 0, 0);
  }
  if (v114 != (llvm::MDNode **)v116) {
    free(v114);
  }
  uint64_t v104 = *(unsigned int *)(a1 + 64);
  if (v104)
  {
    for (uint64_t i = 0; i != v104; ++i)
    {
      uint64_t v20 = 0;
      uint64_t v21 = *(void *)(*(void *)(a1 + 56) + 8 * i);
      uint64_t v22 = *(void *)(v21 + 32);
      if (v22) {
        BOOL v23 = v22 == *(void *)(v21 + 40) + 40;
      }
      else {
        BOOL v23 = 1;
      }
      if (v23) {
        uint64_t v24 = 0;
      }
      else {
        uint64_t v24 = (uint64_t **)(v22 - 24);
      }
      uint64_t v25 = **v24;
      __int16 v114 = (llvm::MDNode **)v116;
      uint64_t v115 = 0x200000000;
      uint64_t v119 = v25;
      unsigned int v120 = &v128;
      __int16 v121 = v129;
      uint64_t v122 = 0;
      int v123 = 0;
      __int16 v124 = 512;
      char v125 = 7;
      __int16 v117 = 0;
      __int16 v118 = 0;
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      __int16 v128 = &unk_1F2616E88;
      v129[0] = &unk_1F2617008;
      __int16 v117 = v24[5];
      __int16 v118 = v24 + 3;
      uint64_t v26 = (unsigned __int8 *)v24[6];
      v109[0] = v26;
      if (v26)
      {
        llvm::MetadataTracking::track((uint64_t)v109, v26, 2);
        uint64_t v20 = v109[0];
      }
      sub_1CB8461A4((uint64_t)&v114, 0, v20);
      if (!v109[0]) {
        goto LABEL_21;
      }
      int v86 = *(unsigned __int8 *)v109[0];
      if ((v86 - 4) > 0x1E)
      {
        if ((v86 - 3) >= 0xFFFFFFFE) {
          uint64_t v89 = v109[0];
        }
        else {
          uint64_t v89 = 0;
        }
        if ((v86 - 3) < 0xFFFFFFFE)
        {
          if (v86 == 3) {
            *(void *)(v109[0] + 8) = 0;
          }
          goto LABEL_21;
        }
        unint64_t v88 = v89 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v109[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v109[0] + 12)) {
          goto LABEL_21;
        }
        uint64_t v87 = *(void *)(v109[0] + 16);
        if ((v87 & 4) == 0) {
          goto LABEL_21;
        }
        unint64_t v88 = v87 & 0xFFFFFFFFFFFFFFF8;
        if (!v88) {
          goto LABEL_21;
        }
      }
      unsigned int v111 = (const char *)v109;
      sub_1CC5FA668(v88 + 16, &v111);
LABEL_21:
      uint64_t v27 = *(unsigned __int8 **)(v21 - 32 * (*(_DWORD *)(v21 + 20) & 0x7FFFFFF));
      unsigned int v28 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(**(void **)(*(void *)(a1 + 16) + 16) + 1984), 0);
      uint64_t v29 = *(void *)(*(void *)(a1 + 16) + 24);
      __int16 v110 = 257;
      int v30 = (llvm::Instruction *)v27;
      if (*(void *)v27 != v29)
      {
        if (v27[16] <= 0x14u)
        {
          uint64_t v33 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v120 + 28))(v120, 47, v27, v29);
          int v30 = (llvm::Instruction *)v33;
          if (v33)
          {
            if (*(unsigned __int8 *)(v33 + 16) >= 0x1Cu)
            {
              (*(void (**)(void *, uint64_t, void *, uint64_t *, uint64_t **))(*v121 + 16))(v121, v33, v109, v117, v118);
              if (v115)
              {
                __int16 v94 = v114;
                v95 = (char *)&v114[2 * v115];
                do
                {
                  llvm::Instruction::setMetadata(v30, *(_DWORD *)v94, v94[1]);
                  v94 += 2;
                }
                while (v94 != (llvm::MDNode **)v95);
              }
            }
          }
        }
        else
        {
          __int16 v113 = 257;
          int v30 = llvm::CastInst::Create(47, (uint64_t)v27, v29, &v111, 0);
          (*(void (**)(void *, llvm::Instruction *, void *, uint64_t *, uint64_t **))(*v121 + 16))(v121, v30, v109, v117, v118);
          if (v115)
          {
            int v31 = v114;
            BOOL v32 = (char *)&v114[2 * v115];
            do
            {
              llvm::Instruction::setMetadata(v30, *(_DWORD *)v31, v31[1]);
              v31 += 2;
            }
            while (v31 != (llvm::MDNode **)v32);
          }
        }
      }
      uint64_t v34 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 16) + 24), 0x18uLL, 0);
      __int16 v108 = 257;
      uint64_t v35 = (unsigned __int8 *)sub_1CB844A3C((uint64_t)&v114, v30, (uint64_t)v34, (uint64_t)v107, 0, 0);
      unint64_t v36 = llvm::PointerType::get(v28, 0);
      __int16 v106 = 257;
      if (*(void *)v35 != v36)
      {
        if (v35[16] <= 0x14u)
        {
          uint64_t v35 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v120
                                    + 28))(v120, 48, v35, v36);
          if (v35) {
            BOOL v39 = v35[16] >= 0x1Cu;
          }
          else {
            BOOL v39 = 0;
          }
          if (v39)
          {
            (*(void (**)(void *, unsigned __int8 *, unsigned char *, uint64_t *, uint64_t **))(*v121 + 16))(v121, v35, v105, v117, v118);
            if (v115)
            {
              uint64_t v90 = v114;
              uint64_t v91 = (char *)&v114[2 * v115];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v35, *(_DWORD *)v90, v90[1]);
                v90 += 2;
              }
              while (v90 != (llvm::MDNode **)v91);
            }
          }
        }
        else
        {
          __int16 v113 = 257;
          uint64_t v35 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v35, v36, &v111, 0);
          (*(void (**)(void *, unsigned __int8 *, unsigned char *, uint64_t *, uint64_t **))(*v121 + 16))(v121, v35, v105, v117, v118);
          if (v115)
          {
            unsigned int v37 = v114;
            int v38 = (char *)&v114[2 * v115];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v35, *(_DWORD *)v37, v37[1]);
              v37 += 2;
            }
            while (v37 != (llvm::MDNode **)v38);
          }
        }
      }
      __int16 v110 = 257;
      char v40 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v117[7] + 40) + 272), v28, 1);
      unsigned int v41 = operator new(0x60uLL);
      v41[13] = v41[13] & 0x38000000 | 1;
      uint64_t v42 = (llvm::Instruction *)(v41 + 8);
      *(void *)unsigned int v41 = 0;
      *((void *)v41 + 1) = 0;
      *((void *)v41 + 2) = 0;
      *((void *)v41 + 3) = v41 + 8;
      __int16 v113 = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v41 + 8), (uint64_t)v28, (uint64_t)v35, &v111, 0, v40, 0);
      (*(void (**)(void *, llvm::Instruction *, void *, uint64_t *, uint64_t **))(*v121 + 16))(v121, v42, v109, v117, v118);
      if (v115)
      {
        uint64_t v82 = v114;
        unsigned int v83 = (char *)&v114[2 * v115];
        do
        {
          llvm::Instruction::setMetadata(v42, *(_DWORD *)v82, v82[1]);
          v82 += 2;
        }
        while (v82 != (llvm::MDNode **)v83);
      }
      __int16 v44 = sub_1CCB163B4(*(void **)(a1 + 24), v42, (uint64_t)&v114, (llvm::PointerType *)(*(void *)v119 + 1912), (llvm::Instruction *)0x103, 1);
      uint64_t v46 = v45;
      int v47 = *(llvm::Value **)(a1 + 32);
      uint64_t v48 = *(llvm::ConstantInt **)(*(void *)v119 + 1984);
      unsigned int v49 = *(_DWORD *)(*(void *)v119 + 1992);
      unsigned int v112 = v49 >> 8;
      if (v49 >> 8 > 0x40) {
        operator new[]();
      }
      if (v49 <= 0xFF) {
        LOBYTE(v50) = 0;
      }
      else {
        unint64_t v50 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v49) + 63);
      }
      unsigned int v111 = (const char *)(v50 & 0xA0);
      int v51 = llvm::ConstantInt::get(v48, (llvm::LLVMContext *)&v111, v43);
      if (v112 >= 0x41 && v111) {
        MEMORY[0x1D25D9CB0](v111, 0x1000C8000313F17);
      }
      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v114, 194, (llvm::Value *)v44, 259, v47, 259, v51, 0, 0, 0, 0, 0);
      uint64_t v53 = *(void *)(a1 + 16);
      if (*(_DWORD *)(v53 + 4))
      {
        int v54 = *(llvm::Value **)(a1 + 40);
        BOOL v55 = *(llvm::ConstantInt **)(*(void *)v119 + 1984);
        unsigned int v56 = *(_DWORD *)(*(void *)v119 + 1992);
        unsigned int v112 = v56 >> 8;
        if (v56 >> 8 > 0x40) {
          operator new[]();
        }
        if (v56 <= 0xFF) {
          LOBYTE(v57) = 0;
        }
        else {
          unint64_t v57 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v56) + 63);
        }
        unsigned int v111 = (const char *)(v57 & 0xA0);
        unint64_t v58 = llvm::ConstantInt::get(v55, (llvm::LLVMContext *)&v111, v52);
        if (v112 >= 0x41 && v111) {
          MEMORY[0x1D25D9CB0](v111, 0x1000C8000313F17);
        }
        llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v114, 194, v46, 259, v54, 259, v58, 0, 0, 0, 0, 0);
        uint64_t v53 = *(void *)(a1 + 16);
      }
      unint64_t v59 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(**(void **)(v53 + 16) + 1984), 0);
      uint64_t v60 = *(void *)(*(void *)(a1 + 16) + 24);
      __int16 v110 = 257;
      if (*(void *)v27 != v60)
      {
        if (v27[16] <= 0x14u)
        {
          uint64_t v63 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v120 + 28))(v120, 47, v27, v60);
          uint64_t v27 = (unsigned __int8 *)v63;
          if (v63)
          {
            if (*(unsigned __int8 *)(v63 + 16) >= 0x1Cu)
            {
              (*(void (**)(void *, uint64_t, void *, uint64_t *, uint64_t **))(*v121 + 16))(v121, v63, v109, v117, v118);
              if (v115)
              {
                unint64_t v96 = v114;
                uint64_t v97 = (char *)&v114[2 * v115];
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v27, *(_DWORD *)v96, v96[1]);
                  v96 += 2;
                }
                while (v96 != (llvm::MDNode **)v97);
              }
            }
          }
        }
        else
        {
          __int16 v113 = 257;
          uint64_t v27 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v27, v60, &v111, 0);
          (*(void (**)(void *, unsigned __int8 *, void *, uint64_t *, uint64_t **))(*v121 + 16))(v121, v27, v109, v117, v118);
          if (v115)
          {
            int v61 = v114;
            uint64_t v62 = (char *)&v114[2 * v115];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v27, *(_DWORD *)v61, v61[1]);
              v61 += 2;
            }
            while (v61 != (llvm::MDNode **)v62);
          }
        }
      }
      int v64 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 16) + 24), 0x10uLL, 0);
      __int16 v108 = 257;
      int v65 = (unsigned __int8 *)sub_1CB844A3C((uint64_t)&v114, v27, (uint64_t)v64, (uint64_t)v107, 0, 0);
      unint64_t v66 = llvm::PointerType::get(v59, 0);
      __int16 v106 = 257;
      if (*(void *)v65 != v66)
      {
        if (v65[16] <= 0x14u)
        {
          int v65 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v120
                                    + 28))(v120, 48, v65, v66);
          if (v65) {
            BOOL v69 = v65[16] >= 0x1Cu;
          }
          else {
            BOOL v69 = 0;
          }
          if (v69)
          {
            (*(void (**)(void *, unsigned __int8 *, unsigned char *, uint64_t *, uint64_t **))(*v121 + 16))(v121, v65, v105, v117, v118);
            if (v115)
            {
              unint64_t v92 = v114;
              unint64_t v93 = (char *)&v114[2 * v115];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v65, *(_DWORD *)v92, v92[1]);
                v92 += 2;
              }
              while (v92 != (llvm::MDNode **)v93);
            }
          }
        }
        else
        {
          __int16 v113 = 257;
          int v65 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v65, v66, &v111, 0);
          (*(void (**)(void *, unsigned __int8 *, unsigned char *, uint64_t *, uint64_t **))(*v121 + 16))(v121, v65, v105, v117, v118);
          if (v115)
          {
            uint64_t v67 = v114;
            uint64_t v68 = (char *)&v114[2 * v115];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v65, *(_DWORD *)v67, v67[1]);
              v67 += 2;
            }
            while (v67 != (llvm::MDNode **)v68);
          }
        }
      }
      __int16 v110 = 257;
      char v70 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v117[7] + 40) + 272), v59, 1);
      uint64_t v71 = operator new(0x60uLL);
      v71[13] = v71[13] & 0x38000000 | 1;
      int v72 = (llvm::Instruction *)(v71 + 8);
      *(void *)uint64_t v71 = 0;
      *((void *)v71 + 1) = 0;
      *((void *)v71 + 2) = 0;
      *((void *)v71 + 3) = v71 + 8;
      __int16 v113 = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v71 + 8), (uint64_t)v59, (uint64_t)v65, &v111, 0, v70, 0);
      (*(void (**)(void *, llvm::Instruction *, void *, uint64_t *, uint64_t **))(*v121 + 16))(v121, v72, v109, v117, v118);
      if (v115)
      {
        uint64_t v84 = v114;
        uint64_t v85 = (char *)&v114[2 * v115];
        do
        {
          llvm::Instruction::setMetadata(v72, *(_DWORD *)v84, v84[1]);
          v84 += 2;
        }
        while (v84 != (llvm::MDNode **)v85);
      }
      BOOL v73 = sub_1CCB163B4(*(void **)(a1 + 24), v72, (uint64_t)&v114, (llvm::PointerType *)(*(void *)v119 + 1912), (llvm::Instruction *)0x103, 1);
      char v75 = v74;
      uint64_t v76 = *(void *)v119 + 1912;
      uint64_t v77 = *(const llvm::APInt **)(a1 + 32);
      __int16 v113 = 257;
      uint64_t v78 = sub_1CB930CF4((uint64_t *)&v114, v76, v77, 160, (uint64_t)&v111);
      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v114, 194, (llvm::Value *)v73, 259, v78, 259, *(uint64_t **)(a1 + 48), 0, 0, 0, 0, 0);
      if (*(_DWORD *)(*(void *)(a1 + 16) + 4))
      {
        uint64_t v79 = *(void *)v119 + 1912;
        uint64_t v80 = *(const llvm::APInt **)(a1 + 40);
        __int16 v113 = 257;
        uint64_t v81 = sub_1CB930CF4((uint64_t *)&v114, v79, v80, 160, (uint64_t)&v111);
        llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v114, 194, v75, 259, v81, 259, *(uint64_t **)(a1 + 48), 0, 0, 0, 0, 0);
      }
      if (v114 != (llvm::MDNode **)v116) {
        free(v114);
      }
    }
  }
}

llvm::Instruction *sub_1CCB1F160(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, llvm::Instruction *a5)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(llvm::CastInst **)(v8 + 72);
  int v10 = *(llvm::Value **)(v8 + 24);
  __int16 v15 = 257;
  uint64_t v11 = sub_1CC277FE0(a2, v9, v10, (uint64_t)v14, a5);
  uint64_t v12 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 16) + 24), a3, 0);
  __int16 v15 = 257;
  return sub_1CB844A3C(a2, v11, (uint64_t)v12, (uint64_t)v14, 0, 0);
}

unsigned __int8 *sub_1CCB1F1F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, llvm::Instruction *a5)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(llvm::CastInst **)(v8 + 80);
  int v10 = *(llvm::Value **)(v8 + 24);
  __int16 v26 = 257;
  uint64_t v11 = sub_1CC277FE0(a2, v9, v10, (uint64_t)v25, a5);
  uint64_t v12 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 16) + 24), a3, 0);
  __int16 v26 = 257;
  unsigned int v13 = (unsigned __int8 *)sub_1CB844A3C(a2, v11, (uint64_t)v12, (uint64_t)v25, 0, 0);
  unint64_t v14 = llvm::PointerType::get(*(llvm::PointerType **)(*(void *)(a1 + 16) + 32), 0);
  v23[0] = "_msarg_va_o";
  __int16 v24 = 259;
  if (*(void *)v13 != v14)
  {
    if (v13[16] <= 0x14u)
    {
      unsigned int v13 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**(void **)(a2 + 72) + 224))(*(void *)(a2 + 72), 48, v13, v14);
      if (v13) {
        BOOL v18 = v13[16] >= 0x1Cu;
      }
      else {
        BOOL v18 = 0;
      }
      if (v18)
      {
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v13, v23, *(void *)(a2 + 48), *(void *)(a2 + 56));
        uint64_t v20 = *(unsigned int *)(a2 + 8);
        if (v20)
        {
          uint64_t v21 = *(void *)a2;
          uint64_t v22 = v21 + 16 * v20;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v13, *(_DWORD *)v21, *(llvm::MDNode **)(v21 + 8));
            v21 += 16;
          }
          while (v21 != v22);
        }
      }
    }
    else
    {
      __int16 v26 = 257;
      unsigned int v13 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v13, v14, v25, 0);
      (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v13, v23, *(void *)(a2 + 48), *(void *)(a2 + 56));
      uint64_t v15 = *(unsigned int *)(a2 + 8);
      if (v15)
      {
        uint64_t v16 = *(void *)a2;
        uint64_t v17 = v16 + 16 * v15;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v13, *(_DWORD *)v16, *(llvm::MDNode **)(v16 + 8));
          v16 += 16;
        }
        while (v16 != v17);
      }
    }
  }
  return v13;
}

llvm::Instruction *sub_1CCB1F40C(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, llvm::Type *a5)
{
  uint64_t v7 = (llvm::Value *)a3;
  uint64_t v10 = *a3;
  uint64_t v11 = (llvm::LLVMContext *)sub_1CCB1F820(*a3);
  uint64_t v12 = sub_1CCB1F820(a4);
  if ((unint64_t)v11 >= 2 && v12 == 1)
  {
    sub_1CCB17A70(a1, *(void *)v7);
    if (v18) {
      NullValue = llvm::Constant::getNullValue(v18, v19, v20);
    }
    else {
      NullValue = 0;
    }
    __int16 v45 = 257;
    return sub_1CB845F20(a2, 33, v7, (uint64_t)NullValue, (uint64_t)v44);
  }
  uint64_t v15 = (llvm::LLVMContext *)v12;
  int v16 = *(unsigned __int8 *)(a4 + 8);
  if (v16 == 13 && *(unsigned char *)(v10 + 8) == 13
    || (v16 & 0xFE) == 0x12 && (*(_DWORD *)(v10 + 8) & 0xFE) == 0x12 && *(_DWORD *)(a4 + 32) == *(_DWORD *)(v10 + 32))
  {
    __int16 v45 = 257;
    return sub_1CBF56614(a2, v7, (llvm::Type ***)a4, a5, (uint64_t)v44, v13);
  }
  uint64_t v22 = llvm::IntegerType::get(*(llvm::IntegerType **)(a1[1] + 16), v11);
  __int16 v43 = 257;
  if (*(void *)v7 != v22)
  {
    if (*((unsigned __int8 *)v7 + 16) <= 0x14u)
    {
      uint64_t v7 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, uint64_t))(**(void **)(a2 + 72)
                                                                                             + 224))(*(void *)(a2 + 72), 49, v7, v22);
      if (v7) {
        BOOL v28 = *((unsigned __int8 *)v7 + 16) >= 0x1Cu;
      }
      else {
        BOOL v28 = 0;
      }
      if (v28)
      {
        (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v7, v42, *(void *)(a2 + 48), *(void *)(a2 + 56));
        uint64_t v39 = *(unsigned int *)(a2 + 8);
        if (v39)
        {
          uint64_t v40 = *(void *)a2;
          uint64_t v41 = *(void *)a2 + 16 * v39;
          do
          {
            llvm::Instruction::setMetadata(v7, *(_DWORD *)v40, *(llvm::MDNode **)(v40 + 8));
            v40 += 16;
          }
          while (v40 != v41);
        }
      }
    }
    else
    {
      __int16 v45 = 257;
      uint64_t v7 = llvm::CastInst::Create(49, (uint64_t)v7, v22, v44, 0);
      (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v7, v42, *(void *)(a2 + 48), *(void *)(a2 + 56));
      uint64_t v23 = *(unsigned int *)(a2 + 8);
      if (v23)
      {
        uint64_t v24 = *(void *)a2;
        uint64_t v25 = *(void *)a2 + 16 * v23;
        do
        {
          llvm::Instruction::setMetadata(v7, *(_DWORD *)v24, *(llvm::MDNode **)(v24 + 8));
          v24 += 16;
        }
        while (v24 != v25);
      }
    }
  }
  uint64_t v29 = (llvm::Type ***)llvm::IntegerType::get(*(llvm::IntegerType **)(a1[1] + 16), v15);
  __int16 v45 = 257;
  int v31 = sub_1CBF56614(a2, v7, v29, a5, (uint64_t)v44, v30);
  __int16 v26 = (unsigned __int8 *)v31;
  __int16 v43 = 257;
  if (*(void *)v31 != a4)
  {
    if (*((unsigned __int8 *)v31 + 16) <= 0x14u)
    {
      __int16 v26 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, uint64_t))(**(void **)(a2 + 72) + 224))(*(void *)(a2 + 72), 49, v31, a4);
      if (v26) {
        BOOL v35 = v26[16] >= 0x1Cu;
      }
      else {
        BOOL v35 = 0;
      }
      if (v35)
      {
        (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v26, v42, *(void *)(a2 + 48), *(void *)(a2 + 56));
        uint64_t v36 = *(unsigned int *)(a2 + 8);
        if (v36)
        {
          uint64_t v37 = *(void *)a2;
          uint64_t v38 = v37 + 16 * v36;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v26, *(_DWORD *)v37, *(llvm::MDNode **)(v37 + 8));
            v37 += 16;
          }
          while (v37 != v38);
        }
      }
    }
    else
    {
      __int16 v45 = 257;
      __int16 v26 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v31, a4, v44, 0);
      (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v26, v42, *(void *)(a2 + 48), *(void *)(a2 + 56));
      uint64_t v32 = *(unsigned int *)(a2 + 8);
      if (v32)
      {
        uint64_t v33 = *(void *)a2;
        uint64_t v34 = v33 + 16 * v32;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v26, *(_DWORD *)v33, *(llvm::MDNode **)(v33 + 8));
          v33 += 16;
        }
        while (v33 != v34);
      }
    }
  }
  return (llvm::Instruction *)v26;
}

uint64_t sub_1CCB1F820(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12)
  {
    int v1 = *(_DWORD *)(a1 + 32);
    LODWORD(result) = v1 * llvm::Type::getPrimitiveSizeInBits(**(llvm::Type ***)(a1 + 16));
  }
  else
  {
    LODWORD(result) = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a1);
    if (v3 == 1)
    {
      int v4 = result;
      LODWORD(result) = v4;
    }
  }
  return result;
}

void sub_1CCB1F898(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = 0;
  v37[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = **a2;
  v25[0] = v26;
  v25[1] = (void *)0x200000000;
  uint64_t v27 = v5;
  BOOL v28 = &v36;
  uint64_t v29 = v37;
  uint64_t v30 = 0;
  int v31 = 0;
  __int16 v32 = 512;
  char v33 = 7;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = &unk_1F2616E88;
  v37[0] = &unk_1F2617008;
  uint64_t v6 = a2 + 3;
  uint64_t v8 = a2[5];
  uint64_t v7 = (unsigned __int8 *)a2[6];
  v26[4] = v8;
  v26[5] = v6;
  uint64_t v22 = v7;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)&v22, v7, 2);
    uint64_t v4 = (uint64_t)v22;
  }
  sub_1CB8461A4((uint64_t)v25, 0, v4);
  if (v22)
  {
    int v18 = *v22;
    if ((v18 - 4) > 0x1E)
    {
      if ((v18 - 3) >= 0xFFFFFFFE) {
        uint64_t v21 = v22;
      }
      else {
        uint64_t v21 = 0;
      }
      if ((v18 - 3) < 0xFFFFFFFE)
      {
        if (v18 == 3) {
          *((void *)v22 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v20 = (unint64_t)(v21 + 8);
    }
    else
    {
      if ((v22[1] & 0x7F) != 2 && !*((_DWORD *)v22 + 3)) {
        goto LABEL_4;
      }
      uint64_t v19 = *((void *)v22 + 2);
      if ((v19 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFF8;
      if (!v20) {
        goto LABEL_4;
      }
    }
    uint64_t v23 = &v22;
    sub_1CC5FA668(v20 + 16, &v23);
  }
LABEL_4:
  uint64_t v9 = sub_1CCB163B4(*(void **)(a1 + 24), (llvm::CastInst *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], (uint64_t)v25, (llvm::PointerType *)(*(void *)v27 + 1912), (llvm::Instruction *)0x103, 1);
  NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(void *)v27 + 1912), v10, v11);
  unint64_t v14 = *(llvm::ConstantInt **)(*(void *)v27 + 1984);
  unsigned int v15 = *(_DWORD *)(*(void *)v27 + 1992);
  unsigned int v24 = v15 >> 8;
  if (v15 >> 8 > 0x40) {
    operator new[]();
  }
  if (v15 <= 0xFF) {
    LOBYTE(v16) = 0;
  }
  else {
    unint64_t v16 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v15) + 63);
  }
  uint64_t v23 = (unsigned __int8 **)(v16 & 0x20);
  uint64_t v17 = llvm::ConstantInt::get(v14, (llvm::LLVMContext *)&v23, v12);
  if (v24 >= 0x41 && v23) {
    MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
  }
  llvm::IRBuilderBase::CreateMemSet((uint64_t)v25, (llvm::Value *)v9, (uint64_t)NullValue, v17, 259, 0, 0, 0, 0);
  if (v25[0] != v26) {
    free(v25[0]);
  }
}

void sub_1CCB1FBAC()
{
}

unint64_t *sub_1CCB1FBD0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x78uLL);
  *((_DWORD *)v2 + 13) = *((_DWORD *)v2 + 13) & 0x38000000 | 1;
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 32;
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = **(llvm::PointerType ***)(a1 + 8);
  uint64_t v5 = *(const char ***)(a1 + 16);
  __int16 v10 = 261;
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v9[0] = v7;
  v9[1] = v6;
  return llvm::GlobalVariable::GlobalVariable((unint64_t *)v2 + 4, v3, v4, 0, 0, 0, v9, 0, 3, 0, 0);
}

void sub_1CCB1FC64(uint64_t ****a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  v93[4] = *MEMORY[0x1E4F143B8];
  if (!a3) {
    a3 = a2;
  }
  uint64_t v8 = a3 + 32;
  uint64_t v7 = *(void *)(a3 + 32);
  uint64_t v9 = *(void *)(v8 + 8) + 40;
  if (v7) {
    BOOL v10 = v7 == v9;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = (uint64_t ***)(v7 - 24);
  }
  uint64_t v12 = **v11;
  v75[0] = v76;
  v75[1] = (void *)0x200000000;
  uint64_t v77 = v12;
  uint64_t v78 = &v86;
  uint64_t v79 = &v87;
  uint64_t v80 = 0;
  int v81 = 0;
  __int16 v82 = 512;
  char v83 = 7;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  int v86 = &unk_1F2616E88;
  uint64_t v87 = &unk_1F2617008;
  v76[4] = v11[5];
  v76[5] = v11 + 3;
  unsigned int v13 = (unsigned __int8 *)v11[6];
  v70[0] = v13;
  if (v13)
  {
    llvm::MetadataTracking::track((uint64_t)v70, v13, 2);
    uint64_t v6 = v70[0];
  }
  sub_1CB8461A4((uint64_t)v75, 0, v6);
  if (v70[0])
  {
    int v66 = *(unsigned __int8 *)v70[0];
    if ((v66 - 4) > 0x1E)
    {
      if ((v66 - 3) >= 0xFFFFFFFE) {
        uint64_t v69 = v70[0];
      }
      else {
        uint64_t v69 = 0;
      }
      if ((v66 - 3) < 0xFFFFFFFE)
      {
        if (v66 == 3) {
          *(void *)(v70[0] + 8) = 0;
        }
        goto LABEL_12;
      }
      unint64_t v68 = v69 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v70[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v70[0] + 12)) {
        goto LABEL_12;
      }
      uint64_t v67 = *(void *)(v70[0] + 16);
      if ((v67 & 4) == 0) {
        goto LABEL_12;
      }
      unint64_t v68 = v67 & 0xFFFFFFFFFFFFFFF8;
      if (!v68) {
        goto LABEL_12;
      }
    }
    int v72 = v70;
    sub_1CC5FA668(v68 + 16, &v72);
  }
LABEL_12:
  unint64_t v14 = (llvm::DataLayout *)((*a1)[5] + 34);
  unsigned int v15 = *(llvm::Type **)(a2 + 64);
  unint64_t v16 = (unint64_t)(sub_1CB83544C((uint64_t)v14, (uint64_t)v15) + 7) >> 3;
  BOOL v18 = v17 == 1;
  char Alignment = llvm::DataLayout::getAlignment(v14, v15, 1);
  unint64_t v21 = ((1 << Alignment) + v16 - 1) & -(1 << Alignment);
  if (v18) {
  uint64_t v22 = llvm::ConstantInt::get((llvm::ConstantInt *)a1[1][3], v21, 0);
  }
  if (llvm::AllocaInst::isArrayAllocation((llvm::AllocaInst *)a2))
  {
    uint64_t v23 = *(void *)(a2 - 32);
    __int16 v74 = 257;
    uint64_t v22 = (uint64_t *)sub_1CC09A1EC((uint64_t)v75, (uint64_t)v22, v23, (uint64_t)&v72, 0, 0);
  }
  unsigned int v24 = a1[1];
  if (*(unsigned char *)v24)
  {
    uint64_t v25 = sub_1CCB30D4C(a1, (uint64_t ***)a2);
    __int16 v26 = a1[1];
    if (*((unsigned char *)a1 + 458))
    {
      uint64_t v27 = (llvm::CastInst *)v25;
      BOOL v28 = v26[48];
      uint64_t v29 = v26[49];
      uint64_t v30 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*v77 + 1912), 0);
      __int16 v74 = 257;
      v88[0] = sub_1CC277FE0((uint64_t)v75, (llvm::CastInst *)a2, v30, (uint64_t)&v72, v31);
      v88[1] = v22;
      __int16 v32 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*v77 + 1912), 0);
      __int16 v71 = 257;
      v88[2] = sub_1CC277FE0((uint64_t)v75, v27, v32, (uint64_t)v70, v33);
      __int16 v92 = 257;
      uint64_t v34 = v88;
      uint64_t v35 = &v90;
      uint64_t v36 = v28;
      uint64_t v37 = v29;
      uint64_t v38 = 3;
    }
    else
    {
      __int16 v43 = v26[50];
      __int16 v44 = v26[51];
      __int16 v45 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*v77 + 1912), 0);
      __int16 v74 = 257;
      uint64_t v90 = sub_1CC277FE0((uint64_t)v75, (llvm::CastInst *)a2, v45, (uint64_t)&v72, v46);
      uint64_t v91 = v22;
      __int16 v71 = 257;
      uint64_t v34 = (uint64_t *)&v90;
      uint64_t v35 = (llvm::Instruction **)v70;
      uint64_t v36 = v43;
      uint64_t v37 = v44;
      uint64_t v38 = 2;
    }
    goto LABEL_34;
  }
  if (*((unsigned char *)a1 + 458) && byte_1EBCE8940)
  {
    uint64_t v39 = v24[33];
    uint64_t v40 = v24[34];
    uint64_t v41 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*v77 + 1912), 0);
    __int16 v74 = 257;
    uint64_t v90 = sub_1CC277FE0((uint64_t)v75, (llvm::CastInst *)a2, v41, (uint64_t)&v72, v42);
    uint64_t v91 = v22;
    __int16 v71 = 257;
    sub_1CB845BAC((uint64_t *)v75, v39, v40, (uint64_t *)&v90, 2, (uint64_t)v70, 0);
  }
  else
  {
    uint64_t v48 = sub_1CCB163B4(a1, (llvm::CastInst *)a2, (uint64_t)v75, (llvm::PointerType *)(*v77 + 1912), (llvm::Instruction *)0x100, 1);
    uint64_t v49 = *v77;
    if (*((unsigned char *)a1 + 458)) {
      uint64_t v50 = dword_1EBCE8A00;
    }
    else {
      uint64_t v50 = 0;
    }
    int v51 = *(llvm::ConstantInt **)(v49 + 1912);
    unint64_t v52 = *(unsigned int *)(v49 + 1920);
    unsigned int v73 = v52 >> 8;
    if (v52 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v53 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v52) + 63);
    if (v52 <= 0xFF) {
      unint64_t v53 = 0;
    }
    int v72 = (void *)(v53 & v50);
    int v54 = llvm::ConstantInt::get(v51, (llvm::LLVMContext *)&v72, v47);
    if (v73 >= 0x41 && v72) {
      MEMORY[0x1D25D9CB0](v72, 0x1000C8000313F17);
    }
    llvm::IRBuilderBase::CreateMemSet((uint64_t)v75, (llvm::Value *)v48, (uint64_t)v54, v22, *(_WORD *)(a2 + 18) & 0x3F | 0x100, 0, 0, 0, 0);
  }
  if (*((unsigned char *)a1 + 458) && *((_DWORD *)a1[1] + 1))
  {
    BOOL v55 = sub_1CCB30D4C(a1, (uint64_t ***)a2);
    unsigned int v56 = a1[1];
    unint64_t v57 = v56[31];
    unint64_t v58 = v56[32];
    unint64_t v59 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*v77 + 1912), 0);
    __int16 v74 = 257;
    v93[0] = sub_1CC277FE0((uint64_t)v75, (llvm::CastInst *)a2, v59, (uint64_t)&v72, v60);
    v93[1] = v22;
    int v61 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*v77 + 1912), 0);
    __int16 v71 = 257;
    v93[2] = sub_1CC277FE0((uint64_t)v75, (llvm::CastInst *)v55, v61, (uint64_t)v70, v62);
    uint64_t v63 = *a1;
    int v64 = (llvm::Value *)a1[1][3];
    __int16 v92 = 257;
    void v93[3] = sub_1CC277FE0((uint64_t)v75, (llvm::CastInst *)v63, v64, (uint64_t)&v90, v65);
    __int16 v89 = 257;
    uint64_t v34 = v93;
    uint64_t v35 = (llvm::Instruction **)v88;
    uint64_t v36 = v57;
    uint64_t v37 = v58;
    uint64_t v38 = 4;
LABEL_34:
    sub_1CB845BAC((uint64_t *)v75, v36, v37, v34, v38, (uint64_t)v35, 0);
  }
  if (v75[0] != v76) {
    free(v75[0]);
  }
}

void sub_1CCB202A4(uint64_t a1, uint64_t **a2)
{
  v580[1] = *MEMORY[0x1E4F143B8];
  if ((a2[6] || (*((unsigned char *)a2 + 23) & 0x20) != 0)
    && llvm::Instruction::getMetadataImpl((uint64_t ***)a2, "nosanitize", 0xAuLL))
  {
    return;
  }
  uint64_t v4 = a2[5];
  uint64_t v5 = *(void *)(a1 + 448);
  if (v4 == *(uint64_t **)(v5 + 40))
  {
    if ((uint64_t **)v5 == a2) {
      return;
    }
    int v6 = *((__int16 *)v4 + 9);
    if ((v6 & 0x80000000) == 0)
    {
      uint64_t v11 = (uint64_t *)v4[6];
      if (v11 != v4 + 5)
      {
        int v12 = 0;
        do
        {
          unsigned int v13 = v11 - 3;
          if (!v11) {
            unsigned int v13 = 0;
          }
          *((_DWORD *)v13 + 14) = v12++;
          uint64_t v11 = (uint64_t *)v11[1];
        }
        while (v11 != v4 + 5);
      }
      *((_WORD *)v4 + 9) = v6 | 0x8000;
    }
    if (*((_DWORD *)a2 + 14) < *(_DWORD *)(v5 + 56)) {
      return;
    }
  }
  switch(*((unsigned char *)a2 + 16))
  {
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x23:
    case 0x3F:
    case 0x4E:
    case 0x56:
    case 0x57:
    case 0x58:
      sub_1CCB249B0((llvm *)a1, (unint64_t)a2);
      return;
    case 0x21:
    case 0x27:
      goto LABEL_95;
    case 0x22:
    case 0x24:
    case 0x25:
      return;
    case 0x26:
    case 0x5E:
    case 0x5F:
      sub_1CCB17A70((void *)a1, (uint64_t)*a2);
      if (v7) {
        NullValue = llvm::Constant::getNullValue(v7, v8, v9);
      }
      else {
        NullValue = 0;
      }
      sub_1CCB24DAC(a1, (uint64_t *)a2, NullValue);
      unint64_t v16 = llvm::Constant::getNullValue(*(llvm::Constant **)(*(void *)(a1 + 8) + 32), v14, v15);
      if (*(_DWORD *)(*(void *)(a1 + 8) + 4)) {
        *sub_1CD694530(a1 + 368, (uint64_t)a2) = (unint64_t)v16;
      }
      return;
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2E:
    case 0x31:
    case 0x34:
    case 0x3A:
    case 0x3E:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x52:
      goto LABEL_7;
    case 0x2D:
      uint64_t v42 = (uint64_t)*(a2 - 8);
      if (*(unsigned __int8 *)(v42 + 16) >= 0x15u) {
        __int16 v43 = 0;
      }
      else {
        __int16 v43 = (llvm::Constant *)*(a2 - 8);
      }
      if (*((unsigned __int8 *)*(a2 - 4) + 16) >= 0x15u) {
        __int16 v44 = 0;
      }
      else {
        __int16 v44 = (llvm::Constant *)*(a2 - 4);
      }
      if (v43) {
        BOOL v45 = v44 == 0;
      }
      else {
        BOOL v45 = 0;
      }
      if (v45)
      {
        uint64_t v47 = a1;
        uint64_t v48 = (uint64_t *)a2;
        uint64_t v42 = (uint64_t)*(a2 - 4);
      }
      else
      {
        if (v43) {
          BOOL v46 = 1;
        }
        else {
          BOOL v46 = v44 == 0;
        }
        if (v46) {
          goto LABEL_7;
        }
        uint64_t v47 = a1;
        uint64_t v48 = (uint64_t *)a2;
        __int16 v43 = v44;
      }
      sub_1CCB27DF4(v47, v48, v43, v42);
      return;
    case 0x2F:
    case 0x30:
    case 0x32:
    case 0x33:
      sub_1CCB285BC(a1, (unint64_t)a2);
      return;
    case 0x35:
    case 0x36:
    case 0x37:
      sub_1CCB2880C((void *)a1, (uint64_t *)a2);
      return;
    case 0x38:
      uint64_t v22 = 0;
      uint64_t v23 = **a2;
      v565 = v567;
      uint64_t v566 = 0x200000000;
      uint64_t v570 = v23;
      v571 = &v579;
      v572 = v580;
      uint64_t v573 = 0;
      int v574 = 0;
      __int16 v575 = 512;
      char v576 = 7;
      uint64_t v577 = 0;
      uint64_t v578 = 0;
      v579 = &unk_1F2616E88;
      v580[0] = &unk_1F2617008;
      v568 = v4;
      v569 = a2 + 3;
      unsigned int v24 = (unsigned __int8 *)a2[6];
      v561 = (const char *)v24;
      if (v24)
      {
        llvm::MetadataTracking::track((uint64_t)&v561, v24, 2);
        uint64_t v22 = (uint64_t)v561;
      }
      sub_1CB8461A4((uint64_t)&v565, 0, v22);
      if (!v561) {
        goto LABEL_45;
      }
      int v361 = *(unsigned __int8 *)v561;
      if ((v361 - 4) > 0x1E)
      {
        if ((v361 - 3) >= 0xFFFFFFFE) {
          v471 = v561;
        }
        else {
          v471 = 0;
        }
        if ((v361 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v363 = (unint64_t)(v471 + 8);
LABEL_590:
          v555[0] = (const char *)&v561;
          sub_1CC5FA668(v363 + 16, v555);
          goto LABEL_45;
        }
        if (v361 == 3) {
          *((void *)v561 + 1) = 0;
        }
      }
      else if ((v561[1] & 0x7F) == 2 || *((_DWORD *)v561 + 3))
      {
        uint64_t v362 = *((void *)v561 + 2);
        if ((v362 & 4) != 0)
        {
          unint64_t v363 = v362 & 0xFFFFFFFFFFFFFFF8;
          if (v363) {
            goto LABEL_590;
          }
        }
      }
LABEL_45:
      int v25 = *((_DWORD *)a2 + 5);
      if ((v25 & 0x40000000) != 0) {
        __int16 v26 = *(a2 - 1);
      }
      else {
        __int16 v26 = (uint64_t *)&a2[-4 * (v25 & 0x7FFFFFF)];
      }
      v204 = sub_1CCB16AB0(a1, *v26);
      int v205 = *((_DWORD *)a2 + 5);
      if ((v205 & 0x40000000) != 0) {
        v206 = (uint64_t **)*(a2 - 1);
      }
      else {
        v206 = &a2[-4 * (v205 & 0x7FFFFFF)];
      }
      v208 = sub_1CCB16AB0(a1, (uint64_t)v206[4]);
      v209 = (llvm::Instruction *)*(a2 - 8);
      v210 = (llvm::Instruction *)*(a2 - 4);
      v211 = *(llvm::Type ****)v204;
      if (*(void *)v209 != *(void *)v204)
      {
        __int16 v556 = 257;
        v209 = sub_1CBF56614((uint64_t)&v565, v209, v211, 0, (uint64_t)v555, v207);
        v212 = *(llvm::Type ****)v208;
        __int16 v556 = 257;
        v210 = sub_1CBF56614((uint64_t)&v565, v210, v212, 0, (uint64_t)v555, v213);
      }
      __int16 v556 = 257;
      v214 = sub_1CBF52474((uint64_t)&v565, v204, (uint64_t)v208, (uint64_t)v555);
      __int16 v556 = 257;
      v215 = sub_1CBF52474((uint64_t)&v565, v209, (uint64_t)v208, (uint64_t)v555);
      __int16 v556 = 257;
      v216 = sub_1CBF52474((uint64_t)&v565, v204, (uint64_t)v210, (uint64_t)v555);
      v562 = v215;
      v563 = v216;
      for (uint64_t i = 1; i != 3; ++i)
      {
        uint64_t v218 = (uint64_t)(&v561)[i];
        __int16 v556 = 257;
        v214 = sub_1CB844AF4((uint64_t)&v565, v214, v218, (uint64_t)v555);
      }
      goto LABEL_216;
    case 0x39:
      uint64_t v49 = 0;
      uint64_t v50 = **a2;
      v565 = v567;
      uint64_t v566 = 0x200000000;
      uint64_t v570 = v50;
      v571 = &v579;
      v572 = v580;
      uint64_t v573 = 0;
      int v574 = 0;
      __int16 v575 = 512;
      char v576 = 7;
      uint64_t v577 = 0;
      uint64_t v578 = 0;
      v579 = &unk_1F2616E88;
      v580[0] = &unk_1F2617008;
      v568 = v4;
      v569 = a2 + 3;
      int v51 = (unsigned __int8 *)a2[6];
      v561 = (const char *)v51;
      if (v51)
      {
        llvm::MetadataTracking::track((uint64_t)&v561, v51, 2);
        uint64_t v49 = (uint64_t)v561;
      }
      sub_1CB8461A4((uint64_t)&v565, 0, v49);
      if (!v561) {
        goto LABEL_79;
      }
      int v370 = *(unsigned __int8 *)v561;
      if ((v370 - 4) > 0x1E)
      {
        if ((v370 - 3) >= 0xFFFFFFFE) {
          v474 = v561;
        }
        else {
          v474 = 0;
        }
        if ((v370 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v372 = (unint64_t)(v474 + 8);
LABEL_608:
          v555[0] = (const char *)&v561;
          sub_1CC5FA668(v372 + 16, v555);
          goto LABEL_79;
        }
        if (v370 == 3) {
          *((void *)v561 + 1) = 0;
        }
      }
      else if ((v561[1] & 0x7F) == 2 || *((_DWORD *)v561 + 3))
      {
        uint64_t v371 = *((void *)v561 + 2);
        if ((v371 & 4) != 0)
        {
          unint64_t v372 = v371 & 0xFFFFFFFFFFFFFFF8;
          if (v372) {
            goto LABEL_608;
          }
        }
      }
LABEL_79:
      int v52 = *((_DWORD *)a2 + 5);
      if ((v52 & 0x40000000) != 0) {
        unint64_t v53 = *(a2 - 1);
      }
      else {
        unint64_t v53 = (uint64_t *)&a2[-4 * (v52 & 0x7FFFFFF)];
      }
      v224 = sub_1CCB16AB0(a1, *v53);
      int v225 = *((_DWORD *)a2 + 5);
      if ((v225 & 0x40000000) != 0) {
        v226 = (uint64_t **)*(a2 - 1);
      }
      else {
        v226 = &a2[-4 * (v225 & 0x7FFFFFF)];
      }
      v227 = sub_1CCB16AB0(a1, (uint64_t)v226[4]);
      uint64_t v228 = (uint64_t)*(a2 - 8);
      __int16 v556 = 257;
      v230 = sub_1CC2427E8((uint64_t)&v565, v228, (uint64_t)v555, v229);
      uint64_t v231 = (uint64_t)*(a2 - 4);
      __int16 v556 = 257;
      v234 = sub_1CC2427E8((uint64_t)&v565, v231, (uint64_t)v555, v232);
      v235 = *(llvm::Type ****)v224;
      if (*(void *)v230 != *(void *)v224)
      {
        __int16 v556 = 257;
        v230 = sub_1CBF56614((uint64_t)&v565, v230, v235, 0, (uint64_t)v555, v233);
        v236 = *(llvm::Type ****)v227;
        __int16 v556 = 257;
        v234 = sub_1CBF56614((uint64_t)&v565, v234, v236, 0, (uint64_t)v555, v237);
      }
      __int16 v556 = 257;
      v214 = sub_1CBF52474((uint64_t)&v565, v224, (uint64_t)v227, (uint64_t)v555);
      __int16 v556 = 257;
      v238 = sub_1CBF52474((uint64_t)&v565, v230, (uint64_t)v227, (uint64_t)v555);
      __int16 v556 = 257;
      v239 = sub_1CBF52474((uint64_t)&v565, v224, (uint64_t)v234, (uint64_t)v555);
      v562 = v238;
      v563 = v239;
      for (uint64_t j = 1; j != 3; ++j)
      {
        uint64_t v241 = (uint64_t)(&v561)[j];
        __int16 v556 = 257;
        v214 = sub_1CB844AF4((uint64_t)&v565, v214, v241, (uint64_t)v555);
      }
LABEL_216:
      uint64_t v84 = a1;
      uint64_t v85 = (uint64_t *)a2;
      int v86 = v214;
LABEL_217:
      sub_1CCB24DAC(v84, v85, v86);
      sub_1CCB28C0C((void *)a1, (uint64_t)a2);
      goto LABEL_218;
    case 0x3B:
      sub_1CCB17A70((void *)a1, (uint64_t)*a2);
      if (v146) {
        v149 = llvm::Constant::getNullValue(v146, v147, v148);
      }
      else {
        v149 = 0;
      }
      sub_1CCB24DAC(a1, (uint64_t *)a2, v149);
      v290 = llvm::Constant::getNullValue(*(llvm::Constant **)(*(void *)(a1 + 8) + 32), v288, v289);
      if (*(_DWORD *)(*(void *)(a1 + 8) + 4)) {
        *sub_1CD694530(a1 + 368, (uint64_t)a2) = (unint64_t)v290;
      }
      uint64_t v291 = *(void *)(a1 + 880);
      uint64_t v292 = *(unsigned int *)(a1 + 892);
      if (v291 == *(void *)(a1 + 872))
      {
        if (v292)
        {
          v293 = 0;
          uint64_t v294 = 8 * v292;
          v295 = *(uint64_t ****)(a1 + 880);
          do
          {
            if (*v295 == a2) {
              return;
            }
            if (*v295 == (uint64_t **)-2) {
              v293 = v295;
            }
            ++v295;
            v294 -= 8;
          }
          while (v294);
          if (v293)
          {
            *v293 = a2;
            --*(_DWORD *)(a1 + 896);
            return;
          }
        }
        unsigned int v296 = *(_DWORD *)(a1 + 888);
        if (v292 < v296)
        {
          *(_DWORD *)(a1 + 892) = v292 + 1;
          *(void *)(v291 + 8 * v292) = a2;
          return;
        }
      }
      else
      {
        unsigned int v296 = *(_DWORD *)(a1 + 888);
      }
      if (3 * v296 <= 4 * ((int)v292 - *(_DWORD *)(a1 + 896)))
      {
        if (v296 >= 0x40) {
          v296 *= 2;
        }
        else {
          unsigned int v296 = 128;
        }
      }
      else if (v296 - v292 >= v296 >> 3)
      {
        goto LABEL_295;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 872), v296);
      unsigned int v296 = *(_DWORD *)(a1 + 888);
      uint64_t v291 = *(void *)(a1 + 880);
LABEL_295:
      unsigned int v297 = v296 - 1;
      unsigned int v298 = (v296 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v299 = (uint64_t ***)(v291 + 8 * v298);
      v300 = *v299;
      if (*v299 == (uint64_t **)-1)
      {
        v301 = 0;
      }
      else
      {
        v301 = 0;
        int v302 = 1;
        do
        {
          if (v300 == a2) {
            return;
          }
          if (v301) {
            BOOL v303 = 0;
          }
          else {
            BOOL v303 = v300 == (uint64_t **)-2;
          }
          if (v303) {
            v301 = v299;
          }
          unsigned int v304 = v298 + v302++;
          unsigned int v298 = v304 & v297;
          v299 = (uint64_t ***)(v291 + 8 * (v304 & v297));
          v300 = *v299;
        }
        while (*v299 != (uint64_t **)-1);
      }
      if (v301) {
        v320 = v301;
      }
      else {
        v320 = v299;
      }
      if (*v320 != a2)
      {
        if (*v320 == (uint64_t **)-2) {
          --*(_DWORD *)(a1 + 896);
        }
        else {
          ++*(_DWORD *)(a1 + 892);
        }
        *v320 = a2;
      }
      return;
    case 0x3C:
      uint64_t v177 = 0;
      v178 = a2[4];
      v179 = v4 + 5;
      if (v178) {
        BOOL v180 = v178 == v179;
      }
      else {
        BOOL v180 = 1;
      }
      if (v180) {
        v181 = 0;
      }
      else {
        v181 = (uint64_t **)(v178 - 3);
      }
      uint64_t v182 = **v181;
      v565 = v567;
      uint64_t v566 = 0x200000000;
      uint64_t v570 = v182;
      v571 = &v579;
      v572 = v580;
      uint64_t v573 = 0;
      int v574 = 0;
      __int16 v575 = 512;
      char v576 = 7;
      v568 = 0;
      v569 = 0;
      uint64_t v577 = 0;
      uint64_t v578 = 0;
      v579 = &unk_1F2616E88;
      v580[0] = &unk_1F2617008;
      v568 = v181[5];
      v569 = v181 + 3;
      v183 = (unsigned __int8 *)v181[6];
      v561 = (const char *)v183;
      if (v183)
      {
        llvm::MetadataTracking::track((uint64_t)&v561, v183, 2);
        uint64_t v177 = (uint64_t)v561;
      }
      sub_1CB8461A4((uint64_t)&v565, 0, v177);
      if (!v561) {
        goto LABEL_178;
      }
      int v400 = *(unsigned __int8 *)v561;
      if ((v400 - 4) > 0x1E)
      {
        if ((v400 - 3) >= 0xFFFFFFFE) {
          v484 = v561;
        }
        else {
          v484 = 0;
        }
        if ((v400 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v402 = (unint64_t)(v484 + 8);
LABEL_668:
          v555[0] = (const char *)&v561;
          sub_1CC5FA668(v402 + 16, v555);
          goto LABEL_178;
        }
        if (v400 == 3) {
          *((void *)v561 + 1) = 0;
        }
      }
      else if ((v561[1] & 0x7F) == 2 || *((_DWORD *)v561 + 3))
      {
        uint64_t v401 = *((void *)v561 + 2);
        if ((v401 & 4) != 0)
        {
          unint64_t v402 = v401 & 0xFFFFFFFFFFFFFFF8;
          if (v402) {
            goto LABEL_668;
          }
        }
      }
LABEL_178:
      sub_1CCB17A70((void *)a1, (uint64_t)*a2);
      uint64_t v185 = __clz(1 << ((unint64_t)*((unsigned __int16 *)a2 + 9) >> 1)) ^ 0x3F;
      if (*(unsigned char *)(a1 + 457))
      {
        uint64_t v186 = (uint64_t)v184;
        v187 = sub_1CCB163B4((void *)a1, (llvm::CastInst *)*(a2 - 4), (uint64_t)&v565, v184, (llvm::Instruction *)(v185 | 0x100), 0);
        uint64_t v189 = v188;
        v561 = "_msld";
        __int16 v564 = 259;
        v190 = operator new(0x60uLL);
        v190[13] = v190[13] & 0x38000000 | 1;
        v191 = (llvm::Instruction *)(v190 + 8);
        *(void *)v190 = 0;
        *((void *)v190 + 1) = 0;
        *((void *)v190 + 2) = 0;
        *((void *)v190 + 3) = v190 + 8;
        __int16 v556 = 257;
        llvm::LoadInst::LoadInst((llvm::Value *)(v190 + 8), v186, (uint64_t)v187, v555, 0, v185, 0);
        (*(void (**)(void *, llvm::Instruction *, const char **, uint64_t *, void **))(*v572 + 16))(v572, v191, &v561, v568, v569);
        if (v566)
        {
          v433 = (llvm::MDNode **)v565;
          v434 = (llvm::MDNode **)((char *)v565 + 16 * v566);
          do
          {
            llvm::Instruction::setMetadata(v191, *(_DWORD *)v433, v433[1]);
            v433 += 2;
          }
          while (v433 != v434);
        }
        sub_1CCB24DAC(a1, (uint64_t *)a2, v191);
      }
      else
      {
        sub_1CCB17A70((void *)a1, (uint64_t)*a2);
        if (v312) {
          v315 = llvm::Constant::getNullValue(v312, v313, v314);
        }
        else {
          v315 = 0;
        }
        sub_1CCB24DAC(a1, (uint64_t *)a2, v315);
        uint64_t v189 = 0;
      }
      if (byte_1EBCE8E80) {
        sub_1CCB24814(a1, (uint64_t)*(a2 - 4), (unint64_t)a2);
      }
      int v323 = *((unsigned __int8 *)a2 + 16);
      if (v323 == 60 || v323 == 61)
      {
        if ((*((_WORD *)a2 + 9) & 0x380) == 0) {
          goto LABEL_349;
        }
        goto LABEL_348;
      }
      if ((v323 - 63) < 3) {
LABEL_348:
      }
        *((_WORD *)a2 + 9) = word_1CFB280D0[((unint64_t)*((unsigned __int16 *)a2 + 9) >> 7) & 7] | *((_WORD *)a2 + 9) & 0xFC7F;
LABEL_349:
      uint64_t v324 = *(void *)(a1 + 8);
      if (*(_DWORD *)(v324 + 4))
      {
        if (*(unsigned char *)(a1 + 457))
        {
          unsigned int v325 = word_1EBCE87F0;
          uint64_t v326 = *(void *)(v324 + 32);
          __int16 v564 = 257;
          v327 = operator new(0x60uLL);
          v327[13] = v327[13] & 0x38000000 | 1;
          v328 = (llvm::Instruction *)(v327 + 8);
          *(void *)v327 = 0;
          *((void *)v327 + 1) = 0;
          *((void *)v327 + 2) = 0;
          *((void *)v327 + 3) = v327 + 8;
          if (v325 <= v185) {
            char v329 = v185;
          }
          else {
            char v329 = v325;
          }
          __int16 v556 = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v327 + 8), v326, v189, v555, 0, v329, 0);
          (*(void (**)(void *, llvm::Instruction *, const char **, uint64_t *, void **))(*v572 + 16))(v572, v328, &v561, v568, v569);
          if (v566)
          {
            v439 = (llvm::MDNode **)v565;
            v440 = (llvm::MDNode **)((char *)v565 + 16 * v566);
            do
            {
              llvm::Instruction::setMetadata(v328, *(_DWORD *)v439, v439[1]);
              v439 += 2;
            }
            while (v439 != v440);
          }
          if (*(_DWORD *)(*(void *)(a1 + 8) + 4)) {
            *sub_1CD694530(a1 + 368, (uint64_t)a2) = (unint64_t)v328;
          }
        }
        else
        {
          v330 = llvm::Constant::getNullValue(*(llvm::Constant **)(v324 + 32), v192, v193);
          if (*(_DWORD *)(*(void *)(a1 + 8) + 4)) {
            *sub_1CD694530(a1 + 368, (uint64_t)a2) = (unint64_t)v330;
          }
        }
      }
LABEL_218:
      v145 = v565;
      if (v565 != v567) {
        goto LABEL_685;
      }
      return;
    case 0x3D:
      unsigned int v40 = *(_DWORD *)(a1 + 1312);
      if (v40 >= *(_DWORD *)(a1 + 1316)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 1304) + 8 * v40) = a2;
      ++*(_DWORD *)(a1 + 1312);
      if (byte_1EBCE8E80)
      {
        uint64_t v41 = (uint64_t)*(a2 - 4);
        sub_1CCB24814(a1, v41, (unint64_t)a2);
      }
      return;
    case 0x40:
      sub_1CCB28F8C((void *)a1, (uint64_t *)a2);
      unint64_t v54 = *((unsigned __int16 *)a2 + 9);
      __int16 v55 = word_1CFB27FB0[(v54 >> 2) & 7];
      __int16 v56 = v54 & 0xFFE3;
      goto LABEL_91;
    case 0x41:
      sub_1CCB28F8C((void *)a1, (uint64_t *)a2);
      __int16 v87 = *((_WORD *)a2 + 9);
      __int16 v55 = *(_WORD *)((char *)&unk_1CFB27FC0 + (v87 & 0xE));
      __int16 v56 = v87 & 0xFFF1;
LABEL_91:
      *((_WORD *)a2 + 9) = v55 | v56;
      return;
    case 0x42:
      uint64_t v17 = 0;
      uint64_t v18 = **a2;
      v565 = v567;
      uint64_t v566 = 0x200000000;
      uint64_t v570 = v18;
      v571 = &v579;
      v572 = v580;
      uint64_t v573 = 0;
      int v574 = 0;
      __int16 v575 = 512;
      char v576 = 7;
      uint64_t v577 = 0;
      uint64_t v578 = 0;
      v579 = &unk_1F2616E88;
      v580[0] = &unk_1F2617008;
      v568 = v4;
      v569 = a2 + 3;
      uint64_t v19 = (unsigned __int8 *)a2[6];
      v561 = (const char *)v19;
      if (v19)
      {
        llvm::MetadataTracking::track((uint64_t)&v561, v19, 2);
        uint64_t v17 = (uint64_t)v561;
      }
      sub_1CB8461A4((uint64_t)&v565, 0, v17);
      if (!v561) {
        goto LABEL_40;
      }
      int v358 = *(unsigned __int8 *)v561;
      if ((v358 - 4) > 0x1E)
      {
        if ((v358 - 3) >= 0xFFFFFFFE) {
          v470 = v561;
        }
        else {
          v470 = 0;
        }
        if ((v358 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v360 = (unint64_t)(v470 + 8);
LABEL_584:
          v555[0] = (const char *)&v561;
          sub_1CC5FA668(v360 + 16, v555);
          goto LABEL_40;
        }
        if (v358 == 3) {
          *((void *)v561 + 1) = 0;
        }
      }
      else if ((v561[1] & 0x7F) == 2 || *((_DWORD *)v561 + 3))
      {
        uint64_t v359 = *((void *)v561 + 2);
        if ((v359 & 4) != 0)
        {
          unint64_t v360 = v359 & 0xFFFFFFFFFFFFFFF8;
          if (v360) {
            goto LABEL_584;
          }
        }
      }
LABEL_40:
      int v20 = *((_DWORD *)a2 + 5);
      if ((v20 & 0x40000000) != 0) {
        unint64_t v21 = *(a2 - 1);
      }
      else {
        unint64_t v21 = (uint64_t *)&a2[-4 * (v20 & 0x7FFFFFF)];
      }
      v199 = sub_1CCB16AB0(a1, *v21);
      v200 = (unsigned __int8 *)v199;
      v201 = (uint64_t **)*a2;
      v561 = "_msprop";
      __int16 v564 = 259;
      if (*(uint64_t ***)v199 != v201)
      {
        if (*((unsigned __int8 *)v199 + 16) <= 0x14u)
        {
          uint64_t v279 = (*((uint64_t (**)(void **, uint64_t, llvm::Value *, uint64_t **))*v571 + 28))(v571, 38, v199, v201);
          v200 = (unsigned __int8 *)v279;
          if (v279)
          {
            if (*(unsigned __int8 *)(v279 + 16) >= 0x1Cu)
            {
              (*(void (**)(void *, uint64_t, const char **, uint64_t *, void **))(*v572 + 16))(v572, v279, &v561, v568, v569);
              if (v566)
              {
                v280 = (llvm::MDNode **)v565;
                v281 = (llvm::MDNode **)((char *)v565 + 16 * v566);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v200, *(_DWORD *)v280, v280[1]);
                  v280 += 2;
                }
                while (v280 != v281);
              }
            }
          }
        }
        else
        {
          __int16 v556 = 257;
          v200 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v199, (uint64_t)v201, v555, 0);
          (*(void (**)(void *, unsigned __int8 *, const char **, uint64_t *, void **))(*v572 + 16))(v572, v200, &v561, v568, v569);
          if (v566)
          {
            v202 = (llvm::MDNode **)v565;
            v203 = (llvm::MDNode **)((char *)v565 + 16 * v566);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v200, *(_DWORD *)v202, v202[1]);
              v202 += 2;
            }
            while (v202 != v203);
          }
        }
      }
      goto LABEL_319;
    case 0x43:
      uint64_t v194 = 0;
      uint64_t v195 = **a2;
      v565 = v567;
      uint64_t v566 = 0x200000000;
      uint64_t v570 = v195;
      v571 = &v579;
      v572 = v580;
      uint64_t v573 = 0;
      int v574 = 0;
      __int16 v575 = 512;
      char v576 = 7;
      uint64_t v577 = 0;
      uint64_t v578 = 0;
      v579 = &unk_1F2616E88;
      v580[0] = &unk_1F2617008;
      v568 = v4;
      v569 = a2 + 3;
      v196 = (unsigned __int8 *)a2[6];
      v561 = (const char *)v196;
      if (v196)
      {
        llvm::MetadataTracking::track((uint64_t)&v561, v196, 2);
        uint64_t v194 = (uint64_t)v561;
      }
      sub_1CB8461A4((uint64_t)&v565, 0, v194);
      if (!v561) {
        goto LABEL_184;
      }
      int v403 = *(unsigned __int8 *)v561;
      if ((v403 - 4) > 0x1E)
      {
        if ((v403 - 3) >= 0xFFFFFFFE) {
          v485 = v561;
        }
        else {
          v485 = 0;
        }
        if ((v403 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v405 = (unint64_t)(v485 + 8);
LABEL_674:
          v555[0] = (const char *)&v561;
          sub_1CC5FA668(v405 + 16, v555);
          goto LABEL_184;
        }
        if (v403 == 3) {
          *((void *)v561 + 1) = 0;
        }
      }
      else if ((v561[1] & 0x7F) == 2 || *((_DWORD *)v561 + 3))
      {
        uint64_t v404 = *((void *)v561 + 2);
        if ((v404 & 4) != 0)
        {
          unint64_t v405 = v404 & 0xFFFFFFFFFFFFFFF8;
          if (v405) {
            goto LABEL_674;
          }
        }
      }
LABEL_184:
      int v197 = *((_DWORD *)a2 + 5);
      if ((v197 & 0x40000000) != 0) {
        v198 = *(a2 - 1);
      }
      else {
        v198 = (uint64_t *)&a2[-4 * (v197 & 0x7FFFFFF)];
      }
      v275 = sub_1CCB16AB0(a1, *v198);
      v200 = (unsigned __int8 *)v275;
      v276 = (uint64_t **)*a2;
      v561 = "_msprop";
      __int16 v564 = 259;
      if (*(uint64_t ***)v275 != v276)
      {
        if (*((unsigned __int8 *)v275 + 16) <= 0x14u)
        {
          uint64_t v285 = (*((uint64_t (**)(void **, uint64_t, llvm::Value *, uint64_t **))*v571 + 28))(v571, 39, v275, v276);
          v200 = (unsigned __int8 *)v285;
          if (v285)
          {
            if (*(unsigned __int8 *)(v285 + 16) >= 0x1Cu)
            {
              (*(void (**)(void *, uint64_t, const char **, uint64_t *, void **))(*v572 + 16))(v572, v285, &v561, v568, v569);
              if (v566)
              {
                v286 = (llvm::MDNode **)v565;
                v287 = (llvm::MDNode **)((char *)v565 + 16 * v566);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v200, *(_DWORD *)v286, v286[1]);
                  v286 += 2;
                }
                while (v286 != v287);
              }
            }
          }
        }
        else
        {
          __int16 v556 = 257;
          v200 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v275, (uint64_t)v276, v555, 0);
          (*(void (**)(void *, unsigned __int8 *, const char **, uint64_t *, void **))(*v572 + 16))(v572, v200, &v561, v568, v569);
          if (v566)
          {
            v277 = (llvm::MDNode **)v565;
            v278 = (llvm::MDNode **)((char *)v565 + 16 * v566);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v200, *(_DWORD *)v277, v277[1]);
              v277 += 2;
            }
            while (v277 != v278);
          }
        }
      }
      goto LABEL_319;
    case 0x44:
      uint64_t v172 = 0;
      uint64_t v173 = **a2;
      v565 = v567;
      uint64_t v566 = 0x200000000;
      uint64_t v570 = v173;
      v571 = &v579;
      v572 = v580;
      uint64_t v573 = 0;
      int v574 = 0;
      __int16 v575 = 512;
      char v576 = 7;
      uint64_t v577 = 0;
      uint64_t v578 = 0;
      v579 = &unk_1F2616E88;
      v580[0] = &unk_1F2617008;
      v568 = v4;
      v569 = a2 + 3;
      v174 = (unsigned __int8 *)a2[6];
      v561 = (const char *)v174;
      if (v174)
      {
        llvm::MetadataTracking::track((uint64_t)&v561, v174, 2);
        uint64_t v172 = (uint64_t)v561;
      }
      sub_1CB8461A4((uint64_t)&v565, 0, v172);
      if (!v561) {
        goto LABEL_167;
      }
      int v397 = *(unsigned __int8 *)v561;
      if ((v397 - 4) > 0x1E)
      {
        if ((v397 - 3) >= 0xFFFFFFFE) {
          v483 = v561;
        }
        else {
          v483 = 0;
        }
        if ((v397 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v399 = (unint64_t)(v483 + 8);
LABEL_662:
          v555[0] = (const char *)&v561;
          sub_1CC5FA668(v399 + 16, v555);
          goto LABEL_167;
        }
        if (v397 == 3) {
          *((void *)v561 + 1) = 0;
        }
      }
      else if ((v561[1] & 0x7F) == 2 || *((_DWORD *)v561 + 3))
      {
        uint64_t v398 = *((void *)v561 + 2);
        if ((v398 & 4) != 0)
        {
          unint64_t v399 = v398 & 0xFFFFFFFFFFFFFFF8;
          if (v399) {
            goto LABEL_662;
          }
        }
      }
LABEL_167:
      int v175 = *((_DWORD *)a2 + 5);
      if ((v175 & 0x40000000) != 0) {
        v176 = *(a2 - 1);
      }
      else {
        v176 = (uint64_t *)&a2[-4 * (v175 & 0x7FFFFFF)];
      }
      v271 = sub_1CCB16AB0(a1, *v176);
      v200 = (unsigned __int8 *)v271;
      v272 = (uint64_t **)*a2;
      v561 = "_msprop";
      __int16 v564 = 259;
      if (*(uint64_t ***)v271 != v272)
      {
        if (*((unsigned __int8 *)v271 + 16) <= 0x14u)
        {
          uint64_t v282 = (*((uint64_t (**)(void **, uint64_t, llvm::Value *, uint64_t **))*v571 + 28))(v571, 40, v271, v272);
          v200 = (unsigned __int8 *)v282;
          if (v282)
          {
            if (*(unsigned __int8 *)(v282 + 16) >= 0x1Cu)
            {
              (*(void (**)(void *, uint64_t, const char **, uint64_t *, void **))(*v572 + 16))(v572, v282, &v561, v568, v569);
              if (v566)
              {
                v283 = (llvm::MDNode **)v565;
                v284 = (llvm::MDNode **)((char *)v565 + 16 * v566);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v200, *(_DWORD *)v283, v283[1]);
                  v283 += 2;
                }
                while (v283 != v284);
              }
            }
          }
        }
        else
        {
          __int16 v556 = 257;
          v200 = (unsigned __int8 *)llvm::CastInst::Create(40, (uint64_t)v271, (uint64_t)v272, v555, 0);
          (*(void (**)(void *, unsigned __int8 *, const char **, uint64_t *, void **))(*v572 + 16))(v572, v200, &v561, v568, v569);
          if (v566)
          {
            v273 = (llvm::MDNode **)v565;
            v274 = (llvm::MDNode **)((char *)v565 + 16 * v566);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v200, *(_DWORD *)v273, v273[1]);
              v273 += 2;
            }
            while (v273 != v274);
          }
        }
      }
      goto LABEL_319;
    case 0x4B:
      uint64_t v35 = 0;
      uint64_t v36 = **a2;
      v565 = v567;
      uint64_t v566 = 0x200000000;
      uint64_t v570 = v36;
      v571 = &v579;
      v572 = v580;
      uint64_t v573 = 0;
      int v574 = 0;
      __int16 v575 = 512;
      char v576 = 7;
      uint64_t v577 = 0;
      uint64_t v578 = 0;
      v579 = &unk_1F2616E88;
      v580[0] = &unk_1F2617008;
      v568 = v4;
      v569 = a2 + 3;
      uint64_t v37 = (unsigned __int8 *)a2[6];
      v561 = (const char *)v37;
      if (v37)
      {
        llvm::MetadataTracking::track((uint64_t)&v561, v37, 2);
        uint64_t v35 = (uint64_t)v561;
      }
      sub_1CB8461A4((uint64_t)&v565, 0, v35);
      if (!v561) {
        goto LABEL_54;
      }
      int v367 = *(unsigned __int8 *)v561;
      if ((v367 - 4) > 0x1E)
      {
        if ((v367 - 3) >= 0xFFFFFFFE) {
          v473 = v561;
        }
        else {
          v473 = 0;
        }
        if ((v367 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v369 = (unint64_t)(v473 + 8);
LABEL_602:
          v555[0] = (const char *)&v561;
          sub_1CC5FA668(v369 + 16, v555);
          goto LABEL_54;
        }
        if (v367 == 3) {
          *((void *)v561 + 1) = 0;
        }
      }
      else if ((v561[1] & 0x7F) == 2 || *((_DWORD *)v561 + 3))
      {
        uint64_t v368 = *((void *)v561 + 2);
        if ((v368 & 4) != 0)
        {
          unint64_t v369 = v368 & 0xFFFFFFFFFFFFFFF8;
          if (v369) {
            goto LABEL_602;
          }
        }
      }
LABEL_54:
      int v38 = *((_DWORD *)a2 + 5);
      if ((v38 & 0x40000000) != 0) {
        uint64_t v39 = *(a2 - 1);
      }
      else {
        uint64_t v39 = (uint64_t *)&a2[-4 * (v38 & 0x7FFFFFF)];
      }
      v219 = sub_1CCB16AB0(a1, *v39);
      sub_1CCB17A70((void *)a1, (uint64_t)*a2);
      v222 = v221;
      v223 = "_msprop_ptrtoint";
      goto LABEL_245;
    case 0x4C:
      uint64_t v161 = 0;
      uint64_t v162 = **a2;
      v565 = v567;
      uint64_t v566 = 0x200000000;
      uint64_t v570 = v162;
      v571 = &v579;
      v572 = v580;
      uint64_t v573 = 0;
      int v574 = 0;
      __int16 v575 = 512;
      char v576 = 7;
      uint64_t v577 = 0;
      uint64_t v578 = 0;
      v579 = &unk_1F2616E88;
      v580[0] = &unk_1F2617008;
      v568 = v4;
      v569 = a2 + 3;
      v163 = (unsigned __int8 *)a2[6];
      v561 = (const char *)v163;
      if (v163)
      {
        llvm::MetadataTracking::track((uint64_t)&v561, v163, 2);
        uint64_t v161 = (uint64_t)v561;
      }
      sub_1CB8461A4((uint64_t)&v565, 0, v161);
      if (!v561) {
        goto LABEL_154;
      }
      int v394 = *(unsigned __int8 *)v561;
      if ((v394 - 4) > 0x1E)
      {
        if ((v394 - 3) >= 0xFFFFFFFE) {
          v482 = v561;
        }
        else {
          v482 = 0;
        }
        if ((v394 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v396 = (unint64_t)(v482 + 8);
LABEL_656:
          v555[0] = (const char *)&v561;
          sub_1CC5FA668(v396 + 16, v555);
          goto LABEL_154;
        }
        if (v394 == 3) {
          *((void *)v561 + 1) = 0;
        }
      }
      else if ((v561[1] & 0x7F) == 2 || *((_DWORD *)v561 + 3))
      {
        uint64_t v395 = *((void *)v561 + 2);
        if ((v395 & 4) != 0)
        {
          unint64_t v396 = v395 & 0xFFFFFFFFFFFFFFF8;
          if (v396) {
            goto LABEL_656;
          }
        }
      }
LABEL_154:
      int v164 = *((_DWORD *)a2 + 5);
      if ((v164 & 0x40000000) != 0) {
        v165 = *(a2 - 1);
      }
      else {
        v165 = (uint64_t *)&a2[-4 * (v164 & 0x7FFFFFF)];
      }
      v219 = sub_1CCB16AB0(a1, *v165);
      sub_1CCB17A70((void *)a1, (uint64_t)*a2);
      v222 = v267;
      v223 = "_msprop_inttoptr";
LABEL_245:
      v555[0] = v223;
      __int16 v556 = 259;
      v266 = sub_1CBF56614((uint64_t)&v565, v219, v222, 0, (uint64_t)v555, v220);
      goto LABEL_246;
    case 0x4D:
      uint64_t v166 = (uint64_t)*(a2 - 4);
      if (v166 && *(unsigned char *)(v166 + 16) == 84 && (*(_WORD *)(v166 + 18) & 3) == 2) {
        return;
      }
      uint64_t v167 = 0;
      uint64_t v168 = **a2;
      v565 = v567;
      uint64_t v566 = 0x200000000;
      uint64_t v570 = v168;
      v571 = &v579;
      v572 = v580;
      uint64_t v573 = 0;
      int v574 = 0;
      __int16 v575 = 512;
      char v576 = 7;
      uint64_t v577 = 0;
      uint64_t v578 = 0;
      v579 = &unk_1F2616E88;
      v580[0] = &unk_1F2617008;
      v568 = v4;
      v569 = a2 + 3;
      v169 = (unsigned __int8 *)a2[6];
      v561 = (const char *)v169;
      if (v169)
      {
        llvm::MetadataTracking::track((uint64_t)&v561, v169, 2);
        uint64_t v167 = (uint64_t)v561;
      }
      sub_1CB8461A4((uint64_t)&v565, 0, v167);
      if (!v561) {
        goto LABEL_162;
      }
      int v436 = *(unsigned __int8 *)v561;
      if ((v436 - 4) > 0x1E)
      {
        if ((v436 - 3) >= 0xFFFFFFFE) {
          v486 = v561;
        }
        else {
          v486 = 0;
        }
        if ((v436 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v438 = (unint64_t)(v486 + 8);
LABEL_680:
          v555[0] = (const char *)&v561;
          sub_1CC5FA668(v438 + 16, v555);
          goto LABEL_162;
        }
        if (v436 == 3) {
          *((void *)v561 + 1) = 0;
        }
      }
      else if ((v561[1] & 0x7F) == 2 || *((_DWORD *)v561 + 3))
      {
        uint64_t v437 = *((void *)v561 + 2);
        if ((v437 & 4) != 0)
        {
          unint64_t v438 = v437 & 0xFFFFFFFFFFFFFFF8;
          if (v438) {
            goto LABEL_680;
          }
        }
      }
LABEL_162:
      int v170 = *((_DWORD *)a2 + 5);
      if ((v170 & 0x40000000) != 0) {
        v171 = *(a2 - 1);
      }
      else {
        v171 = (uint64_t *)&a2[-4 * (v170 & 0x7FFFFFF)];
      }
      v200 = (unsigned __int8 *)sub_1CCB16AB0(a1, *v171);
      sub_1CCB17A70((void *)a1, (uint64_t)*a2);
      __int16 v564 = 257;
      if (*(void *)v200 != v309)
      {
        if (v200[16] <= 0x14u)
        {
          uint64_t v316 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v571 + 28))(v571, 49, v200, v309);
          v200 = (unsigned __int8 *)v316;
          if (v316)
          {
            if (*(unsigned __int8 *)(v316 + 16) >= 0x1Cu)
            {
              (*(void (**)(void *, uint64_t, const char **, uint64_t *, void **))(*v572 + 16))(v572, v316, &v561, v568, v569);
              if (v566)
              {
                v547 = (llvm::MDNode **)v565;
                v548 = (llvm::MDNode **)((char *)v565 + 16 * v566);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v200, *(_DWORD *)v547, v547[1]);
                  v547 += 2;
                }
                while (v547 != v548);
              }
            }
          }
        }
        else
        {
          __int16 v556 = 257;
          v200 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v200, v309, v555, 0);
          (*(void (**)(void *, unsigned __int8 *, const char **, uint64_t *, void **))(*v572 + 16))(v572, v200, &v561, v568, v569);
          if (v566)
          {
            v310 = (llvm::MDNode **)v565;
            v311 = (llvm::MDNode **)((char *)v565 + 16 * v566);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v200, *(_DWORD *)v310, v310[1]);
              v310 += 2;
            }
            while (v310 != v311);
          }
        }
      }
LABEL_319:
      uint64_t v269 = a1;
      v270 = (uint64_t *)a2;
      v268 = (llvm::Value *)v200;
      goto LABEL_320;
    case 0x4F:
    case 0x50:
      sub_1CCB29398((void *)a1, (uint64_t *)a2);
      return;
    case 0x51:
      if (!byte_1EBCE8B80) {
        goto LABEL_7;
      }
      __int16 v57 = *((_WORD *)a2 + 9);
      if ((v57 & 0x3E) == 0x20)
      {
        uint64_t v58 = 0;
        uint64_t v59 = **a2;
        v565 = v567;
        uint64_t v566 = 0x200000000;
        uint64_t v570 = v59;
        v571 = &v579;
        v572 = v580;
        uint64_t v573 = 0;
        int v574 = 0;
        __int16 v575 = 512;
        char v576 = 7;
        uint64_t v577 = 0;
        uint64_t v578 = 0;
        v579 = &unk_1F2616E88;
        v580[0] = &unk_1F2617008;
        v568 = v4;
        v569 = a2 + 3;
        uint64_t v60 = (unsigned __int8 *)a2[6];
        v561 = (const char *)v60;
        if (v60)
        {
          llvm::MetadataTracking::track((uint64_t)&v561, v60, 2);
          uint64_t v58 = (uint64_t)v561;
        }
        sub_1CB8461A4((uint64_t)&v565, 0, v58);
        if (!v561)
        {
LABEL_87:
          int v61 = (llvm::CastInst *)*(a2 - 8);
          uint64_t v62 = (llvm::CastInst *)*(a2 - 4);
          uint64_t v63 = sub_1CCB16AB0(a1, (uint64_t)v61);
          int v64 = sub_1CCB16AB0(a1, (uint64_t)v62);
          int v65 = *(llvm::Value **)v63;
          __int16 v556 = 257;
          uint64_t v67 = sub_1CC277FE0((uint64_t)&v565, v61, v65, (uint64_t)v555, v66);
          unint64_t v68 = *(llvm::Value **)v64;
          __int16 v556 = 257;
          char v70 = sub_1CC277FE0((uint64_t)&v565, v62, v68, (uint64_t)v555, v69);
          __int16 v556 = 257;
          __int16 v71 = sub_1CC2428C0((uint64_t)&v565, (uint64_t)v67, (uint64_t)v70, (uint64_t)v555);
          __int16 v556 = 257;
          int v72 = (llvm::Constant **)sub_1CB844AF4((uint64_t)&v565, v63, (uint64_t)v64, (uint64_t)v555);
          char v75 = llvm::Constant::getNullValue(*v72, v73, v74);
          AllOnesValue = llvm::Constant::getAllOnesValue(*v72, v76, v77);
          __int16 v556 = 257;
          uint64_t v79 = sub_1CB845F20((uint64_t)&v565, 33, v72, (uint64_t)v75, (uint64_t)v555);
          __int16 v564 = 257;
          uint64_t v80 = sub_1CC2428C0((uint64_t)&v565, (uint64_t)v72, (uint64_t)AllOnesValue, (uint64_t)&v561);
          __int16 v560 = 257;
          int v81 = sub_1CBF52474((uint64_t)&v565, v80, (uint64_t)v71, (uint64_t)v559);
          __int16 v554 = 257;
          __int16 v82 = sub_1CB845F20((uint64_t)&v565, 32, v81, (uint64_t)v75, (uint64_t)v553);
          __int16 v558 = 257;
          char v83 = sub_1CBF52474((uint64_t)&v565, v79, (uint64_t)v82, (uint64_t)v557);
          v555[0] = "_msprop_icmp";
          __int16 v556 = 259;
          llvm::Value::setNameImpl(v83, v555);
          if (v83 && !*((unsigned char *)v83 + 16))
          {
            if ((*((unsigned char *)v83 + 23) & 0x10) == 0) {
              goto LABEL_811;
            }
            uint64_t v511 = ***(void ***)v83;
            uint64_t v512 = *(void *)(v511 + 152);
            uint64_t v513 = *(unsigned int *)(v511 + 168);
            if (v513)
            {
              LODWORD(v514) = (v513 - 1) & ((v83 >> 4) ^ (v83 >> 9));
              v515 = (llvm::Instruction **)(v512 + 16 * v514);
              v516 = *v515;
              if (*v515 != v83)
              {
                int v517 = 1;
                do
                {
                  if (v516 == (llvm::Instruction *)-4096) {
                    goto LABEL_803;
                  }
                  int v518 = v514 + v517++;
                  uint64_t v514 = v518 & (v513 - 1);
                  v516 = *(llvm::Instruction **)(v512 + 16 * v514);
                }
                while (v516 != v83);
                v515 = (llvm::Instruction **)(v512 + 16 * v514);
              }
            }
            else
            {
LABEL_803:
              v515 = (llvm::Instruction **)(v512 + 16 * v513);
            }
            v532 = v515[1];
            unint64_t v535 = *(void *)v532;
            v533 = (char *)v532 + 16;
            unint64_t v534 = v535;
            if (v535 >= 5
              && (*(_DWORD *)v533 == *(_DWORD *)"llvm." ? (BOOL v536 = v533[4] == aLlvm_1[4]) : (BOOL v536 = 0), v536))
            {
              *((_DWORD *)v83 + 8) |= 0x2000u;
              int v537 = llvm::Function::lookupIntrinsicID(v533, v534);
            }
            else
            {
LABEL_811:
              int v537 = 0;
              *((_DWORD *)v83 + 8) &= ~0x2000u;
            }
            *((_DWORD *)v83 + 9) = v537;
          }
          uint64_t v84 = a1;
          uint64_t v85 = (uint64_t *)a2;
          int v86 = v83;
          goto LABEL_217;
        }
        int v467 = *(unsigned __int8 *)v561;
        if ((v467 - 4) > 0x1E)
        {
          if ((v467 - 3) >= 0xFFFFFFFE) {
            v506 = v561;
          }
          else {
            v506 = 0;
          }
          if ((v467 - 3) < 0xFFFFFFFE)
          {
            if (v467 == 3) {
              *((void *)v561 + 1) = 0;
            }
            goto LABEL_87;
          }
          unint64_t v469 = (unint64_t)(v506 + 8);
        }
        else
        {
          if ((v561[1] & 0x7F) != 2 && !*((_DWORD *)v561 + 3)) {
            goto LABEL_87;
          }
          uint64_t v468 = *((void *)v561 + 2);
          if ((v468 & 4) == 0) {
            goto LABEL_87;
          }
          unint64_t v469 = v468 & 0xFFFFFFFFFFFFFFF8;
          if (!v469) {
            goto LABEL_87;
          }
        }
        v555[0] = (const char *)&v561;
        sub_1CC5FA668(v469 + 16, v555);
        goto LABEL_87;
      }
      if (byte_1EBCE8C40) {
        goto LABEL_329;
      }
      int v346 = v57 & 0x3F;
      if ((v346 - 38) > 3)
      {
        if (*((unsigned __int8 *)*(a2 - 8) + 16) < 0x15u || *((unsigned __int8 *)*(a2 - 4) + 16) <= 0x14u)
        {
LABEL_329:
          sub_1CCB2941C((void *)a1, (uint64_t *)a2);
          return;
        }
        goto LABEL_7;
      }
      uint64_t v347 = (uint64_t)*(a2 - 4);
      uint64_t v348 = (uint64_t)*(a2 - 8);
      if (v347 && (unsigned int v349 = *(unsigned __int8 *)(v347 + 16), v349 < 0x15))
      {
        v350 = *(a2 - 8);
      }
      else
      {
        if (!v348) {
          goto LABEL_7;
        }
        unsigned int v349 = *(unsigned __int8 *)(v348 + 16);
        if (v349 > 0x14) {
          goto LABEL_7;
        }
        if (v346 == 39) {
          int v441 = 41;
        }
        else {
          int v441 = 39;
        }
        if (v346 == 38) {
          int v442 = 40;
        }
        else {
          int v442 = v441;
        }
        if (v346 == 40) {
          int v346 = 38;
        }
        else {
          int v346 = v442;
        }
        v350 = *(a2 - 4);
        uint64_t v347 = (uint64_t)*(a2 - 8);
      }
      if (v349 == 16)
      {
        uint64_t v443 = *(unsigned int *)(v347 + 32);
        if (v443 > 0x40)
        {
          int v541 = 0;
          int64_t v542 = (unint64_t)(v443 + 63) >> 6;
          do
          {
            if (v542-- < 1) {
              break;
            }
            unint64_t v544 = *(void *)(*(void *)(v347 + 24) + 8 * v542);
            v541 += __clz(v544);
          }
          while (!v544);
          int v545 = v443 | 0xFFFFFFC0;
          if ((v443 & 0x3F) == 0) {
            int v545 = 0;
          }
          BOOL v444 = v541 + v545 == v443;
        }
        else
        {
          BOOL v444 = *(void *)(v347 + 24) == 0;
        }
        int v445 = v444;
      }
      else if (v349 == 17)
      {
        int v445 = sub_1CB844168(v347, 0.0);
      }
      else
      {
        int v445 = 1;
        if (v349 - 18 >= 3 && v349 != 13) {
          goto LABEL_739;
        }
      }
      if (v445) {
        BOOL v446 = (v346 - 39) >= 2;
      }
      else {
        BOOL v446 = 1;
      }
      if (v446)
      {
LABEL_739:
        if (llvm::Constant::isAllOnesValue((llvm::Constant *)v347) && (v346 == 41 || v346 == 38)) {
          goto LABEL_557;
        }
LABEL_7:
        sub_1CCB27378(a1, (uint64_t *)a2);
        return;
      }
LABEL_557:
      uint64_t v447 = 0;
      uint64_t v448 = **a2;
      v565 = v567;
      uint64_t v566 = 0x200000000;
      uint64_t v570 = v448;
      v571 = &v579;
      v572 = v580;
      uint64_t v573 = 0;
      int v574 = 0;
      __int16 v575 = 512;
      char v576 = 7;
      uint64_t v577 = 0;
      uint64_t v578 = 0;
      v579 = &unk_1F2616E88;
      v580[0] = &unk_1F2617008;
      v449 = (unsigned __int8 *)a2[6];
      v568 = a2[5];
      v569 = a2 + 3;
      v561 = (const char *)v449;
      if (v449)
      {
        llvm::MetadataTracking::track((uint64_t)&v561, v449, 2);
        uint64_t v447 = (uint64_t)v561;
      }
      sub_1CB8461A4((uint64_t)&v565, 0, v447);
      if (v561)
      {
        int v519 = *(unsigned __int8 *)v561;
        if ((v519 - 4) > 0x1E)
        {
          if ((v519 - 3) >= 0xFFFFFFFE) {
            v531 = v561;
          }
          else {
            v531 = 0;
          }
          if ((v519 - 3) < 0xFFFFFFFE)
          {
            if (v519 == 3) {
              *((void *)v561 + 1) = 0;
            }
            goto LABEL_560;
          }
          unint64_t v521 = (unint64_t)(v531 + 8);
        }
        else
        {
          if ((v561[1] & 0x7F) != 2 && !*((_DWORD *)v561 + 3)) {
            goto LABEL_560;
          }
          uint64_t v520 = *((void *)v561 + 2);
          if ((v520 & 4) == 0) {
            goto LABEL_560;
          }
          unint64_t v521 = v520 & 0xFFFFFFFFFFFFFFF8;
          if (!v521) {
            goto LABEL_560;
          }
        }
        v555[0] = (const char *)&v561;
        sub_1CC5FA668(v521 + 16, v555);
      }
LABEL_560:
      v450 = sub_1CCB16AB0(a1, (uint64_t)v350);
      sub_1CCB17A70((void *)a1, *v350);
      if (v451) {
        v454 = llvm::Constant::getNullValue(v451, v452, v453);
      }
      else {
        v454 = 0;
      }
      v555[0] = "_msprop_icmp_s";
      __int16 v556 = 259;
      v487 = sub_1CB845F20((uint64_t)&v565, 40, v450, (uint64_t)v454, (uint64_t)v555);
      sub_1CCB24DAC(a1, (uint64_t *)a2, v487);
      v489 = sub_1CCB176E8(a1, (uint64_t)v350, v488);
      if (*(_DWORD *)(*(void *)(a1 + 8) + 4)) {
        *sub_1CD694530(a1 + 368, (uint64_t)a2) = (unint64_t)v489;
      }
      v145 = v565;
      if (v565 != v567) {
        goto LABEL_685;
      }
      return;
    case 0x53:
      uint64_t v150 = 0;
      uint64_t v151 = **a2;
      v565 = v567;
      uint64_t v566 = 0x200000000;
      uint64_t v570 = v151;
      v571 = &v579;
      v572 = v580;
      uint64_t v573 = 0;
      int v574 = 0;
      __int16 v575 = 512;
      char v576 = 7;
      uint64_t v577 = 0;
      uint64_t v578 = 0;
      v579 = &unk_1F2616E88;
      v580[0] = &unk_1F2617008;
      v568 = v4;
      v569 = a2 + 3;
      v152 = (unsigned __int8 *)a2[6];
      v561 = (const char *)v152;
      if (v152)
      {
        llvm::MetadataTracking::track((uint64_t)&v561, v152, 2);
        uint64_t v150 = (uint64_t)v561;
      }
      sub_1CB8461A4((uint64_t)&v565, 0, v150);
      if (!v561) {
        goto LABEL_147;
      }
      int v391 = *(unsigned __int8 *)v561;
      if ((v391 - 4) > 0x1E)
      {
        if ((v391 - 3) >= 0xFFFFFFFE) {
          v481 = v561;
        }
        else {
          v481 = 0;
        }
        if ((v391 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v393 = (unint64_t)(v481 + 8);
LABEL_650:
          v555[0] = (const char *)&v561;
          sub_1CC5FA668(v393 + 16, v555);
          goto LABEL_147;
        }
        if (v391 == 3) {
          *((void *)v561 + 1) = 0;
        }
      }
      else if ((v561[1] & 0x7F) == 2 || *((_DWORD *)v561 + 3))
      {
        uint64_t v392 = *((void *)v561 + 2);
        if ((v392 & 4) != 0)
        {
          unint64_t v393 = v392 & 0xFFFFFFFFFFFFFFF8;
          if (v393) {
            goto LABEL_650;
          }
        }
      }
LABEL_147:
      if (*(unsigned char *)(a1 + 457))
      {
        unsigned int v153 = *(_DWORD *)(a1 + 24);
        if (v153 >= *(_DWORD *)(a1 + 28)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a1 + 16) + 8 * v153) = a2;
        ++*(_DWORD *)(a1 + 24);
        sub_1CCB17A70((void *)a1, (uint64_t)*a2);
        int v154 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
        v555[0] = "_msphi_s";
        __int16 v556 = 259;
        v156 = sub_1CB93113C((uint64_t)&v565, v155, v154, (uint64_t)v555);
        sub_1CCB24DAC(a1, (uint64_t *)a2, v156);
        uint64_t v157 = *(void *)(a1 + 8);
        if (!*(_DWORD *)(v157 + 4))
        {
LABEL_326:
          v145 = v565;
          if (v565 == v567) {
            return;
          }
          goto LABEL_685;
        }
        uint64_t v158 = *(void *)(v157 + 32);
        int v159 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
        v555[0] = "_msphi_o";
        __int16 v556 = 259;
        v160 = sub_1CB93113C((uint64_t)&v565, v158, v159, (uint64_t)v555);
      }
      else
      {
        sub_1CCB17A70((void *)a1, (uint64_t)*a2);
        if (v305) {
          v308 = llvm::Constant::getNullValue(v305, v306, v307);
        }
        else {
          v308 = 0;
        }
        sub_1CCB24DAC(a1, (uint64_t *)a2, v308);
        v160 = llvm::Constant::getNullValue(*(llvm::Constant **)(*(void *)(a1 + 8) + 32), v321, v322);
      }
      goto LABEL_324;
    case 0x54:
      uint64_t v88 = (uint64_t)*(a2 - 4);
      if (!v88 || *(unsigned char *)(v88 + 16) || *(uint64_t **)(v88 + 24) != a2[9]) {
        goto LABEL_95;
      }
      int v351 = *(_DWORD *)(v88 + 36);
      if (v351 <= 196)
      {
        if (v351 <= 56)
        {
          if (!v351)
          {
LABEL_95:
            sub_1CCB24E14(a1, a2);
            return;
          }
        }
        else if (v351 == 194)
        {
          sub_1CCB16AB0(a1, (uint64_t)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 4]);
          uint64_t v352 = 0;
          uint64_t v353 = **a2;
          v565 = v567;
          uint64_t v566 = 0x200000000;
          uint64_t v570 = v353;
          v571 = &v579;
          v572 = v580;
          uint64_t v573 = 0;
          int v574 = 0;
          __int16 v575 = 512;
          char v576 = 7;
          uint64_t v577 = 0;
          uint64_t v578 = 0;
          v579 = &unk_1F2616E88;
          v580[0] = &unk_1F2617008;
          v354 = (unsigned __int8 *)a2[6];
          v568 = a2[5];
          v569 = a2 + 3;
          v561 = (const char *)v354;
          if (v354)
          {
            llvm::MetadataTracking::track((uint64_t)&v561, v354, 2);
            uint64_t v352 = (uint64_t)v561;
          }
          sub_1CB8461A4((uint64_t)&v565, 0, v352);
          if (!v561) {
            goto LABEL_391;
          }
          int v522 = *(unsigned __int8 *)v561;
          if ((v522 - 4) > 0x1E)
          {
            if ((v522 - 3) >= 0xFFFFFFFE) {
              v538 = v561;
            }
            else {
              v538 = 0;
            }
            if ((v522 - 3) < 0xFFFFFFFE)
            {
              if (v522 == 3) {
                *((void *)v561 + 1) = 0;
              }
              goto LABEL_391;
            }
            unint64_t v524 = (unint64_t)(v538 + 8);
          }
          else
          {
            if ((v561[1] & 0x7F) != 2 && !*((_DWORD *)v561 + 3)) {
              goto LABEL_391;
            }
            uint64_t v523 = *((void *)v561 + 2);
            if ((v523 & 4) == 0) {
              goto LABEL_391;
            }
            unint64_t v524 = v523 & 0xFFFFFFFFFFFFFFF8;
            if (!v524) {
              goto LABEL_391;
            }
          }
          v555[0] = (const char *)&v561;
          sub_1CC5FA668(v524 + 16, v555);
LABEL_391:
          uint64_t v355 = *(void *)(a1 + 8);
          v356 = *(uint64_t ***)(v355 + 328);
          v357 = *(uint64_t ***)(v355 + 336);
LABEL_699:
          v498 = (llvm::CastInst *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
          v499 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v570 + 1912), 0);
          __int16 v556 = 257;
          v557[0] = (uint64_t)sub_1CC277FE0((uint64_t)&v565, v498, v499, (uint64_t)v555, v500);
          v501 = (llvm::CastInst *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 4];
          v502 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v570 + 1912), 0);
          __int16 v564 = 257;
          v465 = sub_1CC277FE0((uint64_t)&v565, v501, v502, (uint64_t)&v561, v503);
LABEL_700:
          v557[1] = (uint64_t)v465;
          v504 = (llvm::CastInst *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 8];
          v505 = *(llvm::Type ****)(*(void *)(a1 + 8) + 24);
          __int16 v560 = 257;
          v557[2] = (uint64_t)sub_1CBF56614((uint64_t)&v565, v504, v505, 0, (uint64_t)v559, v466);
          __int16 v554 = 257;
          sub_1CB845BAC((uint64_t *)&v565, v356, v357, v557, 3, (uint64_t)v553, 0);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
LABEL_564:
        sub_1CCB29994(a1, a2);
        return;
      }
      if (v351 > 312)
      {
        if (v351 == 313)
        {
          v435 = *(void (**)(void))(**(void **)(a1 + 432) + 32);
        }
        else
        {
          if (v351 != 315) {
            goto LABEL_564;
          }
          v435 = *(void (**)(void))(**(void **)(a1 + 432) + 24);
        }
        v435();
        return;
      }
      if (v351 != 197)
      {
        if (v351 != 199) {
          goto LABEL_564;
        }
        uint64_t v455 = 0;
        uint64_t v456 = **a2;
        v565 = v567;
        uint64_t v566 = 0x200000000;
        uint64_t v570 = v456;
        v571 = &v579;
        v572 = v580;
        uint64_t v573 = 0;
        int v574 = 0;
        __int16 v575 = 512;
        char v576 = 7;
        uint64_t v577 = 0;
        uint64_t v578 = 0;
        v579 = &unk_1F2616E88;
        v580[0] = &unk_1F2617008;
        v568 = v4;
        v569 = a2 + 3;
        v457 = (unsigned __int8 *)a2[6];
        v561 = (const char *)v457;
        if (v457)
        {
          llvm::MetadataTracking::track((uint64_t)&v561, v457, 2);
          uint64_t v455 = (uint64_t)v561;
        }
        sub_1CB8461A4((uint64_t)&v565, 0, v455);
        if (v561)
        {
          int v525 = *(unsigned __int8 *)v561;
          if ((v525 - 4) > 0x1E)
          {
            if ((v525 - 3) >= 0xFFFFFFFE) {
              v539 = v561;
            }
            else {
              v539 = 0;
            }
            if ((v525 - 3) < 0xFFFFFFFE)
            {
              if (v525 == 3) {
                *((void *)v561 + 1) = 0;
              }
              goto LABEL_572;
            }
            unint64_t v527 = (unint64_t)(v539 + 8);
          }
          else
          {
            if ((v561[1] & 0x7F) != 2 && !*((_DWORD *)v561 + 3)) {
              goto LABEL_572;
            }
            uint64_t v526 = *((void *)v561 + 2);
            if ((v526 & 4) == 0) {
              goto LABEL_572;
            }
            unint64_t v527 = v526 & 0xFFFFFFFFFFFFFFF8;
            if (!v527) {
              goto LABEL_572;
            }
          }
          v555[0] = (const char *)&v561;
          sub_1CC5FA668(v527 + 16, v555);
        }
LABEL_572:
        uint64_t v458 = *(void *)(a1 + 8);
        v356 = *(uint64_t ***)(v458 + 344);
        v357 = *(uint64_t ***)(v458 + 352);
        v459 = (llvm::CastInst *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
        v460 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v570 + 1912), 0);
        __int16 v556 = 257;
        v557[0] = (uint64_t)sub_1CC277FE0((uint64_t)&v565, v459, v460, (uint64_t)v555, v461);
        v462 = (llvm::CastInst *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 4];
        v463 = (llvm::Type ***)(*(void *)v570 + 1960);
        __int16 v564 = 257;
        v465 = sub_1CBF56614((uint64_t)&v565, v462, v463, 0, (uint64_t)&v561, v464);
        goto LABEL_700;
      }
      sub_1CCB16AB0(a1, (uint64_t)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 4]);
      uint64_t v494 = 0;
      uint64_t v495 = **a2;
      v565 = v567;
      uint64_t v566 = 0x200000000;
      uint64_t v570 = v495;
      v571 = &v579;
      v572 = v580;
      uint64_t v573 = 0;
      int v574 = 0;
      __int16 v575 = 512;
      char v576 = 7;
      uint64_t v577 = 0;
      uint64_t v578 = 0;
      v579 = &unk_1F2616E88;
      v580[0] = &unk_1F2617008;
      v496 = (unsigned __int8 *)a2[6];
      v568 = a2[5];
      v569 = a2 + 3;
      v561 = (const char *)v496;
      if (v496)
      {
        llvm::MetadataTracking::track((uint64_t)&v561, v496, 2);
        uint64_t v494 = (uint64_t)v561;
      }
      sub_1CB8461A4((uint64_t)&v565, 0, v494);
      if (!v561) {
        goto LABEL_698;
      }
      int v528 = *(unsigned __int8 *)v561;
      if ((v528 - 4) > 0x1E)
      {
        if ((v528 - 3) >= 0xFFFFFFFE) {
          v540 = v561;
        }
        else {
          v540 = 0;
        }
        if ((v528 - 3) < 0xFFFFFFFE)
        {
          if (v528 == 3) {
            *((void *)v561 + 1) = 0;
          }
          goto LABEL_698;
        }
        unint64_t v530 = (unint64_t)(v540 + 8);
      }
      else
      {
        if ((v561[1] & 0x7F) != 2 && !*((_DWORD *)v561 + 3)) {
          goto LABEL_698;
        }
        uint64_t v529 = *((void *)v561 + 2);
        if ((v529 & 4) == 0) {
          goto LABEL_698;
        }
        unint64_t v530 = v529 & 0xFFFFFFFFFFFFFFF8;
        if (!v530) {
          goto LABEL_698;
        }
      }
      v555[0] = (const char *)&v561;
      sub_1CC5FA668(v530 + 16, v555);
LABEL_698:
      uint64_t v497 = *(void *)(a1 + 8);
      v356 = *(uint64_t ***)(v497 + 312);
      v357 = *(uint64_t ***)(v497 + 320);
      goto LABEL_699;
    case 0x55:
      uint64_t v119 = 0;
      uint64_t v120 = **a2;
      v565 = v567;
      uint64_t v566 = 0x200000000;
      uint64_t v570 = v120;
      v571 = &v579;
      v572 = v580;
      uint64_t v573 = 0;
      int v574 = 0;
      __int16 v575 = 512;
      char v576 = 7;
      uint64_t v577 = 0;
      uint64_t v578 = 0;
      v579 = &unk_1F2616E88;
      v580[0] = &unk_1F2617008;
      v568 = v4;
      v569 = a2 + 3;
      __int16 v121 = (unsigned __int8 *)a2[6];
      v561 = (const char *)v121;
      if (v121)
      {
        llvm::MetadataTracking::track((uint64_t)&v561, v121, 2);
        uint64_t v119 = (uint64_t)v561;
      }
      sub_1CB8461A4((uint64_t)&v565, 0, v119);
      if (!v561) {
        goto LABEL_130;
      }
      int v382 = *(unsigned __int8 *)v561;
      if ((v382 - 4) > 0x1E)
      {
        if ((v382 - 3) >= 0xFFFFFFFE) {
          v478 = v561;
        }
        else {
          v478 = 0;
        }
        if ((v382 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v384 = (unint64_t)(v478 + 8);
LABEL_632:
          v555[0] = (const char *)&v561;
          sub_1CC5FA668(v384 + 16, v555);
          goto LABEL_130;
        }
        if (v382 == 3) {
          *((void *)v561 + 1) = 0;
        }
      }
      else if ((v561[1] & 0x7F) == 2 || *((_DWORD *)v561 + 3))
      {
        uint64_t v383 = *((void *)v561 + 2);
        if ((v383 & 4) != 0)
        {
          unint64_t v384 = v383 & 0xFFFFFFFFFFFFFFF8;
          if (v384) {
            goto LABEL_632;
          }
        }
      }
LABEL_130:
      uint64_t v122 = (unsigned __int8 *)*(a2 - 12);
      int v123 = *(a2 - 8);
      __int16 v124 = *(a2 - 4);
      char v125 = (unsigned __int8 *)sub_1CCB16AB0(a1, (uint64_t)v122);
      uint64_t v126 = sub_1CCB16AB0(a1, (uint64_t)v123);
      uint64_t v127 = sub_1CCB16AB0(a1, (uint64_t)v124);
      __int16 v556 = 257;
      Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v565, (llvm::Value *)v122, v126, v127, (const llvm::Twine *)v555, 0);
      if (((*a2)[1] & 0xFE) == 0x10)
      {
        sub_1CCB17A70((void *)a1, (uint64_t)*a2);
        __int16 v132 = (llvm::Value *)sub_1CCB181BC(v129, v130, v131);
      }
      else
      {
        v253 = sub_1CCB30A48((void *)a1, (uint64_t *)&v565, v123);
        v254 = sub_1CCB30A48((void *)a1, (uint64_t *)&v565, v124);
        __int16 v564 = 257;
        __int16 v132 = sub_1CC2428C0((uint64_t)&v565, (uint64_t)v253, (uint64_t)v254, (uint64_t)&v561);
        v559[0] = v132;
        v559[1] = v126;
        v559[2] = v127;
        for (uint64_t k = 1; k != 3; ++k)
        {
          uint64_t v256 = v559[k];
          __int16 v556 = 257;
          __int16 v132 = sub_1CB844AF4((uint64_t)&v565, v132, v256, (uint64_t)v555);
        }
      }
      v555[0] = "_msprop_select";
      __int16 v556 = 259;
      v257 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v565, (llvm::Value *)v125, v132, Select, (const llvm::Twine *)v555, 0);
      sub_1CCB24DAC(a1, (uint64_t *)a2, v257);
      if (*(_DWORD *)(*(void *)(a1 + 8) + 4))
      {
        if ((*(_DWORD *)(*(void *)v122 + 8) & 0xFE) == 0x12)
        {
          v261 = sub_1CCB27D04(a1, *(llvm::Type **)v122);
          __int16 v564 = 257;
          if (*(llvm::Constant **)v122 != v261)
          {
            if (v122[16] <= 0x14u)
            {
              uint64_t v122 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, llvm::Constant *))*v571
                                         + 28))(v571, 49, v122, v261);
              if (v122) {
                BOOL v331 = v122[16] >= 0x1Cu;
              }
              else {
                BOOL v331 = 0;
              }
              if (v331)
              {
                (*(void (**)(void *, unsigned __int8 *, const char **, uint64_t *, void **))(*v572 + 16))(v572, v122, &v561, v568, v569);
                if (v566)
                {
                  v549 = (llvm::MDNode **)v565;
                  v550 = (llvm::MDNode **)((char *)v565 + 16 * v566);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v122, *(_DWORD *)v549, v549[1]);
                    v549 += 2;
                  }
                  while (v549 != v550);
                }
              }
            }
            else
            {
              __int16 v556 = 257;
              uint64_t v122 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v122, (uint64_t)v261, v555, 0);
              (*(void (**)(void *, unsigned __int8 *, const char **, uint64_t *, void **))(*v572 + 16))(v572, v122, &v561, v568, v569);
              if (v566)
              {
                v262 = (llvm::MDNode **)v565;
                v263 = (llvm::MDNode **)((char *)v565 + 16 * v566);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v122, *(_DWORD *)v262, v262[1]);
                  v262 += 2;
                }
                while (v262 != v263);
              }
            }
          }
          v332 = llvm::Constant::getNullValue(v261, v259, v260);
          __int16 v556 = 257;
          uint64_t v122 = (unsigned __int8 *)sub_1CB845F20((uint64_t)&v565, 33, v122, (uint64_t)v332, (uint64_t)v555);
          __int16 v564 = 257;
          if (*(llvm::Constant **)v125 != v261)
          {
            if (v125[16] <= 0x14u)
            {
              char v125 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, llvm::Constant *))*v571
                                         + 28))(v571, 49, v125, v261);
              if (v125) {
                BOOL v337 = v125[16] >= 0x1Cu;
              }
              else {
                BOOL v337 = 0;
              }
              if (v337)
              {
                (*(void (**)(void *, unsigned __int8 *, const char **, uint64_t *, void **))(*v572 + 16))(v572, v125, &v561, v568, v569);
                if (v566)
                {
                  v551 = (llvm::MDNode **)v565;
                  v552 = (llvm::MDNode **)((char *)v565 + 16 * v566);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v125, *(_DWORD *)v551, v551[1]);
                    v551 += 2;
                  }
                  while (v551 != v552);
                }
              }
            }
            else
            {
              __int16 v556 = 257;
              char v125 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v125, (uint64_t)v261, v555, 0);
              (*(void (**)(void *, unsigned __int8 *, const char **, uint64_t *, void **))(*v572 + 16))(v572, v125, &v561, v568, v569);
              if (v566)
              {
                v335 = (llvm::MDNode **)v565;
                v336 = (llvm::MDNode **)((char *)v565 + 16 * v566);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v125, *(_DWORD *)v335, v335[1]);
                  v335 += 2;
                }
                while (v335 != v336);
              }
            }
          }
          v338 = llvm::Constant::getNullValue(v261, v333, v334);
          __int16 v556 = 257;
          char v125 = (unsigned __int8 *)sub_1CB845F20((uint64_t)&v565, 33, v125, (uint64_t)v338, (uint64_t)v555);
        }
        v339 = sub_1CCB176E8(a1, (uint64_t)*(a2 - 12), v258);
        v341 = sub_1CCB176E8(a1, (uint64_t)*(a2 - 8), v340);
        v343 = sub_1CCB176E8(a1, (uint64_t)*(a2 - 4), v342);
        __int16 v556 = 257;
        v344 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v565, (llvm::Value *)v122, v341, v343, (const llvm::Twine *)v555, 0);
        __int16 v564 = 257;
        v345 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v565, (llvm::Value *)v125, v339, v344, (const llvm::Twine *)&v561, 0);
        if (*(_DWORD *)(*(void *)(a1 + 8) + 4)) {
          *sub_1CD694530(a1 + 368, (uint64_t)a2) = (unint64_t)v345;
        }
      }
      v145 = v565;
      if (v565 != v567) {
        goto LABEL_685;
      }
      return;
    case 0x59:
      sub_1CCB24814(a1, (uint64_t)*(a2 - 4), (unint64_t)a2);
      uint64_t v133 = 0;
      uint64_t v134 = **a2;
      v565 = v567;
      uint64_t v566 = 0x200000000;
      uint64_t v570 = v134;
      v571 = &v579;
      v572 = v580;
      uint64_t v573 = 0;
      int v574 = 0;
      __int16 v575 = 512;
      char v576 = 7;
      uint64_t v577 = 0;
      uint64_t v578 = 0;
      v579 = &unk_1F2616E88;
      v580[0] = &unk_1F2617008;
      uint64_t v135 = (unsigned __int8 *)a2[6];
      v568 = a2[5];
      v569 = a2 + 3;
      v561 = (const char *)v135;
      if (v135)
      {
        llvm::MetadataTracking::track((uint64_t)&v561, v135, 2);
        uint64_t v133 = (uint64_t)v561;
      }
      sub_1CB8461A4((uint64_t)&v565, 0, v133);
      if (!v561) {
        goto LABEL_135;
      }
      int v385 = *(unsigned __int8 *)v561;
      if ((v385 - 4) > 0x1E)
      {
        if ((v385 - 3) >= 0xFFFFFFFE) {
          v479 = v561;
        }
        else {
          v479 = 0;
        }
        if ((v385 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v387 = (unint64_t)(v479 + 8);
LABEL_638:
          v555[0] = (const char *)&v561;
          sub_1CC5FA668(v387 + 16, v555);
          goto LABEL_135;
        }
        if (v385 == 3) {
          *((void *)v561 + 1) = 0;
        }
      }
      else if ((v561[1] & 0x7F) == 2 || *((_DWORD *)v561 + 3))
      {
        uint64_t v386 = *((void *)v561 + 2);
        if ((v386 & 4) != 0)
        {
          unint64_t v387 = v386 & 0xFFFFFFFFFFFFFFF8;
          if (v387) {
            goto LABEL_638;
          }
        }
      }
LABEL_135:
      int v136 = *((_DWORD *)a2 + 5);
      if ((v136 & 0x40000000) != 0) {
        v137 = *(a2 - 1);
      }
      else {
        v137 = (uint64_t *)&a2[-4 * (v136 & 0x7FFFFFF)];
      }
      v264 = (unsigned __int8 *)sub_1CCB16AB0(a1, *v137);
      v265 = (unsigned __int8 *)*(a2 - 4);
      v555[0] = "_msprop";
      __int16 v556 = 259;
      v266 = sub_1CB8445F4((uint64_t)&v565, v264, v265, (uint64_t)v555);
LABEL_246:
      v268 = v266;
      uint64_t v269 = a1;
      v270 = (uint64_t *)a2;
LABEL_320:
      sub_1CCB24DAC(v269, v270, v268);
      int v318 = *((_DWORD *)a2 + 5);
      if ((v318 & 0x40000000) != 0) {
        v319 = *(a2 - 1);
      }
      else {
        v319 = (uint64_t *)&a2[-4 * (v318 & 0x7FFFFFF)];
      }
      v160 = sub_1CCB176E8(a1, *v319, v317);
LABEL_324:
      if (*(_DWORD *)(*(void *)(a1 + 8) + 4)) {
        *sub_1CD694530(a1 + 368, (uint64_t)a2) = (unint64_t)v160;
      }
      goto LABEL_326;
    case 0x5A:
      sub_1CCB24814(a1, (uint64_t)*(a2 - 4), (unint64_t)a2);
      uint64_t v114 = 0;
      uint64_t v115 = **a2;
      v565 = v567;
      uint64_t v566 = 0x200000000;
      uint64_t v570 = v115;
      v571 = &v579;
      v572 = v580;
      uint64_t v573 = 0;
      int v574 = 0;
      __int16 v575 = 512;
      char v576 = 7;
      uint64_t v577 = 0;
      uint64_t v578 = 0;
      v579 = &unk_1F2616E88;
      v580[0] = &unk_1F2617008;
      unsigned int v116 = (unsigned __int8 *)a2[6];
      v568 = a2[5];
      v569 = a2 + 3;
      v561 = (const char *)v116;
      if (v116)
      {
        llvm::MetadataTracking::track((uint64_t)&v561, v116, 2);
        uint64_t v114 = (uint64_t)v561;
      }
      sub_1CB8461A4((uint64_t)&v565, 0, v114);
      if (!v561) {
        goto LABEL_125;
      }
      int v379 = *(unsigned __int8 *)v561;
      if ((v379 - 4) > 0x1E)
      {
        if ((v379 - 3) >= 0xFFFFFFFE) {
          v477 = v561;
        }
        else {
          v477 = 0;
        }
        if ((v379 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v381 = (unint64_t)(v477 + 8);
LABEL_626:
          v555[0] = (const char *)&v561;
          sub_1CC5FA668(v381 + 16, v555);
          goto LABEL_125;
        }
        if (v379 == 3) {
          *((void *)v561 + 1) = 0;
        }
      }
      else if ((v561[1] & 0x7F) == 2 || *((_DWORD *)v561 + 3))
      {
        uint64_t v380 = *((void *)v561 + 2);
        if ((v380 & 4) != 0)
        {
          unint64_t v381 = v380 & 0xFFFFFFFFFFFFFFF8;
          if (v381) {
            goto LABEL_626;
          }
        }
      }
LABEL_125:
      int v117 = *((_DWORD *)a2 + 5);
      if ((v117 & 0x40000000) != 0) {
        __int16 v118 = *(a2 - 1);
      }
      else {
        __int16 v118 = (uint64_t *)&a2[-4 * (v117 & 0x7FFFFFF)];
      }
      v248 = (unsigned __int8 *)sub_1CCB16AB0(a1, *v118);
      int v249 = *((_DWORD *)a2 + 5);
      if ((v249 & 0x40000000) != 0) {
        v250 = (uint64_t **)*(a2 - 1);
      }
      else {
        v250 = &a2[-4 * (v249 & 0x7FFFFFF)];
      }
      v251 = (unsigned __int8 *)sub_1CCB16AB0(a1, (uint64_t)v250[4]);
      v252 = (unsigned __int8 *)*(a2 - 4);
      v555[0] = "_msprop";
      __int16 v556 = 259;
      uint64_t v34 = sub_1CB84478C((uint64_t)&v565, v248, v251, v252, (uint64_t)v555);
      goto LABEL_230;
    case 0x5B:
      uint64_t v89 = 0;
      uint64_t v90 = **a2;
      v565 = v567;
      uint64_t v566 = 0x200000000;
      uint64_t v570 = v90;
      v571 = &v579;
      v572 = v580;
      uint64_t v573 = 0;
      int v574 = 0;
      __int16 v575 = 512;
      char v576 = 7;
      uint64_t v577 = 0;
      uint64_t v578 = 0;
      v579 = &unk_1F2616E88;
      v580[0] = &unk_1F2617008;
      v568 = v4;
      v569 = a2 + 3;
      uint64_t v91 = (unsigned __int8 *)a2[6];
      v561 = (const char *)v91;
      if (v91)
      {
        llvm::MetadataTracking::track((uint64_t)&v561, v91, 2);
        uint64_t v89 = (uint64_t)v561;
      }
      sub_1CB8461A4((uint64_t)&v565, 0, v89);
      if (!v561) {
        goto LABEL_101;
      }
      int v373 = *(unsigned __int8 *)v561;
      if ((v373 - 4) > 0x1E)
      {
        if ((v373 - 3) >= 0xFFFFFFFE) {
          v475 = v561;
        }
        else {
          v475 = 0;
        }
        if ((v373 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v375 = (unint64_t)(v475 + 8);
LABEL_614:
          v555[0] = (const char *)&v561;
          sub_1CC5FA668(v375 + 16, v555);
          goto LABEL_101;
        }
        if (v373 == 3) {
          *((void *)v561 + 1) = 0;
        }
      }
      else if ((v561[1] & 0x7F) == 2 || *((_DWORD *)v561 + 3))
      {
        uint64_t v374 = *((void *)v561 + 2);
        if ((v374 & 4) != 0)
        {
          unint64_t v375 = v374 & 0xFFFFFFFFFFFFFFF8;
          if (v375) {
            goto LABEL_614;
          }
        }
      }
LABEL_101:
      int v92 = *((_DWORD *)a2 + 5);
      if ((v92 & 0x40000000) != 0) {
        unint64_t v93 = *(a2 - 1);
      }
      else {
        unint64_t v93 = (uint64_t *)&a2[-4 * (v92 & 0x7FFFFFF)];
      }
      v242 = sub_1CCB16AB0(a1, *v93);
      int v243 = *((_DWORD *)a2 + 5);
      if ((v243 & 0x40000000) != 0) {
        v244 = (uint64_t **)*(a2 - 1);
      }
      else {
        v244 = &a2[-4 * (v243 & 0x7FFFFFF)];
      }
      v245 = sub_1CCB16AB0(a1, (uint64_t)v244[4]);
      v246 = a2[8];
      v247 = (llvm::Type *)*((unsigned int *)a2 + 18);
      v555[0] = "_msprop";
      __int16 v556 = 259;
      uint64_t v34 = sub_1CB935A74((uint64_t)&v565, (uint64_t)v242, (uint64_t)v245, v246, v247, (uint64_t)v555);
      goto LABEL_230;
    case 0x5C:
      uint64_t v138 = 0;
      uint64_t v139 = **a2;
      v565 = v567;
      uint64_t v566 = 0x200000000;
      uint64_t v570 = v139;
      v571 = &v579;
      v572 = v580;
      uint64_t v573 = 0;
      int v574 = 0;
      __int16 v575 = 512;
      char v576 = 7;
      uint64_t v577 = 0;
      uint64_t v578 = 0;
      v579 = &unk_1F2616E88;
      v580[0] = &unk_1F2617008;
      v568 = v4;
      v569 = a2 + 3;
      v140 = (unsigned __int8 *)a2[6];
      v561 = (const char *)v140;
      if (v140)
      {
        llvm::MetadataTracking::track((uint64_t)&v561, v140, 2);
        uint64_t v138 = (uint64_t)v561;
      }
      sub_1CB8461A4((uint64_t)&v565, 0, v138);
      if (!v561) {
        goto LABEL_140;
      }
      int v388 = *(unsigned __int8 *)v561;
      if ((v388 - 4) > 0x1E)
      {
        if ((v388 - 3) >= 0xFFFFFFFE) {
          v480 = v561;
        }
        else {
          v480 = 0;
        }
        if ((v388 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v390 = (unint64_t)(v480 + 8);
LABEL_644:
          v555[0] = (const char *)&v561;
          sub_1CC5FA668(v390 + 16, v555);
          goto LABEL_140;
        }
        if (v388 == 3) {
          *((void *)v561 + 1) = 0;
        }
      }
      else if ((v561[1] & 0x7F) == 2 || *((_DWORD *)v561 + 3))
      {
        uint64_t v389 = *((void *)v561 + 2);
        if ((v389 & 4) != 0)
        {
          unint64_t v390 = v389 & 0xFFFFFFFFFFFFFFF8;
          if (v390) {
            goto LABEL_644;
          }
        }
      }
LABEL_140:
      v141 = (uint64_t *)sub_1CCB16AB0(a1, (uint64_t)*(a2 - 4));
      v142 = (unsigned int *)a2[8];
      uint64_t v143 = *((unsigned int *)a2 + 18);
      __int16 v556 = 257;
      v144 = sub_1CC2415A4((uint64_t)&v565, v141, v142, v143, (uint64_t)v555);
      sub_1CCB24DAC(a1, (uint64_t *)a2, v144);
      sub_1CCB28C0C((void *)a1, (uint64_t)a2);
      v145 = v565;
      if (v565 == v567) {
        return;
      }
      goto LABEL_685;
    case 0x5D:
      uint64_t v27 = 0;
      uint64_t v28 = **a2;
      v565 = v567;
      uint64_t v566 = 0x200000000;
      uint64_t v570 = v28;
      v571 = &v579;
      v572 = v580;
      uint64_t v573 = 0;
      int v574 = 0;
      __int16 v575 = 512;
      char v576 = 7;
      uint64_t v577 = 0;
      uint64_t v578 = 0;
      v579 = &unk_1F2616E88;
      v580[0] = &unk_1F2617008;
      v568 = v4;
      v569 = a2 + 3;
      uint64_t v29 = (unsigned __int8 *)a2[6];
      v561 = (const char *)v29;
      if (v29)
      {
        llvm::MetadataTracking::track((uint64_t)&v561, v29, 2);
        uint64_t v27 = (uint64_t)v561;
      }
      sub_1CB8461A4((uint64_t)&v565, 0, v27);
      if (!v561) {
        goto LABEL_50;
      }
      int v364 = *(unsigned __int8 *)v561;
      if ((v364 - 4) > 0x1E)
      {
        if ((v364 - 3) >= 0xFFFFFFFE) {
          v472 = v561;
        }
        else {
          v472 = 0;
        }
        if ((v364 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v366 = (unint64_t)(v472 + 8);
LABEL_596:
          v555[0] = (const char *)&v561;
          sub_1CC5FA668(v366 + 16, v555);
          goto LABEL_50;
        }
        if (v364 == 3) {
          *((void *)v561 + 1) = 0;
        }
      }
      else if ((v561[1] & 0x7F) == 2 || *((_DWORD *)v561 + 3))
      {
        uint64_t v365 = *((void *)v561 + 2);
        if ((v365 & 4) != 0)
        {
          unint64_t v366 = v365 & 0xFFFFFFFFFFFFFFF8;
          if (v366) {
            goto LABEL_596;
          }
        }
      }
LABEL_50:
      uint64_t v30 = sub_1CCB16AB0(a1, (uint64_t)*(a2 - 8));
      int v31 = sub_1CCB16AB0(a1, (uint64_t)*(a2 - 4));
      __int16 v32 = a2[8];
      uint64_t v33 = *((unsigned int *)a2 + 18);
      __int16 v556 = 257;
      uint64_t v34 = sub_1CC2411F8((uint64_t)&v565, (uint64_t)v30, (uint64_t)v31, v32, v33, (uint64_t)v555);
LABEL_230:
      sub_1CCB24DAC(a1, (uint64_t *)a2, v34);
      sub_1CCB28C0C((void *)a1, (uint64_t)a2);
      goto LABEL_326;
    default:
      uint64_t v94 = 0;
      uint64_t v95 = **a2;
      v565 = v567;
      uint64_t v566 = 0x200000000;
      uint64_t v570 = v95;
      v571 = &v579;
      v572 = v580;
      uint64_t v573 = 0;
      int v574 = 0;
      __int16 v575 = 512;
      char v576 = 7;
      uint64_t v577 = 0;
      uint64_t v578 = 0;
      v579 = &unk_1F2616E88;
      v580[0] = &unk_1F2617008;
      v568 = v4;
      v569 = a2 + 3;
      unint64_t v96 = (unsigned __int8 *)a2[6];
      v561 = (const char *)v96;
      if (v96)
      {
        llvm::MetadataTracking::track((uint64_t)&v561, v96, 2);
        uint64_t v94 = (uint64_t)v561;
      }
      sub_1CB8461A4((uint64_t)&v565, 0, v94);
      if (!v561) {
        goto LABEL_106;
      }
      int v376 = *(unsigned __int8 *)v561;
      if ((v376 - 4) > 0x1E)
      {
        if ((v376 - 3) >= 0xFFFFFFFE) {
          v476 = v561;
        }
        else {
          v476 = 0;
        }
        if ((v376 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v378 = (unint64_t)(v476 + 8);
LABEL_620:
          v555[0] = (const char *)&v561;
          sub_1CC5FA668(v378 + 16, v555);
          goto LABEL_106;
        }
        if (v376 == 3) {
          *((void *)v561 + 1) = 0;
        }
      }
      else if ((v561[1] & 0x7F) == 2 || *((_DWORD *)v561 + 3))
      {
        uint64_t v377 = *((void *)v561 + 2);
        if ((v377 & 4) != 0)
        {
          unint64_t v378 = v377 & 0xFFFFFFFFFFFFFFF8;
          if (v378) {
            goto LABEL_620;
          }
        }
      }
LABEL_106:
      uint64_t v97 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
      if (!v97) {
        goto LABEL_515;
      }
      unsigned int v98 = (uint64_t *)&a2[-4 * v97];
      uint64_t v99 = *v98;
      if (!*v98) {
        goto LABEL_515;
      }
      int v100 = *(unsigned __int8 *)(v99 + 16);
      uint64_t v101 = *v98;
      if (v100 == 77)
      {
        uint64_t v101 = *(void *)(v99 - 32);
        int v100 = *(unsigned __int8 *)(v101 + 16);
      }
      if (v100 == 84 && (*(_WORD *)(v101 + 18) & 3) == 2) {
        goto LABEL_515;
      }
      unint64_t v102 = sub_1CCB247B0((void *)a1, *(void *)v99, (uint64_t)&v565);
      uint64_t v103 = *(uint64_t ****)a1;
      uint64_t v104 = *(void *)(*(void *)a1 + 112);
      if (v104 && *(_DWORD *)(v104 + 8) >= 2u && (uint64_t v490 = *(void *)(v104 + 48)) != 0)
      {
        uint64_t v105 = a1 + 8;
        if (*(unsigned char *)(*(void *)(a1 + 8) + 9) && (*(unsigned char *)(v490 + 16) & 0x10) != 0)
        {
          sub_1CCB16AB0(a1, v99);
          char v409 = 1;
          goto LABEL_690;
        }
      }
      else
      {
        uint64_t v105 = a1 + 8;
      }
      if ((*((unsigned char *)v103 + 23) & 0x10) == 0) {
        goto LABEL_495;
      }
      uint64_t v106 = ***v103;
      uint64_t v107 = *(void *)(v106 + 152);
      uint64_t v108 = *(unsigned int *)(v106 + 168);
      if (!v108) {
        goto LABEL_491;
      }
      LODWORD(v109) = (v108 - 1) & ((v103 >> 4) ^ (v103 >> 9));
      __int16 v110 = (uint64_t ****)(v107 + 16 * v109);
      unsigned int v111 = *v110;
      if (*v110 != v103)
      {
        int v112 = 1;
        while (v111 != (uint64_t ***)-4096)
        {
          int v113 = v109 + v112++;
          uint64_t v109 = v113 & (v108 - 1);
          unsigned int v111 = *(uint64_t ****)(v107 + 16 * v109);
          if (v111 == v103)
          {
            __int16 v110 = (uint64_t ****)(v107 + 16 * v109);
            goto LABEL_492;
          }
        }
LABEL_491:
        __int16 v110 = (uint64_t ****)(v107 + 16 * v108);
      }
LABEL_492:
      v406 = v110[1];
      if (*v406 == (uint64_t **)4)
      {
        int v407 = *((_DWORD *)v406 + 4);
        v408 = sub_1CCB16AB0(a1, v99);
        char v409 = 0;
        if (v407 != 1852399981)
        {
          v410 = v408;
          goto LABEL_496;
        }
LABEL_690:
        sub_1CCB24814(a1, v99, (unint64_t)a2);
        sub_1CCB17A70((void *)a1, *(void *)v99);
        if (v491) {
          v410 = llvm::Constant::getNullValue(v491, v492, v493);
        }
        else {
          v410 = 0;
        }
        if (v409) {
          goto LABEL_515;
        }
        char v409 = 1;
LABEL_496:
        char v411 = HIBYTE(word_1EBCE87F0);
        v412 = (char *)operator new(0x80uLL);
        *((_DWORD *)v412 + 21) = *((_DWORD *)v412 + 21) & 0x38000000 | 2;
        *(void *)v412 = 0;
        *((void *)v412 + 2) = 0;
        *((void *)v412 + 1) = 0;
        *((void *)v412 + 5) = 0;
        *((void *)v412 + 6) = 0;
        *((void *)v412 + 4) = 0;
        v413 = (llvm::Instruction **)(v412 + 32);
        *((void *)v412 + 8) = ***(void ***)v410 + 1576;
        v414 = (llvm::Instruction *)(v412 + 64);
        *((void *)v412 + 3) = v412 + 64;
        *((void *)v412 + 7) = v412 + 64;
        *((void *)v412 + 9) = 0;
        v412[80] = 61;
        v412[81] = 0;
        *((_WORD *)v412 + 41) = 0;
        *((_DWORD *)v412 + 21) = 2;
        *(_OWORD *)(v412 + 88) = 0u;
        *(_OWORD *)(v412 + 104) = 0u;
        *((_DWORD *)v412 + 30) = 0;
        *(void *)v412 = v410;
        uint64_t v417 = *((void *)v410 + 1);
        v416 = (void *)((char *)v410 + 8);
        uint64_t v415 = v417;
        *((void *)v412 + 1) = v417;
        if (v417) {
          *(void *)(v415 + 16) = v412 + 8;
        }
        *((void *)v412 + 2) = v416;
        void *v416 = v412;
        if (*((void *)v412 + 4))
        {
          **((void **)v412 + 6) = *((void *)v412 + 5);
          uint64_t v546 = *((void *)v412 + 5);
          if (v546) {
            *(void *)(v546 + 16) = *((void *)v412 + 6);
          }
        }
        *v413 = v102;
        if (v102)
        {
          uint64_t v420 = *((void *)v102 + 1);
          v419 = (llvm::Instruction ***)((char *)v102 + 8);
          uint64_t v418 = v420;
          *((void *)v412 + 5) = v420;
          if (v420) {
            *(void *)(v418 + 16) = v412 + 40;
          }
          *((void *)v412 + 6) = v419;
          *v419 = v413;
        }
        *((_WORD *)v412 + 41) = 2 * (v411 & 0x3F);
        v412[124] = 1;
        __int16 v556 = 257;
        (*(void (**)(void *, llvm::Instruction *, const char **, uint64_t *, void **))(*v572 + 16))(v572, v414, v555, v568, v569);
        if (v566)
        {
          v507 = (llvm::MDNode **)v565;
          v508 = (llvm::MDNode **)((char *)v565 + 16 * v566);
          do
          {
            llvm::Instruction::setMetadata(v414, *(_DWORD *)v507, v507[1]);
            v507 += 2;
          }
          while (v507 != v508);
        }
        if (*(_DWORD *)(*(void *)v105 + 4)) {
          char v422 = v409;
        }
        else {
          char v422 = 1;
        }
        if ((v422 & 1) == 0)
        {
          v423 = sub_1CCB176E8(a1, v99, v421);
          uint64_t v424 = *(void *)(*(void *)(a1 + 8) + 64);
          char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v568[7] + 40) + 272), *(llvm::Type **)v423, 1);
          v426 = (char *)operator new(0x80uLL);
          *((_DWORD *)v426 + 21) = *((_DWORD *)v426 + 21) & 0x38000000 | 2;
          *(void *)v426 = 0;
          *((void *)v426 + 2) = 0;
          *((void *)v426 + 1) = 0;
          *((void *)v426 + 5) = 0;
          *((void *)v426 + 6) = 0;
          *((void *)v426 + 4) = 0;
          *((void *)v426 + 8) = ***(void ***)v423 + 1576;
          v427 = (llvm::Instruction *)(v426 + 64);
          *((void *)v426 + 3) = v426 + 64;
          *((void *)v426 + 7) = v426 + 64;
          *((void *)v426 + 9) = 0;
          v426[80] = 61;
          v426[81] = 0;
          *((_DWORD *)v426 + 21) = 2;
          *(_OWORD *)(v426 + 88) = 0u;
          *(_OWORD *)(v426 + 104) = 0u;
          *((_DWORD *)v426 + 30) = 0;
          v428 = (void *)((char *)v423 + 8);
          uint64_t v429 = *((void *)v423 + 1);
          *(void *)v426 = v423;
          *((void *)v426 + 1) = v429;
          if (v429) {
            *(void *)(v429 + 16) = v426 + 8;
          }
          *((void *)v426 + 2) = v428;
          void *v428 = v426;
          *((void *)v426 + 4) = v424;
          if (v424)
          {
            uint64_t v432 = *(void *)(v424 + 8);
            v431 = (void *)(v424 + 8);
            uint64_t v430 = v432;
            *((void *)v426 + 5) = v432;
            if (v432) {
              *(void *)(v430 + 16) = v426 + 40;
            }
            *((void *)v426 + 6) = v431;
            void *v431 = v426 + 32;
          }
          *((_WORD *)v426 + 41) = 2 * (Alignment & 0x3F);
          v426[124] = 1;
          __int16 v556 = 257;
          (*(void (**)(void *, llvm::Instruction *, const char **, uint64_t *, void **))(*v572 + 16))(v572, v427, v555, v568, v569);
          if (v566)
          {
            v509 = (llvm::MDNode **)v565;
            v510 = (llvm::MDNode **)((char *)v565 + 16 * v566);
            do
            {
              llvm::Instruction::setMetadata(v427, *(_DWORD *)v509, v509[1]);
              v509 += 2;
            }
            while (v509 != v510);
          }
        }
LABEL_515:
        v145 = v565;
        if (v565 == v567) {
          return;
        }
LABEL_685:
        free(v145);
        return;
      }
LABEL_495:
      v410 = sub_1CCB16AB0(a1, v99);
      char v409 = 0;
      goto LABEL_496;
  }
}

llvm::Instruction *sub_1CCB247B0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(llvm::CastInst **)(a1[1] + 56);
  sub_1CCB17A70(a1, a2);
  int v6 = (llvm::Value *)llvm::PointerType::get(v5, 0);
  uint64_t v9 = "_msret";
  __int16 v10 = 259;
  return sub_1CC277FE0(a3, v4, v6, (uint64_t)&v9, v7);
}

double sub_1CCB24814(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v6 = byte_1EBCE9180;
  uint64_t v7 = sub_1CCB16AB0(a1, a2);
  unint64_t v10 = (unint64_t)v7;
  if (v6)
  {
    if (!v7) {
      return result;
    }
    uint64_t v11 = sub_1CCB176E8(a1, a2, v8);
  }
  else
  {
    if (!v7 || *((unsigned __int8 *)v7 + 16) < 0x1Cu) {
      return result;
    }
    int v12 = sub_1CCB176E8(a1, a2, v8);
    if (v12)
    {
      if (*((unsigned __int8 *)v12 + 16) <= 0x1Bu) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = v12;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
  }

  *(void *)&double result = sub_1CCB248DC(a1, v10, (unint64_t)v11, a3).n128_u64[0];
  return result;
}

__n128 sub_1CCB248DC(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (*(unsigned char *)(a1 + 456))
  {
    v9.n128_u64[0] = a2;
    v9.n128_u64[1] = a3;
    unint64_t v10 = a4;
    unsigned int v4 = *(_DWORD *)(a1 + 472);
    unint64_t v5 = *(void *)(a1 + 464);
    if (v4 >= *(_DWORD *)(a1 + 476))
    {
      BOOL v8 = v5 + 24 * v4 > (unint64_t)&v9;
      if (v5 <= (unint64_t)&v9 && v8) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v6 = (__n128 *)(v5 + 24 * *(unsigned int *)(a1 + 472));
    __n128 result = v9;
    v6[1].n128_u64[0] = v10;
    *int v6 = result;
    ++*(_DWORD *)(a1 + 472);
  }
  return result;
}

void *sub_1CCB249B0(llvm *a1, unint64_t a2)
{
  if (!byte_1EBCE8F40) {
    goto LABEL_2;
  }
  int v19 = *(unsigned __int8 *)(a2 + 16);
  int v20 = (llvm::raw_ostream *)llvm::errs(a1);
  unint64_t v21 = v20;
  uint64_t v22 = *((void *)v20 + 4);
  unint64_t v23 = *((void *)v20 + 3) - v22;
  if (v19 != 84)
  {
    if (v23 > 3)
    {
      *(_DWORD *)uint64_t v22 = 542792282;
      uint64_t v34 = (unsigned char *)(*((void *)v20 + 4) + 4);
      *((void *)v20 + 4) = v34;
    }
    else
    {
      llvm::raw_ostream::write(v20, "ZZZ ", 4uLL);
      uint64_t v34 = (unsigned char *)*((void *)v21 + 4);
    }
    OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)(*(unsigned __int8 *)(a2 + 16) - 28));
    uint64_t v36 = (unsigned char *)strlen(OpcodeName);
    uint64_t v37 = v36;
    if ((unint64_t)v36 <= *((void *)v21 + 3) - (void)v34)
    {
      if (v36)
      {
        uint64_t v36 = memcpy(v34, OpcodeName, (size_t)v36);
        uint64_t v34 = &v37[*((void *)v21 + 4)];
        *((void *)v21 + 4) = v34;
      }
    }
    else
    {
      uint64_t v36 = llvm::raw_ostream::write(v21, OpcodeName, (size_t)v36);
      uint64_t v34 = (unsigned char *)*((void *)v21 + 4);
    }
    if (*((unsigned char **)v21 + 3) == v34) {
      goto LABEL_53;
    }
    *uint64_t v34 = 10;
LABEL_65:
    ++*((void *)v21 + 4);
    goto LABEL_54;
  }
  if (v23 > 8)
  {
    *(unsigned char *)(v22 + 8) = 32;
    *(void *)uint64_t v22 = *(void *)"ZZZ call ";
    *((void *)v20 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v20, "ZZZ call ", 9uLL);
  }
  unsigned int v24 = *(uint64_t ****)(a2 - 32);
  if (!v24 || *((unsigned char *)v24 + 16) || v24[3] != *(uint64_t ***)(a2 + 72)) {
    unsigned int v24 = 0;
  }
  if ((*((unsigned char *)v24 + 23) & 0x10) == 0) {
    goto LABEL_49;
  }
  uint64_t v25 = ***v24;
  uint64_t v26 = *(void *)(v25 + 152);
  uint64_t v27 = *(unsigned int *)(v25 + 168);
  if (v27)
  {
    LODWORD(v28) = (v27 - 1) & ((v24 >> 4) ^ (v24 >> 9));
    uint64_t v29 = (uint64_t ****)(v26 + 16 * v28);
    uint64_t v30 = *v29;
    if (*v29 == v24) {
      goto LABEL_47;
    }
    int v31 = 1;
    while (v30 != (uint64_t ***)-4096)
    {
      int v32 = v28 + v31++;
      uint64_t v28 = v32 & (v27 - 1);
      uint64_t v30 = *(uint64_t ****)(v26 + 16 * v28);
      if (v30 == v24)
      {
        uint64_t v29 = (uint64_t ****)(v26 + 16 * v28);
        goto LABEL_47;
      }
    }
  }
  uint64_t v29 = (uint64_t ****)(v26 + 16 * v27);
LABEL_47:
  int v38 = v29[1];
  size_t v41 = (size_t)*v38;
  uint64_t v39 = (const char *)(v38 + 2);
  size_t v40 = v41;
  uint64_t v36 = (unsigned char *)*((void *)v21 + 4);
  if (v41 > *((void *)v21 + 3) - (void)v36)
  {
    llvm::raw_ostream::write(v21, v39, v40);
LABEL_49:
    uint64_t v36 = (unsigned char *)*((void *)v21 + 4);
    goto LABEL_52;
  }
  if (v40)
  {
    memcpy(v36, v39, v40);
    uint64_t v36 = (unsigned char *)(*((void *)v21 + 4) + v40);
    *((void *)v21 + 4) = v36;
  }
LABEL_52:
  if (*((unsigned char **)v21 + 3) != v36)
  {
    *uint64_t v36 = 10;
    goto LABEL_65;
  }
LABEL_53:
  uint64_t v36 = llvm::raw_ostream::write(v21, "\n", 1uLL);
LABEL_54:
  uint64_t v42 = (llvm::raw_ostream *)llvm::errs((llvm *)v36);
  __int16 v43 = v42;
  __int16 v44 = (_DWORD *)*((void *)v42 + 4);
  if (*((void *)v42 + 3) - (void)v44 > 3uLL)
  {
    _DWORD *v44 = 542200145;
    *((void *)v42 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v42, "QQQ ", 4uLL);
  }
  llvm::Value::print((llvm::Value *)a2, v43, 0);
  BOOL v45 = (unsigned char *)*((void *)v43 + 4);
  if (*((unsigned char **)v43 + 3) == v45)
  {
    llvm::raw_ostream::write(v43, "\n", 1uLL);
  }
  else
  {
    *BOOL v45 = 10;
    ++*((void *)v43 + 4);
  }
LABEL_2:
  uint64_t v4 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 32 * v4;
    while (1)
    {
      int v7 = *(_DWORD *)(a2 + 20);
      if ((v7 & 0x40000000) != 0) {
        unint64_t v8 = *(void *)(a2 - 8);
      }
      else {
        unint64_t v8 = a2 - 32 * (v7 & 0x7FFFFFF);
      }
      __n128 v9 = *(uint64_t **)(v8 + v5);
      unsigned int v10 = *(unsigned __int8 *)(*v9 + 8);
      if (v10 > 0x11) {
        goto LABEL_13;
      }
      if (((1 << v10) & 0xAC7F) == 0) {
        break;
      }
LABEL_9:
      sub_1CCB24814((uint64_t)a1, (uint64_t)v9, a2);
LABEL_10:
      v5 += 32;
      if (v6 == v5) {
        goto LABEL_20;
      }
    }
    if (((1 << v10) & 0x30000) == 0)
    {
LABEL_13:
      if ((v10 & 0xFE) != 0x12 && v10 != 21) {
        goto LABEL_10;
      }
    }
    if (!llvm::Type::isSizedDerivedType(*v9, 0)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_20:
  sub_1CCB17A70(a1, *(void *)a2);
  if (v12) {
    NullValue = llvm::Constant::getNullValue(v12, v13, v14);
  }
  else {
    NullValue = 0;
  }
  sub_1CCB24DAC((uint64_t)a1, (uint64_t *)a2, NullValue);
  __n128 result = llvm::Constant::getNullValue(*(llvm::Constant **)(*((void *)a1 + 1) + 32), v16, v17);
  if (*(_DWORD *)(*((void *)a1 + 1) + 4))
  {
    uint64_t v33 = result;
    __n128 result = sub_1CD694530((uint64_t)a1 + 368, a2);
    *__n128 result = v33;
  }
  return result;
}

unint64_t *sub_1CCB24DAC(uint64_t a1, uint64_t *a2, llvm::Value *NullValue)
{
  if (!*(unsigned char *)(a1 + 457))
  {
    sub_1CCB17A70((void *)a1, *a2);
    if (v6) {
      NullValue = llvm::Constant::getNullValue(v6, v7, v8);
    }
    else {
      NullValue = 0;
    }
  }
  __n128 result = sub_1CD694530(a1 + 304, (uint64_t)a2);
  *__n128 result = (unint64_t)NullValue;
  return result;
}

void sub_1CCB24E14(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = (void *)a1;
  uint64_t v409 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)*(a2 - 4) + 16) != 24)
  {
    int v355 = 0;
    BOOL v4 = sub_1CC0A4DF4(*(uint64_t **)(a1 + 440), (uint64_t)a2, &v355);
    if (!v4) {
      goto LABEL_46;
    }
    if (v355 != 70)
    {
      if (v355 == 69)
      {
        if (*((unsigned char *)a2 + 16) == 84)
        {
          uint64_t v5 = 0;
          uint64_t v6 = **a2;
          *(void *)&long long v391 = &v392;
          *((void *)&v391 + 1) = 0x200000000;
          uint64_t v396 = v6;
          int v397 = &v405;
          uint64_t v398 = v406;
          uint64_t v399 = 0;
          int v400 = 0;
          __int16 v401 = 512;
          char v402 = 7;
          uint64_t v403 = 0;
          uint64_t v404 = 0;
          unint64_t v405 = &unk_1F2616E88;
          v406[0] = &unk_1F2617008;
          int v7 = a2[6];
          int v394 = a2[5];
          uint64_t v395 = a2 + 3;
          int v358 = v7;
          if (v7)
          {
            llvm::MetadataTracking::track((uint64_t)&v358, (unsigned __int8 *)v7, 2);
            uint64_t v5 = v358;
          }
          sub_1CB8461A4((uint64_t)&v391, 0, (uint64_t)v5);
          if (!v358)
          {
LABEL_14:
            unint64_t v8 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
            __n128 v9 = *v8;
            unsigned int v10 = (llvm::CastInst *)v8[4];
            uint64_t v11 = (llvm::CastInst *)v8[8];
            int v12 = (unsigned __int8 *)v8[12];
            long long v375 = xmmword_1CFB280B0;
            v376[0] = 0x500000004;
            llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(void *)v396 + 1960), (llvm::Type *)6);
            Impl = (unsigned __int8 *)llvm::ConstantDataSequential::getImpl(&v375, (llvm::Type *)0x18, v13);
            __int16 v377 = 257;
            unsigned int v15 = sub_1CB8445F4((uint64_t)&v391, Impl, v12, (uint64_t)&v375);
            unint64_t v16 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
            uint64_t v17 = (llvm::Instruction **)(v16 + 12);
            if (v16[12])
            {
              *v16[14] = (uint64_t)v16[13];
              uint64_t v18 = v16[13];
              if (v18) {
                v18[2] = (uint64_t)v16[14];
              }
            }
            *uint64_t v17 = v15;
            if (v15)
            {
              unint64_t v21 = (void *)*((void *)v15 + 1);
              int v19 = (llvm::Instruction ***)((char *)v15 + 8);
              int v20 = v21;
              v16[13] = v21;
              if (v21) {
                v20[2] = v16 + 13;
              }
              v16[14] = (uint64_t *)v19;
              *int v19 = v17;
            }
            uint64_t v22 = 0;
            unint64_t v23 = a2[4];
            if (v23) {
              BOOL v24 = v23 == a2[5] + 5;
            }
            else {
              BOOL v24 = 1;
            }
            if (v24) {
              uint64_t v25 = 0;
            }
            else {
              uint64_t v25 = (uint64_t **)(v23 - 3);
            }
            uint64_t v26 = **v25;
            *(void *)&long long v375 = v376;
            *((void *)&v375 + 1) = 0x200000000;
            uint64_t v380 = v26;
            unint64_t v381 = &v389;
            int v382 = v390;
            uint64_t v383 = 0;
            int v384 = 0;
            __int16 v385 = 512;
            char v386 = 7;
            uint64_t v387 = 0;
            uint64_t v388 = 0;
            uint64_t v389 = &unk_1F2616E88;
            v390[0] = &unk_1F2617008;
            unint64_t v378 = v25[5];
            int v379 = v25 + 3;
            uint64_t v27 = (char *)v25[6];
            v407[0] = v27;
            if (v27)
            {
              llvm::MetadataTracking::track((uint64_t)v407, (unsigned __int8 *)v27, 2);
              uint64_t v22 = v407[0];
            }
            sub_1CB8461A4((uint64_t)&v375, 0, (uint64_t)v22);
            if (!v407[0])
            {
LABEL_30:
              uint64_t v28 = (unsigned __int8 *)a2[6];
              v356[0] = v28;
              if (v28)
              {
                llvm::MetadataTracking::track((uint64_t)v356, v28, 2);
                uint64_t v29 = v356[0];
              }
              else
              {
                uint64_t v29 = 0;
              }
              sub_1CB8461A4((uint64_t)&v375, 0, v29);
              if (!v356[0]) {
                goto LABEL_285;
              }
              int v243 = *(unsigned __int8 *)v356[0];
              if ((v243 - 4) > 0x1E)
              {
                if ((v243 - 3) >= 0xFFFFFFFE) {
                  uint64_t v268 = v356[0];
                }
                else {
                  uint64_t v268 = 0;
                }
                if ((v243 - 3) < 0xFFFFFFFE)
                {
                  if (v243 == 3) {
                    *(void *)(v356[0] + 8) = 0;
                  }
                  goto LABEL_285;
                }
                unint64_t v269 = v268 + 8;
              }
              else
              {
                if ((*(unsigned char *)(v356[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v356[0] + 12)) {
                  goto LABEL_285;
                }
                uint64_t v343 = *(void *)(v356[0] + 16);
                if ((v343 & 4) == 0) {
                  goto LABEL_285;
                }
                unint64_t v269 = v343 & 0xFFFFFFFFFFFFFFF8;
                if (!v269) {
                  goto LABEL_285;
                }
              }
              int v358 = v356;
              sub_1CC5FA668(v269 + 16, &v358);
LABEL_285:
              v244 = sub_1CCB163B4((void *)a1, v10, (uint64_t)&v375, (llvm::PointerType *)(*(void *)v380 + 1912), (llvm::Instruction *)0x100, 0);
              uint64_t v246 = v245;
              v247 = sub_1CCB163B4((void *)a1, v11, (uint64_t)&v375, (llvm::PointerType *)(*(void *)v380 + 1912), (llvm::Instruction *)0x100, 1);
              llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v375, 194, (llvm::Value *)v247, 256, (llvm::Value *)v244, 256, v9, 0, 0, 0, 0, 0);
              uint64_t v248 = *(void *)(a1 + 8);
              if (*(_DWORD *)(v248 + 4))
              {
                uint64_t v249 = *(void *)(v248 + 32);
                char v250 = word_1EBCE87F0;
                __int16 v408 = 257;
                v251 = operator new(0x60uLL);
                v251[13] = v251[13] & 0x38000000 | 1;
                v252 = (llvm::Instruction *)(v251 + 8);
                *(void *)v251 = 0;
                *((void *)v251 + 1) = 0;
                *((void *)v251 + 2) = 0;
                *((void *)v251 + 3) = v251 + 8;
                __int16 v361 = 257;
                llvm::LoadInst::LoadInst((llvm::Value *)(v251 + 8), v249, v246, (const char **)&v358, 0, v250, 0);
                (*(void (**)(void *, llvm::Instruction *, const char **, uint64_t *, void **))(*v382 + 16))(v382, v252, v407, v378, v379);
                if (DWORD2(v375))
                {
                  uint64_t v334 = v375;
                  uint64_t v335 = v375 + 16 * DWORD2(v375);
                  do
                  {
                    llvm::Instruction::setMetadata(v252, *(_DWORD *)v334, *(llvm::MDNode **)(v334 + 8));
                    v334 += 16;
                  }
                  while (v334 != v335);
                }
                v253 = (const char *)sub_1CCB2731C(*(void *)(a1 + 8), (uint64_t)v252, (uint64_t *)&v375);
                uint64_t v254 = *(void *)(a1 + 8);
                v255 = *(uint64_t ***)(v254 + 296);
                uint64_t v256 = *(uint64_t ***)(v254 + 304);
                v407[0] = (const char *)v11;
                v407[1] = (const char *)v9;
                v407[2] = v253;
                __int16 v361 = 257;
                sub_1CB845BAC((uint64_t *)&v375, v255, v256, (uint64_t *)v407, 3, (uint64_t)&v358, 0);
              }
              if ((void *)v375 != v376) {
                free((void *)v375);
              }
              v221 = (void *)v391;
              goto LABEL_291;
            }
            int v331 = *v407[0];
            if ((v331 - 4) > 0x1E)
            {
              if ((v331 - 3) >= 0xFFFFFFFE) {
                v341 = v407[0];
              }
              else {
                v341 = 0;
              }
              if ((v331 - 3) < 0xFFFFFFFE)
              {
                if (v331 == 3) {
                  *((void *)v407[0] + 1) = 0;
                }
                goto LABEL_30;
              }
              unint64_t v333 = (unint64_t)(v341 + 8);
            }
            else
            {
              if ((v407[0][1] & 0x7F) != 2 && !*((_DWORD *)v407[0] + 3)) {
                goto LABEL_30;
              }
              uint64_t v332 = *((void *)v407[0] + 2);
              if ((v332 & 4) == 0) {
                goto LABEL_30;
              }
              unint64_t v333 = v332 & 0xFFFFFFFFFFFFFFF8;
              if (!v333) {
                goto LABEL_30;
              }
            }
            int v358 = v407;
            sub_1CC5FA668(v333 + 16, &v358);
            goto LABEL_30;
          }
          int v328 = *(unsigned __int8 *)v358;
          if ((v328 - 4) > 0x1E)
          {
            if ((v328 - 3) >= 0xFFFFFFFE) {
              v340 = v358;
            }
            else {
              v340 = 0;
            }
            if ((v328 - 3) < 0xFFFFFFFE)
            {
              if (v328 == 3) {
                *((void *)v358 + 1) = 0;
              }
              goto LABEL_14;
            }
            unint64_t v330 = (unint64_t)v340 + 8;
          }
          else
          {
            if ((*((unsigned char *)v358 + 1) & 0x7F) != 2 && !*((_DWORD *)v358 + 3)) {
              goto LABEL_14;
            }
            uint64_t v329 = *((void *)v358 + 2);
            if ((v329 & 4) == 0) {
              goto LABEL_14;
            }
            unint64_t v330 = v329 & 0xFFFFFFFFFFFFFFF8;
            if (!v330) {
              goto LABEL_14;
            }
          }
          *(void *)&long long v375 = &v358;
          sub_1CC5FA668(v330 + 16, &v375);
          goto LABEL_14;
        }
        int v51 = (llvm::raw_ostream *)llvm::errs((llvm *)v4);
        int v52 = (void *)*((void *)v51 + 4);
        if (*((void *)v51 + 3) - (void)v52 > 0x3CuLL)
        {
          qmemcpy(v52, "MSAN -- cannot instrument invoke of libatomic load.Ignoring!\n", 61);
          *((void *)v51 + 4) += 61;
        }
        else
        {
          llvm::raw_ostream::write(v51, "MSAN -- cannot instrument invoke of libatomic load.Ignoring!\n", 0x3DuLL);
        }
      }
LABEL_46:
      if (*((unsigned char *)a2 + 16) == 84)
      {
        uint64_t v226 = 0;
        v393[0] = 0;
        v393[1] = 0;
        uint64_t v392 = v393;
        long long v391 = xmmword_1CFB28090;
        v227 = (uint64_t *)**a2;
        uint64_t v228 = a2[8];
        if (v228)
        {
          if (*((_DWORD *)v228 + 2)) {
            uint64_t v226 = v228[5];
          }
          else {
            uint64_t v226 = 0;
          }
        }
        *(void *)&long long v375 = v226;
        uint64_t v229 = llvm::AttributeSet::removeAttributes((uint64_t *)&v375, v227, (uint64_t)&v391);
        if (v226 == v229) {
          uint64_t v230 = (uint64_t)a2[8];
        }
        else {
          uint64_t v230 = llvm::AttributeList::setAttributesAtIndex(a2 + 8, v227, -1, v229);
        }
        uint64_t v3 = (void *)a1;
        a2[8] = (uint64_t *)v230;
        uint64_t v231 = (uint64_t)*(a2 - 4);
        if (v231 && !*(unsigned char *)(v231 + 16) && *(uint64_t **)(v231 + 24) == a2[9]) {
          llvm::Function::removeFnAttrs(v231, (uint64_t)&v391);
        }
        llvm::maybeMarkSanitizerLibraryCallNoBuiltin((uint64_t)a2, *(void **)(a1 + 440));
        sub_1CC1E4850((uint64_t)&v392, v393[0]);
      }
      unint64_t v53 = 0;
      uint64_t v54 = **a2;
      *(void *)&long long v391 = &v392;
      *((void *)&v391 + 1) = 0x200000000;
      uint64_t v396 = v54;
      int v397 = &v405;
      uint64_t v398 = v406;
      uint64_t v399 = 0;
      int v400 = 0;
      __int16 v401 = 512;
      char v402 = 7;
      uint64_t v403 = 0;
      uint64_t v404 = 0;
      unint64_t v405 = &unk_1F2616E88;
      v406[0] = &unk_1F2617008;
      __int16 v55 = a2[6];
      int v394 = a2[5];
      uint64_t v395 = a2 + 3;
      int v358 = v55;
      if (v55)
      {
        llvm::MetadataTracking::track((uint64_t)&v358, (unsigned __int8 *)v55, 2);
        unint64_t v53 = v358;
      }
      sub_1CB8461A4((uint64_t)&v391, 0, (uint64_t)v53);
      if (!v358)
      {
LABEL_50:
        int v56 = *(unsigned __int8 *)(v3[1] + 9);
        __int16 v57 = (uint64_t ***)*(a2 - 4);
        if (!v57 || *((unsigned char *)v57 + 16) || v57[3] != (uint64_t **)a2[9])
        {
          int v58 = v56 != 0;
          goto LABEL_54;
        }
        if ((*((unsigned char *)v57 + 23) & 0x10) == 0) {
          goto LABEL_369;
        }
        uint64_t v213 = ***v57;
        uint64_t v214 = *(void *)(v213 + 152);
        uint64_t v215 = *(unsigned int *)(v213 + 168);
        if (v215)
        {
          LODWORD(v216) = (v215 - 1) & ((v57 >> 4) ^ (v57 >> 9));
          v217 = (uint64_t ****)(v214 + 16 * v216);
          uint64_t v218 = *v217;
          if (*v217 == v57) {
            goto LABEL_368;
          }
          int v219 = 1;
          while (v218 != (uint64_t ***)-4096)
          {
            int v220 = v216 + v219++;
            uint64_t v216 = v220 & (v215 - 1);
            uint64_t v218 = *(uint64_t ****)(v214 + 16 * v216);
            if (v218 == v57)
            {
              v217 = (uint64_t ****)(v214 + 16 * v216);
              goto LABEL_368;
            }
          }
        }
        v217 = (uint64_t ****)(v214 + 16 * v215);
LABEL_368:
        v313 = v217[1];
        if ((unint64_t)*v313 >= 0x16)
        {
          v315 = v313[2];
          uint64_t v316 = v313[3];
          uint64_t v317 = *(uint64_t *)((char *)v313 + 30);
          BOOL v314 = v315 == (uint64_t **)0x6974696E61735F5FLL
              && v316 == (uint64_t **)0x6C616E755F72657ALL
              && v317 == 0x5F64656E67696C61;
LABEL_379:
          BOOL v24 = v56 == 0;
          int v58 = !v314;
          if (v24) {
            int v58 = 0;
          }
LABEL_54:
          int v353 = v58;
          int v59 = *((_DWORD *)a2 + 5);
          uint64_t v60 = &a2[-4 * (v59 & 0x7FFFFFF)];
          int v61 = *((unsigned __int8 *)a2 + 16);
          if (v61 == 84)
          {
            uint64_t v62 = 0;
            if ((v59 & 0x80000000) == 0)
            {
LABEL_56:
              uint64_t v63 = 0;
LABEL_57:
              uint64_t v354 = (uint64_t)&(&a2[-4 * v62])[-4 * v63 - 4];
              if (v60 != (uint64_t **)v354)
              {
                int v64 = 0;
                do
                {
                  int v65 = *v60;
                  int v66 = *((_DWORD *)a2 + 5);
                  uint64_t v67 = **v60;
                  unsigned int v68 = *(unsigned __int8 *)(v67 + 8);
                  if (v68 > 0x11) {
                    goto LABEL_105;
                  }
                  if (((1 << v68) & 0xAC7F) != 0) {
                    goto LABEL_61;
                  }
                  if (((1 << v68) & 0x30000) == 0)
                  {
LABEL_105:
                    if ((v68 & 0xFE) != 0x12 && v68 != 21) {
                      goto LABEL_100;
                    }
                  }
                  if (!llvm::Type::isSizedDerivedType(v67, 0)) {
                    goto LABEL_100;
                  }
LABEL_61:
                  unint64_t v69 = (unint64_t)((char *)v60 - (char *)&a2[-4 * (v66 & 0x7FFFFFF)]) >> 5;
                  char v70 = (llvm::DataLayout *)(*(void *)(*v3 + 40) + 272);
                  int HasAttr = llvm::CallBase::paramHasAttr((uint64_t)a2, v69, 69);
                  int v72 = llvm::CallBase::paramHasAttr((uint64_t)a2, v69, 36);
                  if ((v353 & (HasAttr ^ 1)) != 1 || v72 == 0)
                  {
                    __int16 v74 = sub_1CCB16AB0((uint64_t)v3, (uint64_t)v65);
                    uint64_t v76 = sub_1CCB17D74(v3, v65, (uint64_t)&v391, v64, v75);
                    if (HasAttr)
                    {
                      uint64_t v120 = (llvm::Type *)sub_1CD49471C((uint64_t)a2, v69);
                      uint64_t v348 = sub_1CB83544C((uint64_t)v70, (uint64_t)v120);
                      BOOL v122 = v121 == 1;
                      char Alignment = llvm::DataLayout::getAlignment(v70, v120, 1);
                      if (v122) {
                      unint64_t v83 = ((1 << Alignment) + ((unint64_t)(v348 + 7) >> 3) - 1) & -(1 << Alignment);
                      }
                      if ((v64 + v83) > 0x320) {
                        break;
                      }
                      char v125 = a2[8];
                      if (v125)
                      {
                        if ((v69 + 2) < *((_DWORD *)v125 + 2))
                        {
                          uint64_t v126 = (llvm::AttributeSetNode *)v125[(v69 + 2) + 5];
                          if (v126)
                          {
                            LOWORD(v126) = llvm::AttributeSetNode::getAlignment(v126);
                            LODWORD(v125) = BYTE1(v126);
                          }
                          else
                          {
                            LODWORD(v125) = 0;
                          }
                          goto LABEL_132;
                        }
                        LODWORD(v125) = 0;
                      }
                      LOBYTE(v126) = 0;
LABEL_132:
                      if (HIBYTE(word_1EBCE87F0) >= v126) {
                        uint64_t v129 = v126;
                      }
                      else {
                        uint64_t v129 = HIBYTE(word_1EBCE87F0);
                      }
                      uint64_t v130 = v129 | 0x100;
                      if (v125) {
                        uint64_t v131 = v130;
                      }
                      else {
                        uint64_t v131 = 0;
                      }
                      unint64_t v347 = v131 | v347 & 0xFFFFFFFFFFFF0000;
                      __int16 v132 = sub_1CCB163B4(v3, (llvm::CastInst *)v65, (uint64_t)&v391, (llvm::PointerType *)(*(void *)v396 + 1912), (llvm::Instruction *)v347, 0);
                      if (*((unsigned char *)v3 + 457))
                      {
                        int v346 = v133;
                        uint64_t v135 = *(llvm::ConstantInt **)(*(void *)v396 + 1984);
                        unsigned int v136 = *(_DWORD *)(*(void *)v396 + 1992);
                        DWORD2(v375) = v136 >> 8;
                        v350 = (llvm::Value *)v132;
                        if (v136 >> 8 > 0x40) {
                          operator new[]();
                        }
                        if (v136 <= 0xFF) {
                          LODWORD(v137) = 0;
                        }
                        else {
                          unint64_t v137 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v136) + 63);
                        }
                        *(void *)&long long v375 = v137 & v83;
                        uint64_t v138 = llvm::ConstantInt::get(v135, (llvm::LLVMContext *)&v375, v134);
                        if (DWORD2(v375) >= 0x41 && (void)v375) {
                          MEMORY[0x1D25D9CB0](v375, 0x1000C8000313F17);
                        }
                        llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v391, 194, v76, v131, v350, v131, v138, 0, 0, 0, 0, 0);
                        if (*(_DWORD *)(v3[1] + 4))
                        {
                          v142 = sub_1CCB17F94((uint64_t)v3, (uint64_t)&v391, v64, v139, v140);
                          __int16 v143 = word_1EBCE87F0;
                          v144 = *(llvm::ConstantInt **)(*(void *)v396 + 1984);
                          unsigned int v145 = *(_DWORD *)(*(void *)v396 + 1992);
                          DWORD2(v375) = v145 >> 8;
                          if (v145 >> 8 > 0x40) {
                            operator new[]();
                          }
                          if (v145 <= 0xFF) {
                            LODWORD(v146) = 0;
                          }
                          else {
                            unint64_t v146 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v145) + 63);
                          }
                          *(void *)&long long v375 = v146 & -(int)(1 << word_1EBCE87F0) & (v83
                                                                                                 + (1 << word_1EBCE87F0)
                                                                                                 - 1);
                          v147 = llvm::ConstantInt::get(v144, (llvm::LLVMContext *)&v375, v141);
                          if (DWORD2(v375) >= 0x41 && (void)v375) {
                            MEMORY[0x1D25D9CB0](v375, 0x1000C8000313F17);
                          }
                          llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v391, 194, v142, v143 | 0x100, v346, v143 | 0x100, v147, 0, 0, 0, 0, 0);
                        }
                      }
                      else
                      {
                        NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(void *)v396 + 1912), v133, v134);
                        v149 = *(llvm::ConstantInt **)(*(void *)v396 + 1984);
                        unsigned int v150 = *(_DWORD *)(*(void *)v396 + 1992);
                        DWORD2(v375) = v150 >> 8;
                        if (v150 >> 8 > 0x40) {
                          operator new[]();
                        }
                        if (v150 <= 0xFF) {
                          LODWORD(v151) = 0;
                        }
                        else {
                          unint64_t v151 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v150) + 63);
                        }
                        *(void *)&long long v375 = v151 & v83;
                        v152 = llvm::ConstantInt::get(v149, (llvm::LLVMContext *)&v375, v148);
                        if (DWORD2(v375) >= 0x41 && (void)v375) {
                          MEMORY[0x1D25D9CB0](v375, 0x1000C8000313F17);
                        }
                        llvm::IRBuilderBase::CreateMemSet((uint64_t)&v391, v76, (uint64_t)NullValue, v152, v131, 0, 0, 0, 0);
                      }
                      goto LABEL_99;
                    }
                    uint64_t v77 = (llvm::Type *)*v65;
                    uint64_t v78 = sub_1CB83544C((uint64_t)v70, *v65);
                    BOOL v80 = v79 == 1;
                    char v82 = llvm::DataLayout::getAlignment(v70, v77, 1);
                    if (v80) {
                    unint64_t v83 = ((1 << v82) + ((unint64_t)(v78 + 7) >> 3) - 1) & -(1 << v82);
                    }
                    uint64_t v3 = (void *)a1;
                    if ((v64 + v83) > 0x320) {
                      break;
                    }
                    char v84 = HIBYTE(word_1EBCE87F0);
                    uint64_t v85 = (char *)operator new(0x80uLL);
                    *((_DWORD *)v85 + 21) = *((_DWORD *)v85 + 21) & 0x38000000 | 2;
                    *(void *)uint64_t v85 = 0;
                    *((void *)v85 + 2) = 0;
                    *((void *)v85 + 1) = 0;
                    *((void *)v85 + 5) = 0;
                    *((void *)v85 + 6) = 0;
                    *((void *)v85 + 4) = 0;
                    int v86 = (llvm::Instruction **)(v85 + 32);
                    *((void *)v85 + 8) = ***(void ***)v74 + 1576;
                    __int16 v87 = (llvm::Instruction *)(v85 + 64);
                    *((void *)v85 + 3) = v85 + 64;
                    *((void *)v85 + 7) = v85 + 64;
                    *((void *)v85 + 9) = 0;
                    v85[80] = 61;
                    v85[81] = 0;
                    *((_WORD *)v85 + 41) = 0;
                    *((_DWORD *)v85 + 21) = 2;
                    *(_OWORD *)(v85 + 88) = 0u;
                    *(_OWORD *)(v85 + 104) = 0u;
                    *((_DWORD *)v85 + 30) = 0;
                    *(void *)uint64_t v85 = v74;
                    uint64_t v88 = (void *)((char *)v74 + 8);
                    uint64_t v89 = *((void *)v74 + 1);
                    *((void *)v85 + 1) = v89;
                    if (v89) {
                      *(void *)(v89 + 16) = v85 + 8;
                    }
                    *((void *)v85 + 2) = v88;
                    *uint64_t v88 = v85;
                    if (*((void *)v85 + 4))
                    {
                      **((void **)v85 + 6) = *((void *)v85 + 5);
                      uint64_t v158 = *((void *)v85 + 5);
                      if (v158) {
                        *(void *)(v158 + 16) = *((void *)v85 + 6);
                      }
                    }
                    llvm::Value *v86 = v76;
                    if (v76)
                    {
                      uint64_t v92 = *((void *)v76 + 1);
                      uint64_t v91 = (llvm::Instruction ***)((char *)v76 + 8);
                      uint64_t v90 = v92;
                      *((void *)v85 + 5) = v92;
                      if (v92) {
                        *(void *)(v90 + 16) = v85 + 40;
                      }
                      *((void *)v85 + 6) = v91;
                      unsigned __int8 *v91 = v86;
                    }
                    *((_WORD *)v85 + 41) = 2 * (v84 & 0x3F);
                    v85[124] = 1;
                    __int16 v377 = 257;
                    (*(void (**)(void *, llvm::Instruction *, long long *, uint64_t *, void **))(*v398 + 16))(v398, v87, &v375, v394, v395);
                    if (DWORD2(v391))
                    {
                      uint64_t v128 = v391;
                      *(void *)unsigned int v349 = v391 + 16 * DWORD2(v391);
                      do
                      {
                        llvm::Instruction::setMetadata(v87, *(_DWORD *)v128, *(llvm::MDNode **)(v128 + 8));
                        v128 += 16;
                      }
                      while (v128 != *(void *)v349);
                    }
                    if (*((unsigned __int8 *)v74 + 16) >= 0x15u) {
                      uint64_t v94 = 0;
                    }
                    else {
                      uint64_t v94 = (uint64_t)v74;
                    }
                    if (!*(_DWORD *)(*(void *)(a1 + 8) + 4)) {
                      goto LABEL_99;
                    }
                    if (!v94) {
                      goto LABEL_86;
                    }
                    int v95 = *(unsigned __int8 *)(v94 + 16);
                    if (v95 == 16)
                    {
                      uint64_t v96 = *(unsigned int *)(v94 + 32);
                      if (v96 >= 0x41)
                      {
                        int v153 = 0;
                        int64_t v154 = (unint64_t)(v96 + 63) >> 6;
                        do
                        {
                          BOOL v155 = v154-- < 1;
                          if (v155) {
                            break;
                          }
                          unint64_t v156 = *(void *)(*(void *)(v94 + 24) + 8 * v154);
                          v153 += __clz(v156);
                        }
                        while (!v156);
                        int v157 = v96 | 0xFFFFFFC0;
                        if ((v96 & 0x3F) == 0) {
                          int v157 = 0;
                        }
                        if (v153 + v157 == v96) {
                          goto LABEL_99;
                        }
LABEL_86:
                        uint64_t v97 = sub_1CCB176E8(a1, (uint64_t)v65, v93);
                        int v100 = sub_1CCB17F94(a1, (uint64_t)&v391, v64, v98, v99);
                        char v101 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v394[7] + 40) + 272), *(llvm::Type **)v97, 1);
                        unint64_t v102 = (char *)operator new(0x80uLL);
                        *((_DWORD *)v102 + 21) = *((_DWORD *)v102 + 21) & 0x38000000 | 2;
                        *(void *)unint64_t v102 = 0;
                        *((void *)v102 + 2) = 0;
                        *((void *)v102 + 1) = 0;
                        *((void *)v102 + 5) = 0;
                        *((void *)v102 + 6) = 0;
                        *((void *)v102 + 4) = 0;
                        uint64_t v103 = (llvm::Instruction **)(v102 + 32);
                        *((void *)v102 + 8) = ***(void ***)v97 + 1576;
                        uint64_t v104 = (llvm::Instruction *)(v102 + 64);
                        *((void *)v102 + 3) = v102 + 64;
                        *((void *)v102 + 7) = v102 + 64;
                        *((void *)v102 + 9) = 0;
                        v102[80] = 61;
                        v102[81] = 0;
                        *((_WORD *)v102 + 41) = 0;
                        *((_DWORD *)v102 + 21) = 2;
                        *(_OWORD *)(v102 + 88) = 0u;
                        *(_OWORD *)(v102 + 104) = 0u;
                        *((_DWORD *)v102 + 30) = 0;
                        *(void *)unint64_t v102 = v97;
                        uint64_t v107 = *((void *)v97 + 1);
                        uint64_t v106 = (void *)((char *)v97 + 8);
                        uint64_t v105 = v107;
                        *((void *)v102 + 1) = v107;
                        if (v107) {
                          *(void *)(v105 + 16) = v102 + 8;
                        }
                        *((void *)v102 + 2) = v106;
                        *uint64_t v106 = v102;
                        if (*((void *)v102 + 4))
                        {
                          **((void **)v102 + 6) = *((void *)v102 + 5);
                          uint64_t v159 = *((void *)v102 + 5);
                          if (v159) {
                            *(void *)(v159 + 16) = *((void *)v102 + 6);
                          }
                        }
                        llvm::Constant *v103 = v100;
                        if (v100)
                        {
                          uint64_t v110 = *((void *)v100 + 1);
                          uint64_t v109 = (llvm::Instruction ***)((char *)v100 + 8);
                          uint64_t v108 = v110;
                          *((void *)v102 + 5) = v110;
                          if (v110) {
                            *(void *)(v108 + 16) = v102 + 40;
                          }
                          *((void *)v102 + 6) = v109;
                          llvm::ConstantInt *v109 = v103;
                        }
                        *((_WORD *)v102 + 41) = 2 * (v101 & 0x3F);
                        v102[124] = 1;
                        __int16 v377 = 257;
                        (*(void (**)(void *, llvm::Instruction *, long long *, uint64_t *, void **))(*v398 + 16))(v398, v104, &v375, v394, v395);
                        if (DWORD2(v391))
                        {
                          uint64_t v111 = v391;
                          uint64_t v112 = v391 + 16 * DWORD2(v391);
                          do
                          {
                            llvm::Instruction::setMetadata(v104, *(_DWORD *)v111, *(llvm::MDNode **)(v111 + 8));
                            v111 += 16;
                          }
                          while (v111 != v112);
                        }
                        goto LABEL_99;
                      }
                      if (*(void *)(v94 + 24)) {
                        goto LABEL_86;
                      }
                    }
                    else if (v95 == 17)
                    {
                      if ((sub_1CB844168(v94, 0.0) & 1) == 0) {
                        goto LABEL_86;
                      }
                    }
                    else if ((v95 - 18) >= 3 && v95 != 13)
                    {
                      goto LABEL_86;
                    }
                  }
                  else
                  {
                    sub_1CCB24814((uint64_t)v3, (uint64_t)v65, (unint64_t)a2);
                    int v113 = (llvm::Type *)*v65;
                    unint64_t v114 = (unint64_t)(sub_1CB83544C((uint64_t)v70, *v65) + 7) >> 3;
                    BOOL v116 = v115 == 1;
                    char v117 = llvm::DataLayout::getAlignment(v70, v113, 1);
                    unint64_t v83 = ((1 << v117) + v114 - 1) & -(1 << v117);
                    if (v116) {
                  }
                    }
LABEL_99:
                  v64 += (v83 + (1 << SHIBYTE(word_1EBCE87F0)) - 1) & -(int)(1 << SHIBYTE(word_1EBCE87F0));
LABEL_100:
                  v60 += 4;
                }
                while (v60 != (uint64_t **)v354);
              }
              if (*((_DWORD *)a2[9] + 2) >= 0x100u) {
                (*(void (**)(void, uint64_t **, long long *))(*(void *)v3[54] + 16))(v3[54], a2, &v391);
              }
              unsigned int v160 = *((unsigned __int8 *)*a2 + 8);
              if (v160 > 0x11) {
                goto LABEL_248;
              }
              if (((1 << v160) & 0xAC7F) != 0) {
                goto LABEL_182;
              }
              if (((1 << v160) & 0x30000) == 0)
              {
LABEL_248:
                if ((v160 & 0xFE) != 0x12 && v160 != 21) {
                  goto LABEL_256;
                }
              }
              if (!llvm::Type::isSizedDerivedType((uint64_t)*a2, 0)) {
                goto LABEL_256;
              }
LABEL_182:
              if (*((unsigned char *)a2 + 16) == 84 && (*((_WORD *)a2 + 9) & 3) == 2) {
                goto LABEL_256;
              }
              if (v353)
              {
                int v161 = sub_1CBF5BCC4((uint64_t)a2, 36);
                uint64_t v162 = *a2;
                if (v161)
                {
                  sub_1CCB17A70(v3, (uint64_t)v162);
                  if (v163) {
                    uint64_t v166 = llvm::Constant::getNullValue(v163, v164, v165);
                  }
                  else {
                    uint64_t v166 = 0;
                  }
                  sub_1CCB24DAC((uint64_t)v3, (uint64_t *)a2, v166);
                  int v225 = llvm::Constant::getNullValue(*(llvm::Constant **)(v3[1] + 32), v223, v224);
                  if (*(_DWORD *)(v3[1] + 4)) {
                    *sub_1CD694530((uint64_t)(v3 + 46), (uint64_t)a2) = (unint64_t)v225;
                  }
                  goto LABEL_256;
                }
              }
              else
              {
                uint64_t v162 = *a2;
              }
              uint64_t v167 = 0;
              uint64_t v168 = *v162;
              *(void *)&long long v375 = v376;
              *((void *)&v375 + 1) = 0x200000000;
              uint64_t v380 = v168;
              unint64_t v381 = &v389;
              int v382 = v390;
              uint64_t v383 = 0;
              int v384 = 0;
              __int16 v385 = 512;
              char v386 = 7;
              uint64_t v387 = 0;
              uint64_t v388 = 0;
              uint64_t v389 = &unk_1F2616E88;
              v390[0] = &unk_1F2617008;
              v169 = (char *)a2[6];
              unint64_t v378 = a2[5];
              int v379 = a2 + 3;
              v407[0] = v169;
              if (v169)
              {
                llvm::MetadataTracking::track((uint64_t)v407, (unsigned __int8 *)v169, 2);
                uint64_t v167 = v407[0];
              }
              sub_1CB8461A4((uint64_t)&v375, 0, (uint64_t)v167);
              if (!v407[0])
              {
LABEL_192:
                int v170 = sub_1CCB247B0((void *)a1, (uint64_t)*a2, (uint64_t)&v375);
                sub_1CCB17A70((void *)a1, (uint64_t)*a2);
                if (v171) {
                  v174 = llvm::Constant::getNullValue(v171, v172, v173);
                }
                else {
                  v174 = 0;
                }
                char v175 = HIBYTE(word_1EBCE87F0);
                v176 = (char *)operator new(0x80uLL);
                *((_DWORD *)v176 + 21) = *((_DWORD *)v176 + 21) & 0x38000000 | 2;
                *(void *)v176 = 0;
                *((void *)v176 + 2) = 0;
                *((void *)v176 + 1) = 0;
                *((void *)v176 + 5) = 0;
                *((void *)v176 + 6) = 0;
                *((void *)v176 + 4) = 0;
                uint64_t v177 = (llvm::Instruction **)(v176 + 32);
                *((void *)v176 + 8) = ***(void ***)v174 + 1576;
                v178 = (llvm::Instruction *)(v176 + 64);
                *((void *)v176 + 3) = v176 + 64;
                *((void *)v176 + 7) = v176 + 64;
                *((void *)v176 + 9) = 0;
                v176[80] = 61;
                v176[81] = 0;
                *((_WORD *)v176 + 41) = 0;
                *((_DWORD *)v176 + 21) = 2;
                *(_OWORD *)(v176 + 88) = 0u;
                *(_OWORD *)(v176 + 104) = 0u;
                *((_DWORD *)v176 + 30) = 0;
                *(void *)v176 = v174;
                uint64_t v181 = *((void *)v174 + 1);
                BOOL v180 = (void *)((char *)v174 + 8);
                uint64_t v179 = v181;
                *((void *)v176 + 1) = v181;
                if (v181) {
                  *(void *)(v179 + 16) = v176 + 8;
                }
                *((void *)v176 + 2) = v180;
                *BOOL v180 = v176;
                if (*((void *)v176 + 4))
                {
                  **((void **)v176 + 6) = *((void *)v176 + 5);
                  uint64_t v345 = *((void *)v176 + 5);
                  if (v345) {
                    *(void *)(v345 + 16) = *((void *)v176 + 6);
                  }
                }
                *uint64_t v177 = v170;
                if (v170)
                {
                  uint64_t v184 = *((void *)v170 + 1);
                  v183 = (llvm::Instruction ***)((char *)v170 + 8);
                  uint64_t v182 = v184;
                  *((void *)v176 + 5) = v184;
                  if (v184) {
                    *(void *)(v182 + 16) = v176 + 40;
                  }
                  *((void *)v176 + 6) = v183;
                  unsigned __int8 *v183 = v177;
                }
                *((_WORD *)v176 + 41) = 2 * (v175 & 0x3F);
                v176[124] = 1;
                __int16 v361 = 257;
                (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, void **))(*v382 + 16))(v382, v178, &v358, v378, v379);
                if (DWORD2(v375))
                {
                  uint64_t v324 = v375;
                  uint64_t v325 = v375 + 16 * DWORD2(v375);
                  do
                  {
                    llvm::Instruction::setMetadata(v178, *(_DWORD *)v324, *(llvm::MDNode **)(v324 + 8));
                    v324 += 16;
                  }
                  while (v324 != v325);
                }
                if (*((unsigned char *)a2 + 16) == 84)
                {
                  uint64_t v185 = a2 + 4;
LABEL_205:
                  uint64_t v186 = (void *)*v185;
                }
                else
                {
                  v187 = (llvm::BasicBlock *)*(a2 - 12);
                  if (!llvm::BasicBlock::getSinglePredecessor(v187))
                  {
                    sub_1CCB17A70((void *)a1, (uint64_t)*a2);
                    if (v209) {
                      v212 = llvm::Constant::getNullValue(v209, v210, v211);
                    }
                    else {
                      v212 = 0;
                    }
                    sub_1CCB24DAC(a1, (uint64_t *)a2, v212);
                    v259 = llvm::Constant::getNullValue(*(llvm::Constant **)(*(void *)(a1 + 8) + 32), v257, v258);
                    if (*(_DWORD *)(*(void *)(a1 + 8) + 4)) {
                      *sub_1CD694530(a1 + 368, (uint64_t)a2) = (unint64_t)v259;
                    }
                    goto LABEL_235;
                  }
                  uint64_t v186 = (void *)((char *)v187 + 40);
                  for (uint64_t i = (void *)*((void *)v187 + 6); i != v186; uint64_t i = (void *)i[1])
                  {
                    uint64_t v189 = i - 3;
                    if (!i) {
                      uint64_t v189 = 0;
                    }
                    if (*((unsigned char *)v189 + 16) != 83)
                    {
                      unsigned int v190 = *((unsigned __int8 *)i - 8) - 38;
                      BOOL v155 = v190 > 0x38;
                      uint64_t v191 = (1 << v190) & 0x100060000000001;
                      if (!v155 && v191 != 0)
                      {
                        uint64_t v185 = i + 1;
                        goto LABEL_205;
                      }
                      uint64_t v186 = i;
                      break;
                    }
                  }
                }
                uint64_t v193 = 0;
                if (v186) {
                  uint64_t v194 = v186 - 3;
                }
                else {
                  uint64_t v194 = 0;
                }
                uint64_t v195 = *(void *)*v194;
                int v358 = v360;
                uint64_t v359 = 0x200000000;
                uint64_t v364 = v195;
                uint64_t v365 = &v373;
                unint64_t v366 = &v374;
                uint64_t v367 = 0;
                int v368 = 0;
                __int16 v369 = 512;
                char v370 = 7;
                uint64_t v362 = 0;
                unint64_t v363 = 0;
                uint64_t v371 = 0;
                uint64_t v372 = 0;
                int v373 = &unk_1F2616E88;
                uint64_t v374 = &unk_1F2617008;
                uint64_t v362 = v194[5];
                unint64_t v363 = v194 + 3;
                v196 = (unsigned __int8 *)v194[6];
                v356[0] = v196;
                if (v196)
                {
                  llvm::MetadataTracking::track((uint64_t)v356, v196, 2);
                  uint64_t v193 = v356[0];
                }
                sub_1CB8461A4((uint64_t)&v358, 0, v193);
                if (v356[0])
                {
                  int v265 = *(unsigned __int8 *)v356[0];
                  if ((v265 - 4) > 0x1E)
                  {
                    if ((v265 - 3) >= 0xFFFFFFFE) {
                      uint64_t v327 = v356[0];
                    }
                    else {
                      uint64_t v327 = 0;
                    }
                    if ((v265 - 3) < 0xFFFFFFFE)
                    {
                      if (v265 == 3) {
                        *(void *)(v356[0] + 8) = 0;
                      }
                      goto LABEL_228;
                    }
                    unint64_t v267 = v327 + 8;
                  }
                  else
                  {
                    if ((*(unsigned char *)(v356[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v356[0] + 12)) {
                      goto LABEL_228;
                    }
                    uint64_t v266 = *(void *)(v356[0] + 16);
                    if ((v266 & 4) == 0) {
                      goto LABEL_228;
                    }
                    unint64_t v267 = v266 & 0xFFFFFFFFFFFFFFF8;
                    if (!v267) {
                      goto LABEL_228;
                    }
                  }
                  v407[0] = (const char *)v356;
                  sub_1CC5FA668(v267 + 16, v407);
                }
LABEL_228:
                sub_1CCB17A70((void *)a1, (uint64_t)*a2);
                uint64_t v198 = v197;
                v199 = sub_1CCB247B0((void *)a1, (uint64_t)*a2, (uint64_t)&v358);
                char v200 = HIBYTE(word_1EBCE87F0);
                v356[0] = "_msret";
                __int16 v357 = 259;
                v201 = operator new(0x60uLL);
                v201[13] = v201[13] & 0x38000000 | 1;
                v202 = (llvm::Instruction *)(v201 + 8);
                *(void *)v201 = 0;
                *((void *)v201 + 1) = 0;
                *((void *)v201 + 2) = 0;
                *((void *)v201 + 3) = v201 + 8;
                __int16 v408 = 257;
                llvm::LoadInst::LoadInst((llvm::Value *)(v201 + 8), v198, (uint64_t)v199, v407, 0, v200, 0);
                (*((void (**)(void **, llvm::Instruction *, void *, uint64_t, void *))*v366 + 2))(v366, v202, v356, v362, v363);
                if (v359)
                {
                  v260 = (llvm::MDNode **)v358;
                  v261 = (llvm::MDNode **)((char *)v358 + 16 * v359);
                  do
                  {
                    llvm::Instruction::setMetadata(v202, *(_DWORD *)v260, v260[1]);
                    v260 += 2;
                  }
                  while (v260 != v261);
                }
                sub_1CCB24DAC(a1, (uint64_t *)a2, v202);
                uint64_t v203 = *(void *)(a1 + 8);
                if (*(_DWORD *)(v203 + 4))
                {
                  v204 = *(llvm::Type **)(v203 + 32);
                  uint64_t v205 = *(void *)(v203 + 64);
                  __int16 v357 = 257;
                  char v206 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v362 + 56) + 40) + 272), v204, 1);
                  v207 = operator new(0x60uLL);
                  v207[13] = v207[13] & 0x38000000 | 1;
                  v208 = (llvm::Instruction *)(v207 + 8);
                  *(void *)v207 = 0;
                  *((void *)v207 + 1) = 0;
                  *((void *)v207 + 2) = 0;
                  *((void *)v207 + 3) = v207 + 8;
                  __int16 v408 = 257;
                  llvm::LoadInst::LoadInst((llvm::Value *)(v207 + 8), (uint64_t)v204, v205, v407, 0, v206, 0);
                  (*((void (**)(void **, llvm::Instruction *, void *, uint64_t, void *))*v366 + 2))(v366, v208, v356, v362, v363);
                  if (v359)
                  {
                    v270 = (llvm::MDNode **)v358;
                    v271 = (llvm::MDNode **)((char *)v358 + 16 * v359);
                    do
                    {
                      llvm::Instruction::setMetadata(v208, *(_DWORD *)v270, v270[1]);
                      v270 += 2;
                    }
                    while (v270 != v271);
                  }
                  if (*(_DWORD *)(*(void *)(a1 + 8) + 4)) {
                    *sub_1CD694530(a1 + 368, (uint64_t)a2) = (unint64_t)v208;
                  }
                }
                if (v358 != v360) {
                  free(v358);
                }
LABEL_235:
                if ((void *)v375 != v376) {
                  free((void *)v375);
                }
LABEL_256:
                v221 = (void *)v391;
                if ((void ***)v391 == &v392) {
                  return;
                }
                goto LABEL_366;
              }
              int v262 = *v407[0];
              if ((v262 - 4) > 0x1E)
              {
                if ((v262 - 3) >= 0xFFFFFFFE) {
                  uint64_t v326 = v407[0];
                }
                else {
                  uint64_t v326 = 0;
                }
                if ((v262 - 3) < 0xFFFFFFFE)
                {
                  if (v262 == 3) {
                    *((void *)v407[0] + 1) = 0;
                  }
                  goto LABEL_192;
                }
                unint64_t v264 = (unint64_t)(v326 + 8);
              }
              else
              {
                if ((v407[0][1] & 0x7F) != 2 && !*((_DWORD *)v407[0] + 3)) {
                  goto LABEL_192;
                }
                uint64_t v263 = *((void *)v407[0] + 2);
                if ((v263 & 4) == 0) {
                  goto LABEL_192;
                }
                unint64_t v264 = v263 & 0xFFFFFFFFFFFFFFF8;
                if (!v264) {
                  goto LABEL_192;
                }
              }
              int v358 = v407;
              sub_1CC5FA668(v264 + 16, &v358);
              goto LABEL_192;
            }
          }
          else
          {
            if (v61 == 39) {
              uint64_t v62 = (*((_DWORD *)a2 + 20) + 1);
            }
            else {
              uint64_t v62 = 2;
            }
            uint64_t v3 = (void *)a1;
            if ((v59 & 0x80000000) == 0) {
              goto LABEL_56;
            }
          }
          uint64_t v344 = (uint64_t)*(v60 - 1);
          if ((v344 & 0xFFFFFFFF0) != 0) {
            uint64_t v63 = (*((_DWORD *)v60 - 3) - *(_DWORD *)((char *)v60 - v344));
          }
          else {
            uint64_t v63 = 0;
          }
          uint64_t v3 = (void *)a1;
          goto LABEL_57;
        }
LABEL_369:
        BOOL v314 = 0;
        goto LABEL_379;
      }
      int v232 = *(unsigned __int8 *)v358;
      if ((v232 - 4) > 0x1E)
      {
        if ((v232 - 3) >= 0xFFFFFFFE) {
          v320 = v358;
        }
        else {
          v320 = 0;
        }
        if ((v232 - 3) < 0xFFFFFFFE)
        {
          if (v232 == 3) {
            *((void *)v358 + 1) = 0;
          }
          goto LABEL_50;
        }
        unint64_t v234 = (unint64_t)v320 + 8;
      }
      else
      {
        if ((*((unsigned char *)v358 + 1) & 0x7F) != 2 && !*((_DWORD *)v358 + 3)) {
          goto LABEL_50;
        }
        uint64_t v233 = *((void *)v358 + 2);
        if ((v233 & 4) == 0) {
          goto LABEL_50;
        }
        unint64_t v234 = v233 & 0xFFFFFFFFFFFFFFF8;
        if (!v234) {
          goto LABEL_50;
        }
      }
      *(void *)&long long v375 = &v358;
      sub_1CC5FA668(v234 + 16, &v375);
      goto LABEL_50;
    }
    uint64_t v30 = 0;
    uint64_t v31 = **a2;
    *(void *)&long long v391 = &v392;
    *((void *)&v391 + 1) = 0x200000000;
    uint64_t v396 = v31;
    int v397 = &v405;
    uint64_t v398 = v406;
    uint64_t v399 = 0;
    int v400 = 0;
    __int16 v401 = 512;
    char v402 = 7;
    uint64_t v403 = 0;
    uint64_t v404 = 0;
    unint64_t v405 = &unk_1F2616E88;
    v406[0] = &unk_1F2617008;
    int v32 = a2[6];
    int v394 = a2[5];
    uint64_t v395 = a2 + 3;
    int v358 = v32;
    if (v32)
    {
      llvm::MetadataTracking::track((uint64_t)&v358, (unsigned __int8 *)v32, 2);
      uint64_t v30 = v358;
    }
    sub_1CB8461A4((uint64_t)&v391, 0, (uint64_t)v30);
    if (v358)
    {
      int v321 = *(unsigned __int8 *)v358;
      if ((v321 - 4) > 0x1E)
      {
        if ((v321 - 3) >= 0xFFFFFFFE) {
          v336 = v358;
        }
        else {
          v336 = 0;
        }
        if ((v321 - 3) < 0xFFFFFFFE)
        {
          if (v321 == 3) {
            *((void *)v358 + 1) = 0;
          }
          goto LABEL_35;
        }
        unint64_t v323 = (unint64_t)v336 + 8;
      }
      else
      {
        if ((*((unsigned char *)v358 + 1) & 0x7F) != 2 && !*((_DWORD *)v358 + 3)) {
          goto LABEL_35;
        }
        uint64_t v322 = *((void *)v358 + 2);
        if ((v322 & 4) == 0) {
          goto LABEL_35;
        }
        unint64_t v323 = v322 & 0xFFFFFFFFFFFFFFF8;
        if (!v323) {
          goto LABEL_35;
        }
      }
      *(void *)&long long v375 = &v358;
      sub_1CC5FA668(v323 + 16, &v375);
    }
LABEL_35:
    uint64_t v33 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
    uint64_t v34 = *v33;
    uint64_t v35 = (llvm::CastInst *)v33[8];
    uint64_t v36 = (unsigned __int8 *)v33[12];
    long long v375 = xmmword_1CFB280A0;
    v376[0] = 0x500000004;
    llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(void *)v396 + 1960), (llvm::Type *)6);
    int v38 = (unsigned __int8 *)llvm::ConstantDataSequential::getImpl(&v375, (llvm::Type *)0x18, v37);
    __int16 v377 = 257;
    uint64_t v39 = sub_1CB8445F4((uint64_t)&v391, v38, v36, (uint64_t)&v375);
    size_t v40 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
    size_t v41 = (llvm::Instruction **)(v40 + 12);
    if (v40[12])
    {
      *v40[14] = (uint64_t)v40[13];
      uint64_t v42 = v40[13];
      if (v42) {
        v42[2] = (uint64_t)v40[14];
      }
    }
    llvm::Value *v41 = v39;
    if (v39)
    {
      BOOL v45 = (void *)*((void *)v39 + 1);
      __int16 v43 = (llvm::Instruction ***)((char *)v39 + 8);
      __int16 v44 = v45;
      v40[13] = v45;
      if (v45) {
        v44[2] = v40 + 13;
      }
      v40[14] = (uint64_t *)v43;
      *__int16 v43 = v41;
    }
    BOOL v46 = sub_1CCB163B4((void *)a1, v35, (uint64_t)&v391, (llvm::PointerType *)(*(void *)v396 + 1912), (llvm::Instruction *)0x100, 1);
    sub_1CCB17A70((void *)a1, *(void *)v396 + 1912);
    if (v47) {
      uint64_t v50 = llvm::Constant::getNullValue(v47, v48, v49);
    }
    else {
      uint64_t v50 = 0;
    }
    llvm::IRBuilderBase::CreateMemSet((uint64_t)&v391, (llvm::Value *)v46, (uint64_t)v50, v34, 256, 0, 0, 0, 0);
    v221 = (void *)v391;
LABEL_291:
    if (v221 == &v392) {
      return;
    }
    goto LABEL_366;
  }
  if (!byte_1EBCE8DC0 || !**(unsigned char **)(a1 + 8))
  {
    sub_1CCB249B0((llvm *)a1, (unint64_t)a2);
    return;
  }
  v235 = 0;
  uint64_t v236 = *(void *)(*(void *)a1 + 40);
  uint64_t v237 = **a2;
  *(void *)&long long v391 = &v392;
  *((void *)&v391 + 1) = 0x200000000;
  uint64_t v396 = v237;
  int v397 = &v405;
  uint64_t v398 = v406;
  uint64_t v399 = 0;
  int v400 = 0;
  __int16 v401 = 512;
  char v402 = 7;
  uint64_t v403 = 0;
  uint64_t v404 = 0;
  unint64_t v405 = &unk_1F2616E88;
  v406[0] = &unk_1F2617008;
  v239 = a2[5];
  v238 = a2[6];
  int v394 = v239;
  uint64_t v395 = a2 + 3;
  int v358 = v238;
  if (v238)
  {
    llvm::MetadataTracking::track((uint64_t)&v358, (unsigned __int8 *)v238, 2);
    v235 = v358;
  }
  sub_1CB8461A4((uint64_t)&v391, 0, (uint64_t)v235);
  if (v358)
  {
    int v337 = *(unsigned __int8 *)v358;
    if ((v337 - 4) > 0x1E)
    {
      if ((v337 - 3) >= 0xFFFFFFFE) {
        v342 = v358;
      }
      else {
        v342 = 0;
      }
      if ((v337 - 3) < 0xFFFFFFFE)
      {
        if (v337 == 3) {
          *((void *)v358 + 1) = 0;
        }
        goto LABEL_277;
      }
      unint64_t v339 = (unint64_t)v342 + 8;
    }
    else
    {
      if ((*((unsigned char *)v358 + 1) & 0x7F) != 2 && !*((_DWORD *)v358 + 3)) {
        goto LABEL_277;
      }
      uint64_t v338 = *((void *)v358 + 2);
      if ((v338 & 4) == 0) {
        goto LABEL_277;
      }
      unint64_t v339 = v338 & 0xFFFFFFFFFFFFFFF8;
      if (!v339) {
        goto LABEL_277;
      }
    }
    *(void *)&long long v375 = &v358;
    sub_1CC5FA668(v339 + 16, &v375);
  }
LABEL_277:
  uint64_t v240 = (uint64_t)*(a2 - 4);
  int v241 = *((unsigned __int8 *)*a2 + 8);
  if (v241 == 7)
  {
    int v242 = 0;
  }
  else if (v241 == 16)
  {
    int v242 = *((_DWORD *)*a2 + 3);
  }
  else
  {
    int v242 = 1;
  }
  v274 = *(char **)(v240 + 48);
  uint64_t v272 = v240 + 48;
  v273 = v274;
  char v275 = *(unsigned char *)(v272 + 23);
  if (v275 >= 0) {
    v276 = (char *)v272;
  }
  else {
    v276 = v273;
  }
  uint64_t v277 = *(void *)(v272 + 8);
  if (v275 >= 0) {
    uint64_t v278 = v275 & 0x7F;
  }
  else {
    uint64_t v278 = v277;
  }
  llvm::InlineAsm::ParseConstraints(v276, v278, (uint64_t *)&v375);
  uint64_t v280 = *((void *)&v375 + 1);
  uint64_t v279 = v375;
  int v281 = 0;
  if ((void)v375 == *((void *)&v375 + 1))
  {
    v284 = (void *)v375;
    if (!(void)v375) {
      goto LABEL_338;
    }
    goto LABEL_337;
  }
  uint64_t v282 = (int *)v375;
  do
  {
    int v283 = *v282;
    v282 += 20;
    if (v283 == 1) {
      ++v281;
    }
  }
  while (v282 != *((int **)&v375 + 1));
  if ((void)v375)
  {
    do
    {
      int v358 = (void *)(v280 - 32);
      sub_1CC1E4230((void ***)&v358);
      int v358 = (void *)(v280 - 64);
      sub_1CB8338B8((void ***)&v358);
      v280 -= 80;
    }
    while (v280 != v279);
    v284 = (void *)v375;
LABEL_337:
    *((void *)&v375 + 1) = v279;
    operator delete(v284);
  }
LABEL_338:
  uint64_t v285 = (v281 - v242);
  int v286 = (*((_DWORD *)a2 + 5) & 0x7FFFFFF) - 1;
  if ((int)v285 < v286)
  {
    unsigned int v287 = v281 - v242;
    do
    {
      uint64_t v288 = (uint64_t)(&a2[4 * v287])[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
      llvm::AttributeList::getParamElementType((llvm::AttributeList *)(a2 + 8), v287);
      sub_1CCB24814((uint64_t)v3, v288, (unint64_t)a2);
      ++v287;
    }
    while (v286 != v287);
  }
  if ((int)v285 >= 1)
  {
    uint64_t v289 = 0;
    uint64_t v290 = v236 + 272;
    uint64_t v291 = a2;
    do
    {
      uint64_t v292 = (llvm::CastInst *)v291[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
      uint64_t ParamElementType = llvm::AttributeList::getParamElementType((llvm::AttributeList *)(a2 + 8), v289);
      uint64_t v294 = *(void *)v292;
      sub_1CCB24814(a1, (uint64_t)v292, (unint64_t)a2);
      if (*(unsigned char *)(v294 + 8) == 15)
      {
        unsigned int v295 = *(unsigned __int8 *)(ParamElementType + 8);
        if (v295 <= 0x11)
        {
          if (((1 << v295) & 0xAC7F) != 0) {
            goto LABEL_346;
          }
          if (((1 << v295) & 0x30000) != 0) {
            goto LABEL_488;
          }
        }
        if ((v295 & 0xFE) == 0x12 || v295 == 21)
        {
LABEL_488:
          if (llvm::Type::isSizedDerivedType(ParamElementType, 0))
          {
LABEL_346:
            uint64_t v297 = sub_1CB83544C(v290, ParamElementType);
            if (v296 == 1) {
            unsigned int v298 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v396 + 1912), 0);
            }
            __int16 v377 = 257;
            v300 = sub_1CC277FE0((uint64_t)&v391, v292, v298, (uint64_t)&v375, v299);
            v301 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 8) + 24), ((v297 << 29) + 3758096384) >> 32, 0);
            uint64_t v302 = *(void *)(a1 + 8);
            BOOL v303 = *(uint64_t ***)(v302 + 576);
            unsigned int v304 = *(uint64_t ***)(v302 + 584);
            int v358 = v300;
            uint64_t v359 = (uint64_t)v301;
            __int16 v377 = 257;
            sub_1CB845BAC((uint64_t *)&v391, v303, v304, (uint64_t *)&v358, 2, (uint64_t)&v375, 0);
          }
        }
      }
      ++v289;
      v291 += 4;
    }
    while (v285 != v289);
  }
  sub_1CCB17A70((void *)a1, (uint64_t)*a2);
  if (v306) {
    uint64_t v309 = llvm::Constant::getNullValue(v306, v307, v308);
  }
  else {
    uint64_t v309 = 0;
  }
  sub_1CCB24DAC(a1, (uint64_t *)a2, v309);
  v312 = llvm::Constant::getNullValue(*(llvm::Constant **)(*(void *)(a1 + 8) + 32), v310, v311);
  if (*(_DWORD *)(*(void *)(a1 + 8) + 4)) {
    *sub_1CD694530(a1 + 368, (uint64_t)a2) = (unint64_t)v312;
  }
  v221 = (void *)v391;
  if ((void ***)v391 != &v392) {
LABEL_366:
  }
    free(v221);
}

uint64_t sub_1CCB2731C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = a2;
  if (*(int *)(a1 + 4) >= 2)
  {
    uint64_t v3 = *(uint64_t ***)(a1 + 280);
    BOOL v4 = *(uint64_t ***)(a1 + 288);
    v6[16] = 257;
    return sub_1CB845BAC(a3, v3, v4, &v7, 1, (uint64_t)v6, 0);
  }
  return a2;
}

void sub_1CCB27378(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = 0;
  v28[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)*a2;
  v20[1] = (void *)0x200000000;
  v21[6] = v5;
  v21[7] = &v27;
  v21[8] = v28;
  v21[9] = 0;
  int v22 = 0;
  __int16 v23 = 512;
  char v24 = 7;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = &unk_1F2616E88;
  v28[0] = &unk_1F2617008;
  uint64_t v6 = a2 + 3;
  uint64_t v8 = a2[5];
  uint64_t v7 = (unsigned __int8 *)a2[6];
  v21[4] = v8;
  v21[5] = v6;
  int v19 = v7;
  v20[0] = v21;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)&v19, v7, 2);
    uint64_t v4 = (uint64_t)v19;
  }
  sub_1CB8461A4((uint64_t)v20, 0, v4);
  if (v19)
  {
    int v14 = *v19;
    if ((v14 - 4) > 0x1E)
    {
      if ((v14 - 3) >= 0xFFFFFFFE) {
        uint64_t v17 = v19;
      }
      else {
        uint64_t v17 = 0;
      }
      if ((v14 - 3) < 0xFFFFFFFE)
      {
        if (v14 == 3) {
          *((void *)v19 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v16 = (unint64_t)(v17 + 8);
    }
    else
    {
      if ((v19[1] & 0x7F) != 2 && !*((_DWORD *)v19 + 3)) {
        goto LABEL_4;
      }
      uint64_t v15 = *((void *)v19 + 2);
      if ((v15 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFF8;
      if (!v16) {
        goto LABEL_4;
      }
    }
    v18[0] = &v19;
    sub_1CC5FA668(v16 + 16, v18);
  }
LABEL_4:
  v18[0] = 0;
  v18[1] = 0;
  v18[2] = v20;
  v18[3] = a1;
  int v9 = *((_DWORD *)a2 + 5);
  if ((v9 & 0x40000000) != 0)
  {
    uint64_t v11 = (uint64_t *)*(a2 - 1);
    uint64_t v10 = v9 & 0x7FFFFFF;
    if (!v10) {
      goto LABEL_10;
    }
LABEL_8:
    uint64_t v12 = 32 * v10;
    do
    {
      uint64_t v13 = *v11;
      v11 += 4;
      sub_1CCB27574((uint64_t)v18, v13);
      v12 -= 32;
    }
    while (v12);
    goto LABEL_10;
  }
  uint64_t v10 = v9 & 0x7FFFFFF;
  uint64_t v11 = &a2[-4 * v10];
  if (v10) {
    goto LABEL_8;
  }
LABEL_10:
  sub_1CCB275E8((uint64_t)v18, a2);
  if (v20[0] != v21) {
    free(v20[0]);
  }
}

uint64_t sub_1CCB27574(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)sub_1CCB16AB0(*(void *)(a1 + 24), a2);
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(_DWORD *)(*(void *)(v6 + 8) + 4)) {
    uint64_t v7 = sub_1CCB176E8(v6, a2, v4);
  }
  else {
    uint64_t v7 = 0;
  }

  return sub_1CCB27684(a1, v5, (uint64_t)v7);
}

unint64_t *sub_1CCB275E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  uint64_t v6 = *(uint64_t **)a1;
  sub_1CCB17A70(v4, *a2);
  uint64_t v8 = sub_1CCB1F40C(v4, v5, v6, v7, 0);
  *(void *)a1 = v8;
  __n128 result = sub_1CCB24DAC(*(void *)(a1 + 24), a2, v8);
  uint64_t v10 = *(void *)(a1 + 24);
  if (*(_DWORD *)(*(void *)(v10 + 8) + 4))
  {
    unint64_t v11 = *(void *)(a1 + 8);
    __n128 result = sub_1CD694530(v10 + 368, (uint64_t)a2);
    *__n128 result = v11;
  }
  return result;
}

uint64_t sub_1CCB27684(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (llvm::Instruction *)a2;
  if (*(void *)a1)
  {
    uint64_t v6 = (uint64_t *)sub_1CCB1F40C(*(void **)(a1 + 24), *(void *)(a1 + 16), a2, **(void **)a1, 0);
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = *(uint64_t **)a1;
    v27[0] = "_msprop";
    __int16 v28 = 259;
    uint64_t v4 = sub_1CB844AF4(v7, v8, (uint64_t)v6, (uint64_t)v27);
  }
  else
  {
    uint64_t v6 = a2;
  }
  *(void *)a1 = v4;
  uint64_t v9 = *(void *)(a1 + 24);
  if (!*(_DWORD *)(*(void *)(v9 + 8) + 4)) {
    return a1;
  }
  if (!*(void *)(a1 + 8))
  {
    *(void *)(a1 + 8) = a3;
    return a1;
  }
  if (!a3) {
    goto LABEL_11;
  }
  unsigned int v10 = *(unsigned __int8 *)(a3 + 16);
  if (v10 > 0x14) {
    goto LABEL_11;
  }
  if (v10 != 16)
  {
    if (v10 == 17)
    {
      if (sub_1CB844168(a3, 0.0)) {
        return a1;
      }
      uint64_t v9 = *(void *)(a1 + 24);
    }
    else if (v10 - 18 < 3 || v10 == 13)
    {
      return a1;
    }
    goto LABEL_11;
  }
  uint64_t v11 = *(unsigned int *)(a3 + 32);
  if (v11 < 0x41)
  {
    if (!*(void *)(a3 + 24)) {
      return a1;
    }
    goto LABEL_11;
  }
  int v22 = 0;
  int64_t v23 = (unint64_t)(v11 + 63) >> 6;
  do
  {
    if (v23-- < 1) {
      break;
    }
    unint64_t v25 = *(void *)(*(void *)(a3 + 24) + 8 * v23);
    v22 += __clz(v25);
  }
  while (!v25);
  int v26 = v11 | 0xFFFFFFC0;
  if ((v11 & 0x3F) == 0) {
    int v26 = 0;
  }
  if (v22 + v26 != v11)
  {
LABEL_11:
    uint64_t v12 = (uint64_t *)sub_1CCB27850(v9, v6, *(void *)(a1 + 16));
    uint64_t v13 = *(void *)(a1 + 16);
    sub_1CCB17A70(*(void **)(a1 + 24), *v12);
    if (v14) {
      NullValue = llvm::Constant::getNullValue(v14, v15, v16);
    }
    else {
      NullValue = 0;
    }
    __int16 v28 = 257;
    uint64_t v18 = sub_1CB845F20(v13, 33, v12, (uint64_t)NullValue, (uint64_t)v27);
    int v20 = *(llvm::Value **)(a1 + 8);
    int v19 = *(llvm::IRBuilderBase **)(a1 + 16);
    __int16 v28 = 257;
    *(void *)(a1 + 8) = llvm::IRBuilderBase::CreateSelect(v19, v18, (llvm::Value *)a3, v20, (const llvm::Twine *)v27, 0);
  }
  return a1;
}

llvm::Instruction *sub_1CCB27850(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *a2;
  int v7 = *(unsigned __int8 *)(*a2 + 8);
  if (*a2) {
    BOOL v8 = v7 == 16;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    uint64_t v13 = **(void **)(a3 + 64);
    int v14 = *(llvm::ConstantInt **)(v13 + 1888);
    unsigned int v15 = *(_DWORD *)(v13 + 1896);
    unsigned int v36 = v15 >> 8;
    if (v15 >> 8 >= 0x41) {
      operator new[]();
    }
    uint64_t v35 = 0;
    unint64_t v16 = (llvm::Instruction *)llvm::ConstantInt::get(v14, (llvm::LLVMContext *)&v35, (const llvm::APInt *)a3);
    if (v36 >= 0x41 && v35) {
      MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
    }
    v33[0] = 0;
    if (!*(_DWORD *)(v6 + 12)) {
      return v16;
    }
    uint64_t v17 = v16;
    do
    {
      __int16 v37 = 257;
      uint64_t v18 = sub_1CC2415A4(a3, v4, v33, 1, (uint64_t)&v35);
      int v19 = (llvm::ConstantInt **)sub_1CCB27850(a1, v18, a3);
      __int16 v37 = 257;
      int v20 = sub_1CCB27D6C(v19, a3, (uint64_t)&v35);
      if (v17 != v16)
      {
        __int16 v37 = 257;
        int v20 = sub_1CB844AF4(a3, v17, (uint64_t)v20, (uint64_t)&v35);
      }
      ++v33[0];
      uint64_t v17 = v20;
    }
    while (v33[0] < *(_DWORD *)(v6 + 12));
    return v20;
  }
  else if (v7 == 17)
  {
    if (*(void *)(v6 + 32))
    {
      v33[0] = 0;
      __int16 v37 = 257;
      uint64_t v9 = sub_1CC2415A4(a3, a2, v33, 1, (uint64_t)&v35);
      unsigned int v10 = (llvm::Instruction *)sub_1CCB27850(a1, v9, a3);
      v33[0] = 1;
      if (*(void *)(v6 + 32) >= 2uLL)
      {
        do
        {
          __int16 v37 = 257;
          uint64_t v11 = sub_1CC2415A4(a3, v4, v33, 1, (uint64_t)&v35);
          uint64_t v12 = sub_1CCB27850(a1, v11, a3);
          __int16 v37 = 257;
          unsigned int v10 = sub_1CB844AF4(a3, v10, v12, (uint64_t)&v35);
          ++v33[0];
        }
        while (*(void *)(v6 + 32) > (unint64_t)v33[0]);
      }
      return v10;
    }
    else
    {
      uint64_t v26 = **(void **)(a3 + 64);
      uint64_t v27 = *(llvm::ConstantInt **)(v26 + 1888);
      unsigned int v28 = *(_DWORD *)(v26 + 1896);
      unsigned int v36 = v28 >> 8;
      if (v28 >> 8 >= 0x41) {
        operator new[]();
      }
      uint64_t v35 = 0;
      uint64_t v4 = llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v35, (const llvm::APInt *)a3);
      if (v36 >= 0x41 && v35) {
        MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
      }
    }
  }
  else
  {
    unint64_t v21 = sub_1CCB27D04(a1, (llvm::Type *)*a2);
    if ((llvm::Type *)v6 != v21)
    {
      __int16 v34 = 257;
      if ((llvm::Type *)*v4 != v21)
      {
        if (*((unsigned __int8 *)v4 + 16) <= 0x14u)
        {
          uint64_t v4 = (uint64_t *)(*(uint64_t (**)(void, uint64_t, uint64_t *, llvm::Type *))(**(void **)(a3 + 72)
                                                                                              + 224))(*(void *)(a3 + 72), 49, v4, v21);
          if (v4) {
            BOOL v29 = *((unsigned __int8 *)v4 + 16) >= 0x1Cu;
          }
          else {
            BOOL v29 = 0;
          }
          if (v29)
          {
            (*(void (**)(void, uint64_t *, unsigned int *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v4, v33, *(void *)(a3 + 48), *(void *)(a3 + 56));
            uint64_t v30 = *(unsigned int *)(a3 + 8);
            if (v30)
            {
              uint64_t v31 = *(void *)a3;
              uint64_t v32 = v31 + 16 * v30;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v31, *(llvm::MDNode **)(v31 + 8));
                v31 += 16;
              }
              while (v31 != v32);
            }
          }
        }
        else
        {
          __int16 v37 = 257;
          uint64_t v4 = (uint64_t *)llvm::CastInst::Create(49, (uint64_t)v4, (uint64_t)v21, &v35, 0);
          (*(void (**)(void, uint64_t *, unsigned int *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v4, v33, *(void *)(a3 + 48), *(void *)(a3 + 56));
          uint64_t v22 = *(unsigned int *)(a3 + 8);
          if (v22)
          {
            uint64_t v23 = *(void *)a3;
            uint64_t v24 = v23 + 16 * v22;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v23, *(llvm::MDNode **)(v23 + 8));
              v23 += 16;
            }
            while (v23 != v24);
          }
        }
      }
    }
  }
  return (llvm::Instruction *)v4;
}

llvm::Type *sub_1CCB27D04(uint64_t a1, llvm::Type *this)
{
  if (!this || (*((_DWORD *)this + 2) & 0xFE) != 0x12) {
    return this;
  }
  uint64_t v2 = *(llvm::IntegerType **)(*(void *)(a1 + 8) + 16);
  unint64_t PrimitiveSizeInBits = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits(this);

  return (llvm::Type *)llvm::IntegerType::get(v2, PrimitiveSizeInBits);
}

llvm::Instruction *sub_1CCB27D6C(llvm::ConstantInt **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if ((*((_DWORD *)v4 + 2) & 0xFFFFFF00) == 0x100) {
    return (llvm::Instruction *)a1;
  }
  BOOL v8 = llvm::ConstantInt::get(v4, 0, 0);

  return sub_1CB845F20(a2, 33, a1, (uint64_t)v8, a3);
}

void sub_1CCB27DF4(uint64_t a1, uint64_t *a2, llvm::Constant *this, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  v64[2] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)this;
  if (*(void *)this) {
    BOOL v9 = (*(_DWORD *)(*(void *)this + 8) & 0xFE) == 18;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    int v20 = *(_DWORD *)(v8 + 32);
    uint64_t v21 = *(void *)(v8 + 24);
    __int16 v55 = v57;
    uint64_t v56 = 0x1000000000;
    if (v20)
    {
      uint64_t v22 = 0;
      do
      {
        AggregateElement = llvm::Constant::getAggregateElement(this, v22);
        if (AggregateElement && *((unsigned char *)AggregateElement + 16) == 16)
        {
          unsigned int v25 = *((_DWORD *)AggregateElement + 8);
          if (v25 > 0x40) {
            operator new[]();
          }
          unint64_t v26 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
          if (v25) {
            unint64_t v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
          }
          else {
            LOBYTE(v27) = 0;
          }
          unint64_t v28 = v27 & 1;
          unsigned int v29 = __clz(__rbit64(AggregateElement[3]));
          if (v25 >= v29) {
            unsigned int v30 = v29;
          }
          else {
            unsigned int v30 = *((_DWORD *)AggregateElement + 8);
          }
          unsigned int v52 = *((_DWORD *)AggregateElement + 8);
          unint64_t v31 = v28 << v30;
          if (v25 == v30) {
            unint64_t v31 = 0;
          }
          if (!v25) {
            unint64_t v26 = 0;
          }
          int v51 = (const char *)(v26 & v31);
          Splat = llvm::ConstantInt::get(*(llvm::ConstantInt **)v21, (llvm::LLVMContext *)&v51, v24);
          if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12) {
            Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v21 + 32) | ((unint64_t)(*(_DWORD *)(v21 + 8) == 19) << 32)), (uint64_t)Splat);
          }
          if (v56 >= (unint64_t)HIDWORD(v56)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v55 + v56) = Splat;
          LODWORD(v56) = v56 + 1;
          if (v52 >= 0x41 && v51) {
            MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
          }
        }
        else
        {
          uint64_t v33 = llvm::ConstantInt::get((llvm::ConstantInt *)v21, 1uLL, 0);
          if (v56 >= (unint64_t)HIDWORD(v56)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v55 + v56) = v33;
          LODWORD(v56) = v56 + 1;
        }
        uint64_t v22 = (llvm::Type *)(v22 + 1);
      }
      while (v20 != v22);
      __int16 v34 = (llvm::FixedVectorType ***)v55;
      uint64_t v35 = v56;
    }
    else
    {
      uint64_t v35 = 0;
      __int16 v34 = (llvm::FixedVectorType ***)v57;
    }
    uint64_t Impl = (uint64_t)llvm::ConstantVector::getImpl(v34, (llvm::Type *)v35);
    if (!Impl)
    {
      llvm::FixedVectorType::get(**v34, (llvm::Type *)v35);
      uint64_t Impl = sub_1CC56A4DC(**v36 + 1288, (uint64_t)v36, v34, v35);
    }
    if (v55 != v57) {
      free(v55);
    }
    uint64_t v7 = a1;
    uint64_t v6 = a2;
    uint64_t v4 = a4;
  }
  else if (*((unsigned char *)this + 16) == 16)
  {
    unsigned int v12 = *((_DWORD *)this + 8);
    if (v12 > 0x40) {
      operator new[]();
    }
    unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
    if (v12) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
    }
    else {
      LOBYTE(v14) = 0;
    }
    unint64_t v15 = v14 & 1;
    unsigned int v16 = __clz(__rbit64(*((void *)this + 3)));
    if (v12 >= v16) {
      unsigned int v17 = v16;
    }
    else {
      unsigned int v17 = *((_DWORD *)this + 8);
    }
    LODWORD(v56) = *((_DWORD *)this + 8);
    unint64_t v18 = v15 << v17;
    if (v12 == v17) {
      unint64_t v18 = 0;
    }
    if (!v12) {
      unint64_t v13 = 0;
    }
    __int16 v55 = (void *)(v13 & v18);
    uint64_t Impl = (uint64_t)llvm::ConstantInt::get(*(llvm::ConstantInt **)v8, (llvm::LLVMContext *)&v55, this);
    if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12) {
      uint64_t Impl = (uint64_t)llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v8 + 32) | ((unint64_t)(*(_DWORD *)(v8 + 8) == 19) << 32)), Impl);
    }
    uint64_t v7 = a1;
    uint64_t v4 = a4;
    if (v56 >= 0x41 && v55) {
      MEMORY[0x1D25D9CB0](v55, 0x1000C8000313F17);
    }
  }
  else
  {
    uint64_t Impl = (uint64_t)llvm::ConstantInt::get(*(llvm::ConstantInt **)this, 1uLL, 0);
  }
  uint64_t v37 = 0;
  uint64_t v38 = *(void *)*v6;
  uint64_t v56 = 0x200000000;
  v57[6] = v38;
  v57[7] = &v63;
  v57[8] = v64;
  v57[9] = 0;
  int v58 = 0;
  __int16 v59 = 512;
  char v60 = 7;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = &unk_1F2616E88;
  v64[0] = &unk_1F2617008;
  uint64_t v39 = (unsigned __int8 *)v6[6];
  void v57[4] = v6[5];
  v57[5] = v6 + 3;
  uint64_t v54 = v39;
  __int16 v55 = v57;
  if (v39)
  {
    llvm::MetadataTracking::track((uint64_t)&v54, v39, 2);
    uint64_t v37 = (uint64_t)v54;
  }
  sub_1CB8461A4((uint64_t)&v55, 0, v37);
  if (v54)
  {
    int v44 = *v54;
    if ((v44 - 4) > 0x1E)
    {
      if ((v44 - 3) >= 0xFFFFFFFE) {
        uint64_t v47 = v54;
      }
      else {
        uint64_t v47 = 0;
      }
      if ((v44 - 3) < 0xFFFFFFFE)
      {
        if (v44 == 3) {
          *((void *)v54 + 1) = 0;
        }
        goto LABEL_60;
      }
      unint64_t v46 = (unint64_t)(v47 + 8);
    }
    else
    {
      if ((v54[1] & 0x7F) != 2 && !*((_DWORD *)v54 + 3)) {
        goto LABEL_60;
      }
      uint64_t v45 = *((void *)v54 + 2);
      if ((v45 & 4) == 0) {
        goto LABEL_60;
      }
      unint64_t v46 = v45 & 0xFFFFFFFFFFFFFFF8;
      if (!v46) {
        goto LABEL_60;
      }
    }
    int v51 = (const char *)&v54;
    sub_1CC5FA668(v46 + 16, &v51);
  }
LABEL_60:
  size_t v40 = sub_1CCB16AB0(v7, v4);
  int v51 = "msprop_mul_cst";
  __int16 v53 = 259;
  size_t v41 = sub_1CC09A1EC((uint64_t)&v55, (uint64_t)v40, Impl, (uint64_t)&v51, 0, 0);
  sub_1CCB24DAC(v7, v6, v41);
  __int16 v43 = sub_1CCB176E8(v7, v4, v42);
  if (*(_DWORD *)(*(void *)(v7 + 8) + 4)) {
    *sub_1CD694530(v7 + 368, (uint64_t)v6) = (unint64_t)v43;
  }
  if (v55 != v57) {
    free(v55);
  }
}

void sub_1CCB285BC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = 0;
  v32[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = **(void **)a2;
  v24[0] = v25;
  v24[1] = (void *)0x200000000;
  v25[6] = v5;
  v25[7] = &v31;
  v25[8] = v32;
  v25[9] = 0;
  int v26 = 0;
  __int16 v27 = 512;
  char v28 = 7;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v31 = &unk_1F2616E88;
  v32[0] = &unk_1F2617008;
  unint64_t v6 = a2 + 24;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v7 = *(unsigned __int8 **)(a2 + 48);
  void v25[4] = v8;
  v25[5] = v6;
  uint64_t v22 = v7;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)&v22, v7, 2);
    uint64_t v4 = (uint64_t)v22;
  }
  sub_1CB8461A4((uint64_t)v24, 0, v4);
  if (v22)
  {
    int v18 = *v22;
    if ((v18 - 4) > 0x1E)
    {
      if ((v18 - 3) >= 0xFFFFFFFE) {
        uint64_t v21 = v22;
      }
      else {
        uint64_t v21 = 0;
      }
      if ((v18 - 3) < 0xFFFFFFFE)
      {
        if (v18 == 3) {
          *((void *)v22 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v20 = (unint64_t)(v21 + 8);
    }
    else
    {
      if ((v22[1] & 0x7F) != 2 && !*((_DWORD *)v22 + 3)) {
        goto LABEL_4;
      }
      uint64_t v19 = *((void *)v22 + 2);
      if ((v19 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFF8;
      if (!v20) {
        goto LABEL_4;
      }
    }
    uint64_t v23 = &v22;
    sub_1CC5FA668(v20 + 16, &v23);
  }
LABEL_4:
  int v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0) {
    unint64_t v10 = *(void *)(a2 - 8);
  }
  else {
    unint64_t v10 = a2 - 32 * (v9 & 0x7FFFFFF);
  }
  sub_1CCB24814(a1, *(void *)(v10 + 32), a2);
  int v11 = *(_DWORD *)(a2 + 20);
  if ((v11 & 0x40000000) != 0) {
    unsigned int v12 = *(uint64_t **)(a2 - 8);
  }
  else {
    unsigned int v12 = (uint64_t *)(a2 - 32 * (v11 & 0x7FFFFFF));
  }
  unint64_t v13 = sub_1CCB16AB0(a1, *v12);
  sub_1CCB24DAC(a1, (uint64_t *)a2, v13);
  int v15 = *(_DWORD *)(a2 + 20);
  if ((v15 & 0x40000000) != 0) {
    unsigned int v16 = *(uint64_t **)(a2 - 8);
  }
  else {
    unsigned int v16 = (uint64_t *)(a2 - 32 * (v15 & 0x7FFFFFF));
  }
  unsigned int v17 = sub_1CCB176E8(a1, *v16, v14);
  if (*(_DWORD *)(*(void *)(a1 + 8) + 4)) {
    *sub_1CD694530(a1 + 368, a2) = (unint64_t)v17;
  }
  if (v24[0] != v25) {
    free(v24[0]);
  }
}

void sub_1CCB2880C(void *a1, uint64_t *a2)
{
  uint64_t v4 = 0;
  v56[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)*a2;
  size_t v41 = v43;
  uint64_t v42 = 0x200000000;
  uint64_t v46 = v5;
  uint64_t v47 = &v55;
  uint64_t v48 = v56;
  uint64_t v49 = 0;
  int v50 = 0;
  __int16 v51 = 512;
  char v52 = 7;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  __int16 v55 = &unk_1F2616E88;
  v56[0] = &unk_1F2617008;
  unint64_t v6 = a2 + 3;
  uint64_t v8 = a2[5];
  uint64_t v7 = (unsigned __int8 *)a2[6];
  uint64_t v44 = v8;
  uint64_t v45 = v6;
  v37[0] = v7;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)v37, v7, 2);
    uint64_t v4 = v37[0];
  }
  sub_1CB8461A4((uint64_t)&v41, 0, v4);
  if (v37[0])
  {
    int v29 = *(unsigned __int8 *)v37[0];
    if ((v29 - 4) > 0x1E)
    {
      if ((v29 - 3) >= 0xFFFFFFFE) {
        uint64_t v32 = v37[0];
      }
      else {
        uint64_t v32 = 0;
      }
      if ((v29 - 3) < 0xFFFFFFFE)
      {
        if (v29 == 3) {
          *(void *)(v37[0] + 8) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v31 = v32 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v37[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v37[0] + 12)) {
        goto LABEL_4;
      }
      uint64_t v30 = *(void *)(v37[0] + 16);
      if ((v30 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v31 = v30 & 0xFFFFFFFFFFFFFFF8;
      if (!v31) {
        goto LABEL_4;
      }
    }
    v39[0] = (const char *)v37;
    sub_1CC5FA668(v31 + 16, v39);
  }
LABEL_4:
  int v9 = *((_DWORD *)a2 + 5);
  if ((v9 & 0x40000000) != 0) {
    unint64_t v10 = (uint64_t *)*(a2 - 1);
  }
  else {
    unint64_t v10 = &a2[-4 * (v9 & 0x7FFFFFF)];
  }
  int v11 = sub_1CCB16AB0((uint64_t)a1, *v10);
  int v12 = *((_DWORD *)a2 + 5);
  if ((v12 & 0x40000000) != 0) {
    unint64_t v13 = (uint64_t *)*(a2 - 1);
  }
  else {
    unint64_t v13 = &a2[-4 * (v12 & 0x7FFFFFF)];
  }
  unint64_t v14 = (uint64_t *)sub_1CCB16AB0((uint64_t)a1, v13[4]);
  sub_1CCB17A70(a1, *v14);
  if (v15) {
    NullValue = llvm::Constant::getNullValue(v15, v16, v17);
  }
  else {
    NullValue = 0;
  }
  __int16 v38 = 257;
  uint64_t v19 = sub_1CB845F20((uint64_t)&v41, 33, v14, (uint64_t)NullValue, (uint64_t)v37);
  unint64_t v20 = v19;
  uint64_t v21 = *v14;
  __int16 v36 = 257;
  if (*(void *)v19 != v21)
  {
    if (*((unsigned __int8 *)v19 + 16) <= 0x14u)
    {
      uint64_t v24 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v47 + 28))(v47, 40, v19, v21);
      unint64_t v20 = (llvm::Instruction *)v24;
      if (v24)
      {
        if (*(unsigned __int8 *)(v24 + 16) >= 0x1Cu)
        {
          (*(void (**)(void *, uint64_t, unsigned char *, uint64_t, uint64_t *))(*v48 + 16))(v48, v24, v35, v44, v45);
          if (v42)
          {
            uint64_t v33 = (llvm::MDNode **)v41;
            __int16 v34 = (llvm::MDNode **)((char *)v41 + 16 * v42);
            do
            {
              llvm::Instruction::setMetadata(v20, *(_DWORD *)v33, v33[1]);
              v33 += 2;
            }
            while (v33 != v34);
          }
        }
      }
    }
    else
    {
      __int16 v40 = 257;
      unint64_t v20 = llvm::CastInst::Create(40, (uint64_t)v19, v21, v39, 0);
      (*(void (**)(void *, llvm::Instruction *, unsigned char *, uint64_t, uint64_t *))(*v48 + 16))(v48, v20, v35, v44, v45);
      if (v42)
      {
        uint64_t v22 = (llvm::MDNode **)v41;
        uint64_t v23 = (llvm::MDNode **)((char *)v41 + 16 * v42);
        do
        {
          llvm::Instruction::setMetadata(v20, *(_DWORD *)v22, v22[1]);
          v22 += 2;
        }
        while (v22 != v23);
      }
    }
  }
  uint64_t v25 = *(a2 - 4);
  uint64_t v26 = *((unsigned __int8 *)a2 + 16) - 28;
  __int16 v40 = 257;
  __int16 v27 = sub_1CB844E98((uint64_t)&v41, v26, (uint64_t)v11, v25, (uint64_t)v39, 0);
  __int16 v40 = 257;
  char v28 = sub_1CB844AF4((uint64_t)&v41, v27, (uint64_t)v20, (uint64_t)v39);
  sub_1CCB24DAC((uint64_t)a1, a2, v28);
  sub_1CCB28C0C(a1, (uint64_t)a2);
  if (v41 != v43) {
    free(v41);
  }
}

void sub_1CCB28C0C(void *a1, uint64_t a2)
{
  v49[1] = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a1[1] + 4)) {
    return;
  }
  uint64_t v4 = 0;
  uint64_t v5 = **(void **)a2;
  v41[1] = (void *)0x200000000;
  v42[6] = v5;
  v42[7] = &v48;
  v42[8] = v49;
  v42[9] = 0;
  int v43 = 0;
  __int16 v44 = 512;
  char v45 = 7;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = &unk_1F2616E88;
  v49[0] = &unk_1F2617008;
  uint64_t v6 = a2 + 24;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v7 = *(unsigned __int8 **)(a2 + 48);
  v42[4] = v8;
  v42[5] = v6;
  __int16 v40 = v7;
  v41[0] = v42;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)&v40, v7, 2);
    uint64_t v4 = (uint64_t)v40;
  }
  sub_1CB8461A4((uint64_t)v41, 0, v4);
  if (v40)
  {
    int v34 = *v40;
    if ((v34 - 4) > 0x1E)
    {
      if ((v34 - 3) >= 0xFFFFFFFE) {
        uint64_t v37 = v40;
      }
      else {
        uint64_t v37 = 0;
      }
      if ((v34 - 3) < 0xFFFFFFFE)
      {
        if (v34 == 3) {
          *((void *)v40 + 1) = 0;
        }
        goto LABEL_5;
      }
      unint64_t v36 = (unint64_t)(v37 + 8);
    }
    else
    {
      if ((v40[1] & 0x7F) != 2 && !*((_DWORD *)v40 + 3)) {
        goto LABEL_5;
      }
      uint64_t v35 = *((void *)v40 + 2);
      if ((v35 & 4) == 0) {
        goto LABEL_5;
      }
      unint64_t v36 = v35 & 0xFFFFFFFFFFFFFFF8;
      if (!v36) {
        goto LABEL_5;
      }
    }
    v38[0] = &v40;
    sub_1CC5FA668(v36 + 16, v38);
  }
LABEL_5:
  int v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0)
  {
    int v11 = *(uint64_t **)(a2 - 8);
    uint64_t v10 = v9 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v10 = v9 & 0x7FFFFFF;
    int v11 = (uint64_t *)(a2 - 32 * v10);
  }
  Select = 0;
  if (v10)
  {
    unint64_t v13 = &v11[4 * v10];
    do
    {
      uint64_t v14 = *v11;
      int v15 = sub_1CCB16AB0((uint64_t)a1, *v11);
      if (*(_DWORD *)(a1[1] + 4))
      {
        unsigned int v17 = (uint64_t *)v15;
        int v18 = sub_1CCB176E8((uint64_t)a1, v14, v16);
        if (*(_DWORD *)(a1[1] + 4))
        {
          uint64_t v19 = v18;
          if (Select)
          {
            if (!v18) {
              goto LABEL_18;
            }
            unsigned int v20 = *((unsigned __int8 *)v18 + 16);
            if (v20 > 0x14) {
              goto LABEL_18;
            }
            if (v20 == 16)
            {
              uint64_t v21 = *((unsigned int *)v18 + 8);
              if (v21 >= 0x41)
              {
                int v29 = 0;
                int64_t v30 = (unint64_t)(v21 + 63) >> 6;
                do
                {
                  if (v30-- < 1) {
                    break;
                  }
                  unint64_t v32 = *(void *)(*((void *)v18 + 3) + 8 * v30);
                  v29 += __clz(v32);
                }
                while (!v32);
                int v33 = v21 | 0xFFFFFFC0;
                if ((v21 & 0x3F) == 0) {
                  int v33 = 0;
                }
                if (v29 + v33 == v21) {
                  goto LABEL_23;
                }
LABEL_18:
                uint64_t v22 = (uint64_t *)sub_1CCB27850((uint64_t)a1, v17, (uint64_t)v41);
                sub_1CCB17A70(a1, *v22);
                if (v23) {
                  NullValue = llvm::Constant::getNullValue(v23, v24, v25);
                }
                else {
                  NullValue = 0;
                }
                __int16 v39 = 257;
                __int16 v27 = sub_1CB845F20((uint64_t)v41, 33, v22, (uint64_t)NullValue, (uint64_t)v38);
                __int16 v39 = 257;
                Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)v41, v27, v19, Select, (const llvm::Twine *)v38, 0);
                goto LABEL_23;
              }
              if (*((void *)v18 + 3)) {
                goto LABEL_18;
              }
            }
            else
            {
              if (v20 != 17)
              {
                if (v20 - 18 < 3 || v20 == 13) {
                  goto LABEL_23;
                }
                goto LABEL_18;
              }
              if ((sub_1CB844168((uint64_t)v18, 0.0) & 1) == 0) {
                goto LABEL_18;
              }
            }
          }
          else
          {
            Select = v18;
          }
        }
      }
LABEL_23:
      v11 += 4;
    }
    while (v11 != v13);
  }
  if (*(_DWORD *)(a1[1] + 4)) {
    *sub_1CD694530((uint64_t)(a1 + 46), a2) = (unint64_t)Select;
  }
  if (v41[0] != v42) {
    free(v41[0]);
  }
}

void sub_1CCB28F8C(void *a1, uint64_t *a2)
{
  uint64_t v4 = 0;
  v57[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)*a2;
  uint64_t v42 = v44;
  uint64_t v43 = 0x200000000;
  uint64_t v47 = v5;
  uint64_t v48 = &v56;
  uint64_t v49 = v57;
  uint64_t v50 = 0;
  int v51 = 0;
  __int16 v52 = 512;
  char v53 = 7;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = &unk_1F2616E88;
  v57[0] = &unk_1F2617008;
  uint64_t v6 = a2 + 3;
  uint64_t v8 = a2[5];
  uint64_t v7 = (unsigned __int8 *)a2[6];
  uint64_t v45 = v8;
  uint64_t v46 = v6;
  __int16 v39 = v7;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)&v39, v7, 2);
    uint64_t v4 = (uint64_t)v39;
  }
  sub_1CB8461A4((uint64_t)&v42, 0, v4);
  if (v39)
  {
    int v33 = *v39;
    if ((v33 - 4) > 0x1E)
    {
      if ((v33 - 3) >= 0xFFFFFFFE) {
        __int16 v38 = v39;
      }
      else {
        __int16 v38 = 0;
      }
      if ((v33 - 3) < 0xFFFFFFFE)
      {
        if (v33 == 3) {
          *((void *)v39 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v35 = (unint64_t)(v38 + 8);
    }
    else
    {
      if ((v39[1] & 0x7F) != 2 && !*((_DWORD *)v39 + 3)) {
        goto LABEL_4;
      }
      uint64_t v34 = *((void *)v39 + 2);
      if ((v34 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v35 = v34 & 0xFFFFFFFFFFFFFFF8;
      if (!v35) {
        goto LABEL_4;
      }
    }
    v40[0] = &v39;
    sub_1CC5FA668(v35 + 16, v40);
  }
LABEL_4:
  int v9 = *((_DWORD *)a2 + 5);
  if ((v9 & 0x40000000) != 0) {
    uint64_t v10 = (uint64_t *)*(a2 - 1);
  }
  else {
    uint64_t v10 = &a2[-4 * (v9 & 0x7FFFFFF)];
  }
  int v11 = (llvm::CastInst *)*v10;
  int v12 = (llvm::PointerType **)v10[4];
  unint64_t v13 = sub_1CCB163B4(a1, (llvm::CastInst *)*v10, (uint64_t)&v42, *v12, (llvm::Instruction *)0x100, 1);
  if (byte_1EBCE8E80) {
    sub_1CCB24814((uint64_t)a1, (uint64_t)v11, (unint64_t)a2);
  }
  if (*((unsigned char *)a2 + 16) == 64) {
    sub_1CCB24814((uint64_t)a1, (uint64_t)v12, (unint64_t)a2);
  }
  sub_1CCB17A70(a1, (uint64_t)*v12);
  if (v14) {
    NullValue = llvm::Constant::getNullValue(v14, v15, v16);
  }
  else {
    NullValue = 0;
  }
  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v45 + 56) + 40) + 272), *(llvm::Type **)NullValue, 1);
  uint64_t v19 = (char *)operator new(0x80uLL);
  *((_DWORD *)v19 + 21) = *((_DWORD *)v19 + 21) & 0x38000000 | 2;
  *(void *)uint64_t v19 = 0;
  *((void *)v19 + 2) = 0;
  *((void *)v19 + 1) = 0;
  *((void *)v19 + 5) = 0;
  *((void *)v19 + 6) = 0;
  *((void *)v19 + 4) = 0;
  *((void *)v19 + 8) = ***(void ***)NullValue + 1576;
  unsigned int v20 = (llvm::Instruction *)(v19 + 64);
  *((void *)v19 + 3) = v19 + 64;
  *((void *)v19 + 7) = v19 + 64;
  *((void *)v19 + 9) = 0;
  v19[80] = 61;
  v19[81] = 0;
  *((_DWORD *)v19 + 21) = 2;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_OWORD *)(v19 + 104) = 0u;
  *((_DWORD *)v19 + 30) = 0;
  uint64_t v21 = (void *)((char *)NullValue + 8);
  uint64_t v22 = *((void *)NullValue + 1);
  *(void *)uint64_t v19 = NullValue;
  *((void *)v19 + 1) = v22;
  if (v22) {
    *(void *)(v22 + 16) = v19 + 8;
  }
  *((void *)v19 + 2) = v21;
  *uint64_t v21 = v19;
  *((void *)v19 + 4) = v13;
  if (v13)
  {
    uint64_t v25 = *((void *)v13 + 1);
    uint64_t v24 = v13 + 8;
    uint64_t v23 = v25;
    *((void *)v19 + 5) = v25;
    if (v25) {
      *(void *)(v23 + 16) = v19 + 40;
    }
    *((void *)v19 + 6) = v24;
    *uint64_t v24 = v19 + 32;
  }
  *((_WORD *)v19 + 41) = 2 * (Alignment & 0x3F);
  v19[124] = 1;
  __int16 v41 = 257;
  (*(void (**)(void *, llvm::Instruction *, void *, uint64_t, uint64_t *))(*v49 + 16))(v49, v20, v40, v45, v46);
  if (v43)
  {
    unint64_t v36 = (llvm::MDNode **)v42;
    uint64_t v37 = (llvm::MDNode **)((char *)v42 + 16 * v43);
    do
    {
      llvm::Instruction::setMetadata(v20, *(_DWORD *)v36, v36[1]);
      v36 += 2;
    }
    while (v36 != v37);
  }
  sub_1CCB17A70(a1, *a2);
  if (v26) {
    int v29 = llvm::Constant::getNullValue(v26, v27, v28);
  }
  else {
    int v29 = 0;
  }
  sub_1CCB24DAC((uint64_t)a1, a2, v29);
  unint64_t v32 = llvm::Constant::getNullValue(*(llvm::Constant **)(a1[1] + 32), v30, v31);
  if (*(_DWORD *)(a1[1] + 4)) {
    *sub_1CD694530((uint64_t)(a1 + 46), (uint64_t)a2) = (unint64_t)v32;
  }
  if (v42 != v44) {
    free(v42);
  }
}

void *sub_1CCB29398(void *a1, uint64_t *a2)
{
  sub_1CCB17A70(a1, *a2);
  if (v4) {
    NullValue = llvm::Constant::getNullValue(v4, v5, v6);
  }
  else {
    NullValue = 0;
  }
  sub_1CCB24DAC((uint64_t)a1, a2, NullValue);
  __n128 result = llvm::Constant::getNullValue(*(llvm::Constant **)(a1[1] + 32), v8, v9);
  if (*(_DWORD *)(a1[1] + 4))
  {
    int v11 = result;
    __n128 result = sub_1CD694530((uint64_t)(a1 + 46), (uint64_t)a2);
    *__n128 result = v11;
  }
  return result;
}

void sub_1CCB2941C(void *a1, uint64_t *a2)
{
  uint64_t v4 = 0;
  v43[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)*a2;
  v35[0] = v36;
  v35[1] = (void *)0x200000000;
  v36[6] = v5;
  v36[7] = &v42;
  v36[8] = v43;
  v36[9] = 0;
  int v37 = 0;
  __int16 v38 = 512;
  char v39 = 7;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = &unk_1F2616E88;
  v43[0] = &unk_1F2617008;
  uint64_t v6 = a2 + 3;
  uint64_t v8 = a2[5];
  uint64_t v7 = (unsigned __int8 *)a2[6];
  v36[4] = v8;
  v36[5] = v6;
  uint64_t v34 = v7;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)&v34, v7, 2);
    uint64_t v4 = (uint64_t)v34;
  }
  sub_1CB8461A4((uint64_t)v35, 0, v4);
  if (v34)
  {
    int v28 = *v34;
    if ((v28 - 4) > 0x1E)
    {
      if ((v28 - 3) >= 0xFFFFFFFE) {
        unint64_t v31 = v34;
      }
      else {
        unint64_t v31 = 0;
      }
      if ((v28 - 3) < 0xFFFFFFFE)
      {
        if (v28 == 3) {
          *((void *)v34 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v30 = (unint64_t)(v31 + 8);
    }
    else
    {
      if ((v34[1] & 0x7F) != 2 && !*((_DWORD *)v34 + 3)) {
        goto LABEL_4;
      }
      uint64_t v29 = *((void *)v34 + 2);
      if ((v29 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFF8;
      if (!v30) {
        goto LABEL_4;
      }
    }
    v32[0] = &v34;
    sub_1CC5FA668(v30 + 16, v32);
  }
LABEL_4:
  int v9 = (llvm::CastInst *)*(a2 - 8);
  uint64_t v10 = (llvm::CastInst *)*(a2 - 4);
  int v11 = (llvm::ConstantInt **)sub_1CCB16AB0((uint64_t)a1, (uint64_t)v9);
  int v12 = (llvm::ConstantInt **)sub_1CCB16AB0((uint64_t)a1, (uint64_t)v10);
  unint64_t v13 = *v11;
  __int16 v33 = 257;
  int v15 = sub_1CC277FE0((uint64_t)v35, v9, v13, (uint64_t)v32, v14);
  unsigned int v16 = *v12;
  __int16 v33 = 257;
  int v18 = sub_1CC277FE0((uint64_t)v35, v10, v16, (uint64_t)v32, v17);
  int v19 = *((_WORD *)a2 + 9) & 0x3F;
  BOOL v20 = (v19 - 38) < 4;
  uint64_t v21 = sub_1CCB29730((uint64_t)v35, v15, v11, (llvm::Instruction *)v20);
  uint64_t v22 = sub_1CCB29870((uint64_t)v35, v18, v12, v20);
  __int16 v33 = 257;
  uint64_t v23 = sub_1CB845F20((uint64_t)v35, v19, v21, (uint64_t)v22, (uint64_t)v32);
  LOWORD(v21) = *((_WORD *)a2 + 9) & 0x3F;
  uint64_t v24 = sub_1CCB29870((uint64_t)v35, v15, v11, v20);
  uint64_t v25 = sub_1CCB29730((uint64_t)v35, v18, v12, (llvm::Instruction *)v20);
  __int16 v33 = 257;
  uint64_t v26 = sub_1CB845F20((uint64_t)v35, (__int16)v21, v24, (uint64_t)v25, (uint64_t)v32);
  __int16 v33 = 257;
  __int16 v27 = sub_1CC2428C0((uint64_t)v35, (uint64_t)v23, (uint64_t)v26, (uint64_t)v32);
  sub_1CCB24DAC((uint64_t)a1, a2, v27);
  sub_1CCB28C0C(a1, (uint64_t)a2);
  if (v35[0] != v36) {
    free(v35[0]);
  }
}

llvm::Instruction *sub_1CCB29730(uint64_t a1, void *a2, llvm::ConstantInt **a3, llvm::Instruction *a4)
{
  __int16 v22 = 257;
  if (a4)
  {
    uint64_t v7 = llvm::ConstantInt::get(*a3, 1uLL, 0);
    uint64_t v8 = (llvm::ConstantInt **)sub_1CC242524(a1, (uint64_t)a3, (uint64_t)v7, (uint64_t)v21, 0, 0);
    __int16 v20 = 257;
    int v9 = llvm::ConstantInt::get(*v8, 1uLL, 0);
    uint64_t v10 = sub_1CC2429AC(a1, (uint64_t)v8, (uint64_t)v9, (uint64_t)v19, 0);
    __int16 v22 = 257;
    int v11 = sub_1CC2428C0(a1, (uint64_t)a3, (uint64_t)v10, (uint64_t)v21);
    __int16 v22 = 257;
    unint64_t v13 = sub_1CC2427E8(a1, (uint64_t)v10, (uint64_t)v21, v12);
    __int16 v20 = 257;
    uint64_t v14 = sub_1CBF52474(a1, a2, (uint64_t)v13, (uint64_t)v19);
    __int16 v18 = 257;
    return sub_1CB844AF4(a1, v14, (uint64_t)v11, (uint64_t)v17);
  }
  else
  {
    unsigned int v16 = sub_1CC2427E8(a1, (uint64_t)a3, (uint64_t)v21, a4);
    __int16 v20 = 257;
    return sub_1CBF52474(a1, a2, (uint64_t)v16, (uint64_t)v19);
  }
}

llvm::Instruction *sub_1CCB29870(uint64_t a1, llvm::Instruction *a2, llvm::ConstantInt **a3, int a4)
{
  uint64_t v4 = (uint64_t)a3;
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  __int16 v21 = 257;
  if (a4)
  {
    uint64_t v7 = llvm::ConstantInt::get(*a3, 1uLL, 0);
    uint64_t v8 = (llvm::ConstantInt **)sub_1CC242524(v6, v4, (uint64_t)v7, (uint64_t)v20, 0, 0);
    __int16 v19 = 257;
    int v9 = llvm::ConstantInt::get(*v8, 1uLL, 0);
    uint64_t v10 = sub_1CC2429AC(v6, (uint64_t)v8, (uint64_t)v9, (uint64_t)v18, 0);
    __int16 v21 = 257;
    int v11 = sub_1CC2428C0(v6, v4, (uint64_t)v10, (uint64_t)v20);
    __int16 v21 = 257;
    unint64_t v13 = sub_1CC2427E8(v6, (uint64_t)v11, (uint64_t)v20, v12);
    __int16 v19 = 257;
    a2 = sub_1CBF52474(v6, v5, (uint64_t)v13, (uint64_t)v18);
    __int16 v17 = 257;
    uint64_t v14 = &v16;
    a1 = v6;
    a3 = (llvm::ConstantInt **)v10;
  }
  else
  {
    uint64_t v14 = v20;
  }
  return sub_1CB844AF4(a1, a2, (uint64_t)a3, (uint64_t)v14);
}

void sub_1CCB29994(uint64_t a1, uint64_t **a2)
{
  v626[1] = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)*(a2 - 4) + 9);
  if (v4 > 12075)
  {
    if (v4 <= 12303)
    {
      switch(v4)
      {
        case 12076:
          uint64_t v47 = 32;
          goto LABEL_274;
        case 12077:
        case 12078:
          uint64_t v47 = 16;
          goto LABEL_274;
        case 12100:
          int v64 = 16;
          goto LABEL_296;
        case 12111:
        case 12258:
LABEL_106:
          if (*(unsigned char *)(*a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)] + 8) == 10) {
            uint64_t v89 = (llvm::Type *)(**(void **)(*(void *)(a1 + 8) + 16) + 1984);
          }
          else {
            uint64_t v89 = (llvm::Type *)*a2;
          }
          uint64_t v138 = v89;
          if ((*((_DWORD *)v89 + 2) & 0xFE) == 0x12) {
            uint64_t v138 = (llvm::Type *)**((void **)v89 + 2);
          }
          int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v138);
          uint64_t v140 = 0;
          uint64_t v141 = **a2;
          v611 = v613;
          uint64_t v612 = 0x200000000;
          uint64_t v616 = v141;
          v617 = &v625;
          v618 = v626;
          uint64_t v619 = 0;
          int v620 = 0;
          __int16 v621 = 512;
          char v622 = 7;
          uint64_t v623 = 0;
          uint64_t v624 = 0;
          v625 = &unk_1F2616E88;
          v626[0] = &unk_1F2617008;
          v142 = (unsigned __int8 *)a2[6];
          v614 = a2[5];
          v615 = a2 + 3;
          uint64_t v607 = (uint64_t)v142;
          if (v142)
          {
            llvm::MetadataTracking::track((uint64_t)&v607, v142, 2);
            uint64_t v140 = v607;
          }
          sub_1CB8461A4((uint64_t)&v611, 0, v140);
          if (!v607) {
            goto LABEL_167;
          }
          int v340 = *(unsigned __int8 *)v607;
          if ((v340 - 4) > 0x1E)
          {
            if ((v340 - 3) >= 0xFFFFFFFE) {
              uint64_t v450 = v607;
            }
            else {
              uint64_t v450 = 0;
            }
            if ((v340 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v342 = v450 + 8;
LABEL_555:
              v602 = &v607;
              sub_1CC5FA668(v342 + 16, &v602);
              goto LABEL_167;
            }
            if (v340 == 3) {
              *(void *)(v607 + 8) = 0;
            }
          }
          else if ((*(unsigned char *)(v607 + 1) & 0x7F) == 2 || *(_DWORD *)(v607 + 12))
          {
            uint64_t v341 = *(void *)(v607 + 16);
            if ((v341 & 4) != 0)
            {
              unint64_t v342 = v341 & 0xFFFFFFFFFFFFFFF8;
              if (v342) {
                goto LABEL_555;
              }
            }
          }
LABEL_167:
          int v143 = *((_DWORD *)a2 + 5);
          if ((v143 & 0x40000000) != 0) {
            v144 = *(a2 - 1);
          }
          else {
            v144 = (uint64_t *)&a2[-4 * (v143 & 0x7FFFFFF)];
          }
          unsigned int v145 = sub_1CCB16AB0(a1, *v144);
          int v146 = *((_DWORD *)a2 + 5);
          if ((v146 & 0x40000000) != 0) {
            v147 = (uint64_t **)*(a2 - 1);
          }
          else {
            v147 = &a2[-4 * (v146 & 0x7FFFFFF)];
          }
          v148 = sub_1CCB16AB0(a1, (uint64_t)v147[4]);
          __int16 v606 = 257;
          v149 = sub_1CB844AF4((uint64_t)&v611, v145, (uint64_t)v148, (uint64_t)&v602);
          v152 = v149;
          __int16 v610 = 257;
          if (*(llvm::Type **)v149 != v89)
          {
            if (*((unsigned __int8 *)v149 + 16) <= 0x14u)
            {
              uint64_t v158 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, llvm::Type *))*v617 + 28))(v617, 49, v149, v89);
              v152 = (llvm::Instruction *)v158;
              if (v158)
              {
                if (*(unsigned __int8 *)(v158 + 16) >= 0x1Cu)
                {
                  (*(void (**)(void *, uint64_t, uint64_t *, uint64_t *, void **))(*v618 + 16))(v618, v158, &v607, v614, v615);
                  if (v612)
                  {
                    v547 = (llvm::MDNode **)v611;
                    v548 = (llvm::MDNode **)((char *)v611 + 16 * v612);
                    do
                    {
                      llvm::Instruction::setMetadata(v152, *(_DWORD *)v547, v547[1]);
                      v547 += 2;
                    }
                    while (v547 != v548);
                  }
                }
              }
            }
            else
            {
              __int16 v606 = 257;
              v152 = llvm::CastInst::Create(49, (uint64_t)v149, (uint64_t)v89, (const char **)&v602, 0);
              (*(void (**)(void *, llvm::Instruction *, uint64_t *, uint64_t *, void **))(*v618 + 16))(v618, v152, &v607, v614, v615);
              if (v612)
              {
                int v153 = (llvm::MDNode **)v611;
                int64_t v154 = (llvm::MDNode **)((char *)v611 + 16 * v612);
                do
                {
                  llvm::Instruction::setMetadata(v152, *(_DWORD *)v153, v153[1]);
                  v153 += 2;
                }
                while (v153 != v154);
              }
            }
          }
          unsigned int v159 = PrimitiveSizeInBits - 16;
          NullValue = llvm::Constant::getNullValue(v89, v150, v151);
          __int16 v610 = 257;
          int v161 = sub_1CB845F20((uint64_t)&v611, 33, v152, (uint64_t)NullValue, (uint64_t)&v607);
          uint64_t v162 = (unsigned __int8 *)v161;
          __int16 v601 = 257;
          if (*(llvm::Type **)v161 != v89)
          {
            if (*((unsigned __int8 *)v161 + 16) <= 0x14u)
            {
              uint64_t v162 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, llvm::Type *))*v617
                                         + 28))(v617, 40, v161, v89);
              if (v162) {
                BOOL v165 = v162[16] >= 0x1Cu;
              }
              else {
                BOOL v165 = 0;
              }
              if (v165)
              {
                (*(void (**)(void *, unsigned __int8 *, uint64_t *, uint64_t *, void **))(*v618 + 16))(v618, v162, v600, v614, v615);
                if (v612)
                {
                  int v541 = (llvm::MDNode **)v611;
                  int64_t v542 = (llvm::MDNode **)((char *)v611 + 16 * v612);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v162, *(_DWORD *)v541, v541[1]);
                    v541 += 2;
                  }
                  while (v541 != v542);
                }
              }
            }
            else
            {
              __int16 v606 = 257;
              uint64_t v162 = (unsigned __int8 *)llvm::CastInst::Create(40, (uint64_t)v161, (uint64_t)v89, (const char **)&v602, 0);
              (*(void (**)(void *, unsigned __int8 *, uint64_t *, uint64_t *, void **))(*v618 + 16))(v618, v162, v600, v614, v615);
              if (v612)
              {
                v163 = (llvm::MDNode **)v611;
                int v164 = (llvm::MDNode **)((char *)v611 + 16 * v612);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v162, *(_DWORD *)v163, v163[1]);
                  v163 += 2;
                }
                while (v163 != v164);
              }
            }
          }
          __int16 v606 = 257;
          uint64_t v166 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v162, v159, 0);
          uint64_t v167 = (unsigned __int8 *)sub_1CC2429AC((uint64_t)&v611, (uint64_t)v162, (uint64_t)v166, (uint64_t)&v602, 0);
          sub_1CCB17A70((void *)a1, (uint64_t)*a2);
          __int16 v610 = 257;
          if (*(void *)v167 != v168)
          {
            if (v167[16] <= 0x14u)
            {
              uint64_t v167 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v617
                                         + 28))(v617, 49, v167, v168);
              if (v167) {
                BOOL v171 = v167[16] >= 0x1Cu;
              }
              else {
                BOOL v171 = 0;
              }
              if (v171)
              {
                (*(void (**)(void *, unsigned __int8 *, uint64_t *, uint64_t *, void **))(*v618 + 16))(v618, v167, &v607, v614, v615);
                if (v612)
                {
                  v543 = (llvm::MDNode **)v611;
                  unint64_t v544 = (llvm::MDNode **)((char *)v611 + 16 * v612);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v167, *(_DWORD *)v543, v543[1]);
                    v543 += 2;
                  }
                  while (v543 != v544);
                }
              }
            }
            else
            {
              __int16 v606 = 257;
              uint64_t v167 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v167, v168, (const char **)&v602, 0);
              (*(void (**)(void *, unsigned __int8 *, uint64_t *, uint64_t *, void **))(*v618 + 16))(v618, v167, &v607, v614, v615);
              if (v612)
              {
                v169 = (llvm::MDNode **)v611;
                int v170 = (llvm::MDNode **)((char *)v611 + 16 * v612);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v167, *(_DWORD *)v169, v169[1]);
                  v169 += 2;
                }
                while (v169 != v170);
              }
            }
          }
          uint64_t v117 = a1;
          __int16 v118 = (uint64_t *)a2;
          BOOL v116 = (llvm::Instruction *)v167;
LABEL_208:
          sub_1CCB24DAC(v117, v118, v116);
          sub_1CCB28C0C((void *)a1, (uint64_t)a2);
          goto LABEL_209;
        case 12112:
        case 12113:
        case 12114:
        case 12115:
        case 12116:
        case 12117:
        case 12118:
        case 12119:
        case 12120:
        case 12121:
        case 12122:
        case 12123:
        case 12124:
        case 12125:
        case 12126:
        case 12127:
        case 12259:
        case 12260:
        case 12261:
        case 12262:
        case 12263:
        case 12264:
        case 12265:
        case 12266:
        case 12267:
        case 12268:
        case 12269:
        case 12270:
        case 12271:
        case 12272:
        case 12273:
        case 12274:
          goto LABEL_14;
        case 12146:
        case 12147:
        case 12148:
          uint64_t v65 = 0;
          uint64_t v66 = **a2;
          v611 = v613;
          uint64_t v612 = 0x200000000;
          uint64_t v616 = v66;
          v617 = &v625;
          v618 = v626;
          uint64_t v619 = 0;
          int v620 = 0;
          __int16 v621 = 512;
          char v622 = 7;
          uint64_t v623 = 0;
          uint64_t v624 = 0;
          v625 = &unk_1F2616E88;
          v626[0] = &unk_1F2617008;
          uint64_t v67 = (unsigned __int8 *)a2[6];
          v614 = a2[5];
          v615 = a2 + 3;
          uint64_t v607 = (uint64_t)v67;
          if (v67)
          {
            llvm::MetadataTracking::track((uint64_t)&v607, v67, 2);
            uint64_t v65 = v607;
          }
          sub_1CB8461A4((uint64_t)&v611, 0, v65);
          if (!v607) {
            goto LABEL_84;
          }
          int v337 = *(unsigned __int8 *)v607;
          if ((v337 - 4) > 0x1E)
          {
            if ((v337 - 3) >= 0xFFFFFFFE) {
              uint64_t v449 = v607;
            }
            else {
              uint64_t v449 = 0;
            }
            if ((v337 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v339 = v449 + 8;
LABEL_549:
              v602 = &v607;
              sub_1CC5FA668(v339 + 16, &v602);
              goto LABEL_84;
            }
            if (v337 == 3) {
              *(void *)(v607 + 8) = 0;
            }
          }
          else if ((*(unsigned char *)(v607 + 1) & 0x7F) == 2 || *(_DWORD *)(v607 + 12))
          {
            uint64_t v338 = *(void *)(v607 + 16);
            if ((v338 & 4) != 0)
            {
              unint64_t v339 = v338 & 0xFFFFFFFFFFFFFFF8;
              if (v339) {
                goto LABEL_549;
              }
            }
          }
LABEL_84:
          int v68 = *((_DWORD *)a2 + 5);
          unint64_t v69 = &a2[-4 * (v68 & 0x7FFFFFF)];
          char v70 = *v69;
          uint64_t v71 = **v69;
          int v72 = v69[8];
          unsigned int v73 = v72 + 3;
          if (*((_DWORD *)v72 + 8) >= 0x41u) {
            unsigned int v73 = (void *)*v73;
          }
          unsigned int v74 = *(_DWORD *)(v71 + 32);
          unsigned int v75 = *(_DWORD *)v73;
          if ((v68 & 0x40000000) != 0) {
            char v70 = (uint64_t *)**(a2 - 1);
          }
          uint64_t v77 = (llvm::PoisonValue **)sub_1CCB16AB0(a1, (uint64_t)v70);
          unsigned int v78 = v75 & 1;
          v602 = &v604;
          uint64_t v603 = 0x800000000;
          if (v78 >= v74)
          {
            int v79 = 0;
          }
          else
          {
            LODWORD(v79) = 0;
            do
            {
              if ((unint64_t)v79 + 2 > HIDWORD(v603)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              BOOL v80 = (unsigned int *)&v604 + v79;
              *BOOL v80 = v78;
              v80[1] = v78;
              int v79 = (llvm::Type *)(v603 + 2);
              LODWORD(v603) = v603 + 2;
              v78 += 2;
            }
            while (v78 < v74);
          }
          __int16 v610 = 257;
          uint64_t v119 = llvm::PoisonValue::get(*v77, v76);
          uint64_t v120 = (uint64_t *)sub_1CB935A74((uint64_t)&v611, (uint64_t)v77, (uint64_t)v119, &v604, v79, (uint64_t)&v607);
          if (v602 != &v604) {
            free(v602);
          }
          int v121 = *((_DWORD *)a2 + 5);
          if ((v121 & 0x40000000) != 0) {
            BOOL v122 = (uint64_t **)*(a2 - 1);
          }
          else {
            BOOL v122 = &a2[-4 * (v121 & 0x7FFFFFF)];
          }
          __int16 v124 = (llvm::PoisonValue **)sub_1CCB16AB0(a1, (uint64_t)v122[4]);
          v602 = &v604;
          uint64_t v603 = 0x800000000;
          unsigned int v125 = (v75 >> 4) & 1;
          if (v125 >= v74)
          {
            uint64_t v126 = 0;
          }
          else
          {
            LODWORD(v126) = 0;
            do
            {
              if ((unint64_t)v126 + 2 > HIDWORD(v603)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v127 = (unsigned int *)&v604 + v126;
              *uint64_t v127 = v125;
              v127[1] = v125;
              uint64_t v126 = (llvm::Type *)(v603 + 2);
              LODWORD(v603) = v603 + 2;
              v125 += 2;
            }
            while (v125 < v74);
          }
          __int16 v610 = 257;
          uint64_t v128 = llvm::PoisonValue::get(*v124, v123);
          uint64_t v130 = (uint64_t *)sub_1CB935A74((uint64_t)&v611, (uint64_t)v124, (uint64_t)v128, &v604, v126, (uint64_t)&v607);
          if (v602 != &v604) {
            free(v602);
          }
          v602 = 0;
          uint64_t v603 = 0;
          v604 = &v611;
          uint64_t v605 = a1;
          int v131 = *((_DWORD *)a2 + 5);
          if ((v131 & 0x40000000) != 0) {
            __int16 v132 = *(a2 - 1);
          }
          else {
            __int16 v132 = (uint64_t *)&a2[-4 * (v131 & 0x7FFFFFF)];
          }
          uint64_t v133 = sub_1CCB176E8(a1, *v132, v129);
          sub_1CCB27684((uint64_t)&v602, v120, (uint64_t)v133);
          int v135 = *((_DWORD *)a2 + 5);
          if ((v135 & 0x40000000) != 0) {
            unsigned int v136 = (uint64_t **)*(a2 - 1);
          }
          else {
            unsigned int v136 = &a2[-4 * (v135 & 0x7FFFFFF)];
          }
          unint64_t v137 = sub_1CCB176E8(a1, (uint64_t)v136[4], v134);
          sub_1CCB27684((uint64_t)&v602, v130, (uint64_t)v137);
          sub_1CCB275E8((uint64_t)&v602, (uint64_t *)a2);
          goto LABEL_35;
        case 12184:
        case 12222:
          uint64_t v102 = 0;
          uint64_t v103 = **a2;
          v611 = v613;
          uint64_t v612 = 0x200000000;
          uint64_t v616 = v103;
          v617 = &v625;
          v618 = v626;
          uint64_t v619 = 0;
          int v620 = 0;
          __int16 v621 = 512;
          char v622 = 7;
          uint64_t v623 = 0;
          uint64_t v624 = 0;
          v625 = &unk_1F2616E88;
          v626[0] = &unk_1F2617008;
          uint64_t v104 = (unsigned __int8 *)a2[6];
          v614 = a2[5];
          v615 = a2 + 3;
          uint64_t v607 = (uint64_t)v104;
          if (v104)
          {
            llvm::MetadataTracking::track((uint64_t)&v607, v104, 2);
            uint64_t v102 = v607;
          }
          sub_1CB8461A4((uint64_t)&v611, 0, v102);
          if (!v607) {
            goto LABEL_125;
          }
          int v350 = *(unsigned __int8 *)v607;
          if ((v350 - 4) > 0x1E)
          {
            if ((v350 - 3) >= 0xFFFFFFFE) {
              uint64_t v460 = v607;
            }
            else {
              uint64_t v460 = 0;
            }
            if ((v350 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v352 = v460 + 8;
LABEL_583:
              v602 = &v607;
              sub_1CC5FA668(v352 + 16, &v602);
              goto LABEL_125;
            }
            if (v350 == 3) {
              *(void *)(v607 + 8) = 0;
            }
          }
          else if ((*(unsigned char *)(v607 + 1) & 0x7F) == 2 || *(_DWORD *)(v607 + 12))
          {
            uint64_t v351 = *(void *)(v607 + 16);
            if ((v351 & 4) != 0)
            {
              unint64_t v352 = v351 & 0xFFFFFFFFFFFFFFF8;
              if (v352) {
                goto LABEL_583;
              }
            }
          }
LABEL_125:
          sub_1CCB17A70((void *)a1, (uint64_t)*a2);
          uint64_t v106 = v105;
          int v107 = *((_DWORD *)a2 + 5);
          if ((v107 & 0x40000000) != 0) {
            uint64_t v108 = *(a2 - 1);
          }
          else {
            uint64_t v108 = (uint64_t *)&a2[-4 * (v107 & 0x7FFFFFF)];
          }
          uint64_t v230 = sub_1CCB16AB0(a1, *v108);
          int v231 = *((_DWORD *)a2 + 5);
          if ((v231 & 0x40000000) != 0) {
            int v232 = (uint64_t **)*(a2 - 1);
          }
          else {
            int v232 = &a2[-4 * (v231 & 0x7FFFFFF)];
          }
          uint64_t v233 = sub_1CCB16AB0(a1, (uint64_t)v232[4]);
          __int16 v606 = 257;
          unint64_t v234 = sub_1CB844AF4((uint64_t)&v611, v230, (uint64_t)v233, (uint64_t)&v602);
          uint64_t v237 = llvm::Constant::getNullValue(v106, v235, v236);
          __int16 v610 = 257;
          v238 = sub_1CB845F20((uint64_t)&v611, 33, v234, (uint64_t)v237, (uint64_t)&v607);
          v239 = v238;
          __int16 v601 = 257;
          if (*(llvm::Constant **)v238 != v106)
          {
            if (*((unsigned __int8 *)v238 + 16) <= 0x14u)
            {
              uint64_t v276 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, llvm::Constant *))*v617 + 28))(v617, 40, v238, v106);
              v239 = (llvm::Instruction *)v276;
              if (v276)
              {
                if (*(unsigned __int8 *)(v276 + 16) >= 0x1Cu)
                {
                  (*(void (**)(void *, uint64_t, uint64_t *, uint64_t *, void **))(*v618 + 16))(v618, v276, v600, v614, v615);
                  if (v612)
                  {
                    v551 = (llvm::MDNode **)v611;
                    v552 = (llvm::MDNode **)((char *)v611 + 16 * v612);
                    do
                    {
                      llvm::Instruction::setMetadata(v239, *(_DWORD *)v551, v551[1]);
                      v551 += 2;
                    }
                    while (v551 != v552);
                  }
                }
              }
            }
            else
            {
              __int16 v606 = 257;
              v239 = llvm::CastInst::Create(40, (uint64_t)v238, (uint64_t)v106, (const char **)&v602, 0);
              (*(void (**)(void *, llvm::Instruction *, uint64_t *, uint64_t *, void **))(*v618 + 16))(v618, v239, v600, v614, v615);
              if (v612)
              {
                uint64_t v240 = (llvm::MDNode **)v611;
                int v241 = (llvm::MDNode **)((char *)v611 + 16 * v612);
                do
                {
                  llvm::Instruction::setMetadata(v239, *(_DWORD *)v240, v240[1]);
                  v240 += 2;
                }
                while (v240 != v241);
              }
            }
          }
          sub_1CCB24DAC(a1, (uint64_t *)a2, v239);
          sub_1CCB28C0C((void *)a1, (uint64_t)a2);
          goto LABEL_325;
        case 12185:
        case 12186:
        case 12187:
        case 12188:
        case 12189:
        case 12190:
        case 12191:
        case 12215:
        case 12216:
        case 12217:
        case 12218:
        case 12219:
        case 12220:
        case 12223:
        case 12224:
        case 12225:
        case 12226:
        case 12227:
        case 12228:
        case 12229:
        case 12275:
        case 12276:
        case 12277:
        case 12278:
        case 12279:
        case 12280:
          uint64_t v5 = 0;
          uint64_t v6 = **a2;
          v611 = v613;
          uint64_t v612 = 0x200000000;
          uint64_t v616 = v6;
          v617 = &v625;
          v618 = v626;
          uint64_t v619 = 0;
          int v620 = 0;
          __int16 v621 = 512;
          char v622 = 7;
          uint64_t v623 = 0;
          uint64_t v624 = 0;
          v625 = &unk_1F2616E88;
          v626[0] = &unk_1F2617008;
          uint64_t v7 = (unsigned __int8 *)a2[6];
          v614 = a2[5];
          v615 = a2 + 3;
          uint64_t v607 = (uint64_t)v7;
          if (v7)
          {
            llvm::MetadataTracking::track((uint64_t)&v607, v7, 2);
            uint64_t v5 = v607;
          }
          sub_1CB8461A4((uint64_t)&v611, 0, v5);
          if (!v607) {
            goto LABEL_10;
          }
          int v155 = *(unsigned __int8 *)v607;
          if ((v155 - 4) > 0x1E)
          {
            if ((v155 - 3) >= 0xFFFFFFFE) {
              uint64_t v312 = v607;
            }
            else {
              uint64_t v312 = 0;
            }
            if ((v155 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v157 = v312 + 8;
LABEL_353:
              v602 = &v607;
              sub_1CC5FA668(v157 + 16, &v602);
              goto LABEL_10;
            }
            if (v155 == 3) {
              *(void *)(v607 + 8) = 0;
            }
          }
          else if ((*(unsigned char *)(v607 + 1) & 0x7F) == 2 || *(_DWORD *)(v607 + 12))
          {
            uint64_t v156 = *(void *)(v607 + 16);
            if ((v156 & 4) != 0)
            {
              unint64_t v157 = v156 & 0xFFFFFFFFFFFFFFF8;
              if (v157) {
                goto LABEL_353;
              }
            }
          }
LABEL_10:
          int v8 = *((_DWORD *)a2 + 5);
          if ((v8 & 0x40000000) != 0) {
            int v9 = *(a2 - 1);
          }
          else {
            int v9 = (uint64_t *)&a2[-4 * (v8 & 0x7FFFFFF)];
          }
          __int16 v19 = sub_1CCB16AB0(a1, *v9);
          int v20 = *((_DWORD *)a2 + 5);
          if ((v20 & 0x40000000) != 0) {
            __int16 v21 = (uint64_t **)*(a2 - 1);
          }
          else {
            __int16 v21 = &a2[-4 * (v20 & 0x7FFFFFF)];
          }
          __int16 v22 = sub_1CCB16AB0(a1, (uint64_t)v21[4]);
          __int16 v606 = 257;
          uint64_t v23 = (unsigned __int8 *)sub_1CB844AF4((uint64_t)&v611, v19, (uint64_t)v22, (uint64_t)&v602);
          sub_1CCB17A70((void *)a1, (uint64_t)*a2);
          uint64_t v26 = v25;
          __int16 v606 = 257;
          __int16 v27 = *(llvm::ConstantInt **)(*(void *)v616 + 1984);
          unsigned int v28 = *(_DWORD *)(*(void *)v616 + 1992);
          LODWORD(v608) = v28 >> 8;
          if (v28 >> 8 >= 0x41) {
            operator new[]();
          }
          uint64_t v607 = 0;
          uint64_t v29 = (unsigned __int8 *)llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v607, v24);
          if (v608 >= 0x41 && v607) {
            MEMORY[0x1D25D9CB0](v607, 0x1000C8000313F17);
          }
          unint64_t v30 = (uint64_t *)sub_1CB8445F4((uint64_t)&v611, v23, v29, (uint64_t)&v602);
          sub_1CCB17A70((void *)a1, *v30);
          if (v31) {
            uint64_t v34 = llvm::Constant::getNullValue(v31, v32, v33);
          }
          else {
            uint64_t v34 = 0;
          }
          __int16 v606 = 257;
          unint64_t v35 = (uint64_t *)sub_1CB845F20((uint64_t)&v611, 33, v30, (uint64_t)v34, (uint64_t)&v602);
          unint64_t v36 = sub_1CCB1F40C((void *)a1, (uint64_t)&v611, v35, v26, (llvm::Type *)1);
          sub_1CCB24DAC(a1, (uint64_t *)a2, v36);
          sub_1CCB28C0C((void *)a1, (uint64_t)a2);
          goto LABEL_35;
        case 12195:
        case 12199:
          int v38 = 2;
          goto LABEL_38;
        case 12196:
        case 12197:
        case 12200:
        case 12201:
        case 12233:
        case 12234:
        case 12235:
        case 12238:
        case 12239:
          int v38 = 1;
LABEL_38:
          int v39 = 0;
          goto LABEL_63;
        case 12202:
          if (!*(unsigned char *)(a1 + 456)) {
            return;
          }
          uint64_t v252 = 0;
          uint64_t v253 = **a2;
          v611 = v613;
          uint64_t v612 = 0x200000000;
          uint64_t v616 = v253;
          v617 = &v625;
          v618 = v626;
          uint64_t v619 = 0;
          int v620 = 0;
          __int16 v621 = 512;
          char v622 = 7;
          uint64_t v623 = 0;
          uint64_t v624 = 0;
          v625 = &unk_1F2616E88;
          v626[0] = &unk_1F2617008;
          uint64_t v254 = (unsigned __int8 *)a2[6];
          v614 = a2[5];
          v615 = a2 + 3;
          uint64_t v607 = (uint64_t)v254;
          if (v254)
          {
            llvm::MetadataTracking::track((uint64_t)&v607, v254, 2);
            uint64_t v252 = v607;
          }
          sub_1CB8461A4((uint64_t)&v611, 0, v252);
          if (!v607) {
            goto LABEL_282;
          }
          int v455 = *(unsigned __int8 *)v607;
          if ((v455 - 4) > 0x1E)
          {
            if ((v455 - 3) >= 0xFFFFFFFE) {
              uint64_t v499 = v607;
            }
            else {
              uint64_t v499 = 0;
            }
            if ((v455 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v457 = v499 + 8;
LABEL_668:
              v602 = &v607;
              sub_1CC5FA668(v457 + 16, &v602);
              goto LABEL_282;
            }
            if (v455 == 3) {
              *(void *)(v607 + 8) = 0;
            }
          }
          else if ((*(unsigned char *)(v607 + 1) & 0x7F) == 2 || *(_DWORD *)(v607 + 12))
          {
            uint64_t v456 = *(void *)(v607 + 16);
            if ((v456 & 4) != 0)
            {
              unint64_t v457 = v456 & 0xFFFFFFFFFFFFFFF8;
              if (v457) {
                goto LABEL_668;
              }
            }
          }
LABEL_282:
          v255 = (llvm::CastInst *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
          uint64_t v256 = (llvm::PointerType *)(*(void *)v616 + 1960);
          v257 = sub_1CCB163B4((void *)a1, v255, (uint64_t)&v611, v256, (llvm::Instruction *)0x100, 0);
          uint64_t v259 = v258;
          if (byte_1EBCE8E80) {
            sub_1CCB24814(a1, (uint64_t)v255, (unint64_t)a2);
          }
          uint64_t v607 = (uint64_t)"_ldmxcsr";
          __int16 v610 = 259;
          v260 = operator new(0x60uLL);
          v260[13] = v260[13] & 0x38000000 | 1;
          v261 = (llvm::Instruction *)(v260 + 8);
          *(void *)v260 = 0;
          *((void *)v260 + 1) = 0;
          *((void *)v260 + 2) = 0;
          *((void *)v260 + 3) = v260 + 8;
          __int16 v606 = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v260 + 8), (uint64_t)v256, (uint64_t)v257, (const char **)&v602, 0, 0, 0);
          (*(void (**)(void *, llvm::Instruction *, uint64_t *, uint64_t *, void **))(*v618 + 16))(v618, v261, &v607, v614, v615);
          if (v612)
          {
            uint64_t v447 = (llvm::MDNode **)v611;
            uint64_t v448 = (llvm::MDNode **)((char *)v611 + 16 * v612);
            do
            {
              llvm::Instruction::setMetadata(v261, *(_DWORD *)v447, v447[1]);
              v447 += 2;
            }
            while (v447 != v448);
          }
          uint64_t v264 = *(void *)(a1 + 8);
          int v265 = *(llvm::Type **)(v264 + 32);
          if (*(_DWORD *)(v264 + 4))
          {
            __int16 v610 = 257;
            char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v614[7] + 40) + 272), v265, 1);
            unint64_t v267 = operator new(0x60uLL);
            v267[13] = v267[13] & 0x38000000 | 1;
            uint64_t v268 = (llvm::Instruction *)(v267 + 8);
            *(void *)unint64_t v267 = 0;
            *((void *)v267 + 1) = 0;
            *((void *)v267 + 2) = 0;
            *((void *)v267 + 3) = v267 + 8;
            __int16 v606 = 257;
            llvm::LoadInst::LoadInst((llvm::Value *)(v267 + 8), (uint64_t)v265, v259, (const char **)&v602, 0, Alignment, 0);
            (*(void (**)(void *, llvm::Instruction *, uint64_t *, uint64_t *, void **))(*v618 + 16))(v618, v268, &v607, v614, v615);
            if (v612)
            {
              unint64_t v269 = (llvm::MDNode **)v611;
              v270 = (llvm::MDNode **)((char *)v611 + 16 * v612);
              do
              {
                llvm::Instruction::setMetadata(v268, *(_DWORD *)v269, v269[1]);
                v269 += 2;
              }
              while (v269 != v270);
            }
          }
          else
          {
            uint64_t v268 = llvm::Constant::getNullValue(*(llvm::Constant **)(v264 + 32), v262, v263);
          }
          sub_1CCB248DC(a1, (unint64_t)v261, (unint64_t)v268, (unint64_t)a2);
          goto LABEL_35;
        case 12214:
          uint64_t v242 = 0;
          uint64_t v243 = **a2;
          v611 = v613;
          uint64_t v612 = 0x200000000;
          uint64_t v616 = v243;
          v617 = &v625;
          v618 = v626;
          uint64_t v619 = 0;
          int v620 = 0;
          __int16 v621 = 512;
          char v622 = 7;
          uint64_t v623 = 0;
          uint64_t v624 = 0;
          v625 = &unk_1F2616E88;
          v626[0] = &unk_1F2617008;
          v244 = (unsigned __int8 *)a2[6];
          v614 = a2[5];
          v615 = a2 + 3;
          uint64_t v607 = (uint64_t)v244;
          if (v244)
          {
            llvm::MetadataTracking::track((uint64_t)&v607, v244, 2);
            uint64_t v242 = v607;
          }
          sub_1CB8461A4((uint64_t)&v611, 0, v242);
          if (!v607) {
            goto LABEL_271;
          }
          int v440 = *(unsigned __int8 *)v607;
          if ((v440 - 4) > 0x1E)
          {
            if ((v440 - 3) >= 0xFFFFFFFE) {
              uint64_t v493 = v607;
            }
            else {
              uint64_t v493 = 0;
            }
            if ((v440 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v442 = v493 + 8;
LABEL_649:
              v602 = &v607;
              sub_1CC5FA668(v442 + 16, &v602);
              goto LABEL_271;
            }
            if (v440 == 3) {
              *(void *)(v607 + 8) = 0;
            }
          }
          else if ((*(unsigned char *)(v607 + 1) & 0x7F) == 2 || *(_DWORD *)(v607 + 12))
          {
            uint64_t v441 = *(void *)(v607 + 16);
            if ((v441 & 4) != 0)
            {
              unint64_t v442 = v441 & 0xFFFFFFFFFFFFFFF8;
              if (v442) {
                goto LABEL_649;
              }
            }
          }
LABEL_271:
          uint64_t v245 = (llvm::CastInst *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
          uint64_t v246 = (llvm::PointerType *)(*(void *)v616 + 1960);
          v247 = sub_1CCB163B4((void *)a1, v245, (uint64_t)&v611, v246, (llvm::Instruction *)0x100, 1);
          sub_1CCB17A70((void *)a1, (uint64_t)v246);
          if (v248) {
            v251 = llvm::Constant::getNullValue(v248, v249, v250);
          }
          else {
            v251 = 0;
          }
          unint64_t v323 = (llvm::Value *)llvm::PointerType::get(v246, 0);
          __int16 v610 = 257;
          uint64_t v325 = sub_1CC277FE0((uint64_t)&v611, (llvm::CastInst *)v247, v323, (uint64_t)&v607, v324);
          char v326 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v614[7] + 40) + 272), *(llvm::Type **)v251, 1);
          uint64_t v327 = (char *)operator new(0x80uLL);
          *((_DWORD *)v327 + 21) = *((_DWORD *)v327 + 21) & 0x38000000 | 2;
          *(void *)uint64_t v327 = 0;
          *((void *)v327 + 2) = 0;
          *((void *)v327 + 1) = 0;
          *((void *)v327 + 5) = 0;
          *((void *)v327 + 6) = 0;
          *((void *)v327 + 4) = 0;
          *((void *)v327 + 8) = ***(void ***)v251 + 1576;
          int v328 = (llvm::Instruction *)(v327 + 64);
          *((void *)v327 + 3) = v327 + 64;
          *((void *)v327 + 7) = v327 + 64;
          *((void *)v327 + 9) = 0;
          v327[80] = 61;
          v327[81] = 0;
          *((_DWORD *)v327 + 21) = 2;
          *(_OWORD *)(v327 + 88) = 0u;
          *(_OWORD *)(v327 + 104) = 0u;
          *((_DWORD *)v327 + 30) = 0;
          uint64_t v329 = (void *)((char *)v251 + 8);
          uint64_t v330 = *((void *)v251 + 1);
          *(void *)uint64_t v327 = v251;
          *((void *)v327 + 1) = v330;
          if (v330) {
            *(void *)(v330 + 16) = v327 + 8;
          }
          *((void *)v327 + 2) = v329;
          *uint64_t v329 = v327;
          *((void *)v327 + 4) = v325;
          if (v325)
          {
            uint64_t v333 = *((void *)v325 + 1);
            uint64_t v332 = (void *)((char *)v325 + 8);
            uint64_t v331 = v333;
            *((void *)v327 + 5) = v333;
            if (v333) {
              *(void *)(v331 + 16) = v327 + 40;
            }
            *((void *)v327 + 6) = v332;
            void *v332 = v327 + 32;
          }
          *((_WORD *)v327 + 41) = 2 * (v326 & 0x3F);
          v327[124] = 1;
          __int16 v606 = 257;
          (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, void **))(*v618 + 16))(v618, v328, &v602, v614, v615);
          if (v612)
          {
            v461 = (llvm::MDNode **)v611;
            v462 = (llvm::MDNode **)((char *)v611 + 16 * v612);
            do
            {
              llvm::Instruction::setMetadata(v328, *(_DWORD *)v461, v461[1]);
              v461 += 2;
            }
            while (v461 != v462);
          }
          if (byte_1EBCE8E80) {
            sub_1CCB24814(a1, (uint64_t)v245, (unint64_t)a2);
          }
          goto LABEL_35;
        case 12243:
        case 12246:
          uint64_t v97 = 0;
          uint64_t v98 = **a2;
          v611 = v613;
          uint64_t v612 = 0x200000000;
          uint64_t v616 = v98;
          v617 = &v625;
          v618 = v626;
          uint64_t v619 = 0;
          int v620 = 0;
          __int16 v621 = 512;
          char v622 = 7;
          uint64_t v623 = 0;
          uint64_t v624 = 0;
          v625 = &unk_1F2616E88;
          v626[0] = &unk_1F2617008;
          uint64_t v99 = (unsigned __int8 *)a2[6];
          v614 = a2[5];
          v615 = a2 + 3;
          uint64_t v607 = (uint64_t)v99;
          if (v99)
          {
            llvm::MetadataTracking::track((uint64_t)&v607, v99, 2);
            uint64_t v97 = v607;
          }
          sub_1CB8461A4((uint64_t)&v611, 0, v97);
          if (!v607) {
            goto LABEL_120;
          }
          int v347 = *(unsigned __int8 *)v607;
          if ((v347 - 4) > 0x1E)
          {
            if ((v347 - 3) >= 0xFFFFFFFE) {
              uint64_t v459 = v607;
            }
            else {
              uint64_t v459 = 0;
            }
            if ((v347 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v349 = v459 + 8;
LABEL_577:
              v602 = &v607;
              sub_1CC5FA668(v349 + 16, &v602);
              goto LABEL_120;
            }
            if (v347 == 3) {
              *(void *)(v607 + 8) = 0;
            }
          }
          else if ((*(unsigned char *)(v607 + 1) & 0x7F) == 2 || *(_DWORD *)(v607 + 12))
          {
            uint64_t v348 = *(void *)(v607 + 16);
            if ((v348 & 4) != 0)
            {
              unint64_t v349 = v348 & 0xFFFFFFFFFFFFFFF8;
              if (v349) {
                goto LABEL_577;
              }
            }
          }
LABEL_120:
          int v100 = *((_DWORD *)a2 + 5);
          if ((v100 & 0x40000000) != 0) {
            char v101 = *(a2 - 1);
          }
          else {
            char v101 = (uint64_t *)&a2[-4 * (v100 & 0x7FFFFFF)];
          }
          int v225 = sub_1CCB16AB0(a1, *v101);
          int v226 = *((_DWORD *)a2 + 5);
          if ((v226 & 0x40000000) != 0) {
            v227 = (uint64_t **)*(a2 - 1);
          }
          else {
            v227 = &a2[-4 * (v226 & 0x7FFFFFF)];
          }
          uint64_t v228 = sub_1CCB16AB0(a1, (uint64_t)v227[4]);
          __int16 v606 = 257;
          uint64_t v229 = sub_1CB844AF4((uint64_t)&v611, v225, (uint64_t)v228, (uint64_t)&v602);
          uint64_t v607 = 0x100000002;
          __int16 v606 = 257;
          break;
        case 12248:
        case 12249:
        case 12250:
        case 12296:
LABEL_50:
          uint64_t v47 = 0;
LABEL_274:
          sub_1CCB2F5EC((void *)a1, (uint64_t *)a2, (llvm::LLVMContext *)v47);
          return;
        case 12254:
          goto LABEL_80;
        default:
          goto LABEL_443;
      }
LABEL_339:
      v308 = sub_1CB935A74((uint64_t)&v611, (uint64_t)v225, (uint64_t)v229, &v607, (llvm::Type *)2, (uint64_t)&v602);
      sub_1CCB24DAC(a1, (uint64_t *)a2, v308);
      sub_1CCB28C0C((void *)a1, (uint64_t)a2);
      goto LABEL_340;
    }
    if (v4 != 12304)
    {
      if (v4 == 12343)
      {
        int v64 = 8;
      }
      else
      {
        if (v4 != 12344) {
          goto LABEL_443;
        }
LABEL_80:
        int v64 = 0;
      }
LABEL_296:
      sub_1CCB30380((void *)a1, (uint64_t)a2, v64);
      return;
    }
    uint64_t v271 = 0;
    uint64_t v272 = **a2;
    v611 = v613;
    uint64_t v612 = 0x200000000;
    uint64_t v616 = v272;
    v617 = &v625;
    v618 = v626;
    uint64_t v619 = 0;
    int v620 = 0;
    __int16 v621 = 512;
    char v622 = 7;
    uint64_t v623 = 0;
    uint64_t v624 = 0;
    v625 = &unk_1F2616E88;
    v626[0] = &unk_1F2617008;
    v273 = (unsigned __int8 *)a2[6];
    v614 = a2[5];
    v615 = a2 + 3;
    uint64_t v607 = (uint64_t)v273;
    if (v273)
    {
      llvm::MetadataTracking::track((uint64_t)&v607, v273, 2);
      uint64_t v271 = v607;
    }
    sub_1CB8461A4((uint64_t)&v611, 0, v271);
    if (v607)
    {
      int v443 = *(unsigned __int8 *)v607;
      if ((v443 - 4) > 0x1E)
      {
        if ((v443 - 3) >= 0xFFFFFFFE) {
          uint64_t v494 = v607;
        }
        else {
          uint64_t v494 = 0;
        }
        if ((v443 - 3) < 0xFFFFFFFE)
        {
          if (v443 == 3) {
            *(void *)(v607 + 8) = 0;
          }
          goto LABEL_293;
        }
        unint64_t v445 = v494 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v607 + 1) & 0x7F) != 2 && !*(_DWORD *)(v607 + 12)) {
          goto LABEL_293;
        }
        uint64_t v444 = *(void *)(v607 + 16);
        if ((v444 & 4) == 0) {
          goto LABEL_293;
        }
        unint64_t v445 = v444 & 0xFFFFFFFFFFFFFFF8;
        if (!v445) {
          goto LABEL_293;
        }
      }
      v602 = &v607;
      sub_1CC5FA668(v445 + 16, &v602);
    }
LABEL_293:
    int v274 = *((_DWORD *)a2 + 5);
    if ((v274 & 0x40000000) != 0) {
      char v275 = *(a2 - 1);
    }
    else {
      char v275 = (uint64_t *)&a2[-4 * (v274 & 0x7FFFFFF)];
    }
    int v225 = sub_1CCB16AB0(a1, *v275);
    int v306 = *((_DWORD *)a2 + 5);
    if ((v306 & 0x40000000) != 0) {
      v307 = (uint64_t **)*(a2 - 1);
    }
    else {
      v307 = &a2[-4 * (v306 & 0x7FFFFFF)];
    }
    uint64_t v229 = sub_1CCB16AB0(a1, (uint64_t)v307[4]);
    uint64_t v607 = 0x100000002;
    __int16 v606 = 257;
    goto LABEL_339;
  }
  if (v4 > 11696)
  {
    char v10 = v4 + 79;
    if ((v4 - 11697) <= 0x23)
    {
      if (((1 << v10) & 0x3F01FF83FLL) != 0)
      {
LABEL_14:
        int v11 = 0;
LABEL_41:
        sub_1CCB2EE54((void *)a1, (uint64_t)a2, v11);
        return;
      }
      if (((1 << v10) & 0xC01E000C0) != 0)
      {
LABEL_40:
        int v11 = 1;
        goto LABEL_41;
      }
    }
    if ((v4 - 12026) >= 8)
    {
      unsigned int v53 = v4 - 11804;
      BOOL v564 = v53 > 5;
      int v54 = (1 << v53) & 0x33;
      if (!v564 && v54 != 0)
      {
LABEL_62:
        int v38 = 1;
        int v39 = 1;
LABEL_63:
        sub_1CCB2E790((void *)a1, (uint64_t *)a2, v38, v39);
        return;
      }
LABEL_443:
      int v374 = *((unsigned __int8 *)a2 + 16);
      if (v374 == 84)
      {
        uint64_t v375 = 0;
      }
      else if (v374 == 39)
      {
        uint64_t v375 = (*((_DWORD *)a2 + 20) + 1);
      }
      else
      {
        uint64_t v375 = 2;
      }
      int v376 = *((_DWORD *)a2 + 5);
      if (v376 < 0 && (int v545 = &a2[-4 * (v376 & 0x7FFFFFF)], v546 = (uint64_t)*(v545 - 1), (v546 & 0xFFFFFFFF0) != 0))
      {
        uint64_t v378 = -(uint64_t)(v376 & 0x7FFFFFF);
        int v377 = *((_DWORD *)v545 - 3) - *(_DWORD *)((char *)v545 - v546);
      }
      else
      {
        int v377 = 0;
        uint64_t v378 = -(uint64_t)(v376 & 0x7FFFFFF);
      }
      uint64_t v379 = (uint64_t)&(&a2[4 * -v377])[-4 * v375];
      uint64_t v380 = &a2[4 * v378];
      unint64_t v381 = (unint64_t)(v379 - (void)v380 - 32) >> 5;
      if (!v381) {
        goto LABEL_855;
      }
      if (v381 != 1)
      {
        if (v381 == 2 && *(unsigned char *)(**v380 + 8) == 15 && (*(_DWORD *)(*v380[4] + 8) & 0xFE) == 0x12)
        {
          int v382 = (llvm::Type *)*a2;
          if (*((unsigned char *)*a2 + 8) == 7)
          {
            uint64_t v383 = a2[8];
            if (!v383 || (*((unsigned char *)v383 + 17) & 0x30) == 0)
            {
              if (v376 < 0)
              {
                uint64_t v590 = (uint64_t)*(v380 - 1);
                v588 = v380 - 1;
                uint64_t v589 = v590;
                if (v590)
                {
                  uint64_t v591 = -v589;
                  while (1)
                  {
                    unsigned int v592 = (*(_DWORD **)((char *)v588 + v591))[2];
                    BOOL v564 = v592 > 7;
                    int v593 = (1 << v592) & 0x83;
                    if (v564 || v593 == 0) {
                      break;
                    }
                    v591 += 16;
                    if (!v591) {
                      goto LABEL_456;
                    }
                  }
LABEL_459:
                  uint64_t v384 = 0;
                  uint64_t v385 = *(void *)v382;
                  v611 = v613;
                  uint64_t v612 = 0x200000000;
                  uint64_t v616 = v385;
                  v617 = &v625;
                  v618 = v626;
                  uint64_t v619 = 0;
                  int v620 = 0;
                  __int16 v621 = 512;
                  char v622 = 7;
                  uint64_t v623 = 0;
                  uint64_t v624 = 0;
                  v625 = &unk_1F2616E88;
                  v626[0] = &unk_1F2617008;
                  char v386 = (unsigned __int8 *)a2[6];
                  v614 = a2[5];
                  v615 = a2 + 3;
                  uint64_t v607 = (uint64_t)v386;
                  if (v386)
                  {
                    llvm::MetadataTracking::track((uint64_t)&v607, v386, 2);
                    uint64_t v384 = v607;
                  }
                  sub_1CB8461A4((uint64_t)&v611, 0, v384);
                  if (!v607) {
                    goto LABEL_462;
                  }
                  int v530 = *(unsigned __int8 *)v607;
                  if ((v530 - 4) > 0x1E)
                  {
                    if ((v530 - 3) >= 0xFFFFFFFE) {
                      uint64_t v538 = v607;
                    }
                    else {
                      uint64_t v538 = 0;
                    }
                    if ((v530 - 3) < 0xFFFFFFFE)
                    {
                      if (v530 == 3) {
                        *(void *)(v607 + 8) = 0;
                      }
                      goto LABEL_462;
                    }
                    unint64_t v532 = v538 + 8;
                  }
                  else
                  {
                    if ((*(unsigned char *)(v607 + 1) & 0x7F) != 2 && !*(_DWORD *)(v607 + 12)) {
                      goto LABEL_462;
                    }
                    uint64_t v531 = *(void *)(v607 + 16);
                    if ((v531 & 4) == 0) {
                      goto LABEL_462;
                    }
                    unint64_t v532 = v531 & 0xFFFFFFFFFFFFFFF8;
                    if (!v532) {
                      goto LABEL_462;
                    }
                  }
                  v602 = &v607;
                  sub_1CC5FA668(v532 + 16, &v602);
LABEL_462:
                  int v387 = *((_DWORD *)a2 + 5);
                  uint64_t v388 = (llvm::CastInst **)&a2[-4 * (v387 & 0x7FFFFFF)];
                  uint64_t v389 = *v388;
                  if ((v387 & 0x40000000) != 0) {
                    uint64_t v388 = (llvm::CastInst **)*(a2 - 1);
                  }
                  unint64_t v390 = sub_1CCB16AB0(a1, (uint64_t)v388[4]);
                  long long v391 = sub_1CCB163B4((void *)a1, v389, (uint64_t)&v611, *(llvm::PointerType **)v390, (llvm::Instruction *)0x100, 1);
                  uint64_t v393 = v392;
                  int v394 = (char *)operator new(0x80uLL);
                  *((_DWORD *)v394 + 21) = *((_DWORD *)v394 + 21) & 0x38000000 | 2;
                  *(void *)int v394 = 0;
                  *((void *)v394 + 2) = 0;
                  *((void *)v394 + 1) = 0;
                  *((void *)v394 + 5) = 0;
                  *((void *)v394 + 6) = 0;
                  *((void *)v394 + 4) = 0;
                  uint64_t v395 = (unsigned __int8 **)(v394 + 32);
                  *((void *)v394 + 8) = ***(void ***)v390 + 1576;
                  uint64_t v396 = (llvm::Instruction *)(v394 + 64);
                  *((void *)v394 + 3) = v394 + 64;
                  *((void *)v394 + 7) = v394 + 64;
                  *((void *)v394 + 9) = 0;
                  v394[80] = 61;
                  v394[81] = 0;
                  *((_WORD *)v394 + 41) = 0;
                  *((_DWORD *)v394 + 21) = 2;
                  *(_OWORD *)(v394 + 88) = 0u;
                  *(_OWORD *)(v394 + 104) = 0u;
                  *((_DWORD *)v394 + 30) = 0;
                  *(void *)int v394 = v390;
                  uint64_t v399 = *((void *)v390 + 1);
                  uint64_t v398 = (void *)((char *)v390 + 8);
                  uint64_t v397 = v399;
                  *((void *)v394 + 1) = v399;
                  if (v399) {
                    *(void *)(v397 + 16) = v394 + 8;
                  }
                  *((void *)v394 + 2) = v398;
                  *uint64_t v398 = v394;
                  if (*((void *)v394 + 4))
                  {
                    **((void **)v394 + 6) = *((void *)v394 + 5);
                    uint64_t v595 = *((void *)v394 + 5);
                    if (v595) {
                      *(void *)(v595 + 16) = *((void *)v394 + 6);
                    }
                  }
                  *uint64_t v395 = v391;
                  if (v391)
                  {
                    uint64_t v402 = *((void *)v391 + 1);
                    __int16 v401 = (unsigned __int8 ***)(v391 + 8);
                    uint64_t v400 = v402;
                    *((void *)v394 + 5) = v402;
                    if (v402) {
                      *(void *)(v400 + 16) = v394 + 40;
                    }
                    *((void *)v394 + 6) = v401;
                    *__int16 v401 = v395;
                  }
                  *((_WORD *)v394 + 41) = 0;
                  v394[124] = 1;
                  __int16 v606 = 257;
                  (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, void **))(*v618 + 16))(v618, v396, &v602, v614, v615);
                  if (v612)
                  {
                    BOOL v536 = (llvm::MDNode **)v611;
                    int v537 = (llvm::MDNode **)((char *)v611 + 16 * v612);
                    do
                    {
                      llvm::Instruction::setMetadata(v396, *(_DWORD *)v536, v536[1]);
                      v536 += 2;
                    }
                    while (v536 != v537);
                  }
                  if (byte_1EBCE8E80) {
                    sub_1CCB24814(a1, (uint64_t)v389, (unint64_t)a2);
                  }
                  if (*(_DWORD *)(*(void *)(a1 + 8) + 4))
                  {
                    int v404 = *((_DWORD *)a2 + 5);
                    if ((v404 & 0x40000000) != 0) {
                      unint64_t v405 = (uint64_t **)*(a2 - 1);
                    }
                    else {
                      unint64_t v405 = &a2[-4 * (v404 & 0x7FFFFFF)];
                    }
                    v506 = sub_1CCB176E8(a1, (uint64_t)v405[4], v403);
                    char v507 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v614[7] + 40) + 272), *(llvm::Type **)v506, 1);
                    v508 = (char *)operator new(0x80uLL);
                    *((_DWORD *)v508 + 21) = *((_DWORD *)v508 + 21) & 0x38000000 | 2;
                    *(void *)v508 = 0;
                    *((void *)v508 + 2) = 0;
                    *((void *)v508 + 1) = 0;
                    *((void *)v508 + 5) = 0;
                    *((void *)v508 + 6) = 0;
                    *((void *)v508 + 4) = 0;
                    *((void *)v508 + 8) = ***(void ***)v506 + 1576;
                    v509 = (llvm::Instruction *)(v508 + 64);
                    *((void *)v508 + 3) = v508 + 64;
                    *((void *)v508 + 7) = v508 + 64;
                    *((void *)v508 + 9) = 0;
                    v508[80] = 61;
                    v508[81] = 0;
                    *((_DWORD *)v508 + 21) = 2;
                    *(_OWORD *)(v508 + 88) = 0u;
                    *(_OWORD *)(v508 + 104) = 0u;
                    *((_DWORD *)v508 + 30) = 0;
                    v510 = (void *)((char *)v506 + 8);
                    uint64_t v511 = *((void *)v506 + 1);
                    *(void *)v508 = v506;
                    *((void *)v508 + 1) = v511;
                    if (v511) {
                      *(void *)(v511 + 16) = v508 + 8;
                    }
                    *((void *)v508 + 2) = v510;
                    void *v510 = v508;
                    *((void *)v508 + 4) = v393;
                    if (v393)
                    {
                      uint64_t v514 = *(void *)(v393 + 8);
                      uint64_t v513 = (void *)(v393 + 8);
                      uint64_t v512 = v514;
                      *((void *)v508 + 5) = v514;
                      if (v514) {
                        *(void *)(v512 + 16) = v508 + 40;
                      }
                      *((void *)v508 + 6) = v513;
                      *uint64_t v513 = v508 + 32;
                    }
                    *((_WORD *)v508 + 41) = 2 * (v507 & 0x3F);
                    v508[124] = 1;
                    __int16 v606 = 257;
                    (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, void **))(*v618 + 16))(v618, v509, &v602, v614, v615);
                    if (v612)
                    {
                      v515 = (llvm::MDNode **)v611;
                      v516 = (llvm::MDNode **)((char *)v611 + 16 * v612);
                      do
                      {
                        llvm::Instruction::setMetadata(v509, *(_DWORD *)v515, v515[1]);
                        v515 += 2;
                      }
                      while (v515 != v516);
                    }
                  }
                  goto LABEL_35;
                }
              }
LABEL_456:
              if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 45) & 1) == 0
                && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44) & 1) == 0)
              {
                int v382 = (llvm::Type *)*a2;
                goto LABEL_459;
              }
            }
          }
        }
LABEL_809:
        __int16 v560 = a2[8];
        if (v560 && (*((unsigned char *)v560 + 17) & 0x10) != 0
          || ((LODWORD(v611) = 7, !sub_1CC5CB59C((uint64_t)a2, (__int32 *)&v611, 1uLL))
           || (uint64_t v585 = (uint64_t)*(a2 - 4)) != 0
           && !*(unsigned char *)(v585 + 16)
           && *(uint64_t **)(v585 + 24) == a2[9]
           && *(_DWORD *)(v585 + 36) == 7)
          && llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44))
        {
          uint64_t v561 = (uint64_t)*a2;
          int v562 = *((_DWORD *)*a2 + 2);
          if (((*a2)[1] & 0xFE) == 0x12)
          {
            unsigned int v563 = *(unsigned __int8 *)(**(void **)(v561 + 16) + 8);
            if (v563 == 13) {
              goto LABEL_821;
            }
          }
          else
          {
            unsigned int v563 = *((_DWORD *)*a2 + 2);
            if (v562 == 13) {
              goto LABEL_821;
            }
          }
          BOOL v564 = v562 != 10 && v563 > 6;
          if (!v564)
          {
LABEL_821:
            int v565 = *((unsigned __int8 *)a2 + 16);
            if (v565 == 84)
            {
              uint64_t v566 = 0;
            }
            else if (v565 == 39)
            {
              uint64_t v566 = (*((_DWORD *)a2 + 20) + 1);
            }
            else
            {
              uint64_t v566 = 2;
            }
            uint64_t v567 = 0;
            int v568 = *((_DWORD *)a2 + 5);
            uint64_t v569 = -(uint64_t)(v568 & 0x7FFFFFF);
            if (v568 < 0)
            {
              v586 = &a2[-4 * (v568 & 0x7FFFFFF)];
              uint64_t v587 = (uint64_t)*(v586 - 1);
              if ((v587 & 0xFFFFFFFF0) != 0) {
                uint64_t v567 = (*((_DWORD *)v586 - 3) - *(_DWORD *)((char *)v586 - v587));
              }
              else {
                uint64_t v567 = 0;
              }
            }
            uint64_t v570 = (uint64_t)&(&a2[-4 * v566])[-4 * v567];
            v571 = &a2[4 * v569];
            unint64_t v572 = v570 - (void)v571 - 32;
            unint64_t v573 = v572 >> 5;
            uint64_t v574 = v572 & 0x1FFFFFFFE0;
            if ((v572 & 0x1FFFFFFFE0) != 0)
            {
              uint64_t v575 = -(uint64_t)v573;
              while (**v571 == v561)
              {
                v571 += 4;
                BOOL v165 = __CFADD__(v575++, 1);
                if (v165) {
                  goto LABEL_829;
                }
              }
              goto LABEL_855;
            }
LABEL_829:
            uint64_t v576 = 0;
            uint64_t v577 = *(void *)v561;
            v611 = v613;
            uint64_t v612 = 0x200000000;
            uint64_t v616 = v577;
            v617 = &v625;
            v618 = v626;
            uint64_t v619 = 0;
            int v620 = 0;
            __int16 v621 = 512;
            char v622 = 7;
            uint64_t v623 = 0;
            uint64_t v624 = 0;
            v625 = &unk_1F2616E88;
            v626[0] = &unk_1F2617008;
            uint64_t v578 = (unsigned __int8 *)a2[6];
            v614 = a2[5];
            v615 = a2 + 3;
            uint64_t v607 = (uint64_t)v578;
            if (v578)
            {
              llvm::MetadataTracking::track((uint64_t)&v607, v578, 2);
              uint64_t v576 = v607;
            }
            sub_1CB8461A4((uint64_t)&v611, 0, v576);
            if (!v607) {
              goto LABEL_832;
            }
            int v581 = *(unsigned __int8 *)v607;
            if ((v581 - 4) > 0x1E)
            {
              if ((v581 - 3) >= 0xFFFFFFFE) {
                uint64_t v584 = v607;
              }
              else {
                uint64_t v584 = 0;
              }
              if ((v581 - 3) < 0xFFFFFFFE)
              {
                if (v581 == 3) {
                  *(void *)(v607 + 8) = 0;
                }
                goto LABEL_832;
              }
              unint64_t v583 = v584 + 8;
            }
            else
            {
              if ((*(unsigned char *)(v607 + 1) & 0x7F) != 2 && !*(_DWORD *)(v607 + 12)) {
                goto LABEL_832;
              }
              uint64_t v582 = *(void *)(v607 + 16);
              if ((v582 & 4) == 0) {
                goto LABEL_832;
              }
              unint64_t v583 = v582 & 0xFFFFFFFFFFFFFFF8;
              if (!v583) {
                goto LABEL_832;
              }
            }
            v602 = &v607;
            sub_1CC5FA668(v583 + 16, &v602);
LABEL_832:
            v602 = 0;
            uint64_t v603 = 0;
            v604 = &v611;
            uint64_t v605 = a1;
            if (v574)
            {
              uint64_t v579 = -(uint64_t)v573;
              v580 = a2;
              do
              {
                sub_1CCB27574((uint64_t)&v602, (uint64_t)v580[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)]);
                v580 += 4;
                BOOL v165 = __CFADD__(v579++, 1);
              }
              while (!v165);
            }
            sub_1CCB275E8((uint64_t)&v602, (uint64_t *)a2);
            goto LABEL_340;
          }
        }
LABEL_855:
        sub_1CCB249B0((llvm *)a1, (unint64_t)a2);
        return;
      }
      if (*(unsigned char *)(**v380 + 8) != 15 || ((*a2)[1] & 0xFE) != 0x12) {
        goto LABEL_809;
      }
      v406 = a2[8];
      if (!v406 || (*((unsigned char *)v406 + 17) & 0x30) == 0)
      {
        if (v376 < 0)
        {
          uint64_t v555 = (uint64_t)*(v380 - 1);
          v553 = v380 - 1;
          uint64_t v554 = v555;
          if (v555)
          {
            uint64_t v556 = -v554;
            do
            {
              unsigned int v557 = (*(_DWORD **)((char *)v553 + v556))[2];
              BOOL v564 = v557 > 7;
              int v558 = (1 << v557) & 0x83;
              if (v564 || v558 == 0) {
                goto LABEL_809;
              }
              v556 += 16;
            }
            while (v556);
          }
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 45) & 1) == 0
          && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44))
        {
          goto LABEL_809;
        }
      }
      uint64_t v407 = 0;
      uint64_t v408 = **a2;
      v611 = v613;
      uint64_t v612 = 0x200000000;
      uint64_t v616 = v408;
      v617 = &v625;
      v618 = v626;
      uint64_t v619 = 0;
      int v620 = 0;
      __int16 v621 = 512;
      char v622 = 7;
      uint64_t v623 = 0;
      uint64_t v624 = 0;
      v625 = &unk_1F2616E88;
      v626[0] = &unk_1F2617008;
      uint64_t v409 = (unsigned __int8 *)a2[6];
      v614 = a2[5];
      v615 = a2 + 3;
      uint64_t v607 = (uint64_t)v409;
      if (v409)
      {
        llvm::MetadataTracking::track((uint64_t)&v607, v409, 2);
        uint64_t v407 = v607;
      }
      sub_1CB8461A4((uint64_t)&v611, 0, v407);
      if (!v607)
      {
LABEL_487:
        v410 = (llvm::CastInst *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
        sub_1CCB17A70((void *)a1, (uint64_t)*a2);
        if (*(unsigned char *)(a1 + 457))
        {
          uint64_t v412 = (uint64_t)v411;
          v413 = sub_1CCB163B4((void *)a1, v410, (uint64_t)&v611, v411, (llvm::Instruction *)0x100, 0);
          uint64_t v415 = v414;
          uint64_t v607 = (uint64_t)"_msld";
          __int16 v610 = 259;
          v416 = operator new(0x60uLL);
          v416[13] = v416[13] & 0x38000000 | 1;
          uint64_t v417 = (llvm::Instruction *)(v416 + 8);
          *(void *)v416 = 0;
          *((void *)v416 + 1) = 0;
          *((void *)v416 + 2) = 0;
          *((void *)v416 + 3) = v416 + 8;
          __int16 v606 = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v416 + 8), v412, (uint64_t)v413, (const char **)&v602, 0, 0, 0);
          (*(void (**)(void *, llvm::Instruction *, uint64_t *, uint64_t *, void **))(*v618 + 16))(v618, v417, &v607, v614, v615);
          if (v612)
          {
            int v525 = (llvm::MDNode **)v611;
            uint64_t v526 = (llvm::MDNode **)((char *)v611 + 16 * v612);
            do
            {
              llvm::Instruction::setMetadata(v417, *(_DWORD *)v525, v525[1]);
              v525 += 2;
            }
            while (v525 != v526);
          }
          sub_1CCB24DAC(a1, (uint64_t *)a2, v417);
        }
        else
        {
          sub_1CCB17A70((void *)a1, (uint64_t)*a2);
          if (v495) {
            v498 = llvm::Constant::getNullValue(v495, v496, v497);
          }
          else {
            v498 = 0;
          }
          sub_1CCB24DAC(a1, (uint64_t *)a2, v498);
          uint64_t v415 = 0;
        }
        if (byte_1EBCE8E80) {
          sub_1CCB24814(a1, (uint64_t)v410, (unint64_t)a2);
        }
        uint64_t v500 = *(void *)(a1 + 8);
        if (*(_DWORD *)(v500 + 4))
        {
          v501 = *(llvm::Type **)(v500 + 32);
          if (!*(unsigned char *)(a1 + 457))
          {
            v505 = llvm::Constant::getNullValue(*(llvm::Constant **)(v500 + 32), v418, v419);
            if (!*(_DWORD *)(*(void *)(a1 + 8) + 4)) {
              goto LABEL_35;
            }
            v504 = v505;
            goto LABEL_696;
          }
          __int16 v610 = 257;
          char v502 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v614[7] + 40) + 272), v501, 1);
          v503 = operator new(0x60uLL);
          v503[13] = v503[13] & 0x38000000 | 1;
          v504 = (llvm::Instruction *)(v503 + 8);
          *(void *)v503 = 0;
          *((void *)v503 + 1) = 0;
          *((void *)v503 + 2) = 0;
          *((void *)v503 + 3) = v503 + 8;
          __int16 v606 = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v503 + 8), (uint64_t)v501, v415, (const char **)&v602, 0, v502, 0);
          (*(void (**)(void *, llvm::Instruction *, uint64_t *, uint64_t *, void **))(*v618 + 16))(v618, v504, &v607, v614, v615);
          if (v612)
          {
            int v528 = (llvm::MDNode **)v611;
            uint64_t v529 = (llvm::MDNode **)((char *)v611 + 16 * v612);
            do
            {
              llvm::Instruction::setMetadata(v504, *(_DWORD *)v528, v528[1]);
              v528 += 2;
            }
            while (v528 != v529);
          }
          if (*(_DWORD *)(*(void *)(a1 + 8) + 4)) {
LABEL_696:
          }
            *sub_1CD694530(a1 + 368, (uint64_t)a2) = (unint64_t)v504;
        }
LABEL_35:
        int v37 = v611;
        if (v611 == v613) {
          return;
        }
        goto LABEL_771;
      }
      int v522 = *(unsigned __int8 *)v607;
      if ((v522 - 4) > 0x1E)
      {
        if ((v522 - 3) >= 0xFFFFFFFE) {
          uint64_t v535 = v607;
        }
        else {
          uint64_t v535 = 0;
        }
        if ((v522 - 3) < 0xFFFFFFFE)
        {
          if (v522 == 3) {
            *(void *)(v607 + 8) = 0;
          }
          goto LABEL_487;
        }
        unint64_t v524 = v535 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v607 + 1) & 0x7F) != 2 && !*(_DWORD *)(v607 + 12)) {
          goto LABEL_487;
        }
        uint64_t v523 = *(void *)(v607 + 16);
        if ((v523 & 4) == 0) {
          goto LABEL_487;
        }
        unint64_t v524 = v523 & 0xFFFFFFFFFFFFFFF8;
        if (!v524) {
          goto LABEL_487;
        }
      }
      v602 = &v607;
      sub_1CC5FA668(v524 + 16, &v602);
      goto LABEL_487;
    }
    uint64_t v40 = 0;
    uint64_t v41 = **a2;
    v611 = v613;
    uint64_t v612 = 0x200000000;
    uint64_t v616 = v41;
    v617 = &v625;
    v618 = v626;
    uint64_t v619 = 0;
    int v620 = 0;
    __int16 v621 = 512;
    char v622 = 7;
    uint64_t v623 = 0;
    uint64_t v624 = 0;
    v625 = &unk_1F2616E88;
    v626[0] = &unk_1F2617008;
    uint64_t v42 = (unsigned __int8 *)a2[6];
    v614 = a2[5];
    v615 = a2 + 3;
    uint64_t v607 = (uint64_t)v42;
    if (v42)
    {
      llvm::MetadataTracking::track((uint64_t)&v607, v42, 2);
      uint64_t v40 = v607;
    }
    sub_1CB8461A4((uint64_t)&v611, 0, v40);
    if (!v607) {
      goto LABEL_48;
    }
    int v309 = *(unsigned __int8 *)v607;
    if ((v309 - 4) > 0x1E)
    {
      if ((v309 - 3) >= 0xFFFFFFFE) {
        uint64_t v343 = v607;
      }
      else {
        uint64_t v343 = 0;
      }
      if ((v309 - 3) < 0xFFFFFFFE)
      {
        if (v309 == 3) {
          *(void *)(v607 + 8) = 0;
        }
        goto LABEL_48;
      }
      unint64_t v311 = v343 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v607 + 1) & 0x7F) != 2 && !*(_DWORD *)(v607 + 12)) {
        goto LABEL_48;
      }
      uint64_t v310 = *(void *)(v607 + 16);
      if ((v310 & 4) == 0) {
        goto LABEL_48;
      }
      unint64_t v311 = v310 & 0xFFFFFFFFFFFFFFF8;
      if (!v311) {
        goto LABEL_48;
      }
    }
    v602 = &v607;
    sub_1CC5FA668(v311 + 16, &v602);
LABEL_48:
    sub_1CCB17A70((void *)a1, (uint64_t)*a2);
    uint64_t v44 = v43;
    int v45 = *((_DWORD *)a2 + 5);
    if ((v45 & 0x40000000) != 0) {
      uint64_t v46 = (uint64_t **)*(a2 - 1);
    }
    else {
      uint64_t v46 = &a2[-4 * (v45 & 0x7FFFFFF)];
    }
    uint64_t v56 = sub_1CCB16AB0(a1, (uint64_t)v46[4]);
    sub_1CCB17A70((void *)a1, v44);
    if (v57) {
      char v60 = llvm::Constant::getNullValue(v57, v58, v59);
    }
    else {
      char v60 = 0;
    }
    __int16 v610 = 257;
    int v81 = sub_1CB845F20((uint64_t)&v611, 33, v56, (uint64_t)v60, (uint64_t)&v607);
    char v82 = v81;
    __int16 v601 = 257;
    if (*(void *)v81 != v44)
    {
      if (*((unsigned __int8 *)v81 + 16) <= 0x14u)
      {
        uint64_t v85 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v617 + 28))(v617, 40, v81, v44);
        char v82 = (llvm::Instruction *)v85;
        if (v85)
        {
          if (*(unsigned __int8 *)(v85 + 16) >= 0x1Cu)
          {
            (*(void (**)(void *, uint64_t, uint64_t *, uint64_t *, void **))(*v618 + 16))(v618, v85, v600, v614, v615);
            if (v612)
            {
              v539 = (llvm::MDNode **)v611;
              v540 = (llvm::MDNode **)((char *)v611 + 16 * v612);
              do
              {
                llvm::Instruction::setMetadata(v82, *(_DWORD *)v539, v539[1]);
                v539 += 2;
              }
              while (v539 != v540);
            }
          }
        }
      }
      else
      {
        __int16 v606 = 257;
        char v82 = llvm::CastInst::Create(40, (uint64_t)v81, v44, (const char **)&v602, 0);
        (*(void (**)(void *, llvm::Instruction *, uint64_t *, uint64_t *, void **))(*v618 + 16))(v618, v82, v600, v614, v615);
        if (v612)
        {
          unint64_t v83 = (llvm::MDNode **)v611;
          char v84 = (llvm::MDNode **)((char *)v611 + 16 * v612);
          do
          {
            llvm::Instruction::setMetadata(v82, *(_DWORD *)v83, v83[1]);
            v83 += 2;
          }
          while (v83 != v84);
        }
      }
    }
    uint64_t v86 = (uint64_t)*(a2 - 4);
    if (v86 && !*(unsigned char *)(v86 + 16))
    {
      uint64_t v109 = *(uint64_t **)(v86 + 24);
      uint64_t v110 = a2[9];
      if (v109 == v110) {
        __int16 v87 = (uint64_t **)*(a2 - 4);
      }
      else {
        __int16 v87 = 0;
      }
      if (v109 == v110) {
        uint64_t v88 = *(uint64_t ***)(v86 + 24);
      }
      else {
        uint64_t v88 = 0;
      }
    }
    else
    {
      __int16 v87 = 0;
      uint64_t v88 = 0;
    }
    int v111 = *((_DWORD *)a2 + 5);
    if ((v111 & 0x40000000) != 0) {
      uint64_t v112 = *(a2 - 1);
    }
    else {
      uint64_t v112 = (uint64_t *)&a2[-4 * (v111 & 0x7FFFFFF)];
    }
    int v113 = sub_1CCB16AB0(a1, *v112);
    unint64_t v114 = (llvm::Value *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 4];
    uint64_t v607 = (uint64_t)v113;
    v608 = v114;
    __int16 v606 = 257;
    uint64_t v115 = sub_1CB845BAC((uint64_t *)&v611, v88, v87, &v607, 2, (uint64_t)&v602, 0);
    __int16 v606 = 257;
    BOOL v116 = sub_1CB844AF4((uint64_t)&v611, v82, v115, (uint64_t)&v602);
    uint64_t v117 = a1;
    __int16 v118 = (uint64_t *)a2;
    goto LABEL_208;
  }
  if (v4 > 328)
  {
    switch(v4)
    {
      case 11233:
      case 11234:
      case 11235:
      case 11236:
        goto LABEL_50;
      case 11237:
      case 11238:
      case 11239:
      case 11240:
      case 11241:
      case 11242:
      case 11243:
      case 11244:
      case 11245:
      case 11246:
      case 11247:
      case 11250:
      case 11251:
      case 11252:
      case 11253:
      case 11255:
      case 11256:
      case 11257:
      case 11258:
      case 11285:
      case 11286:
      case 11287:
      case 11288:
      case 11289:
      case 11290:
      case 11291:
      case 11292:
      case 11293:
      case 11294:
      case 11295:
      case 11296:
      case 11297:
      case 11298:
      case 11299:
      case 11300:
      case 11301:
      case 11302:
      case 11303:
      case 11306:
      case 11307:
        goto LABEL_443;
      case 11248:
      case 11249:
        goto LABEL_80;
      case 11254:
        goto LABEL_106;
      case 11259:
      case 11260:
      case 11261:
      case 11262:
      case 11263:
      case 11264:
      case 11269:
      case 11270:
      case 11271:
      case 11272:
      case 11275:
      case 11276:
      case 11277:
      case 11278:
      case 11279:
      case 11280:
        goto LABEL_14;
      case 11265:
      case 11266:
      case 11267:
      case 11268:
      case 11273:
      case 11274:
      case 11281:
      case 11282:
      case 11283:
      case 11284:
        goto LABEL_40;
      case 11304:
      case 11305:
      case 11308:
      case 11309:
      case 11310:
      case 11311:
      case 11312:
        goto LABEL_62;
      default:
        if (v4 == 329) {
          goto LABEL_246;
        }
        goto LABEL_443;
    }
  }
  if (v4 > 184)
  {
    if (v4 > 316)
    {
      switch(v4)
      {
        case 317:
        case 323:
LABEL_246:
          uint64_t v218 = 0;
          uint64_t v219 = **a2;
          v611 = v613;
          uint64_t v612 = 0x200000000;
          uint64_t v616 = v219;
          v617 = &v625;
          v618 = v626;
          uint64_t v619 = 0;
          int v620 = 0;
          __int16 v621 = 512;
          char v622 = 7;
          uint64_t v623 = 0;
          uint64_t v624 = 0;
          v625 = &unk_1F2616E88;
          v626[0] = &unk_1F2617008;
          int v220 = (unsigned __int8 *)a2[6];
          v614 = a2[5];
          v615 = a2 + 3;
          uint64_t v607 = (uint64_t)v220;
          if (v220)
          {
            llvm::MetadataTracking::track((uint64_t)&v607, v220, 2);
            uint64_t v218 = v607;
          }
          sub_1CB8461A4((uint64_t)&v611, 0, v218);
          if (!v607) {
            goto LABEL_249;
          }
          int v334 = *(unsigned __int8 *)v607;
          if ((v334 - 4) > 0x1E)
          {
            if ((v334 - 3) >= 0xFFFFFFFE) {
              uint64_t v446 = v607;
            }
            else {
              uint64_t v446 = 0;
            }
            if ((v334 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v336 = v446 + 8;
LABEL_540:
              v602 = &v607;
              sub_1CC5FA668(v336 + 16, &v602);
              goto LABEL_249;
            }
            if (v334 == 3) {
              *(void *)(v607 + 8) = 0;
            }
          }
          else if ((*(unsigned char *)(v607 + 1) & 0x7F) == 2 || *(_DWORD *)(v607 + 12))
          {
            uint64_t v335 = *(void *)(v607 + 16);
            if ((v335 & 4) != 0)
            {
              unint64_t v336 = v335 & 0xFFFFFFFFFFFFFFF8;
              if (v336) {
                goto LABEL_540;
              }
            }
          }
LABEL_249:
          int v221 = *((_DWORD *)a2 + 5);
          if ((v221 & 0x40000000) != 0) {
            v222 = *(a2 - 1);
          }
          else {
            v222 = (uint64_t *)&a2[-4 * (v221 & 0x7FFFFFF)];
          }
          v223 = (uint64_t *)sub_1CCB16AB0(a1, *v222);
          v224 = (llvm::Value *)sub_1CC5C0444((uint64_t *)&v611, 324, v223);
          goto LABEL_329;
        case 318:
          uint64_t v48 = 0;
          uint64_t v49 = **a2;
          v611 = v613;
          uint64_t v612 = 0x200000000;
          uint64_t v616 = v49;
          v617 = &v625;
          v618 = v626;
          uint64_t v619 = 0;
          int v620 = 0;
          __int16 v621 = 512;
          char v622 = 7;
          uint64_t v623 = 0;
          uint64_t v624 = 0;
          v625 = &unk_1F2616E88;
          v626[0] = &unk_1F2617008;
          uint64_t v50 = (unsigned __int8 *)a2[6];
          v614 = a2[5];
          v615 = a2 + 3;
          uint64_t v607 = (uint64_t)v50;
          if (v50)
          {
            llvm::MetadataTracking::track((uint64_t)&v607, v50, 2);
            uint64_t v48 = v607;
          }
          sub_1CB8461A4((uint64_t)&v611, 0, v48);
          if (!v607) {
            goto LABEL_56;
          }
          int v425 = *(unsigned __int8 *)v607;
          if ((v425 - 4) > 0x1E)
          {
            if ((v425 - 3) >= 0xFFFFFFFE) {
              uint64_t v463 = v607;
            }
            else {
              uint64_t v463 = 0;
            }
            if ((v425 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v427 = v463 + 8;
LABEL_598:
              v602 = &v607;
              sub_1CC5FA668(v427 + 16, &v602);
              goto LABEL_56;
            }
            if (v425 == 3) {
              *(void *)(v607 + 8) = 0;
            }
          }
          else if ((*(unsigned char *)(v607 + 1) & 0x7F) == 2 || *(_DWORD *)(v607 + 12))
          {
            uint64_t v426 = *(void *)(v607 + 16);
            if ((v426 & 4) != 0)
            {
              unint64_t v427 = v426 & 0xFFFFFFFFFFFFFFF8;
              if (v427) {
                goto LABEL_598;
              }
            }
          }
LABEL_56:
          int v51 = *((_DWORD *)a2 + 5);
          if ((v51 & 0x40000000) != 0) {
            __int16 v52 = *(a2 - 1);
          }
          else {
            __int16 v52 = (uint64_t *)&a2[-4 * (v51 & 0x7FFFFFF)];
          }
          uint64_t v290 = (uint64_t *)sub_1CCB16AB0(a1, *v52);
          uint64_t v291 = (llvm::Instruction *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
          goto LABEL_320;
        case 324:
          uint64_t v172 = 0;
          uint64_t v173 = **a2;
          v611 = v613;
          uint64_t v612 = 0x200000000;
          uint64_t v616 = v173;
          v617 = &v625;
          v618 = v626;
          uint64_t v619 = 0;
          int v620 = 0;
          __int16 v621 = 512;
          char v622 = 7;
          uint64_t v623 = 0;
          uint64_t v624 = 0;
          v625 = &unk_1F2616E88;
          v626[0] = &unk_1F2617008;
          v174 = (unsigned __int8 *)a2[6];
          v614 = a2[5];
          v615 = a2 + 3;
          uint64_t v607 = (uint64_t)v174;
          if (v174)
          {
            llvm::MetadataTracking::track((uint64_t)&v607, v174, 2);
            uint64_t v172 = v607;
          }
          sub_1CB8461A4((uint64_t)&v611, 0, v172);
          if (!v607) {
            goto LABEL_214;
          }
          int v428 = *(unsigned __int8 *)v607;
          if ((v428 - 4) > 0x1E)
          {
            if ((v428 - 3) >= 0xFFFFFFFE) {
              uint64_t v464 = v607;
            }
            else {
              uint64_t v464 = 0;
            }
            if ((v428 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v430 = v464 + 8;
LABEL_604:
              v602 = &v607;
              sub_1CC5FA668(v430 + 16, &v602);
              goto LABEL_214;
            }
            if (v428 == 3) {
              *(void *)(v607 + 8) = 0;
            }
          }
          else if ((*(unsigned char *)(v607 + 1) & 0x7F) == 2 || *(_DWORD *)(v607 + 12))
          {
            uint64_t v429 = *(void *)(v607 + 16);
            if ((v429 & 4) != 0)
            {
              unint64_t v430 = v429 & 0xFFFFFFFFFFFFFFF8;
              if (v430) {
                goto LABEL_604;
              }
            }
          }
LABEL_214:
          int v175 = *((_DWORD *)a2 + 5);
          if ((v175 & 0x40000000) != 0) {
            v176 = *(a2 - 1);
          }
          else {
            v176 = (uint64_t *)&a2[-4 * (v175 & 0x7FFFFFF)];
          }
          uint64_t v290 = (uint64_t *)sub_1CCB16AB0(a1, *v176);
          uint64_t v292 = (uint64_t)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
          __int16 v606 = 257;
          uint64_t v291 = sub_1CC2427E8((uint64_t)&v611, v292, (uint64_t)&v602, v293);
LABEL_320:
          __int16 v606 = 257;
          uint64_t v294 = (uint64_t *)sub_1CB844AF4((uint64_t)&v611, v291, (uint64_t)v290, (uint64_t)&v602);
          unsigned int v295 = (void *)sub_1CC5C0444((uint64_t *)&v611, 318, v294);
          uint64_t v296 = sub_1CC5C0444((uint64_t *)&v611, 324, v290);
          __int16 v606 = 257;
          uint64_t v297 = sub_1CBF52474((uint64_t)&v611, v295, v296, (uint64_t)&v602);
          sub_1CCB24DAC(a1, (uint64_t *)a2, v297);
          int v299 = *((_DWORD *)a2 + 5);
          if ((v299 & 0x40000000) != 0) {
            v300 = *(a2 - 1);
          }
          else {
            v300 = (uint64_t *)&a2[-4 * (v299 & 0x7FFFFFF)];
          }
          v301 = sub_1CCB176E8(a1, *v300, v298);
          if (*(_DWORD *)(*(void *)(a1 + 8) + 4)) {
            *sub_1CD694530(a1 + 368, (uint64_t)a2) = (unint64_t)v301;
          }
          break;
        default:
          goto LABEL_443;
      }
LABEL_325:
      int v37 = v611;
      if (v611 != v613) {
        goto LABEL_771;
      }
      return;
    }
    if (v4 != 185)
    {
      if (v4 == 290) {
        goto LABEL_110;
      }
      if (v4 != 187) {
        goto LABEL_443;
      }
      uint64_t v353 = 0;
      uint64_t v354 = **a2;
      v611 = v613;
      uint64_t v612 = 0x200000000;
      uint64_t v616 = v354;
      v617 = &v625;
      v618 = v626;
      uint64_t v619 = 0;
      int v620 = 0;
      __int16 v621 = 512;
      char v622 = 7;
      uint64_t v623 = 0;
      uint64_t v624 = 0;
      v625 = &unk_1F2616E88;
      v626[0] = &unk_1F2617008;
      int v355 = (unsigned __int8 *)a2[6];
      v614 = a2[5];
      v615 = a2 + 3;
      uint64_t v607 = (uint64_t)v355;
      if (v355)
      {
        llvm::MetadataTracking::track((uint64_t)&v607, v355, 2);
        uint64_t v353 = v607;
      }
      sub_1CB8461A4((uint64_t)&v611, 0, v353);
      if (!v607) {
        goto LABEL_432;
      }
      int v517 = *(unsigned __int8 *)v607;
      if ((v517 - 4) > 0x1E)
      {
        if ((v517 - 3) >= 0xFFFFFFFE) {
          uint64_t v527 = v607;
        }
        else {
          uint64_t v527 = 0;
        }
        if ((v517 - 3) < 0xFFFFFFFE)
        {
          if (v517 == 3) {
            *(void *)(v607 + 8) = 0;
          }
          goto LABEL_432;
        }
        unint64_t v519 = v527 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v607 + 1) & 0x7F) != 2 && !*(_DWORD *)(v607 + 12)) {
          goto LABEL_432;
        }
        uint64_t v518 = *(void *)(v607 + 16);
        if ((v518 & 4) == 0) {
          goto LABEL_432;
        }
        unint64_t v519 = v518 & 0xFFFFFFFFFFFFFFF8;
        if (!v519) {
          goto LABEL_432;
        }
      }
      v602 = &v607;
      sub_1CC5FA668(v519 + 16, &v602);
LABEL_432:
      v356 = (uint64_t *)&a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
      uint64_t v357 = *v356;
      int v358 = (llvm::CastInst *)v356[4];
      uint64_t v359 = v356[8];
      unint64_t v360 = (unint64_t *)(v359 + 24);
      if (*(_DWORD *)(v359 + 32) >= 0x41u) {
        unint64_t v360 = (unint64_t *)*v360;
      }
      unsigned __int8 v361 = 63 - __clz(*v360);
      uint64_t v362 = v356[12];
      unint64_t v363 = (llvm::PointerType **)sub_1CCB16AB0(a1, *v356);
      unsigned int v364 = v361;
      uint64_t v365 = (uint64_t *)sub_1CCB163B4((void *)a1, v358, (uint64_t)&v611, *v363, (llvm::Instruction *)(v361 | 0x100), 1);
      uint64_t v367 = v366;
      if (byte_1EBCE8E80)
      {
        sub_1CCB24814(a1, (uint64_t)v358, (unint64_t)a2);
        sub_1CCB24814(a1, v362, (unint64_t)a2);
      }
      llvm::IRBuilderBase::CreateMaskedStore((uint64_t)&v611, v363, v365, v364, v362);
      if (*(_DWORD *)(*(void *)(a1 + 8) + 4))
      {
        uint64_t v369 = *(void *)(*(void *)a1 + 40) + 272;
        char v370 = sub_1CCB176E8(a1, v357, v368);
        unint64_t v372 = sub_1CB83544C(v369, (uint64_t)*v363) + 7;
        if (v371 == 1) {
        if (v364 <= word_1EBCE87F0)
        }
          unsigned __int8 v373 = word_1EBCE87F0;
        else {
          unsigned __int8 v373 = v364;
        }
        sub_1CCB17798((void *)a1, (uint64_t *)&v611, v370, v367, v372 >> 3, v373);
      }
      goto LABEL_370;
    }
    uint64_t v177 = 0;
    uint64_t v178 = **a2;
    v611 = v613;
    uint64_t v612 = 0x200000000;
    uint64_t v616 = v178;
    v617 = &v625;
    v618 = v626;
    uint64_t v619 = 0;
    int v620 = 0;
    __int16 v621 = 512;
    char v622 = 7;
    uint64_t v623 = 0;
    uint64_t v624 = 0;
    v625 = &unk_1F2616E88;
    v626[0] = &unk_1F2617008;
    uint64_t v179 = (unsigned __int8 *)a2[6];
    v614 = a2[5];
    v615 = a2 + 3;
    uint64_t v607 = (uint64_t)v179;
    if (v179)
    {
      llvm::MetadataTracking::track((uint64_t)&v607, v179, 2);
      uint64_t v177 = v607;
    }
    sub_1CB8461A4((uint64_t)&v611, 0, v177);
    if (v607)
    {
      int v431 = *(unsigned __int8 *)v607;
      if ((v431 - 4) > 0x1E)
      {
        if ((v431 - 3) >= 0xFFFFFFFE) {
          uint64_t v465 = v607;
        }
        else {
          uint64_t v465 = 0;
        }
        if ((v431 - 3) < 0xFFFFFFFE)
        {
          if (v431 == 3) {
            *(void *)(v607 + 8) = 0;
          }
          goto LABEL_219;
        }
        unint64_t v433 = v465 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v607 + 1) & 0x7F) != 2 && !*(_DWORD *)(v607 + 12)) {
          goto LABEL_219;
        }
        uint64_t v432 = *(void *)(v607 + 16);
        if ((v432 & 4) == 0) {
          goto LABEL_219;
        }
        unint64_t v433 = v432 & 0xFFFFFFFFFFFFFFF8;
        if (!v433) {
          goto LABEL_219;
        }
      }
      v602 = &v607;
      sub_1CC5FA668(v433 + 16, &v602);
    }
LABEL_219:
    BOOL v180 = (llvm::CastInst **)&a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
    uint64_t v181 = *v180;
    uint64_t v182 = v180[4];
    v183 = (unint64_t *)((char *)v182 + 24);
    if (*((_DWORD *)v182 + 8) >= 0x41u) {
      v183 = (unint64_t *)*v183;
    }
    unint64_t v184 = *v183;
    uint64_t v185 = v180[8];
    uint64_t v186 = (uint64_t)v180[12];
    sub_1CCB17A70((void *)a1, (uint64_t)*a2);
    uint64_t v188 = v187;
    if (*(unsigned char *)(a1 + 457))
    {
      uint64_t v420 = (63 - __clz(v184));
      v421 = (uint64_t *)sub_1CCB163B4((void *)a1, v181, (uint64_t)&v611, v187, (llvm::Instruction *)(v420 | 0x100), 0);
      uint64_t v320 = v422;
      v423 = sub_1CCB16AB0(a1, v186);
      v602 = "_msmaskedld";
      __int16 v606 = 259;
      MaskedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateMaskedLoad((uint64_t)&v611, v188, v421, v420, (uint64_t)v185, v423, (uint64_t)&v602);
      sub_1CCB24DAC(a1, (uint64_t *)a2, MaskedLoad);
    }
    else
    {
      sub_1CCB17A70((void *)a1, (uint64_t)*a2);
      if (v189) {
        v192 = llvm::Constant::getNullValue(v189, v190, v191);
      }
      else {
        v192 = 0;
      }
      sub_1CCB24DAC(a1, (uint64_t *)a2, v192);
      uint64_t v320 = 0;
    }
    if (byte_1EBCE8E80)
    {
      sub_1CCB24814(a1, (uint64_t)v181, (unint64_t)a2);
      sub_1CCB24814(a1, (uint64_t)v185, (unint64_t)a2);
    }
    uint64_t v321 = *(void *)(a1 + 8);
    if (*(_DWORD *)(v321 + 4))
    {
      if (*(unsigned char *)(a1 + 457))
      {
        v451 = sub_1CCB16AB0(a1, v186);
        __int16 v610 = 257;
        v452 = sub_1CD5A6358((uint64_t)&v611, v185, (uint64_t)&v607, 0, 0);
        v453 = v452;
        __int16 v601 = 257;
        uint64_t v598 = v320;
        if (*(llvm::UndefValue **)v452 != v188)
        {
          if (*((unsigned __int8 *)v452 + 16) <= 0x14u)
          {
            uint64_t v468 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, llvm::UndefValue *))*v617 + 28))(v617, 40, v452, v188);
            v453 = (llvm::Instruction *)v468;
            if (v468)
            {
              uint64_t v469 = v186;
              if (*(unsigned __int8 *)(v468 + 16) >= 0x1Cu)
              {
                (*(void (**)(void *, uint64_t, uint64_t *, uint64_t *, void **))(*v618 + 16))(v618, v468, v600, v614, v615);
                if (v612)
                {
                  v596 = (llvm::MDNode **)v611;
                  v597 = (llvm::MDNode **)((char *)v611 + 16 * v612);
                  do
                  {
                    llvm::Instruction::setMetadata(v453, *(_DWORD *)v596, v596[1]);
                    v596 += 2;
                  }
                  while (v596 != v597);
                }
              }
              uint64_t v186 = v469;
            }
          }
          else
          {
            uint64_t v454 = v186;
            __int16 v606 = 257;
            v453 = llvm::CastInst::Create(40, (uint64_t)v452, (uint64_t)v188, (const char **)&v602, 0);
            (*(void (**)(void *, llvm::Instruction *, uint64_t *, uint64_t *, void **))(*v618 + 16))(v618, v453, v600, v614, v615);
            if (v612)
            {
              v533 = (llvm::MDNode **)v611;
              unint64_t v534 = (llvm::MDNode **)((char *)v611 + 16 * v612);
              do
              {
                llvm::Instruction::setMetadata(v453, *(_DWORD *)v533, v533[1]);
                v533 += 2;
              }
              while (v533 != v534);
            }
            uint64_t v186 = v454;
          }
        }
        __int16 v606 = 257;
        v471 = (unsigned __int8 *)sub_1CBF52474((uint64_t)&v611, v451, (uint64_t)v453, (uint64_t)&v602);
        v472 = *(llvm::ConstantInt **)(*(void *)v616 + 1960);
        unsigned int v473 = *(_DWORD *)(*(void *)v616 + 1968);
        LODWORD(v603) = v473 >> 8;
        if (v473 >> 8 >= 0x41) {
          operator new[]();
        }
        v602 = 0;
        v474 = (unsigned __int8 *)llvm::ConstantInt::get(v472, (llvm::LLVMContext *)&v602, v470);
        if (v603 >= 0x41 && v602) {
          MEMORY[0x1D25D9CB0](v602, 0x1000C8000313F17);
        }
        __int16 v606 = 257;
        v477 = sub_1CB8445F4((uint64_t)&v611, v471, v474, (uint64_t)&v602);
        uint64_t v599 = v186;
        uint64_t v478 = *(unsigned int *)(*(void *)v186 + 32);
        if ((int)v478 >= 2)
        {
          for (uint64_t i = 1; i != v478; ++i)
          {
            v480 = *(llvm::ConstantInt **)(*(void *)v616 + 1960);
            unsigned int v481 = *(_DWORD *)(*(void *)v616 + 1968);
            LODWORD(v603) = v481 >> 8;
            if (v481 >> 8 > 0x40) {
              operator new[]();
            }
            if (v481 <= 0xFF) {
              unint64_t v482 = 0;
            }
            else {
              unint64_t v482 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v481) + 63);
            }
            v602 = (void *)(v482 & i);
            v483 = (unsigned __int8 *)llvm::ConstantInt::get(v480, (llvm::LLVMContext *)&v602, v476);
            if (v603 >= 0x41 && v602) {
              MEMORY[0x1D25D9CB0](v602, 0x1000C8000313F17);
            }
            __int16 v606 = 257;
            v484 = sub_1CB8445F4((uint64_t)&v611, v471, v483, (uint64_t)&v602);
            __int16 v606 = 257;
            v477 = sub_1CB844AF4((uint64_t)&v611, v477, (uint64_t)v484, (uint64_t)&v602);
          }
        }
        v485 = llvm::Constant::getNullValue(*(llvm::Constant **)v477, v475, v476);
        __int16 v610 = 257;
        v486 = sub_1CB845F20((uint64_t)&v611, 33, v477, (uint64_t)v485, (uint64_t)&v607);
        v488 = sub_1CCB176E8(a1, v599, v487);
        v489 = *(llvm::Type **)(*(void *)(a1 + 8) + 32);
        __int16 v601 = 257;
        char v490 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v614[7] + 40) + 272), v489, 1);
        v491 = operator new(0x60uLL);
        v491[13] = v491[13] & 0x38000000 | 1;
        v492 = (llvm::Instruction *)(v491 + 8);
        *(void *)v491 = 0;
        *((void *)v491 + 1) = 0;
        *((void *)v491 + 2) = 0;
        *((void *)v491 + 3) = v491 + 8;
        __int16 v606 = 257;
        llvm::LoadInst::LoadInst((llvm::Value *)(v491 + 8), (uint64_t)v489, v598, (const char **)&v602, 0, v490, 0);
        (*(void (**)(void *, llvm::Instruction *, uint64_t *, uint64_t *, void **))(*v618 + 16))(v618, v492, v600, v614, v615);
        if (v612)
        {
          uint64_t v520 = (llvm::MDNode **)v611;
          unint64_t v521 = (llvm::MDNode **)((char *)v611 + 16 * v612);
          do
          {
            llvm::Instruction::setMetadata(v492, *(_DWORD *)v520, v520[1]);
            v520 += 2;
          }
          while (v520 != v521);
        }
        __int16 v606 = 257;
        Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v611, v486, v488, v492, (const llvm::Twine *)&v602, 0);
      }
      else
      {
        Select = llvm::Constant::getNullValue(*(llvm::Constant **)(v321 + 32), v318, v319);
      }
      if (*(_DWORD *)(*(void *)(a1 + 8) + 4)) {
        *sub_1CD694530(a1 + 368, (uint64_t)a2) = (unint64_t)Select;
      }
    }
LABEL_370:
    int v37 = v611;
    if (v611 == v613) {
      return;
    }
LABEL_771:
    free(v37);
    return;
  }
  if (v4 > 164)
  {
    if (v4 == 165)
    {
      sub_1CCB17A70((void *)a1, (uint64_t)*a2);
      if (v198) {
        v201 = llvm::Constant::getNullValue(v198, v199, v200);
      }
      else {
        v201 = 0;
      }
      sub_1CCB24DAC(a1, (uint64_t *)a2, v201);
      uint64_t v197 = llvm::Constant::getNullValue(*(llvm::Constant **)(*(void *)(a1 + 8) + 32), v313, v314);
LABEL_356:
      if (*(_DWORD *)(*(void *)(a1 + 8) + 4)) {
        *sub_1CD694530(a1 + 368, (uint64_t)a2) = (unint64_t)v197;
      }
      return;
    }
    if (v4 != 166)
    {
      if (v4 == 168)
      {
        if (*(unsigned char *)(a1 + 458))
        {
          uint64_t AllocaForValue = llvm::findAllocaForValue((llvm *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 4], 0);
          if (!AllocaForValue) {
            *(unsigned char *)(a1 + 864) = 0;
          }
          unsigned int v62 = *(_DWORD *)(a1 + 1040);
          if (v62 >= *(_DWORD *)(a1 + 1044)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v63 = (uint64_t ***)(*(void *)(a1 + 1032) + 16 * v62);
          void *v63 = a2;
          v63[1] = (uint64_t **)AllocaForValue;
          ++*(_DWORD *)(a1 + 1040);
        }
        return;
      }
      goto LABEL_443;
    }
LABEL_110:
    int v90 = *((_DWORD *)a2 + 5);
    if ((v90 & 0x40000000) != 0) {
      uint64_t v91 = *(a2 - 1);
    }
    else {
      uint64_t v91 = (uint64_t *)&a2[-4 * (v90 & 0x7FFFFFF)];
    }
    uint64_t v193 = sub_1CCB16AB0(a1, *v91);
    sub_1CCB24DAC(a1, (uint64_t *)a2, v193);
    int v195 = *((_DWORD *)a2 + 5);
    if ((v195 & 0x40000000) != 0) {
      v196 = *(a2 - 1);
    }
    else {
      v196 = (uint64_t *)&a2[-4 * (v195 & 0x7FFFFFF)];
    }
    uint64_t v197 = sub_1CCB176E8(a1, *v196, v194);
    goto LABEL_356;
  }
  if ((v4 - 148) < 2)
  {
    uint64_t v92 = 0;
    uint64_t v93 = **a2;
    v611 = v613;
    uint64_t v612 = 0x200000000;
    uint64_t v616 = v93;
    v617 = &v625;
    v618 = v626;
    uint64_t v619 = 0;
    int v620 = 0;
    __int16 v621 = 512;
    char v622 = 7;
    uint64_t v623 = 0;
    uint64_t v624 = 0;
    v625 = &unk_1F2616E88;
    v626[0] = &unk_1F2617008;
    uint64_t v94 = (unsigned __int8 *)a2[6];
    v614 = a2[5];
    v615 = a2 + 3;
    uint64_t v607 = (uint64_t)v94;
    if (v94)
    {
      llvm::MetadataTracking::track((uint64_t)&v607, v94, 2);
      uint64_t v92 = v607;
    }
    sub_1CB8461A4((uint64_t)&v611, 0, v92);
    if (!v607)
    {
LABEL_115:
      int v95 = *((_DWORD *)a2 + 5);
      if ((v95 & 0x40000000) != 0) {
        uint64_t v96 = *(a2 - 1);
      }
      else {
        uint64_t v96 = (uint64_t *)&a2[-4 * (v95 & 0x7FFFFFF)];
      }
      v202 = sub_1CCB16AB0(a1, *v96);
      int v203 = *((_DWORD *)a2 + 5);
      if ((v203 & 0x40000000) != 0) {
        v204 = (uint64_t **)*(a2 - 1);
      }
      else {
        v204 = &a2[-4 * (v203 & 0x7FFFFFF)];
      }
      uint64_t v205 = sub_1CCB16AB0(a1, (uint64_t)v204[4]);
      int v206 = *((_DWORD *)a2 + 5);
      if ((v206 & 0x40000000) != 0) {
        v207 = (uint64_t **)*(a2 - 1);
      }
      else {
        v207 = &a2[-4 * (v206 & 0x7FFFFFF)];
      }
      v208 = (uint64_t *)sub_1CCB16AB0(a1, (uint64_t)v207[8]);
      sub_1CCB17A70((void *)a1, *v208);
      if (v209) {
        v212 = llvm::Constant::getNullValue(v209, v210, v211);
      }
      else {
        v212 = 0;
      }
      __int16 v610 = 257;
      uint64_t v277 = sub_1CB845F20((uint64_t)&v611, 33, v208, (uint64_t)v212, (uint64_t)&v607);
      uint64_t v278 = v277;
      uint64_t v279 = *v208;
      __int16 v601 = 257;
      if (*(void *)v277 != v279)
      {
        if (*((unsigned __int8 *)v277 + 16) <= 0x14u)
        {
          uint64_t v282 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v617 + 28))(v617, 40, v277, v279);
          uint64_t v278 = (llvm::Instruction *)v282;
          if (v282)
          {
            if (*(unsigned __int8 *)(v282 + 16) >= 0x1Cu)
            {
              (*(void (**)(void *, uint64_t, uint64_t *, uint64_t *, void **))(*v618 + 16))(v618, v282, v600, v614, v615);
              if (v612)
              {
                v549 = (llvm::MDNode **)v611;
                v550 = (llvm::MDNode **)((char *)v611 + 16 * v612);
                do
                {
                  llvm::Instruction::setMetadata(v278, *(_DWORD *)v549, v549[1]);
                  v549 += 2;
                }
                while (v549 != v550);
              }
            }
          }
        }
        else
        {
          __int16 v606 = 257;
          uint64_t v278 = llvm::CastInst::Create(40, (uint64_t)v277, v279, (const char **)&v602, 0);
          (*(void (**)(void *, llvm::Instruction *, uint64_t *, uint64_t *, void **))(*v618 + 16))(v618, v278, v600, v614, v615);
          if (v612)
          {
            uint64_t v280 = (llvm::MDNode **)v611;
            int v281 = (llvm::MDNode **)((char *)v611 + 16 * v612);
            do
            {
              llvm::Instruction::setMetadata(v278, *(_DWORD *)v280, v280[1]);
              v280 += 2;
            }
            while (v280 != v281);
          }
        }
      }
      int v283 = a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 8];
      v284 = *(uint64_t ***)(a2[5][7] + 40);
      int v285 = *((_DWORD *)*(a2 - 4) + 9);
      v602 = *(void **)v278;
      uint64_t Declaration = llvm::Intrinsic::getDeclaration(v284, v285, (uint64_t)&v602, 1);
      if (Declaration) {
        unsigned int v287 = *(uint64_t ***)(Declaration + 24);
      }
      else {
        unsigned int v287 = 0;
      }
      uint64_t v607 = (uint64_t)v202;
      v608 = v205;
      v609 = v283;
      __int16 v606 = 257;
      uint64_t v288 = (void *)sub_1CB845BAC((uint64_t *)&v611, v287, (uint64_t **)Declaration, &v607, 3, (uint64_t)&v602, 0);
      __int16 v606 = 257;
      uint64_t v289 = sub_1CB844AF4((uint64_t)&v611, v288, (uint64_t)v278, (uint64_t)&v602);
      sub_1CCB24DAC(a1, (uint64_t *)a2, v289);
      sub_1CCB28C0C((void *)a1, (uint64_t)a2);
      int v37 = v611;
      if (v611 != v613) {
        goto LABEL_771;
      }
      return;
    }
    int v344 = *(unsigned __int8 *)v607;
    if ((v344 - 4) > 0x1E)
    {
      if ((v344 - 3) >= 0xFFFFFFFE) {
        uint64_t v458 = v607;
      }
      else {
        uint64_t v458 = 0;
      }
      if ((v344 - 3) < 0xFFFFFFFE)
      {
        if (v344 == 3) {
          *(void *)(v607 + 8) = 0;
        }
        goto LABEL_115;
      }
      unint64_t v346 = v458 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v607 + 1) & 0x7F) != 2 && !*(_DWORD *)(v607 + 12)) {
        goto LABEL_115;
      }
      uint64_t v345 = *(void *)(v607 + 16);
      if ((v345 & 4) == 0) {
        goto LABEL_115;
      }
      unint64_t v346 = v345 & 0xFFFFFFFFFFFFFFF8;
      if (!v346) {
        goto LABEL_115;
      }
    }
    v602 = &v607;
    sub_1CC5FA668(v346 + 16, &v602);
    goto LABEL_115;
  }
  if (v4 == 1)
  {
    uint64_t v213 = 0;
    uint64_t v214 = **a2;
    v611 = v613;
    uint64_t v612 = 0x200000000;
    uint64_t v616 = v214;
    v617 = &v625;
    v618 = v626;
    uint64_t v619 = 0;
    int v620 = 0;
    __int16 v621 = 512;
    char v622 = 7;
    uint64_t v623 = 0;
    uint64_t v624 = 0;
    v625 = &unk_1F2616E88;
    v626[0] = &unk_1F2617008;
    uint64_t v215 = (unsigned __int8 *)a2[6];
    v614 = a2[5];
    v615 = a2 + 3;
    uint64_t v607 = (uint64_t)v215;
    if (v215)
    {
      llvm::MetadataTracking::track((uint64_t)&v607, v215, 2);
      uint64_t v213 = v607;
    }
    sub_1CB8461A4((uint64_t)&v611, 0, v213);
    if (!v607) {
      goto LABEL_243;
    }
    int v437 = *(unsigned __int8 *)v607;
    if ((v437 - 4) > 0x1E)
    {
      if ((v437 - 3) >= 0xFFFFFFFE) {
        uint64_t v467 = v607;
      }
      else {
        uint64_t v467 = 0;
      }
      if ((v437 - 3) < 0xFFFFFFFE)
      {
        if (v437 == 3) {
          *(void *)(v607 + 8) = 0;
        }
        goto LABEL_243;
      }
      unint64_t v439 = v467 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v607 + 1) & 0x7F) != 2 && !*(_DWORD *)(v607 + 12)) {
        goto LABEL_243;
      }
      uint64_t v438 = *(void *)(v607 + 16);
      if ((v438 & 4) == 0) {
        goto LABEL_243;
      }
      unint64_t v439 = v438 & 0xFFFFFFFFFFFFFFF8;
      if (!v439) {
        goto LABEL_243;
      }
    }
    v602 = &v607;
    sub_1CC5FA668(v439 + 16, &v602);
LABEL_243:
    int v216 = *((_DWORD *)a2 + 5);
    if ((v216 & 0x40000000) != 0) {
      v217 = *(a2 - 1);
    }
    else {
      v217 = (uint64_t *)&a2[-4 * (v216 & 0x7FFFFFF)];
    }
    v224 = sub_1CCB16AB0(a1, *v217);
LABEL_329:
    sub_1CCB24DAC(a1, (uint64_t *)a2, v224);
    int v303 = *((_DWORD *)a2 + 5);
    if ((v303 & 0x40000000) != 0) {
      unsigned int v304 = *(a2 - 1);
    }
    else {
      unsigned int v304 = (uint64_t *)&a2[-4 * (v303 & 0x7FFFFFF)];
    }
    v305 = sub_1CCB176E8(a1, *v304, v302);
    if (*(_DWORD *)(*(void *)(a1 + 8) + 4)) {
      *sub_1CD694530(a1 + 368, (uint64_t)a2) = (unint64_t)v305;
    }
LABEL_340:
    int v37 = v611;
    if (v611 != v613) {
      goto LABEL_771;
    }
    return;
  }
  if (v4 != 9) {
    goto LABEL_443;
  }
  uint64_t v12 = 0;
  uint64_t v13 = **a2;
  v611 = v613;
  uint64_t v612 = 0x200000000;
  uint64_t v616 = v13;
  v617 = &v625;
  v618 = v626;
  uint64_t v619 = 0;
  int v620 = 0;
  __int16 v621 = 512;
  char v622 = 7;
  uint64_t v623 = 0;
  uint64_t v624 = 0;
  v625 = &unk_1F2616E88;
  v626[0] = &unk_1F2617008;
  uint64_t v14 = (unsigned __int8 *)a2[6];
  v614 = a2[5];
  v615 = a2 + 3;
  uint64_t v607 = (uint64_t)v14;
  if (v14)
  {
    llvm::MetadataTracking::track((uint64_t)&v607, v14, 2);
    uint64_t v12 = v607;
  }
  sub_1CB8461A4((uint64_t)&v611, 0, v12);
  if (!v607) {
    goto LABEL_23;
  }
  int v434 = *(unsigned __int8 *)v607;
  if ((v434 - 4) > 0x1E)
  {
    if ((v434 - 3) >= 0xFFFFFFFE) {
      uint64_t v466 = v607;
    }
    else {
      uint64_t v466 = 0;
    }
    if ((v434 - 3) < 0xFFFFFFFE)
    {
      if (v434 == 3) {
        *(void *)(v607 + 8) = 0;
      }
      goto LABEL_23;
    }
    unint64_t v436 = v466 + 8;
    goto LABEL_616;
  }
  if ((*(unsigned char *)(v607 + 1) & 0x7F) == 2 || *(_DWORD *)(v607 + 12))
  {
    uint64_t v435 = *(void *)(v607 + 16);
    if ((v435 & 4) != 0)
    {
      unint64_t v436 = v435 & 0xFFFFFFFFFFFFFFF8;
      if (v436)
      {
LABEL_616:
        v602 = &v607;
        sub_1CC5FA668(v436 + 16, &v602);
      }
    }
  }
LABEL_23:
  int v15 = a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  uint64_t v607 = *v15;
  uint64_t v16 = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)a1 + 40), 9, (uint64_t)&v607, 1);
  __int16 v17 = (uint64_t **)v16;
  if (v16) {
    __int16 v18 = *(uint64_t ***)(v16 + 24);
  }
  else {
    __int16 v18 = 0;
  }
  v600[0] = (uint64_t)sub_1CCB16AB0(a1, (uint64_t)v15);
  __int16 v606 = 257;
  v315 = (llvm::Value *)sub_1CB845BAC((uint64_t *)&v611, v18, v17, v600, 1, (uint64_t)&v602, 0);
  sub_1CCB24DAC(a1, (uint64_t *)a2, v315);
  uint64_t v317 = sub_1CCB176E8(a1, (uint64_t)v15, v316);
  if (*(_DWORD *)(*(void *)(a1 + 8) + 4)) {
    *sub_1CD694530(a1 + 368, (uint64_t)a2) = (unint64_t)v317;
  }
LABEL_209:
  int v37 = v611;
  if (v611 != v613) {
    goto LABEL_771;
  }
}

void sub_1CCB2E790(void *a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v8 = 0;
  v80[1] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)*a2;
  v68[0] = v69;
  v68[1] = (void *)0x200000000;
  uint64_t v70 = v9;
  uint64_t v71 = &v79;
  int v72 = v80;
  uint64_t v73 = 0;
  int v74 = 0;
  __int16 v75 = 512;
  char v76 = 7;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  int v79 = &unk_1F2616E88;
  v80[0] = &unk_1F2617008;
  char v10 = a2 + 3;
  uint64_t v12 = a2[5];
  int v11 = (unsigned __int8 *)a2[6];
  v69[4] = v12;
  v69[5] = v10;
  uint64_t v67 = v11;
  if (v11)
  {
    llvm::MetadataTracking::track((uint64_t)&v67, v11, 2);
    uint64_t v8 = (uint64_t)v67;
  }
  sub_1CB8461A4((uint64_t)v68, 0, v8);
  if (v67)
  {
    int v56 = *v67;
    if ((v56 - 4) > 0x1E)
    {
      if ((v56 - 3) >= 0xFFFFFFFE) {
        __int16 v59 = v67;
      }
      else {
        __int16 v59 = 0;
      }
      if ((v56 - 3) < 0xFFFFFFFE)
      {
        if (v56 == 3) {
          *((void *)v67 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v58 = (unint64_t)(v59 + 8);
    }
    else
    {
      if ((v67[1] & 0x7F) != 2 && !*((_DWORD *)v67 + 3)) {
        goto LABEL_4;
      }
      uint64_t v57 = *((void *)v67 + 2);
      if ((v57 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v58 = v57 & 0xFFFFFFFFFFFFFFF8;
      if (!v58) {
        goto LABEL_4;
      }
    }
    int v64 = &v67;
    sub_1CC5FA668(v58 + 16, &v64);
  }
LABEL_4:
  int v13 = *((unsigned __int8 *)a2 + 16);
  if (v13 == 84)
  {
    uint64_t v14 = 0;
  }
  else if (v13 == 39)
  {
    uint64_t v14 = (*((_DWORD *)a2 + 20) + 1);
  }
  else
  {
    uint64_t v14 = 2;
  }
  int v15 = *((_DWORD *)a2 + 5);
  if (v15 < 0 && (v61 = &a2[-4 * (v15 & 0x7FFFFFF)], uint64_t v62 = *(v61 - 1), (v62 & 0xFFFFFFFF0) != 0))
  {
    uint64_t v17 = -(uint64_t)(v15 & 0x7FFFFFF);
    int v16 = *((_DWORD *)v61 - 3) - *(_DWORD *)((char *)v61 - v62);
  }
  else
  {
    int v16 = 0;
    uint64_t v17 = -(uint64_t)(v15 & 0x7FFFFFF);
  }
  uint64_t v18 = (uint64_t)&a2[4 * -v16 + -4 * v14];
  __int16 v19 = &a2[4 * v17];
  if (((unint64_t)(v18 - (void)v19 - 32) >> 5) - a4 == 2)
  {
    uint64_t v21 = *v19;
    v19 += 4;
    uint64_t v20 = v21;
  }
  else
  {
    uint64_t v20 = 0;
  }
  uint64_t v22 = *v19;
  uint64_t v24 = (unsigned __int8 *)sub_1CCB16AB0((uint64_t)a1, *v19);
  if ((*(_DWORD *)(*(void *)v22 + 8) & 0xFE) == 0x12)
  {
    uint64_t v25 = *(llvm::ConstantInt **)(*(void *)v70 + 1960);
    unsigned int v26 = *(_DWORD *)(*(void *)v70 + 1968);
    unsigned int v65 = v26 >> 8;
    if (v26 >> 8 >= 0x41) {
      operator new[]();
    }
    int v64 = 0;
    __int16 v27 = (unsigned __int8 *)llvm::ConstantInt::get(v25, (llvm::LLVMContext *)&v64, v23);
    if (v65 >= 0x41 && v64) {
      MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
    }
    __int16 v66 = 257;
    unsigned int v28 = sub_1CB8445F4((uint64_t)v68, v24, v27, (uint64_t)&v64);
    uint64_t v29 = v28;
    if (a3 < 2)
    {
      uint64_t v24 = (unsigned __int8 *)v28;
    }
    else
    {
      unint64_t v30 = *(llvm::ConstantInt **)(*(void *)v70 + 1960);
      unsigned int v31 = *(_DWORD *)(*(void *)v70 + 1968);
      unsigned int v65 = v31 >> 8;
      if (v31 >> 8 > 0x40) {
        operator new[]();
      }
      if (v31 <= 0xFF) {
        LOBYTE(v32) = 0;
      }
      else {
        unint64_t v32 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v31) + 63);
      }
      int v64 = (unsigned __int8 **)(v32 & 1);
      __int16 v33 = (unsigned __int8 *)llvm::ConstantInt::get(v30, (llvm::LLVMContext *)&v64, v23);
      if (v65 >= 0x41 && v64)
      {
        char v60 = v33;
        MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
        __int16 v33 = v60;
      }
      __int16 v66 = 257;
      uint64_t v34 = sub_1CB8445F4((uint64_t)v68, v24, v33, (uint64_t)&v64);
      __int16 v66 = 257;
      uint64_t v24 = (unsigned __int8 *)sub_1CB844AF4((uint64_t)v68, v29, (uint64_t)v34, (uint64_t)&v64);
    }
  }
  unint64_t v35 = sub_1CCB176E8((uint64_t)a1, v22, v23);
  sub_1CCB248DC((uint64_t)a1, (unint64_t)v24, (unint64_t)v35, (unint64_t)a2);
  if (!v20)
  {
    sub_1CCB17A70(a1, *a2);
    if (v50) {
      NullValue = llvm::Constant::getNullValue(v50, v51, v52);
    }
    else {
      NullValue = 0;
    }
    sub_1CCB24DAC((uint64_t)a1, a2, NullValue);
    uint64_t v49 = llvm::Constant::getNullValue(*(llvm::Constant **)(a1[1] + 32), v54, v55);
    if (!*(_DWORD *)(a1[1] + 4)) {
      goto LABEL_35;
    }
LABEL_42:
    *sub_1CD694530((uint64_t)(a1 + 46), (uint64_t)a2) = (unint64_t)v49;
    goto LABEL_35;
  }
  uint64_t v63 = (uint64_t)a1;
  int v38 = (unsigned __int8 *)sub_1CCB16AB0((uint64_t)a1, v20);
  uint64_t v39 = 0;
  uint64_t v40 = *(llvm::Constant **)(*(void *)v38 + 24);
  uint64_t v41 = a3;
  do
  {
    uint64_t v43 = (unsigned __int8 *)llvm::Constant::getNullValue(v40, v36, v37);
    uint64_t v44 = *(llvm::ConstantInt **)(*(void *)v70 + 1960);
    unsigned int v45 = *(_DWORD *)(*(void *)v70 + 1968);
    unsigned int v65 = v45 >> 8;
    if (v45 >> 8 > 0x40) {
      operator new[]();
    }
    if (v45 <= 0xFF) {
      unint64_t v46 = 0;
    }
    else {
      unint64_t v46 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v45) + 63);
    }
    int v64 = (unsigned __int8 **)(v46 & v39);
    uint64_t v47 = (unsigned __int8 *)llvm::ConstantInt::get(v44, (llvm::LLVMContext *)&v64, v42);
    if (v65 >= 0x41 && v64) {
      MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
    }
    __int16 v66 = 257;
    int v38 = (unsigned __int8 *)sub_1CB84478C((uint64_t)v68, v38, v43, v47, (uint64_t)&v64);
    ++v39;
  }
  while (v41 != v39);
  a1 = (void *)v63;
  sub_1CCB24DAC(v63, a2, (llvm::Value *)v38);
  uint64_t v49 = sub_1CCB176E8(v63, v20, v48);
  if (*(_DWORD *)(*(void *)(v63 + 8) + 4)) {
    goto LABEL_42;
  }
LABEL_35:
  if (v68[0] != v69) {
    free(v68[0]);
  }
}

void sub_1CCB2EE54(void *a1, uint64_t a2, int a3)
{
  uint64_t v6 = 0;
  v80[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = **(void ***)a2;
  unsigned int v65 = v67;
  uint64_t v66 = 0x200000000;
  uint64_t v70 = v7;
  uint64_t v71 = &v79;
  int v72 = v80;
  uint64_t v73 = 0;
  int v74 = 0;
  __int16 v75 = 512;
  char v76 = 7;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  int v79 = &unk_1F2616E88;
  v80[0] = &unk_1F2617008;
  uint64_t v8 = a2 + 24;
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v9 = *(unsigned __int8 **)(a2 + 48);
  uint64_t v68 = v10;
  uint64_t v69 = v8;
  v60[0] = v9;
  if (v9)
  {
    llvm::MetadataTracking::track((uint64_t)v60, v9, 2);
    uint64_t v6 = v60[0];
  }
  sub_1CB8461A4((uint64_t)&v65, 0, v6);
  if (v60[0])
  {
    int v51 = *(unsigned __int8 *)v60[0];
    if ((v51 - 4) > 0x1E)
    {
      if ((v51 - 3) >= 0xFFFFFFFE) {
        uint64_t v54 = v60[0];
      }
      else {
        uint64_t v54 = 0;
      }
      if ((v51 - 3) < 0xFFFFFFFE)
      {
        if (v51 == 3) {
          *(void *)(v60[0] + 8) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v53 = v54 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v60[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v60[0] + 12)) {
        goto LABEL_4;
      }
      uint64_t v52 = *(void *)(v60[0] + 16);
      if ((v52 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v53 = v52 & 0xFFFFFFFFFFFFFFF8;
      if (!v53) {
        goto LABEL_4;
      }
    }
    v62[0] = (const char *)v60;
    sub_1CC5FA668(v53 + 16, v62);
  }
LABEL_4:
  int v11 = *(_DWORD *)(a2 + 20);
  if ((v11 & 0x40000000) != 0) {
    uint64_t v12 = *(uint64_t **)(a2 - 8);
  }
  else {
    uint64_t v12 = (uint64_t *)(a2 - 32 * (v11 & 0x7FFFFFF));
  }
  int v13 = (unsigned __int8 *)sub_1CCB16AB0((uint64_t)a1, *v12);
  int v14 = *(_DWORD *)(a2 + 20);
  if ((v14 & 0x40000000) != 0) {
    uint64_t v15 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v15 = a2 - 32 * (v14 & 0x7FFFFFF);
  }
  int v16 = (uint64_t *)sub_1CCB16AB0((uint64_t)a1, *(void *)(v15 + 32));
  uint64_t v17 = (llvm::Instruction *)v16;
  if (a3)
  {
    uint64_t v18 = *v16;
    sub_1CCB17A70(a1, *v16);
    if (v19) {
      NullValue = llvm::Constant::getNullValue(v19, v20, v21);
    }
    else {
      NullValue = 0;
    }
    __int16 v63 = 257;
    unint64_t v30 = sub_1CB845F20((uint64_t)&v65, 33, v17, (uint64_t)NullValue, (uint64_t)v62);
    unsigned int v31 = v30;
    __int16 v61 = 257;
    if (*(void *)v30 != v18)
    {
      if (*((unsigned __int8 *)v30 + 16) <= 0x14u)
      {
        uint64_t v34 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v71 + 28))(v71, 40, v30, v18);
        unsigned int v31 = (llvm::Instruction *)v34;
        if (v34)
        {
          if (*(unsigned __int8 *)(v34 + 16) >= 0x1Cu)
          {
            (*(void (**)(void *, uint64_t, void *, uint64_t, uint64_t))(*v72 + 16))(v72, v34, v60, v68, v69);
            if (v66)
            {
              unint64_t v35 = (llvm::MDNode **)v65;
              unint64_t v36 = (llvm::MDNode **)((char *)v65 + 16 * v66);
              do
              {
                llvm::Instruction::setMetadata(v31, *(_DWORD *)v35, v35[1]);
                v35 += 2;
              }
              while (v35 != v36);
            }
          }
        }
      }
      else
      {
        __int16 v63 = 257;
        unsigned int v31 = llvm::CastInst::Create(40, (uint64_t)v30, v18, v62, 0);
        (*(void (**)(void *, llvm::Instruction *, void *, uint64_t, uint64_t))(*v72 + 16))(v72, v31, v60, v68, v69);
        if (v66)
        {
          unint64_t v32 = (llvm::MDNode **)v65;
          __int16 v33 = (llvm::MDNode **)((char *)v65 + 16 * v66);
          do
          {
            llvm::Instruction::setMetadata(v31, *(_DWORD *)v32, v32[1]);
            v32 += 2;
          }
          while (v32 != v33);
        }
      }
    }
  }
  else
  {
    sub_1CCB17A70(a1, *(void *)a2);
    uint64_t v24 = v23;
    uint64_t v25 = *(void *)v17;
    if ((*(_DWORD *)(*(void *)v17 + 8) & 0xFE) == 0x12)
    {
      uint64_t v17 = sub_1CCB1F40C(a1, (uint64_t)&v65, (uint64_t *)v17, *v70 + 1984, (llvm::Type *)1);
      uint64_t v25 = *(void *)v17;
    }
    sub_1CCB17A70(a1, v25);
    if (v26) {
      uint64_t v29 = llvm::Constant::getNullValue(v26, v27, v28);
    }
    else {
      uint64_t v29 = 0;
    }
    __int16 v63 = 257;
    int v37 = (uint64_t *)sub_1CB845F20((uint64_t)&v65, 33, v17, (uint64_t)v29, (uint64_t)v62);
    unsigned int v31 = sub_1CCB1F40C(a1, (uint64_t)&v65, v37, v24, (llvm::Type *)1);
  }
  uint64_t v38 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  uint64_t v39 = *(void *)(v38 + 32);
  uint64_t v40 = *(uint64_t ***)(a2 + 72);
  uint64_t v41 = *(uint64_t ***)(a2 - 32);
  uint64_t v42 = **(void **)v38;
  __int16 v61 = 257;
  if (*(void *)v13 != v42)
  {
    if (v13[16] <= 0x14u)
    {
      int v13 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v71 + 28))(v71, 49, v13, v42);
      if (v13) {
        BOOL v44 = v13[16] >= 0x1Cu;
      }
      else {
        BOOL v44 = 0;
      }
      if (v44)
      {
        (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v72 + 16))(v72, v13, v60, v68, v69);
        if (v66)
        {
          uint64_t v55 = (llvm::MDNode **)v65;
          __int16 v59 = (llvm::MDNode **)((char *)v65 + 16 * v66);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v13, *(_DWORD *)v55, v55[1]);
            v55 += 2;
          }
          while (v55 != v59);
        }
      }
    }
    else
    {
      __int16 v63 = 257;
      int v13 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v13, v42, v62, 0);
      (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v72 + 16))(v72, v13, v60, v68, v69);
      if (v66)
      {
        uint64_t v43 = (llvm::MDNode **)v65;
        unint64_t v58 = (llvm::MDNode **)((char *)v65 + 16 * v66);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v13, *(_DWORD *)v43, v43[1]);
          v43 += 2;
        }
        while (v43 != v58);
      }
    }
  }
  v64[0] = (uint64_t)v13;
  v64[1] = v39;
  __int16 v63 = 257;
  unsigned int v45 = (unsigned __int8 *)sub_1CB845BAC((uint64_t *)&v65, v40, v41, v64, 2, (uint64_t)v62, 0);
  sub_1CCB17A70(a1, *(void *)a2);
  __int16 v61 = 257;
  if (*(void *)v45 != v46)
  {
    if (v45[16] <= 0x14u)
    {
      unsigned int v45 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v71 + 28))(v71, 49, v45, v46);
      if (v45) {
        BOOL v49 = v45[16] >= 0x1Cu;
      }
      else {
        BOOL v49 = 0;
      }
      if (v49)
      {
        (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v72 + 16))(v72, v45, v60, v68, v69);
        if (v66)
        {
          int v56 = (llvm::MDNode **)v65;
          uint64_t v57 = (llvm::MDNode **)((char *)v65 + 16 * v66);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v45, *(_DWORD *)v56, v56[1]);
            v56 += 2;
          }
          while (v56 != v57);
        }
      }
    }
    else
    {
      __int16 v63 = 257;
      unsigned int v45 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v45, v46, v62, 0);
      (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v72 + 16))(v72, v45, v60, v68, v69);
      if (v66)
      {
        uint64_t v47 = (llvm::MDNode **)v65;
        uint64_t v48 = (llvm::MDNode **)((char *)v65 + 16 * v66);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v45, *(_DWORD *)v47, v47[1]);
          v47 += 2;
        }
        while (v47 != v48);
      }
    }
  }
  __int16 v63 = 257;
  uint64_t v50 = sub_1CB844AF4((uint64_t)&v65, v45, (uint64_t)v31, (uint64_t)v62);
  sub_1CCB24DAC((uint64_t)a1, (uint64_t *)a2, v50);
  sub_1CCB28C0C(a1, a2);
  if (v65 != v67) {
    free(v65);
  }
}

void sub_1CCB2F5EC(void *a1, uint64_t *a2, llvm::LLVMContext *a3)
{
  uint64_t v6 = 0;
  v103[1] = *MEMORY[0x1E4F143B8];
  int v7 = *(unsigned __int8 *)(*(void *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)] + 8);
  uint64_t v8 = *(void *)*a2;
  uint64_t v88 = v90;
  uint64_t v89 = 0x200000000;
  uint64_t v93 = v8;
  uint64_t v94 = &v102;
  int v95 = v103;
  uint64_t v96 = 0;
  int v97 = 0;
  __int16 v98 = 512;
  char v99 = 7;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  uint64_t v102 = &unk_1F2616E88;
  v103[0] = &unk_1F2617008;
  uint64_t v9 = a2 + 3;
  uint64_t v11 = a2[5];
  uint64_t v10 = (unsigned __int8 *)a2[6];
  uint64_t v91 = v11;
  uint64_t v92 = v9;
  v86[0] = (uint64_t)v10;
  if (v10)
  {
    llvm::MetadataTracking::track((uint64_t)v86, v10, 2);
    uint64_t v6 = v86[0];
  }
  sub_1CB8461A4((uint64_t)&v88, 0, v6);
  if (v86[0])
  {
    int v64 = *(unsigned __int8 *)v86[0];
    if ((v64 - 4) > 0x1E)
    {
      if ((v64 - 3) >= 0xFFFFFFFE) {
        uint64_t v67 = v86[0];
      }
      else {
        uint64_t v67 = 0;
      }
      if ((v64 - 3) < 0xFFFFFFFE)
      {
        if (v64 == 3) {
          *(void *)(v86[0] + 8) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v66 = v67 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v86[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v86[0] + 12)) {
        goto LABEL_4;
      }
      uint64_t v65 = *(void *)(v86[0] + 16);
      if ((v65 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v66 = v65 & 0xFFFFFFFFFFFFFFF8;
      if (!v66) {
        goto LABEL_4;
      }
    }
    v84[0] = (const char *)v86;
    sub_1CC5FA668(v66 + 16, v84);
  }
LABEL_4:
  int v12 = *((_DWORD *)a2 + 5);
  if ((v12 & 0x40000000) != 0) {
    int v13 = (uint64_t *)*(a2 - 1);
  }
  else {
    int v13 = &a2[-4 * (v12 & 0x7FFFFFF)];
  }
  int v14 = (unsigned __int8 *)sub_1CCB16AB0((uint64_t)a1, *v13);
  int v15 = *((_DWORD *)a2 + 5);
  if ((v15 & 0x40000000) != 0) {
    int v16 = (uint64_t *)*(a2 - 1);
  }
  else {
    int v16 = &a2[-4 * (v15 & 0x7FFFFFF)];
  }
  __int16 v19 = (unsigned __int8 *)sub_1CCB16AB0((uint64_t)a1, v16[4]);
  if (v7 == 10)
  {
    uint64_t v20 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)(a1[1] + 16), a3);
    double v22 = llvm::FixedVectorType::get(v20, (llvm::Type *)(0x40 / a3));
    uint64_t v23 = (llvm::Constant *)v21;
    __int16 v87 = 257;
    if (*(void *)v14 != v21)
    {
      if (v14[16] <= 0x14u)
      {
        uint64_t v26 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t, double))*v94 + 28))(v94, 49, v14, v21, v22);
        int v14 = (unsigned __int8 *)v26;
        if (v26)
        {
          if (*(unsigned __int8 *)(v26 + 16) >= 0x1Cu)
          {
            (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, uint64_t *))(*v95 + 16))(v95, v26, v86, v91, v92);
            if (v89)
            {
              BOOL v80 = (llvm::MDNode **)v88;
              int v81 = (llvm::MDNode **)((char *)v88 + 16 * v89);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v14, *(_DWORD *)v80, v80[1]);
                v80 += 2;
              }
              while (v80 != v81);
            }
          }
        }
      }
      else
      {
        __int16 v85 = 257;
        int v14 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v14, v21, v84, 0);
        (*(void (**)(void *, unsigned __int8 *, uint64_t *, uint64_t, uint64_t *))(*v95 + 16))(v95, v14, v86, v91, v92);
        if (v89)
        {
          uint64_t v24 = (llvm::MDNode **)v88;
          uint64_t v25 = (llvm::MDNode **)((char *)v88 + 16 * v89);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v14, *(_DWORD *)v24, v24[1]);
            v24 += 2;
          }
          while (v24 != v25);
        }
      }
    }
    __int16 v87 = 257;
    if (*(llvm::Constant **)v19 != v23)
    {
      if (v19[16] <= 0x14u)
      {
        __int16 v19 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, llvm::Constant *))*v94
                                  + 28))(v94, 49, v19, v23);
        if (v19) {
          BOOL v29 = v19[16] >= 0x1Cu;
        }
        else {
          BOOL v29 = 0;
        }
        if (v29)
        {
          (*(void (**)(void *, unsigned __int8 *, uint64_t *, uint64_t, uint64_t *))(*v95 + 16))(v95, v19, v86, v91, v92);
          if (v89)
          {
            int v72 = (llvm::MDNode **)v88;
            uint64_t v73 = (llvm::MDNode **)((char *)v88 + 16 * v89);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v19, *(_DWORD *)v72, v72[1]);
              v72 += 2;
            }
            while (v72 != v73);
          }
        }
      }
      else
      {
        __int16 v85 = 257;
        __int16 v19 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v19, (uint64_t)v23, v84, 0);
        (*(void (**)(void *, unsigned __int8 *, uint64_t *, uint64_t, uint64_t *))(*v95 + 16))(v95, v19, v86, v91, v92);
        if (v89)
        {
          __int16 v27 = (llvm::MDNode **)v88;
          unsigned int v28 = (llvm::MDNode **)((char *)v88 + 16 * v89);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v19, *(_DWORD *)v27, v27[1]);
            v27 += 2;
          }
          while (v27 != v28);
        }
      }
    }
  }
  else
  {
    uint64_t v23 = *(llvm::Constant **)v14;
  }
  NullValue = llvm::Constant::getNullValue(v23, v17, v18);
  __int16 v87 = 257;
  unsigned int v31 = sub_1CB845F20((uint64_t)&v88, 33, v14, (uint64_t)NullValue, (uint64_t)v86);
  uint64_t v34 = (unsigned __int8 *)v31;
  __int16 v83 = 257;
  if (*(llvm::Constant **)v31 != v23)
  {
    if (*((unsigned __int8 *)v31 + 16) <= 0x14u)
    {
      uint64_t v34 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, llvm::Constant *))*v94
                                + 28))(v94, 40, v31, v23);
      if (v34) {
        BOOL v37 = v34[16] >= 0x1Cu;
      }
      else {
        BOOL v37 = 0;
      }
      if (v37)
      {
        (*(void (**)(void *, unsigned __int8 *, unsigned char *, uint64_t, uint64_t *))(*v95 + 16))(v95, v34, v82, v91, v92);
        if (v89)
        {
          uint64_t v68 = (llvm::MDNode **)v88;
          uint64_t v69 = (llvm::MDNode **)((char *)v88 + 16 * v89);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v34, *(_DWORD *)v68, v68[1]);
            v68 += 2;
          }
          while (v68 != v69);
        }
      }
    }
    else
    {
      __int16 v85 = 257;
      uint64_t v34 = (unsigned __int8 *)llvm::CastInst::Create(40, (uint64_t)v31, (uint64_t)v23, v84, 0);
      (*(void (**)(void *, unsigned __int8 *, unsigned char *, uint64_t, uint64_t *))(*v95 + 16))(v95, v34, v82, v91, v92);
      if (v89)
      {
        unint64_t v35 = (llvm::MDNode **)v88;
        unint64_t v36 = (llvm::MDNode **)((char *)v88 + 16 * v89);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v34, *(_DWORD *)v35, v35[1]);
          v35 += 2;
        }
        while (v35 != v36);
      }
    }
  }
  uint64_t v38 = llvm::Constant::getNullValue(v23, v32, v33);
  __int16 v87 = 257;
  uint64_t v39 = sub_1CB845F20((uint64_t)&v88, 33, v19, (uint64_t)v38, (uint64_t)v86);
  uint64_t v40 = (unsigned __int8 *)v39;
  __int16 v83 = 257;
  if (*(llvm::Constant **)v39 != v23)
  {
    if (*((unsigned __int8 *)v39 + 16) <= 0x14u)
    {
      uint64_t v40 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, llvm::Constant *))*v94
                                + 28))(v94, 40, v39, v23);
      if (v40) {
        BOOL v43 = v40[16] >= 0x1Cu;
      }
      else {
        BOOL v43 = 0;
      }
      if (v43)
      {
        (*(void (**)(void *, unsigned __int8 *, unsigned char *, uint64_t, uint64_t *))(*v95 + 16))(v95, v40, v82, v91, v92);
        if (v89)
        {
          uint64_t v70 = (llvm::MDNode **)v88;
          uint64_t v71 = (llvm::MDNode **)((char *)v88 + 16 * v89);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v40, *(_DWORD *)v70, v70[1]);
            v70 += 2;
          }
          while (v70 != v71);
        }
      }
    }
    else
    {
      __int16 v85 = 257;
      uint64_t v40 = (unsigned __int8 *)llvm::CastInst::Create(40, (uint64_t)v39, (uint64_t)v23, v84, 0);
      (*(void (**)(void *, unsigned __int8 *, unsigned char *, uint64_t, uint64_t *))(*v95 + 16))(v95, v40, v82, v91, v92);
      if (v89)
      {
        uint64_t v41 = (llvm::MDNode **)v88;
        uint64_t v42 = (llvm::MDNode **)((char *)v88 + 16 * v89);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v40, *(_DWORD *)v41, v41[1]);
          v41 += 2;
        }
        while (v41 != v42);
      }
    }
  }
  if (v7 == 10)
  {
    uint64_t v44 = **(void **)(a1[1] + 16) + 1840;
    __int16 v87 = 257;
    if (*(void *)v34 != v44)
    {
      if (v34[16] <= 0x14u)
      {
        uint64_t v34 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v94 + 28))(v94, 49, v34, v44);
        if (v34) {
          BOOL v47 = v34[16] >= 0x1Cu;
        }
        else {
          BOOL v47 = 0;
        }
        if (v47)
        {
          (*(void (**)(void *, unsigned __int8 *, uint64_t *, uint64_t, uint64_t *))(*v95 + 16))(v95, v34, v86, v91, v92);
          if (v89)
          {
            int v74 = (llvm::MDNode **)v88;
            __int16 v75 = (llvm::MDNode **)((char *)v88 + 16 * v89);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v34, *(_DWORD *)v74, v74[1]);
              v74 += 2;
            }
            while (v74 != v75);
          }
        }
      }
      else
      {
        __int16 v85 = 257;
        uint64_t v34 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v34, v44, v84, 0);
        (*(void (**)(void *, unsigned __int8 *, uint64_t *, uint64_t, uint64_t *))(*v95 + 16))(v95, v34, v86, v91, v92);
        if (v89)
        {
          unsigned int v45 = (llvm::MDNode **)v88;
          uint64_t v46 = (llvm::MDNode **)((char *)v88 + 16 * v89);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v34, *(_DWORD *)v45, v45[1]);
            v45 += 2;
          }
          while (v45 != v46);
        }
      }
    }
    __int16 v87 = 257;
    if (*(void *)v40 != v44)
    {
      if (v40[16] <= 0x14u)
      {
        uint64_t v40 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v94 + 28))(v94, 49, v40, v44);
        if (v40) {
          BOOL v50 = v40[16] >= 0x1Cu;
        }
        else {
          BOOL v50 = 0;
        }
        if (v50)
        {
          (*(void (**)(void *, unsigned __int8 *, uint64_t *, uint64_t, uint64_t *))(*v95 + 16))(v95, v40, v86, v91, v92);
          if (v89)
          {
            char v76 = (llvm::MDNode **)v88;
            uint64_t v77 = (llvm::MDNode **)((char *)v88 + 16 * v89);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v40, *(_DWORD *)v76, v76[1]);
              v76 += 2;
            }
            while (v76 != v77);
          }
        }
      }
      else
      {
        __int16 v85 = 257;
        uint64_t v40 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v40, v44, v84, 0);
        (*(void (**)(void *, unsigned __int8 *, uint64_t *, uint64_t, uint64_t *))(*v95 + 16))(v95, v40, v86, v91, v92);
        if (v89)
        {
          uint64_t v48 = (llvm::MDNode **)v88;
          BOOL v49 = (llvm::MDNode **)((char *)v88 + 16 * v89);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v40, *(_DWORD *)v48, v48[1]);
            v48 += 2;
          }
          while (v48 != v49);
        }
      }
    }
  }
  int v51 = *(uint64_t ***)(*a1 + 40);
  int v52 = *(_DWORD *)(*(a2 - 4) + 36);
  if (v52 <= 12076)
  {
    switch(v52)
    {
      case 11233:
      case 11235:
        int v53 = 11233;
        break;
      case 11234:
      case 11236:
        int v53 = 11234;
        break;
      default:
        int v53 = 12076;
        break;
    }
  }
  else
  {
    if (v52 > 12248)
    {
      if ((v52 - 12249) < 2)
      {
        int v53 = 12249;
        goto LABEL_82;
      }
    }
    else if ((v52 - 12077) < 2)
    {
      int v53 = 12077;
      goto LABEL_82;
    }
    int v53 = 12248;
  }
LABEL_82:
  llvm::Intrinsic::getType(*v51, v53, 0, 0);
  uint64_t v54 = (unsigned __int8 *)off_1E6830B58[v53];
  if (v54) {
    uint64_t v55 = (const char *)strlen(off_1E6830B58[v53]);
  }
  else {
    uint64_t v55 = 0;
  }
  Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v51, v53, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)v51, v54, v55, Type, 0);
  unint64_t v58 = (uint64_t **)v57;
  if (v57) {
    uint64_t v57 = *(void *)(v57 + 24);
  }
  v86[0] = (uint64_t)v34;
  v86[1] = (uint64_t)v40;
  v84[0] = "_msprop_vector_pack";
  __int16 v85 = 259;
  __int16 v59 = (unsigned __int8 *)sub_1CB845BAC((uint64_t *)&v88, (uint64_t **)v57, v58, v86, 2, (uint64_t)v84, 0);
  if (v7 == 10)
  {
    sub_1CCB17A70(a1, *a2);
    __int16 v87 = 257;
    if (*(void *)v59 != v60)
    {
      if (v59[16] <= 0x14u)
      {
        __int16 v59 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v94 + 28))(v94, 49, v59, v60);
        if (v59) {
          BOOL v63 = v59[16] >= 0x1Cu;
        }
        else {
          BOOL v63 = 0;
        }
        if (v63)
        {
          (*(void (**)(void *, unsigned __int8 *, uint64_t *, uint64_t, uint64_t *))(*v95 + 16))(v95, v59, v86, v91, v92);
          if (v89)
          {
            uint64_t v78 = (llvm::MDNode **)v88;
            int v79 = (llvm::MDNode **)((char *)v88 + 16 * v89);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v59, *(_DWORD *)v78, v78[1]);
              v78 += 2;
            }
            while (v78 != v79);
          }
        }
      }
      else
      {
        __int16 v85 = 257;
        __int16 v59 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v59, v60, v84, 0);
        (*(void (**)(void *, unsigned __int8 *, uint64_t *, uint64_t, uint64_t *))(*v95 + 16))(v95, v59, v86, v91, v92);
        if (v89)
        {
          __int16 v61 = (llvm::MDNode **)v88;
          uint64_t v62 = (llvm::MDNode **)((char *)v88 + 16 * v89);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v59, *(_DWORD *)v61, v61[1]);
            v61 += 2;
          }
          while (v61 != v62);
        }
      }
    }
  }
  sub_1CCB24DAC((uint64_t)a1, a2, (llvm::Value *)v59);
  sub_1CCB28C0C(a1, (uint64_t)a2);
  if (v88 != v90) {
    free(v88);
  }
}

void sub_1CCB30380(void *a1, uint64_t a2, int a3)
{
  v67[1] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(**(void **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) + 8) == 10)
  {
    unsigned int v5 = 2 * a3;
    uint64_t v6 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)(a1[1] + 16), (llvm::LLVMContext *)(2 * a3));
    llvm::FixedVectorType::get(v6, (llvm::Type *)(0x40 / v5));
    uint64_t v8 = v7;
    uint64_t v9 = *(llvm::Constant **)a2;
  }
  else
  {
    uint64_t v9 = *(llvm::Constant **)a2;
    uint64_t v8 = *(llvm::Constant **)a2;
  }
  uint64_t v10 = 0;
  uint64_t v11 = *(void *)v9;
  int v52 = v54;
  uint64_t v53 = 0x200000000;
  uint64_t v57 = v11;
  unint64_t v58 = &v66;
  __int16 v59 = v67;
  uint64_t v60 = 0;
  int v61 = 0;
  __int16 v62 = 512;
  char v63 = 7;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  unint64_t v66 = &unk_1F2616E88;
  v67[0] = &unk_1F2617008;
  int v12 = *(unsigned __int8 **)(a2 + 48);
  uint64_t v55 = *(void *)(a2 + 40);
  uint64_t v56 = a2 + 24;
  v48[0] = v12;
  if (v12)
  {
    llvm::MetadataTracking::track((uint64_t)v48, v12, 2);
    uint64_t v10 = v48[0];
  }
  sub_1CB8461A4((uint64_t)&v52, 0, v10);
  if (v48[0])
  {
    int v36 = *(unsigned __int8 *)v48[0];
    if ((v36 - 4) > 0x1E)
    {
      if ((v36 - 3) >= 0xFFFFFFFE) {
        uint64_t v39 = v48[0];
      }
      else {
        uint64_t v39 = 0;
      }
      if ((v36 - 3) < 0xFFFFFFFE)
      {
        if (v36 == 3) {
          *(void *)(v48[0] + 8) = 0;
        }
        goto LABEL_7;
      }
      unint64_t v38 = v39 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v48[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v48[0] + 12)) {
        goto LABEL_7;
      }
      uint64_t v37 = *(void *)(v48[0] + 16);
      if ((v37 & 4) == 0) {
        goto LABEL_7;
      }
      unint64_t v38 = v37 & 0xFFFFFFFFFFFFFFF8;
      if (!v38) {
        goto LABEL_7;
      }
    }
    v50[0] = (const char *)v48;
    sub_1CC5FA668(v38 + 16, v50);
  }
LABEL_7:
  int v13 = *(_DWORD *)(a2 + 20);
  if ((v13 & 0x40000000) != 0) {
    int v14 = *(uint64_t **)(a2 - 8);
  }
  else {
    int v14 = (uint64_t *)(a2 - 32 * (v13 & 0x7FFFFFF));
  }
  int v15 = sub_1CCB16AB0((uint64_t)a1, *v14);
  int v16 = *(_DWORD *)(a2 + 20);
  if ((v16 & 0x40000000) != 0) {
    uint64_t v17 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v17 = a2 - 32 * (v16 & 0x7FFFFFF);
  }
  uint64_t v18 = sub_1CCB16AB0((uint64_t)a1, *(void *)(v17 + 32));
  __int16 v51 = 257;
  __int16 v19 = sub_1CB844AF4((uint64_t)&v52, v15, (uint64_t)v18, (uint64_t)v50);
  double v22 = v19;
  __int16 v49 = 257;
  if (*(llvm::Constant **)v19 != v8)
  {
    if (*((unsigned __int8 *)v19 + 16) <= 0x14u)
    {
      uint64_t v25 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, llvm::Constant *))*v58 + 28))(v58, 49, v19, v8);
      double v22 = (llvm::Instruction *)v25;
      if (v25)
      {
        if (*(unsigned __int8 *)(v25 + 16) >= 0x1Cu)
        {
          (*(void (**)(void *, uint64_t, void *, uint64_t, uint64_t))(*v59 + 16))(v59, v25, v48, v55, v56);
          if (v53)
          {
            uint64_t v44 = (llvm::MDNode **)v52;
            unsigned int v45 = (llvm::MDNode **)((char *)v52 + 16 * v53);
            do
            {
              llvm::Instruction::setMetadata(v22, *(_DWORD *)v44, v44[1]);
              v44 += 2;
            }
            while (v44 != v45);
          }
        }
      }
    }
    else
    {
      __int16 v51 = 257;
      double v22 = llvm::CastInst::Create(49, (uint64_t)v19, (uint64_t)v8, v50, 0);
      (*(void (**)(void *, llvm::Instruction *, void *, uint64_t, uint64_t))(*v59 + 16))(v59, v22, v48, v55, v56);
      if (v53)
      {
        uint64_t v23 = (llvm::MDNode **)v52;
        uint64_t v24 = (llvm::MDNode **)((char *)v52 + 16 * v53);
        do
        {
          llvm::Instruction::setMetadata(v22, *(_DWORD *)v23, v23[1]);
          v23 += 2;
        }
        while (v23 != v24);
      }
    }
  }
  NullValue = llvm::Constant::getNullValue(v8, v20, v21);
  __int16 v49 = 257;
  __int16 v27 = sub_1CB845F20((uint64_t)&v52, 33, v22, (uint64_t)NullValue, (uint64_t)v48);
  unsigned int v28 = (unsigned __int8 *)v27;
  __int16 v47 = 257;
  if (*(llvm::Constant **)v27 != v8)
  {
    if (*((unsigned __int8 *)v27 + 16) <= 0x14u)
    {
      unsigned int v28 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, llvm::Constant *))*v58
                                + 28))(v58, 40, v27, v8);
      if (v28) {
        BOOL v31 = v28[16] >= 0x1Cu;
      }
      else {
        BOOL v31 = 0;
      }
      if (v31)
      {
        (*(void (**)(void *, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*v59 + 16))(v59, v28, v46, v55, v56);
        if (v53)
        {
          uint64_t v40 = (llvm::MDNode **)v52;
          uint64_t v41 = (llvm::MDNode **)((char *)v52 + 16 * v53);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v28, *(_DWORD *)v40, v40[1]);
            v40 += 2;
          }
          while (v40 != v41);
        }
      }
    }
    else
    {
      __int16 v51 = 257;
      unsigned int v28 = (unsigned __int8 *)llvm::CastInst::Create(40, (uint64_t)v27, (uint64_t)v8, v50, 0);
      (*(void (**)(void *, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*v59 + 16))(v59, v28, v46, v55, v56);
      if (v53)
      {
        BOOL v29 = (llvm::MDNode **)v52;
        unint64_t v30 = (llvm::MDNode **)((char *)v52 + 16 * v53);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v28, *(_DWORD *)v29, v29[1]);
          v29 += 2;
        }
        while (v29 != v30);
      }
    }
  }
  sub_1CCB17A70(a1, *(void *)a2);
  __int16 v49 = 257;
  if (*(void *)v28 != v32)
  {
    if (v28[16] <= 0x14u)
    {
      unsigned int v28 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v58 + 28))(v58, 49, v28, v32);
      if (v28) {
        BOOL v35 = v28[16] >= 0x1Cu;
      }
      else {
        BOOL v35 = 0;
      }
      if (v35)
      {
        (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v59 + 16))(v59, v28, v48, v55, v56);
        if (v53)
        {
          uint64_t v42 = (llvm::MDNode **)v52;
          BOOL v43 = (llvm::MDNode **)((char *)v52 + 16 * v53);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v28, *(_DWORD *)v42, v42[1]);
            v42 += 2;
          }
          while (v42 != v43);
        }
      }
    }
    else
    {
      __int16 v51 = 257;
      unsigned int v28 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v28, v32, v50, 0);
      (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v59 + 16))(v59, v28, v48, v55, v56);
      if (v53)
      {
        __int16 v33 = (llvm::MDNode **)v52;
        uint64_t v34 = (llvm::MDNode **)((char *)v52 + 16 * v53);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v28, *(_DWORD *)v33, v33[1]);
          v33 += 2;
        }
        while (v33 != v34);
      }
    }
  }
  sub_1CCB24DAC((uint64_t)a1, (uint64_t *)a2, (llvm::Value *)v28);
  sub_1CCB28C0C(a1, a2);
  if (v52 != v54) {
    free(v52);
  }
}

unsigned __int8 *sub_1CCB30A48(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = (unsigned __int8 *)a3;
  sub_1CCB17A70(a1, *a3);
  uint64_t v6 = *(void *)v3;
  if (*(void *)v3 != v5)
  {
    if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
      int v7 = *(unsigned __int8 *)(**(void **)(v6 + 16) + 8);
    }
    else {
      int v7 = *(_DWORD *)(v6 + 8);
    }
    if (v7 == 15)
    {
      __int16 v24 = 257;
      if (v3[16] <= 0x14u)
      {
        uint64_t v3 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)a2[9] + 224))(a2[9], 47, v3, v5);
        if (v3) {
          BOOL v14 = v3[16] >= 0x1Cu;
        }
        else {
          BOOL v14 = 0;
        }
        if (v14)
        {
          (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a2[10] + 16))(a2[10], v3, v23, a2[6], a2[7]);
          uint64_t v15 = *((unsigned int *)a2 + 2);
          if (v15)
          {
            uint64_t v16 = *a2;
            uint64_t v17 = v16 + 16 * v15;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v3, *(_DWORD *)v16, *(llvm::MDNode **)(v16 + 8));
              v16 += 16;
            }
            while (v16 != v17);
          }
        }
      }
      else
      {
        __int16 v26 = 257;
        uint64_t v3 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v3, v5, v25, 0);
        (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a2[10] + 16))(a2[10], v3, v23, a2[6], a2[7]);
        uint64_t v8 = *((unsigned int *)a2 + 2);
        if (v8)
        {
          uint64_t v9 = *a2;
          uint64_t v10 = v9 + 16 * v8;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v3, *(_DWORD *)v9, *(llvm::MDNode **)(v9 + 8));
            v9 += 16;
          }
          while (v9 != v10);
        }
      }
    }
    else
    {
      __int16 v24 = 257;
      if (v3[16] <= 0x14u)
      {
        uint64_t v3 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)a2[9] + 224))(a2[9], 49, v3, v5);
        if (v3) {
          BOOL v18 = v3[16] >= 0x1Cu;
        }
        else {
          BOOL v18 = 0;
        }
        if (v18)
        {
          (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a2[10] + 16))(a2[10], v3, v23, a2[6], a2[7]);
          uint64_t v20 = *((unsigned int *)a2 + 2);
          if (v20)
          {
            uint64_t v21 = *a2;
            uint64_t v22 = v21 + 16 * v20;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v3, *(_DWORD *)v21, *(llvm::MDNode **)(v21 + 8));
              v21 += 16;
            }
            while (v21 != v22);
          }
        }
      }
      else
      {
        __int16 v26 = 257;
        uint64_t v3 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v3, v5, v25, 0);
        (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a2[10] + 16))(a2[10], v3, v23, a2[6], a2[7]);
        uint64_t v11 = *((unsigned int *)a2 + 2);
        if (v11)
        {
          uint64_t v12 = *a2;
          uint64_t v13 = v12 + 16 * v11;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v3, *(_DWORD *)v12, *(llvm::MDNode **)(v12 + 8));
            v12 += 16;
          }
          while (v12 != v13);
        }
      }
    }
  }
  return v3;
}

char *sub_1CCB30D4C(uint64_t ****a1, uint64_t ***a2)
{
  v48[256] = *MEMORY[0x1E4F143B8];
  uint64_t v46 = v48;
  long long v47 = xmmword_1CFB280C0;
  int v36 = 0;
  char v40 = 0;
  uint64_t v41 = 0;
  BOOL v43 = &v46;
  int v42 = 0;
  BOOL v35 = &unk_1F2646FA8;
  uint64_t v37 = 0;
  unint64_t v38 = 0;
  uint64_t v39 = 0;
  llvm::raw_ostream::write((llvm::raw_ostream *)&v35, "----", 4uLL);
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0) {
    goto LABEL_13;
  }
  uint64_t v4 = ***a2;
  uint64_t v5 = *(void *)(v4 + 152);
  uint64_t v6 = *(unsigned int *)(v4 + 168);
  if (v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v8 = (uint64_t ****)(v5 + 16 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a2) {
      goto LABEL_9;
    }
    int v10 = 1;
    while (v9 != (uint64_t ***)-4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v6 - 1);
      uint64_t v9 = *(uint64_t ****)(v5 + 16 * v7);
      if (v9 == a2)
      {
        uint64_t v8 = (uint64_t ****)(v5 + 16 * v7);
        goto LABEL_9;
      }
    }
  }
  uint64_t v8 = (uint64_t ****)(v5 + 16 * v6);
LABEL_9:
  uint64_t v12 = (size_t *)v8[1];
  size_t v15 = *v12;
  uint64_t v13 = v12 + 2;
  size_t v14 = v15;
  if (v15 <= v38 - v39)
  {
    if (v14)
    {
      memcpy(v39, v13, v14);
      v39 += v14;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v35, (const char *)v13, v14);
  }
LABEL_13:
  if (v38 == v39) {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v35, "@", 1uLL);
  }
  else {
    *v39++ = 64;
  }
  uint64_t v16 = *a1;
  if ((*((unsigned char *)*a1 + 23) & 0x10) == 0) {
    goto LABEL_27;
  }
  uint64_t v17 = ***v16;
  uint64_t v18 = *(void *)(v17 + 152);
  uint64_t v19 = *(unsigned int *)(v17 + 168);
  if (v19)
  {
    LODWORD(v20) = (v19 - 1) & ((v16 >> 4) ^ (v16 >> 9));
    uint64_t v21 = (uint64_t ****)(v18 + 16 * v20);
    uint64_t v22 = *v21;
    if (*v21 == v16) {
      goto LABEL_23;
    }
    int v23 = 1;
    while (v22 != (uint64_t ***)-4096)
    {
      int v24 = v20 + v23++;
      uint64_t v20 = v24 & (v19 - 1);
      uint64_t v22 = *(uint64_t ****)(v18 + 16 * v20);
      if (v22 == v16)
      {
        uint64_t v21 = (uint64_t ****)(v18 + 16 * v20);
        goto LABEL_23;
      }
    }
  }
  uint64_t v21 = (uint64_t ****)(v18 + 16 * v19);
LABEL_23:
  uint64_t v25 = (size_t *)v21[1];
  size_t v28 = *v25;
  __int16 v26 = v25 + 2;
  size_t v27 = v28;
  if (v28 <= v38 - v39)
  {
    if (v27)
    {
      memcpy(v39, v26, v27);
      v39 += v27;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v35, (const char *)v26, v27);
  }
LABEL_27:
  BOOL v29 = (uint64_t *)(*a1)[5];
  String = llvm::ConstantDataArray::getString(*v29, (char *)*v43, (llvm::Type *)v43[1], 1);
  BOOL v31 = (char *)operator new(0x78uLL);
  uint64_t v32 = v31 + 32;
  *((_DWORD *)v31 + 13) = *((_DWORD *)v31 + 13) & 0x38000000 | 1;
  *(void *)BOOL v31 = 0;
  *((void *)v31 + 1) = 0;
  *((void *)v31 + 2) = 0;
  *((void *)v31 + 3) = v31 + 32;
  __int16 v33 = *(llvm::PointerType **)String;
  __int16 v45 = 257;
  llvm::GlobalVariable::GlobalVariable((unint64_t *)v31 + 4, (uint64_t)v29, v33, 0, 8, (unint64_t)String, &v44, 0, 0, 0, 0);
  BOOL v35 = &unk_1F2646B98;
  if (v42 == 1 && v37) {
    MEMORY[0x1D25D9CB0](v37, 0x1000C8077774924);
  }
  if (v46 != v48) {
    free(v46);
  }
  return v32;
}

uint64_t sub_1CCB3109C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = (void *)a3;
  if (!a3)
  {
    uint64_t v5 = **(void **)(a2 + 64);
    uint64_t v6 = *(llvm::ConstantInt **)(v5 + 1960);
    unsigned int v7 = *(_DWORD *)(v5 + 1968);
    unsigned int v15 = v7 >> 8;
    if (v7 >> 8 >= 0x41) {
      operator new[]();
    }
    uint64_t v14 = 0;
    uint64_t v8 = llvm::ConstantInt::get(v6, (llvm::LLVMContext *)&v14, 0);
    if (v15 >= 0x41 && v14) {
      MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
    }
    uint64_t v17 = v8;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  int v10 = *(uint64_t ***)(v9 + 104);
  int v11 = *(uint64_t ***)(v9 + 112);
  __int16 v16 = 257;
  uint64_t v12 = sub_1CB845BAC((uint64_t *)a2, v10, v11, (uint64_t *)&v17, 1, (uint64_t)&v14, 0);
  uint64_t result = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v12 + 64), **(uint64_t ***)v12, -1, 28);
  *(void *)(v12 + 64) = result;
  return result;
}

uint64_t sub_1CCB311F4()
{
  word_1EBCE87F0 = 770;
  v4.n128_u64[0] = (unint64_t)"Track origins (allocation sites) of poisoned memory";
  v4.n128_u64[1] = 51;
  int v3 = 1;
  int v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD542604((llvm::cl::Option *)&unk_1EBD09358, "msan-track-origins", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBD09358, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"keep going after reporting a UMR";
  v4.n128_u64[1] = 32;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBD09418, "msan-keep-going", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD09418, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"poison uninitialized stack variables";
  v4.n128_u64[1] = 36;
  int v3 = 1;
  LOBYTE(v1) = 1;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE8800, "msan-poison-stack", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE8800, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"poison uninitialized stack variables with a call";
  v4.n128_u64[1] = 48;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE88C0, "msan-poison-stack-with-call", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE88C0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"poison uninitialized stack variables with the given pattern";
  v4.n128_u64[1] = 59;
  int v3 = 1;
  int v1 = 255;
  uint64_t v2 = &v1;
  sub_1CD694A98(&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCE8980, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"poison undef temps";
  v4.n128_u64[1] = 18;
  int v3 = 1;
  LOBYTE(v1) = 1;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE8A40, "msan-poison-undef", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE8A40, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"propagate shadow through ICmpEQ and ICmpNE";
  v4.n128_u64[1] = 42;
  int v3 = 1;
  LOBYTE(v1) = 1;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE8B00, "msan-handle-icmp", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE8B00, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"exact handling of relational integer ICmp";
  v4.n128_u64[1] = 41;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE8BC0, "msan-handle-icmp-exact", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE8BC0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"when possible, poison scoped variables at the beginning of the scope (slower, but more precise)";
  v4.n128_u64[1] = 95;
  int v3 = 1;
  LOBYTE(v1) = 1;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&algn_1EBCE8C41[63], "msan-handle-lifetime-intrinsics", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &algn_1EBCE8C41[63], &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"conservative handling of inline assembly";
  v4.n128_u64[1] = 40;
  int v3 = 1;
  LOBYTE(v1) = 1;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE8D40, "msan-handle-asm-conservative", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE8D40, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"report accesses through a pointer which has poisoned shadow";
  v4.n128_u64[1] = 59;
  int v3 = 1;
  LOBYTE(v1) = 1;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE8E00, "msan-check-access-address", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE8E00, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"check arguments and return values at function call boundaries";
  v4.n128_u64[1] = 61;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBD094D8, "msan-eager-checks", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD094D8, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"print out instructions with default strict semantics";
  v4.n128_u64[1] = 52;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE8EC0, "msan-dump-strict-instructions", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE8EC0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"If the function being instrumented requires more than this number of checks and ori"
                                     "gin stores, use callbacks instead of inline checks (-1 means never use callbacks).";
  v4.n128_u64[1] = 165;
  int v3 = 1;
  int v1 = 3500;
  uint64_t v2 = &v1;
  sub_1CD542604((llvm::cl::Option *)&algn_1EBCE8F41[63], "msan-instrumentation-with-call-threshold", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &algn_1EBCE8F41[63], &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Enable KernelMemorySanitizer instrumentation";
  v4.n128_u64[1] = 44;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBD09598, "msan-kernel", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD09598, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Apply no_sanitize to the whole file";
  v4.n128_u64[1] = 35;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE9040, "msan-disable-checks", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE9040, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Insert checks for constant shadow values";
  v4.n128_u64[1] = 40;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE9100, "msan-check-constant-shadow", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE9100, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Place MSan constructors in comdat sections";
  v4.n128_u64[1] = 42;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE91C0, "msan-with-comdat", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE91C0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Define custom MSan AndMask";
  v4.n128_u64[1] = 26;
  int v3 = 1;
  int v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD694C10((uint64_t)&algn_1EBCE9241[63], "msan-and-mask", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CC816390, &algn_1EBCE9241[63], &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Define custom MSan XorMask";
  v4.n128_u64[1] = 26;
  int v3 = 1;
  int v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD694C10((uint64_t)&unk_1EBCE9348, "msan-xor-mask", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CC816390, &unk_1EBCE9348, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Define custom MSan ShadowBase";
  v4.n128_u64[1] = 29;
  int v3 = 1;
  int v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD694C10((uint64_t)&unk_1EBCE9410, "msan-shadow-base", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CC816390, &unk_1EBCE9410, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Define custom MSan OriginBase";
  v4.n128_u64[1] = 29;
  int v3 = 1;
  int v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD694C10((uint64_t)&unk_1EBCE94D8, "msan-origin-base", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CC816390, &unk_1EBCE94D8, &dword_1CB82C000);
}

void llvm::pgo::promoteIndirectCall(llvm::pgo *this, llvm::CallBase *a2, unint64_t a3, uint64_t a4, unint64_t a5, BOOL a6, llvm::OptimizationRemarkEmitter *a7)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a4 - a3 <= a3) {
    unint64_t v9 = a3;
  }
  else {
    unint64_t v9 = a4 - a3;
  }
  if (v9 >= 0xFFFFFFFF) {
    unint64_t v10 = v9 / 0xFFFFFFFF + 1;
  }
  else {
    unint64_t v10 = 1;
  }
  uint64_t v13 = **(uint64_t ***)this;
  v14[0] = a3 / v10;
  v14[1] = (a4 - a3) / v10;
  int v11 = (llvm::Instruction **)llvm::MDBuilder::createBranchWeights(&v13, (uint64_t)v14, 2);
  llvm::versionCallSite(this, a2, v11, v12);
}

void llvm::PGOIndirectCallPromotion::run()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::AnalysisManager<llvm::Module>::getResultImpl();
}

uint64_t sub_1CCB32E74()
{
  LOBYTE(v2) = 0;
  uint64_t v5 = &v2;
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Disable indirect call promotion";
  v3.n128_u64[1] = 31;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCE95A0, "disable-icp", (unsigned char **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE95A0, &dword_1CB82C000);
  int v4 = 0;
  uint64_t v5 = &v4;
  int v1 = 1;
  int v2 = 1;
  v3.n128_u64[0] = (unint64_t)"Max number of promotions for this compilation";
  v3.n128_u64[1] = 45;
  sub_1CD4943F8((llvm::cl::Option *)&unk_1EBCE9660, "icp-cutoff", &v5, &v2, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCE9660, &dword_1CB82C000);
  int v4 = 0;
  uint64_t v5 = &v4;
  int v1 = 1;
  int v2 = 1;
  v3.n128_u64[0] = (unint64_t)"Skip Callsite up to this number for this compilation";
  v3.n128_u64[1] = 52;
  sub_1CD4943F8((llvm::cl::Option *)&unk_1EBCE9720, "icp-csskip", &v5, &v2, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCE9720, &dword_1CB82C000);
  LOBYTE(v2) = 0;
  uint64_t v5 = &v2;
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Run indirect-call promotion in LTO mode";
  v3.n128_u64[1] = 39;
  sub_1CD694F80((char **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCE97E0, &dword_1CB82C000);
  LOBYTE(v2) = 0;
  uint64_t v5 = &v2;
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Run indirect-call promotion in SamplePGO mode";
  v3.n128_u64[1] = 45;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCE98A0, "icp-samplepgo", (unsigned char **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE98A0, &dword_1CB82C000);
  LOBYTE(v2) = 0;
  uint64_t v5 = &v2;
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Run indirect-call promotion for call instructions only";
  v3.n128_u64[1] = 54;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCE9960, "icp-call-only", (unsigned char **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE9960, &dword_1CB82C000);
  LOBYTE(v2) = 0;
  uint64_t v5 = &v2;
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Run indirect-call promotion for invoke instruction only";
  v3.n128_u64[1] = 55;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCE9A20, "icp-invoke-only", (unsigned char **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE9A20, &dword_1CB82C000);
  LOBYTE(v2) = 0;
  uint64_t v5 = &v2;
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Dump IR after transformation happens";
  v3.n128_u64[1] = 36;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCE9AE0, "icp-dumpafter", (unsigned char **)&v5, &v4, &v3);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE9AE0, &dword_1CB82C000);
}

uint64_t llvm::PrepareToSplitEntryBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v11 = a2;
  uint64_t v3 = a1 + 40;
  if (a1 + 40 != a2)
  {
    uint64_t v4 = a2;
    while (!v4 || *(unsigned char *)(v4 - 8) != 59)
    {
      int v8 = sub_1CC82F368(&v11);
      uint64_t v4 = v11;
      if (v8 && v11 && *(_DWORD *)(*(void *)(v11 - 56) + 36) == 173) {
        goto LABEL_15;
      }
LABEL_21:
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t v11 = v4;
      if (v4 == v3) {
        return v2;
      }
    }
    if (*(unsigned char *)(*(void *)(v4 - 56) + 16) != 16) {
      goto LABEL_21;
    }
    uint64_t v5 = *(void *)(v4 + 16);
    uint64_t v6 = *(void *)(*(void *)(v5 + 56) + 80);
    uint64_t v7 = v6 ? v6 - 24 : 0;
    if (v5 != v7 || (*(_WORD *)(v4 - 6) & 0x40) != 0) {
      goto LABEL_21;
    }
LABEL_15:
    if (v4 == v2)
    {
      uint64_t v4 = v2;
      uint64_t v2 = *(void *)(v2 + 8);
    }
    else
    {
      if (v2) {
        unint64_t v9 = (llvm::Instruction *)(v2 - 24);
      }
      else {
        unint64_t v9 = 0;
      }
      llvm::Instruction::moveBefore((llvm::Instruction *)(v4 - 24), v9);
      uint64_t v4 = v11;
    }
    goto LABEL_21;
  }
  return v2;
}

void llvm::initializeInstrumentation(llvm *this, llvm::PassRegistry *a2)
{
  llvm::initializeAddressSanitizerLegacyPassPass(this, a2);
  llvm::initializeModuleAddressSanitizerLegacyPassPass(this, v3);
  llvm::initializeMemProfilerLegacyPassPass(this, v4);
  llvm::initializeModuleMemProfilerLegacyPassPass(this, v5);
  llvm::initializeBoundsCheckingLegacyPassPass(this, v6);
  llvm::initializeControlHeightReductionLegacyPassPass(this, v7);
  llvm::initializeGCOVProfilerLegacyPassPass(this, v8);
  llvm::initializeCGProfileLegacyPassPass(this, v9);
  llvm::initializeInstrOrderFileLegacyPassPass(this, v10);
  llvm::initializeInstrProfilingLegacyPassPass(this, v11);
  llvm::initializeMemorySanitizerLegacyPassPass(this, v12);
  llvm::initializeHWAddressSanitizerLegacyPassPass(this, v13);
  llvm::initializeThreadSanitizerLegacyPassPass(this, v14);
  llvm::initializeModuleSanitizerCoverageLegacyPassPass(this, v15);
  llvm::initializeDataFlowSanitizerLegacyPassPass(this, v16);

  llvm::initializeSoftPointerAuthLegacyPassPass(this, v17);
}

void sub_1CCB332E4(unint64_t **a1, void *a2)
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t *)*a2;
  uint64_t v5 = a2 + 3;
  uint64_t v6 = (void *)a2[4];
  if (v6 != a2 + 3)
  {
    LODWORD(v7) = 0;
    while (1)
    {
      __int16 v83 = v6 - 7;
      if (v6)
      {
        if (*((unsigned char *)v6 - 40) == 3)
        {
          BOOL v84 = (*((_DWORD *)v6 - 9) & 0x7FFFFFF) == 0;
          goto LABEL_106;
        }
      }
      else
      {
        __int16 v83 = 0;
      }
      if (!*((unsigned char *)v83 + 16) && (void *)v83[9] == v83 + 9)
      {
        BOOL v84 = (*((unsigned char *)v83 + 34) & 0x80) == 0;
LABEL_106:
        int v85 = v84;
        goto LABEL_112;
      }
      int v85 = 0;
LABEL_112:
      uint64_t v7 = (llvm::Type *)(v7 + (v85 ^ 1));
      uint64_t v6 = (void *)v6[1];
      if (v6 == v5) {
        goto LABEL_3;
      }
    }
  }
  uint64_t v7 = 0;
LABEL_3:
  a1[3] = (unint64_t *)llvm::ArrayType::get((llvm::ArrayType *)(*v4 + 1984), (llvm::Type *)0x20000);
  uint64_t v8 = *v4;
  a1[4] = (unint64_t *)llvm::ArrayType::get((llvm::ArrayType *)(*v4 + 1912), v7);
  uint64_t v101 = operator new(0x19uLL);
  long long v102 = xmmword_1CD91A420;
  strcpy((char *)v101, "_llvm_order_file_buffer");
  unint64_t v9 = (char *)operator new(0x78uLL);
  unint64_t v10 = (unint64_t *)(v9 + 32);
  *((_DWORD *)v9 + 13) = *((_DWORD *)v9 + 13) & 0x38000000 | 1;
  *(void *)unint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = v9 + 32;
  uint64_t v11 = (llvm::Constant *)(v8 + 1960);
  uint64_t v12 = (llvm::Constant *)a1[3];
  NullValue = llvm::Constant::getNullValue(v12, v13, v14);
  __int16 v106 = 260;
  uint64_t v103 = &v101;
  llvm::GlobalVariable::GlobalVariable(v10, (uint64_t)a2, v12, 0, 3, (unint64_t)NullValue, (const char **)&v103, 0, 0, 0, 0);
  *a1 = v10;
  __int16 v116 = 260;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(a2 + 27);
  p_p = &__p;
  llvm::Triple::Triple((llvm::Triple *)&v103, (const llvm::Twine *)&__p);
  std::string::size_type v17 = (std::string::size_type)*a1;
  llvm::getInstrProfSectionName(7u, v107, 1, &__p);
  char v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    size_t size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else
  {
    size_t size = __p.__r_.__value_.__l.__size_;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((*(unsigned char *)(v17 + 34) & 0x40) != 0 || size)
  {
    if (size)
    {
      p_p = (std::string *)llvm::UniqueStringSaver::save(***(void ***)v17 + 2136, p_p, size);
      uint64_t v21 = v20;
    }
    else
    {
      uint64_t v21 = 0;
    }
    uint64_t v22 = ***(void ***)v17;
    v117.__r_.__value_.__r.__words[0] = v17;
    int v23 = *(_DWORD *)(v22 + 2520);
    if (v23)
    {
      uint64_t v24 = *(void *)(v22 + 2504);
      int v25 = v23 - 1;
      unsigned int v26 = v25 & ((v17 >> 4) ^ (v17 >> 9));
      size_t v27 = (void *)(v24 + 24 * v26);
      uint64_t v28 = *v27;
      if (*v27 == v17)
      {
LABEL_12:
        v27[1] = p_p;
        v27[2] = v21;
        *(_DWORD *)(v17 + 32) = *(_DWORD *)(v17 + 32) & 0xFFBFFFFF | ((v21 != 0) << 22);
        char v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        goto LABEL_13;
      }
      uint64_t v86 = 0;
      int v87 = 1;
      while (v28 != -4096)
      {
        if (v86) {
          BOOL v88 = 0;
        }
        else {
          BOOL v88 = v28 == -8192;
        }
        if (v88) {
          uint64_t v86 = v27;
        }
        unsigned int v89 = v26 + v87++;
        unsigned int v26 = v89 & v25;
        size_t v27 = (void *)(v24 + 24 * v26);
        uint64_t v28 = *v27;
        if (*v27 == v17) {
          goto LABEL_12;
        }
      }
      if (v86) {
        int v90 = v86;
      }
      else {
        int v90 = v27;
      }
    }
    else
    {
      int v90 = 0;
    }
    size_t v27 = sub_1CC5BF31C(v22 + 2504, (uint64_t)&v117, (uint64_t *)&v117, v90);
    std::string::size_type v91 = v117.__r_.__value_.__r.__words[0];
    v27[1] = 0;
    v27[2] = 0;
    *size_t v27 = v91;
    goto LABEL_12;
  }
LABEL_13:
  if (v18 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v117.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v117.__r_.__value_.__r.__words[1] = xmmword_1CFAC3CD0;
  strcpy(v117.__r_.__value_.__l.__data_, "_llvm_order_file_buffer_idx");
  BOOL v29 = (char *)operator new(0x78uLL);
  *((_DWORD *)v29 + 13) = *((_DWORD *)v29 + 13) & 0x38000000 | 1;
  unint64_t v30 = (unint64_t *)(v29 + 32);
  *(void *)BOOL v29 = 0;
  *((void *)v29 + 1) = 0;
  *((void *)v29 + 2) = 0;
  *((void *)v29 + 3) = v29 + 32;
  __int16 v33 = llvm::Constant::getNullValue(v11, v31, v32);
  __int16 v116 = 260;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
  llvm::GlobalVariable::GlobalVariable(v30, (uint64_t)a2, v11, 0, 3, (unint64_t)v33, (const char **)&__p.__r_.__value_.__l.__data_, 0, 0, 0, 0);
  a1[1] = v30;
  *((unsigned char *)&v113.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&v113, "bitmap_0");
  uint64_t v34 = (char *)operator new(0x78uLL);
  BOOL v35 = (unint64_t *)(v34 + 32);
  *((_DWORD *)v34 + 13) = *((_DWORD *)v34 + 13) & 0x38000000 | 1;
  *(void *)uint64_t v34 = 0;
  *((void *)v34 + 1) = 0;
  *((void *)v34 + 2) = 0;
  *((void *)v34 + 3) = v34 + 32;
  int v36 = (llvm::Constant *)a1[4];
  uint64_t v39 = llvm::Constant::getNullValue(v36, v37, v38);
  __int16 v116 = 260;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
  llvm::GlobalVariable::GlobalVariable(v35, (uint64_t)a2, v36, 0, 8, (unint64_t)v39, (const char **)&__p.__r_.__value_.__l.__data_, 0, 0, 0, 0);
  a1[2] = v35;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v113.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v117.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v104) < 0) {
    operator delete(v103);
  }
  if (SHIBYTE(v102) < 0) {
    operator delete(v101);
  }
  char v40 = (void *)a2[4];
  if (v40 != v5)
  {
    uint64_t v94 = (void *)*MEMORY[0x1E4FBA408];
    uint64_t v92 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    uint64_t v93 = *(void **)(MEMORY[0x1E4FBA408] + 64);
    do
    {
      if (v40) {
        uint64_t v41 = (uint64_t ***)(v40 - 7);
      }
      else {
        uint64_t v41 = 0;
      }
      if (v40 && *((unsigned char *)v41 + 16) == 3)
      {
        if ((*((_DWORD *)v41 + 5) & 0x7FFFFFF) != 0) {
          goto LABEL_35;
        }
      }
      else if (*((unsigned char *)v41 + 16) || v41[9] != (uint64_t **)(v41 + 9) || (*((unsigned char *)v41 + 34) & 0x80) != 0)
      {
LABEL_35:
        uint64_t v42 = byte_1EBCE9C37 & 0x7F;
        if (byte_1EBCE9C37 < 0) {
          uint64_t v42 = qword_1EBCE9C28;
        }
        unsigned int v43 = v41 >> 4;
        if (v42)
        {
          std::mutex::lock(&stru_1EA615340);
          int v99 = 0;
          uint64_t v100 = std::system_category();
          if (byte_1EBCE9C37 >= 0) {
            uint64_t v44 = byte_1EBCE9C37 & 0x7F;
          }
          else {
            uint64_t v44 = qword_1EBCE9C28;
          }
          if (byte_1EBCE9C37 >= 0) {
            __int16 v45 = &qword_1EBCE9C20;
          }
          else {
            __int16 v45 = (uint64_t *)qword_1EBCE9C20;
          }
          llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v101, v45, v44, (uint64_t)&v99, 4);
          if (v99)
          {
            v117.__r_.__value_.__r.__words[0] = (std::string::size_type)"Failed to open ";
            __int16 v118 = 259;
            __int16 v114 = 260;
            v113.__r_.__value_.__r.__words[0] = (std::string::size_type)&qword_1EBCE9C20;
            sub_1CD3E3950((uint64_t *)&v117, (uint64_t *)&v113, (uint64_t)&__p);
            v111.__r_.__value_.__r.__words[0] = (std::string::size_type)" to save mapping file for order file instrumentation\n";
            __int16 v112 = 259;
            sub_1CD3E3950((uint64_t *)&__p, (uint64_t *)&v111, (uint64_t)&v103);
            llvm::report_fatal_error((llvm *)&v103, (const llvm::Twine *)1);
          }
          sub_1CBF43AA8((uint64_t)&v103);
          *(_DWORD *)((char *)&v105 + *(void *)(v104 - 24)) = *(_DWORD *)((unsigned char *)&v105 + *(void *)(v104 - 24)) & 0xFFFFFFB5 | 8;
          if ((*((unsigned char *)v41 + 23) & 0x10) != 0)
          {
            uint64_t v46 = ***v41;
            uint64_t v47 = *(void *)(v46 + 152);
            uint64_t v48 = *(unsigned int *)(v46 + 168);
            if (v48)
            {
              LODWORD(v49) = (v48 - 1) & (v43 ^ (v41 >> 9));
              BOOL v50 = (uint64_t ****)(v47 + 16 * v49);
              __int16 v51 = *v50;
              if (*v50 != v41)
              {
                int v52 = 1;
                do
                {
                  if (v51 == (uint64_t ***)-4096) {
                    goto LABEL_52;
                  }
                  int v53 = v49 + v52++;
                  uint64_t v49 = v53 & (v48 - 1);
                  __int16 v51 = *(uint64_t ****)(v47 + 16 * v49);
                }
                while (v51 != v41);
                BOOL v50 = (uint64_t ****)(v47 + 16 * v49);
              }
            }
            else
            {
LABEL_52:
              BOOL v50 = (uint64_t ****)(v47 + 16 * v48);
            }
            uint64_t v54 = v50[1];
            size_t v57 = (size_t)*v54;
            uint64_t v55 = (int *)(v54 + 2);
            size_t v56 = v57;
          }
          else
          {
            size_t v56 = 0;
            uint64_t v55 = (int *)&byte_1CFBCE98E;
          }
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = xmmword_1CFAC4320;
          __p.__r_.__value_.__r.__words[2] = 0;
          llvm::MD5::update((int *)&__p, v55, v56);
          llvm::MD5::final((int *)&__p, (int *)&v117);
          std::ostream::operator<<();
          std::stringbuf::str();
          unint64_t v58 = std::string::insert(&v98, 0, "MD5 ");
          std::string::size_type v59 = v58->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v111.__r_.__value_.__l.__data_ = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          v111.__r_.__value_.__r.__words[2] = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          uint64_t v60 = std::string::append(&v111, " ");
          std::string::size_type v61 = v60->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v113.__r_.__value_.__l.__data_ = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
          v113.__r_.__value_.__r.__words[2] = v61;
          v60->__r_.__value_.__l.__size_ = 0;
          v60->__r_.__value_.__r.__words[2] = 0;
          v60->__r_.__value_.__r.__words[0] = 0;
          if ((*((unsigned char *)v41 + 23) & 0x10) == 0)
          {
            size_t v71 = 0;
            HIBYTE(v97) = 0;
            p_dst = (void **)&__dst;
            goto LABEL_70;
          }
          uint64_t v62 = ***v41;
          uint64_t v63 = *(void *)(v62 + 152);
          uint64_t v64 = *(unsigned int *)(v62 + 168);
          if (v64)
          {
            LODWORD(v65) = (v64 - 1) & (v43 ^ (v41 >> 9));
            unint64_t v66 = (uint64_t ****)(v63 + 16 * v65);
            uint64_t v67 = *v66;
            if (*v66 != v41)
            {
              int v68 = 1;
              do
              {
                if (v67 == (uint64_t ***)-4096) {
                  goto LABEL_61;
                }
                int v69 = v65 + v68++;
                uint64_t v65 = v69 & (v64 - 1);
                uint64_t v67 = *(uint64_t ****)(v63 + 16 * v65);
              }
              while (v67 != v41);
              unint64_t v66 = (uint64_t ****)(v63 + 16 * v65);
            }
          }
          else
          {
LABEL_61:
            unint64_t v66 = (uint64_t ****)(v63 + 16 * v64);
          }
          uint64_t v70 = (unint64_t *)v66[1];
          unint64_t v73 = *v70;
          int v72 = v70 + 2;
          size_t v71 = v73;
          if (v73 >= 0x7FFFFFFFFFFFFFF8) {
            abort();
          }
          if (v71 >= 0x17)
          {
            uint64_t v75 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v71 | 7) != 0x17) {
              uint64_t v75 = v71 | 7;
            }
            uint64_t v76 = v75 + 1;
            p_dst = (void **)operator new(v75 + 1);
            std::string::size_type v96 = v71;
            int64_t v97 = v76 | 0x8000000000000000;
            __dst = p_dst;
          }
          else
          {
            HIBYTE(v97) = v71;
            p_dst = (void **)&__dst;
            if (!v71)
            {
LABEL_70:
              *((unsigned char *)p_dst + v71) = 0;
              if (v97 >= 0) {
                uint64_t v77 = (const std::string::value_type *)&__dst;
              }
              else {
                uint64_t v77 = (const std::string::value_type *)__dst;
              }
              if (v97 >= 0) {
                std::string::size_type v78 = HIBYTE(v97) & 0x7F;
              }
              else {
                std::string::size_type v78 = v96;
              }
              int v79 = std::string::append(&v113, v77, v78);
              std::string::size_type v80 = v79->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v117.__r_.__value_.__l.__data_ = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
              v117.__r_.__value_.__r.__words[2] = v80;
              v79->__r_.__value_.__l.__size_ = 0;
              v79->__r_.__value_.__r.__words[2] = 0;
              v79->__r_.__value_.__r.__words[0] = 0;
              std::string::push_back(&v117, 10);
              std::string __p = v117;
              memset(&v117, 0, sizeof(v117));
              if (SHIBYTE(v97) < 0) {
                operator delete(__dst);
              }
              if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v113.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v111.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v98.__r_.__value_.__l.__data_);
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v81 = &__p;
              }
              else {
                int v81 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t v82 = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
              }
              else {
                size_t v82 = __p.__r_.__value_.__l.__size_;
              }
              llvm::raw_ostream::write((llvm::raw_ostream *)&v101, (const char *)v81, v82);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              uint64_t v103 = v94;
              *(void **)((char *)&v103 + *((void *)v94 - 3)) = v93;
              uint64_t v104 = v92;
              uint64_t v105 = MEMORY[0x1E4FBA470] + 16;
              if (v109 < 0) {
                operator delete(v108);
              }
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x1D25D9C00](&v110);
              llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v101);
              std::mutex::unlock(&stru_1EA615340);
              goto LABEL_95;
            }
          }
          memmove(p_dst, v72, v71);
          goto LABEL_70;
        }
LABEL_95:
        uint64_t v103 = "order_file_entry";
        __int16 v106 = 259;
        operator new();
      }
      char v40 = (void *)v40[1];
    }
    while (v40 != v5);
  }
}

void llvm::initializeInstrOrderFileLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE9C90, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCB34D28;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCE9C90, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CCB34D28()
{
}

uint64_t sub_1CCB34DC4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCE9C88;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F262C2B0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE9C90, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCB34D28;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCE9C90, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CCB34E74()
{
}

void sub_1CCB34EB4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCB34EEC(llvm::ModulePass *a1, llvm::LLVMContextImpl ***a2)
{
  int v3 = llvm::ModulePass::skipModule(a1, a2);
  if ((v3 & 1) == 0)
  {
    uint64_t v6 = 0;
    memset(v5, 0, sizeof(v5));
    sub_1CCB332E4((unint64_t **)v5, a2);
  }
  return v3 ^ 1u;
}

uint64_t sub_1CCB34F3C()
{
  v2.n128_u64[0] = (unint64_t)"Dump functions and their MD5 hash to deobfuscate profile data";
  v2.n128_u64[1] = 61;
  int v3 = "";
  int v1 = 1;
  sub_1CD695328(&v3, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCE9BA0, &dword_1CB82C000);
  return __cxa_atexit(MEMORY[0x1E4FBA268], &stru_1EA615340, &dword_1CB82C000);
}

uint64_t llvm::InstrProfiling::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = a2;
  sub_1CCB0861C((void *)(a1 + 88), a3);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  sub_1CD695B54((_DWORD *)(a1 + 120));
  *(void *)(a1 + 152) = *(void *)(a1 + 144);
  *(void *)(a1 + 176) = *(void *)(a1 + 168);
  __int16 v86 = 260;
  v85[0] = a2 + 216;
  llvm::Triple::Triple((llvm::Triple *)&v87, (const llvm::Twine *)v85);
  uint64_t v5 = (void **)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)uint64_t v5 = v87;
  *(void *)(a1 + 56) = v88;
  *(_OWORD *)(a1 + 64) = v89;
  *(void *)(a1 + 80) = v90;
  if (*(_DWORD *)(a1 + 76) == 6) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = llvm::InstrProfiling::emitRuntimeHook((llvm::InstrProfiling *)a1);
  }
  uint64_t v80 = a2;
  uint64_t v7 = *(uint64_t **)(a2 + 112);
  unsigned int v8 = *((_DWORD *)v7 + 8);
  if (v8 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = v8;
  }
  unsigned int v81 = *((_DWORD *)v7 + 8);
  if (v8 <= 0x14) {
    size_t v10 = v9;
  }
  else {
    size_t v10 = 21;
  }
  uint64_t v82 = *((unsigned int *)v7 + 2);
  __int16 v83 = *(uint64_t **)(a2 + 112);
  if (!v82) {
    goto LABEL_24;
  }
  uint64_t v11 = 0;
  int v12 = 0;
  do
    int v12 = 33 * v12 + aLlvmCoverageNa[v11++];
  while (v10 != v11);
  uint64_t v13 = *v7;
  uint64_t v14 = *v7 + 8 * v82 + 8;
  int v15 = 1;
  int v16 = v12;
  while (1)
  {
    uint64_t v17 = v16 & (v82 - 1);
    char v18 = *(void **)(v13 + 8 * v17);
    if (v18 != (void *)-8)
    {
      if (!v18) {
        goto LABEL_24;
      }
      if (*(_DWORD *)(v14 + 4 * v17) == v12
        && v10 == *v18
        && !memcmp("__llvm_coverage_names", (char *)v18 + *((unsigned int *)v83 + 5), v10))
      {
        break;
      }
    }
    int v16 = v15 + v17;
    ++v15;
  }
  if (v17 == -1
    || (int)v17 == v82
    || (int v79 = *(llvm::GlobalVariable **)(*(void *)(v13 + 8 * (int)v17) + 8)) == 0
    || *((unsigned char *)v79 + 16) != 3)
  {
LABEL_24:
    int v79 = 0;
  }
  if (v81 <= 1) {
    uint64_t v19 = 1;
  }
  else {
    uint64_t v19 = v81;
  }
  if (v81 <= 0x13) {
    size_t v20 = v19;
  }
  else {
    size_t v20 = 20;
  }
  if (v82)
  {
    uint64_t v21 = 0;
    int v22 = 0;
    do
      int v22 = 33 * v22 + aLlvmInstrprofC[v21++];
    while (v20 != v21);
    uint64_t v23 = *v83;
    uint64_t v24 = *v83 + 8 * v82 + 8;
    int v25 = 1;
    int v26 = v22;
    while (1)
    {
      uint64_t v27 = v26 & (v82 - 1);
      uint64_t v28 = *(void **)(v23 + 8 * v27);
      if (v28 != (void *)-8)
      {
        if (!v28) {
          goto LABEL_44;
        }
        if (*(_DWORD *)(v24 + 4 * v27) == v22
          && v20 == *v28
          && !memcmp("llvm.instrprof.cover", (char *)v28 + *((unsigned int *)v83 + 5), v20))
        {
          break;
        }
      }
      int v26 = v25 + v27;
      ++v25;
    }
    if (v27 != -1 && (int)v27 != v82)
    {
      uint64_t v29 = *(void *)(*(void *)(v23 + 8 * (int)v27) + 8);
      if (v29)
      {
        if (!*(unsigned char *)(v29 + 16) && *(void *)(v29 + 8)) {
          goto LABEL_112;
        }
      }
    }
  }
LABEL_44:
  if (v81 <= 1) {
    uint64_t v30 = 1;
  }
  else {
    uint64_t v30 = v81;
  }
  if (v81 <= 0x17) {
    size_t v31 = v30;
  }
  else {
    size_t v31 = 24;
  }
  if (v82)
  {
    uint64_t v32 = 0;
    int v33 = 0;
    do
      int v33 = 33 * v33 + aLlvmInstrprofI[v32++];
    while (v31 != v32);
    uint64_t v34 = *v83;
    uint64_t v35 = *v83 + 8 * v82 + 8;
    int v36 = 1;
    int v37 = v33;
    while (1)
    {
      uint64_t v38 = v37 & (v82 - 1);
      uint64_t v39 = *(void **)(v34 + 8 * v38);
      if (v39 != (void *)-8)
      {
        if (!v39) {
          goto LABEL_63;
        }
        if (*(_DWORD *)(v35 + 4 * v38) == v33
          && v31 == *v39
          && !memcmp("llvm.instrprof.increment", (char *)v39 + *((unsigned int *)v83 + 5), v31))
        {
          break;
        }
      }
      int v37 = v36 + v38;
      ++v36;
    }
    if (v38 != -1 && (int)v38 != v82)
    {
      uint64_t v40 = *(void *)(*(void *)(v34 + 8 * (int)v38) + 8);
      if (v40)
      {
        if (!*(unsigned char *)(v40 + 16) && *(void *)(v40 + 8))
        {
LABEL_112:
          uint64_t v62 = v80;
          BOOL v63 = v79 != 0;
          goto LABEL_120;
        }
      }
    }
  }
LABEL_63:
  if (v81 <= 1) {
    uint64_t v41 = 1;
  }
  else {
    uint64_t v41 = v81;
  }
  if (v81 <= 0x1C) {
    size_t v42 = v41;
  }
  else {
    size_t v42 = 29;
  }
  if (v82)
  {
    uint64_t v43 = 0;
    int v44 = 0;
    do
      int v44 = 33 * v44 + aLlvmInstrprofI_0[v43++];
    while (v42 != v43);
    uint64_t v45 = *v83;
    uint64_t v46 = *v83 + 8 * v82 + 8;
    int v47 = 1;
    int v48 = v44;
    while (1)
    {
      uint64_t v49 = v48 & (v82 - 1);
      BOOL v50 = *(void **)(v45 + 8 * v49);
      if (v50 != (void *)-8)
      {
        if (!v50) {
          goto LABEL_82;
        }
        if (*(_DWORD *)(v46 + 4 * v49) == v44
          && v42 == *v50
          && !memcmp("llvm.instrprof.increment.step", (char *)v50 + *((unsigned int *)v83 + 5), v42))
        {
          break;
        }
      }
      int v48 = v47 + v49;
      ++v47;
    }
    if (v49 != -1 && (int)v49 != v82)
    {
      uint64_t v51 = *(void *)(*(void *)(v45 + 8 * (int)v49) + 8);
      if (v51)
      {
        if (!*(unsigned char *)(v51 + 16) && *(void *)(v51 + 8)) {
          goto LABEL_112;
        }
      }
    }
  }
LABEL_82:
  if (v81 <= 1) {
    uint64_t v52 = 1;
  }
  else {
    uint64_t v52 = v81;
  }
  if (v81 <= 0x1B) {
    size_t v53 = v52;
  }
  else {
    size_t v53 = 28;
  }
  LODWORD(v54) = v82;
  if (!v82) {
    goto LABEL_117;
  }
  uint64_t v55 = 0;
  int v56 = 0;
  do
    int v56 = 33 * v56 + aLlvmInstrprofV[v55++];
  while (v53 != v55);
  uint64_t v57 = *v83;
  uint64_t v58 = *v83 + 8 * v82 + 8;
  int v59 = 1;
  int v60 = v56;
  while (1)
  {
    uint64_t v61 = v60 & (v82 - 1);
    uint64_t v54 = *(void *)(v57 + 8 * v61);
    if (v54 != -8)
    {
      if (!v54) {
        goto LABEL_117;
      }
      if (*(_DWORD *)(v58 + 4 * v61) == v56
        && v53 == *(void *)v54
        && !memcmp("llvm.instrprof.value.profile", (const void *)(v54 + *((unsigned int *)v83 + 5)), v53))
      {
        break;
      }
    }
    int v60 = v59 + v61;
    ++v59;
  }
  if (v61 == -1)
  {
    LODWORD(v54) = 0;
LABEL_117:
    uint64_t v62 = v80;
    goto LABEL_118;
  }
  uint64_t v62 = v80;
  if ((int)v61 == v82) {
    goto LABEL_115;
  }
  uint64_t v54 = *(void *)(*(void *)(v57 + 8 * (int)v61) + 8);
  if (v54)
  {
    if (!*(unsigned char *)(v54 + 16))
    {
      LODWORD(v54) = *(void *)(v54 + 8) != 0;
      goto LABEL_118;
    }
LABEL_115:
    LODWORD(v54) = 0;
  }
LABEL_118:
  BOOL v63 = v79 != 0;
  if (v79 || v54)
  {
LABEL_120:
    uint64_t v64 = v62 + 24;
    uint64_t v65 = *(void *)(v62 + 32);
    if (v65 != v62 + 24)
    {
      BOOL v84 = v63;
      do
      {
        uint64_t v66 = v65 - 56;
        if (!v65) {
          uint64_t v66 = 0;
        }
        uint64_t v67 = v66 + 72;
        uint64_t v68 = *(void *)(v66 + 80);
        if (v68 != v66 + 72)
        {
          int v69 = 0;
          do
          {
            uint64_t v70 = v68 - 24;
            if (!v68) {
              uint64_t v70 = 0;
            }
            uint64_t v71 = v70 + 40;
            for (uint64_t i = *(void *)(v70 + 48); i != v71; uint64_t i = *(void *)(i + 8))
            {
              if (i) {
                uint64_t v73 = i - 24;
              }
              else {
                uint64_t v73 = 0;
              }
              BOOL v74 = sub_1CCB3B5F4(v73);
              if (i && v74)
              {
                llvm::InstrProfiling::computeNumValueSiteCounts(a1, v73);
              }
              else if (!v69)
              {
                if (sub_1CCB3B5A8(v73)) {
                  int v69 = (llvm::Value **)v73;
                }
                else {
                  int v69 = 0;
                }
              }
            }
            uint64_t v68 = *(void *)(v68 + 8);
          }
          while (v68 != v67);
          if (v69) {
            llvm::InstrProfiling::getOrCreateRegionCounters((llvm::InstrProfiling *)a1, v69);
          }
        }
        uint64_t v65 = *(void *)(v65 + 8);
      }
      while (v65 != v64);
      uint64_t v75 = *(void *)(v80 + 32);
      if (v75 == v64)
      {
        if (!v84)
        {
LABEL_152:
          if ((v6 & 1) == 0) {
            return 0;
          }
          llvm::InstrProfiling::emitVNodes((llvm::InstrProfiling *)a1);
          llvm::InstrProfiling::emitNameData((llvm::InstrProfiling *)a1);
          llvm::InstrProfiling::emitRuntimeHook((llvm::InstrProfiling *)a1);
          llvm::InstrProfiling::emitRegistration(a1);
          llvm::InstrProfiling::emitUses((llvm::InstrProfiling *)a1, v78);
          llvm::InstrProfiling::emitInitialization((llvm::InstrProfiling *)a1);
          return 1;
        }
LABEL_156:
        llvm::InstrProfiling::lowerCoverageData((llvm::InstrProfiling *)a1, v79);
      }
      BOOL v63 = v84;
      do
      {
        if (v75) {
          uint64_t v76 = (llvm::Function *)(v75 - 56);
        }
        else {
          uint64_t v76 = 0;
        }
        LODWORD(v6) = v6 | llvm::InstrProfiling::lowerIntrinsics((llvm::InstrProfiling *)a1, v76);
        uint64_t v75 = *(void *)(v75 + 8);
      }
      while (v75 != v64);
    }
    if (!v63) {
      goto LABEL_152;
    }
    goto LABEL_156;
  }
  return v6;
}

void llvm::initializeInstrProfilingLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  __n128 v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE9CA0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCB357C4;
    v4[1] = &v2;
    int v3 = v4;
    std::__call_once(&qword_1EBCE9CA0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CCB357C4(uint64_t a1)
{
}

uint64_t llvm::InstrProfiling::lowerIntrinsics(llvm::InstrProfiling *this, llvm::Function *a2)
{
  *((void *)this + 31) = *((void *)this + 30);
  __n128 v2 = (char *)a2 + 72;
  int v3 = (char *)*((void *)a2 + 10);
  if (v3 != (char *)a2 + 72)
  {
    do
    {
      uint64_t v5 = v3 - 24;
      if (!v3) {
        uint64_t v5 = 0;
      }
      uint64_t v6 = v5 + 40;
      uint64_t v7 = (char *)*((void *)v5 + 6);
      if (v7 != v5 + 40)
      {
        do
        {
          unsigned int v8 = (char *)*((void *)v7 + 1);
          if (v7) {
            uint64_t v9 = (uint64_t)(v7 - 24);
          }
          else {
            uint64_t v9 = 0;
          }
          if (*(unsigned char *)(v9 + 16) == 84 && (uint64_t v10 = *(void *)(v9 - 32)) != 0)
          {
            if (!*(unsigned char *)(v10 + 16)
              && *(void *)(v10 + 24) == *(void *)(v9 + 72)
              && (*(unsigned char *)(v10 + 33) & 0x20) != 0)
            {
              if (v7 && *(_DWORD *)(v10 + 36) == 161 || (BOOL v14 = sub_1CCB3B5A8(v9), v7) && v14) {
LABEL_23:
              }
                llvm::InstrProfiling::lowerIncrement((uint64_t)this, (llvm::Value **)v9);
            }
            else
            {
              BOOL v11 = sub_1CCB3B5A8(v9);
              if (v7 && v11) {
                goto LABEL_23;
              }
            }
            if (!*(unsigned char *)(v10 + 16)
              && *(void *)(v10 + 24) == *(void *)(v9 + 72)
              && (*(unsigned char *)(v10 + 33) & 0x20) != 0
              && v7
              && *(_DWORD *)(v10 + 36) == 159)
            {
              llvm::InstrProfiling::lowerCover(this, (llvm::Value **)v9);
            }
          }
          else
          {
            BOOL v12 = sub_1CCB3B5A8(v9);
            if (v7 && v12) {
              goto LABEL_23;
            }
          }
          BOOL v13 = sub_1CCB3B5F4(v9);
          if (v7 && v13) {
            llvm::InstrProfiling::lowerValueProfileInst((uint64_t)this, v9);
          }
          uint64_t v7 = v8;
        }
        while (v8 != v6);
      }
      int v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return 0;
}

void llvm::InstrProfiling::lowerIncrement(uint64_t a1, llvm::Value **a2)
{
  v65[1] = *MEMORY[0x1E4F143B8];
  CounterAddress = llvm::InstrProfiling::getCounterAddress((llvm::InstrProfiling *)a1, a2);
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)*a2;
  BOOL v50 = &v52;
  uint64_t v51 = 0x200000000;
  uint64_t v55 = v6;
  int v56 = &v64;
  uint64_t v57 = v65;
  uint64_t v58 = 0;
  int v59 = 0;
  __int16 v60 = 512;
  char v61 = 7;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = &unk_1F2616E88;
  v65[0] = &unk_1F2617008;
  uint64_t v7 = (unsigned __int8 *)a2[6];
  size_t v53 = a2[5];
  uint64_t v54 = (void **)(a2 + 3);
  v46[0] = v7;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)v46, v7, 2);
    uint64_t v5 = v46[0];
  }
  sub_1CB8461A4((uint64_t)&v50, 0, v5);
  if (!v46[0])
  {
LABEL_4:
    if (*(unsigned __int8 *)(a1 + 2) | byte_1EBCE9F68
      || llvm::Constant::isZeroValue(a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 12]) && byte_1EBCEA0E8)
    {
      Step = llvm::InstrProfIncrementInst::getStep((llvm::InstrProfIncrementInst *)a2);
      sub_1CD5097F8((uint64_t *)&v50, 1, (uint64_t)CounterAddress, Step, 0, 2, 1);
    }
    else
    {
      uint64_t v9 = (llvm::Type *)*llvm::InstrProfIncrementInst::getStep((llvm::InstrProfIncrementInst *)a2);
      v46[0] = "pgocount";
      __int16 v47 = 259;
      char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*((void *)v53 + 7) + 40) + 272), v9, 1);
      BOOL v11 = operator new(0x60uLL);
      v11[13] = v11[13] & 0x38000000 | 1;
      BOOL v12 = (llvm::Instruction *)(v11 + 8);
      *(void *)BOOL v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = 0;
      *((void *)v11 + 3) = v11 + 8;
      __int16 v49 = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v11 + 8), (uint64_t)v9, (uint64_t)CounterAddress, v48, 0, Alignment, 0);
      (*(void (**)(void *, llvm::Instruction *, void *, llvm::Value *, void **))(*v57 + 16))(v57, v12, v46, v53, v54);
      if (v51)
      {
        uint64_t v40 = (llvm::MDNode **)v50;
        uint64_t v41 = (llvm::MDNode **)((char *)v50 + 16 * v51);
        do
        {
          llvm::Instruction::setMetadata(v12, *(_DWORD *)v40, v40[1]);
          v40 += 2;
        }
        while (v40 != v41);
      }
      BOOL v13 = llvm::InstrProfIncrementInst::getStep((llvm::InstrProfIncrementInst *)a2);
      __int16 v49 = 257;
      BOOL v14 = sub_1CB844A3C((uint64_t)&v50, v12, (uint64_t)v13, (uint64_t)v48, 0, 0);
      char v15 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*((void *)v53 + 7) + 40) + 272), *(llvm::Type **)v14, 1);
      int v16 = (char *)operator new(0x80uLL);
      *((_DWORD *)v16 + 21) = *((_DWORD *)v16 + 21) & 0x38000000 | 2;
      *(void *)int v16 = 0;
      *((void *)v16 + 2) = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 5) = 0;
      *((void *)v16 + 6) = 0;
      *((void *)v16 + 4) = 0;
      uint64_t v17 = (uint64_t ****)(v16 + 32);
      *((void *)v16 + 8) = ***(void ***)v14 + 1576;
      char v18 = (llvm::Instruction *)(v16 + 64);
      *((void *)v16 + 3) = v16 + 64;
      *((void *)v16 + 7) = v16 + 64;
      *((void *)v16 + 9) = 0;
      v16[80] = 61;
      v16[81] = 0;
      *((_WORD *)v16 + 41) = 0;
      *((_DWORD *)v16 + 21) = 2;
      *(_OWORD *)(v16 + 88) = 0u;
      *(_OWORD *)(v16 + 104) = 0u;
      *((_DWORD *)v16 + 30) = 0;
      *(void *)int v16 = v14;
      uint64_t v21 = *((void *)v14 + 1);
      size_t v20 = (void *)((char *)v14 + 8);
      uint64_t v19 = v21;
      *((void *)v16 + 1) = v21;
      if (v21) {
        *(void *)(v19 + 16) = v16 + 8;
      }
      *((void *)v16 + 2) = v20;
      *size_t v20 = v16;
      if (*((void *)v16 + 4))
      {
        **((void **)v16 + 6) = *((void *)v16 + 5);
        uint64_t v45 = *((void *)v16 + 5);
        if (v45) {
          *(void *)(v45 + 16) = *((void *)v16 + 6);
        }
      }
      *uint64_t v17 = CounterAddress;
      if (CounterAddress)
      {
        uint64_t v24 = CounterAddress[1];
        uint64_t v23 = (uint64_t *****)(CounterAddress + 1);
        int v22 = v24;
        *((void *)v16 + 5) = v24;
        if (v24) {
          v22[2] = (uint64_t *)(v16 + 40);
        }
        *((void *)v16 + 6) = v23;
        *uint64_t v23 = v17;
      }
      *((_WORD *)v16 + 41) = 2 * (v15 & 0x3F);
      v16[124] = 1;
      __int16 v49 = 257;
      (*(void (**)(void *, llvm::Instruction *, const char **, llvm::Value *, void **))(*v57 + 16))(v57, v18, v48, v53, v54);
      if (v51)
      {
        uint64_t v43 = (llvm::MDNode **)v50;
        int v44 = (llvm::MDNode **)((char *)v50 + 16 * v51);
        do
        {
          llvm::Instruction::setMetadata(v18, *(_DWORD *)v43, v43[1]);
          v43 += 2;
        }
        while (v43 != v44);
      }
      int v25 = &unk_1EBCEA1A8;
      if (!word_1EBCEA130) {
        int v25 = (unsigned char *)(a1 + 1);
      }
      if (*v25)
      {
        uint64_t v27 = *(char **)(a1 + 248);
        unint64_t v26 = *(void *)(a1 + 256);
        if ((unint64_t)v27 >= v26)
        {
          uint64_t v29 = *(char **)(a1 + 240);
          uint64_t v30 = (v27 - v29) >> 4;
          unint64_t v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 60) {
            abort();
          }
          uint64_t v32 = v26 - (void)v29;
          if (v32 >> 3 > v31) {
            unint64_t v31 = v32 >> 3;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v31;
          }
          if (v33 >> 60) {
            sub_1CB833614();
          }
          uint64_t v34 = (char *)operator new(16 * v33);
          uint64_t v35 = (llvm::Instruction **)&v34[16 * v30];
          *uint64_t v35 = v12;
          v35[1] = v18;
          uint64_t v28 = v35 + 2;
          if (v27 == v29)
          {
            int v36 = (llvm::Instruction **)&v34[16 * v30];
          }
          else
          {
            do
            {
              int v36 = v35 - 2;
              *((_OWORD *)v35 - 1) = *((_OWORD *)v27 - 1);
              v27 -= 16;
              v35 -= 2;
            }
            while (v27 != v29);
          }
          *(void *)(a1 + 240) = v36;
          *(void *)(a1 + 248) = v28;
          *(void *)(a1 + 256) = &v34[16 * v33];
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *(void *)uint64_t v27 = v12;
          *((void *)v27 + 1) = v18;
          uint64_t v28 = v27 + 16;
        }
        *(void *)(a1 + 248) = v28;
      }
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  int v37 = *(unsigned __int8 *)v46[0];
  if ((v37 - 4) > 0x1E)
  {
    if ((v37 - 3) >= 0xFFFFFFFE) {
      uint64_t v42 = v46[0];
    }
    else {
      uint64_t v42 = 0;
    }
    if ((v37 - 3) < 0xFFFFFFFE)
    {
      if (v37 == 3) {
        *(void *)(v46[0] + 8) = 0;
      }
      goto LABEL_4;
    }
    unint64_t v39 = v42 + 8;
  }
  else
  {
    if ((*(unsigned char *)(v46[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v46[0] + 12)) {
      goto LABEL_4;
    }
    uint64_t v38 = *(void *)(v46[0] + 16);
    if ((v38 & 4) == 0) {
      goto LABEL_4;
    }
    unint64_t v39 = v38 & 0xFFFFFFFFFFFFFFF8;
    if (!v39) {
      goto LABEL_4;
    }
  }
  v48[0] = (const char *)v46;
  sub_1CC5FA668(v39 + 16, v48);
  goto LABEL_4;
}

uint64_t llvm::InstrProfiling::promoteCounterLoadStores(uint64_t this, llvm::Function *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (word_1EBCEA130) {
    __n128 v2 = &unk_1EBCEA1A8;
  }
  else {
    __n128 v2 = (unsigned char *)(this + 1);
  }
  if (*v2)
  {
    v3[0] = v4;
    v3[1] = (void *)0x100000000;
    int v9 = 0;
    void v4[2] = 0;
    v4[1] = 0;
    int v5 = 0;
    char v8 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = a2;
    sub_1CC5A43B0((uint64_t)v3, 0);
    llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze();
  }
  return this;
}

BOOL llvm::InstrProfiling::isRuntimeCounterRelocationEnabled(llvm::InstrProfiling *this)
{
  if (*((_DWORD *)this + 21) == 5) {
    return 0;
  }
  if (word_1EBCE9D70) {
    return byte_1EBCE9DE8 != 0;
  }
  return *((_DWORD *)this + 19) == 6;
}

uint64_t llvm::InstrProfiling::isCounterPromotionEnabled(llvm::InstrProfiling *this)
{
  int v1 = (unsigned __int8 *)&unk_1EBCEA1A8;
  if (!word_1EBCEA130) {
    int v1 = (unsigned __int8 *)this + 1;
  }
  return *v1;
}

uint64_t llvm::InstrProfiling::getOrCreateRegionCounters(llvm::InstrProfiling *this, llvm::Value **a2)
{
  uint64_t v351 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = llvm::Value::stripPointerCasts(a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)]);
  unint64_t v336 = v4;
  int v5 = sub_1CD697878((uint64_t)this + 120, (uint64_t *)&v336);
  uint64_t v7 = v5[2];
  if (v7) {
    return v7;
  }
  int v9 = v5;
  uint64_t v10 = (llvm *)*((void *)a2[5] + 7);
  int v11 = *((_DWORD *)v4 + 8) & 0xF;
  int v12 = *((_DWORD *)this + 21);
  BOOL v13 = v11 == 8 && v12 == 5;
  if (v13) {
    int v14 = 7;
  }
  else {
    int v14 = *((_DWORD *)v4 + 8) & 0xF;
  }
  if (byte_1EBD096D8) {
    int v11 = v14;
  }
  if (v12 == 9) {
    int v15 = 0;
  }
  else {
    int v15 = (*((_DWORD *)v4 + 8) >> 4) & 3;
  }
  if (v12 == 9) {
    int v16 = 8;
  }
  else {
    int v16 = v11;
  }
  BOOL v326 = sub_1CCB3A140(*((llvm **)this + 4), v6);
  uint64_t v327 = v10;
  BOOL v18 = llvm::needsComdatForCounter(v10, *((const llvm::Function **)this + 4), v17);
  char v335 = 0;
  sub_1CCB3A2A4(&v332, (uint64_t)a2, "__profc_", 8uLL, &v335);
  sub_1CCB3A2A4(v330, (uint64_t)a2, "__profd_", 8uLL, &v335);
  uint64_t v19 = a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 8];
  size_t v20 = (unint64_t *)((char *)v19 + 24);
  if (*((_DWORD *)v19 + 8) >= 0x41u) {
    size_t v20 = (unint64_t *)*v20;
  }
  unint64_t v325 = *v20;
  uint64_t v329 = (uint64_t *)**((void **)this + 4);
  if (v334 >= 0) {
    uint64_t v21 = (const char *)&v332;
  }
  else {
    uint64_t v21 = (const char *)v332;
  }
  if (v334 >= 0) {
    uint64_t v22 = v334 & 0x7F;
  }
  else {
    uint64_t v22 = v333;
  }
  RegionCounters = llvm::InstrProfiling::createRegionCounters((uint64_t)this, (llvm::LLVMContext *)a2, v21, v22, v16);
  uint64_t v24 = (uint64_t ***)RegionCounters;
  int v25 = *((_DWORD *)RegionCounters + 8) & 0xF;
  unsigned int v26 = *((_DWORD *)RegionCounters + 8) & 0xFFFFFFCF | (16 * (v15 & 3));
  *((_DWORD *)RegionCounters + 8) = v26;
  if ((v25 - 7) >= 2)
  {
    if (!v15 || (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)RegionCounters) & 1) != 0) {
      goto LABEL_27;
    }
    unsigned int v26 = *((_DWORD *)v24 + 8);
  }
  *((_DWORD *)v24 + 8) = v26 | 0x4000;
LABEL_27:
  llvm::getInstrProfSectionName(1u, *((_DWORD *)this + 21), 1, &__p);
  char v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t size = __p.__r_.__value_.__l.__size_;
  }
  if ((*((unsigned char *)v24 + 34) & 0x40) != 0 || size)
  {
    if (size)
    {
      p_p = (std::string *)llvm::UniqueStringSaver::save(***v24 + 2136, p_p, size);
      unint64_t v31 = v30;
    }
    else
    {
      unint64_t v31 = 0;
    }
    uint64_t v32 = ***v24;
    v341[0] = v24;
    int v33 = *(_DWORD *)(v32 + 2520);
    if (v33)
    {
      uint64_t v34 = *(void *)(v32 + 2504);
      int v35 = v33 - 1;
      unsigned int v36 = v35 & ((v24 >> 4) ^ (v24 >> 9));
      int v37 = (uint64_t ****)(v34 + 24 * v36);
      uint64_t v38 = *v37;
      if (*v37 == v24)
      {
LABEL_39:
        v37[1] = (uint64_t ***)p_p;
        void v37[2] = v31;
        *((_DWORD *)v24 + 8) = v24[4] & 0xFFBFFFFF | ((v31 != 0) << 22);
        char v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        goto LABEL_40;
      }
      uint64_t v58 = 0;
      int v59 = 1;
      while (v38 != (uint64_t ***)-4096)
      {
        if (v58) {
          BOOL v60 = 0;
        }
        else {
          BOOL v60 = v38 == (uint64_t ***)-8192;
        }
        if (v60) {
          uint64_t v58 = v37;
        }
        unsigned int v61 = v36 + v59++;
        unsigned int v36 = v61 & v35;
        int v37 = (uint64_t ****)(v34 + 24 * v36);
        uint64_t v38 = *v37;
        if (*v37 == v24) {
          goto LABEL_39;
        }
      }
      if (v58) {
        BOOL v122 = v58;
      }
      else {
        BOOL v122 = v37;
      }
    }
    else
    {
      BOOL v122 = 0;
    }
    int v37 = (uint64_t ****)sub_1CC5BF31C(v32 + 2504, (uint64_t)v341, (uint64_t *)v341, v122);
    int v123 = (uint64_t ***)v341[0];
    v37[1] = 0;
    void v37[2] = 0;
    *int v37 = v123;
    goto LABEL_39;
  }
LABEL_40:
  if (v27 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v39 = *((_DWORD *)this + 21);
  if (!v18)
  {
    if (v39 != 3) {
      goto LABEL_44;
    }
    goto LABEL_161;
  }
  BOOL v13 = v39 == 1;
  BOOL v124 = v326;
  if (!v13) {
    BOOL v124 = 0;
  }
  if (!v124)
  {
LABEL_161:
    if (v334 >= 0) {
      uint64_t v133 = (unsigned __int8 *)&v332;
    }
    else {
      uint64_t v133 = (unsigned __int8 *)v332;
    }
    if (v334 >= 0) {
      size_t v134 = v334 & 0x7F;
    }
    else {
      size_t v134 = v333;
    }
    goto LABEL_336;
  }
  if ((*((unsigned char *)v24 + 23) & 0x10) == 0)
  {
    size_t v134 = 0;
    uint64_t v133 = (unsigned __int8 *)&byte_1CFBCE98E;
    goto LABEL_336;
  }
  uint64_t v125 = ***v24;
  uint64_t v126 = *(void *)(v125 + 152);
  uint64_t v127 = *(unsigned int *)(v125 + 168);
  if (!v127) {
    goto LABEL_334;
  }
  LODWORD(v128) = (v127 - 1) & ((v24 >> 4) ^ (v24 >> 9));
  uint64_t v129 = (uint64_t ****)(v126 + 16 * v128);
  uint64_t v130 = *v129;
  if (*v129 != v24)
  {
    int v131 = 1;
    while (v130 != (uint64_t ***)-4096)
    {
      int v132 = v128 + v131++;
      uint64_t v128 = v132 & (v127 - 1);
      uint64_t v130 = *(uint64_t ****)(v126 + 16 * v128);
      if (v130 == v24)
      {
        uint64_t v129 = (uint64_t ****)(v126 + 16 * v128);
        goto LABEL_335;
      }
    }
LABEL_334:
    uint64_t v129 = (uint64_t ****)(v126 + 16 * v127);
  }
LABEL_335:
  uint64_t v277 = v129[1];
  size_t v278 = (size_t)*v277;
  uint64_t v133 = (unsigned __int8 *)(v277 + 2);
  size_t v134 = v278;
LABEL_336:
  inserted = llvm::Module::getOrInsertComdat(*((void *)this + 4), v133, v134);
  if (!v18) {
    *((_DWORD *)inserted + 2) = 3;
  }
  llvm::GlobalObject::setComdat((llvm::GlobalObject *)v24, (llvm::Comdat *)inserted);
LABEL_44:
  int v40 = *((_DWORD *)v24 + 8);
  if ((v16 - 7) >= 2) {
    unsigned int v41 = *((_DWORD *)v24 + 8);
  }
  else {
    unsigned int v41 = v40 & 0xFFFFFFC0;
  }
  unsigned int v42 = v41 & 0xFFFFFFF0 | v16;
  *((_DWORD *)v24 + 8) = v42;
  if ((v16 - 7) < 2) {
    goto LABEL_393;
  }
  if ((v40 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v24) & 1) == 0)
  {
    unsigned int v42 = *((_DWORD *)v24 + 8);
LABEL_393:
    *((_DWORD *)v24 + 8) = v42 | 0x4000;
  }
  v9[2] = v24;
  if (!byte_1EBD096D8) {
    goto LABEL_89;
  }
  unsigned int v43 = v327 >> 4;
  if ((*((unsigned char *)v327 + 23) & 0x20) == 0)
  {
LABEL_76:
    if ((*((unsigned char *)v327 + 23) & 0x10) == 0)
    {
      uint64_t v73 = 0;
      int v72 = &byte_1CFBCE98E;
      goto LABEL_85;
    }
    uint64_t v63 = ***(void ***)v327;
    uint64_t v64 = *(void *)(v63 + 152);
    uint64_t v65 = *(unsigned int *)(v63 + 168);
    if (v65)
    {
      LODWORD(v66) = (v65 - 1) & (v43 ^ (v327 >> 9));
      uint64_t v67 = (llvm::Function **)(v64 + 16 * v66);
      uint64_t v68 = *v67;
      if (*v67 == v327)
      {
LABEL_84:
        uint64_t v71 = v67[1];
        uint64_t v74 = *(void *)v71;
        int v72 = (char *)v71 + 16;
        uint64_t v73 = v74;
LABEL_85:
        LOWORD(v343) = 1283;
        v341[0] = "Missing debug info for function ";
        *(void *)&long long v342 = v72;
        *((void *)&v342 + 1) = v73;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v341;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)"; required for profile correlation.";
        __int16 v348 = 770;
        llvm::Twine::str((llvm::Twine *)&__p, v337);
        uint64_t v75 = *((void *)this + 4);
        uint64_t v78 = *(void *)(v75 + 168);
        uint64_t v76 = v75 + 168;
        uint64_t v77 = v78;
        if (*(char *)(v76 + 23) < 0) {
          uint64_t v76 = v77;
        }
        __int16 v348 = 260;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v337;
        LODWORD(v341[1]) = 19;
        BYTE4(v341[1]) = 1;
        v341[0] = &unk_1F26167A0;
        *(void *)&long long v342 = v76;
        *((void *)&v342 + 1) = &__p;
        llvm::LLVMContext::diagnose((uint64_t)v329, (const llvm::DiagnosticInfo *)v341);
        if (SBYTE7(v338) < 0) {
          operator delete(v337[0]);
        }
        goto LABEL_89;
      }
      int v69 = 1;
      while (v68 != (llvm::Function *)-4096)
      {
        int v70 = v66 + v69++;
        uint64_t v66 = v70 & (v65 - 1);
        uint64_t v68 = *(llvm::Function **)(v64 + 16 * v66);
        if (v68 == v327)
        {
          uint64_t v67 = (llvm::Function **)(v64 + 16 * v66);
          goto LABEL_84;
        }
      }
    }
    uint64_t v67 = (llvm::Function **)(v64 + 16 * v65);
    goto LABEL_84;
  }
  uint64_t v44 = ***(void ***)v327;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v327;
  int v45 = *(_DWORD *)(v44 + 2496);
  if (!v45)
  {
    unsigned int v145 = 0;
LABEL_187:
    __int16 v49 = (llvm::Function **)sub_1CC609054(v44 + 2480, (uint64_t)&__p, (uint64_t *)&__p, v145);
    std::string::size_type v146 = __p.__r_.__value_.__r.__words[0];
    v49[3] = 0;
    v49[4] = 0;
    llvm::Value *v49 = (llvm::Function *)v146;
    v49[1] = (llvm::Function *)(v49 + 3);
    void v49[2] = (llvm::Function *)0x100000000;
    goto LABEL_61;
  }
  uint64_t v46 = *(void *)(v44 + 2480);
  int v47 = v45 - 1;
  unsigned int v48 = v47 & (v43 ^ (v327 >> 9));
  __int16 v49 = (llvm::Function **)(v46 + 40 * v48);
  BOOL v50 = *v49;
  if (*v49 != v327)
  {
    uint64_t v51 = 0;
    int v52 = 1;
    while (v50 != (llvm::Function *)-4096)
    {
      if (v51) {
        BOOL v53 = 0;
      }
      else {
        BOOL v53 = v50 == (llvm::Function *)-8192;
      }
      if (v53) {
        uint64_t v51 = v49;
      }
      unsigned int v54 = v48 + v52++;
      unsigned int v48 = v54 & v47;
      __int16 v49 = (llvm::Function **)(v46 + 40 * v48);
      BOOL v50 = *v49;
      if (*v49 == v327) {
        goto LABEL_61;
      }
    }
    if (v51) {
      unsigned int v145 = v51;
    }
    else {
      unsigned int v145 = v49;
    }
    goto LABEL_187;
  }
LABEL_61:
  uint64_t v55 = *((unsigned int *)v49 + 4);
  if (!v55) {
    goto LABEL_76;
  }
  int v56 = (uint64_t *)((char *)v49[1] + 8);
  uint64_t v57 = 16 * v55;
  while (*((_DWORD *)v56 - 2))
  {
    v56 += 2;
    v57 -= 16;
    if (!v57) {
      goto LABEL_76;
    }
  }
  uint64_t v62 = *v56;
  if (!*v56) {
    goto LABEL_76;
  }
  llvm::DIBuilder::DIBuilder((uint64_t)&__p, *((void **)this + 4), 1, *(void *)(v62 - 8 * *(unsigned int *)(v62 + 8) + 40));
  v255 = 0;
  size_t v256 = 0;
  v337[0] = 0;
  v337[1] = 0;
  if (llvm::InstrProfCorrelator::FunctionNameAttributeName[0])
  {
    size_t v256 = strlen(llvm::InstrProfCorrelator::FunctionNameAttributeName[0]);
    v255 = (unsigned __int8 *)llvm::InstrProfCorrelator::FunctionNameAttributeName[0];
  }
  v337[0] = llvm::MDString::get(v329, v255, v256);
  PGOFuncNameVarInitializer = (unsigned __int8 *)llvm::getPGOFuncNameVarInitializer(v4, v257);
  v260 = llvm::MDString::get(v329, PGOFuncNameVarInitializer, v259);
  v261 = 0;
  size_t v262 = 0;
  v337[1] = v260;
  uint64_t v349 = 0;
  uint64_t v350 = 0;
  if (llvm::InstrProfCorrelator::CFGHashAttributeName[0])
  {
    size_t v262 = strlen(llvm::InstrProfCorrelator::CFGHashAttributeName[0]);
    v261 = (unsigned __int8 *)llvm::InstrProfCorrelator::CFGHashAttributeName[0];
  }
  uint64_t v349 = (uint64_t)llvm::MDString::get(v329, v261, v262);
  uint64_t v264 = llvm::ValueAsMetadata::get(a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 4], v263);
  int v265 = 0;
  size_t v266 = 0;
  uint64_t v350 = v264;
  uint64_t v345 = 0;
  uint64_t v346 = 0;
  if (llvm::InstrProfCorrelator::NumCountersAttributeName)
  {
    size_t v266 = strlen(llvm::InstrProfCorrelator::NumCountersAttributeName);
    int v265 = (unsigned __int8 *)llvm::InstrProfCorrelator::NumCountersAttributeName;
  }
  uint64_t v345 = llvm::MDString::get(v329, v265, v266);
  uint64_t v346 = llvm::ValueAsMetadata::get(a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 8], v267);
  v341[0] = llvm::MDTuple::getImpl((uint64_t)v329, v337, 2, 0, 1);
  v341[1] = llvm::MDTuple::getImpl((uint64_t)v329, &v349, 2, 0, 1);
  *(void *)&long long v342 = llvm::MDTuple::getImpl((uint64_t)v329, &v345, 2, 0, 1);
  uint64_t Impl = llvm::MDTuple::getImpl(__p.__r_.__value_.__l.__size_, v341, 3, 0, 1);
  BOOL v320 = v18;
  int v324 = v15;
  if ((*((unsigned char *)v24 + 23) & 0x10) == 0)
  {
    uint64_t v296 = (uint64_t)Impl;
    size_t v299 = 0;
    unsigned int v298 = (unsigned __int8 *)&byte_1CFBCE98E;
    goto LABEL_371;
  }
  uint64_t v269 = ***v24;
  uint64_t v270 = *(void *)(v269 + 152);
  uint64_t v271 = *(unsigned int *)(v269 + 168);
  if (!v271) {
    goto LABEL_369;
  }
  LODWORD(v272) = (v271 - 1) & ((v24 >> 4) ^ (v24 >> 9));
  v273 = (uint64_t ****)(v270 + 16 * v272);
  int v274 = *v273;
  if (*v273 != v24)
  {
    int v275 = 1;
    while (v274 != (uint64_t ***)-4096)
    {
      int v276 = v272 + v275++;
      uint64_t v272 = v276 & (v271 - 1);
      int v274 = *(uint64_t ****)(v270 + 16 * v272);
      if (v274 == v24)
      {
        v273 = (uint64_t ****)(v270 + 16 * v272);
        goto LABEL_370;
      }
    }
LABEL_369:
    v273 = (uint64_t ****)(v270 + 16 * v271);
  }
LABEL_370:
  uint64_t v296 = (uint64_t)Impl;
  uint64_t v297 = v273[1];
  size_t v300 = (size_t)*v297;
  unsigned int v298 = (unsigned __int8 *)(v297 + 2);
  size_t v299 = v300;
LABEL_371:
  uint64_t v301 = v62;
  if (*(unsigned char *)v62 != 15) {
    uint64_t v301 = *(void *)(v62 - 8 * *(unsigned int *)(v62 + 8));
  }
  uint64_t v302 = sub_1CD5AC354((uint64_t *)__p.__r_.__value_.__l.__size_, 59, "Profile Data Type", 0x11uLL);
  GlobalVariableExpression = llvm::DIBuilder::createGlobalVariableExpression((uint64_t)&__p, v62, v298, v299, 0, 0, v301, 0, (uint64_t)v302, (v24[4] & 0xFu) - 7 < 2, 1, 0, 0, 0, 0, v296);
  llvm::Value::addMetadata((llvm::Value *)v24, 0, GlobalVariableExpression);
  llvm::DIBuilder::finalize((llvm::DIBuilder *)&__p);
  sub_1CC2DBB1C((uint64_t)&__p);
  BOOL v18 = v320;
  int v15 = v324;
LABEL_89:
  int v79 = (llvm::ConstantPointerNull *)llvm::PointerType::get((llvm::PointerType *)(*v329 + 1912), 0);
  unsigned int v81 = (llvm::GlobalValue *)llvm::ConstantPointerNull::get(v79, v80);
  uint64_t v82 = (llvm::Type *)(*((unsigned int *)v9 + 3) + (unint64_t)*((unsigned int *)v9 + 2));
  if (!v82 || !byte_1EBCE9EA8) {
    goto LABEL_124;
  }
  unsigned int v83 = *((_DWORD *)this + 19);
  if (v83 > 0x21 || ((1 << v83) & 0x3F0005AE8) == 0)
  {
    BOOL v107 = *((_DWORD *)this + 16) == 42 && *((_DWORD *)this + 18) == 3;
    BOOL v108 = v107 && v83 == 25;
    BOOL v109 = v108;
    if (((v83 != 15) ^ v109)) {
      goto LABEL_124;
    }
  }
  unint64_t v313 = *((unsigned int *)v9 + 3) + (unint64_t)*((unsigned int *)v9 + 2);
  uint64_t v316 = v79;
  unint64_t v311 = (llvm::PointerType *)v24;
  int v321 = v15;
  int v309 = 16 * v15;
  BOOL v84 = llvm::ArrayType::get((llvm::ArrayType *)(*v329 + 1984), v82);
  int v85 = operator new(0x78uLL);
  v85[13] = v85[13] & 0x38000000 | 1;
  *(void *)int v85 = 0;
  *((void *)v85 + 1) = 0;
  *((void *)v85 + 2) = 0;
  *((void *)v85 + 3) = v85 + 8;
  uint64_t v86 = *((void *)this + 4);
  NullValue = llvm::Constant::getNullValue(v84, v87, v88);
  sub_1CCB3A2A4(v341, (uint64_t)a2, "__profvp_", 9uLL, &v335);
  __int16 v348 = 260;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v341;
  unsigned int v81 = (llvm::GlobalValue *)(v85 + 8);
  llvm::GlobalVariable::GlobalVariable((unint64_t *)v85 + 4, v86, v84, 0, v16, (unint64_t)NullValue, (const char **)&__p.__r_.__value_.__l.__data_, 0, 0, 0, 0);
  if (SBYTE7(v342) < 0) {
    operator delete(v341[0]);
  }
  int v90 = v85[16];
  unsigned int v91 = v90 & 0xFFFFFFCF | v309;
  v85[16] = v91;
  uint64_t v24 = (uint64_t ***)v311;
  if ((v90 & 0xFu) - 7 < 2)
  {
    int v15 = v321;
  }
  else
  {
    int v15 = v321;
    if (!v321 || (llvm::GlobalValue::hasExternalWeakLinkage(v81) & 1) != 0) {
      goto LABEL_97;
    }
    unsigned int v91 = v85[16];
  }
  v85[16] = v91 | 0x4000;
LABEL_97:
  uint64_t v92 = &__p;
  llvm::getInstrProfSectionName(3u, *((_DWORD *)this + 21), 1, &__p);
  char v93 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    size_t v94 = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else
  {
    size_t v94 = __p.__r_.__value_.__l.__size_;
    uint64_t v92 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  unsigned int v95 = v85[16];
  if ((v95 & 0x400000) != 0 || v94)
  {
    if (v94)
    {
      uint64_t v92 = (std::string *)llvm::UniqueStringSaver::save(***(void ***)v81 + 2136, v92, v94);
      int64_t v97 = v96;
    }
    else
    {
      int64_t v97 = 0;
    }
    uint64_t v98 = ***(void ***)v81;
    v341[0] = v85 + 8;
    int v99 = *(_DWORD *)(v98 + 2520);
    if (v99)
    {
      uint64_t v100 = *(void *)(v98 + 2504);
      int v101 = v99 - 1;
      unsigned int v102 = v101 & ((v81 >> 4) ^ (v81 >> 9));
      uint64_t v103 = (llvm::GlobalValue **)(v100 + 24 * v102);
      uint64_t v104 = *v103;
      if (*v103 == v81)
      {
LABEL_106:
        v103[1] = (llvm::GlobalValue *)v92;
        v103[2] = v97;
        unsigned int v95 = v85[16] & 0xFFBFFFFF | ((v97 != 0) << 22);
        v85[16] = v95;
        char v93 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        int v15 = v321;
        goto LABEL_107;
      }
      uint64_t v141 = 0;
      int v142 = 1;
      while (v104 != (llvm::GlobalValue *)-4096)
      {
        if (v141) {
          BOOL v143 = 0;
        }
        else {
          BOOL v143 = v104 == (llvm::GlobalValue *)-8192;
        }
        if (v143) {
          uint64_t v141 = v103;
        }
        unsigned int v144 = v102 + v142++;
        unsigned int v102 = v144 & v101;
        uint64_t v103 = (llvm::GlobalValue **)(v100 + 24 * v102);
        uint64_t v104 = *v103;
        if (*v103 == v81) {
          goto LABEL_106;
        }
      }
      if (v141) {
        v147 = v141;
      }
      else {
        v147 = v103;
      }
    }
    else
    {
      v147 = 0;
    }
    uint64_t v103 = (llvm::GlobalValue **)sub_1CC5BF31C(v98 + 2504, (uint64_t)v341, (uint64_t *)v341, v147);
    v148 = (llvm::GlobalValue *)v341[0];
    v103[1] = 0;
    v103[2] = 0;
    void *v103 = v148;
    goto LABEL_106;
  }
LABEL_107:
  int v79 = v316;
  if (v93 < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    unsigned int v95 = v85[16];
  }
  v85[16] = v95 & 0xFFC0FFFF | 0x40000;
  int v105 = *((_DWORD *)this + 21);
  if (v18)
  {
    BOOL v13 = v105 == 1;
    BOOL v149 = v326;
    if (!v13) {
      BOOL v149 = 0;
    }
    if (!v149) {
      goto LABEL_207;
    }
    if ((*((unsigned char *)v85 + 55) & 0x10) == 0)
    {
      size_t v159 = 0;
      uint64_t v158 = (unsigned __int8 *)&byte_1CFBCE98E;
      goto LABEL_365;
    }
    uint64_t v150 = ***(void ***)v81;
    uint64_t v151 = *(void *)(v150 + 152);
    uint64_t v152 = *(unsigned int *)(v150 + 168);
    if (v152)
    {
      LODWORD(v153) = (v152 - 1) & ((v81 >> 4) ^ (v81 >> 9));
      int64_t v154 = (llvm::GlobalValue **)(v151 + 16 * v153);
      int v155 = *v154;
      if (*v154 == v81)
      {
LABEL_364:
        v293 = v154[1];
        size_t v294 = *(void *)v293;
        uint64_t v158 = (unsigned __int8 *)v293 + 16;
        size_t v159 = v294;
LABEL_365:
        unsigned int v295 = llvm::Module::getOrInsertComdat(*((void *)this + 4), v158, v159);
        if (!v18) {
          *((_DWORD *)v295 + 2) = 3;
        }
        llvm::GlobalObject::setComdat(v81, (llvm::Comdat *)v295);
        goto LABEL_111;
      }
      int v156 = 1;
      while (v155 != (llvm::GlobalValue *)-4096)
      {
        int v157 = v153 + v156++;
        uint64_t v153 = v157 & (v152 - 1);
        int v155 = *(llvm::GlobalValue **)(v151 + 16 * v153);
        if (v155 == v81)
        {
          int64_t v154 = (llvm::GlobalValue **)(v151 + 16 * v153);
          goto LABEL_364;
        }
      }
    }
    int64_t v154 = (llvm::GlobalValue **)(v151 + 16 * v152);
    goto LABEL_364;
  }
  if (v105 == 3)
  {
LABEL_207:
    if (v334 >= 0) {
      uint64_t v158 = (unsigned __int8 *)&v332;
    }
    else {
      uint64_t v158 = (unsigned __int8 *)v332;
    }
    if (v334 >= 0) {
      size_t v159 = v334 & 0x7F;
    }
    else {
      size_t v159 = v333;
    }
    goto LABEL_365;
  }
LABEL_111:
  __int16 v106 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(*v329 + 1912), 0);
  if (*(llvm::Constant **)v81 != v106) {
    unsigned int v81 = sub_1CC56C0C0((llvm *)0x31, v81, v106, 0);
  }
  uint64_t v82 = (llvm::Type *)v313;
LABEL_124:
  if (!byte_1EBD096D8)
  {
    uint64_t v317 = v79;
    int v322 = v15;
    BOOL v319 = v18;
    uint64_t v135 = llvm::IntegerType::get(**((llvm::IntegerType ***)this + 4), (llvm::LLVMContext *)*(unsigned int *)(*(void *)(*((void *)this + 4) + 504) + 4));
    uint64_t v307 = *v329;
    unsigned int v136 = llvm::ArrayType::get((llvm::ArrayType *)(*v329 + 1936), (llvm::Type *)2);
    int v344 = 0;
    long long v342 = 0u;
    long long v343 = 0u;
    *(_OWORD *)uint64_t v341 = 0u;
    v341[0] = (void *)(*v329 + 1984);
    v341[1] = (void *)(*v329 + 1984);
    *(void *)&long long v342 = v135;
    v308 = (llvm::Constant *)v135;
    *((void *)&v342 + 1) = llvm::PointerType::get((llvm::PointerType *)(*v329 + 1912), 0);
    *(void *)&long long v343 = llvm::PointerType::get((llvm::PointerType *)(*v329 + 1912), 0);
    *((void *)&v343 + 1) = *v329 + 1960;
    int v344 = v136;
    uint64_t v312 = (llvm::PointerType *)llvm::StructType::get(v329, (uint64_t)v341, 7, 0);
    uint64_t v310 = v81;
    BOOL v314 = v82;
    if (!sub_1CCB3A140(*((llvm **)v327 + 5), v137)) {
      goto LABEL_223;
    }
    int v139 = *((_DWORD *)v327 + 8) & 0xF;
    if ((*((_DWORD *)v327 + 8) & 0xE) == 2)
    {
      uint64_t v140 = v327;
      if (v139 != 1)
      {
        if ((v139 - 7) > 1)
        {
LABEL_219:
          if ((llvm::Function::hasAddressTaken(v140, 0, 0, 1, 0, 0) & 1) != 0 || (*((_DWORD *)v140 + 8) & 0xE) == 2)
          {
LABEL_221:
            int v161 = v317;
            uint64_t v162 = v140;
            BOOL v163 = v319;
            if (*(llvm::Constant **)v140 != v317) {
              uint64_t v162 = sub_1CC56C0C0((llvm *)0x31, v140, v317, 0);
            }
LABEL_224:
            uint64_t v345 = 0;
            uint64_t v346 = 0;
            uint64_t v164 = *((unsigned int *)v9 + 2);
            BOOL v165 = *(llvm::ConstantInt **)(v307 + 1936);
            unsigned int v166 = *(_DWORD *)(v307 + 1944);
            LODWORD(__p.__r_.__value_.__r.__words[1]) = v166 >> 8;
            int v328 = v162;
            if (v166 >> 8 > 0x40) {
              operator new[]();
            }
            if (v166 <= 0xFF) {
              unint64_t v167 = 0;
            }
            else {
              unint64_t v167 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v166) + 63);
            }
            __p.__r_.__value_.__r.__words[0] = v167 & v164;
            v169 = llvm::ConstantInt::get(v165, (llvm::LLVMContext *)&__p, v161);
            if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= 0x41 && __p.__r_.__value_.__r.__words[0]) {
              MEMORY[0x1D25D9CB0](__p.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
            }
            uint64_t v345 = v169;
            uint64_t v170 = *((unsigned int *)v9 + 3);
            BOOL v171 = *(llvm::ConstantInt **)(v307 + 1936);
            unsigned int v172 = *(_DWORD *)(v307 + 1944);
            LODWORD(__p.__r_.__value_.__r.__words[1]) = v172 >> 8;
            if (v172 >> 8 > 0x40) {
              operator new[]();
            }
            if (v172 <= 0xFF) {
              unint64_t v173 = 0;
            }
            else {
              unint64_t v173 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v172) + 63);
            }
            __p.__r_.__value_.__r.__words[0] = v173 & v170;
            int v174 = v322;
            int v175 = llvm::ConstantInt::get(v171, (llvm::LLVMContext *)&__p, v168);
            if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= 0x41 && __p.__r_.__value_.__r.__words[0]) {
              MEMORY[0x1D25D9CB0](__p.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
            }
            uint64_t v346 = (uint64_t)v175;
            if (!v314 && (!v326 || !v163 || v335))
            {
              int v176 = !v326;
              int v177 = *((_DWORD *)this + 21);
              if (v177 != 1) {
                int v176 = 0;
              }
              if (v177 == 3) {
                int v176 = 1;
              }
              if (v176)
              {
                int v174 = 0;
                int v16 = 8;
              }
            }
            int v323 = v174;
            uint64_t v178 = (char *)operator new(0x78uLL);
            *((_DWORD *)v178 + 13) = *((_DWORD *)v178 + 13) & 0x38000000 | 1;
            *(void *)uint64_t v178 = 0;
            *((void *)v178 + 1) = 0;
            *((void *)v178 + 2) = 0;
            *((void *)v178 + 3) = v178 + 32;
            uint64_t v179 = *((void *)this + 4);
            __int16 v348 = 260;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v330;
            int v318 = v16;
            llvm::GlobalVariable::GlobalVariable((unint64_t *)v178 + 4, v179, v312, 0, v16, 0, (const char **)&__p.__r_.__value_.__l.__data_, 0, 0, 0, 0);
            BOOL v180 = sub_1CC56C0C0((llvm *)0x2F, (llvm::detail::IEEEFloat *)v24, v308, 0);
            v315 = (llvm::GlobalValue *)(v178 + 32);
            uint64_t v181 = sub_1CC56C0C0((llvm *)0x2F, (llvm::detail::IEEEFloat *)(v178 + 32), v308, 0);
            Sub = llvm::ConstantExpr::getSub(v180, v181, 0, 0);
            int v340 = 0;
            long long v338 = 0u;
            long long v339 = 0u;
            *(_OWORD *)int v337 = 0u;
            uint64_t v183 = *v329;
            unint64_t v184 = llvm::Value::stripPointerCasts(a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)]);
            uint64_t v186 = (int *)llvm::getPGOFuncNameVarInitializer(v184, v185);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = xmmword_1CFAC4320;
            __p.__r_.__value_.__r.__words[2] = 0;
            llvm::MD5::update((int *)&__p, v186, v187);
            llvm::MD5::final((int *)&__p, (int *)&v349);
            uint64_t v189 = *(llvm::ConstantInt **)(v183 + 1984);
            unsigned int v190 = *(_DWORD *)(v183 + 1992);
            LODWORD(__p.__r_.__value_.__r.__words[1]) = v190 >> 8;
            if (v190 >> 8 > 0x40) {
              operator new[]();
            }
            if (v190 <= 0xFF) {
              unint64_t v191 = 0;
            }
            else {
              unint64_t v191 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v190) + 63);
            }
            int v192 = v318;
            __p.__r_.__value_.__r.__words[0] = v191 & v349;
            uint64_t v194 = llvm::ConstantInt::get(v189, (llvm::LLVMContext *)&__p, v188);
            if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= 0x41 && __p.__r_.__value_.__r.__words[0]) {
              MEMORY[0x1D25D9CB0](__p.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
            }
            v337[0] = v194;
            uint64_t v195 = *v329;
            v196 = a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 4];
            uint64_t v197 = (unint64_t *)((char *)v196 + 24);
            if (*((_DWORD *)v196 + 8) >= 0x41u) {
              uint64_t v197 = (unint64_t *)*v197;
            }
            unint64_t v198 = *v197;
            v199 = *(llvm::ConstantInt **)(v195 + 1984);
            unint64_t v200 = *(unsigned int *)(v195 + 1992);
            LODWORD(__p.__r_.__value_.__r.__words[1]) = v200 >> 8;
            if (v200 >> 8 > 0x40) {
              operator new[]();
            }
            if (v200 <= 0xFF) {
              unint64_t v201 = 0;
            }
            else {
              unint64_t v201 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v200) + 63);
            }
            __p.__r_.__value_.__r.__words[0] = v201 & v198;
            int v203 = llvm::ConstantInt::get(v199, (llvm::LLVMContext *)&__p, v193);
            if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= 0x41 && __p.__r_.__value_.__r.__words[0]) {
              MEMORY[0x1D25D9CB0](__p.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
            }
            v337[1] = v203;
            *(void *)&long long v338 = Sub;
            *((void *)&v338 + 1) = v328;
            *(void *)&long long v339 = v310;
            v204 = *(llvm::ConstantInt **)(*v329 + 1960);
            unsigned int v205 = *(_DWORD *)(*v329 + 1968);
            LODWORD(__p.__r_.__value_.__r.__words[1]) = v205 >> 8;
            if (v205 >> 8 > 0x40) {
              operator new[]();
            }
            if (v205 <= 0xFF) {
              unint64_t v206 = 0;
            }
            else {
              unint64_t v206 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v205) + 63);
            }
            __p.__r_.__value_.__r.__words[0] = v206 & v325;
            v207 = llvm::ConstantInt::get(v204, (llvm::LLVMContext *)&__p, v202);
            if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= 0x41 && __p.__r_.__value_.__r.__words[0]) {
              MEMORY[0x1D25D9CB0](__p.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
            }
            *((void *)&v339 + 1) = v207;
            int v340 = llvm::ConstantArray::get(v136, (llvm::Type *)&v345, 2);
            v208 = (llvm::Constant *)llvm::ConstantStruct::get(v312, (llvm::Type *)v337, 7);
            llvm::GlobalVariable::setInitializer((uint64_t)v315, v208);
            int v209 = *((_DWORD *)v178 + 16) & 0xF;
            unsigned int v210 = *((_DWORD *)v178 + 16) & 0xFFFFFFCF | (16 * (v323 & 3));
            *((_DWORD *)v178 + 16) = v210;
            if ((v209 - 7) >= 2)
            {
              if (!(16 * v323) || (llvm::GlobalValue::hasExternalWeakLinkage(v315) & 1) != 0) {
                goto LABEL_258;
              }
              unsigned int v210 = *((_DWORD *)v178 + 16);
            }
            *((_DWORD *)v178 + 16) = v210 | 0x4000;
LABEL_258:
            v211 = &__p;
            llvm::getInstrProfSectionName(0, *((_DWORD *)this + 21), 1, &__p);
            char v212 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            {
              size_t v213 = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
            }
            else
            {
              size_t v213 = __p.__r_.__value_.__l.__size_;
              v211 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            unsigned int v214 = *((_DWORD *)v178 + 16);
            if ((v214 & 0x400000) == 0 && !v213)
            {
LABEL_268:
              if (v212 < 0)
              {
                operator delete(__p.__r_.__value_.__l.__data_);
                unsigned int v214 = *((_DWORD *)v178 + 16);
              }
              unsigned int v224 = v214 & 0xFFC0FFFF | 0x40000;
              *((_DWORD *)v178 + 16) = v224;
              int v225 = *((_DWORD *)this + 21);
              if (!v319)
              {
                if (v225 != 3) {
                  goto LABEL_272;
                }
                goto LABEL_354;
              }
              BOOL v282 = v326;
              if (v225 != 1) {
                BOOL v282 = 0;
              }
              if (!v282)
              {
LABEL_354:
                if (v334 >= 0) {
                  uint64_t v291 = (unsigned __int8 *)&v332;
                }
                else {
                  uint64_t v291 = (unsigned __int8 *)v332;
                }
                if (v334 >= 0) {
                  size_t v292 = v334 & 0x7F;
                }
                else {
                  size_t v292 = v333;
                }
                goto LABEL_378;
              }
              if ((v178[55] & 0x10) == 0)
              {
                size_t v292 = 0;
                uint64_t v291 = (unsigned __int8 *)&byte_1CFBCE98E;
                goto LABEL_377;
              }
              uint64_t v283 = ***(void ***)v315;
              uint64_t v284 = *(void *)(v283 + 152);
              uint64_t v285 = *(unsigned int *)(v283 + 168);
              if (v285)
              {
                LODWORD(v286) = (v285 - 1) & ((v315 >> 4) ^ (v315 >> 9));
                unsigned int v287 = (llvm::GlobalValue **)(v284 + 16 * v286);
                uint64_t v288 = *v287;
                if (*v287 == v315)
                {
LABEL_376:
                  unsigned int v304 = v287[1];
                  size_t v305 = *(void *)v304;
                  uint64_t v291 = (unsigned __int8 *)v304 + 16;
                  size_t v292 = v305;
LABEL_377:
                  int v192 = v318;
LABEL_378:
                  int v306 = llvm::Module::getOrInsertComdat(*((void *)this + 4), v291, v292);
                  if (!v319) {
                    *((_DWORD *)v306 + 2) = 3;
                  }
                  llvm::GlobalObject::setComdat(v315, (llvm::Comdat *)v306);
                  unsigned int v224 = *((_DWORD *)v178 + 16);
LABEL_272:
                  if ((v192 - 7) >= 2) {
                    unsigned int v226 = v224;
                  }
                  else {
                    unsigned int v226 = v224 & 0xFFFFFFCF;
                  }
                  unsigned int v227 = v226 & 0xFFFFFFF0 | v192;
                  *((_DWORD *)v178 + 16) = v227;
                  if ((v192 - 7) >= 2)
                  {
                    if (v226 & 0x30) == 0 || (llvm::GlobalValue::hasExternalWeakLinkage(v315))
                    {
LABEL_277:
                      v9[3] = v315;
                      uint64_t v229 = (llvm::GlobalValue **)*((void *)this + 19);
                      unint64_t v228 = *((void *)this + 20);
                      if ((unint64_t)v229 >= v228)
                      {
                        int v231 = (void *)*((void *)this + 18);
                        uint64_t v232 = v229 - (llvm::GlobalValue **)v231;
                        unint64_t v233 = v232 + 1;
                        if ((unint64_t)(v232 + 1) >> 61) {
                          goto LABEL_408;
                        }
                        uint64_t v234 = v228 - (void)v231;
                        if (v234 >> 2 > v233) {
                          unint64_t v233 = v234 >> 2;
                        }
                        if ((unint64_t)v234 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v235 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v235 = v233;
                        }
                        if (v235)
                        {
                          if (v235 >> 61) {
                            goto LABEL_409;
                          }
                          uint64_t v236 = (char *)operator new(8 * v235);
                        }
                        else
                        {
                          uint64_t v236 = 0;
                        }
                        int v241 = (llvm::GlobalValue **)&v236[8 * v232];
                        *int v241 = v315;
                        uint64_t v230 = v241 + 1;
                        if (v229 != v231)
                        {
                          do
                          {
                            uint64_t v242 = *--v229;
                            *--int v241 = v242;
                          }
                          while (v229 != v231);
                          uint64_t v229 = (llvm::GlobalValue **)*((void *)this + 18);
                        }
                        *((void *)this + 18) = v241;
                        *((void *)this + 19) = v230;
                        *((void *)this + 20) = &v236[8 * v235];
                        if (v229) {
                          operator delete(v229);
                        }
                      }
                      else
                      {
                        llvm::Instruction *v229 = v315;
                        uint64_t v230 = v229 + 1;
                      }
                      *((void *)this + 19) = v230;
                      uint64_t v243 = (uint64_t)v336;
                      *((_DWORD *)v336 + 8) = *((_DWORD *)v336 + 8) & 0xFFFFBFC0 | 0x4008;
                      uint64_t v245 = (uint64_t *)*((void *)this + 25);
                      unint64_t v244 = *((void *)this + 26);
                      if ((unint64_t)v245 >= v244)
                      {
                        v247 = (void *)*((void *)this + 24);
                        uint64_t v248 = v245 - v247;
                        unint64_t v249 = v248 + 1;
                        if ((unint64_t)(v248 + 1) >> 61) {
                          goto LABEL_408;
                        }
                        uint64_t v250 = v244 - (void)v247;
                        if (v250 >> 2 > v249) {
                          unint64_t v249 = v250 >> 2;
                        }
                        if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v251 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v251 = v249;
                        }
                        if (v251)
                        {
                          if (v251 >> 61) {
                            goto LABEL_409;
                          }
                          uint64_t v252 = (char *)operator new(8 * v251);
                        }
                        else
                        {
                          uint64_t v252 = 0;
                        }
                        uint64_t v253 = (uint64_t *)&v252[8 * v248];
                        uint64_t *v253 = v243;
                        uint64_t v246 = v253 + 1;
                        if (v245 != v247)
                        {
                          do
                          {
                            uint64_t v254 = *--v245;
                            *--uint64_t v253 = v254;
                          }
                          while (v245 != v247);
                          uint64_t v245 = (uint64_t *)*((void *)this + 24);
                        }
                        *((void *)this + 24) = v253;
                        *((void *)this + 25) = v246;
                        *((void *)this + 26) = &v252[8 * v251];
                        if (v245) {
                          operator delete(v245);
                        }
                      }
                      else
                      {
                        uint64_t *v245 = v243;
                        uint64_t v246 = v245 + 1;
                      }
                      *((void *)this + 25) = v246;
                      goto LABEL_143;
                    }
                    unsigned int v227 = *((_DWORD *)v178 + 16);
                  }
                  *((_DWORD *)v178 + 16) = v227 | 0x4000;
                  goto LABEL_277;
                }
                int v289 = 1;
                while (v288 != (llvm::GlobalValue *)-4096)
                {
                  int v290 = v286 + v289++;
                  uint64_t v286 = v290 & (v285 - 1);
                  uint64_t v288 = *(llvm::GlobalValue **)(v284 + 16 * v286);
                  if (v288 == v315)
                  {
                    unsigned int v287 = (llvm::GlobalValue **)(v284 + 16 * v286);
                    goto LABEL_376;
                  }
                }
              }
              unsigned int v287 = (llvm::GlobalValue **)(v284 + 16 * v285);
              goto LABEL_376;
            }
            if (v213)
            {
              v211 = (std::string *)llvm::UniqueStringSaver::save(***(void ***)v315 + 2136, v211, v213);
              int v216 = v215;
            }
            else
            {
              int v216 = 0;
            }
            uint64_t v217 = ***(void ***)v315;
            uint64_t v349 = (uint64_t)(v178 + 32);
            int v218 = *(_DWORD *)(v217 + 2520);
            if (v218)
            {
              uint64_t v219 = *(void *)(v217 + 2504);
              int v220 = v218 - 1;
              unsigned int v221 = v220 & ((v315 >> 4) ^ (v315 >> 9));
              v222 = (llvm::GlobalValue **)(v219 + 24 * v221);
              v223 = *v222;
              if (*v222 == v315)
              {
LABEL_267:
                v222[1] = (llvm::GlobalValue *)v211;
                v222[2] = v216;
                unsigned int v214 = *((_DWORD *)v178 + 16) & 0xFFBFFFFF | ((v216 != 0) << 22);
                *((_DWORD *)v178 + 16) = v214;
                char v212 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                goto LABEL_268;
              }
              uint64_t v237 = 0;
              int v238 = 1;
              while (v223 != (llvm::GlobalValue *)-4096)
              {
                if (v237) {
                  BOOL v239 = 0;
                }
                else {
                  BOOL v239 = v223 == (llvm::GlobalValue *)-8192;
                }
                if (v239) {
                  uint64_t v237 = v222;
                }
                unsigned int v240 = v221 + v238++;
                unsigned int v221 = v240 & v220;
                v222 = (llvm::GlobalValue **)(v219 + 24 * v221);
                v223 = *v222;
                if (*v222 == v315) {
                  goto LABEL_267;
                }
              }
              if (v237) {
                uint64_t v280 = v237;
              }
              else {
                uint64_t v280 = v222;
              }
            }
            else
            {
              uint64_t v280 = 0;
            }
            v222 = (llvm::GlobalValue **)sub_1CC5BF31C(v217 + 2504, (uint64_t)&v349, &v349, v280);
            uint64_t v281 = v349;
            v222[1] = 0;
            v222[2] = 0;
            uint64_t *v222 = (llvm::GlobalValue *)v281;
            goto LABEL_267;
          }
LABEL_223:
          BOOL v163 = v319;
          uint64_t v162 = (llvm::Function *)llvm::ConstantPointerNull::get(v317, v138);
          goto LABEL_224;
        }
LABEL_195:
        if (*((void *)v140 + 6)) {
          goto LABEL_223;
        }
        goto LABEL_219;
      }
    }
    else
    {
      uint64_t v140 = v327;
      if ((v139 - 7) < 2) {
        goto LABEL_195;
      }
      if (v139 != 1) {
        goto LABEL_221;
      }
    }
    uint64_t v160 = *((void *)v140 + 14);
    if (v160 && (*(unsigned char *)(v160 + 12) & 4) != 0) {
      goto LABEL_223;
    }
    goto LABEL_219;
  }
  uint64_t v110 = v9[2];
  __int16 v112 = (void *)*((void *)this + 19);
  unint64_t v111 = *((void *)this + 20);
  if ((unint64_t)v112 >= v111)
  {
    __int16 v114 = (void *)*((void *)this + 18);
    uint64_t v115 = v112 - v114;
    unint64_t v116 = v115 + 1;
    if (!((unint64_t)(v115 + 1) >> 61))
    {
      uint64_t v117 = v111 - (void)v114;
      if (v117 >> 2 > v116) {
        unint64_t v116 = v117 >> 2;
      }
      if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v118 = v116;
      }
      if (!v118)
      {
        uint64_t v119 = 0;
        goto LABEL_137;
      }
      if (!(v118 >> 61))
      {
        uint64_t v119 = (char *)operator new(8 * v118);
LABEL_137:
        uint64_t v120 = &v119[8 * v115];
        *(void *)uint64_t v120 = v110;
        std::string v113 = v120 + 8;
        if (v112 != v114)
        {
          do
          {
            uint64_t v121 = *--v112;
            *((void *)v120 - 1) = v121;
            v120 -= 8;
          }
          while (v112 != v114);
          __int16 v112 = (void *)*((void *)this + 18);
        }
        *((void *)this + 18) = v120;
        *((void *)this + 19) = v113;
        *((void *)this + 20) = &v119[8 * v118];
        if (v112) {
          operator delete(v112);
        }
        goto LABEL_142;
      }
LABEL_409:
      sub_1CB833614();
    }
LABEL_408:
    abort();
  }
  *__int16 v112 = v110;
  std::string v113 = v112 + 1;
LABEL_142:
  *((void *)this + 19) = v113;
LABEL_143:
  uint64_t v7 = v9[2];
  if (v331 < 0) {
    operator delete(v330[0]);
  }
  if (v334 < 0) {
    operator delete(v332);
  }
  return v7;
}

void llvm::InstrProfiling::emitVNodes(llvm::InstrProfiling *this)
{
  v61[3] = *MEMORY[0x1E4F143B8];
  if (byte_1EBCE9EA8)
  {
    unsigned int v2 = *((_DWORD *)this + 19);
    BOOL v3 = v2 > 0x21 || ((1 << v2) & 0x3F0005AE8) == 0;
    if (!v3
      || (*((_DWORD *)this + 16) == 42 ? (BOOL v13 = *((_DWORD *)this + 18) == 3) : (BOOL v13 = 0),
          v13 ? (BOOL v14 = v2 == 25) : (BOOL v14 = 0),
          !v14 ? (int v15 = 0) : (int v15 = 1),
          (((v2 != 15) ^ v15) & 1) == 0))
    {
      uint64_t v4 = *((void *)this + 15);
      uint64_t v5 = *((unsigned int *)this + 34);
      uint64_t v6 = (void *)(v4 + 32 * v5);
      if (*((_DWORD *)this + 32))
      {
        if (v5)
        {
          uint64_t v7 = 32 * v5;
          char v8 = (void *)*((void *)this + 15);
          while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v8 += 4;
            v7 -= 32;
            if (!v7) {
              goto LABEL_11;
            }
          }
        }
        else
        {
          char v8 = (void *)*((void *)this + 15);
        }
      }
      else
      {
LABEL_11:
        char v8 = (void *)(v4 + 32 * v5);
      }
      int v9 = (void *)(v4 + 32 * v5);
      if (v8 != v9)
      {
        unint64_t v10 = 0;
        do
        {
          int v11 = v8 + 4;
          int v12 = v6;
          if (v8 + 4 != v6)
          {
            while ((*v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v11 += 4;
              if (v11 == v6)
              {
                int v12 = v6;
                goto LABEL_20;
              }
            }
            int v12 = v11;
          }
LABEL_20:
          v10 += *((unsigned int *)v8 + 2) + (unint64_t)*((unsigned int *)v8 + 3);
          char v8 = v12;
        }
        while (v12 != v9);
        if (v10)
        {
          double v16 = *(double *)&xmmword_1EBCEA6E8 * (double)v10;
          LODWORD(v17) = 2 * (unint64_t)v16;
          if (v17 <= 0xA) {
            uint64_t v17 = 10;
          }
          else {
            uint64_t v17 = v17;
          }
          if ((unint64_t)v16 >= 0xA) {
            BOOL v18 = (llvm::Type *)v16;
          }
          else {
            BOOL v18 = (llvm::Type *)v17;
          }
          uint64_t v19 = (uint64_t *)**((void **)this + 4);
          uint64_t v20 = *v19;
          v61[0] = *v19 + 1984;
          v61[1] = v61[0];
          v61[2] = llvm::PointerType::get((llvm::PointerType *)(v20 + 1912), 0);
          uint64_t v21 = (llvm::ArrayType *)llvm::StructType::get(v19, (uint64_t)v61, 3, 0);
          uint64_t v22 = llvm::ArrayType::get(v21, v18);
          uint64_t v23 = (char *)operator new(0x78uLL);
          uint64_t v24 = (uint64_t ***)(v23 + 32);
          *((_DWORD *)v23 + 13) = *((_DWORD *)v23 + 13) & 0x38000000 | 1;
          *(void *)uint64_t v23 = 0;
          *((void *)v23 + 1) = 0;
          *((void *)v23 + 2) = 0;
          *((void *)v23 + 3) = v23 + 32;
          uint64_t v25 = *((void *)this + 4);
          NullValue = llvm::Constant::getNullValue(v22, v26, v27);
          __int16 v59 = 261;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"__llvm_prf_vnodes";
          __p.__r_.__value_.__l.__size_ = 17;
          llvm::GlobalVariable::GlobalVariable((unint64_t *)v23 + 4, v25, v22, 0, 8, (unint64_t)NullValue, (const char **)&__p.__r_.__value_.__l.__data_, 0, 0, 0, 0);
          llvm::getInstrProfSectionName(4u, *((_DWORD *)this + 21), 1, &__p);
          char v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
          }
          else {
            size_t size = __p.__r_.__value_.__l.__size_;
          }
          if ((v23[66] & 0x40) == 0 && !size) {
            goto LABEL_53;
          }
          if (size)
          {
            p_p = (std::string *)llvm::UniqueStringSaver::save(***v24 + 2136, p_p, size);
            int v33 = v32;
          }
          else
          {
            int v33 = 0;
          }
          uint64_t v34 = ***v24;
          BOOL v60 = v23 + 32;
          int v35 = *(_DWORD *)(v34 + 2520);
          if (v35)
          {
            uint64_t v36 = *(void *)(v34 + 2504);
            int v37 = v35 - 1;
            unsigned int v38 = v37 & ((v24 >> 4) ^ (v24 >> 9));
            int v39 = (uint64_t ****)(v36 + 24 * v38);
            int v40 = *v39;
            if (*v39 == v24)
            {
LABEL_52:
              v39[1] = (uint64_t ***)p_p;
              v39[2] = v33;
              *((_DWORD *)v23 + 16) = *((_DWORD *)v23 + 16) & 0xFFBFFFFF | ((v33 != 0) << 22);
              char v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_53:
              if (v29 < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              unsigned int v42 = (uint64_t ****)*((void *)this + 22);
              unint64_t v41 = *((void *)this + 23);
              if ((unint64_t)v42 >= v41)
              {
                uint64_t v44 = (void *)*((void *)this + 21);
                uint64_t v45 = v42 - (uint64_t ****)v44;
                unint64_t v46 = v45 + 1;
                if ((unint64_t)(v45 + 1) >> 61) {
                  abort();
                }
                uint64_t v47 = v41 - (void)v44;
                if (v47 >> 2 > v46) {
                  unint64_t v46 = v47 >> 2;
                }
                if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v48 = v46;
                }
                if (v48)
                {
                  if (v48 >> 61) {
                    sub_1CB833614();
                  }
                  __int16 v49 = (char *)operator new(8 * v48);
                }
                else
                {
                  __int16 v49 = 0;
                }
                unsigned int v54 = &v49[8 * v45];
                *(void *)unsigned int v54 = v24;
                unsigned int v43 = v54 + 8;
                if (v42 != v44)
                {
                  do
                  {
                    uint64_t v55 = (uint64_t)*--v42;
                    *((void *)v54 - 1) = v55;
                    v54 -= 8;
                  }
                  while (v42 != v44);
                  unsigned int v42 = (uint64_t ****)*((void *)this + 21);
                }
                *((void *)this + 21) = v54;
                *((void *)this + 22) = v43;
                *((void *)this + 23) = &v49[8 * v48];
                if (v42) {
                  operator delete(v42);
                }
              }
              else
              {
                *unsigned int v42 = v24;
                unsigned int v43 = v42 + 1;
              }
              *((void *)this + 22) = v43;
              return;
            }
            BOOL v50 = 0;
            int v51 = 1;
            while (v40 != (uint64_t ***)-4096)
            {
              if (v50) {
                BOOL v52 = 0;
              }
              else {
                BOOL v52 = v40 == (uint64_t ***)-8192;
              }
              if (v52) {
                BOOL v50 = v39;
              }
              unsigned int v53 = v38 + v51++;
              unsigned int v38 = v53 & v37;
              int v39 = (uint64_t ****)(v36 + 24 * v38);
              int v40 = *v39;
              if (*v39 == v24) {
                goto LABEL_52;
              }
            }
            if (v50) {
              int v56 = v50;
            }
            else {
              int v56 = v39;
            }
          }
          else
          {
            int v56 = 0;
          }
          int v39 = (uint64_t ****)sub_1CC5BF31C(v34 + 2504, (uint64_t)&v60, (uint64_t *)&v60, v56);
          uint64_t v57 = (uint64_t)v60;
          v39[1] = 0;
          v39[2] = 0;
          void *v39 = (uint64_t ***)v57;
          goto LABEL_52;
        }
      }
    }
  }
}

uint64_t llvm::InstrProfiling::emitRegistration(uint64_t this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(this + 76);
  if (v1 > 0x21 || ((1 << v1) & 0x3F0005AE8) == 0)
  {
    uint64_t v3 = this;
    BOOL v4 = *(_DWORD *)(this + 64) == 42 && *(_DWORD *)(this + 72) == 3;
    BOOL v5 = v4 && v1 == 25;
    BOOL v6 = v5;
    if ((v1 != 15) != v6)
    {
      uint64_t v7 = ***(void ***)(this + 32);
      char v8 = (uint64_t **)(v7 + 1576);
      int v9 = (void *)llvm::PointerType::get((llvm::PointerType *)(v7 + 1912), 0);
      unint64_t v10 = (llvm::PointerType *)llvm::FunctionType::get(v8, 0, 0, 0);
      __int16 v18 = 261;
      double v16 = "__llvm_profile_register_functions";
      uint64_t v17 = 33;
      unint64_t v11 = *(void *)(v3 + 32);
      int v12 = operator new(0x80uLL);
      *((_DWORD *)v12 + 7) = *((_DWORD *)v12 + 7) & 0x38000000 | 0x40000000;
      *(void *)int v12 = 0;
      llvm::Function::Function((unint64_t *)v12 + 1, v10, 7, (llvm::Type *)0xFFFFFFFFLL, (const char **)&v16, v11);
      *((_DWORD *)v12 + 10) = *((_DWORD *)v12 + 10) & 0xFFFFFF3F | 0x80;
      if (*(unsigned char *)v3) {
        *((void *)v12 + 15) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v12 + 15, **((uint64_t ***)v12 + 1), -1, 31);
      }
      double v16 = v9;
      BOOL v13 = (llvm::PointerType *)llvm::FunctionType::get(v8, (uint64_t)&v16, 1, 0);
      __int16 v18 = 261;
      double v16 = "__llvm_profile_register_function";
      uint64_t v17 = 32;
      unint64_t v14 = *(void *)(v3 + 32);
      int v15 = operator new(0x80uLL);
      *((_DWORD *)v15 + 7) = *((_DWORD *)v15 + 7) & 0x38000000 | 0x40000000;
      *(void *)int v15 = 0;
      llvm::Function::Function((unint64_t *)v15 + 1, v13, 0, (llvm::Type *)0xFFFFFFFFLL, (const char **)&v16, v14);
      operator new();
    }
  }
  return this;
}

llvm::PointerType *sub_1CCB395E8(uint64_t **a1, uint64_t a2, int a3)
{
  v14[3] = *MEMORY[0x1E4F143B8];
  BOOL v5 = *a1;
  uint64_t v6 = **a1;
  uint64_t v13 = 0;
  if (*(unsigned char *)(a2 + 144))
  {
    signed int v7 = 67;
LABEL_5:
    uint64_t v13 = llvm::AttributeList::addAttributeAtIndex(&v13, v5, 3, v7);
    uint64_t v8 = *v5;
    goto LABEL_6;
  }
  if (*(unsigned char *)(a2 + 146))
  {
    signed int v7 = 48;
    goto LABEL_5;
  }
  uint64_t v8 = v6;
LABEL_6:
  v14[0] = v8 + 1984;
  v14[1] = llvm::PointerType::get((llvm::PointerType *)(v8 + 1912), 0);
  v14[2] = *v5 + 1960;
  int v9 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(v6 + 1576), (uint64_t)v14, 3, 0);
  if (a3) {
    unint64_t v10 = "__llvm_profile_instrument_memop";
  }
  else {
    unint64_t v10 = "__llvm_profile_instrument_target";
  }
  if (a3) {
    uint64_t v11 = 31;
  }
  else {
    uint64_t v11 = 32;
  }
  return llvm::Module::getOrInsertFunction((uint64_t)a1, (unsigned __int8 *)v10, (const char *)v11, v9, v13);
}

uint64_t ***llvm::InstrProfiling::getCounterAddress(llvm::InstrProfiling *this, llvm::Value **a2)
{
  v121[1] = *MEMORY[0x1E4F143B8];
  RegionCounters = (const llvm::APInt *)llvm::InstrProfiling::getOrCreateRegionCounters(this, a2);
  BOOL v5 = 0;
  uint64_t v6 = *(void *)*a2;
  __int16 v106 = (llvm::MDNode **)v108;
  uint64_t v107 = 0x200000000;
  uint64_t v111 = v6;
  __int16 v112 = &v120;
  std::string v113 = v121;
  uint64_t v114 = 0;
  int v115 = 0;
  __int16 v116 = 512;
  char v117 = 7;
  uint64_t v118 = 0;
  uint64_t v119 = 0;
  uint64_t v120 = &unk_1F2616E88;
  v121[0] = &unk_1F2617008;
  signed int v7 = (char *)a2[6];
  BOOL v109 = a2[5];
  uint64_t v110 = (char *)(a2 + 3);
  v87[0] = v7;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)v87, (unsigned __int8 *)v7, 2);
    BOOL v5 = v87[0];
  }
  sub_1CB8461A4((uint64_t)&v106, 0, (uint64_t)v5);
  if (v87[0])
  {
    int v34 = *v87[0];
    if ((v34 - 4) > 0x1E)
    {
      if ((v34 - 3) >= 0xFFFFFFFE) {
        int v37 = v87[0];
      }
      else {
        int v37 = 0;
      }
      if ((v34 - 3) < 0xFFFFFFFE)
      {
        if (v34 == 3) {
          *((void *)v87[0] + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v36 = (unint64_t)(v37 + 8);
    }
    else
    {
      if ((v87[0][1] & 0x7F) != 2 && !*((_DWORD *)v87[0] + 3)) {
        goto LABEL_4;
      }
      uint64_t v35 = *((void *)v87[0] + 2);
      if ((v35 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v36 = v35 & 0xFFFFFFFFFFFFFFF8;
      if (!v36) {
        goto LABEL_4;
      }
    }
    long long v89 = v87;
    sub_1CC5FA668(v36 + 16, &v89);
  }
LABEL_4:
  uint64_t v8 = *((void *)RegionCounters + 3);
  int v9 = a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 12];
  unint64_t v10 = (void *)((char *)v9 + 24);
  if (*((_DWORD *)v9 + 8) >= 0x41u) {
    unint64_t v10 = (void *)*v10;
  }
  unsigned int v11 = *(_DWORD *)v10;
  __int16 v92 = 257;
  int v12 = sub_1CC5812D4((uint64_t *)&v106, v8, RegionCounters, 0, v11, (uint64_t)&v89);
  if (*((_DWORD *)this + 21) != 5)
  {
    if (word_1EBCE9D70)
    {
      if (!byte_1EBCE9DE8) {
        goto LABEL_82;
      }
    }
    else if (*((_DWORD *)this + 19) != 6)
    {
      goto LABEL_82;
    }
    uint64_t v13 = (llvm::Constant *)(***((void ***)this + 4) + 1984);
    uint64_t v14 = *(void *)(*((void *)a2[5] + 7) + 80);
    if (v14) {
      uint64_t v15 = v14 - 24;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(void *)(v15 + 48);
    uint64_t v17 = (llvm::Instruction *)(v16 - 24);
    if (!v16) {
      uint64_t v17 = 0;
    }
    int v18 = *((unsigned __int8 *)v17 + 16);
    if (v18 == 60) {
      uint64_t v19 = v17;
    }
    else {
      uint64_t v19 = 0;
    }
    if (v16 && v18 == 60) {
      goto LABEL_61;
    }
    uint64_t v20 = 0;
    uint64_t v21 = **(void **)v17;
    long long v89 = v91;
    uint64_t v90 = 0x200000000;
    uint64_t v95 = v21;
    std::string::size_type v96 = &v104;
    int64_t v97 = &v105;
    uint64_t v98 = 0;
    int v99 = 0;
    __int16 v100 = 512;
    char v101 = 7;
    char v93 = 0;
    size_t v94 = 0;
    uint64_t v102 = 0;
    uint64_t v103 = 0;
    uint64_t v104 = &unk_1F2616E88;
    int v105 = &unk_1F2617008;
    char v93 = (void *)*((void *)v17 + 5);
    size_t v94 = (void **)((char *)v17 + 24);
    uint64_t v22 = (unsigned __int8 *)*((void *)v17 + 6);
    v85[0] = v22;
    if (v22)
    {
      llvm::MetadataTracking::track((uint64_t)v85, v22, 2);
      uint64_t v20 = v85[0];
    }
    sub_1CB8461A4((uint64_t)&v89, 0, v20);
    if (v85[0])
    {
      int v62 = *(unsigned __int8 *)v85[0];
      if ((v62 - 4) > 0x1E)
      {
        if ((v62 - 3) >= 0xFFFFFFFE) {
          uint64_t v73 = v85[0];
        }
        else {
          uint64_t v73 = 0;
        }
        if ((v62 - 3) < 0xFFFFFFFE)
        {
          if (v62 == 3) {
            *(void *)(v85[0] + 8) = 0;
          }
          goto LABEL_24;
        }
        unint64_t v64 = v73 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v85[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v85[0] + 12)) {
          goto LABEL_24;
        }
        uint64_t v63 = *(void *)(v85[0] + 16);
        if ((v63 & 4) == 0) {
          goto LABEL_24;
        }
        unint64_t v64 = v63 & 0xFFFFFFFFFFFFFFF8;
        if (!v64) {
          goto LABEL_24;
        }
      }
      v87[0] = (const char *)v85;
      sub_1CC5FA668(v64 + 16, v87);
    }
LABEL_24:
    uint64_t v23 = *(uint64_t **)(*((void *)this + 4) + 112);
    unsigned int v24 = *((_DWORD *)v23 + 8);
    unsigned int v83 = v12;
    if (v24 <= 0x1A)
    {
      if (v24 <= 1) {
        size_t v25 = 1;
      }
      else {
        size_t v25 = v24;
      }
    }
    else
    {
      size_t v25 = 27;
    }
    uint64_t v84 = *((unsigned int *)v23 + 2);
    if (v84)
    {
      uint64_t v26 = 0;
      int v27 = 0;
      do
        int v27 = 33 * v27 + aLlvmProfileCou[v26++];
      while (v25 != v26);
      uint64_t v28 = *v23;
      uint64_t v29 = *v23 + 8 * v84 + 8;
      int v30 = 1;
      int v31 = v27;
      while (1)
      {
        uint64_t v32 = v31 & (v84 - 1);
        int v33 = *(void **)(v28 + 8 * v32);
        if (v33 != (void *)-8)
        {
          if (!v33) {
            goto LABEL_51;
          }
          if (*(_DWORD *)(v29 + 4 * v32) == v27
            && v25 == *v33
            && !memcmp("__llvm_profile_counter_bias", (char *)v33 + *((unsigned int *)v23 + 5), v25))
          {
            break;
          }
        }
        int v31 = v30 + v32;
        ++v30;
      }
      if (v32 != -1 && (int)v32 != v84)
      {
        unsigned int v38 = *(llvm::GlobalObject **)(*(void *)(v28 + 8 * (int)v32) + 8);
        if (v38)
        {
          if (*((unsigned char *)v38 + 16) == 3 && (*((_DWORD *)v38 + 8) & 0xFu) - 7 > 1) {
            goto LABEL_57;
          }
        }
      }
    }
LABEL_51:
    int v39 = operator new(0x78uLL);
    unsigned int v38 = (llvm::GlobalObject *)(v39 + 8);
    v39[13] = v39[13] & 0x38000000 | 1;
    *(void *)int v39 = 0;
    *((void *)v39 + 1) = 0;
    *((void *)v39 + 2) = 0;
    *((void *)v39 + 3) = v39 + 8;
    uint64_t v40 = *((void *)this + 4);
    NullValue = llvm::Constant::getNullValue(v13, v41, v42);
    __int16 v88 = 261;
    v87[0] = "__llvm_profile_counter_bias";
    v87[1] = (const char *)27;
    llvm::GlobalVariable::GlobalVariable((unint64_t *)v39 + 4, v40, v13, 0, 3, (unint64_t)NullValue, v87, 0, 0, 0, 0);
    int v44 = v39[16];
    unsigned int v45 = v44 & 0xFFFFFFCF | 0x10;
    v39[16] = v45;
    if ((v44 & 0xFu) - 7 >= 2)
    {
      if (llvm::GlobalValue::hasExternalWeakLinkage(v38))
      {
LABEL_55:
        unsigned int v46 = *((_DWORD *)this + 21);
        if (v46 <= 9 && ((1 << v46) & 0x320) != 0) {
          goto LABEL_57;
        }
        if ((*((unsigned char *)v39 + 55) & 0x10) == 0)
        {
          size_t v76 = 0;
          uint64_t v75 = (unsigned __int8 *)&byte_1CFBCE98E;
          goto LABEL_116;
        }
        uint64_t v65 = ***(void ***)v38;
        uint64_t v66 = *(void *)(v65 + 152);
        uint64_t v67 = *(unsigned int *)(v65 + 168);
        if (v67)
        {
          LODWORD(v68) = (v67 - 1) & ((v38 >> 4) ^ (v38 >> 9));
          int v69 = (llvm::GlobalObject **)(v66 + 16 * v68);
          int v70 = *v69;
          if (*v69 == v38)
          {
LABEL_115:
            uint64_t v74 = v69[1];
            size_t v77 = *(void *)v74;
            uint64_t v75 = (unsigned __int8 *)v74 + 16;
            size_t v76 = v77;
LABEL_116:
            inserted = llvm::Module::getOrInsertComdat(*((void *)this + 4), v75, v76);
            llvm::GlobalObject::setComdat(v38, (llvm::Comdat *)inserted);
LABEL_57:
            __int16 v86 = 257;
            char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v93[7] + 40) + 272), v13, 1);
            unint64_t v48 = operator new(0x60uLL);
            v48[13] = v48[13] & 0x38000000 | 1;
            uint64_t v19 = (llvm::Instruction *)(v48 + 8);
            *(void *)unint64_t v48 = 0;
            *((void *)v48 + 1) = 0;
            *((void *)v48 + 2) = 0;
            *((void *)v48 + 3) = v48 + 8;
            __int16 v88 = 257;
            llvm::LoadInst::LoadInst((llvm::Value *)(v48 + 8), (uint64_t)v13, (uint64_t)v38, v87, 0, Alignment, 0);
            (*((void (**)(void **, llvm::Instruction *, void *, void *, void **))*v97 + 2))(v97, v19, v85, v93, v94);
            __int16 v49 = (llvm::MDNode **)v89;
            if (v90)
            {
              unsigned int v61 = (llvm::MDNode **)((char *)v89 + 16 * v90);
              int v12 = v83;
              do
              {
                llvm::Instruction::setMetadata(v19, *(_DWORD *)v49, v49[1]);
                v49 += 2;
              }
              while (v49 != v61);
              __int16 v49 = (llvm::MDNode **)v89;
            }
            else
            {
              int v12 = v83;
            }
            if (v49 != (llvm::MDNode **)v91) {
              free(v49);
            }
LABEL_61:
            __int16 v88 = 257;
            BOOL v50 = (unsigned __int8 *)v12;
            if (*v12 != (uint64_t **)v13)
            {
              if (*((unsigned __int8 *)v12 + 16) <= 0x14u)
              {
                BOOL v50 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, uint64_t ***, llvm::Constant *))*v112
                                          + 28))(v112, 47, v12, v13);
                if (v50) {
                  BOOL v53 = v50[16] >= 0x1Cu;
                }
                else {
                  BOOL v53 = 0;
                }
                if (v53)
                {
                  (*(void (**)(void *, unsigned __int8 *, const char **, llvm::Value *, char *))(*v113 + 16))(v113, v50, v87, v109, v110);
                  if (v107)
                  {
                    int v79 = v106;
                    uint64_t v80 = (char *)&v106[2 * v107];
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v50, *(_DWORD *)v79, v79[1]);
                      v79 += 2;
                    }
                    while (v79 != (llvm::MDNode **)v80);
                  }
                }
              }
              else
              {
                __int16 v92 = 257;
                BOOL v50 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v12, (uint64_t)v13, (const char **)&v89, 0);
                (*(void (**)(void *, unsigned __int8 *, const char **, llvm::Value *, char *))(*v113 + 16))(v113, v50, v87, v109, v110);
                if (v107)
                {
                  int v51 = v106;
                  BOOL v52 = (char *)&v106[2 * v107];
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v50, *(_DWORD *)v51, v51[1]);
                    v51 += 2;
                  }
                  while (v51 != (llvm::MDNode **)v52);
                }
              }
            }
            __int16 v92 = 257;
            unsigned int v54 = sub_1CB844A3C((uint64_t)&v106, v50, (uint64_t)v19, (uint64_t)&v89, 0, 0);
            uint64_t v55 = (unsigned __int8 *)v54;
            uint64_t v56 = (uint64_t)*v12;
            __int16 v88 = 257;
            if (*(void *)v54 != v56)
            {
              if (*((unsigned __int8 *)v54 + 16) <= 0x14u)
              {
                uint64_t v55 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v112
                                          + 28))(v112, 48, v54, v56);
                if (v55) {
                  BOOL v59 = v55[16] >= 0x1Cu;
                }
                else {
                  BOOL v59 = 0;
                }
                if (v59)
                {
                  (*(void (**)(void *, unsigned __int8 *, const char **, llvm::Value *, char *))(*v113 + 16))(v113, v55, v87, v109, v110);
                  if (v107)
                  {
                    unsigned int v81 = v106;
                    uint64_t v82 = (char *)&v106[2 * v107];
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v55, *(_DWORD *)v81, v81[1]);
                      v81 += 2;
                    }
                    while (v81 != (llvm::MDNode **)v82);
                  }
                }
              }
              else
              {
                __int16 v92 = 257;
                uint64_t v55 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v54, v56, (const char **)&v89, 0);
                (*(void (**)(void *, unsigned __int8 *, const char **, llvm::Value *, char *))(*v113 + 16))(v113, v55, v87, v109, v110);
                if (v107)
                {
                  uint64_t v57 = v106;
                  uint64_t v58 = (char *)&v106[2 * v107];
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v55, *(_DWORD *)v57, v57[1]);
                    v57 += 2;
                  }
                  while (v57 != (llvm::MDNode **)v58);
                }
              }
            }
            int v12 = (uint64_t ***)v55;
            goto LABEL_82;
          }
          int v71 = 1;
          while (v70 != (llvm::GlobalObject *)-4096)
          {
            int v72 = v68 + v71++;
            uint64_t v68 = v72 & (v67 - 1);
            int v70 = *(llvm::GlobalObject **)(v66 + 16 * v68);
            if (v70 == v38)
            {
              int v69 = (llvm::GlobalObject **)(v66 + 16 * v68);
              goto LABEL_115;
            }
          }
        }
        int v69 = (llvm::GlobalObject **)(v66 + 16 * v67);
        goto LABEL_115;
      }
      unsigned int v45 = v39[16];
    }
    v39[16] = v45 | 0x4000;
    goto LABEL_55;
  }
LABEL_82:
  if (v106 != (llvm::MDNode **)v108) {
    free(v106);
  }
  return v12;
}

BOOL sub_1CCB3A140(llvm *a1, const llvm::Module *a2)
{
  v17[24] = *MEMORY[0x1E4F143B8];
  if (llvm::isIRPGOFlagSet(a1, a2)) {
    return 1;
  }
  uint64_t v15 = v17;
  uint64_t v16 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(a1, (uint64_t)&v15);
  if (v16)
  {
    BOOL v4 = (uint64_t *)((char *)v15 + 16);
    uint64_t v5 = 24 * v16;
    while (1)
    {
      uint64_t v6 = *(void *)(*(v4 - 1) + 8);
      if (*(void *)v6 == 20)
      {
        uint64_t v7 = *(void *)(v6 + 24);
        uint64_t v8 = *(void *)(v6 + 32);
        int v9 = *(_DWORD *)(v6 + 40);
        BOOL v10 = v7 == 0x6156656C62616E45 && v8 == 0x69666F725065756CLL;
        if (v10 && v9 == 1735289196) {
          break;
        }
      }
      v4 += 3;
      v5 -= 24;
      if (!v5) {
        goto LABEL_17;
      }
    }
    uint64_t v12 = *v4;
  }
  else
  {
LABEL_17:
    uint64_t v12 = 0;
  }
  if (v15 == v17)
  {
    if (!v12) {
      return 0;
    }
  }
  else
  {
    free(v15);
    if (!v12) {
      return 0;
    }
  }
  if (*(unsigned char *)v12 != 1) {
    return 0;
  }
  uint64_t v13 = *(void *)(v12 + 128);
  uint64_t v14 = (void *)(v13 + 24);
  if (*(_DWORD *)(v13 + 32) >= 0x41u) {
    uint64_t v14 = (void *)*v14;
  }
  return *v14 != 0;
}

void sub_1CCB3A2A4(void *a1, uint64_t a2, void *a3, size_t a4, unsigned char *a5)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  BOOL v10 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
  if ((*((unsigned char *)v10 + 23) & 0x10) != 0)
  {
    uint64_t v12 = ***(void ***)v10;
    uint64_t v13 = *(void *)(v12 + 152);
    uint64_t v14 = *(unsigned int *)(v12 + 168);
    if (v14)
    {
      LODWORD(v15) = (v14 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      uint64_t v16 = (llvm::Value **)(v13 + 16 * v15);
      uint64_t v17 = *v16;
      if (*v16 == v10)
      {
LABEL_9:
        uint64_t v20 = v16[1];
        unint64_t v23 = *(void *)v20;
        uint64_t v21 = (char *)v20 + 16;
        unint64_t v22 = v23;
        goto LABEL_10;
      }
      int v18 = 1;
      while (v17 != (llvm::Value *)-4096)
      {
        int v19 = v15 + v18++;
        uint64_t v15 = v19 & (v14 - 1);
        uint64_t v17 = *(llvm::Value **)(v13 + 16 * v15);
        if (v17 == v10)
        {
          uint64_t v16 = (llvm::Value **)(v13 + 16 * v15);
          goto LABEL_9;
        }
      }
    }
    uint64_t v16 = (llvm::Value **)(v13 + 16 * v14);
    goto LABEL_9;
  }
  unint64_t v22 = 0;
  uint64_t v21 = &byte_1CFBCE98E;
LABEL_10:
  uint64_t v24 = 8;
  if (v22 < 8) {
    uint64_t v24 = v22;
  }
  size_t v25 = (size_t)&v21[v24];
  size_t v26 = v22 - v24;
  if (byte_1EBCE9D28
    && (int v27 = *(llvm ***)(*(void *)(a2 + 40) + 56), llvm::isIRPGOFlagSet(v27[5], v11))
    && (llvm::canRenameComdatFunc((llvm *)v27, 0, v28) & 1) != 0)
  {
    *a5 = 1;
    uint64_t v29 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    int v30 = (void *)(v29 + 24);
    if (*(_DWORD *)(v29 + 32) >= 0x41u) {
      int v30 = (void *)*v30;
    }
    uint64_t v40 = (void *)*v30;
    __s2 = &v43;
    *(_OWORD *)__n = xmmword_1CFAC79E0;
    v36[0] = ".";
    int v37 = &v40;
    __int16 v39 = 3075;
    llvm::Twine::toVector((uint64_t)v36, (uint64_t)&__s2);
    if (v26 >= __n[0] && (!__n[0] || !memcmp(&v21[v22 - __n[0]], __s2, __n[0])))
    {
      v36[0] = a3;
      v36[1] = a4;
      int v37 = (void *)v25;
      size_t v38 = v26;
      __int16 v31 = 1285;
    }
    else
    {
      v32[0] = a3;
      v32[1] = a4;
      void v32[2] = v25;
      v32[3] = v26;
      __int16 v33 = 1285;
      v34[0] = v32;
      v34[2] = ".";
      __int16 v35 = 770;
      v36[0] = v34;
      int v37 = &v40;
      __int16 v31 = 3074;
    }
    __int16 v39 = v31;
    llvm::Twine::str((llvm::Twine *)v36, a1);
    if (__s2 != &v43) {
      free(__s2);
    }
  }
  else
  {
    *a5 = 0;
    __s2 = a3;
    __n[0] = a4;
    __n[1] = v25;
    size_t v43 = v26;
    __int16 v44 = 1285;
    llvm::Twine::str((llvm::Twine *)&__s2, a1);
  }
}

void sub_1CCB3A52C()
{
}

void sub_1CCB3A5C4(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F262C350;
  sub_1CD696894((uint64_t)a1 + 32);

  llvm::Pass::~Pass(a1);
}

void sub_1CCB3A618(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F262C350;
  sub_1CD696894((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CCB3A680()
{
  return "Frontend instrumentation-based coverage lowering";
}

void sub_1CCB3A690(llvm::PassRegistry *a1, uint64_t a2)
{
  v4[0] = &unk_1F2617E40;
  v4[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v4);

  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

uint64_t sub_1CCB3A708(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1F262C3F0;
  v4[1] = a1;
  uint64_t v5 = v4;
  uint64_t v2 = llvm::InstrProfiling::run(a1 + 32, a2, (uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1CCB3A7F8()
{
}

void *sub_1CCB3A80C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F262C3F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CCB3A854(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F262C3F0;
  a2[1] = v2;
  return result;
}

void sub_1CCB3A880(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(char **)v4 != llvm::TargetLibraryInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v6 + 96))(v6, llvm::TargetLibraryInfoWrapperPass::ID);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v8 = v7 + 32;
  if (!*(unsigned char *)(v7 + 232))
  {
    uint64_t v9 = *(void *)(a2 + 40) + 216;
    __int16 v21 = 260;
    v20[0] = v9;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v20);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v33 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(void *)&long long v10 = -1;
    *((void *)&v10 + 1) = -1;
    *(_OWORD *)__src = v10;
    long long v25 = v10;
    long long v26 = v10;
    long long v27 = v10;
    long long v28 = v10;
    long long v29 = v10;
    *(_OWORD *)int v30 = v10;
    *(void *)&v30[13] = -1;
    sub_1CC153974((uint64_t)__src, (int *)__p);
    sub_1CD4D04B8(v8, (uint64_t)__src);
    sub_1CD4CFA4C((uint64_t *)__src);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1CC1569E8(__src, v8);
}

uint64_t sub_1CCB3ABA8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a3) {
LABEL_10:
  }
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::hasDedicatedExits();
  uint64_t v3 = 8 * a3;
  while (1)
  {
    uint64_t v4 = *(void *)(*(void *)a2 + 40);
    uint64_t v5 = v4 ? v4 - 24 : 0;
    if (*(unsigned __int8 *)(v5 + 16) - 29 >= 0xB) {
      uint64_t v5 = 0;
    }
    if (*(unsigned char *)(v5 + 16) == 38) {
      return 0;
    }
    a2 += 8;
    v3 -= 8;
    if (!v3) {
      goto LABEL_10;
    }
  }
}

void sub_1CCB3ACF4()
{
  v2[8] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = v2;
  uint64_t v1 = 0x800000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks();
}

void sub_1CCB3AF00()
{
}

void sub_1CCB3AF14(uint64_t a1)
{
  v66[1] = *MEMORY[0x1E4F143B8];
  uint64_t v46 = *(unsigned int *)(a1 + 32);
  if (*(_DWORD *)(a1 + 32))
  {
    for (uint64_t i = 0; i != v46; ++i)
    {
      uint64_t v3 = *(llvm::BasicBlock **)(*(void *)(a1 + 24) + 8 * i);
      uint64_t v4 = *(uint64_t ***)(*(void *)(a1 + 40) + 8 * i);
      ValueInMiddleOfBlocuint64_t k = (uint64_t *)llvm::SSAUpdater::GetValueInMiddleOfBlock(*(llvm::UndefValue ***)(a1 + 8), v3);
      uint64_t v6 = 0;
      uint64_t v7 = *(void *)(*(void *)(a1 + 16) - 32);
      uint64_t v8 = (llvm::Type *)*ValueInMiddleOfBlock;
      uint64_t v9 = **v4;
      int v51 = v53;
      uint64_t v52 = 0x200000000;
      uint64_t v56 = v9;
      uint64_t v57 = &v65;
      uint64_t v58 = v66;
      uint64_t v59 = 0;
      int v60 = 0;
      __int16 v61 = 512;
      char v62 = 7;
      unsigned int v54 = 0;
      uint64_t v55 = 0;
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      uint64_t v65 = &unk_1F2616E88;
      v66[0] = &unk_1F2617008;
      unsigned int v54 = v4[5];
      uint64_t v55 = v4 + 3;
      long long v10 = (unsigned __int8 *)v4[6];
      v47[0] = v10;
      if (v10)
      {
        llvm::MetadataTracking::track((uint64_t)v47, v10, 2);
        uint64_t v6 = v47[0];
      }
      sub_1CB8461A4((uint64_t)&v51, 0, v6);
      if (!v47[0]) {
        goto LABEL_6;
      }
      int v35 = *(unsigned __int8 *)v47[0];
      if ((v35 - 4) > 0x1E)
      {
        if ((v35 - 3) >= 0xFFFFFFFE) {
          uint64_t v43 = v47[0];
        }
        else {
          uint64_t v43 = 0;
        }
        if ((v35 - 3) < 0xFFFFFFFE)
        {
          if (v35 == 3) {
            *(void *)(v47[0] + 8) = 0;
          }
          goto LABEL_6;
        }
        unint64_t v37 = v43 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v47[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v47[0] + 12)) {
          goto LABEL_6;
        }
        uint64_t v36 = *(void *)(v47[0] + 16);
        if ((v36 & 4) == 0) {
          goto LABEL_6;
        }
        unint64_t v37 = v36 & 0xFFFFFFFFFFFFFFF8;
        if (!v37) {
          goto LABEL_6;
        }
      }
      v49[0] = (const char *)v47;
      sub_1CC5FA668(v37 + 16, v49);
LABEL_6:
      if (byte_1EBCEA028)
      {
        v45 &= 0xFFFFFFFFFFFF0000;
        sub_1CD5097F8((uint64_t *)&v51, 1, v7, ValueInMiddleOfBlock, 0, 7, 1);
      }
      else
      {
        v47[0] = "pgocount.promoted";
        __int16 v48 = 259;
        char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v54[7] + 40) + 272), v8, 1);
        uint64_t v12 = operator new(0x60uLL);
        v12[13] = v12[13] & 0x38000000 | 1;
        int v13 = (llvm::Instruction *)(v12 + 8);
        *(void *)uint64_t v12 = 0;
        *((void *)v12 + 1) = 0;
        *((void *)v12 + 2) = 0;
        *((void *)v12 + 3) = v12 + 8;
        __int16 v50 = 257;
        llvm::LoadInst::LoadInst((llvm::Value *)(v12 + 8), (uint64_t)v8, v7, v49, 0, Alignment, 0);
        (*(void (**)(void *, llvm::Instruction *, void *, uint64_t *, uint64_t **))(*v58 + 16))(v58, v13, v47, v54, v55);
        if (v52)
        {
          int v33 = (llvm::MDNode **)v51;
          long long v34 = (llvm::MDNode **)((char *)v51 + 16 * v52);
          do
          {
            llvm::Instruction::setMetadata(v13, *(_DWORD *)v33, v33[1]);
            v33 += 2;
          }
          while (v33 != v34);
        }
        __int16 v50 = 257;
        uint64_t v14 = sub_1CB844A3C((uint64_t)&v51, v13, (uint64_t)ValueInMiddleOfBlock, (uint64_t)v49, 0, 0);
        char v15 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v54[7] + 40) + 272), *(llvm::Type **)v14, 1);
        int v16 = (char *)operator new(0x80uLL);
        *((_DWORD *)v16 + 21) = *((_DWORD *)v16 + 21) & 0x38000000 | 2;
        *(void *)int v16 = 0;
        *((void *)v16 + 2) = 0;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 5) = 0;
        *((void *)v16 + 6) = 0;
        *((void *)v16 + 4) = 0;
        uint64_t v17 = (uint64_t *)(v16 + 32);
        *((void *)v16 + 8) = ***(void ***)v14 + 1576;
        uint64_t v18 = (llvm::Instruction *)(v16 + 64);
        *((void *)v16 + 3) = v16 + 64;
        *((void *)v16 + 7) = v16 + 64;
        *((void *)v16 + 9) = 0;
        v16[80] = 61;
        v16[81] = 0;
        *((_WORD *)v16 + 41) = 0;
        *((_DWORD *)v16 + 21) = 2;
        *(_OWORD *)(v16 + 88) = 0u;
        *(_OWORD *)(v16 + 104) = 0u;
        *((_DWORD *)v16 + 30) = 0;
        *(void *)int v16 = v14;
        uint64_t v21 = *((void *)v14 + 1);
        uint64_t v20 = (void *)((char *)v14 + 8);
        uint64_t v19 = v21;
        *((void *)v16 + 1) = v21;
        if (v21) {
          *(void *)(v19 + 16) = v16 + 8;
        }
        *((void *)v16 + 2) = v20;
        *uint64_t v20 = v16;
        if (*((void *)v16 + 4))
        {
          **((void **)v16 + 6) = *((void *)v16 + 5);
          uint64_t v44 = *((void *)v16 + 5);
          if (v44) {
            *(void *)(v44 + 16) = *((void *)v16 + 6);
          }
        }
        *uint64_t v17 = v7;
        if (v7)
        {
          uint64_t v24 = *(void *)(v7 + 8);
          char v23 = (uint64_t **)(v7 + 8);
          uint64_t v22 = v24;
          *((void *)v16 + 5) = v24;
          if (v24) {
            *(void *)(v22 + 16) = v16 + 40;
          }
          *((void *)v16 + 6) = v23;
          *char v23 = v17;
        }
        *((_WORD *)v16 + 41) = 2 * (v15 & 0x3F);
        v16[124] = 1;
        __int16 v50 = 257;
        (*(void (**)(void *, llvm::Instruction *, const char **, uint64_t *, uint64_t **))(*v58 + 16))(v58, v18, v49, v54, v55);
        if (v52)
        {
          size_t v38 = (llvm::MDNode **)v51;
          __int16 v39 = (llvm::MDNode **)((char *)v51 + 16 * v52);
          do
          {
            llvm::Instruction::setMetadata(v18, *(_DWORD *)v38, v38[1]);
            v38 += 2;
          }
          while (v38 != v39);
        }
        if (byte_1EBCEA568)
        {
          long long v25 = *(uint64_t **)(a1 + 64);
          int v26 = *((_DWORD *)v25 + 4);
          if (v26)
          {
            uint64_t v27 = *v25;
            unsigned int v28 = v26 - 1;
            uint64_t v29 = (v26 - 1) & ((v3 >> 4) ^ (v3 >> 9));
            int v30 = *(llvm::BasicBlock **)(v27 + 16 * v29);
            if (v3 == v30)
            {
LABEL_22:
              v49[0] = *(const char **)(v27 + 16 * v29 + 8);
              if (v49[0])
              {
                uint64_t v40 = sub_1CD696A14(*(void *)(a1 + 56), (uint64_t *)v49);
                uint64_t v41 = *((unsigned int *)v40 + 4);
                if (v41 >= *((_DWORD *)v40 + 5)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                unsigned int v42 = (llvm::Instruction **)(v40[1] + 16 * v41);
                *unsigned int v42 = v13;
                v42[1] = v18;
                *((_DWORD *)v40 + 4) = v41 + 1;
              }
            }
            else
            {
              int v31 = 1;
              while (v30 != (llvm::BasicBlock *)-4096)
              {
                int v32 = v29 + v31++;
                uint64_t v29 = v32 & v28;
                int v30 = *(llvm::BasicBlock **)(v27 + 16 * v29);
                if (v3 == v30) {
                  goto LABEL_22;
                }
              }
            }
          }
        }
      }
      if (v51 != v53) {
        free(v51);
      }
    }
  }
}

void sub_1CCB3B4F4()
{
}

void *sub_1CCB3B508(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F262C488;
  result[1] = v3;
  return result;
}

uint64_t sub_1CCB3B550(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F262C488;
  a2[1] = v2;
  return result;
}

void sub_1CCB3B57C()
{
}

BOOL sub_1CCB3B5A8(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 160;
}

BOOL sub_1CCB3B5F4(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 162;
}

uint64_t sub_1CCB3B640()
{
  LODWORD(v1) = 1;
  *(void *)&long long v3 = "Use debug info to correlate profiles.";
  *((void *)&v3 + 1) = 37;
  LOBYTE(v2) = 0;
  uint64_t v4 = (uint64_t *)&v2;
  sub_1CD696D24((uint64_t)&llvm::DebugInfoCorrelate, "debug-info-correlate", &v1, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::DebugInfoCorrelate, &dword_1CB82C000);
  *(void *)&long long v3 = "Rename counter variable of a comdat function based on cfg hash";
  *((void *)&v3 + 1) = 62;
  LOBYTE(v1) = 1;
  uint64_t v4 = &v1;
  sub_1CD3F48AC((uint64_t)&unk_1EBCE9CA8, "hash-based-counter-split", &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE9CA8, &dword_1CB82C000);
  *(void *)&long long v3 = "Enable relocating counters at runtime.";
  *((void *)&v3 + 1) = 38;
  LOBYTE(v1) = 0;
  uint64_t v4 = &v1;
  sub_1CD3F48AC((uint64_t)&unk_1EBCE9D68, "runtime-counter-relocation", &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE9D68, &dword_1CB82C000);
  *(void *)&long long v3 = "Do static counter allocation for value profiler";
  *((void *)&v3 + 1) = 47;
  LOBYTE(v1) = 1;
  uint64_t v4 = &v1;
  sub_1CD3F48AC((uint64_t)&unk_1EBCE9E28, "vp-static-alloc", &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE9E28, &dword_1CB82C000);
  *(void *)&long long v3 = "The average number of profile counters allocated per value profiling site.";
  *((void *)&v3 + 1) = 74;
  uint64_t v1 = 0x3FF0000000000000;
  uint64_t v4 = &v1;
  sub_1CD696E4C(&v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1CBF801A0, qword_1EBCEA668, &dword_1CB82C000);
  LODWORD(v1) = 1;
  *(void *)&long long v3 = "Make all profile counter updates atomic (for testing only)";
  *((void *)&v3 + 1) = 58;
  LOBYTE(v2) = 0;
  uint64_t v4 = (uint64_t *)&v2;
  sub_1CD696F60(&v1, &v3, (char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCE9EE8, &dword_1CB82C000);
  LODWORD(v1) = 1;
  *(void *)&long long v3 = "Do counter update using atomic fetch add  for promoted counters only";
  *((void *)&v3 + 1) = 68;
  LOBYTE(v2) = 0;
  uint64_t v4 = (uint64_t *)&v2;
  sub_1CD697084(&v1, &v3, (char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCE9FA8, &dword_1CB82C000);
  LODWORD(v1) = 1;
  *(void *)&long long v3 = "Use atomic fetch add for first counter in a function (usually the entry counter)";
  *((void *)&v3 + 1) = 80;
  LOBYTE(v2) = 0;
  uint64_t v4 = (uint64_t *)&v2;
  sub_1CD696D24((uint64_t)&unk_1EBCEA068, "atomic-first-counter", &v1, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEA068, &dword_1CB82C000);
  LODWORD(v1) = 1;
  *(void *)&long long v3 = "Do counter register promotion";
  *((void *)&v3 + 1) = 29;
  LOBYTE(v2) = 0;
  uint64_t v4 = (uint64_t *)&v2;
  sub_1CD696D24((uint64_t)&unk_1EBCEA128, "do-counter-promotion", &v1, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEA128, &dword_1CB82C000);
  LODWORD(v1) = 1;
  int v2 = 20;
  *(void *)&long long v3 = "Max number counter promotions per loop to avoid increasing register pressure too much";
  *((void *)&v3 + 1) = 85;
  uint64_t v4 = (uint64_t *)&v2;
  sub_1CD6971A8(&v1, (int **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCEA1E8, &dword_1CB82C000);
  LODWORD(v1) = 1;
  int v2 = -1;
  *(void *)&long long v3 = "Max number of allowed counter promotions";
  *((void *)&v3 + 1) = 40;
  uint64_t v4 = (uint64_t *)&v2;
  sub_1CD6972C8(&v1, (int **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCEA2A8, &dword_1CB82C000);
  LODWORD(v1) = 1;
  int v2 = 3;
  *(void *)&long long v3 = "The max number of exiting blocks of a loop to allow  speculative counter promotion";
  *((void *)&v3 + 1) = 82;
  uint64_t v4 = (uint64_t *)&v2;
  sub_1CD6973EC(&v1, (int **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCEA368, &dword_1CB82C000);
  LODWORD(v1) = 1;
  LOBYTE(v2) = 0;
  *(void *)&long long v3 = "When the option is false, if the target block is in a loop, the promotion will be disallowed unless t"
                   "he promoted counter  update can be further/iteratively promoted into an acyclic  region.";
  *((void *)&v3 + 1) = 189;
  uint64_t v4 = (uint64_t *)&v2;
  sub_1CD69750C(&v1, (char **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCEA428, &dword_1CB82C000);
  LODWORD(v1) = 1;
  LOBYTE(v2) = 1;
  *(void *)&long long v3 = "Allow counter promotion across the whole loop nest.";
  *((void *)&v3 + 1) = 51;
  uint64_t v4 = (uint64_t *)&v2;
  sub_1CD697630(&v1, (char **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCEA4E8, &dword_1CB82C000);
  LODWORD(v1) = 1;
  LOBYTE(v2) = 1;
  *(void *)&long long v3 = "Suppress counter promotion if exit blocks contain ret.";
  *((void *)&v3 + 1) = 54;
  uint64_t v4 = (uint64_t *)&v2;
  sub_1CD697754(&v1, (char **)&v4, &v3);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCEA5A8, &dword_1CB82C000);
}

char *sub_1CCB3BAA4(uint64_t **a1, int a2)
{
  uint64_t v3 = **a1;
  uint64_t v4 = 0x100000000000008;
  if (a2) {
    uint64_t v4 = 0x300000000000008;
  }
  if (byte_1EBCEB0C8) {
    v4 |= 0x400000000000000uLL;
  }
  if (byte_1EBD096D8) {
    uint64_t v5 = v4 | 0x800000000000000;
  }
  else {
    uint64_t v5 = v4;
  }
  int v6 = byte_1EBCEB188;
  uint64_t v8 = (char *)operator new(0x78uLL);
  *((_DWORD *)v8 + 13) = *((_DWORD *)v8 + 13) & 0x38000000 | 1;
  uint64_t v9 = (unint64_t *)(v8 + 32);
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = v8 + 32;
  long long v10 = (llvm::Constant ***)(v3 + 1984);
  if (v6) {
    uint64_t v11 = v5 | 0x3000000000000000;
  }
  else {
    uint64_t v11 = v5;
  }
  unsigned int v19 = 64;
  uint64_t v18 = (void **)v11;
  IntegerValue = llvm::Constant::getIntegerValue(v10, (llvm::Type *)&v18, v7);
  __int16 v23 = 261;
  __p[0] = "__llvm_profile_raw_version";
  __p[1] = (void *)26;
  llvm::GlobalVariable::GlobalVariable(v9, (uint64_t)a1, (llvm::PointerType *)v10, 1, 4, (unint64_t)IntegerValue, (const char **)__p, 0, 0, 0, 0);
  if (v19 >= 0x41 && v18) {
    MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
  }
  int v13 = *((_DWORD *)v8 + 16);
  if ((v13 & 0xFu) - 7 >= 2) {
    unsigned int v14 = v13 & 0xFFFFFFCF;
  }
  else {
    unsigned int v14 = v13 & 0xFFFFBFCF | 0x4000;
  }
  *((_DWORD *)v8 + 16) = v14;
  __int16 v20 = 260;
  uint64_t v18 = a1 + 27;
  llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)&v18);
  if (v24 > 9 || ((1 << v24) & 0x320) == 0)
  {
    int v16 = *((_DWORD *)v8 + 16);
    *((_DWORD *)v8 + 16) = v16 & 0xFFFFFFF0;
    if ((v16 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v9) & 1) == 0) {
      *((_DWORD *)v8 + 16) |= 0x4000u;
    }
    inserted = llvm::Module::getOrInsertComdat((uint64_t)a1, "__llvm_profile_raw_version", 0x1AuLL);
    llvm::GlobalObject::setComdat((llvm::GlobalObject *)v9, (llvm::Comdat *)inserted);
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  return v8 + 32;
}

void llvm::PGOInstrumentationGen::run()
{
}

uint64_t sub_1CCB3E864(uint64_t *a1, std::string::size_type a2, std::string::size_type a3, std::string::size_type a4, std::string::size_type a5, llvm::Twine *a6, void (*a7)(uint64_t, uint64_t *), uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t *), uint64_t a10, uint64_t (*a11)(uint64_t, uint64_t *), uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  v52[0] = a2;
  v52[1] = a3;
  uint64_t v16 = *a1;
  LOWORD(v62) = 261;
  v61.__r_.__value_.__r.__words[0] = a2;
  v61.__r_.__value_.__l.__size_ = a3;
  __int16 v59 = 261;
  v57.__r_.__value_.__r.__words[0] = a4;
  v57.__r_.__value_.__l.__size_ = a5;
  llvm::IndexedInstrProfReader::create((llvm::IndexedInstrProfReader *)&v61, a6, (llvm::vfs::FileSystem *)&v57, (uint64_t)&v55);
  uint64_t v17 = v55;
  uint64_t v55 = 0;
  if (v56)
  {
    if (v17)
    {
      v61.__r_.__value_.__r.__words[0] = v16;
      v61.__r_.__value_.__l.__size_ = (std::string::size_type)v52;
      if ((*(unsigned int (**)(void *, void *))(*v17 + 48))(v17, &llvm::ErrorList::ID))
      {
        unsigned int v19 = (void **)v17[1];
        __int16 v20 = (void **)v17[2];
        if (v19 == v20)
        {
          uint64_t v21 = 0;
        }
        else
        {
          uint64_t v21 = 0;
          do
          {
            v43[0] = v21;
            char v22 = *v19;
            *unsigned int v19 = 0;
            unsigned int v54 = v22;
            sub_1CCB47D88(&__dst, &v54, (uint64_t)&v61);
            sub_1CD451630((char **)v43, &__dst, &v57.__r_.__value_.__l.__data_);
            uint64_t v21 = (llvm::Function *)v57.__r_.__value_.__r.__words[0];
            v57.__r_.__value_.__r.__words[0] = 0;
            if (__dst) {
              (*(void (**)(char *))(*(void *)__dst + 8))(__dst);
            }
            __int16 v23 = v54;
            unsigned int v54 = 0;
            if (v23) {
              (*(void (**)(void *))(*(void *)v23 + 8))(v23);
            }
            if (v43[0]) {
              (*(void (**)(llvm::Function *))(*(void *)v43[0] + 8))(v43[0]);
            }
            ++v19;
          }
          while (v19 != v20);
        }
        int v60 = v21;
      }
      else
      {
        v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
        sub_1CCB47D88(&v60, &v57, (uint64_t)&v61);
        uint64_t v17 = (void *)v57.__r_.__value_.__r.__words[0];
        if (!v57.__r_.__value_.__r.__words[0]) {
          goto LABEL_27;
        }
      }
      (*(void (**)(void *))(*v17 + 8))(v17);
      goto LABEL_27;
    }
LABEL_20:
    LOWORD(v62) = 261;
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)"Cannot get PGOReader";
    v61.__r_.__value_.__l.__size_ = 20;
    LODWORD(v57.__r_.__value_.__r.__words[1]) = 19;
    v57.__r_.__value_.__s.__data_[12] = 0;
    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F26167A0;
    v57.__r_.__value_.__r.__words[2] = a2;
    uint64_t v58 = &v61;
    llvm::LLVMContext::diagnose(v16, (const llvm::DiagnosticInfo *)&v57);
LABEL_27:
    uint64_t v24 = 0;
    goto LABEL_33;
  }
  if (!v17) {
    goto LABEL_20;
  }
  if (((*(uint64_t (**)(void *))(*v17 + 48))(v17) & 1) != 0 || !a14)
  {
    if ((*(uint64_t (**)(void *))(*v17 + 40))(v17))
    {
      if ((*(unsigned int (**)(void *))(*v17 + 72))(v17))
      {
        uint64_t v18 = "Cannot use coverage profiles for optimization";
      }
      else
      {
        if (!(*(unsigned int (**)(void *))(*v17 + 80))(v17))
        {
          uint64_t v27 = 10;
          if (a14) {
            uint64_t v27 = 11;
          }
          unsigned int v28 = (llvm::LLVMContext *)*a1;
          uint64_t v40 = a1;
          if (a14) {
            size_t v29 = 16;
          }
          else {
            size_t v29 = 14;
          }
          if (a14) {
            int v30 = "CSProfileSummary";
          }
          else {
            int v30 = "ProfileSummary";
          }
          MD = llvm::ProfileSummary::getMD((llvm::ProfileSummary *)v17[v27], v28, 1, 1);
          llvm::Module::setModuleFlag((uint64_t **)v40, (llvm::Type *)1, v30, v29, MD);
          llvm::ProfileSummaryInfo::refresh(a13);
          *(_OWORD *)__int16 v49 = 0u;
          *(_OWORD *)__int16 v50 = 0u;
          int v51 = 1065353216;
          sub_1CCB45448(v40, v49);
          (*(void (**)(void *))(*v17 + 56))(v17);
          for (uint64_t i = (uint64_t *)v40[4]; i != v40 + 3; uint64_t i = (uint64_t *)i[1])
          {
            if (i) {
              int v33 = i - 7;
            }
            else {
              int v33 = 0;
            }
            if (i && *((unsigned char *)v33 + 16) == 3)
            {
              if ((*((_DWORD *)v33 + 5) & 0x7FFFFFF) != 0) {
                goto LABEL_58;
              }
            }
            else if (*((unsigned char *)v33 + 16) || (uint64_t *)v33[9] != v33 + 9 || (*((unsigned char *)v33 + 34) & 0x80) != 0)
            {
LABEL_58:
              a7(a8, v33);
              uint64_t v34 = a9(a10, v33);
              int v35 = (llvm::BranchProbabilityInfo *)a11(a12, v33);
              llvm::SplitIndirectBrCriticalEdges((llvm *)v33, 0, v34, v35, v36);
              v43[0] = (llvm::Function *)v33;
              v43[1] = (llvm::Function *)v40;
              uint64_t v44 = v35;
              uint64_t v45 = a13;
              uint64_t v46 = (llvm::GlobalObject *)v33;
              char v47 = a14;
              __int16 v48 = v49;
              operator new();
            }
          }
          unint64_t v37 = v50[0];
          if (v50[0])
          {
            do
            {
              size_t v38 = (void *)*v37;
              operator delete(v37);
              unint64_t v37 = v38;
            }
            while (v38);
          }
          __int16 v39 = v49[0];
          v49[0] = 0;
          if (v39) {
            operator delete(v39);
          }
          uint64_t v24 = 1;
          goto LABEL_32;
        }
        uint64_t v18 = "Function entry profiles are not yet supported for optimization";
      }
    }
    else
    {
      uint64_t v18 = "Not an IR level instrumentation profile";
    }
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    LOWORD(v62) = 259;
    LODWORD(v57.__r_.__value_.__r.__words[1]) = 19;
    v57.__r_.__value_.__s.__data_[12] = 0;
    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F26167A0;
    v57.__r_.__value_.__r.__words[2] = a2;
    uint64_t v58 = &v61;
    llvm::LLVMContext::diagnose(v16, (const llvm::DiagnosticInfo *)&v57);
  }
  uint64_t v24 = 0;
LABEL_32:
  (*(void (**)(void *))(*v17 + 8))(v17);
LABEL_33:
  long long v25 = v55;
  uint64_t v55 = 0;
  if (v56)
  {
    if (v25) {
LABEL_37:
    }
      (*(void (**)(void *))(*v25 + 8))(v25);
  }
  else if (v25)
  {
    goto LABEL_37;
  }
  return v24;
}

void llvm::setProfMetadata(uint64_t **a1, uint64_t a2, uint64_t *a3, uint64_t a4, unint64_t a5)
{
  int v6 = a3;
  v103[34] = *MEMORY[0x1E4F143B8];
  if (a5 >= 0xFFFFFFFF) {
    unint64_t v8 = a5 / 0xFFFFFFFF + 1;
  }
  else {
    unint64_t v8 = 1;
  }
  int v79 = *a1;
  uint64_t v80 = v82;
  uint64_t v81 = 0x400000000;
  unsigned int v9 = 0;
  if (a4)
  {
    uint64_t v11 = 8 * a4;
    uint64_t v12 = a3;
    do
    {
      if (v9 >= HIDWORD(v81)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v80 + v9) = *v12 / v8;
      unsigned int v9 = v81 + 1;
      LODWORD(v81) = v81 + 1;
      ++v12;
      v11 -= 8;
    }
    while (v11);
    long long v10 = (unsigned int *)v80;
  }
  else
  {
    long long v10 = (unsigned int *)v82;
  }
  llvm::misexpect::checkBackendInstrumentation((llvm::misexpect *)a2, v10, v9);
  int v13 = llvm::MDBuilder::createBranchWeights(&v79, (uint64_t)v80, v81);
  llvm::Instruction::setMetadata((llvm::Instruction *)a2, 2, v13);
  if (!byte_1EBCEB008) {
    goto LABEL_34;
  }
  if (*(unsigned char *)(a2 + 16) == 30 && (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 3)
  {
    char v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(a2 - 96);
    int v17 = *(unsigned __int8 *)(v16 + 16);
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    std::string __p = 0;
    if (v16 && v17 == 81)
    {
      int v94 = 0;
      LOBYTE(v98) = 0;
      *((void *)&v98 + 1) = 0;
      *((void *)&v99 + 1) = &__p;
      LODWORD(v99) = 0;
      char v93 = &unk_1F2646F30;
      long long v96 = 0uLL;
      int64_t v97 = 0;
      PredicateName = llvm::CmpInst::getPredicateName(*(_WORD *)(v16 + 18) & 0x3F);
      if (v19
        && (llvm::raw_ostream::write((llvm::raw_ostream *)&v93, PredicateName, v19), *((unsigned char **)&v96 + 1) != v97))
      {
        *v97++ = 95;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v93, "_", 1uLL);
      }
      llvm::Type::print(**(llvm::Type ***)(v16 - 64), (llvm::raw_ostream *)&v93, 1, 0);
      uint64_t v20 = *(void *)(v16 - 32);
      if (!v20 || *(unsigned char *)(v20 + 16) != 16) {
        goto LABEL_81;
      }
      uint64_t v21 = (llvm::APInt *)(v20 + 24);
      uint64_t v22 = *(unsigned int *)(v20 + 32);
      if (v22 > 0x40)
      {
        int v28 = 0;
        int64_t v29 = (unint64_t)(v22 + 63) >> 6;
        do
        {
          if (v29-- < 1) {
            break;
          }
          unint64_t v31 = *(void *)(*(void *)v21 + 8 * v29);
          v28 += __clz(v31);
        }
        while (!v31);
        int v32 = v22 | 0xFFFFFFC0;
        if ((v22 & 0x3F) == 0) {
          int v32 = 0;
        }
        int v33 = v28 + v32;
        if (v33 != v22)
        {
          if (v33 != v22 - 1)
          {
            if (llvm::APInt::countTrailingOnesSlowCase(v21) != v22)
            {
LABEL_26:
              uint64_t v24 = v97;
              if (*((void *)&v96 + 1) - (void)v97 <= 5uLL)
              {
                long long v25 = "_Const";
                size_t v26 = 6;
LABEL_80:
                llvm::raw_ostream::write((llvm::raw_ostream *)&v93, v25, v26);
LABEL_81:
                __int16 v49 = &v97[-v96];
                if (v97 != (unsigned char *)v96)
                {
                  int64_t v97 = (unsigned char *)v96;
                  llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v93, (const char *)v96);
                }
                char v93 = &unk_1F2646B98;
                if (v99 == 1 && (void)v96) {
                  MEMORY[0x1D25D9CB0](v96, 0x1000C8077774924, v49);
                }
                char v14 = HIBYTE(v78);
                uint64_t v15 = v77;
                goto LABEL_29;
              }
              *((_WORD *)v97 + 2) = 29811;
              *uint64_t v24 = 1852785503;
              std::string v61 = v97 + 6;
              goto LABEL_122;
            }
LABEL_78:
            __int16 v48 = v97;
            if (*((void *)&v96 + 1) - (void)v97 <= 8uLL)
            {
              long long v25 = "_MinusOne";
              size_t v26 = 9;
              goto LABEL_80;
            }
            v97[8] = 101;
            *__int16 v48 = *(void *)"_MinusOne";
            std::string v61 = v97 + 9;
            goto LABEL_122;
          }
LABEL_75:
          if (*((void *)&v96 + 1) - (void)v97 <= 3uLL)
          {
            long long v25 = "_One";
            size_t v26 = 4;
            goto LABEL_80;
          }
          *(_DWORD *)int64_t v97 = 1701728095;
          std::string v61 = v97 + 4;
          goto LABEL_122;
        }
      }
      else
      {
        uint64_t v23 = *(void *)v21;
        if (*(void *)v21)
        {
          if (v23 != 1)
          {
            if (v22 && v23 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v22) {
              goto LABEL_26;
            }
            goto LABEL_78;
          }
          goto LABEL_75;
        }
      }
      uint64_t v34 = v97;
      if (*((void *)&v96 + 1) - (void)v97 <= 4uLL)
      {
        long long v25 = "_Zero";
        size_t v26 = 5;
        goto LABEL_80;
      }
      v97[4] = 111;
      *uint64_t v34 = 1919244895;
      std::string v61 = v97 + 5;
LABEL_122:
      int64_t v97 = v61;
      goto LABEL_81;
    }
  }
  else
  {
    uint64_t v15 = 0;
    char v14 = 0;
    std::string __p = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
  }
LABEL_29:
  if (v14 >= 0) {
    uint64_t v15 = v14 & 0x7F;
  }
  if (!v15)
  {
    if ((v14 & 0x80) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v81)
  {
    unint64_t v27 = 0;
    uint64_t v35 = 4 * v81;
    uint64_t v36 = (unsigned int *)v80;
    do
    {
      unsigned int v37 = *v36++;
      v27 += v37;
      v35 -= 4;
    }
    while (v35);
  }
  else
  {
    unint64_t v27 = 0;
  }
  unint64_t v38 = 0;
  if (a4)
  {
    uint64_t v39 = 8 * a4;
    do
    {
      uint64_t v40 = *v6++;
      v38 += v40;
      v39 -= 8;
    }
    while (v39);
  }
  if (v27 >= 0xFFFFFFFF) {
    unint64_t v41 = v27 / 0xFFFFFFFF + 1;
  }
  else {
    unint64_t v41 = 1;
  }
  unint64_t v42 = v27 / v41;
  unint64_t v43 = *(unsigned int *)v80 / v41;
  if (v42 != 0x80000000) {
    unint64_t v43 = ((v43 << 31) | (v42 >> 1)) / v42;
  }
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  int v65 = 0;
  char v69 = 0;
  uint64_t v70 = 0;
  int v72 = &v73;
  int v71 = 0;
  uint64_t v64 = &unk_1F2646F30;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  LODWORD(v93) = v43;
  llvm::BranchProbability::print((llvm::BranchProbability *)&v93, (llvm::raw_ostream *)&v64);
  if ((unint64_t)(v67 - v68) > 0xF)
  {
    *(_OWORD *)uint64_t v68 = *(_OWORD *)" (total count : ";
    v68 += 16;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, " (total count : ", 0x10uLL);
  }
  sub_1CD098D14((llvm::raw_ostream *)&v64, v38, 0, 0, 0);
  if (v67 == v68)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, ")", 1uLL);
    uint64_t v44 = v68;
  }
  else
  {
    *uint64_t v68 = 41;
    uint64_t v44 = ++v68;
  }
  if (v44 != v66)
  {
    uint64_t v68 = v66;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v64, v66);
  }
  llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(v62, *(const llvm::Function **)(*(void *)(a2 + 40) + 56));
  uint64_t v45 = ***(void ***)v62[0];
  if (*(void *)(v45 + 128)
    || (*(unsigned int (**)(void))(**(void **)(v45 + 72) + 48))(*(void *)(v45 + 72)))
  {
    llvm::OptimizationRemark::OptimizationRemark((uint64_t)&v93, (uint64_t)"pgo-instrumentation", (uint64_t)"pgo-instrumentation", 19, a2);
    p_p = (const char *)&__p;
    if (v78 < 0) {
      p_p = (const char *)__p;
    }
    uint64_t v51 = HIBYTE(v78) & 0x7F;
    if (v78 < 0) {
      uint64_t v51 = v77;
    }
    unsigned int v83 = p_p;
    uint64_t v84 = v51;
    sub_1CC59ADEC((uint64_t *)&v101, (uint64_t)&v83);
    unsigned int v83 = " is true with probability : ";
    uint64_t v84 = 28;
    sub_1CC59ADEC((uint64_t *)&v101, (uint64_t)&v83);
    uint64_t v52 = (const char *)&v73;
    if (v75 < 0) {
      uint64_t v52 = (const char *)v73;
    }
    uint64_t v53 = HIBYTE(v75) & 0x7F;
    if (v75 < 0) {
      uint64_t v53 = v74;
    }
    unsigned int v83 = v52;
    uint64_t v84 = v53;
    sub_1CC59ADEC((uint64_t *)&v101, (uint64_t)&v83);
    LODWORD(v84) = v94;
    BYTE4(v84) = v95;
    long long v85 = v96;
    __int16 v86 = v97;
    long long v87 = v98;
    long long v88 = v99;
    unsigned int v83 = (const char *)&unk_1F2616800;
    uint64_t v89 = v100;
    uint64_t v90 = v92;
    uint64_t v91 = 0x400000000;
    unsigned int v54 = v102;
    if (v102)
    {
      sub_1CD494D68((uint64_t)&v90, (uint64_t)&v101);
      unsigned int v54 = v102;
    }
    v92[32] = v103[32];
    v92[33] = v103[33];
    unsigned int v83 = (const char *)&unk_1F2616570;
    char v93 = &unk_1F2616800;
    uint64_t v55 = (char *)v101;
    if (v54)
    {
      unint64_t v56 = (unint64_t)v54 << 6;
      do
      {
        std::string v57 = (void **)&v55[v56];
        if (v55[v56 - 17] < 0) {
          operator delete(*(v57 - 5));
        }
        if (*((char *)v57 - 41) < 0) {
          operator delete(*(v57 - 8));
        }
        v56 -= 64;
      }
      while (v56);
      uint64_t v55 = (char *)v101;
    }
    if (v55 != (char *)v103) {
      free(v55);
    }
    llvm::OptimizationRemarkEmitter::emit(v62, (llvm::DiagnosticInfoOptimizationBase *)&v83);
    unsigned int v83 = (const char *)&unk_1F2616800;
    uint64_t v58 = (char *)v90;
    if (v91)
    {
      unint64_t v59 = (unint64_t)v91 << 6;
      do
      {
        int v60 = (void **)&v58[v59];
        if (v58[v59 - 17] < 0) {
          operator delete(*(v60 - 5));
        }
        if (*((char *)v60 - 41) < 0) {
          operator delete(*(v60 - 8));
        }
        v59 -= 64;
      }
      while (v59);
      uint64_t v58 = (char *)v90;
    }
    if (v58 != (char *)v92) {
      free(v58);
    }
  }
  uint64_t v46 = v63;
  uint64_t v63 = 0;
  if (v46)
  {
    uint64_t v47 = *v46;
    *uint64_t v46 = 0;
    if (v47) {
      (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
    }
    MEMORY[0x1D25D9CE0](v46, 0x20C4093837F09);
  }
  uint64_t v64 = &unk_1F2646B98;
  if (v71 == 1 && v66) {
    MEMORY[0x1D25D9CB0](v66, 0x1000C8077774924);
  }
  if (SHIBYTE(v75) < 0) {
    operator delete(v73);
  }
  if (SHIBYTE(v78) < 0) {
LABEL_33:
  }
    operator delete(__p);
LABEL_34:
  if (v80 != v82) {
    free(v80);
  }
}

void llvm::setIrrLoopHeaderMetadata(uint64_t **this, llvm::Module *a2, llvm::Instruction *a3)
{
  uint64_t v5 = *this;
  uint64_t v4 = llvm::MDBuilder::createIrrLoopHeaderWeight(&v5, (unint64_t)a3);

  llvm::Instruction::setMetadata(a2, 24, v4);
}

void *sub_1CCB45448(void *result, void *a2)
{
  if (byte_1EBCEAC48)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 3;
    for (uint64_t i = (void *)result[4]; i != v4; uint64_t i = (void *)i[1])
    {
      int v6 = i - 7;
      if (!i) {
        int v6 = 0;
      }
      if (v6[6])
      {
        *(void *)&long long v13 = v6[6];
        *((void *)&v13 + 1) = v6;
        uint64_t result = sub_1CD6660A8(a2, &v13);
      }
    }
    for (uint64_t j = (void *)v3[2]; j != v3 + 1; uint64_t j = (void *)j[1])
    {
      unint64_t v8 = j - 7;
      if (!j) {
        unint64_t v8 = 0;
      }
      if (v8[6])
      {
        *(void *)&long long v13 = v8[6];
        *((void *)&v13 + 1) = v8;
        uint64_t result = sub_1CD6660A8(a2, &v13);
      }
    }
    unsigned int v9 = v3 + 5;
    for (uint64_t k = (void *)v3[6]; ; uint64_t k = (void *)k[1])
    {
      if (k == v9) {
        return result;
      }
      uint64_t result = k - 6;
      if (k) {
        uint64_t v11 = (unsigned __int8 *)(k - 6);
      }
      else {
        uint64_t v11 = 0;
      }
      int v12 = v11[16];
      if (k && v12 == 1)
      {
        uint64_t result = (void *)llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)v11);
        if (!result) {
          continue;
        }
      }
      else if (v12 == 2)
      {
        continue;
      }
      if (result[6])
      {
        *(void *)&long long v13 = result[6];
        *((void *)&v13 + 1) = v11;
        uint64_t result = sub_1CD6660A8(a2, &v13);
      }
    }
  }
  return result;
}

void sub_1CCB45570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 32;
  uint64_t v7 = a2;
  uint64_t v8 = 0;
  sub_1CCB09764((uint64_t)v9, a1 + 32, &v7);
  int v5 = v10;
  if (v8) {
    MEMORY[0x1D25D9CE0](v8, 0x1020C40EDED9539);
  }
  if (v5) {
    operator new();
  }
  uint64_t v7 = a3;
  uint64_t v8 = 0;
  sub_1CCB09764((uint64_t)v9, v4, &v7);
  int v6 = v10;
  if (v8) {
    MEMORY[0x1D25D9CE0](v8, 0x1020C40EDED9539);
  }
  if (v6) {
    operator new();
  }
  operator new();
}

uint64_t sub_1CCB457E0(uint64_t result, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    int v6 = (uint64_t *)result;
    if (a3 == 2)
    {
      uint64_t v7 = *(a2 - 1);
      uint64_t v8 = *(void *)result;
      if (*(void *)(v7 + 16) > *(void *)(*(void *)result + 16))
      {
        *(void *)uint64_t result = v7;
        *(a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((uint64_t *)result != a2)
      {
        uint64_t v15 = (uint64_t *)(result + 8);
        if ((uint64_t *)(result + 8) != a2)
        {
          uint64_t v16 = 0;
          int v17 = (uint64_t *)result;
          do
          {
            uint64_t v18 = *v17;
            int v17 = v15;
            uint64_t v19 = *v15;
            if (*(void *)(*v15 + 16) > *(void *)(v18 + 16))
            {
              uint64_t v20 = 0;
              *uint64_t v15 = 0;
              for (uint64_t i = v16; ; i -= 8)
              {
                uint64_t v22 = (uint64_t *)((char *)v6 + i);
                *uint64_t v22 = 0;
                v22[1] = v18;
                if (v20) {
                  MEMORY[0x1D25D9CE0](v20, 0x1060C40ACBCC463);
                }
                if (!i) {
                  break;
                }
                uint64_t v23 = (uint64_t *)((char *)v6 + i);
                uint64_t v18 = *(uint64_t *)((char *)v6 + i - 8);
                if (*(void *)(v19 + 16) <= *(void *)(v18 + 16)) {
                  goto LABEL_22;
                }
                uint64_t v20 = *v22;
              }
              uint64_t v23 = v6;
LABEL_22:
              uint64_t result = *v23;
              *uint64_t v23 = v19;
              if (result) {
                uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40ACBCC463);
              }
            }
            uint64_t v15 = v17 + 1;
            v16 += 8;
          }
          while (v17 + 1 != a2);
        }
      }
    }
    else
    {
      uint64_t v11 = a4;
      unint64_t v12 = a3 >> 1;
      uint64_t v13 = result + 8 * (a3 >> 1);
      unint64_t v14 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1CCB45B18(result, v13, v14, a4);
        uint64_t v24 = &v11[v12];
        uint64_t result = sub_1CCB45B18((uint64_t)&v6[a3 >> 1], (uint64_t)a2, a3 - (a3 >> 1), v24);
        long long v25 = &v11[a3];
        size_t v26 = v24;
        unint64_t v27 = v11;
        while (v26 != v25)
        {
          uint64_t v28 = *v26;
          uint64_t v29 = *v27;
          if (*(void *)(*v26 + 16) <= *(void *)(*v27 + 16))
          {
            *unint64_t v27 = 0;
            uint64_t result = *v6;
            *int v6 = v29;
            if (result) {
              uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40ACBCC463);
            }
            ++v27;
          }
          else
          {
            *size_t v26 = 0;
            uint64_t result = *v6;
            *int v6 = v28;
            if (result) {
              uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40ACBCC463);
            }
            ++v26;
          }
          ++v6;
          if (v27 == v24)
          {
            if (v26 != v25)
            {
              uint64_t v30 = 0;
              do
              {
                uint64_t v31 = v26[v30];
                v26[v30] = 0;
                uint64_t result = v6[v30];
                v6[v30] = v31;
                if (result) {
                  uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40ACBCC463);
                }
                ++v30;
              }
              while (&v26[v30] != v25);
            }
            goto LABEL_47;
          }
        }
        if (v27 != v24)
        {
          uint64_t v32 = 0;
          do
          {
            uint64_t v33 = v27[v32];
            v27[v32] = 0;
            uint64_t result = v6[v32];
            v6[v32] = v33;
            if (result) {
              uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40ACBCC463);
            }
            ++v32;
          }
          while (&v27[v32] != v24);
        }
LABEL_47:
        if (v11)
        {
          unint64_t v34 = a3;
          do
          {
            uint64_t result = *v11;
            *uint64_t v11 = 0;
            if (result) {
              uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40ACBCC463);
            }
            ++v11;
            --v34;
          }
          while (v34);
        }
      }
      else
      {
        sub_1CCB457E0(result, v13, v14, a4, a5);
        sub_1CCB457E0(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v11, a5);
        return sub_1CCB45D5C((uint64_t)v6, &v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v11, a5);
      }
    }
  }
  return result;
}

uint64_t sub_1CCB45B18(uint64_t result, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v6 = result;
    if (a3 == 1)
    {
LABEL_11:
      uint64_t v13 = *(void *)v6;
      *(void *)uint64_t v6 = 0;
      *uint64_t v4 = v13;
      return result;
    }
    if (a3 == 2)
    {
      uint64_t v8 = *(void *)(a2 - 8);
      unint64_t v9 = *(void *)(v8 + 16);
      unint64_t v10 = *(void *)(*(void *)result + 16);
      BOOL v11 = v9 > v10;
      if (v9 <= v10) {
        unint64_t v12 = (void *)result;
      }
      else {
        unint64_t v12 = (void *)(a2 - 8);
      }
      if (!v11) {
        uint64_t v8 = *(void *)result;
      }
      *unint64_t v12 = 0;
      *a4 = v8;
      uint64_t v4 = a4 + 1;
      if (!v11) {
        uint64_t v6 = a2 - 8;
      }
      goto LABEL_11;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v27 = result + 8 * (a3 >> 1);
      sub_1CCB457E0(result, v27, a3 >> 1, a4, a3 >> 1);
      uint64_t result = sub_1CCB457E0(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      unint64_t v28 = v6 + 8 * (a3 >> 1);
      while (v28 != a2)
      {
        uint64_t v29 = *(void *)v28;
        uint64_t v30 = *(void *)v6;
        if (*(void *)(*(void *)v28 + 16) <= *(void *)(*(void *)v6 + 16))
        {
          *(void *)uint64_t v6 = 0;
          v6 += 8;
          uint64_t v29 = v30;
        }
        else
        {
          *(void *)unint64_t v28 = 0;
          v28 += 8;
        }
        *v4++ = v29;
        if (v6 == v27)
        {
          if (v28 != a2)
          {
            unint64_t v31 = 0;
            do
            {
              uint64_t v32 = *(void *)(v28 + v31);
              *(void *)(v28 + v31) = 0;
              v4[v31 / 8] = v32;
              v31 += 8;
            }
            while (v28 + v31 != a2);
          }
          return result;
        }
      }
      if (v6 != v27)
      {
        unint64_t v33 = 0;
        do
        {
          uint64_t v34 = *(void *)(v6 + v33);
          *(void *)(v6 + v33) = 0;
          v4[v33 / 8] = v34;
          v33 += 8;
        }
        while (v6 + v33 != v27);
      }
    }
    else if (result != a2)
    {
      uint64_t v14 = *(void *)result;
      *(void *)uint64_t result = 0;
      uint64_t v15 = result + 8;
      *a4 = v14;
      if (result + 8 != a2)
      {
        uint64_t v16 = 0;
        int v17 = a4;
        do
        {
          uint64_t v18 = v17;
          uint64_t v20 = *v17++;
          uint64_t v19 = v20;
          uint64_t v21 = *(void *)v15;
          if (*(void *)(*(void *)v15 + 16) <= *(void *)(v20 + 16))
          {
            *(void *)uint64_t v15 = 0;
            *int v17 = v21;
          }
          else
          {
            *uint64_t v18 = 0;
            v18[1] = v19;
            uint64_t v22 = v4;
            if (v18 != v4)
            {
              uint64_t v23 = v16;
              while (1)
              {
                uint64_t v22 = (uint64_t *)((char *)v4 + v23);
                uint64_t v24 = *(uint64_t *)((char *)v4 + v23 - 8);
                if (*(void *)(*(void *)v15 + 16) <= *(void *)(v24 + 16)) {
                  break;
                }
                uint64_t v25 = *v22;
                *(v22 - 1) = 0;
                *uint64_t v22 = v24;
                if (v25) {
                  MEMORY[0x1D25D9CE0](v25, 0x1060C40ACBCC463);
                }
                v23 -= 8;
                if (!v23)
                {
                  uint64_t v22 = v4;
                  break;
                }
              }
            }
            uint64_t v26 = *(void *)v15;
            *(void *)uint64_t v15 = 0;
            uint64_t result = *v22;
            *uint64_t v22 = v26;
            if (result) {
              uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40ACBCC463);
            }
          }
          v15 += 8;
          v16 += 8;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1CCB45D5C(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  if (a5)
  {
    unint64_t v10 = (uint64_t *)result;
    while (a4 > a7 && a5 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v11 = 0;
      uint64_t v12 = *a2;
      uint64_t v13 = -a4;
      while (1)
      {
        uint64_t v14 = v10[v11];
        if (*(void *)(*a2 + 16) > *(void *)(v14 + 16)) {
          break;
        }
        ++v11;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      uint64_t v16 = -v13;
      uint64_t result = (uint64_t)&v10[v11];
      if (-v13 >= a5)
      {
        if (v13 == -1)
        {
          v10[v11] = v12;
          *a2 = v14;
          return result;
        }
        int v17 = a6;
        if (v13 > 0) {
          uint64_t v16 = 1 - v13;
        }
        uint64_t v27 = v16 >> 1;
        uint64_t v21 = &v10[(v16 >> 1) + v11];
        uint64_t v20 = a3;
        if (a3 != a2)
        {
          unint64_t v28 = a3 - a2;
          uint64_t v20 = a2;
          do
          {
            unint64_t v29 = v28 >> 1;
            uint64_t v30 = &v20[v28 >> 1];
            uint64_t v32 = *v30;
            unint64_t v31 = v30 + 1;
            v28 += ~(v28 >> 1);
            if (*(void *)(v32 + 16) > *(void *)(*v21 + 16)) {
              uint64_t v20 = v31;
            }
            else {
              unint64_t v28 = v29;
            }
          }
          while (v28);
        }
        uint64_t v19 = v20 - a2;
      }
      else
      {
        int v17 = a6;
        if (a5 >= 0) {
          uint64_t v18 = a5;
        }
        else {
          uint64_t v18 = a5 + 1;
        }
        uint64_t v19 = v18 >> 1;
        uint64_t v20 = &a2[v18 >> 1];
        uint64_t v21 = a2;
        if ((uint64_t *)result != a2)
        {
          unint64_t v22 = ((char *)a2 - (char *)v10 - v11 * 8) >> 3;
          uint64_t v21 = &v10[v11];
          do
          {
            unint64_t v23 = v22 >> 1;
            uint64_t v24 = &v21[v22 >> 1];
            uint64_t v26 = *v24;
            uint64_t v25 = v24 + 1;
            v22 += ~(v22 >> 1);
            if (*(void *)(*v20 + 16) > *(void *)(v26 + 16)) {
              unint64_t v22 = v23;
            }
            else {
              uint64_t v21 = v25;
            }
          }
          while (v22);
        }
        uint64_t v27 = ((char *)v21 - (char *)v10 - v11 * 8) >> 3;
      }
      unint64_t v33 = v20;
      if (v21 != a2)
      {
        unint64_t v33 = v21;
        if (a2 != v20)
        {
          uint64_t v34 = *v21;
          *uint64_t v21 = v12;
          unint64_t v33 = v21 + 1;
          for (uint64_t i = a2; ; *v33++ = *i)
          {
            *i++ = v34;
            if (i == v20) {
              break;
            }
            if (v33 == a2) {
              a2 = i;
            }
            uint64_t v34 = *v33;
          }
          if (v33 != a2)
          {
            uint64_t v36 = v33;
            unsigned int v37 = a2;
            while (1)
            {
              unint64_t v38 = v36;
              while (1)
              {
                uint64_t v39 = *v36;
                *v38++ = *v37;
                *v37++ = v39;
                if (v37 != v20) {
                  break;
                }
                uint64_t v36 = v38;
                unsigned int v37 = a2;
                if (v38 == a2) {
                  goto LABEL_48;
                }
              }
              if (v38 == a2) {
                a2 = v37;
              }
              ++v36;
            }
          }
        }
      }
LABEL_48:
      a4 = -(v27 + v13);
      uint64_t v40 = a5 - v19;
      if (v27 + v19 >= a5 - (v27 + v19) - v13)
      {
        uint64_t v46 = &v10[v11];
        uint64_t v47 = v17;
        uint64_t v40 = v19;
        uint64_t v44 = a7;
        uint64_t result = sub_1CCB45D5C(v33, v20, a3, a4, a5 - v19, v17);
        uint64_t v45 = v46;
        uint64_t v20 = v21;
        a6 = v47;
        a4 = v27;
        a3 = v33;
      }
      else
      {
        unint64_t v41 = &v10[v11];
        unint64_t v42 = v21;
        unint64_t v43 = a3;
        a6 = v17;
        uint64_t v44 = a7;
        uint64_t result = sub_1CCB45D5C(v41, v42, v33, v27, v19, v17);
        a3 = v43;
        uint64_t v45 = v33;
      }
      a5 = v40;
      unint64_t v10 = v45;
      a2 = v20;
      a7 = v44;
      if (!v40) {
        return result;
      }
    }
    if (a4 > a5)
    {
      if (a2 == a3) {
        return result;
      }
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      do
      {
        uint64_t v50 = a2[v48];
        a2[v48] = 0;
        a6[v48] = v50;
        ++v49;
        ++v48;
      }
      while (&a2[v48] != a3);
      if (!(v48 * 8)) {
        goto LABEL_94;
      }
      uint64_t v51 = &a6[v48];
      uint64_t v52 = a3 - 1;
      while (1)
      {
        if (a2 == v10)
        {
          if (v51 != a6)
          {
            uint64_t v65 = 0;
            do
            {
              uint64_t v66 = v51[v65 - 1];
              v51[v65 - 1] = 0;
              uint64_t result = v52[v65];
              v52[v65] = v66;
              if (result) {
                uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40ACBCC463);
              }
              --v65;
            }
            while (&v51[v65] != a6);
          }
          goto LABEL_94;
        }
        unsigned int v54 = a2 - 1;
        uint64_t v53 = *(a2 - 1);
        uint64_t v55 = *(v51 - 1);
        if (*(void *)(v55 + 16) > *(void *)(v53 + 16)) {
          break;
        }
        *(v51 - 1) = 0;
        uint64_t result = *v52;
        uint64_t *v52 = v55;
        unsigned int v54 = a2;
        --v51;
        if (result) {
          goto LABEL_64;
        }
LABEL_65:
        --v52;
        a2 = v54;
        if (v51 == a6) {
          goto LABEL_94;
        }
      }
      uint64_t *v54 = 0;
      uint64_t result = *v52;
      uint64_t *v52 = v53;
      if (!result) {
        goto LABEL_65;
      }
LABEL_64:
      uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40ACBCC463);
      goto LABEL_65;
    }
    if (v10 != a2)
    {
      uint64_t v56 = 0;
      uint64_t v49 = 0;
      do
      {
        uint64_t v57 = v10[v56];
        v10[v56] = 0;
        a6[v56] = v57;
        ++v49;
        ++v56;
      }
      while (&v10[v56] != a2);
      if (!(v56 * 8)) {
        goto LABEL_94;
      }
      uint64_t v58 = &a6[v56];
      uint64_t v59 = (uint64_t)&a6[v56 - 1];
      int v60 = a6;
      while (a2 != a3)
      {
        uint64_t v61 = *a2;
        uint64_t v62 = *v60;
        if (*(void *)(*a2 + 16) <= *(void *)(*v60 + 16))
        {
          uint64_t *v60 = 0;
          uint64_t result = *v10;
          *unint64_t v10 = v62;
          if (result)
          {
            uint64_t v64 = a3;
            uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40ACBCC463);
            a3 = v64;
          }
          ++v60;
        }
        else
        {
          *a2 = 0;
          uint64_t result = *v10;
          *unint64_t v10 = v61;
          if (result)
          {
            uint64_t v63 = a3;
            uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40ACBCC463);
            a3 = v63;
          }
          ++a2;
        }
        ++v10;
        if (v58 == v60) {
          goto LABEL_94;
        }
      }
      if (v58 != v60)
      {
        uint64_t v67 = 0;
        do
        {
          uint64_t v68 = v60[v67];
          v60[v67] = 0;
          uint64_t result = v10[v67];
          v10[v67] = v68;
          if (result) {
            uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40ACBCC463);
          }
          ++v67;
        }
        while ((uint64_t *)v59 != &v60[v67 - 1]);
      }
LABEL_94:
      if (a6)
      {
        do
        {
          uint64_t result = *a6;
          *a6 = 0;
          if (result) {
            uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40ACBCC463);
          }
          ++a6;
          --v49;
        }
        while (v49);
      }
    }
  }
  return result;
}

void sub_1CCB4628C(uint64_t a1, uint64_t a2)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a2 + 80);
  uint64_t v63 = a2 + 72;
  if (v2 != a2 + 72)
  {
    uint64_t v4 = &unk_1EBCEB000;
    while (1)
    {
      uint64_t v5 = v2 - 24;
      BOOL v11 = v2 == 0;
      uint64_t v2 = *(void *)(v2 + 8);
      uint64_t v6 = v11 ? 0 : v5;
      uint64_t v7 = v6 + 40;
      uint64_t v8 = *(void *)(v6 + 48);
      if (v8 != v6 + 40) {
        break;
      }
LABEL_97:
      if (v2 == v63) {
        return;
      }
    }
    uint64_t v64 = v2;
    while (1)
    {
      uint64_t v9 = v8 - 24;
      BOOL v11 = v8 == 0;
      uint64_t v8 = *(void *)(v8 + 8);
      if (v11) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = v9;
      }
      BOOL v11 = *(unsigned char *)(v10 + 16) != 85 || byte_1EBCEAE88 == 0;
      if (!v11 && (*(_DWORD *)(**(void **)(v10 - 96) + 8) & 0xFE) != 0x12)
      {
        int v12 = *(_DWORD *)(a1 + 12);
        if (v12 == 2)
        {
          uint64_t v22 = *(void *)(a1 + 48);
          unint64_t v23 = *(_DWORD **)(a1 + 16);
          uint64_t v24 = *v23;
          uint64_t v68 = *(void **)(*(void *)(v22 + 288) + 8 * v24);
          *unint64_t v23 = v24 + 1;
          uint64_t v25 = *(void *)(v10 + 40);
          v84[0] = 0;
          if (sub_1CBB0BF40(*(void *)(v22 + 216), *(_DWORD *)(v22 + 232), v25, v84))
          {
            uint64_t v26 = v84[0];
            uint64_t v27 = *(void *)(v22 + 216);
            uint64_t v28 = *(unsigned int *)(v22 + 232);
          }
          else
          {
            uint64_t v27 = *(void *)(v22 + 216);
            uint64_t v28 = *(unsigned int *)(v22 + 232);
            uint64_t v26 = (const char *)(v27 + 16 * v28);
          }
          if (v26 == (const char *)(v27 + 16 * v28))
          {
            unint64_t v29 = 0;
          }
          else
          {
            unint64_t v29 = *((void *)v26 + 1);
            if (v29) {
              unint64_t v29 = *(void *)(v29 + 16);
            }
          }
          BOOL v30 = v29 >= (unint64_t)v68;
          unint64_t v31 = v29 - (void)v68;
          if (!v30) {
            unint64_t v31 = 0;
          }
          uint64_t v69 = v31;
          if ((unint64_t)v68 <= v31) {
            unint64_t v32 = v31;
          }
          else {
            unint64_t v32 = (unint64_t)v68;
          }
          if (v32) {
            llvm::setProfMetadata(*(uint64_t ***)(*(void *)a1 + 40), v10, (uint64_t *)&v68, 2, v32);
          }
          goto LABEL_67;
        }
        if (v12 == 1)
        {
          if (!v4[392])
          {
            uint64_t v13 = 0;
            uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 40);
            uint64_t v15 = **(void **)v10;
            uint64_t v68 = v70;
            uint64_t v69 = 0x200000000;
            uint64_t v73 = v15;
            uint64_t v74 = &v82;
            uint64_t v75 = &v83;
            uint64_t v76 = 0;
            int v77 = 0;
            __int16 v78 = 512;
            char v79 = 7;
            uint64_t v71 = 0;
            uint64_t v72 = 0;
            uint64_t v80 = 0;
            uint64_t v81 = 0;
            uint64_t v82 = &unk_1F2616E88;
            unsigned int v83 = &unk_1F2617008;
            uint64_t v71 = *(void *)(v10 + 40);
            uint64_t v72 = v10 + 24;
            uint64_t v16 = *(unsigned __int8 **)(v10 + 48);
            uint64_t v65 = v16;
            if (v16)
            {
              llvm::MetadataTracking::track((uint64_t)&v65, v16, 2);
              uint64_t v13 = (uint64_t)v65;
            }
            sub_1CB8461A4((uint64_t)&v68, 0, v13);
            if (!v65) {
              goto LABEL_22;
            }
            int v57 = *v65;
            if ((v57 - 4) > 0x1E)
            {
              if ((v57 - 3) >= 0xFFFFFFFE) {
                int v60 = v65;
              }
              else {
                int v60 = 0;
              }
              if ((v57 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v59 = (unint64_t)(v60 + 8);
                goto LABEL_80;
              }
              if (v57 == 3) {
                *((void *)v65 + 1) = 0;
              }
            }
            else if ((v65[1] & 0x7F) == 2 || *((_DWORD *)v65 + 3))
            {
              uint64_t v58 = *((void *)v65 + 2);
              if ((v58 & 4) != 0)
              {
                unint64_t v59 = v58 & 0xFFFFFFFFFFFFFFF8;
                if (v59)
                {
LABEL_80:
                  v84[0] = (const char *)&v65;
                  sub_1CC5FA668(v59 + 16, v84);
                }
              }
            }
LABEL_22:
            uint64_t v17 = *(void *)v73 + 1984;
            uint64_t v18 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v73 + 1912), 0);
            uint64_t v19 = *(unsigned __int8 **)(v10 - 96);
            __int16 v67 = 257;
            if (*(void *)v19 != v17)
            {
              if (v19[16] <= 0x14u)
              {
                uint64_t v33 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v74 + 28))(v74, 39, v19, v17);
                uint64_t v19 = (unsigned __int8 *)v33;
                if (v33)
                {
                  if (*(unsigned __int8 *)(v33 + 16) >= 0x1Cu)
                  {
                    (*((void (**)(void **, uint64_t, unsigned __int8 **, uint64_t, uint64_t))*v75 + 2))(v75, v33, &v65, v71, v72);
                    if (v69)
                    {
                      uint64_t v61 = (llvm::MDNode **)v68;
                      uint64_t v62 = (llvm::MDNode **)((char *)v68 + 16 * v69);
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v19, *(_DWORD *)v61, v61[1]);
                        v61 += 2;
                      }
                      while (v61 != v62);
                    }
                  }
                }
              }
              else
              {
                LOWORD(v85) = 257;
                uint64_t v19 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v19, v17, v84, 0);
                (*((void (**)(void **, unsigned __int8 *, unsigned __int8 **, uint64_t, uint64_t))*v75 + 2))(v75, v19, &v65, v71, v72);
                if (v69)
                {
                  uint64_t v20 = (llvm::MDNode **)v68;
                  uint64_t v21 = (llvm::MDNode **)((char *)v68 + 16 * v69);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v19, *(_DWORD *)v20, v20[1]);
                    v20 += 2;
                  }
                  while (v20 != v21);
                }
              }
            }
            llvm::Intrinsic::getType(*v14, 161, 0, 0);
            Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v14, 161, 0, 0);
            llvm::Module::getOrInsertFunction((uint64_t)v14, "llvm.instrprof.increment.step", (const char *)0x1D, Type, 0);
            unsigned int v37 = (uint64_t **)v35;
            if (v35) {
              unint64_t v38 = *(uint64_t ***)(v35 + 24);
            }
            else {
              unint64_t v38 = 0;
            }
            uint64_t v39 = *(llvm::detail::IEEEFloat **)(a1 + 32);
            if (*(llvm::Constant **)v39 != v18) {
              uint64_t v39 = sub_1CC56C0C0((llvm *)0x31, v39, v18, 0);
            }
            v84[0] = (const char *)v39;
            uint64_t v40 = *(void *)(a1 + 40);
            unint64_t v41 = *(llvm::ConstantInt **)(*(void *)v73 + 1984);
            unsigned int v42 = *(_DWORD *)(*(void *)v73 + 1992);
            unsigned int v66 = v42 >> 8;
            if (v42 >> 8 > 0x40) {
              operator new[]();
            }
            if (v42 <= 0xFF) {
              unint64_t v43 = 0;
            }
            else {
              unint64_t v43 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v42) + 63);
            }
            uint64_t v65 = (unsigned __int8 *)(v43 & v40);
            uint64_t v45 = (const char *)llvm::ConstantInt::get(v41, (llvm::LLVMContext *)&v65, v36);
            if (v66 >= 0x41 && v65) {
              MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
            }
            v84[1] = v45;
            uint64_t v46 = *(unsigned int *)(a1 + 24);
            uint64_t v47 = *(llvm::ConstantInt **)(*(void *)v73 + 1960);
            unsigned int v48 = *(_DWORD *)(*(void *)v73 + 1968);
            unsigned int v66 = v48 >> 8;
            if (v48 >> 8 > 0x40) {
              operator new[]();
            }
            if (v48 <= 0xFF) {
              unint64_t v49 = 0;
            }
            else {
              unint64_t v49 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v48) + 63);
            }
            uint64_t v65 = (unsigned __int8 *)(v49 & v46);
            uint64_t v51 = (const char *)llvm::ConstantInt::get(v47, (llvm::LLVMContext *)&v65, v44);
            if (v66 >= 0x41 && v65) {
              MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
            }
            v84[2] = v51;
            uint64_t v52 = **(unsigned int **)(a1 + 16);
            uint64_t v53 = *(llvm::ConstantInt **)(*(void *)v73 + 1960);
            unsigned int v54 = *(_DWORD *)(*(void *)v73 + 1968);
            unsigned int v66 = v54 >> 8;
            if (v54 >> 8 > 0x40) {
              operator new[]();
            }
            if (v54 <= 0xFF) {
              unint64_t v55 = 0;
            }
            else {
              unint64_t v55 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v54) + 63);
            }
            uint64_t v4 = (unsigned char *)&unk_1EBCEB000;
            uint64_t v65 = (unsigned __int8 *)(v55 & v52);
            uint64_t v56 = (const char *)llvm::ConstantInt::get(v53, (llvm::LLVMContext *)&v65, v50);
            if (v66 >= 0x41 && v65) {
              MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
            }
            v84[3] = v56;
            long long v85 = v19;
            __int16 v67 = 257;
            sub_1CB845BAC((uint64_t *)&v68, v38, v37, (uint64_t *)v84, 5, (uint64_t)&v65, 0);
            ++**(_DWORD **)(a1 + 16);
            if (v68 != v70) {
              free(v68);
            }
            uint64_t v2 = v64;
          }
        }
        else
        {
          ++*(_DWORD *)(a1 + 8);
        }
      }
LABEL_67:
      if (v8 == v7) {
        goto LABEL_97;
      }
    }
  }
}

uint64_t sub_1CCB46B04(llvm *a1, void *a2, const llvm::Module *a3)
{
  uint64_t v3 = byte_1EBCEAC48;
  if (byte_1EBCEAC48)
  {
    if (llvm::canRenameComdatFunc(a1, (const llvm::Function *)1, a3))
    {
      uint64_t v11 = *((void *)a1 + 6);
      uint64_t v7 = sub_1CD665C24(a2, &v11);
      if (!v7) {
        return 1;
      }
      uint64_t v8 = v7;
      do
        uint64_t v8 = (void *)*v8;
      while (v8 && v8[2] == v11);
      if (v8 == v7)
      {
        return 1;
      }
      else
      {
        do
        {
          uint64_t v9 = (llvm *)v7[3];
          BOOL v10 = v9 == a1 && *((unsigned char *)v9 + 16) == 0;
          uint64_t v3 = v10;
          if (!v10) {
            break;
          }
          uint64_t v7 = (void *)*v7;
        }
        while (v7 != v8);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_1CCB46BBC(uint64_t a1, uint64_t *a2, llvm::Twine *this, llvm::Twine *a4, uint64_t a5)
{
  uint64_t v5 = a5;
  if (*(char *)(a5 + 23) < 0) {
    uint64_t v9 = *(void *)(a5 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(a5 + 23);
  }
  int v136 = 0;
  if (!v9)
  {
    llvm::Twine::str(this, v153);
    __int16 v135 = 260;
    uint64_t v133 = (uint64_t)v153;
    llvm::createGraphFilename((llvm *)&v133, (const llvm::Twine *)&v136, (uint64_t)&__dst);
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    *(_OWORD *)uint64_t v5 = __dst;
    *(void *)(v5 + 16) = v144;
    HIBYTE(v144) = 0;
    LOBYTE(__dst) = 0;
    if (v155 < 0) {
      operator delete(*(void **)v153);
    }
LABEL_31:
    uint64_t v27 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v133, v136, 1, 0, 0);
    if (v136 == -1)
    {
      uint64_t v28 = (llvm::raw_ostream *)llvm::errs(v27);
      uint64_t v29 = *((void *)v28 + 4);
      if ((unint64_t)(*((void *)v28 + 3) - v29) > 0x13)
      {
        *(_DWORD *)(v29 + 16) = 656434540;
        *(_OWORD *)uint64_t v29 = *(_OWORD *)"error opening file '";
        *((void *)v28 + 4) += 20;
      }
      else
      {
        uint64_t v28 = llvm::raw_ostream::write(v28, "error opening file '", 0x14uLL);
      }
      char v30 = *(unsigned char *)(v5 + 23);
      BOOL v31 = v30 < 0;
      if (v30 >= 0) {
        unint64_t v32 = (const char *)v5;
      }
      else {
        unint64_t v32 = *(const char **)v5;
      }
      size_t v33 = v30 & 0x7F;
      if (v31) {
        size_t v34 = *(void *)(v5 + 8);
      }
      else {
        size_t v34 = v33;
      }
      uint64_t v35 = llvm::raw_ostream::write(v28, v32, v34);
      uint64_t v36 = (void *)*((void *)v35 + 4);
      if (*((void *)v35 + 3) - (void)v36 > 0xEuLL)
      {
        qmemcpy(v36, "' for writing!\n", 15);
        *((void *)v35 + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(v35, "' for writing!\n", 0xFuLL);
      }
      *(unsigned char *)(a1 + 23) = 0;
      *(unsigned char *)a1 = 0;
LABEL_259:
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v133);
      return;
    }
    uint64_t v140 = (llvm::raw_ostream *)&v133;
    uint64_t v141 = a2;
    __int16 v142 = 0;
    llvm::Twine::str(a4, &__p);
    unsigned int v37 = *(uint64_t ****)*a2;
    if ((*((unsigned char *)v37 + 23) & 0x10) == 0)
    {
      size_t v47 = 0;
      HIBYTE(v144) = 0;
      p_dst = &__dst;
      goto LABEL_59;
    }
    uint64_t v38 = ***v37;
    uint64_t v39 = *(void *)(v38 + 152);
    uint64_t v40 = *(unsigned int *)(v38 + 168);
    if (v40)
    {
      LODWORD(v41) = (v40 - 1) & ((v37 >> 4) ^ (v37 >> 9));
      unsigned int v42 = (uint64_t ****)(v39 + 16 * v41);
      unint64_t v43 = *v42;
      if (*v42 == v37) {
        goto LABEL_51;
      }
      int v44 = 1;
      while (v43 != (uint64_t ***)-4096)
      {
        int v45 = v41 + v44++;
        uint64_t v41 = v45 & (v40 - 1);
        unint64_t v43 = *(uint64_t ****)(v39 + 16 * v41);
        if (v43 == v37)
        {
          unsigned int v42 = (uint64_t ****)(v39 + 16 * v41);
          goto LABEL_51;
        }
      }
    }
    unsigned int v42 = (uint64_t ****)(v39 + 16 * v40);
LABEL_51:
    uint64_t v46 = (unint64_t *)v42[1];
    unint64_t v49 = *v46;
    unsigned int v48 = v46 + 2;
    size_t v47 = v49;
    if (v49 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v47 >= 0x17)
    {
      uint64_t v51 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v47 | 7) != 0x17) {
        uint64_t v51 = v47 | 7;
      }
      uint64_t v52 = v51 + 1;
      p_dst = (long long *)operator new(v51 + 1);
      *((void *)&__dst + 1) = v47;
      int64_t v144 = v52 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v144) = v47;
      p_dst = &__dst;
      if (!v47)
      {
LABEL_59:
        *((unsigned char *)p_dst + v47) = 0;
        uint64_t v53 = v139 & 0x7F;
        if (v139 < 0) {
          uint64_t v53 = v138;
        }
        if (v53)
        {
          unint64_t v55 = v140;
          uint64_t v58 = *((void *)v140 + 4);
          if ((unint64_t)(*((void *)v140 + 3) - v58) > 8)
          {
            *(unsigned char *)(v58 + 8) = 34;
            *(void *)uint64_t v58 = *(void *)"digraph \"";
            *((void *)v55 + 4) += 9;
          }
          else
          {
            llvm::raw_ostream::write(v140, "digraph \"", 9uLL);
          }
          p_p = (char *)&__p;
        }
        else
        {
          uint64_t v54 = *((void *)&__dst + 1);
          if (v144 >= 0) {
            uint64_t v54 = HIBYTE(v144) & 0x7F;
          }
          unint64_t v55 = v140;
          uint64_t v56 = *((void *)v140 + 4);
          unint64_t v57 = *((void *)v140 + 3) - v56;
          if (!v54)
          {
            if (v57 > 0x11)
            {
              *(_WORD *)(v56 + 16) = 2683;
              *(_OWORD *)uint64_t v56 = *(_OWORD *)"digraph unnamed {\n";
              *((void *)v55 + 4) += 18;
            }
            else
            {
              llvm::raw_ostream::write(v140, "digraph unnamed {\n", 0x12uLL);
            }
            goto LABEL_83;
          }
          if (v57 > 8)
          {
            *(unsigned char *)(v56 + 8) = 34;
            *(void *)uint64_t v56 = *(void *)"digraph \"";
            *((void *)v55 + 4) += 9;
          }
          else
          {
            llvm::raw_ostream::write(v140, "digraph \"", 9uLL);
          }
          p_p = (char *)&__dst;
        }
        llvm::DOT::EscapeString(p_p, (uint64_t)v153);
        if (v155 >= 0) {
          int v60 = v153;
        }
        else {
          int v60 = *(char **)v153;
        }
        if (v155 >= 0) {
          size_t v61 = v155 & 0x7F;
        }
        else {
          size_t v61 = v154;
        }
        llvm::raw_ostream::write(v55, v60, v61);
        uint64_t v62 = (_DWORD *)*((void *)v55 + 4);
        if (*((void *)v55 + 3) - (void)v62 > 3uLL)
        {
          _DWORD *v62 = 175841314;
          *((void *)v55 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v55, "\" {\n", 4uLL);
        }
        if (v155 < 0) {
          operator delete(*(void **)v153);
        }
LABEL_83:
        uint64_t v63 = v139 & 0x7F;
        if (v139 < 0) {
          uint64_t v63 = v138;
        }
        if (v63)
        {
          __int16 v67 = (void *)*((void *)v55 + 4);
          if (*((void *)v55 + 3) - (void)v67 > 7uLL)
          {
            void *v67 = 0x223D6C6562616C09;
            *((void *)v55 + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(v55, "\tlabel=\"", 8uLL);
          }
          unsigned int v66 = (char *)&__p;
        }
        else
        {
          uint64_t v64 = HIBYTE(v144) & 0x7F;
          if (v144 < 0) {
            uint64_t v64 = *((void *)&__dst + 1);
          }
          if (!v64) {
            goto LABEL_105;
          }
          uint64_t v65 = (void *)*((void *)v55 + 4);
          if (*((void *)v55 + 3) - (void)v65 > 7uLL)
          {
            *uint64_t v65 = 0x223D6C6562616C09;
            *((void *)v55 + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(v55, "\tlabel=\"", 8uLL);
          }
          unsigned int v66 = (char *)&__dst;
        }
        llvm::DOT::EscapeString(v66, (uint64_t)v153);
        if (v155 >= 0) {
          uint64_t v68 = v153;
        }
        else {
          uint64_t v68 = *(char **)v153;
        }
        if (v155 >= 0) {
          size_t v69 = v155 & 0x7F;
        }
        else {
          size_t v69 = v154;
        }
        llvm::raw_ostream::write(v55, v68, v69);
        uint64_t v70 = *((void *)v55 + 4);
        if ((unint64_t)(*((void *)v55 + 3) - v70) > 2)
        {
          *(unsigned char *)(v70 + 2) = 10;
          *(_WORD *)uint64_t v70 = 15138;
          *((void *)v55 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v55, "\";\n", 3uLL);
        }
        if (v155 < 0) {
          operator delete(*(void **)v153);
        }
LABEL_105:
        char v155 = 0;
        v153[0] = 0;
        uint64_t v71 = llvm::raw_ostream::write(v55, v153, 0);
        if (v155 < 0) {
          operator delete(*(void **)v153);
        }
        uint64_t v72 = (unsigned char *)*((void *)v55 + 4);
        if (*((unsigned char **)v55 + 3) == v72)
        {
          uint64_t v71 = llvm::raw_ostream::write(v55, "\n", 1uLL);
        }
        else
        {
          *uint64_t v72 = 10;
          ++*((void *)v55 + 4);
        }
        if (SHIBYTE(v144) < 0) {
          operator delete((void *)__dst);
        }
        uint64_t v73 = *(void *)*v141;
        uint64_t v74 = v73 + 72;
        uint64_t v75 = *(void *)(v73 + 80);
        if (v75 == v73 + 72)
        {
LABEL_252:
          uint64_t v129 = (_WORD *)*((void *)v55 + 4);
          if (*((void *)v55 + 3) - (void)v129 > 1uLL)
          {
            *uint64_t v129 = 2685;
            *((void *)v55 + 4) += 2;
          }
          else
          {
            uint64_t v71 = llvm::raw_ostream::write(v55, "}\n", 2uLL);
          }
          if (v139 < 0) {
            operator delete(__p);
          }
          uint64_t v130 = (llvm::raw_ostream *)llvm::errs(v71);
          int v131 = (void *)*((void *)v130 + 4);
          if (*((void *)v130 + 3) - (void)v131 > 7uLL)
          {
            *int v131 = 0xA202E656E6F6420;
            *((void *)v130 + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(v130, " done. \n", 8uLL);
          }
          *(_OWORD *)a1 = *(_OWORD *)v5;
          *(void *)(a1 + 16) = *(void *)(v5 + 16);
          *(void *)(v5 + 8) = 0;
          *(void *)(v5 + 16) = 0;
          *(void *)uint64_t v5 = 0;
          goto LABEL_259;
        }
        uint64_t v132 = v5;
        while (1)
        {
          if (v75) {
            unint64_t v76 = v75 - 24;
          }
          else {
            unint64_t v76 = 0;
          }
          char v155 = 0;
          v153[0] = 0;
          int v77 = v140;
          uint64_t v78 = *((void *)v140 + 4);
          if ((unint64_t)(*((void *)v140 + 3) - v78) > 4)
          {
            *(unsigned char *)(v78 + 4) = 101;
            *(_DWORD *)uint64_t v78 = 1685016073;
            *((void *)v77 + 4) += 5;
          }
          else
          {
            llvm::raw_ostream::write(v140, "\tNode", 5uLL);
          }
          llvm::write_hex(v77, v76, 3, 0, 0);
          char v79 = (void *)*((void *)v77 + 4);
          if (*((void *)v77 + 3) - (void)v79 > 7uLL)
          {
            *char v79 = 0x3D65706168735B20;
            uint64_t v80 = *((void *)v77 + 4) + 8;
            *((void *)v77 + 4) = v80;
          }
          else
          {
            llvm::raw_ostream::write(v77, " [shape=", 8uLL);
            uint64_t v80 = *((void *)v77 + 4);
          }
          int v81 = v142;
          unint64_t v82 = *((void *)v77 + 3) - v80;
          if ((_BYTE)v142)
          {
            if (v82 <= 4)
            {
              unsigned int v83 = v77;
              uint64_t v84 = "none,";
              size_t v85 = 5;
LABEL_125:
              llvm::raw_ostream::write(v83, v84, v85);
              goto LABEL_126;
            }
            *(unsigned char *)(v80 + 4) = 44;
            *(_DWORD *)uint64_t v80 = 1701736302;
            uint64_t v126 = *((void *)v77 + 4) + 5;
          }
          else
          {
            if (v82 <= 6)
            {
              unsigned int v83 = v77;
              uint64_t v84 = "record,";
              size_t v85 = 7;
              goto LABEL_125;
            }
            *(_DWORD *)(v80 + 3) = 744780399;
            *(_DWORD *)uint64_t v80 = 1868785010;
            uint64_t v126 = *((void *)v77 + 4) + 7;
          }
          *((void *)v77 + 4) = v126;
LABEL_126:
          if (v155 >= 0) {
            size_t v86 = v155 & 0x7F;
          }
          else {
            size_t v86 = v154;
          }
          if (v86)
          {
            if (v155 >= 0) {
              long long v87 = v153;
            }
            else {
              long long v87 = *(char **)v153;
            }
            llvm::raw_ostream::write(v77, v87, v86);
            long long v88 = (unsigned char *)*((void *)v77 + 4);
            if (*((unsigned char **)v77 + 3) == v88)
            {
              llvm::raw_ostream::write(v77, ",", 1uLL);
            }
            else
            {
              *long long v88 = 44;
              ++*((void *)v77 + 4);
            }
          }
          uint64_t v89 = *((void *)v77 + 4);
          if ((unint64_t)(*((void *)v77 + 3) - v89) > 5)
          {
            *(_WORD *)(v89 + 4) = 15724;
            *(_DWORD *)uint64_t v89 = 1700946284;
            *((void *)v77 + 4) += 6;
            if (v81)
            {
LABEL_137:
              uint64_t v90 = *(void *)(v76 + 40);
              if (v90 == v76 + 40)
              {
LABEL_167:
                unsigned int v100 = 0;
                BOOL v101 = 0;
              }
              else
              {
                if (v90) {
                  uint64_t v91 = v90 - 24;
                }
                else {
                  uint64_t v91 = 0;
                }
                int v92 = *(unsigned __int8 *)(v91 + 16);
                int v93 = v92 - 29;
                if (v92 != 30)
                {
                  int v99 = 2;
                  unsigned int v100 = 0;
                  BOOL v101 = 0;
                  switch(v93)
                  {
                    case 0:
                    case 5:
                    case 6:
                      goto LABEL_168;
                    case 1:
LABEL_279:
                      __break(1u);
                      JUMPOUT(0x1CCB47D30);
                    case 2:
                      int v99 = (*(_DWORD *)(v91 + 20) >> 1) & 0x3FFFFFF;
                      goto LABEL_166;
                    case 3:
                    case 9:
                      int v99 = (*(_DWORD *)(v91 + 20) & 0x7FFFFFF) - 1;
                      goto LABEL_166;
                    case 4:
                      goto LABEL_146;
                    case 7:
                      int v99 = *(_WORD *)(v91 + 18) & 1;
                      goto LABEL_166;
                    case 8:
                      int v99 = 1;
                      goto LABEL_146;
                    case 10:
                      int v99 = *(_DWORD *)(v91 + 80) + 1;
LABEL_166:
                      if (!v99) {
                        goto LABEL_167;
                      }
                      goto LABEL_146;
                    default:
                      goto LABEL_167;
                  }
                }
                if ((*(_DWORD *)(v91 + 20) & 0x7FFFFFF) == 3) {
                  int v99 = 2;
                }
                else {
                  int v99 = 1;
                }
LABEL_146:
                int v94 = v99 - 1;
                if ((v99 - 1) >= 0x3F) {
                  int v94 = 63;
                }
                unsigned int v100 = v94 + 1;
                BOOL v101 = v99 != v100;
              }
LABEL_168:
              if (v100 <= 1) {
                int v102 = 1;
              }
              else {
                int v102 = v100;
              }
              uint64_t v103 = (void *)*((void *)v77 + 4);
              if (*((void *)v77 + 3) - (void)v103 <= 0x30uLL)
              {
                llvm::raw_ostream::write(v77, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
                uint64_t v127 = (void *)*((void *)v77 + 4);
              }
              else
              {
                qmemcpy(v103, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
                uint64_t v127 = (void *)(*((void *)v77 + 4) + 49);
                *((void *)v77 + 4) = v127;
              }
              if (*((void *)v77 + 3) - (void)v127 <= 0x2EuLL)
              {
                llvm::raw_ostream::write(v77, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
              }
              else
              {
                qmemcpy(v127, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
                *((void *)v77 + 4) += 47;
              }
              sub_1CD098D14(v77, (v102 + v101), 0, 0, 0);
              uint64_t v104 = (_WORD *)*((void *)v77 + 4);
              if (*((void *)v77 + 3) - (void)v104 > 1uLL)
              {
                *uint64_t v104 = 15906;
                *((void *)v77 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v77, "\">", 2uLL);
              }
              sub_1CCB497EC(&__dst, (uint64_t ***)v76, *v141);
              if (v144 >= 0) {
                int v105 = (const char *)&__dst;
              }
              else {
                int v105 = (const char *)__dst;
              }
              if (v144 >= 0) {
                size_t v106 = HIBYTE(v144) & 0x7F;
              }
              else {
                size_t v106 = *((void *)&__dst + 1);
              }
              llvm::raw_ostream::write(v77, v105, v106);
              uint64_t v107 = *((void *)v77 + 4);
              if ((unint64_t)(*((void *)v77 + 3) - v107) > 4)
              {
                *(unsigned char *)(v107 + 4) = 62;
                *(_DWORD *)uint64_t v107 = 1685335868;
                *((void *)v77 + 4) += 5;
              }
              else
              {
                llvm::raw_ostream::write(v77, "</td>", 5uLL);
              }
              if (SHIBYTE(v144) < 0)
              {
                long long v98 = (void *)__dst;
                goto LABEL_189;
              }
              goto LABEL_190;
            }
          }
          else
          {
            llvm::raw_ostream::write(v77, "label=", 6uLL);
            if (v81) {
              goto LABEL_137;
            }
          }
          char v95 = (_WORD *)*((void *)v77 + 4);
          if (*((void *)v77 + 3) - (void)v95 > 1uLL)
          {
            _WORD *v95 = 31522;
            *((void *)v77 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v77, "\"{", 2uLL);
          }
          sub_1CCB497EC(v151, (uint64_t ***)v76, *v141);
          llvm::DOT::EscapeString((char *)v151, (uint64_t)&__dst);
          if (v144 >= 0) {
            long long v96 = (const char *)&__dst;
          }
          else {
            long long v96 = (const char *)__dst;
          }
          if (v144 >= 0) {
            size_t v97 = HIBYTE(v144) & 0x7F;
          }
          else {
            size_t v97 = *((void *)&__dst + 1);
          }
          llvm::raw_ostream::write(v77, v96, v97);
          if (SHIBYTE(v144) < 0) {
            operator delete((void *)__dst);
          }
          if (SHIBYTE(v152) < 0)
          {
            long long v98 = v151[0];
LABEL_189:
            operator delete(v98);
          }
LABEL_190:
          v151[0] = 0;
          v151[1] = 0;
          uint64_t v152 = 0;
          DWORD2(__dst) = 0;
          char v147 = 0;
          uint64_t v148 = 0;
          *(void *)&long long __dst = &unk_1F2646F30;
          uint64_t v150 = v151;
          int v149 = 0;
          uint64_t v145 = 0;
          uint64_t v146 = 0;
          int64_t v144 = 0;
          if (v81)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, "</tr><tr>", 9uLL);
            uint64_t v71 = v140;
            BOOL v109 = (uint64_t *)((char *)v140 + 32);
            BOOL v108 = (void *)*((void *)v140 + 4);
            if (*((void *)v140 + 3) - (void)v108 <= 0xDuLL)
            {
              uint64_t v110 = "</tr></table>>";
              size_t v111 = 14;
LABEL_195:
              uint64_t v71 = llvm::raw_ostream::write(v71, v110, v111);
              goto LABEL_196;
            }
            qmemcpy(v108, "</tr></table>>", 14);
            uint64_t v128 = *v109 + 14;
          }
          else
          {
            uint64_t v71 = v140;
            BOOL v109 = (uint64_t *)((char *)v140 + 32);
            __int16 v112 = (_WORD *)*((void *)v140 + 4);
            if (*((void *)v140 + 3) - (void)v112 <= 1uLL)
            {
              uint64_t v110 = "}\"";
              size_t v111 = 2;
              goto LABEL_195;
            }
            *__int16 v112 = 8829;
            uint64_t v128 = *v109 + 2;
          }
          uint64_t *v109 = v128;
LABEL_196:
          uint64_t v113 = *((void *)v71 + 4);
          if ((unint64_t)(*((void *)v71 + 3) - v113) > 2)
          {
            *(unsigned char *)(v113 + 2) = 10;
            *(_WORD *)uint64_t v113 = 15197;
            *v109 += 3;
          }
          else
          {
            uint64_t v71 = llvm::raw_ostream::write(v71, "];\n", 3uLL);
          }
          uint64_t v114 = *(void *)(v76 + 40);
          if (v114 == v76 + 40)
          {
            int v124 = 0;
            char v117 = 0;
          }
          else
          {
            if (v114) {
              uint64_t v115 = v114 - 24;
            }
            else {
              uint64_t v115 = 0;
            }
            int v116 = *(unsigned __int8 *)(v115 + 16);
            if ((v116 - 29) >= 0xB) {
              char v117 = 0;
            }
            else {
              char v117 = (llvm::Instruction *)v115;
            }
            if (v116 == 30)
            {
              if ((*(_DWORD *)(v115 + 20) & 0x7FFFFFF) == 3) {
                int v118 = 2;
              }
              else {
                int v118 = 1;
              }
LABEL_209:
              unsigned int v119 = 0;
              unint64_t v120 = 0;
              int v121 = 63;
              do
              {
                llvm::Instruction::getSuccessor(v117, v119);
                uint64_t v71 = sub_1CCB49E70(&v140, v76, v117, v120);
                unsigned int v119 = v120 + 1;
                unint64_t v120 = v120 & 0xFFFFFFFF00000000 | (v120 + 1);
                BOOL v123 = v121-- != 0;
              }
              while (v118 != v119 && v123);
              int v124 = v118;
              goto LABEL_222;
            }
            int v118 = 2;
            unint64_t v120 = 0;
            int v124 = 0;
            switch(*(unsigned char *)(v115 + 16))
            {
              case 0x1D:
              case 0x22:
              case 0x23:
                goto LABEL_222;
              case 0x1E:
                goto LABEL_279;
              case 0x1F:
                int v118 = (*(_DWORD *)(v115 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_219;
              case 0x20:
              case 0x26:
                int v118 = (*(_DWORD *)(v115 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_219;
              case 0x21:
                goto LABEL_209;
              case 0x24:
                int v118 = *(_WORD *)(v115 + 18) & 1;
                goto LABEL_219;
              case 0x25:
                int v118 = 1;
                goto LABEL_209;
              case 0x27:
                int v118 = *(_DWORD *)(v115 + 80) + 1;
LABEL_219:
                if (!v118) {
                  goto LABEL_220;
                }
                goto LABEL_209;
              default:
LABEL_220:
                int v124 = 0;
                break;
            }
          }
          unint64_t v120 = 0;
LABEL_222:
          for (unsigned int i = v120; v124 != i; v120 = v120 & 0xFFFFFFFF00000000 | (v120 + 1))
          {
            llvm::Instruction::getSuccessor(v117, i);
            uint64_t v71 = sub_1CCB49E70(&v140, v76, v117, v120);
            unsigned int i = v120 + 1;
          }
          *(void *)&long long __dst = &unk_1F2646B98;
          if (v149 == 1)
          {
            uint64_t v71 = (llvm::raw_ostream *)v144;
            if (v144) {
              uint64_t v71 = (llvm::raw_ostream *)MEMORY[0x1D25D9CB0](v144, 0x1000C8077774924);
            }
          }
          if (SHIBYTE(v152) < 0) {
            operator delete(v151[0]);
          }
          if (v155 < 0) {
            operator delete(*(void **)v153);
          }
          uint64_t v75 = *(void *)(v75 + 8);
          if (v75 == v74)
          {
            unint64_t v55 = v140;
            uint64_t v5 = v132;
            goto LABEL_252;
          }
        }
      }
    }
    memmove(p_dst, v48, v47);
    goto LABEL_59;
  }
  __int16 v135 = 260;
  uint64_t v133 = a5;
  *(void *)&long long __dst = llvm::sys::fs::openFile((unsigned __int8 *)&v133, &v136, 0, 2, 1, 438);
  *((void *)&__dst + 1) = v10;
  uint64_t v11 = std::generic_category();
  uint64_t v133 = 17;
  size_t v134 = v11;
  int v12 = (llvm *)(*(uint64_t (**)(void, void, uint64_t *))(**((void **)&__dst + 1) + 32))(*((void *)&__dst + 1), __dst, &v133);
  if (v12
    || (int v12 = (llvm *)((uint64_t (*)(const std::error_category *, long long *, void))v134->equivalent_0)(v134, &__dst, v133), v12))
  {
    uint64_t v18 = (llvm::raw_ostream *)llvm::errs(v12);
    uint64_t v19 = (void *)*((void *)v18 + 4);
    if (*((void *)v18 + 3) - (void)v19 > 0x17uLL)
    {
      qmemcpy(v19, "file exists, overwriting", 24);
      uint64_t v20 = (unsigned char *)(*((void *)v18 + 4) + 24);
      *((void *)v18 + 4) = v20;
    }
    else
    {
      uint64_t v18 = llvm::raw_ostream::write(v18, "file exists, overwriting", 0x18uLL);
      uint64_t v20 = (unsigned char *)*((void *)v18 + 4);
    }
    uint64_t v21 = (unsigned char *)*((void *)v18 + 3);
    goto LABEL_29;
  }
  int v13 = __dst;
  uint64_t v14 = (llvm::raw_ostream *)llvm::errs(v12);
  uint64_t v15 = (char *)*((void *)v14 + 4);
  unint64_t v16 = *((void *)v14 + 3) - (void)v15;
  if (!v13)
  {
    if (v16 > 0x21)
    {
      qmemcpy(v15, "writing to the newly created file ", 34);
      *((void *)v14 + 4) += 34;
    }
    else
    {
      uint64_t v14 = llvm::raw_ostream::write(v14, "writing to the newly created file ", 0x22uLL);
    }
    char v22 = *(unsigned char *)(v5 + 23);
    BOOL v23 = v22 < 0;
    if (v22 >= 0) {
      uint64_t v24 = (const char *)v5;
    }
    else {
      uint64_t v24 = *(const char **)v5;
    }
    size_t v25 = v22 & 0x7F;
    if (v23) {
      size_t v26 = *(void *)(v5 + 8);
    }
    else {
      size_t v26 = v25;
    }
    uint64_t v18 = llvm::raw_ostream::write(v14, v24, v26);
    uint64_t v21 = (unsigned char *)*((void *)v18 + 3);
    uint64_t v20 = (unsigned char *)*((void *)v18 + 4);
LABEL_29:
    if (v21 == v20)
    {
      llvm::raw_ostream::write(v18, "\n", 1uLL);
    }
    else
    {
      *uint64_t v20 = 10;
      ++*((void *)v18 + 4);
    }
    goto LABEL_31;
  }
  if (v16 > 0x16)
  {
    qmemcpy(v15, "error writing into file", 23);
    uint64_t v17 = (unsigned char *)(*((void *)v14 + 4) + 23);
    *((void *)v14 + 4) = v17;
  }
  else
  {
    uint64_t v14 = llvm::raw_ostream::write(v14, "error writing into file", 0x17uLL);
    uint64_t v17 = (unsigned char *)*((void *)v14 + 4);
  }
  if (*((unsigned char **)v14 + 3) == v17)
  {
    llvm::raw_ostream::write(v14, "\n", 1uLL);
  }
  else
  {
    *uint64_t v17 = 10;
    ++*((void *)v14 + 4);
  }
  *(unsigned char *)(a1 + 23) = 0;
  *(unsigned char *)a1 = 0;
}

uint64_t sub_1CCB47D88(void *a1, void *a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  uint64_t v7 = *a2;
  *a2 = 0;
  if (result)
  {
    uint64_t v8 = *(void *)a3;
    uint64_t v9 = **(void **)(a3 + 8);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v7 + 24))(__p, v7);
    __int16 v13 = 260;
    int v12 = __p;
    int v15 = 19;
    char v16 = 0;
    uint64_t v14 = &unk_1F26167A0;
    uint64_t v17 = v9;
    uint64_t v18 = &v12;
    llvm::LLVMContext::diagnose(v8, (const llvm::DiagnosticInfo *)&v14);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    *a1 = 0;
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  else
  {
    *a1 = v7;
  }
  return result;
}

void sub_1CCB47ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 32;
  uint64_t v7 = a2;
  uint64_t v8 = 0;
  sub_1CCB48178((uint64_t)v9, a1 + 32, &v7);
  int v5 = v10;
  sub_1CCB483E8(&v8, 0);
  if (v5) {
    operator new();
  }
  uint64_t v7 = a3;
  uint64_t v8 = 0;
  sub_1CCB48178((uint64_t)v9, v4, &v7);
  int v6 = v10;
  sub_1CCB483E8(&v8, 0);
  if (v6) {
    operator new();
  }
  operator new();
}

uint64_t sub_1CCB48178(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __int16 v13 = 0;
  uint64_t result = sub_1CBB0BF40(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v13);
  uint64_t v7 = v13;
  if (result)
  {
    char v8 = 0;
    goto LABEL_8;
  }
  int v9 = *(_DWORD *)(a2 + 8);
  unsigned int v10 = *(_DWORD *)(a2 + 16);
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
    goto LABEL_10;
  }
  if (v10 + ~v9 - *(_DWORD *)(a2 + 12) <= v10 >> 3)
  {
LABEL_10:
    sub_1CCB48288(a2, v10);
    __int16 v13 = 0;
    uint64_t result = sub_1CBB0BF40(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v13);
    uint64_t v7 = v13;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*v7 != -4096) {
    --*(_DWORD *)(a2 + 12);
  }
  *uint64_t v7 = *a3;
  uint64_t v11 = a3[1];
  a3[1] = 0;
  v7[1] = v11;
  char v8 = 1;
LABEL_8:
  uint64_t v12 = *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v12;
  *(unsigned char *)(a1 + 16) = v8;
  return result;
}

void *sub_1CCB48288(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      __int16 v13 = (uint64_t *)(v4 + 8);
      do
      {
        uint64_t v14 = *(v13 - 1);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v19 = 0;
          sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          int v15 = v19;
          *uint64_t v19 = v14;
          uint64_t v16 = *v13;
          *__int16 v13 = 0;
          v15[1] = v16;
          ++*(_DWORD *)(a1 + 8);
          sub_1CCB483E8(v13, 0);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    uint64_t v18 = 16 * v17;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v18 -= 16;
    }
    while (v18);
  }
  return result;
}

void *sub_1CCB483E8(void *result, uint64_t a2)
{
  uint64_t v2 = (void *)*result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = (void *)v2[9];
    if (v3 != v2 + 11) {
      free(v3);
    }
    uint64_t v4 = (void *)v2[5];
    if (v4 != v2 + 7) {
      free(v4);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t sub_1CCB48468(uint64_t result, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    unint64_t v6 = (uint64_t *)result;
    if (a3 == 2)
    {
      uint64_t v7 = *(a2 - 1);
      uint64_t v8 = *(void *)result;
      if (*(void *)(v7 + 16) > *(void *)(*(void *)result + 16))
      {
        *(void *)uint64_t result = v7;
        *(a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((uint64_t *)result != a2)
      {
        int v15 = (uint64_t *)(result + 8);
        if ((uint64_t *)(result + 8) != a2)
        {
          uint64_t v16 = 0;
          uint64_t v17 = (uint64_t *)result;
          do
          {
            uint64_t v18 = *v17;
            uint64_t v17 = v15;
            uint64_t v19 = *v15;
            if (*(void *)(*v15 + 16) > *(void *)(v18 + 16))
            {
              uint64_t v20 = 0;
              *int v15 = 0;
              for (uint64_t i = v16; ; i -= 8)
              {
                char v22 = (uint64_t *)((char *)v6 + i);
                *char v22 = 0;
                v22[1] = v18;
                if (v20) {
                  MEMORY[0x1D25D9CE0](v20, 0x1060C40F4AFCA5ALL);
                }
                if (!i) {
                  break;
                }
                BOOL v23 = (uint64_t *)((char *)v6 + i);
                uint64_t v18 = *(uint64_t *)((char *)v6 + i - 8);
                if (*(void *)(v19 + 16) <= *(void *)(v18 + 16)) {
                  goto LABEL_22;
                }
                uint64_t v20 = *v22;
              }
              BOOL v23 = v6;
LABEL_22:
              uint64_t result = *v23;
              *BOOL v23 = v19;
              if (result) {
                uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40F4AFCA5ALL);
              }
            }
            int v15 = v17 + 1;
            v16 += 8;
          }
          while (v17 + 1 != a2);
        }
      }
    }
    else
    {
      uint64_t v11 = a4;
      unint64_t v12 = a3 >> 1;
      uint64_t v13 = result + 8 * (a3 >> 1);
      unint64_t v14 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1CCB487A0(result, v13, v14, a4);
        uint64_t v24 = &v11[v12];
        uint64_t result = sub_1CCB487A0((uint64_t)&v6[a3 >> 1], (uint64_t)a2, a3 - (a3 >> 1), v24);
        size_t v25 = &v11[a3];
        size_t v26 = v24;
        uint64_t v27 = v11;
        while (v26 != v25)
        {
          uint64_t v28 = *v26;
          uint64_t v29 = *v27;
          if (*(void *)(*v26 + 16) <= *(void *)(*v27 + 16))
          {
            *uint64_t v27 = 0;
            uint64_t result = *v6;
            *unint64_t v6 = v29;
            if (result) {
              uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40F4AFCA5ALL);
            }
            ++v27;
          }
          else
          {
            *size_t v26 = 0;
            uint64_t result = *v6;
            *unint64_t v6 = v28;
            if (result) {
              uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40F4AFCA5ALL);
            }
            ++v26;
          }
          ++v6;
          if (v27 == v24)
          {
            if (v26 != v25)
            {
              uint64_t v30 = 0;
              do
              {
                uint64_t v31 = v26[v30];
                v26[v30] = 0;
                uint64_t result = v6[v30];
                v6[v30] = v31;
                if (result) {
                  uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40F4AFCA5ALL);
                }
                ++v30;
              }
              while (&v26[v30] != v25);
            }
            goto LABEL_47;
          }
        }
        if (v27 != v24)
        {
          uint64_t v32 = 0;
          do
          {
            uint64_t v33 = v27[v32];
            v27[v32] = 0;
            uint64_t result = v6[v32];
            v6[v32] = v33;
            if (result) {
              uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40F4AFCA5ALL);
            }
            ++v32;
          }
          while (&v27[v32] != v24);
        }
LABEL_47:
        if (v11)
        {
          unint64_t v34 = a3;
          do
          {
            uint64_t result = *v11;
            *uint64_t v11 = 0;
            if (result) {
              uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40F4AFCA5ALL);
            }
            ++v11;
            --v34;
          }
          while (v34);
        }
      }
      else
      {
        sub_1CCB48468(result, v13, v14, a4, a5);
        sub_1CCB48468(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v11, a5);
        return sub_1CCB489E4((uint64_t)v6, &v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v11, a5);
      }
    }
  }
  return result;
}

uint64_t sub_1CCB487A0(uint64_t result, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v6 = result;
    if (a3 == 1)
    {
LABEL_11:
      uint64_t v13 = *(void *)v6;
      *(void *)uint64_t v6 = 0;
      *uint64_t v4 = v13;
      return result;
    }
    if (a3 == 2)
    {
      uint64_t v8 = *(void *)(a2 - 8);
      unint64_t v9 = *(void *)(v8 + 16);
      unint64_t v10 = *(void *)(*(void *)result + 16);
      BOOL v11 = v9 > v10;
      if (v9 <= v10) {
        unint64_t v12 = (void *)result;
      }
      else {
        unint64_t v12 = (void *)(a2 - 8);
      }
      if (!v11) {
        uint64_t v8 = *(void *)result;
      }
      *unint64_t v12 = 0;
      *a4 = v8;
      uint64_t v4 = a4 + 1;
      if (!v11) {
        uint64_t v6 = a2 - 8;
      }
      goto LABEL_11;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v27 = result + 8 * (a3 >> 1);
      sub_1CCB48468(result, v27, a3 >> 1, a4, a3 >> 1);
      uint64_t result = sub_1CCB48468(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      unint64_t v28 = v6 + 8 * (a3 >> 1);
      while (v28 != a2)
      {
        uint64_t v29 = *(void *)v28;
        uint64_t v30 = *(void *)v6;
        if (*(void *)(*(void *)v28 + 16) <= *(void *)(*(void *)v6 + 16))
        {
          *(void *)uint64_t v6 = 0;
          v6 += 8;
          uint64_t v29 = v30;
        }
        else
        {
          *(void *)unint64_t v28 = 0;
          v28 += 8;
        }
        *v4++ = v29;
        if (v6 == v27)
        {
          if (v28 != a2)
          {
            unint64_t v31 = 0;
            do
            {
              uint64_t v32 = *(void *)(v28 + v31);
              *(void *)(v28 + v31) = 0;
              v4[v31 / 8] = v32;
              v31 += 8;
            }
            while (v28 + v31 != a2);
          }
          return result;
        }
      }
      if (v6 != v27)
      {
        unint64_t v33 = 0;
        do
        {
          uint64_t v34 = *(void *)(v6 + v33);
          *(void *)(v6 + v33) = 0;
          v4[v33 / 8] = v34;
          v33 += 8;
        }
        while (v6 + v33 != v27);
      }
    }
    else if (result != a2)
    {
      uint64_t v14 = *(void *)result;
      *(void *)uint64_t result = 0;
      uint64_t v15 = result + 8;
      *a4 = v14;
      if (result + 8 != a2)
      {
        uint64_t v16 = 0;
        uint64_t v17 = a4;
        do
        {
          uint64_t v18 = v17;
          uint64_t v20 = *v17++;
          uint64_t v19 = v20;
          uint64_t v21 = *(void *)v15;
          if (*(void *)(*(void *)v15 + 16) <= *(void *)(v20 + 16))
          {
            *(void *)uint64_t v15 = 0;
            *uint64_t v17 = v21;
          }
          else
          {
            *uint64_t v18 = 0;
            v18[1] = v19;
            char v22 = v4;
            if (v18 != v4)
            {
              uint64_t v23 = v16;
              while (1)
              {
                char v22 = (uint64_t *)((char *)v4 + v23);
                uint64_t v24 = *(uint64_t *)((char *)v4 + v23 - 8);
                if (*(void *)(*(void *)v15 + 16) <= *(void *)(v24 + 16)) {
                  break;
                }
                uint64_t v25 = *v22;
                *(v22 - 1) = 0;
                *char v22 = v24;
                if (v25) {
                  MEMORY[0x1D25D9CE0](v25, 0x1060C40F4AFCA5ALL);
                }
                v23 -= 8;
                if (!v23)
                {
                  char v22 = v4;
                  break;
                }
              }
            }
            uint64_t v26 = *(void *)v15;
            *(void *)uint64_t v15 = 0;
            uint64_t result = *v22;
            *char v22 = v26;
            if (result) {
              uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40F4AFCA5ALL);
            }
          }
          v15 += 8;
          v16 += 8;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1CCB489E4(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  if (a5)
  {
    unint64_t v10 = (uint64_t *)result;
    while (a4 > a7 && a5 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v11 = 0;
      uint64_t v12 = *a2;
      uint64_t v13 = -a4;
      while (1)
      {
        uint64_t v14 = v10[v11];
        if (*(void *)(*a2 + 16) > *(void *)(v14 + 16)) {
          break;
        }
        ++v11;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      uint64_t v16 = -v13;
      uint64_t result = (uint64_t)&v10[v11];
      if (-v13 >= a5)
      {
        if (v13 == -1)
        {
          v10[v11] = v12;
          *a2 = v14;
          return result;
        }
        uint64_t v17 = a6;
        if (v13 > 0) {
          uint64_t v16 = 1 - v13;
        }
        uint64_t v27 = v16 >> 1;
        uint64_t v21 = &v10[(v16 >> 1) + v11];
        uint64_t v20 = a3;
        if (a3 != a2)
        {
          unint64_t v28 = a3 - a2;
          uint64_t v20 = a2;
          do
          {
            unint64_t v29 = v28 >> 1;
            uint64_t v30 = &v20[v28 >> 1];
            uint64_t v32 = *v30;
            unint64_t v31 = v30 + 1;
            v28 += ~(v28 >> 1);
            if (*(void *)(v32 + 16) > *(void *)(*v21 + 16)) {
              uint64_t v20 = v31;
            }
            else {
              unint64_t v28 = v29;
            }
          }
          while (v28);
        }
        uint64_t v19 = v20 - a2;
      }
      else
      {
        uint64_t v17 = a6;
        if (a5 >= 0) {
          uint64_t v18 = a5;
        }
        else {
          uint64_t v18 = a5 + 1;
        }
        uint64_t v19 = v18 >> 1;
        uint64_t v20 = &a2[v18 >> 1];
        uint64_t v21 = a2;
        if ((uint64_t *)result != a2)
        {
          unint64_t v22 = ((char *)a2 - (char *)v10 - v11 * 8) >> 3;
          uint64_t v21 = &v10[v11];
          do
          {
            unint64_t v23 = v22 >> 1;
            uint64_t v24 = &v21[v22 >> 1];
            uint64_t v26 = *v24;
            uint64_t v25 = v24 + 1;
            v22 += ~(v22 >> 1);
            if (*(void *)(*v20 + 16) > *(void *)(v26 + 16)) {
              unint64_t v22 = v23;
            }
            else {
              uint64_t v21 = v25;
            }
          }
          while (v22);
        }
        uint64_t v27 = ((char *)v21 - (char *)v10 - v11 * 8) >> 3;
      }
      unint64_t v33 = v20;
      if (v21 != a2)
      {
        unint64_t v33 = v21;
        if (a2 != v20)
        {
          uint64_t v34 = *v21;
          *uint64_t v21 = v12;
          unint64_t v33 = v21 + 1;
          for (uint64_t i = a2; ; *v33++ = *i)
          {
            *i++ = v34;
            if (i == v20) {
              break;
            }
            if (v33 == a2) {
              a2 = i;
            }
            uint64_t v34 = *v33;
          }
          if (v33 != a2)
          {
            uint64_t v36 = v33;
            unsigned int v37 = a2;
            while (1)
            {
              uint64_t v38 = v36;
              while (1)
              {
                uint64_t v39 = *v36;
                *v38++ = *v37;
                *v37++ = v39;
                if (v37 != v20) {
                  break;
                }
                uint64_t v36 = v38;
                unsigned int v37 = a2;
                if (v38 == a2) {
                  goto LABEL_48;
                }
              }
              if (v38 == a2) {
                a2 = v37;
              }
              ++v36;
            }
          }
        }
      }
LABEL_48:
      a4 = -(v27 + v13);
      uint64_t v40 = a5 - v19;
      if (v27 + v19 >= a5 - (v27 + v19) - v13)
      {
        uint64_t v46 = &v10[v11];
        size_t v47 = v17;
        uint64_t v40 = v19;
        uint64_t v44 = a7;
        uint64_t result = sub_1CCB489E4(v33, v20, a3, a4, a5 - v19, v17);
        int v45 = v46;
        uint64_t v20 = v21;
        a6 = v47;
        a4 = v27;
        a3 = v33;
      }
      else
      {
        uint64_t v41 = &v10[v11];
        unsigned int v42 = v21;
        unint64_t v43 = a3;
        a6 = v17;
        uint64_t v44 = a7;
        uint64_t result = sub_1CCB489E4(v41, v42, v33, v27, v19, v17);
        a3 = v43;
        int v45 = v33;
      }
      a5 = v40;
      unint64_t v10 = v45;
      a2 = v20;
      a7 = v44;
      if (!v40) {
        return result;
      }
    }
    if (a4 > a5)
    {
      if (a2 == a3) {
        return result;
      }
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      do
      {
        uint64_t v50 = a2[v48];
        a2[v48] = 0;
        a6[v48] = v50;
        ++v49;
        ++v48;
      }
      while (&a2[v48] != a3);
      if (!(v48 * 8)) {
        goto LABEL_94;
      }
      uint64_t v51 = &a6[v48];
      uint64_t v52 = a3 - 1;
      while (1)
      {
        if (a2 == v10)
        {
          if (v51 != a6)
          {
            uint64_t v65 = 0;
            do
            {
              uint64_t v66 = v51[v65 - 1];
              v51[v65 - 1] = 0;
              uint64_t result = v52[v65];
              v52[v65] = v66;
              if (result) {
                uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40F4AFCA5ALL);
              }
              --v65;
            }
            while (&v51[v65] != a6);
          }
          goto LABEL_94;
        }
        uint64_t v54 = a2 - 1;
        uint64_t v53 = *(a2 - 1);
        uint64_t v55 = *(v51 - 1);
        if (*(void *)(v55 + 16) > *(void *)(v53 + 16)) {
          break;
        }
        *(v51 - 1) = 0;
        uint64_t result = *v52;
        uint64_t *v52 = v55;
        uint64_t v54 = a2;
        --v51;
        if (result) {
          goto LABEL_64;
        }
LABEL_65:
        --v52;
        a2 = v54;
        if (v51 == a6) {
          goto LABEL_94;
        }
      }
      uint64_t *v54 = 0;
      uint64_t result = *v52;
      uint64_t *v52 = v53;
      if (!result) {
        goto LABEL_65;
      }
LABEL_64:
      uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40F4AFCA5ALL);
      goto LABEL_65;
    }
    if (v10 != a2)
    {
      uint64_t v56 = 0;
      uint64_t v49 = 0;
      do
      {
        uint64_t v57 = v10[v56];
        v10[v56] = 0;
        a6[v56] = v57;
        ++v49;
        ++v56;
      }
      while (&v10[v56] != a2);
      if (!(v56 * 8)) {
        goto LABEL_94;
      }
      uint64_t v58 = &a6[v56];
      uint64_t v59 = (uint64_t)&a6[v56 - 1];
      int v60 = a6;
      while (a2 != a3)
      {
        uint64_t v61 = *a2;
        uint64_t v62 = *v60;
        if (*(void *)(*a2 + 16) <= *(void *)(*v60 + 16))
        {
          uint64_t *v60 = 0;
          uint64_t result = *v10;
          *unint64_t v10 = v62;
          if (result)
          {
            uint64_t v64 = a3;
            uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40F4AFCA5ALL);
            a3 = v64;
          }
          ++v60;
        }
        else
        {
          *a2 = 0;
          uint64_t result = *v10;
          *unint64_t v10 = v61;
          if (result)
          {
            uint64_t v63 = a3;
            uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40F4AFCA5ALL);
            a3 = v63;
          }
          ++a2;
        }
        ++v10;
        if (v58 == v60) {
          goto LABEL_94;
        }
      }
      if (v58 != v60)
      {
        uint64_t v67 = 0;
        do
        {
          uint64_t v68 = v60[v67];
          v60[v67] = 0;
          uint64_t result = v10[v67];
          v10[v67] = v68;
          if (result) {
            uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40F4AFCA5ALL);
          }
          ++v67;
        }
        while ((uint64_t *)v59 != &v60[v67 - 1]);
      }
LABEL_94:
      if (a6)
      {
        do
        {
          uint64_t result = *a6;
          *a6 = 0;
          if (result) {
            uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40F4AFCA5ALL);
          }
          ++a6;
          --v49;
        }
        while (v49);
      }
    }
  }
  return result;
}

void sub_1CCB48F14(void *a1, void *a2, uint64_t a3)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  int v6 = (*(uint64_t (**)(void, void *))(*(void *)*a2 + 48))(*a2, &llvm::InstrProfError::ID);
  uint64_t v7 = (_DWORD *)*a2;
  *a2 = 0;
  if (!v6)
  {
    *a1 = v7;
    return;
  }
  uint64_t v8 = *(uint64_t *****)a3;
  int v9 = v7[2];
  if (v9 != 9 && v9 != 15)
  {
    if (v9 == 13 && !byte_1EBCEAD08)
    {
LABEL_88:
      *a1 = 0;
      goto LABEL_89;
    }
LABEL_36:
    (*(void (**)(std::string *__return_ptr, _DWORD *))(*(void *)v7 + 24))(&v85, v7);
    char v84 = 1;
    strcpy(v83, " ");
    unint64_t v31 = std::string::append(&v85, v83, 1uLL);
    std::string::size_type v32 = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    unint64_t v33 = *v8;
    if ((*((unsigned char *)*v8 + 23) & 0x10) == 0)
    {
      size_t v43 = 0;
      HIBYTE(v82) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_55;
    }
    uint64_t v34 = ***v33;
    uint64_t v35 = *(void *)(v34 + 152);
    uint64_t v36 = *(unsigned int *)(v34 + 168);
    if (v36)
    {
      LODWORD(v37) = (v36 - 1) & ((v33 >> 4) ^ (v33 >> 9));
      uint64_t v38 = (uint64_t ****)(v35 + 16 * v37);
      uint64_t v39 = *v38;
      if (*v38 == v33)
      {
LABEL_47:
        unsigned int v42 = (unint64_t *)v38[1];
        unint64_t v45 = *v42;
        uint64_t v44 = v42 + 2;
        size_t v43 = v45;
        if (v45 >= 0x7FFFFFFFFFFFFFF8) {
          abort();
        }
        if (v43 >= 0x17)
        {
          uint64_t v47 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v43 | 7) != 0x17) {
            uint64_t v47 = v43 | 7;
          }
          uint64_t v48 = v47 + 1;
          p_dst = (void **)operator new(v47 + 1);
          std::string::size_type v81 = v43;
          int64_t v82 = v48 | 0x8000000000000000;
          long long __dst = p_dst;
        }
        else
        {
          HIBYTE(v82) = v43;
          p_dst = (void **)&__dst;
          if (!v43) {
            goto LABEL_55;
          }
        }
        memmove(p_dst, v44, v43);
LABEL_55:
        *((unsigned char *)p_dst + v43) = 0;
        if (v82 >= 0) {
          uint64_t v49 = (const std::string::value_type *)&__dst;
        }
        else {
          uint64_t v49 = (const std::string::value_type *)__dst;
        }
        if (v82 >= 0) {
          std::string::size_type v50 = HIBYTE(v82) & 0x7F;
        }
        else {
          std::string::size_type v50 = v81;
        }
        uint64_t v51 = std::string::append(&v86, v49, v50);
        std::string::size_type v52 = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)__s = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        *(void *)&__s[16] = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        char v79 = 8;
        strcpy((char *)v78, " Hash = ");
        uint64_t v53 = std::string::append((std::string *)__s, (const std::string::value_type *)v78, 8uLL);
        std::string::size_type v54 = v53->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v77, (unint64_t)v8[22]);
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v55 = &v77;
        }
        else {
          uint64_t v55 = (std::string *)v77.__r_.__value_.__r.__words[0];
        }
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = *((unsigned char *)&v77.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          std::string::size_type size = v77.__r_.__value_.__l.__size_;
        }
        uint64_t v57 = std::string::append(&v89, (const std::string::value_type *)v55, size);
        std::string::size_type v58 = v57->__r_.__value_.__r.__words[2];
        long long __p = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
        std::string::size_type v88 = v58;
        v57->__r_.__value_.__l.__size_ = 0;
        v57->__r_.__value_.__r.__words[2] = 0;
        v57->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v77.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        if (v79 < 0) {
          operator delete(v78[0]);
        }
        if ((__s[23] & 0x80000000) != 0) {
          operator delete(*(void **)__s);
        }
        if (SHIBYTE(v82) < 0) {
          operator delete(__dst);
        }
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v86.__r_.__value_.__l.__data_);
        }
        if (v84 < 0) {
          operator delete(*(void **)v83);
        }
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
        uint64_t v59 = *(void *)(a3 + 8);
        int v60 = v8[1];
        uint64_t v63 = v60[21];
        uint64_t v61 = v60 + 21;
        uint64_t v62 = v63;
        if (*((char *)v61 + 23) >= 0) {
          uint64_t v64 = v61;
        }
        else {
          uint64_t v64 = (uint64_t ***)v62;
        }
        __int16 v90 = 260;
        v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        *(_DWORD *)&__s[8] = 19;
        __s[12] = 1;
        *(void *)__s = &unk_1F26167A0;
        *(void *)&__s[16] = v64;
        *(void *)&__s[24] = &v89;
        llvm::LLVMContext::diagnose(v59, (const llvm::DiagnosticInfo *)__s);
        if (SHIBYTE(v88) < 0) {
          operator delete((void *)__p);
        }
        goto LABEL_88;
      }
      int v40 = 1;
      while (v39 != (uint64_t ***)-4096)
      {
        int v41 = v37 + v40++;
        uint64_t v37 = v41 & (v36 - 1);
        uint64_t v39 = *(uint64_t ****)(v35 + 16 * v37);
        if (v39 == v33)
        {
          uint64_t v38 = (uint64_t ****)(v35 + 16 * v37);
          goto LABEL_47;
        }
      }
    }
    uint64_t v38 = (uint64_t ****)(v35 + 16 * v36);
    goto LABEL_47;
  }
  uint64_t v76 = a3;
  if (byte_1EBD09798)
  {
    uint64_t v11 = *v8;
    goto LABEL_9;
  }
  uint64_t v11 = *v8;
  if (byte_1EBCEADC8)
  {
    if (!v11[6])
    {
      BOOL v12 = (v11[4] & 0xF) == 1;
      goto LABEL_10;
    }
LABEL_9:
    BOOL v12 = 1;
LABEL_10:
    BOOL v75 = v12;
    goto LABEL_11;
  }
  BOOL v75 = 0;
LABEL_11:
  uint64_t v13 = (uint64_t *)*v8[1];
  strcpy(__s, "instr_prof_hash_mismatch");
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89.__r_.__value_.__r.__words[2];
  v89.__r_.__value_.__l.__size_ = 0x200000000;
  if ((*((unsigned char *)v11 + 23) & 0x20) == 0)
  {
LABEL_26:
    size_t v28 = strlen(__s);
    unint64_t v29 = llvm::MDString::get(v13, __s, v28);
    if (LODWORD(v89.__r_.__value_.__r.__words[1]) >= HIDWORD(v89.__r_.__value_.__r.__words[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(v89.__r_.__value_.__r.__words[0] + 8 * LODWORD(v89.__r_.__value_.__r.__words[1])) = v29;
    ++LODWORD(v89.__r_.__value_.__r.__words[1]);
    uint64_t Impl = llvm::MDTuple::getImpl((uint64_t)v13, v89.__r_.__value_.__l.__data_, LODWORD(v89.__r_.__value_.__r.__words[1]), 0, 1);
    llvm::Value::setMetadata(v11, 30, Impl);
    goto LABEL_28;
  }
  uint64_t v14 = ***v11;
  *(void *)&long long __p = v11;
  int v15 = *(_DWORD *)(v14 + 2496);
  if (!v15)
  {
    uint64_t v73 = 0;
LABEL_105:
    uint64_t v19 = sub_1CC609054(v14 + 2480, (uint64_t)&__p, (uint64_t *)&__p, v73);
    uint64_t v74 = __p;
    v19[3] = 0;
    v19[4] = 0;
    *uint64_t v19 = v74;
    v19[1] = v19 + 3;
    v19[2] = 0x100000000;
    goto LABEL_22;
  }
  uint64_t v16 = *(void *)(v14 + 2480);
  int v17 = v15 - 1;
  unsigned int v18 = v17 & ((v11 >> 4) ^ (v11 >> 9));
  uint64_t v19 = (void *)(v16 + 40 * v18);
  uint64_t v20 = (void ***)*v19;
  if ((uint64_t ***)*v19 != v11)
  {
    uint64_t v21 = 0;
    int v22 = 1;
    while (v20 != (void ***)-4096)
    {
      if (v21) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = v20 == (void ***)-8192;
      }
      if (v23) {
        uint64_t v21 = v19;
      }
      unsigned int v24 = v18 + v22++;
      unsigned int v18 = v24 & v17;
      uint64_t v19 = (void *)(v16 + 40 * v18);
      uint64_t v20 = (void ***)*v19;
      if ((uint64_t ***)*v19 == v11) {
        goto LABEL_22;
      }
    }
    if (v21) {
      uint64_t v73 = v21;
    }
    else {
      uint64_t v73 = v19;
    }
    goto LABEL_105;
  }
LABEL_22:
  uint64_t v25 = *((unsigned int *)v19 + 4);
  if (!v25) {
    goto LABEL_26;
  }
  uint64_t v26 = (void *)(v19[1] + 8);
  uint64_t v27 = 16 * v25;
  while (*((_DWORD *)v26 - 2) != 30)
  {
    v26 += 2;
    v27 -= 16;
    if (!v27) {
      goto LABEL_26;
    }
  }
  uint64_t v65 = *v26;
  if (!*v26) {
    goto LABEL_26;
  }
  uint64_t v66 = *(unsigned int *)(v65 + 8);
  if (!v66) {
    goto LABEL_26;
  }
  uint64_t v67 = -8 * v66;
  while (1)
  {
    uint64_t v68 = *(void *)(v65 + v67);
    size_t v69 = *(size_t **)(v68 + 8);
    size_t v72 = *v69;
    uint64_t v70 = v69 + 3;
    size_t v71 = v72;
    if (v72 == strlen(__s) && (!v71 || !memcmp(v70, __s, v71))) {
      break;
    }
    if (LODWORD(v89.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v89.__r_.__value_.__r.__words[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(v89.__r_.__value_.__r.__words[0] + 8 * LODWORD(v89.__r_.__value_.__r.__words[1])) = v68;
    ++LODWORD(v89.__r_.__value_.__r.__words[1]);
    v67 += 8;
    if (!v67) {
      goto LABEL_26;
    }
  }
LABEL_28:
  if ((std::string::size_type *)v89.__r_.__value_.__l.__data_ != &v89.__r_.__value_.__r.__words[2]) {
    free(v89.__r_.__value_.__l.__data_);
  }
  a3 = v76;
  if (!v75) {
    goto LABEL_36;
  }
  *a1 = 0;
  if (v7) {
LABEL_89:
  }
    (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
}

void *sub_1CCB49618(void *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = (void *)result[1];
  if (v4 != a2)
  {
    do
    {
      unint64_t v5 = v4 - 3;
      if (*(v4 - 1))
      {
        uint64_t v6 = *(v4 - 3);
        uint64_t result = (void *)*(v4 - 2);
        uint64_t v7 = *result;
        *(void *)(v7 + 8) = *(void *)(v6 + 8);
        **(void **)(v6 + 8) = v7;
        *(v4 - 1) = 0;
        if (result != v5)
        {
          do
          {
            uint64_t v8 = (void *)result[1];
            operator delete(result);
            uint64_t result = v8;
          }
          while (v8 != v5);
        }
      }
      uint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  v3[1] = a2;
  return result;
}

uint64_t sub_1CCB496A4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = *(void *)a1;
    *(void *)a1 = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    sub_1CD69825C(a1);
  }
  return a1;
}

uint64_t sub_1CCB4970C(uint64_t result, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t v5 = 8 * a3;
    while (1)
    {
      uint64_t v6 = *a2;
      if (!*(unsigned char *)(*a2 + 27)) {
        break;
      }
      ++a2;
      v5 -= 8;
      if (!v5) {
        return result;
      }
    }
    *(void *)(v6 + 32) = a4;
    *(unsigned char *)(v6 + 27) = 1;
    uint64_t v7 = *(void *)v6;
    uint64_t v13 = 0;
    if (sub_1CBB0BF40(*(void *)(result + 216), *(_DWORD *)(result + 232), v7, &v13))
    {
      uint64_t v8 = v13;
      uint64_t v9 = *(void *)(v4 + 216);
      LODWORD(v10) = *(_DWORD *)(v4 + 232);
    }
    else
    {
      uint64_t v9 = *(void *)(v4 + 216);
      uint64_t v10 = *(unsigned int *)(v4 + 232);
      uint64_t v8 = v9 + 16 * v10;
    }
    --*(_DWORD *)(*(void *)(v8 + 8) + 32);
    uint64_t v11 = *(void *)(v6 + 8);
    uint64_t v13 = 0;
    uint64_t result = sub_1CBB0BF40(v9, v10, v11, &v13);
    if (result) {
      uint64_t v12 = v13;
    }
    else {
      uint64_t v12 = *(void *)(v4 + 216) + 16 * *(unsigned int *)(v4 + 232);
    }
    --*(_DWORD *)(*(void *)(v12 + 8) + 28);
  }
  return result;
}

uint64_t sub_1CCB497EC(void *a1, uint64_t ***a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v50 = 0;
  char v54 = 0;
  uint64_t v55 = 0;
  uint64_t v57 = a1;
  int v56 = 0;
  uint64_t v49 = &unk_1F2646F30;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0) {
    goto LABEL_49;
  }
  uint64_t v5 = ***a2;
  uint64_t v6 = *(void *)(v5 + 152);
  uint64_t v7 = *(unsigned int *)(v5 + 168);
  unsigned int v8 = a2 >> 4;
  if (!v7) {
    goto LABEL_10;
  }
  LODWORD(v9) = (v7 - 1) & (v8 ^ (a2 >> 9));
  uint64_t v10 = (uint64_t ****)(v6 + 16 * v9);
  uint64_t v11 = *v10;
  if (*v10 != a2)
  {
    int v12 = 1;
    while (v11 != (uint64_t ***)-4096)
    {
      int v13 = v9 + v12++;
      uint64_t v9 = v13 & (v7 - 1);
      uint64_t v11 = *(uint64_t ****)(v6 + 16 * v9);
      if (v11 == a2) {
        goto LABEL_11;
      }
    }
LABEL_10:
    uint64_t v9 = v7;
LABEL_11:
    if (**(void **)(v6 + 16 * v9 + 8))
    {
      if (!v7) {
        goto LABEL_18;
      }
      goto LABEL_13;
    }
    goto LABEL_49;
  }
  if (*v10[1])
  {
LABEL_13:
    LODWORD(v14) = (v7 - 1) & (v8 ^ (a2 >> 9));
    int v15 = (uint64_t ****)(v6 + 16 * v14);
    uint64_t v16 = *v15;
    if (*v15 == a2) {
      goto LABEL_19;
    }
    int v17 = 1;
    while (v16 != (uint64_t ***)-4096)
    {
      int v18 = v14 + v17++;
      uint64_t v14 = v18 & (v7 - 1);
      uint64_t v16 = *(uint64_t ****)(v6 + 16 * v14);
      if (v16 == a2)
      {
        int v15 = (uint64_t ****)(v6 + 16 * v14);
        goto LABEL_19;
      }
    }
LABEL_18:
    int v15 = (uint64_t ****)(v6 + 16 * v7);
LABEL_19:
    uint64_t v19 = (unint64_t *)v15[1];
    unint64_t v22 = *v19;
    uint64_t v21 = v19 + 2;
    size_t v20 = v22;
    if (v22 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v20 >= 0x17)
    {
      uint64_t v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        uint64_t v24 = v20 | 7;
      }
      uint64_t v25 = v24 + 1;
      BOOL v23 = operator new(v24 + 1);
      __p[1] = (void *)v20;
      int64_t v48 = v25 | 0x8000000000000000;
      __p[0] = v23;
    }
    else
    {
      HIBYTE(v48) = v20;
      BOOL v23 = __p;
      if (!v20) {
        goto LABEL_27;
      }
    }
    memmove(v23, v21, v20);
LABEL_27:
    *((unsigned char *)v23 + v20) = 0;
    goto LABEL_28;
  }
LABEL_49:
  v67[0] = 0;
  v67[1] = 0;
  uint64_t v68 = 0;
  int v59 = 0;
  char v63 = 0;
  uint64_t v64 = 0;
  uint64_t v66 = v67;
  int v65 = 0;
  unint64_t v58 = (unint64_t)&unk_1F2646F30;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  llvm::Value::printAsOperand((llvm::Value *)a2, (llvm::raw_ostream *)&v58, 0, 0);
  if (*((char *)v66 + 23) < 0)
  {
    sub_1CB8BDF7C((uint64_t)__p, (const void *)*v66, v66[1]);
  }
  else
  {
    long long v36 = *(_OWORD *)v66;
    int64_t v48 = v66[2];
    *(_OWORD *)long long __p = v36;
  }
  unint64_t v58 = (unint64_t)&unk_1F2646B98;
  if (v65 == 1 && v60) {
    MEMORY[0x1D25D9CB0](v60, 0x1000C8077774924);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete((void *)v67[0]);
  }
LABEL_28:
  if (v48 >= 0) {
    uint64_t v26 = __p;
  }
  else {
    uint64_t v26 = (void **)__p[0];
  }
  if (v48 >= 0) {
    size_t v27 = HIBYTE(v48) & 0x7F;
  }
  else {
    size_t v27 = (size_t)__p[1];
  }
  llvm::raw_ostream::write((llvm::raw_ostream *)&v49, (const char *)v26, v27);
  size_t v28 = (_WORD *)v53;
  if ((unint64_t)(v52 - v53) > 2)
  {
    *(unsigned char *)(v53 + 2) = 108;
    *size_t v28 = 23610;
    v53 += 3;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v49, ":\\l", 3uLL);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v58 = 0;
  uint64_t result = sub_1CBB0BF40(*(void *)(a3 + 216), *(_DWORD *)(a3 + 232), (uint64_t)a2, &v58);
  if (result)
  {
    unint64_t v30 = v58;
    uint64_t v31 = *(void *)(a3 + 216);
    uint64_t v32 = *(unsigned int *)(a3 + 232);
  }
  else
  {
    uint64_t v31 = *(void *)(a3 + 216);
    uint64_t v32 = *(unsigned int *)(a3 + 232);
    unint64_t v30 = v31 + 16 * v32;
  }
  if (v30 == v31 + 16 * v32) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = *(void *)(v30 + 8);
  }
  if ((unint64_t)(v52 - v53) > 7)
  {
    *(void *)uint64_t v53 = 0x203A20746E756F43;
    v53 += 8;
    if (!v33) {
      goto LABEL_57;
    }
  }
  else
  {
    uint64_t result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)&v49, "Count : ", 8uLL);
    if (!v33)
    {
LABEL_57:
      uint64_t v37 = (void *)v53;
      if ((unint64_t)(v52 - v53) <= 8)
      {
        uint64_t v34 = "Unknown\\l";
        size_t v35 = 9;
        goto LABEL_59;
      }
      *(unsigned char *)(v53 + 8) = 108;
      *uint64_t v37 = *(void *)"Unknown\\l";
      uint64_t v46 = v53 + 9;
LABEL_87:
      uint64_t v53 = v46;
      goto LABEL_60;
    }
  }
  if (!*(unsigned char *)(v33 + 24)) {
    goto LABEL_57;
  }
  uint64_t result = (uint64_t)sub_1CD098D14((llvm::raw_ostream *)&v49, *(void *)(v33 + 16), 0, 0, 0);
  if ((unint64_t)(v52 - v53) > 1)
  {
    *(_WORD *)uint64_t v53 = 27740;
    uint64_t v46 = v53 + 2;
    goto LABEL_87;
  }
  uint64_t v34 = "\\l";
  size_t v35 = 2;
LABEL_59:
  uint64_t result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)&v49, v34, v35);
LABEL_60:
  if (byte_1EBCEAE88)
  {
    for (uint64_t i = (uint64_t ***)a2[6]; i != a2 + 5; uint64_t i = (uint64_t ***)i[1])
    {
      if (i) {
        uint64_t v39 = (llvm::Instruction *)(i - 3);
      }
      else {
        uint64_t v39 = 0;
      }
      if (*((unsigned char *)v39 + 16) != 85) {
        continue;
      }
      uint64_t v40 = v53;
      if ((unint64_t)(v52 - v53) > 0xE)
      {
        *(void *)uint64_t v53 = *(void *)"SELECT : { T = ";
        *(void *)(v40 + 7) = *(void *)": { T = ";
        v53 += 15;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v49, "SELECT : { T = ", 0xFuLL);
      }
      unint64_t v58 = 0;
      v67[0] = 0;
      uint64_t result = llvm::Instruction::extractProfMetadata(v39, &v58, v67);
      if (result)
      {
        sub_1CD098D14((llvm::raw_ostream *)&v49, v58, 0, 0, 0);
        int v41 = (_DWORD *)v53;
        if ((unint64_t)(v52 - v53) > 5)
        {
          *(_WORD *)(v53 + 4) = 8253;
          _DWORD *v41 = 541466668;
          v53 += 6;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v49, ", F = ", 6uLL);
        }
        uint64_t result = (uint64_t)sub_1CD098D14((llvm::raw_ostream *)&v49, v67[0], 0, 0, 0);
        if ((unint64_t)(v52 - v53) > 3)
        {
          *(_DWORD *)uint64_t v53 = 1818000672;
          uint64_t v45 = v53 + 4;
LABEL_82:
          uint64_t v53 = v45;
          continue;
        }
        unsigned int v42 = " }\\l";
        size_t v43 = 4;
      }
      else
      {
        uint64_t v44 = v53;
        if ((unint64_t)(v52 - v53) > 0x17)
        {
          *(_OWORD *)uint64_t v53 = *(_OWORD *)"Unknown, F = Unknown }\\l";
          *(void *)(v44 + 16) = *(void *)"nown }\\l";
          uint64_t v45 = v53 + 24;
          goto LABEL_82;
        }
        unsigned int v42 = "Unknown, F = Unknown }\\l";
        size_t v43 = 24;
      }
      uint64_t result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)&v49, v42, v43);
    }
  }
  uint64_t v49 = &unk_1F2646B98;
  if (v56 == 1)
  {
    uint64_t result = v51;
    if (v51) {
      return MEMORY[0x1D25D9CB0](v51, 0x1000C8077774924);
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CCB49E70(llvm::raw_ostream **a1, unint64_t a2, llvm::Instruction *this, unsigned int a4)
{
  uint64_t result = (llvm::raw_ostream *)llvm::Instruction::getSuccessor(this, a4);
  if (result)
  {
    unint64_t v7 = (unint64_t)result;
    unsigned int v8 = *a1;
    uint64_t v9 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v9) > 4)
    {
      *(unsigned char *)(v9 + 4) = 101;
      *(_DWORD *)uint64_t v9 = 1685016073;
      *((void *)v8 + 4) += 5;
    }
    else
    {
      unsigned int v8 = llvm::raw_ostream::write(v8, "\tNode", 5uLL);
    }
    llvm::write_hex(v8, a2, 3, 0, 0);
    uint64_t v10 = *a1;
    uint64_t v11 = (void *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v11 > 7uLL)
    {
      *uint64_t v11 = 0x65646F4E203E2D20;
      *((void *)v10 + 4) += 8;
    }
    else
    {
      uint64_t v10 = llvm::raw_ostream::write(v10, " -> Node", 8uLL);
    }
    llvm::write_hex(v10, v7, 3, 0, 0);
    uint64_t result = *a1;
    int v12 = (_WORD *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v12 >= 2uLL)
    {
      *int v12 = 2619;
      *((void *)result + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(result, ";\n", 2uLL);
    }
  }
  return result;
}

void sub_1CCB49FBC(void *a1, unsigned char *a2)
{
  uint64_t v2 = "-";
  uint64_t v3 = " ";
  if (!a2[25]) {
    uint64_t v2 = " ";
  }
  if (a2[24]) {
    uint64_t v4 = " ";
  }
  else {
    uint64_t v4 = "*";
  }
  int v5 = *(unsigned __int8 *)v4;
  BOOL v6 = *v4 == 0;
  if (*v2)
  {
    if (*v4)
    {
      *(void *)&long long v15 = v2;
      *(void *)&long long v16 = v4;
      __int16 v7 = 771;
    }
    else
    {
      *(void *)&long long v15 = v2;
      __int16 v7 = 259;
    }
    LOWORD(v17) = v7;
    if (a2[26]) {
      uint64_t v3 = "c";
    }
    if (*v3) {
      goto LABEL_21;
    }
LABEL_28:
    long long v18 = v15;
    long long v19 = v16;
    uint64_t v20 = v17;
    char v11 = v17;
    goto LABEL_33;
  }
  if (*v4) {
    char v8 = 3;
  }
  else {
    char v8 = 1;
  }
  *(void *)&long long v15 = v4;
  LOBYTE(v17) = v8;
  BYTE1(v17) = 1;
  if (a2[26]) {
    uint64_t v3 = "c";
  }
  int v9 = *(unsigned __int8 *)v3;
  if (!v5)
  {
    *(void *)&long long v18 = v3;
    if (v9) {
      char v11 = 3;
    }
    else {
      char v11 = 1;
    }
    LOBYTE(v20) = v11;
    BYTE1(v20) = 1;
    goto LABEL_33;
  }
  if (!*v3) {
    goto LABEL_28;
  }
  BOOL v6 = 1;
  uint64_t v2 = v4;
LABEL_21:
  BOOL v10 = !v6;
  if (v6) {
    char v11 = 3;
  }
  else {
    char v11 = 2;
  }
  if (v10) {
    uint64_t v2 = (const char *)&v15;
  }
  *(void *)&long long v18 = v2;
  *(void *)&long long v19 = v3;
  LOBYTE(v20) = v11;
  BYTE1(v20) = 3;
LABEL_33:
  if (v11 == 1)
  {
    int v12 = "  W=";
    v21[0] = "  W=";
    __int16 v22 = 259;
    char v13 = 3;
  }
  else
  {
    uint64_t v14 = (long long *)v18;
    char v13 = 2;
    if (BYTE1(v20) != 1)
    {
      char v11 = 2;
      uint64_t v14 = &v18;
    }
    v21[0] = v14;
    v21[1] = *((void *)&v18 + 1);
    v21[2] = "  W=";
    LOBYTE(v22) = v11;
    HIBYTE(v22) = 3;
    int v12 = (const char *)v21;
  }
  v23[0] = v12;
  v23[2] = a2 + 16;
  char v24 = v13;
  char v25 = 12;
  llvm::Twine::str((llvm::Twine *)v23, a1);
}

void sub_1CCB4A198()
{
}

void sub_1CCB4A1C4()
{
}

void sub_1CCB4A1F0()
{
}

uint64_t sub_1CCB4A21C()
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = "";
  int v4 = 1;
  v5.n128_u64[0] = (unint64_t)"filename";
  v5.n128_u64[1] = 8;
  v3.n128_u64[0] = (unint64_t)"Specify the path of profile data file. This ismainly for test purpose.";
  v3.n128_u64[1] = 70;
  sub_1CD6982B8(&v1, &v4, (long long *)&v5, &v3);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCEB648, &dword_1CB82C000);
  uint64_t v1 = "";
  int v4 = 1;
  v5.n128_u64[0] = (unint64_t)"filename";
  v5.n128_u64[1] = 8;
  v3.n128_u64[0] = (unint64_t)"Specify the path of profile remapping file. This is mainly for test purpose.";
  v3.n128_u64[1] = 76;
  sub_1CD698450(&v1, &v4, (long long *)&v5, &v3);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCEB730, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Disable Value Profiling";
  v5.n128_u64[1] = 23;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCEA988, "disable-vp", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEA988, &dword_1CB82C000);
  LODWORD(v1) = 3;
  v3.n128_u64[0] = (unint64_t)&v1;
  int v4 = 1;
  int v2 = 1;
  v5.n128_u64[0] = (unint64_t)"Max number of annotations for a single indirect call callsite";
  v5.n128_u64[1] = 61;
  sub_1CD6985E8((int **)&v3, &v4, &v2, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCEAA48, &dword_1CB82C000);
  LODWORD(v1) = 4;
  v3.n128_u64[0] = (unint64_t)&v1;
  int v4 = 1;
  int v2 = 1;
  v5.n128_u64[0] = (unint64_t)"Max number of preicise value annotations for a single memopintrinsic";
  v5.n128_u64[1] = 68;
  sub_1CD4943F8((llvm::cl::Option *)&unk_1EBCEAB08, "memop-max-annotations", (int **)&v3, &v4, &v2, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCEAB08, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Append function hash to the name of COMDAT function to avoid function hash mismatch"
                                     " due to the preinliner";
  v5.n128_u64[1] = 105;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCEABC8, "do-comdat-renaming", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEABC8, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Use this option to turn on/off warnings about missing profile data for functions.";
  v5.n128_u64[1] = 81;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCEAC88, "pgo-warn-missing-function", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEAC88, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Use this option to turn off/on warnings about profile cfg mismatch.";
  v5.n128_u64[1] = 67;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::NoPGOWarnMismatch, "no-pgo-warn-mismatch", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::NoPGOWarnMismatch, &dword_1CB82C000);
  LOBYTE(v4) = 1;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"The option is used to turn on/off warnings about hash mismatch for comdat functions.";
  v5.n128_u64[1] = 84;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCEAD48, "no-pgo-warn-mismatch-comdat", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEAD48, &dword_1CB82C000);
  LOBYTE(v4) = 1;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Use this option to turn on/off SELECT instruction instrumentation. ";
  v5.n128_u64[1] = 67;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCEAE08, "pgo-instr-select", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEAE08, &dword_1CB82C000);
  LODWORD(v1) = 1;
  v3.n128_u64[0] = (unint64_t)"A BOOLean option to show CFG dag or text with raw profile counts from profile data."
                                     " See also option -pgo-view-counts. To limit graph display to only one function, use"
                                     " filtering option -view-bfi-func-name.";
  v3.n128_u64[1] = 204;
  v5.n128_u64[0] = (unint64_t)v6;
  v6[0] = "none";
  v6[1] = 4;
  int v7 = 0;
  char v8 = "do not show.";
  uint64_t v9 = 12;
  BOOL v10 = "graph";
  uint64_t v11 = 5;
  int v12 = 1;
  char v13 = "show a graph.";
  uint64_t v14 = 13;
  long long v15 = "text";
  uint64_t v16 = 4;
  int v17 = 2;
  long long v18 = "show in text.";
  uint64_t v19 = 13;
  v5.n128_u64[1] = 0x400000003;
  sub_1CD69877C(&v1, (long long *)&v3, (uint64_t *)&v5);
  if ((void *)v5.n128_u64[0] != v6) {
    free((void *)v5.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))sub_1CD45C7E0, &qword_1EBCEA730, &dword_1CB82C000);
  LOBYTE(v4) = 1;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Use this option to turn on/off memory intrinsic size profiling.";
  v5.n128_u64[1] = 63;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCEAEC8, "pgo-instr-memop", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEAEC8, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"When this option is on, the annotated branch probability will be emitted as optimiz"
                                     "ation remarks: -{Rpass|pass-remarks}=pgo-instrumentation";
  v5.n128_u64[1] = 139;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCEAF88, "pgo-emit-branch-prob", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEAF88, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Force to instrument function entry basicblock.";
  v5.n128_u64[1] = 46;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCEB048, "pgo-instrument-entry", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEB048, &dword_1CB82C000);
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)&v2;
  LODWORD(v1) = 1;
  int v4 = 1;
  v5.n128_u64[0] = (unint64_t)"Use this option to enable function entry coverage instrumentation.";
  v5.n128_u64[1] = 66;
  sub_1CD462280((llvm::cl::Option *)&unk_1EBCEB108, "pgo-function-entry-coverage", &v3, &v1, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEB108, &dword_1CB82C000);
  LOBYTE(v4) = 1;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Fix function entry count in profile use.";
  v5.n128_u64[1] = 40;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCEB1C8, "pgo-fix-entry-count", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEB1C8, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Print out the non-match BFI count if a hot raw profile count becomes non-hot, or a "
                                     "cold raw profile count becomes hot. The print is enabled under -Rpass-analysis=pgo,"
                                     " or internal option -pass-remakrs-analysis=pgo.";
  v5.n128_u64[1] = 213;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCEB288, "pgo-verify-hot-bfi", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEB288, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Print out mismatched BFI counts after setting profile metadata The print is enabled"
                                     " under -Rpass-analysis=pgo, or internal option -pass-remakrs-analysis=pgo.";
  v5.n128_u64[1] = 157;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCEB348, "pgo-verify-bfi", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEB348, &dword_1CB82C000);
  LODWORD(v1) = 2;
  v3.n128_u64[0] = (unint64_t)&v1;
  int v4 = 1;
  v5.n128_u64[0] = (unint64_t)"Set the threshold for pgo-verify-bfi:  only print out mismatched BFI if the differe"
                                     "nce percentage is greater than this value (in percentage).";
  v5.n128_u64[1] = 141;
  sub_1CBF7A9F8((uint64_t)&unk_1EBCEB408, "pgo-verify-bfi-ratio", (int **)&v3, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCEB408, &dword_1CB82C000);
  LODWORD(v1) = 5;
  v3.n128_u64[0] = (unint64_t)&v1;
  int v4 = 1;
  v5.n128_u64[0] = (unint64_t)"Set the threshold for pgo-verify-bfi: skip the counts whose profile count value is below.";
  v5.n128_u64[1] = 89;
  sub_1CBF7A9F8((uint64_t)&unk_1EBCEB4C8, "pgo-verify-bfi-cutoff", (int **)&v3, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCEB4C8, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Use the old CFG function hashing";
  v5.n128_u64[1] = 32;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCEB588, "pgo-instr-old-cfg-hashing", &v3, &v1, &v5);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEB588, &dword_1CB82C000);
}

void llvm::PGOMemOPSizeOpt::run()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::AnalysisManager<llvm::Function>::getResultImpl();
}

void sub_1CCB4C9AC(uint64_t a1, uint64_t a2)
{
  int v15 = 0;
  if (sub_1CC0A4DF4(*(uint64_t **)(a1 + 32), a2, &v15)
    && (v15 == 321 || v15 == 168)
    && *(unsigned char *)(*(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64) + 16) != 16)
  {
    __n128 v5 = *(uint64_t **)(a1 + 56);
    unint64_t v4 = *(void *)(a1 + 64);
    if ((unint64_t)v5 >= v4)
    {
      int v7 = *(void **)(a1 + 48);
      uint64_t v8 = v5 - v7;
      unint64_t v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61) {
        abort();
      }
      uint64_t v10 = v4 - (void)v7;
      if (v10 >> 2 > v9) {
        unint64_t v9 = v10 >> 2;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v9;
      }
      if (v11)
      {
        if (v11 >> 61) {
          sub_1CB833614();
        }
        int v12 = (char *)operator new(8 * v11);
      }
      else
      {
        int v12 = 0;
      }
      char v13 = (uint64_t *)&v12[8 * v8];
      *char v13 = a2;
      BOOL v6 = v13 + 1;
      if (v5 != v7)
      {
        do
        {
          uint64_t v14 = *--v5;
          *--char v13 = v14;
        }
        while (v5 != v7);
        __n128 v5 = *(uint64_t **)(a1 + 48);
      }
      *(void *)(a1 + 48) = v13;
      *(void *)(a1 + 56) = v6;
      *(void *)(a1 + 64) = &v12[8 * v11];
      if (v5) {
        operator delete(v5);
      }
    }
    else
    {
      uint64_t *v5 = a2;
      BOOL v6 = v5 + 1;
    }
    *(void *)(a1 + 56) = v6;
  }
}

uint64_t sub_1CCB4CAE4()
{
  int v5 = 1;
  int v3 = 1;
  int v1 = 1000;
  unint64_t v4 = &v1;
  v2.n128_u64[0] = (unint64_t)"The minimum count to optimize memory intrinsic calls";
  v2.n128_u64[1] = 52;
  sub_1CD698904(&v5, &v3, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCEB818, &dword_1CB82C000);
  LOBYTE(v3) = 0;
  unint64_t v4 = &v3;
  int v5 = 1;
  v2.n128_u64[0] = (unint64_t)"Disable optimize";
  v2.n128_u64[1] = 16;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCEB8D8, "disable-memop-opt", (unsigned char **)&v4, &v5, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEB8D8, &dword_1CB82C000);
  int v5 = 40;
  unint64_t v4 = &v5;
  int v3 = 1;
  int v1 = 1;
  v2.n128_u64[0] = (unint64_t)"The percentage threshold for the memory intrinsic calls optimization";
  v2.n128_u64[1] = 68;
  sub_1CD4943F8((llvm::cl::Option *)&unk_1EBCEB998, "pgo-memop-percent-threshold", &v4, &v3, &v1, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCEB998, &dword_1CB82C000);
  int v5 = 3;
  unint64_t v4 = &v5;
  int v3 = 1;
  int v1 = 1;
  v2.n128_u64[0] = (unint64_t)"The max version for the optimized memory  intrinsic calls";
  v2.n128_u64[1] = 57;
  sub_1CD4943F8((llvm::cl::Option *)&unk_1EBCEBA58, "pgo-memop-max-version", &v4, &v3, &v1, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCEBA58, &dword_1CB82C000);
  LOBYTE(v3) = 1;
  unint64_t v4 = &v3;
  int v5 = 1;
  v2.n128_u64[0] = (unint64_t)"Scale the memop size counts using the basic  block count value";
  v2.n128_u64[1] = 62;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCEBB18, "pgo-memop-scale-count", (unsigned char **)&v4, &v5, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEBB18, &dword_1CB82C000);
  LOBYTE(v3) = 1;
  unint64_t v4 = &v3;
  int v5 = 1;
  v2.n128_u64[0] = (unint64_t)"Size-specialize memcmp and bcmp calls";
  v2.n128_u64[1] = 37;
  sub_1CBA9E5B0((llvm::cl::Option *)&MemOPOptMemcmpBcmp, "pgo-memop-optimize-memcmp-bcmp", (unsigned char **)&v4, &v5, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &MemOPOptMemcmpBcmp, &dword_1CB82C000);
  int v5 = 1;
  int v3 = 128;
  unint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Optimize the memop size <= this value";
  v2.n128_u64[1] = 37;
  sub_1CD45A86C((uint64_t)&unk_1EBCEBBD8, "memop-value-prof-max-opt-size", &v5, &v4, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCEBBD8, &dword_1CB82C000);
}

uint64_t sub_1CCB4CD90(uint64_t ***a1)
{
  v267[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = ***a1;
  v212[0] = 0;
  v212[1] = 0;
  int v213 = 0;
  __n128 v2 = (uint64_t ***)a1[10];
  unint64_t v201 = a1 + 9;
  if (v2 != a1 + 9)
  {
    int v3 = (llvm::UndefValue *)(v1 + 1888);
    int v203 = (llvm::UndefValue *)(v1 + 1888);
    do
    {
      unint64_t v4 = v2 - 3;
      v202 = v2;
      if (!v2) {
        unint64_t v4 = 0;
      }
      for (uint64_t i = v4[6]; ; uint64_t i = (uint64_t **)v205[1])
      {
        BOOL v6 = i - 3;
        uint64_t v7 = i ? (uint64_t)(i - 3) : 0;
        if (*(unsigned char *)(v7 + 16) != 83) {
          break;
        }
        unsigned int v205 = i;
        int v8 = *((_DWORD *)i - 1) & 0x7FFFFFF;
        __int16 v254 = 257;
        unint64_t v9 = operator new(0x48uLL);
        v9[1] = v3;
        uint64_t v10 = (llvm::Value *)(v9 + 1);
        *unint64_t v9 = 0;
        void v9[2] = 0;
        v9[3] = 0x4000000000000053;
        *((_OWORD *)v9 + 2) = 0u;
        v204 = (char *)(v9 + 4);
        *((_OWORD *)v9 + 3) = 0u;
        *((_DWORD *)v9 + 16) = 0;
        *((_DWORD *)v9 + 17) = v8;
        llvm::Value::setNameImpl((llvm::Value *)(v9 + 1), (const char **)&v251);
        if (*((unsigned char *)v9 + 24)) {
          goto LABEL_11;
        }
        if ((*((unsigned char *)v9 + 31) & 0x10) == 0)
        {
LABEL_73:
          int v61 = 0;
          *((_DWORD *)v9 + 10) &= ~0x2000u;
          goto LABEL_74;
        }
        uint64_t v48 = ***(void ***)v10;
        uint64_t v49 = *(void *)(v48 + 152);
        uint64_t v50 = *(unsigned int *)(v48 + 168);
        if (!v50) {
          goto LABEL_65;
        }
        LODWORD(v51) = (v50 - 1) & ((v10 >> 4) ^ (v10 >> 9));
        uint64_t v52 = (llvm::Value **)(v49 + 16 * v51);
        uint64_t v53 = *v52;
        if (*v52 != v10)
        {
          int v54 = 1;
          while (v53 != (llvm::Value *)-4096)
          {
            int v55 = v51 + v54++;
            uint64_t v51 = v55 & (v50 - 1);
            uint64_t v53 = *(llvm::Value **)(v49 + 16 * v51);
            if (v53 == v10)
            {
              uint64_t v52 = (llvm::Value **)(v49 + 16 * v51);
              goto LABEL_66;
            }
          }
LABEL_65:
          uint64_t v52 = (llvm::Value **)(v49 + 16 * v50);
        }
LABEL_66:
        int v56 = v52[1];
        unint64_t v59 = *(void *)v56;
        uint64_t v57 = (char *)v56 + 16;
        unint64_t v58 = v59;
        if (v59 < 5) {
          goto LABEL_73;
        }
        if (*(_DWORD *)v57 != *(_DWORD *)"llvm." || v57[4] != aLlvm_1[4]) {
          goto LABEL_73;
        }
        *((_DWORD *)v9 + 10) |= 0x2000u;
        int v61 = llvm::Function::lookupIntrinsicID(v57, v58);
LABEL_74:
        *((_DWORD *)v9 + 11) = v61;
LABEL_11:
        uint64_t v11 = *((unsigned int *)v9 + 17);
        int v12 = operator new(40 * v11);
        *unint64_t v9 = v12;
        if (v11)
        {
          uint64_t v14 = &v12[4 * v11];
          do
          {
            *int v12 = 0;
            v12[1] = 0;
            v12[2] = 0;
            v12[3] = v10;
            v12 += 4;
          }
          while (v12 != v14);
        }
        if ((*((_DWORD *)v6 + 5) & 0x7FFFFFF) != 0)
        {
          unint64_t v15 = 0;
          do
          {
            uint64_t v16 = llvm::UndefValue::get(v3, v13);
            int v17 = *((_DWORD *)v6 + 5);
            if ((v17 & 0x40000000) != 0) {
              long long v18 = (uint64_t **)*(v6 - 1);
            }
            else {
              long long v18 = &v6[-4 * (v17 & 0x7FFFFFF)];
            }
            uint64_t v19 = (uint64_t)(&v18[4 * *((unsigned int *)v6 + 15)])[v15];
            int v20 = *((_DWORD *)v9 + 7);
            uint64_t v21 = v20 & 0x7FFFFFF;
            if ((v20 & 0x7FFFFFF) == *((_DWORD *)v9 + 17))
            {
              unsigned int v34 = v21 + (v21 >> 1);
              if (v34 <= 2) {
                uint64_t v35 = 2;
              }
              else {
                uint64_t v35 = v34;
              }
              *((_DWORD *)v9 + 17) = v35;
              if ((v20 & 0x40000000) != 0) {
                long long v36 = (uint64_t *)*v9;
              }
              else {
                long long v36 = (uint64_t *)((char *)v10 - 32 * v21);
              }
              long long __p = v36;
              uint64_t v37 = operator new(40 * v35);
              *unint64_t v9 = v37;
              uint64_t v38 = v37;
              do
              {
                void *v38 = 0;
                v38[1] = 0;
                void v38[2] = 0;
                v38[3] = v10;
                v38 += 4;
              }
              while (v38 != &v37[4 * v35]);
              int v39 = *((_DWORD *)v9 + 7);
              if ((v39 & 0x40000000) != 0) {
                uint64_t v40 = (uint64_t)v37;
              }
              else {
                uint64_t v40 = (uint64_t)v10 - 32 * (v39 & 0x7FFFFFF);
              }
              sub_1CC5E4108((uint64_t)&v251, __p, &__p[4 * v21], v40);
              if (v21)
              {
                memmove((void *)(v40 + 32 * v35), &__p[4 * v21], 8 * v21);
                uint64_t v41 = 4 * v21;
                do
                {
                  unsigned int v42 = &__p[v41];
                  if (__p[v41 - 4])
                  {
                    *(void *)*(v42 - 2) = *(v42 - 3);
                    uint64_t v43 = *(v42 - 3);
                    if (v43) {
                      *(void *)(v43 + 16) = *(v42 - 2);
                    }
                  }
                  v41 -= 4;
                }
                while (v41 * 8);
              }
              operator delete(__p);
              int v20 = *((_DWORD *)v9 + 7);
              int v3 = v203;
              uint64_t v10 = (llvm::Value *)(v9 + 1);
            }
            uint64_t v22 = (v20 + 1) & 0x7FFFFFF;
            *((_DWORD *)v9 + 7) = v20 & 0xF8000000 | (v20 + 1) & 0x7FFFFFF;
            if ((v20 & 0x40000000) != 0) {
              BOOL v23 = (char *)*v9;
            }
            else {
              BOOL v23 = (char *)v10 - 32 * v22;
            }
            uint64_t v24 = (v22 - 1);
            char v25 = &v23[32 * v24];
            if (*(void *)v25)
            {
              **((void **)v25 + 2) = *((void *)v25 + 1);
              uint64_t v33 = *((void *)v25 + 1);
              if (v33) {
                *(void *)(v33 + 16) = *((void *)v25 + 2);
              }
            }
            *(void *)char v25 = v16;
            if (v16)
            {
              uint64_t v28 = *((void *)v16 + 1);
              size_t v27 = (char **)((char *)v16 + 8);
              uint64_t v26 = v28;
              unint64_t v29 = &v23[32 * v24];
              *((void *)v29 + 1) = v28;
              if (v28) {
                *(void *)(v26 + 16) = v29 + 8;
              }
              *((void *)v29 + 2) = v27;
              *size_t v27 = v25;
            }
            int v30 = *((_DWORD *)v9 + 7);
            uint64_t v31 = v30 & 0x7FFFFFF;
            if ((v30 & 0x40000000) != 0) {
              uint64_t v32 = (char *)*v9;
            }
            else {
              uint64_t v32 = (char *)v10 - 32 * v31;
            }
            *(void *)&v32[32 * *((unsigned int *)v9 + 17) + 8 * (v31 - 1)] = v19;
            ++v15;
          }
          while (v15 < (*((_DWORD *)v6 + 5) & 0x7FFFFFFu));
        }
        uint64_t v44 = v6[5];
        v9[6] = v44;
        *((_WORD *)v44 + 9) &= ~0x8000u;
        if ((*((unsigned char *)v9 + 31) & 0x10) != 0)
        {
          uint64_t v46 = v44[7];
          if (v46)
          {
            uint64_t v47 = *(llvm::ValueSymbolTable **)(v46 + 104);
            if (v47) {
              llvm::ValueSymbolTable::reinsertValue(v47, v10);
            }
          }
        }
        uint64_t v45 = v6[3];
        v9[4] = v45;
        v9[5] = v6 + 3;
        v45[1] = (uint64_t)v204;
        v6[3] = (uint64_t *)v204;
        unint64_t v251 = v6;
        sub_1CC080DE0(v212, &v251)[1] = v10;
      }
      __n128 v2 = (uint64_t ***)v202[1];
    }
    while (v2 != v201);
    uint64_t v62 = a1[10];
    if (v62 != (uint64_t **)v201)
    {
      char v63 = &v222;
      while (1)
      {
        uint64_t v64 = v62 - 3;
        unint64_t v200 = v62;
        if (!v62) {
          uint64_t v64 = 0;
        }
        int v65 = v64 + 5;
        for (uint64_t j = v64[6]; j != (uint64_t *)v65; uint64_t j = (uint64_t *)j[1])
        {
          if (j) {
            uint64_t v67 = (uint64_t **)(j - 3);
          }
          else {
            uint64_t v67 = 0;
          }
          if (*((unsigned char *)v67 + 16) == 83) {
            continue;
          }
          uint64_t v68 = 0;
          size_t v69 = (uint64_t *)**v67;
          uint64_t v70 = v63;
          v221[0] = v63;
          v221[1] = (void *)0x200000000;
          int v225 = v69;
          unsigned int v226 = &v234;
          unsigned int v227 = &v235;
          uint64_t v228 = 0;
          int v229 = 0;
          __int16 v230 = 512;
          char v231 = 7;
          v223 = 0;
          unsigned int v224 = 0;
          uint64_t v232 = 0;
          uint64_t v233 = 0;
          uint64_t v234 = &unk_1F2616E88;
          unint64_t v235 = &unk_1F2617008;
          v223 = v67[5];
          unsigned int v224 = (char *)(v67 + 3);
          size_t v71 = v67[6];
          v236[0] = v71;
          if (v71)
          {
            llvm::MetadataTracking::track((uint64_t)v236, (unsigned __int8 *)v71, 2);
            uint64_t v68 = v236[0];
          }
          sub_1CB8461A4((uint64_t)v221, 0, (uint64_t)v68);
          if (v236[0])
          {
            int v117 = *(unsigned __int8 *)v236[0];
            if ((v117 - 4) > 0x1E)
            {
              if ((v117 - 3) >= 0xFFFFFFFE) {
                BOOL v123 = v236[0];
              }
              else {
                BOOL v123 = 0;
              }
              if ((v117 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v119 = (unint64_t)v123 + 8;
LABEL_162:
                unint64_t v251 = v236;
                sub_1CC5FA668(v119 + 16, &v251);
                goto LABEL_89;
              }
              if (v117 == 3) {
                *((void *)v236[0] + 1) = 0;
              }
            }
            else if ((*((unsigned char *)v236[0] + 1) & 0x7F) == 2 || *((_DWORD *)v236[0] + 3))
            {
              uint64_t v118 = *((void *)v236[0] + 2);
              if ((v118 & 4) != 0)
              {
                unint64_t v119 = v118 & 0xFFFFFFFFFFFFFFF8;
                if (v119) {
                  goto LABEL_162;
                }
              }
            }
          }
LABEL_89:
          v207 = v211;
          v208 = v211;
          uint64_t v209 = 4;
          int v210 = 0;
          llvm::getGuaranteedNonPoisonOps((uint64_t)v67, (uint64_t)&v207, 0);
          if (v208 == v207) {
            size_t v72 = (uint64_t *)((char *)&v209 + 4);
          }
          else {
            size_t v72 = &v209;
          }
          uint64_t v73 = *(unsigned int *)v72;
          if (v73)
          {
            uint64_t v74 = 8 * v73;
            BOOL v75 = v208;
            while (*(void *)v75 >= 0xFFFFFFFFFFFFFFFELL)
            {
              v75 += 8;
              v74 -= 8;
              if (!v74) {
                goto LABEL_104;
              }
            }
          }
          else
          {
            BOOL v75 = v208;
          }
          uint64_t v76 = &v208[8 * v73];
          if (v75 != v76)
          {
            std::string v77 = *(uint64_t ****)v75;
LABEL_100:
            uint64_t v78 = sub_1CCB4E498((uint64_t)v212, v77);
            sub_1CCB4E2D0((uint64_t *)v221, (uint64_t)v78, v79, v80);
            std::string::size_type v81 = (unint64_t *)(v75 + 8);
            while (v81 != (unint64_t *)v76)
            {
              unint64_t v82 = *v81++;
              std::string v77 = (uint64_t ***)v82;
              if (v82 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                BOOL v75 = (char *)(v81 - 1);
                goto LABEL_100;
              }
            }
          }
LABEL_104:
          if (byte_1EBCEBD18)
          {
            int v83 = *((unsigned __int8 *)v67 + 16);
            char v84 = v83 == 29 ? v67 : 0;
            if (j)
            {
              if (v83 == 29)
              {
                uint64_t v85 = *((_DWORD *)v84 + 5) & 0x7FFFFFF;
                if (v85)
                {
                  std::string v86 = sub_1CCB4E498((uint64_t)v212, (uint64_t ***)v84[-4 * v85]);
                  sub_1CCB4E2D0((uint64_t *)v221, (uint64_t)v86, v87, v88);
                }
              }
            }
          }
          int v218 = v220;
          uint64_t v219 = 0x400000000;
          int v89 = *((_DWORD *)v67 + 5);
          if ((v89 & 0x40000000) != 0)
          {
            uint64_t v91 = (uint64_t ****)*(v67 - 1);
            uint64_t v90 = v89 & 0x7FFFFFF;
          }
          else
          {
            uint64_t v90 = v89 & 0x7FFFFFF;
            uint64_t v91 = (uint64_t ****)&v67[-4 * v90];
          }
          uint64_t v92 = &v91[4 * v90];
          if (v90)
          {
            do
            {
              if (v213)
              {
                unsigned int v93 = ((*v91 >> 4) ^ (*v91 >> 9)) & (v213 - 1);
                int v94 = *(uint64_t ****)(v212[0] + 16 * v93);
                if (*v91 == v94)
                {
LABEL_118:
                  if (llvm::propagatesPoison((uint64_t)v91))
                  {
                    char v95 = sub_1CCB4E498((uint64_t)v212, *v91);
                    if (v219 >= (unint64_t)HIDWORD(v219)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v218 + v219) = v95;
                    LODWORD(v219) = v219 + 1;
                  }
                }
                else
                {
                  int v96 = 1;
                  while (v94 != (uint64_t ***)-4096)
                  {
                    unsigned int v97 = v93 + v96++;
                    unsigned int v93 = v97 & (v213 - 1);
                    int v94 = *(uint64_t ****)(v212[0] + 16 * v93);
                    if (*v91 == v94) {
                      goto LABEL_118;
                    }
                  }
                }
              }
              v91 += 4;
            }
            while (v91 != v92);
          }
          if (sub_1CC169B54((uint64_t)v67, 1, 1))
          {
            uint64_t v99 = 0;
            uint64_t v100 = **v67;
            v236[0] = v237;
            v236[1] = (void *)0x200000000;
            uint64_t v240 = v100;
            int v241 = &v249;
            uint64_t v242 = &v250;
            uint64_t v243 = 0;
            int v244 = 0;
            __int16 v245 = 512;
            char v246 = 7;
            int v238 = 0;
            BOOL v239 = 0;
            uint64_t v247 = 0;
            uint64_t v248 = 0;
            unint64_t v249 = &unk_1F2616E88;
            uint64_t v250 = &unk_1F2617008;
            int v238 = v67[5];
            BOOL v239 = (char *)(v67 + 3);
            BOOL v101 = (unsigned __int8 *)v67[6];
            v216[0] = v101;
            if (v101)
            {
              llvm::MetadataTracking::track((uint64_t)v216, v101, 2);
              uint64_t v99 = v216[0];
            }
            sub_1CB8461A4((uint64_t)v236, 0, v99);
            if (v216[0])
            {
              int v120 = *(unsigned __int8 *)v216[0];
              if ((v120 - 4) > 0x1E)
              {
                if ((v120 - 3) >= 0xFFFFFFFE) {
                  uint64_t v168 = v216[0];
                }
                else {
                  uint64_t v168 = 0;
                }
                if ((v120 - 3) < 0xFFFFFFFE)
                {
                  if (v120 == 3) {
                    *(void *)(v216[0] + 8) = 0;
                  }
                  goto LABEL_132;
                }
                unint64_t v122 = v168 + 8;
              }
              else
              {
                if ((*(unsigned char *)(v216[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v216[0] + 12)) {
                  goto LABEL_132;
                }
                uint64_t v121 = *(void *)(v216[0] + 16);
                if ((v121 & 4) == 0) {
                  goto LABEL_132;
                }
                unint64_t v122 = v121 & 0xFFFFFFFFFFFFFFF8;
                if (!v122) {
                  goto LABEL_132;
                }
              }
              unint64_t v251 = v216;
              sub_1CC5FA668(v122 + 16, &v251);
            }
LABEL_132:
            int v102 = *((unsigned __int8 *)v67 + 16);
            if ((v102 - 41) <= 0x11 && ((*v67)[1] & 0xFE) != 0x12)
            {
              uint64_t v103 = 0;
              uint64_t v104 = **v67;
              unint64_t v251 = v253;
              uint64_t v252 = 0x200000000;
              uint64_t v257 = v104;
              uint64_t v258 = &v266;
              size_t v259 = v267;
              uint64_t v260 = 0;
              int v261 = 0;
              __int16 v262 = 512;
              char v263 = 7;
              v255 = 0;
              size_t v256 = 0;
              uint64_t v264 = 0;
              uint64_t v265 = 0;
              size_t v266 = &unk_1F2616E88;
              v267[0] = &unk_1F2617008;
              v255 = v67[5];
              size_t v256 = (char *)(v67 + 3);
              int v105 = (unsigned __int8 *)v67[6];
              v214[0] = v105;
              if (v105)
              {
                llvm::MetadataTracking::track((uint64_t)v214, v105, 2);
                uint64_t v103 = v214[0];
              }
              sub_1CB8461A4((uint64_t)&v251, 0, v103);
              if (v214[0])
              {
                int v169 = *(unsigned __int8 *)v214[0];
                if ((v169 - 4) > 0x1E)
                {
                  if ((v169 - 3) >= 0xFFFFFFFE) {
                    uint64_t v172 = v214[0];
                  }
                  else {
                    uint64_t v172 = 0;
                  }
                  if ((v169 - 3) < 0xFFFFFFFE)
                  {
                    if (v169 == 3) {
                      *(void *)(v214[0] + 8) = 0;
                    }
                    goto LABEL_137;
                  }
                  unint64_t v171 = v172 + 8;
                }
                else
                {
                  if ((*(unsigned char *)(v214[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v214[0] + 12)) {
                    goto LABEL_137;
                  }
                  uint64_t v170 = *(void *)(v214[0] + 16);
                  if ((v170 & 4) == 0) {
                    goto LABEL_137;
                  }
                  unint64_t v171 = v170 & 0xFFFFFFFFFFFFFFF8;
                  if (!v171) {
                    goto LABEL_137;
                  }
                }
                v216[0] = v214;
                sub_1CC5FA668(v171 + 16, v216);
              }
LABEL_137:
              int v106 = *((_DWORD *)v67 + 5);
              if ((v106 & 0x40000000) != 0) {
                uint64_t v107 = (llvm::Value **)*(v67 - 1);
              }
              else {
                uint64_t v107 = (llvm::Value **)&v67[-4 * (v106 & 0x7FFFFFF)];
              }
              BOOL v108 = *v107;
              BOOL v109 = v107[4];
              switch(*((unsigned char *)v67 + 16))
              {
                case ')':
                  char v132 = *((unsigned char *)v67 + 17);
                  if ((v132 & 4) != 0)
                  {
                    __int16 v217 = 257;
                    BinaryIntrinsic = (uint64_t *)llvm::IRBuilderBase::CreateBinaryIntrinsic((llvm::IRBuilderBase *)&v251, 263, v108, v109, 0, (const llvm::Twine *)v216);
                    LODWORD(v214[0]) = 1;
                    __int16 v217 = 257;
                    size_t v134 = sub_1CC2415A4((uint64_t)&v251, BinaryIntrinsic, (unsigned int *)v214, 1, (uint64_t)v216);
                    if (v219 >= (unint64_t)HIDWORD(v219)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v218 + v219) = v134;
                    LODWORD(v219) = v219 + 1;
                    char v132 = *((unsigned char *)v67 + 17);
                  }
                  if ((v132 & 2) != 0)
                  {
                    __int16 v217 = 257;
                    int v128 = 301;
                    goto LABEL_183;
                  }
                  break;
                case '+':
                  char v129 = *((unsigned char *)v67 + 17);
                  if ((v129 & 4) != 0)
                  {
                    __int16 v217 = 257;
                    uint64_t v130 = (uint64_t *)llvm::IRBuilderBase::CreateBinaryIntrinsic((llvm::IRBuilderBase *)&v251, 284, v108, v109, 0, (const llvm::Twine *)v216);
                    LODWORD(v214[0]) = 1;
                    __int16 v217 = 257;
                    int v131 = sub_1CC2415A4((uint64_t)&v251, v130, (unsigned int *)v214, 1, (uint64_t)v216);
                    if (v219 >= (unint64_t)HIDWORD(v219)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v218 + v219) = v131;
                    LODWORD(v219) = v219 + 1;
                    char v129 = *((unsigned char *)v67 + 17);
                  }
                  if ((v129 & 2) != 0)
                  {
                    __int16 v217 = 257;
                    int v128 = 312;
                    goto LABEL_183;
                  }
                  break;
                case '-':
                  char v125 = *((unsigned char *)v67 + 17);
                  if ((v125 & 4) != 0)
                  {
                    __int16 v217 = 257;
                    uint64_t v126 = (uint64_t *)llvm::IRBuilderBase::CreateBinaryIntrinsic((llvm::IRBuilderBase *)&v251, 278, v108, v109, 0, (const llvm::Twine *)v216);
                    LODWORD(v214[0]) = 1;
                    __int16 v217 = 257;
                    uint64_t v127 = sub_1CC2415A4((uint64_t)&v251, v126, (unsigned int *)v214, 1, (uint64_t)v216);
                    if (v219 >= (unint64_t)HIDWORD(v219)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v218 + v219) = v127;
                    LODWORD(v219) = v219 + 1;
                    char v125 = *((unsigned char *)v67 + 17);
                  }
                  if ((v125 & 2) != 0)
                  {
                    __int16 v217 = 257;
                    int v128 = 309;
LABEL_183:
                    __int16 v135 = (uint64_t *)llvm::IRBuilderBase::CreateBinaryIntrinsic((llvm::IRBuilderBase *)&v251, v128, v108, v109, 0, (const llvm::Twine *)v216);
                    LODWORD(v214[0]) = 1;
                    __int16 v217 = 257;
                    int v116 = sub_1CC2415A4((uint64_t)&v251, v135, (unsigned int *)v214, 1, (uint64_t)v216);
                    goto LABEL_184;
                  }
                  break;
                case '/':
                  if ((*((unsigned char *)v67 + 17) & 2) != 0)
                  {
                    __int16 v217 = 257;
                    int v124 = sub_1CC57DDE0((uint64_t)&v251, (uint64_t)v108, (uint64_t)v109, (uint64_t)v216);
                    goto LABEL_167;
                  }
                  break;
                case '0':
                  if ((*((unsigned char *)v67 + 17) & 2) != 0)
                  {
                    __int16 v217 = 257;
                    int v124 = sub_1CD5AB298((uint64_t *)&v251, v108, (uint64_t)v109, (uint64_t)v216);
LABEL_167:
                    BOOL v109 = v124;
                    uint64_t v113 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v108, 0, 0);
                    __int16 v215 = 257;
                    uint64_t v114 = v214;
                    __int16 v115 = 33;
                    goto LABEL_144;
                  }
                  break;
                case '5':
                case '6':
                case '7':
                  uint64_t v110 = *(llvm::Type **)v108;
                  if ((*(_DWORD *)(*(void *)v108 + 8) & 0xFE) == 0x12) {
                    uint64_t v110 = (llvm::Type *)**((void **)v110 + 2);
                  }
                  size_t v111 = *(llvm::ConstantInt **)v109;
                  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v110);
                  uint64_t v113 = llvm::ConstantInt::get(v111, PrimitiveSizeInBits, 0);
                  __int16 v217 = 257;
                  uint64_t v114 = v216;
                  __int16 v115 = 35;
LABEL_144:
                  int v116 = sub_1CB845F20((uint64_t)&v251, v115, v109, (uint64_t)v113, (uint64_t)v114);
LABEL_184:
                  if (v219 >= (unint64_t)HIDWORD(v219)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v218 + v219) = v116;
                  LODWORD(v219) = v219 + 1;
                  break;
                default:
                  break;
              }
              if (v251 != v253) {
                free(v251);
              }
              int v102 = *((unsigned __int8 *)v67 + 16);
            }
            if (v102 == 90)
            {
              int v138 = *((_DWORD *)v67 + 5);
              if ((v138 & 0x40000000) != 0) {
                char v139 = (uint64_t **)*(v67 - 1);
              }
              else {
                char v139 = &v67[-4 * (v138 & 0x7FFFFFF)];
              }
              uint64_t v140 = **v139;
              if (v140 && *(unsigned char *)(v140 + 8) == 18)
              {
                if ((v138 & 0x40000000) != 0) {
                  __int16 v142 = (uint64_t **)*(v67 - 1);
                }
                else {
                  __int16 v142 = &v67[-4 * (v138 & 0x7FFFFFF)];
                }
                BOOL v143 = (llvm::ConstantInt **)v142[8];
LABEL_209:
                int64_t v144 = llvm::ConstantInt::get(*v143, *(unsigned int *)(v140 + 32), 0);
                __int16 v254 = 257;
                uint64_t v145 = sub_1CB845F20((uint64_t)v236, 35, v143, (uint64_t)v144, (uint64_t)&v251);
                if (v219 >= (unint64_t)HIDWORD(v219)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v218 + v219) = v145;
                LODWORD(v219) = v219 + 1;
              }
            }
            else if (v102 == 89)
            {
              int v136 = *((_DWORD *)v67 + 5);
              unint64_t v137 = (v136 & 0x40000000) != 0 ? (char *)*(v67 - 1) : (char *)&v67[-4 * (v136 & 0x7FFFFFF)];
              uint64_t v140 = **(void **)v137;
              if (v140)
              {
                if (*(unsigned char *)(v140 + 8) == 18)
                {
                  if ((v136 & 0x40000000) != 0) {
                    uint64_t v141 = (uint64_t **)*(v67 - 1);
                  }
                  else {
                    uint64_t v141 = &v67[-4 * (v136 & 0x7FFFFFF)];
                  }
                  BOOL v143 = (llvm::ConstantInt **)v141[4];
                  goto LABEL_209;
                }
              }
            }
            if (v236[0] != v237) {
              free(v236[0]);
            }
          }
          int v146 = v219;
          if (!v219) {
            goto LABEL_232;
          }
          uint64_t v147 = 0;
          uint64_t v148 = v218;
          while (1)
          {
            int v149 = (unsigned char *)*((void *)v218 + v147);
            if (!v149 || v149[16] != 16) {
              break;
            }
            uint64_t v151 = *((unsigned int *)v149 + 8);
            if (v151 >= 0x41)
            {
              int v152 = 0;
              int64_t v153 = (unint64_t)(v151 + 63) >> 6;
              do
              {
                BOOL v154 = v153-- < 1;
                if (v154) {
                  break;
                }
                unint64_t v155 = *(void *)(*((void *)v149 + 3) + 8 * v153);
                v152 += __clz(v155);
              }
              while (!v155);
              int v156 = v151 | 0xFFFFFFC0;
              if ((v151 & 0x3F) == 0) {
                int v156 = 0;
              }
              if (v152 + v156 != v151) {
                break;
              }
            }
            else if (*((void *)v149 + 3))
            {
              break;
            }
            if (++v147 == v219) {
              goto LABEL_232;
            }
          }
          if (v219 == v147)
          {
LABEL_232:
            uint64_t v157 = *v225;
            int v149 = *(unsigned char **)(*v225 + 1568);
            if (!v149)
            {
              unsigned int v166 = *(llvm::ConstantInt **)(v157 + 1888);
              unsigned int v167 = *(_DWORD *)(v157 + 1896);
              LODWORD(v252) = v167 >> 8;
              if (v167 >> 8 > 0x40) {
                operator new[]();
              }
              unint64_t v251 = 0;
              int v149 = llvm::ConstantInt::get(v166, (llvm::LLVMContext *)&v251, v98);
              if (v252 >= 0x41 && v251) {
                MEMORY[0x1D25D9CB0](v251, 0x1000C8000313F17);
              }
              *(void *)(v157 + 1568) = v149;
            }
            goto LABEL_233;
          }
          uint64_t v158 = (v147 + 1);
          if (v219 > v158)
          {
            while (1)
            {
              uint64_t v159 = v148[v158];
              if (v159) {
                BOOL v160 = *(unsigned char *)(v159 + 16) == 16;
              }
              else {
                BOOL v160 = 0;
              }
              if (!v160) {
                goto LABEL_248;
              }
              uint64_t v161 = *(unsigned int *)(v159 + 32);
              if (v161 >= 0x41) {
                break;
              }
              if (*(void *)(v159 + 24)) {
                goto LABEL_248;
              }
LABEL_249:
              if (v146 == ++v158) {
                goto LABEL_233;
              }
            }
            int v162 = 0;
            int64_t v163 = (unint64_t)(v161 + 63) >> 6;
            do
            {
              BOOL v154 = v163-- < 1;
              if (v154) {
                break;
              }
              unint64_t v164 = *(void *)(*(void *)(v159 + 24) + 8 * v163);
              v162 += __clz(v164);
            }
            while (!v164);
            int v165 = v161 | 0xFFFFFFC0;
            if ((v161 & 0x3F) == 0) {
              int v165 = 0;
            }
            if (v162 + v165 == v161) {
              goto LABEL_249;
            }
LABEL_248:
            __int16 v254 = 257;
            int v149 = sub_1CB844AF4((uint64_t)v221, v149, v159, (uint64_t)&v251);
            goto LABEL_249;
          }
LABEL_233:
          unint64_t v251 = v67;
          sub_1CC080DE0(v212, &v251)[1] = v149;
          if (v218 != v220) {
            free(v218);
          }
          char v63 = v70;
          if (v208 != v207) {
            free(v208);
          }
          if (v221[0] != v70) {
            free(v221[0]);
          }
        }
        uint64_t v62 = (uint64_t **)v200[1];
        if (v62 == (uint64_t **)v201)
        {
          for (uint64_t k = a1[10]; k != (uint64_t **)v201; uint64_t k = (uint64_t **)k[1])
          {
            int v174 = k - 3;
            if (!k) {
              int v174 = 0;
            }
            for (m = v174[6]; ; m = (uint64_t *)m[1])
            {
              int v176 = m - 3;
              uint64_t v177 = m ? (uint64_t)(m - 3) : 0;
              if (*(unsigned char *)(v177 + 16) != 83) {
                break;
              }
              if (v213)
              {
                unsigned int v178 = ((v176 >> 4) ^ (v176 >> 9)) & (v213 - 1);
                uint64_t v179 = *(uint64_t **)(v212[0] + 16 * v178);
                if (v176 == v179)
                {
LABEL_305:
                  unint64_t v251 = m - 3;
                  BOOL v180 = sub_1CC080DE0(v212, &v251);
                  int v181 = *((_DWORD *)m - 1);
                  unint64_t v182 = v181 & 0x7FFFFFF;
                  if ((v181 & 0x7FFFFFF) != 0)
                  {
                    unint64_t v183 = 0;
                    unint64_t v184 = 0;
                    uint64_t v185 = v180[1];
                    do
                    {
                      if ((v181 & 0x40000000) != 0) {
                        uint64_t v186 = (uint64_t *)*(m - 4);
                      }
                      else {
                        uint64_t v186 = &v176[-4 * v182];
                      }
                      size_t v187 = sub_1CCB4E498((uint64_t)v212, (uint64_t ***)v186[(unint64_t)v183 / 8]);
                      int v188 = *(_DWORD *)(v185 + 20);
                      if ((v188 & 0x40000000) != 0) {
                        uint64_t v189 = *(void *)(v185 - 8);
                      }
                      else {
                        uint64_t v189 = v185 - 32 * (v188 & 0x7FFFFFF);
                      }
                      uint64_t v190 = v189 + v183;
                      if (*(void *)(v189 + v183))
                      {
                        **(void **)(v190 + 16) = *(void *)(v190 + 8);
                        uint64_t v195 = *(void *)(v190 + 8);
                        if (v195) {
                          *(void *)(v195 + 16) = *(void *)(v190 + 16);
                        }
                      }
                      *(void *)uint64_t v190 = v187;
                      if (v187)
                      {
                        uint64_t v193 = v187[1];
                        unint64_t v191 = v187 + 1;
                        uint64_t v192 = v193;
                        uint64_t v194 = v189 + v183;
                        *(void *)(v194 + 8) = v193;
                        if (v193) {
                          *(void *)(v192 + 16) = v194 + 8;
                        }
                        *(void *)(v194 + 16) = v191;
                        void *v191 = v190;
                      }
                      ++v184;
                      int v181 = *((_DWORD *)m - 1);
                      unint64_t v182 = v181 & 0x7FFFFFF;
                      v183 += 32;
                    }
                    while (v184 < v182);
                  }
                }
                else
                {
                  int v196 = 1;
                  while (v179 != (uint64_t *)-4096)
                  {
                    unsigned int v197 = v178 + v196++;
                    unsigned int v178 = v197 & (v213 - 1);
                    uint64_t v179 = *(uint64_t **)(v212[0] + 16 * v178);
                    if (v176 == v179) {
                      goto LABEL_305;
                    }
                  }
                }
              }
            }
          }
          return MEMORY[0x1D25D9CD0](v212[0], 8);
        }
      }
    }
  }
  return MEMORY[0x1D25D9CD0](v212[0], 8);
}

double llvm::PoisonCheckingPass::run@<D0>(uint64_t ***a1@<X1>, uint64_t a2@<X8>)
{
  sub_1CCB4CD90(a1);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = a2 + 32;
  *(void *)(a2 + 8) = a2 + 32;
  *(void *)&double result = 2;
  *(void *)(a2 + 16) = 2;
  *(void *)(a2 + 48) = a2 + 80;
  *(void *)(a2 + 56) = a2 + 80;
  *(_DWORD *)(a2 + 64) = 2;
  return result;
}

uint64_t sub_1CCB4E2D0(uint64_t *a1, uint64_t a2, uint64_t a3, llvm::Instruction *a4)
{
  __int16 v26 = 257;
  int v5 = sub_1CC2427E8((uint64_t)a1, a2, (uint64_t)v25, a4);
  unint64_t v29 = v5;
  if (!v5 || *((unsigned char *)v5 + 16) != 16 || (uint64_t result = llvm::Constant::isAllOnesValue(v5), (result & 1) == 0))
  {
    uint64_t v7 = *(void **)(*(void *)(a1[6] + 56) + 40);
    sub_1CD57B9C0((uint64_t)v7, "__poison_checker_assert", (const char *)0x17, 0, (uint64_t **)(*(void *)*v7 + 1576), *(void *)*v7 + 1888);
    int v8 = (uint64_t *)v7[14];
    unsigned int v9 = *((_DWORD *)v8 + 8);
    if (v9 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v9;
    }
    if (v9 <= 0x16) {
      size_t v11 = v10;
    }
    else {
      size_t v11 = 23;
    }
    uint64_t v12 = *((unsigned int *)v8 + 2);
    if (v12)
    {
      uint64_t v13 = 0;
      int v14 = 0;
      do
        int v14 = 33 * v14 + aPoisonCheckerA[v13++];
      while (v11 != v13);
      unsigned int v15 = v12 - 1;
      uint64_t v16 = *v8;
      uint64_t v24 = *((unsigned int *)v8 + 2);
      uint64_t v17 = *v8 + 8 * v12 + 8;
      int v18 = 1;
      int v19 = v14;
      while (1)
      {
        uint64_t v20 = v19 & v15;
        uint64_t v21 = *(void **)(v16 + 8 * v20);
        if (v21 != (void *)-8)
        {
          if (!v21) {
            goto LABEL_25;
          }
          if (*(_DWORD *)(v17 + 4 * v20) == v14
            && v11 == *v21
            && !memcmp("__poison_checker_assert", (char *)v21 + *((unsigned int *)v8 + 5), v11))
          {
            break;
          }
        }
        int v19 = v18 + v20;
        ++v18;
      }
      if (v20 != -1 && (int)v20 != v24)
      {
        uint64_t v22 = *(void *)(*(void *)(v16 + 8 * (int)v20) + 8);
        if (!v22)
        {
LABEL_26:
          BOOL v23 = 0;
          goto LABEL_27;
        }
        if (!*(unsigned char *)(v22 + 16))
        {
          BOOL v23 = *(uint64_t ***)(v22 + 24);
LABEL_27:
          __int16 v28 = 257;
          return sub_1CB845BAC(a1, v23, (uint64_t **)v22, (uint64_t *)&v29, 1, (uint64_t)v27, 0);
        }
      }
    }
LABEL_25:
    uint64_t v22 = 0;
    goto LABEL_26;
  }
  return result;
}

void *sub_1CCB4E498(uint64_t a1, uint64_t ***a2)
{
  size_t v11 = a2;
  uint64_t v12 = 0;
  if (sub_1CBA0E618(a1, &v11, &v12) && v12 != *(void *)a1 + 16 * *(unsigned int *)(a1 + 16)) {
    return *(void **)(v12 + 8);
  }
  BOOL v6 = **a2;
  uint64_t v7 = *v6;
  uint64_t result = *(void **)(*v6 + 1568);
  if (!result)
  {
    int v8 = *(llvm::ConstantInt **)(v7 + 1888);
    unsigned int v9 = *(_DWORD *)(v7 + 1896);
    unsigned int v13 = v9 >> 8;
    if (v9 >> 8 > 0x40) {
      operator new[]();
    }
    uint64_t v12 = 0;
    uint64_t result = llvm::ConstantInt::get(v8, (llvm::LLVMContext *)&v12, v4);
    if (v13 >= 0x41)
    {
      if (v12)
      {
        uint64_t v10 = result;
        MEMORY[0x1D25D9CB0](v12, 0x1000C8000313F17);
        uint64_t result = v10;
      }
    }
    *(void *)(v7 + 1568) = result;
  }
  return result;
}

uint64_t sub_1CCB4E5E4()
{
  char v2 = 0;
  int v3 = &v2;
  *(void *)&long long v1 = "Check that returns are non-poison (for testing)";
  *((void *)&v1 + 1) = 47;
  sub_1CD698B68(&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, qword_1EBCEBC98, &dword_1CB82C000);
}

uint64_t sub_1CCB4E64C(uint64_t result, int *a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)(result + 368) = 0u;
  *(_OWORD *)(result + 384) = 0u;
  *(_OWORD *)(result + 336) = 0u;
  *(_OWORD *)(result + 352) = 0u;
  *(_OWORD *)(result + 304) = 0u;
  *(_OWORD *)(result + 320) = 0u;
  *(_OWORD *)(result + 272) = 0u;
  *(_OWORD *)(result + 288) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  *(void *)(result + 592) = 0;
  *(_OWORD *)(result + 560) = 0u;
  *(_OWORD *)(result + 576) = 0u;
  *(_OWORD *)(result + 528) = 0u;
  *(_OWORD *)(result + 544) = 0u;
  *(void *)(result + 648) = result + 664;
  *(void *)(result + 656) = 0x1400000000;
  *(void *)(result + 824) = result + 840;
  *(void *)(result + 832) = 0x1400000000;
  int v4 = *a2;
  char v5 = *((unsigned char *)a2 + 4);
  char v6 = *((unsigned char *)a2 + 5);
  char v7 = *((unsigned char *)a2 + 6);
  char v8 = *((unsigned char *)a2 + 7);
  char v9 = *((unsigned char *)a2 + 8);
  char v10 = *((unsigned char *)a2 + 9);
  int v11 = *((unsigned __int8 *)a2 + 10);
  char v12 = *((unsigned char *)a2 + 11);
  int v13 = *((unsigned __int8 *)a2 + 12);
  int v14 = *((unsigned __int8 *)a2 + 13);
  char v15 = *((unsigned char *)a2 + 14);
  char v16 = *((unsigned char *)a2 + 15);
  int v17 = *((unsigned __int8 *)a2 + 16);
  int v18 = *((unsigned __int8 *)a2 + 17);
  int v19 = *((unsigned __int8 *)a2 + 18);
  int v20 = dword_1EBCEBDE8 - 1;
  char v21 = *((unsigned char *)a2 + 19);
  if ((dword_1EBCEBDE8 - 1) > 3)
  {
    int v22 = 0;
    LOBYTE(v23) = 0;
  }
  else
  {
    int v22 = dword_1CFB28650[v20];
    unsigned int v23 = 0x1000000u >> (8 * v20);
  }
  if (v4 > v22) {
    int v22 = v4;
  }
  char v24 = v23 | v5;
  char v25 = byte_1EBCEC268 | v7;
  char v26 = byte_1EBCEC328 | v8;
  char v27 = byte_1EBCEC568 | v9;
  int v28 = byte_1EBCEBEA8 | v11;
  unsigned __int8 v29 = byte_1EBCEBF68 | v12;
  int v30 = byte_1EBCEC0E8 | v13;
  int v31 = byte_1EBCEC1A8 | v14;
  char v32 = byte_1EBCEC028 | v15;
  char v33 = byte_1EBCEC628 ^ 1 | v16;
  int v34 = byte_1EBCEC6E8 | v17;
  int v35 = byte_1EBCEC3E8 | v18;
  int v36 = byte_1EBCEC4A8 | v19;
  char v37 = byte_1EBCEC7A8 | v21;
  *(_DWORD *)(result + 1000) = v22;
  if (v29 | v28 | v30 | v34 | v31 | v35 | v36) {
    char v38 = v29;
  }
  else {
    char v38 = 1;
  }
  *(unsigned char *)(result + 1004) = v24;
  *(unsigned char *)(result + 1005) = v6;
  *(unsigned char *)(result + 1006) = v25;
  *(unsigned char *)(result + 1007) = v26;
  *(unsigned char *)(result + 1008) = v27;
  *(unsigned char *)(result + 1009) = v10;
  *(unsigned char *)(result + 1010) = v28;
  *(unsigned char *)(result + 1011) = v38;
  *(unsigned char *)(result + 1012) = v30;
  *(unsigned char *)(result + 1013) = v31;
  *(unsigned char *)(result + 1014) = v32;
  *(unsigned char *)(result + 1015) = v33;
  *(unsigned char *)(result + 1016) = v34;
  *(unsigned char *)(result + 1017) = v35;
  *(unsigned char *)(result + 1018) = v36;
  *(unsigned char *)(result + 1019) = v37;
  *(void *)(result + 1024) = a3;
  *(void *)(result + 1032) = a4;
  return result;
}

uint64_t sub_1CCB4E838(uint64_t a1, size_t *this, void (*a3)(uint64_t, uint64_t **), uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v723 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a1 + 1000)) {
    return 0;
  }
  char v12 = (llvm *)this;
  int v14 = *(uint64_t ***)(a1 + 1024);
  if (!v14
    || ((char v52 = *((unsigned char *)this + 215), v52 >= 0)
      ? (uint64_t v53 = (unsigned __int8 *)(this + 24))
      : (uint64_t v53 = (unsigned __int8 *)this[24]),
        v52 >= 0 ? (size_t v54 = v52 & 0x7F) : (size_t v54 = this[25]),
        uint64_t result = llvm::SpecialCaseList::inSectionBlame(v14, "coverage", 8uLL, "src", 3uLL, v53, v54, a8, 0, 0),
        result))
  {
    char v15 = *(uint64_t ***)(a1 + 1032);
    if (v15)
    {
      char v55 = *((unsigned char *)v12 + 215);
      int v56 = v55 >= 0 ? (unsigned __int8 *)v12 + 192 : (unsigned __int8 *)*((void *)v12 + 24);
      size_t v57 = v55 >= 0 ? v55 & 0x7F : *((void *)v12 + 25);
      if (llvm::SpecialCaseList::inSectionBlame(v15, "coverage", 8uLL, "src", 3uLL, v56, v57, a8, 0, 0))return 0; {
    }
      }
    *(void *)(a1 + 600) = *(void *)v12;
    *(void *)(a1 + 608) = (char *)v12 + 272;
    *(void *)(a1 + 520) = v12;
    llvm::getUniqueModuleId(v12, (uint64_t)&__p);
    char v16 = (void **)(a1 + 528);
    if (*(char *)(a1 + 551) < 0) {
      operator delete(*v16);
    }
    *(_OWORD *)char v16 = __p;
    *(void *)(a1 + 544) = *(void *)v683;
    __int16 v678 = 260;
    *(void *)&long long __s1 = (char *)v12 + 216;
    llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)&__s1);
    int v17 = (void **)(a1 + 552);
    if (*(char *)(a1 + 575) < 0) {
      operator delete(*v17);
    }
    *(_OWORD *)int v17 = __p;
    uint64_t v18 = v684;
    *(void *)(a1 + 568) = *(void *)v683;
    *(_OWORD *)(a1 + 576) = *(_OWORD *)&v683[8];
    *(void *)(a1 + 592) = v18;
    *(_OWORD *)(a1 + 616) = 0u;
    *(_OWORD *)(a1 + 632) = 0u;
    int v19 = (llvm::PointerType *)llvm::IntegerType::get(*(llvm::IntegerType **)(a1 + 600), (llvm::LLVMContext *)*(unsigned int *)(*(void *)(*(void *)(a1 + 608) + 232) + 4));
    *(void *)(a1 + 424) = v19;
    *(void *)(a1 + 432) = llvm::PointerType::get(v19, 0);
    int v20 = *(uint64_t **)(a1 + 600);
    char v21 = (uint64_t **)(*v20 + 1576);
    int v22 = v646;
    v644 = v646;
    uint64_t v645 = 0x200000000;
    v647 = v20;
    v648 = &v656;
    v649 = &v657;
    uint64_t v650 = 0;
    int v651 = 0;
    __int16 v652 = 512;
    char v653 = 7;
    v646[4] = 0;
    v646[5] = 0;
    uint64_t v655 = 0;
    uint64_t v654 = 0;
    v656 = &unk_1F2616E88;
    v657 = &unk_1F2617008;
    *(void *)(a1 + 416) = llvm::PointerType::get((llvm::PointerType *)(*v20 + 2008), 0);
    *(void *)(a1 + 448) = llvm::PointerType::get((llvm::PointerType *)(*v647 + 1984), 0);
    *(void *)(a1 + 472) = llvm::PointerType::get((llvm::PointerType *)(*v647 + 1936), 0);
    *(void *)(a1 + 464) = llvm::PointerType::get((llvm::PointerType *)(*v647 + 1960), 0);
    *(void *)(a1 + 496) = llvm::PointerType::get((llvm::PointerType *)(*v647 + 1912), 0);
    *(void *)(a1 + 512) = llvm::PointerType::get((llvm::PointerType *)(*v647 + 1888), 0);
    uint64_t v23 = *v647;
    *(void *)(a1 + 440) = *v647 + 1984;
    *(void *)(a1 + 456) = v23 + 1960;
    *(void *)(a1 + 480) = v23 + 1936;
    *(void *)(a1 + 488) = v23 + 1912;
    *(void *)(a1 + 504) = v23 + 1888;
    *(void *)a1 = sub_1CD57B9C0((uint64_t)v12, "__sanitizer_cov_trace_pc_indir", (const char *)0x1E, 0, v21, *(void *)(a1 + 424));
    *(void *)(a1 + 8) = v24;
    uint64_t v640 = 0;
    uint64_t v640 = llvm::AttributeList::addAttributeAtIndex(&v640, *(uint64_t **)(a1 + 600), 1, 67);
    uint64_t v640 = llvm::AttributeList::addAttributeAtIndex(&v640, *(uint64_t **)(a1 + 600), 2, 67);
    *(void *)(a1 + 48) = sub_1CD661480((uint64_t)v12, "__sanitizer_cov_trace_cmp1", (const char *)0x1A, v640, v21, *v647 + 1912, *v647 + 1912);
    *(void *)(a1 + 56) = v25;
    *(void *)(a1 + 64) = sub_1CD661480((uint64_t)v12, "__sanitizer_cov_trace_cmp2", (const char *)0x1A, v640, v21, *v647 + 1936, *v647 + 1936);
    *(void *)(a1 + 72) = v26;
    *(void *)(a1 + 80) = sub_1CD661480((uint64_t)v12, "__sanitizer_cov_trace_cmp4", (const char *)0x1A, v640, v21, *v647 + 1960, *v647 + 1960);
    *(void *)(a1 + 88) = v27;
    *(void *)(a1 + 96) = sub_1CD661480((uint64_t)v12, "__sanitizer_cov_trace_cmp8", (const char *)0x1A, 0, v21, *(void *)(a1 + 440), *(void *)(a1 + 440));
    *(void *)(a1 + 104) = v28;
    *(void *)(a1 + 112) = sub_1CD661480((uint64_t)v12, "__sanitizer_cov_trace_const_cmp1", (const char *)0x20, v640, v21, *(void *)(a1 + 488), *(void *)(a1 + 488));
    *(void *)(a1 + 120) = v29;
    *(void *)(a1 + 128) = sub_1CD661480((uint64_t)v12, "__sanitizer_cov_trace_const_cmp2", (const char *)0x20, v640, v21, *(void *)(a1 + 480), *(void *)(a1 + 480));
    *(void *)(a1 + 136) = v30;
    *(void *)(a1 + 144) = sub_1CD661480((uint64_t)v12, "__sanitizer_cov_trace_const_cmp4", (const char *)0x20, v640, v21, *(void *)(a1 + 456), *(void *)(a1 + 456));
    *(void *)(a1 + 152) = v31;
    *(void *)(a1 + 160) = sub_1CD661480((uint64_t)v12, "__sanitizer_cov_trace_const_cmp8", (const char *)0x20, 0, v21, *(void *)(a1 + 440), *(void *)(a1 + 440));
    *(void *)(a1 + 168) = v32;
    *(void *)(a1 + 176) = sub_1CD57B9C0((uint64_t)v12, "__sanitizer_cov_load1", (const char *)0x15, 0, v21, *(void *)(a1 + 496));
    *(void *)(a1 + 184) = v33;
    *(void *)(a1 + 192) = sub_1CD57B9C0((uint64_t)v12, "__sanitizer_cov_load2", (const char *)0x15, 0, v21, *(void *)(a1 + 472));
    *(void *)(a1 + 200) = v34;
    *(void *)(a1 + 208) = sub_1CD57B9C0((uint64_t)v12, "__sanitizer_cov_load4", (const char *)0x15, 0, v21, *(void *)(a1 + 464));
    *(void *)(a1 + 216) = v35;
    *(void *)(a1 + 224) = sub_1CD57B9C0((uint64_t)v12, "__sanitizer_cov_load8", (const char *)0x15, 0, v21, *(void *)(a1 + 448));
    *(void *)(a1 + 232) = v36;
    *(void *)(a1 + 240) = sub_1CD57B9C0((uint64_t)v12, "__sanitizer_cov_load16", (const char *)0x16, 0, v21, *(void *)(a1 + 416));
    *(void *)(a1 + 248) = v37;
    *(void *)(a1 + 256) = sub_1CD57B9C0((uint64_t)v12, "__sanitizer_cov_store1", (const char *)0x16, 0, v21, *(void *)(a1 + 496));
    *(void *)(a1 + 264) = v38;
    *(void *)(a1 + 272) = sub_1CD57B9C0((uint64_t)v12, "__sanitizer_cov_store2", (const char *)0x16, 0, v21, *(void *)(a1 + 472));
    *(void *)(a1 + 280) = v39;
    *(void *)(a1 + 288) = sub_1CD57B9C0((uint64_t)v12, "__sanitizer_cov_store4", (const char *)0x16, 0, v21, *(void *)(a1 + 464));
    *(void *)(a1 + 296) = v40;
    *(void *)(a1 + 304) = sub_1CD57B9C0((uint64_t)v12, "__sanitizer_cov_store8", (const char *)0x16, 0, v21, *(void *)(a1 + 448));
    *(void *)(a1 + 312) = v41;
    *(void *)(a1 + 320) = sub_1CD57B9C0((uint64_t)v12, "__sanitizer_cov_store16", (const char *)0x17, 0, v21, *(void *)(a1 + 416));
    *(void *)(a1 + 328) = v42;
    *(void *)&long long __p = 0;
    *(void *)&long long __p = llvm::AttributeList::addAttributeAtIndex((uint64_t *)&__p, *(uint64_t **)(a1 + 600), 1, 67);
    *(void *)(a1 + 336) = sub_1CD57B9C0((uint64_t)v12, "__sanitizer_cov_trace_div4", (const char *)0x1A, __p, v21, *v647 + 1960);
    *(void *)(a1 + 344) = v43;
    *(void *)(a1 + 352) = sub_1CD57B9C0((uint64_t)v12, "__sanitizer_cov_trace_div8", (const char *)0x1A, 0, v21, *(void *)(a1 + 440));
    *(void *)(a1 + 360) = v44;
    *(void *)(a1 + 368) = sub_1CD57B9C0((uint64_t)v12, "__sanitizer_cov_trace_gep", (const char *)0x19, 0, v21, *(void *)(a1 + 424));
    *(void *)(a1 + 376) = v45;
    *(void *)(a1 + 384) = sub_1CD661480((uint64_t)v12, "__sanitizer_cov_trace_switch", (const char *)0x1C, 0, v21, *(void *)(a1 + 440), *(void *)(a1 + 448));
    *(void *)(a1 + 392) = v46;
    inserted = llvm::Module::getOrInsertGlobal((uint64_t)v12, "__sancov_lowest_stack", 0x15uLL, *(llvm::PointerType **)(a1 + 424));
    if (*((unsigned char *)inserted + 16) == 3) {
      uint64_t v50 = inserted;
    }
    else {
      uint64_t v50 = 0;
    }
    *(void *)(a1 + 400) = v50;
    if (!v50 || *((void *)v50 + 3) != *(void *)(a1 + 424))
    {
      uint64_t v58 = *(void *)(a1 + 600);
      __int16 v678 = 773;
      *(void *)&long long __s1 = "'";
      *((void *)&__s1 + 1) = 1;
      v677[0] = "__sancov_lowest_stack";
      unint64_t v59 = "' should not be declared by the user";
LABEL_37:
      *(void *)&long long __p = &__s1;
      *(void *)v683 = v59;
      *(_WORD *)&v683[16] = 770;
      llvm::LLVMContext::emitError(v58, (uint64_t)&__p);
LABEL_38:
      if (v644 != v22) {
        free(v644);
      }
      return 1;
    }
    *((_DWORD *)v50 + 8) = *((_DWORD *)v50 + 8) & 0xFFFFE3FF | 0xC00;
    if (*(unsigned char *)(a1 + 1016))
    {
      uint64_t v51 = *(void *)(a1 + 400);
      if (v51 && *(unsigned char *)(v51 + 16) == 3)
      {
        if ((*(_DWORD *)(v51 + 20) & 0x7FFFFFF) == 0) {
          goto LABEL_45;
        }
LABEL_44:
        AllOnesValue = (llvm::Constant *)llvm::Constant::getAllOnesValue(*(llvm::Constant **)(a1 + 424), v48, v49);
        llvm::GlobalVariable::setInitializer(v51, AllOnesValue);
        goto LABEL_45;
      }
      if (*(unsigned char *)(v51 + 16) || *(void *)(v51 + 72) != v51 + 72 || (*(unsigned char *)(v51 + 34) & 0x80) != 0) {
        goto LABEL_44;
      }
    }
LABEL_45:
    if (!*(unsigned char *)(a1 + 1019)) {
      goto LABEL_73;
    }
    if (!*(unsigned char *)(a1 + 1011))
    {
      uint64_t v58 = *(void *)(a1 + 600);
      *(void *)&long long __s1 = "'";
      *((void *)&__s1 + 1) = 1;
      v677[0] = qword_1EBCEC738;
      v677[1] = unk_1EBCEC740;
      __int16 v678 = 1285;
      unint64_t v59 = "' is only supported with trace-pc-guard";
      goto LABEL_37;
    }
    uint64_t v625 = a4;
    v626 = a5;
    a5 = a6;
    a6 = v646;
    int v61 = v12;
    uint64_t v62 = llvm::Module::getOrInsertGlobal((uint64_t)v12, "__sancov_should_track", 0x15uLL, *(llvm::PointerType **)(a1 + 440));
    *(void *)(a1 + 408) = v62;
    HIBYTE(v677[0]) = 11;
    strcpy((char *)&__s1, "sancov_gate");
    sub_1CCB542E8((uint64_t)&__p, *(_DWORD *)(a1 + 596), &__s1);
    char v64 = v683[7];
    if (v683[7] >= 0) {
      p_p = (llvm::detail::IEEEFloat *)&__p;
    }
    else {
      p_p = (llvm::detail::IEEEFloat *)__p;
    }
    if (v683[7] >= 0) {
      size_t v66 = v683[7] & 0x7F;
    }
    else {
      size_t v66 = *((void *)&__p + 1);
    }
    if ((*((unsigned char *)v62 + 34) & 0x40) == 0 && !v66)
    {
LABEL_61:
      char v12 = v61;
      int v22 = a6;
      a6 = a5;
      a4 = v625;
      a5 = v626;
      if (v64 < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v677[0]) < 0) {
        operator delete((void *)__s1);
      }
      uint64_t v75 = *(void *)(a1 + 408);
      NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 440), v63, (const llvm::APFloat *)v66);
      llvm::GlobalVariable::setInitializer(v75, NullValue);
      std::string v77 = *(llvm::GlobalValue **)(a1 + 408);
      int v78 = *((_DWORD *)v77 + 8);
      *((_DWORD *)v77 + 8) = v78 & 0xFFFFFFF0 | 2;
      if ((v78 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v77) & 1) == 0) {
        *((_DWORD *)v77 + 8) |= 0x4000u;
      }
      uint64_t v79 = *(llvm::GlobalValue **)(a1 + 408);
      int v80 = *((_DWORD *)v79 + 8);
      unsigned int v81 = v80 & 0xFFFFFFCF | 0x10;
      *((_DWORD *)v79 + 8) = v81;
      if ((v80 & 0xFu) - 7 >= 2)
      {
        if (llvm::GlobalValue::hasExternalWeakLinkage(v79))
        {
LABEL_72:
          *(void *)&long long __p = *(void *)(a1 + 408);
          sub_1CD1CF0D0(v12, "llvm.compiler.used", (const char *)0x12, (llvm::ConstantExpr **)&__p, 1);
LABEL_73:
          *(void *)(a1 + 16) = sub_1CD577C30((uint64_t)v12, "__sanitizer_cov_trace_pc", (const char *)0x18, 0, v21);
          *(void *)(a1 + 24) = v82;
          *(void *)(a1 + 32) = sub_1CD57B9C0((uint64_t)v12, "__sanitizer_cov_trace_pc_guard", (const char *)0x1E, 0, v21, *(void *)(a1 + 464));
          *(void *)(a1 + 40) = v83;
          char v84 = (char *)*((void *)v12 + 4);
          v636 = (char *)v12 + 24;
          if (v84 == (char *)v12 + 24)
          {
LABEL_975:
            if (*(void *)(a1 + 616)) {
              sub_1CCB544B4(a1, (uint64_t *)v12, "sancov.module_ctor_trace_pc_guard", "__sanitizer_cov_trace_pc_guard_init", *(llvm::PointerType **)(a1 + 456), "sancov_guards");
            }
            if (*(void *)(a1 + 624)) {
              sub_1CCB544B4(a1, (uint64_t *)v12, "sancov.module_ctor_8bit_counters", "__sanitizer_cov_8bit_counters_init", *(llvm::PointerType **)(a1 + 488), "sancov_cntrs");
            }
            if (*(void *)(a1 + 632)) {
              sub_1CCB544B4(a1, (uint64_t *)v12, "sancov.module_ctor_BOOL_flag", "__sanitizer_cov_BOOL_flag_init", *(llvm::PointerType **)(a1 + 504), "sancov_BOOLs");
            }
            sub_1CD1CF0D0(v12, "llvm.used", (const char *)9, *(llvm::ConstantExpr ***)(a1 + 648), *(unsigned int *)(a1 + 656));
            sub_1CD1CF0D0(v12, "llvm.compiler.used", (const char *)0x12, *(llvm::ConstantExpr ***)(a1 + 824), *(unsigned int *)(a1 + 832));
            goto LABEL_38;
          }
          while (1)
          {
            if (v84) {
              char v21 = (uint64_t **)(v84 - 56);
            }
            else {
              char v21 = 0;
            }
            uint64_t v85 = (llvm::detail::IEEEFloat *)(v21 + 9);
            if (v21[9] == (uint64_t *)(v21 + 9)) {
              goto LABEL_88;
            }
            int v86 = *((_DWORD *)v21 + 5);
            p_p = (llvm::detail::IEEEFloat *)(v21 >> 4);
            v637 = v84;
            if ((v86 & 0x10000000) != 0) {
              break;
            }
            int v96 = 0;
            unsigned int v97 = &byte_1CFBCE98E;
LABEL_87:
            *(void *)&long long __p = v97;
            *((void *)&__p + 1) = v96;
            uint64_t v99 = llvm::StringRef::find((uint64_t *)&__p, ".module_ctor", 0xCuLL, 0);
            char v84 = v637;
            if (v99 != -1) {
              goto LABEL_88;
            }
            if ((v86 & 0x10000000) != 0)
            {
              uint64_t v102 = *(void *)**v21;
              uint64_t v103 = *(void *)(v102 + 152);
              uint64_t v104 = *(unsigned int *)(v102 + 168);
              if (!v104) {
                goto LABEL_97;
              }
              LODWORD(v105) = (v104 - 1) & (p_p ^ (v21 >> 9));
              int v106 = (uint64_t ***)(v103 + 16 * v105);
              uint64_t v107 = *v106;
              if (*v106 != v21)
              {
                int v108 = 1;
                while (v107 != (uint64_t **)-4096)
                {
                  int v109 = v105 + v108++;
                  uint64_t v105 = v109 & (v104 - 1);
                  uint64_t v107 = *(uint64_t ***)(v103 + 16 * v105);
                  if (v107 == v21)
                  {
                    int v106 = (uint64_t ***)(v103 + 16 * v105);
                    goto LABEL_98;
                  }
                }
LABEL_97:
                int v106 = (uint64_t ***)(v103 + 16 * v104);
              }
LABEL_98:
              uint64_t v110 = v106[1];
              if ((unint64_t)*v110 >= 0xC)
              {
                size_t v111 = v110[2];
                int v112 = *((_DWORD *)v110 + 6);
                if (v111 == (uint64_t *)0x6974696E61735F5FLL && v112 == 1601332602) {
                  goto LABEL_88;
                }
              }
              if ((v21[4] & 0xF) == 1) {
                goto LABEL_88;
              }
              if (v104)
              {
                LODWORD(v114) = (v104 - 1) & (p_p ^ (v21 >> 9));
                __int16 v115 = (uint64_t ***)(v103 + 16 * v114);
                int v116 = *v115;
                if (*v115 != v21)
                {
                  int v117 = 1;
                  while (v116 != (uint64_t **)-4096)
                  {
                    int v118 = v114 + v117++;
                    uint64_t v114 = v118 & (v104 - 1);
                    int v116 = *(uint64_t ***)(v103 + 16 * v114);
                    if (v116 == v21)
                    {
                      __int16 v115 = (uint64_t ***)(v103 + 16 * v114);
                      goto LABEL_112;
                    }
                  }
                  goto LABEL_111;
                }
              }
              else
              {
LABEL_111:
                __int16 v115 = (uint64_t ***)(v103 + 16 * v104);
              }
LABEL_112:
              unint64_t v119 = v115[1];
              if (*v119 == (uint64_t *)28)
              {
                int v120 = v119[2];
                uint64_t v121 = v119[3];
                unint64_t v122 = v119[4];
                int v123 = *((_DWORD *)v119 + 10);
                BOOL v124 = v120 == (uint64_t *)0x5F6C61636F6C5F5FLL && v121 == (uint64_t *)0x72705F6F69647473;
                BOOL v125 = v124 && v122 == (uint64_t *)0x74706F5F66746E69;
                if (v125 && v123 == 1936617321) {
                  goto LABEL_88;
                }
              }
              if (v104)
              {
                LODWORD(v127) = (v104 - 1) & (p_p ^ (v21 >> 9));
                int v128 = (uint64_t ***)(v103 + 16 * v127);
                char v129 = *v128;
                if (*v128 != v21)
                {
                  int v130 = 1;
                  while (v129 != (uint64_t **)-4096)
                  {
                    int v131 = v127 + v130++;
                    uint64_t v127 = v131 & (v104 - 1);
                    char v129 = *(uint64_t ***)(v103 + 16 * v127);
                    if (v129 == v21)
                    {
                      int v128 = (uint64_t ***)(v103 + 16 * v127);
                      goto LABEL_130;
                    }
                  }
                  goto LABEL_129;
                }
              }
              else
              {
LABEL_129:
                int v128 = (uint64_t ***)(v103 + 16 * v104);
              }
LABEL_130:
              char v132 = v128[1];
              if (*v132 == (uint64_t *)27)
              {
                uint64_t v133 = v132[2];
                size_t v134 = v132[3];
                __int16 v135 = v132[4];
                uint64_t v136 = *(uint64_t *)((char *)v132 + 35);
                BOOL v137 = v133 == (uint64_t *)0x5F6C61636F6C5F5FLL && v134 == (uint64_t *)0x63735F6F69647473;
                BOOL v138 = v137 && v135 == (uint64_t *)0x6974706F5F666E61;
                if (v138 && v136 == 0x736E6F6974706F5FLL) {
                  goto LABEL_88;
                }
              }
LABEL_141:
              uint64_t v140 = v21[10];
              if (v140) {
                uint64_t v141 = v140 - 3;
              }
              else {
                uint64_t v141 = 0;
              }
              __int16 v142 = (void *)v141[5];
              if (v142) {
                BOOL v143 = v142 - 3;
              }
              else {
                BOOL v143 = 0;
              }
              if (*((unsigned __int8 *)v143 + 16) - 29 >= 0xB) {
                BOOL v143 = 0;
              }
              if (*((unsigned char *)v143 + 16) == 35) {
                goto LABEL_88;
              }
              if ((*((_WORD *)v21 + 9) & 8) != 0)
              {
                int64_t v144 = (v86 & 0x40000000) != 0
                     ? (llvm::Value **)*(v21 - 1)
                     : (llvm::Value **)&v21[-4 * (v86 & 0x7FFFFFF)];
                unsigned int v145 = llvm::classifyEHPersonality(*v144, v100);
                char v84 = v637;
                if (v145 - 7 < 2) {
                  goto LABEL_88;
                }
              }
              int v146 = *(uint64_t ***)(a1 + 1024);
              if (!v146)
              {
LABEL_156:
                uint64_t v147 = *(uint64_t ***)(a1 + 1032);
                if (!v147) {
                  goto LABEL_157;
                }
                if ((*((unsigned char *)v21 + 23) & 0x10) != 0)
                {
                  uint64_t v594 = *(void *)**v21;
                  uint64_t v595 = *(void *)(v594 + 152);
                  uint64_t v596 = *(unsigned int *)(v594 + 168);
                  if (!v596) {
                    goto LABEL_961;
                  }
                  LODWORD(v597) = (v596 - 1) & (p_p ^ (v21 >> 9));
                  uint64_t v598 = (uint64_t ***)(v595 + 16 * v597);
                  uint64_t v599 = *v598;
                  if (*v598 != v21)
                  {
                    int v600 = 1;
                    while (v599 != (uint64_t **)-4096)
                    {
                      int v601 = v597 + v600++;
                      uint64_t v597 = v601 & (v596 - 1);
                      uint64_t v599 = *(uint64_t ***)(v595 + 16 * v597);
                      if (v599 == v21)
                      {
                        uint64_t v598 = (uint64_t ***)(v595 + 16 * v597);
                        goto LABEL_962;
                      }
                    }
LABEL_961:
                    uint64_t v598 = (uint64_t ***)(v595 + 16 * v596);
                  }
LABEL_962:
                  __int16 v610 = v598[1];
                  size_t v613 = (size_t)*v610;
                  v611 = (unsigned __int8 *)(v610 + 2);
                  size_t v612 = v613;
                }
                else
                {
                  size_t v612 = 0;
                  v611 = (unsigned __int8 *)&byte_1CFBCE98E;
                }
                int v614 = llvm::SpecialCaseList::inSectionBlame(v147, "coverage", 8uLL, "fun", 3uLL, v611, v612, v101, 0, 0);
                char v84 = v637;
                uint64_t v85 = (llvm::detail::IEEEFloat *)(v21 + 9);
                if (v614) {
                  goto LABEL_88;
                }
LABEL_157:
                uint64_t v148 = v21[14];
                if (v148 && (v148[2] & 4) != 0) {
                  goto LABEL_88;
                }
                uint64_t v623 = v22;
                uint64_t v624 = v12;
                if (*(int *)(a1 + 1000) >= 3)
                {
                  *(_DWORD *)&v683[16] = 0x1000000;
                  long long __p = 0u;
                  *(_OWORD *)v683 = 0u;
                  v683[20] = 1;
                  llvm::SplitAllCriticalEdges((uint64_t)v21, (uint64_t)&__p);
                }
                unsigned int v628 = v21 >> 4;
                v679 = v681;
                uint64_t v680 = 0x800000000;
                *(void *)&long long __s1 = v677;
                *((void *)&__s1 + 1) = 0x1000000000;
                v673 = v675;
                uint64_t v674 = 0x800000000;
                v670 = v672;
                uint64_t v671 = 0x800000000;
                v667 = v669;
                uint64_t v668 = 0x800000000;
                v664 = v666;
                uint64_t v665 = 0x800000000;
                v661 = v663;
                uint64_t v662 = 0x800000000;
                v658 = v660;
                uint64_t v659 = 0x800000000;
                uint64_t v625 = a4;
                a3(a4, v21);
                char v622 = a6;
                v626 = a5;
                ((void (*)(void *, uint64_t **))a5)(a6, v21);
                *(void *)v632 = v21;
                uint64_t v62 = (llvm::detail::IEEEFloat *)v21[10];
                if (v62 == v85)
                {
                  int v638 = 1;
                }
                else
                {
                  int v638 = 1;
                  do
                  {
                    if (v62) {
                      int v149 = (uint64_t *)((char *)v62 - 24);
                    }
                    else {
                      int v149 = 0;
                    }
                    if (llvm::BasicBlock::getFirstNonPHIOrDbgOrLifetime((llvm::BasicBlock *)v149, 1)[16] != 35)
                    {
                      uint64_t v150 = v149 + 5;
                      for (uint64_t i = (void *)v149[6]; i != v150; uint64_t i = (void *)i[1])
                      {
                        int v152 = i - 3;
                        if (!i) {
                          int v152 = 0;
                        }
                        if (*((unsigned char *)v152 + 16) != 83)
                        {
                          unsigned int v153 = *((unsigned __int8 *)i - 8) - 38;
                          BOOL v180 = v153 > 0x38;
                          uint64_t v154 = (1 << v153) & 0x100060000000001;
                          if (!v180 && v154 != 0) {
                            uint64_t i = (void *)i[1];
                          }
                          if (v150 != i)
                          {
                            if (*(unsigned char *)(a1 + 1015)) {
                              goto LABEL_183;
                            }
                            BOOL v156 = v62 == 0;
                            uint64_t v157 = v21[10];
                            if (v157) {
                              BOOL v156 = v157 - 3 == v149;
                            }
                            if (v156) {
                              goto LABEL_183;
                            }
                            if (*(_DWORD *)(a1 + 1000) != 1)
                            {
                              unint64_t v173 = (void *)*v150;
                              if ((void *)*v150 != v150)
                              {
                                if (v173) {
                                  int v61 = (llvm *)(v173 - 3);
                                }
                                else {
                                  int v61 = 0;
                                }
                                int v174 = *((unsigned __int8 *)v61 + 16);
                                if (v174 == 30)
                                {
LABEL_270:
                                  a6 = 0;
                                  a5 = (void *)((char *)v61 - 32);
                                  p_p = (llvm *)((char *)v61 - 64);
                                  char v21 = (uint64_t **)((char *)v61 - 32);
                                  if (*((unsigned char *)v61 + 16) == 30) {
LABEL_271:
                                  }
                                    llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
                                  switch(*((unsigned char *)v61 + 16))
                                  {
                                    case '""':
                                    case '#':
                                      goto LABEL_996;
                                    default:
                                      goto LABEL_271;
                                  }
                                }
                                switch(*((unsigned char *)v61 + 16))
                                {
                                  case 0x1E:
LABEL_996:
                                    __break(1u);
                                    goto LABEL_997;
                                  case 0x1F:
                                    int v185 = (*((_DWORD *)v61 + 5) >> 1) & 0x3FFFFFF;
                                    goto LABEL_297;
                                  case 0x20:
                                  case 0x26:
                                    int v185 = (*((_DWORD *)v61 + 5) & 0x7FFFFFF) - 1;
                                    goto LABEL_297;
                                  case 0x21:
                                  case 0x25:
                                    goto LABEL_270;
                                  case 0x24:
                                    int v185 = *((_WORD *)v61 + 9) & 1;
                                    goto LABEL_297;
                                  case 0x27:
                                    int v185 = *((_DWORD *)v61 + 20) + 1;
LABEL_297:
                                    if (!v185) {
                                      break;
                                    }
                                    if (v174 != 31)
                                    {
                                      switch(*((unsigned char *)v61 + 16))
                                      {
                                        case '!':
                                        case '%':
                                          goto LABEL_270;
                                        case '""':
                                        case '#':
                                          goto LABEL_185;
                                        case '$':
                                          int v186 = *((_WORD *)v61 + 9) & 1;
                                          goto LABEL_300;
                                        case '\'':
                                          int v186 = *((_DWORD *)v61 + 20) + 1;
                                          goto LABEL_300;
                                        default:
                                          int v186 = (*((_DWORD *)v61 + 5) & 0x7FFFFFF) - 1;
                                          goto LABEL_300;
                                      }
                                    }
                                    int v186 = (*((_DWORD *)v61 + 5) >> 1) & 0x3FFFFFF;
LABEL_300:
                                    if (!v186) {
                                      goto LABEL_185;
                                    }
                                    goto LABEL_270;
                                  default:
                                    break;
                                }
                              }
                              uint64_t v175 = v149[1];
                              uint64_t v176 = v175;
                              if (!v175) {
                                goto LABEL_183;
                              }
                              while (1)
                              {
                                uint64_t v177 = *(void *)(v176 + 24);
                                unsigned int v178 = *(unsigned __int8 *)(v177 + 16);
                                BOOL v179 = v177 && v178 >= 0x1C;
                                BOOL v180 = !v179 || v178 - 29 > 0xA;
                                if (!v180) {
                                  break;
                                }
                                uint64_t v176 = *(void *)(v176 + 8);
                                if (!v176) {
                                  goto LABEL_183;
                                }
                              }
                              do
                              {
                                uint64_t v181 = *(void *)(v175 + 24);
                                unsigned int v182 = *(unsigned __int8 *)(v181 + 16);
                                if (v181) {
                                  BOOL v183 = v182 >= 0x1C;
                                }
                                else {
                                  BOOL v183 = 0;
                                }
                                if (v183 && v182 - 29 <= 0xA) {
                                  llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates();
                                }
                                uint64_t v175 = *(void *)(v175 + 8);
                              }
                              while (v175);
                              if (llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)v149))
                              {
LABEL_183:
                                if (DWORD2(__s1) >= (unint64_t)HIDWORD(__s1)) {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                }
                                *(void *)(__s1 + 8 * DWORD2(__s1)) = v149;
                                ++DWORD2(__s1);
                              }
                            }
                          }
                          break;
                        }
                      }
                    }
LABEL_185:
                    a6 = v149 + 5;
                    for (uint64_t j = (void *)v149[6]; j != a6; uint64_t j = (void *)j[1])
                    {
                      if (j) {
                        uint64_t v159 = j - 3;
                      }
                      else {
                        uint64_t v159 = 0;
                      }
                      if (*(unsigned char *)(a1 + 1004))
                      {
                        unsigned int v160 = *((unsigned __int8 *)v159 + 16) - 33;
                        BOOL v180 = v160 > 0x33;
                        uint64_t v161 = (1 << v160) & 0x8000000000041;
                        if (!v180 && v161 != 0)
                        {
                          unsigned int v163 = *(unsigned __int8 *)(*(j - 7) + 16);
                          if (v163 >= 0x15 && v163 != 24)
                          {
                            if (v680 >= (unint64_t)HIDWORD(v680)) {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            *((void *)v679 + v680) = v159;
                            LODWORD(v680) = v680 + 1;
                          }
                        }
                      }
                      if (*(unsigned char *)(a1 + 1006))
                      {
                        int v165 = *((unsigned __int8 *)v159 + 16);
                        if (v165 == 81) {
                          unsigned int v166 = v159;
                        }
                        else {
                          unsigned int v166 = 0;
                        }
                        if (j && v165 == 81)
                        {
                          if (!*(unsigned char *)(a1 + 1015))
                          {
                            uint64_t v171 = v166[1];
                            if (v171)
                            {
                              if (!*(void *)(v171 + 8))
                              {
                                a5 = *(void **)(v171 + 24);
                                BOOL v172 = a5 && *((unsigned char *)a5 + 16) == 30;
                                if (v172
                                  && (*((_DWORD *)a5 + 5) & 0x7FFFFFF) != (unint64_t)((*((_DWORD *)a5 + 5) & 0x7FFFFFF) == 3))
                                {
                                  llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
                                }
                              }
                            }
                          }
                          if (v674 >= (unint64_t)HIDWORD(v674)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)v673 + v674) = v159;
                          LODWORD(v674) = v674 + 1;
                          int v165 = *((unsigned __int8 *)v159 + 16);
                        }
                        if (v165 == 31)
                        {
                          if (v671 >= (unint64_t)HIDWORD(v671)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)v670 + v671) = v159;
                          LODWORD(v671) = v671 + 1;
                        }
                      }
                      if (*(unsigned char *)(a1 + 1007))
                      {
                        unsigned int v167 = *((unsigned __int8 *)v159 + 16) - 59;
                        uint64_t v168 = v167 >= 0xFFFFFFEE ? v159 : 0;
                        if (j && v167 >= 0xFFFFFFEE && *((unsigned __int8 *)v168 + 16) - 47 <= 1)
                        {
                          if (v668 >= (unint64_t)HIDWORD(v668)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)v667 + v668) = v168;
                          LODWORD(v668) = v668 + 1;
                        }
                      }
                      if (*(unsigned char *)(a1 + 1008) && j && *((unsigned char *)v159 + 16) == 62)
                      {
                        if (v665 >= (unint64_t)HIDWORD(v665)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)v664 + v665) = v159;
                        LODWORD(v665) = v665 + 1;
                      }
                      if (*(unsigned char *)(a1 + 1017) && j && *((unsigned char *)v159 + 16) == 60)
                      {
                        if (v662 >= (unint64_t)HIDWORD(v662)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)v661 + v662) = v159;
                        LODWORD(v662) = v662 + 1;
                      }
                      if (*(unsigned char *)(a1 + 1018) && j && *((unsigned char *)v159 + 16) == 61)
                      {
                        if (v659 >= (unint64_t)HIDWORD(v659)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)v658 + v659) = v159;
                        LODWORD(v659) = v659 + 1;
                      }
                      if (*(unsigned char *)(a1 + 1016))
                      {
                        int v169 = *((unsigned __int8 *)v159 + 16);
                        if (v169 == 33
                          || v169 == 84
                          && ((uint64_t v170 = *(v159 - 4)) == 0
                           || *(unsigned char *)(v170 + 16)
                           || *(void *)(v170 + 24) != v159[9]
                           || (*(unsigned char *)(v170 + 33) & 0x20) == 0))
                        {
                          int v638 = 0;
                        }
                      }
                    }
                    uint64_t v62 = (llvm::detail::IEEEFloat *)*((void *)v62 + 1);
                  }
                  while (v62 != (llvm::detail::IEEEFloat *)(v21 + 9));
                }
                v629 = (llvm::Type *)DWORD2(__s1);
                if (DWORD2(__s1))
                {
                  uint64_t v630 = __s1;
                  if (*(unsigned char *)(a1 + 1011)) {
                    *(void *)(a1 + 616) = sub_1CCB54AE8(a1, (llvm::Type *)DWORD2(__s1), (llvm *)v21, *(llvm::ArrayType **)(a1 + 456), "sancov_guards");
                  }
                  unsigned int v187 = v21 >> 4;
                  if (*(unsigned char *)(a1 + 1012)) {
                    *(void *)(a1 + 624) = sub_1CCB54AE8(a1, v629, (llvm *)v21, *(llvm::ArrayType **)(a1 + 488), "sancov_cntrs");
                  }
                  if (*(unsigned char *)(a1 + 1013)) {
                    *(void *)(a1 + 632) = sub_1CCB54AE8(a1, v629, (llvm *)v21, *(llvm::ArrayType **)(a1 + 504), "sancov_BOOLs");
                  }
                  if (*(unsigned char *)(a1 + 1014))
                  {
                    *(void *)&long long __p = v683;
                    *((void *)&__p + 1) = 0x2000000000;
                    int v188 = v21[10];
                    uint64_t v189 = v188 - 3;
                    if (!v188) {
                      uint64_t v189 = 0;
                    }
                    uint64_t v190 = (void **)(v189 + 5);
                    for (uint64_t k = (void *)v189[6]; ; uint64_t k = (void *)k[1])
                    {
                      if (k == v190) {
                        goto LABEL_335;
                      }
                      uint64_t v192 = k - 3;
                      if (!k) {
                        uint64_t v192 = 0;
                      }
                      if (*((unsigned char *)v192 + 16) != 83) {
                        break;
                      }
                    }
                    unsigned int v193 = *((unsigned __int8 *)k - 8) - 38;
                    BOOL v180 = v193 > 0x38;
                    uint64_t v194 = (1 << v193) & 0x100060000000001;
                    if (v180 || v194 == 0) {
                      uint64_t v190 = (void **)k;
                    }
                    else {
                      uint64_t v190 = (void **)k[1];
                    }
LABEL_335:
                    uint64_t v196 = 0;
                    if (v190) {
                      unsigned int v197 = v190 - 3;
                    }
                    else {
                      unsigned int v197 = 0;
                    }
                    uint64_t v198 = **v197;
                    v701 = &v702.u64[1];
                    v702.i64[0] = 0x200000000;
                    uint64_t v707 = v198;
                    v708 = &v716;
                    v709 = &v717;
                    uint64_t v710 = 0;
                    int v711 = 0;
                    __int16 v712 = 512;
                    char v713 = 7;
                    uint64_t v714 = 0;
                    uint64_t v715 = 0;
                    v716 = &unk_1F2616E88;
                    v717 = &unk_1F2617008;
                    v705 = v197[5];
                    v706 = v197 + 3;
                    v199 = (unsigned __int8 *)v197[6];
                    v718[0] = (uint64_t)v199;
                    if (v199)
                    {
                      llvm::MetadataTracking::track((uint64_t)v718, v199, 2);
                      uint64_t v196 = v718[0];
                    }
                    sub_1CB8461A4((uint64_t)&v701, 0, v196);
                    if (v718[0])
                    {
                      int v602 = *(unsigned __int8 *)v718[0];
                      if ((v602 - 4) > 0x1E)
                      {
                        if ((v602 - 3) >= 0xFFFFFFFE) {
                          uint64_t v615 = v718[0];
                        }
                        else {
                          uint64_t v615 = 0;
                        }
                        if ((v602 - 3) < 0xFFFFFFFE)
                        {
                          unsigned int v187 = v21 >> 4;
                          if (v602 == 3) {
                            *(void *)(v718[0] + 8) = 0;
                          }
                          goto LABEL_341;
                        }
                        unint64_t v604 = v615 + 8;
                      }
                      else
                      {
                        unsigned int v187 = v21 >> 4;
                        if ((*(unsigned char *)(v718[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v718[0] + 12)) {
                          goto LABEL_341;
                        }
                        uint64_t v603 = *(void *)(v718[0] + 16);
                        if ((v603 & 4) == 0) {
                          goto LABEL_341;
                        }
                        unint64_t v604 = v603 & 0xFFFFFFFFFFFFFFF8;
                        if (!v604) {
                          goto LABEL_341;
                        }
                      }
                      v720 = v718;
                      sub_1CC5FA668(v604 + 16, &v720);
                      unsigned int v187 = v21 >> 4;
                    }
LABEL_341:
                    uint64_t v202 = 0;
                    while (2)
                    {
                      int v203 = v21[10];
                      if (v203) {
                        v204 = (llvm::BlockAddress **)(v203 - 3);
                      }
                      else {
                        v204 = 0;
                      }
                      unsigned int v205 = *(llvm::BlockAddress ***)(v630 + 8 * v202);
                      if (v204 == v205)
                      {
                        unint64_t v206 = *(llvm::Value **)(a1 + 432);
                        __int16 v722 = 257;
                        v207 = sub_1CC277FE0((uint64_t)&v701, (llvm::CastInst *)v21, v206, (uint64_t)&v720, v201);
                        if (DWORD2(__p) >= (unint64_t)HIDWORD(__p)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *(void *)(__p + 8 * DWORD2(__p)) = v207;
                        ++DWORD2(__p);
                        v208 = (unsigned __int8 *)llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 424), 1uLL, 0);
                        uint64_t v209 = v208;
                        uint64_t v210 = *(void *)(a1 + 432);
                        __int16 v719 = 257;
                        if (*(void *)v208 != v210)
                        {
                          if (v208[16] > 0x14u)
                          {
                            __int16 v722 = 257;
                            uint64_t v209 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v208, v210, (const char **)&v720, 0);
                            (*((void (**)(void **, unsigned __int8 *, uint64_t *, uint64_t *, uint64_t **))*v709
                             + 2))(v709, v209, v718, v705, v706);
                            if (v702.i32[0])
                            {
                              v211 = (llvm::MDNode **)v701;
                              char v212 = (llvm::MDNode **)((char *)v701 + 16 * v702.u32[0]);
                              do
                              {
                                llvm::Instruction::setMetadata((llvm::Instruction *)v209, *(_DWORD *)v211, v211[1]);
                                v211 += 2;
                              }
                              while (v211 != v212);
                            }
                            goto LABEL_357;
                          }
                          uint64_t v209 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v708
                                                     + 28))(v708, 48, v208, v210);
                          if (v209) {
                            BOOL v213 = v209[16] >= 0x1Cu;
                          }
                          else {
                            BOOL v213 = 0;
                          }
                          if (!v213) {
                            goto LABEL_357;
                          }
                          (*((void (**)(void **, unsigned __int8 *, uint64_t *, uint64_t *, uint64_t **))*v709
                           + 2))(v709, v209, v718, v705, v706);
                          if (v702.i32[0])
                          {
                            int v225 = (llvm::MDNode **)v701;
                            unsigned int v226 = (llvm::MDNode **)((char *)v701 + 16 * v702.u32[0]);
                            do
                            {
                              llvm::Instruction::setMetadata((llvm::Instruction *)v209, *(_DWORD *)v225, v225[1]);
                              v225 += 2;
                            }
                            while (v225 != v226);
                          }
LABEL_380:
                          char v21 = *(uint64_t ***)v632;
                          unsigned int v187 = v628;
                        }
                      }
                      else
                      {
                        unsigned int v214 = llvm::BlockAddress::get(v205[7], (llvm::Function *)v205, v200);
                        __int16 v215 = *(llvm::Value **)(a1 + 432);
                        __int16 v722 = 257;
                        __int16 v217 = sub_1CC277FE0((uint64_t)&v701, v214, v215, (uint64_t)&v720, v216);
                        if (DWORD2(__p) >= (unint64_t)HIDWORD(__p)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *(void *)(__p + 8 * DWORD2(__p)) = v217;
                        ++DWORD2(__p);
                        int v218 = (unsigned __int8 *)llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 424), 0, 0);
                        uint64_t v209 = v218;
                        uint64_t v219 = *(void *)(a1 + 432);
                        __int16 v719 = 257;
                        if (*(void *)v218 != v219)
                        {
                          if (v218[16] <= 0x14u)
                          {
                            uint64_t v209 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v708
                                                       + 28))(v708, 48, v218, v219);
                            if (v209) {
                              BOOL v222 = v209[16] >= 0x1Cu;
                            }
                            else {
                              BOOL v222 = 0;
                            }
                            if (!v222) {
                              goto LABEL_357;
                            }
                            (*((void (**)(void **, unsigned __int8 *, uint64_t *, uint64_t *, uint64_t **))*v709
                             + 2))(v709, v209, v718, v705, v706);
                            if (v702.i32[0])
                            {
                              v223 = (llvm::MDNode **)v701;
                              unsigned int v224 = (llvm::MDNode **)((char *)v701 + 16 * v702.u32[0]);
                              do
                              {
                                llvm::Instruction::setMetadata((llvm::Instruction *)v209, *(_DWORD *)v223, v223[1]);
                                v223 += 2;
                              }
                              while (v223 != v224);
                            }
                            goto LABEL_380;
                          }
                          __int16 v722 = 257;
                          uint64_t v209 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v218, v219, (const char **)&v720, 0);
                          (*((void (**)(void **, unsigned __int8 *, uint64_t *, uint64_t *, uint64_t **))*v709
                           + 2))(v709, v209, v718, v705, v706);
                          if (v702.i32[0])
                          {
                            int v220 = (llvm::MDNode **)v701;
                            unsigned int v221 = (llvm::MDNode **)((char *)v701 + 16 * v702.u32[0]);
                            do
                            {
                              llvm::Instruction::setMetadata((llvm::Instruction *)v209, *(_DWORD *)v220, v220[1]);
                              v220 += 2;
                            }
                            while (v220 != v221);
                          }
                        }
                      }
LABEL_357:
                      if (DWORD2(__p) >= (unint64_t)HIDWORD(__p)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *(void *)(__p + 8 * DWORD2(__p)) = v209;
                      ++DWORD2(__p);
                      if ((llvm::Type *)++v202 == v629)
                      {
                        unsigned int v227 = sub_1CCB54AE8(a1, (llvm::Type *)(2 * (void)v629), (llvm *)v21, *(llvm::ArrayType **)(a1 + 432), "sancov_pcs");
                        uint64_t v228 = llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 432), (llvm::Type *)(2 * (void)v629));
                        int v229 = llvm::ConstantArray::get(v228, (llvm::Type *)__p, DWORD2(__p));
                        llvm::GlobalVariable::setInitializer((uint64_t)v227, v229);
                        *((unsigned char *)v227 + 80) |= 1u;
                        if (v701 != &v702.u64[1]) {
                          free(v701);
                        }
                        if ((unsigned char *)__p != v683) {
                          free((void *)__p);
                        }
                        *(void *)(a1 + 640) = v227;
                        char v21 = *(uint64_t ***)v632;
                        break;
                      }
                      continue;
                    }
                  }
                  unint64_t v230 = 0;
                  unsigned int v627 = v187 ^ (v21 >> 9);
                  while (2)
                  {
                    uint64_t v231 = *(void *)(v630 + 8 * v230);
                    uint64_t v232 = v231 + 40;
                    for (uint64_t m = *(void *)(v231 + 48); m != v232; uint64_t m = *(void *)(m + 8))
                    {
                      uint64_t v234 = m - 24;
                      if (!m) {
                        uint64_t v234 = 0;
                      }
                      if (*(unsigned char *)(v234 + 16) != 83)
                      {
                        unsigned int v235 = *(unsigned __int8 *)(m - 8) - 38;
                        BOOL v180 = v235 > 0x38;
                        uint64_t v236 = (1 << v235) & 0x100060000000001;
                        if (v180 || v236 == 0) {
                          uint64_t v232 = m;
                        }
                        else {
                          uint64_t v232 = *(void *)(m + 8);
                        }
                        break;
                      }
                    }
                    int v238 = v21[10];
                    if (v238) {
                      BOOL v239 = v238 - 3 == (uint64_t *)v231;
                    }
                    else {
                      BOOL v239 = 0;
                    }
                    int v240 = !v239;
                    int v631 = v240;
                    v643 = 0;
                    unint64_t v634 = v230;
                    if (!v239)
                    {
                      uint64_t v241 = v232 - 24;
                      if (!v232) {
                        uint64_t v241 = 0;
                      }
                      uint64_t v242 = (unsigned __int8 **)(v241 + 48);
                      if (v242 == &v643
                        || (uint64_t v243 = *v242, (v643 = v243) == 0)
                        || (llvm::MetadataTracking::track((uint64_t)&v643, v243, 2), !v643))
                      {
                        if ((*((unsigned char *)v21 + 23) & 0x20) != 0)
                        {
                          uint64_t v244 = *(void *)**v21;
                          *(void *)&long long __p = v21;
                          int v245 = *(_DWORD *)(v244 + 2496);
                          if (!v245)
                          {
                            uint64_t v378 = 0;
                            goto LABEL_573;
                          }
                          uint64_t v246 = *(void *)(v244 + 2480);
                          int v247 = v245 - 1;
                          unsigned int v248 = v247 & v627;
                          unint64_t v249 = (void *)(v246 + 40 * (v247 & v627));
                          uint64_t v250 = (void ***)*v249;
                          if ((uint64_t **)*v249 != v21)
                          {
                            unint64_t v251 = 0;
                            int v252 = 1;
                            while (v250 != (void ***)-4096)
                            {
                              if (v251) {
                                BOOL v253 = 0;
                              }
                              else {
                                BOOL v253 = v250 == (void ***)-8192;
                              }
                              if (v253) {
                                unint64_t v251 = v249;
                              }
                              unsigned int v254 = v248 + v252++;
                              unsigned int v248 = v254 & v247;
                              unint64_t v249 = (void *)(v246 + 40 * v248);
                              uint64_t v250 = (void ***)*v249;
                              if ((uint64_t **)*v249 == v21) {
                                goto LABEL_424;
                              }
                            }
                            if (v251) {
                              uint64_t v378 = v251;
                            }
                            else {
                              uint64_t v378 = v249;
                            }
LABEL_573:
                            unint64_t v249 = sub_1CC609054(v244 + 2480, (uint64_t)&__p, (uint64_t *)&__p, v378);
                            uint64_t v379 = __p;
                            v249[4] = 0;
                            v249[3] = 0;
                            *unint64_t v249 = v379;
                            v249[1] = v249 + 3;
                            v249[2] = 0x100000000;
                          }
LABEL_424:
                          uint64_t v255 = *((unsigned int *)v249 + 4);
                          if (v255)
                          {
                            size_t v256 = (uint64_t *)(v249[1] + 8);
                            uint64_t v257 = 16 * v255;
                            while (*((_DWORD *)v256 - 2))
                            {
                              v256 += 2;
                              v257 -= 16;
                              if (!v257) {
                                goto LABEL_454;
                              }
                            }
                            uint64_t v351 = *v256;
                            if (*v256)
                            {
                              uint64_t v352 = *(void *)(v351 + 16);
                              uint64_t v353 = (void *)(v352 & 0xFFFFFFFFFFFFFFF8);
                              if ((v352 & 4) != 0) {
                                uint64_t v353 = (void *)*v353;
                              }
                              uint64_t Impl = (void *)llvm::DILocation::getImpl(v353, 0, 0, v351, 0, 0, 0, 1);
                              v701 = Impl;
                              if (Impl) {
                                llvm::MetadataTracking::track((uint64_t)&v701, (unsigned __int8 *)Impl, 2);
                              }
                              if (v643)
                              {
                                int v386 = *v643;
                                if ((v386 - 4) > 0x1E)
                                {
                                  if ((v386 - 3) >= 0xFFFFFFFE) {
                                    uint64_t v392 = v643;
                                  }
                                  else {
                                    uint64_t v392 = 0;
                                  }
                                  if ((v386 - 3) < 0xFFFFFFFE)
                                  {
                                    char v21 = *(uint64_t ***)v632;
                                    if (v386 == 3) {
                                      *((void *)v643 + 1) = 0;
                                    }
                                    goto LABEL_541;
                                  }
                                  unint64_t v388 = (unint64_t)(v392 + 8);
                                }
                                else
                                {
                                  char v21 = *(uint64_t ***)v632;
                                  if ((v643[1] & 0x7F) != 2 && !*((_DWORD *)v643 + 3)) {
                                    goto LABEL_541;
                                  }
                                  uint64_t v387 = *((void *)v643 + 2);
                                  if ((v387 & 4) == 0) {
                                    goto LABEL_541;
                                  }
                                  unint64_t v388 = v387 & 0xFFFFFFFFFFFFFFF8;
                                  if (!v388) {
                                    goto LABEL_541;
                                  }
                                }
                                *(void *)&long long __p = &v643;
                                sub_1CC5FA668(v388 + 16, &__p);
                                char v21 = *(uint64_t ***)v632;
                              }
LABEL_541:
                              v643 = (unsigned __int8 *)v701;
                              if (v701) {
                                llvm::MetadataTracking::retrack((uint64_t)&v701, (unsigned __int8 *)v701, (uint64_t)&v643);
                              }
                            }
                          }
                        }
                      }
LABEL_454:
                      int v276 = 0;
                      if (v232) {
                        uint64_t v277 = v232 - 24;
                      }
                      else {
                        uint64_t v277 = 0;
                      }
                      uint64_t v278 = **(void **)v277;
                      *(void *)&long long __p = v683;
                      *((void *)&__p + 1) = 0x200000000;
                      uint64_t v687 = v278;
                      v688 = &v696;
                      v689 = v697;
                      uint64_t v690 = 0;
                      int v691 = 0;
                      __int16 v692 = 512;
                      char v693 = 7;
                      v685 = 0;
                      v686 = 0;
                      uint64_t v694 = 0;
                      uint64_t v695 = 0;
                      v696 = &unk_1F2616E88;
                      v697[0] = &unk_1F2617008;
                      v685 = *(uint64_t **)(v277 + 40);
                      v686 = (uint64_t *)(v277 + 24);
                      uint64_t v279 = v277;
                      uint64_t v280 = *(uint64_t **)(v277 + 48);
                      v720 = v280;
                      if (v280)
                      {
                        llvm::MetadataTracking::track((uint64_t)&v720, (unsigned __int8 *)v280, 2);
                        int v276 = v720;
                      }
                      sub_1CB8461A4((uint64_t)&__p, 0, (uint64_t)v276);
                      if (v720)
                      {
                        int v355 = *(unsigned __int8 *)v720;
                        if ((v355 - 4) > 0x1E)
                        {
                          if ((v355 - 3) >= 0xFFFFFFFE) {
                            uint64_t v380 = v720;
                          }
                          else {
                            uint64_t v380 = 0;
                          }
                          if ((v355 - 3) < 0xFFFFFFFE)
                          {
                            if (v355 == 3) {
                              v720[1] = 0;
                            }
                            goto LABEL_460;
                          }
                          unint64_t v357 = (unint64_t)(v380 + 1);
                        }
                        else
                        {
                          if ((*((unsigned char *)v720 + 1) & 0x7F) != 2 && !*((_DWORD *)v720 + 3)) {
                            goto LABEL_460;
                          }
                          uint64_t v356 = v720[2];
                          if ((v356 & 4) == 0) {
                            goto LABEL_460;
                          }
                          unint64_t v357 = v356 & 0xFFFFFFFFFFFFFFF8;
                          if (!v357) {
                            goto LABEL_460;
                          }
                        }
                        v701 = &v720;
                        sub_1CC5FA668(v357 + 16, &v701);
                      }
LABEL_460:
                      v642 = v643;
                      if (v643)
                      {
                        llvm::MetadataTracking::track((uint64_t)&v642, v643, 2);
                        uint64_t v281 = (uint64_t)v642;
                      }
                      else
                      {
                        uint64_t v281 = 0;
                      }
                      sub_1CB8461A4((uint64_t)&__p, 0, v281);
                      if (v642)
                      {
                        int v283 = *v642;
                        if ((v283 - 4) > 0x1E)
                        {
                          if ((v283 - 3) >= 0xFFFFFFFE) {
                            uint64_t v297 = v642;
                          }
                          else {
                            uint64_t v297 = 0;
                          }
                          if ((v283 - 3) >= 0xFFFFFFFE)
                          {
                            unint64_t v298 = (unint64_t)(v297 + 8);
                            goto LABEL_483;
                          }
                          if (v283 == 3) {
                            *((void *)v642 + 1) = 0;
                          }
                        }
                        else if ((v642[1] & 0x7F) == 2 || *((_DWORD *)v642 + 3))
                        {
                          uint64_t v401 = *((void *)v642 + 2);
                          if ((v401 & 4) != 0)
                          {
                            unint64_t v298 = v401 & 0xFFFFFFFFFFFFFFF8;
                            if (v298)
                            {
LABEL_483:
                              v701 = &v642;
                              sub_1CC5FA668(v298 + 16, &v701);
                            }
                          }
                        }
                      }
                      if (*(unsigned char *)(a1 + 1010))
                      {
                        uint64_t v284 = *(uint64_t ***)(a1 + 16);
                        uint64_t v285 = *(uint64_t ***)(a1 + 24);
                        LOWORD(v704) = 257;
                        uint64_t v286 = sub_1CB845BAC((uint64_t *)&__p, v284, v285, 0, 0, (uint64_t)&v701, 0);
                        *(void *)(v286 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v286 + 64), **(uint64_t ***)v286, -1, 28);
                      }
                      if (*(unsigned char *)(a1 + 1011))
                      {
                        v641 = 0;
                        unsigned int v287 = *(llvm::CastInst **)(a1 + 616);
                        uint64_t v288 = *(llvm::Value **)(a1 + 424);
                        __int16 v722 = 257;
                        int v289 = sub_1CC277FE0((uint64_t)&__p, v287, v288, (uint64_t)&v720, v282);
                        int v290 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 424), 4 * v230, 0);
                        __int16 v719 = 257;
                        uint64_t v291 = sub_1CB844A3C((uint64_t)&__p, v289, (uint64_t)v290, (uint64_t)v718, 0, 0);
                        size_t v292 = v291;
                        uint64_t v293 = *(void *)(a1 + 464);
                        __int16 v700 = 257;
                        if (*(void *)v291 != v293)
                        {
                          if (*((unsigned __int8 *)v291 + 16) <= 0x14u)
                          {
                            uint64_t v296 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v688 + 28))(v688, 48, v291, v293);
                            size_t v292 = (llvm::Instruction *)v296;
                            if (v296 && *(unsigned __int8 *)(v296 + 16) >= 0x1Cu)
                            {
                              (*(void (**)(void *, uint64_t, llvm::Instruction **, uint64_t *, uint64_t *))(*v689 + 16))(v689, v296, &v698, v685, v686);
                              if (DWORD2(__p))
                              {
                                uint64_t v412 = __p;
                                uint64_t v413 = __p + 16 * DWORD2(__p);
                                do
                                {
                                  llvm::Instruction::setMetadata(v292, *(_DWORD *)v412, *(llvm::MDNode **)(v412 + 8));
                                  v412 += 16;
                                }
                                while (v412 != v413);
                              }
                              char v21 = *(uint64_t ***)v632;
                            }
                          }
                          else
                          {
                            LOWORD(v704) = 257;
                            size_t v292 = llvm::CastInst::Create(48, (uint64_t)v291, v293, (const char **)&v701, 0);
                            (*(void (**)(void *, llvm::Instruction *, llvm::Instruction **, uint64_t *, uint64_t *))(*v689 + 16))(v689, v292, &v698, v685, v686);
                            if (DWORD2(__p))
                            {
                              uint64_t v294 = __p;
                              uint64_t v295 = __p + 16 * DWORD2(__p);
                              do
                              {
                                llvm::Instruction::setMetadata(v292, *(_DWORD *)v294, *(llvm::MDNode **)(v294 + 8));
                                v294 += 16;
                              }
                              while (v294 != v295);
                            }
                          }
                        }
                        v641 = v292;
                        if (*(unsigned char *)(a1 + 1019))
                        {
                          unsigned int v364 = *(llvm::Type **)(a1 + 440);
                          uint64_t v365 = *(void *)(a1 + 408);
                          __int16 v722 = 257;
                          char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v685[7] + 40) + 272), v364, 1);
                          uint64_t v367 = operator new(0x60uLL);
                          v367[13] = v367[13] & 0x38000000 | 1;
                          int v368 = (llvm::Instruction *)(v367 + 8);
                          *(void *)uint64_t v367 = 0;
                          *((void *)v367 + 1) = 0;
                          *((void *)v367 + 2) = 0;
                          *((void *)v367 + 3) = v367 + 8;
                          LOWORD(v704) = 257;
                          llvm::LoadInst::LoadInst((llvm::Value *)(v367 + 8), (uint64_t)v364, v365, (const char **)&v701, 0, Alignment, 0);
                          (*(void (**)(void *, llvm::Instruction *, uint64_t **, uint64_t *, uint64_t *))(*v689 + 16))(v689, v368, &v720, v685, v686);
                          if (DWORD2(__p))
                          {
                            uint64_t v389 = __p;
                            uint64_t v390 = __p + 16 * DWORD2(__p);
                            do
                            {
                              llvm::Instruction::setMetadata(v368, *(_DWORD *)v389, *(llvm::MDNode **)(v389 + 8));
                              v389 += 16;
                            }
                            while (v389 != v390);
                          }
                          sub_1CCB54E7C(a1, v368);
                          LOWORD(v704) = 257;
                          uint64_t v371 = llvm::Constant::getNullValue(*(llvm::Constant **)v368, v369, v370);
                          unint64_t v372 = sub_1CB845F20((uint64_t)&__p, 33, v368, (uint64_t)v371, (uint64_t)&v701);
                          v701 = "sancov gate cmp";
                          LOWORD(v704) = 259;
                          llvm::Value::setNameImpl(v372, (const char **)&v701);
                          unsigned __int8 v373 = v372;
                          if (v372) {
                            BOOL v374 = *((unsigned char *)v372 + 16) == 0;
                          }
                          else {
                            BOOL v374 = 0;
                          }
                          if (v374)
                          {
                            if ((*((unsigned char *)v372 + 23) & 0x10) == 0) {
                              goto LABEL_639;
                            }
                            uint64_t v393 = ***(void ***)v372;
                            uint64_t v394 = *(void *)(v393 + 152);
                            uint64_t v395 = *(unsigned int *)(v393 + 168);
                            if (v395)
                            {
                              LODWORD(v396) = (v395 - 1) & ((v372 >> 4) ^ (v372 >> 9));
                              uint64_t v397 = (llvm::Instruction **)(v394 + 16 * v396);
                              uint64_t v398 = *v397;
                              if (*v397 != v372)
                              {
                                int v399 = 1;
                                do
                                {
                                  if (v398 == (llvm::Instruction *)-4096) {
                                    goto LABEL_631;
                                  }
                                  int v400 = v396 + v399++;
                                  uint64_t v396 = v400 & (v395 - 1);
                                  uint64_t v398 = *(llvm::Instruction **)(v394 + 16 * v396);
                                }
                                while (v398 != v372);
                                uint64_t v397 = (llvm::Instruction **)(v394 + 16 * v396);
                              }
                            }
                            else
                            {
LABEL_631:
                              uint64_t v397 = (llvm::Instruction **)(v394 + 16 * v395);
                            }
                            uint64_t v403 = v397[1];
                            unint64_t v406 = *(void *)v403;
                            int v404 = (char *)v403 + 16;
                            unint64_t v405 = v406;
                            if (v406 >= 5
                              && (*(_DWORD *)v404 == *(_DWORD *)"llvm." ? (BOOL v407 = v404[4] == aLlvm_1[4]) : (BOOL v407 = 0),
                                  v407))
                            {
                              *((_DWORD *)v372 + 8) |= 0x2000u;
                              int v408 = llvm::Function::lookupIntrinsicID(v404, v405);
                            }
                            else
                            {
LABEL_639:
                              int v408 = 0;
                              *((_DWORD *)v372 + 8) &= ~0x2000u;
                            }
                            unsigned __int8 v373 = v372;
                            *((_DWORD *)v372 + 9) = v408;
                          }
                          v720 = *(uint64_t **)(a1 + 600);
                          v701 = (void *)0x186A000000001;
                          uint64_t v375 = (uint64_t)v373;
                          llvm::MDBuilder::createBranchWeights(&v720, (uint64_t)&v701, 2);
                          sub_1CD1290BC(v375, v279);
                        }
                        size_t v299 = *(uint64_t ***)(a1 + 32);
                        size_t v300 = *(uint64_t ***)(a1 + 40);
                        LOWORD(v704) = 257;
                        uint64_t v301 = sub_1CB845BAC((uint64_t *)&__p, v299, v300, (uint64_t *)&v641, 1, (uint64_t)&v701, 0);
                        *(void *)(v301 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v301 + 64), **(uint64_t ***)v301, -1, 28);
                      }
                      if (*(unsigned char *)(a1 + 1012))
                      {
                        uint64_t v302 = *(uint64_t **)(a1 + 624);
                        uint64_t v303 = v302[3];
                        v720 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 424), 0, 0);
                        v721 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 424), v230, 0);
                        LOWORD(v704) = 257;
                        uint64_t v304 = sub_1CC27CEC0((uint64_t *)&__p, v303, v302, (uint64_t *)&v720, 2, (uint64_t)&v701);
                        size_t v305 = *(llvm::Type **)(a1 + 488);
                        __int16 v722 = 257;
                        LOBYTE(v303) = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v685[7] + 40) + 272), v305, 1);
                        int v306 = operator new(0x60uLL);
                        v306[13] = v306[13] & 0x38000000 | 1;
                        uint64_t v307 = (llvm::Instruction *)(v306 + 8);
                        *(void *)int v306 = 0;
                        *((void *)v306 + 1) = 0;
                        *((void *)v306 + 2) = 0;
                        *((void *)v306 + 3) = v306 + 8;
                        LOWORD(v704) = 257;
                        llvm::LoadInst::LoadInst((llvm::Value *)(v306 + 8), (uint64_t)v305, v304, (const char **)&v701, 0, v303, 0);
                        (*(void (**)(void *, llvm::Instruction *, uint64_t **, uint64_t *, uint64_t *))(*v689 + 16))(v689, v307, &v720, v685, v686);
                        if (DWORD2(__p))
                        {
                          uint64_t v358 = __p;
                          uint64_t v359 = __p + 16 * DWORD2(__p);
                          do
                          {
                            llvm::Instruction::setMetadata(v307, *(_DWORD *)v358, *(llvm::MDNode **)(v358 + 8));
                            v358 += 16;
                          }
                          while (v358 != v359);
                        }
                        v308 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 488), 1uLL, 0);
                        LOWORD(v704) = 257;
                        int v309 = sub_1CB844A3C((uint64_t)&__p, v307, (uint64_t)v308, (uint64_t)&v701, 0, 0);
                        char v310 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v685[7] + 40) + 272), *(llvm::Type **)v309, 1);
                        unint64_t v311 = (char *)operator new(0x80uLL);
                        *((_DWORD *)v311 + 21) = *((_DWORD *)v311 + 21) & 0x38000000 | 2;
                        *(void *)unint64_t v311 = 0;
                        *((void *)v311 + 2) = 0;
                        *((void *)v311 + 1) = 0;
                        *((void *)v311 + 5) = 0;
                        *((void *)v311 + 6) = 0;
                        *((void *)v311 + 4) = 0;
                        uint64_t v312 = (uint64_t *)(v311 + 32);
                        *((void *)v311 + 8) = ***(void ***)v309 + 1576;
                        unint64_t v313 = (llvm::Instruction *)(v311 + 64);
                        *((void *)v311 + 3) = v311 + 64;
                        *((void *)v311 + 7) = v311 + 64;
                        *((void *)v311 + 9) = 0;
                        v311[80] = 61;
                        v311[81] = 0;
                        *((_WORD *)v311 + 41) = 0;
                        *((_DWORD *)v311 + 21) = 2;
                        *(_OWORD *)(v311 + 88) = 0u;
                        *(_OWORD *)(v311 + 104) = 0u;
                        *((_DWORD *)v311 + 30) = 0;
                        *(void *)unint64_t v311 = v309;
                        uint64_t v316 = *((void *)v309 + 1);
                        v315 = (void *)((char *)v309 + 8);
                        uint64_t v314 = v316;
                        *((void *)v311 + 1) = v316;
                        if (v316) {
                          *(void *)(v314 + 16) = v311 + 8;
                        }
                        *((void *)v311 + 2) = v315;
                        void *v315 = v311;
                        if (*((void *)v311 + 4))
                        {
                          **((void **)v311 + 6) = *((void *)v311 + 5);
                          uint64_t v409 = *((void *)v311 + 5);
                          if (v409) {
                            *(void *)(v409 + 16) = *((void *)v311 + 6);
                          }
                        }
                        uint64_t *v312 = v304;
                        char v21 = *(uint64_t ***)v632;
                        if (v304)
                        {
                          uint64_t v319 = *(void *)(v304 + 8);
                          int v318 = (uint64_t **)(v304 + 8);
                          uint64_t v317 = v319;
                          *((void *)v311 + 5) = v319;
                          if (v319) {
                            *(void *)(v317 + 16) = v311 + 40;
                          }
                          *((void *)v311 + 6) = v318;
                          *int v318 = v312;
                        }
                        *((_WORD *)v311 + 41) = 2 * (v310 & 0x3F);
                        v311[124] = 1;
                        LOWORD(v704) = 257;
                        (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, uint64_t *))(*v689 + 16))(v689, v313, &v701, v685, v686);
                        if (DWORD2(__p))
                        {
                          uint64_t v381 = __p;
                          uint64_t v382 = __p + 16 * DWORD2(__p);
                          do
                          {
                            llvm::Instruction::setMetadata(v313, *(_DWORD *)v381, *(llvm::MDNode **)(v381 + 8));
                            v381 += 16;
                          }
                          while (v381 != v382);
                        }
                        sub_1CCB54E7C(a1, v307);
                        sub_1CCB54E7C(a1, v313);
                        unint64_t v230 = v634;
                      }
                      if (*(unsigned char *)(a1 + 1013))
                      {
                        BOOL v320 = *(uint64_t **)(a1 + 632);
                        uint64_t v321 = v320[3];
                        v720 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 424), 0, 0);
                        v721 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 424), v230, 0);
                        LOWORD(v704) = 257;
                        uint64_t v322 = sub_1CC27CEC0((uint64_t *)&__p, v321, v320, (uint64_t *)&v720, 2, (uint64_t)&v701);
                        int v323 = *(llvm::Type **)(a1 + 504);
                        __int16 v722 = 257;
                        LOBYTE(v321) = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v685[7] + 40) + 272), v323, 1);
                        int v324 = operator new(0x60uLL);
                        v324[13] = v324[13] & 0x38000000 | 1;
                        unint64_t v325 = (llvm::Instruction *)(v324 + 8);
                        *(void *)int v324 = 0;
                        *((void *)v324 + 1) = 0;
                        *((void *)v324 + 2) = 0;
                        *((void *)v324 + 3) = v324 + 8;
                        LOWORD(v704) = 257;
                        llvm::LoadInst::LoadInst((llvm::Value *)(v324 + 8), (uint64_t)v323, v322, (const char **)&v701, 0, v321, 0);
                        (*(void (**)(void *, llvm::Instruction *, uint64_t **, uint64_t *, uint64_t *))(*v689 + 16))(v689, v325, &v720, v685, v686);
                        if (DWORD2(__p))
                        {
                          uint64_t v360 = __p;
                          uint64_t v361 = __p + 16 * DWORD2(__p);
                          do
                          {
                            llvm::Instruction::setMetadata(v325, *(_DWORD *)v360, *(llvm::MDNode **)(v360 + 8));
                            v360 += 16;
                          }
                          while (v360 != v361);
                        }
                        LOWORD(v704) = 257;
                        int v328 = llvm::Constant::getNullValue(*(llvm::Constant **)v325, v326, v327);
                        uint64_t v329 = sub_1CB845F20((uint64_t)&__p, 32, v325, (uint64_t)v328, (uint64_t)&v701);
                        sub_1CD1290BC((uint64_t)v329, v279);
                      }
                      if (!((v631 | v638) & 1 | (*(unsigned char *)(a1 + 1016) == 0)))
                      {
                        uint64_t v330 = (uint64_t **)v21[5];
                        v701 = (void *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v687 + 1912), (llvm::Type *)*((unsigned int *)v330 + 69));
                        uint64_t Declaration = llvm::Intrinsic::getDeclaration(v330, 147, (uint64_t)&v701, 1);
                        char v334 = (uint64_t **)Declaration;
                        if (Declaration) {
                          char v335 = *(uint64_t ***)(Declaration + 24);
                        }
                        else {
                          char v335 = 0;
                        }
                        v720 = (uint64_t *)llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 456), v332, v333);
                        LOWORD(v704) = 257;
                        uint64_t v336 = sub_1CB845BAC((uint64_t *)&__p, v335, v334, (uint64_t *)&v720, 1, (uint64_t)&v701, 0);
                        int v337 = (unsigned __int8 *)v336;
                        uint64_t v338 = *(void *)(a1 + 424);
                        __int16 v722 = 257;
                        if (*(void *)v336 != v338)
                        {
                          if (*(unsigned __int8 *)(v336 + 16) <= 0x14u)
                          {
                            int v337 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v688
                                                       + 28))(v688, 47, v336, v338);
                            if (v337) {
                              BOOL v341 = v337[16] >= 0x1Cu;
                            }
                            else {
                              BOOL v341 = 0;
                            }
                            if (v341)
                            {
                              (*(void (**)(void *, unsigned __int8 *, uint64_t **, uint64_t *, uint64_t *))(*v689 + 16))(v689, v337, &v720, v685, v686);
                              if (DWORD2(__p))
                              {
                                uint64_t v410 = __p;
                                uint64_t v411 = __p + 16 * DWORD2(__p);
                                do
                                {
                                  llvm::Instruction::setMetadata((llvm::Instruction *)v337, *(_DWORD *)v410, *(llvm::MDNode **)(v410 + 8));
                                  v410 += 16;
                                }
                                while (v410 != v411);
                              }
                            }
                          }
                          else
                          {
                            LOWORD(v704) = 257;
                            int v337 = (unsigned __int8 *)llvm::CastInst::Create(47, v336, v338, (const char **)&v701, 0);
                            (*(void (**)(void *, unsigned __int8 *, uint64_t **, uint64_t *, uint64_t *))(*v689 + 16))(v689, v337, &v720, v685, v686);
                            if (DWORD2(__p))
                            {
                              uint64_t v339 = __p;
                              uint64_t v340 = __p + 16 * DWORD2(__p);
                              do
                              {
                                llvm::Instruction::setMetadata((llvm::Instruction *)v337, *(_DWORD *)v339, *(llvm::MDNode **)(v339 + 8));
                                v339 += 16;
                              }
                              while (v339 != v340);
                            }
                          }
                        }
                        long long v342 = *(llvm::Type **)(a1 + 424);
                        uint64_t v343 = *(void *)(a1 + 400);
                        __int16 v722 = 257;
                        char v344 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v685[7] + 40) + 272), v342, 1);
                        uint64_t v345 = operator new(0x60uLL);
                        v345[13] = v345[13] & 0x38000000 | 1;
                        uint64_t v346 = (llvm::Instruction *)(v345 + 8);
                        *(void *)uint64_t v345 = 0;
                        *((void *)v345 + 1) = 0;
                        *((void *)v345 + 2) = 0;
                        *((void *)v345 + 3) = v345 + 8;
                        LOWORD(v704) = 257;
                        llvm::LoadInst::LoadInst((llvm::Value *)(v345 + 8), (uint64_t)v342, v343, (const char **)&v701, 0, v344, 0);
                        (*(void (**)(void *, llvm::Instruction *, uint64_t **, uint64_t *, uint64_t *))(*v689 + 16))(v689, v346, &v720, v685, v686);
                        if (DWORD2(__p))
                        {
                          uint64_t v362 = __p;
                          uint64_t v363 = __p + 16 * DWORD2(__p);
                          do
                          {
                            llvm::Instruction::setMetadata(v346, *(_DWORD *)v362, *(llvm::MDNode **)(v362 + 8));
                            v362 += 16;
                          }
                          while (v362 != v363);
                        }
                        LOWORD(v704) = 257;
                        int v347 = sub_1CB845F20((uint64_t)&__p, 36, v337, (uint64_t)v346, (uint64_t)&v701);
                        sub_1CD1290BC((uint64_t)v347, v279);
                      }
                      if ((unsigned char *)__p != v683) {
                        free((void *)__p);
                      }
                      if (v643)
                      {
                        int v348 = *v643;
                        if ((v348 - 4) > 0x1E)
                        {
                          if ((v348 - 3) >= 0xFFFFFFFE) {
                            uint64_t v349 = v643;
                          }
                          else {
                            uint64_t v349 = 0;
                          }
                          if ((v348 - 3) >= 0xFFFFFFFE)
                          {
                            unint64_t v350 = (unint64_t)(v349 + 8);
                            goto LABEL_530;
                          }
                          if (v348 == 3) {
                            *((void *)v643 + 1) = 0;
                          }
                        }
                        else if ((v643[1] & 0x7F) == 2 || *((_DWORD *)v643 + 3))
                        {
                          uint64_t v402 = *((void *)v643 + 2);
                          if ((v402 & 4) != 0)
                          {
                            unint64_t v350 = v402 & 0xFFFFFFFFFFFFFFF8;
                            if (v350)
                            {
LABEL_530:
                              *(void *)&long long __p = &v643;
                              sub_1CC5FA668(v350 + 16, &__p);
                            }
                          }
                        }
                      }
                      if ((llvm::Type *)++v230 == v629) {
                        goto LABEL_653;
                      }
                      continue;
                    }
                    break;
                  }
                  if ((*((unsigned char *)v21 + 23) & 0x20) != 0)
                  {
                    uint64_t v258 = *(void *)**v21;
                    *(void *)&long long __p = v21;
                    int v259 = *(_DWORD *)(v258 + 2496);
                    if (!v259)
                    {
                      int v376 = 0;
                      goto LABEL_569;
                    }
                    uint64_t v260 = *(void *)(v258 + 2480);
                    int v261 = v259 - 1;
                    unsigned int v262 = v261 & v627;
                    char v263 = (void *)(v260 + 40 * (v261 & v627));
                    uint64_t v264 = (void ***)*v263;
                    if ((uint64_t **)*v263 != v21)
                    {
                      uint64_t v265 = 0;
                      int v266 = 1;
                      while (v264 != (void ***)-4096)
                      {
                        if (v265) {
                          BOOL v267 = 0;
                        }
                        else {
                          BOOL v267 = v264 == (void ***)-8192;
                        }
                        if (v267) {
                          uint64_t v265 = v263;
                        }
                        unsigned int v268 = v262 + v266++;
                        unsigned int v262 = v268 & v261;
                        char v263 = (void *)(v260 + 40 * v262);
                        uint64_t v264 = (void ***)*v263;
                        if ((uint64_t **)*v263 == v21) {
                          goto LABEL_440;
                        }
                      }
                      if (v265) {
                        int v376 = v265;
                      }
                      else {
                        int v376 = v263;
                      }
LABEL_569:
                      char v263 = sub_1CC609054(v258 + 2480, (uint64_t)&__p, (uint64_t *)&__p, v376);
                      uint64_t v377 = __p;
                      v263[4] = 0;
                      v263[3] = 0;
                      *char v263 = v377;
                      v263[1] = v263 + 3;
                      v263[2] = 0x100000000;
                    }
LABEL_440:
                    uint64_t v269 = *((unsigned int *)v263 + 4);
                    if (v269)
                    {
                      uint64_t v270 = (uint64_t *)(v263[1] + 8);
                      uint64_t v271 = 16 * v269;
                      while (*((_DWORD *)v270 - 2))
                      {
                        v270 += 2;
                        v271 -= 16;
                        if (!v271) {
                          goto LABEL_453;
                        }
                      }
                      uint64_t v272 = *v270;
                      if (*v270)
                      {
                        uint64_t v273 = *(void *)(v272 + 16);
                        int v274 = (void *)(v273 & 0xFFFFFFFFFFFFFFF8);
                        if ((v273 & 4) != 0) {
                          int v274 = (void *)*v274;
                        }
                        int v275 = (void *)llvm::DILocation::getImpl(v274, *(_DWORD *)(v272 + 28), 0, v272, 0, 0, 0, 1);
                        v701 = v275;
                        if (v275) {
                          llvm::MetadataTracking::track((uint64_t)&v701, (unsigned __int8 *)v275, 2);
                        }
                        if (v643)
                        {
                          int v383 = *v643;
                          if ((v383 - 4) > 0x1E)
                          {
                            if ((v383 - 3) >= 0xFFFFFFFE) {
                              long long v391 = v643;
                            }
                            else {
                              long long v391 = 0;
                            }
                            if ((v383 - 3) < 0xFFFFFFFE)
                            {
                              char v21 = *(uint64_t ***)v632;
                              if (v383 == 3) {
                                *((void *)v643 + 1) = 0;
                              }
                              goto LABEL_451;
                            }
                            unint64_t v385 = (unint64_t)(v391 + 8);
                          }
                          else
                          {
                            char v21 = *(uint64_t ***)v632;
                            if ((v643[1] & 0x7F) != 2 && !*((_DWORD *)v643 + 3)) {
                              goto LABEL_451;
                            }
                            uint64_t v384 = *((void *)v643 + 2);
                            if ((v384 & 4) == 0) {
                              goto LABEL_451;
                            }
                            unint64_t v385 = v384 & 0xFFFFFFFFFFFFFFF8;
                            if (!v385) {
                              goto LABEL_451;
                            }
                          }
                          *(void *)&long long __p = &v643;
                          sub_1CC5FA668(v385 + 16, &__p);
                          char v21 = *(uint64_t ***)v632;
                        }
LABEL_451:
                        v643 = (unsigned __int8 *)v701;
                        if (v701) {
                          llvm::MetadataTracking::retrack((uint64_t)&v701, (unsigned __int8 *)v701, (uint64_t)&v643);
                        }
                      }
                    }
                  }
LABEL_453:
                  uint64_t v232 = llvm::PrepareToSplitEntryBlock(v231, v232);
                  goto LABEL_454;
                }
LABEL_653:
                if (v680)
                {
                  uint64_t v414 = (uint64_t ***)v679;
                  for (uint64_t n = 8 * v680; n; n -= 8)
                  {
                    v416 = 0;
                    uint64_t v417 = *v414;
                    uint64_t v418 = ***v414;
                    *(void *)&long long __p = v683;
                    *((void *)&__p + 1) = 0x200000000;
                    uint64_t v687 = v418;
                    v688 = &v696;
                    v689 = v697;
                    uint64_t v690 = 0;
                    int v691 = 0;
                    __int16 v692 = 512;
                    char v693 = 7;
                    v685 = 0;
                    v686 = 0;
                    uint64_t v694 = 0;
                    uint64_t v695 = 0;
                    v696 = &unk_1F2616E88;
                    v697[0] = &unk_1F2617008;
                    v685 = v417[5];
                    v686 = (uint64_t *)(v417 + 3);
                    v419 = v417[6];
                    v720 = v419;
                    if (v419)
                    {
                      llvm::MetadataTracking::track((uint64_t)&v720, (unsigned __int8 *)v419, 2);
                      v416 = v720;
                    }
                    sub_1CB8461A4((uint64_t)&__p, 0, (uint64_t)v416);
                    if (!v720) {
                      goto LABEL_658;
                    }
                    int v425 = *(unsigned __int8 *)v720;
                    if ((v425 - 4) > 0x1E)
                    {
                      if ((v425 - 3) >= 0xFFFFFFFE) {
                        int v428 = v720;
                      }
                      else {
                        int v428 = 0;
                      }
                      if ((v425 - 3) < 0xFFFFFFFE)
                      {
                        if (v425 == 3) {
                          v720[1] = 0;
                        }
                        goto LABEL_658;
                      }
                      unint64_t v427 = (unint64_t)(v428 + 1);
                    }
                    else
                    {
                      if ((*((unsigned char *)v720 + 1) & 0x7F) != 2 && !*((_DWORD *)v720 + 3)) {
                        goto LABEL_658;
                      }
                      uint64_t v426 = v720[2];
                      if ((v426 & 4) == 0) {
                        goto LABEL_658;
                      }
                      unint64_t v427 = v426 & 0xFFFFFFFFFFFFFFF8;
                      if (!v427) {
                        goto LABEL_658;
                      }
                    }
                    v701 = &v720;
                    sub_1CC5FA668(v427 + 16, &v701);
LABEL_658:
                    v421 = (llvm::CastInst *)*(v417 - 4);
                    if (*((unsigned char *)v421 + 16) != 24)
                    {
                      uint64_t v422 = *(uint64_t ***)a1;
                      v423 = *(uint64_t ***)(a1 + 8);
                      uint64_t v424 = *(llvm::Value **)(a1 + 424);
                      LOWORD(v704) = 257;
                      v718[0] = (uint64_t)sub_1CC277FE0((uint64_t)&__p, v421, v424, (uint64_t)&v701, v420);
                      __int16 v722 = 257;
                      sub_1CB845BAC((uint64_t *)&__p, v422, v423, v718, 1, (uint64_t)&v720, 0);
                    }
                    if ((unsigned char *)__p != v683) {
                      free((void *)__p);
                    }
                    ++v414;
                  }
                }
                if (v674)
                {
                  uint64_t v429 = (uint64_t ***)v673;
                  uint64_t v430 = 8 * v674;
                  while (1)
                  {
                    int v431 = *v429;
                    if (*v429)
                    {
                      if (*((unsigned char *)v431 + 16) == 81) {
                        break;
                      }
                    }
LABEL_706:
                    ++v429;
                    v430 -= 8;
                    if (!v430) {
                      goto LABEL_722;
                    }
                  }
                  uint64_t v432 = 0;
                  uint64_t v433 = **v431;
                  *(void *)&long long __p = v683;
                  *((void *)&__p + 1) = 0x200000000;
                  uint64_t v687 = v433;
                  v688 = &v696;
                  v689 = v697;
                  uint64_t v690 = 0;
                  int v691 = 0;
                  __int16 v692 = 512;
                  char v693 = 7;
                  v685 = 0;
                  v686 = 0;
                  uint64_t v694 = 0;
                  uint64_t v695 = 0;
                  v696 = &unk_1F2616E88;
                  v697[0] = &unk_1F2617008;
                  v685 = v431[5];
                  v686 = (uint64_t *)(v431 + 3);
                  int v434 = v431[6];
                  v720 = v434;
                  if (v434)
                  {
                    llvm::MetadataTracking::track((uint64_t)&v720, (unsigned __int8 *)v434, 2);
                    uint64_t v432 = v720;
                  }
                  sub_1CB8461A4((uint64_t)&__p, 0, (uint64_t)v432);
                  if (v720)
                  {
                    int v453 = *(unsigned __int8 *)v720;
                    if ((v453 - 4) > 0x1E)
                    {
                      if ((v453 - 3) >= 0xFFFFFFFE) {
                        uint64_t v456 = v720;
                      }
                      else {
                        uint64_t v456 = 0;
                      }
                      if ((v453 - 3) < 0xFFFFFFFE)
                      {
                        if (v453 == 3) {
                          v720[1] = 0;
                        }
                        goto LABEL_685;
                      }
                      unint64_t v455 = (unint64_t)(v456 + 1);
                    }
                    else
                    {
                      if ((*((unsigned char *)v720 + 1) & 0x7F) != 2 && !*((_DWORD *)v720 + 3)) {
                        goto LABEL_685;
                      }
                      uint64_t v454 = v720[2];
                      if ((v454 & 4) == 0) {
                        goto LABEL_685;
                      }
                      unint64_t v455 = v454 & 0xFFFFFFFFFFFFFFF8;
                      if (!v455) {
                        goto LABEL_685;
                      }
                    }
                    v701 = &v720;
                    sub_1CC5FA668(v455 + 16, &v701);
                  }
LABEL_685:
                  uint64_t v435 = (uint64_t)*(v431 - 8);
                  if (*(unsigned char *)(*(void *)v435 + 8) == 13)
                  {
                    unint64_t v436 = (unsigned __int8 *)*(v431 - 4);
                    uint64_t v438 = sub_1CB83544C(*(void *)(a1 + 608), *(void *)v435);
                    if (v437 == 1) {
                    if ((unint64_t)(v438 - 1) <= 0x3F)
                    }
                    {
                      unint64_t v439 = (unint64_t)(v438 - 1) >> 3;
                      if ((0x8Bu >> v439))
                      {
                        int v440 = *(unsigned __int8 *)(v435 + 16);
                        int v441 = v436[16];
                        if (v440 != 16 || v441 != 16)
                        {
                          if (v441 == 16) {
                            unint64_t v442 = (llvm::CastInst *)v435;
                          }
                          else {
                            unint64_t v442 = (llvm::CastInst *)v436;
                          }
                          if (v441 == 16) {
                            int v443 = (llvm::CastInst *)v436;
                          }
                          else {
                            int v443 = (llvm::CastInst *)v435;
                          }
                          BOOL v444 = v441 == 16 || v440 == 16;
                          uint64_t v445 = qword_1CFB28610[v439];
                          uint64_t v446 = a1 + 48;
                          if (v444) {
                            uint64_t v446 = a1 + 112;
                          }
                          uint64_t v447 = (uint64_t ***)(v446 + 16 * v445);
                          uint64_t v448 = *v447;
                          uint64_t v449 = v447[1];
                          uint64_t v450 = (llvm::Type ***)llvm::IntegerType::get(*(llvm::IntegerType **)(a1 + 600), (llvm::LLVMContext *)((v438 + 7) & 0xFFFFFFF8));
                          LOWORD(v704) = 257;
                          v698 = sub_1CBF56614((uint64_t)&__p, v443, v450, (llvm::Type *)1, (uint64_t)&v701, v451);
                          __int16 v722 = 257;
                          v699 = sub_1CBF56614((uint64_t)&__p, v442, v450, (llvm::Type *)1, (uint64_t)&v720, v452);
                          __int16 v719 = 257;
                          sub_1CB845BAC((uint64_t *)&__p, v448, v449, (uint64_t *)&v698, 2, (uint64_t)v718, 0);
                        }
                      }
                    }
                  }
                  if ((unsigned char *)__p != v683) {
                    free((void *)__p);
                  }
                  goto LABEL_706;
                }
LABEL_722:
                if (v671)
                {
                  unint64_t v457 = (char *)v670;
                  uint64_t v458 = (char *)v670 + 8 * v671;
                  v635 = v458;
                  while (1)
                  {
                    uint64_t v459 = *(uint64_t ***)v457;
                    if (*(void *)v457 && *(unsigned char *)(*(void *)v457 + 16) == 31) {
                      break;
                    }
LABEL_776:
                    v457 += 8;
                    if (v457 == v458) {
                      goto LABEL_794;
                    }
                  }
                  v461 = 0;
                  uint64_t v462 = **v459;
                  v701 = &v702.u64[1];
                  v702.i64[0] = 0x200000000;
                  uint64_t v707 = v462;
                  v708 = &v716;
                  v709 = &v717;
                  uint64_t v710 = 0;
                  int v711 = 0;
                  __int16 v712 = 512;
                  char v713 = 7;
                  v705 = 0;
                  v706 = 0;
                  uint64_t v714 = 0;
                  uint64_t v715 = 0;
                  v716 = &unk_1F2616E88;
                  v717 = &unk_1F2617008;
                  v705 = v459[5];
                  v706 = v459 + 3;
                  uint64_t v463 = v459[6];
                  v720 = v463;
                  if (v463)
                  {
                    llvm::MetadataTracking::track((uint64_t)&v720, (unsigned __int8 *)v463, 2);
                    v461 = v720;
                  }
                  sub_1CB8461A4((uint64_t)&v701, 0, (uint64_t)v461);
                  if (v720)
                  {
                    int v502 = *(unsigned __int8 *)v720;
                    if ((v502 - 4) > 0x1E)
                    {
                      if ((v502 - 3) >= 0xFFFFFFFE) {
                        v505 = v720;
                      }
                      else {
                        v505 = 0;
                      }
                      if ((v502 - 3) < 0xFFFFFFFE)
                      {
                        if (v502 == 3) {
                          v720[1] = 0;
                        }
                        goto LABEL_732;
                      }
                      unint64_t v504 = (unint64_t)(v505 + 1);
                    }
                    else
                    {
                      if ((*((unsigned char *)v720 + 1) & 0x7F) != 2 && !*((_DWORD *)v720 + 3)) {
                        goto LABEL_732;
                      }
                      uint64_t v503 = v720[2];
                      if ((v503 & 4) == 0) {
                        goto LABEL_732;
                      }
                      unint64_t v504 = v503 & 0xFFFFFFFFFFFFFFF8;
                      if (!v504) {
                        goto LABEL_732;
                      }
                    }
                    *(void *)&long long __p = &v720;
                    sub_1CC5FA668(v504 + 16, &__p);
                  }
LABEL_732:
                  *(void *)&long long __p = v683;
                  *((void *)&__p + 1) = 0x1000000000;
                  unsigned int v464 = *((_DWORD *)v459 + 5);
                  if ((v464 & 0x40000000) != 0) {
                    uint64_t v465 = (llvm::Instruction **)*(v459 - 1);
                  }
                  else {
                    uint64_t v465 = (llvm::Instruction **)&v459[-4 * (v464 & 0x7FFFFFF)];
                  }
                  v639 = *v465;
                  uint64_t v466 = *(void *)*v465;
                  if ((*(_DWORD *)(v466 + 8) & 0xFE) == 0x12) {
                    uint64_t v466 = **(void **)(v466 + 16);
                  }
                  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v466);
                  uint64_t v468 = *(void *)(a1 + 440);
                  uint64_t v469 = (llvm::Type *)v468;
                  if ((*(_DWORD *)(v468 + 8) & 0xFE) == 0x12) {
                    uint64_t v469 = **(llvm::Type ***)(v468 + 16);
                  }
                  if (PrimitiveSizeInBits <= llvm::Type::getPrimitiveSizeInBits(v469))
                  {
                    v470 = llvm::ConstantInt::get((llvm::ConstantInt *)v468, ((v464 >> 1) & 0x3FFFFFF) - 1, 0);
                    if (DWORD2(__p) >= (unint64_t)HIDWORD(__p)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *(void *)(__p + 8 * DWORD2(__p)) = v470;
                    ++DWORD2(__p);
                    v471 = *(llvm::ConstantInt **)(a1 + 440);
                    v472 = *(llvm::Type **)v639;
                    if ((*(_DWORD *)(*(void *)v639 + 8) & 0xFE) == 0x12) {
                      v472 = (llvm::Type *)**((void **)v472 + 2);
                    }
                    unsigned int v473 = llvm::Type::getPrimitiveSizeInBits(v472);
                    v474 = llvm::ConstantInt::get(v471, v473, 0);
                    if (DWORD2(__p) >= (unint64_t)HIDWORD(__p)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *(void *)(__p + 8 * DWORD2(__p)) = v474;
                    ++DWORD2(__p);
                    v475 = *(llvm::Type **)v639;
                    if ((*(_DWORD *)(*(void *)v639 + 8) & 0xFE) == 0x12) {
                      v475 = (llvm::Type *)**((void **)v475 + 2);
                    }
                    unsigned int v476 = llvm::Type::getPrimitiveSizeInBits(v475);
                    uint64_t v477 = *(void *)(a1 + 440);
                    uint64_t v478 = (llvm::Type *)v477;
                    if ((*(_DWORD *)(v477 + 8) & 0xFE) == 0x12) {
                      uint64_t v478 = **(llvm::Type ***)(v477 + 16);
                    }
                    if (v476 < llvm::Type::getPrimitiveSizeInBits(v478))
                    {
                      __int16 v722 = 257;
                      v639 = sub_1CBF56614((uint64_t)&v701, v639, (llvm::Type ***)v477, 0, (uint64_t)&v720, v479);
                    }
                    if (((*((_DWORD *)v459 + 5) >> 1) & 0x3FFFFFF) == 1)
                    {
                      unsigned int v490 = DWORD2(__p);
                    }
                    else
                    {
                      uint64_t v480 = 0;
                      uint64_t v481 = 2 * (((*((_DWORD *)v459 + 5) >> 1) & 0x3FFFFFFu) - 1);
                      do
                      {
                        int v482 = *((_DWORD *)v459 + 5);
                        if ((v482 & 0x40000000) != 0) {
                          v483 = (uint64_t **)*(v459 - 1);
                        }
                        else {
                          v483 = &v459[-4 * (v482 & 0x7FFFFFF)];
                        }
                        v484 = (llvm::detail::IEEEFloat *)v483[4 * ((v480 + 2) & 0xFFFFFFFE)];
                        v485 = *(llvm::Type **)v484;
                        if ((*(_DWORD *)(*(void *)v484 + 8) & 0xFE) == 0x12) {
                          v485 = (llvm::Type *)**((void **)v485 + 2);
                        }
                        unsigned int v486 = llvm::Type::getPrimitiveSizeInBits(v485);
                        uint64_t v487 = *(void *)(a1 + 440);
                        v488 = (llvm::Type *)v487;
                        if ((*(_DWORD *)(v487 + 8) & 0xFE) == 0x12) {
                          v488 = **(llvm::Type ***)(v487 + 16);
                        }
                        if (v486 < llvm::Type::getPrimitiveSizeInBits(v488))
                        {
                          if ((v482 & 0x40000000) != 0) {
                            v489 = (uint64_t **)*(v459 - 1);
                          }
                          else {
                            v489 = &v459[-4 * (v482 & 0x7FFFFFF)];
                          }
                          v484 = sub_1CC56C0C0((llvm *)0x27, (llvm::detail::IEEEFloat *)v489[4 * ((v480 + 2) & 0xFFFFFFFE)], (llvm::Constant *)v487, 0);
                        }
                        if (DWORD2(__p) >= (unint64_t)HIDWORD(__p)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *(void *)(__p + 8 * DWORD2(__p)) = v484;
                        unsigned int v490 = ++DWORD2(__p);
                        v480 += 2;
                      }
                      while (v481 != v480);
                      uint64_t v458 = v635;
                    }
                    unint64_t v491 = 126 - 2 * __clz((8 * v490 - 16) >> 3);
                    if (v490 == 2) {
                      uint64_t v492 = 0;
                    }
                    else {
                      uint64_t v492 = v491;
                    }
                    sub_1CCB54F00(__p + 16, (uint64_t *)(__p + 8 * v490), v492, 1);
                    uint64_t v493 = llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 440), (llvm::Type *)DWORD2(__p));
                    uint64_t v494 = (char *)operator new(0x78uLL);
                    uint64_t v495 = (unint64_t *)(v494 + 32);
                    *((_DWORD *)v494 + 13) = *((_DWORD *)v494 + 13) & 0x38000000 | 1;
                    *(void *)uint64_t v494 = 0;
                    *((void *)v494 + 1) = 0;
                    *((void *)v494 + 2) = 0;
                    *((void *)v494 + 3) = v494 + 32;
                    uint64_t v496 = *(void *)(a1 + 520);
                    uint64_t v497 = llvm::ConstantArray::get(v493, (llvm::Type *)__p, DWORD2(__p));
                    v720 = (uint64_t *)"__sancov_gen_cov_switch_values";
                    __int16 v722 = 259;
                    llvm::GlobalVariable::GlobalVariable(v495, v496, v493, 0, 7, (unint64_t)v497, (const char **)&v720, 0, 0, 0, 0);
                    v498 = *(uint64_t ***)(a1 + 384);
                    uint64_t v499 = *(uint64_t ***)(a1 + 392);
                    v698 = v639;
                    uint64_t v500 = *(llvm::Value **)(a1 + 448);
                    __int16 v722 = 257;
                    v699 = sub_1CC277FE0((uint64_t)&v701, (llvm::CastInst *)v495, v500, (uint64_t)&v720, v501);
                    __int16 v719 = 257;
                    sub_1CB845BAC((uint64_t *)&v701, v498, v499, (uint64_t *)&v698, 2, (uint64_t)v718, 0);
                    if ((unsigned char *)__p != v683) {
                      free((void *)__p);
                    }
                  }
                  if (v701 != &v702.u64[1]) {
                    free(v701);
                  }
                  goto LABEL_776;
                }
LABEL_794:
                if (v668)
                {
                  v506 = (uint64_t ***)v667;
                  for (iuint64_t i = 8 * v668; ii; ii -= 8)
                  {
                    v508 = 0;
                    v509 = *v506;
                    uint64_t v510 = ***v506;
                    *(void *)&long long __p = v683;
                    *((void *)&__p + 1) = 0x200000000;
                    uint64_t v687 = v510;
                    v688 = &v696;
                    v689 = v697;
                    uint64_t v690 = 0;
                    int v691 = 0;
                    __int16 v692 = 512;
                    char v693 = 7;
                    v685 = 0;
                    v686 = 0;
                    uint64_t v694 = 0;
                    uint64_t v695 = 0;
                    v696 = &unk_1F2616E88;
                    v697[0] = &unk_1F2617008;
                    v685 = v509[5];
                    v686 = (uint64_t *)(v509 + 3);
                    uint64_t v511 = v509[6];
                    v720 = v511;
                    if (v511)
                    {
                      llvm::MetadataTracking::track((uint64_t)&v720, (unsigned __int8 *)v511, 2);
                      v508 = v720;
                    }
                    sub_1CB8461A4((uint64_t)&__p, 0, (uint64_t)v508);
                    if (!v720) {
                      goto LABEL_799;
                    }
                    int v523 = *(unsigned __int8 *)v720;
                    if ((v523 - 4) > 0x1E)
                    {
                      if ((v523 - 3) >= 0xFFFFFFFE) {
                        uint64_t v526 = v720;
                      }
                      else {
                        uint64_t v526 = 0;
                      }
                      if ((v523 - 3) < 0xFFFFFFFE)
                      {
                        if (v523 == 3) {
                          v720[1] = 0;
                        }
                        goto LABEL_799;
                      }
                      unint64_t v525 = (unint64_t)(v526 + 1);
                    }
                    else
                    {
                      if ((*((unsigned char *)v720 + 1) & 0x7F) != 2 && !*((_DWORD *)v720 + 3)) {
                        goto LABEL_799;
                      }
                      uint64_t v524 = v720[2];
                      if ((v524 & 4) == 0) {
                        goto LABEL_799;
                      }
                      unint64_t v525 = v524 & 0xFFFFFFFFFFFFFFF8;
                      if (!v525) {
                        goto LABEL_799;
                      }
                    }
                    v701 = &v720;
                    sub_1CC5FA668(v525 + 16, &v701);
LABEL_799:
                    uint64_t v512 = (uint64_t)*(v509 - 4);
                    if (*(unsigned char *)(v512 + 16) != 16 && *(unsigned char *)(*(void *)v512 + 8) == 13)
                    {
                      uint64_t v514 = sub_1CB83544C(*(void *)(a1 + 608), *(void *)v512);
                      if (v513 == 1) {
                      v515 = (llvm::LLVMContext *)((v514 + 7) & 0xFFFFFFFFFFFFFFF8);
                      }
                      if (v515 == (llvm::LLVMContext *)64) {
                        int v516 = 1;
                      }
                      else {
                        int v516 = -1;
                      }
                      if (v515 == (llvm::LLVMContext *)32) {
                        unsigned int v517 = 0;
                      }
                      else {
                        unsigned int v517 = v516;
                      }
                      if ((v517 & 0x80000000) == 0)
                      {
                        uint64_t v518 = (llvm::Type ***)llvm::IntegerType::get(*(llvm::IntegerType **)(a1 + 600), v515);
                        uint64_t v519 = a1 + 336 + 16 * v517;
                        uint64_t v520 = *(uint64_t ***)v519;
                        unint64_t v521 = *(uint64_t ***)(v519 + 8);
                        LOWORD(v704) = 257;
                        v718[0] = (uint64_t)sub_1CBF56614((uint64_t)&__p, (llvm::CastInst *)v512, v518, (llvm::Type *)1, (uint64_t)&v701, v522);
                        __int16 v722 = 257;
                        sub_1CB845BAC((uint64_t *)&__p, v520, v521, v718, 1, (uint64_t)&v720, 0);
                      }
                    }
                    if ((unsigned char *)__p != v683) {
                      free((void *)__p);
                    }
                    ++v506;
                  }
                }
                if (v665)
                {
                  uint64_t v527 = (char *)v664;
                  int v528 = (char *)v664 + 8 * v665;
                  do
                  {
                    uint64_t v529 = 0;
                    int v530 = *(uint64_t ***)v527;
                    uint64_t v531 = ***(void ***)v527;
                    *(void *)&long long __p = v683;
                    *((void *)&__p + 1) = 0x200000000;
                    uint64_t v687 = v531;
                    v688 = &v696;
                    v689 = v697;
                    uint64_t v690 = 0;
                    int v691 = 0;
                    __int16 v692 = 512;
                    char v693 = 7;
                    v685 = 0;
                    v686 = 0;
                    uint64_t v694 = 0;
                    uint64_t v695 = 0;
                    v696 = &unk_1F2616E88;
                    v697[0] = &unk_1F2617008;
                    v685 = v530[5];
                    v686 = (uint64_t *)(v530 + 3);
                    unint64_t v532 = v530[6];
                    v720 = v532;
                    if (v532)
                    {
                      llvm::MetadataTracking::track((uint64_t)&v720, (unsigned __int8 *)v532, 2);
                      uint64_t v529 = v720;
                    }
                    sub_1CB8461A4((uint64_t)&__p, 0, (uint64_t)v529);
                    if (!v720) {
                      goto LABEL_834;
                    }
                    int v540 = *(unsigned __int8 *)v720;
                    if ((v540 - 4) > 0x1E)
                    {
                      if ((v540 - 3) >= 0xFFFFFFFE) {
                        v543 = v720;
                      }
                      else {
                        v543 = 0;
                      }
                      if ((v540 - 3) < 0xFFFFFFFE)
                      {
                        if (v540 == 3) {
                          v720[1] = 0;
                        }
                        goto LABEL_834;
                      }
                      unint64_t v542 = (unint64_t)(v543 + 1);
                    }
                    else
                    {
                      if ((*((unsigned char *)v720 + 1) & 0x7F) != 2 && !*((_DWORD *)v720 + 3)) {
                        goto LABEL_834;
                      }
                      uint64_t v541 = v720[2];
                      if ((v541 & 4) == 0) {
                        goto LABEL_834;
                      }
                      unint64_t v542 = v541 & 0xFFFFFFFFFFFFFFF8;
                      if (!v542) {
                        goto LABEL_834;
                      }
                    }
                    v701 = &v720;
                    sub_1CC5FA668(v542 + 16, &v701);
LABEL_834:
                    uint64_t v534 = *((_DWORD *)v530 + 5) & 0x7FFFFFF;
                    if (&v530[-4 * v534 + 4] != v530)
                    {
                      uint64_t v535 = 32 - 32 * v534;
                      do
                      {
                        BOOL v536 = *(llvm::CastInst **)((char *)v530 + v535);
                        if (*((unsigned char *)v536 + 16) != 16 && *(unsigned char *)(*(void *)v536 + 8) == 13)
                        {
                          int v537 = *(uint64_t ***)(a1 + 368);
                          uint64_t v538 = *(uint64_t ***)(a1 + 376);
                          v539 = *(llvm::Type ****)(a1 + 424);
                          LOWORD(v704) = 257;
                          v718[0] = (uint64_t)sub_1CBF56614((uint64_t)&__p, v536, v539, (llvm::Type *)1, (uint64_t)&v701, v533);
                          __int16 v722 = 257;
                          sub_1CB845BAC((uint64_t *)&__p, v537, v538, v718, 1, (uint64_t)&v720, 0);
                        }
                        v535 += 32;
                      }
                      while (v535);
                    }
                    if ((unsigned char *)__p != v683) {
                      free((void *)__p);
                    }
                    v527 += 8;
                  }
                  while (v527 != v528);
                }
                unint64_t v544 = (uint64_t **)v661;
                int v545 = (uint64_t ***)v658;
                uint64_t v546 = v659;
                v701 = *(void **)(a1 + 496);
                int8x16_t v702 = vextq_s8(*(int8x16_t *)(a1 + 464), *(int8x16_t *)(a1 + 464), 8uLL);
                uint64_t v547 = *(void *)(a1 + 416);
                uint64_t v703 = *(void *)(a1 + 448);
                uint64_t v704 = v547;
                if (v662)
                {
                  for (juint64_t j = 8 * v662; jj; jj -= 8)
                  {
                    uint64_t v549 = 0;
                    v550 = *v544;
                    uint64_t v551 = *(void *)**v544;
                    *(void *)&long long __p = v683;
                    *((void *)&__p + 1) = 0x200000000;
                    uint64_t v687 = v551;
                    v688 = &v696;
                    v689 = v697;
                    uint64_t v690 = 0;
                    int v691 = 0;
                    __int16 v692 = 512;
                    char v693 = 7;
                    v685 = 0;
                    v686 = 0;
                    uint64_t v694 = 0;
                    uint64_t v695 = 0;
                    v696 = &unk_1F2616E88;
                    v697[0] = &unk_1F2617008;
                    v685 = (uint64_t *)v550[5];
                    v686 = v550 + 3;
                    v552 = (unsigned __int8 *)v550[6];
                    v718[0] = (uint64_t)v552;
                    if (v552)
                    {
                      llvm::MetadataTracking::track((uint64_t)v718, v552, 2);
                      uint64_t v549 = v718[0];
                    }
                    sub_1CB8461A4((uint64_t)&__p, 0, v549);
                    if (v718[0])
                    {
                      int v563 = *(unsigned __int8 *)v718[0];
                      if ((v563 - 4) > 0x1E)
                      {
                        if ((v563 - 3) >= 0xFFFFFFFE) {
                          uint64_t v566 = v718[0];
                        }
                        else {
                          uint64_t v566 = 0;
                        }
                        if ((v563 - 3) >= 0xFFFFFFFE)
                        {
                          unint64_t v565 = v566 + 8;
LABEL_886:
                          v720 = v718;
                          sub_1CC5FA668(v565 + 16, &v720);
                          goto LABEL_863;
                        }
                        if (v563 == 3) {
                          *(void *)(v718[0] + 8) = 0;
                        }
                      }
                      else if ((*(unsigned char *)(v718[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v718[0] + 12))
                      {
                        uint64_t v564 = *(void *)(v718[0] + 16);
                        if ((v564 & 4) != 0)
                        {
                          unint64_t v565 = v564 & 0xFFFFFFFFFFFFFFF8;
                          if (v565) {
                            goto LABEL_886;
                          }
                        }
                      }
                    }
LABEL_863:
                    v553 = (llvm::CastInst *)*(v550 - 4);
                    uint64_t v556 = sub_1CB83544C(*(void *)(a1 + 608), *v550);
                    if (v554 == 1) {
                    if ((unint64_t)(v556 - 1) < 0x40)
                    }
                    {
                      unint64_t v557 = (unint64_t)(v556 - 1) >> 3;
                      if ((0x8Bu >> v557))
                      {
                        uint64_t v558 = qword_1CFB28610[v557];
                        goto LABEL_870;
                      }
                    }
                    if (((v556 + 7) & 0xFFFFFFFFFFFFFFF8) == 0x80)
                    {
                      uint64_t v558 = 4;
LABEL_870:
                      uint64_t v559 = a1 + 176 + 16 * v558;
                      __int16 v560 = *(uint64_t ***)v559;
                      uint64_t v561 = *(uint64_t ***)(v559 + 8);
                      int v562 = (llvm::Value *)*(&v701 + v558);
                      __int16 v722 = 257;
                      v698 = sub_1CC277FE0((uint64_t)&__p, v553, v562, (uint64_t)&v720, v555);
                      __int16 v719 = 257;
                      sub_1CB845BAC((uint64_t *)&__p, v560, v561, (uint64_t *)&v698, 1, (uint64_t)v718, 0);
                    }
                    if ((unsigned char *)__p != v683) {
                      free((void *)__p);
                    }
                    ++v544;
                  }
                }
                if (!v546)
                {
LABEL_920:
                  if (v658 != v660) {
                    free(v658);
                  }
                  int v22 = v623;
                  char v12 = v624;
                  a6 = v622;
                  a4 = v625;
                  a5 = v626;
                  if (v661 != v663) {
                    free(v661);
                  }
                  if (v664 != v666) {
                    free(v664);
                  }
                  if (v667 != v669) {
                    free(v667);
                  }
                  if (v670 != v672) {
                    free(v670);
                  }
                  if (v673 != v675) {
                    free(v673);
                  }
                  if ((void *)__s1 != v677) {
                    free((void *)__s1);
                  }
                  if (v679 != v681) {
                    free(v679);
                  }
                  char v84 = v637;
                  goto LABEL_88;
                }
                uint64_t v567 = 8 * v546;
                while (2)
                {
                  uint64_t v568 = 0;
                  uint64_t v569 = *v545;
                  uint64_t v570 = ***v545;
                  *(void *)&long long __p = v683;
                  *((void *)&__p + 1) = 0x200000000;
                  uint64_t v687 = v570;
                  v688 = &v696;
                  v689 = v697;
                  uint64_t v690 = 0;
                  int v691 = 0;
                  __int16 v692 = 512;
                  char v693 = 7;
                  v685 = 0;
                  v686 = 0;
                  uint64_t v694 = 0;
                  uint64_t v695 = 0;
                  v696 = &unk_1F2616E88;
                  v697[0] = &unk_1F2617008;
                  v685 = v569[5];
                  v686 = (uint64_t *)(v569 + 3);
                  v571 = (unsigned __int8 *)v569[6];
                  v718[0] = (uint64_t)v571;
                  if (v571)
                  {
                    llvm::MetadataTracking::track((uint64_t)v718, v571, 2);
                    uint64_t v568 = v718[0];
                  }
                  sub_1CB8461A4((uint64_t)&__p, 0, v568);
                  if (v718[0])
                  {
                    int v582 = *(unsigned __int8 *)v718[0];
                    if ((v582 - 4) > 0x1E)
                    {
                      if ((v582 - 3) >= 0xFFFFFFFE) {
                        uint64_t v585 = v718[0];
                      }
                      else {
                        uint64_t v585 = 0;
                      }
                      if ((v582 - 3) < 0xFFFFFFFE)
                      {
                        if (v582 == 3) {
                          *(void *)(v718[0] + 8) = 0;
                        }
                        goto LABEL_894;
                      }
                      unint64_t v584 = v585 + 8;
                    }
                    else
                    {
                      if ((*(unsigned char *)(v718[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v718[0] + 12)) {
                        goto LABEL_894;
                      }
                      uint64_t v583 = *(void *)(v718[0] + 16);
                      if ((v583 & 4) == 0) {
                        goto LABEL_894;
                      }
                      unint64_t v584 = v583 & 0xFFFFFFFFFFFFFFF8;
                      if (!v584) {
                        goto LABEL_894;
                      }
                    }
                    v720 = v718;
                    sub_1CC5FA668(v584 + 16, &v720);
                  }
LABEL_894:
                  unint64_t v572 = (llvm::CastInst *)*(v569 - 4);
                  uint64_t v575 = sub_1CB83544C(*(void *)(a1 + 608), **(v569 - 8));
                  if (v573 == 1) {
                  if ((unint64_t)(v575 - 1) < 0x40
                  }
                    && (unint64_t v576 = (unint64_t)(v575 - 1) >> 3, ((0x8Bu >> v576) & 1) != 0))
                  {
                    uint64_t v577 = qword_1CFB28610[v576];
LABEL_901:
                    uint64_t v578 = a1 + 256 + 16 * v577;
                    uint64_t v579 = *(uint64_t ***)v578;
                    v580 = *(uint64_t ***)(v578 + 8);
                    int v581 = (llvm::Value *)*(&v701 + v577);
                    __int16 v722 = 257;
                    v698 = sub_1CC277FE0((uint64_t)&__p, v572, v581, (uint64_t)&v720, v574);
                    __int16 v719 = 257;
                    sub_1CB845BAC((uint64_t *)&__p, v579, v580, (uint64_t *)&v698, 1, (uint64_t)v718, 0);
                  }
                  else if (((v575 + 7) & 0xFFFFFFFFFFFFFFF8) == 0x80)
                  {
                    uint64_t v577 = 4;
                    goto LABEL_901;
                  }
                  if ((unsigned char *)__p != v683) {
                    free((void *)__p);
                  }
                  ++v545;
                  v567 -= 8;
                  if (!v567) {
                    goto LABEL_920;
                  }
                  continue;
                }
              }
              if ((*((unsigned char *)v21 + 23) & 0x10) != 0)
              {
                uint64_t v586 = *(void *)**v21;
                uint64_t v587 = *(void *)(v586 + 152);
                uint64_t v588 = *(unsigned int *)(v586 + 168);
                if (!v588) {
                  goto LABEL_957;
                }
                LODWORD(v589) = (v588 - 1) & (p_p ^ (v21 >> 9));
                uint64_t v590 = (uint64_t ***)(v587 + 16 * v589);
                uint64_t v591 = *v590;
                if (*v590 != v21)
                {
                  int v592 = 1;
                  while (v591 != (uint64_t **)-4096)
                  {
                    int v593 = v589 + v592++;
                    uint64_t v589 = v593 & (v588 - 1);
                    uint64_t v591 = *(uint64_t ***)(v587 + 16 * v589);
                    if (v591 == v21)
                    {
                      uint64_t v590 = (uint64_t ***)(v587 + 16 * v589);
                      goto LABEL_958;
                    }
                  }
LABEL_957:
                  uint64_t v590 = (uint64_t ***)(v587 + 16 * v588);
                }
LABEL_958:
                uint64_t v605 = v590[1];
                size_t v608 = (size_t)*v605;
                __int16 v606 = (unsigned __int8 *)(v605 + 2);
                size_t v607 = v608;
              }
              else
              {
                size_t v607 = 0;
                __int16 v606 = (unsigned __int8 *)&byte_1CFBCE98E;
              }
              int v609 = llvm::SpecialCaseList::inSectionBlame(v146, "coverage", 8uLL, "fun", 3uLL, v606, v607, v101, 0, 0);
              char v84 = v637;
              uint64_t v85 = (llvm::detail::IEEEFloat *)(v21 + 9);
              if (!v609) {
                goto LABEL_88;
              }
              goto LABEL_156;
            }
            if ((v21[4] & 0xF) != 1) {
              goto LABEL_141;
            }
LABEL_88:
            char v84 = (char *)*((void *)v84 + 1);
            if (v84 == v636) {
              goto LABEL_975;
            }
          }
          uint64_t v87 = *(void *)**v21;
          uint64_t v88 = *(void *)(v87 + 152);
          uint64_t v89 = *(unsigned int *)(v87 + 168);
          if (v89)
          {
            LODWORD(v90) = (v89 - 1) & (p_p ^ (v21 >> 9));
            uint64_t v91 = (uint64_t ***)(v88 + 16 * v90);
            uint64_t v92 = *v91;
            if (*v91 == v21)
            {
LABEL_86:
              char v95 = v91[1];
              long long v98 = *v95;
              unsigned int v97 = (char *)(v95 + 2);
              int v96 = v98;
              goto LABEL_87;
            }
            int v93 = 1;
            while (v92 != (uint64_t **)-4096)
            {
              int v94 = v90 + v93++;
              uint64_t v90 = v94 & (v89 - 1);
              uint64_t v92 = *(uint64_t ***)(v88 + 16 * v90);
              if (v92 == v21)
              {
                uint64_t v91 = (uint64_t ***)(v88 + 16 * v90);
                goto LABEL_86;
              }
            }
          }
          uint64_t v91 = (uint64_t ***)(v88 + 16 * v89);
          goto LABEL_86;
        }
        unsigned int v81 = *((_DWORD *)v79 + 8);
      }
      *((_DWORD *)v79 + 8) = v81 | 0x4000;
      goto LABEL_72;
    }
    if (v66)
    {
      p_p = (llvm::detail::IEEEFloat *)llvm::UniqueStringSaver::save(***(void ***)v62 + 2136, p_p, v66);
      uint64_t v67 = v63;
    }
    else
    {
LABEL_997:
      uint64_t v67 = 0;
    }
    uint64_t v68 = ***(void ***)v62;
    v701 = v62;
    int v69 = *(_DWORD *)(v68 + 2520);
    if (v69)
    {
      uint64_t v70 = *(void *)(v68 + 2504);
      int v71 = v69 - 1;
      unsigned int v72 = v71 & ((v62 >> 4) ^ (v62 >> 9));
      uint64_t v73 = (llvm::detail::IEEEFloat **)(v70 + 24 * v72);
      uint64_t v74 = *v73;
      if (*v73 == v62)
      {
LABEL_60:
        v73[1] = p_p;
        v73[2] = v67;
        *((_DWORD *)v62 + 8) = *((_DWORD *)v62 + 8) & 0xFFBFFFFF | ((v67 != 0) << 22);
        char v64 = v683[7];
        goto LABEL_61;
      }
      uint64_t v616 = 0;
      int v617 = 1;
      while (v74 != (llvm::detail::IEEEFloat *)-4096)
      {
        if (v616) {
          BOOL v618 = 0;
        }
        else {
          BOOL v618 = v74 == (llvm::detail::IEEEFloat *)-8192;
        }
        if (v618) {
          uint64_t v616 = v73;
        }
        unsigned int v619 = v72 + v617++;
        unsigned int v72 = v619 & v71;
        uint64_t v73 = (llvm::detail::IEEEFloat **)(v70 + 24 * v72);
        uint64_t v74 = *v73;
        if (*v73 == v62) {
          goto LABEL_60;
        }
      }
      if (v616) {
        int v620 = v616;
      }
      else {
        int v620 = v73;
      }
    }
    else
    {
      int v620 = 0;
    }
    uint64_t v73 = (llvm::detail::IEEEFloat **)sub_1CC5BF31C(v68 + 2504, (uint64_t)&v701, (uint64_t *)&v701, v620);
    __int16 v621 = (llvm::detail::IEEEFloat *)v701;
    v73[1] = 0;
    v73[2] = 0;
    *uint64_t v73 = v621;
    goto LABEL_60;
  }
  return result;
}

uint64_t sub_1CCB53EE4(uint64_t a1)
{
  char v2 = *(void **)(a1 + 824);
  if (v2 != (void *)(a1 + 840)) {
    free(v2);
  }
  int v3 = *(void **)(a1 + 648);
  if (v3 != (void *)(a1 + 664)) {
    free(v3);
  }
  if (*(char *)(a1 + 575) < 0) {
    operator delete(*(void **)(a1 + 552));
  }
  if (*(char *)(a1 + 551) < 0) {
    operator delete(*(void **)(a1 + 528));
  }
  return a1;
}

void llvm::initializeModuleSanitizerCoverageLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  char v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCEBD60, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCB53FC0;
    v4[1] = &v2;
    int v3 = v4;
    std::__call_once(&qword_1EBCEBD60, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CCB53FC0(uint64_t a1)
{
}

uint64_t sub_1CCB54068(uint64_t a1, long long *a2, void *a3, void *a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCEBD58;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F262C4D0;
  long long v5 = *a2;
  int v6 = *((_DWORD *)a2 + 4);
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 44) = v6;
  *(_OWORD *)(a1 + 28) = v5;
  *(void *)(a1 + 56) = 0;
  if (a3[1] != *a3)
  {
    llvm::vfs::getRealFileSystem(&PassRegistry);
    llvm::SpecialCaseList::createOrDie();
  }
  if (a4[1] != *a4)
  {
    llvm::vfs::getRealFileSystem(&PassRegistry);
    llvm::SpecialCaseList::createOrDie();
  }
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCEBD60, memory_order_acquire) != -1)
  {
    v10[0] = sub_1CCB53FC0;
    v10[1] = &PassRegistry;
    char v9 = v10;
    std::__call_once(&qword_1EBCEBD60, &v9, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CCB542E8(uint64_t result, int a2, void *__s1)
{
  int v3 = __s1;
  uint64_t v4 = result;
  if (a2 == 1)
  {
    unint64_t v5 = *((unsigned __int8 *)__s1 + 23);
    unint64_t v6 = __s1[1];
    if ((v5 & 0x80u) == 0) {
      unint64_t v7 = v5 & 0x7F;
    }
    else {
      unint64_t v7 = __s1[1];
    }
    if (v7 == 10)
    {
      if ((v5 & 0x80) != 0) {
        int v3 = (void *)*__s1;
      }
      else {
        unint64_t v6 = *((unsigned __int8 *)__s1 + 23);
      }
      if (v6 >= 0xA) {
        size_t v12 = 10;
      }
      else {
        size_t v12 = v6;
      }
      uint64_t result = memcmp(v3, "sancov_pcs", v12);
      if (result) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v6 == 10;
      }
      if (v13)
      {
        *(unsigned char *)(v4 + 23) = 8;
        uint64_t v11 = 0x4D2450564F43532ELL;
        goto LABEL_37;
      }
    }
    else if (v7 == 12)
    {
      unint64_t v8 = *((unsigned __int8 *)__s1 + 23);
      char v9 = __s1;
      if ((v5 & 0x80) != 0)
      {
        char v9 = (void *)*__s1;
        unint64_t v8 = __s1[1];
      }
      if (v8 >= 0xC) {
        size_t v10 = 12;
      }
      else {
        size_t v10 = v8;
      }
      uint64_t result = memcmp(v9, "sancov_cntrs", v10);
      if (!result && v8 == 12)
      {
        *(unsigned char *)(v4 + 23) = 8;
        uint64_t v11 = 0x4D4324564F43532ELL;
LABEL_37:
        *(void *)uint64_t v4 = v11;
        *(unsigned char *)(v4 + 8) = 0;
        return result;
      }
      if ((v5 & 0x80) != 0) {
        int v3 = (void *)*v3;
      }
      else {
        unint64_t v6 = v5;
      }
      if (v6 >= 0xC) {
        size_t v14 = 12;
      }
      else {
        size_t v14 = v6;
      }
      uint64_t result = memcmp(v3, "sancov_BOOLs", v14);
      if (!result && v6 == 12)
      {
        *(unsigned char *)(v4 + 23) = 8;
        uint64_t v11 = 0x4D4224564F43532ELL;
        goto LABEL_37;
      }
    }
    *(unsigned char *)(v4 + 23) = 8;
    uint64_t v11 = 0x4D4724564F43532ELL;
    goto LABEL_37;
  }

  return std::operator+<char>();
}

void sub_1CCB544B4(uint64_t a1, uint64_t *a2, const char *a3, char *a4, llvm::PointerType *a5, const char *a6)
{
  v13[2] = *MEMORY[0x1E4F143B8];
  sub_1CCB54674(a1, a2, a6, a5);
  unint64_t v10 = llvm::PointerType::get(a5, 0);
  if (a3)
  {
    uint64_t v11 = (const char *)strlen(a3);
    if (a4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v11 = 0;
    if (a4)
    {
LABEL_3:
      size_t v12 = (const char *)strlen(a4);
      goto LABEL_6;
    }
  }
  size_t v12 = 0;
LABEL_6:
  v13[0] = v10;
  v13[1] = v10;
  llvm::createSanitizerCtorAndInitFunctions((llvm::Module *)a2, a3, v11, (unsigned __int8 *)a4, v12, (uint64_t)v13, 2);
}

unint64_t *sub_1CCB54674(uint64_t a1, uint64_t *a2, const char *a3, llvm::PointerType *a4)
{
  v59[1] = *MEMORY[0x1E4F143B8];
  int v7 = *(_DWORD *)(a1 + 596);
  unint64_t v8 = (char *)operator new(0x78uLL);
  *((_DWORD *)v8 + 13) = *((_DWORD *)v8 + 13) & 0x38000000 | 1;
  char v9 = (unint64_t *)(v8 + 32);
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = v8 + 32;
  if (v7 == 1) {
    char v10 = 0;
  }
  else {
    char v10 = 9;
  }
  size_t v11 = strlen(a3);
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
LABEL_40:
  }
    abort();
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    size_t v42 = v12;
    unint64_t v43 = v15 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v43) = v11;
  p_dst = (void **)&__dst;
  if (v11) {
LABEL_11:
  }
    memcpy(p_dst, a3, v12);
  *((unsigned char *)p_dst + v12) = 0;
  std::operator+<char>();
  __int16 v46 = 260;
  v44[0] = __p;
  llvm::GlobalVariable::GlobalVariable(v9, (uint64_t)a2, a4, 0, v10, 0, (const char **)v44, 0, 0, 0, 0);
  if (v39 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v43) < 0) {
    operator delete(__dst);
  }
  int v16 = *((_DWORD *)v8 + 16);
  unsigned int v17 = v16 & 0xFFFFFFCF | 0x10;
  *((_DWORD *)v8 + 16) = v17;
  if ((v16 & 0xFu) - 7 >= 2)
  {
    if (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v9)) {
      goto LABEL_20;
    }
    unsigned int v17 = *((_DWORD *)v8 + 16);
  }
  *((_DWORD *)v8 + 16) = v17 | 0x4000;
LABEL_20:
  uint64_t v18 = (char *)operator new(0x78uLL);
  *((_DWORD *)v18 + 13) = *((_DWORD *)v18 + 13) & 0x38000000 | 1;
  int v19 = (unint64_t *)(v18 + 32);
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *((void *)v18 + 3) = v18 + 32;
  size_t v20 = strlen(a3);
  if (v20 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_40;
  }
  size_t v21 = v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    int v22 = (void **)operator new(v23 + 1);
    size_t v42 = v21;
    unint64_t v43 = v24 | 0x8000000000000000;
    long long __dst = v22;
    goto LABEL_27;
  }
  HIBYTE(v43) = v20;
  int v22 = (void **)&__dst;
  if (v20) {
LABEL_27:
  }
    memcpy(v22, a3, v21);
  *((unsigned char *)v22 + v21) = 0;
  std::operator+<char>();
  __int16 v46 = 260;
  v44[0] = __p;
  llvm::GlobalVariable::GlobalVariable(v19, (uint64_t)a2, a4, 0, v10, 0, (const char **)v44, 0, 0, 0, 0);
  if (v39 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v43) < 0) {
    operator delete(__dst);
  }
  int v26 = *((_DWORD *)v18 + 16);
  unsigned int v27 = v26 & 0xFFFFFFCF | 0x10;
  *((_DWORD *)v18 + 16) = v27;
  if ((v26 & 0xFu) - 7 < 2) {
    goto LABEL_35;
  }
  if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v19) & 1) == 0)
  {
    unsigned int v27 = *((_DWORD *)v18 + 16);
LABEL_35:
    *((_DWORD *)v18 + 16) = v27 | 0x4000;
  }
  uint64_t v28 = *a2;
  v44[0] = v45;
  v44[1] = (void *)0x200000000;
  uint64_t v49 = v28;
  uint64_t v50 = &v58;
  uint64_t v51 = v59;
  uint64_t v52 = 0;
  int v53 = 0;
  __int16 v54 = 512;
  char v55 = 7;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = &unk_1F2616E88;
  v59[0] = &unk_1F2617008;
  if (*(_DWORD *)(a1 + 596) == 1)
  {
    uint64_t v29 = *(llvm::Value **)(a1 + 496);
    __int16 v40 = 257;
    uint64_t v30 = (uint64_t *)sub_1CC277FE0((uint64_t)v44, (llvm::CastInst *)v9, v29, (uint64_t)__p, v25);
    uint64_t v31 = *(void *)(a1 + 488);
    uint64_t v32 = (const char *)llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 424), 8uLL, 0);
    __int16 v40 = 257;
    uint64_t v33 = sub_1CB930F7C((uint64_t *)v44, v31, v30, v32, (uint64_t)__p);
    uint64_t v34 = (llvm::Value *)llvm::PointerType::get(a4, 0);
    __int16 v40 = 257;
    char v9 = (unint64_t *)sub_1CC277FE0((uint64_t)v44, v33, v34, (uint64_t)__p, v35);
    if (v44[0] != v45) {
      free(v44[0]);
    }
  }
  return v9;
}

llvm::GlobalObject *sub_1CCB54AE8(uint64_t a1, llvm::Type *a2, llvm *a3, llvm::ArrayType *this, const char *a5)
{
  char v9 = llvm::ArrayType::get(this, a2);
  char v10 = operator new(0x78uLL);
  size_t v11 = (llvm::GlobalObject *)(v10 + 8);
  v10[13] = v10[13] & 0x38000000 | 1;
  *(void *)char v10 = 0;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *((void *)v10 + 3) = v10 + 8;
  uint64_t v12 = *(void *)(a1 + 520);
  NullValue = llvm::Constant::getNullValue(v9, v13, v14);
  __p[0] = "__sancov_gen_";
  __int16 v50 = 259;
  llvm::GlobalVariable::GlobalVariable((unint64_t *)v10 + 4, v12, v9, 0, 8, (unint64_t)NullValue, (const char **)__p, 0, 0, 0, 0);
  int v17 = *(_DWORD *)(a1 + 596);
  if ((v17 - 8) >= 2 && v17 != 5 && (v17 == 3 || (llvm::GlobalValue::isInterposable(a3) & 1) == 0))
  {
    FunctionComdat = llvm::getOrCreateFunctionComdat(a3, (llvm::Function *)(a1 + 552), v16);
    if (FunctionComdat) {
      llvm::GlobalObject::setComdat(v11, (llvm::Comdat *)FunctionComdat);
    }
  }
  size_t v18 = strlen(a5);
  if (v18 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  int v19 = (void *)v18;
  if (v18 >= 0x17)
  {
    uint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v21 = v18 | 7;
    }
    uint64_t v22 = v21 + 1;
    size_t v20 = (void **)operator new(v21 + 1);
    __dst[1] = v19;
    unint64_t v47 = v22 | 0x8000000000000000;
    __dst[0] = v20;
    goto LABEL_12;
  }
  HIBYTE(v47) = v18;
  size_t v20 = __dst;
  if (v18) {
LABEL_12:
  }
    memcpy(v20, a5, (size_t)v19);
  *((unsigned char *)v19 + (void)v20) = 0;
  uint64_t v23 = (llvm::GlobalObject *)__p;
  sub_1CCB542E8((uint64_t)__p, *(_DWORD *)(a1 + 596), __dst);
  char v24 = v49;
  if (v49 >= 0)
  {
    size_t v25 = v49 & 0x7F;
  }
  else
  {
    uint64_t v23 = (llvm::GlobalObject *)__p[0];
    size_t v25 = (size_t)__p[1];
  }
  if ((*((unsigned char *)v10 + 66) & 0x40) != 0 || v25)
  {
    if (v25)
    {
      uint64_t v23 = (llvm::GlobalObject *)llvm::UniqueStringSaver::save(***(void ***)v11 + 2136, v23, v25);
      unsigned int v27 = v26;
    }
    else
    {
      unsigned int v27 = 0;
    }
    uint64_t v28 = ***(void ***)v11;
    uint64_t v51 = v10 + 8;
    int v29 = *(_DWORD *)(v28 + 2520);
    if (v29)
    {
      uint64_t v30 = *(void *)(v28 + 2504);
      int v31 = v29 - 1;
      unsigned int v32 = v31 & ((v11 >> 4) ^ (v11 >> 9));
      uint64_t v33 = (llvm::GlobalObject **)(v30 + 24 * v32);
      uint64_t v34 = *v33;
      if (*v33 == v11)
      {
LABEL_22:
        v33[1] = v23;
        v33[2] = v27;
        v10[16] = v10[16] & 0xFFBFFFFF | ((v27 != 0) << 22);
        char v24 = v49;
        goto LABEL_23;
      }
      char v39 = 0;
      int v40 = 1;
      while (v34 != (llvm::GlobalObject *)-4096)
      {
        if (v39) {
          BOOL v41 = 0;
        }
        else {
          BOOL v41 = v34 == (llvm::GlobalObject *)-8192;
        }
        if (v41) {
          char v39 = v33;
        }
        unsigned int v42 = v32 + v40++;
        unsigned int v32 = v42 & v31;
        uint64_t v33 = (llvm::GlobalObject **)(v30 + 24 * v32);
        uint64_t v34 = *v33;
        if (*v33 == v11) {
          goto LABEL_22;
        }
      }
      if (v39) {
        unint64_t v43 = v39;
      }
      else {
        unint64_t v43 = v33;
      }
    }
    else
    {
      unint64_t v43 = 0;
    }
    uint64_t v33 = (llvm::GlobalObject **)sub_1CC5BF31C(v28 + 2504, (uint64_t)&v51, (uint64_t *)&v51, v43);
    uint64_t v44 = (uint64_t)v51;
    v33[1] = 0;
    v33[2] = 0;
    *uint64_t v33 = (llvm::GlobalObject *)v44;
    goto LABEL_22;
  }
LABEL_23:
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete(__dst[0]);
  }
  v10[16] = (((4128768
             - (__clz((unint64_t)(sub_1CB83544C(*(void *)(a1 + 608), (uint64_t)this) + 7) >> 3) << 16)) & 0xFF0000)
           + 0x10000) | v10[16] & 0xFFC0FFFF;
  if (*((void *)v10 + 10))
  {
    uint64_t v35 = (void *)(a1 + 824);
    uint64_t v36 = (_DWORD *)(a1 + 832);
    unsigned int v37 = *(_DWORD *)(a1 + 832);
    if (v37 >= *(_DWORD *)(a1 + 836)) {
LABEL_48:
    }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  else
  {
    uint64_t v35 = (void *)(a1 + 648);
    uint64_t v36 = (_DWORD *)(a1 + 656);
    unsigned int v37 = *(_DWORD *)(a1 + 656);
    if (v37 >= *(_DWORD *)(a1 + 660)) {
      goto LABEL_48;
    }
  }
  *(void *)(*v35 + 8 * v37) = v11;
  ++*v36;
  return v11;
}

void sub_1CCB54E7C(uint64_t a1, llvm::Instruction *a2)
{
  int MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)(*(void *)(*((void *)a2 + 5) + 56) + 40), "nosanitize", 0xAuLL);
  uint64_t Impl = llvm::MDTuple::getImpl(*(void *)(a1 + 600), 0, 0, 0, 1);

  llvm::Instruction::setMetadata(a2, MDKindID, Impl);
}

unint64_t sub_1CCB54F00(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  char v9 = (uint64_t *)result;
LABEL_2:
  char v10 = a2 - 1;
  size_t v11 = v9;
  while (1)
  {
    char v9 = v11;
    uint64_t v12 = (char *)a2 - (char *)v11;
    uint64_t v13 = a2 - v11;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v186 = *(a2 - 1);
          uint64_t v187 = *v11;
          int v188 = (unint64_t *)(v186 + 24);
          uint64_t v189 = *(unsigned int *)(v186 + 32);
          if (v189 < 0x41) {
            goto LABEL_584;
          }
          int v190 = 0;
          int64_t v191 = (unint64_t)(v189 + 63) >> 6;
          do
          {
            BOOL v24 = v191-- < 1;
            if (v24) {
              break;
            }
            unint64_t v192 = *(void *)(*v188 + 8 * v191);
            v190 += __clz(v192);
          }
          while (!v192);
          int v193 = v189 | 0xFFFFFFC0;
          if ((v189 & 0x3F) == 0) {
            int v193 = 0;
          }
          if ((v189 - v190 - v193) <= 0x40)
          {
            int v188 = (unint64_t *)*v188;
LABEL_584:
            unint64_t v194 = *v188;
          }
          else
          {
            unint64_t v194 = -1;
          }
          unint64_t v385 = (unint64_t *)(v187 + 24);
          uint64_t v386 = *(unsigned int *)(v187 + 32);
          if (v386 < 0x41) {
            goto LABEL_594;
          }
          int v387 = 0;
          int64_t v388 = (unint64_t)(v386 + 63) >> 6;
          do
          {
            BOOL v24 = v388-- < 1;
            if (v24) {
              break;
            }
            unint64_t v389 = *(void *)(*v385 + 8 * v388);
            v387 += __clz(v389);
          }
          while (!v389);
          int v390 = v386 | 0xFFFFFFC0;
          if ((v386 & 0x3F) == 0) {
            int v390 = 0;
          }
          if ((v386 - v387 - v390) <= 0x40)
          {
            unint64_t v385 = (unint64_t *)*v385;
LABEL_594:
            unint64_t v391 = *v385;
          }
          else
          {
            unint64_t v391 = -1;
          }
          if (v194 < v391)
          {
            *size_t v11 = v186;
            *(a2 - 1) = v187;
          }
          return result;
        case 3:
          return (unint64_t)sub_1CCB56AF0(v11, v11 + 1, a2 - 1);
        case 4:
          return (unint64_t)sub_1CCB57678(v11, v11 + 1, v11 + 2, a2 - 1);
        case 5:
          uint64_t v195 = v11 + 2;
          uint64_t v196 = v11 + 3;
          uint64_t result = (unint64_t)sub_1CCB57678(v11, v11 + 1, v11 + 2, v11 + 3);
          uint64_t v197 = *(a2 - 1);
          uint64_t v198 = v11[3];
          v199 = (unint64_t *)(v197 + 24);
          uint64_t v200 = *(unsigned int *)(v197 + 32);
          if (v200 < 0x41) {
            goto LABEL_598;
          }
          int v201 = 0;
          int64_t v202 = (unint64_t)(v200 + 63) >> 6;
          do
          {
            BOOL v24 = v202-- < 1;
            if (v24) {
              break;
            }
            unint64_t v203 = *(void *)(*v199 + 8 * v202);
            v201 += __clz(v203);
          }
          while (!v203);
          int v204 = v200 | 0xFFFFFFC0;
          if ((v200 & 0x3F) == 0) {
            int v204 = 0;
          }
          if ((v200 - v201 - v204) <= 0x40)
          {
            v199 = (unint64_t *)*v199;
LABEL_598:
            unint64_t v205 = *v199;
          }
          else
          {
            unint64_t v205 = -1;
          }
          uint64_t v392 = (unint64_t *)(v198 + 24);
          uint64_t v393 = *(unsigned int *)(v198 + 32);
          if (v393 < 0x41) {
            goto LABEL_608;
          }
          int v394 = 0;
          int64_t v395 = (unint64_t)(v393 + 63) >> 6;
          do
          {
            BOOL v24 = v395-- < 1;
            if (v24) {
              break;
            }
            unint64_t v396 = *(void *)(*v392 + 8 * v395);
            v394 += __clz(v396);
          }
          while (!v396);
          int v397 = v393 | 0xFFFFFFC0;
          if ((v393 & 0x3F) == 0) {
            int v397 = 0;
          }
          if ((v393 - v394 - v397) <= 0x40)
          {
            uint64_t v392 = (unint64_t *)*v392;
LABEL_608:
            unint64_t v398 = *v392;
          }
          else
          {
            unint64_t v398 = -1;
          }
          if (v205 >= v398) {
            return result;
          }
          uint64_t *v196 = v197;
          *(a2 - 1) = v198;
          uint64_t v399 = *v196;
          uint64_t v400 = *v195;
          uint64_t v401 = (unint64_t *)(*v196 + 24);
          uint64_t v402 = *(unsigned int *)(*v196 + 32);
          uint64_t v403 = v401;
          if (v402 < 0x41) {
            goto LABEL_619;
          }
          int v404 = 0;
          int64_t v405 = (unint64_t)(v402 + 63) >> 6;
          do
          {
            BOOL v24 = v405-- < 1;
            if (v24) {
              break;
            }
            unint64_t v406 = *(void *)(*v401 + 8 * v405);
            v404 += __clz(v406);
          }
          while (!v406);
          int v407 = v402 | 0xFFFFFFC0;
          if ((v402 & 0x3F) == 0) {
            int v407 = 0;
          }
          if ((v402 - v404 - v407) <= 0x40)
          {
            uint64_t v403 = (unint64_t *)*v401;
LABEL_619:
            unint64_t v408 = *v403;
          }
          else
          {
            unint64_t v408 = -1;
          }
          uint64_t v409 = (unint64_t *)(v400 + 24);
          uint64_t v410 = *(unsigned int *)(v400 + 32);
          if (v410 < 0x41) {
            goto LABEL_629;
          }
          int v411 = 0;
          int64_t v412 = (unint64_t)(v410 + 63) >> 6;
          do
          {
            BOOL v24 = v412-- < 1;
            if (v24) {
              break;
            }
            unint64_t v413 = *(void *)(*v409 + 8 * v412);
            uint64_t result = __clz(v413);
            v411 += result;
          }
          while (!v413);
          int v414 = v410 | 0xFFFFFFC0;
          if ((v410 & 0x3F) == 0) {
            int v414 = 0;
          }
          if ((v410 - v411 - v414) <= 0x40)
          {
            uint64_t v409 = (unint64_t *)*v409;
LABEL_629:
            unint64_t v415 = *v409;
          }
          else
          {
            unint64_t v415 = -1;
          }
          if (v408 >= v415) {
            return result;
          }
          *uint64_t v195 = v399;
          uint64_t *v196 = v400;
          v416 = v401;
          uint64_t v417 = v11[1];
          if (v402 < 0x41) {
            goto LABEL_640;
          }
          int v418 = 0;
          int64_t v419 = (unint64_t)(v402 + 63) >> 6;
          do
          {
            BOOL v24 = v419-- < 1;
            if (v24) {
              break;
            }
            unint64_t v420 = *(void *)(*v401 + 8 * v419);
            v418 += __clz(v420);
          }
          while (!v420);
          int v421 = v402 | 0xFFFFFFC0;
          if ((v402 & 0x3F) == 0) {
            int v421 = 0;
          }
          if ((v402 - v418 - v421) <= 0x40)
          {
            v416 = (unint64_t *)*v401;
LABEL_640:
            unint64_t v422 = *v416;
          }
          else
          {
            unint64_t v422 = -1;
          }
          v423 = (unint64_t *)(v417 + 24);
          uint64_t v424 = *(unsigned int *)(v417 + 32);
          if (v424 < 0x41) {
            goto LABEL_650;
          }
          int v425 = 0;
          int64_t v426 = (unint64_t)(v424 + 63) >> 6;
          do
          {
            BOOL v24 = v426-- < 1;
            if (v24) {
              break;
            }
            unint64_t v427 = *(void *)(*v423 + 8 * v426);
            uint64_t result = __clz(v427);
            v425 += result;
          }
          while (!v427);
          int v428 = v424 | 0xFFFFFFC0;
          if ((v424 & 0x3F) == 0) {
            int v428 = 0;
          }
          if ((v424 - v425 - v428) <= 0x40)
          {
            v423 = (unint64_t *)*v423;
LABEL_650:
            unint64_t v429 = *v423;
          }
          else
          {
            unint64_t v429 = -1;
          }
          if (v422 >= v429) {
            return result;
          }
          v11[1] = v399;
          v11[2] = v417;
          uint64_t v430 = *v11;
          if (v402 < 0x41) {
            goto LABEL_661;
          }
          int v431 = 0;
          int64_t v432 = (unint64_t)(v402 + 63) >> 6;
          do
          {
            BOOL v24 = v432-- < 1;
            if (v24) {
              break;
            }
            unint64_t v433 = *(void *)(*v401 + 8 * v432);
            v431 += __clz(v433);
          }
          while (!v433);
          int v434 = v402 | 0xFFFFFFC0;
          if ((v402 & 0x3F) == 0) {
            int v434 = 0;
          }
          if ((v402 - v431 - v434) <= 0x40)
          {
            uint64_t v401 = (unint64_t *)*v401;
LABEL_661:
            unint64_t v435 = *v401;
          }
          else
          {
            unint64_t v435 = -1;
          }
          unint64_t v436 = (unint64_t *)(v430 + 24);
          uint64_t v437 = *(unsigned int *)(v430 + 32);
          if (v437 < 0x41) {
            goto LABEL_671;
          }
          int v438 = 0;
          int64_t v439 = (unint64_t)(v437 + 63) >> 6;
          do
          {
            BOOL v24 = v439-- < 1;
            if (v24) {
              break;
            }
            unint64_t v440 = *(void *)(*v436 + 8 * v439);
            v438 += __clz(v440);
          }
          while (!v440);
          int v441 = v437 | 0xFFFFFFC0;
          if ((v437 & 0x3F) == 0) {
            int v441 = 0;
          }
          if ((v437 - v438 - v441) <= 0x40)
          {
            unint64_t v436 = (unint64_t *)*v436;
LABEL_671:
            unint64_t v442 = *v436;
          }
          else
          {
            unint64_t v442 = -1;
          }
          if (v435 < v442)
          {
            *size_t v11 = v399;
            v11[1] = v430;
          }
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v11 == a2) {
        return result;
      }
      int64_t v240 = (unint64_t)(v13 - 2) >> 1;
      int64_t v241 = v240;
      while (1)
      {
        int64_t v242 = v241;
        if (v240 < v241) {
          goto LABEL_459;
        }
        uint64_t v243 = (2 * v241) | 1;
        uint64_t v244 = &v11[v243];
        if (2 * v242 + 2 < v13) {
          break;
        }
LABEL_389:
        uint64_t v258 = &v11[v242];
        uint64_t v259 = *v244;
        uint64_t v260 = *v258;
        int v261 = (unint64_t *)(*v244 + 24);
        uint64_t v262 = *(unsigned int *)(*v244 + 32);
        if (v262 >= 0x41)
        {
          int v263 = 0;
          int64_t v264 = (unint64_t)(v262 + 63) >> 6;
          do
          {
            BOOL v24 = v264-- < 1;
            if (v24) {
              break;
            }
            uint64_t result = *(void *)(*v261 + 8 * v264);
            v263 += __clz(result);
          }
          while (!result);
          int v265 = v262 | 0xFFFFFFC0;
          if ((v262 & 0x3F) == 0) {
            int v265 = 0;
          }
          if ((v262 - v263 - v265) > 0x40)
          {
            unint64_t v266 = -1;
            goto LABEL_399;
          }
          int v261 = (unint64_t *)*v261;
        }
        unint64_t v266 = *v261;
LABEL_399:
        BOOL v267 = (unint64_t **)(v260 + 24);
        uint64_t v268 = *(unsigned int *)(v260 + 32);
        uint64_t v269 = (unint64_t *)(v260 + 24);
        if (v268 >= 0x41)
        {
          int v270 = 0;
          int64_t v271 = (unint64_t)(v268 + 63) >> 6;
          do
          {
            BOOL v24 = v271-- < 1;
            if (v24) {
              break;
            }
            unint64_t v272 = (*v267)[v271];
            v270 += __clz(v272);
          }
          while (!v272);
          LODWORD(result) = v268 | 0xFFFFFFC0;
          if ((v268 & 0x3F) != 0) {
            uint64_t result = result;
          }
          else {
            uint64_t result = 0;
          }
          if ((v268 - v270 - result) > 0x40)
          {
            unint64_t v273 = -1;
            goto LABEL_410;
          }
          uint64_t v269 = *v267;
        }
        unint64_t v273 = *v269;
LABEL_410:
        if (v266 < v273) {
          goto LABEL_459;
        }
        int v274 = v268 | 0xFFFFFFC0;
        if ((v268 & 0x3F) == 0) {
          int v274 = 0;
        }
        do
        {
          uint64_t result = (unint64_t)v244;
          uint64_t *v258 = v259;
          if (v240 < v243) {
            break;
          }
          uint64_t v275 = (2 * v243) | 1;
          uint64_t v244 = &v11[v275];
          if (2 * v243 + 2 >= v13)
          {
            uint64_t v243 = (2 * v243) | 1;
            goto LABEL_439;
          }
          int v276 = (unint64_t *)(*v244 + 24);
          uint64_t v277 = *(unsigned int *)(*v244 + 32);
          if (v277 >= 0x41)
          {
            int v278 = 0;
            int64_t v279 = (unint64_t)(v277 + 63) >> 6;
            do
            {
              BOOL v24 = v279-- < 1;
              if (v24) {
                break;
              }
              unint64_t v280 = *(void *)(*v276 + 8 * v279);
              v278 += __clz(v280);
            }
            while (!v280);
            int v281 = v277 | 0xFFFFFFC0;
            if ((v277 & 0x3F) == 0) {
              int v281 = 0;
            }
            if ((v277 - v278 - v281) > 0x40)
            {
              unint64_t v282 = -1;
              goto LABEL_426;
            }
            int v276 = (unint64_t *)*v276;
          }
          unint64_t v282 = *v276;
LABEL_426:
          uint64_t v283 = v244[1];
          ++v244;
          uint64_t v284 = (unint64_t *)(v283 + 24);
          uint64_t v285 = *(unsigned int *)(v283 + 32);
          if (v285 >= 0x41)
          {
            int v286 = 0;
            int64_t v287 = (unint64_t)(v285 + 63) >> 6;
            do
            {
              BOOL v24 = v287-- < 1;
              if (v24) {
                break;
              }
              unint64_t v288 = *(void *)(*v284 + 8 * v287);
              v286 += __clz(v288);
            }
            while (!v288);
            int v289 = v285 | 0xFFFFFFC0;
            if ((v285 & 0x3F) == 0) {
              int v289 = 0;
            }
            if ((v285 - v286 - v289) > 0x40)
            {
              unint64_t v290 = -1;
              goto LABEL_436;
            }
            uint64_t v284 = (unint64_t *)*v284;
          }
          unint64_t v290 = *v284;
LABEL_436:
          if (v282 < v290)
          {
            uint64_t v243 = 2 * v243 + 2;
          }
          else
          {
            uint64_t v244 = &v11[v275];
            uint64_t v243 = (2 * v243) | 1;
          }
LABEL_439:
          uint64_t v259 = *v244;
          uint64_t v291 = (unint64_t *)(*v244 + 24);
          uint64_t v292 = *(unsigned int *)(*v244 + 32);
          if (v292 >= 0x41)
          {
            int v293 = 0;
            int64_t v294 = (unint64_t)(v292 + 63) >> 6;
            do
            {
              BOOL v24 = v294-- < 1;
              if (v24) {
                break;
              }
              unint64_t v295 = *(void *)(*v291 + 8 * v294);
              v293 += __clz(v295);
            }
            while (!v295);
            int v296 = v292 | 0xFFFFFFC0;
            if ((v292 & 0x3F) == 0) {
              int v296 = 0;
            }
            if ((v292 - v293 - v296) > 0x40)
            {
              unint64_t v297 = -1;
              goto LABEL_449;
            }
            uint64_t v291 = (unint64_t *)*v291;
          }
          unint64_t v297 = *v291;
LABEL_449:
          unint64_t v298 = (unint64_t *)(v260 + 24);
          if (v268 < 0x41) {
            goto LABEL_456;
          }
          int v299 = 0;
          int64_t v300 = (unint64_t)(v268 + 63) >> 6;
          do
          {
            BOOL v24 = v300-- < 1;
            if (v24) {
              break;
            }
            unint64_t v301 = (*v267)[v300];
            v299 += __clz(v301);
          }
          while (!v301);
          if ((v268 - (v274 + v299)) <= 0x40)
          {
            unint64_t v298 = *v267;
LABEL_456:
            unint64_t v302 = *v298;
            goto LABEL_457;
          }
          unint64_t v302 = -1;
LABEL_457:
          uint64_t v258 = (uint64_t *)result;
        }
        while (v297 >= v302);
        *(void *)uint64_t result = v260;
LABEL_459:
        int64_t v241 = v242 - 1;
        if (!v242)
        {
LABEL_460:
          uint64_t v303 = 0;
          uint64_t v304 = *v11;
          size_t v305 = v11;
          while (1)
          {
            int v306 = &v305[v303 + 1];
            uint64_t v307 = (2 * v303) | 1;
            uint64_t v308 = 2 * v303 + 2;
            if (v308 < v13) {
              break;
            }
LABEL_484:
            uint64_t *v305 = *v306;
            size_t v305 = v306;
            uint64_t v303 = v307;
            if (v307 > (uint64_t)((unint64_t)(v13 - 2) >> 1))
            {
              if (v306 == --a2)
              {
                uint64_t *v306 = v304;
                goto LABEL_533;
              }
              uint64_t *v306 = *a2;
              *a2 = v304;
              uint64_t v323 = (char *)v306 - (char *)v11 + 8;
              if (v323 >= 9)
              {
                unint64_t v324 = (((unint64_t)v323 >> 3) - 2) >> 1;
                unint64_t v325 = &v11[v324];
                uint64_t v326 = *v325;
                uint64_t v327 = (unint64_t *)(*v325 + 24);
                uint64_t v328 = *(unsigned int *)(*v325 + 32);
                if (v328 < 0x41) {
                  goto LABEL_497;
                }
                int v329 = 0;
                int64_t v330 = (unint64_t)(v328 + 63) >> 6;
                do
                {
                  BOOL v24 = v330-- < 1;
                  if (v24) {
                    break;
                  }
                  unint64_t v331 = *(void *)(*v327 + 8 * v330);
                  uint64_t result = __clz(v331);
                  v329 += result;
                }
                while (!v331);
                int v332 = v328 | 0xFFFFFFC0;
                if ((v328 & 0x3F) == 0) {
                  int v332 = 0;
                }
                if ((v328 - v329 - v332) > 0x40)
                {
                  unint64_t v333 = -1;
                }
                else
                {
                  uint64_t v327 = (unint64_t *)*v327;
LABEL_497:
                  unint64_t v333 = *v327;
                }
                uint64_t v334 = *v306;
                char v335 = (unint64_t *)(*v306 + 24);
                uint64_t v336 = *(unsigned int *)(*v306 + 32);
                int v337 = v335;
                if (v336 < 0x41)
                {
LABEL_508:
                  unint64_t v341 = *v337;
                }
                else
                {
                  int v338 = 0;
                  int64_t v339 = (unint64_t)(v336 + 63) >> 6;
                  do
                  {
                    BOOL v24 = v339-- < 1;
                    if (v24) {
                      break;
                    }
                    unint64_t v340 = *(void *)(*v335 + 8 * v339);
                    v338 += __clz(v340);
                  }
                  while (!v340);
                  LODWORD(result) = v336 | 0xFFFFFFC0;
                  if ((v336 & 0x3F) != 0) {
                    uint64_t result = result;
                  }
                  else {
                    uint64_t result = 0;
                  }
                  if ((v336 - v338 - result) <= 0x40)
                  {
                    int v337 = (unint64_t *)*v335;
                    goto LABEL_508;
                  }
                  unint64_t v341 = -1;
                }
                if (v333 >= v341) {
                  goto LABEL_533;
                }
                int v342 = v336 | 0xFFFFFFC0;
                if ((v336 & 0x3F) == 0) {
                  int v342 = 0;
                }
                while (2)
                {
                  uint64_t result = (unint64_t)v325;
                  uint64_t *v306 = v326;
                  if (!v324)
                  {
LABEL_532:
                    *(void *)uint64_t result = v334;
                    break;
                  }
                  unint64_t v324 = (v324 - 1) >> 1;
                  unint64_t v325 = &v11[v324];
                  uint64_t v326 = *v325;
                  uint64_t v343 = (unint64_t *)(*v325 + 24);
                  uint64_t v344 = *(unsigned int *)(*v325 + 32);
                  if (v344 < 0x41)
                  {
LABEL_522:
                    unint64_t v349 = *v343;
                  }
                  else
                  {
                    int v345 = 0;
                    int64_t v346 = (unint64_t)(v344 + 63) >> 6;
                    do
                    {
                      BOOL v24 = v346-- < 1;
                      if (v24) {
                        break;
                      }
                      unint64_t v347 = *(void *)(*v343 + 8 * v346);
                      v345 += __clz(v347);
                    }
                    while (!v347);
                    int v348 = v344 | 0xFFFFFFC0;
                    if ((v344 & 0x3F) == 0) {
                      int v348 = 0;
                    }
                    if ((v344 - v345 - v348) <= 0x40)
                    {
                      uint64_t v343 = (unint64_t *)*v343;
                      goto LABEL_522;
                    }
                    unint64_t v349 = -1;
                  }
                  unint64_t v350 = v335;
                  if (v336 < 0x41)
                  {
LABEL_530:
                    unint64_t v354 = *v350;
                  }
                  else
                  {
                    int v351 = 0;
                    int64_t v352 = (unint64_t)(v336 + 63) >> 6;
                    do
                    {
                      BOOL v24 = v352-- < 1;
                      if (v24) {
                        break;
                      }
                      unint64_t v353 = *(void *)(*v335 + 8 * v352);
                      v351 += __clz(v353);
                    }
                    while (!v353);
                    if ((v336 - (v342 + v351)) <= 0x40)
                    {
                      unint64_t v350 = (unint64_t *)*v335;
                      goto LABEL_530;
                    }
                    unint64_t v354 = -1;
                  }
                  int v306 = (uint64_t *)result;
                  if (v349 >= v354) {
                    goto LABEL_532;
                  }
                  continue;
                }
              }
LABEL_533:
              BOOL v24 = v13-- <= 2;
              if (v24) {
                return result;
              }
              goto LABEL_460;
            }
          }
          int v309 = (unint64_t *)(*v306 + 24);
          uint64_t v310 = *(unsigned int *)(*v306 + 32);
          if (v310 < 0x41)
          {
LABEL_471:
            unint64_t v315 = *v309;
          }
          else
          {
            int v311 = 0;
            int64_t v312 = (unint64_t)(v310 + 63) >> 6;
            do
            {
              BOOL v24 = v312-- < 1;
              if (v24) {
                break;
              }
              unint64_t v313 = *(void *)(*v309 + 8 * v312);
              v311 += __clz(v313);
            }
            while (!v313);
            int v314 = v310 | 0xFFFFFFC0;
            if ((v310 & 0x3F) == 0) {
              int v314 = 0;
            }
            if ((v310 - v311 - v314) <= 0x40)
            {
              int v309 = (unint64_t *)*v309;
              goto LABEL_471;
            }
            unint64_t v315 = -1;
          }
          uint64_t v316 = v306[1];
          uint64_t v317 = (unint64_t *)(v316 + 24);
          uint64_t result = *(unsigned int *)(v316 + 32);
          if (result < 0x41)
          {
LABEL_481:
            unint64_t v322 = *v317;
          }
          else
          {
            int v318 = 0;
            int64_t v319 = (result + 63) >> 6;
            do
            {
              BOOL v24 = v319-- < 1;
              if (v24) {
                break;
              }
              unint64_t v320 = *(void *)(*v317 + 8 * v319);
              v318 += __clz(v320);
            }
            while (!v320);
            int v321 = result | 0xFFFFFFC0;
            if ((result & 0x3F) == 0) {
              int v321 = 0;
            }
            uint64_t result = (result - v318 - v321);
            if (result <= 0x40)
            {
              uint64_t v317 = (unint64_t *)*v317;
              goto LABEL_481;
            }
            unint64_t v322 = -1;
          }
          if (v315 < v322)
          {
            ++v306;
            uint64_t v307 = v308;
          }
          goto LABEL_484;
        }
      }
      int v245 = (unint64_t *)(*v244 + 24);
      uint64_t v246 = *(unsigned int *)(*v244 + 32);
      if (v246 >= 0x41)
      {
        int v247 = 0;
        int64_t v248 = (unint64_t)(v246 + 63) >> 6;
        do
        {
          BOOL v24 = v248-- < 1;
          if (v24) {
            break;
          }
          unint64_t v249 = *(void *)(*v245 + 8 * v248);
          v247 += __clz(v249);
        }
        while (!v249);
        LODWORD(result) = v246 | 0xFFFFFFC0;
        if ((v246 & 0x3F) != 0) {
          uint64_t result = result;
        }
        else {
          uint64_t result = 0;
        }
        if ((v246 - v247 - result) > 0x40)
        {
          unint64_t v250 = -1;
          goto LABEL_376;
        }
        int v245 = (unint64_t *)*v245;
      }
      unint64_t v250 = *v245;
LABEL_376:
      uint64_t v251 = v244[1];
      ++v244;
      int v252 = (unint64_t *)(v251 + 24);
      uint64_t v253 = *(unsigned int *)(v251 + 32);
      if (v253 >= 0x41)
      {
        uint64_t result = 0;
        int64_t v254 = (unint64_t)(v253 + 63) >> 6;
        do
        {
          BOOL v24 = v254-- < 1;
          if (v24) {
            break;
          }
          unint64_t v255 = *(void *)(*v252 + 8 * v254);
          uint64_t result = result + __clz(v255);
        }
        while (!v255);
        int v256 = v253 | 0xFFFFFFC0;
        if ((v253 & 0x3F) == 0) {
          int v256 = 0;
        }
        if ((v253 - result - v256) > 0x40)
        {
          unint64_t v257 = -1;
          goto LABEL_386;
        }
        int v252 = (unint64_t *)*v252;
      }
      unint64_t v257 = *v252;
LABEL_386:
      if (v250 < v257) {
        uint64_t v243 = 2 * v242 + 2;
      }
      else {
        uint64_t v244 = &v11[v243];
      }
      goto LABEL_389;
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    uint64_t v15 = &v11[(unint64_t)v13 >> 1];
    if ((unint64_t)v12 >= 0x401)
    {
      sub_1CCB56AF0(v9, &v9[(unint64_t)v13 >> 1], a2 - 1);
      sub_1CCB56AF0(v9 + 1, v15 - 1, a2 - 2);
      sub_1CCB56AF0(v9 + 2, &v9[v14 + 1], a2 - 3);
      uint64_t result = (unint64_t)sub_1CCB56AF0(v15 - 1, v15, &v9[v14 + 1]);
      uint64_t v16 = *v9;
      *char v9 = *v15;
      *uint64_t v15 = v16;
    }
    else
    {
      uint64_t result = (unint64_t)sub_1CCB56AF0(&v9[(unint64_t)v13 >> 1], v9, a2 - 1);
    }
    --a3;
    uint64_t v17 = *v9;
    if (a4)
    {
      LODWORD(v18) = *(_DWORD *)(v17 + 32);
LABEL_32:
      uint64_t v36 = (unint64_t **)(v17 + 24);
      if ((v18 & 0x3F) != 0) {
        int v37 = v18 | 0xFFFFFFC0;
      }
      else {
        int v37 = 0;
      }
      uint64_t v38 = v9;
      do
      {
        char v39 = v38;
        uint64_t v41 = v38[1];
        ++v38;
        uint64_t v40 = v41;
        unsigned int v42 = (unint64_t *)(v41 + 24);
        uint64_t v43 = *(unsigned int *)(v41 + 32);
        if (v43 >= 0x41)
        {
          int v44 = 0;
          int64_t v45 = (unint64_t)(v43 + 63) >> 6;
          do
          {
            BOOL v24 = v45-- < 1;
            if (v24) {
              break;
            }
            unint64_t v46 = *(void *)(*v42 + 8 * v45);
            v44 += __clz(v46);
          }
          while (!v46);
          int v47 = v43 | 0xFFFFFFC0;
          if ((v43 & 0x3F) == 0) {
            int v47 = 0;
          }
          if ((v43 - v44 - v47) > 0x40)
          {
            unint64_t v48 = -1;
            goto LABEL_46;
          }
          unsigned int v42 = (unint64_t *)*v42;
        }
        unint64_t v48 = *v42;
LABEL_46:
        char v49 = (unint64_t *)(v17 + 24);
        if (v18 >= 0x41)
        {
          int v50 = 0;
          int64_t v51 = ((unint64_t)v18 + 63) >> 6;
          do
          {
            BOOL v24 = v51-- < 1;
            if (v24) {
              break;
            }
            unint64_t v52 = (*v36)[v51];
            v50 += __clz(v52);
          }
          while (!v52);
          if ((v18 - (v37 + v50)) > 0x40)
          {
            unint64_t v53 = -1;
            continue;
          }
          char v49 = *v36;
        }
        unint64_t v53 = *v49;
      }
      while (v48 < v53);
      __int16 v54 = a2;
      if (v39 != v9)
      {
        while (1)
        {
          uint64_t v55 = *--v54;
          uint64_t v56 = (unint64_t *)(v55 + 24);
          uint64_t v57 = *(unsigned int *)(v55 + 32);
          if (v57 >= 0x41)
          {
            int v58 = 0;
            int64_t v59 = (unint64_t)(v57 + 63) >> 6;
            do
            {
              BOOL v24 = v59-- < 1;
              if (v24) {
                break;
              }
              unint64_t v60 = *(void *)(*v56 + 8 * v59);
              v58 += __clz(v60);
            }
            while (!v60);
            int v61 = v57 | 0xFFFFFFC0;
            if ((v57 & 0x3F) == 0) {
              int v61 = 0;
            }
            if ((v57 - v58 - v61) > 0x40)
            {
              unint64_t v62 = -1;
              goto LABEL_66;
            }
            uint64_t v56 = (unint64_t *)*v56;
          }
          unint64_t v62 = *v56;
LABEL_66:
          char v63 = (unint64_t *)(v17 + 24);
          if (v18 < 0x41) {
            goto LABEL_73;
          }
          int v64 = 0;
          int64_t v65 = ((unint64_t)v18 + 63) >> 6;
          do
          {
            BOOL v24 = v65-- < 1;
            if (v24) {
              break;
            }
            unint64_t v66 = (*v36)[v65];
            v64 += __clz(v66);
          }
          while (!v66);
          if ((v18 - (v37 + v64)) <= 0x40)
          {
            char v63 = *v36;
LABEL_73:
            unint64_t v67 = *v63;
            goto LABEL_74;
          }
          unint64_t v67 = -1;
LABEL_74:
          if (v62 < v67) {
            goto LABEL_97;
          }
        }
      }
      __int16 v54 = a2;
      while (2)
      {
        if (v38 < v54)
        {
          uint64_t v68 = *--v54;
          int v69 = (unint64_t *)(v68 + 24);
          uint64_t v70 = *(unsigned int *)(v68 + 32);
          if (v70 >= 0x41)
          {
            int v71 = 0;
            int64_t v72 = (unint64_t)(v70 + 63) >> 6;
            do
            {
              BOOL v24 = v72-- < 1;
              if (v24) {
                break;
              }
              unint64_t v73 = *(void *)(*v69 + 8 * v72);
              v71 += __clz(v73);
            }
            while (!v73);
            int v74 = v70 | 0xFFFFFFC0;
            if ((v70 & 0x3F) == 0) {
              int v74 = 0;
            }
            if ((v70 - v71 - v74) > 0x40)
            {
              unint64_t v75 = -1;
              goto LABEL_88;
            }
            int v69 = (unint64_t *)*v69;
          }
          unint64_t v75 = *v69;
LABEL_88:
          uint64_t v76 = (unint64_t *)(v17 + 24);
          if (v18 >= 0x41)
          {
            int v77 = 0;
            int64_t v78 = ((unint64_t)v18 + 63) >> 6;
            do
            {
              BOOL v24 = v78-- < 1;
              if (v24) {
                break;
              }
              unint64_t v79 = (*v36)[v78];
              v77 += __clz(v79);
            }
            while (!v79);
            if ((v18 - (v37 + v77)) > 0x40)
            {
              unint64_t v80 = -1;
              goto LABEL_96;
            }
            uint64_t v76 = *v36;
          }
          unint64_t v80 = *v76;
LABEL_96:
          if (v75 < v80) {
            break;
          }
          continue;
        }
        break;
      }
LABEL_97:
      if (v38 >= v54)
      {
        size_t v11 = v38;
        goto LABEL_143;
      }
      uint64_t v81 = *v54;
      size_t v11 = v38;
      uint64_t v82 = v54;
      while (2)
      {
        *size_t v11 = v81;
        uint64_t *v82 = v40;
        if ((v18 & 0x3F) != 0) {
          int v83 = v18 | 0xFFFFFFC0;
        }
        else {
          int v83 = 0;
        }
        while (2)
        {
          uint64_t v84 = v11[1];
          ++v11;
          uint64_t v40 = v84;
          uint64_t v85 = (unint64_t *)(v84 + 24);
          uint64_t v86 = *(unsigned int *)(v84 + 32);
          if (v86 >= 0x41)
          {
            int v87 = 0;
            int64_t v88 = (unint64_t)(v86 + 63) >> 6;
            do
            {
              BOOL v24 = v88-- < 1;
              if (v24) {
                break;
              }
              unint64_t v89 = *(void *)(*v85 + 8 * v88);
              v87 += __clz(v89);
            }
            while (!v89);
            int v90 = v86 | 0xFFFFFFC0;
            if ((v86 & 0x3F) == 0) {
              int v90 = 0;
            }
            if ((v86 - v87 - v90) > 0x40)
            {
              unint64_t v91 = -1;
              goto LABEL_112;
            }
            uint64_t v85 = (unint64_t *)*v85;
          }
          unint64_t v91 = *v85;
LABEL_112:
          uint64_t v92 = (unint64_t *)(v17 + 24);
          if (v18 < 0x41) {
            goto LABEL_119;
          }
          int v93 = 0;
          int64_t v94 = ((unint64_t)v18 + 63) >> 6;
          do
          {
            BOOL v24 = v94-- < 1;
            if (v24) {
              break;
            }
            unint64_t v95 = (*v36)[v94];
            v93 += __clz(v95);
          }
          while (!v95);
          if ((v18 - (v83 + v93)) <= 0x40)
          {
            uint64_t v92 = *v36;
LABEL_119:
            unint64_t v96 = *v92;
            goto LABEL_120;
          }
          unint64_t v96 = -1;
LABEL_120:
          if (v91 < v96) {
            continue;
          }
          break;
        }
        while (2)
        {
          uint64_t v97 = *--v82;
          uint64_t v81 = v97;
          long long v98 = (unint64_t *)(v97 + 24);
          uint64_t v99 = *(unsigned int *)(v97 + 32);
          if (v99 >= 0x41)
          {
            int v100 = 0;
            int64_t v101 = (unint64_t)(v99 + 63) >> 6;
            do
            {
              BOOL v24 = v101-- < 1;
              if (v24) {
                break;
              }
              unint64_t v102 = *(void *)(*v98 + 8 * v101);
              v100 += __clz(v102);
            }
            while (!v102);
            int v103 = v99 | 0xFFFFFFC0;
            if ((v99 & 0x3F) == 0) {
              int v103 = 0;
            }
            if ((v99 - v100 - v103) > 0x40)
            {
              unint64_t v104 = -1;
              goto LABEL_131;
            }
            long long v98 = (unint64_t *)*v98;
          }
          unint64_t v104 = *v98;
LABEL_131:
          uint64_t v105 = (unint64_t *)(v17 + 24);
          if (v18 >= 0x41)
          {
            int v106 = 0;
            int64_t v107 = ((unint64_t)v18 + 63) >> 6;
            do
            {
              BOOL v24 = v107-- < 1;
              if (v24) {
                break;
              }
              unint64_t v108 = (*v36)[v107];
              v106 += __clz(v108);
            }
            while (!v108);
            if ((v18 - (v37 + v106)) > 0x40)
            {
              unint64_t v109 = -1;
              goto LABEL_139;
            }
            uint64_t v105 = *v36;
          }
          unint64_t v109 = *v105;
LABEL_139:
          if (v104 >= v109) {
            continue;
          }
          break;
        }
        if (v11 < v82) {
          continue;
        }
        break;
      }
LABEL_143:
      uint64_t v110 = v11 - 1;
      if (v11 - 1 != v9) {
        *char v9 = *v110;
      }
      *uint64_t v110 = v17;
      if (v38 < v54)
      {
LABEL_148:
        uint64_t result = sub_1CCB54F00(v9, v11 - 1, a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        BOOL v111 = sub_1CCB56F30(v9, v11 - 1);
        uint64_t result = sub_1CCB56F30(v11, a2);
        if (result)
        {
          a2 = v11 - 1;
          if (v111) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v111) {
          goto LABEL_148;
        }
      }
    }
    else
    {
      uint64_t v19 = *(v9 - 1);
      size_t v20 = (unint64_t *)(v19 + 24);
      uint64_t v21 = *(unsigned int *)(v19 + 32);
      if (v21 >= 0x41)
      {
        int v22 = 0;
        int64_t v23 = (unint64_t)(v21 + 63) >> 6;
        do
        {
          BOOL v24 = v23-- < 1;
          if (v24) {
            break;
          }
          unint64_t v25 = *(void *)(*v20 + 8 * v23);
          v22 += __clz(v25);
        }
        while (!v25);
        int v26 = v21 | 0xFFFFFFC0;
        if ((v21 & 0x3F) == 0) {
          int v26 = 0;
        }
        if ((v21 - v22 - v26) > 0x40)
        {
          unint64_t v27 = -1;
          goto LABEL_22;
        }
        size_t v20 = (unint64_t *)*v20;
      }
      unint64_t v27 = *v20;
LABEL_22:
      uint64_t v28 = (unint64_t **)(v17 + 24);
      uint64_t v18 = *(unsigned int *)(v17 + 32);
      if (v18 >= 0x41)
      {
        int v31 = 0;
        int64_t v32 = (unint64_t)(v18 + 63) >> 6;
        uint64_t v33 = v32;
        do
        {
          BOOL v24 = v33-- < 1;
          if (v24) {
            break;
          }
          unint64_t v34 = (*v28)[v33];
          v31 += __clz(v34);
        }
        while (!v34);
        int v35 = v18 | 0xFFFFFFC0;
        if ((v18 & 0x3F) == 0) {
          int v35 = 0;
        }
        if ((v18 - v31 - v35) <= 0x40)
        {
          if (v27 < **v28) {
            goto LABEL_32;
          }
        }
        else if (v27 != -1)
        {
          goto LABEL_32;
        }
        int v112 = 0;
        uint64_t v30 = *v10;
        do
        {
          BOOL v24 = v32-- < 1;
          if (v24) {
            break;
          }
          unint64_t v113 = (*v28)[v32];
          v112 += __clz(v113);
        }
        while (!v113);
        if ((v18 - (v35 + v112)) <= 0x40) {
          unint64_t v29 = **v28;
        }
        else {
          unint64_t v29 = -1;
        }
      }
      else
      {
        unint64_t v29 = (unint64_t)*v28;
        if (v27 < (unint64_t)*v28) {
          goto LABEL_32;
        }
        uint64_t v30 = *v10;
      }
      uint64_t v114 = (unint64_t *)(v30 + 24);
      uint64_t v115 = *(unsigned int *)(v30 + 32);
      if (v115 < 0x41) {
        goto LABEL_165;
      }
      int v116 = 0;
      int64_t v117 = (unint64_t)(v115 + 63) >> 6;
      do
      {
        BOOL v24 = v117-- < 1;
        if (v24) {
          break;
        }
        unint64_t v118 = *(void *)(*v114 + 8 * v117);
        v116 += __clz(v118);
      }
      while (!v118);
      int v119 = v115 | 0xFFFFFFC0;
      if ((v115 & 0x3F) == 0) {
        int v119 = 0;
      }
      if ((v115 - v116 - v119) <= 0x40)
      {
        uint64_t v114 = (unint64_t *)*v114;
LABEL_165:
        unint64_t v120 = *v114;
        goto LABEL_166;
      }
      unint64_t v120 = -1;
LABEL_166:
      int v121 = v18 | 0xFFFFFFC0;
      if ((v18 & 0x3F) == 0) {
        int v121 = 0;
      }
      size_t v11 = v9;
      if (v29 < v120)
      {
        size_t v11 = v9;
        while (1)
        {
          unint64_t v122 = (unint64_t *)(v17 + 24);
          if (v18 >= 0x41)
          {
            int v123 = 0;
            int64_t v124 = (unint64_t)(v18 + 63) >> 6;
            do
            {
              BOOL v24 = v124-- < 1;
              if (v24) {
                break;
              }
              unint64_t v125 = (*v28)[v124];
              v123 += __clz(v125);
            }
            while (!v125);
            if ((v18 - (v121 + v123)) > 0x40)
            {
              unint64_t v126 = -1;
              goto LABEL_178;
            }
            unint64_t v122 = *v28;
          }
          unint64_t v126 = *v122;
LABEL_178:
          uint64_t v127 = v11[1];
          ++v11;
          int v128 = (unint64_t *)(v127 + 24);
          uint64_t v129 = *(unsigned int *)(v127 + 32);
          if (v129 < 0x41) {
            goto LABEL_187;
          }
          int v130 = 0;
          int64_t v131 = (unint64_t)(v129 + 63) >> 6;
          do
          {
            BOOL v24 = v131-- < 1;
            if (v24) {
              break;
            }
            uint64_t result = *(void *)(*v128 + 8 * v131);
            v130 += __clz(result);
          }
          while (!result);
          int v132 = v129 | 0xFFFFFFC0;
          if ((v129 & 0x3F) == 0) {
            int v132 = 0;
          }
          if ((v129 - v130 - v132) <= 0x40)
          {
            int v128 = (unint64_t *)*v128;
LABEL_187:
            unint64_t v133 = *v128;
            goto LABEL_188;
          }
          unint64_t v133 = -1;
LABEL_188:
          if (v126 < v133) {
            goto LABEL_210;
          }
        }
      }
      do
      {
        if (++v11 >= a2) {
          break;
        }
        size_t v134 = (unint64_t *)(v17 + 24);
        if (v18 >= 0x41)
        {
          int v135 = 0;
          int64_t v136 = (unint64_t)(v18 + 63) >> 6;
          do
          {
            BOOL v24 = v136-- < 1;
            if (v24) {
              break;
            }
            unint64_t v137 = (*v28)[v136];
            v135 += __clz(v137);
          }
          while (!v137);
          if ((v18 - (v121 + v135)) > 0x40)
          {
            unint64_t v138 = -1;
            goto LABEL_199;
          }
          size_t v134 = *v28;
        }
        unint64_t v138 = *v134;
LABEL_199:
        char v139 = (unint64_t *)(*v11 + 24);
        uint64_t v140 = *(unsigned int *)(*v11 + 32);
        if (v140 < 0x41) {
          goto LABEL_208;
        }
        int v141 = 0;
        int64_t v142 = (unint64_t)(v140 + 63) >> 6;
        do
        {
          BOOL v24 = v142-- < 1;
          if (v24) {
            break;
          }
          uint64_t result = *(void *)(*v139 + 8 * v142);
          v141 += __clz(result);
        }
        while (!result);
        int v143 = v140 | 0xFFFFFFC0;
        if ((v140 & 0x3F) == 0) {
          int v143 = 0;
        }
        if ((v140 - v141 - v143) <= 0x40)
        {
          char v139 = (unint64_t *)*v139;
LABEL_208:
          unint64_t v144 = *v139;
          continue;
        }
        unint64_t v144 = -1;
      }
      while (v138 >= v144);
LABEL_210:
      unsigned int v145 = a2;
      if (v11 < a2)
      {
        unsigned int v145 = a2;
        do
        {
          int v146 = (unint64_t *)(v17 + 24);
          if (v18 >= 0x41)
          {
            int v147 = 0;
            int64_t v148 = (unint64_t)(v18 + 63) >> 6;
            do
            {
              BOOL v24 = v148-- < 1;
              if (v24) {
                break;
              }
              unint64_t v149 = (*v28)[v148];
              v147 += __clz(v149);
            }
            while (!v149);
            if ((v18 - (v121 + v147)) > 0x40)
            {
              unint64_t v150 = -1;
              goto LABEL_220;
            }
            int v146 = *v28;
          }
          unint64_t v150 = *v146;
LABEL_220:
          uint64_t v151 = *--v145;
          int v152 = (unint64_t *)(v151 + 24);
          uint64_t v153 = *(unsigned int *)(v151 + 32);
          if (v153 < 0x41) {
            goto LABEL_230;
          }
          int v154 = 0;
          int64_t v155 = (unint64_t)(v153 + 63) >> 6;
          do
          {
            BOOL v24 = v155-- < 1;
            if (v24) {
              break;
            }
            unint64_t v156 = *(void *)(*v152 + 8 * v155);
            v154 += __clz(v156);
          }
          while (!v156);
          LODWORD(result) = v153 | 0xFFFFFFC0;
          if ((v153 & 0x3F) != 0) {
            uint64_t result = result;
          }
          else {
            uint64_t result = 0;
          }
          if ((v153 - v154 - result) <= 0x40)
          {
            int v152 = (unint64_t *)*v152;
LABEL_230:
            unint64_t v157 = *v152;
            continue;
          }
          unint64_t v157 = -1;
        }
        while (v150 < v157);
      }
      if (v11 >= v145) {
        goto LABEL_274;
      }
      uint64_t v158 = *v11;
      uint64_t v159 = *v145;
      do
      {
        *size_t v11 = v159;
        uint64_t *v145 = v158;
        do
        {
          uint64_t v160 = v11[1];
          ++v11;
          uint64_t v158 = v160;
          uint64_t v161 = (unint64_t *)(v17 + 24);
          if (v18 >= 0x41)
          {
            int v162 = 0;
            int64_t v163 = (unint64_t)(v18 + 63) >> 6;
            do
            {
              BOOL v24 = v163-- < 1;
              if (v24) {
                break;
              }
              unint64_t v164 = (*v28)[v163];
              v162 += __clz(v164);
            }
            while (!v164);
            if ((v18 - (v121 + v162)) > 0x40)
            {
              unint64_t v165 = -1;
              goto LABEL_243;
            }
            uint64_t v161 = *v28;
          }
          unint64_t v165 = *v161;
LABEL_243:
          unsigned int v166 = (unint64_t *)(v158 + 24);
          uint64_t v167 = *(unsigned int *)(v158 + 32);
          if (v167 >= 0x41)
          {
            int v168 = 0;
            int64_t v169 = (unint64_t)(v167 + 63) >> 6;
            do
            {
              BOOL v24 = v169-- < 1;
              if (v24) {
                break;
              }
              unint64_t v170 = *(void *)(*v166 + 8 * v169);
              v168 += __clz(v170);
            }
            while (!v170);
            int v171 = v167 | 0xFFFFFFC0;
            if ((v167 & 0x3F) == 0) {
              int v171 = 0;
            }
            if ((v167 - v168 - v171) > 0x40)
            {
              unint64_t v172 = -1;
              continue;
            }
            unsigned int v166 = (unint64_t *)*v166;
          }
          unint64_t v172 = *v166;
        }
        while (v165 >= v172);
        do
        {
          uint64_t v173 = *--v145;
          uint64_t v159 = v173;
          int v174 = (unint64_t *)(v17 + 24);
          if (v18 >= 0x41)
          {
            int v175 = 0;
            int64_t v176 = (unint64_t)(v18 + 63) >> 6;
            do
            {
              BOOL v24 = v176-- < 1;
              if (v24) {
                break;
              }
              unint64_t v177 = (*v28)[v176];
              v175 += __clz(v177);
            }
            while (!v177);
            if ((v18 - (v121 + v175)) > 0x40)
            {
              unint64_t v178 = -1;
              goto LABEL_262;
            }
            int v174 = *v28;
          }
          unint64_t v178 = *v174;
LABEL_262:
          BOOL v179 = (unint64_t *)(v159 + 24);
          uint64_t result = *(unsigned int *)(v159 + 32);
          if (result >= 0x41)
          {
            int v180 = 0;
            int64_t v181 = (result + 63) >> 6;
            do
            {
              BOOL v24 = v181-- < 1;
              if (v24) {
                break;
              }
              unint64_t v182 = *(void *)(*v179 + 8 * v181);
              v180 += __clz(v182);
            }
            while (!v182);
            int v183 = result | 0xFFFFFFC0;
            if ((result & 0x3F) == 0) {
              int v183 = 0;
            }
            uint64_t result = (result - v180 - v183);
            if (result > 0x40)
            {
              unint64_t v184 = -1;
              continue;
            }
            BOOL v179 = (unint64_t *)*v179;
          }
          unint64_t v184 = *v179;
        }
        while (v178 < v184);
      }
      while (v11 < v145);
LABEL_274:
      int v185 = v11 - 1;
      BOOL v4 = v11 - 1 >= v9;
      BOOL v5 = v11 - 1 == v9;
      if (v11 - 1 != v9) {
        *char v9 = *v185;
      }
      a4 = 0;
      *int v185 = v17;
    }
  }
  unint64_t v206 = v11 + 1;
  BOOL v208 = v11 == a2 || v206 == a2;
  if ((a4 & 1) == 0)
  {
    if (v208) {
      return result;
    }
    while (1)
    {
      int v355 = v206;
      uint64_t v356 = v9[1];
      unint64_t v357 = (unint64_t **)(v356 + 24);
      uint64_t v358 = *(unsigned int *)(v356 + 32);
      uint64_t v359 = (unint64_t *)(v356 + 24);
      if (v358 >= 0x41)
      {
        int v360 = 0;
        int64_t v361 = (unint64_t)(v358 + 63) >> 6;
        do
        {
          BOOL v24 = v361-- < 1;
          if (v24) {
            break;
          }
          unint64_t v362 = (*v357)[v361];
          v360 += __clz(v362);
        }
        while (!v362);
        int v363 = v358 | 0xFFFFFFC0;
        if ((v358 & 0x3F) == 0) {
          int v363 = 0;
        }
        if ((v358 - v360 - v363) > 0x40)
        {
          unint64_t v364 = -1;
          goto LABEL_547;
        }
        uint64_t v359 = *v357;
      }
      unint64_t v364 = *v359;
LABEL_547:
      uint64_t v365 = *v9;
      unint64_t v366 = (unint64_t *)(*v9 + 24);
      uint64_t v367 = *(unsigned int *)(*v9 + 32);
      if (v367 >= 0x41)
      {
        int v368 = 0;
        int64_t v369 = (unint64_t)(v367 + 63) >> 6;
        do
        {
          BOOL v24 = v369-- < 1;
          if (v24) {
            break;
          }
          uint64_t result = *(void *)(*v366 + 8 * v369);
          v368 += __clz(result);
        }
        while (!result);
        int v370 = v367 | 0xFFFFFFC0;
        if ((v367 & 0x3F) == 0) {
          int v370 = 0;
        }
        if ((v367 - v368 - v370) > 0x40)
        {
          unint64_t v371 = -1;
          goto LABEL_557;
        }
        unint64_t v366 = (unint64_t *)*v366;
      }
      unint64_t v371 = *v366;
LABEL_557:
      if (v364 < v371)
      {
        int v372 = v358 | 0xFFFFFFC0;
        if ((v358 & 0x3F) == 0) {
          int v372 = 0;
        }
        unsigned __int8 v373 = v355;
        while (1)
        {
          *unsigned __int8 v373 = v365;
          unsigned __int8 v373 = v9;
          BOOL v374 = (unint64_t *)(v356 + 24);
          if (v358 >= 0x41)
          {
            int v375 = 0;
            int64_t v376 = (unint64_t)(v358 + 63) >> 6;
            do
            {
              BOOL v24 = v376-- < 1;
              if (v24) {
                break;
              }
              unint64_t v377 = (*v357)[v376];
              v375 += __clz(v377);
            }
            while (!v377);
            if ((v358 - (v372 + v375)) > 0x40)
            {
              unint64_t v378 = -1;
              goto LABEL_569;
            }
            BOOL v374 = *v357;
          }
          unint64_t v378 = *v374;
LABEL_569:
          --v9;
          uint64_t v365 = *(v373 - 1);
          uint64_t v379 = (unint64_t *)(v365 + 24);
          uint64_t result = *(unsigned int *)(v365 + 32);
          if (result < 0x41) {
            goto LABEL_578;
          }
          int v380 = 0;
          int64_t v381 = (result + 63) >> 6;
          do
          {
            BOOL v24 = v381-- < 1;
            if (v24) {
              break;
            }
            unint64_t v382 = *(void *)(*v379 + 8 * v381);
            v380 += __clz(v382);
          }
          while (!v382);
          int v383 = result | 0xFFFFFFC0;
          if ((result & 0x3F) == 0) {
            int v383 = 0;
          }
          uint64_t result = (result - v380 - v383);
          if (result <= 0x40)
          {
            uint64_t v379 = (unint64_t *)*v379;
LABEL_578:
            unint64_t v384 = *v379;
            goto LABEL_579;
          }
          unint64_t v384 = -1;
LABEL_579:
          if (v378 >= v384)
          {
            *unsigned __int8 v373 = v356;
            break;
          }
        }
      }
      unint64_t v206 = v355 + 1;
      char v9 = v355;
      if (v355 + 1 == a2) {
        return result;
      }
    }
  }
  if (v208) {
    return result;
  }
  uint64_t v209 = v11;
  while (2)
  {
    uint64_t v210 = v206;
    uint64_t v211 = v209[1];
    char v212 = (unint64_t **)(v211 + 24);
    uint64_t v213 = *(unsigned int *)(v211 + 32);
    unsigned int v214 = (unint64_t *)(v211 + 24);
    if (v213 < 0x41)
    {
LABEL_320:
      unint64_t v219 = *v214;
    }
    else
    {
      int v215 = 0;
      int64_t v216 = (unint64_t)(v213 + 63) >> 6;
      do
      {
        BOOL v24 = v216-- < 1;
        if (v24) {
          break;
        }
        unint64_t v217 = (*v212)[v216];
        v215 += __clz(v217);
      }
      while (!v217);
      int v218 = v213 | 0xFFFFFFC0;
      if ((v213 & 0x3F) == 0) {
        int v218 = 0;
      }
      if ((v213 - v215 - v218) <= 0x40)
      {
        unsigned int v214 = *v212;
        goto LABEL_320;
      }
      unint64_t v219 = -1;
    }
    uint64_t v220 = *v209;
    unsigned int v221 = (unint64_t *)(*v209 + 24);
    uint64_t v222 = *(unsigned int *)(*v209 + 32);
    if (v222 >= 0x41)
    {
      int v223 = 0;
      int64_t v224 = (unint64_t)(v222 + 63) >> 6;
      do
      {
        BOOL v24 = v224-- < 1;
        if (v24) {
          break;
        }
        unint64_t v225 = *(void *)(*v221 + 8 * v224);
        v223 += __clz(v225);
      }
      while (!v225);
      LODWORD(result) = v222 | 0xFFFFFFC0;
      if ((v222 & 0x3F) != 0) {
        uint64_t result = result;
      }
      else {
        uint64_t result = 0;
      }
      if ((v222 - v223 - result) > 0x40)
      {
        unint64_t v226 = -1;
        goto LABEL_332;
      }
      unsigned int v221 = (unint64_t *)*v221;
    }
    unint64_t v226 = *v221;
LABEL_332:
    if (v219 >= v226) {
      goto LABEL_359;
    }
    int v227 = v213 | 0xFFFFFFC0;
    if ((v213 & 0x3F) == 0) {
      int v227 = 0;
    }
    uint64_t v228 = v210;
    while (2)
    {
      *uint64_t v228 = v220;
      if (v209 != v11)
      {
        uint64_t v228 = v209;
        int v229 = (unint64_t *)(v211 + 24);
        if (v213 >= 0x41)
        {
          int v230 = 0;
          int64_t v231 = (unint64_t)(v213 + 63) >> 6;
          do
          {
            BOOL v24 = v231-- < 1;
            if (v24) {
              break;
            }
            unint64_t v232 = (*v212)[v231];
            v230 += __clz(v232);
          }
          while (!v232);
          if ((v213 - (v227 + v230)) > 0x40)
          {
            unint64_t v233 = -1;
            goto LABEL_345;
          }
          int v229 = *v212;
        }
        unint64_t v233 = *v229;
LABEL_345:
        uint64_t v209 = v228 - 1;
        uint64_t v220 = *(v228 - 1);
        uint64_t v234 = (unint64_t *)(v220 + 24);
        uint64_t v235 = *(unsigned int *)(v220 + 32);
        if (v235 >= 0x41)
        {
          int v236 = 0;
          int64_t v237 = (unint64_t)(v235 + 63) >> 6;
          do
          {
            BOOL v24 = v237-- < 1;
            if (v24) {
              break;
            }
            unint64_t v238 = *(void *)(*v234 + 8 * v237);
            v236 += __clz(v238);
          }
          while (!v238);
          int v239 = v235 | 0xFFFFFFC0;
          if ((v235 & 0x3F) == 0) {
            int v239 = 0;
          }
          if ((v235 - v236 - v239) > 0x40)
          {
            uint64_t result = -1;
            goto LABEL_355;
          }
          uint64_t v234 = (unint64_t *)*v234;
        }
        uint64_t result = *v234;
LABEL_355:
        if (v233 >= result) {
          goto LABEL_358;
        }
        continue;
      }
      break;
    }
    uint64_t v228 = v11;
LABEL_358:
    *uint64_t v228 = v211;
LABEL_359:
    unint64_t v206 = v210 + 1;
    uint64_t v209 = v210;
    if (v210 + 1 != a2) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CCB56AF0(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  BOOL v5 = (unint64_t *)(*a2 + 24);
  uint64_t v6 = *(unsigned int *)(*a2 + 32);
  int v7 = v5;
  if (v6 >= 0x41)
  {
    int v8 = 0;
    int64_t v9 = (unint64_t)(v6 + 63) >> 6;
    do
    {
      BOOL v10 = v9-- < 1;
      if (v10) {
        break;
      }
      unint64_t v11 = *(void *)(*v5 + 8 * v9);
      v8 += __clz(v11);
    }
    while (!v11);
    int v12 = v6 | 0xFFFFFFC0;
    if ((v6 & 0x3F) == 0) {
      int v12 = 0;
    }
    if ((v6 - v8 - v12) > 0x40)
    {
      unint64_t v13 = -1;
      goto LABEL_11;
    }
    int v7 = (unint64_t *)*v5;
  }
  unint64_t v13 = *v7;
LABEL_11:
  unint64_t v14 = (unint64_t *)(v4 + 24);
  uint64_t v15 = *(unsigned int *)(v4 + 32);
  uint64_t v16 = (unint64_t *)(v4 + 24);
  if (v15 >= 0x41)
  {
    int v17 = 0;
    int64_t v18 = (unint64_t)(v15 + 63) >> 6;
    do
    {
      BOOL v10 = v18-- < 1;
      if (v10) {
        break;
      }
      unint64_t v19 = *(void *)(*v14 + 8 * v18);
      v17 += __clz(v19);
    }
    while (!v19);
    int v20 = v15 | 0xFFFFFFC0;
    if ((v15 & 0x3F) == 0) {
      int v20 = 0;
    }
    if ((v15 - v17 - v20) > 0x40)
    {
      unint64_t v21 = -1;
      goto LABEL_21;
    }
    uint64_t v16 = (unint64_t *)*v14;
  }
  unint64_t v21 = *v16;
LABEL_21:
  uint64_t v22 = *a3;
  int64_t v23 = (unint64_t *)(*a3 + 24);
  uint64_t v24 = *(unsigned int *)(*a3 + 32);
  if (v13 < v21)
  {
    if (v24 >= 0x41)
    {
      int v25 = 0;
      int64_t v26 = (unint64_t)(v24 + 63) >> 6;
      do
      {
        BOOL v10 = v26-- < 1;
        if (v10) {
          break;
        }
        unint64_t v27 = *(void *)(*v23 + 8 * v26);
        v25 += __clz(v27);
      }
      while (!v27);
      int v28 = v24 | 0xFFFFFFC0;
      if ((v24 & 0x3F) == 0) {
        int v28 = 0;
      }
      if ((v24 - v25 - v28) > 0x40)
      {
        unint64_t v29 = -1;
        goto LABEL_40;
      }
      int64_t v23 = (unint64_t *)*v23;
    }
    unint64_t v29 = *v23;
LABEL_40:
    if (v6 >= 0x41)
    {
      int v35 = 0;
      int64_t v36 = (unint64_t)(v6 + 63) >> 6;
      do
      {
        BOOL v10 = v36-- < 1;
        if (v10) {
          break;
        }
        unint64_t v37 = *(void *)(*v5 + 8 * v36);
        v35 += __clz(v37);
      }
      while (!v37);
      int v38 = v6 | 0xFFFFFFC0;
      if ((v6 & 0x3F) == 0) {
        int v38 = 0;
      }
      if ((v6 - v35 - v38) > 0x40)
      {
        unint64_t v39 = -1;
        goto LABEL_60;
      }
      BOOL v5 = (unint64_t *)*v5;
    }
    unint64_t v39 = *v5;
LABEL_60:
    if (v29 < v39)
    {
      *uint64_t result = v22;
LABEL_105:
      *a3 = v4;
      return result;
    }
    *uint64_t result = v3;
    *a2 = v4;
    int64_t v45 = (unint64_t *)(*a3 + 24);
    uint64_t v46 = *(unsigned int *)(*a3 + 32);
    if (v46 >= 0x41)
    {
      int v47 = 0;
      int64_t v48 = (unint64_t)(v46 + 63) >> 6;
      do
      {
        BOOL v10 = v48-- < 1;
        if (v10) {
          break;
        }
        unint64_t v49 = *(void *)(*v45 + 8 * v48);
        v47 += __clz(v49);
      }
      while (!v49);
      int v50 = v46 | 0xFFFFFFC0;
      if ((v46 & 0x3F) == 0) {
        int v50 = 0;
      }
      if ((v46 - v47 - v50) > 0x40)
      {
        unint64_t v51 = -1;
        goto LABEL_83;
      }
      int64_t v45 = (unint64_t *)*v45;
    }
    unint64_t v51 = *v45;
LABEL_83:
    if (v15 >= 0x41)
    {
      int v60 = 0;
      int64_t v61 = (unint64_t)(v15 + 63) >> 6;
      do
      {
        BOOL v10 = v61-- < 1;
        if (v10) {
          break;
        }
        unint64_t v62 = *(void *)(*v14 + 8 * v61);
        v60 += __clz(v62);
      }
      while (!v62);
      int v63 = v15 | 0xFFFFFFC0;
      if ((v15 & 0x3F) == 0) {
        int v63 = 0;
      }
      if ((v15 - v60 - v63) > 0x40)
      {
        unint64_t v64 = -1;
LABEL_103:
        if (v51 >= v64) {
          return result;
        }
        *a2 = *a3;
        goto LABEL_105;
      }
      unint64_t v14 = (unint64_t *)*v14;
    }
    unint64_t v64 = *v14;
    goto LABEL_103;
  }
  if (v24 >= 0x41)
  {
    int v30 = 0;
    int64_t v31 = (unint64_t)(v24 + 63) >> 6;
    do
    {
      BOOL v10 = v31-- < 1;
      if (v10) {
        break;
      }
      unint64_t v32 = *(void *)(*v23 + 8 * v31);
      v30 += __clz(v32);
    }
    while (!v32);
    int v33 = v24 | 0xFFFFFFC0;
    if ((v24 & 0x3F) == 0) {
      int v33 = 0;
    }
    if ((v24 - v30 - v33) > 0x40)
    {
      unint64_t v34 = -1;
      goto LABEL_50;
    }
    int64_t v23 = (unint64_t *)*v23;
  }
  unint64_t v34 = *v23;
LABEL_50:
  if (v6 >= 0x41)
  {
    int v40 = 0;
    int64_t v41 = (unint64_t)(v6 + 63) >> 6;
    do
    {
      BOOL v10 = v41-- < 1;
      if (v10) {
        break;
      }
      unint64_t v42 = *(void *)(*v5 + 8 * v41);
      v40 += __clz(v42);
    }
    while (!v42);
    int v43 = v6 | 0xFFFFFFC0;
    if ((v6 & 0x3F) == 0) {
      int v43 = 0;
    }
    if ((v6 - v40 - v43) > 0x40)
    {
      unint64_t v44 = -1;
      goto LABEL_72;
    }
    BOOL v5 = (unint64_t *)*v5;
  }
  unint64_t v44 = *v5;
LABEL_72:
  if (v34 >= v44) {
    return result;
  }
  *a2 = v22;
  *a3 = v3;
  uint64_t v52 = *result;
  unint64_t v53 = (unint64_t *)(*a2 + 24);
  uint64_t v54 = *(unsigned int *)(*a2 + 32);
  if (v54 >= 0x41)
  {
    int v55 = 0;
    int64_t v56 = (unint64_t)(v54 + 63) >> 6;
    do
    {
      BOOL v10 = v56-- < 1;
      if (v10) {
        break;
      }
      unint64_t v57 = *(void *)(*v53 + 8 * v56);
      v55 += __clz(v57);
    }
    while (!v57);
    int v58 = v54 | 0xFFFFFFC0;
    if ((v54 & 0x3F) == 0) {
      int v58 = 0;
    }
    if ((v54 - v55 - v58) > 0x40)
    {
      unint64_t v59 = -1;
      goto LABEL_93;
    }
    unint64_t v53 = (unint64_t *)*v53;
  }
  unint64_t v59 = *v53;
LABEL_93:
  int64_t v65 = (unint64_t *)(v52 + 24);
  uint64_t v66 = *(unsigned int *)(v52 + 32);
  if (v66 >= 0x41)
  {
    int v67 = 0;
    int64_t v68 = (unint64_t)(v66 + 63) >> 6;
    do
    {
      BOOL v10 = v68-- < 1;
      if (v10) {
        break;
      }
      unint64_t v69 = *(void *)(*v65 + 8 * v68);
      v67 += __clz(v69);
    }
    while (!v69);
    int v70 = v66 | 0xFFFFFFC0;
    if ((v66 & 0x3F) == 0) {
      int v70 = 0;
    }
    if ((v66 - v67 - v70) > 0x40)
    {
      unint64_t v71 = -1;
      goto LABEL_109;
    }
    int64_t v65 = (unint64_t *)*v65;
  }
  unint64_t v71 = *v65;
LABEL_109:
  if (v59 < v71)
  {
    *uint64_t result = *a2;
    *a2 = v52;
  }
  return result;
}

BOOL sub_1CCB56F30(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      int v8 = (unint64_t *)(v6 + 24);
      uint64_t v9 = *(unsigned int *)(v6 + 32);
      if (v9 < 0x41) {
        goto LABEL_72;
      }
      int v10 = 0;
      int64_t v11 = (unint64_t)(v9 + 63) >> 6;
      do
      {
        BOOL v12 = v11-- < 1;
        if (v12) {
          break;
        }
        unint64_t v13 = *(void *)(*v8 + 8 * v11);
        v10 += __clz(v13);
      }
      while (!v13);
      int v14 = v9 | 0xFFFFFFC0;
      if ((v9 & 0x3F) == 0) {
        int v14 = 0;
      }
      if ((v9 - v10 - v14) <= 0x40)
      {
        int v8 = (unint64_t *)*v8;
LABEL_72:
        unint64_t v15 = *v8;
      }
      else
      {
        unint64_t v15 = -1;
      }
      int64_t v61 = (unint64_t *)(v7 + 24);
      uint64_t v62 = *(unsigned int *)(v7 + 32);
      if (v62 < 0x41) {
        goto LABEL_82;
      }
      int v63 = 0;
      int64_t v64 = (unint64_t)(v62 + 63) >> 6;
      do
      {
        BOOL v12 = v64-- < 1;
        if (v12) {
          break;
        }
        unint64_t v65 = *(void *)(*v61 + 8 * v64);
        v63 += __clz(v65);
      }
      while (!v65);
      int v66 = v62 | 0xFFFFFFC0;
      if ((v62 & 0x3F) == 0) {
        int v66 = 0;
      }
      if ((v62 - v63 - v66) <= 0x40)
      {
        int64_t v61 = (unint64_t *)*v61;
LABEL_82:
        unint64_t v67 = *v61;
      }
      else
      {
        unint64_t v67 = -1;
      }
      if (v15 < v67)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      sub_1CCB56AF0(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CCB57678(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      int v50 = a1 + 2;
      unint64_t v51 = a1 + 3;
      sub_1CCB57678(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v52 = *(a2 - 1);
      uint64_t v53 = a1[3];
      uint64_t v54 = (unint64_t *)(v52 + 24);
      uint64_t v55 = *(unsigned int *)(v52 + 32);
      if (v55 < 0x41) {
        goto LABEL_86;
      }
      int v56 = 0;
      int64_t v57 = (unint64_t)(v55 + 63) >> 6;
      do
      {
        BOOL v12 = v57-- < 1;
        if (v12) {
          break;
        }
        unint64_t v58 = *(void *)(*v54 + 8 * v57);
        v56 += __clz(v58);
      }
      while (!v58);
      int v59 = v55 | 0xFFFFFFC0;
      if ((v55 & 0x3F) == 0) {
        int v59 = 0;
      }
      if ((v55 - v56 - v59) <= 0x40)
      {
        uint64_t v54 = (unint64_t *)*v54;
LABEL_86:
        unint64_t v60 = *v54;
      }
      else
      {
        unint64_t v60 = -1;
      }
      int64_t v68 = (unint64_t *)(v53 + 24);
      uint64_t v69 = *(unsigned int *)(v53 + 32);
      if (v69 < 0x41) {
        goto LABEL_96;
      }
      int v70 = 0;
      int64_t v71 = (unint64_t)(v69 + 63) >> 6;
      do
      {
        BOOL v12 = v71-- < 1;
        if (v12) {
          break;
        }
        unint64_t v72 = *(void *)(*v68 + 8 * v71);
        v70 += __clz(v72);
      }
      while (!v72);
      int v73 = v69 | 0xFFFFFFC0;
      if ((v69 & 0x3F) == 0) {
        int v73 = 0;
      }
      if ((v69 - v70 - v73) <= 0x40)
      {
        int64_t v68 = (unint64_t *)*v68;
LABEL_96:
        unint64_t v74 = *v68;
      }
      else
      {
        unint64_t v74 = -1;
      }
      if (v60 >= v74) {
        return 1;
      }
      *unint64_t v51 = v52;
      *(a2 - 1) = v53;
      uint64_t v75 = *v51;
      uint64_t v76 = *v50;
      int v77 = (unint64_t *)(*v51 + 24);
      uint64_t v78 = *(unsigned int *)(*v51 + 32);
      unint64_t v79 = v77;
      if (v78 < 0x41) {
        goto LABEL_108;
      }
      int v80 = 0;
      int64_t v81 = (unint64_t)(v78 + 63) >> 6;
      do
      {
        BOOL v12 = v81-- < 1;
        if (v12) {
          break;
        }
        unint64_t v82 = *(void *)(*v77 + 8 * v81);
        v80 += __clz(v82);
      }
      while (!v82);
      int v83 = v78 | 0xFFFFFFC0;
      if ((v78 & 0x3F) == 0) {
        int v83 = 0;
      }
      if ((v78 - v80 - v83) <= 0x40)
      {
        unint64_t v79 = (unint64_t *)*v77;
LABEL_108:
        unint64_t v84 = *v79;
      }
      else
      {
        unint64_t v84 = -1;
      }
      uint64_t v85 = (unint64_t *)(v76 + 24);
      uint64_t v86 = *(unsigned int *)(v76 + 32);
      if (v86 < 0x41) {
        goto LABEL_118;
      }
      int v87 = 0;
      int64_t v88 = (unint64_t)(v86 + 63) >> 6;
      do
      {
        BOOL v12 = v88-- < 1;
        if (v12) {
          break;
        }
        unint64_t v89 = *(void *)(*v85 + 8 * v88);
        v87 += __clz(v89);
      }
      while (!v89);
      int v90 = v86 | 0xFFFFFFC0;
      if ((v86 & 0x3F) == 0) {
        int v90 = 0;
      }
      if ((v86 - v87 - v90) <= 0x40)
      {
        uint64_t v85 = (unint64_t *)*v85;
LABEL_118:
        unint64_t v91 = *v85;
      }
      else
      {
        unint64_t v91 = -1;
      }
      if (v84 >= v91) {
        return 1;
      }
      *int v50 = v75;
      *unint64_t v51 = v76;
      uint64_t v92 = v77;
      uint64_t v93 = a1[1];
      if (v78 < 0x41) {
        goto LABEL_129;
      }
      int v94 = 0;
      int64_t v95 = (unint64_t)(v78 + 63) >> 6;
      do
      {
        BOOL v12 = v95-- < 1;
        if (v12) {
          break;
        }
        unint64_t v96 = *(void *)(*v77 + 8 * v95);
        v94 += __clz(v96);
      }
      while (!v96);
      int v97 = v78 | 0xFFFFFFC0;
      if ((v78 & 0x3F) == 0) {
        int v97 = 0;
      }
      if ((v78 - v94 - v97) <= 0x40)
      {
        uint64_t v92 = (unint64_t *)*v77;
LABEL_129:
        unint64_t v98 = *v92;
      }
      else
      {
        unint64_t v98 = -1;
      }
      uint64_t v99 = (unint64_t *)(v93 + 24);
      uint64_t v100 = *(unsigned int *)(v93 + 32);
      if (v100 < 0x41) {
        goto LABEL_139;
      }
      int v101 = 0;
      int64_t v102 = (unint64_t)(v100 + 63) >> 6;
      do
      {
        BOOL v12 = v102-- < 1;
        if (v12) {
          break;
        }
        unint64_t v103 = *(void *)(*v99 + 8 * v102);
        v101 += __clz(v103);
      }
      while (!v103);
      int v104 = v100 | 0xFFFFFFC0;
      if ((v100 & 0x3F) == 0) {
        int v104 = 0;
      }
      if ((v100 - v101 - v104) <= 0x40)
      {
        uint64_t v99 = (unint64_t *)*v99;
LABEL_139:
        unint64_t v105 = *v99;
      }
      else
      {
        unint64_t v105 = -1;
      }
      if (v98 >= v105) {
        return 1;
      }
      a1[1] = v75;
      a1[2] = v93;
      uint64_t v106 = *a1;
      if (v78 < 0x41) {
        goto LABEL_150;
      }
      int v107 = 0;
      int64_t v108 = (unint64_t)(v78 + 63) >> 6;
      do
      {
        BOOL v12 = v108-- < 1;
        if (v12) {
          break;
        }
        unint64_t v109 = *(void *)(*v77 + 8 * v108);
        v107 += __clz(v109);
      }
      while (!v109);
      int v110 = v78 | 0xFFFFFFC0;
      if ((v78 & 0x3F) == 0) {
        int v110 = 0;
      }
      if ((v78 - v107 - v110) <= 0x40)
      {
        int v77 = (unint64_t *)*v77;
LABEL_150:
        unint64_t v111 = *v77;
      }
      else
      {
        unint64_t v111 = -1;
      }
      int v112 = (unint64_t *)(v106 + 24);
      uint64_t v113 = *(unsigned int *)(v106 + 32);
      if (v113 < 0x41) {
        goto LABEL_160;
      }
      int v114 = 0;
      int64_t v115 = (unint64_t)(v113 + 63) >> 6;
      do
      {
        BOOL v12 = v115-- < 1;
        if (v12) {
          break;
        }
        unint64_t v116 = *(void *)(*v112 + 8 * v115);
        v114 += __clz(v116);
      }
      while (!v116);
      int v117 = v113 | 0xFFFFFFC0;
      if ((v113 & 0x3F) == 0) {
        int v117 = 0;
      }
      if ((v113 - v114 - v117) <= 0x40)
      {
        int v112 = (unint64_t *)*v112;
LABEL_160:
        unint64_t v118 = *v112;
      }
      else
      {
        unint64_t v118 = -1;
      }
      if (v111 < v118)
      {
        *a1 = v75;
        a1[1] = v106;
      }
      return 1;
    default:
      uint64_t v16 = a1 + 2;
      sub_1CCB56AF0(a1, a1 + 1, a1 + 2);
      int v17 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v18 = 0;
      break;
  }
  do
  {
    uint64_t v19 = *v17;
    int v20 = (unint64_t *)(*v17 + 24);
    uint64_t v21 = *(unsigned int *)(*v17 + 32);
    uint64_t v22 = v20;
    if (v21 >= 0x41)
    {
      int v23 = 0;
      int64_t v24 = (unint64_t)(v21 + 63) >> 6;
      do
      {
        BOOL v12 = v24-- < 1;
        if (v12) {
          break;
        }
        unint64_t v25 = *(void *)(*v20 + 8 * v24);
        v23 += __clz(v25);
      }
      while (!v25);
      int v26 = v21 | 0xFFFFFFC0;
      if ((v21 & 0x3F) == 0) {
        int v26 = 0;
      }
      if ((v21 - v23 - v26) > 0x40)
      {
        unint64_t v27 = -1;
        goto LABEL_23;
      }
      uint64_t v22 = (unint64_t *)*v20;
    }
    unint64_t v27 = *v22;
LABEL_23:
    uint64_t v28 = *v16;
    unint64_t v29 = (unint64_t *)(*v16 + 24);
    uint64_t v30 = *(unsigned int *)(*v16 + 32);
    if (v30 < 0x41) {
      goto LABEL_32;
    }
    int v31 = 0;
    int64_t v32 = (unint64_t)(v30 + 63) >> 6;
    do
    {
      BOOL v12 = v32-- < 1;
      if (v12) {
        break;
      }
      unint64_t v33 = *(void *)(*v29 + 8 * v32);
      v31 += __clz(v33);
    }
    while (!v33);
    int v34 = v30 | 0xFFFFFFC0;
    if ((v30 & 0x3F) == 0) {
      int v34 = 0;
    }
    if ((v30 - v31 - v34) <= 0x40)
    {
      unint64_t v29 = (unint64_t *)*v29;
LABEL_32:
      unint64_t v35 = *v29;
      goto LABEL_33;
    }
    unint64_t v35 = -1;
LABEL_33:
    if (v27 >= v35) {
      goto LABEL_60;
    }
    int v36 = v21 | 0xFFFFFFC0;
    if ((v21 & 0x3F) == 0) {
      int v36 = 0;
    }
    unint64_t v37 = v17;
    while (1)
    {
      *unint64_t v37 = v28;
      if (v16 == a1) {
        break;
      }
      unint64_t v37 = v16;
      int v38 = v20;
      if (v21 >= 0x41)
      {
        int v39 = 0;
        int64_t v40 = (unint64_t)(v21 + 63) >> 6;
        do
        {
          BOOL v12 = v40-- < 1;
          if (v12) {
            break;
          }
          unint64_t v41 = *(void *)(*v20 + 8 * v40);
          v39 += __clz(v41);
        }
        while (!v41);
        if ((v21 - (v36 + v39)) > 0x40)
        {
          unint64_t v42 = -1;
          goto LABEL_46;
        }
        int v38 = (unint64_t *)*v20;
      }
      unint64_t v42 = *v38;
LABEL_46:
      --v16;
      uint64_t v28 = *(v37 - 1);
      int v43 = (unint64_t *)(v28 + 24);
      uint64_t v44 = *(unsigned int *)(v28 + 32);
      if (v44 < 0x41) {
        goto LABEL_55;
      }
      int v45 = 0;
      int64_t v46 = (unint64_t)(v44 + 63) >> 6;
      do
      {
        BOOL v12 = v46-- < 1;
        if (v12) {
          break;
        }
        unint64_t v47 = *(void *)(*v43 + 8 * v46);
        v45 += __clz(v47);
      }
      while (!v47);
      int v48 = v44 | 0xFFFFFFC0;
      if ((v44 & 0x3F) == 0) {
        int v48 = 0;
      }
      if ((v44 - v45 - v48) <= 0x40)
      {
        int v43 = (unint64_t *)*v43;
LABEL_55:
        unint64_t v49 = *v43;
        goto LABEL_56;
      }
      unint64_t v49 = -1;
LABEL_56:
      if (v42 >= v49) {
        goto LABEL_59;
      }
    }
    unint64_t v37 = a1;
LABEL_59:
    *unint64_t v37 = v19;
    if (++v18 == 8) {
      return v17 + 1 == a2;
    }
LABEL_60:
    uint64_t v16 = v17++;
  }
  while (v17 != a2);
  return 1;
}

uint64_t *sub_1CCB57678(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CCB56AF0(a1, a2, a3);
  uint64_t v9 = *a3;
  int v10 = (unint64_t *)(*a4 + 24);
  uint64_t v11 = *(unsigned int *)(*a4 + 32);
  if (v11 >= 0x41)
  {
    int v12 = 0;
    int64_t v13 = (unint64_t)(v11 + 63) >> 6;
    do
    {
      BOOL v14 = v13-- < 1;
      if (v14) {
        break;
      }
      unint64_t v15 = *(void *)(*v10 + 8 * v13);
      v12 += __clz(v15);
    }
    while (!v15);
    int v16 = v11 | 0xFFFFFFC0;
    if ((v11 & 0x3F) == 0) {
      int v16 = 0;
    }
    if ((v11 - v12 - v16) > 0x40)
    {
      unint64_t v17 = -1;
      goto LABEL_11;
    }
    int v10 = (unint64_t *)*v10;
  }
  unint64_t v17 = *v10;
LABEL_11:
  int v18 = (unint64_t *)(v9 + 24);
  uint64_t v19 = *(unsigned int *)(v9 + 32);
  if (v19 >= 0x41)
  {
    int v20 = 0;
    int64_t v21 = (unint64_t)(v19 + 63) >> 6;
    do
    {
      BOOL v14 = v21-- < 1;
      if (v14) {
        break;
      }
      unint64_t v22 = *(void *)(*v18 + 8 * v21);
      v20 += __clz(v22);
    }
    while (!v22);
    int v23 = v19 | 0xFFFFFFC0;
    if ((v19 & 0x3F) == 0) {
      int v23 = 0;
    }
    if ((v19 - v20 - v23) > 0x40)
    {
      unint64_t v24 = -1;
      goto LABEL_21;
    }
    int v18 = (unint64_t *)*v18;
  }
  unint64_t v24 = *v18;
LABEL_21:
  if (v17 >= v24) {
    return result;
  }
  *a3 = *a4;
  *a4 = v9;
  uint64_t v25 = *a2;
  int v26 = (unint64_t *)(*a3 + 24);
  uint64_t v27 = *(unsigned int *)(*a3 + 32);
  if (v27 >= 0x41)
  {
    int v28 = 0;
    int64_t v29 = (unint64_t)(v27 + 63) >> 6;
    do
    {
      BOOL v14 = v29-- < 1;
      if (v14) {
        break;
      }
      unint64_t v30 = *(void *)(*v26 + 8 * v29);
      v28 += __clz(v30);
    }
    while (!v30);
    int v31 = v27 | 0xFFFFFFC0;
    if ((v27 & 0x3F) == 0) {
      int v31 = 0;
    }
    if ((v27 - v28 - v31) > 0x40)
    {
      unint64_t v32 = -1;
      goto LABEL_32;
    }
    int v26 = (unint64_t *)*v26;
  }
  unint64_t v32 = *v26;
LABEL_32:
  unint64_t v33 = (unint64_t *)(v25 + 24);
  uint64_t v34 = *(unsigned int *)(v25 + 32);
  if (v34 >= 0x41)
  {
    int v35 = 0;
    int64_t v36 = (unint64_t)(v34 + 63) >> 6;
    do
    {
      BOOL v14 = v36-- < 1;
      if (v14) {
        break;
      }
      unint64_t v37 = *(void *)(*v33 + 8 * v36);
      v35 += __clz(v37);
    }
    while (!v37);
    int v38 = v34 | 0xFFFFFFC0;
    if ((v34 & 0x3F) == 0) {
      int v38 = 0;
    }
    if ((v34 - v35 - v38) > 0x40)
    {
      unint64_t v39 = -1;
      goto LABEL_42;
    }
    unint64_t v33 = (unint64_t *)*v33;
  }
  unint64_t v39 = *v33;
LABEL_42:
  if (v32 >= v39) {
    return result;
  }
  *a2 = *a3;
  *a3 = v25;
  uint64_t v40 = *a1;
  unint64_t v41 = (unint64_t *)(*a2 + 24);
  uint64_t v42 = *(unsigned int *)(*a2 + 32);
  if (v42 >= 0x41)
  {
    int v43 = 0;
    int64_t v44 = (unint64_t)(v42 + 63) >> 6;
    do
    {
      BOOL v14 = v44-- < 1;
      if (v14) {
        break;
      }
      unint64_t v45 = *(void *)(*v41 + 8 * v44);
      v43 += __clz(v45);
    }
    while (!v45);
    int v46 = v42 | 0xFFFFFFC0;
    if ((v42 & 0x3F) == 0) {
      int v46 = 0;
    }
    if ((v42 - v43 - v46) > 0x40)
    {
      unint64_t v47 = -1;
      goto LABEL_53;
    }
    unint64_t v41 = (unint64_t *)*v41;
  }
  unint64_t v47 = *v41;
LABEL_53:
  int v48 = (unint64_t *)(v40 + 24);
  uint64_t v49 = *(unsigned int *)(v40 + 32);
  if (v49 >= 0x41)
  {
    int v50 = 0;
    int64_t v51 = (unint64_t)(v49 + 63) >> 6;
    do
    {
      BOOL v14 = v51-- < 1;
      if (v14) {
        break;
      }
      unint64_t v52 = *(void *)(*v48 + 8 * v51);
      v50 += __clz(v52);
    }
    while (!v52);
    int v53 = v49 | 0xFFFFFFC0;
    if ((v49 & 0x3F) == 0) {
      int v53 = 0;
    }
    if ((v49 - v50 - v53) > 0x40)
    {
      unint64_t v54 = -1;
      goto LABEL_63;
    }
    int v48 = (unint64_t *)*v48;
  }
  unint64_t v54 = *v48;
LABEL_63:
  if (v47 < v54)
  {
    *a1 = *a2;
    *a2 = v40;
  }
  return result;
}

void sub_1CCB57950()
{
}

void sub_1CCB579E4(llvm::Pass *this)
{
  *(void *)this = &unk_1F262C4D0;
  char v2 = (void **)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2)
  {
    uint64_t v4 = v2;
    sub_1CD0AC7B0(&v4);
    MEMORY[0x1D25D9CE0](v2, 0x20C40960023A9);
  }
  uint64_t v3 = (void **)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3)
  {
    uint64_t v4 = v3;
    sub_1CD0AC7B0(&v4);
    MEMORY[0x1D25D9CE0](v3, 0x20C40960023A9);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CCB57A9C(llvm::Pass *this)
{
  *(void *)this = &unk_1F262C4D0;
  char v2 = (void **)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2)
  {
    uint64_t v4 = v2;
    sub_1CD0AC7B0(&v4);
    MEMORY[0x1D25D9CE0](v2, 0x20C40960023A9);
  }
  uint64_t v3 = (void **)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3)
  {
    uint64_t v4 = v3;
    sub_1CD0AC7B0(&v4);
    MEMORY[0x1D25D9CE0](v3, 0x20C40960023A9);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CCB57B68()
{
  return "ModuleSanitizerCoverage";
}

void sub_1CCB57B78(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
}

uint64_t sub_1CCB57BC8(uint64_t a1, size_t *a2)
{
  v18[25] = *MEMORY[0x1E4F143B8];
  sub_1CCB4E64C((uint64_t)v10, (int *)(a1 + 28), *(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v8 = a1;
  uint64_t v9 = a1;
  uint64_t v6 = sub_1CCB4E838((uint64_t)v10, a2, (void (*)(uint64_t, uint64_t **))sub_1CCB57CC4, (uint64_t)&v9, sub_1CCB57D4C, &v8, v4, v5);
  if (v17 != v18) {
    free(v17);
  }
  if (v15 != &v16) {
    free(v15);
  }
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  return v6;
}

uint64_t sub_1CCB57CC4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)a1 + 8) + 24);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v2 + 96))(v2, &llvm::DominatorTreeWrapperPass::ID)
       + 32;
}

uint64_t sub_1CCB57D4C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)a1 + 8) + 24);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v2 + 96))(v2, &llvm::PostDominatorTreeWrapperPass::ID)+ 32;
}

void sub_1CCB57DD4()
{
}

void sub_1CCB57E00()
{
}

uint64_t sub_1CCB57E2C()
{
  v4.n128_u64[0] = (unint64_t)"Sanitizer Coverage. 0: none, 1: entry block, 2: all blocks, 3: all blocks and critical edges";
  v4.n128_u64[1] = 92;
  int v3 = 1;
  int v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD698E0C(&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCEBD68, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Experimental pc tracing";
  v4.n128_u64[1] = 23;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCEBE28, "sanitizer-coverage-trace-pc", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEBE28, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"pc tracing with a guard";
  v4.n128_u64[1] = 23;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCEBEE8, "sanitizer-coverage-trace-pc-guard", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEBEE8, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"create a static PC table";
  v4.n128_u64[1] = 24;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCEBFA8, "sanitizer-coverage-pc-table", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEBFA8, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"increments 8-bit counter for every edge";
  v4.n128_u64[1] = 39;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD698F84(&v4, &v3, (char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCEC068, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"sets a BOOLean flag for every edge";
  v4.n128_u64[1] = 34;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCEC128, "sanitizer-coverage-inline-BOOL-flag", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEC128, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Tracing of CMP and similar instructions";
  v4.n128_u64[1] = 39;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCEC1E8, "sanitizer-coverage-trace-compares", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEC1E8, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Tracing of DIV instructions";
  v4.n128_u64[1] = 27;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCEC2A8, "sanitizer-coverage-trace-divs", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEC2A8, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Tracing of load instructions";
  v4.n128_u64[1] = 28;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCEC368, "sanitizer-coverage-trace-loads", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEC368, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Tracing of store instructions";
  v4.n128_u64[1] = 29;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCEC428, "sanitizer-coverage-trace-stores", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEC428, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Tracing of GEP instructions";
  v4.n128_u64[1] = 27;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCEC4E8, "sanitizer-coverage-trace-geps", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEC4E8, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Reduce the number of instrumented blocks";
  v4.n128_u64[1] = 40;
  int v3 = 1;
  LOBYTE(v1) = 1;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCEC5A8, "sanitizer-coverage-prune-blocks", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEC5A8, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"max stack depth tracing";
  v4.n128_u64[1] = 23;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCEC668, "sanitizer-coverage-stack-depth", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEC668, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Gate the invocation of the tracing callbacks on a global variable. Currently only s"
                                     "upported for trace-pc-guard.";
  v4.n128_u64[1] = 111;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD6990FC(&v4, &v3, (char **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCEC728, &dword_1CB82C000);
}

void llvm::initializeSoftPointerAuthLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCEC7F0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCB582F4;
    v4[1] = &v2;
    int v3 = v4;
    std::__call_once(&qword_1EBCEC7F0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CCB582F4()
{
}

uint64_t sub_1CCB58390(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCEC7E8;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F262C570;
  *(unsigned char *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 105) = 0u;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCEC7F0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCB582F4;
    v5[1] = &PassRegistry;
    __n128 v4 = v5;
    std::__call_once(&qword_1EBCEC7F0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CCB58458(uint64_t ***a1, uint64_t **a2, const llvm::APInt *a3)
{
  v178[1] = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 3) = 0u;
  *(_OWORD *)(a1 + 1) = 0u;
  *a1 = a2;
  __n128 v4 = a2 + 3;
  uint64_t v5 = (uint64_t **)a2[4];
  if (v5 == a2 + 3)
  {
    int v6 = 0;
  }
  else
  {
    int v6 = 0;
    do
    {
      if (v5) {
        uint64_t v7 = v5 - 7;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v5 = (uint64_t **)v5[1];
      uint64_t v8 = v7[14];
      if (v8)
      {
        if (*((_DWORD *)v8 + 2))
        {
          uint64_t v9 = v8[5];
          if (v9)
          {
            int v10 = *(_DWORD *)(v9 + 40);
            if (v10)
            {
              uint64_t v11 = *(void *)(v9 + 24);
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_1EBCBE588))
              {
                unint64_t v39 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override) {
                  unint64_t v39 = 0xFF51AFD7ED558CCDLL;
                }
                qword_1EBCBE580 = v39;
                __cxa_guard_release(&qword_1EBCBE588);
              }
              unint64_t v12 = 0x9DDFEA08EB382D69
                  * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xC91092A985989CBALL)) ^ ((0x9DDFEA08EB382D69
                                                                                         * (qword_1EBCBE580 ^ 0xC91092A985989CBALL)) >> 47) ^ 0xE478E6DCE4EAE8CALL);
              unsigned int v13 = (-348639895 * ((v12 >> 47) ^ v12)) ^ 0x7465722D;
              for (int i = 1; ; ++i)
              {
                unsigned int v15 = v13 & (v10 - 1);
                uint64_t v16 = v11 + 24 * v15;
                unint64_t v17 = *(void **)v16;
                if (*(void *)v16 == -1)
                {
                  if ("ptrauth-returns" == (char *)-1) {
                    goto LABEL_248;
                  }
                }
                else if (v17 == (void *)-2)
                {
                  if ("ptrauth-returns" == (char *)-2) {
                    goto LABEL_248;
                  }
                }
                else if (*(void *)(v16 + 8) == 15)
                {
                  BOOL v18 = *v17 == 0x2D68747561727470 && *(void *)((char *)v17 + 7) == 0x736E72757465722DLL;
                  if (v18) {
LABEL_248:
                  }
                    llvm::report_fatal_error((llvm *)"Soft. lowering of return address auth unsupported", (const llvm::Twine *)1);
                }
                if (v17 == (void *)-1) {
                  break;
                }
                unsigned int v13 = i + v15;
              }
            }
          }
        }
      }
      uint64_t v19 = (uint64_t *)(v7 + 9);
      int v20 = v7[10];
LABEL_27:
      while (v20 != v19)
      {
        int64_t v21 = v20 - 3;
        if (!v20) {
          int64_t v21 = 0;
        }
        int v20 = (uint64_t *)v20[1];
        unint64_t v22 = v21 + 5;
        int v23 = (void *)v21[6];
        if (v23 != v22)
        {
          while (1)
          {
            if (v23) {
              unint64_t v24 = (unsigned __int8 *)(v23 - 3);
            }
            else {
              unint64_t v24 = 0;
            }
            uint64_t v25 = (void *)v23[1];
            int v26 = v24[16];
            if (v23 && v26 == 84)
            {
              unint64_t v157 = v24;
              sub_1CC233A58((char *)v24, 7, (uint64_t *)v160);
              if (!v162)
              {
                uint64_t v31 = *((void *)v157 - 4);
                if (v31
                  && !*(unsigned char *)(v31 + 16)
                  && *(void *)(v31 + 24) == *((void *)v157 + 9)
                  && (*(unsigned char *)(v31 + 33) & 0x20) != 0)
                {
                  int v32 = *(_DWORD *)(v31 + 36);
                  int64_t v163 = (llvm::ValueAsMetadata **)&v157;
                  switch(v32)
                  {
                    case 246:
                      v160[0] = (void *)0x100000002;
                      LODWORD(v160[1]) = 0;
                      BOOL v33 = sub_1CCB59DF0((uint64_t)a1, (uint64_t)v157, 2, (int *)v160, 3);
                      int v30 = 0;
                      if (!v33) {
                        goto LABEL_51;
                      }
                      v160[0] = a1;
                      v160[1] = &v157;
                      uint64_t v34 = (uint64_t (*)(uint64_t, void **))sub_1CCB5A60C;
                      break;
                    case 247:
                      v160[0] = 0;
                      BOOL v38 = sub_1CCB59DF0((uint64_t)a1, (uint64_t)v157, 0, (int *)v160, 2);
                      int v30 = 0;
                      if (!v38) {
                        goto LABEL_51;
                      }
                      v160[0] = a1;
                      v160[1] = &v157;
                      uint64_t v34 = (uint64_t (*)(uint64_t, void **))sub_1CCB5A740;
                      break;
                    case 248:
                      int v161 = 0;
                      *(_OWORD *)uint64_t v160 = xmmword_1CFB28660;
                      BOOL v36 = sub_1CCB59DF0((uint64_t)a1, (uint64_t)v157, 2, (int *)v160, 5);
                      int v30 = 0;
                      if (!v36) {
                        goto LABEL_51;
                      }
                      v160[0] = a1;
                      v160[1] = &v157;
                      uint64_t v34 = (uint64_t (*)(uint64_t, void **))sub_1CCB5A590;
                      break;
                    case 249:
                      v160[0] = (void *)0x100000002;
                      LODWORD(v160[1]) = 0;
                      BOOL v37 = sub_1CCB59DF0((uint64_t)a1, (uint64_t)v157, 2, (int *)v160, 3);
                      int v30 = 0;
                      if (!v37) {
                        goto LABEL_51;
                      }
                      v160[0] = a1;
                      v160[1] = &v157;
                      uint64_t v34 = (uint64_t (*)(uint64_t, void **))sub_1CCB5A458;
                      break;
                    case 250:
                      v160[0] = 0;
                      BOOL v35 = sub_1CCB59DF0((uint64_t)a1, (uint64_t)v157, 0, (int *)v160, 2);
                      int v30 = 0;
                      if (!v35) {
                        goto LABEL_51;
                      }
                      v160[0] = a1;
                      v160[1] = &v157;
                      uint64_t v34 = (uint64_t (*)(uint64_t, void **))sub_1CCB5A858;
                      break;
                    case 251:
                      v160[0] = (void *)0x100000002;
                      int v30 = sub_1CCB59DF0((uint64_t)a1, (uint64_t)v157, 2, (int *)v160, 2);
                      if (!v30) {
                        goto LABEL_51;
                      }
                      v160[0] = a1;
                      v160[1] = &v157;
                      uint64_t v34 = (uint64_t (*)(uint64_t, void **))sub_1CCB5A634;
                      break;
                    default:
                      goto LABEL_50;
                  }
                  sub_1CCB59F18(&v163, v34, (uint64_t)v160);
                }
LABEL_50:
                int v30 = 0;
                goto LABEL_51;
              }
              uint64_t v27 = (llvm::Value *)v157;
              uint64_t v28 = (uint64_t)a1;
            }
            else
            {
              if (v26 == 33) {
                int64_t v29 = (char *)v24;
              }
              else {
                int64_t v29 = 0;
              }
              if (!v23 || v26 != 33) {
                goto LABEL_52;
              }
              sub_1CC233A58(v29, 7, (uint64_t *)v160);
              if (!v162) {
                goto LABEL_50;
              }
              uint64_t v28 = (uint64_t)a1;
              uint64_t v27 = (llvm::Value *)v29;
            }
            int v30 = sub_1CCB59624(v28, v27, (uint64_t)v160);
LABEL_51:
            v6 |= v30;
LABEL_52:
            int v23 = v25;
            if (v25 == v22) {
              goto LABEL_27;
            }
          }
        }
      }
    }
    while (v5 != v4);
    a2 = *a1;
  }
  v160[0] = &v161;
  v160[1] = (void *)0x1000000000;
  unint64_t v157 = v159;
  uint64_t v158 = 0x1000000000;
  uint64_t v40 = a2 + 1;
  unsigned int v152 = 0;
  v151[0] = 0;
  v151[1] = 0;
  unint64_t v41 = (uint64_t **)a2[2];
  if (v41 == a2 + 1) {
    goto LABEL_247;
  }
  do
  {
    if (v41) {
      uint64_t v42 = (llvm::ValueAsMetadata **)(v41 - 7);
    }
    else {
      uint64_t v42 = 0;
    }
    if ((*((unsigned char *)v42 + 34) & 0x40) == 0) {
      goto LABEL_87;
    }
    uint64_t v43 = **(void **)*v42;
    int64_t v163 = v42;
    int v44 = *(_DWORD *)(v43 + 2520);
    if (!v44)
    {
      unint64_t v67 = 0;
LABEL_118:
      int v48 = (llvm::ValueAsMetadata ***)sub_1CC5BF31C(v43 + 2504, (uint64_t)&v163, (uint64_t *)&v163, v67);
      int64_t v68 = v163;
      v48[1] = 0;
      v48[2] = 0;
      *int v48 = v68;
      goto LABEL_82;
    }
    uint64_t v45 = *(void *)(v43 + 2504);
    int v46 = v44 - 1;
    unsigned int v47 = v46 & ((v42 >> 4) ^ (v42 >> 9));
    int v48 = (llvm::ValueAsMetadata ***)(v45 + 24 * v47);
    uint64_t v49 = *v48;
    if (*v48 != v42)
    {
      unint64_t v54 = 0;
      int v55 = 1;
      while (v49 != (llvm::ValueAsMetadata **)-4096)
      {
        if (v54) {
          BOOL v56 = 0;
        }
        else {
          BOOL v56 = v49 == (llvm::ValueAsMetadata **)-8192;
        }
        if (v56) {
          unint64_t v54 = v48;
        }
        unsigned int v57 = v47 + v55++;
        unsigned int v47 = v57 & v46;
        int v48 = (llvm::ValueAsMetadata ***)(v45 + 24 * v47);
        uint64_t v49 = *v48;
        if (*v48 == v42) {
          goto LABEL_82;
        }
      }
      if (v54) {
        unint64_t v67 = v54;
      }
      else {
        unint64_t v67 = v48;
      }
      goto LABEL_118;
    }
LABEL_82:
    if (v48[2] == (llvm::ValueAsMetadata **)12)
    {
      int v50 = v48[1];
      int64_t v51 = *v50;
      int v52 = *((_DWORD *)v50 + 2);
      if (v51 == (llvm::ValueAsMetadata *)0x7274702E6D766C6CLL && v52 == 1752462689)
      {
        uint64_t v58 = (uint64_t)*(v42 - 4);
        if (v58)
        {
          if (*(unsigned char *)(v58 + 16) == 9 && (*(_DWORD *)(v58 + 20) & 0x7FFFFFF) == 4)
          {
            uint64_t v59 = **(void **)(v58 - 128);
            if (v59 == llvm::PointerType::get((llvm::PointerType *)(***a1 + 1912), 0))
            {
              unint64_t v60 = (void **)(v58 - 32 * (*(_DWORD *)(v58 + 20) & 0x7FFFFFF));
              if (*(_DWORD *)(*v60[4] + 8) == 8205)
              {
                int v61 = *((_DWORD *)(*a1)[63] + 1);
                if (*(_DWORD *)(*v60[8] + 8) == 13 && *(_DWORD *)(*v60[8] + 8) >> 8 == v61)
                {
                  unsigned int v63 = *(_DWORD *)(*v60[12] + 8);
                  int v64 = v63;
                  unsigned int v65 = v63 >> 8;
                  if (v64 == 13 && v65 == v61)
                  {
                    if (LODWORD(v160[1]) >= (unint64_t)HIDWORD(v160[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v160[0] + LODWORD(v160[1])) = v42;
                    ++LODWORD(v160[1]);
                    int64_t v163 = (llvm::ValueAsMetadata **)v151;
                    uint64_t v164 = (uint64_t)&v157;
                    sub_1CCB5A968((uint64_t)v42, 0, (uint64_t *)&v163);
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_87:
    unint64_t v41 = (uint64_t **)v41[1];
  }
  while (v41 != v40);
  if (!LODWORD(v160[1]))
  {
LABEL_247:
    int v140 = 0;
    goto LABEL_257;
  }
  if (!v158) {
    goto LABEL_250;
  }
  uint64_t v69 = (uint64_t **)v157;
  int64_t v148 = (char *)v157 + 8 * v158;
  while (2)
  {
    unint64_t v149 = v69;
    int v70 = *v69;
    if (v152)
    {
      uint64_t v71 = ((v70 >> 4) ^ (v70 >> 9)) & (v152 - 1);
      unint64_t v72 = (void *)(v151[0] + 32 * v71);
      int v73 = (uint64_t *)*v72;
      if ((uint64_t *)*v72 != v70)
      {
        int v74 = 1;
        while (v73 != (uint64_t *)-4096)
        {
          int v75 = v71 + v74++;
          uint64_t v71 = v75 & (v152 - 1);
          int v73 = *(uint64_t **)(v151[0] + 32 * v71);
          if (v73 == v70)
          {
            unint64_t v72 = (void *)(v151[0] + 32 * v71);
            goto LABEL_131;
          }
        }
        unint64_t v72 = (void *)(v151[0] + 32 * v152);
      }
    }
    else
    {
      unint64_t v72 = (void *)v151[0];
    }
LABEL_131:
    int v76 = *((unsigned __int8 *)v70 + 16);
    if (v76 == 3 && v70 != 0)
    {
      unint64_t v111 = (llvm::Constant **)*(v70 - 4);
      int64_t v163 = (llvm::ValueAsMetadata **)v165;
      uint64_t v164 = 0x400000000;
      uint64_t v112 = ***a1;
      uint64_t v113 = *(llvm::ConstantInt **)(v112 + 1960);
      unsigned int v114 = *(_DWORD *)(v112 + 1968);
      DWORD2(v153[0]) = v114 >> 8;
      if (v114 >> 8 >= 0x41) {
        operator new[]();
      }
      *(void *)&v153[0] = 0;
      int64_t v115 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v113, (llvm::LLVMContext *)v153, a3);
      if (DWORD2(v153[0]) >= 0x41 && *(void *)&v153[0]) {
        MEMORY[0x1D25D9CB0](*(void *)&v153[0], 0x1000C8000313F17);
      }
      if (v164 >= (unint64_t)HIDWORD(v164)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v163[v164] = v115;
      LODWORD(v164) = v164 + 1;
      unint64_t v116 = sub_1CCB5ADB0(a1, v70, (uint64_t)&v163, v111, v72 + 1);
      llvm::GlobalVariable::setInitializer((uint64_t)v70, v116);
      *((unsigned char *)v70 + 80) &= ~1u;
      goto LABEL_238;
    }
    if (!v70 || v76 != 83)
    {
      uint64_t v117 = 0;
      uint64_t v118 = *(void *)*v70;
      int64_t v163 = (llvm::ValueAsMetadata **)v165;
      uint64_t v164 = 0x200000000;
      uint64_t v168 = v118;
      int64_t v169 = &v177;
      unint64_t v170 = v178;
      uint64_t v171 = 0;
      int v172 = 0;
      __int16 v173 = 512;
      char v174 = 7;
      unsigned int v166 = 0;
      uint64_t v167 = 0;
      uint64_t v175 = 0;
      uint64_t v176 = 0;
      unint64_t v177 = &unk_1F2616E88;
      v178[0] = &unk_1F2617008;
      unsigned int v166 = (uint64_t *)v70[5];
      uint64_t v167 = (void **)(v70 + 3);
      int v119 = (unsigned __int8 *)v70[6];
      unint64_t v156 = v119;
      if (v119)
      {
        llvm::MetadataTracking::track((uint64_t)&v156, v119, 2);
        uint64_t v117 = (uint64_t)v156;
      }
      sub_1CB8461A4((uint64_t)&v163, 0, v117);
      if (!v156)
      {
LABEL_203:
        unint64_t v120 = (void *)v72[1];
        int v121 = v72 + 2;
        if (v120 != v121)
        {
          do
          {
            int v127 = *((_DWORD *)v70 + 5);
            if ((v127 & 0x40000000) != 0) {
              int v128 = (uint64_t *)*(v70 - 1);
            }
            else {
              int v128 = &v70[-4 * (v127 & 0x7FFFFFF)];
            }
            uint64_t v129 = *((unsigned int *)v120 + 8);
            int v130 = sub_1CCB5B2A8((uint64_t)a1, (uint64_t)&v163, v128[4 * v129], v120 + 5);
            int v131 = *((_DWORD *)v70 + 5);
            if ((v131 & 0x40000000) != 0) {
              unint64_t v126 = (uint64_t *)*(v70 - 1);
            }
            else {
              unint64_t v126 = &v70[-4 * (v131 & 0x7FFFFFF)];
            }
            int v132 = (llvm::Value **)&v126[4 * v129];
            if (*v132)
            {
              *(void *)v132[2] = v132[1];
              unint64_t v133 = v132[1];
              if (v133) {
                *((void *)v133 + 2) = v132[2];
              }
            }
            uint64_t *v132 = v130;
            if (v130)
            {
              int64_t v136 = (void *)*((void *)v130 + 1);
              size_t v134 = (llvm::Value ***)((char *)v130 + 8);
              int v135 = v136;
              unint64_t v137 = &v126[4 * v129];
              v137[1] = (uint64_t)v136;
              if (v136) {
                v135[2] = v137 + 1;
              }
              v137[2] = (uint64_t)v134;
              *size_t v134 = v132;
            }
            unint64_t v138 = (void *)v120[1];
            if (v138)
            {
              do
              {
                char v139 = v138;
                unint64_t v138 = (void *)*v138;
              }
              while (v138);
            }
            else
            {
              do
              {
                char v139 = (void *)v120[2];
                BOOL v18 = *v139 == (void)v120;
                unint64_t v120 = v139;
              }
              while (!v18);
            }
            unint64_t v120 = v139;
          }
          while (v139 != v121);
        }
LABEL_238:
        if (v163 != (llvm::ValueAsMetadata **)v165) {
          free(v163);
        }
        goto LABEL_240;
      }
      int v122 = *v156;
      if ((v122 - 4) > 0x1E)
      {
        if ((v122 - 3) >= 0xFFFFFFFE) {
          unint64_t v125 = v156;
        }
        else {
          unint64_t v125 = 0;
        }
        if ((v122 - 3) < 0xFFFFFFFE)
        {
          if (v122 == 3) {
            *((void *)v156 + 1) = 0;
          }
          goto LABEL_203;
        }
        unint64_t v124 = (unint64_t)(v125 + 8);
      }
      else
      {
        if ((v156[1] & 0x7F) != 2 && !*((_DWORD *)v156 + 3)) {
          goto LABEL_203;
        }
        uint64_t v123 = *((void *)v156 + 2);
        if ((v123 & 4) == 0) {
          goto LABEL_203;
        }
        unint64_t v124 = v123 & 0xFFFFFFFFFFFFFFF8;
        if (!v124) {
          goto LABEL_203;
        }
      }
      *(void *)&v153[0] = &v156;
      sub_1CC5FA668(v124 + 16, v153);
      goto LABEL_203;
    }
    uint64_t v78 = (void *)v72[1];
    unint64_t v150 = v72 + 2;
    if (v78 != v72 + 2)
    {
      do
      {
        uint64_t v79 = *((unsigned int *)v78 + 8);
        int v80 = *((_DWORD *)v70 + 5);
        if ((v80 & 0x40000000) != 0) {
          int64_t v81 = (uint64_t *)*(v70 - 1);
        }
        else {
          int64_t v81 = &v70[-4 * (v80 & 0x7FFFFFF)];
        }
        uint64_t v82 = v81[4 * v79];
        int v83 = (void *)v81[4 * *((unsigned int *)v70 + 15) + v79];
        unint64_t v84 = (void *)v70[5];
        int v154 = 256;
        memset(v153, 0, sizeof(v153));
        char v155 = 1;
        uint64_t v85 = (void *)v83[5];
        if (v85 == v83 + 5)
        {
          int v87 = 0;
        }
        else
        {
          if (v85) {
            uint64_t v86 = (unsigned __int8 *)(v85 - 3);
          }
          else {
            uint64_t v86 = 0;
          }
          if (v86[16] - 29 >= 0xB) {
            int v87 = 0;
          }
          else {
            int v87 = (llvm::Instruction *)v86;
          }
        }
        unsigned int v88 = -1;
        do
          ++v88;
        while ((void *)llvm::Instruction::getSuccessor(v87, v88) != v84);
        v165[8] = 257;
        uint64_t v89 = llvm::SplitCriticalEdge(v87, v88, (uint64_t)v153, (llvm::Twine *)&v163);
        uint64_t v90 = 0;
        if (v89) {
          uint64_t v91 = v89;
        }
        else {
          uint64_t v91 = (uint64_t)v83;
        }
        uint64_t v92 = *(void *)(v91 + 40);
        if (v92) {
          uint64_t v93 = (uint64_t **)(v92 - 24);
        }
        else {
          uint64_t v93 = 0;
        }
        if (*((unsigned __int8 *)v93 + 16) - 29 >= 0xB) {
          uint64_t v93 = 0;
        }
        uint64_t v94 = **v93;
        int64_t v163 = (llvm::ValueAsMetadata **)v165;
        uint64_t v164 = 0x200000000;
        uint64_t v168 = v94;
        int64_t v169 = &v177;
        unint64_t v170 = v178;
        uint64_t v171 = 0;
        int v172 = 0;
        __int16 v173 = 512;
        char v174 = 7;
        unsigned int v166 = 0;
        uint64_t v167 = 0;
        uint64_t v175 = 0;
        uint64_t v176 = 0;
        unint64_t v177 = &unk_1F2616E88;
        v178[0] = &unk_1F2617008;
        unsigned int v166 = v93[5];
        uint64_t v167 = v93 + 3;
        int64_t v95 = (unsigned __int8 *)v93[6];
        unint64_t v156 = v95;
        if (v95)
        {
          llvm::MetadataTracking::track((uint64_t)&v156, v95, 2);
          uint64_t v90 = (uint64_t)v156;
        }
        sub_1CB8461A4((uint64_t)&v163, 0, v90);
        if (!v156) {
          goto LABEL_162;
        }
        int v107 = *v156;
        if ((v107 - 4) > 0x1E)
        {
          if ((v107 - 3) >= 0xFFFFFFFE) {
            int v110 = v156;
          }
          else {
            int v110 = 0;
          }
          if ((v107 - 3) < 0xFFFFFFFE)
          {
            if (v107 == 3) {
              *((void *)v156 + 1) = 0;
            }
            goto LABEL_162;
          }
          unint64_t v109 = (unint64_t)(v110 + 8);
        }
        else
        {
          if ((v156[1] & 0x7F) != 2 && !*((_DWORD *)v156 + 3)) {
            goto LABEL_162;
          }
          uint64_t v108 = *((void *)v156 + 2);
          if ((v108 & 4) == 0) {
            goto LABEL_162;
          }
          unint64_t v109 = v108 & 0xFFFFFFFFFFFFFFF8;
          if (!v109) {
            goto LABEL_162;
          }
        }
        *(void *)&v153[0] = &v156;
        sub_1CC5FA668(v109 + 16, v153);
LABEL_162:
        unint64_t v96 = sub_1CCB5B2A8((uint64_t)a1, (uint64_t)&v163, v82, v78 + 5);
        int v97 = *((_DWORD *)v70 + 5);
        if ((v97 & 0x40000000) != 0) {
          unint64_t v98 = (uint64_t *)*(v70 - 1);
        }
        else {
          unint64_t v98 = &v70[-4 * (v97 & 0x7FFFFFF)];
        }
        uint64_t v99 = (llvm::Value **)&v98[4 * v79];
        if (*v99)
        {
          *(void *)v99[2] = v99[1];
          uint64_t v106 = v99[1];
          if (v106) {
            *((void *)v106 + 2) = v99[2];
          }
        }
        *uint64_t v99 = v96;
        if (v96)
        {
          int64_t v102 = (void *)*((void *)v96 + 1);
          uint64_t v100 = (llvm::Value ***)((char *)v96 + 8);
          int v101 = v102;
          unint64_t v103 = &v98[4 * v79];
          v103[1] = (uint64_t)v102;
          if (v102) {
            v101[2] = v103 + 1;
          }
          v103[2] = (uint64_t)v100;
          *uint64_t v100 = v99;
        }
        if (v163 != (llvm::ValueAsMetadata **)v165) {
          free(v163);
        }
        int v104 = (void *)v78[1];
        if (v104)
        {
          do
          {
            unint64_t v105 = v104;
            int v104 = (void *)*v104;
          }
          while (v104);
        }
        else
        {
          do
          {
            unint64_t v105 = (void *)v78[2];
            BOOL v18 = *v105 == (void)v78;
            uint64_t v78 = v105;
          }
          while (!v18);
        }
        uint64_t v78 = v105;
      }
      while (v105 != v150);
    }
LABEL_240:
    uint64_t v69 = v149 + 1;
    if (v149 + 1 != (uint64_t **)v148) {
      continue;
    }
    break;
  }
  if (LODWORD(v160[1]))
  {
LABEL_250:
    int v141 = *(llvm::ValueAsMetadata **)v160[0];
    int64_t v142 = (llvm::Value *)llvm::ConstantPointerNull::get(**(llvm::ConstantPointerNull ***)v160[0], (llvm::PointerType *)a2);
    llvm::Value::doRAUW(v141, v142, (llvm::Value *)1);
    llvm::GlobalVariable::eraseFromParent(v141);
  }
  if (*((unsigned char *)a1 + 224))
  {
    LLVMBuildRetVoid_0((uint64_t *)a1 + 11);
    if (*((unsigned char *)a1 + 224))
    {
      int v143 = (uint64_t ***)a1[11];
      if (v143 != a1 + 13) {
        free(v143);
      }
      *((unsigned char *)a1 + 224) = 0;
    }
    int v140 = 1;
  }
  else
  {
    int v140 = 1;
  }
LABEL_257:
  uint64_t v144 = v151[0];
  if (v152)
  {
    uint64_t v145 = 32 * v152;
    int v146 = (void **)(v151[0] + 16);
    do
    {
      if (((unint64_t)*(v146 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        sub_1CCB5AD5C(*v146);
      }
      v146 += 4;
      v145 -= 32;
    }
    while (v145);
    uint64_t v144 = v151[0];
  }
  MEMORY[0x1D25D9CD0](v144, 8);
  if (v157 != v159) {
    free(v157);
  }
  if (v160[0] != &v161) {
    free(v160[0]);
  }
  return (v6 | v140) & 1;
}

void sub_1CCB594D0()
{
}

void sub_1CCB5950C(uint64_t a1)
{
  *(void *)a1 = &unk_1F262C570;
  if (*(unsigned char *)(a1 + 256))
  {
    int v1 = *(void **)(a1 + 120);
    if (v1 != (void *)(a1 + 136))
    {
      uint64_t v2 = a1;
      free(v1);
      a1 = v2;
    }
    *(unsigned char *)(a1 + 256) = 0;
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CCB59584(llvm::Pass *this)
{
  *(void *)this = &unk_1F262C570;
  if (*((unsigned char *)this + 256))
  {
    uint64_t v2 = (char *)*((void *)this + 15);
    if (v2 != (char *)this + 136) {
      free(v2);
    }
    *((unsigned char *)this + 256) = 0;
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CCB5960C()
{
  return "Soft Pointer Auth Lowering";
}

uint64_t sub_1CCB5961C(uint64_t a1, uint64_t **a2, const llvm::APInt *a3)
{
  return sub_1CCB58458((uint64_t ***)(a1 + 32), a2, a3);
}

uint64_t sub_1CCB59624(uint64_t a1, llvm::Value *a2, uint64_t a3)
{
  v87[1] = *MEMORY[0x1E4F143B8];
  if (*(void *)(a3 + 8) == 2
    && *(_DWORD *)(***(void ***)a3 + 8) == 8205
    && *(_DWORD *)(**(void **)(*(void *)a3 + 32) + 8) == 13
    && *(_DWORD *)(**(void **)(*(void *)a3 + 32) + 8) >> 8 == *(_DWORD *)(*(void *)(*(void *)a1 + 504)
                                                                                + 4))
  {
    uint64_t v8 = 0;
    uint64_t v9 = **(void **)a2;
    unint64_t v72 = &v74;
    uint64_t v73 = 0x200000000;
    uint64_t v77 = v9;
    uint64_t v78 = &v86;
    uint64_t v79 = v87;
    uint64_t v80 = 0;
    int v81 = 0;
    __int16 v82 = 512;
    char v83 = 7;
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    uint64_t v86 = &unk_1F2616E88;
    v87[0] = &unk_1F2617008;
    int v10 = (char *)a2 + 24;
    uint64_t v12 = *((void *)a2 + 5);
    uint64_t v11 = (void *)*((void *)a2 + 6);
    uint64_t v75 = v12;
    int v76 = v10;
    int v64 = v11;
    if (v11)
    {
      llvm::MetadataTracking::track((uint64_t)&v64, (unsigned __int8 *)v11, 2);
      uint64_t v8 = v64;
    }
    sub_1CB8461A4((uint64_t)&v72, 0, (uint64_t)v8);
    if (!v64)
    {
LABEL_11:
      uint64_t v13 = *((void *)a2 - 4);
      unint64_t v14 = llvm::PointerType::get((llvm::PointerType *)(***(void ***)a1 + 1912), 0);
      __int16 v67 = 257;
      unsigned int v15 = (llvm::Instruction *)v13;
      if (*(void *)v13 != v14)
      {
        if (*(unsigned __int8 *)(v13 + 16) <= 0x14u)
        {
          uint64_t v18 = (*((uint64_t (**)(void **, uint64_t, uint64_t, unint64_t))*v78 + 28))(v78, 49, v13, v14);
          unsigned int v15 = (llvm::Instruction *)v18;
          if (v18)
          {
            if (*(unsigned __int8 *)(v18 + 16) >= 0x1Cu)
            {
              (*(void (**)(void *, uint64_t, void **, uint64_t, char *))(*v79 + 16))(v79, v18, &v64, v75, v76);
              if (v73)
              {
                unint64_t v60 = (llvm::MDNode **)v72;
                int v61 = (llvm::MDNode **)((char *)v72 + 16 * v73);
                do
                {
                  llvm::Instruction::setMetadata(v15, *(_DWORD *)v60, v60[1]);
                  v60 += 2;
                }
                while (v60 != v61);
              }
            }
          }
        }
        else
        {
          __int16 v71 = 257;
          unsigned int v15 = llvm::CastInst::Create(49, v13, v14, (const char **)&v68, 0);
          (*(void (**)(void *, llvm::Instruction *, void **, uint64_t, char *))(*v79 + 16))(v79, v15, &v64, v75, v76);
          if (v73)
          {
            uint64_t v16 = (llvm::MDNode **)v72;
            unint64_t v17 = (llvm::MDNode **)((char *)v72 + 16 * v73);
            do
            {
              llvm::Instruction::setMetadata(v15, *(_DWORD *)v16, v16[1]);
              v16 += 2;
            }
            while (v16 != v17);
          }
        }
      }
      uint64_t v19 = sub_1CCB5A1F0(a1, (uint64_t *)&v72, (uint64_t)v15, **(void **)a3, *(void *)(*(void *)a3 + 32));
      int64_t v21 = (unsigned __int8 *)v19;
      uint64_t v22 = *(void *)v13;
      __int16 v67 = 257;
      if (*(void *)v19 != v22)
      {
        if (*(unsigned __int8 *)(v19 + 16) <= 0x14u)
        {
          int64_t v21 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v78 + 28))(v78, 49, v19, v22);
          if (v21) {
            BOOL v25 = v21[16] >= 0x1Cu;
          }
          else {
            BOOL v25 = 0;
          }
          if (v25)
          {
            (*(void (**)(void *, unsigned __int8 *, void **, uint64_t, char *))(*v79 + 16))(v79, v21, &v64, v75, v76);
            if (v73)
            {
              uint64_t v58 = (llvm::MDNode **)v72;
              uint64_t v59 = (llvm::MDNode **)((char *)v72 + 16 * v73);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v21, *(_DWORD *)v58, v58[1]);
                v58 += 2;
              }
              while (v58 != v59);
            }
          }
        }
        else
        {
          __int16 v71 = 257;
          int64_t v21 = (unsigned __int8 *)llvm::CastInst::Create(49, v19, v22, (const char **)&v68, 0);
          (*(void (**)(void *, unsigned __int8 *, void **, uint64_t, char *))(*v79 + 16))(v79, v21, &v64, v75, v76);
          if (v73)
          {
            int v23 = (llvm::MDNode **)v72;
            unint64_t v24 = (llvm::MDNode **)((char *)v72 + 16 * v73);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v21, *(_DWORD *)v23, v23[1]);
              v23 += 2;
            }
            while (v23 != v24);
          }
        }
      }
      int v26 = *((_DWORD *)a2 + 5);
      uint64_t v27 = v26 & 0x7FFFFFF;
      uint64_t v28 = (void *)((char *)a2 - 32 * v27);
      int v29 = *((unsigned __int8 *)a2 + 16);
      if (v29 == 84)
      {
        uint64_t v30 = 0;
      }
      else if (v29 == 39)
      {
        uint64_t v30 = (*((_DWORD *)a2 + 20) + 1);
      }
      else
      {
        uint64_t v30 = 2;
      }
      if (v26 < 0 && (uint64_t v47 = *(v28 - 1), (v47 & 0xFFFFFFFF0) != 0)) {
        uint64_t v31 = (*((_DWORD *)v28 - 3) - *(_DWORD *)((char *)v28 - v47));
      }
      else {
        uint64_t v31 = 0;
      }
      uint64_t v32 = (uint64_t)a2 + -32 * v31 + -32 * v30 - 32;
      int64_t v68 = &v70;
      *(void *)uint64_t v69 = 0x800000000;
      unint64_t v33 = v32 - (void)v28;
      if ((unint64_t)(v32 - (void)v28) < 0x101)
      {
        if (v28 != (void *)v32)
        {
          uint64_t v34 = v68;
          uint64_t v35 = 32 * v27 - 32 * v30 - 32 * v31 - 32;
          do
          {
            uint64_t v36 = *v28;
            v28 += 4;
            *v34++ = v36;
            v35 -= 32;
          }
          while (v35);
        }
        v69[0] = v33 >> 5;
        int v64 = &v66;
        *(void *)unsigned int v65 = 0x100000000;
        int v37 = *((_DWORD *)a2 + 5);
        if (v37 < 0)
        {
          unint64_t v48 = *((void *)a2 - 4 * (v37 & 0x7FFFFFF) - 1);
          if ((v48 & 0xFFFFFFFF0) != 0)
          {
            uint64_t v49 = (v48 >> 4);
            int v50 = a2;
            do
            {
              uint64_t v51 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
              int v52 = (char *)a2 - 32 * v51;
              int v53 = (unsigned int *)((char *)v50 - *((void *)v52 - 1) + -32 * v51);
              uint64_t v54 = *v53;
              int v55 = &v52[32 * v54];
              uint64_t v56 = v53[1] - v54;
              uint64_t v57 = *((void *)v53 - 1);
              v62[0] = v55;
              v62[1] = v56;
              v62[2] = v57;
              if (*(_DWORD *)(v57 + 8) != 7) {
                sub_1CD5C74F0((uint64_t)&v64, (uint64_t)v62);
              }
              int v50 = (llvm::Value *)((char *)v50 + 16);
              --v49;
            }
            while (v49);
          }
        }
        BOOL v38 = (uint64_t **)*((void *)a2 + 9);
        if (*((unsigned char *)a2 + 16) == 33)
        {
          uint64_t v41 = *((void *)a2 - 12);
          uint64_t v42 = *((void *)a2 - 8);
          __int16 v63 = 257;
          uint64_t v39 = (uint64_t)sub_1CD5C4DB8((uint64_t)&v72, (uint64_t)v38, (uint64_t)v21, v41, v42, (uint64_t *)v68, v69[0], v20, (uint64_t)v64, v65[0], (uint64_t)v62);
        }
        else
        {
          __int16 v63 = 257;
          uint64_t v39 = sub_1CC233B6C((uint64_t *)&v72, v38, (uint64_t **)v21, (uint64_t *)v68, v69[0], (uint64_t)v64, v65[0], (uint64_t)v62, 0);
        }
        uint64_t v40 = (llvm::Value *)v39;
        *(_WORD *)(v39 + 18) = *(_WORD *)(v39 + 18) & 0xF003 | *((_WORD *)a2 + 9) & 0xFFC;
        *(void *)(v39 + 64) = *((void *)a2 + 8);
        llvm::Value::takeName((int32x2_t ****)v39, a2);
        llvm::Value::doRAUW(a2, v40, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v43 = *(unsigned __int8 *)v64;
    if ((v43 - 4) > 0x1E)
    {
      if ((v43 - 3) >= 0xFFFFFFFE) {
        int v46 = v64;
      }
      else {
        int v46 = 0;
      }
      if ((v43 - 3) < 0xFFFFFFFE)
      {
        if (v43 == 3) {
          *((void *)v64 + 1) = 0;
        }
        goto LABEL_11;
      }
      unint64_t v45 = (unint64_t)v46 + 8;
    }
    else
    {
      if ((*((unsigned char *)v64 + 1) & 0x7F) != 2 && !*((_DWORD *)v64 + 3)) {
        goto LABEL_11;
      }
      uint64_t v44 = *((void *)v64 + 2);
      if ((v44 & 4) == 0) {
        goto LABEL_11;
      }
      unint64_t v45 = v44 & 0xFFFFFFFFFFFFFFF8;
      if (!v45) {
        goto LABEL_11;
      }
    }
    int64_t v68 = &v64;
    sub_1CC5FA668(v45 + 16, &v68);
    goto LABEL_11;
  }
  return 0;
}

BOOL sub_1CCB59DF0(uint64_t a1, uint64_t a2, int a3, int *a4, uint64_t a5)
{
  BOOL result = sub_1CCB5A124(a1, *(void *)a2, a3);
  if (result)
  {
    int v10 = *(unsigned __int8 *)(a2 + 16);
    if (v10 == 84)
    {
      uint64_t v11 = 0;
    }
    else if (v10 == 39)
    {
      uint64_t v11 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else
    {
      uint64_t v11 = 2;
    }
    int v12 = 0;
    int v13 = *(_DWORD *)(a2 + 20);
    uint64_t v14 = -(uint64_t)(v13 & 0x7FFFFFF);
    if (v13 < 0)
    {
      uint64_t v20 = a2 - 32 * (v13 & 0x7FFFFFF);
      uint64_t v21 = *(void *)(v20 - 8);
      if ((v21 & 0xFFFFFFFF0) != 0) {
        int v12 = *(_DWORD *)(v20 - 12) - *(_DWORD *)(v20 - v21);
      }
      else {
        int v12 = 0;
      }
    }
    BOOL result = 0;
    if (a5 == ((-32 * v11 + 32 * (unint64_t)-v12 - 32 * v14 - 32) >> 5))
    {
      if (a5)
      {
        uint64_t v15 = a5 - 1;
        uint64_t v16 = a2;
        do
        {
          int v17 = *a4++;
          BOOL result = sub_1CCB5A124(a1, **(void **)(v16 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), v17);
          BOOL v19 = v15-- != 0;
          if (!result) {
            break;
          }
          v16 += 32;
        }
        while (v19);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

void sub_1CCB59F18(llvm::ValueAsMetadata ***a1, uint64_t (*a2)(uint64_t, void **), uint64_t a3)
{
  uint64_t v6 = 0;
  v25[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = **a1;
  uint64_t v8 = **(void **)v7;
  v17[0] = v18;
  v17[1] = (void *)0x200000000;
  v18[6] = v8;
  v18[7] = &v24;
  v18[8] = v25;
  v18[9] = 0;
  int v19 = 0;
  __int16 v20 = 512;
  char v21 = 7;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  unint64_t v24 = &unk_1F2616E88;
  v25[0] = &unk_1F2617008;
  void v18[4] = *((void *)v7 + 5);
  v18[5] = (char *)v7 + 24;
  uint64_t v9 = (unsigned __int8 *)*((void *)v7 + 6);
  uint64_t v15 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track((uint64_t)&v15, v9, 2);
    uint64_t v6 = (uint64_t)v15;
  }
  sub_1CB8461A4((uint64_t)v17, 0, v6);
  if (!v15)
  {
LABEL_4:
    int v10 = (llvm::Value *)a2(a3, v17);
    llvm::Value::doRAUW(**a1, v10, (llvm::Value *)1);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  int v11 = *v15;
  if ((v11 - 4) > 0x1E)
  {
    if ((v11 - 3) >= 0xFFFFFFFE) {
      uint64_t v14 = v15;
    }
    else {
      uint64_t v14 = 0;
    }
    if ((v11 - 3) < 0xFFFFFFFE)
    {
      if (v11 == 3) {
        *((void *)v15 + 1) = 0;
      }
      goto LABEL_4;
    }
    unint64_t v13 = (unint64_t)(v14 + 8);
  }
  else
  {
    if ((v15[1] & 0x7F) != 2 && !*((_DWORD *)v15 + 3)) {
      goto LABEL_4;
    }
    uint64_t v12 = *((void *)v15 + 2);
    if ((v12 & 4) == 0) {
      goto LABEL_4;
    }
    unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFF8;
    if (!v13) {
      goto LABEL_4;
    }
  }
  uint64_t v16 = &v15;
  sub_1CC5FA668(v13 + 16, &v16);
  goto LABEL_4;
}

BOOL sub_1CCB5A124(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (a3 == 1) {
      return *(_DWORD *)(a2 + 8) == 8205;
    }
    else {
      return llvm::PointerType::get((llvm::PointerType *)(***(void ***)a1 + 1912), 0) == a2;
    }
  }
  else
  {
    return *(_DWORD *)(a2 + 8) == 13
        && *(_DWORD *)(*(void *)(*(void *)a1 + 504) + 4) == *(_DWORD *)(a2 + 8) >> 8;
  }
}

unint64_t sub_1CCB5A1A4(llvm::IntegerType ***a1, int a2)
{
  if (!a2) {
    return llvm::IntegerType::get(**a1, (llvm::LLVMContext *)*((unsigned int *)(*a1)[63] + 1));
  }
  if (a2 == 1) {
    return *(void *)**a1 + 1960;
  }
  return llvm::PointerType::get((llvm::PointerType *)(*(void *)**a1 + 1912), 0);
}

uint64_t sub_1CCB5A1F0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v18[3] = *MEMORY[0x1E4F143B8];
  int v10 = *(uint64_t ***)(a1 + 32);
  if (v10)
  {
    int v11 = *(uint64_t ***)(a1 + 24);
  }
  else
  {
    uint64_t v15 = 0x100000002;
    int v16 = 0;
    int v11 = (uint64_t **)sub_1CCB5A300((llvm::IntegerType ***)a1, "__ptrauth_auth", (const char *)0xE, 2, (int *)&v15, 3);
    int v10 = v12;
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 32) = v12;
  }
  v18[0] = a3;
  v18[1] = a4;
  v18[2] = a5;
  __int16 v17 = 257;
  uint64_t v13 = sub_1CB845BAC(a2, v11, v10, v18, 3, (uint64_t)&v15, 0);
  *(void *)(v13 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v13 + 64), **(uint64_t ***)v13, -1, 37);
  return v13;
}

llvm::PointerType *sub_1CCB5A300(llvm::IntegerType ***a1, unsigned __int8 *a2, const char *a3, int a4, int *a5, uint64_t a6)
{
  uint64_t v18[4] = *MEMORY[0x1E4F143B8];
  int v11 = (uint64_t **)sub_1CCB5A1A4(a1, a4);
  unsigned int v17 = 0;
  if (a6)
  {
    uint64_t v12 = 4 * a6;
    do
    {
      unint64_t v13 = sub_1CCB5A1A4(a1, *a5);
      if (v17 >= 4uLL) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v18[v17] = v13;
      uint64_t v14 = ++v17;
      ++a5;
      v12 -= 4;
    }
    while (v12);
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v15 = (llvm::PointerType *)llvm::FunctionType::get(v11, (uint64_t)v18, v14, 0);
  return llvm::Module::getOrInsertFunction((uint64_t)*a1, a2, a3, v15, 0);
}

uint64_t sub_1CCB5A458(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(**(void **)(a1 + 8) - 32 * (*(_DWORD *)(**(void **)(a1 + 8) + 20) & 0x7FFFFFF));
  return sub_1CCB5A480(*(void *)a1, a2, *v2, v2[4], v2[8]);
}

uint64_t sub_1CCB5A480(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v18[3] = *MEMORY[0x1E4F143B8];
  int v10 = *(uint64_t ***)(a1 + 16);
  if (v10)
  {
    int v11 = *(uint64_t ***)(a1 + 8);
  }
  else
  {
    uint64_t v15 = 0x100000002;
    int v16 = 0;
    int v11 = (uint64_t **)sub_1CCB5A300((llvm::IntegerType ***)a1, "__ptrauth_sign", (const char *)0xE, 2, (int *)&v15, 3);
    int v10 = v12;
    *(void *)(a1 + 8) = v11;
    *(void *)(a1 + 16) = v12;
  }
  v18[0] = a3;
  v18[1] = a4;
  v18[2] = a5;
  __int16 v17 = 257;
  uint64_t v13 = sub_1CB845BAC(a2, v11, v10, v18, 3, (uint64_t)&v15, 0);
  *(void *)(v13 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v13 + 64), **(uint64_t ***)v13, -1, 37);
  return v13;
}

uint64_t sub_1CCB5A590(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)a1;
  __n128 v4 = (uint64_t *)(**(void **)(a1 + 8) - 32 * (*(_DWORD *)(**(void **)(a1 + 8) + 20) & 0x7FFFFFF));
  uint64_t v5 = v4[12];
  uint64_t v6 = v4[16];
  uint64_t v7 = sub_1CCB5A1F0(*(void *)a1, a2, *v4, v4[4], v4[8]);

  return sub_1CCB5A480(v3, a2, v7, v5, v6);
}

uint64_t sub_1CCB5A60C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(**(void **)(a1 + 8) - 32 * (*(_DWORD *)(**(void **)(a1 + 8) + 20) & 0x7FFFFFF));
  return sub_1CCB5A1F0(*(void *)a1, a2, *v2, v2[4], v2[8]);
}

uint64_t sub_1CCB5A634(uint64_t *a1, uint64_t *a2)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  __n128 v4 = (uint64_t *)(*(void *)a1[1] - 32 * (*(_DWORD *)(*(void *)a1[1] + 20) & 0x7FFFFFF));
  uint64_t v5 = *v4;
  uint64_t v6 = v4[4];
  uint64_t v7 = *(uint64_t ***)(*a1 + 48);
  if (v7)
  {
    uint64_t v8 = *(uint64_t ***)(v3 + 40);
  }
  else
  {
    *(void *)uint64_t v12 = 0x100000002;
    uint64_t v8 = (uint64_t **)sub_1CCB5A300((llvm::IntegerType ***)v3, "__ptrauth_strip", (const char *)0xF, 2, v12, 2);
    uint64_t v7 = v9;
    *(void *)(v3 + 40) = v8;
    *(void *)(v3 + 48) = v9;
  }
  v14[0] = v5;
  v14[1] = v6;
  __int16 v13 = 257;
  uint64_t v10 = sub_1CB845BAC(a2, v8, v7, v14, 2, (uint64_t)v12, 0);
  *(void *)(v10 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v10 + 64), **(uint64_t ***)v10, -1, 37);
  return v10;
}

uint64_t sub_1CCB5A740(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(**(void **)(a1 + 8) - 32 * (*(_DWORD *)(**(void **)(a1 + 8) + 20) & 0x7FFFFFF));
  return sub_1CCB5A764(*(void *)a1, a2, *v2, v2[4]);
}

uint64_t sub_1CCB5A764(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(uint64_t ***)(a1 + 64);
  if (v8)
  {
    uint64_t v9 = *(uint64_t ***)(a1 + 56);
  }
  else
  {
    *(void *)__int16 v13 = 0;
    uint64_t v9 = (uint64_t **)sub_1CCB5A300((llvm::IntegerType ***)a1, "__ptrauth_blend", (const char *)0xF, 0, v13, 2);
    uint64_t v8 = v10;
    *(void *)(a1 + 56) = v9;
    *(void *)(a1 + 64) = v10;
  }
  v15[0] = a3;
  v15[1] = a4;
  __int16 v14 = 257;
  uint64_t v11 = sub_1CB845BAC(a2, v9, v8, v15, 2, (uint64_t)v13, 0);
  *(void *)(v11 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v11 + 64), **(uint64_t ***)v11, -1, 37);
  return v11;
}

uint64_t sub_1CCB5A858(uint64_t *a1, uint64_t *a2)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  __n128 v4 = (uint64_t *)(*(void *)a1[1] - 32 * (*(_DWORD *)(*(void *)a1[1] + 20) & 0x7FFFFFF));
  uint64_t v5 = *v4;
  uint64_t v6 = v4[4];
  uint64_t v7 = *(uint64_t ***)(*a1 + 80);
  if (v7)
  {
    uint64_t v8 = *(uint64_t ***)(v3 + 72);
  }
  else
  {
    uint64_t v12 = 0x100000000;
    int v13 = 0;
    uint64_t v8 = (uint64_t **)sub_1CCB5A300((llvm::IntegerType ***)v3, "__ptrauth_sign_generic", (const char *)0x16, 0, (int *)&v12, 3);
    uint64_t v7 = v9;
    *(void *)(v3 + 72) = v8;
    *(void *)(v3 + 80) = v9;
  }
  v15[0] = v5;
  v15[1] = v6;
  __int16 v14 = 257;
  uint64_t v10 = sub_1CB845BAC(a2, v8, v7, v15, 2, (uint64_t)&v12, 0);
  *(void *)(v10 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v10 + 64), **(uint64_t ***)v10, -1, 37);
  return v10;
}

uint64_t sub_1CCB5A968(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  for (uint64_t i = *(void *)(result + 8); i; uint64_t i = *(void *)(i + 8))
  {
    int v13 = a2;
    uint64_t v14 = 0;
    uint64_t v6 = *(void *)(i + 24);
    int v7 = *(_DWORD *)(v6 + 20);
    if ((v7 & 0x40000000) != 0) {
      uint64_t v8 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v8 = v6 - 32 * (v7 & 0x7FFFFFF);
    }
    LODWORD(v14) = (unint64_t)(i - v8) >> 5;
    unsigned int v9 = *(unsigned __int8 *)(v6 + 16);
    if (v9 == 3)
    {
      uint64_t v10 = a3;
      uint64_t v11 = v6;
      uint64_t v12 = a2;
    }
    else
    {
      if (v9 < 0x1C)
      {
        if (v9 <= 0x14) {
          BOOL result = sub_1CCB5A968(v6, &v13, a3);
        }
        continue;
      }
      uint64_t v12 = (uint64_t *)&v13;
      uint64_t v10 = a3;
      uint64_t v11 = v6;
    }
    BOOL result = sub_1CCB5AA2C(v10, v11, v12);
  }
  return result;
}

uint64_t sub_1CCB5AA2C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  uint64_t v41 = 0;
  uint64_t result = sub_1CBF98030(*(void *)v6, *(_DWORD *)(v6 + 16), a2, &v41);
  uint64_t v8 = v41;
  if (result) {
    goto LABEL_8;
  }
  uint64_t v42 = v41;
  int v9 = *(_DWORD *)(v6 + 8);
  uint64_t v10 = *(unsigned int *)(v6 + 16);
  if (4 * v9 + 4 >= (3 * v10))
  {
    int v11 = 2 * v10;
    goto LABEL_25;
  }
  int v11 = *(_DWORD *)(v6 + 16);
  if ((int)v10 + ~v9 - *(_DWORD *)(v6 + 12) <= v10 >> 3)
  {
LABEL_25:
    uint64_t v23 = *(void *)v6;
    unint64_t v24 = (v11 - 1) | ((unint64_t)(v11 - 1) >> 1);
    unint64_t v25 = v24 | (v24 >> 2) | ((v24 | (v24 >> 2)) >> 4);
    int v26 = ((v25 | (v25 >> 8)) >> 16) | v25 | (v25 >> 8);
    if ((v26 + 1) > 0x40) {
      unsigned int v27 = v26 + 1;
    }
    else {
      unsigned int v27 = 64;
    }
    *(_DWORD *)(v6 + 16) = v27;
    uint64_t v28 = operator new(32 * v27, (std::align_val_t)8uLL);
    *(void *)uint64_t v6 = v28;
    if (v23)
    {
      *(void *)(v6 + 8) = 0;
      uint64_t v29 = *(unsigned int *)(v6 + 16);
      if (v29)
      {
        uint64_t v30 = 32 * v29;
        do
        {
          *uint64_t v28 = -4096;
          v28 += 4;
          v30 -= 32;
        }
        while (v30);
      }
      if (v10)
      {
        uint64_t v31 = (void *)(v23 + 16);
        uint64_t v32 = 32 * v10;
        do
        {
          uint64_t v33 = *(v31 - 2);
          if ((v33 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            int v43 = 0;
            sub_1CBF98030(*(void *)v6, *(_DWORD *)(v6 + 16), v33, &v43);
            uint64_t v34 = v43;
            *int v43 = v33;
            v34[1] = *(v31 - 1);
            uint64_t v35 = (void *)*v31;
            v34[2] = *v31;
            uint64_t v36 = v34 + 2;
            uint64_t v37 = v31[1];
            v34[3] = v37;
            if (v37)
            {
              BOOL v38 = 0;
              v35[2] = v36;
              *(v31 - 1) = v31;
              *uint64_t v31 = 0;
              v31[1] = 0;
            }
            else
            {
              v34[1] = (uint64_t)v36;
              BOOL v38 = (void *)*v31;
            }
            ++*(_DWORD *)(v6 + 8);
            sub_1CCB5AD5C(v38);
          }
          v31 += 4;
          v32 -= 32;
        }
        while (v32);
      }
      MEMORY[0x1D25D9CD0](v23, 8);
      uint64_t v28 = *(void **)v6;
      LODWORD(v39) = *(_DWORD *)(v6 + 16);
    }
    else
    {
      *(void *)(v6 + 8) = 0;
      uint64_t v39 = *(unsigned int *)(v6 + 16);
      if (v39)
      {
        uint64_t v40 = 0;
        do
        {
          v28[v40] = -4096;
          v40 += 4;
        }
        while (4 * v39 != v40);
      }
    }
    uint64_t result = sub_1CBF98030((uint64_t)v28, v39, a2, &v42);
    int v9 = *(_DWORD *)(v6 + 8);
    uint64_t v8 = v42;
  }
  *(_DWORD *)(v6 + 8) = v9 + 1;
  if (*v8 != -4096) {
    --*(_DWORD *)(v6 + 12);
  }
  v8[3] = 0;
  v8[2] = 0;
  *uint64_t v8 = a2;
  v8[1] = (uint64_t)(v8 + 2);
  uint64_t v12 = a1[1];
  unsigned int v13 = *(_DWORD *)(v12 + 8);
  if (v13 >= *(_DWORD *)(v12 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v12 + 8 * v13) = a2;
  ++*(_DWORD *)(v12 + 8);
LABEL_8:
  if (a3)
  {
    uint64_t v14 = (uint64_t **)(v8 + 1);
    do
    {
      int v16 = v14 + 1;
      uint64_t v15 = v14[1];
      if (v15)
      {
        unsigned int v17 = *((_DWORD *)a3 + 2);
        while (1)
        {
          while (1)
          {
            uint64_t v18 = (uint64_t **)v15;
            unsigned int v19 = *((_DWORD *)v15 + 8);
            if (v17 >= v19) {
              break;
            }
            uint64_t v15 = *v18;
            int v16 = v18;
            if (!*v18) {
              goto LABEL_19;
            }
          }
          if (v19 >= v17) {
            break;
          }
          uint64_t v15 = v18[1];
          if (!v15)
          {
            int v16 = v18 + 1;
            goto LABEL_19;
          }
        }
      }
      else
      {
        uint64_t v18 = v14 + 1;
LABEL_19:
        __int16 v20 = (uint64_t *)v18;
        uint64_t v18 = (uint64_t **)operator new(0x40uLL);
        *((_DWORD *)v18 + 8) = *((_DWORD *)a3 + 2);
        v18[7] = 0;
        v18[6] = 0;
        void v18[5] = (uint64_t *)(v18 + 6);
        *uint64_t v18 = 0;
        v18[1] = 0;
        v18[2] = v20;
        *int v16 = (uint64_t *)v18;
        char v21 = (uint64_t *)**v14;
        uint64_t v22 = (uint64_t *)v18;
        if (v21)
        {
          *uint64_t v14 = v21;
          uint64_t v22 = *v16;
        }
        uint64_t result = (uint64_t)sub_1CB8358B8(v14[1], v22);
        v14[2] = (uint64_t *)((char *)v14[2] + 1);
      }
      uint64_t v14 = v18 + 5;
      a3 = (uint64_t *)*a3;
    }
    while (a3);
  }
  return result;
}

void sub_1CCB5AD5C(void *a1)
{
  if (a1)
  {
    sub_1CCB5AD5C(*a1);
    sub_1CCB5AD5C(a1[1]);
    sub_1CCB5AD5C(a1[6]);
    operator delete(a1);
  }
}

llvm::Value *sub_1CCB5ADB0(uint64_t ***a1, uint64_t *ElementPtr, uint64_t a3, llvm::Constant **a4, void *a5)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (a4 && *((unsigned __int8 *)a4 + 16) - 11 > 0xFFFFFFFC)
  {
    int v46 = v48;
    uint64_t v47 = 0x1000000000;
    int v9 = *((_DWORD *)a4 + 5);
    uint64_t v10 = (const llvm::APInt *)(v9 & 0x7FFFFFF);
    if ((v9 & 0x7FFFFFFu) >= 0x11) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if ((v9 & 0x40000000) != 0)
    {
      uint64_t v12 = (llvm::Constant **)*(a4 - 1);
      uint64_t v11 = v9 & 0x7FFFFFF;
      if ((v9 & 0x7FFFFFF) == 0) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v11 = v9 & 0x7FFFFFF;
      uint64_t v12 = &a4[-4 * v11];
      if ((v9 & 0x7FFFFFF) == 0) {
        goto LABEL_18;
      }
    }
    unsigned int v18 = v47;
    uint64_t v19 = 32 * v11;
    do
    {
      if (v18 >= HIDWORD(v47)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v46 + v18) = *v12;
      unsigned int v18 = v47 + 1;
      LODWORD(v47) = v47 + 1;
      v12 += 4;
      v19 -= 32;
    }
    while (v19);
LABEL_18:
    __int16 v20 = a5 + 1;
    char v21 = (void *)*a5;
    if ((void *)*a5 != a5 + 1)
    {
      do
      {
        uint64_t v22 = *((unsigned int *)v21 + 8);
        uint64_t v23 = ***a1;
        unint64_t v24 = *(llvm::ConstantInt **)(v23 + 1960);
        unint64_t v25 = *(unsigned int *)(v23 + 1968);
        unsigned int v45 = v25 >> 8;
        if (v25 >> 8 > 0x40) {
          operator new[]();
        }
        if (v25 <= 0xFF) {
          unint64_t v26 = 0;
        }
        else {
          unint64_t v26 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v25) + 63);
        }
        unint64_t v44 = v26 & v22;
        unsigned int v27 = llvm::ConstantInt::get(v24, (llvm::LLVMContext *)&v44, v10);
        if (v45 >= 0x41 && v44) {
          MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
        }
        unint64_t v28 = *(unsigned int *)(a3 + 8);
        if (v28 >= *(unsigned int *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a3 + 8 * v28) = v27;
        ++*(_DWORD *)(a3 + 8);
        uint64_t v29 = sub_1CCB5ADB0(a1, ElementPtr, a3, *((void *)v46 + v22), v21 + 5);
        *((void *)v46 + v22) = v29;
        --*(_DWORD *)(a3 + 8);
        uint64_t v30 = (void *)v21[1];
        if (v30)
        {
          do
          {
            uint64_t v31 = v30;
            uint64_t v30 = (void *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            uint64_t v31 = (void *)v21[2];
            BOOL v34 = *v31 == (void)v21;
            char v21 = v31;
          }
          while (!v34);
        }
        char v21 = v31;
      }
      while (v31 != v20);
    }
    uint64_t v32 = *a4;
    int v33 = *((unsigned __int8 *)*a4 + 8);
    if (*a4) {
      BOOL v34 = v33 == 16;
    }
    else {
      BOOL v34 = 0;
    }
    if (v34)
    {
      uint64_t Impl = (uint64_t)llvm::ConstantStruct::get(v32, (llvm::Type *)v46, v47);
      goto LABEL_47;
    }
    uint64_t v35 = (llvm::FixedVectorType ***)v46;
    uint64_t v36 = v47;
    if (v32 && v33 == 17)
    {
      uint64_t v37 = (uint64_t)llvm::ConstantArray::get(v32, (llvm::Type *)v46, v47);
    }
    else
    {
      uint64_t Impl = (uint64_t)llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v46, (llvm::Type *)v47);
      if (Impl) {
        goto LABEL_47;
      }
      llvm::FixedVectorType::get(**v35, (llvm::Type *)v36);
      uint64_t v37 = sub_1CC56A4DC(**v38 + 1288, (uint64_t)v38, v35, v36);
    }
    uint64_t Impl = v37;
LABEL_47:
    if (v46 != v48) {
      free(v46);
    }
    return (llvm::Value *)Impl;
  }
  if (!*((unsigned char *)a1 + 224))
  {
    uint64_t v40 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(***a1 + 1576), 0, 0, 0);
    int v46 = "ptrauth_soft_init";
    __int16 v49 = 259;
    unint64_t v41 = (unint64_t)*a1;
    uint64_t v42 = operator new(0x80uLL);
    uint64_t v43 = (uint64_t)v42 + 8;
    *((_DWORD *)v42 + 7) = *((_DWORD *)v42 + 7) & 0x38000000 | 0x40000000;
    *(void *)uint64_t v42 = 0;
    llvm::Function::Function((unint64_t *)v42 + 1, v40, 8, (llvm::Type *)0xFFFFFFFFLL, (const char **)&v46, v41);
    sub_1CD1CEB38("llvm.global_ctors", (uint64_t *)*a1, v43, 0, 0);
    __int16 v49 = 257;
    operator new();
  }
  unsigned int v13 = sub_1CCB5B2A8((uint64_t)a1, (uint64_t)(a1 + 11), (uint64_t)a4, a5);
  uint64_t v14 = *(unsigned int *)(a3 + 8);
  if (v14 != 1) {
    ElementPtr = (uint64_t *)llvm::ConstantExpr::getGetElementPtr(ElementPtr[3], ElementPtr, *(void *)a3, v14, 1, 0, 0);
  }
  sub_1CC27BF8C((uint64_t *)a1 + 11, (uint64_t)v13, (uint64_t)ElementPtr, 0, 0);
  return llvm::Constant::getNullValue(*a4, v15, v16);
}

llvm::Value *sub_1CCB5B2A8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  int v8 = *(unsigned __int8 *)(a3 + 16);
  if (a3 && v8 == 3)
  {
    int v9 = (uint64_t *)(*(void *)(a3 - 32) - 32 * (*(_DWORD *)(*(void *)(a3 - 32) + 20) & 0x7FFFFFF));
    uint64_t v10 = *v9;
    uint64_t v11 = v9[4];
    uint64_t v12 = v9[8];
    uint64_t v13 = v9[12];
    unsigned int v14 = *(unsigned __int8 *)(v12 + 16);
    if (v12) {
      BOOL v15 = v14 == 16;
    }
    else {
      BOOL v15 = 0;
    }
    if (v15)
    {
      uint64_t v16 = *(unsigned int *)(v12 + 32);
      if (v16 >= 0x41)
      {
        int v71 = 0;
        int64_t v72 = (unint64_t)(v16 + 63) >> 6;
        do
        {
          BOOL v61 = v72-- < 1;
          if (v61) {
            break;
          }
          unint64_t v73 = *(void *)(*(void *)(v12 + 24) + 8 * v72);
          v71 += __clz(v73);
        }
        while (!v73);
        int v74 = v16 | 0xFFFFFFC0;
        if ((v16 & 0x3F) == 0) {
          int v74 = 0;
        }
        if (v71 + v74 == v16) {
          goto LABEL_85;
        }
      }
      else if (!*(void *)(v12 + 24))
      {
        goto LABEL_85;
      }
    }
    else
    {
      if (v12) {
        BOOL v60 = v14 == 17;
      }
      else {
        BOOL v60 = 0;
      }
      if (v60)
      {
        if (sub_1CB844168(v12, 0.0)) {
          goto LABEL_85;
        }
      }
      else
      {
        BOOL v61 = v14 > 0x14;
        int v62 = (1 << v14) & 0x1C2000;
        if (!v61 && v62 != 0)
        {
LABEL_85:
          uint64_t v64 = sub_1CCB5A480(a1, (uint64_t *)a2, v10, v11, v13);
          AsInstructiouint64_t n = (llvm::Value *)v64;
          uint64_t v65 = *(void *)a3;
          __int16 v84 = 257;
          if (*(void *)v64 != v65)
          {
            if (*(unsigned __int8 *)(v64 + 16) <= 0x14u)
            {
              AsInstructiouint64_t n = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a2 + 72) + 224))(*(void *)(a2 + 72), 49, v64, v65);
              if (AsInstruction) {
                BOOL v69 = *((unsigned __int8 *)AsInstruction + 16) >= 0x1Cu;
              }
              else {
                BOOL v69 = 0;
              }
              if (v69)
              {
                (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), AsInstruction, v83, *(void *)(a2 + 48), *(void *)(a2 + 56));
                uint64_t v79 = *(unsigned int *)(a2 + 8);
                if (v79)
                {
                  uint64_t v80 = *(void *)a2;
                  uint64_t v81 = v80 + 16 * v79;
                  do
                  {
                    llvm::Instruction::setMetadata(AsInstruction, *(_DWORD *)v80, *(llvm::MDNode **)(v80 + 8));
                    v80 += 16;
                  }
                  while (v80 != v81);
                }
              }
            }
            else
            {
              __int16 v90 = 257;
              AsInstructiouint64_t n = llvm::CastInst::Create(49, v64, v65, (const char **)&v87, 0);
              (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), AsInstruction, v83, *(void *)(a2 + 48), *(void *)(a2 + 56));
              uint64_t v66 = *(unsigned int *)(a2 + 8);
              if (v66)
              {
                uint64_t v67 = *(void *)a2;
                uint64_t v68 = v67 + 16 * v66;
                do
                {
                  llvm::Instruction::setMetadata(AsInstruction, *(_DWORD *)v67, *(llvm::MDNode **)(v67 + 8));
                  v67 += 16;
                }
                while (v67 != v68);
              }
            }
          }
          return AsInstruction;
        }
      }
    }
    unsigned int v17 = *(unsigned __int8 *)(v13 + 16);
    if (v13 && v17 == 16)
    {
      uint64_t v18 = *(unsigned int *)(v13 + 32);
      if (v18 >= 0x41)
      {
        int v75 = 0;
        int64_t v76 = (unint64_t)(v18 + 63) >> 6;
        do
        {
          BOOL v61 = v76-- < 1;
          if (v61) {
            break;
          }
          unint64_t v77 = *(void *)(*(void *)(v13 + 24) + 8 * v76);
          v75 += __clz(v77);
        }
        while (!v77);
        int v78 = v18 | 0xFFFFFFC0;
        if ((v18 & 0x3F) == 0) {
          int v78 = 0;
        }
        if (v75 + v78 != v18) {
          goto LABEL_14;
        }
      }
      else if (*(void *)(v13 + 24))
      {
LABEL_14:
        uint64_t v13 = sub_1CCB5A764(a1, (uint64_t *)a2, v12, v13);
        goto LABEL_85;
      }
    }
    else if (v13 && v17 == 17)
    {
      if ((sub_1CB844168(v13, 0.0) & 1) == 0) {
        goto LABEL_14;
      }
    }
    else if (v17 > 0x14 || ((1 << v17) & 0x1C2000) == 0)
    {
      goto LABEL_14;
    }
    uint64_t v13 = v12;
    goto LABEL_85;
  }
  if (a3 && v8 == 5)
  {
    AsInstructiouint64_t n = (llvm::Value *)llvm::ConstantExpr::getAsInstruction((llvm::ConstantExpr *)a3, 0);
    uint64_t v22 = (void *)*a4;
    char v21 = a4 + 1;
    __int16 v20 = v22;
    if (v22 != v21)
    {
      do
      {
        uint64_t v23 = *((unsigned int *)v20 + 8);
        uint64_t v24 = sub_1CCB5B2A8(a1, a2, *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32 * v23), v20 + 5);
        int v25 = *((_DWORD *)AsInstruction + 5);
        if ((v25 & 0x40000000) != 0) {
          unint64_t v26 = (char *)*((void *)AsInstruction - 1);
        }
        else {
          unint64_t v26 = (char *)AsInstruction - 32 * (v25 & 0x7FFFFFF);
        }
        unsigned int v27 = &v26[32 * v23];
        if (*(void *)v27)
        {
          **((void **)v27 + 2) = *((void *)v27 + 1);
          uint64_t v28 = *((void *)v27 + 1);
          if (v28) {
            *(void *)(v28 + 16) = *((void *)v27 + 2);
          }
        }
        *(void *)unsigned int v27 = v24;
        if (v24)
        {
          uint64_t v31 = *(void *)(v24 + 8);
          uint64_t v29 = (char **)(v24 + 8);
          uint64_t v30 = v31;
          uint64_t v32 = &v26[32 * v23];
          *((void *)v32 + 1) = v31;
          if (v31) {
            *(void *)(v30 + 16) = v32 + 8;
          }
          *((void *)v32 + 2) = v29;
          *uint64_t v29 = v27;
        }
        int v33 = (void *)v20[1];
        if (v33)
        {
          do
          {
            BOOL v34 = v33;
            int v33 = (void *)*v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            BOOL v34 = (void *)v20[2];
            BOOL v15 = *v34 == (void)v20;
            __int16 v20 = v34;
          }
          while (!v15);
        }
        __int16 v20 = v34;
      }
      while (v34 != v21);
    }
    __int16 v90 = 257;
    (*(void (**)(void, llvm::Value *, void **, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), AsInstruction, &v87, *(void *)(a2 + 48), *(void *)(a2 + 56));
    uint64_t v57 = *(unsigned int *)(a2 + 8);
    if (v57)
    {
      uint64_t v58 = *(void *)a2;
      uint64_t v59 = v58 + 16 * v57;
      do
      {
        llvm::Instruction::setMetadata(AsInstruction, *(_DWORD *)v58, *(llvm::MDNode **)(v58 + 8));
        v58 += 16;
      }
      while (v58 != v59);
    }
  }
  else
  {
    uint64_t v35 = *(_DWORD *)(a3 + 20) & 0x7FFFFFF;
    uint64_t v36 = (llvm::Type *)v89;
    int v87 = v89;
    uint64_t v88 = 0x1000000000;
    if (v35 >= 0x11) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v35)
    {
      uint64_t v37 = v89;
      uint64_t v38 = -32 * v35;
      do
      {
        *v37++ = *(void *)(a3 + v38);
        v38 += 32;
      }
      while (v38);
    }
    LODWORD(v88) = v35;
    uint64_t v40 = a4 + 1;
    uint64_t v39 = (void *)*a4;
    if ((void *)*a4 != a4 + 1)
    {
      do
      {
        uint64_t v41 = *((unsigned int *)v39 + 8);
        *((void *)v87 + v41) = sub_1CCB5B2A8(a1, a2, *((void *)v87 + v41), v39 + 5);
        uint64_t v42 = (void *)v39[1];
        if (v42)
        {
          do
          {
            uint64_t v43 = v42;
            uint64_t v42 = (void *)*v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            uint64_t v43 = (void *)v39[2];
            BOOL v15 = *v43 == (void)v39;
            uint64_t v39 = v43;
          }
          while (!v15);
        }
        uint64_t v39 = v43;
      }
      while (v43 != v40);
    }
    int v44 = *(_DWORD *)(*(void *)a3 + 8);
    AsInstructiouint64_t n = llvm::UndefValue::get(*(llvm::UndefValue **)a3, v36);
    unsigned int v82 = 0;
    int v46 = *(_DWORD *)(a3 + 20) & 0x7FFFFFF;
    if (v46)
    {
      unsigned int v47 = 0;
      int v48 = v44 & 0xFE;
      do
      {
        __int16 v49 = (unsigned __int8 *)*((void *)v87 + v47);
        if (v48 == 18)
        {
          uint64_t v50 = v47;
          __int16 v84 = 257;
          uint64_t v51 = **(void **)(a2 + 64);
          int v52 = *(llvm::ConstantInt **)(v51 + 1984);
          unint64_t v53 = *(unsigned int *)(v51 + 1992);
          unsigned int v86 = v53 >> 8;
          if (v53 >> 8 > 0x40) {
            operator new[]();
          }
          if (v53 <= 0xFF) {
            unint64_t v54 = 0;
          }
          else {
            unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v53) + 63);
          }
          unint64_t v85 = v54 & v50;
          int v55 = (unsigned __int8 *)llvm::ConstantInt::get(v52, (llvm::LLVMContext *)&v85, v45);
          if (v86 >= 0x41 && v85) {
            MEMORY[0x1D25D9CB0](v85, 0x1000C8000313F17);
          }
          uint64_t v56 = sub_1CB84478C(a2, (unsigned __int8 *)AsInstruction, v49, v55, (uint64_t)v83);
        }
        else
        {
          __int16 v84 = 257;
          uint64_t v56 = sub_1CC2411F8(a2, (uint64_t)AsInstruction, (uint64_t)v49, &v82, 1, (uint64_t)v83);
        }
        AsInstructiouint64_t n = v56;
        unsigned int v47 = v82 + 1;
        unsigned int v82 = v47;
      }
      while (v47 != v46);
    }
    if (v87 != v89) {
      free(v87);
    }
  }
  return AsInstruction;
}

void llvm::ValueProfileCollector::ValueProfileCollector()
{
}

{
  operator new();
}

void llvm::ValueProfileCollector::~ValueProfileCollector(llvm::ValueProfileCollector *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    MEMORY[0x1D25D9CE0](v2, 0x20C40DC1BFBCFLL);
  }
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    MEMORY[0x1D25D9CE0](v2, 0x20C40DC1BFBCFLL);
  }
}

uint64_t sub_1CCB5BAB4(uint64_t a1)
{
  bzero((void *)(a1 + 8), 0x8D0uLL);
  if (byte_1EBCECD08) {
    BOOL v3 = byte_1EBCECDC8 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    __n128 v4 = (llvm::raw_ostream *)llvm::errs(v2);
    uint64_t v5 = (void *)*((void *)v4 + 4);
    if (*((void *)v4 + 3) - (void)v5 > 0x6EuLL)
    {
      qmemcpy(v5, "warning: Option -tsan-compound-read-before-write has no effect when -tsan-instrument-read-before-write is set.\n", 111);
      *((void *)v4 + 4) += 111;
    }
    else
    {
      llvm::raw_ostream::write(v4, "warning: Option -tsan-compound-read-before-write has no effect when -tsan-instrument-read-before-write is set.\n", 0x6FuLL);
    }
  }
  return a1;
}

uint64_t sub_1CCB5BB5C(uint64_t *a1, uint64_t **a2, void *a3)
{
  BOOL v3 = a1;
  v566[1] = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)**a2;
  uint64_t v5 = *(void *)(v4 + 152);
  uint64_t v6 = *(unsigned int *)(v4 + 168);
  if (!v6) {
    goto LABEL_8;
  }
  LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v8 = (uint64_t ***)(v5 + 16 * v7);
  int v9 = *v8;
  if (*v8 != a2)
  {
    int v10 = 1;
    while (v9 != (uint64_t **)-4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v6 - 1);
      int v9 = *(uint64_t ***)(v5 + 16 * v7);
      if (v9 == a2)
      {
        int v8 = (uint64_t ***)(v5 + 16 * v7);
        goto LABEL_9;
      }
    }
LABEL_8:
    int v8 = (uint64_t ***)(v5 + 16 * v6);
  }
LABEL_9:
  uint64_t v12 = v8[1];
  if (*v12 == (uint64_t *)16)
  {
    unsigned int v14 = v12[2];
    uint64_t v13 = v12[3];
    if (v14 == (uint64_t *)0x646F6D2E6E617374 && v13 == (uint64_t *)0x726F74635F656C75) {
      goto LABEL_17;
    }
  }
LABEL_14:
  uint64_t v16 = a2[14];
  if (v16 && ((*((unsigned char *)v16 + 14) & 2) != 0 || *((char *)v16 + 12) < 0))
  {
LABEL_17:
    LOBYTE(v17) = 0;
    return v17 & 1;
  }
  uint64_t v18 = (uint64_t)a2[5];
  *a1 = llvm::IntegerType::get(*(llvm::IntegerType **)v18, (llvm::LLVMContext *)*(unsigned int *)(*(void *)(v18 + 504) + 4));
  uint64_t v19 = *(llvm::IntegerType **)v18;
  v533 = v535;
  uint64_t v534 = 0x200000000;
  v539 = v19;
  int v540 = &v548;
  uint64_t v541 = v549;
  uint64_t v542 = 0;
  int v543 = 0;
  __int16 v544 = 512;
  char v545 = 7;
  uint64_t v538 = 0;
  int v537 = 0;
  uint64_t v547 = 0;
  uint64_t v546 = 0;
  v548 = &unk_1F2616E88;
  v549[0] = &unk_1F2617008;
  uint64_t v497 = 0;
  __int16 v20 = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v497, *(uint64_t **)v18, -1, 37);
  uint64_t v497 = v20;
  char v21 = (uint64_t **)(*(void *)v539 + 1576);
  unint64_t v22 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
  v3[1] = (uint64_t)sub_1CD57B9C0(v18, "__tsan_func_entry", (const char *)0x11, (uint64_t)v20, v21, v22);
  v3[2] = v23;
  v3[3] = (uint64_t)sub_1CD577C30(v18, "__tsan_func_exit", (const char *)0x10, (uint64_t)v497, (uint64_t **)(*(void *)v539 + 1576));
  v3[4] = v24;
  v3[5] = (uint64_t)sub_1CD577C30(v18, "__tsan_ignore_thread_begin", (const char *)0x1A, (uint64_t)v497, (uint64_t **)(*(void *)v539 + 1576));
  v3[6] = v25;
  uint64_t v26 = 0;
  v3[7] = (uint64_t)sub_1CD577C30(v18, "__tsan_ignore_thread_end", (const char *)0x18, (uint64_t)v497, (uint64_t **)(*(void *)v539 + 1576));
  v3[8] = v27;
  uint64_t v487 = *(void *)v539 + 1960;
  v485 = v3;
  do
  {
    uint64_t v28 = 0;
    unint64_t v29 = (1 << v26);
    do
    {
      v500[v28-- - 4] = (v29 % 0xA) | 0x30;
      BOOL v30 = v29 > 9;
      v29 /= 0xAuLL;
    }
    while (v30);
    sub_1CC028D80(&v495, &v500[v28 - 3], (char *)&v499 + 13, -v28);
    uint64_t v31 = (char *)&v499 + 13;
    if (v26 >= 0x1D)
    {
      BYTE12(v499) = 48;
      uint64_t v31 = (char *)&v499 + 12;
    }
    unint64_t v32 = (8 << v26);
    int v33 = (unsigned char *)((char *)&v499 + 13 - v31);
    do
    {
      *--uint64_t v31 = (v32 % 0xA) | 0x30;
      ++v33;
      BOOL v30 = v32 > 9;
      v32 /= 0xAuLL;
    }
    while (v30);
    sub_1CC028D80(&v493, v31, (char *)&v499 + 13, (unint64_t)v33);
    std::operator+<char>();
    char v34 = HIBYTE(v499);
    if (v499 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v499 >= 0) {
      size_t v36 = HIBYTE(v499) & 0x7F;
    }
    else {
      size_t v36 = v499;
    }
    int v530 = v532;
    long long v531 = xmmword_1CDC7F9D0;
    if (v36 >= 0x21) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v37 = 0;
    if (v36)
    {
      memcpy(v532, p_p, v36);
      uint64_t v37 = v531;
      char v34 = HIBYTE(v499);
    }
    uint64_t v38 = (const char *)(v37 + v36);
    *(void *)&long long v531 = v38;
    if (v34 < 0)
    {
      operator delete(__p);
      uint64_t v38 = (const char *)v531;
    }
    uint64_t v39 = (unsigned __int8 *)v530;
    uint64_t v40 = (uint64_t)v497;
    uint64_t v41 = (uint64_t **)(*(void *)v539 + 1576);
    unint64_t v42 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
    uint64_t v43 = sub_1CD57B9C0(v18, v39, v38, v40, v41, v42);
    int v44 = &v3[2 * v26];
    v44[9] = (uint64_t)v43;
    v44[10] = v45;
    std::operator+<char>();
    char v46 = HIBYTE(v499);
    if (v499 >= 0) {
      unsigned int v47 = &__p;
    }
    else {
      unsigned int v47 = __p;
    }
    if (v499 >= 0) {
      size_t v48 = HIBYTE(v499) & 0x7F;
    }
    else {
      size_t v48 = v499;
    }
    uint64_t v527 = v529;
    long long v528 = xmmword_1CDC7F9D0;
    if (v48 >= 0x21) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v49 = 0;
    if (v48)
    {
      memcpy(v529, v47, v48);
      uint64_t v49 = v528;
      char v46 = HIBYTE(v499);
    }
    uint64_t v50 = (const char *)(v49 + v48);
    *(void *)&long long v528 = v50;
    if (v46 < 0)
    {
      operator delete(__p);
      uint64_t v50 = (const char *)v528;
    }
    uint64_t v51 = (unsigned __int8 *)v527;
    uint64_t v52 = (uint64_t)v497;
    unint64_t v53 = (uint64_t **)(*(void *)v539 + 1576);
    unint64_t v54 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
    int v55 = sub_1CD57B9C0(v18, v51, v50, v52, v53, v54);
    uint64_t v56 = &v3[2 * v26];
    v56[19] = (uint64_t)v55;
    v56[20] = v57;
    std::operator+<char>();
    char v58 = HIBYTE(v551);
    if (v551 >= 0) {
      uint64_t v59 = &v550;
    }
    else {
      uint64_t v59 = (void ***)v550;
    }
    if (v551 >= 0) {
      size_t v60 = HIBYTE(v551) & 0x7F;
    }
    else {
      size_t v60 = v551;
    }
    long long __p = v500;
    long long v499 = xmmword_1CD96DBD0;
    if (v60 >= 0x41) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v61 = 0;
    if (v60)
    {
      memcpy(v500, v59, v60);
      uint64_t v61 = v499;
      char v58 = HIBYTE(v551);
    }
    int v62 = (const char *)(v61 + v60);
    *(void *)&long long v499 = v62;
    if (v58 < 0)
    {
      operator delete(v550);
      int v62 = (const char *)v499;
    }
    uint64_t v64 = (uint64_t)v497;
    __int16 v63 = (unsigned __int8 *)__p;
    uint64_t v65 = (uint64_t **)(*(void *)v539 + 1576);
    unint64_t v66 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
    uint64_t v67 = sub_1CD57B9C0(v18, v63, v62, v64, v65, v66);
    uint64_t v68 = &v3[2 * v26];
    v68[29] = (uint64_t)v67;
    v68[30] = v69;
    std::operator+<char>();
    char v70 = HIBYTE(v525);
    if (v525 >= 0) {
      int v71 = &v524;
    }
    else {
      int v71 = v524;
    }
    if (v525 >= 0) {
      size_t v72 = HIBYTE(v525) & 0x7F;
    }
    else {
      size_t v72 = v525;
    }
    v550 = (void **)&v552;
    long long v551 = xmmword_1CD96DBD0;
    if (v72 >= 0x41) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v73 = 0;
    if (v72)
    {
      memcpy(&v552, v71, v72);
      uint64_t v73 = v551;
      char v70 = HIBYTE(v525);
    }
    int v74 = (const char *)(v73 + v72);
    *(void *)&long long v551 = v74;
    if (v70 < 0)
    {
      operator delete(v524);
      int v74 = (const char *)v551;
    }
    int v75 = (unsigned __int8 *)v550;
    uint64_t v76 = (uint64_t)v497;
    unint64_t v77 = (uint64_t **)(*(void *)v539 + 1576);
    unint64_t v78 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
    uint64_t v79 = sub_1CD57B9C0(v18, v75, v74, v76, v77, v78);
    uint64_t v80 = &v3[2 * v26];
    v80[39] = (uint64_t)v79;
    v80[40] = v81;
    std::operator+<char>();
    char v82 = HIBYTE(v522);
    if (v522 >= 0) {
      char v83 = &v521;
    }
    else {
      char v83 = v521;
    }
    if (v522 >= 0) {
      size_t v84 = HIBYTE(v522) & 0x7F;
    }
    else {
      size_t v84 = v522;
    }
    uint64_t v524 = v526;
    long long v525 = xmmword_1CD96DBD0;
    if (v84 >= 0x41) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v85 = 0;
    if (v84)
    {
      memcpy(v526, v83, v84);
      uint64_t v85 = v525;
      char v82 = HIBYTE(v522);
    }
    unsigned int v86 = (const char *)(v85 + v84);
    *(void *)&long long v525 = v86;
    if (v82 < 0)
    {
      operator delete(v521);
      unsigned int v86 = (const char *)v525;
    }
    int v87 = (unsigned __int8 *)v524;
    uint64_t v88 = (uint64_t)v497;
    uint64_t v89 = (uint64_t **)(*(void *)v539 + 1576);
    unint64_t v90 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
    uint64_t v91 = sub_1CD57B9C0(v18, v87, v86, v88, v89, v90);
    uint64_t v92 = &v3[2 * v26];
    v92[49] = (uint64_t)v91;
    v92[50] = v93;
    std::operator+<char>();
    char v94 = HIBYTE(v519);
    if (v519 >= 0) {
      int64_t v95 = &v518;
    }
    else {
      int64_t v95 = v518;
    }
    if (v519 >= 0) {
      size_t v96 = HIBYTE(v519) & 0x7F;
    }
    else {
      size_t v96 = v519;
    }
    unint64_t v521 = v523;
    long long v522 = xmmword_1CD96DBD0;
    if (v96 >= 0x41) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v97 = 0;
    if (v96)
    {
      memcpy(v523, v95, v96);
      uint64_t v97 = v522;
      char v94 = HIBYTE(v519);
    }
    unint64_t v98 = (const char *)(v97 + v96);
    *(void *)&long long v522 = v98;
    if (v94 < 0)
    {
      operator delete(v518);
      unint64_t v98 = (const char *)v522;
    }
    uint64_t v99 = (unsigned __int8 *)v521;
    uint64_t v100 = (uint64_t)v497;
    int v101 = (uint64_t **)(*(void *)v539 + 1576);
    unint64_t v102 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
    unint64_t v103 = sub_1CD57B9C0(v18, v99, v98, v100, v101, v102);
    int v104 = &v3[2 * v26];
    v104[59] = (uint64_t)v103;
    v104[60] = v105;
    std::operator+<char>();
    char v106 = HIBYTE(v516[2]);
    if (SHIBYTE(v516[2]) >= 0) {
      int v107 = v516;
    }
    else {
      int v107 = (void **)v516[0];
    }
    if (SHIBYTE(v516[2]) >= 0) {
      size_t v108 = HIBYTE(v516[2]) & 0x7F;
    }
    else {
      size_t v108 = (size_t)v516[1];
    }
    uint64_t v518 = v520;
    long long v519 = xmmword_1CD96DBD0;
    if (v108 >= 0x41) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v109 = 0;
    if (v108)
    {
      memcpy(v520, v107, v108);
      uint64_t v109 = v519;
      char v106 = HIBYTE(v516[2]);
    }
    int v110 = (const char *)(v109 + v108);
    *(void *)&long long v519 = v110;
    if (v106 < 0)
    {
      operator delete(v516[0]);
      int v110 = (const char *)v519;
    }
    unint64_t v111 = (unsigned __int8 *)v518;
    uint64_t v112 = (uint64_t)v497;
    uint64_t v113 = (uint64_t **)(*(void *)v539 + 1576);
    unint64_t v114 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
    int64_t v115 = sub_1CD57B9C0(v18, v111, v110, v112, v113, v114);
    unint64_t v116 = &v3[2 * v26];
    v116[69] = (uint64_t)v115;
    v116[70] = v117;
    std::operator+<char>();
    char v118 = HIBYTE(v513);
    if (v513 >= 0) {
      int v119 = &v512;
    }
    else {
      int v119 = v512;
    }
    if (v513 >= 0) {
      size_t v120 = HIBYTE(v513) & 0x7F;
    }
    else {
      size_t v120 = v513;
    }
    v516[0] = &v516[3];
    *(_OWORD *)&v516[1] = xmmword_1CD96DBD0;
    if (v120 >= 0x41) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    int v121 = 0;
    if (v120)
    {
      memcpy(&v516[3], v119, v120);
      int v121 = (char *)v516[1];
      char v118 = HIBYTE(v513);
    }
    int v122 = &v121[v120];
    v516[1] = v122;
    if (v118 < 0)
    {
      operator delete(v512);
      int v122 = (char *)v516[1];
    }
    uint64_t v123 = (unsigned __int8 *)v516[0];
    uint64_t v124 = (uint64_t)v497;
    unint64_t v125 = (uint64_t **)(*(void *)v539 + 1576);
    unint64_t v126 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
    int v127 = sub_1CD57B9C0(v18, v123, v122, v124, v125, v126);
    int v128 = &v3[2 * v26];
    v128[79] = (uint64_t)v127;
    v128[80] = v129;
    std::operator+<char>();
    char v130 = HIBYTE(v510);
    if (v510 >= 0) {
      int v131 = &v509;
    }
    else {
      int v131 = v509;
    }
    if (v510 >= 0) {
      size_t v132 = HIBYTE(v510) & 0x7F;
    }
    else {
      size_t v132 = v510;
    }
    uint64_t v512 = &v514;
    long long v513 = xmmword_1CD96DBD0;
    if (v132 >= 0x41) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v133 = 0;
    if (v132)
    {
      memcpy(&v514, v131, v132);
      uint64_t v133 = v513;
      char v130 = HIBYTE(v510);
    }
    size_t v134 = (const char *)(v133 + v132);
    *(void *)&long long v513 = v134;
    if (v130 < 0)
    {
      operator delete(v509);
      size_t v134 = (const char *)v513;
    }
    int v135 = (unsigned __int8 *)v512;
    uint64_t v136 = (uint64_t)v497;
    unint64_t v137 = (uint64_t **)(*(void *)v539 + 1576);
    unint64_t v138 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
    char v139 = sub_1CD57B9C0(v18, v135, v134, v136, v137, v138);
    int v140 = &v3[2 * v26];
    v140[89] = (uint64_t)v139;
    v140[90] = v141;
    std::operator+<char>();
    char v142 = HIBYTE(v507);
    if (v507 >= 0) {
      int v143 = &v506;
    }
    else {
      int v143 = v506;
    }
    if (v507 >= 0) {
      size_t v144 = HIBYTE(v507) & 0x7F;
    }
    else {
      size_t v144 = v507;
    }
    v509 = v511;
    long long v510 = xmmword_1CD96DBD0;
    if (v144 >= 0x41) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v145 = 0;
    if (v144)
    {
      memcpy(v511, v143, v144);
      uint64_t v145 = v510;
      char v142 = HIBYTE(v507);
    }
    int v146 = (const char *)(v145 + v144);
    *(void *)&long long v510 = v146;
    if (v142 < 0)
    {
      operator delete(v506);
      int v146 = (const char *)v510;
    }
    int v147 = (unsigned __int8 *)v509;
    uint64_t v148 = (uint64_t)v497;
    unint64_t v149 = (uint64_t **)(*(void *)v539 + 1576);
    unint64_t v150 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
    uint64_t v151 = sub_1CD57B9C0(v18, v147, v146, v148, v149, v150);
    unsigned int v152 = &v3[2 * v26];
    v152[99] = (uint64_t)v151;
    v152[100] = v153;
    unsigned int v490 = (llvm::PointerType *)llvm::IntegerType::get(*(llvm::IntegerType **)v18, (llvm::LLVMContext *)(8 << v26));
    unint64_t v489 = llvm::PointerType::get(v490, 0);
    std::operator+<char>();
    int v154 = std::string::append(&v501, "_load");
    std::string v504 = *v154;
    v154->__r_.__value_.__r.__words[0] = 0;
    v154->__r_.__value_.__l.__size_ = 0;
    v154->__r_.__value_.__r.__words[2] = 0;
    int v155 = SHIBYTE(v504.__r_.__value_.__r.__words[2]);
    unint64_t v156 = (void *)v504.__r_.__value_.__r.__words[0];
    if ((v504.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v157 = &v504;
    }
    else {
      unint64_t v157 = (std::string *)v504.__r_.__value_.__r.__words[0];
    }
    if ((v504.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = *((unsigned char *)&v504.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      size_t size = v504.__r_.__value_.__l.__size_;
    }
    v506 = v508;
    long long v507 = xmmword_1CDC7F9D0;
    if (size >= 0x21) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v159 = 0;
    if (size)
    {
      memcpy(v508, v157, size);
      uint64_t v159 = v507;
    }
    *(void *)&long long v507 = v159 + size;
    if (v155 < 0) {
      operator delete(v156);
    }
    if (SHIBYTE(v501.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v501.__r_.__value_.__l.__data_);
    }
    v504.__r_.__value_.__r.__words[0] = (std::string::size_type)v497;
    v504.__r_.__value_.__r.__words[0] = llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v504, *(uint64_t **)v18, 2, 67);
    uint64_t v160 = sub_1CD661480(v18, (unsigned __int8 *)v506, (const char *)v507, (uint64_t)v504.__r_.__value_.__l.__data_, (uint64_t **)v490, v489, v487);
    int v161 = &v3[2 * v26];
    v161[109] = (uint64_t)v160;
    v161[110] = v162;
    std::operator+<char>();
    int64_t v163 = std::string::append(&v503, "_store");
    std::string v501 = *v163;
    v163->__r_.__value_.__r.__words[0] = 0;
    v163->__r_.__value_.__l.__size_ = 0;
    v163->__r_.__value_.__r.__words[2] = 0;
    int v164 = SHIBYTE(v501.__r_.__value_.__r.__words[2]);
    unint64_t v165 = (void *)v501.__r_.__value_.__r.__words[0];
    if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v166 = &v501;
    }
    else {
      unsigned int v166 = (std::string *)v501.__r_.__value_.__r.__words[0];
    }
    if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v167 = *((unsigned char *)&v501.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      size_t v167 = v501.__r_.__value_.__l.__size_;
    }
    v504.__r_.__value_.__r.__words[0] = (std::string::size_type)v505;
    *(_OWORD *)&v504.__r_.__value_.__r.__words[1] = xmmword_1CDC7F9D0;
    if (v167 >= 0x21) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    std::string::size_type v168 = 0;
    if (v167)
    {
      memcpy(v505, v166, v167);
      std::string::size_type v168 = v504.__r_.__value_.__l.__size_;
    }
    v504.__r_.__value_.__l.__size_ = v168 + v167;
    if (v164 < 0) {
      operator delete(v165);
    }
    if (SHIBYTE(v503.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v503.__r_.__value_.__l.__data_);
    }
    v501.__r_.__value_.__r.__words[0] = (std::string::size_type)v497;
    v501.__r_.__value_.__r.__words[0] = llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v501, *(uint64_t **)v18, 2, 67);
    v501.__r_.__value_.__r.__words[0] = llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v501, *(uint64_t **)v18, 3, 67);
    int64_t v169 = sub_1CD68E044(v18, (unsigned __int8 *)v504.__r_.__value_.__l.__data_, (const char *)v504.__r_.__value_.__l.__size_, (uint64_t)v501.__r_.__value_.__l.__data_, (uint64_t **)(*(void *)v539 + 1576), v489, (uint64_t)v490, v487);
    uint64_t v170 = 0;
    uint64_t v171 = &v3[2 * v26];
    v171[119] = (uint64_t)v169;
    v171[120] = v172;
    do
    {
      uint64_t v173 = (uint64_t)&v3[10 * v170 + 2 * v26];
      *(void *)(v173 + 1040) = 0;
      *(void *)(v173 + 1032) = 0;
      if (v170 <= 6)
      {
        uint64_t v174 = 0;
        uint64_t v175 = (llvm::PointerType **)(v173 + 1032);
        uint64_t v176 = off_1E684AB98[(int)v170];
        unint64_t v177 = (8 << v26);
        do
        {
          v503.__r_.__value_.__s.__data_[v174-- + 20] = (v177 % 0xA) | 0x30;
          BOOL v30 = v177 > 9;
          v177 /= 0xAuLL;
        }
        while (v30);
        sub_1CC028D80(&v491, &v503.__r_.__value_.__s.__data_[v174 + 21], &v503.__r_.__value_.__s.__data_[21], -v174);
        unint64_t v178 = std::string::insert(&v491, 0, "__tsan_atomic");
        std::string::size_type v179 = v178->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v492.__r_.__value_.__l.__data_ = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
        v492.__r_.__value_.__r.__words[2] = v179;
        v178->__r_.__value_.__l.__size_ = 0;
        v178->__r_.__value_.__r.__words[2] = 0;
        v178->__r_.__value_.__r.__words[0] = 0;
        int v180 = std::string::append(&v492, v176);
        std::string v503 = *v180;
        v180->__r_.__value_.__r.__words[0] = 0;
        v180->__r_.__value_.__l.__size_ = 0;
        v180->__r_.__value_.__r.__words[2] = 0;
        int v181 = SHIBYTE(v503.__r_.__value_.__r.__words[2]);
        unint64_t v182 = (void *)v503.__r_.__value_.__r.__words[0];
        if ((v503.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v183 = &v503;
        }
        else {
          int v183 = (std::string *)v503.__r_.__value_.__r.__words[0];
        }
        if ((v503.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v184 = *((unsigned char *)&v503.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          size_t v184 = v503.__r_.__value_.__l.__size_;
        }
        v501.__r_.__value_.__r.__words[0] = (std::string::size_type)v502;
        *(_OWORD *)&v501.__r_.__value_.__r.__words[1] = xmmword_1CDC7F9D0;
        if (v184 >= 0x21) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        std::string::size_type v185 = 0;
        if (v184)
        {
          memcpy(v502, v183, v184);
          std::string::size_type v185 = v501.__r_.__value_.__l.__size_;
        }
        v501.__r_.__value_.__l.__size_ = v185 + v184;
        if (v181 < 0) {
          operator delete(v182);
        }
        if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v492.__r_.__value_.__l.__data_);
        }
        BOOL v3 = v485;
        if (SHIBYTE(v491.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v491.__r_.__value_.__l.__data_);
        }
        v503.__r_.__value_.__r.__words[0] = (std::string::size_type)v497;
        v503.__r_.__value_.__r.__words[0] = llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v503, *(uint64_t **)v18, 2, 67);
        v503.__r_.__value_.__r.__words[0] = llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v503, *(uint64_t **)v18, 3, 67);
        *uint64_t v175 = sub_1CD68E044(v18, (unsigned __int8 *)v501.__r_.__value_.__l.__data_, (const char *)v501.__r_.__value_.__l.__size_, (uint64_t)v503.__r_.__value_.__l.__data_, (uint64_t **)v490, v489, (uint64_t)v490, v487);
        v175[1] = v186;
        if (v501.__r_.__value_.__l.__data_ != v502) {
          free(v501.__r_.__value_.__l.__data_);
        }
      }
      ++v170;
    }
    while (v170 != 13);
    std::operator+<char>();
    uint64_t v187 = std::string::append(&v492, "_compare_exchange_val");
    std::string v503 = *v187;
    v187->__r_.__value_.__r.__words[0] = 0;
    v187->__r_.__value_.__l.__size_ = 0;
    v187->__r_.__value_.__r.__words[2] = 0;
    int v188 = SHIBYTE(v503.__r_.__value_.__r.__words[2]);
    uint64_t v189 = (void *)v503.__r_.__value_.__r.__words[0];
    if ((v503.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v190 = &v503;
    }
    else {
      int v190 = (std::string *)v503.__r_.__value_.__r.__words[0];
    }
    if ((v503.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v191 = *((unsigned char *)&v503.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      size_t v191 = v503.__r_.__value_.__l.__size_;
    }
    v501.__r_.__value_.__r.__words[0] = (std::string::size_type)v502;
    *(_OWORD *)&v501.__r_.__value_.__r.__words[1] = xmmword_1CDC7F9D0;
    if (v191 >= 0x21) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    std::string::size_type v192 = 0;
    if (v191)
    {
      memcpy(v502, v190, v191);
      std::string::size_type v192 = v501.__r_.__value_.__l.__size_;
    }
    v501.__r_.__value_.__l.__size_ = v192 + v191;
    if (v188 < 0) {
      operator delete(v189);
    }
    if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v492.__r_.__value_.__l.__data_);
    }
    v503.__r_.__value_.__r.__words[0] = (std::string::size_type)v497;
    v503.__r_.__value_.__r.__words[0] = llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v503, *(uint64_t **)v18, 2, 67);
    v503.__r_.__value_.__r.__words[0] = llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v503, *(uint64_t **)v18, 3, 67);
    v503.__r_.__value_.__r.__words[0] = llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v503, *(uint64_t **)v18, 4, 67);
    v503.__r_.__value_.__r.__words[0] = llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v503, *(uint64_t **)v18, 5, 67);
    int v193 = sub_1CD699A94(v18, (unsigned __int8 *)v501.__r_.__value_.__l.__data_, (const char *)v501.__r_.__value_.__l.__size_, (uint64_t)v503.__r_.__value_.__l.__data_, (uint64_t **)v490, v489, (uint64_t)v490, (uint64_t)v490, v487, v487);
    unint64_t v194 = &v3[2 * v26];
    v194[259] = (uint64_t)v193;
    v194[260] = v195;
    if (v501.__r_.__value_.__l.__data_ != v502) {
      free(v501.__r_.__value_.__l.__data_);
    }
    if (v504.__r_.__value_.__l.__data_ != v505) {
      free(v504.__r_.__value_.__l.__data_);
    }
    if (v506 != v508) {
      free(v506);
    }
    if (v509 != v511) {
      free(v509);
    }
    if (v512 != &v514) {
      free(v512);
    }
    if (v516[0] != &v516[3]) {
      free(v516[0]);
    }
    if (v518 != v520) {
      free(v518);
    }
    if (v521 != v523) {
      free(v521);
    }
    if (v524 != v526) {
      free(v524);
    }
    if (v550 != (void **)&v552) {
      free(v550);
    }
    if (__p != v500) {
      free(__p);
    }
    if (v527 != v529) {
      free(v527);
    }
    if (v530 != v532) {
      free(v530);
    }
    if (v494 < 0) {
      operator delete(v493);
    }
    if (v496 < 0) {
      operator delete(v495);
    }
    ++v26;
  }
  while (v26 != 5);
  uint64_t v196 = (uint64_t)v497;
  uint64_t v197 = (uint64_t **)(*(void *)v539 + 1576);
  unint64_t v198 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
  unint64_t v199 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
  v3[273] = (uint64_t)sub_1CD661480(v18, "__tsan_vptr_update", (const char *)0x12, v196, v197, v198, v199);
  v3[274] = v200;
  uint64_t v201 = (uint64_t)v497;
  int64_t v202 = (uint64_t **)(*(void *)v539 + 1576);
  unint64_t v203 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
  v3[275] = (uint64_t)sub_1CD57B9C0(v18, "__tsan_vptr_read", (const char *)0x10, v201, v202, v203);
  v3[276] = v204;
  long long __p = v497;
  long long __p = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)&__p, *(uint64_t **)v18, 1, 67);
  v3[269] = (uint64_t)sub_1CD57B9C0(v18, "__tsan_atomic_thread_fence", (const char *)0x1A, (uint64_t)__p, (uint64_t **)(*(void *)v539 + 1576), v487);
  v3[270] = v205;
  long long __p = v497;
  long long __p = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)&__p, *(uint64_t **)v18, 1, 67);
  v3[271] = (uint64_t)sub_1CD57B9C0(v18, "__tsan_atomic_signal_fence", (const char *)0x1A, (uint64_t)__p, (uint64_t **)(*(void *)v539 + 1576), v487);
  v3[272] = v206;
  uint64_t v207 = (uint64_t)v497;
  BOOL v208 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
  unint64_t v209 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
  unint64_t v210 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
  v3[277] = (uint64_t)sub_1CD68E044(v18, "memmove", (const char *)7, v207, v208, v209, v210, *v3);
  v3[278] = v211;
  uint64_t v212 = (uint64_t)v497;
  uint64_t v213 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
  unint64_t v214 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
  unint64_t v215 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
  v3[279] = (uint64_t)sub_1CD68E044(v18, "memcpy", (const char *)6, v212, v213, v214, v215, *v3);
  v3[280] = v216;
  uint64_t v217 = (uint64_t)v497;
  int v218 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
  unint64_t v219 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
  v3[281] = (uint64_t)sub_1CD68E044(v18, "memset", (const char *)6, v217, v218, v219, *(void *)v539 + 1960, *v3);
  v3[282] = v220;
  if (v533 != v535) {
    free(v533);
  }
  long long __p = (char *)&v499 + 8;
  *(void *)&long long v499 = 0x800000000;
  uint64_t v524 = (char *)&v525 + 8;
  *(void *)&long long v525 = 0x800000000;
  unint64_t v521 = (char *)&v522 + 8;
  *(void *)&long long v522 = 0x800000000;
  uint64_t v518 = (char *)&v519 + 8;
  *(void *)&long long v519 = 0x800000000;
  unsigned int v221 = a2[14];
  if (v221) {
    int v484 = (*((unsigned __int8 *)v221 + 18) >> 6) & 1;
  }
  else {
    int v484 = 0;
  }
  unsigned int v486 = (llvm::LLVMContext *)(a2[5] + 34);
  uint64_t v222 = a2[10];
  if (v222 == (uint64_t *)(a2 + 9))
  {
    int v223 = 0;
    goto LABEL_285;
  }
  int v223 = 0;
  do
  {
    int64_t v224 = v222 - 3;
    if (!v222) {
      int64_t v224 = 0;
    }
    unint64_t v225 = v224 + 5;
    for (uint64_t i = v224[6]; (uint64_t *)i != v225; uint64_t i = *(void *)(i + 8))
    {
      if (i) {
        int v227 = (unsigned __int8 *)(i - 24);
      }
      else {
        int v227 = 0;
      }
      unsigned __int16 v228 = sub_1CD699B74(v227);
      if (v228 > 0xFFu)
      {
        if ((_BYTE)v228 || (int v229 = v227[16], (v229 & 0xFE) != 0x3C))
        {
          if (v522 >= (unint64_t)DWORD1(v522)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v521 + v522) = v227;
          LODWORD(v522) = v522 + 1;
          continue;
        }
      }
      else
      {
        int v229 = v227[16];
      }
      if ((v229 - 60) >= 2)
      {
        if (v229 == 84 && (v230 = sub_1CBF63B28((uint64_t)v227), int v229 = v227[16], !v230))
        {
          if (i && v229 == 84) {
            llvm::maybeMarkSanitizerLibraryCallNoBuiltin((uint64_t)v227, a3);
          }
        }
        else if (v229 != 33)
        {
          continue;
        }
        if (sub_1CBFB3AB0((uint64_t)v227))
        {
          if (v519 >= (unint64_t)DWORD1(v519)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v518 + v519) = v227;
          LODWORD(v519) = v519 + 1;
        }
        sub_1CCB5F8F0((uint64_t *)&v524, (uint64_t)&__p);
        int v223 = 1;
      }
      else
      {
        if (v525 >= (unint64_t)DWORD1(v525)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v524 + v525) = v227;
        LODWORD(v525) = v525 + 1;
      }
    }
    sub_1CCB5F8F0((uint64_t *)&v524, (uint64_t)&__p);
    uint64_t v222 = (uint64_t *)v222[1];
  }
  while (v222 != (uint64_t *)(a2 + 9));
LABEL_285:
  char v231 = v484;
  if (!byte_1EBCEC888) {
    char v231 = 0;
  }
  int v480 = v223;
  if (v231)
  {
    uint64_t v232 = (uint64_t)v486;
    int v17 = 0;
    if (v499)
    {
      unint64_t v233 = (llvm::IntegerType ****)__p;
      uint64_t v234 = (llvm::IntegerType ****)((char *)__p + 16 * v499);
      do
      {
        uint64_t v235 = 0;
        int v236 = *v233;
        v539 = ***v233;
        int v540 = &v548;
        uint64_t v541 = v549;
        uint64_t v542 = 0;
        int v543 = 0;
        __int16 v544 = 512;
        char v545 = 7;
        int v537 = 0;
        uint64_t v538 = 0;
        uint64_t v546 = 0;
        uint64_t v547 = 0;
        v548 = &unk_1F2616E88;
        v549[0] = &unk_1F2617008;
        int v537 = v236[5];
        uint64_t v538 = v236 + 3;
        v533 = v535;
        uint64_t v534 = 0x200000000;
        int64_t v237 = v236[6];
        v516[0] = v237;
        if (v237)
        {
          llvm::MetadataTracking::track((uint64_t)v516, (unsigned __int8 *)v237, 2);
          uint64_t v235 = v516[0];
        }
        sub_1CB8461A4((uint64_t)&v533, 0, (uint64_t)v235);
        if (v516[0])
        {
          int v283 = *(unsigned __int8 *)v516[0];
          if ((v283 - 4) > 0x1E)
          {
            if ((v283 - 3) >= 0xFFFFFFFE) {
              int v293 = v516[0];
            }
            else {
              int v293 = 0;
            }
            if ((v283 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v285 = (unint64_t)v293 + 8;
LABEL_355:
              v550 = v516;
              sub_1CC5FA668(v285 + 16, &v550);
              goto LABEL_293;
            }
            if (v283 == 3) {
              *((void *)v516[0] + 1) = 0;
            }
          }
          else if ((*((unsigned char *)v516[0] + 1) & 0x7F) == 2 || *((_DWORD *)v516[0] + 3))
          {
            uint64_t v284 = *((void *)v516[0] + 2);
            if ((v284 & 4) != 0)
            {
              unint64_t v285 = v284 & 0xFFFFFFFFFFFFFFF8;
              if (v285) {
                goto LABEL_355;
              }
            }
          }
        }
LABEL_293:
        unint64_t v238 = *v233;
        int v239 = *((unsigned __int8 *)*v233 + 16);
        uint64_t v240 = (uint64_t)*(*v233 - 4);
        if (!*v233 || v239 != 60) {
          unint64_t v238 = (llvm::IntegerType ***)*(v238 - 8);
        }
        uint64_t v241 = (uint64_t)*v238;
        int v242 = *(unsigned __int8 *)(v240 + 16);
        if (v240 && v242 == 21)
        {
          uint64_t v294 = *(void *)(*(void *)(v240 + 24) + 112);
          if (v294)
          {
            unsigned int v295 = *(_DWORD *)(v240 + 32) + 2;
            if (v295 < *(_DWORD *)(v294 + 8))
            {
              uint64_t v296 = *(void *)(v294 + 8 * v295 + 40);
              if (v296)
              {
                if (*(char *)(v296 + 19) < 0)
                {
LABEL_359:
                  int v256 = 0;
                  goto LABEL_360;
                }
              }
            }
          }
        }
        else if (v240 && v242 == 59 && (*(_WORD *)(v240 + 18) & 0x80) != 0)
        {
          goto LABEL_359;
        }
        unsigned int v243 = sub_1CCB5FFD0(v241, v232);
        if ((v243 & 0x80000000) != 0) {
          goto LABEL_359;
        }
        unsigned int v244 = v243;
        BOOL v245 = sub_1CCB5FE90((uint64_t)*v233);
        if (v239 == 61)
        {
          if (!v245) {
            goto LABEL_309;
          }
          int v247 = (unsigned __int8 *)*(*v233 - 8);
          if ((*(_DWORD *)(*(void *)v247 + 8) & 0xFE) == 0x12)
          {
            int64_t v248 = *(llvm::ConstantInt **)(*(void *)v539 + 1960);
            unsigned int v249 = *(_DWORD *)(*(void *)v539 + 1968);
            LODWORD(v551) = v249 >> 8;
            if (v249 >> 8 >= 0x41) {
              operator new[]();
            }
            v550 = 0;
            unint64_t v250 = (unsigned __int8 *)llvm::ConstantInt::get(v248, (llvm::LLVMContext *)&v550, v246);
            if (v551 >= 0x41 && v550) {
              MEMORY[0x1D25D9CB0](v550, 0x1000C8000313F17);
            }
            __int16 v553 = 257;
            int v247 = (unsigned __int8 *)sub_1CB8445F4((uint64_t)&v533, v247, v250, (uint64_t)&v550);
            int v251 = *(unsigned __int8 *)(*(void *)v247 + 8);
          }
          else
          {
            int v251 = *(_DWORD *)(*(void *)v247 + 8);
          }
          if (v251 == 13)
          {
            unint64_t v280 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
            LOWORD(v517) = 257;
            if (*(void *)v247 != v280)
            {
              if (v247[16] <= 0x14u)
              {
                uint64_t v286 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v540 + 28))(v540, 48, v247, v280);
                int v247 = (unsigned __int8 *)v286;
                if (v286)
                {
                  if (*(unsigned __int8 *)(v286 + 16) >= 0x1Cu)
                  {
                    (*(void (**)(void *, uint64_t, void **, llvm::IntegerType **, llvm::IntegerType ***))(*v541 + 16))(v541, v286, v516, v537, v538);
                    if (v534)
                    {
                      unint64_t v297 = (llvm::MDNode **)v533;
                      unint64_t v298 = (llvm::MDNode **)((char *)v533 + 16 * v534);
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v247, *(_DWORD *)v297, v297[1]);
                        v297 += 2;
                      }
                      while (v297 != v298);
                    }
                  }
                }
              }
              else
              {
                __int16 v553 = 257;
                int v247 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v247, v280, (const char **)&v550, 0);
                (*(void (**)(void *, unsigned __int8 *, void **, llvm::IntegerType **, llvm::IntegerType ***))(*v541 + 16))(v541, v247, v516, v537, v538);
                if (v534)
                {
                  int v281 = (llvm::MDNode **)v533;
                  unint64_t v282 = (llvm::MDNode **)((char *)v533 + 16 * v534);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v247, *(_DWORD *)v281, v281[1]);
                    v281 += 2;
                  }
                  while (v281 != v282);
                }
              }
            }
          }
          int64_t v287 = (uint64_t **)v485[273];
          unint64_t v288 = (uint64_t **)v485[274];
          int v289 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
          __int16 v553 = 257;
          v509 = sub_1CC277FE0((uint64_t)&v533, (llvm::CastInst *)v240, v289, (uint64_t)&v550, v290);
          uint64_t v291 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
          LOWORD(v517) = 257;
          *(void *)&long long v510 = sub_1CC277FE0((uint64_t)&v533, (llvm::CastInst *)v247, v291, (uint64_t)v516, v292);
          __int16 v515 = 257;
          sub_1CB845BAC((uint64_t *)&v533, v287, v288, (uint64_t *)&v509, 2, (uint64_t)&v512, 0);
          int v256 = 1;
          uint64_t v232 = (uint64_t)v486;
        }
        else
        {
          if (!v245)
          {
LABEL_309:
            int v488 = v17;
            unint64_t v257 = v234;
            unint64_t v258 = *((unsigned __int16 *)*v233 + 9);
            BOOL v259 = byte_1EBCECDC8 != 0;
            int v260 = *((_DWORD *)v233 + 2);
            uint64_t v261 = v232;
            BOOL v262 = byte_1EBCECC48 != 0;
            int v264 = sub_1CB83544C(v261, v241);
            if (v263 == 1) {
            uint64_t v265 = 1 << (v258 >> 1);
            }
            int v266 = v262 & v258;
            if ((v265 - 8) >= 0xFFFFFFF9 && v265 % ((v264 + 7) >> 3))
            {
              BOOL v267 = &v485[2 * v244];
              uint64_t v268 = (uint64_t ***)(v267 + 39);
              if (v239 != 61) {
                uint64_t v268 = (uint64_t ***)(v267 + 29);
              }
              uint64_t v269 = (uint64_t ***)(v267 + 79);
              if (v239 != 61) {
                uint64_t v269 = (uint64_t ***)(v267 + 69);
              }
              if (v266) {
                int v270 = v269;
              }
              else {
                int v270 = v268;
              }
              int64_t v271 = (uint64_t ***)(v267 + 99);
            }
            else
            {
              unint64_t v272 = &v485[2 * v244];
              unint64_t v273 = (uint64_t ***)(v272 + 19);
              if (v239 != 61) {
                unint64_t v273 = (uint64_t ***)(v272 + 9);
              }
              int v274 = (uint64_t ***)(v272 + 59);
              if (v239 != 61) {
                int v274 = (uint64_t ***)(v272 + 49);
              }
              if (v266) {
                int v270 = v274;
              }
              else {
                int v270 = v273;
              }
              int64_t v271 = (uint64_t ***)(v272 + 89);
            }
            if ((v259 & v260) != 0) {
              uint64_t v275 = v271;
            }
            else {
              uint64_t v275 = v270;
            }
            uint64_t v232 = (uint64_t)v486;
            uint64_t v234 = v257;
            uint64_t v277 = *v275;
            int v276 = v275[1];
            int v278 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
            __int16 v553 = 257;
            uint64_t v512 = sub_1CC277FE0((uint64_t)&v533, (llvm::CastInst *)v240, v278, (uint64_t)&v550, v279);
            LOWORD(v517) = 257;
            sub_1CB845BAC((uint64_t *)&v533, v277, v276, (uint64_t *)&v512, 1, (uint64_t)v516, 0);
            int v256 = 1;
            int v17 = v488;
            goto LABEL_360;
          }
          int v252 = (uint64_t **)v485[275];
          uint64_t v253 = (uint64_t **)v485[276];
          int64_t v254 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
          __int16 v553 = 257;
          uint64_t v512 = sub_1CC277FE0((uint64_t)&v533, (llvm::CastInst *)v240, v254, (uint64_t)&v550, v255);
          LOWORD(v517) = 257;
          sub_1CB845BAC((uint64_t *)&v533, v252, v253, (uint64_t *)&v512, 1, (uint64_t)v516, 0);
          int v256 = 1;
        }
LABEL_360:
        if (v533 != v535) {
          free(v533);
        }
        v17 |= v256;
        v233 += 2;
      }
      while (v233 != v234);
    }
  }
  else
  {
    int v17 = 0;
    uint64_t v232 = (uint64_t)v486;
  }
  if (byte_1EBCECAC8 && v522)
  {
    int v299 = (llvm::IntegerType ****)v521;
    int64_t v300 = (llvm::IntegerType ****)((char *)v521 + 8 * v522);
    uint64_t v481 = v300;
    do
    {
      unint64_t v301 = 0;
      unint64_t v302 = *v299;
      uint64_t v303 = ***v299;
      v533 = v535;
      uint64_t v534 = 0x200000000;
      v539 = v303;
      int v540 = &v548;
      uint64_t v541 = v549;
      uint64_t v542 = 0;
      int v543 = 0;
      __int16 v544 = 512;
      char v545 = 7;
      int v537 = 0;
      uint64_t v538 = 0;
      uint64_t v546 = 0;
      uint64_t v547 = 0;
      v548 = &unk_1F2616E88;
      v549[0] = &unk_1F2617008;
      int v537 = v302[5];
      uint64_t v538 = v302 + 3;
      uint64_t v304 = v302[6];
      v516[0] = v304;
      if (v304)
      {
        llvm::MetadataTracking::track((uint64_t)v516, (unsigned __int8 *)v304, 2);
        unint64_t v301 = v516[0];
      }
      sub_1CB8461A4((uint64_t)&v533, 0, (uint64_t)v301);
      if (!v516[0]) {
        goto LABEL_383;
      }
      int v375 = *(unsigned __int8 *)v516[0];
      if ((v375 - 4) > 0x1E)
      {
        if ((v375 - 3) >= 0xFFFFFFFE) {
          unint64_t v382 = v516[0];
        }
        else {
          unint64_t v382 = 0;
        }
        if ((v375 - 3) < 0xFFFFFFFE)
        {
          if (v375 == 3) {
            *((void *)v516[0] + 1) = 0;
          }
          goto LABEL_383;
        }
        unint64_t v377 = (unint64_t)v382 + 8;
      }
      else
      {
        if ((*((unsigned char *)v516[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v516[0] + 3)) {
          goto LABEL_383;
        }
        uint64_t v376 = *((void *)v516[0] + 2);
        if ((v376 & 4) == 0) {
          goto LABEL_383;
        }
        unint64_t v377 = v376 & 0xFFFFFFFFFFFFFFF8;
        if (!v377) {
          goto LABEL_383;
        }
      }
      v550 = v516;
      sub_1CC5FA668(v377 + 16, &v550);
LABEL_383:
      int v306 = 1;
      switch(*((unsigned char *)v302 + 16))
      {
        case '<':
          uint64_t v307 = (llvm::CastInst *)*(v302 - 4);
          uint64_t v308 = (uint64_t)*v302;
          unsigned int v309 = sub_1CCB5FFD0((uint64_t)*v302, v232);
          if ((v309 & 0x80000000) != 0)
          {
            int v306 = 0;
          }
          else
          {
            unsigned int v310 = v309;
            int v311 = (llvm::PointerType *)llvm::IntegerType::get(v539, (llvm::LLVMContext *)(8 << v309));
            int64_t v312 = (llvm::Value *)llvm::PointerType::get(v311, 0);
            v516[1] = 0;
            v516[0] = 0;
            __int16 v553 = 257;
            v516[0] = sub_1CC277FE0((uint64_t)&v533, v307, v312, (uint64_t)&v550, v313);
            v516[1] = sub_1CCB60068((uint64_t)v539, (*((unsigned __int16 *)v302 + 9) >> 7) & 7, v314);
            unint64_t v315 = &v485[2 * v310];
            uint64_t v316 = (uint64_t **)v315[109];
            uint64_t v317 = (uint64_t **)v315[110];
            __int16 v553 = 257;
            uint64_t v318 = sub_1CB845BAC((uint64_t *)&v533, v316, v317, (uint64_t *)v516, 2, (uint64_t)&v550, 0);
            __int16 v553 = 257;
            int64_t v319 = sub_1CC240E88((uint64_t)&v533, v318, v308, (uint64_t)&v550);
            int v306 = 1;
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v302, v319, (llvm::Value *)1);
          }
          break;
        case '=':
          unint64_t v325 = (llvm::CastInst *)*(v302 - 4);
          unsigned int v326 = sub_1CCB5FFD0((uint64_t)**(v302 - 8), v232);
          if ((v326 & 0x80000000) == 0)
          {
            unsigned int v327 = v326;
            uint64_t v328 = (llvm::PointerType *)llvm::IntegerType::get(v539, (llvm::LLVMContext *)(8 << v326));
            int v329 = (llvm::Value *)llvm::PointerType::get(v328, 0);
            long long v513 = 0uLL;
            uint64_t v512 = 0;
            __int16 v553 = 257;
            uint64_t v512 = sub_1CC277FE0((uint64_t)&v533, v325, v329, (uint64_t)&v550, v330);
            uint64_t v331 = (uint64_t)*(v302 - 8);
            LOWORD(v517) = 257;
            *(void *)&long long v513 = sub_1CC240E88((uint64_t)&v533, v331, (uint64_t)v328, (uint64_t)v516);
            *((void *)&v513 + 1) = sub_1CCB60068((uint64_t)v539, (*((unsigned __int16 *)v302 + 9) >> 7) & 7, v332);
            unint64_t v333 = &v485[2 * v327];
            uint64_t v334 = (uint64_t **)v333[119];
            char v335 = (uint64_t **)v333[120];
            __int16 v553 = 257;
            uint64_t v336 = (char *)operator new(0xD0uLL);
            uint64_t v337 = 0;
            int v338 = (llvm::Value *)(v336 + 128);
            *((_DWORD *)v336 + 37) = *((_DWORD *)v336 + 37) & 0x38000000 | 4;
            do
            {
              int64_t v339 = &v336[v337];
              *(void *)int64_t v339 = 0;
              *((void *)v339 + 1) = 0;
              *((void *)v339 + 2) = 0;
              *((void *)v339 + 3) = v338;
              v337 += 32;
            }
            while (v337 != 128);
            *((void *)v336 + 16) = *v334[2];
            *((void *)v336 + 17) = 0;
            v336[144] = 84;
            v336[145] = 0;
            *((_WORD *)v336 + 73) = 0;
            *((_DWORD *)v336 + 37) = *((_DWORD *)v336 + 37) & 0xC0000000 | 4;
            *(_OWORD *)(v336 + 152) = 0u;
            *(_OWORD *)(v336 + 168) = 0u;
            *((_DWORD *)v336 + 46) = 0;
            *((void *)v336 + 24) = 0;
            llvm::CallInst::init((uint64_t ***)v336 + 16, v334, v335, (uint64_t *)&v512, 3, 0, 0, (const char **)&v550);
            v550 = (void **)(v302 + 3);
            llvm::ReplaceInstWithInst((uint64_t)(v302[5] + 5), (uint64_t **)&v550, v338);
          }
          goto LABEL_406;
        case '?':
          v516[0] = 0;
          v516[0] = sub_1CCB60068((uint64_t)v539, *((_WORD *)v302 + 9) & 7, v305);
          unint64_t v320 = (uint64_t ***)(v485 + 269);
          if (!*((unsigned char *)v302 + 60)) {
            unint64_t v320 = (uint64_t ***)(v485 + 271);
          }
          int v321 = *v320;
          unint64_t v322 = v320[1];
          __int16 v553 = 257;
          uint64_t v323 = (char *)operator new(0x90uLL);
          *((_DWORD *)v323 + 21) = *((_DWORD *)v323 + 21) & 0x38000000 | 2;
          unint64_t v324 = (llvm::Value *)(v323 + 64);
          *(void *)uint64_t v323 = 0;
          *((void *)v323 + 1) = 0;
          *((void *)v323 + 2) = 0;
          *((void *)v323 + 3) = v323 + 64;
          *((void *)v323 + 4) = 0;
          *((void *)v323 + 5) = 0;
          *((void *)v323 + 6) = 0;
          *((void *)v323 + 7) = v323 + 64;
          *((void *)v323 + 8) = *v321[2];
          *((void *)v323 + 9) = 0;
          v323[80] = 84;
          v323[81] = 0;
          *((_WORD *)v323 + 41) = 0;
          *((_DWORD *)v323 + 21) = 2;
          *((_DWORD *)v323 + 30) = 0;
          *(_OWORD *)(v323 + 104) = 0u;
          *(_OWORD *)(v323 + 88) = 0u;
          *((void *)v323 + 16) = 0;
          llvm::CallInst::init((uint64_t ***)v323 + 8, v321, v322, (uint64_t *)v516, 1, 0, 0, (const char **)&v550);
          v550 = (void **)(v302 + 3);
          llvm::ReplaceInstWithInst((uint64_t)(v302[5] + 5), (uint64_t **)&v550, v324);
        case '@':
          unint64_t v340 = (llvm::CastInst *)*(v302 - 12);
          uint64_t v341 = (uint64_t)**(v302 - 4);
          unsigned int v342 = sub_1CCB5FFD0(v341, v232);
          if ((v342 & 0x80000000) == 0)
          {
            unsigned int v343 = v342;
            uint64_t v344 = (llvm::PointerType *)llvm::IntegerType::get(v539, (llvm::LLVMContext *)(8 << v342));
            int v482 = v340;
            int v345 = (llvm::Value *)llvm::PointerType::get(v344, 0);
            uint64_t v346 = (uint64_t)*(v302 - 8);
            __int16 v553 = 257;
            unint64_t v347 = sub_1CC240E88((uint64_t)&v533, v346, (uint64_t)v344, (uint64_t)&v550);
            uint64_t v348 = (uint64_t)*(v302 - 4);
            __int16 v553 = 257;
            unint64_t v349 = sub_1CC240E88((uint64_t)&v533, v348, (uint64_t)v344, (uint64_t)&v550);
            unsigned int v517 = 0;
            memset(v516, 0, sizeof(v516));
            __int16 v553 = 257;
            v516[0] = sub_1CC277FE0((uint64_t)&v533, v482, v345, (uint64_t)&v550, v350);
            v516[1] = v347;
            v516[2] = v349;
            v516[3] = sub_1CCB60068((uint64_t)v539, (*((unsigned __int16 *)v302 + 9) >> 2) & 7, v351);
            unsigned int v517 = sub_1CCB60068((uint64_t)v539, *((_WORD *)v302 + 9) >> 5, v352);
            unint64_t v353 = &v485[2 * v343];
            unint64_t v354 = (uint64_t **)v353[259];
            int v355 = (uint64_t **)v353[260];
            __int16 v553 = 257;
            uint64_t v356 = sub_1CB845BAC((uint64_t *)&v533, v354, v355, (uint64_t *)v516, 5, (uint64_t)&v550, 0);
            __int16 v553 = 257;
            v483 = sub_1CB845F20((uint64_t)&v533, 32, (void *)v356, (uint64_t)v347, (uint64_t)&v550);
            if (v344 != (llvm::PointerType *)v341)
            {
              __int16 v515 = 257;
              if (*(void *)v356 != v341)
              {
                if (*(unsigned __int8 *)(v356 + 16) <= 0x14u)
                {
                  uint64_t v378 = (*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v540 + 28))(v540, 48, v356, v341);
                  uint64_t v356 = v378;
                  if (v378)
                  {
                    if (*(unsigned __int8 *)(v378 + 16) >= 0x1Cu)
                    {
                      (*(void (**)(void *, uint64_t, void **, llvm::IntegerType **, llvm::IntegerType ***))(*v541 + 16))(v541, v378, &v512, v537, v538);
                      if (v534)
                      {
                        int v383 = (llvm::MDNode **)v533;
                        unint64_t v384 = (llvm::MDNode **)((char *)v533 + 16 * v534);
                        do
                        {
                          llvm::Instruction::setMetadata((llvm::Instruction *)v356, *(_DWORD *)v383, v383[1]);
                          v383 += 2;
                        }
                        while (v383 != v384);
                      }
                    }
                  }
                }
                else
                {
                  __int16 v553 = 257;
                  uint64_t v356 = (uint64_t)llvm::CastInst::Create(48, v356, v341, (const char **)&v550, 0);
                  (*(void (**)(void *, uint64_t, void **, llvm::IntegerType **, llvm::IntegerType ***))(*v541 + 16))(v541, v356, &v512, v537, v538);
                  if (v534)
                  {
                    uint64_t v358 = (llvm::MDNode **)v533;
                    uint64_t v359 = (llvm::MDNode **)((char *)v533 + 16 * v534);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v356, *(_DWORD *)v358, v358[1]);
                      v358 += 2;
                    }
                    while (v358 != v359);
                  }
                }
              }
            }
            uint64_t v379 = llvm::UndefValue::get((llvm::UndefValue *)*v302, v357);
            LODWORD(v512) = 0;
            __int16 v553 = 257;
            int v380 = sub_1CC2411F8((uint64_t)&v533, (uint64_t)v379, v356, &v512, 1, (uint64_t)&v550);
            LODWORD(v512) = 1;
            __int16 v553 = 257;
            int64_t v381 = sub_1CC2411F8((uint64_t)&v533, (uint64_t)v380, (uint64_t)v483, &v512, 1, (uint64_t)&v550);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v302, v381, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          int v306 = 0;
          int64_t v300 = v481;
          break;
        case 'A':
          int v360 = (llvm::CastInst *)*(v302 - 8);
          unsigned int v361 = sub_1CCB5FFD0((uint64_t)**(v302 - 4), v232);
          if ((v361 & 0x80000000) == 0)
          {
            uint64_t v362 = (uint64_t)&v485[10 * (*((_WORD *)v302 + 9) >> 4) + 2 * v361];
            int v363 = *(uint64_t ***)(v362 + 1040);
            if (v363)
            {
              unint64_t v364 = *(uint64_t ***)(v362 + 1032);
              uint64_t v365 = (llvm::PointerType *)llvm::IntegerType::get(v539, (llvm::LLVMContext *)(8 << v361));
              unint64_t v366 = (llvm::Value *)llvm::PointerType::get(v365, 0);
              long long v513 = 0uLL;
              uint64_t v512 = 0;
              __int16 v553 = 257;
              uint64_t v512 = sub_1CC277FE0((uint64_t)&v533, v360, v366, (uint64_t)&v550, v367);
              int v368 = (llvm::CastInst *)*(v302 - 4);
              LOWORD(v517) = 257;
              *(void *)&long long v513 = sub_1CBF56614((uint64_t)&v533, v368, (llvm::Type ***)v365, 0, (uint64_t)v516, v369);
              *((void *)&v513 + 1) = sub_1CCB60068((uint64_t)v539, (*((unsigned __int16 *)v302 + 9) >> 1) & 7, v370);
              __int16 v553 = 257;
              unint64_t v371 = (char *)operator new(0xD0uLL);
              uint64_t v372 = 0;
              unsigned __int8 v373 = (llvm::Value *)(v371 + 128);
              *((_DWORD *)v371 + 37) = *((_DWORD *)v371 + 37) & 0x38000000 | 4;
              do
              {
                BOOL v374 = &v371[v372];
                *(void *)BOOL v374 = 0;
                *((void *)v374 + 1) = 0;
                *((void *)v374 + 2) = 0;
                *((void *)v374 + 3) = v373;
                v372 += 32;
              }
              while (v372 != 128);
              *((void *)v371 + 16) = *v364[2];
              *((void *)v371 + 17) = 0;
              v371[144] = 84;
              v371[145] = 0;
              *((_WORD *)v371 + 73) = 0;
              *((_DWORD *)v371 + 37) = *((_DWORD *)v371 + 37) & 0xC0000000 | 4;
              *(_OWORD *)(v371 + 152) = 0u;
              *(_OWORD *)(v371 + 168) = 0u;
              *((_DWORD *)v371 + 46) = 0;
              *((void *)v371 + 24) = 0;
              llvm::CallInst::init((uint64_t ***)v371 + 16, v364, v363, (uint64_t *)&v512, 3, 0, 0, (const char **)&v550);
              v550 = (void **)(v302 + 3);
              llvm::ReplaceInstWithInst((uint64_t)(v302[5] + 5), (uint64_t **)&v550, v373);
            }
          }
LABEL_406:
          int v306 = 0;
          break;
        default:
          break;
      }
      if (v533 != v535) {
        free(v533);
      }
      v17 |= v306;
      ++v299;
    }
    while (v299 != v300);
  }
  int v385 = v484;
  if (!byte_1EBCECB88) {
    int v385 = 0;
  }
  if (v385 == 1 && v519)
  {
    uint64_t v386 = (llvm::IntegerType ****)v518;
    for (uint64_t j = 8 * v519; j; j -= 8)
    {
      int64_t v388 = 0;
      unint64_t v389 = *v386;
      int v390 = ***v386;
      v533 = v535;
      uint64_t v534 = 0x200000000;
      v539 = v390;
      int v540 = &v548;
      uint64_t v541 = v549;
      uint64_t v542 = 0;
      int v543 = 0;
      __int16 v544 = 512;
      char v545 = 7;
      int v537 = 0;
      uint64_t v538 = 0;
      uint64_t v546 = 0;
      uint64_t v547 = 0;
      v548 = &unk_1F2616E88;
      v549[0] = &unk_1F2617008;
      int v537 = v389[5];
      uint64_t v538 = v389 + 3;
      unint64_t v391 = v389[6];
      v516[0] = v391;
      if (v391)
      {
        llvm::MetadataTracking::track((uint64_t)v516, (unsigned __int8 *)v391, 2);
        int64_t v388 = v516[0];
      }
      sub_1CB8461A4((uint64_t)&v533, 0, (uint64_t)v388);
      if (v516[0])
      {
        int v415 = *(unsigned __int8 *)v516[0];
        if ((v415 - 4) > 0x1E)
        {
          if ((v415 - 3) >= 0xFFFFFFFE) {
            int v418 = v516[0];
          }
          else {
            int v418 = 0;
          }
          if ((v415 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v417 = (unint64_t)v418 + 8;
LABEL_470:
            v550 = v516;
            sub_1CC5FA668(v417 + 16, &v550);
            goto LABEL_443;
          }
          if (v415 == 3) {
            *((void *)v516[0] + 1) = 0;
          }
        }
        else if ((*((unsigned char *)v516[0] + 1) & 0x7F) == 2 || *((_DWORD *)v516[0] + 3))
        {
          uint64_t v416 = *((void *)v516[0] + 2);
          if ((v416 & 4) != 0)
          {
            unint64_t v417 = v416 & 0xFFFFFFFFFFFFFFF8;
            if (v417) {
              goto LABEL_470;
            }
          }
        }
      }
LABEL_443:
      if (sub_1CC5818F8((uint64_t)v389))
      {
        uint64_t v392 = (llvm::Type ****)v485;
        uint64_t v393 = (uint64_t **)v485[281];
        int v394 = (uint64_t **)v485[282];
        int64_t v395 = (llvm::CastInst *)v389[-4 * (*((_DWORD *)v389 + 5) & 0x7FFFFFF)];
        unint64_t v396 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
        __int16 v553 = 257;
        int v530 = sub_1CC277FE0((uint64_t)&v533, v395, v396, (uint64_t)&v550, v397);
        unint64_t v398 = (llvm::CastInst *)v389[-4 * (*((_DWORD *)v389 + 5) & 0x7FFFFFF) + 4];
        uint64_t v399 = (llvm::Type ***)(*(void *)v539 + 1960);
        LOWORD(v517) = 257;
        uint64_t v401 = sub_1CBF56614((uint64_t)&v533, v398, v399, 0, (uint64_t)v516, v400);
        goto LABEL_454;
      }
      if (sub_1CC92A430((uint64_t)v389))
      {
        int v403 = *((_DWORD *)*(v389 - 4) + 9);
        BOOL v404 = v403 == 194 || v403 == 196;
        uint64_t v405 = 277;
        if (v404) {
          uint64_t v405 = 279;
        }
        unint64_t v406 = v485 + 277;
        uint64_t v392 = (llvm::Type ****)v485;
        if (v404) {
          unint64_t v406 = v485 + 279;
        }
        uint64_t v393 = (uint64_t **)v485[v405];
        int v394 = (uint64_t **)v406[1];
        int v407 = (llvm::CastInst *)v389[-4 * (*((_DWORD *)v389 + 5) & 0x7FFFFFF)];
        unint64_t v408 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
        __int16 v553 = 257;
        int v530 = sub_1CC277FE0((uint64_t)&v533, v407, v408, (uint64_t)&v550, v409);
        uint64_t v410 = (llvm::CastInst *)v389[-4 * (*((_DWORD *)v389 + 5) & 0x7FFFFFF) + 4];
        int v411 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v539 + 1912), 0);
        LOWORD(v517) = 257;
        uint64_t v401 = sub_1CC277FE0((uint64_t)&v533, v410, v411, (uint64_t)v516, v412);
LABEL_454:
        *(void *)&long long v531 = v401;
        unint64_t v413 = (llvm::CastInst *)v389[-4 * (*((_DWORD *)v389 + 5) & 0x7FFFFFF) + 8];
        int v414 = *v392;
        __int16 v515 = 257;
        *((void *)&v531 + 1) = sub_1CBF56614((uint64_t)&v533, v413, v414, 0, (uint64_t)&v512, v402);
        v511[4] = 257;
        sub_1CB845BAC((uint64_t *)&v533, v393, v394, (uint64_t *)&v530, 3, (uint64_t)&v509, 0);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      if (v533 != v535) {
        free(v533);
      }
      ++v386;
    }
  }
  int64_t v419 = a2;
  unint64_t v420 = a2[14];
  if (!v420) {
    goto LABEL_507;
  }
  if (!*((_DWORD *)v420 + 2)) {
    goto LABEL_507;
  }
  uint64_t v421 = v420[5];
  if (!v421) {
    goto LABEL_507;
  }
  int v422 = *(_DWORD *)(v421 + 40);
  if (!v422) {
    goto LABEL_507;
  }
  uint64_t v423 = *(void *)(v421 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v476 = __cxa_guard_acquire(&qword_1EBCBE588);
    int64_t v419 = a2;
    if (v476)
    {
      unint64_t v477 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v477 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v477;
      __cxa_guard_release(&qword_1EBCBE588);
      int64_t v419 = a2;
    }
  }
  int v424 = 797982799
       * ((((qword_1EBCBE580 ^ 0x853098DEF6D0EFCBLL) - 0x1BABE392F93811F9) >> 47) ^ ((qword_1EBCBE580 ^ 0xF6D0EFCB)
                                                                                     + 113765895));
  unsigned int v425 = v422 - 1;
  for (int k = 1; ; ++k)
  {
    int v427 = v424 & v425;
    uint64_t v428 = v423 + 24 * (v424 & v425);
    unint64_t v429 = *(const void **)v428;
    if (*(void *)v428 == -1)
    {
      if ("sanitize_thread_no_checking_at_run_time" == (char *)-1) {
        goto LABEL_488;
      }
      goto LABEL_481;
    }
    if (v429 != (const void *)-2) {
      break;
    }
    if ("sanitize_thread_no_checking_at_run_time" == (char *)-2) {
      goto LABEL_488;
    }
LABEL_481:
    if (v429 == (const void *)-1) {
      goto LABEL_507;
    }
    int v424 = k + v427;
  }
  if (*(void *)(v428 + 8) != 39) {
    goto LABEL_481;
  }
  int v430 = memcmp("sanitize_thread_no_checking_at_run_time", v429, 0x27uLL);
  int64_t v419 = a2;
  if (v430) {
    goto LABEL_481;
  }
LABEL_488:
  if (v480)
  {
    int v431 = v419[10];
    if (v431) {
      int64_t v432 = v431 - 3;
    }
    else {
      int64_t v432 = 0;
    }
    for (uint64_t m = (void *)v432[6]; ; uint64_t m = (void *)m[1])
    {
      int v434 = m - 3;
      if (!m) {
        int v434 = 0;
      }
      if (*((unsigned char *)v434 + 16) != 83) {
        break;
      }
    }
    unint64_t v435 = 0;
    uint64_t v436 = *(void *)*(m - 3);
    v550 = (void **)&v551 + 1;
    *(void *)&long long v551 = 0x200000000;
    uint64_t v556 = v436;
    unint64_t v557 = &v565;
    uint64_t v558 = v566;
    uint64_t v559 = 0;
    int v560 = 0;
    __int16 v561 = 512;
    char v562 = 7;
    uint64_t v554 = 0;
    uint64_t v555 = 0;
    uint64_t v563 = 0;
    uint64_t v564 = 0;
    unint64_t v565 = &unk_1F2616E88;
    v566[0] = &unk_1F2617008;
    uint64_t v554 = m[2];
    uint64_t v555 = m;
    uint64_t v437 = (void *)m[3];
    v516[0] = v437;
    if (v437)
    {
      llvm::MetadataTracking::track((uint64_t)v516, (unsigned __int8 *)v437, 2);
      unint64_t v435 = v516[0];
    }
    sub_1CB8461A4((uint64_t)&v550, 0, (uint64_t)v435);
    if (v516[0])
    {
      int v472 = *(unsigned __int8 *)v516[0];
      if ((v472 - 4) > 0x1E)
      {
        if ((v472 - 3) >= 0xFFFFFFFE) {
          v475 = v516[0];
        }
        else {
          v475 = 0;
        }
        if ((v472 - 3) < 0xFFFFFFFE)
        {
          if (v472 == 3) {
            *((void *)v516[0] + 1) = 0;
          }
          goto LABEL_500;
        }
        unint64_t v474 = (unint64_t)v475 + 8;
      }
      else
      {
        if ((*((unsigned char *)v516[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v516[0] + 3)) {
          goto LABEL_500;
        }
        uint64_t v473 = *((void *)v516[0] + 2);
        if ((v473 & 4) == 0) {
          goto LABEL_500;
        }
        unint64_t v474 = v473 & 0xFFFFFFFFFFFFFFF8;
        if (!v474) {
          goto LABEL_500;
        }
      }
      v533 = v516;
      sub_1CC5FA668(v474 + 16, &v533);
    }
LABEL_500:
    int v438 = (uint64_t **)v485[5];
    int64_t v439 = (uint64_t **)v485[6];
    LOWORD(v536) = 257;
    sub_1CB845BAC((uint64_t *)&v550, v438, v439, 0, 0, (uint64_t)&v533, 0);
    sub_1CC46D220((uint64_t)&v533, a2, (uint64_t)"tsan_ignore_cleanup", byte_1EBCECA08, 0);
    while (1)
    {
      unint64_t v440 = (uint64_t *)llvm::EscapeEnumerator::Next((llvm::EscapeEnumerator *)&v533);
      if (!v440) {
        break;
      }
      int v441 = (uint64_t **)v485[7];
      unint64_t v442 = (uint64_t **)v485[8];
      LOWORD(v517) = 257;
      sub_1CB845BAC(v440, v441, v442, 0, 0, (uint64_t)v516, 0);
    }
    int64_t v419 = a2;
    if (v536 != &v537)
    {
      free(v536);
      int64_t v419 = a2;
    }
    if (v550 != (void **)((char *)&v551 + 8))
    {
      free(v550);
      int64_t v419 = a2;
    }
  }
LABEL_507:
  if (((v17 | v480) & 1) != 0 && byte_1EBCEC948)
  {
    int v443 = v419[10];
    if (v443) {
      BOOL v444 = v443 - 3;
    }
    else {
      BOOL v444 = 0;
    }
    uint64_t v445 = (void *)v444[6];
    uint64_t v446 = v445 - 3;
    if (!v445) {
      uint64_t v446 = 0;
    }
    if (*((unsigned char *)v446 + 16) == 83)
    {
      uint64_t v447 = v485;
      do
      {
        uint64_t v445 = (void *)v445[1];
        uint64_t v448 = v445 - 3;
        if (!v445) {
          uint64_t v448 = 0;
        }
      }
      while (*((unsigned char *)v448 + 16) == 83);
    }
    else
    {
      uint64_t v447 = v485;
    }
    uint64_t v449 = 0;
    uint64_t v450 = *(void *)*(v445 - 3);
    v550 = (void **)&v551 + 1;
    *(void *)&long long v551 = 0x200000000;
    uint64_t v556 = v450;
    unint64_t v557 = &v565;
    uint64_t v558 = v566;
    uint64_t v559 = 0;
    int v560 = 0;
    __int16 v561 = 512;
    char v562 = 7;
    uint64_t v563 = 0;
    uint64_t v564 = 0;
    unint64_t v565 = &unk_1F2616E88;
    v566[0] = &unk_1F2617008;
    uint64_t v554 = v445[2];
    uint64_t v555 = v445;
    v451 = (void *)v445[3];
    v516[0] = v451;
    if (v451)
    {
      llvm::MetadataTracking::track((uint64_t)v516, (unsigned __int8 *)v451, 2);
      uint64_t v449 = v516[0];
    }
    sub_1CB8461A4((uint64_t)&v550, 0, (uint64_t)v449);
    v452 = a2;
    if (v516[0])
    {
      int v468 = *(unsigned __int8 *)v516[0];
      if ((v468 - 4) > 0x1E)
      {
        if ((v468 - 3) >= 0xFFFFFFFE) {
          v471 = v516[0];
        }
        else {
          v471 = 0;
        }
        if ((v468 - 3) < 0xFFFFFFFE)
        {
          if (v468 == 3) {
            *((void *)v516[0] + 1) = 0;
          }
          goto LABEL_524;
        }
        unint64_t v470 = (unint64_t)v471 + 8;
      }
      else
      {
        if ((*((unsigned char *)v516[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v516[0] + 3)) {
          goto LABEL_524;
        }
        uint64_t v469 = *((void *)v516[0] + 2);
        if ((v469 & 4) == 0) {
          goto LABEL_524;
        }
        unint64_t v470 = v469 & 0xFFFFFFFFFFFFFFF8;
        if (!v470) {
          goto LABEL_524;
        }
      }
      v533 = v516;
      sub_1CC5FA668(v470 + 16, &v533);
      v452 = a2;
    }
LABEL_524:
    int v453 = (uint64_t **)v452[5];
    llvm::Intrinsic::getType(*v453, 257, 0, 0);
    Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v453, 257, 0, 0);
    llvm::Module::getOrInsertFunction((uint64_t)v453, "llvm.returnaddress", (const char *)0x12, Type, 0);
    unint64_t v457 = (uint64_t **)v455;
    if (v455) {
      uint64_t v458 = *(uint64_t ***)(v455 + 24);
    }
    else {
      uint64_t v458 = 0;
    }
    uint64_t v459 = *(llvm::ConstantInt **)(*(void *)v556 + 1960);
    unsigned int v460 = *(_DWORD *)(*(void *)v556 + 1968);
    LODWORD(v534) = v460 >> 8;
    if (v460 >> 8 >= 0x41) {
      operator new[]();
    }
    v533 = 0;
    v461 = llvm::ConstantInt::get(v459, (llvm::LLVMContext *)&v533, v456);
    if (v534 >= 0x41 && v533) {
      MEMORY[0x1D25D9CB0](v533, 0x1000C8000313F17);
    }
    v516[0] = v461;
    LOWORD(v536) = 257;
    uint64_t v512 = (void *)sub_1CB845BAC((uint64_t *)&v550, v458, v457, (uint64_t *)v516, 1, (uint64_t)&v533, 0);
    uint64_t v462 = (uint64_t **)v447[1];
    uint64_t v463 = (uint64_t **)v447[2];
    LOWORD(v536) = 257;
    sub_1CB845BAC((uint64_t *)&v550, v462, v463, (uint64_t *)&v512, 1, (uint64_t)&v533, 0);
    sub_1CC46D220((uint64_t)&v533, a2, (uint64_t)"tsan_cleanup", byte_1EBCECA08, 0);
    while (1)
    {
      unsigned int v464 = (uint64_t *)llvm::EscapeEnumerator::Next((llvm::EscapeEnumerator *)&v533);
      if (!v464) {
        break;
      }
      uint64_t v465 = (uint64_t **)v447[3];
      uint64_t v466 = (uint64_t **)v447[4];
      LOWORD(v517) = 257;
      sub_1CB845BAC(v464, v465, v466, 0, 0, (uint64_t)v516, 0);
    }
    if (v536 != &v537) {
      free(v536);
    }
    if (v550 != (void **)((char *)&v551 + 8)) {
      free(v550);
    }
    LOBYTE(v17) = 1;
  }
  if (v518 != (char *)&v519 + 8) {
    free(v518);
  }
  if (v521 != (char *)&v522 + 8) {
    free(v521);
  }
  if (v524 != (char *)&v525 + 8) {
    free(v524);
  }
  if (__p != (char *)&v499 + 8) {
    free(__p);
  }
  return v17 & 1;
}

void llvm::initializeThreadSanitizerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCEC800, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCB5F304;
    v4[1] = &v2;
    BOOL v3 = v4;
    std::__call_once(&qword_1EBCEC800, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CCB5F304(uint64_t a1)
{
}

uint64_t sub_1CCB5F3A4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCEC7F8;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F262C610;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 2296) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCEC800, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCB5F304;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCEC800, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CCB5F45C(uint64_t **a1, uint64_t a2)
{
}

void sub_1CCB5F47C()
{
}

void sub_1CCB5F4BC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CCB5F4F4()
{
  return "ThreadSanitizerLegacyPass";
}

uint64_t sub_1CCB5F504(uint64_t a1, llvm::Module *a2)
{
  void v4[3] = (uint64_t)a2;
  llvm::getOrCreateSanitizerCtorAndInitFunctions(a2, "tsan.module_ctor", (const char *)0x10, "__tsan_init", (const char *)0xB, 0, 0, v4);
  if (*(unsigned char *)(a1 + 2296)) {
    *(unsigned char *)(a1 + 2296) = 0;
  }
  sub_1CCB5BAB4(a1 + 32);
  *(unsigned char *)(a1 + 2296) = 1;
  return 1;
}

void sub_1CCB5F5A0(uint64_t a1, uint64_t a2)
{
}

void sub_1CCB5F5B0(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  BOOL v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(char **)v4 != llvm::TargetLibraryInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v6 + 96))(v6, llvm::TargetLibraryInfoWrapperPass::ID);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v8 = v7 + 32;
  if (!*(unsigned char *)(v7 + 232))
  {
    uint64_t v9 = *(void *)(a2 + 40) + 216;
    __int16 v21 = 260;
    v20[0] = v9;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v20);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v33 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(void *)&long long v10 = -1;
    *((void *)&v10 + 1) = -1;
    *(_OWORD *)__src = v10;
    long long v25 = v10;
    long long v26 = v10;
    long long v27 = v10;
    long long v28 = v10;
    long long v29 = v10;
    *(_OWORD *)BOOL v30 = v10;
    *(void *)&v30[13] = -1;
    sub_1CC153974((uint64_t)__src, (int *)__p);
    sub_1CD4D04B8(v8, (uint64_t)__src);
    sub_1CD4CFA4C((uint64_t *)__src);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1CC1569E8(__src, v8);
}

uint64_t sub_1CCB5F8F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a1;
  v76[0] = 0;
  v76[1] = 0;
  unsigned int v77 = 0;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (!v3)
  {
    uint64_t v70 = 0;
    goto LABEL_105;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = *a1 + 8 * v3;
  do
  {
    uint64_t v8 = *(void *)(v6 - 8);
    v6 -= 8;
    uint64_t v7 = v8;
    int v9 = *(unsigned __int8 *)(v8 + 16);
    int v75 = 0;
    int v75 = *(llvm **)(v8 - 32);
    uint64_t v10 = *(void *)(*(void *)(*(void *)(v8 + 40) + 56) + 40);
    uint64_t v11 = llvm::Value::stripInBoundsOffsets((uint64_t)v75, (void (*)(uint64_t, uint64_t))nullsub_608, (uint64_t)&__p);
    uint64_t v12 = v11;
    if (v11) {
      BOOL v13 = *(unsigned char *)(v11 + 16) == 3;
    }
    else {
      BOOL v13 = 0;
    }
    if (!v13)
    {
      uint64_t v14 = *(uint64_t ***)v11;
      goto LABEL_34;
    }
    unsigned int v15 = v11 >> 4;
    if ((*(unsigned char *)(v11 + 34) & 0x40) != 0)
    {
      uint64_t v43 = ***(void ***)v11;
      __p.__r_.__value_.__r.__words[0] = v11;
      int v44 = *(_DWORD *)(v43 + 2520);
      if (v44)
      {
        uint64_t v45 = *(void *)(v43 + 2504);
        int v46 = v44 - 1;
        unsigned int v47 = v46 & (v15 ^ (v11 >> 9));
        size_t v48 = (void *)(v45 + 24 * v47);
        uint64_t v49 = *v48;
        if (*v48 == v12) {
          goto LABEL_50;
        }
        uint64_t v57 = 0;
        int v58 = 1;
        while (v49 != -4096)
        {
          if (v57) {
            BOOL v59 = 0;
          }
          else {
            BOOL v59 = v49 == -8192;
          }
          if (v59) {
            uint64_t v57 = v48;
          }
          unsigned int v60 = v47 + v58++;
          unsigned int v47 = v60 & v46;
          size_t v48 = (void *)(v45 + 24 * v47);
          uint64_t v49 = *v48;
          if (*v48 == v12) {
            goto LABEL_50;
          }
        }
        if (v57) {
          uint64_t v61 = v57;
        }
        else {
          uint64_t v61 = v48;
        }
      }
      else
      {
        uint64_t v61 = 0;
      }
      size_t v48 = sub_1CC5BF31C(v43 + 2504, (uint64_t)&__p, (uint64_t *)&__p, v61);
      std::string::size_type v62 = __p.__r_.__value_.__r.__words[0];
      v48[1] = 0;
      v48[2] = 0;
      *size_t v48 = v62;
LABEL_50:
      uint64_t v72 = v48[1];
      size_t v73 = v48[2];
      int v74 = v2;
      __int16 v79 = 260;
      v78[0] = v10 + 216;
      llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)v78);
      int v50 = v81;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      llvm::getInstrProfSectionName(1u, v50, 0, &__p);
      char v51 = 0;
      int v52 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      unint64_t v53 = (void *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
      }
      else {
        size_t size = __p.__r_.__value_.__l.__size_;
      }
      if (v73 >= size)
      {
        if (!size)
        {
          char v51 = 1;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_65:
            uint64_t v2 = v74;
            if (v51) {
              continue;
            }
            goto LABEL_9;
          }
LABEL_64:
          operator delete(v53);
          goto LABEL_65;
        }
        std::string::size_type v56 = __p.__r_.__value_.__r.__words[0];
        BOOL v13 = memcmp((const void *)(v72 + v73 - size), p_p, size) == 0;
        unint64_t v53 = (void *)v56;
        char v51 = v13;
      }
      if ((v52 & 0x80000000) == 0) {
        goto LABEL_65;
      }
      goto LABEL_64;
    }
LABEL_9:
    uint64_t v14 = *(uint64_t ***)v12;
    if ((*(unsigned char *)(v12 + 23) & 0x10) != 0)
    {
      uint64_t v16 = **v14;
      uint64_t v17 = *(void *)(v16 + 152);
      uint64_t v18 = *(unsigned int *)(v16 + 168);
      if (v18)
      {
        LODWORD(v19) = (v18 - 1) & (v15 ^ (v12 >> 9));
        __int16 v20 = (uint64_t *)(v17 + 16 * v19);
        uint64_t v21 = *v20;
        if (*v20 == v12)
        {
LABEL_17:
          uint64_t v24 = (void *)v20[1];
          if (*v24 >= 0xBuLL)
          {
            uint64_t v25 = v24[2];
            uint64_t v26 = *(void *)((char *)v24 + 19);
            if (v25 == 0x675F6D766C6C5F5FLL && v26 == 0x766F63675F6D766CLL) {
              continue;
            }
          }
          if (v18)
          {
            LODWORD(v28) = (v18 - 1) & (v15 ^ (v12 >> 9));
            long long v29 = (uint64_t *)(v17 + 16 * v28);
            uint64_t v30 = *v29;
            if (*v29 == v12)
            {
LABEL_29:
              int v33 = (void *)v29[1];
              if (*v33 >= 0xBuLL)
              {
                uint64_t v34 = v33[2];
                uint64_t v35 = *(void *)((char *)v33 + 19);
                if (v34 == 0x675F6D766C6C5F5FLL && v35 == 0x616463675F6D766CLL) {
                  continue;
                }
              }
              goto LABEL_34;
            }
            int v31 = 1;
            while (v30 != -4096)
            {
              int v32 = v28 + v31++;
              uint64_t v28 = v32 & (v18 - 1);
              uint64_t v30 = *(void *)(v17 + 16 * v28);
              if (v30 == v12)
              {
                long long v29 = (uint64_t *)(v17 + 16 * v28);
                goto LABEL_29;
              }
            }
          }
          long long v29 = (uint64_t *)(v17 + 16 * v18);
          goto LABEL_29;
        }
        int v22 = 1;
        while (v21 != -4096)
        {
          int v23 = v19 + v22++;
          uint64_t v19 = v23 & (v18 - 1);
          uint64_t v21 = *(void *)(v17 + 16 * v19);
          if (v21 == v12)
          {
            __int16 v20 = (uint64_t *)(v17 + 16 * v19);
            goto LABEL_17;
          }
        }
      }
      __int16 v20 = (uint64_t *)(v17 + 16 * v18);
      goto LABEL_17;
    }
LABEL_34:
    unsigned int v37 = *((_DWORD *)v14 + 2);
    if ((v37 & 0xFE) == 0x12)
    {
      uint64_t v14 = (uint64_t **)*v14[2];
      unsigned int v37 = *((_DWORD *)v14 + 2);
    }
    if ((v37 & 0xFE) == 0x12) {
      unsigned int v37 = *(_DWORD *)(*v14[2] + 8);
    }
    if (v37 <= 0xFF)
    {
      uint64_t v38 = v75;
      if (v9 != 61)
      {
        if (v77)
        {
          LODWORD(v39) = (v77 - 1) & ((v75 >> 4) ^ (v75 >> 9));
          uint64_t v40 = v76[0] + 16 * v39;
          uint64_t v41 = *(llvm **)v40;
          if (v75 == *(llvm **)v40)
          {
LABEL_42:
            if (!byte_1EBCECD08 && v40 != v76[0] + 16 * v77)
            {
              unint64_t v42 = (_DWORD *)(*(void *)a2 + 16 * *(void *)(v40 + 8));
              if (!byte_1EBCECC48 || (*(_WORD *)(v7 + 18) & 1) == 0 && (*(_WORD *)(*(void *)v42 + 18) & 1) == 0)
              {
                v42[2] |= 1u;
                continue;
              }
            }
          }
          else
          {
            int v63 = 1;
            while (v41 != (llvm *)-4096)
            {
              int v64 = v39 + v63++;
              uint64_t v39 = v64 & (v77 - 1);
              uint64_t v41 = *(llvm **)(v76[0] + 16 * v39);
              if (v75 == v41)
              {
                uint64_t v40 = v76[0] + 16 * v39;
                goto LABEL_42;
              }
            }
          }
        }
        int v65 = *((unsigned __int8 *)v75 + 16);
        unint64_t v66 = v75;
        if (v75 && v65 == 62)
        {
          unint64_t v66 = (llvm *)*((void *)v75 - 4 * (*((_DWORD *)v75 + 5) & 0x7FFFFFF));
          int v65 = *((unsigned __int8 *)v66 + 16);
        }
        if (v65 == 60)
        {
          if (sub_1CCB5FE90((uint64_t)v66)) {
            continue;
          }
          uint64_t v38 = v75;
        }
        else if (v65 == 3 && (*((unsigned char *)v66 + 80) & 1) != 0)
        {
          continue;
        }
      }
      if (*((unsigned char *)llvm::getUnderlyingObject(v38, (const llvm::Value *)6) + 16) != 59
        || llvm::PointerMayBeCaptured(v75, (const llvm::Value *)1, 1, 0))
      {
        uint64_t v67 = *(unsigned int *)(a2 + 8);
        if (v67 >= *(_DWORD *)(a2 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v68 = *(void *)a2 + 16 * v67;
        *(void *)uint64_t v68 = v7;
        *(_DWORD *)(v68 + 8) = 0;
        uint64_t v69 = (v67 + 1);
        *(_DWORD *)(a2 + 8) = v69;
        if (v9 == 61) {
          sub_1CD4D7004(v76, &v75)[1] = v69 - 1;
        }
      }
    }
  }
  while (v6 != v5);
  uint64_t v70 = v76[0];
LABEL_105:
  *((_DWORD *)v2 + 2) = 0;
  return MEMORY[0x1D25D9CD0](v70, 8);
}

BOOL sub_1CCB5FE90(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 23) & 0x20) == 0) {
    return 0;
  }
  uint64_t v1 = ***(void ***)a1;
  uint64_t v19 = a1;
  int v2 = *(_DWORD *)(v1 + 2496);
  if (!v2)
  {
    uint64_t v17 = 0;
LABEL_22:
    uint64_t v6 = sub_1CC609054(v1 + 2480, (uint64_t)&v19, &v19, v17);
    uint64_t v18 = v19;
    v6[3] = 0;
    v6[4] = 0;
    *uint64_t v6 = v18;
    v6[1] = v6 + 3;
    void v6[2] = 0x100000000;
    goto LABEL_12;
  }
  uint64_t v3 = *(void *)(v1 + 2480);
  int v4 = v2 - 1;
  unsigned int v5 = (v2 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  uint64_t v6 = (void *)(v3 + 40 * v5);
  uint64_t v7 = *v6;
  if (*v6 != a1)
  {
    uint64_t v8 = 0;
    int v9 = 1;
    while (v7 != -4096)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == -8192;
      }
      if (v10) {
        uint64_t v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      uint64_t v6 = (void *)(v3 + 40 * (v11 & v4));
      uint64_t v7 = *v6;
      if (*v6 == a1) {
        goto LABEL_12;
      }
    }
    if (v8) {
      uint64_t v17 = v8;
    }
    else {
      uint64_t v17 = v6;
    }
    goto LABEL_22;
  }
LABEL_12:
  uint64_t v12 = *((unsigned int *)v6 + 4);
  if (!v12) {
    return 0;
  }
  BOOL v13 = (llvm::MDNode **)(v6[1] + 8);
  uint64_t v14 = 16 * v12;
  while (*((_DWORD *)v13 - 2) != 1)
  {
    v13 += 2;
    v14 -= 16;
    if (!v14) {
      return 0;
    }
  }
  unsigned int v15 = *v13;
  if (!*v13) {
    return 0;
  }

  return llvm::MDNode::isTBAAVtableAccess(v15);
}

uint64_t sub_1CCB5FFD0(uint64_t a1, uint64_t a2)
{
  int v2 = sub_1CB83544C(a2, a1);
  if (v3 == 1)
  {
    int v7 = v2;
    int v2 = v7;
  }
  unsigned int v4 = (v2 + 7) & 0xFFFFFFF8;
  BOOL v5 = v4 - 8 > 0x38 || ((1 << (((v2 + 7) & 0xF8u) - 8)) & 0x100000001000101) == 0;
  if (!v5 || v4 == 128) {
    return __clz(__rbit32((v2 + 7) >> 3));
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void *sub_1CCB60068(uint64_t a1, int a2, const llvm::APInt *a3)
{
  uint64_t v3 = (a2 - 4);
  if (v3 >= 4) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3 + 2;
  }
  BOOL v5 = *(llvm::ConstantInt **)(*(void *)a1 + 1960);
  unsigned int v6 = *(_DWORD *)(*(void *)a1 + 1968);
  unsigned int v11 = v6 >> 8;
  if (v6 >> 8 > 0x40) {
    operator new[]();
  }
  if (v6 <= 0xFF) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v6) + 63);
  }
  unint64_t v10 = v7 & v4;
  uint64_t v8 = llvm::ConstantInt::get(v5, (llvm::LLVMContext *)&v10, a3);
  if (v11 >= 0x41 && v10) {
    MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
  }
  return v8;
}

uint64_t sub_1CCB60184()
{
  char v3 = 1;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Instrument memory accesses";
  v2.n128_u64[1] = 26;
  int v1 = 1;
  sub_1CD699C00((llvm::cl::Option *)&unk_1EBCEC808, "tsan-instrument-memory-accesses", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEC808, &dword_1CB82C000);
  char v3 = 1;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Instrument function entry and exit";
  v2.n128_u64[1] = 34;
  int v1 = 1;
  sub_1CD699C00((llvm::cl::Option *)&unk_1EBCEC8C8, "tsan-instrument-func-entry-exit", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEC8C8, &dword_1CB82C000);
  char v3 = 1;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Handle C++ exceptions (insert cleanup blocks for unwinding)";
  v2.n128_u64[1] = 59;
  int v1 = 1;
  sub_1CD699D84(&v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCEC988, &dword_1CB82C000);
  char v3 = 1;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Instrument atomics";
  v2.n128_u64[1] = 18;
  int v1 = 1;
  sub_1CD699EFC(&v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCECA48, &dword_1CB82C000);
  char v3 = 1;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Instrument memintrinsics (memset/memcpy/memmove)";
  v2.n128_u64[1] = 48;
  int v1 = 1;
  sub_1CD69A074(&v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCECB08, &dword_1CB82C000);
  char v3 = 0;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Emit special instrumentation for accesses to volatiles";
  v2.n128_u64[1] = 54;
  int v1 = 1;
  sub_1CD69A1EC(&v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCECBC8, &dword_1CB82C000);
  char v3 = 0;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Do not eliminate read instrumentation for read-before-writes";
  v2.n128_u64[1] = 60;
  int v1 = 1;
  sub_1CD69A364(&v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCECC88, &dword_1CB82C000);
  char v3 = 0;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Emit special compound instrumentation for reads-before-writes";
  v2.n128_u64[1] = 61;
  int v1 = 1;
  sub_1CD699C00((llvm::cl::Option *)&unk_1EBCECD48, "tsan-compound-read-before-write", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCECD48, &dword_1CB82C000);
}

void llvm::initializeHWAddressSanitizerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  __n128 v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCECE10, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCB6045C;
    v4[1] = &v2;
    char v3 = v4;
    std::__call_once(&qword_1EBCECE10, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CCB6045C(llvm *a1, llvm::PassRegistry *a2)
{
}

uint64_t sub_1CCB6050C(uint64_t a1, char a2, char a3, char a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCECE08;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F262C6B0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = a2;
  *(unsigned char *)(a1 + 41) = a3;
  *(unsigned char *)(a1 + 42) = a4;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCECE10, memory_order_acquire) != -1)
  {
    v8[0] = sub_1CCB6045C;
    v8[1] = &PassRegistry;
    unint64_t v7 = v8;
    std::__call_once(&qword_1EBCECE10, &v7, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CCB605CC(uint64_t a1, uint64_t **a2, BOOL a3, BOOL a4, uint64_t a5)
{
  uint64_t v379 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v7 = a1 + 24;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  uint64_t v8 = a1 + 48;
  uint64_t v9 = **a2;
  *(void *)(a1 + 160) = v9 + 1576;
  *(void *)(a1 + 200) = v9 + 1984;
  *(_WORD *)(a1 + 217) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  if (word_1EBCED2A0) {
    a4 = byte_1EBCED318 != 0;
  }
  *(unsigned char *)(a1 + 209) = a4;
  BOOL v11 = byte_1EBCED918 != 0;
  if (!word_1EBCED8A0) {
    BOOL v11 = a3;
  }
  *(unsigned char *)(a1 + 208) = v11;
  v354[8] = 260;
  v353[0] = a2 + 27;
  llvm::Triple::Triple((llvm::Triple *)v368, (const llvm::Twine *)v353);
  if (*(char *)(v7 + 23) < 0) {
    operator delete(*(void **)v7);
  }
  uint64_t v12 = v370;
  *(void *)(v7 + 16) = *(void *)&v368[16];
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v368;
  *(_OWORD *)uint64_t v8 = v369;
  *(void *)(v8 + 16) = v12;
  int v13 = *(_DWORD *)(a1 + 48);
  BOOL v14 = byte_1EBCECF58 != 0;
  BOOL v15 = v13 == 42 && byte_1EA61DC00 != 0;
  *(unsigned char *)(a1 + 216) = v15;
  int v16 = v13 == 42 || v14;
  *(unsigned char *)(a1 + 213) = v16;
  if (v15)
  {
    char v17 = 0;
    char v18 = 0;
  }
  else
  {
    char v17 = byte_1EBCED3D8;
    if (byte_1EBCED3D8) {
      BOOL v19 = byte_1EBCED558 == 0;
    }
    else {
      BOOL v19 = 1;
    }
    char v18 = !v19;
  }
  *(unsigned char *)(a1 + 214) = v17;
  *(unsigned char *)(a1 + 215) = v18;
  BOOL v20 = v13 == 42;
  if (v13 == 42) {
    int v21 = 57;
  }
  else {
    int v21 = 56;
  }
  *(_DWORD *)(a1 + 220) = v21;
  uint64_t v22 = 255;
  if (v20) {
    uint64_t v22 = 63;
  }
  *(void *)(a1 + 224) = v22;
  *(_DWORD *)(a1 + 136) = 4;
  if (*(_DWORD *)(a1 + 60) == 6)
  {
    *(_WORD *)(a1 + 152) = 0;
    *(void *)(a1 + 144) = 0;
    *(unsigned char *)(a1 + 154) = 1;
    goto LABEL_34;
  }
  if (word_1EA61DD10)
  {
    *(_WORD *)(a1 + 152) = 0;
    uint64_t v23 = xmmword_1EA61DD88;
LABEL_31:
    *(void *)(a1 + 144) = v23;
    *(unsigned char *)(a1 + 154) = 0;
    goto LABEL_34;
  }
  if (byte_1EBCED918 | v16)
  {
    *(_DWORD *)(a1 + 151) = 0;
    *(void *)(a1 + 144) = 0;
  }
  else
  {
    if (byte_1EBCED9D8)
    {
      *(_WORD *)(a1 + 152) = 1;
      uint64_t v23 = -1;
      goto LABEL_31;
    }
    int v123 = byte_1EBCEDA98;
    *(unsigned char *)(a1 + 152) = 0;
    if (v123) {
      *(_WORD *)(a1 + 153) = 257;
    }
    else {
      *(_WORD *)(a1 + 153) = 0;
    }
    *(void *)(a1 + 144) = -1;
  }
LABEL_34:
  uint64_t v24 = **(llvm::IntegerType ***)(a1 + 8);
  *(void *)a1 = v24;
  v353[0] = v354;
  v353[1] = (void *)0x200000000;
  unint64_t v357 = v24;
  uint64_t v358 = &v366;
  uint64_t v359 = &v367;
  uint64_t v360 = 0;
  int v361 = 0;
  __int16 v362 = 512;
  char v363 = 7;
  uint64_t v355 = 0;
  uint64_t v356 = 0;
  uint64_t v364 = 0;
  uint64_t v365 = 0;
  unint64_t v366 = &unk_1F2616E88;
  uint64_t v367 = &unk_1F2617008;
  *(void *)(a1 + 168) = llvm::IntegerType::get(v24, (llvm::LLVMContext *)*((unsigned int *)a2[63] + 1));
  *(void *)(a1 + 176) = llvm::PointerType::get((llvm::PointerType *)(*(void *)v357 + 1912), 0);
  uint64_t v25 = *(void *)v357 + 1960;
  *(void *)(a1 + 184) = *(void *)v357 + 1912;
  *(void *)(a1 + 192) = v25;
  *(void *)(a1 + 232) = 0;
  if (*(_DWORD *)(a1 + 64) == 11) {
    int v26 = sub_1CD4CF6B4((llvm::Triple *)v7, 0x1Eu) ^ 1;
  }
  else {
    int v26 = 1;
  }
  BOOL v27 = byte_1EBCEDD98 != 0;
  if (!word_1EBCEDD20) {
    BOOL v27 = v26;
  }
  *(unsigned char *)(a1 + 211) = v27;
  if ((*(_DWORD *)(a1 + 48) - 3) <= 2 && *(_DWORD *)(a1 + 68) == 3)
  {
    if (word_1EA61DAC8) {
      int v28 = byte_1EA61DB40;
    }
    else {
      int v28 = *(unsigned __int8 *)(a1 + 209);
    }
    BOOL v29 = v28 == 0;
  }
  else
  {
    BOOL v29 = 0;
  }
  *(unsigned char *)(a1 + 210) = v29;
  if (word_1EBCED7E0)
  {
    char v30 = dword_1EBCED858;
    if (dword_1EBCED858 == -1) {
      goto LABEL_51;
    }
    *(unsigned char *)(a1 + 217) = 1;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 208)) {
      goto LABEL_51;
    }
    *(unsigned char *)(a1 + 217) = 1;
    char v30 = -1;
  }
  *(unsigned char *)(a1 + 218) = v30;
LABEL_51:
  if (word_1EBCEDC60) {
    char v31 = byte_1EBCEDCD8 != 0;
  }
  else {
    char v31 = v26 ^ 1;
  }
  *(unsigned char *)(a1 + 212) = v31;
  if (*(unsigned char *)(a1 + 208)) {
    goto LABEL_55;
  }
  LODWORD(v341) = v26;
  int v33 = *(llvm::Module **)(a1 + 8);
  BOOL v374 = (llvm::ConstantExpr *)a1;
  llvm::getOrCreateSanitizerCtorAndInitFunctions(v33, "hwasan.module_ctor", (const char *)0x12, "__hwasan_init", (const char *)0xD, 0, 0, (uint64_t *)v368);
  *(void *)(a1 + 232) = *(void *)v368;
  inserted = llvm::Module::getOrInsertComdat(*(void *)(a1 + 8), "hwasan.module_ctor", 0x12uLL);
  uint64_t v35 = llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 184), 0);
  long long v36 = operator new(0x78uLL);
  unsigned int v37 = (llvm::GlobalValue *)(v36 + 8);
  v36[13] = v36[13] & 0x38000000 | 1;
  *(void *)long long v36 = 0;
  *((void *)v36 + 1) = 0;
  *((void *)v36 + 2) = 0;
  *((void *)v36 + 3) = v36 + 8;
  uint64_t v38 = *(void *)(a1 + 8);
  *(void *)int v368 = "__start_hwasan_globals";
  WORD4(v369) = 259;
  llvm::GlobalVariable::GlobalVariable((unint64_t *)v36 + 4, v38, v35, 1, 0, 0, (const char **)v368, 0, 0, 0, 0);
  int v39 = v36[16];
  unsigned int v40 = v39 & 0xFFFFFFCF | 0x10;
  v36[16] = v40;
  if ((v39 & 0xFu) - 7 < 2
    || (char hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(v37),
        unsigned int v40 = v36[16],
        (hasExternalWeakLinkage & 1) == 0))
  {
    v40 |= 0x4000u;
  }
  v36[16] = v40 | 0x4000;
  unint64_t v42 = operator new(0x78uLL);
  uint64_t v43 = (llvm::GlobalValue *)(v42 + 8);
  v42[13] = v42[13] & 0x38000000 | 1;
  *(void *)unint64_t v42 = 0;
  *((void *)v42 + 1) = 0;
  *((void *)v42 + 2) = 0;
  *((void *)v42 + 3) = v42 + 8;
  uint64_t v44 = *(void *)(a1 + 8);
  *(void *)int v368 = "__stop_hwasan_globals";
  WORD4(v369) = 259;
  llvm::GlobalVariable::GlobalVariable((unint64_t *)v42 + 4, v44, v35, 1, 0, 0, (const char **)v368, 0, 0, 0, 0);
  int v45 = v42[16];
  unsigned int v46 = v45 & 0xFFFFFFCF | 0x10;
  v42[16] = v46;
  if ((v45 & 0xFu) - 7 < 2 || (v47 = llvm::GlobalValue::hasExternalWeakLinkage(v43), unsigned int v46 = v42[16], (v47 & 1) == 0)) {
    v46 |= 0x4000u;
  }
  v42[16] = v46 | 0x4000;
  size_t v48 = llvm::ArrayType::get((llvm::ArrayType *)(**(void **)a1 + 1912), (llvm::Type *)8);
  uint64_t Impl = llvm::ConstantDataSequential::getImpl("LLVM", (llvm::Type *)8, v48);
  int v50 = *(uint64_t ***)(a1 + 192);
  uint64_t v51 = *(void *)Impl;
  int v52 = *v50;
  *(void *)int v368 = v50;
  *(void *)&v368[8] = v50;
  *(void *)&v368[16] = v50;
  *(void *)&long long v369 = v51;
  *((void *)&v369 + 1) = v50;
  int v370 = (llvm::detail::IEEEFloat *)v50;
  unint64_t v53 = (llvm::PointerType *)llvm::StructType::get(v52, (uint64_t)v368, 6, 0);
  unint64_t v54 = operator new(0x78uLL);
  int v55 = (llvm::GlobalObject *)(v54 + 8);
  v54[13] = v54[13] & 0x38000000 | 1;
  *(void *)unint64_t v54 = 0;
  *((void *)v54 + 1) = 0;
  *((void *)v54 + 2) = 0;
  *((void *)v54 + 3) = v54 + 8;
  uint64_t v56 = *(void *)(a1 + 8);
  *(void *)int v368 = "hwasan.note";
  WORD4(v369) = 259;
  llvm::GlobalVariable::GlobalVariable((unint64_t *)v54 + 4, v56, v53, 1, 8, 0, (const char **)v368, 0, 0, 0, 0);
  uint64_t v57 = (llvm::GlobalObject *)llvm::UniqueStringSaver::save(***((void ***)v54 + 4) + 2136, ".note.hwasan.globals", 0x14uLL);
  BOOL v59 = v58;
  uint64_t v60 = ***((void ***)v54 + 4);
  *(void *)int v368 = v54 + 8;
  int v61 = *(_DWORD *)(v60 + 2520);
  if (v61)
  {
    uint64_t v62 = *(void *)(v60 + 2504);
    int v63 = v61 - 1;
    unsigned int v64 = v63 & ((v55 >> 4) ^ (v55 >> 9));
    int v65 = (llvm::GlobalObject **)(v62 + 24 * v64);
    unint64_t v66 = *v65;
    if (*v65 == v55) {
      goto LABEL_71;
    }
    uint64_t v124 = 0;
    int v125 = 1;
    while (v66 != (llvm::GlobalObject *)-4096)
    {
      if (v124) {
        BOOL v126 = 0;
      }
      else {
        BOOL v126 = v66 == (llvm::GlobalObject *)-8192;
      }
      if (v126) {
        uint64_t v124 = v65;
      }
      unsigned int v127 = v64 + v125++;
      unsigned int v64 = v127 & v63;
      int v65 = (llvm::GlobalObject **)(v62 + 24 * v64);
      unint64_t v66 = *v65;
      if (*v65 == v55) {
        goto LABEL_71;
      }
    }
    if (v124) {
      size_t v132 = v124;
    }
    else {
      size_t v132 = v65;
    }
  }
  else
  {
    size_t v132 = 0;
  }
  int v65 = (llvm::GlobalObject **)sub_1CC5BF31C(v60 + 2504, (uint64_t)v368, (uint64_t *)v368, v132);
  uint64_t v133 = *(llvm::GlobalObject **)v368;
  v65[1] = 0;
  int v65[2] = 0;
  *int v65 = v133;
LABEL_71:
  v65[1] = v57;
  int v65[2] = v59;
  v54[16] = v54[16] & 0xFFBFFFFF | ((v59 != 0) << 22);
  llvm::GlobalObject::setComdat(v55, (llvm::Comdat *)inserted);
  v54[16] = v54[16] & 0xFFC0BFFF | 0x34000;
  *(void *)int v368 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 192), 8uLL, 0);
  *(void *)&v368[8] = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 192), 8uLL, 0);
  *(void *)&v368[16] = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 192), 3uLL, 0);
  *(void *)&long long v369 = Impl;
  uint64_t v67 = sub_1CC56C0C0((llvm *)0x2F, v37, *(llvm::Constant **)(a1 + 200), 0);
  uint64_t v68 = sub_1CC56C0C0((llvm *)0x2F, v55, *(llvm::Constant **)(a1 + 200), 0);
  Sub = llvm::ConstantExpr::getSub(v67, v68, 0, 0);
  *((void *)&v369 + 1) = sub_1CC56C0C0((llvm *)0x26, Sub, *(llvm::Constant **)(a1 + 192), 0);
  uint64_t v70 = sub_1CC56C0C0((llvm *)0x2F, v43, *(llvm::Constant **)(a1 + 200), 0);
  int v71 = sub_1CC56C0C0((llvm *)0x2F, v55, *(llvm::Constant **)(a1 + 200), 0);
  uint64_t v72 = llvm::ConstantExpr::getSub(v70, v71, 0, 0);
  int v370 = sub_1CC56C0C0((llvm *)0x26, v72, *(llvm::Constant **)(a1 + 192), 0);
  TypeForElements = (llvm::PoisonValue *)llvm::ConstantStruct::getTypeForElements(***(uint64_t ****)v368, (uint64_t)v368, 6u, 0);
  int v74 = (llvm::Constant *)llvm::ConstantStruct::get(TypeForElements, (llvm::Type *)v368, 6);
  llvm::GlobalVariable::setInitializer((uint64_t)v55, v74);
  int v75 = *(void **)(a1 + 8);
  *(void *)int v368 = v54 + 8;
  sub_1CD1CF0D0(v75, "llvm.compiler.used", (const char *)0x12, (llvm::ConstantExpr **)v368, 1);
  uint64_t v76 = operator new(0x78uLL);
  unsigned int v77 = (llvm::GlobalObject *)(v76 + 8);
  v76[13] = v76[13] & 0x38000000 | 1;
  *(void *)uint64_t v76 = 0;
  *((void *)v76 + 1) = 0;
  *((void *)v76 + 2) = 0;
  *((void *)v76 + 3) = v76 + 8;
  uint64_t v78 = *(void *)(a1 + 8);
  NullValue = llvm::Constant::getNullValue(v35, v79, v80);
  *(void *)int v368 = "hwasan.dummy.global";
  WORD4(v369) = 259;
  llvm::GlobalVariable::GlobalVariable((unint64_t *)v76 + 4, v78, v35, 1, 8, (unint64_t)NullValue, (const char **)v368, 0, 0, 0, 0);
  char v82 = (llvm::GlobalObject *)llvm::UniqueStringSaver::save(***((void ***)v76 + 4) + 2136, "hwasan_globals", 0xEuLL);
  size_t v84 = v83;
  uint64_t v85 = ***((void ***)v76 + 4);
  *(void *)int v368 = v76 + 8;
  int v86 = *(_DWORD *)(v85 + 2520);
  if (v86)
  {
    uint64_t v87 = *(void *)(v85 + 2504);
    int v88 = v86 - 1;
    unsigned int v89 = v88 & ((v77 >> 4) ^ (v77 >> 9));
    unint64_t v90 = (llvm::GlobalObject **)(v87 + 24 * v89);
    uint64_t v91 = *v90;
    if (*v90 == v77) {
      goto LABEL_73;
    }
    int v128 = 0;
    int v129 = 1;
    while (v91 != (llvm::GlobalObject *)-4096)
    {
      if (v128) {
        BOOL v130 = 0;
      }
      else {
        BOOL v130 = v91 == (llvm::GlobalObject *)-8192;
      }
      if (v130) {
        int v128 = v90;
      }
      unsigned int v131 = v89 + v129++;
      unsigned int v89 = v131 & v88;
      unint64_t v90 = (llvm::GlobalObject **)(v87 + 24 * v89);
      uint64_t v91 = *v90;
      if (*v90 == v77) {
        goto LABEL_73;
      }
    }
    if (v128) {
      size_t v134 = v128;
    }
    else {
      size_t v134 = v90;
    }
  }
  else
  {
    size_t v134 = 0;
  }
  unint64_t v90 = (llvm::GlobalObject **)sub_1CC5BF31C(v85 + 2504, (uint64_t)v368, (uint64_t *)v368, v134);
  int v135 = *(llvm::GlobalObject **)v368;
  v90[1] = 0;
  v90[2] = 0;
  void *v90 = v135;
LABEL_73:
  v90[1] = v82;
  v90[2] = v84;
  v76[16] = v76[16] & 0xFFBFFFFF | ((v84 != 0) << 22);
  llvm::GlobalObject::setComdat(v77, (llvm::Comdat *)inserted);
  uint64_t v92 = *(void *)a1;
  *(void *)int v368 = llvm::ValueAsMetadata::get(v55, v93);
  char v94 = llvm::MDTuple::getImpl(v92, v368, 1, 0, 1);
  llvm::Value::setMetadata((uint64_t ***)v77, 22, v94);
  int64_t v95 = *(void **)(a1 + 8);
  *(void *)int v368 = v76 + 8;
  sub_1CD1CF0D0(v95, "llvm.compiler.used", (const char *)0x12, (llvm::ConstantExpr **)v368, 1);
  BOOL v96 = byte_1EBCED798 != 0;
  int v97 = (int)v341;
  if (!word_1EBCED720) {
    BOOL v96 = (int)v341;
  }
  if (v96 && !*(unsigned char *)(a1 + 216))
  {
    unint64_t v98 = *(llvm::Module **)(a1 + 8);
    *(void *)int v368 = "llvm.asan.globals";
    WORD4(v369) = 259;
    uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v98, (const char **)v368);
    if (NamedMetadata)
    {
      uint64_t v100 = NamedMetadata;
      int v101 = *(_DWORD *)(*(void *)(NamedMetadata + 48) + 8);
      if (v101)
      {
        unint64_t v102 = (4 * v101 / 3u + 1) | ((unint64_t)(4 * v101 / 3u + 1) >> 1);
        unint64_t v103 = v102 | (v102 >> 2) | ((v102 | (v102 >> 2)) >> 4);
        unsigned int v104 = ((v103 | (v103 >> 8)) >> 16) | v103 | (v103 >> 8);
        LODWORD(v349) = v104 + 1;
        uint64_t v105 = operator new(8 * (v104 + 1), (std::align_val_t)8uLL);
        unint64_t v347 = v105;
        uint64_t v348 = 0;
        uint64_t v106 = 8 * v104 + 8;
        do
        {
          *v105++ = -4096;
          v106 -= 8;
        }
        while (v106);
        uint64_t v107 = *(unsigned int *)(*(void *)(v100 + 48) + 8);
        if (v107)
        {
          uint64_t v108 = 0;
          while (1)
          {
            uint64_t v109 = *(void *)(**(void **)(v100 + 48) + 8 * v108);
            uint64_t v110 = *(void *)(v109 - 8 * *(unsigned int *)(v109 + 8));
            if (!v110) {
              goto LABEL_91;
            }
            unint64_t v111 = *(llvm::Value **)(v110 + 128);
            if (!v111) {
              goto LABEL_91;
            }
            uint64_t v112 = llvm::Value::stripPointerCasts(v111);
            uint64_t v113 = *((unsigned char *)v112 + 16) == 3 ? v112 : 0;
            BOOL v374 = v113;
            if (!v113) {
              goto LABEL_91;
            }
            uint64_t v114 = *(void *)(*(void *)(v109 - 8 * *(unsigned int *)(v109 + 8) + 32) + 128);
            uint64_t v115 = *(unsigned int *)(v114 + 32);
            if (v115 > 0x40) {
              break;
            }
            if (*(void *)(v114 + 24) == 1) {
              goto LABEL_99;
            }
LABEL_91:
            if (++v108 == v107) {
              goto LABEL_132;
            }
          }
          int v116 = 0;
          int64_t v117 = (unint64_t)(v115 + 63) >> 6;
          do
          {
            if (v117-- < 1) {
              break;
            }
            unint64_t v119 = *(void *)(*(void *)(v114 + 24) + 8 * v117);
            v116 += __clz(v119);
          }
          while (!v119);
          int v120 = v115 | 0xFFFFFFC0;
          if ((v115 & 0x3F) == 0) {
            int v120 = 0;
          }
          if (v116 + v120 != v115 - 1) {
            goto LABEL_91;
          }
LABEL_99:
          sub_1CD4C96F8((uint64_t)v368, (uint64_t)&v347, (uint64_t *)&v374);
          goto LABEL_91;
        }
      }
      else
      {
        unint64_t v347 = 0;
        uint64_t v348 = 0;
        LODWORD(v349) = 0;
      }
    }
    else
    {
      unint64_t v347 = 0;
      uint64_t v348 = 0;
      uint64_t v349 = 0;
    }
LABEL_132:
    uint64_t v136 = *(void *)(a1 + 8);
    uint64_t v137 = v136 + 8;
    uint64_t v138 = *(void *)(v136 + 16);
    if (v138 != v136 + 8)
    {
      char v139 = 0;
      int v140 = 0;
      uint64_t v141 = 0;
      while (1)
      {
        if (v138) {
          char v142 = (uint64_t ***)(v138 - 56);
        }
        else {
          char v142 = 0;
        }
        if (v349)
        {
          int v143 = ((v142 >> 4) ^ (v142 >> 9)) & (v349 - 1);
          size_t v144 = (uint64_t ***)v347[v143];
          if (v142 == v144) {
            goto LABEL_144;
          }
          int v145 = 1;
          while (v144 != (uint64_t ***)-4096)
          {
            int v146 = v143 + v145++;
            int v143 = v146 & (v349 - 1);
            size_t v144 = (uint64_t ***)v347[v143];
            if (v142 == v144) {
              goto LABEL_144;
            }
          }
        }
        int v147 = *((_DWORD *)v142 + 8);
        if ((v147 & 0xF) == 1) {
          goto LABEL_144;
        }
        if (v138 && *((unsigned char *)v142 + 16) == 3)
        {
          if ((*((_DWORD *)v142 + 5) & 0x7FFFFFF) == 0) {
            goto LABEL_144;
          }
        }
        else if (!*((unsigned char *)v142 + 16) && (v147 & 0x800000) == 0 && v142[9] == (uint64_t **)(v142 + 9))
        {
          goto LABEL_144;
        }
        if ((*((unsigned char *)v142 + 23) & 0x10) == 0) {
          goto LABEL_167;
        }
        uint64_t v148 = ***v142;
        uint64_t v149 = *(void *)(v148 + 152);
        uint64_t v150 = *(unsigned int *)(v148 + 168);
        if (!v150) {
          goto LABEL_161;
        }
        LODWORD(v151) = (v150 - 1) & ((v142 >> 4) ^ (v142 >> 9));
        unsigned int v152 = (uint64_t ****)(v149 + 16 * v151);
        uint64_t v153 = *v152;
        if (*v152 != v142) {
          break;
        }
LABEL_162:
        unint64_t v156 = v152[1];
        if ((unint64_t)*v156 < 5
          || ((int v157 = *((_DWORD *)v156 + 4), v158 = *((unsigned __int8 *)v156 + 20), v157 == 1836477548)
            ? (BOOL v159 = v158 == 46)
            : (BOOL v159 = 0),
              !v159))
        {
LABEL_167:
          if ((v147 & 0x401C00) == 0 && (v147 & 0xF) != 0xA)
          {
            if (v140 >= v139)
            {
              uint64_t v160 = (v140 - v141) >> 3;
              unint64_t v161 = v160 + 1;
              if ((unint64_t)(v160 + 1) >> 61) {
                goto LABEL_357;
              }
              if ((v139 - v141) >> 2 > v161) {
                unint64_t v161 = (v139 - v141) >> 2;
              }
              if ((unint64_t)(v139 - v141) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v162 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v162 = v161;
              }
              if (v162)
              {
                if (v162 >> 61) {
LABEL_358:
                }
                  sub_1CB833614();
                int64_t v163 = v140;
                int v164 = (char *)operator new(8 * v162);
                int v140 = v163;
              }
              else
              {
                int v164 = 0;
              }
              unint64_t v165 = &v164[8 * v160];
              *(void *)unint64_t v165 = v142;
              unsigned int v166 = v165 + 8;
              if (v140 != v141)
              {
                do
                {
                  uint64_t v167 = *((void *)v140 - 1);
                  v140 -= 8;
                  *((void *)v165 - 1) = v167;
                  v165 -= 8;
                }
                while (v140 != v141);
                int v140 = v141;
              }
              uint64_t v141 = v165;
              char v139 = &v164[8 * v162];
              if (v140) {
                operator delete(v140);
              }
              int v140 = v166;
            }
            else
            {
              *(void *)int v140 = v142;
              v140 += 8;
            }
          }
        }
LABEL_144:
        uint64_t v138 = *(void *)(v138 + 8);
        if (v138 == v137)
        {
          uint64_t v136 = *(void *)(a1 + 8);
          std::string::size_type v168 = v140;
          goto LABEL_188;
        }
      }
      int v154 = 1;
      while (v153 != (uint64_t ***)-4096)
      {
        int v155 = v151 + v154++;
        uint64_t v151 = v155 & (v150 - 1);
        uint64_t v153 = *(uint64_t ****)(v149 + 16 * v151);
        if (v153 == v142)
        {
          unsigned int v152 = (uint64_t ****)(v149 + 16 * v151);
          goto LABEL_162;
        }
      }
LABEL_161:
      unsigned int v152 = (uint64_t ****)(v149 + 16 * v150);
      goto LABEL_162;
    }
    uint64_t v141 = 0;
    std::string::size_type v168 = 0;
LABEL_188:
    *(_OWORD *)int v368 = xmmword_1CFAC4320;
    *(void *)&v368[16] = 0;
    uint64_t v171 = *(int **)(v136 + 192);
    uint64_t v169 = v136 + 192;
    uint64_t v170 = v171;
    char v172 = *(unsigned char *)(v169 + 23);
    if (v172 >= 0) {
      uint64_t v173 = (int *)v169;
    }
    else {
      uint64_t v173 = v170;
    }
    size_t v174 = *(void *)(v169 + 8);
    if (v172 >= 0) {
      size_t v175 = v172 & 0x7F;
    }
    else {
      size_t v175 = v174;
    }
    llvm::MD5::update((int *)v368, v173, v175);
    llvm::MD5::final((int *)v368, v378);
    __p[0] = v141;
    if (v141 != v168)
    {
      *(void *)&v337[1] = v168;
      uint64_t v176 = *(uint64_t ****)__p[0];
      if ((v378[0] & *(unsigned char *)(a1 + 224)) <= 1u) {
        uint64_t v177 = 1;
      }
      else {
        uint64_t v177 = (v378[0] & *(unsigned char *)(a1 + 224));
      }
      uint64_t v340 = v177;
      unint64_t v178 = (uint64_t *)*(v176 - 4);
      std::string::size_type v179 = (llvm::DataLayout *)(*(void *)(a1 + 8) + 272);
      int v180 = (llvm::Type *)*v178;
      uint64_t v181 = sub_1CB83544C((uint64_t)v179, *v178);
      BOOL v183 = v182 == 1;
      char Alignment = llvm::DataLayout::getAlignment(v179, v180, 1);
      if (v183) {
      unint64_t v186 = ((1 << Alignment) + ((unint64_t)(v181 + 7) >> 3) - 1) & -(1 << Alignment);
      }
      uint64_t v187 = (v186 + (1 << *(_DWORD *)(a1 + 136)) - 1) & -(1 << *(_DWORD *)(a1 + 136));
      int v188 = (llvm::Type *)(v187 - v186);
      int64_t v339 = (uint64_t *)__p[0];
      if (v187 != v186)
      {
        if ((uint64_t)(v187 - v186) < 0) {
LABEL_357:
        }
          abort();
        uint64_t v189 = operator new(v187 - v186);
        bzero(v189, (size_t)v188);
        *((unsigned char *)v188 + (void)v189 - 1) = v340;
        int v190 = llvm::ArrayType::get((llvm::ArrayType *)(**(void **)a1 + 1912), v188);
        size_t v191 = llvm::ConstantDataSequential::getImpl(v189, v188, v190);
        BOOL v374 = (llvm::ConstantExpr *)v178;
        int v375 = v191;
        std::string::size_type v192 = (llvm::PoisonValue *)llvm::ConstantStruct::getTypeForElements(*(uint64_t **)*v178, (uint64_t)&v374, 2u, 0);
        unint64_t v178 = llvm::ConstantStruct::get(v192, (llvm::Type *)&v374, 2);
        operator delete(v189);
      }
      int v193 = operator new(0x78uLL);
      unint64_t v194 = (llvm::GlobalObject *)(v193 + 8);
      v193[13] = v193[13] & 0x38000000 | 1;
      *(void *)int v193 = 0;
      *((void *)v193 + 1) = 0;
      *((void *)v193 + 2) = 0;
      *((void *)v193 + 3) = v193 + 8;
      int v345 = (llvm::PointerType *)v193;
      uint64_t v195 = *(void *)(a1 + 8);
      uint64_t v196 = (llvm::PointerType *)*v178;
      char v197 = *((unsigned char *)v176 + 80);
      unsigned int v198 = v176 >> 4;
      if ((*((unsigned char *)v176 + 23) & 0x10) != 0)
      {
        uint64_t v199 = ***v176;
        uint64_t v200 = *(void *)(v199 + 152);
        uint64_t v201 = *(unsigned int *)(v199 + 168);
        if (v201)
        {
          LODWORD(v202) = (v201 - 1) & (v198 ^ (v176 >> 9));
          unint64_t v203 = (uint64_t ****)(v200 + 16 * v202);
          uint64_t v204 = *v203;
          if (*v203 != v176)
          {
            int v205 = 1;
            do
            {
              if (v204 == (uint64_t ***)-4096) {
                goto LABEL_210;
              }
              int v206 = v202 + v205++;
              uint64_t v202 = v206 & (v201 - 1);
              uint64_t v204 = *(uint64_t ****)(v200 + 16 * v202);
            }
            while (v204 != v176);
            unint64_t v203 = (uint64_t ****)(v200 + 16 * v202);
          }
        }
        else
        {
LABEL_210:
          unint64_t v203 = (uint64_t ****)(v200 + 16 * v201);
        }
        uint64_t v207 = (llvm::Value **)v203[1];
        unint64_t v210 = *v207;
        unint64_t v209 = (llvm::ConstantExpr *)(v207 + 2);
        BOOL v208 = v210;
      }
      else
      {
        BOOL v208 = 0;
        unint64_t v209 = (llvm::ConstantExpr *)&byte_1CFBCE98E;
      }
      LOWORD(v377) = 773;
      BOOL v374 = v209;
      int v375 = v208;
      uint64_t v376 = ".hwasan";
      uint64_t v211 = llvm::GlobalVariable::GlobalVariable((unint64_t *)v193 + 4, v195, v196, v197 & 1, 0, (unint64_t)v178, (const char **)&v374, 0, 0, 0, 0);
      llvm::GlobalObject::copyAttributesFrom((llvm::GlobalObject *)v211, (const llvm::GlobalObject *)v176);
      uint64_t v212 = v345;
      *((unsigned char *)v345 + 112) = *((unsigned char *)v345 + 112) & 0xFD | (_BYTE)v176[10] & 2;
      *((void *)v345 + 13) = v176[9];
      *((_DWORD *)v345 + 16) = *((_DWORD *)v345 + 16) & 0xFFFFBFC0 | 0x4008;
      llvm::GlobalObject::copyMetadata(v194, (const llvm::GlobalObject *)v176, 0);
      char v213 = *((_WORD *)v176 + 17);
      BOOL v214 = (v213 & 0x3F) == 0;
      char v215 = (v213 & 0x3F) - 1;
      if (v214) {
        char v215 = 0;
      }
      unint64_t v216 = 1 << v215;
      if (v214) {
        unint64_t v216 = 0;
      }
      if (v216 <= 1 << *(_DWORD *)(a1 + 136)) {
        unint64_t v216 = 1 << *(_DWORD *)(a1 + 136);
      }
      *((_DWORD *)v212 + 16) = ((__clz(__rbit64(v216)) << 16) + 0x10000) | *((_DWORD *)v212 + 16) & 0xFFC0FF3F;
      uint64_t v217 = *(llvm::ConstantExpr **)(a1 + 192);
      int v218 = *(uint64_t **)v217;
      BOOL v374 = v217;
      int v375 = v217;
      uint64_t v344 = (llvm::PointerType *)llvm::StructType::get(v218, (uint64_t)&v374, 2, 0);
      if (!v186)
      {
LABEL_219:
        unint64_t v219 = sub_1CC56C0C0((llvm *)0x2F, v194, *(llvm::Constant **)(a1 + 200), 0);
        uint64_t v220 = (llvm::Constant *)llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 200), v340 << *(_DWORD *)(a1 + 220), 0);
        Add = llvm::ConstantExpr::getAdd(v219, v220, 0, 0);
        uint64_t v222 = sub_1CC56C0C0((llvm *)0x30, Add, (llvm::Constant *)*v176, 0);
        int v223 = (llvm::PointerType *)v176[3];
        int64_t v224 = (llvm::Type *)(*((_DWORD *)*v176 + 2) >> 8);
        char v225 = v176[4] & 0xF;
        LOWORD(v377) = 257;
        unint64_t v226 = llvm::GlobalAlias::create(v223, v224, v225, (const char **)&v374, (unint64_t)v222, *(void *)(a1 + 8));
        int v227 = v226;
        int v228 = v176[4] & 0x30;
        int v229 = *((_DWORD *)v226 + 8);
        unsigned int v230 = v229 & 0xFFFFFFCF | v228;
        *((_DWORD *)v226 + 8) = v230;
        if ((v229 & 0xFu) - 7 >= 2)
        {
          if (!v228 || (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v226) & 1) != 0)
          {
LABEL_221:
            llvm::Value::takeName((int32x2_t ****)v227, (llvm::Value *)v176);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v176, (llvm::Value *)v227, (llvm::Value *)1);
            llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v176);
          }
          unsigned int v230 = *((_DWORD *)v227 + 8);
        }
        *((_DWORD *)v227 + 8) = v230 | 0x4000;
        goto LABEL_221;
      }
      unint64_t v231 = 0;
      uint64_t v343 = v340 << 24;
      LODWORD(v342) = v198 ^ (v176 >> 9);
      while (1)
      {
        uint64_t v232 = operator new(0x78uLL);
        unint64_t v233 = v232;
        uint64_t v234 = (llvm::detail::IEEEFloat *)(v232 + 8);
        v232[13] = v232[13] & 0x38000000 | 1;
        *(void *)uint64_t v232 = 0;
        *((void *)v232 + 1) = 0;
        *((void *)v232 + 2) = 0;
        *((void *)v232 + 3) = v232 + 8;
        if ((*((unsigned char *)v176 + 23) & 0x10) != 0)
        {
          uint64_t v235 = ***v176;
          uint64_t v236 = *(void *)(v235 + 152);
          uint64_t v237 = *(unsigned int *)(v235 + 168);
          if (v237)
          {
            LODWORD(v238) = (v237 - 1) & v342;
            int v239 = (uint64_t ****)(v236 + 16 * v238);
            uint64_t v240 = *v239;
            if (*v239 != v176)
            {
              int v241 = 1;
              do
              {
                if (v240 == (uint64_t ***)-4096) {
                  goto LABEL_230;
                }
                int v242 = v238 + v241++;
                uint64_t v238 = v242 & (v237 - 1);
                uint64_t v240 = *(uint64_t ****)(v236 + 16 * v238);
              }
              while (v240 != v176);
              int v239 = (uint64_t ****)(v236 + 16 * v238);
            }
          }
          else
          {
LABEL_230:
            int v239 = (uint64_t ****)(v236 + 16 * v237);
          }
          unsigned int v243 = (llvm::Value **)v239[1];
          uint64_t v246 = *v243;
          BOOL v245 = (llvm::ConstantExpr *)(v243 + 2);
          unsigned int v244 = v246;
        }
        else
        {
          unsigned int v244 = 0;
          BOOL v245 = (llvm::ConstantExpr *)&byte_1CFBCE98E;
        }
        uint64_t v247 = *(void *)(a1 + 8);
        LOWORD(v377) = 773;
        BOOL v374 = v245;
        int v375 = v244;
        uint64_t v376 = ".hwasan.descriptor";
        llvm::GlobalVariable::GlobalVariable((unint64_t *)v232 + 4, v247, v344, 1, 8, 0, (const char **)&v374, 0, 0, 0, 0);
        int64_t v248 = sub_1CC56C0C0((llvm *)0x2F, v194, *(llvm::Constant **)(a1 + 200), 0);
        unsigned int v249 = sub_1CC56C0C0((llvm *)0x2F, v234, *(llvm::Constant **)(a1 + 200), 0);
        unint64_t v250 = llvm::ConstantExpr::getSub(v248, v249, 0, 0);
        int v251 = (llvm::Constant *)llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 200), v231, 0);
        int v252 = llvm::ConstantExpr::getAdd(v250, v251, 0, 0);
        uint64_t v253 = sub_1CC56C0C0((llvm *)0x26, v252, *(llvm::Constant **)(a1 + 192), 0);
        uint64_t v254 = v186 - v231;
        if (v186 - v231 >= 0xFFFFF0) {
          uint64_t v254 = 16777200;
        }
        unint64_t v255 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 192), v254 | v343, 0);
        llvm::GlobalObject::setComdat(v234, *((llvm::Comdat **)v345 + 10));
        BOOL v374 = v253;
        int v375 = v255;
        int v256 = (llvm::PoisonValue *)llvm::ConstantStruct::getTypeForElements(**(uint64_t ***)v253, (uint64_t)&v374, 2u, 0);
        unint64_t v257 = (llvm::Constant *)llvm::ConstantStruct::get(v256, (llvm::Type *)&v374, 2);
        llvm::GlobalVariable::setInitializer((uint64_t)v234, v257);
        BOOL v259 = (llvm::detail::IEEEFloat *)llvm::UniqueStringSaver::save(***((void ***)v233 + 4) + 2136, "hwasan_globals", 0xEuLL);
        int v260 = v258;
        uint64_t v261 = ***((void ***)v233 + 4);
        BOOL v374 = v234;
        int v262 = *(_DWORD *)(v261 + 2520);
        if (!v262) {
          break;
        }
        uint64_t v263 = *(void *)(v261 + 2504);
        int v264 = v262 - 1;
        unsigned int v265 = v264 & ((v234 >> 4) ^ (v234 >> 9));
        int v266 = (llvm::detail::IEEEFloat **)(v263 + 24 * v265);
        BOOL v267 = *v266;
        if (*v266 != v234)
        {
          int64_t v271 = 0;
          int v272 = 1;
          while (v267 != (llvm::detail::IEEEFloat *)-4096)
          {
            if (v271) {
              BOOL v273 = 0;
            }
            else {
              BOOL v273 = v267 == (llvm::detail::IEEEFloat *)-8192;
            }
            if (v273) {
              int64_t v271 = v266;
            }
            unsigned int v274 = v265 + v272++;
            unsigned int v265 = v274 & v264;
            int v266 = (llvm::detail::IEEEFloat **)(v263 + 24 * v265);
            BOOL v267 = *v266;
            if (*v266 == v234) {
              goto LABEL_236;
            }
          }
          if (v271) {
            uint64_t v275 = v271;
          }
          else {
            uint64_t v275 = v266;
          }
          goto LABEL_250;
        }
LABEL_236:
        v266[1] = v259;
        v266[2] = v260;
        v233[16] = v233[16] & 0xFFBFFFFF | ((v260 != 0) << 22);
        uint64_t v268 = *(void *)a1;
        BOOL v374 = (llvm::ConstantExpr *)llvm::ValueAsMetadata::get(v194, v258);
        uint64_t v269 = llvm::MDTuple::getImpl(v268, &v374, 1, 0, 1);
        llvm::Value::setMetadata((uint64_t ***)v234, 22, v269);
        int v270 = *(void **)(a1 + 8);
        BOOL v374 = v234;
        sub_1CD1CF0D0(v270, "llvm.compiler.used", (const char *)0x12, &v374, 1);
        v231 += 16777200;
        if (v231 >= v186) {
          goto LABEL_219;
        }
      }
      uint64_t v275 = 0;
LABEL_250:
      int v266 = (llvm::detail::IEEEFloat **)sub_1CC5BF31C(v261 + 2504, (uint64_t)&v374, (uint64_t *)&v374, v275);
      int v276 = v374;
      v266[1] = 0;
      v266[2] = 0;
      void *v266 = v276;
      goto LABEL_236;
    }
    MEMORY[0x1D25D9CD0](v347, 8);
    int v97 = (int)v341;
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  BOOL v277 = byte_1EA61DA80 != 0;
  if (!word_1EA61DA08) {
    BOOL v277 = v97;
  }
  if (v277)
  {
    unint64_t v347 = 0;
    uint64_t v348 = 0;
    LODWORD(v349) = 0;
    int v351 = 0;
    uint64_t v352 = 0;
    unint64_t v350 = 0;
    uint64_t v278 = *(void *)(a1 + 8);
    uint64_t v279 = v278 + 24;
    uint64_t v280 = *(void *)(v278 + 32);
    if (v280 == v278 + 24) {
      goto LABEL_317;
    }
    while (1)
    {
      uint64_t v281 = v280 ? v280 - 56 : 0;
      if (v280 && *(unsigned char *)(v281 + 16) == 3)
      {
        if ((*(_DWORD *)(v281 + 20) & 0x7FFFFFF) == 0) {
          goto LABEL_278;
        }
      }
      else if (!*(unsigned char *)(v281 + 16) && *(void *)(v281 + 72) == v281 + 72 && (*(unsigned char *)(v281 + 34) & 0x80) == 0)
      {
        goto LABEL_278;
      }
      uint64_t v282 = *(void *)(v281 + 112);
      if (!v282 || (*(unsigned char *)(v282 + 18) & 8) == 0) {
        goto LABEL_278;
      }
      if ((*(_WORD *)(v281 + 18) & 8) != 0) {
        break;
      }
      if ((*(unsigned char *)(v282 + 16) & 0x20) == 0)
      {
        *(void *)int v368 = 0;
        unint64_t v285 = (uint64_t **)sub_1CD69A888((uint64_t)&v347, (unint64_t *)v368);
        uint64_t v286 = v285;
        unint64_t v288 = v285[1];
        unint64_t v287 = (unint64_t)v285[2];
        if ((unint64_t)v288 >= v287)
        {
          int v289 = *v285;
          uint64_t v290 = v288 - *v285;
          unint64_t v291 = v290 + 1;
          if ((unint64_t)(v290 + 1) >> 61) {
            goto LABEL_357;
          }
          uint64_t v292 = v287 - (void)v289;
          if (v292 >> 2 > v291) {
            unint64_t v291 = v292 >> 2;
          }
          if ((unint64_t)v292 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v293 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v293 = v291;
          }
          if (v293)
          {
            if (v293 >> 61) {
              goto LABEL_358;
            }
            uint64_t v294 = (char *)operator new(8 * v293);
          }
          else
          {
            uint64_t v294 = 0;
          }
          unint64_t v302 = (uint64_t *)&v294[8 * v290];
          *unint64_t v302 = v281;
          unint64_t v297 = v302 + 1;
          if (v288 != v289)
          {
            do
            {
              uint64_t v304 = *--v288;
              *--unint64_t v302 = v304;
            }
            while (v288 != v289);
            goto LABEL_311;
          }
          goto LABEL_312;
        }
LABEL_294:
        uint64_t *v288 = v281;
        unint64_t v297 = v288 + 1;
        goto LABEL_314;
      }
LABEL_278:
      uint64_t v280 = *(void *)(v280 + 8);
      if (v280 == v279)
      {
        if (v350 == v351
          || (v305 = sub_1CD69A93C(*(void *)(a1 + 8), *(uint64_t ***)(a1 + 192), *(void *)(a1 + 192), *(void *)(a1 + 192), *(void *)(a1 + 200), *(void *)(a1 + 176), *(void *)(a1 + 176), *(void *)(a1 + 176), *(void *)(a1 + 176), *(void *)(a1 + 176)), v344 = v306, v345 = v305, sub_1CD577C30(*(void *)(a1 + 8), "_Unwind_GetGR", (const char *)0xD, 0, *(uint64_t ***)(a1 + 160)), sub_1CD577C30(*(void *)(a1 + 8), "_Unwind_GetCFA", (const char *)0xE, 0, *(uint64_t ***)(a1 + 160)), v307 = v350, uint64_t v343 = (uint64_t)v351, v350 == v351))
        {
LABEL_317:
          sub_1CD58F044((uint64_t)&v347);
          goto LABEL_55;
        }
        uint64_t v341 = &v373;
        unsigned int v342 = &v372;
        int64_t v339 = &v371;
        uint64_t v340 = (uint64_t)&v368[16];
        *(_OWORD *)std::string __p = xmmword_1CD96DBE0;
        qmemcpy(v337, "ersonality_thunk__hwasan_persona", sizeof(v337));
        uint64_t v308 = (char *)operator new(0x20uLL);
        v346.__r_.__value_.__r.__words[0] = (std::string::size_type)v308;
        *(_OWORD *)&v346.__r_.__value_.__r.__words[1] = xmmword_1CD96DBE0;
        *(_OWORD *)uint64_t v308 = v337[1];
        *(_OWORD *)(v308 + 10) = v337[0];
        v308[26] = 0;
        unsigned int v309 = *v307;
        if (*v307)
        {
          if ((*((unsigned char *)v309 + 23) & 0x10) != 0)
          {
            uint64_t v310 = ***v309;
            uint64_t v311 = *(void *)(v310 + 152);
            uint64_t v312 = *(unsigned int *)(v310 + 168);
            if (v312)
            {
              LODWORD(v313) = (v312 - 1) & ((v309 >> 4) ^ (v309 >> 9));
              int v314 = (uint64_t ****)(v311 + 16 * v313);
              unint64_t v315 = *v314;
              if (*v314 != v309)
              {
                int v316 = 1;
                do
                {
                  if (v315 == (uint64_t ***)-4096) {
                    goto LABEL_326;
                  }
                  int v317 = v313 + v316++;
                  uint64_t v313 = v317 & (v312 - 1);
                  unint64_t v315 = *(uint64_t ****)(v311 + 16 * v313);
                }
                while (v315 != v309);
                int v314 = (uint64_t ****)(v311 + 16 * v313);
              }
            }
            else
            {
LABEL_326:
              int v314 = (uint64_t ****)(v311 + 16 * v312);
            }
            uint64_t v318 = v314[1];
            int v321 = *v318;
            unint64_t v320 = (char *)(v318 + 2);
            int64_t v319 = v321;
          }
          else
          {
            int64_t v319 = 0;
            unint64_t v320 = &byte_1CFBCE98E;
          }
          WORD4(v369) = 1283;
          *(void *)int v368 = ".";
          *(void *)&v368[16] = v320;
          *(void *)&long long v369 = v319;
          llvm::Twine::str((llvm::Twine *)v368, &v374);
          if (SHIBYTE(v376) >= 0) {
            unint64_t v322 = (const std::string::value_type *)&v374;
          }
          else {
            unint64_t v322 = (const std::string::value_type *)v374;
          }
          if (SHIBYTE(v376) >= 0) {
            std::string::size_type v323 = HIBYTE(v376) & 0x7F;
          }
          else {
            std::string::size_type v323 = (std::string::size_type)v375;
          }
          std::string::append(&v346, v322, v323);
          if (SHIBYTE(v376) < 0) {
            operator delete(v374);
          }
        }
        long long v324 = *(_OWORD *)(a1 + 192);
        *(void *)int v368 = *(void *)(a1 + 192);
        *(_OWORD *)&v368[8] = v324;
        *(void *)&long long v369 = *(void *)(a1 + 176);
        *((void *)&v369 + 1) = v369;
        unint64_t v325 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)v324, (uint64_t)v368, 5, 0);
        unsigned int v326 = *v307;
        if (*v307 && (*((unsigned __int8 *)v326 + 16) > 3u || (v326[4] & 0xFu) - 7 <= 1))
        {
          char v327 = 7;
          char v328 = 1;
        }
        else
        {
          char v328 = 0;
          char v327 = 3;
        }
        WORD4(v369) = 260;
        *(void *)int v368 = &v346;
        unint64_t v329 = *(void *)(a1 + 8);
        int64_t v330 = (unint64_t *)operator new(0x80uLL);
        uint64_t v331 = (llvm::GlobalValue *)(v330 + 1);
        *((_DWORD *)v330 + 7) = *((_DWORD *)v330 + 7) & 0x38000000 | 0x40000000;
        unint64_t *v330 = 0;
        llvm::Function::Function(v330 + 1, v325, v327, (llvm::Type *)0xFFFFFFFFLL, (const char **)v368, v329);
        if (v328)
        {
LABEL_342:
          *(void *)int v368 = "entry";
          WORD4(v369) = 259;
          operator new();
        }
        int v332 = *((_DWORD *)v330 + 10);
        unsigned int v333 = v332 & 0xFFFFFFCF | 0x10;
        *((_DWORD *)v330 + 10) = v333;
        if ((v332 & 0xFu) - 7 < 2)
        {
LABEL_346:
          *((_DWORD *)v330 + 10) = v333 | 0x4000;
        }
        else if ((llvm::GlobalValue::hasExternalWeakLinkage(v331) & 1) == 0)
        {
          unsigned int v333 = *((_DWORD *)v330 + 10);
          goto LABEL_346;
        }
        if ((v346.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v334 = &v346;
        }
        else {
          uint64_t v334 = (std::string *)v346.__r_.__value_.__r.__words[0];
        }
        if ((v346.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = *((unsigned char *)&v346.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          size_t size = v346.__r_.__value_.__l.__size_;
        }
        uint64_t v336 = llvm::Module::getOrInsertComdat(*(void *)(a1 + 8), (unsigned __int8 *)v334, size);
        llvm::GlobalObject::setComdat(v331, (llvm::Comdat *)v336);
        goto LABEL_342;
      }
    }
    int v283 = *(_DWORD *)(v281 + 20);
    if ((v283 & 0x40000000) != 0) {
      uint64_t v284 = *(llvm::Value ***)(v281 - 8);
    }
    else {
      uint64_t v284 = (llvm::Value **)(v281 - 32 * (v283 & 0x7FFFFFF));
    }
    *(void *)int v368 = llvm::Value::stripPointerCasts(*v284);
    unsigned int v295 = (uint64_t **)sub_1CD69A888((uint64_t)&v347, (unint64_t *)v368);
    uint64_t v286 = v295;
    unint64_t v288 = v295[1];
    unint64_t v296 = (unint64_t)v295[2];
    if ((unint64_t)v288 < v296) {
      goto LABEL_294;
    }
    unint64_t v298 = *v295;
    uint64_t v299 = v288 - *v295;
    unint64_t v300 = v299 + 1;
    if ((unint64_t)(v299 + 1) >> 61) {
      goto LABEL_357;
    }
    uint64_t v301 = v296 - (void)v298;
    if (v301 >> 2 > v300) {
      unint64_t v300 = v301 >> 2;
    }
    if ((unint64_t)v301 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v293 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v293 = v300;
    }
    if (v293)
    {
      if (v293 >> 61) {
        goto LABEL_358;
      }
      uint64_t v294 = (char *)operator new(8 * v293);
    }
    else
    {
      uint64_t v294 = 0;
    }
    unint64_t v302 = (uint64_t *)&v294[8 * v299];
    *unint64_t v302 = v281;
    unint64_t v297 = v302 + 1;
    if (v288 != v298)
    {
      do
      {
        uint64_t v303 = *--v288;
        *--unint64_t v302 = v303;
      }
      while (v288 != v298);
LABEL_311:
      unint64_t v288 = *v286;
    }
LABEL_312:
    *uint64_t v286 = v302;
    v286[1] = v297;
    v286[2] = (uint64_t *)&v294[8 * v293];
    if (v288) {
      operator delete(v288);
    }
LABEL_314:
    v286[1] = v297;
    goto LABEL_278;
  }
LABEL_55:
  if (*(_DWORD *)(a1 + 64) != 11)
  {
    uint64_t v121 = *(void *)(a1 + 8);
    int v122 = *(llvm::PointerType **)(a1 + 168);
    *(void *)int v368 = a1;
    *(void *)(a1 + 488) = llvm::Module::getOrInsertGlobal(v121, "__hwasan_tls", 0xCuLL, v122, (uint64_t (*)(uint64_t))sub_1CCB68364, (uint64_t)v368);
  }
  if (v353[0] != v354) {
    free(v353[0]);
  }
  return a1;
}

uint64_t sub_1CCB629C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v660 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 232) == a2) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 112);
  if (!v6 || (*(unsigned char *)(v6 + 18) & 8) == 0) {
    return 0;
  }
  size_t v613 = v615;
  uint64_t v614 = 0x1000000000;
  __int16 v610 = v612;
  uint64_t v611 = 0x1000000000;
  size_t v607 = v609;
  uint64_t v608 = 0x800000000;
  v592[0] = &unk_1F262C750;
  v592[1] = a1;
  v592[3] = v592;
  v593[0] = 0;
  v593[1] = 0;
  int v594 = 0;
  uint64_t v595 = 0;
  uint64_t v596 = 0;
  uint64_t v597 = 0;
  uint64_t v598 = &v600;
  uint64_t v599 = 0x400000000;
  int v601 = &v603;
  uint64_t v602 = 0x800000000;
  char v604 = 0;
  __int16 v606 = v605;
  v605[0] = &unk_1F262C750;
  v605[1] = a1;
  uint64_t v9 = a2 + 72;
  for (uint64_t i = *(void *)(a2 + 80); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == v9) {
      goto LABEL_96;
    }
    uint64_t v11 = i - 24;
    if (!i) {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(void *)(v11 + 48);
    if (v12 != v11 + 40) {
      break;
    }
  }
  int v13 = &unk_1EBCED000;
  while (1)
  {
    BOOL v14 = (char *)(v12 - 24);
    if (v12) {
      uint64_t v15 = v12 - 24;
    }
    else {
      uint64_t v15 = 0;
    }
    if (*(unsigned char *)(a1 + 214)) {
      llvm::memtag::StackInfoBuilder::visit((llvm::memtag::StackInfoBuilder *)v593, (llvm::Instruction *)v15);
    }
    if (*(unsigned char *)(a1 + 212) && *(unsigned char *)(v15 + 16) == 94)
    {
      if (v608 >= (unint64_t)HIDWORD(v608)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v607 + v608) = v15;
      LODWORD(v608) = v608 + 1;
    }
    v639 = (void *)v15;
    if (*(void *)(v15 + 48) || (*(unsigned char *)(v15 + 23) & 0x20) != 0)
    {
      if (llvm::Instruction::getMetadataImpl((uint64_t ***)v15, "nosanitize", 0xAuLL)) {
        goto LABEL_68;
      }
      BOOL v14 = (char *)v639;
    }
    if (*(char **)(a1 + 472) != v14)
    {
      int v16 = v14[16];
      if (v14 && v16 == 60)
      {
        if (byte_1EBCED018 && (sub_1CCB6859C(a1, (const llvm::Instruction *)v14, *((llvm **)v14 - 4)) & 1) == 0)
        {
          LODWORD(v575) = 0;
          LOBYTE(v657) = 0;
          __dst.__r_.__value_.__r.__words[0] = *(void *)v14;
          unint64_t v17 = (unint64_t)*((unsigned __int16 *)v14 + 9) >> 1;
LABEL_37:
          v634.__r_.__value_.__s.__data_[0] = __clz(1 << v17) ^ 0x3F;
          sub_1CD68E3C4((uint64_t)&v613, (uint64_t *)&v639, (unsigned int *)&v575, (char *)&v657, (uint64_t *)&__dst, (unsigned __int8 *)&v634);
        }
      }
      else if (v14 && v16 == 61)
      {
        if (byte_1EBCED0D8 && (sub_1CCB6859C(a1, (const llvm::Instruction *)v14, *((llvm **)v14 - 4)) & 1) == 0)
        {
          LODWORD(v575) = 1;
          LOBYTE(v657) = 1;
          __dst.__r_.__value_.__r.__words[0] = **((void **)v14 - 8);
          unint64_t v17 = (unint64_t)*((unsigned __int16 *)v14 + 9) >> 1;
          goto LABEL_37;
        }
      }
      else if (v14 && v16 == 65)
      {
        if (v13[408] && (sub_1CCB6859C(a1, (const llvm::Instruction *)v14, *((llvm **)v14 - 8)) & 1) == 0)
        {
          LODWORD(v575) = 0;
          LOBYTE(v657) = 1;
          char v18 = (std::string::size_type *)*((void *)v14 - 4);
LABEL_48:
          __dst.__r_.__value_.__r.__words[0] = *v18;
          sub_1CD68E454((uint64_t)&v613, (uint64_t *)&v639, (unsigned int *)&v575, (char *)&v657, (uint64_t *)&__dst);
        }
      }
      else
      {
        if (!v14 || v16 != 64)
        {
          if (v14 && v16 == 84)
          {
            unsigned int v19 = 0;
            for (char j = 84; ; char j = v14[16])
            {
              LODWORD(v575) = v19;
              if (j == 84) {
                uint64_t v21 = 0;
              }
              else {
                uint64_t v21 = j == 39 ? (*((_DWORD *)v14 + 20) + 1) : 2;
              }
              int v22 = *((_DWORD *)v14 + 5);
              if (v22 < 0 && (uint64_t v27 = v22 & 0x7FFFFFF, (*(void *)&v14[-32 * v27 - 8] & 0xFFFFFFFF0) != 0))
              {
                uint64_t v24 = -v27;
                int v23 = *(_DWORD *)&v14[-32 * v27 - 12] - *(_DWORD *)&v14[-*(void *)&v14[-32 * v27 - 8] + -32 * v27];
              }
              else
              {
                int v23 = 0;
                uint64_t v24 = -(uint64_t)(v22 & 0x7FFFFFF);
              }
              if (v19 >= ((-32 - 32 * v21 + 32 * (unint64_t)-v23 - 32 * v24) >> 5)) {
                break;
              }
              if (byte_1EBCED258)
              {
                int HasAttr = llvm::CallBase::paramHasAttr((uint64_t)v14, v19, 69);
                unsigned int v19 = v575;
                if (HasAttr)
                {
                  char v26 = sub_1CCB6859C(a1, (const llvm::Instruction *)v639, *(llvm **)&v14[32 * v575 + -32 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF)]);
                  unsigned int v19 = v575;
                  if ((v26 & 1) == 0)
                  {
                    __dst.__r_.__value_.__r.__words[0] = 0;
                    __dst.__r_.__value_.__r.__words[0] = sub_1CD49471C((uint64_t)v14, (int)v575);
                    LOBYTE(v657) = 0;
                    v634.__r_.__value_.__s.__data_[0] = 0;
                    sub_1CD68E3C4((uint64_t)&v613, (uint64_t *)&v639, (unsigned int *)&v575, (char *)&v657, (uint64_t *)&__dst, (unsigned __int8 *)&v634);
                    unsigned int v19 = v575;
                  }
                }
              }
              ++v19;
            }
            int v13 = (unsigned char *)&unk_1EBCED000;
          }
          goto LABEL_68;
        }
        if (v13[408] && (sub_1CCB6859C(a1, (const llvm::Instruction *)v14, *((llvm **)v14 - 12)) & 1) == 0)
        {
          LODWORD(v575) = 0;
          LOBYTE(v657) = 1;
          char v18 = (std::string::size_type *)*((void *)v14 - 8);
          goto LABEL_48;
        }
      }
    }
LABEL_68:
    int v28 = sub_1CBFB3AB0(v15);
    if (v28) {
      BOOL v29 = (_DWORD *)v15;
    }
    else {
      BOOL v29 = 0;
    }
    if (!v12 || !v28) {
      goto LABEL_85;
    }
    int v30 = *(_DWORD *)(*((void *)v29 - 4) + 36);
    if ((v30 - 196) < 2) {
      goto LABEL_877;
    }
    if (v30 == 199)
    {
      if (!byte_1EBCED0D8) {
        goto LABEL_85;
      }
      int v32 = llvm::Value::stripPointerCasts(*(llvm::Value **)&v29[-8 * (v29[5] & 0x7FFFFFF)]);
      uint64_t v33 = a1;
      uint64_t v34 = (const llvm::Instruction *)v29;
LABEL_82:
      if (sub_1CCB6859C(v33, v34, v32)) {
        goto LABEL_85;
      }
      goto LABEL_83;
    }
    if (v30 == 194)
    {
LABEL_877:
      if (!byte_1EBCED0D8
        || (char v31 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF))),
            sub_1CCB6859C(a1, (const llvm::Instruction *)v15, v31)))
      {
        if (!byte_1EBCED018) {
          goto LABEL_85;
        }
        int v32 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF) + 32));
        uint64_t v33 = a1;
        uint64_t v34 = (const llvm::Instruction *)v15;
        goto LABEL_82;
      }
    }
LABEL_83:
    if (v611 >= (unint64_t)HIDWORD(v611)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v610 + v611) = v29;
    LODWORD(v611) = v611 + 1;
LABEL_85:
    uint64_t v12 = *(void *)(v12 + 8);
    uint64_t v35 = i - 24;
    if (!i) {
      uint64_t v35 = 0;
    }
    if (v12 == v35 + 40) {
      break;
    }
LABEL_92:
    if (i == v9) {
      goto LABEL_96;
    }
  }
  while (1)
  {
    uint64_t i = *(void *)(i + 8);
    if (i == v9) {
      break;
    }
    uint64_t v36 = i - 24;
    if (!i) {
      uint64_t v36 = 0;
    }
    uint64_t v12 = *(void *)(v36 + 48);
    if (v12 != v36 + 40) {
      goto LABEL_92;
    }
  }
LABEL_96:
  uint64_t v37 = 0;
  uint64_t v568 = *(void *)(a2 + 40);
  uint64_t v38 = *(uint64_t **)a1;
  v639 = v641;
  uint64_t v640 = 0x200000000;
  uint64_t v645 = v38;
  v646 = &v654;
  v647 = &v655;
  uint64_t v648 = 0;
  int v649 = 0;
  __int16 v650 = 512;
  char v651 = 7;
  v644 = 0;
  v643 = 0;
  uint64_t v653 = 0;
  uint64_t v652 = 0;
  uint64_t v654 = &unk_1F2616E88;
  uint64_t v655 = &unk_1F2617008;
  char v39 = 1;
  do
  {
    char v565 = v39;
    if (v39) {
      unsigned int v40 = "load";
    }
    else {
      unsigned int v40 = "store";
    }
    if (v39) {
      size_t v41 = 4;
    }
    else {
      size_t v41 = 5;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v41;
    memcpy(&__dst, v40, v41);
    *(unsigned char *)((unint64_t)&__dst | v41) = 0;
    uint64_t v42 = *(unsigned __int8 *)(a1 + 209);
    char v578 = 8 * v42;
    if (v42) {
      uint64_t v575 = (void *)0x74726F62616F6E5FLL;
    }
    *((unsigned char *)&v575 + 8 * v42) = 0;
    sub_1CB906918((const void **)byte_1EA61DE50, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&v632);
    uint64_t v43 = std::string::append(&v632, "N");
    std::string::size_type v44 = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v634.__r_.__value_.__l.__data_ = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v634.__r_.__value_.__r.__words[2] = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    if (v578 >= 0) {
      int v45 = (const std::string::value_type *)&v575;
    }
    else {
      int v45 = (const std::string::value_type *)v575;
    }
    if (v578 >= 0) {
      std::string::size_type v46 = v578 & 0x7F;
    }
    else {
      std::string::size_type v46 = v576;
    }
    char v47 = std::string::append(&v634, v45, v46);
    std::string::size_type v48 = v47->__r_.__value_.__r.__words[2];
    long long v657 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v658[0] = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    if (v658[0] >= 0) {
      uint64_t v49 = (unsigned __int8 *)&v657;
    }
    else {
      uint64_t v49 = (unsigned __int8 *)v657;
    }
    if (v658[0] >= 0) {
      int v50 = (const char *)(HIBYTE(v658[0]) & 0x7F);
    }
    else {
      int v50 = (const char *)*((void *)&v657 + 1);
    }
    uint64_t v51 = (uint64_t **)(*v645 + 1576);
    std::string __p = *(void **)(a1 + 168);
    v637 = __p;
    int v52 = (llvm::PointerType *)llvm::FunctionType::get(v51, (uint64_t)&__p, 2, 0);
    inserted = llvm::Module::getOrInsertFunction(v568, v49, v50, v52, 0);
    uint64_t v54 = a1 + 16 * v37;
    *(void *)(v54 + 400) = inserted;
    *(void *)(v54 + 408) = v55;
    if (SHIBYTE(v658[0]) < 0) {
      operator delete((void *)v657);
    }
    if (SHIBYTE(v634.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v634.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v632.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v632.__r_.__value_.__l.__data_);
    }
    for (uint64_t k = 0; k != 5; ++k)
    {
      sub_1CB906918((const void **)byte_1EA61DE50, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&v632);
      uint64_t v57 = 0;
      unint64_t v58 = 1 << k;
      do
      {
        *((unsigned char *)v658 + v57-- + 4) = (v58 % 0xA) | 0x30;
        BOOL v59 = v58 > 9;
        v58 /= 0xAuLL;
      }
      while (v59);
      sub_1CC028D80(&__p, (char *)v658 + v57 + 5, (char *)v658 + 5, -v57);
      if (SHIBYTE(v638) >= 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if (SHIBYTE(v638) >= 0) {
        std::string::size_type v61 = HIBYTE(v638) & 0x7F;
      }
      else {
        std::string::size_type v61 = (std::string::size_type)v637;
      }
      uint64_t v62 = std::string::append(&v632, p_p, v61);
      std::string::size_type v63 = v62->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v634.__r_.__value_.__l.__data_ = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      v634.__r_.__value_.__r.__words[2] = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      if (v578 >= 0) {
        unsigned int v64 = (const std::string::value_type *)&v575;
      }
      else {
        unsigned int v64 = (const std::string::value_type *)v575;
      }
      if (v578 >= 0) {
        std::string::size_type v65 = v578 & 0x7F;
      }
      else {
        std::string::size_type v65 = v576;
      }
      unint64_t v66 = std::string::append(&v634, v64, v65);
      std::string::size_type v67 = v66->__r_.__value_.__r.__words[2];
      long long v657 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      v658[0] = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      if (v658[0] >= 0) {
        uint64_t v68 = (unsigned __int8 *)&v657;
      }
      else {
        uint64_t v68 = (unsigned __int8 *)v657;
      }
      if (v658[0] >= 0) {
        uint64_t v69 = (const char *)(HIBYTE(v658[0]) & 0x7F);
      }
      else {
        uint64_t v69 = (const char *)*((void *)&v657 + 1);
      }
      uint64_t v70 = (uint64_t **)(*v645 + 1576);
      v656 = *(unsigned __int8 **)(a1 + 168);
      int v71 = (llvm::PointerType *)llvm::FunctionType::get(v70, (uint64_t)&v656, 1, 0);
      uint64_t v72 = llvm::Module::getOrInsertFunction(v568, v68, v69, v71, 0);
      uint64_t v73 = a1 + 80 * v37 + 16 * k;
      *(void *)(v73 + 240) = v72;
      *(void *)(v73 + 248) = v74;
      if (SHIBYTE(v658[0]) < 0) {
        operator delete((void *)v657);
      }
      if (SHIBYTE(v634.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v634.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v638) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v632.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v632.__r_.__value_.__l.__data_);
      }
    }
    if (v578 < 0) {
      operator delete(v575);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    char v39 = 0;
    uint64_t v37 = 1;
  }
  while ((v565 & 1) != 0);
  *(void *)(a1 + 432) = sub_1CCAD3B00(v568, "__hwasan_tag_memory", (const char *)0x13, 0, (uint64_t **)(*v645 + 1576), *(void *)(a1 + 176), *(void *)(a1 + 184), *(void *)(a1 + 168));
  *(void *)(a1 + 440) = v75;
  *(void *)(a1 + 448) = sub_1CD577C30(v568, "__hwasan_generate_tag", (const char *)0x15, 0, *(uint64_t ***)(a1 + 184));
  *(void *)(a1 + 456) = v76;
  unsigned int v77 = llvm::ArrayType::get((llvm::ArrayType *)(*v645 + 1912), 0);
  *(void *)(a1 + 464) = llvm::Module::getOrInsertGlobal(v568, "__hwasan_shadow", 0xFuLL, v77);
  if (!*(unsigned char *)(a1 + 208) || byte_1EBCECE98)
  {
    if (byte_1EA61DE50[23] < 0) {
      sub_1CB8BDF7C((uint64_t)&__dst, *(const void **)byte_1EA61DE50, *(unint64_t *)&byte_1EA61DE50[8]);
    }
    else {
      std::string __dst = *(std::string *)byte_1EA61DE50;
    }
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
    __dst.__r_.__value_.__s.__data_[0] = 0;
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = *((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t size = __dst.__r_.__value_.__l.__size_;
  }
  sub_1CB907098((uint64_t)&v575, size + 7);
  if (v578 >= 0) {
    __int16 v79 = &v575;
  }
  else {
    __int16 v79 = v575;
  }
  if (size)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    memmove(v79, p_dst, size);
  }
  strcpy((char *)v79 + size, "memmove");
  if (v578 >= 0) {
    int v81 = (unsigned __int8 *)&v575;
  }
  else {
    int v81 = (unsigned __int8 *)v575;
  }
  if (v578 >= 0) {
    char v82 = (const char *)(v578 & 0x7F);
  }
  else {
    char v82 = (const char *)v576;
  }
  char v83 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v645 + 1912), 0);
  unint64_t v84 = llvm::PointerType::get((llvm::PointerType *)(*v645 + 1912), 0);
  unint64_t v85 = llvm::PointerType::get((llvm::PointerType *)(*v645 + 1912), 0);
  *(void *)(a1 + 72) = sub_1CD68E044(v568, v81, v82, 0, v83, v84, v85, *(void *)(a1 + 168));
  *(void *)(a1 + 80) = v86;
  if (v578 < 0) {
    operator delete(v575);
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v87 = *((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t v87 = __dst.__r_.__value_.__l.__size_;
  }
  sub_1CB907098((uint64_t)&v575, v87 + 6);
  if (v578 >= 0) {
    int v88 = &v575;
  }
  else {
    int v88 = v575;
  }
  if (v87)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v89 = &__dst;
    }
    else {
      unsigned int v89 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    memmove(v88, v89, v87);
  }
  strcpy((char *)v88 + v87, "memcpy");
  if (v578 >= 0) {
    unint64_t v90 = (unsigned __int8 *)&v575;
  }
  else {
    unint64_t v90 = (unsigned __int8 *)v575;
  }
  if (v578 >= 0) {
    uint64_t v91 = (const char *)(v578 & 0x7F);
  }
  else {
    uint64_t v91 = (const char *)v576;
  }
  uint64_t v92 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v645 + 1912), 0);
  unint64_t v93 = llvm::PointerType::get((llvm::PointerType *)(*v645 + 1912), 0);
  unint64_t v94 = llvm::PointerType::get((llvm::PointerType *)(*v645 + 1912), 0);
  *(void *)(a1 + 88) = sub_1CD68E044(v568, v90, v91, 0, v92, v93, v94, *(void *)(a1 + 168));
  *(void *)(a1 + 96) = v95;
  if (v578 < 0) {
    operator delete(v575);
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v96 = *((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t v96 = __dst.__r_.__value_.__l.__size_;
  }
  sub_1CB907098((uint64_t)&v575, v96 + 6);
  if (v578 >= 0) {
    int v97 = &v575;
  }
  else {
    int v97 = v575;
  }
  if (v96)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v98 = &__dst;
    }
    else {
      unint64_t v98 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    memmove(v97, v98, v96);
  }
  strcpy((char *)v97 + v96, "memset");
  if (v578 >= 0) {
    uint64_t v99 = (unsigned __int8 *)&v575;
  }
  else {
    uint64_t v99 = (unsigned __int8 *)v575;
  }
  if (v578 >= 0) {
    uint64_t v100 = (const char *)(v578 & 0x7F);
  }
  else {
    uint64_t v100 = (const char *)v576;
  }
  int v101 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v645 + 1912), 0);
  unint64_t v102 = llvm::PointerType::get((llvm::PointerType *)(*v645 + 1912), 0);
  *(void *)(a1 + 104) = sub_1CD68E044(v568, v99, v100, 0, v101, v102, *v645 + 1960, *(void *)(a1 + 168));
  *(void *)(a1 + 112) = v103;
  if (v578 < 0) {
    operator delete(v575);
  }
  *(void *)(a1 + 120) = sub_1CD57B9C0(v568, "__hwasan_handle_vfork", (const char *)0x15, 0, (uint64_t **)(*v645 + 1576), *(void *)(a1 + 168));
  *(void *)(a1 + 128) = v104;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (v639 != v641) {
    free(v639);
  }
  BOOL v566 = v608 != 0;
  if (v608)
  {
    uint64_t v105 = (char *)v607;
    for (uint64_t m = 8 * v608; m; m -= 8)
    {
      uint64_t v107 = 0;
      uint64_t v108 = *(void *)(*(void *)v105 + 32);
      if (v108) {
        BOOL v109 = v108 == *(void *)(*(void *)v105 + 40) + 40;
      }
      else {
        BOOL v109 = 1;
      }
      if (v109) {
        uint64_t v110 = 0;
      }
      else {
        uint64_t v110 = v108 - 24;
      }
      unint64_t v111 = **(uint64_t ***)v110;
      v639 = v641;
      uint64_t v640 = 0x200000000;
      uint64_t v645 = v111;
      v646 = &v654;
      v647 = &v655;
      uint64_t v648 = 0;
      int v649 = 0;
      __int16 v650 = 512;
      char v651 = 7;
      v643 = 0;
      v644 = 0;
      uint64_t v652 = 0;
      uint64_t v653 = 0;
      uint64_t v654 = &unk_1F2616E88;
      uint64_t v655 = &unk_1F2617008;
      v643 = *(uint64_t ***)(v110 + 40);
      v644 = (void **)(v110 + 24);
      uint64_t v112 = *(void **)(v110 + 48);
      uint64_t v575 = v112;
      if (v112)
      {
        llvm::MetadataTracking::track((uint64_t)&v575, (unsigned __int8 *)v112, 2);
        uint64_t v107 = v575;
      }
      sub_1CB8461A4((uint64_t)&v639, 0, (uint64_t)v107);
      if (!v575) {
        goto LABEL_236;
      }
      int v117 = *(unsigned __int8 *)v575;
      if ((v117 - 4) > 0x1E)
      {
        if ((v117 - 3) >= 0xFFFFFFFE) {
          int v120 = v575;
        }
        else {
          int v120 = 0;
        }
        if ((v117 - 3) < 0xFFFFFFFE)
        {
          if (v117 == 3) {
            *((void *)v575 + 1) = 0;
          }
          goto LABEL_236;
        }
        unint64_t v119 = (unint64_t)v120 + 8;
      }
      else
      {
        if ((*((unsigned char *)v575 + 1) & 0x7F) != 2 && !*((_DWORD *)v575 + 3)) {
          goto LABEL_236;
        }
        uint64_t v118 = *((void *)v575 + 2);
        if ((v118 & 4) == 0) {
          goto LABEL_236;
        }
        unint64_t v119 = v118 & 0xFFFFFFFFFFFFFFF8;
        if (!v119) {
          goto LABEL_236;
        }
      }
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v575;
      sub_1CC5FA668(v119 + 16, &__dst);
LABEL_236:
      uint64_t v113 = *(uint64_t ***)(a1 + 120);
      uint64_t v114 = *(uint64_t ***)(a1 + 128);
      if (*(_DWORD *)(a1 + 48) == 42) {
        size_t v115 = 3;
      }
      else {
        size_t v115 = 2;
      }
      if (*(_DWORD *)(a1 + 48) == 42) {
        int v116 = "rsp";
      }
      else {
        int v116 = "sp";
      }
      uint64_t v575 = (void *)sub_1CCB68690((uint64_t **)a1, (uint64_t *)&v639, (unsigned __int8 *)v116, v115);
      LOWORD(v618) = 257;
      sub_1CB845BAC((uint64_t *)&v639, v113, v114, (uint64_t *)&v575, 1, (uint64_t)&__dst, 0);
      if (v639 != v641) {
        free(v639);
      }
      v105 += 8;
    }
  }
  uint64_t v121 = v595;
  int v122 = v596;
  if (v595 == v596)
  {
    uint64_t v123 = a2;
    if ((*(_WORD *)(a2 + 18) & 8) == 0)
    {
      int v122 = v595;
      std::string::size_type v124 = a1;
      goto LABEL_264;
    }
    int v133 = *(_DWORD *)(a2 + 20);
    uint64_t v7 = v566;
    if ((v133 & 0x40000000) != 0) {
      size_t v134 = *(uint64_t *****)(a2 - 8);
    }
    else {
      size_t v134 = (uint64_t ****)(a2 - 32 * (v133 & 0x7FFFFFF));
    }
    std::string::size_type v124 = a1;
    int v143 = *v134;
    if ((*((unsigned char *)v143 + 23) & 0x10) == 0) {
      goto LABEL_338;
    }
    uint64_t v144 = ***v143;
    uint64_t v145 = *(void *)(v144 + 152);
    uint64_t v146 = *(unsigned int *)(v144 + 168);
    if (!v146) {
      goto LABEL_324;
    }
    LODWORD(v147) = (v146 - 1) & ((v143 >> 4) ^ (v143 >> 9));
    uint64_t v148 = (uint64_t ****)(v145 + 16 * v147);
    uint64_t v149 = *v148;
    if (*v148 != v143)
    {
      int v150 = 1;
      while (v149 != (uint64_t ***)-4096)
      {
        int v151 = v147 + v150++;
        uint64_t v147 = v151 & (v146 - 1);
        uint64_t v149 = *(uint64_t ****)(v145 + 16 * v147);
        if (v149 == v143)
        {
          uint64_t v148 = (uint64_t ****)(v145 + 16 * v147);
          goto LABEL_325;
        }
      }
LABEL_324:
      uint64_t v148 = (uint64_t ****)(v145 + 16 * v146);
    }
LABEL_325:
    size_t v175 = v148[1];
    if (*v175 == (uint64_t **)26)
    {
      uint64_t v176 = v175[2];
      uint64_t v177 = v175[3];
      unint64_t v178 = v175[4];
      int v179 = *((unsigned __int16 *)v175 + 20);
      BOOL v182 = v176 == (uint64_t **)0x6E61736177685F5FLL
          && v177 == (uint64_t **)0x616E6F737265705FLL
          && v178 == (uint64_t **)0x7568745F7974696CLL
          && v179 == 27502;
      int v122 = v595;
      if (v182)
      {
        sub_1CD5C0280((void *)a2, 0);
        *(_WORD *)(a2 + 18) &= ~8u;
        uint64_t v7 = 1;
        uint64_t v121 = v595;
        int v122 = v596;
      }
    }
    else
    {
LABEL_338:
      int v122 = v595;
    }
  }
  else
  {
    std::string::size_type v124 = a1;
    uint64_t v123 = a2;
LABEL_264:
    uint64_t v7 = v566;
  }
  if (v121 != v122 || v614 || v611)
  {
    uint64_t v125 = 0;
    uint64_t v126 = *(void *)(v123 + 80);
    if (v126) {
      uint64_t v127 = v126 - 24;
    }
    else {
      uint64_t v127 = 0;
    }
    uint64_t v128 = *(void *)(v127 + 48);
    if (v128) {
      int v129 = (uint64_t **)(v128 - 24);
    }
    else {
      int v129 = 0;
    }
    uint64_t v130 = **v129;
    uint64_t v575 = v577;
    uint64_t v576 = 0x200000000;
    uint64_t v581 = v130;
    int v582 = &v590;
    uint64_t v583 = &v591;
    uint64_t v584 = 0;
    int v585 = 0;
    __int16 v586 = 512;
    char v587 = 7;
    uint64_t v579 = 0;
    v580 = 0;
    uint64_t v588 = 0;
    uint64_t v589 = 0;
    uint64_t v590 = &unk_1F2616E88;
    uint64_t v591 = &unk_1F2617008;
    uint64_t v579 = v129[5];
    v580 = v129 + 3;
    unsigned int v131 = (unsigned __int8 *)v129[6];
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
    if (v131)
    {
      llvm::MetadataTracking::track((uint64_t)&__dst, v131, 2);
      uint64_t v125 = __dst.__r_.__value_.__r.__words[0];
    }
    sub_1CB8461A4((uint64_t)&v575, 0, v125);
    if (__dst.__r_.__value_.__r.__words[0])
    {
      int v514 = *__dst.__r_.__value_.__l.__data_;
      if ((v514 - 4) > 0x1E)
      {
        if ((v514 - 3) >= 0xFFFFFFFE) {
          std::string::size_type v517 = __dst.__r_.__value_.__r.__words[0];
        }
        else {
          std::string::size_type v517 = 0;
        }
        if ((v514 - 3) < 0xFFFFFFFE)
        {
          if (v514 == 3) {
            *(void *)(__dst.__r_.__value_.__r.__words[0] + 8) = 0;
          }
          goto LABEL_277;
        }
        unint64_t v516 = v517 + 8;
      }
      else
      {
        if ((*(unsigned char *)(__dst.__r_.__value_.__r.__words[0] + 1) & 0x7F) != 2
          && !*(_DWORD *)(__dst.__r_.__value_.__r.__words[0] + 12))
        {
          goto LABEL_277;
        }
        uint64_t v515 = *(void *)(__dst.__r_.__value_.__r.__words[0] + 16);
        if ((v515 & 4) == 0) {
          goto LABEL_277;
        }
        unint64_t v516 = v515 & 0xFFFFFFFFFFFFFFF8;
        if (!v516) {
          goto LABEL_277;
        }
      }
      v639 = &__dst;
      sub_1CC5FA668(v516 + 16, &v639);
    }
LABEL_277:
    BOOL v132 = byte_1EBCEDB58 && *(unsigned char *)(v124 + 154) && v595 != v596;
    if (*(unsigned char *)(v124 + 153))
    {
      if (v132) {
        goto LABEL_306;
      }
      if (*(_DWORD *)(v124 + 64) == 11)
      {
        int v140 = (llvm::Instruction *)sub_1CCB68828(*(uint64_t ***)(v124 + 176), (uint64_t *)&v575, *(void **)(v124 + 464));
        *(void *)(v124 + 472) = v140;
      }
      else
      {
        int v140 = *(llvm::Instruction **)(v124 + 472);
      }
      goto LABEL_305;
    }
    unint64_t v135 = *(void *)(v124 + 144);
    if (v135 == -1)
    {
      if (!*(unsigned char *)(v124 + 152))
      {
        uint64_t v136 = llvm::Module::getOrInsertGlobal(*(void *)(v579[7] + 40), "__hwasan_shadow_memory_dynamic_address", 0x26uLL, *(llvm::PointerType **)(v124 + 176));
        uint64_t v137 = *(llvm::Type **)(v124 + 176);
        LOWORD(v618) = 257;
        char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v579[7] + 40) + 272), v137, 1);
        char v139 = operator new(0x60uLL);
        v139[13] = v139[13] & 0x38000000 | 1;
        int v140 = (llvm::Instruction *)(v139 + 8);
        *(void *)char v139 = 0;
        *((void *)v139 + 1) = 0;
        *((void *)v139 + 2) = 0;
        *((void *)v139 + 3) = v139 + 8;
        __int16 v642 = 257;
        llvm::LoadInst::LoadInst((llvm::Value *)(v139 + 8), (uint64_t)v137, (uint64_t)v136, (const char **)&v639, 0, Alignment, 0);
        (*((void (**)(void **, llvm::Instruction *, std::string *, uint64_t *, uint64_t **))*v583 + 2))(v583, v140, &__dst, v579, v580);
        if (v576)
        {
          uint64_t v518 = (llvm::MDNode **)v575;
          long long v519 = (llvm::MDNode **)((char *)v575 + 16 * v576);
          do
          {
            llvm::Instruction::setMetadata(v140, *(_DWORD *)v518, v518[1]);
            v518 += 2;
          }
          while (v518 != v519);
        }
        std::string::size_type v124 = a1;
LABEL_302:
        *(void *)(v124 + 472) = v140;
        if (v132)
        {
LABEL_306:
          unsigned int v152 = *(llvm::PointerType **)(v124 + 168);
          uint64_t v153 = v579;
          if ((*(_DWORD *)(v124 + 48) - 3) <= 2 && *(_DWORD *)(v124 + 64) == 11)
          {
            int v154 = *(uint64_t ***)(v579[7] + 40);
            llvm::Intrinsic::getType(*v154, 294, 0, 0);
            Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v154, 294, 0, 0);
            llvm::Module::getOrInsertFunction((uint64_t)v154, "llvm.thread.pointer", (const char *)0x13, Type, 0);
            uint64_t v157 = v156;
            int v158 = 0;
            uint64_t v159 = *(void *)v581 + 1912;
            if (v157) {
              int v158 = *(uint64_t ***)(v157 + 24);
            }
            __int16 v642 = 257;
            uint64_t v160 = (const llvm::APInt *)sub_1CB845BAC((uint64_t *)&v575, v158, (uint64_t **)v157, 0, 0, (uint64_t)&v639, 0);
            LOWORD(v618) = 257;
            unint64_t v161 = sub_1CB930CF4((uint64_t *)&v575, v159, v160, 48, (uint64_t)&__dst);
            unint64_t v162 = (llvm::Value *)llvm::PointerType::get(v152, 0);
            __int16 v659 = 257;
            int v164 = sub_1CC277FE0((uint64_t)&v575, v161, v162, (uint64_t)&v657, v163);
            unsigned int v152 = *(llvm::PointerType **)(v124 + 168);
            uint64_t v153 = v579;
          }
          else
          {
            int v164 = *(llvm::Instruction **)(v124 + 488);
          }
          LOWORD(v618) = 257;
          char v165 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v153[7] + 40) + 272), v152, 1);
          unsigned int v166 = operator new(0x60uLL);
          v166[13] = v166[13] & 0x38000000 | 1;
          uint64_t v167 = (llvm::Instruction *)(v166 + 8);
          *(void *)unsigned int v166 = 0;
          *((void *)v166 + 1) = 0;
          *((void *)v166 + 2) = 0;
          *((void *)v166 + 3) = v166 + 8;
          __int16 v642 = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v166 + 8), (uint64_t)v152, (uint64_t)v164, (const char **)&v639, 0, v165, 0);
          (*((void (**)(void **, llvm::Instruction *, std::string *, uint64_t *, uint64_t **))*v583 + 2))(v583, v167, &__dst, v579, v580);
          if (v576)
          {
            uint64_t v512 = (llvm::MDNode **)v575;
            long long v513 = (llvm::MDNode **)((char *)v575 + 16 * v576);
            do
            {
              llvm::Instruction::setMetadata(v167, *(_DWORD *)v512, v512[1]);
              v512 += 2;
            }
            while (v512 != v513);
          }
          std::string::size_type v168 = v167;
          if ((*(_DWORD *)(a1 + 48) - 3) >= 3) {
            std::string::size_type v168 = sub_1CCB68794(*(unsigned char *)(a1 + 208), (llvm::Type *)*(unsigned int *)(a1 + 220), (uint64_t)&v575, (llvm::ConstantInt **)v167);
          }
          if (v132)
          {
            uint64_t v169 = v579[7];
            __int16 v642 = 257;
            uint64_t v170 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v167, 3uLL, 0);
            *(void *)(a1 + 480) = sub_1CC5357E8((uint64_t)&v575, (uint64_t)v167, (uint64_t)v170, (uint64_t)&v639, 0);
            if (*(_DWORD *)(a1 + 48) == 3)
            {
              uint64_t v171 = (unsigned __int8 *)sub_1CCB68690((uint64_t **)a1, (uint64_t *)&v575, "pc", 2uLL);
            }
            else
            {
              uint64_t v172 = *(void *)(a1 + 168);
              LOWORD(v618) = 257;
              uint64_t v171 = (unsigned __int8 *)v169;
              if (*(void *)v169 != v172)
              {
                if (*(unsigned __int8 *)(v169 + 16) <= 0x14u)
                {
                  uint64_t v171 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v582 + 28))(v582, 47, v169, v172);
                  if (v171) {
                    BOOL v183 = v171[16] >= 0x1Cu;
                  }
                  else {
                    BOOL v183 = 0;
                  }
                  if (v183)
                  {
                    (*((void (**)(void **, unsigned __int8 *, std::string *, uint64_t *, uint64_t **))*v583 + 2))(v583, v171, &__dst, v579, v580);
                    if (v576)
                    {
                      uint64_t v546 = (llvm::MDNode **)v575;
                      uint64_t v547 = (llvm::MDNode **)((char *)v575 + 16 * v576);
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v171, *(_DWORD *)v546, v546[1]);
                        v546 += 2;
                      }
                      while (v546 != v547);
                    }
                    uint64_t v123 = a2;
                  }
                }
                else
                {
                  __int16 v642 = 257;
                  uint64_t v171 = (unsigned __int8 *)llvm::CastInst::Create(47, v169, v172, (const char **)&v639, 0);
                  (*((void (**)(void **, unsigned __int8 *, std::string *, uint64_t *, uint64_t **))*v583 + 2))(v583, v171, &__dst, v579, v580);
                  if (v576)
                  {
                    uint64_t v173 = (llvm::MDNode **)v575;
                    size_t v174 = (llvm::MDNode **)((char *)v575 + 16 * v576);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v171, *(_DWORD *)v173, v173[1]);
                      v173 += 2;
                    }
                    while (v173 != v174);
                  }
                }
              }
            }
            uint64_t v184 = *(void *)(v169 + 40);
            v639 = (void *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v581 + 1912), (llvm::Type *)*(unsigned int *)(v184 + 276));
            uint64_t Declaration = llvm::Intrinsic::getDeclaration((uint64_t **)v184, 147, (uint64_t)&v639, 1);
            int v188 = (uint64_t **)Declaration;
            if (Declaration) {
              uint64_t v189 = *(uint64_t ***)(Declaration + 24);
            }
            else {
              uint64_t v189 = 0;
            }
            v634.__r_.__value_.__r.__words[0] = (std::string::size_type)llvm::Constant::getNullValue((llvm::Constant *)(*(void *)v581 + 1960), v186, v187);
            LOWORD(v618) = 257;
            uint64_t v190 = sub_1CB845BAC((uint64_t *)&v575, v189, v188, (uint64_t *)&v634, 1, (uint64_t)&__dst, 0);
            size_t v191 = (unsigned __int8 *)v190;
            uint64_t v192 = *(void *)(a1 + 168);
            __int16 v659 = 257;
            if (*(void *)v190 != v192)
            {
              if (*(unsigned __int8 *)(v190 + 16) <= 0x14u)
              {
                size_t v191 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v582 + 28))(v582, 47, v190, v192);
                if (v191) {
                  BOOL v195 = v191[16] >= 0x1Cu;
                }
                else {
                  BOOL v195 = 0;
                }
                if (v195)
                {
                  (*((void (**)(void **, unsigned __int8 *, long long *, uint64_t *, uint64_t **))*v583 + 2))(v583, v191, &v657, v579, v580);
                  if (v576)
                  {
                    int v540 = (llvm::MDNode **)v575;
                    uint64_t v541 = (llvm::MDNode **)((char *)v575 + 16 * v576);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v191, *(_DWORD *)v540, v540[1]);
                      v540 += 2;
                    }
                    while (v540 != v541);
                  }
                  uint64_t v123 = a2;
                }
              }
              else
              {
                __int16 v642 = 257;
                size_t v191 = (unsigned __int8 *)llvm::CastInst::Create(47, v190, v192, (const char **)&v639, 0);
                (*((void (**)(void **, unsigned __int8 *, long long *, uint64_t *, uint64_t **))*v583 + 2))(v583, v191, &v657, v579, v580);
                if (v576)
                {
                  int v193 = (llvm::MDNode **)v575;
                  unint64_t v194 = (llvm::MDNode **)((char *)v575 + 16 * v576);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v191, *(_DWORD *)v193, v193[1]);
                    v193 += 2;
                  }
                  while (v193 != v194);
                }
              }
            }
            __int16 v642 = 257;
            uint64_t v196 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v191, 0x2CuLL, 0);
            char v197 = sub_1CC242524((uint64_t)&v575, (uint64_t)v191, (uint64_t)v196, (uint64_t)&v639, 0, 0);
            unint64_t v198 = llvm::PointerType::get(*(llvm::PointerType **)(a1 + 168), 0);
            LOWORD(v618) = 257;
            uint64_t v199 = v168;
            if (*(void *)v168 != v198)
            {
              if (*((unsigned __int8 *)v168 + 16) <= 0x14u)
              {
                uint64_t v199 = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, unint64_t))*v582
                                       + 28))(v582, 48, v168, v198);
                if (v199) {
                  BOOL v202 = *((unsigned __int8 *)v199 + 16) >= 0x1Cu;
                }
                else {
                  BOOL v202 = 0;
                }
                if (v202)
                {
                  (*((void (**)(void **, llvm::Value *, std::string *, uint64_t *, uint64_t **))*v583 + 2))(v583, v199, &__dst, v579, v580);
                  if (v576)
                  {
                    uint64_t v542 = (llvm::MDNode **)v575;
                    int v543 = (llvm::MDNode **)((char *)v575 + 16 * v576);
                    do
                    {
                      llvm::Instruction::setMetadata(v199, *(_DWORD *)v542, v542[1]);
                      v542 += 2;
                    }
                    while (v542 != v543);
                  }
                  uint64_t v123 = a2;
                }
              }
              else
              {
                __int16 v642 = 257;
                uint64_t v199 = llvm::CastInst::Create(48, (uint64_t)v168, v198, (const char **)&v639, 0);
                (*((void (**)(void **, llvm::Value *, std::string *, uint64_t *, uint64_t **))*v583 + 2))(v583, v199, &__dst, v579, v580);
                if (v576)
                {
                  uint64_t v200 = (llvm::MDNode **)v575;
                  uint64_t v201 = (llvm::MDNode **)((char *)v575 + 16 * v576);
                  do
                  {
                    llvm::Instruction::setMetadata(v199, *(_DWORD *)v200, v200[1]);
                    v200 += 2;
                  }
                  while (v200 != v201);
                }
              }
            }
            LOWORD(v618) = 257;
            unint64_t v203 = sub_1CB844AF4((uint64_t)&v575, v171, (uint64_t)v197, (uint64_t)&__dst);
            char v204 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v579[7] + 40) + 272), *(llvm::Type **)v203, 1);
            int v205 = (char *)operator new(0x80uLL);
            *((_DWORD *)v205 + 21) = *((_DWORD *)v205 + 21) & 0x38000000 | 2;
            *(void *)int v205 = 0;
            *((void *)v205 + 2) = 0;
            *((void *)v205 + 1) = 0;
            *((void *)v205 + 5) = 0;
            *((void *)v205 + 6) = 0;
            *((void *)v205 + 4) = 0;
            int v206 = (llvm::Value **)(v205 + 32);
            *((void *)v205 + 8) = ***(void ***)v203 + 1576;
            uint64_t v207 = (llvm::Instruction *)(v205 + 64);
            *((void *)v205 + 3) = v205 + 64;
            *((void *)v205 + 7) = v205 + 64;
            *((void *)v205 + 9) = 0;
            v205[80] = 61;
            v205[81] = 0;
            *((_WORD *)v205 + 41) = 0;
            *((_DWORD *)v205 + 21) = 2;
            *(_OWORD *)(v205 + 88) = 0u;
            *(_OWORD *)(v205 + 104) = 0u;
            *((_DWORD *)v205 + 30) = 0;
            *(void *)int v205 = v203;
            uint64_t v210 = *((void *)v203 + 1);
            unint64_t v209 = (void *)((char *)v203 + 8);
            uint64_t v208 = v210;
            *((void *)v205 + 1) = v210;
            if (v210) {
              *(void *)(v208 + 16) = v205 + 8;
            }
            *((void *)v205 + 2) = v209;
            void *v209 = v205;
            if (*((void *)v205 + 4))
            {
              **((void **)v205 + 6) = *((void *)v205 + 5);
              uint64_t v538 = *((void *)v205 + 5);
              if (v538) {
                *(void *)(v538 + 16) = *((void *)v205 + 6);
              }
            }
            *int v206 = v199;
            if (v199)
            {
              uint64_t v213 = *((void *)v199 + 1);
              uint64_t v212 = (llvm::Value ***)((char *)v199 + 8);
              uint64_t v211 = v213;
              *((void *)v205 + 5) = v213;
              if (v213) {
                *(void *)(v211 + 16) = v205 + 40;
              }
              *((void *)v205 + 6) = v212;
              llvm::PointerType *v212 = v206;
            }
            *((_WORD *)v205 + 41) = 2 * (v204 & 0x3F);
            v205[124] = 1;
            __int16 v642 = 257;
            (*((void (**)(void **, llvm::Instruction *, void **, uint64_t *, uint64_t **))*v583 + 2))(v583, v207, &v639, v579, v580);
            if (v576)
            {
              uint64_t v520 = (llvm::MDNode **)v575;
              unint64_t v521 = (llvm::MDNode **)((char *)v575 + 16 * v576);
              do
              {
                llvm::Instruction::setMetadata(v207, *(_DWORD *)v520, v520[1]);
                v520 += 2;
              }
              while (v520 != v521);
            }
            __int16 v642 = 257;
            BOOL v214 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v167, 0x38uLL, 0);
            char v215 = (llvm::ConstantInt **)sub_1CC5357E8((uint64_t)&v575, (uint64_t)v167, (uint64_t)v214, (uint64_t)&v639, 0);
            LOWORD(v618) = 257;
            unint64_t v216 = llvm::ConstantInt::get(*v215, 0xCuLL, 0);
            uint64_t v217 = sub_1CC242524((uint64_t)&v575, (uint64_t)v215, (uint64_t)v216, (uint64_t)&__dst, 1, 1);
            int v218 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 168), 0xFFFFFFFFFFFFFFFFLL, 0);
            __int16 v659 = 257;
            unint64_t v219 = sub_1CC2428C0((uint64_t)&v575, (uint64_t)v217, (uint64_t)v218, (uint64_t)&v657);
            uint64_t v220 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 168), 8uLL, 0);
            __int16 v642 = 257;
            unsigned int v221 = sub_1CB844A3C((uint64_t)&v575, v167, (uint64_t)v220, (uint64_t)&v639, 0, 0);
            LOWORD(v618) = 257;
            uint64_t v222 = sub_1CBF52474((uint64_t)&v575, v221, (uint64_t)v219, (uint64_t)&__dst);
            char v223 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v579[7] + 40) + 272), *(llvm::Type **)v222, 1);
            int64_t v224 = (char *)operator new(0x80uLL);
            *((_DWORD *)v224 + 21) = *((_DWORD *)v224 + 21) & 0x38000000 | 2;
            *(void *)int64_t v224 = 0;
            *((void *)v224 + 2) = 0;
            *((void *)v224 + 1) = 0;
            *((void *)v224 + 5) = 0;
            *((void *)v224 + 6) = 0;
            *((void *)v224 + 4) = 0;
            char v225 = (llvm::Instruction **)(v224 + 32);
            *((void *)v224 + 8) = ***(void ***)v222 + 1576;
            unint64_t v226 = (llvm::Instruction *)(v224 + 64);
            *((void *)v224 + 3) = v224 + 64;
            *((void *)v224 + 7) = v224 + 64;
            *((void *)v224 + 9) = 0;
            v224[80] = 61;
            v224[81] = 0;
            *((_WORD *)v224 + 41) = 0;
            *((_DWORD *)v224 + 21) = 2;
            *(_OWORD *)(v224 + 88) = 0u;
            *(_OWORD *)(v224 + 104) = 0u;
            *((_DWORD *)v224 + 30) = 0;
            *(void *)int64_t v224 = v222;
            uint64_t v229 = *((void *)v222 + 1);
            int v228 = (void *)((char *)v222 + 8);
            uint64_t v227 = v229;
            *((void *)v224 + 1) = v229;
            if (v229) {
              *(void *)(v227 + 16) = v224 + 8;
            }
            *((void *)v224 + 2) = v228;
            *int v228 = v224;
            if (*((void *)v224 + 4))
            {
              **((void **)v224 + 6) = *((void *)v224 + 5);
              uint64_t v539 = *((void *)v224 + 5);
              if (v539) {
                *(void *)(v539 + 16) = *((void *)v224 + 6);
              }
            }
            *char v225 = v164;
            if (v164)
            {
              uint64_t v232 = *((void *)v164 + 1);
              unint64_t v231 = (llvm::Instruction ***)((char *)v164 + 8);
              uint64_t v230 = v232;
              *((void *)v224 + 5) = v232;
              if (v232) {
                *(void *)(v230 + 16) = v224 + 40;
              }
              *((void *)v224 + 6) = v231;
              *unint64_t v231 = v225;
            }
            *((_WORD *)v224 + 41) = 2 * (v223 & 0x3F);
            v224[124] = 1;
            __int16 v642 = 257;
            (*((void (**)(void **, llvm::Instruction *, void **, uint64_t *, uint64_t **))*v583 + 2))(v583, v226, &v639, v579, v580);
            if (v576)
            {
              long long v522 = (llvm::MDNode **)v575;
              int v523 = (llvm::MDNode **)((char *)v575 + 16 * v576);
              do
              {
                llvm::Instruction::setMetadata(v226, *(_DWORD *)v522, v522[1]);
                v522 += 2;
              }
              while (v522 != v523);
            }
          }
          std::string::size_type v124 = a1;
          if (!*(void *)(a1 + 472))
          {
            unint64_t v233 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 168), 0xFFFFFFFFuLL, 0);
            __int16 v642 = 257;
            uint64_t v234 = sub_1CB844AF4((uint64_t)&v575, v168, (uint64_t)v233, (uint64_t)&v639);
            uint64_t v235 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 168), 1uLL, 0);
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"hwasan.shadow";
            LOWORD(v618) = 259;
            uint64_t v236 = sub_1CB844A3C((uint64_t)&v575, v234, (uint64_t)v235, (uint64_t)&__dst, 0, 0);
            uint64_t v237 = (unsigned __int8 *)v236;
            *(void *)(a1 + 472) = v236;
            uint64_t v238 = *(void *)(a1 + 176);
            LOWORD(v618) = 257;
            if (*(void *)v236 != v238)
            {
              if (*((unsigned __int8 *)v236 + 16) <= 0x14u)
              {
                uint64_t v237 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v582
                                           + 28))(v582, 48, v236, v238);
                if (v237) {
                  BOOL v241 = v237[16] >= 0x1Cu;
                }
                else {
                  BOOL v241 = 0;
                }
                if (v241)
                {
                  (*((void (**)(void **, unsigned __int8 *, std::string *, uint64_t *, uint64_t **))*v583 + 2))(v583, v237, &__dst, v579, v580);
                  if (v576)
                  {
                    __int16 v544 = (llvm::MDNode **)v575;
                    char v545 = (llvm::MDNode **)((char *)v575 + 16 * v576);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v237, *(_DWORD *)v544, v544[1]);
                      v544 += 2;
                    }
                    while (v544 != v545);
                  }
                  std::string::size_type v124 = a1;
                  uint64_t v123 = a2;
                }
              }
              else
              {
                __int16 v642 = 257;
                uint64_t v237 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v236, v238, (const char **)&v639, 0);
                (*((void (**)(void **, unsigned __int8 *, std::string *, uint64_t *, uint64_t **))*v583 + 2))(v583, v237, &__dst, v579, v580);
                if (v576)
                {
                  int v239 = (llvm::MDNode **)v575;
                  uint64_t v240 = (llvm::MDNode **)((char *)v575 + 16 * v576);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v237, *(_DWORD *)v239, v239[1]);
                    v239 += 2;
                  }
                  while (v239 != v240);
                }
              }
            }
            *(void *)(v124 + 472) = v237;
          }
          goto LABEL_394;
        }
LABEL_305:
        if (!v140) {
          goto LABEL_306;
        }
LABEL_394:
        int v242 = v595;
        int v560 = v596;
        if (v595 != v596)
        {
          if (byte_1EBCED6D8)
          {
            unsigned int v243 = 0;
            goto LABEL_408;
          }
          unsigned int v243 = *(llvm::Instruction **)(v124 + 480);
          if (v243) {
            goto LABEL_408;
          }
          uint64_t v244 = *(void *)(v579[7] + 40);
          v639 = (void *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v581 + 1912), (llvm::Type *)*(unsigned int *)(v244 + 276));
          uint64_t v245 = llvm::Intrinsic::getDeclaration((uint64_t **)v244, 147, (uint64_t)&v639, 1);
          int64_t v248 = (uint64_t **)v245;
          if (v245) {
            unsigned int v249 = *(uint64_t ***)(v245 + 24);
          }
          else {
            unsigned int v249 = 0;
          }
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)llvm::Constant::getNullValue((llvm::Constant *)(*(void *)v581 + 1960), v246, v247);
          __int16 v642 = 257;
          unint64_t v250 = (llvm::CastInst *)sub_1CB845BAC((uint64_t *)&v575, v249, v248, (uint64_t *)&__dst, 1, (uint64_t)&v639, 0);
          int v251 = *(llvm::Value **)(v124 + 168);
          __int16 v642 = 257;
          uint64_t v253 = (llvm::ConstantInt **)sub_1CC277FE0((uint64_t)&v575, v250, v251, (uint64_t)&v639, v252);
          LOWORD(v618) = 257;
          uint64_t v254 = llvm::ConstantInt::get(*v253, 0x14uLL, 0);
          unint64_t v255 = sub_1CC2429AC((uint64_t)&v575, (uint64_t)v253, (uint64_t)v254, (uint64_t)&__dst, 0);
          __int16 v659 = 257;
          unsigned int v243 = sub_1CC2428C0((uint64_t)&v575, (uint64_t)v253, (uint64_t)v255, (uint64_t)&v657);
          if (*(_DWORD *)(v124 + 48) == 42)
          {
            int v256 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v124 + 168), *(void *)(v124 + 224), 0);
            __int16 v642 = 257;
            unsigned int v243 = sub_1CBF52474((uint64_t)&v575, v243, (uint64_t)v256, (uint64_t)&v639);
          }
          v639 = "hwasan.stack.base.tag";
          __int16 v642 = 259;
          llvm::Value::setNameImpl(v243, (const char **)&v639);
          if (v243) {
            BOOL v257 = *((unsigned char *)v243 + 16) == 0;
          }
          else {
            BOOL v257 = 0;
          }
          if (!v257)
          {
LABEL_407:
            int v242 = v595;
            int v560 = v596;
LABEL_408:
            uint64_t v574 = v243;
            if (v242 == v560)
            {
LABEL_409:
              if (v599) {
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              }
              uint64_t v123 = a2;
              goto LABEL_412;
            }
            unsigned int v380 = 0;
            while (2)
            {
              uint64_t v381 = 0;
              unint64_t v573 = 0;
              uint64_t v563 = v242 + 1;
              unint64_t v573 = *v242;
              uint64_t v382 = *((void *)v573 + 4);
              if (v382) {
                BOOL v383 = v382 == *((void *)v573 + 5) + 40;
              }
              else {
                BOOL v383 = 1;
              }
              if (v383) {
                uint64_t v384 = 0;
              }
              else {
                uint64_t v384 = v382 - 24;
              }
              int v385 = **(uint64_t ***)v384;
              v639 = v641;
              uint64_t v640 = 0x200000000;
              uint64_t v645 = v385;
              v646 = &v654;
              v647 = &v655;
              uint64_t v648 = 0;
              int v649 = 0;
              __int16 v650 = 512;
              char v651 = 7;
              v643 = 0;
              v644 = 0;
              uint64_t v652 = 0;
              uint64_t v653 = 0;
              uint64_t v654 = &unk_1F2616E88;
              uint64_t v655 = &unk_1F2617008;
              v643 = *(uint64_t ***)(v384 + 40);
              v644 = (void **)(v384 + 24);
              uint64_t v386 = *(unsigned __int8 **)(v384 + 48);
              *(void *)&long long v657 = v386;
              if (v386)
              {
                llvm::MetadataTracking::track((uint64_t)&v657, v386, 2);
                uint64_t v381 = v657;
              }
              sub_1CB8461A4((uint64_t)&v639, 0, v381);
              if ((void)v657)
              {
                int v458 = *(unsigned __int8 *)v657;
                if ((v458 - 4) > 0x1E)
                {
                  if ((v458 - 3) >= 0xFFFFFFFE) {
                    uint64_t v461 = v657;
                  }
                  else {
                    uint64_t v461 = 0;
                  }
                  if ((v458 - 3) < 0xFFFFFFFE)
                  {
                    if (v458 == 3) {
                      *(void *)(v657 + 8) = 0;
                    }
                    goto LABEL_622;
                  }
                  unint64_t v460 = v461 + 8;
                }
                else
                {
                  if ((*(unsigned char *)(v657 + 1) & 0x7F) != 2 && !*(_DWORD *)(v657 + 12)) {
                    goto LABEL_622;
                  }
                  uint64_t v459 = *(void *)(v657 + 16);
                  if ((v459 & 4) == 0) {
                    goto LABEL_622;
                  }
                  unint64_t v460 = v459 & 0xFFFFFFFFFFFFFFF8;
                  if (!v460) {
                    goto LABEL_622;
                  }
                }
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v657;
                sub_1CC5FA668(v460 + 16, &__dst);
              }
LABEL_622:
              uint64_t v567 = v242;
              if (byte_1EBCED6D8)
              {
                int64_t v388 = (llvm::ConstantInt **)sub_1CCB68908((void *)v124, (uint64_t)&v639);
              }
              else
              {
                if (*(_DWORD *)(v124 + 48) == 42) {
                  unsigned int v387 = v380 & *(_DWORD *)(v124 + 224);
                }
                else {
                  unsigned int v387 = dword_1CFB28714[v380 % 0x24];
                }
                uint64_t v390 = (uint64_t)v574;
                unint64_t v391 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v124 + 168), v387, 0);
                LOWORD(v618) = 257;
                int64_t v388 = (llvm::ConstantInt **)sub_1CC2428C0((uint64_t)&v639, v390, (uint64_t)v391, (uint64_t)&__dst);
              }
              uint64_t v569 = v388;
              uint64_t v392 = *(llvm::Value **)(v124 + 168);
              LOWORD(v618) = 257;
              uint64_t v393 = sub_1CC277FE0((uint64_t)&v639, v573, v392, (uint64_t)&__dst, v389);
              int v394 = *(uint64_t ***)v573;
              unint64_t v395 = *(unsigned int *)(v124 + 220);
              std::string::size_type v564 = (std::string::size_type)v393;
              if (*(unsigned char *)(v124 + 208))
              {
                LOWORD(v618) = 257;
                uint64_t v399 = llvm::ConstantInt::get(*v569, v395, 0);
                uint64_t v400 = sub_1CC242524((uint64_t)&v639, (uint64_t)v569, (uint64_t)v399, (uint64_t)&__dst, 0, 0);
                uint64_t v401 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v124 + 168), ~(-1 << *(_DWORD *)(v124 + 220)), 0);
                __int16 v659 = 257;
                uint64_t v402 = sub_1CB844AF4((uint64_t)&v639, v400, (uint64_t)v401, (uint64_t)&v657);
                LOWORD(v618) = 257;
                unint64_t v398 = sub_1CBF52474((uint64_t)&v639, v393, (uint64_t)v402, (uint64_t)&__dst);
              }
              else
              {
                LOWORD(v618) = 257;
                unint64_t v396 = llvm::ConstantInt::get(*v569, v395, 0);
                int v397 = sub_1CC242524((uint64_t)&v639, (uint64_t)v569, (uint64_t)v396, (uint64_t)&__dst, 0, 0);
                LOWORD(v618) = 257;
                unint64_t v398 = sub_1CB844AF4((uint64_t)&v639, v393, (uint64_t)v397, (uint64_t)&__dst);
              }
              int v403 = v398;
              __int16 v659 = 257;
              if (*(uint64_t ***)v398 != v394)
              {
                if (*((unsigned __int8 *)v398 + 16) <= 0x14u)
                {
                  uint64_t v406 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t **))*v646 + 28))(v646, 48, v398, v394);
                  int v403 = (llvm::Value *)v406;
                  if (v406 && *(unsigned __int8 *)(v406 + 16) >= 0x1Cu)
                  {
                    (*((void (**)(void **, uint64_t, long long *, uint64_t **, void **))*v647 + 2))(v647, v406, &v657, v643, v644);
                    if (v640)
                    {
                      v479 = (llvm::MDNode **)v639;
                      int v480 = (llvm::MDNode **)((char *)v639 + 16 * v640);
                      do
                      {
                        llvm::Instruction::setMetadata(v403, *(_DWORD *)v479, v479[1]);
                        v479 += 2;
                      }
                      while (v479 != v480);
                    }
                    std::string::size_type v124 = a1;
                  }
                }
                else
                {
                  LOWORD(v618) = 257;
                  int v403 = llvm::CastInst::Create(48, (uint64_t)v398, (uint64_t)v394, (const char **)&__dst.__r_.__value_.__l.__data_, 0);
                  (*((void (**)(void **, llvm::Value *, long long *, uint64_t **, void **))*v647 + 2))(v647, v403, &v657, v643, v644);
                  if (v640)
                  {
                    BOOL v404 = (llvm::MDNode **)v639;
                    uint64_t v405 = (llvm::MDNode **)((char *)v639 + 16 * v640);
                    do
                    {
                      llvm::Instruction::setMetadata(v403, *(_DWORD *)v404, v404[1]);
                      v404 += 2;
                    }
                    while (v404 != v405);
                  }
                }
              }
              if ((*((unsigned char *)v573 + 23) & 0x10) == 0)
              {
                if (v380)
                {
                  unint64_t v416 = v380;
                  int v407 = (char *)v658 + 5;
                  do
                  {
                    *--int v407 = (v416 % 0xA) | 0x30;
                    BOOL v59 = v416 > 9;
                    v416 /= 0xAuLL;
                  }
                  while (v59);
                }
                else
                {
                  BYTE4(v658[0]) = 48;
                  int v407 = (char *)v658 + 4;
                }
                sub_1CC028D80(&__dst, v407, (char *)v658 + 5, (char *)v658 + 5 - v407);
                unint64_t v417 = std::string::insert(&__dst, 0, "alloca.");
                long long v657 = *(_OWORD *)&v417->__r_.__value_.__l.__data_;
                v658[0] = *((void *)&v417->__r_.__value_.__l + 2);
                v417->__r_.__value_.__r.__words[0] = 0;
                v417->__r_.__value_.__l.__size_ = 0;
                v417->__r_.__value_.__r.__words[2] = 0;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                }
LABEL_663:
                int v425 = SHIBYTE(v658[0]);
                if (v658[0] >= 0) {
                  size_t v426 = HIBYTE(v658[0]) & 0x7F;
                }
                else {
                  size_t v426 = *((void *)&v657 + 1);
                }
                sub_1CB907098((uint64_t)&v634, v426 + 7);
                if ((v634.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int v427 = &v634;
                }
                else {
                  int v427 = (std::string *)v634.__r_.__value_.__r.__words[0];
                }
                if (v426)
                {
                  if (v425 >= 0) {
                    uint64_t v428 = &v657;
                  }
                  else {
                    uint64_t v428 = (long long *)v657;
                  }
                  memmove(v427, v428, v426);
                }
                strcpy((char *)v427 + v426, ".hwasan");
                LOWORD(v618) = 260;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v634;
                llvm::Value::setNameImpl(v403, (const char **)&__dst.__r_.__value_.__l.__data_);
                if (!v403 || *((unsigned char *)v403 + 16))
                {
LABEL_676:
                  if (SHIBYTE(v634.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v634.__r_.__value_.__l.__data_);
                  }
                  AllocaSizeInBytes = (llvm::Instruction *)llvm::memtag::getAllocaSizeInBytes(v573, v429);
                  uint64_t v430 = ((unint64_t)AllocaSizeInBytes + (1 << *(_DWORD *)(v124 + 136)) - 1) & -(1 << *(_DWORD *)(v124 + 136));
                  v571 = 0;
                  uint64_t v572 = v430;
                  int v431 = *(llvm::Value **)(v124 + 176);
                  LOWORD(v618) = 257;
                  v571 = sub_1CC277FE0((uint64_t)&v639, v573, v431, (uint64_t)&__dst, v432);
                  v632.__r_.__value_.__r.__words[0] = v124;
                  v632.__r_.__value_.__l.__size_ = (std::string::size_type)&v572;
                  v632.__r_.__value_.__r.__words[2] = (std::string::size_type)&v571;
                  __int16 v561 = (llvm::Instruction ***)(v567 + 2);
                  sub_1CCB68ABC(&__dst, (uint64_t *)v567[2], *((_DWORD *)v567 + 6), (uint64_t *)&v632);
                  std::string __p = (void *)v124;
                  v637 = &v572;
                  int v638 = (llvm::Instruction *)&v571;
                  sub_1CCB68ABC(&__dst, (uint64_t *)v567[6], *((_DWORD *)v567 + 14), (uint64_t *)&__p);
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v571;
                  __dst.__r_.__value_.__l.__size_ = v564;
                  llvm::Value::replaceUsesWithIf(v573, v403, (unsigned int (*)(uint64_t, uint64_t))sub_1CCB69310, (uint64_t)&__dst);
                  uint64_t v433 = *((unsigned int *)v567 + 22);
                  if (v433)
                  {
                    int v434 = (uint64_t *)v567[10];
                    unint64_t v435 = &v434[v433];
                    do
                    {
                      if (*(_DWORD *)(v124 + 48) == 42) {
                        unsigned int v436 = v380 & *(_DWORD *)(v124 + 224);
                      }
                      else {
                        unsigned int v436 = dword_1CFB28714[v380 % 0x24];
                      }
                      unint64_t v437 = 0;
                      uint64_t v438 = *v434;
                      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst.__r_.__value_.__r.__words[2];
                      __dst.__r_.__value_.__r.__words[2] = 4098;
                      int v617 = (llvm::CastInst **)v436;
                      __dst.__r_.__value_.__l.__size_ = 0x800000002;
                      while (1)
                      {
                        uint64_t v439 = *(_DWORD *)(v438 + 20) & 0x7FFFFFF;
                        unint64_t v440 = *(unsigned __int8 **)(*(void *)(v438 - 32 * v439) + 24);
                        int v441 = *v440;
                        unint64_t v442 = v441 == 32 ? *((unsigned int *)v440 + 8) : 1;
                        if (v437 >= v442) {
                          break;
                        }
                        int v443 = 0;
                        if ((v441 - 4) >= 0x1C && (v441 - 33) >= 2)
                        {
                          if (v441 == 32) {
                            unint64_t v440 = *(unsigned __int8 **)(*((void *)v440 + 3) + 8 * v437);
                          }
                          int v443 = (llvm::CastInst *)*((void *)v440 + 16);
                        }
                        if (v443 == v573)
                        {
                          appended = llvm::DIExpression::appendOpsToArg(*(void **)(*(void *)(v438 + 64 - 32 * v439) + 24), (uint64_t *)__dst.__r_.__value_.__l.__data_, LODWORD(__dst.__r_.__value_.__r.__words[1]), v437, 0);
                          sub_1CD4FB76C(v438, (uint64_t)appended);
                        }
                        ++v437;
                      }
                      if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[2]) {
                        free(__dst.__r_.__value_.__l.__data_);
                      }
                      ++v434;
                      std::string::size_type v124 = a1;
                    }
                    while (v434 != v435);
                  }
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v639;
                  __dst.__r_.__value_.__l.__size_ = v124;
                  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&v574;
                  int v617 = &v573;
                  BOOL v618 = &v572;
                  if (v599
                    || (uint64_t v445 = a3(a4),
                        !llvm::memtag::isStandardLifetime((uint64_t)v561, (uint64_t)(v567 + 6), v445, xmmword_1EA61DCC0))|| v604|| !*(unsigned char *)(v124 + 215))
                  {
                    sub_1CCB68BEC(v124, (uint64_t)&v639, v573, (uint64_t)v569, AllocaSizeInBytes);
                    if (v602)
                    {
                      uint64_t v455 = v601;
                      uint64_t v456 = 8 * v602;
                      do
                      {
                        uint64_t v457 = *v455++;
                        sub_1CCB69190((uint64_t)&__dst, v457);
                        v456 -= 8;
                      }
                      while (v456);
                    }
                    v452 = v567;
                    if (*((_DWORD *)v567 + 6)) {
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                    }
                    if (*((_DWORD *)v567 + 14)) {
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                    }
                  }
                  else
                  {
                    uint64_t v446 = 0;
                    uint64_t v447 = **v561;
                    uint64_t v448 = *((void *)v447 + 4);
                    if (v448) {
                      BOOL v449 = v448 == *((void *)v447 + 5) + 40;
                    }
                    else {
                      BOOL v449 = 1;
                    }
                    if (v449) {
                      uint64_t v450 = 0;
                    }
                    else {
                      uint64_t v450 = v448 - 24;
                    }
                    v643 = *(uint64_t ***)(v450 + 40);
                    v644 = (void **)(v450 + 24);
                    v451 = *(unsigned __int8 **)(v450 + 48);
                    v656 = v451;
                    if (v451)
                    {
                      llvm::MetadataTracking::track((uint64_t)&v656, v451, 2);
                      uint64_t v446 = (uint64_t)v656;
                    }
                    sub_1CB8461A4((uint64_t)&v639, 0, v446);
                    v452 = v567;
                    if (v656)
                    {
                      int v470 = *v656;
                      if ((v470 - 4) > 0x1E)
                      {
                        if ((v470 - 3) >= 0xFFFFFFFE) {
                          uint64_t v473 = v656;
                        }
                        else {
                          uint64_t v473 = 0;
                        }
                        if ((v470 - 3) < 0xFFFFFFFE)
                        {
                          if (v470 == 3) {
                            *((void *)v656 + 1) = 0;
                          }
                          goto LABEL_712;
                        }
                        unint64_t v472 = (unint64_t)(v473 + 8);
                      }
                      else
                      {
                        if ((v656[1] & 0x7F) != 2 && !*((_DWORD *)v656 + 3)) {
                          goto LABEL_712;
                        }
                        uint64_t v471 = *((void *)v656 + 2);
                        if ((v471 & 4) == 0) {
                          goto LABEL_712;
                        }
                        unint64_t v472 = v471 & 0xFFFFFFFFFFFFFFF8;
                        if (!v472) {
                          goto LABEL_712;
                        }
                      }
                      v634.__r_.__value_.__r.__words[0] = (std::string::size_type)&v656;
                      sub_1CC5FA668(v472 + 16, &v634);
                    }
LABEL_712:
                    sub_1CCB68BEC(a1, (uint64_t)&v639, v573, (uint64_t)v569, AllocaSizeInBytes);
                    int v453 = (llvm::DominatorTree *)a3(a4);
                    uint64_t v454 = (llvm::PostDominatorTree *)a5(a6);
                    if ((llvm::memtag::forAllReachableExits(v453, v454, v447, (const llvm::Instruction ***)v567 + 6, (uint64_t)&v601, (void (*)(uint64_t, const llvm::Instruction *))sub_1CCB69580, (uint64_t)&__dst) & 1) == 0&& *((_DWORD *)v567 + 14))
                    {
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                    }
                  }
                  std::string::size_type v124 = a1;
                  llvm::memtag::alignAndPadAlloca(v563, *(_DWORD *)(a1 + 136));
                  if (SHIBYTE(v658[0]) < 0) {
                    operator delete((void *)v657);
                  }
                  if (v639 != v641) {
                    free(v639);
                  }
                  ++v380;
                  int v242 = v452 + 14;
                  if (v242 == v560) {
                    goto LABEL_409;
                  }
                  continue;
                }
                if ((*((unsigned char *)v403 + 23) & 0x10) == 0) {
                  goto LABEL_769;
                }
                uint64_t v462 = ***(void ***)v403;
                uint64_t v463 = *(void *)(v462 + 152);
                uint64_t v464 = *(unsigned int *)(v462 + 168);
                if (!v464) {
                  goto LABEL_761;
                }
                LODWORD(v465) = (v464 - 1) & ((v403 >> 4) ^ (v403 >> 9));
                uint64_t v466 = (llvm::Value **)(v463 + 16 * v465);
                uint64_t v467 = *v466;
                if (*v466 != v403)
                {
                  int v468 = 1;
                  while (v467 != (llvm::Value *)-4096)
                  {
                    int v469 = v465 + v468++;
                    uint64_t v465 = v469 & (v464 - 1);
                    uint64_t v467 = *(llvm::Value **)(v463 + 16 * v465);
                    if (v467 == v403)
                    {
                      uint64_t v466 = (llvm::Value **)(v463 + 16 * v465);
                      goto LABEL_762;
                    }
                  }
LABEL_761:
                  uint64_t v466 = (llvm::Value **)(v463 + 16 * v464);
                }
LABEL_762:
                unint64_t v474 = v466[1];
                unint64_t v476 = *(void *)v474;
                v475 = (char *)v474 + 16;
                unint64_t v429 = (const llvm::AllocaInst *)v476;
                if (v476 >= 5
                  && (*(_DWORD *)v475 == *(_DWORD *)"llvm." ? (BOOL v477 = v475[4] == aLlvm_1[4]) : (BOOL v477 = 0), v477))
                {
                  *((_DWORD *)v403 + 8) |= 0x2000u;
                  int v478 = llvm::Function::lookupIntrinsicID(v475, (unint64_t)v429);
                }
                else
                {
LABEL_769:
                  int v478 = 0;
                  *((_DWORD *)v403 + 8) &= ~0x2000u;
                }
                *((_DWORD *)v403 + 9) = v478;
                goto LABEL_676;
              }
              break;
            }
            uint64_t v408 = ***(void ***)v573;
            uint64_t v409 = *(void *)(v408 + 152);
            uint64_t v410 = *(unsigned int *)(v408 + 168);
            if (v410)
            {
              LODWORD(v411) = (v410 - 1) & ((v573 >> 4) ^ (v573 >> 9));
              uint64_t v412 = v409 + 16 * v411;
              unint64_t v413 = *(llvm::CastInst **)v412;
              if (*(llvm::CastInst **)v412 != v573)
              {
                int v414 = 1;
                while (v413 != (llvm::CastInst *)-4096)
                {
                  int v415 = v411 + v414++;
                  uint64_t v411 = v415 & (v410 - 1);
                  unint64_t v413 = *(llvm::CastInst **)(v409 + 16 * v411);
                  if (v413 == v573)
                  {
                    uint64_t v412 = v409 + 16 * v411;
                    goto LABEL_654;
                  }
                }
                goto LABEL_653;
              }
            }
            else
            {
LABEL_653:
              uint64_t v412 = v409 + 16 * v410;
            }
LABEL_654:
            int v418 = *(unint64_t **)(v412 + 8);
            unint64_t v421 = *v418;
            unint64_t v420 = v418 + 2;
            size_t v419 = v421;
            if (v421 >= 0x7FFFFFFFFFFFFFF8) {
              abort();
            }
            if (v419 >= 0x17)
            {
              uint64_t v423 = (v419 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v419 | 7) != 0x17) {
                uint64_t v423 = v419 | 7;
              }
              uint64_t v424 = v423 + 1;
              int v422 = (long long *)operator new(v423 + 1);
              *((void *)&v657 + 1) = v419;
              v658[0] = v424 | 0x8000000000000000;
              *(void *)&long long v657 = v422;
            }
            else
            {
              HIBYTE(v658[0]) = v419;
              int v422 = &v657;
              if (!v419) {
                goto LABEL_662;
              }
            }
            memmove(v422, v420, v419);
LABEL_662:
            *((unsigned char *)v422 + v419) = 0;
            std::string::size_type v124 = a1;
            goto LABEL_663;
          }
          if ((*((unsigned char *)v243 + 23) & 0x10) == 0) {
            goto LABEL_847;
          }
          uint64_t v524 = ***(void ***)v243;
          uint64_t v525 = *(void *)(v524 + 152);
          uint64_t v526 = *(unsigned int *)(v524 + 168);
          if (!v526) {
            goto LABEL_839;
          }
          LODWORD(v527) = (v526 - 1) & ((v243 >> 4) ^ (v243 >> 9));
          long long v528 = (llvm::Instruction **)(v525 + 16 * v527);
          uint64_t v529 = *v528;
          if (*v528 != v243)
          {
            int v530 = 1;
            while (v529 != (llvm::Instruction *)-4096)
            {
              int v531 = v527 + v530++;
              uint64_t v527 = v531 & (v526 - 1);
              uint64_t v529 = *(llvm::Instruction **)(v525 + 16 * v527);
              if (v529 == v243)
              {
                long long v528 = (llvm::Instruction **)(v525 + 16 * v527);
                goto LABEL_840;
              }
            }
LABEL_839:
            long long v528 = (llvm::Instruction **)(v525 + 16 * v526);
          }
LABEL_840:
          unint64_t v532 = v528[1];
          unint64_t v535 = *(void *)v532;
          v533 = (char *)v532 + 16;
          unint64_t v534 = v535;
          if (v535 >= 5 && (*(_DWORD *)v533 == *(_DWORD *)"llvm." ? (BOOL v536 = v533[4] == aLlvm_1[4]) : (BOOL v536 = 0), v536))
          {
            *((_DWORD *)v243 + 8) |= 0x2000u;
            int v537 = llvm::Function::lookupIntrinsicID(v533, v534);
          }
          else
          {
LABEL_847:
            int v537 = 0;
            *((_DWORD *)v243 + 8) &= ~0x2000u;
          }
          *((_DWORD *)v243 + 9) = v537;
          std::string::size_type v124 = a1;
          goto LABEL_407;
        }
LABEL_412:
        uint64_t v258 = *(void *)(v123 + 80);
        if (v258) {
          BOOL v259 = (uint64_t *)(v258 - 24);
        }
        else {
          BOOL v259 = 0;
        }
        if (v579 != v259)
        {
          uint64_t v260 = v259[6];
          if (v260) {
            uint64_t v261 = (llvm::Instruction *)(v260 - 24);
          }
          else {
            uint64_t v261 = 0;
          }
          int v262 = v579 + 5;
          uint64_t v263 = (uint64_t *)v579[6];
          while (v263 != v262)
          {
            int v264 = v263;
            uint64_t v263 = (uint64_t *)v263[1];
            if (v264) {
              unsigned int v265 = (llvm::Instruction *)(v264 - 3);
            }
            else {
              unsigned int v265 = 0;
            }
            if (v264 && *((unsigned char *)v265 + 16) == 59 && *(unsigned char *)(*((void *)v265 - 4) + 16) == 16) {
              llvm::Instruction::moveBefore(v265, v261);
            }
          }
        }
        if (!v614)
        {
LABEL_417:
          if (!byte_1EBCEDC18 || !v611)
          {
            *(void *)(a1 + 472) = 0;
            *(void *)(a1 + 480) = 0;
            if (v575 != v577) {
              free(v575);
            }
            uint64_t v7 = 1;
            goto LABEL_422;
          }
          uint64_t v481 = 0;
          int v482 = *(uint64_t ****)v610;
          v483 = ***(uint64_t ****)v610;
          v639 = v641;
          uint64_t v640 = 0x200000000;
          uint64_t v645 = v483;
          v646 = &v654;
          v647 = &v655;
          uint64_t v648 = 0;
          int v649 = 0;
          __int16 v650 = 512;
          char v651 = 7;
          v643 = 0;
          v644 = 0;
          uint64_t v652 = 0;
          uint64_t v653 = 0;
          uint64_t v654 = &unk_1F2616E88;
          uint64_t v655 = &unk_1F2617008;
          v643 = v482[5];
          v644 = v482 + 3;
          int v484 = (unsigned __int8 *)v482[6];
          *(void *)&long long v657 = v484;
          if (v484)
          {
            llvm::MetadataTracking::track((uint64_t)&v657, v484, 2);
            uint64_t v481 = v657;
          }
          sub_1CB8461A4((uint64_t)&v639, 0, v481);
          if ((void)v657)
          {
            int v508 = *(unsigned __int8 *)v657;
            if ((v508 - 4) > 0x1E)
            {
              if ((v508 - 3) >= 0xFFFFFFFE) {
                uint64_t v511 = v657;
              }
              else {
                uint64_t v511 = 0;
              }
              if ((v508 - 3) < 0xFFFFFFFE)
              {
                if (v508 == 3) {
                  *(void *)(v657 + 8) = 0;
                }
                goto LABEL_781;
              }
              unint64_t v510 = v511 + 8;
            }
            else
            {
              if ((*(unsigned char *)(v657 + 1) & 0x7F) != 2 && !*(_DWORD *)(v657 + 12)) {
                goto LABEL_781;
              }
              uint64_t v509 = *(void *)(v657 + 16);
              if ((v509 & 4) == 0) {
                goto LABEL_781;
              }
              unint64_t v510 = v509 & 0xFFFFFFFFFFFFFFF8;
              if (!v510) {
                goto LABEL_781;
              }
            }
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v657;
            sub_1CC5FA668(v510 + 16, &__dst);
          }
LABEL_781:
          int v485 = *((_DWORD *)*(v482 - 4) + 9);
          if ((v485 - 196) < 2)
          {
LABEL_784:
            BOOL v486 = v485 == 197;
            uint64_t v487 = 88;
            if (v486) {
              uint64_t v487 = 72;
            }
            uint64_t v488 = a1 + 72;
            if (!v486) {
              uint64_t v488 = a1 + 88;
            }
            uint64_t v489 = a1;
            unsigned int v490 = *(uint64_t ***)(a1 + v487);
            std::string v491 = *(uint64_t ***)(v488 + 8);
            std::string v492 = (llvm::CastInst *)v482[-4 * (*((_DWORD *)v482 + 5) & 0x7FFFFFF)];
            uint64_t v493 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*v645 + 1912), 0);
            LOWORD(v618) = 257;
            std::string __p = sub_1CC277FE0((uint64_t)&v639, v492, v493, (uint64_t)&__dst, v494);
            uint64_t v495 = (llvm::CastInst *)v482[-4 * (*((_DWORD *)v482 + 5) & 0x7FFFFFF) + 4];
            char v496 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*v645 + 1912), 0);
            __int16 v659 = 257;
            v498 = sub_1CC277FE0((uint64_t)&v639, v495, v496, (uint64_t)&v657, v497);
          }
          else
          {
            if (v485 != 199)
            {
              if (v485 == 194) {
                goto LABEL_784;
              }
LABEL_791:
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
            uint64_t v489 = a1;
            unsigned int v490 = *(uint64_t ***)(a1 + 104);
            std::string v491 = *(uint64_t ***)(a1 + 112);
            uint64_t v500 = (llvm::CastInst *)v482[-4 * (*((_DWORD *)v482 + 5) & 0x7FFFFFF)];
            std::string v501 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*v645 + 1912), 0);
            LOWORD(v618) = 257;
            std::string __p = sub_1CC277FE0((uint64_t)&v639, v500, v501, (uint64_t)&__dst, v502);
            std::string v503 = (llvm::CastInst *)v482[-4 * (*((_DWORD *)v482 + 5) & 0x7FFFFFF) + 4];
            std::string v504 = (llvm::Type ***)(*v645 + 1960);
            __int16 v659 = 257;
            v498 = sub_1CBF56614((uint64_t)&v639, v503, v504, 0, (uint64_t)&v657, v505);
          }
          v637 = v498;
          v506 = (llvm::CastInst *)v482[-4 * (*((_DWORD *)v482 + 5) & 0x7FFFFFF) + 8];
          long long v507 = *(llvm::Type ****)(v489 + 168);
          __int16 v635 = 257;
          int v638 = sub_1CBF56614((uint64_t)&v639, v506, v507, 0, (uint64_t)&v634, v499);
          __int16 v633 = 257;
          sub_1CB845BAC((uint64_t *)&v639, v490, v491, (uint64_t *)&__p, 3, (uint64_t)&v632, 0);
          goto LABEL_791;
        }
        int v266 = (int8x8_t *)v613;
        BOOL v267 = (int8x8_t *)((char *)v613 + 48 * v614);
        while (2)
        {
          if (v266[5])
          {
LABEL_461:
            v266 += 6;
            if (v266 == v267) {
              goto LABEL_417;
            }
            continue;
          }
          break;
        }
        uint64_t v268 = 0;
        uint64_t v269 = **(unsigned __int8 ***)v266;
        int v270 = *(uint64_t ***)(*(void *)v266 + 24);
        uint64_t v271 = **v270;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst.__r_.__value_.__r.__words[2];
        __dst.__r_.__value_.__l.__size_ = 0x200000000;
        uint64_t v621 = v271;
        char v622 = &v630;
        uint64_t v623 = &v631;
        uint64_t v624 = 0;
        int v625 = 0;
        __int16 v626 = 512;
        char v627 = 7;
        unsigned int v619 = 0;
        int v620 = 0;
        uint64_t v628 = 0;
        uint64_t v629 = 0;
        uint64_t v630 = &unk_1F2616E88;
        int v631 = &unk_1F2617008;
        unsigned int v619 = v270[5];
        int v620 = v270 + 3;
        int v272 = (unsigned __int8 *)v270[6];
        *(void *)&long long v657 = v272;
        if (v272)
        {
          llvm::MetadataTracking::track((uint64_t)&v657, v272, 2);
          uint64_t v268 = v657;
        }
        sub_1CB8461A4((uint64_t)&__dst, 0, v268);
        uint64_t v274 = a1;
        if ((void)v657)
        {
          int v321 = *(unsigned __int8 *)v657;
          if ((v321 - 4) > 0x1E)
          {
            if ((v321 - 3) >= 0xFFFFFFFE) {
              uint64_t v332 = v657;
            }
            else {
              uint64_t v332 = 0;
            }
            if ((v321 - 3) < 0xFFFFFFFE)
            {
              if (v321 == 3) {
                *(void *)(v657 + 8) = 0;
              }
              goto LABEL_449;
            }
            unint64_t v323 = v332 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v657 + 1) & 0x7F) != 2 && !*(_DWORD *)(v657 + 12)) {
              goto LABEL_449;
            }
            uint64_t v322 = *(void *)(v657 + 16);
            if ((v322 & 4) == 0) {
              goto LABEL_449;
            }
            unint64_t v323 = v322 & 0xFFFFFFFFFFFFFFF8;
            if (!v323) {
              goto LABEL_449;
            }
          }
          v639 = &v657;
          sub_1CC5FA668(v323 + 16, &v639);
        }
LABEL_449:
        int8x8_t v275 = v266[3];
        if (!*(void *)&v275
          || *(void *)&v275 > 0x87uLL
          || (uint8x8_t v276 = (uint8x8_t)vcnt_s8(v275), v276.i16[0] = vaddlv_u8(v276), v276.u32[0] > 1uLL)
          || v266[4].i8[1]
          && (unint64_t v277 = 1 << v266[4].i8[0], v277 < *(void *)&v275 >> 3)
          && !(v277 >> *(_DWORD *)(a1 + 136)))
        {
          uint64_t v278 = a1 + 16 * v266[1].u8[0];
          uint64_t v279 = *(uint64_t ***)(v278 + 400);
          uint64_t v280 = *(uint64_t ***)(v278 + 408);
          uint64_t v281 = *(llvm::Value **)(a1 + 168);
          __int16 v642 = 257;
          v634.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1CC277FE0((uint64_t)&__dst, (llvm::CastInst *)v269, v281, (uint64_t)&v639, v273);
          v634.__r_.__value_.__l.__size_ = (std::string::size_type)llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 168), *(void *)&v266[3] >> 3, 0);
          __int16 v659 = 257;
          uint64_t v282 = v279;
          int v283 = v280;
          uint64_t v284 = 2;
          goto LABEL_456;
        }
        unsigned int v287 = __clz(__rbit32((unsigned __int32)v275.i32[0] >> 3));
        if (v275.i32[0] >= 8u) {
          unsigned int v288 = v287;
        }
        else {
          unsigned int v288 = 32;
        }
        if (*(unsigned char *)(a1 + 213))
        {
          uint64_t v289 = a1 + 80 * v266[1].u8[0] + 16 * v288;
          uint64_t v290 = *(uint64_t ***)(v289 + 240);
          unint64_t v291 = *(uint64_t ***)(v289 + 248);
          uint64_t v292 = *(llvm::Value **)(a1 + 168);
          __int16 v642 = 257;
          v634.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1CC277FE0((uint64_t)&__dst, (llvm::CastInst *)v269, v292, (uint64_t)&v639, v273);
          __int16 v659 = 257;
          uint64_t v282 = v290;
          int v283 = v291;
          uint64_t v284 = 1;
LABEL_456:
          sub_1CB845BAC((uint64_t *)&__dst, v282, v283, (uint64_t *)&v634, v284, (uint64_t)&v657, 0);
LABEL_457:
          uint64_t v285 = *(void *)(*(void *)v266 + 24);
          unsigned int v286 = *(_DWORD *)(v274 + 48);
          if (v286 <= 0x2A && ((1 << v286) & 0x40000000038) != 0)
          {
LABEL_459:
            if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[2]) {
              free(__dst.__r_.__value_.__l.__data_);
            }
            goto LABEL_461;
          }
          uint64_t v293 = 0;
          uint64_t v294 = **(uint64_t ***)v285;
          v639 = v641;
          uint64_t v640 = 0x200000000;
          uint64_t v645 = v294;
          v646 = &v654;
          v647 = &v655;
          uint64_t v648 = 0;
          int v649 = 0;
          __int16 v650 = 512;
          char v651 = 7;
          v643 = 0;
          v644 = 0;
          uint64_t v652 = 0;
          uint64_t v653 = 0;
          uint64_t v654 = &unk_1F2616E88;
          uint64_t v655 = &unk_1F2617008;
          v643 = *(uint64_t ***)(v285 + 40);
          v644 = (void **)(v285 + 24);
          unsigned int v295 = *(unsigned __int8 **)(v285 + 48);
          v634.__r_.__value_.__r.__words[0] = (std::string::size_type)v295;
          if (v295)
          {
            llvm::MetadataTracking::track((uint64_t)&v634, v295, 2);
            uint64_t v293 = v634.__r_.__value_.__r.__words[0];
          }
          sub_1CB8461A4((uint64_t)&v639, 0, v293);
          if (v634.__r_.__value_.__r.__words[0])
          {
            int v333 = *v634.__r_.__value_.__l.__data_;
            if ((v333 - 4) > 0x1E)
            {
              if ((v333 - 3) >= 0xFFFFFFFE) {
                std::string::size_type v351 = v634.__r_.__value_.__r.__words[0];
              }
              else {
                std::string::size_type v351 = 0;
              }
              if ((v333 - 3) < 0xFFFFFFFE)
              {
                if (v333 == 3) {
                  *(void *)(v634.__r_.__value_.__r.__words[0] + 8) = 0;
                }
                goto LABEL_471;
              }
              unint64_t v335 = v351 + 8;
            }
            else
            {
              if ((*(unsigned char *)(v634.__r_.__value_.__r.__words[0] + 1) & 0x7F) != 2
                && !*(_DWORD *)(v634.__r_.__value_.__r.__words[0] + 12))
              {
                goto LABEL_471;
              }
              uint64_t v334 = *(void *)(v634.__r_.__value_.__r.__words[0] + 16);
              if ((v334 & 4) == 0) {
                goto LABEL_471;
              }
              unint64_t v335 = v334 & 0xFFFFFFFFFFFFFFF8;
              if (!v335) {
                goto LABEL_471;
              }
            }
            *(void *)&long long v657 = &v634;
            sub_1CC5FA668(v335 + 16, &v657);
          }
LABEL_471:
          unint64_t v297 = *(llvm::Value **)(v274 + 168);
          __int16 v659 = 257;
          unint64_t v298 = (llvm::ConstantInt **)sub_1CC277FE0((uint64_t)&v639, (llvm::CastInst *)v269, v297, (uint64_t)&v657, v296);
          uint64_t v299 = sub_1CCB68794(*(unsigned char *)(v274 + 208), (llvm::Type *)*(unsigned int *)(v274 + 220), (uint64_t)&v639, v298);
          unint64_t v300 = v299;
          uint64_t v301 = *(void *)v269;
          __int16 v635 = 257;
          if (*(void *)v299 != v301)
          {
            if (*((unsigned __int8 *)v299 + 16) <= 0x14u)
            {
              uint64_t v302 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v646 + 28))(v646, 48, v299, v301);
              unint64_t v300 = (llvm::Value *)v302;
              if (v302)
              {
                if (*(unsigned __int8 *)(v302 + 16) >= 0x1Cu)
                {
                  (*((void (**)(void **, uint64_t, std::string *, uint64_t **, void **))*v647 + 2))(v647, v302, &v634, v643, v644);
                  if (v640)
                  {
                    uint64_t v376 = (llvm::MDNode **)v639;
                    uint64_t v377 = (llvm::MDNode **)((char *)v639 + 16 * v640);
                    do
                    {
                      llvm::Instruction::setMetadata(v300, *(_DWORD *)v376, v376[1]);
                      v376 += 2;
                    }
                    while (v376 != v377);
                  }
                }
              }
            }
            else
            {
              __int16 v659 = 257;
              unint64_t v300 = llvm::CastInst::Create(48, (uint64_t)v299, v301, (const char **)&v657, 0);
              (*((void (**)(void **, llvm::Value *, std::string *, uint64_t **, void **))*v647 + 2))(v647, v300, &v634, v643, v644);
              if (v640)
              {
                uint64_t v349 = (llvm::MDNode **)v639;
                unint64_t v350 = (llvm::MDNode **)((char *)v639 + 16 * v640);
                do
                {
                  llvm::Instruction::setMetadata(v300, *(_DWORD *)v349, v349[1]);
                  v349 += 2;
                }
                while (v349 != v350);
              }
            }
          }
          int v303 = *(unsigned __int8 *)(v285 + 16);
          if (v303 != 60)
          {
            if (v303 == 61)
            {
              uint64_t v304 = 1;
LABEL_490:
              int v313 = *(_DWORD *)(v285 + 20);
              if ((v313 & 0x40000000) != 0) {
                uint64_t v314 = *(void *)(v285 - 8);
              }
              else {
                uint64_t v314 = v285 - 32 * (v313 & 0x7FFFFFF);
              }
              uint64_t v315 = v314 + 32 * v304;
              if (*(void *)v315)
              {
                **(void **)(v315 + 16) = *(void *)(v315 + 8);
                uint64_t v316 = *(void *)(v315 + 8);
                if (v316) {
                  *(void *)(v316 + 16) = *(void *)(v315 + 16);
                }
              }
              *(void *)uint64_t v315 = v300;
              if (v300)
              {
                uint64_t v319 = *((void *)v300 + 1);
                uint64_t v318 = (void *)((char *)v300 + 8);
                uint64_t v317 = v319;
                uint64_t v320 = v314 + 32 * v304;
                *(void *)(v320 + 8) = v319;
                if (v319) {
                  *(void *)(v317 + 16) = v320 + 8;
                }
                *(void *)(v320 + 16) = v318;
                *uint64_t v318 = v315;
              }
              if (v639 != v641) {
                free(v639);
              }
              goto LABEL_459;
            }
            if ((v303 - 66) <= 0xFFFFFFFD) {
              llvm::report_fatal_error((llvm *)"Unexpected instruction", (const llvm::Twine *)1);
            }
          }
          uint64_t v304 = 0;
          goto LABEL_490;
        }
        unsigned int v559 = v288;
        int v305 = v266[1].u8[0];
        int v306 = *(uint64_t ****)(*(void *)v266 + 24);
        int v558 = *(unsigned __int8 *)(a1 + 208);
        uint64_t v307 = 0;
        if (!*(unsigned char *)(a1 + 210))
        {
          uint64_t v336 = **v306;
          v639 = v641;
          uint64_t v640 = 0x200000000;
          uint64_t v645 = v336;
          v646 = &v654;
          v647 = &v655;
          uint64_t v648 = 0;
          int v649 = 0;
          __int16 v650 = 512;
          char v651 = 7;
          v643 = 0;
          v644 = 0;
          uint64_t v652 = 0;
          uint64_t v653 = 0;
          uint64_t v654 = &unk_1F2616E88;
          uint64_t v655 = &unk_1F2617008;
          v643 = v306[5];
          v644 = v306 + 3;
          uint64_t v337 = (unsigned __int8 *)v306[6];
          v634.__r_.__value_.__r.__words[0] = (std::string::size_type)v337;
          if (v337)
          {
            llvm::MetadataTracking::track((uint64_t)&v634, v337, 2);
            uint64_t v307 = v634.__r_.__value_.__r.__words[0];
          }
          sub_1CB8461A4((uint64_t)&v639, 0, v307);
          if (!v634.__r_.__value_.__r.__words[0])
          {
LABEL_537:
            std::string __p = 0;
            int64_t v339 = *(llvm::Value **)(v274 + 168);
            __int16 v659 = 257;
            uint64_t v340 = sub_1CC277FE0((uint64_t)&v639, (llvm::CastInst *)v269, v339, (uint64_t)&v657, v338);
            std::string __p = v340;
            unint64_t v341 = *(unsigned int *)(v274 + 220);
            __int16 v635 = 257;
            unsigned int v342 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v340, v341, 0);
            uint64_t v343 = sub_1CC2429AC((uint64_t)&v639, (uint64_t)v340, (uint64_t)v342, (uint64_t)&v634, 0);
            uint64_t v344 = *v645 + 1912;
            __int16 v633 = 257;
            if (*(void *)v343 == v344)
            {
              uint64_t v556 = v343;
            }
            else if (*((unsigned __int8 *)v343 + 16) <= 0x14u)
            {
              uint64_t v352 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v646 + 28))(v646, 38, v343, v344);
              uint64_t v556 = (llvm::Instruction *)v352;
              if (v352 && *(unsigned __int8 *)(v352 + 16) >= 0x1Cu)
              {
                (*((void (**)(void **, uint64_t, std::string *, uint64_t **, void **))*v647 + 2))(v647, v352, &v632, v643, v644);
                if (v640)
                {
                  uint64_t v378 = (llvm::MDNode **)v639;
                  uint64_t v379 = (llvm::MDNode **)((char *)v639 + 16 * v640);
                  do
                  {
                    llvm::Instruction::setMetadata(v556, *(_DWORD *)v378, v378[1]);
                    v378 += 2;
                  }
                  while (v378 != v379);
                  uint64_t v274 = a1;
                }
                else
                {
                  uint64_t v274 = a1;
                }
              }
            }
            else
            {
              __int16 v659 = 257;
              int v345 = llvm::CastInst::Create(38, (uint64_t)v343, v344, (const char **)&v657, 0);
              (*((void (**)(void **, llvm::Instruction *, std::string *, uint64_t **, void **))*v647 + 2))(v647, v345, &v632, v643, v644);
              if (v640)
              {
                uint64_t v371 = (llvm::MDNode **)v639;
                uint64_t v372 = (llvm::MDNode **)((char *)v639 + 16 * v640);
                do
                {
                  llvm::Instruction::setMetadata(v345, *(_DWORD *)v371, v371[1]);
                  v371 += 2;
                }
                while (v371 != v372);
              }
              uint64_t v556 = v345;
            }
            uint64_t v549 = (llvm::ConstantInt **)sub_1CCB68794(*(unsigned char *)(v274 + 208), (llvm::Type *)*(unsigned int *)(v274 + 220), (uint64_t)&v639, (llvm::ConstantInt **)__p);
            uint64_t v356 = sub_1CCB69390(v274, v549, (uint64_t)&v639);
            unint64_t v357 = *(llvm::Type **)(v274 + 184);
            __int16 v635 = 257;
            uint64_t v358 = v274;
            char v359 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(v643[7][5] + 272), v357, 1);
            uint64_t v360 = operator new(0x60uLL);
            v360[13] = v360[13] & 0x38000000 | 1;
            *(void *)uint64_t v360 = 0;
            *((void *)v360 + 1) = 0;
            *((void *)v360 + 2) = 0;
            *((void *)v360 + 3) = v360 + 8;
            __int16 v659 = 257;
            uint64_t v361 = (uint64_t)v357;
            __int16 v362 = (llvm::Instruction *)(v360 + 8);
            llvm::LoadInst::LoadInst((llvm::Value *)(v360 + 8), v361, (uint64_t)v356, (const char **)&v657, 0, v359, 0);
            (*((void (**)(void **, llvm::Instruction *, std::string *, uint64_t **, void **))*v647 + 2))(v647, v362, &v634, v643, v644);
            if (v640)
            {
              unint64_t v366 = (llvm::MDNode **)v639;
              uint64_t v367 = (llvm::MDNode **)((char *)v639 + 16 * v640);
              do
              {
                llvm::Instruction::setMetadata(v362, *(_DWORD *)v366, v366[1]);
                v366 += 2;
              }
              while (v366 != v367);
            }
            __int16 v659 = 257;
            char v363 = sub_1CB845F20((uint64_t)&v639, 33, v556, (uint64_t)v362, (uint64_t)&v657);
            if (*(unsigned char *)(v358 + 217))
            {
              uint64_t v364 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v556, *(unsigned __int8 *)(v358 + 218), 0);
              __int16 v659 = 257;
              uint64_t v365 = sub_1CB845F20((uint64_t)&v639, 33, v556, (uint64_t)v364, (uint64_t)&v657);
              __int16 v659 = 257;
              char v363 = sub_1CBF52474((uint64_t)&v639, v363, (uint64_t)v365, (uint64_t)&v657);
            }
            v634.__r_.__value_.__r.__words[0] = *(void *)v358;
            *(void *)&long long v657 = 0x186A000000001;
            llvm::MDBuilder::createBranchWeights((uint64_t **)&v634, (uint64_t)&v657, 2);
            sub_1CD1290BC((uint64_t)v363, (uint64_t)v306);
          }
          int v368 = *v634.__r_.__value_.__l.__data_;
          if ((v368 - 4) > 0x1E)
          {
            if ((v368 - 3) >= 0xFFFFFFFE) {
              std::string::size_type v373 = v634.__r_.__value_.__r.__words[0];
            }
            else {
              std::string::size_type v373 = 0;
            }
            if ((v368 - 3) < 0xFFFFFFFE)
            {
              uint64_t v274 = a1;
              if (v368 == 3) {
                *(void *)(v634.__r_.__value_.__r.__words[0] + 8) = 0;
              }
              goto LABEL_537;
            }
            unint64_t v370 = v373 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v634.__r_.__value_.__r.__words[0] + 1) & 0x7F) != 2
              && !*(_DWORD *)(v634.__r_.__value_.__r.__words[0] + 12))
            {
              goto LABEL_537;
            }
            uint64_t v369 = *(void *)(v634.__r_.__value_.__r.__words[0] + 16);
            if ((v369 & 4) == 0) {
              goto LABEL_537;
            }
            unint64_t v370 = v369 & 0xFFFFFFFFFFFFFFF8;
            if (!v370) {
              goto LABEL_537;
            }
          }
          *(void *)&long long v657 = &v634;
          sub_1CC5FA668(v370 + 16, &v657);
          uint64_t v274 = a1;
          goto LABEL_537;
        }
        int v554 = *(unsigned __int8 *)(a1 + 217);
        int v557 = *(unsigned __int8 *)(a1 + 218);
        int v555 = *(unsigned __int8 *)(a1 + 209);
        uint64_t v308 = **v306;
        v639 = v641;
        uint64_t v640 = 0x200000000;
        uint64_t v645 = v308;
        v646 = &v654;
        v647 = &v655;
        uint64_t v648 = 0;
        int v649 = 0;
        __int16 v650 = 512;
        char v651 = 7;
        v643 = 0;
        v644 = 0;
        uint64_t v652 = 0;
        uint64_t v653 = 0;
        uint64_t v654 = &unk_1F2616E88;
        uint64_t v655 = &unk_1F2617008;
        v643 = v306[5];
        v644 = v306 + 3;
        unsigned int v309 = (unsigned __int8 *)v306[6];
        v634.__r_.__value_.__r.__words[0] = (std::string::size_type)v309;
        if (v309)
        {
          llvm::MetadataTracking::track((uint64_t)&v634, v309, 2);
          uint64_t v307 = v634.__r_.__value_.__r.__words[0];
        }
        sub_1CB8461A4((uint64_t)&v639, 0, v307);
        if (v634.__r_.__value_.__r.__words[0])
        {
          int v346 = *v634.__r_.__value_.__l.__data_;
          if ((v346 - 4) > 0x1E)
          {
            if ((v346 - 3) >= 0xFFFFFFFE) {
              std::string::size_type v355 = v634.__r_.__value_.__r.__words[0];
            }
            else {
              std::string::size_type v355 = 0;
            }
            if ((v346 - 3) < 0xFFFFFFFE)
            {
              if (v346 == 3) {
                *(void *)(v634.__r_.__value_.__r.__words[0] + 8) = 0;
              }
              goto LABEL_484;
            }
            unint64_t v348 = v355 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v634.__r_.__value_.__r.__words[0] + 1) & 0x7F) != 2
              && !*(_DWORD *)(v634.__r_.__value_.__r.__words[0] + 12))
            {
              goto LABEL_484;
            }
            uint64_t v347 = *(void *)(v634.__r_.__value_.__r.__words[0] + 16);
            if ((v347 & 4) == 0) {
              goto LABEL_484;
            }
            unint64_t v348 = v347 & 0xFFFFFFFFFFFFFFF8;
            if (!v348) {
              goto LABEL_484;
            }
          }
          *(void *)&long long v657 = &v634;
          sub_1CC5FA668(v348 + 16, &v657);
        }
LABEL_484:
        uint64_t v310 = (uint64_t **)v643[7][5];
        uint64_t v311 = *(void *)(a1 + 176);
        __int16 v635 = 257;
        uint64_t v312 = (llvm::Instruction *)v269;
        if (*(void *)v269 != v311)
        {
          if (v269[16] > 0x14u)
          {
            __int16 v659 = 257;
            uint64_t v312 = llvm::CastInst::Create(49, (uint64_t)v269, v311, (const char **)&v657, 0);
            (*((void (**)(void **, llvm::Instruction *, std::string *, uint64_t **, void **))*v647 + 2))(v647, v312, &v634, v643, v644);
            if (v640)
            {
              unint64_t v353 = (llvm::MDNode **)v639;
              unint64_t v354 = (llvm::MDNode **)((char *)v639 + 16 * v640);
              do
              {
                llvm::Instruction::setMetadata(v312, *(_DWORD *)v353, v353[1]);
                v353 += 2;
              }
              while (v353 != v354);
            }
            goto LABEL_487;
          }
          uint64_t v324 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v646 + 28))(v646, 49, v269, v311);
          uint64_t v312 = (llvm::Instruction *)v324;
          if (v324 && *(unsigned __int8 *)(v324 + 16) >= 0x1Cu)
          {
            (*((void (**)(void **, uint64_t, std::string *, uint64_t **, void **))*v647 + 2))(v647, v324, &v634, v643, v644);
            if (v640)
            {
              BOOL v374 = (llvm::MDNode **)v639;
              int v375 = (llvm::MDNode **)((char *)v639 + 16 * v640);
              do
              {
                llvm::Instruction::setMetadata(v312, *(_DWORD *)v374, v374[1]);
                v374 += 2;
              }
              while (v374 != v375);
            }
LABEL_487:
            uint64_t v274 = a1;
          }
        }
        if (*(unsigned char *)(v274 + 211)) {
          int v325 = 156;
        }
        else {
          int v325 = 155;
        }
        llvm::Intrinsic::getType(*v310, v325, 0, 0);
        unsigned int v326 = (unsigned __int8 *)off_1E6830B58[v325];
        if (v326) {
          char v327 = (const char *)strlen(off_1E6830B58[v325]);
        }
        else {
          char v327 = 0;
        }
        char v328 = (llvm::PointerType *)llvm::Intrinsic::getType(*v310, v325, 0, 0);
        llvm::Module::getOrInsertFunction((uint64_t)v310, v326, v327, v328, 0);
        int64_t v330 = (uint64_t **)v329;
        if (v329) {
          uint64_t v331 = *(uint64_t ***)(v329 + 24);
        }
        else {
          uint64_t v331 = 0;
        }
        v634.__r_.__value_.__r.__words[0] = *(void *)(a1 + 472);
        v634.__r_.__value_.__l.__size_ = (std::string::size_type)v312;
        v634.__r_.__value_.__r.__words[2] = (std::string::size_type)llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 192), v559+ 16 * (v305 != 0)+ ((v554 << 24) | (v558 << 25) | (v557 << 16) | (32 * v555)), 0);
        __int16 v659 = 257;
        sub_1CB845BAC((uint64_t *)&v639, v331, v330, (uint64_t *)&v634, 3, (uint64_t)&v657, 0);
        if (v639 != v641) {
          free(v639);
        }
        uint64_t v274 = a1;
        goto LABEL_457;
      }
      char v142 = *(llvm::detail::IEEEFloat **)(v124 + 464);
    }
    else
    {
      uint64_t v141 = (llvm::detail::IEEEFloat *)llvm::ConstantInt::get(*(llvm::ConstantInt **)(v124 + 168), v135, 0);
      char v142 = sub_1CC56C0C0((llvm *)0x30, v141, *(llvm::Constant **)(v124 + 176), 0);
    }
    int v140 = (llvm::Instruction *)sub_1CCB68828(*(uint64_t ***)(v124 + 176), (uint64_t *)&v575, v142);
    goto LABEL_302;
  }
LABEL_422:
  if (v606 == v605)
  {
    (*(void (**)(void *))(v605[0] + 32))(v605);
  }
  else if (v606)
  {
    (*(void (**)(void))(*v606 + 40))();
  }
  sub_1CD69AA10((uint64_t)v593);
  if (v607 != v609) {
    free(v607);
  }
  if (v610 != v612) {
    free(v610);
  }
  if (v613 != v615) {
    free(v613);
  }
  return v7;
}

void sub_1CCB67DF0()
{
}

void sub_1CCB67E38(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1F262C6B0;
  sub_1CCB68188(a1 + 4, 0);

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CCB67E90(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1F262C6B0;
  sub_1CCB68188(a1 + 4, 0);
  llvm::Pass::~Pass((llvm::Pass *)a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CCB67EFC()
{
  return "HWAddressSanitizer";
}

void sub_1CCB67F0C()
{
}

uint64_t sub_1CCB67F78(uint64_t a1)
{
  return 0;
}

void sub_1CCB67F9C(uint64_t a1, uint64_t a2)
{
  if (word_1EBCED420)
  {
    if (!byte_1EBCED498) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (!*(unsigned char *)(a1 + 42)) {
LABEL_3:
  }
    sub_1CB843600(a2, a2, (uint64_t)&llvm::StackSafetyGlobalInfoWrapperPass::ID);
LABEL_4:
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
}

uint64_t sub_1CCB68028(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40) + 216;
  __int16 v17 = 260;
  v16[0] = v4;
  llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)v16);
  if ((v20 != 42 || byte_1EA61DC00 == 0) && byte_1EBCED3D8 != 0)
  {
    if (word_1EBCED420)
    {
      if (!byte_1EBCED498) {
        goto LABEL_18;
      }
    }
    else if (*(unsigned char *)(a1 + 42))
    {
      goto LABEL_18;
    }
    uint64_t v8 = *(uint64_t **)(a1 + 8);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (v9 == v10)
    {
LABEL_15:
      uint64_t v11 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v9 != &llvm::StackSafetyGlobalInfoWrapperPass::ID)
      {
        v9 += 16;
        if (v9 == v10) {
          goto LABEL_15;
        }
      }
      uint64_t v11 = *(void *)(v9 + 8);
    }
    uint64_t v7 = *(void *)(a1 + 32);
    *(void *)(v7 + 16) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v11 + 96))(v11, &llvm::StackSafetyGlobalInfoWrapperPass::ID)+ 32;
  }
LABEL_18:
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v15 = a1;
  v16[0] = a1;
  uint64_t v13 = sub_1CCB629C4(v12, a2, sub_1CCB681F0, (uint64_t)v16, sub_1CCB68274, (uint64_t)&v15);
  if (v19 < 0) {
    operator delete(__p);
  }
  return v13;
}

uint64_t *sub_1CCB68188(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    if (*(char *)(v2 + 47) < 0) {
      operator delete(*(void **)(v2 + 24));
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t sub_1CCB681F0(uint64_t a1)
{
  int v1 = *(uint64_t **)(*(void *)a1 + 8);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  if (v2 == v3)
  {
LABEL_4:
    uint64_t v4 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v2 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v2 += 16;
      if (v2 == v3) {
        goto LABEL_4;
      }
    }
    uint64_t v4 = *(void *)(v2 + 8);
  }
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 96))(v4, &llvm::DominatorTreeWrapperPass::ID)
       + 32;
}

uint64_t sub_1CCB68274(uint64_t a1)
{
  int v1 = *(uint64_t **)(*(void *)a1 + 8);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  if (v2 == v3)
  {
LABEL_4:
    uint64_t v4 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v2 != &llvm::PostDominatorTreeWrapperPass::ID)
    {
      v2 += 16;
      if (v2 == v3) {
        goto LABEL_4;
      }
    }
    uint64_t v4 = *(void *)(v2 + 8);
  }
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 96))(v4, &llvm::PostDominatorTreeWrapperPass::ID)+ 32;
}

void sub_1CCB682F8(uint64_t *a1, llvm::GlobalObject *a2)
{
  uint64_t v3 = *a1;
  inserted = llvm::Module::getOrInsertComdat(*(void *)(*a1 + 8), "hwasan.module_ctor", 0x12uLL);
  llvm::GlobalObject::setComdat(a2, (llvm::Comdat *)inserted);
  BOOL v5 = *(uint64_t **)(v3 + 8);

  sub_1CD1CEB38("llvm.global_ctors", v5, (uint64_t)a2, 0, a2);
}

llvm::ConstantExpr *sub_1CCB68364(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = operator new(0x78uLL);
  uint64_t v3 = (llvm::ConstantExpr *)(v2 + 8);
  v2[13] = v2[13] & 0x38000000 | 1;
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 8;
  uint64_t v4 = *(void *)(v1 + 8);
  BOOL v5 = *(llvm::PointerType **)(v1 + 168);
  v8[0] = (llvm::ConstantExpr *)"__hwasan_tls";
  __int16 v9 = 259;
  llvm::GlobalVariable::GlobalVariable((unint64_t *)v2 + 4, v4, v5, 0, 0, 0, (const char **)v8, 0, 3, 0, 0);
  uint64_t v6 = *(void **)(v1 + 8);
  v8[0] = v3;
  sub_1CD1CF0D0(v6, "llvm.compiler.used", (const char *)0x12, v8, 1);
  return v3;
}

void sub_1CCB68420()
{
}

void *sub_1CCB68434(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F262C750;
  result[1] = v3;
  return result;
}

uint64_t sub_1CCB6847C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F262C750;
  a2[1] = v2;
  return result;
}

unint64_t sub_1CCB684A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a2 + 64);
  unsigned int v5 = *(unsigned __int8 *)(v4 + 8);
  if (v5 > 0x11)
  {
LABEL_14:
    if ((v5 & 0xFE) != 0x12 && v5 != 21) {
      return 0;
    }
LABEL_12:
    unint64_t result = llvm::Type::isSizedDerivedType(v4, 0);
    if (!result) {
      return result;
    }
    goto LABEL_3;
  }
  if (((1 << v5) & 0xAC7F) == 0)
  {
    if (((1 << v5) & 0x30000) != 0) {
      goto LABEL_12;
    }
    goto LABEL_14;
  }
LABEL_3:
  if (*(unsigned char *)(*(void *)(a2 - 32) + 16) != 16) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(*(void *)(v6 + 56) + 80);
  uint64_t v8 = v7 ? v7 - 24 : 0;
  if (v6 != v8 || (*(_WORD *)(a2 + 18) & 0x40) != 0) {
    return 0;
  }
  unint64_t result = llvm::memtag::getAllocaSizeInBytes((llvm::memtag *)a2, (const llvm::AllocaInst *)a2);
  if (result)
  {
    if ((llvm::isAllocaPromotable((llvm *)a2, v11) & 1) != 0 || (*(_WORD *)(a2 + 18) & 0xC0) != 0) {
      return 0;
    }
    uint64_t v12 = *(llvm::StackSafetyGlobalInfo **)(v3 + 16);
    return !v12 || !llvm::StackSafetyGlobalInfo::isSafe(v12, (const llvm::AllocaInst *)a2);
  }
  return result;
}

uint64_t sub_1CCB6859C(uint64_t a1, const llvm::Instruction *a2, llvm *this)
{
  uint64_t v5 = *(void *)this;
  unsigned int v6 = *(_DWORD *)(*(void *)this + 8);
  if ((v6 & 0xFE) == 0x12)
  {
    uint64_t v5 = **(void **)(v5 + 16);
    unsigned int v6 = *(_DWORD *)(v5 + 8);
  }
  if ((v6 & 0xFE) == 0x12) {
    unsigned int v6 = *(_DWORD *)(**(void **)(v5 + 16) + 8);
  }
  if (v6 > 0xFF) {
    return 1;
  }
  int v7 = *((unsigned __int8 *)this + 16);
  if (v7 == 59)
  {
    if ((*((_WORD *)this + 9) & 0x80) != 0) {
      return 1;
    }
  }
  else if (v7 == 21)
  {
    uint64_t v10 = *(void *)(*((void *)this + 3) + 112);
    if (v10)
    {
      unsigned int v11 = *((_DWORD *)this + 8) + 2;
      if (v11 < *(_DWORD *)(v10 + 8))
      {
        uint64_t v12 = *(void *)(v10 + 8 * v11 + 40);
        if (v12)
        {
          if (*(char *)(v12 + 19) < 0) {
            return 1;
          }
        }
      }
    }
  }
  if (!llvm::findAllocaForValue(this, 0)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 214))
  {
    uint64_t v8 = *(llvm::StackSafetyGlobalInfo **)(a1 + 16);
    if (!v8 || !llvm::StackSafetyGlobalInfo::stackAccessIsSafe(v8, a2)) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1CCB68690(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, size_t a4)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(a2[6] + 56) + 40), 254, (uint64_t)(a1 + 21), 1);
  __int16 v9 = *a1;
  v13[0] = llvm::MDString::get(*a1, a3, a4);
  uint64_t Impl = (unsigned __int8 *)llvm::MDTuple::getImpl((uint64_t)v9, v13, 1, 0, 1);
  v15[0] = llvm::MetadataAsValue::get((uint64_t)*a1, Impl);
  if (Declaration) {
    unsigned int v11 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    unsigned int v11 = 0;
  }
  __int16 v14 = 257;
  return sub_1CB845BAC(a2, v11, (uint64_t **)Declaration, v15, 1, (uint64_t)v13, 0);
}

llvm::Instruction *sub_1CCB68794(char a1, llvm::Type *a2, uint64_t a3, llvm::ConstantInt **a4)
{
  int v7 = *a4;
  unint64_t v8 = 255 << (char)a2;
  if (a1)
  {
    __int16 v9 = llvm::ConstantInt::get(v7, v8, 0);
    __int16 v13 = 257;
    return sub_1CB844AF4(a3, a4, (uint64_t)v9, (uint64_t)v12);
  }
  else
  {
    unsigned int v11 = llvm::ConstantInt::get(v7, ~v8, 0);
    __int16 v13 = 257;
    return sub_1CBF52474(a3, a4, (uint64_t)v11, (uint64_t)v12);
  }
}

uint64_t sub_1CCB68828(uint64_t **a1, uint64_t *a2, void *a3)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  v9[0] = *a3;
  uint64_t v5 = (llvm::PointerType *)llvm::FunctionType::get(a1, (uint64_t)v9, 1, 0);
  uint64_t v6 = llvm::InlineAsm::get(v5, (uint64_t)"", 0, (uint64_t)"=r,0", 4, 0, 0, 0, 0);
  if (v6) {
    int v7 = *(uint64_t ***)(v6 + 72);
  }
  else {
    int v7 = 0;
  }
  v11[0] = (uint64_t)a3;
  v9[0] = ".hwasan.shadow";
  __int16 v10 = 259;
  return sub_1CB845BAC(a2, v7, (uint64_t **)v6, v11, 1, (uint64_t)v9, 0);
}

unsigned __int8 *sub_1CCB68908(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t **)a1[56];
  uint64_t v5 = (uint64_t **)a1[57];
  __int16 v20 = 257;
  uint64_t v6 = sub_1CB845BAC((uint64_t *)a2, v4, v5, 0, 0, (uint64_t)v19, 0);
  int v7 = (unsigned __int8 *)v6;
  uint64_t v8 = a1[21];
  __int16 v18 = 257;
  if (*(void *)v6 != v8)
  {
    if (*(unsigned __int8 *)(v6 + 16) <= 0x14u)
    {
      int v7 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a2 + 72)
                                                                                           + 224))(*(void *)(a2 + 72), 39, v6, v8);
      if (v7) {
        BOOL v12 = v7[16] >= 0x1Cu;
      }
      else {
        BOOL v12 = 0;
      }
      if (v12)
      {
        (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v7, v17, *(void *)(a2 + 48), *(void *)(a2 + 56));
        uint64_t v14 = *(unsigned int *)(a2 + 8);
        if (v14)
        {
          uint64_t v15 = *(void *)a2;
          uint64_t v16 = v15 + 16 * v14;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v7, *(_DWORD *)v15, *(llvm::MDNode **)(v15 + 8));
            v15 += 16;
          }
          while (v15 != v16);
        }
      }
    }
    else
    {
      __int16 v22 = 257;
      int v7 = (unsigned __int8 *)llvm::CastInst::Create(39, v6, v8, &v21, 0);
      (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v7, v17, *(void *)(a2 + 48), *(void *)(a2 + 56));
      uint64_t v9 = *(unsigned int *)(a2 + 8);
      if (v9)
      {
        uint64_t v10 = *(void *)a2;
        uint64_t v11 = v10 + 16 * v9;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v7, *(_DWORD *)v10, *(llvm::MDNode **)(v10 + 8));
          v10 += 16;
        }
        while (v10 != v11);
      }
    }
  }
  return v7;
}

void *sub_1CCB68ABC(void *result, uint64_t *a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v4 = result;
  uint64_t v5 = *a4;
  uint64_t v6 = (unint64_t *)a4[1];
  int v7 = (uint64_t *)a4[2];
  if (a3)
  {
    uint64_t v9 = 8 * a3;
    do
    {
      uint64_t v10 = *a2;
      unint64_t result = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v5 + 200), *v6, 0);
      uint64_t v11 = *(_DWORD *)(v10 + 20) & 0x7FFFFFF;
      uint64_t v12 = -v11;
      __int16 v13 = (void *)(v10 - 32 * v11);
      if (*v13)
      {
        uint64_t v14 = v10 + 32 * v12;
        uint64_t v16 = *(void **)(v14 + 16);
        uint64_t v15 = (void *)(v14 + 16);
        *uint64_t v16 = *(v15 - 1);
        uint64_t v17 = *(v15 - 1);
        if (v17) {
          *(void *)(v17 + 16) = *v15;
        }
      }
      *__int16 v13 = result;
      if (result)
      {
        uint64_t v19 = result[1];
        ++result;
        uint64_t v18 = v19;
        uint64_t v20 = v10 + 32 * v12;
        *(void *)(v20 + 8) = v19;
        if (v19) {
          *(void *)(v18 + 16) = v20 + 8;
        }
        *(void *)(v20 + 16) = result;
        *unint64_t result = v13;
      }
      uint64_t v21 = *v7;
      uint64_t v22 = v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF);
      int v23 = (void *)(v22 + 32);
      if (*(void *)(v22 + 32))
      {
        **(void **)(v22 + 48) = *(void *)(v22 + 40);
        uint64_t v24 = *(void *)(v22 + 40);
        if (v24) {
          *(void *)(v24 + 16) = *(void *)(v22 + 48);
        }
      }
      *int v23 = v21;
      if (v21)
      {
        uint64_t v27 = *(void *)(v21 + 8);
        uint64_t v25 = (void *)(v21 + 8);
        uint64_t v26 = v27;
        *(void *)(v22 + 40) = v27;
        if (v27) {
          *(void *)(v26 + 16) = v22 + 40;
        }
        *(void *)(v22 + 48) = v25;
        *uint64_t v25 = v23;
      }
      ++a2;
      v9 -= 8;
    }
    while (v9);
  }
  *uint64_t v4 = v5;
  v4[1] = v6;
  void v4[2] = v7;
  return result;
}

llvm::Instruction *sub_1CCB68BEC(uint64_t a1, uint64_t a2, llvm::CastInst *this, uint64_t a4, llvm::Instruction *a5)
{
  uint64_t v5 = (unsigned __int8 *)a4;
  v52[3] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = ((unint64_t)a5 + (1 << *(_DWORD *)(a1 + 136)) - 1) & -(1 << *(_DWORD *)(a1 + 136));
  if (*(unsigned char *)(a1 + 211)) {
    unint64_t v10 = (unint64_t)a5;
  }
  else {
    unint64_t v10 = ((unint64_t)a5 + (1 << *(_DWORD *)(a1 + 136)) - 1) & -(1 << *(_DWORD *)(a1 + 136));
  }
  uint64_t v11 = **(void **)(a2 + 64) + 1912;
  __int16 v48 = 257;
  if (*(void *)a4 != v11)
  {
    if (*(unsigned __int8 *)(a4 + 16) <= 0x14u)
    {
      uint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a2 + 72)
                                                                                           + 224))(*(void *)(a2 + 72), 38, a4, v11);
      if (v5) {
        BOOL v15 = v5[16] >= 0x1Cu;
      }
      else {
        BOOL v15 = 0;
      }
      if (v15)
      {
        (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v5, v47, *(void *)(a2 + 48), *(void *)(a2 + 56));
        uint64_t v41 = *(unsigned int *)(a2 + 8);
        if (v41)
        {
          uint64_t v42 = *(void *)a2;
          uint64_t v43 = *(void *)a2 + 16 * v41;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v42, *(llvm::MDNode **)(v42 + 8));
            v42 += 16;
          }
          while (v42 != v43);
        }
      }
    }
    else
    {
      __int16 v51 = 257;
      uint64_t v5 = (unsigned __int8 *)llvm::CastInst::Create(38, a4, v11, &v49, 0);
      (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v5, v47, *(void *)(a2 + 48), *(void *)(a2 + 56));
      uint64_t v12 = *(unsigned int *)(a2 + 8);
      if (v12)
      {
        uint64_t v13 = *(void *)a2;
        uint64_t v14 = *(void *)a2 + 16 * v12;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v13, *(llvm::MDNode **)(v13 + 8));
          v13 += 16;
        }
        while (v13 != v14);
      }
    }
  }
  if (*(unsigned char *)(a1 + 213))
  {
    uint64_t v16 = *(uint64_t ***)(a1 + 432);
    uint64_t v17 = *(uint64_t ***)(a1 + 440);
    uint64_t v18 = *(llvm::Value **)(a1 + 176);
    __int16 v51 = 257;
    v52[0] = (uint64_t)sub_1CC277FE0(a2, this, v18, (uint64_t)&v49, a5);
    v52[1] = (uint64_t)v5;
    void v52[2] = (uint64_t)llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 168), v9, 0);
    __int16 v48 = 257;
    return (llvm::Instruction *)sub_1CB845BAC((uint64_t *)a2, v16, v17, v52, 3, (uint64_t)v47, 0);
  }
  else
  {
    unint64_t v20 = v10 >> *(_DWORD *)(a1 + 136);
    uint64_t v21 = *(llvm::Value **)(a1 + 168);
    __int16 v51 = 257;
    uint64_t v22 = (llvm::ConstantInt **)sub_1CC277FE0(a2, this, v21, (uint64_t)&v49, a5);
    unint64_t result = sub_1CCB69390(a1, v22, a2);
    uint64_t v24 = result;
    if (v20)
    {
      uint64_t v25 = **(void **)(a2 + 64);
      uint64_t v26 = *(llvm::ConstantInt **)(v25 + 1984);
      unsigned int v27 = *(_DWORD *)(v25 + 1992);
      unsigned int v50 = v27 >> 8;
      if (v27 >> 8 > 0x40) {
        operator new[]();
      }
      unint64_t v28 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v27) + 63);
      if (v27 <= 0xFF) {
        unint64_t v28 = 0;
      }
      uint64_t v49 = (const char *)(v28 & v20);
      BOOL v29 = llvm::ConstantInt::get(v26, (llvm::LLVMContext *)&v49, v23);
      if (v50 >= 0x41 && v49)
      {
        unsigned int v40 = v29;
        MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
        BOOL v29 = v40;
      }
      unint64_t result = (llvm::Instruction *)llvm::IRBuilderBase::CreateMemSet(a2, v24, (uint64_t)v5, v29, 256, 0, 0, 0, 0);
    }
    if (v10 != v9)
    {
      int v30 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 184), v10 & ~(-1 << *(_DWORD *)(a1 + 136)), 0);
      uint64_t v31 = *(void *)(a1 + 184);
      __int16 v51 = 257;
      int v32 = sub_1CB930CF4((uint64_t *)a2, v31, v24, v20, (uint64_t)&v49);
      sub_1CC27BF8C((uint64_t *)a2, (uint64_t)v30, (uint64_t)v32, 0, 0);
      uint64_t v33 = *(void *)(a1 + 176);
      uint64_t v34 = *(void *)(a1 + 184);
      __int16 v48 = 257;
      if (*(void *)this != v33)
      {
        if (*((unsigned __int8 *)this + 16) <= 0x14u)
        {
          this = (llvm::CastInst *)(*(uint64_t (**)(void, uint64_t, llvm::CastInst *, uint64_t))(**(void **)(a2 + 72) + 224))(*(void *)(a2 + 72), 49, this, v33);
          if (this) {
            BOOL v38 = *((unsigned __int8 *)this + 16) >= 0x1Cu;
          }
          else {
            BOOL v38 = 0;
          }
          if (v38)
          {
            (*(void (**)(void, llvm::CastInst *, unsigned char *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), this, v47, *(void *)(a2 + 48), *(void *)(a2 + 56));
            uint64_t v44 = *(unsigned int *)(a2 + 8);
            if (v44)
            {
              uint64_t v45 = *(void *)a2;
              uint64_t v46 = *(void *)a2 + 16 * v44;
              do
              {
                llvm::Instruction::setMetadata(this, *(_DWORD *)v45, *(llvm::MDNode **)(v45 + 8));
                v45 += 16;
              }
              while (v45 != v46);
            }
          }
        }
        else
        {
          __int16 v51 = 257;
          this = llvm::CastInst::Create(49, (uint64_t)this, v33, &v49, 0);
          (*(void (**)(void, llvm::CastInst *, unsigned char *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), this, v47, *(void *)(a2 + 48), *(void *)(a2 + 56));
          uint64_t v35 = *(unsigned int *)(a2 + 8);
          if (v35)
          {
            uint64_t v36 = *(void *)a2;
            uint64_t v37 = *(void *)a2 + 16 * v35;
            do
            {
              llvm::Instruction::setMetadata(this, *(_DWORD *)v36, *(llvm::MDNode **)(v36 + 8));
              v36 += 16;
            }
            while (v36 != v37);
          }
        }
      }
      __int16 v51 = 257;
      char v39 = sub_1CB930CF4((uint64_t *)a2, v34, this, (int)v9 - 1, (uint64_t)&v49);
      return sub_1CC27BF8C((uint64_t *)a2, (uint64_t)v5, (uint64_t)v39, 0, 0);
    }
  }
  return result;
}

llvm::Instruction *sub_1CCB69190(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(v4 + 48) = *(void *)(a2 + 40);
  *(void *)(v4 + 56) = a2 + 24;
  uint64_t v5 = *(unsigned __int8 **)(a2 + 48);
  uint64_t v18 = v5;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)&v18, v5, 2);
    uint64_t v6 = (uint64_t)v18;
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_1CB8461A4(v4, 0, v6);
  if (!v18) {
    goto LABEL_4;
  }
  int v12 = *v18;
  if ((v12 - 4) > 0x1E)
  {
    if ((v12 - 3) >= 0xFFFFFFFE) {
      BOOL v15 = v18;
    }
    else {
      BOOL v15 = 0;
    }
    if ((v12 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v14 = (unint64_t)(v15 + 8);
LABEL_22:
      v16[0] = &v18;
      sub_1CC5FA668(v14 + 16, v16);
      goto LABEL_4;
    }
    if (v12 == 3) {
      *((void *)v18 + 1) = 0;
    }
  }
  else if ((v18[1] & 0x7F) == 2 || *((_DWORD *)v18 + 3))
  {
    uint64_t v13 = *((void *)v18 + 2);
    if ((v13 & 4) != 0)
    {
      unint64_t v14 = v13 & 0xFFFFFFFFFFFFFFF8;
      if (v14) {
        goto LABEL_22;
      }
    }
  }
LABEL_4:
  if (byte_1EBCED618)
  {
    int v7 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v3 + 168), 0, 0);
  }
  else
  {
    uint64_t v8 = *(void *)a1;
    if (byte_1EBCED6D8)
    {
      int v7 = sub_1CCB68908((void *)v3, *(void *)a1);
    }
    else
    {
      uint64_t v9 = **(void **)(a1 + 16);
      unint64_t v10 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v3 + 168), *(void *)(v3 + 224), 0);
      __int16 v17 = 257;
      int v7 = sub_1CC2428C0(v8, v9, (uint64_t)v10, (uint64_t)v16);
    }
  }
  return sub_1CCB68BEC(v3, *(void *)a1, **(llvm::CastInst ***)(a1 + 24), (uint64_t)v7, **(llvm::Instruction ***)(a1 + 32));
}

BOOL sub_1CCB69310(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3 == a1[1] || v3 == *a1) {
    return 0;
  }
  if (*(unsigned char *)(v3 + 16) == 84)
  {
    uint64_t v4 = *(void *)(v3 - 32);
    if (v4)
    {
      if (!*(unsigned char *)(v4 + 16) && *(void *)(v4 + 24) == *(void *)(v3 + 72) && (*(unsigned char *)(v4 + 33) & 0x20) != 0) {
        return !llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)v3);
      }
    }
  }
  return 1;
}

llvm::Instruction *sub_1CCB69390(uint64_t a1, llvm::ConstantInt **a2, uint64_t a3)
{
  unint64_t v6 = *(int *)(a1 + 136);
  __int16 v23 = 257;
  int v7 = llvm::ConstantInt::get(*a2, v6, 0);
  uint64_t v8 = sub_1CC2429AC(a3, (uint64_t)a2, (uint64_t)v7, (uint64_t)v22, 0);
  uint64_t v9 = (unsigned __int8 *)v8;
  if (*(void *)(a1 + 144))
  {
    uint64_t v10 = *(void *)(a1 + 184);
    uint64_t v11 = *(uint64_t **)(a1 + 472);
    __int16 v23 = 257;
    return sub_1CB930F7C((uint64_t *)a3, v10, v11, (const char *)v8, (uint64_t)v22);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 176);
    v21[16] = 257;
    if (*(void *)v8 != v12)
    {
      if (*((unsigned __int8 *)v8 + 16) <= 0x14u)
      {
        uint64_t v9 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, uint64_t))(**(void **)(a3 + 72) + 224))(*(void *)(a3 + 72), 48, v8, v12);
        if (v9) {
          BOOL v16 = v9[16] >= 0x1Cu;
        }
        else {
          BOOL v16 = 0;
        }
        if (v16)
        {
          (*(void (**)(void, unsigned __int8 *, _WORD *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v9, v21, *(void *)(a3 + 48), *(void *)(a3 + 56));
          uint64_t v18 = *(unsigned int *)(a3 + 8);
          if (v18)
          {
            uint64_t v19 = *(void *)a3;
            uint64_t v20 = v19 + 16 * v18;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v9, *(_DWORD *)v19, *(llvm::MDNode **)(v19 + 8));
              v19 += 16;
            }
            while (v19 != v20);
          }
        }
      }
      else
      {
        __int16 v23 = 257;
        uint64_t v9 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v8, v12, v22, 0);
        (*(void (**)(void, unsigned __int8 *, _WORD *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v9, v21, *(void *)(a3 + 48), *(void *)(a3 + 56));
        uint64_t v13 = *(unsigned int *)(a3 + 8);
        if (v13)
        {
          uint64_t v14 = *(void *)a3;
          uint64_t v15 = v14 + 16 * v13;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v9, *(_DWORD *)v14, *(llvm::MDNode **)(v14 + 8));
            v14 += 16;
          }
          while (v14 != v15);
        }
      }
    }
  }
  return (llvm::Instruction *)v9;
}

void sub_1CCB69584(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 112;
        sub_1CD69AAB4((void *)v4 - 13);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CCB6960C()
{
}

void sub_1CCB69638()
{
}

uint64_t sub_1CCB69664()
{
  v6.n128_u64[0] = (unint64_t)"Prefix for memory access callbacks";
  v6.n128_u64[1] = 34;
  int v5 = 1;
  uint64_t v4 = (int *)"__hwasan_";
  sub_1CD69AB14((long long *)&v6, &v5, (const char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EA61DDD0, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Use prefix for memory intrinsics in KASAN mode";
  v6.n128_u64[1] = 46;
  int v5 = 1;
  LOBYTE(v3) = 0;
  uint64_t v4 = &v3;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCECE18, "hwasan-kernel-mem-intrinsic-prefix", &v6, &v5, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCECE18, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"instrument reads and writes with callbacks";
  v6.n128_u64[1] = 42;
  int v5 = 1;
  LOBYTE(v3) = 0;
  uint64_t v4 = &v3;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCECED8, "hwasan-instrument-with-calls", &v6, &v5, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCECED8, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"instrument read instructions";
  v6.n128_u64[1] = 28;
  int v5 = 1;
  LOBYTE(v3) = 1;
  uint64_t v4 = &v3;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCECF98, "hwasan-instrument-reads", &v6, &v5, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCECF98, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"instrument write instructions";
  v6.n128_u64[1] = 29;
  int v5 = 1;
  LOBYTE(v3) = 1;
  uint64_t v4 = &v3;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCED058, "hwasan-instrument-writes", &v6, &v5, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCED058, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"instrument atomic instructions (rmw, cmpxchg)";
  v6.n128_u64[1] = 45;
  int v5 = 1;
  LOBYTE(v3) = 1;
  uint64_t v4 = &v3;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCED118, "hwasan-instrument-atomics", &v6, &v5, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCED118, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"instrument byval arguments";
  v6.n128_u64[1] = 26;
  int v5 = 1;
  LOBYTE(v3) = 1;
  uint64_t v4 = &v3;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCED1D8, "hwasan-instrument-byval", &v6, &v5, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCED1D8, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Enable recovery mode (continue-after-error).";
  v6.n128_u64[1] = 44;
  int v5 = 1;
  LOBYTE(v3) = 0;
  uint64_t v4 = &v3;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCED298, "hwasan-recover", &v6, &v5, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCED298, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"instrument stack (allocas)";
  v6.n128_u64[1] = 26;
  int v5 = 1;
  LOBYTE(v3) = 1;
  uint64_t v4 = &v3;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCED358, "hwasan-instrument-stack", &v6, &v5, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCED358, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v1) = 1;
  uint64_t v4 = &v1;
  int v2 = 0;
  int v3 = 1;
  v6.n128_u64[0] = (unint64_t)"Use Stack Safety analysis results";
  v6.n128_u64[1] = 33;
  sub_1CD69AD08(&v5, (char **)&v4, &v3, &v6, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCED418, &dword_1CB82C000);
  int v5 = 1;
  uint64_t v4 = &v3;
  int v2 = 2;
  int v3 = 3;
  v6.n128_u64[0] = (unint64_t)"How many lifetime ends to handle for a single alloca.";
  v6.n128_u64[1] = 53;
  int v1 = 0;
  sub_1CD69AEBC(&v5, &v4, &v2, &v6, &v1);
  __cxa_atexit((void (*)(void *))sub_1CC418A80, &qword_1EA61DC40, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"detect use after scope within function";
  v6.n128_u64[1] = 38;
  int v5 = 1;
  LOBYTE(v3) = 0;
  uint64_t v4 = &v3;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCED4D8, "hwasan-use-after-scope", &v6, &v5, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCED4D8, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Clear alloca tags before returning from the function to allow non-instrumented and "
                                     "instrumented function calls mix. When set to false, allocas are retagged before ret"
                                     "urning from the function to detect use after return.";
  v6.n128_u64[1] = 218;
  int v5 = 1;
  LOBYTE(v3) = 1;
  uint64_t v4 = &v3;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCED598, "hwasan-uar-retag-to-zero", &v6, &v5, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCED598, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"generate new tags with runtime library calls";
  v6.n128_u64[1] = 44;
  int v5 = 1;
  LOBYTE(v3) = 0;
  uint64_t v4 = &v3;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCED658, "hwasan-generate-tags-with-calls", &v6, &v5, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCED658, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Instrument globals";
  v6.n128_u64[1] = 18;
  int v5 = 1;
  LOBYTE(v2) = 0;
  uint64_t v4 = &v2;
  int v3 = 1;
  sub_1CD69B070(&v6, &v5, (char **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCED718, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"don't report bad accesses via pointers with this tag";
  v6.n128_u64[1] = 52;
  int v5 = 1;
  int v3 = -1;
  uint64_t v4 = &v3;
  sub_1CD542604((llvm::cl::Option *)algn_1EBCED7D8, "hwasan-match-all-tag", &v6, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, algn_1EBCED7D8, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Enable KernelHWAddressSanitizer instrumentation";
  v6.n128_u64[1] = 47;
  int v5 = 1;
  LOBYTE(v3) = 0;
  uint64_t v4 = &v3;
  sub_1CD69B208(&v6, &v5, (char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCED898, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"HWASan shadow mapping offset [EXPERIMENTAL]";
  v6.n128_u64[1] = 43;
  int v5 = 1;
  int v3 = 0;
  uint64_t v4 = &v3;
  sub_1CD69B380((long long *)&v6, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1CC816390, &qword_1EA61DD08, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Access dynamic shadow through an ifunc global on platforms that support this";
  v6.n128_u64[1] = 76;
  int v5 = 1;
  LOBYTE(v3) = 0;
  uint64_t v4 = &v3;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCED958, "hwasan-with-ifunc", &v6, &v5, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCED958, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Access dynamic shadow through an thread-local pointer on platforms that support this";
  v6.n128_u64[1] = 84;
  int v5 = 1;
  LOBYTE(v3) = 1;
  uint64_t v4 = &v3;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCEDA18, "hwasan-with-tls", &v6, &v5, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEDA18, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Record stack frames with tagged allocations in a thread-local ring buffer";
  v6.n128_u64[1] = 73;
  int v5 = 1;
  LOBYTE(v3) = 1;
  uint64_t v4 = &v3;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCEDAD8, "hwasan-record-stack-history", &v6, &v5, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEDAD8, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"instrument memory intrinsics";
  v6.n128_u64[1] = 28;
  int v5 = 1;
  LOBYTE(v3) = 1;
  uint64_t v4 = &v3;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCEDB98, "hwasan-instrument-mem-intrinsics", &v6, &v5, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEDB98, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"instrument landing pads";
  v6.n128_u64[1] = 23;
  int v5 = 1;
  LOBYTE(v2) = 0;
  uint64_t v4 = &v2;
  int v3 = 1;
  sub_1CD69B4AC(&v6, &v5, (char **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCEDC58, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"use short granules in allocas and outlined checks";
  v6.n128_u64[1] = 49;
  int v5 = 1;
  LOBYTE(v2) = 0;
  uint64_t v4 = &v2;
  int v3 = 1;
  sub_1CD69B644(&v6, &v5, (char **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCEDD18, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"instrument personality functions";
  v6.n128_u64[1] = 32;
  int v5 = 1;
  LOBYTE(v2) = 0;
  uint64_t v4 = &v2;
  int v3 = 1;
  sub_1CD69B7DC(&v6, &v5, (char **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EA61DA00, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"inline all checks";
  v6.n128_u64[1] = 17;
  int v5 = 1;
  LOBYTE(v3) = 0;
  uint64_t v4 = &v3;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EA61DAC0, "hwasan-inline-all-checks", &v6, &v5, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA61DAC0, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Use page aliasing in HWASan";
  v6.n128_u64[1] = 27;
  int v5 = 1;
  LOBYTE(v3) = 0;
  uint64_t v4 = &v3;
  sub_1CD4BCE90((llvm::cl::Option *)&algn_1EA61DB41[63], "hwasan-experimental-use-page-aliases", &v6, &v5, (unsigned char **)&v4);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &algn_1EA61DB41[63], &dword_1CB82C000);
}

void llvm::computeLTOCacheKey(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, size_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, size_t a10, uint64_t a11)
{
  uint64_t v234 = *MEMORY[0x1E4F143B8];
  long long v221 = xmmword_1CFAC4320;
  uint64_t v222 = 3285377520;
  char v223 = 0;
  llvm::SHA1::update(v220, "32023.408", 9uLL);
  unint64_t v219 = (llvm::SHA1 *)v220;
  char v18 = *(unsigned char *)(a2 + 23);
  BOOL v19 = v18 < 0;
  if (v18 >= 0) {
    uint64_t v20 = (unsigned char *)a2;
  }
  else {
    uint64_t v20 = *(unsigned char **)a2;
  }
  unint64_t v21 = v18 & 0x7F;
  if (v19) {
    unint64_t v22 = *(void *)(a2 + 8);
  }
  else {
    unint64_t v22 = v21;
  }
  llvm::SHA1::update(v220, v20, v22);
  v226.__r_.__value_.__s.__data_[0] = 0;
  llvm::SHA1::update(v220, &v226, 1uLL);
  unsigned int v23 = *(_DWORD *)(a2 + 56);
  LODWORD(v226.__r_.__value_.__l.__data_) = v23 & 1;
  llvm::SHA1::update(v220, &v226, 4uLL);
  LODWORD(v226.__r_.__value_.__l.__data_) = (v23 >> 1) & 1;
  llvm::SHA1::update(v220, &v226, 4uLL);
  LODWORD(v226.__r_.__value_.__l.__data_) = (v23 >> 2) & 1;
  llvm::SHA1::update(v220, &v226, 4uLL);
  LODWORD(v226.__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 132);
  llvm::SHA1::update(v220, &v226, 4uLL);
  uint64_t v24 = *(void *)(a2 + 328);
  uint64_t v25 = *(void *)(a2 + 336);
  while (v24 != v25)
  {
    char v26 = *(unsigned char *)(v24 + 23);
    BOOL v27 = v26 < 0;
    if (v26 >= 0) {
      unint64_t v28 = (unsigned char *)v24;
    }
    else {
      unint64_t v28 = *(unsigned char **)v24;
    }
    unint64_t v29 = v26 & 0x7F;
    if (v27) {
      unint64_t v30 = *(void *)(v24 + 8);
    }
    else {
      unint64_t v30 = v29;
    }
    llvm::SHA1::update(v220, v28, v30);
    v226.__r_.__value_.__s.__data_[0] = 0;
    llvm::SHA1::update(v220, &v226, 1uLL);
    v24 += 24;
  }
  if (*(unsigned char *)(a2 + 412)) {
    int v31 = *(_DWORD *)(a2 + 408);
  }
  else {
    int v31 = -1;
  }
  LODWORD(v226.__r_.__value_.__l.__data_) = v31;
  llvm::SHA1::update(v220, &v226, 4uLL);
  if (*(unsigned char *)(a2 + 420)) {
    int v32 = *(_DWORD *)(a2 + 416);
  }
  else {
    int v32 = -1;
  }
  LODWORD(v226.__r_.__value_.__l.__data_) = v32;
  llvm::SHA1::update(v220, &v226, 4uLL);
  LODWORD(v226.__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 424);
  llvm::SHA1::update(v220, &v226, 4uLL);
  LODWORD(v226.__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 428);
  llvm::SHA1::update(v220, &v226, 4uLL);
  LODWORD(v226.__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 432);
  llvm::SHA1::update(v220, &v226, 4uLL);
  LODWORD(v226.__r_.__value_.__l.__data_) = *(unsigned __int8 *)(a2 + 438);
  llvm::SHA1::update(v220, &v226, 4uLL);
  char v33 = *(unsigned char *)(a2 + 471);
  if (v33 >= 0) {
    uint64_t v34 = (unsigned char *)(a2 + 448);
  }
  else {
    uint64_t v34 = *(unsigned char **)(a2 + 448);
  }
  if (v33 >= 0) {
    unint64_t v35 = v33 & 0x7F;
  }
  else {
    unint64_t v35 = *(void *)(a2 + 456);
  }
  llvm::SHA1::update(v220, v34, v35);
  v226.__r_.__value_.__s.__data_[0] = 0;
  llvm::SHA1::update(v220, &v226, 1uLL);
  char v36 = *(unsigned char *)(a2 + 495);
  if (v36 >= 0) {
    uint64_t v37 = (unsigned char *)(a2 + 472);
  }
  else {
    uint64_t v37 = *(unsigned char **)(a2 + 472);
  }
  if (v36 >= 0) {
    unint64_t v38 = v36 & 0x7F;
  }
  else {
    unint64_t v38 = *(void *)(a2 + 480);
  }
  llvm::SHA1::update(v220, v37, v38);
  v226.__r_.__value_.__s.__data_[0] = 0;
  llvm::SHA1::update(v220, &v226, 1uLL);
  char v39 = *(unsigned char *)(a2 + 519);
  if (v39 >= 0) {
    unsigned int v40 = (unsigned char *)(a2 + 496);
  }
  else {
    unsigned int v40 = *(unsigned char **)(a2 + 496);
  }
  if (v39 >= 0) {
    unint64_t v41 = v39 & 0x7F;
  }
  else {
    unint64_t v41 = *(void *)(a2 + 504);
  }
  llvm::SHA1::update(v220, v40, v41);
  v226.__r_.__value_.__s.__data_[0] = 0;
  llvm::SHA1::update(v220, &v226, 1uLL);
  char v42 = *(unsigned char *)(a2 + 543);
  int v43 = v42;
  if (v42 >= 0) {
    uint64_t v44 = (unsigned char *)(a2 + 520);
  }
  else {
    uint64_t v44 = *(unsigned char **)(a2 + 520);
  }
  unint64_t v45 = v42 & 0x7F;
  if (v43 >= 0) {
    unint64_t v46 = v45;
  }
  else {
    unint64_t v46 = *(void *)(a2 + 528);
  }
  llvm::SHA1::update(v220, v44, v46);
  v226.__r_.__value_.__s.__data_[0] = 0;
  llvm::SHA1::update(v220, &v226, 1uLL);
  char v47 = *(unsigned char *)(a2 + 639);
  int v48 = v47;
  if (v47 >= 0) {
    uint64_t v49 = (unsigned char *)(a2 + 616);
  }
  else {
    uint64_t v49 = *(unsigned char **)(a2 + 616);
  }
  unint64_t v50 = v47 & 0x7F;
  if (v48 >= 0) {
    unint64_t v51 = v50;
  }
  else {
    unint64_t v51 = *(void *)(a2 + 624);
  }
  llvm::SHA1::update(v220, v49, v51);
  v226.__r_.__value_.__s.__data_[0] = 0;
  llvm::SHA1::update(v220, &v226, 1uLL);
  uint64_t v52 = *(unsigned int *)(a3 + 32);
  uint64_t v200 = a3;
  uint64_t v201 = a6;
  uint64_t v197 = a2;
  uint64_t v198 = a1;
  uint64_t v196 = a8;
  if (v52)
  {
    int v53 = 0;
    if (a5)
    {
      size_t v54 = a5;
      uint64_t v55 = a4;
      do
      {
        int v56 = *v55++;
        int v53 = 33 * v53 + v56;
        --v54;
      }
      while (v54);
    }
    uint64_t v57 = *(void *)(a3 + 24);
    uint64_t v58 = *(unsigned int *)(a3 + 44);
    int v59 = 1;
    for (int i = v53; ; int i = v61 + v59++)
    {
      uint64_t v61 = i & (v52 - 1);
      uint64_t v62 = *(void **)(v57 + 8 * v61);
      if (v62 != (void *)-8)
      {
        if (!v62) {
          goto LABEL_66;
        }
        if (*(_DWORD *)(v57 + 8 * v52 + 8 + 4 * v61) == v53
          && a5 == *v62
          && (!a5 || !memcmp(a4, (char *)v62 + v58, a5)))
        {
          break;
        }
      }
    }
    if (v61 != -1) {
      uint64_t v52 = (int)v61;
    }
  }
  else
  {
    uint64_t v52 = 0;
    uint64_t v57 = *(void *)(a3 + 24);
  }
LABEL_66:
  uint64_t v63 = *(void *)(v57 + 8 * v52);
  long long v217 = *(_OWORD *)(v63 + 16);
  int v218 = *(_DWORD *)(v63 + 32);
  llvm::SHA1::update(v220, &v217, 0x14uLL);
  std::string __p = 0;
  char v215 = 0;
  unint64_t v216 = 0;
  sub_1CBF7ACFC((uint64_t)&__p, *(unsigned int *)(a7 + 8));
  uint64_t v64 = *(unsigned int *)(a7 + 16);
  uint64_t v65 = *(void *)a7 + 8 * v64;
  if (*(_DWORD *)(a7 + 8))
  {
    if (v64)
    {
      uint64_t v67 = 8 * v64;
      unint64_t v66 = *(void **)a7;
      while ((~*v66 & 0xFFFFFFFFFFFFFFF0) == 0)
      {
        ++v66;
        v67 -= 8;
        if (!v67) {
          goto LABEL_72;
        }
      }
    }
    else
    {
      unint64_t v66 = *(void **)a7;
    }
  }
  else
  {
LABEL_72:
    unint64_t v66 = (void *)(*(void *)a7 + 8 * v64);
  }
  uint64_t v68 = *(void *)a7 + 8 * v64;
  uint64_t v69 = v215;
  while (v66 != (void *)v68)
  {
    uint64_t v70 = *(void *)(*v66 & 0xFFFFFFFFFFFFFFF8);
    if (v69 >= v216)
    {
      int v71 = (char *)__p;
      uint64_t v72 = (v69 - (unsigned char *)__p) >> 3;
      unint64_t v73 = v72 + 1;
      if ((unint64_t)(v72 + 1) >> 61) {
LABEL_309:
      }
        abort();
      uint64_t v74 = v216 - (unsigned char *)__p;
      if ((v216 - (unsigned char *)__p) >> 2 > v73) {
        unint64_t v73 = v74 >> 2;
      }
      if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v75 = v73;
      }
      if (v75)
      {
        if (v75 >> 61) {
LABEL_310:
        }
          sub_1CB833614();
        uint64_t v76 = (char *)operator new(8 * v75);
      }
      else
      {
        uint64_t v76 = 0;
      }
      unsigned int v77 = &v76[8 * v72];
      *(void *)unsigned int v77 = v70;
      uint64_t v78 = v77 + 8;
      while (v69 != v71)
      {
        uint64_t v79 = *((void *)v69 - 1);
        v69 -= 8;
        *((void *)v77 - 1) = v79;
        v77 -= 8;
      }
      std::string __p = v77;
      char v215 = v78;
      unint64_t v216 = &v76[8 * v75];
      if (v71) {
        operator delete(v71);
      }
      uint64_t v69 = v78;
    }
    else
    {
      *(void *)uint64_t v69 = v70;
      v69 += 8;
    }
    char v215 = v69;
    uint64_t v80 = v66 + 1;
    unint64_t v66 = (void *)v65;
    if (v80 != (void *)v65)
    {
      unint64_t v66 = v80;
      while ((~*v66 & 0xFFFFFFFFFFFFFFF0) == 0)
      {
        if (++v66 == (void *)v65)
        {
          unint64_t v66 = (void *)v65;
          break;
        }
      }
    }
  }
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  int v81 = (std::string::size_type *)__p;
  char v82 = (std::string::size_type *)v215;
  while (v81 != v82)
  {
    v226.__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v83 = *v81++;
    v226.__r_.__value_.__r.__words[0] = v83;
    llvm::SHA1::update(v220, &v226, 8uLL);
  }
  uint64_t v84 = v201;
  uint64_t v85 = *(unsigned int *)(v201 + 12);
  if (v85)
  {
    uint64_t v86 = (size_t ***)operator new(8 * v85);
    size_t v87 = &v86[v85];
  }
  else
  {
    uint64_t v86 = 0;
    size_t v87 = 0;
  }
  uint64_t v88 = *(unsigned int *)(v201 + 8);
  if (v88)
  {
    for (char j = *(size_t ***)v201; ; ++j)
    {
      BOOL v91 = !*j || *j + 1 == 0;
      if (!v91) {
        break;
      }
    }
  }
  else
  {
    char j = *(size_t ***)v201;
  }
  if (j == (size_t **)(*(void *)v201 + 8 * v88))
  {
    unint64_t v90 = v86;
  }
  else
  {
    unint64_t v90 = v86;
    do
    {
      if (v90 >= v87)
      {
        uint64_t v92 = v90 - v86;
        unint64_t v93 = v92 + 1;
        if ((unint64_t)(v92 + 1) >> 61) {
          goto LABEL_309;
        }
        if (((char *)v87 - (char *)v86) >> 2 > v93) {
          unint64_t v93 = ((char *)v87 - (char *)v86) >> 2;
        }
        if ((unint64_t)((char *)v87 - (char *)v86) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v94 = v93;
        }
        if (v94)
        {
          if (v94 >> 61) {
            goto LABEL_310;
          }
          uint64_t v95 = (char *)operator new(8 * v94);
        }
        else
        {
          uint64_t v95 = 0;
        }
        size_t v96 = (size_t ***)&v95[8 * v92];
        *size_t v96 = j;
        int v97 = v96 + 1;
        while (v90 != v86)
        {
          unint64_t v98 = *--v90;
          *--size_t v96 = v98;
        }
        size_t v87 = (size_t ***)&v95[8 * v94];
        if (v86) {
          operator delete(v86);
        }
        uint64_t v86 = v96;
        unint64_t v90 = v97;
        uint64_t v84 = v201;
      }
      else
      {
        *v90++ = j;
      }
      do
      {
        uint64_t v100 = j[1];
        ++j;
        uint64_t v99 = v100;
        if (v100) {
          BOOL v101 = v99 + 1 == 0;
        }
        else {
          BOOL v101 = 1;
        }
      }
      while (v101);
    }
    while (j != (size_t **)(*(void *)v84 + 8 * *(unsigned int *)(v84 + 8)));
  }
  unint64_t v102 = 126 - 2 * __clz(v90 - v86);
  if (v90 == v86) {
    uint64_t v103 = 0;
  }
  else {
    uint64_t v103 = v102;
  }
  sub_1CCB72A0C(v86, v90, v103, 1);
  uint64_t v199 = v86;
  if (v90 != v86)
  {
    unint64_t v111 = v86;
    uint64_t v112 = *(unsigned int *)(v200 + 32);
    unsigned int v113 = v112 - 1;
    uint64_t v114 = *(void *)(v200 + 24);
    uint64_t v202 = v112;
    uint64_t v115 = v114 + 8 * v112 + 8;
    __s1a = (char *)*(unsigned int *)(v200 + 44);
    do
    {
      memset(&v226, 0, 20);
      if (!v202) {
        goto LABEL_167;
      }
      int v116 = **v111;
      size_t v119 = *v116;
      int v117 = (unsigned __int8 *)(v116 + 6);
      size_t v118 = v119;
      if (v119)
      {
        int v120 = 0;
        size_t v121 = v118;
        int v122 = v117;
        do
        {
          int v123 = *v122++;
          int v120 = 33 * v120 + v123;
          --v121;
        }
        while (v121);
      }
      else
      {
        int v120 = 0;
      }
      int v124 = 1;
      for (int k = v120; ; int k = v126 + v124++)
      {
        uint64_t v126 = k & v113;
        uint64_t v127 = *(void **)(v114 + 8 * v126);
        if (v127 != (void *)-8)
        {
          if (!v127) {
            goto LABEL_167;
          }
          if (*(_DWORD *)(v115 + 4 * v126) == v120
            && v118 == *v127
            && (!v118 || !memcmp(v117, &__s1a[(void)v127], v118)))
          {
            break;
          }
        }
      }
      if (v126 == -1) {
LABEL_167:
      }
        uint64_t v128 = v202;
      else {
        uint64_t v128 = (int)v126;
      }
      uint64_t v129 = *(void *)(v114 + 8 * v128);
      *(_OWORD *)&v226.__r_.__value_.__l.__data_ = *(_OWORD *)(v129 + 16);
      LODWORD(v226.__r_.__value_.__r.__words[2]) = *(_DWORD *)(v129 + 32);
      llvm::SHA1::update(v220, &v226, 0x14uLL);
      size_t v230 = (**v111)[4];
      llvm::SHA1::update(v220, &v230, 8uLL);
      for (uint64_t m = (void *)(**v111)[3]; m; uint64_t m = (void *)*m)
      {
        size_t v230 = m[2];
        llvm::SHA1::update(v220, &v230, 8uLL);
      }
      ++v111;
    }
    while (v111 != v90);
  }
  uint64_t v104 = (void *)*v196;
  if ((void *)*v196 != v196 + 1)
  {
    do
    {
      llvm::SHA1::update(v220, (unsigned char *)v104 + 32, 8uLL);
      llvm::SHA1::update(v220, (unsigned char *)v104 + 40, 4uLL);
      uint64_t v105 = (void *)v104[1];
      if (v105)
      {
        do
        {
          uint64_t v106 = v105;
          uint64_t v105 = (void *)*v105;
        }
        while (v105);
      }
      else
      {
        do
        {
          uint64_t v106 = (void *)v104[2];
          BOOL v91 = *v106 == (void)v104;
          uint64_t v104 = v106;
        }
        while (!v91);
      }
      uint64_t v104 = v106;
    }
    while (v106 != v196 + 1);
  }
  uint64_t v212 = 0;
  uint64_t v213 = 0;
  uint64_t v210 = 0;
  uint64_t v211 = &v212;
  uint64_t v208 = &v209;
  unint64_t v209 = 0;
  v207[0] = 0;
  v207[1] = 0;
  v205[3] = &v206;
  int v206 = (std::error_category *)v207;
  size_t v230 = a10;
  unint64_t v231 = (uint64_t **)&v211;
  uint64_t v232 = a11;
  unint64_t v233 = (uint64_t **)&v208;
  v205[0] = &v219;
  v205[1] = v200;
  v205[2] = &v230;
  uint64_t v107 = *(unsigned int *)(a9 + 16);
  uint64_t v108 = *(void *)a9 + 16 * v107;
  if (*(_DWORD *)(a9 + 8))
  {
    uint64_t v110 = v201;
    if (v107)
    {
      uint64_t v131 = 16 * v107;
      BOOL v109 = *(unint64_t **)a9;
      while (*v109 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v109 += 2;
        v131 -= 16;
        if (!v131)
        {
          BOOL v109 = (unint64_t *)(*(void *)a9 + 16 * v107);
          break;
        }
      }
    }
    else
    {
      BOOL v109 = *(unint64_t **)a9;
    }
  }
  else
  {
    BOOL v109 = (unint64_t *)(*(void *)a9 + 16 * v107);
    uint64_t v110 = v201;
  }
  uint64_t v132 = *(void *)a9 + 16 * v107;
LABEL_180:
  if (v109 != (unint64_t *)v132)
  {
    LODWORD(v228[0].__vftable) = *(_WORD *)(v109[1] + 12) & 0xF;
    llvm::SHA1::update(v220, v228, 4uLL);
    std::string::size_type v133 = *v109;
    v226.__r_.__value_.__r.__words[0] = *v109;
    size_t v134 = *(void **)(v230 + 8);
    if (!v134) {
      goto LABEL_186;
    }
    while (1)
    {
      std::string::size_type v135 = v134[4];
      if (v135 <= v133)
      {
        if (v135 >= v133)
        {
          sub_1CD3CFB98(v231, (unint64_t *)&v226, (uint64_t **)&v226);
LABEL_186:
          for (uint64_t n = *(void **)(v232 + 8); n; uint64_t n = (void *)*n)
          {
            std::string::size_type v137 = n[4];
            if (v226.__r_.__value_.__r.__words[0] >= v137)
            {
              if (v137 >= v226.__r_.__value_.__r.__words[0])
              {
                sub_1CD3CFB98(v233, (unint64_t *)&v226, (uint64_t **)&v226);
                break;
              }
              ++n;
            }
          }
          sub_1CCB6B0C0(v205, v109[1]);
          uint64_t v138 = v109 + 2;
          while (v138 != (unint64_t *)v108)
          {
            unint64_t v139 = *v138;
            v138 += 2;
            if (v139 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              BOOL v109 = v138 - 2;
              goto LABEL_180;
            }
          }
          BOOL v109 = (unint64_t *)v108;
          goto LABEL_180;
        }
        ++v134;
      }
      size_t v134 = (void *)*v134;
      if (!v134) {
        goto LABEL_186;
      }
    }
  }
  uint64_t v140 = *(unsigned int *)(v110 + 8);
  if (v140)
  {
    for (iint i = *(size_t ***)v110; !*ii || *ii + 1 == 0; ++ii)
      ;
  }
  else
  {
    iint i = *(size_t ***)v110;
  }
  uint64_t v142 = *(void *)v110 + 8 * v140;
  if (ii != (size_t **)v142)
  {
    int v143 = *ii;
    do
    {
      for (jchar j = (void *)v143[3]; jj; jchar j = (void *)*jj)
      {
        uint64_t v145 = sub_1CCB6B49C(v200, jj[2], v143 + 6, *v143);
        sub_1CCB6B0C0(v205, v145);
        if (v145 && !*(_DWORD *)(v145 + 8)) {
          sub_1CCB6B0C0(v205, *(void *)(v145 + 72));
        }
      }
      do
      {
        uint64_t v146 = ii[1];
        ++ii;
        int v143 = v146;
        if (v146) {
          BOOL v147 = v143 + 1 == 0;
        }
        else {
          BOOL v147 = 1;
        }
      }
      while (v147);
    }
    while (ii != (size_t **)v142);
  }
  uint64_t v148 = v206;
  if (v206 != (std::error_category *)v207)
  {
    do
    {
      v228[0] = v148[4];
      uint64_t v149 = sub_1CD4F29A8(v200 + 56, (unint64_t *)v228);
      if (v149 != v150)
      {
        int v151 = v149;
        unsigned int v152 = v150;
        do
        {
          char v153 = *((unsigned char *)v151 + 63);
          int v154 = v153;
          if (v153 >= 0) {
            int v155 = v151 + 5;
          }
          else {
            int v155 = (unsigned char *)v151[5];
          }
          unint64_t v156 = v153 & 0x7F;
          if (v154 >= 0) {
            unint64_t v157 = v156;
          }
          else {
            unint64_t v157 = v151[6];
          }
          llvm::SHA1::update(v220, v155, v157);
          v226.__r_.__value_.__s.__data_[0] = 0;
          llvm::SHA1::update(v220, &v226, 1uLL);
          LODWORD(v226.__r_.__value_.__l.__data_) = *((_DWORD *)v151 + 16);
          llvm::SHA1::update(v219, &v226, 4uLL);
          LODWORD(v226.__r_.__value_.__l.__data_) = *((_DWORD *)v151 + 17);
          llvm::SHA1::update(v219, &v226, 4uLL);
          v226.__r_.__value_.__r.__words[0] = v151[9];
          llvm::SHA1::update(v220, &v226, 8uLL);
          v226.__r_.__value_.__r.__words[0] = v151[10];
          llvm::SHA1::update(v220, &v226, 8uLL);
          v226.__r_.__value_.__r.__words[0] = *((unsigned __int8 *)v151 + 88);
          llvm::SHA1::update(v220, &v226, 8uLL);
          v226.__r_.__value_.__r.__words[0] = v151[12];
          llvm::SHA1::update(v220, &v226, 8uLL);
          v226.__r_.__value_.__r.__words[0] = v151[15];
          llvm::SHA1::update(v220, &v226, 8uLL);
          int v158 = (void *)v151[13];
          if (v158 != v151 + 14)
          {
            do
            {
              LODWORD(v226.__r_.__value_.__l.__data_) = v158[4];
              llvm::SHA1::update(v219, &v226, 4uLL);
              LODWORD(v226.__r_.__value_.__l.__data_) = *((_DWORD *)v158 + 10);
              llvm::SHA1::update(v219, &v226, 4uLL);
              char v159 = *((unsigned char *)v158 + 71);
              int v160 = v159;
              if (v159 >= 0) {
                unint64_t v161 = v158 + 6;
              }
              else {
                unint64_t v161 = (unsigned char *)v158[6];
              }
              unint64_t v162 = v159 & 0x7F;
              if (v160 >= 0) {
                unint64_t v163 = v162;
              }
              else {
                unint64_t v163 = v158[7];
              }
              llvm::SHA1::update(v220, v161, v163);
              v226.__r_.__value_.__s.__data_[0] = 0;
              llvm::SHA1::update(v220, &v226, 1uLL);
              v226.__r_.__value_.__r.__words[0] = v158[11];
              llvm::SHA1::update(v220, &v226, 8uLL);
              int v164 = (void *)v158[9];
              if (v164 != v158 + 10)
              {
                do
                {
                  v226.__r_.__value_.__r.__words[0] = (uint64_t)(v164[5] - v164[4]) >> 3;
                  llvm::SHA1::update(v220, &v226, 8uLL);
                  char v165 = (std::string::size_type *)v164[4];
                  unsigned int v166 = (std::string::size_type *)v164[5];
                  while (v165 != v166)
                  {
                    std::string::size_type v167 = *v165++;
                    v226.__r_.__value_.__r.__words[0] = v167;
                    llvm::SHA1::update(v220, &v226, 8uLL);
                  }
                  LODWORD(v226.__r_.__value_.__l.__data_) = *((_DWORD *)v164 + 14);
                  llvm::SHA1::update(v219, &v226, 4uLL);
                  v226.__r_.__value_.__r.__words[0] = v164[8];
                  llvm::SHA1::update(v220, &v226, 8uLL);
                  LODWORD(v226.__r_.__value_.__l.__data_) = *((_DWORD *)v164 + 18);
                  llvm::SHA1::update(v219, &v226, 4uLL);
                  LODWORD(v226.__r_.__value_.__l.__data_) = *((_DWORD *)v164 + 19);
                  llvm::SHA1::update(v219, &v226, 4uLL);
                  std::string::size_type v168 = (void *)v164[1];
                  if (v168)
                  {
                    do
                    {
                      uint64_t v169 = v168;
                      std::string::size_type v168 = (void *)*v168;
                    }
                    while (v168);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v169 = (void *)v164[2];
                      BOOL v91 = *v169 == (void)v164;
                      int v164 = v169;
                    }
                    while (!v91);
                  }
                  int v164 = v169;
                }
                while (v169 != v158 + 10);
              }
              uint64_t v170 = (void *)v158[1];
              if (v170)
              {
                do
                {
                  uint64_t v171 = v170;
                  uint64_t v170 = (void *)*v170;
                }
                while (v170);
              }
              else
              {
                do
                {
                  uint64_t v171 = (void *)v158[2];
                  BOOL v91 = *v171 == (void)v158;
                  int v158 = v171;
                }
                while (!v91);
              }
              int v158 = v171;
            }
            while (v171 != v151 + 14);
          }
          uint64_t v172 = (void *)v151[1];
          if (v172)
          {
            do
            {
              uint64_t v173 = v172;
              uint64_t v172 = (void *)*v172;
            }
            while (v172);
          }
          else
          {
            do
            {
              uint64_t v173 = (void *)v151[2];
              BOOL v91 = *v173 == (void)v151;
              int v151 = v173;
            }
            while (!v91);
          }
          int v151 = v173;
        }
        while (v173 != v152);
      }
      size_t v174 = v148[1].__vftable;
      if (v174)
      {
        do
        {
          size_t v175 = (std::error_category **)v174;
          size_t v174 = (std::error_category_vtbl *)v174->~error_category;
        }
        while (v174);
      }
      else
      {
        do
        {
          size_t v175 = (std::error_category **)v148[2].__vftable;
          BOOL v91 = *v175 == v148;
          uint64_t v148 = (std::error_category *)v175;
        }
        while (!v91);
      }
      uint64_t v148 = (std::error_category *)v175;
    }
    while (v175 != (std::error_category **)v207);
  }
  LODWORD(v226.__r_.__value_.__l.__data_) = v213;
  llvm::SHA1::update(v219, &v226, 4uLL);
  uint64_t v176 = v211;
  if (v211 != &v212)
  {
    do
    {
      v226.__r_.__value_.__r.__words[0] = v176[4];
      llvm::SHA1::update(v220, &v226, 8uLL);
      uint64_t v177 = (void *)v176[1];
      if (v177)
      {
        do
        {
          unint64_t v178 = (void **)v177;
          uint64_t v177 = (void *)*v177;
        }
        while (v177);
      }
      else
      {
        do
        {
          unint64_t v178 = (void **)v176[2];
          BOOL v91 = *v178 == v176;
          uint64_t v176 = v178;
        }
        while (!v91);
      }
      uint64_t v176 = v178;
    }
    while (v178 != &v212);
  }
  LODWORD(v226.__r_.__value_.__l.__data_) = v210;
  llvm::SHA1::update(v219, &v226, 4uLL);
  int v179 = v208;
  if (v208 != &v209)
  {
    do
    {
      v226.__r_.__value_.__r.__words[0] = v179[4];
      llvm::SHA1::update(v220, &v226, 8uLL);
      int v180 = (void *)v179[1];
      if (v180)
      {
        do
        {
          uint64_t v181 = (void **)v180;
          int v180 = (void *)*v180;
        }
        while (v180);
      }
      else
      {
        do
        {
          uint64_t v181 = (void **)v179[2];
          BOOL v91 = *v181 == v179;
          int v179 = v181;
        }
        while (!v91);
      }
      int v179 = v181;
    }
    while (v181 != &v209);
  }
  char v182 = *(unsigned char *)(v197 + 591);
  int v183 = v182;
  uint64_t v184 = v182 & 0x7F;
  if (v183 < 0) {
    uint64_t v184 = *(void *)(v197 + 576);
  }
  if (v184)
  {
    __int16 v227 = 260;
    v226.__r_.__value_.__r.__words[0] = v197 + 568;
    sub_1CD096690((unsigned __int8 *)&v226, (llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)v228);
    char v185 = v229;
    if ((v229 & 1) == 0)
    {
      llvm::SHA1::update(v220, (unsigned char *)v228[0].~error_category_0, (char *)v228[0].name - (char *)v228[0].~error_category_0);
      char v186 = *(unsigned char *)(v197 + 615);
      int v187 = v186;
      uint64_t v188 = v186 & 0x7F;
      if (v187 < 0) {
        uint64_t v188 = *(void *)(v197 + 600);
      }
      if (v188)
      {
        __int16 v227 = 260;
        v226.__r_.__value_.__r.__words[0] = v197 + 592;
        sub_1CD096690((unsigned __int8 *)&v226, (llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)v224);
        sub_1CCB73F2C(v228, (uint64_t)v224);
        if ((v225 & 1) == 0)
        {
          uint64_t v189 = v224[0];
          v224[0] = 0;
          if (v189) {
            (*(void (**)(uint64_t))(*(void *)v189 + 8))(v189);
          }
        }
        char v185 = v229;
        if ((v229 & 1) == 0) {
          llvm::SHA1::update(v220, (unsigned char *)v228[0].~error_category_0, (char *)v228[0].name - (char *)v228[0].~error_category_0);
        }
      }
    }
    if ((v185 & 1) == 0)
    {
      uint64_t v190 = v228[0].__vftable;
      v228[0].__vftable = 0;
      if (v190) {
        (*((void (**)(std::error_category_vtbl *))v190->~error_category + 1))(v190);
      }
    }
  }
  llvm::SHA1::result((llvm::SHA1 *)v220, (uint64_t)v228);
  sub_1CD69BA30((unsigned __int8 *)v228, 20, 0, &v226);
  char v191 = HIBYTE(v226.__r_.__value_.__r.__words[2]);
  if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v192 = &v226;
  }
  else {
    uint64_t v192 = (std::string *)v226.__r_.__value_.__r.__words[0];
  }
  if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = *((unsigned char *)&v226.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t size = v226.__r_.__value_.__l.__size_;
  }
  *(void *)(v198 + 8) = 0;
  if (*(void *)(v198 + 16) < size) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  uint64_t v194 = 0;
  if (size)
  {
    memcpy(*(void **)v198, v192, size);
    uint64_t v194 = *(void *)(v198 + 8);
    char v191 = HIBYTE(v226.__r_.__value_.__r.__words[2]);
  }
  *(void *)(v198 + 8) = v194 + size;
  if (v191 < 0) {
    operator delete(v226.__r_.__value_.__l.__data_);
  }
  sub_1CB833A08((uint64_t)&v206, v207[0]);
  sub_1CB833A08((uint64_t)&v208, v209);
  sub_1CB833A08((uint64_t)&v211, v212);
  if (v199) {
    operator delete(v199);
  }
  if (__p)
  {
    char v215 = (char *)__p;
    operator delete(__p);
  }
}

void *sub_1CCB6B0C0(void *result, uint64_t a2)
{
  if (!a2) {
    return result;
  }
  int v3 = result;
  uint64_t v4 = (_DWORD **)*result;
  LODWORD(v44) = (*(unsigned __int16 *)(a2 + 12) >> 4) & 3;
  llvm::SHA1::update(*v4, &v44, 4uLL);
  int v5 = (_DWORD **)*v3;
  LODWORD(v44) = (*(unsigned __int16 *)(a2 + 12) >> 7) & 1;
  llvm::SHA1::update(*v5, &v44, 4uLL);
  __n128 v6 = (_DWORD **)*v3;
  LODWORD(v44) = (*(unsigned __int16 *)(a2 + 12) >> 9) & 1;
  unint64_t result = llvm::SHA1::update(*v6, &v44, 4uLL);
  int v7 = *(llvm::ValueInfo **)(a2 + 40);
  for (i = *(llvm::ValueInfo **)(a2 + 48); v7 != i; int v7 = (llvm::ValueInfo *)((char *)v7 + 8))
  {
    uint64_t v9 = (_DWORD **)*v3;
    LODWORD(v44) = llvm::ValueInfo::isDSOLocal(v7, *(unsigned __int8 *)(v3[1] + 130));
    unint64_t result = llvm::SHA1::update(*v9, &v44, 4uLL);
    uint64_t v10 = v3[2];
    uint64_t v11 = *(uint64_t **)(*(void *)v7 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v44 = v11;
    for (char j = *(void **)(*(void *)v10 + 8); j; char j = (void *)*j)
    {
      unint64_t v13 = j[4];
      if (v13 <= (unint64_t)v11)
      {
        if (v13 >= (unint64_t)v11)
        {
          unint64_t result = sub_1CD3CFB98(*(uint64_t ***)(v10 + 8), (unint64_t *)&v44, &v44);
          break;
        }
        ++j;
      }
    }
    for (int k = *(void **)(*(void *)(v10 + 16) + 8); k; int k = (void *)*k)
    {
      unint64_t v15 = k[4];
      if ((unint64_t)v44 >= v15)
      {
        if (v15 >= (unint64_t)v44)
        {
          unint64_t result = sub_1CD3CFB98(*(uint64_t ***)(v10 + 24), (unint64_t *)&v44, &v44);
          break;
        }
        ++k;
      }
    }
  }
  int v16 = *(_DWORD *)(a2 + 8);
  if (v16 == 2)
  {
    __int16 v17 = (_DWORD **)*v3;
    LODWORD(v44) = *(unsigned char *)(a2 + 72) & 1;
    llvm::SHA1::update(*v17, &v44, 4uLL);
    char v18 = (_DWORD **)*v3;
    LODWORD(v44) = (*(unsigned __int8 *)(a2 + 72) >> 1) & 1;
    unint64_t result = llvm::SHA1::update(*v18, &v44, 4uLL);
    int v16 = *(_DWORD *)(a2 + 8);
  }
  if (v16 != 1) {
    return result;
  }
  uint64_t v19 = *(void *)(a2 + 104);
  if (v19)
  {
    uint64_t v20 = *(unint64_t **)v19;
    uint64_t v21 = *(void *)(v19 + 8) - *(void *)v19;
    if (!v21) {
      goto LABEL_25;
    }
    uint64_t v22 = 8 * (v21 >> 3);
    do
    {
      unint64_t result = sub_1CD3CFB98((uint64_t **)v3[3], v20, (uint64_t **)v20);
      ++v20;
      v22 -= 8;
    }
    while (v22);
    uint64_t v19 = *(void *)(a2 + 104);
    if (v19)
    {
LABEL_25:
      unsigned int v23 = *(unint64_t **)(v19 + 24);
      uint64_t v24 = *(void *)(v19 + 32) - (void)v23;
      if (!v24) {
        goto LABEL_57;
      }
      uint64_t v25 = 16 * (v24 >> 4);
      do
      {
        unint64_t result = sub_1CD3CFB98((uint64_t **)v3[3], v23, (uint64_t **)v23);
        v23 += 2;
        v25 -= 16;
      }
      while (v25);
      uint64_t v19 = *(void *)(a2 + 104);
      if (v19)
      {
LABEL_57:
        char v26 = *(unint64_t **)(v19 + 48);
        uint64_t v27 = *(void *)(v19 + 56) - (void)v26;
        if (!v27) {
          goto LABEL_58;
        }
        uint64_t v28 = 16 * (v27 >> 4);
        do
        {
          unint64_t result = sub_1CD3CFB98((uint64_t **)v3[3], v26, (uint64_t **)v26);
          v26 += 2;
          v28 -= 16;
        }
        while (v28);
        uint64_t v19 = *(void *)(a2 + 104);
        if (v19)
        {
LABEL_58:
          unint64_t v29 = *(unint64_t **)(v19 + 72);
          uint64_t v30 = *(void *)(v19 + 80) - (void)v29;
          if (!v30) {
            goto LABEL_37;
          }
          uint64_t v31 = 40 * (v30 / 40);
          do
          {
            unint64_t result = sub_1CD3CFB98((uint64_t **)v3[3], v29, (uint64_t **)v29);
            v29 += 5;
            v31 -= 40;
          }
          while (v31);
          uint64_t v19 = *(void *)(a2 + 104);
          if (v19)
          {
LABEL_37:
            int v32 = *(unint64_t **)(v19 + 96);
            uint64_t v33 = *(void *)(v19 + 104) - (void)v32;
            if (v33)
            {
              uint64_t v34 = 40 * (v33 / 40);
              do
              {
                unint64_t result = sub_1CD3CFB98((uint64_t **)v3[3], v32, (uint64_t **)v32);
                v32 += 5;
                v34 -= 40;
              }
              while (v34);
            }
          }
        }
      }
    }
  }
  char v36 = *(llvm::ValueInfo **)(a2 + 80);
  unint64_t v35 = *(llvm::ValueInfo **)(a2 + 88);
  if (v35 == v36) {
    return result;
  }
  do
  {
    uint64_t v37 = (_DWORD **)*v3;
    LODWORD(v44) = llvm::ValueInfo::isDSOLocal(v36, *(unsigned __int8 *)(v3[1] + 130));
    unint64_t result = llvm::SHA1::update(*v37, &v44, 4uLL);
    uint64_t v38 = v3[2];
    char v39 = *(uint64_t **)(*(void *)v36 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v44 = v39;
    for (uint64_t m = *(void **)(*(void *)v38 + 8); m; uint64_t m = (void *)*m)
    {
      unint64_t v41 = m[4];
      if (v41 <= (unint64_t)v39)
      {
        if (v41 >= (unint64_t)v39)
        {
          unint64_t result = sub_1CD3CFB98(*(uint64_t ***)(v38 + 8), (unint64_t *)&v44, &v44);
          break;
        }
        ++m;
      }
    }
    char v42 = *(void **)(*(void *)(v38 + 16) + 8);
    if (!v42) {
      goto LABEL_51;
    }
    while (1)
    {
      unint64_t v43 = v42[4];
      if ((unint64_t)v44 >= v43) {
        break;
      }
LABEL_50:
      char v42 = (void *)*v42;
      if (!v42) {
        goto LABEL_51;
      }
    }
    if (v43 < (unint64_t)v44)
    {
      ++v42;
      goto LABEL_50;
    }
    unint64_t result = sub_1CD3CFB98(*(uint64_t ***)(v38 + 24), (unint64_t *)&v44, &v44);
LABEL_51:
    char v36 = (llvm::ValueInfo *)((char *)v36 + 16);
  }
  while (v36 != v35);
  return result;
}

uint64_t sub_1CCB6B49C(uint64_t a1, unint64_t a2, void *a3, size_t a4)
{
  uint64_t v4 = (void *)(a1 + 8);
  int v5 = *(void **)(a1 + 8);
  if (!v5) {
    goto LABEL_12;
  }
  __n128 v6 = (void *)(a1 + 8);
  do
  {
    unint64_t v7 = v5[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      uint64_t v9 = v5;
    }
    else {
      uint64_t v9 = v5 + 1;
    }
    if (v8) {
      __n128 v6 = v5;
    }
    int v5 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v4 || v6[4] > a2) {
LABEL_12:
  }
    __n128 v6 = (void *)(a1 + 8);
  if (v6 == v4) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = (uint64_t)(v6 + 4);
  }
  unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(a1 + 133);
  if (v11 >= 8) {
    return sub_1CD4F1D80(a1, v11, a3, a4);
  }
  else {
    return 0;
  }
}

void llvm::thinLTOResolvePrevailingInIndex(uint64_t a1, uint64_t a2, unsigned int (*a3)(uint64_t, void), uint64_t a4, void (*a5)(uint64_t, void, void, void), uint64_t a6, uint64_t a7)
{
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  unsigned int v58 = 0;
  unint64_t v11 = *(void **)a2;
  size_t v54 = (void *)(a2 + 8);
  if (*(void *)a2 != a2 + 8)
  {
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = v11[7];
      uint64_t v14 = v11[8];
      while (v13 != v14)
      {
        if (*(void *)v13) {
          BOOL v15 = *(_DWORD *)(*(void *)v13 + 8) == 0;
        }
        else {
          BOOL v15 = 0;
        }
        if (v15)
        {
          uint64_t v16 = *(void *)(*(void *)v13 + 72);
          int v59 = 0;
          unsigned int v17 = v58;
          if ((sub_1CC091A20(v12, v58, v16, &v59) & 1) == 0)
          {
            if (4 * (int)v57 + 4 >= 3 * v17)
            {
              int v18 = 2 * v17;
            }
            else
            {
              if (v17 + ~v57 - HIDWORD(v57) > v17 >> 3)
              {
LABEL_13:
                LODWORD(v57) = v57 + 1;
                if (*v59 != -4096) {
                  --HIDWORD(v57);
                }
                *int v59 = v16;
                goto LABEL_16;
              }
              int v18 = v17;
            }
            sub_1CC091AB4((uint64_t)&v56, v18);
            int v59 = 0;
            uint64_t v12 = v56;
            sub_1CC091A20(v56, v58, v16, &v59);
            goto LABEL_13;
          }
        }
LABEL_16:
        v13 += 8;
      }
      uint64_t v19 = (void *)v11[1];
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          uint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v20 = (void *)v11[2];
          BOOL v15 = *v20 == (void)v11;
          unint64_t v11 = v20;
        }
        while (!v15);
      }
      unint64_t v11 = v20;
      if (v20 == v54)
      {
        unint64_t v11 = *(void **)a2;
        uint64_t v53 = v56;
        goto LABEL_28;
      }
    }
  }
  uint64_t v53 = 0;
LABEL_28:
  if (v11 == v54)
  {
LABEL_81:
    JUMPOUT(0x1D25D9CD0);
  }
  while (1)
  {
    unint64_t v21 = (unint64_t)(v11 + 4);
    int v59 = (void *)(*(unsigned __int8 *)(a2 + 133) | (unint64_t)(v11 + 4));
    int v22 = *(_DWORD *)(a1 + 444);
    LOBYTE(v23) = v22 == 1 ? llvm::ValueInfo::getELFVisibility((llvm::ValueInfo *)&v59) : 0;
    uint64_t v24 = (void *)(v21 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v25 = *(uint64_t **)((v21 & 0xFFFFFFFFFFFFFFF8) + 24);
    char v26 = (uint64_t *)v24[4];
    if (v26 != v25) {
      break;
    }
LABEL_69:
    if (!v22)
    {
      uint64_t v45 = v24[3];
      uint64_t v46 = v24[4] - v45;
      if (v46)
      {
        uint64_t v47 = 8 * (v46 >> 3);
        do
        {
          __int16 v48 = *(_WORD *)(*(void *)v45 + 12);
          if ((v48 & 0xFu) - 6 >= 3) {
            *(_WORD *)(*(void *)v45 + 12) = v48 & 0xFFCF | (16 * (v23 & 3));
          }
          v45 += 8;
          v47 -= 8;
        }
        while (v47);
      }
    }
    uint64_t v49 = (void *)v11[1];
    if (v49)
    {
      do
      {
        unint64_t v50 = v49;
        uint64_t v49 = (void *)*v49;
      }
      while (v49);
    }
    else
    {
      do
      {
        unint64_t v50 = (void *)v11[2];
        BOOL v15 = *v50 == (void)v11;
        unint64_t v11 = v50;
      }
      while (!v15);
    }
    unint64_t v11 = v50;
    if (v50 == v54) {
      goto LABEL_81;
    }
  }
  while (1)
  {
    int v27 = *(_WORD *)(*v25 + 12) & 0xF;
    if ((v27 - 6) >= 3) {
      break;
    }
LABEL_62:
    if (++v25 == v26)
    {
      int v22 = *(_DWORD *)(a1 + 444);
      goto LABEL_69;
    }
  }
  if (!a3(a4, *v24))
  {
    uint64_t v38 = *v25;
    if (*(_DWORD *)(*v25 + 8))
    {
      if (v58)
      {
        unsigned int v39 = (v58 - 1) & ((v38 >> 4) ^ (v38 >> 9));
        uint64_t v40 = *(void *)(v53 + 8 * v39);
        if (v38 == v40) {
          goto LABEL_57;
        }
        int v41 = 1;
        while (v40 != -4096)
        {
          unsigned int v42 = v39 + v41++;
          unsigned int v39 = v42 & (v58 - 1);
          uint64_t v40 = *(void *)(v53 + 8 * v39);
          if (v38 == v40) {
            goto LABEL_57;
          }
        }
      }
      *(_WORD *)(v38 + 12) = *(_WORD *)(v38 + 12) & 0xFFF0 | 1;
      uint64_t v38 = *v25;
    }
LABEL_57:
    int v37 = *(_DWORD *)(a1 + 444);
    goto LABEL_58;
  }
  if ((v27 & 0xE) != 2)
  {
LABEL_47:
    int v37 = *(_DWORD *)(a1 + 444);
    uint64_t v38 = *v25;
    if (v37)
    {
LABEL_58:
      if (v37 == 1)
      {
        *(_WORD *)(v38 + 12) = *(_WORD *)(v38 + 12) & 0xFFCF | (16 * (v23 & 3));
        uint64_t v38 = *v25;
      }
      if ((*(_WORD *)(v38 + 12) & 0xF) != v27) {
        a5(a6, *(void *)(v38 + 24), *(void *)(v38 + 32), *v24);
      }
      goto LABEL_62;
    }
    int v23 = (*(unsigned __int16 *)(v38 + 12) >> 4) & 3;
    goto LABEL_57;
  }
  if (v27 == 3) {
    __int16 v28 = 5;
  }
  else {
    __int16 v28 = 4;
  }
  *(_WORD *)(*v25 + 12) = *(_WORD *)(*v25 + 12) & 0xFFF0 | v28;
  uint64_t v29 = v24[3];
  uint64_t v30 = v24[4] - v29;
  if (!v30) {
    goto LABEL_45;
  }
  unint64_t v31 = v30 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    if ((*(_WORD *)(*(void *)v29 + 12) & 0x200) == 0) {
      goto LABEL_45;
    }
    v29 += 8;
    v31 -= 8;
  }
  while (v31);
  int v32 = *(_DWORD *)(a7 + 16);
  if (v32)
  {
    int v33 = v32 - 1;
    unsigned int v34 = v33 & (37 * *v24);
    uint64_t v35 = *(void *)(*(void *)a7 + 8 * v34);
    if (*v24 == v35)
    {
LABEL_45:
      __int16 v36 = 0;
LABEL_46:
      *(_WORD *)(*v25 + 12) = *(_WORD *)(*v25 + 12) & 0xFDFF | v36;
      goto LABEL_47;
    }
    int v43 = 1;
    while (v35 != -1)
    {
      __int16 v36 = 0;
      unsigned int v44 = v34 + v43++;
      unsigned int v34 = v44 & v33;
      uint64_t v35 = *(void *)(*(void *)a7 + 8 * v34);
      if (*v24 == v35) {
        goto LABEL_46;
      }
    }
  }
  __int16 v36 = 512;
  goto LABEL_46;
}

uint64_t llvm::thinLTOInternalizeAndPromoteInIndex(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, unint64_t), uint64_t a3, uint64_t (*a4)(uint64_t, void), uint64_t a5)
{
  unint64_t v7 = *(void **)a1;
  uint64_t result = a1 + 8;
  __n128 v6 = v7;
  int v27 = (void *)result;
  if (v7 != (void *)result)
  {
    while (1)
    {
      uint64_t v10 = (void *)((unint64_t)(v6 + 4) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v11 = (uint64_t *)v10[3];
      uint64_t v12 = v10[4] - (void)v11;
      if (v12) {
        break;
      }
LABEL_28:
      uint64_t v24 = (void *)v6[1];
      if (v24)
      {
        do
        {
          uint64_t v25 = v24;
          uint64_t v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          uint64_t v25 = (void *)v6[2];
          BOOL v19 = *v25 == (void)v6;
          __n128 v6 = v25;
        }
        while (!v19);
      }
      __n128 v6 = v25;
      if (v25 == v27) {
        return result;
      }
    }
    unint64_t v13 = *(unsigned __int8 *)(a1 + 133) | (unint64_t)(v6 + 4);
    uint64_t v14 = 8 * (v12 >> 3);
    while (1)
    {
      uint64_t result = a2(a3, *(void *)(*v11 + 24), *(void *)(*v11 + 32), v13);
      if (result)
      {
        __int16 v15 = *(_WORD *)(*v11 + 12);
        if ((v15 & 0xFu) - 7 <= 1) {
          *(_WORD *)(*v11 + 12) = v15 & 0xFFF0;
        }
      }
      else if (byte_1EBD09918)
      {
        uint64_t v16 = *v11;
        __int16 v17 = *(_WORD *)(*v11 + 12);
        int v18 = v17 & 0xF;
        if ((v18 - 7) >= 2)
        {
          if (((1 << v18) & 0x1EB) != 0) {
            goto LABEL_12;
          }
          uint64_t result = a4(a5, *v10);
          if (result)
          {
            uint64_t v16 = *v11;
            __int16 v17 = *(_WORD *)(*v11 + 12);
            int v18 = v17 & 0xF;
LABEL_12:
            BOOL v19 = v18 == 1 || v18 == 6;
            if (!v19)
            {
              int v20 = *(_DWORD *)(v16 + 8);
              uint64_t v21 = v16;
              if (!v20)
              {
                uint64_t v21 = *(void *)(v16 + 72);
                int v20 = *(_DWORD *)(v21 + 8);
              }
              if (v20 != 2
                || (*(unsigned char *)(v21 + 72) & 3) != 0
                || ((v22 = *(_WORD *)(v21 + 12) & 0xF, v22 != 3) ? (BOOL v23 = v22 == 5) : (BOOL v23 = 1), !v23))
              {
                *(_WORD *)(v16 + 12) = v17 & 0xFFF0 | 7;
              }
            }
          }
        }
      }
      ++v11;
      v14 -= 8;
      if (!v14) {
        goto LABEL_28;
      }
    }
  }
  return result;
}

void llvm::lto::InputFile::~InputFile(void **this)
{
  if (*((char *)this + 247) < 0) {
    operator delete(this[28]);
  }
  int v2 = this[21];
  if (v2)
  {
    this[22] = v2;
    operator delete(v2);
  }
  int v3 = this[18];
  if (v3)
  {
    this[19] = v3;
    operator delete(v3);
  }
  uint64_t v4 = this[9];
  if (v4)
  {
    this[10] = v4;
    operator delete(v4);
  }
  int v5 = this[6];
  if (v5)
  {
    this[7] = v5;
    operator delete(v5);
  }
  __n128 v6 = (void **)this[3];
  if (v6 != this + 6) {
    free(v6);
  }
  unint64_t v7 = *this;
  if (*this)
  {
    this[1] = v7;
    operator delete(v7);
  }
}

void llvm::lto::InputFile::create()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

char *llvm::lto::InputFile::getName(llvm::lto::InputFile *this)
{
  uint64_t v3 = *((void *)this + 28);
  int v1 = (char *)this + 224;
  uint64_t v2 = v3;
  if (v1[23] >= 0) {
    return v1;
  }
  return (char *)v2;
}

uint64_t llvm::lto::InputFile::getSingleBitcodeModule(llvm::lto::InputFile *this)
{
  return *(void *)this;
}

void llvm::lto::LTO::RegularLTOState::RegularLTOState(uint64_t a1, int a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  *(_DWORD *)(a1 + 24) = a2;
  sub_1CCB72420((llvm::LLVMContext *)(a1 + 32));
}

uint64_t llvm::lto::LTO::ThinLTOState::ThinLTOState(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  v5.n128_f64[0] = sub_1CD4AD488(a1 + 32, 0, 0);
  *(unsigned char *)(a1 + 432) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 360) = 0;
  *(unsigned char *)(a1 + 384) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  if (!*(void *)(a2 + 24))
  {
    v8[0] = &unk_1F262C798;
    v8[1] = 0;
    uint64_t v9 = v8;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v7 == a1)
    {
      (*(void (**)(uint64_t, double))(*(void *)a1 + 32))(a1, v5.n128_f64[0]);
    }
    else if (v7)
    {
      (*(void (**)(uint64_t, double))(*(void *)v7 + 40))(v7, v5.n128_f64[0]);
    }
    if (v9)
    {
      if (v9 == v8)
      {
        *(void *)(a1 + 24) = a1;
        (*(void (**)(void *, uint64_t, __n128))(v8[0] + 24))(v8, a1, v5);
        if (v9 == v8)
        {
          (*(void (**)(void *))(v8[0] + 32))(v8);
        }
        else if (v9)
        {
          (*(void (**)(void))(*v9 + 40))();
        }
      }
      else
      {
        *(void *)(a1 + 24) = v9;
      }
    }
    else
    {
      *(void *)(a1 + 24) = 0;
    }
  }
  return a1;
}

uint64_t llvm::lto::createInProcessThinBackend@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = &unk_1F262C798;
  a2[1] = result & 0xFFFFFFFFFFFFLL;
  a2[3] = a2;
  return result;
}

void llvm::lto::LTO::LTO(uint64_t a1, long long *a2, uint64_t a3, int a4)
{
  long long v7 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v7;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v8 = *(long long *)((char *)a2 + 24);
  long long v9 = *(long long *)((char *)a2 + 40);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 64) = a2[4];
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
  long long v10 = *(long long *)((char *)a2 + 88);
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  *(_OWORD *)(a1 + 88) = v10;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 11) = 0;
  long long v11 = a2[8];
  *(_OWORD *)(a1 + 112) = a2[7];
  *(_OWORD *)(a1 + 128) = v11;
  uint64_t v12 = *((void *)a2 + 18);
  *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 38);
  *(void *)(a1 + 144) = v12;
  long long v13 = a2[10];
  *(void *)(a1 + 176) = *((void *)a2 + 22);
  *(_OWORD *)(a1 + 160) = v13;
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  *((void *)a2 + 20) = 0;
  long long v14 = *(long long *)((char *)a2 + 184);
  *(void *)(a1 + 200) = *((void *)a2 + 25);
  *(_OWORD *)(a1 + 184) = v14;
  *((void *)a2 + 23) = 0;
  *((void *)a2 + 24) = 0;
  *((void *)a2 + 25) = 0;
  long long v15 = a2[13];
  *(void *)(a1 + 224) = *((void *)a2 + 28);
  *(_OWORD *)(a1 + 208) = v15;
  *((void *)a2 + 26) = 0;
  *((void *)a2 + 27) = 0;
  *((void *)a2 + 28) = 0;
  long long v16 = *(long long *)((char *)a2 + 232);
  *(void *)(a1 + 248) = *((void *)a2 + 31);
  *(_OWORD *)(a1 + 232) = v16;
  *((void *)a2 + 29) = 0;
  *((void *)a2 + 30) = 0;
  *((void *)a2 + 31) = 0;
  uint64_t v17 = *((void *)a2 + 34);
  *(_OWORD *)(a1 + 256) = a2[16];
  *(void *)(a1 + 272) = v17;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  uint64_t v18 = *((void *)a2 + 36);
  *(void *)(a1 + 280) = *((void *)a2 + 35);
  *(void *)(a1 + 288) = v18;
  *(void *)(a1 + 296) = *((void *)a2 + 37);
  *((void *)a2 + 35) = 0;
  *((void *)a2 + 36) = 0;
  *((void *)a2 + 37) = 0;
  long long v19 = a2[19];
  *(void *)(a1 + 320) = *((void *)a2 + 40);
  *(_OWORD *)(a1 + 304) = v19;
  *((void *)a2 + 39) = 0;
  *((void *)a2 + 40) = 0;
  *((void *)a2 + 38) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  uint64_t v20 = *((void *)a2 + 42);
  *(void *)(a1 + 328) = *((void *)a2 + 41);
  *(void *)(a1 + 336) = v20;
  *(void *)(a1 + 344) = *((void *)a2 + 43);
  *((void *)a2 + 41) = 0;
  *((void *)a2 + 42) = 0;
  *((void *)a2 + 43) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 352) = a2[22];
  *(void *)(a1 + 368) = *((void *)a2 + 46);
  *((void *)a2 + 44) = 0;
  *((void *)a2 + 45) = 0;
  *((void *)a2 + 46) = 0;
  uint64_t v21 = (long long *)*((void *)a2 + 50);
  if (v21)
  {
    if (v21 == (long long *)((char *)a2 + 376))
    {
      *(void *)(a1 + 400) = a1 + 376;
      (*(void (**)(void))(**((void **)a2 + 50) + 24))(*((void *)a2 + 50));
    }
    else
    {
      *(void *)(a1 + 400) = v21;
      *((void *)a2 + 50) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 400) = 0;
  }
  long long v22 = *(long long *)((char *)a2 + 408);
  long long v23 = *(long long *)((char *)a2 + 424);
  *(void *)(a1 + 440) = *((void *)a2 + 55);
  *(_OWORD *)(a1 + 408) = v22;
  *(_OWORD *)(a1 + 424) = v23;
  long long v24 = a2[28];
  *(void *)(a1 + 464) = *((void *)a2 + 58);
  *(_OWORD *)(a1 + 448) = v24;
  *(long long *)((char *)a2 + 456) = 0u;
  *((void *)a2 + 56) = 0;
  long long v25 = *(long long *)((char *)a2 + 472);
  *(void *)(a1 + 488) = *((void *)a2 + 61);
  *(_OWORD *)(a1 + 472) = v25;
  a2[30] = 0u;
  *((void *)a2 + 59) = 0;
  long long v26 = a2[31];
  *(void *)(a1 + 512) = *((void *)a2 + 64);
  *(_OWORD *)(a1 + 496) = v26;
  *((void *)a2 + 64) = 0;
  a2[31] = 0u;
  long long v27 = *(long long *)((char *)a2 + 520);
  *(void *)(a1 + 536) = *((void *)a2 + 67);
  *(_OWORD *)(a1 + 520) = v27;
  *((void *)a2 + 67) = 0;
  *(long long *)((char *)a2 + 520) = 0u;
  long long v28 = a2[34];
  *(void *)(a1 + 560) = *((void *)a2 + 70);
  *(_OWORD *)(a1 + 544) = v28;
  *((void *)a2 + 70) = 0;
  a2[34] = 0u;
  long long v29 = *(long long *)((char *)a2 + 568);
  *(void *)(a1 + 584) = *((void *)a2 + 73);
  *(_OWORD *)(a1 + 568) = v29;
  *((void *)a2 + 73) = 0;
  *(long long *)((char *)a2 + 568) = 0u;
  long long v30 = a2[37];
  *(void *)(a1 + 608) = *((void *)a2 + 76);
  *(_OWORD *)(a1 + 592) = v30;
  *((void *)a2 + 76) = 0;
  a2[37] = 0u;
  long long v31 = *(long long *)((char *)a2 + 616);
  *(void *)(a1 + 632) = *((void *)a2 + 79);
  *(_OWORD *)(a1 + 616) = v31;
  *((void *)a2 + 79) = 0;
  *(long long *)((char *)a2 + 616) = 0u;
  long long v32 = a2[40];
  *(void *)(a1 + 656) = *((void *)a2 + 82);
  *(_OWORD *)(a1 + 640) = v32;
  *((void *)a2 + 82) = 0;
  a2[40] = 0u;
  long long v33 = *(long long *)((char *)a2 + 664);
  *(void *)(a1 + 680) = *((void *)a2 + 85);
  *(_OWORD *)(a1 + 664) = v33;
  *((void *)a2 + 85) = 0;
  *(long long *)((char *)a2 + 664) = 0u;
  long long v34 = a2[43];
  *(void *)(a1 + 704) = *((void *)a2 + 88);
  *(_OWORD *)(a1 + 688) = v34;
  *((void *)a2 + 88) = 0;
  a2[43] = 0u;
  long long v35 = *(long long *)((char *)a2 + 712);
  *(void *)(a1 + 728) = *((void *)a2 + 91);
  *(_OWORD *)(a1 + 712) = v35;
  *((void *)a2 + 91) = 0;
  *(long long *)((char *)a2 + 712) = 0u;
  long long v36 = a2[46];
  *(void *)(a1 + 752) = *((void *)a2 + 94);
  *(_OWORD *)(a1 + 736) = v36;
  long long v37 = *(long long *)((char *)a2 + 760);
  *(void *)(a1 + 776) = *((void *)a2 + 97);
  *(_OWORD *)(a1 + 760) = v37;
  *((void *)a2 + 97) = 0;
  *(long long *)((char *)a2 + 760) = 0u;
  *(unsigned char *)(a1 + 784) = *((unsigned char *)a2 + 784);
  long long v38 = *(long long *)((char *)a2 + 792);
  *(void *)(a1 + 808) = *((void *)a2 + 101);
  *(_OWORD *)(a1 + 792) = v38;
  a2[50] = 0u;
  *((void *)a2 + 99) = 0;
  *(void *)(a1 + 832) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 816) = a2[51];
  *(void *)(a1 + 832) = *((void *)a2 + 104);
  *((void *)a2 + 104) = 0;
  a2[51] = 0u;
  uint64_t v39 = *((void *)a2 + 105);
  *(unsigned char *)(a1 + 848) = *((unsigned char *)a2 + 848);
  *(void *)(a1 + 840) = v39;
  uint64_t v40 = (long long *)*((void *)a2 + 110);
  if (v40)
  {
    if (v40 == (long long *)((char *)a2 + 856))
    {
      *(void *)(a1 + 880) = a1 + 856;
      (*(void (**)(void))(**((void **)a2 + 110) + 24))(*((void *)a2 + 110));
    }
    else
    {
      *(void *)(a1 + 880) = v40;
      *((void *)a2 + 110) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 880) = 0;
  }
  *(unsigned char *)(a1 + 888) = *((unsigned char *)a2 + 888);
  uint64_t v41 = *((void *)a2 + 112);
  *((void *)a2 + 112) = 0;
  *(void *)(a1 + 896) = v41;
  long long v42 = *(long long *)((char *)a2 + 904);
  *(_DWORD *)(a1 + 920) = *((_DWORD *)a2 + 230);
  *(_OWORD *)(a1 + 904) = v42;
  int v43 = (long long *)*((void *)a2 + 119);
  if (v43)
  {
    if (v43 == a2 + 58)
    {
      *(void *)(a1 + 952) = a1 + 928;
      (*(void (**)(void))(**((void **)a2 + 119) + 24))(*((void *)a2 + 119));
    }
    else
    {
      *(void *)(a1 + 952) = v43;
      *((void *)a2 + 119) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 952) = 0;
  }
  unsigned int v44 = (long long *)*((void *)a2 + 123);
  if (v44)
  {
    if (v44 == a2 + 60)
    {
      *(void *)(a1 + 984) = a1 + 960;
      (*(void (**)(void))(**((void **)a2 + 123) + 24))(*((void *)a2 + 123));
    }
    else
    {
      *(void *)(a1 + 984) = v44;
      *((void *)a2 + 123) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 984) = 0;
  }
  uint64_t v45 = (long long *)*((void *)a2 + 127);
  if (v45)
  {
    if (v45 == a2 + 62)
    {
      *(void *)(a1 + 1016) = a1 + 992;
      (*(void (**)(void))(**((void **)a2 + 127) + 24))(*((void *)a2 + 127));
    }
    else
    {
      *(void *)(a1 + 1016) = v45;
      *((void *)a2 + 127) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 1016) = 0;
  }
  uint64_t v46 = (long long *)*((void *)a2 + 131);
  if (v46)
  {
    if (v46 == a2 + 64)
    {
      *(void *)(a1 + 1048) = a1 + 1024;
      (*(void (**)(void))(**((void **)a2 + 131) + 24))(*((void *)a2 + 131));
    }
    else
    {
      *(void *)(a1 + 1048) = v46;
      *((void *)a2 + 131) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 1048) = 0;
  }
  uint64_t v47 = (long long *)*((void *)a2 + 135);
  if (v47)
  {
    if (v47 == a2 + 66)
    {
      *(void *)(a1 + 1080) = a1 + 1056;
      (*(void (**)(void))(**((void **)a2 + 135) + 24))(*((void *)a2 + 135));
    }
    else
    {
      *(void *)(a1 + 1080) = v47;
      *((void *)a2 + 135) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 1080) = 0;
  }
  __int16 v48 = (long long *)*((void *)a2 + 139);
  if (v48)
  {
    if (v48 == a2 + 68)
    {
      *(void *)(a1 + 1112) = a1 + 1088;
      (*(void (**)(void))(**((void **)a2 + 139) + 24))(*((void *)a2 + 139));
    }
    else
    {
      *(void *)(a1 + 1112) = v48;
      *((void *)a2 + 139) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 1112) = 0;
  }
  uint64_t v49 = (long long *)*((void *)a2 + 143);
  if (v49)
  {
    if (v49 == a2 + 70)
    {
      *(void *)(a1 + 1144) = a1 + 1120;
      (*(void (**)(void))(**((void **)a2 + 143) + 24))(*((void *)a2 + 143));
    }
    else
    {
      *(void *)(a1 + 1144) = v49;
      *((void *)a2 + 143) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 1144) = 0;
  }
  llvm::lto::LTO::RegularLTOState::RegularLTOState(a1 + 1152, a4);
}

void llvm::lto::LTO::~LTO(llvm::lto::LTO *this)
{
  uint64_t v2 = (llvm::ToolOutputFile::CleanupInstaller *)*((void *)this + 225);
  *((void *)this + 225) = 0;
  if (v2) {
    sub_1CBAD7E10(this + 1800, v2);
  }
  MEMORY[0x1D25D9CD0](*((void *)this + 222), 8);
  if (*((_DWORD *)this + 437))
  {
    uint64_t v3 = *((unsigned int *)this + 436);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 8 * v3;
      do
      {
        uint64_t v6 = *(void *)(*((void *)this + 217) + v4);
        if (v6 != -8 && v6 != 0)
        {
          if (*(char *)(v6 + 31) < 0) {
            operator delete(*(void **)(v6 + 8));
          }
          MEMORY[0x1D25D9CD0](v6, 8);
        }
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*((void **)this + 217));
  MEMORY[0x1D25D9CD0](*((void *)this + 214), 8);
  if (*((unsigned char *)this + 1704))
  {
    long long v8 = (void *)*((void *)this + 210);
    if (v8)
    {
      *((void *)this + 211) = v8;
      operator delete(v8);
    }
    MEMORY[0x1D25D9CD0](*((void *)this + 207), 8);
    *((unsigned char *)this + 1704) = 0;
  }
  long long v9 = (char *)this + 1272;
  long long v10 = (void *)*((void *)this + 204);
  if (v10)
  {
    *((void *)this + 205) = v10;
    operator delete(v10);
  }
  MEMORY[0x1D25D9CD0](*((void *)this + 201), 8);
  sub_1CD4AFAF4((uint64_t)this + 1304);
  uint64_t v12 = (char *)*((void *)this + 162);
  if (v12 == v9)
  {
    (*(void (**)(char *))(*(void *)v9 + 32))((char *)this + 1272);
  }
  else if (v12)
  {
    (*(void (**)(char *))(*(void *)v12 + 40))(v12);
  }
  uint64_t v13 = *((void *)this + 155);
  if (v13)
  {
    uint64_t v14 = *((void *)this + 156);
    long long v15 = (void *)*((void *)this + 155);
    if (v14 != v13)
    {
      do
      {
        long long v16 = *(void **)(v14 - 24);
        if (v16)
        {
          *(void *)(v14 - 16) = v16;
          operator delete(v16);
        }
        uint64_t v17 = *(llvm::Module **)(v14 - 32);
        *(void *)(v14 - 32) = 0;
        if (v17)
        {
          llvm::Module::~Module(v17);
          MEMORY[0x1D25D9CE0]();
        }
        v14 -= 32;
      }
      while (v14 != v13);
      long long v15 = (void *)*((void *)this + 155);
    }
    *((void *)this + 156) = v13;
    operator delete(v15);
  }
  uint64_t v18 = *((void *)this + 154);
  *((void *)this + 154) = 0;
  if (v18)
  {
    sub_1CC009394(v18 + 56);
    MEMORY[0x1D25D9CD0](*(void *)(v18 + 56), 8);
    sub_1CC9159BC((void *)(v18 + 8));
    MEMORY[0x1D25D9CE0](v18, 0x1020C4072D9ABE8);
  }
  long long v19 = (llvm::Module *)*((void *)this + 153);
  *((void *)this + 153) = 0;
  if (v19)
  {
    llvm::Module::~Module(v19);
    MEMORY[0x1D25D9CE0]();
  }
  uint64_t v20 = (llvm::lto::LTO *)*((void *)this + 152);
  if (v20 == (llvm::lto::LTO *)((char *)this + 1192))
  {
    (*(void (**)(char *))(*((void *)this + 149) + 32))((char *)this + 1192);
  }
  else if (v20)
  {
    (*(void (**)(llvm::lto::LTO *))(*(void *)v20 + 40))(v20);
  }
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContextImpl **)this + 148, v11);
  sub_1CCB72610(*((char **)this + 145));

  sub_1CD69C048((uint64_t)this);
}

void llvm::lto::LTO::addModuleToGlobalRes(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, int a6, int a7)
{
  uint64_t v11 = *(void *)(a1 + 1224) + 216;
  __int16 v64 = 260;
  *(void *)&long long __dst = v11;
  llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)&__dst);
  if (a3)
  {
    uint64_t v56 = a2 + 80 * a3;
    uint64_t v57 = (llvm::StringMapImpl *)(a1 + 1736);
    int v54 = a7 ^ 1;
    uint64_t v55 = (void *)(a1 + 1748);
    do
    {
      uint64_t v13 = *(unsigned __int8 **)a2;
      size_t v12 = *(void *)(a2 + 8);
      if (v67 == 1 && v12 >= 6 && *(_DWORD *)v13 == 1835622239 && *((_WORD *)v13 + 2) == 24432)
      {
        v13 += 6;
        v12 -= 6;
      }
      char v18 = *a4;
      long long v16 = a4 + 4;
      char v17 = v18;
      unsigned int v19 = *(_DWORD *)(a1 + 1744);
      if (!v19)
      {
        *uint64_t v55 = 0;
        uint64_t v52 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
        if (!v52) {
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        }
        v52[16] = 2;
        *(void *)(a1 + 1736) = v52;
        unsigned int v19 = 16;
        *(_DWORD *)(a1 + 1744) = 16;
      }
      unsigned int v58 = v16;
      uint64_t v60 = a2;
      char v59 = v17;
      int v20 = 0;
      if (v12)
      {
        size_t v21 = v12;
        long long v22 = v13;
        do
        {
          int v23 = *v22++;
          int v20 = 33 * v20 + v23;
          --v21;
        }
        while (v21);
      }
      uint64_t v24 = *(void *)v57;
      unsigned int v25 = v19 - 1;
      uint64_t v26 = *(void *)v57 + 8 * v19 + 8;
      int v27 = -1;
      int v28 = 1;
      int v29 = v20;
      while (1)
      {
        uint64_t v30 = v29 & v25;
        uint64_t v31 = *(void *)(v24 + 8 * v30);
        if (!v31) {
          break;
        }
        if (v31 == -8)
        {
          if (v27 == -1) {
            int v27 = v29 & v25;
          }
        }
        else if (*(_DWORD *)(v26 + 4 * v30) == v20 {
               && v12 == *(void *)v31
        }
               && (!v12 || !memcmp(v13, (const void *)(v31 + *(unsigned int *)(a1 + 1756)), v12)))
        {
          goto LABEL_33;
        }
        int v29 = v28 + v30;
        ++v28;
      }
      uint64_t v32 = v27;
      if (v27 == -1)
      {
        uint64_t v32 = v30;
        uint64_t v30 = v30;
      }
      else
      {
        uint64_t v30 = v27;
      }
      *(_DWORD *)(v26 + 4 * v32) = v20;
      uint64_t v31 = *(void *)(v24 + 8 * v30);
LABEL_33:
      if (v31 == -8)
      {
        uint64_t v33 = v60;
        --*(_DWORD *)(a1 + 1752);
        char v34 = v59;
      }
      else
      {
        uint64_t v33 = v60;
        char v34 = v59;
        if (v31) {
          goto LABEL_46;
        }
      }
      long long v35 = (char *)operator new(v12 + 41, (std::align_val_t)8uLL);
      long long v36 = v35;
      long long v37 = v35 + 40;
      if (v12) {
        memcpy(v35 + 40, v13, v12);
      }
      v37[v12] = 0;
      *(void *)long long v36 = v12;
      *(_OWORD *)(v36 + 24) = 0u;
      *(_OWORD *)(v36 + 8) = 0u;
      v36[34] = 1;
      *((_DWORD *)v36 + 9) = -1;
      *(void *)(v24 + 8 * v30) = v36;
      ++*(_DWORD *)v55;
      for (int i = (uint64_t *)(*(void *)v57 + 8 * llvm::StringMapImpl::RehashTable(v57, v30)); ; ++i)
      {
        uint64_t v31 = *i;
        if (*i && v31 != -8) {
          break;
        }
      }
LABEL_46:
      uint64_t v40 = (void **)(v31 + 8);
      int v41 = (*(_DWORD *)(v33 + 36) >> 12) & 1;
      if (!*(unsigned char *)(v31 + 34)) {
        LOBYTE(v41) = 0;
      }
      *(unsigned char *)(v31 + 34) = v41;
      if (v34)
      {
        *(unsigned char *)(v31 + 35) = 1;
LABEL_53:
        size_t v43 = *(void *)(v33 + 24);
        if (v43 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        unsigned int v44 = *(const void **)(v33 + 16);
        if (v43 >= 0x17)
        {
          uint64_t v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v43 | 7) != 0x17) {
            uint64_t v46 = v43 | 7;
          }
          uint64_t v47 = v46 + 1;
          p_dst = (long long *)operator new(v46 + 1);
          *((void *)&__dst + 1) = v43;
          unint64_t v63 = v47 | 0x8000000000000000;
          *(void *)&long long __dst = p_dst;
        }
        else
        {
          HIBYTE(v63) = *(void *)(v33 + 24);
          p_dst = &__dst;
          if (!v43) {
            goto LABEL_61;
          }
        }
        memmove(p_dst, v44, v43);
LABEL_61:
        *((unsigned char *)p_dst + v43) = 0;
        if (*(char *)(v31 + 31) < 0) {
          operator delete(*v40);
        }
        long long v48 = __dst;
        *(void *)(v31 + 24) = v63;
        *(_OWORD *)uint64_t v40 = v48;
        goto LABEL_64;
      }
      if (!*(unsigned char *)(v31 + 35) && !(*(char *)(v31 + 31) < 0 ? *(void *)(v31 + 16) : *(unsigned __int8 *)(v31 + 31))) {
        goto LABEL_53;
      }
LABEL_64:
      if ((v34 & 0x14) == 0
        && (*(unsigned char *)(v33 + 36) & 0x80) == 0
        && ((int v49 = *(_DWORD *)(v31 + 36), v49 == -1) || v49 == a6))
      {
        int v50 = a6;
      }
      else
      {
        int v50 = -2;
      }
      *(_DWORD *)(v31 + 36) = v50;
      a4 = v58;
      if ((v34 & 4) != 0) {
        LOBYTE(v51) = 1;
      }
      else {
        int v51 = v54 | (*(unsigned __int8 *)(v33 + 36) >> 7);
      }
      *(unsigned char *)(v31 + 32) |= v51;
      *(unsigned char *)(v31 + 33) |= (v34 & 8) != 0;
      a2 = v33 + 80;
    }
    while (a2 != v56);
  }
  if (v66 < 0) {
    operator delete(__p);
  }
}

void llvm::lto::LTO::add(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X3>, void **a5@<X8>)
{
  uint64_t v7 = a2;
  long long v10 = *(llvm::raw_ostream **)(a1 + 896);
  if (v10)
  {
    uint64_t v11 = *(void **)a2;
    char v12 = *(unsigned char *)(*(void *)a2 + 247);
    int v13 = v12;
    if (v12 >= 0) {
      uint64_t v14 = (const void *)(*(void *)a2 + 224);
    }
    else {
      uint64_t v14 = *(const void **)(*(void *)a2 + 224);
    }
    size_t v15 = v12 & 0x7F;
    if (v13 >= 0) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v11[29];
    }
    char v17 = (unsigned char *)*((void *)v10 + 4);
    if (v16 <= *((void *)v10 + 3) - (void)v17)
    {
      if (v16)
      {
        memcpy(v17, v14, v16);
        char v17 = (unsigned char *)(*((void *)v10 + 4) + v16);
        *((void *)v10 + 4) = v17;
      }
    }
    else
    {
      llvm::raw_ostream::write(v10, (const char *)v14, v16);
      char v17 = (unsigned char *)*((void *)v10 + 4);
    }
    uint64_t v40 = a4;
    uint64_t v41 = v7;
    long long v42 = a3;
    if ((unint64_t)v17 >= *((void *)v10 + 3))
    {
      llvm::raw_ostream::write(v10, 10);
    }
    else
    {
      *((void *)v10 + 4) = v17 + 1;
      *char v17 = 10;
    }
    uint64_t v18 = v11[6];
    uint64_t v19 = v11[7];
    while (v18 != v19)
    {
      char v21 = *a3;
      a3 += 4;
      char v20 = v21;
      uint64_t v22 = *((void *)v10 + 4);
      if ((unint64_t)(*((void *)v10 + 3) - v22) > 2)
      {
        *(unsigned char *)(v22 + 2) = 61;
        *(_WORD *)uint64_t v22 = 29229;
        int v23 = (unsigned char *)(*((void *)v10 + 4) + 3);
        *((void *)v10 + 4) = v23;
      }
      else
      {
        llvm::raw_ostream::write(v10, "-r=", 3uLL);
        int v23 = (unsigned char *)*((void *)v10 + 4);
      }
      if (v16 <= *((void *)v10 + 3) - (void)v23)
      {
        if (v16)
        {
          memcpy(v23, v14, v16);
          int v23 = (unsigned char *)(*((void *)v10 + 4) + v16);
          *((void *)v10 + 4) = v23;
        }
      }
      else
      {
        llvm::raw_ostream::write(v10, (const char *)v14, v16);
        int v23 = (unsigned char *)*((void *)v10 + 4);
      }
      if ((unint64_t)v23 >= *((void *)v10 + 3))
      {
        llvm::raw_ostream::write(v10, 44);
      }
      else
      {
        *((void *)v10 + 4) = v23 + 1;
        *int v23 = 44;
      }
      uint64_t v24 = *(const void **)v18;
      unint64_t v25 = *(void *)(v18 + 8);
      uint64_t v26 = (unsigned char *)*((void *)v10 + 4);
      if (v25 <= *((void *)v10 + 3) - (void)v26)
      {
        if (v25)
        {
          memcpy(v26, v24, *(void *)(v18 + 8));
          uint64_t v26 = (unsigned char *)(*((void *)v10 + 4) + v25);
          *((void *)v10 + 4) = v26;
        }
      }
      else
      {
        llvm::raw_ostream::write(v10, (const char *)v24, *(void *)(v18 + 8));
        uint64_t v26 = (unsigned char *)*((void *)v10 + 4);
      }
      if ((unint64_t)v26 >= *((void *)v10 + 3))
      {
        llvm::raw_ostream::write(v10, 44);
        if ((v20 & 1) == 0) {
          goto LABEL_35;
        }
      }
      else
      {
        *((void *)v10 + 4) = v26 + 1;
        *uint64_t v26 = 44;
        if ((v20 & 1) == 0) {
          goto LABEL_35;
        }
      }
      int v27 = (unsigned char *)*((void *)v10 + 4);
      if ((unint64_t)v27 < *((void *)v10 + 3))
      {
        *((void *)v10 + 4) = v27 + 1;
        *int v27 = 112;
LABEL_35:
        if ((v20 & 2) == 0) {
          goto LABEL_36;
        }
        goto LABEL_41;
      }
      llvm::raw_ostream::write(v10, 112);
      if ((v20 & 2) == 0)
      {
LABEL_36:
        if ((v20 & 4) == 0) {
          goto LABEL_37;
        }
        goto LABEL_46;
      }
LABEL_41:
      int v29 = (unsigned char *)*((void *)v10 + 4);
      if ((unint64_t)v29 >= *((void *)v10 + 3))
      {
        llvm::raw_ostream::write(v10, 108);
        if ((v20 & 4) == 0)
        {
LABEL_37:
          if ((v20 & 0x10) == 0) {
            goto LABEL_50;
          }
          goto LABEL_38;
        }
      }
      else
      {
        *((void *)v10 + 4) = v29 + 1;
        *int v29 = 108;
        if ((v20 & 4) == 0) {
          goto LABEL_37;
        }
      }
LABEL_46:
      uint64_t v30 = (unsigned char *)*((void *)v10 + 4);
      if ((unint64_t)v30 >= *((void *)v10 + 3))
      {
        llvm::raw_ostream::write(v10, 120);
        if ((v20 & 0x10) == 0) {
          goto LABEL_50;
        }
      }
      else
      {
        *((void *)v10 + 4) = v30 + 1;
        *uint64_t v30 = 120;
        if ((v20 & 0x10) == 0) {
          goto LABEL_50;
        }
      }
LABEL_38:
      int v28 = (unsigned char *)*((void *)v10 + 4);
      if ((unint64_t)v28 >= *((void *)v10 + 3))
      {
        llvm::raw_ostream::write(v10, 114);
      }
      else
      {
        *((void *)v10 + 4) = v28 + 1;
        *int v28 = 114;
      }
LABEL_50:
      uint64_t v31 = (unsigned char *)*((void *)v10 + 4);
      if ((unint64_t)v31 >= *((void *)v10 + 3))
      {
        llvm::raw_ostream::write(v10, 10);
      }
      else
      {
        *((void *)v10 + 4) = v31 + 1;
        *uint64_t v31 = 10;
      }
      v18 += 80;
    }
    uint64_t v32 = (const char *)*((void *)v10 + 2);
    a4 = v40;
    uint64_t v7 = v41;
    a3 = v42;
    if (*((const char **)v10 + 4) != v32)
    {
      *((void *)v10 + 4) = v32;
      llvm::raw_ostream::flush_tied_then_write(v10, v32);
    }
  }
  uint64_t v33 = *(void *)(a1 + 1224);
  if (*(char *)(v33 + 239) < 0)
  {
    if (*(void *)(v33 + 224)) {
      goto LABEL_66;
    }
  }
  else if (*(unsigned char *)(v33 + 239))
  {
    goto LABEL_66;
  }
  sub_1CBF4BD94(v33, *(void **)(*(void *)v7 + 96), *(void *)(*(void *)v7 + 104));
  uint64_t v35 = *(void *)(*(void *)v7 + 96);
  uint64_t v34 = *(void *)(*(void *)v7 + 104);
  __int16 v44 = 261;
  v43[0] = v35;
  v43[1] = v34;
  llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v43);
  int v36 = v47;
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v36 == 3) {
    *(_DWORD *)(a1 + 444) = 1;
  }
LABEL_66:
  __p[0] = a3;
  long long v37 = *(void **)v7;
  if (*(void *)(*(void *)v7 + 8) == **(void **)v7)
  {
LABEL_70:
    *a5 = 0;
  }
  else
  {
    LODWORD(v38) = 0;
    uint64_t v39 = (uint64_t)&a3[4 * a4];
    while (1)
    {
      llvm::lto::LTO::addModule(a1, v37, v38, (char **)__p, v39, a5);
      if (*a5) {
        break;
      }
      uint64_t v38 = (v38 + 1);
      long long v37 = *(void **)v7;
      if (v38 == (uint64_t)(*(void *)(*(void *)v7 + 8) - **(void **)v7) >> 6) {
        goto LABEL_70;
      }
    }
  }
}

void llvm::lto::LTO::addModule(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, char **a4@<X3>, uint64_t a5@<X4>, void **a6@<X8>)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a3;
  llvm::BitcodeModule::getLTOInfo((llvm::BitcodeModule *)(*a2 + ((unint64_t)a3 << 6)), (uint64_t)&v53);
  if (v54)
  {
    *a6 = v53;
    return;
  }
  if (!*(unsigned char *)(a1 + 1770))
  {
    char v12 = (unsigned char *)(a1 + 1770);
    *(unsigned char *)(a1 + 1769) = BYTE2(v53);
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(a1 + 1769) != BYTE2(v53))
  {
    char v12 = (unsigned char *)(a1 + 1439);
LABEL_7:
    *char v12 = 1;
  }
  int v13 = (long long *)(*a2 + (v11 << 6));
  long long v14 = v13[3];
  long long v16 = *v13;
  long long v15 = v13[1];
  long long v48 = v13[2];
  long long v49 = v14;
  long long v46 = v16;
  long long v47 = v15;
  char v17 = (void *)(a2[9] + 16 * v11);
  uint64_t v18 = a2[6] + 80 * *v17;
  uint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((80 * (v17[1] - *v17)) >> 4);
  if ((_BYTE)v53) {
    int v20 = -858993459 * ((*(void *)(a1 + 1640) - *(void *)(a1 + 1632)) >> 4) + 1;
  }
  else {
    int v20 = 0;
  }
  llvm::lto::LTO::addModuleToGlobalRes(a1, v18, v19, *a4, (a5 - (uint64_t)*a4) >> 2, v20, BYTE1(v53));
  if ((_BYTE)v53)
  {
    v45[0] = v46;
    v45[1] = v47;
    v45[2] = v48;
    v45[3] = v49;
    llvm::lto::LTO::addThinLTO((void *)a1, (uint64_t)v45, v18, v19, a4, a6);
  }
  else
  {
    *(unsigned char *)(a1 + 1264) = 0;
    v44[0] = v46;
    v44[1] = v47;
    v44[2] = v48;
    v44[3] = v49;
    llvm::lto::LTO::addRegularLTO(a1, (llvm::BitcodeModule *)v44, v18, v19, a4, (uint64_t)&v50);
    if (v52)
    {
      *a6 = (void *)v50;
    }
    else
    {
      if (BYTE1(v53))
      {
        llvm::BitcodeModule::readSummary((uint64_t)&v46, a1 + 1304, (uint64_t)"", 0, -1, a6);
        if (*a6)
        {
          if (*((void *)&v50 + 1)) {
            operator delete(*((void **)&v50 + 1));
          }
        }
        else
        {
          uint64_t v22 = *(char **)(a1 + 1248);
          unint64_t v23 = *(void *)(a1 + 1256);
          if ((unint64_t)v22 >= v23)
          {
            uint64_t v26 = *(char **)(a1 + 1240);
            uint64_t v27 = (v22 - v26) >> 5;
            unint64_t v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 59) {
              abort();
            }
            uint64_t v29 = v23 - (void)v26;
            if (v29 >> 4 > v28) {
              unint64_t v28 = v29 >> 4;
            }
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v30 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v28;
            }
            if (v30 >> 59) {
              sub_1CB833614();
            }
            uint64_t v31 = (char *)operator new(32 * v30);
            uint64_t v32 = &v31[32 * v27];
            *((void *)v32 + 2) = 0;
            *((void *)v32 + 3) = 0;
            long long v33 = v50;
            long long v34 = v51;
            uint64_t v35 = &v31[32 * v30];
            *(void *)&long long v50 = 0;
            *(_OWORD *)uint64_t v32 = v33;
            *((_OWORD *)v32 + 1) = v34;
            int v36 = v32 + 32;
            if (v22 == v26)
            {
              *(void *)(a1 + 1240) = v32;
              *(void *)(a1 + 1248) = v36;
              *(void *)(a1 + 1256) = v35;
            }
            else
            {
              do
              {
                long long v37 = *((_OWORD *)v22 - 2);
                v22 -= 32;
                *(void *)uint64_t v22 = 0;
                *((_OWORD *)v32 - 2) = v37;
                v32 -= 32;
                *((void *)v32 + 2) = *((void *)v22 + 2);
                *((void *)v32 + 3) = *((void *)v22 + 3);
                *((void *)v22 + 1) = 0;
                *((void *)v22 + 2) = 0;
                *((void *)v22 + 3) = 0;
              }
              while (v22 != v26);
              uint64_t v22 = *(char **)(a1 + 1240);
              uint64_t v38 = *(char **)(a1 + 1248);
              *(void *)(a1 + 1240) = v32;
              *(void *)(a1 + 1248) = v36;
              *(void *)(a1 + 1256) = v35;
              while (v38 != v22)
              {
                uint64_t v39 = (void *)*((void *)v38 - 3);
                if (v39)
                {
                  *((void *)v38 - 2) = v39;
                  operator delete(v39);
                }
                uint64_t v40 = (llvm::Module *)*((void *)v38 - 4);
                *((void *)v38 - 4) = 0;
                if (v40)
                {
                  llvm::Module::~Module(v40);
                  MEMORY[0x1D25D9CE0]();
                }
                v38 -= 32;
              }
            }
            if (v22) {
              operator delete(v22);
            }
            *(void *)(a1 + 1248) = v36;
          }
          else
          {
            long long v24 = v50;
            long long v25 = v51;
            *(void *)&long long v50 = 0;
            *(_OWORD *)uint64_t v22 = v24;
            *((_OWORD *)v22 + 1) = v25;
            *(void *)(a1 + 1248) = v22 + 32;
          }
          *a6 = 0;
        }
      }
      else
      {
        long long v21 = v50;
        *(void *)&long long v50 = 0;
        *(_OWORD *)std::string __p = v21;
        long long v43 = v51;
        llvm::lto::LTO::linkRegularLTO((uint64_t *)a1, (uint64_t)__p, 0, a6);
        if (__p[1]) {
          operator delete(__p[1]);
        }
        if (__p[0])
        {
          llvm::Module::~Module((llvm::Module *)__p[0]);
          MEMORY[0x1D25D9CE0]();
        }
      }
      if ((void)v50)
      {
        llvm::Module::~Module((llvm::Module *)v50);
        MEMORY[0x1D25D9CE0]();
      }
    }
  }
  if (v54)
  {
    uint64_t v41 = v53;
    uint64_t v53 = 0;
    if (v41) {
      (*(void (**)(void *))(*(void *)v41 + 8))(v41);
    }
  }
}

void llvm::lto::LTO::addThinLTO(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X4>, void **a6@<X8>)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = (uint64_t)(a1 + 163);
  llvm::BitcodeModule::readSummary(a2, (uint64_t)(a1 + 163), *(void *)(a2 + 16), *(void *)(a2 + 24), -858993459 * ((uint64_t)(a1[205] - a1[204]) >> 4), a6);
  if (!*a6)
  {
    unsigned int v58 = a6;
    char v59 = a1;
    if (a4)
    {
      uint64_t v57 = a1 + 214;
      uint64_t v13 = 80 * a4;
      long long v14 = (uint64_t *)(a3 + 24);
      while (1)
      {
        long long v15 = *a5;
        *a5 += 4;
        uint64_t v16 = *v14;
        if (*v14) {
          break;
        }
LABEL_28:
        v14 += 10;
        v13 -= 80;
        if (!v13) {
          goto LABEL_33;
        }
      }
      char v17 = *v15;
      unint64_t v63 = 0;
      uint64_t v18 = (unsigned __int8 *)*(v14 - 1);
      int v20 = *v18;
      uint64_t v19 = v18 + 1;
      uint64_t v21 = v20 == 1;
      if (v20 == 1) {
        uint64_t v22 = v19;
      }
      else {
        uint64_t v22 = (unsigned __int8 *)*(v14 - 1);
      }
      size_t v23 = v16 - v21;
      if ((unint64_t)(v16 - v21) >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      if (v23 >= 0x17)
      {
        uint64_t v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17) {
          uint64_t v25 = v23 | 7;
        }
        uint64_t v26 = v25 + 1;
        p_dst = (void **)operator new(v25 + 1);
        size_t v61 = v23;
        int64_t v62 = v26 | 0x8000000000000000;
        long long __dst = (int *)p_dst;
      }
      else
      {
        HIBYTE(v62) = v16 - v21;
        p_dst = (void **)&__dst;
        if (v16 == v21) {
          goto LABEL_16;
        }
      }
      memmove(p_dst, v22, v23);
LABEL_16:
      *((unsigned char *)p_dst + v23) = 0;
      if (v62 >= 0) {
        uint64_t v27 = (int *)&__dst;
      }
      else {
        uint64_t v27 = __dst;
      }
      if (v62 >= 0) {
        size_t v28 = HIBYTE(v62) & 0x7F;
      }
      else {
        size_t v28 = v61;
      }
      long long v65 = xmmword_1CFAC4320;
      *(void *)&long long v66 = 0;
      llvm::MD5::update((int *)&v65, v27, v28);
      llvm::MD5::final((int *)&v65, (int *)&v64);
      unint64_t v29 = v64;
      if (SHIBYTE(v62) < 0) {
        operator delete(__dst);
      }
      unint64_t v63 = v29;
      if (v17)
      {
        uint64_t v31 = *(void *)(a2 + 16);
        uint64_t v32 = *(void *)(a2 + 24);
        long long v33 = sub_1CD4F8990(v57, &v63);
        v33[1] = v31;
        v33[2] = v32;
        if ((v17 & 0x10) != 0)
        {
          uint64_t v34 = sub_1CCB6B49C(v12, v63, *(void **)(a2 + 16), *(void *)(a2 + 24));
          if (v34) {
            *(_WORD *)(v34 + 12) = *(_WORD *)(v34 + 12) & 0xFFF0 | 4;
          }
        }
      }
      if ((v17 & 2) != 0)
      {
        uint64_t v30 = sub_1CCB6B49C(v12, v63, *(void **)(a2 + 16), *(void *)(a2 + 24));
        if (v30) {
          *(_WORD *)(v30 + 12) |= 0x100u;
        }
      }
      goto LABEL_28;
    }
LABEL_33:
    long long v35 = *(_OWORD *)a2;
    long long v65 = *(_OWORD *)(a2 + 16);
    long long v66 = v35;
    long long v36 = *(_OWORD *)(a2 + 32);
    long long v67 = *(_OWORD *)(a2 + 16);
    long long v68 = v36;
    long long v69 = *(_OWORD *)(a2 + 48);
    uint64_t v37 = sub_1CCB74230(v59 + 201, &v65, &v66);
    if ((v37 & 1) == 0)
    {
      llvm::inconvertibleErrorCode((llvm *)v37);
      operator new();
    }
    uint64_t v38 = v59[102];
    uint64_t v39 = v59[103];
    if (v38 != v39)
    {
      uint64_t v40 = v59 + 207;
      if (!*((unsigned char *)v59 + 1704))
      {
        void *v40 = 0;
        v59[208] = 0;
        *((_DWORD *)v59 + 418) = 0;
        v59[210] = 0;
        v59[212] = 0;
        v59[211] = 0;
        *((unsigned char *)v59 + 1704) = 1;
        MEMORY[0x1D25D9CD0](0, 8);
        uint64_t v38 = v59[102];
        uint64_t v39 = v59[103];
      }
      for (; v38 != v39; v38 += 24)
      {
        uint64_t v41 = *(void *)(a2 + 16);
        uint64_t v42 = *(void *)(a2 + 24);
        *(void *)&long long v65 = v41;
        *((void *)&v65 + 1) = v42;
        char v43 = *(unsigned char *)(v38 + 23);
        BOOL v44 = v43 < 0;
        if (v43 >= 0) {
          uint64_t v45 = (char *)v38;
        }
        else {
          uint64_t v45 = *(char **)v38;
        }
        size_t v46 = v43 & 0x7F;
        if (v44) {
          size_t v47 = *(void *)(v38 + 8);
        }
        else {
          size_t v47 = v46;
        }
        if (llvm::StringRef::find((uint64_t *)&v65, v45, v47, 0) != -1)
        {
          *(void *)&long long v65 = v41;
          *((void *)&v65 + 1) = v42;
          long long v48 = *(_OWORD *)(a2 + 16);
          long long v66 = *(_OWORD *)a2;
          long long v67 = v48;
          long long v49 = *(_OWORD *)(a2 + 48);
          long long v68 = *(_OWORD *)(a2 + 32);
          long long v69 = v49;
          long long v50 = (llvm *)sub_1CCB74230(v40, &v65, &v66);
          long long v51 = (llvm::raw_ostream *)llvm::errs(v50);
          char v52 = v51;
          uint64_t v53 = *((void *)v51 + 4);
          if ((unint64_t)(*((void *)v51 + 3) - v53) > 0x13)
          {
            *(_DWORD *)(v53 + 16) = 543649385;
            *(_OWORD *)uint64_t v53 = *(_OWORD *)"[ThinLTO] Selecting ";
            char v54 = (_DWORD *)(*((void *)v51 + 4) + 20);
            *((void *)v52 + 4) = v54;
          }
          else
          {
            llvm::raw_ostream::write(v51, "[ThinLTO] Selecting ", 0x14uLL);
            char v54 = (_DWORD *)*((void *)v52 + 4);
          }
          uint64_t v55 = *(const void **)(a2 + 16);
          unint64_t v56 = *(void *)(a2 + 24);
          if (v56 <= *((void *)v52 + 3) - (void)v54)
          {
            if (v56)
            {
              memcpy(v54, v55, *(void *)(a2 + 24));
              char v54 = (_DWORD *)(*((void *)v52 + 4) + v56);
              *((void *)v52 + 4) = v54;
            }
          }
          else
          {
            llvm::raw_ostream::write(v52, (const char *)v55, *(void *)(a2 + 24));
            char v54 = (_DWORD *)*((void *)v52 + 4);
          }
          if (*((void *)v52 + 3) - (void)v54 > 0xBuLL)
          {
            v54[2] = 174419049;
            *(void *)char v54 = *(void *)" to compile\n";
            *((void *)v52 + 4) += 12;
          }
          else
          {
            llvm::raw_ostream::write(v52, " to compile\n", 0xCuLL);
          }
        }
      }
    }
    *unsigned int v58 = 0;
  }
}

uint64_t llvm::lto::LTO::addRegularLTO@<X0>(uint64_t a1@<X0>, llvm::BitcodeModule *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v222 = *MEMORY[0x1E4F143B8];
  llvm::BitcodeModule::getLazyModule(a2, (uint64_t)&v220);
  uint64_t v10 = v220;
  uint64_t v220 = 0;
  if (v221)
  {
    *(unsigned char *)(a6 + 32) |= 1u;
    *(void *)a6 = v10;
    return sub_1CC1CC83C((uint64_t)&v220);
  }
  uint64_t v11 = *(void *)(v10 + 160);
  if (!v11 || ((*(void (**)(uint64_t *__return_ptr))(*(void *)v11 + 32))(&v209), (uint64_t v157 = v209) == 0))
  {
    uint64_t v175 = a1;
    uint64_t v183 = a3;
    uint64_t v172 = a6;
    llvm::UpgradeDebugInfo((llvm **)v10, v9);
    uint64_t v209 = 0;
    v210[0] = 0;
    v210[1] = 0;
    uint64_t v211 = v213;
    uint64_t v212 = 0x400000000;
    BOOL v214 = (char *)&v215 + 8;
    long long v215 = 0u;
    long long v216 = 0u;
    long long v217 = 0u;
    long long v218 = 0u;
    int v219 = 0;
    llvm::ModuleSymbolTable::addModule((llvm::ModuleSymbolTable *)&v209, (llvm::Module *)v10);
    uint64_t v12 = v10 + 8;
    uint64_t v173 = v10;
    uint64_t v13 = *(void *)(v10 + 16);
    if (v13 != v10 + 8)
    {
      char v186 = 0;
      long long v14 = 0;
      long long v15 = 0;
      while (1)
      {
        if (v13) {
          unint64_t v16 = v13 - 56;
        }
        else {
          unint64_t v16 = 0;
        }
        if ((*(_DWORD *)(v16 + 32) & 0xF) == 6)
        {
          if (v14 >= v186)
          {
            uint64_t v18 = (v14 - (char *)v15) >> 3;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 61) {
LABEL_341:
            }
              abort();
            if ((v186 - (char *)v15) >> 2 > v19) {
              unint64_t v19 = (v186 - (char *)v15) >> 2;
            }
            if ((unint64_t)(v186 - (char *)v15) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v19;
            }
            if (v20)
            {
              if (v20 >> 61) {
LABEL_342:
              }
                sub_1CB833614();
              uint64_t v21 = (char *)operator new(8 * v20);
            }
            else
            {
              uint64_t v21 = 0;
            }
            uint64_t v22 = (unint64_t *)&v21[8 * v18];
            *uint64_t v22 = v16;
            char v17 = v22 + 1;
            if (v14 != (char *)v15)
            {
              do
              {
                unint64_t v23 = *((void *)v14 - 1);
                v14 -= 8;
                *--uint64_t v22 = v23;
              }
              while (v14 != (char *)v15);
              long long v14 = (char *)v15;
            }
            long long v15 = v22;
            char v186 = &v21[8 * v20];
            if (v14) {
              operator delete(v14);
            }
            goto LABEL_12;
          }
          *(void *)long long v14 = v16;
          v14 += 8;
        }
        char v17 = (unint64_t *)v14;
LABEL_12:
        uint64_t v13 = *(void *)(v13 + 8);
        long long v14 = (char *)v17;
        if (v13 == v12) {
          goto LABEL_31;
        }
      }
    }
    long long v15 = 0;
    char v17 = 0;
    char v186 = 0;
LABEL_31:
    v201[0] = 0;
    v201[1] = 0;
    int v202 = 0;
    uint64_t v24 = *(void *)(v173 + 48);
    uint64_t v174 = v173 + 40;
    for (uint64_t i = v183; v24 != v174; v24 = *(void *)(v24 + 8))
    {
      if (v24) {
        uint64_t v26 = (llvm::GlobalAlias *)(v24 - 48);
      }
      else {
        uint64_t v26 = 0;
      }
      __dst.__r_.__value_.__r.__words[0] = 0;
      __dst.__r_.__value_.__r.__words[0] = llvm::GlobalAlias::getAliaseeObject(v26);
      if (__dst.__r_.__value_.__r.__words[0])
      {
        unint64_t v203 = 0;
        if ((sub_1CD420258(v201, &__dst, &v203) & 1) == 0)
        {
          uint64_t v27 = sub_1CD4202F4((uint64_t)v201, (uint64_t)&__dst, &__dst, v203);
          *uint64_t v27 = __dst.__r_.__value_.__r.__words[0];
        }
      }
    }
    uint64_t v177 = v12;
    size_t v28 = (uint64_t *)v217;
    uint64_t v29 = v217 - *((void *)&v216 + 1);
    uint64_t v30 = *((void *)&v216 + 1) - 8;
    while (v29)
    {
      uint64_t v31 = *(void *)(v30 + 8);
      v30 += 8;
      v29 -= 8;
      if ((llvm::ModuleSymbolTable::getSymbolFlags((uint64_t)&v209, v31) & 0x82) == 2)
      {
        uint64_t v32 = (uint64_t *)v30;
        goto LABEL_45;
      }
    }
    uint64_t v32 = v28;
LABEL_45:
    uint64_t v199 = 0;
    uint64_t v200 = 0;
    uint64_t v198 = &v199;
    unint64_t v203 = v205;
    uint64_t v204 = 0x200000000;
    uint64_t v207 = 0;
    uint64_t v208 = 0;
    int v206 = (char *)&v207;
    uint64_t v33 = v177;
    uint64_t v34 = a5;
    if (a4)
    {
      uint64_t v182 = v183 + 80 * a4;
      uint64_t v176 = (uint64_t **)(v175 + 1160);
      while (1)
      {
        long long v35 = *v34;
        *v34 += 4;
        char v36 = *v35;
        uint64_t v39 = *v32;
        uint64_t v38 = v32 + 1;
        uint64_t v37 = v39;
        while (v38 != v28)
        {
          uint64_t v40 = *v38++;
          if ((llvm::ModuleSymbolTable::getSymbolFlags((uint64_t)&v209, v40) & 0x82) == 2)
          {
            uint64_t v32 = v38 - 1;
            goto LABEL_52;
          }
        }
        uint64_t v32 = v28;
LABEL_52:
        unint64_t v41 = v37 & 0xFFFFFFFFFFFFFFF8;
        if ((v37 & 4) == 0)
        {
          if (v41) {
            break;
          }
        }
        if ((v37 & 4) != 0) {
          unint64_t v50 = v37 & 0xFFFFFFFFFFFFFFF8;
        }
        else {
          unint64_t v50 = 0;
        }
        char v188 = v36;
        if ((v36 & 1) == 0)
        {
          char v56 = *(unsigned char *)(v50 + 23);
          BOOL v57 = v56 < 0;
          std::string::size_type v58 = *(void *)(v50 + 8);
          if (v56 < 0) {
            unint64_t v50 = *(void *)v50;
          }
          std::string::size_type v59 = v56 & 0x7F;
          if (v57) {
            std::string::size_type v59 = v58;
          }
          __dst.__r_.__value_.__r.__words[0] = v50;
          __dst.__r_.__value_.__l.__size_ = v59;
          sub_1CD69BAC0((uint64_t)&v203, &__dst);
        }
        long long v49 = v17;
LABEL_158:
        if ((*(unsigned char *)(i + 36) & 0x20) != 0)
        {
          std::string::size_type v90 = *(void *)(i + 24);
          if (v90 >= 0x7FFFFFFFFFFFFFF8) {
            goto LABEL_341;
          }
          uint64_t v185 = i;
          BOOL v91 = *(const void **)(i + 16);
          int v179 = v15;
          int v180 = v49;
          if (v90 >= 0x17)
          {
            uint64_t v93 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v90 | 7) != 0x17) {
              uint64_t v93 = v90 | 7;
            }
            uint64_t v94 = v93 + 1;
            p_dst = (std::string *)operator new(v93 + 1);
            __dst.__r_.__value_.__l.__size_ = v90;
            __dst.__r_.__value_.__r.__words[2] = v94 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          }
          else
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(void *)(i + 24);
            p_dst = &__dst;
            if (!v90) {
              goto LABEL_167;
            }
          }
          memmove(p_dst, v91, v90);
LABEL_167:
          p_dst->__r_.__value_.__s.__data_[v90] = 0;
          uint64_t v95 = (uint64_t **)(v175 + 1160);
          size_t v96 = *v176;
          int v97 = (uint64_t **)(v175 + 1160);
          if (*v176)
          {
            char v98 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __dst.__r_.__value_.__l.__size_;
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v100 = &__dst;
            }
            else {
              uint64_t v100 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            while (1)
            {
              while (1)
              {
                uint64_t v95 = (uint64_t **)v96;
                uint64_t v103 = (const void *)v96[4];
                BOOL v101 = v96 + 4;
                unint64_t v102 = v103;
                size_t v104 = *((unsigned __int8 *)v101 + 23);
                if ((v104 & 0x80u) == 0) {
                  uint64_t v105 = v101;
                }
                else {
                  uint64_t v105 = v102;
                }
                size_t v106 = v101[1];
                if ((v104 & 0x80u) == 0) {
                  size_t v107 = v104 & 0x7F;
                }
                else {
                  size_t v107 = v101[1];
                }
                if (v107 >= size) {
                  size_t v108 = size;
                }
                else {
                  size_t v108 = v107;
                }
                int v109 = memcmp(v100, v105, v108);
                BOOL v110 = size < v107;
                if (v109) {
                  BOOL v110 = v109 < 0;
                }
                if (!v110) {
                  break;
                }
                size_t v96 = *v95;
                int v97 = v95;
                if (!*v95) {
                  goto LABEL_198;
                }
              }
              if ((v104 & 0x80u) != 0) {
                size_t v104 = v106;
              }
              if (size >= v104) {
                size_t v111 = v104;
              }
              else {
                size_t v111 = size;
              }
              int v112 = memcmp(v105, v100, v111);
              BOOL v113 = v104 < size;
              if (v112) {
                BOOL v113 = v112 < 0;
              }
              if (!v113) {
                break;
              }
              size_t v96 = v95[1];
              if (!v96)
              {
                int v97 = v95 + 1;
                goto LABEL_198;
              }
            }
          }
          else
          {
LABEL_198:
            uint64_t v114 = (uint64_t *)v95;
            uint64_t v95 = (uint64_t **)operator new(0x48uLL);
            *((_OWORD *)v95 + 2) = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
            uint64_t v115 = (uint64_t *)__dst.__r_.__value_.__r.__words[2];
            memset(&__dst, 0, sizeof(__dst));
            v95[7] = 0;
            v95[8] = 0;
            v95[6] = v115;
            char *v95 = 0;
            v95[1] = 0;
            v95[2] = v114;
            *int v97 = (uint64_t *)v95;
            uint64_t v116 = **(void **)(v175 + 1152);
            int v117 = (uint64_t *)v95;
            if (v116)
            {
              *(void *)(v175 + 1152) = v116;
              int v117 = *v97;
            }
            sub_1CB8358B8(*(uint64_t **)(v175 + 1160), v117);
            ++*(void *)(v175 + 1168);
            char v98 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          uint64_t v34 = a5;
          long long v15 = v179;
          uint64_t v33 = v177;
          uint64_t i = v185;
          if (v98 < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          size_t v118 = (uint64_t *)*(unsigned int *)(v185 + 40);
          if (v95[7] > v118) {
            size_t v118 = v95[7];
          }
          v95[7] = v118;
          unint64_t v119 = *(unsigned int *)(v185 + 44);
          if (v119)
          {
            unsigned int v120 = __clz(v119) ^ 0x3F;
            unsigned int v121 = *((unsigned __int16 *)v95 + 32);
            if (v120 >= v121) {
              char v122 = v120;
            }
            else {
              char v122 = *((_WORD *)v95 + 32);
            }
            if (v121 >= 0x100) {
              LOBYTE(v120) = v122;
            }
            *((_WORD *)v95 + 32) = v120 | 0x100;
          }
          *((unsigned char *)v95 + 66) |= v188 & 1;
          long long v49 = v180;
        }
LABEL_213:
        i += 80;
        char v17 = v49;
        if (i == v182) {
          goto LABEL_220;
        }
      }
      if (v36)
      {
        if ((*(unsigned char *)(i + 36) & 8) != 0)
        {
          long long v49 = v17;
          goto LABEL_213;
        }
        char v188 = v36;
        if (v17 >= (unint64_t *)v186)
        {
          uint64_t v51 = i;
          uint64_t v52 = v17 - v15;
          unint64_t v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 61) {
            goto LABEL_341;
          }
          if ((v186 - (char *)v15) >> 2 > v53) {
            unint64_t v53 = (v186 - (char *)v15) >> 2;
          }
          if ((unint64_t)(v186 - (char *)v15) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v54 = v53;
          }
          if (v54)
          {
            if (v54 >> 61) {
              goto LABEL_342;
            }
            uint64_t v55 = (char *)operator new(8 * v54);
          }
          else
          {
            uint64_t v55 = 0;
          }
          uint64_t v60 = (unint64_t *)&v55[8 * v52];
          size_t v61 = v60;
          unint64_t *v60 = v41;
          if (v17 == v15)
          {
            long long v15 = (unint64_t *)&v55[8 * v52];
            uint64_t i = v51;
          }
          else
          {
            uint64_t i = v51;
            do
            {
              unint64_t v62 = *--v17;
              *--uint64_t v60 = v62;
            }
            while (v17 != v15);
            char v17 = v15;
            long long v15 = v60;
          }
          long long v49 = v61 + 1;
          char v186 = &v55[8 * v54];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *char v17 = v41;
          long long v49 = v17 + 1;
        }
        if ((v188 & 0x10) != 0)
        {
          int v63 = *(_DWORD *)(v41 + 32);
          *(_DWORD *)(v41 + 32) = v63 & 0xFFFFFFF0 | 4;
          if ((v63 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v41) & 1) == 0) {
            *(_DWORD *)(v41 + 32) |= 0x4000u;
          }
        }
        int v64 = *(_DWORD *)(v41 + 32);
        if ((v64 & 0xE) == 2)
        {
          int v65 = (v64 & 0xF) == 3 ? 5 : 4;
          *(_DWORD *)(v41 + 32) = v65 | v64 & 0xFFFFFFF0;
          if ((v64 & 0x30) != 0)
          {
            if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v41) & 1) == 0) {
              *(_DWORD *)(v41 + 32) |= 0x4000u;
            }
            uint64_t v33 = v177;
            uint64_t v34 = a5;
          }
        }
        goto LABEL_155;
      }
      unsigned int v42 = *(unsigned __int8 *)(v41 + 16);
      BOOL v43 = v42 > 3 || v42 == 1;
      char v188 = v36;
      if (v43) {
        goto LABEL_65;
      }
      unsigned int v44 = *(_DWORD *)(v41 + 32) & 0xF;
      BOOL v57 = v44 > 5;
      int v45 = (1 << v44) & 0x2A;
      if (v57 || v45 == 0) {
        goto LABEL_65;
      }
      if (v202)
      {
        unsigned int v47 = (v202 - 1) & ((v41 >> 4) ^ (v41 >> 9));
        uint64_t v48 = *(void *)(v201[0] + 8 * v47);
        if (v48 == v41)
        {
LABEL_65:
          long long v49 = v17;
LABEL_155:
          if ((v188 & 2) != 0)
          {
            int v89 = *(_DWORD *)(v41 + 32);
            *(_DWORD *)(v41 + 32) = v89 | 0x4000;
            if ((v89 & 0x300) == 0x100) {
              *(_DWORD *)(v41 + 32) = v89 & 0xFFFFBCFF | 0x4000;
            }
          }
          goto LABEL_158;
        }
        int v66 = 1;
        while (v48 != -4096)
        {
          unsigned int v67 = v47 + v66++;
          unsigned int v47 = v67 & (v202 - 1);
          uint64_t v48 = *(void *)(v201[0] + 8 * v47);
          if (v48 == v41) {
            goto LABEL_65;
          }
        }
      }
      if (v17 >= (unint64_t *)v186)
      {
        uint64_t v68 = i;
        uint64_t v69 = v17 - v15;
        unint64_t v70 = v69 + 1;
        if ((unint64_t)(v69 + 1) >> 61) {
          goto LABEL_341;
        }
        if ((v186 - (char *)v15) >> 2 > v70) {
          unint64_t v70 = (v186 - (char *)v15) >> 2;
        }
        if ((unint64_t)(v186 - (char *)v15) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v71 = v70;
        }
        if (v71)
        {
          if (v71 >> 61) {
            goto LABEL_342;
          }
          uint64_t v72 = (char *)operator new(8 * v71);
        }
        else
        {
          uint64_t v72 = 0;
        }
        unint64_t v73 = (unint64_t *)&v72[8 * v69];
        uint64_t v74 = v73;
        *unint64_t v73 = v41;
        if (v17 == v15)
        {
          long long v15 = (unint64_t *)&v72[8 * v69];
          uint64_t i = v68;
        }
        else
        {
          uint64_t i = v68;
          do
          {
            unint64_t v75 = *--v17;
            *--unint64_t v73 = v75;
          }
          while (v17 != v15);
          char v17 = v15;
          long long v15 = v73;
        }
        long long v49 = v74 + 1;
        char v186 = &v72[8 * v71];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *char v17 = v41;
        long long v49 = v17 + 1;
      }
      uint64_t v184 = i;
      int v76 = *(_DWORD *)(v41 + 32);
      *(_DWORD *)(v41 + 32) = v76 & 0xFFFFFFF0 | 1;
      if ((v76 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v41) & 1) == 0) {
        *(_DWORD *)(v41 + 32) |= 0x4000u;
      }
      int v77 = *(unsigned __int8 *)(v41 + 16);
      if (v77 != 2)
      {
        uint64_t v78 = v41;
        if (v77 != 1 || (uint64_t v78 = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)v41)) != 0)
        {
          if (*(void *)(v78 + 48))
          {
            int v79 = *(unsigned __int8 *)(v41 + 16);
            if (v79 == 2
              || (uint64_t AliaseeObject = v41, v79 == 1)
              && (uint64_t AliaseeObject = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)v41)) == 0)
            {
              unint64_t v81 = 0;
            }
            else
            {
              unint64_t v81 = *(void *)(AliaseeObject + 48);
            }
            char v82 = v199;
            for (j = &v199; ; char v82 = *j)
            {
              uint64_t v84 = j;
              if (!v82) {
                break;
              }
              while (1)
              {
                char j = (uint64_t **)v82;
                unint64_t v85 = v82[4];
                if (v85 > v81) {
                  break;
                }
                if (v85 >= v81) {
                  goto LABEL_152;
                }
                char v82 = j[1];
                if (!v82)
                {
                  uint64_t v84 = j + 1;
                  goto LABEL_148;
                }
              }
            }
LABEL_148:
            uint64_t v86 = (uint64_t *)operator new(0x28uLL);
            uint64_t v86[4] = v81;
            uint64_t *v86 = 0;
            v86[1] = 0;
            v86[2] = (uint64_t)j;
            *uint64_t v84 = v86;
            if (*v198)
            {
              uint64_t v198 = (uint64_t **)*v198;
              size_t v87 = *v84;
            }
            else
            {
              size_t v87 = v86;
            }
            sub_1CB8358B8(v199, v87);
            ++v200;
          }
        }
      }
LABEL_152:
      uint64_t v88 = *(void *)(v41 + 48);
      if (v88) {
        llvm::Comdat::removeUser(v88, v41);
      }
      *(void *)(v41 + 48) = 0;
      uint64_t i = v184;
      goto LABEL_155;
    }
    long long v49 = v17;
LABEL_220:
    uint64_t v123 = v173;
    if (*(_DWORD *)(v173 + 132))
    {
      uint64_t v124 = v173 + 24;
      std::string::size_type v125 = *(void *)(v173 + 32);
      std::string::size_type v126 = *(void *)(v173 + 16);
      std::string::size_type v127 = *(void *)(v173 + 48);
      uint64_t v128 = v173 + 56;
      uint64_t v129 = *(void *)(v173 + 64);
      __dst.__r_.__value_.__r.__words[0] = v125;
      __dst.__r_.__value_.__l.__size_ = v126;
      __dst.__r_.__value_.__r.__words[2] = v127;
      uint64_t v193 = v129;
      uint64_t v194 = v173 + 24;
      uint64_t v195 = v33;
      uint64_t v196 = v173 + 40;
      uint64_t v197 = v173 + 56;
      while (1)
      {
        if (v125 == v124
          && v126 == v33
          && v127 == v174
          && v129 == v128
          && v194 == v124
          && v195 == v33
          && v196 == v174
          && v197 == v128)
        {
          goto LABEL_255;
        }
        uint64_t v130 = sub_1CC4AD368((uint64_t)&__dst);
        int v131 = *(unsigned __int8 *)(v130 + 16);
        if (v131 == 2) {
          goto LABEL_252;
        }
        uint64_t v132 = v130;
        if (v131 == 1)
        {
          uint64_t v130 = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)v130);
          if (!v130) {
            goto LABEL_252;
          }
        }
        unint64_t v133 = *(void *)(v130 + 48);
        size_t v134 = v199;
        if (!v133 || v199 == 0) {
          goto LABEL_252;
        }
        while (1)
        {
          unint64_t v136 = v134[4];
          if (v133 >= v136) {
            break;
          }
LABEL_239:
          size_t v134 = (uint64_t *)*v134;
          if (!v134) {
            goto LABEL_252;
          }
        }
        if (v136 < v133) {
          break;
        }
        int v137 = *(_DWORD *)(v132 + 32);
        if ((v137 & 0xFu) - 7 >= 2)
        {
          *(_DWORD *)(v132 + 32) = v137 & 0xFFFFFFF0 | 1;
          if ((v137 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v132) & 1) == 0) {
            *(_DWORD *)(v132 + 32) |= 0x4000u;
          }
        }
        unsigned int v138 = *(unsigned __int8 *)(v132 + 16);
        if (v138 <= 3 && v138 != 1)
        {
          uint64_t v140 = *(void *)(v132 + 48);
          if (v140) {
            llvm::Comdat::removeUser(v140, v132);
          }
          *(void *)(v132 + 48) = 0;
        }
LABEL_252:
        sub_1CC4AD1DC((uint64_t)&__dst);
        std::string::size_type v126 = __dst.__r_.__value_.__l.__size_;
        std::string::size_type v125 = __dst.__r_.__value_.__r.__words[0];
        std::string::size_type v127 = __dst.__r_.__value_.__r.__words[2];
        uint64_t v129 = v193;
      }
      ++v134;
      goto LABEL_239;
    }
LABEL_255:
    if (*(char *)(v173 + 111) < 0)
    {
      if (*(void *)(v173 + 96)) {
        goto LABEL_272;
      }
    }
    else if (*(unsigned char *)(v173 + 111))
    {
LABEL_272:
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 12;
      strcpy((char *)&__dst, ".lto_discard");
      if (v204 || v208)
      {
        uint64_t v181 = v49;
        v190[0] = &v203;
        llvm::ModuleSymbolTable::CollectAsmSymvers(v173);
        uint64_t v146 = (char *)v203;
        uint64_t v147 = v208;
        if (v208) {
          uint64_t v148 = v206;
        }
        else {
          uint64_t v148 = (char *)v203;
        }
        uint64_t v149 = (char *)v203 + 16 * v204;
        if (v208) {
          int v150 = (char *)&v207;
        }
        else {
          int v150 = (char *)v203 + 16 * v204;
        }
        memset(&v189, 0, sizeof(v189));
        if (v148 != v150)
        {
          uint64_t v158 = 0;
          char v159 = v148;
          do
          {
            uint64_t v160 = v158;
            if (v208)
            {
              unint64_t v161 = (char *)*((void *)v159 + 1);
              if (v161)
              {
                do
                {
                  unint64_t v162 = v161;
                  unint64_t v161 = *(char **)v161;
                }
                while (v161);
              }
              else
              {
                do
                {
                  unint64_t v162 = (char *)*((void *)v159 + 2);
                  BOOL v43 = *(void *)v162 == (void)v159;
                  char v159 = v162;
                }
                while (!v43);
              }
            }
            else
            {
              unint64_t v162 = v159 + 16;
            }
            uint64_t v158 = v160 + 1;
            char v159 = v162;
          }
          while (v162 != v150);
          std::string::size_type v163 = 2 * v160;
          int v164 = v148;
          if (!v208) {
            goto LABEL_321;
          }
          while (v164 != (char *)&v207)
          {
            uint64_t v165 = *((void *)v164 + 5);
            unsigned int v166 = (char *)*((void *)v164 + 1);
            if (v166)
            {
              do
              {
                int v164 = v166;
                unsigned int v166 = *(char **)v166;
              }
              while (v166);
            }
            else
            {
              do
              {
                std::string::size_type v167 = v164;
                int v164 = (char *)*((void *)v164 + 2);
              }
              while (*(char **)v164 != v167);
            }
            while (1)
            {
              v163 += v165;
              if (v208) {
                break;
              }
LABEL_321:
              if (v164 == v149) {
                goto LABEL_325;
              }
              uint64_t v165 = *((void *)v164 + 1);
              v164 += 16;
            }
          }
LABEL_325:
          std::string::reserve(&v189, v163);
          while (1)
          {
            std::string::size_type v168 = v148 + 32;
            if (!v147) {
              std::string::size_type v168 = v146;
            }
            std::string::append(&v189, *(const std::string::value_type **)v168, *((void *)v168 + 1));
            if (v147)
            {
              uint64_t v169 = (char *)*((void *)v148 + 1);
              if (v169)
              {
                do
                {
                  uint64_t v146 = v169;
                  uint64_t v169 = *(char **)v169;
                }
                while (v169);
              }
              else
              {
                do
                {
                  uint64_t v146 = (char *)*((void *)v148 + 2);
                  BOOL v43 = *(void *)v146 == (void)v148;
                  uint64_t v148 = v146;
                }
                while (!v43);
              }
              if (v146 == v150) {
                break;
              }
            }
            else
            {
              uint64_t v146 = v148 + 16;
              if (v148 + 16 == v149) {
                break;
              }
            }
            std::string::append(&v189, ", ", 2uLL);
            uint64_t v148 = v146;
          }
        }
        int v151 = std::string::insert(&v189, 0, " ");
        std::string::size_type v152 = v151->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v190 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
        uint64_t v191 = v152;
        v151->__r_.__value_.__l.__size_ = 0;
        v151->__r_.__value_.__r.__words[2] = 0;
        v151->__r_.__value_.__r.__words[0] = 0;
        if (v191 >= 0) {
          char v153 = v190;
        }
        else {
          char v153 = (void **)v190[0];
        }
        if (v191 >= 0) {
          std::string::size_type v154 = HIBYTE(v191) & 0x7F;
        }
        else {
          std::string::size_type v154 = (std::string::size_type)v190[1];
        }
        std::string::append(&__dst, (const std::string::value_type *)v153, v154);
        if (SHIBYTE(v191) < 0) {
          operator delete(v190[0]);
        }
        long long v49 = v181;
        if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v189.__r_.__value_.__l.__data_);
        }
        uint64_t v123 = v173;
      }
      std::string::append(&__dst, "\n");
      sub_1CB906918((const void **)&__dst.__r_.__value_.__l.__data_, (const void **)(v173 + 88), (uint64_t)v190);
      if (v191 >= 0) {
        int v155 = v190;
      }
      else {
        int v155 = (void **)v190[0];
      }
      if (v191 >= 0) {
        std::string::size_type v156 = HIBYTE(v191) & 0x7F;
      }
      else {
        std::string::size_type v156 = (std::string::size_type)v190[1];
      }
      LLVMSetModuleInlineAsm2_0(v123, (const std::string::value_type *)v155, v156);
      if (SHIBYTE(v191) < 0) {
        operator delete(v190[0]);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
    }
    *(unsigned char *)(v172 + 32) &= ~1u;
    *(void *)uint64_t v172 = v123;
    *(void *)(v172 + 8) = v15;
    *(void *)(v172 + 16) = v49;
    *(void *)(v172 + 24) = v186;
    sub_1CB833A08((uint64_t)&v206, v207);
    if (v203 != v205) {
      free(v203);
    }
    sub_1CBB0D544(v199);
    MEMORY[0x1D25D9CD0](v201[0], 8);
    MEMORY[0x1D25D9CD0](v218, 8);
    if (*((void *)&v216 + 1))
    {
      *(void *)&long long v217 = *((void *)&v216 + 1);
      operator delete(*((void **)&v216 + 1));
    }
    sub_1CCB7266C((uint64_t)v210);
    if (v212)
    {
      uint64_t v141 = (uint64_t *)v211;
      uint64_t v142 = 8 * v212;
      do
      {
        uint64_t v143 = *v141++;
        MEMORY[0x1D25D9CD0](v143, 8);
        v142 -= 8;
      }
      while (v142);
    }
    uint64_t v144 = (uint64_t *)v214;
    if (v215)
    {
      uint64_t v170 = 16 * v215;
      do
      {
        uint64_t v171 = *v144;
        v144 += 2;
        MEMORY[0x1D25D9CD0](v171, 8);
        v170 -= 16;
      }
      while (v170);
      uint64_t v144 = (uint64_t *)v214;
    }
    if (v144 != (uint64_t *)((char *)&v215 + 8)) {
      free(v144);
    }
    if (v211 != v213) {
      free(v211);
    }
    return sub_1CC1CC83C((uint64_t)&v220);
  }
  *(unsigned char *)(a6 + 32) |= 1u;
  *(void *)a6 = v157;
  sub_1CC1CC83C((uint64_t)&v220);
  llvm::Module::~Module((llvm::Module *)v10);
  return MEMORY[0x1D25D9CE0]();
}

void llvm::lto::LTO::linkRegularLTO(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  v57[34] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(llvm::GlobalValue ***)(a2 + 8);
  uint64_t v6 = *(llvm::GlobalValue ***)(a2 + 16);
  if (v5 == v6)
  {
    long long v9 = 0;
    long long v8 = 0;
LABEL_76:
    uint64_t v40 = (llvm::Module **)a1[154];
    unint64_t v41 = *(llvm::Module **)a2;
    *(void *)a2 = 0;
    uint64_t v46 = 0;
    unsigned int v47 = v41;
    llvm::IRMover::move(v40, &v47, (uint64_t)v8, v9 - v8, &v45, 0);
  }
  long long v8 = 0;
  long long v9 = 0;
  uint64_t v10 = 0;
  unsigned int v44 = (llvm::ModuleSummaryIndex *)(a1 + 163);
  while (1)
  {
    uint64_t v11 = *v5;
    if (a3)
    {
      unint64_t v34 = sub_1CD4AC784(*v5);
      if ((llvm::ModuleSummaryIndex::isGUIDLive(v44, v34) & 1) == 0) {
        break;
      }
    }
    if ((*((_DWORD *)v11 + 8) & 0xF) != 1)
    {
      if (v9 >= v10)
      {
        uint64_t v20 = v9 - v8;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61) {
          goto LABEL_80;
        }
        if (((char *)v10 - (char *)v8) >> 2 > v21) {
          unint64_t v21 = ((char *)v10 - (char *)v8) >> 2;
        }
        if ((unint64_t)((char *)v10 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22)
        {
          if (v22 >> 61) {
            goto LABEL_81;
          }
          unint64_t v23 = (char *)operator new(8 * v22);
        }
        else
        {
          unint64_t v23 = 0;
        }
        uint64_t v24 = (llvm::GlobalValue **)&v23[8 * v20];
        *uint64_t v24 = v11;
        uint64_t v25 = v24 + 1;
        while (v9 != v8)
        {
          uint64_t v26 = *--v9;
          *--uint64_t v24 = v26;
        }
LABEL_67:
        uint64_t v10 = (llvm::GlobalValue **)&v23[8 * v22];
        if (v8) {
          operator delete(v8);
        }
        long long v9 = v25;
        long long v8 = v24;
        goto LABEL_70;
      }
      goto LABEL_36;
    }
    if ((*((unsigned char *)v11 + 23) & 0x10) == 0)
    {
      unint64_t v29 = 0;
      size_t v28 = (unsigned __int8 *)&byte_1CFBCE98E;
      goto LABEL_28;
    }
    uint64_t v12 = ***(void ***)v11;
    uint64_t v13 = *(void *)(v12 + 152);
    uint64_t v14 = *(unsigned int *)(v12 + 168);
    if (!v14) {
      goto LABEL_26;
    }
    LODWORD(v15) = (v14 - 1) & ((v11 >> 4) ^ (v11 >> 9));
    unint64_t v16 = (llvm::GlobalValue **)(v13 + 16 * v15);
    char v17 = *v16;
    if (*v16 != v11)
    {
      int v18 = 1;
      while (v17 != (llvm::GlobalValue *)-4096)
      {
        int v19 = v15 + v18++;
        uint64_t v15 = v19 & (v14 - 1);
        char v17 = *(llvm::GlobalValue **)(v13 + 16 * v15);
        if (v17 == v11)
        {
          unint64_t v16 = (llvm::GlobalValue **)(v13 + 16 * v15);
          goto LABEL_27;
        }
      }
LABEL_26:
      unint64_t v16 = (llvm::GlobalValue **)(v13 + 16 * v14);
    }
LABEL_27:
    uint64_t v27 = v16[1];
    unint64_t v30 = *(void *)v27;
    size_t v28 = (unsigned __int8 *)v27 + 16;
    unint64_t v29 = v30;
LABEL_28:
    uint64_t NamedValue = llvm::Module::getNamedValue(a1[153], v28, v29);
    if (NamedValue)
    {
      if (*(unsigned char *)(NamedValue + 16))
      {
        if (*(unsigned char *)(NamedValue + 16) != 3 || (*(_DWORD *)(NamedValue + 20) & 0x7FFFFFF) != 0) {
          goto LABEL_70;
        }
      }
      else if (*(void *)(NamedValue + 72) != NamedValue + 72 || (*(unsigned char *)(NamedValue + 34) & 0x80) != 0)
      {
        goto LABEL_70;
      }
    }
    if (v9 >= v10)
    {
      uint64_t v32 = v9 - v8;
      unint64_t v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 61) {
LABEL_80:
      }
        abort();
      if (((char *)v10 - (char *)v8) >> 2 > v33) {
        unint64_t v33 = ((char *)v10 - (char *)v8) >> 2;
      }
      if ((unint64_t)((char *)v10 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v33;
      }
      if (v22)
      {
        if (v22 >> 61) {
LABEL_81:
        }
          sub_1CB833614();
        unint64_t v23 = (char *)operator new(8 * v22);
      }
      else
      {
        unint64_t v23 = 0;
      }
      uint64_t v24 = (llvm::GlobalValue **)&v23[8 * v32];
      *uint64_t v24 = v11;
      uint64_t v25 = v24 + 1;
      while (v9 != v8)
      {
        uint64_t v39 = *--v9;
        *--uint64_t v24 = v39;
      }
      goto LABEL_67;
    }
LABEL_36:
    *v9++ = v11;
LABEL_70:
    if (++v5 == v6) {
      goto LABEL_76;
    }
  }
  if (!v11 || *((unsigned char *)v11 + 16) || !a1[225]) {
    goto LABEL_70;
  }
  llvm::Module::materialize(*((llvm::Module **)v11 + 5), v11, a4);
  if (!*a4)
  {
    v52[0] = (uint64_t **)v11;
    v52[1] = 0;
    void v52[2] = 0;
    llvm::OptimizationRemark::OptimizationRemark((uint64_t)v54, (uint64_t)"lto", (uint64_t)"deadfunction", 12, v11);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v48, "Function", 8uLL, (unsigned __int8 *)v11);
    long long v35 = (uint64_t *)sub_1CD3D6290((uint64_t)v54, (long long *)v48);
    v53[0] = " not added to the combined module ";
    v53[1] = 34;
    sub_1CC59ADEC(v35 + 10, (uint64_t)v53);
    llvm::OptimizationRemarkEmitter::emit(v52, (llvm::DiagnosticInfoOptimizationBase *)v35);
    if (v51 < 0) {
      operator delete(__p);
    }
    if (v49 < 0) {
      operator delete(v48[0]);
    }
    v54[0] = &unk_1F2616800;
    char v36 = (char *)v55;
    if (v56)
    {
      unint64_t v37 = (unint64_t)v56 << 6;
      do
      {
        uint64_t v38 = (void **)&v36[v37];
        if (v36[v37 - 17] < 0) {
          operator delete(*(v38 - 5));
        }
        if (*((char *)v38 - 41) < 0) {
          operator delete(*(v38 - 8));
        }
        v37 -= 64;
      }
      while (v37);
      char v36 = (char *)v55;
    }
    if (v36 != (char *)v57) {
      free(v36);
    }
    goto LABEL_70;
  }
  if (v8) {
    operator delete(v8);
  }
}

uint64_t llvm::lto::LTO::getMaxTasks(llvm::lto::LTO *this)
{
  *((unsigned char *)this + 1768) = 1;
  uint64_t v1 = 1688;
  if (!*((unsigned char *)this + 1704)) {
    uint64_t v1 = 1640;
  }
  uint64_t v2 = 1680;
  if (!*((unsigned char *)this + 1704)) {
    uint64_t v2 = 1632;
  }
  return *((_DWORD *)this + 294)
       - 858993459 * ((*(void *)((char *)this + v1) - *(void *)((char *)this + v2)) >> 4);
}

uint64_t llvm::lto::LTO::checkPartiallySplit@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a2;
  if (!*(unsigned char *)(this + 1439)) {
    goto LABEL_103;
  }
  uint64_t v3 = *(uint64_t **)(*(void *)(this + 1224) + 112);
  unsigned int v4 = *((_DWORD *)v3 + 8);
  if (v4 <= 1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = v4;
  }
  if (v4 <= 0xD) {
    size_t v6 = v5;
  }
  else {
    size_t v6 = 14;
  }
  uint64_t v7 = *((unsigned int *)v3 + 2);
  uint64_t v52 = v7;
  uint64_t v49 = this;
  if (!v7) {
    goto LABEL_21;
  }
  uint64_t v8 = 0;
  int v9 = 0;
  do
    int v9 = 33 * v9 + aLlvmTypeTest[v8++];
  while (v6 != v8);
  unsigned int v10 = v7 - 1;
  uint64_t v11 = *v3;
  uint64_t v12 = *v3 + 8 * v7 + 8;
  int v13 = 1;
  int v14 = v9;
  while (1)
  {
    uint64_t v15 = v14 & v10;
    unint64_t v16 = *(void **)(v11 + 8 * v15);
    if (v16 != (void *)-8)
    {
      if (!v16) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(v12 + 4 * v15) == v9 && v6 == *v16)
      {
        this = memcmp("llvm.type.test", (char *)v16 + *((unsigned int *)v3 + 5), v6);
        if (!this) {
          break;
        }
      }
    }
    int v14 = v13 + v15;
    ++v13;
  }
  if (v15 == -1)
  {
LABEL_22:
    uint64_t v50 = 0;
    uint64_t v7 = v52;
    goto LABEL_23;
  }
  uint64_t v7 = v52;
  if ((int)v15 != v52 && (uint64_t v17 = *(void *)(*(void *)(v11 + 8 * (int)v15) + 8)) != 0)
  {
    if (*(unsigned char *)(v17 + 16)) {
      uint64_t v17 = 0;
    }
    uint64_t v50 = v17;
  }
  else
  {
LABEL_21:
    uint64_t v50 = 0;
  }
LABEL_23:
  if (v4 <= 1) {
    uint64_t v18 = 1;
  }
  else {
    uint64_t v18 = v4;
  }
  if (v4 <= 0x15) {
    size_t v19 = v18;
  }
  else {
    size_t v19 = 22;
  }
  if (!v7) {
    goto LABEL_42;
  }
  uint64_t v20 = 0;
  int v21 = 0;
  do
    int v21 = 33 * v21 + aLlvmTypeChecke[v20++];
  while (v19 != v20);
  unsigned int v22 = v7 - 1;
  uint64_t v23 = *v3;
  uint64_t v24 = *v3 + 8 * v7 + 8;
  int v25 = 1;
  int v26 = v21;
  while (1)
  {
    uint64_t v27 = v26 & v22;
    size_t v28 = *(void **)(v23 + 8 * v27);
    if (v28 != (void *)-8)
    {
      if (!v28) {
        goto LABEL_43;
      }
      if (*(_DWORD *)(v24 + 4 * v27) == v21 && v19 == *v28)
      {
        this = memcmp("llvm.type.checked.load", (char *)v28 + *((unsigned int *)v3 + 5), v19);
        if (!this) {
          break;
        }
      }
    }
    int v26 = v25 + v27;
    ++v25;
  }
  if (v27 == -1)
  {
LABEL_43:
    uint64_t v30 = 0;
    uint64_t v7 = v52;
    goto LABEL_44;
  }
  uint64_t v7 = v52;
  if ((int)v27 != v52 && (uint64_t v29 = *(void *)(*(void *)(v23 + 8 * (int)v27) + 8)) != 0)
  {
    if (*(unsigned char *)(v29 + 16)) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v23 + 8 * (int)v27) + 8);
    }
  }
  else
  {
LABEL_42:
    uint64_t v30 = 0;
  }
LABEL_44:
  if (v4 <= 1) {
    uint64_t v31 = 1;
  }
  else {
    uint64_t v31 = v4;
  }
  if (v4 <= 0x1E) {
    size_t v32 = v31;
  }
  else {
    size_t v32 = 31;
  }
  if (!v7) {
    goto LABEL_73;
  }
  uint64_t v33 = 0;
  int v34 = 0;
  do
    int v34 = 33 * v34 + aLlvmTypeChecke_0[v33++];
  while (v32 != v33);
  unsigned int v35 = v7 - 1;
  uint64_t v36 = *v3;
  uint64_t v37 = *v3 + 8 * v7 + 8;
  int v38 = 1;
  int v39 = v34;
  while (1)
  {
    uint64_t v40 = v39 & v35;
    uint64_t v41 = *(void *)(v36 + 8 * v40);
    if (v41 != -8)
    {
      if (!v41) {
        goto LABEL_74;
      }
      if (*(_DWORD *)(v37 + 4 * v40) == v34 && v32 == *(void *)v41)
      {
        this = memcmp("llvm.type.checked.load.relative", (const void *)(v41 + *((unsigned int *)v3 + 5)), v32);
        if (!this) {
          break;
        }
      }
    }
    int v39 = v38 + v40;
    ++v38;
  }
  if (v40 == -1)
  {
LABEL_73:
    uint64_t v41 = 0;
LABEL_74:
    uint64_t v42 = v50;
    uint64_t v2 = a2;
LABEL_75:
    if (v42) {
      goto LABEL_76;
    }
    goto LABEL_77;
  }
  uint64_t v2 = a2;
  uint64_t v42 = v50;
  if ((int)v40 != v52)
  {
    uint64_t v41 = *(void *)(*(void *)(v36 + 8 * (int)v40) + 8);
    if (v41)
    {
      if (*(unsigned char *)(v41 + 16)) {
        uint64_t v41 = 0;
      }
      if (!v50) {
        goto LABEL_77;
      }
LABEL_76:
      if (*(void *)(v42 + 8)) {
        goto LABEL_81;
      }
      goto LABEL_77;
    }
    goto LABEL_75;
  }
  uint64_t v41 = 0;
  if (v50) {
    goto LABEL_76;
  }
LABEL_77:
  if (v30 && *(void *)(v30 + 8) || v41 && *(void *)(v41 + 8))
  {
LABEL_81:
    llvm::inconvertibleErrorCode((llvm *)this);
    operator new();
  }
  BOOL v43 = *(void **)(v49 + 1304);
  if (v43 != (void *)(v49 + 1312))
  {
    do
    {
      for (uint64_t i = v43[7]; i != v43[8]; i += 8)
      {
        if (*(void *)i) {
          BOOL v45 = *(_DWORD *)(*(void *)i + 8) == 1;
        }
        else {
          BOOL v45 = 0;
        }
        if (v45)
        {
          uint64_t v46 = *(void **)(*(void *)i + 104);
          if (v46)
          {
            if (v46[4] != v46[3] || v46[7] != v46[6] || v46[10] != v46[9] || v46[13] != v46[12] || v46[1] != *v46) {
              goto LABEL_81;
            }
          }
        }
      }
      unsigned int v47 = (void *)v43[1];
      if (v47)
      {
        do
        {
          uint64_t v48 = v47;
          unsigned int v47 = (void *)*v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          uint64_t v48 = (void *)v43[2];
          BOOL v45 = *v48 == (void)v43;
          BOOL v43 = v48;
        }
        while (!v45);
      }
      BOOL v43 = v48;
    }
    while (v48 != (void *)(v49 + 1312));
  }
LABEL_103:
  void *v2 = 0;
  return this;
}

uint64_t llvm::lto::LTO::run@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  v58[0] = 0;
  v58[1] = 0;
  int v59 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  unsigned int v57 = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 1744);
  uint64_t v7 = *(uint64_t **)(a1 + 1736);
  if (v6)
  {
    while (!*v7 || *v7 == -8)
      ++v7;
  }
  uint64_t v8 = *(void *)(a1 + 1736) + 8 * v6;
  if (v7 != (uint64_t *)v8)
  {
    int v17 = 0;
    unsigned int v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = *v7;
    while (1)
    {
      size_t v21 = *(unsigned __int8 *)(v20 + 31);
      if ((*(char *)(v20 + 31) & 0x80000000) == 0) {
        break;
      }
      if (*(void *)(v20 + 16)) {
        goto LABEL_22;
      }
      do
      {
LABEL_59:
        uint64_t v35 = v7[1];
        ++v7;
        uint64_t v20 = v35;
        if (v35) {
          BOOL v36 = v20 == -8;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (v36);
      if (v7 == (uint64_t *)v8) {
        goto LABEL_3;
      }
    }
    if (!*(unsigned char *)(v20 + 31)) {
      goto LABEL_59;
    }
LABEL_22:
    uint64_t v54 = 0;
    if ((v21 & 0x80u) == 0) {
      unsigned int v22 = (int *)(v20 + 8);
    }
    else {
      unsigned int v22 = *(int **)(v20 + 8);
    }
    if ((v21 & 0x80u) != 0) {
      size_t v21 = *(void *)(v20 + 16);
    }
    if (v21)
    {
      int v23 = *(unsigned __int8 *)v22;
      if (v23 == 1) {
        size_t v24 = v21 - 1;
      }
      else {
        size_t v24 = v21;
      }
      if (v23 == 1) {
        unsigned int v22 = (int *)((char *)v22 + 1);
      }
    }
    else
    {
      size_t v24 = 0;
    }
    long long v67 = xmmword_1CFAC4320;
    uint64_t v68 = 0;
    llvm::MD5::update((int *)&v67, v22, v24);
    llvm::MD5::final((int *)&v67, v66);
    uint64_t v54 = *(void *)v66;
    if (*(unsigned char *)(v20 + 32) && *(unsigned char *)(v20 + 35)) {
      sub_1CD4ADCD0((uint64_t)v58, &v54, (uint64_t)&v67);
    }
    if (*(unsigned char *)(v20 + 33)) {
      sub_1CD4ADCD0(a1 + 1776, &v54, (uint64_t)&v67);
    }
    BOOL v25 = *(unsigned char *)(v20 + 35) == 0;
    if (v18)
    {
      unsigned int v26 = v18 - 1;
      unsigned int v27 = (37 * v54) & (v18 - 1);
      uint64_t v28 = v19 + 16 * v27;
      uint64_t v29 = *(void *)v28;
      if (v54 == *(void *)v28)
      {
LABEL_58:
        *(_DWORD *)(v28 + 8) = v25;
        goto LABEL_59;
      }
      uint64_t v30 = 0;
      int v31 = 1;
      while (v29 != -1)
      {
        if (v30) {
          BOOL v32 = 0;
        }
        else {
          BOOL v32 = v29 == -2;
        }
        if (v32) {
          uint64_t v30 = v28;
        }
        unsigned int v33 = v27 + v31++;
        unsigned int v27 = v33 & v26;
        uint64_t v28 = v19 + 16 * (v33 & v26);
        uint64_t v29 = *(void *)v28;
        if (v54 == *(void *)v28) {
          goto LABEL_58;
        }
      }
      if (v30) {
        uint64_t v28 = v30;
      }
    }
    else
    {
      uint64_t v28 = 0;
    }
    if (4 * v17 + 4 >= 3 * v18)
    {
      sub_1CCB743E0(&v55, 2 * v18);
      uint64_t v34 = v54;
      uint64_t v19 = v55;
      unsigned int v18 = v57;
      unsigned int v37 = v57 - 1;
      unsigned int v38 = (37 * v54) & (v57 - 1);
      uint64_t v28 = v55 + 16 * v38;
      uint64_t v39 = *(void *)v28;
      if (v54 == *(void *)v28) {
        goto LABEL_55;
      }
      uint64_t v40 = 0;
      int v41 = 1;
      while (v39 != -1)
      {
        if (v40) {
          BOOL v42 = 0;
        }
        else {
          BOOL v42 = v39 == -2;
        }
        if (v42) {
          uint64_t v40 = v28;
        }
        unsigned int v43 = v38 + v41++;
        unsigned int v38 = v43 & v37;
        uint64_t v28 = v55 + 16 * (v43 & v37);
        uint64_t v39 = *(void *)v28;
        if (v54 == *(void *)v28) {
          goto LABEL_55;
        }
      }
    }
    else
    {
      if (v18 + ~v17 - HIDWORD(v56) > v18 >> 3)
      {
LABEL_54:
        uint64_t v34 = *(void *)v28;
LABEL_55:
        int v17 = v56 + 1;
        LODWORD(v56) = v56 + 1;
        if (v34 != -1) {
          --HIDWORD(v56);
        }
        *(void *)uint64_t v28 = v54;
        *(_DWORD *)(v28 + 8) = 0;
        goto LABEL_58;
      }
      sub_1CCB743E0(&v55, v18);
      uint64_t v34 = v54;
      uint64_t v19 = v55;
      unsigned int v18 = v57;
      unsigned int v44 = v57 - 1;
      unsigned int v45 = (37 * v54) & (v57 - 1);
      uint64_t v28 = v55 + 16 * v45;
      uint64_t v46 = *(void *)v28;
      if (v54 == *(void *)v28) {
        goto LABEL_55;
      }
      uint64_t v40 = 0;
      int v47 = 1;
      while (v46 != -1)
      {
        if (v40) {
          BOOL v48 = 0;
        }
        else {
          BOOL v48 = v46 == -2;
        }
        if (v48) {
          uint64_t v40 = v28;
        }
        unsigned int v49 = v45 + v47++;
        unsigned int v45 = v49 & v44;
        uint64_t v28 = v55 + 16 * (v49 & v44);
        uint64_t v46 = *(void *)v28;
        if (v54 == *(void *)v28) {
          goto LABEL_55;
        }
      }
    }
    if (v40) {
      uint64_t v28 = v40;
    }
    goto LABEL_54;
  }
LABEL_3:
  *(void *)int v66 = &v55;
  int v9 = *(_DWORD *)(a1 + 432);
  llvm::computeDeadSymbolsAndUpdateIndirectCalls((llvm **)(a1 + 1304), (llvm::ModuleSummaryIndex *)v58, (void (*)(uint64_t, void))sub_1CCB7456C, (uint64_t)v66);
  if (v9) {
    llvm::ModuleSummaryIndex::propagateAttributes((void *)(a1 + 1304), (uint64_t)v58);
  }
  char v10 = *(unsigned char *)(a1 + 815);
  int v11 = v10;
  uint64_t v12 = v10 & 0x7F;
  if (v11 >= 0) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = *(void *)(a1 + 800);
  }
  llvm::lto::setupStatsFile(v13, (uint64_t)&v67);
  if (BYTE8(v67))
  {
    uint64_t v50 = v67;
    *(void *)&long long v67 = 0;
    *a4 = v50;
  }
  else
  {
    int v14 = (llvm **)v67;
    *(void *)&long long v67 = 0;
    sub_1CCB745EC((uint64_t)v64, a2);
    llvm::lto::LTO::runRegularLTO(a1, (uint64_t)v64, a4);
    if (v65 == v64)
    {
      (*(void (**)(void *))(v64[0] + 32))(v64);
    }
    else if (v65)
    {
      (*(void (**)(void *))(*v65 + 40))(v65);
    }
    if (!*a4)
    {
      sub_1CCB745EC((uint64_t)v62, a2);
      sub_1CCB74684((uint64_t)v60, a3);
      llvm::lto::LTO::runThinLTO(a1, (uint64_t)v62, (uint64_t)v60, (uint64_t)v58, &v54);
      *a4 = v54;
      uint64_t v54 = 0;
      if (v61 == v60)
      {
        (*(void (**)(void *))(v60[0] + 32))(v60);
      }
      else if (v61)
      {
        (*(void (**)(void))(*v61 + 40))();
      }
      if (v63 == v62)
      {
        (*(void (**)(void *))(v62[0] + 32))(v62);
      }
      else if (v63)
      {
        (*(void (**)(void))(*v63 + 40))();
      }
    }
    if (v14)
    {
      llvm::PrintStatisticsJSON(v14[17], v15);
      uint64_t v54 = 0;
      sub_1CBAD7E10((int)&v54, (llvm::ToolOutputFile::CleanupInstaller *)v14);
    }
  }
  sub_1CD69CB60((uint64_t)&v67);
  MEMORY[0x1D25D9CD0](v55, 8);
  return MEMORY[0x1D25D9CD0](v58[0], 8);
}

void llvm::lto::setupStatsFile(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (a1)
  {
    byte_1EBD0C080 = 1;
    byte_1EBD0C081 = 0;
    std::system_category();
    operator new();
  }
  *(unsigned char *)(a2 + 8) &= ~1u;
  *(void *)a2 = 0;
}

uint64_t llvm::lto::LTO::runRegularLTO@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = **(uint64_t ***)(a1 + 1224);
  char v7 = *(unsigned char *)(v4 + 711);
  int v8 = v7;
  if (v7 >= 0) {
    int v9 = (const std::string::value_type *)(v4 + 688);
  }
  else {
    int v9 = *(const std::string::value_type **)(v4 + 688);
  }
  std::string::size_type v10 = v7 & 0x7F;
  if (v8 >= 0) {
    std::string::size_type v11 = v10;
  }
  else {
    std::string::size_type v11 = *(void *)(v4 + 696);
  }
  char v12 = *(unsigned char *)(v4 + 783);
  int v13 = v12;
  if (v12 >= 0) {
    uint64_t v14 = v4 + 760;
  }
  else {
    uint64_t v14 = *(void *)(v4 + 760);
  }
  uint64_t v15 = v12 & 0x7F;
  if (v13 >= 0) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = *(void *)(v4 + 768);
  }
  llvm::lto::setupLLVMOptimizationRemarks(v6, v9, v11, v14, v16, *(unsigned __int8 *)(v4 + 736), (uint64_t)&v118, *(void *)(v4 + 744), *(void *)(v4 + 752), -1);
  if (v119)
  {
    uint64_t v24 = v118;
    uint64_t v118 = 0;
    *a3 = v24;
  }
  else
  {
    uint64_t v105 = (llvm::ToolOutputFile::CleanupInstaller **)(v4 + 1800);
    uint64_t v17 = v118;
    uint64_t v118 = 0;
    unsigned int v18 = *(llvm::ToolOutputFile::CleanupInstaller **)(v4 + 1800);
    *(void *)(v4 + 1800) = v17;
    if (v18) {
      sub_1CBAD7E10((int)v105, v18);
    }
    uint64_t v19 = *(long long **)(v4 + 1240);
    uint64_t v20 = *(long long **)(v4 + 1248);
    while (v19 != v20)
    {
      long long v21 = *v19;
      long long v22 = v19[1];
      *(void *)uint64_t v19 = 0;
      *((void *)v19 + 1) = 0;
      *(_OWORD *)std::string __p = v21;
      long long v115 = v22;
      *((void *)v19 + 2) = 0;
      *((void *)v19 + 3) = 0;
      llvm::lto::LTO::linkRegularLTO((uint64_t *)v4, (uint64_t)__p, 1, a3);
      if (__p[1])
      {
        *(void **)&long long v115 = __p[1];
        operator delete(__p[1]);
      }
      int v23 = (llvm::Module *)__p[0];
      __p[0] = 0;
      if (v23)
      {
        llvm::Module::~Module(v23);
        MEMORY[0x1D25D9CE0]();
      }
      if (*a3) {
        return sub_1CD69CB60((uint64_t)&v118);
      }
      v19 += 2;
    }
    llvm::lto::LTO::checkPartiallySplit(v4, a3);
    if (!*a3)
    {
      uint64_t v102 = a2;
      uint64_t v103 = a3;
      uint64_t v25 = *(void *)(v4 + 1224);
      unsigned int v26 = *(void **)(v4 + 1152);
      size_t v108 = (void *)(v4 + 1160);
      if (v26 != (void *)(v4 + 1160))
      {
        size_t v104 = (llvm::DataLayout *)(v25 + 272);
        uint64_t v106 = v4;
        while (!*((unsigned char *)v26 + 66))
        {
LABEL_75:
          int v65 = (void *)v26[1];
          if (v65)
          {
            do
            {
              int v66 = v65;
              int v65 = (void *)*v65;
            }
            while (v65);
          }
          else
          {
            do
            {
              int v66 = (void *)v26[2];
              BOOL v78 = *v66 == (void)v26;
              unsigned int v26 = v66;
            }
            while (!v78);
          }
          unsigned int v26 = v66;
          if (v66 == v108)
          {
            uint64_t v25 = *(void *)(v4 + 1224);
            goto LABEL_102;
          }
        }
        char v27 = *((unsigned char *)v26 + 55);
        BOOL v28 = v27 < 0;
        if (v27 >= 0) {
          uint64_t v29 = (unsigned __int8 *)(v26 + 4);
        }
        else {
          uint64_t v29 = (unsigned __int8 *)v26[4];
        }
        size_t v30 = v27 & 0x7F;
        if (v28) {
          size_t v31 = v26[5];
        }
        else {
          size_t v31 = v30;
        }
        BOOL v32 = *(uint64_t **)(*(void *)(v4 + 1224) + 112);
        size_t v33 = *((unsigned int *)v32 + 8);
        if ((v33 & 0x80000000) == 0)
        {
          if (v33 <= 1) {
            unint64_t v34 = 1;
          }
          else {
            unint64_t v34 = v33;
          }
          if (v31 < v34) {
            unint64_t v34 = v31;
          }
          if (v31 > v33) {
            size_t v31 = v34;
          }
        }
        uint64_t v35 = *((unsigned int *)v32 + 2);
        if (v35)
        {
          int v36 = 0;
          if (v31)
          {
            size_t v37 = v31;
            unsigned int v38 = v29;
            do
            {
              int v39 = *v38++;
              int v36 = 33 * v36 + v39;
              --v37;
            }
            while (v37);
          }
          unsigned int v40 = v35 - 1;
          uint64_t v41 = *v32;
          uint64_t v107 = *((unsigned int *)v32 + 2);
          uint64_t v42 = *v32 + 8 * v35 + 8;
          int v43 = 1;
          int v44 = v36;
          while (1)
          {
            uint64_t v45 = v44 & v40;
            uint64_t v46 = *(void **)(v41 + 8 * v45);
            if (v46 != (void *)-8)
            {
              if (!v46) {
                goto LABEL_59;
              }
              if (*(_DWORD *)(v42 + 4 * v45) == v36
                && v31 == *v46
                && (!v31 || !memcmp(v29, (char *)v46 + *((unsigned int *)v32 + 5), v31)))
              {
                break;
              }
            }
            int v44 = v43 + v45;
            ++v43;
          }
          if (v45 == -1)
          {
LABEL_59:
            uint64_t v47 = 0;
            char v48 = 1;
            uint64_t v4 = v106;
            goto LABEL_60;
          }
          uint64_t v4 = v106;
          if ((int)v45 == v107) {
            goto LABEL_101;
          }
          uint64_t v47 = *(void *)(*(void *)(v41 + 8 * (int)v45) + 8);
          if (!v47) {
            goto LABEL_58;
          }
          if (*(unsigned char *)(v47 + 16) == 3)
          {
            long long v67 = *(llvm::Type **)(v47 + 24);
            uint64_t v68 = sub_1CB83544C((uint64_t)v104, (uint64_t)v67);
            BOOL v70 = v69 == 1;
            char Alignment = llvm::DataLayout::getAlignment(v104, v67, 1);
            if (v70) {
            if ((((1 << Alignment) + ((unint64_t)(v68 + 7) >> 3) - 1) & -(1 << Alignment)) == v26[7])
            }
            {
              if (*((unsigned __int16 *)v26 + 32) >= 0x100u) {
                int v73 = (*((_WORD *)v26 + 32) << 16) + 0x10000;
              }
              else {
                int v73 = 0;
              }
              *(_DWORD *)(v47 + 32) = v73 | *(_DWORD *)(v47 + 32) & 0xFFC0FFFF;
              goto LABEL_75;
            }
            char v48 = 0;
LABEL_60:
            unsigned int v49 = llvm::ArrayType::get((llvm::ArrayType *)(*(void *)(v4 + 1184) + 1912), (llvm::Type *)v26[7]);
            uint64_t v50 = operator new(0x78uLL);
            char v51 = (llvm::detail::IEEEFloat *)(v50 + 8);
            v50[13] = v50[13] & 0x38000000 | 1;
            *(void *)uint64_t v50 = 0;
            *((void *)v50 + 1) = 0;
            *((void *)v50 + 2) = 0;
            *((void *)v50 + 3) = v50 + 8;
            uint64_t v52 = *(void *)(v4 + 1224);
            uint64_t v54 = llvm::ConstantAggregateZero::get(v49, v53);
            __int16 v113 = 257;
            llvm::GlobalVariable::GlobalVariable((unint64_t *)v50 + 4, v52, v49, 0, 10, (unint64_t)v54, v112, 0, 0, 0, 0);
            if (*((unsigned __int16 *)v26 + 32) >= 0x100u) {
              int v55 = (*((_WORD *)v26 + 32) << 16) + 0x10000;
            }
            else {
              int v55 = 0;
            }
            v50[16] = v55 | v50[16] & 0xFFC0FFFF;
            if ((v48 & 1) == 0)
            {
              int v64 = (llvm::Value *)(v50 + 8);
              if (*(void *)v51 != *(void *)v47) {
                int v64 = sub_1CC56C0C0((llvm *)0x31, v51, *(llvm::Constant **)v47, 0);
              }
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v47, v64, (llvm::Value *)1);
              llvm::Value::takeName((int32x2_t ****)v51, (llvm::Value *)v47);
              llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v47);
            }
            __int16 v113 = 260;
            v112[0] = (const char *)(v26 + 4);
            llvm::Value::setNameImpl(v51, v112);
            if (*((unsigned char *)v50 + 48)) {
              goto LABEL_75;
            }
            if ((*((unsigned char *)v50 + 55) & 0x10) == 0) {
              goto LABEL_99;
            }
            uint64_t v56 = ***(void ***)v51;
            uint64_t v57 = *(void *)(v56 + 152);
            uint64_t v58 = *(unsigned int *)(v56 + 168);
            if (v58)
            {
              LODWORD(v59) = (v58 - 1) & ((v51 >> 4) ^ (v51 >> 9));
              uint64_t v60 = (llvm::detail::IEEEFloat **)(v57 + 16 * v59);
              size_t v61 = *v60;
              if (*v60 == v51)
              {
LABEL_92:
                uint64_t v74 = v60[1];
                unint64_t v77 = *(void *)v74;
                unint64_t v75 = (char *)v74 + 16;
                unint64_t v76 = v77;
                if (v77 >= 5)
                {
                  BOOL v78 = *(_DWORD *)v75 == *(_DWORD *)"llvm." && v75[4] == aLlvm_1[4];
                  if (v78)
                  {
                    v50[16] |= 0x2000u;
                    int v79 = llvm::Function::lookupIntrinsicID(v75, v76);
LABEL_100:
                    v50[17] = v79;
                    goto LABEL_75;
                  }
                }
LABEL_99:
                int v79 = 0;
                v50[16] &= ~0x2000u;
                goto LABEL_100;
              }
              int v62 = 1;
              while (v61 != (llvm::detail::IEEEFloat *)-4096)
              {
                int v63 = v59 + v62++;
                uint64_t v59 = v63 & (v58 - 1);
                size_t v61 = *(llvm::detail::IEEEFloat **)(v57 + 16 * v59);
                if (v61 == v51)
                {
                  uint64_t v60 = (llvm::detail::IEEEFloat **)(v57 + 16 * v59);
                  goto LABEL_92;
                }
              }
            }
            uint64_t v60 = (llvm::detail::IEEEFloat **)(v57 + 16 * v58);
            goto LABEL_92;
          }
        }
LABEL_101:
        uint64_t v47 = 0;
LABEL_58:
        char v48 = 1;
        goto LABEL_60;
      }
LABEL_102:
      llvm::updateVCallVisibilityInModule(v25, *(unsigned __int8 *)(v4 + 442), v4 + 1776);
      uint64_t v80 = *(void *)(v4 + 952);
      if (v80
        && (uint64_t v81 = *(void *)(v4 + 1224),
            LODWORD(v112[0]) = 0,
            ((*(uint64_t (**)(uint64_t, const char **, uint64_t))(*(void *)v80 + 48))(v80, v112, v81) & 1) == 0))
      {
        char v98 = *v105;
        *uint64_t v105 = 0;
        size_t v111 = v98;
        llvm::lto::finalizeOptimizationRemarks((llvm::raw_ostream *)&v111, v103);
        size_t v111 = 0;
        if (v98)
        {
          uint64_t v99 = &v111;
LABEL_151:
          sub_1CBAD7E10((int)v99, v98);
        }
      }
      else
      {
        char v82 = v103;
        if (!*(unsigned char *)(v4 + 439))
        {
          uint64_t v83 = *(unsigned int *)(v4 + 1744);
          if (v83)
          {
            for (uint64_t i = *(uint64_t **)(v4 + 1736); !*i || *i == -8; ++i)
              ;
          }
          else
          {
            uint64_t i = *(uint64_t **)(v4 + 1736);
          }
          uint64_t v85 = *(void *)(v4 + 1736) + 8 * v83;
          if (i != (uint64_t *)v85)
          {
            uint64_t v86 = *i;
            do
            {
              if (*(unsigned char *)(v86 + 35))
              {
                char v87 = *(unsigned char *)(v86 + 31);
                if (v87 < 0)
                {
                  if (!*(void *)(v86 + 16)) {
                    goto LABEL_133;
                  }
                }
                else if (!*(unsigned char *)(v86 + 31))
                {
                  goto LABEL_133;
                }
                int v88 = *(_DWORD *)(v86 + 36);
                if (!v88 || v88 == -2)
                {
                  int v89 = v87 >= 0 ? (unsigned __int8 *)(v86 + 8) : *(unsigned __int8 **)(v86 + 8);
                  unint64_t v90 = v87 >= 0 ? *(unsigned __int8 *)(v86 + 31) : *(void *)(v86 + 16);
                  uint64_t NamedValue = llvm::Module::getNamedValue(*(void *)(v4 + 1224), v89, v90);
                  if (NamedValue)
                  {
                    int v92 = *(_DWORD *)(NamedValue + 32);
                    if ((v92 & 0xFu) - 7 >= 2)
                    {
                      if (*(unsigned char *)(NamedValue + 16))
                      {
                        if (*(unsigned char *)(NamedValue + 16) != 3 || (*(_DWORD *)(NamedValue + 20) & 0x7FFFFFF) != 0) {
                          goto LABEL_130;
                        }
                      }
                      else if ((v92 & 0x800000) != 0 || *(void *)(NamedValue + 72) != NamedValue + 72)
                      {
LABEL_130:
                        unsigned int v93 = v92 & 0xFFFFFF3F | (*(unsigned __int8 *)(v86 + 34) << 7);
                        *(_DWORD *)(NamedValue + 32) = v93;
                        if (byte_1EBD09918 && !*(_DWORD *)(v86 + 36)) {
                          *(_DWORD *)(NamedValue + 32) = v93 & 0xFFFFBF80 | 0x4007;
                        }
                        goto LABEL_133;
                      }
                    }
                  }
                }
              }
              do
              {
LABEL_133:
                uint64_t v94 = i[1];
                ++i;
                uint64_t v86 = v94;
                if (v94) {
                  BOOL v95 = v86 == -8;
                }
                else {
                  BOOL v95 = 1;
                }
              }
              while (v95);
            }
            while (i != (uint64_t *)v85);
          }
          llvm::Module::addModuleFlag(*(uint64_t ***)(v4 + 1224), (llvm::Type *)1, "LTOPostLink", 0xBuLL, (llvm::Type *)1);
          uint64_t v96 = *(void *)(v4 + 1016);
          char v82 = v103;
          if (v96)
          {
            uint64_t v97 = *(void *)(v4 + 1224);
            LODWORD(v112[0]) = 0;
            if (((*(uint64_t (**)(uint64_t, const char **, uint64_t))(*(void *)v96 + 48))(v96, v112, v97) & 1) == 0)
            {
              char v98 = *v105;
              *uint64_t v105 = 0;
              BOOL v110 = v98;
              llvm::lto::finalizeOptimizationRemarks((llvm::raw_ostream *)&v110, v103);
              BOOL v110 = 0;
              if (!v98) {
                return sub_1CD69CB60((uint64_t)&v118);
              }
              uint64_t v99 = &v110;
              goto LABEL_151;
            }
          }
        }
        if (*(unsigned char *)(v4 + 1264) && !*(unsigned char *)(v4 + 443)) {
          goto LABEL_164;
        }
        sub_1CCB745EC((uint64_t)v116, v102);
        llvm::lto::backend(v4, (uint64_t)v116, *(_DWORD *)(v4 + 1176), *(llvm::Type ***)(v4 + 1224), v4 + 1304, v82);
        if (v117 == v116)
        {
          (*(void (**)(void *))(v116[0] + 32))(v116);
        }
        else if (v117)
        {
          (*(void (**)(void))(*v117 + 40))();
        }
        if (!*v82)
        {
LABEL_164:
          char v98 = *v105;
          *uint64_t v105 = 0;
          int v109 = v98;
          llvm::lto::finalizeOptimizationRemarks((llvm::raw_ostream *)&v109, v82);
          int v109 = 0;
          if (v98)
          {
            uint64_t v99 = &v109;
            goto LABEL_151;
          }
        }
      }
    }
  }
  return sub_1CD69CB60((uint64_t)&v118);
}

uint64_t llvm::lto::LTO::runThinLTO@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v172 = *MEMORY[0x1E4F143B8];
  llvm::timeTraceProfilerBegin((uint64_t)"ThinLink", 8, (uint64_t)"", 0);
  uint64_t v11 = *(void *)(a1 + 1632);
  uint64_t v12 = *(void *)(a1 + 1640);
  if (v11 == v12) {
    goto LABEL_29;
  }
  if (*(unsigned char *)(a1 + 1704) && *(void *)(a1 + 1680) == *(void *)(a1 + 1688))
  {
    unint64_t v34 = (llvm::raw_ostream *)llvm::errs(v10);
    uint64_t v35 = (void *)*((void *)v34 + 4);
    if (*((void *)v34 + 3) - (void)v35 > 0x25uLL)
    {
      qmemcpy(v35, "warning: [ThinLTO] No module compiled\n", 38);
      *((void *)v34 + 4) += 38;
    }
    else
    {
      llvm::raw_ostream::write(v34, "warning: [ThinLTO] No module compiled\n", 0x26uLL);
    }
    goto LABEL_29;
  }
  uint64_t v13 = *(void *)(a1 + 1144);
  if (!v13) {
    goto LABEL_7;
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 48))(v13, a1 + 1304, a4))
  {
LABEL_29:
    *a5 = 0;
    uint64_t result = *(void *)off_1EC7DFC00();
    if (result)
    {
      return sub_1CD84B62C(result);
    }
    return result;
  }
  uint64_t v12 = *(void *)(a1 + 1640);
  uint64_t v11 = *(void *)(a1 + 1632);
LABEL_7:
  int v14 = -858993459 * ((unint64_t)(v12 - v11) >> 4);
  uint64_t v159 = 0;
  uint64_t v160 = 0x2000000000;
  std::string::size_type v135 = a5;
  uint64_t v132 = a2;
  uint64_t v133 = a3;
  uint64_t v131 = a4;
  if (v14)
  {
    unint64_t v119 = (4 * v14 / 3u + 1) | ((unint64_t)(4 * v14 / 3u + 1) >> 1);
    unint64_t v120 = v119 | (v119 >> 2) | ((v119 | (v119 >> 2)) >> 4);
    unint64_t v121 = v120 | (v120 >> 8) | ((v120 | (v120 >> 8)) >> 16);
    int v16 = v121 + 1;
    uint64_t v15 = sub_1CC248524(v121 + 2, 0xCuLL);
    v15[v16] = 2;
  }
  else
  {
    uint64_t v15 = 0;
    int v16 = 0;
  }
  uint64_t v158 = v15;
  LODWORD(v159) = v16;
  size_t v134 = (llvm *)(a1 + 1304);
  sub_1CD69BE88((void *)(a1 + 1304), (uint64_t)&v158);
  unsigned int v18 = *(void ***)(a1 + 1632);
  uint64_t v19 = *(unsigned __int8 ***)(a1 + 1640);
  uint64_t v136 = a1;
  int v137 = v19;
  while (v18 != (void **)v19)
  {
    long long v21 = *v18;
    size_t v20 = (size_t)v18[1];
    uint64_t v139 = v159;
    if (!v159) {
      goto LABEL_25;
    }
    int v22 = 0;
    if (v20)
    {
      int v23 = (unsigned __int8 *)v18[1];
      uint64_t v24 = (unsigned __int8 *)*v18;
      do
      {
        int v25 = *v24++;
        int v22 = 33 * v22 + v25;
        --v23;
      }
      while (v23);
    }
    unsigned int v26 = v159 - 1;
    char v27 = v158;
    uint64_t v28 = (uint64_t)&v158[v159 + 1];
    uint64_t v29 = HIDWORD(v160);
    int v30 = 1;
    int v31 = v22;
    while (1)
    {
      uint64_t v32 = v31 & v26;
      size_t v33 = (void *)v27[v32];
      if (v33 != (void *)-8)
      {
        if (!v33) {
          goto LABEL_25;
        }
        if (*(_DWORD *)(v28 + 4 * v32) == v22 && v20 == *v33 && (!v20 || !memcmp(v21, (char *)v33 + v29, v20))) {
          break;
        }
      }
      int v31 = v30 + v32;
      ++v30;
    }
    if (v32 == -1 || (int)v32 == v139) {
LABEL_25:
    }
      sub_1CD69BF44((uint64_t)&v158, (unsigned __int8 *)v21, v20);
    v18 += 10;
    uint64_t v19 = v137;
  }
  size_t v37 = v134;
  llvm::computeSyntheticCounts((uint64_t)v134, v17);
  uint64_t v38 = v136;
  int v39 = -858993459 * ((*(void *)(v136 + 1640) - *(void *)(v136 + 1632)) >> 4);
  int v155 = 0;
  uint64_t v156 = 0;
  uint64_t v157 = 0x2800000000;
  if (v39)
  {
    unint64_t v122 = (4 * v39 / 3u + 1) | ((unint64_t)(4 * v39 / 3u + 1) >> 1);
    unint64_t v123 = v122 | (v122 >> 2) | ((v122 | (v122 >> 2)) >> 4);
    unint64_t v124 = v123 | (v123 >> 8) | ((v123 | (v123 >> 8)) >> 16);
    int v125 = v124 + 1;
    std::string::size_type v126 = sub_1CC248524(v124 + 2, 0xCuLL);
    v126[v125] = 2;
    int v127 = -858993459 * ((*(void *)(v136 + 1640) - *(void *)(v136 + 1632)) >> 4);
    int v155 = v126;
    LODWORD(v156) = v125;
    std::string::size_type v152 = 0;
    uint64_t v153 = 0;
    uint64_t v154 = 0x2000000000;
    if (!v127) {
      goto LABEL_178;
    }
    unint64_t v128 = (4 * v127 / 3u + 1) | ((unint64_t)(4 * v127 / 3u + 1) >> 1) | (((4 * v127 / 3u + 1) | ((unint64_t)(4 * v127 / 3u + 1) >> 1)) >> 2);
    unint64_t v129 = v128 | (v128 >> 4) | ((v128 | (v128 >> 4)) >> 8);
    unint64_t v130 = v129 | (v129 >> 16);
    unsigned int v41 = v130 + 1;
    unsigned int v40 = (llvm *)sub_1CC248524(v130 + 2, 0xCuLL);
    *((void *)v40 + v41) = 2;
    goto LABEL_176;
  }
  unsigned int v40 = 0;
  unsigned int v41 = 0;
  LODWORD(v156) = 0;
  uint64_t v153 = 0;
  uint64_t v154 = 0x2000000000;
  uint64_t v43 = v132;
  uint64_t v42 = v133;
  uint64_t v44 = v131;
  while (1)
  {
    std::string::size_type v152 = v40;
    LODWORD(v153) = v41;
    v151[0] = 0;
    v151[1] = 0;
    void v151[2] = 0x2000000000;
    if (byte_1EBCEDE58)
    {
      uint64_t v45 = (llvm::raw_ostream *)llvm::outs(v40);
      llvm::ModuleSummaryIndex::dumpSCCs(v37, v45);
    }
    v150[0] = 0;
    v150[1] = 0;
    uint64_t v149 = (uint64_t *)v150;
    llvm::updateVCallVisibilityInIndex(v37, *(unsigned __int8 *)(v38 + 442), v38 + 1776);
    v148[0] = 0;
    v148[1] = 0;
    uint64_t v147 = (uint64_t *)v148;
    llvm::runWholeProgramDevirtOnIndex((uint64_t)v37, &v149, &v147);
    if (*(_DWORD *)(v38 + 432)) {
      llvm::ComputeCrossModuleImport((uint64_t)v37, (uint64_t)&v158, (llvm::StringMapImpl *)&v155, (uint64_t)&v152);
    }
    uint64_t v46 = *(unsigned int *)(v38 + 1744);
    if (v46)
    {
      for (uint64_t i = *(uint64_t **)(v38 + 1736); ; ++i)
      {
        BOOL v68 = !*i || *i == -8;
        if (!v68) {
          break;
        }
      }
    }
    else
    {
      uint64_t i = *(uint64_t **)(v38 + 1736);
    }
    uint64_t v48 = *(void *)(v38 + 1736) + 8 * v46;
    if (i != (uint64_t *)v48)
    {
      uint64_t v69 = *i;
      do
      {
        if (*(_DWORD *)(v69 + 36) == -2 && *(unsigned char *)(v69 + 35))
        {
          size_t v70 = *(unsigned __int8 *)(v69 + 31);
          if (*(char *)(v69 + 31) < 0)
          {
            if (*(void *)(v69 + 16))
            {
LABEL_99:
              unint64_t v71 = (int *)(v69 + 8);
              uint64_t v141 = 0;
              int v73 = *(int **)(v69 + 8);
              size_t v72 = *(void *)(v69 + 16);
              if ((v70 & 0x80u) == 0) {
                uint64_t v74 = v71;
              }
              else {
                uint64_t v74 = v73;
              }
              if ((v70 & 0x80u) == 0) {
                size_t v72 = v70;
              }
              if (v72)
              {
                int v75 = *(unsigned __int8 *)v74;
                if (v75 == 1) {
                  size_t v76 = v72 - 1;
                }
                else {
                  size_t v76 = v72;
                }
                if (v75 == 1) {
                  uint64_t v74 = (int *)((char *)v74 + 1);
                }
              }
              else
              {
                size_t v76 = 0;
              }
              long long v168 = xmmword_1CFAC4320;
              *(void *)&long long v169 = 0;
              llvm::MD5::update((int *)&v168, v74, v76);
              llvm::MD5::final((int *)&v168, (int *)&__p);
              uint64_t v141 = __p;
              if (llvm::ModuleSummaryIndex::isGUIDLive(v37, (unint64_t)__p)) {
                sub_1CD3CFB98(&v149, (unint64_t *)&v141, (uint64_t **)&v141);
              }
              goto LABEL_114;
            }
          }
          else if (*(unsigned char *)(v69 + 31))
          {
            goto LABEL_99;
          }
        }
        do
        {
LABEL_114:
          uint64_t v77 = i[1];
          ++i;
          uint64_t v69 = v77;
          if (v77) {
            BOOL v78 = v69 == -8;
          }
          else {
            BOOL v78 = 1;
          }
        }
        while (v78);
      }
      while (i != (uint64_t *)v48);
    }
    unsigned int v49 = *(void **)(v38 + 1448);
    if (v49 != (void *)(v38 + 1456))
    {
      do
      {
        char v50 = *((unsigned char *)v49 + 55);
        if (v50 >= 0) {
          char v51 = (int *)(v49 + 4);
        }
        else {
          char v51 = (int *)v49[4];
        }
        size_t v52 = v49[5];
        if (v50 >= 0) {
          size_t v52 = v50 & 0x7F;
        }
        if (v52)
        {
          int v54 = *(unsigned __int8 *)v51;
          if (v54 == 1) {
            size_t v53 = v52 - 1;
          }
          else {
            size_t v53 = v52;
          }
          if (v54 == 1) {
            char v51 = (int *)((char *)v51 + 1);
          }
        }
        else
        {
          size_t v53 = 0;
        }
        long long v168 = xmmword_1CFAC4320;
        *(void *)&long long v169 = 0;
        llvm::MD5::update((int *)&v168, v51, v53);
        llvm::MD5::final((int *)&v168, (int *)&__p);
        *(void *)&long long v168 = __p;
        sub_1CD3CFB98(&v149, (unint64_t *)&v168, (uint64_t **)&v168);
        int v55 = (void *)v49[1];
        if (v55)
        {
          do
          {
            uint64_t v56 = v55;
            int v55 = (void *)*v55;
          }
          while (v55);
        }
        else
        {
          do
          {
            uint64_t v56 = (void *)v49[2];
            BOOL v68 = *v56 == (void)v49;
            unsigned int v49 = v56;
          }
          while (!v68);
        }
        unsigned int v49 = v56;
      }
      while (v56 != (void *)(v38 + 1456));
    }
    uint64_t v57 = *(void **)(v38 + 1472);
    if (v57 != (void *)(v38 + 1480))
    {
      do
      {
        char v58 = *((unsigned char *)v57 + 55);
        if (v58 >= 0) {
          uint64_t v59 = (int *)(v57 + 4);
        }
        else {
          uint64_t v59 = (int *)v57[4];
        }
        size_t v60 = v57[5];
        if (v58 >= 0) {
          size_t v60 = v58 & 0x7F;
        }
        if (v60)
        {
          int v62 = *(unsigned __int8 *)v59;
          if (v62 == 1) {
            size_t v61 = v60 - 1;
          }
          else {
            size_t v61 = v60;
          }
          if (v62 == 1) {
            uint64_t v59 = (int *)((char *)v59 + 1);
          }
        }
        else
        {
          size_t v61 = 0;
        }
        long long v168 = xmmword_1CFAC4320;
        *(void *)&long long v169 = 0;
        llvm::MD5::update((int *)&v168, v59, v61);
        llvm::MD5::final((int *)&v168, (int *)&__p);
        *(void *)&long long v168 = __p;
        sub_1CD3CFB98(&v149, (unint64_t *)&v168, (uint64_t **)&v168);
        int v63 = (void *)v57[1];
        if (v63)
        {
          do
          {
            int v64 = v63;
            int v63 = (void *)*v63;
          }
          while (v63);
        }
        else
        {
          do
          {
            int v64 = (void *)v57[2];
            BOOL v68 = *v64 == (void)v57;
            uint64_t v57 = v64;
          }
          while (!v68);
        }
        uint64_t v57 = v64;
      }
      while (v64 != (void *)(v38 + 1480));
    }
    v146[0] = &v152;
    v146[1] = &v149;
    llvm::updateIndexWPDForExports((uint64_t)v134, (unsigned int (*)(uint64_t, void, void))sub_1CCB76E68, (uint64_t)v146, &v147);
    uint64_t v145 = v38;
    llvm::thinLTOInternalizeAndPromoteInIndex((uint64_t)v134, (uint64_t (*)(uint64_t, void, void, unint64_t))sub_1CCB76E68, (uint64_t)v146, (uint64_t (*)(uint64_t, void))sub_1CCB76FDC, (uint64_t)&v145);
    uint64_t v144 = v151;
    llvm::thinLTOResolvePrevailingInIndex(v38, (uint64_t)v134, (unsigned int (*)(uint64_t, void))sub_1CCB76FDC, (uint64_t)&v145, (void (*)(uint64_t, void, void, void))sub_1CCB77050, (uint64_t)&v144, v44);
    llvm::thinLTOPropagateFunctionAttrs((uint64_t)v134);
    llvm::generateParamAccessSummary(v134, v65);
    uint64_t v66 = *(void *)off_1EC7DFC00();
    if (v66) {
      sub_1CD84B62C(v66);
    }
    sub_1CCB745EC((uint64_t)v166, v43);
    sub_1CCB74684((uint64_t)v164, v42);
    uint64_t v67 = *(void *)(v38 + 1296);
    if (v67) {
      break;
    }
    sub_1CB920400();
LABEL_178:
    unsigned int v40 = 0;
    unsigned int v41 = 0;
LABEL_176:
    uint64_t v38 = v136;
    uint64_t v43 = v132;
    uint64_t v42 = v133;
    uint64_t v44 = v131;
    size_t v37 = v134;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v67 + 48))(&v143);
  if (v165 == v164)
  {
    (*(void (**)(void *))(v164[0] + 32))(v164);
  }
  else if (v165)
  {
    (*(void (**)(void))(*v165 + 40))();
  }
  uint64_t v140 = v38 + 1608;
  uint64_t v79 = v38 + 1656;
  if (v167 == v166)
  {
    (*(void (**)(void *))(v166[0] + 32))(v166);
  }
  else if (v167)
  {
    (*(void (**)(void))(*v167 + 40))();
  }
  if (!*(unsigned char *)(v38 + 1704)) {
    uint64_t v79 = v38 + 1608;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v143 + 32))(v143) == 1)
  {
    uint64_t v80 = -858993459 * ((*(void *)(v79 + 32) - *(void *)(v79 + 24)) >> 4);
    if (v80)
    {
      int v81 = 0;
      uint64_t v82 = 0;
      uint64_t v83 = 80 * v80;
      do
      {
        uint64_t v84 = v79;
        uint64_t v85 = *(void *)(v79 + 24) + v82;
        uint64_t v86 = v143;
        uint64_t v87 = (v81 + *(_DWORD *)(v38 + 1176));
        long long v88 = *(_OWORD *)(v85 + 64);
        long long v90 = *(_OWORD *)(v85 + 16);
        long long v89 = *(_OWORD *)(v85 + 32);
        long long v170 = *(_OWORD *)(v85 + 48);
        long long v171 = v88;
        long long v168 = v90;
        long long v169 = v89;
        uint64_t v91 = *sub_1CC915D88((llvm::StringMapImpl *)&v155, *(unsigned __int8 **)v85, *(void *)(v85 + 8)) + 8;
        int v92 = *sub_1CD663184((uint64_t)&v152, *(unsigned __int8 **)v85, *(void *)(v85 + 8)) + 1;
        unsigned int v93 = sub_1CCB72800((llvm::StringMapImpl *)v151, *(unsigned __int8 **)v85, *(void *)(v85 + 8));
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, size_t *, uint64_t, uint64_t))(*(void *)v86 + 16))(v86, v87, &v168, v91, v92, *v93 + 8, v140);
        if (*v135) {
          goto LABEL_163;
        }
        v82 += 80;
        ++v81;
        uint64_t v38 = v136;
        uint64_t v79 = v84;
      }
      while (v83 != v82);
    }
LABEL_162:
    (*(void (**)(uint64_t))(*(void *)v143 + 24))(v143);
    goto LABEL_163;
  }
  std::string __p = 0;
  unint64_t v162 = 0;
  std::string::size_type v163 = 0;
  sub_1CD4F8818((uint64_t)&__p, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v79 + 32) - *(void *)(v79 + 24)) >> 4));
  uint64_t v94 = *(void *)(v79 + 24);
  uint64_t v95 = *(void *)(v79 + 32);
  uint64_t v138 = v79;
  uint64_t v96 = v162;
  if (v94 == v95)
  {
    uint64_t v97 = v162;
  }
  else
  {
    do
    {
      uint64_t v98 = v94 + 16;
      if (v96 >= v163)
      {
        uint64_t v99 = (char *)__p;
        uint64_t v100 = (v96 - (unsigned char *)__p) >> 3;
        unint64_t v101 = v100 + 1;
        if ((unint64_t)(v100 + 1) >> 61) {
          abort();
        }
        uint64_t v102 = v163 - (unsigned char *)__p;
        if ((v163 - (unsigned char *)__p) >> 2 > v101) {
          unint64_t v101 = v102 >> 2;
        }
        if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v103 = v101;
        }
        if (v103)
        {
          if (v103 >> 61) {
            sub_1CB833614();
          }
          size_t v104 = (char *)operator new(8 * v103);
        }
        else
        {
          size_t v104 = 0;
        }
        uint64_t v105 = &v104[8 * v100];
        *(void *)uint64_t v105 = v98;
        uint64_t v97 = v105 + 8;
        if (v96 != v99)
        {
          do
          {
            uint64_t v106 = *((void *)v96 - 1);
            v96 -= 8;
            *((void *)v105 - 1) = v106;
            v105 -= 8;
          }
          while (v96 != v99);
          uint64_t v96 = (char *)__p;
        }
        std::string __p = v105;
        unint64_t v162 = v97;
        std::string::size_type v163 = &v104[8 * v103];
        if (v96) {
          operator delete(v96);
        }
      }
      else
      {
        *(void *)uint64_t v96 = v98;
        uint64_t v97 = v96 + 8;
      }
      unint64_t v162 = v97;
      v94 += 80;
      uint64_t v96 = v97;
    }
    while (v94 != v95);
  }
  llvm::lto::generateModulesOrdering((uint64_t)__p, (v97 - (unsigned char *)__p) >> 3, (uint64_t)&v141);
  size_t v108 = (int *)v141;
  uint64_t v107 = v142;
  if (v141 == v142)
  {
LABEL_158:
    if (v108)
    {
      uint64_t v142 = v108;
      operator delete(v108);
    }
    if (__p)
    {
      unint64_t v162 = (char *)__p;
      operator delete(__p);
    }
    goto LABEL_162;
  }
  while (1)
  {
    uint64_t v109 = *(void *)(v138 + 24) + 80 * *v108;
    uint64_t v110 = v143;
    uint64_t v111 = (*(_DWORD *)(v136 + 1176) + *v108);
    long long v112 = *(_OWORD *)(v109 + 64);
    long long v114 = *(_OWORD *)(v109 + 16);
    long long v113 = *(_OWORD *)(v109 + 32);
    long long v170 = *(_OWORD *)(v109 + 48);
    long long v171 = v112;
    long long v168 = v114;
    long long v169 = v113;
    uint64_t v115 = *sub_1CC915D88((llvm::StringMapImpl *)&v155, *(unsigned __int8 **)v109, *(void *)(v109 + 8)) + 8;
    uint64_t v116 = *sub_1CD663184((uint64_t)&v152, *(unsigned __int8 **)v109, *(void *)(v109 + 8)) + 1;
    int v117 = sub_1CCB72800((llvm::StringMapImpl *)v151, *(unsigned __int8 **)v109, *(void *)(v109 + 8));
    (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, size_t *, uint64_t, uint64_t))(*(void *)v110 + 16))(v110, v111, &v168, v115, v116, *v117 + 8, v140);
    if (*v135) {
      break;
    }
    if (++v108 == v107)
    {
      size_t v108 = (int *)v141;
      goto LABEL_158;
    }
  }
  if (v141)
  {
    uint64_t v142 = (int *)v141;
    operator delete(v141);
  }
  if (__p)
  {
    unint64_t v162 = (char *)__p;
    operator delete(__p);
  }
LABEL_163:
  uint64_t v118 = v143;
  uint64_t v143 = 0;
  if (v118) {
    (*(void (**)(uint64_t))(*(void *)v118 + 8))(v118);
  }
  sub_1CCB76E04((uint64_t)&v147, v148[0]);
  sub_1CB833A08((uint64_t)&v149, v150[0]);
  sub_1CCB76D80((uint64_t)v151);
  sub_1CCB76CFC((uint64_t)&v152);
  sub_1CCB76C74((uint64_t)&v155);
  return sub_1CD69CBE0((uint64_t)&v158);
}

char **llvm::lto::LTO::getRuntimeLibcallSymbols(llvm::lto::LTO *this)
{
  return off_1EA615380;
}

void llvm::lto::getThinLTOOutputFile(const void **a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, void *a4@<X8>)
{
  v54[16] = *MEMORY[0x1E4F143B8];
  char v7 = *(unsigned char *)(a2 + 23);
  int v8 = v7;
  size_t v9 = *(void *)(a2 + 8);
  size_t v10 = v7 & 0x7F;
  if (v8 >= 0) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = *(void *)(a2 + 8);
  }
  if (v11) {
    goto LABEL_8;
  }
  char v12 = *((unsigned char *)a3 + 23);
  int v13 = v12;
  int v14 = (void *)(v12 & 0x7F);
  if (v13 < 0) {
    int v14 = a3[1];
  }
  if (v14)
  {
LABEL_8:
    char v15 = *((unsigned char *)a1 + 23);
    BOOL v16 = v15 < 0;
    if (v15 >= 0) {
      uint64_t v17 = a1;
    }
    else {
      uint64_t v17 = *a1;
    }
    size_t v18 = v15 & 0x7F;
    if (v16) {
      size_t v19 = (size_t)a1[1];
    }
    else {
      size_t v19 = v18;
    }
    __src = v54;
    *(_OWORD *)__leuint64_t n = xmmword_1CFAC3020;
    if (v19 >= 0x81) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    size_t v20 = 0;
    if (v19)
    {
      memcpy(v54, v17, v19);
      size_t v20 = __len[0];
      LOBYTE(v8) = *(unsigned char *)(a2 + 23);
      size_t v9 = *(void *)(a2 + 8);
      size_t v10 = v8 & 0x7F;
    }
    __len[0] = v20 + v19;
    if ((v8 & 0x80u) == 0) {
      long long v21 = (unsigned __int8 *)a2;
    }
    else {
      long long v21 = *(unsigned __int8 **)a2;
    }
    if ((v8 & 0x80u) == 0) {
      size_t v22 = v10;
    }
    else {
      size_t v22 = v9;
    }
    char v23 = *((unsigned char *)a3 + 23);
    BOOL v24 = v23 < 0;
    if (v23 >= 0) {
      int v25 = a3;
    }
    else {
      int v25 = *a3;
    }
    uint64_t v26 = v23 & 0x7F;
    if (v24) {
      uint64_t v27 = (uint64_t)a3[1];
    }
    else {
      uint64_t v27 = v26;
    }
    llvm::sys::path::replace_path_prefix((const void **)&__src, v21, v22, v25, v27, 0);
    uint64_t v28 = __src;
    std::string::size_type v29 = __len[0];
    unint64_t v30 = sub_1CD0E3AC0((unsigned __int8 *)__src, __len[0], 0);
    if (v29 >= v30) {
      std::string::size_type v29 = v30;
    }
    if (v30 == -1) {
      int v31 = 0;
    }
    else {
      int v31 = v28;
    }
    if (v30 != -1)
    {
      if (v29)
      {
        __int16 v50 = 261;
        v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
        v49.__r_.__value_.__l.__size_ = v29;
        int v39 = (llvm *)llvm::sys::fs::create_directories(&v49, 1, 504);
        *(void *)&v51.__val_ = v39;
        v51.__cat_ = v40;
        if (v39)
        {
          unsigned int v41 = (llvm::raw_ostream *)llvm::errs(v39);
          uint64_t v42 = v41;
          uint64_t v43 = (void *)*((void *)v41 + 4);
          if (*((void *)v41 + 3) - (void)v43 > 0x24uLL)
          {
            qmemcpy(v43, "warning: could not create directory '", 37);
            uint64_t v44 = (void *)(*((void *)v41 + 4) + 37);
            *((void *)v42 + 4) = v44;
          }
          else
          {
            llvm::raw_ostream::write(v41, "warning: could not create directory '", 0x25uLL);
            uint64_t v44 = (void *)*((void *)v42 + 4);
          }
          if (v29 <= *((void *)v42 + 3) - (void)v44)
          {
            memcpy(v44, v31, v29);
            std::string::size_type v45 = *((void *)v42 + 4) + v29;
            *((void *)v42 + 4) = v45;
          }
          else
          {
            llvm::raw_ostream::write(v42, (const char *)v31, v29);
            std::string::size_type v45 = *((void *)v42 + 4);
          }
          if (*((void *)v42 + 3) - v45 > 2)
          {
            *(unsigned char *)(v45 + 2) = 32;
            *(_WORD *)std::string::size_type v45 = 14887;
            *((void *)v42 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v42, "': ", 3uLL);
          }
          std::error_code::message(&v49, &v51);
          uint64_t v46 = (v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v49
              : (std::string *)v49.__r_.__value_.__r.__words[0];
          size_t v47 = (v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? *((unsigned char *)&v49.__r_.__value_.__s + 23) & 0x7F
              : v49.__r_.__value_.__l.__size_;
          llvm::raw_ostream::write(v42, (const char *)v46, v47);
          uint64_t v48 = (unsigned char *)*((void *)v42 + 4);
          if ((unint64_t)v48 >= *((void *)v42 + 3))
          {
            llvm::raw_ostream::write(v42, 10);
          }
          else
          {
            *((void *)v42 + 4) = v48 + 1;
            *uint64_t v48 = 10;
          }
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v49.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    size_t v32 = __len[0];
    if (__len[0] >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    size_t v33 = __src;
    if (__len[0] >= 0x17)
    {
      size_t v34 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len[0] | 7) != 0x17) {
        size_t v34 = __len[0] | 7;
      }
      size_t v35 = v34 + 1;
      int v36 = operator new(v34 + 1);
      a4[1] = v32;
      a4[2] = v35 | 0x8000000000000000;
      *a4 = v36;
      a4 = v36;
    }
    else
    {
      *((unsigned char *)a4 + 23) = __len[0];
      if (!v32)
      {
LABEL_44:
        *((unsigned char *)a4 + v32) = 0;
        if (__src != v54) {
          free(__src);
        }
        return;
      }
    }
    memmove(a4, v33, v32);
    goto LABEL_44;
  }
  if (*((char *)a1 + 23) < 0)
  {
    size_t v37 = *a1;
    unint64_t v38 = (unint64_t)a1[1];
    sub_1CB8BDF7C((uint64_t)a4, v37, v38);
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)a1;
    a4[2] = a1[2];
  }
}

void llvm::lto::createWriteIndexesThinBackend(uint64_t a1@<X0>, long long *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v14, *(const void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)int v14 = *(_OWORD *)a1;
    uint64_t v15 = *(void *)(a1 + 16);
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_1CB8BDF7C((uint64_t)&__p, *(const void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __p = *a2;
    uint64_t v17 = *((void *)a2 + 2);
  }
  LOBYTE(v18) = a3;
  *((void *)&v18 + 1) = a4;
  sub_1CCB75D8C((uint64_t)v19, a5);
  size_t v11 = (char *)operator new(0x68uLL);
  char v12 = v11;
  *(void *)size_t v11 = &unk_1F262C860;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)v14;
  *((void *)v11 + 3) = v15;
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  *((_OWORD *)v11 + 2) = __p;
  *((void *)v11 + 6) = v17;
  long long __p = 0uLL;
  uint64_t v17 = 0;
  *(_OWORD *)(v11 + 56) = v18;
  if (!v20)
  {
    *((void *)v11 + 12) = 0;
    goto LABEL_11;
  }
  if (v20 != v19)
  {
    *((void *)v11 + 12) = v20;
    size_t v20 = 0;
LABEL_11:
    *(void *)(a6 + 24) = v11;
    goto LABEL_12;
  }
  *((void *)v11 + 12) = v11 + 72;
  (*(void (**)(void *))(v19[0] + 24))(v19);
  int v13 = v20;
  *(void *)(a6 + 24) = v12;
  if (v13 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
  }
  else if (v13)
  {
    (*(void (**)(void *))(*v13 + 40))(v13);
  }
LABEL_12:
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
}

unint64_t llvm::lto::generateModulesOrdering@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v10[0] = a1;
  v10[1] = a2;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  sub_1CCB77198((_DWORD *)a3, 0, (int)a2, (int)a2);
  unint64_t v4 = *(void *)a3;
  uint64_t v5 = *(int **)(a3 + 8);
  unint64_t v6 = 126 - 2 * __clz(((uint64_t)v5 - *(void *)a3) >> 2);
  BOOL v7 = v5 == *(int **)a3;
  size_t v11 = v10;
  if (v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v6;
  }
  return sub_1CCB7720C(v4, v5, &v11, v8, 1);
}

uint64_t sub_1CCB72384(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80);
  if (v1 != *(void *)(result + 88))
  {
    uint64_t v2 = *(void *)(result + 104);
    uint64_t v3 = HIDWORD(*(void *)v1);
    *(void *)uint64_t result = *(void *)(v2 + 16) + *(void *)v1;
    *(void *)(result + 8) = v3;
    unint64_t v4 = *(void *)(v1 + 8);
    *(void *)(result + 16) = *(void *)(v2 + 16) + v4;
    *(void *)(result + 24) = HIDWORD(v4);
    *(_DWORD *)(result + 32) = *(_DWORD *)(v1 + 16);
    int v5 = *(_DWORD *)(v1 + 20);
    *(_DWORD *)(result + 36) = v5;
    if ((v5 & 4) != 0)
    {
      uint64_t v8 = *(void *)(result + 96);
      *(_DWORD *)(result + 40) = *(_DWORD *)v8;
      *(_DWORD *)(result + 44) = *(_DWORD *)(v8 + 4);
      unint64_t v9 = *(void *)(v8 + 8);
      *(void *)(result + 48) = *(void *)(v2 + 16) + v9;
      *(void *)(result + 56) = HIDWORD(v9);
      unint64_t v10 = *(void *)(v8 + 16);
      unint64_t v6 = HIDWORD(v10);
      BOOL v7 = (const char *)(*(void *)(v2 + 16) + v10);
    }
    else
    {
      unint64_t v6 = 0;
      BOOL v7 = "";
    }
    *(void *)(result + 64) = v7;
    *(void *)(result + 72) = v6;
  }
  return result;
}

void sub_1CCB72420(llvm::LLVMContext *a1)
{
}

uint64_t sub_1CCB72514(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1CCB725B0()
{
}

void sub_1CCB725C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) + 24);
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 48))(v1);
  }
  else
  {
    sub_1CB920400();
    sub_1CCB72610(v2);
  }
}

void sub_1CCB72610(char *a1)
{
  if (a1)
  {
    sub_1CCB72610(*(void *)a1);
    sub_1CCB72610(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void sub_1CCB7266C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    unint64_t v10 = *(uint64_t **)(a1 + 16);
    size_t v11 = &v10[v2];
    do
    {
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v13 = *v10;
      if (*v10 == *(void *)(v12 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        unint64_t v15 = *(void *)a1;
      }
      else
      {
        uint64_t v14 = (((unint64_t)v10 - v12) >> 10) & 0x1FFFFFF;
        if (v14 >= 0x1E) {
          LOBYTE(v14) = 30;
        }
        unint64_t v15 = v13 + (4096 << v14);
      }
      for (unint64_t i = ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 32; i <= v15; i += 32)
      {
        if (*(char *)(i - 9) < 0) {
          operator delete(*(void **)(i - 32));
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 72);
  if (v3)
  {
    uint64_t v17 = *(void **)(a1 + 64);
    long long v18 = &v17[2 * v3];
    do
    {
      unint64_t v19 = *v17 + v17[1];
      for (unint64_t j = ((*v17 + 7) & 0xFFFFFFFFFFFFFFF8) + 32; j <= v19; j += 32)
      {
        if (*(char *)(j - 9) < 0) {
          operator delete(*(void **)(j - 32));
        }
      }
      v17 += 2;
    }
    while (v17 != v18);
    uint64_t v21 = *(unsigned int *)(a1 + 72);
    if (v21)
    {
      size_t v22 = *(uint64_t **)(a1 + 64);
      uint64_t v23 = 16 * v21;
      do
      {
        uint64_t v24 = *v22;
        v22 += 2;
        MEMORY[0x1D25D9CD0](v24, 8);
        v23 -= 16;
      }
      while (v23);
    }
  }
  *(_DWORD *)(a1 + 72) = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 80) = 0;
    int v5 = *(void **)(a1 + 16);
    uint64_t v6 = *v5 + 4096;
    *(void *)a1 = *v5;
    *(void *)(a1 + 8) = v6;
    if (v4 != 1)
    {
      BOOL v7 = v5 + 1;
      uint64_t v8 = 8 * v4 - 8;
      do
      {
        uint64_t v9 = *v7++;
        MEMORY[0x1D25D9CD0](v9, 8);
        v8 -= 8;
      }
      while (v8);
    }
    *(_DWORD *)(a1 + 24) = 1;
  }
}

void *sub_1CCB72800(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n)
{
  unsigned int v5 = *((_DWORD *)a1 + 2);
  if (!v5)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    int v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v25[16] = 2;
    *(void *)a1 = v25;
    unsigned int v5 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  int v6 = 0;
  if (__n)
  {
    size_t v7 = __n;
    uint64_t v8 = a2;
    do
    {
      int v9 = *v8++;
      int v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  uint64_t v10 = *(void *)a1;
  unsigned int v11 = v5 - 1;
  uint64_t v12 = *(void *)a1 + 8 * v5 + 8;
  int v13 = -1;
  int v14 = 1;
  int v15 = v6;
  while (1)
  {
    uint64_t v16 = v15 & v11;
    uint64_t v17 = *(void **)(v10 + 8 * v16);
    if (!v17) {
      break;
    }
    if (v17 == (void *)-8)
    {
      if (v13 == -1) {
        int v13 = v15 & v11;
      }
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6 {
           && __n == *v17
    }
           && (!__n || !memcmp(a2, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_20;
    }
    int v15 = v14 + v16;
    ++v14;
  }
  uint64_t v18 = v13;
  if (v13 == -1)
  {
    uint64_t v18 = v16;
    uint64_t v16 = v16;
  }
  else
  {
    uint64_t v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  uint64_t v17 = *(void **)(v10 + 8 * v16);
LABEL_20:
  unint64_t i = (void *)(v10 + 8 * v16);
  if (v17 == (void *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v17)
  {
    return i;
  }
  size_t v20 = operator new(__n + 33, (std::align_val_t)8uLL);
  uint64_t v21 = v20;
  size_t v22 = (char *)(v20 + 4);
  if (__n) {
    memcpy(v20 + 4, a2, __n);
  }
  v22[__n] = 0;
  v21[3] = 0;
  v21[2] = 0;
  *uint64_t v21 = __n;
  v21[1] = v21 + 2;
  *unint64_t i = v21;
  ++*((_DWORD *)a1 + 3);
  for (unint64_t i = (void *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v16));
        !*i || *i == -8;
  return i;
}

size_t ***sub_1CCB72A0C(size_t ***result, size_t ***a2, uint64_t a3, char a4)
{
  size_t v230 = result;
LABEL_2:
  size_t v7 = a2 - 1;
  char v229 = a2;
  uint64_t v222 = a2 - 3;
  char v223 = a2 - 2;
  uint64_t v8 = v230;
  int64_t v224 = a2 - 1;
  while (1)
  {
    int v9 = v8;
    uint64_t v10 = (char *)v229 - (char *)v8;
    uint64_t v11 = v229 - v8;
    size_t v230 = v9;
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v97 = *(v229 - 1);
          size_t v98 = **v97;
          uint64_t v99 = *v9;
          uint64_t v100 = **v9;
          size_t v101 = *v100;
          if (*v100 >= v98) {
            size_t v102 = **v97;
          }
          else {
            size_t v102 = *v100;
          }
          if (v102 && (uint64_t result = (size_t ***)memcmp(*v97 + 6, v100 + 6, v102), result))
          {
            if ((result & 0x80000000) == 0) {
              return result;
            }
          }
          else if (v98 >= v101)
          {
            return result;
          }
          *int v9 = v97;
          *(v229 - 1) = v99;
          return result;
        case 3:
          return sub_1CCB738B4(v9, v9 + 1, v7);
        case 4:
          return sub_1CCB73E00(v9, v9 + 1, v9 + 2, v7);
        case 5:
          unint64_t v103 = v9 + 2;
          size_t v104 = v9 + 3;
          uint64_t result = sub_1CCB73E00(v9, v9 + 1, v9 + 2, v9 + 3);
          uint64_t v105 = *(v229 - 1);
          size_t v106 = **v105;
          uint64_t v107 = v9[3];
          size_t v108 = **v107;
          if (v108 >= v106) {
            size_t v109 = **v105;
          }
          else {
            size_t v109 = **v107;
          }
          if (v109 && (uint64_t result = (size_t ***)memcmp(*v105 + 6, *v107 + 6, v109), result))
          {
            uint64_t v110 = v229;
            if ((result & 0x80000000) == 0) {
              return result;
            }
          }
          else
          {
            uint64_t v110 = v229;
            if (v106 >= v108) {
              return result;
            }
          }
          *size_t v104 = v105;
          *(v110 - 1) = v107;
          uint64_t v191 = *v104;
          uint64_t v192 = **v104;
          size_t v193 = *v192;
          uint64_t v194 = *v103;
          uint64_t v195 = **v103;
          size_t v196 = *v195;
          if (*v195 >= *v192) {
            size_t v197 = *v192;
          }
          else {
            size_t v197 = *v195;
          }
          if (v197 && (uint64_t result = (size_t ***)memcmp(v192 + 6, v195 + 6, v197), result))
          {
            if ((result & 0x80000000) == 0) {
              return result;
            }
          }
          else if (v193 >= v196)
          {
            return result;
          }
          void *v103 = v191;
          *size_t v104 = v194;
          size_t v213 = **v191;
          BOOL v214 = v9[1];
          size_t v215 = **v214;
          if (v215 >= v213) {
            size_t v216 = **v191;
          }
          else {
            size_t v216 = **v214;
          }
          if (v216 && (uint64_t result = (size_t ***)memcmp(*v191 + 6, *v214 + 6, v216), result))
          {
            if ((result & 0x80000000) == 0) {
              return result;
            }
          }
          else if (v213 >= v215)
          {
            return result;
          }
          v9[1] = v191;
          void v9[2] = v214;
          size_t v217 = **v191;
          long long v218 = *v9;
          int v219 = **v9;
          size_t v220 = *v219;
          if (*v219 >= v217) {
            size_t v221 = **v191;
          }
          else {
            size_t v221 = *v219;
          }
          if (v221 && (uint64_t result = (size_t ***)memcmp(*v191 + 6, v219 + 6, v221), result))
          {
            if ((result & 0x80000000) == 0) {
              return result;
            }
          }
          else if (v217 >= v220)
          {
            return result;
          }
          *int v9 = v191;
          v9[1] = v218;
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v10 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v9 != v229)
      {
        int64_t v129 = (unint64_t)(v11 - 2) >> 1;
        int64_t v130 = v129;
        do
        {
          int64_t v131 = v130;
          if (v129 >= v130)
          {
            uint64_t v132 = (2 * v130) | 1;
            uint64_t v133 = v230;
            size_t v134 = &v230[v132];
            if (2 * v130 + 2 < v11)
            {
              std::string::size_type v135 = **v134;
              size_t v136 = *v135;
              int v137 = *v134[1];
              size_t v138 = *v137;
              if (*v137 >= *v135) {
                size_t v139 = *v135;
              }
              else {
                size_t v139 = *v137;
              }
              if (v139 && (uint64_t result = (size_t ***)memcmp(v135 + 6, v137 + 6, v139), result))
              {
                int v140 = ((int)result >> 31) | 1;
              }
              else
              {
                if (v136 < v138) {
                  int v140 = -1;
                }
                else {
                  int v140 = 1;
                }
                if (v136 == v138) {
                  int v140 = 0;
                }
              }
              if (v140 == -1)
              {
                ++v134;
                uint64_t v132 = 2 * v131 + 2;
              }
              uint64_t v133 = v230;
            }
            int64_t v227 = v131;
            uint64_t v141 = &v133[v131];
            uint64_t v142 = *v134;
            uint64_t v143 = **v134;
            size_t v144 = *v143;
            uint64_t v145 = *v141;
            uint64_t v146 = **v141;
            size_t v147 = *v146;
            if (*v146 >= *v143) {
              size_t v148 = *v143;
            }
            else {
              size_t v148 = *v146;
            }
            if (v148 && (uint64_t result = (size_t ***)memcmp(v143 + 6, v146 + 6, v148), result))
            {
              if ((result & 0x80000000) == 0) {
                goto LABEL_245;
              }
            }
            else if (v144 >= v147)
            {
              do
              {
LABEL_245:
                uint64_t v149 = v134;
                void *v141 = v142;
                if (v129 < v132) {
                  break;
                }
                size_t v134 = &v230[(2 * v132) | 1];
                if (2 * v132 + 2 < v11)
                {
                  int64_t v150 = v129;
                  int v151 = **v134;
                  size_t v152 = *v151;
                  uint64_t v153 = *v134[1];
                  unint64_t v154 = *v153;
                  size_t v155 = *v153 >= *v151 ? *v151 : *v153;
                  if (v155 && (uint64_t result = (size_t ***)memcmp(v151 + 6, v153 + 6, v155), result))
                  {
                    int v156 = ((int)result >> 31) | 1;
                  }
                  else
                  {
                    if (v152 < v154) {
                      int v156 = -1;
                    }
                    else {
                      int v156 = 1;
                    }
                    if (v152 == v154) {
                      int v156 = 0;
                    }
                  }
                  int64_t v129 = v150;
                  if (v156 == -1)
                  {
                    ++v134;
                    uint64_t v132 = 2 * v132 + 2;
                  }
                  else
                  {
                    uint64_t v132 = (2 * v132) | 1;
                  }
                }
                else
                {
                  uint64_t v132 = (2 * v132) | 1;
                }
                uint64_t v142 = *v134;
                uint64_t v157 = **v134;
                size_t v158 = *v157;
                size_t v159 = **v145;
                size_t v160 = v159 >= *v157 ? *v157 : **v145;
                if (v160 && (uint64_t result = (size_t ***)memcmp(v157 + 6, *v145 + 6, v160), result))
                {
                  int v161 = ((int)result >> 31) | 1;
                }
                else if (v158 == v159)
                {
                  int v161 = 0;
                }
                else
                {
                  if (v158 < v159) {
                    break;
                  }
                  int v161 = 1;
                }
                uint64_t v141 = v149;
              }
              while (v161 != -1);
              uint64_t *v149 = v145;
              int64_t v131 = v227;
            }
          }
          int64_t v130 = v131 - 1;
        }
        while (v131);
        do
        {
          uint64_t v162 = 0;
          std::string::size_type v163 = v230;
          int v228 = *v230;
          do
          {
            int v164 = &v163[v162 + 1];
            uint64_t v165 = (2 * v162) | 1;
            uint64_t v166 = 2 * v162 + 2;
            if (v166 < v11)
            {
              std::string::size_type v167 = **v164;
              size_t v168 = *v167;
              long long v169 = *v164[1];
              size_t v170 = *v169;
              if (*v169 >= *v167) {
                size_t v171 = *v167;
              }
              else {
                size_t v171 = *v169;
              }
              if (v171 && (uint64_t result = (size_t ***)memcmp(v167 + 6, v169 + 6, v171), result))
              {
                int v172 = ((int)result >> 31) | 1;
              }
              else
              {
                if (v168 < v170) {
                  int v172 = -1;
                }
                else {
                  int v172 = 1;
                }
                if (v168 == v170) {
                  int v172 = 0;
                }
              }
              if (v172 == -1)
              {
                ++v164;
                uint64_t v165 = v166;
              }
            }
            char *v163 = *v164;
            std::string::size_type v163 = v164;
            uint64_t v162 = v165;
          }
          while (v165 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
          uint64_t v173 = v229 - 1;
          BOOL v5 = v164 == --v229;
          if (v5)
          {
            *int v164 = v228;
          }
          else
          {
            *int v164 = *v173;
            *uint64_t v173 = v228;
            uint64_t v174 = (char *)v164 - (char *)v230 + 8;
            if (v174 >= 9)
            {
              unint64_t v175 = (((unint64_t)v174 >> 3) - 2) >> 1;
              uint64_t v176 = &v230[v175];
              uint64_t v177 = *v176;
              unint64_t v178 = **v176;
              size_t v179 = *v178;
              int v180 = *v164;
              uint64_t v181 = **v164;
              size_t v182 = *v181;
              if (*v181 >= *v178) {
                size_t v183 = *v178;
              }
              else {
                size_t v183 = *v181;
              }
              if (v183 && (uint64_t result = (size_t ***)memcmp(v178 + 6, v181 + 6, v183), result))
              {
                if ((result & 0x80000000) != 0)
                {
                  do
                  {
LABEL_302:
                    uint64_t v184 = v176;
                    *int v164 = v177;
                    if (!v175) {
                      break;
                    }
                    unint64_t v175 = (v175 - 1) >> 1;
                    uint64_t v176 = &v230[v175];
                    uint64_t v177 = *v176;
                    uint64_t v185 = **v176;
                    size_t v186 = *v185;
                    size_t v187 = **v180;
                    size_t v188 = v187 >= *v185 ? *v185 : **v180;
                    if (v188 && (uint64_t result = (size_t ***)memcmp(v185 + 6, *v180 + 6, v188), result))
                    {
                      int v189 = ((int)result >> 31) | 1;
                    }
                    else
                    {
                      if (v186 >= v187) {
                        break;
                      }
                      int v189 = -1;
                    }
                    int v164 = v184;
                  }
                  while (v189 == -1);
                  const char *v184 = v180;
                }
              }
              else if (v179 < v182)
              {
                goto LABEL_302;
              }
            }
          }
        }
        while (v11-- > 2);
      }
      return result;
    }
    unint64_t v12 = (unint64_t)v11 >> 1;
    int v13 = &v9[(unint64_t)v11 >> 1];
    if ((unint64_t)v10 < 0x401)
    {
      uint64_t result = sub_1CCB738B4(v13, v9, v7);
    }
    else
    {
      sub_1CCB738B4(v9, v13, v7);
      sub_1CCB738B4(v9 + 1, v13 - 1, v223);
      sub_1CCB738B4(v9 + 2, &v9[v12 + 1], v222);
      uint64_t result = sub_1CCB738B4(v13 - 1, v13, &v9[v12 + 1]);
      int v14 = *v9;
      *int v9 = *v13;
      *int v13 = v14;
    }
    uint64_t v15 = a3 - 1;
    if (a4)
    {
      uint64_t v16 = *v9;
      uint64_t v17 = **v9;
      size_t v18 = *v17;
LABEL_39:
      int v31 = v17 + 6;
      uint64_t v32 = 8;
      do
      {
        uint64_t v33 = v32;
        size_t v34 = *(size_t ***)((char *)v9 + v32);
        size_t v35 = **v34;
        if (v18 >= v35) {
          size_t v36 = **v34;
        }
        else {
          size_t v36 = v18;
        }
        if (v36 && (int v37 = memcmp(*v34 + 6, v31, v36)) != 0)
        {
          int v38 = (v37 >> 31) | 1;
        }
        else
        {
          if (v35 >= v18) {
            break;
          }
          int v38 = -1;
        }
        uint64_t v32 = v33 + 8;
      }
      while (v38 == -1);
      uint64_t v226 = v15;
      unint64_t v39 = (unint64_t)v9 + v33;
      unsigned int v40 = v7;
      if (v33 == 8)
      {
        while (v39 < (unint64_t)(v7 + 1))
        {
          unsigned int v41 = v7;
          size_t v47 = **v7;
          size_t v48 = *v47;
          if (v18 >= *v47) {
            size_t v49 = *v47;
          }
          else {
            size_t v49 = v18;
          }
          if (v49 && (int v50 = memcmp(v47 + 6, v31, v49)) != 0)
          {
            int v51 = (v50 >> 31) | 1;
          }
          else if (v48 == v18)
          {
            int v51 = 0;
          }
          else
          {
            if (v48 < v18) {
              goto LABEL_76;
            }
            int v51 = 1;
          }
          --v7;
          if (v51 == -1) {
            goto LABEL_76;
          }
        }
        unsigned int v41 = v7 + 1;
      }
      else
      {
        do
        {
          unsigned int v41 = v40;
          uint64_t v42 = **v40;
          size_t v43 = *v42;
          if (v18 >= *v42) {
            size_t v44 = *v42;
          }
          else {
            size_t v44 = v18;
          }
          if (v44 && (int v45 = memcmp(v42 + 6, v31, v44)) != 0)
          {
            int v46 = (v45 >> 31) | 1;
          }
          else if (v43 == v18)
          {
            int v46 = 0;
          }
          else
          {
            if (v43 < v18) {
              break;
            }
            int v46 = 1;
          }
          unsigned int v40 = v41 - 1;
        }
        while (v46 != -1);
      }
LABEL_76:
      if (v39 >= (unint64_t)v41)
      {
        uint64_t v8 = (size_t ***)v39;
      }
      else
      {
        size_t v52 = *v41;
        uint64_t v8 = (size_t ***)v39;
        size_t v53 = v41;
        do
        {
          *uint64_t v8 = v52;
          llvm::Type *v53 = v34;
          int v55 = *v16 + 6;
          size_t v54 = **v16;
          uint64_t v56 = v8 + 1;
          do
          {
            uint64_t v8 = v56;
            size_t v34 = *v56;
            uint64_t v57 = **v56;
            size_t v58 = *v57;
            if (v54 >= *v57) {
              size_t v59 = *v57;
            }
            else {
              size_t v59 = v54;
            }
            if (v59 && (int v60 = memcmp(v57 + 6, v55, v59)) != 0)
            {
              int v61 = (v60 >> 31) | 1;
            }
            else
            {
              if (v58 >= v54) {
                break;
              }
              int v61 = -1;
            }
            uint64_t v56 = v8 + 1;
          }
          while (v61 == -1);
          int v62 = v53 - 1;
          do
          {
            size_t v53 = v62;
            size_t v52 = *v62;
            int v63 = **v62;
            size_t v64 = *v63;
            if (v54 >= *v63) {
              size_t v65 = *v63;
            }
            else {
              size_t v65 = v54;
            }
            if (v65 && (int v66 = memcmp(v63 + 6, v55, v65)) != 0)
            {
              int v67 = (v66 >> 31) | 1;
            }
            else if (v64 == v54)
            {
              int v67 = 0;
            }
            else
            {
              if (v64 < v54) {
                break;
              }
              int v67 = 1;
            }
            int v62 = v53 - 1;
          }
          while (v67 != -1);
        }
        while (v8 < v53);
      }
      BOOL v68 = v8 - 1;
      if (v8 - 1 != v230) {
        void *v230 = *v68;
      }
      *BOOL v68 = v16;
      BOOL v4 = v39 >= (unint64_t)v41;
      a3 = v226;
      size_t v7 = v224;
      if (!v4) {
        goto LABEL_109;
      }
      BOOL v69 = sub_1CCB73A58(v230, v8 - 1);
      uint64_t result = (size_t ***)sub_1CCB73A58(v8, v229);
      if (result)
      {
        a2 = v8 - 1;
        if (v69) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v69)
      {
LABEL_109:
        uint64_t result = (size_t ***)sub_1CCB72A0C(v230, v8 - 1, v226, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      uint64_t v16 = *v9;
      unint64_t v19 = **(v9 - 1);
      size_t v20 = *v19;
      uint64_t v17 = **v9;
      size_t v18 = *v17;
      if (*v17 >= *v19) {
        size_t v21 = *v19;
      }
      else {
        size_t v21 = *v17;
      }
      if (v21 && (uint64_t result = (size_t ***)memcmp(v19 + 6, v17 + 6, v21), result))
      {
        if ((result & 0x80000000) != 0) {
          goto LABEL_39;
        }
      }
      else if (v20 < v18)
      {
        goto LABEL_39;
      }
      size_t v22 = **v7;
      size_t v23 = *v22;
      if (*v22 >= v18) {
        size_t v24 = v18;
      }
      else {
        size_t v24 = *v22;
      }
      if (v24 && (uint64_t result = (size_t ***)memcmp(v17 + 6, v22 + 6, v24), result))
      {
        if ((result & 0x80000000) == 0) {
          goto LABEL_24;
        }
      }
      else if (v18 >= v23)
      {
LABEL_24:
        int v25 = v9 + 1;
        uint64_t v26 = v229;
        do
        {
          uint64_t v8 = v25;
          if (v25 >= v229) {
            break;
          }
          uint64_t v27 = **v25;
          size_t v28 = *v27;
          size_t v29 = *v27 >= v18 ? v18 : *v27;
          if (v29 && (uint64_t result = (size_t ***)memcmp(v17 + 6, v27 + 6, v29), result))
          {
            int v30 = ((int)result >> 31) | 1;
          }
          else if (v18 == v28)
          {
            int v30 = 0;
          }
          else
          {
            if (v18 < v28) {
              goto LABEL_123;
            }
            int v30 = 1;
          }
          int v25 = v8 + 1;
        }
        while (v30 != -1);
        goto LABEL_123;
      }
      size_t v70 = v9 + 1;
      uint64_t v26 = v229;
      do
      {
        uint64_t v8 = v70;
        unint64_t v71 = **v70;
        size_t v72 = *v71;
        if (*v71 >= v18) {
          size_t v73 = v18;
        }
        else {
          size_t v73 = *v71;
        }
        if (v73 && (uint64_t result = (size_t ***)memcmp(v17 + 6, v71 + 6, v73), result))
        {
          int v74 = ((int)result >> 31) | 1;
        }
        else if (v18 == v72)
        {
          int v74 = 0;
        }
        else
        {
          if (v18 < v72) {
            break;
          }
          int v74 = 1;
        }
        size_t v70 = v8 + 1;
      }
      while (v74 != -1);
LABEL_123:
      int v75 = v26;
      if (v8 < v26)
      {
        size_t v76 = v224;
        do
        {
          int v75 = v76;
          uint64_t v77 = **v76;
          size_t v78 = *v77;
          if (*v77 >= v18) {
            size_t v79 = v18;
          }
          else {
            size_t v79 = *v77;
          }
          if (v79 && (uint64_t result = (size_t ***)memcmp(v17 + 6, v77 + 6, v79), result))
          {
            int v80 = ((int)result >> 31) | 1;
          }
          else
          {
            if (v18 >= v78) {
              break;
            }
            int v80 = -1;
          }
          size_t v76 = v75 - 1;
        }
        while (v80 == -1);
      }
      uint64_t v81 = v15;
      if (v8 < v75)
      {
        uint64_t v82 = *v8;
        uint64_t v83 = *v75;
        do
        {
          *uint64_t v8 = v83;
          *int v75 = v82;
          uint64_t v85 = *v16 + 6;
          size_t v84 = **v16;
          uint64_t v86 = v8 + 1;
          do
          {
            uint64_t v8 = v86;
            uint64_t v82 = *v86;
            uint64_t v87 = **v86;
            size_t v88 = *v87;
            if (*v87 >= v84) {
              size_t v89 = v84;
            }
            else {
              size_t v89 = *v87;
            }
            if (v89 && (uint64_t result = (size_t ***)memcmp(v85, v87 + 6, v89), result))
            {
              int v90 = ((int)result >> 31) | 1;
            }
            else if (v84 == v88)
            {
              int v90 = 0;
            }
            else
            {
              if (v84 < v88) {
                break;
              }
              int v90 = 1;
            }
            uint64_t v86 = v8 + 1;
          }
          while (v90 != -1);
          uint64_t v91 = v75 - 1;
          do
          {
            int v75 = v91;
            uint64_t v83 = *v91;
            int v92 = **v91;
            size_t v93 = *v92;
            if (*v92 >= v84) {
              size_t v94 = v84;
            }
            else {
              size_t v94 = *v92;
            }
            if (v94 && (uint64_t result = (size_t ***)memcmp(v85, v92 + 6, v94), result))
            {
              int v95 = ((int)result >> 31) | 1;
            }
            else
            {
              if (v84 >= v93) {
                break;
              }
              int v95 = -1;
            }
            uint64_t v91 = v75 - 1;
          }
          while (v95 == -1);
        }
        while (v8 < v75);
      }
      uint64_t v96 = v8 - 1;
      BOOL v4 = v8 - 1 >= v230;
      BOOL v5 = v8 - 1 == v230;
      if (v8 - 1 != v230) {
        void *v230 = *v96;
      }
      a4 = 0;
      *uint64_t v96 = v16;
      a3 = v81;
      size_t v7 = v224;
    }
  }
  uint64_t v111 = v9 + 1;
  BOOL v113 = v9 == v229 || v111 == v229;
  if ((a4 & 1) == 0)
  {
    if (v113) {
      return result;
    }
    while (1)
    {
      uint64_t v198 = v230;
      size_t v230 = v111;
      uint64_t v200 = *v198;
      uint64_t v199 = v198[1];
      size_t v201 = **v199;
      int v202 = **v198;
      size_t v203 = *v202;
      if (*v202 >= v201) {
        size_t v204 = **v199;
      }
      else {
        size_t v204 = *v202;
      }
      if (v204 && (uint64_t result = (size_t ***)memcmp(*v199 + 6, v202 + 6, v204), result))
      {
        if ((result & 0x80000000) != 0)
        {
          do
          {
LABEL_335:
            int v205 = v198;
            uint64_t v207 = *--v198;
            int v206 = v207;
            v198[2] = v200;
            size_t v208 = **v199;
            uint64_t v209 = *v207;
            size_t v210 = **v207;
            if (v210 >= v208) {
              size_t v211 = **v199;
            }
            else {
              size_t v211 = v210;
            }
            if (v211 && (uint64_t result = (size_t ***)memcmp(*v199 + 6, v209 + 6, v211), result))
            {
              int v212 = ((int)result >> 31) | 1;
            }
            else
            {
              if (v208 >= v210) {
                break;
              }
              int v212 = -1;
            }
            uint64_t v200 = v206;
          }
          while (v212 == -1);
          *int v205 = v199;
        }
      }
      else if (v201 < v203)
      {
        goto LABEL_335;
      }
      uint64_t v111 = v230 + 1;
      if (v230 + 1 == v229) {
        return result;
      }
    }
  }
  if (v113) {
    return result;
  }
  uint64_t v114 = 0;
  uint64_t v115 = v9;
  while (2)
  {
    uint64_t v116 = v115;
    uint64_t v115 = v111;
    uint64_t v118 = *v116;
    int v117 = v116[1];
    size_t v119 = **v117;
    unint64_t v120 = **v116;
    size_t v121 = *v120;
    if (*v120 >= v119) {
      size_t v122 = **v117;
    }
    else {
      size_t v122 = *v120;
    }
    if (v122 && (uint64_t result = (size_t ***)memcmp(*v117 + 6, v120 + 6, v122), result))
    {
      if ((result & 0x80000000) == 0) {
        goto LABEL_217;
      }
    }
    else if (v119 >= v121)
    {
      goto LABEL_217;
    }
    uint64_t v123 = v114;
    while (2)
    {
      *(size_t ***)((char *)v9 + v123 + 8) = v118;
      if (!v123)
      {
        unint64_t v124 = v9;
        goto LABEL_216;
      }
      unint64_t v124 = v116;
      size_t v125 = **v117;
      uint64_t v118 = *(size_t ***)((char *)v9 + v123 - 8);
      size_t v126 = **v118;
      if (v126 >= v125) {
        size_t v127 = **v117;
      }
      else {
        size_t v127 = **v118;
      }
      if (v127)
      {
        uint64_t result = (size_t ***)memcmp(*v117 + 6, *v118 + 6, v127);
        if (result)
        {
          int v128 = ((int)result >> 31) | 1;
          goto LABEL_212;
        }
      }
      if (v125 < v126)
      {
        int v128 = -1;
LABEL_212:
        uint64_t v116 = v124 - 1;
        v123 -= 8;
        if (v128 != -1) {
          goto LABEL_216;
        }
        continue;
      }
      break;
    }
    unint64_t v124 = (size_t ***)((char *)v9 + v123);
LABEL_216:
    *unint64_t v124 = v117;
LABEL_217:
    uint64_t v111 = v115 + 1;
    v114 += 8;
    if (v115 + 1 != v229) {
      continue;
    }
    return result;
  }
}

size_t ***sub_1CCB738B4(size_t ***result, size_t ***a2, size_t ***a3)
{
  BOOL v5 = result;
  int v6 = *a2;
  size_t v7 = **a2;
  size_t v8 = *v7;
  int v9 = *result;
  uint64_t v10 = **result;
  size_t v11 = *v10;
  if (*v10 >= *v7) {
    size_t v12 = *v7;
  }
  else {
    size_t v12 = *v10;
  }
  if (v12)
  {
    uint64_t result = (size_t ***)memcmp(v7 + 6, v10 + 6, v12);
    if (result)
    {
      if ((result & 0x80000000) == 0) {
        goto LABEL_7;
      }
LABEL_15:
      uint64_t v17 = *a3;
      size_t v18 = **a3;
      size_t v19 = *v18;
      if (v8 >= *v18) {
        size_t v20 = *v18;
      }
      else {
        size_t v20 = v8;
      }
      if (v20 && (uint64_t result = (size_t ***)memcmp(v18 + 6, v7 + 6, v20), result))
      {
        if ((result & 0x80000000) == 0)
        {
LABEL_21:
          void *v5 = v6;
          *a2 = v9;
          size_t v21 = *a3;
          size_t v22 = **a3;
          size_t v23 = *v22;
          size_t v24 = **v9;
          if (v24 >= *v22) {
            size_t v25 = *v22;
          }
          else {
            size_t v25 = **v9;
          }
          if (v25 && (uint64_t result = (size_t ***)memcmp(v22 + 6, *v9 + 6, v25), result))
          {
            if ((result & 0x80000000) == 0) {
              return result;
            }
          }
          else if (v23 >= v24)
          {
            return result;
          }
          *a2 = v21;
          goto LABEL_40;
        }
      }
      else if (v19 >= v8)
      {
        goto LABEL_21;
      }
      void *v5 = v17;
LABEL_40:
      *a3 = v9;
      return result;
    }
  }
  if (v8 < v11) {
    goto LABEL_15;
  }
LABEL_7:
  int v13 = *a3;
  int v14 = **a3;
  size_t v15 = *v14;
  if (v8 >= *v14) {
    size_t v16 = *v14;
  }
  else {
    size_t v16 = v8;
  }
  if (v16 && (uint64_t result = (size_t ***)memcmp(v14 + 6, v7 + 6, v16), result))
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v15 >= v8)
  {
    return result;
  }
  *a2 = v13;
  *a3 = v6;
  uint64_t v26 = *a2;
  uint64_t v27 = **a2;
  size_t v28 = *v27;
  size_t v29 = *v5;
  int v30 = **v5;
  size_t v31 = *v30;
  if (*v30 >= *v27) {
    size_t v32 = *v27;
  }
  else {
    size_t v32 = *v30;
  }
  if (v32 && (uint64_t result = (size_t ***)memcmp(v27 + 6, v30 + 6, v32), result))
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v28 >= v31)
  {
    return result;
  }
  void *v5 = v26;
  *a2 = v29;
  return result;
}

BOOL sub_1CCB73A58(size_t ***a1, size_t ***a2)
{
  uint64_t v3 = a2 - a1;
  BOOL result = 1;
  switch(v3)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v5 = *(a2 - 1);
      size_t v6 = **v5;
      size_t v7 = *a1;
      size_t v8 = **a1;
      size_t v9 = *v8;
      if (*v8 >= v6) {
        size_t v10 = **v5;
      }
      else {
        size_t v10 = *v8;
      }
      if (v10 && (int v11 = memcmp(*v5 + 6, v8 + 6, v10)) != 0)
      {
        if ((v11 & 0x80000000) == 0) {
          return 1;
        }
      }
      else if (v6 >= v9)
      {
        return 1;
      }
      *a1 = v5;
      *(a2 - 1) = v7;
      return 1;
    case 3:
      sub_1CCB738B4(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CCB73E00(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      size_t v31 = a1 + 2;
      size_t v32 = a1 + 3;
      sub_1CCB73E00(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v33 = *(a2 - 1);
      size_t v34 = **v33;
      size_t v35 = a1[3];
      size_t v36 = **v35;
      if (v36 >= v34) {
        size_t v37 = **v33;
      }
      else {
        size_t v37 = **v35;
      }
      if (v37 && (int v38 = memcmp(*v33 + 6, *v35 + 6, v37)) != 0)
      {
        if ((v38 & 0x80000000) == 0) {
          return 1;
        }
      }
      else if (v34 >= v36)
      {
        return 1;
      }
      *size_t v32 = v33;
      *(a2 - 1) = v35;
      unint64_t v39 = *v32;
      unsigned int v40 = **v32;
      size_t v41 = *v40;
      uint64_t v42 = *v31;
      size_t v43 = **v31;
      size_t v44 = *v43;
      if (*v43 >= *v40) {
        size_t v45 = *v40;
      }
      else {
        size_t v45 = *v43;
      }
      if (v45 && (int v46 = memcmp(v40 + 6, v43 + 6, v45)) != 0)
      {
        if ((v46 & 0x80000000) == 0) {
          return 1;
        }
      }
      else if (v41 >= v44)
      {
        return 1;
      }
      *size_t v31 = v39;
      *size_t v32 = v42;
      size_t v47 = **v39;
      size_t v48 = a1[1];
      size_t v49 = **v48;
      if (v49 >= v47) {
        size_t v50 = **v39;
      }
      else {
        size_t v50 = **v48;
      }
      if (v50 && (int v51 = memcmp(*v39 + 6, *v48 + 6, v50)) != 0)
      {
        if ((v51 & 0x80000000) == 0) {
          return 1;
        }
      }
      else if (v47 >= v49)
      {
        return 1;
      }
      a1[1] = v39;
      a1[2] = v48;
      size_t v52 = **v39;
      size_t v53 = *a1;
      size_t v54 = **a1;
      size_t v55 = *v54;
      if (*v54 >= v52) {
        size_t v56 = **v39;
      }
      else {
        size_t v56 = *v54;
      }
      if (v56 && (int v57 = memcmp(*v39 + 6, v54 + 6, v56)) != 0)
      {
        if ((v57 & 0x80000000) == 0) {
          return 1;
        }
      }
      else if (v52 >= v55)
      {
        return 1;
      }
      *a1 = v39;
      a1[1] = v53;
      return 1;
    default:
      size_t v12 = a1 + 2;
      sub_1CCB738B4(a1, a1 + 1, a1 + 2);
      int v13 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  do
  {
    size_t v16 = *v13;
    uint64_t v17 = **v13;
    size_t v18 = *v17;
    size_t v19 = *v12;
    size_t v20 = **v12;
    size_t v21 = *v20;
    if (*v20 >= *v17) {
      size_t v22 = *v17;
    }
    else {
      size_t v22 = *v20;
    }
    if (v22 && (int v23 = memcmp(v17 + 6, v20 + 6, v22)) != 0)
    {
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_34;
      }
    }
    else if (v18 >= v21)
    {
      goto LABEL_34;
    }
    uint64_t v24 = v14;
    while (1)
    {
      *(size_t ***)((char *)a1 + v24 + 24) = v19;
      if (v24 == -16)
      {
        size_t v25 = a1;
        goto LABEL_33;
      }
      size_t v25 = v12;
      size_t v26 = **v16;
      size_t v19 = *(size_t ***)((char *)a1 + v24 + 8);
      size_t v27 = **v19;
      size_t v28 = v27 >= v26 ? **v16 : **v19;
      if (!v28) {
        break;
      }
      int v29 = memcmp(*v16 + 6, *v19 + 6, v28);
      if (!v29) {
        break;
      }
      int v30 = (v29 >> 31) | 1;
LABEL_29:
      size_t v12 = v25 - 1;
      v24 -= 8;
      if (v30 != -1) {
        goto LABEL_33;
      }
    }
    if (v26 < v27)
    {
      int v30 = -1;
      goto LABEL_29;
    }
    size_t v25 = (size_t ***)((char *)a1 + v24 + 16);
LABEL_33:
    *size_t v25 = v16;
    if (++v15 == 8) {
      return v13 + 1 == a2;
    }
LABEL_34:
    size_t v12 = v13;
    v14 += 8;
    ++v13;
  }
  while (v13 != a2);
  return 1;
}

size_t ***sub_1CCB73E00(size_t ***a1, size_t ***a2, size_t ***a3, size_t ***a4)
{
  BOOL result = sub_1CCB738B4(a1, a2, a3);
  size_t v9 = *a4;
  size_t v10 = **a4;
  size_t v11 = *v10;
  size_t v12 = *a3;
  int v13 = **a3;
  size_t v14 = *v13;
  if (*v13 >= *v10) {
    size_t v15 = *v10;
  }
  else {
    size_t v15 = *v13;
  }
  if (v15 && (BOOL result = (size_t ***)memcmp(v10 + 6, v13 + 6, v15), result))
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v11 >= v14)
  {
    return result;
  }
  *a3 = v9;
  *a4 = v12;
  size_t v16 = *a3;
  uint64_t v17 = **a3;
  size_t v18 = *v17;
  size_t v19 = *a2;
  size_t v20 = **a2;
  size_t v21 = *v20;
  if (*v20 >= *v17) {
    size_t v22 = *v17;
  }
  else {
    size_t v22 = *v20;
  }
  if (v22 && (BOOL result = (size_t ***)memcmp(v17 + 6, v20 + 6, v22), result))
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v18 >= v21)
  {
    return result;
  }
  *a2 = v16;
  *a3 = v19;
  int v23 = *a2;
  uint64_t v24 = **a2;
  size_t v25 = *v24;
  size_t v26 = *a1;
  size_t v27 = **a1;
  size_t v28 = *v27;
  if (*v27 >= *v24) {
    size_t v29 = *v24;
  }
  else {
    size_t v29 = *v27;
  }
  if (v29 && (BOOL result = (size_t ***)memcmp(v24 + 6, v27 + 6, v29), result))
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v25 >= v28)
  {
    return result;
  }
  *a1 = v23;
  *a2 = v26;
  return result;
}

std::error_category *sub_1CCB73F2C(std::error_category *result, uint64_t a2)
{
  if (result != (std::error_category *)a2)
  {
    BOOL v4 = result;
    if (((uint64_t)result[2].__vftable & 1) == 0)
    {
      BOOL v5 = result->__vftable;
      v4->__vftable = 0;
      if (v5) {
        (*((void (**)(std::error_category_vtbl *))v5->~error_category + 1))(v5);
      }
    }
    return sub_1CCB73FAC(v4, a2);
  }
  return result;
}

std::error_category *sub_1CCB73FAC(std::error_category *result, uint64_t a2)
{
  uint64_t v2 = result;
  char v3 = (char)result[2].__vftable;
  if (*(unsigned char *)(a2 + 16))
  {
    LOBYTE(result[2].__vftable) = v3 | 1;
    if (*(unsigned char *)(a2 + 16))
    {
      BOOL v5 = *(std::error_category_vtbl **)a2;
      BOOL result = *(std::error_category **)(a2 + 8);
    }
    else
    {
      BOOL result = (std::error_category *)std::system_category();
      BOOL v5 = 0;
    }
    v2->__vftable = v5;
    v2[1].__vftable = (std::error_category_vtbl *)result;
  }
  else
  {
    LOBYTE(result[2].__vftable) = v3 & 0xFE;
    BOOL v4 = *(std::error_category_vtbl **)a2;
    *(void *)a2 = 0;
    result->__vftable = v4;
  }
  return result;
}

uint64_t sub_1CCB74014(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 184))
  {
    size_t v6 = *(void **)a1;
    *(void *)a1 = 0;
    if (v6) {
      (*(void (**)(void *))(*(void *)v6 + 8))(v6);
    }
  }
  else
  {
    char v3 = (void *)(a1 + 48);
    uint64_t v2 = *(void **)(a1 + 48);
    if (v2 != (void *)(a1 + 72)) {
      free(v2);
    }
    BOOL v4 = *(void **)(a1 + 24);
    if (v4 != v3) {
      free(v4);
    }
    BOOL v5 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v5;
      operator delete(v5);
    }
  }
  return a1;
}

void sub_1CCB740AC(uint64_t ***a1, const void *a2, size_t a3, void *__s2, size_t __n)
{
  size_t v21 = a2;
  size_t v22 = a3;
  v20[0] = __s2;
  v20[1] = __n;
  BOOL v5 = *a1;
  size_t v6 = *a1 + 8;
  if (*v6)
  {
    size_t v7 = v5[7];
    if (!v7) {
      goto LABEL_8;
    }
    do
    {
      if (!sub_1CC016A40((uint64_t)v6, (uint64_t)v20, (uint64_t)(v7 + 4)))
      {
        if (!sub_1CC016A40((uint64_t)v6, (uint64_t)(v7 + 4), (uint64_t)v20)) {
          return;
        }
        ++v7;
      }
      size_t v7 = (uint64_t *)*v7;
    }
    while (v7);
    BOOL v5 = *a1;
    if ((*a1)[8])
    {
LABEL_8:
      sub_1CD69C67C(v5 + 6, (uint64_t)&v21);
      return;
    }
    goto LABEL_17;
  }
  uint64_t v9 = *((unsigned int *)v5 + 2);
  if (!v9) {
    goto LABEL_17;
  }
  uint64_t v12 = 16 * v9;
  int v13 = *v5 + 1;
  while (*v13 != __n || __n && memcmp((const void *)*(v13 - 1), __s2, __n))
  {
    v13 += 2;
    v12 -= 16;
    if (!v12) {
      goto LABEL_17;
    }
  }
  if (!v12)
  {
LABEL_17:
    uint64_t v14 = *((unsigned int *)v5 + 2);
    if (v14)
    {
      unint64_t v15 = 0;
      size_t v16 = *v5;
      uint64_t v17 = 16 * v14;
      size_t v18 = v21;
      size_t v19 = v22;
      while (v16[v15 / 8 + 1] != v19 || v19 && memcmp((const void *)v16[v15 / 8], v18, v19))
      {
        v15 += 16;
        if (v17 == v15) {
          return;
        }
      }
      if (v17 - 16 != v15)
      {
        memmove(&v16[v15 / 8], &v16[v15 / 8 + 2], v17 - v15 - 16);
        LODWORD(v14) = *((_DWORD *)v5 + 2);
      }
      *((_DWORD *)v5 + 2) = v14 - 1;
    }
  }
}

uint64_t sub_1CCB74230(void *a1, long long *a2, long long *a3)
{
  long long v27 = *a2;
  int v28 = 0;
  sub_1CD69C76C((uint64_t)a1, (const void **)&v27, &v28, (uint64_t)&v29);
  if (!v30) {
    return 0;
  }
  size_t v7 = (char *)a1[3];
  size_t v6 = (char *)a1[4];
  uint64_t v8 = (v6 - v7) / 80;
  *(_DWORD *)(v29 + 16) = v8;
  unint64_t v9 = a1[5];
  if ((unint64_t)v6 >= v9)
  {
    unint64_t v15 = v8 + 1;
    if ((unint64_t)(v8 + 1) > 0x333333333333333) {
      abort();
    }
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (void)v7) >> 4);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x199999999999999) {
      unint64_t v17 = 0x333333333333333;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 > 0x333333333333333) {
        sub_1CB833614();
      }
      size_t v18 = (char *)operator new(80 * v17);
    }
    else
    {
      size_t v18 = 0;
    }
    size_t v19 = &v18[80 * v8];
    long long v20 = *a3;
    long long v21 = a3[1];
    *(_OWORD *)size_t v19 = *a2;
    *((_OWORD *)v19 + 1) = v20;
    long long v22 = a3[2];
    long long v23 = a3[3];
    *((_OWORD *)v19 + 2) = v21;
    *((_OWORD *)v19 + 3) = v22;
    *((_OWORD *)v19 + 4) = v23;
    int v13 = v19 + 80;
    if (v6 != v7)
    {
      do
      {
        *((_OWORD *)v19 - 5) = *((_OWORD *)v6 - 5);
        long long v24 = *((_OWORD *)v6 - 4);
        long long v25 = *((_OWORD *)v6 - 3);
        long long v26 = *((_OWORD *)v6 - 1);
        *((_OWORD *)v19 - 2) = *((_OWORD *)v6 - 2);
        *((_OWORD *)v19 - 1) = v26;
        *((_OWORD *)v19 - 4) = v24;
        *((_OWORD *)v19 - 3) = v25;
        v19 -= 80;
        v6 -= 80;
      }
      while (v6 != v7);
      size_t v6 = (char *)a1[3];
    }
    a1[3] = v19;
    a1[4] = v13;
    a1[5] = &v18[80 * v17];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(_OWORD *)size_t v6 = *a2;
    long long v10 = *a3;
    long long v11 = a3[1];
    long long v12 = a3[3];
    *((_OWORD *)v6 + 3) = a3[2];
    *((_OWORD *)v6 + 4) = v12;
    *((_OWORD *)v6 + 1) = v10;
    *((_OWORD *)v6 + 2) = v11;
    int v13 = v6 + 80;
  }
  a1[4] = v13;
  return 1;
}

void *sub_1CCB743E0(uint64_t *a1, int a2)
{
  uint64_t v3 = *((unsigned int *)a1 + 4);
  BOOL v4 = (uint64_t *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  BOOL result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v10 = *((unsigned int *)a1 + 4);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      long long v12 = result;
      do
      {
        *long long v12 = -1;
        v12 += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      int v13 = 0;
      int v14 = v10 - 1;
      unint64_t v15 = v4;
      do
      {
        uint64_t v16 = *v15;
        if ((unint64_t)*v15 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unsigned int v17 = (37 * v16) & v14;
          size_t v18 = &result[2 * v17];
          uint64_t v19 = *v18;
          if (v16 != *v18)
          {
            long long v20 = 0;
            int v21 = 1;
            while (v19 != -1)
            {
              if (v20) {
                BOOL v22 = 0;
              }
              else {
                BOOL v22 = v19 == -2;
              }
              if (v22) {
                long long v20 = v18;
              }
              unsigned int v23 = v17 + v21++;
              unsigned int v17 = v23 & v14;
              size_t v18 = &result[2 * (v23 & v14)];
              uint64_t v19 = *v18;
              if (v16 == *v18) {
                goto LABEL_12;
              }
            }
            if (v20) {
              size_t v18 = v20;
            }
          }
LABEL_12:
          *size_t v18 = v16;
          *((_DWORD *)v18 + 2) = *((_DWORD *)v15 + 2);
          *((_DWORD *)a1 + 2) = ++v13;
        }
        v15 += 2;
      }
      while (v15 != &v4[2 * v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v24 = *((unsigned int *)a1 + 4);
  if (v24)
  {
    uint64_t v25 = 16 * v24;
    do
    {
      *BOOL result = -1;
      result += 2;
      v25 -= 16;
    }
    while (v25);
  }
  return result;
}

uint64_t sub_1CCB7456C(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = *((unsigned int *)*a1 + 4);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & (37 * a2);
    unint64_t v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      goto LABEL_8;
    }
    int v7 = 1;
    while (v6 != -1)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        unint64_t v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  unint64_t v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if ((uint64_t *)(v2 + 16 * v3) == v5) {
    return 2;
  }
  else {
    return *((unsigned int *)v5 + 2);
  }
}

uint64_t sub_1CCB745EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1CCB74684(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1CCB74720()
{
}

void *sub_1CCB74734(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F262C798;
  result[1] = v3;
  return result;
}

uint64_t sub_1CCB7477C(uint64_t result, void *a2)
{
  *a2 = &unk_1F262C798;
  a2[1] = *(void *)(result + 8);
  return result;
}

void sub_1CCB747AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v7 = (void *)a5[3];
  if (v7)
  {
    if (v7 == a5)
    {
      long long v12 = v11;
      (*(void (**)(void *, void *))(*a5 + 24))(a5, v11);
    }
    else
    {
      long long v12 = (void *)a5[3];
      a5[3] = 0;
    }
  }
  else
  {
    long long v12 = 0;
  }
  int v8 = (void *)a6[3];
  if (v8)
  {
    if (v8 == a6)
    {
      uint64_t v10 = v9;
      (*(void (**)(void *, void *))(*a6 + 24))(a6, v9);
    }
    else
    {
      uint64_t v10 = (void *)a6[3];
      a6[3] = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  operator new();
}

void sub_1CCB74E54(uint64_t a1)
{
  *(void *)a1 = &unk_1F262C7E0;
  std::mutex::~mutex((std::mutex *)(a1 + 616));
  if (*(unsigned char *)(a1 + 608))
  {
    uint64_t v2 = *(void *)(a1 + 600);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    *(unsigned char *)(a1 + 608) = 0;
  }
  sub_1CB833A08(a1 + 576, *(void **)(a1 + 584));
  sub_1CB833A08(a1 + 552, *(void **)(a1 + 560));
  uint64_t v3 = *(void *)(a1 + 544);
  if (v3 == a1 + 520)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 520) + 32))(a1 + 520);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 512);
  if (v4 == a1 + 488)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 488) + 32))(a1 + 488);
  }
  else if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  llvm::ThreadPool::~ThreadPool((llvm::ThreadPool *)(a1 + 32));
}

uint64_t sub_1CCB74FAC()
{
  return v0;
}

void sub_1CCB74FBC(uint64_t a1)
{
}

void sub_1CCB74FCC()
{
  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCB74FF4(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = *(uint64_t **)(a1 + 24);
  uint64_t v10 = *((unsigned int *)v9 + 2);
  if (v10)
  {
    long long v12 = *(const void **)(a3 + 16);
    size_t v11 = *(void *)(a3 + 24);
    int v13 = 0;
    if (v11)
    {
      uint64_t v14 = *(void *)(a3 + 24);
      unint64_t v15 = *(unsigned __int8 **)(a3 + 16);
      do
      {
        int v16 = *v15++;
        int v13 = 33 * v13 + v16;
        --v14;
      }
      while (v14);
    }
    unsigned int v17 = v10 - 1;
    uint64_t v18 = *v9;
    uint64_t v30 = *((unsigned int *)v9 + 2);
    uint64_t v19 = *v9 + 8 * v10 + 8;
    int v20 = 1;
    int v21 = v13;
    while (1)
    {
      uint64_t v22 = v21 & v17;
      unsigned int v23 = *(void **)(v18 + 8 * v22);
      if (v23 != (void *)-8)
      {
        if (!v23)
        {
          uint64_t v24 = v30;
          goto LABEL_14;
        }
        if (*(_DWORD *)(v19 + 4 * v22) == v13
          && v11 == *v23
          && (!v11 || !memcmp(v12, (char *)v23 + *((unsigned int *)v9 + 5), v11)))
        {
          break;
        }
      }
      int v21 = v20 + v22;
      ++v20;
    }
    uint64_t v24 = v30;
    if (v22 != -1) {
      uint64_t v24 = (int)v22;
    }
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v18 = *v9;
  }
LABEL_14:
  uint64_t v25 = *(void *)(v18 + 8 * v24) + 8;
  uint64_t v26 = *(void *)(a1 + 16);
  long long v27 = (char *)operator new(0x88uLL);
  long long v28 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v27 + 24) = *(_OWORD *)a3;
  *(_OWORD *)(v27 + 40) = v28;
  long long v29 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v27 + 56) = *(_OWORD *)(a3 + 32);
  *(void *)long long v27 = &unk_1F262C818;
  *((void *)v27 + 1) = a1;
  *((_DWORD *)v27 + 4) = a2;
  *(_OWORD *)(v27 + 72) = v29;
  *((void *)v27 + 11) = v26;
  *((void *)v27 + 12) = a4;
  *((void *)v27 + 13) = a5;
  *((void *)v27 + 14) = a6;
  *((void *)v27 + 15) = v25;
  *((void *)v27 + 16) = a7;
  unsigned int v40 = v27;
  sub_1CC3DA82C(a1 + 32, (uint64_t)v39, 0, (std::future<void> *)&v38);
  if (v40 == v39)
  {
    (*(void (**)(void *))(v39[0] + 32))(v39);
  }
  else if (v40)
  {
    (*(void (**)(void))(*v40 + 40))();
  }
  std::shared_future<void>::~shared_future(&v38);
  *a8 = 0;
}

void sub_1CCB75240(uint64_t a1@<X0>, void *a2@<X8>)
{
  llvm::ThreadPool::wait((llvm::ThreadPool *)(a1 + 32));
  if (*(unsigned char *)(a1 + 608))
  {
    uint64_t v4 = *(void *)(a1 + 600);
    *(void *)(a1 + 600) = 0;
  }
  else
  {
    uint64_t v4 = 0;
  }
  *a2 = v4;
}

uint64_t sub_1CCB75288(uint64_t a1)
{
  return *(unsigned int *)(a1 + 484);
}

void sub_1CCB75294()
{
}

__n128 sub_1CCB752A8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x88uLL);
  *(void *)uint64_t v2 = &unk_1F262C818;
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_1CCB7532C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F262C818;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 72);
  long long v6 = *(_OWORD *)(a1 + 88);
  long long v7 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 88) = v6;
  *(__n128 *)(a2 + 72) = result;
  return result;
}

uint64_t sub_1CCB75394(uint64_t a1)
{
  v66[5] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 88);
  long long v2 = *(char **)(a1 + 96);
  std::shared_future<void> v38 = *(void **)(a1 + 112);
  uint64_t v39 = *(void *)(a1 + 104);
  long long v42 = *(_OWORD *)(a1 + 120);
  long long v43 = *(_OWORD *)(a1 + 24);
  long long v44 = *(_OWORD *)(a1 + 40);
  long long v45 = *(_OWORD *)(a1 + 56);
  long long v46 = *(_OWORD *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(*(void *)(v4 + 8) + 840)) {
    llvm::timeTraceProfilerInitialize();
  }
  sub_1CCB745EC((uint64_t)v57, v4 + 488);
  sub_1CCB74684((uint64_t)v55, v4 + 520);
  int v5 = *(_DWORD *)(a1 + 16);
  long long v47 = v43;
  long long v48 = v44;
  long long v49 = v45;
  long long v50 = v46;
  int v54 = v5;
  uint64_t v41 = v4;
  v52[0] = (char *)v4;
  v52[1] = (char *)&v47;
  void v52[2] = (char *)&v54;
  v52[3] = (char *)v3;
  uint64_t v37 = (uint64_t)v2;
  uint64_t v52[4] = v2;
  long long v53 = v42;
  if (!v56) {
    goto LABEL_34;
  }
  uint64_t v40 = *(unsigned int *)(v3 + 32);
  if (!v40) {
    goto LABEL_34;
  }
  long long v6 = v48;
  if (*((void *)&v48 + 1))
  {
    int v7 = 0;
    uint64_t v8 = *((void *)&v48 + 1);
    unint64_t v9 = (unsigned __int8 *)v48;
    do
    {
      int v10 = *v9++;
      int v7 = 33 * v7 + v10;
      --v8;
    }
    while (v8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v11 = v40 - 1;
  uint64_t v12 = *(void *)(v3 + 24);
  uint64_t v13 = v12 + 8 * v40 + 8;
  int v14 = 1;
  int v15 = v7;
  while (1)
  {
    uint64_t v16 = v15 & v11;
    unsigned int v17 = *(void **)(v12 + 8 * v16);
    if (v17 == (void *)-8) {
      goto LABEL_14;
    }
    if (!v17) {
      goto LABEL_34;
    }
    if (*(_DWORD *)(v13 + 4 * v16) != v7 || *((void *)&v6 + 1) != *v17) {
      goto LABEL_14;
    }
    uint64_t v18 = *(unsigned int *)(v3 + 44);
    if (!*((void *)&v6 + 1)) {
      break;
    }
    int v19 = memcmp((const void *)v6, (char *)v17 + v18, *((size_t *)&v6 + 1));
    uint64_t v20 = v42;
    if (!v19)
    {
      if (v16 != -1 && (int)v16 != v40)
      {
        int v21 = 0;
        uint64_t v22 = *((void *)&v6 + 1);
        unsigned int v23 = (unsigned __int8 *)v6;
        do
        {
          int v24 = *v23++;
          int v21 = 33 * v21 + v24;
          --v22;
        }
        while (v22);
        goto LABEL_19;
      }
LABEL_34:
      if (v58)
      {
        if (v58 == (llvm *)v57)
        {
          v66[0] = &v64;
          (*(void (**)(void *, char **))(v57[0] + 24))(v57, &v64);
        }
        else
        {
          v66[0] = (*(uint64_t (**)(void))(*(void *)v58 + 16))();
        }
      }
      else
      {
        v66[0] = 0;
      }
      sub_1CCB75B88();
    }
LABEL_14:
    int v15 = v14 + v16;
    ++v14;
  }
  uint64_t v20 = v42;
  if (v16 == -1 || (int)v16 == v40) {
    goto LABEL_34;
  }
  int v21 = 0;
LABEL_19:
  int v25 = 1;
  for (int i = v21; ; int i = v27 + v25++)
  {
    uint64_t v27 = i & v11;
    long long v28 = *(void **)(v12 + 8 * v27);
    if (v28 != (void *)-8)
    {
      if (!v28) {
        goto LABEL_31;
      }
      if (*(_DWORD *)(v13 + 4 * v27) == v21 && *((void *)&v6 + 1) == *v28)
      {
        if (!*((void *)&v6 + 1)) {
          break;
        }
        int v29 = memcmp((const void *)v6, (char *)v28 + v18, *((size_t *)&v6 + 1));
        uint64_t v20 = v42;
        if (!v29) {
          break;
        }
      }
    }
  }
  if (v27 != -1) {
    uint64_t v40 = (int)v27;
  }
LABEL_31:
  uint64_t v30 = 0;
  while (!*(_DWORD *)(*(void *)(v12 + 8 * v40) + 16 + v30))
  {
    v30 += 4;
    if (v30 == 20) {
      goto LABEL_34;
    }
  }
  size_t v64 = (char *)v66;
  long long v65 = xmmword_1CDB15B30;
  llvm::computeLTOCacheKey((uint64_t)&v64, *(void *)(v41 + 8), v3, (unsigned __int8 *)v6, *((size_t *)&v6 + 1), v37, v39, v38, v20, v41 + 552, v41 + 576);
  v59[0] = v64;
  v59[1] = v65;
  LODWORD(v51) = v54;
  if (!v56)
  {
    sub_1CB920400();
    sub_1CCB75B88();
  }
  (*(void (**)(char **__return_ptr))(*v56 + 48))(v61);
  if ((v63 & 1) == 0)
  {
    int v51 = 0;
    goto LABEL_67;
  }
  size_t v35 = v61[0];
  v61[0] = 0;
  int v51 = v35;
  if (!v35)
  {
LABEL_67:
    if (v62)
    {
      if (v62 == v61)
      {
        int v60 = v59;
        (*((void (**)(char **, void *))v61[0] + 3))(v61, v59);
      }
      else
      {
        int v60 = (void *)(*((uint64_t (**)(void))*v62 + 2))();
      }
      sub_1CCB75B88();
    }
    int v51 = 0;
  }
  if (v63)
  {
    size_t v36 = v61[0];
    v61[0] = 0;
    if (v36) {
      (*(void (**)(char *))(*(void *)v36 + 8))(v36);
    }
  }
  else if (v62 == v61)
  {
    (*((void (**)(char **))v61[0] + 4))(v61);
  }
  else if (v62)
  {
    (*((void (**)(void))*v62 + 5))();
  }
  if (v64 != (char *)v66) {
    free(v64);
  }
  if (v56 == v55)
  {
    (*(void (**)(void *))(v55[0] + 32))(v55);
  }
  else if (v56)
  {
    (*(void (**)(void))(*v56 + 40))();
  }
  size_t v31 = v58;
  if (v58 == (llvm *)v57)
  {
    size_t v31 = (llvm *)(*(uint64_t (**)(void *))(v57[0] + 32))(v57);
  }
  else if (v58)
  {
    size_t v31 = (llvm *)(*(uint64_t (**)(void))(*(void *)v58 + 40))();
  }
  if (v51)
  {
    std::mutex::lock((std::mutex *)(v41 + 616));
    if (*(unsigned char *)(v41 + 608))
    {
      uint64_t v33 = *(char **)(v41 + 600);
      *(void *)(v41 + 600) = 0;
      v61[0] = v51;
      int v51 = 0;
      v52[0] = v33;
      sub_1CD5E5368(v52, v61, &v64);
      size_t v34 = v64;
      if (!*(unsigned char *)(v41 + 608)) {
        *(unsigned char *)(v41 + 608) = 1;
      }
      *(void *)(v41 + 600) = v34;
      size_t v64 = 0;
      if (v61[0]) {
        (*(void (**)(char *))(*(void *)v61[0] + 8))(v61[0]);
      }
      if (v52[0]) {
        (*(void (**)(char *))(*(void *)v52[0] + 8))(v52[0]);
      }
    }
    else
    {
      *(void *)(v41 + 600) = v51;
      int v51 = 0;
      *(unsigned char *)(v41 + 608) = 1;
    }
    std::mutex::unlock((std::mutex *)(v41 + 616));
  }
  if (*(unsigned char *)(*(void *)(v41 + 8) + 840)) {
    llvm::timeTraceProfilerFinishThread(v31);
  }
  uint64_t result = (uint64_t)v51;
  if (v51) {
    return (*(uint64_t (**)(char *))(*(void *)v51 + 8))(v51);
  }
  return result;
}

void sub_1CCB75B88()
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  sub_1CCB72420((llvm::LLVMContext *)v0);
}

uint64_t sub_1CCB75D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1CCB75E24(uint64_t a1)
{
  *(void *)a1 = &unk_1F262C860;
  uint64_t v2 = a1 + 72;
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1CCB75EE8(uint64_t a1)
{
  *(void *)a1 = &unk_1F262C860;
  uint64_t v2 = a1 + 72;
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CCB75FCC(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  uint64_t v2 = operator new(0x68uLL);
  void *v2 = &unk_1F262C860;
  sub_1CCB765C0((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_1CCB76020(uint64_t a1, void *a2)
{
  *a2 = &unk_1F262C860;
  return sub_1CCB765C0((uint64_t)(a2 + 1), (long long *)(a1 + 8));
}

void sub_1CCB7604C(uint64_t a1)
{
  uint64_t v2 = a1 + 72;
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v4 = *(void **)(a1 + 8);
    operator delete(v4);
  }
}

void sub_1CCB76108(char *__p)
{
  uint64_t v2 = __p + 72;
  uint64_t v3 = (char *)*((void *)__p + 12);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  if (__p[55] < 0) {
    operator delete(*((void **)__p + 4));
  }
  if (__p[31] < 0) {
    operator delete(*((void **)__p + 1));
  }

  operator delete(__p);
}

void sub_1CCB761C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v7 = (void *)a5[3];
  if (v7)
  {
    if (v7 == a5)
    {
      uint64_t v12 = v11;
      (*(void (**)(void *, void *))(*a5 + 24))(a5, v11);
    }
    else
    {
      uint64_t v12 = (void *)a5[3];
      a5[3] = 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v8 = (void *)a6[3];
  if (v8)
  {
    if (v8 == a6)
    {
      int v10 = v9;
      (*(void (**)(void *, void *))(*a6 + 24))(a6, v9);
    }
    else
    {
      int v10 = (void *)a6[3];
      a6[3] = 0;
    }
  }
  else
  {
    int v10 = 0;
  }
  operator new();
}

uint64_t sub_1CCB765C0(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1CB8BDF7C(a1, *(const void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
  }
  int v5 = (_OWORD *)(a1 + 24);
  if (*((char *)a2 + 47) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v5, *((const void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    _OWORD *v5 = v6;
  }
  *(_OWORD *)(a1 + 48) = a2[3];
  sub_1CCB75D8C(a1 + 64, (uint64_t)(a2 + 4));
  return a1;
}

uint64_t sub_1CCB76650(uint64_t a1)
{
  *(void *)a1 = &unk_1F262C8A8;
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 120);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void sub_1CCB76714(uint64_t a1)
{
  *(void *)a1 = &unk_1F262C8A8;
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 120);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCB767F8(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  size_t v5 = *(void *)(a2 + 24);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v8 = *(void **)(a2 + 16);
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    unint64_t v9 = (const void **)operator new(v10 + 1);
    __dst[1] = (const void *)v5;
    unint64_t v26 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_8;
  }
  HIBYTE(v26) = *(void *)(a2 + 24);
  unint64_t v9 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v9, v8, v5);
  *((unsigned char *)v9 + v5) = 0;
  llvm::lto::getThinLTOOutputFile(__dst, a1 + 32, (void **)(a1 + 56), &v31);
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)__dst[0]);
  }
  uint64_t v12 = *(llvm::raw_ostream **)(a1 + 88);
  if (v12)
  {
    if (v33 >= 0) {
      uint64_t v13 = (const char *)&v31;
    }
    else {
      uint64_t v13 = v31;
    }
    if (v33 >= 0) {
      size_t v14 = v33 & 0x7F;
    }
    else {
      size_t v14 = v32;
    }
    int v15 = llvm::raw_ostream::write(v12, v13, v14);
    uint64_t v16 = (unsigned char *)*((void *)v15 + 4);
    if ((unint64_t)v16 >= *((void *)v15 + 3))
    {
      llvm::raw_ostream::write(v15, 10);
    }
    else
    {
      *((void *)v15 + 4) = v16 + 1;
      *uint64_t v16 = 10;
    }
  }
  v30[0] = 0;
  v30[1] = 0;
  int v29 = v30;
  llvm::gatherImportedSummariesForModule((unsigned __int8 *)v8, v5, *(uint64_t **)(a1 + 24), a3, (uint64_t **)&v29);
  LODWORD(v27) = 0;
  long long v28 = std::system_category();
  if (v33 >= 0) {
    size_t v17 = v33 & 0x7F;
  }
  else {
    size_t v17 = v32;
  }
  sub_1CB907098((uint64_t)__p, v17 + 11);
  if (v24 >= 0) {
    uint64_t v18 = __p;
  }
  else {
    uint64_t v18 = (void **)__p[0];
  }
  if (v17)
  {
    if (v33 >= 0) {
      int v19 = (void **)&v31;
    }
    else {
      int v19 = (void **)v31;
    }
    memmove(v18, v19, v17);
  }
  strcpy((char *)v18 + v17, ".thinlto.bc");
  if (v24 >= 0) {
    uint64_t v20 = __p;
  }
  else {
    uint64_t v20 = (void **)__p[0];
  }
  if (v24 >= 0) {
    uint64_t v21 = v24 & 0x7F;
  }
  else {
    uint64_t v21 = (uint64_t)__p[1];
  }
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)__dst, v20, v21, (uint64_t)&v27, 0);
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (!v27) {
    llvm::writeIndexToFile();
  }
  *(void *)&v22.__val_ = v28;
  llvm::errorCodeToError(v27, v22, a4);
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)__dst);
  sub_1CCB76C04((uint64_t)&v29, v30[0]);
  if (v33 < 0) {
    operator delete(v31);
  }
}

void sub_1CCB76BF4(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1CCB76BFC()
{
  return 1;
}

void sub_1CCB76C04(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1CCB76C04(a1, *(void *)a2);
    sub_1CCB76C04(a1, *((void *)a2 + 1));
    MEMORY[0x1D25D9CD0](*((void *)a2 + 7), 8);
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

uint64_t sub_1CCB76C74(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)(*(void *)a1 + v3);
        if (v5 != -8 && v5 != 0)
        {
          sub_1CD6633FC(v5 + 8);
          MEMORY[0x1D25D9CD0](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_1CCB76CFC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)(*(void *)a1 + v3);
        if (v5 != -8 && v5 != 0)
        {
          MEMORY[0x1D25D9CD0](*(void *)(v5 + 8), 8);
          MEMORY[0x1D25D9CD0](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_1CCB76D80(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)(*(void *)a1 + v3);
        if (v5 != -8 && v5 != 0)
        {
          sub_1CC1B4328(v5 + 8, *(void **)(v5 + 16));
          MEMORY[0x1D25D9CD0](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void sub_1CCB76E04(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1CCB76E04(a1, *a2);
    sub_1CCB76E04(a1, a2[1]);
    uint64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t sub_1CCB76E68(uint64_t **a1, unsigned __int8 *__s1, size_t __n, uint64_t a4)
{
  uint64_t v23 = a4;
  uint64_t v25 = a4;
  uint64_t v4 = *a1;
  uint64_t v5 = *((unsigned int *)*a1 + 2);
  if (v5)
  {
    int v8 = 0;
    if (__n)
    {
      size_t v9 = __n;
      uint64_t v10 = __s1;
      do
      {
        int v11 = *v10++;
        int v8 = 33 * v8 + v11;
        --v9;
      }
      while (v9);
    }
    uint64_t v12 = *v4;
    uint64_t v13 = *v4 + 8 * v5 + 8;
    int v14 = 1;
    int v15 = v8;
    while (1)
    {
      uint64_t v16 = v15 & (v5 - 1);
      size_t v17 = *(void **)(v12 + 8 * v16);
      if (v17 != (void *)-8)
      {
        if (!v17) {
          goto LABEL_15;
        }
        if (*(_DWORD *)(v13 + 4 * v16) == v8
          && __n == *v17
          && (!__n || !memcmp(__s1, (char *)v17 + *((unsigned int *)v4 + 5), __n)))
        {
          break;
        }
      }
      int v15 = v14 + v16;
      ++v14;
    }
    if (v16 != -1 && (int)v16 != v5)
    {
      std::error_code v22 = (uint64_t *)(*(void *)(v12 + 8 * (int)v16) + 8);
      uint64_t v26 = 0;
      if (sub_1CD4AD868(v22, &v25, &v26)) {
        return 1;
      }
      uint64_t v23 = v25;
    }
  }
LABEL_15:
  uint64_t v18 = (void *)a1[1][1];
  if (v18)
  {
    unint64_t v19 = *(void *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      unint64_t v20 = v18[4];
      if (v19 >= v20)
      {
        if (v20 >= v19) {
          return 1;
        }
        ++v18;
      }
      uint64_t v18 = (void *)*v18;
    }
    while (v18);
  }
  return 0;
}

BOOL sub_1CCB76FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  uint64_t v4 = sub_1CD4F8990((uint64_t *)(*(void *)a1 + 1712), &v7);
  size_t v5 = v4[2];
  if (v5 != *(void *)(a3 + 32)) {
    return 0;
  }
  if (v5) {
    return memcmp((const void *)v4[1], *(const void **)(a3 + 24), v5) == 0;
  }
  return 1;
}

uint64_t **sub_1CCB77050(llvm::StringMapImpl **a1, unsigned __int8 *a2, size_t a3, unint64_t a4, int a5)
{
  unint64_t v8 = a4;
  long long v6 = (uint64_t **)(*sub_1CCB72800(*a1, a2, a3) + 8);
  size_t v9 = (uint64_t **)&v8;
  uint64_t result = sub_1CCB770B0(v6, &v8, (uint64_t)&std::piecewise_construct, &v9);
  *((_DWORD *)result + 10) = a5;
  return result;
}

uint64_t **sub_1CCB770B0(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t ***a4)
{
  uint64_t v7 = a1 + 1;
  long long v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        size_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        long long v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      long long v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    size_t v9 = a1 + 1;
LABEL_10:
    int v11 = (uint64_t *)v9;
    size_t v9 = (uint64_t **)operator new(0x30uLL);
    void v9[4] = **a4;
    *((_DWORD *)v9 + 10) = 0;
    *size_t v9 = 0;
    v9[1] = 0;
    void v9[2] = v11;
    *uint64_t v7 = (uint64_t *)v9;
    uint64_t v12 = (uint64_t *)**a1;
    uint64_t v13 = (uint64_t *)v9;
    if (v12)
    {
      *a1 = v12;
      uint64_t v13 = *v7;
    }
    sub_1CB8358B8(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v9;
}

_DWORD *sub_1CCB77198(_DWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 62) {
      abort();
    }
    uint64_t v7 = result;
    uint64_t result = operator new(4 * a4);
    *uint64_t v7 = result;
    for (v7[2] = &result[a4]; a3 != a2; ++a2)
      *result++ = a2;
    v7[1] = result;
  }
  return result;
}

unint64_t sub_1CCB7720C(unint64_t result, int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  int v11 = (int *)result;
  while (2)
  {
    uint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          uint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v44 = *(a2 - 1);
                uint64_t v45 = *v12;
                if (*(void *)(*(void *)(**a3 + 8 * v44) + 8) > *(void *)(*(void *)(**a3 + 8 * v45) + 8))
                {
                  *uint64_t v12 = v44;
                  *(a2 - 1) = v45;
                }
                break;
              case 3:
                uint64_t v46 = **a3;
                uint64_t result = (unint64_t)sub_1CCB77A88(v12, v12 + 1, a2 - 1, v46);
                break;
              case 4:
                uint64_t result = (unint64_t)sub_1CCB77D94(v12, v12 + 1, v12 + 2, a2 - 1, a3);
                break;
              case 5:
                long long v47 = v12 + 2;
                long long v48 = v12 + 3;
                uint64_t result = (unint64_t)sub_1CCB77D94(v12, v12 + 1, v12 + 2, v12 + 3, a3);
                uint64_t v49 = *(a2 - 1);
                uint64_t v50 = **a3;
                uint64_t v51 = v12[3];
                if (*(void *)(*(void *)(v50 + 8 * v49) + 8) > *(void *)(*(void *)(v50 + 8 * v51) + 8))
                {
                  *long long v48 = v49;
                  *(a2 - 1) = v51;
                  uint64_t v52 = *v48;
                  uint64_t v53 = *v47;
                  unint64_t v54 = *(void *)(*(void *)(v50 + 8 * v52) + 8);
                  if (v54 > *(void *)(*(void *)(v50 + 8 * v53) + 8))
                  {
                    int *v47 = v52;
                    *long long v48 = v53;
                    uint64_t v55 = v12[1];
                    if (v54 > *(void *)(*(void *)(v50 + 8 * v55) + 8))
                    {
                      v12[1] = v52;
                      v12[2] = v55;
                      uint64_t v56 = *v12;
                      if (v54 > *(void *)(*(void *)(v50 + 8 * v56) + 8))
                      {
                        *uint64_t v12 = v52;
                        v12[1] = v56;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 95)
          {
            if (a5)
            {
              if (v12 != a2)
              {
                int v57 = v12 + 1;
                if (v12 + 1 != a2)
                {
                  uint64_t v58 = **a3;
                  uint64_t v59 = 4;
                  int v60 = v12;
                  do
                  {
                    uint64_t v62 = *v60;
                    uint64_t v61 = v60[1];
                    int v60 = v57;
                    unint64_t v63 = *(void *)(*(void *)(v58 + 8 * v61) + 8);
                    if (v63 > *(void *)(*(void *)(v58 + 8 * v62) + 8))
                    {
                      uint64_t v64 = v59;
                      do
                      {
                        *(int *)((char *)v12 + v64) = v62;
                        uint64_t v65 = v64 - 4;
                        if (v64 == 4)
                        {
                          int v66 = v12;
                          goto LABEL_80;
                        }
                        uint64_t v62 = *(int *)((char *)v12 + v64 - 8);
                        v64 -= 4;
                      }
                      while (v63 > *(void *)(*(void *)(v58 + 8 * v62) + 8));
                      int v66 = (int *)((char *)v12 + v65);
LABEL_80:
                      *int v66 = v61;
                    }
                    int v57 = v60 + 1;
                    v59 += 4;
                  }
                  while (v60 + 1 != a2);
                }
              }
            }
            else if (v12 != a2)
            {
              size_t v98 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v99 = **a3;
                do
                {
                  uint64_t v101 = *v11;
                  uint64_t v100 = v11[1];
                  int v11 = v98;
                  unint64_t v102 = *(void *)(*(void *)(v99 + 8 * v100) + 8);
                  if (v102 > *(void *)(*(void *)(v99 + 8 * v101) + 8))
                  {
                    unint64_t v103 = v11;
                    do
                    {
                      int *v103 = v101;
                      uint64_t v101 = *(v103 - 2);
                      --v103;
                    }
                    while (v102 > *(void *)(*(void *)(v99 + 8 * v101) + 8));
                    int *v103 = v100;
                  }
                  size_t v98 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v67 = (unint64_t)(v14 - 2) >> 1;
              BOOL v68 = *a3;
              int64_t v69 = v67;
              do
              {
                int64_t v70 = v69;
                if (v67 >= v69)
                {
                  uint64_t v71 = (2 * v69) | 1;
                  size_t v72 = &v12[v71];
                  int v73 = *v72;
                  if (2 * v70 + 2 < v14)
                  {
                    uint64_t v74 = *v68;
                    if (*(void *)(*(void *)(*v68 + 8 * v73) + 8) > *(void *)(*(void *)(*v68 + 8 * v72[1])
                                                                                      + 8))
                    {
                      int v73 = v72[1];
                      ++v72;
                      uint64_t v71 = 2 * v70 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v74 = *v68;
                  }
                  int v75 = &v12[v70];
                  uint64_t v76 = *v75;
                  unint64_t v77 = *(void *)(*(void *)(v74 + 8 * v76) + 8);
                  if (*(void *)(*(void *)(v74 + 8 * v73) + 8) <= v77)
                  {
                    do
                    {
                      size_t v78 = v72;
                      *int v75 = v73;
                      if (v67 < v71) {
                        break;
                      }
                      uint64_t v79 = (2 * v71) | 1;
                      size_t v72 = &v12[v79];
                      uint64_t v71 = 2 * v71 + 2;
                      int v73 = *v72;
                      if (v71 < v14)
                      {
                        if (*(void *)(*(void *)(v74 + 8 * v73) + 8) <= *(void *)(*(void *)(v74 + 8 * v72[1])
                                                                                          + 8))
                        {
                          uint64_t v71 = v79;
                        }
                        else
                        {
                          int v73 = v72[1];
                          ++v72;
                        }
                      }
                      else
                      {
                        uint64_t v71 = v79;
                      }
                      int v75 = v78;
                    }
                    while (*(void *)(*(void *)(v74 + 8 * v73) + 8) <= v77);
                    *size_t v78 = v76;
                    BOOL v68 = *a3;
                  }
                }
                int64_t v69 = v70 - 1;
              }
              while (v70);
              do
              {
                uint64_t v80 = 0;
                int v81 = *v12;
                uint64_t v82 = *a3;
                uint64_t v83 = v12;
                do
                {
                  size_t v84 = &v83[v80];
                  int v87 = v84[1];
                  uint64_t v85 = v84 + 1;
                  int v86 = v87;
                  uint64_t result = 2 * v80;
                  uint64_t v88 = (2 * v80) | 1;
                  uint64_t v80 = 2 * v80 + 2;
                  if (v80 < v14)
                  {
                    uint64_t result = (unint64_t)(v85 + 1);
                    if (*(void *)(*(void *)(*v82 + 8 * v86) + 8) <= *(void *)(*(void *)(*v82 + 8 * v85[1])
                                                                                       + 8))
                    {
                      uint64_t v80 = v88;
                    }
                    else
                    {
                      int v86 = v85[1];
                      ++v85;
                    }
                  }
                  else
                  {
                    uint64_t v80 = v88;
                  }
                  *uint64_t v83 = v86;
                  uint64_t v83 = v85;
                }
                while (v80 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
                if (v85 == --a2)
                {
                  int *v85 = v81;
                }
                else
                {
                  int *v85 = *a2;
                  *a2 = v81;
                  uint64_t v89 = (char *)v85 - (char *)v12 + 4;
                  if (v89 >= 5)
                  {
                    unint64_t v90 = (((unint64_t)v89 >> 2) - 2) >> 1;
                    uint64_t v91 = &v12[v90];
                    uint64_t v92 = *v91;
                    uint64_t v93 = *v68;
                    uint64_t v94 = *v85;
                    unint64_t v95 = *(void *)(*(void *)(*v68 + 8 * v94) + 8);
                    if (*(void *)(*(void *)(*v68 + 8 * v92) + 8) > v95)
                    {
                      do
                      {
                        uint64_t v96 = v91;
                        int *v85 = v92;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        uint64_t v91 = &v12[v90];
                        uint64_t v92 = *v91;
                        uint64_t result = *(void *)(*(void *)(v93 + 8 * v92) + 8);
                        uint64_t v85 = v96;
                      }
                      while (result > v95);
                      *uint64_t v96 = v94;
                    }
                  }
                }
              }
              while (v14-- > 2);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = &v12[(unint64_t)v14 >> 1];
          uint64_t v17 = **a3;
          if ((unint64_t)v13 >= 0x201)
          {
            sub_1CCB77A88(v11, &v11[(unint64_t)v14 >> 1], a2 - 1, v17);
            sub_1CCB77A88(v11 + 1, v16 - 1, a2 - 2, **a3);
            sub_1CCB77A88(v11 + 2, &v11[v15 + 1], a2 - 3, **a3);
            uint64_t result = (unint64_t)sub_1CCB77A88(v16 - 1, v16, &v11[v15 + 1], **a3);
            int v18 = *v11;
            *int v11 = *v16;
            *uint64_t v16 = v18;
          }
          else
          {
            uint64_t result = (unint64_t)sub_1CCB77A88(&v11[(unint64_t)v14 >> 1], v11, a2 - 1, v17);
          }
          --a4;
          int v19 = *v11;
          uint64_t v20 = **a3;
          if (a5) {
            break;
          }
          unint64_t v21 = *(void *)(*(void *)(v20 + 8 * v19) + 8);
          if (*(void *)(*(void *)(v20 + 8 * *(v11 - 1)) + 8) > v21) {
            goto LABEL_13;
          }
          if (v21 <= *(void *)(*(void *)(v20 + 8 * *(a2 - 1)) + 8))
          {
            size_t v36 = v11 + 1;
            do
            {
              uint64_t v12 = v36;
              if (v36 >= a2) {
                break;
              }
              ++v36;
            }
            while (v21 <= *(void *)(*(void *)(v20 + 8 * *v12) + 8));
          }
          else
          {
            uint64_t v12 = v11;
            do
            {
              uint64_t v35 = v12[1];
              ++v12;
            }
            while (v21 <= *(void *)(*(void *)(v20 + 8 * v35) + 8));
          }
          uint64_t v37 = a2;
          if (v12 < a2)
          {
            uint64_t v37 = a2;
            do
              uint64_t v38 = *--v37;
            while (v21 > *(void *)(*(void *)(v20 + 8 * v38) + 8));
          }
          if (v12 < v37)
          {
            int v39 = *v12;
            int v40 = *v37;
            do
            {
              *uint64_t v12 = v40;
              *uint64_t v37 = v39;
              do
              {
                uint64_t v41 = v12[1];
                ++v12;
                int v39 = v41;
              }
              while (v21 <= *(void *)(*(void *)(v20 + 8 * v41) + 8));
              do
              {
                uint64_t v42 = *--v37;
                int v40 = v42;
              }
              while (v21 > *(void *)(*(void *)(v20 + 8 * v42) + 8));
            }
            while (v12 < v37);
          }
          long long v43 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *int v11 = *v43;
          }
          a5 = 0;
          *long long v43 = v19;
        }
        unint64_t v21 = *(void *)(*(void *)(v20 + 8 * v19) + 8);
LABEL_13:
        uint64_t v22 = 0;
        do
          uint64_t v23 = v11[++v22];
        while (*(void *)(*(void *)(v20 + 8 * v23) + 8) > v21);
        char v24 = &v11[v22];
        uint64_t v25 = a2;
        if (v22 == 1)
        {
          uint64_t v25 = a2;
          do
          {
            if (v24 >= v25) {
              break;
            }
            uint64_t v27 = *--v25;
          }
          while (*(void *)(*(void *)(v20 + 8 * v27) + 8) <= v21);
        }
        else
        {
          do
            uint64_t v26 = *--v25;
          while (*(void *)(*(void *)(v20 + 8 * v26) + 8) <= v21);
        }
        if (v24 >= v25)
        {
          uint64_t v12 = &v11[v22];
        }
        else
        {
          int v28 = *v25;
          int v29 = v23;
          uint64_t v12 = v24;
          uint64_t v30 = v25;
          do
          {
            *uint64_t v12 = v28;
            *uint64_t v30 = v29;
            do
            {
              uint64_t v31 = v12[1];
              ++v12;
              int v29 = v31;
            }
            while (*(void *)(*(void *)(v20 + 8 * v31) + 8) > v21);
            do
            {
              uint64_t v32 = *--v30;
              int v28 = v32;
            }
            while (*(void *)(*(void *)(v20 + 8 * v32) + 8) <= v21);
          }
          while (v12 < v30);
        }
        char v33 = v12 - 1;
        if (v12 - 1 != v11) {
          *int v11 = *v33;
        }
        *char v33 = v19;
        if (v24 >= v25) {
          break;
        }
LABEL_34:
        uint64_t result = sub_1CCB7720C(v11, v12 - 1, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v34 = sub_1CCB77B28(v11, v12 - 1, a3);
      uint64_t result = sub_1CCB77B28(v12, a2, a3);
      if (result) {
        break;
      }
      if (!v34) {
        goto LABEL_34;
      }
    }
    a2 = v12 - 1;
    if (!v34) {
      continue;
    }
    return result;
  }
}

int *sub_1CCB77A88(int *result, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  unint64_t v6 = *(void *)(*(void *)(a4 + 8 * v4) + 8);
  unint64_t v7 = *(void *)(*(void *)(a4 + 8 * v5) + 8);
  uint64_t v8 = *a3;
  unint64_t v9 = *(void *)(*(void *)(a4 + 8 * v8) + 8);
  if (v6 <= v7)
  {
    if (v9 > v6)
    {
      *a2 = v8;
      *a3 = v4;
      uint64_t v10 = *a2;
      uint64_t v11 = *result;
      if (*(void *)(*(void *)(a4 + 8 * v10) + 8) > *(void *)(*(void *)(a4 + 8 * v11) + 8))
      {
        *uint64_t result = v10;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v9 <= v6)
    {
      *uint64_t result = v4;
      *a2 = v5;
      uint64_t v12 = *a3;
      if (*(void *)(*(void *)(a4 + 8 * v12) + 8) <= v7) {
        return result;
      }
      *a2 = v12;
    }
    else
    {
      *uint64_t result = v8;
    }
    *a3 = v5;
  }
  return result;
}

BOOL sub_1CCB77B28(int *a1, int *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(void *)(*(void *)(**a3 + 8 * v8) + 8) > *(void *)(*(void *)(**a3 + 8 * v9) + 8))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_1CCB77A88(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      sub_1CCB77D94(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      unint64_t v21 = a1 + 2;
      uint64_t v22 = a1 + 3;
      sub_1CCB77D94(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v23 = *(a2 - 1);
      uint64_t v24 = **a3;
      uint64_t v25 = a1[3];
      if (*(void *)(*(void *)(v24 + 8 * v23) + 8) > *(void *)(*(void *)(v24 + 8 * v25) + 8))
      {
        *uint64_t v22 = v23;
        *(a2 - 1) = v25;
        uint64_t v26 = *v22;
        uint64_t v27 = *v21;
        unint64_t v28 = *(void *)(*(void *)(v24 + 8 * v26) + 8);
        if (v28 > *(void *)(*(void *)(v24 + 8 * v27) + 8))
        {
          *unint64_t v21 = v26;
          *uint64_t v22 = v27;
          uint64_t v29 = a1[1];
          if (v28 > *(void *)(*(void *)(v24 + 8 * v29) + 8))
          {
            a1[1] = v26;
            a1[2] = v29;
            uint64_t v30 = *a1;
            if (v28 > *(void *)(*(void *)(v24 + 8 * v30) + 8))
            {
              *a1 = v26;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      sub_1CCB77A88(a1, a1 + 1, a1 + 2, **a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    unint64_t v17 = *(void *)(*(void *)(v13 + 8 * v15) + 8);
    if (v17 > *(void *)(*(void *)(v13 + 8 * v16) + 8))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 <= *(void *)(*(void *)(v13 + 8 * v16) + 8))
        {
          uint64_t v20 = (int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      uint64_t v20 = a1;
LABEL_13:
      *uint64_t v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

int *sub_1CCB77D94(int *a1, int *a2, int *a3, int *a4, uint64_t **a5)
{
  BOOL result = sub_1CCB77A88(a1, a2, a3, **a5);
  uint64_t v11 = *a4;
  uint64_t v12 = **a5;
  uint64_t v13 = *a3;
  if (*(void *)(*(void *)(v12 + 8 * v11) + 8) > *(void *)(*(void *)(v12 + 8 * v13) + 8))
  {
    *a3 = v11;
    *a4 = v13;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    if (*(void *)(*(void *)(v12 + 8 * v14) + 8) > *(void *)(*(void *)(v12 + 8 * v15) + 8))
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *a1;
      if (*(void *)(*(void *)(v12 + 8 * v16) + 8) > *(void *)(*(void *)(v12 + 8 * v17) + 8))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t sub_1CCB77E60()
{
  char v3 = 0;
  uint64_t v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Dump the SCCs in the ThinLTO index's callgraph";
  v1.n128_u64[1] = 46;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCEDDD8, "dump-thin-cg-sccs", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEDDD8, &dword_1CB82C000);
  char v3 = 1;
  uint64_t v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Enable global value internalization in LTO";
  v1.n128_u64[1] = 42;
  sub_1CBA9E5B0((llvm::cl::Option *)&EnableLTOInternalization, "enable-lto-internalization", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &EnableLTOInternalization, &dword_1CB82C000);
}

uint64_t sub_1CCB77F54(char **a1, long long *a2, void *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  sub_1CCB7A098((uint64_t)v24, (uint64_t)a3);
  if (v25)
  {
    if (v25 == v24)
    {
      uint64_t v18 = v17;
      (*(void (**)(void *, void *))(v24[0] + 24))(v24, v17);
    }
    else
    {
      uint64_t v18 = (void *)(*(uint64_t (**)(void))(*v25 + 16))();
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v6 = a1[1];
  char v19 = **a1;
  if (v6[23] < 0)
  {
    sub_1CB8BDF7C((uint64_t)&v20, *(const void **)v6, *((void *)v6 + 1));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    uint64_t v21 = *((void *)v6 + 2);
    long long v20 = v7;
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_1CB8BDF7C((uint64_t)&v22, *(const void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v22 = *a2;
    uint64_t v23 = *((void *)a2 + 2);
  }
  uint64_t v8 = v18;
  if (v18)
  {
    if (v18 == v17)
    {
      uint64_t v27 = v26;
      (*(void (**)(void *, void *))(v17[0] + 24))(v17, v26);
      uint64_t v8 = v27;
    }
    else
    {
      uint64_t v27 = v18;
      uint64_t v18 = 0;
    }
  }
  else
  {
    uint64_t v27 = 0;
  }
  char v9 = v19;
  char v28 = v19;
  long long v29 = v20;
  uint64_t v10 = v21;
  long long v20 = 0uLL;
  uint64_t v21 = 0;
  long long __p = v22;
  uint64_t v30 = v10;
  uint64_t v32 = v23;
  long long v22 = 0uLL;
  uint64_t v23 = 0;
  uint64_t v11 = operator new(0x60uLL);
  uint64_t v12 = v11;
  uint64_t v13 = (void (**)(void *))&unk_1F262CA20;
  *uint64_t v11 = &unk_1F262CA20;
  uint64_t v14 = v11 + 1;
  if (v8)
  {
    if (v8 == v26)
    {
      v11[4] = v14;
      (*(void (**)(void *))(v26[0] + 24))(v26);
      char v9 = v28;
    }
    else
    {
      v11[4] = v8;
      uint64_t v27 = 0;
    }
  }
  else
  {
    v11[4] = 0;
  }
  *((unsigned char *)v12 + 40) = v9;
  *((_OWORD *)v12 + 3) = v29;
  int v12[8] = v30;
  long long v29 = 0uLL;
  uint64_t v30 = 0;
  *(_OWORD *)(v12 + 9) = __p;
  v12[11] = v32;
  long long __p = 0uLL;
  uint64_t v32 = 0;
  BOOL v34 = v12;
  if (v33 == a3)
  {
LABEL_27:
    (*(void (**)(void *, void *))(*v12 + 40))(v12, v14);
    goto LABEL_30;
  }
  uint64_t v15 = (void *)a3[3];
  if (v15 == a3)
  {
    (*(void (**)(void *, void *))(*a3 + 24))(a3, v33);
    (*(void (**)(void))(*(void *)a3[3] + 32))(a3[3]);
    uint64_t v13 = (void (**)(void *))v33[0];
    a3[3] = v34;
    BOOL v34 = v33;
  }
  else
  {
    BOOL v34 = (void *)a3[3];
    a3[3] = v12;
    if (v15 != v33)
    {
      if (!v15) {
        goto LABEL_30;
      }
      uint64_t v12 = v15;
      goto LABEL_27;
    }
  }
  v13[4](v33);
LABEL_30:
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete((void *)v29);
  }
  if (v27 == v26)
  {
    (*(void (**)(void *, void *))(v26[0] + 32))(v26, v14);
  }
  else if (v27)
  {
    (*(void (**)(void))(*v27 + 40))();
  }
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)v22);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)v20);
  }
  if (v18 == v17)
  {
    (*(void (**)(void *, void *))(v17[0] + 32))(v17, v14);
  }
  else if (v18)
  {
    (*(void (**)(void))(*v18 + 40))();
  }
  uint64_t result = (uint64_t)v25;
  if (v25 == v24) {
    return (*(uint64_t (**)(void *, void *))(v24[0] + 32))(v24, v14);
  }
  if (v25) {
    return (*(uint64_t (**)(void))(*v25 + 40))();
  }
  return result;
}

llvm::raw_ostream *llvm::lto::finalizeOptimizationRemarks@<X0>(llvm::raw_ostream *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)result;
  if (*(void *)result)
  {
    *(unsigned char *)(v3 + 24) = 1;
    uint64_t result = *(llvm::raw_ostream **)(v3 + 136);
    uint64_t v4 = (const char *)*((void *)result + 2);
    if (*((const char **)result + 4) != v4)
    {
      *((void *)result + 4) = v4;
      uint64_t result = (llvm::raw_ostream *)llvm::raw_ostream::flush_tied_then_write(result, v4);
    }
  }
  *a2 = 0;
  return result;
}

void llvm::lto::backend(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, llvm::Type **a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  __p[57] = *(void **)MEMORY[0x1E4F143B8];
  sub_1CCB78798((uint64_t)&v21, a1, (uint64_t)a4);
  if (v22)
  {
    *a6 = v21;
  }
  else
  {
    sub_1CCB78908((uint64_t *)&v14, a1, v21, (uint64_t)a4);
    uint64_t v12 = v14;
    if (!*(unsigned char *)(a1 + 439))
    {
      memset(__p, 0, 24);
      llvm::lto::opt(a1, (uint64_t)v14, 0, (uint64_t)a4);
    }
    if (a3 != 1)
    {
      sub_1CCB745EC((uint64_t)v18, a2);
      llvm::ThreadPool::ThreadPool((uint64_t)__p, a3);
      int v17 = 0;
      uint64_t v13 = v12[1];
      v15[0] = __p;
      v15[1] = a1;
      uint64_t v15[2] = &v16;
      uint64_t v15[3] = v18;
      v15[4] = a5;
      v15[5] = &v17;
      uint64_t v16 = v13;
      llvm::SplitModule(a4, a3, (uint64_t)sub_1CCB7AE54, (uint64_t)v15, 0);
      llvm::ThreadPool::wait((llvm::ThreadPool *)__p);
      llvm::ThreadPool::~ThreadPool((llvm::ThreadPool *)__p);
    }
    sub_1CCB745EC((uint64_t)v19, a2);
    sub_1CCB78CCC(a1, (uint64_t)v12, (uint64_t)v19, 0, a4);
    if (v20 == v19)
    {
      (*(void (**)(void *))(v19[0] + 32))(v19);
    }
    else if (v20)
    {
      (*(void (**)(void))(*v20 + 40))();
    }
    *a6 = 0;
    if (v12) {
      (*(void (**)(void *))(*v12 + 8))(v12);
    }
  }
}

void sub_1CCB78798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = *(unsigned char *)(a2 + 519);
  int v6 = v5;
  size_t v7 = v5 & 0x7F;
  if (v6 >= 0) {
    size_t v8 = v7;
  }
  else {
    size_t v8 = *(void *)(a2 + 504);
  }
  if (v8)
  {
    if (v6 >= 0) {
      char v9 = (void *)(a2 + 496);
    }
    else {
      char v9 = *(void **)(a2 + 496);
    }
LABEL_8:
    sub_1CBF4BD94(a3, v9, v8);
    goto LABEL_12;
  }
  char v10 = *(unsigned char *)(a3 + 239);
  int v11 = v10;
  uint64_t v12 = v10 & 0x7F;
  if (v11 < 0) {
    uint64_t v12 = *(void *)(a3 + 224);
  }
  if (!v12)
  {
    char v9 = (void *)(a2 + 520);
    char v14 = *(unsigned char *)(a2 + 543);
    int v15 = v14;
    if (v14 < 0) {
      char v9 = *(void **)(a2 + 520);
    }
    size_t v16 = v14 & 0x7F;
    if (v15 >= 0) {
      size_t v8 = v16;
    }
    else {
      size_t v8 = *(void *)(a2 + 528);
    }
    goto LABEL_8;
  }
LABEL_12:
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v18 = 0;
  uint64_t v13 = llvm::TargetRegistry::lookupTarget(a3 + 216, (uint64_t)__p);
  if (!v13)
  {
    llvm::inconvertibleErrorCode(0);
    operator new();
  }
  *(unsigned char *)(a1 + 8) &= ~1u;
  *(void *)a1 = v13;
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1CCB78908(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  char v6 = *(unsigned char *)(a4 + 239);
  if (v6 >= 0) {
    uint64_t v7 = a4 + 216;
  }
  else {
    uint64_t v7 = *(void *)(a4 + 216);
  }
  if (v6 >= 0) {
    uint64_t v8 = v6 & 0x7F;
  }
  else {
    uint64_t v8 = *(void *)(a4 + 224);
  }
  int64x2_t v52 = 0uLL;
  uint64_t v53 = 0;
  llvm::SubtargetFeatures::Split(&v52, (uint64_t)"", 0);
  __int16 v51 = 261;
  uint64_t v46 = v8;
  uint64_t v47 = v7;
  v50[0] = v7;
  v50[1] = v8;
  llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v50);
  llvm::SubtargetFeatures::getDefaultSubtargetFeatures(&v52, (const llvm::Triple *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  uint64_t v9 = *(void *)(a2 + 328);
  uint64_t v10 = *(void *)(a2 + 336);
  while (v9 != v10)
  {
    char v11 = *(unsigned char *)(v9 + 23);
    BOOL v12 = v11 < 0;
    if (v11 >= 0) {
      uint64_t v13 = (unsigned __int8 *)v9;
    }
    else {
      uint64_t v13 = *(unsigned __int8 **)v9;
    }
    uint64_t v14 = v11 & 0x7F;
    if (v12) {
      uint64_t v15 = *(void *)(v9 + 8);
    }
    else {
      uint64_t v15 = v14;
    }
    llvm::SubtargetFeatures::AddFeature(&v52, v13, v15, 1);
    v9 += 24;
  }
  if (!*(unsigned char *)(a2 + 412))
  {
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
    __p[0].__r_.__value_.__l.__size_ = 0x800000000;
    llvm::Module::getModuleFlagsMetadata((llvm::Module *)a4, (uint64_t)__p);
    if (LODWORD(__p[0].__r_.__value_.__r.__words[1]))
    {
      size_t v16 = (uint64_t *)(__p[0].__r_.__value_.__r.__words[0] + 16);
      uint64_t v17 = 24 * LODWORD(__p[0].__r_.__value_.__r.__words[1]);
      while (1)
      {
        uint64_t v18 = *(void *)(*(v16 - 1) + 8);
        if (*(void *)v18 == 9)
        {
          uint64_t v19 = *(void *)(v18 + 24);
          int v20 = *(unsigned __int8 *)(v18 + 32);
          if (v19 == 0x6576654C20434950 && v20 == 108) {
            break;
          }
        }
        v16 += 3;
        v17 -= 24;
        if (!v17) {
          goto LABEL_31;
        }
      }
      uint64_t v22 = *v16;
    }
    else
    {
LABEL_31:
      uint64_t v22 = 0;
    }
    if ((std::string::size_type *)__p[0].__r_.__value_.__l.__data_ == &__p[0].__r_.__value_.__r.__words[2])
    {
      if (!v22)
      {
LABEL_34:
        uint64_t v25 = 0;
        LOBYTE(v23) = 0;
        unsigned int v24 = 0;
        goto LABEL_52;
      }
    }
    else
    {
      free(__p[0].__r_.__value_.__l.__data_);
      if (!v22) {
        goto LABEL_34;
      }
    }
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
    __p[0].__r_.__value_.__l.__size_ = 0x800000000;
    llvm::Module::getModuleFlagsMetadata((llvm::Module *)a4, (uint64_t)__p);
    if (LODWORD(__p[0].__r_.__value_.__r.__words[1]))
    {
      uint64_t v26 = (uint64_t *)(__p[0].__r_.__value_.__r.__words[0] + 16);
      uint64_t v27 = 24 * LODWORD(__p[0].__r_.__value_.__r.__words[1]);
      while (1)
      {
        uint64_t v28 = *(void *)(*(v26 - 1) + 8);
        if (*(void *)v28 == 9)
        {
          uint64_t v29 = *(void *)(v28 + 24);
          uint64_t v30 = *(unsigned __int8 *)(v28 + 32);
          if (*(void *)"PIC Level" == v29 && aPicLevel[8] == v30) {
            break;
          }
        }
        v26 += 3;
        v27 -= 24;
        if (!v27) {
          goto LABEL_47;
        }
      }
      uint64_t v32 = *v26;
    }
    else
    {
LABEL_47:
      uint64_t v32 = 0;
    }
    if ((std::string::size_type *)__p[0].__r_.__value_.__l.__data_ == &__p[0].__r_.__value_.__r.__words[2])
    {
      if (!v32)
      {
LABEL_50:
        LOBYTE(v23) = 0;
        unsigned int v24 = 0;
        goto LABEL_51;
      }
    }
    else
    {
      free(__p[0].__r_.__value_.__l.__data_);
      if (!v32) {
        goto LABEL_50;
      }
    }
    uint64_t v44 = *(void *)(v32 + 128);
    uint64_t v45 = (void *)(v44 + 24);
    if (*(_DWORD *)(v44 + 32) >= 0x41u) {
      uint64_t v45 = (void *)*v45;
    }
    unsigned int v24 = 0;
    LOBYTE(v23) = *(_DWORD *)v45 != 0;
    goto LABEL_51;
  }
  int v23 = *(_DWORD *)(a2 + 408);
  unsigned int v24 = v23 & 0xFFFFFF00;
LABEL_51:
  uint64_t v25 = 0x100000000;
LABEL_52:
  if (*(unsigned char *)(a2 + 420))
  {
    unint64_t v35 = 0;
    unsigned int v34 = *(_DWORD *)(a2 + 416);
    uint64_t v36 = 0x100000000;
  }
  else
  {
    uint64_t CodeModel = llvm::Module::getCodeModel((llvm::Module *)a4);
    unsigned int v34 = CodeModel;
    unint64_t v35 = CodeModel & 0xFFFFFF0000000000;
    uint64_t v36 = CodeModel & 0xFF00000000;
  }
  char v37 = *(unsigned char *)(a2 + 23);
  BOOL v38 = v37 < 0;
  if (v37 >= 0) {
    uint64_t v39 = a2;
  }
  else {
    uint64_t v39 = *(void *)a2;
  }
  uint64_t v40 = v37 & 0x7F;
  if (v38) {
    uint64_t v41 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v41 = v40;
  }
  sub_1CD4FB688((std::string *)v52.i64[0], (std::string *)v52.i64[1], ",", 1uLL, __p);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v42 = __p;
  }
  else {
    uint64_t v42 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t size = *((unsigned char *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    uint64_t size = __p[0].__r_.__value_.__l.__size_;
  }
  *a1 = sub_1CD454388(a3, v47, v46, v39, v41, (uint64_t)v42, size, a2 + 24, v25 | v24 | v23, v35 | v36 | v34, *(_DWORD *)(a2 + 424), 0);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
  sub_1CB8338B8((void ***)__p);
}

uint64_t sub_1CCB78CCC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, llvm::Type **a5)
{
  v63[128] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 1112);
  if (!v10
    || (LODWORD(__p) = a4,
        uint64_t result = (*(uint64_t (**)(uint64_t, void **, llvm::Type **))(*(void *)v10 + 48))(v10, &__p, a5),
        result))
  {
    if (dword_1EBCEDFD8 == 1)
    {
      memset(v54, 0, sizeof(v54));
      __leuint64_t n = 0uLL;
      long long __p = 0;
      llvm::embedBitcodeInModule(a5, (llvm::LLVMContext *)v54, 1, 0, (uint64_t)&__p);
      if (__p)
      {
        *(void *)&__leuint64_t n = __p;
        operator delete(__p);
      }
    }
    uint64_t v53 = 0;
    char v12 = *(unsigned char *)(a1 + 687);
    int v13 = v12;
    if (v12 >= 0) {
      uint64_t v14 = (const void *)(a1 + 664);
    }
    else {
      uint64_t v14 = *(const void **)(a1 + 664);
    }
    size_t v15 = v12 & 0x7F;
    if (v13 >= 0) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = *(void *)(a1 + 672);
    }
    long long __p = v63;
    __leuint64_t n = xmmword_1CFB1BC20;
    if (v16 >= 0x401) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v17 = 0;
    if (v16)
    {
      memcpy(v63, v14, v16);
      uint64_t v17 = __len;
    }
    *(void *)&__leuint64_t n = v17 + v16;
    char v18 = *(unsigned char *)(a1 + 639);
    int v19 = v18;
    uint64_t v20 = v18 & 0x7F;
    if (v19 < 0) {
      uint64_t v20 = *(void *)(a1 + 624);
    }
    if (!v20)
    {
      std::string::operator=((std::string *)(a2 + 1192), (const std::string *)(a1 + 640));
      goto LABEL_44;
    }
    std::system_category();
    LOWORD(v57) = 260;
    *(void *)&long long __dst = a1 + 616;
    *(void *)&v52.__val_ = llvm::sys::fs::create_directories((void **)&__dst, 1, 504);
    v52.__cat_ = v21;
    if (v52.__val_)
    {
      uint64_t v58 = "Failed to create directory ";
      __int16 v60 = 259;
      __int16 v49 = 260;
      v47[0] = (llvm::legacy::PassManagerImpl *)(a1 + 616);
      sub_1CD3E3950((uint64_t *)&v58, (uint64_t *)v47, (uint64_t)v50);
      v45.__r_.__value_.__r.__words[0] = (std::string::size_type)": ";
      __int16 v46 = 259;
      sub_1CD3E3950(v50, (uint64_t *)&v45, (uint64_t)v39);
      std::error_code::message(&v42, &v52);
      __int16 v44 = 260;
      long long v43 = &v42;
      sub_1CD3E3950((uint64_t *)v39, (uint64_t *)&v43, (uint64_t)&__dst);
      llvm::report_fatal_error((llvm *)&__dst, (const llvm::Twine *)1);
    }
    char v22 = *(unsigned char *)(a1 + 639);
    int v23 = v22;
    if (v22 >= 0) {
      unsigned int v24 = (const void *)(a1 + 616);
    }
    else {
      unsigned int v24 = *(const void **)(a1 + 616);
    }
    size_t v25 = v22 & 0x7F;
    if (v23 >= 0) {
      size_t v26 = v25;
    }
    else {
      size_t v26 = *(void *)(a1 + 624);
    }
    *(void *)&__leuint64_t n = 0;
    if (*((void *)&__len + 1) < v26) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v27 = 0;
    if (v26)
    {
      memcpy(__p, v24, v26);
      uint64_t v27 = __len;
    }
    *(void *)&__leuint64_t n = v27 + v26;
    std::to_string(&v45, a4);
    uint64_t v28 = std::string::append(&v45, ".dwo");
    std::string::size_type v29 = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v47 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    std::string::size_type v48 = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    LOWORD(v57) = 260;
    *(void *)&long long __dst = v47;
    __int16 v40 = 257;
    __int16 v51 = 257;
    __int16 v60 = 257;
    llvm::sys::path::append(&__p, 0, (const char **)&__dst, (void **)v39, (uint64_t)v50, (uint64_t)&v58);
    if (SHIBYTE(v48) < 0) {
      operator delete(v47[0]);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    size_t v30 = __len;
    if ((unint64_t)__len >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    uint64_t v31 = __p;
    if ((unint64_t)__len >= 0x17)
    {
      uint64_t v33 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if (((unint64_t)__len | 7) != 0x17) {
        uint64_t v33 = __len | 7;
      }
      uint64_t v34 = v33 + 1;
      p_dst = (long long *)operator new(v33 + 1);
      *((void *)&__dst + 1) = v30;
      unint64_t v56 = v34 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v56) = __len;
      p_dst = &__dst;
      if (!(void)__len) {
        goto LABEL_41;
      }
    }
    memmove(p_dst, v31, v30);
LABEL_41:
    *((unsigned char *)p_dst + v30) = 0;
    unint64_t v35 = (void **)(a2 + 1192);
    if (*(char *)(a2 + 1215) < 0) {
      operator delete(*v35);
    }
    *(_OWORD *)unint64_t v35 = __dst;
    *(void *)(a2 + 1208) = v56;
LABEL_44:
    if ((void)__len)
    {
      v52.__val_ = 0;
      v52.__cat_ = std::system_category();
      operator new();
    }
    LODWORD(__dst) = a4;
    uint64_t v36 = *(void *)(a3 + 24);
    if (v36)
    {
      (*(void (**)(const char **__return_ptr))(*(void *)v36 + 48))(&v58);
      char v37 = v58;
      if (v59)
      {
        BOOL v38 = 0;
        uint64_t v58 = 0;
        if (v37)
        {
          uint64_t v41 = v37;
          llvm::report_fatal_error((uint64_t *)&v41);
        }
      }
      else
      {
        BOOL v38 = v58;
      }
      std::string::operator=((std::string *)(a2 + 1288), (const std::string *)(v38 + 16));
      llvm::legacy::PassManager::PassManager((llvm::legacy::PassManager *)v47);
    }
    sub_1CB920400();
    llvm::report_fatal_error((llvm *)"Failed to setup codegen", (const llvm::Twine *)1);
  }
  return result;
}

void llvm::lto::thinBackend(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t **a4@<X3>, const llvm::ModuleSummaryIndex *a5@<X4>, uint64_t a6@<X7>, void *a7@<X8>, uint64_t a8)
{
  v45[8] = *MEMORY[0x1E4F143B8];
  unsigned int v38 = a2;
  v37[1] = a6;
  sub_1CCB78798((uint64_t)&v43, a1, (uint64_t)a4);
  if (v44)
  {
    *a7 = v43;
    return;
  }
  sub_1CCB78908(v37, a1, v43, (uint64_t)a4);
  char v13 = *(unsigned char *)(a1 + 711);
  int v14 = v13;
  if (v13 >= 0) {
    size_t v15 = (const std::string::value_type *)(a1 + 688);
  }
  else {
    size_t v15 = *(const std::string::value_type **)(a1 + 688);
  }
  std::string::size_type v16 = v13 & 0x7F;
  if (v14 >= 0) {
    std::string::size_type v17 = v16;
  }
  else {
    std::string::size_type v17 = *(void *)(a1 + 696);
  }
  char v18 = *(unsigned char *)(a1 + 783);
  int v19 = v18;
  if (v18 >= 0) {
    uint64_t v20 = a1 + 760;
  }
  else {
    uint64_t v20 = *(void *)(a1 + 760);
  }
  uint64_t v21 = v18 & 0x7F;
  if (v19 >= 0) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = *(void *)(a1 + 768);
  }
  llvm::lto::setupLLVMOptimizationRemarks(*a4, v15, v17, v20, v22, *(unsigned __int8 *)(a1 + 736), (uint64_t)&v41, *(void *)(a1 + 744), *(void *)(a1 + 752), v38);
  if (v42)
  {
    uint64_t v26 = v41;
    uint64_t v41 = 0;
    *a7 = v26;
  }
  else
  {
    uint64_t v23 = v41;
    uint64_t v41 = 0;
    uint64_t v36 = (llvm::ToolOutputFile::CleanupInstaller *)v23;
    llvm::Module::setPartialSampleProfileRatio((llvm::Module *)a4, a5);
    if (!*(unsigned char *)(a1 + 439))
    {
      uint64_t v24 = *(void *)(a1 + 952);
      if (!v24
        || (LODWORD(v45[0]) = v38,
            ((*(uint64_t (**)(uint64_t, void *, uint64_t **))(*(void *)v24 + 48))(v24, v45, a4) & 1) != 0))
      {
        v33[0] = a1;
        v33[1] = &v38;
        v33[2] = a5;
        void v33[3] = a8;
        v33[4] = a3;
        if (!byte_1EBCEDF18)
        {
          char v25 = *(_DWORD *)(v37[0] + 492) == 3
             && *(_DWORD *)(v37[0] + 544)
             && llvm::Module::getPIELevel((llvm::Module *)a4) == 0;
          llvm::renameModuleForThinLTO((uint64_t)a4, (uint64_t)a5, v25, 0);
        }
        uint64_t v36 = 0;
        sub_1CCB79D8C((uint64_t)a7, (uint64_t)v33, (uint64_t)a4, v37[0]);
      }
      if (!v23)
      {
        *a7 = 0;
        uint64_t v34 = 0;
        goto LABEL_41;
      }
      *(unsigned char *)(v23 + 24) = 1;
      uint64_t v31 = *(llvm::raw_ostream **)(v23 + 136);
      uint64_t v32 = (const char *)*((void *)v31 + 2);
      if (*((const char **)v31 + 4) != v32)
      {
        *((void *)v31 + 4) = v32;
        llvm::raw_ostream::flush_tied_then_write(v31, v32);
      }
      *a7 = 0;
      uint64_t v34 = 0;
      size_t v30 = &v34;
LABEL_40:
      sub_1CBAD7E10((int)v30, (llvm::ToolOutputFile::CleanupInstaller *)v23);
      goto LABEL_41;
    }
    uint64_t v27 = v37[0];
    sub_1CCB745EC((uint64_t)v39, a3);
    sub_1CCB78CCC(a1, v27, (uint64_t)v39, v38, (llvm::Type **)a4);
    if (v40 == v39)
    {
      (*(void (**)(void *))(v39[0] + 32))(v39);
    }
    else if (v40)
    {
      (*(void (**)(void))(*v40 + 40))();
    }
    if (v23)
    {
      *(unsigned char *)(v23 + 24) = 1;
      uint64_t v28 = *(llvm::raw_ostream **)(v23 + 136);
      std::string::size_type v29 = (const char *)*((void *)v28 + 2);
      if (*((const char **)v28 + 4) != v29)
      {
        *((void *)v28 + 4) = v29;
        llvm::raw_ostream::flush_tied_then_write(v28, v29);
      }
      *a7 = 0;
      uint64_t v35 = 0;
      size_t v30 = &v35;
      goto LABEL_40;
    }
    *a7 = 0;
    uint64_t v35 = 0;
  }
LABEL_41:
  sub_1CD69CB60((uint64_t)&v41);
  if (v37[0]) {
    (*(void (**)(uint64_t))(*(void *)v37[0] + 8))(v37[0]);
  }
  if ((v44 & 1) != 0 && v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
}

void sub_1CCB79D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  llvm::lto::opt(*(void *)a2, a4, **(unsigned int **)(a2 + 8), a3);
}

uint64_t llvm::lto::findThinLTOModule@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v3 = a1[1];
  v9[0] = *a1;
  v9[1] = v3;
  llvm::getBitcodeModuleList(v9, (uint64_t)v10);
  uint64_t v4 = v10[0];
  if (v11)
  {
    v10[0] = 0;
    *(unsigned char *)(a2 + 64) |= 1u;
    *(void *)a2 = v4;
  }
  else
  {
    ThinLTOModule = llvm::lto::findThinLTOModule(v10[0], (v10[1] - v10[0]) >> 6);
    if (!ThinLTOModule)
    {
      llvm::inconvertibleErrorCode(0);
      operator new();
    }
    *(unsigned char *)(a2 + 64) &= ~1u;
    long long v7 = *((_OWORD *)ThinLTOModule + 1);
    *(_OWORD *)a2 = *(_OWORD *)ThinLTOModule;
    *(_OWORD *)(a2 + 16) = v7;
    long long v8 = *((_OWORD *)ThinLTOModule + 3);
    *(_OWORD *)(a2 + 32) = *((_OWORD *)ThinLTOModule + 2);
    *(_OWORD *)(a2 + 48) = v8;
  }
  return sub_1CC1EB7C0((uint64_t)v10);
}

uint64_t sub_1CCB7A098(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1CCB7A130(uint64_t a1)
{
  *(void *)a1 = &unk_1F262CA20;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v2 = a1 + 8;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 8);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

void sub_1CCB7A1F4(uint64_t a1)
{
  *(void *)a1 = &unk_1F262CA20;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v2 = a1 + 8;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 8);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CCB7A2D8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x60uLL);
  void *v2 = &unk_1F262CA20;
  sub_1CCB7A868((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_1CCB7A32C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F262CA20;
  return sub_1CCB7A868((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_1CCB7A358(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v2 = a1 + 8;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result == v2)
  {
    char v5 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 32);
    return v5(a1 + 8);
  }
  else if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v4();
  }
  return result;
}

void sub_1CCB7A428(void **__p)
{
  if (*((char *)__p + 95) < 0) {
    operator delete(__p[9]);
  }
  uint64_t v2 = (char *)(__p + 1);
  if (*((char *)__p + 71) < 0) {
    operator delete(__p[6]);
  }
  uint64_t v3 = (char *)__p[4];
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))((char *)__p + 8);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }

  operator delete(__p);
}

uint64_t sub_1CCB7A4E0(const std::string *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *a2;
  std::string::size_type size = a1[1].__r_.__value_.__l.__size_;
  if (!size
    || (LODWORD(v33.__r_.__value_.__l.__data_) = *a2,
        uint64_t result = (*(uint64_t (**)(std::string::size_type, std::string *, uint64_t))(*(void *)size + 48))(size, &v33, a3), result))
  {
    memset(&__p, 0, sizeof(__p));
    unint64_t v8 = *(unsigned __int8 *)(a3 + 191);
    if ((v8 & 0x80u) == 0) {
      size_t v9 = v8 & 0x7F;
    }
    else {
      size_t v9 = *(void *)(a3 + 176);
    }
    if (v9 == 9)
    {
      if ((v8 & 0x80) != 0)
      {
        uint64_t v10 = *(const void **)(a3 + 168);
        unint64_t v8 = *(void *)(a3 + 176);
      }
      else
      {
        uint64_t v10 = (const void *)(a3 + 168);
      }
      if (v8 >= 9) {
        size_t v11 = 9;
      }
      else {
        size_t v11 = v8;
      }
      BOOL v12 = memcmp(v10, "ld-temp.o", v11) == 0;
      if (v8 != 9) {
        BOOL v12 = 0;
      }
      if (v12) {
        goto LABEL_26;
      }
    }
    if (!a1[1].__r_.__value_.__s.__data_[16])
    {
LABEL_26:
      std::string::operator=(&__p, a1 + 2);
      if (v5 != -1)
      {
        if (v5)
        {
          size_t v15 = &v33.__r_.__value_.__s.__data_[21];
          do
          {
            *--size_t v15 = (v5 % 0xA) | 0x30;
            BOOL v16 = v5 > 9;
            v5 /= 0xAuLL;
          }
          while (v16);
        }
        else
        {
          size_t v15 = &v33.__r_.__value_.__s.__data_[20];
          v33.__r_.__value_.__s.__data_[20] = 48;
        }
        sub_1CC028D80(&v26, v15, &v33.__r_.__value_.__s.__data_[21], (char *)&v33.__r_.__value_.__r.__words[2] + 5 - v15);
        std::string::size_type v17 = std::string::append(&v26, ".");
        std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v19 = &v33;
        }
        else {
          int v19 = (std::string *)v33.__r_.__value_.__r.__words[0];
        }
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v20 = *((unsigned char *)&v33.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          std::string::size_type v20 = v33.__r_.__value_.__l.__size_;
        }
        std::string::append(&__p, (const std::string::value_type *)v19, v20);
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v26.__r_.__value_.__l.__data_);
        }
      }
    }
    else
    {
      char v13 = &v33;
      sub_1CB907098((uint64_t)&v33, v9 + 1);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        char v13 = (std::string *)v33.__r_.__value_.__r.__words[0];
      }
      if (v9)
      {
        if (*(char *)(a3 + 191) >= 0) {
          int v14 = (const void *)(a3 + 168);
        }
        else {
          int v14 = *(const void **)(a3 + 168);
        }
        memmove(v13, v14, v9);
      }
      *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v9) = 46;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v33;
    }
    sub_1CB906918((const void **)&__p.__r_.__value_.__l.__data_, (const void **)&a1[3].__r_.__value_.__l.__data_, (uint64_t)&v33);
    uint64_t v21 = std::string::append(&v33, ".bc");
    std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)size_t v30 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    uint64_t v31 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    v29.__val_ = 0;
    v29.__cat_ = std::system_category();
    if (v31 >= 0) {
      uint64_t v23 = v30;
    }
    else {
      uint64_t v23 = (void **)v30[0];
    }
    if (v31 >= 0) {
      uint64_t v24 = HIBYTE(v31) & 0x7F;
    }
    else {
      uint64_t v24 = (uint64_t)v30[1];
    }
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v33, v23, v24, (uint64_t)&v29, 0);
    if (!v29.__val_) {
      llvm::WriteBitcodeToFile();
    }
    sub_1CD5C0A90(v28, (uint64_t *)v30);
    std::error_code::message(&v25, &v29);
    __int16 v27 = 260;
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
    sub_1CCB7A8F4(v28[0], (size_t)v28[1], (llvm::Twine *)&v26);
  }
  return result;
}

uint64_t sub_1CCB7A868(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CCB7A098(a1, a2);
  *(unsigned char *)(v4 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = v4 + 40;
  if (*(char *)(a2 + 63) < 0)
  {
    sub_1CB8BDF7C(v5, *(const void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(v5 + 16) = *(void *)(a2 + 56);
    *(_OWORD *)uint64_t v5 = v6;
  }
  long long v7 = (_OWORD *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v7, *(const void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *long long v7 = v8;
  }
  return a1;
}

void sub_1CCB7A8F4(llvm *a1, size_t a2, llvm::Twine *a3)
{
  long long v6 = (llvm::raw_ostream *)llvm::errs(a1);
  long long v7 = sub_1CB8E509C(v6, "failed to open ");
  long long v8 = sub_1CD5D5C70(v7, a1, a2);
  size_t v9 = sub_1CB8E509C(v8, ": ");
  uint64_t v10 = sub_1CD69E624(v9, a3);
  size_t v11 = sub_1CD4B4374(v10, 10);
  BOOL v12 = (llvm::raw_ostream *)llvm::errs(v11);
  sub_1CD69E02C(v12);
  exit(1);
}

void sub_1CCB7A95C()
{
}

void sub_1CCB7A9F4(void *a1)
{
  *a1 = &unk_1F262CA98;
  llvm::AAResults::~AAResults((llvm::AAResults *)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCB7AA58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return llvm::AAResults::invalidate(a1 + 8, a2, a3, a4);
}

void sub_1CCB7AA60(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char **sub_1CCB7AB08(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v5 = 32 * v3;
    uint64_t v6 = v2 - 32;
    do
    {
      uint64_t v7 = *(char **)&v6[v5 + 24];
      if (&v6[v5] == v7)
      {
        (*(void (**)(char *))(*(void *)&v6[v5] + 32))(&v6[v5]);
      }
      else if (v7)
      {
        (*(void (**)(char *))(*(void *)v7 + 40))(v7);
      }
      v5 -= 32;
    }
    while (v5);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CCB7ABD0(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 8 * v3;
      do
      {
        uint64_t v6 = *(void *)(*(void *)a1 + v4);
        if (v6) {
          BOOL v7 = v6 == -8;
        }
        else {
          BOOL v7 = 1;
        }
        if (!v7)
        {
          if (*(char *)(v6 + 31) < 0) {
            operator delete(*(void **)(v6 + 8));
          }
          MEMORY[0x1D25D9CD0]();
        }
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

void *sub_1CCB7AC70(void *a1)
{
  return a1;
}

void *sub_1CCB7ACBC(void *a1)
{
  return a1;
}

uint64_t *sub_1CCB7AD08(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v4 = 32 * v2;
    uint64_t v5 = (uint64_t *)(v3 + 8);
    do
    {
      uint64_t v6 = *(v5 - 1);
      if (v6 != -4096 && v6 != -8192)
      {
        uint64_t v8 = v4;
        size_t v9 = v5;
        sub_1CBFA50F4(v5);
        uint64_t v4 = v8;
        uint64_t v5 = v9;
      }
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
    uint64_t v3 = *a1;
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  return a1;
}

void *sub_1CCB7AD88(void *a1)
{
  return a1;
}

uint64_t *sub_1CCB7ADD4(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v5 = 32 * v2;
    uint64_t v6 = (uint64_t *)(v3 + 8);
    do
    {
      if ((*(v6 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v7 = v5;
        uint64_t v8 = v6;
        sub_1CC07AE64(v6);
        uint64_t v5 = v7;
        uint64_t v6 = v8;
      }
      v6 += 4;
      v5 -= 32;
    }
    while (v5);
    uint64_t v3 = *a1;
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  return a1;
}

void sub_1CCB7AE54(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  v11[1] = 0;
  uint64_t v11[2] = 0;
  uint64_t v10 = v11;
  v11[0] = &v12;
  int v3 = 0;
  char v7 = 0;
  uint64_t v8 = 0;
  int v9 = 0;
  uint64_t v2 = &unk_1F2646FA8;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  llvm::WriteBitcodeToFile();
}

void *sub_1CCB7B158(void *a1)
{
  *a1 = &unk_1F262CB00;
  uint64_t v2 = (void *)a1[5];
  if (v2 != a1 + 8) {
    free(v2);
  }
  return a1;
}

void sub_1CCB7B1AC(void *a1)
{
  *a1 = &unk_1F262CB00;
  uint64_t v2 = (void *)a1[5];
  if (v2 != a1 + 8) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

char *sub_1CCB7B220(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v2 = &unk_1F262CB00;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((void *)v2 + 5) = v2 + 64;
  *((void *)v2 + 6) = 0;
  *((void *)v2 + 7) = 0;
  if (*(void *)(a1 + 48)) {
    sub_1CC223970((uint64_t)(v2 + 40), a1 + 40);
  }
  *((_DWORD *)v2 + 16) = *(_DWORD *)(a1 + 64);
  return v2;
}

uint64_t sub_1CCB7B2A0(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  *a2 = &unk_1F262CB00;
  int v3 = a2 + 8;
  long long v4 = *(_OWORD *)(result + 8);
  long long v5 = *(_OWORD *)(result + 24);
  a2[5] = a2 + 8;
  uint64_t v6 = (uint64_t)(a2 + 5);
  *(_OWORD *)(v6 - 32) = v4;
  *(_OWORD *)(v6 - 16) = v5;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  if (*(void *)(result + 48)) {
    uint64_t result = sub_1CC223970(v6, result + 40);
  }
  _DWORD *v3 = *(_DWORD *)(v2 + 64);
  return result;
}

void sub_1CCB7B314(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2 != (void *)(a1 + 64)) {
    free(v2);
  }
}

void sub_1CCB7B330(void *__p)
{
  uint64_t v2 = (void *)__p[5];
  if (v2 != __p + 8) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CCB7B378()
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  sub_1CCB72420((llvm::LLVMContext *)v0);
}

void sub_1CCB7B5B8(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t sub_1CCB7B5C4(uint64_t a1)
{
  *(void *)a1 = &unk_1F262CB90;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1CCB7B614(uint64_t a1)
{
  *(void *)a1 = &unk_1F262CB90;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CCB7B684(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = &unk_1F262CB90;
  int v3 = v2 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v3, *(const void **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    _OWORD *v3 = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

char *sub_1CCB7B6F8(char *result, void *a2)
{
  *a2 = &unk_1F262CB90;
  uint64_t v2 = (uint64_t)(a2 + 1);
  if (result[31] < 0) {
    return (char *)sub_1CB8BDF7C(v2, *((const void **)result + 1), *((void *)result + 2));
  }
  long long v3 = *(_OWORD *)(result + 8);
  *(void *)(v2 + 16) = *((void *)result + 3);
  *(_OWORD *)uint64_t v2 = v3;
  return result;
}

void sub_1CCB7B744(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void sub_1CCB7B758(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }

  operator delete(__p);
}

void sub_1CCB7B79C(uint64_t a1)
{
  uint64_t v2 = (const void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 31);
  int v4 = v3;
  size_t v5 = v3 & 0x7F;
  if (v4 >= 0) {
    size_t v6 = v5;
  }
  else {
    size_t v6 = *(void *)(a1 + 16);
  }
  sub_1CB907098((uint64_t)v17, v6 + 8);
  if (v18 >= 0) {
    char v7 = v17;
  }
  else {
    char v7 = (uint64_t *)v17[0];
  }
  if (v6)
  {
    if (*(char *)(a1 + 31) >= 0) {
      uint64_t v8 = v2;
    }
    else {
      uint64_t v8 = *(const void **)(a1 + 8);
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, "index.bc");
  v16.__val_ = 0;
  v16.__cat_ = std::system_category();
  if (v18 >= 0) {
    int v9 = v17;
  }
  else {
    int v9 = (uint64_t *)v17[0];
  }
  if (v18 >= 0) {
    uint64_t v10 = v18 & 0x7F;
  }
  else {
    uint64_t v10 = v17[1];
  }
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v15, v9, v10, (uint64_t)&v16, 0);
  if (!v16.__val_) {
    llvm::writeIndexToFile();
  }
  sub_1CD5C0A90(v11, v17);
  std::error_code::message(&v12, &v16);
  __int16 v14 = 260;
  *(void *)&long long v13 = &v12;
  sub_1CCB7A8F4(v11[0], (size_t)v11[1], (llvm::Twine *)&v13);
}

void *sub_1CCB7BA1C(void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    char v3 = result;
    int v4 = (void *)result[3];
    size_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1CCB7BC88()
{
}

__n128 sub_1CCB7BC9C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F262CBD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CCB7BCE8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F262CBD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CCB7BD18(uint64_t a1@<X0>, std::string **a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  size_t v5 = *a2;
  int v4 = a2[1];
  v29[0] = *a2;
  v29[1] = v4;
  uint64_t v6 = **(void **)(a1 + 8);
  if (v6)
  {
    uint64_t v13 = sub_1CD6A0620(v6, v29);
    llvm::BitcodeModule::getLazyModule((llvm::BitcodeModule *)(v13 + 16), (uint64_t)a3);
  }
  else
  {
    __int16 v31 = 261;
    v30[0] = v5;
    v30[1] = v4;
    sub_1CD096690((unsigned __int8 *)v30, (llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v33);
    if (v34)
    {
      std::string v25 = "Error loading imported file ";
      p_p = v5;
      __int16 v27 = v4;
      __int16 v28 = 1283;
      v30[0] = &v25;
      v30[2] = " : ";
      __int16 v31 = 770;
      operator new();
    }
    char v7 = v33;
    uint64_t v8 = *v33;
    uint64_t v9 = v7[2] - v7[1];
    *(void *)&long long v22 = v33[1];
    *((void *)&v22 + 1) = v9;
    uint64_t v23 = (*(uint64_t (**)(void *))(v8 + 16))(v33);
    uint64_t v24 = v10;
    llvm::lto::findThinLTOModule(&v22, (uint64_t)v30);
    if (v32)
    {
      v18[0] = "Error loading imported file ";
      v18[2] = v5;
      void v18[3] = v4;
      __int16 v19 = 1283;
      v20[0] = v18;
      void v20[2] = " : ";
      __int16 v21 = 770;
      uint64_t v14 = v30[0];
      v30[0] = 0;
      uint64_t v16 = v14;
      size_t v15 = sub_1CD4FB504(&v16, &__p);
      std::string v25 = (const char *)v20;
      p_p = &__p;
      __int16 v28 = 1026;
      llvm::inconvertibleErrorCode((llvm *)v15);
      operator new();
    }
    llvm::BitcodeModule::getLazyModule((llvm::BitcodeModule *)v30, (uint64_t)a3);
    if ((a3[8] & 1) == 0)
    {
      uint64_t v11 = *(void *)(*(void *)a3 + 152);
      *(void *)(*(void *)a3 + 152) = v7;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      char v7 = 0;
    }
    if (v32)
    {
      uint64_t v12 = v30[0];
      v30[0] = 0;
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
    }
    if (v7) {
      (*(void (**)(void *))(*v7 + 8))(v7);
    }
  }
}

uint64_t sub_1CCB7C0B4()
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v2 = 0;
  char v3 = &v2;
  *(void *)&long long v4 = v5;
  v5[0] = "none";
  v5[1] = 4;
  int v6 = 0;
  char v7 = "Do not embed";
  uint64_t v8 = 12;
  uint64_t v9 = "optimized";
  uint64_t v10 = 9;
  int v11 = 1;
  uint64_t v12 = "Embed after all optimization passes";
  uint64_t v13 = 35;
  uint64_t v14 = "post-merge-pre-opt";
  uint64_t v15 = 18;
  int v16 = 2;
  std::string::size_type v17 = "Embed post merge, but before optimizations";
  uint64_t v18 = 42;
  *((void *)&v4 + 1) = 0x400000003;
  v1.n128_u64[0] = (unint64_t)"Embed LLVM bitcode in object files produced by LTO";
  v1.n128_u64[1] = 50;
  sub_1CD6A0170(&v3, (uint64_t)&v4, &v1);
  if ((void *)v4 != v5) {
    free((void *)v4);
  }
  __cxa_atexit((void (*)(void *))sub_1CD69CCA0, qword_1EBCEDF58, &dword_1CB82C000);
  LOBYTE(v3) = 0;
  v1.n128_u64[0] = (unint64_t)&v3;
  *(void *)&long long v4 = "Assume the input has already undergone ThinLTO function importing and the other pre-optimization pipeline changes.";
  *((void *)&v4 + 1) = 114;
  sub_1CD4540A0((uint64_t)&unk_1EBCEDE98, "thinlto-assume-merged", &v1, &v4);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEDE98, &dword_1CB82C000);
}

uint64_t llvm::LTOModule::LTOModule(uint64_t a1, llvm::Module **a2, long long *a3, uint64_t a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  size_t v5 = *a2;
  *a2 = 0;
  *(void *)(a1 + 32) = v5;
  long long v6 = *a3;
  *(_OWORD *)(a1 + 56) = a3[1];
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 96) = a1 + 112;
  *(void *)(a1 + 104) = 0x400000000;
  *(void *)(a1 + 144) = a1 + 160;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a4;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_DWORD *)(a1 + 276) = 8;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0x2800000000;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  llvm::ModuleSymbolTable::addModule((llvm::ModuleSymbolTable *)(a1 + 72), v5);
  return a1;
}

void llvm::LTOModule::~LTOModule(llvm::LTOModule *this)
{
  int v2 = (void *)*((void *)this + 43);
  if (v2)
  {
    *((void *)this + 44) = v2;
    operator delete(v2);
  }
  char v3 = (void *)*((void *)this + 40);
  if (v3)
  {
    *((void *)this + 41) = v3;
    operator delete(v3);
  }
  if (*((_DWORD *)this + 75))
  {
    uint64_t v4 = *((unsigned int *)this + 74);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 8 * v4;
      do
      {
        uint64_t v7 = *(void *)(*((void *)this + 36) + v5);
        if (v7 != -8 && v7 != 0) {
          MEMORY[0x1D25D9CD0]();
        }
        v5 += 8;
      }
      while (v6 != v5);
    }
  }
  free(*((void **)this + 36));
  sub_1CC0D7CD8((uint64_t)this + 256);
  uint64_t v9 = (void *)*((void *)this + 29);
  if (v9)
  {
    *((void *)this + 30) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  MEMORY[0x1D25D9CD0](*((void *)this + 25), 8);
  int v11 = (void *)*((void *)this + 22);
  if (v11)
  {
    *((void *)this + 23) = v11;
    operator delete(v11);
  }
  sub_1CCB7266C((uint64_t)this + 80);
  uint64_t v13 = *((unsigned int *)this + 26);
  if (v13)
  {
    uint64_t v14 = (uint64_t *)*((void *)this + 12);
    uint64_t v15 = 8 * v13;
    do
    {
      uint64_t v16 = *v14++;
      MEMORY[0x1D25D9CD0](v16, 8);
      v15 -= 8;
    }
    while (v15);
  }
  std::string::size_type v17 = (uint64_t *)*((void *)this + 18);
  uint64_t v18 = *((unsigned int *)this + 38);
  if (v18)
  {
    uint64_t v22 = 16 * v18;
    do
    {
      uint64_t v23 = *v17;
      v17 += 2;
      MEMORY[0x1D25D9CD0](v23, 8);
      v22 -= 16;
    }
    while (v22);
    std::string::size_type v17 = (uint64_t *)*((void *)this + 18);
  }
  if (v17 != (uint64_t *)((char *)this + 160)) {
    free(v17);
  }
  uint64_t v19 = (char *)*((void *)this + 12);
  if (v19 != (char *)this + 112) {
    free(v19);
  }
  std::string::size_type v20 = (llvm::Module *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v20)
  {
    llvm::Module::~Module(v20);
    MEMORY[0x1D25D9CE0]();
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  __int16 v21 = *(llvm::LLVMContextImpl ***)this;
  *(void *)this = 0;
  if (v21)
  {
    llvm::LLVMContext::~LLVMContext(v21, v12);
    MEMORY[0x1D25D9CE0]();
  }
}

uint64_t llvm::LTOModule::isBitcodeFile(llvm::LTOModule *this, const void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v3[0] = this;
  v3[1] = a2;
  v3[2] = "<mem>";
  v3[3] = 5;
  llvm::object::IRObjectFile::findBitcodeInMemBuffer((uint64_t)v3, (uint64_t)&v5);
  if ((v6 & 1) == 0 || !v5) {
    return 1;
  }
  uint64_t v4 = v5;
  sub_1CD4515D0(&v4);
  if (v4) {
    (*(void (**)(void *))(*v4 + 8))(v4);
  }
  return 0;
}

uint64_t llvm::LTOModule::isBitcodeFile(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  __int16 v12 = 261;
  v11[0] = a1;
  v11[1] = a2;
  sub_1CD096690((unsigned __int8 *)v11, (llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v13);
  uint64_t v2 = 0;
  if ((v14 & 1) == 0)
  {
    uint64_t v4 = v13;
    uint64_t v5 = v13[1];
    uint64_t v6 = v13[2] - v5;
    uint64_t v7 = (*(uint64_t (**)(void *))(*v13 + 16))(v13);
    v9[0] = v5;
    v9[1] = v6;
    _OWORD v9[2] = v7;
    void v9[3] = v8;
    llvm::object::IRObjectFile::findBitcodeInMemBuffer((uint64_t)v9, (uint64_t)v11);
    if ((v12 & 1) != 0 && v11[0])
    {
      uint64_t v10 = (void *)v11[0];
      sub_1CD4515D0(&v10);
      if (v10) {
        (*(void (**)(void *))(*v10 + 8))(v10);
      }
      uint64_t v2 = 0;
    }
    else
    {
      uint64_t v2 = 1;
    }
    (*(void (**)(void *))(*v4 + 8))(v4);
  }
  return v2;
}

BOOL llvm::LTOModule::isThinLTO(llvm::LTOModule *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  long long v1 = *(_OWORD *)((char *)this + 56);
  v7[0] = *(_OWORD *)((char *)this + 40);
  v7[1] = v1;
  BitcodeLTOInfo = (llvm *)llvm::getBitcodeLTOInfo(v7, (uint64_t)&v8);
  if ((v9 & 1) == 0) {
    return (_BYTE)v8 != 0;
  }
  uint64_t v6 = v8;
  uint64_t v4 = (llvm::raw_ostream *)llvm::errs(BitcodeLTOInfo);
  v5[16] = 257;
  llvm::logAllUnhandledErrors((llvm::raw_ostream *)&v6, v4, (uint64_t)v5);
  BOOL result = v6;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    return 0;
  }
  return result;
}

uint64_t llvm::LTOModule::isBitcodeForTarget(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[2] - v1;
  uint64_t v3 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  v8[0] = v1;
  v8[1] = v2;
  void v8[2] = v3;
  void v8[3] = v4;
  llvm::object::IRObjectFile::findBitcodeInMemBuffer((uint64_t)v8, (uint64_t)&v10);
  if ((v11 & 1) == 0 || (uint64_t v5 = (void *)v10, *(void *)&v10 = 0, !v5)) {
    llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)v7);
  }
  char v9 = v5;
  sub_1CD4515D0(&v9);
  if (v9) {
    (*(void (**)(void *))(*v9 + 8))(v9);
  }
  return 0;
}

char *sub_1CCB7C9EC(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(a3 + 24))
  {
    uint64_t v4 = *(char **)a3;
    *(void *)a3 = 0;
    uint64_t v7 = v4;
    uint64_t v5 = llvm::errorToErrorCodeAndEmitErrors(a2, &v7);
    v3[24] |= 1u;
    *(void *)uint64_t v3 = v5;
    *((void *)v3 + 1) = v6;
    BOOL result = v7;
    if (v7) {
      return (char *)(*(uint64_t (**)(char *))(*(void *)v7 + 8))(v7);
    }
  }
  else
  {
    result[24] &= ~1u;
    *(_OWORD *)BOOL result = *(_OWORD *)a3;
    *((void *)result + 2) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t llvm::LTOModule::getProducerString@<X0>(llvm::LTOModule *this@<X0>, llvm::MemoryBuffer *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = *((void *)this + 2) - v4;
  uint64_t v6 = (*(uint64_t (**)(llvm::LTOModule *, llvm::MemoryBuffer *))(*(void *)this + 16))(this, a2);
  v11[0] = v4;
  v11[1] = v5;
  uint64_t v11[2] = v6;
  void v11[3] = v7;
  llvm::object::IRObjectFile::findBitcodeInMemBuffer((uint64_t)v11, (uint64_t)&v13);
  if ((v14 & 1) == 0 || (uint64_t v8 = v13, *(void *)&v13 = 0, !v8)) {
    llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)v10);
  }
  *(void *)&long long v12 = v8;
  sub_1CD4515D0((void **)&v12);
  uint64_t result = v12;
  if ((void)v12) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)v12 + 8))(v12);
  }
  a3[23] = 0;
  *a3 = 0;
  return result;
}

double llvm::LTOModule::createFromFile@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  __int16 v20 = 261;
  v19[0] = a2;
  v19[1] = a3;
  sub_1CD096690((unsigned __int8 *)v19, (llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v21);
  if ((v22 & 1) == 0)
  {
    std::system_category();
    uint64_t v8 = *(void **)&v21.__val_;
LABEL_4:
    uint64_t v9 = v8[1];
    uint64_t v10 = v8[2] - v9;
    uint64_t v11 = (*(uint64_t (**)(void *))(*v8 + 16))(v8);
    *(void *)&long long v14 = v9;
    *((void *)&v14 + 1) = v10;
    uint64_t v15 = v11;
    uint64_t v16 = v12;
    llvm::LTOModule::makeLTOModule(&v14, a4, a1, 0, a5);
    (*(void (**)(void *))(*v8 + 8))(v8);
    return result;
  }
  uint64_t v8 = *(void **)&v21.__val_;
  std::error_code v18 = v21;
  if (!v21.__val_) {
    goto LABEL_4;
  }
  std::error_code::message(&v17, &v18);
  __int16 v20 = 260;
  v19[0] = &v17;
  llvm::LLVMContext::emitError((uint64_t)a1, (uint64_t)v19);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  *(unsigned char *)(a5 + 16) |= 1u;
  double result = *(double *)&v18.__val_;
  *(std::error_code *)a5 = v18;
  return result;
}

void llvm::LTOModule::makeLTOModule(_OWORD *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  long long v9 = a1[1];
  *(_OWORD *)uint64_t v36 = *a1;
  long long v37 = v9;
  llvm::object::IRObjectFile::findBitcodeInMemBuffer((uint64_t)v36, (uint64_t)v38);
  char v10 = v40;
  if (v40)
  {
    uint64_t v11 = v38[0];
    v38[0] = 0;
    if (v11)
    {
      *(void *)&long long v46 = v11;
      *(void *)&v34.__val_ = llvm::errorToErrorCode((char **)&v46);
      v34.__cat_ = v24;
      if ((void)v46) {
        (*(void (**)(void))(*(void *)v46 + 8))(v46);
      }
      std::error_code::message(&v48, &v34);
      __int16 v53 = 260;
      v50[0] = &v48;
      llvm::LLVMContext::emitError((uint64_t)a3, (uint64_t)v50);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      char v44 = -1;
      std::error_code __p = v34;
      goto LABEL_17;
    }
  }
  std::error_code v34 = *(std::error_code *)v38;
  long long v35 = v39;
  llvm::getBitcodeProducerString((uint64_t)&v34, &v48);
  sub_1CCB7C9EC((char *)v50, (uint64_t)a3, (uint64_t)&v48);
  if (v49)
  {
    std::string::size_type v12 = v48.__r_.__value_.__r.__words[0];
    v48.__r_.__value_.__r.__words[0] = 0;
    if (v12) {
      (*(void (**)(std::string::size_type))(*(void *)v12 + 8))(v12);
    }
  }
  else if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if ((v52 & 1) == 0)
  {
    *(void *)&long long v46 = &unk_1F262CC20;
    *((void *)&v46 + 1) = a3;
    *((void *)&v47 + 1) = &v46;
    char v45 = 0;
    LOBYTE(__p.__val_) = 0;
    llvm::checkBitcodeCompatibility();
  }
  long long v46 = *(_OWORD *)v38;
  long long v47 = v39;
  if (a4) {
    llvm::getLazyBitcodeModule(&v46, (uint64_t)v42);
  }
  else {
    llvm::parseBitcodeFile(&v46, (uint64_t)v42);
  }
  sub_1CC1CC3D8(a3, (uint64_t)v42, (uint64_t)&__p);
  sub_1CC1CC83C((uint64_t)v42);
  if ((v52 & 1) == 0 && SHIBYTE(v51) < 0) {
    operator delete(v50[0]);
  }
  if (v10)
  {
LABEL_17:
    if (v38[0]) {
      (*(void (**)(void *))(*(void *)v38[0] + 8))(v38[0]);
    }
  }
  char v13 = v44;
  if (v44)
  {
    uint64_t v14 = *(void *)&__p.__val_;
    if (__p.__val_)
    {
      cat = __p.__cat_;
      *(unsigned char *)(a5 + 16) |= 1u;
      *(void *)a5 = v14;
      *(void *)(a5 + 8) = cat;
      if (v13) {
        return;
      }
      goto LABEL_38;
    }
  }
  else
  {
    std::system_category();
    uint64_t v14 = *(void *)&__p.__val_;
  }
  if (*(char *)(v14 + 239) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v36, *(const void **)(v14 + 216), *(void *)(v14 + 224));
  }
  else
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)(v14 + 216);
    *(void *)&long long v37 = *(void *)(v14 + 232);
  }
  uint64_t v16 = (void *)(BYTE7(v37) & 0x7F);
  if (SBYTE7(v37) < 0) {
    uint64_t v16 = v36[1];
  }
  if (!v16)
  {
    llvm::sys::getDefaultTargetTriple((uint64_t)v38);
    if (SBYTE7(v37) < 0) {
      operator delete(v36[0]);
    }
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v38;
    *(void *)&long long v37 = v39;
  }
  __int16 v53 = 260;
  v50[0] = v36;
  llvm::Triple::Triple((llvm::Triple *)v38, (const llvm::Twine *)v50);
  v50[0] = 0;
  v50[1] = 0;
  uint64_t v51 = 0;
  std::string v17 = llvm::TargetRegistry::lookupTarget((std::string::size_type)v36, (uint64_t)v50);
  if (v17)
  {
    uint64_t v20 = (uint64_t)v17;
    memset(&v48, 0, sizeof(v48));
    llvm::SubtargetFeatures::Split((int64x2_t *)&v48, (uint64_t)"", 0);
    llvm::SubtargetFeatures::getDefaultSubtargetFeatures((int64x2_t *)&v48, (const llvm::Triple *)v38);
    sub_1CD4FB688((std::string *)v48.__r_.__value_.__l.__data_, (std::string *)v48.__r_.__value_.__l.__size_, ",", 1uLL, (std::string *)&v34);
    char v21 = 0;
    uint64_t v22 = 0;
    long long v46 = 0uLL;
    *(void *)&long long v47 = 0;
    if (v41 > 0x21)
    {
      uint64_t v23 = 0;
      goto LABEL_63;
    }
    uint64_t v23 = 0;
    if (((1 << v41) & 0x3F0000888) == 0) {
      goto LABEL_63;
    }
    char v21 = 0;
    uint64_t v22 = 0;
    if (SDWORD2(v39) > 40)
    {
      if (DWORD2(v39) == 42)
      {
        std::string v25 = "core2";
      }
      else
      {
        uint64_t v23 = 0;
        if (DWORD2(v39) != 41) {
          goto LABEL_63;
        }
        std::string v25 = "yonah";
      }
      goto LABEL_62;
    }
    if (DWORD2(v39) == 3)
    {
      if (HIDWORD(v39) != 31)
      {
        std::string v25 = "cyclone";
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v23 = 0;
      if (DWORD2(v39) != 5)
      {
LABEL_63:
        if ((SBYTE7(v37) & 0x80u) == 0) {
          std::string v26 = v36;
        }
        else {
          std::string v26 = (void **)v36[0];
        }
        if ((SBYTE7(v37) & 0x80u) == 0) {
          uint64_t v27 = BYTE7(v37) & 0x7F;
        }
        else {
          uint64_t v27 = (uint64_t)v36[1];
        }
        BOOL v28 = v21 < 0;
        if (v21 >= 0) {
          std::error_code v29 = &v46;
        }
        else {
          std::error_code v29 = v23;
        }
        uint64_t v30 = v21 & 0x7F;
        if (v28) {
          uint64_t v31 = v22;
        }
        else {
          uint64_t v31 = v30;
        }
        if ((SBYTE7(v35) & 0x80u) == 0) {
          char v32 = &v34;
        }
        else {
          char v32 = *(std::error_code **)&v34.__val_;
        }
        if ((SBYTE7(v35) & 0x80u) == 0) {
          std::string v33 = (const std::error_category *)(BYTE7(v35) & 0x7F);
        }
        else {
          std::string v33 = v34.__cat_;
        }
        sub_1CD454388(v20, (uint64_t)v26, v27, (uint64_t)v29, v31, (uint64_t)v32, (uint64_t)v33, a2, 0, 0, 2, 0);
        operator new();
      }
    }
    std::string v25 = "apple-a12";
LABEL_62:
    MEMORY[0x1D25D9630](&v46, v25);
    char v21 = BYTE7(v47);
    uint64_t v22 = *((void *)&v46 + 1);
    uint64_t v23 = (long long *)v46;
    goto LABEL_63;
  }
  atomic_ullong v18 = llvm::object::object_category(0);
  *(unsigned char *)(a5 + 16) |= 1u;
  *(void *)a5 = 1;
  *(void *)(a5 + 8) = v18;
  if (SHIBYTE(v51) < 0) {
    operator delete(v50[0]);
  }
  if (SBYTE7(v39) < 0) {
    operator delete(v38[0]);
  }
  if (SBYTE7(v37) < 0) {
    operator delete(v36[0]);
  }
  if ((v44 & 1) == 0)
  {
LABEL_38:
    uint64_t v19 = *(llvm::Module **)&__p.__val_;
    *(void *)&__p.__val_ = 0;
    if (v19)
    {
      llvm::Module::~Module(v19);
      MEMORY[0x1D25D9CE0]();
    }
  }
}

double llvm::LTOModule::createFromOpenFile@<D0>(char *a1@<X0>, int a2@<W1>, const void **a3@<X2>, const void **a4@<X3>, llvm::WritableMemoryBuffer *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return llvm::LTOModule::createFromOpenFileSlice(a1, a2, a3, a4, a5, 0, a6, a7);
}

double llvm::LTOModule::createFromOpenFileSlice@<D0>(char *a1@<X0>, int a2@<W1>, const void **a3@<X2>, const void **a4@<X3>, llvm::WritableMemoryBuffer *a5@<X4>, off_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  __int16 v23 = 261;
  v22[0] = a3;
  v22[1] = a4;
  sub_1CD097170(a5, a2, v22, (llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, a6, 0, 0, (uint64_t)&v24);
  if ((v25 & 1) == 0)
  {
    std::system_category();
    uint64_t v11 = *(void **)&v24.__val_;
LABEL_4:
    uint64_t v12 = v11[1];
    uint64_t v13 = v11[2] - v12;
    uint64_t v14 = (*(uint64_t (**)(void *))(*v11 + 16))(v11);
    *(void *)&long long v17 = v12;
    *((void *)&v17 + 1) = v13;
    uint64_t v18 = v14;
    uint64_t v19 = v15;
    llvm::LTOModule::makeLTOModule(&v17, a7, a1, 0, a8);
    (*(void (**)(void *))(*v11 + 8))(v11);
    return result;
  }
  uint64_t v11 = *(void **)&v24.__val_;
  std::error_code v21 = v24;
  if (!v24.__val_) {
    goto LABEL_4;
  }
  std::error_code::message(&v20, &v21);
  __int16 v23 = 260;
  v22[0] = (const void **)&v20;
  llvm::LLVMContext::emitError((uint64_t)a1, (uint64_t)v22);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  *(unsigned char *)(a8 + 16) |= 1u;
  double result = *(double *)&v21.__val_;
  *(std::error_code *)a8 = v21;
  return result;
}

void llvm::LTOModule::createFromBuffer(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)&long long v7 = a2;
  *((void *)&v7 + 1) = a3;
  uint64_t v8 = a5;
  uint64_t v9 = a6;
  llvm::LTOModule::makeLTOModule(&v7, a4, a1, 0, a7);
}

void llvm::LTOModule::createInLocalContext(char **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)&long long v13 = a2;
  *((void *)&v13 + 1) = a3;
  uint64_t v14 = a5;
  uint64_t v15 = a6;
  llvm::LTOModule::makeLTOModule(&v13, a4, *a1, 1, a7);
  if ((*(unsigned char *)(a7 + 16) & 1) == 0)
  {
    char v10 = *(llvm::LLVMContextImpl ****)a7;
    uint64_t v11 = *a1;
    *a1 = 0;
    uint64_t v12 = *v10;
    *char v10 = (llvm::LLVMContextImpl **)v11;
    if (v12)
    {
      llvm::LLVMContext::~LLVMContext(v12, v9);
      JUMPOUT(0x1D25D9CE0);
    }
  }
}

void llvm::LTOModule::parseSymbols(llvm::LTOModule *this)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (uint64_t *)*((void *)this + 22);
  uint64_t v2 = *((void *)this + 23) - (void)v1;
  if (v2)
  {
    uint64_t v3 = (char *)this + 72;
    uint64_t v4 = 8 * (v2 >> 3);
    do
    {
      uint64_t v5 = *v1;
      if ((*v1 & 4) != 0) {
        unint64_t v6 = 0;
      }
      else {
        unint64_t v6 = *v1 & 0xFFFFFFFFFFFFFFF8;
      }
      char SymbolFlags = llvm::ModuleSymbolTable::getSymbolFlags((uint64_t)v3, *v1);
      if ((SymbolFlags & 0x80) == 0)
      {
        char v8 = SymbolFlags;
        if (v6)
        {
          if (SymbolFlags)
          {
            llvm::LTOModule::addPotentialUndefinedSymbol((uint64_t)this, v5, *(unsigned char *)(v6 + 16) == 0);
          }
          else if (*(unsigned char *)(v6 + 16))
          {
            llvm::LTOModule::addDefinedDataSymbol(this, v5);
          }
          else
          {
            llvm::LTOModule::addDefinedFunctionSymbol(this, v5);
          }
        }
        else
        {
          __int16 v53 = v54;
          *(void *)uint64_t v54 = &v54[24];
          *(_OWORD *)&v54[8] = xmmword_1CD96DBD0;
          int v46 = 0;
          char v50 = 0;
          uint64_t v51 = 0;
          char v45 = &unk_1F2646FA8;
          int v52 = 0;
          uint64_t v48 = 0;
          uint64_t v49 = 0;
          uint64_t v47 = 0;
          llvm::ModuleSymbolTable::printSymbolName((uint64_t)v3, (llvm::raw_ostream *)&v45, v5);
          if ((unint64_t)(*(void *)&v54[8] + 1) > *(void *)&v54[16]) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(unsigned char *)(*(void *)v54 + *(void *)&v54[8]) = 0;
          char v45 = &unk_1F2646B98;
          if (v52 == 1 && v47) {
            MEMORY[0x1D25D9CB0](v47, 0x1000C8077774924);
          }
          if (v8)
          {
            llvm::LTOModule::addAsmGlobalSymbolUndef(this, *(unsigned __int8 **)v54, *(size_t *)&v54[8]);
          }
          else
          {
            if ((v8 & 2) != 0) {
              int v9 = 6144;
            }
            else {
              int v9 = 2048;
            }
            llvm::LTOModule::addAsmGlobalSymbol((uint64_t)this, *(unsigned __int8 **)v54, *(size_t *)&v54[8], v9);
          }
          if (*(unsigned char **)v54 != &v54[24]) {
            free(*(void **)v54);
          }
        }
      }
      ++v1;
      v4 -= 8;
    }
    while (v4);
  }
  char v10 = this;
  uint64_t v11 = *((unsigned int *)this + 74);
  if (v11)
  {
    for (int i = (uint64_t *)*((void *)this + 36); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    int i = (uint64_t *)*((void *)this + 36);
  }
  uint64_t v42 = *((void *)this + 36) + 8 * v11;
  if (i != (uint64_t *)v42)
  {
    uint64_t v14 = *i;
    do
    {
      uint64_t v43 = *((unsigned int *)v10 + 66);
      if (!v43) {
        goto LABEL_53;
      }
      size_t v15 = *(void *)v14;
      if (*(void *)v14)
      {
        int v16 = 0;
        size_t v17 = *(void *)v14;
        uint64_t v18 = (unsigned __int8 *)(v14 + 40);
        do
        {
          int v19 = *v18++;
          int v16 = 33 * v16 + v19;
          --v17;
        }
        while (v17);
      }
      else
      {
        int v16 = 0;
      }
      uint64_t v20 = *((void *)v10 + 32);
      int v21 = 1;
      int v22 = v16;
      while (1)
      {
        uint64_t v23 = v22 & (v43 - 1);
        std::error_code v24 = *(void **)(v20 + 8 * v23);
        if (v24 != (void *)-8)
        {
          if (!v24) {
            goto LABEL_53;
          }
          if (*(_DWORD *)(v20 + 8 * v43 + 8 + 4 * v23) == v16 && v15 == *v24)
          {
            if (!v15) {
              break;
            }
            int v25 = memcmp((const void *)(v14 + 40), (char *)v24 + *((unsigned int *)v10 + 69), v15);
            char v10 = this;
            if (!v25) {
              break;
            }
          }
        }
        int v22 = v21 + v23;
        ++v21;
      }
      if (v23 == -1 || (int)v23 == v43)
      {
LABEL_53:
        *(_OWORD *)uint64_t v54 = *(_OWORD *)(v14 + 8);
        *(_OWORD *)&v54[16] = *(_OWORD *)(v14 + 24);
        uint64_t v27 = (char *)*((void *)v10 + 30);
        unint64_t v26 = *((void *)v10 + 31);
        if ((unint64_t)v27 >= v26)
        {
          uint64_t v30 = (char *)*((void *)v10 + 29);
          uint64_t v31 = (v27 - v30) >> 5;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 59) {
            abort();
          }
          uint64_t v33 = v26 - (void)v30;
          if (v33 >> 4 > v32) {
            unint64_t v32 = v33 >> 4;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v34 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v32;
          }
          if (v34)
          {
            if (v34 >> 59) {
              sub_1CB833614();
            }
            long long v35 = (char *)operator new(32 * v34);
            char v10 = this;
          }
          else
          {
            long long v35 = 0;
          }
          long long v36 = *(_OWORD *)&v54[16];
          long long v37 = &v35[32 * v31];
          *(_OWORD *)long long v37 = *(_OWORD *)v54;
          *((_OWORD *)v37 + 1) = v36;
          unsigned int v38 = v37;
          if (v27 != v30)
          {
            do
            {
              long long v39 = *((_OWORD *)v27 - 1);
              *((_OWORD *)v38 - 2) = *((_OWORD *)v27 - 2);
              *((_OWORD *)v38 - 1) = v39;
              v38 -= 32;
              v27 -= 32;
            }
            while (v27 != v30);
            uint64_t v27 = (char *)*((void *)v10 + 29);
          }
          std::error_code v29 = v37 + 32;
          *((void *)v10 + 29) = v38;
          *((void *)v10 + 30) = v37 + 32;
          *((void *)v10 + 31) = &v35[32 * v34];
          if (v27)
          {
            operator delete(v27);
            char v10 = this;
          }
        }
        else
        {
          long long v28 = *(_OWORD *)(v14 + 24);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)(v14 + 8);
          *((_OWORD *)v27 + 1) = v28;
          std::error_code v29 = v27 + 32;
        }
        *((void *)v10 + 30) = v29;
      }
      do
      {
        uint64_t v40 = i[1];
        ++i;
        uint64_t v14 = v40;
        if (v40) {
          BOOL v41 = v14 == -8;
        }
        else {
          BOOL v41 = 1;
        }
      }
      while (v41);
    }
    while (i != (uint64_t *)v42);
  }
}

void llvm::LTOModule::parseMetadata(llvm::LTOModule *this)
{
  int v31 = 0;
  char v35 = 0;
  uint64_t v36 = 0;
  unsigned int v38 = (char *)this + 8;
  int v37 = 0;
  uint64_t v30 = &unk_1F2646F30;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  uint64_t v1 = (llvm::Module *)*((void *)this + 4);
  __p[0] = "llvm.linker.options";
  WORD4(v28) = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v1, (const char **)__p);
  if (NamedMetadata)
  {
    uint64_t v4 = NamedMetadata;
    uint64_t v5 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        uint64_t v7 = *(void *)(**(void **)(v4 + 48) + 8 * i);
        uint64_t v8 = *(unsigned int *)(v7 + 8);
        uint64_t v9 = v7;
        if (v8)
        {
          do
          {
            uint64_t v10 = *(void *)(v9 - 8 * *(unsigned int *)(v7 + 8));
            if (v33 == v34)
            {
              uint64_t v11 = llvm::raw_ostream::write((llvm::raw_ostream *)&v30, " ", 1uLL);
              long long v13 = (void *)((char *)v11 + 32);
              uint64_t v12 = (unsigned char *)*((void *)v11 + 4);
            }
            else
            {
              *unint64_t v34 = 32;
              uint64_t v12 = ++v34;
              uint64_t v11 = (llvm::raw_ostream *)&v30;
              long long v13 = &v34;
            }
            uint64_t v14 = *(size_t **)(v10 + 8);
            size_t v17 = *v14;
            size_t v15 = v14 + 3;
            size_t v16 = v17;
            if (v17 <= *((void *)v11 + 3) - (void)v12)
            {
              if (v16)
              {
                memcpy(v12, v15, v16);
                *v13 += v16;
              }
            }
            else
            {
              llvm::raw_ostream::write(v11, (const char *)v15, v16);
            }
            v9 += 8;
            --v8;
          }
          while (v8);
        }
      }
    }
  }
  uint64_t v18 = *((void *)this + 28);
  if (*(char *)(v18 + 471) < 0)
  {
    sub_1CB8BDF7C((uint64_t)__p, *(const void **)(v18 + 448), *(void *)(v18 + 456));
  }
  else
  {
    *(_OWORD *)std::error_code __p = *(_OWORD *)(v18 + 448);
    uint64_t v27 = *(void *)(v18 + 464);
  }
  uint64_t v29 = *(void *)(v18 + 488);
  long long v28 = *(_OWORD *)(v18 + 472);
  if (HIDWORD(v29) == 1)
  {
    v24[0] = 0;
    v24[1] = 0;
    int v25 = 0;
    uint64_t v19 = *((void *)this + 29);
    uint64_t v20 = *((void *)this + 30);
    if (v19 == v20)
    {
      uint64_t v22 = 0;
    }
    else
    {
      do
      {
        int v21 = *(llvm::raw_ostream **)(v19 + 24);
        if (v21) {
          llvm::emitLinkerFlagsForGlobalCOFF((llvm *)&v30, v21, (const llvm::GlobalValue *)__p, (const llvm::Triple *)v24, v3);
        }
        v19 += 32;
      }
      while (v19 != v20);
      uint64_t v22 = v24[0];
    }
    MEMORY[0x1D25D9CD0](v22, 8);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v30 = &unk_1F2646B98;
  if (v37 == 1)
  {
    if (v32) {
      MEMORY[0x1D25D9CB0](v32, 0x1000C8077774924);
    }
  }
}

void *llvm::LTOModule::makeBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  __int16 v10 = 261;
  v9[0] = a3;
  v9[1] = a4;
  uint64_t v11 = v9;
  double result = sub_1CD096174((llvm::raw_ostream *)0x18, (uint64_t)&v11);
  *double result = &unk_1F2644E70;
  result[1] = a1;
  result[2] = a1 + a2;
  *a5 = result;
  return result;
}

BOOL llvm::LTOModule::objcClassNameFromExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = 0;
  if (a2 && *(unsigned char *)(a2 + 16) == 5)
  {
    uint64_t v4 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    if (v4) {
      BOOL v5 = *(unsigned char *)(v4 + 16) == 3;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5
      && ((unint64_t v6 = *(llvm::ConstantDataSequential **)(v4 - 32)) != 0 ? (v7 = *((unsigned char *)v6 + 16) == 14) : (v7 = 0), v7))
    {
      BOOL result = llvm::ConstantDataSequential::isCString(v6);
      if (result)
      {
        uint64_t RawDataValues = llvm::ConstantDataSequential::getRawDataValues(v6);
        unint64_t v11 = v10 - 1;
        if (v10 < v10 - 1) {
          unint64_t v11 = v10;
        }
        __int16 v13 = 1283;
        v12[0] = ".objc_class_name_";
        v12[2] = RawDataValues;
        v12[3] = v11;
        llvm::Twine::str((llvm::Twine *)v12, &v14);
        if (*(char *)(a3 + 23) < 0) {
          operator delete(*(void **)a3);
        }
        *(_OWORD *)a3 = v14;
        *(void *)(a3 + 16) = v15;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void llvm::LTOModule::addObjCClass(llvm::LTOModule *this, const llvm::GlobalVariable *a2)
{
  uint64_t v2 = *((void *)a2 - 4);
  if (v2) {
    BOOL v3 = *(unsigned char *)(v2 + 16) == 9;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    uint64_t v6 = llvm::LTOModule::objcClassNameFromExpression((uint64_t)this, *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 32), (uint64_t)&v37);
    if (v6)
    {
      if (SHIBYTE(v38) < 0)
      {
        sub_1CB8BDF7C((uint64_t)__p, (const void *)v37, *((unint64_t *)&v37 + 1));
      }
      else
      {
        *(_OWORD *)std::error_code __p = v37;
        uint64_t v31 = v38;
      }
      if (v31 >= 0) {
        BOOL v7 = (unsigned __int8 *)__p;
      }
      else {
        BOOL v7 = (unsigned __int8 *)__p[0];
      }
      long long v33 = 0u;
      long long v32 = 0u;
      if (v31 >= 0) {
        size_t v8 = HIBYTE(v31) & 0x7F;
      }
      else {
        size_t v8 = (size_t)__p[1];
      }
      unint64_t v34 = v7;
      size_t v35 = v8;
      memset(v36, 0, sizeof(v36));
      uint64_t v6 = (uint64_t)sub_1CCB7FA44((llvm::LTOModule *)((char *)this + 288), v7, v8, v36);
      uint64_t v9 = (uint64_t **)v6;
      char v11 = v10;
      if (SHIBYTE(v31) < 0) {
        operator delete(__p[0]);
      }
      if (v11)
      {
        uint64_t v12 = *v9;
        uint64_t v13 = **v9;
        v12[1] = (uint64_t)(*v9 + 5);
        v12[2] = v13;
        *((_DWORD *)v12 + 6) = 1024;
        *((unsigned char *)v12 + 28) = 0;
        void v12[4] = (uint64_t)a2;
      }
    }
    __p[1] = 0;
    uint64_t v31 = 0;
    __p[0] = 0;
    if (llvm::LTOModule::objcClassNameFromExpression(v6, *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64), (uint64_t)__p))
    {
      if (v31 >= 0) {
        long long v14 = (unsigned __int8 *)__p;
      }
      else {
        long long v14 = (unsigned __int8 *)__p[0];
      }
      if (v31 >= 0) {
        size_t v15 = HIBYTE(v31) & 0x7F;
      }
      else {
        size_t v15 = (size_t)__p[1];
      }
      size_t v16 = (uint64_t **)sub_1CC0D7F54((llvm::LTOModule *)((char *)this + 256), v14, v15);
      uint64_t v17 = (uint64_t)(*v16 + 1);
      uint64_t v18 = **v16;
      uint64_t v20 = (uint64_t *)*((void *)this + 30);
      unint64_t v19 = *((void *)this + 31);
      if ((unint64_t)v20 >= v19)
      {
        uint64_t v22 = (uint64_t *)*((void *)this + 29);
        uint64_t v23 = ((char *)v20 - (char *)v22) >> 5;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 59) {
          abort();
        }
        uint64_t v25 = v19 - (void)v22;
        if (v25 >> 4 > v24) {
          unint64_t v24 = v25 >> 4;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v26 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26)
        {
          if (v26 >> 59) {
            sub_1CB833614();
          }
          uint64_t v27 = (char *)operator new(32 * v26);
        }
        else
        {
          uint64_t v27 = 0;
        }
        long long v28 = &v27[32 * v23];
        *(void *)long long v28 = v17;
        *((void *)v28 + 1) = v18;
        *((_DWORD *)v28 + 4) = 6592;
        v28[20] = 0;
        *((void *)v28 + 3) = a2;
        int v21 = v28 + 32;
        if (v20 != v22)
        {
          do
          {
            long long v29 = *((_OWORD *)v20 - 1);
            *((_OWORD *)v28 - 2) = *((_OWORD *)v20 - 2);
            *((_OWORD *)v28 - 1) = v29;
            v28 -= 32;
            v20 -= 4;
          }
          while (v20 != v22);
          uint64_t v20 = (uint64_t *)*((void *)this + 29);
        }
        *((void *)this + 29) = v28;
        *((void *)this + 30) = v21;
        *((void *)this + 31) = &v27[32 * v26];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v20 = v17;
        v20[1] = v18;
        *((_DWORD *)v20 + 4) = 6592;
        *((unsigned char *)v20 + 20) = 0;
        int v21 = v20 + 4;
        v20[3] = (uint64_t)a2;
      }
      *((void *)this + 30) = v21;
    }
    if (SHIBYTE(v31) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v38) < 0) {
      operator delete((void *)v37);
    }
  }
}

void llvm::LTOModule::addObjCCategory(llvm::LTOModule *this, const llvm::GlobalVariable *a2)
{
  uint64_t v2 = *((void *)a2 - 4);
  if (v2) {
    BOOL v3 = *(unsigned char *)(v2 + 16) == 9;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    long long v22 = 0uLL;
    uint64_t v23 = 0;
    if (llvm::LTOModule::objcClassNameFromExpression((uint64_t)this, *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 32), (uint64_t)&v22))
    {
      uint64_t v6 = (llvm::LTOModule *)((char *)this + 288);
      char v7 = HIBYTE(v23);
      if (SHIBYTE(v23) < 0)
      {
        sub_1CB8BDF7C((uint64_t)__p, (const void *)v22, *((unint64_t *)&v22 + 1));
      }
      else
      {
        *(_OWORD *)std::error_code __p = v22;
        uint64_t v16 = v23;
      }
      if (v16 >= 0) {
        size_t v8 = (unsigned __int8 *)__p;
      }
      else {
        size_t v8 = (unsigned __int8 *)__p[0];
      }
      long long v18 = 0u;
      long long v17 = 0u;
      if (v16 >= 0) {
        size_t v9 = HIBYTE(v16) & 0x7F;
      }
      else {
        size_t v9 = (size_t)__p[1];
      }
      unint64_t v19 = v8;
      size_t v20 = v9;
      memset(v21, 0, sizeof(v21));
      char v10 = (uint64_t **)sub_1CCB7FA44(v6, v8, v9, v21);
      char v12 = v11;
      if (SHIBYTE(v16) < 0) {
        operator delete(__p[0]);
      }
      if (v12)
      {
        uint64_t v13 = *v10;
        uint64_t v14 = **v10;
        v13[1] = (uint64_t)(*v10 + 5);
        v13[2] = v14;
        *((_DWORD *)v13 + 6) = 1024;
        *((unsigned char *)v13 + 28) = 0;
        void v13[4] = (uint64_t)a2;
      }
    }
    else
    {
      char v7 = HIBYTE(v23);
    }
    if (v7 < 0) {
      operator delete((void *)v22);
    }
  }
}

void llvm::LTOModule::addObjCClassRef(llvm::LTOModule *this, const llvm::GlobalVariable *a2)
{
  long long v20 = 0uLL;
  uint64_t v21 = 0;
  if (llvm::LTOModule::objcClassNameFromExpression((uint64_t)this, *((void *)a2 - 4), (uint64_t)&v20))
  {
    uint64_t v4 = (llvm::LTOModule *)((char *)this + 288);
    char v5 = HIBYTE(v21);
    if (SHIBYTE(v21) < 0)
    {
      sub_1CB8BDF7C((uint64_t)__p, (const void *)v20, *((unint64_t *)&v20 + 1));
    }
    else
    {
      *(_OWORD *)std::error_code __p = v20;
      uint64_t v14 = v21;
    }
    if (v14 >= 0) {
      uint64_t v6 = (unsigned __int8 *)__p;
    }
    else {
      uint64_t v6 = (unsigned __int8 *)__p[0];
    }
    long long v16 = 0u;
    long long v15 = 0u;
    if (v14 >= 0) {
      size_t v7 = HIBYTE(v14) & 0x7F;
    }
    else {
      size_t v7 = (size_t)__p[1];
    }
    long long v17 = v6;
    size_t v18 = v7;
    memset(v19, 0, sizeof(v19));
    size_t v8 = (uint64_t **)sub_1CCB7FA44(v4, v6, v7, v19);
    char v10 = v9;
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (v10)
    {
      char v11 = *v8;
      uint64_t v12 = **v8;
      v11[1] = (uint64_t)(*v8 + 5);
      uint64_t v11[2] = v12;
      *((_DWORD *)v11 + 6) = 1024;
      *((unsigned char *)v11 + 28) = 0;
      void v11[4] = (uint64_t)a2;
    }
  }
  else
  {
    char v5 = HIBYTE(v21);
  }
  if (v5 < 0) {
    operator delete((void *)v20);
  }
}

void llvm::LTOModule::addDefinedDataSymbol(llvm::LTOModule *a1, uint64_t a2)
{
  v15[8] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = &v13;
  uint64_t v13 = v15;
  long long v14 = xmmword_1CD96DBD0;
  int v5 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v4 = &unk_1F2646FA8;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  llvm::ModuleSymbolTable::printSymbolName((uint64_t)a1 + 72, (llvm::raw_ostream *)&v4, a2);
  if ((unint64_t)(v14 + 1) > *((void *)&v14 + 1)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *((unsigned char *)v13 + v14) = 0;
  uint64_t v4 = &unk_1F2646B98;
  if (v11 == 1 && v6) {
    MEMORY[0x1D25D9CB0](v6, 0x1000C8077774924);
  }
  llvm::LTOModule::addDefinedDataSymbol(a1, (unsigned __int8 *)v13, v14, (llvm::GlobalValue *)(a2 & 0xFFFFFFFFFFFFFFF8));
  if (v13 != v15) {
    free(v13);
  }
}

void llvm::LTOModule::addDefinedDataSymbol(llvm::LTOModule *a1, unsigned __int8 *a2, size_t a3, llvm::GlobalValue *a4)
{
  llvm::LTOModule::addDefinedSymbol(a1, a2, a3, (uint64_t)a4, 0);
  llvm::GlobalValue::getSection(a4);
  if (!v6 || !a4 || *((unsigned char *)a4 + 16) != 3 || (*((unsigned char *)a4 + 34) & 0x40) == 0) {
    return;
  }
  uint64_t v7 = ***(void ***)a4;
  uint64_t v30 = a4;
  int v8 = *(_DWORD *)(v7 + 2520);
  if (v8)
  {
    uint64_t v9 = *(void *)(v7 + 2504);
    int v10 = v8 - 1;
    unsigned int v11 = v10 & ((a4 >> 4) ^ (a4 >> 9));
    uint64_t v12 = (llvm::GlobalValue **)(v9 + 24 * v11);
    uint64_t v13 = *v12;
    if (*v12 == a4) {
      goto LABEL_7;
    }
    unint64_t v24 = 0;
    int v25 = 1;
    while (v13 != (llvm::GlobalValue *)-4096)
    {
      if (v24) {
        BOOL v26 = 0;
      }
      else {
        BOOL v26 = v13 == (llvm::GlobalValue *)-8192;
      }
      if (v26) {
        unint64_t v24 = v12;
      }
      unsigned int v27 = v11 + v25++;
      unsigned int v11 = v27 & v10;
      uint64_t v12 = (llvm::GlobalValue **)(v9 + 24 * v11);
      uint64_t v13 = *v12;
      if (*v12 == a4) {
        goto LABEL_7;
      }
    }
    if (v24) {
      long long v28 = v24;
    }
    else {
      long long v28 = v12;
    }
  }
  else
  {
    long long v28 = 0;
  }
  uint64_t v12 = (llvm::GlobalValue **)sub_1CC5BF31C(v7 + 2504, (uint64_t)&v30, (uint64_t *)&v30, v28);
  uint64_t v29 = (uint64_t)v30;
  v12[1] = 0;
  v12[2] = 0;
  *uint64_t v12 = (llvm::GlobalValue *)v29;
LABEL_7:
  unint64_t v14 = (unint64_t)v12[2];
  if (v14 >= 0xF)
  {
    long long v15 = v12[1];
    if (*(void *)v15 == 0x5F2C434A424F5F5FLL && *(void *)((char *)v15 + 7) == 0x2C7373616C635F5FLL)
    {
      llvm::LTOModule::addObjCClass(a1, a4);
    }
    else if (v14 >= 0x12)
    {
      if (*(void *)v15 == 0x5F2C434A424F5F5FLL
        && *((void *)v15 + 1) == 0x726F67657461635FLL
        && *((_WORD *)v15 + 8) == 11385)
      {
        llvm::LTOModule::addObjCCategory(a1, a4);
      }
      else
      {
        uint64_t v19 = *(void *)v15;
        uint64_t v20 = *((void *)v15 + 1);
        int v21 = *((unsigned __int16 *)v15 + 8);
        if (v19 == 0x5F2C434A424F5F5FLL && v20 == 0x6665725F736C635FLL && v21 == 11379)
        {
          llvm::LTOModule::addObjCClassRef(a1, a4);
        }
      }
    }
  }
}

void llvm::LTOModule::addDefinedSymbol(void *a1, unsigned __int8 *a2, size_t a3, uint64_t a4, char a5)
{
  unsigned int v8 = *(unsigned __int8 *)(a4 + 16);
  BOOL v9 = v8 > 3 || v8 == 1;
  if (v9)
  {
    int v11 = 0;
    if (a5)
    {
LABEL_8:
      int v12 = 160;
      goto LABEL_14;
    }
  }
  else
  {
    char v10 = *(_WORD *)(a4 + 34);
    BOOL v9 = (v10 & 0x3F) == 0;
    int v11 = ((v10 & 0x3F) - 1);
    if (v9) {
      int v11 = 0;
    }
    if (a5) {
      goto LABEL_8;
    }
  }
  if (v8 == 3 && (*(unsigned char *)(a4 + 80) & 1) != 0) {
    int v12 = 128;
  }
  else {
    int v12 = 192;
  }
LABEL_14:
  int v13 = v12 | v11;
  int v14 = *(_DWORD *)(a4 + 32);
  if ((v14 & 0xE) == 4 || (v14 & 0xE) == 2)
  {
    int v16 = v13 | 0x300;
    int v17 = v14 & 0xF;
  }
  else
  {
    int v17 = v14 & 0xF;
    if (v17 == 10)
    {
      int v16 = v13 | 0x200;
      goto LABEL_24;
    }
    int v16 = v13 | 0x100;
  }
  if ((v17 - 7) <= 1)
  {
    int v18 = v16 | 0x800;
    goto LABEL_30;
  }
LABEL_24:
  if ((v14 & 0x30) == 0x20)
  {
    int v18 = v16 | 0x2000;
    goto LABEL_30;
  }
  if ((v14 & 0x30) == 0x10)
  {
    int v18 = v16 | 0x1000;
    goto LABEL_30;
  }
  if ((v14 & 0xF) != 3) {
    goto LABEL_29;
  }
  int v35 = v14 & 0xC0;
  if (v35 != 128)
  {
    if (v8 == 3)
    {
      if (v35 && (*(unsigned char *)(a4 + 80) & 1) != 0) {
        goto LABEL_59;
      }
    }
    else if (v35)
    {
      goto LABEL_59;
    }
LABEL_29:
    int v18 = v16 | 0x1800;
    goto LABEL_30;
  }
LABEL_59:
  int v18 = v16 | 0x2800;
LABEL_30:
  if (v8 != 2)
  {
    uint64_t AliaseeObject = a4;
    if (v8 != 1
      || (size_t v36 = a3,
          long long v37 = a2,
          uint64_t AliaseeObject = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)a4),
          a2 = v37,
          a3 = v36,
          AliaseeObject))
    {
      if (*(void *)(AliaseeObject + 48)) {
        v18 |= 0x4000u;
      }
    }
  }
  if (*(unsigned char *)(a4 + 16) == 1) {
    int v20 = v18 | 0x8000;
  }
  else {
    int v20 = v18;
  }
  int v21 = (uint64_t **)sub_1CC0D7F54((llvm::StringMapImpl *)(a1 + 32), a2, a3);
  uint64_t v22 = (uint64_t)(*v21 + 1);
  uint64_t v23 = **v21;
  int v25 = (uint64_t *)a1[30];
  unint64_t v24 = a1[31];
  if ((unint64_t)v25 >= v24)
  {
    unsigned int v27 = (uint64_t *)a1[29];
    uint64_t v28 = ((char *)v25 - (char *)v27) >> 5;
    unint64_t v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 59) {
      abort();
    }
    uint64_t v30 = v24 - (void)v27;
    if (v30 >> 4 > v29) {
      unint64_t v29 = v30 >> 4;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v29;
    }
    if (v31)
    {
      if (v31 >> 59) {
        sub_1CB833614();
      }
      long long v32 = (char *)operator new(32 * v31);
    }
    else
    {
      long long v32 = 0;
    }
    long long v33 = &v32[32 * v28];
    *(void *)long long v33 = v22;
    *((void *)v33 + 1) = v23;
    *((_DWORD *)v33 + 4) = v20;
    v33[20] = a5;
    *((void *)v33 + 3) = a4;
    BOOL v26 = v33 + 32;
    if (v25 != v27)
    {
      do
      {
        long long v34 = *((_OWORD *)v25 - 1);
        *((_OWORD *)v33 - 2) = *((_OWORD *)v25 - 2);
        *((_OWORD *)v33 - 1) = v34;
        v33 -= 32;
        v25 -= 4;
      }
      while (v25 != v27);
      int v25 = (uint64_t *)a1[29];
    }
    a1[29] = v33;
    a1[30] = v26;
    a1[31] = &v32[32 * v31];
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    *int v25 = v22;
    v25[1] = v23;
    *((_DWORD *)v25 + 4) = v20;
    *((unsigned char *)v25 + 20) = a5;
    BOOL v26 = v25 + 4;
    v25[3] = a4;
  }
  a1[30] = v26;
}

void llvm::LTOModule::addDefinedFunctionSymbol(void *a1, uint64_t a2)
{
  v15[8] = *MEMORY[0x1E4F143B8];
  int v12 = &v13;
  int v13 = v15;
  long long v14 = xmmword_1CD96DBD0;
  int v5 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v4 = &unk_1F2646FA8;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  llvm::ModuleSymbolTable::printSymbolName((uint64_t)(a1 + 9), (llvm::raw_ostream *)&v4, a2);
  if ((unint64_t)(v14 + 1) > *((void *)&v14 + 1)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *((unsigned char *)v13 + v14) = 0;
  uint64_t v4 = &unk_1F2646B98;
  if (v11 == 1 && v6) {
    MEMORY[0x1D25D9CB0](v6, 0x1000C8077774924);
  }
  llvm::LTOModule::addDefinedSymbol(a1, (unsigned __int8 *)v13, v14, a2 & 0xFFFFFFFFFFFFFFF8, 1);
  if (v13 != v15) {
    free(v13);
  }
}

void llvm::LTOModule::addDefinedFunctionSymbol(void *a1, unsigned __int8 *a2, size_t a3, uint64_t a4)
{
}

void llvm::LTOModule::addAsmGlobalSymbol(uint64_t a1, unsigned __int8 *a2, size_t a3, int a4)
{
  uint64_t v6 = (size_t **)sub_1CC0D7F54((llvm::StringMapImpl *)(a1 + 256), a2, a3);
  char v8 = v7;
  uint64_t v9 = (uint64_t)(*v6 + 1);
  int v11 = *(uint64_t **)(a1 + 328);
  unint64_t v10 = *(void *)(a1 + 336);
  if ((unint64_t)v11 >= v10)
  {
    int v13 = *(void **)(a1 + 320);
    uint64_t v14 = v11 - v13;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      goto LABEL_77;
    }
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        goto LABEL_78;
      }
      int v18 = (char *)operator new(8 * v17);
    }
    else
    {
      int v18 = 0;
    }
    uint64_t v19 = (uint64_t *)&v18[8 * v14];
    *uint64_t v19 = v9;
    int v12 = v19 + 1;
    if (v11 != v13)
    {
      do
      {
        uint64_t v20 = *--v11;
        *--uint64_t v19 = v20;
      }
      while (v11 != v13);
      int v11 = *(uint64_t **)(a1 + 320);
    }
    *(void *)(a1 + 320) = v19;
    *(void *)(a1 + 328) = v12;
    *(void *)(a1 + 336) = &v18[8 * v17];
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *int v11 = v9;
    int v12 = v11 + 1;
  }
  *(void *)(a1 + 328) = v12;
  if (!v8) {
    return;
  }
  size_t v21 = **v6;
  long long __s1 = (unsigned __int8 *)(*v6 + 1);
  unsigned int v22 = *(_DWORD *)(a1 + 296);
  if (!v22)
  {
    *(void *)(a1 + 300) = 0;
    __int16 v60 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v60) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v60[16] = 2;
    *(void *)(a1 + 288) = v60;
    unsigned int v22 = 16;
    *(_DWORD *)(a1 + 296) = 16;
  }
  int v62 = a4;
  int v23 = 0;
  if (v21)
  {
    size_t v24 = v21;
    int v25 = __s1;
    do
    {
      int v26 = *v25++;
      int v23 = 33 * v23 + v26;
      --v24;
    }
    while (v24);
  }
  uint64_t v61 = v6;
  uint64_t v27 = *(void *)(a1 + 288);
  unsigned int v28 = v22 - 1;
  uint64_t v29 = v27 + 8 * v22 + 8;
  int v30 = -1;
  int v31 = 1;
  int v32 = v23;
  while (1)
  {
    uint64_t v33 = v32 & v28;
    uint64_t v34 = *(void *)(v27 + 8 * v33);
    if (!v34) {
      break;
    }
    if (v34 == -8)
    {
      if (v30 == -1) {
        int v30 = v32 & v28;
      }
    }
    else if (*(_DWORD *)(v29 + 4 * v33) == v23 {
           && v21 == *(void *)v34
    }
           && (!v21 || !memcmp(__s1, (const void *)(v34 + *(unsigned int *)(a1 + 308)), v21)))
    {
      goto LABEL_38;
    }
    int v32 = v31 + v33;
    ++v31;
  }
  uint64_t v35 = v30;
  if (v30 == -1)
  {
    uint64_t v35 = v33;
    uint64_t v33 = v33;
  }
  else
  {
    uint64_t v33 = v30;
  }
  *(_DWORD *)(v29 + 4 * v35) = v23;
  uint64_t v34 = *(void *)(v27 + 8 * v33);
LABEL_38:
  if (v34 == -8)
  {
    --*(_DWORD *)(a1 + 304);
  }
  else if (v34)
  {
    int v36 = v62;
    goto LABEL_51;
  }
  long long v37 = (char *)operator new(v21 + 41, (std::align_val_t)8uLL);
  uint64_t v38 = v37;
  long long v39 = v37 + 40;
  if (v21) {
    memcpy(v37 + 40, __s1, v21);
  }
  v39[v21] = 0;
  *(void *)uint64_t v38 = v21;
  *(_OWORD *)(v38 + 8) = 0u;
  *(_OWORD *)(v38 + 24) = 0u;
  *(void *)(v27 + 8 * v33) = v38;
  ++*(_DWORD *)(a1 + 300);
  uint64_t v40 = (uint64_t *)(*(void *)(a1 + 288)
                  + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 288), v33));
  int v36 = v62;
  while (1)
  {
    uint64_t v34 = *v40;
    if (*v40 && v34 != -8) {
      break;
    }
    ++v40;
  }
LABEL_51:
  uint64_t v42 = *(llvm::GlobalValue **)(v34 + 32);
  if (!v42)
  {
    char v45 = (_OWORD *)(v34 + 8);
    size_t v46 = **v61;
    *(void *)(v34 + 8) = *v61 + 1;
    *(void *)(v34 + 16) = v46;
    *(_DWORD *)(v34 + 24) = v36 | 0x1C0;
    *(unsigned char *)(v34 + 28) = 0;
    *(void *)(v34 + 32) = 0;
    uint64_t v48 = *(char **)(a1 + 240);
    unint64_t v47 = *(void *)(a1 + 248);
    if ((unint64_t)v48 < v47)
    {
      long long v49 = *(_OWORD *)(v34 + 24);
      *(_OWORD *)uint64_t v48 = *v45;
      *((_OWORD *)v48 + 1) = v49;
      char v50 = v48 + 32;
LABEL_73:
      *(void *)(a1 + 240) = v50;
      return;
    }
    uint64_t v51 = *(char **)(a1 + 232);
    uint64_t v52 = (v48 - v51) >> 5;
    unint64_t v53 = v52 + 1;
    if (!((unint64_t)(v52 + 1) >> 59))
    {
      uint64_t v54 = v47 - (void)v51;
      if (v54 >> 4 > v53) {
        unint64_t v53 = v54 >> 4;
      }
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v55 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v55 = v53;
      }
      if (!v55)
      {
        unint64_t v56 = 0;
        goto LABEL_68;
      }
      if (!(v55 >> 59))
      {
        unint64_t v56 = (char *)operator new(32 * v55);
LABEL_68:
        long long v57 = &v56[32 * v52];
        long long v58 = *(_OWORD *)(v34 + 24);
        *(_OWORD *)long long v57 = *v45;
        *((_OWORD *)v57 + 1) = v58;
        char v50 = v57 + 32;
        if (v48 != v51)
        {
          do
          {
            long long v59 = *((_OWORD *)v48 - 1);
            *((_OWORD *)v57 - 2) = *((_OWORD *)v48 - 2);
            *((_OWORD *)v57 - 1) = v59;
            v57 -= 32;
            v48 -= 32;
          }
          while (v48 != v51);
          uint64_t v48 = *(char **)(a1 + 232);
        }
        *(void *)(a1 + 232) = v57;
        *(void *)(a1 + 240) = v50;
        *(void *)(a1 + 248) = &v56[32 * v55];
        if (v48) {
          operator delete(v48);
        }
        goto LABEL_73;
      }
LABEL_78:
      sub_1CB833614();
    }
LABEL_77:
    abort();
  }
  uint64_t v43 = *(unsigned __int8 **)(v34 + 8);
  size_t v44 = *(void *)(v34 + 16);
  if (*(unsigned char *)(v34 + 28)) {
    llvm::LTOModule::addDefinedSymbol((void *)a1, v43, v44, (uint64_t)v42, 1);
  }
  else {
    llvm::LTOModule::addDefinedDataSymbol((llvm::LTOModule *)a1, v43, v44, v42);
  }
  *(_DWORD *)(*(void *)(a1 + 240) - 16) = *(_DWORD *)(*(void *)(a1 + 240) - 16) & 0xFFFFC7FF | v36;
}

void llvm::LTOModule::addAsmGlobalSymbolUndef(void *a1, unsigned __int8 *a2, size_t a3)
{
  char v35 = 0;
  __int16 v34 = 0;
  memset(v33, 0, sizeof(v33));
  uint64_t v36 = 0;
  uint64_t v4 = (uint64_t **)sub_1CCB7FA44((llvm::StringMapImpl *)(a1 + 36), a2, a3, v33);
  char v6 = v5;
  uint64_t v7 = (uint64_t)(*v4 + 5);
  uint64_t v9 = (uint64_t *)a1[41];
  unint64_t v8 = a1[42];
  if ((unint64_t)v9 >= v8)
  {
    int v11 = (void *)a1[40];
    uint64_t v12 = v9 - v11;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61) {
      goto LABEL_38;
    }
    uint64_t v14 = v8 - (void)v11;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        goto LABEL_39;
      }
      uint64_t v16 = (char *)operator new(8 * v15);
    }
    else
    {
      uint64_t v16 = 0;
    }
    unint64_t v17 = (uint64_t *)&v16[8 * v12];
    *unint64_t v17 = v7;
    unint64_t v10 = v17 + 1;
    if (v9 != v11)
    {
      do
      {
        uint64_t v18 = *--v9;
        *--unint64_t v17 = v18;
      }
      while (v9 != v11);
      uint64_t v9 = (uint64_t *)a1[40];
    }
    a1[40] = v17;
    a1[41] = v10;
    a1[42] = &v16[8 * v15];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *uint64_t v9 = v7;
    unint64_t v10 = v9 + 1;
  }
  a1[41] = v10;
  uint64_t v19 = (uint64_t)(*v4 + 5);
  uint64_t v20 = **v4;
  unsigned int v22 = (uint64_t *)a1[44];
  unint64_t v21 = a1[45];
  if ((unint64_t)v22 < v21)
  {
    *unsigned int v22 = v19;
    v22[1] = v20;
    int v23 = v22 + 2;
    goto LABEL_35;
  }
  size_t v24 = (uint64_t *)a1[43];
  uint64_t v25 = ((char *)v22 - (char *)v24) >> 4;
  unint64_t v26 = v25 + 1;
  if ((unint64_t)(v25 + 1) >> 60) {
LABEL_38:
  }
    abort();
  uint64_t v27 = v21 - (void)v24;
  if (v27 >> 3 > v26) {
    unint64_t v26 = v27 >> 3;
  }
  if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v28 = v26;
  }
  if (!v28)
  {
    uint64_t v29 = 0;
    goto LABEL_30;
  }
  if (v28 >> 60) {
LABEL_39:
  }
    sub_1CB833614();
  uint64_t v29 = (char *)operator new(16 * v28);
LABEL_30:
  int v30 = (uint64_t *)&v29[16 * v25];
  *int v30 = v19;
  v30[1] = v20;
  int v23 = v30 + 2;
  if (v22 != v24)
  {
    do
    {
      *((_OWORD *)v30 - 1) = *((_OWORD *)v22 - 1);
      v30 -= 2;
      v22 -= 2;
    }
    while (v22 != v24);
    unsigned int v22 = (uint64_t *)a1[43];
  }
  a1[43] = v30;
  a1[44] = v23;
  a1[45] = &v29[16 * v28];
  if (v22) {
    operator delete(v22);
  }
LABEL_35:
  a1[44] = v23;
  if (v6)
  {
    int v31 = *v4;
    uint64_t v32 = **v4;
    v31[1] = (uint64_t)(*v4 + 5);
    v31[2] = v32;
    *((_DWORD *)v31 + 6) = 7168;
    *((unsigned char *)v31 + 28) = 0;
    v31[4] = 0;
  }
}

void llvm::LTOModule::addPotentialUndefinedSymbol(uint64_t a1, uint64_t a2, char a3)
{
  v27[8] = *MEMORY[0x1E4F143B8];
  size_t v24 = &v25;
  uint64_t v25 = v27;
  long long v26 = xmmword_1CD96DBD0;
  int v17 = 0;
  char v21 = 0;
  uint64_t v22 = 0;
  int v23 = 0;
  uint64_t v16 = &unk_1F2646FA8;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  llvm::ModuleSymbolTable::printSymbolName(a1 + 72, (llvm::raw_ostream *)&v16, a2);
  if ((unint64_t)(v26 + 1) > *((void *)&v26 + 1)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *((unsigned char *)v25 + v26) = 0;
  uint64_t v16 = &unk_1F2646B98;
  if (v23 == 1 && v18) {
    MEMORY[0x1D25D9CB0](v18, 0x1000C8077774924);
  }
  __int16 v13 = 0;
  char v14 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v15 = 0;
  char v6 = (uint64_t **)sub_1CCB7FA44((llvm::StringMapImpl *)(a1 + 288), (unsigned __int8 *)v25, v26, v12);
  if (v7)
  {
    unint64_t v8 = *v6;
    uint64_t v9 = **v6;
    v8[1] = (uint64_t)(*v6 + 5);
    void v8[2] = v9;
    if ((a2 & 4) != 0) {
      unint64_t v10 = 0;
    }
    else {
      unint64_t v10 = (llvm::GlobalValue *)(a2 & 0xFFFFFFFFFFFFFFF8);
    }
    if (llvm::GlobalValue::hasExternalWeakLinkage(v10)) {
      int v11 = 1280;
    }
    else {
      int v11 = 1024;
    }
    *((_DWORD *)v8 + 6) = v11;
    *((unsigned char *)v8 + 28) = a3;
    void v8[4] = (uint64_t)v10;
  }
  if (v25 != v27) {
    free(v25);
  }
}

void llvm::LTOModule::createInputFile(uint64_t a1, uint64_t a2, char *__s)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (__s) {
    size_t v6 = strlen(__s);
  }
  else {
    size_t v6 = 0;
  }
  uint64_t v7 = a1;
  uint64_t v8 = a2;
  uint64_t v9 = __s;
  size_t v10 = v6;
  llvm::lto::InputFile::create();
}

uint64_t llvm::LTOModule::getDependentLibraryCount(llvm::LTOModule *this, llvm::lto::InputFile *a2)
{
  return (uint64_t)(*((void *)this + 19) - *((void *)this + 18)) >> 4;
}

uint64_t llvm::LTOModule::getDependentLibrary(llvm::LTOModule *this, llvm::lto::InputFile *a2, void *a3, unint64_t *a4)
{
  uint64_t v4 = (uint64_t *)(*((void *)this + 18) + 16 * (void)a2);
  uint64_t result = *v4;
  *a3 = v4[1];
  return result;
}

void llvm::LTOModule::getMachOCPUType(llvm::LTOModule *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)this + 4) + 216;
  __int16 v5 = 260;
  v4[0] = v3;
  llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v4);
  llvm::MachO::getCPUType((uint64_t)__p, a2);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void llvm::LTOModule::getMachOCPUSubType(llvm::LTOModule *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (llvm::Module *)*((void *)this + 4);
  uint64_t v5 = *((void *)v4 + 20);
  if (v5)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v5 + 32))(__p);
    uint64_t v11 = __p[0];
    if (__p[0])
    {
      *(unsigned char *)(a2 + 8) |= 1u;
      *(void *)a2 = v11;
      return;
    }
    uint64_t v4 = (llvm::Module *)*((void *)this + 4);
  }
  PtrAuthABIVersiouint64_t n = llvm::Module::getPtrAuthABIVersion(v4);
  if (v7)
  {
    unint64_t v8 = PtrAuthABIVersion;
    uint64_t v9 = *((void *)this + 4) + 216;
    __int16 v13 = 260;
    v12[0] = v9;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v12);
    llvm::MachO::getCPUSubType((llvm::MachO *)__p, (const llvm::Triple *)v8, (v8 & 0xFF00000000) != 0, a2);
  }
  else
  {
    uint64_t v10 = *((void *)this + 4) + 216;
    __int16 v13 = 260;
    v12[0] = v10;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v12);
    llvm::MachO::getCPUSubType((uint64_t)__p, a2);
  }
  if (v15 < 0) {
    operator delete(__p[0]);
  }
}

uint64_t llvm::LTOModule::hasCtorDtor(llvm::LTOModule *this)
{
  uint64_t v1 = (void *)*((void *)this + 22);
  uint64_t v2 = (void *)*((void *)this + 23);
  if (v2 != v1)
  {
    while (1)
    {
      if ((*v1 & 4) != 0) {
        goto LABEL_23;
      }
      unint64_t v3 = *v1 & 0xFFFFFFFFFFFFFFF8;
      if (!v3 || (*(unsigned char *)(v3 + 23) & 0x10) == 0) {
        goto LABEL_23;
      }
      uint64_t v4 = ***(void ***)v3;
      uint64_t v5 = *(void *)(v4 + 152);
      uint64_t v6 = *(unsigned int *)(v4 + 168);
      if (!v6) {
        goto LABEL_11;
      }
      LODWORD(v7) = (v6 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      unint64_t v8 = (uint64_t *)(v5 + 16 * v7);
      uint64_t v9 = *v8;
      if (*v8 != v3) {
        break;
      }
LABEL_12:
      uint64_t v12 = v8[1];
      if (*(void *)v12 >= 0xCuLL)
      {
        BOOL v13 = *(void *)(v12 + 16) == 0x6F6C672E6D766C6CLL && *(_DWORD *)(v12 + 24) == 1600938338;
        BOOL v14 = !v13;
        if (!v14 && *(void *)v12 == 17)
        {
          if (*(_DWORD *)(v12 + 28) == 1919906915 && *(unsigned char *)(v12 + 32) == 115) {
            return 1;
          }
          int v17 = *(_DWORD *)(v12 + 28);
          int v18 = *(unsigned __int8 *)(v12 + 32);
          if (v17 == 1919906916 && v18 == 115) {
            return 1;
          }
        }
      }
LABEL_23:
      if (++v1 == v2) {
        return 0;
      }
    }
    int v10 = 1;
    while (v9 != -4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v6 - 1);
      uint64_t v9 = *(void *)(v5 + 16 * v7);
      if (v9 == v3)
      {
        unint64_t v8 = (uint64_t *)(v5 + 16 * v7);
        goto LABEL_12;
      }
    }
LABEL_11:
    unint64_t v8 = (uint64_t *)(v5 + 16 * v6);
    goto LABEL_12;
  }
  return 0;
}

void sub_1CCB7F9A8()
{
}

void *sub_1CCB7F9BC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F262CC20;
  result[1] = v3;
  return result;
}

uint64_t sub_1CCB7FA04(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F262CC20;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CCB7FA30(uint64_t a1, const llvm::DiagnosticInfo *a2)
{
  return llvm::LLVMContext::diagnose(*(void *)(a1 + 8), a2);
}

void sub_1CCB7FA38(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void *sub_1CCB7FA44(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n, _OWORD *a4)
{
  unsigned int v7 = *((_DWORD *)a1 + 2);
  if (!v7)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    unint64_t v28 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v28) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v28[16] = 2;
    *(void *)a1 = v28;
    unsigned int v7 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  uint64_t v29 = a4;
  int v8 = 0;
  if (__n)
  {
    size_t v9 = __n;
    int v10 = a2;
    do
    {
      int v11 = *v10++;
      int v8 = 33 * v8 + v11;
      --v9;
    }
    while (v9);
  }
  uint64_t v12 = *(void *)a1;
  unsigned int v13 = v7 - 1;
  uint64_t v14 = *(void *)a1 + 8 * v7 + 8;
  int v15 = -1;
  int v16 = 1;
  int v17 = v8;
  while (1)
  {
    uint64_t v18 = v17 & v13;
    uint64_t v19 = *(void **)(v12 + 8 * v18);
    if (!v19) {
      break;
    }
    if (v19 == (void *)-8)
    {
      if (v15 == -1) {
        int v15 = v17 & v13;
      }
    }
    else if (*(_DWORD *)(v14 + 4 * v18) == v8 {
           && __n == *v19
    }
           && (!__n || !memcmp(a2, (char *)v19 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_20;
    }
    int v17 = v16 + v18;
    ++v16;
  }
  uint64_t v20 = v15;
  if (v15 == -1)
  {
    uint64_t v20 = v18;
    uint64_t v18 = v18;
  }
  else
  {
    uint64_t v18 = v15;
  }
  *(_DWORD *)(v14 + 4 * v20) = v8;
  uint64_t v19 = *(void **)(v12 + 8 * v18);
LABEL_20:
  uint64_t i = (void *)(v12 + 8 * v18);
  if (v19 == (void *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v19)
  {
    return i;
  }
  uint64_t v22 = (char *)operator new(__n + 41, (std::align_val_t)8uLL);
  int v23 = v22;
  size_t v24 = v22 + 40;
  if (__n) {
    memcpy(v22 + 40, a2, __n);
  }
  v24[__n] = 0;
  *(void *)int v23 = __n;
  long long v25 = v29[1];
  *(_OWORD *)(v23 + 8) = *v29;
  *(_OWORD *)(v23 + 24) = v25;
  *uint64_t i = v23;
  ++*((_DWORD *)a1 + 3);
  for (uint64_t i = (void *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v18));
        !*i || *i == -8;
  return i;
}

uint64_t sub_1CCB7FC5C(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *(void ***)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (v3) {
      (*((void (**)(void **))*v3 + 1))(v3);
    }
  }
  else if (v3)
  {
    llvm::lto::InputFile::~InputFile(v3);
    MEMORY[0x1D25D9CE0]();
  }
  return a1;
}

const char *llvm::LTOCodeGenerator::getVersionString(llvm::LTOCodeGenerator *this)
{
  return "LLVM version 32023.408";
}

void *sub_1CCB7FCE4(void *a1)
{
  *a1 = &unk_1F262CC68;
  char v2 = a1 + 63;
  uint64_t v3 = (void *)a1[66];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F262CCD0;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

void llvm::LTOCodeGenerator::LTOCodeGenerator(llvm::LTOCodeGenerator *this, llvm::LLVMContext *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)this = a2;
  operator new();
}

void llvm::LTOCodeGenerator::~LTOCodeGenerator(llvm::LTOCodeGenerator *this)
{
  sub_1CD69C048((uint64_t)this + 536);
  uint64_t v2 = (llvm::ToolOutputFile::CleanupInstaller *)*((void *)this + 66);
  *((void *)this + 66) = 0;
  if (v2) {
    sub_1CBAD7E10(this + 528, v2);
  }
  uint64_t v3 = (llvm::ToolOutputFile::CleanupInstaller *)*((void *)this + 65);
  *((void *)this + 65) = 0;
  if (v3) {
    sub_1CBAD7E10(this + 520, v3);
  }
  sub_1CD567A9C((uint64_t)this + 264);
  if (*((char *)this + 239) < 0) {
    operator delete(*((void **)this + 27));
  }
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  uint64_t v12 = (void **)((char *)this + 136);
  sub_1CB8338B8(&v12);
  if (*((_DWORD *)this + 29))
  {
    uint64_t v4 = *((unsigned int *)this + 28);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 8 * v4;
      do
      {
        uint64_t v7 = *(void *)(*((void *)this + 13) + v5);
        if (v7 != -8 && v7 != 0) {
          MEMORY[0x1D25D9CD0]();
        }
        v5 += 8;
      }
      while (v6 != v5);
    }
  }
  free(*((void **)this + 13));
  sub_1CC0D7CD8((uint64_t)this + 72);
  sub_1CC0D7CD8((uint64_t)this + 40);
  uint64_t v9 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v10) {
    sub_1CCB844D8(v10);
  }
  int v11 = (llvm::Module *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v11)
  {
    llvm::Module::~Module(v11);
    MEMORY[0x1D25D9CE0]();
  }
}

void *llvm::LTOCodeGenerator::setAsmUndefinedRefs(void *this, llvm::LTOModule *a2)
{
  uint64_t v2 = *((void *)a2 + 43);
  uint64_t v3 = *((void *)a2 + 44);
  if (v2 != v3)
  {
    uint64_t v4 = (llvm::StringMapImpl *)(this + 9);
    do
    {
      uint64_t v5 = *(unsigned __int8 **)v2;
      size_t v6 = *(void *)(v2 + 8);
      v2 += 16;
      this = sub_1CC0D7F54(v4, v5, v6);
    }
    while (v2 != v3);
  }
  return this;
}

uint64_t llvm::LTOCodeGenerator::addModule(llvm::LTOCodeGenerator *this, llvm::LTOModule *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::Module **)*((void *)this + 2);
  uint64_t v5 = (llvm::Module *)*((void *)a2 + 4);
  *((void *)a2 + 4) = 0;
  uint64_t v14 = v5;
  int v16 = 0;
  int v6 = llvm::Linker::linkInModule(v4, &v14, 0, v15);
  if (v16 == v15)
  {
    (*(void (**)(void *))(v15[0] + 32))(v15);
  }
  else if (v16)
  {
    (*(void (**)(void))(*v16 + 40))();
  }
  uint64_t v7 = v14;
  uint64_t v14 = 0;
  if (v7)
  {
    llvm::Module::~Module(v7);
    MEMORY[0x1D25D9CE0](v8);
  }
  uint64_t v9 = *((void *)a2 + 43);
  uint64_t v10 = *((void *)a2 + 44);
  while (v9 != v10)
  {
    int v11 = *(unsigned __int8 **)v9;
    size_t v12 = *(void *)(v9 + 8);
    v9 += 16;
    sub_1CC0D7F54((llvm::LTOCodeGenerator *)((char *)this + 72), v11, v12);
  }
  *((unsigned char *)this + 34) = 0;
  return v6 ^ 1u;
}

void llvm::LTOCodeGenerator::setModule(uint64_t a1, uint64_t a2)
{
  sub_1CD67F6F0(a1 + 72);
  uint64_t v4 = *(void *)(*(void *)a2 + 32);
  *(void *)(*(void *)a2 + 32) = 0;
  uint64_t v5 = *(llvm::Module **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5)
  {
    llvm::Module::~Module(v5);
    MEMORY[0x1D25D9CE0]();
  }
  operator new();
}

uint64_t llvm::LTOCodeGenerator::setTargetOptions(llvm::LTOCodeGenerator *this, const llvm::TargetOptions *a2)
{
  return sub_1CCB80504((uint64_t)this + 560, (uint64_t)a2);
}

uint64_t sub_1CCB80504(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a1 & 0xFE | *(unsigned char *)a2 & 1;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  long long v4 = *(_OWORD *)(a2 + 12);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 12) = v4;
  sub_1CBF4C340((void *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  long long v5 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  int v6 = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = v6;
  std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  std::string::operator=((std::string *)(a1 + 184), (const std::string *)(a2 + 184));
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  uint64_t v7 = *(void *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 248) = v7;
  if (a1 != a2) {
    sub_1CBF4C3C4(a1 + 256, *(std::string **)(a2 + 256), *(std::string **)(a2 + 264), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 264) - *(void *)(a2 + 256)) >> 3));
  }
  std::string::operator=((std::string *)(a1 + 280), (const std::string *)(a2 + 280));
  return a1;
}

uint64_t llvm::LTOCodeGenerator::setDebugInfo(uint64_t result, int a2)
{
  *(unsigned char *)(result + 32) = a2 != 0;
  return result;
}

uint64_t llvm::LTOCodeGenerator::setOptLevel(uint64_t this, unsigned int a2)
{
  *(_DWORD *)(this + 968) = a2;
  *(unsigned char *)(this + 1441) = a2 > 1;
  *(unsigned char *)(this + 1442) = a2 > 1;
  *(_DWORD *)(this + 960) = a2;
  return this;
}

uint64_t llvm::LTOCodeGenerator::writeMergedModules(std::string *a1, std::string::value_type *a2, std::string::size_type a3)
{
  if (!llvm::LTOCodeGenerator::determineTarget(a1)) {
    return 0;
  }
  llvm::LTOCodeGenerator::verifyMergedModuleOnce((uint64_t)a1);
  llvm::LTOCodeGenerator::applyScopeRestrictions((uint64_t)a1);
  v27.__val_ = 0;
  v27.__cat_ = std::system_category();
  llvm::ToolOutputFile::ToolOutputFile(&v24, a2, a3, (uint64_t)&v27, 0);
  if (!v27.__val_) {
    llvm::WriteBitcodeToFile();
  }
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v23.__r_.__value_.__r.__words[1] = xmmword_1CFB1B7C0;
  strcpy(v23.__r_.__value_.__l.__data_, "could not open bitcode file for writing: ");
  if (a2)
  {
    if (a3 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    if (a3 >= 0x17)
    {
      uint64_t v8 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v8 = a3 | 7;
      }
      uint64_t v9 = v8 + 1;
      p_dst = (std::string *)operator new(v8 + 1);
      __dst.__r_.__value_.__l.__size_ = a3;
      __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = a3;
      p_dst = &__dst;
      if (!a3) {
        goto LABEL_15;
      }
    }
    memmove(p_dst, a2, a3);
LABEL_15:
    p_dst->__r_.__value_.__s.__data_[a3] = 0;
    goto LABEL_16;
  }
  memset(&__dst, 0, sizeof(__dst));
LABEL_16:
  uint64_t v10 = std::string::append(&__dst, ": ");
  std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::error_code::message(&v18, &v27);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v12 = &v18;
  }
  else {
    size_t v12 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = *((unsigned char *)&v18.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type size = v18.__r_.__value_.__l.__size_;
  }
  uint64_t v14 = std::string::append(&v20, (const std::string::value_type *)v12, size);
  std::string::size_type v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::error_code __p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  uint64_t v22 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v22 >= 0) {
    int v16 = __p;
  }
  else {
    int v16 = (void **)__p[0];
  }
  if (v22 >= 0) {
    std::string::size_type v17 = HIBYTE(v22) & 0x7F;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)__p[1];
  }
  std::string::append(&v23, (const std::string::value_type *)v16, v17);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  llvm::LTOCodeGenerator::emitError((uint64_t *)a1, (uint64_t *)&v23);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (v26)
  {
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v25);
    char v26 = 0;
  }
  llvm::ToolOutputFile::CleanupInstaller::~CleanupInstaller((llvm::ToolOutputFile::CleanupInstaller *)&v24);
  return 0;
}

BOOL llvm::LTOCodeGenerator::determineTarget(std::string *this)
{
  if (this[1].__r_.__value_.__r.__words[0]) {
    return 1;
  }
  uint64_t v3 = this + 9;
  std::string::operator=(this + 9, (const std::string *)(this->__r_.__value_.__l.__size_ + 216));
  if (SHIBYTE(this[9].__r_.__value_.__r.__words[2]) < 0)
  {
    if (this[9].__r_.__value_.__l.__size_) {
      goto LABEL_7;
    }
  }
  else if (*((unsigned char *)&this[9].__r_.__value_.__s + 23))
  {
    goto LABEL_7;
  }
  llvm::sys::getDefaultTargetTriple((uint64_t)&v23);
  if (SHIBYTE(this[9].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3->__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v23;
  v3->__r_.__value_.__r.__words[2] = v24;
  char v6 = HIBYTE(this[9].__r_.__value_.__r.__words[2]);
  BOOL v7 = v6 < 0;
  if (v6 >= 0) {
    std::string::pointer data = (std::string::pointer)v3;
  }
  else {
    std::string::pointer data = this[9].__r_.__value_.__l.__data_;
  }
  size_t v9 = v6 & 0x7F;
  if (v7) {
    size_t size = this[9].__r_.__value_.__l.__size_;
  }
  else {
    size_t size = v9;
  }
  sub_1CBF4BD94(this->__r_.__value_.__l.__size_, data, size);
LABEL_7:
  __int16 v22 = 260;
  __p[0] = v3;
  llvm::Triple::Triple((llvm::Triple *)&v23, (const llvm::Twine *)__p);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v21 = 0;
  long long v4 = llvm::TargetRegistry::lookupTarget((std::string::size_type)v3, (uint64_t)__p);
  this[8].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
  BOOL v1 = v4 != 0;
  if (v4)
  {
    sub_1CD6A0868(&v17, (uint64_t)this[36].__r_.__value_.__l.__data_, this[36].__r_.__value_.__l.__size_);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v11 = &v17;
    }
    else {
      std::string::size_type v11 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = *((unsigned char *)&v17.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      uint64_t v12 = v17.__r_.__value_.__l.__size_;
    }
    uint64_t v19 = 0;
    int64x2_t v18 = 0uLL;
    llvm::SubtargetFeatures::Split(&v18, (uint64_t)v11, v12);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    llvm::SubtargetFeatures::getDefaultSubtargetFeatures(&v18, (const llvm::Triple *)&v23);
    sub_1CD4FB688((std::string *)v18.i64[0], (std::string *)v18.i64[1], ",", 1uLL, &v17);
    unsigned int v13 = (void **)&this[6].__r_.__value_.__r.__words[2];
    if (this[7].__r_.__value_.__s.__data_[15] < 0) {
      operator delete(*v13);
    }
    *(_OWORD *)unsigned int v13 = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
    this[7].__r_.__value_.__l.__size_ = v17.__r_.__value_.__r.__words[2];
    if (this[23].__r_.__value_.__s.__data_[7] < 0) {
      std::string::size_type v14 = this[22].__r_.__value_.__r.__words[2];
    }
    else {
      std::string::size_type v14 = this[23].__r_.__value_.__s.__data_[7];
    }
    if (v14 || v27 > 0x21 || ((1 << v27) & 0x3F0000888) == 0) {
      goto LABEL_51;
    }
    if (v25 > 40)
    {
      if (v25 == 42)
      {
        std::string::size_type v15 = "core2";
      }
      else
      {
        if (v25 != 41)
        {
LABEL_51:
          llvm::LTOCodeGenerator::createTargetMachine((llvm::LTOCodeGenerator *)this, &v17);
          std::string::pointer v16 = this[1].__r_.__value_.__l.__data_;
          this[1].__r_.__value_.__r.__words[0] = v17.__r_.__value_.__r.__words[0];
          if (v16) {
            (*(void (**)(std::string::pointer))(*(void *)v16 + 8))(v16);
          }
          v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
          sub_1CB8338B8((void ***)&v17);
          goto LABEL_9;
        }
        std::string::size_type v15 = "yonah";
      }
    }
    else
    {
      if (v25 == 3)
      {
        if (v26 != 31)
        {
          std::string::size_type v15 = "cyclone";
          goto LABEL_50;
        }
      }
      else if (v25 != 5)
      {
        goto LABEL_51;
      }
      std::string::size_type v15 = "apple-a12";
    }
LABEL_50:
    MEMORY[0x1D25D9630](&this[22].__r_.__value_.__r.__words[1], v15);
    goto LABEL_51;
  }
  llvm::LTOCodeGenerator::emitError((uint64_t *)this, (uint64_t *)__p);
LABEL_9:
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)v23);
  }
  return v1;
}

uint64_t llvm::LTOCodeGenerator::verifyMergedModuleOnce(uint64_t this)
{
  if (!*(unsigned char *)(this + 34))
  {
    uint64_t v1 = this;
    *(unsigned char *)(this + 34) = 1;
    char v8 = 0;
    uint64_t v2 = *(llvm **)(this + 8);
    uint64_t v3 = llvm::dbgs((llvm *)this);
    this = llvm::verifyModule(v2, v3, (llvm::raw_ostream *)&v8, v4);
    if (this) {
      llvm::report_fatal_error((llvm *)"Broken module found, compilation aborted!", (const llvm::Twine *)1);
    }
    if (v8)
    {
      std::error_code __p = operator new(0x38uLL);
      long long v7 = xmmword_1CFB287B0;
      strcpy((char *)__p, "Invalid debug info found, debug info will be stripped");
      llvm::LTOCodeGenerator::emitWarning((uint64_t *)v1, (uint64_t *)&__p);
      if (SHIBYTE(v7) < 0) {
        operator delete(__p);
      }
      return llvm::StripDebugInfo(*(llvm **)(v1 + 8), v5);
    }
  }
  return this;
}

uint64_t llvm::LTOCodeGenerator::applyScopeRestrictions(uint64_t this)
{
  v56[8] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(this + 33))
  {
    uint64_t v1 = this;
    v49[0] = 0;
    v49[1] = 0;
    int v50 = 0;
    uint64_t v54 = v56;
    long long v55 = xmmword_1CD96DBD0;
    v48[0] = &v54;
    v48[1] = v49;
    v48[2] = this;
    llvm::LTOCodeGenerator::preserveDiscardableGVs(this, *(void **)(this + 8), (uint64_t)sub_1CCB83F44, (uint64_t)v48);
    if (*(unsigned char *)(v1 + 256))
    {
      uint64_t v2 = *(void **)(v1 + 8);
      if (*(unsigned char *)(v1 + 512))
      {
        uint64_t v3 = v2 + 3;
        long long v4 = (void *)v2[4];
        if (v4 != v2 + 3)
        {
          do
          {
            if (v4) {
              long long v5 = (uint64_t ***)(v4 - 7);
            }
            else {
              long long v5 = 0;
            }
            unsigned int v6 = v5[4] & 0xF;
            BOOL v7 = v6 > 8 || ((1 << v6) & 0x182) == 0;
            if (v7 && (*((unsigned char *)v5 + 23) & 0x10) != 0)
            {
              uint64_t v8 = ***v5;
              uint64_t v9 = *(void *)(v8 + 152);
              uint64_t v10 = *(unsigned int *)(v8 + 168);
              if (v10)
              {
                LODWORD(v11) = (v10 - 1) & ((v5 >> 4) ^ (v5 >> 9));
                uint64_t v12 = (uint64_t ****)(v9 + 16 * v11);
                unsigned int v13 = *v12;
                if (*v12 != v5)
                {
                  int v14 = 1;
                  do
                  {
                    if (v13 == (uint64_t ***)-4096) {
                      goto LABEL_21;
                    }
                    int v15 = v11 + v14++;
                    uint64_t v11 = v15 & (v10 - 1);
                    unsigned int v13 = *(uint64_t ****)(v9 + 16 * v11);
                  }
                  while (v13 != v5);
                  uint64_t v12 = (uint64_t ****)(v9 + 16 * v11);
                }
              }
              else
              {
LABEL_21:
                uint64_t v12 = (uint64_t ****)(v9 + 16 * v10);
              }
              std::string::pointer v16 = v12[1];
              size_t v17 = (size_t)*v16;
              uint64_t v51 = v16 + 2;
              size_t v52 = v17;
              unsigned int v53 = v6;
              sub_1CCB837B8(v1 + 104, (unsigned __int8 *)v16 + 16, v17, &v53);
            }
            long long v4 = (void *)v4[1];
          }
          while (v4 != v3);
          uint64_t v2 = *(void **)(v1 + 8);
        }
        int64x2_t v18 = v2 + 1;
        uint64_t v19 = (void *)v2[2];
        if (v19 != v2 + 1)
        {
          do
          {
            if (v19) {
              std::string v20 = (uint64_t ***)(v19 - 7);
            }
            else {
              std::string v20 = 0;
            }
            unsigned int v21 = v20[4] & 0xF;
            BOOL v22 = v21 > 8 || ((1 << v21) & 0x182) == 0;
            if (v22 && (*((unsigned char *)v20 + 23) & 0x10) != 0)
            {
              uint64_t v23 = ***v20;
              uint64_t v24 = *(void *)(v23 + 152);
              uint64_t v25 = *(unsigned int *)(v23 + 168);
              if (v25)
              {
                LODWORD(v26) = (v25 - 1) & ((v20 >> 4) ^ (v20 >> 9));
                unsigned int v27 = (uint64_t ****)(v24 + 16 * v26);
                unint64_t v28 = *v27;
                if (*v27 != v20)
                {
                  int v29 = 1;
                  do
                  {
                    if (v28 == (uint64_t ***)-4096) {
                      goto LABEL_40;
                    }
                    int v30 = v26 + v29++;
                    uint64_t v26 = v30 & (v25 - 1);
                    unint64_t v28 = *(uint64_t ****)(v24 + 16 * v26);
                  }
                  while (v28 != v20);
                  unsigned int v27 = (uint64_t ****)(v24 + 16 * v26);
                }
              }
              else
              {
LABEL_40:
                unsigned int v27 = (uint64_t ****)(v24 + 16 * v25);
              }
              int v31 = v27[1];
              size_t v32 = (size_t)*v31;
              uint64_t v51 = v31 + 2;
              size_t v52 = v32;
              unsigned int v53 = v21;
              sub_1CCB837B8(v1 + 104, (unsigned __int8 *)v31 + 16, v32, &v53);
            }
            uint64_t v19 = (void *)v19[1];
          }
          while (v19 != v18);
          uint64_t v2 = *(void **)(v1 + 8);
        }
        uint64_t v33 = v2 + 5;
        __int16 v34 = (void *)v2[6];
        if (v34 != v2 + 5)
        {
          do
          {
            if (v34) {
              char v35 = (uint64_t ***)(v34 - 6);
            }
            else {
              char v35 = 0;
            }
            unsigned int v36 = v35[4] & 0xF;
            BOOL v37 = v36 > 8 || ((1 << v36) & 0x182) == 0;
            if (v37 && (*((unsigned char *)v35 + 23) & 0x10) != 0)
            {
              uint64_t v38 = ***v35;
              uint64_t v39 = *(void *)(v38 + 152);
              uint64_t v40 = *(unsigned int *)(v38 + 168);
              if (v40)
              {
                LODWORD(v41) = (v40 - 1) & ((v35 >> 4) ^ (v35 >> 9));
                uint64_t v42 = (uint64_t ****)(v39 + 16 * v41);
                uint64_t v43 = *v42;
                if (*v42 != v35)
                {
                  int v44 = 1;
                  do
                  {
                    if (v43 == (uint64_t ***)-4096) {
                      goto LABEL_59;
                    }
                    int v45 = v41 + v44++;
                    uint64_t v41 = v45 & (v40 - 1);
                    uint64_t v43 = *(uint64_t ****)(v39 + 16 * v41);
                  }
                  while (v43 != v35);
                  uint64_t v42 = (uint64_t ****)(v39 + 16 * v41);
                }
              }
              else
              {
LABEL_59:
                uint64_t v42 = (uint64_t ****)(v39 + 16 * v40);
              }
              size_t v46 = v42[1];
              size_t v47 = (size_t)*v46;
              uint64_t v51 = v46 + 2;
              size_t v52 = v47;
              unsigned int v53 = v36;
              sub_1CCB837B8(v1 + 104, (unsigned __int8 *)v46 + 16, v47, &v53);
            }
            __int16 v34 = (void *)v34[1];
          }
          while (v34 != v33);
          uint64_t v2 = *(void **)(v1 + 8);
        }
      }
      llvm::updateCompilerUsed((uint64_t)v2, *(void *)(v1 + 24), v1 + 72);
    }
    if (v54 != v56) {
      free(v54);
    }
    return MEMORY[0x1D25D9CD0](v49[0], 8);
  }
  return this;
}

uint64_t llvm::LTOCodeGenerator::emitError(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t (*)(void, uint64_t *, uint64_t))a1[30];
  if (v2)
  {
    if (*((char *)a2 + 23) < 0) {
      a2 = (uint64_t *)*a2;
    }
    uint64_t v3 = a1[31];
    return v2(0, a2, v3);
  }
  else
  {
    uint64_t v5 = *a1;
    __int16 v7 = 260;
    unsigned int v6 = a2;
    int v9 = 3;
    char v10 = 0;
    uint64_t v8 = &unk_1F262CD40;
    uint64_t v11 = &v6;
    return llvm::LLVMContext::diagnose(v5, (const llvm::DiagnosticInfo *)&v8);
  }
}

BOOL llvm::LTOCodeGenerator::compileOptimizedToFile(llvm::LTOCodeGenerator *this, const char **a2)
{
  v16[16] = *MEMORY[0x1E4F143B8];
  long long v15 = xmmword_1CFAC3020;
  v12[0] = &unk_1F262CE50;
  v12[1] = this;
  v12[2] = &v14;
  unsigned int v13 = (llvm *)v12;
  int v14 = v16;
  BOOL v5 = llvm::LTOCodeGenerator::compileOptimized((uint64_t)this, (uint64_t)v12, 1u);
  unsigned int v6 = v13;
  if (v13 != (llvm *)v12)
  {
    if (v13) {
      unsigned int v6 = (llvm *)(*(uint64_t (**)(void))(*(void *)v13 + 40))();
    }
    if (v5) {
      goto LABEL_5;
    }
LABEL_8:
    __int16 v11 = 261;
    v10[0] = v14;
    v10[1] = v15;
    llvm::sys::fs::remove((llvm::sys::fs *)v10, (const llvm::Twine *)1);
    goto LABEL_15;
  }
  unsigned int v6 = (llvm *)(*(uint64_t (**)(void *))(v12[0] + 32))(v12);
  if (!v5) {
    goto LABEL_8;
  }
LABEL_5:
  uint64_t v7 = *((void *)this + 66);
  if (v7)
  {
    llvm::PrintStatisticsJSON(*(llvm **)(v7 + 136), v4);
  }
  else if ((byte_1EBD0C080 & 1) != 0 || byte_1EA61F098)
  {
    llvm::PrintStatistics(v6);
  }
  if ((unint64_t)(v15 + 1) > *((void *)&v15 + 1)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *((unsigned char *)v14 + v15) = 0;
  uint64_t v8 = (char *)this + 184;
  MEMORY[0x1D25D9630]((char *)this + 184, v14);
  if (*((char *)this + 207) < 0) {
    uint64_t v8 = *(const char **)v8;
  }
  *a2 = v8;
LABEL_15:
  if (v14 != v16) {
    free(v14);
  }
  return v5;
}

BOOL llvm::LTOCodeGenerator::compileOptimized(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  BOOL result = llvm::LTOCodeGenerator::determineTarget((std::string *)a1);
  if (result)
  {
    llvm::LTOCodeGenerator::verifyMergedModuleOnce(a1);
    if (byte_1EBD09A98
      && llvm::InlineAsm::containArchDependentInlineAsm(*(llvm::InlineAsm **)(a1 + 8), v7))
    {
      std::error_code __p = operator new(0x28uLL);
      long long v18 = xmmword_1CFB287C0;
      strcpy((char *)__p, "inline asm is not allowed in the module");
      llvm::LTOCodeGenerator::emitError((uint64_t *)a1, (uint64_t *)&__p);
      if (SHIBYTE(v18) < 0) {
        operator delete(__p);
      }
      return 0;
    }
    else
    {
      llvm::LTOCodeGenerator::restoreLinkageForExternals(a1);
      std::error_code __p = &v18;
      long long v18 = 0uLL;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0x2800000000;
      BOOL v22 = v23;
      v23[0] = 0;
      v24[0] = 0;
      v24[1] = 0;
      v23[1] = 0;
      v23[2] = v24;
      void v24[2] = v25;
      memset(v25, 0, sizeof(v25));
      char v26 = 0;
      unsigned int v27 = v28;
      v28[0] = 0;
      v29[0] = 0;
      v29[1] = 0;
      v28[1] = 0;
      void v28[2] = v29;
      v29[2] = v30;
      v30[0] = 0;
      v30[1] = 0;
      v30[2] = v31;
      v30[3] = 0x400000000;
      v31[4] = &v32;
      v31[5] = 0;
      uint64_t v32 = 0;
      long long v33 = xmmword_1CD91D2E0;
      *(unsigned char *)(a1 + 975) = 1;
      sub_1CCB745EC((uint64_t)v15, a2);
      llvm::lto::backend(a1 + 536, (uint64_t)v15, a3, *(llvm::Type ***)(a1 + 8), (uint64_t)&__p, &v14);
      int v9 = v16;
      if (v16 == (llvm *)v15)
      {
        int v9 = (llvm *)(*(uint64_t (**)(void *))(v15[0] + 32))(v15);
      }
      else if (v16)
      {
        int v9 = (llvm *)(*(uint64_t (**)(void))(*(void *)v16 + 40))();
      }
      uint64_t v10 = *(void *)(a1 + 528);
      if (v10)
      {
        llvm::PrintStatisticsJSON(*(llvm **)(v10 + 136), v8);
      }
      else if ((byte_1EBD0C080 & 1) != 0 || byte_1EA61F098)
      {
        llvm::PrintStatistics(v9);
      }
      llvm::reportAndResetTimings(0, v8);
      uint64_t v11 = *(void *)(a1 + 520);
      if (v11)
      {
        *(unsigned char *)(v11 + 24) = 1;
        uint64_t v12 = *(llvm::raw_ostream **)(v11 + 136);
        unsigned int v13 = (const char *)*((void *)v12 + 2);
        if (*((const char **)v12 + 4) != v13)
        {
          *((void *)v12 + 4) = v13;
          llvm::raw_ostream::flush_tied_then_write(v12, v13);
        }
      }
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
      sub_1CD4AFAF4((uint64_t)&__p);
      return 1;
    }
  }
  return result;
}

uint64_t llvm::LTOCodeGenerator::compileOptimized@<X0>(llvm::LTOCodeGenerator *this@<X0>, void *a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = 0;
  uint64_t result = llvm::LTOCodeGenerator::compileOptimizedToFile(this, (const char **)&v10);
  if (result)
  {
    char v5 = 1;
    HIBYTE(v9) = 1;
    if (*v10)
    {
      v8.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
      char v5 = 3;
    }
    LOBYTE(v9) = v5;
    sub_1CD096690((unsigned __int8 *)&v8, (llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, 0, 0, 0, 0, (uint64_t)&v11);
    if (v12)
    {
      uint64_t v6 = *(void *)&v11.__val_;
      std::error_code v7 = v11;
      if (v11.__val_)
      {
        std::error_code::message(&v8, &v7);
        llvm::LTOCodeGenerator::emitError((uint64_t *)this, (uint64_t *)&v8);
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v8.__r_.__value_.__l.__data_);
        }
        __int16 v9 = 260;
        v8.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 184;
        uint64_t result = llvm::sys::fs::remove((llvm::sys::fs *)&v8, (const llvm::Twine *)1);
        goto LABEL_2;
      }
    }
    else
    {
      std::system_category();
      uint64_t v6 = *(void *)&v11.__val_;
    }
    __int16 v9 = 260;
    v8.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 184;
    uint64_t result = llvm::sys::fs::remove((llvm::sys::fs *)&v8, (const llvm::Twine *)1);
    *a2 = v6;
    return result;
  }
LABEL_2:
  *a2 = 0;
  return result;
}

uint64_t llvm::LTOCodeGenerator::compile_to_file(llvm::LTOCodeGenerator *this, const char **a2)
{
  uint64_t result = llvm::LTOCodeGenerator::optimize(this);
  if (result)
  {
    return llvm::LTOCodeGenerator::compileOptimizedToFile(this, a2);
  }
  return result;
}

uint64_t llvm::LTOCodeGenerator::optimize(llvm::LTOCodeGenerator *this)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (llvm::LTOCodeGenerator::determineTarget((std::string *)this))
  {
    if (byte_1EBD09E47 >= 0) {
      std::string::size_type v3 = byte_1EBD09E47 & 0x7F;
    }
    else {
      std::string::size_type v3 = qword_1EBD09E38;
    }
    if (byte_1EBD09E47 >= 0) {
      long long v4 = (const std::string::value_type *)&qword_1EBD09E30;
    }
    else {
      long long v4 = (const std::string::value_type *)qword_1EBD09E30;
    }
    if (byte_1EBD0A017 >= 0) {
      uint64_t v5 = byte_1EBD0A017 & 0x7F;
    }
    else {
      uint64_t v5 = qword_1EBD0A008;
    }
    if (byte_1EBD0A017 >= 0) {
      uint64_t v6 = &qword_1EBD0A000;
    }
    else {
      uint64_t v6 = (uint64_t *)qword_1EBD0A000;
    }
    llvm::lto::setupLLVMOptimizationRemarks(*(uint64_t **)this, v4, v3, (uint64_t)v6, v5, byte_1EBD09B58, (uint64_t)&v62, qword_1EBD09C18, *(uint64_t *)&byte_1EBD09C20, -1);
    if (v63)
    {
      uint64_t v20 = (llvm::raw_ostream *)llvm::errs(v7);
      uint64_t v21 = v20;
      BOOL v22 = (_DWORD *)*((void *)v20 + 4);
      if (*((void *)v20 + 3) - (void)v22 > 6uLL)
      {
        *(_DWORD *)((char *)v22 + 3) = 540701295;
        *BOOL v22 = 1869771333;
        *((void *)v20 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v20, "Error: ", 7uLL);
      }
      if (v63)
      {
        uint64_t v23 = v62;
        uint64_t v62 = 0;
      }
      else
      {
        uint64_t v23 = 0;
      }
      uint64_t v33 = v23;
      sub_1CD4FB504(&v33, &v34);
      int v29 = sub_1CD55ABE0(v21, (uint64_t *)&v34);
      sub_1CB8E509C(v29, "\n");
      std::string::~string(&v34);
      sub_1CC950BC0(&v33);
      unint64_t v28 = "Can't get an output file for the remarks";
    }
    else
    {
      uint64_t v8 = v62;
      uint64_t v62 = 0;
      __int16 v9 = (llvm::ToolOutputFile::CleanupInstaller *)*((void *)this + 65);
      *((void *)this + 65) = v8;
      if (v9) {
        sub_1CBAD7E10(this + 520, v9);
      }
      if (byte_1EBD0A0FF >= 0) {
        uint64_t v10 = byte_1EBD0A0FF & 0x7F;
      }
      else {
        uint64_t v10 = unk_1EBD0A0F0;
      }
      llvm::lto::setupStatsFile(v10, (uint64_t)&v60);
      if ((v61 & 1) == 0)
      {
        uint64_t v12 = v60;
        uint64_t v60 = 0;
        uint64_t v13 = (llvm::ToolOutputFile::CleanupInstaller *)*((void *)this + 66);
        *((void *)this + 66) = v12;
        if (v13) {
          sub_1CBAD7E10(this + 528, v13);
        }
        uint64_t v14 = *((void *)this + 1);
        memset(&v34, 0, sizeof(v34));
        llvm::updateVCallVisibilityInModule(v14, 0, (uint64_t)&v34);
        MEMORY[0x1D25D9CD0](0, 8);
        llvm::LTOCodeGenerator::verifyMergedModuleOnce((uint64_t)this);
        llvm::LTOCodeGenerator::applyScopeRestrictions((uint64_t)this);
        llvm::Module::addModuleFlag(*((uint64_t ***)this + 1), (llvm::Type *)1, "LTOPostLink", 0xBuLL, (llvm::Type *)1);
        uint64_t v15 = *((void *)this + 1);
        uint64_t v16 = *((void *)this + 3) + 16;
        LOWORD(v34.__r_.__value_.__r.__words[1]) = 0;
        WORD2(v34.__r_.__value_.__r.__words[2]) = 0;
        unsigned int v36 = &v38;
        long long v37 = xmmword_1CD96EEC0;
        uint64_t v39 = &v41;
        uint64_t v40 = 0x1000000000;
        uint64_t v49 = 0;
        int v50 = 0;
        uint64_t v51 = 0;
        v52[0] = v53;
        v52[1] = 0x800000000;
        uint64_t v56 = 0;
        long long v57 = &v59;
        uint64_t v58 = 0x800000000;
        sub_1CB94E404((uint64_t)&v34, v16);
        sub_1CB94E404(v15 + 272, (uint64_t)&v34);
        llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v34);
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = (unint64_t)&v34.__r_.__value_.__l.__size_;
        v34.__r_.__value_.__r.__words[2] = 0;
        uint64_t v35 = 0;
        unsigned int v36 = 0;
        *(void *)&long long v37 = 0x2800000000;
        uint64_t v38 = &v39;
        uint64_t v39 = 0;
        v42[0] = 0;
        v42[1] = 0;
        uint64_t v40 = 0;
        uint64_t v41 = v42;
        void v42[2] = v43;
        memset(v43, 0, sizeof(v43));
        char v44 = 0;
        int v45 = v46;
        v46[0] = 0;
        v47[0] = 0;
        v47[1] = 0;
        v46[1] = 0;
        v46[2] = v47;
        v47[2] = &v48;
        uint64_t v48 = 0;
        uint64_t v49 = 0;
        int v50 = v52;
        uint64_t v51 = 0x400000000;
        void v53[2] = &v54;
        v53[3] = 0;
        uint64_t v54 = 0;
        long long v55 = xmmword_1CD91D2E0;
        llvm::LTOCodeGenerator::createTargetMachine(this, &__p);
        size_t v17 = __p;
        uint64_t v18 = *((void *)this + 3);
        *((void *)this + 3) = __p;
        if (v18)
        {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
          size_t v17 = (void *)*((void *)this + 3);
        }
        uint64_t v19 = *((void *)this + 1);
        std::error_code __p = 0;
        long long v31 = 0uLL;
        llvm::lto::opt((uint64_t)this + 536, (uint64_t)v17, 0, v19);
      }
      uint64_t v24 = (llvm::raw_ostream *)llvm::errs(v11);
      uint64_t v25 = v24;
      char v26 = (_DWORD *)*((void *)v24 + 4);
      if (*((void *)v24 + 3) - (void)v26 > 6uLL)
      {
        *(_DWORD *)((char *)v26 + 3) = 540701295;
        *char v26 = 1869771333;
        *((void *)v24 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v24, "Error: ", 7uLL);
      }
      uint64_t v32 = v60;
      sub_1CD4FB504(&v32, &v34);
      unsigned int v27 = sub_1CD55ABE0(v25, (uint64_t *)&v34);
      sub_1CB8E509C(v27, "\n");
      std::string::~string(&v34);
      sub_1CC950BC0(&v32);
      unint64_t v28 = "Can't get an output file for the statistics";
    }
    llvm::report_fatal_error((llvm *)v28, (const llvm::Twine *)1);
  }
  return 0;
}

uint64_t llvm::LTOCodeGenerator::compile@<X0>(llvm::LTOCodeGenerator *this@<X0>, void *a2@<X8>)
{
  uint64_t result = llvm::LTOCodeGenerator::optimize(this);
  if (result)
  {
    return llvm::LTOCodeGenerator::compileOptimized(this, a2);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t llvm::LTOCodeGenerator::createTargetMachine@<X0>(llvm::LTOCodeGenerator *this@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *((void *)this + 27);
  std::string::size_type v3 = (char *)this + 216;
  uint64_t v4 = v5;
  uint64_t v6 = *((void *)v3 - 1);
  char v7 = v3[23];
  int v8 = v7;
  if (v7 >= 0) {
    uint64_t v9 = (uint64_t)v3;
  }
  else {
    uint64_t v9 = v4;
  }
  uint64_t v10 = v7 & 0x7F;
  if (v8 >= 0) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = *((void *)v3 + 1);
  }
  char v12 = v3[343];
  if (v12 >= 0) {
    uint64_t v13 = (uint64_t)(v3 + 320);
  }
  else {
    uint64_t v13 = *((void *)v3 + 40);
  }
  if (v12 >= 0) {
    uint64_t v14 = v12 & 0x7F;
  }
  else {
    uint64_t v14 = *((void *)v3 + 41);
  }
  char v15 = *(v3 - 33);
  uint64_t v16 = *((void *)v3 - 6);
  uint64_t v17 = (uint64_t)(v3 + 344);
  uint64_t v18 = *((void *)v3 + 91);
  int v19 = *((_DWORD *)v3 + 186);
  BOOL v20 = v15 < 0;
  uint64_t v23 = *((void *)v3 - 7);
  uint64_t v21 = v3 - 56;
  uint64_t v22 = v23;
  if (v15 >= 0) {
    uint64_t v24 = (uint64_t)v21;
  }
  else {
    uint64_t v24 = v22;
  }
  uint64_t v25 = v15 & 0x7F;
  if (v20) {
    uint64_t v26 = v16;
  }
  else {
    uint64_t v26 = v25;
  }
  uint64_t result = sub_1CD454388(v6, v9, v11, v13, v14, v24, v26, v17, v18, 0, v19, 0);
  *a2 = result;
  return result;
}

void llvm::LTOCodeGenerator::preserveDiscardableGVs(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v17[0] = a3;
  v17[1] = a4;
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  v13[0] = v17;
  v13[1] = a1;
  v13[2] = &v14;
  uint64_t v5 = a2 + 3;
  for (uint64_t i = (void *)a2[4]; i != v5; uint64_t i = (void *)i[1])
  {
    if (i) {
      char v7 = (uint64_t ***)(i - 7);
    }
    else {
      char v7 = 0;
    }
    sub_1CCB8208C(v13, v7);
  }
  for (unint64_t j = (void *)a2[2]; j != a2 + 1; unint64_t j = (void *)j[1])
  {
    if (j) {
      uint64_t v9 = (uint64_t ***)(j - 7);
    }
    else {
      uint64_t v9 = 0;
    }
    sub_1CCB8208C(v13, v9);
  }
  for (int k = (void *)a2[6]; k != a2 + 5; int k = (void *)k[1])
  {
    if (k) {
      uint64_t v11 = (uint64_t ***)(k - 6);
    }
    else {
      uint64_t v11 = 0;
    }
    sub_1CCB8208C(v13, v11);
  }
  char v12 = v14;
  if (v14 != v15)
  {
    sub_1CD1CF0D0(a2, "llvm.compiler.used", (const char *)0x12, v14, v15 - v14);
    char v12 = v14;
  }
  if (v12)
  {
    char v15 = v12;
    operator delete(v12);
  }
}

void sub_1CCB8208C(void *a1, uint64_t ***a2)
{
  int v2 = *((_DWORD *)a2 + 8);
  if ((v2 & 0xFu) > 8 || ((1 << (v2 & 0xF)) & 0x18E) == 0) {
    return;
  }
  uint64_t v6 = (uint64_t *)a1[1];
  if (*((unsigned char *)a2 + 16))
  {
    if (*((unsigned char *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0) {
      return;
    }
  }
  else if ((v2 & 0x800000) == 0 && a2[9] == (uint64_t **)(a2 + 9))
  {
    return;
  }
  if (!(*(unsigned int (**)(void, uint64_t ***))*a1)(*(void *)(*a1 + 8), a2)) {
    return;
  }
  if ((a2[4] & 0xF) == 7)
  {
    if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
    {
      long long v37 = 0;
      unsigned int v36 = &byte_1CFBCE98E;
      goto LABEL_51;
    }
    uint64_t v15 = ***a2;
    uint64_t v16 = *(void *)(v15 + 152);
    uint64_t v17 = *(unsigned int *)(v15 + 168);
    if (v17)
    {
      LODWORD(v18) = (v17 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      int v19 = (uint64_t ****)(v16 + 16 * v18);
      BOOL v20 = *v19;
      if (*v19 == a2)
      {
LABEL_50:
        uint64_t v40 = v19[1];
        uint64_t v41 = *v40;
        unsigned int v36 = (char *)(v40 + 2);
        long long v37 = v41;
LABEL_51:
        uint64_t v39 = "Linker asked to preserve internal global: '";
LABEL_52:
        v42[0] = v39;
        void v42[2] = v36;
        void v42[3] = v37;
        __int16 v43 = 1283;
        v44[0] = v42;
        v44[2] = "'";
        __int16 v45 = 770;
        llvm::Twine::str((llvm::Twine *)v44, v46);
        llvm::LTOCodeGenerator::emitWarning(v6, (uint64_t *)v46);
        if (v47 < 0) {
          operator delete(v46[0]);
        }
        return;
      }
      int v21 = 1;
      while (v20 != (uint64_t ***)-4096)
      {
        int v22 = v18 + v21++;
        uint64_t v18 = v22 & (v17 - 1);
        BOOL v20 = *(uint64_t ****)(v16 + 16 * v18);
        if (v20 == a2)
        {
          int v19 = (uint64_t ****)(v16 + 16 * v18);
          goto LABEL_50;
        }
      }
    }
    int v19 = (uint64_t ****)(v16 + 16 * v17);
    goto LABEL_50;
  }
  if ((a2[4] & 0xF) == 1)
  {
    if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
    {
      long long v37 = 0;
      unsigned int v36 = &byte_1CFBCE98E;
      goto LABEL_48;
    }
    uint64_t v7 = ***a2;
    uint64_t v8 = *(void *)(v7 + 152);
    uint64_t v9 = *(unsigned int *)(v7 + 168);
    if (v9)
    {
      LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v11 = (uint64_t ****)(v8 + 16 * v10);
      char v12 = *v11;
      if (*v11 == a2)
      {
LABEL_47:
        uint64_t v35 = v11[1];
        uint64_t v38 = *v35;
        unsigned int v36 = (char *)(v35 + 2);
        long long v37 = v38;
LABEL_48:
        uint64_t v39 = "Linker asked to preserve available_externally global: '";
        goto LABEL_52;
      }
      int v13 = 1;
      while (v12 != (uint64_t ***)-4096)
      {
        int v14 = v10 + v13++;
        uint64_t v10 = v14 & (v9 - 1);
        char v12 = *(uint64_t ****)(v8 + 16 * v10);
        if (v12 == a2)
        {
          uint64_t v11 = (uint64_t ****)(v8 + 16 * v10);
          goto LABEL_47;
        }
      }
    }
    uint64_t v11 = (uint64_t ****)(v8 + 16 * v9);
    goto LABEL_47;
  }
  uint64_t v23 = (char **)a1[2];
  uint64_t v25 = v23[1];
  unint64_t v24 = (unint64_t)v23[2];
  if ((unint64_t)v25 >= v24)
  {
    unsigned int v27 = *v23;
    uint64_t v28 = (v25 - *v23) >> 3;
    unint64_t v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 61) {
      abort();
    }
    uint64_t v30 = v24 - (void)v27;
    if (v30 >> 2 > v29) {
      unint64_t v29 = v30 >> 2;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v29;
    }
    if (v31)
    {
      if (v31 >> 61) {
        sub_1CB833614();
      }
      uint64_t v32 = (char *)operator new(8 * v31);
    }
    else
    {
      uint64_t v32 = 0;
    }
    uint64_t v33 = &v32[8 * v28];
    *(void *)uint64_t v33 = a2;
    uint64_t v26 = v33 + 8;
    if (v25 != v27)
    {
      do
      {
        uint64_t v34 = *((void *)v25 - 1);
        v25 -= 8;
        *((void *)v33 - 1) = v34;
        v33 -= 8;
      }
      while (v25 != v27);
      uint64_t v25 = *v23;
    }
    *uint64_t v23 = v33;
    v23[1] = v26;
    v23[2] = &v32[8 * v31];
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    *(void *)uint64_t v25 = a2;
    uint64_t v26 = v25 + 8;
  }
  v23[1] = v26;
}

uint64_t llvm::LTOCodeGenerator::restoreLinkageForExternals(uint64_t this)
{
  uint64_t v89 = this;
  if (!*(unsigned char *)(this + 256) || !*(unsigned char *)(this + 512) || !*(_DWORD *)(this + 116)) {
    return this;
  }
  uint64_t v1 = *(void **)(this + 8);
  int v2 = (void *)v1[4];
  int v86 = v1 + 3;
  if (v2 != v1 + 3)
  {
    while (1)
    {
      if (v2) {
        std::string::size_type v3 = v2 - 7;
      }
      else {
        std::string::size_type v3 = 0;
      }
      unsigned int v83 = v3[8];
      if ((v83 & 0xF) - 7 > 1 || (*((unsigned char *)v3 + 23) & 0x10) == 0) {
        goto LABEL_10;
      }
      uint64_t v4 = ***(void ***)v3;
      uint64_t v5 = *(void *)(v4 + 152);
      uint64_t v6 = *(unsigned int *)(v4 + 168);
      if (!v6) {
        goto LABEL_18;
      }
      LODWORD(v7) = (v6 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      uint64_t v8 = (void *)(v5 + 16 * v7);
      uint64_t v9 = (_DWORD *)*v8;
      if ((_DWORD *)*v8 != v3) {
        break;
      }
LABEL_19:
      uint64_t v80 = *(unsigned int *)(v89 + 112);
      if (!v80) {
        goto LABEL_10;
      }
      char v12 = (size_t *)v8[1];
      size_t v15 = *v12;
      int v13 = (unsigned __int8 *)(v12 + 2);
      size_t v14 = v15;
      if (v15)
      {
        int v16 = 0;
        size_t v17 = v14;
        uint64_t v18 = v13;
        do
        {
          int v19 = *v18++;
          int v16 = 33 * v16 + v19;
          --v17;
        }
        while (v17);
      }
      else
      {
        int v16 = 0;
      }
      uint64_t v20 = *(void *)(v89 + 104);
      int v21 = 1;
      int v22 = v16;
      while (1)
      {
        uint64_t v23 = v22 & (v80 - 1);
        unint64_t v24 = *(void **)(v20 + 8 * v23);
        if (v24 != (void *)-8)
        {
          if (!v24) {
            goto LABEL_10;
          }
          if (*(_DWORD *)(v20 + 8 * v80 + 8 + 4 * v23) == v16 && v14 == *v24)
          {
            if (!v14) {
              break;
            }
            this = memcmp(v13, (char *)v24 + *(unsigned int *)(v89 + 124), v14);
            if (!this) {
              break;
            }
          }
        }
        int v22 = v21 + v23;
        ++v21;
      }
      if (v23 == -1 || (int)v23 == v80) {
        goto LABEL_10;
      }
      int v25 = *(_DWORD *)(*(void *)(v20 + 8 * (int)v23) + 8);
      unsigned int v26 = v83 & 0xFFFFFFCF;
      if ((v25 - 7) >= 2) {
        unsigned int v26 = v83;
      }
      unsigned int v27 = v26 & 0xFFFFFFF0 | *(_DWORD *)(*(void *)(v20 + 8 * (int)v23) + 8) & 0xF;
      v3[8] = v27;
      if ((v25 & 0xFu) - 7 >= 2)
      {
        if ((v26 & 0x30) == 0) {
          goto LABEL_10;
        }
        this = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v3);
        if (this) {
          goto LABEL_10;
        }
        unsigned int v27 = v3[8];
      }
      v3[8] = v27 | 0x4000;
LABEL_10:
      int v2 = (void *)v2[1];
      if (v2 == v86)
      {
        uint64_t v1 = *(void **)(v89 + 8);
        goto LABEL_41;
      }
    }
    int v10 = 1;
    while (v9 != (_DWORD *)-4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v6 - 1);
      uint64_t v9 = *(_DWORD **)(v5 + 16 * v7);
      if (v9 == v3)
      {
        uint64_t v8 = (void *)(v5 + 16 * v7);
        goto LABEL_19;
      }
    }
LABEL_18:
    uint64_t v8 = (void *)(v5 + 16 * v6);
    goto LABEL_19;
  }
LABEL_41:
  uint64_t v28 = (void *)v1[2];
  int v87 = v1 + 1;
  if (v28 == v1 + 1) {
    goto LABEL_78;
  }
  do
  {
    if (v28) {
      unint64_t v29 = v28 - 7;
    }
    else {
      unint64_t v29 = 0;
    }
    unsigned int v84 = v29[8];
    if ((v84 & 0xF) - 7 > 1 || (*((unsigned char *)v29 + 23) & 0x10) == 0) {
      goto LABEL_47;
    }
    uint64_t v30 = ***(void ***)v29;
    uint64_t v31 = *(void *)(v30 + 152);
    uint64_t v32 = *(unsigned int *)(v30 + 168);
    if (v32)
    {
      LODWORD(v33) = (v32 - 1) & ((v29 >> 4) ^ (v29 >> 9));
      uint64_t v34 = (void *)(v31 + 16 * v33);
      uint64_t v35 = (_DWORD *)*v34;
      if ((_DWORD *)*v34 == v29) {
        goto LABEL_56;
      }
      int v36 = 1;
      while (v35 != (_DWORD *)-4096)
      {
        int v37 = v33 + v36++;
        uint64_t v33 = v37 & (v32 - 1);
        uint64_t v35 = *(_DWORD **)(v31 + 16 * v33);
        if (v35 == v29)
        {
          uint64_t v34 = (void *)(v31 + 16 * v33);
          goto LABEL_56;
        }
      }
    }
    uint64_t v34 = (void *)(v31 + 16 * v32);
LABEL_56:
    uint64_t v81 = *(unsigned int *)(v89 + 112);
    if (v81)
    {
      uint64_t v38 = (size_t *)v34[1];
      size_t v41 = *v38;
      uint64_t v39 = (unsigned __int8 *)(v38 + 2);
      size_t v40 = v41;
      if (v41)
      {
        int v42 = 0;
        size_t v43 = v40;
        char v44 = v39;
        do
        {
          int v45 = *v44++;
          int v42 = 33 * v42 + v45;
          --v43;
        }
        while (v43);
      }
      else
      {
        int v42 = 0;
      }
      uint64_t v46 = *(void *)(v89 + 104);
      int v47 = 1;
      int v48 = v42;
      while (1)
      {
        uint64_t v49 = v48 & (v81 - 1);
        int v50 = *(void **)(v46 + 8 * v49);
        if (v50 != (void *)-8)
        {
          if (!v50) {
            goto LABEL_47;
          }
          if (*(_DWORD *)(v46 + 8 * v81 + 8 + 4 * v49) == v42 && v40 == *v50)
          {
            if (!v40) {
              break;
            }
            this = memcmp(v39, (char *)v50 + *(unsigned int *)(v89 + 124), v40);
            if (!this) {
              break;
            }
          }
        }
        int v48 = v47 + v49;
        ++v47;
      }
      if (v49 != -1 && (int)v49 != v81)
      {
        int v51 = *(_DWORD *)(*(void *)(v46 + 8 * (int)v49) + 8);
        unsigned int v52 = v84 & 0xFFFFFFCF;
        if ((v51 - 7) >= 2) {
          unsigned int v52 = v84;
        }
        unsigned int v53 = v52 & 0xFFFFFFF0 | *(_DWORD *)(*(void *)(v46 + 8 * (int)v49) + 8) & 0xF;
        v29[8] = v53;
        if ((v51 & 0xFu) - 7 < 2) {
          goto LABEL_76;
        }
        if ((v52 & 0x30) != 0)
        {
          this = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v29);
          if ((this & 1) == 0)
          {
            unsigned int v53 = v29[8];
LABEL_76:
            v29[8] = v53 | 0x4000;
          }
        }
      }
    }
LABEL_47:
    uint64_t v28 = (void *)v28[1];
  }
  while (v28 != v87);
  uint64_t v1 = *(void **)(v89 + 8);
LABEL_78:
  uint64_t v54 = (void *)v1[6];
  uint64_t v88 = v1 + 5;
  if (v54 != v1 + 5)
  {
    while (2)
    {
      if (v54) {
        long long v55 = v54 - 6;
      }
      else {
        long long v55 = 0;
      }
      unsigned int v85 = v55[8];
      if ((v85 & 0xF) - 7 > 1 || (*((unsigned char *)v55 + 23) & 0x10) == 0) {
        goto LABEL_84;
      }
      uint64_t v56 = ***(void ***)v55;
      uint64_t v57 = *(void *)(v56 + 152);
      uint64_t v58 = *(unsigned int *)(v56 + 168);
      if (v58)
      {
        LODWORD(v59) = (v58 - 1) & ((v55 >> 4) ^ (v55 >> 9));
        uint64_t v60 = (void *)(v57 + 16 * v59);
        char v61 = (_DWORD *)*v60;
        if ((_DWORD *)*v60 != v55)
        {
          int v62 = 1;
          while (v61 != (_DWORD *)-4096)
          {
            int v63 = v59 + v62++;
            uint64_t v59 = v63 & (v58 - 1);
            char v61 = *(_DWORD **)(v57 + 16 * v59);
            if (v61 == v55)
            {
              uint64_t v60 = (void *)(v57 + 16 * v59);
              goto LABEL_93;
            }
          }
          goto LABEL_92;
        }
      }
      else
      {
LABEL_92:
        uint64_t v60 = (void *)(v57 + 16 * v58);
      }
LABEL_93:
      uint64_t v82 = *(unsigned int *)(v89 + 112);
      if (v82)
      {
        uint64_t v64 = (size_t *)v60[1];
        size_t v67 = *v64;
        uint64_t v65 = (unsigned __int8 *)(v64 + 2);
        size_t v66 = v67;
        if (v67)
        {
          int v68 = 0;
          size_t v69 = v66;
          int64_t v70 = v65;
          do
          {
            int v71 = *v70++;
            int v68 = 33 * v68 + v71;
            --v69;
          }
          while (v69);
        }
        else
        {
          int v68 = 0;
        }
        uint64_t v72 = *(void *)(v89 + 104);
        int v73 = 1;
        int v74 = v68;
        while (1)
        {
          uint64_t v75 = v74 & (v82 - 1);
          uint64_t v76 = *(void **)(v72 + 8 * v75);
          if (v76 != (void *)-8)
          {
            if (!v76) {
              goto LABEL_84;
            }
            if (*(_DWORD *)(v72 + 8 * v82 + 8 + 4 * v75) == v68 && v66 == *v76)
            {
              if (!v66) {
                break;
              }
              this = memcmp(v65, (char *)v76 + *(unsigned int *)(v89 + 124), v66);
              if (!this) {
                break;
              }
            }
          }
          int v74 = v73 + v75;
          ++v73;
        }
        if (v75 != -1 && (int)v75 != v82)
        {
          int v77 = *(_DWORD *)(*(void *)(v72 + 8 * (int)v75) + 8);
          unsigned int v78 = v85 & 0xFFFFFFCF;
          if ((v77 - 7) >= 2) {
            unsigned int v78 = v85;
          }
          unsigned int v79 = v78 & 0xFFFFFFF0 | *(_DWORD *)(*(void *)(v72 + 8 * (int)v75) + 8) & 0xF;
          v55[8] = v79;
          if ((v77 & 0xFu) - 7 >= 2)
          {
            if ((v78 & 0x30) == 0) {
              goto LABEL_84;
            }
            this = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v55);
            if (this) {
              goto LABEL_84;
            }
            unsigned int v79 = v55[8];
          }
          v55[8] = v79 | 0x4000;
        }
      }
LABEL_84:
      uint64_t v54 = (void *)v54[1];
      if (v54 == v88) {
        return this;
      }
      continue;
    }
  }
  return this;
}

uint64_t llvm::LTOCodeGenerator::emitWarning(uint64_t *a1, uint64_t *a2)
{
  int v2 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))a1[30];
  if (v2)
  {
    if (*((char *)a2 + 23) < 0) {
      a2 = (uint64_t *)*a2;
    }
    uint64_t v3 = a1[31];
    return v2(1, a2, v3);
  }
  else
  {
    uint64_t v5 = *a1;
    __int16 v7 = 260;
    uint64_t v6 = a2;
    int v9 = 3;
    char v10 = 1;
    uint64_t v8 = &unk_1F262CD40;
    int v11 = &v6;
    return llvm::LLVMContext::diagnose(v5, (const llvm::DiagnosticInfo *)&v8);
  }
}

llvm::raw_ostream *llvm::LTOCodeGenerator::finishOptimizationRemarks(llvm::raw_ostream *this)
{
  uint64_t v1 = *((void *)this + 65);
  if (v1)
  {
    *(unsigned char *)(v1 + 24) = 1;
    this = *(llvm::raw_ostream **)(v1 + 136);
    int v2 = (const char *)*((void *)this + 2);
    if (*((const char **)this + 4) != v2)
    {
      *((void *)this + 4) = v2;
      return (llvm::raw_ostream *)llvm::raw_ostream::flush_tied_then_write(this, v2);
    }
  }
  return this;
}

void llvm::LTOCodeGenerator::resetContext(llvm::LTOCodeGenerator *this, llvm::LLVMContext *a2)
{
}

void llvm::LTOCodeGenerator::hideSymbols(llvm::LTOCodeGenerator *this)
{
  llvm::LTOCodeGenerator::determineTarget((std::string *)this);
  llvm::stripNonLineTableDebugInfo(*((llvm **)this + 1), v2);
  llvm::obfuscateModule(*((void *)this + 1), *((void *)this + 3), (uint64_t)this + 264, (uint64_t)this + 40);
}

uint64_t llvm::LTOCodeGenerator::lookupHiddenName(llvm::LTOCodeGenerator *this, char *__s)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (!__s) {
    return 0;
  }
  uint64_t v3 = (char *)this + 264;
  uint64_t v4 = (std::error_category_vtbl *)strlen(__s);
  llvm::Obfuscator::lookupForwardMap((unsigned __int8 *)__s, v4, (uint64_t)v3, (uint64_t)&v6);
  if (v7) {
    return 0;
  }
  else {
    return v6;
  }
}

uint64_t llvm::LTOCodeGenerator::writeReverseMap(llvm::LTOCodeGenerator *this, char *a2)
{
  int v14 = 0;
  size_t v15 = std::system_category();
  if (a2) {
    std::string::size_type v4 = strlen(a2);
  }
  else {
    std::string::size_type v4 = 0;
  }
  llvm::ToolOutputFile::ToolOutputFile(&v9, a2, v4, (uint64_t)&v14, 0);
  uint64_t v5 = 0;
  if (!v14)
  {
    (*(void (**)(char *, llvm::raw_fd_ostream *))(*((void *)this + 33) + 16))((char *)this + 264, v13);
    llvm::raw_fd_ostream::close(v13);
    uint64_t v6 = v13;
    if (*((_DWORD *)v13 + 18))
    {
      char v7 = std::system_category();
      uint64_t v5 = 0;
      *((_DWORD *)v6 + 18) = 0;
      *((void *)v6 + 10) = v7;
    }
    else
    {
      uint64_t v5 = 1;
      char v10 = 1;
    }
  }
  if (v12)
  {
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v11);
    char v12 = 0;
  }
  llvm::ToolOutputFile::CleanupInstaller::~CleanupInstaller((llvm::ToolOutputFile::CleanupInstaller *)&v9);
  return v5;
}

void llvm::LTOCodeGenerator::setCodeGenDebugOptions(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a2;
    uint64_t v5 = a1 + 19;
    uint64_t v6 = a2 + 16 * a3;
    while (1)
    {
      char v7 = *(const void **)v3;
      if (*(void *)v3) {
        break;
      }
      __p[0] = 0;
      __p[1] = 0;
      unint64_t v26 = 0;
LABEL_14:
      unint64_t v12 = a1[18];
      unint64_t v13 = a1[19];
      if (v12 >= v13)
      {
        uint64_t v14 = a1[17];
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v14) >> 3);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_35:
        }
          abort();
        if (0x5555555555555556 * ((uint64_t)(v13 - v14) >> 3) > v16) {
          unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v13 - v14) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v14) >> 3) >= 0x555555555555555) {
          unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v17 = v16;
        }
        uint64_t v30 = v5;
        if (v17)
        {
          if (v17 > 0xAAAAAAAAAAAAAAALL) {
            sub_1CB833614();
          }
          uint64_t v18 = (char *)operator new(24 * v17);
        }
        else
        {
          uint64_t v18 = 0;
        }
        int v19 = &v18[8 * ((uint64_t)(v12 - v14) >> 3)];
        *(_OWORD *)int v19 = *(_OWORD *)__p;
        *((void *)v19 + 2) = v26;
        __p[1] = 0;
        unint64_t v26 = 0;
        __p[0] = 0;
        if (v12 == v14)
        {
          char v23 = 0;
          int64x2_t v22 = vdupq_n_s64(v12);
          uint64_t v20 = &v18[24 * v15];
        }
        else
        {
          uint64_t v20 = &v18[8 * ((uint64_t)(v12 - v14) >> 3)];
          do
          {
            long long v21 = *(_OWORD *)(v12 - 24);
            *((void *)v20 - 1) = *(void *)(v12 - 8);
            *(_OWORD *)(v20 - 24) = v21;
            v20 -= 24;
            *(void *)(v12 - 16) = 0;
            *(void *)(v12 - 8) = 0;
            *(void *)(v12 - 24) = 0;
            v12 -= 24;
          }
          while (v12 != v14);
          int64x2_t v22 = *(int64x2_t *)(a1 + 17);
          unint64_t v13 = a1[19];
          char v23 = HIBYTE(v26);
        }
        unint64_t v24 = v19 + 24;
        a1[17] = v20;
        a1[18] = v19 + 24;
        int64x2_t v28 = v22;
        a1[19] = &v18[24 * v17];
        unint64_t v29 = v13;
        uint64_t v27 = v22.i64[0];
        sub_1CBF4EE0C((uint64_t)&v27);
        a1[18] = v24;
        if (v23 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_OWORD *)unint64_t v12 = *(_OWORD *)__p;
        *(void *)(v12 + 16) = v26;
        a1[18] = v12 + 24;
      }
      v3 += 16;
      if (v3 == v6) {
        return;
      }
    }
    size_t v8 = *(void *)(v3 + 8);
    if (v8 >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_35;
    }
    if (v8 >= 0x17)
    {
      uint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v10 = v8 | 7;
      }
      uint64_t v11 = v10 + 1;
      std::string v9 = operator new(v10 + 1);
      __p[1] = (void *)v8;
      unint64_t v26 = v11 | 0x8000000000000000;
      __p[0] = v9;
    }
    else
    {
      HIBYTE(v26) = *(void *)(v3 + 8);
      std::string v9 = __p;
      if (!v8) {
        goto LABEL_13;
      }
    }
    memmove(v9, v7, v8);
LABEL_13:
    *((unsigned char *)v9 + v8) = 0;
    goto LABEL_14;
  }
}

void llvm::LTOCodeGenerator::parseCodeGenDebugOptions(llvm::LTOCodeGenerator *this)
{
  uint64_t v2 = *((void *)this + 17);
  uint64_t v3 = *((void *)this + 18);
  uint64_t v1 = (uint64_t **)((char *)this + 136);
  if (v2 != v3) {
    llvm::parseCommandLineOptions(v1);
  }
}

void llvm::parseCommandLineOptions(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    uint64_t v3 = (char *)operator new(8uLL);
    *(void *)uint64_t v3 = "libLLVMLTO";
    std::string::size_type v4 = v3 + 8;
    uint64_t v5 = v3 + 8;
    do
    {
      uint64_t v6 = v1;
      if (*((char *)v1 + 23) < 0) {
        uint64_t v6 = (uint64_t *)*v1;
      }
      if (v5 >= v4)
      {
        uint64_t v7 = (v5 - v3) >> 3;
        unint64_t v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 61) {
          abort();
        }
        if ((v4 - v3) >> 2 > v8) {
          unint64_t v8 = (v4 - v3) >> 2;
        }
        if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9)
        {
          if (v9 >> 61) {
            sub_1CB833614();
          }
          uint64_t v10 = (char *)operator new(8 * v9);
        }
        else
        {
          uint64_t v10 = 0;
        }
        uint64_t v11 = &v10[8 * v7];
        std::string::size_type v4 = &v10[8 * v9];
        *(void *)uint64_t v11 = v6;
        unint64_t v12 = v11 + 8;
        if (v5 == v3) {
          goto LABEL_20;
        }
        do
        {
          uint64_t v13 = *((void *)v5 - 1);
          v5 -= 8;
          *((void *)v11 - 1) = v13;
          v11 -= 8;
        }
        while (v5 != v3);
        if (v3) {
LABEL_20:
        }
          operator delete(v3);
        uint64_t v3 = v11;
        uint64_t v5 = v12;
      }
      else
      {
        *(void *)uint64_t v5 = v6;
        v5 += 8;
      }
      v1 += 3;
    }
    while (v1 != v2);
    llvm::cl::ParseCommandLineOptions((llvm *)((unint64_t)(v5 - v3) >> 3), v3, (uint64_t)"", 0, 0, 0, 0);
    if (v3)
    {
      operator delete(v3);
    }
  }
}

void llvm::LTOCodeGenerator::DiagnosticHandler(llvm::LTOCodeGenerator *this, const llvm::DiagnosticInfo *a2)
{
  uint64_t v3 = *((char *)a2 + 12) - 1;
  if (v3 > 2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = dword_1CFB287D0[v3];
  }
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v17 = 0;
  int v8 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  unint64_t v15 = v16;
  int v14 = 0;
  v6[1] = &v7;
  uint64_t v7 = &unk_1F2646F30;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v6[0] = &unk_1F26169D0;
  (*(void (**)(const llvm::DiagnosticInfo *, void *))(*(void *)a2 + 24))(a2, v6);
  if (v11 != v9)
  {
    uint64_t v11 = v9;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v7, v9);
  }
  if (v17 >= 0) {
    uint64_t v5 = v16;
  }
  else {
    uint64_t v5 = (void **)v16[0];
  }
  (*((void (**)(uint64_t, void **, void))this + 30))(v4, v5, *((void *)this + 31));
  uint64_t v7 = &unk_1F2646B98;
  if (v14 == 1 && v9) {
    MEMORY[0x1D25D9CB0](v9, 0x1000C8077774924);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
}

uint64_t llvm::LTOCodeGenerator::setDiagnosticHandler(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  a1[30] = a2;
  a1[31] = a3;
  uint64_t v3 = *a1;
  if (a2) {
    operator new();
  }
  uint64_t result = *(void *)(*(void *)v3 + 72);
  *(void *)(*(void *)v3 + 72) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(unsigned char *)(*(void *)v3 + 80) = 0;
  return result;
}

void *sub_1CCB83350(void *a1)
{
  *a1 = &unk_1F262CCD0;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CCB833A4(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v16 = 0uLL;
  uint64_t v10 = sub_1CD6A068C((llvm *)&v21, a5, a6);
  if ((v22 & 1) == 0)
  {
    long long v16 = v21;
    goto LABEL_7;
  }
  __int16 v18 = 1283;
  v17[0] = "Invalid argument '";
  void v17[2] = a5;
  void v17[3] = a6;
  v19[0] = v17;
  _OWORD v19[2] = "', only integer or 'auto' is supported.";
  __int16 v20 = 770;
  uint64_t v11 = (llvm::raw_ostream *)llvm::errs(v10);
  char v12 = llvm::cl::Option::error((void *)a1, (llvm::Twine *)v19, 0, 0, v11);
  if ((void)v21)
  {
    (*(void (**)(void))(*(void *)v21 + 8))(v21);
    if (v12) {
      return 1;
    }
  }
  else if (v12)
  {
    return 1;
  }
LABEL_7:
  *(_OWORD *)(a1 + 128) = v16;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v14 = *(void *)(a1 + 528);
  if (v14)
  {
    (*(void (**)(uint64_t, long long *))(*(void *)v14 + 48))(v14, &v16);
    return 0;
  }
  else
  {
    sub_1CB920400();
    return sub_1CCB83508(v15);
  }
}

uint64_t sub_1CCB83508(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CCB83520(void *a1)
{
  *a1 = &unk_1F262CC68;
  uint64_t v2 = a1 + 63;
  uint64_t v3 = (void *)a1[66];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F262CCD0;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CCB8361C(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CCB83628(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CCB83638(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    uint64_t v3 = &unk_1F262CD20;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v3, (llvm::raw_ostream *)((char *)result + 144), a2);
  }
  return result;
}

uint64_t sub_1CCB83694(uint64_t result)
{
  *(void *)(result + 128) = 0;
  *(void *)(result + 136) = 0;
  return result;
}

void *sub_1CCB8369C(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void *sub_1CCB836A4(void *a1)
{
  *a1 = &unk_1F262CCD0;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

void sub_1CCB836F8(void *a1)
{
  *a1 = &unk_1F262CCD0;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCB8376C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CCB83774(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 40 * a2);
}

uint64_t sub_1CCB83788(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 40 * a2 + 16);
}

uint64_t sub_1CCB8379C(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 40 * a2 + 32;
}

uint64_t sub_1CCB837B0()
{
  return 0;
}

uint64_t sub_1CCB837B8(uint64_t result, unsigned __int8 *a2, size_t __n, _DWORD *a4)
{
  uint64_t v6 = (llvm::StringMapImpl *)result;
  unsigned int v7 = *(_DWORD *)(result + 8);
  if (!v7)
  {
    *(_DWORD *)(result + 12) = 0;
    *(_DWORD *)(result + 16) = 0;
    uint64_t result = (uint64_t)malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!result) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    *(void *)(result + 128) = 2;
    *(void *)uint64_t v6 = result;
    unsigned int v7 = 16;
    *((_DWORD *)v6 + 2) = 16;
  }
  unint64_t v26 = a4;
  int v8 = 0;
  if (__n)
  {
    size_t v9 = __n;
    uint64_t v10 = a2;
    do
    {
      int v11 = *v10++;
      int v8 = 33 * v8 + v11;
      --v9;
    }
    while (v9);
  }
  uint64_t v12 = *(void *)v6;
  unsigned int v13 = v7 - 1;
  uint64_t v14 = *(void *)v6 + 8 * v7 + 8;
  int v15 = -1;
  int v16 = 1;
  int v17 = v8;
  while (1)
  {
    uint64_t v18 = v17 & v13;
    int v19 = *(void **)(v12 + 8 * v18);
    if (!v19) {
      break;
    }
    if (v19 == (void *)-8)
    {
      if (v15 == -1) {
        int v15 = v17 & v13;
      }
    }
    else if (*(_DWORD *)(v14 + 4 * v18) == v8 && __n == *v19)
    {
      if (!__n) {
        goto LABEL_20;
      }
      uint64_t result = memcmp(a2, (char *)v19 + *((unsigned int *)v6 + 5), __n);
      if (!result) {
        goto LABEL_20;
      }
    }
    int v17 = v16 + v18;
    ++v16;
  }
  uint64_t v20 = v15;
  if (v15 == -1)
  {
    uint64_t v20 = v18;
    uint64_t v18 = v18;
  }
  else
  {
    uint64_t v18 = v15;
  }
  *(_DWORD *)(v14 + 4 * v20) = v8;
  int v19 = *(void **)(v12 + 8 * v18);
LABEL_20:
  if (v19 == (void *)-8)
  {
    --*((_DWORD *)v6 + 4);
  }
  else if (v19)
  {
    return result;
  }
  long long v21 = (char *)operator new(__n + 17, (std::align_val_t)8uLL);
  char v22 = v21;
  uint64_t v23 = v21 + 16;
  if (__n) {
    memcpy(v21 + 16, a2, __n);
  }
  v23[__n] = 0;
  *(void *)char v22 = __n;
  *((_DWORD *)v22 + 2) = *v26;
  *(void *)(v12 + 8 * v18) = v22;
  ++*((_DWORD *)v6 + 3);
  uint64_t result = llvm::StringMapImpl::RehashTable(v6, v18);
  for (uint64_t i = (void *)(*(void *)v6 + 8 * result); !*i || *i == -8; ++i)
    ;
  return result;
}

void sub_1CCB839C4()
{
}

uint64_t sub_1CCB839D8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 128))(a2, *(void *)(a1 + 16));
}

void sub_1CCB83A08(void *a1)
{
  *a1 = &unk_1F262CCD0;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCB83A80()
{
}

void *sub_1CCB83A94()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F262CDC0;
  return result;
}

void sub_1CCB83ACC(uint64_t a1, void *a2)
{
  *a2 = &unk_1F262CDC0;
}

llvm::cl::Option *sub_1CCB83AF8(llvm::cl::Option *a1, char *a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t v8 = sub_1CB883A14((uint64_t)a1, 0, 0);
  *(void *)(v8 + 128) = 0;
  *(void *)(v8 + 136) = 0;
  *(void *)(v8 + 168) = 0;
  *(void *)(v8 + 176) = 0;
  *(unsigned char *)(v8 + 184) = 0;
  *(void *)(v8 + 160) = 0;
  *(void *)(v8 + 144) = 0;
  *(void *)(v8 + 152) = &unk_1F2643C20;
  *(void *)uint64_t v8 = &unk_1F2643FD0;
  *(void *)(v8 + 192) = &unk_1F2643EA0;
  *(void *)(v8 + 200) = &unk_1F25F6428;
  *(void *)(v8 + 224) = v8 + 200;
  size_t v9 = strlen(a2);
  llvm::cl::Option::setArgStr((uint64_t)a1, (unsigned __int8 *)a2, v9);
  *((_OWORD *)a1 + 2) = *a3;
  *((_OWORD *)a1 + 3) = *a4;
  llvm::cl::Option::addArgument(a1);
  return a1;
}

void sub_1CCB83C00()
{
}

void *sub_1CCB83C14()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F262CE08;
  return result;
}

void sub_1CCB83C4C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F262CE08;
}

void sub_1CCB83C74(llvm *a1)
{
}

void sub_1CCB83CD4()
{
}

__n128 sub_1CCB83CE8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F262CE50;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CCB83D34(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F262CE50;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CCB83D64(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void **)(a1 + 16);
  int v3 = *(_DWORD *)(v2 + 964);
  int v9 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"lto-llvm";
  __int16 v7 = 259;
  if (v3) {
    uint64_t v4 = "o";
  }
  else {
    uint64_t v4 = "s";
  }
  *(void *)&v8.__val_ = sub_1CD0E51FC((uint64_t *)&__p, (long long *)v4, 1, &v9, v1, 1, 0);
  v8.__cat_ = v5;
  if (v8.__val_)
  {
    std::error_code::message(&__p, &v8);
    llvm::LTOCodeGenerator::emitError((uint64_t *)v2, (uint64_t *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  operator new();
}

void sub_1CCB83E8C(uint64_t a1)
{
  sub_1CCB83EC4(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCB83EC4(uint64_t a1)
{
  *(void *)a1 = &unk_1F262CE98;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

BOOL sub_1CCB83F44(const void ***a1, llvm::GlobalValue *a2)
{
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0) {
    return 0;
  }
  uint64_t v4 = (unsigned __int8 **)a1[2];
  uint64_t v5 = *a1;
  v5[1] = 0;
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
  {
    unint64_t v14 = 1;
    goto LABEL_12;
  }
  uint64_t v6 = ***(void ***)a2;
  uint64_t v7 = *(void *)(v6 + 152);
  uint64_t v8 = *(unsigned int *)(v6 + 168);
  if (!v8) {
    goto LABEL_10;
  }
  LODWORD(v9) = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v10 = v7 + 16 * v9;
  int v11 = *(llvm::GlobalValue **)v10;
  if (*(llvm::GlobalValue **)v10 != a2)
  {
    int v12 = 1;
    while (v11 != (llvm::GlobalValue *)-4096)
    {
      int v13 = v9 + v12++;
      uint64_t v9 = v13 & (v8 - 1);
      int v11 = *(llvm::GlobalValue **)(v7 + 16 * v9);
      if (v11 == a2)
      {
        uint64_t v10 = v7 + 16 * v9;
        goto LABEL_11;
      }
    }
LABEL_10:
    uint64_t v10 = v7 + 16 * v8;
  }
LABEL_11:
  unint64_t v14 = **(void **)(v10 + 8) + 1;
LABEL_12:
  if ((unint64_t)v5[2] < v14) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  int v15 = (llvm::Mangler *)a1[1];
  int v31 = 0;
  char v35 = 0;
  uint64_t v36 = 0;
  uint64_t v38 = v5;
  int v37 = 0;
  uint64_t v30 = (char *)&unk_1F2646FA8;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  llvm::Mangler::getNameWithPrefix(v15, &v30, a2, 0);
  uint64_t v30 = (char *)&unk_1F2646B98;
  if (v37 == 1 && v32) {
    MEMORY[0x1D25D9CB0](v32, 0x1000C8077774924);
  }
  uint64_t v16 = *((unsigned int *)v4 + 12);
  if (v16)
  {
    int v17 = *a1;
    uint64_t v18 = (unsigned __int8 *)**a1;
    size_t v19 = (size_t)v17[1];
    if (v19)
    {
      int v20 = 0;
      long long v21 = (char *)v17[1];
      char v22 = v18;
      do
      {
        int v23 = *v22++;
        int v20 = 33 * v20 + v23;
        --v21;
      }
      while (v21);
    }
    else
    {
      int v20 = 0;
    }
    unint64_t v24 = v4[5];
    int v25 = 1;
    int v26 = v20;
    while (1)
    {
      uint64_t v27 = v26 & (v16 - 1);
      int64x2_t v28 = *(void **)&v24[8 * v27];
      if (v28 != (void *)-8)
      {
        if (!v28)
        {
          uint64_t v29 = v16;
          return v29 != v16;
        }
        if (*(_DWORD *)&v24[8 * v16 + 8 + 4 * v27] == v20
          && v19 == *v28
          && (!v19 || !memcmp(v18, (char *)v28 + *((unsigned int *)v4 + 15), v19)))
        {
          break;
        }
      }
      int v26 = v25 + v27;
      ++v25;
    }
    uint64_t v29 = (int)v27;
    if (v27 == -1) {
      uint64_t v29 = v16;
    }
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v29 = 0;
  }
  return v29 != v16;
}

void sub_1CCB841C0()
{
}

__n128 sub_1CCB841D4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F262CEB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CCB84228(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F262CEB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CCB84260(void *a1, llvm::GlobalValue *a2)
{
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0) {
    return 0;
  }
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[1];
  *(void *)(v5 + 8) = 0;
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
  {
    unint64_t v14 = 1;
    goto LABEL_12;
  }
  uint64_t v6 = ***(void ***)a2;
  uint64_t v7 = *(void *)(v6 + 152);
  uint64_t v8 = *(unsigned int *)(v6 + 168);
  if (!v8) {
    goto LABEL_10;
  }
  LODWORD(v9) = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v10 = v7 + 16 * v9;
  int v11 = *(llvm::GlobalValue **)v10;
  if (*(llvm::GlobalValue **)v10 != a2)
  {
    int v12 = 1;
    while (v11 != (llvm::GlobalValue *)-4096)
    {
      int v13 = v9 + v12++;
      uint64_t v9 = v13 & (v8 - 1);
      int v11 = *(llvm::GlobalValue **)(v7 + 16 * v9);
      if (v11 == a2)
      {
        uint64_t v10 = v7 + 16 * v9;
        goto LABEL_11;
      }
    }
LABEL_10:
    uint64_t v10 = v7 + 16 * v8;
  }
LABEL_11:
  unint64_t v14 = **(void **)(v10 + 8) + 1;
LABEL_12:
  if (*(void *)(v5 + 16) < v14) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  int v15 = (llvm::Mangler *)a1[2];
  int v31 = 0;
  char v35 = 0;
  uint64_t v36 = 0;
  uint64_t v38 = v5;
  int v37 = 0;
  uint64_t v30 = (char *)&unk_1F2646FA8;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  llvm::Mangler::getNameWithPrefix(v15, &v30, a2, 0);
  uint64_t v30 = (char *)&unk_1F2646B98;
  if (v37 == 1 && v32) {
    MEMORY[0x1D25D9CB0](v32, 0x1000C8077774924);
  }
  uint64_t v16 = *(unsigned int *)(v4 + 48);
  if (v16)
  {
    int v17 = (unsigned __int8 **)a1[1];
    uint64_t v18 = *v17;
    size_t v19 = (size_t)v17[1];
    if (v19)
    {
      int v20 = 0;
      long long v21 = v17[1];
      char v22 = v18;
      do
      {
        int v23 = *v22++;
        int v20 = 33 * v20 + v23;
        --v21;
      }
      while (v21);
    }
    else
    {
      int v20 = 0;
    }
    uint64_t v24 = *(void *)(v4 + 40);
    int v25 = 1;
    int v26 = v20;
    while (1)
    {
      uint64_t v27 = v26 & (v16 - 1);
      int64x2_t v28 = *(void **)(v24 + 8 * v27);
      if (v28 != (void *)-8)
      {
        if (!v28)
        {
          uint64_t v29 = v16;
          return v29 != v16;
        }
        if (*(_DWORD *)(v24 + 8 * v16 + 8 + 4 * v27) == v20
          && v19 == *v28
          && (!v19 || !memcmp(v18, (char *)v28 + *(unsigned int *)(v4 + 60), v19)))
        {
          break;
        }
      }
      int v26 = v25 + v27;
      ++v25;
    }
    uint64_t v29 = (int)v27;
    if (v27 == -1) {
      uint64_t v29 = v16;
    }
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v29 = 0;
  }
  return v29 != v16;
}

void sub_1CCB844D8(uint64_t a1)
{
  sub_1CC009394(a1 + 56);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 56), 8);
  sub_1CC9159BC((void *)(a1 + 8));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCB8453C()
{
}

uint64_t sub_1CCB84550(uint64_t a1, const llvm::DiagnosticInfo *a2)
{
  return 1;
}

uint64_t sub_1CCB84570()
{
  v6.n128_u64[0] = (unint64_t)"Strip names from Value during LTO (other than GlobalValue).";
  v6.n128_u64[1] = 59;
  char v4 = 1;
  *(void *)&long long v5 = &v4;
  int v3 = 1;
  sub_1CD4130FC((llvm::cl::Option *)&llvm::LTODiscardValueNames, "lto-discard-value-names", &v6, (unsigned char **)&v5, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::LTODiscardValueNames, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"No assembly allowed in LTO module";
  v6.n128_u64[1] = 33;
  LOBYTE(v3) = 0;
  *(void *)&long long v5 = &v3;
  sub_1CD41D15C((uint64_t)&llvm::LTOModuleNoAsm, "lto-module-no-asm", &v6, (unsigned char **)&v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::LTOModuleNoAsm, &dword_1CB82C000);
  sub_1CB883A14((uint64_t)&llvm::RemarksWithHotness, 0, 0);
  byte_1EBD09B58 = 0;
  qword_1EBD09B60 = (uint64_t)&unk_1F25EDE58;
  unk_1EBD09B68 = 0;
  llvm::RemarksWithHotness = (uint64_t)&unk_1F26440A0;
  qword_1EBD09B70 = (uint64_t)&unk_1F2643CC0;
  qword_1EBD09B78 = (uint64_t)&unk_1F25EDE78;
  qword_1EBD09B90 = (uint64_t)&qword_1EBD09B78;
  llvm::cl::Option::setArgStr((uint64_t)&llvm::RemarksWithHotness, "lto-pass-remarks-with-hotness", 0x1DuLL);
  qword_1EBD09AF8 = (uint64_t)"With PGO, include profile count in optimization remarks";
  unk_1EBD09B00 = 55;
  word_1EBD09AE2 = word_1EBD09AE2 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::RemarksWithHotness);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::RemarksWithHotness, &dword_1CB82C000);
  uint64_t v0 = sub_1CB883A14((uint64_t)&llvm::RemarksHotnessThreshold, 0, 0);
  LOBYTE(qword_1EBD09C18) = 0;
  byte_1EBD09C20 = 0;
  qword_1EBD09C28 = (uint64_t)&unk_1F262CD20;
  llvm::RemarksHotnessThreshold = (uint64_t)&unk_1F262CC68;
  qword_1EBD09C38 = (uint64_t)&llvm::RemarksHotnessThreshold;
  unk_1EBD09C40 = &unk_1EBD09C50;
  qword_1EBD09C48 = 0x800000000;
  qword_1EBD09C30 = (uint64_t)&unk_1F262CD70;
  qword_1EBD09D90 = (uint64_t)&unk_1F262CDC0;
  qword_1EBD09DA8 = (uint64_t)&qword_1EBD09D90;
  llvm::cl::Option::setArgStr(v0, "lto-pass-remarks-hotness-threshold", 0x22uLL);
  qword_1EBD09BB8 = (uint64_t)"Minimum profile count required for an optimization remark to be output. Use 'auto' to apply"
                             " the threshold from profile summary.";
  unk_1EBD09BC0 = 127;
  qword_1EBD09BC8 = (uint64_t)"uint or 'auto'";
  unk_1EBD09BD0 = 14;
  qword_1EBD09C18 = 0;
  byte_1EBD09C20 = 1;
  word_1EBD09BA2 = word_1EBD09BA2 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::RemarksHotnessThreshold);
  __cxa_atexit((void (*)(void *))sub_1CCB7FCE4, &llvm::RemarksHotnessThreshold, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Output filename for pass remarks";
  v6.n128_u64[1] = 32;
  *(void *)&long long v5 = "filename";
  *((void *)&v5 + 1) = 8;
  sub_1CCB83AF8((llvm::cl::Option *)&llvm::RemarksFilename, "lto-pass-remarks-output", &v6, &v5);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &llvm::RemarksFilename, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Only record optimization remarks from passes whose names match the given regular expression";
  v6.n128_u64[1] = 91;
  *(void *)&long long v5 = "regex";
  *((void *)&v5 + 1) = 5;
  sub_1CCB83AF8((llvm::cl::Option *)&llvm::RemarksPasses, "lto-pass-remarks-filter", &v6, &v5);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &llvm::RemarksPasses, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"yaml";
  sub_1CB883A14((uint64_t)&llvm::RemarksFormat, 0, 0);
  qword_1EBD0A000 = 0;
  qword_1EBD0A008 = 0;
  qword_1EBD0A028 = 0;
  unk_1EBD0A030 = 0;
  byte_1EBD0A038 = 0;
  qword_1EBD0A020 = 0;
  unk_1EBD0A010 = 0;
  unk_1EBD0A018 = &unk_1F2643C20;
  llvm::RemarksFormat = (uint64_t)&unk_1F2643FD0;
  qword_1EBD0A040 = (uint64_t)&unk_1F2643EA0;
  qword_1EBD0A048 = (uint64_t)&unk_1F25F6428;
  qword_1EBD0A060 = (uint64_t)&qword_1EBD0A048;
  llvm::cl::Option::setArgStr((uint64_t)&llvm::RemarksFormat, "lto-pass-remarks-format", 0x17uLL);
  qword_1EBD09FA0 = (uint64_t)"The format used for serializing remarks (default: YAML)";
  unk_1EBD09FA8 = 55;
  qword_1EBD09FB0 = (uint64_t)"format";
  unk_1EBD09FB8 = 6;
  sub_1CD476D48((const char **)&v6, (uint64_t)&llvm::RemarksFormat);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::RemarksFormat);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &llvm::RemarksFormat, &dword_1CB82C000);
  uint64_t v1 = sub_1CB883A14((uint64_t)&llvm::LTOStatsFile, 0, 0);
  qword_1EBD0A0E8 = 0;
  unk_1EBD0A0F0 = 0;
  qword_1EBD0A110 = 0;
  unk_1EBD0A118 = 0;
  byte_1EBD0A120 = 0;
  qword_1EBD0A108 = 0;
  unk_1EBD0A0F8 = 0;
  unk_1EBD0A100 = &unk_1F2643C20;
  llvm::LTOStatsFile = (uint64_t)&unk_1F2643FD0;
  qword_1EBD0A128 = (uint64_t)&unk_1F2643EA0;
  qword_1EBD0A130 = (uint64_t)&unk_1F25F6428;
  qword_1EBD0A148 = (uint64_t)&qword_1EBD0A130;
  llvm::cl::Option::setArgStr(v1, "lto-stats-file", 0xEuLL);
  qword_1EBD0A088 = (uint64_t)"Save statistics to the specified file";
  unk_1EBD0A090 = 37;
  word_1EBD0A072 = word_1EBD0A072 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::LTOStatsFile);
  return __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &llvm::LTOStatsFile, &dword_1CB82C000);
}

uint64_t llvm::computeSyntheticCounts(uint64_t this, llvm::ModuleSummaryIndex *a2)
{
  if (byte_1EBCEE230)
  {
    sub_1CC15303C(this, (uint64_t)v13);
    uint64_t v2 = v14;
    int v3 = v15;
    if (v15 != v14)
    {
      uint64_t v4 = dword_1EBD08F30;
      do
      {
        unint64_t v5 = *v2 & 0xFFFFFFFFFFFFFFF8;
        __n128 v6 = *(uint64_t **)(v5 + 24);
        uint64_t v7 = *(void *)(v5 + 32) - (void)v6;
        if (v7)
        {
          uint64_t v8 = 8 * (v7 >> 3);
          do
          {
            uint64_t v9 = *v6;
            if (*v6) {
              BOOL v10 = *(_DWORD *)(*v6 + 8) == 0;
            }
            else {
              BOOL v10 = 0;
            }
            if (v10) {
              uint64_t v9 = *(void *)(v9 + 72);
            }
            *(void *)(v9 + 72) = v4;
            ++v6;
            v8 -= 8;
          }
          while (v8);
        }
        v2 += 2;
      }
      while (v2 != v3);
    }
    sub_1CD4AF02C(v13);
    v13[0] = &v12;
    v13[1] = &v11;
    llvm::SyntheticCountsUtils<llvm::ModuleSummaryIndex *>::propagate();
  }
  return this;
}

void sub_1CCB84C08(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t v3 = *(unsigned int *)(a2 + 8);
  uint64_t v4 = *(uint64_t **)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (*(uint64_t **)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) == v4)
  {
    unint64_t v7 = 0;
    BOOL v15 = v3 >= 8;
    uint64_t v9 = 65528;
    if (v15) {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v5 = *v4;
    if (v5) {
      BOOL v6 = *(_DWORD *)(v5 + 8) == 0;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6) {
      uint64_t v5 = *(void *)(v5 + 72);
    }
    if (v3 < 8)
    {
      unint64_t v7 = 0;
      uint64_t v9 = 65528;
      goto LABEL_26;
    }
    unint64_t v7 = *(void *)(v5 + 72);
    if (!v7)
    {
      uint64_t v9 = 0;
      goto LABEL_26;
    }
    unint64_t v8 = v3 >> 3;
    uint64_t v9 = HIDWORD(v7);
    if (!HIDWORD(v7))
    {
      v7 *= v8;
      if (!v7) {
        goto LABEL_26;
      }
      goto LABEL_25;
    }
    unint64_t v10 = v7 * (unint64_t)v8;
    v7 *= v8;
    unint64_t v11 = (v9 * (unint64_t)v8) >> 32;
    if (v7 >= v10) {
      unint64_t v12 = v11;
    }
    else {
      unint64_t v12 = v11 + 1;
    }
    if (v12)
    {
      __int16 v13 = __clz(v12);
      LOWORD(v9) = 64 - v13;
      unint64_t v14 = (v7 >> -(char)v13) | (v12 << v13);
      if ((v7 >> (v13 ^ 0x3Fu)))
      {
        unint64_t v7 = v14 + 1;
        if (v14 == -1)
        {
          unint64_t v7 = 0x8000000000000000;
          LOWORD(v9) = 65 - v13;
        }
      }
      else
      {
        unint64_t v7 = v14;
      }
    }
    else
    {
      LOWORD(v9) = 0;
    }
    uint64_t v9 = (unsigned __int16)v9;
    if (v7) {
LABEL_25:
    }
      uint64_t v9 = (unsigned __int16)(v9 - 8);
  }
LABEL_26:
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1CCB84D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[0] = a3;
  v13[1] = a4;
  uint64_t v4 = *(uint64_t **)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32) - (void)v4;
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      uint64_t v7 = *v4;
      if (*v4) {
        BOOL v8 = *(_DWORD *)(*v4 + 8) == 0;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8) {
        uint64_t v7 = *(void *)(v7 + 72);
      }
      uint64_t v9 = *(void *)(v7 + 72);
      unint64_t v10 = sub_1CBF830A4((uint64_t)v13);
      unint64_t v11 = v10 + v9;
      BOOL v12 = __CFADD__(v10, v9);
      if (v11 < v10) {
        BOOL v12 = 1;
      }
      if (v12) {
        unint64_t v11 = -1;
      }
      *(void *)(v7 + 72) = v11;
      ++v4;
      v6 -= 8;
    }
    while (v6);
  }
}

uint64_t sub_1CCB84DA0()
{
  char v3 = 0;
  uint64_t v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Synthesize entry counts based on the summary";
  v1.n128_u64[1] = 44;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCEE1B0, "thinlto-synthesize-entry-counts", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEE1B0, &dword_1CB82C000);
}

void llvm::updateCompilerUsed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  memset(v14, 0, sizeof(v14));
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0x800000000;
  __int16 v13 = v14;
  if (*(char *)(a2 + 471) < 0)
  {
    sub_1CB8BDF7C((uint64_t)__p, *(const void **)(a2 + 448), *(void *)(a2 + 456));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a2 + 448);
    uint64_t v16 = *(void *)(a2 + 464);
  }
  uint64_t v18 = *(void *)(a2 + 488);
  long long v17 = *(_OWORD *)(a2 + 472);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v23 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  *(void *)&long long v4 = -1;
  *((void *)&v4 + 1) = -1;
  v19[0] = v4;
  v19[1] = v4;
  _OWORD v19[2] = v4;
  void v19[3] = v4;
  void v19[4] = v4;
  void v19[5] = v4;
  *(_OWORD *)int v20 = v4;
  *(void *)&v20[13] = -1;
  sub_1CC153974((uint64_t)v19, (int *)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v19;
  __p[1] = &v17;
  uint64_t v16 = 0x600000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod();
}

void sub_1CCB85358(uint64_t *a1, const llvm::GlobalValue *a2)
{
  v74[8] = *MEMORY[0x1E4F143B8];
  int v3 = *((unsigned __int8 *)a2 + 16);
  if (*((unsigned char *)a2 + 16))
  {
    if (v3 == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0) {
      return;
    }
  }
  else if (*((const llvm::GlobalValue **)a2 + 9) == (const llvm::GlobalValue *)((char *)a2 + 72) {
         && (*((unsigned char *)a2 + 34) & 0x80) == 0)
  }
  {
    return;
  }
  if ((*((_DWORD *)a2 + 8) & 0xF) == 8) {
    return;
  }
  if (v3 == 1)
  {
    uint64_t v4 = *((void *)a2 - 4);
    if (v4) {
      BOOL v5 = *(unsigned char *)(v4 + 16) == 0;
    }
    else {
      BOOL v5 = 0;
    }
    int v6 = v5;
  }
  else
  {
    int v6 = 0;
    if (!*((unsigned char *)a2 + 16)) {
      goto LABEL_17;
    }
  }
  if (!v6) {
    goto LABEL_53;
  }
LABEL_17:
  if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
  {
    uint64_t v7 = ***(void ***)a2;
    uint64_t v8 = *(void *)(v7 + 152);
    uint64_t v9 = *(unsigned int *)(v7 + 168);
    if (v9)
    {
      LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v11 = (const llvm::GlobalValue **)(v8 + 16 * v10);
      uint64_t v12 = *v11;
      if (*v11 == a2) {
        goto LABEL_25;
      }
      int v13 = 1;
      while (v12 != (const llvm::GlobalValue *)-4096)
      {
        int v14 = v10 + v13++;
        uint64_t v10 = v14 & (v9 - 1);
        uint64_t v12 = *(const llvm::GlobalValue **)(v8 + 16 * v10);
        if (v12 == a2)
        {
          uint64_t v11 = (const llvm::GlobalValue **)(v8 + 16 * v10);
          goto LABEL_25;
        }
      }
    }
    uint64_t v11 = (const llvm::GlobalValue **)(v8 + 16 * v9);
LABEL_25:
    unsigned int v15 = *((_DWORD *)a1 + 12);
    if (v15)
    {
      uint64_t v16 = v11[1];
      size_t v19 = *(void *)v16;
      uint64_t v18 = (char *)v16 + 16;
      size_t v17 = v19;
      if (v19)
      {
        uint64_t v20 = 0;
        int v21 = 0;
        do
          int v21 = 33 * v21 + v18[v20++];
        while (v17 != v20);
        char v22 = 0;
      }
      else
      {
        int v21 = 0;
        char v22 = 1;
      }
      goto LABEL_30;
    }
    goto LABEL_53;
  }
  unsigned int v15 = *((_DWORD *)a1 + 12);
  if (v15)
  {
    size_t v17 = 0;
    int v21 = 0;
    char v22 = 1;
    uint64_t v18 = &byte_1CFBCE98E;
LABEL_30:
    unsigned int v23 = v15 - 1;
    uint64_t v24 = a1[5];
    uint64_t v70 = v15;
    uint64_t v25 = v24 + 8 * v15 + 8;
    int v26 = 1;
    int v27 = v21;
    while (1)
    {
      uint64_t v28 = v27 & v23;
      uint64_t v29 = *(void **)(v24 + 8 * v28);
      if (v29 != (void *)-8)
      {
        if (!v29) {
          goto LABEL_53;
        }
        if (*(_DWORD *)(v25 + 4 * v28) == v21
          && v17 == *v29
          && ((v22 & 1) != 0 || !memcmp(v18, (char *)v29 + *((unsigned int *)a1 + 15), v17)))
        {
          break;
        }
      }
      int v27 = v26 + v28;
      ++v26;
    }
    if (v28 != -1 && (int)v28 != v70)
    {
      uint64_t v30 = (const llvm::GlobalValue ***)a1[9];
      uint64_t v32 = v30[1];
      unint64_t v31 = (unint64_t)v30[2];
      if ((unint64_t)v32 < v31)
      {
        *uint64_t v32 = a2;
        uint64_t v33 = v32 + 1;
LABEL_88:
        v30[1] = v33;
        return;
      }
      uint64_t v34 = *v30;
      uint64_t v35 = v32 - *v30;
      unint64_t v36 = v35 + 1;
      if (!((unint64_t)(v35 + 1) >> 61))
      {
        uint64_t v37 = v31 - (void)v34;
        if (v37 >> 2 > v36) {
          unint64_t v36 = v37 >> 2;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (!v38)
        {
          uint64_t v39 = 0;
          goto LABEL_83;
        }
        if (!(v38 >> 61))
        {
          uint64_t v39 = (char *)operator new(8 * v38);
LABEL_83:
          uint64_t v65 = (const llvm::GlobalValue **)&v39[8 * v35];
          *uint64_t v65 = a2;
          uint64_t v33 = v65 + 1;
          if (v32 != v34)
          {
            do
            {
              size_t v66 = *--v32;
              *--uint64_t v65 = v66;
            }
            while (v32 != v34);
            uint64_t v32 = *v30;
          }
          *uint64_t v30 = v65;
          v30[1] = v33;
          v30[2] = (const llvm::GlobalValue **)&v39[8 * v38];
          if (v32) {
            operator delete(v32);
          }
          goto LABEL_88;
        }
LABEL_97:
        sub_1CB833614();
      }
LABEL_96:
      abort();
    }
  }
LABEL_53:
  long long __s1 = v74;
  *(_OWORD *)__uint64_t n = xmmword_1CD96DBD0;
  llvm::TargetMachine::getNameWithPrefix(a1[1], (uint64_t)&__s1, a2, (llvm::Mangler *)(a1 + 2), 0);
  size_t v40 = (uint64_t *)*a1;
  size_t v41 = __s1;
  uint64_t v42 = *(unsigned int *)(*a1 + 8);
  if (v42)
  {
    size_t v43 = __n[0];
    int v44 = 0;
    if (__n[0])
    {
      size_t v45 = __n[0];
      uint64_t v46 = (unsigned __int8 *)__s1;
      do
      {
        int v47 = *v46++;
        int v44 = 33 * v44 + v47;
        --v45;
      }
      while (v45);
    }
    unsigned int v48 = v42 - 1;
    uint64_t v49 = *v40;
    uint64_t v69 = *(unsigned int *)(*a1 + 8);
    uint64_t v50 = *v40 + 8 * v42 + 8;
    int v51 = 1;
    int v52 = v44;
    while (1)
    {
      uint64_t v53 = v52 & v48;
      uint64_t v54 = *(void **)(v49 + 8 * v53);
      if (v54 != (void *)-8)
      {
        if (!v54) {
          goto LABEL_65;
        }
        if (*(_DWORD *)(v50 + 4 * v53) == v44
          && v43 == *v54
          && (!v43 || !memcmp(v41, (char *)v54 + *((unsigned int *)v40 + 5), v43)))
        {
          break;
        }
      }
      int v52 = v51 + v53;
      ++v51;
    }
    if (v53 != -1 && (int)v53 != v69)
    {
      long long v55 = (const llvm::GlobalValue ***)a1[9];
      uint64_t v57 = v55[1];
      unint64_t v56 = (unint64_t)v55[2];
      if ((unint64_t)v57 >= v56)
      {
        uint64_t v59 = *v55;
        uint64_t v60 = v57 - *v55;
        unint64_t v61 = v60 + 1;
        if ((unint64_t)(v60 + 1) >> 61) {
          goto LABEL_96;
        }
        uint64_t v62 = v56 - (void)v59;
        if (v62 >> 2 > v61) {
          unint64_t v61 = v62 >> 2;
        }
        if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v63 = v61;
        }
        if (v63)
        {
          if (v63 >> 61) {
            goto LABEL_97;
          }
          uint64_t v64 = (char *)operator new(8 * v63);
        }
        else
        {
          uint64_t v64 = 0;
        }
        size_t v67 = (const llvm::GlobalValue **)&v64[8 * v60];
        llvm::Type *v67 = a2;
        uint64_t v58 = v67 + 1;
        if (v57 != v59)
        {
          do
          {
            int v68 = *--v57;
            *--size_t v67 = v68;
          }
          while (v57 != v59);
          uint64_t v57 = *v55;
        }
        *long long v55 = v67;
        v55[1] = v58;
        v55[2] = (const llvm::GlobalValue **)&v64[8 * v63];
        if (v57) {
          operator delete(v57);
        }
      }
      else
      {
        uint64_t *v57 = a2;
        uint64_t v58 = v57 + 1;
      }
      v55[1] = v58;
      size_t v41 = __s1;
    }
  }
LABEL_65:
  if (v41 != v74) {
    free(v41);
  }
}

__n128 llvm::TargetMachineBuilder::init(std::string *this, const llvm::Triple *a2)
{
  if (SHIBYTE(this[2].__r_.__value_.__r.__words[2]) < 0)
  {
    if (this[2].__r_.__value_.__l.__size_) {
      goto LABEL_24;
    }
  }
  else if (*((unsigned char *)&this[2].__r_.__value_.__s + 23))
  {
    goto LABEL_24;
  }
  unsigned int v4 = *((_DWORD *)a2 + 9);
  BOOL v5 = v4 > 0x21;
  uint64_t v6 = (1 << v4) & 0x3F0000888;
  if (!v5 && v6 != 0)
  {
    if (LODWORD(this[1].__r_.__value_.__l.__data_) == 42)
    {
      uint64_t v8 = "core2";
LABEL_23:
      MEMORY[0x1D25D9630](&this[2], v8);
      goto LABEL_24;
    }
    if (*((_DWORD *)a2 + 6) == 41)
    {
      uint64_t v8 = "yonah";
      goto LABEL_23;
    }
    ArchName = llvm::Triple::getArchName(a2);
    if (v10 == 6 && *(_DWORD *)ArchName == 913142369 && *((_WORD *)ArchName + 2) == 25908)
    {
      uint64_t v8 = "apple-a12";
      goto LABEL_23;
    }
    if (LODWORD(this[1].__r_.__value_.__l.__data_) == 5)
    {
      uint64_t v8 = "apple-s4";
      goto LABEL_23;
    }
    if (*((_DWORD *)a2 + 6) == 3)
    {
      uint64_t v8 = "cyclone";
      goto LABEL_23;
    }
  }
LABEL_24:
  std::string::operator=(this, (const std::string *)a2);
  std::string::size_type v12 = *((void *)a2 + 5);
  __n128 result = *(__n128 *)((char *)a2 + 24);
  *(__n128 *)&this[1].__r_.__value_.__l.__data_ = result;
  this[1].__r_.__value_.__r.__words[2] = v12;
  return result;
}

void llvm::ThinLTOCodeGenerator::saveTempBitcode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  if (a4)
  {
    v19[0] = a3;
    v19[1] = a4;
    _OWORD v19[2] = a5;
    __int16 v20 = 2053;
    v16[0] = v19;
    v16[2] = a6;
    v16[3] = a7;
    __int16 v17 = 1282;
    llvm::Twine::str((llvm::Twine *)v16, v21);
    v18[0] = 0;
    std::system_category();
    if (v22 >= 0) {
      uint64_t v7 = v21;
    }
    else {
      uint64_t v7 = (unsigned char *)v21[0];
    }
    if (v22 >= 0) {
      uint64_t v8 = v22 & 0x7F;
    }
    else {
      uint64_t v8 = v21[1];
    }
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v16, v7, v8, (uint64_t)v18, 0);
    if (!v18[0]) {
      llvm::WriteBitcodeToFile();
    }
    int v13 = "Failed to open ";
    __int16 v14 = 259;
    __int16 v12 = 260;
    v11[0] = (uint64_t)v21;
    sub_1CD3E3950((uint64_t *)&v13, v11, (uint64_t)v15);
    uint64_t v9 = " to save optimized bitcode\n";
    __int16 v10 = 259;
    sub_1CD3E3950(v15, (uint64_t *)&v9, (uint64_t)v19);
    llvm::report_fatal_error((llvm *)v19, (const llvm::Twine *)1);
  }
}

void llvm::ThinLTOCodeGenerator::generateModuleMap(uint64_t **a1@<X1>, llvm::StringMapImpl *a2@<X8>)
{
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0x1000000000;
  int v3 = *a1;
  unsigned int v4 = a1[1];
  while (v3 != v4)
  {
    uint64_t v6 = *v3++;
    uint64_t v5 = v6;
    char v7 = *(unsigned char *)(v6 + 247);
    uint64_t v8 = (unsigned __int8 *)(v6 + 224);
    uint64_t v9 = *(unsigned __int8 **)(v6 + 224);
    int v10 = v7;
    if (v7 >= 0) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v9;
    }
    size_t v12 = v7 & 0x7F;
    if (v10 >= 0) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = *(void *)(v5 + 232);
    }
    *(void *)(*sub_1CCB8C044(a2, v11, v13) + 8) = v5;
  }
}

void llvm::ThinLTOCodeGenerator::loadModuleFromInput(llvm::BitcodeModule **a1@<X1>, int a2@<W3>, llvm **a3@<X8>)
{
  v22[21] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  int v15 = 0;
  *(_OWORD *)size_t v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  *(_OWORD *)__int16 v17 = 0u;
  long long v18 = 0u;
  *(_OWORD *)std::string __p = 0u;
  uint64_t v20 = 0;
  v21[0] = v22;
  v21[1] = (void *)0x400000000;
  if (a2)
  {
    llvm::BitcodeModule::getLazyModule(v6, (uint64_t)&v10);
    if (v11)
    {
LABEL_15:
      uint64_t v9 = (char *)v10;
      int v10 = 0;
      uint64_t v8 = v6;
      sub_1CCB85CC4(&v9, (uint64_t)&v8);
      sub_1CC950BC0((uint64_t *)&v9);
      llvm::report_fatal_error((llvm *)"Can't load module, abort.", (const llvm::Twine *)1);
    }
  }
  else
  {
    llvm::BitcodeModule::getModuleImpl((long long *)v6, (uint64_t)&v10);
    if (v11) {
      goto LABEL_15;
    }
    sub_1CCB85EB8(v10);
  }
  char v7 = v10;
  int v10 = 0;
  *a3 = v7;
  sub_1CC1CC83C((uint64_t)&v10);
  sub_1CC1925A4(v21);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[1]);
  }
  if (SHIBYTE(v17[0]) < 0) {
    operator delete(v16[0]);
  }
  if (SBYTE7(v14) < 0) {
    operator delete(v13[0]);
  }
}

char **sub_1CCB85CC4(char **result, uint64_t a2)
{
  int v2 = *result;
  *__n128 result = 0;
  if (v2)
  {
    if ((*(unsigned int (**)(char *, void *))(*(void *)v2 + 48))(v2, &llvm::ErrorList::ID))
    {
      unsigned int v4 = (uint64_t *)*((void *)v2 + 1);
      uint64_t v5 = (uint64_t *)*((void *)v2 + 2);
      if (v4 == v5)
      {
        uint64_t v6 = 0;
      }
      else
      {
        uint64_t v6 = 0;
        do
        {
          size_t v13 = v6;
          uint64_t v7 = *v4;
          *unsigned int v4 = 0;
          uint64_t v11 = v7;
          sub_1CCB8C244(&v12, &v11, a2);
          sub_1CD451630(&v13, &v12, &v14);
          uint64_t v6 = v14;
          long long v14 = 0;
          if (v12) {
            (*(void (**)(char *))(*(void *)v12 + 8))(v12);
          }
          uint64_t v8 = v11;
          uint64_t v11 = 0;
          if (v8) {
            (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
          }
          if (v13) {
            (*(void (**)(char *))(*(void *)v13 + 8))(v13);
          }
          ++v4;
        }
        while (v4 != v5);
      }
      int v10 = v6;
      return (char **)(*(uint64_t (**)(char *))(*(void *)v2 + 8))(v2);
    }
    else
    {
      long long v14 = v2;
      sub_1CCB8C244(&v10, &v14, a2);
      __n128 result = (char **)v14;
      if (v14)
      {
        uint64_t v9 = *(uint64_t (**)(void))(*(void *)v14 + 8);
        return (char **)v9();
      }
    }
  }
  else
  {
    int v10 = 0;
  }
  return result;
}

uint64_t sub_1CCB85EB8(llvm *a1)
{
  char v15 = 0;
  int v2 = llvm::dbgs(a1);
  uint64_t result = llvm::verifyModule(a1, v2, (llvm::raw_ostream *)&v15, v3);
  if (result)
  {
    uint64_t v8 = "Broken module found, compilation aborted!";
    goto LABEL_9;
  }
  if (v15)
  {
    uint64_t v6 = *(void *)a1;
    uint64_t v9 = "Invalid debug info found, debug info will be stripped";
    __int16 v10 = 259;
    int v12 = 3;
    char v13 = 1;
    uint64_t v11 = &unk_1F262CFC0;
    long long v14 = &v9;
    llvm::LLVMContext::diagnose(v6, (const llvm::DiagnosticInfo *)&v11);
    uint64_t result = llvm::StripDebugInfo(a1, v7);
  }
  if (byte_1EBD09A98)
  {
    uint64_t result = llvm::InlineAsm::containArchDependentInlineAsm(a1, v5);
    if (result)
    {
      uint64_t v8 = "no inline asm is allowed, abort!";
LABEL_9:
      llvm::report_fatal_error((llvm *)v8, (const llvm::Twine *)1);
    }
  }
  return result;
}

uint64_t llvm::ThinLTOCodeGenerator::crossImportIntoModule(uint64_t a1, llvm::Module *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v12 = operator new(0x20uLL);
  *int v12 = &unk_1F262D080;
  v12[1] = a4;
  v12[2] = a1;
  void v12[3] = a2;
  uint64_t v19 = a3;
  int v21 = v12;
  char v22 = a6;
  llvm::FunctionImporter::importFunctions((uint64_t)&v19, a2, a5, &v17);
  if (v18)
  {
    uint64_t v16 = v17;
    __int16 v17 = 0;
    char v15 = a2;
    sub_1CCB8613C(&v16, (uint64_t)&v15);
    sub_1CC950BC0((uint64_t *)&v16);
    llvm::report_fatal_error((llvm *)"importFunctions failed", (const llvm::Twine *)1);
  }
  sub_1CCB85EB8(a2);
  if (v18)
  {
    char v13 = v17;
    __int16 v17 = 0;
    if (v13) {
      (*(void (**)(char *))(*(void *)v13 + 8))(v13);
    }
  }
  uint64_t result = (uint64_t)v21;
  if (v21 == v20) {
    return (*(uint64_t (**)(void *))(v20[0] + 32))(v20);
  }
  if (v21) {
    return (*(uint64_t (**)(void))(*v21 + 40))();
  }
  return result;
}

char **sub_1CCB8613C(char **result, uint64_t a2)
{
  int v2 = *result;
  *uint64_t result = 0;
  if (v2)
  {
    if ((*(unsigned int (**)(char *, void *))(*(void *)v2 + 48))(v2, &llvm::ErrorList::ID))
    {
      unsigned int v4 = (uint64_t *)*((void *)v2 + 1);
      uint64_t v5 = (uint64_t *)*((void *)v2 + 2);
      if (v4 == v5)
      {
        uint64_t v6 = 0;
      }
      else
      {
        uint64_t v6 = 0;
        do
        {
          char v13 = v6;
          uint64_t v7 = *v4;
          *unsigned int v4 = 0;
          uint64_t v11 = v7;
          sub_1CCB8C628(&v12, &v11, a2);
          sub_1CD451630(&v13, &v12, &v14);
          uint64_t v6 = v14;
          long long v14 = 0;
          if (v12) {
            (*(void (**)(char *))(*(void *)v12 + 8))(v12);
          }
          uint64_t v8 = v11;
          uint64_t v11 = 0;
          if (v8) {
            (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
          }
          if (v13) {
            (*(void (**)(char *))(*(void *)v13 + 8))(v13);
          }
          ++v4;
        }
        while (v4 != v5);
      }
      __int16 v10 = v6;
      return (char **)(*(uint64_t (**)(char *))(*(void *)v2 + 8))(v2);
    }
    else
    {
      long long v14 = v2;
      sub_1CCB8C628(&v10, &v14, a2);
      uint64_t result = (char **)v14;
      if (v14)
      {
        uint64_t v9 = *(uint64_t (**)(void))(*(void *)v14 + 8);
        return (char **)v9();
      }
    }
  }
  else
  {
    __int16 v10 = 0;
  }
  return result;
}

void llvm::ThinLTOCodeGenerator::computeThinLTOOutputPath(unsigned int a1@<W1>, const void *a2@<X2>, size_t a3@<X3>, llvm::Triple *a4@<X4>, void *a5@<X8>)
{
  v32[16] = *MEMORY[0x1E4F143B8];
  ArchName = llvm::Triple::getArchName(a4);
  uint64_t v11 = v10;
  uint64_t v30 = v32;
  long long v31 = xmmword_1CFAC3020;
  if (a3 >= 0x81) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  uint64_t v12 = 0;
  if (a3)
  {
    memcpy(v30, a2, a3);
    uint64_t v12 = v31;
  }
  *(void *)&long long v31 = v12 + a3;
  v24[0] = a1;
  void v24[2] = ".";
  __int16 v25 = 776;
  v26[0] = v24;
  v26[2] = ArchName;
  void v26[3] = v11;
  __int16 v27 = 1282;
  v28[0] = (const char *)v26;
  void v28[2] = ".thinlto.o";
  __int16 v29 = 770;
  __int16 v23 = 257;
  __int16 v21 = 257;
  v19[16] = 257;
  llvm::sys::path::append(&v30, 0, v28, &v22, (uint64_t)v20, (uint64_t)v19);
  if ((unint64_t)(v31 + 1) > *((void *)&v31 + 1)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *((unsigned char *)v30 + v31) = 0;
  char v13 = v30;
  size_t v14 = strlen((const char *)v30);
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    char v18 = operator new(v16 + 1);
    a5[1] = v15;
    a5[2] = v17 | 0x8000000000000000;
    *a5 = v18;
    a5 = v18;
    goto LABEL_12;
  }
  *((unsigned char *)a5 + 23) = v14;
  if (v14) {
LABEL_12:
  }
    memmove(a5, v13, v15);
  *((unsigned char *)a5 + v15) = 0;
  if (v30 != v32) {
    free(v30);
  }
}

void llvm::ThinLTOCodeGenerator::computeGUIDPreservedSymbols(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 48);
  for (uint64_t i = *(unsigned __int8 ***)(a2 + 56); v5 != i; v5 += 10)
  {
    uint64_t v30 = *((unsigned int *)a3 + 2);
    if (v30)
    {
      uint64_t v7 = *v5;
      size_t v6 = (size_t)v5[1];
      int v8 = 0;
      if (v6)
      {
        uint64_t v9 = v5[1];
        uint64_t v10 = *v5;
        do
        {
          int v11 = *v10++;
          int v8 = 33 * v8 + v11;
          --v9;
        }
        while (v9);
      }
      uint64_t v12 = *a3;
      uint64_t v13 = *a3 + 8 * v30 + 8;
      uint64_t v14 = *((unsigned int *)a3 + 5);
      int v15 = 1;
      int v16 = v8;
      while (1)
      {
        uint64_t v17 = v16 & (v30 - 1);
        char v18 = *(void **)(v12 + 8 * v17);
        if (v18 != (void *)-8)
        {
          if (!v18) {
            goto LABEL_17;
          }
          if (*(_DWORD *)(v13 + 4 * v17) == v8 && v6 == *v18 && (!v6 || !memcmp(v7, (char *)v18 + v14, v6))) {
            break;
          }
        }
        int v16 = v15 + v17;
        ++v15;
      }
      if (v17 != -1 && (int)v17 != v30)
      {
        uint64_t v19 = v5[3];
        if (v19)
        {
          uint64_t v20 = v5[2];
          int v22 = *v20;
          __int16 v21 = (const std::string::value_type *)(v20 + 1);
          BOOL v23 = v22 == 1;
          if (v22 == 1) {
            uint64_t v24 = v21;
          }
          else {
            uint64_t v24 = (const std::string::value_type *)v5[2];
          }
          std::string::__init(&v31, v24, (std::string::size_type)&v19[-v23]);
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v25 = (int *)&v31;
          }
          else {
            __int16 v25 = (int *)v31.__r_.__value_.__r.__words[0];
          }
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = *((unsigned char *)&v31.__r_.__value_.__s + 23) & 0x7F;
          }
          else {
            size_t size = v31.__r_.__value_.__l.__size_;
          }
          long long v33 = xmmword_1CFAC4320;
          uint64_t v34 = 0;
          llvm::MD5::update((int *)&v33, v25, size);
          llvm::MD5::final((int *)&v33, (int *)v32);
          sub_1CD4ADCD0(a5, v32, (uint64_t)&v33);
          if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v31.__r_.__value_.__l.__data_);
          }
        }
      }
    }
LABEL_17:
    ;
  }
}

void llvm::ThinLTOCodeGenerator::computeGUIDPreservedSymbols(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  size_t v6 = sub_1CC0C3328(a3, *(_DWORD *)(a2 + 12));

  llvm::ThinLTOCodeGenerator::computeGUIDPreservedSymbols((uint64_t)v6, a1, (uint64_t *)a2, v7, (uint64_t)a3);
}

void *llvm::ThinLTOCodeGenerator::addUsedSymbolToPreservedGUID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56) - v3;
  if (v4)
  {
    uint64_t v6 = 80 * (v4 / 80);
    uint64_t v7 = v3 + 24;
    do
    {
      if ((*(unsigned char *)(v7 + 12) & 0x80) != 0)
      {
        int v8 = *(int **)(v7 - 8);
        size_t v9 = *(void *)v7;
        long long v12 = xmmword_1CFAC4320;
        uint64_t v13 = 0;
        llvm::MD5::update((int *)&v12, v8, v9);
        llvm::MD5::final((int *)&v12, (int *)v11);
        uint64_t result = sub_1CD4ADCD0(a3, v11, (uint64_t)&v12);
      }
      v7 += 80;
      v6 -= 80;
    }
    while (v6);
  }
  return result;
}

void llvm::ThinLTOCodeGenerator::ProcessThinLTOModule(uint64_t PIELevel, llvm::Module *this, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, unsigned int a15, unsigned int a16, char a17)
{
  char v21 = 0;
  uint64_t v22 = a9;
  int v23 = *(_DWORD *)(a4 + 12);
  if (*(_DWORD *)(a5 + 492) == 3 && *(_DWORD *)(a5 + 544))
  {
    PIELevel = llvm::Module::getPIELevel(this);
    uint64_t v22 = a9;
    char v21 = PIELevel == 0;
  }
  if (v23 == 1)
  {
    if (*(_DWORD *)(a7 + 8) | *(_DWORD *)(a8 + 8)) {
      PIELevel = llvm::thinLTOInternalizeModule(this, v22);
    }
    llvm::ThinLTOCodeGenerator::saveTempBitcode(PIELevel, (uint64_t)this, a12, a13, a16, (uint64_t)".2.internalized.bc", 18);
    sub_1CCB86D68((uint64_t)this, a5, a15, a14);
  }
  llvm::renameModuleForThinLTO((uint64_t)this, a3, v21, 0);
}

void sub_1CCB86D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v5 = v4;
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  char v37 = 0;
  char v38 = 0;
  long long v31 = 0u;
  long long v33 = 0u;
  int v32 = 0;
  int v34 = 0;
  long long v35 = 0u;
  int v36 = 0;
  long long v25 = 0u;
  long long v27 = 0u;
  int v26 = 0;
  int v28 = 0;
  long long v29 = 0u;
  int v30 = 0;
  long long v19 = 0u;
  long long v21 = 0u;
  int v20 = 0;
  int v22 = 0;
  long long v23 = 0u;
  int v24 = 0;
  long long v13 = 0u;
  long long v15 = 0u;
  int v14 = 0;
  int v16 = 0;
  long long v17 = 0u;
  int v18 = 0;
  v41[0] = v42;
  v41[1] = 0x400000000;
  v42[16] = v43;
  v42[17] = 0x400000000;
  v43[16] = v44;
  v43[17] = 0x400000000;
  v44[16] = v45;
  v44[17] = 0x400000000;
  unsigned char v45[16] = v46;
  v45[17] = 0x400000000;
  v46[16] = v47;
  v46[17] = 0x400000000;
  v47[16] = v48;
  v47[17] = 0x400000000;
  unsigned char v48[16] = v49;
  v48[17] = 0x400000000;
  v49[16] = v50;
  v49[17] = 0x400000000;
  v50[8] = 0u;
  int v51 = 0;
  int v52 = 32;
  llvm::StandardInstrumentations::StandardInstrumentations((uint64_t)v40, v6, 0, 0);
  llvm::StandardInstrumentations::registerCallbacks((uint64_t)v40, (uint64_t)v41, &v25);
  LODWORD(v9) = 16843009;
  BYTE4(v9) = byte_1EBD0B778;
  *((void *)&v9 + 1) = __PAIR64__(dword_1EBD0B6B8, dword_1EBD0B5F8);
  char v10 = 1;
  char v11 = byte_1EBD0A598;
  char v12 = byte_1EBD0A4D8;
  v7[0] = 0;
  char v8 = 0;
  llvm::PassBuilder::PassBuilder((uint64_t)v39, v5, &v9, (uint64_t)v7, (uint64_t)v41);
  if (v8)
  {
    sub_1CD69E9BC((uint64_t)v7);
    char v8 = 0;
  }
  operator new();
}

void sub_1CCB8749C()
{
  v11[16] = *MEMORY[0x1E4F143B8];
  char v8 = &v9;
  long long v9 = v11;
  long long v10 = xmmword_1CFAC3020;
  int v1 = 0;
  char v5 = 0;
  uint64_t v6 = 0;
  int v7 = 0;
  v0[2] = (llvm::legacy::PassManagerImpl *)&unk_1F2646FA8;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  llvm::legacy::PassManager::PassManager((llvm::legacy::PassManager *)v0);
}

uint64_t llvm::ThinLTOCodeGenerator::resolvePrevailingInIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a3;
  uint64_t v9 = a5;
  sub_1CD6A075C((uint64_t)v10);
  llvm::thinLTOResolvePrevailingInIndex((uint64_t)v10, a2, (unsigned int (*)(uint64_t, void))sub_1CCB8C9A4, (uint64_t)&v9, (void (*)(uint64_t, void, void, void))sub_1CCB8CA0C, (uint64_t)&v8, a4);
  return sub_1CD69C048((uint64_t)v10);
}

void llvm::ModuleCacheEntry::computeCacheKey(unsigned __int8 *__s1@<X2>, size_t __n@<X3>, uint64_t a3@<X1>, uint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, int a9, char a10, uint64_t a11)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(unsigned int *)(a3 + 32);
  if (!v11) {
    goto LABEL_30;
  }
  int v14 = 0;
  if (__n)
  {
    size_t v15 = __n;
    int v16 = __s1;
    do
    {
      int v17 = *v16++;
      int v14 = 33 * v14 + v17;
      --v15;
    }
    while (v15);
  }
  unsigned int v18 = v11 - 1;
  uint64_t v19 = *(void *)(a3 + 24);
  uint64_t v20 = v19 + 8 * v11 + 8;
  uint64_t v21 = *(unsigned int *)(a3 + 44);
  int v22 = 1;
  int v23 = v14;
  while (1)
  {
    uint64_t v24 = v23 & v18;
    long long v25 = *(void **)(v19 + 8 * v24);
    if (v25 != (void *)-8)
    {
      if (!v25) {
        goto LABEL_30;
      }
      if (*(_DWORD *)(v20 + 4 * v24) == v14 && __n == *v25) {
        break;
      }
    }
LABEL_12:
    int v23 = v22 + v24;
    ++v22;
  }
  if (!__n)
  {
    if (v24 == -1 || (int)v24 == v11) {
      goto LABEL_30;
    }
    int v26 = 0;
LABEL_17:
    int v30 = 1;
    for (int i = v26; ; int i = v32 + v30++)
    {
      uint64_t v32 = i & v18;
      long long v33 = *(void **)(v19 + 8 * v32);
      if (v33 != (void *)-8)
      {
        if (!v33) {
          goto LABEL_27;
        }
        if (*(_DWORD *)(v20 + 4 * v32) == v26 && __n == *v33 && (!__n || !memcmp(__s1, (char *)v33 + v21, __n))) {
          break;
        }
      }
    }
    if (v32 != -1) {
      uint64_t v11 = (int)v32;
    }
LABEL_27:
    uint64_t v34 = 0;
    while (!*(_DWORD *)(*(void *)(v19 + 8 * v11) + 16 + v34))
    {
      v34 += 4;
      if (v34 == 20) {
        goto LABEL_30;
      }
    }
    sub_1CD6A075C((uint64_t)&v74);
    int v79 = a9;
    sub_1CCB80504((uint64_t)&v75, a11 + 96);
    std::string::operator=(&v74, (const std::string *)(a11 + 48));
    uint64_t v35 = a11;
    int v36 = (_OWORD *)(a11 + 72);
    char v37 = (_OWORD *)*((void *)&v76 + 1);
    if (*((void *)&v76 + 1) >= v77[0])
    {
      unint64_t v38 = v76;
      unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v76 + 1) - v76) >> 3);
      unint64_t v40 = v39 + 1;
      if (v39 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_72;
      }
      if (0x5555555555555556 * ((uint64_t)(v77[0] - v76) >> 3) > v40) {
        unint64_t v40 = 0x5555555555555556 * ((uint64_t)(v77[0] - v76) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77[0] - v76) >> 3) >= 0x555555555555555) {
        unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v41 = v40;
      }
      v73[1] = v77;
      if (v41)
      {
        if (v41 > 0xAAAAAAAAAAAAAAALL) {
          sub_1CB833614();
        }
        uint64_t v42 = (char *)operator new(24 * v41);
        uint64_t v35 = a11;
      }
      else
      {
        uint64_t v42 = 0;
      }
      uint64_t v49 = (uint64_t)&v42[24 * v39];
      if (*(char *)(v35 + 95) < 0)
      {
        sub_1CB8BDF7C(v49, *(const void **)(v35 + 72), *(void *)(v35 + 80));
        char v37 = (_OWORD *)*((void *)&v76 + 1);
        unint64_t v38 = v76;
      }
      else
      {
        *(_OWORD *)uint64_t v49 = *v36;
        *(void *)(v49 + 16) = *(void *)(a11 + 88);
      }
      uint64_t v45 = a5;
      if (v37 == (_OWORD *)v38)
      {
        int64x2_t v50 = vdupq_n_s64(v38);
        uint64_t v51 = v49;
      }
      else
      {
        uint64_t v51 = v49;
        do
        {
          long long v52 = *(_OWORD *)((char *)v37 - 24);
          *(void *)(v51 - 8) = *((void *)v37 - 1);
          *(_OWORD *)(v51 - 24) = v52;
          v51 -= 24;
          *((void *)v37 - 2) = 0;
          *((void *)v37 - 1) = 0;
          *((void *)v37 - 3) = 0;
          char v37 = (_OWORD *)((char *)v37 - 24);
        }
        while (v37 != (_OWORD *)v38);
        int64x2_t v50 = (int64x2_t)v76;
      }
      int v44 = a6;
      unsigned int v48 = (char *)(v49 + 24);
      *(void *)&long long v76 = v51;
      *((void *)&v76 + 1) = v48;
      *(int64x2_t *)__leuint64_t n = v50;
      uint64_t v53 = v77[0];
      v77[0] = &v42[24 * v41];
      v73[0] = v53;
      __src = (void *)v50.i64[0];
      sub_1CBF4EE0C((uint64_t)&__src);
      uint64_t v46 = a7;
      char v47 = a10;
    }
    else
    {
      if (*(char *)(a11 + 95) < 0)
      {
        sub_1CB8BDF7C(*((uint64_t *)&v76 + 1), *(const void **)(a11 + 72), *(void *)(a11 + 80));
      }
      else
      {
        long long v43 = *v36;
        *(void *)(*((void *)&v76 + 1) + 16) = *(void *)(a11 + 88);
        *char v37 = v43;
      }
      uint64_t v45 = a5;
      int v44 = a6;
      uint64_t v46 = a7;
      char v47 = a10;
      unsigned int v48 = (char *)v37 + 24;
    }
    uint64_t v54 = *(void *)(a11 + 400);
    *((void *)&v76 + 1) = v48;
    v77[8] = v54;
    int v78 = *(_DWORD *)(a11 + 408);
    char v80 = v47;
    unint64_t v70 = 0;
    __src = v73;
    *(_OWORD *)__leuint64_t n = xmmword_1CDB15B30;
    *(void *)&long long __dst = (char *)&__dst + 8;
    *((void *)&__dst + 1) = 0;
    v68[0] = 0;
    v68[1] = 0;
    size_t v67 = v68;
    llvm::computeLTOCacheKey((uint64_t)&__src, (uint64_t)&v74, a3, __s1, __n, a4, v45, v44, v46, (size_t)&__dst, (uint64_t)&v67);
    sub_1CB833A08((uint64_t)&v67, v68[0]);
    sub_1CB833A08((uint64_t)&__dst, *((void **)&__dst + 1));
    long long v55 = __src;
    if (!__src)
    {
      long long __dst = 0uLL;
      unint64_t v70 = 0;
LABEL_66:
      *(_OWORD *)a8 = __dst;
      uint64_t v60 = __src;
      *(void *)(a8 + 16) = v70;
      *(unsigned char *)(a8 + 24) = 1;
      if (v60 != v73) {
        free(v60);
      }
      sub_1CD69C048((uint64_t)&v74);
      return;
    }
    size_t v56 = __len[0];
    if (__len[0] < 0x7FFFFFFFFFFFFFF8)
    {
      if (__len[0] >= 0x17)
      {
        size_t v58 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((__len[0] | 7) != 0x17) {
          size_t v58 = __len[0] | 7;
        }
        size_t v59 = v58 + 1;
        p_dst = (long long *)operator new(v58 + 1);
        *((void *)&__dst + 1) = v56;
        unint64_t v70 = v59 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v70) = __len[0];
        p_dst = &__dst;
        if (!__len[0]) {
          goto LABEL_65;
        }
      }
      memmove(p_dst, v55, v56);
LABEL_65:
      *((unsigned char *)p_dst + v56) = 0;
      goto LABEL_66;
    }
LABEL_72:
    abort();
  }
  if (memcmp(__s1, (char *)v25 + v21, __n)) {
    goto LABEL_12;
  }
  if (v24 != -1 && (int)v24 != v11)
  {
    int v26 = 0;
    size_t v27 = __n;
    int v28 = __s1;
    do
    {
      int v29 = *v28++;
      int v26 = 33 * v26 + v29;
      --v27;
    }
    while (v27);
    goto LABEL_17;
  }
LABEL_30:
  *(unsigned char *)a8 = 0;
  *(unsigned char *)(a8 + 24) = 0;
}

void llvm::ModuleCacheEntry::write(void (***a1)(void **__return_ptr), void *a2, uint64_t a3)
{
  (**a1)(&__p);
  if ((v14 & 0x80u) == 0) {
    uint64_t v6 = v14;
  }
  else {
    uint64_t v6 = v13;
  }
  if ((char)v14 < 0)
  {
    operator delete(__p);
    if (!v6) {
      return;
    }
  }
  else if (!v6)
  {
    return;
  }
  __int16 v15 = 261;
  std::string __p = a2;
  uint64_t v13 = a3;
  ((void (*)(void **__return_ptr, void (***)(void **__return_ptr)))**a1)(v8, a1);
  __int16 v11 = 260;
  long long v10 = v8;
  llvm::sys::fs::create_hard_link((llvm::sys::fs *)&__p, (const llvm::Twine *)&v10, v7);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void llvm::ModuleCacheEntry::writeObject(uint64_t a1@<X1>, unsigned char *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  LODWORD(v17) = 0;
  unsigned int v18 = std::system_category();
  int v8 = sub_1CD0D9358(a2, a3, (uint64_t)&v17, 0, 2, 0);
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v14, v8, 1, 0, 0);
  if (v17)
  {
    v12[0] = "Can't open output '";
    v12[2] = a2;
    void v12[3] = a3;
    __int16 v13 = 1283;
    sub_1CD4FF4BC(v17, (uint64_t)v18, (llvm::Twine *)v12);
  }
  char v9 = *(unsigned char **)(a1 + 8);
  long long v10 = *(unsigned char **)(a1 + 16);
  int64_t v11 = v10 - v9;
  if (v10 - v9 <= (unint64_t)(v15 - (void)v16))
  {
    if (v10 != v9)
    {
      memcpy(v16, v9, v10 - v9);
      v16 += v11;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v14, v9, v10 - v9);
  }
  *a4 = 0;
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v14);
}

void llvm::ThinLTOCodeGenerator::createModuleCacheEntry(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 632);
  if (v1 != 2)
  {
    if (v1 == 1) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void llvm::ThinLTOCodeGenerator::addModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a4;
  uint64_t v6 = a5;
  uint64_t v7 = a2;
  uint64_t v8 = a3;
  llvm::lto::InputFile::create();
}

void llvm::ThinLTOCodeGenerator::computePrevailingCopies(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2 + 1;
  uint64_t v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v7 = (uint64_t *)v4[7];
      uint64_t v6 = (uint64_t *)v4[8];
      if ((unint64_t)((char *)v6 - (char *)v7) >= 9)
      {
        if (v7 == v6)
        {
LABEL_10:
          uint64_t v9 = 0;
        }
        else
        {
          uint64_t v8 = (uint64_t *)v4[7];
          while (1)
          {
            uint64_t v9 = *v8;
            int v10 = *(_WORD *)(*v8 + 12) & 0xF;
            if ((v10 - 1) >= 5 && (v10 - 9) > 1) {
              break;
            }
            if (++v8 == v6)
            {
              while (1)
              {
                uint64_t v9 = *v7;
                if ((*(_WORD *)(*v7 + 12) & 0xF) != 1) {
                  goto LABEL_11;
                }
                if (++v7 == v6) {
                  goto LABEL_10;
                }
              }
            }
          }
        }
LABEL_11:
        sub_1CCB8EC74(a3, v4 + 4)[1] = v9;
      }
      int64_t v11 = (void *)v4[1];
      if (v11)
      {
        do
        {
          char v12 = v11;
          int64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          char v12 = (void *)v4[2];
          BOOL v13 = *v12 == (void)v4;
          uint64_t v4 = v12;
        }
        while (!v13);
      }
      uint64_t v4 = v12;
    }
    while (v12 != v3);
  }
}

void *llvm::ThinLTOCodeGenerator::preserveSymbol(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  return sub_1CC0D7F54((llvm::StringMapImpl *)(a1 + 496), a2, a3);
}

void *llvm::ThinLTOCodeGenerator::crossReferenceSymbol(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  return sub_1CC0D7F54((llvm::StringMapImpl *)(a1 + 496), a2, a3);
}

void llvm::TargetMachineBuilder::create(llvm::TargetMachineBuilder *this@<X0>, uint64_t *a2@<X8>)
{
  v29[0] = 0;
  v29[1] = 0;
  uint64_t v30 = 0;
  uint64_t v4 = llvm::TargetRegistry::lookupTarget((std::string::size_type)this, (uint64_t)v29);
  if (!v4)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Can't load target for this Triple: ";
    __int16 v26 = 259;
    __int16 v24 = 260;
    int v23 = v29;
    sub_1CD3E3950((uint64_t *)&__p, (uint64_t *)&v23, (uint64_t)&v27);
    llvm::report_fatal_error((llvm *)&v27, (const llvm::Twine *)1);
  }
  uint64_t v5 = (uint64_t)v4;
  char v6 = *((unsigned char *)this + 95);
  int v7 = v6;
  if (v6 >= 0) {
    uint64_t v8 = (char *)this + 72;
  }
  else {
    uint64_t v8 = (char *)*((void *)this + 9);
  }
  uint64_t v9 = v6 & 0x7F;
  if (v7 >= 0) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = *((void *)this + 10);
  }
  uint64_t v28 = 0;
  int64x2_t v27 = 0uLL;
  llvm::SubtargetFeatures::Split(&v27, (uint64_t)v8, v10);
  llvm::SubtargetFeatures::getDefaultSubtargetFeatures(&v27, this);
  sub_1CD4FB688((std::string *)v27.i64[0], (std::string *)v27.i64[1], ",", 1uLL, &__p);
  char v11 = *((unsigned char *)this + 23);
  BOOL v12 = v11 < 0;
  if (v11 >= 0) {
    BOOL v13 = this;
  }
  else {
    BOOL v13 = *(llvm::TargetMachineBuilder **)this;
  }
  uint64_t v14 = v11 & 0x7F;
  if (v12) {
    uint64_t v15 = *((void *)this + 1);
  }
  else {
    uint64_t v15 = v14;
  }
  char v16 = *((unsigned char *)this + 71);
  int v17 = v16;
  if (v16 >= 0) {
    unsigned int v18 = (char *)this + 48;
  }
  else {
    unsigned int v18 = (char *)*((void *)this + 6);
  }
  uint64_t v19 = v16 & 0x7F;
  if (v17 >= 0) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = *((void *)this + 7);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  *a2 = sub_1CD454388(v5, (uint64_t)v13, v15, (uint64_t)v18, v20, (uint64_t)p_p, size, (uint64_t)this + 96, *((void *)this + 50), 0, *((_DWORD *)this + 102), 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  sub_1CB8338B8((void ***)&__p);
  if (SHIBYTE(v30) < 0) {
    operator delete(v29[0]);
  }
}

void llvm::ThinLTOCodeGenerator::linkCombinedIndex(llvm::ThinLTOCodeGenerator *this)
{
}

void *llvm::ThinLTOCodeGenerator::computeDeadSymbolsInIndex(int a1, llvm **this, llvm::ModuleSummaryIndex *a3)
{
  llvm::computeDeadSymbolsAndUpdateIndirectCalls(this, a3, (void (*)(uint64_t, void))sub_1CCB8ED30, (uint64_t)&v6);
  return llvm::ModuleSummaryIndex::propagateAttributes(this, (uint64_t)a3);
}

void llvm::ThinLTOCodeGenerator::promote(llvm::ThinLTOCodeGenerator *this, llvm::Module *a2, llvm::ModuleSummaryIndex *a3, const llvm::lto::InputFile *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int v8 = *((_DWORD *)a3 + 9);
  if (*((char *)a2 + 191) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v35, *((const void **)a2 + 21), *((void *)a2 + 22));
  }
  else
  {
    *(_OWORD *)uint64_t v35 = *(_OWORD *)((char *)a2 + 168);
    uint64_t v36 = *((void *)a2 + 23);
  }
  v34[0] = 0;
  v34[1] = 0;
  v34[2] = 0x2000000000;
  sub_1CD69BE88(a3, (uint64_t)v34);
  __int16 v32 = 260;
  int v29 = (char *)a2 + 216;
  llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)&v29);
  uint64_t v9 = sub_1CC0C3328(v33, *((_DWORD *)this + 127));
  llvm::ThinLTOCodeGenerator::computeGUIDPreservedSymbols((uint64_t)v9, (uint64_t)a4, (uint64_t *)this + 62, v10, (uint64_t)v33);
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  llvm::ThinLTOCodeGenerator::addUsedSymbolToPreservedGUID(v11, (uint64_t)a4, (uint64_t)v33);
  llvm::computeDeadSymbolsAndUpdateIndirectCalls((llvm **)a3, (llvm::ModuleSummaryIndex *)v33, (void (*)(uint64_t, void))sub_1CCB8ED30, (uint64_t)__p);
  llvm::ModuleSummaryIndex::propagateAttributes(a3, (uint64_t)v33);
  int v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0x2800000000;
  if (v8)
  {
    unint64_t v18 = (4 * v8 / 3u + 1) | ((unint64_t)(4 * v8 / 3u + 1) >> 1);
    unint64_t v19 = v18 | (v18 >> 2) | ((v18 | (v18 >> 2)) >> 4);
    unint64_t v20 = v19 | (v19 >> 8) | ((v19 | (v19 >> 8)) >> 16);
    int v13 = v20 + 1;
    size_t v21 = v20 + 2;
    int v22 = (char *)sub_1CC248524(v20 + 2, 0xCuLL);
    *(void *)&v22[8 * v13] = 2;
    int v29 = v22;
    LODWORD(v30) = v13;
    uint64_t v27 = 0;
    uint64_t v28 = 0x2000000000;
    BOOL v12 = sub_1CC248524(v21, 0xCuLL);
    v12[v13] = 2;
  }
  else
  {
    BOOL v12 = 0;
    int v13 = 0;
    LODWORD(v30) = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0x2000000000;
  }
  __int16 v26 = v12;
  LODWORD(v27) = v13;
  llvm::ComputeCrossModuleImport((uint64_t)a3, (uint64_t)v34, (llvm::StringMapImpl *)&v29, (uint64_t)&v26);
  v24[0] = 0;
  v24[1] = 0;
  int v25 = 0;
  llvm::ThinLTOCodeGenerator::computePrevailingCopies(v14, a3, (uint64_t)v24);
  v23[0] = 0;
  v23[1] = 0;
  v23[2] = 0x2000000000;
  char v37 = v23;
  unint64_t v38 = v24;
  sub_1CD6A075C((uint64_t)__p);
  llvm::thinLTOResolvePrevailingInIndex((uint64_t)__p, (uint64_t)a3, (unsigned int (*)(uint64_t, void))sub_1CCB8C9A4, (uint64_t)&v38, (void (*)(uint64_t, void, void, void))sub_1CCB8CA0C, (uint64_t)&v37, (uint64_t)v33);
  sub_1CD69C048((uint64_t)__p);
  if (v36 >= 0) {
    uint64_t v15 = (unsigned __int8 *)v35;
  }
  else {
    uint64_t v15 = (unsigned __int8 *)v35[0];
  }
  if (v36 >= 0) {
    size_t v16 = HIBYTE(v36) & 0x7F;
  }
  else {
    size_t v16 = (size_t)v35[1];
  }
  int v17 = sub_1CD69BF44((uint64_t)v34, v15, v16);
  llvm::thinLTOFinalizeInModule((uint64_t)a2, *v17 + 8, 0);
  __p[0] = &v26;
  __p[1] = v33;
  unint64_t v38 = v24;
  llvm::thinLTOInternalizeAndPromoteInIndex((uint64_t)a3, (uint64_t (*)(uint64_t, void, void, unint64_t))sub_1CCB8ED38, (uint64_t)__p, (uint64_t (*)(uint64_t, void))sub_1CCB8EED8, (uint64_t)&v38);
  llvm::renameModuleForThinLTO((uint64_t)a2, (uint64_t)a3, 0, 0);
}

uint64_t llvm::ThinLTOCodeGenerator::crossModuleImport(llvm::ThinLTOCodeGenerator *this, llvm::Module *a2, llvm::ModuleSummaryIndex *a3, const llvm::lto::InputFile *a4)
{
  llvm::ThinLTOCodeGenerator::generateModuleMap((uint64_t **)this + 59, (llvm::StringMapImpl *)v42);
  int v8 = *((_DWORD *)a3 + 9);
  uint64_t v40 = 0;
  uint64_t v41 = 0x2000000000;
  if (v8)
  {
    unint64_t v23 = (4 * v8 / 3u + 1) | ((unint64_t)(4 * v8 / 3u + 1) >> 1);
    unint64_t v24 = v23 | (v23 >> 2) | ((v23 | (v23 >> 2)) >> 4);
    unint64_t v25 = v24 | (v24 >> 8) | ((v24 | (v24 >> 8)) >> 16);
    int v10 = v25 + 1;
    uint64_t v9 = sub_1CC248524(v25 + 2, 0xCuLL);
    v9[v10] = 2;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 0;
  }
  unint64_t v39 = v9;
  LODWORD(v40) = v10;
  sub_1CD69BE88(a3, (uint64_t)&v39);
  __int16 v34 = 260;
  uint64_t v31 = (char *)a2 + 216;
  llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)&v31);
  uint64_t v11 = sub_1CC0C3328(v38, *((_DWORD *)this + 127));
  llvm::ThinLTOCodeGenerator::computeGUIDPreservedSymbols((uint64_t)v11, (uint64_t)a4, (uint64_t *)this + 62, v12, (uint64_t)v38);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  llvm::ThinLTOCodeGenerator::addUsedSymbolToPreservedGUID(v13, (uint64_t)a4, (uint64_t)v38);
  llvm::computeDeadSymbolsAndUpdateIndirectCalls((llvm **)a3, (llvm::ModuleSummaryIndex *)v38, (void (*)(uint64_t, void))sub_1CCB8ED30, (uint64_t)&__p);
  llvm::ModuleSummaryIndex::propagateAttributes(a3, (uint64_t)v38);
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0x2800000000;
  if (v8)
  {
    unint64_t v26 = (4 * v8 / 3u + 1) | ((unint64_t)(4 * v8 / 3u + 1) >> 1);
    unint64_t v27 = v26 | (v26 >> 2) | ((v26 | (v26 >> 2)) >> 4);
    unint64_t v28 = v27 | (v27 >> 8) | ((v27 | (v27 >> 8)) >> 16);
    int v15 = v28 + 1;
    size_t v29 = v28 + 2;
    uint64_t v30 = sub_1CC248524(v28 + 2, 0xCuLL);
    v30[v15] = 2;
    std::string __p = v30;
    LODWORD(v36) = v15;
    uint64_t v32 = 0;
    uint64_t v33 = 0x2000000000;
    uint64_t v14 = (char *)sub_1CC248524(v29, 0xCuLL);
    *(void *)&v14[8 * v15] = 2;
  }
  else
  {
    uint64_t v14 = 0;
    int v15 = 0;
    LODWORD(v36) = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0x2000000000;
  }
  uint64_t v31 = v14;
  LODWORD(v32) = v15;
  llvm::ComputeCrossModuleImport((uint64_t)a3, (uint64_t)&v39, (llvm::StringMapImpl *)&__p, (uint64_t)&v31);
  char v16 = *((unsigned char *)a2 + 191);
  int v17 = v16;
  if (v16 >= 0) {
    unint64_t v18 = (unsigned __int8 *)a2 + 168;
  }
  else {
    unint64_t v18 = (unsigned __int8 *)*((void *)a2 + 21);
  }
  size_t v19 = v16 & 0x7F;
  if (v17 >= 0) {
    size_t v20 = v19;
  }
  else {
    size_t v20 = *((void *)a2 + 22);
  }
  size_t v21 = sub_1CC915D88((llvm::StringMapImpl *)&__p, v18, v20);
  llvm::ThinLTOCodeGenerator::crossImportIntoModule((uint64_t)this, a2, (uint64_t)a3, (uint64_t)v42, *v21 + 8, 0);
  sub_1CCB76CFC((uint64_t)&v31);
  sub_1CCB76C74((uint64_t)&__p);
  MEMORY[0x1D25D9CD0](v38[0], 8);
  sub_1CD69CBE0((uint64_t)&v39);
  return sub_1CD4AFD10((uint64_t)v42);
}

void llvm::ThinLTOCodeGenerator::gatherImportedSummariesForModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t a5)
{
  int v10 = *(_DWORD *)(a3 + 36);
  if (*(char *)(a2 + 191) < 0)
  {
    sub_1CB8BDF7C((uint64_t)&v40, *(const void **)(a2 + 168), *(void *)(a2 + 176));
  }
  else
  {
    long long v40 = *(_OWORD *)(a2 + 168);
    uint64_t v41 = *(void *)(a2 + 184);
  }
  uint64_t v38 = 0;
  uint64_t v39 = 0x2000000000;
  if (v10)
  {
    unint64_t v21 = (4 * v10 / 3u + 1) | ((unint64_t)(4 * v10 / 3u + 1) >> 1);
    unint64_t v22 = v21 | (v21 >> 2) | ((v21 | (v21 >> 2)) >> 4);
    unint64_t v23 = v22 | (v22 >> 8) | ((v22 | (v22 >> 8)) >> 16);
    int v12 = v23 + 1;
    uint64_t v11 = sub_1CC248524(v23 + 2, 0xCuLL);
    v11[v12] = 2;
  }
  else
  {
    uint64_t v11 = 0;
    int v12 = 0;
  }
  uint64_t v37 = v11;
  LODWORD(v38) = v12;
  sub_1CD69BE88((void *)a3, (uint64_t)&v37);
  __int16 v32 = 260;
  size_t v29 = (void *)(a2 + 216);
  llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)&v29);
  uint64_t v13 = sub_1CC0C3328(v36, *(_DWORD *)(a1 + 508));
  llvm::ThinLTOCodeGenerator::computeGUIDPreservedSymbols((uint64_t)v13, a5, (uint64_t *)(a1 + 496), v14, (uint64_t)v36);
  if (SHIBYTE(v35) < 0) {
    operator delete(__p);
  }
  llvm::ThinLTOCodeGenerator::addUsedSymbolToPreservedGUID(v15, a5, (uint64_t)v36);
  llvm::computeDeadSymbolsAndUpdateIndirectCalls((llvm **)a3, (llvm::ModuleSummaryIndex *)v36, (void (*)(uint64_t, void))sub_1CCB8ED30, (uint64_t)&__p);
  llvm::ModuleSummaryIndex::propagateAttributes((void *)a3, (uint64_t)v36);
  std::string __p = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0x2800000000;
  if (v10)
  {
    unint64_t v24 = (4 * v10 / 3u + 1) | ((unint64_t)(4 * v10 / 3u + 1) >> 1);
    unint64_t v25 = v24 | (v24 >> 2) | ((v24 | (v24 >> 2)) >> 4);
    unint64_t v26 = v25 | (v25 >> 8) | ((v25 | (v25 >> 8)) >> 16);
    int v17 = v26 + 1;
    size_t v27 = v26 + 2;
    unint64_t v28 = sub_1CC248524(v26 + 2, 0xCuLL);
    v28[v17] = 2;
    std::string __p = v28;
    LODWORD(v34) = v17;
    uint64_t v30 = 0;
    uint64_t v31 = 0x2000000000;
    char v16 = sub_1CC248524(v27, 0xCuLL);
    v16[v17] = 2;
  }
  else
  {
    char v16 = 0;
    int v17 = 0;
    LODWORD(v34) = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0x2000000000;
  }
  size_t v29 = v16;
  LODWORD(v30) = v17;
  llvm::ComputeCrossModuleImport(a3, (uint64_t)&v37, (llvm::StringMapImpl *)&__p, (uint64_t)&v29);
  if (v41 >= 0) {
    unint64_t v18 = (unsigned __int8 *)&v40;
  }
  else {
    unint64_t v18 = (unsigned __int8 *)v40;
  }
  if (v41 >= 0) {
    size_t v19 = HIBYTE(v41) & 0x7F;
  }
  else {
    size_t v19 = *((void *)&v40 + 1);
  }
  size_t v20 = sub_1CC915D88((llvm::StringMapImpl *)&__p, v18, v19);
  llvm::gatherImportedSummariesForModule(v18, v19, (uint64_t *)&v37, *v20 + 8, a4);
  sub_1CCB76CFC((uint64_t)&v29);
  sub_1CCB76C74((uint64_t)&__p);
  MEMORY[0x1D25D9CD0](v36[0], 8);
  sub_1CD69CBE0((uint64_t)&v37);
  if (SHIBYTE(v41) < 0) {
    operator delete((void *)v40);
  }
}

void llvm::ThinLTOCodeGenerator::emitImports(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12 = *(_DWORD *)(a5 + 36);
  if (*(char *)(a2 + 191) < 0)
  {
    sub_1CB8BDF7C((uint64_t)&v55, *(const void **)(a2 + 168), *(void *)(a2 + 176));
  }
  else
  {
    long long v55 = *(_OWORD *)(a2 + 168);
    uint64_t v56 = *(void *)(a2 + 184);
  }
  uint64_t v53 = 0;
  uint64_t v54 = 0x2000000000;
  if (v12)
  {
    unint64_t v25 = (4 * v12 / 3u + 1) | ((unint64_t)(4 * v12 / 3u + 1) >> 1);
    unint64_t v26 = v25 | (v25 >> 2) | ((v25 | (v25 >> 2)) >> 4);
    unint64_t v27 = v26 | (v26 >> 8) | ((v26 | (v26 >> 8)) >> 16);
    int v14 = v27 + 1;
    uint64_t v13 = sub_1CC248524(v27 + 2, 0xCuLL);
    v13[v14] = 2;
  }
  else
  {
    uint64_t v13 = 0;
    int v14 = 0;
  }
  long long v52 = v13;
  LODWORD(v53) = v14;
  sub_1CD69BE88((void *)a5, (uint64_t)&v52);
  __int16 v48 = 260;
  v47[0] = a2 + 216;
  llvm::Triple::Triple((llvm::Triple *)v49, (const llvm::Twine *)v47);
  uint64_t v15 = sub_1CC0C3328(v51, *(_DWORD *)(a1 + 508));
  llvm::ThinLTOCodeGenerator::computeGUIDPreservedSymbols((uint64_t)v15, a6, (uint64_t *)(a1 + 496), v16, (uint64_t)v51);
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  llvm::ThinLTOCodeGenerator::addUsedSymbolToPreservedGUID(v17, a6, (uint64_t)v51);
  llvm::computeDeadSymbolsAndUpdateIndirectCalls((llvm **)a5, (llvm::ModuleSummaryIndex *)v51, (void (*)(uint64_t, void))sub_1CCB8ED30, (uint64_t)v49);
  llvm::ModuleSummaryIndex::propagateAttributes((void *)a5, (uint64_t)v51);
  int v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0x2800000000;
  if (v12)
  {
    unint64_t v28 = (4 * v12 / 3u + 1) | ((unint64_t)(4 * v12 / 3u + 1) >> 1);
    unint64_t v29 = v28 | (v28 >> 2) | ((v28 | (v28 >> 2)) >> 4);
    unint64_t v30 = v29 | (v29 >> 8) | ((v29 | (v29 >> 8)) >> 16);
    int v19 = v30 + 1;
    size_t v31 = v30 + 2;
    __int16 v32 = sub_1CC248524(v30 + 2, 0xCuLL);
    v32[v19] = 2;
    int v44 = v32;
    LODWORD(v45) = v19;
    uint64_t v42 = 0;
    uint64_t v43 = 0x2000000000;
    unint64_t v18 = sub_1CC248524(v31, 0xCuLL);
    v18[v19] = 2;
  }
  else
  {
    unint64_t v18 = 0;
    int v19 = 0;
    LODWORD(v45) = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0x2000000000;
  }
  uint64_t v41 = v18;
  LODWORD(v42) = v19;
  llvm::ComputeCrossModuleImport(a5, (uint64_t)&v52, (llvm::StringMapImpl *)&v44, (uint64_t)&v41);
  v40[0] = 0;
  v40[1] = 0;
  uint64_t v39 = v40;
  if (v56 >= 0) {
    size_t v20 = (unsigned __int8 *)&v55;
  }
  else {
    size_t v20 = (unsigned __int8 *)v55;
  }
  if (v56 >= 0) {
    size_t v21 = HIBYTE(v56) & 0x7F;
  }
  else {
    size_t v21 = *((void *)&v55 + 1);
  }
  unint64_t v22 = sub_1CC915D88((llvm::StringMapImpl *)&v44, v20, v21);
  llvm::gatherImportedSummariesForModule(v20, v21, (uint64_t *)&v52, *v22 + 8, (uint64_t **)&v39);
  std::system_category();
  if (v56 >= 0) {
    unint64_t v23 = &v55;
  }
  else {
    unint64_t v23 = (long long *)v55;
  }
  if (v56 >= 0) {
    size_t v24 = HIBYTE(v56) & 0x7F;
  }
  else {
    size_t v24 = *((void *)&v55 + 1);
  }
  if (llvm::EmitImportsFiles(v23, v24, a3, a4, &v39))
  {
    uint64_t v37 = "Failed to open ";
    __int16 v38 = 259;
    __int16 v36 = 261;
    v35[0] = (uint64_t)a3;
    v35[1] = a4;
    sub_1CD3E3950((uint64_t *)&v37, v35, (uint64_t)v47);
    uint64_t v33 = " to save imports lists\n";
    __int16 v34 = 259;
    sub_1CD3E3950(v47, (uint64_t *)&v33, (uint64_t)v49);
    llvm::report_fatal_error((llvm *)v49, (const llvm::Twine *)1);
  }
  sub_1CCB76C04((uint64_t)&v39, v40[0]);
  sub_1CCB76CFC((uint64_t)&v41);
  sub_1CCB76C74((uint64_t)&v44);
  MEMORY[0x1D25D9CD0](v51[0], 8);
  sub_1CD69CBE0((uint64_t)&v52);
  if (SHIBYTE(v56) < 0) {
    operator delete((void *)v55);
  }
}

void llvm::ThinLTOCodeGenerator::internalize(llvm::ThinLTOCodeGenerator *this, llvm::Module *a2, llvm::ModuleSummaryIndex *a3, const llvm::lto::InputFile *a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  int v8 = (std::string *)((char *)this + 8);
  __int16 v44 = 260;
  uint64_t v41 = (char *)a2 + 216;
  llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)&v41);
  llvm::TargetMachineBuilder::init(v8, (const llvm::Triple *)__p);
  if (v48 < 0) {
    operator delete(__p[0]);
  }
  int v9 = *((_DWORD *)a3 + 9);
  if (*((char *)a2 + 191) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v39, *((const void **)a2 + 21), *((void *)a2 + 22));
  }
  else
  {
    *(_OWORD *)uint64_t v39 = *(_OWORD *)((char *)a2 + 168);
    uint64_t v40 = *((void *)a2 + 23);
  }
  int v10 = sub_1CC0C3328(&v37, *((_DWORD *)this + 127));
  llvm::ThinLTOCodeGenerator::computeGUIDPreservedSymbols((uint64_t)v10, (uint64_t)a4, (uint64_t *)this + 62, v11, (uint64_t)&v37);
  llvm::ThinLTOCodeGenerator::addUsedSymbolToPreservedGUID(v12, (uint64_t)a4, (uint64_t)&v37);
  uint64_t v42 = 0;
  uint64_t v43 = 0x2000000000;
  if (v9)
  {
    unint64_t v20 = (4 * v9 / 3u + 1) | ((unint64_t)(4 * v9 / 3u + 1) >> 1);
    unint64_t v21 = v20 | (v20 >> 2) | ((v20 | (v20 >> 2)) >> 4);
    unint64_t v22 = v21 | (v21 >> 8) | ((v21 | (v21 >> 8)) >> 16);
    int v14 = v22 + 1;
    uint64_t v13 = (char *)sub_1CC248524(v22 + 2, 0xCuLL);
    *(void *)&v13[8 * v14] = 2;
  }
  else
  {
    uint64_t v13 = 0;
    int v14 = 0;
  }
  uint64_t v41 = v13;
  LODWORD(v42) = v14;
  sub_1CD69BE88(a3, (uint64_t)&v41);
  llvm::computeDeadSymbolsAndUpdateIndirectCalls((llvm **)a3, (llvm::ModuleSummaryIndex *)&v37, (void (*)(uint64_t, void))sub_1CCB8ED30, (uint64_t)__p);
  llvm::ModuleSummaryIndex::propagateAttributes(a3, (uint64_t)&v37);
  __int16 v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0x2800000000;
  if (v9)
  {
    unint64_t v23 = (4 * v9 / 3u + 1) | ((unint64_t)(4 * v9 / 3u + 1) >> 1);
    unint64_t v24 = v23 | (v23 >> 2) | ((v23 | (v23 >> 2)) >> 4);
    unint64_t v25 = v24 | (v24 >> 8) | ((v24 | (v24 >> 8)) >> 16);
    int v16 = v25 + 1;
    size_t v26 = v25 + 2;
    unint64_t v27 = sub_1CC248524(v25 + 2, 0xCuLL);
    v27[v16] = 2;
    __int16 v34 = v27;
    LODWORD(v35) = v16;
    uint64_t v32 = 0;
    uint64_t v33 = 0x2000000000;
    uint64_t v15 = sub_1CC248524(v26, 0xCuLL);
    v15[v16] = 2;
  }
  else
  {
    uint64_t v15 = 0;
    int v16 = 0;
    LODWORD(v35) = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0x2000000000;
  }
  size_t v31 = v15;
  LODWORD(v32) = v16;
  llvm::ComputeCrossModuleImport((uint64_t)a3, (uint64_t)&v41, (llvm::StringMapImpl *)&v34, (uint64_t)&v31);
  if (v40 >= 0) {
    uint64_t v17 = (unsigned __int8 *)v39;
  }
  else {
    uint64_t v17 = (unsigned __int8 *)v39[0];
  }
  if (v40 >= 0) {
    size_t v18 = HIBYTE(v40) & 0x7F;
  }
  else {
    size_t v18 = (size_t)v39[1];
  }
  int v19 = sub_1CD663184((uint64_t)&v31, v17, v18);
  if (*((_DWORD *)*v19 + 4) | v38)
  {
    v29[0] = 0;
    v29[1] = 0;
    int v30 = 0;
    llvm::ThinLTOCodeGenerator::computePrevailingCopies((uint64_t)v19, a3, (uint64_t)v29);
    v28[0] = 0;
    v28[1] = 0;
    void v28[2] = 0x2000000000;
    uint64_t v45 = v28;
    uint64_t v46 = v29;
    sub_1CD6A075C((uint64_t)__p);
    llvm::thinLTOResolvePrevailingInIndex((uint64_t)__p, (uint64_t)a3, (unsigned int (*)(uint64_t, void))sub_1CCB8C9A4, (uint64_t)&v46, (void (*)(uint64_t, void, void, void))sub_1CCB8CA0C, (uint64_t)&v45, (uint64_t)&v37);
    sub_1CD69C048((uint64_t)__p);
    __p[0] = &v31;
    __p[1] = &v37;
    uint64_t v46 = v29;
    llvm::thinLTOInternalizeAndPromoteInIndex((uint64_t)a3, (uint64_t (*)(uint64_t, void, void, unint64_t))sub_1CCB8ED38, (uint64_t)__p, (uint64_t (*)(uint64_t, void))sub_1CCB8EED8, (uint64_t)&v46);
    llvm::renameModuleForThinLTO((uint64_t)a2, (uint64_t)a3, 0, 0);
  }
  sub_1CCB76CFC((uint64_t)&v31);
  sub_1CCB76C74((uint64_t)&v34);
  sub_1CD69CBE0((uint64_t)&v41);
  MEMORY[0x1D25D9CD0](v37, 8);
  if (SHIBYTE(v40) < 0) {
    operator delete(v39[0]);
  }
}

void llvm::ThinLTOCodeGenerator::optimize(llvm::ThinLTOCodeGenerator *this, llvm::Module *a2)
{
  uint64_t v4 = (std::string *)((char *)this + 8);
  __int16 v6 = 260;
  uint64_t v5 = (char *)a2 + 216;
  llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)&v5);
  llvm::TargetMachineBuilder::init(v4, (const llvm::Triple *)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  llvm::TargetMachineBuilder::create((llvm::TargetMachineBuilder *)v4, (uint64_t *)__p);
  sub_1CCB86D68((uint64_t)a2, (uint64_t)__p[0], *((unsigned int *)this + 183), *((unsigned __int8 *)this + 730));
}

void llvm::ThinLTOCodeGenerator::codegen(llvm::ThinLTOCodeGenerator *this, llvm::Module *a2)
{
  uint64_t v2 = (std::string *)((char *)this + 8);
  __int16 v4 = 260;
  uint64_t v3 = (char *)a2 + 216;
  llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)&v3);
  llvm::TargetMachineBuilder::init(v2, (const llvm::Triple *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  llvm::TargetMachineBuilder::create((llvm::TargetMachineBuilder *)v2, (uint64_t *)__p);
  sub_1CCB8749C();
}

void llvm::ThinLTOCodeGenerator::writeGeneratedObject(unsigned char *a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  if (!a3)
  {
    v29[0] = 0;
    std::system_category();
    int v12 = sub_1CD0D9358(a1, a2, (uint64_t)v29, 0, 2, 0);
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v27, v12, 1, 0, 0);
    if (v29[0])
    {
      unint64_t v23 = "Can't open output '";
      __int16 v24 = 259;
      __int16 v22 = 261;
      v21[0] = (uint64_t)a1;
      v21[1] = a2;
      sub_1CD3E3950((uint64_t *)&v23, v21, (uint64_t)v25);
      int v19 = "'\n";
      __int16 v20 = 259;
      sub_1CD3E3950(v25, (uint64_t *)&v19, (uint64_t)v26);
      llvm::report_fatal_error((llvm *)v26, (const llvm::Twine *)1);
    }
    uint64_t v13 = *(unsigned char **)(a4 + 8);
    int v14 = *(unsigned char **)(a4 + 16);
    int64_t v15 = v14 - v13;
    if ((unint64_t)(v14 - v13) <= v27[3] - (void)v28)
    {
      if (v14 != v13)
      {
        memcpy(v28, v13, v14 - v13);
        v28 += v15;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v27, v13, v14 - v13);
    }
    if (!a1)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
LABEL_32:
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v27);
      return;
    }
    if (a2 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_33;
    }
    if (a2 >= 0x17)
    {
      uint64_t v16 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a2 | 7) != 0x17) {
        uint64_t v16 = a2 | 7;
      }
      uint64_t v17 = v16 + 1;
      size_t v18 = operator new(v16 + 1);
      a5[1] = a2;
      a5[2] = v17 | 0x8000000000000000;
      *a5 = v18;
      a5 = v18;
    }
    else
    {
      *((unsigned char *)a5 + 23) = a2;
      if (!a2) {
        goto LABEL_31;
      }
    }
    memmove(a5, a1, a2);
LABEL_31:
    *((unsigned char *)a5 + a2) = 0;
    goto LABEL_32;
  }
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, unsigned char *, unint64_t))(*(void *)a3 + 32))(v27, a3, a4, a1, a2);
  if (v27[0])
  {
    uint64_t v30 = v27[0];
    v27[0] = 0;
    llvm::report_fatal_error(&v30);
  }
  if (!a1)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  if (a2 > 0x7FFFFFFFFFFFFFF7) {
LABEL_33:
  }
    abort();
  if (a2 >= 0x17)
  {
    uint64_t v9 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v9 = a2 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v11 = operator new(v9 + 1);
    a5[1] = a2;
    a5[2] = v10 | 0x8000000000000000;
    *a5 = v11;
    a5 = v11;
    goto LABEL_12;
  }
  *((unsigned char *)a5 + 23) = a2;
  if (a2) {
LABEL_12:
  }
    memmove(a5, a1, a2);
  *((unsigned char *)a5 + a2) = 0;
  if (v27[0]) {
    (*(void (**)(void))(*(void *)v27[0] + 8))(v27[0]);
  }
}

void llvm::ThinLTOCodeGenerator::run(llvm::ThinLTOCodeGenerator *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  llvm::timeTraceProfilerBegin((uint64_t)"ThinLink", 8, (uint64_t)&unk_1CFBF426F, 0);
  uint64_t v2 = *((unsigned __int8 *)this + 727);
  if (*((char *)this + 727) < 0) {
    uint64_t v3 = *((void *)this + 89);
  }
  else {
    uint64_t v3 = *((unsigned __int8 *)this + 727);
  }
  int v4 = v3 == 0;
  unsigned __int8 v17 = v4;
  memset(&v16, 0, sizeof(v16));
  if (*((_DWORD *)this + 158) == 2)
  {
    if ((v2 & 0x80) != 0) {
      uint64_t v2 = *((void *)this + 89);
    }
    if (!v2)
    {
      unint64_t v21 = &v23;
      long long v22 = xmmword_1CFAC3020;
      v18.__m_.__sig = (uint64_t)"temp";
      *(_WORD *)&v18.__m_.__opaque[24] = 259;
      if (llvm::sys::fs::createUniqueDirectory(&v18.__m_.__sig, &v21)) {
        llvm::report_fatal_error((llvm *)"cannot create temp directory", (const llvm::Twine *)1);
      }
      if ((unint64_t)(v22 + 1) > *((void *)&v22 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v21 + v22) = 0;
      MEMORY[0x1D25D9630]((char *)this + 704, v21);
      std::string::operator=(&v16, (const std::string *)((char *)this + 704));
      if (v21 != &v23) {
        free(v21);
      }
      int v4 = v17;
    }
  }
  if (v4) {
    sub_1CCB8A888((uint64_t)this + 424, (uint64_t)(*((void *)this + 60) - *((void *)this + 59)) >> 3);
  }
  if (*((char *)this + 727) < 0)
  {
    if (!*((void *)this + 89)) {
      goto LABEL_21;
    }
  }
  else if (!*((unsigned char *)this + 727))
  {
    goto LABEL_21;
  }
  __int16 v24 = 260;
  unint64_t v21 = (char *)this + 704;
  llvm::sys::fs::create_directories((void **)&v21, 1, 504);
  LOBYTE(v10) = 0;
  __int16 v24 = 260;
  unint64_t v21 = (char *)this + 704;
  llvm::sys::fs::is_directory((llvm::sys::fs *)&v21, (const llvm::Twine *)&v10, v5);
  if (!(_BYTE)v10)
  {
    int v19 = "Unexistent dir: '";
    __int16 v20 = 259;
    __int16 v15 = 260;
    v14[0] = (uint64_t)this + 704;
    sub_1CD3E3950((uint64_t *)&v19, v14, (uint64_t)&v18);
    int v12 = "'";
    __int16 v13 = 259;
    sub_1CD3E3950(&v18.__m_.__sig, (uint64_t *)&v12, (uint64_t)&v21);
    llvm::report_fatal_error((llvm *)&v21, (const llvm::Twine *)1);
  }
  sub_1CD673544((int64x2_t *)this + 28, (uint64_t)(*((void *)this + 60) - *((void *)this + 59)) >> 3);
LABEL_21:
  if (!*((unsigned char *)this + 729)) {
    llvm::ThinLTOCodeGenerator::linkCombinedIndex(this);
  }
  llvm::ThreadPool::ThreadPool((uint64_t)&v21, 0x100000000);
  uint64_t v6 = *((void *)this + 59);
  uint64_t v7 = *((void *)this + 60);
  if (v6 != v7)
  {
    int v8 = 0;
    do
    {
      uint64_t v9 = operator new(0x28uLL);
      *uint64_t v9 = &unk_1F262CFF0;
      v9[1] = this;
      _OWORD v9[2] = v6;
      void v9[3] = &v17;
      *((_DWORD *)v9 + 8) = v8;
      *(void *)&v18.__m_.__opaque[16] = v9;
      sub_1CC3DA82C((uint64_t)&v21, (uint64_t)&v18, 0, (std::future<void> *)&v11);
      if (*(std::mutex **)&v18.__m_.__opaque[16] == &v18)
      {
        (*(void (**)(std::mutex *))(v18.__m_.__sig + 32))(&v18);
      }
      else if (*(void *)&v18.__m_.__opaque[16])
      {
        (*(void (**)(void))(**(void **)&v18.__m_.__opaque[16] + 40))();
      }
      std::shared_future<void>::~shared_future(&v11);
      v6 += 8;
      ++v8;
    }
    while (v6 != v7);
  }
  llvm::ThreadPool::~ThreadPool((llvm::ThreadPool *)&v21);
}

void sub_1CCB8A888(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  unint64_t v4 = ((uint64_t)v3 - *(void *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *(void *)a1 + 8 * a2;
      while (v3 != (void *)v6)
      {
        uint64_t v8 = *--v3;
        uint64_t v7 = v8;
        void *v3 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      *(void *)(a1 + 8) = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    sub_1CCB8EF40((char **)a1, v5);
  }
}

void sub_1CCB8A938(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void sub_1CCB8A950(uint64_t a1)
{
  sub_1CCB8BD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCB8A98C()
{
}

uint64_t sub_1CCB8A9A0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 128))(a2, *(void *)(a1 + 16));
}

uint64_t sub_1CCB8A9D0(uint64_t a1, uint64_t a2, void *__src, size_t __len, int a5)
{
  uint64_t v9 = (void *)(a1 + 48);
  *(void *)(a1 + 24) = a1 + 48;
  uint64_t v10 = (void *)(a1 + 24);
  *(void *)a1 = &unk_1F2644DC8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  if (*(void *)(a2 + 8)) {
    sub_1CC1B8518(a1 + 24, a2);
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v12 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v12 = __len | 7;
    }
    size_t v13 = v12 + 1;
    std::shared_future<void> v11 = operator new(v12 + 1);
    *(void *)(a1 + 56) = __len;
    *(void *)(a1 + 64) = v13 | 0x8000000000000000;
    *(void *)(a1 + 48) = v11;
    goto LABEL_10;
  }
  *(unsigned char *)(a1 + 71) = __len;
  std::shared_future<void> v11 = v9;
  if (__len) {
LABEL_10:
  }
    memmove(v11, __src, __len);
  *((unsigned char *)v11 + __len) = 0;
  if (a5)
  {
    uint64_t v14 = *(void *)(a1 + 32);
    if ((unint64_t)(v14 + 1) > *(void *)(a1 + 40)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(unsigned char *)(*v10 + v14) = 0;
  }
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = v15 + *(void *)(a1 + 32);
  *(void *)(a1 + 8) = v15;
  *(void *)(a1 + 16) = v16;
  return a1;
}

uint64_t sub_1CCB8AB10(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 136);
  sub_1CB8338B8(&v3);
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CCB8ABA0()
{
}

__n128 sub_1CCB8ABB4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F262CFF0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CCB8AC08(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F262CFF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CCB8AC40()
{
  llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)&v0);
}

void sub_1CCB8AE24()
{
}

__n128 sub_1CCB8AE38(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *(void *)uint64_t v2 = &unk_1F262D038;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CCB8AEAC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F262D038;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void sub_1CCB8AF04(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 96);
  unsigned int v20 = v2;
  long long v4 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v5 = *v4;
  uint64_t v8 = *(void **)(v5 + 224);
  uint64_t v6 = v5 + 224;
  uint64_t v7 = v8;
  char v9 = *(unsigned char *)(v6 + 23);
  uint64_t v10 = *(void *)(a1 + 32);
  if (v9 >= 0) {
    std::shared_future<void> v11 = (void *)v6;
  }
  else {
    std::shared_future<void> v11 = v7;
  }
  size_t v12 = *(void *)(v6 + 8);
  if (v9 >= 0) {
    size_t v13 = v9 & 0x7F;
  }
  else {
    size_t v13 = v12;
  }
  void v19[3] = v11;
  void v19[4] = (void *)v13;
  sub_1CD663184(v3, (unsigned __int8 *)v11, v13);
  sub_1CD69BF44(*(void *)(a1 + 24), (unsigned __int8 *)v11, v13);
  char v14 = *(unsigned char *)(v10 + 727);
  int v15 = v14;
  if (v14 >= 0) {
    uint64_t v16 = (const void *)(v10 + 704);
  }
  else {
    uint64_t v16 = *(const void **)(v10 + 704);
  }
  size_t v17 = v14 & 0x7F;
  if (v15 >= 0) {
    size_t v18 = v17;
  }
  else {
    size_t v18 = *(void *)(v10 + 712);
  }
  llvm::ThinLTOCodeGenerator::computeThinLTOOutputPath(v2, v16, v18, (llvm::Triple *)(v10 + 8), v19);
  sub_1CC915D88(*(llvm::StringMapImpl **)(a1 + 48), (unsigned __int8 *)v11, v13);
  sub_1CCB72800(*(llvm::StringMapImpl **)(a1 + 56), (unsigned __int8 *)v11, v13);
  llvm::ThinLTOCodeGenerator::createModuleCacheEntry(v10);
}

void sub_1CCB8B7F0(uint64_t a1, void (*a2)(uint64_t, void), uint64_t a3)
{
  std::mutex::lock((std::mutex *)a1);
  v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  uint64_t v7 = llvm::operator<<(*(llvm::raw_ostream **)(a1 + 64), 1000 * v6.__d_.__rep_);
  uint64_t v8 = (_WORD *)*((void *)v7 + 4);
  if (*((void *)v7 + 3) - (void)v8 > 1uLL)
  {
    *uint64_t v8 = 8250;
    *((void *)v7 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v7, ": ", 2uLL);
  }
  a2(a3, *(void *)(a1 + 64));
  char v9 = *(llvm::raw_ostream **)(a1 + 64);
  uint64_t v10 = (const char *)*((void *)v9 + 2);
  if (*((const char **)v9 + 4) != v10)
  {
    *((void *)v9 + 4) = v10;
    llvm::raw_ostream::flush_tied_then_write(v9, v10);
  }

  std::mutex::unlock((std::mutex *)a1);
}

llvm::raw_ostream *sub_1CCB8B8B0(const void ***a1, llvm::raw_ostream *this)
{
  long long v4 = (void *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v4 > 0x17uLL)
  {
    qmemcpy(v4, "Look up cache entry for ", 24);
    __n128 result = (llvm::raw_ostream *)(*((void *)this + 4) + 24);
    *((void *)this + 4) = result;
  }
  else
  {
    llvm::raw_ostream::write(this, "Look up cache entry for ", 0x18uLL);
    __n128 result = (llvm::raw_ostream *)*((void *)this + 4);
  }
  std::chrono::system_clock::time_point v6 = **a1;
  size_t v7 = (size_t)(*a1)[1];
  if (v7 <= *((void *)this + 3) - (void)result)
  {
    if (v7)
    {
      memcpy(result, v6, v7);
      __n128 result = (llvm::raw_ostream *)(*((void *)this + 4) + v7);
      *((void *)this + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, (const char *)v6, v7);
    __n128 result = (llvm::raw_ostream *)*((void *)this + 4);
  }
  if (*((llvm::raw_ostream **)this + 3) == result)
  {
    return llvm::raw_ostream::write(this, "\n", 1uLL);
  }
  else
  {
    *(unsigned char *)__n128 result = 10;
    ++*((void *)this + 4);
  }
  return result;
}

llvm::raw_ostream *sub_1CCB8B9B4(uint64_t a1, llvm::raw_ostream *this)
{
  uint64_t v4 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v4) > 5)
  {
    *(_WORD *)(v4 + 4) = 8293;
    *(_DWORD *)uint64_t v4 = 1751343427;
    uint64_t v5 = (void *)(*((void *)this + 4) + 6);
    *((void *)this + 4) = v5;
  }
  else
  {
    llvm::raw_ostream::write(this, "Cache ", 6uLL);
    uint64_t v5 = (void *)*((void *)this + 4);
  }
  if (*(unsigned char *)(*(void *)a1 + 16)) {
    std::chrono::system_clock::time_point v6 = "miss";
  }
  else {
    std::chrono::system_clock::time_point v6 = "hit";
  }
  if (*(unsigned char *)(*(void *)a1 + 16)) {
    size_t v7 = 4;
  }
  else {
    size_t v7 = 3;
  }
  if (v7 <= *((void *)this + 3) - (void)v5)
  {
    memcpy(v5, v6, v7);
    uint64_t v8 = (_WORD *)(*((void *)this + 4) + v7);
    *((void *)this + 4) = v8;
  }
  else
  {
    llvm::raw_ostream::write(this, v6, v7);
    uint64_t v8 = (_WORD *)*((void *)this + 4);
  }
  if (*((void *)this + 3) - (void)v8 > 1uLL)
  {
    *uint64_t v8 = 10016;
    *((void *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, " '", 2uLL);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  char v10 = *(unsigned char *)(v9 + 23);
  if (v10 >= 0) {
    std::shared_future<void> v11 = *(const char **)(a1 + 8);
  }
  else {
    std::shared_future<void> v11 = *(const char **)v9;
  }
  if (v10 >= 0) {
    size_t v12 = v10 & 0x7F;
  }
  else {
    size_t v12 = *(void *)(v9 + 8);
  }
  llvm::raw_ostream::write(this, v11, v12);
  size_t v13 = (void *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v13 > 0xCuLL)
  {
    qmemcpy(v13, "' for buffer ", 13);
    *((void *)this + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(this, "' for buffer ", 0xDuLL);
  }
  unint64_t v14 = **(int **)(a1 + 16);
  if ((v14 & 0x80000000) != 0)
  {
    unint64_t v14 = -(uint64_t)v14;
    int v15 = this;
    int v16 = 1;
  }
  else
  {
    int v15 = this;
    int v16 = 0;
  }
  sub_1CD098D14(v15, v14, 0, 0, v16);
  size_t v17 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v17)
  {
    llvm::raw_ostream::write(this, " ", 1uLL);
    __n128 result = (llvm::raw_ostream *)*((void *)this + 4);
  }
  else
  {
    *size_t v17 = 32;
    __n128 result = (llvm::raw_ostream *)(*((void *)this + 4) + 1);
    *((void *)this + 4) = result;
  }
  uint64_t v19 = *(void *)(a1 + 24);
  unsigned int v20 = *(const void **)v19;
  size_t v21 = *(void *)(v19 + 8);
  if (v21 <= *((void *)this + 3) - (void)result)
  {
    if (v21)
    {
      memcpy(result, v20, v21);
      __n128 result = (llvm::raw_ostream *)(*((void *)this + 4) + v21);
      *((void *)this + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, (const char *)v20, v21);
    __n128 result = (llvm::raw_ostream *)*((void *)this + 4);
  }
  if (*((llvm::raw_ostream **)this + 3) == result)
  {
    return llvm::raw_ostream::write(this, "\n", 1uLL);
  }
  else
  {
    *(unsigned char *)__n128 result = 10;
    ++*((void *)this + 4);
  }
  return result;
}

llvm::raw_ostream *sub_1CCB8BC44(const void ***a1, llvm::raw_ostream *this)
{
  uint64_t v4 = (void *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v4 > 0x18uLL)
  {
    qmemcpy(v4, "Update cached result for ", 25);
    __n128 result = (llvm::raw_ostream *)(*((void *)this + 4) + 25);
    *((void *)this + 4) = result;
  }
  else
  {
    llvm::raw_ostream::write(this, "Update cached result for ", 0x19uLL);
    __n128 result = (llvm::raw_ostream *)*((void *)this + 4);
  }
  std::chrono::system_clock::time_point v6 = **a1;
  size_t v7 = (size_t)(*a1)[1];
  if (v7 <= *((void *)this + 3) - (void)result)
  {
    if (v7)
    {
      memcpy(result, v6, v7);
      __n128 result = (llvm::raw_ostream *)(*((void *)this + 4) + v7);
      *((void *)this + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, (const char *)v6, v7);
    __n128 result = (llvm::raw_ostream *)*((void *)this + 4);
  }
  if (*((llvm::raw_ostream **)this + 3) == result)
  {
    return llvm::raw_ostream::write(this, "\n", 1uLL);
  }
  else
  {
    *(unsigned char *)__n128 result = 10;
    ++*((void *)this + 4);
  }
  return result;
}

uint64_t sub_1CCB8BD48(uint64_t a1)
{
  *(void *)a1 = &unk_1F262CF98;
  if (*(char *)(a1 + 727) < 0) {
    operator delete(*(void **)(a1 + 704));
  }
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*(void **)(a1 + 680));
  }
  if (*(unsigned char *)(a1 + 672))
  {
    uint64_t v2 = *(void *)(a1 + 664);
    *(void *)(a1 + 664) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    }
    uint64_t v3 = *(void *)(a1 + 656);
    *(void *)(a1 + 656) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
    *(unsigned char *)(a1 + 672) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 648);
  *(void *)(a1 + 648) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 640);
  *(void *)(a1 + 640) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 128))(v5);
  }
  if (*(char *)(a1 + 583) < 0) {
    operator delete(*(void **)(a1 + 560));
  }
  sub_1CC0D7CD8(a1 + 528);
  sub_1CC0D7CD8(a1 + 496);
  std::chrono::system_clock::time_point v6 = *(void **)(a1 + 472);
  if (v6)
  {
    sub_1CCB8BFDC(a1 + 472, v6);
    operator delete(*(void **)(a1 + 472));
  }
  uint64_t v9 = (void **)(a1 + 448);
  sub_1CB8338B8(&v9);
  uint64_t v9 = (void **)(a1 + 424);
  sub_1CC66CFA8(&v9);
  if (*(char *)(a1 + 407) < 0) {
    operator delete(*(void **)(a1 + 384));
  }
  uint64_t v9 = (void **)(a1 + 360);
  sub_1CB8338B8(&v9);
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  if (*(char *)(a1 + 311) < 0) {
    operator delete(*(void **)(a1 + 288));
  }
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  size_t v7 = *(std::__shared_weak_count **)(a1 + 152);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1CCB8BFDC(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void **)(result + 8);
  while (v4 != a2)
  {
    uint64_t v5 = *--v4;
    __n128 result = v5;
    *uint64_t v4 = 0;
    if (v5)
    {
      llvm::lto::InputFile::~InputFile((void **)result);
      __n128 result = MEMORY[0x1D25D9CE0]();
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void *sub_1CCB8C044(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n)
{
  unsigned int v5 = *((_DWORD *)a1 + 2);
  if (!v5)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    uint64_t v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v25[16] = 2;
    *(void *)a1 = v25;
    unsigned int v5 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  int v6 = 0;
  if (__n)
  {
    size_t v7 = __n;
    uint64_t v8 = a2;
    do
    {
      int v9 = *v8++;
      int v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  uint64_t v10 = *(void *)a1;
  unsigned int v11 = v5 - 1;
  uint64_t v12 = *(void *)a1 + 8 * v5 + 8;
  int v13 = -1;
  int v14 = 1;
  int v15 = v6;
  while (1)
  {
    uint64_t v16 = v15 & v11;
    size_t v17 = *(void **)(v10 + 8 * v16);
    if (!v17) {
      break;
    }
    if (v17 == (void *)-8)
    {
      if (v13 == -1) {
        int v13 = v15 & v11;
      }
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6 {
           && __n == *v17
    }
           && (!__n || !memcmp(a2, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_20;
    }
    int v15 = v14 + v16;
    ++v14;
  }
  uint64_t v18 = v13;
  if (v13 == -1)
  {
    uint64_t v18 = v16;
    uint64_t v16 = v16;
  }
  else
  {
    uint64_t v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  size_t v17 = *(void **)(v10 + 8 * v16);
LABEL_20:
  int i = (void *)(v10 + 8 * v16);
  if (v17 == (void *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v17)
  {
    return i;
  }
  unsigned int v20 = operator new(__n + 17, (std::align_val_t)8uLL);
  size_t v21 = v20;
  long long v22 = (char *)(v20 + 2);
  if (__n) {
    memcpy(v20 + 2, a2, __n);
  }
  v22[__n] = 0;
  *size_t v21 = __n;
  v21[1] = 0;
  *int i = v21;
  ++*((_DWORD *)a1 + 3);
  for (int i = (void *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v16));
        !*i || *i == -8;
  return i;
}

uint64_t sub_1CCB8C244(void *a1, void *a2, uint64_t a3)
{
  v33[20] = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  uint64_t v7 = *a2;
  *a2 = 0;
  if (!result)
  {
    *a1 = v7;
    return result;
  }
  int v9 = *(const void **)(*(void *)a3 + 16);
  size_t v8 = *(void *)(*(void *)a3 + 24);
  uint64_t v10 = (llvm *)(*(void *(**)(void **__return_ptr, uint64_t))(*(void *)v7 + 24))(__p, v7);
  if (v21 >= 0) {
    unsigned int v11 = __p;
  }
  else {
    unsigned int v11 = (void **)__p[0];
  }
  if (v21 >= 0) {
    size_t v12 = v21 & 0x7F;
  }
  else {
    size_t v12 = (size_t)__p[1];
  }
  v22[0] = 0;
  v22[1] = 0;
  if (v8 > 0x7FFFFFFFFFFFFFF7) {
LABEL_36:
  }
    abort();
  if (v8 >= 0x17)
  {
    uint64_t v14 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v14 = v8 | 7;
    }
    uint64_t v15 = v14 + 1;
    int v13 = operator new(v14 + 1);
    v23[1] = (void *)v8;
    unint64_t v24 = v15 | 0x8000000000000000;
    v23[0] = v13;
    goto LABEL_16;
  }
  int v13 = v23;
  HIBYTE(v24) = v8;
  if (v8) {
LABEL_16:
  }
    uint64_t v10 = (llvm *)memmove(v13, v9, v8);
  *((unsigned char *)v13 + v8) = 0;
  uint64_t v25 = -1;
  int v26 = 0;
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_36;
  }
  if (v12 >= 0x17)
  {
    uint64_t v17 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v17 = v12 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = operator new(v17 + 1);
    v27[1] = (void *)v12;
    unint64_t v28 = v18 | 0x8000000000000000;
    v27[0] = v16;
  }
  else
  {
    uint64_t v16 = v27;
    HIBYTE(v28) = v12;
    if (!v12) {
      goto LABEL_25;
    }
  }
  uint64_t v10 = (llvm *)memmove(v16, v11, v12);
LABEL_25:
  *((unsigned char *)v16 + v12) = 0;
  long long v31 = 0u;
  *(_OWORD *)uint64_t v30 = 0u;
  *(_OWORD *)unint64_t v29 = 0u;
  v32[0] = v33;
  v32[1] = (void *)0x400000000;
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v19 = (llvm::raw_ostream *)llvm::errs(v10);
  llvm::SMDiagnostic::print((llvm::SMDiagnostic *)v22, "ThinLTO", v19, 1, 1);
  sub_1CC1925A4(v32);
  if (v30[1])
  {
    *(void **)&long long v31 = v30[1];
    operator delete(v30[1]);
  }
  if (SHIBYTE(v30[0]) < 0) {
    operator delete(v29[0]);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
  *a1 = 0;
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
}

void sub_1CCB8C528()
{
}

__n128 sub_1CCB8C53C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F262D080;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CCB8C590(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F262D080;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CCB8C5C8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = sub_1CCB8C044(*(llvm::StringMapImpl **)(a1 + 8), *(unsigned __int8 **)a2, *(void *)(a2 + 8));
  llvm::ThinLTOCodeGenerator::loadModuleFromInput(*(llvm::BitcodeModule ***)(*v4 + 8), 1, (llvm **)a3);
  *(unsigned char *)(a3 + 8) &= ~1u;
}

uint64_t sub_1CCB8C628(void *a1, void *a2, uint64_t a3)
{
  _WORD v34[20] = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  uint64_t v7 = *a2;
  *a2 = 0;
  if (!result)
  {
    *a1 = v7;
    return result;
  }
  char v8 = *(unsigned char *)(*(void *)a3 + 191);
  if (v8 >= 0) {
    int v9 = (const void *)(*(void *)a3 + 168);
  }
  else {
    int v9 = *(const void **)(*(void *)a3 + 168);
  }
  if (v8 >= 0) {
    size_t v10 = v8 & 0x7F;
  }
  else {
    size_t v10 = *(void *)(*(void *)a3 + 176);
  }
  unsigned int v11 = (llvm *)(*(void *(**)(void **__return_ptr, uint64_t))(*(void *)v7 + 24))(__p, v7);
  if (v22 >= 0) {
    size_t v12 = __p;
  }
  else {
    size_t v12 = (void **)__p[0];
  }
  if (v22 >= 0) {
    size_t v13 = v22 & 0x7F;
  }
  else {
    size_t v13 = (size_t)__p[1];
  }
  v23[0] = 0;
  v23[1] = 0;
  if (v10 > 0x7FFFFFFFFFFFFFF7) {
LABEL_42:
  }
    abort();
  if (v10 >= 0x17)
  {
    uint64_t v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v15 = v10 | 7;
    }
    uint64_t v16 = v15 + 1;
    uint64_t v14 = operator new(v15 + 1);
    v24[1] = (void *)v10;
    unint64_t v25 = v16 | 0x8000000000000000;
    v24[0] = v14;
    goto LABEL_22;
  }
  uint64_t v14 = v24;
  HIBYTE(v25) = v10;
  if (v10) {
LABEL_22:
  }
    unsigned int v11 = (llvm *)memmove(v14, v9, v10);
  *((unsigned char *)v14 + v10) = 0;
  uint64_t v26 = -1;
  int v27 = 0;
  if (v13 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_42;
  }
  if (v13 >= 0x17)
  {
    uint64_t v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v18 = v13 | 7;
    }
    uint64_t v19 = v18 + 1;
    uint64_t v17 = operator new(v18 + 1);
    v28[1] = (void *)v13;
    unint64_t v29 = v19 | 0x8000000000000000;
    v28[0] = v17;
  }
  else
  {
    uint64_t v17 = v28;
    HIBYTE(v29) = v13;
    if (!v13) {
      goto LABEL_31;
    }
  }
  unsigned int v11 = (llvm *)memmove(v17, v12, v13);
LABEL_31:
  *((unsigned char *)v17 + v13) = 0;
  long long v32 = 0u;
  *(_OWORD *)long long v31 = 0u;
  *(_OWORD *)uint64_t v30 = 0u;
  v33[0] = v34;
  v33[1] = (void *)0x400000000;
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  unsigned int v20 = (llvm::raw_ostream *)llvm::errs(v11);
  llvm::SMDiagnostic::print((llvm::SMDiagnostic *)v23, "ThinLTO", v20, 1, 1);
  sub_1CC1925A4(v33);
  if (v31[1])
  {
    *(void **)&long long v32 = v31[1];
    operator delete(v31[1]);
  }
  if (SHIBYTE(v31[0]) < 0) {
    operator delete(v30[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete(v24[0]);
  }
  *a1 = 0;
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
}

void sub_1CCB8C928()
{
}

void *sub_1CCB8C93C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F262D0C8;
  return result;
}

void sub_1CCB8C974(uint64_t a1, void *a2)
{
  *a2 = &unk_1F262D0C8;
}

uint64_t sub_1CCB8C99C()
{
  return 0;
}

BOOL sub_1CCB8C9A4(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  unsigned int v5 = sub_1CC6AFC28(*a1, &v7);
  return (uint64_t *)(**a1 + 16 * *((unsigned int *)*a1 + 4)) == v5 || v5[1] == a3;
}

uint64_t **sub_1CCB8CA0C(llvm::StringMapImpl **a1, unsigned __int8 *a2, size_t a3, unint64_t a4, int a5)
{
  unint64_t v8 = a4;
  int v6 = (uint64_t **)(*sub_1CCB72800(*a1, a2, a3) + 8);
  int v9 = (uint64_t **)&v8;
  uint64_t result = sub_1CCB770B0(v6, &v8, (uint64_t)&std::piecewise_construct, &v9);
  *((_DWORD *)result + 10) = a5;
  return result;
}

uint64_t sub_1CCB8CA6C(uint64_t a1, const char *a2, const char *a3, uint64_t a4, unsigned __int8 *__s1, size_t __n, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, char a12, uint64_t a13)
{
  *(void *)a1 = &unk_1F262D110;
  *(void *)(a1 + 8) = a1 + 32;
  uint64_t v14 = (void *)(a1 + 8);
  *(_OWORD *)(a1 + 16) = xmmword_1CFAC3020;
  if (a3)
  {
    llvm::ModuleCacheEntry::computeCacheKey(__s1, __n, a4, a7, a8, a9, a10, (uint64_t)&v28, a11, a12, a13);
    if (v30)
    {
      __int16 v27 = 261;
      v26[0] = a2;
      v26[1] = a3;
      std::operator+<char>();
      __int16 v25 = 260;
      p_p = &__p;
      __int16 v21 = 257;
      __int16 v19 = 257;
      llvm::sys::path::append(v14, 0, v26, &p_p, (uint64_t)v20, (uint64_t)v18);
      if (v23 < 0) {
        operator delete(__p);
      }
      if (v30 && v29 < 0) {
        operator delete(v28);
      }
    }
  }
  return a1;
}

void *sub_1CCB8CBB0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (void *)a2;
  uint64_t v3 = (const void *)result[1];
  if (!v3)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    return result;
  }
  size_t v4 = result[2];
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v4 >= 0x17)
  {
    uint64_t v5 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v5 = v4 | 7;
    }
    uint64_t v6 = v5 + 1;
    uint64_t v7 = operator new(v5 + 1);
    v2[1] = v4;
    v2[2] = v6 | 0x8000000000000000;
    void *v2 = v7;
    uint64_t v2 = v7;
  }
  else
  {
    *(unsigned char *)(a2 + 23) = v4;
    if (!v4) {
      goto LABEL_11;
    }
  }
  uint64_t result = memmove(v2, v3, v4);
LABEL_11:
  *((unsigned char *)v2 + v4) = 0;
  return result;
}

void sub_1CCB8CC58(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v18[8] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v16 = v18;
    long long v17 = xmmword_1CD96DBD0;
    __int16 v13 = 261;
    unsigned int v11 = *(const void ***)(a1 + 8);
    uint64_t v12 = v3;
    llvm::sys::fs::openNativeFileForRead((unsigned __int8 *)&v11, 32, &v16, (uint64_t)v14);
    if (v15)
    {
      size_t v10 = *(char **)v14;
      uint64_t v8 = llvm::errorToErrorCode(&v10);
      *(unsigned char *)(a2 + 16) |= 1u;
      *(void *)a2 = v8;
      *(void *)(a2 + 8) = v9;
      if (v10) {
        (*(void (**)(char *))(*(void *)v10 + 8))(v10);
      }
    }
    else
    {
      uint64_t v5 = (llvm::sys::Process *)v14[0];
      __int16 v13 = 261;
      uint64_t v6 = *(void *)(a1 + 16);
      unsigned int v11 = *(const void ***)(a1 + 8);
      uint64_t v12 = v6;
      sub_1CD097170((llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, v14[0], &v11, (llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, 0, 0, 0, a2);
      llvm::sys::Process::SafelyCloseFileDescriptor(v5);
    }
    if (v16 != v18) {
      free(v16);
    }
  }
  else
  {
    uint64_t v7 = std::system_category();
    *(unsigned char *)(a2 + 16) |= 1u;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = v7;
  }
}

void sub_1CCB8CDC0(uint64_t a1, uint64_t a2)
{
  v28[16] = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 16)) {
    return;
  }
  uint64_t v26 = v28;
  long long v27 = xmmword_1CFAC3020;
  char v23 = v25;
  long long v24 = xmmword_1CFAC3020;
  sub_1CC223970((uint64_t)&v23, a1 + 8);
  size_t v4 = (char *)sub_1CD0E3AC0((unsigned __int8 *)v23, v24, 0);
  if (v4 == (char *)-1) {
    size_t v4 = (char *)v24;
  }
  else {
    *(void *)&long long v24 = v4;
  }
  __int16 v21 = 261;
  v20[0] = (char *)v23;
  v20[1] = v4;
  v18[0] = "Thin-%%%%%%.tmp.o";
  __int16 v19 = 259;
  __int16 v17 = 257;
  __int16 v15 = 257;
  llvm::sys::path::append(&v26, 0, (const char **)v20, v18, (uint64_t)v16, (uint64_t)v14);
  llvm::writeFileAtomically(v26, v27, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a2 + 8), *(void *)(a2 + 16) - *(void *)(a2 + 8), &v12);
  uint64_t v5 = v12;
  if (v12)
  {
    uint64_t v12 = 0;
    if ((*(unsigned int (**)(void *, void *))(*v5 + 48))(v5, &llvm::ErrorList::ID))
    {
      __int16 v13 = 0;
      uint64_t v6 = (uint64_t *)v5[1];
      uint64_t v7 = (uint64_t *)v5[2];
      if (v6 != v7)
      {
        uint64_t v8 = 0;
        do
        {
          v18[0] = v8;
          uint64_t v9 = *v6;
          *uint64_t v6 = 0;
          v14[0] = v9;
          sub_1CCB8D790(v16, v14);
          sub_1CD451630((char **)v18, v16, v20);
          uint64_t v8 = v20[0];
          v20[0] = 0;
          if (v16[0]) {
            (*(void (**)(char *))(*(void *)v16[0] + 8))(v16[0]);
          }
          uint64_t v10 = v14[0];
          v14[0] = 0;
          if (v10) {
            (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
          }
          if (v18[0]) {
            (*(void (**)(void *))(*v18[0] + 8))(v18[0]);
          }
          ++v6;
        }
        while (v6 != v7);
        __int16 v13 = v8;
      }
    }
    else
    {
      char v22 = v5;
      sub_1CCB8D790(&v13, &v22);
      uint64_t v5 = v22;
      if (!v22)
      {
LABEL_19:
        if (v12) {
          (*(void (**)(void *))(*v12 + 8))(v12);
        }
        if (v13)
        {
          unsigned int v11 = v13;
          sub_1CD4515D0((void **)&v11);
          if (v11) {
            (*(void (**)(char *))(*(void *)v11 + 8))(v11);
          }
        }
        goto LABEL_22;
      }
    }
    (*(void (**)(void *))(*v5 + 8))(v5);
    goto LABEL_19;
  }
LABEL_22:
  if (v23 != v25) {
    free(v23);
  }
  if (v26 != v28) {
    free(v26);
  }
}

void sub_1CCB8D0F0(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, size_t a4@<X3>, void *a5@<X8>)
{
  __int16 v32 = 261;
  v31[0] = a3;
  v31[1] = a4;
  llvm::sys::fs::remove((llvm::sys::fs *)v31, (const llvm::Twine *)1);
  unsigned int v11 = *(const void **)(a1 + 8);
  if (v11)
  {
    size_t v12 = *(void *)(a1 + 16);
    if (v12 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v12 >= 0x17)
    {
      uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v14 = v12 | 7;
      }
      uint64_t v15 = v14 + 1;
      p_dst = (void **)operator new(v14 + 1);
      size_t v29 = v12;
      int64_t v30 = v15 | 0x8000000000000000;
      long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v30) = v12;
      p_dst = (void **)&__dst;
      if (!v12) {
        goto LABEL_11;
      }
    }
    memmove(p_dst, v11, v12);
LABEL_11:
    *((unsigned char *)p_dst + v12) = 0;
    goto LABEL_12;
  }
  long long __dst = 0;
  size_t v29 = 0;
  int64_t v30 = 0;
LABEL_12:
  __int16 v32 = 260;
  v31[0] = &__dst;
  __int16 v27 = 261;
  __int16 v25 = a3;
  size_t v26 = a4;
  if (llvm::sys::fs::create_hard_link((llvm::sys::fs *)v31, (const llvm::Twine *)&v25, v10)
    && (__int16 v32 = 260,
        v31[0] = &__dst,
        __int16 v27 = 261,
        __int16 v25 = a3,
        size_t v26 = a4,
        __int16 v17 = (llvm *)llvm::sys::fs::copy_file((llvm::sys::fs *)v31, (const llvm::Twine *)&v25, v16),
        v17))
  {
    uint64_t v18 = (llvm::raw_ostream *)llvm::errs(v17);
    __int16 v19 = v18;
    unsigned int v20 = (void *)*((void *)v18 + 4);
    if (*((void *)v18 + 3) - (void)v20 > 0x2DuLL)
    {
      qmemcpy(v20, "remark: can't link or copy from cached entry '", 46);
      *((void *)v18 + 4) += 46;
    }
    else
    {
      llvm::raw_ostream::write(v18, "remark: can't link or copy from cached entry '", 0x2EuLL);
    }
    if (v30 >= 0) {
      __int16 v21 = (const char *)&__dst;
    }
    else {
      __int16 v21 = (const char *)__dst;
    }
    if (v30 >= 0) {
      size_t v22 = HIBYTE(v30) & 0x7F;
    }
    else {
      size_t v22 = v29;
    }
    llvm::raw_ostream::write(v19, v21, v22);
    uint64_t v23 = *((void *)v19 + 4);
    if ((unint64_t)(*((void *)v19 + 3) - v23) > 5)
    {
      *(_WORD *)(v23 + 4) = 10016;
      *(_DWORD *)uint64_t v23 = 1869881383;
      long long v24 = (_WORD *)(*((void *)v19 + 4) + 6);
      *((void *)v19 + 4) = v24;
    }
    else
    {
      llvm::raw_ostream::write(v19, "' to '", 6uLL);
      long long v24 = (_WORD *)*((void *)v19 + 4);
    }
    if (a4 <= *((void *)v19 + 3) - (void)v24)
    {
      if (a4)
      {
        memcpy(v24, a3, a4);
        long long v24 = (_WORD *)(*((void *)v19 + 4) + a4);
        *((void *)v19 + 4) = v24;
      }
    }
    else
    {
      llvm::raw_ostream::write(v19, a3, a4);
      long long v24 = (_WORD *)*((void *)v19 + 4);
    }
    if (*((void *)v19 + 3) - (void)v24 > 1uLL)
    {
      *long long v24 = 2599;
      *((void *)v19 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v19, "'\n", 2uLL);
    }
    llvm::ModuleCacheEntry::writeObject(a2, a3, a4, a5);
  }
  else
  {
    *a5 = 0;
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(__dst);
  }
}

void sub_1CCB8D39C(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(const void **)(a1 + 8);
  if (!v3) {
    goto LABEL_18;
  }
  size_t v5 = *(void *)(a1 + 16);
  if (v5 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_57;
  }
  if (v5 >= 0x17)
  {
    uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v7 = v5 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (std::error_code *)operator new(v7 + 1);
    __dst.__cat_ = (const std::error_category *)v5;
    int64_t v36 = v8 | 0x8000000000000000;
    *(void *)&__dst.__val_ = p_dst;
    goto LABEL_9;
  }
  HIBYTE(v36) = *(void *)(a1 + 16);
  p_dst = &__dst;
  if (v5) {
LABEL_9:
  }
    memmove(p_dst, v3, v5);
  *((unsigned char *)&p_dst->__val_ + v5) = 0;
  if (v36 >= 0) {
    cat = (const std::error_category *)HIBYTE(v36);
  }
  else {
    cat = __dst.__cat_;
  }
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
    if (cat) {
      goto LABEL_15;
    }
LABEL_18:
    *a2 = 0;
    a2[8] = 0;
    return;
  }
  operator delete(*(void **)&__dst.__val_);
  if (!cat) {
    goto LABEL_18;
  }
LABEL_15:
  sub_1CCB8CC58(a1, (uint64_t)&__dst);
  if (v36)
  {
    std::error_code v34 = __dst;
    if (!__dst.__val_) {
      goto LABEL_53;
    }
    unsigned int v11 = (llvm::raw_ostream *)llvm::errs(v10);
    size_t v12 = v11;
    __int16 v13 = (void *)*((void *)v11 + 4);
    if (*((void *)v11 + 3) - (void)v13 > 0x21uLL)
    {
      qmemcpy(v13, "remark: can't reload cached file '", 34);
      *((void *)v11 + 4) += 34;
    }
    else
    {
      llvm::raw_ostream::write(v11, "remark: can't reload cached file '", 0x22uLL);
    }
    uint64_t v14 = *(const void **)(a1 + 8);
    if (!v14)
    {
      size_t v17 = 0;
      uint64_t v18 = 0;
      char v19 = 0;
      long long v31 = 0;
      size_t v32 = 0;
      unint64_t v33 = 0;
LABEL_33:
      BOOL v22 = v19 < 0;
      if (v19 >= 0) {
        uint64_t v23 = &v31;
      }
      else {
        uint64_t v23 = v18;
      }
      size_t v24 = v19 & 0x7F;
      if (v22) {
        size_t v25 = v17;
      }
      else {
        size_t v25 = v24;
      }
      llvm::raw_ostream::write(v12, (const char *)v23, v25);
      uint64_t v26 = *((void *)v12 + 4);
      if ((unint64_t)(*((void *)v12 + 3) - v26) > 2)
      {
        *(unsigned char *)(v26 + 2) = 32;
        *(_WORD *)uint64_t v26 = 14887;
        *((void *)v12 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v12, "': ", 3uLL);
      }
      std::error_code::message(&__p, &v34);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
      }
      else {
        size_t size = __p.__r_.__value_.__l.__size_;
      }
      llvm::raw_ostream::write(v12, (const char *)p_p, size);
      size_t v29 = (unsigned char *)*((void *)v12 + 4);
      if (*((unsigned char **)v12 + 3) == v29)
      {
        llvm::raw_ostream::write(v12, "\n", 1uLL);
      }
      else
      {
        *size_t v29 = 10;
        ++*((void *)v12 + 4);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33) < 0) {
        operator delete(v31);
      }
      goto LABEL_53;
    }
    size_t v15 = *(void *)(a1 + 16);
    if (v15 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v15 >= 0x17)
      {
        uint64_t v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17) {
          uint64_t v20 = v15 | 7;
        }
        uint64_t v21 = v20 + 1;
        uint64_t v16 = operator new(v20 + 1);
        size_t v32 = v15;
        unint64_t v33 = v21 | 0x8000000000000000;
        long long v31 = v16;
      }
      else
      {
        HIBYTE(v33) = v15;
        uint64_t v16 = &v31;
        if (!v15) {
          goto LABEL_32;
        }
      }
      memmove(v16, v14, v15);
LABEL_32:
      *((unsigned char *)v16 + v15) = 0;
      char v19 = HIBYTE(v33);
      uint64_t v18 = (void **)v31;
      size_t v17 = v32;
      goto LABEL_33;
    }
LABEL_57:
    abort();
  }
  std::system_category();
LABEL_53:
  *(void *)a2 = *(void *)&__dst.__val_;
  a2[8] = 1;
}

void *sub_1CCB8D6C8(void *a1)
{
  *a1 = &unk_1F262D110;
  uint64_t v2 = (void *)a1[1];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

void sub_1CCB8D71C(void *a1)
{
  *a1 = &unk_1F262D110;
  uint64_t v2 = (void *)a1[1];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCB8D790(void *a1, void *a2)
{
  uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a2 + 48))(*a2, &llvm::AtomicFileWriteError::ID);
  size_t v5 = (_DWORD *)*a2;
  *a2 = 0;
  if (result)
  {
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v20 = 0;
    int v11 = 0;
    char v15 = 0;
    uint64_t v16 = 0;
    uint64_t v18 = v19;
    int v17 = 0;
    uint64_t v10 = &unk_1F2646F30;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v6 = (llvm *)(*(uint64_t (**)(_DWORD *, void **))(*(void *)v5 + 16))(v5, &v10);
    if (!v5[2])
    {
      uint64_t v7 = (llvm::raw_ostream *)llvm::errs(v6);
      uint64_t v8 = sub_1CB8E509C(v7, "Error: ");
      uint64_t v9 = sub_1CD55ABE0(v8, (uint64_t *)v19);
      sub_1CB8E509C(v9, "\n");
      llvm::report_fatal_error((llvm *)"ThinLTO: Can't get a temporary file", (const llvm::Twine *)1);
    }
    uint64_t v10 = &unk_1F2646B98;
    if (v17 == 1 && v12) {
      MEMORY[0x1D25D9CB0](v12, 0x1000C8077774924);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete(v19[0]);
    }
    uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    size_t v5 = 0;
  }
  *a1 = v5;
  return result;
}

uint64_t sub_1CCB8D938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *__s1, size_t __n, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, char a12, uint64_t a13)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F262D160;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 24) = 0;
  uint64_t v15 = a1 + 24;
  *(unsigned char *)(a1 + 88) = 0;
  llvm::ModuleCacheEntry::computeCacheKey(__s1, __n, a4, a7, a8, a9, a10, (uint64_t)&__p, a11, a12, a13);
  if (v20)
  {
    llvm::cas::ObjectStore::createProxy(a2, (uint64_t)&v24);
    if (v25)
    {
      int v17 = v24;
      sub_1CD4515D0(&v17);
      if (v17) {
        (*(void (**)(void *))(*v17 + 8))(v17);
      }
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(*v24 + 24))(&v21);
      sub_1CD502308(v15, &v21);
      if (v22 != &v23) {
        free(v22);
      }
    }
    if (v20 && v19 < 0) {
      operator delete(__p);
    }
  }
  return a1;
}

void sub_1CCB8DAFC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 88))
  {
    llvm::cas::CASID::toString((llvm::cas::CASID *)(a1 + 24), (void *)a2);
  }
  else
  {
    *(unsigned char *)(a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
  }
}

void sub_1CCB8DB18(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 88))
  {
    uint64_t v9 = std::system_category();
    *(unsigned char *)(a2 + 16) |= 1u;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = v9;
    return;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  size_t v5 = *(const std::string::value_type **)(a1 + 32);
  if (v5)
  {
    std::string::__init(&v24, v5, *(void *)(a1 + 40));
    char v6 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v24.__r_.__value_.__l.__size_;
    std::string::size_type v8 = v24.__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::size_type size = 0;
    std::string::size_type v8 = 0;
    char v6 = 0;
    memset(&v24, 0, sizeof(v24));
  }
  BOOL v10 = v6 < 0;
  if (v6 >= 0) {
    int v11 = &v24;
  }
  else {
    int v11 = (std::string *)v8;
  }
  std::string::size_type v12 = v6 & 0x7F;
  if (v10) {
    std::string::size_type v13 = size;
  }
  else {
    std::string::size_type v13 = v12;
  }
  (*(void (**)(char **__return_ptr, uint64_t, std::string *, std::string::size_type))(*(void *)v4 + 24))(&v26, v4, v11, v13);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (v30)
  {
    uint64_t v15 = v26;
    uint64_t v26 = 0;
    uint64_t v23 = v15;
    uint64_t v16 = llvm::errorToErrorCode(&v23);
    *(unsigned char *)(a2 + 16) |= 1u;
    *(void *)a2 = v16;
    *(void *)(a2 + 8) = v17;
    uint64_t v18 = v23;
    if (!v23) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (!v29)
  {
    uint64_t v14 = std::system_category();
    *(unsigned char *)(a2 + 16) |= 1u;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = v14;
    goto LABEL_19;
  }
  llvm::cas::ObjectStore::getProxy(*(llvm::cas::ObjectStore **)(a1 + 8), (const llvm::cas::CASID *)&v26, (uint64_t)&v24);
  if ((v25 & 1) == 0)
  {
    llvm::cas::ObjectProxy::getMemoryBuffer(&v24, (uint64_t)&unk_1CFBF426F, 0, 1, (void *)a2);
    *(unsigned char *)(a2 + 16) &= ~1u;
    goto LABEL_19;
  }
  BOOL v22 = (char *)v24.__r_.__value_.__r.__words[0];
  uint64_t v20 = llvm::errorToErrorCode(&v22);
  *(unsigned char *)(a2 + 16) |= 1u;
  *(void *)a2 = v20;
  *(void *)(a2 + 8) = v21;
  uint64_t v18 = v22;
  if (v22) {
LABEL_18:
  }
    (*(void (**)(char *))(*(void *)v18 + 8))(v18);
LABEL_19:
  if (v30)
  {
    char v19 = v26;
    uint64_t v26 = 0;
    if (v19) {
      (*(void (**)(char *))(*(void *)v19 + 8))(v19);
    }
  }
  else if (v29)
  {
    if (v27 != &v28) {
      free(v27);
    }
  }
}

void sub_1CCB8DD68(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 88)) {
    return;
  }
  llvm::cas::ObjectStore::createProxy(*(void *)(a1 + 8), (uint64_t)&v14);
  if (v15)
  {
    uint64_t v10 = v14;
    char v6 = &v10;
LABEL_20:
    llvm::report_fatal_error(v6);
  }
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(const std::string::value_type **)(a1 + 32);
  if (v3) {
    std::string::__init(&v8, v3, *(void *)(a1 + 40));
  }
  else {
    memset(&v8, 0, sizeof(v8));
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v14 + 24))(&v11);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = &v8;
  }
  else {
    uint64_t v4 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = *((unsigned char *)&v8.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type size = v8.__r_.__value_.__l.__size_;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *, std::string::size_type, uint64_t *))(*(void *)v2 + 32))(&v9, v2, v4, size, &v11);
  if (v12 != &v13) {
    free(v12);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (v9)
  {
    uint64_t v7 = v9;
    uint64_t v9 = 0;
    char v6 = &v7;
    goto LABEL_20;
  }
}

uint64_t sub_1CCB8DEE0(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D160;
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v2 = *(void **)(a1 + 32);
    if (v2 != (void *)(a1 + 56)) {
      free(v2);
    }
    *(unsigned char *)(a1 + 88) = 0;
  }
  return a1;
}

void sub_1CCB8DF40(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D160;
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v2 = *(void **)(a1 + 32);
    if (v2 != (void *)(a1 + 56)) {
      free(v2);
    }
    *(unsigned char *)(a1 + 88) = 0;
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCB8DFC0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *__s1, size_t __n, void *__src, size_t __len, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, char a13, uint64_t a14)
{
  *(void *)a1 = &unk_1F262D1B0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  char v19 = (std::string *)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v20 = (void *)(a1 + 40);
  if (__src)
  {
    if (__len >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (__len >= 0x17)
    {
      size_t v23 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17) {
        size_t v23 = __len | 7;
      }
      size_t v24 = v23 + 1;
      uint64_t v20 = operator new(v23 + 1);
      *(void *)(a1 + 48) = __len;
      *(void *)(a1 + 56) = v24 | 0x8000000000000000;
      *(void *)(a1 + 40) = v20;
    }
    else
    {
      *(unsigned char *)(a1 + 63) = __len;
      if (!__len) {
        goto LABEL_11;
      }
    }
    memmove(v20, __src, __len);
LABEL_11:
    *((unsigned char *)v20 + __len) = 0;
    goto LABEL_12;
  }
  *uint64_t v20 = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
LABEL_12:
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  llvm::ModuleCacheEntry::computeCacheKey(__s1, __n, a3, a8, a9, a10, a11, (uint64_t)&__str, a12, a13, a14);
  if (v27)
  {
    std::string::operator=(v19, &__str);
    if (v27)
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
  }
  return a1;
}

char *sub_1CCB8E138@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[39] < 0) {
    return (char *)sub_1CB8BDF7C(a2, *((const void **)result + 2), *((void *)result + 3));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 1);
  *(void *)(a2 + 16) = *((void *)result + 4);
  return result;
}

void sub_1CCB8E164(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 39))
    {
      uint64_t v4 = a1 + 8;
      uint64_t v5 = **(void **)(a1 + 8);
      *(_OWORD *)uint64_t v43 = *(_OWORD *)(a1 + 16);
      uint64_t v44 = *(void *)(a1 + 32);
      goto LABEL_6;
    }
LABEL_23:
    uint64_t v16 = std::system_category();
    *(unsigned char *)(a2 + 16) |= 1u;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = v16;
    return;
  }
  unint64_t v6 = *(void *)(a1 + 24);
  if (!v6) {
    goto LABEL_23;
  }
  uint64_t v4 = a1 + 8;
  uint64_t v5 = **(void **)(a1 + 8);
  sub_1CB8BDF7C((uint64_t)v43, *(const void **)(a1 + 16), v6);
LABEL_6:
  *(_OWORD *)std::string __p = *(_OWORD *)v43;
  uint64_t v48 = v44;
  v43[0] = 0;
  v43[1] = 0;
  uint64_t v44 = 0;
  (*(void (**)(char **__return_ptr, uint64_t, void **))(*(void *)v5 + 24))(&v52, v5, __p);
  if (SHIBYTE(v48) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete(v43[0]);
  }
  if (v56)
  {
    uint64_t v17 = v52;
    long long v52 = 0;
    uint64_t v42 = v17;
    uint64_t v18 = llvm::errorToErrorCode(&v42);
    *(unsigned char *)(a2 + 16) |= 1u;
    *(void *)a2 = v18;
    *(void *)(a2 + 8) = v19;
    uint64_t v20 = v42;
    if (!v42) {
      goto LABEL_30;
    }
    goto LABEL_25;
  }
  if (!v55)
  {
    uint64_t v21 = std::system_category();
    *(unsigned char *)(a2 + 16) |= 1u;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = v21;
    goto LABEL_30;
  }
  if (!v53) {
    goto LABEL_29;
  }
  uint64_t v7 = v52;
  int v8 = 1;
  for (int i = -1060223855; ; int i = v10 + v8++)
  {
    uint64_t v10 = i & (v53 - 1);
    uint64_t v11 = *(void **)&v52[8 * v10];
    if (v11 != (void *)-8)
    {
      if (!v11) {
        goto LABEL_29;
      }
      if (*(_DWORD *)&v52[8 * v53 + 8 + 4 * v10] == -1060223855 && *v11 == 6)
      {
        std::string::size_type v12 = (char *)v11 + v54;
        int v13 = *(_DWORD *)v12;
        int v14 = *((unsigned __int16 *)v12 + 2);
        if (v13 == 1886680399 && v14 == 29813) {
          break;
        }
      }
    }
  }
  if (v10 == -1 || (uint64_t v22 = (int)v10, (int)v10 == (unint64_t)v53))
  {
LABEL_29:
    size_t v23 = std::generic_category();
    *(unsigned char *)(a2 + 16) |= 1u;
    *(void *)a2 = 40;
    *(void *)(a2 + 8) = v23;
    goto LABEL_30;
  }
  if (byte_1EBCEE3B0) {
    sub_1CCB8EC08((std::string *)(a1 + 72), (const std::string *)(*(void *)&v52[8 * (int)v10] + 8));
  }
  uint64_t v25 = *(void *)(*(void *)v4 + 8);
  uint64_t v26 = *(void *)&v7[8 * v22];
  if (*(char *)(v26 + 31) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v40, *(const void **)(v26 + 8), *(void *)(v26 + 16));
  }
  else
  {
    long long v27 = *(_OWORD *)(v26 + 8);
    uint64_t v41 = *(void *)(v26 + 24);
    *(_OWORD *)uint64_t v40 = v27;
  }
  if (*(char *)(a1 + 63) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v37, *(const void **)(a1 + 40), *(void *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)uint64_t v37 = *(_OWORD *)(a1 + 40);
    uint64_t v38 = *(void *)(a1 + 56);
  }
  char v39 = 1;
  *(_OWORD *)uint64_t v45 = *(_OWORD *)v40;
  uint64_t v46 = v41;
  v40[0] = 0;
  v40[1] = 0;
  uint64_t v41 = 0;
  *(_OWORD *)size_t v32 = *(_OWORD *)v37;
  uint64_t v33 = v38;
  v37[0] = 0;
  v37[1] = 0;
  uint64_t v38 = 0;
  char v34 = 1;
  (*(void (**)(void **__return_ptr, uint64_t, void **, void **))(*(void *)v25 + 24))(__p, v25, v45, v32);
  if (v34)
  {
    if (SHIBYTE(v33) < 0) {
      operator delete(v32[0]);
    }
    char v34 = 0;
  }
  if (SHIBYTE(v46) < 0) {
    operator delete(v45[0]);
  }
  if (v39)
  {
    if (SHIBYTE(v38) < 0) {
      operator delete(v37[0]);
    }
    char v39 = 0;
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[0]);
  }
  if (v51)
  {
    char v29 = (char *)__p[0];
    __p[0] = 0;
    int64_t v36 = v29;
    uint64_t v30 = llvm::errorToErrorCode(&v36);
    *(unsigned char *)(a2 + 16) |= 1u;
    *(void *)a2 = v30;
    *(void *)(a2 + 8) = v31;
    if (v36) {
      (*(void (**)(char *))(*(void *)v36 + 8))(v36);
    }
  }
  else if (LOBYTE(__p[0]))
  {
    uint64_t v28 = std::system_category();
    *(unsigned char *)(a2 + 16) |= 1u;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = v28;
  }
  else
  {
    *(unsigned char *)(a1 + 64) = 1;
    __int16 v35 = 260;
    v32[0] = (void *)(a1 + 40);
    sub_1CD096690((unsigned __int8 *)v32, (llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, a2);
  }
  if ((v51 & 1) == 0)
  {
    if (v50 && v49 < 0) {
      operator delete(__p[1]);
    }
    goto LABEL_30;
  }
  uint64_t v20 = (char *)__p[0];
  __p[0] = 0;
  if (v20) {
LABEL_25:
  }
    (*(void (**)(char *))(*(void *)v20 + 8))(v20);
LABEL_30:
  if (v56)
  {
    size_t v24 = v52;
    long long v52 = 0;
    if (v24) {
      (*(void (**)(char *))(*(void *)v24 + 8))(v24);
    }
  }
  else if (v55)
  {
    sub_1CCB7ABD0((uint64_t)&v52);
  }
}

void sub_1CCB8E648(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(void *)(a1 + 24)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 39))
  {
    return;
  }
  if (!*(unsigned char *)(a1 + 64))
  {
    char v3 = *(unsigned char *)(a1 + 63);
    if (v3 >= 0) {
      uint64_t v4 = (unsigned char *)(a1 + 40);
    }
    else {
      uint64_t v4 = *(unsigned char **)(a1 + 40);
    }
    if (v3 >= 0) {
      uint64_t v5 = v3 & 0x7F;
    }
    else {
      uint64_t v5 = *(void *)(a1 + 48);
    }
    llvm::ModuleCacheEntry::writeObject(a2, v4, v5, &v40);
  }
  *(unsigned char *)(a1 + 64) = 1;
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 8);
  if (*(char *)(a1 + 63) < 0)
  {
    sub_1CB8BDF7C((uint64_t)&v38, *(const void **)(a1 + 40), *(void *)(a1 + 48));
  }
  else
  {
    long long v38 = *(_OWORD *)(a1 + 40);
    uint64_t v39 = *(void *)(a1 + 56);
  }
  long long v35 = v38;
  uint64_t v36 = v39;
  long long v38 = 0uLL;
  uint64_t v39 = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t, long long *))(*(void *)v6 + 40))(&__str, v6, &v35);
  if (SHIBYTE(v36) < 0) {
    operator delete((void *)v35);
  }
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (v42)
  {
    std::string::size_type v16 = __str.__r_.__value_.__r.__words[0];
    __str.__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v37 = v16;
    uint64_t v17 = (uint64_t *)&v37;
    goto LABEL_54;
  }
  if (byte_1EBCEE3B0 && *(unsigned char *)(a1 + 96))
  {
    char v7 = *(unsigned char *)(a1 + 95);
    uint64_t v8 = v7 & 0x7F;
    if (v7 >= 0) {
      uint64_t v9 = v7 & 0x7F;
    }
    else {
      uint64_t v9 = *(void *)(a1 + 80);
    }
    std::string::size_type size = *((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x7F;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (v9 == size)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((*(unsigned char *)(a1 + 95) & 0x80) != 0)
      {
        if (memcmp(*(const void **)(a1 + 72), p_str, *(void *)(a1 + 80))) {
          goto LABEL_35;
        }
        goto LABEL_40;
      }
      if ((v7 & 0x7F) == 0) {
        goto LABEL_40;
      }
      std::string::size_type v12 = (unsigned __int8 *)(a1 + 72);
      while (*v12 == p_str->__r_.__value_.__s.__data_[0])
      {
        ++v12;
        p_str = (std::string *)((char *)p_str + 1);
        if (!--v8) {
          goto LABEL_40;
        }
      }
    }
LABEL_35:
    char v29 = "ThinLTO deterministic check failed: ";
    __int16 v30 = 259;
    __int16 v28 = 260;
    v27[0] = a1 + 72;
    sub_1CD3E3950((uint64_t *)&v29, v27, (uint64_t)v31);
    uint64_t v25 = " (expected) vs. ";
    __int16 v26 = 259;
    sub_1CD3E3950(v31, (uint64_t *)&v25, (uint64_t)v32);
    __int16 v24 = 260;
    size_t v23 = &__str;
    sub_1CD3E3950(v32, (uint64_t *)&v23, (uint64_t)&v33);
    uint64_t v21 = " (actual)";
    __int16 v22 = 259;
    sub_1CD3E3950((uint64_t *)&v33, (uint64_t *)&v21, (uint64_t)&v35);
    llvm::report_fatal_error((llvm *)&v35, (const llvm::Twine *)1);
  }
LABEL_40:
  long long v35 = 0uLL;
  uint64_t v36 = 0x2000000000;
  int v13 = sub_1CD5D600C((uint64_t)&v35, "Output", 6uLL);
  std::string::operator=((std::string *)(*v13 + 1), &__str);
  uint64_t v14 = **(void **)(a1 + 8);
  if (*(char *)(a1 + 39) < 0)
  {
    sub_1CB8BDF7C((uint64_t)__p, *(const void **)(a1 + 16), *(void *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 16);
    uint64_t v20 = *(void *)(a1 + 32);
  }
  long long v33 = *(_OWORD *)__p;
  uint64_t v34 = v20;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v20 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, long long *, long long *))(*(void *)v14 + 32))(v32, v14, &v33, &v35);
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (v32[0])
  {
    uint64_t v18 = v32[0];
    v32[0] = 0;
    uint64_t v17 = &v18;
LABEL_54:
    llvm::report_fatal_error(v17);
  }
  sub_1CCB7ABD0((uint64_t)&v35);
  if (v42)
  {
    std::string::size_type v15 = __str.__r_.__value_.__r.__words[0];
    __str.__r_.__value_.__r.__words[0] = 0;
    if (v15) {
      (*(void (**)(std::string::size_type))(*(void *)v15 + 8))(v15);
    }
  }
  else if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1CCB8EA2C(void *a1@<X8>)
{
  *a1 = 0;
}

char *sub_1CCB8EA34@<X0>(char *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (result[64])
  {
    __int16 v5 = 260;
    uint64_t v4 = result + 40;
    uint64_t result = sub_1CD096690((unsigned __int8 *)&v4, (llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v6);
    if (v7)
    {
      char v3 = 0;
      *a2 = 0;
    }
    else
    {
      *(void *)a2 = v6;
      char v3 = 1;
    }
    a2[8] = v3;
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

uint64_t sub_1CCB8EAF0(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D1B0;
  if (*(unsigned char *)(a1 + 96))
  {
    if (*(char *)(a1 + 95) < 0) {
      operator delete(*(void **)(a1 + 72));
    }
    *(unsigned char *)(a1 + 96) = 0;
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CCB8EB6C(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D1B0;
  if (*(unsigned char *)(a1 + 96))
  {
    if (*(char *)(a1 + 95) < 0) {
      operator delete(*(void **)(a1 + 72));
    }
    *(unsigned char *)(a1 + 96) = 0;
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x1D25D9CE0);
}

std::string *sub_1CCB8EC08(std::string *this, const std::string *a2)
{
  if (this[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_1CB8BDF7C((uint64_t)this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void *sub_1CCB8EC74(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    std::string::size_type v12 = 0;
LABEL_13:
    uint64_t v6 = sub_1CC674324(a1, (uint64_t)a2, a2, v12);
    *uint64_t v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = (37 * *a2) & (v3 - 1);
  uint64_t v6 = (void *)(*(void *)a1 + 16 * v5);
  uint64_t v7 = *v6;
  if (*a2 != *v6)
  {
    uint64_t v8 = 0;
    int v9 = 1;
    while (v7 != -1)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == -2;
      }
      if (v10) {
        uint64_t v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      uint64_t v6 = (void *)(*(void *)a1 + 16 * (v11 & v4));
      uint64_t v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v8) {
      std::string::size_type v12 = v8;
    }
    else {
      std::string::size_type v12 = v6;
    }
    goto LABEL_13;
  }
  return v6;
}

uint64_t sub_1CCB8ED30()
{
  return 2;
}

BOOL sub_1CCB8ED38(uint64_t **a1, unsigned __int8 *__s1, size_t __n, uint64_t a4)
{
  uint64_t v31 = a4;
  int v4 = *a1;
  uint64_t v5 = *((unsigned int *)*a1 + 2);
  uint64_t v29 = a4;
  if (v5)
  {
    int v8 = 0;
    if (__n)
    {
      size_t v9 = __n;
      BOOL v10 = __s1;
      do
      {
        int v11 = *v10++;
        int v8 = 33 * v8 + v11;
        --v9;
      }
      while (v9);
    }
    uint64_t v12 = *v4;
    uint64_t v13 = *v4 + 8 * v5 + 8;
    int v14 = 1;
    int v15 = v8;
    while (1)
    {
      uint64_t v16 = v15 & (v5 - 1);
      uint64_t v17 = *(void **)(v12 + 8 * v16);
      if (v17 != (void *)-8)
      {
        if (!v17) {
          goto LABEL_15;
        }
        if (*(_DWORD *)(v13 + 4 * v16) == v8
          && __n == *v17
          && (!__n || !memcmp(__s1, (char *)v17 + *((unsigned int *)v4 + 5), __n)))
        {
          break;
        }
      }
      int v15 = v14 + v16;
      ++v14;
    }
    if (v16 != -1 && (int)v16 != v5)
    {
      __int16 v26 = (uint64_t *)(*(void *)(v12 + 8 * (int)v16) + 8);
      uint64_t v32 = 0;
      if (sub_1CD4AD868(v26, &v31, &v32)) {
        return 1;
      }
      uint64_t v29 = v31;
    }
  }
LABEL_15:
  uint64_t v18 = a1[1];
  int v19 = *((_DWORD *)v18 + 4);
  if (!v19) {
    return 0;
  }
  uint64_t v20 = *(void *)(v29 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = *v18;
  int v22 = v19 - 1;
  unsigned int v23 = v22 & (37 * v20);
  uint64_t v24 = *(void *)(v21 + 8 * v23);
  if (v20 == v24) {
    return 1;
  }
  int v27 = 1;
  do
  {
    BOOL result = v24 != -1;
    if (v24 == -1) {
      break;
    }
    unsigned int v28 = v23 + v27++;
    unsigned int v23 = v28 & v22;
    uint64_t v24 = *(void *)(v21 + 8 * v23);
  }
  while (v20 != v24);
  return result;
}

BOOL sub_1CCB8EED8(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  uint64_t v5 = sub_1CC6AFC28(*a1, &v7);
  return (uint64_t *)(**a1 + 16 * *((unsigned int *)*a1 + 4)) == v5 || v5[1] == a3;
}

void sub_1CCB8EF40(char **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v5 = a1[1];
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(a1[1], 8 * a2);
      v5 += 8 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = v5 - *a1;
    unint64_t v8 = a2 + (v7 >> 3);
    if (v8 >> 61) {
      abort();
    }
    if ((v4 - v6) >> 2 > v8) {
      unint64_t v8 = (v4 - v6) >> 2;
    }
    if ((unint64_t)(v4 - v6) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    int v19 = a1 + 2;
    if (v9)
    {
      if (v9 >> 61) {
        sub_1CB833614();
      }
      BOOL v10 = (char *)operator new(8 * v9);
    }
    else
    {
      BOOL v10 = 0;
    }
    int v11 = &v10[8 * (v7 >> 3)];
    uint64_t v12 = &v10[8 * v9];
    uint64_t v18 = v12;
    bzero(v11, 8 * a2);
    uint64_t v13 = &v10[8 * a2 + v7];
    v17.i64[1] = (uint64_t)v13;
    if (v5 == v6)
    {
      int64x2_t v15 = vdupq_n_s64((unint64_t)v5);
    }
    else
    {
      do
      {
        uint64_t v14 = *((void *)v5 - 1);
        v5 -= 8;
        *(void *)uint64_t v5 = 0;
        *((void *)v11 - 1) = v14;
        v11 -= 8;
      }
      while (v5 != v6);
      int64x2_t v15 = *(int64x2_t *)a1;
      int v4 = a1[2];
      uint64_t v13 = (char *)v17.i64[1];
      uint64_t v12 = v18;
    }
    *a1 = v11;
    a1[1] = v13;
    int64x2_t v17 = v15;
    a1[2] = v12;
    uint64_t v18 = v4;
    uint64_t v16 = v15.i64[0];
    sub_1CCB8F094((uint64_t)&v16);
  }
}

uint64_t sub_1CCB8F094(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1CCB8F110()
{
  uint64_t v0 = sub_1CB883A14((uint64_t)llvm::ThreadCount, 0, 0);
  dword_1EBD0A1D0 = 0;
  qword_1EBD0A1D8 = (uint64_t)&unk_1F25F74C8;
  *(void *)&dword_1EBD0A1E0 = 0;
  llvm::ThreadCount[0] = (uint64_t)&unk_1F2643F68;
  qword_1EBD0A1E8 = (uint64_t)&unk_1F2643D20;
  qword_1EBD0A1F0 = (uint64_t)&unk_1F25F7480;
  qword_1EBD0A208 = (uint64_t)&qword_1EBD0A1F0;
  llvm::cl::Option::setArgStr(v0, "threads", 7uLL);
  dword_1EBD0A1D0 = 0;
  byte_1EBD0A1E4 = 1;
  dword_1EBD0A1E0 = 0;
  llvm::cl::Option::addArgument((llvm::cl::Option *)llvm::ThreadCount);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, llvm::ThreadCount, &dword_1CB82C000);
  v9.n128_u64[0] = (unint64_t)"Enable logging for thinLTO caching";
  v9.n128_u64[1] = 34;
  llvm::sys::Process::GetEnv("LLVM_THINLTO_CACHE_LOGGING", 0x1AuLL, &__p);
  int v1 = v6;
  unsigned __int8 v7 = v6;
  unint64_t v8 = (char *)&v7;
  int v4 = 1;
  sub_1CD4130FC((llvm::cl::Option *)&unk_1EBCEE270, "thinlto-cache-logging", &v9, &v8, &v4);
  if (v1 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEE270, &dword_1CB82C000);
  v9.n128_u64[0] = (unint64_t)"Enable deterministic check for thinLTO caching";
  v9.n128_u64[1] = 46;
  llvm::sys::Process::GetEnv("LLVM_CACHE_CHECK_REPRODUCIBLE_CACHING_ISSUES", 0x2CuLL, &__p);
  int v2 = v6;
  unsigned __int8 v7 = v6;
  unint64_t v8 = (char *)&v7;
  int v4 = 1;
  sub_1CD4130FC((llvm::cl::Option *)&unk_1EBCEE330, "thinlto-deterministic-check", &v9, &v8, &v4);
  if (v2 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEE330, &dword_1CB82C000);
}

void llvm::ThinLTOCodegenManager::createInvocation(uint64_t a1, uint64_t a2, void *a3, size_t a4, uint64_t a5, void *a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  llvm::ClangThinLTOInvocation::ClangThinLTOInvocation((uint64_t)v11, a2, a3, a4, a5);
  unint64_t v8 = (void *)a6[3];
  if (v8)
  {
    if (v8 == a6)
    {
      BOOL v10 = v9;
      (*(void (**)(void *, void *))(*a6 + 24))(a6, v9);
    }
    else
    {
      BOOL v10 = (void *)(*(uint64_t (**)(void *))(*v8 + 16))(v8);
    }
  }
  else
  {
    BOOL v10 = 0;
  }
  (*(void (**)(uint64_t, unsigned char *, void *))(*(void *)a1 + 48))(a1, v11, v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  if (__p)
  {
    int64x2_t v17 = __p;
    operator delete(__p);
  }
  if (v14 != &v15) {
    free(v14);
  }
  if (v12 != &v13) {
    free(v12);
  }
}

void llvm::LocalProcessCodegenManager::materializeModule(llvm::LocalProcessCodegenManager *this, llvm::lto::InputFile *a2)
{
  v27[128] = *MEMORY[0x1E4F143B8];
  __src = v27;
  __leuint64_t n = xmmword_1CFB1BC20;
  uint64_t v3 = llvm::sys::path::stem(*(void *)(*(void *)a2 + 16), *(void *)(*(void *)a2 + 24), 0);
  LOWORD(v23) = 261;
  v22[0] = v3;
  v22[1] = v4;
  unint64_t v24 = llvm::sys::fs::createTemporaryFile(v22, (long long *)"bc", 2, &__src, 0);
  if (v24) {
    llvm::report_fatal_error((llvm *)"Could not create temporary file to materialize module", (const llvm::Twine *)1);
  }
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v22, __src, __len, (uint64_t)&v24, 0);
  if (v24)
  {
    int64x2_t v17 = "Failed to open ";
    __int16 v18 = 259;
    __int16 v16 = 261;
    v15[0] = (uint64_t)__src;
    v15[1] = __len;
    sub_1CD3E3950((uint64_t *)&v17, v15, (uint64_t)v19);
    uint64_t v13 = " to save module bitcode\n";
    __int16 v14 = 259;
    sub_1CD3E3950(v19, (uint64_t *)&v13, (uint64_t)&__dst);
    llvm::report_fatal_error((llvm *)&__dst, (const llvm::Twine *)1);
  }
  uint64_t v5 = (const void *)*((void *)a2 + 24);
  unint64_t v6 = *((void *)a2 + 25);
  if (v6 <= v22[3] - (uint64_t)v23)
  {
    if (v6)
    {
      memcpy(v23, v5, *((void *)a2 + 25));
      v23 += v6;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v22, (const char *)v5, *((void *)a2 + 25));
  }
  unsigned __int8 v7 = __src;
  if (!__src)
  {
    long long __dst = 0uLL;
    unint64_t v21 = 0;
    goto LABEL_18;
  }
  size_t v8 = __len;
  if ((unint64_t)__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if ((unint64_t)__len >= 0x17)
  {
    uint64_t v10 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((unint64_t)__len | 7) != 0x17) {
      uint64_t v10 = __len | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (long long *)operator new(v10 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v21 = v11 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v21) = __len;
    p_dst = &__dst;
    if (!(void)__len) {
      goto LABEL_17;
    }
  }
  memmove(p_dst, v7, v8);
LABEL_17:
  *((unsigned char *)p_dst + v8) = 0;
LABEL_18:
  uint64_t v12 = (void **)((char *)a2 + 224);
  if (*((char *)a2 + 247) < 0) {
    operator delete(*v12);
  }
  *(_OWORD *)uint64_t v12 = __dst;
  *((void *)a2 + 30) = v21;
  llvm::sys::RemoveFileOnSignal((std::string::value_type *)__src, __len);
}

void llvm::LocalProcessCodegenManager::execute(uint64_t a1, void *a2, uint64_t a3)
{
  v49[128] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2[1];
  uint64_t v6 = *(void *)(*a2 + 224);
  char v7 = *(unsigned char *)(*a2 + 247);
  if (v7 >= 0) {
    uint64_t v6 = *a2 + 224;
  }
  uint64_t v29 = v6;
  uint64_t v8 = *(void *)(*a2 + 232);
  if (v7 >= 0) {
    uint64_t v8 = v7 & 0x7F;
  }
  uint64_t v28 = v8;
  uint64_t v9 = a2[2];
  v39[0] = "-fthinlto-index=";
  v39[2] = v5;
  void v39[3] = v9;
  __int16 v40 = 1283;
  char v47 = v49;
  long long v48 = xmmword_1CFB1BC20;
  llvm::Twine::toVector((uint64_t)v39, (uint64_t)&v47);
  __int16 v26 = v47;
  uint64_t v27 = v48;
  uint64_t v10 = *(unsigned int *)(a1 + 416);
  v37[0] = "-O";
  uint64_t v37[2] = v10;
  __int16 v38 = 2307;
  uint64_t v44 = &v46;
  long long v45 = xmmword_1CD96EEC0;
  uint64_t v11 = llvm::Twine::toVector((uint64_t)v37, (uint64_t)&v44);
  uint64_t v12 = v44;
  uint64_t v13 = v45;
  uint64_t v41 = v43;
  long long v42 = xmmword_1CDC7F9D0;
  switch(*(_DWORD *)(a1 + 408))
  {
    case 0:
      qmemcpy(v43, "static", 6);
      uint64_t v14 = 6;
      goto LABEL_13;
    case 1:
      qmemcpy(v43, "pic", 3);
      uint64_t v14 = 3;
      goto LABEL_13;
    case 2:
      qmemcpy(v43, "dynamic-no-pic", 14);
      uint64_t v14 = 14;
      goto LABEL_13;
    case 3:
      int v15 = 1768976242;
      goto LABEL_11;
    case 4:
      int v15 = 1768978290;
LABEL_11:
      LODWORD(v43[0]) = v15;
      uint64_t v14 = 4;
      goto LABEL_13;
    case 5:
      LOBYTE(v43[1]) = 105;
      v43[0] = *(void *)"ropi-rwpi";
      uint64_t v14 = 9;
LABEL_13:
      *(void *)&long long v42 = v14;
      break;
    default:
      break;
  }
  ExecutablePath = llvm::LocalProcessCodegenManager::getExecutablePath(v11);
  std::string::size_type v18 = v17;
  int v19 = v41;
  uint64_t v20 = v42;
  uint64_t v21 = a2[132];
  uint64_t v22 = a2[133];
  unsigned int v23 = operator new(0xD0uLL);
  *unsigned int v23 = ExecutablePath;
  v23[1] = v18;
  void v23[2] = v12;
  void v23[3] = v13;
  void v23[4] = "-x";
  v23[5] = 2;
  v23[6] = "ir";
  v23[7] = 2;
  v23[8] = v29;
  v23[9] = v28;
  v23[10] = "-c";
  v23[11] = 2;
  v23[12] = "-Xclang";
  v23[13] = 7;
  v23[14] = "-mrelocation-model";
  v23[15] = 18;
  v23[16] = "-Xclang";
  v23[17] = 7;
  v23[18] = v19;
  v23[19] = v20;
  v23[20] = v26;
  v23[21] = v27;
  v23[22] = "-o";
  v23[23] = 2;
  v23[24] = v21;
  v23[25] = v22;
  LOBYTE(v35) = 0;
  char v36 = 0;
  if (llvm::sys::ExecuteAndWait(ExecutablePath, v18, (uint64_t)v23, 13, &v35, 0, 0, 0, 0, 0, 0, 0))
  {
    __int16 v33 = 1283;
    v32[0] = (uint64_t)"Clang Invocation failed for Input file: ";
    uint64_t v32[2] = v29;
    v32[3] = v28;
    __int16 v30 = "\n";
    __int16 v31 = 259;
    sub_1CD3E3950(v32, (uint64_t *)&v30, (uint64_t)v34);
    llvm::report_fatal_error((llvm *)v34, (const llvm::Twine *)1);
  }
  uint64_t v24 = *(void *)(a3 + 24);
  if (!v24) {
    sub_1CB920400();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v24 + 48))(v24, a2);
  operator delete(v23);
  if (v41 != v43) {
    free(v41);
  }
  if (v44 != &v46) {
    free(v44);
  }
  if (v47 != v49) {
    free(v47);
  }
}

uint64_t *llvm::LocalProcessCodegenManager::getExecutablePath(llvm::LocalProcessCodegenManager *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  char v1 = byte_1EA61F00F;
  if (byte_1EA61F00F >= 0) {
    uint64_t v2 = byte_1EA61F00F & 0x7F;
  }
  else {
    uint64_t v2 = qword_1EA61F000;
  }
  if (!v2)
  {
    llvm::sys::findProgramByName("clang", 5uLL, 0, 0, &__str);
    if (v5) {
      llvm::report_fatal_error((llvm *)"Could not find clang executable!", (const llvm::Twine *)1);
    }
    std::string::operator=((std::string *)&llvm::LocalProcessCodegenManager::ExecutablePath, &__str);
    if ((v5 & 1) == 0 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    char v1 = byte_1EA61F00F;
  }
  if (v1 >= 0) {
    return &llvm::LocalProcessCodegenManager::ExecutablePath;
  }
  else {
    return (uint64_t *)llvm::LocalProcessCodegenManager::ExecutablePath;
  }
}

uint64_t llvm::ClangThinLTOInvocation::ClangThinLTOInvocation(uint64_t a1, uint64_t a2, void *__src, size_t __n, uint64_t a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a1 + 32;
  *(_OWORD *)(a1 + 16) = xmmword_1CFB1BC20;
  if (__n >= 0x401) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  uint64_t v9 = 0;
  if (__n)
  {
    memcpy(*(void **)(a1 + 8), __src, __n);
    uint64_t v9 = *(void *)(a1 + 16);
  }
  *(void *)(a1 + 16) = v9 + __n;
  *(void *)(a1 + 1056) = a1 + 1080;
  *(void *)(a1 + 1064) = 0;
  *(void *)(a1 + 1072) = 1024;
  *(void *)(a1 + 2104) = 0;
  *(void *)(a1 + 2120) = 0;
  *(void *)(a1 + 2112) = 0;
  *(_OWORD *)(a1 + 2104) = *(_OWORD *)a5;
  *(void *)(a1 + 2120) = *(void *)(a5 + 16);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  uint64_t v10 = llvm::sys::path::stem(*(void *)(*(void *)a2 + 16), *(void *)(*(void *)a2 + 24), 0);
  __int16 v14 = 261;
  v13[0] = v10;
  v13[1] = v11;
  if (llvm::sys::fs::createTemporaryFile(v13, (long long *)"thinlto.o", 9, (void *)(a1 + 1056), 0)) {
    llvm::report_fatal_error((llvm *)"Could not create temporary file to store thinlto codegen output", (const llvm::Twine *)1);
  }
  return a1;
}

void llvm::ThinLTOOutOfProcessCodeGenerator::run(llvm::ThinLTOOutOfProcessCodeGenerator *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  (*(void (**)(void, char *))(**((void **)this + 93) + 16))(*((void *)this + 93), (char *)this + 8);
  if (*((char *)this + 727) < 0)
  {
    if (*((void *)this + 89))
    {
LABEL_3:
      __int16 v19 = 260;
      std::string::size_type v18 = (void *)((char *)this + 704);
      llvm::sys::fs::create_directories(&v18, 1, 504);
      LOBYTE(v10) = 0;
      __int16 v19 = 260;
      std::string::size_type v18 = (void *)((char *)this + 704);
      llvm::sys::fs::is_directory((llvm::sys::fs *)&v18, (const llvm::Twine *)&v10, v2);
      if (!(_BYTE)v10)
      {
        __int16 v16 = "Unexistent dir: '";
        __int16 v17 = 259;
        __int16 v15 = 260;
        uint64_t v14 = (uint64_t)this + 704;
        sub_1CD3E3950((uint64_t *)&v16, &v14, (uint64_t)v20);
        uint64_t v12 = "'";
        __int16 v13 = 259;
        sub_1CD3E3950(v20, (uint64_t *)&v12, (uint64_t)&v18);
        llvm::report_fatal_error((llvm *)&v18, (const llvm::Twine *)1);
      }
      sub_1CD673544((int64x2_t *)this + 28, (uint64_t)(*((void *)this + 60) - *((void *)this + 59)) >> 3);
LABEL_7:
      if (!*((unsigned char *)this + 729))
      {
        uint64_t v3 = (uint64_t *)*((void *)this + 59);
        uint64_t v4 = (uint64_t *)*((void *)this + 60);
        while (v3 != v4)
        {
          uint64_t v5 = *v3++;
          (*(void (**)(void, uint64_t))(**((void **)this + 93) + 40))(*((void *)this + 93), v5);
        }
        (*(void (**)(void))(**((void **)this + 93) + 24))(*((void *)this + 93));
        llvm::ThinLTOCodeGenerator::linkCombinedIndex(this);
      }
      llvm::ThreadPool::ThreadPool((uint64_t)&v18, 0x100000000);
      uint64_t v6 = *((void *)this + 59);
      uint64_t v7 = *((void *)this + 60);
      if (v6 != v7)
      {
        int v8 = 0;
        do
        {
          uint64_t v9 = operator new(0x20uLL);
          *uint64_t v9 = &unk_1F262D270;
          v9[1] = this;
          _OWORD v9[2] = v6;
          *((_DWORD *)v9 + 6) = v8;
          uint64_t v21 = v9;
          sub_1CC3DA82C((uint64_t)&v18, (uint64_t)v20, 0, (std::future<void> *)&v11);
          if (v21 == v20)
          {
            (*(void (**)(uint64_t *))(v20[0] + 32))(v20);
          }
          else if (v21)
          {
            (*(void (**)(void))(*v21 + 40))();
          }
          std::shared_future<void>::~shared_future(&v11);
          v6 += 8;
          ++v8;
        }
        while (v6 != v7);
      }
      llvm::ThreadPool::~ThreadPool((llvm::ThreadPool *)&v18);
    }
  }
  else if (*((unsigned char *)this + 727))
  {
    goto LABEL_3;
  }
  sub_1CCB8A888((uint64_t)this + 424, (uint64_t)(*((void *)this + 60) - *((void *)this + 59)) >> 3);
  goto LABEL_7;
}

uint64_t sub_1CCB906EC(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D200;
  std::mutex::~mutex((std::mutex *)(a1 + 752));
  uint64_t v2 = *(void *)(a1 + 744);
  *(void *)(a1 + 744) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  return sub_1CCB8BD48(a1);
}

void sub_1CCB90774(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D200;
  std::mutex::~mutex((std::mutex *)(a1 + 752));
  uint64_t v2 = *(void *)(a1 + 744);
  *(void *)(a1 + 744) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1CCB8BD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CCB90810(void *a1)
{
  *a1 = &unk_1F262D348;
  sub_1CCB91A64((uint64_t)(a1 + 1));
  return a1;
}

void sub_1CCB90854(void *a1)
{
  *a1 = &unk_1F262D348;
  sub_1CCB91A64((uint64_t)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCB908B8(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)a2);
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 48) = v4;
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 48));
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 72));
  uint64_t result = sub_1CCB80504(a1 + 104, a2 + 96);
  int v6 = *(_DWORD *)(a2 + 408);
  *(void *)(a1 + 408) = *(void *)(a2 + 400);
  *(_DWORD *)(a1 + 416) = v6;
  return result;
}

void sub_1CCB90934()
{
}

__n128 sub_1CCB90948(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F262D270;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CCB9099C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F262D270;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CCB909D4()
{
  llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)&v0);
}

void sub_1CCB90B90()
{
}

__n128 sub_1CCB90BA4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v2 = &unk_1F262D2B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_1CCB90C08(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F262D2B8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CCB90C50(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 64);
  long long v4 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v5 = *v4;
  int v8 = *(unsigned __int8 **)(v5 + 224);
  uint64_t v6 = v5 + 224;
  uint64_t v7 = v8;
  char v9 = *(unsigned char *)(v6 + 23);
  uint64_t v10 = *(void *)(a1 + 32);
  if (v9 >= 0) {
    std::shared_future<void> v11 = (unsigned __int8 *)v6;
  }
  else {
    std::shared_future<void> v11 = v7;
  }
  size_t v12 = *(void *)(v6 + 8);
  if (v9 >= 0) {
    size_t v13 = v9 & 0x7F;
  }
  else {
    size_t v13 = v12;
  }
  sub_1CD663184(v3, v11, v13);
  sub_1CD69BF44(*(void *)(a1 + 24), v11, v13);
  char v14 = *(unsigned char *)(v10 + 727);
  int v15 = v14;
  if (v14 >= 0) {
    __int16 v16 = (const void *)(v10 + 704);
  }
  else {
    __int16 v16 = *(const void **)(v10 + 704);
  }
  size_t v17 = v14 & 0x7F;
  if (v15 >= 0) {
    size_t v18 = v17;
  }
  else {
    size_t v18 = *(void *)(v10 + 712);
  }
  llvm::ThinLTOCodeGenerator::computeThinLTOOutputPath(v2, v16, v18, (llvm::Triple *)(v10 + 8), &v19);
  sub_1CC915D88(*(llvm::StringMapImpl **)(a1 + 48), v11, v13);
  sub_1CCB72800(*(llvm::StringMapImpl **)(a1 + 56), v11, v13);
  llvm::ThinLTOCodeGenerator::createModuleCacheEntry(v10);
}

void sub_1CCB91538()
{
}

__n128 sub_1CCB9154C(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x20uLL);
  *(void *)unsigned int v2 = &unk_1F262D300;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CCB915A0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F262D300;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CCB915D8(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 16);
  (*(void (**)(void, void, void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), *(void *)(a2 + 1056), *(void *)(a2 + 1064));
  char v5 = *(unsigned char *)(v4 + 727);
  if (v5 < 0)
  {
    if (*(void *)(v4 + 712))
    {
LABEL_3:
      if (v5 >= 0) {
        uint64_t v6 = (const void *)(v4 + 704);
      }
      else {
        uint64_t v6 = *(const void **)(v4 + 704);
      }
      if (v5 >= 0) {
        size_t v7 = *(unsigned __int8 *)(v4 + 727);
      }
      else {
        size_t v7 = *(void *)(v4 + 712);
      }
      __src = &v51;
      __leuint64_t n = xmmword_1CFB1BC20;
      if (v7 >= 0x401) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      uint64_t v8 = 0;
      if (v7)
      {
        memcpy(&v51, v6, v7);
        uint64_t v8 = __len;
      }
      *(void *)&__leuint64_t n = v8 + v7;
      *(void *)&long long __dst = *(unsigned int *)(a1 + 24);
      uint64_t v43 = "thinlto.bc";
      __int16 v44 = 777;
      __int16 v41 = 257;
      __int16 v39 = 257;
      __int16 v37 = 257;
      llvm::sys::path::append(&__src, 0, (const char **)&__dst, v40, (uint64_t)v38, (uint64_t)v36);
      __int16 v44 = 261;
      uint64_t v9 = *(void *)(a2 + 1064);
      *(void *)&long long __dst = *(void *)(a2 + 1056);
      *((void *)&__dst + 1) = v9;
      __int16 v41 = 261;
      v40[0] = __src;
      v40[1] = (void *)__len;
      *(void *)&v45.__val_ = llvm::sys::fs::rename((llvm::sys::fs *)&__dst, (const llvm::Twine *)v40, v10);
      v45.__cat_ = v11;
      if (!v45.__val_)
      {
        size_t v12 = __src;
        if (!__src)
        {
          long long __dst = 0uLL;
          uint64_t v43 = 0;
LABEL_31:
          uint64_t v23 = *(void *)(v4 + 448) + 24 * *(int *)(a1 + 24);
          if (*(char *)(v23 + 23) < 0) {
            operator delete(*(void **)v23);
          }
          *(_OWORD *)uint64_t v23 = __dst;
          *(void *)(v23 + 16) = v43;
          if (__src != &v51) {
            free(__src);
          }
          return;
        }
        size_t v13 = __len;
        if ((unint64_t)__len >= 0x7FFFFFFFFFFFFFF8) {
          abort();
        }
        if ((unint64_t)__len >= 0x17)
        {
          uint64_t v21 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
          if (((unint64_t)__len | 7) != 0x17) {
            uint64_t v21 = __len | 7;
          }
          uint64_t v22 = v21 + 1;
          p_dst = (long long *)operator new(v21 + 1);
          *((void *)&__dst + 1) = v13;
          uint64_t v43 = (const char *)(v22 | 0x8000000000000000);
          *(void *)&long long __dst = p_dst;
        }
        else
        {
          HIBYTE(v43) = __len;
          p_dst = &__dst;
          if (!(void)__len) {
            goto LABEL_30;
          }
        }
        memmove(p_dst, v12, v13);
LABEL_30:
        *((unsigned char *)p_dst + v13) = 0;
        goto LABEL_31;
      }
      v34[0] = (uint64_t)"Could not write output to output file directory for";
      __int16 v35 = 259;
      __int16 v33 = 261;
      uint64_t v26 = *(void *)(a2 + 1064);
      v32[0] = *(void *)(a2 + 1056);
      v32[1] = v26;
      sub_1CD3E3950(v34, v32, (uint64_t)v36);
      v30[0] = (uint64_t)": ";
      __int16 v31 = 259;
      sub_1CD3E3950(v36, v30, (uint64_t)v38);
      std::error_code::message(&v29, &v45);
      __int16 v28 = 260;
      v27[0] = (uint64_t)&v29;
      sub_1CD3E3950(v38, v27, (uint64_t)v40);
      *(void *)&v46.__val_ = "\n";
      __int16 v48 = 259;
      sub_1CD3E3950((uint64_t *)v40, (uint64_t *)&v46.__val_, (uint64_t)&__dst);
      p_src = (void **)&__dst;
LABEL_38:
      llvm::report_fatal_error((llvm *)p_src, (const llvm::Twine *)1);
    }
  }
  else if (*(unsigned char *)(v4 + 727))
  {
    goto LABEL_3;
  }
  __int16 v52 = 261;
  uint64_t v15 = *(void *)(a2 + 1064);
  __src = *(void **)(a2 + 1056);
  *(void *)&__leuint64_t n = v15;
  sub_1CD096690((unsigned __int8 *)&__src, (llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v46);
  if (v47)
  {
    uint64_t v16 = *(void *)&v46.__val_;
    std::error_code v45 = v46;
    if (v46.__val_)
    {
      v36[0] = (uint64_t)"Could not load output memory buffer for ";
      __int16 v37 = 259;
      __int16 v35 = 261;
      uint64_t v24 = *(void *)(a2 + 1064);
      v34[0] = *(void *)(a2 + 1056);
      v34[1] = v24;
      sub_1CD3E3950(v36, v34, (uint64_t)v38);
      v32[0] = (uint64_t)"': ";
      __int16 v33 = 259;
      sub_1CD3E3950(v38, v32, (uint64_t)v40);
      std::error_code::message(&v29, &v45);
      __int16 v31 = 260;
      v30[0] = (uint64_t)&v29;
      sub_1CD3E3950((uint64_t *)v40, v30, (uint64_t)&__dst);
      v27[0] = (uint64_t)"\n";
      __int16 v28 = 259;
      sub_1CD3E3950((uint64_t *)&__dst, v27, (uint64_t)&__src);
      p_src = &__src;
      goto LABEL_38;
    }
  }
  else
  {
    std::system_category();
    uint64_t v16 = *(void *)&v46.__val_;
  }
  uint64_t v17 = *(int *)(a1 + 24);
  uint64_t v18 = *(void *)(v4 + 424);
  uint64_t v19 = *(void *)(v18 + 8 * v17);
  *(void *)(v18 + 8 * v17) = v16;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  __int16 v52 = 261;
  uint64_t v20 = *(void *)(a2 + 1064);
  __src = *(void **)(a2 + 1056);
  *(void *)&__leuint64_t n = v20;
  llvm::sys::fs::remove((llvm::sys::fs *)&__src, (const llvm::Twine *)1);
}

uint64_t sub_1CCB91A64(uint64_t a1)
{
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  uint64_t v4 = (void **)(a1 + 352);
  sub_1CB8338B8(&v4);
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*(void **)(a1 + 280));
  }
  if (*(char *)(a1 + 279) < 0) {
    operator delete(*(void **)(a1 + 256));
  }
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 144);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL sub_1CCB91B9C(uint64_t **a1, unsigned __int8 *__s1, size_t __n, uint64_t a4)
{
  uint64_t v31 = a4;
  uint64_t v4 = *a1;
  uint64_t v5 = *((unsigned int *)*a1 + 2);
  uint64_t v29 = a4;
  if (v5)
  {
    int v8 = 0;
    if (__n)
    {
      size_t v9 = __n;
      uint64_t v10 = __s1;
      do
      {
        int v11 = *v10++;
        int v8 = 33 * v8 + v11;
        --v9;
      }
      while (v9);
    }
    uint64_t v12 = *v4;
    uint64_t v13 = *v4 + 8 * v5 + 8;
    int v14 = 1;
    int v15 = v8;
    while (1)
    {
      uint64_t v16 = v15 & (v5 - 1);
      uint64_t v17 = *(void **)(v12 + 8 * v16);
      if (v17 != (void *)-8)
      {
        if (!v17) {
          goto LABEL_15;
        }
        if (*(_DWORD *)(v13 + 4 * v16) == v8
          && __n == *v17
          && (!__n || !memcmp(__s1, (char *)v17 + *((unsigned int *)v4 + 5), __n)))
        {
          break;
        }
      }
      int v15 = v14 + v16;
      ++v14;
    }
    if (v16 != -1 && (int)v16 != v5)
    {
      uint64_t v26 = (uint64_t *)(*(void *)(v12 + 8 * (int)v16) + 8);
      uint64_t v32 = 0;
      if (sub_1CD4AD868(v26, &v31, &v32)) {
        return 1;
      }
      uint64_t v29 = v31;
    }
  }
LABEL_15:
  uint64_t v18 = a1[1];
  int v19 = *((_DWORD *)v18 + 4);
  if (!v19) {
    return 0;
  }
  uint64_t v20 = *(void *)(v29 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = *v18;
  int v22 = v19 - 1;
  unsigned int v23 = v22 & (37 * v20);
  uint64_t v24 = *(void *)(v21 + 8 * v23);
  if (v20 == v24) {
    return 1;
  }
  int v27 = 1;
  do
  {
    BOOL result = v24 != -1;
    if (v24 == -1) {
      break;
    }
    unsigned int v28 = v23 + v27++;
    unsigned int v23 = v28 & v22;
    uint64_t v24 = *(void *)(v21 + 8 * v23);
  }
  while (v20 != v24);
  return result;
}

BOOL sub_1CCB91D3C(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  uint64_t v5 = sub_1CC6AFC28(*a1, &v7);
  return (uint64_t *)(**a1 + 16 * *((unsigned int *)*a1 + 4)) == v5 || v5[1] == a3;
}

int *sub_1CCB91DA4(int *result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int v11 = result;
  while (2)
  {
    uint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          uint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v45 = *(a2 - 1);
                uint64_t v46 = *v12;
                if (*(void *)(**(void **)(*(void *)(*(void *)a3 + 472) + 8 * v45) + 8) > *(void *)(**(void **)(*(void *)(*(void *)a3 + 472) + 8 * v46) + 8))
                {
                  *uint64_t v12 = v45;
                  *(a2 - 1) = v46;
                }
                break;
              case 3:
                uint64_t v47 = *(void *)(*(void *)a3 + 472);
                BOOL result = sub_1CCB926BC(v12, v12 + 1, a2 - 1, v47);
                break;
              case 4:
                BOOL result = sub_1CCB92A0C(v12, v12 + 1, v12 + 2, a2 - 1, a3);
                break;
              case 5:
                __int16 v48 = v12 + 2;
                char v49 = v12 + 3;
                BOOL result = sub_1CCB92A0C(v12, v12 + 1, v12 + 2, v12 + 3, a3);
                uint64_t v50 = *(a2 - 1);
                uint64_t v51 = v12[3];
                uint64_t v52 = *(void *)(*(void *)a3 + 472);
                if (*(void *)(**(void **)(v52 + 8 * v50) + 8) > *(void *)(**(void **)(v52 + 8 * v51) + 8))
                {
                  int *v49 = v50;
                  *(a2 - 1) = v51;
                  uint64_t v53 = *v49;
                  uint64_t v54 = *v48;
                  unint64_t v55 = *(void *)(**(void **)(v52 + 8 * v53) + 8);
                  if (v55 > *(void *)(**(void **)(v52 + 8 * v54) + 8))
                  {
                    *__int16 v48 = v53;
                    int *v49 = v54;
                    uint64_t v56 = v12[1];
                    if (v55 > *(void *)(**(void **)(v52 + 8 * v56) + 8))
                    {
                      v12[1] = v53;
                      v12[2] = v56;
                      uint64_t v57 = *v12;
                      if (v55 > *(void *)(**(void **)(v52 + 8 * v57) + 8))
                      {
                        *uint64_t v12 = v53;
                        v12[1] = v57;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 95)
          {
            size_t v58 = v12 + 1;
            BOOL v60 = v12 == a2 || v58 == a2;
            if (a5)
            {
              if (!v60)
              {
                uint64_t v61 = 0;
                uint64_t v62 = *(void *)(*(void *)a3 + 472);
                unint64_t v63 = v12;
                do
                {
                  uint64_t v65 = *v63;
                  uint64_t v64 = v63[1];
                  unint64_t v63 = v58;
                  unint64_t v66 = *(void *)(**(void **)(v62 + 8 * v64) + 8);
                  if (v66 > *(void *)(**(void **)(v62 + 8 * v65) + 8))
                  {
                    uint64_t v67 = v61;
                    while (1)
                    {
                      *(int *)((char *)v12 + v67 + 4) = v65;
                      if (!v67) {
                        break;
                      }
                      uint64_t v65 = *(int *)((char *)v12 + v67 - 4);
                      v67 -= 4;
                      if (v66 <= *(void *)(**(void **)(v62 + 8 * v65) + 8))
                      {
                        int v68 = (int *)((char *)v12 + v67 + 4);
                        goto LABEL_85;
                      }
                    }
                    int v68 = v12;
LABEL_85:
                    *int v68 = v64;
                  }
                  size_t v58 = v63 + 1;
                  v61 += 4;
                }
                while (v63 + 1 != a2);
              }
            }
            else if (!v60)
            {
              uint64_t v99 = *(void *)(*(void *)a3 + 472);
              do
              {
                uint64_t v101 = *v11;
                uint64_t v100 = v11[1];
                int v11 = v58;
                unint64_t v102 = *(void *)(**(void **)(v99 + 8 * v100) + 8);
                if (v102 > *(void *)(**(void **)(v99 + 8 * v101) + 8))
                {
                  do
                  {
                    *size_t v58 = v101;
                    uint64_t v101 = *(v58 - 2);
                    --v58;
                  }
                  while (v102 > *(void *)(**(void **)(v99 + 8 * v101) + 8));
                  *size_t v58 = v100;
                }
                size_t v58 = v11 + 1;
              }
              while (v11 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v69 = (unint64_t)(v14 - 2) >> 1;
              BOOL result = *(int **)a3;
              int64_t v70 = v69;
              do
              {
                int64_t v71 = v70;
                uint64_t v72 = result;
                if (v69 >= v70)
                {
                  uint64_t v73 = (2 * v70) | 1;
                  std::string v74 = &v12[v73];
                  int v75 = *v74;
                  if (2 * v71 + 2 < v14)
                  {
                    uint64_t v76 = *((void *)result + 59);
                    if (*(void *)(**(void **)(v76 + 8 * v75) + 8) > *(void *)(**(void **)(v76 + 8 * v74[1])
                                                                                       + 8))
                    {
                      int v75 = v74[1];
                      ++v74;
                      uint64_t v73 = 2 * v71 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v76 = *((void *)result + 59);
                  }
                  int v77 = &v12[v71];
                  uint64_t v78 = *v77;
                  unint64_t v79 = *(void *)(**(void **)(v76 + 8 * v78) + 8);
                  if (*(void *)(**(void **)(v76 + 8 * v75) + 8) <= v79)
                  {
                    do
                    {
                      char v80 = v74;
                      int *v77 = v75;
                      if (v69 < v73) {
                        break;
                      }
                      uint64_t v81 = (2 * v73) | 1;
                      std::string v74 = &v12[v81];
                      uint64_t v73 = 2 * v73 + 2;
                      int v75 = *v74;
                      if (v73 < v14)
                      {
                        if (*(void *)(**(void **)(v76 + 8 * v75) + 8) <= *(void *)(**(void **)(v76 + 8 * v74[1])
                                                                                            + 8))
                        {
                          uint64_t v73 = v81;
                        }
                        else
                        {
                          int v75 = v74[1];
                          ++v74;
                        }
                      }
                      else
                      {
                        uint64_t v73 = v81;
                      }
                      int v77 = v80;
                    }
                    while (*(void *)(**(void **)(v76 + 8 * v75) + 8) <= v79);
                    *char v80 = v78;
                    BOOL result = *(int **)a3;
                  }
                }
                int64_t v70 = v71 - 1;
              }
              while (v71);
              do
              {
                uint64_t v82 = 0;
                int v83 = *v12;
                unsigned int v84 = v12;
                do
                {
                  unsigned int v85 = &v84[v82];
                  int v88 = v85[1];
                  int v86 = v85 + 1;
                  int v87 = v88;
                  uint64_t v89 = (2 * v82) | 1;
                  uint64_t v82 = 2 * v82 + 2;
                  if (v82 < v14)
                  {
                    BOOL result = v86 + 1;
                    if (*(void *)(**(void **)(*((void *)v72 + 59) + 8 * v87) + 8) <= *(void *)(**(void **)(*((void *)v72 + 59) + 8 * v86[1]) + 8))
                    {
                      uint64_t v82 = v89;
                    }
                    else
                    {
                      int v87 = v86[1];
                      ++v86;
                    }
                  }
                  else
                  {
                    uint64_t v82 = v89;
                  }
                  *unsigned int v84 = v87;
                  unsigned int v84 = v86;
                }
                while (v82 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
                if (v86 == --a2)
                {
                  int *v86 = v83;
                }
                else
                {
                  int *v86 = *a2;
                  *a2 = v83;
                  uint64_t v90 = (char *)v86 - (char *)v12 + 4;
                  if (v90 >= 5)
                  {
                    unint64_t v91 = (((unint64_t)v90 >> 2) - 2) >> 1;
                    uint64_t v92 = &v12[v91];
                    uint64_t v93 = *v92;
                    uint64_t v94 = *v86;
                    uint64_t v95 = *((void *)v72 + 59);
                    unint64_t v96 = *(void *)(**(void **)(v95 + 8 * v94) + 8);
                    if (*(void *)(**(void **)(v95 + 8 * v93) + 8) > v96)
                    {
                      do
                      {
                        uint64_t v97 = v92;
                        int *v86 = v93;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                        uint64_t v92 = &v12[v91];
                        uint64_t v93 = *v92;
                        BOOL result = *(int **)(**(void **)(v95 + 8 * v93) + 8);
                        int v86 = v97;
                      }
                      while ((unint64_t)result > v96);
                      *uint64_t v97 = v94;
                    }
                  }
                }
              }
              while (v14-- > 2);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = &v12[(unint64_t)v14 >> 1];
          uint64_t v17 = *(void *)(*(void *)a3 + 472);
          if ((unint64_t)v13 >= 0x201)
          {
            sub_1CCB926BC(v11, &v11[(unint64_t)v14 >> 1], a2 - 1, v17);
            sub_1CCB926BC(v11 + 1, v16 - 1, a2 - 2, *(void *)(*(void *)a3 + 472));
            sub_1CCB926BC(v11 + 2, &v11[v15 + 1], a2 - 3, *(void *)(*(void *)a3 + 472));
            BOOL result = sub_1CCB926BC(v16 - 1, v16, &v11[v15 + 1], *(void *)(*(void *)a3 + 472));
            int v18 = *v11;
            *int v11 = *v16;
            *uint64_t v16 = v18;
          }
          else
          {
            BOOL result = sub_1CCB926BC(&v11[(unint64_t)v14 >> 1], v11, a2 - 1, v17);
          }
          --a4;
          int v19 = *v11;
          uint64_t v20 = *(void *)a3;
          if (a5) {
            break;
          }
          uint64_t v21 = *(void *)(v20 + 472);
          unint64_t v22 = *(void *)(**(void **)(v21 + 8 * v19) + 8);
          if (*(void *)(**(void **)(v21 + 8 * *(v11 - 1)) + 8) > v22) {
            goto LABEL_13;
          }
          if (v22 <= *(void *)(**(void **)(v21 + 8 * *(a2 - 1)) + 8))
          {
            __int16 v37 = v11 + 1;
            do
            {
              uint64_t v12 = v37;
              if (v37 >= a2) {
                break;
              }
              ++v37;
            }
            while (v22 <= *(void *)(**(void **)(v21 + 8 * *v12) + 8));
          }
          else
          {
            uint64_t v12 = v11;
            do
            {
              uint64_t v36 = v12[1];
              ++v12;
            }
            while (v22 <= *(void *)(**(void **)(v21 + 8 * v36) + 8));
          }
          __int16 v38 = a2;
          if (v12 < a2)
          {
            __int16 v38 = a2;
            do
              uint64_t v39 = *--v38;
            while (v22 > *(void *)(**(void **)(v21 + 8 * v39) + 8));
          }
          if (v12 < v38)
          {
            int v40 = *v12;
            int v41 = *v38;
            do
            {
              *uint64_t v12 = v41;
              int *v38 = v40;
              do
              {
                uint64_t v42 = v12[1];
                ++v12;
                int v40 = v42;
              }
              while (v22 <= *(void *)(**(void **)(v21 + 8 * v42) + 8));
              do
              {
                uint64_t v43 = *--v38;
                int v41 = v43;
              }
              while (v22 > *(void *)(**(void **)(v21 + 8 * v43) + 8));
            }
            while (v12 < v38);
          }
          __int16 v44 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *int v11 = *v44;
          }
          a5 = 0;
          int *v44 = v19;
        }
        uint64_t v21 = *(void *)(v20 + 472);
        unint64_t v22 = *(void *)(**(void **)(v21 + 8 * v19) + 8);
LABEL_13:
        uint64_t v23 = 0;
        do
          uint64_t v24 = v11[++v23];
        while (*(void *)(**(void **)(v21 + 8 * v24) + 8) > v22);
        uint64_t v25 = &v11[v23];
        uint64_t v26 = a2;
        if (v23 == 1)
        {
          uint64_t v26 = a2;
          do
          {
            if (v25 >= v26) {
              break;
            }
            uint64_t v28 = *--v26;
          }
          while (*(void *)(**(void **)(v21 + 8 * v28) + 8) <= v22);
        }
        else
        {
          do
            uint64_t v27 = *--v26;
          while (*(void *)(**(void **)(v21 + 8 * v27) + 8) <= v22);
        }
        if (v25 >= v26)
        {
          uint64_t v12 = &v11[v23];
        }
        else
        {
          int v29 = *v26;
          int v30 = v24;
          uint64_t v12 = v25;
          uint64_t v31 = v26;
          do
          {
            *uint64_t v12 = v29;
            *uint64_t v31 = v30;
            do
            {
              uint64_t v32 = v12[1];
              ++v12;
              int v30 = v32;
            }
            while (*(void *)(**(void **)(v21 + 8 * v32) + 8) > v22);
            do
            {
              uint64_t v33 = *--v31;
              int v29 = v33;
            }
            while (*(void *)(**(void **)(v21 + 8 * v33) + 8) <= v22);
          }
          while (v12 < v31);
        }
        uint64_t v34 = v12 - 1;
        if (v12 - 1 != v11) {
          *int v11 = *v34;
        }
        *uint64_t v34 = v19;
        if (v25 >= v26) {
          break;
        }
LABEL_34:
        BOOL result = (int *)sub_1CCB91DA4(v11, v12 - 1, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v35 = sub_1CCB92774(v11, v12 - 1, a3);
      BOOL result = (int *)sub_1CCB92774(v12, a2, a3);
      if (result) {
        break;
      }
      if (!v35) {
        goto LABEL_34;
      }
    }
    a2 = v12 - 1;
    if (!v35) {
      continue;
    }
    return result;
  }
}

int *sub_1CCB926BC(int *result, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  unint64_t v6 = *(void *)(**(void **)(a4 + 8 * v4) + 8);
  unint64_t v7 = *(void *)(**(void **)(a4 + 8 * v5) + 8);
  uint64_t v8 = *a3;
  unint64_t v9 = *(void *)(**(void **)(a4 + 8 * v8) + 8);
  if (v6 <= v7)
  {
    if (v9 > v6)
    {
      *a2 = v8;
      *a3 = v4;
      uint64_t v10 = *a2;
      uint64_t v11 = *result;
      if (*(void *)(**(void **)(a4 + 8 * v10) + 8) > *(void *)(**(void **)(a4 + 8 * v11) + 8))
      {
        *BOOL result = v10;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v9 <= v6)
    {
      *BOOL result = v4;
      *a2 = v5;
      uint64_t v12 = *a3;
      if (*(void *)(**(void **)(a4 + 8 * v12) + 8) <= v7) {
        return result;
      }
      *a2 = v12;
    }
    else
    {
      *BOOL result = v8;
    }
    *a3 = v5;
  }
  return result;
}

BOOL sub_1CCB92774(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(void *)(**(void **)(*(void *)(*(void *)a3 + 472) + 8 * v8) + 8) > *(void *)(**(void **)(*(void *)(*(void *)a3 + 472) + 8 * v9) + 8))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_1CCB926BC(a1, a1 + 1, a2 - 1, *(void *)(*(void *)a3 + 472));
      return 1;
    case 4:
      sub_1CCB92A0C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      uint64_t v21 = a1 + 2;
      unint64_t v22 = a1 + 3;
      sub_1CCB92A0C(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v23 = *(a2 - 1);
      uint64_t v24 = a1[3];
      uint64_t v25 = *(void *)(*(void *)a3 + 472);
      if (*(void *)(**(void **)(v25 + 8 * v23) + 8) > *(void *)(**(void **)(v25 + 8 * v24) + 8))
      {
        *unint64_t v22 = v23;
        *(a2 - 1) = v24;
        uint64_t v26 = *v22;
        uint64_t v27 = *v21;
        unint64_t v28 = *(void *)(**(void **)(v25 + 8 * v26) + 8);
        if (v28 > *(void *)(**(void **)(v25 + 8 * v27) + 8))
        {
          *uint64_t v21 = v26;
          *unint64_t v22 = v27;
          uint64_t v29 = a1[1];
          if (v28 > *(void *)(**(void **)(v25 + 8 * v29) + 8))
          {
            a1[1] = v26;
            a1[2] = v29;
            uint64_t v30 = *a1;
            if (v28 > *(void *)(**(void **)(v25 + 8 * v30) + 8))
            {
              *a1 = v26;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      sub_1CCB926BC(a1, a1 + 1, a1 + 2, *(void *)(*(void *)a3 + 472));
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = *(void *)(*(void *)a3 + 472);
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    unint64_t v17 = *(void *)(**(void **)(v13 + 8 * v15) + 8);
    if (v17 > *(void *)(**(void **)(v13 + 8 * v16) + 8))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 <= *(void *)(**(void **)(v13 + 8 * v16) + 8))
        {
          uint64_t v20 = (int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      uint64_t v20 = a1;
LABEL_13:
      *uint64_t v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

int *sub_1CCB92A0C(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  BOOL result = sub_1CCB926BC(a1, a2, a3, *(void *)(*(void *)a5 + 472));
  uint64_t v11 = *a4;
  uint64_t v12 = *a3;
  uint64_t v13 = *(void *)(*(void *)a5 + 472);
  if (*(void *)(**(void **)(v13 + 8 * v11) + 8) > *(void *)(**(void **)(v13 + 8 * v12) + 8))
  {
    *a3 = v11;
    *a4 = v12;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    if (*(void *)(**(void **)(v13 + 8 * v14) + 8) > *(void *)(**(void **)(v13 + 8 * v15) + 8))
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *a1;
      if (*(void *)(**(void **)(v13 + 8 * v16) + 8) > *(void *)(**(void **)(v13 + 8 * v17) + 8))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t sub_1CCB92AF0()
{
  byte_1EA61F00F = 0;
  LOBYTE(llvm::LocalProcessCodegenManager::ExecutablePath) = 0;
  return __cxa_atexit(MEMORY[0x1E4FBA210], &llvm::LocalProcessCodegenManager::ExecutablePath, &dword_1CB82C000);
}

uint64_t llvm::LinkDiagnosticInfo::LinkDiagnosticInfo(uint64_t result, char a2, uint64_t a3)
{
  *(_DWORD *)(result + 8) = 3;
  *(unsigned char *)(result + 12) = a2;
  *(void *)BOOL result = &unk_1F262D390;
  *(void *)(result + 16) = a3;
  return result;
}

{
  *(_DWORD *)(result + 8) = 3;
  *(unsigned char *)(result + 12) = a2;
  *(void *)BOOL result = &unk_1F262D390;
  *(void *)(result + 16) = a3;
  return result;
}

uint64_t llvm::IRMover::StructTypeKeyInfo::KeyTy::KeyTy(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)BOOL result = a2;
  *(void *)(result + 8) = a3;
  *(unsigned char *)(result + 16) = a4;
  return result;
}

{
  *(void *)BOOL result = a2;
  *(void *)(result + 8) = a3;
  *(unsigned char *)(result + 16) = a4;
  return result;
}

uint64_t llvm::IRMover::StructTypeKeyInfo::KeyTy::KeyTy(uint64_t this, const llvm::StructType *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 3);
  *(void *)this = *((void *)a2 + 2);
  *(void *)(this + 8) = v2;
  *(unsigned char *)(this + 16) = (*((_DWORD *)a2 + 2) & 0x200) != 0;
  return this;
}

{
  uint64_t v2;

  uint64_t v2 = *((unsigned int *)a2 + 3);
  *(void *)this = *((void *)a2 + 2);
  *(void *)(this + 8) = v2;
  *(unsigned char *)(this + 16) = (*((_DWORD *)a2 + 2) & 0x200) != 0;
  return this;
}

BOOL llvm::IRMover::StructTypeKeyInfo::KeyTy::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
    && (uint64_t v2 = *(void *)(a1 + 8), v2 == *(void *)(a2 + 8)))
  {
    return memcmp(*(const void **)a1, *(const void **)a2, 8 * v2) == 0;
  }
  else
  {
    return 0;
  }
}

BOOL llvm::IRMover::StructTypeKeyInfo::KeyTy::operator!=(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
    && (uint64_t v2 = *(void *)(a1 + 8), v2 == *(void *)(a2 + 8)))
  {
    return memcmp(*(const void **)a1, *(const void **)a2, 8 * v2) != 0;
  }
  else
  {
    return 1;
  }
}

unint64_t llvm::IRMover::StructTypeKeyInfo::getHashValue(llvm::IRMover::StructTypeKeyInfo *this, const llvm::IRMover::StructTypeKeyInfo::KeyTy *a2)
{
  unint64_t v4 = sub_1CC13A6B8(*(void **)this, *(void *)this + 8 * *((void *)this + 1));
  return sub_1CC623948(&v4, (unsigned char *)this + 16);
}

unint64_t llvm::IRMover::StructTypeKeyInfo::getHashValue(llvm::IRMover::StructTypeKeyInfo *this, const llvm::StructType *a2)
{
  uint64_t v3 = (void *)*((void *)this + 2);
  uint64_t v4 = *((unsigned int *)this + 3);
  v5[0] = (*((_DWORD *)this + 2) & 0x200) != 0;
  unint64_t v6 = sub_1CC13A6B8(v3, (uint64_t)&v3[v4]);
  return sub_1CC623948(&v6, v5);
}

llvm::IRMover *llvm::IRMover::IRMover(llvm::IRMover *this, llvm::Module *a2)
{
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  uint64_t v3 = (char *)this + 8;
  *((void *)this + 4) = 0;
  uint64_t v4 = (char *)this + 32;
  *((void *)this + 7) = 0;
  uint64_t v5 = (_DWORD *)((char *)this + 56);
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  v17[0] = 0;
  v17[1] = 0;
  int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  unsigned int v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  int v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  int v27 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v28 = 0;
  char v31 = 0;
  llvm::TypeFinder::run((llvm::TypeFinder *)v17, a2, 0);
  unint64_t v6 = v28;
  unint64_t v7 = v29;
  while (v6 != v7)
  {
    if ((*v6)[9])
    {
      uint64_t v32 = *v6;
      sub_1CD6A1428((uint64_t)v33, (uint64_t)v4, (uint64_t *)&v32);
    }
    else
    {
      uint64_t v32 = *v6;
      sub_1CCB995CC((uint64_t)v33, (uint64_t)v3, (uint64_t *)&v32);
    }
    ++v6;
  }
  uint64_t v8 = &v19[v21];
  if (v20)
  {
    if (v21)
    {
      uint64_t v9 = 8 * v21;
      uint64_t v10 = v19;
      while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v10;
        v9 -= 8;
        if (!v9) {
          goto LABEL_11;
        }
      }
    }
    else
    {
      uint64_t v10 = v19;
    }
  }
  else
  {
LABEL_11:
    uint64_t v10 = &v19[v21];
  }
  uint64_t v11 = &v19[v21];
LABEL_13:
  while (v10 != v11)
  {
    uint64_t v12 = (unsigned __int8 *)*v10;
    uint64_t v32 = (unsigned __int8 *)*v10;
    v33[0] = 0;
    char v13 = sub_1CBA0E618((uint64_t)v5, &v32, v33);
    uint64_t v14 = (unsigned __int8 **)v33[0];
    if ((v13 & 1) == 0)
    {
      uint64_t v14 = (unsigned __int8 **)sub_1CCB997A0(v5, (uint64_t)&v32, &v32, v33[0]);
      *uint64_t v14 = v32;
      v14[1] = 0;
    }
    sub_1CC19E068(v14 + 1, v12);
    uint64_t v15 = v10 + 1;
    uint64_t v10 = v8;
    if (v15 != v8)
    {
      uint64_t v10 = v15;
      while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v10 == v8)
        {
          uint64_t v10 = v8;
          goto LABEL_13;
        }
      }
    }
  }
  sub_1CC60DBB0(v17);
  return this;
}

void llvm::IRMover::move(llvm::Module **a1, llvm::Module **a2, uint64_t a3, uint64_t a4, long long *a5, char a6)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = (llvm::IRMover::IdentifiedStructTypeSet *)(a1 + 1);
  uint64_t v8 = *a1;
  uint64_t v9 = a1 + 7;
  uint64_t v10 = *a2;
  *a2 = 0;
  unint64_t v11 = *((void *)a5 + 3);
  unint64_t v51 = v11;
  if (v11 > 7)
  {
    if ((~(_BYTE)v11 & 6) != 0)
    {
      long long v49 = *a5;
      uint64_t v50 = *((void *)a5 + 2);
      *((void *)a5 + 3) = 0;
      uint64_t v52 = v8;
      uint64_t v53 = v10;
      unint64_t v56 = v11;
    }
    else
    {
      (*(void (**)(long long *, long long *))((v11 & 0xFFFFFFFFFFFFFFF8) + 8))(&v49, a5);
      unint64_t v11 = v51;
      *((void *)a5 + 3) = 0;
      uint64_t v52 = v8;
      uint64_t v53 = v10;
      unint64_t v56 = v11;
      if (v11 < 8) {
        goto LABEL_12;
      }
    }
    if ((v11 & 2) != 0 && (v11 & 4) != 0)
    {
      (*(void (**)(long long *, long long *))((v11 & 0xFFFFFFFFFFFFFFF8) + 8))(&v54, &v49);
    }
    else
    {
      long long v54 = v49;
      uint64_t v55 = v50;
    }
    unint64_t v51 = 0;
    goto LABEL_12;
  }
  uint64_t v52 = v8;
  uint64_t v53 = v10;
  unint64_t v56 = v11;
LABEL_12:
  uint64_t v59 = 0;
  uint64_t v57 = &unk_1F262D3C0;
  uint64_t v58 = 0;
  int v60 = 0;
  uint64_t v61 = &v63;
  uint64_t v62 = 0x1000000000;
  uint64_t v64 = &v66;
  uint64_t v65 = 0x1000000000;
  uint64_t v67 = v69;
  uint64_t v68 = 0x1000000000;
  v69[16] = v71;
  v69[17] = v71;
  v69[18] = 16;
  int v70 = 0;
  uint64_t v72 = v7;
  uint64_t v73 = &unk_1F262D3F0;
  std::string v74 = &v52;
  int v75 = &unk_1F262D458;
  uint64_t v76 = &v52;
  int v77 = v9;
  unsigned int v80 = 128;
  char v13 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  uint64_t v78 = v13;
  uint64_t v79 = 0;
  v97[1] = (void *)2;
  size_t v98 = 0;
  uint64_t v99 = -4096;
  v97[0] = &unk_1F2615EC8;
  uint64_t v100 = 0;
  if (v80)
  {
    uint64_t v14 = 0;
    unint64_t v15 = (unint64_t)v80 << 6;
    uint64_t v16 = v13 + 16;
    do
    {
      unint64_t v17 = (unint64_t)v97[1];
      uint64_t v18 = v99;
      *(v16 - 1) = (uint64_t)v97[1] & 6;
      *uint64_t v16 = 0;
      v16[1] = v18;
      if (v18 != -4096 && v18 != -8192 && v18 != 0)
      {
        *uint64_t v16 = *(void *)(v17 & 0xFFFFFFFFFFFFFFF8);
        *(void *)(v17 & 0xFFFFFFFFFFFFFFF8) = v16 - 1;
        *(v16 - 1) = v17 & 0xFFFFFFFFFFFFFFFELL;
        if (*v16) {
          *(void *)*uint64_t v16 = *(void *)*v16 & 7 | (unint64_t)(v13 + 16);
        }
        uint64_t v14 = v100;
      }
      *(v16 - 2) = &unk_1F2615EC8;
      v16[2] = v14;
      v16 += 8;
      v13 += 64;
      v15 -= 64;
    }
    while (v15);
    if (v99 != -8192 && v99 != -4096 && v99)
    {
      unint64_t v27 = (unint64_t)v97[1] & 0xFFFFFFFFFFFFFFF8;
      *(void *)((unint64_t)v97[1] & 0xFFFFFFFFFFFFFFF8) = v98;
      if (v98)
      {
        *size_t v98 = *v98 & 7 | v27;
      }
      else
      {
        uint64_t v28 = v99;
        uint64_t v29 = ***(int32x2_t ****)v99;
        unint64_t v30 = (unint64_t)v29[303];
        if (v30 <= v27)
        {
          uint64_t v31 = v29[305].u32[0];
          if (v30 + 16 * v31 > v27)
          {
            unsigned int v32 = v31 - 1;
            LODWORD(v33) = v32 & ((v99 >> 4) ^ (v99 >> 9));
            uint64_t v34 = (uint64_t *)(v30 + 16 * v33);
            uint64_t v35 = *v34;
            if (v99 != *v34)
            {
              int v36 = 1;
              do
              {
                if (v35 == -4096) {
                  goto LABEL_52;
                }
                int v37 = v33 + v36++;
                uint64_t v33 = v37 & v32;
                uint64_t v35 = *(void *)(v30 + 16 * v33);
              }
              while (v99 != v35);
              uint64_t v34 = (uint64_t *)(v30 + 16 * v33);
            }
            *uint64_t v34 = -8192;
            v29[304] = vadd_s32(v29[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v28 = v99;
LABEL_52:
            *(unsigned char *)(v28 + 17) &= ~1u;
          }
        }
      }
    }
  }
  LOBYTE(v81) = 0;
  char v82 = 0;
  unsigned int v85 = 128;
  uint64_t v20 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  int v83 = v20;
  uint64_t v84 = 0;
  v97[1] = (void *)2;
  size_t v98 = 0;
  uint64_t v99 = -4096;
  v97[0] = &unk_1F2615EC8;
  uint64_t v100 = 0;
  if (v85)
  {
    uint64_t v21 = 0;
    unint64_t v22 = (unint64_t)v85 << 6;
    uint64_t v23 = v20 + 16;
    do
    {
      unint64_t v24 = (unint64_t)v97[1];
      uint64_t v25 = v99;
      *(v23 - 1) = (uint64_t)v97[1] & 6;
      *uint64_t v23 = 0;
      v23[1] = v25;
      if (v25 != -4096 && v25 != -8192 && v25 != 0)
      {
        *uint64_t v23 = *(void *)(v24 & 0xFFFFFFFFFFFFFFF8);
        *(void *)(v24 & 0xFFFFFFFFFFFFFFF8) = v23 - 1;
        *(v23 - 1) = v24 & 0xFFFFFFFFFFFFFFFELL;
        if (*v23) {
          *(void *)*uint64_t v23 = *(void *)*v23 & 7 | (unint64_t)(v20 + 16);
        }
        uint64_t v21 = v100;
      }
      *(v23 - 2) = &unk_1F2615EC8;
      void v23[2] = v21;
      v23 += 8;
      v20 += 64;
      v22 -= 64;
    }
    while (v22);
    if (v99 != -8192 && v99 != -4096 && v99)
    {
      unint64_t v38 = (unint64_t)v97[1] & 0xFFFFFFFFFFFFFFF8;
      *(void *)((unint64_t)v97[1] & 0xFFFFFFFFFFFFFFF8) = v98;
      if (v98)
      {
        *size_t v98 = *v98 & 7 | v38;
      }
      else
      {
        uint64_t v39 = v99;
        int v40 = ***(int32x2_t ****)v99;
        unint64_t v41 = (unint64_t)v40[303];
        if (v41 <= v38)
        {
          uint64_t v42 = v40[305].u32[0];
          if (v41 + 16 * v42 > v38)
          {
            unsigned int v43 = v42 - 1;
            LODWORD(v44) = v43 & ((v99 >> 4) ^ (v99 >> 9));
            uint64_t v45 = (uint64_t *)(v41 + 16 * v44);
            uint64_t v46 = *v45;
            if (v99 != *v45)
            {
              int v47 = 1;
              do
              {
                if (v46 == -4096) {
                  goto LABEL_62;
                }
                int v48 = v44 + v47++;
                uint64_t v44 = v48 & v43;
                uint64_t v46 = *(void *)(v41 + 16 * v44);
              }
              while (v99 != v46);
              uint64_t v45 = (uint64_t *)(v41 + 16 * v44);
            }
            *uint64_t v45 = -8192;
            v40[304] = vadd_s32(v40[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v39 = v99;
LABEL_62:
            *(unsigned char *)(v39 + 17) &= ~1u;
          }
        }
      }
    }
  }
  LOBYTE(v86) = 0;
  char v87 = 0;
  long long v88 = 0u;
  int v89 = 0;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  char v93 = a6;
  char v94 = 0;
  LOBYTE(v95) = 0;
  char v96 = 0;
  operator new();
}

void sub_1CCB95ADC(void *a1, uint64_t a2)
{
  uint64_t v14 = a2;
  sub_1CC905D80((uint64_t)(a1 + 106), &v14, (uint64_t)v15);
  if (v15[16])
  {
    uint64_t v3 = (void *)a1[110];
    unint64_t v4 = a1[111];
    if ((unint64_t)v3 >= v4)
    {
      unint64_t v6 = (void *)a1[109];
      uint64_t v7 = v3 - v6;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 61) {
        abort();
      }
      uint64_t v9 = v4 - (void)v6;
      if (v9 >> 2 > v8) {
        unint64_t v8 = v9 >> 2;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      if (v10)
      {
        if (v10 >> 61) {
          sub_1CB833614();
        }
        unint64_t v11 = (char *)operator new(8 * v10);
      }
      else
      {
        unint64_t v11 = 0;
      }
      uint64_t v12 = &v11[8 * v7];
      *(void *)uint64_t v12 = v14;
      uint64_t v5 = v12 + 8;
      if (v3 != v6)
      {
        do
        {
          uint64_t v13 = *--v3;
          *((void *)v12 - 1) = v13;
          v12 -= 8;
        }
        while (v3 != v6);
        uint64_t v3 = (void *)a1[109];
      }
      a1[109] = v12;
      a1[110] = v5;
      a1[111] = &v11[8 * v10];
      if (v3) {
        operator delete(v3);
      }
    }
    else
    {
      void *v3 = v14;
      uint64_t v5 = v3 + 1;
    }
    a1[110] = v5;
  }
}

void *sub_1CCB95BFC(void *a1)
{
  *a1 = &unk_1F262D3C0;
  uint64_t v2 = (void *)a1[59];
  if (v2 != (void *)a1[58]) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[40];
  if (v3 != a1 + 42) {
    free(v3);
  }
  unint64_t v4 = (void *)a1[22];
  if (v4 != a1 + 24) {
    free(v4);
  }
  uint64_t v5 = (void *)a1[4];
  if (v5 != a1 + 6) {
    free(v5);
  }
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CCB95C98(void *a1)
{
  *a1 = &unk_1F262D3C0;
  uint64_t v2 = (void *)a1[59];
  if (v2 != (void *)a1[58]) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[40];
  if (v3 != a1 + 42) {
    free(v3);
  }
  unint64_t v4 = (void *)a1[22];
  if (v4 != a1 + 24) {
    free(v4);
  }
  uint64_t v5 = (void *)a1[4];
  if (v5 != a1 + 6) {
    free(v5);
  }
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCB95D58(uint64_t a1, llvm::StructType *a2)
{
  unint64_t v4 = v8;
  uint64_t v5 = v8;
  uint64_t v6 = 8;
  int v7 = 0;
  uint64_t v2 = sub_1CCB95DB8(a1, a2, (uint64_t)&v4);
  if (v5 != v4) {
    free(v5);
  }
  return v2;
}

uint64_t sub_1CCB95DB8(uint64_t a1, llvm::StructType *a2, uint64_t a3)
{
  v69[4] = *MEMORY[0x1E4F143B8];
  uint64_t v64 = a2;
  uint64_t v6 = a1 + 8;
  uint64_t v5 = *(void *)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 24);
  if (v7)
  {
    int v8 = v7 - 1;
    unsigned int v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
    unint64_t v10 = (llvm::StructType **)(v5 + 16 * v9);
    unint64_t v11 = *v10;
    if (*v10 == a2) {
      goto LABEL_11;
    }
    uint64_t v12 = 0;
    int v13 = 1;
    while (v11 != (llvm::StructType *)-4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == (llvm::StructType *)-8192;
      }
      if (v14) {
        uint64_t v12 = v10;
      }
      unsigned int v15 = v9 + v13++;
      unsigned int v9 = v15 & v8;
      unint64_t v10 = (llvm::StructType **)(v5 + 16 * v9);
      unint64_t v11 = *v10;
      if (*v10 == a2) {
        goto LABEL_11;
      }
    }
    if (v12) {
      uint64_t v58 = v12;
    }
    else {
      uint64_t v58 = v10;
    }
  }
  else
  {
    uint64_t v58 = 0;
  }
  unint64_t v10 = (llvm::StructType **)sub_1CC7BBA58(a1 + 8, (uint64_t)&v64, &v64, v58);
  *unint64_t v10 = v64;
  v10[1] = 0;
LABEL_11:
  uint64_t v16 = (uint64_t)v10[1];
  if (v16) {
    return v16;
  }
  uint64_t v16 = (uint64_t)v64;
  int v17 = *((_DWORD *)v64 + 2);
  int v18 = v17 & 0x4FF;
  if (v18 == 16)
  {
    if ((v17 & 0x100) == 0)
    {
      if (llvm::IRMover::IdentifiedStructTypeSet::hasType(*(llvm::IRMover::IdentifiedStructTypeSet **)(a1 + 624), (const void **)v64))
      {
        v10[1] = (llvm::StructType *)v16;
        return v16;
      }
      uint64_t v16 = (uint64_t)v64;
    }
    uint64_t v19 = *(void *)(a3 + 8);
    uint64_t v20 = *(unsigned int *)(a3 + 20);
    if (v19 == *(void *)a3)
    {
      if (v20)
      {
        uint64_t v21 = 0;
        uint64_t v22 = 8 * v20;
        uint64_t v23 = *(uint64_t **)(a3 + 8);
        do
        {
          if (*v23 == v16) {
            goto LABEL_74;
          }
          if (*v23 == -2) {
            uint64_t v21 = v23;
          }
          ++v23;
          v22 -= 8;
        }
        while (v22);
        if (v21)
        {
          *uint64_t v21 = v16;
          --*(_DWORD *)(a3 + 24);
          goto LABEL_46;
        }
      }
      unsigned int v24 = *(_DWORD *)(a3 + 16);
      if (v20 < v24)
      {
        *(_DWORD *)(a3 + 20) = v20 + 1;
        *(void *)(v19 + 8 * v20) = v16;
LABEL_46:
        uint64_t v16 = (uint64_t)v64;
        goto LABEL_47;
      }
    }
    else
    {
      unsigned int v24 = *(_DWORD *)(a3 + 16);
    }
    if (3 * v24 <= 4 * ((int)v20 - *(_DWORD *)(a3 + 24)))
    {
      if (v24 >= 0x40) {
        v24 *= 2;
      }
      else {
        unsigned int v24 = 128;
      }
    }
    else if (v24 - v20 >= v24 >> 3)
    {
      goto LABEL_27;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a3, v24);
    unsigned int v24 = *(_DWORD *)(a3 + 16);
    uint64_t v19 = *(void *)(a3 + 8);
LABEL_27:
    unsigned int v25 = v24 - 1;
    unsigned int v26 = (v24 - 1) & ((v16 >> 4) ^ (v16 >> 9));
    unint64_t v27 = (uint64_t *)(v19 + 8 * v26);
    uint64_t v28 = *v27;
    if (*v27 == -1)
    {
      uint64_t v29 = 0;
LABEL_39:
      if (v29) {
        uint64_t v33 = v29;
      }
      else {
        uint64_t v33 = v27;
      }
      if (*v33 != v16)
      {
        if (*v33 == -2) {
          --*(_DWORD *)(a3 + 24);
        }
        else {
          ++*(_DWORD *)(a3 + 20);
        }
        *uint64_t v33 = v16;
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v29 = 0;
      int v30 = 1;
      while (v28 != v16)
      {
        if (v29) {
          BOOL v31 = 0;
        }
        else {
          BOOL v31 = v28 == -2;
        }
        if (v31) {
          uint64_t v29 = v27;
        }
        unsigned int v32 = v26 + v30++;
        unsigned int v26 = v32 & v25;
        unint64_t v27 = (uint64_t *)(v19 + 8 * (v32 & v25));
        uint64_t v28 = *v27;
        if (*v27 == -1) {
          goto LABEL_39;
        }
      }
    }
LABEL_74:
    uint64_t v16 = llvm::StructType::create(*(uint64_t **)v64, 0, 0);
    v10[1] = (llvm::StructType *)v16;
    return v16;
  }
LABEL_47:
  uint64_t v67 = v69;
  uint64_t v68 = 0x400000000;
  unint64_t v34 = *(unsigned int *)(v16 + 12);
  if (v18 != 16 && !v34)
  {
    v10[1] = (llvm::StructType *)v16;
    goto LABEL_92;
  }
  sub_1CC34BDE0((uint64_t)&v67, v34);
  uint64_t v35 = v64;
  uint64_t v36 = *((unsigned int *)v64 + 3);
  if (v36)
  {
    uint64_t v37 = 0;
    char v38 = 0;
    uint64_t v39 = *((void *)v64 + 2);
    uint64_t v40 = 8 * v36;
    do
    {
      uint64_t v41 = sub_1CCB95DB8(a1, *(void *)(v39 + v37), a3);
      *(void *)((char *)v67 + v37) = v41;
      uint64_t v35 = v64;
      uint64_t v39 = *((void *)v64 + 2);
      v38 |= *(void *)((char *)v67 + v37) != *(void *)(v39 + v37);
      v37 += 8;
    }
    while (v40 != v37);
  }
  else
  {
    char v38 = 0;
  }
  int v42 = *(_DWORD *)(a1 + 24);
  if (v42)
  {
    uint64_t v43 = *(void *)(a1 + 8);
    int v44 = v42 - 1;
    unsigned int v45 = ((v35 >> 4) ^ (v35 >> 9)) & v44;
    uint64_t v46 = (llvm::StructType **)(v43 + 16 * v45);
    int v47 = *v46;
    if (v35 == *v46) {
      goto LABEL_65;
    }
    int v48 = 0;
    int v49 = 1;
    while (v47 != (llvm::StructType *)-4096)
    {
      if (v48) {
        BOOL v50 = 0;
      }
      else {
        BOOL v50 = v47 == (llvm::StructType *)-8192;
      }
      if (v50) {
        int v48 = v46;
      }
      unsigned int v51 = v45 + v49++;
      unsigned int v45 = v51 & v44;
      uint64_t v46 = (llvm::StructType **)(v43 + 16 * v45);
      int v47 = *v46;
      if (v35 == *v46) {
        goto LABEL_65;
      }
    }
    if (v48) {
      int v60 = v48;
    }
    else {
      int v60 = v46;
    }
  }
  else
  {
    int v60 = 0;
  }
  uint64_t v46 = (llvm::StructType **)sub_1CC7BBA58(v6, (uint64_t)&v64, &v64, v60);
  *uint64_t v46 = v64;
  v46[1] = 0;
LABEL_65:
  uint64_t v16 = (uint64_t)v46[1];
  if (v16)
  {
    if ((*(_DWORD *)(v16 + 8) & 0x1FF) == 0x10)
    {
      sub_1CCB963B8(a1, (uint64_t)v46[1], (uint64_t)v64, (uint64_t)v67, v68);
      uint64_t v16 = (uint64_t)v46[1];
    }
    goto LABEL_92;
  }
  uint64_t v16 = (uint64_t)v64;
  if ((v18 == 16) | v38 & 1)
  {
    unsigned int v52 = *((_DWORD *)v64 + 2);
    switch((char)v52)
    {
      case 15:
        unint64_t v57 = llvm::PointerType::get(*(llvm::PointerType **)v67, (llvm::Type *)(v52 >> 8));
        goto LABEL_91;
      case 16:
        if (v18 != 16)
        {
          unint64_t v57 = llvm::StructType::get(*(uint64_t **)v64, (uint64_t)v67, v68, (v52 >> 9) & 1);
LABEL_91:
          uint64_t v16 = v57;
          v46[1] = (llvm::StructType *)v57;
          break;
        }
        uint64_t v56 = *(void *)(a1 + 624);
        if ((v52 & 0x100) == 0)
        {
          uint64_t v65 = v64;
          sub_1CCB995CC((uint64_t)v66, v56, (uint64_t *)&v65);
LABEL_81:
          uint64_t v16 = (uint64_t)v64;
          goto LABEL_73;
        }
        uint64_t NonOpaque = llvm::IRMover::IdentifiedStructTypeSet::findNonOpaque(*(void *)(a1 + 624), v67, (const void *)v68, (v52 & 0x200) != 0);
        if (NonOpaque)
        {
          uint64_t v62 = NonOpaque;
          llvm::StructType::setName(v16, "", 0);
        }
        else
        {
          if ((v38 & 1) == 0)
          {
            uint64_t v63 = *(void *)(a1 + 624);
            uint64_t v65 = (llvm::StructType *)v16;
            sub_1CD6A1428((uint64_t)v66, v63 + 24, (uint64_t *)&v65);
            goto LABEL_81;
          }
          uint64_t v62 = llvm::StructType::create(*(uint64_t **)v64, 0, 0);
          sub_1CCB963B8(a1, v62, v16, (uint64_t)v67, v68);
        }
        v46[1] = (llvm::StructType *)v62;
        uint64_t v16 = v62;
        break;
      case 17:
        unint64_t v57 = (unint64_t)llvm::ArrayType::get(*(llvm::ArrayType **)v67, *((llvm::Type **)v64 + 4));
        goto LABEL_91;
      case 18:
      case 19:
        uint64_t v53 = *(llvm::PointerType **)v67;
        long long v54 = (llvm::Type *)*((unsigned int *)v64 + 8);
        if (v52 == 19) {
          llvm::ScalableVectorType::get((uint64_t **)v53, v54);
        }
        else {
          llvm::FixedVectorType::get(v53, v54);
        }
        uint64_t v16 = v55;
        goto LABEL_73;
      default:
        unint64_t v57 = llvm::FunctionType::get(*(uint64_t ***)v67, (uint64_t)v67 + 8, v68 - 1, v52 > 0xFF);
        goto LABEL_91;
    }
  }
  else
  {
LABEL_73:
    v46[1] = (llvm::StructType *)v16;
  }
LABEL_92:
  if (v67 != v69) {
    free(v67);
  }
  return v16;
}

uint64_t sub_1CCB963B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v18[2] = *MEMORY[0x1E4F143B8];
  llvm::StructType::setBody(a2, a4, a5, (*(_DWORD *)(a3 + 8) >> 9) & 1);
  int v8 = *(unint64_t **)(a3 + 24);
  if (v8)
  {
    unint64_t v11 = *v8;
    unint64_t v10 = v8 + 2;
    size_t v9 = v11;
    uint64_t v16 = v18;
    long long v17 = xmmword_1CDB15990;
    if (v11 >= 0x11) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v12 = 0;
    if (v9)
    {
      memcpy(v16, v10, v9);
      uint64_t v12 = v17;
    }
    *(void *)&long long v17 = v12 + v9;
    llvm::StructType::setName(a3, "", 0);
    llvm::StructType::setName(a2, (unsigned __int8 *)v16, v17);
    if (v16 != v18) {
      free(v16);
    }
  }
  uint64_t v13 = *(void *)(a1 + 624);
  uint64_t v15 = a2;
  return sub_1CD6A1428((uint64_t)&v16, v13 + 24, &v15);
}

llvm::detail::IEEEFloat *sub_1CCB964FC(uint64_t a1, unint64_t *a2)
{
  return sub_1CCB96508(*(void *)(a1 + 8), a2, 0);
}

llvm::detail::IEEEFloat *sub_1CCB96508(uint64_t a1, unint64_t *a2, int a3)
{
  PointerBitCastOrAddrSpaceCast = 0;
  uint64_t v400 = *MEMORY[0x1E4F143B8];
  if (!a2 || *((unsigned __int8 *)a2 + 16) > 3u) {
    return PointerBitCastOrAddrSpaceCast;
  }
  int v8 = (void **)a2[5];
  if (v8 != *(void ***)a1 && v8 != *(void ***)(a1 + 8)) {
    return 0;
  }
  size_t v9 = (llvm::detail::IEEEFloat *)sub_1CCB98684((uint64_t *)a1, (uint64_t ***)a2);
  unint64_t v10 = sub_1CCB98394(a1, (uint64_t)v9, (uint64_t)a2);
  int v13 = v10;
  if (v10)
  {
    uint64_t v14 = *(void *)(a1 + 720);
    uint64_t v15 = *(unsigned int *)(a1 + 736);
    if (v15)
    {
      uint64_t v16 = (v15 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v17 = v14 + (v16 << 6);
      int v18 = *(unint64_t **)(v17 + 24);
      if (v18 == a2) {
        goto LABEL_16;
      }
      int v19 = 1;
      while (v18 != (unint64_t *)-4096)
      {
        int v20 = v16 + v19++;
        uint64_t v16 = v20 & (v15 - 1);
        uint64_t v17 = v14 + (v16 << 6);
        int v18 = *(unint64_t **)(v17 + 24);
        if (v18 == a2) {
          goto LABEL_16;
        }
      }
    }
    uint64_t v17 = v14 + (v15 << 6);
LABEL_16:
    if (v17 != v14 + (v15 << 6))
    {
LABEL_25:
      PointerBitCastOrAddrSpaceCast = *(llvm::detail::IEEEFloat **)(v17 + 56);
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(a1 + 784);
    uint64_t v24 = *(unsigned int *)(a1 + 800);
    if (v24)
    {
      uint64_t v25 = (v24 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v17 = v23 + (v25 << 6);
      unsigned int v26 = *(unint64_t **)(v17 + 24);
      if (v26 == a2) {
        goto LABEL_24;
      }
      int v27 = 1;
      while (v26 != (unint64_t *)-4096)
      {
        int v28 = v25 + v27++;
        uint64_t v25 = v28 & (v24 - 1);
        uint64_t v17 = v23 + (v25 << 6);
        unsigned int v26 = *(unint64_t **)(v17 + 24);
        if (v26 == a2) {
          goto LABEL_24;
        }
      }
    }
    uint64_t v17 = v23 + (v24 << 6);
LABEL_24:
    if (v17 != v23 + (v24 << 6)) {
      goto LABEL_25;
    }
    goto LABEL_36;
  }
  if (a3)
  {
    size_t v9 = 0;
    uint64_t v21 = (unsigned int *)(a2 + 4);
    char v22 = 1;
    if ((a2[4] & 0xF) == 6)
    {
LABEL_77:
      if (*((unsigned char *)a2 + 16))
      {
        if (*((unsigned char *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
        {
LABEL_83:
          PointerBitCastOrAddrSpaceCast = v9;
          goto LABEL_26;
        }
      }
      else if ((unint64_t *)a2[9] == a2 + 9 && (*((unsigned char *)a2 + 34) & 0x80) == 0)
      {
        goto LABEL_83;
      }
      unint64_t v53 = *(void *)(sub_1CCB95D58(a1 + 48, (llvm::StructType *)a2[3]) + 24);
      uint64_t v54 = **(void **)*a2;
      if ((*((unsigned char *)a2 + 23) & 0x10) == 0) {
        goto LABEL_118;
      }
      uint64_t v55 = *(void *)(v54 + 152);
      uint64_t v56 = *(unsigned int *)(v54 + 168);
      if (v56)
      {
        LODWORD(v57) = (v56 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        uint64_t v58 = (unint64_t **)(v55 + 16 * v57);
        uint64_t v59 = *v58;
        if (*v58 == a2)
        {
LABEL_103:
          uint64_t v72 = v58[1];
          if (*v72 == 17)
          {
            BOOL v73 = v72[2] == 0x6F6C672E6D766C6CLL && v72[3] == 0x726F74635F6C6162;
            BOOL v74 = v73 && *((unsigned char *)v72 + 32) == 115;
            if (v74
              || ((unint64_t v75 = v72[2], v76 = v72[3], v77 = *((unsigned __int8 *)v72 + 32), v75 == 0x6F6C672E6D766C6CLL)
                ? (BOOL v78 = v76 == 0x726F74645F6C6162)
                : (BOOL v78 = 0),
                  v78 ? (BOOL v79 = v77 == 115) : (BOOL v79 = 0),
                  v79))
            {
              int v84 = *(_DWORD *)(v53 + 12);
              unint64_t v10 = llvm::PointerType::get((llvm::PointerType *)(v54 + 1912), 0);
              BOOL v80 = v84 == 3;
              if (!v80)
              {
                v397[1] = 0;
                v398[0] = 0;
                v397[0] = 0;
                *(_OWORD *)int v397 = *(_OWORD *)*(void *)(v53 + 16);
                v398[0] = v10;
                unint64_t v10 = llvm::StructType::get(*(uint64_t **)*a2, (uint64_t)v397, 3, 0);
                unint64_t v53 = v10;
                BOOL v80 = 0;
                int v81 = 1;
                if ((v22 & 1) == 0)
                {
LABEL_120:
                  if (v9 && *((unsigned char *)v9 + 16) == 3)
                  {
                    if ((*((_DWORD *)v9 + 5) & 0x7FFFFFF) == 0) {
                      goto LABEL_132;
                    }
                  }
                  else if (!*((unsigned char *)v9 + 16) {
                         && *((llvm::detail::IEEEFloat **)v9 + 9) == (llvm::detail::IEEEFloat *)((char *)v9 + 72)
                  }
                         && (*((unsigned char *)v9 + 34) & 0x80) == 0)
                  {
                    goto LABEL_132;
                  }
                  char v82 = (void **)*((void *)v9 + 3);
                  if ((void *)v53 == v82[3])
                  {
                    char v384 = v22;
                    unsigned int v380 = v82[4];
LABEL_171:
                    int v381 = v81;
                    int v387 = a3;
                    v397[0] = v398;
                    v397[1] = (void *)0x1000000000;
                    int64_t v129 = (llvm::Constant *)*(a2 - 4);
                    int v130 = *(_DWORD *)(*(void *)v129 + 32);
                    if (v130)
                    {
                      uint64_t v133 = 0;
                      do
                      {
                        AggregateElement = llvm::Constant::getAggregateElement(v129, v133);
                        if (LODWORD(v397[1]) >= (unint64_t)HIDWORD(v397[1])) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)v397[0] + LODWORD(v397[1])) = AggregateElement;
                        unint64_t v132 = ++LODWORD(v397[1]);
                        uint64_t v133 = (llvm::Type *)(v133 + 1);
                      }
                      while (v130 != v133);
                      if (!v80)
                      {
LABEL_314:
                        int64_t v227 = llvm::ArrayType::get((llvm::ArrayType *)v53, (llvm::Type *)((char *)v380 + v132));
                        int v228 = (char *)operator new(0x78uLL);
                        char v229 = (uint64_t ***)(v228 + 32);
                        *((_DWORD *)v228 + 13) = *((_DWORD *)v228 + 13) & 0x38000000 | 1;
                        *(void *)int v228 = 0;
                        *((void *)v228 + 1) = 0;
                        *((void *)v228 + 2) = 0;
                        *((void *)v228 + 3) = v228 + 32;
                        uint64_t v230 = *(void *)a1;
                        char v231 = a2[10] & 1;
                        unsigned int v232 = *((_DWORD *)a2 + 8);
                        __int16 v396 = 257;
                        unint64_t v233 = llvm::GlobalVariable::GlobalVariable((unint64_t *)v228 + 4, v230, v227, v231, v232 & 0xF, 0, (const char **)&v392, (uint64_t)v9, (v232 >> 10) & 7, (llvm::Type *)(((unint64_t)*(unsigned int *)(*a2 + 8) >> 8) | 0x100000000), 0);
                        llvm::GlobalObject::copyAttributesFrom((llvm::GlobalObject *)v233, (const llvm::GlobalObject *)a2);
                        v228[112] = v228[112] & 0xFD | a2[10] & 2;
                        *((void *)v228 + 13) = a2[9];
                        a3 = v387;
                        if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
                        {
                          uint64_t v245 = 0;
                          uint64_t v244 = &byte_1CFBCE98E;
                          char v237 = v384;
LABEL_323:
                          sub_1CCB9879C(v229, v244, v245);
                          uint64_t v247 = (llvm::Constant *)sub_1CCB95D58(a1 + 48, (llvm::StructType *)*a2);
                          PointerBitCastOrAddrSpaceCast = (llvm::detail::IEEEFloat *)(v228 + 32);
                          if (*v229 != (uint64_t **)v247) {
                            PointerBitCastOrAddrSpaceCast = sub_1CC56C0C0((llvm *)0x31, (llvm::detail::IEEEFloat *)v229, v247, 0);
                          }
                          int64_t v248 = (uint64_t *)(a1 + 944);
                          if (v237)
                          {
                            llvm::ValueMapper::scheduleMapAppendingVariable(v248, (unint64_t)v229, 0, v381, (unsigned char *)v397[0], LODWORD(v397[1]), 0);
                            goto LABEL_355;
                          }
                          if (v9 && *((unsigned char *)v9 + 16) == 3)
                          {
                            if ((*((_DWORD *)v9 + 5) & 0x7FFFFFF) == 0)
                            {
LABEL_330:
                              uint64_t v249 = 0;
                              goto LABEL_335;
                            }
                          }
                          else if (!*((unsigned char *)v9 + 16) {
                                 && *((llvm::detail::IEEEFloat **)v9 + 9) == (llvm::detail::IEEEFloat *)((char *)v9 + 72)
                          }
                                 && (*((unsigned char *)v9 + 34) & 0x80) == 0)
                          {
                            goto LABEL_330;
                          }
                          uint64_t v249 = *((void *)v9 - 4);
LABEL_335:
                          llvm::ValueMapper::scheduleMapAppendingVariable(v248, (unint64_t)v229, v249, v381, (unsigned char *)v397[0], LODWORD(v397[1]), 0);
                          if (*v229 != *(uint64_t ***)v9) {
                            char v229 = (uint64_t ***)sub_1CC56C0C0((llvm *)0x31, (llvm::detail::IEEEFloat *)v229, *(llvm::Constant **)v9, 0);
                          }
                          unint64_t v250 = *(llvm::detail::IEEEFloat ***)(a1 + 904);
                          unint64_t v251 = *(void *)(a1 + 912);
                          if ((unint64_t)v250 < v251)
                          {
                            *unint64_t v250 = v9;
                            v250[1] = (llvm::detail::IEEEFloat *)v229;
                            int v252 = v250 + 2;
LABEL_354:
                            *(void *)(a1 + 904) = v252;
LABEL_355:
                            if (v397[0] != v398) {
                              free(v397[0]);
                            }
                            goto LABEL_26;
                          }
                          uint64_t v253 = *(char **)(a1 + 896);
                          uint64_t v254 = ((char *)v250 - v253) >> 4;
                          unint64_t v255 = v254 + 1;
                          if (!((unint64_t)(v254 + 1) >> 60))
                          {
                            uint64_t v256 = v251 - (void)v253;
                            if (v256 >> 3 > v255) {
                              unint64_t v255 = v256 >> 3;
                            }
                            if ((unint64_t)v256 >= 0x7FFFFFFFFFFFFFF0) {
                              unint64_t v257 = 0xFFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v257 = v255;
                            }
                            if (!v257)
                            {
                              uint64_t v258 = 0;
                              goto LABEL_349;
                            }
                            if (!(v257 >> 60))
                            {
                              uint64_t v258 = (char *)operator new(16 * v257);
LABEL_349:
                              BOOL v259 = (llvm::detail::IEEEFloat **)&v258[16 * v254];
                              uint64_t *v259 = v9;
                              v259[1] = (llvm::detail::IEEEFloat *)v229;
                              int v252 = v259 + 2;
                              if (v250 != (llvm::detail::IEEEFloat **)v253)
                              {
                                do
                                {
                                  *((_OWORD *)v259 - 1) = *((_OWORD *)v250 - 1);
                                  v259 -= 2;
                                  v250 -= 2;
                                }
                                while (v250 != (llvm::detail::IEEEFloat **)v253);
                                unint64_t v250 = *(llvm::detail::IEEEFloat ***)(a1 + 896);
                              }
                              *(void *)(a1 + 896) = v259;
                              *(void *)(a1 + 904) = v252;
                              *(void *)(a1 + 912) = &v258[16 * v257];
                              if (v250) {
                                operator delete(v250);
                              }
                              goto LABEL_354;
                            }
LABEL_527:
                            sub_1CB833614();
                          }
LABEL_526:
                          abort();
                        }
                        uint64_t v234 = **(void **)*a2;
                        uint64_t v235 = *(void *)(v234 + 152);
                        uint64_t v236 = *(unsigned int *)(v234 + 168);
                        char v237 = v384;
                        if (v236)
                        {
                          LODWORD(v238) = (v236 - 1) & ((a2 >> 4) ^ (a2 >> 9));
                          int v239 = (unint64_t **)(v235 + 16 * v238);
                          uint64_t v240 = *v239;
                          if (*v239 == a2)
                          {
LABEL_322:
                            unsigned int v243 = v239[1];
                            uint64_t v246 = (uint64_t **)*v243;
                            uint64_t v244 = (char *)(v243 + 2);
                            uint64_t v245 = v246;
                            goto LABEL_323;
                          }
                          int v241 = 1;
                          while (v240 != (unint64_t *)-4096)
                          {
                            int v242 = v238 + v241++;
                            uint64_t v238 = v242 & (v236 - 1);
                            uint64_t v240 = *(unint64_t **)(v235 + 16 * v238);
                            if (v240 == a2)
                            {
                              int v239 = (unint64_t **)(v235 + 16 * v238);
                              goto LABEL_322;
                            }
                          }
                        }
                        int v239 = (unint64_t **)(v235 + 16 * v236);
                        goto LABEL_322;
                      }
                      std::string::size_type v135 = (llvm::Constant **)v397[0];
                      if (!v132) {
                        goto LABEL_181;
                      }
                      int64_t v131 = (llvm::Constant **)((char *)v397[0] + 8 * v132);
                      uint64_t v209 = 8 * v132 - 8;
                      do
                      {
                        size_t v210 = (llvm::Value *)llvm::Constant::getAggregateElement(*v135, (llvm::Type *)2);
                        size_t v211 = llvm::Value::stripPointerCasts(v210);
                        if (v211 && *((unsigned __int8 *)v211 + 16) <= 3u)
                        {
                          uint64_t v213 = (uint64_t)v211;
                          uint64_t v214 = sub_1CCB98684((uint64_t *)a1, (uint64_t ***)v211);
                          if (!sub_1CCB98394(a1, v214, v213)) {
                            break;
                          }
                        }
                        ++v135;
                        v209 -= 8;
                      }
                      while (v135 != v131);
                      if (v135 + 1 == v131)
                      {
LABEL_181:
                        int64_t v131 = v135;
                      }
                      else
                      {
                        uint64_t v221 = 1;
                        int64_t v131 = v135;
                        do
                        {
                          uint64_t v222 = (llvm::Value *)llvm::Constant::getAggregateElement(v135[v221], (llvm::Type *)2);
                          char v223 = llvm::Value::stripPointerCasts(v222);
                          if (v223) {
                            BOOL v224 = *((unsigned __int8 *)v223 + 16) > 3u;
                          }
                          else {
                            BOOL v224 = 1;
                          }
                          if (v224
                            || (uint64_t v225 = (uint64_t)v223,
                                uint64_t v226 = sub_1CCB98684((uint64_t *)a1, (uint64_t ***)v223),
                                sub_1CCB98394(a1, v226, v225)))
                          {
                            *v131++ = v135[v221];
                          }
                          ++v221;
                          v209 -= 8;
                        }
                        while (v209);
                      }
                    }
                    else
                    {
                      int64_t v131 = (llvm::Constant **)v398;
                      if (!v80)
                      {
                        LODWORD(v132) = 0;
                        goto LABEL_314;
                      }
                    }
                    unint64_t v132 = (unint64_t)((char *)v131 - (char *)v397[0]) >> 3;
                    LODWORD(v397[1]) = v132;
                    goto LABEL_314;
                  }
                  uint64_t v63 = "Appending variables with different element types!";
                  goto LABEL_129;
                }
LABEL_132:
                char v384 = v22;
                unsigned int v380 = 0;
                goto LABEL_171;
              }
LABEL_119:
              int v81 = 0;
              if ((v22 & 1) == 0) {
                goto LABEL_120;
              }
              goto LABEL_132;
            }
          }
LABEL_118:
          unint64_t v10 = llvm::PointerType::get((llvm::PointerType *)(v54 + 1912), 0);
          BOOL v80 = 0;
          goto LABEL_119;
        }
        int v60 = 1;
        while (v59 != (unint64_t *)-4096)
        {
          int v61 = v57 + v60++;
          uint64_t v57 = v61 & (v56 - 1);
          uint64_t v59 = *(unint64_t **)(v55 + 16 * v57);
          if (v59 == a2)
          {
            uint64_t v58 = (unint64_t **)(v55 + 16 * v57);
            goto LABEL_103;
          }
        }
      }
      uint64_t v58 = (unint64_t **)(v55 + 16 * v56);
      goto LABEL_103;
    }
    goto LABEL_64;
  }
LABEL_36:
  uint64_t v21 = (unsigned int *)(a2 + 4);
  unsigned int v30 = *((_DWORD *)a2 + 8);
  if ((v30 & 0xF) == 6)
  {
    if (!v9)
    {
      char v22 = 1;
      goto LABEL_77;
    }
LABEL_41:
    if (*((unsigned char *)v9 + 16) == 3)
    {
      if ((*((_DWORD *)v9 + 5) & 0x7FFFFFF) == 0) {
        goto LABEL_76;
      }
    }
    else if (!*((unsigned char *)v9 + 16) {
           && *((llvm::detail::IEEEFloat **)v9 + 9) == (llvm::detail::IEEEFloat *)((char *)v9 + 72)
    }
           && (*((unsigned char *)v9 + 34) & 0x80) == 0)
    {
      goto LABEL_76;
    }
    if (*((unsigned char *)a2 + 16))
    {
      if (*((unsigned char *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0) {
        goto LABEL_76;
      }
    }
    else if ((v30 & 0x800000) == 0 && (unint64_t *)a2[9] == a2 + 9)
    {
      goto LABEL_76;
    }
    if ((v30 & 0xF) != 6 || (int v62 = *((_DWORD *)v9 + 8), (v62 & 0xF) != 6))
    {
      if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
      {
        uint64_t v64 = **(void **)*a2;
        uint64_t v65 = *(void *)(v64 + 152);
        uint64_t v66 = *(unsigned int *)(v64 + 168);
        if (v66)
        {
          LODWORD(v67) = (v66 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          uint64_t v68 = (unint64_t **)(v65 + 16 * v67);
          int64_t v69 = *v68;
          if (*v68 != a2)
          {
            int v70 = 1;
            do
            {
              if (v69 == (unint64_t *)-4096) {
                goto LABEL_164;
              }
              int v71 = v67 + v70++;
              uint64_t v67 = v71 & (v66 - 1);
              int64_t v69 = *(unint64_t **)(v65 + 16 * v67);
            }
            while (v69 != a2);
            uint64_t v68 = (unint64_t **)(v65 + 16 * v67);
          }
        }
        else
        {
LABEL_164:
          uint64_t v68 = (unint64_t **)(v65 + 16 * v66);
        }
        unint64_t v124 = v68[1];
        unint64_t v127 = *v124;
        size_t v125 = (char *)(v124 + 2);
        unint64_t v126 = v127;
      }
      else
      {
        unint64_t v126 = 0;
        size_t v125 = &byte_1CFBCE98E;
      }
      __int16 v396 = 1283;
      uint64_t v392 = (uint64_t)"Linking globals named '";
      int v394 = v125;
      unint64_t v395 = v126;
      v397[0] = &v392;
      v398[0] = "': can only link appending global with another appending global!";
      __int16 v83 = 770;
LABEL_167:
      __int16 v399 = v83;
      llvm::inconvertibleErrorCode((llvm *)v10);
      operator new();
    }
    if ((*((unsigned char *)v9 + 80) & 1) != (a2[10] & 1))
    {
      uint64_t v63 = "Appending variables linked with different const'ness!";
LABEL_129:
      v397[0] = (void *)v63;
      __int16 v83 = 259;
      goto LABEL_167;
    }
    unsigned int v136 = ((BYTE2(v62) & 0x3F) - 1) | 0x100;
    if ((v62 & 0x3F0000) == 0) {
      unsigned int v136 = 0;
    }
    unsigned int v137 = v136 >> 8;
    int v138 = HIWORD(v30) & 0x3F;
    if (v138 && v137)
    {
      if (((BYTE2(v30) & 0x3F) - 1) != v136)
      {
LABEL_187:
        uint64_t v63 = "Appending variables with different alignment need to be linked!";
        goto LABEL_129;
      }
    }
    else if ((v138 != 0) == (v137 == 0))
    {
      goto LABEL_187;
    }
    if (((v62 ^ v30) & 0x30) != 0)
    {
      uint64_t v63 = "Appending variables with different visibility need to be linked!";
      goto LABEL_129;
    }
    if (((v30 & 0xC0) == 128) != ((v62 & 0xC0) == 128))
    {
      uint64_t v63 = "Appending variables with different unnamed_addr need to be linked!";
      goto LABEL_129;
    }
    if ((v62 & 0x400000) == 0)
    {
      if ((v30 & 0x400000) == 0)
      {
LABEL_76:
        char v22 = 0;
        goto LABEL_77;
      }
      uint64_t v310 = **(void **)*a2;
      v397[0] = a2;
      int v311 = *(_DWORD *)(v310 + 2520);
      if (v311)
      {
        uint64_t v312 = *(void *)(v310 + 2504);
        int v313 = v311 - 1;
        unsigned int v314 = v313 & ((a2 >> 4) ^ (a2 >> 9));
        unint64_t v10 = v312 + 24 * v314;
        uint64_t v315 = *(void *)v10;
        if (*(unint64_t **)v10 == a2) {
          goto LABEL_433;
        }
        uint64_t v365 = 0;
        int v366 = 1;
        while (v315 != -4096)
        {
          if (v365) {
            BOOL v367 = 0;
          }
          else {
            BOOL v367 = v315 == -8192;
          }
          if (v367) {
            uint64_t v365 = (void *)v10;
          }
          unsigned int v368 = v314 + v366++;
          unsigned int v314 = v368 & v313;
          unint64_t v10 = v312 + 24 * v314;
          uint64_t v315 = *(void *)v10;
          if (*(unint64_t **)v10 == a2) {
            goto LABEL_433;
          }
        }
        if (v365) {
          int v375 = v365;
        }
        else {
          int v375 = (void *)v10;
        }
      }
      else
      {
        int v375 = 0;
      }
      unint64_t v10 = (unint64_t)sub_1CC5BF31C(v310 + 2504, (uint64_t)v397, (uint64_t *)v397, v375);
      uint64_t v376 = v397[0];
      *(void *)(v10 + 8) = 0;
      *(void *)(v10 + 16) = 0;
      *(void *)unint64_t v10 = v376;
LABEL_433:
      if (!*(void *)(v10 + 16)) {
        goto LABEL_76;
      }
      goto LABEL_459;
    }
    uint64_t v325 = ***(void ***)v9;
    v397[0] = v9;
    int v326 = *(_DWORD *)(v325 + 2520);
    if (v326)
    {
      uint64_t v327 = *(void *)(v325 + 2504);
      int v328 = v326 - 1;
      unsigned int v329 = v328 & ((v9 >> 4) ^ (v9 >> 9));
      unint64_t v10 = v327 + 24 * v329;
      uint64_t v330 = *(void *)v10;
      if (*(llvm::detail::IEEEFloat **)v10 == v9) {
        goto LABEL_447;
      }
      uint64_t v361 = 0;
      int v362 = 1;
      while (v330 != -4096)
      {
        if (v361) {
          BOOL v363 = 0;
        }
        else {
          BOOL v363 = v330 == -8192;
        }
        if (v363) {
          uint64_t v361 = (void *)v10;
        }
        unsigned int v364 = v329 + v362++;
        unsigned int v329 = v364 & v328;
        unint64_t v10 = v327 + 24 * v329;
        uint64_t v330 = *(void *)v10;
        if (*(llvm::detail::IEEEFloat **)v10 == v9) {
          goto LABEL_447;
        }
      }
      if (v361) {
        std::string::size_type v373 = v361;
      }
      else {
        std::string::size_type v373 = (void *)v10;
      }
    }
    else
    {
      std::string::size_type v373 = 0;
    }
    unint64_t v10 = (unint64_t)sub_1CC5BF31C(v325 + 2504, (uint64_t)v397, (uint64_t *)v397, v373);
    BOOL v374 = v397[0];
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
    *(void *)unint64_t v10 = v374;
    unsigned int v30 = *v21;
LABEL_447:
    size_t v331 = *(void *)(v10 + 16);
    if ((v30 & 0x400000) == 0)
    {
      if (!v331) {
        goto LABEL_76;
      }
      goto LABEL_459;
    }
    int v333 = *(const void **)(v10 + 8);
    uint64_t v334 = **(void **)*a2;
    v397[0] = a2;
    int v335 = *(_DWORD *)(v334 + 2520);
    if (v335)
    {
      uint64_t v336 = *(void *)(v334 + 2504);
      int v337 = v335 - 1;
      unsigned int v338 = v337 & ((a2 >> 4) ^ (a2 >> 9));
      unint64_t v10 = v336 + 24 * v338;
      uint64_t v339 = *(void *)v10;
      if (*(unint64_t **)v10 == a2)
      {
LABEL_456:
        if (v331 == *(void *)(v10 + 16))
        {
          if (!v331) {
            goto LABEL_76;
          }
          unint64_t v10 = memcmp(v333, *(const void **)(v10 + 8), v331);
          if (!v10) {
            goto LABEL_76;
          }
        }
LABEL_459:
        uint64_t v63 = "Appending variables with different section name need to be linked!";
        goto LABEL_129;
      }
      uint64_t v369 = 0;
      int v370 = 1;
      while (v339 != -4096)
      {
        if (v369) {
          BOOL v371 = 0;
        }
        else {
          BOOL v371 = v339 == -8192;
        }
        if (v371) {
          uint64_t v369 = (void *)v10;
        }
        unsigned int v372 = v338 + v370++;
        unsigned int v338 = v372 & v337;
        unint64_t v10 = v336 + 24 * v338;
        uint64_t v339 = *(void *)v10;
        if (*(unint64_t **)v10 == a2) {
          goto LABEL_456;
        }
      }
      if (v369) {
        uint64_t v377 = v369;
      }
      else {
        uint64_t v377 = (void *)v10;
      }
    }
    else
    {
      uint64_t v377 = 0;
    }
    unint64_t v10 = (unint64_t)sub_1CC5BF31C(v334 + 2504, (uint64_t)v397, (uint64_t *)v397, v377);
    uint64_t v378 = v397[0];
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
    *(void *)unint64_t v10 = v378;
    goto LABEL_456;
  }
  if (!v9)
  {
    char v22 = 1;
    goto LABEL_64;
  }
  if ((*((_DWORD *)v9 + 8) & 0xF) == 6) {
    goto LABEL_41;
  }
  char v22 = 0;
  int v38 = 0;
  uint64_t v3 = (unint64_t *)v9;
  if (v10)
  {
LABEL_64:
    if (!*(unsigned char *)(a1 + 921))
    {
      int v39 = v10 | a3;
      if (*((unsigned char *)a2 + 16))
      {
        if (*((unsigned char *)a2 + 16) == 3)
        {
          int v383 = v10 | a3;
          uint64_t v40 = (char *)operator new(0x78uLL);
          *((_DWORD *)v40 + 13) = *((_DWORD *)v40 + 13) & 0x38000000 | 1;
          *(void *)uint64_t v40 = 0;
          *((void *)v40 + 1) = 0;
          *((void *)v40 + 2) = 0;
          *((void *)v40 + 3) = v40 + 32;
          uint64_t v41 = *(void *)a1;
          int v42 = (llvm::PointerType *)sub_1CCB95D58(a1 + 48, (llvm::StructType *)a2[3]);
          char v43 = *((unsigned char *)a2 + 80);
          int v44 = (uint64_t **)*a2;
          if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
          {
            size_t v183 = 0;
            size_t v182 = &byte_1CFBCE98E;
            goto LABEL_248;
          }
          uint64_t v45 = **v44;
          uint64_t v46 = *(void *)(v45 + 152);
          uint64_t v47 = *(unsigned int *)(v45 + 168);
          if (v47)
          {
            LODWORD(v48) = (v47 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            int v49 = (unint64_t **)(v46 + 16 * v48);
            BOOL v50 = *v49;
            if (*v49 == a2)
            {
LABEL_247:
              uint64_t v181 = v49[1];
              uint64_t v184 = (void *)*v181;
              size_t v182 = (char *)(v181 + 2);
              size_t v183 = v184;
LABEL_248:
              __int16 v399 = 261;
              v397[0] = v182;
              v397[1] = v183;
              uint64_t v185 = v41;
              uint64_t v3 = (unint64_t *)(v40 + 32);
              size_t v186 = llvm::GlobalVariable::GlobalVariable((unint64_t *)v40 + 4, v185, v42, v43 & 1, 0, 0, (const char **)v397, 0, (*((_DWORD *)a2 + 8) >> 10) & 7, (llvm::Type *)(((unint64_t)*((unsigned int *)v44 + 2) >> 8) | 0x100000000), 0);
              int v187 = ((((*((_WORD *)a2 + 17) & 0x3F) << 16) + 16711680) & 0xFF0000) + 0x10000;
              if ((*((_WORD *)a2 + 17) & 0x3F) == 0) {
                int v187 = 0;
              }
              *((_DWORD *)v40 + 16) = v187 | *((_DWORD *)v40 + 16) & 0xFFC0FFFF;
              llvm::GlobalObject::copyAttributesFrom((llvm::GlobalObject *)v186, (const llvm::GlobalObject *)a2);
              v40[112] = v40[112] & 0xFD | a2[10] & 2;
              *((void *)v40 + 13) = a2[9];
              goto LABEL_270;
            }
            int v51 = 1;
            while (v50 != (unint64_t *)-4096)
            {
              int v52 = v48 + v51++;
              uint64_t v48 = v52 & (v47 - 1);
              BOOL v50 = *(unint64_t **)(v46 + 16 * v48);
              if (v50 == a2)
              {
                int v49 = (unint64_t **)(v46 + 16 * v48);
                goto LABEL_247;
              }
            }
          }
          int v49 = (unint64_t **)(v46 + 16 * v47);
          goto LABEL_247;
        }
        if (v39)
        {
          unint64_t v102 = (llvm::PointerType *)sub_1CCB95D58(a1 + 48, (llvm::StructType *)a2[3]);
          int v103 = *((unsigned __int8 *)a2 + 16);
          if (v103 != 1)
          {
            if (v103 != 2)
            {
LABEL_271:
              unsigned int v202 = *v21;
              size_t v204 = (unsigned int *)(v3 + 4);
              int v203 = *((_DWORD *)v3 + 8);
              unsigned int v205 = (v202 & 0xF) - 7;
              BOOL v206 = v205 >= 2;
              if (v205 >= 2) {
                unsigned int v207 = *((_DWORD *)v3 + 8);
              }
              else {
                unsigned int v207 = v203 & 0xFFFFFFC0;
              }
              unsigned int v208 = v207 & 0xFFFFFFF0 | v202 & 0xF;
              unsigned int *v204 = v208;
              if (!v206) {
                goto LABEL_367;
              }
              if ((v203 & 0x30) == 0) {
                goto LABEL_368;
              }
LABEL_365:
              if (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v3)) {
                goto LABEL_368;
              }
              unsigned int v208 = *((_DWORD *)v3 + 8);
LABEL_367:
              unsigned int *v204 = v208 | 0x4000;
LABEL_368:
              unsigned int v273 = *((unsigned __int8 *)v3 + 16);
              if (v273 <= 3
                && v273 != 1
                && (*((unsigned char *)a2 + 16) == 3
                 || !*((unsigned char *)a2 + 16) && (unint64_t *)a2[9] == a2 + 9 && (*((unsigned char *)a2 + 34) & 0x80) == 0))
              {
                llvm::GlobalObject::copyMetadata((llvm::GlobalObject *)v3, (const llvm::GlobalObject *)a2, 0);
                unsigned int v273 = *((unsigned __int8 *)v3 + 16);
              }
              if (!v273)
              {
                sub_1CD5C0280(v3, 0);
                *((_WORD *)v3 + 9) &= ~8u;
                sub_1CC5BB180(v3, 0);
                *((_WORD *)v3 + 9) &= ~2u;
                sub_1CD5C0388(v3, 0);
                *((_WORD *)v3 + 9) &= ~4u;
              }
              int v38 = v13 | a3 ^ 1;
              goto LABEL_378;
            }
            size_t v104 = (llvm::Type *)(*(_DWORD *)(*a2 + 8) >> 8);
            if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
            {
              unint64_t v353 = 0;
              uint64_t v352 = &byte_1CFBCE98E;
              goto LABEL_474;
            }
            uint64_t v105 = **(void **)*a2;
            uint64_t v106 = *(void *)(v105 + 152);
            uint64_t v107 = *(unsigned int *)(v105 + 168);
            if (v107)
            {
              LODWORD(v108) = (v107 - 1) & ((a2 >> 4) ^ (a2 >> 9));
              size_t v109 = (unint64_t **)(v106 + 16 * v108);
              uint64_t v110 = *v109;
              if (*v109 == a2)
              {
LABEL_473:
                std::string::size_type v351 = v109[1];
                unint64_t v354 = (void *)*v351;
                uint64_t v352 = (char *)(v351 + 2);
                unint64_t v353 = v354;
LABEL_474:
                __int16 v399 = 261;
                v397[0] = v352;
                v397[1] = v353;
                uint64_t v3 = llvm::GlobalIFunc::create(v102, v104, 0, (const char **)v397, 0, *(void *)a1);
                llvm::GlobalObject::copyAttributesFrom((llvm::GlobalObject *)v3, (const llvm::GlobalObject *)a2);
                goto LABEL_271;
              }
              int v111 = 1;
              while (v110 != (unint64_t *)-4096)
              {
                int v112 = v108 + v111++;
                uint64_t v108 = v112 & (v107 - 1);
                uint64_t v110 = *(unint64_t **)(v106 + 16 * v108);
                if (v110 == a2)
                {
                  size_t v109 = (unint64_t **)(v106 + 16 * v108);
                  goto LABEL_473;
                }
              }
            }
            size_t v109 = (unint64_t **)(v106 + 16 * v107);
            goto LABEL_473;
          }
          uint64_t v316 = (llvm::Type *)(*(_DWORD *)(*a2 + 8) >> 8);
          if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
          {
            uint64_t v349 = 0;
            unint64_t v348 = &byte_1CFBCE98E;
            goto LABEL_471;
          }
          uint64_t v317 = **(void **)*a2;
          uint64_t v318 = *(void *)(v317 + 152);
          uint64_t v319 = *(unsigned int *)(v317 + 168);
          if (v319)
          {
            LODWORD(v320) = (v319 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            int v321 = (unint64_t **)(v318 + 16 * v320);
            uint64_t v322 = *v321;
            if (*v321 == a2)
            {
LABEL_470:
              uint64_t v347 = v321[1];
              unint64_t v350 = (void *)*v347;
              unint64_t v348 = (char *)(v347 + 2);
              uint64_t v349 = v350;
LABEL_471:
              __int16 v399 = 261;
              v397[0] = v348;
              v397[1] = v349;
              uint64_t v3 = llvm::GlobalAlias::create(v102, v316, 0, (const char **)v397, *(void *)a1);
              llvm::GlobalValue::copyAttributesFrom((llvm::GlobalValue *)v3, (const llvm::GlobalValue *)a2);
              goto LABEL_271;
            }
            int v323 = 1;
            while (v322 != (unint64_t *)-4096)
            {
              int v324 = v320 + v323++;
              uint64_t v320 = v324 & (v319 - 1);
              uint64_t v322 = *(unint64_t **)(v318 + 16 * v320);
              if (v322 == a2)
              {
                int v321 = (unint64_t **)(v318 + 16 * v320);
                goto LABEL_470;
              }
            }
          }
          int v321 = (unint64_t **)(v318 + 16 * v319);
          goto LABEL_470;
        }
        BOOL v113 = (llvm::StructType *)a2[3];
        if (*((unsigned char *)v113 + 8) == 14)
        {
          uint64_t v114 = (llvm::PointerType *)sub_1CCB95D58(a1 + 48, v113);
          uint64_t v115 = (llvm::Type *)(*(_DWORD *)(*a2 + 8) >> 8);
          if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
          {
            char v260 = v22;
            uint64_t v263 = 0;
            int v262 = &byte_1CFBCE98E;
            goto LABEL_359;
          }
          uint64_t v116 = **(void **)*a2;
          uint64_t v117 = *(void *)(v116 + 152);
          uint64_t v118 = *(unsigned int *)(v116 + 168);
          if (v118)
          {
            LODWORD(v119) = (v118 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            unint64_t v120 = (unint64_t **)(v117 + 16 * v119);
            size_t v121 = *v120;
            if (*v120 == a2)
            {
LABEL_358:
              char v260 = v22;
              uint64_t v261 = v120[1];
              int v264 = (void *)*v261;
              int v262 = (char *)(v261 + 2);
              uint64_t v263 = v264;
LABEL_359:
              __int16 v399 = 261;
              v397[0] = v262;
              v397[1] = v263;
              unint64_t v265 = *(void *)a1;
              int v266 = (char *)operator new(0x80uLL);
              *((_DWORD *)v266 + 7) = *((_DWORD *)v266 + 7) & 0x38000000 | 0x40000000;
              *(void *)int v266 = 0;
              BOOL v267 = v115;
              uint64_t v3 = (unint64_t *)(v266 + 8);
              llvm::Function::Function((unint64_t *)v266 + 1, v114, 0, v267, (const char **)v397, v265);
              char v22 = v260;
              goto LABEL_363;
            }
            int v122 = 1;
            while (v121 != (unint64_t *)-4096)
            {
              int v123 = v119 + v122++;
              uint64_t v119 = v123 & (v118 - 1);
              size_t v121 = *(unint64_t **)(v117 + 16 * v119);
              if (v121 == a2)
              {
                unint64_t v120 = (unint64_t **)(v117 + 16 * v119);
                goto LABEL_358;
              }
            }
          }
          unint64_t v120 = (unint64_t **)(v117 + 16 * v118);
          goto LABEL_358;
        }
        size_t v139 = (char *)operator new(0x78uLL);
        uint64_t v3 = (unint64_t *)(v139 + 32);
        *((_DWORD *)v139 + 13) = *((_DWORD *)v139 + 13) & 0x38000000 | 1;
        *(void *)size_t v139 = 0;
        *((void *)v139 + 1) = 0;
        *((void *)v139 + 2) = 0;
        *((void *)v139 + 3) = v139 + 32;
        uint64_t v140 = *(void *)a1;
        uint64_t v141 = (llvm::PointerType *)sub_1CCB95D58(a1 + 48, (llvm::StructType *)a2[3]);
        uint64_t v142 = (uint64_t **)*a2;
        if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
        {
          int v270 = 0;
          uint64_t v269 = &byte_1CFBCE98E;
          goto LABEL_362;
        }
        uint64_t v143 = **v142;
        uint64_t v144 = *(void *)(v143 + 152);
        uint64_t v145 = *(unsigned int *)(v143 + 168);
        if (v145)
        {
          LODWORD(v146) = (v145 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          size_t v147 = (unint64_t **)(v144 + 16 * v146);
          size_t v148 = *v147;
          if (*v147 == a2)
          {
LABEL_361:
            uint64_t v268 = v147[1];
            uint64_t v271 = (void *)*v268;
            uint64_t v269 = (char *)(v268 + 2);
            int v270 = v271;
LABEL_362:
            __int16 v399 = 261;
            v397[0] = v269;
            v397[1] = v270;
            llvm::GlobalVariable::GlobalVariable(v3, v140, v141, 0, 0, 0, (const char **)v397, 0, (*v21 >> 10) & 7, (llvm::Type *)(((unint64_t)*((unsigned int *)v142 + 2) >> 8) | 0x100000000), 0);
            goto LABEL_363;
          }
          int v149 = 1;
          while (v148 != (unint64_t *)-4096)
          {
            int v150 = v146 + v149++;
            uint64_t v146 = v150 & (v145 - 1);
            size_t v148 = *(unint64_t **)(v144 + 16 * v146);
            if (v148 == a2)
            {
              size_t v147 = (unint64_t **)(v144 + 16 * v146);
              goto LABEL_361;
            }
          }
        }
        size_t v147 = (unint64_t **)(v144 + 16 * v145);
        goto LABEL_361;
      }
      char v385 = v22;
      int v386 = a3;
      long long v92 = (llvm::PointerType *)sub_1CCB95D58(a1 + 48, (llvm::StructType *)a2[3]);
      char v93 = (llvm::Type *)(*(_DWORD *)(*a2 + 8) >> 8);
      int v383 = v39;
      if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
      {
        uint64_t v190 = 0;
        int v189 = &byte_1CFBCE98E;
        goto LABEL_253;
      }
      uint64_t v94 = **(void **)*a2;
      uint64_t v95 = *(void *)(v94 + 152);
      uint64_t v96 = *(unsigned int *)(v94 + 168);
      if (v96)
      {
        LODWORD(v97) = (v96 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        size_t v98 = (unint64_t **)(v95 + 16 * v97);
        uint64_t v99 = *v98;
        if (*v98 == a2)
        {
LABEL_252:
          size_t v188 = v98[1];
          uint64_t v191 = (void *)*v188;
          int v189 = (char *)(v188 + 2);
          uint64_t v190 = v191;
LABEL_253:
          __int16 v399 = 261;
          v397[0] = v189;
          v397[1] = v190;
          unint64_t v192 = *(void *)a1;
          size_t v193 = operator new(0x80uLL);
          *((_DWORD *)v193 + 7) = *((_DWORD *)v193 + 7) & 0x38000000 | 0x40000000;
          *(void *)size_t v193 = 0;
          uint64_t v382 = llvm::Function::Function((unint64_t *)v193 + 1, v92, 0, v93, (const char **)v397, v192);
          llvm::Function::copyAttributesFrom((llvm::Function *)v382, (const llvm::Function *)a2);
          unint64_t v194 = 0;
          uint64_t v379 = (uint64_t *)**((void **)v193 + 1);
          uint64_t v195 = (unsigned int *)*((void *)v193 + 15);
          v397[0] = v195;
          if (v195) {
            goto LABEL_255;
          }
LABEL_254:
          for (unint64_t i = 0; v194 < i; unint64_t i = v195[2])
          {
            unint64_t v197 = v194 + 1;
            unsigned int v198 = 68;
            while (1)
            {
              if (v195)
              {
                if (v197 < v195[2])
                {
                  uint64_t v199 = *(void *)&v195[2 * v197 + 10];
                  if (v199)
                  {
                    if ((*(unsigned __int8 *)(v199 + ((unint64_t)v198 >> 3) + 12) >> (v198 & 7)))
                    {
                      uint64_t AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex((uint64_t *)v397, v194, v198);
                      if (AttributeAtIndex)
                      {
                        unint64_t v11 = *(llvm::StructType **)(AttributeAtIndex + 16);
                        if (v11) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
              if (++v198 == 74) {
                goto LABEL_267;
              }
            }
            uint64_t v201 = sub_1CCB95D58(a1 + 48, v11);
            uint64_t v195 = (unsigned int *)sub_1CCB98A9C((uint64_t *)v397, v379, v194, v198, v201);
            v397[0] = v195;
LABEL_267:
            ++v194;
            if (!v195) {
              goto LABEL_254;
            }
LABEL_255:
            ;
          }
          uint64_t v3 = v382;
          *((void *)v193 + 15) = v195;
          char v22 = v385;
          a3 = v386;
LABEL_270:
          if (v383) {
            goto LABEL_271;
          }
LABEL_363:
          if (!llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a2)) {
            goto LABEL_368;
          }
          size_t v204 = (unsigned int *)(v3 + 4);
          int v272 = *((_DWORD *)v3 + 8);
          *((_DWORD *)v3 + 8) = v272 & 0xFFFFFFF0 | 9;
          if ((v272 & 0x30) == 0) {
            goto LABEL_368;
          }
          goto LABEL_365;
        }
        int v100 = 1;
        while (v99 != (unint64_t *)-4096)
        {
          int v101 = v97 + v100++;
          uint64_t v97 = v101 & (v96 - 1);
          uint64_t v99 = *(unint64_t **)(v95 + 16 * v97);
          if (v99 == a2)
          {
            size_t v98 = (unint64_t **)(v95 + 16 * v97);
            goto LABEL_252;
          }
        }
      }
      size_t v98 = (unint64_t **)(v95 + 16 * v96);
      goto LABEL_252;
    }
    return 0;
  }
LABEL_378:
  if (!*((unsigned char *)v3 + 16))
  {
    uint64_t v282 = llvm::Intrinsic::remangleIntrinsicFunction((llvm::Intrinsic *)v3, v11);
    if (v283)
    {
      uint64_t v284 = (unint64_t *)v282;
      llvm::GlobalValue::eraseFromParent((llvm::GlobalValue *)v3);
      uint64_t v3 = v284;
      goto LABEL_392;
    }
  }
  if (!v38) {
    goto LABEL_392;
  }
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
  {
    unsigned int v287 = 0;
    unsigned int v286 = &byte_1CFBCE98E;
    goto LABEL_391;
  }
  uint64_t v274 = **(void **)*a2;
  uint64_t v275 = *(void *)(v274 + 152);
  uint64_t v276 = *(unsigned int *)(v274 + 168);
  if (!v276) {
    goto LABEL_389;
  }
  LODWORD(v277) = (v276 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v278 = (unint64_t **)(v275 + 16 * v277);
  uint64_t v279 = *v278;
  if (*v278 != a2)
  {
    int v280 = 1;
    while (v279 != (unint64_t *)-4096)
    {
      int v281 = v277 + v280++;
      uint64_t v277 = v281 & (v276 - 1);
      uint64_t v279 = *(unint64_t **)(v275 + 16 * v277);
      if (v279 == a2)
      {
        uint64_t v278 = (unint64_t **)(v275 + 16 * v277);
        goto LABEL_390;
      }
    }
LABEL_389:
    uint64_t v278 = (unint64_t **)(v275 + 16 * v276);
  }
LABEL_390:
  uint64_t v285 = v278[1];
  unsigned int v288 = (uint64_t **)*v285;
  unsigned int v286 = (char *)(v285 + 2);
  unsigned int v287 = v288;
LABEL_391:
  sub_1CCB9879C((uint64_t ***)v3, v286, v287);
LABEL_392:
  if ((v13 | a3) == 1)
  {
    int v289 = *((unsigned __int8 *)a2 + 16);
    if (v289 != 2)
    {
      uint64_t AliaseeObject = (uint64_t)a2;
      if (v289 != 1 || (uint64_t AliaseeObject = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)a2)) != 0)
      {
        uint64_t v291 = *(void *)(AliaseeObject + 48);
        if (v291)
        {
          unsigned int v292 = *((unsigned __int8 *)v3 + 16);
          if (v292 <= 3 && v292 != 1)
          {
            inserted = llvm::Module::getOrInsertComdat(*(void *)a1, (unsigned __int8 *)(*(void *)v291 + 72), **(void **)v291);
            *((_DWORD *)inserted + 2) = *(_DWORD *)(v291 + 8);
            llvm::GlobalObject::setComdat((llvm::GlobalObject *)v3, (llvm::Comdat *)inserted);
          }
        }
      }
    }
  }
  if (((v13 | a3 ^ 1) & 1) == 0) {
    *((_DWORD *)v3 + 8) = v3[4] & 0xFFFFBFC0 | 0x4007;
  }
  if (v3 == a2) {
    char v294 = 1;
  }
  else {
    char v294 = v22;
  }
  PointerBitCastOrAddrSpaceCast = (llvm::detail::IEEEFloat *)v3;
  if ((v294 & 1) == 0)
  {
    unsigned int v295 = (llvm::Constant *)sub_1CCB95D58(a1 + 48, (llvm::StructType *)*a2);
    PointerBitCastOrAddrSpaceCast = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast((llvm::ConstantExpr *)v3, v295, v296);
  }
  if (v3 == (unint64_t *)v9) {
    char v297 = 1;
  }
  else {
    char v297 = v22;
  }
  if ((v297 & 1) == 0)
  {
    unint64_t v298 = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast((llvm::ConstantExpr *)v3, *(llvm::Constant **)v9, v12);
    uint64_t v299 = v298;
    unint64_t v300 = *(llvm::detail::IEEEFloat ***)(a1 + 904);
    unint64_t v301 = *(void *)(a1 + 912);
    if ((unint64_t)v300 >= v301)
    {
      int v303 = *(char **)(a1 + 896);
      uint64_t v304 = ((char *)v300 - v303) >> 4;
      unint64_t v305 = v304 + 1;
      if ((unint64_t)(v304 + 1) >> 60) {
        goto LABEL_526;
      }
      uint64_t v306 = v301 - (void)v303;
      if (v306 >> 3 > v305) {
        unint64_t v305 = v306 >> 3;
      }
      if ((unint64_t)v306 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v307 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v307 = v305;
      }
      if (v307)
      {
        if (v307 >> 60) {
          goto LABEL_527;
        }
        uint64_t v308 = (char *)operator new(16 * v307);
      }
      else
      {
        uint64_t v308 = 0;
      }
      unsigned int v309 = (llvm::detail::IEEEFloat **)&v308[16 * v304];
      *unsigned int v309 = v9;
      v309[1] = v299;
      uint64_t v302 = v309 + 2;
      if (v300 != (llvm::detail::IEEEFloat **)v303)
      {
        do
        {
          *((_OWORD *)v309 - 1) = *((_OWORD *)v300 - 1);
          v309 -= 2;
          v300 -= 2;
        }
        while (v300 != (llvm::detail::IEEEFloat **)v303);
        unint64_t v300 = *(llvm::detail::IEEEFloat ***)(a1 + 896);
      }
      *(void *)(a1 + 896) = v309;
      *(void *)(a1 + 904) = v302;
      *(void *)(a1 + 912) = &v308[16 * v307];
      if (v300) {
        operator delete(v300);
      }
    }
    else
    {
      llvm::Value *v300 = v9;
      v300[1] = v298;
      uint64_t v302 = v300 + 2;
    }
    *(void *)(a1 + 904) = v302;
  }
LABEL_26:
  if (PointerBitCastOrAddrSpaceCast)
  {
    uint64_t v29 = *((unsigned __int8 *)PointerBitCastOrAddrSpaceCast + 16) >= 4u ? 0 : (uint64_t)PointerBitCastOrAddrSpaceCast;
    if (v29)
    {
      if (*(unsigned char *)(v29 + 16) != 3)
      {
        if (*(unsigned char *)(v29 + 16))
        {
          if (*(void *)(v29 - 32)) {
            return PointerBitCastOrAddrSpaceCast;
          }
        }
        else if (*(void *)(v29 + 72) != v29 + 72 || (*(unsigned char *)(v29 + 34) & 0x80) != 0)
        {
          return PointerBitCastOrAddrSpaceCast;
        }
LABEL_45:
        if (a3)
        {
          uint64_t v31 = *(void *)(a1 + 720);
          uint64_t v32 = *(unsigned int *)(a1 + 736);
          if (v32)
          {
            uint64_t v33 = (v32 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            unint64_t v34 = (void *)(v31 + (v33 << 6));
            uint64_t v35 = (unint64_t *)v34[3];
            if (v35 == a2) {
              goto LABEL_196;
            }
            int v36 = 1;
            while (v35 != (unint64_t *)-4096)
            {
              int v37 = v33 + v36++;
              uint64_t v33 = v37 & (v32 - 1);
              unint64_t v34 = (void *)(v31 + (v33 << 6));
              uint64_t v35 = (unint64_t *)v34[3];
              if (v35 == a2) {
                goto LABEL_196;
              }
            }
          }
          unint64_t v34 = (void *)(v31 + (v32 << 6));
LABEL_196:
          int v151 = (void *)(v31 + (v32 << 6));
          uint64_t v392 = 6;
          size_t v152 = &v393;
          if (v34 != v151)
          {
            uint64_t v153 = (char *)v34[7];
            uint64_t v393 = 0;
            int v394 = v153;
            if (v153 != (char *)-8192 && v153 != (char *)-4096 && v153 != 0)
            {
              unint64_t v155 = v34[5] & 0xFFFFFFFFFFFFFFF8;
              uint64_t v393 = *(unint64_t **)v155;
              *(void *)unint64_t v155 = &v392;
              uint64_t v392 = v155 | 6;
              if (v393) {
                *uint64_t v393 = *v393 & 7 | (unint64_t)&v393;
              }
              uint64_t v153 = v394;
            }
            goto LABEL_216;
          }
          goto LABEL_215;
        }
        uint64_t v85 = *(void *)(a1 + 784);
        uint64_t v86 = *(unsigned int *)(a1 + 800);
        if (v86)
        {
          uint64_t v87 = (v86 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          long long v88 = (void *)(v85 + (v87 << 6));
          int v89 = (unint64_t *)v88[3];
          if (v89 == a2) {
            goto LABEL_206;
          }
          int v90 = 1;
          while (v89 != (unint64_t *)-4096)
          {
            int v91 = v87 + v90++;
            uint64_t v87 = v91 & (v86 - 1);
            long long v88 = (void *)(v85 + (v87 << 6));
            int v89 = (unint64_t *)v88[3];
            if (v89 == a2) {
              goto LABEL_206;
            }
          }
        }
        long long v88 = (void *)(v85 + (v86 << 6));
LABEL_206:
        int v156 = (void *)(v85 + (v86 << 6));
        uint64_t v389 = 6;
        size_t v152 = &v390;
        if (v88 != v156)
        {
          uint64_t v153 = (char *)v88[7];
          uint64_t v390 = 0;
          unint64_t v391 = (int32x2_t ****)v153;
          if (v153 != (char *)-8192 && v153 != (char *)-4096 && v153 != 0)
          {
            unint64_t v158 = v88[5] & 0xFFFFFFFFFFFFFFF8;
            uint64_t v390 = *(unint64_t **)v158;
            *(void *)unint64_t v158 = &v389;
            uint64_t v389 = v158 | 6;
            if (v390) {
              *uint64_t v390 = *v390 & 7 | (unint64_t)&v390;
            }
            uint64_t v153 = (char *)v391;
          }
LABEL_216:
          if (a3)
          {
            if (v394 != (char *)-8192 && v394 != (char *)-4096 && v394)
            {
              unint64_t v159 = v392 & 0xFFFFFFFFFFFFFFF8;
              *(void *)(v392 & 0xFFFFFFFFFFFFFFF8) = v393;
              if (v393)
              {
                *uint64_t v393 = *v393 & 7 | v159;
              }
              else
              {
                size_t v160 = v394;
                int v161 = ***(int32x2_t ****)v394;
                unint64_t v162 = (unint64_t)v161[303];
                if (v162 <= v159)
                {
                  uint64_t v163 = v161[305].u32[0];
                  if (v162 + 16 * v163 > v159)
                  {
                    unsigned int v164 = v163 - 1;
                    LODWORD(v165) = v164 & ((v394 >> 4) ^ (v394 >> 9));
                    uint64_t v166 = (char **)(v162 + 16 * v165);
                    std::string::size_type v167 = *v166;
                    if (v394 == *v166)
                    {
LABEL_228:
                      *uint64_t v166 = (char *)-8192;
                      v161[304] = vadd_s32(v161[304], (int32x2_t)0x1FFFFFFFFLL);
                      size_t v160 = v394;
                    }
                    else
                    {
                      int v168 = 1;
                      while (v167 != (char *)-4096)
                      {
                        int v169 = v165 + v168++;
                        uint64_t v165 = v169 & v164;
                        std::string::size_type v167 = *(char **)(v162 + 16 * v165);
                        if (v394 == v167)
                        {
                          uint64_t v166 = (char **)(v162 + 16 * v165);
                          goto LABEL_228;
                        }
                      }
                    }
                    v160[17] &= ~1u;
                  }
                }
              }
            }
            if (v153 == (char *)v29) {
              return (llvm::detail::IEEEFloat *)v29;
            }
          }
          else
          {
            if (v391 != (int32x2_t ****)-8192 && v391 != (int32x2_t ****)-4096 && v391)
            {
              unint64_t v170 = v389 & 0xFFFFFFFFFFFFFFF8;
              *(void *)(v389 & 0xFFFFFFFFFFFFFFF8) = v390;
              if (v390)
              {
                *uint64_t v390 = *v390 & 7 | v170;
              }
              else
              {
                size_t v171 = v391;
                int v172 = ***v391;
                unint64_t v173 = (unint64_t)v172[303];
                if (v173 <= v170)
                {
                  uint64_t v174 = v172[305].u32[0];
                  if (v173 + 16 * v174 > v170)
                  {
                    unsigned int v175 = v174 - 1;
                    LODWORD(v176) = v175 & ((v391 >> 4) ^ (v391 >> 9));
                    uint64_t v177 = (int32x2_t *****)(v173 + 16 * v176);
                    unint64_t v178 = *v177;
                    if (v391 == *v177)
                    {
LABEL_241:
                      *uint64_t v177 = (int32x2_t ****)-8192;
                      v172[304] = vadd_s32(v172[304], (int32x2_t)0x1FFFFFFFFLL);
                      size_t v171 = v391;
                    }
                    else
                    {
                      int v179 = 1;
                      while (v178 != (int32x2_t ****)-4096)
                      {
                        int v180 = v176 + v179++;
                        uint64_t v176 = v180 & v175;
                        unint64_t v178 = *(int32x2_t *****)(v173 + 16 * v176);
                        if (v391 == v178)
                        {
                          uint64_t v177 = (int32x2_t *****)(v173 + 16 * v176);
                          goto LABEL_241;
                        }
                      }
                    }
                    *((unsigned char *)v171 + 17) &= ~1u;
                  }
                }
              }
            }
            if (v153 == (char *)v29 || !sub_1CCB98394(a1, v29, (uint64_t)a2)) {
              return (llvm::detail::IEEEFloat *)v29;
            }
          }
          if (*((unsigned char *)a2 + 16) == 3)
          {
            uint64_t v219 = *(a2 - 4);
            uint64_t v220 = *(void *)(a1 + 944);
            LODWORD(v397[0]) = 0;
            v397[1] = (void *)v29;
            v398[0] = v219;
            uint64_t v218 = v220 + 72;
          }
          else
          {
            if (!*((unsigned char *)a2 + 16))
            {
              llvm::Module::materialize((llvm::Module *)a2[5], (llvm::GlobalValue *)a2, &v388);
              if (v388)
              {
                int v215 = *(unsigned __int8 *)(a1 + 936);
                *(void *)(a1 + 928) = v388;
                if (!v215) {
                  *(unsigned char *)(a1 + 936) = 1;
                }
                return (llvm::detail::IEEEFloat *)v29;
              }
              __int16 v332 = *((_WORD *)a2 + 9);
              if ((v332 & 2) != 0)
              {
                int v340 = *((_DWORD *)a2 + 5);
                if ((v340 & 0x40000000) != 0) {
                  unint64_t v341 = (unint64_t *)*(a2 - 1);
                }
                else {
                  unint64_t v341 = &a2[-4 * (v340 & 0x7FFFFFF)];
                }
                uint64_t v342 = v341[4];
                sub_1CC5BB180((void *)v29, v342);
                __int16 v343 = *(_WORD *)(v29 + 18);
                if (v342) {
                  __int16 v344 = v343 | 2;
                }
                else {
                  __int16 v344 = v343 & 0xFFFD;
                }
                *(_WORD *)(v29 + 18) = v344;
                __int16 v332 = *((_WORD *)a2 + 9);
                if ((v332 & 4) == 0)
                {
LABEL_452:
                  if ((v332 & 8) == 0)
                  {
LABEL_481:
                    llvm::GlobalObject::copyMetadata((llvm::GlobalObject *)v29, (const llvm::GlobalObject *)a2, 0);
                    llvm::Function::stealArgumentListFrom((llvm::Function *)v29, (llvm::Function *)a2);
                    sub_1CC89D864(v29 + 72, (uint64_t *)(v29 + 72), (uint64_t *)a2 + 9);
                    uint64_t v360 = *(void *)(a1 + 944);
                    LODWORD(v397[0]) = 3;
                    v397[1] = (void *)v29;
                    uint64_t v218 = v360 + 72;
                    goto LABEL_299;
                  }
LABEL_477:
                  int v357 = *((_DWORD *)a2 + 5);
                  if ((v357 & 0x40000000) != 0) {
                    uint64_t v358 = (uint64_t *)*(a2 - 1);
                  }
                  else {
                    uint64_t v358 = (uint64_t *)&a2[-4 * (v357 & 0x7FFFFFF)];
                  }
                  __int16 v359 = *v358 != 0;
                  sub_1CD5C0280((void *)v29, *v358);
                  *(_WORD *)(v29 + 18) = *(_WORD *)(v29 + 18) & 0xFFF7 | (8 * v359);
                  goto LABEL_481;
                }
              }
              else if ((v332 & 4) == 0)
              {
                goto LABEL_452;
              }
              int v345 = *((_DWORD *)a2 + 5);
              if ((v345 & 0x40000000) != 0) {
                int v346 = (unint64_t *)*(a2 - 1);
              }
              else {
                int v346 = &a2[-4 * (v345 & 0x7FFFFFF)];
              }
              uint64_t v355 = v346[8];
              __int16 v356 = v355 != 0;
              sub_1CD5C0388((void *)v29, v355);
              *(_WORD *)(v29 + 18) = *(_WORD *)(v29 + 18) & 0xFFFB | (4 * v356);
              if ((*((_WORD *)a2 + 9) & 8) == 0) {
                goto LABEL_481;
              }
              goto LABEL_477;
            }
            uint64_t v216 = *(a2 - 4);
            uint64_t v217 = *(void *)(a1 + 944);
            LODWORD(v397[0]) = (4 * (*(_DWORD *)(a1 + 952) & 0x1FFFFFFF)) | 2;
            v397[1] = (void *)v29;
            v398[0] = v216;
            uint64_t v218 = v217 + 72;
          }
LABEL_299:
          sub_1CBC0D590(v218, (__n128 *)v397);
          return (llvm::detail::IEEEFloat *)v29;
        }
LABEL_215:
        uint64_t v153 = 0;
        llvm *v152 = 0;
        v152[1] = 0;
        goto LABEL_216;
      }
      if ((*(_DWORD *)(v29 + 20) & 0x7FFFFFF) == 0 && (*(_DWORD *)(v29 + 32) & 0xF) != 6) {
        goto LABEL_45;
      }
    }
  }
  return PointerBitCastOrAddrSpaceCast;
}

BOOL sub_1CCB98394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v28 = 0;
  uint64_t v29 = a3;
  if (sub_1CC906108((uint64_t *)(a1 + 848), &v29, &v28)) {
    return 1;
  }
  int v6 = *(_DWORD *)(a3 + 32);
  if ((v6 & 0xFu) - 7 < 2) {
    return 1;
  }
  if ((v6 & 0x400000) != 0 && *(unsigned char *)(a3 + 16) == 3)
  {
    uint64_t v8 = ***(void ***)a3;
    uint64_t v29 = a3;
    int v9 = *(_DWORD *)(v8 + 2520);
    if (v9)
    {
      uint64_t v10 = *(void *)(v8 + 2504);
      int v11 = v9 - 1;
      unsigned int v12 = v11 & ((a3 >> 4) ^ (a3 >> 9));
      int v13 = (void *)(v10 + 24 * v12);
      uint64_t v14 = *v13;
      if (*v13 == a3)
      {
LABEL_9:
        if (v13[2] == 12)
        {
          uint64_t v15 = (uint64_t *)v13[1];
          uint64_t v16 = *v15;
          int v17 = *((_DWORD *)v15 + 2);
          if (v16 == 0x7274702E6D766C6CLL && v17 == 1752462689) {
            return 1;
          }
        }
        goto LABEL_14;
      }
      char v22 = 0;
      int v23 = 1;
      while (v14 != -4096)
      {
        if (v22) {
          BOOL v24 = 0;
        }
        else {
          BOOL v24 = v14 == -8192;
        }
        if (v24) {
          char v22 = v13;
        }
        unsigned int v25 = v12 + v23++;
        unsigned int v12 = v25 & v11;
        int v13 = (void *)(v10 + 24 * v12);
        uint64_t v14 = *v13;
        if (*v13 == a3) {
          goto LABEL_9;
        }
      }
      if (v22) {
        unsigned int v26 = v22;
      }
      else {
        unsigned int v26 = v13;
      }
    }
    else
    {
      unsigned int v26 = 0;
    }
    int v13 = sub_1CC5BF31C(v8 + 2504, (uint64_t)&v29, &v29, v26);
    uint64_t v27 = v29;
    v13[1] = 0;
    void v13[2] = 0;
    *int v13 = v27;
    goto LABEL_9;
  }
LABEL_14:
  if (a2)
  {
    int v19 = *(_DWORD *)(a2 + 32);
    if ((v19 & 0xF) != 1)
    {
      if (*(unsigned char *)(a2 + 16))
      {
        if (*(unsigned char *)(a2 + 16) != 3 || (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) != 0) {
          return 0;
        }
      }
      else
      {
        BOOL result = 0;
        if ((v19 & 0x800000) != 0 || *(void *)(a2 + 72) != a2 + 72) {
          return result;
        }
      }
    }
  }
  if (*(unsigned char *)(a3 + 16))
  {
    if (*(unsigned char *)(a3 + 16) == 3 && (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) == 0) {
      return 0;
    }
  }
  else if (*(void *)(a3 + 72) == a3 + 72 && (*(unsigned char *)(a3 + 34) & 0x80) == 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 921)) {
    return 0;
  }
  LOBYTE(v29) = 0;
  unint64_t v20 = *(void *)(a1 + 40);
  if (v20 >= 8)
  {
    uint64_t v21 = (void *)(a1 + 16);
    v30[0] = &unk_1F262D410;
    v30[1] = a1;
    v30[2] = &v29;
    uint64_t v31 = v30;
    if ((v20 & 2) == 0) {
      uint64_t v21 = (void *)*v21;
    }
    (*(void (**)(void *, uint64_t, void *))(v20 & 0xFFFFFFFFFFFFFFF8))(v21, a3, v30);
    if (v31 == v30)
    {
      (*(void (**)(void *))(v30[0] + 32))(v30);
    }
    else if (v31)
    {
      (*(void (**)(void))(*v31 + 40))();
    }
  }
  return (_BYTE)v29 != 0;
}

uint64_t sub_1CCB98684(uint64_t *a1, uint64_t ***a2)
{
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0 || (a2[4] & 0xFu) - 7 < 2) {
    return 0;
  }
  uint64_t v4 = *a1;
  uint64_t v5 = ***a2;
  uint64_t v6 = *(void *)(v5 + 152);
  uint64_t v7 = *(unsigned int *)(v5 + 168);
  if (!v7) {
    goto LABEL_9;
  }
  LODWORD(v8) = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v9 = (uint64_t ****)(v6 + 16 * v8);
  uint64_t v10 = *v9;
  if (*v9 != a2)
  {
    int v11 = 1;
    while (v10 != (uint64_t ***)-4096)
    {
      int v12 = v8 + v11++;
      uint64_t v8 = v12 & (v7 - 1);
      uint64_t v10 = *(uint64_t ****)(v6 + 16 * v8);
      if (v10 == a2)
      {
        int v9 = (uint64_t ****)(v6 + 16 * v8);
        goto LABEL_10;
      }
    }
LABEL_9:
    int v9 = (uint64_t ****)(v6 + 16 * v7);
  }
LABEL_10:
  uint64_t NamedValue = llvm::Module::getNamedValue(v4, (unsigned __int8 *)v9[1] + 16, (unint64_t)*v9[1]);
  uint64_t v14 = NamedValue;
  if (NamedValue)
  {
    int v15 = *(_DWORD *)(NamedValue + 32);
    if ((v15 & 0xFu) - 7 < 2) {
      return 0;
    }
    if ((v15 & 0x2000) != 0 && !*(unsigned char *)(NamedValue + 16) && !*((unsigned char *)a2 + 16))
    {
      uint64_t v17 = *(void *)(NamedValue + 24);
      if (v17 != sub_1CCB95D58((uint64_t)(a1 + 6), (llvm::StructType *)a2[3])) {
        return 0;
      }
    }
  }
  return v14;
}

void sub_1CCB9879C(uint64_t ***a1, void *__s2, uint64_t **__n)
{
  if ((a1[4] & 0xFu) - 7 < 2) {
    return;
  }
  if ((*((unsigned char *)a1 + 23) & 0x10) == 0)
  {
    uint64_t v16 = 0;
    int v15 = &byte_1CFBCE98E;
    goto LABEL_11;
  }
  uint64_t v6 = ***a1;
  uint64_t v7 = *(void *)(v6 + 152);
  uint64_t v8 = *(unsigned int *)(v6 + 168);
  if (!v8) {
    goto LABEL_9;
  }
  LODWORD(v9) = (v8 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  uint64_t v10 = (uint64_t ****)(v7 + 16 * v9);
  int v11 = *v10;
  if (*v10 != a1)
  {
    int v12 = 1;
    while (v11 != (uint64_t ***)-4096)
    {
      int v13 = v9 + v12++;
      uint64_t v9 = v13 & (v8 - 1);
      int v11 = *(uint64_t ****)(v7 + 16 * v9);
      if (v11 == a1)
      {
        uint64_t v10 = (uint64_t ****)(v7 + 16 * v9);
        goto LABEL_10;
      }
    }
LABEL_9:
    uint64_t v10 = (uint64_t ****)(v7 + 16 * v8);
  }
LABEL_10:
  uint64_t v14 = v10[1];
  uint64_t v17 = *v14;
  int v15 = (char *)(v14 + 2);
  uint64_t v16 = v17;
LABEL_11:
  if (v16 == __n && (!__n || !memcmp(v15, __s2, (size_t)__n))) {
    return;
  }
  uint64_t NamedValue = (llvm::Value *)llvm::Module::getNamedValue((uint64_t)a1[5], (unsigned __int8 *)__s2, (unint64_t)__n);
  if (!NamedValue)
  {
    __int16 v50 = 261;
    uint64_t v48 = (const char *)__s2;
    size_t v49 = (size_t)__n;
    llvm::Value::setNameImpl((llvm::Value *)a1, &v48);
    if (*((unsigned char *)a1 + 16)) {
      return;
    }
    if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
      goto LABEL_51;
    }
    uint64_t v28 = ***a1;
    uint64_t v29 = *(void *)(v28 + 152);
    uint64_t v30 = *(unsigned int *)(v28 + 168);
    if (v30)
    {
      LODWORD(v31) = (v30 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      uint64_t v32 = (uint64_t ****)(v29 + 16 * v31);
      uint64_t v33 = *v32;
      if (*v32 == a1)
      {
LABEL_44:
        int v42 = v32[1];
        unint64_t v45 = (unint64_t)*v42;
        char v43 = v42 + 2;
        unint64_t v44 = v45;
        if (v45 >= 5 && *(_DWORD *)v43 == *(_DWORD *)"llvm." && v43[4] == aLlvm_1[4])
        {
          *((_DWORD *)a1 + 8) |= 0x2000u;
          int v47 = llvm::Function::lookupIntrinsicID(v43, v44);
LABEL_52:
          *((_DWORD *)a1 + 9) = v47;
          return;
        }
LABEL_51:
        int v47 = 0;
        *((_DWORD *)a1 + 8) &= ~0x2000u;
        goto LABEL_52;
      }
      int v34 = 1;
      while (v33 != (uint64_t ***)-4096)
      {
        int v35 = v31 + v34++;
        uint64_t v31 = v35 & (v30 - 1);
        uint64_t v33 = *(uint64_t ****)(v29 + 16 * v31);
        if (v33 == a1)
        {
          uint64_t v32 = (uint64_t ****)(v29 + 16 * v31);
          goto LABEL_44;
        }
      }
    }
    uint64_t v32 = (uint64_t ****)(v29 + 16 * v30);
    goto LABEL_44;
  }
  int v19 = NamedValue;
  llvm::Value::takeName((int32x2_t ****)a1, NamedValue);
  __int16 v50 = 261;
  uint64_t v48 = (const char *)__s2;
  size_t v49 = (size_t)__n;
  llvm::Value::setNameImpl(v19, &v48);
  if (!*((unsigned char *)v19 + 16))
  {
    if ((*((unsigned char *)v19 + 23) & 0x10) == 0) {
      goto LABEL_41;
    }
    uint64_t v20 = ***(void ***)v19;
    uint64_t v21 = *(void *)(v20 + 152);
    uint64_t v22 = *(unsigned int *)(v20 + 168);
    if (v22)
    {
      LODWORD(v23) = (v22 - 1) & ((v19 >> 4) ^ (v19 >> 9));
      BOOL v24 = (llvm::Value **)(v21 + 16 * v23);
      unsigned int v25 = *v24;
      if (*v24 == v19)
      {
LABEL_34:
        int v36 = v24[1];
        unint64_t v39 = *(void *)v36;
        int v37 = (char *)v36 + 16;
        unint64_t v38 = v39;
        if (v39 >= 5 && *(_DWORD *)v37 == *(_DWORD *)"llvm." && v37[4] == aLlvm_1[4])
        {
          *((_DWORD *)v19 + 8) |= 0x2000u;
          int v41 = llvm::Function::lookupIntrinsicID(v37, v38);
LABEL_42:
          *((_DWORD *)v19 + 9) = v41;
          return;
        }
LABEL_41:
        int v41 = 0;
        *((_DWORD *)v19 + 8) &= ~0x2000u;
        goto LABEL_42;
      }
      int v26 = 1;
      while (v25 != (llvm::Value *)-4096)
      {
        int v27 = v23 + v26++;
        uint64_t v23 = v27 & (v22 - 1);
        unsigned int v25 = *(llvm::Value **)(v21 + 16 * v23);
        if (v25 == v19)
        {
          BOOL v24 = (llvm::Value **)(v21 + 16 * v23);
          goto LABEL_34;
        }
      }
    }
    BOOL v24 = (llvm::Value **)(v21 + 16 * v22);
    goto LABEL_34;
  }
}