uint64_t *sub_1CC6AFC28(uint64_t *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *result;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if (v3)
  {
    LODWORD(v4) = (37 * *a2) & (v3 - 1);
    result = (uint64_t *)(v2 + 16 * v4);
    v6 = *result;
    if (*a2 == *result) {
      return result;
    }
    v7 = 1;
    while (v6 != -1)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(void *)(v2 + 16 * v4);
      if (*a2 == v6) {
        return (uint64_t *)(v2 + 16 * v4);
      }
    }
  }
  return (uint64_t *)(v2 + 16 * v3);
}

uint64_t llvm::DWARFVerifier::verifyNameIndexBuckets(llvm::raw_ostream **this, const llvm::DWARFDebugNames::NameIndex *a2, const llvm::DataExtractor *a3)
{
  unsigned int v4 = *((_DWORD *)a2 + 12);
  if (v4)
  {
    if (v4 == -1)
    {
      v5 = 0;
      v6 = 0;
    }
    else
    {
      v5 = (unsigned int *)operator new(8 * (v4 + 1));
      v6 = (char *)&v5[2 * v4 + 2];
    }
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    LODWORD(v76[0]) = 0;
    v9 = v5;
    do
    {
      LODWORD(v71) = 0;
      v53.n128_u64[0] = *((void *)a2 + 15) + 4 * v8;
      unsigned int v10 = sub_1CD8337FC(*((void *)a2 + 12) + 8, v53.n128_u64, 0);
      LODWORD(v71) = v10;
      if (v10 > *((_DWORD *)a2 + 13))
      {
        v19 = llvm::WithColor::error(*this, "", 0, 0);
        v20 = (unsigned int *)*((void *)a2 + 13);
        int v21 = *((_DWORD *)a2 + 13);
        v53.n128_u64[0] = (unint64_t)"Bucket {0} of Name Index @ {1:x} contains invalid value {2}. Valid range is [0, {3}].\n";
        v53.n128_u64[1] = 86;
        v54 = &v64;
        uint64_t v55 = 4;
        v56 = &unk_1F2617FC0;
        v57 = v76;
        v58 = (void **)&unk_1F26014A0;
        v59 = v20;
        v60 = &unk_1F2617FC0;
        v61 = (unsigned __int32 *)&v71;
        v62 = (void **)&unk_1F2619290;
        LODWORD(v63) = v21;
        v64 = &v56;
        v65 = &v58;
        v66 = &v60;
        v67 = &v62;
        sub_1CD862C68((uint64_t)&v53, v19);
        uint64_t v7 = (v7 + 1);
      }
      else
      {
        unsigned int v11 = v10;
        if (v10)
        {
          if (v5 >= (unsigned int *)v6)
          {
            uint64_t v12 = ((char *)v5 - (char *)v9) >> 3;
            unint64_t v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 61) {
              goto LABEL_70;
            }
            if ((v6 - (char *)v9) >> 2 > v13) {
              unint64_t v13 = (v6 - (char *)v9) >> 2;
            }
            if ((unint64_t)(v6 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v14 = v13;
            }
            if (v14 >> 61) {
              goto LABEL_71;
            }
            v15 = (char *)operator new(8 * v14);
            v16 = &v15[8 * v12];
            *(_DWORD *)v16 = v76[0];
            *((_DWORD *)v16 + 1) = v11;
            v17 = v16;
            while (v5 != v9)
            {
              uint64_t v18 = *((void *)v5 - 1);
              v5 -= 2;
              *((void *)v17 - 1) = v18;
              v17 -= 8;
            }
            v6 = &v15[8 * v14];
            v5 = (unsigned int *)(v16 + 8);
            if (v9) {
              operator delete(v9);
            }
            v9 = (unsigned int *)v17;
          }
          else
          {
            unsigned int *v5 = v76[0];
            v5[1] = v10;
            v5 += 2;
          }
        }
      }
      unsigned int v8 = LODWORD(v76[0]) + 1;
      LODWORD(v76[0]) = v8;
    }
    while (v8 < v4);
    if (!v7)
    {
      uint64_t v23 = (char *)v5 - (char *)v9;
      if ((char *)v5 - (char *)v9 >= 16) {
        qsort(v9, (unint64_t)v23 >> 3, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CC6B370C);
      }
      unsigned int v24 = *((_DWORD *)a2 + 12);
      int v25 = *((_DWORD *)a2 + 13) + 1;
      if (v5 >= (unsigned int *)v6)
      {
        uint64_t v27 = v23 >> 3;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 61) {
LABEL_70:
        }
          abort();
        if ((v6 - (char *)v9) >> 2 > v28) {
          unint64_t v28 = (v6 - (char *)v9) >> 2;
        }
        if ((unint64_t)(v6 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v28 >> 61) {
LABEL_71:
        }
          sub_1CB833614();
        v29 = (unsigned int *)((char *)operator new(8 * v28) + 8 * v27);
        unsigned int *v29 = v24;
        v29[1] = v25;
        v26 = v29 + 2;
        while (v5 != v9)
        {
          uint64_t v30 = *((void *)v5 - 1);
          v5 -= 2;
          *((void *)v29 - 1) = v30;
          v29 -= 2;
        }
        if (v9) {
          operator delete(v9);
        }
        v9 = v29;
      }
      else
      {
        unsigned int *v5 = v24;
        v5[1] = v25;
        v26 = v5 + 2;
      }
      unsigned int v75 = 1;
      if (v9 == v26)
      {
        uint64_t v7 = 0;
      }
      else
      {
        uint64_t v7 = 0;
        v31 = &v62;
        unsigned __int32 i = 1;
        v33 = v9;
        do
        {
          unsigned __int32 v34 = v33[1];
          if (v34 > i)
          {
            v42 = llvm::WithColor::error(*this, "", 0, 0);
            v43 = (unint64_t *)*((void *)a2 + 13);
            int v44 = v33[1] - 1;
            v53.n128_u64[0] = (unint64_t)"Name Index @ {0:x}: Name table entries [{1}, {2}] are not covered by the hash table.\n";
            v53.n128_u64[1] = 85;
            v54 = v31;
            uint64_t v55 = 3;
            v56 = &unk_1F26014A0;
            v57 = v43;
            v58 = (void **)&unk_1F2617FC0;
            v59 = &v75;
            v60 = &unk_1F2619290;
            LODWORD(v61) = v44;
            v62 = &v56;
            v63 = &v58;
            v64 = &v60;
            sub_1CD862C68((uint64_t)&v53, v42);
            uint64_t v7 = (v7 + 1);
            unsigned __int32 v34 = v33[1];
          }
          unsigned __int32 v74 = v34;
          if (*v33 == *((_DWORD *)a2 + 12)) {
            break;
          }
          unsigned int v73 = 0;
          v53.n128_u64[0] = *((void *)a2 + 16) + 4 * v34 - 4;
          unsigned int v73 = sub_1CD8337FC(*((void *)a2 + 12) + 8, v53.n128_u64, 0);
          if (v73 % *((_DWORD *)a2 + 12) != *v33)
          {
            v45 = llvm::WithColor::error(*this, "", 0, 0);
            v46 = (unint64_t *)*((void *)a2 + 13);
            unsigned int v47 = *((_DWORD *)a2 + 12);
            v53.n128_u64[0] = (unint64_t)"Name Index @ {0:x}: Bucket {1} is not empty but points to a mismatched h"
                                                "ash value {2:x} (belonging to bucket {3}).\n";
            v53.n128_u64[1] = 115;
            v54 = &v64;
            uint64_t v55 = 4;
            v56 = &unk_1F26014A0;
            v57 = v46;
            v58 = (void **)&unk_1F2607908;
            v59 = v33;
            v60 = &unk_1F2617FC0;
            v61 = &v73;
            v62 = (void **)&unk_1F2619290;
            LODWORD(v63) = v73 % v47;
            v64 = &v56;
            v65 = &v58;
            v66 = &v60;
            v67 = v31;
            sub_1CD862C68((uint64_t)&v53, v45);
            uint64_t v7 = (v7 + 1);
          }
          for (unsigned __int32 i = v74; i <= *((_DWORD *)a2 + 13); unsigned __int32 i = ++v74)
          {
            unsigned int v72 = 0;
            v53.n128_u64[0] = *((void *)a2 + 16) + 4 * i - 4;
            unsigned int v72 = sub_1CD8337FC(*((void *)a2 + 12) + 8, v53.n128_u64, 0);
            if (v72 % *((_DWORD *)a2 + 12) != *v33)
            {
              unsigned __int32 i = v74;
              break;
            }
            v71 = 0;
            llvm::DWARFDebugNames::NameIndex::getNameTableEntry(a2, v74, &v53);
            v76[0] = (unint64_t)v56;
            CStrRef = (unsigned int *)llvm::DataExtractor::getCStrRef((uint64_t *)&v53, v76, 0);
            v36 = CStrRef;
            v37 = 0;
            v71 = (char *)CStrRef;
            if (CStrRef) {
              v37 = (char *)strlen((const char *)CStrRef);
            }
            unsigned int v38 = llvm::caseFoldingDjbHash(v36, v37, 5381);
            if (v38 != v72)
            {
              v51 = v31;
              v50 = llvm::WithColor::error(*this, "", 0, 0);
              v39 = 0;
              v40 = (unint64_t *)*((void *)a2 + 13);
              if (v71) {
                v39 = (char *)strlen(v71);
              }
              unsigned int v41 = llvm::caseFoldingDjbHash((unsigned int *)v71, v39, 5381);
              v53.n128_u64[0] = (unint64_t)"Name Index @ {0:x}: String ({1}) at index {2} hashes to {3:x}, but the"
                                                  " Name Index hash is {4:x}\n";
              v53.n128_u64[1] = 96;
              v54 = &v66;
              uint64_t v55 = 5;
              v56 = &unk_1F26014A0;
              v57 = v40;
              v58 = (void **)&unk_1F26195E0;
              v59 = (unsigned int *)&v71;
              v60 = &unk_1F2617FC0;
              v61 = &v74;
              v31 = v51;
              v62 = (void **)&unk_1F2619290;
              LODWORD(v63) = v41;
              v64 = (void **)&unk_1F2617FC0;
              v65 = (void ***)&v72;
              v66 = &v56;
              v67 = &v58;
              v68 = &v60;
              v69 = v51;
              v70 = &v64;
              sub_1CD862C68((uint64_t)&v53, v50);
              uint64_t v7 = (v7 + 1);
            }
          }
          if (v75 > i) {
            unsigned __int32 i = v75;
          }
          unsigned int v75 = i;
          v33 += 2;
        }
        while (v33 != v26);
      }
    }
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    v48 = llvm::WithColor::warning(*this, "", 0, 0);
    v49 = (unint64_t *)*((void *)a2 + 13);
    v53.n128_u64[0] = (unint64_t)"Name Index @ {0:x} does not contain a hash table.\n";
    v53.n128_u64[1] = 50;
    v54 = &v58;
    uint64_t v55 = 1;
    v56 = &unk_1F26014A0;
    v57 = v49;
    v58 = &v56;
    sub_1CD862C68((uint64_t)&v53, v48);
    return 0;
  }
  return v7;
}

uint64_t llvm::DWARFVerifier::verifyNameIndexAttribute(llvm::raw_ostream **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v38 = a4;
  llvm::dwarf::FormEncodingString((llvm::dwarf *)WORD2(a4));
  if (!v8)
  {
    v9 = llvm::WithColor::error(*a1, "", 0, 0);
    uint64_t v10 = *(void *)(a2 + 104);
    v19 = "NameIndex @ {0:x}: Abbreviation {1:x}: {2} uses an unknown form: {3}.\n";
    uint64_t v20 = 70;
    int v21 = &v31;
    uint64_t v22 = 4;
    uint64_t v23 = &unk_1F26014A0;
    uint64_t v24 = v10;
    int v25 = &unk_1F2607908;
    uint64_t v26 = a3;
    uint64_t v27 = &unk_1F2619610;
    unint64_t v28 = (char *)&v38;
    v29 = (void **)&unk_1F26191D0;
    uint64_t v30 = (void **)((char *)&v38 + 4);
LABEL_6:
    v31 = &v23;
    v32 = &v25;
    v33 = &v27;
    unsigned __int32 v34 = (void **)&v29;
LABEL_7:
    sub_1CD862C68((uint64_t)&v19, v9);
    return 1;
  }
  if (a4 == 5 && WORD2(a4) != 7)
  {
    v9 = llvm::WithColor::error(*a1, "", 0, 0);
    uint64_t v11 = *(void *)(a2 + 104);
    v19 = "NameIndex @ {0:x}: Abbreviation {1:x}: DW_IDX_type_hash uses an unexpected form {2} (should be {3}).\n";
    uint64_t v20 = 101;
    int v21 = &v31;
    uint64_t v22 = 4;
    uint64_t v23 = &unk_1F26014A0;
    uint64_t v24 = v11;
    int v25 = &unk_1F2607908;
    uint64_t v26 = a3;
    uint64_t v27 = &unk_1F26191D0;
    unint64_t v28 = (char *)&v38 + 4;
    v29 = (void **)&unk_1F2619640;
    LOWORD(v30) = 7;
    goto LABEL_6;
  }
  uint64_t v13 = 0;
  while (dword_1E6849BA0[v13] != a4)
  {
    v13 += 6;
    if (v13 == 24)
    {
      unint64_t v14 = llvm::WithColor::warning(*a1, "", 0, 0);
      uint64_t v15 = *(void *)(a2 + 104);
      v19 = "NameIndex @ {0:x}: Abbreviation {1:x} contains an unknown index attribute: {2}.\n";
      uint64_t v20 = 80;
      int v21 = &v29;
      uint64_t v22 = 3;
      uint64_t v23 = &unk_1F26014A0;
      uint64_t v24 = v15;
      int v25 = &unk_1F2607908;
      uint64_t v26 = a3;
      uint64_t v27 = &unk_1F2619610;
      unint64_t v28 = (char *)&v38;
      v29 = &v23;
      uint64_t v30 = &v25;
      v31 = &v27;
      sub_1CD862C68((uint64_t)&v19, v14);
      return 0;
    }
  }
  LOWORD(v19) = WORD2(a4);
  BYTE2(v19) = 0;
  v16 = &dword_1E6849BA0[v13];
  uint64_t v20 = 0;
  int v21 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  char isFormClass = llvm::DWARFFormValue::isFormClass((unsigned __int16 *)&v19, dword_1E6849BA0[v13 + 1]);
  uint64_t result = 0;
  if ((isFormClass & 1) == 0)
  {
    v9 = llvm::WithColor::error(*a1, "", 0, 0);
    uint64_t v18 = *(void *)(a2 + 104);
    v19 = "NameIndex @ {0:x}: Abbreviation {1:x}: {2} uses an unexpected form {3} (expected form class {4}).\n";
    uint64_t v20 = 98;
    int v21 = &v33;
    uint64_t v22 = 5;
    uint64_t v23 = &unk_1F26014A0;
    uint64_t v24 = v18;
    int v25 = &unk_1F2607908;
    uint64_t v26 = a3;
    uint64_t v27 = &unk_1F2619610;
    unint64_t v28 = (char *)&v38;
    v29 = (void **)&unk_1F26191D0;
    uint64_t v30 = (void **)((char *)&v38 + 4);
    v31 = (void **)&unk_1F2619670;
    v32 = (void **)(v16 + 2);
    v33 = &v23;
    unsigned __int32 v34 = &v25;
    v35 = &v27;
    v36 = &v29;
    v37 = &v31;
    goto LABEL_7;
  }
  return result;
}

uint64_t llvm::DWARFVerifier::verifyNameIndexAbbrevs(llvm::raw_ostream **a1, uint64_t a2)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 40) + *(_DWORD *)(a2 + 44))
  {
    unsigned int v47 = llvm::WithColor::warning(*a1, "", 0, 0);
    uint64_t v48 = *(void *)(a2 + 104);
    v52 = "Name Index @ {0:x}: Verifying indexes of type units is not currently supported.\n";
    uint64_t v53 = 80;
    v54 = &v58;
    uint64_t v55 = 1;
    v56 = &unk_1F26014A0;
    uint64_t v57 = v48;
    v58 = &v56;
    sub_1CD862C68((uint64_t)&v52, v47);
    return 0;
  }
  if (!*(_DWORD *)(a2 + 8)) {
    return 0;
  }
  uint64_t v3 = *(unsigned int *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = 32 * v3;
    for (uint64_t i = *(void *)a2; (*(_DWORD *)i + 1) <= 1; i += 32)
    {
      v4 -= 32;
      if (!v4) {
        return 0;
      }
    }
  }
  else
  {
    uint64_t i = *(void *)a2;
  }
  uint64_t v6 = *(void *)a2 + 32 * v3;
  if (v6 == i) {
    return 0;
  }
  LODWORD(v7) = 0;
  uint64_t v50 = *(void *)a2 + 32 * v3;
LABEL_11:
  llvm::dwarf::TagString((llvm::dwarf *)*(unsigned __int16 *)(i + 4));
  if (!v8)
  {
    v45 = llvm::WithColor::warning(*a1, "", 0, 0);
    uint64_t v46 = *(void *)(a2 + 104);
    v52 = "NameIndex @ {0:x}: Abbreviation {1:x} references an unknown tag: {2}.\n";
    uint64_t v53 = 70;
    v54 = &v62;
    uint64_t v55 = 3;
    v56 = &unk_1F26014A0;
    uint64_t v57 = v46;
    v58 = (void **)&unk_1F2607908;
    uint64_t v59 = i;
    v60 = &unk_1F26189A8;
    v61 = (uint64_t *)(i + 4);
    v62 = &v56;
    v63 = &v58;
    v64 = &v60;
    sub_1CD862C68((uint64_t)&v52, v45);
  }
  v65 = v67;
  uint64_t v66 = 0x500000000;
  v69 = 0;
  uint64_t v70 = 0;
  v68 = &v69;
  uint64_t v10 = *(uint64_t **)(i + 8);
  v9 = *(uint64_t **)(i + 16);
  if (v10 == v9)
  {
    if (*(_DWORD *)(a2 + 36) > 1u) {
      goto LABEL_83;
    }
    goto LABEL_91;
  }
  do
  {
    unsigned int v12 = *(_DWORD *)v10;
    if (v70)
    {
      uint64_t v13 = v69;
      unint64_t v14 = &v69;
      uint64_t v15 = &v69;
      if (v69)
      {
        do
        {
          while (1)
          {
            uint64_t v15 = (uint64_t **)v13;
            unsigned int v16 = *((_DWORD *)v13 + 7);
            if (v12 >= v16) {
              break;
            }
            uint64_t v13 = *v15;
            unint64_t v14 = v15;
            if (!*v15) {
              goto LABEL_56;
            }
          }
          if (v16 >= v12) {
            goto LABEL_48;
          }
          uint64_t v13 = v15[1];
        }
        while (v13);
        unint64_t v14 = v15 + 1;
      }
LABEL_56:
      uint64_t v11 = operator new(0x20uLL);
      v11[7] = v12;
      *(void *)uint64_t v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = v15;
      *unint64_t v14 = (uint64_t *)v11;
      if (*v68)
      {
        v68 = (uint64_t **)*v68;
        uint64_t v11 = *v14;
      }
    }
    else
    {
      unsigned int v17 = v66;
      if (!v66)
      {
LABEL_34:
        if (v66 >= HIDWORD(v66)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v65 + v66) = v12;
        LODWORD(v66) = v66 + 1;
        goto LABEL_59;
      }
      uint64_t v18 = 4 * v66;
      v19 = v65;
      while (*v19 != v12)
      {
        ++v19;
        v18 -= 4;
        if (!v18) {
          goto LABEL_33;
        }
      }
      if (v18)
      {
LABEL_48:
        uint64_t v27 = llvm::WithColor::error(*a1, "", 0, 0);
        uint64_t v28 = *(void *)(a2 + 104);
        v52 = "NameIndex @ {0:x}: Abbreviation {1:x} contains multiple {2} attributes.\n";
        uint64_t v53 = 72;
        v54 = &v62;
        uint64_t v55 = 3;
        v56 = &unk_1F26014A0;
        uint64_t v57 = v28;
        v58 = (void **)&unk_1F2607908;
        uint64_t v59 = i;
        v60 = &unk_1F26189D8;
        v61 = v10;
        v62 = &v56;
        v63 = &v58;
        v64 = &v60;
        sub_1CD862C68((uint64_t)&v52, v27);
        uint64_t v7 = (v7 + 1);
        goto LABEL_60;
      }
LABEL_33:
      if (v66 < 5) {
        goto LABEL_34;
      }
      do
      {
        uint64_t v20 = v69;
        int v21 = (char *)v65 + 4 * v17;
        uint64_t v22 = &v69;
        uint64_t v23 = &v69;
        if (v69)
        {
          unsigned int v24 = *((_DWORD *)v21 - 1);
          do
          {
            while (1)
            {
              uint64_t v23 = (uint64_t **)v20;
              unsigned int v25 = *((_DWORD *)v20 + 7);
              if (v24 >= v25) {
                break;
              }
              uint64_t v20 = *v23;
              uint64_t v22 = v23;
              if (!*v23) {
                goto LABEL_43;
              }
            }
            if (v25 >= v24) {
              goto LABEL_46;
            }
            uint64_t v20 = v23[1];
          }
          while (v20);
          uint64_t v22 = v23 + 1;
        }
LABEL_43:
        uint64_t v26 = operator new(0x20uLL);
        v26[7] = *((_DWORD *)v21 - 1);
        *(void *)uint64_t v26 = 0;
        *((void *)v26 + 1) = 0;
        *((void *)v26 + 2) = v23;
        *uint64_t v22 = (uint64_t *)v26;
        if (*v68)
        {
          v68 = (uint64_t **)*v68;
          uint64_t v26 = *v22;
        }
        sub_1CB8358B8(v69, (uint64_t *)v26);
        ++v70;
        unsigned int v17 = v66;
LABEL_46:
        LODWORD(v66) = --v17;
      }
      while (v17);
      v29 = v69;
      uint64_t v30 = &v69;
      v31 = &v69;
      if (v69)
      {
        do
        {
          while (1)
          {
            v31 = (uint64_t **)v29;
            unsigned int v32 = *((_DWORD *)v29 + 7);
            if (v12 >= v32) {
              break;
            }
            v29 = *v31;
            uint64_t v30 = v31;
            if (!*v31) {
              goto LABEL_16;
            }
          }
          if (v32 >= v12) {
            goto LABEL_59;
          }
          v29 = v31[1];
        }
        while (v29);
        uint64_t v30 = v31 + 1;
      }
LABEL_16:
      uint64_t v11 = operator new(0x20uLL);
      v11[7] = v12;
      *(void *)uint64_t v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = v31;
      *uint64_t v30 = (uint64_t *)v11;
      if (*v68)
      {
        v68 = (uint64_t **)*v68;
        uint64_t v11 = *v30;
      }
    }
    sub_1CB8358B8(v69, (uint64_t *)v11);
    ++v70;
LABEL_59:
    uint64_t v7 = llvm::DWARFVerifier::verifyNameIndexAttribute(a1, a2, i, *v10) + v7;
LABEL_60:
    ++v10;
  }
  while (v10 != v9);
  if (*(_DWORD *)(a2 + 36) <= 1u)
  {
    uint64_t v6 = v50;
    if (!v70) {
      goto LABEL_84;
    }
    goto LABEL_70;
  }
  uint64_t v6 = v50;
  if (v70)
  {
    v33 = v69;
    for (j = v69; j; j = (uint64_t *)*j)
    {
      unsigned int v35 = *((_DWORD *)j + 7);
      if (v35 <= 1)
      {
        if (v35) {
          goto LABEL_72;
        }
        ++j;
      }
    }
    goto LABEL_83;
  }
  uint64_t v37 = v66;
  if (!v66) {
    goto LABEL_83;
  }
  uint64_t v38 = 0;
  v39 = v65;
  while (*(_DWORD *)((char *)v65 + v38) != 1)
  {
    v38 += 4;
    if (4 * v66 == v38) {
      goto LABEL_83;
    }
  }
  if (v38 != 4 * v66)
  {
LABEL_85:
    if (!v37) {
      goto LABEL_91;
    }
    uint64_t v42 = 4 * v37;
    while (*v39 != 3)
    {
      ++v39;
      v42 -= 4;
      if (!v42) {
        goto LABEL_91;
      }
    }
    if (!v42) {
      goto LABEL_91;
    }
  }
  else
  {
LABEL_83:
    v40 = llvm::WithColor::error(*a1, "", 0, 0);
    uint64_t v41 = *(void *)(a2 + 104);
    v52 = "NameIndex @ {0:x}: Indexing multiple compile units and abbreviation {1:x} has no {2} attribute.\n";
    uint64_t v53 = 96;
    v54 = &v62;
    uint64_t v55 = 3;
    v56 = &unk_1F26014A0;
    uint64_t v57 = v41;
    v58 = (void **)&unk_1F2607908;
    uint64_t v59 = i;
    v60 = &unk_1F26196A0;
    LODWORD(v61) = 1;
    v62 = &v56;
    v63 = &v58;
    v64 = &v60;
    sub_1CD862C68((uint64_t)&v52, v40);
    uint64_t v7 = (v7 + 1);
    if (!v70)
    {
LABEL_84:
      v39 = v65;
      uint64_t v37 = v66;
      goto LABEL_85;
    }
LABEL_70:
    v33 = v69;
LABEL_72:
    while (v33)
    {
      unsigned int v36 = *((_DWORD *)v33 + 7);
      if (v36 <= 3)
      {
        if (v36 == 3) {
          goto LABEL_92;
        }
        ++v33;
      }
      v33 = (uint64_t *)*v33;
    }
LABEL_91:
    v43 = llvm::WithColor::error(*a1, "", 0, 0);
    uint64_t v44 = *(void *)(a2 + 104);
    v52 = "NameIndex @ {0:x}: Abbreviation {1:x} has no {2} attribute.\n";
    uint64_t v53 = 60;
    v54 = &v62;
    uint64_t v55 = 3;
    v56 = &unk_1F26014A0;
    uint64_t v57 = v44;
    v58 = (void **)&unk_1F2607908;
    uint64_t v59 = i;
    v60 = &unk_1F26196A0;
    LODWORD(v61) = 3;
    v62 = &v56;
    v63 = &v58;
    v64 = &v60;
    sub_1CD862C68((uint64_t)&v52, v43);
    uint64_t v7 = (v7 + 1);
  }
LABEL_92:
  sub_1CB833A08((uint64_t)&v68, v69);
  if (v65 != v67) {
    free(v65);
  }
  while (1)
  {
    i += 32;
    if (i == v6) {
      return v7;
    }
    if ((*(_DWORD *)i + 1) > 1)
    {
      if (i != v6) {
        goto LABEL_11;
      }
      return v7;
    }
  }
}

uint64_t llvm::DWARFVerifier::verifyNameIndexEntries(llvm::raw_ostream **a1, llvm::DWARFDebugNames::NameIndex *a2, uint64_t a3)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  if (!(*((_DWORD *)a2 + 10) + *((_DWORD *)a2 + 11)))
  {
    v92 = *(const char **)(a3 + 32);
    CStrRef = (const char *)llvm::DataExtractor::getCStrRef((uint64_t *)a3, (unint64_t *)&v92, 0);
    if (!CStrRef)
    {
      uint64_t v50 = llvm::WithColor::error(*a1, "", 0, 0);
      uint64_t v51 = *((void *)a2 + 13);
      int v52 = *(_DWORD *)(a3 + 24);
      v92 = "Name Index @ {0:x}: Unable to get string associated with name {1}.\n";
      uint64_t v93 = 67;
      uint64_t v94 = (uint64_t)v99;
      uint64_t v95 = 2;
      v96[0] = &unk_1F26014A0;
      v96[1] = v51;
      v97 = &unk_1F2619290;
      int v98 = v52;
      v99[0] = v96;
      v99[1] = &v97;
      sub_1CD862C68((uint64_t)&v92, v50);
      return 1;
    }
    v61 = CStrRef;
    size_t v62 = strlen(CStrRef);
    unint64_t v59 = *(void *)(a3 + 40);
    uint64_t v60 = 0;
    unint64_t v58 = v59;
    llvm::DWARFDebugNames::NameIndex::getEntry(a2, &v58, (uint64_t)&v92);
    if ((v101 & 1) == 0)
    {
      v9 = &v71;
      uint64_t v10 = &v73;
      uint64_t v11 = &v75;
      do
      {
        LODWORD(v64) = 0;
        unsigned int CUIndex = llvm::DWARFDebugNames::Entry::getCUIndex((llvm::DWARFDebugNames::Entry *)&v92);
        LODWORD(v64) = CUIndex;
        if (*((_DWORD *)a2 + 9) >= CUIndex)
        {
          if (*((unsigned char *)a2 + 32)) {
            int v16 = 8;
          }
          else {
            int v16 = 4;
          }
          uint64_t v17 = *((void *)a2 + 14);
          if (*((unsigned char *)a2 + 32)) {
            char v18 = 3;
          }
          else {
            char v18 = 2;
          }
          uint64_t v66 = 0;
          v67 = (const char *)(v17 + (CUIndex << v18));
          RelocatedValue = (char *)llvm::DWARFDataExtractor::getRelocatedValue(*((void *)a2 + 12) + 8, v16, (unint64_t *)&v67, 0, 0);
          v65 = 0;
          uint64_t v66 = RelocatedValue;
          v65 = &RelocatedValue[llvm::DWARFDebugNames::Entry::getDIEUnitOffset((llvm::DWARFDebugNames::Entry *)&v92)];
          DIEForOffset = llvm::DWARFContext::getDIEForOffset((uint64_t **)a1[1], (unint64_t)v65);
          v56 = (char *)DIEForOffset;
          uint64_t v57 = v21;
          if (DIEForOffset) {
            BOOL v22 = v21 == 0;
          }
          else {
            BOOL v22 = 1;
          }
          if (!v22)
          {
            if (*((char **)DIEForOffset + 3) != v66)
            {
              v33 = llvm::WithColor::error(*a1, "", 0, 0);
              unsigned __int32 v34 = (char *)*((void *)a2 + 13);
              unsigned int v35 = (void *)*((void *)v56 + 3);
              v67 = "Name Index @ {0:x}: Entry @ {1:x}: mismatched CU of DIE @ {2:x}: index - {3:x}; debug_info - {4:x}.\n";
              uint64_t v68 = 100;
              v69 = (void **)&v81;
              uint64_t v70 = 5;
              uint64_t v71 = (const char **)&unk_1F26014A0;
              unsigned int v72 = v34;
              unsigned int v73 = &unk_1F2619590;
              unsigned __int32 v74 = &v59;
              unsigned int v75 = &unk_1F2619590;
              v76 = &v65;
              v77 = (const char ***)&unk_1F2619590;
              v78 = &v66;
              v79 = (void **)&unk_1F26014A0;
              v80 = v35;
              v81 = v9;
              v82 = v10;
              v83 = v11;
              v84 = (void **)&v77;
              v85 = (void **)&v79;
              sub_1CD862C68((uint64_t)&v67, v33);
              ++HIDWORD(v60);
              uint64_t v21 = v57;
            }
            uint64_t v23 = *(void *)(v21 + 16);
            if (v23) {
              LODWORD(v23) = *(unsigned __int16 *)(v23 + 4);
            }
            if (v23 != *(unsigned __int16 *)(*((void *)&v100 + 1) + 4))
            {
              unsigned int v36 = llvm::WithColor::error(*a1, "", 0, 0);
              __int16 v37 = 0;
              uint64_t v38 = *(void *)(v57 + 16);
              if (v38) {
                __int16 v37 = *(_WORD *)(v38 + 4);
              }
              v39 = (char *)*((void *)a2 + 13);
              __int16 v40 = *(_WORD *)(*((void *)&v100 + 1) + 4);
              v67 = "Name Index @ {0:x}: Entry @ {1:x}: mismatched Tag of DIE @ {2:x}: index - {3}; debug_info - {4}.\n";
              uint64_t v68 = 97;
              v69 = (void **)&v81;
              uint64_t v70 = 5;
              uint64_t v71 = (const char **)&unk_1F26014A0;
              unsigned int v72 = v39;
              unsigned int v73 = &unk_1F2619590;
              unsigned __int32 v74 = &v59;
              unsigned int v75 = &unk_1F2619590;
              v76 = &v65;
              v77 = (const char ***)&unk_1F26186E0;
              LOWORD(v78) = v40;
              v79 = (void **)&unk_1F26186E0;
              LOWORD(v80) = v37;
              v81 = v9;
              v82 = v10;
              v83 = v11;
              v84 = (void **)&v77;
              v85 = (void **)&v79;
              sub_1CD862C68((uint64_t)&v67, v36);
              ++HIDWORD(v60);
            }
            unsigned int v24 = v11;
            sub_1CC6B1B6C((uint64_t)&v89, (llvm::DWARFDie *)&v56, 1);
            unsigned int v25 = v89;
            uint64_t v26 = v90;
            uint64_t v27 = (char *)v89;
            if (v90)
            {
              v54 = v10;
              uint64_t v55 = v9;
              uint64_t v28 = v61;
              size_t v29 = v62;
              uint64_t v30 = 16 * v90;
              uint64_t v27 = (char *)v89;
              uint64_t v53 = (char *)v89 + v30;
              while (*((void *)v27 + 1) != v29 || v29 && memcmp(*(const void **)v27, v28, v29))
              {
                v27 += 16;
                v30 -= 16;
                if (!v30)
                {
                  uint64_t v27 = v53;
                  break;
                }
              }
              uint64_t v10 = v54;
              v9 = v55;
            }
            BOOL v22 = v26 == (v27 - v25) >> 4;
            uint64_t v11 = v24;
            if (v22)
            {
              uint64_t v41 = llvm::WithColor::error(*a1, "", 0, 0);
              uint64_t v42 = (char *)*((void *)a2 + 13);
              v67 = "Name Index @ {0:x}: Entry @ {1:x}: mismatched Name of DIE @ {2:x}: index - {3}; debug_info - {4}.\n";
              uint64_t v68 = 98;
              v69 = (void **)&v82;
              uint64_t v70 = 5;
              uint64_t v71 = (const char **)&unk_1F26014A0;
              unsigned int v72 = v42;
              unsigned int v73 = &unk_1F2619590;
              unsigned __int32 v74 = &v59;
              unsigned int v75 = &unk_1F2619590;
              v76 = &v65;
              v77 = (const char ***)&unk_1F2617F90;
              v78 = (char **)&v61;
              v79 = (void **)&unk_1F26196D0;
              v80 = v89;
              v81 = (const char ***)((char *)v89 + 16 * v90);
              v82 = (void **)v9;
              v83 = v10;
              v84 = v24;
              v85 = (void **)&v77;
              v86 = (void **)&v79;
              sub_1CD862C68((uint64_t)&v67, v41);
              ++HIDWORD(v60);
              unsigned int v25 = v89;
            }
            if (v25 != (unsigned char *)v91) {
              free(v25);
            }
            goto LABEL_37;
          }
          uint64_t v13 = llvm::WithColor::error(*a1, "", 0, 0);
          unsigned int v32 = (char *)*((void *)a2 + 13);
          v67 = "Name Index @ {0:x}: Entry @ {1:x} references a non-existing DIE @ {2:x}.\n";
          uint64_t v68 = 73;
          v69 = (void **)&v77;
          uint64_t v70 = 3;
          uint64_t v71 = (const char **)&unk_1F26014A0;
          unsigned int v72 = v32;
          unsigned int v73 = &unk_1F2619590;
          unsigned __int32 v74 = &v59;
          unsigned int v75 = &unk_1F2619590;
          uint64_t v15 = &v65;
        }
        else
        {
          uint64_t v13 = llvm::WithColor::error(*a1, "", 0, 0);
          unint64_t v14 = (char *)*((void *)a2 + 13);
          v67 = "Name Index @ {0:x}: Entry @ {1:x} contains an invalid CU index ({2}).\n";
          uint64_t v68 = 70;
          v69 = (void **)&v77;
          uint64_t v70 = 3;
          uint64_t v71 = (const char **)&unk_1F26014A0;
          unsigned int v72 = v14;
          unsigned int v73 = &unk_1F2619590;
          unsigned __int32 v74 = &v59;
          unsigned int v75 = &unk_1F2617FC0;
          uint64_t v15 = (char **)&v64;
        }
        v76 = v15;
        v77 = v9;
        v78 = (char **)v10;
        v79 = v11;
        sub_1CD862C68((uint64_t)&v67, v13);
        ++HIDWORD(v60);
LABEL_37:
        LODWORD(v60) = v60 + 1;
        unint64_t v59 = v58;
        llvm::DWARFDebugNames::NameIndex::getEntry(a2, &v58, (uint64_t)&v67);
        sub_1CC673D54((uint64_t *)&v92);
        char v101 = v101 & 0xFE | v88 & 1;
        if (v88)
        {
          v31 = v67;
          v67 = 0;
          v92 = v31;
        }
        else
        {
          v92 = (const char *)&unk_1F2618988;
          uint64_t v93 = (uint64_t)&v95;
          uint64_t v94 = 0x300000000;
          if (v69) {
            sub_1CD5E235C((uint64_t)&v93, (uint64_t)&v68);
          }
          v92 = (const char *)&unk_1F2618838;
          long long v100 = v87;
        }
        sub_1CC673D54((uint64_t *)&v67);
      }
      while ((v101 & 1) == 0);
    }
    v43 = (char *)v92;
    v92 = 0;
    v67 = (const char *)&v60;
    uint64_t v68 = (uint64_t)a1;
    v69 = (void **)a2;
    uint64_t v70 = a3;
    uint64_t v71 = &v61;
    unsigned int v72 = (char *)&v60 + 4;
    v89 = a1;
    v90 = a2;
    v91[0] = a3;
    v91[1] = &v61;
    v91[2] = (char *)&v60 + 4;
    if (v43)
    {
      if ((*(unsigned int (**)(char *, void *))(*(void *)v43 + 48))(v43, &llvm::ErrorList::ID))
      {
        uint64_t v44 = (uint64_t *)*((void *)v43 + 1);
        v45 = (uint64_t *)*((void *)v43 + 2);
        if (v44 == v45)
        {
          uint64_t v46 = 0;
        }
        else
        {
          uint64_t v46 = 0;
          do
          {
            uint64_t v66 = v46;
            uint64_t v47 = *v44;
            *uint64_t v44 = 0;
            uint64_t v64 = v47;
            sub_1CC6B3B00(&v65, &v64, (uint64_t)&v67, (uint64_t)&v89);
            sub_1CD451630(&v66, &v65, &v56);
            uint64_t v46 = v56;
            v56 = 0;
            if (v65) {
              (*(void (**)(char *))(*(void *)v65 + 8))(v65);
            }
            uint64_t v48 = v64;
            uint64_t v64 = 0;
            if (v48) {
              (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
            }
            if (v66) {
              (*(void (**)(char *))(*(void *)v66 + 8))(v66);
            }
            ++v44;
          }
          while (v44 != v45);
        }
        v63 = v46;
        v49 = *(void (**)(void))(*(void *)v43 + 8);
        goto LABEL_65;
      }
      v56 = v43;
      sub_1CC6B3B00(&v63, &v56, (uint64_t)&v67, (uint64_t)&v89);
      if (v56)
      {
        v49 = *(void (**)(void))(*(void *)v56 + 8);
LABEL_65:
        v49();
      }
    }
    else
    {
      v63 = 0;
    }
    uint64_t v3 = HIDWORD(v60);
    sub_1CC673D54((uint64_t *)&v92);
    return v3;
  }
  return 0;
}

const char *sub_1CC6B1B6C(uint64_t a1, llvm::DWARFDie *a2, int a3)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x200000000;
  uint64_t result = (const char *)llvm::DWARFDie::getShortName(a2);
  uint64_t v10 = result;
  if (result)
  {
    uint64_t result = (const char *)sub_1CC6B2D18(a1, &v10);
  }
  else
  {
    uint64_t v7 = *(void *)(*((void *)a2 + 1) + 16);
    if (v7 && *(_WORD *)(v7 + 4) == 57)
    {
      uint64_t v8 = *(unsigned int *)(a1 + 8);
      if (v8 >= *(_DWORD *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v9 = (void *)(*(void *)a1 + 16 * v8);
      void *v9 = "(anonymous namespace)";
      v9[1] = 21;
      *(_DWORD *)(a1 + 8) = v8 + 1;
    }
  }
  if (a3)
  {
    uint64_t result = (const char *)llvm::DWARFDie::getLinkageName(a2);
    uint64_t v10 = result;
    if (result) {
      return (const char *)sub_1CC6B2D18(a1, &v10);
    }
  }
  return result;
}

uint64_t llvm::DWARFVerifier::verifyNameIndexCompleteness(llvm::raw_ostream **this, llvm::DWARFUnit **a2, const llvm::DWARFDebugNames::NameIndex *a3)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  llvm::DWARFDie::find(a2, 60, &v48);
  if (LOBYTE(v54[0])) {
    return 0;
  }
  uint64_t v7 = *((void *)a2[1] + 2);
  if (v7)
  {
    int v8 = *(unsigned __int16 *)(v7 + 4);
    BOOL v10 = v8 == 46 || v8 == 29;
  }
  else
  {
    BOOL v10 = 0;
  }
  sub_1CC6B1B6C((uint64_t)&v74, (llvm::DWARFDie *)a2, v10);
  if (!v75) {
    goto LABEL_120;
  }
  uint64_t v38 = this;
  v39 = a2;
  uint64_t v42 = a3;
  uint64_t v11 = *((void *)a2[1] + 2);
  if (!v11) {
    goto LABEL_50;
  }
  uint64_t v12 = *(unsigned __int16 *)(v11 + 4);
  unsigned int v40 = 0;
  if ((int)v12 <= 28)
  {
    switch((int)v12)
    {
      case 8:
      case 13:
      case 17:
        goto LABEL_121;
      case 9:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
        goto LABEL_50;
      case 10:
        goto LABEL_35;
      default:
        if (v12 != 5) {
          goto LABEL_50;
        }
        break;
    }
    goto LABEL_121;
  }
  if (v12 <= 0x34)
  {
    if (((1 << v12) & 0x1810040000000) != 0) {
      goto LABEL_121;
    }
    if (((1 << v12) & 0x400020000000) != 0)
    {
LABEL_35:
      uint64_t v87 = 0x52005500120011;
      llvm::DWARFDie::findRecursively(a2, (unsigned __int16 *)&v87, 4, &v48);
      if (LOBYTE(v54[0])) {
        goto LABEL_50;
      }
      goto LABEL_120;
    }
    if (v12 == 52)
    {
      uint64_t v13 = this[1];
      llvm::DWARFDie::getLocations(a2, (llvm::dwarf *)2, (uint64_t)&v77);
      if (v80)
      {
        unsigned int v24 = v77;
        v77 = 0;
        uint64_t v87 = (uint64_t)v24;
        sub_1CD4515D0((void **)&v87);
        if (v87) {
          (*(void (**)(uint64_t))(*(void *)v87 + 8))(v87);
        }
      }
      else
      {
        unint64_t v14 = v77;
        uint64_t v15 = v78;
        if (v77 != v78)
        {
          int v16 = *v39;
          while (1)
          {
            uint64_t v17 = v14[4];
            uint64_t v18 = v14[5];
            char v19 = (*(uint64_t (**)(void))(**((void **)v13 + 65) + 40))(*((void *)v13 + 65));
            char v20 = *((unsigned char *)v16 + 34);
            __int16 v21 = *((unsigned __int8 *)v16 + 35) | 0x100;
            *(void *)&long long v43 = v17;
            *((void *)&v43 + 1) = v18;
            char v44 = v19;
            char v45 = v20;
            char v46 = v20;
            __int16 v47 = v21;
            sub_1CC6A2264((uint64_t)&v48, &v43, 0);
            sub_1CC6A2264((uint64_t)&v87, &v43, *((unint64_t *)&v43 + 1));
            if (v48 != (void **)v87 || v49 != v88) {
              break;
            }
LABEL_32:
            v14 += 8;
            if (v14 == v15) {
              goto LABEL_44;
            }
          }
          while (BYTE4(v50) || v50 != 3 && v50 != 155 && v50 != 224)
          {
            sub_1CC6A144C((unint64_t *)&v48);
            if (v48 == (void **)v87 && v49 == v88) {
              goto LABEL_32;
            }
          }
          int v23 = 1;
LABEL_45:
          if (v80)
          {
            unsigned int v25 = v77;
            v77 = 0;
            if (v25) {
              (*(void (**)(void *))(*v25 + 8))(v25);
            }
          }
          else
          {
            uint64_t v48 = (void **)&v77;
            sub_1CC683E70(&v48);
          }
          if (v23)
          {
LABEL_50:
            if (v75)
            {
              unsigned int v40 = 0;
              uint64_t v26 = (long long *)v74;
              uint64_t v41 = (long long *)((char *)v74 + 16 * v75);
              uint64_t v27 = *(void *)v39[1] - *((void *)*v39 + 3);
              do
              {
                long long v43 = *v26;
                llvm::DWARFDebugNames::NameIndex::equal_range((uint64_t)v42, (const void *)v43, *((size_t *)&v43 + 1), (uint64_t)&v48);
                uint64_t v87 = (uint64_t)v48;
                LOBYTE(v88) = v49;
                LOBYTE(v89) = 0;
                char v92 = 0;
                if (v59) {
                  sub_1CC6B3E4C((uint64_t)&v89, (uint64_t)&v50);
                }
                uint64_t v93 = v60;
                if (SHIBYTE(v62) < 0)
                {
                  sub_1CB8BDF7C((uint64_t)&v94, (const void *)v61, *((unint64_t *)&v61 + 1));
                }
                else
                {
                  long long v94 = v61;
                  uint64_t v95 = v62;
                }
                uint64_t v96 = v63;
                v77 = v64;
                LOBYTE(v78) = v65;
                LOBYTE(v79) = 0;
                char v82 = 0;
                if (v69) {
                  sub_1CC6B3E4C((uint64_t)&v79, (uint64_t)&v66);
                }
                uint64_t v28 = v70;
                uint64_t v83 = v70;
                if (SHIBYTE(v72) < 0)
                {
                  sub_1CB8BDF7C((uint64_t)&__p, (const void *)v71, *((unint64_t *)&v71 + 1));
                  uint64_t v28 = v83;
                }
                else
                {
                  long long __p = v71;
                  uint64_t v85 = v72;
                }
                uint64_t v86 = v73;
                if ((void *)v87 == v77 && v93 == v28)
                {
LABEL_71:
                  if (SHIBYTE(v85) < 0) {
                    operator delete((void *)__p);
                  }
                  if (v82)
                  {
                    v79 = &unk_1F2618988;
                    if (v80 != v81) {
                      free(v80);
                    }
                    char v82 = 0;
                  }
                  if (SHIBYTE(v95) < 0) {
                    operator delete((void *)v94);
                  }
                  if (v92)
                  {
                    v89 = &unk_1F2618988;
                    if (v90 != v91) {
                      free(v90);
                    }
                  }
                  if (SHIBYTE(v72) < 0) {
                    operator delete((void *)v71);
                  }
                  if (v69)
                  {
                    uint64_t v66 = &unk_1F2618988;
                    if (v67 != v68) {
                      free(v67);
                    }
                    char v69 = 0;
                  }
                  if (SHIBYTE(v62) < 0) {
                    operator delete((void *)v61);
                  }
                  if (v59)
                  {
                    uint64_t v50 = &unk_1F2618988;
                    if (v51 != &v53) {
                      free(v51);
                    }
                  }
                  unsigned int v32 = llvm::WithColor::error(*v38, "", 0, 0);
                  __int16 v33 = 0;
                  uint64_t v34 = *((void *)v42 + 13);
                  unsigned int v35 = v39[1];
                  uint64_t v36 = *(void *)v35;
                  uint64_t v37 = *((void *)v35 + 2);
                  if (v37) {
                    __int16 v33 = *(_WORD *)(v37 + 4);
                  }
                  uint64_t v48 = (void **)"Name Index @ {0:x}: Entry for DIE @ {1:x} ({2}) with name {3} missing.\n";
                  uint64_t v49 = 71;
                  uint64_t v50 = v58;
                  uint64_t v51 = (void *)4;
                  int v52 = &unk_1F26014A0;
                  uint64_t v53 = v34;
                  v54[0] = &unk_1F26014A0;
                  v54[1] = v36;
                  uint64_t v55 = &unk_1F26186E0;
                  __int16 v56 = v33;
                  v57[0] = &unk_1F2617F90;
                  v57[1] = &v43;
                  v58[0] = &v52;
                  v58[1] = v54;
                  v58[2] = &v55;
                  v58[3] = v57;
                  sub_1CD862C68((uint64_t)&v48, v32);
                  ++v40;
                }
                else
                {
                  while (1)
                  {
                    uint64_t DIEUnitOffset = llvm::DWARFDebugNames::Entry::getDIEUnitOffset((llvm::DWARFDebugNames::Entry *)&v89);
                    if (v30)
                    {
                      if (DIEUnitOffset == v27) {
                        break;
                      }
                    }
                    llvm::DWARFDebugNames::ValueIterator::next((llvm::DWARFDebugNames::ValueIterator *)&v87);
                    if ((void *)v87 == v77 && v93 == v83) {
                      goto LABEL_71;
                    }
                  }
                  if (SHIBYTE(v85) < 0) {
                    operator delete((void *)__p);
                  }
                  if (v82)
                  {
                    v79 = &unk_1F2618988;
                    if (v80 != v81) {
                      free(v80);
                    }
                    char v82 = 0;
                  }
                  if (SHIBYTE(v95) < 0) {
                    operator delete((void *)v94);
                  }
                  if (v92)
                  {
                    v89 = &unk_1F2618988;
                    if (v90 != v91) {
                      free(v90);
                    }
                  }
                  if (SHIBYTE(v72) < 0) {
                    operator delete((void *)v71);
                  }
                  if (v69)
                  {
                    uint64_t v66 = &unk_1F2618988;
                    if (v67 != v68) {
                      free(v67);
                    }
                    char v69 = 0;
                  }
                  if (SHIBYTE(v62) < 0) {
                    operator delete((void *)v61);
                  }
                  if (v59)
                  {
                    uint64_t v50 = &unk_1F2618988;
                    if (v51 != &v53) {
                      free(v51);
                    }
                  }
                }
                ++v26;
              }
              while (v26 != v41);
              goto LABEL_121;
            }
          }
LABEL_120:
          unsigned int v40 = 0;
          goto LABEL_121;
        }
      }
LABEL_44:
      int v23 = 0;
      goto LABEL_45;
    }
  }
  if ((v12 - 16646) >= 2) {
    goto LABEL_50;
  }
LABEL_121:
  if (v74 != &v76) {
    free(v74);
  }
  return v40;
}

uint64_t llvm::DWARFVerifier::verifyDebugNames(llvm::DWARFVerifier *a1, _OWORD *a2, long long *a3)
{
  uint64_t v6 = *(void *)(*((void *)a1 + 1) + 520);
  char v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
  long long v8 = *a2;
  long long v45 = *a3;
  uint64_t v9 = *((void *)a3 + 2);
  long long v40 = v8;
  char v41 = v7;
  char v42 = 0;
  uint64_t v43 = v6;
  char v44 = a2;
  v39 = &unk_1F26188B8;
  uint64_t v46 = v9;
  __int16 v47 = (llvm::DWARFDebugNames::NameIndex *)v49;
  v49[0] = 0;
  v49[1] = 0;
  uint64_t v48 = 0;
  int v50 = 0;
  BOOL v10 = *(llvm::raw_ostream **)a1;
  uint64_t v11 = *(void **)(*(void *)a1 + 32);
  if (*(void *)(*(void *)a1 + 24) - (void)v11 > 0x19uLL)
  {
    qmemcpy(v11, "Verifying .debug_names...\n", 26);
    *((void *)v10 + 4) += 26;
  }
  else
  {
    llvm::raw_ostream::write(v10, "Verifying .debug_names...\n", 0x1AuLL);
  }
  llvm::DWARFDebugNames::extract((uint64_t *)&v39, (uint64_t *)v35);
  if (v35[0])
  {
    char v30 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
    uint64_t v38 = v35[0];
    v35[0] = 0;
    sub_1CD4FB504((uint64_t *)&v38, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    llvm::raw_ostream::write(v30, (const char *)p_p, size);
    __int16 v33 = (unsigned char *)*((void *)v30 + 4);
    if ((unint64_t)v33 >= *((void *)v30 + 3))
    {
      llvm::raw_ostream::write(v30, 10);
    }
    else
    {
      *((void *)v30 + 4) = v33 + 1;
      unsigned char *v33 = 10;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v38) {
      (*(void (**)(llvm::DWARFUnit *))(*(void *)v38 + 8))(v38);
    }
    if (v35[0]) {
      (*(void (**)(llvm::DWARFUnit *))(*(void *)v35[0] + 8))(v35[0]);
    }
    uint64_t v13 = 1;
  }
  else
  {
    uint64_t v13 = llvm::DWARFVerifier::verifyDebugNamesCULists(a1, (const llvm::DWARFDebugNames *)&v39);
    if (v48)
    {
      unint64_t v14 = v47;
      uint64_t v15 = 160 * v48;
      do
      {
        uint64_t v13 = llvm::DWARFVerifier::verifyNameIndexBuckets((llvm::raw_ostream **)a1, v14, v12)
            + v13;
        unint64_t v14 = (llvm::DWARFDebugNames::NameIndex *)((char *)v14 + 160);
        v15 -= 160;
      }
      while (v15);
      if (v48)
      {
        int v16 = v47;
        uint64_t v17 = 160 * v48;
        do
        {
          uint64_t v13 = llvm::DWARFVerifier::verifyNameIndexAbbrevs((llvm::raw_ostream **)a1, (uint64_t)v16)
              + v13;
          int v16 = (llvm::DWARFDebugNames::NameIndex *)((char *)v16 + 160);
          v17 -= 160;
        }
        while (v17);
      }
    }
    if (!v13)
    {
      if (!v48) {
        goto LABEL_18;
      }
      uint64_t v13 = 0;
      uint64_t v18 = v47;
      char v19 = (llvm::DWARFDebugNames::NameIndex *)((char *)v47 + 160 * v48);
      do
      {
        int v20 = *((_DWORD *)v18 + 13);
        if (v20)
        {
          int v21 = 0;
          do
          {
            llvm::DWARFDebugNames::NameIndex::getNameTableEntry(v18, ++v21, (__n128 *)&__p);
            uint64_t v13 = llvm::DWARFVerifier::verifyNameIndexEntries((llvm::raw_ostream **)a1, v18, (uint64_t)&__p)+ v13;
          }
          while (v20 != v21);
        }
        uint64_t v18 = (llvm::DWARFDebugNames::NameIndex *)((char *)v18 + 160);
      }
      while (v18 != v19);
      if (!v13)
      {
LABEL_18:
        sub_1CC6821F8(*((void *)a1 + 1), &__p);
        BOOL v22 = (llvm::DWARFUnit **)__p.__r_.__value_.__r.__words[0];
        int v23 = v37;
        if ((llvm::DWARFUnit **)__p.__r_.__value_.__l.__data_ == v37)
        {
          uint64_t v13 = 0;
        }
        else
        {
          uint64_t v13 = 0;
          long long v24 = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
          do
          {
            uint64_t CUNameIndex = llvm::DWARFDebugNames::getCUNameIndex((llvm::DWARFDebugNames *)&v39, *((void *)*v22 + 3));
            if (CUNameIndex)
            {
              uint64_t v26 = (const llvm::DWARFDebugNames::NameIndex *)CUNameIndex;
              uint64_t v27 = *v22;
              llvm::DWARFUnit::extractDIEsIfNeeded(*v22, 0);
              uint64_t v28 = (llvm::DWARFUnit *)*((void *)v27 + 36);
              size_t v29 = (llvm::DWARFUnit *)*((void *)v27 + 37);
              while (v28 != v29)
              {
                v35[0] = v27;
                v35[1] = v28;
                uint64_t v13 = llvm::DWARFVerifier::verifyNameIndexCompleteness((llvm::raw_ostream **)a1, v35, v26)
                    + v13;
                uint64_t v28 = (llvm::DWARFUnit *)((char *)v28 + 24);
              }
            }
            while (++v22 != (llvm::DWARFUnit **)v24)
            {
              if ((*((unsigned int (**)(llvm::DWARFUnit **))&v24 + 1))(v22)) {
                goto LABEL_25;
              }
            }
            BOOL v22 = (llvm::DWARFUnit **)v24;
LABEL_25:
            ;
          }
          while (v22 != v23);
        }
      }
    }
  }
  v39 = &unk_1F26188B8;
  MEMORY[0x1D25D9CD0](v49[0], 8);
  sub_1CC673A8C((char **)&v47);
  return v13;
}

BOOL llvm::DWARFVerifier::handleAccelTables(llvm::DWARFVerifier *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 1) + 520);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 136))(v2);
  uint64_t v5 = v4;
  char v6 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 520) + 40))(*(void *)(*((void *)this + 1) + 520));
  *(void *)&long long v14 = v3;
  *((void *)&v14 + 1) = v5;
  char v15 = v6;
  char v16 = 0;
  if (*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 320))(v2) + 8))
  {
    char v7 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 320))(v2);
    int v8 = llvm::DWARFVerifier::verifyAppleAccelTable((llvm::raw_ostream **)this, v7, (uint64_t *)&v14, ".apple_names");
  }
  else
  {
    int v8 = 0;
  }
  if (*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 328))(v2) + 8))
  {
    uint64_t v9 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 328))(v2);
    v8 += llvm::DWARFVerifier::verifyAppleAccelTable((llvm::raw_ostream **)this, v9, (uint64_t *)&v14, ".apple_types");
  }
  if (*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 336))(v2) + 8))
  {
    BOOL v10 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 336))(v2);
    v8 += llvm::DWARFVerifier::verifyAppleAccelTable((llvm::raw_ostream **)this, v10, (uint64_t *)&v14, ".apple_namespaces");
  }
  if (*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 352))(v2) + 8))
  {
    uint64_t v11 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 352))(v2);
    v8 += llvm::DWARFVerifier::verifyAppleAccelTable((llvm::raw_ostream **)this, v11, (uint64_t *)&v14, ".apple_objc");
  }
  if (*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 344))(v2) + 8))
  {
    uint64_t v12 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 344))(v2);
    v8 += llvm::DWARFVerifier::verifyDebugNames(this, v12, &v14);
  }
  return v8 == 0;
}

void sub_1CC6B2CA0(void *a1)
{
  if (a1)
  {
    sub_1CC6B2CA0(*a1);
    sub_1CC6B2CA0(a1[1]);
    sub_1CC6B2CA0(a1[10]);
    uint64_t v2 = (void *)a1[6];
    if (v2)
    {
      a1[7] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t sub_1CC6B2D18(uint64_t a1, const char **a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    return sub_1CD5EF430(a1, a2);
  }
  else
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *a2;
    *(void *)(*(void *)a1 + 16 * v3) = *a2;
    if (v5) {
      uint64_t v5 = (const char *)strlen(v5);
    }
    *(void *)(v4 + 16 * v3 + 8) = v5;
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return v4 + 16 * (v3 + 1) - 16;
  }
}

void *sub_1CC6B2DA4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    char v7 = *(unint64_t **)(a3 + 16);
    int v8 = *(unint64_t **)(a3 + 24);
    do
    {
      while (1)
      {
        uint64_t v9 = (void *)v4;
        uint64_t v10 = v4 + 32;
        uint64_t v11 = *(unint64_t **)(v4 + 48);
        uint64_t v12 = *(unint64_t **)(v4 + 56);
        if (!sub_1CC6B2E70(v7, v8, a3, v11, v12, v4 + 32)) {
          break;
        }
        uint64_t v4 = *v9;
        uint64_t v5 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (!sub_1CC6B2E70(v11, v12, v10, v7, v8, a3)) {
        break;
      }
      uint64_t v5 = v9 + 1;
      uint64_t v4 = v9[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v9 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v9;
  return v5;
}

BOOL sub_1CC6B2E70(unint64_t *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, unint64_t *a5, uint64_t a6)
{
  if (sub_1CC6B2F04(a1, a2, (uint64_t)a4, (uint64_t)a5)) {
    return 1;
  }
  if (sub_1CC6B2F04(a4, a5, (uint64_t)a1, (uint64_t)a2)) {
    return 0;
  }
  return **(void **)(a3 + 8) < **(void **)(a6 + 8);
}

uint64_t sub_1CC6B2F04(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 == a4) {
    return 0;
  }
  if (a1 != a2)
  {
    uint64_t v4 = a3 + 24;
    do
    {
      unint64_t v5 = a1[2];
      unint64_t v6 = *(void *)(v4 - 8);
      if (v5 < v6) {
        break;
      }
      if (v6 < v5) {
        return 0;
      }
      unint64_t v7 = *(void *)(v4 - 24);
      if (*a1 < v7) {
        break;
      }
      if (v7 < *a1) {
        return 0;
      }
      unint64_t v8 = a1[1];
      unint64_t v9 = *(void *)(v4 - 16);
      if (v8 < v9) {
        break;
      }
      uint64_t v10 = 0;
      if (v9 < v8 || v4 == a4) {
        return v10;
      }
      a1 += 3;
      v4 += 24;
    }
    while (a1 != a2);
  }
  return 1;
}

uint64_t sub_1CC6B2F90(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = (void *)(result + 8);
  if ((void *)(result + 8) == a2
    || (unint64_t v9 = *(unint64_t **)(a3 + 16),
        uint64_t v10 = *(unint64_t **)(a3 + 24),
        uint64_t v11 = (unint64_t *)a2[6],
        uint64_t v12 = (unint64_t *)a2[7],
        uint64_t result = sub_1CC6B2E70(v9, v10, a3, v11, v12, (uint64_t)(a2 + 4)),
        result))
  {
    uint64_t v13 = *a2;
    if (*(void **)v7 == a2)
    {
      char v15 = a2;
LABEL_17:
      if (v13)
      {
        size_t v29 = v15;
        uint64_t v18 = v15 + 1;
      }
      else
      {
        size_t v29 = a2;
        uint64_t v18 = a2;
      }
      goto LABEL_28;
    }
    if (v13)
    {
      long long v14 = (void *)*a2;
      do
      {
        char v15 = v14;
        long long v14 = (void *)v14[1];
      }
      while (v14);
    }
    else
    {
      char v19 = a2;
      do
      {
        char v15 = (void *)v19[2];
        BOOL v20 = *v15 == (void)v19;
        char v19 = v15;
      }
      while (v20);
    }
    uint64_t result = sub_1CC6B2E70((unint64_t *)v15[6], (unint64_t *)v15[7], (uint64_t)(v15 + 4), *(unint64_t **)(a3 + 16), *(unint64_t **)(a3 + 24), a3);
    if (result) {
      goto LABEL_17;
    }
LABEL_27:
    uint64_t result = (uint64_t)sub_1CC6B2DA4(v7, &v29, a3);
    uint64_t v18 = (void *)result;
    goto LABEL_28;
  }
  uint64_t result = sub_1CC6B2E70(v11, v12, (uint64_t)(a2 + 4), v9, v10, a3);
  if (!result) {
    return result;
  }
  uint64_t v16 = a2[1];
  if (v16)
  {
    uint64_t v17 = (void *)a2[1];
    do
    {
      uint64_t v18 = v17;
      uint64_t v17 = (void *)*v17;
    }
    while (v17);
  }
  else
  {
    int v21 = a2;
    do
    {
      uint64_t v18 = (void *)v21[2];
      BOOL v20 = *v18 == (void)v21;
      int v21 = v18;
    }
    while (!v20);
  }
  if (v18 != v8)
  {
    uint64_t result = sub_1CC6B2E70(v9, v10, a3, (unint64_t *)v18[6], (unint64_t *)v18[7], (uint64_t)(v18 + 4));
    if (!result) {
      goto LABEL_27;
    }
  }
  if (v16)
  {
    size_t v29 = v18;
  }
  else
  {
    size_t v29 = a2;
    uint64_t v18 = a2 + 1;
  }
LABEL_28:
  if (!*v18)
  {
    BOOL v22 = operator new(0x60uLL);
    v22[2] = *(_OWORD *)a4;
    *((void *)v22 + 7) = 0;
    *((void *)v22 + 8) = 0;
    *((void *)v22 + 6) = 0;
    sub_1CC6A8A48((void *)v22 + 6, *(const void **)(a4 + 16), *(void *)(a4 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 24) - *(void *)(a4 + 16)) >> 3));
    *((void *)v22 + 10) = 0;
    *((void *)v22 + 9) = v22 + 5;
    *((void *)v22 + 11) = 0;
    int v23 = *(void **)(a4 + 40);
    long long v24 = (void *)(a4 + 48);
    if (v23 != v24)
    {
      do
      {
        sub_1CC6B2F90((char *)v22 + 72, v22 + 5, v23 + 4, v23 + 4);
        unsigned int v25 = (void *)v23[1];
        if (v25)
        {
          do
          {
            uint64_t v26 = v25;
            unsigned int v25 = (void *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            uint64_t v26 = (void *)v23[2];
            BOOL v20 = *v26 == (void)v23;
            int v23 = v26;
          }
          while (!v20);
        }
        int v23 = v26;
      }
      while (v26 != v24);
    }
    uint64_t v27 = v29;
    *(void *)BOOL v22 = 0;
    *((void *)v22 + 1) = 0;
    *((void *)v22 + 2) = v27;
    *uint64_t v18 = v22;
    uint64_t v28 = **(void **)v7;
    if (v28)
    {
      *(void *)uint64_t v7 = v28;
      BOOL v22 = (_OWORD *)*v18;
    }
    uint64_t result = (uint64_t)sub_1CB8358B8(*(uint64_t **)(v7 + 8), (uint64_t *)v22);
    ++*(void *)(v7 + 16);
  }
  return result;
}

uint64_t sub_1CC6B322C(uint64_t a1, unsigned __int16 a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & (37 * a2);
  uint64_t v7 = (unsigned __int16 *)(v3 + 2 * v6);
  int v8 = *v7;
  if (v8 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != 0xFFFF)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == 65534;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (unsigned __int16 *)(v3 + 2 * (v13 & v5));
      int v8 = *v7;
      if (v8 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC6B32E0(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v6 = *(_WORD **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(2 * a2, (std::align_val_t)2uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CC6B345C(a1, v6, &v6[v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  int v8 = &v14;
  for (uint64_t i = 8; i != 16; i += 2)
  {
    unsigned int v10 = *(unsigned __int16 *)(a1 + i);
    if (v10 <= 0xFFFD) {
      *v8++ = v10;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(2 * a2, (std::align_val_t)2uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CC6B345C(a1, &v14, v8);
}

uint64_t sub_1CC6B345C(uint64_t result, _WORD *a2, _WORD *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    int v8 = (void *)(result + 8);
    size_t v9 = 8;
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_6;
    }
    int v8 = *(void **)(result + 8);
    size_t v9 = 2 * v7;
  }
  uint64_t result = (uint64_t)memset(v8, 255, v9);
LABEL_6:
  while (a2 != a3)
  {
    unsigned int v10 = (unsigned __int16)*a2;
    if (v10 <= 0xFFFD)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CC6B322C((uint64_t)v5, v10, &v11);
      *uint64_t v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void sub_1CC6B3514(void *a1)
{
  if (a1)
  {
    sub_1CC6B3514(*a1);
    sub_1CC6B3514(a1[1]);
    sub_1CB833A08((uint64_t)(a1 + 5), (void *)a1[6]);
    operator delete(a1);
  }
}

uint64_t sub_1CC6B356C(uint64_t a1)
{
  return **(void **)a1;
}

uint64_t sub_1CC6B3578(uint64_t ***a1, unint64_t a2)
{
  return llvm::DWARFUnitVector::getUnitForOffset(*a1, a2);
}

uint64_t sub_1CC6B3580(uint64_t a1, void *a2)
{
  uint64_t result = llvm::DWARFVerifier::verifyUnitSection(*(void *)(a1 + 8), a2);
  **(_DWORD **)a1 += result;
  return result;
}

uint64_t sub_1CC6B35B8(uint64_t a1, void *a2)
{
  uint64_t result = llvm::DWARFVerifier::verifyUnitSection(*(void *)(a1 + 8), a2);
  **(_DWORD **)a1 += result;
  return result;
}

uint64_t sub_1CC6B35F0(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(unsigned int *)(a1 + 24), *(unsigned int *)(a1 + 28), *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 36), *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64));
}

void *sub_1CC6B364C(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    size_t v9 = 0;
LABEL_5:
    int v6 = sub_1CD5EF768(a1, (uint64_t)a2, a2, v9);
    void *v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = (37 * *a2) & (v3 - 1);
  int v6 = (void *)(*(void *)a1 + 16 * v5);
  uint64_t v7 = *v6;
  if (*a2 != *v6)
  {
    unsigned int v10 = 0;
    int v11 = 1;
    while (v7 != -1)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v7 == -2;
      }
      if (v12) {
        unsigned int v10 = v6;
      }
      unsigned int v13 = v5 + v11++;
      unsigned int v5 = v13 & v4;
      int v6 = (void *)(*(void *)a1 + 16 * (v13 & v4));
      uint64_t v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v10) {
      size_t v9 = v10;
    }
    else {
      size_t v9 = v6;
    }
    goto LABEL_5;
  }
  return v6;
}

uint64_t sub_1CC6B370C(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 4);
  unsigned int v3 = *(_DWORD *)(a2 + 4);
  if (v2 < v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v3 < v2;
  }
}

void sub_1CC6B3728()
{
}

llvm::raw_ostream *sub_1CC6B373C(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1CD5EF8E0(*(const char ***)(a1 + 8), a2, a3, a4);
}

void sub_1CC6B3744()
{
}

llvm::raw_ostream *sub_1CC6B3758(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1CD5E24BC(*(unsigned int **)(a1 + 8), a2);
}

void sub_1CC6B3760()
{
}

llvm::raw_ostream *sub_1CC6B3774(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1CD5E132C((unsigned __int16 *)(a1 + 8), a2);
}

void sub_1CC6B377C()
{
}

llvm::raw_ostream *sub_1CC6B3790(uint64_t a1, llvm::raw_ostream *this, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *(const void **)v5;
  size_t v7 = *(void *)(v5 + 8);
  if (a4)
  {
    unint64_t v8 = 0;
    while (1)
    {
      int v9 = *a3;
      if ((v9 - 48) >= 0xA)
      {
        if ((v9 - 97) >= 0x1A)
        {
          if ((v9 - 65) > 0x19) {
            break;
          }
          int v10 = -55;
        }
        else
        {
          int v10 = -87;
        }
      }
      else
      {
        int v10 = -48;
      }
      unsigned int v11 = v10 + v9;
      if (v11 > 9) {
        break;
      }
      unint64_t v12 = 10 * v8 + v11;
      if (v8 > v12 / 0xA) {
        break;
      }
      ++a3;
      unint64_t v8 = v12;
      if (!--a4) {
        goto LABEL_14;
      }
    }
  }
  unint64_t v12 = -1;
LABEL_14:
  if (v7 >= v12) {
    size_t v13 = v12;
  }
  else {
    size_t v13 = v7;
  }
  uint64_t result = (llvm::raw_ostream *)*((void *)this + 4);
  if (v13 <= *((void *)this + 3) - (void)result)
  {
    if (v13)
    {
      uint64_t result = (llvm::raw_ostream *)memcpy(result, v6, v13);
      *((void *)this + 4) += v13;
    }
  }
  else
  {
    return llvm::raw_ostream::write(this, (const char *)v6, v13);
  }
  return result;
}

void sub_1CC6B3894()
{
}

llvm::raw_ostream *sub_1CC6B38A8(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1CD5E24BC((unsigned int *)(a1 + 8), a2);
}

void sub_1CC6B38B0()
{
}

unsigned __int8 *sub_1CC6B38C4(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  size_t v7 = (const void *)sub_1CC6B3A18(&v15, 0x24u, (uint64_t)", ");
  size_t v9 = v8;
  uint64_t result = (unsigned __int8 *)sub_1CC6B3A18(&v15, 0x40u, (uint64_t)"");
  unint64_t v12 = result;
  uint64_t v13 = v11;
  if (v5 != v6)
  {
    uint64_t v15 = (unsigned __int8 *)&unk_1F2617F90;
    uint64_t v16 = v5;
    uint64_t result = (unsigned __int8 *)sub_1CD5D7BF0(v5, a2, result, v11);
    v5 += 16;
  }
  for (; v5 != v6; v5 += 16)
  {
    __int16 v14 = (void *)*((void *)a2 + 4);
    if (v9 <= *((void *)a2 + 3) - (void)v14)
    {
      if (v9)
      {
        memcpy(v14, v7, v9);
        *((void *)a2 + 4) += v9;
      }
    }
    else
    {
      llvm::raw_ostream::write(a2, (const char *)v7, v9);
    }
    uint64_t v15 = (unsigned __int8 *)&unk_1F2617F90;
    uint64_t v16 = v5;
    uint64_t result = (unsigned __int8 *)sub_1CD5D7BF0(v5, a2, v12, v13);
  }
  return result;
}

uint64_t sub_1CC6B3A18(unsigned __int8 **a1, unsigned __int8 a2, uint64_t a3)
{
  int v4 = a1[1];
  if (v4)
  {
    uint64_t v6 = (uint64_t)*a1;
    if (**a1 == a2)
    {
      size_t v7 = (unsigned __int8 *)(v6 + 1);
      size_t v8 = (size_t)(v4 - 1);
      *a1 = (unsigned __int8 *)(v6 + 1);
      a1[1] = v4 - 1;
      if (v4 != (unsigned __int8 *)1)
      {
        uint64_t v9 = 0;
        while (1)
        {
          int v10 = off_1E6849C00[v9];
          if (*v7 == *v10) {
            break;
          }
          if (++v9 == 3) {
            return a3;
          }
        }
        uint64_t v11 = memchr((void *)(v6 + 1), v10[1], v8);
        uint64_t v12 = v11 - v7;
        if (v11) {
          BOOL v13 = v12 == -1;
        }
        else {
          BOOL v13 = 1;
        }
        if (!v13)
        {
          a3 = v6 + 2;
          if (v8 >= v12 + 1) {
            size_t v14 = v12 + 1;
          }
          else {
            size_t v14 = v8;
          }
          *a1 = &v7[v14];
          a1[1] = (unsigned __int8 *)(v8 - v14);
        }
      }
    }
  }
  return a3;
}

void sub_1CC6B3B00(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v8 = (*(uint64_t (**)(void, void *))(*(void *)*a2 + 48))(*a2, &llvm::DWARFDebugNames::SentinelError::ID);
  uint64_t v9 = *a2;
  *a2 = 0;
  if (v8)
  {
    if (!**(_DWORD **)a3)
    {
      int v10 = llvm::WithColor::error(**(llvm::raw_ostream ***)(a3 + 8), "", 0, 0);
      uint64_t v11 = *(void *)(*(void *)(a3 + 16) + 104);
      int v12 = *(_DWORD *)(*(void *)(a3 + 24) + 24);
      uint64_t v13 = *(void *)(a3 + 32);
      int v21 = "Name Index @ {0:x}: Name {1} ({2}) is not associated with any entries.\n";
      uint64_t v22 = 71;
      int v23 = &v31;
      uint64_t v24 = 3;
      unsigned int v25 = &unk_1F26014A0;
      uint64_t v26 = v11;
      uint64_t v27 = &unk_1F2619290;
      int v28 = v12;
      size_t v29 = &unk_1F2617F90;
      uint64_t v30 = v13;
      v31 = &v25;
      __p[0] = &v27;
      __p[1] = &v29;
      sub_1CD862C68((uint64_t)&v21, v10);
      ++**(_DWORD **)(a3 + 40);
    }
    *a1 = 0;
    if (v9) {
LABEL_5:
    }
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t, void *))(*(void *)v9 + 48))(v9, &llvm::ErrorInfoBase::ID))
    {
      size_t v14 = llvm::WithColor::error(**(llvm::raw_ostream ***)a4, "", 0, 0);
      uint64_t v15 = *(void *)(*(void *)(a4 + 8) + 104);
      int v16 = *(_DWORD *)(*(void *)(a4 + 16) + 24);
      uint64_t v17 = *(void *)(a4 + 24);
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v9 + 24))(v19, v9);
      uint64_t v36 = v20;
      long long v18 = *(_OWORD *)v19;
      long long v35 = *(_OWORD *)v19;
      v19[0] = 0;
      v19[1] = 0;
      uint64_t v20 = 0;
      int v21 = "Name Index @ {0:x}: Name {1} ({2}): {3}\n";
      uint64_t v22 = 40;
      int v23 = (void ***)v34;
      uint64_t v24 = 4;
      unsigned int v25 = &unk_1F26014A0;
      uint64_t v26 = v15;
      uint64_t v27 = &unk_1F2619290;
      int v28 = v16;
      size_t v29 = &unk_1F2617F90;
      uint64_t v30 = v17;
      v31 = (void **)&unk_1F2619700;
      *(_OWORD *)std::string __p = v18;
      uint64_t v33 = v36;
      v34[0] = &v25;
      v34[1] = &v27;
      v34[2] = &v29;
      v34[3] = &v31;
      sub_1CD862C68((uint64_t)&v21, v14);
      v31 = (void **)&unk_1F2619700;
      if (SHIBYTE(v33) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v20) < 0) {
        operator delete(v19[0]);
      }
      ++**(_DWORD **)(a4 + 32);
      *a1 = 0;
      goto LABEL_5;
    }
    *a1 = v9;
  }
}

__n128 sub_1CC6B3E4C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 184))
  {
    *(void *)a1 = &unk_1F2618988;
    int v4 = *(void **)(a1 + 8);
    if (v4 != (void *)(a1 + 24)) {
      free(v4);
    }
    *(unsigned char *)(a1 + 184) = 0;
  }
  *(void *)a1 = &unk_1F2618988;
  *(void *)(a1 + 8) = a1 + 24;
  *(void *)(a1 + 16) = 0x300000000;
  unsigned int v5 = *(_DWORD *)(a2 + 16);
  if (v5) {
    BOOL v6 = a1 == a2;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (v5 >= 4) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(*(void **)(a1 + 8), *(const void **)(a2 + 8), 48 * *(unsigned int *)(a2 + 16));
    *(_DWORD *)(a1 + 16) = v5;
  }
  *(void *)a1 = &unk_1F2618838;
  __n128 result = *(__n128 *)(a2 + 168);
  *(__n128 *)(a1 + 168) = result;
  *(unsigned char *)(a1 + 184) = 1;
  return result;
}

uint64_t llvm::nonMicrosoftDemangle(llvm *a1, uint64_t a2)
{
  if (!strncmp((const char *)a1, "_Z", 2uLL) || !strncmp((const char *)a1, "___Z", 4uLL))
  {
    BOOL v6 = llvm::itaniumDemangle(a1, 0, 0, 0, v4);
    goto LABEL_7;
  }
  if (*(unsigned char *)a1 == 95 && *((unsigned char *)a1 + 1) == 82)
  {
    BOOL v6 = (void *)llvm::rustDemangle((const char *)a1, v5);
    goto LABEL_7;
  }
  size_t v9 = strlen((const char *)a1);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v11 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    size_t v20 = v11;
    int64_t v21 = v14 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_16;
  }
  HIBYTE(v21) = v9;
  p_dst = (void **)&__dst;
  if (v9) {
LABEL_16:
  }
    memcpy(p_dst, a1, v11);
  BOOL v15 = 0;
  *((unsigned char *)p_dst + v11) = 0;
  unint64_t v16 = HIBYTE(v21) & 0x7E;
  if (v21 < 0) {
    unint64_t v16 = v20;
  }
  if (v16 >= 2)
  {
    uint64_t v17 = __dst;
    if (v21 >= 0) {
      long long v18 = (void **)&__dst;
    }
    else {
      long long v18 = __dst;
    }
    if (*(unsigned char *)v18 == 95)
    {
      if (v21 >= 0) {
        uint64_t v17 = (void **)&__dst;
      }
      BOOL v15 = *((unsigned __int8 *)v17 + 1) == 68;
      if (SHIBYTE(v21) < 0) {
        goto LABEL_32;
      }
    }
    else
    {
      BOOL v15 = 0;
      if (SHIBYTE(v21) < 0) {
        goto LABEL_32;
      }
    }
LABEL_21:
    if (!v15) {
      return 0;
    }
    goto LABEL_22;
  }
  if ((SHIBYTE(v21) & 0x80000000) == 0) {
    goto LABEL_21;
  }
LABEL_32:
  operator delete(__dst);
  if (!v15) {
    return 0;
  }
LABEL_22:
  BOOL v6 = llvm::dlangDemangle((char *)a1, v10);
LABEL_7:
  size_t v7 = v6;
  if (v6)
  {
    MEMORY[0x1D25D9630](a2, v6);
    free(v7);
    return 1;
  }
  return 0;
}

unsigned char *llvm::itaniumDemangle(llvm *this, const char *a2, char *a3, unint64_t *a4, int *a5)
{
  unsigned int v5 = (const char *)MEMORY[0x1F4188790](this, a2, a3, a4);
  size_t v9 = v8;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (!v5 || (int v10 = v7, (v11 = v6) != 0) && !v7)
  {
    int v12 = 0;
    if (v8) {
      *int v8 = -3;
    }
    return v12;
  }
  v27[0] = v5;
  v27[1] = &v5[strlen(v5)];
  int v28 = v31;
  size_t v29 = v31;
  uint64_t v30 = v32;
  memset(v31, 0, sizeof(v31));
  v32[0] = v33;
  v32[1] = v33;
  memset(v33, 0, sizeof(v33));
  memset(v35, 0, sizeof(v35));
  v34[0] = v35;
  v34[1] = v35;
  v32[2] = v34;
  v34[2] = v36;
  v36[0] = v37;
  v36[1] = v37;
  v36[2] = v38;
  memset(v39, 0, sizeof(v39));
  memset(v37, 0, sizeof(v37));
  v38[0] = v39;
  v38[1] = v39;
  v38[2] = &v40;
  __int16 v40 = 1;
  uint64_t v41 = -1;
  int v43 = 0;
  uint64_t v42 = 0;
  v44[0] = 0u;
  long long v45 = v44;
  uint64_t v25 = -1;
  int v26 = 1;
  uint64_t v13 = sub_1CC6B4480((uint64_t)v27);
  if (v13)
  {
    uint64_t v14 = v13;
    if (v11)
    {
      uint64_t v20 = *v10;
    }
    else
    {
      BOOL v15 = malloc_type_malloc(0x400uLL, 0x1E4FE0F9uLL);
      if (!v15)
      {
        int v12 = 0;
        int v16 = -1;
        if (!v9) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
      size_t v11 = v15;
      uint64_t v20 = 1024;
    }
    uint64_t v22 = v11;
    uint64_t v23 = 0;
    uint64_t v24 = v20;
    (*(void (**)(uint64_t, unsigned char **))(*(void *)v14 + 32))(v14, &v22);
    if ((*(_WORD *)(v14 + 9) & 0xC0) != 0x40) {
      (*(void (**)(uint64_t, unsigned char **))(*(void *)v14 + 40))(v14, &v22);
    }
    sub_1CD5EFF98(&v22, 1);
    uint64_t v21 = v23++;
    v22[v21] = 0;
    if (v10) {
      *int v10 = v23;
    }
    int v16 = 0;
    int v12 = v22;
    if (!v9) {
      goto LABEL_13;
    }
LABEL_12:
    int *v9 = v16;
    goto LABEL_13;
  }
  int v12 = 0;
  int v16 = -2;
  if (v9) {
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v17 = (void **)v45;
  if (v45)
  {
    do
    {
      while (1)
      {
        long long v18 = (void **)*v17;
        long long v45 = *v17;
        if (v17 == (void **)v44) {
          break;
        }
        free(v17);
        uint64_t v17 = (void **)v45;
        if (!v45) {
          goto LABEL_18;
        }
      }
      uint64_t v17 = v18;
    }
    while (v18);
  }
LABEL_18:
  v44[0] = 0uLL;
  long long v45 = v44;
  if (v38[0] != v39) {
    free(v38[0]);
  }
  if (v36[0] != v37) {
    free(v36[0]);
  }
  if (v34[0] != v35) {
    free(v34[0]);
  }
  if (v32[0] != v33) {
    free(v32[0]);
  }
  if (v28 != v31) {
    free(v28);
  }
  return v12;
}

uint64_t sub_1CC6B4480(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 **)a1;
  unint64_t v3 = *(void *)(a1 + 8) - *(void *)a1;
  if (v3 < 2) {
    goto LABEL_9;
  }
  uint64_t v4 = 2;
  if (strncmp("_Z", (const char *)v2, 2uLL))
  {
    if (v3 < 3)
    {
LABEL_9:
      uint64_t result = sub_1CC6B5D0C(a1);
      if (*(void *)(a1 + 8) != *(void *)a1) {
        return 0;
      }
      return result;
    }
    uint64_t v4 = 3;
    if (strncmp("__Z", (const char *)v2, 3uLL))
    {
      if (v3 < 4) {
        goto LABEL_9;
      }
      uint64_t v5 = 4;
      if (strncmp("___Z", (const char *)v2, 4uLL))
      {
        if (v3 < 5) {
          goto LABEL_9;
        }
        uint64_t v5 = 5;
        if (strncmp("____Z", (const char *)v2, 5uLL)) {
          goto LABEL_9;
        }
      }
      *(void *)a1 = &v2[v5];
      uint64_t result = sub_1CC6B4F7C((unsigned __int8 **)a1);
      uint64_t v16 = result;
      if (!result) {
        return result;
      }
      size_t v11 = *(unsigned __int8 **)a1;
      int v12 = *(unsigned __int8 **)(a1 + 8);
      if ((unint64_t)&v12[-*(void *)a1] < 0xD || strncmp("_block_invoke", *(const char **)a1, 0xDuLL)) {
        return 0;
      }
      *(void *)a1 = v11 + 13;
      if (v11 + 13 == v12 || v11[13] != 95)
      {
        sub_1CC6B5BE0((char **)a1, 0);
      }
      else
      {
        *(void *)a1 = v11 + 14;
        uint64_t v13 = sub_1CC6B5BE0((char **)a1, 0);
        if (v13 == v14) {
          return 0;
        }
      }
      uint64_t v15 = *(void *)(a1 + 8);
      if (v15 != *(void *)a1)
      {
        if (**(unsigned char **)a1 != 46) {
          return 0;
        }
        *(void *)a1 = v15;
      }
      return sub_1CC6B5C7C(a1, "invocation function for block in ", &v16);
    }
  }
  *(void *)a1 = &v2[v4];
  uint64_t result = sub_1CC6B4F7C((unsigned __int8 **)a1);
  if (result)
  {
    uint64_t v7 = result;
    size_t v9 = *(unsigned __int8 **)a1;
    int v8 = *(unsigned __int8 **)(a1 + 8);
    if (v8 == *(unsigned __int8 **)a1)
    {
      size_t v9 = *(unsigned __int8 **)(a1 + 8);
    }
    else if (*v9 == 46)
    {
      uint64_t v10 = sub_1CC6B7FB0(a1 + 808, 40);
      *(unsigned char *)(v10 + 8) = 1;
      *(_WORD *)(v10 + 9) = *(_WORD *)(v10 + 9) & 0xF000 | 0x540;
      *(void *)uint64_t v10 = &unk_1F261AC80;
      *(void *)(v10 + 16) = v7;
      *(void *)(v10 + 24) = v9;
      *(void *)(v10 + 32) = v8;
      size_t v9 = *(unsigned __int8 **)(a1 + 8);
      *(void *)a1 = v9;
      int v8 = v9;
      uint64_t v7 = v10;
    }
    if (v8 == v9) {
      return v7;
    }
    else {
      return 0;
    }
  }
  return result;
}

void *sub_1CC6B46C0(void *a1)
{
  unsigned int v2 = a1 + 101;
  unint64_t v3 = (void *)a1[613];
  if (v3)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = (void *)*v3;
        a1[613] = *v3;
        if (v3 == v2) {
          break;
        }
        free(v3);
        unint64_t v3 = (void *)a1[613];
        if (!v3) {
          goto LABEL_6;
        }
      }
      unint64_t v3 = v4;
    }
    while (v4);
  }
LABEL_6:
  *unsigned int v2 = 0;
  v2[1] = 0;
  a1[613] = v2;
  uint64_t v5 = (void *)a1[90];
  if (v5 != a1 + 93) {
    free(v5);
  }
  BOOL v6 = (void *)a1[83];
  if (v6 != a1 + 86) {
    free(v6);
  }
  uint64_t v7 = (void *)a1[72];
  if (v7 != a1 + 75) {
    free(v7);
  }
  int v8 = (void *)a1[37];
  if (v8 != a1 + 40) {
    free(v8);
  }
  size_t v9 = (void *)a1[2];
  if (v9 != a1 + 5) {
    free(v9);
  }
  return a1;
}

void llvm::ItaniumPartialDemangler::~ItaniumPartialDemangler(llvm::ItaniumPartialDemangler *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1)
  {
    unsigned int v2 = v1 + 101;
    unint64_t v3 = (void *)v1[613];
    if (v3)
    {
      do
      {
        while (1)
        {
          uint64_t v4 = (void *)*v3;
          v1[613] = *v3;
          if (v3 == v2) {
            break;
          }
          free(v3);
          unint64_t v3 = (void *)v1[613];
          if (!v3) {
            goto LABEL_7;
          }
        }
        unint64_t v3 = v4;
      }
      while (v4);
    }
LABEL_7:
    *unsigned int v2 = 0;
    v1[102] = 0;
    v1[613] = v2;
    uint64_t v5 = (void *)v1[90];
    if (v5 != v1 + 93) {
      free(v5);
    }
    BOOL v6 = (void *)v1[83];
    if (v6 != v1 + 86) {
      free(v6);
    }
    uint64_t v7 = (void *)v1[72];
    if (v7 != v1 + 75) {
      free(v7);
    }
    int v8 = (void *)v1[37];
    if (v8 != v1 + 40) {
      free(v8);
    }
    size_t v9 = (void *)v1[2];
    if (v9 != v1 + 5) {
      free(v9);
    }
    MEMORY[0x1D25D9CE0](v1, 0x10F0C408ABB1DA5);
  }
}

{
  void *v1;
  void *v2;

  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1)
  {
    unsigned int v2 = sub_1CC6B46C0(v1);
    MEMORY[0x1D25D9CE0](v2, 0x10F0C408ABB1DA5);
  }
}

__n128 llvm::ItaniumPartialDemangler::ItaniumPartialDemangler(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

uint64_t *llvm::ItaniumPartialDemangler::operator=(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *__n128 result = *a2;
  *a2 = v2;
  uint64_t v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  return result;
}

unsigned char *llvm::ItaniumPartialDemangler::getFunctionBaseName(llvm::ItaniumPartialDemangler *this, char *a2, unint64_t *a3)
{
  if (*(unsigned char *)(*(void *)this + 8) != 18) {
    return 0;
  }
  for (uint64_t i = *(void *)this + 24; ; uint64_t i = v4 + 24)
  {
    while (1)
    {
      uint64_t v4 = *(void *)i;
      int v5 = *(unsigned __int8 *)(*(void *)i + 8);
      if (v5 <= 23) {
        break;
      }
      if (v5 == 24 || v5 == 26) {
        goto LABEL_10;
      }
      if (v5 != 41) {
        return sub_1CC6B4934(v4, a2, (uint64_t *)a3);
      }
LABEL_11:
      uint64_t i = v4 + 16;
    }
    if (v5 == 8) {
      goto LABEL_11;
    }
    if (v5 != 23) {
      break;
    }
LABEL_10:
    ;
  }
  return sub_1CC6B4934(v4, a2, (uint64_t *)a3);
}

BOOL llvm::ItaniumPartialDemangler::isFunction(llvm::ItaniumPartialDemangler *this)
{
  return *(unsigned char *)(*(void *)this + 8) == 18;
}

unsigned char *sub_1CC6B4934(uint64_t a1, unsigned char *a2, uint64_t *a3)
{
  uint64_t v11 = -1;
  int v12 = 1;
  if (a2)
  {
    uint64_t v5 = *a3;
  }
  else
  {
    uint64_t v5 = 128;
    __n128 result = malloc_type_malloc(0x80uLL, 0x1E4FE0F9uLL);
    if (!result) {
      return result;
    }
    a2 = result;
  }
  int v8 = a2;
  uint64_t v9 = 0;
  uint64_t v10 = v5;
  (*(void (**)(uint64_t, unsigned char **))(*(void *)a1 + 32))(a1, &v8);
  if ((*(_WORD *)(a1 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, unsigned char **))(*(void *)a1 + 40))(a1, &v8);
  }
  sub_1CD5EFF98(&v8, 1);
  uint64_t v7 = v9++;
  v8[v7] = 0;
  if (a3) {
    *a3 = v9;
  }
  return v8;
}

char *llvm::ItaniumPartialDemangler::getFunctionDeclContextName(llvm::ItaniumPartialDemangler *this, char *a2, unint64_t *a3)
{
  if (*(unsigned char *)(*(void *)this + 8) != 18) {
    return 0;
  }
  uint64_t v4 = *(void *)(*(void *)this + 24);
  uint64_t v15 = -1;
  int v16 = 1;
  if (a2)
  {
    uint64_t v5 = *a3;
  }
  else
  {
    uint64_t v5 = 128;
    __n128 result = (char *)malloc_type_malloc(0x80uLL, 0x1E4FE0F9uLL);
    if (!result) {
      return result;
    }
    a2 = result;
  }
  int v12 = a2;
  unint64_t v13 = 0;
  uint64_t v14 = v5;
  while (1)
  {
    int v7 = *(unsigned __int8 *)(v4 + 8);
    switch(v7)
    {
      case 41:
LABEL_12:
        int v8 = (uint64_t *)(v4 + 16);
        goto LABEL_18;
      case 26:
        uint64_t v4 = *(void *)(v4 + 24);
        int v7 = *(unsigned __int8 *)(v4 + 8);
        break;
      case 8:
        goto LABEL_12;
    }
    if (v7 != 24) {
      break;
    }
    uint64_t v9 = *(void *)(v4 + 16);
    (*(void (**)(uint64_t, char **))(*(void *)v9 + 32))(v9, &v12);
    if ((*(_WORD *)(v9 + 9) & 0xC0) != 0x40) {
      (*(void (**)(uint64_t, char **))(*(void *)v9 + 40))(v9, &v12);
    }
    sub_1CD5EFF98(&v12, 2);
    *(_WORD *)&v12[v13] = 14906;
    v13 += 2;
    int v8 = (uint64_t *)(v4 + 24);
LABEL_18:
    uint64_t v4 = *v8;
  }
  if (v7 == 23)
  {
    uint64_t v10 = *(void *)(v4 + 16);
    (*(void (**)(uint64_t, char **))(*(void *)v10 + 32))(v10, &v12);
    if ((*(_WORD *)(v10 + 9) & 0xC0) != 0x40) {
      (*(void (**)(uint64_t, char **))(*(void *)v10 + 40))(v10, &v12);
    }
  }
  sub_1CD5EFF98(&v12, 1);
  unint64_t v11 = v13++;
  v12[v11] = 0;
  if (a3) {
    *a3 = v13;
  }
  return v12;
}

char *llvm::ItaniumPartialDemangler::getFunctionParameters(llvm::ItaniumPartialDemangler *this, char *a2, unint64_t *a3)
{
  if (*(unsigned char *)(*(void *)this + 8) != 18) {
    return 0;
  }
  long long v14 = *(_OWORD *)(*(void *)this + 32);
  uint64_t v12 = -1;
  int v13 = 1;
  if (a2)
  {
    uint64_t v4 = *a3;
  }
  else
  {
    uint64_t v4 = 128;
    __n128 result = (char *)malloc_type_malloc(0x80uLL, 0x1E4FE0F9uLL);
    if (!result) {
      return result;
    }
    a2 = result;
  }
  uint64_t v9 = a2;
  unint64_t v10 = 0;
  uint64_t v11 = v4;
  sub_1CD5EFF98(&v9, 1);
  unint64_t v6 = v10++;
  v9[v6] = 40;
  sub_1CD5EFED8(&v14, (uint64_t *)&v9);
  sub_1CD5EFF98(&v9, 1);
  unint64_t v7 = v10++;
  v9[v7] = 41;
  sub_1CD5EFF98(&v9, 1);
  unint64_t v8 = v10++;
  v9[v8] = 0;
  if (a3) {
    *a3 = v10;
  }
  return v9;
}

char *llvm::ItaniumPartialDemangler::getFunctionReturnType(llvm::ItaniumPartialDemangler *this, char *a2, unint64_t *a3)
{
  uint64_t v3 = *(void *)this;
  if (*(unsigned char *)(*(void *)this + 8) != 18) {
    return 0;
  }
  uint64_t v13 = -1;
  int v14 = 1;
  if (a2)
  {
    uint64_t v7 = *a3;
  }
  else
  {
    __n128 result = (char *)malloc_type_malloc(0x80uLL, 0x1E4FE0F9uLL);
    if (!result) {
      return result;
    }
    a2 = result;
    uint64_t v3 = *(void *)this;
    uint64_t v7 = 128;
  }
  unint64_t v10 = a2;
  unint64_t v11 = 0;
  uint64_t v12 = v7;
  uint64_t v8 = *(void *)(v3 + 16);
  if (v8)
  {
    (*(void (**)(uint64_t, char **))(*(void *)v8 + 32))(v8, &v10);
    if ((*(_WORD *)(v8 + 9) & 0xC0) != 0x40) {
      (*(void (**)(uint64_t, char **))(*(void *)v8 + 40))(v8, &v10);
    }
  }
  sub_1CD5EFF98(&v10, 1);
  unint64_t v9 = v11++;
  v10[v9] = 0;
  if (a3) {
    *a3 = v11;
  }
  return v10;
}

unsigned char *llvm::ItaniumPartialDemangler::finishDemangle(llvm::ItaniumPartialDemangler *this, char *a2, unint64_t *a3)
{
  return sub_1CC6B4934(*(void *)this, a2, (uint64_t *)a3);
}

BOOL llvm::ItaniumPartialDemangler::hasFunctionQualifiers(llvm::ItaniumPartialDemangler *this)
{
  uint64_t v1 = *(void *)this;
  if (*(unsigned char *)(*(void *)this + 8) != 18) {
    return 0;
  }
  if (*(_DWORD *)(v1 + 56)) {
    return 1;
  }
  return *(unsigned char *)(v1 + 60) != 0;
}

BOOL llvm::ItaniumPartialDemangler::isCtorOrDtor(llvm::ItaniumPartialDemangler *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)this) {
    return 0;
  }
  while (1)
  {
    unsigned int v2 = *(unsigned __int8 *)(v1 + 8);
    if (v2 <= 0x28) {
      break;
    }
    if (v2 != 41) {
      return v2 == 45;
    }
LABEL_8:
    uint64_t v4 = (uint64_t *)(v1 + 16);
LABEL_9:
    uint64_t v1 = *v4;
    if (!v1) {
      return 0;
    }
  }
  BOOL result = 0;
  switch(*(unsigned char *)(v1 + 8))
  {
    case 0x12:
    case 0x17:
    case 0x18:
    case 0x1A:
      uint64_t v4 = (uint64_t *)(v1 + 24);
      goto LABEL_9;
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x19:
      return result;
    default:
      if (v2 == 8) {
        goto LABEL_8;
      }
      break;
  }
  return result;
}

BOOL llvm::ItaniumPartialDemangler::isSpecialName(llvm::ItaniumPartialDemangler *this)
{
  return (*(unsigned char *)(*(void *)this + 8) & 0xFE) == 20;
}

BOOL llvm::ItaniumPartialDemangler::isData(llvm::ItaniumPartialDemangler *this)
{
  int v1 = *(unsigned __int8 *)(*(void *)this + 8);
  BOOL v3 = v1 == 18;
  int v2 = v1 & 0xFE;
  BOOL v3 = v3 || v2 == 20;
  return !v3;
}

uint64_t sub_1CC6B4F7C(unsigned __int8 **a1)
{
  uint64_t v86 = (char *)a1;
  v87[0] = v88;
  v87[1] = v88;
  v87[2] = v89;
  memset(v88, 0, sizeof(v88));
  v89[0] = v90;
  v89[1] = v90;
  v89[2] = &v91;
  memset(v90, 0, sizeof(v90));
  sub_1CD5F0174((char *)v87, (uint64_t)(a1 + 83));
  sub_1CD5F0258((char *)v89, (uint64_t)(v86 + 576));
  int v2 = v86;
  *((void *)v86 + 84) = *((void *)v86 + 83);
  *((void *)v2 + 73) = *((void *)v2 + 72);
  BOOL v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = v4 - *a1;
  if (v4 == *a1) {
    goto LABEL_9;
  }
  int v6 = *v3;
  if (v6 == 71)
  {
    if (v5 < 2) {
      goto LABEL_75;
    }
    int v32 = (char)v3[1];
    switch(v32)
    {
      case 'I':
        *a1 = v3 + 2;
        uint64_t v83 = 0;
        uint64_t v10 = 0;
        if (sub_1CC6B7E64(a1, &v83)) {
          goto LABEL_76;
        }
        uint64_t v8 = v83;
        if (!v83) {
          goto LABEL_76;
        }
        uint64_t v9 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 40);
        uint64_t v10 = v9;
        *(unsigned char *)(v9 + 8) = 20;
        *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v9 = &unk_1F2619730;
        unint64_t v11 = "initializer for module ";
        uint64_t v12 = "";
        break;
      case 'R':
        *a1 = v3 + 2;
        uint64_t v35 = sub_1CC6B7570((uint64_t)a1, 0);
        uint64_t v10 = 0;
        if (!v35) {
          goto LABEL_76;
        }
        uint64_t v8 = v35;
        int v36 = sub_1CC6B7DD0(a1, &v83);
        uint64_t v37 = *a1;
        if (*a1 == a1[1] || *v37 != 95)
        {
          if (!v36) {
            goto LABEL_75;
          }
        }
        else
        {
          *a1 = v37 + 1;
        }
        uint64_t v9 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 40);
        uint64_t v10 = v9;
        *(unsigned char *)(v9 + 8) = 20;
        *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v9 = &unk_1F2619730;
        unint64_t v11 = "reference temporary for ";
        uint64_t v12 = "";
        break;
      case 'V':
        *a1 = v3 + 2;
        uint64_t v33 = sub_1CC6B7570((uint64_t)a1, 0);
        uint64_t v10 = 0;
        if (!v33) {
          goto LABEL_76;
        }
        uint64_t v8 = v33;
        uint64_t v9 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 40);
        uint64_t v10 = v9;
        *(unsigned char *)(v9 + 8) = 20;
        *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v9 = &unk_1F2619730;
        unint64_t v11 = "guard variable for ";
        uint64_t v12 = "";
        break;
      default:
        goto LABEL_75;
    }
LABEL_107:
    *(void *)(v9 + 16) = v11;
    *(void *)(v9 + 24) = v12;
    *(void *)(v9 + 32) = v8;
    goto LABEL_76;
  }
  if (v6 != 84)
  {
LABEL_9:
    LOWORD(v83) = 0;
    HIDWORD(v83) = 0;
    char v84 = 0;
    unint64_t v85 = (a1[91] - a1[90]) >> 3;
    uint64_t v10 = sub_1CC6B7570((uint64_t)a1, (uint64_t)&v83);
    if (!v10) {
      goto LABEL_76;
    }
    unint64_t v13 = v85;
    int v14 = a1[90];
    unint64_t v15 = (a1[91] - v14) >> 3;
    BOOL v16 = v15 > v85;
    unint64_t v17 = v15 - v85;
    if (v16)
    {
      long long v18 = a1[83];
      if (v18 != a1[84])
      {
        char v19 = &v14[8 * v85];
        while (*(void *)v18)
        {
          unint64_t v20 = *(void *)(*(void *)v19 + 16);
          uint64_t v21 = **(void **)v18;
          if (v20 >= (*(void *)(*(void *)v18 + 8) - v21) >> 3) {
            break;
          }
          *(void *)(*(void *)v19 + 24) = *(void *)(v21 + 8 * v20);
          v19 += 8;
          if (!--v17) {
            goto LABEL_17;
          }
        }
      }
      goto LABEL_75;
    }
LABEL_17:
    a1[91] = &v14[8 * v13];
    uint64_t v22 = *a1;
    uint64_t v23 = a1[1];
    if (v23 != *a1)
    {
      unsigned int v24 = *v22 - 46;
      BOOL v16 = v24 > 0x31;
      uint64_t v25 = (1 << v24) & 0x2000000800001;
      if (v16 || v25 == 0)
      {
        if ((unint64_t)(v23 - *a1) >= 0xD && !strncmp("Ua9enable_ifI", (const char *)*a1, 0xDuLL))
        {
          uint64_t v27 = v22 + 13;
          *a1 = v22 + 13;
          uint64_t v28 = (a1[3] - a1[2]) >> 3;
          while (v27 == v23 || *v27 != 69)
          {
            uint64_t v29 = sub_1CC6B7AD8(a1);
            if (!v29) {
              goto LABEL_75;
            }
            uint64_t v30 = v29;
            v31 = a1[3];
            if (v31 == a1[4])
            {
              sub_1CD5F0ACC((uint64_t)(a1 + 2), (v31 - a1[2]) >> 2);
              v31 = a1[3];
            }
            a1[3] = v31 + 8;
            *(void *)v31 = v30;
            uint64_t v27 = *a1;
            uint64_t v23 = a1[1];
          }
          *a1 = v27 + 1;
          unsigned int v75 = a1[3];
          uint64_t v76 = v28;
          v77 = &a1[2][8 * v28];
          __dsta = (void *)sub_1CC6B7FB0((uint64_t)(a1 + 101), (int)v75 - (int)v77);
          int64_t v78 = v75 - v77;
          if (v78) {
            memmove(__dsta, v77, v78);
          }
          a1[3] = &a1[2][8 * v76];
          uint64_t v38 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 32);
          *(unsigned char *)(v38 + 8) = 9;
          *(_WORD *)(v38 + 9) = *(_WORD *)(v38 + 9) & 0xF000 | 0x540;
          *(void *)uint64_t v38 = &unk_1F261ABD0;
          *(void *)(v38 + 16) = __dsta;
          *(void *)(v38 + 24) = v78 >> 3;
        }
        else
        {
          uint64_t v38 = 0;
        }
        uint64_t v39 = 0;
        if (!(_BYTE)v83)
        {
          if (BYTE1(v83))
          {
            uint64_t v39 = sub_1CC6B5D0C((uint64_t)a1);
            if (!v39) {
              goto LABEL_75;
            }
          }
        }
        __int16 v40 = *a1;
        if (*a1 == a1[1] || *v40 != 118)
        {
          uint64_t v79 = v39;
          uint64_t v80 = v38;
          uint64_t __dst = (a1[3] - a1[2]) >> 3;
          while (1)
          {
            uint64_t v44 = sub_1CC6B5D0C((uint64_t)a1);
            if (!v44) {
              goto LABEL_75;
            }
            uint64_t v45 = v44;
            uint64_t v46 = a1[3];
            if (v46 == a1[4])
            {
              sub_1CD5F0ACC((uint64_t)(a1 + 2), (v46 - a1[2]) >> 2);
              uint64_t v46 = a1[3];
            }
            a1[3] = v46 + 8;
            *(void *)uint64_t v46 = v45;
            if (a1[1] != *a1)
            {
              unsigned int v47 = **a1 - 46;
              BOOL v16 = v47 > 0x31;
              uint64_t v48 = (1 << v47) & 0x2000000800001;
              if (v16 || v48 == 0) {
                continue;
              }
            }
            char v59 = a1[3];
            uint64_t v60 = &a1[2][8 * __dst];
            long long v61 = (void *)sub_1CC6B7FB0((uint64_t)(a1 + 101), (int)v59 - (int)v60);
            uint64_t v62 = v61;
            int64_t v63 = v59 - v60;
            if (v63) {
              memmove(v61, v60, v63);
            }
            a1[3] = &a1[2][8 * __dst];
            uint64_t v41 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 64);
            int v42 = HIDWORD(v83);
            char v43 = v84;
            *(unsigned char *)(v41 + 8) = 18;
            *(_WORD *)(v41 + 9) = *(_WORD *)(v41 + 9) & 0xF000 | 0x100;
            *(void *)uint64_t v41 = &unk_1F261AC28;
            *(void *)(v41 + 16) = v79;
            *(void *)(v41 + 24) = v10;
            *(void *)(v41 + 32) = v62;
            *(void *)(v41 + 40) = v63 >> 3;
            uint64_t v38 = v80;
            goto LABEL_88;
          }
        }
        *a1 = v40 + 1;
        uint64_t v41 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 64);
        int v42 = HIDWORD(v83);
        char v43 = v84;
        *(unsigned char *)(v41 + 8) = 18;
        *(_WORD *)(v41 + 9) = *(_WORD *)(v41 + 9) & 0xF000 | 0x100;
        *(void *)uint64_t v41 = &unk_1F261AC28;
        *(void *)(v41 + 16) = v39;
        *(void *)(v41 + 24) = v10;
        *(void *)(v41 + 32) = 0;
        *(void *)(v41 + 40) = 0;
LABEL_88:
        *(void *)(v41 + 48) = v38;
        *(_DWORD *)(v41 + 56) = v42;
        uint64_t v10 = v41;
        *(unsigned char *)(v41 + 60) = v43;
      }
    }
  }
  else
  {
    if (v5 >= 2)
    {
      if (v5 <= 2)
      {
        switch(v3[1])
        {
          case 'A':
            *a1 = v3 + 2;
            uint64_t v34 = sub_1CC6B7AD8(a1);
            if (!v34) {
              goto LABEL_75;
            }
            uint64_t v8 = v34;
            uint64_t v9 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 40);
            uint64_t v10 = v9;
            *(unsigned char *)(v9 + 8) = 20;
            *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
            *(void *)uint64_t v9 = &unk_1F2619730;
            unint64_t v11 = "template parameter object for ";
            uint64_t v12 = "";
            goto LABEL_107;
          case 'B':
          case 'D':
          case 'E':
          case 'F':
          case 'G':
            goto LABEL_70;
          case 'C':
            *a1 = v3 + 2;
            uint64_t v65 = sub_1CC6B5D0C((uint64_t)a1);
            if (!v65) {
              goto LABEL_75;
            }
            uint64_t v66 = v65;
            v67 = sub_1CC6B5BE0((char **)a1, 1);
            if (v67 == v68) {
              goto LABEL_75;
            }
            char v69 = *a1;
            if (*a1 == a1[1]) {
              goto LABEL_75;
            }
            if (*v69 != 95) {
              goto LABEL_75;
            }
            *a1 = v69 + 1;
            uint64_t v70 = sub_1CC6B5D0C((uint64_t)a1);
            if (!v70) {
              goto LABEL_75;
            }
            uint64_t v71 = v70;
            uint64_t v10 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 32);
            *(unsigned char *)(v10 + 8) = 21;
            *(_WORD *)(v10 + 9) = *(_WORD *)(v10 + 9) & 0xF000 | 0x540;
            *(void *)uint64_t v10 = &unk_1F2619788;
            *(void *)(v10 + 16) = v71;
            *(void *)(v10 + 24) = v66;
            goto LABEL_76;
          case 'H':
            *a1 = v3 + 2;
            uint64_t v64 = sub_1CC6B7570((uint64_t)a1, 0);
            uint64_t v10 = 0;
            if (!v64) {
              goto LABEL_76;
            }
            uint64_t v8 = v64;
            uint64_t v9 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 40);
            uint64_t v10 = v9;
            *(unsigned char *)(v9 + 8) = 20;
            *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
            *(void *)uint64_t v9 = &unk_1F2619730;
            unint64_t v11 = "thread-local initialization routine for ";
            uint64_t v12 = "";
            goto LABEL_107;
          case 'I':
            *a1 = v3 + 2;
            uint64_t v72 = sub_1CC6B5D0C((uint64_t)a1);
            if (!v72) {
              goto LABEL_75;
            }
            uint64_t v8 = v72;
            uint64_t v9 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 40);
            uint64_t v10 = v9;
            *(unsigned char *)(v9 + 8) = 20;
            *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
            *(void *)uint64_t v9 = &unk_1F2619730;
            unint64_t v11 = "typeinfo for ";
            uint64_t v12 = "";
            goto LABEL_107;
          default:
            JUMPOUT(0);
        }
      }
      switch(v3[1])
      {
        case 'S':
          *a1 = v3 + 2;
          uint64_t v7 = sub_1CC6B5D0C((uint64_t)a1);
          if (!v7) {
            goto LABEL_75;
          }
          uint64_t v8 = v7;
          uint64_t v9 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 40);
          uint64_t v10 = v9;
          *(unsigned char *)(v9 + 8) = 20;
          *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
          *(void *)uint64_t v9 = &unk_1F2619730;
          unint64_t v11 = "typeinfo name for ";
          uint64_t v12 = "";
          goto LABEL_107;
        case 'T':
          *a1 = v3 + 2;
          uint64_t v73 = sub_1CC6B5D0C((uint64_t)a1);
          if (!v73) {
            goto LABEL_75;
          }
          uint64_t v8 = v73;
          uint64_t v9 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 40);
          uint64_t v10 = v9;
          *(unsigned char *)(v9 + 8) = 20;
          *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
          *(void *)uint64_t v9 = &unk_1F2619730;
          unint64_t v11 = "VTT for ";
          uint64_t v12 = "";
          goto LABEL_107;
        case 'U':
          goto LABEL_70;
        case 'V':
          *a1 = v3 + 2;
          uint64_t v74 = sub_1CC6B5D0C((uint64_t)a1);
          if (!v74) {
            goto LABEL_75;
          }
          uint64_t v8 = v74;
          uint64_t v9 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 40);
          uint64_t v10 = v9;
          *(unsigned char *)(v9 + 8) = 20;
          *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
          *(void *)uint64_t v9 = &unk_1F2619730;
          unint64_t v11 = "vtable for ";
          uint64_t v12 = "";
          goto LABEL_107;
        case 'W':
          *a1 = v3 + 2;
          uint64_t v10 = 0;
          uint64_t v83 = sub_1CC6B7570((uint64_t)a1, 0);
          if (v83) {
            uint64_t v10 = sub_1CC6B5C7C((uint64_t)a1, "thread-local wrapper routine for ", &v83);
          }
          goto LABEL_76;
        default:
          if (v3[1] != 99) {
            goto LABEL_70;
          }
          *a1 = v3 + 2;
          if (sub_1CC6B7CFC((uint64_t)a1)) {
            goto LABEL_75;
          }
          if (sub_1CC6B7CFC((uint64_t)a1)) {
            goto LABEL_75;
          }
          uint64_t v50 = sub_1CC6B4F7C(a1);
          if (!v50) {
            goto LABEL_75;
          }
          uint64_t v8 = v50;
          uint64_t v9 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 40);
          uint64_t v10 = v9;
          *(unsigned char *)(v9 + 8) = 20;
          *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
          *(void *)uint64_t v9 = &unk_1F2619730;
          unint64_t v11 = "covariant return thunk to ";
          uint64_t v12 = "";
          break;
      }
      goto LABEL_107;
    }
LABEL_70:
    uint64_t v51 = v3 + 1;
    *a1 = v51;
    BOOL v52 = v4 != v51 && *v51 == 118;
    if ((sub_1CC6B7CFC((uint64_t)a1) & 1) != 0 || (uint64_t v53 = sub_1CC6B4F7C(a1)) == 0)
    {
LABEL_75:
      uint64_t v10 = 0;
      goto LABEL_76;
    }
    uint64_t v55 = v53;
    uint64_t v56 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 40);
    uint64_t v10 = v56;
    *(unsigned char *)(v56 + 8) = 20;
    *(_WORD *)(v56 + 9) = *(_WORD *)(v56 + 9) & 0xF000 | 0x540;
    *(void *)uint64_t v56 = &unk_1F2619730;
    if (v52)
    {
      uint64_t v57 = "virtual thunk to ";
      unint64_t v58 = "";
    }
    else
    {
      uint64_t v57 = "non-virtual thunk to ";
      unint64_t v58 = "";
    }
    *(void *)(v56 + 16) = v57;
    *(void *)(v56 + 24) = v58;
    *(void *)(v56 + 32) = v55;
  }
LABEL_76:
  sub_1CD5F0174(v86 + 664, (uint64_t)v87);
  sub_1CD5F0258(v86 + 576, (uint64_t)v89);
  if (v89[0] != v90) {
    free(v89[0]);
  }
  if (v87[0] != v88) {
    free(v87[0]);
  }
  return v10;
}

char *sub_1CC6B5BE0(char **a1, int a2)
{
  BOOL result = *a1;
  unint64_t v5 = a1[1];
  int v6 = result;
  if (a2)
  {
    if (result == v5) {
      return 0;
    }
    int v6 = result;
    if (*result == 110)
    {
      int v6 = result + 1;
      *a1 = result + 1;
    }
  }
  if (v5 == v6) {
    return 0;
  }
  if (*v6 < 0) {
    return 0;
  }
  uint64_t v7 = MEMORY[0x1E4F14390];
  if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *v6 + 60) & 0x400) == 0) {
    return 0;
  }
  do
  {
    if (*v6 < 0) {
      break;
    }
    if ((*(_DWORD *)(v7 + 4 * *v6 + 60) & 0x400) == 0) {
      break;
    }
    *a1 = ++v6;
  }
  while (v6 != v5);
  return result;
}

uint64_t sub_1CC6B5C7C(uint64_t a1, const char *a2, uint64_t *a3)
{
  uint64_t v5 = sub_1CC6B7FB0(a1 + 808, 40);
  size_t v6 = strlen(a2);
  uint64_t v7 = *a3;
  *(unsigned char *)(v5 + 8) = 20;
  *(_WORD *)(v5 + 9) = *(_WORD *)(v5 + 9) & 0xF000 | 0x540;
  *(void *)uint64_t v5 = &unk_1F2619730;
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = &a2[v6];
  *(void *)(v5 + 32) = v7;
  return v5;
}

uint64_t sub_1CC6B5D0C(uint64_t a1)
{
  int v2 = *(char **)a1;
  BOOL v3 = *(char **)(a1 + 8);
  unint64_t v4 = (unint64_t)&v3[-*(void *)a1];
  if (v3 != *(char **)a1)
  {
    int v5 = *v2;
    switch(*v2)
    {
      case 'A':
        if (v5 != 65) {
          return 0;
        }
        *(void *)a1 = v2 + 1;
        if (v3 == v2 + 1)
        {
          if ((*(unsigned char *)(MEMORY[0x1E4F14390] + 61) & 4) == 0) {
            goto LABEL_108;
          }
        }
        else
        {
          if (v2[1] < 0) {
            goto LABEL_108;
          }
          uint64_t v15 = v2[1];
          if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v15 + 60) & 0x400) == 0)
          {
            if (v15 == 95)
            {
              BOOL v16 = 0;
              unint64_t v17 = v2 + 2;
              goto LABEL_114;
            }
LABEL_108:
            uint64_t v57 = sub_1CC6B91F4(a1);
            if (!v57) {
              return 0;
            }
LABEL_111:
            long long v61 = *(char **)a1;
            if (*(void *)a1 == *(void *)(a1 + 8) || *v61 != 95) {
              return 0;
            }
            BOOL v16 = (char *)v57;
            unint64_t v17 = v61 + 1;
LABEL_114:
            *(void *)a1 = v17;
            uint64_t v62 = sub_1CC6B5D0C(a1);
            if (!v62) {
              return 0;
            }
            uint64_t v27 = (char *)v62;
            uint64_t v29 = sub_1CC6B7FB0(a1 + 808, 32);
            uint64_t v21 = v29;
            *(unsigned char *)(v29 + 8) = 14;
            *(_WORD *)(v29 + 9) = *(_WORD *)(v29 + 9) & 0xF000 | 0x400;
            v31 = &unk_1F261B048;
LABEL_106:
            *(void *)uint64_t v29 = v31;
            *(void *)(v29 + 16) = v27;
            *(void *)(v29 + 24) = v16;
            goto LABEL_57;
          }
        }
        unint64_t v58 = sub_1CC6B5BE0((char **)a1, 0);
        uint64_t v60 = v59;
        uint64_t v57 = sub_1CC6B7FB0(a1 + 808, 32);
        *(unsigned char *)(v57 + 8) = 7;
        *(_WORD *)(v57 + 9) = *(_WORD *)(v57 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v57 = &unk_1F26197E0;
        *(void *)(v57 + 16) = v58;
        *(void *)(v57 + 24) = v60;
        goto LABEL_111;
      case 'C':
        *(void *)a1 = v2 + 1;
        uint64_t v18 = sub_1CC6B5D0C(a1);
        if (!v18) {
          return 0;
        }
        uint64_t v19 = v18;
        uint64_t v20 = sub_1CC6B7FB0(a1 + 808, 40);
        uint64_t v21 = v20;
        *(unsigned char *)(v20 + 8) = 5;
        *(_WORD *)(v20 + 9) = *(_WORD *)(v20 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v20 = &unk_1F261B200;
        *(void *)(v20 + 16) = v19;
        *(void *)(v20 + 24) = " complex";
        uint64_t v22 = "";
        goto LABEL_29;
      case 'D':
        if (v4 < 2) {
          return 0;
        }
        break;
      case 'F':
        goto LABEL_102;
      case 'G':
        *(void *)a1 = v2 + 1;
        uint64_t v24 = sub_1CC6B5D0C(a1);
        if (!v24) {
          return 0;
        }
        uint64_t v25 = v24;
        uint64_t v20 = sub_1CC6B7FB0(a1 + 808, 40);
        uint64_t v21 = v20;
        *(unsigned char *)(v20 + 8) = 5;
        *(_WORD *)(v20 + 9) = *(_WORD *)(v20 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v20 = &unk_1F261B200;
        *(void *)(v20 + 16) = v25;
        *(void *)(v20 + 24) = " imaginary";
        uint64_t v22 = "";
LABEL_29:
        *(void *)(v20 + 32) = v22;
        goto LABEL_57;
      case 'K':
      case 'V':
      case 'r':
        unint64_t v6 = v5 == 114;
        BOOL v7 = v4 > v6 && v2[v6] == 86;
        unint64_t v8 = v7 + (unint64_t)v6;
        BOOL v9 = v4 > v8 && v2[v8] == 75;
        unint64_t v10 = v8 + v9;
        if (v4 <= v10) {
          goto LABEL_15;
        }
        int v11 = v2[v10];
        if (v11 != 70)
        {
          unint64_t v12 = v10 + 1;
          BOOL v13 = v11 == 68 && v4 > v12;
          if (!v13) {
            goto LABEL_15;
          }
          unsigned int v54 = v2[v12] - 79;
          BOOL v13 = v54 > 0x29;
          uint64_t v55 = (1 << v54) & 0x30100000001;
          if (v13 || v55 == 0) {
            goto LABEL_15;
          }
        }
LABEL_102:
        uint64_t v14 = sub_1CC6BCDE0(a1);
        goto LABEL_56;
      case 'M':
        if (v5 != 77) {
          return 0;
        }
        *(void *)a1 = v2 + 1;
        uint64_t v26 = sub_1CC6B5D0C(a1);
        if (!v26) {
          return 0;
        }
        uint64_t v27 = (char *)v26;
        uint64_t v28 = sub_1CC6B5D0C(a1);
        if (!v28) {
          return 0;
        }
        BOOL v16 = (char *)v28;
        uint64_t v29 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v29;
        char v30 = *(_WORD *)(v16 + 9);
        *(unsigned char *)(v29 + 8) = 13;
        *(_WORD *)(v29 + 9) = v30 & 0xC0 | 0x500 | *(_WORD *)(v29 + 9) & 0xF000;
        v31 = &unk_1F261B0A0;
        goto LABEL_106;
      case 'O':
        *(void *)a1 = v2 + 1;
        uint64_t v32 = sub_1CC6B5D0C(a1);
        if (!v32) {
          return 0;
        }
        uint64_t v33 = v32;
        uint64_t v34 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v34;
        char v35 = *(_WORD *)(v33 + 9);
        *(unsigned char *)(v34 + 8) = 12;
        *(_WORD *)(v34 + 9) = v35 & 0xC0 | 0x500 | *(_WORD *)(v34 + 9) & 0xF000;
        *(void *)uint64_t v34 = &unk_1F261B1A8;
        *(void *)(v34 + 16) = v33;
        *(_DWORD *)(v34 + 24) = 1;
        goto LABEL_41;
      case 'P':
        *(void *)a1 = v2 + 1;
        uint64_t v36 = sub_1CC6B5D0C(a1);
        if (!v36) {
          return 0;
        }
        uint64_t v37 = v36;
        uint64_t v38 = sub_1CC6B7FB0(a1 + 808, 24);
        uint64_t v21 = v38;
        char v39 = *(_WORD *)(v37 + 9);
        *(unsigned char *)(v38 + 8) = 11;
        *(_WORD *)(v38 + 9) = v39 & 0xC0 | 0x500 | *(_WORD *)(v38 + 9) & 0xF000;
        __int16 v40 = &unk_1F261B150;
LABEL_38:
        *(void *)uint64_t v38 = v40;
        *(void *)(v38 + 16) = v37;
        goto LABEL_57;
      case 'R':
        *(void *)a1 = v2 + 1;
        uint64_t v41 = sub_1CC6B5D0C(a1);
        if (!v41) {
          return 0;
        }
        uint64_t v42 = v41;
        uint64_t v34 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v34;
        char v43 = *(_WORD *)(v42 + 9);
        *(unsigned char *)(v34 + 8) = 12;
        *(_WORD *)(v34 + 9) = v43 & 0xC0 | 0x500 | *(_WORD *)(v34 + 9) & 0xF000;
        *(void *)uint64_t v34 = &unk_1F261B1A8;
        *(void *)(v34 + 16) = v42;
        *(_DWORD *)(v34 + 24) = 0;
LABEL_41:
        *(unsigned char *)(v34 + 28) = 0;
        goto LABEL_57;
      case 'S':
        if (v4 >= 2 && v2[1] == 116) {
          goto LABEL_55;
        }
        unsigned __int8 v98 = 0;
        uint64_t v44 = sub_1CC6B81AC(a1, 0, &v98);
        if (!v44) {
          return 0;
        }
        uint64_t v21 = v44;
        if (*(void *)(a1 + 8) == *(void *)a1)
        {
          int v45 = v98;
        }
        else
        {
          int v45 = v98;
          if (**(unsigned char **)a1 == 73)
          {
            if (v98)
            {
              if (!*(unsigned char *)(a1 + 776)) {
                return v21;
              }
            }
            else
            {
              uint64_t v70 = *(uint64_t **)(a1 + 304);
              if (v70 == *(uint64_t **)(a1 + 312))
              {
                sub_1CD5F0ACC(a1 + 296, ((uint64_t)v70 - *(void *)(a1 + 296)) >> 2);
                uint64_t v70 = *(uint64_t **)(a1 + 304);
              }
              *(void *)(a1 + 304) = v70 + 1;
              *uint64_t v70 = v21;
            }
LABEL_129:
            uint64_t v71 = sub_1CC6B82F4(a1, 0);
            if (v71)
            {
              uint64_t v72 = v71;
              uint64_t v73 = sub_1CC6B7FB0(a1 + 808, 32);
              *(unsigned char *)(v73 + 8) = 41;
              *(_WORD *)(v73 + 9) = *(_WORD *)(v73 + 9) & 0xF000 | 0x540;
              *(void *)uint64_t v73 = &unk_1F261AB20;
              *(void *)(v73 + 16) = v21;
              *(void *)(v73 + 24) = v72;
              uint64_t v21 = v73;
              goto LABEL_57;
            }
            return 0;
          }
        }
        if (v45) {
          return v21;
        }
        goto LABEL_57;
      case 'T':
        if (v4 >= 2)
        {
          unsigned int v46 = v2[1] - 101;
          BOOL v13 = v46 > 0x10;
          int v47 = (1 << v46) & 0x14001;
          if (!v13 && v47 != 0) {
            goto LABEL_55;
          }
        }
        uint64_t v21 = sub_1CC6B86AC(a1);
        if (!v21) {
          return v21;
        }
        if (*(unsigned char *)(a1 + 776) && *(void *)(a1 + 8) != *(void *)a1 && **(unsigned char **)a1 == 73) {
          goto LABEL_129;
        }
        goto LABEL_57;
      case 'U':
LABEL_15:
        uint64_t v14 = sub_1CC6BD2A0(a1);
        goto LABEL_56;
      case 'a':
        *(void *)a1 = v2 + 1;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "signed char";
        goto LABEL_66;
      case 'b':
        *(void *)a1 = v2 + 1;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "BOOL";
        goto LABEL_85;
      case 'c':
        *(void *)a1 = v2 + 1;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "char";
        goto LABEL_85;
      case 'd':
        *(void *)a1 = v2 + 1;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "double";
LABEL_64:
        BOOL v52 = (char *)(v51 + 6);
        goto LABEL_91;
      case 'e':
        *(void *)a1 = v2 + 1;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "long double";
LABEL_66:
        BOOL v52 = (char *)(v51 + 11);
        goto LABEL_91;
      case 'f':
        *(void *)a1 = v2 + 1;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "float";
        goto LABEL_79;
      case 'g':
        *(void *)a1 = v2 + 1;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "__float128";
LABEL_69:
        BOOL v52 = (char *)(v51 + 10);
        goto LABEL_91;
      case 'h':
        *(void *)a1 = v2 + 1;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "unsigned char";
        goto LABEL_75;
      case 'i':
        *(void *)a1 = v2 + 1;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "int";
        goto LABEL_90;
      case 'j':
        *(void *)a1 = v2 + 1;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "unsigned int";
        BOOL v52 = "";
        goto LABEL_91;
      case 'l':
        *(void *)a1 = v2 + 1;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "long";
        goto LABEL_85;
      case 'm':
        *(void *)a1 = v2 + 1;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "unsigned long";
LABEL_75:
        BOOL v52 = (char *)(v51 + 13);
        goto LABEL_91;
      case 'n':
        *(void *)a1 = v2 + 1;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "__int128";
        BOOL v52 = "";
        goto LABEL_91;
      case 'o':
        *(void *)a1 = v2 + 1;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "unsigned __int128";
        BOOL v52 = "";
        goto LABEL_91;
      case 's':
        *(void *)a1 = v2 + 1;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "short";
LABEL_79:
        BOOL v52 = (char *)(v51 + 5);
        goto LABEL_91;
      case 't':
        *(void *)a1 = v2 + 1;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "unsigned short";
        BOOL v52 = "";
        goto LABEL_91;
      case 'u':
        *(void *)a1 = v2 + 1;
        unint64_t v99 = 0;
        BOOL v16 = 0;
        uint64_t v27 = 0;
        if ((sub_1CC6B813C((unsigned __int8 **)a1, (uint64_t *)&v99) & 1) == 0)
        {
          uint64_t v27 = *(char **)a1;
          if (*(void *)(a1 + 8) - *(void *)a1 >= v99)
          {
            BOOL v16 = &v27[v99];
            *(void *)a1 = &v27[v99];
          }
          else
          {
            BOOL v16 = 0;
            uint64_t v27 = 0;
          }
        }
        if (v27 == v16) {
          return 0;
        }
        uint64_t v29 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v29;
        *(unsigned char *)(v29 + 8) = 7;
        *(_WORD *)(v29 + 9) = *(_WORD *)(v29 + 9) & 0xF000 | 0x540;
        v31 = &unk_1F26197E0;
        goto LABEL_106;
      case 'v':
        *(void *)a1 = v2 + 1;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "void";
LABEL_85:
        BOOL v52 = (char *)(v51 + 4);
        goto LABEL_91;
      case 'w':
        *(void *)a1 = v2 + 1;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "wchar_t";
        BOOL v52 = "";
        goto LABEL_91;
      case 'x':
        *(void *)a1 = v2 + 1;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "long long";
        BOOL v52 = "";
        goto LABEL_91;
      case 'y':
        *(void *)a1 = v2 + 1;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "unsigned long long";
        BOOL v52 = "";
        goto LABEL_91;
      case 'z':
        *(void *)a1 = v2 + 1;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "...";
LABEL_90:
        BOOL v52 = (char *)(v51 + 3);
LABEL_91:
        *(void *)(v50 + 16) = v51;
        *(void *)(v50 + 24) = v52;
        return v21;
      default:
        goto LABEL_55;
    }
    uint64_t v21 = 0;
    int v23 = v2[1];
    switch(v2[1])
    {
      case 'O':
      case 'o':
      case 'w':
      case 'x':
        goto LABEL_102;
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '[':
      case '\\':
      case ']':
      case '^':
      case '_':
      case 'b':
      case 'g':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'q':
      case 'r':
        return v21;
      case 'T':
      case 't':
        uint64_t v14 = sub_1CC6B8940(a1);
        goto LABEL_56;
      case 'U':
        goto LABEL_131;
      case 'a':
        *(void *)a1 = v2 + 2;
        uint64_t v76 = "auto";
        goto LABEL_143;
      case 'c':
        *(void *)a1 = v2 + 2;
        uint64_t v76 = "decltype(auto)";
        goto LABEL_148;
      case 'd':
        *(void *)a1 = v2 + 2;
        uint64_t v76 = "decimal64";
        goto LABEL_139;
      case 'e':
        *(void *)a1 = v2 + 2;
        uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
        uint64_t v21 = v50;
        *(unsigned char *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v50 = &unk_1F26197E0;
        uint64_t v51 = "decimal128";
        goto LABEL_69;
      case 'f':
        *(void *)a1 = v2 + 2;
        uint64_t v76 = "decimal32";
LABEL_139:
        return sub_1CC6B9178(a1, v76);
      case 'h':
        *(void *)a1 = v2 + 2;
        uint64_t v76 = "half";
LABEL_143:
        return sub_1CC6B9178(a1, v76);
      case 'i':
        *(void *)a1 = v2 + 2;
        uint64_t v76 = "char32_t";
        goto LABEL_154;
      case 'n':
        *(void *)a1 = v2 + 2;
        uint64_t v76 = "std::nullptr_t";
LABEL_148:
        return sub_1CC6B9178(a1, v76);
      case 'p':
        *(void *)a1 = v2 + 2;
        uint64_t v77 = sub_1CC6B5D0C(a1);
        if (!v77) {
          return 0;
        }
        uint64_t v37 = v77;
        uint64_t v38 = sub_1CC6B7FB0(a1 + 808, 24);
        uint64_t v21 = v38;
        *(unsigned char *)(v38 + 8) = 38;
        *(_WORD *)(v38 + 9) = *(_WORD *)(v38 + 9) & 0xF000 | 0x540;
        __int16 v40 = &unk_1F261A2E0;
        goto LABEL_38;
      case 's':
        *(void *)a1 = v2 + 2;
        uint64_t v76 = "char16_t";
LABEL_154:
        return sub_1CC6B9178(a1, v76);
      case 'u':
        *(void *)a1 = v2 + 2;
        uint64_t v76 = "char8_t";
        return sub_1CC6B9178(a1, v76);
      case 'v':
        if (strncmp("Dv", v2, 2uLL)) {
          return 0;
        }
        *(void *)a1 = v2 + 2;
        if (v3 == v2 + 2 || v2[2] < 49) {
          goto LABEL_184;
        }
        unsigned int v78 = v2[2];
        if (v78 <= 0x39)
        {
          uint64_t v79 = sub_1CC6B5BE0((char **)a1, 0);
          uint64_t v81 = v80;
          uint64_t v82 = sub_1CC6B7FB0(a1 + 808, 32);
          *(unsigned char *)(v82 + 8) = 7;
          *(_WORD *)(v82 + 9) = *(_WORD *)(v82 + 9) & 0xF000 | 0x540;
          *(void *)uint64_t v82 = &unk_1F26197E0;
          *(void *)(v82 + 16) = v79;
          *(void *)(v82 + 24) = v81;
          uint64_t v83 = *(char **)a1;
          char v84 = *(char **)(a1 + 8);
          if (*(char **)a1 != v84 && *v83 == 95)
          {
            uint64_t v37 = v82;
            *(void *)a1 = v83 + 1;
            if (v83 + 1 != v84 && v83[1] == 112)
            {
              *(void *)a1 = v83 + 2;
              uint64_t v38 = sub_1CC6B7FB0(a1 + 808, 24);
              uint64_t v21 = v38;
              *(unsigned char *)(v38 + 8) = 28;
              *(_WORD *)(v38 + 9) = *(_WORD *)(v38 + 9) & 0xF000 | 0x540;
              __int16 v40 = &unk_1F261AF98;
              goto LABEL_38;
            }
            uint64_t v97 = sub_1CC6B5D0C(a1);
            if (v97)
            {
              uint64_t v95 = v97;
              uint64_t v96 = a1 + 808;
              goto LABEL_189;
            }
          }
          return 0;
        }
        if (v78 != 95)
        {
LABEL_184:
          uint64_t v92 = sub_1CC6B91F4(a1);
          if (v92)
          {
            uint64_t v93 = *(char **)a1;
            if (*(void *)a1 != *(void *)(a1 + 8) && *v93 == 95)
            {
              uint64_t v37 = v92;
              *(void *)a1 = v93 + 1;
              uint64_t v94 = sub_1CC6B5D0C(a1);
              if (v94)
              {
                uint64_t v95 = v94;
                uint64_t v96 = a1 + 808;
LABEL_189:
                uint64_t v21 = sub_1CC6B7FB0(v96, 32);
                *(unsigned char *)(v21 + 8) = 27;
                *(_WORD *)(v21 + 9) = *(_WORD *)(v21 + 9) & 0xF000 | 0x540;
                *(void *)uint64_t v21 = &unk_1F261AFF0;
                *(void *)(v21 + 16) = v95;
                *(void *)(v21 + 24) = v37;
                goto LABEL_57;
              }
            }
          }
          return 0;
        }
        *(void *)a1 = v2 + 3;
        uint64_t v90 = sub_1CC6B5D0C(a1);
        if (!v90) {
          return 0;
        }
        uint64_t v91 = v90;
        uint64_t v21 = sub_1CC6B7FB0(a1 + 808, 32);
        *(unsigned char *)(v21 + 8) = 27;
        *(_WORD *)(v21 + 9) = *(_WORD *)(v21 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v21 = &unk_1F261AFF0;
        *(void *)(v21 + 16) = v91;
        *(void *)(v21 + 24) = 0;
        goto LABEL_57;
      default:
        if (v23 != 66)
        {
          if (v23 != 70) {
            return v21;
          }
          *(void *)a1 = v2 + 2;
          int64_t v63 = sub_1CC6B5BE0((char **)a1, 0);
          uint64_t v65 = v64;
          uint64_t v66 = sub_1CC6B7FB0(a1 + 808, 32);
          *(unsigned char *)(v66 + 8) = 7;
          *(_WORD *)(v66 + 9) = *(_WORD *)(v66 + 9) & 0xF000 | 0x540;
          *(void *)uint64_t v66 = &unk_1F26197E0;
          *(void *)(v66 + 16) = v63;
          *(void *)(v66 + 24) = v65;
          if (v65 - (void)v63 == 2)
          {
            int v67 = strncmp(v63, "16", 2uLL);
            uint64_t v68 = *(char **)a1;
            char v69 = *(char **)(a1 + 8);
            if (!v67)
            {
              if (v68 == v69) {
                return 0;
              }
              if (*v68 == 98)
              {
                *(void *)a1 = v68 + 1;
                uint64_t v50 = sub_1CC6B7FB0(a1 + 808, 32);
                uint64_t v21 = v50;
                *(unsigned char *)(v50 + 8) = 7;
                *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
                *(void *)uint64_t v50 = &unk_1F26197E0;
                uint64_t v51 = "__bf16";
                goto LABEL_64;
              }
            }
          }
          else
          {
            uint64_t v68 = *(char **)a1;
            char v69 = *(char **)(a1 + 8);
          }
          if (v68 != v69 && *v68 == 95)
          {
            *(void *)a1 = v68 + 1;
            uint64_t v21 = sub_1CC6B7FB0(a1 + 808, 24);
            *(unsigned char *)(v21 + 8) = 29;
            *(_WORD *)(v21 + 9) = *(_WORD *)(v21 + 9) & 0xF000 | 0x540;
            *(void *)uint64_t v21 = &unk_1F261AEE8;
            *(void *)(v21 + 16) = v66;
            return v21;
          }
          return 0;
        }
LABEL_131:
        BOOL v74 = v2[1] == 66;
        *(void *)a1 = v2 + 2;
        if (v3 == v2 + 2)
        {
          uint64_t v75 = 0;
        }
        else
        {
          if (v2[2] < 0) {
            goto LABEL_171;
          }
          uint64_t v75 = v2[2];
        }
        if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v75 + 60) & 0x400) != 0)
        {
          uint64_t v86 = sub_1CC6B5BE0((char **)a1, 0);
          uint64_t v88 = v87;
          uint64_t v85 = sub_1CC6B7FB0(a1 + 808, 32);
          *(unsigned char *)(v85 + 8) = 7;
          *(_WORD *)(v85 + 9) = *(_WORD *)(v85 + 9) & 0xF000 | 0x540;
          *(void *)uint64_t v85 = &unk_1F26197E0;
          *(void *)(v85 + 16) = v86;
          *(void *)(v85 + 24) = v88;
          goto LABEL_174;
        }
LABEL_171:
        uint64_t v85 = sub_1CC6B91F4(a1);
        if (!v85) {
          return 0;
        }
LABEL_174:
        v89 = *(char **)a1;
        if (*(void *)a1 != *(void *)(a1 + 8) && *v89 == 95)
        {
          *(void *)a1 = v89 + 1;
          uint64_t v21 = sub_1CC6B7FB0(a1 + 808, 32);
          *(unsigned char *)(v21 + 8) = 30;
          *(_WORD *)(v21 + 9) = *(_WORD *)(v21 + 9) & 0xF000 | 0x540;
          *(void *)uint64_t v21 = &unk_1F261AF40;
          *(void *)(v21 + 16) = v85;
          *(unsigned char *)(v21 + 24) = v74;
          return v21;
        }
        return 0;
    }
  }
LABEL_55:
  uint64_t v14 = sub_1CC6BD538((const char **)a1);
LABEL_56:
  uint64_t v21 = v14;
  if (v14)
  {
LABEL_57:
    uint64_t v49 = *(uint64_t **)(a1 + 304);
    if (v49 == *(uint64_t **)(a1 + 312))
    {
      sub_1CD5F0ACC(a1 + 296, ((uint64_t)v49 - *(void *)(a1 + 296)) >> 2);
      uint64_t v49 = *(uint64_t **)(a1 + 304);
    }
    *(void *)(a1 + 304) = v49 + 1;
    uint64_t *v49 = v21;
  }
  return v21;
}

uint64_t sub_1CC6B7570(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(char **)a1;
  if (*(void *)(a1 + 8) == *(void *)a1) {
    goto LABEL_11;
  }
  int v5 = *v4;
  if (v5 == 90)
  {
    *(void *)a1 = v4 + 1;
    uint64_t v16 = sub_1CC6B4F7C(a1);
    if (!v16) {
      return 0;
    }
    uint64_t v19 = *(char **)a1;
    uint64_t v18 = *(const char **)(a1 + 8);
    if (*(const char **)a1 == v18 || *v19 != 69) {
      return 0;
    }
    uint64_t v20 = v16;
    *(void *)a1 = v19 + 1;
    if (v19 + 1 == v18) {
      goto LABEL_30;
    }
    int v21 = v19[1];
    if (v21 == 100)
    {
      *(void *)a1 = v19 + 2;
      sub_1CC6B5BE0((char **)a1, 1);
      char v35 = *(char **)a1;
      if (*(void *)a1 == *(void *)(a1 + 8)) {
        return 0;
      }
      if (*v35 != 95) {
        return 0;
      }
      *(void *)a1 = v35 + 1;
      uint64_t v36 = sub_1CC6B7570(a1, a2);
      if (!v36) {
        return 0;
      }
    }
    else
    {
      if (v21 != 115)
      {
LABEL_30:
        uint64_t v22 = sub_1CC6B7570(a1, a2);
        if (!v22) {
          return 0;
        }
        uint64_t v24 = v22;
        *(void *)a1 = llvm::itanium_demangle::parse_discriminator(*(const char **)a1, *(const char **)(a1 + 8), v23);
LABEL_85:
        uint64_t i = sub_1CC6B7FB0(a1 + 808, 32);
        *(unsigned char *)(i + 8) = 24;
        *(_WORD *)(i + 9) = *(_WORD *)(i + 9) & 0xF000 | 0x540;
        *(void *)uint64_t i = &unk_1F261AA18;
        *(void *)(i + 16) = v20;
        *(void *)(i + 24) = v24;
        return i;
      }
      *(void *)a1 = v19 + 2;
      *(void *)a1 = llvm::itanium_demangle::parse_discriminator(v19 + 2, v18, v17);
      uint64_t v36 = sub_1CC6B9178(a1, "string literal");
    }
    uint64_t v24 = v36;
    goto LABEL_85;
  }
  if (v5 == 78)
  {
    *(void *)a1 = v4 + 1;
    int v6 = sub_1CC6B8620(a1);
    if (a2) {
      *(_DWORD *)(a2 + 4) = v6;
    }
    BOOL v7 = *(char **)a1;
    unint64_t v8 = *(char **)(a1 + 8);
    if (*(char **)a1 == v8) {
      goto LABEL_32;
    }
    int v9 = *v7;
    if (v9 == 82)
    {
      *(void *)a1 = ++v7;
      if (a2)
      {
        char v10 = 1;
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v9 != 79)
    {
LABEL_32:
      if (a2)
      {
        char v10 = 0;
        goto LABEL_36;
      }
    }
    else
    {
      *(void *)a1 = ++v7;
      if (a2)
      {
        char v10 = 2;
LABEL_36:
        *(unsigned char *)(a2 + 8) = v10;
      }
    }
LABEL_37:
    for (uint64_t i = 0; ; uint64_t i = v25)
    {
      while (1)
      {
        if (v7 != v8 && *v7 == 69)
        {
          *(void *)a1 = v7 + 1;
          if (i)
          {
            uint64_t v34 = *(void *)(a1 + 304);
            if (*(void *)(a1 + 296) != v34)
            {
              *(void *)(a1 + 304) = v34 - 8;
              return i;
            }
            return 0;
          }
          return i;
        }
        if (a2) {
          *(unsigned char *)(a2 + 1) = 0;
        }
        if (v7 == v8) {
          goto LABEL_60;
        }
        uint64_t v25 = 0;
        unsigned int v26 = *v7;
        if (v26 > 0x52) {
          break;
        }
        if (v26 == 68)
        {
          if ((unint64_t)(v8 - v7) >= 2 && (v7[1] | 0x20) == 0x74)
          {
            if (i) {
              return 0;
            }
            uint64_t v30 = sub_1CC6B8940(a1);
LABEL_62:
            uint64_t i = v30;
            if (!v30) {
              return i;
            }
            goto LABEL_63;
          }
LABEL_60:
          uint64_t v25 = 0;
          goto LABEL_61;
        }
        if (v26 != 73) {
          goto LABEL_61;
        }
        if (!i) {
          return i;
        }
        uint64_t v27 = sub_1CC6B82F4(a1, a2 != 0);
        if (!v27 || *(unsigned char *)(i + 8) == 41) {
          return 0;
        }
        uint64_t v28 = v27;
        if (a2) {
          *(unsigned char *)(a2 + 1) = 1;
        }
        uint64_t v29 = sub_1CC6B7FB0(a1 + 808, 32);
        *(unsigned char *)(v29 + 8) = 41;
        *(_WORD *)(v29 + 9) = *(_WORD *)(v29 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v29 = &unk_1F261AB20;
        *(void *)(v29 + 16) = i;
        *(void *)(v29 + 24) = v28;
        uint64_t i = v29;
LABEL_63:
        v31 = *(uint64_t **)(a1 + 304);
        if (v31 == *(uint64_t **)(a1 + 312))
        {
          sub_1CD5F0ACC(a1 + 296, ((uint64_t)v31 - *(void *)(a1 + 296)) >> 2);
          v31 = *(uint64_t **)(a1 + 304);
        }
        *(void *)(a1 + 304) = v31 + 1;
        uint64_t *v31 = i;
        BOOL v7 = *(char **)a1;
        uint64_t v32 = *(char **)(a1 + 8);
        unint64_t v8 = *(char **)a1;
        if (*(char **)a1 != v32)
        {
          unint64_t v8 = *(char **)(a1 + 8);
          if (*v7 == 77)
          {
            *(void *)a1 = ++v7;
            unint64_t v8 = v32;
          }
        }
      }
      if (v26 != 83)
      {
        if (v26 == 84)
        {
          if (i) {
            return 0;
          }
          uint64_t v30 = sub_1CC6B86AC(a1);
          goto LABEL_62;
        }
LABEL_61:
        uint64_t v30 = sub_1CC6B8C60(a1, a2, i, v25);
        goto LABEL_62;
      }
      if ((unint64_t)(v8 - v7) >= 2 && v7[1] == 116)
      {
        *(void *)a1 = v7 + 2;
        uint64_t v25 = sub_1CC6B7FB0(a1 + 808, 32);
        *(unsigned char *)(v25 + 8) = 7;
        *(_WORD *)(v25 + 9) = *(_WORD *)(v25 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v25 = &unk_1F26197E0;
        *(void *)(v25 + 16) = "std";
        *(void *)(v25 + 24) = "";
      }
      else
      {
        uint64_t v33 = sub_1CC6B8A34(a1);
        if (!v33) {
          return 0;
        }
        uint64_t v25 = v33;
        if (*(unsigned char *)(v33 + 8) == 25) {
          goto LABEL_61;
        }
      }
      if (i) {
        return 0;
      }
      BOOL v7 = *(char **)a1;
      unint64_t v8 = *(char **)(a1 + 8);
    }
  }
LABEL_11:
  char v38 = 0;
  uint64_t i = sub_1CC6B81AC(a1, a2, &v38);
  if (i)
  {
    if (*(void *)(a1 + 8) == *(void *)a1 || **(unsigned char **)a1 != 73)
    {
      if (!v38) {
        return i;
      }
      return 0;
    }
    if (!v38)
    {
      unint64_t v12 = *(uint64_t **)(a1 + 304);
      if (v12 == *(uint64_t **)(a1 + 312))
      {
        sub_1CD5F0ACC(a1 + 296, ((uint64_t)v12 - *(void *)(a1 + 296)) >> 2);
        unint64_t v12 = *(uint64_t **)(a1 + 304);
      }
      *(void *)(a1 + 304) = v12 + 1;
      *unint64_t v12 = i;
    }
    uint64_t v13 = sub_1CC6B82F4(a1, a2 != 0);
    if (!v13) {
      return 0;
    }
    uint64_t v14 = v13;
    if (a2) {
      *(unsigned char *)(a2 + 1) = 1;
    }
    uint64_t v15 = sub_1CC6B7FB0(a1 + 808, 32);
    *(unsigned char *)(v15 + 8) = 41;
    *(_WORD *)(v15 + 9) = *(_WORD *)(v15 + 9) & 0xF000 | 0x540;
    *(void *)uint64_t v15 = &unk_1F261AB20;
    *(void *)(v15 + 16) = i;
    *(void *)(v15 + 24) = v14;
    return v15;
  }
  return i;
}

uint64_t sub_1CC6B7AD8(void *a1)
{
  BOOL v3 = (char *)*a1;
  int v2 = (char *)a1[1];
  if (v2 == (char *)*a1)
  {
LABEL_9:
    return sub_1CC6B5D0C(a1);
  }
  int v4 = *v3;
  switch(v4)
  {
    case 'J':
      BOOL v7 = v3 + 1;
      *a1 = v7;
      uint64_t v8 = (uint64_t)(a1[3] - a1[2]) >> 3;
      while (v7 == v2 || *v7 != 69)
      {
        uint64_t result = sub_1CC6B7AD8(a1);
        if (!result) {
          return result;
        }
        uint64_t v9 = result;
        char v10 = (uint64_t *)a1[3];
        if (v10 == (uint64_t *)a1[4])
        {
          sub_1CD5F0ACC((uint64_t)(a1 + 2), ((uint64_t)v10 - a1[2]) >> 2);
          char v10 = (uint64_t *)a1[3];
        }
        a1[3] = v10 + 1;
        *char v10 = v9;
        BOOL v7 = (char *)*a1;
        int v2 = (char *)a1[1];
      }
      *a1 = v7 + 1;
      uint64_t v11 = a1[3];
      unint64_t v12 = (const void *)(a1[2] + 8 * v8);
      uint64_t v13 = (void *)sub_1CC6B7FB0((uint64_t)(a1 + 101), (int)v11 - (int)v12);
      uint64_t v14 = v13;
      int64_t v15 = v11 - (void)v12;
      if (v15) {
        memmove(v13, v12, v15);
      }
      a1[3] = a1[2] + 8 * v8;
      uint64_t result = sub_1CC6B7FB0((uint64_t)(a1 + 101), 32);
      *(unsigned char *)(result + 8) = 37;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
      *(void *)uint64_t result = &unk_1F261AB78;
      *(void *)(result + 16) = v14;
      *(void *)(result + 24) = v15 >> 3;
      break;
    case 'L':
      if ((unint64_t)&v2[-*a1] >= 2 && v3[1] == 90)
      {
        *a1 = v3 + 2;
        uint64_t result = sub_1CC6B4F7C(a1);
        if (!result) {
          return result;
        }
        goto LABEL_6;
      }
      return sub_1CC6BAFC0((uint64_t)a1);
    case 'X':
      *a1 = v3 + 1;
      uint64_t result = sub_1CC6B91F4((uint64_t)a1);
      if (!result) {
        return result;
      }
LABEL_6:
      int v6 = (char *)*a1;
      if (*a1 == a1[1] || *v6 != 69) {
        return 0;
      }
      *a1 = v6 + 1;
      return result;
    default:
      goto LABEL_9;
  }
  return result;
}

uint64_t sub_1CC6B7CFC(uint64_t a1)
{
  int v1 = *(char **)a1;
  if (*(void *)a1 == *(void *)(a1 + 8)) {
    return 1;
  }
  int v3 = *v1;
  if (v3 != 118)
  {
    if (v3 == 104)
    {
      *(void *)a1 = v1 + 1;
      uint64_t v4 = 1;
      goto LABEL_5;
    }
    return 1;
  }
  *(void *)a1 = v1 + 1;
  uint64_t v4 = 1;
  uint64_t v9 = sub_1CC6B5BE0((char **)a1, 1);
  if (v9 == v10) {
    return v4;
  }
  uint64_t v11 = *(char **)a1;
  if (*(void *)a1 == *(void *)(a1 + 8) || *v11 != 95) {
    return v4;
  }
  *(void *)a1 = v11 + 1;
LABEL_5:
  int v5 = sub_1CC6B5BE0((char **)a1, 1);
  if (v5 != v6)
  {
    BOOL v7 = *(char **)a1;
    if (*(void *)a1 != *(void *)(a1 + 8) && *v7 == 95)
    {
      uint64_t v4 = 0;
      *(void *)a1 = v7 + 1;
    }
  }
  return v4;
}

uint64_t sub_1CC6B7DD0(unsigned __int8 **a1, uint64_t *a2)
{
  int v3 = *a1;
  int v2 = (char *)a1[1];
  if (v2 == (char *)*a1 || (char)*v3 < 48) {
    return 1;
  }
  unsigned int v4 = *v3;
  if (v4 >= 0x3A && v4 - 65 > 0x19) {
    return 1;
  }
  uint64_t v6 = 0;
  do
  {
    if ((char)*v3 < 48) {
      break;
    }
    if (*v3 >= 0x3Au)
    {
      if (*v3 - 65 >= 0x1A) {
        break;
      }
      uint64_t v7 = -55;
    }
    else
    {
      uint64_t v7 = -48;
    }
    uint64_t v6 = *v3++ + 36 * v6 + v7;
    *a1 = v3;
  }
  while (v3 != (unsigned __int8 *)v2);
  uint64_t result = 0;
  *a2 = v6;
  return result;
}

uint64_t sub_1CC6B7E64(void *a1, uint64_t *a2)
{
  int v2 = (unsigned char *)*a1;
  int v3 = (unsigned char *)a1[1];
  if ((unsigned char *)*a1 != v3)
  {
    uint64_t v6 = (uint64_t)(a1 + 101);
    uint64_t v7 = (uint64_t)(a1 + 37);
    while (*v2 == 87)
    {
      *a1 = v2 + 1;
      if (v2 + 1 == v3 || v2[1] != 80)
      {
        char v8 = 0;
      }
      else
      {
        *a1 = v2 + 2;
        char v8 = 1;
      }
      uint64_t v9 = sub_1CC6B8058((uint64_t)a1);
      if (!v9) {
        return 1;
      }
      uint64_t v10 = v9;
      uint64_t v11 = sub_1CC6B7FB0(v6, 40);
      uint64_t v12 = *a2;
      *(unsigned char *)(v11 + 8) = 25;
      *(_WORD *)(v11 + 9) = *(_WORD *)(v11 + 9) & 0xF000 | 0x540;
      *(void *)uint64_t v11 = &unk_1F2619838;
      *(void *)(v11 + 16) = v12;
      *(void *)(v11 + 24) = v10;
      *(unsigned char *)(v11 + 32) = v8;
      *a2 = v11;
      uint64_t v13 = (uint64_t *)a1[38];
      if (v13 == (uint64_t *)a1[39])
      {
        sub_1CD5F0ACC(v7, ((uint64_t)v13 - a1[37]) >> 2);
        uint64_t v13 = (uint64_t *)a1[38];
      }
      a1[38] = v13 + 1;
      *uint64_t v13 = v11;
      int v2 = (unsigned char *)*a1;
      int v3 = (unsigned char *)a1[1];
      if ((unsigned char *)*a1 == v3) {
        return 0;
      }
    }
  }
  return 0;
}

uint64_t sub_1CC6B7FB0(uint64_t a1, int a2)
{
  unint64_t v3 = (a2 + 15) & 0xFFFFFFF0;
  unsigned int v4 = *(void **)(a1 + 4096);
  uint64_t v5 = v4[1];
  if (v5 + v3 >= 0xFF0)
  {
    if (v3 >= 0xFF1)
    {
      uint64_t v6 = malloc_type_malloc(v3 + 16, 0x5C78FD72uLL);
      if (v6)
      {
        uint64_t v7 = *(void **)(a1 + 4096);
        void *v6 = *v7;
        v6[1] = 0;
        *uint64_t v7 = v6;
        return (uint64_t)(v6 + 2);
      }
LABEL_8:
      std::terminate();
    }
    unsigned int v4 = malloc_type_malloc(0x1000uLL, 0x2301439BuLL);
    if (!v4) {
      goto LABEL_8;
    }
    uint64_t v5 = 0;
    *unsigned int v4 = *(void *)(a1 + 4096);
    v4[1] = 0;
    *(void *)(a1 + 4096) = v4;
  }
  v4[1] = v5 + v3;
  return (uint64_t)v4 + v5 + 16;
}

uint64_t sub_1CC6B8058(uint64_t a1)
{
  unint64_t v7 = 0;
  char v2 = sub_1CC6B813C((unsigned __int8 **)a1, (uint64_t *)&v7);
  uint64_t result = 0;
  if ((v2 & 1) == 0)
  {
    unsigned int v4 = *(const char **)a1;
    unint64_t v5 = v7;
    if (v7 - 1 >= *(void *)(a1 + 8) - *(void *)a1)
    {
      return 0;
    }
    else
    {
      uint64_t v6 = (char *)&v4[v7];
      *(void *)a1 = &v4[v7];
      if (v5 >= 0xA && !strncmp("_GLOBAL__N", v4, 0xAuLL))
      {
        unsigned int v4 = "(anonymous namespace)";
        uint64_t v6 = "";
      }
      uint64_t result = sub_1CC6B7FB0(a1 + 808, 32);
      *(unsigned char *)(result + 8) = 7;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
      *(void *)uint64_t result = &unk_1F26197E0;
      *(void *)(result + 16) = v4;
      *(void *)(result + 24) = v6;
    }
  }
  return result;
}

uint64_t sub_1CC6B813C(unsigned __int8 **a1, uint64_t *a2)
{
  *a2 = 0;
  unint64_t v3 = *a1;
  char v2 = a1[1];
  if (v2 == *a1 || *v3 - 58 < 0xFFFFFFF6) {
    return 1;
  }
  uint64_t v5 = 0;
  uint64_t v6 = v3 + 1;
  do
  {
    uint64_t v7 = 5 * v5;
    *a2 = 2 * v7;
    *a1 = v6;
    uint64_t v5 = (char)*(v6 - 1) + 2 * v7 - 48;
    *a2 = v5;
    if (v6 == v2) {
      break;
    }
    int v8 = *v6++;
  }
  while ((v8 - 48) <= 9);
  return 0;
}

uint64_t sub_1CC6B81AC(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v6 = *(unsigned __int8 **)a1;
  uint64_t v7 = *(unsigned __int8 **)(a1 + 8);
  if ((unint64_t)&v7[-*(void *)a1] >= 2 && !strncmp("St", (const char *)v6, 2uLL))
  {
    *(void *)a1 = v6 + 2;
    uint64_t v8 = sub_1CC6B7FB0(a1 + 808, 32);
    *(unsigned char *)(v8 + 8) = 7;
    *(_WORD *)(v8 + 9) = *(_WORD *)(v8 + 9) & 0xF000 | 0x540;
    *(void *)uint64_t v8 = &unk_1F26197E0;
    *(void *)(v8 + 16) = "std";
    *(void *)(v8 + 24) = "";
    uint64_t v6 = *(unsigned __int8 **)a1;
    uint64_t v7 = *(unsigned __int8 **)(a1 + 8);
  }
  else
  {
    uint64_t v8 = 0;
  }
  if (v7 == v6 || *v6 != 83)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t result = sub_1CC6B8A34(a1);
    if (!result) {
      return result;
    }
    uint64_t v10 = result;
    if (*(unsigned char *)(result + 8) != 25)
    {
      uint64_t result = 0;
      if (a3)
      {
        if (!v8)
        {
          *a3 = 1;
          return v10;
        }
      }
      return result;
    }
  }

  return sub_1CC6B8C60((unsigned __int8 **)a1, a2, v8, v10);
}

uint64_t sub_1CC6B82F4(uint64_t a1, int a2)
{
  char v2 = *(unsigned char **)a1;
  if (*(void *)a1 == *(void *)(a1 + 8) || *v2 != 73) {
    return 0;
  }
  *(void *)a1 = v2 + 1;
  if (a2)
  {
    uint64_t v5 = *(void **)(a1 + 664);
    *(void *)(a1 + 672) = v5;
    if (v5 == *(void **)(a1 + 680))
    {
      sub_1CD5F0ACC(a1 + 664, 0);
      uint64_t v5 = *(void **)(a1 + 672);
    }
    *(void *)(a1 + 672) = v5 + 1;
    void *v5 = a1 + 576;
    *(void *)(a1 + 584) = *(void *)(a1 + 576);
  }
  uint64_t v6 = (void **)(a1 + 664);
  uint64_t v7 = &v34;
  uint64_t v8 = (unsigned char *)(a1 + 688);
  uint64_t v9 = a1 + 720;
  uint64_t v28 = (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
  uint64_t v29 = a1 + 808;
  while (1)
  {
    uint64_t v10 = *(unsigned char **)a1;
    if (*(void *)a1 != *(void *)(a1 + 8) && *v10 == 69) {
      break;
    }
    if (a2)
    {
      v31 = v33;
      *((void *)&v32 + 1) = v7;
      memset(v33, 0, sizeof(v33));
      if (*v6 == v8)
      {
        uint64_t v14 = *(unsigned char **)(a1 + 672);
        int64_t v15 = v14 - v8;
        if (v14 != v8) {
          memcpy(v33, (const void *)(a1 + 688), v14 - v8);
        }
        *(void *)&long long v32 = &v33[v15];
        *(void *)(a1 + 672) = v8;
      }
      else
      {
        v31 = *v6;
        long long v32 = *(_OWORD *)(a1 + 672);
        *(void *)(a1 + 664) = v8;
        *(void *)(a1 + 672) = v8;
        *(void *)(a1 + 680) = v9;
      }
      uint64_t v16 = sub_1CC6B7AD8((void *)a1);
      sub_1CD5F0174((char *)(a1 + 664), (uint64_t)&v31);
      if (v16)
      {
        uint64_t v30 = v7;
        uint64_t v17 = v9;
        uint64_t v18 = *(uint64_t **)(a1 + 24);
        if (v18 == *(uint64_t **)(a1 + 32))
        {
          sub_1CD5F0ACC(a1 + 16, ((uint64_t)v18 - *(void *)(a1 + 16)) >> 2);
          uint64_t v18 = *(uint64_t **)(a1 + 24);
        }
        *(void *)(a1 + 24) = v18 + 1;
        *uint64_t v18 = v16;
        uint64_t v19 = v16;
        if (*(unsigned char *)(v16 + 8) == 37)
        {
          uint64_t v22 = *(void *)(v16 + 16);
          uint64_t v27 = *(void *)(v16 + 24);
          uint64_t v19 = sub_1CC6B7FB0(v29, 32);
          sub_1CD5F4F5C(v19, v22, v27);
        }
        uint64_t v20 = *(void **)(*(void *)(a1 + 672) - 8);
        int v21 = (uint64_t *)v20[1];
        if (v21 == (uint64_t *)v20[2])
        {
          sub_1CD5F0ACC(*(void *)(*(void *)(a1 + 672) - 8), ((uint64_t)v21 - *v20) >> 2);
          int v21 = (uint64_t *)v20[1];
        }
        v20[1] = v21 + 1;
        *int v21 = v19;
        uint64_t v9 = v17;
        uint64_t v7 = v30;
      }
      if (v31 != v33) {
        free(v31);
      }
      if (!v16) {
        return 0;
      }
    }
    else
    {
      uint64_t result = sub_1CC6B7AD8((void *)a1);
      if (!result) {
        return result;
      }
      uint64_t v12 = result;
      uint64_t v13 = *(uint64_t **)(a1 + 24);
      if (v13 == *(uint64_t **)(a1 + 32))
      {
        sub_1CD5F0ACC(a1 + 16, ((uint64_t)v13 - *(void *)(a1 + 16)) >> 2);
        uint64_t v13 = *(uint64_t **)(a1 + 24);
      }
      *(void *)(a1 + 24) = v13 + 1;
      *uint64_t v13 = v12;
    }
  }
  *(void *)a1 = v10 + 1;
  int v23 = *(unsigned char **)(a1 + 24);
  uint64_t v24 = (unsigned char *)(*(void *)(a1 + 16) + 8 * v28);
  uint64_t v25 = (void *)sub_1CC6B7FB0(v29, (int)v23 - (int)v24);
  unsigned int v26 = v25;
  if (v23 != v24) {
    memmove(v25, v24, v23 - v24);
  }
  *(void *)(a1 + 24) = *(void *)(a1 + 16) + 8 * v28;
  uint64_t result = sub_1CC6B7FB0(v29, 32);
  *(unsigned char *)(result + 8) = 39;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *(void *)uint64_t result = &unk_1F261AAC8;
  *(void *)(result + 16) = v26;
  *(void *)(result + 24) = (v23 - v24) >> 3;
  return result;
}

uint64_t sub_1CC6B8620(uint64_t a1)
{
  int v1 = *(unsigned char **)a1;
  char v2 = *(unsigned char **)(a1 + 8);
  if (*(unsigned char **)a1 == v2 || *v1 != 114)
  {
    int v3 = 0;
  }
  else
  {
    *(void *)a1 = ++v1;
    int v3 = 4;
  }
  if (v1 == v2)
  {
    int v5 = 0;
  }
  else
  {
    int v4 = *v1;
    if (v4 == 86) {
      *(void *)a1 = ++v1;
    }
    if (v1 == v2 || *v1 != 75)
    {
      int v5 = 0;
    }
    else
    {
      *(void *)a1 = v1 + 1;
      int v5 = 1;
    }
    if (v4 == 86) {
      v3 |= 2u;
    }
  }
  return v3 | v5;
}

uint64_t sub_1CC6B86AC(uint64_t a1)
{
  char v2 = *(unsigned __int8 **)a1;
  int v1 = *(unsigned __int8 **)(a1 + 8);
  if (*(unsigned __int8 **)a1 == v1 || *v2 != 84) {
    return 0;
  }
  int v4 = v2 + 1;
  *(void *)a1 = v2 + 1;
  uint64_t v18 = 0;
  if (v2 + 1 == v1)
  {
    unint64_t v6 = 0;
    uint64_t v17 = 0;
    goto LABEL_14;
  }
  if (*v4 == 76)
  {
    *(void *)a1 = v2 + 2;
    if (sub_1CC6B813C((unsigned __int8 **)a1, &v18)) {
      return 0;
    }
    int v5 = *(unsigned __int8 **)a1;
    int v1 = *(unsigned __int8 **)(a1 + 8);
    if (*(unsigned __int8 **)a1 == v1 || *v5 != 95) {
      return 0;
    }
    unint64_t v6 = v18 + 1;
    int v4 = v5 + 1;
    *(void *)a1 = v4;
  }
  else
  {
    unint64_t v6 = 0;
  }
  uint64_t v17 = 0;
  if (v4 == v1 || *v4 != 95)
  {
LABEL_14:
    if ((sub_1CC6B813C((unsigned __int8 **)a1, &v17) & 1) == 0)
    {
      int v4 = *(unsigned __int8 **)a1;
      if (*(void *)a1 != *(void *)(a1 + 8) && *v4 == 95)
      {
        unint64_t v7 = v17 + 1;
        goto LABEL_18;
      }
    }
    return 0;
  }
  unint64_t v7 = 0;
LABEL_18:
  *(void *)a1 = v4 + 1;
  if (!*(unsigned char *)(a1 + 777) || v6)
  {
    uint64_t v11 = *(void **)(a1 + 672);
    uint64_t v12 = *(void *)(a1 + 664);
    uint64_t v13 = (uint64_t)v11 - v12;
    if (v6 < ((uint64_t)v11 - v12) >> 3
      && (uint64_t v14 = *(void **)(v12 + 8 * v6)) != 0
      && (v16 = v14, uint64_t v15 = *v14, v7 < (v16[1] - v15) >> 3))
    {
      return *(void *)(v15 + 8 * v7);
    }
    else
    {
      uint64_t v8 = 0;
      if (v6 <= v13 >> 3 && *(void *)(a1 + 784) == v6)
      {
        if (v6 == v13 >> 3)
        {
          if (v11 == *(void **)(a1 + 680))
          {
            sub_1CD5F0ACC(a1 + 664, v13 >> 2);
            uint64_t v11 = *(void **)(a1 + 672);
          }
          *(void *)(a1 + 672) = v11 + 1;
          *uint64_t v11 = 0;
        }
        uint64_t v8 = sub_1CC6B7FB0(a1 + 808, 32);
        *(unsigned char *)(v8 + 8) = 7;
        *(_WORD *)(v8 + 9) = *(_WORD *)(v8 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v8 = &unk_1F26197E0;
        *(void *)(v8 + 16) = "auto";
        *(void *)(v8 + 24) = "";
      }
    }
  }
  else
  {
    uint64_t v8 = sub_1CC6B7FB0(a1 + 808, 40);
    *(unsigned char *)(v8 + 8) = 40;
    *(_WORD *)(v8 + 9) = *(_WORD *)(v8 + 9) & 0xF000 | 0xA80;
    *(void *)uint64_t v8 = &unk_1F2619890;
    *(void *)(v8 + 16) = v7;
    *(void *)(v8 + 24) = 0;
    *(unsigned char *)(v8 + 32) = 0;
    uint64_t v9 = *(uint64_t **)(a1 + 728);
    if (v9 == *(uint64_t **)(a1 + 736))
    {
      sub_1CD5F0ACC(a1 + 720, ((uint64_t)v9 - *(void *)(a1 + 720)) >> 2);
      uint64_t v9 = *(uint64_t **)(a1 + 728);
    }
    *(void *)(a1 + 728) = v9 + 1;
    uint64_t *v9 = v8;
  }
  return v8;
}

uint64_t sub_1CC6B8940(uint64_t a1)
{
  int v1 = *(unsigned char **)a1;
  char v2 = *(unsigned char **)(a1 + 8);
  if (*(unsigned char **)a1 == v2) {
    return 0;
  }
  if (*v1 != 68) {
    return 0;
  }
  *(void *)a1 = v1 + 1;
  if (v1 + 1 == v2 || (v1[1] | 0x20) != 0x74) {
    return 0;
  }
  *(void *)a1 = v1 + 2;
  uint64_t result = sub_1CC6B91F4(a1);
  if (!result) {
    return result;
  }
  int v5 = *(unsigned char **)a1;
  if (*(void *)a1 == *(void *)(a1 + 8) || *v5 != 69) {
    return 0;
  }
  uint64_t v6 = result;
  *(void *)a1 = v5 + 1;
  uint64_t result = sub_1CC6B7FB0(a1 + 808, 56);
  *(unsigned char *)(result + 8) = 56;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *(void *)uint64_t result = &unk_1F2619CB0;
  *(void *)(result + 16) = "decltype";
  *(void *)(result + 24) = "";
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 32) = v6;
  return result;
}

uint64_t sub_1CC6B8A34(uint64_t a1)
{
  int v1 = *(unsigned __int8 **)a1;
  char v2 = *(unsigned __int8 **)(a1 + 8);
  if (*(unsigned __int8 **)a1 == v2 || *v1 != 83) {
    return 0;
  }
  *(void *)a1 = v1 + 1;
  if (v2 == v1 + 1) {
    goto LABEL_11;
  }
  unsigned int v4 = v1[1];
  if ((char)v1[1] < 97)
  {
    if (v4 == 95)
    {
      *(void *)a1 = v1 + 2;
      uint64_t v7 = *(void *)(a1 + 296);
      if (v7 != *(void *)(a1 + 304)) {
        return *(void *)v7;
      }
      return 0;
    }
LABEL_11:
    uint64_t v15 = 0;
    uint64_t v5 = 0;
    if (sub_1CC6B7DD0((unsigned __int8 **)a1, &v15)) {
      return v5;
    }
    uint64_t v8 = *(unsigned __int8 **)a1;
    if (*(void *)a1 != *(void *)(a1 + 8) && *v8 == 95)
    {
      unint64_t v9 = v15 + 1;
      *(void *)a1 = v8 + 1;
      uint64_t v10 = *(void *)(a1 + 296);
      if (v9 < (*(void *)(a1 + 304) - v10) >> 3) {
        return *(void *)(v10 + 8 * v9);
      }
    }
    return 0;
  }
  if (v4 > 0x7A) {
    goto LABEL_11;
  }
  uint64_t v5 = 0;
  int v6 = 0;
  switch(v1[1])
  {
    case 'a':
      goto LABEL_24;
    case 'b':
      int v6 = 1;
      goto LABEL_24;
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
      return v5;
    case 'd':
      int v6 = 5;
      goto LABEL_24;
    case 'i':
      int v6 = 3;
      goto LABEL_24;
    default:
      if (v4 == 111)
      {
        int v6 = 4;
      }
      else
      {
        if (v4 != 115) {
          return v5;
        }
        int v6 = 2;
      }
LABEL_24:
      *(void *)a1 = v1 + 2;
      uint64_t v12 = sub_1CC6B7FB0(a1 + 808, 16);
      *(unsigned char *)(v12 + 8) = 44;
      *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
      *(void *)uint64_t v12 = &unk_1F261A7B0;
      *(_DWORD *)(v12 + 12) = v6;
      uint64_t v13 = sub_1CC6BCC94(a1, v12);
      if (v13 == v12)
      {
        uint64_t v5 = v12;
      }
      else
      {
        uint64_t v5 = v13;
        uint64_t v14 = *(uint64_t **)(a1 + 304);
        if (v14 == *(uint64_t **)(a1 + 312))
        {
          sub_1CD5F0ACC(a1 + 296, ((uint64_t)v14 - *(void *)(a1 + 296)) >> 2);
          uint64_t v14 = *(uint64_t **)(a1 + 304);
        }
        *(void *)(a1 + 304) = v14 + 1;
        *uint64_t v14 = v5;
      }
      break;
  }
  return v5;
}

uint64_t sub_1CC6B8C60(unsigned __int8 **a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = a4;
  if (sub_1CC6B7E64(a1, &v37)) {
    return 0;
  }
  unint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if (*a1 != v10 && *v9 == 76) {
    *a1 = ++v9;
  }
  if (v10 != v9 && (char)*v9 >= 49)
  {
    unsigned int v11 = *v9;
    if (v11 <= 0x39)
    {
      uint64_t v12 = sub_1CC6B8058((uint64_t)a1);
LABEL_28:
      uint64_t v17 = v12;
      goto LABEL_29;
    }
    if (v11 == 85)
    {
      uint64_t v12 = sub_1CC6BBC58((uint64_t)a1, (uint64_t)a2);
      goto LABEL_28;
    }
  }
  if ((unint64_t)(v10 - v9) >= 2 && !strncmp("DC", (const char *)v9, 2uLL))
  {
    *a1 = v9 + 2;
    uint64_t v22 = a1[2];
    int v23 = a1[3];
    uint64_t v24 = sub_1CC6B8058((uint64_t)a1);
    if (!v24) {
      return 0;
    }
    uint64_t v25 = v24;
    uint64_t v26 = (v23 - v22) >> 3;
    while (1)
    {
      uint64_t v27 = (uint64_t *)a1[3];
      if (v27 == (uint64_t *)a1[4])
      {
        sub_1CD5F0ACC((uint64_t)(a1 + 2), ((char *)v27 - (char *)a1[2]) >> 2);
        uint64_t v27 = (uint64_t *)a1[3];
      }
      a1[3] = (unsigned __int8 *)(v27 + 1);
      *uint64_t v27 = v25;
      uint64_t v28 = *a1;
      if (*a1 != a1[1] && *v28 == 69) {
        break;
      }
      uint64_t v25 = sub_1CC6B8058((uint64_t)a1);
      uint64_t v7 = 0;
      if (!v25) {
        return v7;
      }
    }
    *a1 = v28 + 1;
    uint64_t v29 = a1[3];
    uint64_t v30 = &a1[2][8 * v26];
    v31 = (void *)sub_1CC6B7FB0((uint64_t)(a1 + 101), (int)v29 - (int)v30);
    long long v32 = v31;
    int64_t v33 = v29 - v30;
    if (v33) {
      memmove(v31, v30, v33);
    }
    a1[3] = &a1[2][8 * v26];
    uint64_t v17 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 32);
    *(unsigned char *)(v17 + 8) = 49;
    *(_WORD *)(v17 + 9) = *(_WORD *)(v17 + 9) & 0xF000 | 0x540;
    *(void *)uint64_t v17 = &unk_1F261A860;
    *(void *)(v17 + 16) = v32;
    *(void *)(v17 + 24) = v33 >> 3;
  }
  else
  {
    if (v10 == v9 || *v9 - 67 > 1)
    {
      uint64_t v12 = sub_1CC6BCA2C((uint64_t)a1, a2);
      goto LABEL_28;
    }
    uint64_t v7 = 0;
    if (!a3 || v37) {
      return v7;
    }
    if (*(unsigned char *)(a3 + 8) == 44)
    {
      int v13 = *(_DWORD *)(a3 + 12);
      if ((v13 - 2) <= 3)
      {
        a3 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 16);
        *(unsigned char *)(a3 + 8) = 43;
        *(_WORD *)(a3 + 9) = *(_WORD *)(a3 + 9) & 0xF000 | 0x540;
        *(void *)a3 = &unk_1F261A8B8;
        *(_DWORD *)(a3 + 12) = v13;
        unint64_t v9 = *a1;
        uint64_t v10 = a1[1];
      }
    }
    if (v9 == v10) {
      return 0;
    }
    int v14 = *v9;
    if (v14 == 67)
    {
      uint64_t v15 = v9 + 1;
      *a1 = v9 + 1;
      if (v9 + 1 == v10)
      {
        int v16 = 0;
        uint64_t v15 = v10;
      }
      else if (*v15 == 73)
      {
        uint64_t v15 = v9 + 2;
        *a1 = v9 + 2;
        int v16 = 1;
      }
      else
      {
        int v16 = 0;
      }
      if (v10 == v15) {
        return 0;
      }
      int v36 = *v15;
      if ((v36 - 49) > 4) {
        return 0;
      }
      *a1 = v15 + 1;
      if (a2) {
        *a2 = 1;
      }
      if (v16 && !sub_1CC6B7570((uint64_t)a1, (uint64_t)a2)) {
        return 0;
      }
      uint64_t v17 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 32);
      *(unsigned char *)(v17 + 8) = 45;
      *(_WORD *)(v17 + 9) = *(_WORD *)(v17 + 9) & 0xF000 | 0x540;
      *(void *)uint64_t v17 = &unk_1F261A910;
      *(void *)(v17 + 16) = a3;
      *(unsigned char *)(v17 + 24) = 0;
      *(_DWORD *)(v17 + 28) = v36 - 48;
    }
    else
    {
      uint64_t v7 = 0;
      if ((unint64_t)(v10 - v9) < 2) {
        return v7;
      }
      if (v14 != 68) {
        return v7;
      }
      uint64_t v7 = 0;
      unsigned int v34 = v9[1];
      if (v34 > 0x35 || ((1 << v34) & 0x37000000000000) == 0) {
        return v7;
      }
      unsigned int v35 = v34 - 48;
      *a1 = v9 + 2;
      if (a2) {
        *a2 = 1;
      }
      uint64_t v17 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 32);
      *(unsigned char *)(v17 + 8) = 45;
      *(_WORD *)(v17 + 9) = *(_WORD *)(v17 + 9) & 0xF000 | 0x540;
      *(void *)uint64_t v17 = &unk_1F261A910;
      *(void *)(v17 + 16) = a3;
      *(unsigned char *)(v17 + 24) = 1;
      *(_DWORD *)(v17 + 28) = v35;
    }
  }
LABEL_29:
  if (!v17 || (uint64_t v18 = v37) == 0)
  {
    if (v17) {
      goto LABEL_33;
    }
    return 0;
  }
  uint64_t v19 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 32);
  *(unsigned char *)(v19 + 8) = 26;
  *(_WORD *)(v19 + 9) = *(_WORD *)(v19 + 9) & 0xF000 | 0x540;
  *(void *)uint64_t v19 = &unk_1F261A968;
  *(void *)(v19 + 16) = v18;
  *(void *)(v19 + 24) = v17;
  uint64_t v17 = v19;
LABEL_33:
  uint64_t v20 = sub_1CC6BCC94((uint64_t)a1, v17);
  uint64_t v7 = v20;
  if (a3 && v20)
  {
    uint64_t v21 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 32);
    *(unsigned char *)(v21 + 8) = 23;
    *(_WORD *)(v21 + 9) = *(_WORD *)(v21 + 9) & 0xF000 | 0x540;
    *(void *)uint64_t v21 = &unk_1F261A9C0;
    *(void *)(v21 + 16) = a3;
    *(void *)(v21 + 24) = v7;
    return v21;
  }
  return v7;
}

uint64_t sub_1CC6B9178(uint64_t a1, const char *a2)
{
  uint64_t v3 = sub_1CC6B7FB0(a1 + 808, 32);
  size_t v4 = strlen(a2);
  *(unsigned char *)(v3 + 8) = 7;
  *(_WORD *)(v3 + 9) = *(_WORD *)(v3 + 9) & 0xF000 | 0x540;
  *(void *)uint64_t v3 = &unk_1F26197E0;
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = &a2[v4];
  return v3;
}

uint64_t sub_1CC6B91F4(uint64_t a1)
{
  char v2 = *(unsigned __int8 **)a1;
  if (*(void *)(a1 + 8) - *(void *)a1 >= 2uLL && !strncmp("gs", (const char *)v2, 2uLL))
  {
    *(void *)a1 = v2 + 2;
    int v3 = 1;
  }
  else
  {
    int v3 = 0;
  }
  size_t v4 = sub_1CC6BAE80((unsigned __int8 **)a1);
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = (const char *)*((void *)v4 + 1);
    size_t v7 = strlen(v6);
    uint64_t v8 = v6;
    if (v5[2] <= 0xAu)
    {
      uint64_t v9 = 8;
      if (v7 < 8) {
        uint64_t v9 = v7;
      }
      uint64_t v8 = &v6[v9];
      if (v7 >= 9 && *v8 == 32) {
        ++v8;
      }
    }
    uint64_t v10 = (uint64_t)&v6[v7];
    uint64_t result = 0;
    switch(v5[2])
    {
      case 1:
        uint64_t v12 = *(unsigned __int8 **)a1;
        if (*(void *)a1 != *(void *)(a1 + 8) && *v12 == 95)
        {
          *(void *)a1 = v12 + 1;
LABEL_15:
          int v13 = v5[3] >> 1;
          return sub_1CC6BAF28(a1, (uint64_t)v8, v10, v13);
        }
        uint64_t result = sub_1CC6B91F4(a1);
        if (!result) {
          return result;
        }
        uint64_t v55 = result;
        unsigned int v56 = v5[3];
        uint64_t result = sub_1CC6B7FB0(a1 + 808, 40);
        *(unsigned char *)(result + 8) = 52;
        *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | (v56 >> 1) | 0x540;
        *(void *)uint64_t result = &unk_1F2619998;
        *(void *)(result + 16) = v55;
        *(void *)(result + 24) = v8;
        goto LABEL_80;
      case 2:
        unsigned int v18 = v5[3];
        uint64_t result = sub_1CC6B91F4(a1);
        if (!result) {
          return result;
        }
        uint64_t v19 = result;
        uint64_t result = sub_1CC6B91F4(a1);
        if (!result) {
          return result;
        }
        uint64_t v20 = result;
        uint64_t result = sub_1CC6B7FB0(a1 + 808, 48);
        *(unsigned char *)(result + 8) = 50;
        *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | (v18 >> 1) | 0x540;
        uint64_t v21 = &unk_1F26198E8;
        goto LABEL_34;
      case 3:
        uint64_t result = sub_1CC6B91F4(a1);
        if (result)
        {
          uint64_t v22 = result;
          uint64_t result = sub_1CC6B91F4(a1);
          if (result)
          {
            uint64_t v23 = result;
            unsigned int v24 = v5[3];
            uint64_t result = sub_1CC6B7FB0(a1 + 808, 32);
            *(unsigned char *)(result + 8) = 51;
            *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | (v24 >> 1) | 0x540;
            *(void *)uint64_t result = &unk_1F26199F0;
            *(void *)(result + 16) = v22;
            *(void *)(result + 24) = v23;
          }
        }
        return result;
      case 4:
        uint64_t result = sub_1CC6B91F4(a1);
        if (result)
        {
          uint64_t v25 = result;
          uint64_t result = sub_1CC6B91F4(a1);
          if (result)
          {
            uint64_t v26 = result;
            unsigned int v27 = v5[3];
            uint64_t result = sub_1CC6B7FB0(a1 + 808, 48);
            *(unsigned char *)(result + 8) = 54;
            *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | (v27 >> 1) | 0x540;
            *(void *)uint64_t result = &unk_1F2619A48;
            *(void *)(result + 16) = v25;
            *(void *)(result + 24) = v8;
            *(void *)(result + 32) = v10;
            *(void *)(result + 40) = v26;
          }
        }
        return result;
      case 5:
        uint64_t v28 = (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
        while (2)
        {
          uint64_t v29 = *(unsigned __int8 **)a1;
          if (*(void *)a1 != *(void *)(a1 + 8) && *v29 == 95)
          {
            *(void *)a1 = v29 + 1;
            uint64_t v71 = *(unsigned char **)(a1 + 24);
            uint64_t v72 = (unsigned char *)(*(void *)(a1 + 16) + 8 * v28);
            uint64_t v73 = a1 + 808;
            BOOL v74 = (void *)sub_1CC6B7FB0(a1 + 808, (int)v71 - (int)v72);
            uint64_t v75 = v74;
            uint64_t v76 = v71 - v72;
            if (v71 != v72) {
              memmove(v74, v72, v71 - v72);
            }
            *(void *)(a1 + 24) = *(void *)(a1 + 16) + 8 * v28;
            uint64_t result = sub_1CC6B5D0C(a1);
            if (result)
            {
              uint64_t v77 = result;
              uint64_t v79 = *(unsigned __int8 **)a1;
              unsigned int v78 = *(unsigned __int8 **)(a1 + 8);
              v208 = v75;
              if ((unint64_t)&v78[-*(void *)a1] >= 2 && !strncmp("pi", (const char *)v79, 2uLL))
              {
                v79 += 2;
                *(void *)a1 = v79;
                int v80 = 1;
              }
              else
              {
                int v80 = 0;
              }
              uint64_t v81 = v76 >> 3;
              uint64_t v210 = (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
              while (1)
              {
                if (v79 != v78 && *v79 == 69)
                {
                  *(void *)a1 = v79 + 1;
                  v117 = *(unsigned char **)(a1 + 24);
                  v118 = (unsigned char *)(*(void *)(a1 + 16) + 8 * v210);
                  v119 = (void *)sub_1CC6B7FB0(a1 + 808, (int)v117 - (int)v118);
                  v120 = v119;
                  if (v117 != v118) {
                    memmove(v119, v118, v117 - v118);
                  }
                  *(void *)(a1 + 24) = *(void *)(a1 + 16) + 8 * v210;
                  unsigned int v121 = v5[3];
                  uint64_t result = sub_1CC6B7FB0(v73, 64);
                  *(unsigned char *)(result + 8) = 60;
                  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | (v121 >> 1) | 0x540;
                  *(void *)uint64_t result = &unk_1F2619AA0;
                  *(void *)(result + 16) = v208;
                  *(void *)(result + 24) = v81;
                  *(void *)(result + 32) = v77;
                  *(void *)(result + 40) = v120;
                  *(void *)(result + 48) = (v117 - v118) >> 3;
                  *(unsigned char *)(result + 56) = v3;
                  *(unsigned char *)(result + 57) = v121 & 1;
                  return result;
                }
                if (!v80) {
                  return 0;
                }
                uint64_t result = sub_1CC6B91F4(a1);
                if (!result) {
                  break;
                }
                uint64_t v82 = result;
                uint64_t v83 = *(uint64_t **)(a1 + 24);
                if (v83 == *(uint64_t **)(a1 + 32))
                {
                  sub_1CD5F0ACC(a1 + 16, ((uint64_t)v83 - *(void *)(a1 + 16)) >> 2);
                  uint64_t v83 = *(uint64_t **)(a1 + 24);
                }
                *(void *)(a1 + 24) = v83 + 1;
                *uint64_t v83 = v82;
                uint64_t v79 = *(unsigned __int8 **)a1;
                unsigned int v78 = *(unsigned __int8 **)(a1 + 8);
              }
            }
          }
          else
          {
            uint64_t result = sub_1CC6B91F4(a1);
            if (result)
            {
              uint64_t v30 = result;
              v31 = *(uint64_t **)(a1 + 24);
              if (v31 == *(uint64_t **)(a1 + 32))
              {
                sub_1CD5F0ACC(a1 + 16, ((uint64_t)v31 - *(void *)(a1 + 16)) >> 2);
                v31 = *(uint64_t **)(a1 + 24);
              }
              *(void *)(a1 + 24) = v31 + 1;
              uint64_t *v31 = v30;
              continue;
            }
          }
          break;
        }
        return result;
      case 6:
        uint64_t result = sub_1CC6B91F4(a1);
        if (result)
        {
          uint64_t v32 = result;
          unsigned int v33 = v5[3];
          uint64_t result = sub_1CC6B7FB0(a1 + 808, 32);
          *(unsigned char *)(result + 8) = 61;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | (v33 >> 1) | 0x540;
          *(void *)uint64_t result = &unk_1F2619AF8;
          *(void *)(result + 16) = v32;
          *(unsigned char *)(result + 24) = v3;
          *(unsigned char *)(result + 25) = v33 & 1;
        }
        return result;
      case 7:
        uint64_t result = sub_1CC6B91F4(a1);
        if (!result) {
          return result;
        }
        uint64_t v34 = result;
        uint64_t v35 = (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
        while (2)
        {
          int v36 = *(unsigned __int8 **)a1;
          if (*(void *)a1 != *(void *)(a1 + 8) && *v36 == 69)
          {
            *(void *)a1 = v36 + 1;
            uint64_t v84 = *(void *)(a1 + 24);
            uint64_t v85 = (const void *)(*(void *)(a1 + 16) + 8 * v35);
            uint64_t v86 = a1 + 808;
            uint64_t v87 = (void *)sub_1CC6B7FB0(a1 + 808, (int)v84 - (int)v85);
            uint64_t v88 = v87;
            int64_t v89 = v84 - (void)v85;
            if (v89) {
              memmove(v87, v85, v89);
            }
            *(void *)(a1 + 24) = *(void *)(a1 + 16) + 8 * v35;
            unsigned int v90 = v5[3];
            uint64_t result = sub_1CC6B7FB0(v86, 40);
            *(unsigned char *)(result + 8) = 59;
            *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | (v90 >> 1) | 0x540;
            *(void *)uint64_t result = &unk_1F2619B50;
            *(void *)(result + 16) = v34;
            *(void *)(result + 24) = v88;
            *(void *)(result + 32) = v89 >> 3;
          }
          else
          {
            uint64_t result = sub_1CC6B91F4(a1);
            if (result)
            {
              uint64_t v37 = result;
              char v38 = *(uint64_t **)(a1 + 24);
              if (v38 == *(uint64_t **)(a1 + 32))
              {
                sub_1CD5F0ACC(a1 + 16, ((uint64_t)v38 - *(void *)(a1 + 16)) >> 2);
                char v38 = *(uint64_t **)(a1 + 24);
              }
              *(void *)(a1 + 24) = v38 + 1;
              *char v38 = v37;
              continue;
            }
          }
          break;
        }
        return result;
      case 8:
        char v39 = *(unsigned char *)(a1 + 776);
        *(unsigned char *)(a1 + 776) = 0;
        uint64_t result = sub_1CC6B5D0C(a1);
        *(unsigned char *)(a1 + 776) = v39;
        if (!result) {
          return result;
        }
        uint64_t v40 = result;
        uint64_t v41 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
        uint64_t v42 = *(unsigned __int8 **)a1;
        if (*(void *)a1 == *(void *)(a1 + 8) || *v42 != 95)
        {
          int v43 = 0;
        }
        else
        {
          *(void *)a1 = v42 + 1;
          int v43 = 1;
        }
        uint64_t v67 = v41 >> 3;
        break;
      case 9:
        uint64_t result = sub_1CC6B91F4(a1);
        if (!result) {
          return result;
        }
        uint64_t v44 = result;
        uint64_t result = sub_1CC6B91F4(a1);
        if (!result) {
          return result;
        }
        uint64_t v45 = result;
        uint64_t result = sub_1CC6B91F4(a1);
        if (!result) {
          return result;
        }
        uint64_t v46 = result;
        unsigned int v47 = v5[3];
        uint64_t result = sub_1CC6B7FB0(a1 + 808, 40);
        *(unsigned char *)(result + 8) = 53;
        *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | (v47 >> 1) | 0x540;
        *(void *)uint64_t result = &unk_1F2619C00;
        *(void *)(result + 16) = v44;
        *(void *)(result + 24) = v45;
        goto LABEL_84;
      case 10:
        return result;
      case 11:
        uint64_t result = sub_1CC6B5D0C(a1);
        if (result)
        {
          uint64_t v48 = result;
          uint64_t result = sub_1CC6B91F4(a1);
          if (result)
          {
            uint64_t v49 = result;
            unsigned int v50 = v5[3];
            uint64_t result = sub_1CC6B7FB0(a1 + 808, 48);
            *(unsigned char *)(result + 8) = 57;
            *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | (v50 >> 1) | 0x540;
            *(void *)uint64_t result = &unk_1F2619C58;
            *(void *)(result + 16) = v8;
            *(void *)(result + 24) = v10;
            *(void *)(result + 32) = v48;
            *(void *)(result + 40) = v49;
          }
        }
        return result;
      case 12:
        if (v5[3]) {
          uint64_t v51 = sub_1CC6B5D0C(a1);
        }
        else {
          uint64_t v51 = sub_1CC6B91F4(a1);
        }
        uint64_t v46 = v51;
        if (!v51) {
          return 0;
        }
        unsigned int v57 = v5[3];
        uint64_t result = sub_1CC6B7FB0(a1 + 808, 56);
        *(unsigned char *)(result + 8) = 56;
        *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | (v57 >> 1) | 0x540;
        *(void *)uint64_t result = &unk_1F2619CB0;
        *(void *)(result + 16) = v8;
        *(void *)(result + 24) = v10;
        *(void *)(result + 40) = 0;
        *(void *)(result + 48) = 0;
        goto LABEL_84;
      default:
        goto LABEL_15;
    }
    while (1)
    {
      uint64_t v68 = *(unsigned __int8 **)a1;
      if (*(void *)a1 != *(void *)(a1 + 8) && *v68 == 69) {
        break;
      }
      uint64_t result = sub_1CC6B91F4(a1);
      if (!result) {
        return result;
      }
      uint64_t v69 = result;
      uint64_t v70 = *(uint64_t **)(a1 + 24);
      if (v70 == *(uint64_t **)(a1 + 32))
      {
        sub_1CD5F0ACC(a1 + 16, ((uint64_t)v70 - *(void *)(a1 + 16)) >> 2);
        uint64_t v70 = *(uint64_t **)(a1 + 24);
      }
      *(void *)(a1 + 24) = v70 + 1;
      *uint64_t v70 = v69;
      if ((v43 & 1) == 0) {
        goto LABEL_141;
      }
    }
    *(void *)a1 = v68 + 1;
LABEL_141:
    uint64_t v95 = *(void *)(a1 + 24);
    uint64_t v96 = (const void *)(*(void *)(a1 + 16) + 8 * v67);
    uint64_t v97 = a1 + 808;
    unsigned __int8 v98 = (void *)sub_1CC6B7FB0(a1 + 808, (int)v95 - (int)v96);
    unint64_t v99 = v98;
    int64_t v100 = v95 - (void)v96;
    if (v100) {
      memmove(v98, v96, v100);
    }
    *(void *)(a1 + 24) = *(void *)(a1 + 16) + 8 * v67;
    if (((v100 != 8) & ~v43) == 0)
    {
      uint64_t v101 = v100 >> 3;
      unsigned int v102 = v5[3];
      uint64_t result = sub_1CC6B7FB0(v97, 40);
      *(unsigned char *)(result + 8) = 64;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | (v102 >> 1) | 0x540;
      *(void *)uint64_t result = &unk_1F2619BA8;
      *(void *)(result + 16) = v40;
      *(void *)(result + 24) = v99;
LABEL_145:
      *(void *)(result + 32) = v101;
      return result;
    }
    return 0;
  }
  int v14 = *(unsigned __int8 **)a1;
  uint64_t v15 = *(unsigned __int8 **)(a1 + 8);
  unint64_t v16 = (unint64_t)&v15[-*(void *)a1];
  if (v16 < 2) {
    return 0;
  }
  int v17 = *v14;
  if (v17 == 76)
  {
    return sub_1CC6BAFC0(a1);
  }
  if (v15 != v14 && v17 == 84)
  {
    return sub_1CC6B86AC(a1);
  }
  if (v15 == v14 || v17 != 102)
  {
    if (!strncmp("il", *(const char **)a1, 2uLL))
    {
      uint64_t v91 = v14 + 2;
      *(void *)a1 = v14 + 2;
      uint64_t v92 = (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
      while (v91 == v15 || *v91 != 69)
      {
        uint64_t result = sub_1CC6BB994((void *)a1);
        if (!result) {
          return result;
        }
        uint64_t v93 = result;
        uint64_t v94 = *(uint64_t **)(a1 + 24);
        if (v94 == *(uint64_t **)(a1 + 32))
        {
          sub_1CD5F0ACC(a1 + 16, ((uint64_t)v94 - *(void *)(a1 + 16)) >> 2);
          uint64_t v94 = *(uint64_t **)(a1 + 24);
        }
        *(void *)(a1 + 24) = v94 + 1;
        *uint64_t v94 = v93;
        uint64_t v91 = *(unsigned __int8 **)a1;
        uint64_t v15 = *(unsigned __int8 **)(a1 + 8);
      }
      *(void *)a1 = v91 + 1;
      uint64_t v112 = *(void *)(a1 + 24);
      v113 = (const void *)(*(void *)(a1 + 16) + 8 * v92);
      v114 = (void *)sub_1CC6B7FB0(a1 + 808, (int)v112 - (int)v113);
      v115 = v114;
      int64_t v116 = v112 - (void)v113;
      if (v116) {
        memmove(v114, v113, v116);
      }
      uint64_t v10 = v116 >> 3;
      *(void *)(a1 + 24) = *(void *)(a1 + 16) + 8 * v92;
      uint64_t result = sub_1CC6B7FB0(a1 + 808, 40);
      *(unsigned char *)(result + 8) = 66;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
      *(void *)uint64_t result = &unk_1F261A3E8;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = v115;
LABEL_80:
      *(void *)(result + 32) = v10;
      return result;
    }
    if (!strncmp("mc", (const char *)v14, 2uLL))
    {
      *(void *)a1 = v14 + 2;
      uint64_t result = sub_1CC6B5D0C(a1);
      if (result)
      {
        uint64_t v19 = result;
        uint64_t result = sub_1CC6B91F4(a1);
        if (result)
        {
          uint64_t v8 = (const char *)result;
          v103 = sub_1CC6B5BE0((char **)a1, 1);
          v105 = *(unsigned __int8 **)a1;
          if (*(void *)a1 == *(void *)(a1 + 8) || *v105 != 69) {
            return 0;
          }
          uint64_t v10 = (uint64_t)v103;
          uint64_t v20 = v104;
          *(void *)a1 = v105 + 1;
          uint64_t result = sub_1CC6B7FB0(a1 + 808, 48);
          *(unsigned char *)(result + 8) = 65;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x542;
          uint64_t v21 = &unk_1F261A440;
LABEL_34:
          *(void *)uint64_t result = v21;
          *(void *)(result + 16) = v19;
          *(void *)(result + 24) = v8;
          *(void *)(result + 32) = v10;
          *(void *)(result + 40) = v20;
        }
      }
      return result;
    }
    if (!strncmp("nx", (const char *)v14, 2uLL))
    {
      *(void *)a1 = v14 + 2;
      uint64_t result = sub_1CC6B91F4(a1);
      if (!result) {
        return result;
      }
      uint64_t v109 = result;
      uint64_t result = sub_1CC6B7FB0(a1 + 808, 56);
      *(unsigned char *)(result + 8) = 56;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x542;
      *(void *)uint64_t result = &unk_1F2619CB0;
      v110 = "noexcept ";
      v111 = "";
    }
    else
    {
      if (!strncmp("so", (const char *)v14, 2uLL))
      {
        *(void *)a1 = v14 + 2;
        uint64_t result = sub_1CC6B5D0C(a1);
        if (result)
        {
          uint64_t v122 = result;
          uint64_t result = sub_1CC6B91F4(a1);
          if (result)
          {
            uint64_t v123 = result;
            v124 = sub_1CC6B5BE0((char **)a1, 1);
            v126 = *(unsigned __int8 **)a1;
            v127 = *(unsigned __int8 **)(a1 + 8);
            if (*(unsigned __int8 **)a1 == v127) {
              return 0;
            }
            v128 = v124;
            uint64_t v129 = *(void *)(a1 + 16);
            uint64_t v130 = *(void *)(a1 + 24);
            int v131 = *v126;
            if (v131 == 95)
            {
              uint64_t v206 = *(void *)(a1 + 24);
              uint64_t v207 = *(void *)(a1 + 16);
              v209 = v124;
              uint64_t v211 = v125;
              while (1)
              {
                *(void *)a1 = v126 + 1;
                v132 = sub_1CC6B5BE0((char **)a1, 0);
                uint64_t v134 = v133;
                uint64_t v135 = sub_1CC6B7FB0(a1 + 808, 32);
                *(unsigned char *)(v135 + 8) = 7;
                *(_WORD *)(v135 + 9) = *(_WORD *)(v135 + 9) & 0xF000 | 0x540;
                *(void *)uint64_t v135 = &unk_1F26197E0;
                *(void *)(v135 + 16) = v132;
                *(void *)(v135 + 24) = v134;
                v136 = *(uint64_t **)(a1 + 24);
                if (v136 == *(uint64_t **)(a1 + 32))
                {
                  sub_1CD5F0ACC(a1 + 16, ((uint64_t)v136 - *(void *)(a1 + 16)) >> 2);
                  v136 = *(uint64_t **)(a1 + 24);
                }
                *(void *)(a1 + 24) = v136 + 1;
                uint64_t *v136 = v135;
                v126 = *(unsigned __int8 **)a1;
                v127 = *(unsigned __int8 **)(a1 + 8);
                if (*(unsigned __int8 **)a1 == v127) {
                  return 0;
                }
                int v131 = *v126;
                if (v131 != 95)
                {
                  v128 = v209;
                  uint64_t v125 = v211;
                  uint64_t v130 = v206;
                  uint64_t v129 = v207;
                  break;
                }
              }
            }
            if (v131 == 112) {
              *(void *)a1 = ++v126;
            }
            BOOL v165 = v131 == 112;
            if (v126 == v127 || *v126 != 69) {
              return 0;
            }
            uint64_t v212 = v125;
            uint64_t v166 = (v130 - v129) >> 3;
            *(void *)a1 = v126 + 1;
            v167 = *(unsigned char **)(a1 + 24);
            v168 = (unsigned char *)(*(void *)(a1 + 16) + 8 * v166);
            v169 = (void *)sub_1CC6B7FB0(a1 + 808, (int)v167 - (int)v168);
            v170 = v169;
            uint64_t v171 = v167 - v168;
            if (v167 != v168)
            {
              memmove(v169, v168, v167 - v168);
              uint64_t v171 = v167 - v168;
            }
            uint64_t v172 = v171 >> 3;
            *(void *)(a1 + 24) = *(void *)(a1 + 16) + 8 * v166;
            uint64_t result = sub_1CC6B7FB0(a1 + 808, 72);
            *(unsigned char *)(result + 8) = 55;
            *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
            *(void *)uint64_t result = &unk_1F261A498;
            *(void *)(result + 16) = v122;
            *(void *)(result + 24) = v123;
            *(void *)(result + 32) = v128;
            *(void *)(result + 40) = v212;
            *(void *)(result + 48) = v170;
            *(void *)(result + 56) = v172;
            *(unsigned char *)(result + 64) = v165;
          }
        }
        return result;
      }
      if (!strncmp("sp", (const char *)v14, 2uLL))
      {
        *(void *)a1 = v14 + 2;
        uint64_t result = sub_1CC6B91F4(a1);
        if (!result) {
          return result;
        }
        uint64_t v139 = result;
        uint64_t result = sub_1CC6B7FB0(a1 + 808, 24);
        *(unsigned char *)(result + 8) = 38;
        *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
        v140 = &unk_1F261A2E0;
        goto LABEL_195;
      }
      if (strncmp("sZ", (const char *)v14, 2uLL))
      {
        if (!strncmp("sP", (const char *)v14, 2uLL))
        {
          v150 = v14 + 2;
          *(void *)a1 = v14 + 2;
          uint64_t v151 = (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
          while (v150 == v15 || *v150 != 69)
          {
            uint64_t result = sub_1CC6B7AD8(a1);
            if (!result) {
              return result;
            }
            uint64_t v152 = result;
            v153 = *(uint64_t **)(a1 + 24);
            if (v153 == *(uint64_t **)(a1 + 32))
            {
              sub_1CD5F0ACC(a1 + 16, ((uint64_t)v153 - *(void *)(a1 + 16)) >> 2);
              v153 = *(uint64_t **)(a1 + 24);
            }
            *(void *)(a1 + 24) = v153 + 1;
            uint64_t *v153 = v152;
            v150 = *(unsigned __int8 **)a1;
            uint64_t v15 = *(unsigned __int8 **)(a1 + 8);
          }
          *(void *)a1 = v150 + 1;
          uint64_t v159 = *(void *)(a1 + 24);
          v160 = (const void *)(*(void *)(a1 + 16) + 8 * v151);
          uint64_t v161 = a1 + 808;
          v162 = (void *)sub_1CC6B7FB0(a1 + 808, (int)v159 - (int)v160);
          v163 = v162;
          int64_t v164 = v159 - (void)v160;
          if (v164) {
            memmove(v162, v160, v164);
          }
          *(void *)(a1 + 24) = *(void *)(a1 + 16) + 8 * v151;
          uint64_t v101 = sub_1CC6B7FB0(a1 + 808, 32);
          *(unsigned char *)(v101 + 8) = 0;
          *(_WORD *)(v101 + 9) = *(_WORD *)(v101 + 9) & 0xF000 | 0x540;
          *(void *)uint64_t v101 = &unk_1F261A548;
          *(void *)(v101 + 16) = v163;
          *(void *)(v101 + 24) = v164 >> 3;
          uint64_t result = sub_1CC6B7FB0(v161, 56);
          *(unsigned char *)(result + 8) = 56;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          *(void *)uint64_t result = &unk_1F2619CB0;
          *(void *)(result + 16) = "sizeof... ";
          *(void *)(result + 24) = "";
          *(void *)(result + 40) = 0;
          *(void *)(result + 48) = 0;
          goto LABEL_145;
        }
        if (!strncmp("tl", (const char *)v14, 2uLL))
        {
          *(void *)a1 = v14 + 2;
          uint64_t result = sub_1CC6B5D0C(a1);
          if (!result) {
            return result;
          }
          uint64_t v154 = result;
          uint64_t v155 = (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
          while (1)
          {
            v156 = *(unsigned __int8 **)a1;
            if (*(void *)a1 != *(void *)(a1 + 8) && *v156 == 69) {
              break;
            }
            uint64_t result = sub_1CC6BB994((void *)a1);
            if (!result) {
              return result;
            }
            uint64_t v157 = result;
            v158 = *(uint64_t **)(a1 + 24);
            if (v158 == *(uint64_t **)(a1 + 32))
            {
              sub_1CD5F0ACC(a1 + 16, ((uint64_t)v158 - *(void *)(a1 + 16)) >> 2);
              v158 = *(uint64_t **)(a1 + 24);
            }
            *(void *)(a1 + 24) = v158 + 1;
            uint64_t *v158 = v157;
          }
          *(void *)a1 = v156 + 1;
          uint64_t v173 = *(void *)(a1 + 24);
          v174 = (const void *)(*(void *)(a1 + 16) + 8 * v155);
          v175 = (void *)sub_1CC6B7FB0(a1 + 808, (int)v173 - (int)v174);
          v176 = v175;
          int64_t v177 = v173 - (void)v174;
          if (v177) {
            memmove(v175, v174, v177);
          }
          uint64_t v46 = v177 >> 3;
          *(void *)(a1 + 24) = *(void *)(a1 + 16) + 8 * v155;
          uint64_t result = sub_1CC6B7FB0(a1 + 808, 40);
          *(unsigned char *)(result + 8) = 66;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          *(void *)uint64_t result = &unk_1F261A3E8;
          *(void *)(result + 16) = v154;
          *(void *)(result + 24) = v176;
LABEL_84:
          *(void *)(result + 32) = v46;
          return result;
        }
        if (!strncmp("tr", (const char *)v14, 2uLL))
        {
          *(void *)a1 = v14 + 2;
          uint64_t result = sub_1CC6B7FB0(a1 + 808, 32);
          *(unsigned char *)(result + 8) = 7;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          *(void *)uint64_t result = &unk_1F26197E0;
          *(void *)(result + 16) = "throw";
          *(void *)(result + 24) = "";
          return result;
        }
        if (!strncmp("tw", (const char *)v14, 2uLL))
        {
          *(void *)a1 = v14 + 2;
          uint64_t result = sub_1CC6B91F4(a1);
          if (!result) {
            return result;
          }
          uint64_t v139 = result;
          uint64_t result = sub_1CC6B7FB0(a1 + 808, 24);
          *(unsigned char *)(result + 8) = 68;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          v140 = &unk_1F261A5A0;
          goto LABEL_195;
        }
        if (v15 != v14 && v17 == 117)
        {
          *(void *)a1 = v14 + 1;
          uint64_t result = sub_1CC6B8058(a1);
          if (!result) {
            return result;
          }
          uint64_t v58 = result;
          uint64_t v59 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
          if (v60 - (void)v59 == 8 && !strncmp(v59, "__uuidof", 8uLL))
          {
            v192 = *(unsigned __int8 **)a1;
            if (*(void *)a1 != *(void *)(a1 + 8))
            {
              int v193 = *v192;
              if (v193 == 122)
              {
                *(void *)a1 = v192 + 1;
                uint64_t v194 = sub_1CC6B91F4(a1);
                goto LABEL_300;
              }
              if (v193 == 116)
              {
                *(void *)a1 = v192 + 1;
                uint64_t v194 = sub_1CC6B5D0C(a1);
LABEL_300:
                uint64_t v204 = v194;
                if (!v194) {
                  return 0;
                }
                long long v61 = (void *)(a1 + 16);
                uint64_t v62 = (uint64_t **)(a1 + 24);
                v205 = *(uint64_t **)(a1 + 24);
                uint64_t v63 = (uint64_t)v205 - *(void *)(a1 + 16);
                if (v205 == *(uint64_t **)(a1 + 32))
                {
                  sub_1CD5F0ACC(a1 + 16, v63 >> 2);
                  v205 = *v62;
                }
                *uint64_t v62 = v205 + 1;
                uint64_t *v205 = v204;
                goto LABEL_258;
              }
            }
          }
          long long v61 = (void *)(a1 + 16);
          uint64_t v62 = (uint64_t **)(a1 + 24);
          uint64_t v63 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
          while (1)
          {
            uint64_t v64 = *(unsigned __int8 **)a1;
            if (*(void *)a1 != *(void *)(a1 + 8) && *v64 == 69) {
              break;
            }
            uint64_t result = sub_1CC6B7AD8(a1);
            if (!result) {
              return result;
            }
            uint64_t v65 = result;
            uint64_t v66 = *(uint64_t **)(a1 + 24);
            if (v66 == *(uint64_t **)(a1 + 32))
            {
              sub_1CD5F0ACC(a1 + 16, ((uint64_t)v66 - *v61) >> 2);
              uint64_t v66 = *v62;
            }
            *uint64_t v62 = v66 + 1;
            *uint64_t v66 = v65;
          }
          *(void *)a1 = v64 + 1;
LABEL_258:
          uint64_t v179 = *(void *)(a1 + 16);
          v180 = *(unsigned char **)(a1 + 24);
          v181 = (unsigned char *)(v179 + v63);
          uint64_t v182 = a1 + 808;
          v183 = (void *)sub_1CC6B7FB0(a1 + 808, (int)v180 - ((int)v179 + (int)v63));
          v184 = v183;
          if (v180 != v181) {
            memmove(v183, v181, v180 - v181);
          }
          uint64_t v46 = (v180 - v181) >> 3;
          *uint64_t v62 = (uint64_t *)(*v61 + 8 * (v63 >> 3));
          uint64_t result = sub_1CC6B7FB0(v182, 40);
          *(unsigned char *)(result + 8) = 59;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x541;
          *(void *)uint64_t result = &unk_1F2619B50;
          *(void *)(result + 16) = v58;
          *(void *)(result + 24) = v184;
          goto LABEL_84;
        }
        if (v16 >= 3 && !strncmp("srN", (const char *)v14, 3uLL))
        {
          *(void *)a1 = v14 + 3;
          uint64_t result = sub_1CC6BC6C4((unsigned __int8 **)a1);
          if (!result) {
            return result;
          }
          uint64_t v185 = result;
          if (*(void *)(a1 + 8) != *(void *)a1 && **(unsigned char **)a1 == 73)
          {
            uint64_t result = sub_1CC6B82F4(a1, 0);
            if (!result) {
              return result;
            }
            uint64_t v186 = result;
            uint64_t v187 = sub_1CC6B7FB0(a1 + 808, 32);
            *(unsigned char *)(v187 + 8) = 41;
            *(_WORD *)(v187 + 9) = *(_WORD *)(v187 + 9) & 0xF000 | 0x540;
            *(void *)uint64_t v187 = &unk_1F261AB20;
            *(void *)(v187 + 16) = v185;
            *(void *)(v187 + 24) = v186;
            uint64_t v185 = v187;
          }
          uint64_t v188 = a1 + 808;
          while (1)
          {
            v189 = *(unsigned __int8 **)a1;
            if (*(void *)a1 != *(void *)(a1 + 8) && *v189 == 69) {
              break;
            }
            uint64_t result = sub_1CC6BC778((void *)a1);
            if (!result) {
              return result;
            }
            uint64_t v190 = result;
            uint64_t v191 = sub_1CC6B7FB0(a1 + 808, 32);
            *(unsigned char *)(v191 + 8) = 22;
            *(_WORD *)(v191 + 9) = *(_WORD *)(v191 + 9) & 0xF000 | 0x540;
            *(void *)uint64_t v191 = &unk_1F261A5F8;
            *(void *)(v191 + 16) = v185;
            *(void *)(v191 + 24) = v190;
            uint64_t v185 = v191;
          }
          *(void *)a1 = v189 + 1;
          uint64_t result = sub_1CC6BC830((unsigned __int8 **)a1);
          if (result)
          {
            uint64_t v202 = result;
            uint64_t result = sub_1CC6B7FB0(v188, 32);
            *(unsigned char *)(result + 8) = 22;
            *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
            *(void *)uint64_t result = &unk_1F261A5F8;
            *(void *)(result + 16) = v185;
            *(void *)(result + 24) = v202;
          }
          return result;
        }
        if (strncmp("sr", (const char *)v14, 2uLL))
        {
          uint64_t result = sub_1CC6BC830((unsigned __int8 **)a1);
          uint64_t v139 = result;
          if (!v3 || !result) {
            return result;
          }
          uint64_t result = sub_1CC6B7FB0(a1 + 808, 24);
          *(unsigned char *)(result + 8) = 42;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          v140 = &unk_1F261A758;
LABEL_195:
          *(void *)uint64_t result = v140;
          *(void *)(result + 16) = v139;
          return result;
        }
        *(void *)a1 = v14 + 2;
        if (v15 == v14 + 2)
        {
          uint64_t v178 = 0;
        }
        else
        {
          if ((char)v14[2] < 0)
          {
LABEL_277:
            uint64_t result = sub_1CC6BC6C4((unsigned __int8 **)a1);
            if (result)
            {
              uint64_t v195 = result;
              if (*(void *)(a1 + 8) == *(void *)a1 || **(unsigned char **)a1 != 73) {
                goto LABEL_297;
              }
              uint64_t result = sub_1CC6B82F4(a1, 0);
              if (result)
              {
                uint64_t v196 = result;
                uint64_t v197 = sub_1CC6B7FB0(a1 + 808, 32);
                *(unsigned char *)(v197 + 8) = 41;
                *(_WORD *)(v197 + 9) = *(_WORD *)(v197 + 9) & 0xF000 | 0x540;
                *(void *)uint64_t v197 = &unk_1F261AB20;
                *(void *)(v197 + 16) = v195;
                *(void *)(v197 + 24) = v196;
                uint64_t v195 = v197;
LABEL_297:
                uint64_t result = sub_1CC6BC830((unsigned __int8 **)a1);
                if (result)
                {
                  uint64_t v203 = result;
                  uint64_t result = sub_1CC6B7FB0(a1 + 808, 32);
                  *(unsigned char *)(result + 8) = 22;
                  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
                  *(void *)uint64_t result = &unk_1F261A5F8;
                  *(void *)(result + 16) = v195;
                  *(void *)(result + 24) = v203;
                }
              }
            }
            return result;
          }
          uint64_t v178 = v14[2];
        }
        if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v178 + 60) & 0x400) == 0) {
          goto LABEL_277;
        }
        uint64_t result = sub_1CC6BC778((void *)a1);
        if (!result) {
          return result;
        }
        uint64_t v198 = result;
        uint64_t v195 = 0;
        while (1)
        {
          if (v195)
          {
            uint64_t v199 = sub_1CC6B7FB0(a1 + 808, 32);
            *(unsigned char *)(v199 + 8) = 22;
            *(_WORD *)(v199 + 9) = *(_WORD *)(v199 + 9) & 0xF000 | 0x540;
            *(void *)uint64_t v199 = &unk_1F261A5F8;
            *(void *)(v199 + 16) = v195;
            v200 = (uint64_t *)(v199 + 24);
            uint64_t v195 = v199;
          }
          else
          {
            if (!v3)
            {
              uint64_t v195 = v198;
              goto LABEL_289;
            }
            uint64_t v195 = sub_1CC6B7FB0(a1 + 808, 24);
            *(unsigned char *)(v195 + 8) = 42;
            *(_WORD *)(v195 + 9) = *(_WORD *)(v195 + 9) & 0xF000 | 0x540;
            *(void *)uint64_t v195 = &unk_1F261A758;
            v200 = (uint64_t *)(v195 + 16);
          }
          uint64_t *v200 = v198;
LABEL_289:
          v201 = *(unsigned __int8 **)a1;
          if (*(void *)a1 != *(void *)(a1 + 8) && *v201 == 69)
          {
            *(void *)a1 = v201 + 1;
            goto LABEL_297;
          }
          uint64_t v198 = sub_1CC6BC778((void *)a1);
          uint64_t result = 0;
          if (!v198) {
            return result;
          }
        }
      }
      *(void *)a1 = v14 + 2;
      if (v15 != v14 + 2 && v14[2] == 84)
      {
        uint64_t result = sub_1CC6B86AC(a1);
        if (!result) {
          return result;
        }
        uint64_t v139 = result;
        uint64_t result = sub_1CC6B7FB0(a1 + 808, 24);
        *(unsigned char *)(result + 8) = 58;
        *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
        v140 = &unk_1F261A4F0;
        goto LABEL_195;
      }
      uint64_t result = sub_1CC6BB7D8(a1);
      if (!result) {
        return result;
      }
      uint64_t v109 = result;
      uint64_t result = sub_1CC6B7FB0(a1 + 808, 56);
      *(unsigned char *)(result + 8) = 56;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
      *(void *)uint64_t result = &unk_1F2619CB0;
      v110 = "sizeof... ";
      v111 = "";
    }
    *(void *)(result + 16) = v110;
    *(void *)(result + 24) = v111;
    *(void *)(result + 40) = 0;
    *(void *)(result + 48) = 0;
    *(void *)(result + 32) = v109;
    return result;
  }
  BOOL v52 = (char *)(v14 + 1);
  int v53 = v14[1];
  if (v53 == 112) {
    goto LABEL_158;
  }
  if (v53 != 76) {
    goto LABEL_153;
  }
  if (v16 < 3)
  {
    uint64_t v54 = 0;
  }
  else
  {
    if ((char)v14[2] < 0) {
      goto LABEL_153;
    }
    uint64_t v54 = v14[2];
  }
  if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v54 + 60) & 0x400) != 0)
  {
LABEL_158:
    return sub_1CC6BB7D8(a1);
  }
LABEL_153:
  *(void *)a1 = v52;
  if (v15 == (unsigned __int8 *)v52) {
    return 0;
  }
  uint64_t result = 0;
  int v106 = *v52;
  if (v106 > 107)
  {
    if (v106 == 108)
    {
      int v108 = 0;
      int v107 = 1;
    }
    else
    {
      if (v106 != 114) {
        return result;
      }
      int v107 = 0;
      int v108 = 0;
    }
  }
  else
  {
    if (v106 == 76)
    {
      int v107 = 1;
    }
    else
    {
      if (v106 != 82) {
        return result;
      }
      int v107 = 0;
    }
    int v108 = 1;
  }
  *(void *)a1 = v14 + 2;
  uint64_t result = (uint64_t)sub_1CC6BAE80((unsigned __int8 **)a1);
  if (result)
  {
    uint64_t v137 = result;
    if (*(unsigned char *)(result + 2) != 2) {
      return 0;
    }
    uint64_t result = sub_1CC6B91F4(a1);
    if (result)
    {
      uint64_t v138 = result;
      if (v108)
      {
        uint64_t result = sub_1CC6B91F4(a1);
        if (!result) {
          return result;
        }
      }
      else
      {
        uint64_t result = 0;
      }
      BOOL v141 = result != 0;
      if ((v107 & v141) != 0) {
        uint64_t v142 = v138;
      }
      else {
        uint64_t v142 = result;
      }
      if ((v107 & v141) != 0) {
        uint64_t v143 = result;
      }
      else {
        uint64_t v143 = v138;
      }
      v144 = *(const char **)(v137 + 8);
      size_t v145 = strlen(v144);
      unsigned int v146 = *(unsigned __int8 *)(v137 + 2);
      v147 = v144;
      if (v146 <= 0xA)
      {
        uint64_t v148 = 8;
        if (v145 < 8) {
          uint64_t v148 = v145;
        }
        v147 = &v144[v148];
        if (v145 >= 9 && *v147 == 32) {
          ++v147;
        }
      }
      v149 = &v144[v145];
      uint64_t result = sub_1CC6B7FB0(a1 + 808, 56);
      *(unsigned char *)(result + 8) = 67;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
      *(void *)uint64_t result = &unk_1F261A288;
      *(void *)(result + 16) = v143;
      *(void *)(result + 24) = v142;
      *(void *)(result + 32) = v147;
      *(void *)(result + 40) = v149;
      *(unsigned char *)(result + 48) = v107;
    }
  }
  return result;
}

char *sub_1CC6BAE80(unsigned __int8 **a1)
{
  int v1 = *a1;
  if ((unint64_t)(a1[1] - *a1) < 2) {
    return 0;
  }
  int v3 = *v1;
  uint64_t result = &byte_1E6849C60;
  unint64_t v5 = 62;
  do
  {
    unint64_t v6 = v5 >> 1;
    size_t v7 = &result[16 * (v5 >> 1)];
    if (*v7 < (char)v3 || *v7 == v3 && v7[1] < (char)v1[1])
    {
      uint64_t result = v7 + 16;
      unint64_t v6 = v5 + ~v6;
    }
    unint64_t v5 = v6;
  }
  while (v6);
  if (result == (char *)&off_1E684A040 || *result != v3 || result[1] != v1[1]) {
    return 0;
  }
  *a1 = v1 + 2;
  return result;
}

uint64_t sub_1CC6BAF28(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = sub_1CC6B91F4();
  if (result)
  {
    uint64_t v9 = result;
    uint64_t result = sub_1CC6B7FB0(a1 + 808, 40);
    *(unsigned char *)(result + 8) = 62;
    *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | a4 & 0x3F | 0x540;
    *(void *)uint64_t result = &unk_1F2619940;
    *(void *)(result + 16) = a2;
    *(void *)(result + 24) = a3;
    *(void *)(result + 32) = v9;
  }
  return result;
}

uint64_t sub_1CC6BAFC0(uint64_t a1)
{
  char v2 = *(char **)a1;
  int v1 = *(unsigned char **)(a1 + 8);
  if (*(unsigned char **)a1 != v1 && *v2 == 76)
  {
    *(void *)a1 = v2 + 1;
    unint64_t v4 = v1 - (v2 + 1);
    if (v1 == v2 + 1)
    {
LABEL_10:
      uint64_t result = sub_1CC6B5D0C(a1);
      if (!result) {
        return result;
      }
      uint64_t v9 = result;
      uint64_t v10 = sub_1CC6B5BE0((char **)a1, 1);
      if (v10 != v11)
      {
        uint64_t v12 = *(char **)a1;
        if (*(void *)a1 != *(void *)(a1 + 8) && *v12 == 69)
        {
          int v13 = v10;
          int v14 = v11;
          *(void *)a1 = v12 + 1;
          uint64_t result = sub_1CC6B7FB0(a1 + 808, 40);
          *(unsigned char *)(result + 8) = 72;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          *(void *)uint64_t result = &unk_1F261A1D8;
          *(void *)(result + 16) = v9;
          *(void *)(result + 24) = v13;
          *(void *)(result + 32) = v14;
          return result;
        }
      }
    }
    else
    {
      uint64_t result = 0;
      switch(v2[1])
      {
        case 'A':
          uint64_t result = sub_1CC6B5D0C(a1);
          if (!result) {
            return result;
          }
          unint64_t v6 = *(char **)a1;
          if (*(void *)a1 == *(void *)(a1 + 8) || *v6 != 69) {
            return 0;
          }
          uint64_t v7 = result;
          *(void *)a1 = v6 + 1;
          uint64_t result = sub_1CC6B7FB0(a1 + 808, 24);
          *(unsigned char *)(result + 8) = 70;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          uint64_t v8 = &unk_1F2619EC0;
          goto LABEL_9;
        case 'D':
          if (v4 < 3 || strncmp("DnE", v2 + 1, 3uLL)) {
            return 0;
          }
          *(void *)a1 = v2 + 4;
          return sub_1CC6B9178(a1, "nullptr");
        case 'T':
          return result;
        case 'U':
          if (v4 < 2 || v2[2] != 108) {
            return 0;
          }
          uint64_t result = sub_1CC6BBC58(a1, 0);
          if (!result) {
            return result;
          }
          uint64_t v15 = *(char **)a1;
          if (*(void *)a1 == *(void *)(a1 + 8) || *v15 != 69) {
            return 0;
          }
          uint64_t v7 = result;
          *(void *)a1 = v15 + 1;
          uint64_t result = sub_1CC6B7FB0(a1 + 808, 24);
          *(unsigned char *)(result + 8) = 71;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          uint64_t v8 = &unk_1F261A180;
LABEL_9:
          *(void *)uint64_t result = v8;
          *(void *)(result + 16) = v7;
          return result;
        case '_':
          if (v4 < 2 || strncmp("_Z", v2 + 1, 2uLL)) {
            return 0;
          }
          *(void *)a1 = v2 + 3;
          uint64_t result = sub_1CC6B4F7C(a1);
          if (!result) {
            return result;
          }
          unint64_t v16 = *(char **)a1;
          if (*(void *)a1 == *(void *)(a1 + 8) || *v16 != 69) {
            return 0;
          }
          *(void *)a1 = v16 + 1;
          return result;
        case 'a':
          *(void *)a1 = v2 + 2;
          int v17 = "signed char";
          unsigned int v18 = "";
          goto LABEL_71;
        case 'b':
          if (v4 < 3) {
            return 0;
          }
          if (!strncmp("b0E", v2 + 1, 3uLL))
          {
            *(void *)a1 = v2 + 4;
            uint64_t result = sub_1CC6B7FB0(a1 + 808, 16);
            *(unsigned char *)(result + 8) = 69;
            *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
            *(void *)uint64_t result = &unk_1F2619D60;
            *(unsigned char *)(result + 11) = 0;
          }
          else
          {
            if (strncmp("b1E", v2 + 1, 3uLL)) {
              return 0;
            }
            *(void *)a1 = v2 + 4;
            uint64_t result = sub_1CC6B7FB0(a1 + 808, 16);
            *(unsigned char *)(result + 8) = 69;
            *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
            *(void *)uint64_t result = &unk_1F2619D60;
            *(unsigned char *)(result + 11) = 1;
          }
          return result;
        case 'c':
          *(void *)a1 = v2 + 2;
          int v17 = "char";
          unsigned int v18 = "";
          goto LABEL_71;
        case 'd':
          uint64_t v19 = v2 + 2;
          *(void *)a1 = v2 + 2;
          if ((unint64_t)(v1 - (v2 + 2)) < 0x11) {
            return 0;
          }
          uint64_t v20 = 0;
          uint64_t v21 = v2 + 18;
          while ((v19[v20] & 0x80000000) == 0
               && (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v19[v20] + 60) & 0x10000) != 0)
          {
            if (++v20 == 16)
            {
              *(void *)a1 = v21;
              if (v21 != v1 && *v21 == 69)
              {
                *(void *)a1 = v2 + 19;
                uint64_t result = sub_1CC6B7FB0(a1 + 808, 32);
                *(unsigned char *)(result + 8) = 75;
                *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
                uint64_t v22 = &unk_1F2619E10;
                goto LABEL_82;
              }
              return 0;
            }
          }
          return 0;
        case 'e':
          uint64_t v19 = v2 + 2;
          *(void *)a1 = v2 + 2;
          if ((unint64_t)(v1 - (v2 + 2)) < 0x21) {
            return 0;
          }
          uint64_t v23 = 0;
          uint64_t v21 = v2 + 34;
          while ((v19[v23] & 0x80000000) == 0
               && (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v19[v23] + 60) & 0x10000) != 0)
          {
            if (++v23 == 32)
            {
              *(void *)a1 = v21;
              if (v21 != v1 && *v21 == 69)
              {
                *(void *)a1 = v2 + 35;
                uint64_t result = sub_1CC6B7FB0(a1 + 808, 32);
                *(unsigned char *)(result + 8) = 76;
                *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
                uint64_t v22 = &unk_1F2619E68;
                goto LABEL_82;
              }
              return 0;
            }
          }
          return 0;
        case 'f':
          uint64_t v19 = v2 + 2;
          *(void *)a1 = v2 + 2;
          if ((unint64_t)(v1 - (v2 + 2)) < 9) {
            return 0;
          }
          uint64_t v25 = 0;
          uint64_t v21 = v2 + 10;
          break;
        case 'h':
          *(void *)a1 = v2 + 2;
          int v17 = "unsigned char";
          unsigned int v18 = "";
          goto LABEL_71;
        case 'i':
          *(void *)a1 = v2 + 2;
          int v17 = "";
          uint64_t v24 = a1;
          unsigned int v18 = "";
          goto LABEL_72;
        case 'j':
          *(void *)a1 = v2 + 2;
          int v17 = "u";
          goto LABEL_61;
        case 'l':
          *(void *)a1 = v2 + 2;
          int v17 = "l";
LABEL_61:
          unsigned int v18 = (char *)(v17 + 1);
          goto LABEL_71;
        case 'm':
          *(void *)a1 = v2 + 2;
          int v17 = "ul";
          goto LABEL_69;
        case 'n':
          *(void *)a1 = v2 + 2;
          int v17 = "__int128";
          unsigned int v18 = "";
          goto LABEL_71;
        case 'o':
          *(void *)a1 = v2 + 2;
          int v17 = "unsigned __int128";
          unsigned int v18 = "";
          goto LABEL_71;
        case 's':
          *(void *)a1 = v2 + 2;
          int v17 = "short";
          unsigned int v18 = "";
          goto LABEL_71;
        case 't':
          *(void *)a1 = v2 + 2;
          int v17 = "unsigned short";
          unsigned int v18 = "";
          goto LABEL_71;
        case 'w':
          *(void *)a1 = v2 + 2;
          int v17 = "wchar_t";
          unsigned int v18 = "";
          goto LABEL_71;
        case 'x':
          *(void *)a1 = v2 + 2;
          int v17 = "ll";
LABEL_69:
          unsigned int v18 = (char *)(v17 + 2);
          goto LABEL_71;
        case 'y':
          *(void *)a1 = v2 + 2;
          int v17 = "ull";
          unsigned int v18 = "";
LABEL_71:
          uint64_t v24 = a1;
LABEL_72:
          return sub_1CC6BBB94(v24, (uint64_t)v17, (uint64_t)v18);
        default:
          goto LABEL_10;
      }
      while ((v19[v25] & 0x80000000) == 0
           && (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v19[v25] + 60) & 0x10000) != 0)
      {
        if (++v25 == 8)
        {
          *(void *)a1 = v21;
          if (v21 == v1 || *v21 != 69) {
            return 0;
          }
          *(void *)a1 = v2 + 11;
          uint64_t result = sub_1CC6B7FB0(a1 + 808, 32);
          *(unsigned char *)(result + 8) = 74;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          uint64_t v22 = &unk_1F2619DB8;
LABEL_82:
          *(void *)uint64_t result = v22;
          *(void *)(result + 16) = v19;
          *(void *)(result + 24) = v21;
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CC6BB7D8(uint64_t a1)
{
  char v2 = *(const char **)a1;
  unint64_t v3 = *(void *)(a1 + 8) - *(void *)a1;
  if (v3 < 3)
  {
    if (v3 != 2) {
      return 0;
    }
LABEL_5:
    if (!strncmp("fp", v2, 2uLL))
    {
      uint64_t v7 = (char *)(v2 + 2);
    }
    else
    {
      if (strncmp("fL", v2, 2uLL)) {
        return 0;
      }
      *(void *)a1 = v2 + 2;
      unint64_t v4 = sub_1CC6B5BE0((char **)a1, 0);
      if (v4 == v5) {
        return 0;
      }
      unint64_t v6 = *(char **)a1;
      if (*(void *)a1 == *(void *)(a1 + 8) || *v6 != 112) {
        return 0;
      }
      uint64_t v7 = v6 + 1;
    }
    *(void *)a1 = v7;
    sub_1CC6B8620(a1);
    uint64_t v8 = sub_1CC6B5BE0((char **)a1, 0);
    uint64_t v10 = *(char **)a1;
    if (*(void *)a1 != *(void *)(a1 + 8) && *v10 == 95)
    {
      unsigned int v11 = v8;
      uint64_t v12 = v9;
      *(void *)a1 = v10 + 1;
      uint64_t result = sub_1CC6B7FB0(a1 + 808, 32);
      *(unsigned char *)(result + 8) = 63;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
      *(void *)uint64_t result = &unk_1F261A230;
      *(void *)(result + 16) = v11;
      *(void *)(result + 24) = v12;
      return result;
    }
    return 0;
  }
  if (strncmp("fpT", v2, 3uLL)) {
    goto LABEL_5;
  }
  *(void *)a1 = v2 + 3;
  uint64_t result = sub_1CC6B7FB0(a1 + 808, 32);
  *(unsigned char *)(result + 8) = 7;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *(void *)uint64_t result = &unk_1F26197E0;
  *(void *)(result + 16) = "this";
  *(void *)(result + 24) = "";
  return result;
}

uint64_t sub_1CC6BB994(void *a1)
{
  char v2 = (unsigned char *)*a1;
  if (a1[1] - *a1 < 2uLL || *v2 != 100)
  {
LABEL_9:
    return sub_1CC6B91F4(a1);
  }
  int v3 = (char)v2[1];
  switch(v3)
  {
    case 'X':
      *a1 = v2 + 2;
      uint64_t result = sub_1CC6B91F4(a1);
      if (result)
      {
        uint64_t v7 = result;
        uint64_t result = sub_1CC6B91F4(a1);
        if (result)
        {
          uint64_t v8 = result;
          uint64_t result = sub_1CC6BB994(a1);
          if (result)
          {
            uint64_t v9 = result;
            uint64_t result = sub_1CC6B7FB0((uint64_t)(a1 + 101), 40);
            *(unsigned char *)(result + 8) = 78;
            *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
            *(void *)uint64_t result = &unk_1F261A390;
            *(void *)(result + 16) = v7;
            *(void *)(result + 24) = v8;
            *(void *)(result + 32) = v9;
          }
        }
      }
      break;
    case 'x':
      *a1 = v2 + 2;
      uint64_t result = sub_1CC6B91F4(a1);
      if (result)
      {
        uint64_t v10 = result;
        uint64_t result = sub_1CC6BB994(a1);
        if (result)
        {
          uint64_t v11 = result;
          uint64_t result = sub_1CC6B7FB0((uint64_t)(a1 + 101), 40);
          *(unsigned char *)(result + 8) = 77;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          *(void *)uint64_t result = &unk_1F261A338;
          *(void *)(result + 16) = v10;
          *(void *)(result + 24) = v11;
          *(unsigned char *)(result + 32) = 1;
        }
      }
      break;
    case 'i':
      *a1 = v2 + 2;
      uint64_t result = sub_1CC6B8058((uint64_t)a1);
      if (result)
      {
        uint64_t v5 = result;
        uint64_t result = sub_1CC6BB994(a1);
        if (result)
        {
          uint64_t v6 = result;
          uint64_t result = sub_1CC6B7FB0((uint64_t)(a1 + 101), 40);
          *(unsigned char *)(result + 8) = 77;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          *(void *)uint64_t result = &unk_1F261A338;
          *(void *)(result + 16) = v5;
          *(void *)(result + 24) = v6;
          *(unsigned char *)(result + 32) = 0;
        }
      }
      return result;
    default:
      goto LABEL_9;
  }
  return result;
}

uint64_t sub_1CC6BBB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1CC6B5BE0((char **)a1, 1);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v8 = *(char **)a1;
  if (*(void *)a1 == *(void *)(a1 + 8) || *v8 != 69) {
    return 0;
  }
  uint64_t v9 = v6;
  uint64_t v10 = v7;
  *(void *)a1 = v8 + 1;
  uint64_t result = sub_1CC6B7FB0(a1 + 808, 48);
  *(unsigned char *)(result + 8) = 73;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *(void *)uint64_t result = &unk_1F2619D08;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  *(void *)(result + 32) = v9;
  *(void *)(result + 40) = v10;
  return result;
}

uint64_t sub_1CC6BBC58(uint64_t a1, uint64_t a2)
{
  if (a2) {
    *(void *)(a1 + 672) = *(void *)(a1 + 664);
  }
  int v3 = *(const char **)a1;
  if (*(void *)(a1 + 8) - *(void *)a1 < 2uLL) {
    return 0;
  }
  if (!strncmp("Ut", *(const char **)a1, 2uLL))
  {
    *(void *)a1 = v3 + 2;
    uint64_t v7 = sub_1CC6B5BE0((char **)a1, 0);
    uint64_t v9 = *(char **)a1;
    if (*(void *)a1 != *(void *)(a1 + 8) && *v9 == 95)
    {
      uint64_t v10 = v7;
      uint64_t v11 = v8;
      *(void *)a1 = v9 + 1;
      uint64_t v4 = sub_1CC6B7FB0(a1 + 808, 32);
      *(unsigned char *)(v4 + 8) = 47;
      *(_WORD *)(v4 + 9) = *(_WORD *)(v4 + 9) & 0xF000 | 0x540;
      *(void *)uint64_t v4 = &unk_1F2619F18;
      *(void *)(v4 + 16) = v10;
      *(void *)(v4 + 24) = v11;
      return v4;
    }
    return 0;
  }
  if (strncmp("Ul", v3, 2uLL))
  {
    if (!strncmp("Ub", v3, 2uLL))
    {
      *(void *)a1 = v3 + 2;
      sub_1CC6B5BE0((char **)a1, 0);
      uint64_t v6 = *(char **)a1;
      if (*(void *)a1 != *(void *)(a1 + 8) && *v6 == 95)
      {
        *(void *)a1 = v6 + 1;
        uint64_t v4 = sub_1CC6B7FB0(a1 + 808, 32);
        *(unsigned char *)(v4 + 8) = 7;
        *(_WORD *)(v4 + 9) = *(_WORD *)(v4 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v4 = &unk_1F26197E0;
        *(void *)(v4 + 16) = "'block-literal'";
        *(void *)(v4 + 24) = "";
        return v4;
      }
    }
    return 0;
  }
  *(void *)a1 = v3 + 2;
  uint64_t v12 = *(void *)(a1 + 784);
  *(void *)(a1 + 784) = (uint64_t)(*(void *)(a1 + 672) - *(void *)(a1 + 664)) >> 3;
  sub_1CC6BC124((uint64_t)v47, (void *)a1);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(char **)a1;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 == *(void *)a1)
  {
    uint64_t v23 = *(unsigned char **)(a1 + 24);
    uint64_t v22 = *(void *)(a1 + 16);
  }
  else
  {
    do
    {
      if (*v15 != 84) {
        break;
      }
      char v17 = (unint64_t)(v16 - (void)v15) < 2 ? 0 : v15[1];
      unsigned int v18 = memchr("yptn", v17, 4uLL);
      if (!v18 || v18 - "yptn" == -1) {
        break;
      }
      uint64_t v19 = sub_1CC6BC1C8(a1);
      if (!v19) {
        goto LABEL_48;
      }
      uint64_t v20 = v19;
      uint64_t v21 = *(uint64_t **)(a1 + 24);
      if (v21 == *(uint64_t **)(a1 + 32))
      {
        sub_1CD5F0ACC(a1 + 16, ((uint64_t)v21 - *(void *)(a1 + 16)) >> 2);
        uint64_t v21 = *(uint64_t **)(a1 + 24);
      }
      *(void *)(a1 + 24) = v21 + 1;
      *uint64_t v21 = v20;
      uint64_t v15 = *(char **)a1;
      uint64_t v16 = *(void *)(a1 + 8);
    }
    while (v16 != *(void *)a1);
    uint64_t v22 = *(void *)(a1 + 16);
    uint64_t v23 = *(unsigned char **)(a1 + 24);
  }
  uint64_t v24 = (v14 - v13) >> 3;
  uint64_t v25 = (unsigned char *)(v22 + 8 * v24);
  uint64_t v26 = v23 - v25;
  unsigned int v27 = (void *)sub_1CC6B7FB0(a1 + 808, (int)v23 - (int)v25);
  uint64_t v28 = v27;
  if (v23 == v25)
  {
    uint64_t v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 672) -= 8;
  }
  else
  {
    memmove(v27, v25, v23 - v25);
    uint64_t v29 = *(void *)(a1 + 16);
  }
  uint64_t v30 = (unsigned char *)(v29 + 8 * v24);
  *(void *)(a1 + 24) = v30;
  v31 = *(char **)a1;
  if (*(void *)(a1 + 8) - *(void *)a1 > 1uLL && !strncmp("vE", *(const char **)a1, 2uLL))
  {
    int v36 = v31 + 2;
  }
  else
  {
    uint64_t v32 = sub_1CC6B5D0C(a1);
    if (!v32)
    {
LABEL_48:
      uint64_t v4 = 0;
      goto LABEL_49;
    }
    uint64_t v33 = v32;
    while (1)
    {
      uint64_t v34 = *(uint64_t **)(a1 + 24);
      if (v34 == *(uint64_t **)(a1 + 32))
      {
        sub_1CD5F0ACC(a1 + 16, ((uint64_t)v34 - *(void *)(a1 + 16)) >> 2);
        uint64_t v34 = *(uint64_t **)(a1 + 24);
      }
      *(void *)(a1 + 24) = v34 + 1;
      *uint64_t v34 = v33;
      uint64_t v35 = *(char **)a1;
      if (*(void *)a1 != *(void *)(a1 + 8) && *v35 == 69) {
        break;
      }
      uint64_t v33 = sub_1CC6B5D0C(a1);
      if (!v33) {
        goto LABEL_48;
      }
    }
    int v36 = v35 + 1;
    uint64_t v29 = *(void *)(a1 + 16);
    uint64_t v30 = *(unsigned char **)(a1 + 24);
  }
  *(void *)a1 = v36;
  uint64_t v37 = (unsigned char *)(v29 + 8 * v24);
  char v38 = (void *)sub_1CC6B7FB0(a1 + 808, (int)v30 - (int)v37);
  char v39 = v38;
  uint64_t v40 = v30 - v37;
  if (v30 != v37) {
    memmove(v38, v37, v30 - v37);
  }
  *(void *)(a1 + 24) = *(void *)(a1 + 16) + 8 * v24;
  uint64_t v41 = sub_1CC6B5BE0((char **)a1, 0);
  int v43 = *(char **)a1;
  if (*(void *)a1 == *(void *)(a1 + 8) || *v43 != 95) {
    goto LABEL_48;
  }
  uint64_t v44 = v41;
  uint64_t v45 = v42;
  uint64_t v46 = v40 >> 3;
  *(void *)a1 = v43 + 1;
  uint64_t v4 = sub_1CC6B7FB0(a1 + 808, 64);
  *(unsigned char *)(v4 + 8) = 48;
  *(_WORD *)(v4 + 9) = *(_WORD *)(v4 + 9) & 0xF000 | 0x540;
  *(void *)uint64_t v4 = &unk_1F261A128;
  *(void *)(v4 + 16) = v28;
  *(void *)(v4 + 24) = v26 >> 3;
  *(void *)(v4 + 32) = v39;
  *(void *)(v4 + 40) = v46;
  *(void *)(v4 + 48) = v44;
  *(void *)(v4 + 56) = v45;
LABEL_49:
  *(void *)(v47[0] + 672) = *(void *)(v47[0] + 664) + 8 * v47[1];
  if (v48 != &v49) {
    free(v48);
  }
  *(void *)(a1 + 784) = v12;
  return v4;
}

uint64_t sub_1CC6BC124(uint64_t a1, void *a2)
{
  uint64_t v4 = (uint64_t)(a2[84] - a2[83]) >> 3;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 16) = a1 + 40;
  uint64_t v5 = a1 + 16;
  *(void *)(a1 + 24) = a1 + 40;
  *(void *)(a1 + 32) = a1 + 104;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  uint64_t v6 = (void *)a2[84];
  if (v6 == (void *)a2[85])
  {
    sub_1CD5F0ACC((uint64_t)(a2 + 83), ((uint64_t)v6 - a2[83]) >> 2);
    uint64_t v6 = (void *)a2[84];
  }
  a2[84] = v6 + 1;
  void *v6 = v5;
  return a1;
}

uint64_t sub_1CC6BC1C8(uint64_t a1)
{
  int v1 = *(const char **)a1;
  if (*(void *)(a1 + 8) - *(void *)a1 < 2uLL) {
    return 0;
  }
  if (!strncmp("Ty", v1, 2uLL))
  {
    *(void *)a1 = v1 + 2;
    int v8 = *(_DWORD *)(a1 + 792);
    *(_DWORD *)(a1 + 792) = v8 + 1;
    uint64_t v9 = a1 + 808;
    uint64_t v5 = sub_1CC6B7FB0(a1 + 808, 24);
    *(unsigned char *)(v5 + 8) = 31;
    *(_WORD *)(v5 + 9) = *(_WORD *)(v5 + 9) & 0xF000 | 0x540;
    *(void *)uint64_t v5 = &unk_1F2619F70;
    *(_DWORD *)(v5 + 12) = 0;
    *(_DWORD *)(v5 + 16) = v8;
    uint64_t v10 = *(void **)(*(void *)(a1 + 672) - 8);
    uint64_t v11 = (uint64_t *)v10[1];
    if (v11 == (uint64_t *)v10[2])
    {
      sub_1CD5F0ACC((uint64_t)v10, ((uint64_t)v11 - *v10) >> 2);
      uint64_t v11 = (uint64_t *)v10[1];
    }
    v10[1] = v11 + 1;
    *uint64_t v11 = v5;
    uint64_t v6 = sub_1CC6B7FB0(v9, 24);
    uint64_t v2 = v6;
    *(unsigned char *)(v6 + 8) = 32;
    *(_WORD *)(v6 + 9) = *(_WORD *)(v6 + 9) & 0xF000 | 0x500;
    uint64_t v7 = &unk_1F2619FC8;
    goto LABEL_12;
  }
  if (!strncmp("Tn", v1, 2uLL))
  {
    *(void *)a1 = v1 + 2;
    int v12 = *(_DWORD *)(a1 + 796);
    *(_DWORD *)(a1 + 796) = v12 + 1;
    uint64_t v13 = sub_1CC6B7FB0(a1 + 808, 24);
    *(unsigned char *)(v13 + 8) = 31;
    *(_WORD *)(v13 + 9) = *(_WORD *)(v13 + 9) & 0xF000 | 0x540;
    *(void *)uint64_t v13 = &unk_1F2619F70;
    *(_DWORD *)(v13 + 12) = 1;
    *(_DWORD *)(v13 + 16) = v12;
    uint64_t v14 = *(void **)(*(void *)(a1 + 672) - 8);
    uint64_t v15 = (uint64_t *)v14[1];
    if (v15 == (uint64_t *)v14[2])
    {
      sub_1CD5F0ACC(*(void *)(*(void *)(a1 + 672) - 8), ((uint64_t)v15 - *v14) >> 2);
      uint64_t v15 = (uint64_t *)v14[1];
    }
    v14[1] = v15 + 1;
    uint64_t *v15 = v13;
    uint64_t v16 = sub_1CC6B5D0C(a1);
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v2 = sub_1CC6B7FB0(a1 + 808, 32);
      *(unsigned char *)(v2 + 8) = 33;
      *(_WORD *)(v2 + 9) = *(_WORD *)(v2 + 9) & 0xF000 | 0x500;
      *(void *)uint64_t v2 = &unk_1F261A020;
      *(void *)(v2 + 16) = v13;
      *(void *)(v2 + 24) = v17;
      return v2;
    }
    return 0;
  }
  if (strncmp("Tt", v1, 2uLL))
  {
    if (strncmp("Tp", v1, 2uLL)) {
      return 0;
    }
    *(void *)a1 = v1 + 2;
    uint64_t v4 = sub_1CC6BC1C8(a1);
    if (!v4) {
      return 0;
    }
    uint64_t v5 = v4;
    uint64_t v6 = sub_1CC6B7FB0(a1 + 808, 24);
    uint64_t v2 = v6;
    *(unsigned char *)(v6 + 8) = 35;
    *(_WORD *)(v6 + 9) = *(_WORD *)(v6 + 9) & 0xF000 | 0x500;
    uint64_t v7 = &unk_1F261A0D0;
LABEL_12:
    *(void *)uint64_t v6 = v7;
    *(void *)(v6 + 16) = v5;
    return v2;
  }
  *(void *)a1 = v1 + 2;
  int v18 = *(_DWORD *)(a1 + 800);
  *(_DWORD *)(a1 + 800) = v18 + 1;
  uint64_t v19 = sub_1CC6B7FB0(a1 + 808, 24);
  *(unsigned char *)(v19 + 8) = 31;
  *(_WORD *)(v19 + 9) = *(_WORD *)(v19 + 9) & 0xF000 | 0x540;
  *(void *)uint64_t v19 = &unk_1F2619F70;
  *(_DWORD *)(v19 + 12) = 2;
  *(_DWORD *)(v19 + 16) = v18;
  uint64_t v20 = *(void **)(*(void *)(a1 + 672) - 8);
  uint64_t v21 = (uint64_t *)v20[1];
  if (v21 == (uint64_t *)v20[2])
  {
    sub_1CD5F0ACC(*(void *)(*(void *)(a1 + 672) - 8), ((uint64_t)v21 - *v20) >> 2);
    uint64_t v21 = (uint64_t *)v20[1];
  }
  v20[1] = v21 + 1;
  *uint64_t v21 = v19;
  uint64_t v22 = (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
  sub_1CC6BC124((uint64_t)v33, (void *)a1);
  while (1)
  {
    uint64_t v23 = *(const char **)a1;
    if (*(void *)(a1 + 8) != *(void *)a1 && *v23 == 69) {
      break;
    }
    uint64_t v24 = sub_1CC6BC1C8(a1);
    if (!v24)
    {
      uint64_t v2 = 0;
      goto LABEL_30;
    }
    uint64_t v25 = v24;
    uint64_t v26 = *(uint64_t **)(a1 + 24);
    if (v26 == *(uint64_t **)(a1 + 32))
    {
      sub_1CD5F0ACC(a1 + 16, ((uint64_t)v26 - *(void *)(a1 + 16)) >> 2);
      uint64_t v26 = *(uint64_t **)(a1 + 24);
    }
    *(void *)(a1 + 24) = v26 + 1;
    uint64_t *v26 = v25;
  }
  *(void *)a1 = v23 + 1;
  uint64_t v27 = *(void *)(a1 + 24);
  uint64_t v28 = (const void *)(*(void *)(a1 + 16) + 8 * v22);
  uint64_t v29 = (void *)sub_1CC6B7FB0(a1 + 808, (int)v27 - (int)v28);
  uint64_t v30 = v29;
  int64_t v31 = v27 - (void)v28;
  if (v31) {
    memmove(v29, v28, v31);
  }
  *(void *)(a1 + 24) = *(void *)(a1 + 16) + 8 * v22;
  uint64_t v2 = sub_1CC6B7FB0(a1 + 808, 40);
  *(unsigned char *)(v2 + 8) = 34;
  *(_WORD *)(v2 + 9) = *(_WORD *)(v2 + 9) & 0xF000 | 0x500;
  *(void *)uint64_t v2 = &unk_1F261A078;
  *(void *)(v2 + 16) = v19;
  *(void *)(v2 + 24) = v30;
  *(void *)(v2 + 32) = v31 >> 3;
LABEL_30:
  *(void *)(v33[0] + 672) = *(void *)(v33[0] + 664) + 8 * v33[1];
  if (v34 != &v35) {
    free(v34);
  }
  return v2;
}

uint64_t sub_1CC6BC6C4(unsigned __int8 **a1)
{
  if (a1[1] != *a1)
  {
    int v2 = **a1;
    if (v2 == 68)
    {
      uint64_t v3 = sub_1CC6B8940((uint64_t)a1);
      goto LABEL_9;
    }
    if (v2 == 84)
    {
      uint64_t v3 = sub_1CC6B86AC((uint64_t)a1);
LABEL_9:
      uint64_t v5 = v3;
      if (v3)
      {
        uint64_t v6 = a1[38];
        if (v6 == a1[39])
        {
          sub_1CD5F0ACC((uint64_t)(a1 + 37), (v6 - a1[37]) >> 2);
          uint64_t v6 = a1[38];
        }
        a1[38] = v6 + 8;
        *(void *)uint64_t v6 = v5;
      }
      return v5;
    }
  }

  return sub_1CC6B8A34((uint64_t)a1);
}

uint64_t sub_1CC6BC778(void *a1)
{
  uint64_t v2 = sub_1CC6B8058((uint64_t)a1);
  if (v2 && a1[1] != *a1 && *(unsigned char *)*a1 == 73)
  {
    uint64_t v3 = sub_1CC6B82F4(a1, 0);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 32);
      *(unsigned char *)(v5 + 8) = 41;
      *(_WORD *)(v5 + 9) = *(_WORD *)(v5 + 9) & 0xF000 | 0x540;
      *(void *)uint64_t v5 = &unk_1F261AB20;
      *(void *)(v5 + 16) = v2;
      *(void *)(v5 + 24) = v4;
      return v5;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t sub_1CC6BC830(unsigned __int8 **a1)
{
  uint64_t v2 = (const char *)*a1;
  uint64_t v3 = (char *)a1[1];
  if (v3 == (char *)*a1)
  {
    uint64_t v4 = 0;
  }
  else
  {
    if (*v2 < 0) {
      goto LABEL_6;
    }
    uint64_t v4 = *(unsigned __int8 *)v2;
  }
  if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v4 + 60) & 0x400) == 0)
  {
LABEL_6:
    if ((unint64_t)(v3 - (char *)*a1) < 2) {
      goto LABEL_10;
    }
    if (strncmp("dn", v2, 2uLL))
    {
      if (!strncmp("on", v2, 2uLL)) {
        *a1 = (unsigned __int8 *)(v2 + 2);
      }
LABEL_10:
      uint64_t v5 = sub_1CC6BCA2C((uint64_t)a1, 0);
      if (!v5 || a1[1] == *a1 || **a1 != 73) {
        return v5;
      }
      uint64_t v6 = sub_1CC6B82F4(a1, 0);
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 32);
        *(unsigned char *)(v8 + 8) = 41;
        *(_WORD *)(v8 + 9) = *(_WORD *)(v8 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v8 = &unk_1F261AB20;
        *(void *)(v8 + 16) = v5;
        *(void *)(v8 + 24) = v7;
        return v8;
      }
      return 0;
    }
    *a1 = (unsigned __int8 *)(v2 + 2);
    if (v3 == v2 + 2)
    {
      uint64_t v10 = 0;
    }
    else
    {
      if (v2[2] < 0) {
        goto LABEL_23;
      }
      uint64_t v10 = *((unsigned __int8 *)v2 + 2);
    }
    if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v10 + 60) & 0x400) != 0)
    {
      uint64_t v11 = sub_1CC6BC778(a1);
LABEL_25:
      uint64_t v12 = v11;
      if (v11)
      {
        uint64_t v5 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 24);
        *(unsigned char *)(v5 + 8) = 46;
        *(_WORD *)(v5 + 9) = *(_WORD *)(v5 + 9) & 0xF000 | 0x540;
        *(void *)uint64_t v5 = &unk_1F261A650;
        *(void *)(v5 + 16) = v12;
        return v5;
      }
      return 0;
    }
LABEL_23:
    uint64_t v11 = sub_1CC6BC6C4(a1);
    goto LABEL_25;
  }

  return sub_1CC6BC778(a1);
}

uint64_t sub_1CC6BCA2C(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = sub_1CC6BAE80((unsigned __int8 **)a1);
  if (!v4)
  {
    uint64_t v12 = *(unsigned __int8 **)a1;
    uint64_t v13 = *(unsigned __int8 **)(a1 + 8);
    if ((unint64_t)&v13[-*(void *)a1] >= 2 && !strncmp("li", *(const char **)a1, 2uLL))
    {
      *(void *)a1 = v12 + 2;
      uint64_t result = sub_1CC6B8058(a1);
      if (!result) {
        return result;
      }
      uint64_t v14 = result;
      uint64_t result = sub_1CC6B7FB0(a1 + 808, 24);
      *(unsigned char *)(result + 8) = 19;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
      uint64_t v15 = &unk_1F261A700;
    }
    else
    {
      if (v12 == v13) {
        return 0;
      }
      if (*v12 != 118) {
        return 0;
      }
      *(void *)a1 = v12 + 1;
      if (v13 == v12 + 1 || v12[1] - 48 > 9) {
        return 0;
      }
      *(void *)a1 = v12 + 2;
      uint64_t result = sub_1CC6B8058(a1);
      if (!result) {
        return result;
      }
      uint64_t v14 = result;
      uint64_t result = sub_1CC6B7FB0(a1 + 808, 24);
      *(unsigned char *)(result + 8) = 4;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
      uint64_t v15 = &unk_1F261A6A8;
    }
    *(void *)uint64_t result = v15;
    *(void *)(result + 16) = v14;
    return result;
  }
  unsigned int v5 = v4[2];
  if (v5 != 8)
  {
    if (v5 <= 0xA && (v5 != 4 || (v4[3] & 1) != 0))
    {
      uint64_t v16 = (const char *)*((void *)v4 + 1);
      uint64_t v17 = &v16[strlen(v16)];
      uint64_t result = sub_1CC6B7FB0(a1 + 808, 32);
      *(unsigned char *)(result + 8) = 7;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
      *(void *)uint64_t result = &unk_1F26197E0;
      *(void *)(result + 16) = v16;
      *(void *)(result + 24) = v17;
      return result;
    }
    return 0;
  }
  char v6 = *(unsigned char *)(a1 + 776);
  *(unsigned char *)(a1 + 776) = 0;
  int v7 = *(unsigned __int8 *)(a1 + 777);
  if (a2) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  char v9 = !v8;
  *(unsigned char *)(a1 + 777) = v9;
  uint64_t result = sub_1CC6B5D0C(a1);
  if (result)
  {
    uint64_t v11 = result;
    if (a2) {
      *a2 = 1;
    }
    uint64_t result = sub_1CC6B7FB0(a1 + 808, 24);
    *(unsigned char *)(result + 8) = 4;
    *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
    *(void *)uint64_t result = &unk_1F261A6A8;
    *(void *)(result + 16) = v11;
  }
  *(unsigned char *)(a1 + 777) = v7;
  *(unsigned char *)(a1 + 776) = v6;
  return result;
}

uint64_t sub_1CC6BCC94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 **)a1;
  if (*(void *)a1 != *(void *)(a1 + 8))
  {
    uint64_t v5 = a1 + 808;
    while (*v3 == 66)
    {
      *(void *)a1 = v3 + 1;
      unint64_t v10 = 0;
      char v6 = 0;
      int v7 = 0;
      if ((sub_1CC6B813C((unsigned __int8 **)a1, (uint64_t *)&v10) & 1) == 0)
      {
        int v7 = *(unsigned __int8 **)a1;
        if (*(void *)(a1 + 8) - *(void *)a1 >= v10)
        {
          char v6 = &v7[v10];
          *(void *)a1 = &v7[v10];
        }
        else
        {
          char v6 = 0;
          int v7 = 0;
        }
      }
      if (v7 == v6) {
        return 0;
      }
      uint64_t result = sub_1CC6B7FB0(v5, 40);
      __int16 v9 = *(_WORD *)(a2 + 9);
      *(unsigned char *)(result + 8) = 8;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | v9 & 0xFC0;
      *(void *)uint64_t result = &unk_1F261A808;
      *(void *)(result + 16) = a2;
      *(void *)(result + 24) = v7;
      *(void *)(result + 32) = v6;
      uint64_t v3 = *(unsigned __int8 **)a1;
      a2 = result;
      if (*(void *)a1 == *(void *)(a1 + 8)) {
        return result;
      }
    }
  }
  return a2;
}

uint64_t sub_1CC6BCDE0(uint64_t a1)
{
  int v2 = sub_1CC6B8620(a1);
  uint64_t v4 = *(const char **)a1;
  uint64_t v3 = *(const char **)(a1 + 8);
  if ((unint64_t)&v3[-*(void *)a1] < 2) {
    goto LABEL_2;
  }
  if (!strncmp("Do", *(const char **)a1, 2uLL))
  {
    *(void *)a1 = v4 + 2;
    uint64_t v5 = sub_1CC6B7FB0(a1 + 808, 32);
    *(unsigned char *)(v5 + 8) = 7;
    *(_WORD *)(v5 + 9) = *(_WORD *)(v5 + 9) & 0xF000 | 0x540;
    *(void *)uint64_t v5 = &unk_1F26197E0;
    *(void *)(v5 + 16) = "noexcept";
    *(void *)(v5 + 24) = "";
    goto LABEL_14;
  }
  if (!strncmp("DO", v4, 2uLL))
  {
    *(void *)a1 = v4 + 2;
    uint64_t result = sub_1CC6B91F4(a1);
    if (!result) {
      return result;
    }
    uint64_t v22 = *(const char **)a1;
    if (*(void *)a1 == *(void *)(a1 + 8) || *v22 != 69) {
      return 0;
    }
    uint64_t v23 = result;
    *(void *)a1 = v22 + 1;
    uint64_t v5 = sub_1CC6B7FB0(a1 + 808, 24);
    *(unsigned char *)(v5 + 8) = 16;
    *(_WORD *)(v5 + 9) = *(_WORD *)(v5 + 9) & 0xF000 | 0x540;
    *(void *)uint64_t v5 = &unk_1F261ACD8;
    *(void *)(v5 + 16) = v23;
  }
  else
  {
    if (strncmp("Dw", v4, 2uLL))
    {
LABEL_2:
      uint64_t v5 = 0;
      goto LABEL_14;
    }
    char v6 = v4 + 2;
    *(void *)a1 = v4 + 2;
    uint64_t v7 = (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
    while (v6 == v3 || *v6 != 69)
    {
      uint64_t result = sub_1CC6B5D0C(a1);
      if (!result) {
        return result;
      }
      uint64_t v9 = result;
      unint64_t v10 = *(uint64_t **)(a1 + 24);
      if (v10 == *(uint64_t **)(a1 + 32))
      {
        sub_1CD5F0ACC(a1 + 16, ((uint64_t)v10 - *(void *)(a1 + 16)) >> 2);
        unint64_t v10 = *(uint64_t **)(a1 + 24);
      }
      *(void *)(a1 + 24) = v10 + 1;
      *unint64_t v10 = v9;
      char v6 = *(const char **)a1;
      uint64_t v3 = *(const char **)(a1 + 8);
    }
    *(void *)a1 = v6 + 1;
    uint64_t v29 = *(unsigned char **)(a1 + 24);
    uint64_t v30 = (unsigned char *)(*(void *)(a1 + 16) + 8 * v7);
    int64_t v31 = (void *)sub_1CC6B7FB0(a1 + 808, (int)v29 - (int)v30);
    uint64_t v32 = v31;
    if (v29 != v30) {
      memmove(v31, v30, v29 - v30);
    }
    *(void *)(a1 + 24) = *(void *)(a1 + 16) + 8 * v7;
    uint64_t v5 = sub_1CC6B7FB0(a1 + 808, 32);
    *(unsigned char *)(v5 + 8) = 17;
    *(_WORD *)(v5 + 9) = *(_WORD *)(v5 + 9) & 0xF000 | 0x540;
    *(void *)uint64_t v5 = &unk_1F261AD30;
    *(void *)(v5 + 16) = v32;
    *(void *)(v5 + 24) = (v29 - v30) >> 3;
  }
LABEL_14:
  uint64_t v12 = *(const char **)a1;
  uint64_t v11 = *(const char **)(a1 + 8);
  if ((unint64_t)&v11[-*(void *)a1] >= 2 && !strncmp("Dx", *(const char **)a1, 2uLL))
  {
    v12 += 2;
    *(void *)a1 = v12;
  }
  if (v12 == v11 || *v12 != 70) {
    return 0;
  }
  *(void *)a1 = v12 + 1;
  if (v12 + 1 != v11 && v12[1] == 89) {
    *(void *)a1 = v12 + 2;
  }
  uint64_t result = sub_1CC6B5D0C(a1);
  if (!result) {
    return result;
  }
  uint64_t v13 = result;
  int v33 = v2;
  uint64_t v14 = (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
  uint64_t v15 = 2;
  while (1)
  {
    while (1)
    {
      uint64_t v17 = *(const char **)a1;
      uint64_t v16 = *(void *)(a1 + 8);
      if (*(void *)a1 != v16) {
        break;
      }
LABEL_27:
      if ((unint64_t)(v16 - (void)v17) >= 2)
      {
        if (!strncmp("RE", *(const char **)a1, 2uLL))
        {
          char v19 = 1;
          goto LABEL_44;
        }
        char v19 = 2;
        if (!strncmp("OE", v17, 2uLL))
        {
          uint64_t v15 = 2;
          goto LABEL_44;
        }
      }
      uint64_t result = sub_1CC6B5D0C(a1);
      if (!result) {
        return result;
      }
      uint64_t v20 = result;
      uint64_t v21 = *(uint64_t **)(a1 + 24);
      if (v21 == *(uint64_t **)(a1 + 32))
      {
        sub_1CD5F0ACC(a1 + 16, ((uint64_t)v21 - *(void *)(a1 + 16)) >> 2);
        uint64_t v21 = *(uint64_t **)(a1 + 24);
      }
      *(void *)(a1 + 24) = v21 + 1;
      *uint64_t v21 = v20;
    }
    int v18 = *(unsigned __int8 *)v17;
    if (v18 != 118) {
      break;
    }
    *(void *)a1 = v17 + 1;
  }
  if (v18 != 69) {
    goto LABEL_27;
  }
  char v19 = 0;
  uint64_t v15 = 1;
LABEL_44:
  *(void *)a1 = &v17[v15];
  uint64_t v24 = *(void *)(a1 + 24);
  uint64_t v25 = (const void *)(*(void *)(a1 + 16) + 8 * v14);
  uint64_t v26 = (void *)sub_1CC6B7FB0(a1 + 808, (int)v24 - (int)v25);
  uint64_t v27 = v26;
  int64_t v28 = v24 - (void)v25;
  if (v28) {
    memmove(v26, v25, v28);
  }
  *(void *)(a1 + 24) = *(void *)(a1 + 16) + 8 * v14;
  uint64_t result = sub_1CC6B7FB0(a1 + 808, 56);
  *(unsigned char *)(result + 8) = 15;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x100;
  *(void *)uint64_t result = &unk_1F261AD88;
  *(void *)(result + 16) = v13;
  *(void *)(result + 24) = v27;
  *(void *)(result + 32) = v28 >> 3;
  *(_DWORD *)(result + 40) = v33;
  *(unsigned char *)(result + 44) = v19;
  *(void *)(result + 48) = v5;
  return result;
}

uint64_t sub_1CC6BD2A0(uint64_t a1)
{
  int v2 = *(unsigned __int8 **)a1;
  if (*(void *)a1 == *(void *)(a1 + 8) || *v2 != 85)
  {
    int v5 = sub_1CC6B8620(a1);
    uint64_t v6 = sub_1CC6B5D0C(a1);
    if (v6 && v5)
    {
      uint64_t v7 = sub_1CC6B7FB0(a1 + 808, 24);
      __int16 v8 = *(_WORD *)(v6 + 9);
      *(unsigned char *)(v7 + 8) = 3;
      *(_WORD *)(v7 + 9) = *(_WORD *)(v7 + 9) & 0xF000 | v8 & 0xFC0;
      *(void *)uint64_t v7 = &unk_1F261AE90;
      *(_DWORD *)(v7 + 12) = v5;
      *(void *)(v7 + 16) = v6;
      return v7;
    }
    return v6;
  }
  *(void *)a1 = v2 + 1;
  unint64_t v20 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  if ((sub_1CC6B813C((unsigned __int8 **)a1, (uint64_t *)&v20) & 1) == 0)
  {
    uint64_t v4 = *(const char **)a1;
    if (*(void *)(a1 + 8) - *(void *)a1 >= v20)
    {
      uint64_t v3 = &v4[v20];
      *(void *)a1 = &v4[v20];
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v4 = 0;
    }
  }
  if (v4 == v3) {
    return 0;
  }
  if ((unint64_t)(v3 - v4) > 8)
  {
    int v11 = strncmp("objcproto", v4, 9uLL);
    uint64_t v9 = *(unsigned __int8 **)a1;
    unint64_t v10 = *(unsigned __int8 **)(a1 + 8);
    if (!v11)
    {
      *(void *)a1 = v4 + 9;
      *(void *)(a1 + 8) = v3;
      unint64_t v20 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      if ((sub_1CC6B813C((unsigned __int8 **)a1, (uint64_t *)&v20) & 1) == 0)
      {
        if (*(void *)(a1 + 8) - *(void *)a1 >= v20) {
          uint64_t v15 = (unsigned __int8 *)(*(void *)a1 + v20);
        }
        else {
          uint64_t v15 = 0;
        }
        if (*(void *)(a1 + 8) - *(void *)a1 >= v20) {
          uint64_t v16 = *(unsigned __int8 **)a1;
        }
        else {
          uint64_t v16 = 0;
        }
      }
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v10;
      if (v16 == v15) {
        return 0;
      }
      uint64_t v17 = sub_1CC6BD2A0(a1);
      if (!v17) {
        return 0;
      }
      uint64_t v18 = v17;
      uint64_t v6 = sub_1CC6B7FB0(a1 + 808, 40);
      *(unsigned char *)(v6 + 8) = 10;
      *(_WORD *)(v6 + 9) = *(_WORD *)(v6 + 9) & 0xF000 | 0x540;
      *(void *)uint64_t v6 = &unk_1F261ADE0;
      *(void *)(v6 + 16) = v18;
      *(void *)(v6 + 24) = v16;
      *(void *)(v6 + 32) = v15;
      return v6;
    }
  }
  else
  {
    uint64_t v9 = *(unsigned __int8 **)a1;
    unint64_t v10 = *(unsigned __int8 **)(a1 + 8);
  }
  if (v10 == v9 || *v9 != 73)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = sub_1CC6B82F4(a1, 0);
    if (!v12) {
      return 0;
    }
  }
  uint64_t v13 = sub_1CC6BD2A0(a1);
  if (!v13) {
    return 0;
  }
  uint64_t v14 = v13;
  uint64_t v6 = sub_1CC6B7FB0(a1 + 808, 48);
  *(unsigned char *)(v6 + 8) = 2;
  *(_WORD *)(v6 + 9) = *(_WORD *)(v6 + 9) & 0xF000 | 0x540;
  *(void *)uint64_t v6 = &unk_1F261AE38;
  *(void *)(v6 + 16) = v14;
  *(void *)(v6 + 24) = v4;
  *(void *)(v6 + 32) = v3;
  *(void *)(v6 + 40) = v12;
  return v6;
}

uint64_t sub_1CC6BD538(const char **a1)
{
  int v2 = *a1;
  if ((unint64_t)(a1[1] - *a1) < 2) {
    goto LABEL_5;
  }
  if (!strncmp("Ts", v2, 2uLL))
  {
    uint64_t v3 = "struct";
    uint64_t v4 = "";
LABEL_9:
    *a1 = v2 + 2;
    goto LABEL_10;
  }
  if (!strncmp("Tu", v2, 2uLL))
  {
    uint64_t v3 = "union";
    uint64_t v4 = "";
    goto LABEL_9;
  }
  if (!strncmp("Te", v2, 2uLL))
  {
    uint64_t v3 = "enum";
    uint64_t v4 = "";
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v3 = 0;
  uint64_t v4 = 0;
LABEL_10:
  uint64_t v5 = sub_1CC6B7570((uint64_t)a1, 0);
  if (v5 && v3 != v4)
  {
    uint64_t v6 = sub_1CC6B7FB0((uint64_t)(a1 + 101), 40);
    *(unsigned char *)(v6 + 8) = 6;
    *(_WORD *)(v6 + 9) = *(_WORD *)(v6 + 9) & 0xF000 | 0x540;
    *(void *)uint64_t v6 = &unk_1F261B0F8;
    *(void *)(v6 + 16) = v3;
    *(void *)(v6 + 24) = v4;
    *(void *)(v6 + 32) = v5;
    return v6;
  }
  return v5;
}

void *llvm::ms_demangle::Demangler::copyString(uint64_t a1, const void *a2, uint64_t a3)
{
  size_t v4 = a3 - (void)a2;
  uint64_t v5 = (void *)sub_1CD5F79B4((uint64_t **)(a1 + 16), a3 - (void)a2);
  memcpy(v5, a2, v4);
  return v5;
}

uint64_t llvm::ms_demangle::Demangler::demangleUnsigned(uint64_t a1, uint64_t a2)
{
  uint64_t result = llvm::ms_demangle::Demangler::demangleNumber(a1, a2);
  if (v4) {
    *(unsigned char *)(a1 + 8) = 1;
  }
  return result;
}

uint64_t llvm::ms_demangle::Demangler::demangleSigned(uint64_t a1, uint64_t a2)
{
  uint64_t result = llvm::ms_demangle::Demangler::demangleNumber(a1, a2);
  if (result < 0) {
    *(unsigned char *)(a1 + 8) = 1;
  }
  if (v4) {
    return -result;
  }
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleStructorIdentifier(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t result = sub_1CD5F9844((uint64_t *)(a1 + 16));
  *(unsigned char *)(result + 32) = a3;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleConversionOperatorIdentifier(uint64_t a1)
{
  return sub_1CD5F9910((uint64_t *)(a1 + 16));
}

uint64_t llvm::ms_demangle::Demangler::translateIntrinsicFunctionCode(uint64_t a1, unsigned __int8 a2, int a3)
{
  unsigned int v3 = a2 - 48;
  if (v3 >= 0xA && a2 - 65 >= 0x1A)
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  else
  {
    uint64_t v5 = -55;
    if (v3 < 0xA) {
      uint64_t v5 = -48;
    }
    return *((unsigned __int8 *)*(&off_1E684A100 + a3) + v5 + a2);
  }
  return result;
}

uint64_t llvm::ms_demangle::Demangler::demangleVariableStorageClass(uint64_t a1, void *a2)
{
  int v2 = (unsigned char *)(*a2)++;
  return (*v2 - 47);
}

unint64_t sub_1CC6BD7C8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1CD5F7B90(a1);
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a3;
  unint64_t v7 = sub_1CD5FB664(a1);
  unint64_t v8 = sub_1CD5FCA00(a1);
  *(void *)(v7 + 16) = v8;
  *(void *)(v8 + 24) = 1;
  uint64_t v9 = sub_1CD5FCAC8(a1, 1uLL);
  *(void *)(*(void *)(v7 + 16) + 16) = v9;
  *(void *)uint64_t v9 = v6;
  return v7;
}

unint64_t llvm::ms_demangle::Demangler::parseTagUniqueName(uint64_t a1, uint64_t *a2)
{
  if (!sub_1CD5F8160((uint64_t)a2, ".?A", (uint64_t)"")) {
    return 0;
  }
  sub_1CD5F8160((uint64_t)a2, ".?A", (uint64_t)"");
  if (*a2 == a2[1]) {
    return 0;
  }

  return llvm::ms_demangle::Demangler::demangleClassType(a1, a2);
}

uint64_t llvm::ms_demangle::Demangler::demangleBackRefName(uint64_t a1, char **a2)
{
  int v2 = *a2;
  unint64_t v3 = **a2 - 48;
  if (v3 >= *(void *)(a1 + 192))
  {
    uint64_t v4 = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  else
  {
    if (a2[1] != v2) {
      ++v2;
    }
    *a2 = v2;
    return *(void *)(a1 + 8 * v3 + 112);
  }
  return v4;
}

unint64_t llvm::ms_demangle::Demangler::demangleSimpleName(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = llvm::ms_demangle::Demangler::demangleSimpleString(a1, a2, a3);
  if (*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  unint64_t v7 = v4;
  uint64_t v8 = v5;
  unint64_t result = sub_1CD5F7B90((uint64_t *)(a1 + 16));
  *(void *)(result + 24) = v7;
  *(void *)(result + 32) = v8;
  return result;
}

uint64_t sub_1CC6BD96C(uint64_t *a1, int a2)
{
  unsigned int v2 = a2;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a2 <= 33)
  {
    switch(a2)
    {
      case 0:
        uint64_t result = (uint64_t)sub_1CD5EFF98(a1, 2);
        uint64_t v5 = *a1;
        uint64_t v6 = a1[1];
        __int16 v7 = 12380;
        goto LABEL_30;
      case 7:
        uint64_t result = (uint64_t)sub_1CD5EFF98(a1, 2);
        uint64_t v5 = *a1;
        uint64_t v6 = a1[1];
        __int16 v7 = 24924;
        goto LABEL_30;
      case 8:
        uint64_t result = (uint64_t)sub_1CD5EFF98(a1, 2);
        uint64_t v5 = *a1;
        uint64_t v6 = a1[1];
        __int16 v7 = 25180;
        goto LABEL_30;
      case 9:
        uint64_t result = (uint64_t)sub_1CD5EFF98(a1, 2);
        uint64_t v5 = *a1;
        uint64_t v6 = a1[1];
        __int16 v7 = 29788;
        goto LABEL_30;
      case 10:
        uint64_t result = (uint64_t)sub_1CD5EFF98(a1, 2);
        uint64_t v5 = *a1;
        uint64_t v6 = a1[1];
        __int16 v7 = 28252;
        goto LABEL_30;
      case 11:
        uint64_t result = (uint64_t)sub_1CD5EFF98(a1, 2);
        uint64_t v5 = *a1;
        uint64_t v6 = a1[1];
        __int16 v7 = 30300;
        goto LABEL_30;
      case 12:
        uint64_t result = (uint64_t)sub_1CD5EFF98(a1, 2);
        uint64_t v5 = *a1;
        uint64_t v6 = a1[1];
        __int16 v7 = 26204;
        goto LABEL_30;
      case 13:
        uint64_t result = (uint64_t)sub_1CD5EFF98(a1, 2);
        uint64_t v5 = *a1;
        uint64_t v6 = a1[1];
        __int16 v7 = 29276;
        goto LABEL_30;
      default:
        goto LABEL_7;
    }
  }
  switch(a2)
  {
    case '""':
      uint64_t result = (uint64_t)sub_1CD5EFF98(a1, 2);
      uint64_t v5 = *a1;
      uint64_t v6 = a1[1];
      __int16 v7 = 8796;
LABEL_30:
      *(_WORD *)(v5 + v6) = v7;
      uint64_t v17 = a1[1] + 2;
      goto LABEL_31;
    case '\'':
      uint64_t result = (uint64_t)sub_1CD5EFF98(a1, 2);
      uint64_t v5 = *a1;
      uint64_t v6 = a1[1];
      __int16 v7 = 10076;
      goto LABEL_30;
    case '\\':
      uint64_t result = (uint64_t)sub_1CD5EFF98(a1, 2);
      uint64_t v5 = *a1;
      uint64_t v6 = a1[1];
      __int16 v7 = 23644;
      goto LABEL_30;
  }
LABEL_7:
  if ((a2 - 32) <= 0x5E)
  {
    uint64_t result = (uint64_t)sub_1CD5EFF98(a1, 1);
    uint64_t v18 = *a1;
    uint64_t v19 = a1[1];
    a1[1] = v19 + 1;
    *(unsigned char *)(v18 + v19) = v2;
    return result;
  }
  v20[0] = 0;
  v20[1] = 0;
  char v21 = 0;
  if (a2)
  {
    LODWORD(v8) = 15;
    do
    {
      int v9 = v8;
      char v10 = 1;
      uint64_t v8 = (int)v8;
      do
      {
        unsigned int v11 = v2;
        char v12 = v10;
        if ((v2 & 0xF) >= 0xA) {
          char v13 = 55;
        }
        else {
          char v13 = 48;
        }
        *((unsigned char *)v20 + v8--) = v13 + (v2 & 0xF);
        v2 >>= 4;
        --v9;
        char v10 = 0;
      }
      while ((v12 & 1) != 0);
    }
    while (v11 >= 0x10);
  }
  else
  {
    int v9 = 15;
  }
  uint64_t v14 = (char *)v20 + v9;
  *(_WORD *)(v14 - 1) = 30812;
  uint64_t v15 = v14 - 1;
  uint64_t result = strlen(v15);
  if (result)
  {
    size_t v16 = result;
    sub_1CD5EFF98(a1, result);
    uint64_t result = (uint64_t)memcpy((void *)(*a1 + a1[1]), v15, v16);
    uint64_t v17 = a1[1] + v16;
LABEL_31:
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_1CC6BDC44(unsigned __int8 *a1, int a2, unint64_t a3)
{
  if (a3) {
    return 1;
  }
  if (a3 >= 0x20)
  {
    unsigned int v9 = 0;
    if (a2)
    {
      int v10 = a2;
      do
      {
        if (!*a1++) {
          ++v9;
        }
        --v10;
      }
      while (v10);
    }
    if ((a3 & 3) == 0 && v9 >= 2 * a2 / 3u) {
      return 4;
    }
    if (v9 < a2 / 3u) {
      return 1;
    }
    return 2;
  }
  if (a2 < 1) {
    return 1;
  }
  unsigned int v3 = 0;
  uint64_t v4 = &a1[a2 - 1];
  while (!*v4--)
  {
    if (a2 == ++v3)
    {
      unsigned int v3 = a2;
      break;
    }
  }
  if (v3 <= 1) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = 2;
  }
  if (v3 > 3 && (a3 & 3) == 0) {
    return 4;
  }
  else {
    return v6;
  }
}

unint64_t llvm::ms_demangle::Demangler::demangleLocallyScopedNamePiece(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t **)(a1 + 16);
  unint64_t v5 = sub_1CD5F7B90((uint64_t *)(a1 + 16));
  __int16 v7 = (unsigned char *)*a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6 && *v7 == 63)
  {
    *a2 = (uint64_t)(v7 + 1);
    a2[1] = v6;
  }
  unint64_t v8 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a2);
  int v10 = (unsigned char *)*a2;
  uint64_t v9 = a2[1];
  if (*a2 != v9 && *v10 == 63)
  {
    *a2 = (uint64_t)(v10 + 1);
    a2[1] = v9;
  }
  uint64_t v11 = llvm::ms_demangle::Demangler::parse(a1, a2);
  if (*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  uint64_t v13 = v11;
  uint64_t v24 = -1;
  int v25 = 1;
  uint64_t v14 = malloc_type_malloc(0x400uLL, 0x1E4FE0F9uLL);
  if (!v14) {
    std::terminate();
  }
  uint64_t v22 = v14;
  long long v23 = xmmword_1CFB1BC20;
  sub_1CD5EFF98(&v22, 1);
  uint64_t v15 = v23;
  *(void *)&long long v23 = v23 + 1;
  *((unsigned char *)v22 + v15) = 96;
  (*(void (**)(uint64_t, void **, void))(*(void *)v13 + 16))(v13, &v22, 0);
  sub_1CD5EFF98(&v22, 1);
  uint64_t v16 = v23;
  *(void *)&long long v23 = v23 + 1;
  *((unsigned char *)v22 + v16) = 39;
  sub_1CD5EFF98(&v22, 3);
  uint64_t v17 = (char *)v22 + v23;
  v17[2] = 96;
  *(_WORD *)uint64_t v17 = 14906;
  *(void *)&long long v23 = v23 + 3;
  uint64_t v18 = sub_1CD5F2448(&v22, v8, 0);
  sub_1CD5EFF98(v18, 1);
  *(unsigned char *)(*v18 + v18[1]++) = 39;
  uint64_t v19 = v22;
  size_t v20 = v23;
  char v21 = (char *)sub_1CD5F79B4(v4, v23);
  memcpy(v21, v19, v20);
  *(void *)(v5 + 24) = v21;
  *(void *)(v5 + 32) = &v21[v20];
  free(v22);
  return v5;
}

uint64_t llvm::ms_demangle::Demangler::demangleNameScopePiece(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (const char *)*a2;
  unint64_t v5 = (const char *)a2[1];
  if ((const char *)*a2 != v5 && (*v4 & 0x80000000) == 0)
  {
    uint64_t v6 = *(unsigned __int8 *)v4;
    if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v6 + 60) & 0x400) != 0)
    {
      unint64_t v22 = v6 - 48;
      if (v22 >= *(void *)(a1 + 192))
      {
        uint64_t result = 0;
        *(unsigned char *)(a1 + 8) = 1;
      }
      else
      {
        *a2 = (uint64_t)(v4 + 1);
        return *(void *)(a1 + 8 * v22 + 112);
      }
      return result;
    }
  }
  if ((unint64_t)(v5 - v4) < 2)
  {
LABEL_7:
    if (v4 != v5)
    {
      __int16 v7 = v4 + 1;
      if (*v4 == 63)
      {
        unint64_t v8 = (unsigned __int8 *)(v4 + 1);
        size_t v9 = v5 - v7;
        if (v9)
        {
          int v10 = memchr(v7, 63, v9);
          size_t v11 = v10 - v8;
          if (v10 && v11 != -1)
          {
            if (v9 < v11) {
              size_t v11 = v9;
            }
            if (v11 == 1)
            {
              int v17 = *v8;
              if (v17 == 64 || (v17 - 48) < 0xA)
              {
LABEL_32:
                return llvm::ms_demangle::Demangler::demangleLocallyScopedNamePiece(a1, a2);
              }
            }
            else if (v11)
            {
              uint64_t v13 = &v8[v11];
              int v15 = *(v13 - 1);
              uint64_t v14 = v13 - 1;
              if (v15 == 64 && *v8 - 81 >= 0xFFFFFFF1)
              {
                if (v14 == v8) {
                  uint64_t v16 = v8;
                }
                else {
                  uint64_t v16 = v8 + 1;
                }
                while (v16 != v14)
                {
                  if (*v16 - 81 < 0xFFFFFFF0) {
                    goto LABEL_35;
                  }
                  if (v14 != v16) {
                    ++v16;
                  }
                }
                goto LABEL_32;
              }
            }
          }
        }
      }
    }
LABEL_35:
    size_t v20 = llvm::ms_demangle::Demangler::demangleSimpleString(a1, (uint64_t)a2, 1);
    if (*(unsigned char *)(a1 + 8)) {
      return 0;
    }
    long long v23 = v20;
    uint64_t v24 = v21;
    uint64_t result = sub_1CD5F7B90((uint64_t *)(a1 + 16));
    *(void *)(result + 24) = v23;
    *(void *)(result + 32) = v24;
    return result;
  }
  if (!strncmp("?$", (const char *)*a2, 2uLL))
  {
    return llvm::ms_demangle::Demangler::demangleTemplateInstantiationName(a1, a2, 1);
  }
  else
  {
    if (strncmp("?A", v4, 2uLL)) {
      goto LABEL_7;
    }
    return llvm::ms_demangle::Demangler::demangleAnonymousNamespaceName(a1, (uint64_t)a2);
  }
}

unint64_t sub_1CC6BE130(uint64_t *a1, void *a2, unint64_t a3)
{
  unint64_t v6 = sub_1CD5FCA00(a1);
  *(void *)(v6 + 24) = a3;
  *(void *)(v6 + 16) = sub_1CD5FCAC8(a1, a3);
  if (a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(void *)(*(void *)(v6 + 16) + 8 * v7) = *a2;
      a2 = (void *)a2[1];
      ++v7;
    }
    while (a3 != v7);
  }
  return v6;
}

uint64_t llvm::ms_demangle::Demangler::demangleThrowSpecification(uint64_t a1, void *a2)
{
  uint64_t result = sub_1CD5F8160((uint64_t)a2, "_E", (uint64_t)"");
  if ((result & 1) == 0)
  {
    unint64_t v6 = (unsigned char *)*a2;
    uint64_t v5 = a2[1];
    if (*a2 == v5 || *v6 != 90)
    {
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      *a2 = v6 + 1;
      a2[1] = v5;
    }
  }
  return result;
}

uint64_t sub_1CC6BE3AC(void *a1)
{
  if (sub_1CD5F8160((uint64_t)a1, "$$Q", (uint64_t)"")) {
    return 0x300000000;
  }
  unsigned int v3 = (unsigned char *)(*a1)++;
  switch(*v3)
  {
    case 'P':
      uint64_t result = 0x100000000;
      break;
    case 'Q':
      uint64_t result = 0x100000001;
      break;
    case 'R':
      uint64_t result = 0x100000002;
      break;
    case 'S':
      uint64_t result = 0x100000003;
      break;
    default:
      uint64_t result = 0x200000000;
      break;
  }
  return result;
}

void llvm::microsoftDemangle()
{
  v0 = &unk_1F261B258;
  char v1 = 0;
  uint64_t v2 = 0;
  operator new();
}

void llvm::ms_demangle::Node::toString(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = 0;
  long long v8 = 0uLL;
  uint64_t v9 = -1;
  int v10 = 1;
  unint64_t v6 = malloc_type_malloc(0x400uLL, 0x1E4FE0F9uLL);
  if (v6)
  {
    uint64_t v7 = v6;
    long long v8 = xmmword_1CFB1BC20;
  }
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 16))(a1, &v7, a2);
  sub_1CC028D80(a3, (char *)v7, (char *)v7 + v8, v8);
  free(v7);
}

uint64_t *sub_1CC6BE798(uint64_t *result, int a2, uint64_t a3, int a4)
{
  if (a2)
  {
    unint64_t v6 = result;
    unint64_t v7 = result[1];
    uint64_t v8 = sub_1CC6BEEB0(result, a2, 1, a3);
    uint64_t v9 = sub_1CC6BEEB0(v6, a2, 2, v8);
    uint64_t result = (uint64_t *)sub_1CC6BEEB0(v6, a2, 32, v9);
    if (a4)
    {
      if (v6[1] > v7)
      {
        uint64_t result = sub_1CD5EFF98(v6, 1);
        *(unsigned char *)(*v6 + v6[1]++) = 32;
      }
    }
  }
  return result;
}

unint64_t sub_1CC6BE950(uint64_t *a1, int a2)
{
  unint64_t result = sub_1CC6BEC08((unint64_t)a1);
  switch(a2)
  {
    case 1:
      uint64_t v5 = 7;
      unint64_t result = (unint64_t)sub_1CD5EFF98(a1, 7);
      uint64_t v6 = *a1;
      uint64_t v8 = a1[1];
      unint64_t v7 = a1 + 1;
      uint64_t v9 = v6 + v8;
      *(_DWORD *)(v9 + 3) = 1818453348;
      int v10 = 1684234079;
      goto LABEL_10;
    case 2:
      uint64_t v5 = 8;
      unint64_t result = (unint64_t)sub_1CD5EFF98(a1, 8);
      uint64_t v11 = *a1;
      uint64_t v12 = a1[1];
      unint64_t v7 = a1 + 1;
      *(void *)(v11 + v12) = 0x6C61637361705F5FLL;
      goto LABEL_16;
    case 3:
      uint64_t v5 = 10;
      unint64_t result = (unint64_t)sub_1CD5EFF98(a1, 10);
      uint64_t v13 = *a1;
      uint64_t v14 = a1[1];
      unint64_t v7 = a1 + 1;
      uint64_t v15 = v13 + v14;
      uint64_t v16 = "__thiscall";
      goto LABEL_7;
    case 4:
      uint64_t v5 = 9;
      unint64_t result = (unint64_t)sub_1CD5EFF98(a1, 9);
      uint64_t v17 = *a1;
      uint64_t v18 = a1[1];
      unint64_t v7 = a1 + 1;
      uint64_t v19 = v17 + v18;
      size_t v20 = "__stdcall";
      goto LABEL_13;
    case 5:
      uint64_t v5 = 10;
      unint64_t result = (unint64_t)sub_1CD5EFF98(a1, 10);
      uint64_t v21 = *a1;
      uint64_t v22 = a1[1];
      unint64_t v7 = a1 + 1;
      uint64_t v15 = v21 + v22;
      uint64_t v16 = "__fastcall";
LABEL_7:
      *(void *)uint64_t v15 = *(void *)v16;
      *(_WORD *)(v15 + 8) = 27756;
      goto LABEL_16;
    case 6:
      uint64_t v5 = 9;
      unint64_t result = (unint64_t)sub_1CD5EFF98(a1, 9);
      uint64_t v23 = *a1;
      uint64_t v24 = a1[1];
      unint64_t v7 = a1 + 1;
      uint64_t v19 = v23 + v24;
      size_t v20 = "__clrcall";
      goto LABEL_13;
    case 7:
      uint64_t v5 = 6;
      unint64_t result = (unint64_t)sub_1CD5EFF98(a1, 6);
      uint64_t v25 = *a1;
      uint64_t v26 = a1[1];
      unint64_t v7 = a1 + 1;
      uint64_t v9 = v25 + v26;
      *(_WORD *)(v9 + 4) = 26978;
      int v10 = 1634033503;
LABEL_10:
      *(_DWORD *)uint64_t v9 = v10;
      goto LABEL_16;
    case 8:
      uint64_t v5 = 12;
      unint64_t result = (unint64_t)sub_1CD5EFF98(a1, 12);
      uint64_t v27 = *a1;
      uint64_t v28 = a1[1];
      unint64_t v7 = a1 + 1;
      uint64_t v29 = v27 + v28;
      *(void *)uint64_t v29 = *(void *)"__vectorcall";
      *(_DWORD *)(v29 + 8) = 1819042147;
      goto LABEL_16;
    case 9:
      uint64_t v5 = 9;
      unint64_t result = (unint64_t)sub_1CD5EFF98(a1, 9);
      uint64_t v30 = *a1;
      uint64_t v31 = a1[1];
      unint64_t v7 = a1 + 1;
      uint64_t v19 = v30 + v31;
      size_t v20 = "__regcall";
LABEL_13:
      *(void *)uint64_t v19 = *(void *)v20;
      *(unsigned char *)(v19 + 8) = 108;
      goto LABEL_16;
    case 10:
      uint64_t v5 = 31;
      unint64_t result = (unint64_t)sub_1CD5EFF98(a1, 31);
      uint64_t v32 = *a1;
      uint64_t v33 = a1[1];
      unint64_t v7 = a1 + 1;
      qmemcpy((void *)(v32 + v33), "__attribute__(__swiftcall__) ", 31);
      goto LABEL_16;
    case 11:
      uint64_t v5 = 36;
      unint64_t result = (unint64_t)sub_1CD5EFF98(a1, 36);
      uint64_t v34 = *a1;
      uint64_t v35 = a1[1];
      unint64_t v7 = a1 + 1;
      qmemcpy((void *)(v34 + v35), "__attribute__(__swiftasynccall__) ", 36);
LABEL_16:
      *v7 += v5;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1CC6BEC08(unint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1)
  {
    uint64_t v2 = (void *)result;
    int v3 = *(char *)(v1 + *(void *)result - 1);
    int v4 = v3;
    if (v3 < 0) {
      unint64_t result = __maskrune((char)v3, 0x500uLL);
    }
    else {
      unint64_t result = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v3 + 60) & 0x500;
    }
    if (v4 == 62 || result != 0)
    {
      unint64_t result = (unint64_t)sub_1CD5EFF98(v2, 1);
      *(unsigned char *)(*v2 + v2[1]++) = 32;
    }
  }
  return result;
}

uint64_t llvm::ms_demangle::ArrayTypeNode::outputOneDimension(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4[2]) {
    return (*(uint64_t (**)(void *))(*a4 + 16))(a4);
  }
  return result;
}

uint64_t llvm::ms_demangle::VariableSymbolNode::output(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned int v6 = *(unsigned __int8 *)(a1 + 24) - 1;
  if (v6 > 2) {
    goto LABEL_4;
  }
  if ((a3 & 4) == 0)
  {
    int v10 = off_1E684A118[(char)v6];
    size_t v11 = strlen(v10);
    if (v11)
    {
      size_t v12 = v11;
      sub_1CD5EFF98(a2, v11);
      memcpy((void *)(*a2 + a2[1]), v10, v12);
      a2[1] += v12;
    }
    sub_1CD5EFF98(a2, 2);
    *(_WORD *)(*a2 + a2[1]) = 8250;
    a2[1] += 2;
    if ((a3 & 8) == 0) {
      goto LABEL_16;
    }
LABEL_4:
    if ((a3 & 0x20) != 0) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if ((a3 & 8) != 0) {
    goto LABEL_4;
  }
LABEL_16:
  sub_1CD5EFF98(a2, 7);
  uint64_t v13 = (_DWORD *)(*a2 + a2[1]);
  *(_DWORD *)((char *)v13 + 3) = 543385972;
  *uint64_t v13 = 1952543859;
  a2[1] += 7;
  if ((a3 & 0x20) != 0) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v7 + 24))(v7, a2, a3);
    sub_1CC6BEC08((unint64_t)a2);
  }
LABEL_7:
  uint64_t result = (*(uint64_t (**)(void, void *, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), a2, a3);
  if ((a3 & 0x20) == 0)
  {
    uint64_t result = *(void *)(a1 + 32);
    if (result)
    {
      uint64_t v9 = *(uint64_t (**)(void))(*(void *)result + 32);
      return v9();
    }
  }
  return result;
}

uint64_t sub_1CC6BEEB0(uint64_t *a1, int a2, int a3, uint64_t a4)
{
  if ((a3 & a2) != 0)
  {
    if (a4)
    {
      sub_1CD5EFF98(a1, 1);
      *(unsigned char *)(*a1 + a1[1]++) = 32;
    }
    switch(a3)
    {
      case 32:
        uint64_t v7 = 10;
        sub_1CD5EFF98(a1, 10);
        uint64_t v8 = *a1;
        uint64_t v10 = a1[1];
        uint64_t v9 = a1 + 1;
        uint64_t v11 = v8 + v10;
        *(void *)uint64_t v11 = *(void *)"__restrict";
        *(_WORD *)(v11 + 8) = 29795;
        break;
      case 2:
        uint64_t v7 = 8;
        sub_1CD5EFF98(a1, 8);
        uint64_t v12 = *a1;
        uint64_t v13 = a1[1];
        uint64_t v9 = a1 + 1;
        *(void *)(v12 + v13) = 0x656C6974616C6F76;
        break;
      case 1:
        uint64_t v7 = 5;
        sub_1CD5EFF98(a1, 5);
        uint64_t v14 = *a1;
        uint64_t v15 = a1[1];
        uint64_t v9 = a1 + 1;
        uint64_t v16 = v14 + v15;
        *(unsigned char *)(v16 + 4) = 116;
        *(_DWORD *)uint64_t v16 = 1936617315;
        break;
      default:
        return 1;
    }
    *v9 += v7;
    return 1;
  }
  return a4;
}

const char *llvm::rustDemangle(const char *this, const char *a2)
{
  if (this)
  {
    uint64_t v2 = this;
    size_t v3 = strlen(this);
    if (v3 < 2) {
      return 0;
    }
    unint64_t v4 = v3;
    if (strncmp("_R", v2, 2uLL)) {
      return 0;
    }
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    v14[0] = 500;
    uint64_t v21 = -1;
    int v22 = 1;
    this = (const char *)malloc_type_malloc(0x400uLL, 0x1E4FE0F9uLL);
    if (!this) {
      return this;
    }
    uint64_t v5 = (char *)this;
    uint64_t v19 = this;
    long long v20 = xmmword_1CFB1BC20;
    uint64_t v17 = 0;
    __int16 v18 = 1;
    v14[1] = 0;
    v14[2] = 0;
    int v6 = strncmp("_R", v2, 2uLL);
    if (v6)
    {
      HIBYTE(v18) = 1;
LABEL_25:
      free(v5);
      return 0;
    }
    uint64_t v7 = (char *)&v2[v4];
    uint64_t v8 = v2 + 2;
    if (v4 >= 3 && (uint64_t v9 = memchr((void *)&v2[2 * (v6 == 0)], 46, v4 - 2 * (v6 == 0))) != 0) {
      unint64_t v10 = v9 - v8;
    }
    else {
      unint64_t v10 = -1;
    }
    if (v4 - 2 < v10) {
      unint64_t v10 = v4 - 2;
    }
    uint64_t v11 = (char *)&v8[v10];
    uint64_t v15 = v2 + 2;
    uint64_t v16 = &v8[v10];
    sub_1CC6BF220((unint64_t)v14, 0, 0);
    if (v17 == v16 - v15
      || (char v12 = v18, LOBYTE(v18) = 0,
                     sub_1CC6BF220((unint64_t)v14, 0, 0),
                     LOBYTE(v18) = v12,
                     v17 == v16 - v15))
    {
      int v13 = HIBYTE(v18);
    }
    else
    {
      int v13 = 1;
      HIBYTE(v18) = 1;
    }
    if (v11 == v7) {
      goto LABEL_23;
    }
    if (!v13 && (_BYTE)v18)
    {
      sub_1CD5EFF98(&v19, 2);
      *(_WORD *)&v19[v20] = 10272;
      *(void *)&long long v20 = v20 + 2;
    }
    sub_1CC6BF924(v14, v11, v7);
    int v13 = HIBYTE(v18);
    if (HIBYTE(v18) || !(_BYTE)v18)
    {
LABEL_23:
      if (v13)
      {
LABEL_24:
        uint64_t v5 = (char *)v19;
        goto LABEL_25;
      }
    }
    else
    {
      sub_1CD5EFF98(&v19, 1);
      v19[v20] = 41;
      *(void *)&long long v20 = v20 + 1;
      if (HIBYTE(v18)) {
        goto LABEL_24;
      }
    }
    sub_1CD5EFF98(&v19, 1);
    v19[v20] = 0;
    return v19;
  }
  return this;
}

uint64_t sub_1CC6BF220(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 49) || (unint64_t v4 = *(void *)(a1 + 8), v4 >= *(void *)a1))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 49) = 1;
    return result;
  }
  *(void *)(a1 + 8) = v4 + 1;
  unint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32) - v6;
  if (v5 >= v7) {
    goto LABEL_41;
  }
  unint64_t v9 = v5 + 1;
  *(void *)(a1 + 40) = v5 + 1;
  int v10 = *(char *)(v6 + v5);
  if (v10 > 76)
  {
    if (v10 <= 87)
    {
      if (v10 != 77)
      {
        if (v10 == 78 && v9 < v7)
        {
          *(void *)(a1 + 40) = v5 + 2;
          int v11 = *(unsigned __int8 *)(v6 + v9);
          if ((v11 & 0xFFFFFFDF) - 65 < 0x1A)
          {
            sub_1CC6BF220(a1, a2, 0);
            unint64_t v12 = sub_1CC6BF99C(a1, 0x73u);
            sub_1CC6BFE70((uint64_t)&v41, a1);
            if ((v11 - 65) <= 0x19)
            {
              if (!*(unsigned char *)(a1 + 49) && *(unsigned char *)(a1 + 48))
              {
                sub_1CD5EFF98((void *)(a1 + 56), 3);
                uint64_t v34 = *(void *)(a1 + 56) + *(void *)(a1 + 64);
                *(unsigned char *)(v34 + 2) = 123;
                *(_WORD *)uint64_t v34 = 14906;
                *(void *)(a1 + 64) += 3;
              }
              if (v11 == 83)
              {
                int v13 = *(unsigned __int8 *)(a1 + 49);
                if (!*(unsigned char *)(a1 + 49))
                {
                  if (*(unsigned char *)(a1 + 48))
                  {
                    sub_1CD5EFF98((void *)(a1 + 56), 4);
                    *(_DWORD *)(*(void *)(a1 + 56) + *(void *)(a1 + 64)) = 1835624563;
                    uint64_t v15 = *(void *)(a1 + 64) + 4;
                    goto LABEL_86;
                  }
LABEL_90:
                  int v13 = *(unsigned __int8 *)(a1 + 49);
                }
              }
              else if (v11 == 67)
              {
                int v13 = *(unsigned __int8 *)(a1 + 49);
                if (!*(unsigned char *)(a1 + 49))
                {
                  if (*(unsigned char *)(a1 + 48))
                  {
                    sub_1CD5EFF98((void *)(a1 + 56), 7);
                    uint64_t v14 = (_DWORD *)(*(void *)(a1 + 56) + *(void *)(a1 + 64));
                    *(_DWORD *)((char *)v14 + 3) = 1701999987;
                    *uint64_t v14 = 1936682083;
                    uint64_t v15 = *(void *)(a1 + 64) + 7;
LABEL_86:
                    *(void *)(a1 + 64) = v15;
                    goto LABEL_90;
                  }
                  goto LABEL_90;
                }
              }
              else
              {
                int v13 = *(unsigned __int8 *)(a1 + 49);
                if (!*(unsigned char *)(a1 + 49))
                {
                  if (*(unsigned char *)(a1 + 48))
                  {
                    sub_1CD5EFF98((void *)(a1 + 56), 1);
                    uint64_t v35 = *(void *)(a1 + 56);
                    uint64_t v36 = *(void *)(a1 + 64);
                    *(void *)(a1 + 64) = v36 + 1;
                    *(unsigned char *)(v35 + v36) = v11;
                  }
                  goto LABEL_90;
                }
              }
              if ((void)v41 != *((void *)&v41 + 1))
              {
                if (!v13 && *(unsigned char *)(a1 + 48))
                {
                  sub_1CD5EFF98((void *)(a1 + 56), 1);
                  *(unsigned char *)(*(void *)(a1 + 56) + (*(void *)(a1 + 64))++) = 58;
                }
                long long v39 = v41;
                uint64_t v40 = v42;
                sub_1CC6BFA20((unsigned char *)a1, (unsigned __int8 **)&v39);
                int v13 = *(unsigned __int8 *)(a1 + 49);
              }
              if (!v13)
              {
                if (*(unsigned char *)(a1 + 48))
                {
                  sub_1CD5EFF98((void *)(a1 + 56), 1);
                  uint64_t v30 = *(void *)(a1 + 56);
                  uint64_t v31 = *(void *)(a1 + 64);
                  *(void *)(a1 + 64) = v31 + 1;
                  *(unsigned char *)(v30 + v31) = 35;
                  if (!*(unsigned char *)(a1 + 49))
                  {
                    if (*(unsigned char *)(a1 + 48))
                    {
                      sub_1CD5F2448((void *)(a1 + 56), v12, 0);
                      if (!*(unsigned char *)(a1 + 49))
                      {
                        if (*(unsigned char *)(a1 + 48))
                        {
                          sub_1CD5EFF98((void *)(a1 + 56), 1);
                          uint64_t v32 = *(void *)(a1 + 56);
                          uint64_t v33 = *(void *)(a1 + 64);
                          *(void *)(a1 + 64) = v33 + 1;
                          *(unsigned char *)(v32 + v33) = 125;
                        }
                      }
                    }
                  }
                }
              }
              goto LABEL_51;
            }
            if ((void)v41 != *((void *)&v41 + 1))
            {
              if (!*(unsigned char *)(a1 + 49) && *(unsigned char *)(a1 + 48))
              {
                sub_1CD5EFF98((void *)(a1 + 56), 2);
                *(_WORD *)(*(void *)(a1 + 56) + *(void *)(a1 + 64)) = 14906;
                *(void *)(a1 + 64) += 2;
              }
              long long v37 = v41;
              uint64_t v38 = v42;
              uint64_t v21 = (unsigned __int8 **)&v37;
              goto LABEL_43;
            }
LABEL_51:
            uint64_t result = 0;
            goto LABEL_54;
          }
        }
        goto LABEL_41;
      }
      int v18 = *(unsigned __int8 *)(a1 + 48);
      *(unsigned char *)(a1 + 48) = 0;
      sub_1CC6BF99C(a1, 0x73u);
      sub_1CC6BF220(a1, a2, 0);
      *(unsigned char *)(a1 + 48) = v18;
      if (v18 && !*(unsigned char *)(a1 + 49))
      {
        sub_1CD5EFF98((void *)(a1 + 56), 1);
        *(unsigned char *)(*(void *)(a1 + 56) + (*(void *)(a1 + 64))++) = 60;
      }
      sub_1CC6BFFDC(a1);
      if (*(unsigned char *)(a1 + 49)) {
        goto LABEL_51;
      }
LABEL_50:
      if (*(unsigned char *)(a1 + 48))
      {
        uint64_t v29 = (void *)(a1 + 56);
        goto LABEL_80;
      }
      goto LABEL_51;
    }
    if (v10 == 88)
    {
      int v22 = *(unsigned __int8 *)(a1 + 48);
      *(unsigned char *)(a1 + 48) = 0;
      sub_1CC6BF99C(a1, 0x73u);
      sub_1CC6BF220(a1, a2, 0);
      *(unsigned char *)(a1 + 48) = v22;
      if (!v22 || *(unsigned char *)(a1 + 49))
      {
LABEL_46:
        sub_1CC6BFFDC(a1);
        if (!*(unsigned char *)(a1 + 49) && *(unsigned char *)(a1 + 48))
        {
          sub_1CD5EFF98((void *)(a1 + 56), 4);
          *(_DWORD *)(*(void *)(a1 + 56) + *(void *)(a1 + 64)) = 544432416;
          *(void *)(a1 + 64) += 4;
        }
        sub_1CC6BF220(a1, 1, 0);
        uint64_t result = 0;
        if (*(unsigned char *)(a1 + 49)) {
          goto LABEL_54;
        }
        goto LABEL_50;
      }
    }
    else
    {
      if (v10 != 89) {
        goto LABEL_41;
      }
      if (!*(unsigned char *)(a1 + 48)) {
        goto LABEL_46;
      }
    }
    sub_1CD5EFF98((void *)(a1 + 56), 1);
    *(unsigned char *)(*(void *)(a1 + 56) + (*(void *)(a1 + 64))++) = 60;
    goto LABEL_46;
  }
  if (v10 == 66)
  {
    unint64_t v19 = sub_1CC6C0FC0(a1);
    if (!*(unsigned char *)(a1 + 49))
    {
      unint64_t v20 = *(void *)(a1 + 40);
      if (v19 < v20)
      {
        if (*(unsigned char *)(a1 + 48))
        {
          *(void *)(a1 + 40) = v19;
          uint64_t result = sub_1CC6BF220(a1, a2, a3);
          *(void *)(a1 + 40) = v20;
          goto LABEL_54;
        }
        goto LABEL_51;
      }
    }
    goto LABEL_41;
  }
  if (v10 == 67)
  {
    sub_1CC6BF99C(a1, 0x73u);
    sub_1CC6BFE70((uint64_t)v43, a1);
    uint64_t v21 = (unsigned __int8 **)v43;
LABEL_43:
    sub_1CC6BFA20((unsigned char *)a1, v21);
    goto LABEL_51;
  }
  if (v10 != 73)
  {
LABEL_41:
    uint64_t result = 0;
    *(unsigned char *)(a1 + 49) = 1;
    goto LABEL_54;
  }
  sub_1CC6BF220(a1, a2, 0);
  if (a2)
  {
    if (*(unsigned char *)(a1 + 49)) {
      goto LABEL_53;
    }
    goto LABEL_25;
  }
  if (*(unsigned char *)(a1 + 49)) {
    goto LABEL_53;
  }
  if (*(unsigned char *)(a1 + 48))
  {
    sub_1CD5EFF98((void *)(a1 + 56), 2);
    *(_WORD *)(*(void *)(a1 + 56) + *(void *)(a1 + 64)) = 14906;
    *(void *)(a1 + 64) += 2;
    if (*(unsigned char *)(a1 + 49)) {
      goto LABEL_53;
    }
LABEL_25:
    if (!*(unsigned char *)(a1 + 48)) {
      goto LABEL_56;
    }
    sub_1CD5EFF98((void *)(a1 + 56), 1);
    *(unsigned char *)(*(void *)(a1 + 56) + (*(void *)(a1 + 64))++) = 60;
    if (!*(unsigned char *)(a1 + 49)) {
      goto LABEL_56;
    }
LABEL_53:
    uint64_t result = a3 == 1;
    goto LABEL_54;
  }
LABEL_56:
  uint64_t v23 = 0;
  while (1)
  {
    unint64_t v24 = *(void *)(a1 + 40);
    uint64_t v25 = *(void *)(a1 + 24);
    unint64_t v26 = *(void *)(a1 + 32) - v25;
    if (v24 < v26 && *(unsigned char *)(v25 + v24) == 69) {
      break;
    }
    if (v23 && *(unsigned char *)(a1 + 48))
    {
      sub_1CD5EFF98((void *)(a1 + 56), 2);
      *(_WORD *)(*(void *)(a1 + 56) + *(void *)(a1 + 64)) = 8236;
      *(void *)(a1 + 64) += 2;
      if (*(unsigned char *)(a1 + 49))
      {
LABEL_67:
        sub_1CC6BFFDC(a1);
        goto LABEL_68;
      }
      unint64_t v24 = *(void *)(a1 + 40);
      uint64_t v25 = *(void *)(a1 + 24);
      unint64_t v26 = *(void *)(a1 + 32) - v25;
    }
    if (v24 >= v26) {
      goto LABEL_67;
    }
    int v27 = *(unsigned __int8 *)(v25 + v24);
    if (v27 == 75)
    {
      *(void *)(a1 + 40) = v24 + 1;
      sub_1CC6C1100(a1);
    }
    else
    {
      if (v27 != 76) {
        goto LABEL_67;
      }
      *(void *)(a1 + 40) = v24 + 1;
      unint64_t v28 = sub_1CC6C0FC0(a1);
      sub_1CC6C14F8((void *)a1, v28);
    }
LABEL_68:
    --v23;
    if (*(unsigned char *)(a1 + 49)) {
      goto LABEL_53;
    }
  }
  *(void *)(a1 + 40) = v24 + 1;
  if (a3 == 1)
  {
    uint64_t result = 1;
    goto LABEL_54;
  }
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_51;
  }
  uint64_t v29 = (void *)(a1 + 56);
LABEL_80:
  sub_1CD5EFF98(v29, 1);
  uint64_t result = 0;
  *(unsigned char *)(*(void *)(a1 + 56) + (*(void *)(a1 + 64))++) = 62;
LABEL_54:
  *(void *)(a1 + 8) = v4;
  return result;
}

unsigned char *sub_1CC6BF924(unsigned char *result, unsigned char *a2, unsigned char *a3)
{
  if (!result[49])
  {
    unint64_t v4 = result;
    if (result[48]) {
      BOOL v5 = a3 == a2;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      size_t v6 = a3 - a2;
      sub_1CD5EFF98((void *)result + 7, a3 - a2);
      uint64_t result = memcpy((void *)(*((void *)v4 + 7) + *((void *)v4 + 8)), a2, v6);
      *((void *)v4 + 8) += v6;
    }
  }
  return result;
}

unint64_t sub_1CC6BF99C(uint64_t a1, unsigned __int8 a2)
{
  if (*(unsigned char *)(a1 + 49)) {
    return 0;
  }
  unint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v3 >= *(void *)(a1 + 32) - v4) {
    return 0;
  }
  if (*(char *)(v4 + v3) != a2) {
    return 0;
  }
  *(void *)(a1 + 40) = v3 + 1;
  unint64_t v5 = sub_1CC6C0FC0(a1);
  if (*(unsigned char *)(a1 + 49)) {
    return 0;
  }
  if (v5 != -1) {
    return v5 + 1;
  }
  unint64_t result = 0;
  *(unsigned char *)(a1 + 49) = 1;
  return result;
}

unsigned char *sub_1CC6BFA20(unsigned char *result, unsigned __int8 **a2)
{
  if (result[49]) {
    return result;
  }
  uint64_t v2 = result;
  if (!result[48]) {
    return result;
  }
  unint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*((unsigned char *)a2 + 16))
  {
    unint64_t v5 = result + 56;
    uint64_t v6 = *((void *)result + 8);
    unint64_t v7 = (unsigned char *)(v4 - v3);
    if (v4 == v3) {
      goto LABEL_13;
    }
    uint64_t v8 = 0;
    uint64_t v9 = -1;
    do
    {
      if (v3[v8] == 95) {
        uint64_t v9 = v8;
      }
      ++v8;
    }
    while (v7 != (unsigned char *)v8);
    if (v9 == -1)
    {
LABEL_13:
      uint64_t v11 = 0;
      uint64_t v10 = *((void *)result + 8);
    }
    else
    {
      uint64_t v10 = *((void *)result + 8);
      if (v9)
      {
        uint64_t v38 = *a2;
        uint64_t v39 = v9;
        do
        {
          int v41 = *v38++;
          int v40 = v41;
          unsigned int v42 = v41 - 97;
          if ((v41 - 48) >= 0xA && v42 >= 0x1A && v40 != 95 && (v40 - 65) > 0x19) {
            goto LABEL_74;
          }
          uint64_t v45 = v5;
          unint64_t result = sub_1CD5EFF98(v5, 4);
          unint64_t v5 = v45;
          *(_DWORD *)(*((void *)v2 + 7) + *((void *)v2 + 8)) = v40;
          uint64_t v10 = *((void *)v2 + 8) + 4;
          *((void *)v2 + 8) = v10;
        }
        while (--v39);
      }
      uint64_t v11 = v9 + 1;
    }
    if ((unsigned char *)v11 == v7)
    {
LABEL_15:
      uint64_t v12 = *v5;
      int v13 = (unsigned char *)(*v5 + v10);
      unint64_t result = memchr((void *)(*v5 + v6), 0, (size_t)&v13[-*v5 - v6]);
      if (result) {
        unint64_t v14 = (unint64_t)result;
      }
      else {
        unint64_t v14 = (unint64_t)v13;
      }
      uint64_t v15 = (unsigned char *)(v14 + 1);
      if ((unsigned char *)v14 != v13 && v15 != v13)
      {
        unint64_t v17 = ~v14 + v10 + v12;
        do
        {
          if (*v15) {
            *(unsigned char *)v14++ = *v15;
          }
          ++v15;
          --v17;
        }
        while (v17);
      }
      *((void *)v2 + 8) = v14 - v12;
      return result;
    }
    unint64_t v19 = 0;
    uint64_t v20 = v3 - v4;
    unint64_t v21 = 700;
    unint64_t v22 = 72;
    unint64_t v23 = 128;
    unint64_t result = (unsigned char *)0xEA0EA0EA0EA0EA0FLL;
LABEL_31:
    ++v11;
    unint64_t v24 = 36;
    unint64_t v25 = 1;
    unint64_t v26 = v19;
    while (1)
    {
      uint64_t v27 = v3[v11 - 1];
      if ((v27 - 97) >= 0x1A)
      {
        if ((v27 - 48) > 9) {
          break;
        }
        uint64_t v28 = -22;
      }
      else
      {
        uint64_t v28 = -97;
      }
      unint64_t v29 = v28 + v27;
      if (v29 > ~v26 / v25) {
        break;
      }
      v26 += v29 * v25;
      unint64_t v30 = v24 - v22;
      if (v24 >= v22 + 26) {
        unint64_t v30 = 26;
      }
      if (v24 <= v22) {
        unint64_t v30 = 1;
      }
      if (v29 < v30)
      {
        unint64_t v31 = ((unint64_t)(v10 - v6) >> 2) + 1;
        unint64_t v32 = (v26 - v19) / v21 / v31 + (v26 - v19) / v21;
        if (v32 < 0x1C8)
        {
          uint64_t v33 = 0;
        }
        else
        {
          uint64_t v33 = 0;
          unint64_t v34 = v32;
          do
          {
            unint64_t v32 = v34 / 0x23;
            v33 += 36;
            unint64_t v35 = v34 >> 3;
            v34 /= 0x23uLL;
          }
          while (v35 > 0x7CA);
        }
        if (__CFADD__(v23, v26 / v31)) {
          break;
        }
        v23 += v26 / v31;
        if (v23 >> 11 == 27) {
          break;
        }
        if (v23 <= 0x7F)
        {
          LOBYTE(v47) = v23;
          char v48 = 0;
          uint64_t v46 = 0;
        }
        else if (v23 <= 0x7FF)
        {
          unsigned int v47 = (v23 >> 6) | 0xFFFFFFC0;
          char v48 = 0;
          uint64_t v46 = v23 & 0x3F | 0xFFFFFF80;
        }
        else if (v23 >> 16)
        {
          if (v23 >> 16 > 0x10) {
            break;
          }
          LODWORD(v46) = (v23 >> 12) & 0x3F | 0xFFFFFF80;
          HIDWORD(v46) = (v23 >> 6) & 0x3F | 0xFFFFFF80;
          unsigned int v47 = (v23 >> 18) | 0xFFFFFFF0;
          char v48 = v23 & 0x3F | 0x80;
        }
        else
        {
          unsigned int v47 = (v23 >> 12) | 0xFFFFFFE0;
          char v48 = 0;
          LODWORD(v46) = (v23 >> 6) & 0x3F | 0xFFFFFF80;
          BYTE4(v46) = v23 & 0x3F | 0x80;
        }
        unsigned int v50 = v5;
        unint64_t v22 = v33 + 4 * ((9 * (_WORD)v32) & 0x3FFFu) / (unsigned __int16)(v32 + 38);
        unint64_t v49 = v26 % v31;
        uint64_t v36 = v6 + 4 * (v26 % v31);
        sub_1CD5EFF98(v5, 4);
        memmove((void *)(*((void *)v2 + 7) + v36 + 4), (const void *)(*((void *)v2 + 7) + v36), *((void *)v2 + 8) - v36);
        unint64_t v5 = v50;
        long long v37 = (unsigned char *)(*((void *)v2 + 7) + v36);
        unsigned char *v37 = v47;
        v37[1] = v46;
        v37[2] = BYTE4(v46);
        v37[3] = v48;
        uint64_t v10 = *((void *)v2 + 8) + 4;
        *((void *)v2 + 8) = v10;
        unint64_t v19 = v49 + 1;
        unint64_t v21 = 2;
        unint64_t result = (unsigned char *)0xEA0EA0EA0EA0EA0FLL;
        if (v20 + v11) {
          goto LABEL_31;
        }
        goto LABEL_15;
      }
      if (is_mul_ok(36 - v30, v25))
      {
        ++v11;
        v25 *= 36 - v30;
        v24 += 36;
        if (v20 + v11 != 1) {
          continue;
        }
      }
      break;
    }
LABEL_74:
    v2[49] = 1;
    return result;
  }
  int v18 = *a2;

  return sub_1CC6BF924(result, v18, v4);
}

uint64_t sub_1CC6BFE70(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 49)) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)(a2 + 32);
  unint64_t v3 = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 24);
  unint64_t v5 = v2 - v4;
  if (v3 < v2 - v4 && *(unsigned char *)(v4 + v3) == 117)
  {
    *(void *)(a2 + 40) = ++v3;
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
  }
  if (v3 >= v5) {
    goto LABEL_14;
  }
  int v7 = *(unsigned __int8 *)(v4 + v3);
  if ((v7 - 48) > 9) {
    goto LABEL_14;
  }
  if (v7 == 48)
  {
    unint64_t v8 = 0;
    unint64_t v9 = v3 + 1;
    *(void *)(a2 + 40) = v3 + 1;
  }
  else
  {
    unint64_t v8 = 0;
    while (*(unsigned __int8 *)(v4 + v3) - 48 <= 9)
    {
      if (v8 > 0x1999999999999999) {
        goto LABEL_14;
      }
      unint64_t v10 = 10 * v8;
      unint64_t v9 = v3 + 1;
      *(void *)(a2 + 40) = v3 + 1;
      uint64_t v11 = *(char *)(v4 + v3);
      if (v10 > 47 - v11) {
        goto LABEL_14;
      }
      unint64_t v8 = v10 + v11 - 48;
      unint64_t v3 = v9;
      if (v9 >= v5) {
        goto LABEL_10;
      }
    }
    unint64_t v9 = v3;
  }
LABEL_10:
  if (v9 < v5 && *(unsigned char *)(v4 + v9) == 95) {
    *(void *)(a2 + 40) = ++v9;
  }
  if (v8 > v2 - (v9 + v4)) {
    goto LABEL_14;
  }
  uint64_t v12 = (unsigned __int8 *)(v4 + v9);
  *(void *)(a2 + 40) = v9 + v8;
  if (v8)
  {
    unint64_t v13 = v8;
    unint64_t v14 = v12;
    while (1)
    {
      int v15 = *v14;
      if ((v15 - 48) >= 0xA
        && (v15 - 97) >= 0x1A
        && v15 != 95
        && (v15 - 65) > 0x19)
      {
        break;
      }
      ++v14;
      if (!--v13) {
        goto LABEL_33;
      }
    }
LABEL_14:
    *(unsigned char *)(a2 + 49) = 1;
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 0;
    return result;
  }
LABEL_33:
  *(void *)unint64_t result = v12;
  *(void *)(result + 8) = &v12[v8];
  *(unsigned char *)(result + 16) = v6;
  return result;
}

unint64_t sub_1CC6BFFDC(unint64_t result)
{
  unint64_t v1 = result;
  if (*(unsigned char *)(result + 49) || (unint64_t v2 = *(void *)(result + 8), v2 >= *(void *)result))
  {
    *(unsigned char *)(result + 49) = 1;
    return result;
  }
  *(void *)(result + 8) = v2 + 1;
  unint64_t v3 = *(void *)(result + 40);
  uint64_t v4 = *(void *)(result + 24);
  unint64_t v5 = *(void *)(result + 32) - v4;
  if (v3 >= v5)
  {
    int v8 = 0;
    int v6 = 1;
    *(unsigned char *)(result + 49) = 1;
    unint64_t v7 = v3;
  }
  else
  {
    int v6 = 0;
    unint64_t v7 = v3 + 1;
    *(void *)(result + 40) = v3 + 1;
    int v8 = *(unsigned __int8 *)(v4 + v3);
  }
  int v66 = 0;
  unint64_t result = sub_1CC6C10C0((char)v8, &v66);
  if (result)
  {
    switch(v66)
    {
      case 0:
        if (v3 < v5 && *(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 4);
          uint64_t v9 = *(void *)(v1 + 56);
          uint64_t v10 = *(void *)(v1 + 64);
          int v11 = 1819242338;
          goto LABEL_103;
        }
        break;
      case 1:
        if (v3 < v5 && *(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 4);
          uint64_t v9 = *(void *)(v1 + 56);
          uint64_t v10 = *(void *)(v1 + 64);
          int v11 = 1918986339;
          goto LABEL_103;
        }
        break;
      case 2:
        if (v3 < v5 && *(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 2);
          uint64_t v27 = *(void *)(v1 + 56);
          uint64_t v28 = *(void *)(v1 + 64);
          __int16 v29 = 14441;
          goto LABEL_123;
        }
        break;
      case 3:
        if (v3 < v5 && *(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 3);
          uint64_t v30 = *(void *)(v1 + 56) + *(void *)(v1 + 64);
          *(unsigned char *)(v30 + 2) = 54;
          __int16 v31 = 12649;
          goto LABEL_127;
        }
        break;
      case 4:
        if (v3 < v5 && *(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 3);
          uint64_t v30 = *(void *)(v1 + 56) + *(void *)(v1 + 64);
          *(unsigned char *)(v30 + 2) = 50;
          __int16 v31 = 13161;
          goto LABEL_127;
        }
        break;
      case 5:
        if (v3 < v5 && *(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 3);
          uint64_t v30 = *(void *)(v1 + 56) + *(void *)(v1 + 64);
          *(unsigned char *)(v30 + 2) = 52;
          __int16 v31 = 13929;
          goto LABEL_127;
        }
        break;
      case 6:
        if (v3 < v5 && *(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 4);
          uint64_t v9 = *(void *)(v1 + 56);
          uint64_t v10 = *(void *)(v1 + 64);
          int v11 = 942813545;
          goto LABEL_103;
        }
        break;
      case 7:
        if (v3 < v5 && *(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 5);
          uint64_t v32 = *(void *)(v1 + 56) + *(void *)(v1 + 64);
          *(unsigned char *)(v32 + 4) = 101;
          unsigned __int16 v33 = 29545;
          goto LABEL_107;
        }
        break;
      case 8:
        if (v3 < v5 && *(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 2);
          uint64_t v27 = *(void *)(v1 + 56);
          uint64_t v28 = *(void *)(v1 + 64);
          __int16 v29 = 14453;
          goto LABEL_123;
        }
        break;
      case 9:
        if (v3 < v5 && *(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 3);
          uint64_t v30 = *(void *)(v1 + 56) + *(void *)(v1 + 64);
          *(unsigned char *)(v30 + 2) = 54;
          __int16 v31 = 12661;
          goto LABEL_127;
        }
        break;
      case 10:
        if (v3 < v5 && *(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 3);
          uint64_t v30 = *(void *)(v1 + 56) + *(void *)(v1 + 64);
          *(unsigned char *)(v30 + 2) = 50;
          __int16 v31 = 13173;
          goto LABEL_127;
        }
        break;
      case 11:
        if (v3 < v5 && *(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 3);
          uint64_t v30 = *(void *)(v1 + 56) + *(void *)(v1 + 64);
          *(unsigned char *)(v30 + 2) = 52;
          __int16 v31 = 13941;
          goto LABEL_127;
        }
        break;
      case 12:
        if (v3 < v5 && *(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 4);
          uint64_t v9 = *(void *)(v1 + 56);
          uint64_t v10 = *(void *)(v1 + 64);
          int v11 = 942813557;
LABEL_103:
          *(_DWORD *)(v9 + v10) = v11;
          uint64_t v34 = *(void *)(v1 + 64) + 4;
          goto LABEL_170;
        }
        break;
      case 13:
        if (v3 < v5 && *(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 5);
          uint64_t v32 = *(void *)(v1 + 56) + *(void *)(v1 + 64);
          *(unsigned char *)(v32 + 4) = 101;
          unsigned __int16 v33 = 29557;
LABEL_107:
          *(_DWORD *)uint64_t v32 = v33 | 0x7A690000;
          uint64_t v34 = *(void *)(v1 + 64) + 5;
          goto LABEL_170;
        }
        break;
      case 14:
        if (v3 < v5 && *(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 3);
          uint64_t v30 = *(void *)(v1 + 56) + *(void *)(v1 + 64);
          *(unsigned char *)(v30 + 2) = 50;
          __int16 v31 = 13158;
          goto LABEL_127;
        }
        break;
      case 15:
        if (v3 < v5 && *(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 3);
          uint64_t v30 = *(void *)(v1 + 56) + *(void *)(v1 + 64);
          *(unsigned char *)(v30 + 2) = 52;
          __int16 v31 = 13926;
          goto LABEL_127;
        }
        break;
      case 16:
        if (v3 < v5 && *(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 3);
          uint64_t v30 = *(void *)(v1 + 56) + *(void *)(v1 + 64);
          *(unsigned char *)(v30 + 2) = 114;
          __int16 v31 = 29811;
          goto LABEL_127;
        }
        break;
      case 17:
        if (v3 < v5 && *(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 1);
          uint64_t v21 = *(void *)(v1 + 56);
          uint64_t v22 = *(void *)(v1 + 64);
          char v23 = 95;
          goto LABEL_169;
        }
        break;
      case 18:
        if (v3 < v5 && *(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 2);
          uint64_t v27 = *(void *)(v1 + 56);
          uint64_t v28 = *(void *)(v1 + 64);
          __int16 v29 = 10536;
LABEL_123:
          *(_WORD *)(v27 + v28) = v29;
          uint64_t v34 = *(void *)(v1 + 64) + 2;
          goto LABEL_170;
        }
        break;
      case 19:
        if (v3 < v5 && *(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 3);
          uint64_t v30 = *(void *)(v1 + 56) + *(void *)(v1 + 64);
          *(unsigned char *)(v30 + 2) = 46;
          __int16 v31 = 11822;
LABEL_127:
          *(_WORD *)uint64_t v30 = v31;
          uint64_t v34 = *(void *)(v1 + 64) + 3;
          goto LABEL_170;
        }
        break;
      case 20:
        if (v3 < v5 && *(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 1);
          uint64_t v21 = *(void *)(v1 + 56);
          uint64_t v22 = *(void *)(v1 + 64);
          char v23 = 33;
          goto LABEL_169;
        }
        break;
      default:
        goto LABEL_180;
    }
    goto LABEL_180;
  }
  switch((char)v8)
  {
    case 'A':
      if (v3 < v5 && *(unsigned char *)(v1 + 48))
      {
        sub_1CD5EFF98((void *)(v1 + 56), 1);
        *(unsigned char *)(*(void *)(v1 + 56) + (*(void *)(v1 + 64))++) = 91;
      }
      sub_1CC6BFFDC(v1);
      if (!*(unsigned char *)(v1 + 49) && *(unsigned char *)(v1 + 48))
      {
        sub_1CD5EFF98((void *)(v1 + 56), 2);
        *(_WORD *)(*(void *)(v1 + 56) + *(void *)(v1 + 64)) = 8251;
        *(void *)(v1 + 64) += 2;
      }
      unint64_t result = sub_1CC6C1100(v1);
      goto LABEL_52;
    case 'B':
      unint64_t result = sub_1CC6C0FC0(v1);
      if (*(unsigned char *)(v1 + 49)) {
        goto LABEL_38;
      }
      unint64_t v15 = *(void *)(v1 + 40);
      if (result >= v15) {
        goto LABEL_38;
      }
      if (*(unsigned char *)(v1 + 48))
      {
        *(void *)(v1 + 40) = result;
        unint64_t result = sub_1CC6BFFDC(v1);
        *(void *)(v1 + 40) = v15;
      }
      goto LABEL_180;
    case 'D':
      uint64_t v16 = *(void *)(v1 + 16);
      if (v3 < v5 && *(unsigned char *)(v1 + 48))
      {
        sub_1CD5EFF98((void *)(v1 + 56), 4);
        *(_DWORD *)(*(void *)(v1 + 56) + *(void *)(v1 + 64)) = 544110948;
        *(void *)(v1 + 64) += 4;
      }
      unint64_t result = (unint64_t)sub_1CC6C1750(v1);
      if (*(unsigned char *)(v1 + 49)) {
        goto LABEL_37;
      }
      uint64_t v35 = 0;
      while (1)
      {
        unint64_t v36 = *(void *)(v1 + 40);
        uint64_t v37 = *(void *)(v1 + 24);
        unint64_t v38 = *(void *)(v1 + 32) - v37;
        if (v36 < v38 && *(unsigned char *)(v37 + v36) == 69) {
          break;
        }
        if (v35 && *(unsigned char *)(v1 + 48))
        {
          sub_1CD5EFF98((void *)(v1 + 56), 3);
          uint64_t v45 = *(void *)(v1 + 56) + *(void *)(v1 + 64);
          *(unsigned char *)(v45 + 2) = 32;
          *(_WORD *)uint64_t v45 = 11040;
          *(void *)(v1 + 64) += 3;
        }
        unint64_t result = sub_1CC6BF220(v1, 1, 1);
        if (!*(unsigned char *)(v1 + 49))
        {
          while (1)
          {
            unint64_t v39 = *(void *)(v1 + 40);
            uint64_t v40 = *(void *)(v1 + 24);
            if (v39 >= *(void *)(v1 + 32) - v40 || *(unsigned char *)(v40 + v39) != 112) {
              break;
            }
            *(void *)(v1 + 40) = v39 + 1;
            if (result)
            {
              if (*(unsigned char *)(v1 + 48))
              {
                sub_1CD5EFF98((void *)(v1 + 56), 2);
                *(_WORD *)(*(void *)(v1 + 56) + *(void *)(v1 + 64)) = 8236;
                *(void *)(v1 + 64) += 2;
              }
            }
            else if (*(unsigned char *)(v1 + 48))
            {
              sub_1CD5EFF98((void *)(v1 + 56), 1);
              uint64_t v41 = *(void *)(v1 + 56);
              uint64_t v42 = *(void *)(v1 + 64);
              *(void *)(v1 + 64) = v42 + 1;
              *(unsigned char *)(v41 + v42) = 60;
            }
            sub_1CC6BFE70((uint64_t)&v67, v1);
            sub_1CC6BF924((unsigned char *)v1, v67, v68);
            if (!*(unsigned char *)(v1 + 49) && *(unsigned char *)(v1 + 48))
            {
              sub_1CD5EFF98((void *)(v1 + 56), 3);
              uint64_t v43 = *(void *)(v1 + 56) + *(void *)(v1 + 64);
              *(unsigned char *)(v43 + 2) = 32;
              *(_WORD *)uint64_t v43 = 15648;
              *(void *)(v1 + 64) += 3;
            }
            sub_1CC6BFFDC(v1);
            unint64_t result = 1;
            if (*(unsigned char *)(v1 + 49)) {
              goto LABEL_37;
            }
          }
          if (result)
          {
            int v44 = *(unsigned __int8 *)(v1 + 48);
            if (*(unsigned char *)(v1 + 48))
            {
              unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 1);
              *(unsigned char *)(*(void *)(v1 + 56) + (*(void *)(v1 + 64))++) = 62;
              int v44 = *(unsigned __int8 *)(v1 + 49);
            }
          }
          else
          {
            int v44 = 0;
          }
          ++v35;
          if (!v44) {
            continue;
          }
        }
LABEL_37:
        *(void *)(v1 + 16) = v16;
LABEL_38:
        *(unsigned char *)(v1 + 49) = 1;
        goto LABEL_180;
      }
      *(void *)(v1 + 40) = v36 + 1;
      *(void *)(v1 + 16) = v16;
      if (v36 + 1 >= v38 || *(unsigned char *)(v37 + v36 + 1) != 76) {
        goto LABEL_38;
      }
      *(void *)(v1 + 40) = v36 + 2;
      unint64_t result = sub_1CC6C0FC0(v1);
      if (result)
      {
        uint64_t v52 = result;
        if (!*(unsigned char *)(v1 + 49) && *(unsigned char *)(v1 + 48))
        {
          sub_1CD5EFF98((void *)(v1 + 56), 3);
          uint64_t v65 = *(void *)(v1 + 56) + *(void *)(v1 + 64);
          *(unsigned char *)(v65 + 2) = 32;
          *(_WORD *)uint64_t v65 = 11040;
          *(void *)(v1 + 64) += 3;
        }
        unint64_t result = (unint64_t)sub_1CC6C14F8((void *)v1, v52);
      }
      goto LABEL_180;
    case 'F':
      uint64_t v17 = *(void *)(v1 + 16);
      unint64_t result = (unint64_t)sub_1CC6C1750(v1);
      if (*(unsigned char *)(v1 + 49)) {
        goto LABEL_40;
      }
      unint64_t v46 = *(void *)(v1 + 40);
      uint64_t v47 = *(void *)(v1 + 24);
      unint64_t v48 = *(void *)(v1 + 32) - v47;
      if (v46 >= v48) {
        goto LABEL_159;
      }
      if (*(unsigned char *)(v47 + v46) != 85) {
        goto LABEL_159;
      }
      *(void *)(v1 + 40) = ++v46;
      if (!*(unsigned char *)(v1 + 48)) {
        goto LABEL_159;
      }
      unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 7);
      int v53 = (_DWORD *)(*(void *)(v1 + 56) + *(void *)(v1 + 64));
      *(_DWORD *)((char *)v53 + 3) = 543516257;
      *int v53 = 1634954869;
      *(void *)(v1 + 64) += 7;
      if (*(unsigned char *)(v1 + 49)) {
        goto LABEL_40;
      }
      unint64_t v46 = *(void *)(v1 + 40);
      uint64_t v47 = *(void *)(v1 + 24);
      unint64_t v48 = *(void *)(v1 + 32) - v47;
LABEL_159:
      if (v46 >= v48 || *(unsigned char *)(v47 + v46) != 75) {
        goto LABEL_206;
      }
      unint64_t v49 = v46 + 1;
      *(void *)(v1 + 40) = v49;
      if (!*(unsigned char *)(v1 + 48)) {
        goto LABEL_162;
      }
      unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 8);
      *(void *)(*(void *)(v1 + 56) + *(void *)(v1 + 64)) = 0x22206E7265747865;
      *(void *)(v1 + 64) += 8;
      if (*(unsigned char *)(v1 + 49)) {
        goto LABEL_194;
      }
      unint64_t v49 = *(void *)(v1 + 40);
      uint64_t v47 = *(void *)(v1 + 24);
      unint64_t v48 = *(void *)(v1 + 32) - v47;
LABEL_162:
      if (v49 >= v48 || *(unsigned char *)(v47 + v49) != 67)
      {
LABEL_194:
        unint64_t result = sub_1CC6BFE70((uint64_t)&v67, v1);
        if (v69) {
          *(unsigned char *)(v1 + 49) = 1;
        }
        uint64_t v54 = v67;
        for (uint64_t i = v68; v54 != i; ++v54)
        {
          if (*v54 == 95) {
            char v56 = 45;
          }
          else {
            char v56 = *v54;
          }
          if (!*(unsigned char *)(v1 + 49) && *(unsigned char *)(v1 + 48))
          {
            unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 1);
            uint64_t v57 = *(void *)(v1 + 56);
            uint64_t v58 = *(void *)(v1 + 64);
            *(void *)(v1 + 64) = v58 + 1;
            *(unsigned char *)(v57 + v58) = v56;
          }
        }
      }
      else
      {
        *(void *)(v1 + 40) = v49 + 1;
        if (*(unsigned char *)(v1 + 48))
        {
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 1);
          *(unsigned char *)(*(void *)(v1 + 56) + (*(void *)(v1 + 64))++) = 67;
        }
      }
      if (*(unsigned char *)(v1 + 49)) {
        goto LABEL_40;
      }
      if (*(unsigned char *)(v1 + 48))
      {
        unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 2);
        *(_WORD *)(*(void *)(v1 + 56) + *(void *)(v1 + 64)) = 8226;
        *(void *)(v1 + 64) += 2;
        if (*(unsigned char *)(v1 + 49)) {
          goto LABEL_40;
        }
      }
LABEL_206:
      if (*(unsigned char *)(v1 + 48))
      {
        unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 3);
        uint64_t v64 = *(void *)(v1 + 56) + *(void *)(v1 + 64);
        *(unsigned char *)(v64 + 2) = 40;
        *(_WORD *)uint64_t v64 = 28262;
        *(void *)(v1 + 64) += 3;
        if (*(unsigned char *)(v1 + 49)) {
          goto LABEL_40;
        }
      }
      uint64_t v59 = 0;
      while (1)
      {
        unint64_t v60 = *(void *)(v1 + 40);
        uint64_t v61 = *(void *)(v1 + 24);
        unint64_t v62 = *(void *)(v1 + 32) - v61;
        if (v60 < v62 && *(unsigned char *)(v61 + v60) == 69) {
          break;
        }
        if (v59 && *(unsigned char *)(v1 + 48))
        {
          sub_1CD5EFF98((void *)(v1 + 56), 2);
          *(_WORD *)(*(void *)(v1 + 56) + *(void *)(v1 + 64)) = 8236;
          *(void *)(v1 + 64) += 2;
        }
        unint64_t result = sub_1CC6BFFDC(v1);
        --v59;
        if (*(unsigned char *)(v1 + 49)) {
          goto LABEL_40;
        }
      }
      unint64_t v63 = v60 + 1;
      *(void *)(v1 + 40) = v63;
      if (!*(unsigned char *)(v1 + 48)) {
        goto LABEL_216;
      }
      unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 1);
      *(unsigned char *)(*(void *)(v1 + 56) + (*(void *)(v1 + 64))++) = 41;
      if (*(unsigned char *)(v1 + 49)) {
        goto LABEL_40;
      }
      unint64_t v63 = *(void *)(v1 + 40);
      uint64_t v61 = *(void *)(v1 + 24);
      unint64_t v62 = *(void *)(v1 + 32) - v61;
LABEL_216:
      if (v63 >= v62 || *(unsigned char *)(v61 + v63) != 117)
      {
        if (*(unsigned char *)(v1 + 48))
        {
          sub_1CD5EFF98((void *)(v1 + 56), 4);
          *(_DWORD *)(*(void *)(v1 + 56) + *(void *)(v1 + 64)) = 540945696;
          *(void *)(v1 + 64) += 4;
        }
LABEL_40:
        unint64_t result = sub_1CC6BFFDC(v1);
        goto LABEL_41;
      }
      *(void *)(v1 + 40) = v63 + 1;
LABEL_41:
      *(void *)(v1 + 16) = v17;
      goto LABEL_180;
    case 'O':
      if (v3 >= v5 || !*(unsigned char *)(v1 + 48)) {
        goto LABEL_179;
      }
      sub_1CD5EFF98((void *)(v1 + 56), 5);
      uint64_t v18 = *(void *)(v1 + 56) + *(void *)(v1 + 64);
      *(unsigned char *)(v18 + 4) = 32;
      *(_DWORD *)uint64_t v18 = 1953852714;
      uint64_t v19 = *(void *)(v1 + 64) + 5;
      goto LABEL_183;
    case 'P':
      if (v3 >= v5 || !*(unsigned char *)(v1 + 48)) {
        goto LABEL_179;
      }
      sub_1CD5EFF98((void *)(v1 + 56), 7);
      uint64_t v20 = (_DWORD *)(*(void *)(v1 + 56) + *(void *)(v1 + 64));
      *(_DWORD *)((char *)v20 + 3) = 544502638;
      _DWORD *v20 = 1852793642;
      uint64_t v19 = *(void *)(v1 + 64) + 7;
      goto LABEL_183;
    case 'Q':
    case 'R':
      if (v3 >= v5) {
        goto LABEL_176;
      }
      if (!*(unsigned char *)(v1 + 48)) {
        goto LABEL_15;
      }
      sub_1CD5EFF98((void *)(v1 + 56), 1);
      uint64_t v50 = *(void *)(v1 + 56);
      uint64_t v51 = *(void *)(v1 + 64);
      *(void *)(v1 + 64) = v51 + 1;
      *(unsigned char *)(v50 + v51) = 38;
      if (!*(unsigned char *)(v1 + 49))
      {
        unint64_t v7 = *(void *)(v1 + 40);
        uint64_t v4 = *(void *)(v1 + 24);
        unint64_t v5 = *(void *)(v1 + 32) - v4;
LABEL_15:
        if (v7 < v5 && *(unsigned char *)(v4 + v7) == 76)
        {
          *(void *)(v1 + 40) = v7 + 1;
          unint64_t v12 = sub_1CC6C0FC0(v1);
          if (v12)
          {
            sub_1CC6C14F8((void *)v1, v12);
            if (!*(unsigned char *)(v1 + 49))
            {
              if (*(unsigned char *)(v1 + 48))
              {
                sub_1CD5EFF98((void *)(v1 + 56), 1);
                uint64_t v13 = *(void *)(v1 + 56);
                uint64_t v14 = *(void *)(v1 + 64);
                *(void *)(v1 + 64) = v14 + 1;
                *(unsigned char *)(v13 + v14) = 32;
              }
            }
          }
        }
      }
LABEL_176:
      if (v8 == 81 && !*(unsigned char *)(v1 + 49) && *(unsigned char *)(v1 + 48))
      {
        sub_1CD5EFF98((void *)(v1 + 56), 4);
        *(_DWORD *)(*(void *)(v1 + 56) + *(void *)(v1 + 64)) = 544503149;
        uint64_t v19 = *(void *)(v1 + 64) + 4;
LABEL_183:
        *(void *)(v1 + 64) = v19;
      }
LABEL_179:
      unint64_t result = sub_1CC6BFFDC(v1);
      goto LABEL_180;
    case 'S':
      if (v3 < v5 && *(unsigned char *)(v1 + 48))
      {
        sub_1CD5EFF98((void *)(v1 + 56), 1);
        *(unsigned char *)(*(void *)(v1 + 56) + (*(void *)(v1 + 64))++) = 91;
      }
      unint64_t result = sub_1CC6BFFDC(v1);
LABEL_52:
      if (*(unsigned char *)(v1 + 49) || !*(unsigned char *)(v1 + 48)) {
        goto LABEL_180;
      }
      unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 1);
      uint64_t v21 = *(void *)(v1 + 56);
      uint64_t v22 = *(void *)(v1 + 64);
      char v23 = 93;
      goto LABEL_169;
    case 'T':
      if (v3 >= v5) {
        goto LABEL_58;
      }
      if (*(unsigned char *)(v1 + 48))
      {
        unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 1);
        *(unsigned char *)(*(void *)(v1 + 56) + (*(void *)(v1 + 64))++) = 40;
        int v6 = *(unsigned __int8 *)(v1 + 49);
LABEL_58:
        if (v6) {
          goto LABEL_180;
        }
      }
      uint64_t v24 = 1;
      break;
    default:
      *(void *)(v1 + 40) = v3;
      unint64_t result = sub_1CC6BF220(v1, 1, 0);
      goto LABEL_180;
  }
  while (1)
  {
    unint64_t v25 = *(void *)(v1 + 40);
    uint64_t v26 = *(void *)(v1 + 24);
    if (v25 < *(void *)(v1 + 32) - v26 && *(unsigned char *)(v26 + v25) == 69) {
      break;
    }
    if (--v24 && *(unsigned char *)(v1 + 48))
    {
      sub_1CD5EFF98((void *)(v1 + 56), 2);
      *(_WORD *)(*(void *)(v1 + 56) + *(void *)(v1 + 64)) = 8236;
      *(void *)(v1 + 64) += 2;
    }
    unint64_t result = sub_1CC6BFFDC(v1);
    if (*(unsigned char *)(v1 + 49)) {
      goto LABEL_180;
    }
  }
  *(void *)(v1 + 40) = v25 + 1;
  if (v24)
  {
    if (*(unsigned char *)(v1 + 48)) {
      goto LABEL_168;
    }
  }
  else if (*(unsigned char *)(v1 + 48))
  {
    unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 1);
    *(unsigned char *)(*(void *)(v1 + 56) + (*(void *)(v1 + 64))++) = 44;
    if (!*(unsigned char *)(v1 + 49))
    {
      if (*(unsigned char *)(v1 + 48))
      {
LABEL_168:
        unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 1);
        uint64_t v21 = *(void *)(v1 + 56);
        uint64_t v22 = *(void *)(v1 + 64);
        char v23 = 41;
LABEL_169:
        *(unsigned char *)(v21 + v22) = v23;
        uint64_t v34 = *(void *)(v1 + 64) + 1;
LABEL_170:
        *(void *)(v1 + 64) = v34;
      }
    }
  }
LABEL_180:
  *(void *)(v1 + 8) = v2;
  return result;
}

unint64_t sub_1CC6C0FC0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 49)) {
    goto LABEL_20;
  }
  unint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 24);
  unint64_t v3 = *(void *)(a1 + 32) - v2;
  if (v1 >= v3) {
    goto LABEL_20;
  }
  if (*(unsigned char *)(v2 + v1) != 95)
  {
    unint64_t v5 = 0;
    if (v1 > v3) {
      unint64_t v3 = *(void *)(a1 + 40);
    }
    while (1)
    {
      unint64_t v6 = v1 + 1;
      *(void *)(a1 + 40) = v1 + 1;
      uint64_t v7 = *(char *)(v2 + v1);
      if (v7 == 95) {
        break;
      }
      if ((v7 - 48) >= 0xAu)
      {
        if ((v7 - 97) >= 0x1Au)
        {
          if ((v7 - 65) >= 0x1Au) {
            goto LABEL_20;
          }
          uint64_t v8 = -29;
        }
        else
        {
          uint64_t v8 = -87;
        }
      }
      else
      {
        uint64_t v8 = -48;
      }
      if (v5 < 0x421084210842109)
      {
        uint64_t v9 = v8 + v7;
        uint64_t v10 = 62 * v5;
        if (!__CFADD__(v9, v10))
        {
          unint64_t v5 = v9 + v10;
          unint64_t v1 = v6;
          if (v3 != v6) {
            continue;
          }
        }
      }
      goto LABEL_20;
    }
    if (v5 != -1) {
      return v5 + 1;
    }
LABEL_20:
    uint64_t v4 = 0;
    *(unsigned char *)(a1 + 49) = 1;
    return v4;
  }
  uint64_t v4 = 0;
  *(void *)(a1 + 40) = v1 + 1;
  return v4;
}

uint64_t sub_1CC6C10C0(int a1, _DWORD *a2)
{
  uint64_t v2 = a1 - 97;
  if (v2 > 0x19 || ((0x3BCFBBFu >> v2) & 1) == 0) {
    return 0;
  }
  *a2 = dword_1CFB1BD60[v2];
  return 1;
}

unint64_t sub_1CC6C1100(unint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 49) || (unint64_t v2 = *(void *)(result + 8), v2 >= *(void *)result))
  {
    *(unsigned char *)(result + 49) = 1;
    return result;
  }
  *(void *)(result + 8) = v2 + 1;
  unint64_t v3 = *(void *)(result + 40);
  uint64_t v4 = *(void *)(result + 24);
  unint64_t v5 = *(void *)(result + 32) - v4;
  if (v3 >= v5) {
    goto LABEL_37;
  }
  unint64_t v6 = v3 + 1;
  *(void *)(result + 40) = v3 + 1;
  int v7 = *(char *)(v4 + v3);
  int v29 = 0;
  unint64_t result = sub_1CC6C10C0(v7, &v29);
  if ((result & 1) == 0)
  {
    if (v7 == 66)
    {
      unint64_t result = sub_1CC6C0FC0(v1);
      if (!*(unsigned char *)(v1 + 49))
      {
        unint64_t v10 = *(void *)(v1 + 40);
        if (result < v10)
        {
          if (*(unsigned char *)(v1 + 48))
          {
            *(void *)(v1 + 40) = result;
            unint64_t result = sub_1CC6C1100(v1);
            *(void *)(v1 + 40) = v10;
          }
          goto LABEL_38;
        }
      }
    }
    goto LABEL_37;
  }
  if ((v29 - 2) < 0xC)
  {
    if (v6 < v5 && *(unsigned char *)(v4 + v6) == 110)
    {
      *(void *)(v1 + 40) = v3 + 2;
      if (*(unsigned char *)(v1 + 48))
      {
        sub_1CD5EFF98((void *)(v1 + 56), 1);
        uint64_t v22 = *(void *)(v1 + 56);
        uint64_t v23 = *(void *)(v1 + 64);
        *(void *)(v1 + 64) = v23 + 1;
        *(unsigned char *)(v22 + v23) = 45;
      }
    }
    uint64_t v30 = 0;
    __int16 v31 = 0;
    unint64_t result = sub_1CC6C1654(v1, &v30);
    uint64_t v9 = v30;
    uint64_t v8 = v31;
    if ((unint64_t)(v31 - v30) <= 0x10)
    {
      if (!*(unsigned char *)(v1 + 49))
      {
        if (*(unsigned char *)(v1 + 48)) {
          unint64_t result = (unint64_t)sub_1CD5F2448((void *)(v1 + 56), result, 0);
        }
      }
      goto LABEL_38;
    }
    if (!*(unsigned char *)(v1 + 49) && *(unsigned char *)(v1 + 48))
    {
      sub_1CD5EFF98((void *)(v1 + 56), 2);
      *(_WORD *)(*(void *)(v1 + 56) + *(void *)(v1 + 64)) = 30768;
      *(void *)(v1 + 64) += 2;
    }
    int v11 = (unsigned char *)v1;
    unint64_t v12 = v9;
    uint64_t v13 = v8;
    goto LABEL_24;
  }
  if (v29)
  {
    if (v29 != 1)
    {
      if (v29 == 17)
      {
        if (!*(unsigned char *)(v1 + 48)) {
          goto LABEL_38;
        }
        unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 1);
        uint64_t v14 = *(void *)(v1 + 56);
        uint64_t v15 = *(void *)(v1 + 64);
        *(void *)(v1 + 64) = v15 + 1;
        char v16 = 95;
LABEL_30:
        *(unsigned char *)(v14 + v15) = v16;
        goto LABEL_38;
      }
LABEL_37:
      *(unsigned char *)(v1 + 49) = 1;
      goto LABEL_38;
    }
    uint64_t v30 = 0;
    __int16 v31 = 0;
    unint64_t result = sub_1CC6C1654(v1, &v30);
    if (*(unsigned char *)(v1 + 49)) {
      goto LABEL_37;
    }
    uint64_t v19 = v30;
    uint64_t v18 = v31;
    if ((unint64_t)(v31 - v30) >= 7) {
      goto LABEL_37;
    }
    uint64_t v20 = result;
    unint64_t result = (unint64_t)sub_1CC6BF924((unsigned char *)v1, "'", "");
    if (v20 > 33)
    {
      switch(v20)
      {
        case '""':
          uint64_t v21 = "\"";
          uint64_t v24 = "";
LABEL_55:
          unint64_t result = (unint64_t)sub_1CC6BF924((unsigned char *)v1, v21, v24);
LABEL_56:
          if (*(unsigned char *)(v1 + 49) || !*(unsigned char *)(v1 + 48)) {
            goto LABEL_38;
          }
          unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 1);
          uint64_t v14 = *(void *)(v1 + 56);
          uint64_t v15 = *(void *)(v1 + 64);
          *(void *)(v1 + 64) = v15 + 1;
          char v16 = 39;
          goto LABEL_30;
        case '\'':
          uint64_t v21 = "\\'";
          goto LABEL_54;
        case '\\':
          uint64_t v21 = "\\\\"";
          goto LABEL_54;
      }
    }
    else
    {
      switch(v20)
      {
        case 9:
          uint64_t v21 = "\\t";
          goto LABEL_54;
        case 10:
          uint64_t v21 = "\\n";
          goto LABEL_54;
        case 13:
          uint64_t v21 = "\\r";
LABEL_54:
          uint64_t v24 = v21 + 2;
          goto LABEL_55;
      }
    }
    if ((unint64_t)(v20 - 32) > 0x5E)
    {
      sub_1CC6BF924((unsigned char *)v1, "\\u{", "");
      unint64_t result = (unint64_t)sub_1CC6BF924((unsigned char *)v1, v19, v18);
      if (*(unsigned char *)(v1 + 49)) {
        goto LABEL_38;
      }
      if (*(unsigned char *)(v1 + 48))
      {
        unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 1);
        uint64_t v27 = *(void *)(v1 + 56);
        uint64_t v28 = *(void *)(v1 + 64);
        *(void *)(v1 + 64) = v28 + 1;
        *(unsigned char *)(v27 + v28) = 125;
      }
    }
    else
    {
      if (*(unsigned char *)(v1 + 49)) {
        goto LABEL_38;
      }
      if (*(unsigned char *)(v1 + 48))
      {
        unint64_t result = (unint64_t)sub_1CD5EFF98((void *)(v1 + 56), 1);
        uint64_t v25 = *(void *)(v1 + 56);
        uint64_t v26 = *(void *)(v1 + 64);
        *(void *)(v1 + 64) = v26 + 1;
        *(unsigned char *)(v25 + v26) = v20;
      }
    }
    goto LABEL_56;
  }
  uint64_t v30 = 0;
  __int16 v31 = 0;
  unint64_t result = sub_1CC6C1654(v1, &v30);
  if (v31 - v30 != 1) {
    goto LABEL_37;
  }
  int v17 = *v30;
  if (v17 == 49)
  {
    unint64_t v12 = "true";
    uint64_t v13 = "";
  }
  else
  {
    if (v17 != 48) {
      goto LABEL_37;
    }
    unint64_t v12 = "false";
    uint64_t v13 = "";
  }
  int v11 = (unsigned char *)v1;
LABEL_24:
  unint64_t result = (unint64_t)sub_1CC6BF924(v11, v12, v13);
LABEL_38:
  *(void *)(v1 + 8) = v2;
  return result;
}

void *sub_1CC6C14F8(void *result, uint64_t a2)
{
  unint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = result[2];
    if (a2 - 1 >= v3)
    {
      *((unsigned char *)result + 49) = 1;
    }
    else
    {
      unint64_t v4 = v3 - a2;
      if (!*((unsigned char *)result + 49) && *((unsigned char *)result + 48))
      {
        unint64_t result = sub_1CD5EFF98(result + 7, 1);
        uint64_t v7 = v2[7];
        uint64_t v8 = v2[8];
        v2[8] = v8 + 1;
        *(unsigned char *)(v7 + v8) = 39;
      }
      if (v4 > 0x19)
      {
        if (!*((unsigned char *)v2 + 49))
        {
          if (*((unsigned char *)v2 + 48))
          {
            unint64_t result = sub_1CD5EFF98(v2 + 7, 1);
            uint64_t v9 = v2[7];
            uint64_t v10 = v2[8];
            v2[8] = v10 + 1;
            *(unsigned char *)(v9 + v10) = 122;
            if (!*((unsigned char *)v2 + 49))
            {
              if (*((unsigned char *)v2 + 48))
              {
                return sub_1CD5F2448(v2 + 7, v4 - 25, 0);
              }
            }
          }
        }
      }
      else if (!*((unsigned char *)v2 + 49))
      {
        if (*((unsigned char *)v2 + 48))
        {
          unint64_t result = sub_1CD5EFF98(v2 + 7, 1);
          uint64_t v5 = v2[7];
          uint64_t v6 = v2[8];
          v2[8] = v6 + 1;
          *(unsigned char *)(v5 + v6) = v4 + 97;
        }
      }
    }
  }
  else
  {
    return sub_1CC6BF924(result, "'_", "");
  }
  return result;
}

uint64_t sub_1CC6C1654(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 49)) {
    goto LABEL_21;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  unint64_t v2 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = v3 - v4;
  if (v2 >= v3 - v4) {
    goto LABEL_21;
  }
  uint64_t v6 = v4 + v2;
  int v7 = *(unsigned __int8 *)(v4 + v2);
  if ((v7 - 48) >= 0xA && (v7 - 97) > 5) {
    goto LABEL_21;
  }
  if (v7 != 48)
  {
    uint64_t v10 = 0;
    unint64_t v9 = *(void *)(a1 + 40);
    while (1)
    {
      unint64_t v11 = v9 + 1;
      if (*(unsigned char *)(v4 + v9) == 95) {
        goto LABEL_11;
      }
      *(void *)(a1 + 40) = v11;
      uint64_t v14 = *(unsigned __int8 *)(v4 + v9);
      uint64_t v15 = 16 * v10;
      if ((v14 - 48) > 9)
      {
        if ((v14 - 97) > 5) {
          goto LABEL_21;
        }
        uint64_t v10 = (v14 - 87) + v15;
      }
      else
      {
        uint64_t v10 = v15 + v14 - 48;
      }
      unint64_t v9 = v11;
      if (v11 >= v5) {
        goto LABEL_21;
      }
    }
  }
  unint64_t v9 = v2 + 1;
  *(void *)(a1 + 40) = v2 + 1;
  if (v2 + 1 >= v5 || *(unsigned char *)(v4 + v9) != 95)
  {
LABEL_21:
    uint64_t v10 = 0;
    *(unsigned char *)(a1 + 49) = 1;
    *a2 = 0;
    a2[1] = 0;
    return v10;
  }
  uint64_t v10 = 0;
  unint64_t v11 = v2 + 2;
LABEL_11:
  *(void *)(a1 + 40) = v11;
  unint64_t v12 = v9 - v2;
  unint64_t v13 = v3 - (v2 + v4);
  if (v13 >= v12) {
    unint64_t v13 = v12;
  }
  *a2 = v6;
  a2[1] = v6 + v13;
  return v10;
}

unsigned char *sub_1CC6C1750(uint64_t a1)
{
  unint64_t result = (unsigned char *)sub_1CC6BF99C(a1, 0x47u);
  if (*(unsigned char *)(a1 + 49)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = result == 0;
  }
  if (!v3)
  {
    uint64_t v4 = result;
    if ((unint64_t)result >= *(void *)(a1 + 32) - (*(void *)(a1 + 16) + *(void *)(a1 + 24)))
    {
      *(unsigned char *)(a1 + 49) = 1;
    }
    else
    {
      sub_1CC6BF924((unsigned char *)a1, "for<", "");
      unint64_t v5 = 0;
      do
      {
        ++*(void *)(a1 + 16);
        if (v5) {
          sub_1CC6BF924((unsigned char *)a1, ", ", "");
        }
        sub_1CC6C14F8((void *)a1, 1);
        ++v5;
      }
      while (v4 != v5);
      return sub_1CC6BF924((unsigned char *)a1, "> ", "");
    }
  }
  return result;
}

char *llvm::dlangDemangle(char *this, const char *a2)
{
  if (this)
  {
    unint64_t v2 = this;
    if (strncmp(this, "_D", 2uLL)) {
      return 0;
    }
    uint64_t v16 = -1;
    int v17 = 1;
    this = (char *)malloc_type_malloc(0x400uLL, 0x1E4FE0F9uLL);
    if (!this) {
      return this;
    }
    uint64_t v14 = this;
    long long v15 = xmmword_1CFB1BC20;
    if (!strcmp(v2, "_Dmain"))
    {
      sub_1CD5EFF98(&v14, 6);
      unint64_t v11 = (char *)v14 + v15;
      *((_WORD *)v11 + 2) = 28265;
      *(_DWORD *)unint64_t v11 = 1634541636;
      *(void *)&long long v15 = v15 + 6;
      if ((void)v15) {
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v12 = v2;
      uint64_t v3 = 0;
      int v13 = strlen(v2);
      uint64_t v4 = (char *)(v2 + 2);
      uint64_t v5 = MEMORY[0x1E4F14390];
      do
      {
        if (*v4 == 48)
        {
          do
            int v6 = *++v4;
          while (v6 == 48);
        }
        else
        {
          if (v3)
          {
            sub_1CD5EFF98(&v14, 1);
            uint64_t v9 = v15;
            *(void *)&long long v15 = v15 + 1;
            *((unsigned char *)v14 + v9) = 46;
          }
          int v7 = sub_1CC6C1B00(&v12, &v14, (unsigned __int8 *)v4);
          if (!v7) {
            goto LABEL_25;
          }
          uint64_t v4 = v7;
          uint64_t v3 = 1;
        }
        uint64_t v18 = 0;
        if (*v4 < 0) {
          break;
        }
        uint64_t v8 = *v4;
      }
      while ((*(_DWORD *)(v5 + 4 * v8 + 60) & 0x400) != 0
           || v8 == 81
           && sub_1CC6C1FD4(v4 + 1, &v18)
           && v18 <= v4 - v12
           && (v4[-v18] & 0x80000000) == 0
           && (*(_DWORD *)(v5 + 4 * v4[-v18] + 60) & 0x400) != 0);
      if (*v4 == 90)
      {
        uint64_t v10 = v4 + 1;
LABEL_23:
        if (*v10 || !(void)v15) {
          goto LABEL_25;
        }
LABEL_29:
        sub_1CD5EFF98(&v14, 1);
        *((unsigned char *)v14 + v15) = 0;
        return (char *)v14;
      }
      uint64_t v10 = sub_1CC6C1A4C((uint64_t)&v12, v4);
      if (v10) {
        goto LABEL_23;
      }
    }
LABEL_25:
    free(v14);
    return 0;
  }
  return this;
}

char *sub_1CC6C1A4C(uint64_t a1, char *a2)
{
  int v2 = *a2;
  if (!*a2) {
    return 0;
  }
  if (v2 != 81)
  {
    if (v2 == 105) {
      return a2 + 1;
    }
    else {
      return 0;
    }
  }
  int v6 = &a2[-*(void *)a1];
  uint64_t v7 = *(int *)(a1 + 8);
  if ((uint64_t)v6 >= v7) {
    return 0;
  }
  *(_DWORD *)(a1 + 8) = v6;
  uint64_t v11 = 0;
  uint64_t v8 = sub_1CC6C1FD4(a2 + 1, &v11);
  if (!v8 || v11 > (uint64_t)&a2[-*(void *)a1]) {
    return 0;
  }
  uint64_t v9 = v8;
  uint64_t v10 = sub_1CC6C1A4C(a1, &a2[-v11]);
  *(_DWORD *)(a1 + 8) = v7;
  if (v10) {
    return v9;
  }
  else {
    return 0;
  }
}

char *sub_1CC6C1B00(void *a1, void *a2, unsigned __int8 *a3)
{
  while (1)
  {
    if (!a3) {
      return 0;
    }
    uint64_t v3 = a3;
    if (!*a3) {
      return 0;
    }
    uint64_t v4 = a2;
    uint64_t v5 = a1;
    if (*a3 == 81) {
      break;
    }
    uint64_t v16 = 0;
    uint64_t v10 = sub_1CC6C1CC4(a3, (unint64_t *)&v16);
    unint64_t result = 0;
    if (!v10) {
      return result;
    }
    size_t v12 = v16;
    if (!v16) {
      return result;
    }
    if (strlen(v10) < v16) {
      return 0;
    }
    if ((unint64_t)v16 < 4 || *v10 != 95 || v10[1] != 95 || v10[2] != 83) {
      goto LABEL_23;
    }
    int v13 = v10 + 3;
    a3 = &v10[v16];
    if (v16 >= 4)
    {
      do
      {
        if ((char)*v13 < 0) {
          break;
        }
        if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *v13 + 60) & 0x400) == 0) {
          break;
        }
        ++v13;
      }
      while (v13 < a3);
    }
    if (a3 != v13)
    {
LABEL_23:
      return sub_1CC6C1D48(v4, v10, v12);
    }
    a1 = v5;
    a2 = v4;
  }
  size_t v15 = 0;
  uint64_t v16 = 0;
  int v6 = sub_1CC6C1FD4((char *)a3 + 1, &v16);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = (uint64_t)&v3[-*v5];
    if (v16 <= v8) {
      int v6 = (char *)&v3[-v16];
    }
    else {
      int v6 = 0;
    }
    if (v16 <= v8) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  unint64_t result = sub_1CC6C1CC4(v6, &v15);
  if (result)
  {
    uint64_t v14 = result;
    if (strlen(result) < v15) {
      return 0;
    }
    if (sub_1CC6C1D48(v4, v14, v15)) {
      return v9;
    }
    else {
      return 0;
    }
  }
  return result;
}

unsigned char *sub_1CC6C1CC4(unsigned char *result, unint64_t *a2)
{
  if (result)
  {
    if (((char)*result & 0x80000000) == 0)
    {
      uint64_t v2 = *result;
      if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v2 + 60) & 0x400) != 0)
      {
        unint64_t v3 = 0;
        while (v3 <= (0x10000002FLL - v2) / 0xAuLL)
        {
          ++result;
          unint64_t v3 = v2 + 10 * v3 - 48;
          if ((char)*result < 0) {
            goto LABEL_10;
          }
          uint64_t v2 = *result;
          if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v2 + 60) & 0x400) == 0)
          {
            if (!*result) {
              return 0;
            }
LABEL_10:
            *a2 = v3;
            return result;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

char *sub_1CC6C1D48(void *a1, char *__s1, size_t a3)
{
  switch(a3)
  {
    case 6uLL:
      if (!strncmp(__s1, "__initZ", 7uLL))
      {
        sub_1CD5EFF98(a1, 16);
        memmove((void *)(*a1 + 16), (const void *)*a1, a1[1]);
        *(_OWORD *)*a1 = *(_OWORD *)"initializer for ";
        uint64_t v8 = a1[1] + 15;
      }
      else
      {
        if (strncmp(__s1, "__vtblZ", 7uLL)) {
          goto LABEL_15;
        }
        sub_1CD5EFF98(a1, 11);
        memmove((void *)(*a1 + 11), (const void *)*a1, a1[1]);
        uint64_t v9 = *a1;
        *(void *)uint64_t v9 = *(void *)"vtable for ";
        *(_DWORD *)(v9 + 7) = 544370534;
        uint64_t v8 = a1[1] + 10;
      }
      a1[1] = v8;
      int v6 = __s1 + 6;
      break;
    case 7uLL:
      if (strncmp(__s1, "__ClassZ", 8uLL)) {
        goto LABEL_15;
      }
      sub_1CD5EFF98(a1, 14);
      memmove((void *)(*a1 + 14), (const void *)*a1, a1[1]);
      qmemcpy((void *)*a1, "ClassInfo for ", 14);
      a1[1] += 13;
      int v6 = __s1 + 7;
      break;
    case 0xBuLL:
      if (strncmp(__s1, "__InterfaceZ", 0xCuLL)) {
        goto LABEL_15;
      }
      sub_1CD5EFF98(a1, 14);
      memmove((void *)(*a1 + 14), (const void *)*a1, a1[1]);
      qmemcpy((void *)*a1, "Interface for ", 14);
      a1[1] += 13;
      int v6 = __s1 + 11;
      break;
    case 0xCuLL:
      if (strncmp(__s1, "__ModuleInfoZ", 0xDuLL))
      {
LABEL_15:
        int v6 = &__s1[a3];
        goto LABEL_16;
      }
      sub_1CD5EFF98(a1, 15);
      memmove((void *)(*a1 + 15), (const void *)*a1, a1[1]);
      qmemcpy((void *)*a1, "ModuleInfo for ", 15);
      a1[1] += 14;
      int v6 = __s1 + 12;
      break;
    default:
      int v6 = &__s1[a3];
      if (a3)
      {
LABEL_16:
        sub_1CD5EFF98(a1, a3);
        memcpy((void *)(*a1 + a1[1]), __s1, a3);
        a1[1] += a3;
      }
      break;
  }
  return v6;
}

char *sub_1CC6C1FD4(char *a1, uint64_t *a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = MEMORY[0x1E4F14390];
    if (*a1 < 0)
    {
      if (!__maskrune((char)v4, 0x100uLL)) {
        return 0;
      }
    }
    else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v4 + 60) & 0x100) == 0)
    {
      return 0;
    }
    unint64_t v6 = 0;
    ++v2;
    while (1)
    {
      uint64_t v7 = *(v2 - 1);
      int v8 = *(v2 - 1) < 0 ? __maskrune((char)v7, 0x100uLL) : *(_DWORD *)(v5 + 4 * v7 + 60) & 0x100;
      if (!v8 || v6 > 0x9D89D89D89D89D7) {
        break;
      }
      uint64_t v10 = 26 * v6;
      uint64_t v11 = *(v2 - 1);
      if ((v11 - 97) <= 0x19u)
      {
        uint64_t v12 = (v11 - 97) + v10;
        if (v12 < 1) {
          return 0;
        }
        *a2 = v12;
        return v2;
      }
      unint64_t v6 = v10 + v11 - 65;
      ++v2;
    }
    return 0;
  }
  return v2;
}

uint64_t llvm::omp::getOpenMPDirectiveKind(char *__s1, uint64_t a2)
{
  if (a2 == 8)
  {
    switch(*(void *)__s1)
    {
      case 0x657461636F6C6C61:
        uint64_t v5 = 0x100000000;
        goto LABEL_610;
      case 0x6C61636974697263:
        uint64_t v5 = 0x100000009;
        goto LABEL_610;
      case 0x646D697320726F66:
        uint64_t v5 = 0x100000022;
        goto LABEL_610;
      case 0x6C656C6C61726170:
        uint64_t v5 = 0x100000028;
        goto LABEL_610;
      case 0x7365726975716572:
        uint64_t v5 = 0x100000032;
        goto LABEL_610;
      case 0x736E6F6974636573:
        uint64_t v5 = 0x100000035;
        goto LABEL_610;
      case 0x706F6F6C6B736174:
        uint64_t v5 = 0x10000004CLL;
        goto LABEL_610;
      case 0x746961776B736174:
        uint64_t v5 = 0x10000004ELL;
        goto LABEL_610;
    }
    int v6 = 0;
    int v7 = 0;
    int v8 = 0;
    uint64_t v5 = 0;
    int v9 = 1;
LABEL_540:
    if (a2 == 5 && v9)
    {
      if (*(_DWORD *)__s1 == 1835099508 && __s1[4] == 115)
      {
        uint64_t v5 = 0x100000050;
        goto LABEL_610;
      }
    }
    else
    {
LABEL_548:
      if (v7)
      {
LABEL_549:
        if (*(void *)__s1 == 0x696420736D616574 && *((void *)__s1 + 1) == 0x6574756269727473)
        {
          uint64_t v5 = 0x100000051;
          goto LABEL_610;
        }
      }
    }
    if (v6)
    {
LABEL_554:
      if (*(void *)__s1 == 0x696420736D616574
        && *((void *)__s1 + 1) == 0x6574756269727473
        && *((void *)__s1 + 2) == 0x656C6C6172617020
        && *((_DWORD *)__s1 + 6) == 1868832876)
      {
        uint64_t v54 = 80;
        goto LABEL_609;
      }
    }
    else
    {
      char v126 = v9 ^ 1;
      if (a2 != 33) {
        char v126 = 1;
      }
      if ((v126 & 1) == 0)
      {
        if (!memcmp(__s1, "teams distribute parallel do simd", 0x21uLL))
        {
          uint64_t v54 = 81;
          goto LABEL_609;
        }
        goto LABEL_597;
      }
    }
    if (a2 == 29 && v9)
    {
      if (*(void *)__s1 == 0x696420736D616574
        && *((void *)__s1 + 1) == 0x6574756269727473
        && *((void *)__s1 + 2) == 0x656C6C6172617020
        && *(void *)(__s1 + 21) == 0x726F66206C656C6CLL)
      {
        uint64_t v5 = 0x100000054;
        goto LABEL_610;
      }
    }
    else
    {
      char v130 = v9 ^ 1;
      if (a2 == 34) {
        char v131 = v9 ^ 1;
      }
      else {
        char v131 = 1;
      }
      if (v131)
      {
        if (a2 != 21) {
          char v130 = 1;
        }
        if ((v130 & 1) == 0)
        {
LABEL_200:
          if (*(void *)__s1 != 0x696420736D616574
            || *((void *)__s1 + 1) != 0x6574756269727473
            || *(void *)(__s1 + 13) != 0x646D697320657475)
          {
            goto LABEL_610;
          }
          uint64_t v54 = 84;
          goto LABEL_609;
        }
      }
      else if (!memcmp(__s1, "teams distribute parallel for simd", 0x22uLL))
      {
        uint64_t v5 = 0x100000055;
        goto LABEL_610;
      }
    }
LABEL_597:
    if (!v8
      || (*(void *)__s1 == 0x7270646165726874 ? (BOOL v132 = *(void *)(__s1 + 5) == 0x6574617669727064) : (BOOL v132 = 0),
          !v132))
    {
      uint64_t v133 = v5 & 0x100000000;
      BOOL v134 = (v5 & 0x100000000) == 0;
      if (a2 == 4 && !v133)
      {
        if (*(_DWORD *)__s1 == 1701603700)
        {
          uint64_t v5 = 0x100000058;
        }
        else if (*(_DWORD *)__s1 == 1886351212)
        {
          uint64_t v5 = 0x10000005ELL;
        }
        goto LABEL_610;
      }
LABEL_652:
      BOOL v142 = a2 == 7;
      if (a2 == 7 && v134)
      {
        if (*(_DWORD *)__s1 == 1852534389 && *(_DWORD *)(__s1 + 3) == 1853321070)
        {
          uint64_t v5 = 0x100000059;
          goto LABEL_610;
        }
        BOOL v142 = 1;
        BOOL v134 = 1;
      }
      else
      {
        char v146 = !v134;
        char v147 = a2 != 6 || !v134;
        if ((v147 & 1) == 0)
        {
          if (*(_DWORD *)__s1 == 1869770357 && *((_WORD *)__s1 + 2) == 27756)
          {
            uint64_t v5 = 0x10000005ALL;
          }
          else if (*(_DWORD *)__s1 == 1802723693 && *((_WORD *)__s1 + 2) == 25701)
          {
            uint64_t v5 = 0x10000005FLL;
          }
          goto LABEL_610;
        }
        if (a2 != 9) {
          char v146 = 1;
        }
        if ((v146 & 1) == 0)
        {
          if (*(void *)__s1 == 0x726168736B726F77 && __s1[8] == 101) {
            uint64_t v5 = 0x10000005BLL;
          }
          goto LABEL_610;
        }
        if (a2 == 8 && !v133)
        {
          uint64_t v144 = 0x10000005CLL;
          BOOL v145 = *(void *)__s1 == 0x6863746170736964;
          goto LABEL_723;
        }
      }
      if (v142 && v134)
      {
        uint64_t v144 = 0x10000005DLL;
        BOOL v145 = (*(_DWORD *)__s1 ^ 0x65746E69 | *(_DWORD *)(__s1 + 3) ^ 0x706F7265) == 0;
      }
      else
      {
        char v151 = !v134;
        char v152 = a2 != 13 || !v134;
        if ((v152 & 1) == 0)
        {
          if (*(void *)__s1 == 0x6C656C6C61726170 && *(void *)(__s1 + 5) == 0x706F6F6C206C656CLL) {
            uint64_t v5 = 0x100000060;
          }
          goto LABEL_610;
        }
        if (a2 != 20) {
          char v151 = 1;
        }
        if ((v151 & 1) == 0)
        {
          if (*(void *)__s1 == 0x7020746567726174
            && *((void *)__s1 + 1) == 0x206C656C6C617261
            && *((_DWORD *)__s1 + 4) == 1886351212)
          {
            uint64_t v5 = 0x100000061;
          }
          goto LABEL_610;
        }
        char v156 = !v134;
        if (a2 == 17) {
          char v157 = v156;
        }
        else {
          char v157 = 1;
        }
        if (v157)
        {
          if (a2 != 10) {
            char v156 = 1;
          }
          if (v156) {
            goto LABEL_610;
          }
          uint64_t v158 = *(void *)__s1 ^ 0x6F6C20736D616574 | *((unsigned __int16 *)__s1 + 4) ^ 0x706FLL;
          uint64_t v144 = 0x100000063;
        }
        else
        {
          uint64_t v158 = *(void *)__s1 ^ 0x7420746567726174 | *((void *)__s1 + 1) ^ 0x6F6F6C20736D6165 | __s1[16] ^ 0x70;
          uint64_t v144 = 0x100000062;
        }
        BOOL v145 = v158 == 0;
      }
LABEL_723:
      if (v145) {
        uint64_t v5 = v144;
      }
      goto LABEL_610;
    }
    uint64_t v54 = 85;
LABEL_609:
    uint64_t v5 = v54 | 0x100000002;
    goto LABEL_610;
  }
  int v4 = 0;
  switch(a2)
  {
    case 2:
      if (*(_WORD *)__s1 != 28516) {
        goto LABEL_249;
      }
      uint64_t v5 = 0x100000016;
      goto LABEL_610;
    case 3:
      if (*(_WORD *)__s1 != 28518 || __s1[2] != 114) {
        goto LABEL_249;
      }
      uint64_t v5 = 0x100000021;
      goto LABEL_610;
    case 5:
      if (*(_DWORD *)__s1 != 1937075302 || __s1[4] != 104) {
        goto LABEL_98;
      }
      uint64_t v5 = 0x100000020;
      goto LABEL_610;
    case 6:
      if (*(_DWORD *)__s1 == 1836020833 && *((_WORD *)__s1 + 2) == 25449)
      {
        uint64_t v5 = 0x100000002;
      }
      else if (*(_DWORD *)__s1 == 1668178275 && *((_WORD *)__s1 + 2) == 27749)
      {
        uint64_t v5 = 0x100000007;
      }
      else if (*(_DWORD *)__s1 == 1869636964 && *((_WORD *)__s1 + 2) == 27234)
      {
        uint64_t v5 = 0x10000000FLL;
      }
      else if (*(_DWORD *)__s1 == 543452773 && *((_WORD *)__s1 + 2) == 28516)
      {
        uint64_t v5 = 0x10000001BLL;
      }
      else
      {
        if (*(_DWORD *)__s1 != 1953718637 || *((_WORD *)__s1 + 2) != 29285) {
          goto LABEL_249;
        }
        uint64_t v5 = 0x100000023;
      }
      goto LABEL_610;
    case 7:
      if (*(_DWORD *)__s1 == 1970500449 && *(_DWORD *)(__s1 + 3) == 1936026997)
      {
        int v4 = 0;
        int v9 = 0;
        uint64_t v5 = 0x100000001;
        goto LABEL_251;
      }
      if (*(_DWORD *)__s1 == 1920098658 && *(_DWORD *)(__s1 + 3) == 1919248754)
      {
        uint64_t v5 = 0x100000003;
      }
      else if (*(_DWORD *)__s1 == 1931505508 && *(_DWORD *)(__s1 + 3) == 1684892019)
      {
        uint64_t v5 = 0x100000017;
      }
      else
      {
        if (*(_DWORD *)__s1 != 1701081711 || *(_DWORD *)(__s1 + 3) != 1684370021) {
          goto LABEL_89;
        }
        uint64_t v5 = 0x100000027;
      }
      goto LABEL_610;
    case 10:
      if (*(void *)__s1 == 0x7562697274736964 && *((_WORD *)__s1 + 4) == 25972)
      {
        uint64_t v5 = 0x100000010;
      }
      else
      {
        if (*(void *)__s1 != 0x676E697320646E65 || *((_WORD *)__s1 + 4) != 25964) {
          goto LABEL_98;
        }
        uint64_t v5 = 0x10000001ELL;
      }
      goto LABEL_610;
    case 11:
      if (*(void *)__s1 == 0x7573736120646E65 && *(void *)(__s1 + 3) == 0x73656D7573736120)
      {
        uint64_t v5 = 0x100000018;
      }
      else
      {
        if (*(void *)__s1 != 0x73206F6420646E65 || *(void *)(__s1 + 3) != 0x646D6973206F6420)
        {
LABEL_89:
          int v4 = 0;
          goto LABEL_112;
        }
        uint64_t v5 = 0x10000001CLL;
      }
      goto LABEL_610;
    case 12:
      if (*(void *)__s1 == 0x206572616C636564 && *((_DWORD *)__s1 + 2) == 1684892019)
      {
        uint64_t v5 = 0x10000000CLL;
      }
      else
      {
        if (*(void *)__s1 != 0x7463657320646E65 || *((_DWORD *)__s1 + 2) != 1936617321)
        {
LABEL_98:
          uint64_t v5 = 0;
          int v4 = 0;
          int v9 = 1;
          goto LABEL_262;
        }
        uint64_t v5 = 0x10000001DLL;
      }
      goto LABEL_610;
    case 13:
      if (*(void *)__s1 == 0x7361206E69676562 && *(void *)(__s1 + 5) == 0x73656D7573736120)
      {
        uint64_t v5 = 0x100000004;
      }
      else if (*(void *)__s1 == 0x6B726F7720646E65 && *(void *)(__s1 + 5) == 0x65726168736B726FLL)
      {
        uint64_t v5 = 0x10000001FLL;
      }
      else
      {
        if (*(void *)__s1 != 0x657269646174656DLL || *(void *)(__s1 + 5) != 0x6576697463657269)
        {
          int v4 = 1;
          goto LABEL_112;
        }
        uint64_t v5 = 0x100000026;
      }
      goto LABEL_610;
    case 14:
      if (*(void *)__s1 == 0x206572616C636564 && *(void *)(__s1 + 6) == 0x72657070616D2065)
      {
        uint64_t v5 = 0x10000000ALL;
      }
      else
      {
        if (*(void *)__s1 != 0x206572616C636564 || *(void *)(__s1 + 6) != 0x7465677261742065) {
          goto LABEL_249;
        }
        uint64_t v5 = 0x10000000DLL;
      }
      goto LABEL_610;
    case 15:
      if (*(void *)__s1 == 0x206572616C636564 && *(void *)(__s1 + 7) == 0x746E616972617620)
      {
        uint64_t v5 = 0x10000000ELL;
      }
      else if (*(void *)__s1 == 0x7562697274736964 && *(void *)(__s1 + 7) == 0x646D697320657475)
      {
        uint64_t v5 = 0x100000015;
      }
      else
      {
        if (*(void *)__s1 != 0x742072657473616DLL || *(void *)(__s1 + 7) != 0x706F6F6C6B736174) {
          goto LABEL_249;
        }
        uint64_t v5 = 0x100000024;
      }
      goto LABEL_610;
    case 17:
      if (*(void *)__s1 != 0x206572616C636564 || *((void *)__s1 + 1) != 0x6F69746375646572 || __s1[16] != 110) {
        goto LABEL_249;
      }
      uint64_t v5 = 0x10000000BLL;
      goto LABEL_610;
    case 18:
      if (*(void *)__s1 == 0x616C6C65636E6163
        && *((void *)__s1 + 1) == 0x696F70206E6F6974
        && *((_WORD *)__s1 + 8) == 29806)
      {
        uint64_t v5 = 0x100000008;
      }
      else
      {
        if (*(void *)__s1 != 0x6C63656420646E65
          || *((void *)__s1 + 1) != 0x6772617420657261
          || *((_WORD *)__s1 + 8) != 29797)
        {
          goto LABEL_249;
        }
        uint64_t v5 = 0x100000019;
      }
      goto LABEL_610;
    case 19:
      if (*(void *)__s1 != 0x6C63656420646E65
        || *((void *)__s1 + 1) != 0x6972617620657261
        || *(void *)(__s1 + 11) != 0x746E616972617620)
      {
        goto LABEL_249;
      }
      uint64_t v5 = 0x10000001ALL;
      goto LABEL_610;
    case 20:
      if (*(void *)__s1 == 0x6564206E69676562
        && *((void *)__s1 + 1) == 0x6174206572616C63
        && *((_DWORD *)__s1 + 4) == 1952802674)
      {
        uint64_t v5 = 0x100000005;
      }
      else
      {
        if (*(void *)__s1 != 0x742072657473616DLL
          || *((void *)__s1 + 1) != 0x20706F6F6C6B7361
          || *((_DWORD *)__s1 + 4) != 1684892019)
        {
          goto LABEL_249;
        }
        uint64_t v5 = 0x100000025;
      }
      goto LABEL_610;
    case 21:
      if (*(void *)__s1 != 0x6564206E69676562
        || *((void *)__s1 + 1) != 0x6176206572616C63
        || *(void *)(__s1 + 13) != 0x746E616972617620)
      {
        uint64_t v5 = 0;
        goto LABEL_200;
      }
      uint64_t v5 = 0x100000006;
      goto LABEL_610;
    case 22:
      if (*(void *)__s1 != 0x7562697274736964
        || *((void *)__s1 + 1) != 0x6C61726170206574
        || *(void *)(__s1 + 14) != 0x6F64206C656C6C61)
      {
        goto LABEL_249;
      }
      uint64_t v5 = 0x100000011;
      goto LABEL_610;
    case 23:
      if (*(void *)__s1 != 0x7562697274736964
        || *((void *)__s1 + 1) != 0x6C61726170206574
        || *(void *)(__s1 + 15) != 0x726F66206C656C6CLL)
      {
        goto LABEL_249;
      }
      uint64_t v5 = 0x100000013;
      goto LABEL_610;
    case 27:
      if (*(void *)__s1 != 0x7562697274736964
        || *((void *)__s1 + 1) != 0x6C61726170206574
        || *((void *)__s1 + 2) != 0x73206F64206C656CLL
        || *(void *)(__s1 + 19) != 0x646D6973206F6420)
      {
        goto LABEL_249;
      }
      uint64_t v5 = 0x100000012;
      goto LABEL_610;
    case 28:
      if (*(void *)__s1 != 0x7562697274736964
        || *((void *)__s1 + 1) != 0x6C61726170206574
        || *((void *)__s1 + 2) != 0x20726F66206C656CLL
        || *((_DWORD *)__s1 + 6) != 1684892019)
      {
LABEL_249:
        int v4 = 0;
        goto LABEL_250;
      }
      uint64_t v5 = 0x100000014;
      goto LABEL_610;
    default:
LABEL_112:
      if (a2 == 11)
      {
        if (*(void *)__s1 == 0x6C656C6C61726170 && *(void *)(__s1 + 3) == 0x6F64206C656C6C61)
        {
          uint64_t v5 = 0x100000029;
          goto LABEL_610;
        }
        uint64_t v5 = 0;
        int v31 = 0;
        int v32 = 1;
        goto LABEL_269;
      }
LABEL_250:
      uint64_t v5 = 0;
      int v9 = 1;
LABEL_251:
      if (a2 == 16 && v9)
      {
        if (*(void *)__s1 == 0x6C656C6C61726170 && *((void *)__s1 + 1) == 0x646D6973206F6420)
        {
          uint64_t v5 = 0x10000002ALL;
          goto LABEL_610;
        }
        if (*(void *)__s1 == 0x6520746567726174 && *((void *)__s1 + 1) == 0x6174616420746978)
        {
          uint64_t v5 = 0x10000003BLL;
          goto LABEL_610;
        }
        int v67 = 0;
        int v31 = 0;
        int v7 = 1;
LABEL_313:
        int v9 = 1;
        goto LABEL_314;
      }
LABEL_262:
      if (a2 == 12 && v9)
      {
        if (*(void *)__s1 == 0x6C656C6C61726170 && *((_DWORD *)__s1 + 2) == 1919903264)
        {
          uint64_t v5 = 0x10000002BLL;
          goto LABEL_610;
        }
        int v32 = 0;
        int v31 = 0;
LABEL_269:
        int v9 = 1;
        goto LABEL_270;
      }
      char v70 = v9 ^ 1;
      if (a2 == 17) {
        char v71 = v9 ^ 1;
      }
      else {
        char v71 = 1;
      }
      if ((v71 & 1) == 0)
      {
        if (*(void *)__s1 == 0x6C656C6C61726170 && *((void *)__s1 + 1) == 0x6D697320726F6620 && __s1[16] == 100)
        {
          uint64_t v5 = 0x10000002CLL;
          goto LABEL_610;
        }
        if (*(void *)__s1 == 0x6C656C6C61726170 && *((void *)__s1 + 1) == 0x6E6F697463657320 && __s1[16] == 115)
        {
          uint64_t v5 = 0x100000030;
          goto LABEL_610;
        }
        if (*(void *)__s1 == 0x6520746567726174 && *((void *)__s1 + 1) == 0x746164207265746ELL && __s1[16] == 97)
        {
          uint64_t v5 = 0x10000003ALL;
          goto LABEL_610;
        }
        goto LABEL_302;
      }
      if (a2 != 15) {
        char v70 = 1;
      }
      if ((v70 & 1) == 0)
      {
        if (*(void *)__s1 == 0x6C656C6C61726170 && *(void *)(__s1 + 7) == 0x72657473616D206CLL)
        {
          uint64_t v5 = 0x10000002DLL;
          goto LABEL_610;
        }
        int v67 = 0;
        int v31 = 0;
        int v7 = 0;
        goto LABEL_313;
      }
      char v81 = v9 ^ 1;
      if (a2 == 24) {
        char v82 = v9 ^ 1;
      }
      else {
        char v82 = 1;
      }
      if (v82)
      {
        if (a2 != 29) {
          char v81 = 1;
        }
        if (v81)
        {
          char v88 = v9 ^ 1;
          if (a2 == 18) {
            char v89 = v9 ^ 1;
          }
          else {
            char v89 = 1;
          }
          if ((v89 & 1) == 0)
          {
            if (*(void *)__s1 == 0x6C656C6C61726170
              && *((void *)__s1 + 1) == 0x6168736B726F7720
              && *((_WORD *)__s1 + 8) == 25970)
            {
              uint64_t v5 = 0x100000031;
              goto LABEL_610;
            }
            int v7 = 0;
            int v31 = 0;
            int v67 = 0;
            int v9 = 1;
            goto LABEL_389;
          }
          if (a2 != 4) {
            char v88 = 1;
          }
          if (v88)
          {
            char v136 = v9 ^ 1;
            if (a2 != 7) {
              char v136 = 1;
            }
            if ((v136 & 1) == 0)
            {
              if (*(_DWORD *)__s1 == 1952671091 && *(_DWORD *)(__s1 + 3) == 1852795252)
              {
                uint64_t v5 = 0x100000034;
                goto LABEL_610;
              }
              if ((v4 & 1) == 0)
              {
                uint64_t v133 = v5 & 0x100000000;
                BOOL v134 = (v5 & 0x100000000) == 0;
                goto LABEL_652;
              }
              int v7 = 0;
              goto LABEL_509;
            }
          }
          else
          {
            if (*(_DWORD *)__s1 == 1851876211)
            {
              uint64_t v5 = 0x100000033;
              goto LABEL_610;
            }
            int v9 = 1;
          }
          if (a2 == 4 && v9)
          {
            if (*(_DWORD *)__s1 == 1684892019)
            {
              uint64_t v5 = 0x100000036;
              goto LABEL_610;
            }
          }
          else
          {
            char v138 = v9 ^ 1;
            if (a2 != 6) {
              char v138 = 1;
            }
            if (v138)
            {
              int v31 = 0;
              int v67 = 0;
              int v7 = 0;
              if (a2 == 11) {
                char v141 = v9;
              }
              else {
                char v141 = 0;
              }
              if (v141) {
                goto LABEL_272;
              }
              goto LABEL_314;
            }
            if (*(_DWORD *)__s1 == 1735289203 && *((_WORD *)__s1 + 2) == 25964)
            {
              uint64_t v5 = 0x100000037;
              goto LABEL_610;
            }
            if (*(_DWORD *)__s1 == 1735549300 && *((_WORD *)__s1 + 2) == 29797)
            {
              uint64_t v5 = 0x100000038;
              goto LABEL_610;
            }
          }
LABEL_302:
          int v7 = 0;
          int v78 = 0;
          int v9 = 1;
          if ((v4 & 1) == 0) {
            goto LABEL_515;
          }
          goto LABEL_509;
        }
        if (*(void *)__s1 == 0x6C656C6C61726170
          && *((void *)__s1 + 1) == 0x2072657473616D20
          && *((void *)__s1 + 2) == 0x706F6F6C6B736174
          && *(void *)(__s1 + 21) == 0x646D697320706F6FLL)
        {
          uint64_t v5 = 0x10000002FLL;
          goto LABEL_610;
        }
        int v32 = 0;
        int v31 = 0;
      }
      else
      {
        if (*(void *)__s1 == 0x6C656C6C61726170
          && *((void *)__s1 + 1) == 0x2072657473616D20
          && *((void *)__s1 + 2) == 0x706F6F6C6B736174)
        {
          uint64_t v5 = 0x10000002ELL;
          goto LABEL_610;
        }
        int v32 = 0;
        int v31 = 1;
      }
LABEL_270:
      int v67 = 0;
      int v7 = 0;
      if (v32 && v9)
      {
LABEL_272:
        if (*(void *)__s1 == 0x6420746567726174 && *(void *)(__s1 + 3) == 0x6174616420746567)
        {
          uint64_t v5 = 0x100000039;
          goto LABEL_610;
        }
        int v7 = 0;
        int v67 = 1;
        goto LABEL_313;
      }
LABEL_314:
      if (a2 == 15 && v9)
      {
        if (*(void *)__s1 == 0x7020746567726174 && *(void *)(__s1 + 7) == 0x6C656C6C61726170)
        {
          uint64_t v5 = 0x10000003CLL;
          goto LABEL_610;
        }
LABEL_422:
        int v98 = 0;
        goto LABEL_423;
      }
LABEL_389:
      if (a2 == 18 && v9)
      {
        if (*(void *)__s1 == 0x7020746567726174
          && *((void *)__s1 + 1) == 0x206C656C6C617261
          && *((_WORD *)__s1 + 8) == 28516)
        {
          uint64_t v5 = 0x10000003DLL;
          goto LABEL_610;
        }
        goto LABEL_422;
      }
      char v94 = v9 ^ 1;
      if (a2 == 23) {
        char v95 = v9 ^ 1;
      }
      else {
        char v95 = 1;
      }
      if (v95)
      {
        if (a2 != 19) {
          char v94 = 1;
        }
        if ((v94 & 1) == 0)
        {
          BOOL v99 = *(void *)__s1 == 0x7020746567726174 && *((void *)__s1 + 1) == 0x206C656C6C617261;
          if (v99 && *(void *)(__s1 + 11) == 0x726F66206C656C6CLL)
          {
            uint64_t v5 = 0x10000003FLL;
            goto LABEL_610;
          }
        }
        goto LABEL_422;
      }
      if (*(void *)__s1 == 0x7020746567726174
        && *((void *)__s1 + 1) == 0x206C656C6C617261
        && *(void *)(__s1 + 15) == 0x646D6973206F6420)
      {
        uint64_t v5 = 0x10000003ELL;
        goto LABEL_610;
      }
      int v98 = 1;
LABEL_423:
      if (v31)
      {
        if (*(void *)__s1 == 0x7020746567726174
          && *((void *)__s1 + 1) == 0x206C656C6C617261
          && *((void *)__s1 + 2) == 0x646D697320726F66)
        {
          uint64_t v5 = 0x100000040;
          goto LABEL_610;
        }
      }
      else if (v67)
      {
        if (*(void *)__s1 == 0x7320746567726174 && *(void *)(__s1 + 3) == 0x646D697320746567)
        {
          uint64_t v5 = 0x100000041;
          goto LABEL_610;
        }
      }
      if (a2 == 12) {
        char v104 = v9;
      }
      else {
        char v104 = 0;
      }
      if (v104)
      {
        if (*(void *)__s1 == 0x7420746567726174 && *((_DWORD *)__s1 + 2) == 1936548197)
        {
          uint64_t v5 = 0x100000042;
          goto LABEL_610;
        }
      }
      else
      {
        if (v98)
        {
          BOOL v106 = *(void *)__s1 == 0x7420746567726174 && *((void *)__s1 + 1) == 0x73696420736D6165;
          if (v106 && *(void *)(__s1 + 15) == 0x6574756269727473)
          {
            uint64_t v5 = 0x100000043;
            goto LABEL_610;
          }
        }
        char v108 = v9 ^ 1;
        if (a2 == 35) {
          char v109 = v9 ^ 1;
        }
        else {
          char v109 = 1;
        }
        if (v109)
        {
          if (a2 != 40) {
            char v108 = 1;
          }
          if (v108)
          {
            char v110 = v9 ^ 1;
            if (a2 == 36) {
              char v111 = v9 ^ 1;
            }
            else {
              char v111 = 1;
            }
            if (v111)
            {
              if (a2 != 41) {
                char v110 = 1;
              }
              if (v110)
              {
                char v112 = v9 ^ 1;
                if (a2 != 28) {
                  char v112 = 1;
                }
                if ((v112 & 1) == 0)
                {
                  if (*(void *)__s1 == 0x7420746567726174
                    && *((void *)__s1 + 1) == 0x73696420736D6165
                    && *((void *)__s1 + 2) == 0x2065747562697274
                    && *((_DWORD *)__s1 + 6) == 1684892019)
                  {
                    uint64_t v5 = 0x100000048;
                    goto LABEL_610;
                  }
                  if ((v4 & 1) == 0)
                  {
                    int v8 = 0;
                    if ((v7 & 1) == 0) {
                      goto LABEL_554;
                    }
                    int v6 = 1;
                    goto LABEL_549;
                  }
                  int v6 = 1;
                  goto LABEL_527;
                }
              }
              else if (!memcmp(__s1, "target teams distribute parallel for simd", 0x29uLL))
              {
                uint64_t v5 = 0x100000047;
                goto LABEL_610;
              }
            }
            else if (!memcmp(__s1, "target teams distribute parallel for", 0x24uLL))
            {
              uint64_t v5 = 0x100000046;
              goto LABEL_610;
            }
          }
          else if (!memcmp(__s1, "target teams distribute parallel do simd", 0x28uLL))
          {
            uint64_t v5 = 0x100000045;
            goto LABEL_610;
          }
        }
        else if (!memcmp(__s1, "target teams distribute parallel do", 0x23uLL))
        {
          uint64_t v5 = 0x100000044;
          goto LABEL_610;
        }
      }
      if (!v4)
      {
        int v78 = 0;
        goto LABEL_515;
      }
LABEL_509:
      if (*(void *)__s1 == 0x7520746567726174 && *(void *)(__s1 + 5) == 0x6574616470752074)
      {
        uint64_t v5 = 0x100000049;
        goto LABEL_610;
      }
      int v78 = 1;
LABEL_515:
      if (a2 == 4 && v9)
      {
        if (*(_DWORD *)__s1 == 1802723700)
        {
          uint64_t v5 = 0x10000004ALL;
          goto LABEL_610;
        }
      }
      else
      {
        char v117 = v9 ^ 1;
        if (a2 != 9) {
          char v117 = 1;
        }
        if ((v117 & 1) == 0 && *(void *)__s1 == 0x756F72676B736174 && __s1[8] == 112)
        {
          uint64_t v5 = 0x10000004BLL;
          goto LABEL_610;
        }
      }
      int v6 = 0;
      int v8 = 0;
      if (v78)
      {
LABEL_527:
        if (*(void *)__s1 == 0x706F6F6C6B736174 && *(void *)(__s1 + 5) == 0x646D697320706F6FLL)
        {
          uint64_t v5 = 0x10000004DLL;
          goto LABEL_610;
        }
        int v8 = 1;
      }
      if (a2 != 9 || !v9) {
        goto LABEL_540;
      }
      if (*(void *)__s1 != 0x6C6569796B736174 || __s1[8] != 100) {
        goto LABEL_548;
      }
      uint64_t v5 = 0x10000004FLL;
LABEL_610:
      if ((v5 & 0x300000000) != 0) {
        return v5;
      }
      else {
        return 89;
      }
  }
}

uint64_t llvm::omp::getOpenMPClauseKind(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x100000055;
  if (a2 != 7)
  {
    unint64_t v3 = 0;
    LOBYTE(v4) = 1;
    BOOL v5 = 1;
    switch(a2)
    {
      case 4:
        if (*(_DWORD *)a1 != 1684957538)
        {
          uint64_t v6 = 0;
          unint64_t v3 = 0;
          BOOL v7 = 1;
          goto LABEL_5;
        }
        uint64_t v2 = 0x10000000ALL;
        goto LABEL_626;
      case 5:
        if (*(_DWORD *)a1 != 1734962273 || *(unsigned char *)(a1 + 4) != 110)
        {
          unint64_t v3 = 0;
          goto LABEL_68;
        }
        uint64_t v2 = 0x100000004;
        goto LABEL_626;
      case 6:
      case 7:
      case 10:
        goto LABEL_90;
      case 8:
        if (*(void *)a1 == 0x7974696E69666661)
        {
          uint64_t v2 = 0x100000003;
          goto LABEL_626;
        }
        if (*(void *)a1 == 0x657461636F6C6C61)
        {
          uint64_t v2 = 0x100000006;
          goto LABEL_626;
        }
LABEL_87:
        unint64_t v3 = 0;
        goto LABEL_88;
      case 9:
        if (*(void *)a1 != 0x6F7461636F6C6C61 || *(unsigned char *)(a1 + 8) != 114) {
          goto LABEL_87;
        }
        uint64_t v2 = 0x100000007;
        goto LABEL_626;
      case 11:
        if (*(void *)a1 == 0x615F7473756A6461 && *(void *)(a1 + 3) == 0x736772615F747375)
        {
          uint64_t v2 = 0x100000002;
        }
        else
        {
          if (*(void *)a1 != 0x615F646E65707061 || *(void *)(a1 + 3) != 0x736772615F646E65)
          {
            unint64_t v3 = 0;
            BOOL v5 = 1;
            goto LABEL_108;
          }
          uint64_t v2 = 0x100000008;
        }
        goto LABEL_626;
      default:
        if (a2 != 24) {
          goto LABEL_90;
        }
        if (*(void *)a1 != 0x645F63696D6F7461
          || *(void *)(a1 + 8) != 0x6D5F746C75616665
          || *(void *)(a1 + 16) != 0x726564726F5F6D65)
        {
          int v11 = 0;
          int v18 = 0;
          int v19 = 0;
          BOOL v10 = 0;
          unint64_t v3 = 0;
          int v9 = 0;
          int v8 = 0;
          char v20 = 1;
          BOOL v7 = 1;
          goto LABEL_41;
        }
        uint64_t v2 = 0x100000009;
        break;
    }
    goto LABEL_626;
  }
  if (*(_DWORD *)a1 == 1601266529 && *(_DWORD *)(a1 + 3) == 1818587743)
  {
    uint64_t v2 = 0x100000000;
    goto LABEL_626;
  }
  if (*(_DWORD *)a1 != 1970365281 || *(_DWORD *)(a1 + 3) != 1701996917)
  {
    if (*(_DWORD *)a1 == 1734962273 && *(_DWORD *)(a1 + 3) == 1684368999)
    {
      uint64_t v2 = 0x100000005;
      goto LABEL_626;
    }
    if (*(_DWORD *)a1 == 1953522019 && *(_DWORD *)(a1 + 3) == 1701999988)
    {
      uint64_t v2 = 0x10000000BLL;
      goto LABEL_626;
    }
    unint64_t v3 = 0;
    BOOL v5 = 1;
    goto LABEL_94;
  }
  unint64_t v3 = 0x100000001;
LABEL_88:
  BOOL v5 = (v3 & 0x100000000) == 0;
  unint64_t v4 = HIDWORD(v3);
  if (a2 != 7) {
    LOBYTE(v4) = 1;
  }
LABEL_90:
  if (a2 == 8 && v5 && *(void *)a1 == 0x657370616C6C6F63)
  {
    uint64_t v2 = 0x10000000CLL;
    goto LABEL_626;
  }
  if ((v4 & 1) == 0)
  {
LABEL_94:
    if (*(_DWORD *)a1 == 1886220131 && *(_DWORD *)(a1 + 3) == 1701994864)
    {
      uint64_t v2 = 0x10000000DLL;
      goto LABEL_626;
    }
    char v30 = 0;
    goto LABEL_115;
  }
LABEL_108:
  char v30 = 1;
  if (a2 == 11 && v5)
  {
    if (*(void *)a1 == 0x7669727079706F63 && *(void *)(a1 + 3) == 0x6574617669727079)
    {
      uint64_t v2 = 0x10000000ELL;
      goto LABEL_626;
    }
    BOOL v5 = 1;
    goto LABEL_158;
  }
LABEL_115:
  BOOL v34 = a2 == 6 && v5;
  if (v34 && *(_DWORD *)a1 == 2037411683 && *(_WORD *)(a1 + 4) == 28265)
  {
    uint64_t v2 = 0x10000000FLL;
    goto LABEL_626;
  }
  if (v30)
  {
    char v36 = !v5;
    if (a2 != 10) {
      char v36 = 1;
    }
    if ((v36 & 1) == 0)
    {
      if (*(void *)a1 == 0x6D746C7561666564 && *(_WORD *)(a1 + 8) == 28769)
      {
        uint64_t v2 = 0x100000011;
        goto LABEL_626;
      }
      BOOL v5 = 1;
    }
  }
  else if (*(_DWORD *)a1 == 1634100580 && *(_DWORD *)(a1 + 3) == 1953264993)
  {
    uint64_t v2 = 0x100000010;
    goto LABEL_626;
  }
  if (!v34)
  {
    if ((v30 & 1) == 0 && *(_DWORD *)a1 == 1953719652 && *(_DWORD *)(a1 + 3) == 2037346932) {
      goto LABEL_303;
    }
LABEL_158:
    if (a2 == 11 && v5)
    {
      if (*(void *)a1 == 0x745F656369766564 && *(void *)(a1 + 3) == 0x657079745F656369)
      {
        uint64_t v2 = 0x100000017;
        goto LABEL_626;
      }
LABEL_196:
      uint64_t v6 = v3 & 0x100000000;
      BOOL v7 = (v3 & 0x100000000) == 0;
      goto LABEL_197;
    }
    char v44 = !v5;
    char v45 = a2 != 13 || !v5;
    if ((v45 & 1) == 0)
    {
      if (*(void *)a1 == 0x6863735F74736964 && *(void *)(a1 + 5) == 0x656C756465686373)
      {
        uint64_t v2 = 0x100000018;
        goto LABEL_626;
      }
      goto LABEL_196;
    }
    if (a2 != 18) {
      char v44 = 1;
    }
    if ((v44 & 1) == 0)
    {
      if (*(void *)a1 == 0x5F63696D616E7964
        && *(void *)(a1 + 8) == 0x6F7461636F6C6C61
        && *(_WORD *)(a1 + 16) == 29554)
      {
        uint64_t v2 = 0x100000019;
        goto LABEL_626;
      }
      goto LABEL_196;
    }
    char v60 = !v5;
    char v61 = a2 != 9 || !v5;
    if ((v61 & 1) == 0)
    {
      if (*(void *)a1 == 0x766973756C637865 && *(unsigned char *)(a1 + 8) == 101)
      {
        uint64_t v2 = 0x10000001ALL;
        goto LABEL_626;
      }
      goto LABEL_252;
    }
    if (a2 != 5) {
      char v60 = 1;
    }
    if (v60)
    {
      char v86 = !v5;
      if (a2 != 12) {
        char v86 = 1;
      }
      if ((v86 & 1) == 0)
      {
        if (*(void *)a1 == 0x6972707473726966 && *(_DWORD *)(a1 + 8) == 1702125942)
        {
          uint64_t v2 = 0x10000001DLL;
          goto LABEL_626;
        }
        goto LABEL_252;
      }
    }
    else
    {
LABEL_68:
      if (*(_DWORD *)a1 == 1634625894 && *(unsigned char *)(a1 + 4) == 108)
      {
        uint64_t v2 = 0x10000001CLL;
        goto LABEL_626;
      }
    }
    uint64_t v6 = v3 & 0x100000000;
    BOOL v7 = (v3 & 0x100000000) == 0;
    if (a2 != 5 || v6)
    {
LABEL_5:
      if (a2 == 4 && v7)
      {
        switch(*(_DWORD *)a1)
        {
          case 0x6D6F7266:
            uint64_t v2 = 0x10000001FLL;
            goto LABEL_626;
          case 0x6C6C7566:
            uint64_t v2 = 0x100000020;
            goto LABEL_626;
          case 0x746E6968:
            uint64_t v2 = 0x100000023;
            goto LABEL_626;
          case 0x74696E69:
            uint64_t v2 = 0x100000029;
            goto LABEL_626;
          case 0x6B6E696C:
            uint64_t v2 = 0x10000002DLL;
            goto LABEL_626;
        }
        int v8 = 0;
        int v9 = 0;
        BOOL v10 = 0;
        int v11 = 1;
        goto LABEL_331;
      }
LABEL_253:
      if (a2 == 9 && v7)
      {
        if (*(void *)a1 == 0x7A69736E69617267 && *(unsigned char *)(a1 + 8) == 101)
        {
          uint64_t v2 = 0x100000021;
          goto LABEL_626;
        }
        if (*(void *)a1 == 0x766973756C636E69 && *(unsigned char *)(a1 + 8) == 101)
        {
          uint64_t v2 = 0x100000027;
          goto LABEL_626;
        }
        int v8 = 0;
        int v9 = 0;
        BOOL v10 = 0;
        int v58 = 1;
        goto LABEL_264;
      }
LABEL_197:
      if (a2 == 15 && v7)
      {
        if (*(void *)a1 == 0x697665645F736168 && *(void *)(a1 + 7) == 0x726464615F656369)
        {
          uint64_t v2 = 0x100000022;
          goto LABEL_626;
        }
        int v11 = 0;
        int v8 = 0;
        int v9 = 0;
        int v50 = 0;
        BOOL v7 = 1;
        goto LABEL_204;
      }
      char v56 = !v7;
      char v57 = a2 != 2 || !v7;
      if (v57)
      {
        if (a2 != 12) {
          char v56 = 1;
        }
        if (v56)
        {
          char v71 = !v7;
          char v72 = a2 != 8 || !v7;
          if (v72)
          {
            if (a2 != 13) {
              char v71 = 1;
            }
            if ((v71 & 1) == 0)
            {
              if (*(void *)a1 == 0x63697665645F7369 && *(void *)(a1 + 5) == 0x7274705F65636976)
              {
                uint64_t v2 = 0x10000002ALL;
                goto LABEL_626;
              }
              BOOL v51 = 0;
              int v50 = 0;
              int v9 = 0;
              int v11 = 0;
              BOOL v7 = 1;
              goto LABEL_471;
            }
            char v108 = !v7;
            if (a2 != 11) {
              char v108 = 1;
            }
            if ((v108 & 1) == 0)
            {
              if (*(void *)a1 == 0x766972707473616CLL && *(void *)(a1 + 3) == 0x6574617669727074)
              {
                uint64_t v2 = 0x10000002BLL;
                goto LABEL_626;
              }
              if (*(void *)a1 == 0x6F706D65746E6F6ELL && *(void *)(a1 + 3) == 0x6C61726F706D6574)
              {
                uint64_t v2 = 0x100000035;
                goto LABEL_626;
              }
              if (*(void *)a1 == 0x6172626E69746F6ELL && *(void *)(a1 + 3) == 0x68636E6172626E69)
              {
                uint64_t v2 = 0x100000036;
                goto LABEL_626;
              }
              uint64_t v2 = 0x10000003ALL;
              BOOL v112 = (*(void *)a1 ^ 0x657268745F6D756ELL | *(void *)(a1 + 3) ^ 0x736461657268745FLL) == 0;
              goto LABEL_611;
            }
            goto LABEL_296;
          }
          if (*(void *)a1 == 0x68636E6172626E69)
          {
            uint64_t v2 = 0x100000026;
            goto LABEL_626;
          }
          if (*(void *)a1 == 0x7463657269646E69)
          {
            uint64_t v2 = 0x100000028;
            goto LABEL_626;
          }
          int v9 = 0;
          int v58 = 0;
          BOOL v10 = 0;
          int v8 = 1;
        }
        else
        {
          if (*(void *)a1 == 0x63756465725F6E69 && *(_DWORD *)(a1 + 8) == 1852795252)
          {
            uint64_t v2 = 0x100000025;
            goto LABEL_626;
          }
          int v8 = 0;
          int v9 = 0;
          int v58 = 0;
          BOOL v10 = 0;
        }
      }
      else
      {
        if (*(_WORD *)a1 == 26217)
        {
          uint64_t v2 = 0x100000024;
          goto LABEL_626;
        }
        int v8 = 0;
        int v58 = 0;
        BOOL v10 = 0;
        int v9 = 1;
      }
LABEL_264:
      BOOL v7 = 1;
      goto LABEL_265;
    }
    if (*(_DWORD *)a1 == 1937075302 && *(unsigned char *)(a1 + 4) == 104) {
      goto LABEL_626;
    }
LABEL_252:
    uint64_t v6 = v3 & 0x100000000;
    BOOL v7 = (v3 & 0x100000000) == 0;
    goto LABEL_253;
  }
  if (*(_DWORD *)a1 == 1701864804 && *(_WORD *)(a1 + 4) == 25710)
  {
    uint64_t v2 = 0x100000012;
    goto LABEL_626;
  }
  if (*(_DWORD *)a1 == 1869636964 && *(_WORD *)(a1 + 4) == 27234) {
    goto LABEL_626;
  }
  if (v30)
  {
    if (*(_DWORD *)a1 == 1635018084 && *(_WORD *)(a1 + 4) == 26723)
    {
      uint64_t v2 = 0x100000015;
      goto LABEL_626;
    }
    goto LABEL_287;
  }
  if (*(_DWORD *)a1 == 1953719652 && *(_DWORD *)(a1 + 3) == 2037346932)
  {
LABEL_303:
    uint64_t v2 = 0x100000014;
    goto LABEL_626;
  }
LABEL_287:
  if (*(_DWORD *)a1 == 1769366884 && *(_WORD *)(a1 + 4) == 25955)
  {
    uint64_t v2 = 0x100000016;
    goto LABEL_626;
  }
  if (*(_DWORD *)a1 == 1953261926 && *(_WORD *)(a1 + 4) == 29285)
  {
    uint64_t v2 = 0x10000001BLL;
    goto LABEL_626;
  }
  uint64_t v6 = v3 & 0x100000000;
  BOOL v7 = (v3 & 0x100000000) == 0;
LABEL_296:
  int v8 = 0;
  BOOL v10 = a2 == 6;
  if (a2 == 6 && v7)
  {
    if (*(_DWORD *)a1 == 1701734764 && *(_WORD *)(a1 + 4) == 29281)
    {
      uint64_t v2 = 0x10000002CLL;
      goto LABEL_626;
    }
    int v11 = 0;
    int v18 = 0;
    int v19 = 0;
    int v9 = 0;
    int v8 = 0;
    char v20 = 1;
    BOOL v10 = 1;
    goto LABEL_41;
  }
  int v9 = 0;
  int v58 = 0;
LABEL_265:
  if (a2 == 3 && v7)
  {
    if (*(_WORD *)a1 == 24941 && *(unsigned char *)(a1 + 2) == 112)
    {
      uint64_t v2 = 0x10000002ELL;
      goto LABEL_626;
    }
    int v11 = 0;
    if (v58)
    {
      BOOL v7 = 1;
      goto LABEL_341;
    }
LABEL_331:
    int v19 = 0;
    int v18 = v11;
    char v20 = 1;
    BOOL v7 = 1;
    int v11 = 0;
    goto LABEL_41;
  }
  int v11 = a2 == 5 && v7;
  if (v11 == 1)
  {
    if (*(_DWORD *)a1 == 1668571501 && *(unsigned char *)(a1 + 4) == 104)
    {
      uint64_t v2 = 0x10000002FLL;
      goto LABEL_626;
    }
LABEL_339:
    BOOL v7 = 1;
    goto LABEL_340;
  }
  char v78 = !v7;
  if (a2 != 12) {
    char v78 = 1;
  }
  if ((v78 & 1) == 0)
  {
    if (*(void *)a1 == 0x6F5F79726F6D656DLL && *(_DWORD *)(a1 + 8) == 1919247474)
    {
      uint64_t v2 = 0x100000030;
      goto LABEL_626;
    }
    goto LABEL_339;
  }
LABEL_340:
  if (!v58)
  {
    int v19 = 0;
    goto LABEL_381;
  }
LABEL_341:
  if (*(void *)a1 == 0x6C6261656772656DLL && *(unsigned char *)(a1 + 8) == 101)
  {
    uint64_t v2 = 0x100000031;
    goto LABEL_626;
  }
  int v19 = 1;
LABEL_381:
  int v18 = 0;
  char v20 = 1;
  if (a2 == 7 && !v6)
  {
    if (*(_DWORD *)a1 == 1919381358 && *(_DWORD *)(a1 + 3) == 1886744434)
    {
      uint64_t v2 = 0x100000032;
      goto LABEL_626;
    }
    char v20 = 0;
    int v18 = 0;
    if (v19) {
      goto LABEL_48;
    }
    goto LABEL_388;
  }
LABEL_41:
  if (v10 && v7 && *(_DWORD *)a1 == 1635217262 && *(_WORD *)(a1 + 4) == 29801)
  {
    uint64_t v2 = 0x100000033;
    goto LABEL_626;
  }
  if (v19)
  {
LABEL_48:
    if (*(void *)a1 == 0x7865746E6F636F6ELL && *(unsigned char *)(a1 + 8) == 116)
    {
      uint64_t v2 = 0x100000034;
      goto LABEL_626;
    }
    if (a2 != 10 || !v7)
    {
      if (*(void *)a1 == 0x6B7361745F6D756ELL && *(unsigned char *)(a1 + 8) == 115)
      {
        uint64_t v2 = 0x100000038;
        goto LABEL_626;
      }
      goto LABEL_351;
    }
    if (*(void *)a1 != 0x6E61697261766F6ELL || *(_WORD *)(a1 + 8) != 29556)
    {
LABEL_351:
      if (*(void *)a1 == 0x6D6165745F6D756ELL && *(unsigned char *)(a1 + 8) == 115)
      {
        uint64_t v2 = 0x100000039;
        goto LABEL_626;
      }
      goto LABEL_396;
    }
LABEL_420:
    uint64_t v2 = 0x100000037;
    goto LABEL_626;
  }
LABEL_388:
  BOOL v89 = a2 == 10 && v7;
  if (v89 && *(void *)a1 == 0x6E61697261766F6ELL && *(_WORD *)(a1 + 8) == 29556) {
    goto LABEL_420;
  }
LABEL_396:
  if (v11)
  {
    if (*(_DWORD *)a1 == 1701081711 && *(unsigned char *)(a1 + 4) == 114)
    {
      uint64_t v2 = 0x10000003BLL;
      goto LABEL_626;
    }
  }
  if ((v20 & 1) == 0)
  {
    if (*(_DWORD *)a1 == 1701081711 && *(_DWORD *)(a1 + 3) == 1684370021)
    {
      uint64_t v2 = 0x10000003CLL;
      goto LABEL_626;
    }
    if (*(_DWORD *)a1 == 1953653104 && *(_DWORD *)(a1 + 3) == 1818323316)
    {
      uint64_t v2 = 0x10000003DLL;
      goto LABEL_626;
    }
  }
  if (v8 && *(void *)a1 == 0x797469726F697270)
  {
    uint64_t v2 = 0x10000003ELL;
    goto LABEL_626;
  }
  if ((v20 & 1) == 0)
  {
    if (*(_DWORD *)a1 == 1986622064 && *(_DWORD *)(a1 + 3) == 1702125942)
    {
      uint64_t v2 = 0x10000003FLL;
      goto LABEL_626;
    }
    if ((v18 & 1) == 0)
    {
      if (!v19)
      {
        int v50 = 0;
        goto LABEL_586;
      }
      goto LABEL_427;
    }
LABEL_455:
    if (*(_DWORD *)a1 == 1684104562)
    {
      uint64_t v2 = 0x100000041;
      goto LABEL_626;
    }
    int v50 = 1;
    goto LABEL_457;
  }
  if (!v19)
  {
    if (v18) {
      goto LABEL_455;
    }
    int v50 = 0;
LABEL_204:
    BOOL v51 = a2 == 15 && v7;
    if (v51 && *(void *)a1 == 0x5F65737265766572 && *(void *)(a1 + 7) == 0x64616F6C66666F5FLL)
    {
      uint64_t v2 = 0x100000045;
      goto LABEL_626;
    }
    if (v8 && *(void *)a1 == 0x656C756465686373)
    {
      uint64_t v2 = 0x100000047;
      goto LABEL_626;
    }
    char v53 = !v7;
    if (a2 != 6) {
      char v53 = 1;
    }
    if (v53)
    {
      char v55 = 1;
      if (!v50) {
        goto LABEL_315;
      }
    }
    else
    {
      if (*(_DWORD *)a1 == 1918986355 && *(_WORD *)(a1 + 4) == 25701)
      {
        uint64_t v2 = 0x100000049;
        goto LABEL_626;
      }
      char v55 = 1;
      BOOL v7 = 1;
      if (!v50) {
        goto LABEL_315;
      }
    }
    goto LABEL_314;
  }
  if (*(void *)a1 == 0x6E69625F636F7270 && *(unsigned char *)(a1 + 8) == 100)
  {
    uint64_t v2 = 0x100000040;
    goto LABEL_626;
  }
  if (v18) {
    goto LABEL_455;
  }
LABEL_427:
  if (*(void *)a1 == 0x6F69746375646572 && *(unsigned char *)(a1 + 8) == 110)
  {
    uint64_t v2 = 0x100000042;
    goto LABEL_626;
  }
  int v50 = 0;
LABEL_457:
  if (v20) {
    goto LABEL_204;
  }
LABEL_586:
  if (*(_DWORD *)a1 == 1634493810 && *(_DWORD *)(a1 + 3) == 1684371553)
  {
    uint64_t v2 = 0x100000043;
    goto LABEL_626;
  }
  if (*(_DWORD *)a1 == 1701602674 && *(_DWORD *)(a1 + 3) == 1702060389)
  {
    uint64_t v2 = 0x100000044;
    goto LABEL_626;
  }
  if (*(_DWORD *)a1 == 1701208435 && *(_DWORD *)(a1 + 3) == 1852140645)
  {
    uint64_t v2 = 0x100000046;
    goto LABEL_626;
  }
  if (*(_DWORD *)a1 == 1601267059 && *(_DWORD *)(a1 + 3) == 1953719135)
  {
    uint64_t v2 = 0x100000048;
    goto LABEL_626;
  }
  char v55 = 0;
  BOOL v51 = 0;
  if (v50)
  {
LABEL_314:
    if (*(_DWORD *)a1 == 1684892019)
    {
      uint64_t v2 = 0x10000004ALL;
      goto LABEL_626;
    }
  }
LABEL_315:
  if (v55)
  {
    if (v11)
    {
      if (*(_DWORD *)a1 == 1702521203 && *(unsigned char *)(a1 + 4) == 115)
      {
        uint64_t v2 = 0x10000004CLL;
        goto LABEL_626;
      }
    }
    char v74 = !v7;
    char v75 = a2 != 14 || !v7;
    if ((v75 & 1) == 0)
    {
      if (*(void *)a1 == 0x6465725F6B736174 && *(void *)(a1 + 6) == 0x6E6F697463756465)
      {
        uint64_t v2 = 0x10000004DLL;
        goto LABEL_626;
      }
      int v77 = 1;
      goto LABEL_478;
    }
    if (a2 != 12) {
      char v74 = 1;
    }
    if ((v74 & 1) == 0)
    {
      if (*(void *)a1 == 0x6C5F646165726874 && *(_DWORD *)(a1 + 8) == 1953066345)
      {
        uint64_t v2 = 0x10000004ELL;
        goto LABEL_626;
      }
LABEL_477:
      int v77 = 0;
LABEL_478:
      LOBYTE(v7) = 1;
LABEL_479:
      if (v9 && *(_WORD *)a1 == 28532)
      {
        uint64_t v2 = 0x100000051;
        goto LABEL_626;
      }
      char v85 = 1;
      goto LABEL_482;
    }
LABEL_471:
    int v77 = 0;
    if (a2 != 13 || !v7) {
      goto LABEL_479;
    }
    if (*(void *)a1 == 0x7270646165726874 && *(void *)(a1 + 5) == 0x6574617669727064) {
      goto LABEL_626;
    }
    goto LABEL_477;
  }
  if (*(_DWORD *)a1 == 1684892019 && *(_DWORD *)(a1 + 3) == 1852140644)
  {
    uint64_t v2 = 0x10000004BLL;
    goto LABEL_626;
  }
  if (*(_DWORD *)a1 == 1701996660 && *(_DWORD *)(a1 + 3) == 1935958373)
  {
    uint64_t v2 = 0x100000050;
    goto LABEL_626;
  }
  char v85 = 0;
  int v77 = 0;
LABEL_482:
  if (v51)
  {
    if (*(void *)a1 == 0x5F64656966696E75 && *(void *)(a1 + 7) == 0x737365726464615FLL)
    {
      uint64_t v2 = 0x100000052;
      goto LABEL_626;
    }
  }
  else
  {
    char v101 = !v7;
    if (a2 != 21) {
      char v101 = 1;
    }
    if ((v101 & 1) == 0)
    {
      BOOL v102 = *(void *)a1 == 0x5F64656966696E75 && *(void *)(a1 + 8) == 0x6D5F646572616873;
      if (v102 && *(void *)(a1 + 13) == 0x79726F6D656D5F64)
      {
        uint64_t v2 = 0x100000053;
        goto LABEL_626;
      }
    }
  }
  if (v85)
  {
    char v104 = !v7;
    if (a2 == 6) {
      char v105 = v104;
    }
    else {
      char v105 = 1;
    }
    if (v105)
    {
      if (a2 != 3) {
        char v104 = 1;
      }
      if ((v104 & 1) == 0)
      {
        if (*(_WORD *)a1 == 29557 && *(unsigned char *)(a1 + 2) == 101)
        {
          uint64_t v2 = 0x100000058;
          goto LABEL_626;
        }
        if ((v77 & 1) == 0)
        {
          if (!v51) {
            goto LABEL_583;
          }
          goto LABEL_570;
        }
LABEL_579:
        if (*(void *)a1 == 0x697665645F657375 && *(void *)(a1 + 6) == 0x7274705F65636976)
        {
          uint64_t v2 = 0x10000005ALL;
          goto LABEL_626;
        }
LABEL_583:
        if (v50)
        {
          uint64_t v2 = 0x10000005CLL;
          BOOL v112 = *(_DWORD *)a1 == 1852139639;
        }
        else
        {
          if (!v11)
          {
            uint64_t v2 = v3;
            goto LABEL_626;
          }
          uint64_t v2 = 0x10000005DLL;
          BOOL v112 = (*(_DWORD *)a1 ^ 0x74697277 | *(unsigned __int8 *)(a1 + 4) ^ 0x65) == 0;
        }
LABEL_611:
        if (!v112) {
          uint64_t v2 = v3;
        }
        goto LABEL_626;
      }
    }
    else
    {
      if (*(_DWORD *)a1 == 1769238133 && *(_WORD *)(a1 + 4) == 25701)
      {
        uint64_t v2 = 0x100000056;
        goto LABEL_626;
      }
      if (*(_DWORD *)a1 == 1633972341 && *(_WORD *)(a1 + 4) == 25972)
      {
        uint64_t v2 = 0x100000057;
        goto LABEL_626;
      }
    }
LABEL_564:
    if (v51)
    {
      if (*(void *)a1 == 0x697665645F657375 && *(void *)(a1 + 7) == 0x726464615F656369)
      {
        uint64_t v2 = 0x100000059;
        goto LABEL_626;
      }
      if ((v77 & 1) == 0)
      {
LABEL_570:
        if (*(void *)a1 == 0x6C6C615F73657375 && *(void *)(a1 + 7) == 0x73726F7461636F6CLL)
        {
          uint64_t v2 = 0x10000005BLL;
          goto LABEL_626;
        }
        goto LABEL_583;
      }
    }
    else if (!v77)
    {
      goto LABEL_583;
    }
    goto LABEL_579;
  }
  if (*(_DWORD *)a1 == 1718185589 && *(_DWORD *)(a1 + 3) == 1836216166)
  {
    uint64_t v2 = 0x100000054;
    goto LABEL_626;
  }
  if (*(_DWORD *)a1 != 1852534389 || *(_DWORD *)(a1 + 3) != 1853321070) {
    goto LABEL_564;
  }
LABEL_626:
  if ((v2 & 0xFF00000000) != 0) {
    return v2;
  }
  else {
    return 85;
  }
}

uint64_t llvm::omp::getMemoryOrderKind(_DWORD *a1, uint64_t a2)
{
  if (a2 != 7) {
    return 6;
  }
  if (*a1 == 1601267059 && *(_DWORD *)((char *)a1 + 3) == 1953719135) {
    return 1;
  }
  if (*a1 == 1601266529 && *(_DWORD *)((char *)a1 + 3) == 1818587743) {
    return 2;
  }
  if (*a1 == 1970365281 && *(_DWORD *)((char *)a1 + 3) == 1701996917) {
    return 3;
  }
  if (*a1 == 1701602674 && *(_DWORD *)((char *)a1 + 3) == 1702060389) {
    return 4;
  }
  if (*a1 ^ 0x616C6572 | *(_DWORD *)((char *)a1 + 3) ^ 0x64657861) {
    return 6;
  }
  return 5;
}

char *llvm::omp::getOpenMPMemoryOrderKindName(int a1)
{
  return off_1E684A740[a1 - 1];
}

uint64_t llvm::omp::getOrderKind(uint64_t a1, uint64_t a2)
{
  if (a2 == 10
    && (*(void *)a1 == 0x65727275636E6F63 ? (BOOL v2 = *(unsigned __int16 *)(a1 + 8) == 29806) : (BOOL v2 = 0), v2))
  {
    return 1;
  }
  else
  {
    return 2;
  }
}

const char *llvm::omp::getOpenMPOrderKindName(int a1)
{
  if (a1 == 2) {
    return "unknown";
  }
  else {
    return "concurrent";
  }
}

uint64_t llvm::omp::getProcBindKind(uint64_t a1, uint64_t a2)
{
  if (a2 == 5)
  {
    if (*(_DWORD *)a1 ^ 0x736F6C63 | *(unsigned __int8 *)(a1 + 4) ^ 0x65) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = 0x100000003;
    }
    goto LABEL_30;
  }
  if (a2 == 6)
  {
    uint64_t v4 = 0x100000002;
    if (*(_DWORD *)a1 == 1953718637 && *(_WORD *)(a1 + 4) == 29285) {
      goto LABEL_30;
    }
    if (*(_DWORD *)a1 == 1701998707 && *(_WORD *)(a1 + 4) == 25697)
    {
      uint64_t v4 = 0x100000004;
      goto LABEL_30;
    }
LABEL_26:
    uint64_t v4 = 0;
    goto LABEL_30;
  }
  if (a2 != 7) {
    goto LABEL_26;
  }
  if (*(_DWORD *)a1 == 1835627120 && *(_DWORD *)(a1 + 3) == 2037539181)
  {
    uint64_t v4 = 0x100000005;
  }
  else if (*(_DWORD *)a1 == 1634100580 && *(_DWORD *)(a1 + 3) == 1953264993)
  {
    uint64_t v4 = 0x100000006;
  }
  else
  {
    uint64_t v4 = 0x100000007;
    if (*(_DWORD *)a1 ^ 0x6E6B6E75 | *(_DWORD *)(a1 + 3) ^ 0x6E776F6E) {
      uint64_t v4 = 0;
    }
  }
LABEL_30:
  if ((v4 & 0x300000000) != 0) {
    return v4;
  }
  else {
    return 7;
  }
}

char *llvm::omp::getOpenMPProcBindKindName(int a1)
{
  return off_1E684A770[a1 - 2];
}

uint64_t llvm::omp::getScheduleKind(uint64_t a1, uint64_t a2)
{
  if (a2 == 4)
  {
    if (*(_DWORD *)a1 == 1869903201) {
      return 5;
    }
    return 7;
  }
  if (a2 == 7)
  {
    if (*(_DWORD *)a1 == 1634629988 && *(_DWORD *)(a1 + 3) == 1667853665) {
      return 3;
    }
    if (*(_DWORD *)a1 == 1953396082 && *(_DWORD *)(a1 + 3) == 1701669236) {
      return 6;
    }
    return 7;
  }
  if (a2 != 6) {
    return 7;
  }
  if (*(_DWORD *)a1 != 1952543859 || *(_WORD *)(a1 + 4) != 25449)
  {
    if (*(_DWORD *)a1 == 1684632935 && *(_WORD *)(a1 + 4) == 25701) {
      return 4;
    }
    return 7;
  }
  return 2;
}

char *llvm::omp::getOpenMPScheduleKindName(int a1)
{
  return off_1E684A7A0[a1 - 2];
}

uint64_t sub_1CC6C6C18(unint64_t **a1, uint64_t a2, uint64_t a3, int a4)
{
  BOOL v7 = a1;
  int v8 = *a1;
  unint64_t v9 = **a1;
  unint64_t v62 = v9;
  if ((v9 & 0x40000000000) != 0) {
    int v10 = 2;
  }
  else {
    int v10 = (v9 >> 41) & 1;
  }
  int v11 = *((_DWORD *)a1 + 16);
  if (v11)
  {
    uint64_t v12 = 0;
    int v13 = v11 - 1;
    unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    uint64_t v15 = v13 & 0xFFFFFFC0;
    while (1)
    {
      uint64_t v17 = *v8++;
      uint64_t v16 = v17;
      unint64_t v18 = v15 == v12 ? v14 : -1;
      unint64_t v19 = v18 & v16;
      if (v19) {
        break;
      }
      v12 += 64;
      if (v15 + 64 == v12) {
        goto LABEL_49;
      }
    }
    unsigned int v20 = __clz(__rbit64(v19)) + v12;
    if (v20 != -1)
    {
      while (1)
      {
        if ((!a4 || llvm::omp::getOpenMPContextTraitSetForProperty(v20) == 2)
          && llvm::omp::getOpenMPContextTraitSelectorForProperty(v20) != 9)
        {
          if (v20 == 49)
          {
            uint64_t v21 = *((unsigned int *)v7 + 20);
            if (v21)
            {
              uint64_t v22 = (uint64_t *)v7[9];
              uint64_t v23 = &v22[2 * v21];
              do
              {
                uint64_t v24 = *v22;
                uint64_t v25 = v22[1];
                v22 += 2;
                LODWORD(v26) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v24, v25);
                if (v26) {
                  BOOL v27 = v22 == v23;
                }
                else {
                  BOOL v27 = 1;
                }
              }
              while (!v27);
            }
            else
            {
              LODWORD(v26) = 1;
            }
          }
          else
          {
            uint64_t v26 = (*(void *)(*(void *)(a2 + 8) + 8 * (v20 >> 6)) >> v20) & 1;
          }
          if (v10 == 1)
          {
            if (v26) {
              return 1;
            }
          }
          else
          {
            BOOL v28 = v10 != 0;
            if (!v26) {
              BOOL v28 = (v62 & 0x40000000000) == 0;
            }
            if (v28) {
              return 0;
            }
          }
        }
        unsigned int v29 = v20 + 1;
        int v30 = *((_DWORD *)v7 + 16);
        if (v20 + 1 != v30)
        {
          unsigned int v31 = v29 >> 6;
          unsigned int v32 = v30 - 1;
          if (v29 >> 6 <= (v30 - 1) >> 6)
          {
            uint64_t v33 = 0;
            uint64_t v34 = v32 >> 6;
            int v35 = v29 & 0x3F;
            BOOL v27 = v35 == 0;
            unint64_t v36 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v35;
            uint64_t v37 = v27 ? -1 : ~v36;
            unint64_t v38 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v32;
            unint64_t v39 = (unint64_t)v31 << 6;
            uint64_t v40 = v34 - v31;
            uint64_t v41 = (uint64_t)&(*v7)[v31];
            while (1)
            {
              uint64_t v42 = v33 ? -1 : v37;
              unint64_t v43 = v40 == v33 ? v38 : -1;
              unint64_t v44 = v42 & v43 & *(void *)(v41 + 8 * v33);
              if (v44) {
                break;
              }
              v39 += 64;
              if (v40 + 1 == ++v33) {
                goto LABEL_49;
              }
            }
            unsigned int v20 = __clz(__rbit64(v44)) + v39;
            if (v20 != -1) {
              continue;
            }
          }
        }
        break;
      }
    }
  }
LABEL_49:
  if (a4) {
    return v10 != 1;
  }
  uint64_t v45 = *((unsigned int *)v7 + 56);
  if (!v45) {
    return v10 != 1;
  }
  unsigned int v46 = 0;
  unsigned int v47 = *(_DWORD *)(a2 + 88);
  unint64_t v48 = (int *)v7[27];
  unint64_t v49 = &v48[v45];
  while (1)
  {
    if (v46 == v47)
    {
      BOOL v50 = 0;
      unsigned int v46 = v47;
    }
    else
    {
      int v51 = *v48;
      do
      {
        int v52 = *(_DWORD *)(*(void *)(a2 + 80) + 4 * v46);
        BOOL v50 = v52 == v51;
      }
      while (v52 != v51 && v47 - 1 != v46++);
    }
    if (a3)
    {
      unint64_t v54 = *(unsigned int *)(a3 + 8);
      if (v54 >= *(unsigned int *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a3 + 4 * v54) = v46 - 1;
      ++*(_DWORD *)(a3 + 8);
    }
    if (v10) {
      BOOL v55 = 0;
    }
    else {
      BOOL v55 = v50;
    }
    int v56 = (v62 & 0x40000000000) == 0 || v50;
    if (v55) {
      int v56 = 0;
    }
    BOOL v57 = v10 == 1 && v50;
    if (v10 == 1) {
      int v56 = v50;
    }
    unsigned int v58 = v50 ? v7 : 0;
    BOOL v59 = v56 == 0;
    BOOL v60 = !v56 && v50;
    BOOL v7 = v59 ? (unint64_t **)v58 : (unint64_t **)v57;
    if (!v60) {
      break;
    }
    if (++v48 == v49) {
      return v10 != 1;
    }
  }
  return (uint64_t)v7;
}

uint64_t llvm::omp::getBestVariantMatchForContext(uint64_t *a1, uint64_t a2)
{
  v81[4] = *MEMORY[0x1E4F143B8];
  unsigned int v77 = 64;
  uint64_t __dst = 0;
  uint64_t v68 = *((unsigned int *)a1 + 2);
  if (!v68) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v63 = 0;
  BOOL v2 = 0;
  unint64_t v3 = 0;
  int v66 = 0;
  __s2 = 0;
  uint64_t v4 = 0;
  uint64_t v73 = 0;
  unsigned int v71 = -1;
  uint64_t v72 = 64;
  do
  {
    uint64_t v5 = *a1;
    uint64_t v6 = *a1 + 368 * v4;
    v80[0] = v81;
    v80[1] = (void *)0x800000000;
    if (!sub_1CC6C6C18((unint64_t **)v6, a2, (uint64_t)v80, 0)) {
      goto LABEL_75;
    }
    unsigned int v75 = 64;
    __s1 = (void *)1;
    uint64_t v7 = v5 + 368 * v4;
    unsigned int v10 = *(_DWORD *)(v7 + 224);
    unint64_t v9 = (unsigned int *)(v7 + 224);
    uint64_t v8 = v10;
    int v11 = *(_DWORD *)(v6 + 64);
    if (!v11) {
      goto LABEL_48;
    }
    uint64_t v12 = 0;
    int v13 = -v11;
    int v14 = v11 - 1;
    uint64_t v15 = *(unint64_t **)v6;
    unint64_t v16 = 0xFFFFFFFFFFFFFFFFLL >> v13;
    uint64_t v17 = v14 & 0xFFFFFFC0;
    do
    {
      uint64_t v19 = *v15++;
      uint64_t v18 = v19;
      if (v17 + v12) {
        uint64_t v20 = -1;
      }
      else {
        uint64_t v20 = v16;
      }
      unint64_t v21 = v20 & v18;
      if (v21)
      {
        int v22 = __clz(__rbit64(v21));
        if (v22 + 1 == v12) {
          break;
        }
        int v23 = v22 - v12;
        uint64_t v24 = v5 + 368 * v4 + 264;
        uint64_t v25 = 1 << (v8 + 2);
        uint64_t v64 = 1 << v8;
        uint64_t v65 = 1 << (v8 + 1);
        while (1)
        {
          if (sub_1CD6051E4(v24, v23, &v78))
          {
            sub_1CD60514C((llvm::APInt *)&v78, v24, v23);
            uint64_t v26 = (unint64_t *)&v78;
            if (v79 >= 0x41) {
              uint64_t v26 = v78;
            }
            llvm::APInt::operator+=((uint64_t)&__s1, *v26);
            if (v79 >= 0x41 && v78) {
              MEMORY[0x1D25D9CB0](v78, 0x1000C8000313F17);
            }
          }
          else
          {
            unsigned int OpenMPContextTraitSetForProperty = llvm::omp::getOpenMPContextTraitSetForProperty(v23);
            if ((OpenMPContextTraitSetForProperty > 4 || ((1 << OpenMPContextTraitSetForProperty) & 0x1A) == 0)
              && v23 != 11)
            {
              int OpenMPContextTraitSelectorForProperty = llvm::omp::getOpenMPContextTraitSelectorForProperty(v23);
              switch(OpenMPContextTraitSelectorForProperty)
              {
                case 12:
                  unint64_t v46 = v25;
                  goto LABEL_46;
                case 7:
                  unint64_t v46 = v65;
                  goto LABEL_46;
                case 6:
                  unint64_t v46 = v64;
LABEL_46:
                  llvm::APInt::operator+=((uint64_t)&__s1, v46);
                  break;
              }
            }
          }
          unsigned int v28 = v23 + 1;
          int v29 = *(_DWORD *)(v6 + 64);
          if (v23 + 1 != v29)
          {
            unsigned int v30 = v28 >> 6;
            unsigned int v31 = v29 - 1;
            if (v28 >> 6 <= (v29 - 1) >> 6)
            {
              uint64_t v32 = 0;
              uint64_t v33 = v31 >> 6;
              int v35 = v28 & 0x3F;
              BOOL v34 = v35 == 0;
              unint64_t v36 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v35;
              uint64_t v37 = v34 ? -1 : ~v36;
              unint64_t v38 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v31;
              unsigned int v39 = v30 << 6;
              uint64_t v40 = v33 - v30;
              uint64_t v41 = *(void *)v6 + 8 * v30;
              while (1)
              {
                uint64_t v42 = v32 ? -1 : v37;
                unint64_t v43 = v40 == v32 ? v38 : -1;
                unint64_t v44 = v42 & v43 & *(void *)(v41 + 8 * v32);
                if (v44) {
                  break;
                }
                v39 += 64;
                if (v40 + 1 == ++v32) {
                  goto LABEL_47;
                }
              }
              int v23 = __clz(__rbit64(v44)) + v39;
              if (v23 != -1) {
                continue;
              }
            }
          }
LABEL_47:
          uint64_t v8 = *v9;
          goto LABEL_48;
        }
      }
      v12 -= 64;
    }
    while (v17 + v12 != -64);
LABEL_48:
    if (v8)
    {
      uint64_t v47 = 0;
      uint64_t v48 = 4 * v8;
      do
      {
        llvm::APInt::operator+=((uint64_t)&__s1, 1 << *(_DWORD *)((char *)v80[0] + v47));
        v47 += 4;
      }
      while (v48 != v47);
    }
    uint64_t v49 = v75;
    if (v75 > 0x40)
    {
      int v52 = (char *)__s1;
      unint64_t v56 = ((unint64_t)v75 + 63) >> 3;
      unint64_t v57 = v56 & 0x3FFFFFF8;
      while (v57)
      {
        unint64_t v58 = *(void *)((char *)__s1 + v57 - 8);
        unint64_t v59 = *(void *)&v66[v57 - 8];
        v57 -= 8;
        if (v58 != v59)
        {
          if (v58 <= v59)
          {
            BOOL v50 = v2;
            uint64_t v55 = v72;
            uint64_t v6 = v73;
            unsigned int v51 = v71;
            unint64_t v54 = __s2;
            goto LABEL_70;
          }
          break;
        }
      }
      unsigned int v51 = v4;
      if (!memcmp(__s1, __s2, v56 & 0x3FFFFFF8))
      {
        uint64_t v53 = v73;
        goto LABEL_55;
      }
      goto LABEL_67;
    }
    BOOL v50 = (char *)__s1;
    if ((unint64_t)__s1 < v3)
    {
      uint64_t v49 = v72;
      uint64_t v6 = v73;
      BOOL v50 = v2;
      int v66 = (char *)v3;
      __s2 = (char *)v3;
      unsigned int v51 = v71;
      goto LABEL_74;
    }
    int v52 = v2;
    unint64_t v3 = (unint64_t)v2;
    __s2 = v2;
    unsigned int v51 = v4;
    uint64_t v53 = v73;
    if (__s1 != v2)
    {
LABEL_57:
      if (v49 <= 0x40 && v72 <= 0x40)
      {
        uint64_t __dst = v50;
        unsigned int v77 = v49;
        unint64_t v63 = v50;
        unint64_t v3 = (unint64_t)v50;
        int v66 = v50;
        __s2 = v50;
        goto LABEL_74;
      }
LABEL_67:
      llvm::APInt::reallocate((uint64_t)&__dst, v49);
      uint64_t v55 = v77;
      if (v77 <= 0x40)
      {
        BOOL v60 = (char *)__s1;
        uint64_t __dst = __s1;
      }
      else
      {
        BOOL v60 = (char *)__dst;
        memcpy(__dst, __s1, (((unint64_t)v77 + 63) >> 3) & 0x3FFFFFF8);
      }
      LODWORD(v49) = v75;
      BOOL v50 = v60;
      unint64_t v3 = (unint64_t)v60;
      unint64_t v54 = v60;
      unint64_t v63 = v60;
      int v66 = v60;
      goto LABEL_70;
    }
LABEL_55:
    if ((sub_1CC6C74DC(v6, v53) & 1) == 0)
    {
      BOOL v50 = v52;
      if (sub_1CC6C74DC(v53, v6)) {
        goto LABEL_57;
      }
    }
    BOOL v50 = v2;
    unint64_t v54 = __s2;
    int v66 = __s2;
    uint64_t v6 = v53;
    unsigned int v51 = v71;
    uint64_t v55 = v72;
LABEL_70:
    __s2 = v54;
    if (v49 >= 0x41 && __s1) {
      MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
    }
    uint64_t v49 = v55;
LABEL_74:
    uint64_t v72 = v49;
    uint64_t v73 = v6;
    BOOL v2 = v50;
    unsigned int v71 = v51;
LABEL_75:
    if (v80[0] != v81) {
      free(v80[0]);
    }
    ++v4;
  }
  while (v4 != v68);
  if (v72 < 0x41) {
    return v71;
  }
  uint64_t v61 = v71;
  if (v63) {
    MEMORY[0x1D25D9CB0](v63, 0x1000C8000313F17);
  }
  return v61;
}

uint64_t sub_1CC6C74DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    unsigned int v3 = 0;
    uint64_t v4 = 8 * v2;
    uint64_t v5 = *(int8x8_t **)a1;
    do
    {
      int8x8_t v6 = *v5++;
      uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
      v7.i16[0] = vaddlv_u8(v7);
      v3 += v7.i32[0];
      v4 -= 8;
    }
    while (v4);
  }
  else
  {
    unsigned int v3 = 0;
  }
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if (v8)
  {
    unsigned int v9 = 0;
    uint64_t v10 = 8 * v8;
    int v11 = *(int8x8_t **)a2;
    do
    {
      int8x8_t v12 = *v11++;
      uint8x8_t v13 = (uint8x8_t)vcnt_s8(v12);
      v13.i16[0] = vaddlv_u8(v13);
      v9 += v13.i32[0];
      v10 -= 8;
    }
    while (v10);
  }
  else
  {
    unsigned int v9 = 0;
  }
  if (v3 >= v9) {
    return 0;
  }
  int v14 = *(_DWORD *)(a1 + 64);
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = (v14 - 1) >> 6;
    uint64_t v17 = v16 << 6;
    uint64_t v18 = *(int8x8_t **)a1;
    while (1)
    {
      uint64_t v20 = (uint64_t)*v18++;
      uint64_t v19 = v20;
      unint64_t v21 = v17 == v15 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v14 : -1;
      unint64_t v22 = v21 & v19;
      if (v22) {
        break;
      }
      v15 += 64;
      if (v17 + 64 == v15) {
        goto LABEL_39;
      }
    }
    unint64_t v23 = __clz(__rbit64(v22)) + v15;
    if (v23 != -1)
    {
      LODWORD(v24) = v23;
      while (((*(void *)(*(void *)a2 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
      {
        unsigned int v25 = v24 + 1;
        if (v25 != v14)
        {
          unsigned int v26 = v25 >> 6;
          if (v25 >> 6 <= v16)
          {
            uint64_t v27 = 0;
            int v29 = v25 & 0x3F;
            BOOL v28 = v29 == 0;
            unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v29;
            uint64_t v31 = v28 ? -1 : ~v30;
            unint64_t v32 = (unint64_t)v26 << 6;
            uint64_t v33 = v16 - v26;
            uint64_t v34 = *(void *)a1 + 8 * v26;
            while (1)
            {
              uint64_t v35 = v27 ? -1 : v31;
              unint64_t v36 = v33 == v27 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v14 : -1;
              unint64_t v37 = v35 & v36 & *(void *)(v34 + 8 * v27);
              if (v37) {
                break;
              }
              v32 += 64;
              if (v33 + 1 == ++v27) {
                goto LABEL_39;
              }
            }
            unint64_t v24 = __clz(__rbit64(v37)) + v32;
            unint64_t v23 = v24;
            if (v24 != -1) {
              continue;
            }
          }
        }
        goto LABEL_39;
      }
      return 0;
    }
  }
LABEL_39:
  uint64_t v38 = *(unsigned int *)(a1 + 224);
  uint64_t v39 = *(unsigned int *)(a2 + 224);
  if (v38 > v39) {
    return 0;
  }
  BOOL v40 = v38 == 0;
  if (v38 && v39)
  {
    uint64_t v42 = *(_DWORD **)(a2 + 216);
    unint64_t v43 = *(int **)(a1 + 216);
    unint64_t v44 = &v43[v38];
    uint64_t v45 = &v42[v39];
    do
    {
      unint64_t v46 = v43;
      while (1)
      {
        int v47 = *v46++;
        if (v47 == *v42) {
          break;
        }
        unint64_t v43 = v46;
        if (v46 == v44) {
          return 1;
        }
      }
      BOOL v40 = ++v43 == v44;
      if (v43 == v44) {
        break;
      }
      ++v42;
    }
    while (v42 != v45);
  }
  return v40;
}

uint64_t llvm::omp::getOpenMPContextTraitSetKind(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  switch(a2)
  {
    case 4:
      uint64_t v3 = 0x100000004;
      BOOL v4 = *(_DWORD *)a1 == 1919251317;
      goto LABEL_18;
    case 6:
      if (*(_DWORD *)a1 != 1769366884 || *(_WORD *)(a1 + 4) != 25955) {
        goto LABEL_13;
      }
      uint64_t v2 = 0x100000002;
      break;
    case 7:
      if (*(_DWORD *)a1 == 1635151465 && *(_DWORD *)(a1 + 3) == 1684630625) {
        uint64_t v2 = 0x100000000;
      }
      else {
LABEL_13:
      }
        uint64_t v2 = 0;
      break;
    case 9:
      uint64_t v2 = 0x100000001;
      if (*(void *)a1 ^ 0x63757274736E6F63 | *(unsigned __int8 *)(a1 + 8) ^ 0x74) {
        uint64_t v2 = 0;
      }
      break;
    case 14:
      uint64_t v3 = 0x100000003;
      BOOL v4 = (*(void *)a1 ^ 0x6E656D656C706D69 | *(void *)(a1 + 6) ^ 0x6E6F697461746E65) == 0;
LABEL_18:
      if (v4) {
        uint64_t v2 = v3;
      }
      else {
        uint64_t v2 = 0;
      }
      break;
    default:
      break;
  }
  if ((v2 & 0x100000000) != 0) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t llvm::omp::getOpenMPContextTraitSelectorKind(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  switch(a2)
  {
    case 3:
      if (*(_WORD *)a1 == 28518 && *(unsigned char *)(a1 + 2) == 114)
      {
        uint64_t v2 = 0x100000004;
      }
      else
      {
        if (*(_WORD *)a1 != 29545 || *(unsigned char *)(a1 + 2) != 97) {
          goto LABEL_66;
        }
        uint64_t v2 = 0x10000000CLL;
      }
      break;
    case 4:
      switch(*(_DWORD *)a1)
      {
        case 0x646D6973:
          uint64_t v2 = 0x100000005;
          break;
        case 0x646E696B:
          uint64_t v2 = 0x100000006;
          break;
        case 0x68637261:
          uint64_t v2 = 0x100000007;
          break;
        default:
          goto LABEL_66;
      }
      break;
    case 5:
      if (*(_DWORD *)a1 != 1835099508 || *(unsigned char *)(a1 + 4) != 115) {
        goto LABEL_66;
      }
      uint64_t v2 = 0x100000002;
      break;
    case 6:
      if (*(_DWORD *)a1 == 1735549300 && *(_WORD *)(a1 + 4) == 29797)
      {
        uint64_t v2 = 0x100000001;
      }
      else
      {
        if (*(_DWORD *)a1 != 1684956534 || *(_WORD *)(a1 + 4) != 29295) {
          goto LABEL_66;
        }
        uint64_t v2 = 0x100000008;
      }
      break;
    case 7:
      if (*(_DWORD *)a1 != 1635151465 || *(_DWORD *)(a1 + 3) != 1684630625) {
        goto LABEL_66;
      }
      uint64_t v2 = 0x100000000;
      break;
    case 8:
      if (*(void *)a1 == 0x6C656C6C61726170)
      {
        uint64_t v2 = 0x100000003;
      }
      else
      {
        if (*(void *)a1 != 0x6863746170736964) {
          goto LABEL_66;
        }
        uint64_t v2 = 0x10000000BLL;
      }
      break;
    case 9:
      if (*(void *)a1 == 0x6F69736E65747865 && *(unsigned char *)(a1 + 8) == 110)
      {
        uint64_t v2 = 0x100000009;
      }
      else
      {
        uint64_t v2 = 0x10000000ALL;
        if (*(void *)a1 ^ 0x6F697469646E6F63 | *(unsigned __int8 *)(a1 + 8) ^ 0x6ELL) {
          uint64_t v2 = 0;
        }
      }
      break;
    case 15:
      if (*(void *)a1 == 0x5F64656966696E75 && *(void *)(a1 + 7) == 0x737365726464615FLL)
      {
        uint64_t v2 = 0x10000000DLL;
      }
      else
      {
        if (*(void *)a1 != 0x5F65737265766572 || *(void *)(a1 + 7) != 0x64616F6C66666F5FLL) {
          goto LABEL_66;
        }
        uint64_t v2 = 0x10000000FLL;
      }
      break;
    case 18:
      uint64_t v12 = *(void *)a1 ^ 0x5F63696D616E7964 | *(void *)(a1 + 8) ^ 0x6F7461636F6C6C61 | *(unsigned __int16 *)(a1 + 16) ^ 0x7372;
      uint64_t v13 = 0x100000010;
      goto LABEL_68;
    case 21:
      if (*(void *)a1 == 0x5F64656966696E75
        && *(void *)(a1 + 8) == 0x6D5F646572616873
        && *(void *)(a1 + 13) == 0x79726F6D656D5F64)
      {
        uint64_t v2 = 0x10000000ELL;
      }
      else
      {
LABEL_66:
        uint64_t v2 = 0;
      }
      break;
    case 24:
      uint64_t v12 = *(void *)a1 ^ 0x645F63696D6F7461 | *(void *)(a1 + 8) ^ 0x6D5F746C75616665 | *(void *)(a1 + 16) ^ 0x726564726F5F6D65;
      uint64_t v13 = 0x100000011;
LABEL_68:
      if (v12) {
        uint64_t v2 = 0;
      }
      else {
        uint64_t v2 = v13;
      }
      break;
    default:
      break;
  }
  if ((v2 & 0x300000000) != 0) {
    return v2;
  }
  else {
    return 0;
  }
}

char *llvm::omp::getOpenMPContextTraitPropertyFullName(int a1)
{
  return off_1E684A888[a1];
}

void sub_1CC6C7F30(void *a1)
{
  sub_1CC6C7F68(a1);

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CC6C7F68(void *a1)
{
  *a1 = &unk_1F261B6F8;
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3 != a1 + 3) {
    free(v3);
  }
  return a1;
}

uint64_t llvm::OpenMPIRBuilder::getOrCreateRuntimeFunctionPtr(uint64_t a1, int a2)
{
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), a2);
  if (*(unsigned char *)(v2 + 16)) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t llvm::OpenMPIRBuilder::createParallel(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, llvm *a10, llvm::CastInst *a11, unsigned int a12)
{
  v60[4] = *MEMORY[0x1E4F143B8];
  if (sub_1CD60CD08(a1, a2))
  {
    unsigned int v53 = 0;
    uint64_t v17 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v53);
    Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v17, v53, 0, 0);
    ThreadID = (void *)llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
    if (a11)
    {
      *(void *)&long long v55 = 0;
      v54[0] = Ident;
      v54[1] = ThreadID;
      uint64_t v19 = *(llvm::Type ****)(a1 + 2120);
      LOWORD(v57) = 257;
      *(void *)&long long v55 = sub_1CBF56614(a1 + 344, a11, v19, 0, (uint64_t)v56, v18);
      llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 9);
      uint64_t v21 = v20;
      unint64_t v22 = 0;
      if (*(unsigned char *)(v21 + 16)) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = v21;
      }
      if (v23) {
        unint64_t v22 = *(uint64_t ***)(v23 + 24);
      }
      LOWORD(v57) = 257;
      sub_1CB845BAC((uint64_t *)(a1 + 344), v22, (uint64_t **)v23, (uint64_t *)v54, 3, (uint64_t)v56, 0);
    }
    if (a12 != 6)
    {
      *(void *)&long long v55 = 0;
      v54[0] = Ident;
      v54[1] = ThreadID;
      *(void *)&long long v55 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), a12, (const llvm::APInt *)1);
      llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 10);
      uint64_t v25 = v24;
      unsigned int v26 = 0;
      if (*(unsigned char *)(v25 + 16)) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = v25;
      }
      if (v27) {
        unsigned int v26 = *(uint64_t ***)(v27 + 24);
      }
      LOWORD(v57) = 257;
      sub_1CB845BAC((uint64_t *)(a1 + 344), v26, (uint64_t **)v27, (uint64_t *)v54, 3, (uint64_t)v56, 0);
    }
    uint64_t v28 = *(void *)(a1 + 392);
    unint64_t v58 = v60;
    uint64_t v59 = 0x400000000;
    if (a3)
    {
      sub_1CBF5385C(a1 + 344, a3, a4);
    }
    else
    {
      *(void *)(a1 + 392) = 0;
      *(void *)(a1 + 400) = 0;
    }
    int v29 = *(llvm::Type **)(a1 + 2120);
    v56[0] = "tid.addr";
    LOWORD(v57) = 259;
    unint64_t v30 = sub_1CB935044((uint64_t *)(a1 + 344), v29, 0, (uint64_t)v56);
    uint64_t v31 = *(llvm::Type **)(a1 + 2120);
    v56[0] = "zero.addr";
    LOWORD(v57) = 259;
    uint64_t v34 = sub_1CB935044((uint64_t *)(a1 + 344), v31, 0, (uint64_t)v56);
    if (a10)
    {
      NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 2120), v32, v33);
      sub_1CC27BF8C((uint64_t *)(a1 + 344), (uint64_t)NullValue, (uint64_t)v30, 0, 0);
      uint64_t v39 = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 2120), v37, v38);
      sub_1CC27BF8C((uint64_t *)(a1 + 344), (uint64_t)v39, (uint64_t)v34, 0, 0);
    }
    else
    {
      if (v59 >= HIDWORD(v59)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v58[v59] = v30;
      unsigned int v35 = v59 + 1;
      LODWORD(v59) = v35;
      if (v35 >= HIDWORD(v59)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v58[v35] = v34;
      LODWORD(v59) = v59 + 1;
    }
    uint64_t v41 = (char *)operator new(0x40uLL);
    *((_DWORD *)v41 + 5) &= 0x38000000u;
    *(void *)uint64_t v41 = **(void **)(a1 + 408) + 1576;
    *((void *)v41 + 1) = 0;
    v41[16] = 35;
    uint64_t v42 = v41 + 24;
    *(_OWORD *)(v41 + 44) = 0u;
    *(_OWORD *)(v41 + 33) = 0u;
    *(_OWORD *)(v41 + 17) = 0u;
    *((void *)v41 + 5) = v28;
    *(_WORD *)(v28 + 18) &= ~0x8000u;
    uint64_t v48 = (llvm::Value *)v41;
    if ((v41[23] & 0x10) != 0)
    {
      uint64_t v45 = *(void *)(v28 + 56);
      if (v45)
      {
        unint64_t v46 = *(llvm::ValueSymbolTable **)(v45 + 104);
        if (v46)
        {
          int v47 = v41 + 24;
          llvm::ValueSymbolTable::reinsertValue(v46, (llvm::Value *)v41);
          uint64_t v42 = v47;
          uint64_t v41 = (char *)v48;
        }
      }
    }
    uint64_t v43 = *(void *)(v28 + 40);
    *((void *)v41 + 3) = v43;
    *((void *)v41 + 4) = v28 + 40;
    *(void *)(v43 + 8) = v42;
    *(void *)(v28 + 40) = v42;
    unsigned int v51 = 0;
    int v52 = v41;
    if (a10) {
      llvm::SplitBlockAndInsertIfThenElse(a10, v48, (llvm::Instruction *)&v52, &v51, 0, v40);
    }
    uint64_t v44 = *((void *)v41 + 5);
    v56[0] = "omp.par.entry";
    LOWORD(v57) = 259;
    llvm::BasicBlock::splitBasicBlock(v44, (uint64_t)(v41 + 24), (uint64_t)v56, 0);
  }
  return *a2;
}

uint64_t sub_1CC6CA484(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2 + 40 * *(unsigned int *)(a2 + 8);
  uint64_t v5 = *(void *)(v4 - 16);
  if (v5)
  {
    if (v5 == v4 - 40)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 24))(v5, a1);
    }
    else
    {
      *(void *)(a1 + 24) = v5;
      *(void *)(v4 - 16) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  int v6 = *(_DWORD *)(v4 - 8);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(v4 - 4);
  *(_DWORD *)(a1 + 32) = v6;

  return sub_1CC6D54E0(a2);
}

void llvm::OpenMPIRBuilder::createCanonicalLoop(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, llvm::Value *a5, llvm::Value *a6, llvm::BinaryOperator *a7, int a8, char a9, long long a10, uint64_t a11)
{
  uint64_t v15 = *(void *)a5;
  if ((void)a10) {
    long long v71 = a10;
  }
  else {
    long long v71 = *a2;
  }
  uint64_t v16 = (unsigned __int8 *)*((void *)a2 + 2);
  uint64_t v72 = v16;
  if (v16) {
    llvm::MetadataTracking::track((uint64_t)&v72, v16, 2);
  }
  sub_1CD60CD08(a1, (uint64_t *)&v71);
  uint64_t v18 = *(llvm::ConstantInt **)v15;
  unsigned int v19 = *(_DWORD *)(v15 + 8);
  LODWORD(v67) = v19 >> 8;
  if (v19 >> 8 >= 0x41) {
    operator new[]();
  }
  unint64_t v66 = 0;
  uint64_t v21 = (llvm::Value *)llvm::ConstantInt::get(v18, (llvm::LLVMContext *)&v66, v17);
  if (v67 >= 0x41 && v66) {
    MEMORY[0x1D25D9CB0](v66, 0x1000C8000313F17);
  }
  unint64_t v22 = *(llvm::ConstantInt **)v15;
  unsigned int v23 = *(_DWORD *)(v15 + 8);
  LODWORD(v67) = v23 >> 8;
  if (v23 >> 8 > 0x40) {
    operator new[]();
  }
  if (v23 <= 0xFF) {
    LOBYTE(v24) = 0;
  }
  else {
    unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v23) + 63);
  }
  unint64_t v66 = v24 & 1;
  uint64_t v25 = (llvm::Value *)llvm::ConstantInt::get(v22, (llvm::LLVMContext *)&v66, v20);
  if (v67 >= 0x41 && v66) {
    MEMORY[0x1D25D9CB0](v66, 0x1000C8000313F17);
  }
  uint64_t v26 = a11;
  uint64_t v57 = a1;
  uint64_t v27 = (llvm::IRBuilderBase *)(a1 + 344);
  long long v55 = v21;
  if (a8)
  {
    LOWORD(v70) = 257;
    uint64_t v28 = sub_1CB845F20((uint64_t)v27, 40, a7, (uint64_t)v21, (uint64_t)&v66);
    LOWORD(v70) = 257;
    int v29 = sub_1CD5A6358((uint64_t)v27, a7, (uint64_t)&v66, 0, 0);
    __int16 v65 = 257;
    Select = llvm::IRBuilderBase::CreateSelect(v27, v28, v29, a7, (const llvm::Twine *)&v62, 0);
    LOWORD(v70) = 257;
    uint64_t v31 = llvm::IRBuilderBase::CreateSelect(v27, v28, a6, a5, (const llvm::Twine *)&v66, 0);
    LOWORD(v70) = 257;
    unint64_t v32 = (const char *)a5;
    uint64_t v26 = a11;
    uint64_t v33 = llvm::IRBuilderBase::CreateSelect(v27, v28, a5, a6, (const llvm::Twine *)&v66, 0);
    LOWORD(v70) = 257;
    uint64_t v34 = sub_1CB84494C((uint64_t)v27, (uint64_t)v33, (uint64_t)v31, (uint64_t)&v66, 0, 1);
    if (a9) {
      __int16 v35 = 40;
    }
    else {
      __int16 v35 = 41;
    }
    LOWORD(v70) = 257;
    unint64_t v36 = sub_1CB845F20((uint64_t)v27, v35, v33, (uint64_t)v31, (uint64_t)&v66);
    if (!a9)
    {
LABEL_18:
      LOWORD(v70) = 257;
      unint64_t v37 = sub_1CB84494C((uint64_t)v27, (uint64_t)v34, (uint64_t)v25, (uint64_t)&v66, 0, 0);
      __int16 v65 = 257;
      uint64_t v38 = sub_1CC57DA50((uint64_t)v27, (uint64_t)v37, (uint64_t)Select, (uint64_t)&v62, 0);
      __int16 v61 = 257;
      uint64_t v39 = sub_1CB844A3C((uint64_t)v27, v38, (uint64_t)v25, (uint64_t)v60, 0, 0);
      LOWORD(v70) = 257;
      BOOL v40 = sub_1CB845F20((uint64_t)v27, 37, v34, (uint64_t)Select, (uint64_t)&v66);
      LOWORD(v70) = 257;
      uint64_t v41 = llvm::IRBuilderBase::CreateSelect(v27, v40, v25, v39, (const llvm::Twine *)&v66, 0);
      goto LABEL_24;
    }
  }
  else
  {
    LOWORD(v70) = 257;
    uint64_t v42 = sub_1CB84494C((uint64_t)v27, (uint64_t)a6, (uint64_t)a5, (uint64_t)&v66, 1, 0);
    uint64_t v43 = (uint64_t)a5;
    uint64_t v34 = v42;
    if (a9) {
      __int16 v44 = 36;
    }
    else {
      __int16 v44 = 37;
    }
    LOWORD(v70) = 257;
    unint64_t v32 = (const char *)v43;
    unint64_t v36 = sub_1CB845F20((uint64_t)v27, v44, a6, v43, (uint64_t)&v66);
    Select = a7;
    if (!a9) {
      goto LABEL_18;
    }
  }
  LOWORD(v70) = 257;
  uint64_t v45 = sub_1CC57DA50((uint64_t)v27, (uint64_t)v34, (uint64_t)Select, (uint64_t)&v66, 0);
  __int16 v65 = 257;
  uint64_t v41 = sub_1CB844A3C((uint64_t)v27, v45, (uint64_t)v25, (uint64_t)&v62, 0, 0);
LABEL_24:
  int v46 = *(unsigned __int8 *)(v26 + 32);
  if (*(unsigned char *)(v26 + 32))
  {
    if (v46 == 1)
    {
      int v47 = "omp_";
      *(void *)&long long v62 = "omp_";
      __int16 v65 = 259;
      char v48 = 3;
    }
    else
    {
      uint64_t v50 = *(void *)v26;
      uint64_t v51 = *(void *)(v26 + 8);
      char v48 = 2;
      if (*(unsigned char *)(v26 + 33) != 1)
      {
        LOBYTE(v46) = 2;
        uint64_t v50 = v26;
      }
      *(void *)&long long v62 = "omp_";
      uint64_t v63 = v50;
      uint64_t v64 = v51;
      LOBYTE(v65) = 3;
      HIBYTE(v65) = v46;
      int v47 = (const char *)&v62;
    }
    unint64_t v66 = (unint64_t)v47;
    uint64_t v68 = ".tripcount";
    char v49 = 3;
  }
  else
  {
    char v48 = 0;
    __int16 v65 = 256;
    char v49 = 1;
  }
  LOBYTE(v70) = v48;
  BYTE1(v70) = v49;
  int v52 = llvm::IRBuilderBase::CreateSelect(v27, v36, v55, v41, (const llvm::Twine *)&v66, 0);
  unint64_t v66 = v57;
  int v67 = a7;
  uint64_t v68 = v32;
  uint64_t v69 = a3;
  uint64_t v70 = a4;
  if ((void)a10) {
    unsigned int v53 = a2;
  }
  else {
    unsigned int v53 = (long long *)(v57 + 392);
  }
  long long v62 = *v53;
  uint64_t v63 = 0;
  llvm::OpenMPIRBuilder::createCanonicalLoop(v57, &v62, (uint64_t)sub_1CC6DCDEC, (uint64_t)&v66, (uint64_t)v52, (uint64_t *)v26);
}

double llvm::OpenMPIRBuilder::applyStaticWorkshareLoop(uint64_t a1, unsigned __int8 **a2, llvm::CanonicalLoopInfo *this, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  int64_t v100 = this;
  uint64_t Preheader = llvm::CanonicalLoopInfo::getPreheader(this);
  if (Preheader)
  {
    sub_1CBF5385C(a1 + 344, Preheader, *(void *)(Preheader + 40));
  }
  else
  {
    *(void *)(a1 + 392) = 0;
    *(void *)(a1 + 400) = 0;
  }
  uint64_t v12 = *a2;
  BOOL v99 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track((uint64_t)&v99, v12, 2);
    uint64_t v13 = (uint64_t)v99;
  }
  else
  {
    uint64_t v13 = 0;
  }
  sub_1CB8461A4(a1 + 344, 0, v13);
  if (v99)
  {
    int v14 = *v99;
    if ((v14 - 4) > 0x1E)
    {
      if ((v14 - 3) >= 0xFFFFFFFE) {
        uint64_t v68 = v99;
      }
      else {
        uint64_t v68 = 0;
      }
      if ((v14 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v69 = (unint64_t)(v68 + 8);
LABEL_66:
        *(void *)&long long v103 = &v99;
        sub_1CC5FA668(v69 + 16, &v103);
        goto LABEL_11;
      }
      if (v14 == 3) {
        *((void *)v99 + 1) = 0;
      }
    }
    else if ((v99[1] & 0x7F) == 2 || *((_DWORD *)v99 + 3))
    {
      uint64_t v84 = *((void *)v99 + 2);
      if ((v84 & 4) != 0)
      {
        unint64_t v69 = v84 & 0xFFFFFFFFFFFFFFF8;
        if (v69) {
          goto LABEL_66;
        }
      }
    }
  }
LABEL_11:
  unsigned int v98 = 0;
  uint64_t v15 = *a2;
  uint64_t v97 = v15;
  if (v15) {
    llvm::MetadataTracking::track((uint64_t)&v97, v15, 2);
  }
  uint64_t v16 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, (llvm::DebugLoc *)&v97, &v98, 0);
  if (v97)
  {
    int v17 = *v97;
    if ((v17 - 4) > 0x1E)
    {
      if ((v17 - 3) >= 0xFFFFFFFE) {
        uint64_t v70 = v97;
      }
      else {
        uint64_t v70 = 0;
      }
      if ((v17 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v71 = (unint64_t)(v70 + 8);
LABEL_72:
        *(void *)&long long v103 = &v97;
        sub_1CC5FA668(v71 + 16, &v103);
        goto LABEL_17;
      }
      if (v17 == 3) {
        *((void *)v97 + 1) = 0;
      }
    }
    else if ((v97[1] & 0x7F) == 2 || *((_DWORD *)v97 + 3))
    {
      uint64_t v85 = *((void *)v97 + 2);
      if ((v85 & 4) != 0)
      {
        unint64_t v71 = v85 & 0xFFFFFFFFFFFFFFF8;
        if (v71) {
          goto LABEL_72;
        }
      }
    }
  }
LABEL_17:
  char v94 = (unsigned __int8 *)a2;
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v16, v98, 0, 0);
  unsigned int v19 = *(llvm::Type **)(*(void *)(*(void *)this + 48) - 24);
  if ((*((_DWORD *)v19 + 2) & 0xFFFFFF00) == 0x2000) {
    int v20 = 59;
  }
  else {
    int v20 = 61;
  }
  RuntimeFunction = (uint64_t **)llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), v20);
  unsigned int v23 = v22;
  unint64_t v24 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 62);
  unsigned int v90 = v25;
  uint64_t v91 = (uint64_t **)v24;
  char v88 = v23;
  BOOL v89 = Ident;
  if (a4)
  {
    sub_1CBF5385C(a1 + 344, a4, a5);
  }
  else
  {
    *(void *)(a1 + 392) = 0;
    *(void *)(a1 + 400) = 0;
  }
  uint64_t v26 = (llvm::Type *)(***(void ***)(a1 + 336) + 1960);
  *(void *)&long long v103 = "p.lastiter";
  LOWORD(v106) = 259;
  uint64_t v87 = sub_1CB935044((uint64_t *)(a1 + 344), v26, 0, (uint64_t)&v103);
  *(void *)&long long v103 = "p.lowerbound";
  LOWORD(v106) = 259;
  uint64_t v27 = sub_1CB935044((uint64_t *)(a1 + 344), v19, 0, (uint64_t)&v103);
  *(void *)&long long v103 = "p.upperbound";
  LOWORD(v106) = 259;
  char v86 = sub_1CB935044((uint64_t *)(a1 + 344), v19, 0, (uint64_t)&v103);
  *(void *)&long long v103 = "p.stride";
  LOWORD(v106) = 259;
  uint64_t v28 = sub_1CB935044((uint64_t *)(a1 + 344), v19, 0, (uint64_t)&v103);
  uint64_t v29 = llvm::CanonicalLoopInfo::getPreheader(this);
  uint64_t v30 = 0;
  uint64_t v31 = *(void *)(v29 + 40);
  if (v31) {
    uint64_t v32 = v31 - 24;
  }
  else {
    uint64_t v32 = 0;
  }
  if (*(unsigned __int8 *)(v32 + 16) - 29 >= 0xB) {
    uint64_t v32 = 0;
  }
  *(void *)(a1 + 392) = *(void *)(v32 + 40);
  *(void *)(a1 + 400) = v32 + 24;
  uint64_t v33 = *(unsigned __int8 **)(v32 + 48);
  v101[0] = (uint64_t)v33;
  if (v33)
  {
    llvm::MetadataTracking::track((uint64_t)v101, v33, 2);
    uint64_t v30 = v101[0];
  }
  sub_1CB8461A4(a1 + 344, 0, v30);
  if (v101[0])
  {
    int v79 = *(unsigned __int8 *)v101[0];
    if ((v79 - 4) > 0x1E)
    {
      if ((v79 - 3) >= 0xFFFFFFFE) {
        uint64_t v82 = v101[0];
      }
      else {
        uint64_t v82 = 0;
      }
      if ((v79 - 3) < 0xFFFFFFFE)
      {
        if (v79 == 3) {
          *(void *)(v101[0] + 8) = 0;
        }
        goto LABEL_31;
      }
      unint64_t v81 = v82 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v101[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v101[0] + 12)) {
        goto LABEL_31;
      }
      uint64_t v80 = *(void *)(v101[0] + 16);
      if ((v80 & 4) == 0) {
        goto LABEL_31;
      }
      unint64_t v81 = v80 & 0xFFFFFFFFFFFFFFF8;
      if (!v81) {
        goto LABEL_31;
      }
    }
    *(void *)&long long v103 = v101;
    sub_1CC5FA668(v81 + 16, &v103);
  }
LABEL_31:
  uint64_t v34 = llvm::ConstantInt::get(v19, 0, 0);
  char v95 = llvm::ConstantInt::get(v19, 1uLL, 0);
  sub_1CC27BF8C((uint64_t *)(a1 + 344), (uint64_t)v34, (uint64_t)v27, 0, 0);
  uint64_t v35 = *(void *)(*((void *)this + 1) + 48);
  if (v35) {
    uint64_t v36 = v35 - 24;
  }
  else {
    uint64_t v36 = 0;
  }
  int v37 = *(_DWORD *)(v36 + 20);
  uint64_t v38 = v26;
  if ((v37 & 0x40000000) != 0) {
    uint64_t v39 = *(void *)(v36 - 8);
  }
  else {
    uint64_t v39 = v36 - 32 * (v37 & 0x7FFFFFF);
  }
  uint64_t v40 = *(void *)(v39 + 32);
  LOWORD(v106) = 257;
  uint64_t v41 = sub_1CB84494C(a1 + 344, v40, (uint64_t)v95, (uint64_t)&v103, 0, 0);
  sub_1CC27BF8C((uint64_t *)(a1 + 344), (uint64_t)v41, (uint64_t)v86, 0, 0);
  sub_1CC27BF8C((uint64_t *)(a1 + 344), (uint64_t)v95, (uint64_t)v28, 0, 0);
  uint64_t ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, v89);
  uint64_t v43 = (unsigned __int8 *)llvm::ConstantInt::get(v38, 0x22uLL, 0);
  *(void *)&long long v103 = v89;
  *((void *)&v103 + 1) = ThreadID;
  uint64_t v92 = ThreadID;
  char v104 = v43;
  char v105 = v87;
  BOOL v106 = v27;
  int v107 = v86;
  char v108 = v28;
  char v109 = v95;
  char v110 = v34;
  __int16 v102 = 257;
  sub_1CB845BAC((uint64_t *)(a1 + 344), RuntimeFunction, v88, (uint64_t *)&v103, 9, (uint64_t)v101, 0);
  __int16 v102 = 257;
  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(a1 + 392) + 56) + 40) + 272), v19, 1);
  uint64_t v45 = operator new(0x60uLL);
  v45[13] = v45[13] & 0x38000000 | 1;
  int v46 = (llvm::Instruction *)(v45 + 8);
  *(void *)uint64_t v45 = 0;
  *((void *)v45 + 1) = 0;
  *((void *)v45 + 2) = 0;
  *((void *)v45 + 3) = v45 + 8;
  LOWORD(v106) = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v45 + 8), (uint64_t)v19, (uint64_t)v27, (const char **)&v103, 0, Alignment, 0);
  (*(void (**)(void, llvm::Instruction *, uint64_t *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v46, v101, *(void *)(a1 + 392), *(void *)(a1 + 400));
  uint64_t v47 = *(unsigned int *)(a1 + 352);
  if (v47)
  {
    uint64_t v72 = *(void *)(a1 + 344);
    uint64_t v73 = v72 + 16 * v47;
    do
    {
      llvm::Instruction::setMetadata(v46, *(_DWORD *)v72, *(llvm::MDNode **)(v72 + 8));
      v72 += 16;
    }
    while (v72 != v73);
  }
  uint64_t v96 = v46;
  __int16 v102 = 257;
  char v48 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(a1 + 392) + 56) + 40) + 272), v19, 1);
  char v49 = operator new(0x60uLL);
  v49[13] = v49[13] & 0x38000000 | 1;
  uint64_t v50 = (llvm::Instruction *)(v49 + 8);
  *(void *)char v49 = 0;
  *((void *)v49 + 1) = 0;
  *((void *)v49 + 2) = 0;
  *((void *)v49 + 3) = v49 + 8;
  LOWORD(v106) = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v49 + 8), (uint64_t)v19, (uint64_t)v86, (const char **)&v103, 0, v48, 0);
  (*(void (**)(void, llvm::Instruction *, uint64_t *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v50, v101, *(void *)(a1 + 392), *(void *)(a1 + 400));
  uint64_t v51 = *(unsigned int *)(a1 + 352);
  if (v51)
  {
    uint64_t v74 = *(void *)(a1 + 344);
    uint64_t v75 = v74 + 16 * v51;
    do
    {
      llvm::Instruction::setMetadata(v50, *(_DWORD *)v74, *(llvm::MDNode **)(v74 + 8));
      v74 += 16;
    }
    while (v74 != v75);
  }
  LOWORD(v106) = 257;
  int v52 = sub_1CB84494C(a1 + 344, (uint64_t)v50, (uint64_t)v46, (uint64_t)&v103, 0, 0);
  LOWORD(v106) = 257;
  unsigned int v53 = sub_1CB844A3C(a1 + 344, v52, (uint64_t)v95, (uint64_t)&v103, 0, 0);
  uint64_t v54 = *(void *)(*((void *)this + 1) + 48);
  if (v54) {
    uint64_t v55 = v54 - 24;
  }
  else {
    uint64_t v55 = 0;
  }
  int v56 = *(_DWORD *)(v55 + 20);
  if ((v56 & 0x40000000) != 0) {
    uint64_t v57 = *(void *)(v55 - 8);
  }
  else {
    uint64_t v57 = v55 - 32 * (v56 & 0x7FFFFFF);
  }
  unint64_t v58 = (llvm::Instruction **)(v57 + 32);
  if (*(void *)(v57 + 32))
  {
    **(void **)(v57 + 48) = *(void *)(v57 + 40);
    uint64_t v59 = *(void *)(v57 + 40);
    if (v59) {
      *(void *)(v59 + 16) = *(void *)(v57 + 48);
    }
  }
  *unint64_t v58 = v53;
  if (v53)
  {
    uint64_t v62 = *((void *)v53 + 1);
    BOOL v60 = (llvm::Instruction ***)((char *)v53 + 8);
    uint64_t v61 = v62;
    *(void *)(v57 + 40) = v62;
    if (v62) {
      *(void *)(v61 + 16) = v57 + 40;
    }
    *(void *)(v57 + 48) = v60;
    char *v60 = v58;
  }
  *(void *)&long long v103 = a1;
  *((void *)&v103 + 1) = &v100;
  char v104 = v94;
  char v105 = (llvm::Instruction *)&v96;
  llvm::CanonicalLoopInfo::mapIndVar(this, (uint64_t (*)(uint64_t, uint64_t))sub_1CC6DCE98, (uint64_t)&v103);
  uint64_t v63 = *((void *)v100 + 3);
  uint64_t v64 = *(void *)(v63 + 40);
  if (v64 == v63 + 40)
  {
    uint64_t v65 = 0;
  }
  else
  {
    if (v64) {
      uint64_t v65 = v64 - 24;
    }
    else {
      uint64_t v65 = 0;
    }
    if (*(unsigned __int8 *)(v65 + 16) - 29 >= 0xB) {
      uint64_t v65 = 0;
    }
  }
  sub_1CBF5385C(a1 + 344, *((void *)v100 + 3), v65 + 24);
  v101[0] = (uint64_t)v89;
  v101[1] = v92;
  LOWORD(v106) = 257;
  sub_1CB845BAC((uint64_t *)(a1 + 344), v91, v90, v101, 2, (uint64_t)&v103, 0);
  if (a6)
  {
    long long v103 = *(_OWORD *)(a1 + 392);
    char v104 = *(unsigned __int8 **)v94;
    if (v104) {
      llvm::MetadataTracking::track((uint64_t)&v104, v104, 2);
    }
    if (sub_1CD60CD08(a1, (uint64_t *)&v103)) {
      llvm::OpenMPIRBuilder::emitBarrierImpl(a1, &v103, 33, 0, 0);
    }
    if (v104)
    {
      int v76 = *v104;
      if ((v76 - 4) > 0x1E)
      {
        if ((v76 - 3) >= 0xFFFFFFFE) {
          uint64_t v83 = v104;
        }
        else {
          uint64_t v83 = 0;
        }
        if ((v76 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v78 = (unint64_t)(v83 + 8);
LABEL_111:
          v101[0] = (uint64_t)&v104;
          sub_1CC5FA668(v78 + 16, v101);
          goto LABEL_60;
        }
        if (v76 == 3) {
          *((void *)v104 + 1) = 0;
        }
      }
      else if ((v104[1] & 0x7F) == 2 || *((_DWORD *)v104 + 3))
      {
        uint64_t v77 = *((void *)v104 + 2);
        if ((v77 & 4) != 0)
        {
          unint64_t v78 = v77 & 0xFFFFFFFFFFFFFFF8;
          if (v78) {
            goto LABEL_111;
          }
        }
      }
    }
  }
LABEL_60:
  llvm::BasicBlock::getSingleSuccessor(*((llvm::BasicBlock **)v100 + 3));
  unint64_t v66 = v100;
  double result = 0.0;
  *(_OWORD *)int64_t v100 = 0u;
  *((_OWORD *)v66 + 1) = 0u;
  return result;
}

void llvm::OpenMPIRBuilder::EmitOMPInlinedRegion(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a9)
  {
    sub_1CC6DCD54((uint64_t)v21, a7);
    int v23 = a2;
    char v24 = a10;
    sub_1CD60D4EC(a1, (unint64_t)v21);
    if (v22 == v21)
    {
      (*(void (**)(void *))(v21[0] + 32))(v21);
    }
    else if (v22)
    {
      (*(void (**)(void))(*v22 + 40))();
    }
  }
  uint64_t v12 = *(void *)(a1 + 392);
  int v14 = (uint64_t *)(v12 + 40);
  uint64_t v13 = *(void *)(v12 + 40);
  if (v13 == v12 + 40 || ((uint64_t v15 = (char *)(v13 - 24), v13) ? (v16 = v13 - 24) : (v16 = 0), *(unsigned char *)(v16 + 16) != 30))
  {
    uint64_t v15 = (char *)operator new(0x40uLL);
    *((_DWORD *)v15 + 5) &= 0x38000000u;
    *(void *)uint64_t v15 = **(void **)(a1 + 408) + 1576;
    *((void *)v15 + 1) = 0;
    v15[16] = 35;
    int v17 = v15 + 24;
    *(_OWORD *)(v15 + 44) = 0u;
    *(_OWORD *)(v15 + 33) = 0u;
    *(_OWORD *)(v15 + 17) = 0u;
    *((void *)v15 + 5) = v12;
    *(_WORD *)(v12 + 18) &= ~0x8000u;
    if ((v15[23] & 0x10) != 0)
    {
      uint64_t v19 = *(void *)(v12 + 56);
      if (v19)
      {
        int v20 = *(llvm::ValueSymbolTable **)(v19 + 104);
        if (v20) {
          llvm::ValueSymbolTable::reinsertValue(v20, (llvm::Value *)v15);
        }
      }
    }
    uint64_t v18 = *v14;
    *((void *)v15 + 3) = *v14;
    *((void *)v15 + 4) = v14;
    *(void *)(v18 + 8) = v17;
    *int v14 = (uint64_t)v17;
  }
  v21[0] = "omp_region.end";
  LOWORD(v23) = 259;
  llvm::BasicBlock::splitBasicBlock(v12, (uint64_t)(v15 + 24), (uint64_t)v21, 0);
}

unint64_t *getFreshReductionFunc(uint64_t **a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **a1;
  uint64_t v3 = (uint64_t **)(v2 + 1576);
  v8[0] = (const char *)llvm::PointerType::get((llvm::PointerType *)(v2 + 1912), 0);
  v8[1] = v8[0];
  uint64_t v4 = (llvm::PointerType *)llvm::FunctionType::get(v3, (uint64_t)v8, 2, 0);
  uint64_t v5 = (llvm::Type *)*((unsigned int *)a1 + 72);
  v8[0] = ".omp.reduction.func";
  __int16 v9 = 259;
  int v6 = operator new(0x80uLL);
  *((_DWORD *)v6 + 7) = *((_DWORD *)v6 + 7) & 0x38000000 | 0x40000000;
  *(void *)int v6 = 0;
  return llvm::Function::Function((unint64_t *)v6 + 1, v4, 7, v5, v8, (unint64_t)a1);
}

uint64_t llvm::OpenMPIRBuilder::createReductions(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (sub_1CD60CD08(a1, a2))
  {
    uint64_t v5 = *a2;
    uint64_t v4 = a2[1];
    int v6 = "reduce.finalize";
    LOWORD(v7) = 259;
    llvm::BasicBlock::splitBasicBlock(v5, v4, (uint64_t)&v6, 0);
  }
  return 0;
}

uint64_t llvm::OpenMPIRBuilder::createMaster(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v27[2] = *MEMORY[0x1E4F143B8];
  if (sub_1CD60CD08(a1, a2))
  {
    unsigned int v25 = 0;
    int v11 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v25);
    Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v11, v25, 0, 0);
    uint64_t ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
    v27[0] = (uint64_t)Ident;
    v27[1] = ThreadID;
    llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 43);
    uint64_t v15 = v14;
    uint64_t v16 = 0;
    if (*(unsigned char *)(v15 + 16)) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = v15;
    }
    if (v17) {
      uint64_t v16 = *(uint64_t ***)(v17 + 24);
    }
    __int16 v24 = 257;
    uint64_t v18 = sub_1CB845BAC((uint64_t *)(a1 + 344), v16, (uint64_t **)v17, v27, 2, (uint64_t)v23, 0);
    llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 44);
    if (*(unsigned char *)(v19 + 16)) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = v19;
    }
    if (v20) {
      uint64_t v21 = *(uint64_t ***)(v20 + 24);
    }
    else {
      uint64_t v21 = 0;
    }
    __int16 v24 = 257;
    uint64_t v22 = sub_1CB845BAC((uint64_t *)(a1 + 344), v21, (uint64_t **)v20, v27, 2, (uint64_t)v23, 0);
    sub_1CC6DCD54((uint64_t)v26, a5);
    llvm::OpenMPIRBuilder::EmitOMPInlinedRegion(a1, 35, v18, v22, a3, a4, (uint64_t)v26, 1, 1, 0);
  }
  return *a2;
}

uint64_t llvm::OpenMPIRBuilder::createMasked(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v30[3] = *MEMORY[0x1E4F143B8];
  if (sub_1CD60CD08(a1, a2))
  {
    unsigned int v27 = 0;
    uint64_t v13 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v27);
    Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v13, v27, 0, 0);
    uint64_t ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
    v30[0] = (uint64_t)Ident;
    v30[1] = ThreadID;
    v30[2] = a6;
    v29[0] = (uint64_t)Ident;
    v29[1] = ThreadID;
    llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 45);
    uint64_t v17 = v16;
    uint64_t v18 = 0;
    if (*(unsigned char *)(v17 + 16)) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = v17;
    }
    if (v19) {
      uint64_t v18 = *(uint64_t ***)(v19 + 24);
    }
    __int16 v26 = 257;
    uint64_t v20 = sub_1CB845BAC((uint64_t *)(a1 + 344), v18, (uint64_t **)v19, v30, 3, (uint64_t)v25, 0);
    llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 46);
    if (*(unsigned char *)(v21 + 16)) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = v21;
    }
    if (v22) {
      int v23 = *(uint64_t ***)(v22 + 24);
    }
    else {
      int v23 = 0;
    }
    __int16 v26 = 257;
    uint64_t v24 = sub_1CB845BAC((uint64_t *)(a1 + 344), v23, (uint64_t **)v22, v29, 2, (uint64_t)v25, 0);
    sub_1CC6DCD54((uint64_t)v28, a5);
    llvm::OpenMPIRBuilder::EmitOMPInlinedRegion(a1, 95, v20, v24, a3, a4, (uint64_t)v28, 1, 1, 0);
  }
  return *a2;
}

void llvm::OpenMPIRBuilder::createLoopSkeleton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  int v7 = *((unsigned __int8 *)a7 + 32);
  if (*((unsigned char *)a7 + 32))
  {
    if (v7 == 1)
    {
      v13[0] = "omp_";
      __int16 v14 = 259;
      int v7 = 1;
    }
    else
    {
      uint64_t v9 = a7[1];
      if (*((unsigned char *)a7 + 33) == 1)
      {
        uint64_t v10 = (uint64_t *)*a7;
      }
      else
      {
        int v7 = 2;
        uint64_t v10 = a7;
      }
      v13[0] = "omp_";
      v13[2] = v10;
      v13[3] = v9;
      LOBYTE(v14) = 3;
      HIBYTE(v14) = v7;
    }
    BOOL v11 = v7 == 1;
    if (v7 == 1) {
      LOBYTE(v7) = 3;
    }
    else {
      LOBYTE(v7) = 2;
    }
    uint64_t v12 = (const char *)v13;
    if (v11) {
      uint64_t v12 = "omp_";
    }
    uint64_t v15 = v12;
    uint64_t v16 = ".preheader";
    char v8 = 3;
  }
  else
  {
    __int16 v14 = 256;
    char v8 = 1;
  }
  char v17 = v7;
  char v18 = v8;
  operator new();
}

uint64_t llvm::CanonicalLoopInfo::getPreheader(llvm::CanonicalLoopInfo *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *(void *)(*(void *)this + 8);
  if (v2)
  {
    while (1)
    {
      uint64_t v1 = *(void *)(v2 + 24);
      unsigned int v3 = *(unsigned __int8 *)(v1 + 16);
      BOOL v4 = v1 && v3 >= 0x1C;
      if (v4 && v3 - 29 < 0xB) {
        break;
      }
      uint64_t v2 = *(void *)(v2 + 8);
      if (!v2) {
        return v1;
      }
    }
LABEL_12:
    uint64_t v1 = *(void *)(v1 + 40);
    if (v1 == *((void *)this + 2))
    {
      while (1)
      {
        uint64_t v2 = *(void *)(v2 + 8);
        if (!v2) {
          return *((void *)this + 2);
        }
        uint64_t v1 = *(void *)(v2 + 24);
        unsigned int v7 = *(unsigned __int8 *)(v1 + 16);
        if (v1) {
          BOOL v8 = v7 >= 0x1C;
        }
        else {
          BOOL v8 = 0;
        }
        if (v8 && v7 - 29 <= 0xA) {
          goto LABEL_12;
        }
      }
    }
  }
  return v1;
}

uint64_t llvm::CanonicalLoopInfo::setTripCount(uint64_t this, llvm::Value *a2)
{
  uint64_t v2 = *(void *)(*(void *)(this + 8) + 48);
  if (v2) {
    uint64_t v3 = v2 - 24;
  }
  else {
    uint64_t v3 = 0;
  }
  int v4 = *(_DWORD *)(v3 + 20);
  if ((v4 & 0x40000000) != 0) {
    uint64_t v5 = *(void *)(v3 - 8);
  }
  else {
    uint64_t v5 = v3 - 32 * (v4 & 0x7FFFFFF);
  }
  int v6 = (void *)(v5 + 32);
  if (*(void *)(v5 + 32))
  {
    **(void **)(v5 + 48) = *(void *)(v5 + 40);
    uint64_t v7 = *(void *)(v5 + 40);
    if (v7) {
      *(void *)(v7 + 16) = *(void *)(v5 + 48);
    }
  }
  void *v6 = a2;
  if (a2)
  {
    uint64_t v10 = *((void *)a2 + 1);
    BOOL v8 = (void *)((char *)a2 + 8);
    uint64_t v9 = v10;
    *(void *)(v5 + 40) = v10;
    if (v10) {
      *(void *)(v9 + 16) = v5 + 40;
    }
    *(void *)(v5 + 48) = v8;
    *BOOL v8 = v6;
  }
  return this;
}

void llvm::CanonicalLoopInfo::mapIndVar(void *a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  v18[6] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*a1 + 48);
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  unsigned int v17 = 0;
  uint64_t v5 = *(void *)(v4 + 8);
  if (v5)
  {
    unsigned int v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 24);
      if (v7) {
        BOOL v8 = *(unsigned __int8 *)(v7 + 16) >= 0x1Cu;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8)
      {
        uint64_t v9 = *(void *)(v7 + 40);
        if (v9 != a1[1] && v9 != a1[2])
        {
          if (v6 >= 6) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v18[v6] = v5;
          unsigned int v6 = ++v17;
        }
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5);
  }
  uint64_t v10 = a2(a3, v4);
  BOOL v11 = (uint64_t **)v18;
  if (v17)
  {
    uint64_t v12 = (uint64_t **)(v10 + 8);
    uint64_t v13 = 8 * v17;
    do
    {
      __int16 v14 = *v11;
      if (**v11)
      {
        *(void *)v14[2] = v14[1];
        uint64_t v15 = v14[1];
        if (v15) {
          *(void *)(v15 + 16) = v14[2];
        }
      }
      *__int16 v14 = v10;
      if (v10)
      {
        uint64_t v16 = (uint64_t)*v12;
        v14[1] = (uint64_t)*v12;
        if (v16) {
          *(void *)(v16 + 16) = v14 + 1;
        }
        v14[2] = (uint64_t)v12;
        *uint64_t v12 = v14;
      }
      ++v11;
      v13 -= 8;
    }
    while (v13);
  }
}

double llvm::CanonicalLoopInfo::invalidate(llvm::CanonicalLoopInfo *this)
{
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

void llvm::OpenMPIRBuilder::applyStaticChunkedWorkshareLoop(uint64_t a1, unsigned __int8 **a2, llvm::CanonicalLoopInfo *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  v111[2] = a3;
  uint64_t v11 = *((void *)a3 + 1);
  uint64_t v12 = *(void *)(*(void *)a3 + 48);
  uint64_t v13 = ***(uint64_t ****)(*(void *)a3 + 56);
  uint64_t v14 = v12 - 24;
  if (!v12) {
    uint64_t v14 = 0;
  }
  v111[1] = v14;
  uint64_t v15 = *(void *)(v11 + 48);
  if (v15) {
    uint64_t v16 = v15 - 24;
  }
  else {
    uint64_t v16 = 0;
  }
  int v17 = *(_DWORD *)(v16 + 20);
  if ((v17 & 0x40000000) != 0) {
    uint64_t v18 = *(void *)(v16 - 8);
  }
  else {
    uint64_t v18 = v16 - 32 * (v17 & 0x7FFFFFF);
  }
  uint64_t v19 = *(unsigned __int8 **)(v18 + 32);
  uint64_t v20 = *v13;
  uint64_t v21 = (llvm::ConstantInt *)(v20 + 1960);
  uint64_t v22 = (llvm::ConstantInt *)(v20 + 1984);
  if (*(_DWORD *)(*(void *)v14 + 8) >> 8 >= 0x21u) {
    int v23 = v22;
  }
  else {
    int v23 = v21;
  }
  uint64_t v24 = ***(void ***)(a1 + 336);
  char v105 = llvm::ConstantInt::get(v23, 0, 0);
  unsigned int v25 = llvm::ConstantInt::get(v23, 1uLL, 0);
  if ((*((_DWORD *)v23 + 2) & 0xFFFFFF00) == 0x2000) {
    int v26 = 59;
  }
  else {
    int v26 = 61;
  }
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), v26);
  BOOL v99 = v28;
  int64_t v100 = (uint64_t **)RuntimeFunction;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 62);
  if (a4)
  {
    sub_1CBF5385C(a1 + 344, a4, a5);
  }
  else
  {
    *(void *)(a1 + 392) = 0;
    *(void *)(a1 + 400) = 0;
  }
  uint64_t v29 = (llvm::ConstantInt *)(v24 + 1960);
  uint64_t v30 = *a2;
  v111[0] = v30;
  if (v30)
  {
    llvm::MetadataTracking::track((uint64_t)v111, v30, 2);
    uint64_t v31 = v111[0];
  }
  else
  {
    uint64_t v31 = 0;
  }
  sub_1CB8461A4(a1 + 344, 0, v31);
  if (v111[0])
  {
    int v32 = *(unsigned __int8 *)v111[0];
    if ((v32 - 4) > 0x1E)
    {
      if ((v32 - 3) >= 0xFFFFFFFE) {
        uint64_t v76 = v111[0];
      }
      else {
        uint64_t v76 = 0;
      }
      if ((v32 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v77 = v76 + 8;
LABEL_68:
        v113 = (const char *)v111;
        sub_1CC5FA668(v77 + 16, &v113);
        goto LABEL_25;
      }
      if (v32 == 3) {
        *(void *)(v111[0] + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(v111[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v111[0] + 12))
    {
      uint64_t v92 = *(void *)(v111[0] + 16);
      if ((v92 & 4) != 0)
      {
        unint64_t v77 = v92 & 0xFFFFFFFFFFFFFFF8;
        if (v77) {
          goto LABEL_68;
        }
      }
    }
  }
LABEL_25:
  v113 = "p.lastiter";
  LOWORD(v117) = 259;
  unsigned int v98 = sub_1CB935044((uint64_t *)(a1 + 344), (llvm::Type *)(v24 + 1960), 0, (uint64_t)&v113);
  v113 = "p.lowerbound";
  LOWORD(v117) = 259;
  uint64_t v33 = sub_1CB935044((uint64_t *)(a1 + 344), v23, 0, (uint64_t)&v113);
  v113 = "p.upperbound";
  LOWORD(v117) = 259;
  uint64_t v34 = sub_1CB935044((uint64_t *)(a1 + 344), v23, 0, (uint64_t)&v113);
  v113 = "p.stride";
  LOWORD(v117) = 259;
  BOOL v106 = sub_1CB935044((uint64_t *)(a1 + 344), v23, 0, (uint64_t)&v113);
  uint64_t Preheader = llvm::CanonicalLoopInfo::getPreheader(a3);
  if (Preheader)
  {
    sub_1CBF5385C(a1 + 344, Preheader, *(void *)(Preheader + 40));
  }
  else
  {
    *(void *)(a1 + 392) = 0;
    *(void *)(a1 + 400) = 0;
  }
  uint64_t v36 = v19;
  int v37 = *a2;
  char v110 = v37;
  if (v37)
  {
    llvm::MetadataTracking::track((uint64_t)&v110, v37, 2);
    uint64_t v38 = (uint64_t)v110;
  }
  else
  {
    uint64_t v38 = 0;
  }
  sub_1CB8461A4(a1 + 344, 0, v38);
  if (v110)
  {
    int v39 = *v110;
    if ((v39 - 4) > 0x1E)
    {
      if ((v39 - 3) >= 0xFFFFFFFE) {
        unint64_t v78 = v110;
      }
      else {
        unint64_t v78 = 0;
      }
      if ((v39 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v79 = (unint64_t)(v78 + 8);
LABEL_74:
        v113 = (const char *)&v110;
        sub_1CC5FA668(v79 + 16, &v113);
        goto LABEL_35;
      }
      if (v39 == 3) {
        *((void *)v110 + 1) = 0;
      }
    }
    else if ((v110[1] & 0x7F) == 2 || *((_DWORD *)v110 + 3))
    {
      uint64_t v93 = *((void *)v110 + 2);
      if ((v93 & 4) != 0)
      {
        unint64_t v79 = v93 & 0xFFFFFFFFFFFFFFF8;
        if (v79) {
          goto LABEL_74;
        }
      }
    }
  }
LABEL_35:
  v113 = "chunksize";
  LOWORD(v117) = 259;
  uint64_t v40 = sub_1CB844B8C(a1 + 344, a7, (uint64_t)v23, (uint64_t)&v113);
  *(void *)&long long v122 = "tripcount";
  __int16 v123 = 259;
  if (*(llvm::ConstantInt **)v36 != v23)
  {
    if (v36[16] <= 0x14u)
    {
      uint64_t v43 = (*(uint64_t (**)(void, uint64_t, unsigned __int8 *, llvm::ConstantInt *))(**(void **)(a1 + 416)
                                                                                               + 224))(*(void *)(a1 + 416), 39, v36, v23);
      uint64_t v36 = (unsigned __int8 *)v43;
      if (v43 && *(unsigned __int8 *)(v43 + 16) >= 0x1Cu)
      {
        char v95 = (llvm::Instruction *)v43;
        (*(void (**)(void, uint64_t, long long *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v43, &v122, *(void *)(a1 + 392), *(void *)(a1 + 400));
        uint64_t v96 = *(unsigned int *)(a1 + 352);
        if (v96)
        {
          uint64_t v97 = *(void *)(a1 + 344);
          uint64_t v104 = v97 + 16 * v96;
          do
          {
            llvm::Instruction::setMetadata(v95, *(_DWORD *)v97, *(llvm::MDNode **)(v97 + 8));
            v97 += 16;
          }
          while (v97 != v104);
        }
        uint64_t v36 = (unsigned __int8 *)v95;
      }
    }
    else
    {
      LOWORD(v117) = 257;
      uint64_t v36 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v36, (uint64_t)v23, &v113, 0);
      (*(void (**)(void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424));
      uint64_t v41 = *(unsigned int *)(a1 + 352);
      if (v41)
      {
        uint64_t v42 = *(void *)(a1 + 344);
        uint64_t v103 = v42 + 16 * v41;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v36, *(_DWORD *)v42, *(llvm::MDNode **)(v42 + 8));
          v42 += 16;
        }
        while (v42 != v103);
      }
    }
  }
  __int16 v44 = llvm::ConstantInt::get(v29, 0x21uLL, 0);
  sub_1CC27BF8C((uint64_t *)(a1 + 344), (uint64_t)v105, (uint64_t)v33, 0, 0);
  LOWORD(v117) = 257;
  uint64_t v45 = sub_1CB84494C(a1 + 344, (uint64_t)v36, (uint64_t)v25, (uint64_t)&v113, 0, 0);
  sub_1CC27BF8C((uint64_t *)(a1 + 344), (uint64_t)v45, (uint64_t)v34, 0, 0);
  sub_1CC27BF8C((uint64_t *)(a1 + 344), (uint64_t)v25, (uint64_t)v106, 0, 0);
  unsigned int v109 = 0;
  int v46 = *a2;
  char v108 = v46;
  if (v46) {
    llvm::MetadataTracking::track((uint64_t)&v108, v46, 2);
  }
  uint64_t v47 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, (llvm::DebugLoc *)&v108, &v109, 0);
  if (v108)
  {
    int v48 = *v108;
    if ((v48 - 4) > 0x1E)
    {
      if ((v48 - 3) >= 0xFFFFFFFE) {
        uint64_t v80 = v108;
      }
      else {
        uint64_t v80 = 0;
      }
      if ((v48 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v81 = (unint64_t)(v80 + 8);
LABEL_80:
        v113 = (const char *)&v108;
        sub_1CC5FA668(v81 + 16, &v113);
        goto LABEL_49;
      }
      if (v48 == 3) {
        *((void *)v108 + 1) = 0;
      }
    }
    else if ((v108[1] & 0x7F) == 2 || *((_DWORD *)v108 + 3))
    {
      uint64_t v94 = *((void *)v108 + 2);
      if ((v94 & 4) != 0)
      {
        unint64_t v81 = v94 & 0xFFFFFFFFFFFFFFF8;
        if (v81) {
          goto LABEL_80;
        }
      }
    }
  }
LABEL_49:
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v47, v109, 0, 0);
  uint64_t ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  v113 = (const char *)Ident;
  uint64_t v114 = ThreadID;
  v115 = v44;
  int64_t v116 = v98;
  char v117 = v33;
  v118 = v34;
  v119 = v106;
  v120 = v25;
  unsigned int v121 = v40;
  __int16 v123 = 257;
  sub_1CB845BAC((uint64_t *)(a1 + 344), v100, v99, (uint64_t *)&v113, 9, (uint64_t)&v122, 0);
  *(void *)&long long v122 = "omp_firstchunk.lb";
  __int16 v123 = 259;
  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(a1 + 392) + 56) + 40) + 272), v23, 1);
  uint64_t v51 = operator new(0x60uLL);
  v51[13] = v51[13] & 0x38000000 | 1;
  int v52 = (llvm::Instruction *)(v51 + 8);
  *(void *)uint64_t v51 = 0;
  *((void *)v51 + 1) = 0;
  *((void *)v51 + 2) = 0;
  *((void *)v51 + 3) = v51 + 8;
  LOWORD(v117) = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v51 + 8), (uint64_t)v23, (uint64_t)v33, &v113, 0, Alignment, 0);
  (*(void (**)(void, llvm::Instruction *, long long *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v52, &v122, *(void *)(a1 + 392), *(void *)(a1 + 400));
  uint64_t v53 = *(unsigned int *)(a1 + 352);
  if (v53)
  {
    uint64_t v82 = *(void *)(a1 + 344);
    uint64_t v83 = v82 + 16 * v53;
    do
    {
      llvm::Instruction::setMetadata(v52, *(_DWORD *)v82, *(llvm::MDNode **)(v82 + 8));
      v82 += 16;
    }
    while (v82 != v83);
  }
  *(void *)&long long v122 = "omp_firstchunk.ub";
  __int16 v123 = 259;
  char v54 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(a1 + 392) + 56) + 40) + 272), v23, 1);
  uint64_t v55 = operator new(0x60uLL);
  v55[13] = v55[13] & 0x38000000 | 1;
  int v56 = (llvm::Instruction *)(v55 + 8);
  *(void *)uint64_t v55 = 0;
  *((void *)v55 + 1) = 0;
  *((void *)v55 + 2) = 0;
  *((void *)v55 + 3) = v55 + 8;
  LOWORD(v117) = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v55 + 8), (uint64_t)v23, (uint64_t)v34, &v113, 0, v54, 0);
  (*(void (**)(void, llvm::Instruction *, long long *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v56, &v122, *(void *)(a1 + 392), *(void *)(a1 + 400));
  uint64_t v57 = *(unsigned int *)(a1 + 352);
  if (v57)
  {
    uint64_t v84 = *(void *)(a1 + 344);
    uint64_t v85 = v84 + 16 * v57;
    do
    {
      llvm::Instruction::setMetadata(v56, *(_DWORD *)v84, *(llvm::MDNode **)(v84 + 8));
      v84 += 16;
    }
    while (v84 != v85);
  }
  LOWORD(v117) = 257;
  unint64_t v58 = sub_1CB844A3C(a1 + 344, v56, (uint64_t)v25, (uint64_t)&v113, 0, 0);
  v113 = "omp_chunk.range";
  LOWORD(v117) = 259;
  sub_1CB84494C(a1 + 344, (uint64_t)v58, (uint64_t)v52, (uint64_t)&v113, 0, 0);
  *(void *)&long long v122 = "omp_dispatch.stride";
  __int16 v123 = 259;
  char v59 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(a1 + 392) + 56) + 40) + 272), v23, 1);
  BOOL v60 = operator new(0x60uLL);
  v60[13] = v60[13] & 0x38000000 | 1;
  uint64_t v61 = (llvm::Instruction *)(v60 + 8);
  *(void *)BOOL v60 = 0;
  *((void *)v60 + 1) = 0;
  *((void *)v60 + 2) = 0;
  *((void *)v60 + 3) = v60 + 8;
  LOWORD(v117) = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v60 + 8), (uint64_t)v23, (uint64_t)v106, &v113, 0, v59, 0);
  (*(void (**)(void, llvm::Instruction *, long long *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v61, &v122, *(void *)(a1 + 392), *(void *)(a1 + 400));
  uint64_t v62 = *(unsigned int *)(a1 + 352);
  if (!v62) {
    goto LABEL_52;
  }
  uint64_t v86 = *(void *)(a1 + 344);
  uint64_t v87 = v86 + 16 * v62;
  do
  {
    llvm::Instruction::setMetadata(v61, *(_DWORD *)v86, *(llvm::MDNode **)(v86 + 8));
    v86 += 16;
  }
  while (v86 != v87);
  uint64_t v88 = *(unsigned int *)(a1 + 352);
  if (v88)
  {
    BOOL v89 = (unsigned __int8 **)(*(void *)(a1 + 344) + 8);
    uint64_t v90 = 16 * v88;
    while (*((_DWORD *)v89 - 2))
    {
      v89 += 2;
      v90 -= 16;
      if (!v90) {
        goto LABEL_52;
      }
    }
    uint64_t v91 = *v89;
    BOOL v112 = v91;
    if (v91) {
      llvm::MetadataTracking::track((uint64_t)&v112, v91, 2);
    }
  }
  else
  {
LABEL_52:
    BOOL v112 = 0;
  }
  uint64_t v63 = *(uint64_t ***)(a1 + 392);
  uint64_t v64 = **v63;
  if ((*((unsigned char *)v63 + 23) & 0x10) != 0)
  {
    uint64_t v65 = *(void *)(*(void *)v64 + 152);
    uint64_t v66 = *(unsigned int *)(*(void *)v64 + 168);
    if (v66)
    {
      LODWORD(v67) = (v66 - 1) & ((v63 >> 4) ^ (v63 >> 9));
      uint64_t v68 = (uint64_t ***)(v65 + 16 * v67);
      unint64_t v69 = *v68;
      if (*v68 != v63)
      {
        int v70 = 1;
        do
        {
          if (v69 == (uint64_t **)-4096) {
            goto LABEL_60;
          }
          int v71 = v67 + v70++;
          uint64_t v67 = v71 & (v66 - 1);
          unint64_t v69 = *(uint64_t ***)(v65 + 16 * v67);
        }
        while (v69 != v63);
        uint64_t v68 = (uint64_t ***)(v65 + 16 * v67);
      }
    }
    else
    {
LABEL_60:
      uint64_t v68 = (uint64_t ***)(v65 + 16 * v66);
    }
    uint64_t v72 = v68[1];
    uint64_t v75 = (uint64_t)*v72;
    uint64_t v73 = (const char *)(v72 + 2);
    uint64_t v74 = v75;
  }
  else
  {
    uint64_t v74 = 0;
    uint64_t v73 = &byte_1CFBCE98E;
  }
  LOWORD(v117) = 261;
  v113 = v73;
  uint64_t v114 = v74;
  operator new();
}

uint64_t sub_1CC6D0674(uint64_t result, void *a2, unsigned __int8 **a3)
{
  uint64_t v5 = (llvm::BasicBlock *)result;
  uint64_t v6 = *(void *)(result + 40);
  if (v6 == result + 40 || (v6 ? (uint64_t v7 = v6 - 24) : (uint64_t v7 = 0), *(unsigned __int8 *)(v7 + 16) - 29 > 0xA))
  {
    uint64_t v16 = (char *)operator new(0x60uLL);
    *((_DWORD *)v16 + 13) = *((_DWORD *)v16 + 13) & 0x38000000 | 1;
    *(void *)uint64_t v16 = 0;
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 2) = 0;
    *((void *)v16 + 3) = v16 + 32;
    double result = (uint64_t)llvm::BranchInst::BranchInst((llvm::BranchInst *)(v16 + 32), (llvm::BasicBlock *)a2, v5);
    int v17 = *a3;
    uint64_t v50 = v17;
    if (v17) {
      double result = llvm::MetadataTracking::track((uint64_t)&v50, v17, 2);
    }
    uint64_t v20 = (unsigned __int8 *)*((void *)v16 + 10);
    uint64_t v19 = (unsigned __int8 **)(v16 + 80);
    uint64_t v18 = v20;
    if (!v20) {
      goto LABEL_20;
    }
    int v22 = *v18;
    if ((v22 - 4) > 0x1E)
    {
      if ((v22 - 3) >= 0xFFFFFFFE) {
        unsigned int v25 = v18;
      }
      else {
        unsigned int v25 = 0;
      }
      if ((v22 - 3) < 0xFFFFFFFE)
      {
        if (v22 == 3) {
          *((void *)v18 + 1) = 0;
        }
        goto LABEL_20;
      }
      unint64_t v24 = (unint64_t)(v25 + 8);
    }
    else if ((v18[1] & 0x7F) != 2 && !*((_DWORD *)v18 + 3) {
           || (uint64_t v23 = *((void *)v18 + 2), (v23 & 4) == 0)
    }
           || (unint64_t v24 = v23 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_20:
      uint64_t v21 = v50;
      unsigned __int8 *v19 = v50;
      if (v21) {
        return llvm::MetadataTracking::retrack((uint64_t)&v50, v21, (uint64_t)v19);
      }
      return result;
    }
    uint64_t v51 = v19;
    double result = sub_1CC5FA668(v24 + 16, &v51);
    goto LABEL_20;
  }
  BOOL v8 = (void *)(v7 - 32);
  if (*(void *)(*(void *)(v7 - 32) + 40) == *(void *)(v7 - 32) + 40) {
    goto LABEL_11;
  }
  uint64_t v9 = *(void *)(*(void *)(v7 - 32) + 48);
  uint64_t v10 = v9 - 24;
  uint64_t v11 = v9 ? v9 - 24 : 0;
  if (*(unsigned char *)(v11 + 16) != 83) {
    goto LABEL_11;
  }
  do
  {
    uint64_t v35 = *(void *)(v10 + 32);
    uint64_t v36 = v35 - 24;
    if (!v35) {
      uint64_t v36 = 0;
    }
    int v37 = *(unsigned __int8 *)(v36 + 16);
    if (v37 == 83) {
      uint64_t v38 = v36;
    }
    else {
      uint64_t v38 = 0;
    }
    int v39 = *(_DWORD *)(v10 + 20);
    uint64_t v40 = v39 & 0x7FFFFFF;
    if ((v39 & 0x7FFFFFF) != 0)
    {
      uint64_t v41 = 0;
      while (1)
      {
        uint64_t v42 = v10 - 32 * v40;
        if ((v39 & 0x40000000) != 0) {
          uint64_t v42 = *(void *)(v10 - 8);
        }
        if (*(llvm::BasicBlock **)(v42 + 32 * *(unsigned int *)(v10 + 60) + 8 * v41) == v5) {
          break;
        }
        if (v40 == ++v41) {
          goto LABEL_51;
        }
      }
      uint64_t v43 = v41;
    }
    else
    {
LABEL_51:
      uint64_t v43 = 0xFFFFFFFFLL;
    }
    uint64_t v44 = v40;
    if ((v39 & 0x40000000) != 0)
    {
      uint64_t v26 = *(void *)(v10 - 8);
      uint64_t v27 = v26 + 32 * v43;
      uint64_t v28 = (uint64_t *)(v26 + 32 * v44);
    }
    else
    {
      uint64_t v26 = v10 - 32 * v40;
      uint64_t v27 = v26 + 32 * v43;
      uint64_t v28 = (uint64_t *)v10;
    }
    double result = (uint64_t)sub_1CC5E4108((uint64_t)&v51, (uint64_t *)(v27 + 32), v28, v26 + 32 * v43);
    int v45 = *(_DWORD *)(v10 + 20);
    if ((v45 & 0x40000000) != 0)
    {
      uint64_t v30 = *(void *)(v10 - 8);
      uint64_t v31 = *(unsigned int *)(v10 + 60);
      uint64_t v32 = v30 + 32 * v31;
      uint64_t v29 = v45 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v29 = v45 & 0x7FFFFFF;
      uint64_t v30 = v10 - 32 * v29;
      uint64_t v31 = *(unsigned int *)(v10 + 60);
      uint64_t v32 = v30 + 32 * v31;
    }
    int v46 = (unsigned char *)(v32 + 8 * v29);
    uint64_t v47 = (unsigned char *)(v32 + 8 * v43 + 8);
    if (v46 != v47)
    {
      double result = (uint64_t)memmove((void *)(v30 + 32 * v31 + 8 * v43), v47, v46 - v47);
      int v45 = *(_DWORD *)(v10 + 20);
    }
    if ((v45 & 0x40000000) != 0)
    {
      uint64_t v34 = *(void *)(v10 - 8);
      uint64_t v33 = v45 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v33 = v45 & 0x7FFFFFF;
      uint64_t v34 = v10 - 32 * v33;
    }
    uint64_t v48 = v34 + 32 * v33;
    if (*(void *)(v48 - 32))
    {
      **(void **)(v48 - 16) = *(void *)(v48 - 24);
      uint64_t v49 = *(void *)(v48 - 24);
      if (v49) {
        *(void *)(v49 + 16) = *(void *)(v48 - 16);
      }
    }
    *(void *)(v48 - 32) = 0;
    *(_DWORD *)(v10 + 20) = *(_DWORD *)(v10 + 20) & 0xF8000000 | (*(_DWORD *)(v10 + 20) - 1) & 0x7FFFFFF;
    if (!v35) {
      break;
    }
    uint64_t v10 = v38;
  }
  while (v37 == 83);
  if (*v8)
  {
LABEL_11:
    **(void **)(v7 - 16) = *(void *)(v7 - 24);
    uint64_t v12 = *(void *)(v7 - 24);
    if (v12) {
      *(void *)(v12 + 16) = *(void *)(v7 - 16);
    }
  }
  *BOOL v8 = a2;
  if (a2)
  {
    uint64_t v15 = a2[1];
    uint64_t v14 = a2 + 1;
    uint64_t v13 = v15;
    *(void *)(v7 - 24) = v15;
    if (v15) {
      *(void *)(v13 + 16) = v7 - 24;
    }
    *(void *)(v7 - 16) = v14;
    *uint64_t v14 = v8;
  }
  return result;
}

llvm::BasicBlock **llvm::OpenMPIRBuilder::collapseLoops(uint64_t a1, unsigned __int8 **a2, llvm::BasicBlock ***a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v51[12] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a3;
  if (a4 != 1)
  {
    uint64_t Preheader = llvm::CanonicalLoopInfo::getPreheader((llvm::CanonicalLoopInfo *)v6);
    uint64_t SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(v6[3]);
    uint64_t v42 = Preheader;
    uint64_t v43 = *(void *)(Preheader + 56);
    uint64_t v44 = SingleSuccessor;
    v50[0] = v51;
    v50[1] = 0xC00000000;
    if ((unint64_t)(6 * a4) >= 0xD) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v45 = a4;
    uint64_t v16 = 8 * a4;
    if (a4)
    {
      uint64_t v17 = 8 * a4;
      uint64_t v18 = a3;
      do
      {
        uint64_t v19 = *v18++;
        llvm::CanonicalLoopInfo::collectControlBlocks(v19, (uint64_t)v50);
        v17 -= 8;
      }
      while (v17);
    }
    uint64_t v20 = *a2;
    uint64_t v47 = v20;
    if (v20)
    {
      llvm::MetadataTracking::track((uint64_t)&v47, v20, 2);
      uint64_t v21 = (uint64_t)v47;
    }
    else
    {
      uint64_t v21 = 0;
    }
    sub_1CB8461A4(a1 + 344, 0, v21);
    if (v47)
    {
      int v22 = *v47;
      if ((v22 - 4) > 0x1E)
      {
        if ((v22 - 3) >= 0xFFFFFFFE) {
          int v39 = v47;
        }
        else {
          int v39 = 0;
        }
        if ((v22 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v40 = (unint64_t)(v39 + 8);
LABEL_47:
          uint64_t v48 = &v47;
          sub_1CC5FA668(v40 + 16, &v48);
          goto LABEL_15;
        }
        if (v22 == 3) {
          *((void *)v47 + 1) = 0;
        }
      }
      else if ((v47[1] & 0x7F) == 2 || *((_DWORD *)v47 + 3))
      {
        uint64_t v41 = *((void *)v47 + 2);
        if ((v41 & 4) != 0)
        {
          unint64_t v40 = v41 & 0xFFFFFFFFFFFFFFF8;
          if (v40) {
            goto LABEL_47;
          }
        }
      }
    }
LABEL_15:
    if (a5)
    {
      uint64_t v24 = a1 + 344;
      uint64_t v25 = a5;
      uint64_t v26 = a6;
    }
    else
    {
      uint64_t v23 = llvm::CanonicalLoopInfo::getPreheader((llvm::CanonicalLoopInfo *)v6);
      if (!v23)
      {
        *(void *)(a1 + 392) = 0;
        *(void *)(a1 + 400) = 0;
        goto LABEL_21;
      }
      uint64_t v25 = v23;
      uint64_t v26 = *(void *)(v23 + 40);
      uint64_t v24 = a1 + 344;
    }
    sub_1CBF5385C(v24, v25, v26);
LABEL_21:
    if (v45)
    {
      uint64_t v28 = 0;
      uint64_t v29 = v16;
      uint64_t v30 = a3;
      do
      {
        uint64_t v31 = *((void *)(*v30)[1] + 6);
        if (v31) {
          uint64_t v32 = v31 - 24;
        }
        else {
          uint64_t v32 = 0;
        }
        int v33 = *(_DWORD *)(v32 + 20);
        if ((v33 & 0x40000000) != 0) {
          uint64_t v34 = *(void *)(v32 - 8);
        }
        else {
          uint64_t v34 = v32 - 32 * (v33 & 0x7FFFFFF);
        }
        uint64_t v27 = *(llvm::Instruction **)(v34 + 32);
        if (v28)
        {
          __int16 v49 = 257;
          uint64_t v27 = sub_1CC09A1EC(a1 + 344, v28, (uint64_t)v27, (uint64_t)&v48, 1, 0);
        }
        ++v30;
        uint64_t v28 = (uint64_t)v27;
        v29 -= 8;
      }
      while (v29);
    }
    else
    {
      uint64_t v27 = 0;
    }
    uint64_t v35 = *a2;
    int v46 = v35;
    if (v35) {
      llvm::MetadataTracking::track((uint64_t)&v46, v35, 2);
    }
    uint64_t v36 = *(void *)(v42 + 32);
    if (v36) {
      BOOL v37 = v36 == *(void *)(v42 + 56) + 72;
    }
    else {
      BOOL v37 = 1;
    }
    if (v37) {
      uint64_t v38 = 0;
    }
    else {
      uint64_t v38 = v36 - 24;
    }
    uint64_t v48 = "collapsed";
    __int16 v49 = 259;
    llvm::OpenMPIRBuilder::createLoopSkeleton(a1, (uint64_t)&v46, (uint64_t)v27, v43, v38, v44, (uint64_t *)&v48);
  }
  return *a3;
}

void sub_1CC6D15E0(uint64_t *a1, uint64_t a2)
{
  v64[8] = *MEMORY[0x1E4F143B8];
  sub_1CD611470((llvm::SmallPtrSetImplBase *)&v54, a1, &a1[a2]);
  int v2 = v58;
  while (1)
  {
    uint64_t v4 = v54;
    uint64_t v3 = v55;
    unsigned int v6 = v56;
    unsigned int v5 = v57;
    if (v55 == v54) {
      uint64_t v7 = v57;
    }
    else {
      uint64_t v7 = v56;
    }
    BOOL v8 = (char *)v55;
    if (v7)
    {
      uint64_t v9 = 0;
      while (v55[v9] >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (v7 == ++v9) {
          goto LABEL_98;
        }
      }
      BOOL v8 = (char *)&v55[v9];
    }
    uint64_t v10 = (char *)&v55[v7];
    if (v8 == v10) {
      break;
    }
    char v11 = 0;
    unsigned int v12 = v56 - 1;
    do
    {
      uint64_t v13 = v8;
      uint64_t v14 = (unint64_t *)(v8 + 8);
      while (v14 != (unint64_t *)v10)
      {
        unint64_t v15 = *v14++;
        if (v15 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          BOOL v8 = (char *)(v14 - 1);
          goto LABEL_18;
        }
      }
      BOOL v8 = v10;
LABEL_18:
      uint64_t v16 = *(void *)v13;
      uint64_t v17 = *(void *)(*(void *)v13 + 8);
      if (v17)
      {
        uint64_t v18 = v54;
        unsigned int v19 = v56;
        unsigned int v20 = v57;
        while (1)
        {
          uint64_t v21 = *(void *)(v17 + 24);
          if (v21 && *(unsigned __int8 *)(v21 + 16) >= 0x1Cu)
          {
            uint64_t v23 = *(void *)(v21 + 40);
            if (v55 == v54)
            {
              if (v57)
              {
                uint64_t v24 = 0;
                while (v55[v24] != v23)
                {
                  if (v57 == ++v24)
                  {
                    unsigned int v25 = v57;
                    goto LABEL_45;
                  }
                }
                uint64_t v34 = (char *)&v55[v24];
                unsigned int v25 = v57;
                uint64_t v35 = v55;
              }
              else
              {
                unsigned int v25 = 0;
LABEL_45:
                uint64_t v35 = v55;
                uint64_t v34 = (char *)&v55[v57];
              }
            }
            else
            {
              unsigned int v26 = ((v23 >> 4) ^ (v23 >> 9)) & v12;
              uint64_t v27 = (char *)&v55[v26];
              uint64_t v28 = *(void *)v27;
              if (*(void *)v27 == -1)
              {
                uint64_t v29 = 0;
LABEL_47:
                if (v29) {
                  uint64_t v27 = v29;
                }
                uint64_t v33 = *(void *)v27;
              }
              else
              {
                uint64_t v29 = 0;
                int v30 = 1;
                while (v28 != v23)
                {
                  if (v29) {
                    BOOL v31 = 0;
                  }
                  else {
                    BOOL v31 = v28 == -2;
                  }
                  if (v31) {
                    uint64_t v29 = v27;
                  }
                  unsigned int v32 = v26 + v30++;
                  unsigned int v26 = v32 & v12;
                  uint64_t v27 = (char *)&v55[v32 & v12];
                  uint64_t v28 = *(void *)v27;
                  if (*(void *)v27 == -1) {
                    goto LABEL_47;
                  }
                }
                uint64_t v33 = v23;
              }
              uint64_t v34 = v33 == v23 ? v27 : (char *)&v55[v56];
              unsigned int v25 = v57;
              uint64_t v35 = v54;
            }
            int v36 = v55 == v35 ? v25 : v56;
            if (v34 == (char *)&v55[v36]) {
              break;
            }
          }
          uint64_t v17 = *(void *)(v17 + 8);
          if (!v17) {
            goto LABEL_85;
          }
        }
        if (v55 == v35)
        {
          BOOL v37 = (char *)&v55[v25];
          if (v25)
          {
            uint64_t v38 = 0;
            while (v55[v38] != v16)
            {
              if (v25 == ++v38) {
                goto LABEL_78;
              }
            }
            BOOL v37 = (char *)&v55[v38];
LABEL_78:
            unsigned int v20 = v25;
          }
          else
          {
            unsigned int v20 = 0;
          }
          uint64_t v18 = v55;
        }
        else
        {
          unsigned int v39 = v56 - 1;
          unsigned int v40 = (v56 - 1) & ((v16 >> 4) ^ (v16 >> 9));
          BOOL v37 = (char *)&v55[v40];
          uint64_t v41 = *(void *)v37;
          if (*(void *)v37 == -1)
          {
            uint64_t v42 = 0;
LABEL_89:
            if (v42) {
              BOOL v37 = v42;
            }
            if (*(void *)v37 != v16)
            {
              if (v55 == v54) {
                unsigned int v46 = v57;
              }
              else {
                unsigned int v46 = v56;
              }
              BOOL v37 = (char *)&v55[v46];
            }
          }
          else
          {
            uint64_t v42 = 0;
            int v43 = 1;
            while (v41 != v16)
            {
              if (v42) {
                BOOL v44 = 0;
              }
              else {
                BOOL v44 = v41 == -2;
              }
              if (v44) {
                uint64_t v42 = v37;
              }
              unsigned int v45 = v40 + v43++;
              unsigned int v40 = v45 & v39;
              BOOL v37 = (char *)&v55[v45 & v39];
              uint64_t v41 = *(void *)v37;
              if (*(void *)v37 == -1) {
                goto LABEL_89;
              }
            }
          }
        }
        if (v55 == v18) {
          unsigned int v19 = v20;
        }
        if (v37 != (char *)&v55[v19])
        {
          *(void *)BOOL v37 = -2;
          int v58 = ++v2;
        }
        char v11 = 1;
      }
LABEL_85:
      ;
    }
    while (v8 != v10);
    if ((v11 & 1) == 0)
    {
      uint64_t v4 = v54;
      uint64_t v3 = v55;
      unsigned int v6 = v56;
      unsigned int v5 = v57;
      break;
    }
  }
LABEL_98:
  if (v3 == v4) {
    uint64_t v47 = v5;
  }
  else {
    uint64_t v47 = v6;
  }
  uint64_t v48 = &v3[v47];
  if (v47)
  {
    uint64_t v49 = 8 * v47;
    while (*v3 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v3;
      v49 -= 8;
      if (!v49)
      {
        uint64_t v3 = v48;
        break;
      }
    }
  }
  char v59 = v61;
  uint64_t v60 = 0x700000000;
  sub_1CD482BCC((uint64_t)&v59, v3, v48, v48);
  uint64_t v50 = (llvm::BasicBlock **)v59;
  uint64_t v51 = v60;
  uint64_t v62 = v64;
  uint64_t v63 = 0x400000000;
  llvm::detachDeadBlocks((uint64_t *)v59, (llvm::Type *)v60, 0, 0);
  if (v51)
  {
    uint64_t v52 = 8 * v51;
    do
    {
      uint64_t v53 = *v50++;
      llvm::BasicBlock::eraseFromParent(v53);
      v52 -= 8;
    }
    while (v52);
  }
  if (v62 != v64) {
    free(v62);
  }
  if (v59 != v61) {
    free(v59);
  }
  if (v55 != v54) {
    free(v55);
  }
}

void llvm::OpenMPIRBuilder::tileLoops(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  v185[12] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a3[a4 - 1];
  char v136 = (llvm::BasicBlock **)*a3;
  uint64_t v10 = *(void *)(*(void *)(*a3 + 8) + 40);
  if (v10) {
    uint64_t v11 = v10 - 24;
  }
  else {
    uint64_t v11 = 0;
  }
  if (*(unsigned __int8 *)(v11 + 16) - 29 >= 0xB) {
    uint64_t v11 = 0;
  }
  uint64_t v131 = a3[a4 - 1];
  BOOL v132 = *(const char **)(*(void *)(v11 - 32) + 56);
  uint64_t v133 = *(void *)(v9 + 16);
  uint64_t v12 = *(void *)(*(void *)(v9 + 8) + 40);
  if (v12) {
    uint64_t v13 = v12 - 24;
  }
  else {
    uint64_t v13 = 0;
  }
  if (*(unsigned __int8 *)(v13 + 16) - 29 >= 0xB) {
    uint64_t v13 = 0;
  }
  uint64_t v137 = *(void **)(v13 - 32);
  v183 = v185;
  uint64_t v184 = 0xC00000000;
  if ((unint64_t)(6 * a4) >= 0xD) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  char v141 = a6;
  uint64_t v134 = 8 * a4;
  if (a4)
  {
    uint64_t v14 = 8 * a4;
    unint64_t v15 = (llvm::BasicBlock ***)a3;
    do
    {
      uint64_t v16 = *v15++;
      llvm::CanonicalLoopInfo::collectControlBlocks(v16, (uint64_t)&v183);
      v14 -= 8;
    }
    while (v14);
    v180 = v182;
    uint64_t v181 = 0x400000000;
    int64_t v177 = v179;
    uint64_t v178 = 0x400000000;
    uint64_t v17 = 8 * a4;
    uint64_t v18 = a3;
    do
    {
      uint64_t v19 = *v18;
      uint64_t v20 = *(void *)(*(void *)(*v18 + 8) + 48);
      if (v20) {
        uint64_t v21 = v20 - 24;
      }
      else {
        uint64_t v21 = 0;
      }
      int v22 = *(_DWORD *)(v21 + 20);
      if ((v22 & 0x40000000) != 0) {
        uint64_t v23 = *(void *)(v21 - 8);
      }
      else {
        uint64_t v23 = v21 - 32 * (v22 & 0x7FFFFFF);
      }
      if (v181 >= (unint64_t)HIDWORD(v181)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v180 + v181) = *(void *)(v23 + 32);
      LODWORD(v181) = v181 + 1;
      uint64_t v24 = *(void *)(*(void *)v19 + 48);
      if (v24) {
        uint64_t v25 = v24 - 24;
      }
      else {
        uint64_t v25 = 0;
      }
      if (v178 >= (unint64_t)HIDWORD(v178)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v177 + v178) = v25;
      LODWORD(v178) = v178 + 1;
      ++v18;
      v17 -= 8;
    }
    while (v17);
    v174 = v176;
    uint64_t v175 = 0x400000000;
    if ((int)a4 >= 2)
    {
      uint64_t v26 = (a4 - 1);
      uint64_t v27 = (void ***)(a3 + 1);
      do
      {
        uint64_t v28 = (uint64_t)*(v27 - 1);
        uint64_t v29 = *v27;
        v153 = 0;
        uint64_t v30 = *(void *)(*(void *)(v28 + 8) + 40);
        if (v30) {
          uint64_t v31 = v30 - 24;
        }
        else {
          uint64_t v31 = 0;
        }
        if (*(unsigned __int8 *)(v31 + 16) - 29 >= 0xB) {
          uint64_t v31 = 0;
        }
        v153 = *(void ***)(v31 - 32);
        uint64_t v171 = 0;
        uint64_t v171 = *v29;
        sub_1CBAF10A8((uint64_t)&v174, &v153, (uint64_t *)&v171);
        ++v27;
        --v26;
      }
      while (v26);
    }
  }
  else
  {
    v180 = v182;
    uint64_t v181 = 0x400000000;
    int64_t v177 = v179;
    uint64_t v178 = 0x400000000;
    v174 = v176;
    uint64_t v175 = 0x400000000;
  }
  unsigned int v32 = (llvm::IRBuilderBase *)(a1 + 344);
  uint64_t v33 = *a2;
  v163 = v33;
  if (v33)
  {
    llvm::MetadataTracking::track((uint64_t)&v163, v33, 2);
    uint64_t v34 = (uint64_t)v163;
  }
  else
  {
    uint64_t v34 = 0;
  }
  sub_1CB8461A4((uint64_t)v32, 0, v34);
  if (v163)
  {
    int v35 = *v163;
    if ((v35 - 4) > 0x1E)
    {
      if ((v35 - 3) >= 0xFFFFFFFE) {
        uint64_t v93 = v163;
      }
      else {
        uint64_t v93 = 0;
      }
      if ((v35 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v94 = (unint64_t)(v93 + 8);
LABEL_156:
        v153 = (void **)&v163;
        sub_1CC5FA668(v94 + 16, &v153);
        goto LABEL_48;
      }
      if (v35 == 3) {
        *((void *)v163 + 1) = 0;
      }
    }
    else if ((v163[1] & 0x7F) == 2 || *((_DWORD *)v163 + 3))
    {
      uint64_t v130 = *((void *)v163 + 2);
      if ((v130 & 4) != 0)
      {
        unint64_t v94 = v130 & 0xFFFFFFFFFFFFFFF8;
        if (v94) {
          goto LABEL_156;
        }
      }
    }
  }
LABEL_48:
  uint64_t Preheader = llvm::CanonicalLoopInfo::getPreheader((llvm::CanonicalLoopInfo *)v136);
  if (Preheader)
  {
    sub_1CBF5385C((uint64_t)v32, Preheader, *(void *)(Preheader + 40));
  }
  else
  {
    *(void *)(a1 + 392) = 0;
    *(void *)(a1 + 400) = 0;
  }
  uint64_t v171 = v173;
  uint64_t v172 = 0x400000000;
  v168 = v170;
  uint64_t v169 = 0x400000000;
  uint64_t v138 = a4;
  if ((int)a4 >= 1)
  {
    uint64_t v37 = 0;
    do
    {
      uint64_t v38 = *(void *)(a5 + 8 * v37);
      unsigned int v39 = (llvm::ConstantInt **)*((void *)v180 + v37);
      unsigned int v40 = *v39;
      LOWORD(v157) = 257;
      uint64_t v41 = sub_1CC57DA50((uint64_t)v32, (uint64_t)v39, v38, (uint64_t)&v153, 0);
      LOWORD(v157) = 257;
      uint64_t v42 = sub_1CC57DDE0((uint64_t)v32, (uint64_t)v39, v38, (uint64_t)&v153);
      int v43 = llvm::ConstantInt::get(v40, 0, 0);
      LOWORD(v157) = 257;
      BOOL v44 = sub_1CB845F20((uint64_t)v32, 33, v42, (uint64_t)v43, (uint64_t)&v153);
      unsigned int v45 = (unsigned __int8 *)v44;
      __int16 v167 = 257;
      if (*(llvm::ConstantInt **)v44 != v40)
      {
        if (*((unsigned __int8 *)v44 + 16) <= 0x14u)
        {
          unsigned int v45 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, llvm::ConstantInt *))(**(void **)(a1 + 416) + 224))(*(void *)(a1 + 416), 39, v44, v40);
          if (v45) {
            BOOL v48 = v45[16] >= 0x1Cu;
          }
          else {
            BOOL v48 = 0;
          }
          if (v48)
          {
            (*(void (**)(void, unsigned __int8 *, void **, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v45, &v164, *(void *)(a1 + 392), *(void *)(a1 + 400));
            uint64_t v50 = *(unsigned int *)(a1 + 352);
            if (v50)
            {
              uint64_t v51 = *(void *)(a1 + 344);
              uint64_t v140 = v51 + 16 * v50;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v45, *(_DWORD *)v51, *(llvm::MDNode **)(v51 + 8));
                v51 += 16;
              }
              while (v51 != v140);
            }
          }
        }
        else
        {
          LOWORD(v157) = 257;
          unsigned int v45 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v44, (uint64_t)v40, (const char **)&v153, 0);
          (*(void (**)(void, unsigned __int8 *, void **, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v45, &v164, *(void *)(a1 + 392), *(void *)(a1 + 400));
          uint64_t v46 = *(unsigned int *)(a1 + 352);
          if (v46)
          {
            uint64_t v47 = *(void *)(a1 + 344);
            uint64_t v139 = v47 + 16 * v46;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v45, *(_DWORD *)v47, *(llvm::MDNode **)(v47 + 8));
              v47 += 16;
            }
            while (v47 != v139);
          }
        }
      }
      int64_t v164 = "omp_floor";
      v166[0] = v37;
      __int16 v167 = 2307;
      v153 = &v164;
      uint64_t v155 = ".tripcount";
      LOWORD(v157) = 770;
      uint64_t v49 = sub_1CB844A3C((uint64_t)v32, v41, (uint64_t)v45, (uint64_t)&v153, 1, 0);
      if (v172 >= (unint64_t)HIDWORD(v172)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v171 + v172) = v49;
      LODWORD(v172) = v172 + 1;
      if (v169 >= (unint64_t)HIDWORD(v169)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v168 + v169) = v42;
      LODWORD(v169) = v169 + 1;
      ++v37;
    }
    while (v37 != a4);
  }
  uint64_t v52 = a4;
  uint64_t v53 = v141;
  *char v141 = 0;
  v141[1] = 0;
  v141[2] = 0;
  sub_1CD4F8818((uint64_t)v141, 2 * (int)a4);
  uint64_t v162 = 0;
  uint64_t v54 = llvm::CanonicalLoopInfo::getPreheader((llvm::CanonicalLoopInfo *)v136);
  uint64_t v161 = 0;
  uint64_t v162 = v54;
  uint64_t SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(v136[3]);
  uint64_t v160 = *(void *)(v131 + 24);
  uint64_t v161 = (void *)SingleSuccessor;
  unsigned int v56 = *a2;
  v153 = (void **)a1;
  uint64_t v154 = v56;
  if (v56) {
    llvm::MetadataTracking::track((uint64_t)&v154, v56, 2);
  }
  uint64_t v155 = v132;
  char v156 = v137;
  char v157 = &v162;
  uint64_t v158 = &v161;
  uint64_t v159 = &v160;
  v152[0] = v141;
  v152[1] = &v153;
  int64_t v164 = "floor";
  __int16 v167 = 259;
  sub_1CC6D295C((uint64_t)v152, (uint64_t *)v171, v172, (uint64_t)&v164);
  uint64_t v57 = 0;
  uint64_t v58 = *(void *)(v162 + 40);
  if (v58) {
    uint64_t v59 = v58 - 24;
  }
  else {
    uint64_t v59 = 0;
  }
  if (*(unsigned __int8 *)(v59 + 16) - 29 >= 0xB) {
    uint64_t v59 = 0;
  }
  uint64_t v60 = a5;
  *(void *)(a1 + 392) = *(void *)(v59 + 40);
  *(void *)(a1 + 400) = v59 + 24;
  uint64_t v61 = *(unsigned __int8 **)(v59 + 48);
  v150[0] = v61;
  if (v61)
  {
    llvm::MetadataTracking::track((uint64_t)v150, v61, 2);
    uint64_t v57 = v150[0];
  }
  sub_1CB8461A4((uint64_t)v32, 0, v57);
  if (v150[0])
  {
    int v97 = *(unsigned __int8 *)v150[0];
    if ((v97 - 4) > 0x1E)
    {
      if ((v97 - 3) >= 0xFFFFFFFE) {
        uint64_t v127 = v150[0];
      }
      else {
        uint64_t v127 = 0;
      }
      if ((v97 - 3) < 0xFFFFFFFE)
      {
        if (v97 == 3) {
          *(void *)(v150[0] + 8) = 0;
        }
        goto LABEL_83;
      }
      unint64_t v99 = v127 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v150[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v150[0] + 12)) {
        goto LABEL_83;
      }
      uint64_t v98 = *(void *)(v150[0] + 16);
      if ((v98 & 4) == 0) {
        goto LABEL_83;
      }
      unint64_t v99 = v98 & 0xFFFFFFFFFFFFFFF8;
      if (!v99) {
        goto LABEL_83;
      }
    }
    int64_t v164 = v150;
    sub_1CC5FA668(v99 + 16, &v164);
  }
LABEL_83:
  int64_t v164 = v166;
  uint64_t v165 = 0x400000000;
  if ((int)v138 < 1)
  {
    unsigned int v70 = 0;
    int v71 = v166;
  }
  else
  {
    uint64_t v62 = 0;
    do
    {
      uint64_t v63 = *(llvm::Value **)(a5 + v62);
      uint64_t v64 = *(void *)(**(void **)(*v141 + v62) + 48);
      if (v64) {
        uint64_t v65 = (void *)(v64 - 24);
      }
      else {
        uint64_t v65 = 0;
      }
      uint64_t v66 = *(void *)((char *)v171 + v62);
      __int16 v151 = 257;
      uint64_t v67 = sub_1CB845F20((uint64_t)v32, 32, v65, v66, (uint64_t)v150);
      uint64_t v68 = *(llvm::Value **)((char *)v168 + v62);
      __int16 v151 = 257;
      Select = llvm::IRBuilderBase::CreateSelect(v32, v67, v68, v63, (const llvm::Twine *)v150, 0);
      if (v165 >= (unint64_t)HIDWORD(v165)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v164 + v165) = Select;
      unsigned int v70 = v165 + 1;
      LODWORD(v165) = v165 + 1;
      v62 += 8;
    }
    while (8 * v138 != v62);
    int v71 = (uint64_t *)v164;
  }
  v150[0] = "tile";
  __int16 v151 = 259;
  sub_1CC6D295C((uint64_t)v152, v71, v70, (uint64_t)v150);
  uint64_t v72 = v162;
  if (v175)
  {
    uint64_t v73 = 0;
    uint64_t v74 = (char *)v174;
    uint64_t v75 = (char *)v174 + 16 * v175;
    while (1)
    {
      uint64_t v76 = *(void **)v74;
      uint64_t v77 = *((void *)v74 + 1);
      unint64_t v78 = *a2;
      if (v72)
      {
        v149 = *a2;
        if (v78) {
          llvm::MetadataTracking::track((uint64_t)&v149, v78, 2);
        }
        sub_1CC6D0674(v72, v76, &v149);
        unint64_t v79 = v149;
        if (!v149) {
          goto LABEL_129;
        }
        int v80 = *v149;
        if ((v80 - 4) > 0x1E)
        {
          if ((v80 - 3) >= 0xFFFFFFFE) {
            uint64_t v84 = v149;
          }
          else {
            uint64_t v84 = 0;
          }
          if ((v80 - 3) < 0xFFFFFFFE) {
            goto LABEL_127;
          }
          unint64_t v82 = (unint64_t)(v84 + 8);
        }
        else
        {
          if ((v149[1] & 0x7F) != 2 && !*((_DWORD *)v149 + 3)) {
            goto LABEL_129;
          }
          uint64_t v81 = *((void *)v149 + 2);
          if ((v81 & 4) == 0) {
            goto LABEL_129;
          }
          unint64_t v82 = v81 & 0xFFFFFFFFFFFFFFF8;
          if (!v82) {
            goto LABEL_129;
          }
        }
        v150[0] = &v149;
      }
      else
      {
        uint64_t v148 = *a2;
        if (v78) {
          llvm::MetadataTracking::track((uint64_t)&v148, v78, 2);
        }
        sub_1CC6D2D8C(*(void *)(v73 + 8), v76, &v148);
        unint64_t v79 = v148;
        if (!v148) {
          goto LABEL_129;
        }
        int v80 = *v148;
        if ((v80 - 4) > 0x1E)
        {
          if ((v80 - 3) >= 0xFFFFFFFE) {
            uint64_t v85 = v148;
          }
          else {
            uint64_t v85 = 0;
          }
          if ((v80 - 3) < 0xFFFFFFFE)
          {
LABEL_127:
            if (v80 == 3) {
              *((void *)v79 + 1) = 0;
            }
            goto LABEL_129;
          }
          unint64_t v82 = (unint64_t)(v85 + 8);
        }
        else
        {
          if ((v148[1] & 0x7F) != 2 && !*((_DWORD *)v148 + 3)) {
            goto LABEL_129;
          }
          uint64_t v83 = *((void *)v148 + 2);
          if ((v83 & 4) == 0) {
            goto LABEL_129;
          }
          unint64_t v82 = v83 & 0xFFFFFFFFFFFFFFF8;
          if (!v82) {
            goto LABEL_129;
          }
        }
        v150[0] = &v148;
      }
      sub_1CC5FA668(v82 + 16, v150);
LABEL_129:
      uint64_t v72 = 0;
      v74 += 16;
      uint64_t v73 = v77;
      if (v74 == v75) {
        goto LABEL_142;
      }
    }
  }
  if (!v162)
  {
    uint64_t v77 = 0;
LABEL_142:
    uint64_t v91 = *a2;
    char v146 = v91;
    if (v91) {
      llvm::MetadataTracking::track((uint64_t)&v146, v91, 2);
    }
    sub_1CC6D2D8C(*(void *)(v77 + 8), v137, &v146);
    uint64_t v87 = v146;
    uint64_t v52 = v138;
    uint64_t v60 = a5;
    uint64_t v53 = v141;
    if (!v146) {
      goto LABEL_180;
    }
    int v88 = *v146;
    if ((v88 - 4) > 0x1E)
    {
      if ((v88 - 3) >= 0xFFFFFFFE) {
        char v95 = v146;
      }
      else {
        char v95 = 0;
      }
      if ((v88 - 3) < 0xFFFFFFFE)
      {
LABEL_178:
        if (v88 == 3) {
          *((void *)v87 + 1) = 0;
        }
        goto LABEL_180;
      }
      unint64_t v90 = (unint64_t)(v95 + 8);
    }
    else
    {
      if ((v146[1] & 0x7F) != 2 && !*((_DWORD *)v146 + 3)) {
        goto LABEL_180;
      }
      uint64_t v92 = *((void *)v146 + 2);
      if ((v92 & 4) == 0) {
        goto LABEL_180;
      }
      unint64_t v90 = v92 & 0xFFFFFFFFFFFFFFF8;
      if (!v90) {
        goto LABEL_180;
      }
    }
    uint64_t v96 = &v146;
LABEL_177:
    v150[0] = v96;
    sub_1CC5FA668(v90 + 16, v150);
    goto LABEL_180;
  }
  uint64_t v86 = *a2;
  char v147 = v86;
  if (v86) {
    llvm::MetadataTracking::track((uint64_t)&v147, v86, 2);
  }
  sub_1CC6D0674(v72, v137, &v147);
  uint64_t v87 = v147;
  if (!v147) {
    goto LABEL_180;
  }
  int v88 = *v147;
  if ((v88 - 4) > 0x1E)
  {
    if ((v88 - 3) >= 0xFFFFFFFE) {
      int64_t v100 = v147;
    }
    else {
      int64_t v100 = 0;
    }
    if ((v88 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v90 = (unint64_t)(v100 + 8);
LABEL_176:
      uint64_t v96 = &v147;
      goto LABEL_177;
    }
    goto LABEL_178;
  }
  if ((v147[1] & 0x7F) == 2 || *((_DWORD *)v147 + 3))
  {
    uint64_t v89 = *((void *)v147 + 2);
    if ((v89 & 4) != 0)
    {
      unint64_t v90 = v89 & 0xFFFFFFFFFFFFFFF8;
      if (v90) {
        goto LABEL_176;
      }
    }
  }
LABEL_180:
  char v101 = v161;
  __int16 v102 = *a2;
  BOOL v145 = v102;
  if (v102) {
    llvm::MetadataTracking::track((uint64_t)&v145, v102, 2);
  }
  sub_1CC6D2D8C(*(void *)(v133 + 8), v101, &v145);
  if (v145)
  {
    int v103 = *v145;
    if ((v103 - 4) > 0x1E)
    {
      if ((v103 - 3) >= 0xFFFFFFFE) {
        __int16 v123 = v145;
      }
      else {
        __int16 v123 = 0;
      }
      if ((v103 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v124 = (unint64_t)(v123 + 8);
LABEL_229:
        v150[0] = &v145;
        sub_1CC5FA668(v124 + 16, v150);
        goto LABEL_186;
      }
      if (v103 == 3) {
        *((void *)v145 + 1) = 0;
      }
    }
    else if ((v145[1] & 0x7F) == 2 || *((_DWORD *)v145 + 3))
    {
      uint64_t v128 = *((void *)v145 + 2);
      if ((v128 & 4) != 0)
      {
        unint64_t v124 = v128 & 0xFFFFFFFFFFFFFFF8;
        if (v124) {
          goto LABEL_229;
        }
      }
    }
  }
LABEL_186:
  uint64_t v104 = *(void *)(*(void *)(*(void *)(v53[1] - 8) + 8) + 40);
  if (v104) {
    uint64_t v105 = v104 - 24;
  }
  else {
    uint64_t v105 = 0;
  }
  if (*(unsigned __int8 *)(v105 + 16) - 29 >= 0xB) {
    uint64_t v105 = 0;
  }
  uint64_t v106 = *(void *)(v105 - 32);
  if (v106)
  {
    sub_1CBF5385C((uint64_t)v32, v106, *(void *)(v106 + 48));
  }
  else
  {
    *(void *)(a1 + 392) = 0;
    *(void *)(a1 + 400) = 0;
  }
  if ((int)v52 >= 1)
  {
    uint64_t v107 = 0;
    do
    {
      uint64_t v108 = *v53 + v107;
      unsigned int v109 = *(uint64_t **)(v108 + 8 * (int)v52);
      char v110 = *(llvm::ValueAsMetadata **)((char *)v177 + v107);
      uint64_t v111 = *(void *)(v60 + v107);
      uint64_t v112 = *(void *)(**(void **)v108 + 48);
      if (v112) {
        uint64_t v113 = v112 - 24;
      }
      else {
        uint64_t v113 = 0;
      }
      __int16 v151 = 257;
      uint64_t v114 = sub_1CC09A1EC((uint64_t)v32, v111, v113, (uint64_t)v150, 1, 0);
      uint64_t v115 = *v109;
      uint64_t v53 = v141;
      uint64_t v116 = *(void *)(v115 + 48);
      if (v116) {
        uint64_t v117 = v116 - 24;
      }
      else {
        uint64_t v117 = 0;
      }
      __int16 v151 = 257;
      v118 = sub_1CB844A3C((uint64_t)v32, v114, v117, (uint64_t)v150, 1, 0);
      llvm::Value::doRAUW(v110, v118, (llvm::Value *)1);
      v107 += 8;
    }
    while (8 * v52 != v107);
  }
  sub_1CC6D15E0(v183, v184);
  uint64_t v120 = v134;
  v119 = (_OWORD **)a3;
  if (v52)
  {
    do
    {
      unsigned int v121 = *v119++;
      *unsigned int v121 = 0uLL;
      v121[1] = 0uLL;
      v120 -= 8;
    }
    while (v120);
  }
  if (v164 != v166) {
    free(v164);
  }
  if (v154)
  {
    int v122 = *v154;
    if ((v122 - 4) > 0x1E)
    {
      if ((v122 - 3) >= 0xFFFFFFFE) {
        uint64_t v125 = v154;
      }
      else {
        uint64_t v125 = 0;
      }
      if ((v122 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v126 = (unint64_t)(v125 + 8);
LABEL_235:
        int64_t v164 = &v154;
        sub_1CC5FA668(v126 + 16, &v164);
        goto LABEL_211;
      }
      if (v122 == 3) {
        *((void *)v154 + 1) = 0;
      }
    }
    else if ((v154[1] & 0x7F) == 2 || *((_DWORD *)v154 + 3))
    {
      uint64_t v129 = *((void *)v154 + 2);
      if ((v129 & 4) != 0)
      {
        unint64_t v126 = v129 & 0xFFFFFFFFFFFFFFF8;
        if (v126) {
          goto LABEL_235;
        }
      }
    }
  }
LABEL_211:
  if (v168 != v170) {
    free(v168);
  }
  if (v171 != v173) {
    free(v171);
  }
  if (v174 != v176) {
    free(v174);
  }
  if (v177 != v179) {
    free(v177);
  }
  if (v180 != v182) {
    free(v180);
  }
  if (v183 != v185) {
    free(v183);
  }
}

uint64_t sub_1CC6D295C(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = *(void *)(result + 8);
    uint64_t v5 = *a2;
    uint64_t v12 = 0;
    int v6 = *(unsigned __int8 *)(a4 + 32);
    if (*(unsigned char *)(a4 + 32))
    {
      if (v6 == 1)
      {
        v13[0] = (uint64_t)&v12;
        char v7 = 1;
        LOBYTE(v6) = 10;
      }
      else
      {
        uint64_t v8 = *(void *)(a4 + 8);
        if (*(unsigned char *)(a4 + 33) == 1)
        {
          uint64_t v9 = *(void *)a4;
        }
        else
        {
          LOBYTE(v6) = 2;
          uint64_t v9 = a4;
        }
        v13[0] = v9;
        v13[1] = v8;
        v13[2] = (uint64_t)&v12;
        char v7 = 10;
      }
    }
    else
    {
      char v7 = 1;
    }
    char v14 = v6;
    char v15 = v7;
    uint64_t v11 = *(void *)v4;
    uint64_t v10 = *(unsigned __int8 **)(v4 + 8);
    uint64_t v16 = v10;
    if (v10) {
      llvm::MetadataTracking::track((uint64_t)&v16, v10, 2);
    }
    llvm::OpenMPIRBuilder::createLoopSkeleton(v11, (uint64_t)&v16, v5, *(void *)(v4 + 16), *(void *)(v4 + 24), **(void **)(v4 + 48), v13);
  }
  return result;
}

uint64_t sub_1CC6D2D8C(uint64_t result, void *a2, unsigned __int8 **a3)
{
  if (result)
  {
    uint64_t v5 = result;
    while (1)
    {
      uint64_t v6 = *(void *)(v5 + 24);
      unsigned int v7 = *(unsigned __int8 *)(v6 + 16);
      BOOL v8 = v6 && v7 >= 0x1C;
      if (v8 && v7 - 29 <= 0xA) {
        break;
      }
      uint64_t v5 = *(void *)(v5 + 8);
      if (!v5) {
        return result;
      }
    }
    do
    {
      uint64_t v10 = v5;
      do
      {
        uint64_t v5 = *(void *)(v5 + 8);
        if (!v5) {
          break;
        }
        uint64_t v11 = *(void *)(v5 + 24);
        unsigned int v12 = *(unsigned __int8 *)(v11 + 16);
        BOOL v13 = v11 && v12 >= 0x1C;
      }
      while (!v13 || v12 - 29 > 0xA);
      uint64_t v15 = *(void *)(*(void *)(v10 + 24) + 40);
      uint64_t v16 = *a3;
      uint64_t v21 = v16;
      if (v16) {
        llvm::MetadataTracking::track((uint64_t)&v21, v16, 2);
      }
      double result = sub_1CC6D0674(v15, a2, &v21);
      if (!v21) {
        continue;
      }
      int v17 = *v21;
      if ((v17 - 4) > 0x1E)
      {
        if ((v17 - 3) >= 0xFFFFFFFE) {
          uint64_t v18 = v21;
        }
        else {
          uint64_t v18 = 0;
        }
        if ((v17 - 3) < 0xFFFFFFFE)
        {
          if (v17 == 3) {
            *((void *)v21 + 1) = 0;
          }
          continue;
        }
        unint64_t v19 = (unint64_t)(v18 + 8);
      }
      else
      {
        if ((v21[1] & 0x7F) != 2 && !*((_DWORD *)v21 + 3)) {
          continue;
        }
        uint64_t v20 = *((void *)v21 + 2);
        if ((v20 & 4) == 0) {
          continue;
        }
        unint64_t v19 = v20 & 0xFFFFFFFFFFFFFFF8;
        if (!v19) {
          continue;
        }
      }
      int v22 = &v21;
      double result = sub_1CC5FA668(v19 + 16, &v22);
    }
    while (v5);
  }
  return result;
}

void sub_1CC6D2ED8(void *a1, void *__src, uint64_t a3)
{
  v37[6] = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return;
  }
  uint64_t v5 = ***(void ***)(*a1 + 56);
  int v35 = v37;
  v37[0] = 0;
  uint64_t v36 = 0x600000001;
  uint64_t v6 = a1[2];
  uint64_t v9 = *(void **)(v6 + 40);
  BOOL v8 = (void *)(v6 + 40);
  unsigned int v7 = v9;
  if (v9 == v8)
  {
    uint64_t v10 = 0;
  }
  else
  {
    if (v7) {
      uint64_t v10 = (uint64_t)(v7 - 3);
    }
    else {
      uint64_t v10 = 0;
    }
    if (*(unsigned __int8 *)(v10 + 16) - 29 >= 0xB) {
      uint64_t v10 = 0;
    }
  }
  int v11 = *(_DWORD *)(v10 + 20);
  if (*(void *)(v10 + 48))
  {
    if ((v11 & 0x20000000) == 0)
    {
LABEL_29:
      BOOL v13 = v35;
      unsigned int v12 = v36;
      goto LABEL_30;
    }
LABEL_15:
    uint64_t v14 = ***(void ***)v10;
    uint64_t v34 = v10;
    int v15 = *(_DWORD *)(v14 + 2496);
    if (v15)
    {
      uint64_t v16 = *(void *)(v14 + 2480);
      int v17 = v15 - 1;
      unsigned int v18 = v17 & ((v10 >> 4) ^ (v10 >> 9));
      unint64_t v19 = (void *)(v16 + 40 * v18);
      uint64_t v20 = *v19;
      if (*v19 == v10) {
        goto LABEL_25;
      }
      uint64_t v21 = 0;
      int v22 = 1;
      while (v20 != -4096)
      {
        if (v21) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = v20 == -8192;
        }
        if (v23) {
          uint64_t v21 = v19;
        }
        unsigned int v24 = v18 + v22++;
        unsigned int v18 = v24 & v17;
        unint64_t v19 = (void *)(v16 + 40 * v18);
        uint64_t v20 = *v19;
        if (*v19 == v10) {
          goto LABEL_25;
        }
      }
      if (v21) {
        unsigned int v32 = v21;
      }
      else {
        unsigned int v32 = v19;
      }
    }
    else
    {
      unsigned int v32 = 0;
    }
    unint64_t v19 = sub_1CC609054(v14 + 2480, (uint64_t)&v34, &v34, v32);
    uint64_t v33 = v34;
    v19[3] = 0;
    v19[4] = 0;
    void *v19 = v33;
    v19[1] = v19 + 3;
    v19[2] = 0x100000000;
LABEL_25:
    uint64_t v25 = *((unsigned int *)v19 + 4);
    if (v25)
    {
      uint64_t v26 = (char **)(v19[1] + 8);
      uint64_t v27 = 16 * v25;
      while (*((_DWORD *)v26 - 2) != 18)
      {
        v26 += 2;
        v27 -= 16;
        if (!v27) {
          goto LABEL_29;
        }
      }
      BOOL v13 = v35;
      unsigned int v12 = v36;
      if (!*v26) {
        goto LABEL_30;
      }
      sub_1CD6114D8((uint64_t)&v35, (uint64_t)v35 + 8 * v36, &(*v26)[-8 * *((unsigned int *)*v26 + 2) + 8], *v26);
    }
    goto LABEL_29;
  }
  if ((v11 & 0x20000000) != 0) {
    goto LABEL_15;
  }
  unsigned int v12 = 1;
  BOOL v13 = v37;
LABEL_30:
  if (((8 * a3) >> 3) + (unint64_t)v12 > HIDWORD(v36)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  memcpy(&v13[v12], __src, 8 * a3);
  LODWORD(v36) = v36 + a3;
  Impl = llvm::MDTuple::getImpl(v5, v35, v36, 1, 1);
  llvm::MDNode::replaceOperandWith(Impl, 0, Impl);
  uint64_t v29 = (void *)*v8;
  if ((void *)*v8 == v8)
  {
    uint64_t v31 = 0;
  }
  else
  {
    if (v29) {
      uint64_t v30 = (unsigned __int8 *)(v29 - 3);
    }
    else {
      uint64_t v30 = 0;
    }
    if (v30[16] - 29 >= 0xB) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = (llvm::Instruction *)v30;
    }
  }
  llvm::Instruction::setMetadata(v31, 18, Impl);
  if (v35 != v37) {
    free(v35);
  }
}

void llvm::OpenMPIRBuilder::unrollLoopPartial(uint64_t a1, unsigned __int8 **a2, const llvm::APInt *a3, int a4, const llvm::APInt **a5)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(*(void *)a3 + 56);
  BOOL v8 = **(uint64_t ***)v7;
  if (a5)
  {
    if (!a4)
    {
      uint64_t v12 = *(void *)(v7 + 40);
      uint64_t v13 = *(void *)(v7 + 112);
      if (!v13)
      {
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        goto LABEL_58;
      }
      if (!*(_DWORD *)(v13 + 8)) {
        goto LABEL_35;
      }
      uint64_t v14 = *(void *)(v13 + 40);
      if (!v14) {
        goto LABEL_35;
      }
      int v15 = *(_DWORD *)(v14 + 40);
      if (!v15) {
        goto LABEL_35;
      }
      uint64_t v16 = *(void *)(v14 + 24);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EBCBE588))
      {
        unint64_t v71 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v71 = 0xFF51AFD7ED558CCDLL;
        }
        qword_1EBCBE580 = v71;
        __cxa_guard_release(&qword_1EBCBE588);
      }
      unint64_t v17 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xBC30287DAC2F782DLL)) ^ ((0x9DDFEA08EB382D69
                                                                                 * (qword_1EBCBE580 ^ 0xBC30287DAC2F782DLL)) >> 47) ^ 0xDF1D5C18CB5D1959);
      unsigned int v18 = (-348639895 * ((v17 >> 47) ^ v17)) ^ 0x74656772;
      for (int i = 1; ; ++i)
      {
        unsigned int v20 = v18 & (v15 - 1);
        uint64_t v21 = (uint64_t *)(v16 + 24 * v20);
        uint64_t v22 = *v21;
        if (*v21 == -1)
        {
          if ("target-cpu" == (char *)-1) {
            goto LABEL_22;
          }
        }
        else if (v22 == -2)
        {
          if ("target-cpu" == (char *)-2) {
            goto LABEL_22;
          }
        }
        else if (v21[1] == 10 && *(void *)v22 == 0x632D746567726174 && *(_WORD *)(v22 + 8) == 30064)
        {
LABEL_22:
          uint64_t v24 = v21[2];
          if (v24)
          {
            uint64_t v73 = *(unsigned int *)(v24 + 16);
            uint64_t v74 = v24 + *(unsigned int *)(v24 + 12) + 25;
            goto LABEL_36;
          }
LABEL_35:
          uint64_t v73 = 0;
          uint64_t v74 = 0;
LABEL_36:
          uint64_t v32 = *(void *)(v7 + 112);
          if (!v32) {
            goto LABEL_58;
          }
          if (!*(_DWORD *)(v32 + 8)) {
            goto LABEL_58;
          }
          uint64_t v33 = *(void *)(v32 + 40);
          if (!v33) {
            goto LABEL_58;
          }
          int v34 = *(_DWORD *)(v33 + 40);
          if (!v34) {
            goto LABEL_58;
          }
          uint64_t v35 = *(void *)(v33 + 24);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_1EBCBE588))
          {
            unint64_t v72 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override) {
              unint64_t v72 = 0xFF51AFD7ED558CCDLL;
            }
            qword_1EBCBE580 = v72;
            __cxa_guard_release(&qword_1EBCBE588);
          }
          unint64_t v36 = 0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xACC792AF839889B6)) ^ ((0x9DDFEA08EB382D69
                                                                                     * (qword_1EBCBE580 ^ 0xACC792AF839889B6)) >> 47) ^ 0xCAEAE6CAE4EAE8C2);
          unsigned int v37 = (-348639895 * ((v36 >> 47) ^ v36)) ^ 0x74616566;
          for (int j = 1; ; ++j)
          {
            unsigned int v39 = v37 & (v34 - 1);
            uint64_t v40 = v35 + 24 * v39;
            uint64_t v41 = *(void **)v40;
            if (*(void *)v40 == -1)
            {
              if ("target-features" == (char *)-1) {
                goto LABEL_55;
              }
            }
            else if (v41 == (void *)-2)
            {
              if ("target-features" == (char *)-2) {
                goto LABEL_55;
              }
            }
            else if (*(void *)(v40 + 8) == 15 {
                   && *v41 == 0x662D746567726174
            }
                   && *(void *)((char *)v41 + 7) == 0x7365727574616566)
            {
LABEL_55:
              uint64_t v43 = *(void *)(v40 + 16);
              if (v43)
              {
                uint64_t v44 = *(unsigned int *)(v43 + 16);
                uint64_t v45 = v43 + *(unsigned int *)(v43 + 12) + 25;
                goto LABEL_59;
              }
LABEL_58:
              uint64_t v45 = 0;
              uint64_t v44 = 0;
LABEL_59:
              std::string __p = 0;
              Impl = 0;
              uint64_t v88 = 0;
              uint64_t v46 = llvm::TargetRegistry::lookupTarget(v12 + 216, (uint64_t)&__p);
              if (!v46)
              {
                uint64_t v85 = 0;
                while (1)
                {
                  if (SHIBYTE(v88) < 0) {
                    operator delete(__p);
                  }
                  v77[0] = 0;
                  v77[1] = 0;
                  int v78 = 0;
                  uint64_t v79 = 0;
                  uint64_t v80 = 0;
                  int v81 = 0;
                  uint64_t v82 = 0;
                  uint64_t v83 = 0;
                  int v84 = 0;
                  __src = &llvm::TargetLibraryAnalysis::Key;
                  if (!sub_1CC6D91C0(v77, &__src)[1]) {
                    operator new();
                  }
                  __src = &llvm::AssumptionAnalysis::Key;
                  if (!sub_1CC6D91C0(v77, &__src)[1]) {
                    operator new();
                  }
                  __src = &llvm::DominatorTreeAnalysis::Key;
                  if (!sub_1CC6D91C0(v77, &__src)[1]) {
                    operator new();
                  }
                  __src = &llvm::LoopAnalysis::Key;
                  if (!sub_1CC6D91C0(v77, &__src)[1]) {
                    operator new();
                  }
                  __src = &llvm::ScalarEvolutionAnalysis::Key;
                  if (!sub_1CC6D91C0(v77, &__src)[1]) {
                    operator new();
                  }
                  __src = &llvm::PassInstrumentationAnalysis::Key;
                  if (!sub_1CC6D91C0(v77, &__src)[1]) {
                    operator new();
                  }
                  uint64_t v47 = (void **)v110;
                  llvm::TargetIRAnalysis::TargetIRAnalysis(v110);
                  if (v85)
                  {
                    v108[0] = &unk_1F261B930;
                    v108[1] = &v85;
                    unsigned int v109 = v108;
                    p_src = &__src;
                    __src = &unk_1F261B930;
                    uint64_t v92 = (uint64_t)&v85;
                    BOOL v48 = v111;
                    uint64_t v111 = 0;
                    if (v48 == v110)
                    {
                      (*(void (**)(void *))(v110[0] + 32))(v110);
                    }
                    else if (v48)
                    {
                      (*((void (**)(void **))*v48 + 5))(v48);
                    }
                    if (p_src)
                    {
                      uint64_t v47 = &__src;
                      if (p_src == &__src)
                      {
                        uint64_t v111 = (void **)v110;
                        (*((void (**)(void **, void *))__src + 3))(&__src, v110);
                        if (p_src == &__src)
                        {
                          (*((void (**)(void **))__src + 4))(&__src);
                        }
                        else if (p_src)
                        {
                          (*((void (**)(void))*p_src + 5))();
                        }
                      }
                      else
                      {
                        uint64_t v111 = p_src;
                        p_src = 0;
                      }
                    }
                    else
                    {
                      uint64_t v111 = 0;
                    }
                    if (v109 == v108)
                    {
                      (*(void (**)(void *))(v108[0] + 32))(v108);
                    }
                    else if (v109)
                    {
                      (*(void (**)(void))(*v109 + 40))();
                    }
                  }
                  __src = &llvm::TargetIRAnalysis::Key;
                  if (!sub_1CC6D91C0(v77, &__src)[1]) {
                    operator new();
                  }
                  if (v111)
                  {
                    (*((void (**)(uint64_t *__return_ptr))*v111 + 6))(&v76);
                    llvm::ScalarEvolutionAnalysis::run();
                  }
                  sub_1CB920400();
LABEL_164:
                  operator delete(v106);
LABEL_102:
                  v89[0] = v47 + 32;
                  sub_1CB8338B8(v89);
                  if (v105 < 0) {
                    operator delete(v104);
                  }
                  if (v103 < 0) {
                    operator delete(v102);
                  }
                  if (v101 < 0) {
                    operator delete(v100);
                  }
                  if (v99 < 0) {
                    operator delete(v98);
                  }
                  if (v97 < 0) {
                    operator delete(v96);
                  }
                  uint64_t v55 = v95;
                  if (v95)
                  {
                    if (!atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                      std::__shared_weak_count::__release_weak(v55);
                    }
                  }
                }
              }
              uint64_t v49 = (uint64_t)v46;
              uint64_t v47 = &__src;
              sub_1CD4546AC((uint64_t)&__src);
              char v50 = *(unsigned char *)(v12 + 239);
              BOOL v51 = v50 < 0;
              if (v50 >= 0) {
                uint64_t v52 = v12 + 216;
              }
              else {
                uint64_t v52 = *(void *)(v12 + 216);
              }
              uint64_t v53 = v50 & 0x7F;
              if (v51) {
                uint64_t v54 = *(void *)(v12 + 224);
              }
              else {
                uint64_t v54 = v53;
              }
              uint64_t v85 = sub_1CD454388(v49, v52, v54, v74, v73, v45, v44, (uint64_t)&__src, 0, 0, 3, 0);
              if ((v107 & 0x80000000) == 0) {
                goto LABEL_102;
              }
              goto LABEL_164;
            }
            if (v41 == (void *)-1) {
              goto LABEL_58;
            }
            unsigned int v37 = j + v39;
          }
        }
        if (v22 == -1) {
          goto LABEL_35;
        }
        unsigned int v18 = i + v20;
      }
    }
    if (a4 == 1)
    {
      *a5 = a3;
      return;
    }
    uint64_t v56 = *(void *)(*(void *)(*(void *)a3 + 48) - 24);
    unsigned int v57 = *(_DWORD *)(v56 + 8);
    LODWORD(v92) = v57 >> 8;
    if (v57 >> 8 > 0x40) {
      operator new[]();
    }
    if (v57 <= 0xFF) {
      unint64_t v58 = 0;
    }
    else {
      unint64_t v58 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v57) + 63);
    }
    __src = (void *)(v58 & a4);
    Splat = (void **)llvm::ConstantInt::get(*(llvm::ConstantInt **)v56, (llvm::LLVMContext *)&__src, a3);
    if ((*(_DWORD *)(v56 + 8) & 0xFE) == 0x12) {
      Splat = (void **)llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v56 + 32) | ((unint64_t)(*(_DWORD *)(v56 + 8) == 19) << 32)), (uint64_t)Splat);
    }
    if (v92 >= 0x41 && __src) {
      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
    uint64_t v60 = *a2;
    uint64_t v75 = v60;
    if (v60) {
      llvm::MetadataTracking::track((uint64_t)&v75, v60, 2);
    }
    std::string __p = a3;
    v89[0] = Splat;
    llvm::OpenMPIRBuilder::tileLoops(a1, &v75, (uint64_t *)&__p, 1, (uint64_t)v89, &__src);
    if (!v75) {
      goto LABEL_135;
    }
    int v62 = *v75;
    if ((v62 - 4) > 0x1E)
    {
      if ((v62 - 3) >= 0xFFFFFFFE) {
        uint64_t v68 = v75;
      }
      else {
        uint64_t v68 = 0;
      }
      if ((v62 - 3) < 0xFFFFFFFE)
      {
        if (v62 == 3) {
          *((void *)v75 + 1) = 0;
        }
        goto LABEL_135;
      }
      unint64_t v69 = (unint64_t)(v68 + 8);
    }
    else
    {
      if ((v75[1] & 0x7F) != 2 && !*((_DWORD *)v75 + 3)) {
        goto LABEL_135;
      }
      uint64_t v70 = *((void *)v75 + 2);
      if ((v70 & 4) == 0) {
        goto LABEL_135;
      }
      unint64_t v69 = v70 & 0xFFFFFFFFFFFFFFF8;
      if (!v69) {
        goto LABEL_135;
      }
    }
    std::string __p = &v75;
    sub_1CC5FA668(v69 + 16, &__p);
LABEL_135:
    uint64_t v63 = __src;
    *a5 = *(const llvm::APInt **)__src;
    uint64_t v64 = (void *)v63[1];
    uint64_t v65 = *v8;
    LODWORD(Impl) = 32;
    std::string __p = (void *)a4;
    uint64_t v66 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(*(llvm::ConstantInt **)(v65 + 1960), (llvm::LLVMContext *)&__p, v61);
    if ((*(_DWORD *)(v65 + 1968) & 0xFE) == 0x12) {
      uint64_t v66 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v65 + 1992) | ((unint64_t)(*(_DWORD *)(v65 + 1968) == 19) << 32)), (uint64_t)v66);
    }
    uint64_t v67 = (void **)llvm::ValueAsMetadata::get(v66, v66);
    if (Impl >= 0x41 && __p) {
      MEMORY[0x1D25D9CB0](__p, 0x1000C8000313F17);
    }
    unint64_t v90 = llvm::MDString::get(v8, "llvm.loop.unroll.enable", 0x17uLL);
    std::string __p = llvm::MDTuple::getImpl((uint64_t)v8, &v90, 1, 0, 1);
    v89[0] = (void **)llvm::MDString::get(v8, "llvm.loop.unroll.count", 0x16uLL);
    v89[1] = v67;
    Impl = llvm::MDTuple::getImpl((uint64_t)v8, v89, 2, 0, 1);
    sub_1CC6D2ED8(v64, &__p, 2);
    if (__src)
    {
      uint64_t v92 = (uint64_t)__src;
      operator delete(__src);
    }
    return;
  }
  __src = &v93;
  uint64_t v92 = 0x200000000;
  std::string __p = llvm::MDString::get(v8, "llvm.loop.unroll.enable", 0x17uLL);
  uint64_t v26 = llvm::MDTuple::getImpl((uint64_t)v8, &__p, 1, 0, 1);
  if (v92 >= HIDWORD(v92)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((void *)__src + v92) = v26;
  unsigned int v27 = v92 + 1;
  LODWORD(v92) = v92 + 1;
  if (a4 >= 1)
  {
    uint64_t v28 = *v8;
    LODWORD(Impl) = 32;
    std::string __p = (void *)a4;
    uint64_t v29 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(*(llvm::ConstantInt **)(v28 + 1960), (llvm::LLVMContext *)&__p, v25);
    if ((*(_DWORD *)(v28 + 1968) & 0xFE) == 0x12) {
      uint64_t v29 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v28 + 1992) | ((unint64_t)(*(_DWORD *)(v28 + 1968) == 19) << 32)), (uint64_t)v29);
    }
    uint64_t v30 = llvm::ValueAsMetadata::get(v29, v29);
    if (Impl >= 0x41 && __p) {
      MEMORY[0x1D25D9CB0](__p, 0x1000C8000313F17);
    }
    std::string __p = llvm::MDString::get(v8, "llvm.loop.unroll.count", 0x16uLL);
    Impl = (llvm::MDNode *)v30;
    uint64_t v31 = llvm::MDTuple::getImpl((uint64_t)v8, &__p, 2, 0, 1);
    if (v92 >= HIDWORD(v92)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)__src + v92) = v31;
    unsigned int v27 = v92 + 1;
    LODWORD(v92) = v92 + 1;
  }
  sub_1CC6D2ED8(a3, __src, v27);
  if (__src != &v93) {
    free(__src);
  }
}

uint64_t llvm::OpenMPIRBuilder::createCopyPrivate(uint64_t a1, uint64_t *a2, const char *a3, const char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!sub_1CD60CD08(a1, a2)) {
    return *a2;
  }
  unsigned int v28 = 0;
  uint64_t v13 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v28);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v13, v28, 0, 0);
  uint64_t ThreadID = (const char *)llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  int v15 = (llvm::Type *)(**(void **)(a1 + 408) + 1960);
  __int16 v27 = 257;
  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(a1 + 392) + 56) + 40) + 272), v15, 1);
  unint64_t v17 = operator new(0x60uLL);
  v17[13] = v17[13] & 0x38000000 | 1;
  unsigned int v18 = (llvm::Instruction *)(v17 + 8);
  *(void *)unint64_t v17 = 0;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = 0;
  *((void *)v17 + 3) = v17 + 8;
  LOWORD(v30) = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v17 + 8), (uint64_t)v15, a6, v29, 0, Alignment, 0);
  (*(void (**)(void, llvm::Instruction *, unsigned char *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v18, v26, *(void *)(a1 + 392), *(void *)(a1 + 400));
  uint64_t v19 = *(unsigned int *)(a1 + 352);
  if (v19)
  {
    uint64_t v23 = *(void *)(a1 + 344);
    uint64_t v24 = v23 + 16 * v19;
    do
    {
      llvm::Instruction::setMetadata(v18, *(_DWORD *)v23, *(llvm::MDNode **)(v23 + 8));
      v23 += 16;
    }
    while (v23 != v24);
  }
  v29[0] = (const char *)Ident;
  v29[1] = ThreadID;
  uint64_t v29[2] = a3;
  v29[3] = a4;
  uint64_t v30 = a5;
  uint64_t v31 = v18;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 114);
  if (*(unsigned char *)(v20 + 16)) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v20;
  }
  if (v21) {
    uint64_t v22 = *(uint64_t ***)(v21 + 24);
  }
  else {
    uint64_t v22 = 0;
  }
  __int16 v27 = 257;
  sub_1CB845BAC((uint64_t *)(a1 + 344), v22, (uint64_t **)v21, (uint64_t *)v29, 6, (uint64_t)v26, 0);
  return *(void *)(a1 + 392);
}

uint64_t llvm::OpenMPIRBuilder::createSingle(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v37[2] = *MEMORY[0x1E4F143B8];
  if (sub_1CD60CD08(a1, a2))
  {
    if (a7)
    {
      uint64_t v15 = **(void **)(a1 + 408);
      uint64_t v16 = *(llvm::ConstantInt **)(v15 + 1960);
      unsigned int v17 = *(_DWORD *)(v15 + 1968);
      unsigned int v33 = v17 >> 8;
      if (v17 >> 8 >= 0x41) {
        operator new[]();
      }
      uint64_t v32 = 0;
      unsigned int v18 = llvm::ConstantInt::get(v16, (llvm::LLVMContext *)&v32, v13);
      if (v33 >= 0x41 && v32)
      {
        uint64_t v31 = v18;
        MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
        unsigned int v18 = v31;
      }
      sub_1CC27BF8C((uint64_t *)(a1 + 344), (uint64_t)v18, a7, 0, 0);
    }
    unsigned int v35 = 0;
    uint64_t v19 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v35);
    Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v19, v35, 0, 0);
    uint64_t ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
    v37[0] = (uint64_t)Ident;
    v37[1] = ThreadID;
    llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 92);
    uint64_t v23 = v22;
    uint64_t v24 = 0;
    if (*(unsigned char *)(v23 + 16)) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = v23;
    }
    if (v25) {
      uint64_t v24 = *(uint64_t ***)(v25 + 24);
    }
    __int16 v34 = 257;
    uint64_t v26 = sub_1CB845BAC((uint64_t *)(a1 + 344), v24, (uint64_t **)v25, v37, 2, (uint64_t)&v32, 0);
    llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 93);
    if (*(unsigned char *)(v27 + 16)) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = v27;
    }
    if (v28) {
      uint64_t v29 = *(uint64_t ***)(v28 + 24);
    }
    else {
      uint64_t v29 = 0;
    }
    __int16 v34 = 257;
    uint64_t v30 = sub_1CB845BAC((uint64_t *)(a1 + 344), v29, (uint64_t **)v28, v37, 2, (uint64_t)&v32, 0);
    sub_1CC6DCD54((uint64_t)v36, a5);
    llvm::OpenMPIRBuilder::EmitOMPInlinedRegion(a1, 55, v26, v30, a3, a4, (uint64_t)v36, 1, 1, 0);
  }
  return *a2;
}

uint64_t llvm::OpenMPIRBuilder::createCritical(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (sub_1CD60CD08(a1, a2))
  {
    unsigned int v34 = 0;
    unsigned int v17 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v34);
    Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v17, v34, 0, 0);
    uint64_t ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
    OMPCriticalRegionLock = llvm::OpenMPIRBuilder::getOMPCriticalRegionLock((llvm::OpenMPIRBuilder *)a1, a6, a7);
    *(void *)&long long v41 = Ident;
    *((void *)&v41 + 1) = ThreadID;
    uint64_t v42 = OMPCriticalRegionLock;
    unint64_t v36 = &v38;
    long long v38 = v41;
    unsigned int v39 = OMPCriticalRegionLock;
    uint64_t v37 = 0x400000003;
    if (a8)
    {
      uint64_t v40 = a8;
      LODWORD(v37) = 4;
      unint64_t v21 = *(void *)(a1 + 336);
      uint64_t v22 = a1;
      int v23 = 48;
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 336);
      uint64_t v22 = a1;
      int v23 = 47;
    }
    llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(v22, v21, v23);
    uint64_t v25 = (uint64_t **)v24;
    if (*(unsigned char *)(v24 + 16))
    {
      uint64_t v25 = 0;
      uint64_t v26 = 0;
    }
    else
    {
      uint64_t v26 = *(uint64_t ***)(v24 + 24);
    }
    __int16 v33 = 257;
    uint64_t v27 = sub_1CB845BAC((uint64_t *)(a1 + 344), v26, v25, (uint64_t *)v36, v37, (uint64_t)v32, 0);
    llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 49);
    if (*(unsigned char *)(v28 + 16)) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = v28;
    }
    if (v29) {
      uint64_t v30 = *(uint64_t ***)(v29 + 24);
    }
    else {
      uint64_t v30 = 0;
    }
    __int16 v33 = 257;
    uint64_t v31 = sub_1CB845BAC((uint64_t *)(a1 + 344), v30, (uint64_t **)v29, (uint64_t *)&v41, 3, (uint64_t)v32, 0);
    sub_1CC6DCD54((uint64_t)v35, a5);
    llvm::OpenMPIRBuilder::EmitOMPInlinedRegion(a1, 9, v27, v31, a3, a4, (uint64_t)v35, 0, 1, 0);
  }
  return *a2;
}

uint64_t llvm::OpenMPIRBuilder::createOrderedThreadsSimd(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v29[2] = *MEMORY[0x1E4F143B8];
  if (sub_1CD60CD08(a1, a2))
  {
    if (a6)
    {
      unsigned int v27 = 0;
      uint64_t v15 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v27);
      Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v15, v27, 0, 0);
      uint64_t ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
      v29[0] = (uint64_t)Ident;
      v29[1] = ThreadID;
      llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 56);
      uint64_t v19 = v18;
      uint64_t v20 = 0;
      if (*(unsigned char *)(v19 + 16)) {
        uint64_t v21 = 0;
      }
      else {
        uint64_t v21 = v19;
      }
      if (v21) {
        uint64_t v20 = *(uint64_t ***)(v21 + 24);
      }
      __int16 v26 = 257;
      uint64_t v13 = sub_1CB845BAC((uint64_t *)(a1 + 344), v20, (uint64_t **)v21, v29, 2, (uint64_t)v25, 0);
      llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 57);
      if (*(unsigned char *)(v22 + 16)) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = v22;
      }
      if (v23) {
        uint64_t v24 = *(uint64_t ***)(v23 + 24);
      }
      else {
        uint64_t v24 = 0;
      }
      __int16 v26 = 257;
      uint64_t v12 = sub_1CB845BAC((uint64_t *)(a1 + 344), v24, (uint64_t **)v23, v29, 2, (uint64_t)v25, 0);
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    sub_1CC6DCD54((uint64_t)v28, a5);
    llvm::OpenMPIRBuilder::EmitOMPInlinedRegion(a1, 39, v13, v12, a3, a4, (uint64_t)v28, 0, 1, 0);
  }
  return *a2;
}

uint64_t sub_1CC6D54E0(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8) - 1;
  *(_DWORD *)(a1 + 8) = v1;
  int v2 = (void *)(*(void *)a1 + 40 * v1);
  uint64_t result = v2[3];
  if ((void *)result == v2) {
    return (*(uint64_t (**)(void *))(*v2 + 32))(v2);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t llvm::OpenMPIRBuilder::createCopyinClauseBlocks(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(unsigned int *)(a1 + 352);
    if (v2)
    {
      uint64_t v4 = (unsigned __int8 **)(*(void *)(a1 + 344) + 8);
      uint64_t v5 = 16 * v2;
      while (*((_DWORD *)v4 - 2))
      {
        v4 += 2;
        v5 -= 16;
        if (!v5) {
          goto LABEL_3;
        }
      }
      uint64_t v6 = *v4;
      v7[0] = v6;
      if (v6) {
        llvm::MetadataTracking::track((uint64_t)v7, v6, 2);
      }
    }
    else
    {
LABEL_3:
      v7[0] = 0;
    }
    v7[1] = "copyin.not.master";
    __int16 v8 = 259;
    operator new();
  }
  return 0;
}

uint64_t llvm::OpenMPIRBuilder::createMapperAllocas(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, llvm::Instruction **a6)
{
  uint64_t result = sub_1CD60CD08(a1, a2);
  if (result)
  {
    uint64_t v13 = llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 2136), (llvm::Type *)a5);
    uint64_t v14 = llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 2128), (llvm::Type *)a5);
    if (a3)
    {
      sub_1CBF5385C(a1 + 344, a3, a4);
    }
    else
    {
      *(void *)(a1 + 392) = 0;
      *(void *)(a1 + 400) = 0;
    }
    __int16 v19 = 257;
    uint64_t v15 = sub_1CB935044((uint64_t *)(a1 + 344), v13, 0, (uint64_t)v18);
    __int16 v19 = 257;
    uint64_t v16 = sub_1CB935044((uint64_t *)(a1 + 344), v13, 0, (uint64_t)v18);
    __int16 v19 = 257;
    uint64_t result = (uint64_t)sub_1CB935044((uint64_t *)(a1 + 344), v14, 0, (uint64_t)v18);
    uint64_t v17 = result;
    if (*a2)
    {
      uint64_t result = sub_1CBF5385C(a1 + 344, *a2, a2[1]);
    }
    else
    {
      *(void *)(a1 + 392) = 0;
      *(void *)(a1 + 400) = 0;
    }
    *a6 = v15;
    a6[1] = v16;
    a6[2] = (llvm::Instruction *)v17;
  }
  return result;
}

uint64_t llvm::OpenMPIRBuilder::emitMapperCall(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t **a7, uint64_t a8, llvm::Type *a9)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_1CD60CD08(a1, a2);
  if (result)
  {
    uint64_t v73 = a5;
    uint64_t v74 = a6;
    uint64_t v17 = llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 2136), (llvm::Type *)a9);
    unint64_t v72 = llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 2128), (llvm::Type *)a9);
    __int16 v19 = *a7;
    uint64_t v20 = **(void **)(a1 + 408);
    uint64_t v21 = *(llvm::ConstantInt **)(v20 + 1960);
    unsigned int v22 = *(_DWORD *)(v20 + 1968);
    LODWORD(v79) = v22 >> 8;
    if (v22 >> 8 >= 0x41) {
      operator new[]();
    }
    uint64_t v78 = 0;
    uint64_t v24 = llvm::ConstantInt::get(v21, (llvm::LLVMContext *)&v78, v18);
    if (v79 >= 0x41 && v78) {
      MEMORY[0x1D25D9CB0](v78, 0x1000C8000313F17);
    }
    uint64_t v25 = (uint64_t *)(a1 + 344);
    unint64_t v75 = (unint64_t)v24;
    uint64_t v26 = **(void **)(a1 + 408);
    unsigned int v27 = *(llvm::ConstantInt **)(v26 + 1960);
    unsigned int v28 = *(_DWORD *)(v26 + 1968);
    LODWORD(v79) = v28 >> 8;
    if (v28 >> 8 >= 0x41) {
      operator new[]();
    }
    uint64_t v78 = 0;
    uint64_t v29 = llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v78, v23);
    if (v79 >= 0x41 && v78) {
      MEMORY[0x1D25D9CB0](v78, 0x1000C8000313F17);
    }
    uint64_t v76 = v29;
    LOWORD(v82) = 257;
    uint64_t v71 = sub_1CC57EEA0((uint64_t *)(a1 + 344), (uint64_t)v17, v19, (uint64_t *)&v75, 2, (uint64_t)&v78);
    uint64_t v31 = a7[1];
    uint64_t v32 = **(void **)(a1 + 408);
    __int16 v33 = *(llvm::ConstantInt **)(v32 + 1960);
    unsigned int v34 = *(_DWORD *)(v32 + 1968);
    LODWORD(v79) = v34 >> 8;
    if (v34 >> 8 >= 0x41) {
      operator new[]();
    }
    uint64_t v78 = 0;
    unint64_t v36 = llvm::ConstantInt::get(v33, (llvm::LLVMContext *)&v78, v30);
    if (v79 >= 0x41 && v78) {
      MEMORY[0x1D25D9CB0](v78, 0x1000C8000313F17);
    }
    unint64_t v75 = (unint64_t)v36;
    uint64_t v37 = **(void **)(a1 + 408);
    long long v38 = *(llvm::ConstantInt **)(v37 + 1960);
    unsigned int v39 = *(_DWORD *)(v37 + 1968);
    LODWORD(v79) = v39 >> 8;
    if (v39 >> 8 >= 0x41) {
      operator new[]();
    }
    uint64_t v78 = 0;
    uint64_t v40 = llvm::ConstantInt::get(v38, (llvm::LLVMContext *)&v78, v35);
    if (v79 >= 0x41 && v78) {
      MEMORY[0x1D25D9CB0](v78, 0x1000C8000313F17);
    }
    uint64_t v76 = v40;
    LOWORD(v82) = 257;
    uint64_t v42 = sub_1CC57EEA0((uint64_t *)(a1 + 344), (uint64_t)v17, v31, (uint64_t *)&v75, 2, (uint64_t)&v78);
    uint64_t v43 = a7[2];
    uint64_t v44 = **(void **)(a1 + 408);
    uint64_t v45 = *(llvm::ConstantInt **)(v44 + 1960);
    unsigned int v46 = *(_DWORD *)(v44 + 1968);
    LODWORD(v79) = v46 >> 8;
    if (v46 >> 8 >= 0x41) {
      operator new[]();
    }
    uint64_t v78 = 0;
    BOOL v48 = llvm::ConstantInt::get(v45, (llvm::LLVMContext *)&v78, v41);
    if (v79 >= 0x41 && v78) {
      MEMORY[0x1D25D9CB0](v78, 0x1000C8000313F17);
    }
    unint64_t v75 = (unint64_t)v48;
    uint64_t v49 = **(void **)(a1 + 408);
    char v50 = *(llvm::ConstantInt **)(v49 + 1960);
    unsigned int v51 = *(_DWORD *)(v49 + 1968);
    LODWORD(v79) = v51 >> 8;
    if (v51 >> 8 >= 0x41) {
      operator new[]();
    }
    uint64_t v78 = 0;
    uint64_t v52 = llvm::ConstantInt::get(v50, (llvm::LLVMContext *)&v78, v47);
    if (v79 >= 0x41 && v78) {
      MEMORY[0x1D25D9CB0](v78, 0x1000C8000313F17);
    }
    uint64_t v76 = v52;
    LOWORD(v82) = 257;
    uint64_t v53 = sub_1CC57EEA0((uint64_t *)(a1 + 344), (uint64_t)v72, v43, (uint64_t *)&v75, 2, (uint64_t)&v78);
    uint64_t v54 = (llvm::Constant *)llvm::PointerType::get(*(llvm::PointerType **)(a1 + 2136), 0);
    NullValue = llvm::Constant::getNullValue(v54, v55, v56);
    if (a3) {
      uint64_t v59 = *(uint64_t ***)(a3 + 24);
    }
    else {
      uint64_t v59 = 0;
    }
    uint64_t v78 = a4;
    uint64_t v60 = **(void **)(a1 + 408);
    uint64_t v61 = *(llvm::ConstantInt **)(v60 + 1984);
    unint64_t v62 = *(unsigned int *)(v60 + 1992);
    LODWORD(v76) = v62 >> 8;
    if (v62 >> 8 > 0x40) {
      operator new[]();
    }
    if (v62 <= 0xFF) {
      unint64_t v63 = 0;
    }
    else {
      unint64_t v63 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v62) + 63);
    }
    unint64_t v75 = v63 & a8;
    uint64_t v65 = llvm::ConstantInt::get(v61, (llvm::LLVMContext *)&v75, v57);
    if (v76 >= 0x41 && v75) {
      MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
    }
    uint64_t v79 = v65;
    uint64_t v66 = **(void **)(a1 + 408);
    uint64_t v67 = *(llvm::ConstantInt **)(v66 + 1960);
    unint64_t v68 = *(unsigned int *)(v66 + 1968);
    LODWORD(v76) = v68 >> 8;
    if (v68 >> 8 > 0x40) {
      operator new[]();
    }
    if (v68 <= 0xFF) {
      LODWORD(v69) = 0;
    }
    else {
      unint64_t v69 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v68) + 63);
    }
    unint64_t v75 = v69 & a9;
    uint64_t v70 = llvm::ConstantInt::get(v67, (llvm::LLVMContext *)&v75, v64);
    if (v76 >= 0x41)
    {
      if (v75) {
        MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
      }
    }
    uint64_t v80 = v70;
    uint64_t v81 = v71;
    uint64_t v82 = v42;
    uint64_t v83 = v53;
    uint64_t v84 = v73;
    uint64_t v85 = v74;
    uint64_t v86 = NullValue;
    __int16 v77 = 257;
    return sub_1CB845BAC(v25, v59, (uint64_t **)a3, &v78, 9, (uint64_t)&v75, 0);
  }
  return result;
}

uint64_t llvm::OpenMPIRBuilder::checkAndEmitFlushAfterAtomic(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  switch(a4)
  {
    case 0:
      uint64_t v4 = 0;
      if (a3 <= 7 && ((1 << a3) & 0xD0) != 0) {
        goto LABEL_10;
      }
      return v4;
    case 1:
    case 2:
    case 4:
      if (a3 - 5 >= 3) {
        goto LABEL_8;
      }
      goto LABEL_10;
    case 3:
      if ((a3 & 0xFFFFFFFC) != 4) {
        goto LABEL_8;
      }
LABEL_10:
      llvm::OpenMPIRBuilder::emitFlush(a1, a2);
      uint64_t v4 = 1;
      break;
    default:
LABEL_8:
      uint64_t v4 = 0;
      break;
  }
  return v4;
}

uint64_t llvm::OpenMPIRBuilder::createAtomicRead(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  if (!sub_1CD60CD08(a1, a2)) {
    return *a2;
  }
  uint64_t v55 = a4;
  uint64_t v11 = *(void *)a3;
  uint64_t v10 = *(void *)(a3 + 8);
  int v12 = *(unsigned __int8 *)(v10 + 8);
  if (v12 == 13)
  {
    __int16 v13 = *(unsigned __int8 *)(a3 + 17);
    v56[0] = "omp.atomic.read";
    __int16 v57 = 259;
    char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(a1 + 392) + 56) + 40) + 272), (llvm::Type *)v10, 1);
    uint64_t v15 = (char *)operator new(0x60uLL);
    *((_DWORD *)v15 + 13) = *((_DWORD *)v15 + 13) & 0x38000000 | 1;
    uint64_t v16 = (unsigned __int8 *)(v15 + 32);
    *(void *)uint64_t v15 = 0;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 2) = 0;
    *((void *)v15 + 3) = v15 + 32;
    __int16 v59 = 257;
    llvm::LoadInst::LoadInst((llvm::Value *)(v15 + 32), v10, v11, v58, v13, Alignment, 0);
    (*(void (**)(void, char *, void *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v15 + 32, v56, *(void *)(a1 + 392), *(void *)(a1 + 400));
    uint64_t v17 = *(unsigned int *)(a1 + 352);
    if (v17)
    {
      uint64_t v48 = *(void *)(a1 + 344);
      uint64_t v49 = v48 + 16 * v17;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v16, *(_DWORD *)v48, *(llvm::MDNode **)(v48 + 8));
        v48 += 16;
      }
      while (v48 != v49);
    }
    *((_WORD *)v15 + 25) = *((_WORD *)v15 + 25) & 0xFC7F | ((_WORD)a5 << 7);
    v15[92] = 1;
  }
  else
  {
    __int16 v19 = (llvm::Type *)(*(_DWORD *)(*(void *)v11 + 8) >> 8);
    uint64_t v20 = **(llvm::IntegerType ***)(a1 + 336);
    uint64_t v21 = *(llvm::Type **)(a3 + 8);
    if ((v12 & 0xFE) == 0x12) {
      uint64_t v21 = **(llvm::Type ***)(v10 + 16);
    }
    PrimitiveSizeInBits = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits(v21);
    uint64_t v23 = (llvm::PointerType *)llvm::IntegerType::get(v20, PrimitiveSizeInBits);
    uint64_t v24 = *(unsigned __int8 **)a3;
    unint64_t v25 = llvm::PointerType::get(v23, v19);
    v56[0] = "atomic.src.int.cast";
    __int16 v57 = 259;
    if (*(void *)v24 != v25)
    {
      if (v24[16] <= 0x14u)
      {
        uint64_t v24 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**(void **)(a1 + 416) + 224))(*(void *)(a1 + 416), 49, v24, v25);
        if (v24) {
          BOOL v29 = v24[16] >= 0x1Cu;
        }
        else {
          BOOL v29 = 0;
        }
        if (v29)
        {
          (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v24, v56, *(void *)(a1 + 392), *(void *)(a1 + 400));
          uint64_t v52 = *(unsigned int *)(a1 + 352);
          if (v52)
          {
            uint64_t v53 = *(void *)(a1 + 344);
            uint64_t v54 = v53 + 16 * v52;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v24, *(_DWORD *)v53, *(llvm::MDNode **)(v53 + 8));
              v53 += 16;
            }
            while (v53 != v54);
          }
        }
      }
      else
      {
        __int16 v59 = 257;
        uint64_t v24 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v24, v25, v58, 0);
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v24, v56, *(void *)(a1 + 392), *(void *)(a1 + 400));
        uint64_t v26 = *(unsigned int *)(a1 + 352);
        if (v26)
        {
          uint64_t v27 = *(void *)(a1 + 344);
          uint64_t v28 = v27 + 16 * v26;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v24, *(_DWORD *)v27, *(llvm::MDNode **)(v27 + 8));
            v27 += 16;
          }
          while (v27 != v28);
        }
      }
    }
    __int16 v30 = *(unsigned __int8 *)(a3 + 17);
    v56[0] = "omp.atomic.load";
    __int16 v57 = 259;
    char v31 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(a1 + 392) + 56) + 40) + 272), v23, 1);
    uint64_t v32 = (char *)operator new(0x60uLL);
    *((_DWORD *)v32 + 13) = *((_DWORD *)v32 + 13) & 0x38000000 | 1;
    uint64_t v16 = (unsigned __int8 *)(v32 + 32);
    *(void *)uint64_t v32 = 0;
    *((void *)v32 + 1) = 0;
    *((void *)v32 + 2) = 0;
    *((void *)v32 + 3) = v32 + 32;
    __int16 v59 = 257;
    llvm::LoadInst::LoadInst((llvm::Value *)(v32 + 32), (uint64_t)v23, (uint64_t)v24, v58, v30, v31, 0);
    (*(void (**)(void, char *, void *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v32 + 32, v56, *(void *)(a1 + 392), *(void *)(a1 + 400));
    uint64_t v33 = *(unsigned int *)(a1 + 352);
    if (v33)
    {
      uint64_t v50 = *(void *)(a1 + 344);
      uint64_t v51 = v50 + 16 * v33;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v16, *(_DWORD *)v50, *(llvm::MDNode **)(v50 + 8));
        v50 += 16;
      }
      while (v50 != v51);
    }
    *((_WORD *)v32 + 25) = *((_WORD *)v32 + 25) & 0xFC7F | ((_WORD)a5 << 7);
    v32[92] = 1;
    if (*(unsigned __int8 *)(v10 + 8) > 6u)
    {
      v56[0] = "atomic.ptr.cast";
      __int16 v57 = 259;
      if (*(void *)v16 != v10)
      {
        if (v32[48] <= 0x14u)
        {
          uint64_t v16 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a1 + 416) + 224))(*(void *)(a1 + 416), 48, v16, v10);
          if (v16) {
            BOOL v44 = v16[16] >= 0x1Cu;
          }
          else {
            BOOL v44 = 0;
          }
          if (v44)
          {
            (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v16, v56, *(void *)(a1 + 392), *(void *)(a1 + 400));
            uint64_t v45 = *(unsigned int *)(a1 + 352);
            if (v45)
            {
              uint64_t v46 = *(void *)(a1 + 344);
              uint64_t v47 = v46 + 16 * v45;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v16, *(_DWORD *)v46, *(llvm::MDNode **)(v46 + 8));
                v46 += 16;
              }
              while (v46 != v47);
            }
          }
        }
        else
        {
          __int16 v59 = 257;
          uint64_t v16 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v16, v10, v58, 0);
          (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v16, v56, *(void *)(a1 + 392), *(void *)(a1 + 400));
          uint64_t v37 = *(unsigned int *)(a1 + 352);
          if (v37)
          {
            uint64_t v38 = *(void *)(a1 + 344);
            uint64_t v39 = v38 + 16 * v37;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v16, *(_DWORD *)v38, *(llvm::MDNode **)(v38 + 8));
              v38 += 16;
            }
            while (v38 != v39);
          }
        }
      }
    }
    else
    {
      v56[0] = "atomic.flt.cast";
      __int16 v57 = 259;
      if (*(void *)v16 != v10)
      {
        if (v32[48] <= 0x14u)
        {
          uint64_t v16 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a1 + 416) + 224))(*(void *)(a1 + 416), 49, v16, v10);
          if (v16) {
            BOOL v40 = v16[16] >= 0x1Cu;
          }
          else {
            BOOL v40 = 0;
          }
          if (v40)
          {
            (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v16, v56, *(void *)(a1 + 392), *(void *)(a1 + 400));
            uint64_t v41 = *(unsigned int *)(a1 + 352);
            if (v41)
            {
              uint64_t v42 = *(void *)(a1 + 344);
              uint64_t v43 = v42 + 16 * v41;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v16, *(_DWORD *)v42, *(llvm::MDNode **)(v42 + 8));
                v42 += 16;
              }
              while (v42 != v43);
            }
          }
        }
        else
        {
          __int16 v59 = 257;
          uint64_t v16 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v16, v10, v58, 0);
          (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v16, v56, *(void *)(a1 + 392), *(void *)(a1 + 400));
          uint64_t v34 = *(unsigned int *)(a1 + 352);
          if (v34)
          {
            uint64_t v35 = *(void *)(a1 + 344);
            uint64_t v36 = v35 + 16 * v34;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v16, *(_DWORD *)v35, *(llvm::MDNode **)(v35 + 8));
              v35 += 16;
            }
            while (v35 != v36);
          }
        }
      }
    }
  }
  if (a5 <= 7 && ((1 << a5) & 0xD0) != 0) {
    llvm::OpenMPIRBuilder::emitFlush(a1, a2);
  }
  sub_1CC27BF8C((uint64_t *)(a1 + 344), (uint64_t)v16, *(void *)v55, 0, *(unsigned __int8 *)(v55 + 17));
  return *(void *)(a1 + 392);
}

uint64_t llvm::OpenMPIRBuilder::createAtomicWrite(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int8 *a4, int a5)
{
  if (!sub_1CD60CD08(a1, a2)) {
    return *a2;
  }
  uint64_t v11 = *(void *)a3;
  uint64_t v10 = *(void *)(a3 + 8);
  int v12 = *(unsigned __int8 *)(v10 + 8);
  if (v12 == 13)
  {
    __int16 v13 = (uint64_t *)(a1 + 344);
    __int16 v14 = *(unsigned __int8 *)(a3 + 17);
    uint64_t v15 = (uint64_t)a4;
  }
  else
  {
    uint64_t v17 = (llvm::Type *)(*(_DWORD *)(*(void *)v11 + 8) >> 8);
    uint64_t v18 = **(llvm::IntegerType ***)(a1 + 336);
    if ((v12 & 0xFE) == 0x12) {
      uint64_t v10 = **(void **)(v10 + 16);
    }
    PrimitiveSizeInBits = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v10);
    uint64_t v20 = (llvm::PointerType *)llvm::IntegerType::get(v18, PrimitiveSizeInBits);
    uint64_t v21 = *(unsigned __int8 **)a3;
    unint64_t v22 = llvm::PointerType::get(v20, v17);
    v38[0] = "atomic.dst.int.cast";
    __int16 v39 = 259;
    if (*(void *)v21 != v22)
    {
      if (v21[16] <= 0x14u)
      {
        uint64_t v21 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**(void **)(a1 + 416) + 224))(*(void *)(a1 + 416), 49, v21, v22);
        if (v21) {
          BOOL v25 = v21[16] >= 0x1Cu;
        }
        else {
          BOOL v25 = 0;
        }
        if (v25)
        {
          (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v21, v38, *(void *)(a1 + 392), *(void *)(a1 + 400));
          uint64_t v31 = *(unsigned int *)(a1 + 352);
          if (v31)
          {
            uint64_t v32 = *(void *)(a1 + 344);
            uint64_t v37 = v32 + 16 * v31;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v21, *(_DWORD *)v32, *(llvm::MDNode **)(v32 + 8));
              v32 += 16;
            }
            while (v32 != v37);
          }
        }
      }
      else
      {
        __int16 v41 = 257;
        uint64_t v21 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v21, v22, v40, 0);
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v21, v38, *(void *)(a1 + 392), *(void *)(a1 + 400));
        uint64_t v23 = *(unsigned int *)(a1 + 352);
        if (v23)
        {
          uint64_t v24 = *(void *)(a1 + 344);
          uint64_t v36 = v24 + 16 * v23;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v21, *(_DWORD *)v24, *(llvm::MDNode **)(v24 + 8));
            v24 += 16;
          }
          while (v24 != v36);
        }
      }
    }
    v38[0] = "atomic.src.int.cast";
    __int16 v39 = 259;
    if (*(llvm::PointerType **)a4 != v20)
    {
      if (a4[16] <= 0x14u)
      {
        a4 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, llvm::PointerType *))(**(void **)(a1 + 416) + 224))(*(void *)(a1 + 416), 49, a4, v20);
        if (a4) {
          BOOL v29 = a4[16] >= 0x1Cu;
        }
        else {
          BOOL v29 = 0;
        }
        if (v29)
        {
          (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), a4, v38, *(void *)(a1 + 392), *(void *)(a1 + 400));
          uint64_t v33 = *(unsigned int *)(a1 + 352);
          if (v33)
          {
            uint64_t v34 = *(void *)(a1 + 344);
            uint64_t v35 = v34 + 16 * v33;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)a4, *(_DWORD *)v34, *(llvm::MDNode **)(v34 + 8));
              v34 += 16;
            }
            while (v34 != v35);
          }
        }
      }
      else
      {
        __int16 v41 = 257;
        a4 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)a4, (uint64_t)v20, v40, 0);
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), a4, v38, *(void *)(a1 + 392), *(void *)(a1 + 400));
        uint64_t v26 = *(unsigned int *)(a1 + 352);
        if (v26)
        {
          uint64_t v27 = *(void *)(a1 + 344);
          uint64_t v28 = v27 + 16 * v26;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)a4, *(_DWORD *)v27, *(llvm::MDNode **)(v27 + 8));
            v27 += 16;
          }
          while (v27 != v28);
        }
      }
    }
    __int16 v14 = *(unsigned __int8 *)(a3 + 17);
    __int16 v13 = (uint64_t *)(a1 + 344);
    uint64_t v15 = (uint64_t)a4;
    uint64_t v11 = (uint64_t)v21;
  }
  __int16 v30 = sub_1CC27BF8C(v13, v15, v11, 0, v14);
  *((_WORD *)v30 + 9) = *((_WORD *)v30 + 9) & 0xFC7F | ((_WORD)a5 << 7);
  *((unsigned char *)v30 + 60) = 1;
  if ((a5 - 5) <= 2) {
    llvm::OpenMPIRBuilder::emitFlush(a1, a2);
  }
  return *(void *)(a1 + 392);
}

uint64_t llvm::OpenMPIRBuilder::createAtomicUpdate(uint64_t a1, uint64_t *a2, int a3, int a4, uint64_t a5, uint64_t *a6, int a7, unsigned int a8, uint64_t a9, char a10)
{
  if (!sub_1CD60CD08(a1, a2)) {
    return *a2;
  }
  llvm::OpenMPIRBuilder::emitAtomicUpdate(a1, a3, a4, *(unsigned __int8 **)a5, *(llvm::Type **)(a5 + 8), a6, a7, a8, a9, *(unsigned char *)(a5 + 17), a10);
  if ((a7 - 5) <= 2) {
    llvm::OpenMPIRBuilder::emitFlush(a1, a2);
  }
  return *(void *)(a1 + 392);
}

llvm::Instruction *llvm::OpenMPIRBuilder::emitAtomicUpdate(uint64_t a1, int a2, int a3, unsigned __int8 *a4, llvm::Type *this, uint64_t *a6, __int16 a7, unsigned int a8, uint64_t a9, char a10, unsigned __int8 a11)
{
  if (a8 > 6)
  {
    int v16 = *((_DWORD *)this + 2);
    goto LABEL_15;
  }
  int v14 = a11;
  BOOL v15 = this != 0;
  if (!this) {
    int v14 = 0;
  }
  if (a8 == 2) {
    BOOL v15 = v14;
  }
  int v16 = *((unsigned __int8 *)this + 8);
  if (!v15 || v16 != 13)
  {
LABEL_15:
    uint64_t v21 = (llvm::Type *)(*(_DWORD *)(*(void *)a4 + 8) >> 8);
    unint64_t v22 = **(llvm::IntegerType ***)(a1 + 336);
    uint64_t v23 = this;
    if ((v16 & 0xFE) == 0x12) {
      uint64_t v23 = (llvm::Type *)**((void **)this + 2);
    }
    PrimitiveSizeInBits = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits(v23);
    uint64_t v70 = (llvm::PointerType *)llvm::IntegerType::get(v22, PrimitiveSizeInBits);
    unint64_t v25 = llvm::PointerType::get(v70, v21);
    __int16 v73 = 257;
    uint64_t v26 = a4;
    if (*(void *)a4 != v25)
    {
      if (a4[16] <= 0x14u)
      {
        uint64_t v26 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**(void **)(a1 + 416) + 224))(*(void *)(a1 + 416), 49, a4, v25);
        if (v26) {
          BOOL v30 = v26[16] >= 0x1Cu;
        }
        else {
          BOOL v30 = 0;
        }
        if (v30)
        {
          (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v26, v72, *(void *)(a1 + 392), *(void *)(a1 + 400));
          uint64_t v66 = *(unsigned int *)(a1 + 352);
          if (v66)
          {
            uint64_t v67 = *(void *)(a1 + 344);
            uint64_t v68 = v67 + 16 * v66;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v26, *(_DWORD *)v67, *(llvm::MDNode **)(v67 + 8));
              v67 += 16;
            }
            while (v67 != v68);
          }
        }
      }
      else
      {
        __int16 v75 = 257;
        uint64_t v26 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)a4, v25, v74, 0);
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v26, v72, *(void *)(a1 + 392), *(void *)(a1 + 400));
        uint64_t v27 = *(unsigned int *)(a1 + 352);
        if (v27)
        {
          uint64_t v28 = *(void *)(a1 + 344);
          uint64_t v29 = v28 + 16 * v27;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v26, *(_DWORD *)v28, *(llvm::MDNode **)(v28 + 8));
            v28 += 16;
          }
          while (v28 != v29);
        }
      }
    }
    unsigned int v71 = a4 >> 4;
    if ((a4[23] & 0x10) != 0)
    {
      uint64_t v31 = ***(void ***)a4;
      uint64_t v32 = *(void *)(v31 + 152);
      uint64_t v33 = *(unsigned int *)(v31 + 168);
      if (v33)
      {
        LODWORD(v34) = (v33 - 1) & (v71 ^ (a4 >> 9));
        uint64_t v35 = (unsigned __int8 **)(v32 + 16 * v34);
        uint64_t v36 = *v35;
        if (*v35 != a4)
        {
          int v37 = 1;
          do
          {
            if (v36 == (unsigned __int8 *)-4096) {
              goto LABEL_34;
            }
            int v38 = v34 + v37++;
            uint64_t v34 = v38 & (v33 - 1);
            uint64_t v36 = *(unsigned __int8 **)(v32 + 16 * v34);
          }
          while (v36 != a4);
          uint64_t v35 = (unsigned __int8 **)(v32 + 16 * v34);
        }
      }
      else
      {
LABEL_34:
        uint64_t v35 = (unsigned __int8 **)(v32 + 16 * v33);
      }
      __int16 v39 = v35[1];
      uint64_t v42 = *(void *)v39;
      BOOL v40 = (char *)(v39 + 16);
      uint64_t v41 = v42;
    }
    else
    {
      uint64_t v41 = 0;
      BOOL v40 = &byte_1CFBCE98E;
    }
    __int16 v73 = 773;
    v72[0] = v40;
    v72[1] = v41;
    v72[2] = ".atomic.load";
    uint64_t v43 = (uint64_t *)(a1 + 392);
    char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(a1 + 392) + 56) + 40) + 272), v70, 1);
    uint64_t v45 = operator new(0x60uLL);
    v45[13] = v45[13] & 0x38000000 | 1;
    *(void *)uint64_t v45 = 0;
    *((void *)v45 + 1) = 0;
    *((void *)v45 + 2) = 0;
    *((void *)v45 + 3) = v45 + 8;
    __int16 v75 = 257;
    llvm::LoadInst::LoadInst((llvm::Value *)(v45 + 8), (uint64_t)v70, (uint64_t)v26, v74, 0, Alignment, 0);
    (*(void (**)(void, _DWORD *, void *, void, void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v45 + 8, v72, *(void *)(a1 + 392), *(void *)(a1 + 400));
    uint64_t v46 = *(unsigned int *)(a1 + 352);
    if (v46)
    {
      uint64_t v64 = *(void *)(a1 + 344);
      uint64_t v65 = v64 + 16 * v46;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)(v45 + 8), *(_DWORD *)v64, *(llvm::MDNode **)(v64 + 8));
        v64 += 16;
      }
      while (v64 != v65);
    }
    *((_WORD *)v45 + 25) = *((_WORD *)v45 + 25) & 0xFC7F | (a7 << 7);
    *((unsigned char *)v45 + 92) = 1;
    uint64_t v47 = *v43;
    uint64_t v48 = *(void *)(*v43 + 40);
    if (v48 == *v43 + 40
      || ((v49 = (llvm::Instruction *)(v48 - 24), v48) ? (uint64_t v50 = v48 - 24) : (uint64_t v50 = 0),
          *(unsigned __int8 *)(v50 + 16) - 29 >= 0xB))
    {
      uint64_t v49 = LLVMBuildUnreachable_0(a1 + 344);
    }
    if ((a4[23] & 0x10) != 0)
    {
      uint64_t v51 = ***(void ***)a4;
      uint64_t v52 = *(void *)(v51 + 152);
      uint64_t v53 = *(unsigned int *)(v51 + 168);
      if (v53)
      {
        LODWORD(v54) = (v53 - 1) & (v71 ^ (a4 >> 9));
        uint64_t v55 = (unsigned __int8 **)(v52 + 16 * v54);
        uint64_t v56 = *v55;
        if (*v55 != a4)
        {
          int v57 = 1;
          do
          {
            if (v56 == (unsigned __int8 *)-4096) {
              goto LABEL_50;
            }
            int v58 = v54 + v57++;
            uint64_t v54 = v58 & (v53 - 1);
            uint64_t v56 = *(unsigned __int8 **)(v52 + 16 * v54);
          }
          while (v56 != a4);
          uint64_t v55 = (unsigned __int8 **)(v52 + 16 * v54);
        }
      }
      else
      {
LABEL_50:
        uint64_t v55 = (unsigned __int8 **)(v52 + 16 * v53);
      }
      __int16 v59 = v55[1];
      unint64_t v62 = *(const char **)v59;
      uint64_t v60 = (const char *)(v59 + 16);
      uint64_t v61 = v62;
    }
    else
    {
      uint64_t v61 = 0;
      uint64_t v60 = &byte_1CFBCE98E;
    }
    __int16 v75 = 773;
    v74[0] = v60;
    v74[1] = v61;
    v74[2] = ".atomic.exit";
    llvm::BasicBlock::splitBasicBlock(v47, (uint64_t)v49 + 24, (uint64_t)v74, 0);
  }
  __int16 v19 = sub_1CD5097F8((uint64_t *)(a1 + 344), a8, (uint64_t)a4, a6, 0, a7, 1);
  uint64_t v20 = v19;
  if (a8) {
    llvm::OpenMPIRBuilder::emitRMWOpAsInstruction(a1, v19, (uint64_t)a6, a8);
  }
  return v20;
}

llvm::Instruction *llvm::OpenMPIRBuilder::emitRMWOpAsInstruction(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  switch(a4)
  {
    case 2:
      __int16 v9 = 257;
      uint64_t result = sub_1CB84494C(a1 + 344, (uint64_t)a2, a3, (uint64_t)v8, 0, 0);
      break;
    case 3:
      __int16 v9 = 257;
      uint64_t result = sub_1CBF52474(a1 + 344, a2, a3, (uint64_t)v8);
      break;
    case 4:
      uint64_t v5 = a1 + 344;
      __int16 v9 = 257;
      uint64_t v6 = sub_1CBF52474(a1 + 344, a2, a3, (uint64_t)v8);
      v7[16] = 257;
      uint64_t result = sub_1CD5A6358(v5, v6, (uint64_t)v7, 0, 0);
      break;
    case 5:
      __int16 v9 = 257;
      uint64_t result = sub_1CB844AF4(a1 + 344, a2, a3, (uint64_t)v8);
      break;
    case 6:
      __int16 v9 = 257;
      uint64_t result = sub_1CC2428C0(a1 + 344, (uint64_t)a2, a3, (uint64_t)v8);
      break;
    default:
      __int16 v9 = 257;
      uint64_t result = sub_1CB844A3C(a1 + 344, a2, a3, (uint64_t)v8, 0, 0);
      break;
  }
  return result;
}

uint64_t llvm::OpenMPIRBuilder::createAtomicCapture(uint64_t a1, uint64_t *a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, unsigned int a9, uint64_t a10, char a11, char a12, char a13)
{
  if (!sub_1CD60CD08(a1, a2)) {
    return *a2;
  }
  if (!a11) {
    a9 = 0;
  }
  unint64_t v22 = llvm::OpenMPIRBuilder::emitAtomicUpdate(a1, a3, a4, *(unsigned __int8 **)a5, *(llvm::Type **)(a5 + 8), a7, a8, a9, a10, *(unsigned char *)(a5 + 17), a13);
  if (a12) {
    uint64_t v23 = (uint64_t)v22;
  }
  sub_1CC27BF8C((uint64_t *)(a1 + 344), v23, *(void *)a6, 0, *(unsigned __int8 *)(a6 + 17));
  if ((a8 & 0xFFFFFFFC) == 4) {
    llvm::OpenMPIRBuilder::emitFlush(a1, a2);
  }
  return *(void *)(a1 + 392);
}

uint64_t sub_1CC6D8C2C(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 32 * v1;
    uint64_t v3 = (void *)(*(void *)result + 8);
    do
    {
      if ((*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        uint64_t result = MEMORY[0x1D25D9CD0](*v3, 8);
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1CC6D8C84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CC6D8CE4(a1, a2);
  long long v5 = *(_OWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(v4 + 56) = v4 + 72;
  uint64_t v7 = v4 + 56;
  *(void *)(v7 - 8) = v6;
  *(_OWORD *)(v7 - 24) = v5;
  *(void *)(v7 + 8) = 0x200000000;
  if (*(_DWORD *)(a2 + 64)) {
    sub_1CBB08064(v7, a2 + 56);
  }
  return a1;
}

uint64_t sub_1CC6D8CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1CC6D8D7C(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(uint64_t **)(a3 + 48);
  uint64_t v7 = a1 + 5;
  if (a1 + 5 != a2 && v6 != v7)
  {
    *(_WORD *)(a3 + 18) &= ~0x8000u;
    if (a1 == (uint64_t *)a3)
    {
LABEL_15:
      uint64_t v13 = *v7;
      uint64_t v14 = *a2;
      *(void *)(v14 + 8) = v7;
      *uint64_t v7 = v14;
      uint64_t v15 = *v6;
      *(void *)(v13 + 8) = v6;
      *a2 = v15;
      *(void *)(v15 + 8) = a2;
      uint64_t *v6 = v13;
      goto LABEL_16;
    }
    __int16 v9 = *(llvm::ValueSymbolTable **)(a3 + 56);
    if (v9) {
      __int16 v9 = (llvm::ValueSymbolTable *)*((void *)v9 + 13);
    }
    uint64_t v10 = (llvm::ValueSymbolTable *)a1[7];
    if (v10) {
      uint64_t v10 = (llvm::ValueSymbolTable *)*((void *)v10 + 13);
    }
    if (v9 == v10)
    {
      uint64_t v11 = a2;
      do
      {
        int v12 = v11 - 3;
        if (!v11) {
          int v12 = 0;
        }
        v12[5] = a3;
        uint64_t v11 = (uint64_t *)v11[1];
      }
      while (v11 != v7);
      goto LABEL_15;
    }
    uint64_t v49 = v10;
    uint64_t v46 = v9;
    uint64_t v18 = a2;
    BOOL v44 = a2;
    uint64_t v45 = v6;
    int v43 = a4;
    uint64_t v42 = a1 + 5;
    while (1)
    {
      __int16 v19 = (llvm::Value *)(v18 - 3);
      if (!v18) {
        __int16 v19 = 0;
      }
      uint64_t v51 = v19;
      int v48 = *((_DWORD *)v19 + 5) & 0x10000000;
      if (v49)
      {
        if (v48) {
          break;
        }
      }
LABEL_46:
      *((void *)v51 + 5) = a3;
      if (v46 && v48) {
        llvm::ValueSymbolTable::reinsertValue(v46, v51);
      }
      uint64_t v18 = (uint64_t *)v18[1];
      uint64_t v7 = v42;
      a4 = v43;
      a2 = v44;
      uint64_t v6 = v45;
      if (v18 == v42) {
        goto LABEL_15;
      }
    }
    uint64_t v20 = ***(void ***)v19;
    uint64_t v21 = *(void *)(v20 + 152);
    uint64_t v22 = *(unsigned int *)(v20 + 168);
    if (v22)
    {
      LODWORD(v23) = (v22 - 1) & ((v51 >> 4) ^ (v51 >> 9));
      uint64_t v24 = (llvm::Value **)(v21 + 16 * v23);
      unint64_t v25 = *v24;
      if (*v24 == v51) {
        goto LABEL_33;
      }
      int v26 = 1;
      while (v25 != (llvm::Value *)-4096)
      {
        int v27 = v23 + v26++;
        uint64_t v23 = v27 & (v22 - 1);
        unint64_t v25 = *(llvm::Value **)(v21 + 16 * v23);
        if (v25 == v51)
        {
          uint64_t v24 = (llvm::Value **)(v21 + 16 * v23);
          goto LABEL_33;
        }
      }
    }
    uint64_t v24 = (llvm::Value **)(v21 + 16 * v22);
LABEL_33:
    uint64_t v28 = *((unsigned int *)v49 + 2);
    if (v28)
    {
      uint64_t v29 = (size_t *)v24[1];
      uint64_t v47 = *((unsigned int *)v49 + 5);
      __s1 = (char *)v29 + v47;
      size_t v30 = *v29;
      if (*v29)
      {
        int v31 = 0;
        size_t v32 = *v29;
        uint64_t v33 = (unsigned __int8 *)v29 + v47;
        do
        {
          int v34 = *v33++;
          int v31 = 33 * v31 + v34;
          --v32;
        }
        while (v32);
      }
      else
      {
        int v31 = 0;
      }
      unsigned int v35 = v28 - 1;
      uint64_t v36 = *(void *)v49;
      uint64_t v37 = *(void *)v49 + 8 * v28 + 8;
      int v38 = 1;
      int v39 = v31;
      while (1)
      {
        uint64_t v40 = v39 & v35;
        uint64_t v41 = *(void **)(v36 + 8 * v40);
        if (v41 != (void *)-8)
        {
          if (!v41) {
            goto LABEL_46;
          }
          if (*(_DWORD *)(v37 + 4 * v40) == v31 && v30 == *v41 && (!v30 || !memcmp(__s1, (char *)v41 + v47, v30))) {
            break;
          }
        }
        int v39 = v38 + v40;
        ++v38;
      }
      *(void *)(v36 + 8 * (int)v40) = -8;
      *(int32x2_t *)((char *)v49 + 12) = vadd_s32(*(int32x2_t *)((char *)v49 + 12), (int32x2_t)0x1FFFFFFFFLL);
    }
    goto LABEL_46;
  }
LABEL_16:
  if (a4)
  {
    int v16 = operator new(0x60uLL);
    v16[13] = v16[13] & 0x38000000 | 1;
    *(void *)int v16 = 0;
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 2) = 0;
    *((void *)v16 + 3) = v16 + 8;
    uint64_t v17 = (llvm::BranchInst *)(v16 + 8);
    llvm::BranchInst::BranchInst(v17, (llvm::BasicBlock *)a3, (llvm::BasicBlock *)a1);
  }
}

uint64_t sub_1CC6D90A4(uint64_t result, unsigned int a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(result + 20);
  if ((v3 & 0x40000000) != 0) {
    uint64_t v4 = *(void *)(result - 8);
  }
  else {
    uint64_t v4 = result - 32 * (v3 & 0x7FFFFFF);
  }
  uint64_t v5 = v4 + 32 * a2;
  if (*(void *)v5)
  {
    **(void **)(v5 + 16) = *(void *)(v5 + 8);
    uint64_t v10 = *(void *)(v5 + 8);
    if (v10) {
      *(void *)(v10 + 16) = *(void *)(v5 + 16);
    }
  }
  *(void *)uint64_t v5 = a3;
  if (a3)
  {
    uint64_t v8 = *(void *)(a3 + 8);
    uint64_t v6 = (void *)(a3 + 8);
    uint64_t v7 = v8;
    uint64_t v9 = v4 + 32 * a2;
    *(void *)(v9 + 8) = v8;
    if (v8) {
      *(void *)(v7 + 16) = v9 + 8;
    }
    *(void *)(v9 + 16) = v6;
    void *v6 = v5;
  }
  return result;
}

unsigned int *sub_1CC6D911C(unsigned int *a1)
{
  MEMORY[0x1D25D9CD0](*((void *)a1 + 6), 8);
  uint64_t v2 = a1[10];
  uint64_t v3 = *((void *)a1 + 3);
  if (v2)
  {
    uint64_t v5 = 32 * v2;
    uint64_t v6 = (uint64_t *)(v3 + 8);
    do
    {
      uint64_t v7 = *(v6 - 1);
      if (v7 != -4096 && v7 != -8192)
      {
        uint64_t v8 = v5;
        uint64_t v9 = v6;
        sub_1CBF5408C(v6);
        uint64_t v5 = v8;
        uint64_t v6 = v9;
      }
      v6 += 4;
      v5 -= 32;
    }
    while (v5);
    uint64_t v3 = *((void *)a1 + 3);
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  sub_1CBF54128(a1);
  MEMORY[0x1D25D9CD0](*(void *)a1, 8);
  return a1;
}

void *sub_1CC6D91C0(_DWORD *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CBA0E618((uint64_t)a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CC6D9220(a1, (uint64_t)a2, a2, v7);
    void *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CC6D9220(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = a1[2];
  unsigned int v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC6D92D4((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CBA0E618((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096) {
    --a1[3];
  }
  return a4;
}

void *sub_1CC6D92D4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD611644(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1CC6D93A0(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1 + 8;
  if (!*(unsigned char *)(a1 + 208))
  {
    uint64_t v4 = *(void *)(a2 + 40) + 216;
    __int16 v8 = 260;
    v7[0] = v4;
    uint64_t v5 = a1 + 8;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v7);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = 0;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    *(void *)&long long v6 = -1;
    *((void *)&v6 + 1) = -1;
    *(_OWORD *)uint64_t v11 = v6;
    long long v12 = v6;
    long long v13 = v6;
    long long v14 = v6;
    long long v15 = v6;
    long long v16 = v6;
    *(_OWORD *)uint64_t v17 = v6;
    *(void *)&v17[13] = -1;
    sub_1CC153974((uint64_t)v11, (int *)__p);
    sub_1CD4D04B8(v5, (uint64_t)v11);
    sub_1CD4CFA4C((uint64_t *)v11);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v3 = v5;
  }
  sub_1CC1569E8(v11, v3);
}

void sub_1CC6D94E4()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CC6D967C(void *a1)
{
  *a1 = &unk_1F261B750;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC6D96F0()
{
  return 0;
}

void sub_1CC6D96F8()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::AnalysisManager<llvm::Function>::getResultImpl();
}

void sub_1CC6D97D4()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CC6D9978(uint64_t a1)
{
  *(void *)a1 = &unk_1F261B7A8;
  sub_1CBF69A38((void *)(a1 + 168));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 168), 8);
  sub_1CBF69C4C((char **)(a1 + 24));

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC6D99F0()
{
  return 0;
}

void sub_1CC6D99F8(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v2[0] = v3;
  v2[1] = (void *)0x100000000;
  int v8 = 0;
  v3[1] = 0;
  v3[2] = 0;
  int v4 = 0;
  char v7 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = a2;
  sub_1CC5A43B0((uint64_t)v2, 0);
  operator new();
}

void *sub_1CC6D9B24(void *a1)
{
  *a1 = &unk_1F261B800;
  sub_1CBF8FF88(a1 + 4);
  uint64_t v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CC6D9B7C(void *a1)
{
  *a1 = &unk_1F261B800;
  sub_1CBF8FF88(a1 + 4);
  uint64_t v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CC6D9BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::DominatorTree::invalidate(a1 + 8, a2, a3);
}

void sub_1CC6D9BFC()
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  llvm::LoopAnalysis::run((uint64_t)v0);
}

void sub_1CC6D9CC8(void *a1)
{
  *a1 = &unk_1F261B858;
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase();
}

BOOL sub_1CC6D9D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::LoopInfo::invalidate(a1 + 8, a2, a3);
}

void sub_1CC6D9D34()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::ScalarEvolutionAnalysis::run();
}

void sub_1CC6D9E00(void *a1)
{
  *a1 = &unk_1F261B8B0;
  llvm::ScalarEvolution::~ScalarEvolution((llvm::ScalarEvolution *)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC6D9E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return llvm::ScalarEvolution::invalidate(a1 + 8, a2, a3, a4);
}

void sub_1CC6D9E6C()
{
}

void sub_1CC6D9EC8()
{
}

uint64_t sub_1CC6D9EDC()
{
  return 0;
}

void sub_1CC6D9EE8()
{
}

void *sub_1CC6D9EFC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F261B930;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC6D9F44(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F261B930;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC6D9F70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 88))();
}

void *sub_1CC6D9F9C(void *a1)
{
  *a1 = &unk_1F261B978;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void sub_1CC6DA040(void *a1)
{
  *a1 = &unk_1F261B978;
  uint64_t v1 = a1 + 1;
  uint64_t v2 = (void *)a1[4];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC6DA104(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 48))(&v3);
    operator new();
  }
  sub_1CB920400();
  sub_1CC6DA19C(v2);
}

void sub_1CC6DA19C(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1F261B9A8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC6DA228()
{
  return 0;
}

uint64_t *sub_1CC6DA230(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (v3)
  {
    sub_1CBF5385C(v2, v3, a1[2]);
  }
  else
  {
    *(void *)(v2 + 48) = 0;
    *(void *)(v2 + 56) = 0;
  }
  uint64_t v4 = *a1;
  uint64_t v6 = (unsigned __int8 **)(a1 + 3);
  uint64_t v5 = (unsigned __int8 *)a1[3];
  uint64_t v18 = v5;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)&v18, v5, 2);
    uint64_t v7 = (uint64_t)v18;
  }
  else
  {
    uint64_t v7 = 0;
  }
  sub_1CB8461A4(v4, 0, v7);
  if (!v18) {
    goto LABEL_6;
  }
  int v10 = *v18;
  if ((v10 - 4) > 0x1E)
  {
    if ((v10 - 3) >= 0xFFFFFFFE) {
      long long v16 = v18;
    }
    else {
      long long v16 = 0;
    }
    if ((v10 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v12 = (unint64_t)(v16 + 8);
LABEL_27:
      uint64_t v19 = &v18;
      sub_1CC5FA668(v12 + 16, &v19);
      goto LABEL_6;
    }
    if (v10 == 3) {
      *((void *)v18 + 1) = 0;
    }
  }
  else if ((v18[1] & 0x7F) == 2 || *((_DWORD *)v18 + 3))
  {
    uint64_t v11 = *((void *)v18 + 2);
    if ((v11 & 4) != 0)
    {
      unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      if (v12) {
        goto LABEL_27;
      }
    }
  }
LABEL_6:
  int v8 = *v6;
  if (!*v6) {
    return a1;
  }
  int v13 = *v8;
  if ((v13 - 4) > 0x1E)
  {
    if ((v13 - 3) >= 0xFFFFFFFE) {
      uint64_t v17 = *v6;
    }
    else {
      uint64_t v17 = 0;
    }
    if ((v13 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v15 = (unint64_t)(v17 + 8);
LABEL_33:
      uint64_t v19 = (unsigned __int8 **)(a1 + 3);
      sub_1CC5FA668(v15 + 16, &v19);
      return a1;
    }
    if (v13 == 3) {
      *((void *)v8 + 1) = 0;
    }
  }
  else if ((v8[1] & 0x7F) == 2 || *((_DWORD *)v8 + 3))
  {
    uint64_t v14 = *((void *)v8 + 2);
    if ((v14 & 4) != 0)
    {
      unint64_t v15 = v14 & 0xFFFFFFFFFFFFFFF8;
      if (v15) {
        goto LABEL_33;
      }
    }
  }
  return a1;
}

uint64_t sub_1CC6DA3B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a1;
    do
    {
      uint64_t v8 = a3 + v6;
      uint64_t v9 = a1 + v6;
      sub_1CC6DA560((void *)(a3 + v6), a1 + v6);
      uint64_t v10 = *(void *)(a1 + v6 + 48);
      *(_OWORD *)(v8 + 32) = *(_OWORD *)(a1 + v6 + 32);
      *(void *)(v8 + 48) = v10;
      if (a3 != a1)
      {
        uint64_t v11 = (void **)(v8 + 56);
        unint64_t v12 = *(void **)(v9 + 56);
        if ((void *)(v9 + 72) == v12)
        {
          uint64_t v14 = (_DWORD *)(a1 + v6 + 64);
          uint64_t v13 = *v14;
          uint64_t v15 = a3 + v6;
          uint64_t v16 = *(unsigned int *)(a3 + v6 + 64);
          if (v16 >= v13)
          {
            if (v13) {
              memmove(*v11, v12, 8 * v13);
            }
          }
          else
          {
            if (*(_DWORD *)(v15 + 68) < v13)
            {
              *(_DWORD *)(v15 + 64) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v16)
            {
              uint64_t v20 = *(unsigned int *)(a3 + v6 + 64);
              long long v21 = v11;
              memmove(*v11, v12, 8 * v16);
              uint64_t v17 = v20;
              uint64_t v11 = v21;
            }
            else
            {
              uint64_t v17 = 0;
            }
            uint64_t v18 = *v14;
            if (v17 != v18) {
              memcpy((char *)*v11 + 8 * v17, (const void *)(*(void *)(v9 + 56) + 8 * v17), 8 * v18 - 8 * v17);
            }
          }
          *(_DWORD *)(v15 + 64) = v13;
        }
        else
        {
          if ((void *)(a3 + v6 + 72) != *v11)
          {
            free(*v11);
            uint64_t v11 = (void **)(v8 + 56);
            unint64_t v12 = *(void **)(v9 + 56);
          }
          *uint64_t v11 = v12;
          uint64_t v14 = (_DWORD *)(v7 + 64);
          *(void *)(a3 + v6 + 64) = *(void *)(a1 + v6 + 64);
          *(void *)(v9 + 56) = v9 + 72;
          *(_DWORD *)(a1 + v6 + 68) = 0;
        }
        *uint64_t v14 = 0;
      }
      v6 += 88;
      uint64_t v7 = v9 + 88;
    }
    while (v9 + 88 != a2);
    a3 += v6;
  }
  return a3;
}

void *sub_1CC6DA560(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v5;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_1CC6DA640(void *a1)
{
  *a1 = &unk_1F261B9D0;
  uint64_t v2 = (unsigned __int8 *)a1[5];
  if (v2)
  {
    int v3 = *v2;
    if ((v3 - 4) > 0x1E)
    {
      if ((v3 - 3) >= 0xFFFFFFFE) {
        uint64_t v5 = a1[5];
      }
      else {
        uint64_t v5 = 0;
      }
      if ((v3 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v6 = v5 + 8;
LABEL_11:
        uint64_t v8 = a1 + 5;
        sub_1CC5FA668(v6 + 16, &v8);
        return a1;
      }
      if (v3 == 3) {
        *((void *)v2 + 1) = 0;
      }
    }
    else if ((v2[1] & 0x7F) == 2 || *((_DWORD *)v2 + 3))
    {
      uint64_t v7 = *((void *)v2 + 2);
      if ((v7 & 4) != 0)
      {
        unint64_t v6 = v7 & 0xFFFFFFFFFFFFFFF8;
        if (v6) {
          goto LABEL_11;
        }
      }
    }
  }
  return a1;
}

void sub_1CC6DA708(void *a1)
{
  *a1 = &unk_1F261B9D0;
  uint64_t v1 = (unsigned __int8 *)a1[5];
  if (!v1) {
    goto LABEL_5;
  }
  int v2 = *v1;
  if ((v2 - 4) > 0x1E)
  {
    if ((v2 - 3) >= 0xFFFFFFFE) {
      uint64_t v3 = a1[5];
    }
    else {
      uint64_t v3 = 0;
    }
    if ((v2 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v4 = v3 + 8;
LABEL_13:
      unint64_t v6 = a1 + 5;
      sub_1CC5FA668(v4 + 16, &v6);
      goto LABEL_5;
    }
    if (v2 == 3) {
      *((void *)v1 + 1) = 0;
    }
  }
  else if ((v1[1] & 0x7F) == 2 || *((_DWORD *)v1 + 3))
  {
    uint64_t v5 = *((void *)v1 + 2);
    if ((v5 & 4) != 0)
    {
      unint64_t v4 = v5 & 0xFFFFFFFFFFFFFFF8;
      if (v4) {
        goto LABEL_13;
      }
    }
  }
LABEL_5:

  JUMPOUT(0x1D25D9CE0);
}

char *sub_1CC6DA7F0(uint64_t a1)
{
  int v2 = (char *)operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)int v2 = &unk_1F261B9D0;
  *((void *)v2 + 1) = v3;
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  unint64_t v4 = *(unsigned __int8 **)(a1 + 40);
  *((void *)v2 + 5) = v4;
  if (v4) {
    llvm::MetadataTracking::track((uint64_t)(v2 + 40), v4, 2);
  }
  return v2;
}

uint64_t sub_1CC6DA864(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F261B9D0;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  uint64_t v3 = *(unsigned __int8 **)(result + 40);
  *(void *)(a2 + 40) = v3;
  uint64_t v4 = a2 + 40;
  if (v3) {
    return llvm::MetadataTracking::track(v4, v3, 2);
  }
  return result;
}

uint64_t sub_1CC6DA8B8(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 **)(a1 + 40);
  uint64_t result = a1 + 40;
  uint64_t v2 = v3;
  if (v3)
  {
    int v4 = *v2;
    if ((v4 - 4) > 0x1E)
    {
      if ((v4 - 3) >= 0xFFFFFFFE) {
        uint64_t v5 = v2;
      }
      else {
        uint64_t v5 = 0;
      }
      if ((v4 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v6 = (unint64_t)(v5 + 8);
LABEL_11:
        uint64_t v8 = result;
        return sub_1CC5FA668(v6 + 16, &v8);
      }
      if (v4 == 3) {
        *((void *)v2 + 1) = 0;
      }
    }
    else if ((v2[1] & 0x7F) == 2 || *((_DWORD *)v2 + 3))
    {
      uint64_t v7 = *((void *)v2 + 2);
      if ((v7 & 4) != 0)
      {
        unint64_t v6 = v7 & 0xFFFFFFFFFFFFFFF8;
        if (v6) {
          goto LABEL_11;
        }
      }
    }
  }
  return result;
}

void sub_1CC6DA950(char *__p)
{
  uint64_t v2 = (unsigned __int8 *)*((void *)__p + 5);
  if (v2)
  {
    int v3 = *v2;
    if ((v3 - 4) <= 0x1E)
    {
      if ((v2[1] & 0x7F) != 2 && !*((_DWORD *)v2 + 3)) {
        goto LABEL_5;
      }
      uint64_t v6 = *((void *)v2 + 2);
      if ((v6 & 4) == 0) {
        goto LABEL_5;
      }
      unint64_t v5 = v6 & 0xFFFFFFFFFFFFFFF8;
      if (!v5) {
        goto LABEL_5;
      }
      goto LABEL_13;
    }
    if ((v3 - 3) >= 0xFFFFFFFE) {
      uint64_t v4 = *((void *)__p + 5);
    }
    else {
      uint64_t v4 = 0;
    }
    if ((v3 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v5 = v4 + 8;
LABEL_13:
      uint64_t v7 = __p + 40;
      sub_1CC5FA668(v5 + 16, &v7);
      goto LABEL_5;
    }
    if (v3 == 3) {
      *((void *)v2 + 1) = 0;
    }
  }
LABEL_5:

  operator delete(__p);
}

uint64_t sub_1CC6DAA0C(uint64_t result, uint64_t *a2)
{
  if (*(_DWORD *)(result + 16) != 40) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v7 = v6 + 344;
  uint64_t v32 = v6 + 344;
  uint64_t v8 = (long long *)(v6 + 392);
  long long v33 = *(_OWORD *)(v6 + 392);
  uint64_t v9 = *(unsigned int *)(v6 + 352);
  if (v9)
  {
    uint64_t v20 = (unsigned __int8 **)(*(void *)(v6 + 344) + 8);
    uint64_t v21 = 16 * v9;
    while (*((_DWORD *)v20 - 2))
    {
      v20 += 2;
      v21 -= 16;
      if (!v21) {
        goto LABEL_4;
      }
    }
    long long v22 = *v20;
    int v34 = v22;
    if (v22)
    {
      uint64_t v29 = v4;
      llvm::MetadataTracking::track((uint64_t)&v34, v22, 2);
      uint64_t v4 = v29;
      uint64_t v7 = v6 + 344;
    }
  }
  else
  {
LABEL_4:
    int v34 = 0;
  }
  if (v4)
  {
    sub_1CBF5385C(v7, v4, v5);
    long long v10 = *v8;
  }
  else
  {
    long long v10 = 0uLL;
    *uint64_t v8 = 0u;
  }
  long long v30 = v10;
  uint64_t v11 = *(unsigned __int8 **)(v3 + 40);
  int v31 = v11;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)&v31, v11, 2);
  }
  if (sub_1CD60CD08(v6, (uint64_t *)&v30)) {
    llvm::OpenMPIRBuilder::emitBarrierImpl(v6, &v30, 89, 0, 0);
  }
  if (v31)
  {
    int v12 = *v31;
    if ((v12 - 4) > 0x1E)
    {
      if ((v12 - 3) >= 0xFFFFFFFE) {
        uint64_t v18 = v31;
      }
      else {
        uint64_t v18 = 0;
      }
      if ((v12 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v19 = (unint64_t)(v18 + 8);
LABEL_34:
        unsigned int v35 = (unsigned __int8 *)&v31;
        sub_1CC5FA668(v19 + 16, &v35);
        goto LABEL_16;
      }
      if (v12 == 3) {
        *((void *)v31 + 1) = 0;
      }
    }
    else if ((v31[1] & 0x7F) == 2 || *((_DWORD *)v31 + 3))
    {
      uint64_t v28 = *((void *)v31 + 2);
      if ((v28 & 4) != 0)
      {
        unint64_t v19 = v28 & 0xFFFFFFFFFFFFFFF8;
        if (v19) {
          goto LABEL_34;
        }
      }
    }
  }
LABEL_16:
  uint64_t v13 = v32;
  if ((void)v33)
  {
    sub_1CBF5385C(v32, v33, *((uint64_t *)&v33 + 1));
    uint64_t v13 = v32;
  }
  else
  {
    *(void *)(v32 + 48) = 0;
    *(void *)(v13 + 56) = 0;
  }
  unsigned int v35 = v34;
  if (v34)
  {
    llvm::MetadataTracking::track((uint64_t)&v35, v34, 2);
    uint64_t v14 = (uint64_t)v35;
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t result = sub_1CB8461A4(v13, 0, v14);
  if (!v35) {
    goto LABEL_22;
  }
  int v23 = *v35;
  if ((v23 - 4) <= 0x1E)
  {
    if ((v35[1] & 0x7F) != 2 && !*((_DWORD *)v35 + 3)) {
      goto LABEL_22;
    }
    uint64_t v24 = *((void *)v35 + 2);
    if ((v24 & 4) == 0) {
      goto LABEL_22;
    }
    unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFF8;
    if (!v25) {
      goto LABEL_22;
    }
LABEL_61:
    *(void *)&long long v30 = &v35;
    uint64_t result = sub_1CC5FA668(v25 + 16, &v30);
    goto LABEL_22;
  }
  if ((v23 - 3) >= 0xFFFFFFFE) {
    int v27 = v35;
  }
  else {
    int v27 = 0;
  }
  if ((v23 - 3) >= 0xFFFFFFFE)
  {
    unint64_t v25 = (unint64_t)(v27 + 8);
    goto LABEL_61;
  }
  if (v23 == 3) {
    *((void *)v35 + 1) = 0;
  }
LABEL_22:
  if (!v34) {
    return result;
  }
  int v15 = *v34;
  if ((v15 - 4) > 0x1E)
  {
    if ((v15 - 3) >= 0xFFFFFFFE) {
      int v26 = v34;
    }
    else {
      int v26 = 0;
    }
    if ((v15 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v17 = (unint64_t)(v26 + 8);
LABEL_55:
      *(void *)&long long v30 = &v34;
      return sub_1CC5FA668(v17 + 16, &v30);
    }
    if (v15 == 3) {
      *((void *)v34 + 1) = 0;
    }
  }
  else if ((v34[1] & 0x7F) == 2 || *((_DWORD *)v34 + 3))
  {
    uint64_t v16 = *((void *)v34 + 2);
    if ((v16 & 4) != 0)
    {
      unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
      if (v17) {
        goto LABEL_55;
      }
    }
  }
  return result;
}

void sub_1CC6DAD0C()
{
}

__n128 sub_1CC6DAD20(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F261BA18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CC6DAD74(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F261BA18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CC6DADAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 + 40 != v4) {
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (uint64_t *)(v5 + 344);
  uint64_t v31 = v5 + 344;
  uint64_t v7 = (void *)(v5 + 392);
  long long v32 = *(_OWORD *)(v5 + 392);
  uint64_t v8 = *(unsigned int *)(v5 + 352);
  if (v8)
  {
    uint64_t v20 = (unsigned __int8 **)(*(void *)(v5 + 344) + 8);
    uint64_t v21 = 16 * v8;
    while (*((_DWORD *)v20 - 2))
    {
      v20 += 2;
      v21 -= 16;
      if (!v21) {
        goto LABEL_3;
      }
    }
    long long v22 = *v20;
    long long v33 = v22;
    if (v22) {
      llvm::MetadataTracking::track((uint64_t)&v33, v22, 2);
    }
  }
  else
  {
LABEL_3:
    long long v33 = 0;
  }
  if (v3)
  {
    sub_1CBF5385C((uint64_t)v6, v3, v4);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
  }
  uint64_t v9 = **(void **)(a1 + 16);
  long long v10 = (char *)operator new(0x60uLL);
  *((_DWORD *)v10 + 13) = *((_DWORD *)v10 + 13) & 0x38000000 | 1;
  *(void *)long long v10 = 0;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *((void *)v10 + 4) = ***(void ***)v9 + 1576;
  *((void *)v10 + 3) = v10 + 32;
  *((void *)v10 + 5) = 0;
  v10[48] = 30;
  v10[49] = 0;
  *((_WORD *)v10 + 25) = 0;
  *((_DWORD *)v10 + 13) = 1;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 22) = 0;
  *(void *)long long v10 = v9;
  uint64_t v13 = *(void *)(v9 + 8);
  int v12 = (void *)(v9 + 8);
  uint64_t v11 = v13;
  *((void *)v10 + 1) = v13;
  if (v13) {
    *(void *)(v11 + 16) = v10 + 8;
  }
  *((void *)v10 + 2) = v12;
  *int v12 = v10;
  __int16 v35 = 257;
  uint64_t v14 = sub_1CB844E0C(v6, (llvm::Instruction *)(v10 + 32), (uint64_t)v34);
  uint64_t v3 = *((void *)v14 + 5);
  uint64_t v15 = v31;
  if ((void)v32)
  {
    sub_1CBF5385C(v31, v32, *((uint64_t *)&v32 + 1));
    uint64_t v15 = v31;
  }
  else
  {
    *(void *)(v31 + 48) = 0;
    *(void *)(v31 + 56) = 0;
  }
  uint64_t v36 = v33;
  if (v33)
  {
    llvm::MetadataTracking::track((uint64_t)&v36, v33, 2);
    uint64_t v16 = (uint64_t)v36;
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v4 = (uint64_t)v14 + 24;
  sub_1CB8461A4(v15, 0, v16);
  if (v36)
  {
    int v23 = *v36;
    if ((v23 - 4) > 0x1E)
    {
      if ((v23 - 3) >= 0xFFFFFFFE) {
        uint64_t v29 = v36;
      }
      else {
        uint64_t v29 = 0;
      }
      if ((v23 - 3) < 0xFFFFFFFE)
      {
        if (v23 == 3) {
          *((void *)v36 + 1) = 0;
        }
        goto LABEL_15;
      }
      unint64_t v25 = (unint64_t)(v29 + 8);
    }
    else
    {
      if ((v36[1] & 0x7F) != 2 && !*((_DWORD *)v36 + 3)) {
        goto LABEL_15;
      }
      uint64_t v24 = *((void *)v36 + 2);
      if ((v24 & 4) == 0) {
        goto LABEL_15;
      }
      unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFF8;
      if (!v25) {
        goto LABEL_15;
      }
    }
    v34[0] = &v36;
    sub_1CC5FA668(v25 + 16, v34);
  }
LABEL_15:
  if (!v33) {
    goto LABEL_16;
  }
  int v26 = *v33;
  if ((v26 - 4) > 0x1E)
  {
    if ((v26 - 3) >= 0xFFFFFFFE) {
      long long v30 = v33;
    }
    else {
      long long v30 = 0;
    }
    if ((v26 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v28 = (unint64_t)(v30 + 8);
LABEL_48:
      v34[0] = &v33;
      sub_1CC5FA668(v28 + 16, v34);
      goto LABEL_16;
    }
    if (v26 == 3) {
      *((void *)v33 + 1) = 0;
    }
  }
  else if ((v33[1] & 0x7F) == 2 || *((_DWORD *)v33 + 3))
  {
    uint64_t v27 = *((void *)v33 + 2);
    if ((v27 & 4) != 0)
    {
      unint64_t v28 = v27 & 0xFFFFFFFFFFFFFFF8;
      if (v28) {
        goto LABEL_48;
      }
    }
  }
LABEL_16:
  uint64_t v17 = *(void *)(a1 + 24);
  v34[0] = v3;
  v34[1] = v4;
  uint64_t v18 = *(void *)(v17 + 24);
  if (v18) {
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)v18 + 48))(v18, v34);
  }
  sub_1CB920400();
  return sub_1CC6DB0B8();
}

void *sub_1CC6DB0B8(void *a1)
{
  *a1 = &unk_1F261BA60;
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  return a1;
}

void sub_1CC6DB10C(void *a1)
{
  *a1 = &unk_1F261BA60;
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

char *sub_1CC6DB180(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x80uLL);
  uint64_t v3 = v2;
  *(void *)uint64_t v2 = &unk_1F261BA60;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((void *)v2 + 9) = *(void *)(a1 + 72);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 10) = v2 + 96;
  *((void *)v2 + 11) = 0x400000000;
  unsigned int v4 = *(_DWORD *)(a1 + 88);
  if (v4 && v2 != (char *)a1)
  {
    if (v4 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 96, *(const void **)(a1 + 80), 8 * *(unsigned int *)(a1 + 88));
    *((_DWORD *)v3 + 22) = v4;
  }
  return v3;
}

char *sub_1CC6DB268(char *result, char *a2)
{
  *(void *)a2 = &unk_1F261BA60;
  long long v2 = *(_OWORD *)(result + 24);
  long long v3 = *(_OWORD *)(result + 40);
  long long v4 = *(_OWORD *)(result + 56);
  uint64_t v5 = *((void *)result + 9);
  long long v6 = *(_OWORD *)(result + 8);
  *((void *)a2 + 10) = a2 + 96;
  *(_OWORD *)(a2 + 8) = v6;
  *((void *)a2 + 9) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(_OWORD *)(a2 + 24) = v2;
  *((void *)a2 + 11) = 0x400000000;
  unsigned int v7 = *((_DWORD *)result + 22);
  if (v7 && a2 != result)
  {
    if (v7 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (char *)memcpy(a2 + 96, *((const void **)result + 10), 8 * *((unsigned int *)result + 22));
    *((_DWORD *)a2 + 22) = v7;
  }
  return result;
}

void sub_1CC6DB344(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 80);
  if (v2 != (void *)(a1 + 96)) {
    free(v2);
  }
}

void sub_1CC6DB360(void *__p)
{
  long long v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CC6DB3A8(void *a1, uint64_t a2)
{
  v100[13] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[1];
  uint64_t v5 = (uint64_t *)(a2 + 112);
  *(void *)(a2 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(a2 + 112), **(uint64_t ***)a2, 1, 19);
  *(void *)(a2 + 112) = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)a2, 2, 19);
  *(void *)(a2 + 112) = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)a2, -1, 37);
  *(void *)(a2 + 112) = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)a2, -1, 30);
  uint64_t v6 = *(void *)(a2 + 96);
  uint64_t v7 = *(void *)(*(void *)(a2 + 8) + 24);
  uint64_t v8 = *(llvm::Value **)(v7 + 40);
  uint64_t v96 = "omp_parallel";
  LOWORD(v99) = 259;
  llvm::Value::setNameImpl(v8, (const char **)&v96);
  if (v8) {
    BOOL v9 = *((unsigned char *)v8 + 16) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    if ((*((unsigned char *)v8 + 23) & 0x10) == 0) {
      goto LABEL_102;
    }
    uint64_t v69 = ***(void ***)v8;
    uint64_t v70 = *(void *)(v69 + 152);
    uint64_t v71 = *(unsigned int *)(v69 + 168);
    if (v71)
    {
      LODWORD(v72) = (v71 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      __int16 v73 = (llvm::Value **)(v70 + 16 * v72);
      uint64_t v74 = *v73;
      if (*v73 != v8)
      {
        int v75 = 1;
        do
        {
          if (v74 == (llvm::Value *)-4096) {
            goto LABEL_94;
          }
          int v76 = v72 + v75++;
          uint64_t v72 = v76 & (v71 - 1);
          uint64_t v74 = *(llvm::Value **)(v70 + 16 * v72);
        }
        while (v74 != v8);
        __int16 v73 = (llvm::Value **)(v70 + 16 * v72);
      }
    }
    else
    {
LABEL_94:
      __int16 v73 = (llvm::Value **)(v70 + 16 * v71);
    }
    uint64_t v80 = v73[1];
    unint64_t v83 = *(void *)v80;
    uint64_t v81 = (char *)v80 + 16;
    unint64_t v82 = v83;
    if (v83 >= 5 && (*(_DWORD *)v81 == *(_DWORD *)"llvm." ? (BOOL v84 = v81[4] == aLlvm_1[4]) : (BOOL v84 = 0), v84))
    {
      *((_DWORD *)v8 + 8) |= 0x2000u;
      int v85 = llvm::Function::lookupIntrinsicID(v81, v82);
    }
    else
    {
LABEL_102:
      int v85 = 0;
      *((_DWORD *)v8 + 8) &= ~0x2000u;
    }
    *((_DWORD *)v8 + 9) = v85;
  }
  *(void *)(v4 + 392) = *(void *)(v7 + 40);
  *(void *)(v4 + 400) = v7 + 24;
  long long v10 = *(char **)(v7 + 48);
  v92[0] = v10;
  if (v10)
  {
    llvm::MetadataTracking::track((uint64_t)v92, (unsigned __int8 *)v10, 2);
    uint64_t v11 = v92[0];
  }
  else
  {
    uint64_t v11 = 0;
  }
  unsigned int v12 = v6 - 2;
  sub_1CB8461A4(v4 + 344, 0, (uint64_t)v11);
  if (!v92[0])
  {
LABEL_8:
    uint64_t v91 = (uint64_t *)(v4 + 344);
    uint64_t v14 = a1[2];
    uint64_t v15 = **(void **)(v4 + 408);
    uint64_t v16 = v12;
    uint64_t v17 = *(llvm::ConstantInt **)(v15 + 1960);
    unint64_t v18 = *(unsigned int *)(v15 + 1968);
    LODWORD(v97) = v18 >> 8;
    if (v18 >> 8 > 0x40) {
      operator new[]();
    }
    if (v18 <= 0xFF) {
      unint64_t v19 = 0;
    }
    else {
      unint64_t v19 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v18) + 63);
    }
    uint64_t v96 = (void *)(v19 & v16);
    uint64_t v20 = llvm::ConstantInt::get(v17, (llvm::LLVMContext *)&v96, v13);
    if (v97 >= 0x41 && v96) {
      MEMORY[0x1D25D9CB0](v96, 0x1000C8000313F17);
    }
    uint64_t v21 = *(void *)(v4 + 2272);
    __int16 v93 = 257;
    long long v22 = (llvm::Instruction *)a2;
    if (*(void *)a2 != v21)
    {
      if (*(unsigned __int8 *)(a2 + 16) <= 0x14u)
      {
        uint64_t v26 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 416) + 224))(*(void *)(v4 + 416), 49, a2, v21);
        long long v22 = (llvm::Instruction *)v26;
        if (v26)
        {
          if (*(unsigned __int8 *)(v26 + 16) >= 0x1Cu)
          {
            (*(void (**)(void, uint64_t, const char **, void, void))(**(void **)(v4 + 424) + 16))(*(void *)(v4 + 424), v26, v92, *(void *)(v4 + 392), *(void *)(v4 + 400));
            uint64_t v88 = *(unsigned int *)(v4 + 352);
            if (v88)
            {
              uint64_t v89 = *(void *)(v4 + 344);
              uint64_t v90 = v89 + 16 * v88;
              do
              {
                llvm::Instruction::setMetadata(v22, *(_DWORD *)v89, *(llvm::MDNode **)(v89 + 8));
                v89 += 16;
              }
              while (v89 != v90);
            }
          }
        }
      }
      else
      {
        LOWORD(v99) = 257;
        long long v22 = llvm::CastInst::Create(49, a2, v21, (const char **)&v96, 0);
        (*(void (**)(void, llvm::Instruction *, const char **, void, void))(**(void **)(v4 + 424)
                                                                                           + 16))(*(void *)(v4 + 424), v22, v92, *(void *)(v4 + 392), *(void *)(v4 + 400));
        uint64_t v23 = *(unsigned int *)(v4 + 352);
        if (v23)
        {
          uint64_t v24 = *(void *)(v4 + 344);
          uint64_t v25 = v24 + 16 * v23;
          do
          {
            llvm::Instruction::setMetadata(v22, *(_DWORD *)v24, *(llvm::MDNode **)(v24 + 8));
            v24 += 16;
          }
          while (v24 != v25);
        }
      }
    }
    uint64_t v96 = v98;
    v98[0] = v14;
    v98[1] = v20;
    char v99 = v22;
    uint64_t v97 = 0x1000000003;
    int v27 = *(_DWORD *)(v7 + 20);
    uint64_t v28 = v27 & 0x7FFFFFF;
    uint64_t v29 = v7 - 32 * v28;
    int v30 = *(unsigned __int8 *)(v7 + 16);
    if (v30 == 84)
    {
      uint64_t v31 = 0;
    }
    else if (v30 == 39)
    {
      uint64_t v31 = (*(_DWORD *)(v7 + 80) + 1);
    }
    else
    {
      uint64_t v31 = 2;
    }
    long long v32 = (uint64_t *)(v29 + 64);
    if (v27 < 0 && (uint64_t v87 = *(void *)(v29 - 8), (v87 & 0xFFFFFFFF0) != 0)) {
      uint64_t v33 = (*(_DWORD *)(v29 - 12) - *(_DWORD *)(v29 - v87));
    }
    else {
      uint64_t v33 = 0;
    }
    uint64_t v34 = v7 - 32 * v31 - 32 * v33 - 32;
    unint64_t v35 = v34 - (void)v32;
    if ((unint64_t)(((v34 - (uint64_t)v32) >> 5) + 3) >= 0x11) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v36 = v98;
    if (v32 != (uint64_t *)v34)
    {
      uint64_t v37 = v100;
      uint64_t v38 = 32 * v28 - 32 * v31 - 32 * v33 - 96;
      do
      {
        uint64_t v39 = *v32;
        v32 += 4;
        *v37++ = v39;
        v38 -= 32;
      }
      while (v38);
      uint64_t v36 = (uint64_t *)v96;
    }
    LODWORD(v97) = (v35 >> 5) + 3;
    uint64_t v40 = (uint64_t **)a1[3];
    uint64_t v41 = (uint64_t **)a1[4];
    __int16 v93 = 257;
    sub_1CB845BAC(v91, v40, v41, v36, v97, (uint64_t)v92, 0);
    uint64_t v42 = 0;
    uint64_t v43 = a1[6];
    *(void *)(v4 + 392) = *(void *)(v43 + 40);
    *(void *)(v4 + 400) = v43 + 24;
    BOOL v44 = *(unsigned __int8 **)(v43 + 48);
    v94[0] = (uint64_t)v44;
    if (v44)
    {
      llvm::MetadataTracking::track((uint64_t)v94, v44, 2);
      uint64_t v42 = v94[0];
    }
    sub_1CB8461A4((uint64_t)v91, 0, v42);
    if (!v94[0])
    {
LABEL_33:
      if (*(_WORD *)(a2 + 18)) {
        llvm::Function::BuildLazyArguments((llvm::Function *)a2);
      }
      uint64_t v45 = *(void *)(a2 + 88);
      uint64_t v46 = *(llvm::Type **)(v4 + 2120);
      __int16 v95 = 257;
      char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(v4 + 392) + 56) + 40) + 272), v46, 1);
      int v48 = operator new(0x60uLL);
      v48[13] = v48[13] & 0x38000000 | 1;
      uint64_t v49 = (llvm::Instruction *)(v48 + 8);
      *(void *)int v48 = 0;
      *((void *)v48 + 1) = 0;
      *((void *)v48 + 2) = 0;
      *((void *)v48 + 3) = v48 + 8;
      __int16 v93 = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v48 + 8), (uint64_t)v46, v45, v92, 0, Alignment, 0);
      (*(void (**)(void, llvm::Instruction *, uint64_t *, void, void))(**(void **)(v4 + 424) + 16))(*(void *)(v4 + 424), v49, v94, *(void *)(v4 + 392), *(void *)(v4 + 400));
      uint64_t v50 = *(unsigned int *)(v4 + 352);
      if (v50)
      {
        uint64_t v52 = *(void *)(v4 + 344);
        uint64_t v53 = v52 + 16 * v50;
        do
        {
          llvm::Instruction::setMetadata(v49, *(_DWORD *)v52, *(llvm::MDNode **)(v52 + 8));
          v52 += 16;
        }
        while (v52 != v53);
      }
      sub_1CC27BF8C(v91, (uint64_t)v49, a1[7], 0, 0);
      uint64_t v51 = a1[8];
      if (!v51) {
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      *(void *)(v4 + 392) = *(void *)(v51 + 40);
      *(void *)(v4 + 400) = v51 + 24;
      uint64_t v54 = *(unsigned __int8 **)(v51 + 48);
      v94[0] = (uint64_t)v54;
      if (v54)
      {
        llvm::MetadataTracking::track((uint64_t)v94, v54, 2);
        uint64_t v55 = v94[0];
      }
      else
      {
        uint64_t v55 = 0;
      }
      sub_1CB8461A4((uint64_t)v91, 0, v55);
      if (!v94[0])
      {
LABEL_44:
        uint64_t v56 = a1[9];
        v94[0] = a1[2];
        v94[1] = v56;
        llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(v4, *(void *)(v4 + 336), 152);
        uint64_t v58 = v57;
        __int16 v59 = 0;
        if (*(unsigned char *)(v58 + 16)) {
          uint64_t v60 = 0;
        }
        else {
          uint64_t v60 = v58;
        }
        if (v60) {
          __int16 v59 = *(uint64_t ***)(v60 + 24);
        }
        __int16 v93 = 257;
        sub_1CB845BAC(v91, v59, (uint64_t **)v60, v94, 2, (uint64_t)v92, 0);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      int v77 = *(unsigned __int8 *)v94[0];
      if ((v77 - 4) > 0x1E)
      {
        if ((v77 - 3) >= 0xFFFFFFFE) {
          uint64_t v86 = v94[0];
        }
        else {
          uint64_t v86 = 0;
        }
        if ((v77 - 3) < 0xFFFFFFFE)
        {
          if (v77 == 3) {
            *(void *)(v94[0] + 8) = 0;
          }
          goto LABEL_44;
        }
        unint64_t v79 = v86 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v94[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v94[0] + 12)) {
          goto LABEL_44;
        }
        uint64_t v78 = *(void *)(v94[0] + 16);
        if ((v78 & 4) == 0) {
          goto LABEL_44;
        }
        unint64_t v79 = v78 & 0xFFFFFFFFFFFFFFF8;
        if (!v79) {
          goto LABEL_44;
        }
      }
      v92[0] = (const char *)v94;
      sub_1CC5FA668(v79 + 16, v92);
      goto LABEL_44;
    }
    int v64 = *(unsigned __int8 *)v94[0];
    if ((v64 - 4) > 0x1E)
    {
      if ((v64 - 3) >= 0xFFFFFFFE) {
        uint64_t v68 = v94[0];
      }
      else {
        uint64_t v68 = 0;
      }
      if ((v64 - 3) < 0xFFFFFFFE)
      {
        if (v64 == 3) {
          *(void *)(v94[0] + 8) = 0;
        }
        goto LABEL_33;
      }
      unint64_t v66 = v68 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v94[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v94[0] + 12)) {
        goto LABEL_33;
      }
      uint64_t v65 = *(void *)(v94[0] + 16);
      if ((v65 & 4) == 0) {
        goto LABEL_33;
      }
      unint64_t v66 = v65 & 0xFFFFFFFFFFFFFFF8;
      if (!v66) {
        goto LABEL_33;
      }
    }
    v92[0] = (const char *)v94;
    sub_1CC5FA668(v66 + 16, v92);
    goto LABEL_33;
  }
  int v61 = *v92[0];
  if ((v61 - 4) > 0x1E)
  {
    if ((v61 - 3) >= 0xFFFFFFFE) {
      uint64_t v67 = v92[0];
    }
    else {
      uint64_t v67 = 0;
    }
    if ((v61 - 3) < 0xFFFFFFFE)
    {
      if (v61 == 3) {
        *((void *)v92[0] + 1) = 0;
      }
      goto LABEL_8;
    }
    unint64_t v63 = (unint64_t)(v67 + 8);
  }
  else
  {
    if ((v92[0][1] & 0x7F) != 2 && !*((_DWORD *)v92[0] + 3)) {
      goto LABEL_8;
    }
    uint64_t v62 = *((void *)v92[0] + 2);
    if ((v62 & 4) == 0) {
      goto LABEL_8;
    }
    unint64_t v63 = v62 & 0xFFFFFFFFFFFFFFF8;
    if (!v63) {
      goto LABEL_8;
    }
  }
  uint64_t v96 = v92;
  sub_1CC5FA668(v63 + 16, &v96);
  goto LABEL_8;
}

void sub_1CC6DBE3C()
{
}

__n128 sub_1CC6DBE50(uint64_t a1)
{
  long long v2 = (char *)operator new(0x18uLL);
  *(void *)long long v2 = &unk_1F261BAA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC6DBE9C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F261BAA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CC6DBECC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(llvm::BasicBlock **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  if (*(void *)a2 + 40 == v6)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    long long v3 = (uint64_t *)(v10 + 344);
    uint64_t v44 = v10 + 344;
    uint64_t v11 = (void *)(v10 + 392);
    long long v45 = *(_OWORD *)(v10 + 392);
    long long v2 = &v46;
    uint64_t v12 = *(unsigned int *)(v10 + 352);
    if (v12)
    {
      uint64_t v31 = (unsigned __int8 **)(*(void *)(v10 + 344) + 8);
      uint64_t v32 = 16 * v12;
      while (*((_DWORD *)v31 - 2))
      {
        v31 += 2;
        v32 -= 16;
        if (!v32) {
          goto LABEL_5;
        }
      }
      uint64_t v33 = *v31;
      uint64_t v46 = v33;
      if (v33) {
        llvm::MetadataTracking::track((uint64_t)&v46, v33, 2);
      }
    }
    else
    {
LABEL_5:
      uint64_t v46 = 0;
    }
    if (v5)
    {
      sub_1CBF5385C((uint64_t)v3, (uint64_t)v5, v6);
    }
    else
    {
      *uint64_t v11 = 0;
      v11[1] = 0;
    }
    SinglePredecessor = (llvm::BasicBlock *)llvm::BasicBlock::getSinglePredecessor(v5);
    uint64_t v14 = (llvm::BasicBlock *)llvm::BasicBlock::getSinglePredecessor(SinglePredecessor);
    uint64_t v15 = llvm::BasicBlock::getSinglePredecessor(v14);
    uint64_t v16 = *(void *)(v15 + 40);
    if (v16 == v15 + 40)
    {
      uint64_t v17 = 0;
    }
    else
    {
      if (v16) {
        uint64_t v17 = v16 - 24;
      }
      else {
        uint64_t v17 = 0;
      }
      if (*(unsigned __int8 *)(v17 + 16) - 29 >= 0xB) {
        uint64_t v17 = 0;
      }
    }
    if (*(unsigned char *)(v17 + 16) == 30)
    {
LABEL_18:
      unint64_t v18 = (uint64_t *)(v17 - 64);
    }
    else
    {
      switch(*(unsigned char *)(v17 + 16))
      {
        case ' ':
        case '&':
          goto LABEL_71;
        case '!':
          goto LABEL_18;
        case '""':
        case '#':
          __break(1u);
          goto LABEL_74;
        case '$':
LABEL_74:
          if ((*(_WORD *)(v17 + 18) & 1) == 0)
          {
            uint64_t v19 = 0;
            goto LABEL_20;
          }
          unint64_t v18 = (uint64_t *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF) + 32);
          break;
        case '%':
          goto LABEL_77;
        case '\'':
          v17 -= 32 * *(unsigned int *)(v17 + 80);
LABEL_77:
          unint64_t v18 = (uint64_t *)(v17 - 32);
          goto LABEL_19;
        default:
          int v29 = *(_DWORD *)(v17 + 20);
          if ((v29 & 0x40000000) != 0) {
            uint64_t v30 = *(void *)(v17 - 8);
          }
          else {
            uint64_t v30 = v17 - 32 * (v29 & 0x7FFFFFF);
          }
          unint64_t v18 = (uint64_t *)(v30 + 96);
          goto LABEL_19;
      }
    }
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v47 = *(unsigned __int8 ***)a2;
  int v48 = (char *)v6;
  uint64_t v8 = *(void *)(v7 + 24);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, unsigned __int8 ***))(*(void *)v8 + 48))(v8, &v47);
  }
  do
  {
    sub_1CB920400();
LABEL_71:
    int v42 = *(_DWORD *)(v17 + 20);
    if ((v42 & 0x40000000) != 0) {
      uint64_t v43 = *(void *)(v17 - 8);
    }
    else {
      uint64_t v43 = v17 - 32 * (v42 & 0x7FFFFFF);
    }
    unint64_t v18 = (uint64_t *)(v43 + 64);
LABEL_19:
    uint64_t v19 = *v18;
LABEL_20:
    uint64_t v20 = (char *)operator new(0x60uLL);
    *((_DWORD *)v20 + 13) = *((_DWORD *)v20 + 13) & 0x38000000 | 1;
    *(void *)uint64_t v20 = 0;
    *((void *)v20 + 1) = 0;
    *((void *)v20 + 2) = 0;
    *((void *)v20 + 4) = ***(void ***)v19 + 1576;
    *((void *)v20 + 3) = v20 + 32;
    *((void *)v20 + 5) = 0;
    v20[48] = 30;
    v20[49] = 0;
    *((_WORD *)v20 + 25) = 0;
    *((_DWORD *)v20 + 13) = 1;
    *(_OWORD *)(v20 + 56) = 0u;
    *(_OWORD *)(v20 + 72) = 0u;
    *((_DWORD *)v20 + 22) = 0;
    *(void *)uint64_t v20 = v19;
    uint64_t v23 = *(void *)(v19 + 8);
    long long v22 = (void *)(v19 + 8);
    uint64_t v21 = v23;
    *((void *)v20 + 1) = v23;
    if (v23) {
      *(void *)(v21 + 16) = v20 + 8;
    }
    *((void *)v20 + 2) = v22;
    *long long v22 = v20;
    __int16 v49 = 257;
    uint64_t v24 = sub_1CB844E0C(v3, (llvm::Instruction *)(v20 + 32), (uint64_t)&v47);
    uint64_t v25 = *(void *)(a1 + 8);
    uint64_t v47 = (unsigned __int8 **)*((void *)v24 + 5);
    int v48 = (char *)v24 + 24;
    uint64_t v26 = *(void *)(v25 + 24);
  }
  while (!v26);
  (*(void (**)(uint64_t, unsigned __int8 ***))(*(void *)v26 + 48))(v26, &v47);
  uint64_t v27 = v44;
  if ((void)v45)
  {
    sub_1CBF5385C(v44, v45, *((uint64_t *)&v45 + 1));
    uint64_t v27 = v44;
  }
  else
  {
    *(void *)(v44 + 48) = 0;
    *(void *)(v44 + 56) = 0;
  }
  uint64_t v50 = v46;
  if (v46)
  {
    llvm::MetadataTracking::track((uint64_t)&v50, v46, 2);
    uint64_t v28 = (uint64_t)v50;
  }
  else
  {
    uint64_t v28 = 0;
  }
  uint64_t result = sub_1CB8461A4(v27, 0, v28);
  if (v50)
  {
    int v34 = *v50;
    if ((v34 - 4) > 0x1E)
    {
      if ((v34 - 3) >= 0xFFFFFFFE) {
        uint64_t v40 = v50;
      }
      else {
        uint64_t v40 = 0;
      }
      if ((v34 - 3) < 0xFFFFFFFE)
      {
        if (v34 == 3) {
          *((void *)v50 + 1) = 0;
        }
        goto LABEL_29;
      }
      unint64_t v36 = (unint64_t)(v40 + 8);
    }
    else
    {
      if ((v50[1] & 0x7F) != 2 && !*((_DWORD *)v50 + 3)) {
        goto LABEL_29;
      }
      uint64_t v35 = *((void *)v50 + 2);
      if ((v35 & 4) == 0) {
        goto LABEL_29;
      }
      unint64_t v36 = v35 & 0xFFFFFFFFFFFFFFF8;
      if (!v36) {
        goto LABEL_29;
      }
    }
    uint64_t v47 = &v50;
    uint64_t result = sub_1CC5FA668(v36 + 16, &v47);
  }
LABEL_29:
  if (!v46) {
    return result;
  }
  int v37 = *v46;
  if ((v37 - 4) > 0x1E)
  {
    if ((v37 - 3) >= 0xFFFFFFFE) {
      uint64_t v41 = v46;
    }
    else {
      uint64_t v41 = 0;
    }
    if ((v37 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v39 = (unint64_t)(v41 + 8);
LABEL_65:
      uint64_t v47 = v2;
      return sub_1CC5FA668(v39 + 16, &v47);
    }
    if (v37 == 3) {
      *((void *)v46 + 1) = 0;
    }
  }
  else if ((v46[1] & 0x7F) == 2 || *((_DWORD *)v46 + 3))
  {
    uint64_t v38 = *((void *)v46 + 2);
    if ((v38 & 4) != 0)
    {
      unint64_t v39 = v38 & 0xFFFFFFFFFFFFFFF8;
      if (v39) {
        goto LABEL_65;
      }
    }
  }
  return result;
}

void sub_1CC6DC31C(uint64_t **a1, llvm::BasicBlock *this, uint64_t a3, void ***a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  uint64_t SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(this);
  uint64_t SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(this);
  uint64_t v11 = *(void *)(SinglePredecessor + 40);
  if (v11 == SinglePredecessor + 40)
  {
    uint64_t v12 = 0;
  }
  else
  {
    if (v11) {
      uint64_t v12 = v11 - 24;
    }
    else {
      uint64_t v12 = 0;
    }
    if (*(unsigned __int8 *)(v12 + 16) - 29 >= 0xB) {
      uint64_t v12 = 0;
    }
  }
  if (*(unsigned char *)(v12 + 16) != 30)
  {
    switch(*(unsigned char *)(v12 + 16))
    {
      case '""':
      case '#':
        __break(1u);
        break;
      default:
        break;
    }
  }
  uint64_t v13 = operator new(0x48uLL);
  *uint64_t v13 = 0;
  v13[1] = ***a4 + 1576;
  v13[2] = 0;
  uint64_t v14 = (llvm::Instruction *)(v13 + 1);
  *((unsigned char *)v13 + 24) = 31;
  *((unsigned char *)v13 + 25) = 0;
  *((_WORD *)v13 + 13) = 0;
  *((_DWORD *)v13 + 7) = 0x40000000;
  *((_OWORD *)v13 + 2) = 0u;
  *((_OWORD *)v13 + 3) = 0u;
  *((_DWORD *)v13 + 16) = 0;
  llvm::SwitchInst::init((uint64_t)(v13 + 1), (uint64_t)a4, SingleSuccessor, 0x16u);
  __int16 v19 = 257;
  sub_1CB844E0C(v8 + 43, v14, (uint64_t)&v18);
  if (this)
  {
    sub_1CBF5385C((uint64_t)(v8 + 43), (uint64_t)this, a3);
  }
  else
  {
    v8[49] = 0;
    v8[50] = 0;
  }
  uint64_t v15 = a1[1];
  if (v15[1])
  {
    uint64_t v16 = *v15;
    uint64_t v17 = *(void *)(*v15 + 24);
    if (v17)
    {
      if (v16 == v17)
      {
        uint64_t v21 = v20;
        (*(void (**)(uint64_t, void *))(*(void *)v16 + 24))(v16, v20);
      }
      else
      {
        uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17);
      }
    }
    else
    {
      uint64_t v21 = 0;
    }
    unint64_t v18 = "omp_section_loop.body.case";
    __int16 v19 = 259;
    operator new();
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
}

void sub_1CC6DC864()
{
}

__n128 sub_1CC6DC878(uint64_t a1)
{
  long long v2 = (char *)operator new(0x20uLL);
  *(void *)long long v2 = &unk_1F261BAF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CC6DC8CC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F261BAF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CC6DC904(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 + 40 == v6)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    long long v3 = (uint64_t *)(v10 + 344);
    uint64_t v43 = v10 + 344;
    uint64_t v11 = (void *)(v10 + 392);
    long long v44 = *(_OWORD *)(v10 + 392);
    long long v2 = &v45;
    uint64_t v12 = *(unsigned int *)(v10 + 352);
    if (v12)
    {
      uint64_t v30 = (unsigned __int8 **)(*(void *)(v10 + 344) + 8);
      uint64_t v31 = 16 * v12;
      while (*((_DWORD *)v30 - 2))
      {
        v30 += 2;
        v31 -= 16;
        if (!v31) {
          goto LABEL_5;
        }
      }
      uint64_t v32 = *v30;
      long long v45 = v32;
      if (v32) {
        llvm::MetadataTracking::track((uint64_t)&v45, v32, 2);
      }
    }
    else
    {
LABEL_5:
      long long v45 = 0;
    }
    if (v5)
    {
      sub_1CBF5385C((uint64_t)v3, v5, v6);
    }
    else
    {
      *uint64_t v11 = 0;
      v11[1] = 0;
    }
    uint64_t SinglePredecessor = (llvm::BasicBlock *)llvm::BasicBlock::getSinglePredecessor(**(llvm::BasicBlock ***)(a1 + 24));
    uint64_t v14 = llvm::BasicBlock::getSinglePredecessor(SinglePredecessor);
    uint64_t v15 = *(void *)(v14 + 40);
    if (v15 == v14 + 40)
    {
      uint64_t v16 = 0;
    }
    else
    {
      if (v15) {
        uint64_t v16 = v15 - 24;
      }
      else {
        uint64_t v16 = 0;
      }
      if (*(unsigned __int8 *)(v16 + 16) - 29 >= 0xB) {
        uint64_t v16 = 0;
      }
    }
    if (*(unsigned char *)(v16 + 16) == 30)
    {
LABEL_18:
      uint64_t v17 = (uint64_t *)(v16 - 64);
    }
    else
    {
      switch(*(unsigned char *)(v16 + 16))
      {
        case ' ':
        case '&':
          goto LABEL_71;
        case '!':
          goto LABEL_18;
        case '""':
        case '#':
          __break(1u);
          goto LABEL_74;
        case '$':
LABEL_74:
          if ((*(_WORD *)(v16 + 18) & 1) == 0)
          {
            uint64_t v18 = 0;
            goto LABEL_20;
          }
          uint64_t v17 = (uint64_t *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF) + 32);
          break;
        case '%':
          goto LABEL_77;
        case '\'':
          v16 -= 32 * *(unsigned int *)(v16 + 80);
LABEL_77:
          uint64_t v17 = (uint64_t *)(v16 - 32);
          goto LABEL_19;
        default:
          int v28 = *(_DWORD *)(v16 + 20);
          if ((v28 & 0x40000000) != 0) {
            uint64_t v29 = *(void *)(v16 - 8);
          }
          else {
            uint64_t v29 = v16 - 32 * (v28 & 0x7FFFFFF);
          }
          uint64_t v17 = (uint64_t *)(v29 + 96);
          goto LABEL_19;
      }
    }
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v46 = (unsigned __int8 **)*a2;
  uint64_t v47 = (char *)v6;
  uint64_t v8 = *(void *)(v7 + 24);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, unsigned __int8 ***))(*(void *)v8 + 48))(v8, &v46);
  }
  do
  {
    sub_1CB920400();
LABEL_71:
    int v41 = *(_DWORD *)(v16 + 20);
    if ((v41 & 0x40000000) != 0) {
      uint64_t v42 = *(void *)(v16 - 8);
    }
    else {
      uint64_t v42 = v16 - 32 * (v41 & 0x7FFFFFF);
    }
    uint64_t v17 = (uint64_t *)(v42 + 64);
LABEL_19:
    uint64_t v18 = *v17;
LABEL_20:
    __int16 v19 = (char *)operator new(0x60uLL);
    *((_DWORD *)v19 + 13) = *((_DWORD *)v19 + 13) & 0x38000000 | 1;
    *(void *)__int16 v19 = 0;
    *((void *)v19 + 1) = 0;
    *((void *)v19 + 2) = 0;
    *((void *)v19 + 4) = ***(void ***)v18 + 1576;
    *((void *)v19 + 3) = v19 + 32;
    *((void *)v19 + 5) = 0;
    v19[48] = 30;
    v19[49] = 0;
    *((_WORD *)v19 + 25) = 0;
    *((_DWORD *)v19 + 13) = 1;
    *(_OWORD *)(v19 + 56) = 0u;
    *(_OWORD *)(v19 + 72) = 0u;
    *((_DWORD *)v19 + 22) = 0;
    *(void *)__int16 v19 = v18;
    uint64_t v22 = *(void *)(v18 + 8);
    uint64_t v21 = (void *)(v18 + 8);
    uint64_t v20 = v22;
    *((void *)v19 + 1) = v22;
    if (v22) {
      *(void *)(v20 + 16) = v19 + 8;
    }
    *((void *)v19 + 2) = v21;
    *uint64_t v21 = v19;
    __int16 v48 = 257;
    uint64_t v23 = sub_1CB844E0C(v3, (llvm::Instruction *)(v19 + 32), (uint64_t)&v46);
    uint64_t v24 = *(void *)(a1 + 8);
    uint64_t v46 = (unsigned __int8 **)*((void *)v23 + 5);
    uint64_t v47 = (char *)v23 + 24;
    uint64_t v25 = *(void *)(v24 + 24);
  }
  while (!v25);
  (*(void (**)(uint64_t, unsigned __int8 ***))(*(void *)v25 + 48))(v25, &v46);
  uint64_t v26 = v43;
  if ((void)v44)
  {
    sub_1CBF5385C(v43, v44, *((uint64_t *)&v44 + 1));
    uint64_t v26 = v43;
  }
  else
  {
    *(void *)(v43 + 48) = 0;
    *(void *)(v43 + 56) = 0;
  }
  __int16 v49 = v45;
  if (v45)
  {
    llvm::MetadataTracking::track((uint64_t)&v49, v45, 2);
    uint64_t v27 = (uint64_t)v49;
  }
  else
  {
    uint64_t v27 = 0;
  }
  uint64_t result = sub_1CB8461A4(v26, 0, v27);
  if (v49)
  {
    int v33 = *v49;
    if ((v33 - 4) > 0x1E)
    {
      if ((v33 - 3) >= 0xFFFFFFFE) {
        unint64_t v39 = v49;
      }
      else {
        unint64_t v39 = 0;
      }
      if ((v33 - 3) < 0xFFFFFFFE)
      {
        if (v33 == 3) {
          *((void *)v49 + 1) = 0;
        }
        goto LABEL_29;
      }
      unint64_t v35 = (unint64_t)(v39 + 8);
    }
    else
    {
      if ((v49[1] & 0x7F) != 2 && !*((_DWORD *)v49 + 3)) {
        goto LABEL_29;
      }
      uint64_t v34 = *((void *)v49 + 2);
      if ((v34 & 4) == 0) {
        goto LABEL_29;
      }
      unint64_t v35 = v34 & 0xFFFFFFFFFFFFFFF8;
      if (!v35) {
        goto LABEL_29;
      }
    }
    uint64_t v46 = &v49;
    uint64_t result = sub_1CC5FA668(v35 + 16, &v46);
  }
LABEL_29:
  if (!v45) {
    return result;
  }
  int v36 = *v45;
  if ((v36 - 4) > 0x1E)
  {
    if ((v36 - 3) >= 0xFFFFFFFE) {
      uint64_t v40 = v45;
    }
    else {
      uint64_t v40 = 0;
    }
    if ((v36 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v38 = (unint64_t)(v40 + 8);
LABEL_65:
      uint64_t v46 = v2;
      return sub_1CC5FA668(v38 + 16, &v46);
    }
    if (v36 == 3) {
      *((void *)v45 + 1) = 0;
    }
  }
  else if ((v45[1] & 0x7F) == 2 || *((_DWORD *)v45 + 3))
  {
    uint64_t v37 = *((void *)v45 + 2);
    if ((v37 & 4) != 0)
    {
      unint64_t v38 = v37 & 0xFFFFFFFFFFFFFFF8;
      if (v38) {
        goto LABEL_65;
      }
    }
  }
  return result;
}

uint64_t sub_1CC6DCD54(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1CC6DCDEC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *a1 + 344;
  if (a2)
  {
    sub_1CBF5385C(*a1 + 344, a2, a3);
  }
  else
  {
    *(void *)(v6 + 392) = 0;
    *(void *)(v6 + 400) = 0;
  }
  uint64_t v8 = a1[1];
  __int16 v14 = 257;
  BOOL v9 = sub_1CC09A1EC(v7, a4, v8, (uint64_t)v13, 0, 0);
  uint64_t v10 = a1[2];
  __int16 v14 = 257;
  uint64_t v11 = sub_1CB844A3C(v7, v9, v10, (uint64_t)v13, 0, 0);
  return ((uint64_t (*)(uint64_t, void, void, llvm::Instruction *))a1[3])(a1[4], *(void *)(v6 + 392), *(void *)(v6 + 400), v11);
}

llvm::Instruction *sub_1CC6DCE98(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)a1 + 344;
  uint64_t v5 = *(void *)(*(void *)(**(void **)(a1 + 8) + 8) + 40);
  if (v5) {
    uint64_t v6 = v5 - 24;
  }
  else {
    uint64_t v6 = 0;
  }
  if (*(unsigned __int8 *)(v6 + 16) - 29 >= 0xB) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(v6 - 32);
  uint64_t v8 = v7 + 40;
  for (uint64_t i = *(void *)(v7 + 48); i != v8; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v10 = i - 24;
    if (!i) {
      uint64_t v10 = 0;
    }
    if (*(unsigned char *)(v10 + 16) != 83)
    {
      unsigned int v11 = *(unsigned __int8 *)(i - 8) - 38;
      BOOL v12 = v11 > 0x38;
      uint64_t v13 = (1 << v11) & 0x100060000000001;
      if (v12 || v13 == 0) {
        uint64_t v8 = i;
      }
      else {
        uint64_t v8 = *(void *)(i + 8);
      }
      break;
    }
  }
  sub_1CBF5385C(*(void *)a1 + 344, v7, v8);
  uint64_t v15 = **(unsigned __int8 ***)(a1 + 16);
  uint64_t v25 = v15;
  if (v15)
  {
    llvm::MetadataTracking::track((uint64_t)&v25, v15, 2);
    uint64_t v16 = (uint64_t)v25;
  }
  else
  {
    uint64_t v16 = 0;
  }
  sub_1CB8461A4(v4, 0, v16);
  if (v25)
  {
    int v17 = *v25;
    if ((v17 - 4) > 0x1E)
    {
      if ((v17 - 3) >= 0xFFFFFFFE) {
        uint64_t v20 = v25;
      }
      else {
        uint64_t v20 = 0;
      }
      if ((v17 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v21 = (unint64_t)(v20 + 8);
LABEL_31:
        v23[0] = &v25;
        sub_1CC5FA668(v21 + 16, v23);
        goto LABEL_25;
      }
      if (v17 == 3) {
        *((void *)v25 + 1) = 0;
      }
    }
    else if ((v25[1] & 0x7F) == 2 || *((_DWORD *)v25 + 3))
    {
      uint64_t v22 = *((void *)v25 + 2);
      if ((v22 & 4) != 0)
      {
        unint64_t v21 = v22 & 0xFFFFFFFFFFFFFFF8;
        if (v21) {
          goto LABEL_31;
        }
      }
    }
  }
LABEL_25:
  uint64_t v18 = **(void **)(a1 + 24);
  __int16 v24 = 257;
  return sub_1CB844A3C(v4, a2, v18, (uint64_t)v23, 0, 0);
}

void **sub_1CC6DD04C(void **result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  **uint64_t result = a4;
  return result;
}

llvm::Instruction *sub_1CC6DD058(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a1 + 344;
  uint64_t v4 = *(void *)(*(void *)(*(void *)a1[1] + 8) + 40);
  if (v4) {
    uint64_t v5 = v4 - 24;
  }
  else {
    uint64_t v5 = 0;
  }
  if (*(unsigned __int8 *)(v5 + 16) - 29 >= 0xB) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(v5 - 32);
  if (v6)
  {
    sub_1CBF5385C(*a1 + 344, v6, *(void *)(v6 + 48));
  }
  else
  {
    *(void *)(v2 + 392) = 0;
    *(void *)(v2 + 400) = 0;
  }
  uint64_t v7 = *(void **)a1[2];
  uint64_t v8 = *(void *)a1[3];
  __int16 v11 = 257;
  return sub_1CB844A3C(v3, v7, v8, (uint64_t)v10, 0, 0);
}

uint64_t sub_1CC6DD0F4()
{
  LODWORD(v1) = 1;
  v3.n128_u64[0] = (unint64_t)"Use optimistic attributes describing 'as-if' properties of runtime calls.";
  v3.n128_u64[1] = 73;
  LOBYTE(v4) = 0;
  uint64_t v2 = (uint64_t *)&v4;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCD9980, "openmp-ir-builder-optimistic-attributes", &v1, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD9980, &dword_1CB82C000);
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Factor for the unroll threshold to account for code simplifications still taking place";
  v3.n128_u64[1] = 86;
  uint64_t v1 = 0x3FF8000000000000;
  uint64_t v2 = &v1;
  sub_1CD6120FC(&v4, (long long *)&v3, (double **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1CBF801A0, &qword_1EBCD9A40, &dword_1CB82C000);
}

void sub_1CC6DD1D8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCD9B08, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC6DD24C;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCD9B08, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC6DD24C()
{
}

void *sub_1CC6DD2EC(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *a1;
  unsigned int v6 = *(_DWORD *)(*a1 + 8);
  if (v6 >= *(_DWORD *)(*a1 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)v5 + 4 * v6) = v4;
  unsigned int v7 = *(_DWORD *)(v5 + 12);
  unsigned int v8 = *(_DWORD *)(v5 + 8) + 1;
  *(_DWORD *)(v5 + 8) = v8;
  if (v8 >= v7) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)v5 + 4 * v8) = HIDWORD(v4);
  ++*(_DWORD *)(v5 + 8);
  uint64_t v9 = *a1;
  unsigned int v10 = *(_DWORD *)(*a1 + 8);
  if (v10 >= *(_DWORD *)(*a1 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)v9 + 4 * v10) = **(unsigned __int16 **)(a2 + 16);
  ++*(_DWORD *)(v9 + 8);
  uint64_t v11 = *(unsigned int *)(a2 + 40);
  if (v11)
  {
    uint64_t v12 = *(void *)(a2 + 32);
    uint64_t v13 = 32 * v11;
    do
    {
      sub_1CC6DE6E4(a1, v12);
      v12 += 32;
      v13 -= 32;
    }
    while (v13);
  }
  int v14 = *(unsigned __int16 *)(a2 + 44);
  if (*(_WORD *)(a2 + 44))
  {
    uint64_t v16 = *a1;
    unsigned int v17 = *(_DWORD *)(*a1 + 8);
    if (v17 >= *(_DWORD *)(*a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)v16 + 4 * v17) = v14;
    ++*(_DWORD *)(v16 + 8);
  }
  return a1;
}

uint64_t sub_1CC6DD470(uint64_t a1)
{
  *(void *)a1 = &unk_1F261BBF8;
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 336), 4);
  sub_1CC6DEC2C(a1 + 232);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 208), 8);
  uint64_t v2 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  llvm::FoldingSetBase::~FoldingSetBase((void **)(a1 + 168));
  sub_1CBFFBA64(a1 + 72);
  *(void *)a1 = &unk_1F25F0A58;
  __n128 v3 = *(void **)(a1 + 16);
  if (v3 != *(void **)(a1 + 8)) {
    free(v3);
  }
  return a1;
}

uint64_t *sub_1CC6DD544(int32x2_t *a1, uint64_t *a2, uint64_t a3)
{
  v40[16] = *MEMORY[0x1E4F143B8];
  if (!a1[45].i8[0])
  {
    a1[45].i8[0] = 1;
    for (__int32 i = a1[40].i32[0]; i; __int32 i = a1[40].i32[0])
    {
      unsigned __int32 v25 = a1[30].u32[0];
      do
        uint64_t v26 = *(void *)(*(void *)&a1[29] - 8 + 8 * v25--);
      while (!v26);
      a1[30].i32[0] = v25;
      __int32 v27 = a1[41].i32[0];
      if (v27)
      {
        int32x2_t v28 = a1[39];
        __int32 v29 = v27 - 1;
        LODWORD(v30) = (v27 - 1) & ((v26 >> 4) ^ (v26 >> 9));
        uint64_t v31 = (uint64_t *)(*(void *)&v28 + 16 * v30);
        uint64_t v32 = *v31;
        if (v26 == *v31)
        {
LABEL_35:
          uint64_t *v31 = -8192;
          a1[40].i32[0] = i - 1;
          ++a1[40].i32[1];
        }
        else
        {
          int v33 = 1;
          while (v32 != -4096)
          {
            int v34 = v30 + v33++;
            uint64_t v30 = v34 & v29;
            uint64_t v32 = *(void *)(*(void *)&v28 + 16 * v30);
            if (v26 == v32)
            {
              uint64_t v31 = (uint64_t *)(*(void *)&v28 + 16 * v30);
              goto LABEL_35;
            }
          }
        }
      }
      sub_1CC6DDBA8(a1, v26);
    }
    a1[45].i8[0] = 0;
  }
  uint64_t v7 = (uint64_t)&a1[21];
  if (a3)
  {
    __int32 v8 = a1[22].i32[0];
    unsigned int v9 = a1[22].i32[1] + 1;
    if (v9 > 2 * v8)
    {
      llvm::FoldingSetBase::GrowBucketCount(v7, 2 * v8, (uint64_t)off_1F261BC28);
      uint64_t v39 = 0x2000000000;
      uint64_t v35 = a2[1];
      uint64_t v36 = *(void *)(*(void *)(*(void *)(v35 + 24) + 32) + 40);
      v37[0] = &v38;
      v37[1] = v36;
      unint64_t v38 = v40;
      sub_1CC6DD2EC(v37, v35);
      a3 = *(void *)&a1[21]
         + 8 * ((a1[22].i32[0] - 1) & sub_1CC13A6B8(v38, (uint64_t)v38 + 4 * v39));
      if (v38 != v40) {
        free(v38);
      }
      unsigned int v9 = a1[22].i32[1] + 1;
    }
    a1[22].i32[1] = v9;
    uint64_t v10 = *(void *)a3;
    if (!*(void *)a3) {
      uint64_t v10 = a3 | 1;
    }
    *a2 = v10;
    *(void *)a3 = a2;
LABEL_9:
    int32x2_t v13 = a1[26];
    uint64_t v12 = (uint64_t)&a1[26];
    int32x2_t v11 = v13;
    int v14 = a2 + 1;
    int v15 = *(_DWORD *)(v12 + 16);
    if (v15)
    {
      int v16 = v15 - 1;
      unsigned int v17 = ((*v14 >> 4) ^ (*v14 >> 9)) & v16;
      uint64_t result = (uint64_t *)(*(void *)&v11 + 16 * v17);
      uint64_t v19 = *result;
      if (*v14 == *result)
      {
LABEL_24:
        result[1] = (uint64_t)a2;
        return result;
      }
      uint64_t v20 = 0;
      int v21 = 1;
      while (v19 != -4096)
      {
        if (v20) {
          BOOL v22 = 0;
        }
        else {
          BOOL v22 = v19 == -8192;
        }
        if (v22) {
          uint64_t v20 = result;
        }
        unsigned int v23 = v17 + v21++;
        unsigned int v17 = v23 & v16;
        uint64_t result = (uint64_t *)(*(void *)&v11 + 16 * v17);
        uint64_t v19 = *result;
        if (*v14 == *result) {
          goto LABEL_24;
        }
      }
      if (v20) {
        __int16 v24 = v20;
      }
      else {
        __int16 v24 = result;
      }
    }
    else
    {
      __int16 v24 = 0;
    }
    uint64_t result = sub_1CC630A80(v12, (uint64_t)(a2 + 1), a2 + 1, v24);
    *uint64_t result = *v14;
    result[1] = 0;
    goto LABEL_24;
  }
  uint64_t result = llvm::FoldingSetBase::GetOrInsertNode(v7, a2, (uint64_t)off_1F261BC28);
  if (result == a2) {
    goto LABEL_9;
  }
  return result;
}

uint64_t *sub_1CC6DD7E0(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  int32x2_t v6 = a1[39];
  uint64_t v7 = a1[41].u32[0];
  if (v7)
  {
    LODWORD(v8) = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v9 = *(void *)&v6 + 16 * v8;
    uint64_t v10 = *(void *)v9;
    if (*(void *)v9 == a2) {
      goto LABEL_8;
    }
    int v11 = 1;
    while (v10 != -4096)
    {
      int v12 = v8 + v11++;
      uint64_t v8 = v12 & (v7 - 1);
      uint64_t v10 = *(void *)(*(void *)&v6 + 16 * v8);
      if (v10 == a2)
      {
        uint64_t v9 = *(void *)&v6 + 16 * v8;
        goto LABEL_8;
      }
    }
  }
  uint64_t v9 = *(void *)&v6 + 16 * v7;
LABEL_8:
  if (v9 != *(void *)&v6 + 16 * v7)
  {
    *(void *)(*(void *)&a1[29] + 8 * *(unsigned int *)(v9 + 8)) = 0;
    *(void *)uint64_t v9 = -8192;
    a1[40] = vadd_s32(a1[40], (int32x2_t)0x1FFFFFFFFLL);
  }
  *(void *)&a1[19] += 16;
  int32x2_t v13 = a1[9];
  if (((*(void *)&v13 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)&v13 + 16 > *(void *)&a1[10] - *(void *)&v13)
  {
    unsigned int v16 = (unsigned __int32)a1[12].i32[0] >> 7;
    if (v16 >= 0x1E) {
      LOBYTE(v16) = 30;
    }
    uint64_t v17 = 4096 << v16;
    int v14 = (uint64_t *)operator new(4096 << v16, (std::align_val_t)8uLL);
    unsigned __int32 v18 = a1[12].u32[0];
    if (v18 >= a1[12].i32[1]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)&a1[11] + 8 * v18) = v14;
    ++a1[12].i32[0];
    a1[10] = (int32x2_t)((char *)v14 + v17);
  }
  else
  {
    int v14 = (uint64_t *)((*(void *)&v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  a1[9] = (int32x2_t)(v14 + 2);
  *int v14 = 0;
  v14[1] = a2;

  return sub_1CC6DD544(a1, v14, a3);
}

uint64_t sub_1CC6DD97C(int32x2_t *a1, const void **a2, uint64_t a3, void *a4)
{
  v30[16] = *MEMORY[0x1E4F143B8];
  if (!a1[45].i8[0])
  {
    a1[45].i8[0] = 1;
    for (__int32 i = a1[40].i32[0]; i; __int32 i = a1[40].i32[0])
    {
      unsigned __int32 v17 = a1[30].u32[0];
      do
        uint64_t v18 = *(void *)(*(void *)&a1[29] - 8 + 8 * v17--);
      while (!v18);
      a1[30].i32[0] = v17;
      __int32 v19 = a1[41].i32[0];
      if (v19)
      {
        int32x2_t v20 = a1[39];
        __int32 v21 = v19 - 1;
        LODWORD(v22) = (v19 - 1) & ((v18 >> 4) ^ (v18 >> 9));
        unsigned int v23 = (uint64_t *)(*(void *)&v20 + 16 * v22);
        uint64_t v24 = *v23;
        if (v18 == *v23)
        {
LABEL_30:
          *unsigned int v23 = -8192;
          a1[40].i32[0] = i - 1;
          ++a1[40].i32[1];
        }
        else
        {
          int v25 = 1;
          while (v24 != -4096)
          {
            int v26 = v22 + v25++;
            uint64_t v22 = v26 & v21;
            uint64_t v24 = *(void *)(*(void *)&v20 + 16 * v22);
            if (v18 == v24)
            {
              unsigned int v23 = (uint64_t *)(*(void *)&v20 + 16 * v22);
              goto LABEL_30;
            }
          }
        }
      }
      sub_1CC6DDBA8(a1, v18);
    }
    a1[45].i8[0] = 0;
  }
  uint64_t v9 = (void *)(*(void *)&a1[21]
                + 8
                * ((a1[22].i32[0] - 1) & sub_1CC13A6B8(*a2, (uint64_t)*a2 + 4 * *((unsigned int *)a2 + 2))));
  uint64_t v10 = (void *)*v9;
  *a4 = 0;
  __s1 = v30;
  uint64_t v29 = 0x2000000000;
  if (v10) {
    BOOL v11 = (v10 & 1) == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    while (1)
    {
      uint64_t v12 = v10[1];
      uint64_t v13 = *(void *)(*(void *)(*(void *)(v12 + 24) + 32) + 40);
      v27[0] = &__s1;
      v27[1] = v13;
      sub_1CC6DD2EC(v27, v12);
      uint64_t v14 = *((unsigned int *)a2 + 2);
      if (v14 == v29)
      {
        int v15 = __s1;
        if (!memcmp(__s1, *a2, 4 * v14)) {
          break;
        }
      }
      LODWORD(v29) = 0;
      uint64_t v10 = (void *)*v10;
      if (!v10 || (v10 & 1) != 0)
      {
        int v15 = __s1;
        goto LABEL_14;
      }
    }
  }
  else
  {
    int v15 = v30;
LABEL_14:
    uint64_t v10 = 0;
    *a4 = v9;
  }
  if (v15 != v30) {
    free(v15);
  }
  if (!v10) {
    return 0;
  }
  if (*(void *)(v10[1] + 24) == a3) {
    return v10[1];
  }
  return 0;
}

uint64_t sub_1CC6DDBA8(int32x2_t *a1, uint64_t a2)
{
  uint64_t v29 = a2;
  int32x2_t v4 = a1[26];
  __int32 v5 = a1[28].i32[0];
  unsigned int v6 = a2 >> 4;
  if (!v5) {
    goto LABEL_7;
  }
  __int32 v7 = v5 - 1;
  uint64_t v8 = (v5 - 1) & (v6 ^ (a2 >> 9));
  uint64_t v9 = *(void *)(*(void *)&v4 + 16 * v8);
  if (v9 != a2)
  {
    int v10 = 1;
    while (v9 != -4096)
    {
      int v11 = v8 + v10++;
      uint64_t v8 = v11 & v7;
      uint64_t v9 = *(void *)(*(void *)&v4 + 16 * v8);
      if (v9 == a2) {
        goto LABEL_6;
      }
    }
LABEL_7:
    int32x2_t v14 = a1[39];
    uint64_t v15 = a1[41].u32[0];
    if (v15)
    {
      LODWORD(v16) = (v15 - 1) & (v6 ^ (a2 >> 9));
      uint64_t v17 = *(void *)&v14 + 16 * v16;
      uint64_t v18 = *(void *)v17;
      if (*(void *)v17 == a2)
      {
LABEL_14:
        if (v17 != *(void *)&v14 + 16 * v15)
        {
          *(void *)(*(void *)&a1[29] + 8 * *(unsigned int *)(v17 + 8)) = 0;
          *(void *)uint64_t v17 = -8192;
          a1[40] = vadd_s32(a1[40], (int32x2_t)0x1FFFFFFFFLL);
        }
        *(void *)&a1[19] += 16;
        int32x2_t v21 = a1[9];
        if (((*(void *)&v21 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)&v21 + 16 > *(void *)&a1[10]
                                                                                     - *(void *)&v21)
        {
          unsigned int v24 = (unsigned __int32)a1[12].i32[0] >> 7;
          if (v24 >= 0x1E) {
            LOBYTE(v24) = 30;
          }
          uint64_t v25 = 4096 << v24;
          uint64_t v22 = operator new(4096 << v24, (std::align_val_t)8uLL);
          unsigned __int32 v26 = a1[12].u32[0];
          if (v26 >= a1[12].i32[1]) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)&a1[11] + 8 * v26) = v22;
          ++a1[12].i32[0];
          a1[10] = (int32x2_t)((char *)v22 + v25);
        }
        else
        {
          uint64_t v22 = (void *)((*(void *)&v21 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        a1[9] = (int32x2_t)(v22 + 2);
        *uint64_t v22 = 0;
        v22[1] = a2;
        return sub_1CC6DD544(a1, v22, 0);
      }
      int v19 = 1;
      while (v18 != -4096)
      {
        int v20 = v16 + v19++;
        uint64_t v16 = v20 & (v15 - 1);
        uint64_t v18 = *(void *)(*(void *)&v14 + 16 * v16);
        if (v18 == a2)
        {
          uint64_t v17 = *(void *)&v14 + 16 * v16;
          goto LABEL_14;
        }
      }
    }
    uint64_t v17 = *(void *)&v14 + 16 * v15;
    goto LABEL_14;
  }
LABEL_6:
  uint64_t v12 = *(void *)&v4 + 16 * v8;
  uint64_t v13 = *(void **)(v12 + 8);
  if (!v13) {
    goto LABEL_7;
  }
  uint64_t v27 = (uint64_t)&a1[26];
  llvm::FoldingSetBase::RemoveNode((uint64_t)&a1[21], *(void **)(v12 + 8));
  uint64_t v30 = 0;
  if (sub_1CBA0E618(v27, &v29, &v30))
  {
    *uint64_t v30 = -8192;
    a1[27] = vadd_s32(a1[27], (int32x2_t)0x1FFFFFFFFLL);
  }
  uint64_t v28 = v29;
  *uint64_t v13 = 0;
  v13[1] = v28;
  return sub_1CC6DD544(a1, v13, 0);
}

int32x2_t sub_1CC6DDE18(int32x2_t *a1, uint64_t a2)
{
  __int32 v4 = a1[28].i32[0];
  unsigned int v5 = a2 >> 4;
  if (v4)
  {
    int32x2_t v6 = a1[26];
    unsigned int v7 = v5 ^ (a2 >> 9);
    __int32 v8 = v4 - 1;
    uint64_t v9 = (v4 - 1) & v7;
    uint64_t v10 = *(void *)(*(void *)&v6 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      uint64_t v13 = *(void **)(*(void *)&v6 + 16 * v9 + 8);
      if (v13)
      {
        llvm::FoldingSetBase::RemoveNode((uint64_t)&a1[21], v13);
        __int32 v15 = a1[28].i32[0];
        if (v15)
        {
          int32x2_t v16 = a1[26];
          __int32 v17 = v15 - 1;
          LODWORD(v18) = (v15 - 1) & v7;
          int v19 = (uint64_t *)(*(void *)&v16 + 16 * v18);
          uint64_t v20 = *v19;
          if (*v19 == a2)
          {
LABEL_13:
            uint64_t *v19 = -8192;
            int32x2_t result = vadd_s32(a1[27], (int32x2_t)0x1FFFFFFFFLL);
            a1[27] = result;
          }
          else
          {
            int v21 = 1;
            while (v20 != -4096)
            {
              int v22 = v18 + v21++;
              uint64_t v18 = v22 & v17;
              uint64_t v20 = *(void *)(*(void *)&v16 + 16 * v18);
              if (v20 == a2)
              {
                int v19 = (uint64_t *)(*(void *)&v16 + 16 * v18);
                goto LABEL_13;
              }
            }
          }
        }
      }
    }
    else
    {
      int v11 = 1;
      while (v10 != -4096)
      {
        int v12 = v9 + v11++;
        uint64_t v9 = v12 & v8;
        uint64_t v10 = *(void *)(*(void *)&v6 + 16 * v9);
        if (v10 == a2) {
          goto LABEL_6;
        }
      }
    }
  }
  int32x2_t v23 = a1[39];
  uint64_t v24 = a1[41].u32[0];
  if (v24)
  {
    LODWORD(v25) = (v24 - 1) & (v5 ^ (a2 >> 9));
    uint64_t v26 = *(void *)&v23 + 16 * v25;
    uint64_t v27 = *(void *)v26;
    if (*(void *)v26 == a2) {
      goto LABEL_21;
    }
    int v28 = 1;
    while (v27 != -4096)
    {
      int v29 = v25 + v28++;
      uint64_t v25 = v29 & (v24 - 1);
      uint64_t v27 = *(void *)(*(void *)&v23 + 16 * v25);
      if (v27 == a2)
      {
        uint64_t v26 = *(void *)&v23 + 16 * v25;
        goto LABEL_21;
      }
    }
  }
  uint64_t v26 = *(void *)&v23 + 16 * v24;
LABEL_21:
  if (v26 != *(void *)&v23 + 16 * v24)
  {
    *(void *)(*(void *)&a1[29] + 8 * *(unsigned int *)(v26 + 8)) = 0;
    *(void *)uint64_t v26 = -8192;
    int32x2_t result = vadd_s32(a1[40], (int32x2_t)0x1FFFFFFFFLL);
    a1[40] = result;
  }
  return result;
}

void *sub_1CC6DDFB0(uint64_t a1, uint64_t a2)
{
  int32x2_t result = (void *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 200) + 16))(*(void *)(a1 + 200), **(unsigned __int16 **)(a2 + 16));
  if (result)
  {
    uint64_t v18 = a2;
    int v5 = *(_DWORD *)(a1 + 240);
    int v6 = *(_DWORD *)(a1 + 328);
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 312);
      int v8 = v6 - 1;
      unsigned int v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v10 = (void *)(v7 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 == a2) {
        return result;
      }
      int v12 = 0;
      int v13 = 1;
      while (v11 != -4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == -8192;
        }
        if (v14) {
          int v12 = v10;
        }
        unsigned int v15 = v9 + v13++;
        unsigned int v9 = v15 & v8;
        uint64_t v10 = (void *)(v7 + 16 * v9);
        uint64_t v11 = *v10;
        if (*v10 == a2) {
          return result;
        }
      }
      if (v12) {
        int32x2_t v16 = v12;
      }
      else {
        int32x2_t v16 = v10;
      }
    }
    else
    {
      int32x2_t v16 = 0;
    }
    int32x2_t result = sub_1CB9A052C(a1 + 312, (uint64_t)&v18, &v18, v16);
    *int32x2_t result = v18;
    *((_DWORD *)result + 2) = v5;
    unsigned int v17 = *(_DWORD *)(a1 + 240);
    if (v17 >= *(_DWORD *)(a1 + 244)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 232) + 8 * v17) = v18;
    ++*(_DWORD *)(a1 + 240);
  }
  return result;
}

uint64_t sub_1CC6DE0FC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  __int32 v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24);

  return v4(a1, a2);
}

uint64_t sub_1CC6DE17C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

uint64_t *sub_1CC6DE1A0(uint64_t *result, void *a2)
{
  result[23] = a2[5];
  result[24] = (uint64_t)a2;
  uint64_t v2 = a2 + 40;
  __n128 v3 = (void *)a2[41];
  if (v3 != a2 + 40)
  {
    __int32 v4 = result;
    while (v3 + 6 == (void *)(v3[6] & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_27:
      __n128 v3 = (void *)v3[1];
      if (v3 == v2) {
        return result;
      }
    }
    for (uint64_t i = v3[7]; ; uint64_t i = *(void *)(i + 8))
    {
      if ((void *)i == v3 + 6) {
        goto LABEL_27;
      }
      int32x2_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, void))(*(void *)v4[25] + 16))(v4[25], **(unsigned __int16 **)(i + 16));
      if (!result)
      {
LABEL_7:
        if ((*(unsigned char *)i & 4) != 0) {
          continue;
        }
        goto LABEL_8;
      }
      uint64_t v6 = v4[39];
      uint64_t v7 = *((unsigned int *)v4 + 82);
      if (v7)
      {
        LODWORD(v8) = (v7 - 1) & ((i >> 4) ^ (i >> 9));
        unsigned int v9 = (uint64_t *)(v6 + 16 * v8);
        uint64_t v10 = *v9;
        if (*v9 == i) {
          goto LABEL_17;
        }
        int v11 = 1;
        while (v10 != -4096)
        {
          int v12 = v8 + v11++;
          uint64_t v8 = v12 & (v7 - 1);
          uint64_t v10 = *(void *)(v6 + 16 * v8);
          if (v10 == i)
          {
            unsigned int v9 = (uint64_t *)(v6 + 16 * v8);
            goto LABEL_17;
          }
        }
      }
      unsigned int v9 = (uint64_t *)(v6 + 16 * v7);
LABEL_17:
      if (v9 != (uint64_t *)(v6 + 16 * v7))
      {
        *(void *)(v4[29] + 8 * *((unsigned int *)v9 + 2)) = 0;
        uint64_t *v9 = -8192;
        v4[40] = (uint64_t)vadd_s32((int32x2_t)v4[40], (int32x2_t)0x1FFFFFFFFLL);
      }
      v4[19] += 16;
      uint64_t v13 = v4[9];
      if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8) - v13 + 16 > v4[10] - v13)
      {
        unsigned int v15 = *((_DWORD *)v4 + 24) >> 7;
        if (v15 >= 0x1E) {
          LOBYTE(v15) = 30;
        }
        uint64_t v16 = 4096 << v15;
        BOOL v14 = (uint64_t *)operator new(4096 << v15, (std::align_val_t)8uLL);
        unint64_t v17 = *((unsigned int *)v4 + 24);
        if (v17 >= *((unsigned int *)v4 + 25)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(v4[11] + 8 * v17) = v14;
        ++*((_DWORD *)v4 + 24);
        v4[10] = (uint64_t)v14 + v16;
      }
      else
      {
        BOOL v14 = (uint64_t *)((v13 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      v4[9] = (uint64_t)(v14 + 2);
      *BOOL v14 = 0;
      v14[1] = i;
      int32x2_t result = sub_1CC6DD544((int32x2_t *)v4, v14, 0);
      if (i) {
        goto LABEL_7;
      }
LABEL_8:
      while ((*(_WORD *)(i + 44) & 8) != 0)
        uint64_t i = *(void *)(i + 8);
    }
  }
  return result;
}

uint64_t sub_1CC6DE3E0(uint64_t a1)
{
  bzero(*(void **)(a1 + 168), 8 * *(unsigned int *)(a1 + 176));
  *(void *)(*(void *)(a1 + 168) + 8 * *(unsigned int *)(a1 + 176)) = -1;
  *(_DWORD *)(a1 + 180) = 0;
  uint64_t v2 = (void *)(a1 + 208);
  int v3 = *(_DWORD *)(a1 + 216);
  if (v3)
  {
    unsigned int v14 = *(_DWORD *)(a1 + 224);
    if (v14 > 4 * v3 && v14 >= 0x41)
    {
      int v15 = 1 << (33 - __clz(v3 - 1));
      if (v15 <= 64) {
        int v16 = 64;
      }
      else {
        int v16 = v15;
      }
LABEL_26:
      if (v16 == v14)
      {
        *(void *)(a1 + 216) = 0;
        uint64_t v34 = 16 * v14;
        uint64_t v35 = *(void **)(a1 + 208);
        do
        {
          *uint64_t v35 = -4096;
          v35 += 2;
          v34 -= 16;
        }
        while (v34);
      }
      else
      {
        MEMORY[0x1D25D9CD0](*v2, 8);
        if (v16)
        {
          unint64_t v17 = (4 * v16 / 3u + 1) | ((unint64_t)(4 * v16 / 3u + 1) >> 1);
          unint64_t v18 = v17 | (v17 >> 2) | ((v17 | (v17 >> 2)) >> 4);
          LODWORD(v18) = (((v18 | (v18 >> 8)) >> 16) | v18 | (v18 >> 8)) + 1;
          *(_DWORD *)(a1 + 224) = v18;
          int v19 = operator new(16 * v18, (std::align_val_t)8uLL);
          *(void *)(a1 + 208) = v19;
          *(void *)(a1 + 216) = 0;
          uint64_t v20 = *(unsigned int *)(a1 + 224);
          if (v20)
          {
            uint64_t v21 = 16 * v20;
            do
            {
              void *v19 = -4096;
              v19 += 2;
              v21 -= 16;
            }
            while (v21);
          }
        }
        else
        {
          *uint64_t v2 = 0;
          *(void *)(a1 + 216) = 0;
          *(_DWORD *)(a1 + 224) = 0;
        }
      }
      goto LABEL_3;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 220)) {
      goto LABEL_3;
    }
    unsigned int v14 = *(_DWORD *)(a1 + 224);
    if (v14 > 0x40)
    {
      int v16 = 0;
      goto LABEL_26;
    }
  }
  if (v14)
  {
    uint64_t v27 = (void *)*v2;
    uint64_t v28 = 16 * v14;
    do
    {
      *uint64_t v27 = -4096;
      v27 += 2;
      v28 -= 16;
    }
    while (v28);
  }
  *(void *)(a1 + 216) = 0;
LABEL_3:
  uint64_t v4 = *(unsigned int *)(a1 + 144);
  if (v4)
  {
    int v29 = *(uint64_t **)(a1 + 136);
    uint64_t v30 = 16 * v4;
    do
    {
      uint64_t v31 = *v29;
      v29 += 2;
      MEMORY[0x1D25D9CD0](v31, 8);
      v30 -= 16;
    }
    while (v30);
  }
  *(_DWORD *)(a1 + 144) = 0;
  uint64_t v5 = *(unsigned int *)(a1 + 96);
  if (v5)
  {
    *(void *)(a1 + 152) = 0;
    uint64_t v6 = *(void **)(a1 + 88);
    uint64_t v7 = *v6 + 4096;
    *(void *)(a1 + 72) = *v6;
    *(void *)(a1 + 80) = v7;
    if (v5 != 1)
    {
      uint64_t v24 = v6 + 1;
      uint64_t v25 = 8 * v5 - 8;
      do
      {
        uint64_t v26 = *v24++;
        MEMORY[0x1D25D9CD0](v26, 8);
        v25 -= 8;
      }
      while (v25);
    }
    *(_DWORD *)(a1 + 96) = 1;
  }
  *(_DWORD *)(a1 + 240) = 0;
  uint64_t v8 = (void *)(a1 + 312);
  int v9 = *(_DWORD *)(a1 + 320);
  if (v9)
  {
    unsigned int v10 = *(_DWORD *)(a1 + 328);
    if (v10 > 4 * v9 && v10 >= 0x41)
    {
      int v11 = 1 << (33 - __clz(v9 - 1));
      if (v11 <= 64) {
        int v12 = 64;
      }
      else {
        int v12 = v11;
      }
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 324)) {
      goto LABEL_15;
    }
    unsigned int v10 = *(_DWORD *)(a1 + 328);
    if (v10 > 0x40)
    {
      int v12 = 0;
LABEL_13:
      if (v12 == v10)
      {
        *(void *)(a1 + 320) = 0;
        uint64_t v32 = 16 * v10;
        int v33 = *(void **)(a1 + 312);
        do
        {
          void *v33 = -4096;
          v33 += 2;
          v32 -= 16;
        }
        while (v32);
      }
      else
      {
        MEMORY[0x1D25D9CD0](*v8, 8);
        sub_1CB837D60((_DWORD *)(a1 + 312), v12);
      }
      goto LABEL_15;
    }
  }
  if (v10)
  {
    int v22 = (void *)*v8;
    uint64_t v23 = 16 * v10;
    do
    {
      *int v22 = -4096;
      v22 += 2;
      v23 -= 16;
    }
    while (v23);
  }
  *(void *)(a1 + 320) = 0;
LABEL_15:
  uint64_t result = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  return result;
}

void *sub_1CC6DE6E4(void *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
  {
    if (v3 == 2 || v3 == 3)
    {
      uint64_t v8 = *a1;
      uint64_t v9 = *(void *)(a2 + 16);
      unsigned int v10 = *(_DWORD *)(*a1 + 8);
      if (v10 >= *(_DWORD *)(*a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)v8 + 4 * v10) = v9;
      unsigned int v11 = *(_DWORD *)(v8 + 12);
      unsigned int v12 = *(_DWORD *)(v8 + 8) + 1;
      *(_DWORD *)(v8 + 8) = v12;
      if (v12 >= v11) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)v8 + 4 * v12) = HIDWORD(v9);
    }
    else if (v3 == 1)
    {
      uint64_t v8 = *a1;
      uint64_t v13 = *(void *)(a2 + 16);
      unsigned int v14 = *(_DWORD *)(*a1 + 8);
      if (v14 >= *(_DWORD *)(*a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)v8 + 4 * v14) = v13;
      unsigned int v15 = *(_DWORD *)(v8 + 12);
      unsigned int v16 = *(_DWORD *)(v8 + 8) + 1;
      *(_DWORD *)(v8 + 8) = v16;
      if (v16 >= v15) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)v8 + 4 * v16) = HIDWORD(v13);
    }
    else
    {
      uint64_t v8 = *a1;
      unsigned int v17 = *(_DWORD *)(*a1 + 8);
      if (v17 >= *(_DWORD *)(*a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)v8 + 4 * v17) = *(_DWORD *)(a2 + 16);
    }
    ++*(_DWORD *)(v8 + 8);
  }
  else
  {
    int v4 = *(_DWORD *)(a2 + 4);
    if ((*(_DWORD *)a2 & 0x1000000) == 0)
    {
      uint64_t v5 = *a1;
      unsigned int v6 = *(_DWORD *)(*a1 + 8);
      if (v6 >= *(_DWORD *)(*a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)v5 + 4 * v6) = v4;
      ++*(_DWORD *)(v5 + 8);
    }
    sub_1CC6DE8E0(a1, v4);
  }
  return a1;
}

void *sub_1CC6DE8E0(void *result, int a2)
{
  uint64_t v2 = result[1];
  unint64_t v3 = a2 & 0x7FFFFFFF;
  if (a2 < 0 && v3 < *(unsigned int *)(v2 + 432))
  {
    uint64_t v4 = *(void *)(*(void *)(v2 + 424) + 8 * v3);
    if ((v4 & 0xFFFFFFFFFFFFFFF9) != 0)
    {
      int v5 = v4 & 0xFFFFFFFA | (__rbit32(v4) >> 29) & 0xFFFFFFFD;
      uint64_t v6 = *result;
      unsigned int v7 = *(_DWORD *)(*result + 8);
      if (v7 >= *(_DWORD *)(*result + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)v6 + 4 * v7) = v5;
      unsigned int v8 = *(_DWORD *)(v6 + 12);
      unsigned int v9 = *(_DWORD *)(v6 + 8) + 1;
      *(_DWORD *)(v6 + 8) = v9;
      if (v9 >= v8) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)v6 + 4 * v9) = HIDWORD(v4);
      ++*(_DWORD *)(v6 + 8);
      uint64_t v2 = result[1];
    }
  }
  unint64_t v10 = *(void *)(*(void *)(v2 + 24) + 16 * v3);
  if (v10 >= 8)
  {
    if ((unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFF8, (v10 & 4) != 0) && v11 || (v11 ? (v12 = (v10 & 4) == 0) : (v12 = 0), v12))
    {
      uint64_t v13 = *result;
      unsigned int v14 = *(_DWORD *)(*result + 8);
      if (v14 >= *(_DWORD *)(*result + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)v13 + 4 * v14) = v11;
      unsigned int v15 = *(_DWORD *)(v13 + 12);
      unsigned int v16 = *(_DWORD *)(v13 + 8) + 1;
      *(_DWORD *)(v13 + 8) = v16;
      if (v16 >= v15) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)v13 + 4 * v16) = HIDWORD(v10);
      ++*(_DWORD *)(v13 + 8);
    }
  }
  return result;
}

uint64_t sub_1CC6DEABC(void *a1, uint64_t a2)
{
  a1[77] = a2;
  return 0;
}

uint64_t sub_1CC6DEB0C(uint64_t a1)
{
  uint64_t result = sub_1CC6DE3E0(a1 + 248);
  *(unsigned char *)(a1 + 624) = 0;
  return result;
}

uint64_t sub_1CC6DEB38(uint64_t a1)
{
  *(void *)(a1 + 8) = a1 + 40;
  *(void *)(a1 + 16) = a1 + 40;
  *(void *)(a1 + 24) = 4;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)a1 = &unk_1F261BBF8;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = a1 + 104;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 96) = 0x400000000;
  *(void *)(a1 + 136) = a1 + 152;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 160) = 1;
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 168), 6);
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 232) = a1 + 248;
  *(void *)(a1 + 240) = 0x800000000;
  *(_DWORD *)(a1 + 328) = 16;
  uint64_t v2 = operator new(0x100uLL, (std::align_val_t)8uLL);
  *(void *)(a1 + 312) = v2;
  *(void *)(a1 + 320) = 0;
  uint64_t v3 = *(unsigned int *)(a1 + 328);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    do
    {
      *uint64_t v2 = -4096;
      v2 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  *(unsigned char *)(a1 + 360) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  return a1;
}

uint64_t sub_1CC6DEC2C(uint64_t a1)
{
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  return a1;
}

void *sub_1CC6DEC74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(*(void *)(*(void *)(v3 + 24) + 32) + 40);
  v6[0] = a3;
  v6[1] = v4;
  return sub_1CC6DD2EC(v6, v3);
}

BOOL sub_1CC6DECAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(*(void *)(*(void *)(v7 + 24) + 32) + 40);
  v11[0] = a5;
  v11[1] = v8;
  sub_1CC6DD2EC(v11, v7);
  uint64_t v9 = *(unsigned int *)(a3 + 8);
  return v9 == *(_DWORD *)(a5 + 8) && memcmp(*(const void **)a5, *(const void **)a3, 4 * v9) == 0;
}

unint64_t sub_1CC6DED24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(*(void *)(*(void *)(v4 + 24) + 32) + 40);
  v7[0] = a3;
  v7[1] = v5;
  sub_1CC6DD2EC(v7, v4);
  return sub_1CC13A6B8(*(void **)a3, *(void *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

void sub_1CC6DED78(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCD9B10, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC6DEDEC;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCD9B10, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC6DEDEC()
{
}

void *sub_1CC6DEE8C@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void **)(a1 + 80);
  uint64_t v6 = a2;
  unint64_t v7 = a2 & 0x7FFFFFFF;
  uint64_t v8 = *(void *)(v5[3] + 16 * v7);
  if ((v8 & 4) == 0 && (unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFF8, (v8 & 0xFFFFFFFFFFFFFFF8) != 0))
  {
    uint64_t v20 = (*(uint64_t (**)(void))(**(void **)(*v5 + 16) + 176))(*(void *)(*v5 + 16));
    unsigned int v13 = *(_DWORD *)(*(void *)(v20 + 264)
                    + 24
                    * (*(unsigned __int16 *)(*(void *)v9 + 24)
                     + *(_DWORD *)(v20 + 272) * ((*(void *)(v20 + 248) - *(void *)(v20 + 240)) >> 3)));
    unsigned int v23 = v13;
    if (v13 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v22);
    }
    if (v13) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
    }
    else {
      unint64_t v12 = 0;
    }
  }
  else if ((a2 & 0x80000000) != 0 && v7 < *((unsigned int *)v5 + 108))
  {
    uint64_t v10 = *(void *)(v5[53] + 8 * v7);
    if ((v10 & 0xFFFFFFFFFFFFFFF9) == 0 || (*(void *)(v5[53] + 8 * v7) & 4) == 0)
    {
      unint64_t v12 = 1;
      unsigned int v13 = 1;
    }
    else
    {
      uint64_t v21 = 0x800000000000000;
      if ((v10 & 2) == 0) {
        uint64_t v21 = 0x8000000000000;
      }
      if ((v21 & v10) != 0) {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", a2);
      }
      sub_1CB8F1EEC((uint64_t)&v22, (unsigned __int16)(v10 >> 3), -1);
      unint64_t v12 = v22;
      unsigned int v13 = v23;
    }
  }
  else
  {
    unsigned int v13 = 1;
    unint64_t v12 = 1;
  }
  uint64_t v24 = (void *)v12;
  unsigned int v25 = v13;
  *(_DWORD *)(a3 + 8) = 1;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 1;
  *(void *)(a3 + 16) = 0;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **, void))(*(void *)a1 + 48))(a1, v6, a3, &v24, 0);
  unsigned int v15 = *(_DWORD *)(a1 + 112);
  if (v15 > 1 || *(_DWORD *)(a1 + 116))
  {
    if (v15)
    {
      uint64_t v18 = a1 + 120;
      uint64_t v19 = a1 + 760;
      goto LABEL_17;
    }
    unsigned int v16 = (2 * v15) & 0xFFFFFFFC;
    unsigned int v17 = *(_DWORD *)(a1 + 128);
    if (v16 >= v17 || v17 < 0x41)
    {
      if (!v17)
      {
LABEL_24:
        *(_DWORD *)(a1 + 112) = v17;
        *(_DWORD *)(a1 + 116) = 0;
        goto LABEL_25;
      }
      uint64_t v18 = *(void *)(a1 + 120);
      uint64_t v19 = v18 + 40 * v17;
      do
      {
LABEL_17:
        if (*(_DWORD *)v18 != -1)
        {
          if (*(_DWORD *)v18 != -2)
          {
            if (*(_DWORD *)(v18 + 32) >= 0x41u)
            {
              uint64_t result = *(void **)(v18 + 24);
              if (result) {
                uint64_t result = (void *)MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
              }
            }
            if (*(_DWORD *)(v18 + 16) >= 0x41u)
            {
              uint64_t result = *(void **)(v18 + 8);
              if (result) {
                uint64_t result = (void *)MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
              }
            }
          }
          *(_DWORD *)uint64_t v18 = -1;
        }
        v18 += 40;
      }
      while (v18 != v19);
      unsigned int v17 = *(_DWORD *)(a1 + 112) & 1;
      goto LABEL_24;
    }
    uint64_t result = sub_1CC6E39F4((void *)(a1 + 112));
  }
LABEL_25:
  if (v25 >= 0x41)
  {
    uint64_t result = v24;
    if (v24) {
      return (void *)MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
    }
  }
  return result;
}

char *sub_1CC6DF17C(char *result, unsigned int a2, llvm::MDNode *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (uint64_t)result;
  unsigned int v340 = a2;
  uint64_t v10 = *((void *)result + 10);
  if ((a2 & 0x80000000) != 0) {
    unint64_t v11 = (uint64_t *)(*(void *)(v10 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v11 = (uint64_t *)(*(void *)(v10 + 272) + 8 * a2);
  }
  uint64_t v12 = *v11;
  if ((*(unsigned char *)(v12 + 3) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v12 + 24);
    if ((a2 & 0x80000000) != 0) {
      goto LABEL_5;
    }
LABEL_457:
    if (*((_DWORD *)a3 + 2) >= 0x41u)
    {
      uint64_t result = *(char **)a3;
      if (*(void *)a3) {
        uint64_t result = (char *)MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      }
    }
    *(void *)a3 = 0;
    *((_DWORD *)a3 + 2) = 1;
    if (*((_DWORD *)a3 + 6) >= 0x41u)
    {
      uint64_t result = (char *)*((void *)a3 + 2);
      if (result) {
        uint64_t result = (char *)MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      }
    }
    *((void *)a3 + 2) = 0;
    *((_DWORD *)a3 + 6) = 1;
    return result;
  }
  if ((a2 & 0x80000000) == 0) {
    goto LABEL_457;
  }
LABEL_5:
  if ((a2 & 0x7FFFFFFF) >= *(_DWORD *)(v10 + 432)) {
    goto LABEL_457;
  }
  unint64_t v13 = *(void *)(*(void *)(v10 + 424) + 8 * (a2 & 0x7FFFFFFF));
  if ((v13 & 0xFFFFFFFFFFFFFFF9) == 0) {
    goto LABEL_457;
  }
  uint64_t v14 = *(void *)(v12 + 8);
  int v15 = **(unsigned __int16 **)(v14 + 16);
  uint64_t v16 = (unsigned __int16)(v13 >> 3);
  uint64_t v17 = (unsigned __int16)(v13 >> 19);
  if ((v13 & 2) == 0) {
    uint64_t v17 = (v13 >> 19);
  }
  if ((v13 & 4) != 0) {
    uint64_t v16 = v17;
  }
  if (v13) {
    uint64_t v18 = (v13 >> 3);
  }
  else {
    uint64_t v18 = v16;
  }
  uint64_t v20 = result + 112;
  int v19 = *((_DWORD *)result + 28);
  uint64_t v21 = result + 120;
  if (v19)
  {
    int v23 = 16;
    unint64_t v22 = result + 120;
  }
  else
  {
    unint64_t v22 = (char *)*((void *)result + 15);
    int v23 = *((_DWORD *)result + 32);
    if (!v23)
    {
      unsigned int v24 = 0;
      goto LABEL_26;
    }
  }
  int v25 = v23 - 1;
  unsigned int v26 = v25 & (37 * a2);
  uint64_t v27 = &v22[40 * v26];
  int v28 = *(_DWORD *)v27;
  if (*(_DWORD *)v27 == a2) {
    goto LABEL_27;
  }
  int v29 = 1;
  while (v28 != -1)
  {
    unsigned int v30 = v26 + v29++;
    unsigned int v26 = v30 & v25;
    uint64_t v27 = &v22[40 * v26];
    int v28 = *(_DWORD *)v27;
    if (*(_DWORD *)v27 == a2) {
      goto LABEL_27;
    }
  }
  if (v19)
  {
    unsigned int v24 = 16;
    unint64_t v22 = result + 120;
  }
  else
  {
    unint64_t v22 = (char *)*((void *)result + 15);
    unsigned int v24 = *((_DWORD *)result + 32);
  }
LABEL_26:
  uint64_t v27 = &v22[40 * v24];
LABEL_27:
  if (v19)
  {
    unsigned int v32 = 16;
    uint64_t v31 = result + 120;
  }
  else
  {
    uint64_t v31 = (char *)*((void *)result + 15);
    unsigned int v32 = *((_DWORD *)result + 32);
  }
  if (&v31[40 * v32] != v27)
  {
    if (*((_DWORD *)a3 + 2) > 0x40u || *((_DWORD *)v27 + 4) > 0x40u)
    {
      v240 = (const void **)(v27 + 8);
      if (v27 + 8 != (char *)a3)
      {
        uint64_t result = (char *)llvm::APInt::reallocate((uint64_t)a3, *((_DWORD *)v27 + 4));
        uint64_t v241 = *((unsigned int *)a3 + 2);
        if (v241 <= 0x40) {
          *(void *)a3 = *v240;
        }
        else {
          uint64_t result = (char *)memcpy(*(void **)a3, *v240, ((unint64_t)(v241 + 63) >> 3) & 0x3FFFFFF8);
        }
      }
    }
    else
    {
      *(void *)a3 = *((void *)v27 + 1);
      *((_DWORD *)a3 + 2) = *((_DWORD *)v27 + 4);
    }
    if (*((_DWORD *)a3 + 6) > 0x40u || *((_DWORD *)v27 + 8) > 0x40u)
    {
      v242 = (void **)((char *)a3 + 16);
      v243 = (void **)(v27 + 24);
      if ((char *)a3 + 16 != v27 + 24)
      {
        uint64_t result = (char *)llvm::APInt::reallocate((uint64_t)a3 + 16, *((_DWORD *)v27 + 8));
        uint64_t v244 = *((unsigned int *)a3 + 6);
        if (v244 <= 0x40)
        {
          *v242 = *v243;
        }
        else
        {
          v245 = *v242;
          v246 = *v243;
          return (char *)memcpy(v245, v246, ((unint64_t)(v244 + 63) >> 3) & 0x3FFFFFF8);
        }
      }
    }
    else
    {
      *((void *)a3 + 2) = *((void *)v27 + 3);
      *((_DWORD *)a3 + 6) = *((_DWORD *)v27 + 8);
    }
    return result;
  }
  if (v18 >= 0x41) {
    operator new[]();
  }
  if (*((_DWORD *)a3 + 2) >= 0x41u)
  {
    uint64_t result = *(char **)a3;
    if (*(void *)a3)
    {
      *(void *)v292 = v18;
      v296 = v21;
      v298 = v20;
      uint64_t result = (char *)MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      uint64_t v18 = *(void *)v292;
      uint64_t v21 = v296;
      uint64_t v20 = v298;
    }
  }
  *(void *)a3 = 0;
  *((_DWORD *)a3 + 2) = v18;
  int v33 = (void *)((char *)a3 + 16);
  if (*((_DWORD *)a3 + 6) >= 0x41u)
  {
    uint64_t result = (char *)*v33;
    if (*v33)
    {
      *(void *)v293 = v18;
      v299 = v20;
      v247 = v21;
      uint64_t result = (char *)MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      uint64_t v21 = v247;
      uint64_t v18 = *(void *)v293;
      int v33 = (void *)((char *)a3 + 16);
      uint64_t v20 = v299;
    }
  }
  *((void *)a3 + 2) = 0;
  *((_DWORD *)a3 + 6) = v18;
  if (*(_DWORD *)(v9 + 104) > a5)
  {
    uint64_t v34 = *(unsigned int *)(a4 + 8);
    if (v34 <= 0x40)
    {
      if (!*(void *)a4) {
        return result;
      }
LABEL_50:
      unsigned int v337 = 1;
      int8x8_t v336 = 0;
      unsigned int v339 = 1;
      unint64_t v338 = 0;
      v295 = v21;
      v297 = v20;
      __src = (const void **)v33;
      if (v15 > 89)
      {
        if (v15 <= 192)
        {
          unsigned int v289 = v18;
          switch(v15)
          {
            case 90:
              uint64_t v129 = *(void *)(v14 + 48);
              if ((v129 & 7) != 0)
              {
                unint64_t v130 = *(void *)((v129 & 0xFFFFFFFFFFFFFFF8) + 8);
              }
              else
              {
                unint64_t v130 = v129 & 0xFFFFFFFFFFFFFFF8;
                *(void *)(v14 + 48) = v130;
              }
              uint64_t v218 = *(void *)(v130 + 72);
              if (v218) {
                llvm::computeKnownBitsFromRangeMetadata(v218, (void **)a3, a3);
              }
              goto LABEL_423;
            case 92:
              if ((v13 & 4) != 0) {
                goto LABEL_423;
              }
              uint64_t v122 = *(void *)(v14 + 48);
              if ((v122 & 7) != 0)
              {
                unint64_t v123 = *(void *)((v122 & 0xFFFFFFFFFFFFFFF8) + 8);
              }
              else
              {
                unint64_t v123 = v122 & 0xFFFFFFFFFFFFFFF8;
                *(void *)(v14 + 48) = v122 & 0xFFFFFFFFFFFFFFF8;
              }
              uint64_t v220 = *(void *)(v123 + 24);
              v219 = (unint64_t *)(v123 + 24);
              if ((v220 & 0xFFFFFFFFFFFFFFF9) != 0)
              {
                unsigned int v222 = sub_1CB8F1DC4(v219);
                if (v221 == 1) {
                unsigned int v210 = v222;
                }
              }
              else
              {
                unsigned int v210 = -1;
              }
              unsigned int v43 = *((_DWORD *)a3 + 2);
              char v211 = v210 - v43;
              if (v210 == v43) {
                goto LABEL_423;
              }
              if (v210 <= 0x3F && v43 <= 0x40) {
                goto LABEL_417;
              }
              goto LABEL_494;
            case 118:
              (*(void (**)(uint64_t, void, llvm::MDNode *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 36), a3, a4, (a5 + 1));
              unsigned int v131 = v289;
              uint64_t v132 = *(void *)a3;
              unsigned int v342 = v289;
              if (v289)
              {
                unint64_t v133 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v289;
                unint64_t v341 = v133 & v132;
              }
              else
              {
                unint64_t v133 = 0;
                unint64_t v341 = 0;
              }
              unint64_t v134 = v133 & *v33;
              unsigned int v135 = v342;
              if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3)
              {
                MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
                unsigned int v131 = v289;
              }
              *(void *)a3 = v341;
              *((_DWORD *)a3 + 2) = v135;
              if (*((_DWORD *)a3 + 6) >= 0x41u && *v33)
              {
                unsigned int v267 = v131;
                MEMORY[0x1D25D9CB0](*v33, 0x1000C8000313F17);
                unsigned int v131 = v267;
              }
              *((void *)a3 + 2) = v134;
              *((_DWORD *)a3 + 6) = v131;
              goto LABEL_423;
            case 119:
            case 126:
              goto LABEL_64;
            case 120:
              sub_1CC73C210(a2, *(void *)(v9 + 80), (uint64_t)&v341);
              if ((_BYTE)v343)
              {
                unsigned int v124 = v342;
                int v325 = v342;
                if (v342 > 0x40) {
                  operator new[]();
                }
                if (v342) {
                  unint64_t v125 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v342;
                }
                else {
                  unint64_t v125 = 0;
                }
                unint64_t v126 = v125 & ~v341;
                unsigned int v127 = v342;
                unint64_t v128 = v341;
                if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
                  MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
                }
                *(void *)a3 = v126;
                *((_DWORD *)a3 + 2) = v124;
                if (*((_DWORD *)a3 + 6) >= 0x41u && *__src) {
                  MEMORY[0x1D25D9CB0](*__src, 0x1000C8000313F17);
                }
                *((void *)a3 + 2) = v128;
                *((_DWORD *)a3 + 6) = v127;
                if ((_BYTE)v343) {
                  goto LABEL_256;
                }
              }
              goto LABEL_423;
            case 124:
              (*(void (**)(uint64_t, void, llvm::MDNode *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 36), a3, a4, (a5 + 1));
              llvm::APInt::sext((uint64_t)a3, v289, (uint64_t)&v341);
              llvm::APInt::sext((uint64_t)v33, v289, (uint64_t)&v324);
              unsigned int v118 = v342;
              unint64_t v119 = v341;
              int v120 = v325;
              int8x8_t v121 = v324;
              if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
                MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
              }
              *(void *)a3 = v119;
              *((_DWORD *)a3 + 2) = v118;
              if (*((_DWORD *)a3 + 6) >= 0x41u && *__src) {
                MEMORY[0x1D25D9CB0](*__src, 0x1000C8000313F17);
              }
              *((int8x8_t *)a3 + 2) = v121;
              *((_DWORD *)a3 + 6) = v120;
              goto LABEL_423;
            case 125:
              goto LABEL_88;
            case 127:
              unsigned int v342 = 1;
              unint64_t v341 = 0;
              unsigned int v344 = 1;
              unint64_t v343 = 0;
              int v325 = 1;
              int8x8_t v324 = 0;
              unsigned int v327 = 1;
              uint64_t v326 = 0;
              (*(void (**)(uint64_t, void, unint64_t *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 36), &v341, a4, (a5 + 1));
              (*(void (**)(uint64_t, void, int8x8_t *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 68), &v324, a4, (a5 + 1));
              llvm::KnownBits::shl((llvm::KnownBits *)&v341, &v324, (uint64_t)&v320);
              goto LABEL_229;
            case 128:
              unsigned int v342 = 1;
              unint64_t v341 = 0;
              unsigned int v344 = 1;
              unint64_t v343 = 0;
              int v325 = 1;
              int8x8_t v324 = 0;
              unsigned int v327 = 1;
              uint64_t v326 = 0;
              (*(void (**)(uint64_t, void, unint64_t *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 36), &v341, a4, (a5 + 1));
              (*(void (**)(uint64_t, void, int8x8_t *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 68), &v324, a4, (a5 + 1));
              llvm::KnownBits::lshr((llvm::KnownBits *)&v341, &v324, (uint64_t)&v320);
              goto LABEL_229;
            case 129:
              unsigned int v342 = 1;
              unint64_t v341 = 0;
              unsigned int v344 = 1;
              unint64_t v343 = 0;
              int v325 = 1;
              int8x8_t v324 = 0;
              unsigned int v327 = 1;
              uint64_t v326 = 0;
              (*(void (**)(uint64_t, void, unint64_t *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 36), &v341, a4, (a5 + 1));
              (*(void (**)(uint64_t, void, int8x8_t *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 68), &v324, a4, (a5 + 1));
              llvm::KnownBits::ashr((uint64_t)&v341, &v324, v136, &v320);
LABEL_229:
              if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
                MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
              }
              *(void *)a3 = v320;
              *((_DWORD *)a3 + 2) = v321;
              unsigned int v321 = 0;
              if (*((_DWORD *)a3 + 6) < 0x41u || !*v33)
              {
                *((void *)a3 + 2) = v322;
                *((_DWORD *)a3 + 6) = v323;
                goto LABEL_252;
              }
              MEMORY[0x1D25D9CB0](*v33, 0x1000C8000313F17);
              unsigned int v142 = v321;
              *((void *)a3 + 2) = v322;
              *((_DWORD *)a3 + 6) = v323;
              unsigned int v323 = 0;
              goto LABEL_251;
            case 134:
            case 135:
              if ((v13 & 4) != 0) {
                goto LABEL_423;
              }
              BOOL v40 = v15 == 135;
              uint64_t v41 = 52;
              uint64_t v42 = 56;
              goto LABEL_55;
            case 136:
              uint64_t v109 = *(void *)(v14 + 32);
              uint64_t v110 = *(unsigned int *)(v109 + 68);
              uint64_t v111 = (a5 + 1);
              (*(void (**)(uint64_t, void, llvm::MDNode *, uint64_t, uint64_t))(*(void *)v9 + 48))(v9, *(unsigned int *)(v109 + 100), a3, a4, v111);
              uint64_t v112 = *((unsigned int *)a3 + 2);
              if (v112 > 0x40)
              {
                int v269 = 0;
                int64_t v270 = (unint64_t)(v112 + 63) >> 6;
                do
                {
                  BOOL v37 = v270-- < 1;
                  if (v37) {
                    break;
                  }
                  unint64_t v271 = *(void *)(*(void *)a3 + 8 * v270);
                  v269 += __clz(v271);
                }
                while (!v271);
                int v272 = v112 | 0xFFFFFFC0;
                if ((v112 & 0x3F) == 0) {
                  int v272 = 0;
                }
                if (v269 + v272 != v112) {
                  goto LABEL_200;
                }
              }
              else if (*(void *)a3)
              {
                goto LABEL_200;
              }
              uint64_t v113 = *((unsigned int *)a3 + 6);
              if (v113 > 0x40)
              {
                int v285 = 0;
                int64_t v286 = (unint64_t)(v113 + 63) >> 6;
                do
                {
                  BOOL v37 = v286-- < 1;
                  if (v37) {
                    break;
                  }
                  unint64_t v287 = *(void *)(*v33 + 8 * v286);
                  v285 += __clz(v287);
                }
                while (!v287);
                int v288 = v113 | 0xFFFFFFC0;
                if ((v113 & 0x3F) == 0) {
                  int v288 = 0;
                }
                if (v285 + v288 == v113) {
                  goto LABEL_423;
                }
              }
              else if (!*v33)
              {
                goto LABEL_423;
              }
LABEL_200:
              unsigned int v342 = 1;
              unint64_t v341 = 0;
              unsigned int v344 = 1;
              unint64_t v343 = 0;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v9 + 48))(v9, v110, &v341, a4, v111);
              unsigned int v114 = *((_DWORD *)a3 + 2);
              if (v114 > 0x40) {
                operator new[]();
              }
              unint64_t v115 = v341 & *(void *)a3;
              unsigned int v116 = *((_DWORD *)a3 + 6);
              if (v116 > 0x40) {
                operator new[]();
              }
              unint64_t v117 = v343 & (unint64_t)*__src;
              if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
                MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
              }
              *(void *)a3 = v115;
              *((_DWORD *)a3 + 2) = v114;
              if (*((_DWORD *)a3 + 6) >= 0x41u && *__src) {
                MEMORY[0x1D25D9CB0](*__src, 0x1000C8000313F17);
              }
              *((void *)a3 + 2) = v117;
              *((_DWORD *)a3 + 6) = v116;
              goto LABEL_255;
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
              if (*(_DWORD *)(*(void *)(v14 + 32) + 36) != a2) {
                goto LABEL_423;
              }
              BOOL v40 = (v13 & 4) == 0;
              uint64_t v41 = 60;
              uint64_t v42 = 52;
LABEL_55:
              if (v40) {
                uint64_t v41 = v42;
              }
              if (v18 < 2) {
                goto LABEL_423;
              }
              if (*(_DWORD *)(*(void *)(v9 + 88) + v41) != 1) {
                goto LABEL_423;
              }
              unsigned int v43 = *((_DWORD *)a3 + 2);
              if (v43 == 1) {
                goto LABEL_423;
              }
              if (v43 <= 0x40)
              {
                unint64_t v44 = *(void *)a3 | (2 * (0xFFFFFFFFFFFFFFFFLL >> (65 - v43)));
                goto LABEL_419;
              }
              v252 = a3;
              unsigned int v210 = 1;
              goto LABEL_495;
            default:
              goto LABEL_422;
          }
        }
        if (v15 <= 210)
        {
          switch(v15)
          {
            case 193:
              if ((v13 & 4) == 0)
              {
                int v48 = *(_DWORD *)(*(void *)(v14 + 32) + 36);
                if (v48 < 0
                  && (v49 = *(void *)(v9 + 80), uint64_t v50 = v48 & 0x7FFFFFFF, v50 < *(_DWORD *)(v49 + 432)))
                {
                  unint64_t v51 = *(void *)(*(void *)(v49 + 424) + 8 * v50);
                }
                else
                {
                  unint64_t v51 = 0;
                }
                uint64_t v212 = *(void *)(v9 + 96);
                char v213 = 35;
                if ((v51 & 4) == 0) {
                  char v213 = 19;
                }
                v214 = *(__int32 **)(v212 + 384);
                size_t v215 = *(unsigned int *)(v212 + 392);
                v216 = wmemchr(v214, (v51 >> v213) & 0xFFFFFF, v215);
                v217 = v216 ? v216 : &v214[v215];
                if (v215 == v217 - v214) {
                  goto LABEL_396;
                }
              }
              goto LABEL_423;
            case 195:
              unsigned int v342 = 1;
              unint64_t v341 = 0;
              unsigned int v344 = 1;
              unint64_t v343 = 0;
              (*(void (**)(uint64_t, void, llvm::MDNode *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 36), a3, a4, (a5 + 1));
              (*(void (**)(uint64_t, void, unint64_t *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 68), &v341, a4, (a5 + 1));
              llvm::KnownBits::smin(a3, (const llvm::KnownBits *)&v341, (uint64_t)&v324);
              goto LABEL_99;
            case 196:
              unsigned int v342 = 1;
              unint64_t v341 = 0;
              unsigned int v344 = 1;
              unint64_t v343 = 0;
              (*(void (**)(uint64_t, void, llvm::MDNode *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 36), a3, a4, (a5 + 1));
              (*(void (**)(uint64_t, void, unint64_t *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 68), &v341, a4, (a5 + 1));
              llvm::KnownBits::smax(a3, (const llvm::KnownBits *)&v341, (uint64_t)&v324);
LABEL_99:
              if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
                MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
              }
              *(int8x8_t *)a3 = v324;
              *((_DWORD *)a3 + 2) = v325;
              int v325 = 0;
              if (*((_DWORD *)a3 + 6) >= 0x41u && *v33) {
                MEMORY[0x1D25D9CB0](*v33, 0x1000C8000313F17);
              }
              goto LABEL_106;
            case 197:
              unsigned int v342 = 1;
              unint64_t v341 = 0;
              unsigned int v344 = 1;
              unint64_t v343 = 0;
              (*(void (**)(uint64_t, void, llvm::MDNode *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 36), a3, a4, (a5 + 1));
              (*(void (**)(uint64_t, void, unint64_t *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 68), &v341, a4, (a5 + 1));
              llvm::KnownBits::umin(a3, (const llvm::KnownBits *)&v341, (uint64_t)&v324);
              goto LABEL_104;
            case 198:
              unsigned int v342 = 1;
              unint64_t v341 = 0;
              unsigned int v344 = 1;
              unint64_t v343 = 0;
              (*(void (**)(uint64_t, void, llvm::MDNode *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 36), a3, a4, (a5 + 1));
              (*(void (**)(uint64_t, void, unint64_t *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 68), &v341, a4, (a5 + 1));
              llvm::KnownBits::umax(a3, (const llvm::KnownBits *)&v341, (uint64_t)&v324);
LABEL_104:
              if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
                MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
              }
              *(int8x8_t *)a3 = v324;
              *((_DWORD *)a3 + 2) = v325;
              int v325 = 0;
              if (*((_DWORD *)a3 + 6) < 0x41u || !*v33)
              {
LABEL_106:
                *((void *)a3 + 2) = v326;
                *((_DWORD *)a3 + 6) = v327;
                goto LABEL_255;
              }
              MEMORY[0x1D25D9CB0](*v33, 0x1000C8000313F17);
              unsigned int v143 = v325;
              *((void *)a3 + 2) = v326;
              *((_DWORD *)a3 + 6) = v327;
              unsigned int v327 = 0;
              break;
            default:
              goto LABEL_422;
          }
          goto LABEL_254;
        }
        if (v15 > 253)
        {
          uint64_t v52 = v18;
          if (v15 == 254)
          {
            unsigned int v342 = 1;
            unint64_t v341 = 0;
            unsigned int v344 = 1;
            unint64_t v343 = 0;
            int v325 = 1;
            int8x8_t v324 = 0;
            unsigned int v327 = 1;
            uint64_t v326 = 0;
            unsigned int v321 = 1;
            v320 = 0;
            unsigned int v323 = 1;
            v322 = 0;
            uint64_t v137 = (a5 + 1);
            (*(void (**)(uint64_t, void, unint64_t *, uint64_t, uint64_t))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 36), &v341, a4, v137);
            (*(void (**)(uint64_t, void, int8x8_t *, uint64_t, uint64_t))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 68), &v324, a4, v137);
            (*(void (**)(uint64_t, void, void **, uint64_t, uint64_t))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 100), &v320, a4, v137);
            sub_1CC6E33F0((uint64_t)&v316, v52, (llvm::KnownBits *)&v341, &v324, (uint64_t)&v320);
            if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
              MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
            }
            *(void *)a3 = v316;
            *((_DWORD *)a3 + 2) = v317;
            unsigned int v317 = 0;
            if (*((_DWORD *)a3 + 6) >= 0x41u && *v33) {
              MEMORY[0x1D25D9CB0](*v33, 0x1000C8000313F17);
            }
            *((void *)a3 + 2) = v318;
            *((_DWORD *)a3 + 6) = v319;
            if (v52)
            {
              unint64_t v138 = 0xFFFFFFFFFFFFFFFFLL >> ~(v52 + 63);
              unint64_t v139 = v138 & v52;
              unint64_t v140 = v138 & v52 ^ v138;
            }
            else
            {
              unint64_t v139 = 0;
              unint64_t v140 = 0;
            }
            unsigned int v317 = v52;
            unint64_t v316 = v140;
            unsigned int v319 = v52;
            unint64_t v318 = v139;
            unsigned int v309 = v321;
            if (v321 > 0x40) {
              operator new[]();
            }
            v308 = v320;
            unsigned int v311 = v323;
            if (v323 > 0x40) {
              operator new[]();
            }
            v310 = v322;
            llvm::KnownBits::computeForAddSub(0, 0, (uint64_t)&v316, (uint64_t)&v308, (uint64_t)&v312);
            if (v311 >= 0x41 && v310) {
              MEMORY[0x1D25D9CB0](v310, 0x1000C8000313F17);
            }
            if (v309 >= 0x41 && v308) {
              MEMORY[0x1D25D9CB0](v308, 0x1000C8000313F17);
            }
            llvm::KnownBits::shl(a3, &v312, (uint64_t)&v300);
            llvm::KnownBits::ashr((uint64_t)&v300, &v312, v141, &v304);
            if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
              MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
            }
            *(void *)a3 = v304;
            *((_DWORD *)a3 + 2) = v305;
            unsigned int v305 = 0;
            if (*((_DWORD *)a3 + 6) >= 0x41u && *v33)
            {
              MEMORY[0x1D25D9CB0](*v33, 0x1000C8000313F17);
              unsigned int v268 = v305;
              *((void *)a3 + 2) = v306;
              *((_DWORD *)a3 + 6) = v307;
              int v307 = 0;
              if (v268 >= 0x41 && v304) {
                MEMORY[0x1D25D9CB0](v304, 0x1000C8000313F17);
              }
            }
            else
            {
              *((void *)a3 + 2) = v306;
              *((_DWORD *)a3 + 6) = v307;
              int v307 = 0;
            }
            if (v303 >= 0x41 && v302) {
              MEMORY[0x1D25D9CB0](v302, 0x1000C8000313F17);
            }
            if (v301 >= 0x41 && v300) {
              MEMORY[0x1D25D9CB0](v300, 0x1000C8000313F17);
            }
            if (v315 >= 0x41 && v314) {
              MEMORY[0x1D25D9CB0](v314, 0x1000C8000313F17);
            }
            if (v313 >= 0x41 && *(void *)&v312) {
              MEMORY[0x1D25D9CB0](*(void *)&v312, 0x1000C8000313F17);
            }
            if (v319 >= 0x41 && v318) {
              MEMORY[0x1D25D9CB0](v318, 0x1000C8000313F17);
            }
            if (v317 >= 0x41 && v316) {
              MEMORY[0x1D25D9CB0](v316, 0x1000C8000313F17);
            }
            goto LABEL_249;
          }
          if (v15 == 255)
          {
            unsigned int v342 = 1;
            unint64_t v341 = 0;
            unsigned int v344 = 1;
            unint64_t v343 = 0;
            int v325 = 1;
            int8x8_t v324 = 0;
            unsigned int v327 = 1;
            uint64_t v326 = 0;
            unsigned int v321 = 1;
            v320 = 0;
            unsigned int v323 = 1;
            v322 = 0;
            uint64_t v53 = (a5 + 1);
            (*(void (**)(uint64_t, void, unint64_t *, uint64_t, uint64_t))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 36), &v341, a4, v53);
            (*(void (**)(uint64_t, void, int8x8_t *, uint64_t, uint64_t))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 68), &v324, a4, v53);
            (*(void (**)(uint64_t, void, void **, uint64_t, uint64_t))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 100), &v320, a4, v53);
            sub_1CC6E33F0((uint64_t)&v316, v52, (llvm::KnownBits *)&v341, &v324, (uint64_t)&v320);
            if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
              MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
            }
            *(void *)a3 = v316;
            *((_DWORD *)a3 + 2) = v317;
            unsigned int v317 = 0;
            if (*((_DWORD *)a3 + 6) >= 0x41u && *v33) {
              MEMORY[0x1D25D9CB0](*v33, 0x1000C8000313F17);
            }
            *((void *)a3 + 2) = v318;
            *((_DWORD *)a3 + 6) = v319;
LABEL_249:
            if (v323 >= 0x41 && v322) {
              MEMORY[0x1D25D9CB0](v322, 0x1000C8000313F17);
            }
            unsigned int v142 = v321;
LABEL_251:
            if (v142 >= 0x41 && v320) {
              MEMORY[0x1D25D9CB0](v320, 0x1000C8000313F17);
            }
LABEL_252:
            if (v327 >= 0x41 && v326) {
              MEMORY[0x1D25D9CB0](v326, 0x1000C8000313F17);
            }
            unsigned int v143 = v325;
LABEL_254:
            if (v143 >= 0x41 && *(void *)&v324) {
              MEMORY[0x1D25D9CB0](*(void *)&v324, 0x1000C8000313F17);
            }
LABEL_255:
            if (v344 >= 0x41 && v343) {
              MEMORY[0x1D25D9CB0](v343, 0x1000C8000313F17);
            }
LABEL_256:
            unsigned int v144 = v342;
LABEL_257:
            if (v144 >= 0x41)
            {
              unint64_t v96 = v341;
              if (v341) {
LABEL_259:
              }
                MEMORY[0x1D25D9CB0](v96, 0x1000C8000313F17);
            }
            goto LABEL_423;
          }
LABEL_422:
          (*(void (**)(void, uint64_t, void, llvm::MDNode *, uint64_t, void, uint64_t))(**(void **)(v9 + 88) + 1616))(*(void *)(v9 + 88), v9, a2, a3, a4, *(void *)(v9 + 80), a5);
          goto LABEL_423;
        }
        switch(v15)
        {
          case 211:
            (*(void (**)(uint64_t, void, int8x8_t *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 36), &v336, a4, (a5 + 1));
            if (v337 > 0x40)
            {
              __int32 v62 = 0;
              unint64_t v205 = ((unint64_t)v337 + 63) >> 6;
              uint64_t v206 = (int8x8_t *)v336;
              do
              {
                int8x8_t v207 = *v206++;
                uint8x8_t v208 = (uint8x8_t)vcnt_s8(v207);
                v208.i16[0] = vaddlv_u8(v208);
                v62 += v208.i32[0];
                --v205;
              }
              while (v205);
            }
            else
            {
              uint8x8_t v61 = (uint8x8_t)vcnt_s8(v336);
              v61.i16[0] = vaddlv_u8(v61);
              __int32 v62 = v61.i32[0];
            }
            unsigned int v209 = __clz(v337 - v62);
            unsigned int v210 = 32 - v209;
            unsigned int v43 = *((_DWORD *)a3 + 2);
            if (32 - v209 != v43)
            {
              if (v43 > 0x40)
              {
LABEL_494:
                v252 = a3;
LABEL_495:
                llvm::APInt::setBitsSlowCase(v252, v210, v43);
              }
              else
              {
                char v211 = 96 - v43 - v209;
LABEL_417:
                unint64_t v179 = 0xFFFFFFFFFFFFFFFFLL >> v211 << v210;
LABEL_418:
                unint64_t v44 = *(void *)a3 | v179;
LABEL_419:
                *(void *)a3 = v44;
              }
            }
LABEL_423:
            v223 = v295;
            uint64_t result = v297;
            if (*v297)
            {
              int v224 = 16;
            }
            else
            {
              int v224 = *(_DWORD *)(v9 + 128);
              if (!v224)
              {
                v233 = 0;
                goto LABEL_440;
              }
              v223 = *(char **)(v9 + 120);
            }
            int v225 = v224 - 1;
            unsigned int v226 = (37 * v340) & v225;
            v227 = &v223[40 * v226];
            int v228 = *(_DWORD *)v227;
            if (v340 == *(_DWORD *)v227)
            {
LABEL_441:
              unsigned int v234 = *((_DWORD *)a3 + 2);
              if (*((_DWORD *)v227 + 4) > 0x40u || v234 > 0x40)
              {
                v248 = (void **)(v227 + 8);
                if (v227 + 8 != (char *)a3)
                {
                  uint64_t result = (char *)llvm::APInt::reallocate((uint64_t)(v227 + 8), v234);
                  uint64_t v249 = *((unsigned int *)v227 + 4);
                  if (v249 <= 0x40) {
                    *v248 = *(void **)a3;
                  }
                  else {
                    uint64_t result = (char *)memcpy(*v248, *(const void **)a3, ((unint64_t)(v249 + 63) >> 3) & 0x3FFFFFF8);
                  }
                }
              }
              else
              {
                *((void *)v227 + 1) = *(void *)a3;
                *((_DWORD *)v227 + 4) = *((_DWORD *)a3 + 2);
              }
              unsigned int v235 = *((_DWORD *)a3 + 6);
              if (*((_DWORD *)v227 + 8) > 0x40u || v235 > 0x40)
              {
                v250 = (void **)(v227 + 24);
                if (v227 + 24 != (char *)__src)
                {
                  uint64_t result = (char *)llvm::APInt::reallocate((uint64_t)(v227 + 24), v235);
                  uint64_t v251 = *((unsigned int *)v227 + 8);
                  if (v251 <= 0x40) {
                    *v250 = (void *)*__src;
                  }
                  else {
                    uint64_t result = (char *)memcpy(*v250, *__src, ((unint64_t)(v251 + 63) >> 3) & 0x3FFFFFF8);
                  }
                }
              }
              else
              {
                *((void *)v227 + 3) = *((void *)a3 + 2);
                *((_DWORD *)v227 + 8) = *((_DWORD *)a3 + 6);
              }
LABEL_447:
              if (v339 >= 0x41)
              {
                uint64_t result = (char *)v338;
                if (v338) {
                  uint64_t result = (char *)MEMORY[0x1D25D9CB0](v338, 0x1000C8000313F17);
                }
              }
              if (v337 >= 0x41)
              {
                uint64_t result = (char *)v336;
                if (v336) {
                  return (char *)MEMORY[0x1D25D9CB0](*(void *)&v336, 0x1000C8000313F17);
                }
              }
              return result;
            }
            v229 = 0;
            int v230 = 1;
            while (v228 != -1)
            {
              if (v229) {
                BOOL v231 = 0;
              }
              else {
                BOOL v231 = v228 == -2;
              }
              if (v231) {
                v229 = v227;
              }
              unsigned int v232 = v226 + v230++;
              unsigned int v226 = v232 & v225;
              v227 = &v223[40 * v226];
              int v228 = *(_DWORD *)v227;
              if (v340 == *(_DWORD *)v227) {
                goto LABEL_441;
              }
            }
            if (v229) {
              v233 = v229;
            }
            else {
              v233 = v227;
            }
LABEL_440:
            uint64_t result = (char *)sub_1CC6E3C7C((uint64_t)v297, (int *)&v340, v233);
            v227 = result;
            *(_DWORD *)uint64_t result = v340;
            *((void *)result + 3) = 0;
            *((void *)result + 4) = 0;
            *((void *)result + 1) = 0;
            *((void *)result + 2) = 0;
            *((_DWORD *)result + 4) = 1;
            *((_DWORD *)result + 8) = 1;
            goto LABEL_441;
          case 212:
            (*(void (**)(uint64_t, void, llvm::MDNode *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 36), a3, a4, (a5 + 1));
            sub_1CD612D88((uint64_t)a3, (uint64_t)&v341);
            break;
          case 213:
            (*(void (**)(uint64_t, void, llvm::MDNode *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 36), a3, a4, (a5 + 1));
            sub_1CD612DE8((unsigned int *)a3, (uint64_t)&v341);
            break;
          default:
            goto LABEL_422;
        }
LABEL_127:
        if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
          MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
        }
        *(void *)a3 = v341;
        *((_DWORD *)a3 + 2) = v342;
        unsigned int v342 = 0;
        if (*((_DWORD *)a3 + 6) < 0x41u || !*v33)
        {
          *((void *)a3 + 2) = v343;
          *((_DWORD *)a3 + 6) = v344;
          goto LABEL_423;
        }
        MEMORY[0x1D25D9CB0](*v33, 0x1000C8000313F17);
        unsigned int v144 = v342;
        *((void *)a3 + 2) = v343;
        *((_DWORD *)a3 + 6) = v344;
        unsigned int v344 = 0;
        goto LABEL_257;
      }
      unsigned int v289 = v18;
      switch(v15)
      {
        case '*':
LABEL_88:
          (*(void (**)(uint64_t, void, llvm::MDNode *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 36), a3, a4, (a5 + 1));
          llvm::KnownBits::sextInReg(a3, *(_DWORD *)(*(void *)(v14 + 32) + 80), (unsigned int *)&v341);
          goto LABEL_127;
        case '+':
          goto LABEL_64;
        case ',':
          uint64_t v71 = *(void *)(v14 + 32);
          uint64_t v72 = *(void *)(v71 + 80);
          if (!v72) {
            goto LABEL_423;
          }
          if (!v72) {
            goto LABEL_119;
          }
          if (v72 > 0x40)
          {
            llvm::APInt::setBitsSlowCase(a3, 0, *(void *)(v71 + 80));
            unsigned int v74 = *((_DWORD *)a3 + 6);
          }
          else
          {
            unint64_t v73 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v72;
            if (*((_DWORD *)a3 + 2) > 0x40u) {
              **(void **)a3 |= v73;
            }
            else {
              *(void *)a3 |= v73;
            }
LABEL_119:
            unsigned int v74 = v18;
          }
          unsigned int v342 = v74;
          if (v74 >= 0x41) {
            operator new[]();
          }
          unint64_t v75 = 0;
          unint64_t v341 = 0;
          if (v74 != v72)
          {
            if (v72 > 0x3F)
            {
              llvm::APInt::setBitsSlowCase(&v341, v72, v74);
            }
            else
            {
              unint64_t v75 = 0xFFFFFFFFFFFFFFFFLL >> (v72 - v74) << v72;
              unint64_t v341 = v75;
            }
          }
          uint64_t v76 = *((unsigned int *)a3 + 6);
          if (v76 > 0x40)
          {
            v281 = (void *)*v33;
            unint64_t v282 = (unint64_t)(v76 + 63) >> 6;
            v283 = (uint64_t *)v75;
            do
            {
              uint64_t v284 = *v283++;
              *v281++ &= v284;
              --v282;
            }
            while (v282);
          }
          else
          {
            *v33 &= v75;
          }
          goto LABEL_423;
        case '-':
LABEL_396:
          (*(void (**)(uint64_t, void, llvm::MDNode *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 36), a3, a4, (a5 + 1));
          (*(void (**)(uint64_t, void, int8x8_t *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 68), &v336, a4, (a5 + 1));
          unsigned int v329 = v337;
          if (v337 > 0x40) {
            operator new[]();
          }
          int8x8_t v328 = v336;
          unsigned int v331 = v339;
          if (v339 > 0x40) {
            operator new[]();
          }
          unint64_t v330 = v338;
          llvm::KnownBits::computeForAddSub(1, 0, (uint64_t)a3, (uint64_t)&v328, (uint64_t)&v341);
          if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
            MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
          }
          *(void *)a3 = v341;
          *((_DWORD *)a3 + 2) = v342;
          unsigned int v342 = 0;
          if (*((_DWORD *)a3 + 6) >= 0x41u && *v33)
          {
            MEMORY[0x1D25D9CB0](*v33, 0x1000C8000313F17);
            unsigned int v257 = v342;
            *((void *)a3 + 2) = v343;
            *((_DWORD *)a3 + 6) = v344;
            unsigned int v344 = 0;
            if (v257 >= 0x41 && v341) {
              MEMORY[0x1D25D9CB0](v341, 0x1000C8000313F17);
            }
          }
          else
          {
            *((void *)a3 + 2) = v343;
            *((_DWORD *)a3 + 6) = v344;
            unsigned int v344 = 0;
          }
          if (v331 >= 0x41 && v330) {
            MEMORY[0x1D25D9CB0](v330, 0x1000C8000313F17);
          }
          if (v329 < 0x41) {
            goto LABEL_423;
          }
          unint64_t v96 = (unint64_t)v328;
          if (!*(void *)&v328) {
            goto LABEL_423;
          }
          goto LABEL_259;
        case '.':
          (*(void (**)(uint64_t, void, llvm::MDNode *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 36), a3, a4, (a5 + 1));
          (*(void (**)(uint64_t, void, int8x8_t *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 68), &v336, a4, (a5 + 1));
          unsigned int v333 = v337;
          if (v337 > 0x40) {
            operator new[]();
          }
          int8x8_t v332 = v336;
          unsigned int v335 = v339;
          if (v339 > 0x40) {
            operator new[]();
          }
          unint64_t v334 = v338;
          llvm::KnownBits::computeForAddSub(0, 0, (uint64_t)a3, (uint64_t)&v332, (uint64_t)&v341);
          if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
            MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
          }
          *(void *)a3 = v341;
          *((_DWORD *)a3 + 2) = v342;
          unsigned int v342 = 0;
          if (*((_DWORD *)a3 + 6) >= 0x41u && *v33)
          {
            MEMORY[0x1D25D9CB0](*v33, 0x1000C8000313F17);
            unsigned int v266 = v342;
            *((void *)a3 + 2) = v343;
            *((_DWORD *)a3 + 6) = v344;
            unsigned int v344 = 0;
            if (v266 >= 0x41 && v341) {
              MEMORY[0x1D25D9CB0](v341, 0x1000C8000313F17);
            }
          }
          else
          {
            *((void *)a3 + 2) = v343;
            *((_DWORD *)a3 + 6) = v344;
            unsigned int v344 = 0;
          }
          if (v335 >= 0x41 && v334) {
            MEMORY[0x1D25D9CB0](v334, 0x1000C8000313F17);
          }
          if (v333 < 0x41) {
            goto LABEL_423;
          }
          unint64_t v96 = (unint64_t)v332;
          if (!*(void *)&v332) {
            goto LABEL_423;
          }
          goto LABEL_259;
        case '/':
          (*(void (**)(uint64_t, void, llvm::MDNode *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 68), a3, a4, (a5 + 1));
          (*(void (**)(uint64_t, void, int8x8_t *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 36), &v336, a4, (a5 + 1));
          llvm::KnownBits::mul(a3, (const llvm::KnownBits *)&v336, 0, (uint64_t)&v341);
          goto LABEL_127;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'D':
        case 'G':
        case 'H':
        case 'I':
        case 'K':
        case 'N':
        case 'O':
          goto LABEL_422;
        case 'A':
          (*(void (**)(uint64_t, void, llvm::MDNode *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 68), a3, a4, (a5 + 1));
          (*(void (**)(uint64_t, void, int8x8_t *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 36), &v336, a4, (a5 + 1));
          uint64_t v67 = *((unsigned int *)a3 + 2);
          if (v67 > 0x40)
          {
            v258 = *(void **)a3;
            v259 = (uint64_t *)v336;
            unint64_t v260 = (unint64_t)(v67 + 63) >> 6;
            uint64_t v68 = v33;
            do
            {
              uint64_t v261 = *v259++;
              *v258++ |= v261;
              --v260;
            }
            while (v260);
          }
          else
          {
            *(void *)a3 |= *(void *)&v336;
            uint64_t v68 = v33;
          }
          uint64_t v69 = *((unsigned int *)a3 + 6);
          if (v69 <= 0x40)
          {
            unint64_t v70 = *v68 & v338;
            goto LABEL_181;
          }
          v262 = (void *)*v68;
          v263 = (uint64_t *)v338;
          unint64_t v264 = (unint64_t)(v69 + 63) >> 6;
          do
          {
            uint64_t v265 = *v263++;
            *v262++ &= v265;
            --v264;
          }
          while (v264);
          goto LABEL_423;
        case 'B':
          (*(void (**)(uint64_t, void, llvm::MDNode *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 68), a3, a4, (a5 + 1));
          (*(void (**)(uint64_t, void, int8x8_t *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 36), &v336, a4, (a5 + 1));
          uint64_t v97 = *((unsigned int *)a3 + 2);
          if (v97 > 0x40)
          {
            v273 = *(void **)a3;
            v274 = (uint64_t *)v336;
            unint64_t v275 = (unint64_t)(v97 + 63) >> 6;
            uint64_t v68 = v33;
            do
            {
              uint64_t v276 = *v274++;
              *v273++ &= v276;
              --v275;
            }
            while (v275);
          }
          else
          {
            *(void *)a3 &= *(void *)&v336;
            uint64_t v68 = v33;
          }
          uint64_t v98 = *((unsigned int *)a3 + 6);
          if (v98 > 0x40)
          {
            v277 = (void *)*v68;
            v278 = (uint64_t *)v338;
            unint64_t v279 = (unint64_t)(v98 + 63) >> 6;
            do
            {
              uint64_t v280 = *v278++;
              *v277++ |= v280;
              --v279;
            }
            while (v279);
          }
          else
          {
            unint64_t v70 = *v68 | v338;
LABEL_181:
            *uint64_t v68 = v70;
          }
          goto LABEL_423;
        case 'C':
          (*(void (**)(uint64_t, void, llvm::MDNode *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 68), a3, a4, (a5 + 1));
          (*(void (**)(uint64_t, void, int8x8_t *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 36), &v336, a4, (a5 + 1));
          llvm::KnownBits::operator^=((uint64_t)a3, &v336);
          goto LABEL_423;
        case 'E':
          goto LABEL_80;
        case 'F':
          (*(void (**)(void, void, llvm::MDNode *, void))(**(void **)(v9 + 88) + 1632))(*(void *)(v9 + 88), *(unsigned int *)(*(void *)(v14 + 32) + 48), a3, *(void *)(v9 + 72));
          goto LABEL_423;
        case 'J':
          if ((v13 & 4) != 0) {
            goto LABEL_423;
          }
          uint64_t v99 = (*(_DWORD *)(v14 + 40) - 1);
          int v100 = *(_DWORD *)(*(void *)(v14 + 32) + 32 * v99 + 4);
          if (v100 < 0)
          {
            uint64_t v101 = *(void *)(v9 + 80);
            if ((v100 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v101 + 432))
            {
              uint64_t v102 = *(void *)(*(void *)(v101 + 424) + 8 * (v100 & 0x7FFFFFFF));
              unint64_t v103 = v102 & 0xFFFFFFFFFFFFFFF9;
              uint64_t v104 = v102 & 4;
              if (v103 && v104 != 0) {
                goto LABEL_447;
              }
            }
          }
          unsigned int v342 = 1;
          unint64_t v341 = 0;
          unsigned int v344 = 1;
          unint64_t v343 = 0;
          (*(void (**)(uint64_t))(*(void *)v9 + 48))(v9);
          if (!v99) {
            goto LABEL_452;
          }
          uint64_t v106 = 0;
          char v107 = (int *)(*(void *)(v14 + 32) + 4);
          while (1)
          {
            int v108 = *v107;
            v107 += 8;
            if (v108 == a2) {
              break;
            }
            if (v99 == ++v106) {
              goto LABEL_452;
            }
          }
          LODWORD(v99) = v106;
LABEL_452:
          llvm::APInt::extractBits((uint64_t)&v341, v289, v99 * v289, (uint64_t)&v324);
          llvm::APInt::extractBits((uint64_t)&v343, v289, v99 * v289, (uint64_t)&v320);
          int v236 = v325;
          int8x8_t v237 = v324;
          unsigned int v238 = v321;
          v239 = v320;
          if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
            MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
          }
          *(int8x8_t *)a3 = v237;
          *((_DWORD *)a3 + 2) = v236;
          if (*((_DWORD *)a3 + 6) >= 0x41u && *__src) {
            MEMORY[0x1D25D9CB0](*__src, 0x1000C8000313F17);
          }
          *((void *)a3 + 2) = v239;
          *((_DWORD *)a3 + 6) = v238;
          goto LABEL_255;
        case 'L':
          int v63 = *(_DWORD *)(*(void *)(v14 + 32) + 36);
          if (v63 < 0
            && (uint64_t v64 = *(void *)(v9 + 80), v65 = v63 & 0x7FFFFFFF, v65 < *(_DWORD *)(v64 + 432)))
          {
            unint64_t v66 = *(void *)(*(void *)(v64 + 424) + 8 * v65);
          }
          else
          {
            unint64_t v66 = 0;
          }
          int v145 = *(_DWORD *)(v14 + 40);
          unint64_t v341 = v66;
          int v291 = sub_1CB8F1DC4(&v341);
          if (v146 == 1) {
          unsigned int v147 = v145 - 1;
          }
          if (v145 != 1)
          {
            uint64_t v148 = 0;
            unsigned int v149 = 0;
            uint64_t v150 = (a5 + 1);
            uint64_t v151 = 32 * v147;
            do
            {
              unsigned int v342 = 1;
              unint64_t v341 = 0;
              unsigned int v344 = 1;
              unint64_t v343 = 0;
              (*(void (**)(uint64_t, void, unint64_t *, uint64_t, uint64_t))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + v148 + 36), &v341, a4, v150);
              llvm::APInt::insertBits((void **)a3, (const llvm::APInt *)&v341, v149);
              llvm::APInt::insertBits((void **)__src, (const llvm::APInt *)&v343, v149);
              if (v344 >= 0x41 && v343) {
                MEMORY[0x1D25D9CB0](v343, 0x1000C8000313F17);
              }
              if (v342 >= 0x41 && v341) {
                MEMORY[0x1D25D9CB0](v341, 0x1000C8000313F17);
              }
              v149 += v291;
              v148 += 32;
            }
            while (v151 != v148);
          }
          goto LABEL_423;
        case 'M':
          uint64_t v77 = *((unsigned int *)a3 + 2);
          if (v77 > 0x40)
          {
            memset(*(void **)a3, 255, ((unint64_t)(v77 + 63) >> 3) & 0x3FFFFFF8);
            LODWORD(v77) = *((_DWORD *)a3 + 2);
          }
          else
          {
            *(void *)a3 = -1;
          }
          if (!v77)
          {
            unint64_t v78 = 0;
            goto LABEL_135;
          }
          unint64_t v78 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v77;
          if (v77 < 0x41)
          {
LABEL_135:
            unint64_t v79 = a3;
            goto LABEL_136;
          }
          unint64_t v79 = (llvm::MDNode *)(*(void *)a3
                               + 8 * ((((unint64_t)v77 + 63) >> 6) - 1));
LABEL_136:
          *(void *)v79 &= v78;
          uint64_t v80 = *((unsigned int *)a3 + 6);
          if (v80 > 0x40)
          {
            memset(*((void **)a3 + 2), 255, ((unint64_t)(v80 + 63) >> 3) & 0x3FFFFFF8);
            LODWORD(v80) = *((_DWORD *)a3 + 6);
            if (v80)
            {
LABEL_138:
              unint64_t v81 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v80;
              if (v80 >= 0x41)
              {
                unint64_t v82 = (void *)(*v33 + 8 * ((((unint64_t)v80 + 63) >> 6) - 1));
                goto LABEL_140;
              }
LABEL_139:
              unint64_t v82 = v33;
LABEL_140:
              *v82 &= v81;
              int v83 = *(_DWORD *)(v14 + 40);
              uint64_t v84 = (v83 - 1);
              if (v83 == 1) {
                goto LABEL_423;
              }
              uint64_t v85 = 0;
              unsigned int v290 = a5 + 1;
              while (1)
              {
                if (*(_DWORD *)(a4 + 8) >= 0x41u) {
                  uint64_t v86 = (void *)(*(void *)a4 + 8 * (v85 >> 6));
                }
                else {
                  uint64_t v86 = (void *)a4;
                }
                uint64_t v87 = *v86 >> v85++;
                if (v87)
                {
                  (*(void (**)(uint64_t, void, int8x8_t *, uint64_t, void))(*(void *)v9 + 48))(v9, *(unsigned int *)(*(void *)(v14 + 32) + 32 * v85 + 4), &v336, a4, v290);
                  unsigned int v88 = *((_DWORD *)a3 + 2);
                  if (v88 > 0x40) {
                    operator new[]();
                  }
                  unint64_t v89 = *(void *)&v336 & *(void *)a3;
                  unsigned int v90 = *((_DWORD *)a3 + 6);
                  if (v90 > 0x40) {
                    operator new[]();
                  }
                  unint64_t v91 = v338 & (unint64_t)*__src;
                  if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
                    MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
                  }
                  *(void *)a3 = v89;
                  *((_DWORD *)a3 + 2) = v88;
                  if (*((_DWORD *)a3 + 6) >= 0x41u && *__src)
                  {
                    MEMORY[0x1D25D9CB0](*__src, 0x1000C8000313F17);
                    unsigned int v88 = *((_DWORD *)a3 + 2);
                  }
                  *((void *)a3 + 2) = v91;
                  *((_DWORD *)a3 + 6) = v90;
                  if (v88 > 0x40)
                  {
                    int v92 = 0;
                    int64_t v93 = ((unint64_t)v88 + 63) >> 6;
                    do
                    {
                      BOOL v37 = v93-- < 1;
                      if (v37) {
                        break;
                      }
                      unint64_t v94 = *(void *)(*(void *)a3 + 8 * v93);
                      v92 += __clz(v94);
                    }
                    while (!v94);
                    unsigned int v95 = v88 | 0xFFFFFFC0;
                    if ((v88 & 0x3F) == 0) {
                      unsigned int v95 = 0;
                    }
                    if (v92 + v95 == v88)
                    {
LABEL_152:
                      if (!v91) {
                        goto LABEL_423;
                      }
                    }
                  }
                  else if (!*(void *)a3)
                  {
                    goto LABEL_152;
                  }
                }
                if (v85 == v84) {
                  goto LABEL_423;
                }
              }
            }
          }
          else
          {
            void *v33 = -1;
            if (v80) {
              goto LABEL_138;
            }
          }
          unint64_t v81 = 0;
          goto LABEL_139;
        case 'P':
        case 'Q':
          if ((v13 & 4) != 0) {
            goto LABEL_423;
          }
LABEL_64:
          uint64_t v45 = *(void *)(v14 + 32);
          uint64_t v46 = *(unsigned int *)(v45 + 36);
          if ((v46 & 0x80000000) != 0)
          {
            uint64_t v60 = *(void *)(v9 + 80);
            if ((v46 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v60 + 432)) {
              unint64_t v47 = 0;
            }
            else {
              unint64_t v47 = *(void *)(*(void *)(v60 + 424) + 8 * (v46 & 0x7FFFFFFF));
            }
          }
          else
          {
            unint64_t v47 = 0;
          }
          v320 = (void *)v47;
          if (v15 == 43)
          {
            unsigned int v152 = *(_DWORD *)(v45 + 80);
          }
          else if ((v47 & 0xFFFFFFFFFFFFFFF9) != 0 && (v47 & 2) != 0 && (v47 & 4) == 0)
          {
            uint64_t v153 = *(void *)(v9 + 96);
            uint64_t v154 = (v47 >> 19) & 0xFFFFFF;
            uint64_t v155 = *(void *)(v153 + 232);
            if (!v154) {
              goto LABEL_288;
            }
            unint64_t v156 = *(unsigned int *)(v153 + 240);
            uint64_t v157 = *(void *)(v153 + 232);
            if (v156)
            {
              uint64_t v157 = v155;
              unint64_t v158 = v156;
              do
              {
                unint64_t v159 = v158 >> 1;
                uint64_t v160 = v157 + 16 * (v158 >> 1);
                unsigned int v161 = *(_DWORD *)(v160 + 8);
                uint64_t v162 = v160 + 16;
                v158 += ~(v158 >> 1);
                if (v161 < v154) {
                  uint64_t v157 = v162;
                }
                else {
                  unint64_t v158 = v159;
                }
              }
              while (v158);
            }
            if (v157 == v155 + 16 * v156 || *(_DWORD *)(v157 + 8) != v154) {
LABEL_288:
            }
              uint64_t v157 = v155;
            unsigned int v152 = *(_DWORD *)(v157 + 12);
          }
          else
          {
            unsigned int v152 = sub_1CB8F1DC4((unint64_t *)&v320);
            if (v163 == 1) {
          }
            }
          unsigned int v164 = *((_DWORD *)a3 + 2);
          if (v164 < v152)
          {
            sub_1CB9F87DC((uint64_t *)a3, v152, (uint64_t)&v341);
          }
          else if (v164 > v152)
          {
            if (v152 > 0x40) {
              operator new[]();
            }
            uint64_t v165 = a3;
            if (v164 >= 0x41) {
              uint64_t v165 = *(llvm::MDNode **)a3;
            }
            uint64_t v166 = *(void *)v165;
            unint64_t v167 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v152;
            if (v152) {
              unint64_t v168 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v152;
            }
            else {
              unint64_t v168 = 0;
            }
            unint64_t v169 = v168 & v166;
            v170 = v33;
            if (*((_DWORD *)a3 + 6) >= 0x41u) {
              v170 = (uint64_t *)*v33;
            }
            uint64_t v171 = *v170;
            if (!v152) {
              unint64_t v167 = 0;
            }
            unsigned int v342 = v152;
            unint64_t v341 = v169;
            unsigned int v344 = v152;
            unint64_t v343 = v167 & v171;
          }
          else
          {
            unsigned int v342 = *((_DWORD *)a3 + 2);
            if (v164 > 0x40) {
              operator new[]();
            }
            unint64_t v341 = *(void *)a3;
            unsigned int v344 = *((_DWORD *)a3 + 6);
            if (v344 > 0x40) {
              operator new[]();
            }
            unint64_t v343 = *v33;
          }
          if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
            MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
          }
          *(void *)a3 = v341;
          *((_DWORD *)a3 + 2) = v342;
          unsigned int v342 = 0;
          if (*((_DWORD *)a3 + 6) >= 0x41u && *v33)
          {
            MEMORY[0x1D25D9CB0](*v33, 0x1000C8000313F17);
            unsigned int v253 = v342;
            *((void *)a3 + 2) = v343;
            *((_DWORD *)a3 + 6) = v344;
            unsigned int v344 = 0;
            if (v253 >= 0x41 && v341) {
              MEMORY[0x1D25D9CB0](v341, 0x1000C8000313F17);
            }
          }
          else
          {
            *((void *)a3 + 2) = v343;
            *((_DWORD *)a3 + 6) = v344;
          }
          (*(void (**)(uint64_t, uint64_t, llvm::MDNode *, uint64_t, void))(*(void *)v9 + 48))(v9, v46, a3, a4, (a5 + 1));
          unsigned int v172 = *((_DWORD *)a3 + 2);
          if (v172 < v289)
          {
            sub_1CB9F87DC((uint64_t *)a3, v289, (uint64_t)&v341);
          }
          else if (v172 > v289)
          {
            uint64_t v173 = a3;
            if (v172 >= 0x41) {
              uint64_t v173 = *(llvm::MDNode **)a3;
            }
            unint64_t v174 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v289;
            unint64_t v175 = v174;
            if (!v289) {
              unint64_t v175 = 0;
            }
            uint64_t v176 = *(void *)v173;
            int64_t v177 = v33;
            if (*((_DWORD *)a3 + 6) >= 0x41u) {
              int64_t v177 = (void *)*v33;
            }
            if (!v289) {
              unint64_t v174 = 0;
            }
            unint64_t v178 = v174 & *v177;
            unsigned int v342 = v289;
            unint64_t v341 = v175 & v176;
            unsigned int v344 = v289;
            unint64_t v343 = v178;
          }
          else
          {
            unsigned int v342 = *((_DWORD *)a3 + 2);
            if (v172 > 0x40) {
              operator new[]();
            }
            unint64_t v341 = *(void *)a3;
            unsigned int v344 = *((_DWORD *)a3 + 6);
            if (v344 > 0x40) {
              operator new[]();
            }
            unint64_t v343 = *v33;
          }
          if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
            MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
          }
          *(void *)a3 = v341;
          *((_DWORD *)a3 + 2) = v342;
          unsigned int v342 = 0;
          if (*((_DWORD *)a3 + 6) >= 0x41u && *v33)
          {
            MEMORY[0x1D25D9CB0](*v33, 0x1000C8000313F17);
            unsigned int v254 = v342;
            *((void *)a3 + 2) = v343;
            *((_DWORD *)a3 + 6) = v344;
            unsigned int v344 = 0;
            if (v254 >= 0x41 && v341) {
              MEMORY[0x1D25D9CB0](v341, 0x1000C8000313F17);
            }
          }
          else
          {
            *((void *)a3 + 2) = v343;
            *((_DWORD *)a3 + 6) = v344;
          }
          if (v152 >= v289) {
            goto LABEL_423;
          }
          unsigned int v43 = *((_DWORD *)a3 + 2);
          if (v152 == v43) {
            goto LABEL_423;
          }
          if (v152 <= 0x3F && v43 <= 0x40)
          {
            unint64_t v179 = 0xFFFFFFFFFFFFFFFFLL >> (v152 - v43) << v152;
            goto LABEL_418;
          }
          v252 = a3;
          unsigned int v210 = v152;
          goto LABEL_495;
        default:
          if (v15 && v15 != 19) {
            goto LABEL_422;
          }
LABEL_80:
          unsigned int v54 = v18;
          uint64_t v56 = v295;
          uint64_t v55 = v20;
          if (v18)
          {
            unint64_t v57 = 0xFFFFFFFFFFFFFFFFLL >> ~(v18 + 63);
            *((void *)a3 + 2) = v57;
          }
          else
          {
            unint64_t v57 = 0;
            *((void *)a3 + 2) = 0;
          }
          *((_DWORD *)a3 + 6) = v18;
          if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3)
          {
            MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
            unsigned int v54 = v289;
            uint64_t v56 = v295;
            uint64_t v55 = v297;
          }
          *(void *)a3 = v57;
          *((_DWORD *)a3 + 2) = v54;
          if (*v55)
          {
            int v58 = 16;
            __int16 v59 = v56;
          }
          else
          {
            int v58 = *(_DWORD *)(v9 + 128);
            if (!v58)
            {
              uint64_t v188 = 0;
              goto LABEL_350;
            }
            __int16 v59 = *(char **)(v9 + 120);
          }
          int v180 = v58 - 1;
          unsigned int v181 = v180 & (37 * a2);
          uint64_t v182 = &v59[40 * v181];
          int v183 = *(_DWORD *)v182;
          if (*(_DWORD *)v182 == a2) {
            goto LABEL_351;
          }
          uint64_t v184 = 0;
          int v185 = 1;
          while (v183 != -1)
          {
            if (v184) {
              BOOL v186 = 0;
            }
            else {
              BOOL v186 = v183 == -2;
            }
            if (v186) {
              uint64_t v184 = v182;
            }
            unsigned int v187 = v181 + v185++;
            unsigned int v181 = v187 & v180;
            uint64_t v182 = &v59[40 * v181];
            int v183 = *(_DWORD *)v182;
            if (*(_DWORD *)v182 == a2)
            {
LABEL_351:
              if (*((_DWORD *)v182 + 4) >= 0x41u)
              {
                uint64_t v255 = *((void *)v182 + 1);
                if (v255)
                {
                  MEMORY[0x1D25D9CB0](v255, 0x1000C8000313F17);
                  unsigned int v54 = v289;
                }
              }
              *((void *)v182 + 1) = 0;
              *((_DWORD *)v182 + 4) = v54;
              if (*((_DWORD *)v182 + 8) >= 0x41u)
              {
                uint64_t v256 = *((void *)v182 + 3);
                if (v256)
                {
                  MEMORY[0x1D25D9CB0](v256, 0x1000C8000313F17);
                  unsigned int v54 = v289;
                }
              }
              *((void *)v182 + 3) = 0;
              *((_DWORD *)v182 + 8) = v54;
              if (*(_DWORD *)(v14 + 40) < 2u) {
                goto LABEL_423;
              }
              unsigned int v189 = 1;
              while (2)
              {
                uint64_t v190 = *(void *)(v14 + 32);
                unsigned int v191 = v189;
                int v192 = *(_DWORD *)(v190 + 32 * v189 + 4);
                if ((v192 & 0x80000000) == 0
                  || (*(_DWORD *)(v190 + 32 * v189) & 0xFFF00) != 0
                  || (uint64_t v193 = *(void *)(v9 + 80),
                      (v192 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v193 + 432))
                  || (*(void *)(*(void *)(v193 + 424) + 8 * (v192 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) == 0)
                {
                  unsigned int v204 = v289;
                  if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3)
                  {
                    MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
                    unsigned int v204 = v289;
                  }
                  *(void *)a3 = 0;
                  *((_DWORD *)a3 + 2) = v204;
                  if (*((_DWORD *)a3 + 6) > 0x40u)
                  {
                    if (*__src) {
                      MEMORY[0x1D25D9CB0](*__src, 0x1000C8000313F17);
                    }
                    *((void *)a3 + 2) = 0;
                    *((_DWORD *)a3 + 6) = v289;
                  }
                  else
                  {
                    *((void *)a3 + 2) = 0;
                    *((_DWORD *)a3 + 6) = v204;
                  }
                  goto LABEL_423;
                }
                (*(void (**)(uint64_t))(*(void *)v9 + 48))(v9);
                unsigned int v194 = *((_DWORD *)a3 + 2);
                if (v194 > 0x40) {
                  operator new[]();
                }
                unint64_t v195 = *(void *)&v336 & *(void *)a3;
                unsigned int v196 = *((_DWORD *)a3 + 6);
                if (v196 > 0x40) {
                  operator new[]();
                }
                unint64_t v197 = v338 & (unint64_t)*__src;
                if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
                  MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
                }
                *(void *)a3 = v195;
                *((_DWORD *)a3 + 2) = v194;
                if (*((_DWORD *)a3 + 6) >= 0x41u && *__src) {
                  MEMORY[0x1D25D9CB0](*__src, 0x1000C8000313F17);
                }
                *((void *)a3 + 2) = v197;
                *((_DWORD *)a3 + 6) = v196;
                if (!v197)
                {
                  uint64_t v198 = *((unsigned int *)a3 + 2);
                  uint64_t v199 = *(void **)a3;
                  if (v198 < 0x41)
                  {
LABEL_372:
                    if (!v199) {
                      goto LABEL_423;
                    }
                  }
                  else
                  {
                    int v200 = 0;
                    int64_t v201 = (unint64_t)(v198 + 63) >> 6;
                    do
                    {
                      BOOL v37 = v201-- < 1;
                      if (v37) {
                        break;
                      }
                      unint64_t v202 = v199[v201];
                      v200 += __clz(v202);
                    }
                    while (!v202);
                    int v203 = v198 | 0xFFFFFFC0;
                    if ((v198 & 0x3F) == 0) {
                      int v203 = 0;
                    }
                    if ((v198 - v200 - v203) <= 0x40)
                    {
                      uint64_t v199 = (void *)*v199;
                      goto LABEL_372;
                    }
                  }
                }
                unsigned int v189 = v191 + 2;
                if (v191 + 2 >= *(_DWORD *)(v14 + 40)) {
                  goto LABEL_423;
                }
                continue;
              }
            }
          }
          if (v184) {
            uint64_t v188 = v184;
          }
          else {
            uint64_t v188 = v182;
          }
          uint64_t v55 = v297;
LABEL_350:
          uint64_t v182 = (char *)sub_1CC6E3C7C((uint64_t)v55, (int *)&v340, v188);
          *(_DWORD *)uint64_t v182 = a2;
          *((void *)v182 + 3) = 0;
          *((void *)v182 + 4) = 0;
          *((void *)v182 + 1) = 0;
          *((void *)v182 + 2) = 0;
          *((_DWORD *)v182 + 4) = 1;
          *((_DWORD *)v182 + 8) = 1;
          unsigned int v54 = v289;
          goto LABEL_351;
      }
    }
    int v35 = 0;
    int64_t v36 = (unint64_t)(v34 + 63) >> 6;
    do
    {
      BOOL v37 = v36-- < 1;
      if (v37) {
        break;
      }
      unint64_t v38 = *(void *)(*(void *)a4 + 8 * v36);
      v35 += __clz(v38);
    }
    while (!v38);
    int v39 = v34 | 0xFFFFFFC0;
    if ((v34 & 0x3F) == 0) {
      int v39 = 0;
    }
    if (v35 + v39 != v34) {
      goto LABEL_50;
    }
  }
  return result;
}

void sub_1CC6E33F0(uint64_t a1, unsigned int a2, llvm::KnownBits *this, int8x8_t *a4, uint64_t a5)
{
  if (a2 >= 0x41) {
    operator new[]();
  }
  unsigned int v9 = *(_DWORD *)(a5 + 8);
  unsigned int v32 = v9;
  if (v9 > 0x40) {
    operator new[]();
  }
  unint64_t v10 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
  if (!v9) {
    unint64_t v10 = 0;
  }
  unsigned int v11 = a2;
  unsigned int v12 = a2;
  if ((v10 & ~*(void *)a5) <= a2) {
    unsigned int v12 = v10 & ~*(_DWORD *)a5;
  }
  unsigned int v32 = a2;
  unint64_t v13 = 0;
  uint64_t v31 = 0;
  if (v12 != a2)
  {
    if (v12 > 0x3F) {
      llvm::APInt::setBitsSlowCase(&v31, v12, a2);
    }
    else {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> (v12 - a2) << v12;
    }
  }
  if (*(_DWORD *)(a5 + 24) >= 0x41u) {
    operator new[]();
  }
  if (*(void *)(a5 + 16) <= (unint64_t)a2) {
    unsigned int v11 = *(void *)(a5 + 16);
  }
  unsigned int v32 = a2;
  unint64_t v14 = 0;
  uint64_t v31 = 0;
  if (v11)
  {
    if (v11 > 0x40) {
      llvm::APInt::setBitsSlowCase(&v31, 0, v11);
    }
    else {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    }
  }
  llvm::KnownBits::lshr(this, a4, (uint64_t)&v27);
  unsigned int v15 = v28;
  if (v28 > 0x40)
  {
    uint64_t v18 = (void *)v27;
    unint64_t v19 = ((unint64_t)v28 + 63) >> 6;
    uint64_t v20 = (uint64_t *)v13;
    do
    {
      uint64_t v21 = *v20++;
      *v18++ |= v21;
      --v19;
    }
    while (v19);
  }
  else
  {
    v27 |= v13;
  }
  unsigned int v16 = v30;
  if (v30 > 0x40)
  {
    unint64_t v22 = (void *)v29;
    unint64_t v23 = ((unint64_t)v30 + 63) >> 6;
    unsigned int v24 = (uint64_t *)v14;
    do
    {
      uint64_t v25 = *v24++;
      *v22++ &= v25;
      --v23;
    }
    while (v23);
    unint64_t v17 = v29;
  }
  else
  {
    unint64_t v17 = v29 & v14;
    v29 &= v14;
  }
  *(_DWORD *)(a1 + 8) = v15;
  *(void *)a1 = v27;
  *(_DWORD *)(a1 + 24) = v16;
  *(void *)(a1 + 16) = v17;
  unsigned int v28 = 0;
  unsigned int v30 = 0;
}

uint64_t sub_1CC6E3978()
{
  return 0;
}

uint64_t sub_1CC6E3980(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 248);
  *(void *)(a1 + 248) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1CC6E39BC(uint64_t a1)
{
  sub_1CB9FB5B0(a1);

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CC6E39F4(void *result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  if (*(_DWORD *)result)
  {
    uint64_t v3 = (char *)(result + 1);
    uint64_t v4 = 16;
  }
  else
  {
    uint64_t v4 = *((unsigned int *)result + 4);
    if (!v4) {
      goto LABEL_13;
    }
    uint64_t v3 = (char *)result[1];
  }
  uint64_t v5 = 40 * v4;
  uint64_t v6 = v3 + 16;
  do
  {
    if (*((_DWORD *)v6 - 4) <= 0xFFFFFFFD)
    {
      if (*((_DWORD *)v6 + 4) >= 0x41u)
      {
        uint64_t result = (void *)*((void *)v6 + 1);
        if (result)
        {
          unsigned int v17 = v2;
          unsigned int v15 = v6;
          uint64_t result = (void *)MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          uint64_t v6 = v15;
          unsigned int v2 = v17;
        }
      }
      if (*(_DWORD *)v6 >= 0x41u)
      {
        uint64_t result = (void *)*((void *)v6 - 1);
        if (result)
        {
          unsigned int v16 = v2;
          unint64_t v14 = v6;
          uint64_t result = (void *)MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          uint64_t v6 = v14;
          unsigned int v2 = v16;
        }
      }
    }
    v6 += 40;
    v5 -= 40;
  }
  while (v5);
LABEL_13:
  unsigned int v7 = __clz((v2 >> 1) - 1);
  if (v7 == 28) {
    unsigned int v8 = 64;
  }
  else {
    unsigned int v8 = 1 << (33 - v7);
  }
  if (v2 >= 2) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  if ((*(_DWORD *)v1 & 1) != 0 && v9 < 0x11)
  {
    unint64_t v13 = v1 + 81;
    *uint64_t v1 = 1;
    unsigned int v12 = v1 + 1;
  }
  else
  {
    if (*(_DWORD *)v1) {
      goto LABEL_24;
    }
    if (v9 != *((_DWORD *)v1 + 4))
    {
      MEMORY[0x1D25D9CD0](v1[1], 8);
LABEL_24:
      if (v9 > 0x10)
      {
        *(_DWORD *)v1 &= ~1u;
        uint64_t result = operator new(40 * v9, (std::align_val_t)8uLL);
        v1[1] = result;
        v1[2] = v9;
        int v11 = *(_DWORD *)v1;
        *uint64_t v1 = *(_DWORD *)v1 & 1;
        if ((v11 & 1) == 0)
        {
          unint64_t v10 = &result[5 * v9];
          do
          {
LABEL_27:
            *(_DWORD *)uint64_t result = -1;
            result += 5;
          }
          while (result != v10);
          return result;
        }
      }
      else
      {
        *uint64_t v1 = 1;
      }
      uint64_t result = v1 + 1;
      unint64_t v10 = v1 + 81;
      goto LABEL_27;
    }
    *uint64_t v1 = 0;
    if (!v9) {
      return result;
    }
    unsigned int v12 = (_DWORD *)v1[1];
    unint64_t v13 = &v12[10 * v9];
  }
  do
  {
    *unsigned int v12 = -1;
    v12 += 10;
  }
  while (v12 != v13);
  return result;
}

uint64_t sub_1CC6E3BE0(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = result + 8;
  if (*(unsigned char *)result)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      goto LABEL_9;
    }
    uint64_t v3 = *(void *)(result + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & (37 * a2);
  unsigned int v7 = (_DWORD *)(v3 + 40 * v6);
  int v8 = *v7;
  if (*v7 != a2)
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -1)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -2;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      unsigned int v7 = (_DWORD *)(v3 + 40 * (v12 & v5));
      int v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_9;
      }
    }
    if (v9) {
      unsigned int v7 = v9;
    }
  }
LABEL_9:
  *a3 = v7;
  return result;
}

_DWORD *sub_1CC6E3C7C(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5 = *(_DWORD *)a1;
  int v6 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v7 = 16;
  }
  else {
    unsigned int v7 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CC6E3DF8(a1, 2 * v7);
    uint64_t v10 = a1 + 8;
    int v5 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v11 = 16;
    }
    else
    {
      int v11 = *(_DWORD *)(a1 + 16);
      if (!v11)
      {
        int v8 = 0;
        a3 = 0;
        goto LABEL_7;
      }
      uint64_t v10 = *(void *)(a1 + 8);
    }
    int v8 = *(_DWORD *)a1 & 1;
    int v12 = v11 - 1;
    unsigned int v13 = (37 * *a2) & v12;
    a3 = (_DWORD *)(v10 + 40 * v13);
    int v14 = *a3;
    if (*a2 != *a3)
    {
      unsigned int v15 = 0;
      int v16 = 1;
      while (v14 != -1)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v14 == -2;
        }
        if (v17) {
          unsigned int v15 = a3;
        }
        unsigned int v18 = v13 + v16++;
        unsigned int v13 = v18 & v12;
        a3 = (_DWORD *)(v10 + 40 * v13);
        int v14 = *a3;
        if (*a2 == *a3) {
          goto LABEL_7;
        }
      }
      if (v15) {
        a3 = v15;
      }
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 4) <= v7 >> 3)
    {
      sub_1CC6E3DF8(a1, v7);
      unint64_t v19 = 0;
      sub_1CC6E3BE0(a1, *a2, &v19);
      a3 = v19;
      int v5 = *(_DWORD *)a1;
    }
    int v8 = v5 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v5 & 0xFFFFFFFE | v8) + 2;
  if (*a3 != -1) {
    --*(_DWORD *)(a1 + 4);
  }
  return a3;
}

uint64_t sub_1CC6E3DF8(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x11)
  {
    unint64_t v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    int v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40) {
      unsigned int v2 = v6 + 1;
    }
    else {
      unsigned int v2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v12 = *(int **)(a1 + 8);
    int v13 = *(_DWORD *)(a1 + 16);
    if (v2 <= 0x10)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      *(void *)(a1 + 8) = operator new(40 * v2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v2;
    }
    sub_1CC6E3FF4(a1, v12, &v12[10 * v13]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v7 = 0;
  int v8 = v15;
  do
  {
    uint64_t v9 = a1 + v7;
    unsigned int v10 = *(_DWORD *)(a1 + v7 + 8);
    if (v10 <= 0xFFFFFFFD)
    {
      *int v8 = v10;
      v8[4] = *(_DWORD *)(v9 + 24);
      *((void *)v8 + 1) = *(void *)(v9 + 16);
      *(_DWORD *)(v9 + 24) = 0;
      v8[8] = *(_DWORD *)(v9 + 40);
      *((void *)v8 + 3) = *(void *)(v9 + 32);
      *(_DWORD *)(v9 + 40) = 0;
      v8 += 10;
      if (*(_DWORD *)(v9 + 24) >= 0x41u)
      {
        uint64_t v14 = *(void *)(v9 + 16);
        if (v14) {
          MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
        }
      }
    }
    v7 += 40;
  }
  while (v7 != 640);
  if (v2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    *(void *)(a1 + 8) = operator new(40 * v2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v2;
  }
  return sub_1CC6E3FF4(a1, v15, v8);
}

uint64_t sub_1CC6E3FF4(uint64_t result, int *a2, int *a3)
{
  unint64_t v4 = a2;
  uint64_t v5 = result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  uint64_t v7 = result + 8;
  if (v6)
  {
    unsigned int v10 = (_DWORD *)(result + 648);
    uint64_t v9 = (_DWORD *)(result + 8);
  }
  else
  {
    int v8 = *(_DWORD *)(result + 16);
    if (!v8) {
      goto LABEL_5;
    }
    uint64_t v9 = *(_DWORD **)(result + 8);
    unsigned int v10 = &v9[10 * v8];
  }
  do
  {
    _DWORD *v9 = -1;
    v9 += 10;
  }
  while (v9 != v10);
LABEL_5:
  if (a2 != a3)
  {
    do
    {
      int v11 = *v4;
      if (*v4 <= 0xFFFFFFFD)
      {
        if (*(unsigned char *)v5)
        {
          int v13 = 16;
          uint64_t v12 = v7;
        }
        else
        {
          uint64_t v12 = *(void *)(v5 + 8);
          int v13 = *(_DWORD *)(v5 + 16);
        }
        int v14 = v13 - 1;
        unsigned int v15 = (v13 - 1) & (37 * v11);
        uint64_t v16 = (int *)(v12 + 40 * v15);
        int v17 = *v16;
        if (v11 != *v16)
        {
          unsigned int v18 = 0;
          int v19 = 1;
          while (v17 != -1)
          {
            if (v18) {
              BOOL v20 = 0;
            }
            else {
              BOOL v20 = v17 == -2;
            }
            if (v20) {
              unsigned int v18 = v16;
            }
            unsigned int v21 = v15 + v19++;
            unsigned int v15 = v21 & v14;
            uint64_t v16 = (int *)(v12 + 40 * (v21 & v14));
            int v17 = *v16;
            if (v11 == *v16) {
              goto LABEL_14;
            }
          }
          if (v18) {
            uint64_t v16 = v18;
          }
        }
LABEL_14:
        int *v16 = v11;
        v16[4] = v4[4];
        *((void *)v16 + 1) = *((void *)v4 + 1);
        v4[4] = 0;
        v16[8] = v4[8];
        *((void *)v16 + 3) = *((void *)v4 + 3);
        v4[8] = 0;
        *(_DWORD *)v5 += 2;
        if (v4[8] >= 0x41)
        {
          uint64_t result = *((void *)v4 + 3);
          if (result) {
            uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          }
        }
        if (v4[4] >= 0x41)
        {
          uint64_t result = *((void *)v4 + 1);
          if (result) {
            uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          }
        }
      }
      v4 += 10;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_1CC6E41B4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v4 = *(void *)(a1 + 40) + 48;
  *a4 = 0;
  if (v4 == a3) {
    return 1;
  }
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) + 56);
  if (v5 == a2 || v5 == a3) {
    return v5 == a2;
  }
  for (unsigned int i = 0; i <= dword_1EBD06EA0; ++i)
  {
    if (!v5 || (*(unsigned char *)v5 & 4) == 0)
    {
      while ((*(_WORD *)(v5 + 44) & 8) != 0)
        uint64_t v5 = *(void *)(v5 + 8);
    }
    uint64_t v5 = *(void *)(v5 + 8);
    if (v5 == a2 || v5 == a3) {
      return v5 == a2;
    }
  }
  uint64_t result = 0;
  *a4 = 1;
  return result;
}

uint64_t sub_1CC6E4244(uint64_t a1, const void **a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t result = sub_1CC6DD97C(*(int32x2_t **)(a1 + 64), a2, v4, a3);
  int v6 = (unint64_t *)result;
  if (result)
  {
    uint64_t v7 = *(unint64_t **)(a1 + 48);
    char v10 = 0;
    if ((unint64_t *)result == v7)
    {
      uint64_t v8 = result;
      if ((*(unsigned char *)result & 4) == 0)
      {
        uint64_t v8 = result;
        if ((*(_WORD *)(result + 44) & 8) != 0)
        {
          uint64_t v8 = result;
          do
            uint64_t v8 = *(void *)(v8 + 8);
          while ((*(_WORD *)(v8 + 44) & 8) != 0);
        }
      }
      uint64_t v9 = *(void *)(v8 + 8);
      *(void *)(a1 + 40) = v4;
      *(void *)(a1 + 48) = v9;
    }
    else if ((sub_1CC6E41B4(a1, result, (uint64_t)v7, &v10) & 1) != 0 || v10)
    {
      if (v10) {
        return 0;
      }
    }
    else
    {
      sub_1CB9173F0(v4, v7, v4, v6);
    }
    return *(void *)(a1 + 8);
  }
  return result;
}

void *sub_1CC6E4324(void *result, int a2, int *a3, uint64_t a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v13 = result[5];
  uint64_t v14 = *a8;
  unsigned int v15 = *(_DWORD *)(*a8 + 8);
  if (v15 >= *(_DWORD *)(*a8 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)v14 + 4 * v15) = v13;
  unsigned int v16 = *(_DWORD *)(v14 + 12);
  unsigned int v17 = *(_DWORD *)(v14 + 8) + 1;
  *(_DWORD *)(v14 + 8) = v17;
  if (v17 >= v16) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)v14 + 4 * v17) = HIDWORD(v13);
  ++*(_DWORD *)(v14 + 8);
  uint64_t v18 = *a8;
  unsigned int v19 = *(_DWORD *)(*a8 + 8);
  if (v19 >= *(_DWORD *)(*a8 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)v18 + 4 * v19) = a2;
  ++*(_DWORD *)(v18 + 8);
  if (a4)
  {
    uint64_t v20 = 16 * a4;
    do
    {
      int v21 = a3[2];
      if (v21 == 1)
      {
        uint64_t result = sub_1CC6DE8E0(a8, *a3);
      }
      else if (v21 == 2)
      {
        uint64_t result = sub_1CD612C58(a8, *(void *)a3);
      }
      else
      {
        uint64_t v22 = *(void *)a3;
        uint64_t v23 = *a8;
        unint64_t v24 = *(unsigned int *)(*a8 + 8);
        if (v24 >= *(unsigned int *)(*a8 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)v23 + 4 * v24) = v22 & 0xFFFFFFFA | (__rbit32(v22) >> 29) & 0xFFFFFFFD;
        unsigned int v25 = *(_DWORD *)(v23 + 12);
        unsigned int v26 = *(_DWORD *)(v23 + 8) + 1;
        *(_DWORD *)(v23 + 8) = v26;
        if (v26 >= v25) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)v23 + 4 * v26) = HIDWORD(v22);
        ++*(_DWORD *)(v23 + 8);
      }
      a3 += 4;
      v20 -= 16;
    }
    while (v20);
  }
  if (a6)
  {
    for (uint64_t i = 24 * a6; i; i -= 24)
    {
      unsigned int v28 = a5[4];
      if (v28 == 1)
      {
        unint64_t v29 = (int *)(*(void *)(*((void *)a5 + 1) + 32) + 4);
      }
      else
      {
        if (v28 == 2)
        {
          uint64_t v33 = *a5;
LABEL_34:
          uint64_t result = sub_1CD612C58(a8, v33);
          goto LABEL_20;
        }
        unint64_t v29 = (int *)a5;
        if (v28 == 3)
        {
          uint64_t v33 = *(void *)a5;
          goto LABEL_34;
        }
      }
      int v30 = *v29;
      uint64_t v35 = 0;
      v34[0] = 0;
      v34[1] = v30;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t result = sub_1CC6DE6E4(a8, (uint64_t)v34);
LABEL_20:
      a5 += 6;
    }
  }
  if ((a7 & 0xFF00000000) != 0 && a7)
  {
    uint64_t v31 = *a8;
    unsigned int v32 = *(_DWORD *)(v31 + 8);
    if (v32 >= *(_DWORD *)(v31 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)v31 + 4 * v32) = a7;
    ++*(_DWORD *)(v31 + 8);
  }
  return result;
}

uint64_t sub_1CC6E4654(uint64_t a1, _DWORD *a2, const llvm::DILocation *a3, void *a4)
{
  if (a3 != (const llvm::DILocation *)1 || a2[2] != 1)
  {
    uint64_t v5 = *(const llvm::DILocation **)(a1 + 32);
    if (!v5) {
      return *a4;
    }
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = a4[1];
    if (v7)
    {
      uint64_t v24 = *(void *)(a1 + 56);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, v8);
      uint64_t v19 = a4[1];
      int v21 = *(llvm::DILocation **)(v19 + 56);
      uint64_t v20 = (unsigned __int8 **)(v19 + 56);
      MergedLocation = (unsigned __int8 *)llvm::DILocation::getMergedLocation(v21, *(const llvm::DILocation **)(a1 + 32), v22);
      unsigned int v25 = MergedLocation;
      if (MergedLocation) {
        llvm::MetadataTracking::track((uint64_t)&v25, MergedLocation, 2);
      }
      sub_1CB8F69CC(v20, &v25);
      if (v25) {
        llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
      }
      (*(void (**)(uint64_t, void))(*(void *)v24 + 40))(v24, a4[1]);
      return *a4;
    }
    char v10 = *(llvm::DILocation **)(v8 + 56);
    uint64_t v9 = (unsigned __int8 **)(v8 + 56);
    int v11 = (unsigned __int8 *)llvm::DILocation::getMergedLocation(v10, v5, a3);
    unsigned int v25 = v11;
    if (v11) {
      llvm::MetadataTracking::track((uint64_t)&v25, v11, 2);
    }
    if (&v25 == v9)
    {
      if (v25) {
        llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
      }
      return *a4;
    }
    uint64_t v12 = *v9;
    if (*v9)
    {
      int v14 = *v12;
      if ((v14 - 4) > 0x1E)
      {
        if ((v14 - 3) >= 0xFFFFFFFE) {
          unsigned int v17 = *v9;
        }
        else {
          unsigned int v17 = 0;
        }
        if ((v14 - 3) < 0xFFFFFFFE)
        {
          if (v14 == 3) {
            *((void *)v12 + 1) = 0;
          }
          goto LABEL_11;
        }
        unint64_t v16 = (unint64_t)(v17 + 8);
      }
      else
      {
        if ((v12[1] & 0x7F) != 2 && !*((_DWORD *)v12 + 3)) {
          goto LABEL_11;
        }
        uint64_t v15 = *((void *)v12 + 2);
        if ((v15 & 4) == 0) {
          goto LABEL_11;
        }
        unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFF8;
        if (!v16) {
          goto LABEL_11;
        }
      }
      v26[0] = v9;
      sub_1CC5FA668(v16 + 16, v26);
    }
LABEL_11:
    uint64_t v13 = v25;
    _DWORD *v9 = v25;
    if (v13) {
      llvm::MetadataTracking::retrack((uint64_t)&v25, v13, (uint64_t)v9);
    }
    return *a4;
  }
  v28[0] = *a2;
  v28[2] = 1;
  LODWORD(v26[0]) = *(_DWORD *)(*(void *)(a4[1] + 32) + 4);
  int v27 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, void *, uint64_t, void))(*(void *)a1 + 32))(a1, 19, v28, 1, v26, 1, 0);
}

uint64_t sub_1CC6E489C(uint64_t a1, uint64_t *a2, unint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = a6;
  int v11 = a3;
  uint64_t v13 = a1;
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  if ((int)a2 > 162)
  {
    switch((int)a2)
    {
      case 163:
      case 164:
      case 165:
      case 168:
      case 169:
      case 185:
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
      case 192:
        int v14 = (unsigned int *)a5;
        if (*(_DWORD *)(a5 + 16) == 1) {
          int v14 = (unsigned int *)(*(void *)(*(void *)(a5 + 8) + 32) + 4);
        }
        unsigned int v15 = *v14;
        if (*(_DWORD *)(a5 + 40) == 1) {
          unint64_t v16 = (unsigned int *)(*(void *)(*(void *)(a5 + 32) + 32) + 4);
        }
        else {
          unint64_t v16 = (unsigned int *)(a5 + 24);
        }
        sub_1CC73E52C(a2, v15, *v16, *(void *)(a1 + 24), (uint64_t)&v108);
        goto LABEL_15;
      case 182:
      case 183:
        uint64_t v44 = *(void *)(a1 + 24);
        int v45 = *((_DWORD *)a3 + 2);
        if (v45)
        {
          if (v45 == 2
            || (*(_DWORD *)a3 & 0x80000000) == 0
            || (uint64_t v46 = *(_DWORD *)a3 & 0x7FFFFFFF, v46 >= *(_DWORD *)(v44 + 432)))
          {
            unint64_t v49 = 0;
            goto LABEL_95;
          }
          unint64_t v47 = (unint64_t *)(*(void *)(v44 + 424) + 8 * v46);
        }
        else
        {
          unint64_t v47 = a3;
        }
        unint64_t v49 = *v47;
LABEL_95:
        uint64_t v71 = (unsigned int *)a5;
        if (*(_DWORD *)(a5 + 16) == 1) {
          uint64_t v71 = (unsigned int *)(*(void *)(*(void *)(a5 + 8) + 32) + 4);
        }
        sub_1CC73ED5C((int)a2, v49, *v71, v44, (uint64_t)&v108);
LABEL_15:
        if (!v111) {
          goto LABEL_72;
        }
        uint64_t v20 = llvm::ConstantFP::get(****(llvm::ConstantFP *****)(v13 + 8), (llvm::LLVMContext *)&v108, v19);
        uint64_t v21 = (*(uint64_t (**)(uint64_t, unint64_t *, const llvm::detail::DoubleAPFloat *))(*(void *)v13 + 24))(v13, v11, v20);
        if (!v111) {
          return v21;
        }
        if ((_UNKNOWN *)v109 == &unk_1CFB2E344)
        {
          sub_1CB845718(v110);
          return v21;
        }
        if ((*(_DWORD *)(v109 + 8) - 64) > 0xFFFFFF7F) {
          return v21;
        }
        uint64_t v22 = (void *)v110[0];
        if (!v110[0]) {
          return v21;
        }
        goto LABEL_50;
      case 193:
      case 195:
      case 196:
      case 197:
      case 198:
        goto LABEL_10;
      case 209:
        uint64_t v50 = (unsigned int *)a5;
        if (*(_DWORD *)(a5 + 16) == 1) {
          uint64_t v50 = (unsigned int *)(*(void *)(*(void *)(a5 + 8) + 32) + 4);
        }
        sub_1CD631DF8(*v50, *(void *)(a1 + 24), (uint64_t)&v104);
        if (!v107) {
          goto LABEL_72;
        }
        int v51 = v105;
        if (v105 == 1)
        {
          unint64_t v52 = *(unsigned int *)v104;
          int v53 = *((_DWORD *)v11 + 2);
          unsigned int v54 = v11;
          if (v53)
          {
            if (v53 != 1
              || (*(_DWORD *)v11 & 0x80000000) == 0
              || (uint64_t v97 = *(void *)(v13 + 24),
                  uint64_t v98 = *(_DWORD *)v11 & 0x7FFFFFFF,
                  v98 >= *(_DWORD *)(v97 + 432)))
            {
              unint64_t v55 = 0;
              goto LABEL_143;
            }
            unsigned int v54 = (unint64_t *)(*(void *)(v97 + 424) + 8 * v98);
          }
          unint64_t v55 = *v54;
          if (v55)
          {
            unint64_t v56 = (v55 >> 3);
LABEL_71:
            unint64_t v57 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(v13 + 8), (llvm::LLVMContext *)v56);
            int v58 = llvm::ConstantInt::get(v57, v52, (const llvm::APInt *)1);
            uint64_t v21 = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)v13 + 16))(v13, v11, v58);
            goto LABEL_135;
          }
          if ((v55 & 4) != 0)
          {
            if ((v55 & 2) != 0) {
              unint64_t v56 = (unsigned __int16)(v55 >> 19);
            }
            else {
              unint64_t v56 = (v55 >> 19);
            }
            goto LABEL_71;
          }
LABEL_143:
          unint64_t v56 = (unsigned __int16)(v55 >> 3);
          goto LABEL_71;
        }
        uint64_t v101 = v103;
        uint64_t v102 = 0xC00000000;
        int v72 = *((_DWORD *)v11 + 2);
        if (v72)
        {
          if (v72 == 2
            || (uint64_t v73 = *(void *)(v13 + 24), (*(_DWORD *)v11 & 0x80000000) == 0)
            || (uint64_t v74 = *(_DWORD *)v11 & 0x7FFFFFFF, v74 >= *(_DWORD *)(v73 + 432)))
          {
            unint64_t v76 = 0;
            goto LABEL_106;
          }
          unint64_t v75 = (void **)(*(void *)(v73 + 424) + 8 * v74);
        }
        else
        {
          unint64_t v75 = (void **)v11;
        }
        unint64_t v76 = (unint64_t)*v75;
LABEL_106:
        if (v105)
        {
          uint64_t v77 = v104;
          char v78 = 3;
          if ((v76 & 1) == 0) {
            char v78 = 19;
          }
          unint64_t v79 = v76 >> v78;
          uint64_t v80 = (v76 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v79) | 2;
          unint64_t v81 = v76 & 0x8000000000000000 | (8 * v79) | 1;
          if ((v76 & 2) != 0) {
            unint64_t v81 = v80;
          }
          if ((v76 & 0xFFFFFFFFFFFFFFF9) != 0 && (v76 & 4) != 0) {
            unint64_t v82 = v81;
          }
          else {
            unint64_t v82 = v76;
          }
          uint64_t v83 = 0xFFFFLL;
          if ((v82 & 2) == 0) {
            uint64_t v83 = 0xFFFFFFFFLL;
          }
          uint64_t v84 = (llvm::LLVMContext *)(v83 & (v82 >> 19));
          uint64_t v85 = 4 * v105;
          do
          {
            unint64_t v86 = *(unsigned int *)v77;
            int v108 = (void *)v82;
            unint64_t v87 = (v82 >> 3);
            LODWORD(v109) = 0;
            if ((v82 & 1) == 0)
            {
              if ((v82 & 4) != 0) {
                unint64_t v87 = (unint64_t)v84;
              }
              else {
                unint64_t v87 = (unsigned __int16)(v82 >> 3);
              }
            }
            unsigned int v88 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(v13 + 8), (llvm::LLVMContext *)v87);
            unint64_t v89 = llvm::ConstantInt::get(v88, v86, (const llvm::APInt *)1);
            (*(void (**)(uint64_t, void **, void *))(*(void *)v13 + 16))(v13, &v108, v89);
            if (v102 >= HIDWORD(v102)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v101 + v102) = *(_DWORD *)(*(void *)(v90 + 32) + 4);
            uint64_t v91 = (v102 + 1);
            LODWORD(v102) = v102 + 1;
            uint64_t v77 = (void **)((char *)v77 + 4);
            v85 -= 4;
          }
          while (v85);
          int v92 = (int *)v101;
          int v108 = v110;
          uint64_t v109 = 0x800000000;
          if (v91 >= 9) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v91)
          {
            uint64_t v93 = 0;
            uint64_t v94 = 4 * v91;
            do
            {
              int v95 = *v92++;
              unint64_t v96 = &v110[v93];
              *(_DWORD *)unint64_t v96 = v95;
              *((_DWORD *)v96 + 4) = 0;
              v93 += 3;
              v94 -= 4;
            }
            while (v94);
            int v51 = v109;
          }
          else
          {
            int v51 = 0;
          }
        }
        else
        {
          LODWORD(v91) = 0;
          int v108 = v110;
          uint64_t v109 = 0x800000000;
        }
        LODWORD(v109) = v51 + v91;
        uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(*(void *)v13 + 32))(v13, 77, v11, 1);
        if (v108 != v110) {
          free(v108);
        }
        if (v101 != v103) {
          free(v101);
        }
LABEL_135:
        if (!v107) {
          return v21;
        }
        unint64_t v70 = v104;
        if (v104 == (void **)&v106) {
          return v21;
        }
        goto LABEL_92;
      default:
        goto LABEL_72;
    }
  }
  if (((a2 - 45) > 0x16 || ((1 << ((_BYTE)a2 - 45)) & 0x73C007) == 0)
    && (a2 - 127) >= 3)
  {
    if (a2 != 125) {
      goto LABEL_72;
    }
    int v48 = (unsigned int *)a5;
    if (*(_DWORD *)(a5 + 16) == 1) {
      int v48 = (unsigned int *)(*(void *)(*(void *)(a5 + 8) + 32) + 4);
    }
    sub_1CC73EB38(125, *v48, *(void *)(a5 + 24), *(void *)(a1 + 24), (uint64_t)&v108);
    goto LABEL_46;
  }
LABEL_10:
  uint64_t v17 = *(void *)(a1 + 24);
  if (*(_DWORD *)(a5 + 16) == 1)
  {
    int v18 = *(_DWORD *)(*(void *)(*(void *)(a5 + 8) + 32) + 4);
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_145;
    }
  }
  else
  {
    int v18 = *(_DWORD *)a5;
    if ((*(_DWORD *)a5 & 0x80000000) == 0) {
      goto LABEL_145;
    }
  }
  unsigned int v23 = v18 & 0x7FFFFFFF;
  if (v23 < *(_DWORD *)(v17 + 432))
  {
    unint64_t v24 = *(void *)(*(void *)(v17 + 424) + 8 * v23);
    goto LABEL_24;
  }
LABEL_145:
  unint64_t v24 = 0;
LABEL_24:
  if (a2 == 193)
  {
    uint64_t v25 = *(void *)(**(void **)(a1 + 8) + 40);
    char v26 = 35;
    if ((v24 & 4) == 0) {
      char v26 = 19;
    }
    int v27 = *(__int32 **)(v25 + 656);
    size_t v30 = *(unsigned int *)(v25 + 664);
    uint64_t v31 = wmemchr(v27, (v24 >> v26) & 0xFFFFFF, v30);
    if (v31) {
      unsigned int v32 = v31;
    }
    else {
      unsigned int v32 = &v27[v30];
    }
    BOOL v63 = v30 == v32 - v27;
    int v11 = a3;
    uint64_t v8 = a6;
    uint64_t v13 = a1;
    if (!v63) {
      goto LABEL_72;
    }
    uint64_t v33 = v24 & 4;
  }
  else
  {
    uint64_t v33 = v24 & 4;
  }
  if ((v24 & 0xFFFFFFFFFFFFFFF9) == 0 || !v33)
  {
    uint64_t v37 = (unsigned int *)a5;
    if (*(_DWORD *)(a5 + 16) == 1) {
      uint64_t v37 = (unsigned int *)(*(void *)(*(void *)(a5 + 8) + 32) + 4);
    }
    unsigned int v38 = *v37;
    if (*(_DWORD *)(a5 + 40) == 1) {
      int v39 = (unsigned int *)(*(void *)(*(void *)(a5 + 32) + 32) + 4);
    }
    else {
      int v39 = (unsigned int *)(a5 + 24);
    }
    sub_1CC73DA2C((int)a2, v38, *v39, *(void *)(v13 + 24), (uint64_t)&v108);
LABEL_46:
    if (LOBYTE(v110[0]))
    {
      uint64_t v41 = llvm::ConstantInt::get(****(llvm::ConstantInt *****)(v13 + 8), (llvm::LLVMContext *)&v108, v40);
      uint64_t v21 = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)v13 + 16))(v13, v11, v41);
      if (LOBYTE(v110[0]))
      {
        if (v109 >= 0x41)
        {
          uint64_t v22 = v108;
          if (v108) {
LABEL_50:
          }
            MEMORY[0x1D25D9CB0](v22, 0x1000C8000313F17);
        }
      }
      return v21;
    }
    goto LABEL_72;
  }
  uint64_t v34 = (unsigned int *)a5;
  if (*(_DWORD *)(a5 + 16) == 1) {
    uint64_t v34 = (unsigned int *)(*(void *)(*(void *)(a5 + 8) + 32) + 4);
  }
  unsigned int v35 = *v34;
  if (*(_DWORD *)(a5 + 40) == 1) {
    uint64_t v36 = (unsigned int *)(*(void *)(*(void *)(a5 + 32) + 32) + 4);
  }
  else {
    uint64_t v36 = (unsigned int *)(a5 + 24);
  }
  int v42 = sub_1CC73E808((int)a2, v35, *v36, *(void *)(v13 + 24), (llvm::ConstantInt *****)v13);
  if (v42)
  {
    LODWORD(v108) = v42;
    LODWORD(v110[0]) = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v13 + 32))(v13, 19, v11, 1, &v108, 1, 0);
  }
LABEL_72:
  if (a4 < 2)
  {
    BOOL v62 = 1;
  }
  else
  {
    uint64_t v59 = 16 * a4 - 16;
    uint64_t v60 = (int *)(v11 + 1);
    do
    {
      int v61 = *v60;
      v60 += 4;
      BOOL v62 = (v61 & 0xFFFFFFFD) == 0;
      BOOL v63 = (v61 & 0xFFFFFFFD) != 0 || v59 == 0;
      v59 -= 16;
    }
    while (!v63);
  }
  uint64_t v64 = *(void *)(v13 + 64);
  if (!v64
    || ((*(uint64_t (**)(void, uint64_t *))(**(void **)(v64 + 200) + 16))(*(void *)(v64 + 200), a2) & 1) == 0)
  {
    return sub_1CC739C54((void *)v13, a2, v11, a4, (int *)a5, v8, a7);
  }
  if (v62)
  {
    int v108 = v110;
    uint64_t v109 = 0x2000000000;
    uint64_t v65 = *(void *)(v13 + 24);
    uint64_t v104 = &v108;
    uint64_t v105 = v65;
    uint64_t v100 = 0;
    sub_1CC6E4324((void *)v13, (int)a2, (int *)v11, a4, (unsigned int *)a5, v8, a7, (uint64_t *)&v104);
    uint64_t v101 = (void *)sub_1CC6E4244(v13, (const void **)&v108, &v100);
    uint64_t v102 = v66;
    if (v66)
    {
      uint64_t v21 = sub_1CC6E4654(v13, v11, (const llvm::DILocation *)a4, &v101);
    }
    else
    {
      uint64_t v21 = sub_1CC739C54((void *)v13, a2, v11, a4, (int *)a5, v8, a7);
      sub_1CC6DD7E0(*(int32x2_t **)(v13 + 64), v69, v100);
    }
    unint64_t v70 = v108;
    if (v108 != v110) {
LABEL_92:
    }
      free(v70);
  }
  else
  {
    uint64_t v21 = sub_1CC739C54((void *)v13, a2, v11, a4, (int *)a5, v8, a7);
    sub_1CC6DDE18(*(int32x2_t **)(v13 + 64), v68);
  }
  return v21;
}

uint64_t sub_1CC6E53E8(void *a1, int *a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[8];
  if (v6
    && ((*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 200) + 16))(*(void *)(v6 + 200), 120) & 1) != 0)
  {
    uint64_t v7 = a1[3];
    int v8 = a2[2];
    uint64_t v9 = (unint64_t *)a2;
    if (v8)
    {
      if (v8 != 1) {
        goto LABEL_9;
      }
      if ((*a2 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      uint64_t v16 = *a2 & 0x7FFFFFFF;
      if (v16 >= *(_DWORD *)(v7 + 432)) {
        goto LABEL_9;
      }
      uint64_t v9 = (unint64_t *)(*(void *)(v7 + 424) + 8 * v16);
    }
    unint64_t v24 = *v9;
    if ((v24 & 0xFFFFFFFFFFFFFFF9) != 0 && (v24 & 4) != 0)
    {
      uint64_t v19 = sub_1CBA15978(&v24);
      LODWORD(v20) = 0;
      *(void *)&long long v27 = (*(uint64_t (**)(void *, uint64_t *, uint64_t))(*a1 + 16))(a1, &v19, a3);
      *((void *)&v27 + 1) = v17;
      LODWORD(v28) = 1;
      return sub_1CD62D79C(a1, (uint64_t)a2, &v27);
    }
LABEL_9:
    *(void *)&long long v27 = &v28;
    v23[0] = (uint64_t)&v27;
    v23[1] = v7;
    uint64_t v22 = 0;
    uint64_t v11 = a1[5];
    uint64_t v28 = v11;
    int v29 = 120;
    *((void *)&v27 + 1) = 0x2000000003;
    if (v8 == 1)
    {
      sub_1CC6DE8E0(v23, *a2);
    }
    else if (v8 == 2)
    {
      sub_1CD612C58(v23, *(void *)a2);
    }
    else
    {
      uint64_t v12 = HIDWORD(*(void *)a2);
      int v30 = *(void *)a2 & 0xFFFFFFFA | (__rbit32(*(void *)a2) >> 29) & 0xFFFFFFFD;
      int v31 = v12;
      DWORD2(v27) = 5;
    }
    LODWORD(v19) = 2;
    uint64_t v20 = 0;
    uint64_t v21 = a3;
    sub_1CC6DE6E4(v23, (uint64_t)&v19);
    uint64_t v19 = sub_1CC6E4244((uint64_t)a1, (const void **)&v27, &v22);
    uint64_t v20 = v13;
    if (v13)
    {
      uint64_t v25 = *(void *)a2;
      int v26 = a2[2];
      uint64_t v18 = sub_1CC6E4654((uint64_t)a1, &v25, (const llvm::DILocation *)1, &v19);
    }
    else
    {
      uint64_t v18 = sub_1CC736998((uint64_t)a1, (unint64_t *)a2, a3);
      sub_1CC6DD7E0((int32x2_t *)a1[8], v14, v22);
    }
    if ((uint64_t *)v27 != &v28) {
      free((void *)v27);
    }
    return v18;
  }

  return sub_1CC736998((uint64_t)a1, (unint64_t *)a2, a3);
}

uint64_t sub_1CC6E56C8(void *a1, int *a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[8];
  if (v6
    && ((*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 200) + 16))(*(void *)(v6 + 200), 121) & 1) != 0)
  {
    uint64_t v7 = a1[3];
    int v8 = a2[2];
    if (v8 == 1)
    {
      if ((*a2 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      uint64_t v9 = *a2 & 0x7FFFFFFF;
      if (v9 >= *(_DWORD *)(v7 + 432)) {
        goto LABEL_9;
      }
      char v10 = (int *)(*(void *)(v7 + 424) + 8 * v9);
    }
    else
    {
      char v10 = a2;
      if (v8) {
        goto LABEL_9;
      }
    }
    unint64_t v11 = *(void *)v10;
    unint64_t v24 = v11;
    if ((v11 & 0xFFFFFFFFFFFFFFF9) != 0 && (v11 & 4) != 0)
    {
      uint64_t v19 = sub_1CBA15978(&v24);
      LODWORD(v20) = 0;
      *(void *)&long long v27 = (*(uint64_t (**)(void *, uint64_t *, uint64_t))(*a1 + 24))(a1, &v19, a3);
      *((void *)&v27 + 1) = v18;
      LODWORD(v28) = 1;
      return sub_1CD62D79C(a1, (uint64_t)a2, &v27);
    }
LABEL_9:
    *(void *)&long long v27 = &v28;
    v23[0] = (uint64_t)&v27;
    v23[1] = v7;
    uint64_t v22 = 0;
    uint64_t v12 = a1[5];
    uint64_t v28 = v12;
    int v29 = 121;
    *((void *)&v27 + 1) = 0x2000000003;
    if (v8 == 1)
    {
      sub_1CC6DE8E0(v23, *a2);
    }
    else if (v8 == 2)
    {
      sub_1CD612C58(v23, *(void *)a2);
    }
    else
    {
      uint64_t v13 = HIDWORD(*(void *)a2);
      int v30 = *(void *)a2 & 0xFFFFFFFA | (__rbit32(*(void *)a2) >> 29) & 0xFFFFFFFD;
      int v31 = v13;
      DWORD2(v27) = 5;
    }
    LODWORD(v19) = 3;
    uint64_t v20 = 0;
    uint64_t v21 = a3;
    sub_1CC6DE6E4(v23, (uint64_t)&v19);
    uint64_t v19 = sub_1CC6E4244((uint64_t)a1, (const void **)&v27, &v22);
    uint64_t v20 = v14;
    if (v14)
    {
      uint64_t v25 = *(void *)a2;
      int v26 = a2[2];
      uint64_t v15 = sub_1CC6E4654((uint64_t)a1, &v25, (const llvm::DILocation *)1, &v19);
    }
    else
    {
      uint64_t v15 = sub_1CC736EF8((uint64_t)a1, (unint64_t *)a2, a3);
      sub_1CC6DD7E0((int32x2_t *)a1[8], v16, v22);
    }
    if ((uint64_t *)v27 != &v28) {
      free((void *)v27);
    }
    return v15;
  }

  return sub_1CC736EF8((uint64_t)a1, (unint64_t *)a2, a3);
}

void sub_1CC6E59A0(void *a1)
{
  *a1 = &unk_1F261CD58;
  uint64_t v1 = (unsigned __int8 *)a1[4];
  if (!v1) {
    goto LABEL_2;
  }
  int v2 = *v1;
  if ((v2 - 4) > 0x1E)
  {
    if ((v2 - 3) >= 0xFFFFFFFE) {
      uint64_t v5 = a1[4];
    }
    else {
      uint64_t v5 = 0;
    }
    if ((v2 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v4 = v5 + 8;
LABEL_16:
      uint64_t v6 = a1 + 4;
      sub_1CC5FA668(v4 + 16, &v6);
      goto LABEL_2;
    }
    if (v2 == 3) {
      *((void *)v1 + 1) = 0;
    }
  }
  else if ((v1[1] & 0x7F) == 2 || *((_DWORD *)v1 + 3))
  {
    uint64_t v3 = *((void *)v1 + 2);
    if ((v3 & 4) != 0)
    {
      unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (v4) {
        goto LABEL_16;
      }
    }
  }
LABEL_2:

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC6E5A88()
{
  *(void *)&long long v4 = "Max number of instructions to scan for CSEMIRBuilder inst dominance checks";
  *((void *)&v4 + 1) = 74;
  uint64_t v3 = &v2;
  int v1 = 1;
  int v2 = 10000;
  sub_1CD50BCD4((uint64_t)&unk_1EBD06E20, "csemib-dom-threshold", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBD06E20, &dword_1CB82C000);
}

uint64_t sub_1CC6E5B14(_DWORD *a1, uint64_t a2)
{
  int v17 = 48;
  uint64_t v3 = *(void *)(a2 + 24);
  if (!v3) {
    goto LABEL_38;
  }
  if ((*(unsigned int (**)(uint64_t, int *))(*(void *)v3 + 48))(v3, &v17)) {
    *a1 |= 2u;
  }
  int v17 = 67;
  uint64_t v5 = *(void *)(a2 + 24);
  if (!v5) {
    goto LABEL_38;
  }
  if ((*(unsigned int (**)(uint64_t, int *))(*(void *)v5 + 48))(v5, &v17)) {
    *a1 |= 1u;
  }
  int v17 = 10;
  uint64_t v6 = *(void *)(a2 + 24);
  if (!v6) {
    goto LABEL_38;
  }
  if ((*(unsigned int (**)(uint64_t, int *))(*(void *)v6 + 48))(v6, &v17)) {
    *a1 |= 4u;
  }
  int v17 = 73;
  uint64_t v7 = *(void *)(a2 + 24);
  if (!v7) {
    goto LABEL_38;
  }
  if ((*(unsigned int (**)(uint64_t, int *))(*(void *)v7 + 48))(v7, &v17)) {
    *a1 |= 8u;
  }
  int v17 = 18;
  uint64_t v8 = *(void *)(a2 + 24);
  if (!v8) {
    goto LABEL_38;
  }
  if ((*(unsigned int (**)(uint64_t, int *))(*(void *)v8 + 48))(v8, &v17)) {
    *a1 |= 0x40u;
  }
  int v17 = 69;
  uint64_t v9 = *(void *)(a2 + 24);
  if (!v9) {
    goto LABEL_38;
  }
  if ((*(unsigned int (**)(uint64_t, int *))(*(void *)v9 + 48))(v9, &v17)) {
    *a1 |= 0x10u;
  }
  int v17 = 72;
  uint64_t v10 = *(void *)(a2 + 24);
  if (!v10) {
    goto LABEL_38;
  }
  if ((*(unsigned int (**)(uint64_t, int *))(*(void *)v10 + 48))(v10, &v17)) {
    *a1 |= 0x400u;
  }
  int v17 = 71;
  uint64_t v11 = *(void *)(a2 + 24);
  if (!v11) {
    goto LABEL_38;
  }
  if ((*(unsigned int (**)(uint64_t, int *))(*(void *)v11 + 48))(v11, &v17)) {
    *a1 |= 0x200u;
  }
  int v17 = 46;
  uint64_t v12 = *(void *)(a2 + 24);
  if (!v12) {
    goto LABEL_38;
  }
  if ((*(unsigned int (**)(uint64_t, int *))(*(void *)v12 + 48))(v12, &v17)) {
    *a1 |= 0x80u;
  }
  int v17 = 64;
  uint64_t v13 = *(void *)(a2 + 24);
  if (!v13) {
    goto LABEL_38;
  }
  if ((*(unsigned int (**)(uint64_t, int *))(*(void *)v13 + 48))(v13, &v17)) {
    *a1 |= 0x1000u;
  }
  int v17 = 62;
  uint64_t v14 = *(void *)(a2 + 24);
  if (!v14) {
    goto LABEL_38;
  }
  if ((*(unsigned int (**)(uint64_t, int *))(*(void *)v14 + 48))(v14, &v17)) {
    *a1 |= 0x2000u;
  }
  int v17 = 63;
  uint64_t v15 = *(void *)(a2 + 24);
  if (v15)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, int *))(*(void *)v15 + 48))(v15, &v17);
    if (result) {
      *a1 |= 0x4000u;
    }
  }
  else
  {
LABEL_38:
    sub_1CB920400();
    return sub_1CC6E5EA4();
  }
  return result;
}

uint64_t sub_1CC6E5EA4(_DWORD *a1, uint64_t a2, int a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v4 = a3;
  v5[0] = &unk_1F261BDD8;
  v5[1] = a2;
  v5[2] = &v4;
  uint64_t v6 = v5;
  sub_1CC6E5B14(a1, (uint64_t)v5);
  uint64_t result = (uint64_t)v6;
  if (v6 == v5) {
    return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  if (v6) {
    return (*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

uint64_t sub_1CC6E5F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  int v120 = v12;
  uint64_t v124 = v13;
  uint64_t v117 = v14;
  uint64_t v122 = v15;
  uint64_t v16 = v11;
  uint64_t v18 = (void *)v17;
  uint64_t v128 = v10;
  uint64_t v19 = 0;
  uint64_t v172 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = &v144;
  uint64_t v21 = &v164;
  int v144 = 0;
  LODWORD(v145) = 1;
  long long v146 = 0u;
  uint64_t v148 = 0;
  v149[0] = v150;
  v149[1] = (void *)0x400000000;
  char v151 = 0;
  v152[0] = v153;
  v152[1] = (void *)0x400000000;
  v154[0] = &v155;
  v154[1] = (void *)0x200000000;
  uint64_t v156 = 0;
  unint64_t v158 = v160;
  uint64_t v159 = 0x2000000000;
  int v161 = 0;
  LOBYTE(v164) = 0;
  long long v162 = 0u;
  LOBYTE(v163) = 0;
  int v165 = 0;
  char v166 = 1;
  int v167 = 0;
  uint64_t v22 = *(void ***)(v17 + 8);
  unint64_t v126 = (llvm::DataLayout *)(*((void *)*v22 + 5) + 272);
  uint64_t v127 = v11;
  uint64_t v115 = (uint64_t)v22[5];
  if (*(unsigned char *)(v11 + 16) != 84) {
    goto LABEL_33;
  }
  if ((*(_WORD *)(v11 + 18) & 3u) - 1 > 1)
  {
    uint64_t v19 = 0;
    goto LABEL_33;
  }
  if (!llvm::isInTailCallPosition((llvm *)v11, (const llvm::CallBase *)v22[1], (const llvm::TargetMachine *)v11))
  {
    uint64_t v19 = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *((void *)*v22 + 14);
  if (!v23) {
    goto LABEL_31;
  }
  if (!*(_DWORD *)(v23 + 8)) {
    goto LABEL_31;
  }
  uint64_t v24 = *(void *)(v23 + 40);
  if (!v24) {
    goto LABEL_31;
  }
  LODWORD(v16) = *(_DWORD *)(v24 + 40);
  if (!v16) {
    goto LABEL_31;
  }
  unint64_t v25 = *(void *)(v24 + 24);
  uint64_t v19 = (uint64_t)&unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
LABEL_147:
    if (__cxa_guard_acquire(&qword_1EBCBE588))
    {
      unint64_t v113 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v113 = 0xFF51AFD7ED558CCDLL;
      }
      *(void *)(v19 + 1408) = v113;
      __cxa_guard_release(&qword_1EBCBE588);
    }
  }
  uint64_t v26 = *(void *)(v19 + 1408);
  uint64_t v27 = __ROR8__(v26 ^ 0xAE2F6180382EB467, 30);
  unint64_t v28 = 0x9DDFEA08EB382D69
      * ((v26 + 0x1ED4D83DFEF8CF66) ^ ((0x9DDFEA08EB382D69
                                        * ((v27 - 0x58DDE70BBE0D1868) ^ (v26 + 0x1ED4D83DFEF8CF66))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v27 - 0x58DDE70BBE0D1868) ^ (v26 + 0x1ED4D83DFEF8CF66))));
  unsigned int v29 = -348639895 * ((v28 >> 47) ^ v28);
  for (int i = 1; ; ++i)
  {
    unsigned int v31 = v29 & (v16 - 1);
    uint64_t v32 = (uint64_t *)(v25 + 24 * v31);
    uint64_t v33 = *v32;
    if (*v32 == -1)
    {
      if ("disable-tail-calls" == (char *)-1) {
        goto LABEL_26;
      }
      goto LABEL_12;
    }
    if (v33 != -2) {
      break;
    }
    if ("disable-tail-calls" == (char *)-2) {
      goto LABEL_26;
    }
LABEL_12:
    if (v33 == -1) {
      goto LABEL_31;
    }
    unsigned int v29 = i + v31;
  }
  if (v32[1] != 18) {
    goto LABEL_12;
  }
  BOOL v34 = *(void *)v33 == 0x2D656C6261736964 && *(void *)(v33 + 8) == 0x6C61632D6C696174;
  if (!v34 || *(_WORD *)(v33 + 16) != 29548) {
    goto LABEL_12;
  }
LABEL_26:
  uint64_t v36 = v32[2];
  if (v36 && *(_DWORD *)(v36 + 16) == 4)
  {
    uint64_t v19 = *(_DWORD *)(v36 + *(unsigned int *)(v36 + 12) + 25) != 1702195828;
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v19 = 1;
LABEL_32:
  uint64_t v16 = v127;
LABEL_33:
  uint64_t v37 = (*(unsigned __int16 *)(v16 + 18) >> 2) & 0x3FF;
  unsigned int v38 = *(llvm::Type **)v16;
  uint64_t v39 = *(void *)(v16 + 64);
  BOOL v40 = *(_DWORD *)(*(void *)(v16 + 72) + 8) > 0xFFu;
  v142[0] = (char *)&v143;
  v142[1] = (char *)0x400000000;
  unint64_t v25 = v128;
  uint64_t v116 = (uint64_t)v38;
  sub_1CC6E6D48(v128, v37, (llvm::LLVMContext **)v38, v39, v142, v126);
  int v118 = v37;
  BOOL v119 = v40;
  char v41 = (*(uint64_t (**)(unint64_t, void **, uint64_t, char **, BOOL))(*(void *)v25 + 32))(v25, v22, v37, v142, v40);
  *((unsigned char *)v21 + 12) = v41;
  if ((v41 & 1) == 0)
  {
    sub_1CD6130BC(v128, v18, (llvm::Type **)v16, (uint64_t)&v144);
    uint64_t v19 = 0;
  }
  char v125 = v19;
  int v42 = *(_DWORD *)(v16 + 20);
  uint64_t v43 = v42 & 0x7FFFFFF;
  int v44 = *(unsigned __int8 *)(v16 + 16);
  int8x8_t v121 = v18;
  if (v44 == 84)
  {
    uint64_t v45 = 0;
  }
  else
  {
    if (v44 == 39) {
      uint64_t v45 = (*(_DWORD *)(v127 + 80) + 1);
    }
    else {
      uint64_t v45 = 2;
    }
    uint64_t v20 = &v144;
  }
  uint64_t v18 = (void *)v127;
  uint64_t v46 = (void *)(v127 - 32 * v43);
  if (v42 < 0)
  {
    uint64_t v114 = *(v46 - 1);
    if ((v114 & 0xFFFFFFFF0) != 0) {
      uint64_t v47 = (*((_DWORD *)v46 - 3) - *(_DWORD *)((char *)v46 - v114));
    }
    else {
      uint64_t v47 = 0;
    }
    uint64_t v18 = (void *)v127;
    uint64_t v20 = &v144;
  }
  else
  {
    uint64_t v47 = 0;
  }
  if (v46 != &v18[-4 * v45 - 4 + -4 * v47])
  {
    unsigned int v48 = 0;
    unsigned int v123 = *(_DWORD *)(v18[9] + 12) - 1;
    uint64_t v22 = (void **)&v168;
    unint64_t v25 = (32 * v45 + 32 * v47) ^ 0xFFFFFFFFFFFFFFE0;
    uint64_t v16 = -32 * v43;
    do
    {
      uint64_t v49 = v124 + 16 * v48;
      uint64_t v50 = *(unsigned char **)v49;
      uint64_t v51 = *(void *)(v49 + 8);
      unint64_t v52 = *(uint64_t **)((char *)v18 + v16);
      unsigned int v133 = v48;
      uint64_t v129 = 0;
      int v130 = 0;
      unint64_t v168 = (void (**)(void **))&unk_1F261BD90;
      unint64_t v169 = v18;
      v170 = &v133;
      uint64_t v171 = (void **)&v168;
      sub_1CC6E5B14(&v129, (uint64_t)&v168);
      if (v171 == (void **)&v168)
      {
        v168[4]((void **)&v168);
      }
      else if (v171)
      {
        (*((void (**)(void **))*v171 + 5))(v171);
      }
      uint64_t v131 = v129;
      int v132 = v130;
      sub_1CB925510((uint64_t)&v134, v50, v51, *v52, v48, &v131, 1, v48 < v123, (uint64_t)v52);
      sub_1CC6E710C(v128, &v134, ++v48, v126, (uint64_t)v18);
      if ((*(unsigned char *)v135[0] & 8) != 0) {
        v125 &= *(unsigned __int8 *)(*(void *)((char *)v18 + v16) + 16) < 0x1Cu;
      }
      uint64_t v21 = (uint64_t *)sub_1CB927410((uint64_t)(v20 + 48), (unint64_t)&v134, 1);
      int v53 = (char *)v158;
      uint64_t v19 = v159;
      unsigned int v54 = (char *)v158 + 152 * v159;
      *(void *)unsigned int v54 = *v21;
      *((void *)v54 + 1) = v54 + 24;
      *((void *)v54 + 2) = 0x400000000;
      if (*((_DWORD *)v21 + 4)) {
        sub_1CB927924((uint64_t)(v54 + 8), (uint64_t)(v21 + 1));
      }
      v54[72] = *((unsigned char *)v21 + 72);
      unint64_t v55 = &v53[152 * v19];
      *((void *)v55 + 10) = v55 + 96;
      uint64_t v56 = (uint64_t)(v55 + 80);
      *(void *)(v56 + 8) = 0x400000000;
      if (*((_DWORD *)v21 + 22)) {
        sub_1CB927A18(v56, (uint64_t)(v21 + 10));
      }
      unint64_t v57 = &v53[152 * v19];
      *((void *)v57 + 14) = v57 + 128;
      uint64_t v58 = (uint64_t)(v57 + 112);
      *(void *)(v58 + 8) = 0x200000000;
      uint64_t v18 = (void *)v127;
      if (*((_DWORD *)v21 + 30)) {
        sub_1CB927A18(v58, (uint64_t)(v21 + 14));
      }
      uint64_t v59 = &v53[152 * v19];
      uint64_t v60 = v21[17];
      *((_DWORD *)v59 + 36) = *((_DWORD *)v21 + 36);
      *((void *)v59 + 17) = v60;
      LODWORD(v159) = v159 + 1;
      if (v139 != v140) {
        free(v139);
      }
      if (v137 != v138) {
        free(v137);
      }
      if (v135[0] != v136) {
        free(v135[0]);
      }
      v16 += 32;
    }
    while (v25 != v16);
  }
  uint64_t v20 = (int *)a9;
  if (sub_1CC646CF4((uint64_t)v18, 7) && !*(unsigned char *)(a9 + 16))
  {
    unint64_t v65 = llvm::GlobalPtrAuthInfo::analyze((uint64_t ***)*(v18 - 4), v61);
    uint64_t v66 = llvm::Value::stripPointerCasts(*(llvm::Value **)(*(void *)(v65 - 32)
                                                         - 32
                                                         * (*(_DWORD *)(*(void *)(v65 - 32) + 20) & 0x7FFFFFF)));
    uint64_t v145 = 10;
    *(void *)&long long v146 = 0;
    *((void *)&v146 + 1) = v66;
    LODWORD(v147) = 0;
  }
  else
  {
    BOOL v62 = llvm::Value::stripPointerCasts((llvm::Value *)*(v18 - 4));
    if (!v62 || *((unsigned char *)v62 + 16))
    {
      uint64_t v63 = *(void *)(a10 + 24);
      if (!v63)
      {
        sub_1CB920400();
        goto LABEL_147;
      }
      int v64 = (*(uint64_t (**)(uint64_t))(*(void *)v63 + 48))(v63);
      LODWORD(v145) = 0;
      HIDWORD(v145) = v64;
      uint64_t v147 = 0;
      long long v146 = 0uLL;
    }
    else
    {
      uint64_t v145 = 10;
      *(void *)&long long v146 = 0;
      *((void *)&v146 + 1) = v62;
      LODWORD(v147) = 0;
    }
  }
  unint64_t v168 = 0;
  LODWORD(v169) = 0;
  sub_1CB925510((uint64_t)&v134, v122, v117, v116, 0, &v168, 1, 1, 0);
  uint64_t v148 = v134;
  sub_1CB9276BC((uint64_t)v149, (uint64_t)v135);
  char v151 = v136[48];
  sub_1CB927804((uint64_t)v152, (uint64_t)&v137);
  sub_1CB927804((uint64_t)v154, (uint64_t)&v139);
  uint64_t v156 = v140[1];
  int v157 = v141;
  if (v139 != v140) {
    free(v139);
  }
  if (v137 != v138) {
    free(v137);
  }
  uint64_t v67 = v127;
  if (v135[0] != v136) {
    free(v135[0]);
  }
  if (*((unsigned char *)v148 + 8) == 7)
  {
    char v68 = 0;
    int IncompleteVirtualRegister = 0;
  }
  else
  {
    sub_1CC6E710C(v128, &v148, 0, v126, v127);
    unsigned __int16 v70 = sub_1CC63020C(v127);
    int IncompleteVirtualRegister = 0;
    char v68 = 0;
    if (v70 >= 0x100u)
    {
      char v71 = v70;
      if ((_BYTE)v70)
      {
        int v72 = *(_DWORD *)v122;
        int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v115, "", 0);
        uint64_t v73 = 0;
        uint64_t v74 = v72 & 0x7FFFFFFF;
        unint64_t v75 = IncompleteVirtualRegister & 0x7FFFFFFF;
        *(void *)(*(void *)(v115 + 24) + 16 * v75) = *(void *)(*(void *)(v115 + 24) + 16 * v74);
        unint64_t v76 = *(unsigned int *)(v115 + 432);
        if (v72 < 0 && v74 < v76) {
          uint64_t v73 = *(void *)(*(void *)(v115 + 424) + 8 * v74);
        }
        if (v75 >= v76)
        {
          uint64_t v77 = *(void *)(v115 + 440);
          uint64_t v78 = v75 + 1 - v76;
          if (v75 >= *(unsigned int *)(v115 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v79 = *(_DWORD *)(v115 + 432);
          if (v78)
          {
            uint64_t v80 = (void *)(*(void *)(v115 + 424) + 8 * *(unsigned int *)(v115 + 432));
            uint64_t v81 = ~v75 + v76;
            do
              *v80++ = v77;
            while (!__CFADD__(v81++, 1));
            int v79 = *(_DWORD *)(v115 + 432);
          }
          *(_DWORD *)(v115 + 432) = v79 + v78;
        }
        *(void *)(*(void *)(v115 + 424) + 8 * v75) = v73;
        uint64_t v83 = *(void *)(v115 + 8);
        uint64_t v20 = (int *)a9;
        if (v83) {
          (*(void (**)(uint64_t))(*(void *)v83 + 24))(v83);
        }
        *(_DWORD *)v152[0] = IncompleteVirtualRegister;
        char v68 = v71;
        uint64_t v67 = v127;
      }
    }
  }
  *(void *)&long long v162 = v67;
  if ((*(unsigned char *)(v67 + 23) & 0x20) == 0) {
    goto LABEL_109;
  }
  uint64_t v84 = ***(void ***)v67;
  unint64_t v134 = (llvm::Type *)v67;
  int v85 = *(_DWORD *)(v84 + 2496);
  if (!v85)
  {
    char v111 = 0;
    goto LABEL_143;
  }
  uint64_t v86 = *(void *)(v84 + 2480);
  int v87 = v85 - 1;
  unsigned int v88 = v87 & ((v67 >> 4) ^ (v67 >> 9));
  unint64_t v89 = (void *)(v86 + 40 * v88);
  uint64_t v90 = *v89;
  if (*v89 != v67)
  {
    uint64_t v91 = 0;
    int v92 = 1;
    while (v90 != -4096)
    {
      if (v91) {
        BOOL v93 = 0;
      }
      else {
        BOOL v93 = v90 == -8192;
      }
      if (v93) {
        uint64_t v91 = v89;
      }
      unsigned int v94 = v88 + v92++;
      unsigned int v88 = v94 & v87;
      unint64_t v89 = (void *)(v86 + 40 * v88);
      uint64_t v90 = *v89;
      if (*v89 == v67) {
        goto LABEL_104;
      }
    }
    if (v91) {
      char v111 = v91;
    }
    else {
      char v111 = v89;
    }
LABEL_143:
    unint64_t v89 = sub_1CC609054(v84 + 2480, (uint64_t)&v134, (uint64_t *)&v134, v111);
    uint64_t v112 = v134;
    v89[3] = 0;
    v89[4] = 0;
    void *v89 = v112;
    v89[1] = v89 + 3;
    v89[2] = 0x100000000;
  }
LABEL_104:
  uint64_t v95 = *((unsigned int *)v89 + 4);
  if (v95)
  {
    unint64_t v96 = (void *)(v89[1] + 8);
    uint64_t v97 = 16 * v95;
    while (*((_DWORD *)v96 - 2) != 23)
    {
      uint64_t v98 = 0;
      v96 += 2;
      v97 -= 16;
      if (!v97) {
        goto LABEL_110;
      }
    }
    uint64_t v98 = *v96;
  }
  else
  {
LABEL_109:
    uint64_t v98 = 0;
  }
LABEL_110:
  *((void *)&v162 + 1) = v98;
  int v144 = v118;
  int v161 = v120;
  long long v163 = *(_OWORD *)v20;
  uint64_t v164 = *((void *)v20 + 2);
  BOOL v100 = *(unsigned char *)(v67 + 16) == 84 && (*(_WORD *)(v67 + 18) & 3) == 2;
  LOBYTE(v165) = v100;
  BYTE1(v165) = v125 & 1;
  HIBYTE(v165) = v119;
  uint64_t v101 = (*(uint64_t (**)(uint64_t, void *, int *))(*(void *)v128 + 72))(v128, v121, &v144);
  if (v101 && IncompleteVirtualRegister && !BYTE1(v165))
  {
    LODWORD(v129) = *(_DWORD *)v122;
    int v130 = 1;
    LODWORD(v168) = IncompleteVirtualRegister;
    LODWORD(v170) = 0;
    uint64_t v102 = (llvm::MachineFunction *)(*(uint64_t (**)(void *, uint64_t, uint64_t *, uint64_t, void (***)(void **), uint64_t, void))(*v121 + 32))(v121, 44, &v129, 1, &v168, 1, 0);
    LODWORD(v134) = 1;
    v135[0] = 0;
    v135[1] = (void *)(1 << v68);
    llvm::MachineInstr::addOperand(v103, v102, (const llvm::MachineOperand *)&v134);
  }
  sub_1CC6EABE8(v142);
  uint64_t v104 = (char *)v158;
  if (v159)
  {
    uint64_t v105 = 152 * v159;
    do
    {
      uint64_t v106 = &v104[v105];
      char v107 = *(char **)&v104[v105 - 40];
      if (&v104[v105 - 24] != v107) {
        free(v107);
      }
      int v108 = (char *)*((void *)v106 - 9);
      if (v106 - 56 != v108) {
        free(v108);
      }
      uint64_t v109 = *(char **)&v104[v105 - 144];
      if (&v104[v105 - 128] != v109) {
        free(v109);
      }
      v105 -= 152;
    }
    while (v105);
    uint64_t v104 = (char *)v158;
  }
  if (v104 != v160) {
    free(v104);
  }
  if (v154[0] != &v155) {
    free(v154[0]);
  }
  if (v152[0] != v153) {
    free(v152[0]);
  }
  if (v149[0] != v150) {
    free(v149[0]);
  }
  return v101;
}

void sub_1CC6E6D48(uint64_t a1, uint64_t a2, llvm::LLVMContext **a3, uint64_t a4, char **a5, llvm::DataLayout *a6)
{
  v42[8] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a3;
  uint64_t v36 = 0;
  int v37 = 0;
  uint64_t v39 = a4;
  BOOL v40 = v42;
  uint64_t v41 = 0x400000000;
  llvm::ComputeValueVTs(*(void *)(a1 + 8), a6, (uint64_t)a3, (uint64_t)&v40, 0, 0, 0);
  sub_1CC6E5EA4(&v36, (uint64_t)&v39, 0);
  uint64_t v10 = (char *)v40;
  if (v41)
  {
    unsigned int v31 = (char *)v40 + 16 * v41;
    do
    {
      int v11 = (*(uint64_t (**)(void, llvm::LLVMContext *, uint64_t, void, void))(**(void **)(a1 + 8)
                                                                                            + 600))(*(void *)(a1 + 8), v9, a2, *(void *)v10, *((void *)v10 + 1));
      v34[0] = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 592))();
      uint64_t v35 = 0;
      llvm::EVT::getTypeForEVT((llvm::EVT *)v34, v9);
      uint64_t v32 = v12;
      int v33 = v11;
      if (v11)
      {
        int v13 = 0;
        unsigned int v14 = *((_DWORD *)a5 + 2);
        do
        {
          uint64_t v15 = *((unsigned int *)a5 + 3);
          if (v14 >= v15)
          {
            if (v15 == -1) {
              sub_1CD0A89A8(0xFFFFFFFFuLL);
            }
            unint64_t v21 = (2 * v15) | 1;
            if (v21 >= 0xFFFFFFFF) {
              unint64_t v21 = 0xFFFFFFFFLL;
            }
            int v28 = v21;
            uint64_t v22 = (char *)malloc_type_malloc(80 * v21, 0x4065EBACuLL);
            if (!v22) {
              llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
            }
            uint64_t v23 = &v22[80 * *((unsigned int *)a5 + 2)];
            *(void *)uint64_t v23 = v32;
            unsigned int v29 = v22;
            *((void *)v23 + 1) = v23 + 24;
            *((void *)v23 + 2) = 0x400000000;
            sub_1CB925674((unsigned int *)v23 + 2, &v36, v38);
            v23[72] = 1;
            uint64_t v27 = *a5;
            int v24 = *((_DWORD *)a5 + 2);
            if (v24)
            {
              int v30 = &v27[80 * v24];
              uint64_t v19 = (uint64_t)(v27 + 8);
              uint64_t v18 = v29;
              do
              {
                uint64_t v17 = v19 - 8;
                *(void *)uint64_t v18 = *(void *)(v19 - 8);
                *((void *)v18 + 1) = v18 + 24;
                *((void *)v18 + 2) = 0x400000000;
                if (*(_DWORD *)(v19 + 8)) {
                  sub_1CB9276BC((uint64_t)(v18 + 8), v19);
                }
                v18[72] = *(unsigned char *)(v19 + 64);
                v18 += 80;
                v19 += 80;
              }
              while ((char *)(v17 + 80) != v30);
              uint64_t v27 = *a5;
              uint64_t v25 = *((unsigned int *)a5 + 2);
              if (v25)
              {
                uint64_t v20 = 80 * v25;
                do
                {
                  if (&v27[v20 - 56] != *(char **)&v27[v20 - 72])
                  {
                    uint64_t v26 = v27;
                    free(*(void **)&v27[v20 - 72]);
                    uint64_t v27 = v26;
                  }
                  v20 -= 80;
                }
                while (v20);
                uint64_t v27 = *a5;
              }
            }
            if (v27 != (char *)(a5 + 2)) {
              free(v27);
            }
            *a5 = v29;
            *((_DWORD *)a5 + 3) = v28;
          }
          else
          {
            uint64_t v16 = (uint64_t)&(*a5)[80 * v14];
            *(void *)uint64_t v16 = v32;
            *(void *)(v16 + 8) = v16 + 24;
            *(void *)(v16 + 16) = 0x400000000;
            sub_1CB925674((unsigned int *)(v16 + 8), &v36, v38);
            *(unsigned char *)(v16 + 72) = 1;
          }
          unsigned int v14 = *((_DWORD *)a5 + 2) + 1;
          *((_DWORD *)a5 + 2) = v14;
          ++v13;
        }
        while (v13 != v33);
      }
      v10 += 16;
    }
    while (v10 != v31);
    uint64_t v10 = (char *)v40;
  }
  if (v10 != (char *)v42) {
    free(v10);
  }
}

uint64_t sub_1CC6E710C(uint64_t a1, llvm::Type **a2, int a3, llvm::DataLayout *a4, uint64_t a5)
{
  uint64_t v10 = (unsigned int *)a2[1];
  int v11 = (llvm::AttributeList *)(a5 + 64);
  uint64_t v30 = *(void *)(a5 + 64);
  sub_1CC6E5EA4(v10, (uint64_t)&v30, a3);
  uint64_t v12 = *a2;
  if ((*((_DWORD *)*a2 + 2) & 0xFE) == 0x12)
  {
    int v13 = (llvm::Type *)**((void **)v12 + 2);
    int v14 = *((unsigned __int8 *)v13 + 8);
  }
  else
  {
    int v14 = *((_DWORD *)*a2 + 2);
    int v13 = *a2;
  }
  if (v14 == 15)
  {
    *v10 |= 0x80000000;
    unsigned int v15 = *((_DWORD *)v13 + 2);
    if ((v15 & 0xFE) == 0x12) {
      unsigned int v15 = *(_DWORD *)(**((void **)v13 + 2) + 8);
    }
    v10[2] = v15 >> 8;
    uint64_t v12 = *a2;
  }
  int Alignment = llvm::DataLayout::getAlignment(a4, v12, 1);
  if ((*(_WORD *)v10 & 0x610) != 0)
  {
    unint64_t v21 = (llvm::Type *)sub_1CD49471C(a5, a3 - 1);
    if (!v21)
    {
      unint64_t v21 = (llvm::Type *)sub_1CD6132AC(a5, a3 - 1);
      if (!v21) {
        unint64_t v21 = (llvm::Type *)sub_1CD613324(a5, a3 - 1);
      }
    }
    unint64_t v22 = (unint64_t)(sub_1CB83544C((uint64_t)a4, (uint64_t)v21) + 7) >> 3;
    BOOL v24 = v23 == 1;
    char v25 = llvm::DataLayout::getAlignment(a4, v21, 1);
    uint64_t v27 = ((1 << v25) + 0xFFFFFFFFLL + v22) & -(1 << v25);
    if (v24) {
    v10[1] = v27;
    }
    ParamStackint Alignment = llvm::AttributeList::getParamStackAlignment(v11, a3 - 1);
    if ((unsigned __int16)ParamStackAlignment <= 0xFFu)
    {
      uint64_t v28 = *(void *)v11;
      if (!*(void *)v11
        || (a3 + 1) >= *(_DWORD *)(v28 + 8)
        || (unsigned int v29 = *(llvm::AttributeSetNode **)(v28 + 8 * (a3 + 1) + 40)) == 0
        || (ParamStackint Alignment = llvm::AttributeSetNode::getAlignment(v29),
            (unsigned __int16)ParamStackAlignment <= 0xFFu))
      {
        ParamStackint Alignment = 63
                            - __clz((*(uint64_t (**)(void, llvm::Type *, llvm::DataLayout *))(**(void **)(a1 + 8) + 576))(*(void *)(a1 + 8), v21, a4));
      }
    }
  }
  else
  {
    ParamStackint Alignment = Alignment;
    if (a3)
    {
      int v18 = llvm::AttributeList::getParamStackAlignment(v11, a3 - 1);
      if ((v18 & 0xFF00) != 0) {
        ParamStackint Alignment = v18;
      }
    }
  }
  *uint64_t v10 = *v10 & 0xFF87FFFF | (((((ParamStackAlignment << 19) + 0x80000) >> 19) & 0xF) << 19);
  uint64_t result = llvm::DataLayout::getAlignment(a4, *a2, 1);
  unsigned int v20 = *v10 & 0xF07FFFFF | (((((result << 23) + 0x800000) >> 23) & 0x1F) << 23);
  if ((*v10 & 0x1000) != 0) {
    unsigned int v20 = *v10 & 0xF07FFF7F | (((((result << 23) + 0x800000) >> 23) & 0x1F) << 23);
  }
  *uint64_t v10 = v20;
  return result;
}

uint64_t sub_1CC6E73A8(uint64_t a1, llvm::Type **a2, int a3, llvm::DataLayout *a4, uint64_t a5)
{
  uint64_t v9 = (unsigned int *)a2[1];
  uint64_t v10 = (llvm::AttributeList *)(a5 + 112);
  uint64_t v30 = *(void *)(a5 + 112);
  sub_1CC6E5EA4(v9, (uint64_t)&v30, a3);
  int v11 = *a2;
  if ((*((_DWORD *)*a2 + 2) & 0xFE) == 0x12)
  {
    uint64_t v12 = (llvm::Type *)**((void **)v11 + 2);
    int v13 = *((unsigned __int8 *)v12 + 8);
  }
  else
  {
    int v13 = *((_DWORD *)*a2 + 2);
    uint64_t v12 = *a2;
  }
  if (v13 == 15)
  {
    *v9 |= 0x80000000;
    unsigned int v14 = *((_DWORD *)v12 + 2);
    if ((v14 & 0xFE) == 0x12) {
      unsigned int v14 = *(_DWORD *)(**((void **)v12 + 2) + 8);
    }
    v9[2] = v14 >> 8;
    int v11 = *a2;
  }
  int Alignment = llvm::DataLayout::getAlignment(a4, v11, 1);
  if ((*(_WORD *)v9 & 0x610) != 0)
  {
    ParamByValType = (llvm::Type *)llvm::AttributeList::getParamByValType(v10, a3 - 1);
    if (!ParamByValType)
    {
      ParamByValType = (llvm::Type *)llvm::AttributeList::getParamInAllocaType(v10, a3 - 1);
      if (!ParamByValType) {
        ParamByValType = (llvm::Type *)llvm::AttributeList::getParamPreallocatedType(v10, a3 - 1);
      }
    }
    unint64_t v17 = (unint64_t)(sub_1CB83544C((uint64_t)a4, (uint64_t)ParamByValType) + 7) >> 3;
    BOOL v19 = v18 == 1;
    char v20 = llvm::DataLayout::getAlignment(a4, ParamByValType, 1);
    uint64_t v22 = ((1 << v20) + 0xFFFFFFFFLL + v17) & -(1 << v20);
    if (v19)
    {
      uint64_t v29 = ((1 << v20) + 0xFFFFFFFFLL + v17) & -(1 << v20);
      LODWORD(v22) = v29;
    }
    v9[1] = v22;
    ParamStackint Alignment = llvm::AttributeList::getParamStackAlignment(v10, a3 - 1);
    if ((unsigned __int16)ParamStackAlignment <= 0xFFu)
    {
      uint64_t v24 = *(void *)v10;
      if (!*(void *)v10
        || (a3 + 1) >= *(_DWORD *)(v24 + 8)
        || (char v25 = *(llvm::AttributeSetNode **)(v24 + 8 * (a3 + 1) + 40)) == 0
        || (ParamStackint Alignment = llvm::AttributeSetNode::getAlignment(v25),
            (unsigned __int16)ParamStackAlignment <= 0xFFu))
      {
        ParamStackint Alignment = 63
                            - __clz((*(uint64_t (**)(void, llvm::Type *, llvm::DataLayout *))(**(void **)(a1 + 8) + 576))(*(void *)(a1 + 8), ParamByValType, a4));
      }
    }
  }
  else
  {
    ParamStackint Alignment = Alignment;
    if (a3)
    {
      int v26 = llvm::AttributeList::getParamStackAlignment(v10, a3 - 1);
      if ((v26 & 0xFF00) != 0) {
        ParamStackint Alignment = v26;
      }
    }
  }
  unsigned int *v9 = *v9 & 0xFF87FFFF | (((((ParamStackAlignment << 19) + 0x80000) >> 19) & 0xF) << 19);
  uint64_t result = llvm::DataLayout::getAlignment(a4, *a2, 1);
  unsigned int v28 = *v9 & 0xF07FFFFF | (((((result << 23) + 0x800000) >> 23) & 0x1F) << 23);
  if ((*v9 & 0x1000) != 0) {
    unsigned int v28 = *v9 & 0xF07FFF7F | (((((result << 23) + 0x800000) >> 23) & 0x1F) << 23);
  }
  unsigned int *v9 = v28;
  return result;
}

void sub_1CC6E7650(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  v20[8] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(**(void **)(a6 + 8) + 40) + 272;
  v19[0] = v20;
  v19[1] = (void *)0x800000000;
  v17[0] = v18;
  v17[1] = (void *)0x800000000;
  llvm::computeValueLLTs(v10, a5, (const llvm::DataLayout *)v19, (uint64_t)v17, 0);
  if (a3)
  {
    uint64_t v11 = 0;
    unsigned int v12 = 1;
    do
    {
      LODWORD(v15) = *(_DWORD *)(a2 + 4 * v11);
      int v16 = 1;
      v14[0] = a4;
      v14[4] = 0;
      sub_1CC7383D8((void *)a6, &v15, v14, *((void *)v17[0] + v11));
      uint64_t v11 = v12;
    }
    while (a3 > v12++);
  }
  if (v17[0] != v18) {
    free(v17[0]);
  }
  if (v19[0] != v20) {
    free(v19[0]);
  }
}

uint64_t sub_1CC6E7788(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t *a4, void *a5, int a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v30[24] = *MEMORY[0x1E4F143B8];
  unint64_t v15 = (uint64_t ***)a5[1];
  int v16 = *v15;
  v29[0] = v30;
  v29[1] = (void *)0x1000000000;
  llvm::CCState::CCState((uint64_t)&v20, a6, a7, (uint64_t)v15, (uint64_t)v29, **v16);
  if (sub_1CC6E7904(a1, a3, a4)) {
    uint64_t v18 = sub_1CC6E7C14(a1, a2, (uint64_t)a4, v17, (uint64_t *)v29, a5, a9, a10);
  }
  else {
    uint64_t v18 = 0;
  }
  if (v27 != &v28) {
    free(v27);
  }
  if (v25 != &v26) {
    free(v25);
  }
  if (v23 != &v24) {
    free(v23);
  }
  if (v21 != &v22) {
    free(v21);
  }
  if (v29[0] != v30) {
    free(v29[0]);
  }
  return v18;
}

uint64_t sub_1CC6E7904(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v27 = *((unsigned int *)a3 + 2);
  if (!v27) {
    return 1;
  }
  uint64_t v4 = 0;
  while (1)
  {
    unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*a3 + 152 * v4), 0, (BOOL)a3);
    uint64_t v7 = v6;
    unsigned __int8 v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 592))();
    unsigned int v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 600))();
    uint64_t v10 = *a3;
    if (v9 != 1) {
      break;
    }
    unint64_t v3 = v3 & 0xFFFFFFFF00000000 | *(unsigned int *)(*(void *)(v10 + 152 * v4 + 8) + 8);
    if ((*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, void, void, void))(*(void *)a2 + 16))(a2, v4, EVT, v7, v8, v8, 0))return 0; {
LABEL_5:
    }
    if (++v4 == v27) {
      return 1;
    }
  }
  uint64_t v12 = v10 + 152 * v4;
  int v13 = *(uint64_t **)(v12 + 8);
  uint64_t v14 = *v13;
  uint64_t v15 = *((unsigned int *)v13 + 2);
  *(_DWORD *)(v12 + 16) = 0;
  if (!v9) {
    goto LABEL_5;
  }
  uint64_t v16 = 0;
  int v24 = v14 & 0xF07FFFFF;
  unint64_t v22 = v14 & 0xFFFFFFFF00000000;
  unsigned int v23 = v14 | 0x100;
  uint64_t v20 = 12 * v9;
  uint64_t v21 = 12 * (v9 - 1);
  unint64_t v17 = v26;
  while (1)
  {
    int v18 = v21 == v16 ? 8390656 : 0x800000;
    unsigned int v19 = v18 | v24;
    if (!v16) {
      unsigned int v19 = v23;
    }
    unint64_t v26 = v17 & 0xFFFFFFFF00000000 | v15;
    sub_1CB9255FC(*a3 + 152 * v4 + 8, v19 | v22, v15);
    unint64_t v25 = v25 & 0xFFFFFFFF00000000 | *(unsigned int *)(*(void *)(*a3 + 152 * v4 + 8) + v16 + 8);
    if ((*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, void, void, void))(*(void *)a2 + 16))(a2, v4, EVT, v7, v8, v8, 0))return 0; {
    v16 += 12;
    }
    unint64_t v17 = v26;
    if (v20 == v16) {
      goto LABEL_5;
    }
  }
}

uint64_t sub_1CC6E7C14(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v386 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v8 = (void *)a6[1];
  uint64_t v9 = v8[5];
  unsigned int v329 = v8;
  uint64_t v10 = *(void *)(*v8 + 40);
  uint64_t v11 = *(unsigned int *)(a3 + 8);
  v372 = v374;
  uint64_t v373 = 0x100000000;
  uint64_t v338 = v11;
  if (!v11) {
    return 1;
  }
  uint64_t v12 = a5;
  uint64_t v363 = 0;
  unsigned int v14 = 0;
  v350 = (llvm::Type *)(v10 + 272);
  v345 = (void *)(v9 + 424);
  uint64_t v361 = v9;
  do
  {
    unsigned int v15 = v14;
    uint64_t v16 = *v12;
    if ((*(unsigned char *)(*v12 + 12 * v14 + 8) & 2) == 0)
    {
      unsigned int v360 = v14;
      uint64_t v17 = v16 + 12 * v14;
      uint64_t v18 = *(unsigned __int8 *)(v17 + 9);
      int v336 = *(unsigned __int8 *)(v17 + 10);
      llvm::LLT::LLT(&v368, *(unsigned char *)(v17 + 10));
      uint64_t v342 = v18;
      llvm::LLT::LLT(&v367, v18);
      uint64_t v20 = &v368;
      if (!a2[24]) {
        uint64_t v20 = &v367;
      }
      unint64_t v21 = *v20;
      unsigned __int8 EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*(void *)a3 + 152 * v363), 0, v19);
      uint64_t v334 = v22;
      unint64_t LLTForType = llvm::getLLTForType(*(llvm **)(*(void *)a3 + 152 * v363), v350, v23);
      uint64_t v25 = *(void *)a3 + 152 * v363;
      unint64_t v26 = *(unsigned int *)(v25 + 16);
      uint64_t v27 = *(unsigned char **)(v25 + 80);
      uint64_t v28 = &v27[4 * *(unsigned int *)(v25 + 88)];
      *(_DWORD *)(v25 + 120) = 0;
      sub_1CB925718((unsigned int *)(v25 + 112), v27, v28);
      unint64_t v337 = LLTForType;
      BOOL v29 = v26 == 1 && v21 == LLTForType;
      unint64_t v351 = v26;
      if (!v29)
      {
        sub_1CBBDF5D8(*(void *)a3 + 152 * v363 + 80, v26);
        uint64_t v30 = v361;
        if (v26)
        {
          uint64_t v31 = 0;
          do
          {
            unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v30, "", 0);
            unint64_t v33 = IncompleteVirtualRegister & 0x7FFFFFFF;
            *(void *)(*(void *)(v361 + 24) + 16 * v33) = 4;
            uint64_t v30 = v361;
            unint64_t v34 = *(unsigned int *)(v361 + 432);
            if (v33 >= v34)
            {
              unint64_t v35 = v33 + 1;
              uint64_t v36 = *(void *)(v361 + 440);
              if (v33 >= *(unsigned int *)(v361 + 436)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v37 = *(_DWORD *)(v361 + 432);
              if (v35 != v34)
              {
                unsigned int v38 = (void *)(*v345 + 8 * *(unsigned int *)(v361 + 432));
                uint64_t v39 = ~v33 + v34;
                do
                {
                  *v38++ = v36;
                  BOOL v40 = __CFADD__(v39++, 1);
                }
                while (!v40);
                int v37 = *(_DWORD *)(v361 + 432);
              }
              uint64_t v30 = v361;
              *(_DWORD *)(v361 + 432) = v37 + v35 - v34;
            }
            *(void *)(*(void *)(v30 + 424) + 8 * v33) = v21;
            uint64_t v41 = *(void *)(v30 + 8);
            if (v41)
            {
              (*(void (**)(uint64_t, void))(*(void *)v41 + 24))(v41, IncompleteVirtualRegister);
              uint64_t v30 = v361;
            }
            *(_DWORD *)(*(void *)(*(void *)a3 + 152 * v363 + 80) + 4 * v31++) = IncompleteVirtualRegister;
            unint64_t v26 = v351;
          }
          while (v31 != v351);
        }
      }
      if (a2[24] || v337 == v367)
      {
LABEL_116:
        if (*(unsigned char *)v350) {
          BOOL v89 = 1;
        }
        else {
          BOOL v89 = EVT == 14;
        }
        int v90 = v89;
        int __src = v90;
        unsigned int v15 = v360;
        unint64_t v91 = v26;
        if (v26)
        {
          uint64_t v92 = 0;
          uint64_t v93 = 0;
          if (v363) {
            BOOL v94 = 1;
          }
          else {
            BOOL v94 = a8 == 0;
          }
          int v95 = !v94;
          int v346 = v95;
          uint64_t v354 = 12 * v91;
          int v96 = v91 - 1;
          do
          {
            uint64_t v97 = *(void *)a3 + 152 * v363;
            uint64_t v98 = *(unsigned int *)(*(void *)(v97 + 80) + 4 * v93);
            if (__src) {
              int v99 = v96;
            }
            else {
              int v99 = v93;
            }
            unsigned int v100 = v99 + v15;
            uint64_t v101 = *a5;
            uint64_t v102 = (void *)(*a5 + 12 * v100);
            unint64_t v103 = (unint64_t *)(*(void *)(v97 + 8) + v92);
            unint64_t v104 = *v103;
            uint64_t v105 = *((unsigned int *)v103 + 2);
            uint64_t v106 = *v103 & 0x10;
            if ((v102[1] & 1) != 0 && !v106)
            {
              unint64_t v353 = v353 & 0xFFFFFFFF00000000 | v105;
              *(void *)&long long __dst = (*(uint64_t (**)(unsigned char *, llvm::Type *, uint64_t, unint64_t))(*(void *)a2 + 24))(a2, v350, *a5 + 12 * v100, v104);
              memset(v379, 0, 21);
              uint64_t v108 = sub_1CB8F1DC4((unint64_t *)&__dst);
              if (v107 == 1) {
              unint64_t v352 = v352 & 0xFFFFFFFF00000000 | v105;
              }
              unsigned int v109 = (*(uint64_t (**)(unsigned char *, unint64_t, void, void **, unint64_t))(*(void *)a2 + 16))(a2, (unint64_t)(v108 + 7) >> 3, *(unsigned int *)(v101 + 12 * v100 + 4), v379, v104);
              (*(void (**)(unsigned char *, uint64_t, uint64_t, void, void, void **, void *))(*(void *)a2 + 48))(a2, *(void *)a3 + 152 * v363, v93, v109, __dst, v379, v102);
              goto LABEL_150;
            }
            int v110 = a2[24];
            if ((v102[1] & 1) != 0 && v106)
            {
              unint64_t v111 = HIDWORD(v104);
              if (!a2[24])
              {
                uint64_t v117 = *(unsigned int *)(v101 + 12 * v100 + 4);
                memset(v366, 0, 21);
                int v118 = (*(uint64_t (**)(unsigned char *, unint64_t, uint64_t, unsigned char *, unint64_t, unint64_t))(*(void *)a2 + 16))(a2, HIDWORD(v104), v117, v366, v104, v332 & 0xFFFFFFFF00000000 | v105);
                int v119 = v118;
                uint64_t v120 = *(void *)(*(void *)a3 + 152 * v363 + 136);
                *(void *)&long long v364 = v120 & 0xFFFFFFFFFFFFFFFBLL;
                *((void *)&v364 + 1) = 0;
                BYTE4(v365) = 0;
                unint64_t v332 = v332 & 0xFFFFFFFF00000000 | v105;
                if (v120)
                {
                  uint64_t v122 = *(void *)v120;
                  unsigned int v123 = *(_DWORD *)(*(void *)v120 + 8);
                  if ((v123 & 0xFE) == 0x12) {
                    unsigned int v123 = *(_DWORD *)(**(void **)(v122 + 16) + 8);
                  }
                  LODWORD(v124) = v123 >> 8;
                }
                else
                {
                  if (v118 < 0 && (v118 & 0x7FFFFFFFu) < *(_DWORD *)(v361 + 432)) {
                    unint64_t v121 = *(void *)(*v345 + 8 * (v118 & 0x7FFFFFFF));
                  }
                  else {
                    unint64_t v121 = 0;
                  }
                  char v125 = 19;
                  if ((v121 & 4) != 0) {
                    char v125 = 35;
                  }
                  uint64_t v124 = (v121 >> v125) & 0xFFFFFF;
                  long long v364 = 0uLL;
                }
                LODWORD(v365) = v124;
                if (((v104 >> 19) & 0xF) != 0) {
                  unsigned __int8 v126 = ((v104 >> 19) & 0xF) - 1;
                }
                else {
                  unsigned __int8 v126 = 0;
                }
                unsigned int v127 = v126;
                unsigned __int8 v128 = sub_1CD631D34(v329, v366);
                if (v127 <= v128) {
                  char v129 = v128;
                }
                else {
                  char v129 = v127;
                }
                unsigned __int8 v130 = sub_1CD631D34(v329, &v364);
                if (v127 <= v130) {
                  char v131 = v130;
                }
                else {
                  char v131 = v127;
                }
                int v330 = **(_DWORD **)(*(void *)a3 + 152 * v363 + 80);
                uint64_t v132 = *(void *)(*((void *)a2 + 1) + 8);
                long long __dst = v364;
                v378[0] = v365;
                memset(v379, 0, 32);
                MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v132, (uint64_t)&__dst, 17, v111, v131, (long long *)v379, 0, 1, 0, 0, 0);
                long long v375 = *(_OWORD *)v366;
                uint64_t v376 = *(void *)&v366[16];
                memset(v379, 0, 32);
                unsigned int v133 = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v132, (uint64_t)&v375, 18, v111, v129, (long long *)v379, 0, 1, 0, 0, 0);
                unint64_t v134 = 0;
                unsigned int v15 = v360;
                if (v119 < 0)
                {
                  uint64_t v135 = *((void *)a2 + 2);
                  if ((v119 & 0x7FFFFFFFu) >= *(_DWORD *)(v135 + 432)) {
                    unint64_t v134 = 0;
                  }
                  else {
                    unint64_t v134 = *(void *)(*(void *)(v135 + 424) + 8 * (v119 & 0x7FFFFFFF));
                  }
                }
                unint64_t v371 = v134;
                uint64_t v137 = (llvm::LLVMContext *)sub_1CB8F1DC4(&v371);
                if (v136 == 1) {
                unint64_t v138 = (llvm::IntegerType *****)*((void *)a2 + 1);
                }
                v379[0] = (void *)((8 * v137) | 1);
                LODWORD(v379[1]) = 0;
                unint64_t v139 = (llvm::ConstantInt *)llvm::IntegerType::get(***v138[1], v137);
                unint64_t v140 = llvm::ConstantInt::get(v139, v111, (const llvm::APInt *)1);
                uint64_t v141 = ((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*v138)[2])(v138, v379, v140);
                uint64_t v142 = *((void *)a2 + 1);
                LODWORD(v379[0]) = v119;
                LODWORD(v379[2]) = 0;
                LODWORD(v379[3]) = v330;
                int v380 = 0;
                uint64_t v381 = v141;
                uint64_t v382 = v143;
                int v383 = 1;
                uint64_t v384 = 0;
                int v385 = 3;
                int v144 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, void, void, void **, uint64_t, void))(*(void *)v142 + 32))(v142, 234, 0, 0, v379, 4, 0);
                long long v146 = v145;
                llvm::MachineInstr::addMemOperand(v145, v144, v133);
                llvm::MachineInstr::addMemOperand(v146, v144, MachineMemOperand);
                goto LABEL_151;
              }
              memset(v379, 0, 21);
              unint64_t v349 = v349 & 0xFFFFFFFF00000000 | v105;
              int v112 = (*(uint64_t (**)(unsigned char *, unint64_t, void, void **, unint64_t))(*(void *)a2 + 16))(a2, HIDWORD(v104), *(unsigned int *)(v101 + 12 * v100 + 4), v379, v104);
              LODWORD(v375) = **(_DWORD **)(*(void *)a3 + 152 * v363 + 80);
              DWORD2(v375) = 1;
              LODWORD(__dst) = v112;
              LODWORD(v378[0]) = 0;
              (*(void (**)(void *, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*a6 + 32))(a6, 19, &v375, 1, &__dst, 1, 0);
              goto LABEL_150;
            }
            int v113 = v346;
            if (!a2[24]) {
              int v113 = 0;
            }
            if (v113 == 1)
            {
              if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)a1 + 88))(a1, v342, 0))
              {
                unint64_t v339 = v339 & 0xFFFFFFFF00000000 | *((unsigned int *)v102 + 2);
                (*(void (**)(unsigned char *, uint64_t, void, void))(*(void *)a2 + 32))(a2, v98, *(unsigned int *)(a7 + 4 * v93), *v102);
LABEL_150:
                unsigned int v15 = v360;
                goto LABEL_151;
              }
              int v110 = a2[24];
            }
            if (v110)
            {
              unint64_t v344 = v344 & 0xFFFFFFFF00000000 | *((unsigned int *)v102 + 2);
              (*(void (**)(unsigned char *, uint64_t, void, void))(*(void *)a2 + 32))(a2, v98, *(unsigned int *)(v101 + 12 * v100 + 4), *v102);
              goto LABEL_150;
            }
            *(void *)&long long __dst = *v102;
            *(_DWORD *)((char *)&__dst + 7) = *(_DWORD *)((char *)v102 + 7);
            int v114 = v373;
            if (v373 >= HIDWORD(v373))
            {
              if (HIDWORD(v373) == -1) {
                goto LABEL_522;
              }
              if (((2 * HIDWORD(v373)) | 1uLL) >= 0xFFFFFFFF) {
                uint64_t v147 = 0xFFFFFFFFLL;
              }
              else {
                uint64_t v147 = (2 * HIDWORD(v373)) | 1;
              }
              uint64_t v148 = (char *)malloc_type_malloc(32 * v147, 0x4065EBACuLL);
              if (!v148) {
                goto LABEL_523;
              }
              unsigned int v149 = v148;
              uint64_t v150 = &v148[32 * v373];
              *((void *)v150 + 3) = 0;
              char v151 = (char *)operator new(0x20uLL);
              *(void *)char v151 = &unk_1F261BE20;
              *((void *)v151 + 1) = a2;
              *((_DWORD *)v151 + 4) = v98;
              *(void *)(v151 + 20) = __dst;
              *(_DWORD *)(v151 + 27) = *(_DWORD *)((char *)&__dst + 7);
              *((void *)v150 + 3) = v151;
              sub_1CC6EADF4((unsigned int *)&v372, (uint64_t)v149);
              if (v372 != v374) {
                free(v372);
              }
              v372 = v149;
              HIDWORD(v373) = v147;
              int v114 = v373;
            }
            else
            {
              v379[0] = *(void **)v102;
              *(_DWORD *)((char *)v379 + 7) = *(_DWORD *)((char *)v102 + 7);
              uint64_t v115 = (char *)v372 + 32 * v373;
              *((void *)v115 + 3) = 0;
              uint64_t v116 = (char *)operator new(0x20uLL);
              *(void *)uint64_t v116 = &unk_1F261BE20;
              *((void *)v116 + 1) = a2;
              *((_DWORD *)v116 + 4) = v98;
              *(void **)(v116 + 20) = v379[0];
              *(_DWORD *)(v116 + 27) = *(_DWORD *)((char *)v379 + 7);
              *((void *)v115 + 3) = v116;
            }
            unsigned int v15 = v360;
            LODWORD(v373) = v114 + 1;
LABEL_151:
            ++v93;
            v92 += 12;
            --v96;
          }
          while (v354 != v92);
        }
        uint64_t v12 = a5;
        int v152 = v351;
        if (!a2[24] || v336 == EVT && (v336 || !v334)) {
          goto LABEL_443;
        }
        uint64_t v153 = *(void *)a3 + 152 * v363;
        uint64_t v154 = *(_DWORD **)(v153 + 112);
        uint64_t v155 = *(unsigned int *)(v153 + 120);
        uint64_t v156 = *(int **)(v153 + 80);
        uint64_t v157 = *(unsigned int *)(v153 + 88);
        int v158 = **(_DWORD **)(v153 + 8);
        unint64_t v369 = v368;
        unint64_t v370 = v337;
        if (v368 == v337) {
          goto LABEL_443;
        }
        uint64_t v355 = a6[3];
        __srca = v154;
        uint64_t v159 = sub_1CB8F1DC4(&v369);
        int v161 = v160;
        if (v159 == sub_1CB8F1DC4(&v370) && v161 == v162 && v155 == 1 && v157 == 1)
        {
          int v164 = *v156;
          LODWORD(__dst) = *__srca;
          DWORD2(__dst) = 1;
          LODWORD(v379[0]) = v164;
          LODWORD(v379[2]) = 0;
          (*(void (**)(void *, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a6 + 32))(a6, 82, &__dst, 1, v379, 1, 0);
          goto LABEL_204;
        }
        uint64_t v347 = v157;
        unint64_t v165 = v369;
        unint64_t v166 = v369 & 0xFFFFFFFFFFFFFFF9;
        if ((v369 & 0xFFFFFFFFFFFFFFF9) != 0) {
          int v167 = (v369 >> 2) & 1;
        }
        else {
          int v167 = 0;
        }
        unint64_t v168 = v370;
        unint64_t v169 = v370 & 0xFFFFFFFFFFFFFFF9;
        unint64_t v170 = v370 & 4;
        unint64_t v171 = (v370 >> 2) & 1;
        if ((v370 & 0xFFFFFFFFFFFFFFF9) == 0) {
          LODWORD(v171) = 0;
        }
        if (v167 != v171
          || ((int v152 = v351, (v369 & 1) != 0)
            ? (unsigned int v172 = v369 >> 3)
            : (v369 & 4) != 0
            ? ((v369 & 2) != 0
             ? (unsigned int v172 = (unsigned __int16)(v369 >> 19))
             : (unsigned int v172 = v369 >> 19))
            : (unsigned int v172 = (unsigned __int16)(v369 >> 3)),
              (v370 & 1) != 0
            ? (unsigned int v173 = v370 >> 3)
            : (v370 & 4) != 0
            ? ((v370 & 2) != 0
             ? (unsigned int v173 = (unsigned __int16)(v370 >> 19))
             : (unsigned int v173 = v370 >> 19))
            : (unsigned int v173 = (unsigned __int16)(v370 >> 3)),
              v172 <= v173))
        {
LABEL_241:
          if (v170 && v169)
          {
            unint64_t v179 = v165 & 4;
            goto LABEL_246;
          }
          if (v166)
          {
            unint64_t v179 = v165 & 4;
            if ((v165 & 4) != 0)
            {
LABEL_246:
              if (v166 && v179)
              {
                v379[0] = &v379[2];
                v379[1] = (void *)0xC00000000;
                sub_1CB925718((unsigned int *)v379, v156, &v156[v347]);
                unint64_t v181 = sub_1CB8F1DC4(&v369);
                if (v180 == 1) {
                unint64_t v183 = sub_1CB8F1DC4(&v370);
                }
                if (v182 == 1) {
                if (v181 > v183)
                }
                {
                  if (v369)
                  {
                    int v184 = v369 >> 3;
                  }
                  else if ((v369 & 4) != 0)
                  {
                    int v184 = (v369 & 2) != 0 ? (unsigned __int16)(v369 >> 19) : v369 >> 19;
                  }
                  else
                  {
                    int v184 = (unsigned __int16)(v369 >> 3);
                  }
                  if (v370)
                  {
                    int v234 = v370 >> 3;
                  }
                  else if ((v370 & 4) != 0)
                  {
                    int v234 = (v370 & 2) != 0 ? (unsigned __int16)(v370 >> 19) : v370 >> 19;
                  }
                  else
                  {
                    int v234 = (unsigned __int16)(v370 >> 3);
                  }
                  if (v184 == 2 * v234 && v347 == 1)
                  {
                    if ((v370 & 2) != 0)
                    {
                      char v318 = 19;
                      char v319 = 35;
                      if ((v370 & 4) == 0) {
                        char v319 = 19;
                      }
                      unint64_t v320 = v370 >> v319;
                      if ((v370 & 4) == 0) {
                        char v318 = 3;
                      }
                      if (v370) {
                        char v318 = 3;
                      }
                      unint64_t v299 = (8 * (unsigned __int16)(v370 >> v318)) & 0xFFFFF8000007FFFFLL | ((v320 & 0xFFFFFF) << 19) | 2;
                    }
                    else
                    {
                      char v298 = 3;
                      if ((v370 & 1) == 0) {
                        char v298 = 19;
                      }
                      unint64_t v299 = v370 & 0x8000000000000000 | (8 * (v370 >> v298)) | 1;
                    }
                    *(void *)&long long __dst = sub_1CD6133A0(&v369, v299);
                    uint64_t v300 = 0x800000000000000;
                    if ((v369 & 2) == 0) {
                      uint64_t v300 = 0x8000000000000;
                    }
                    unint64_t v301 = sub_1CD6133E4((unint64_t *)&__dst, (v369 >> 2) & 0x1FFFE | ((unint64_t)((v300 & v369) != 0) << 32));
                    int v302 = *v156;
                    *(void *)&long long v375 = v301;
                    DWORD2(v375) = 0;
                    LODWORD(__dst) = v302;
                    LODWORD(v378[0]) = 0;
                    (*(void (**)(void *, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*a6 + 32))(a6, 82, &v375, 1, &__dst, 1, 0);
                    *(_DWORD *)v379[0] = *(_DWORD *)(*(void *)(v303 + 32) + 4);
                    unint64_t v369 = v301;
                  }
                }
                unint64_t v235 = v370;
                if ((v370 & 0xFFFFFFFFFFFFFFF9) != 0)
                {
                  unint64_t v235 = v370;
                  if ((v370 & 4) != 0)
                  {
                    char v236 = 3;
                    if ((v370 & 1) == 0) {
                      char v236 = 19;
                    }
                    unint64_t v237 = v370 >> v236;
                    if ((v370 & 2) != 0) {
                      unint64_t v235 = (v370 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v237) | 2;
                    }
                    else {
                      unint64_t v235 = v370 & 0x8000000000000000 | (8 * v237) | 1;
                    }
                  }
                }
                if ((v369 & 2) != 0)
                {
                  char v312 = 19;
                  char v313 = 35;
                  if ((v369 & 4) == 0) {
                    char v313 = 19;
                  }
                  unint64_t v314 = v369 >> v313;
                  if ((v369 & 4) == 0) {
                    char v312 = 3;
                  }
                  if (v369) {
                    char v312 = 3;
                  }
                  unint64_t v239 = (8 * (unsigned __int16)(v369 >> v312)) & 0xFFFFF8000007FFFFLL | ((v314 & 0xFFFFFF) << 19) | 2;
                }
                else
                {
                  char v238 = 3;
                  if ((v369 & 1) == 0) {
                    char v238 = 19;
                  }
                  unint64_t v239 = v369 & 0x8000000000000000 | (8 * (v369 >> v238)) | 1;
                }
                if (v235 == v239)
                {
                  v240 = (int *)v379[0];
                  uint64_t v241 = LODWORD(v379[1]);
                }
                else
                {
                  unint64_t v242 = sub_1CC73F3C4(v370, v369);
                  v240 = (int *)v379[0];
                  if (LODWORD(v379[1]))
                  {
                    unint64_t v243 = v242;
                    unint64_t v244 = 0;
                    uint64_t v245 = 4 * LODWORD(v379[1]);
                    do
                    {
                      int v246 = v240[v244 / 4];
                      *(void *)&long long v375 = v243;
                      DWORD2(v375) = 0;
                      LODWORD(__dst) = v246;
                      LODWORD(v378[0]) = 0;
                      (*(void (**)(void *, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*a6 + 32))(a6, 82, &v375, 1, &__dst, 1, 0);
                      v248 = (int *)v379[0];
                      *(_DWORD *)((char *)v379[0] + v244) = *(_DWORD *)(*(void *)(v247 + 32) + 4);
                      v244 += 4;
                    }
                    while (v245 != v244);
                    uint64_t v241 = LODWORD(v379[1]);
                    v240 = v248;
                  }
                  else
                  {
                    uint64_t v241 = 0;
                  }
                }
                uint64_t v249 = a6[3];
                int v250 = *__srca;
                if ((*__srca & 0x80000000) != 0 && (v250 & 0x7FFFFFFFu) < *(_DWORD *)(v249 + 432)) {
                  unint64_t v251 = *(void *)(*(void *)(v249 + 424) + 8 * (v250 & 0x7FFFFFFF));
                }
                else {
                  unint64_t v251 = 0;
                }
                *(void *)&long long v364 = v251;
                int v343 = *v240;
                if (*v240 < 0 && (uint64_t v252 = *v240 & 0x7FFFFFFF, v252 < *(_DWORD *)(v249 + 432))) {
                  unint64_t v253 = *(void *)(*(void *)(v249 + 424) + 8 * v252);
                }
                else {
                  unint64_t v253 = 0;
                }
                unint64_t v254 = sub_1CC73F250(v251, v253);
                unint64_t v371 = v254;
                if (v254 == v251)
                {
                  LODWORD(__dst) = v250;
                  DWORD2(__dst) = 1;
                  sub_1CC738F60((uint64_t)a6, (uint64_t)&__dst, v240, v241);
                }
                else
                {
                  if (v254 == v253)
                  {
                    unint64_t v256 = sub_1CB8F1DC4(&v371);
                    if (v255 == 1) {
                    unint64_t v258 = sub_1CB8F1DC4((unint64_t *)&v364);
                    }
                    if (v257 == 1) {
                    unint64_t v356 = v256 / v258;
                    }
                    *(void *)&long long __dst = v378;
                    *((void *)&__dst + 1) = 0x800000000;
                    sub_1CBA0E058((uint64_t)&__dst, (int)(v256 / v258), 0);
                    if (v155) {
                      memmove((void *)__dst, __srca, 4 * v155);
                    }
                    if (v155 != v356)
                    {
                      uint64_t v259 = (int)v155;
                      do
                      {
                        uint64_t v260 = v364;
                        unsigned int v261 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v249, "", 0);
                        unint64_t v262 = v261 & 0x7FFFFFFF;
                        *(void *)(*(void *)(v249 + 24) + 16 * v262) = 4;
                        unint64_t v263 = *(unsigned int *)(v249 + 432);
                        if (v262 >= v263)
                        {
                          unint64_t v264 = v262 + 1;
                          uint64_t v265 = *(void *)(v249 + 440);
                          if (v262 >= *(unsigned int *)(v249 + 436)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          int v266 = *(_DWORD *)(v249 + 432);
                          if (v264 != v263)
                          {
                            unsigned int v267 = (void *)(*(void *)(v249 + 424) + 8 * *(unsigned int *)(v249 + 432));
                            uint64_t v268 = ~v262 + v263;
                            do
                            {
                              *v267++ = v265;
                              BOOL v40 = __CFADD__(v268++, 1);
                            }
                            while (!v40);
                            int v266 = *(_DWORD *)(v249 + 432);
                          }
                          *(_DWORD *)(v249 + 432) = v266 + v264 - v263;
                        }
                        *(void *)(*(void *)(v249 + 424) + 8 * v262) = v260;
                        uint64_t v269 = *(void *)(v249 + 8);
                        if (v269) {
                          (*(void (**)(uint64_t, void))(*(void *)v269 + 24))(v269, v261);
                        }
                        *(_DWORD *)(__dst + 4 * v259++) = v261;
                      }
                      while (v259 != v356);
                    }
                    if (DWORD2(__dst) == 1)
                    {
                      *(_DWORD *)v366 = *__srca;
                      *(_DWORD *)&v366[8] = 1;
                      LODWORD(v375) = v343;
                      LODWORD(v376) = 0;
                      sub_1CD62D47C(a6, (unint64_t *)v366, (int *)&v375);
                    }
                    else
                    {
                      LODWORD(v375) = v343;
                      LODWORD(v376) = 0;
                      sub_1CC738BB8((uint64_t)a6, (char *)__dst, DWORD2(__dst), (uint64_t)&v375);
                    }
                    uint64_t v12 = a5;
                    unsigned int v15 = v360;
                    int v152 = v351;
                    if ((void *)__dst != v378) {
                      free((void *)__dst);
                    }
                    goto LABEL_372;
                  }
                  LODWORD(v375) = v250;
                  DWORD2(v375) = 1;
                  *(void *)v366 = v254;
                  *(_DWORD *)&v366[8] = 0;
                  *(void *)&long long __dst = sub_1CC73661C((uint64_t)a6, (uint64_t)v366, v240, v241);
                  *((void *)&__dst + 1) = v304;
                  LODWORD(v378[0]) = 1;
                  sub_1CD62D47C(a6, (unint64_t *)&v375, (int *)&__dst);
                }
                int v152 = v351;
LABEL_372:
                int v203 = (void **)v379[0];
LABEL_373:
                if (v203 != &v379[2]) {
LABEL_374:
                }
                  free(v203);
LABEL_443:
                int v42 = v152 - 1;
                goto LABEL_444;
              }
              if ((v168 & 2) != 0)
              {
                BOOL v308 = v170 == 0;
                char v309 = 19;
                char v310 = 35;
                if (v308) {
                  char v310 = 19;
                }
                unint64_t v311 = v168 >> v310;
                if (v308) {
                  char v309 = 3;
                }
                if (v168) {
                  char v309 = 3;
                }
                unint64_t v186 = (8 * (unsigned __int16)(v168 >> v309)) & 0xFFFFF8000007FFFFLL | ((v311 & 0xFFFFFF) << 19) | 2;
              }
              else
              {
                char v185 = 3;
                if ((v168 & 1) == 0) {
                  char v185 = 19;
                }
                unint64_t v186 = v168 & 0x8000000000000000 | (8 * (v168 >> v185)) | 1;
              }
              *(void *)v366 = v186;
              int v187 = *__srca;
              if ((*__srca & 0x80000000) != 0 && (v187 & 0x7FFFFFFFu) < *(_DWORD *)(v355 + 432))
              {
                unint64_t v188 = *(void *)(*(void *)(v355 + 424) + 8 * (v187 & 0x7FFFFFFF));
                if ((v188 & 2) != 0)
                {
                  char v189 = 19;
                  char v190 = 35;
                  if ((v188 & 4) == 0) {
                    char v190 = 19;
                  }
                  unint64_t v191 = v188 >> v190;
                  if ((v188 & 4) == 0) {
                    char v189 = 3;
                  }
                  if (v188) {
                    char v189 = 3;
                  }
                  unint64_t v192 = (8 * (unsigned __int16)(v188 >> v189)) & 0xFFFFF8000007FFFFLL | ((v191 & 0xFFFFFF) << 19) | 2;
LABEL_274:
                  if (v186 == v165)
                  {
                    uint64_t v194 = v347;
                    if ((v192 & 0xFFFFFFFFFFFFFFF9) != 0 && (v192 & 2) != 0 && (v192 & 4) == 0)
                    {
                      if (!v347)
                      {
                        int v202 = 0;
                        LODWORD(__dst) = *__srca;
                        DWORD2(__dst) = 1;
                        v379[0] = &v379[2];
                        HIDWORD(v379[1]) = 8;
                        int v152 = v351;
LABEL_287:
                        LODWORD(v379[1]) = v202 + v194;
                        (*(void (**)(void *, uint64_t, long long *, uint64_t))(*a6 + 32))(a6, 77, &__dst, 1);
                        int v203 = (void **)v379[0];
                        goto LABEL_373;
                      }
                      uint64_t v195 = 4 * v347;
                      unsigned int v196 = v156;
                      do
                      {
                        int v197 = *v196++;
                        llvm::MachineRegisterInfo::setType(v355, v197, v192);
                        v195 -= 4;
                      }
                      while (v195);
                      int v187 = *__srca;
                      uint64_t v194 = v347;
                    }
                    LODWORD(__dst) = v187;
                    DWORD2(__dst) = 1;
                    v379[0] = &v379[2];
                    v379[1] = (void *)0x800000000;
                    int v152 = v351;
                    if (v194 >= 9) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    if (v194)
                    {
                      uint64_t v198 = 0;
                      uint64_t v199 = 4 * v194;
                      do
                      {
                        int v200 = *v156++;
                        int64_t v201 = &v379[v198 + 2];
                        *(_DWORD *)int64_t v201 = v200;
                        *((_DWORD *)v201 + 4) = 0;
                        v198 += 3;
                        v199 -= 4;
                      }
                      while (v199);
                      int v202 = (int)v379[1];
                    }
                    else
                    {
                      int v202 = 0;
                    }
                    goto LABEL_287;
                  }
                  unint64_t v207 = sub_1CB8F1DC4((unint64_t *)v366);
                  if (v206 == 1) {
                  unint64_t v209 = sub_1CB8F1DC4(&v369);
                  }
                  if (v208 == 1) {
                  if (v207 > v209)
                  }
                  {
                    *(void *)&long long __dst = v378;
                    *((void *)&__dst + 1) = 0x800000000;
                    unint64_t v211 = sub_1CB8F1DC4((unint64_t *)v366);
                    if (v210 == 1) {
                    unint64_t v213 = sub_1CB8F1DC4(&v369);
                    }
                    if (v212 == 1) {
                    unsigned int v214 = v370;
                    }
                    uint64_t v215 = 0x800000000000000;
                    if ((v370 & 2) == 0) {
                      uint64_t v215 = 0x8000000000000;
                    }
                    if ((v215 & v370) != 0)
                    {
                      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v212);
                      unsigned int v214 = v370;
                    }
                    v216 = __srca;
                    int v217 = (unsigned __int16)(v214 >> 3);
                    if ((unsigned __int16)(v214 >> 3))
                    {
                      unint64_t v218 = (int)(v211 / v213);
                      unint64_t v219 = v347;
                      do
                      {
                        v379[0] = (void *)v192;
                        LODWORD(v379[1]) = 0;
                        unint64_t v220 = v219 - v218;
                        if (v219 >= v218) {
                          uint64_t v221 = v218;
                        }
                        else {
                          uint64_t v221 = v219;
                        }
                        sub_1CC73661C((uint64_t)a6, (uint64_t)v379, v156, v221);
                        uint64_t v223 = v222;
                        llvm::MachineRegisterInfo::setType(v355, *(_DWORD *)(*(void *)(v222 + 32) + 4), v192);
                        int v224 = *(_DWORD *)(*(void *)(v223 + 32) + 4);
                        if (DWORD2(__dst) >= (unint64_t)HIDWORD(__dst)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *(_DWORD *)(__dst + 4 * DWORD2(__dst)) = v224;
                        unsigned int v225 = ++DWORD2(__dst);
                        v156 += v218;
                        unint64_t v219 = v220;
                        --v217;
                      }
                      while (v217);
                      v216 = __srca;
                    }
                    else
                    {
                      unsigned int v225 = DWORD2(__dst);
                    }
                    LODWORD(v375) = *v216;
                    DWORD2(v375) = 1;
                    unint64_t v275 = (int *)__dst;
                    uint64_t v276 = v225;
                    v379[0] = &v379[2];
                    v379[1] = (void *)0x800000000;
                    if (v225 >= 9) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    if (v225)
                    {
                      uint64_t v277 = 0;
                      uint64_t v278 = 4 * v276;
                      do
                      {
                        int v279 = *v275++;
                        uint64_t v280 = &v379[v277 + 2];
                        *(_DWORD *)uint64_t v280 = v279;
                        *((_DWORD *)v280 + 4) = 0;
                        v277 += 3;
                        v278 -= 4;
                      }
                      while (v278);
                      int v281 = (int)v379[1];
                    }
                    else
                    {
                      int v281 = 0;
                    }
                    LODWORD(v379[1]) = v281 + v276;
                    (*(void (**)(void *, uint64_t, long long *, uint64_t, void **))(*a6 + 32))(a6, 77, &v375, 1, &v379[2]);
                    if (v379[0] != &v379[2]) {
                      free(v379[0]);
                    }
                    int v203 = (void **)__dst;
                    int v152 = v351;
                    if ((void *)__dst == v378) {
                      goto LABEL_443;
                    }
                    goto LABEL_374;
                  }
                  unint64_t v227 = v370;
                  uint64_t v228 = 0x800000000000000;
                  if ((v370 & 2) == 0) {
                    uint64_t v228 = 0x8000000000000;
                  }
                  if ((v228 & v370) != 0)
                  {
                    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v208);
                    unint64_t v227 = v370;
                  }
                  *(void *)&long long __dst = sub_1CBA5A95C((unsigned __int16)(v227 >> 3), v369);
                  DWORD2(__dst) = 0;
                  v379[0] = &v379[2];
                  v379[1] = (void *)0x800000000;
                  if (v347 >= 9) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v347)
                  {
                    uint64_t v229 = 0;
                    uint64_t v230 = 4 * v347;
                    do
                    {
                      int v231 = *v156++;
                      unsigned int v232 = &v379[v229 + 2];
                      *(_DWORD *)unsigned int v232 = v231;
                      *((_DWORD *)v232 + 4) = 0;
                      v229 += 3;
                      v230 -= 4;
                    }
                    while (v230);
                    int v233 = (int)v379[1];
                  }
                  else
                  {
                    int v233 = 0;
                  }
                  LODWORD(v379[1]) = v233 + v347;
                  int64_t v286 = (void *)(*(uint64_t (**)(void *, uint64_t, long long *, uint64_t, void **))(*a6 + 32))(a6, 77, &__dst, 1, &v379[2]);
                  int v288 = v287;
                  if (v379[0] != &v379[2]) {
                    free(v379[0]);
                  }
                  LODWORD(__dst) = *__srca;
                  DWORD2(__dst) = 1;
                  v379[0] = v286;
                  v379[1] = v288;
                  goto LABEL_425;
                }
              }
              else
              {
                unint64_t v188 = 0;
              }
              char v193 = 3;
              if ((v188 & 1) == 0) {
                char v193 = 19;
              }
              unint64_t v192 = v188 & 0x8000000000000000 | (8 * (v188 >> v193)) | 1;
              goto LABEL_274;
            }
          }
          if ((*__srca & 0x80000000) != 0)
          {
            uint64_t v226 = *__srca & 0x7FFFFFFF;
            uint64_t v205 = v347;
            if (v226 >= *(_DWORD *)(v355 + 432)) {
              uint64_t v204 = 0;
            }
            else {
              uint64_t v204 = *(void *)(*(void *)(v355 + 424) + 8 * v226);
            }
          }
          else
          {
            uint64_t v204 = 0;
            uint64_t v205 = v347;
          }
          *(void *)&long long v375 = v204;
          int v270 = sub_1CB8F1DC4(&v369);
          uint64_t v272 = sub_1CB8F1DC4((unint64_t *)&v375);
          if (v271 == 1) {
          if (v270 * v205 != v272)
          }
          {
            v379[0] = (void *)((8 * (v270 * v205)) | 1);
            LODWORD(v379[1]) = 0;
            v273 = (void *)sub_1CC73661C((uint64_t)a6, (uint64_t)v379, v156, v205);
            LODWORD(__dst) = *__srca;
            DWORD2(__dst) = 1;
            v379[0] = v273;
            v379[1] = v274;
LABEL_425:
            LODWORD(v379[2]) = 1;
            (*(void (**)(void *, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a6 + 32))(a6, 119, &__dst, 1, v379, 1, 0);
            goto LABEL_204;
          }
          LODWORD(v379[0]) = *__srca;
          LODWORD(v379[1]) = 1;
          sub_1CC73661C((uint64_t)a6, (uint64_t)v379, v156, v205);
LABEL_204:
          int v152 = v351;
          goto LABEL_443;
        }
        if (v167)
        {
          uint64_t v174 = 0x800000000000000;
          if ((v369 & 2) == 0) {
            uint64_t v174 = 0x8000000000000;
          }
          if ((v174 & v369) != 0)
          {
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v162);
            LODWORD(v165) = v369;
            unint64_t v168 = v370;
          }
          uint64_t v175 = 0x800000000000000;
          if ((v168 & 2) == 0) {
            uint64_t v175 = 0x8000000000000;
          }
          if ((v175 & v168) != 0)
          {
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v162);
            unint64_t v168 = v370;
          }
          if ((unsigned __int16)(v165 >> 3) != (unsigned __int16)(v168 >> 3)
            || v155 != 1
            || v347 != 1)
          {
            unint64_t v165 = v369;
            unint64_t v169 = v168 & 0xFFFFFFFFFFFFFFF9;
            unint64_t v170 = v168 & 4;
            unint64_t v166 = v369 & 0xFFFFFFFFFFFFFFF9;
            goto LABEL_241;
          }
        }
        else if (v155 != 1 || v347 != 1)
        {
          goto LABEL_241;
        }
        int v176 = *v156;
        if (*v156 < 0)
        {
          uint64_t v178 = v355;
          if ((v176 & 0x7FFFFFFFu) >= *(_DWORD *)(v355 + 432)) {
            uint64_t v177 = 0;
          }
          else {
            uint64_t v177 = *(void *)(*(void *)(v355 + 424) + 8 * (v176 & 0x7FFFFFFF));
          }
        }
        else
        {
          uint64_t v177 = 0;
          uint64_t v178 = v355;
        }
        unint64_t v282 = __srca;
        if ((v158 & 2) != 0)
        {
          *(void *)&long long v375 = v177;
          DWORD2(v375) = 0;
          LODWORD(__dst) = v176;
          LODWORD(v378[0]) = 0;
          if (v168)
          {
            unint64_t v283 = (v168 >> 3);
          }
          else if ((v168 & 4) != 0)
          {
            if ((v168 & 2) != 0) {
              unint64_t v283 = (unsigned __int16)(v168 >> 19);
            }
            else {
              unint64_t v283 = (v168 >> 19);
            }
          }
          else
          {
            unint64_t v283 = (unsigned __int16)(v168 >> 3);
          }
          uint64_t v284 = (llvm::MachineFunction *)(*(uint64_t (**)(void *, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*a6 + 32))(a6, 42, &v375, 1, &__dst, 1, 0);
        }
        else
        {
          if ((v158 & 1) == 0)
          {
LABEL_434:
            if ((*v282 & 0x80000000) != 0 && (uint64_t v290 = *v282 & 0x7FFFFFFF, v290 < *(_DWORD *)(v178 + 432)))
            {
              uint64_t v291 = *(void *)(*(void *)(v178 + 424) + 8 * v290);
              *(void *)&long long v364 = v291;
              if ((v291 & 0xFFFFFFFFFFFFFFF9) != 0 && (v291 & 6) == 2)
              {
                unsigned int v293 = sub_1CB8F1DC4((unint64_t *)&v364);
                if (v292 == 1) {
                uint64_t v294 = (8 * v293) | 1;
                }
                int v295 = *__srca;
                *(void *)v366 = v294;
                *(_DWORD *)&v366[8] = 0;
                LODWORD(__dst) = v176;
                LODWORD(v378[0]) = 0;
                v296 = (void *)(*(uint64_t (**)(void *, uint64_t, unsigned char *, uint64_t, long long *, uint64_t, void))(*a6 + 32))(a6, 119, v366, 1, &__dst, 1, 0);
                LODWORD(v375) = v295;
                DWORD2(v375) = 1;
                v379[0] = v296;
                v379[1] = v297;
                LODWORD(v379[2]) = 1;
                (*(void (**)(void *, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a6 + 32))(a6, 81, &v375, 1, v379, 1, 0);
                goto LABEL_204;
              }
            }
            else
            {
              *(void *)&long long v364 = 0;
            }
            LODWORD(__dst) = *v282;
            DWORD2(__dst) = 1;
            LODWORD(v379[0]) = v176;
            LODWORD(v379[2]) = 0;
            (*(void (**)(void *, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a6 + 32))(a6, 119, &__dst, 1, v379, 1, 0);
            goto LABEL_443;
          }
          *(void *)&long long v375 = v177;
          DWORD2(v375) = 0;
          LODWORD(__dst) = v176;
          LODWORD(v378[0]) = 0;
          if (v168)
          {
            unint64_t v283 = (v168 >> 3);
          }
          else if ((v168 & 4) != 0)
          {
            if ((v168 & 2) != 0) {
              unint64_t v283 = (unsigned __int16)(v168 >> 19);
            }
            else {
              unint64_t v283 = (v168 >> 19);
            }
          }
          else
          {
            unint64_t v283 = (unsigned __int16)(v168 >> 3);
          }
          uint64_t v284 = (llvm::MachineFunction *)(*(uint64_t (**)(void *, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*a6 + 32))(a6, 43, &v375, 1, &__dst, 1, 0);
        }
        unsigned int v289 = v285;
        LODWORD(v379[0]) = 1;
        v379[1] = 0;
        v379[2] = (void *)v283;
        llvm::MachineInstr::addOperand(v285, v284, (const llvm::MachineOperand *)v379);
        int v176 = *(_DWORD *)(*((void *)v289 + 4) + 4);
        int v152 = v351;
        unint64_t v282 = __srca;
        goto LABEL_434;
      }
      uint64_t v43 = *(void *)a3 + 152 * v363;
      int v44 = *(char **)(v43 + 80);
      uint64_t v45 = *(unsigned int *)(v43 + 88);
      int v46 = **(_DWORD **)(v43 + 112);
      int v47 = **(_DWORD **)(v43 + 8);
      if (v47) {
        unsigned int v48 = 126;
      }
      else {
        unsigned int v48 = 118;
      }
      if ((v47 & 2) != 0) {
        uint64_t v49 = 124;
      }
      else {
        uint64_t v49 = v48;
      }
      *(void *)&long long v375 = v337;
      *(void *)v366 = v367;
      unsigned int v51 = sub_1CB8F1DC4((unint64_t *)v366);
      if (v50 == 1) {
      unint64_t v52 = *(void *)v366;
      }
      uint64_t v53 = (*(void *)v366 >> 2) & 1;
      if ((*(void *)v366 & 0xFFFFFFFFFFFFFFF9) == 0) {
        LODWORD(v53) = 0;
      }
      unint64_t v54 = v375;
      unint64_t v55 = ((unint64_t)v375 >> 2) & 1;
      if ((v375 & 0xFFFFFFFFFFFFFFF9) == 0) {
        LODWORD(v55) = 0;
      }
      uint64_t v56 = a6;
      if (v53 == v55)
      {
        if (v366[0])
        {
          unsigned int v57 = *(void *)v366 >> 3;
        }
        else if ((v366[0] & 4) != 0)
        {
          unsigned int v57 = (v366[0] & 2) != 0 ? (unsigned __int16)(*(void *)v366 >> 19) : *(void *)v366 >> 19;
        }
        else
        {
          unsigned int v57 = (unsigned __int16)(*(void *)v366 >> 3);
        }
        if (v375)
        {
          unsigned int v58 = (unint64_t)v375 >> 3;
        }
        else if ((v375 & 4) != 0)
        {
          unsigned int v58 = (v375 & 2) != 0 ? (unsigned __int16)((unint64_t)v375 >> 19) : (unint64_t)v375 >> 19;
        }
        else
        {
          unsigned int v58 = (unsigned __int16)((unint64_t)v375 >> 3);
        }
        if (v57 > v58)
        {
          LODWORD(__dst) = *(_DWORD *)v44;
          DWORD2(__dst) = 1;
          LODWORD(v379[0]) = v46;
          LODWORD(v379[2]) = 0;
          (*(void (**)(void *, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a6 + 32))(a6, v49, &__dst, 1, v379, 1, 0);
LABEL_115:
          unint64_t v26 = v351;
          goto LABEL_116;
        }
      }
      if (((v53 | v55 ^ 1) & 1) == 0)
      {
        char v59 = 3;
        if ((v375 & 1) == 0) {
          char v59 = 19;
        }
        unint64_t v60 = (unint64_t)v375 >> v59;
        if ((v375 & 2) != 0) {
          int v61 = (void *)(((unint64_t)v375 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v60) | 2);
        }
        else {
          int v61 = (void *)(v375 & 0x8000000000000000 | (8 * v60) | 1);
        }
        v379[0] = v61;
        unint64_t v63 = sub_1CB8F1DC4((unint64_t *)v379);
        if (v62 == 1) {
        unint64_t v54 = v375;
        }
        if (v51 > v63)
        {
          if ((v375 & 2) != 0)
          {
            char v315 = 19;
            char v316 = 35;
            if ((v375 & 4) == 0) {
              char v316 = 19;
            }
            unint64_t v317 = (unint64_t)v375 >> v316;
            if ((v375 & 4) == 0) {
              char v315 = 3;
            }
            if (v375) {
              char v315 = 3;
            }
            unint64_t v65 = (8 * (unsigned __int16)((unint64_t)v375 >> v315)) & 0xFFFFF8000007FFFFLL | ((v317 & 0xFFFFFF) << 19) | 2;
          }
          else
          {
            char v64 = 3;
            if ((v375 & 1) == 0) {
              char v64 = 19;
            }
            unint64_t v65 = v375 & 0x8000000000000000 | (8 * ((unint64_t)v375 >> v64)) | 1;
          }
          LODWORD(v379[0]) = v46;
          LODWORD(v379[2]) = 0;
          sub_1CC7363F0(a6, v65, (int *)v379);
          if (v45)
          {
            uint64_t v67 = v66;
            uint64_t v68 = 0;
            do
            {
              int v69 = *(_DWORD *)v44;
              v44 += 4;
              LODWORD(__dst) = v69;
              DWORD2(__dst) = 1;
              LODWORD(v379[0]) = *(_DWORD *)(*(void *)(v67 + 32) + v68 + 4);
              LODWORD(v379[2]) = 0;
              (*(void (**)(void *, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a6 + 32))(a6, 118, &__dst, 1, v379, 1, 0);
              v68 += 32;
            }
            while (32 * v45 != v68);
          }
          goto LABEL_115;
        }
        unint64_t v52 = *(void *)v366;
      }
      if (sub_1CC73F3C4(v54, v52) == v52)
      {
        LODWORD(v379[0]) = v46;
      }
      else
      {
        if ((*(_DWORD *)v44 & 0x80000000) != 0
          && (uint64_t v70 = a6[3], v71 = *(_DWORD *)v44 & 0x7FFFFFFF, v71 < *(_DWORD *)(v70 + 432)))
        {
          uint64_t v72 = *(void *)(*(void *)(v70 + 424) + 8 * v71);
        }
        else
        {
          uint64_t v72 = 0;
        }
        *(void *)&long long v364 = v72;
        unint64_t v371 = sub_1CC73F250(v54, v52);
        unsigned int v74 = sub_1CB8F1DC4((unint64_t *)&v364);
        if (v73 == 1) {
        unsigned int v76 = sub_1CB8F1DC4((unint64_t *)&v375);
        }
        if (v75 == 1) {
        LODWORD(v78) = sub_1CB8F1DC4(&v371);
        }
        if (v77 == 1) {
        unint64_t v79 = (v371 >> 2) & 1;
        }
        if ((v371 & 0xFFFFFFFFFFFFFFF9) == 0) {
          LOBYTE(v79) = 0;
        }
        if ((v79 & 1) != 0 || (uint64_t v80 = v49, v81 = v76 - v78, v76 == v78))
        {
          int v85 = v46;
        }
        else if (v375 & 1) != 0 && (v364)
        {
          unint64_t v78 = (v74 + (unint64_t)v76 - 1) / v74 * v74;
          *(void *)&long long __dst = (8 * ((v74 + (unint64_t)v76 - 1) / v74) * v74) | 1;
          DWORD2(__dst) = 0;
          LODWORD(v379[0]) = v46;
          LODWORD(v379[2]) = 0;
          (*(void (**)(void *, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a6 + 32))(a6, v80, &__dst, 1, v379, 1, 0);
          int v85 = *(_DWORD *)(*(void *)(v87 + 32) + 4);
        }
        else
        {
          v379[0] = (void *)v375;
          LODWORD(v379[1]) = 0;
          (*(void (**)(void *, uint64_t, void **, uint64_t, void, void, void))(*a6 + 32))(a6, 68, v379, 1, 0, 0, 0);
          int v83 = *(_DWORD *)(*(void *)(v82 + 32) + 4);
          v379[0] = &v379[2];
          v379[1] = (void *)0x800000000;
          sub_1CBA0E058((uint64_t)v379, 1uLL, v46);
          LODWORD(v84) = v379[1];
          do
          {
            if (v84 >= HIDWORD(v379[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v379[0] + v84) = v83;
            uint64_t v84 = ++LODWORD(v379[1]);
            v81 += v76;
          }
          while (v81);
          *(void *)&long long __dst = v371;
          DWORD2(__dst) = 0;
          uint64_t v56 = a6;
          sub_1CC73661C((uint64_t)a6, (uint64_t)&__dst, (int *)v379[0], v84);
          int v85 = *(_DWORD *)(*(void *)(v86 + 32) + 4);
          if (v379[0] != &v379[2]) {
            free(v379[0]);
          }
        }
        if ((v371 & 0xFFFFFFFFFFFFFFF9) != 0 && (v371 & 4) != 0 && v78 != v76)
        {
          *(void *)&long long __dst = v371;
          DWORD2(__dst) = 0;
          LODWORD(v379[0]) = v46;
          LODWORD(v379[2]) = 0;
          sub_1CD62D20C(v56, (uint64_t *)&__dst, (int *)v379);
          int v85 = *(_DWORD *)(*(void *)(v88 + 32) + 4);
        }
        LODWORD(v379[0]) = v85;
      }
      LODWORD(v379[2]) = 0;
      sub_1CC738BB8((uint64_t)v56, v44, v45, (uint64_t)v379);
      goto LABEL_115;
    }
    v379[3] = 0;
    int v42 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, unint64_t, void **))(*(void *)a2 + 56))(a2, *(void *)a3 + 152 * v363, v16 + 12 * v14, *((unsigned int *)v12 + 2) - (unint64_t)v14, v379);
    if (v379[3])
    {
      if (v373 >= HIDWORD(v373))
      {
        if (HIDWORD(v373) == -1) {
LABEL_522:
        }
          sub_1CD0A89A8(0xFFFFFFFFuLL);
        if (((2 * HIDWORD(v373)) | 1uLL) >= 0xFFFFFFFF) {
          uint64_t v305 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v305 = (2 * HIDWORD(v373)) | 1;
        }
        uint64_t v306 = malloc_type_malloc(32 * v305, 0x4065EBACuLL);
        if (!v306) {
LABEL_523:
        }
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        int v307 = v306;
        sub_1CC3DAE00((uint64_t)v306 + 32 * v373, (uint64_t)v379);
        sub_1CC6EADF4((unsigned int *)&v372, (uint64_t)v307);
        if (v372 != v374) {
          free(v372);
        }
        v372 = v307;
        HIDWORD(v373) = v305;
      }
      else
      {
        sub_1CC3DAE00((uint64_t)v372 + 32 * v373, (uint64_t)v379);
      }
      LODWORD(v373) = v373 + 1;
      if (v379[3] == v379)
      {
        (*((void (**)(void **))v379[0] + 4))(v379);
      }
      else if (v379[3])
      {
        (*(void (**)(void))(*(void *)v379[3] + 40))();
      }
    }
    if (!v42)
    {
      uint64_t v324 = 0;
      goto LABEL_509;
    }
LABEL_444:
    unsigned int v14 = v15 + v42 + 1;
    ++v363;
  }
  while (v363 != v338);
  unsigned int v321 = v372;
  if (v373)
  {
    uint64_t v322 = 32 * v373;
    unsigned int v323 = (char *)v372 + 24;
    do
    {
      if (!*v323) {
        sub_1CB920400();
      }
      (*(void (**)(void))(*(void *)*v323 + 48))(*v323);
      v323 += 4;
      v322 -= 32;
    }
    while (v322);
    uint64_t v324 = 1;
LABEL_509:
    unsigned int v321 = v372;
    if (v373)
    {
      uint64_t v325 = 32 * v373;
      uint64_t v326 = (char *)v372 - 32;
      do
      {
        unsigned int v327 = *(char **)&v326[v325 + 24];
        if (&v326[v325] == v327)
        {
          (*(void (**)(char *))(*(void *)&v326[v325] + 32))(&v326[v325]);
        }
        else if (v327)
        {
          (*(void (**)(char *))(*(void *)v327 + 40))(v327);
        }
        v325 -= 32;
      }
      while (v325);
      unsigned int v321 = v372;
    }
  }
  else
  {
    uint64_t v324 = 1;
  }
  if (v321 != v374) {
    free(v321);
  }
  return v324;
}

uint64_t sub_1CC6EA2D4(uint64_t a1, uint64_t a2)
{
  v10[40] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = **(llvm::LLVMContext ****)(*(void *)(*(void *)a2 + 24) + 16);
  uint64_t v6 = (*(unsigned __int16 *)(*(void *)a2 + 18) >> 4) & 0x3FF;
  v9[0] = (char *)v10;
  v9[1] = (char *)0x400000000;
  sub_1CC6E6D48(a1, v6, v5, v4[14], v9, (llvm::DataLayout *)(v4[5] + 272));
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char **, BOOL))(*(void *)a1 + 32))(a1, a2, v6, v9, *(_DWORD *)(v4[3] + 8) > 0xFFu);
  sub_1CC6EABE8(v9);
  return v7;
}

uint64_t sub_1CC6EA3D8(int a1, llvm::DataLayout *this, uint64_t a3, int a4, unsigned int a5)
{
  int v6 = *(unsigned __int8 *)(a3 + 9);
  if (v6 == 254) {
    return (8 * (unsigned __int16)llvm::DataLayout::getPointerSize(this, a5)) & 0xFFFFF8000007FFFFLL | ((unint64_t)(a5 & 0xFFFFFF) << 19) | 2;
  }
  llvm::LLT::LLT(&v12, *(unsigned char *)(a3 + 9));
  uint64_t result = v12;
  if (a4 < 0)
  {
    unsigned __int16 v9 = v12 >> 19;
    if ((v12 & 2) == 0) {
      unsigned __int16 v9 = v12 >> 19;
    }
    if ((v12 & 4) == 0) {
      unsigned __int16 v9 = v12 >> 3;
    }
    if (v12) {
      unsigned __int16 v9 = v12 >> 3;
    }
    unint64_t v10 = (8 * v9) & 0xFFFFF8000007FFFFLL | ((*(void *)&a5 & 0xFFFFFFLL) << 19) | 2;
    if ((v6 - 15) <= 0x9B)
    {
      uint64_t v11 = 0x800000000000000;
      if ((v12 & 2) == 0) {
        uint64_t v11 = 0x8000000000000;
      }
      return sub_1CBA5A95C((unsigned __int16)(v12 >> 3) | ((unint64_t)((v11 & v12) != 0) << 32), v10);
    }
    else
    {
      return (8 * v9) & 0xFFFFF8000007FFFFLL | ((*(void *)&a5 & 0xFFFFFFLL) << 19) | 2;
    }
  }
  return result;
}

uint64_t sub_1CC6EA4B4(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  llvm::LLT::LLT((unint64_t *)&v44, a3[10]);
  llvm::LLT::LLT(&v43, a3[9]);
  uint64_t v8 = sub_1CB8F1DC4((unint64_t *)&v44);
  unint64_t v10 = v9;
  if (v8 == sub_1CB8F1DC4(&v43) && v10 == v11) {
    return a2;
  }
  if (!a4 || (v44 & 1) == 0) {
    goto LABEL_11;
  }
  unint64_t v10 = a4;
  a4 = sub_1CB8F1DC4((unint64_t *)&v44);
  if (v11 == 1) {
LABEL_50:
  }
  if (a4 <= v10) {
    goto LABEL_11;
  }
  a4 = sub_1CB8F1DC4(&v43);
  if (v11 == 1) {
  if (a4 < v10)
  }
  {
    uint64_t v44 = (8 * v10) | 1;
LABEL_11:
    if ((a2 & 0x80000000) != 0
      && (uint64_t v12 = *(void *)(a1 + 16), (a2 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v12 + 432)))
    {
      unint64_t v42 = *(void *)(*(void *)(v12 + 424) + 8 * (a2 & 0x7FFFFFFF));
      if ((v42 & 0xFFFFFFFFFFFFFFF9) != 0 && (v42 & 6) == 2)
      {
        a4 = sub_1CB8F1DC4(&v42);
        if (v14 == 1) {
        uint64_t v15 = *(void *)(a1 + 8);
        }
        uint64_t v47 = (8 * a4) | 1;
        int v48 = 0;
        v45[0] = a2;
        int v46 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)v15 + 32))(v15, 80, &v47, 1, v45, 1, 0);
        a2 = *(unsigned int *)(*(void *)(v11 + 32) + 4);
      }
    }
    else
    {
      unint64_t v42 = 0;
    }
    switch(a3[8] >> 2)
    {
      case 1:
        uint64_t v16 = *(void *)(a1 + 16);
        unint64_t v17 = v44;
        uint64_t IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v16, "", 0);
        unint64_t v19 = IncompleteVirtualRegister & 0x7FFFFFFF;
        *(void *)(*(void *)(v16 + 24) + 16 * v19) = 4;
        unint64_t v20 = *(unsigned int *)(v16 + 432);
        if (v19 >= v20)
        {
          uint64_t v21 = *(void *)(v16 + 440);
          uint64_t v22 = v19 + 1 - v20;
          if (v19 >= *(unsigned int *)(v16 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v23 = *(_DWORD *)(v16 + 432);
          if (v22)
          {
            int v24 = (void *)(*(void *)(v16 + 424) + 8 * *(unsigned int *)(v16 + 432));
            uint64_t v25 = ~v19 + v20;
            do
            {
              *v24++ = v21;
              BOOL v26 = __CFADD__(v25++, 1);
            }
            while (!v26);
            int v23 = *(_DWORD *)(v16 + 432);
          }
          *(_DWORD *)(v16 + 432) = v23 + v22;
        }
        *(void *)(*(void *)(v16 + 424) + 8 * v19) = v17;
        uint64_t v27 = *(void *)(v16 + 8);
        if (v27) {
          (*(void (**)(uint64_t))(*(void *)v27 + 24))(v27);
        }
        goto LABEL_45;
      case 2:
        uint64_t v30 = *(void *)(a1 + 16);
        unint64_t v31 = v44;
        uint64_t IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v30, "", 0);
        unint64_t v32 = IncompleteVirtualRegister & 0x7FFFFFFF;
        *(void *)(*(void *)(v30 + 24) + 16 * v32) = 4;
        unint64_t v33 = *(unsigned int *)(v30 + 432);
        if (v32 >= v33)
        {
          uint64_t v34 = *(void *)(v30 + 440);
          uint64_t v35 = v32 + 1 - v33;
          if (v32 >= *(unsigned int *)(v30 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v36 = *(_DWORD *)(v30 + 432);
          if (v35)
          {
            int v37 = (void *)(*(void *)(v30 + 424) + 8 * *(unsigned int *)(v30 + 432));
            uint64_t v38 = ~v32 + v33;
            do
            {
              *v37++ = v34;
              BOOL v26 = __CFADD__(v38++, 1);
            }
            while (!v26);
            int v36 = *(_DWORD *)(v30 + 432);
          }
          *(_DWORD *)(v30 + 432) = v36 + v35;
        }
        *(void *)(*(void *)(v30 + 424) + 8 * v32) = v31;
        uint64_t v39 = *(void *)(v30 + 8);
        if (v39) {
          (*(void (**)(uint64_t))(*(void *)v39 + 24))(v39);
        }
LABEL_45:
        uint64_t v40 = *(void *)(a1 + 8);
        LODWORD(v47) = IncompleteVirtualRegister;
        int v48 = 1;
        v45[0] = a2;
        int v46 = 0;
        (*(void (**)(void))(*(void *)v40 + 32))();
        a2 = IncompleteVirtualRegister;
        break;
      case 3:
        uint64_t v28 = *(void *)(a1 + 8);
        uint64_t v47 = v44;
        int v48 = 0;
        v45[0] = a2;
        int v46 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)v28 + 32))(v28, 118, &v47, 1, v45, 1, 0);
        a2 = *(unsigned int *)(*(void *)(v29 + 32) + 4);
        break;
      case 4:
      case 5:
      case 6:
        __break(1u);
        goto LABEL_50;
      default:
        return a2;
    }
  }
  return a2;
}

void *sub_1CC6EA9DC(void *a1)
{
  int v2 = (void *)a1[14];
  if (v2 != a1 + 16) {
    free(v2);
  }
  unint64_t v3 = (void *)a1[10];
  if (v3 != a1 + 12) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[1];
  if (v4 != a1 + 3) {
    free(v4);
  }
  return a1;
}

void sub_1CC6EAA4C()
{
}

__n128 sub_1CC6EAA60(uint64_t a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *(void *)int v2 = &unk_1F261BD90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC6EAAAC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F261BD90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CC6EAADC(uint64_t a1, int *a2)
{
  return llvm::CallBase::paramHasAttr(*(void *)(a1 + 8), **(_DWORD **)(a1 + 16), *a2);
}

void sub_1CC6EAAF4()
{
}

__n128 sub_1CC6EAB08(uint64_t a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *(void *)int v2 = &unk_1F261BDD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC6EAB54(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F261BDD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CC6EAB84(uint64_t a1, int *a2)
{
  uint64_t v2 = **(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = **(_DWORD **)(a1 + 16) + 1;
  if (v3 >= *(_DWORD *)(v2 + 8)) {
    return 0;
  }
  uint64_t v5 = *(void *)(v2 + 8 * v3 + 40);
  if (!v5) {
    return 0;
  }
  int v6 = *a2 + 7;
  if (*a2 >= 0) {
    int v6 = *a2;
  }
  return (*(unsigned __int8 *)(v5 + (v6 >> 3) + 12) >> (*a2 & 7)) & 1;
}

char **sub_1CC6EABE8(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v5 = 80 * v3;
    do
    {
      int v6 = *(char **)&v2[v5 - 72];
      if (&v2[v5 - 56] != v6)
      {
        uint64_t v7 = v5;
        uint64_t v8 = v2;
        free(v6);
        uint64_t v5 = v7;
        uint64_t v2 = v8;
      }
      v5 -= 80;
    }
    while (v5);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CC6EAC74(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = a1 + 24;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0x400000000;
  if (*(_DWORD *)(a2 + 16)) {
    sub_1CB9276BC(v4, a2 + 8);
  }
  char v5 = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = a1 + 96;
  *(unsigned char *)(a1 + 72) = v5;
  *(void *)(a1 + 88) = 0x400000000;
  if (*(_DWORD *)(a2 + 88)) {
    sub_1CB927804(a1 + 80, a2 + 80);
  }
  *(void *)(a1 + 112) = a1 + 128;
  *(void *)(a1 + 120) = 0x200000000;
  if (*(_DWORD *)(a2 + 120)) {
    sub_1CB927804(a1 + 112, a2 + 112);
  }
  uint64_t v6 = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 136) = v6;
  return a1;
}

uint64_t sub_1CC6EAD34(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = a1 + 24;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0x400000000;
  if (*(_DWORD *)(a2 + 16)) {
    sub_1CB927924(v4, a2 + 8);
  }
  char v5 = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = a1 + 96;
  *(unsigned char *)(a1 + 72) = v5;
  *(void *)(a1 + 88) = 0x400000000;
  if (*(_DWORD *)(a2 + 88)) {
    sub_1CB927A18(a1 + 80, a2 + 80);
  }
  *(void *)(a1 + 112) = a1 + 128;
  *(void *)(a1 + 120) = 0x200000000;
  if (*(_DWORD *)(a2 + 120)) {
    sub_1CB927A18(a1 + 112, a2 + 112);
  }
  uint64_t v6 = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 136) = v6;
  return a1;
}

unsigned int *sub_1CC6EADF4(unsigned int *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2)
  {
    uint64_t v3 = *(void *)result;
    uint64_t v4 = 32 * v2;
    do
    {
      uint64_t v5 = *(void *)(v3 + 24);
      if (v5)
      {
        if (v3 == v5)
        {
          *(void *)(a2 + 24) = a2;
          uint64_t v10 = v4;
          uint64_t v11 = v3;
          unint64_t v9 = result;
          uint64_t v13 = a2;
          (*(void (**)(void))(**(void **)(v3 + 24) + 24))(*(void *)(v3 + 24));
          uint64_t v4 = v10;
          uint64_t v3 = v11;
          a2 = v13;
          __n128 result = v9;
        }
        else
        {
          *(void *)(a2 + 24) = v5;
          *(void *)(v3 + 24) = 0;
        }
      }
      else
      {
        *(void *)(a2 + 24) = 0;
      }
      v3 += 32;
      a2 += 32;
      v4 -= 32;
    }
    while (v4);
    uint64_t v6 = result[2];
    if (v6)
    {
      uint64_t v7 = 32 * v6;
      uint64_t v8 = *(void *)result - 32;
      while (1)
      {
        __n128 result = *(unsigned int **)(v8 + v7 + 24);
        if ((unsigned int *)(v8 + v7) == result) {
          break;
        }
        if (result)
        {
          uint64_t v14 = v7;
          uint64_t v12 = v8;
          __n128 result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)result + 40))(result, a2);
          goto LABEL_17;
        }
LABEL_11:
        v7 -= 32;
        if (!v7) {
          return result;
        }
      }
      uint64_t v14 = v7;
      uint64_t v12 = v8;
      __n128 result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 + v7) + 32))(v8 + v7, a2);
LABEL_17:
      uint64_t v8 = v12;
      uint64_t v7 = v14;
      goto LABEL_11;
    }
  }
  return result;
}

void sub_1CC6EAF3C()
{
}

__n128 sub_1CC6EAF50(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F261BE20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CC6EAFA4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F261BE20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CC6EAFDC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 24), *(void *)(a1 + 20), *(unsigned int *)(a1 + 28));
}

uint64_t sub_1CC6EB014(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 != result)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      *(void *)(a3 + v6 - 152) = *(void *)(a2 + v6 - 152);
      sub_1CB9276BC(a3 + v6 - 144, a2 + v6 - 144);
      *(unsigned char *)(v7 - 80) = *(unsigned char *)(a2 + v6 - 80);
      sub_1CB927804(a3 + v6 - 72, a2 + v6 - 72);
      __n128 result = sub_1CB927804(a3 + v6 - 40, a2 + v6 - 40);
      int v8 = *(_DWORD *)(a2 + v6 - 8);
      *(void *)(v7 - 16) = *(void *)(a2 + v6 - 16);
      *(_DWORD *)(v7 - 8) = v8;
      v6 -= 152;
    }
    while (a2 + v6 != v5);
  }
  return result;
}

void *sub_1CC6EB0B8(void *result, uint64_t a2, uint64_t a3)
{
  *__n128 result = a2;
  result[1] = 0;
  result[2] = a3;
  result[3] = 0;
  return result;
}

uint64_t sub_1CC6EB0C4()
{
  MEMORY[0x1F4188790]();
  if ((**(unsigned char **)(v0 + 360) & 0x10) == 0) {
    operator new();
  }
  return 0;
}

void sub_1CC6EBBBC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v19[16] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)a1 + 328);
  uint64_t v12 = v16;
  uint64_t v13 = v16;
  int v15 = 0;
  uint64_t v14 = 0x100000008;
  unint64_t v17 = v19;
  v16[0] = v3;
  uint64_t v4 = *(void *)(v3 + 88);
  v19[0] = v3;
  v19[1] = v4;
  uint64_t v18 = 0x800000001;
  sub_1CB93B280((llvm::SmallPtrSetImplBase *)&v12);
  v9[0] = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v11 = 0;
  memset(v8, 0, sizeof(v8));
  uint64_t v5 = (char *)v8 + 8;
  uint64_t v6 = (char *)v8 + 8;
  uint64_t v7 = 8;
  v9[1] = (char *)v10 + 8;
  DWORD1(v10[0]) = 8;
  sub_1CC6EC198((uint64_t)&v12, (uint64_t)&v5, a2);
  if (v9[1] != (char *)v10 + 8) {
    free(v9[1]);
  }
  if (v6 != v5) {
    free(v6);
  }
  if (v17 != v19) {
    free(v17);
  }
  if (v13 != v12) {
    free(v13);
  }
}

void *sub_1CC6EBD1C(void *a1)
{
  *a1 = &unk_1F261BE68;
  uint64_t v2 = (void *)a1[11];
  if (v2 != (void *)a1[10]) {
    free(v2);
  }
  *a1 = &unk_1F25F0A58;
  uint64_t v3 = (void *)a1[2];
  if (v3 != (void *)a1[1]) {
    free(v3);
  }
  return a1;
}

void sub_1CC6EBD9C(void *a1)
{
  sub_1CC6EBD1C(a1);

  JUMPOUT(0x1D25D9CE0);
}

int32x2_t sub_1CC6EBDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int32x2_t **)(a1 + 72);
  int32x2_t v3 = v2[514];
  uint64_t v4 = v2[516].u32[0];
  if (v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v6 = *(void *)&v3 + 16 * v5;
    uint64_t v7 = *(void *)v6;
    if (*(void *)v6 == a2) {
      goto LABEL_8;
    }
    int v8 = 1;
    while (v7 != -4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & (v4 - 1);
      uint64_t v7 = *(void *)(*(void *)&v3 + 16 * v5);
      if (v7 == a2)
      {
        uint64_t v6 = *(void *)&v3 + 16 * v5;
        goto LABEL_8;
      }
    }
  }
  uint64_t v6 = *(void *)&v3 + 16 * v4;
LABEL_8:
  if (v6 != *(void *)&v3 + 16 * v4)
  {
    *(void *)(*(void *)v2 + 8 * *(unsigned int *)(v6 + 8)) = 0;
    *(void *)uint64_t v6 = -8192;
    int32x2_t result = vadd_s32(v2[515], (int32x2_t)0x1FFFFFFFFLL);
    v2[515] = result;
  }
  return result;
}

void *sub_1CC6EBE74(void *result, uint64_t a2)
{
  uint64_t v2 = result[9];
  uint64_t v16 = a2;
  int v3 = *(_DWORD *)(v2 + 8);
  int v4 = *(_DWORD *)(v2 + 4128);
  if (v4)
  {
    uint64_t v5 = *(void *)(v2 + 4112);
    int v6 = v4 - 1;
    unsigned int v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    int v8 = (void *)(v5 + 16 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a2) {
      return result;
    }
    uint64_t v10 = 0;
    int v11 = 1;
    while (v9 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v9 == -8192;
      }
      if (v12) {
        uint64_t v10 = v8;
      }
      unsigned int v13 = v7 + v11++;
      unsigned int v7 = v13 & v6;
      int v8 = (void *)(v5 + 16 * v7);
      uint64_t v9 = *v8;
      if (*v8 == a2) {
        return result;
      }
    }
    if (v10) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = v8;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  int32x2_t result = sub_1CB9A052C(v2 + 4112, (uint64_t)&v16, &v16, v14);
  *int32x2_t result = v16;
  *((_DWORD *)result + 2) = v3;
  unsigned int v15 = *(_DWORD *)(v2 + 8);
  if (v15 >= *(_DWORD *)(v2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v2 + 8 * v15) = v16;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

void *sub_1CC6EBF80(void *result, uint64_t a2)
{
  uint64_t v2 = result[9];
  uint64_t v16 = a2;
  int v3 = *(_DWORD *)(v2 + 8);
  int v4 = *(_DWORD *)(v2 + 4128);
  if (v4)
  {
    uint64_t v5 = *(void *)(v2 + 4112);
    int v6 = v4 - 1;
    unsigned int v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    int v8 = (void *)(v5 + 16 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a2) {
      return result;
    }
    uint64_t v10 = 0;
    int v11 = 1;
    while (v9 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v9 == -8192;
      }
      if (v12) {
        uint64_t v10 = v8;
      }
      unsigned int v13 = v7 + v11++;
      unsigned int v7 = v13 & v6;
      int v8 = (void *)(v5 + 16 * v7);
      uint64_t v9 = *v8;
      if (*v8 == a2) {
        return result;
      }
    }
    if (v10) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = v8;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  int32x2_t result = sub_1CB9A052C(v2 + 4112, (uint64_t)&v16, &v16, v14);
  *int32x2_t result = v16;
  *((_DWORD *)result + 2) = v3;
  unsigned int v15 = *(_DWORD *)(v2 + 8);
  if (v15 >= *(_DWORD *)(v2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v2 + 8 * v15) = v16;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

void *sub_1CC6EC08C(void *result, uint64_t a2)
{
  uint64_t v2 = result[9];
  uint64_t v16 = a2;
  int v3 = *(_DWORD *)(v2 + 8);
  int v4 = *(_DWORD *)(v2 + 4128);
  if (v4)
  {
    uint64_t v5 = *(void *)(v2 + 4112);
    int v6 = v4 - 1;
    unsigned int v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    int v8 = (void *)(v5 + 16 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a2) {
      return result;
    }
    uint64_t v10 = 0;
    int v11 = 1;
    while (v9 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v9 == -8192;
      }
      if (v12) {
        uint64_t v10 = v8;
      }
      unsigned int v13 = v7 + v11++;
      unsigned int v7 = v13 & v6;
      int v8 = (void *)(v5 + 16 * v7);
      uint64_t v9 = *v8;
      if (*v8 == a2) {
        return result;
      }
    }
    if (v10) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = v8;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  int32x2_t result = sub_1CB9A052C(v2 + 4112, (uint64_t)&v16, &v16, v14);
  *int32x2_t result = v16;
  *((_DWORD *)result + 2) = v3;
  unsigned int v15 = *(_DWORD *)(v2 + 8);
  if (v15 >= *(_DWORD *)(v2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v2 + 8 * v15) = v16;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

void sub_1CC6EC198(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v45[16] = *MEMORY[0x1E4F143B8];
  uint64_t v38 = v42;
  unsigned int v7 = *(unsigned char **)a1;
  int v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    uint64_t v39 = v42;
    uint64_t v8 = *(unsigned int *)(a1 + 20);
    if (v8) {
      memmove(v42, v6, 8 * v8);
    }
  }
  else
  {
    uint64_t v39 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  LODWORD(v40) = *(_DWORD *)(a1 + 16);
  HIDWORD(v40) = v8;
  int v41 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  unint64_t v43 = v45;
  unint64_t v44 = 0x800000000;
  unsigned int v9 = *(_DWORD *)(a1 + 104);
  if (v9 && &v38 != (unsigned char **)a1)
  {
    uint64_t v10 = *(const void **)(a1 + 96);
    if (v10 == (const void *)(a1 + 112))
    {
      if (v9 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v45, v10, 16 * *(unsigned int *)(a1 + 104));
      LODWORD(v44) = v9;
    }
    else
    {
      unint64_t v43 = *(void **)(a1 + 96);
      unint64_t v44 = __PAIR64__(*(_DWORD *)(a1 + 108), v9);
      *(void *)(a1 + 96) = a1 + 112;
      *(_DWORD *)(a1 + 108) = 0;
    }
    *(_DWORD *)(a1 + 104) = 0;
  }
  uint64_t v30 = v34;
  BOOL v12 = *(unsigned char **)a2;
  int v11 = *(const void **)(a2 + 8);
  if (v11 == *(const void **)a2)
  {
    unint64_t v31 = v34;
    uint64_t v13 = *(unsigned int *)(a2 + 20);
    if (v13) {
      memmove(v34, v11, 8 * v13);
    }
  }
  else
  {
    unint64_t v31 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = v12;
    LODWORD(v13) = *(_DWORD *)(a2 + 20);
  }
  LODWORD(v32) = *(_DWORD *)(a2 + 16);
  HIDWORD(v32) = v13;
  int v33 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v35 = v37;
  unint64_t v36 = 0x800000000;
  unsigned int v14 = *(_DWORD *)(a2 + 104);
  if (v14 && &v30 != (unsigned char **)a2)
  {
    unsigned int v15 = *(const void **)(a2 + 96);
    if (v15 == (const void *)(a2 + 112))
    {
      if (v14 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v37, v15, 16 * *(unsigned int *)(a2 + 104));
      LODWORD(v36) = v14;
    }
    else
    {
      uint64_t v35 = *(void **)(a2 + 96);
      unint64_t v36 = __PAIR64__(*(_DWORD *)(a2 + 108), v14);
      *(void *)(a2 + 96) = a2 + 112;
      *(_DWORD *)(a2 + 108) = 0;
    }
    *(_DWORD *)(a2 + 104) = 0;
  }
  uint64_t v16 = (void *)(a3 + 32);
  *(void *)a3 = a3 + 32;
  uint64_t v18 = v38;
  unint64_t v17 = v39;
  if (v39 == v38)
  {
    *(void *)(a3 + 8) = v16;
    int v19 = HIDWORD(v40);
    if (HIDWORD(v40)) {
      memmove(v16, v17, 8 * HIDWORD(v40));
    }
  }
  else
  {
    *(void *)(a3 + 8) = v39;
    uint64_t v39 = v18;
    int v19 = HIDWORD(v40);
  }
  int v20 = v41;
  *(_DWORD *)(a3 + 16) = v40;
  *(_DWORD *)(a3 + 20) = v19;
  *(_DWORD *)(a3 + 24) = v20;
  uint64_t v40 = 8;
  *(void *)(a3 + 96) = a3 + 112;
  int v41 = 0;
  *(void *)(a3 + 104) = 0x800000000;
  int v21 = v44;
  if (v44 && &v38 != (unsigned char **)a3)
  {
    if (v43 == v45)
    {
      if (v44 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a3 + 112), v45, 16 * v44);
      *(_DWORD *)(a3 + 104) = v21;
    }
    else
    {
      *(void *)(a3 + 96) = v43;
      int v29 = HIDWORD(v44);
      *(_DWORD *)(a3 + 104) = v21;
      *(_DWORD *)(a3 + 108) = v29;
      unint64_t v43 = v45;
      HIDWORD(v44) = 0;
    }
    LODWORD(v44) = 0;
  }
  uint64_t v22 = (void *)(a3 + 272);
  *(void *)(a3 + 240) = a3 + 272;
  int v24 = v30;
  int v23 = v31;
  if (v31 == v30)
  {
    *(void *)(a3 + 248) = v22;
    int v25 = HIDWORD(v32);
    if (HIDWORD(v32)) {
      memmove(v22, v23, 8 * HIDWORD(v32));
    }
  }
  else
  {
    *(void *)(a3 + 248) = v31;
    unint64_t v31 = v24;
    int v25 = HIDWORD(v32);
  }
  int v26 = v33;
  *(_DWORD *)(a3 + 256) = v32;
  *(_DWORD *)(a3 + 260) = v25;
  *(_DWORD *)(a3 + 264) = v26;
  uint64_t v32 = 8;
  int v33 = 0;
  *(void *)(a3 + 336) = a3 + 352;
  *(void *)(a3 + 344) = 0x800000000;
  uint64_t v27 = v35;
  if ((unsigned char **)(a3 + 240) != &v30)
  {
    int v28 = v36;
    if (v36)
    {
      if (v35 == v37)
      {
        if (v36 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(a3 + 352), v37, 16 * v36);
        *(_DWORD *)(a3 + 344) = v28;
        uint64_t v27 = v35;
      }
      else
      {
        *(void *)(a3 + 336) = v35;
        *(_DWORD *)(a3 + 344) = v28;
        *(_DWORD *)(a3 + 348) = HIDWORD(v36);
        uint64_t v35 = v37;
        HIDWORD(v36) = 0;
        uint64_t v27 = v37;
      }
      LODWORD(v36) = 0;
    }
  }
  if (v27 != v37) {
    free(v27);
  }
  if (v31 != v30) {
    free(v31);
  }
  if (v43 != v45) {
    free(v43);
  }
  if (v39 != v38) {
    free(v39);
  }
}

void *sub_1CC6EC618(void *result, int a2)
{
  if (a2)
  {
    unint64_t v2 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v3 = v2 | (v2 >> 2) | ((v2 | (v2 >> 2)) >> 4);
    unsigned int v4 = ((v3 | (v3 >> 8)) >> 16) | v3 | (v3 >> 8);
    if (*((_DWORD *)result + 4) <= v4) {
      return sub_1CB9A06A8((uint64_t)result, v4 + 1);
    }
  }
  return result;
}

void *sub_1CC6EC664()
{
  qword_1EBCD9B18 = (uint64_t)"GlobalISel Combiner";
  unk_1EBCD9B20 = 19;
  qword_1EBCD9B28 = (uint64_t)"Control the rules which are enabled. These options all take a comma separated list of rules"
                             " to disable and may be specified by number or number range (e.g. 1-10).";
  unk_1EBCD9B30 = 162;
  return llvm::cl::OptionCategory::registerCategory((llvm::cl::OptionCategory *)&qword_1EBCD9B18);
}

unint64_t *sub_1CC6EC690(uint64_t *a1, void *a2, unsigned int a3, unsigned int a4)
{
  sub_1CC6EE548(a1[2], (uint64_t)a2, a3);
  if (llvm::MachineRegisterInfo::constrainRegAttrs((uint64_t)a2, a4, a3, 0))
  {
    llvm::MachineRegisterInfo::replaceRegWith(a2, a3, a4);
  }
  else
  {
    uint64_t v10 = *a1;
    v12[0] = a4;
    v12[2] = 1;
    v11[0] = a3;
    v11[4] = 0;
    (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, void))(*(void *)v10 + 32))(v10, 19, v12, 1, v11, 1, 0);
  }
  return sub_1CC6EE76C((llvm::SmallPtrSetImplBase *)a1[2]);
}

uint64_t sub_1CC6EC770(uint64_t *a1, llvm::MachineInstr *this)
{
  if (**((_WORD **)this + 2) == 19)
  {
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = *(unsigned int *)(v3 + 4);
    unsigned int v5 = *(_DWORD *)(v3 + 36);
    if ((v4 - 1) >= 0x3FFFFFFF && v5 - 1 >= 0x3FFFFFFF)
    {
      uint64_t v8 = a1[1];
      if ((v4 & 0x80000000) != 0 && (v4 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v8 + 432)) {
        uint64_t v9 = *(void *)(*(void *)(v8 + 424) + 8 * (v4 & 0x7FFFFFFF));
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = (v5 & 0x80000000) != 0 && (v5 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v8 + 432)
          ? *(void *)(*(void *)(v8 + 424) + 8 * (v5 & 0x7FFFFFFF))
          : 0;
      if (v9 == v10)
      {
        uint64_t v11 = *(void *)(v8 + 24);
        unint64_t v12 = *(void *)(v11 + 16 * (v4 & 0x7FFFFFFF));
        if (v12 < 8 || v12 == *(void *)(v11 + 16 * (v5 & 0x7FFFFFFF)))
        {
          llvm::MachineInstr::eraseFromParent(this);
          uint64_t v13 = (void *)a1[1];
          sub_1CC6EE548(a1[2], (uint64_t)v13, v4);
          if (llvm::MachineRegisterInfo::constrainRegAttrs((uint64_t)v13, v5, v4, 0))
          {
            (*(void (**)(void))(**(void **)(*v13 + 16) + 176))(*(void *)(*v13 + 16));
            if ((v4 & 0x80000000) != 0) {
              unsigned int v14 = (uint64_t *)(v13[3] + 16 * (v4 & 0x7FFFFFFF) + 8);
            }
            else {
              unsigned int v14 = (uint64_t *)(v13[34] + 8 * v4);
            }
            uint64_t v15 = *v14;
            if (*v14)
            {
              do
              {
                uint64_t v16 = *(void *)(v15 + 24);
                llvm::MachineOperand::setReg(v15, v5);
                uint64_t v15 = v16;
              }
              while (v16);
            }
          }
          else
          {
            uint64_t v30 = *a1;
            v32[0] = v5;
            v32[2] = 1;
            v31[0] = v4;
            v31[4] = 0;
            (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, void))(*(void *)v30 + 32))(v30, 19, v32, 1, v31, 1, 0);
          }
          uint64_t v17 = a1[2];
          uint64_t v18 = *(char **)(v17 + 8);
          int v19 = *(char **)(v17 + 16);
          uint64_t v20 = 24;
          if (v19 == v18) {
            uint64_t v20 = 28;
          }
          uint64_t v21 = *(unsigned int *)(v17 + v20);
          uint64_t v22 = *(unint64_t **)(v17 + 16);
          if (v21)
          {
            uint64_t v23 = 0;
            while (*(void *)&v19[v23] >= 0xFFFFFFFFFFFFFFFELL)
            {
              v23 += 8;
              if (8 * v21 == v23) {
                goto LABEL_37;
              }
            }
            uint64_t v22 = (unint64_t *)&v19[v23];
          }
          int v24 = (unint64_t *)&v19[8 * v21];
          if (v22 != v24)
          {
            unint64_t v25 = *v22;
LABEL_32:
            (*(void (**)(uint64_t, unint64_t))(*(void *)v17 + 40))(v17, v25);
            int v26 = v22 + 1;
            while (v26 != v24)
            {
              unint64_t v27 = *v26++;
              unint64_t v25 = v27;
              if (v27 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                uint64_t v22 = v26 - 1;
                goto LABEL_32;
              }
            }
            uint64_t v18 = *(char **)(v17 + 8);
            int v19 = *(char **)(v17 + 16);
          }
LABEL_37:
          if (v19 != v18)
          {
            uint64_t v28 = *(unsigned int *)(v17 + 24);
            if (v28 >= 0x21 && 4 * (*(_DWORD *)(v17 + 28) - *(_DWORD *)(v17 + 32)) < v28)
            {
              llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(v17 + 8));
              return 1;
            }
            memset(v19, 255, 8 * v28);
          }
          *(_DWORD *)(v17 + 28) = 0;
          *(_DWORD *)(v17 + 32) = 0;
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CC6ECA4C(uint64_t *a1, llvm::MachineInstr *a2)
{
  v10[2] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v7 = 0;
  uint64_t v8 = v10;
  uint64_t v9 = 0x400000000;
  uint64_t result = sub_1CC6ECB1C(a1, (uint64_t)a2, &v7, (uint64_t)&v8);
  if (result)
  {
    unsigned int v6 = result;
    sub_1CD6135E0(a1, a2, v7, (int *)v8, v9);
    uint64_t result = v6;
  }
  if (v8 != v10)
  {
    uint64_t v5 = result;
    free(v8);
    return v5;
  }
  return result;
}

uint64_t sub_1CC6ECB1C(void *a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  *a3 = 1;
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 16);
  unsigned int v7 = *(unsigned __int8 *)(v6 + 4);
  uint64_t v8 = *(unsigned int *)(a2 + 40);
  if ((*(unsigned char *)(v6 + 8) & 2) != 0)
  {
    if (v8 == v7) {
      return 1;
    }
    unsigned int v9 = *(unsigned __int8 *)(v6 + 4);
    do
    {
      int v27 = *(_DWORD *)(v5 + 32 * v7);
      if ((v27 & 0x10000FF) != 0x1000000) {
        break;
      }
      v9 += (v27 & 0x2000000) == 0;
      if (v8 - 1 == v7) {
        break;
      }
      ++v7;
    }
    while ((v27 & 0x2000000) == 0);
  }
  else
  {
    unsigned int v9 = *(unsigned __int8 *)(v6 + 4);
  }
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v5 + 32 * v8;
    uint64_t v12 = v5 + 32 * v9;
    do
    {
      uint64_t v13 = *(unsigned int *)(v12 + 4);
      uint64_t v14 = a1[1];
      if ((v13 & 0x80000000) != 0) {
        uint64_t v15 = (uint64_t *)(*(void *)(v14 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v15 = (uint64_t *)(*(void *)(v14 + 272) + 8 * v13);
      }
      uint64_t v16 = *v15;
      if ((*(unsigned char *)(v16 + 3) & 1) == 0) {
        uint64_t v16 = *(void *)(v16 + 24);
      }
      uint64_t v17 = *(void *)(v16 + 8);
      int v18 = **(unsigned __int16 **)(v17 + 16);
      if (v18 == 68)
      {
        uint64_t v35 = v12;
        uint64_t v36 = v11;
        uint64_t v38 = a1;
        uint64_t v39 = a2;
        int v37 = a3;
        if ((v13 & 0x80000000) != 0
          && (v13 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v14 + 432))
        {
          uint64_t v28 = *(void *)(*(void *)(v14 + 424) + 8 * (v13 & 0x7FFFFFFF));
        }
        else
        {
          uint64_t v28 = 0;
        }
        uint64_t v40 = v28;
        if (!v10)
        {
          uint64_t v33 = *v38;
          *(void *)(v33 + 40) = *(void *)(a2 + 24);
          *(void *)(v33 + 48) = a2;
          uint64_t v34 = *v38;
          if ((v28 & 0xFFFFFFFFFFFFFFF9) != 0 && (v28 & 4) != 0) {
            uint64_t v28 = sub_1CBA15978((unint64_t *)&v40);
          }
          uint64_t v41 = v28;
          int v42 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void, void, void))(*(void *)v34 + 32))(v34, 68, &v41, 1, 0, 0, 0);
          uint64_t v10 = a2;
          uint64_t v28 = v40;
        }
        uint64_t v29 = 0x800000000000000;
        if ((v28 & 2) == 0) {
          uint64_t v29 = 0x8000000000000;
        }
        if ((v29 & v28) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
          LODWORD(v28) = v40;
        }
        int v20 = (unsigned __int16)(v28 >> 3);
        if ((unsigned __int16)(v28 >> 3))
        {
          unsigned int v19 = *(_DWORD *)(a4 + 8);
          do
          {
            if (v19 >= *(_DWORD *)(a4 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*(void *)a4 + 4 * v19) = *(_DWORD *)(*(void *)(v10 + 32) + 4);
            unsigned int v19 = *(_DWORD *)(a4 + 8) + 1;
            *(_DWORD *)(a4 + 8) = v19;
            --v20;
          }
          while (v20);
        }
      }
      else
      {
        if (v18 != 77) {
          return 0;
        }
        uint64_t v35 = v12;
        uint64_t v36 = v11;
        uint64_t v38 = a1;
        uint64_t v39 = a2;
        int v37 = a3;
        *a3 = 0;
        uint64_t v30 = *(void *)(v17 + 32);
        unsigned int NumExplicitDefs = llvm::MachineInstr::getNumExplicitDefs((llvm::MachineInstr *)v17);
        uint64_t v32 = *(unsigned int *)(v17 + 40);
        if (NumExplicitDefs != v32)
        {
          unsigned int v24 = *(_DWORD *)(a4 + 8);
          uint64_t v25 = 32 * v32 - 32 * NumExplicitDefs;
          uint64_t v21 = (int *)(v30 + 32 * NumExplicitDefs + 4);
          do
          {
            int v23 = *v21;
            v21 += 8;
            int v22 = v23;
            if (v24 >= *(_DWORD *)(a4 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*(void *)a4 + 4 * v24) = v22;
            unsigned int v24 = *(_DWORD *)(a4 + 8) + 1;
            *(_DWORD *)(a4 + 8) = v24;
            v25 -= 32;
          }
          while (v25);
        }
      }
      uint64_t v11 = v36;
      uint64_t v12 = v35 + 32;
      a3 = v37;
      a1 = v38;
      a2 = v39;
    }
    while (v35 + 32 != v36);
  }
  return 1;
}

uint64_t sub_1CC6ECE68(uint64_t *a1, llvm::MachineInstr *a2)
{
  v8[2] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = v8;
  uint64_t v7 = 0x400000000;
  uint64_t v4 = sub_1CC6ECF20(a1, (uint64_t)a2, (uint64_t)&v6);
  if (v4) {
    sub_1CC6ED280(a1, a2, (int *)v6, v7);
  }
  if (v6 != v8) {
    free(v6);
  }
  return v4;
}

uint64_t sub_1CC6ECF20(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[1];
  uint64_t v7 = *(void *)(a2 + 32);
  int v8 = *(_DWORD *)(v7 + 4);
  if (v8 < 0 && (uint64_t v9 = v8 & 0x7FFFFFFF, v9 < *(_DWORD *)(v6 + 432))) {
    uint64_t v10 = *(void *)(*(void *)(v6 + 424) + 8 * v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v11 = *(_DWORD *)(v7 + 36);
  if (v11 < 0 && (v11 & 0x7FFFFFFFu) < *(_DWORD *)(v6 + 432)) {
    uint64_t v12 = *(void *)(*(void *)(v6 + 424) + 8 * (v11 & 0x7FFFFFFF));
  }
  else {
    uint64_t v12 = 0;
  }
  unsigned int v13 = 1;
  if ((v10 & 0xFFFFFFFFFFFFFFF9) != 0 && (v10 & 4) != 0)
  {
    uint64_t v14 = 0x800000000000000;
    if ((v10 & 2) == 0) {
      uint64_t v14 = 0x8000000000000;
    }
    if ((v14 & v10) != 0) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    }
    unsigned int v13 = (unsigned __int16)(v10 >> 3);
  }
  unsigned int v15 = 1;
  if ((v12 & 0xFFFFFFFFFFFFFFF9) != 0 && (v12 & 4) != 0)
  {
    uint64_t v16 = 0x800000000000000;
    if ((v12 & 2) == 0) {
      uint64_t v16 = 0x8000000000000;
    }
    if ((v16 & v12) != 0) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    }
    unsigned int v15 = (unsigned __int16)(v12 >> 3);
  }
  if (v13 != 1 && v13 < 2 * v15) {
    return 0;
  }
  uint64_t v19 = v13 / v15;
  if ((unsigned __int16)(v13 % v15)) {
    return 0;
  }
  unsigned int v20 = v13 / v15;
  if (v19 >= 9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v15 <= v13)
  {
    uint64_t v21 = v39;
    do
    {
      *v21++ = -1;
      --v19;
    }
    while (v19);
  }
  uint64_t v22 = *(void *)(a2 + 32);
  int v23 = v39;
  if (v13)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *(void *)(v22 + 112);
    do
    {
      unsigned int v26 = *(_DWORD *)(v25 + 4 * v24);
      if ((v26 & 0x80000000) == 0)
      {
        int v27 = v26 / v15;
        int v28 = v26 % v15;
        uint64_t v29 = v24 / v15;
        if (v28 != v24 % v15) {
          return 0;
        }
        int v30 = v39[v29];
        if ((v30 & 0x80000000) == 0 && v30 != v27) {
          return 0;
        }
        v39[v29] = v27;
      }
      ++v24;
    }
    while (v13 != v24);
  }
  if (!v20) {
    return 1;
  }
  int v31 = 0;
  int v32 = *(_DWORD *)(v22 + 68);
  uint64_t v33 = 4 * v20;
  do
  {
    if ((*v23 & 0x80000000) != 0)
    {
      if (!v31)
      {
        uint64_t v36 = *a1;
        *(void *)(v36 + 40) = *(void *)(a2 + 24);
        *(void *)(v36 + 48) = a2;
        uint64_t v37 = *a1;
        uint64_t v40 = v12;
        int v41 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void, void, void))(*(void *)v37 + 32))(v37, 68, &v40, 1, 0, 0, 0);
        int v31 = *(_DWORD *)(*(void *)(v38 + 32) + 4);
      }
      unint64_t v34 = *(unsigned int *)(a3 + 8);
      int v35 = v31;
      if (v34 >= *(unsigned int *)(a3 + 12)) {
LABEL_57:
      }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    else
    {
      unint64_t v34 = *(unsigned int *)(a3 + 8);
      if (*v23) {
        int v35 = v32;
      }
      else {
        int v35 = v11;
      }
      if (v34 >= *(unsigned int *)(a3 + 12)) {
        goto LABEL_57;
      }
    }
    *(_DWORD *)(*(void *)a3 + 4 * v34) = v35;
    ++*(_DWORD *)(a3 + 8);
    ++v23;
    v33 -= 4;
  }
  while (v33);
  return 1;
}

unint64_t *sub_1CC6ED280(uint64_t *a1, llvm::MachineInstr *a2, int *a3, uint64_t a4)
{
  unsigned int v6 = *(_DWORD *)(*((void *)a2 + 4) + 4);
  uint64_t v7 = *a1;
  *(void *)(v7 + 40) = *((void *)a2 + 3);
  *(void *)(v7 + 48) = a2;
  uint64_t v8 = a1[1];
  unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v8, (unsigned __int8 *)&unk_1CFBE0C25, 0);
  uint64_t v10 = 0;
  unint64_t v11 = v6 & 0x7FFFFFFF;
  unsigned int v12 = IncompleteVirtualRegister;
  unint64_t v13 = IncompleteVirtualRegister & 0x7FFFFFFF;
  *(void *)(*(void *)(v8 + 24) + 16 * v13) = *(void *)(*(void *)(v8 + 24) + 16 * v11);
  unint64_t v14 = *(unsigned int *)(v8 + 432);
  unsigned int v27 = v6;
  if ((v6 & 0x80000000) != 0 && v11 < v14) {
    uint64_t v10 = *(void *)(*(void *)(v8 + 424) + 8 * v11);
  }
  if (v13 >= v14)
  {
    uint64_t v15 = *(void *)(v8 + 440);
    unint64_t v16 = v13 + 1 - v14;
    if (v13 >= *(unsigned int *)(v8 + 436)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v17 = *(_DWORD *)(v8 + 432);
    if (v16)
    {
      int v18 = (void *)(*(void *)(v8 + 424) + 8 * v14);
      unint64_t v19 = ~v13 + v14;
      do
        *v18++ = v15;
      while (!__CFADD__(v19++, 1));
      int v17 = *(_DWORD *)(v8 + 432);
    }
    *(_DWORD *)(v8 + 432) = v17 + v16;
  }
  *(void *)(*(void *)(v8 + 424) + 8 * v13) = v10;
  uint64_t v21 = *(void *)(v8 + 8);
  if (v21)
  {
    unsigned int v24 = IncompleteVirtualRegister;
    (*(void (**)(uint64_t, void))(*(void *)v21 + 24))(v21, IncompleteVirtualRegister);
    unsigned int IncompleteVirtualRegister = v24;
  }
  uint64_t v22 = *a1;
  if (a4 == 1)
  {
    v29[0] = IncompleteVirtualRegister;
    uint64_t v29[2] = 1;
    v28[0] = *a3;
    _DWORD v28[4] = 0;
    (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, void))(*(void *)v22 + 32))(v22, 19, v29, 1, v28, 1, 0);
  }
  else
  {
    v28[0] = IncompleteVirtualRegister;
    v28[2] = 1;
    sub_1CC73661C(v22, (uint64_t)v28, a3, a4);
  }
  llvm::MachineInstr::eraseFromParent(a2);
  return sub_1CC6EC690(a1, (void *)a1[1], v27, v12);
}

BOOL sub_1CC6ED49C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v57[2] = *MEMORY[0x1E4F143B8];
  unsigned int v4 = **(unsigned __int16 **)(a2 + 16) - 93;
  if (v4 >= 0xFFFFFFFD) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v4 < 0xFFFFFFFD) {
    return 0;
  }
  int v7 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
  if ((v7 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = v7 & 0x7FFFFFFF;
  if ((v7 & 0x7FFFFFFFu) >= *(_DWORD *)(v9 + 432)) {
    return 0;
  }
  unint64_t v54 = *(void *)(*(void *)(v9 + 424) + 8 * v10);
  if ((v54 & 1) == 0) {
    return 0;
  }
  unint64_t v13 = sub_1CB8F1DC4(&v54);
  if (v12 == 1) {
  if (v13 < 8)
  }
    return 0;
  unsigned int v15 = sub_1CB8F1DC4(&v54);
  if (v14 == 1) {
  uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
  }
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.i32[0] != 1) {
    return 0;
  }
  int v17 = **(unsigned __int16 **)(a2 + 16);
  int v18 = v17 == 91 ? 124 : 126;
  int v19 = v17 == 90 ? 118 : v18;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = v19;
  *(void *)(a3 + 16) = 0;
  uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 8) + 24) + 16 * v10 + 8);
  if (!v20) {
    return 0;
  }
  if ((*(unsigned char *)(v20 + 3) & 0x81) != 0)
  {
    do
    {
      uint64_t v20 = *(void *)(v20 + 24);
      if (!v20) {
        return 0;
      }
    }
    while ((*(_DWORD *)v20 & 0x81000000) != 0);
  }
  uint64_t v21 = *(void *)(v20 + 8);
LABEL_25:
  unsigned int v23 = **(unsigned __int16 **)(v21 + 16) - 118;
  BOOL v24 = v23 > 8;
  int v25 = (1 << v23) & 0x141;
  if (!v24 && v25 != 0)
  {
    uint64_t v27 = *(void *)(v5 + 48);
    if ((v27 & 7) != 0)
    {
      unint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      unint64_t v28 = v27 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v5 + 48) = v27 & 0xFFFFFFFFFFFFFFF8;
    }
    unsigned int v29 = *(unsigned __int16 *)(v28 + 36);
    if ((v29 & 0xF00) == 0 || **(_WORD **)(v21 + 16) == 118)
    {
      uint64_t v30 = *(void *)(a1 + 40);
      uint64_t v31 = *(void *)(a1 + 8);
      if (v30)
      {
        uint64_t v32 = 0;
        int v33 = *(_DWORD *)(*(void *)(v21 + 32) + 4);
        if (v33 < 0)
        {
          if ((v33 & 0x7FFFFFFFu) >= *(_DWORD *)(v31 + 432)) {
            uint64_t v32 = 0;
          }
          else {
            uint64_t v32 = *(void *)(*(void *)(v31 + 424) + 8 * (v33 & 0x7FFFFFFF));
          }
        }
        int v34 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
        if (v34 < 0 && (uint64_t v35 = v34 & 0x7FFFFFFF, v35 < *(_DWORD *)(v31 + 432)))
        {
          uint64_t v36 = v22;
          uint64_t v37 = *(void *)(*(void *)(v31 + 424) + 8 * v35);
        }
        else
        {
          uint64_t v36 = v22;
          uint64_t v37 = 0;
        }
        uint64_t v38 = *(void *)(v28 + 24);
        uint64_t v39 = (1 << *(unsigned char *)(v28 + 34)) | *(void *)(v28 + 8);
        int v40 = **(unsigned __int16 **)(v5 + 16);
        v57[0] = v32;
        v57[1] = v37;
        v55[0] = v38;
        v55[1] = 8 << (63 - __clz(v39 & -v39));
        int v56 = (v29 >> 8) & 0xF;
        LODWORD(v53[0]) = v40;
        v53[1] = (unint64_t)v57;
        v53[2] = 2;
        v53[3] = (unint64_t)v55;
        v53[4] = 1;
        if (sub_1CC72D410(v30, (uint64_t)v53))
        {
          uint64_t v22 = v36;
          goto LABEL_63;
        }
        uint64_t v31 = *(void *)(a1 + 8);
        uint64_t v22 = v36;
      }
      int v41 = *(_DWORD *)(*(void *)(v21 + 32) + 4);
      if (v41 < 0 && (uint64_t v42 = v41 & 0x7FFFFFFF, v42 < *(_DWORD *)(v31 + 432))) {
        unint64_t v43 = *(void *)(*(void *)(v31 + 424) + 8 * v42);
      }
      else {
        unint64_t v43 = 0;
      }
      int v44 = **(unsigned __int16 **)(v21 + 16);
      v53[0] = v43;
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF9) != 0)
      {
        int v45 = *(_DWORD *)(a3 + 8);
        if (v44 != 118 || v45 == 118)
        {
          if (v44 != 118 && v45 == 118) {
            goto LABEL_62;
          }
          if (*(void *)a3 == v43)
          {
            if (v44 == 126 && v45 == 124)
            {
              int v3 = *(_DWORD *)(a3 + 12);
              uint64_t v21 = *(void *)(a3 + 16);
LABEL_70:
              int v44 = 124;
              goto LABEL_62;
            }
            if (v44 == 124 && v45 == 126) {
              goto LABEL_70;
            }
          }
          unint64_t v52 = sub_1CB8F1DC4(v53);
          if (v47 == 1) {
          unint64_t v48 = sub_1CB8F1DC4((unint64_t *)a3);
          }
          if (v49 == 1)
          {
            unint64_t v51 = v48;
            unint64_t v48 = v51;
          }
          if (v52 <= v48)
          {
            unint64_t v43 = *(void *)a3;
            int v44 = *(_DWORD *)(a3 + 8);
            int v3 = *(_DWORD *)(a3 + 12);
            uint64_t v21 = *(void *)(a3 + 16);
          }
          else
          {
            unint64_t v43 = v53[0];
          }
          goto LABEL_62;
        }
      }
      else
      {
        int v45 = *(_DWORD *)(a3 + 8);
        if (v45 == v44 || v45 == 118) {
          goto LABEL_62;
        }
      }
      int v3 = *(_DWORD *)(a3 + 12);
      uint64_t v21 = *(void *)(a3 + 16);
      int v44 = v45;
      unint64_t v43 = *(void *)a3;
LABEL_62:
      *(void *)a3 = v43;
      *(_DWORD *)(a3 + 8) = v44;
      *(_DWORD *)(a3 + 12) = v3;
      *(void *)(a3 + 16) = v21;
    }
  }
LABEL_63:
  uint64_t v46 = *(void *)(v20 + 8);
  while (1)
  {
    uint64_t v20 = *(void *)(v20 + 24);
    if (!v20) {
      return *(void *)(a3 + 16) != 0;
    }
    if ((*(_DWORD *)v20 & 0x81000000) == 0)
    {
      uint64_t v21 = *(void *)(v20 + 8);
      if (v21 != v46) {
        goto LABEL_25;
      }
    }
  }
}

uint64_t sub_1CC6ED964(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v42[4] = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *(_DWORD *)(*(void *)(*(void *)(a3 + 16) + 32) + 4);
  unsigned int v39 = v6;
  v37[0] = 0;
  v37[1] = 0;
  int v38 = 0;
  (*(void (**)(uint64_t))(*(void *)a1[2] + 32))(a1[2]);
  int v7 = *(_DWORD *)(a3 + 8);
  int v8 = 90;
  if (v7 == 126) {
    int v8 = 92;
  }
  BOOL v22 = v7 == 124;
  unsigned int v9 = 91;
  if (!v22) {
    unsigned int v9 = v8;
  }
  *(void *)(a2 + 16) = *(void *)(*(void *)(*a1 + 16) + 8) + 48 * v9;
  uint64_t v10 = *(void *)(a2 + 32);
  int v40 = v42;
  uint64_t v41 = 0x400000000;
  uint64_t v11 = a1[1];
  uint64_t v12 = *(unsigned int *)(v10 + 4);
  if ((v12 & 0x80000000) != 0) {
    unint64_t v13 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v13 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v12);
  }
  uint64_t v14 = *v13;
  if (*v13)
  {
    while ((*(unsigned char *)(v14 + 3) & 1) != 0)
    {
      uint64_t v14 = *(void *)(v14 + 24);
      if (!v14) {
        goto LABEL_34;
      }
    }
    LODWORD(v15) = 0;
    unsigned int v16 = 4;
LABEL_12:
    if (v15 >= v16) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v40 + v15) = v14;
    uint64_t v15 = (v41 + 1);
    LODWORD(v41) = v41 + 1;
    while (1)
    {
      uint64_t v14 = *(void *)(v14 + 24);
      if (!v14) {
        break;
      }
      if ((*(unsigned char *)(v14 + 3) & 1) == 0)
      {
        unsigned int v16 = HIDWORD(v41);
        goto LABEL_12;
      }
    }
    if (!v15) {
      goto LABEL_34;
    }
    int v17 = (uint64_t *)v40;
    uint64_t v18 = 8 * v15;
    while (1)
    {
      uint64_t v19 = *v17;
      uint64_t v20 = *(void *)(*v17 + 8);
      int v21 = **(unsigned __int16 **)(v20 + 16);
      BOOL v22 = v21 == 118 || *(_DWORD *)(a3 + 8) == v21;
      if (v22)
      {
        uint64_t v23 = *(void *)(v20 + 32);
        unsigned int v24 = *(_DWORD *)(v23 + 4);
        uint64_t v25 = a1[1];
        if ((v24 & 0x80000000) != 0 && (v24 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v25 + 432)) {
          unint64_t v26 = *(void *)(*(void *)(v25 + 424) + 8 * (v24 & 0x7FFFFFFF));
        }
        else {
          unint64_t v26 = 0;
        }
        unint64_t v36 = v26;
        if (v24 == v39)
        {
          uint64_t v27 = a1[2];
LABEL_29:
          (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
          llvm::MachineInstr::eraseFromParent(*(llvm::MachineInstr **)(v19 + 8));
          goto LABEL_30;
        }
        if (*(void *)a3 == v26)
        {
          sub_1CC6EC690(a1, (void *)v25, v24, v39);
          uint64_t v27 = a1[2];
          goto LABEL_29;
        }
        unint64_t v35 = sub_1CB8F1DC4((unint64_t *)a3);
        if (v30 == 1) {
        unint64_t v31 = sub_1CB8F1DC4(&v36);
        }
        if (v32 == 1)
        {
          unint64_t v34 = v31;
          unint64_t v31 = v34;
        }
        if (v35 < v31)
        {
          unsigned int v33 = v39;
          (*(void (**)(uint64_t, void))(*(void *)a1[2] + 32))(a1[2], *(void *)(v23 + 40));
          llvm::MachineOperand::setReg(v23 + 32, v33);
          (*(void (**)(uint64_t, void))(*(void *)a1[2] + 40))(a1[2], *(void *)(v23 + 40));
          goto LABEL_30;
        }
      }
      unint64_t v28 = operator new(0x28uLL);
      *unint64_t v28 = &unk_1F261BEA8;
      v28[1] = v37;
      v28[2] = a1;
      void v28[3] = a2;
      _DWORD v28[4] = &v39;
      sub_1CC6EDDC0(a2, v19, (uint64_t)v28);
      (*(void (**)(void *))(*v28 + 40))(v28);
LABEL_30:
      ++v17;
      v18 -= 8;
      if (!v18)
      {
        unsigned int v6 = v39;
        break;
      }
    }
  }
LABEL_34:
  llvm::MachineOperand::setReg(*(void *)(a2 + 32), v6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1[2] + 40))(a1[2], a2);
  if (v40 != v42) {
    free(v40);
  }
  return MEMORY[0x1D25D9CD0](v37[0], 8);
}

uint64_t sub_1CC6EDDC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  int v4 = **(unsigned __int16 **)(v3 + 16);
  if (v4 == 69 || v4 == 0) {
    unsigned int v6 = (uint64_t *)(a2 + 48);
  }
  else {
    unsigned int v6 = (uint64_t *)(v3 + 24);
  }
  uint64_t v7 = *v6;
  if (v7 == *(void *)(a1 + 24))
  {
    if ((*(unsigned char *)a1 & 4) == 0)
    {
      while ((*(_WORD *)(a1 + 44) & 8) != 0)
        a1 = *(void *)(a1 + 8);
    }
    uint64_t v8 = *(void *)(a1 + 8);
  }
  else
  {
    uint64_t v8 = v7 + 48;
    for (uint64_t i = *(void *)(v7 + 56); i != v8; uint64_t i = *(void *)(i + 8))
    {
      if (**(_WORD **)(i + 16) && **(_WORD **)(i + 16) != 69)
      {
        uint64_t v8 = i;
        break;
      }
    }
  }
  uint64_t v13 = v7;
  uint64_t v14 = v8;
  if (a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t))(*(void *)a3 + 48))(a3, &v13, &v14, a2);
  }
  sub_1CB920400();
  return sub_1CC6EDEA4(v11, v12);
}

uint64_t sub_1CC6EDEA4(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = v2 + 48;
  uint64_t v4 = *(void *)(v2 + 56);
  if (v4 != v3)
  {
    while (v4 != a1 && v4 != a2)
    {
      if (!v4 || (*(unsigned char *)v4 & 4) == 0)
      {
        while ((*(_WORD *)(v4 + 44) & 8) != 0)
          uint64_t v4 = *(void *)(v4 + 8);
      }
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == v3)
      {
        uint64_t v4 = v3;
        return v4 == a1;
      }
    }
  }
  return v4 == a1;
}

uint64_t sub_1CC6EDF10(uint64_t *a1, unsigned __int16 **a2)
{
  if (sub_1CC6EC770(a1, (llvm::MachineInstr *)a2)) {
    return 1;
  }
  uint64_t v9 = 0;
  uint64_t result = sub_1CC6ED49C((uint64_t)a1, (uint64_t)a2, (uint64_t)&v9);
  if (result)
  {
    sub_1CC6ED964(a1, (uint64_t)a2, (uint64_t)&v9);
    return 1;
  }
  uint64_t v9 = 0;
  unsigned int v10 = 0;
  unsigned int v5 = *a2[2] - 90;
  BOOL v6 = v5 > 6;
  int v7 = (1 << v5) & 0x47;
  if (!v6 && v7 != 0)
  {
    if (!byte_1EBD06F60) {
      return 0;
    }
    char v11 = sub_1CD613A58((uint64_t)a1, (uint64_t)a2, (unsigned int *)&v9, (unsigned int *)&v9 + 1, &v10);
    if ((v11 & 1) != 0
      || (uint64_t result = sub_1CD61381C((uint64_t)a1, (uint64_t)a2, &v9, (unsigned int *)&v9 + 1, &v10), result))
    {
      sub_1CD613C24((uint64_t)a1, (uint64_t)a2, (uint64_t)&v9);
      return 1;
    }
  }
  return result;
}

void sub_1CC6EE024()
{
}

__n128 sub_1CC6EE038(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F261BEA8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CC6EE08C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F261BEA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CC6EE0C4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a3;
  uint64_t v8 = *(uint64_t **)(a1 + 8);
  uint64_t v9 = *(uint64_t **)(a1 + 16);
  int v10 = *((_DWORD *)v8 + 4);
  if (!v10) {
    goto LABEL_11;
  }
  uint64_t v11 = *v8;
  unsigned int v12 = v10 - 1;
  uint64_t v13 = (v10 - 1) & ((v6 >> 4) ^ (v6 >> 9));
  uint64_t v14 = *(void *)(v11 + 16 * v13);
  if (v14 != v6)
  {
    int v18 = 1;
    while (v14 != -4096)
    {
      int v19 = v13 + v18++;
      uint64_t v13 = v19 & v12;
      uint64_t v14 = *(void *)(v11 + 16 * v13);
      if (v14 == v6) {
        goto LABEL_3;
      }
    }
LABEL_11:
    int v45 = *(uint64_t **)(a1 + 16);
    uint64_t v20 = *v9;
    *(void *)(v20 + 40) = v6;
    *(void *)(v20 + 48) = v7;
    uint64_t v21 = v9[1];
    int v22 = *(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 32) + 4);
    unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v21, (unsigned __int8 *)&unk_1CFBE0C25, 0);
    unsigned int v24 = IncompleteVirtualRegister;
    uint64_t v25 = 0;
    uint64_t v26 = v22 & 0x7FFFFFFF;
    unint64_t v27 = IncompleteVirtualRegister & 0x7FFFFFFF;
    *(void *)(*(void *)(v21 + 24) + 16 * v27) = *(void *)(*(void *)(v21 + 24) + 16 * v26);
    unint64_t v28 = *(unsigned int *)(v21 + 432);
    if (v22 < 0 && v26 < v28) {
      uint64_t v25 = *(void *)(*(void *)(v21 + 424) + 8 * v26);
    }
    uint64_t v44 = IncompleteVirtualRegister;
    if (v27 >= v28)
    {
      uint64_t v29 = *(void *)(v21 + 440);
      uint64_t v30 = v27 + 1 - v28;
      if (v27 >= *(unsigned int *)(v21 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v31 = *(_DWORD *)(v21 + 432);
      if (v30)
      {
        uint64_t v32 = (void *)(*(void *)(v21 + 424) + 8 * v28);
        uint64_t v33 = ~v27 + v28;
        do
          *v32++ = v29;
        while (!__CFADD__(v33++, 1));
        int v31 = *(_DWORD *)(v21 + 432);
      }
      *(_DWORD *)(v21 + 432) = v31 + v30;
    }
    *(void *)(*(void *)(v21 + 424) + 8 * v27) = v25;
    uint64_t v35 = *(void *)(v21 + 8);
    if (v35) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 24))(v35, v44);
    }
    uint64_t v36 = *v45;
    v49[0] = v24;
    void v49[2] = 1;
    LODWORD(v47[0]) = **(_DWORD **)(a1 + 32);
    int v48 = 0;
    (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, void *, uint64_t, void))(*(void *)v36 + 32))(v36, 119, v49, 1, v47, 1, 0);
    uint64_t v38 = v37;
    uint64_t v39 = *(void *)(a1 + 8);
    v47[0] = 0;
    char v40 = sub_1CC64E380(*(void *)v39, *(_DWORD *)(v39 + 16), v6, v47);
    uint64_t v41 = (uint64_t *)v47[0];
    if (v40) {
      goto LABEL_32;
    }
    int v42 = *(_DWORD *)(v39 + 8);
    unsigned int v43 = *(_DWORD *)(v39 + 16);
    if (4 * v42 + 4 < 3 * v43)
    {
      if (v43 + ~v42 - *(_DWORD *)(v39 + 12) > v43 >> 3) {
        goto LABEL_29;
      }
    }
    else
    {
      v43 *= 2;
    }
    sub_1CC64E414(v39, v43);
    v47[0] = 0;
    sub_1CC64E380(*(void *)v39, *(_DWORD *)(v39 + 16), v6, v47);
    uint64_t v41 = (uint64_t *)v47[0];
LABEL_29:
    ++*(_DWORD *)(v39 + 8);
    if (*v41 != -4096) {
      --*(_DWORD *)(v39 + 12);
    }
    *uint64_t v41 = v6;
    v41[1] = 0;
LABEL_32:
    v41[1] = v38;
    (*(void (**)(uint64_t, void))(*(void *)v45[2] + 32))(v45[2], *(void *)(a4 + 8));
    llvm::MachineOperand::setReg(a4, v44);
    return (*(uint64_t (**)(uint64_t, void))(*(void *)v45[2] + 40))(v45[2], *(void *)(a4 + 8));
  }
LABEL_3:
  uint64_t v15 = *(void *)(v11 + 16 * v13 + 8);
  if (!v15) {
    goto LABEL_11;
  }
  (*(void (**)(uint64_t, void))(*(void *)v9[2] + 32))(v9[2], *(void *)(a4 + 8));
  llvm::MachineOperand::setReg(a4, *(_DWORD *)(*(void *)(v15 + 32) + 4));
  unsigned int v16 = *(uint64_t (**)(void))(*(void *)v9[2] + 40);

  return v16();
}

uint64_t sub_1CC6EE4BC()
{
  int v4 = 1;
  char v2 = 0;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Force all indexed operations to be legal for the GlobalISel combiner";
  v1.n128_u64[1] = 68;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBD06EE0, "force-legal-indexing", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD06EE0, &dword_1CB82C000);
}

void sub_1CC6EE548(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0) {
    int v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  }
  else {
    int v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a3);
  }
  uint64_t v5 = *v4;
  if (!v5) {
    return;
  }
  while ((*(unsigned char *)(v5 + 3) & 1) != 0)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5) {
      return;
    }
  }
  uint64_t v6 = *(void *)(v5 + 8);
LABEL_8:
  uint64_t v7 = v5;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v6);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(unsigned int *)(a1 + 28);
  if (v8 != *(void *)(a1 + 8))
  {
    unsigned int v13 = *(_DWORD *)(a1 + 24);
    goto LABEL_24;
  }
  if (v9)
  {
    int v10 = 0;
    uint64_t v11 = 8 * v9;
    unsigned int v12 = *(void **)(a1 + 16);
    while (*v12 != v6)
    {
      if (*v12 == -2) {
        int v10 = v12;
      }
      ++v12;
      v11 -= 8;
      if (!v11)
      {
        if (!v10) {
          goto LABEL_16;
        }
        *int v10 = v6;
        --*(_DWORD *)(a1 + 32);
        goto LABEL_18;
      }
    }
    goto LABEL_18;
  }
LABEL_16:
  unsigned int v13 = *(_DWORD *)(a1 + 24);
  if (v9 >= v13)
  {
LABEL_24:
    if (3 * v13 <= 4 * ((int)v9 - *(_DWORD *)(a1 + 32)))
    {
      if (v13 >= 0x40) {
        v13 *= 2;
      }
      else {
        unsigned int v13 = 128;
      }
    }
    else if (v13 - v9 >= v13 >> 3)
    {
      goto LABEL_26;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 8), v13);
    unsigned int v13 = *(_DWORD *)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 16);
LABEL_26:
    unsigned int v14 = v13 - 1;
    unsigned int v15 = (v13 - 1) & ((v6 >> 4) ^ (v6 >> 9));
    unsigned int v16 = (void *)(v8 + 8 * v15);
    uint64_t v17 = *v16;
    if (*v16 == -1)
    {
      int v18 = 0;
LABEL_38:
      if (v18) {
        int v22 = v18;
      }
      else {
        int v22 = v16;
      }
      if (*v22 != v6)
      {
        if (*v22 == -2) {
          --*(_DWORD *)(a1 + 32);
        }
        else {
          ++*(_DWORD *)(a1 + 28);
        }
        *int v22 = v6;
      }
    }
    else
    {
      int v18 = 0;
      int v19 = 1;
      while (v17 != v6)
      {
        if (v18) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v17 == -2;
        }
        if (v20) {
          int v18 = v16;
        }
        unsigned int v21 = v15 + v19++;
        unsigned int v15 = v21 & v14;
        unsigned int v16 = (void *)(v8 + 8 * (v21 & v14));
        uint64_t v17 = *v16;
        if (*v16 == -1) {
          goto LABEL_38;
        }
      }
    }
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 28) = v9 + 1;
  *(void *)(v8 + 8 * v9) = v6;
LABEL_18:
  uint64_t v5 = v7;
  while (1)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5) {
      break;
    }
    if ((*(unsigned char *)(v5 + 3) & 1) == 0)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6 != *(void *)(v7 + 8)) {
        goto LABEL_8;
      }
    }
  }
}

unint64_t *sub_1CC6EE76C(llvm::SmallPtrSetImplBase *this)
{
  uint64_t v3 = (void **)((char *)this + 8);
  char v2 = (unint64_t *)*((void *)this + 1);
  __n128 result = (unint64_t *)*((void *)this + 2);
  uint64_t v5 = 24;
  if (result == v2) {
    uint64_t v5 = 28;
  }
  uint64_t v6 = *(unsigned int *)((char *)this + v5);
  uint64_t v7 = result;
  if (v6)
  {
    uint64_t v8 = 0;
    while (result[v8] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v6 == ++v8) {
        goto LABEL_16;
      }
    }
    uint64_t v7 = &result[v8];
  }
  uint64_t v9 = &result[v6];
  if (v7 != v9)
  {
    unint64_t v10 = *v7;
LABEL_11:
    (*(void (**)(llvm::SmallPtrSetImplBase *, unint64_t))(*(void *)this + 40))(this, v10);
    uint64_t v11 = v7 + 1;
    while (v11 != v9)
    {
      unint64_t v12 = *v11++;
      unint64_t v10 = v12;
      if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v7 = v11 - 1;
        goto LABEL_11;
      }
    }
    char v2 = (unint64_t *)*((void *)this + 1);
    __n128 result = (unint64_t *)*((void *)this + 2);
  }
LABEL_16:
  if (result == v2) {
    goto LABEL_17;
  }
  uint64_t v13 = *((unsigned int *)this + 6);
  if (v13 < 0x21 || 4 * (*((_DWORD *)this + 7) - *((_DWORD *)this + 8)) >= v13)
  {
    __n128 result = (unint64_t *)memset(result, 255, 8 * v13);
LABEL_17:
    *((_DWORD *)this + 7) = 0;
    *((_DWORD *)this + 8) = 0;
    return result;
  }

  return (unint64_t *)llvm::SmallPtrSetImplBase::shrink_and_clear(v3);
}

void sub_1CC6EE89C(llvm *a1)
{
  llvm::initializeTargetPassConfigPass((uint64_t)a1);
  sub_1CC6DD1D8((uint64_t)a1);
  llvm::initializeBlockFrequencyInfoWrapperPassPass(a1, v2);
  llvm::initializeStackProtectorPass(a1, v3);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  operator new();
}

uint64_t *sub_1CC6EE95C(uint64_t a1, uint64_t *a2)
{
  v19[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 448);
  uint64_t v5 = *(unsigned int *)(a1 + 464);
  if (v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v7 = (uint64_t **)(v4 + 16 * v6);
    uint64_t v8 = *v7;
    if (*v7 == a2) {
      goto LABEL_8;
    }
    int v9 = 1;
    while (v8 != (uint64_t *)-4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v5 - 1);
      uint64_t v8 = *(uint64_t **)(v4 + 16 * v6);
      if (v8 == a2)
      {
        uint64_t v7 = (uint64_t **)(v4 + 16 * v6);
        goto LABEL_8;
      }
    }
  }
  uint64_t v7 = (uint64_t **)(v4 + 16 * v5);
LABEL_8:
  if (v7 != (uint64_t **)(v4 + 16 * v5)) {
    return v7[1];
  }
  uint64_t v11 = sub_1CC6EEB04(a1 + 256, (uint64_t)a2);
  unint64_t v12 = sub_1CC6EEDFC(a1 + 256, a2);
  uint64_t v17 = v19;
  uint64_t v18 = 0x400000000;
  if (*((_DWORD *)v12 + 2)) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = (uint64_t)v12;
  }
  llvm::computeValueLLTs(*(void *)(a1 + 880), *a2, (const llvm::DataLayout *)&v17, v13, 0);
  if (v18)
  {
    unsigned int v14 = 0;
    unsigned int v15 = *((_DWORD *)v11 + 2);
    do
    {
      if (v15 >= *((_DWORD *)v11 + 3)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*v11 + 4 * v15) = 0;
      unsigned int v15 = *((_DWORD *)v11 + 2) + 1;
      *((_DWORD *)v11 + 2) = v15;
      ++v14;
    }
    while (v18 > v14);
  }
  if (v17 != v19) {
    free(v17);
  }
  return v11;
}

void *sub_1CC6EEB04(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 192;
  uint64_t v4 = *(void *)(a1 + 192);
  uint64_t v6 = *(unsigned int *)(a1 + 208);
  unsigned int v7 = a2 >> 4;
  if (v6)
  {
    LODWORD(v8) = (v6 - 1) & (v7 ^ (a2 >> 9));
    int v9 = (uint64_t *)(v4 + 16 * v8);
    uint64_t v10 = *v9;
    if (*v9 == a2) {
      goto LABEL_8;
    }
    int v11 = 1;
    while (v10 != -4096)
    {
      int v12 = v8 + v11++;
      uint64_t v8 = v12 & (v6 - 1);
      uint64_t v10 = *(void *)(v4 + 16 * v8);
      if (v10 == a2)
      {
        int v9 = (uint64_t *)(v4 + 16 * v8);
        goto LABEL_8;
      }
    }
  }
  int v9 = (uint64_t *)(v4 + 16 * v6);
LABEL_8:
  if (v9 != (uint64_t *)(v4 + 16 * v6)) {
    return (void *)v9[1];
  }
  *(void *)(a1 + 80) += 24;
  if (((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 24 > *(void *)(a1 + 8) - *(void *)a1)
  {
    unsigned int v25 = *(_DWORD *)(a1 + 24) >> 7;
    if (v25 >= 0x1E) {
      LOBYTE(v25) = 30;
    }
    uint64_t v26 = 4096 << v25;
    uint64_t v13 = operator new(4096 << v25, (std::align_val_t)8uLL);
    unsigned int v27 = *(_DWORD *)(a1 + 24);
    if (v27 >= *(_DWORD *)(a1 + 28)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v27) = v13;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = (char *)v13 + v26;
    uint64_t v4 = *(void *)(a1 + 192);
    LODWORD(v6) = *(_DWORD *)(a1 + 208);
  }
  else
  {
    uint64_t v13 = (void *)((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)a1 = v13 + 3;
  *uint64_t v13 = v13 + 2;
  v13[1] = 0x100000000;
  if (!v6)
  {
    unsigned int v16 = 0;
    goto LABEL_24;
  }
  int v14 = v6 - 1;
  unsigned int v15 = (v6 - 1) & (v7 ^ (a2 >> 9));
  unsigned int v16 = (uint64_t *)(v4 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16 != a2)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    while (v17 != -4096)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v17 == -8192;
      }
      if (v20) {
        uint64_t v18 = v16;
      }
      unsigned int v21 = v15 + v19++;
      unsigned int v15 = v21 & v14;
      unsigned int v16 = (uint64_t *)(v4 + 16 * (v21 & v14));
      uint64_t v17 = *v16;
      if (*v16 == a2) {
        goto LABEL_31;
      }
    }
    if (v18) {
      unsigned int v16 = v18;
    }
LABEL_24:
    int v22 = *(_DWORD *)(a1 + 200);
    if (4 * v22 + 4 >= (3 * v6))
    {
      sub_1CC2E11F0(v5, 2 * v6);
      uint64_t v28 = *(void *)(a1 + 192);
      int v29 = *(_DWORD *)(a1 + 208) - 1;
      unsigned int v30 = v29 & (v7 ^ (a2 >> 9));
      unsigned int v16 = (uint64_t *)(v28 + 16 * v30);
      uint64_t v31 = *v16;
      if (*v16 == a2)
      {
LABEL_47:
        uint64_t v23 = a2;
        goto LABEL_28;
      }
      uint64_t v32 = 0;
      int v33 = 1;
      while (v31 != -4096)
      {
        if (v32) {
          BOOL v34 = 0;
        }
        else {
          BOOL v34 = v31 == -8192;
        }
        if (v34) {
          uint64_t v32 = v16;
        }
        unsigned int v35 = v30 + v33++;
        unsigned int v30 = v35 & v29;
        unsigned int v16 = (uint64_t *)(v28 + 16 * (v35 & v29));
        uint64_t v31 = *v16;
        if (*v16 == a2) {
          goto LABEL_47;
        }
      }
      if (v32) {
        unsigned int v16 = v32;
      }
    }
    else if ((int)v6 + ~v22 - *(_DWORD *)(a1 + 204) <= v6 >> 3)
    {
      sub_1CC2E11F0(v5, v6);
      uint64_t v36 = 0;
      sub_1CC0B17CC(*(void *)(a1 + 192), *(_DWORD *)(a1 + 208), a2, &v36);
      unsigned int v16 = v36;
    }
    uint64_t v23 = *v16;
LABEL_28:
    ++*(_DWORD *)(a1 + 200);
    if (v23 != -4096) {
      --*(_DWORD *)(a1 + 204);
    }
    uint64_t *v16 = a2;
    v16[1] = 0;
  }
LABEL_31:
  v16[1] = (uint64_t)v13;
  return v13;
}

void *sub_1CC6EEDFC(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = a1 + 216;
  uint64_t v4 = *(void *)(a1 + 216);
  uint64_t v6 = *a2;
  uint64_t v7 = *(unsigned int *)(a1 + 232);
  if (v7)
  {
    LODWORD(v8) = ((v6 >> 4) ^ (v6 >> 9)) & (v7 - 1);
    int v9 = (uint64_t *)(v4 + 16 * v8);
    uint64_t v10 = *v9;
    if (v6 == *v9) {
      goto LABEL_3;
    }
    int v12 = 1;
    while (v10 != -4096)
    {
      int v13 = v8 + v12++;
      uint64_t v8 = v13 & (v7 - 1);
      uint64_t v10 = *(void *)(v4 + 16 * v8);
      if (v6 == v10)
      {
        int v9 = (uint64_t *)(v4 + 16 * v8);
        goto LABEL_3;
      }
    }
  }
  int v9 = (uint64_t *)(v4 + 16 * v7);
LABEL_3:
  if (v9 != (uint64_t *)(v4 + 16 * v7)) {
    return (void *)v9[1];
  }
  *(void *)(a1 + 176) += 24;
  uint64_t v14 = *(void *)(a1 + 96);
  if (((v14 + 7) & 0xFFFFFFFFFFFFFFF8) - v14 + 24 > *(void *)(a1 + 104) - v14)
  {
    unsigned int v24 = *(_DWORD *)(a1 + 120) >> 7;
    if (v24 >= 0x1E) {
      LOBYTE(v24) = 30;
    }
    uint64_t v25 = 4096 << v24;
    __n128 result = operator new(4096 << v24, (std::align_val_t)8uLL);
    unsigned int v26 = *(_DWORD *)(a1 + 120);
    if (v26 >= *(_DWORD *)(a1 + 124)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 112) + 8 * v26) = result;
    ++*(_DWORD *)(a1 + 120);
    *(void *)(a1 + 104) = (char *)result + v25;
    uint64_t v6 = *a2;
    uint64_t v4 = *(void *)(a1 + 216);
    LODWORD(v7) = *(_DWORD *)(a1 + 232);
  }
  else
  {
    __n128 result = (void *)((v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)(a1 + 96) = result + 3;
  *__n128 result = result + 2;
  result[1] = 0x100000000;
  if (!v7)
  {
    uint64_t v17 = 0;
    goto LABEL_26;
  }
  int v15 = v7 - 1;
  unsigned int v16 = ((v6 >> 4) ^ (v6 >> 9)) & (v7 - 1);
  uint64_t v17 = (uint64_t *)(v4 + 16 * v16);
  uint64_t v18 = *v17;
  if (v6 != *v17)
  {
    int v19 = 0;
    int v20 = 1;
    while (v18 != -4096)
    {
      if (v19) {
        BOOL v21 = 0;
      }
      else {
        BOOL v21 = v18 == -8192;
      }
      if (v21) {
        int v19 = v17;
      }
      unsigned int v22 = v16 + v20++;
      unsigned int v16 = v22 & v15;
      uint64_t v17 = (uint64_t *)(v4 + 16 * (v22 & v15));
      uint64_t v18 = *v17;
      if (v6 == *v17) {
        goto LABEL_14;
      }
    }
    if (v19) {
      uint64_t v17 = v19;
    }
LABEL_26:
    int v23 = *(_DWORD *)(a1 + 224);
    if (4 * v23 + 4 >= (3 * v7))
    {
      LODWORD(v7) = 2 * v7;
      unsigned int v27 = result;
      uint64_t v28 = v5;
    }
    else
    {
      if ((int)v7 + ~v23 - *(_DWORD *)(a1 + 228) > v7 >> 3)
      {
LABEL_28:
        ++*(_DWORD *)(a1 + 224);
        if (*v17 != -4096) {
          --*(_DWORD *)(a1 + 228);
        }
        uint64_t *v17 = v6;
        v17[1] = 0;
        goto LABEL_14;
      }
      unsigned int v27 = result;
      uint64_t v28 = v5;
    }
    uint64_t v29 = v6;
    sub_1CC702C90(v28, v7);
    unsigned int v30 = 0;
    sub_1CC22052C(*(void *)(a1 + 216), *(_DWORD *)(a1 + 232), v29, &v30);
    __n128 result = v27;
    uint64_t v6 = v29;
    uint64_t v17 = v30;
    goto LABEL_28;
  }
LABEL_14:
  v17[1] = (uint64_t)result;
  return result;
}

int *sub_1CC6EF0A4(uint64_t a1, uint64_t *a2)
{
  v382[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 448);
  uint64_t v5 = *(unsigned int *)(a1 + 464);
  unsigned int v6 = a2 >> 4;
  if (v5)
  {
    LODWORD(v7) = (v5 - 1) & (v6 ^ (a2 >> 9));
    uint64_t v8 = (uint64_t **)(v4 + 16 * v7);
    int v9 = *v8;
    if (*v8 == a2) {
      goto LABEL_8;
    }
    int v10 = 1;
    while (v9 != (uint64_t *)-4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v5 - 1);
      int v9 = *(uint64_t **)(v4 + 16 * v7);
      if (v9 == a2)
      {
        uint64_t v8 = (uint64_t **)(v4 + 16 * v7);
        goto LABEL_8;
      }
    }
  }
  uint64_t v8 = (uint64_t **)(v4 + 16 * v5);
LABEL_8:
  if (v8 != (uint64_t **)(v4 + 16 * v5)) {
    return (int *)*v8[1];
  }
  int v13 = *(unsigned __int8 *)(*a2 + 8);
  uint64_t v14 = sub_1CC6EEB04(a1 + 256, (uint64_t)a2);
  int v15 = v14;
  if (v13 == 7) {
    return (int *)*v14;
  }
  unsigned int v16 = sub_1CC6EEDFC(a1 + 256, a2);
  v378 = v380;
  uint64_t v379 = 0x400000000;
  if (*((_DWORD *)v16 + 2)) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = (uint64_t)v16;
  }
  llvm::computeValueLLTs(*(void *)(a1 + 880), *a2, (const llvm::DataLayout *)&v378, v17, 0);
  if (*((unsigned __int8 *)a2 + 16) >= 0x15u)
  {
    if (v379)
    {
      uint64_t v361 = a1;
      uint64_t v363 = v15;
      unsigned int v26 = v378;
      v359 = &v378[8 * v379];
      do
      {
        uint64_t v27 = *(void *)v26;
        uint64_t v28 = *(void *)(v361 + 872);
        unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v28, "", 0);
        unint64_t v30 = IncompleteVirtualRegister & 0x7FFFFFFF;
        *(void *)(*(void *)(v28 + 24) + 16 * v30) = 4;
        unint64_t v31 = *(unsigned int *)(v28 + 432);
        if (v30 >= v31)
        {
          unint64_t v32 = v30 + 1;
          uint64_t v33 = *(void *)(v28 + 440);
          if (v30 >= *(unsigned int *)(v28 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v34 = *(_DWORD *)(v28 + 432);
          if (v32 != v31)
          {
            unsigned int v35 = (void *)(*(void *)(v28 + 424) + 8 * *(unsigned int *)(v28 + 432));
            uint64_t v36 = ~v30 + v31;
            do
            {
              *v35++ = v33;
              BOOL v37 = __CFADD__(v36++, 1);
            }
            while (!v37);
            int v34 = *(_DWORD *)(v28 + 432);
          }
          *(_DWORD *)(v28 + 432) = v34 + v32 - v31;
        }
        *(void *)(*(void *)(v28 + 424) + 8 * v30) = v27;
        uint64_t v38 = *(void *)(v28 + 8);
        if (v38) {
          (*(void (**)(uint64_t, void))(*(void *)v38 + 24))(v38, IncompleteVirtualRegister);
        }
        int v15 = v363;
        unint64_t v39 = *((unsigned int *)v363 + 2);
        if (v39 >= *((unsigned int *)v363 + 3)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*v363 + 4 * v39) = IncompleteVirtualRegister;
        ++*((_DWORD *)v363 + 2);
        v26 += 8;
      }
      while (v26 != v359);
    }
    int v12 = (int *)*v15;
    goto LABEL_78;
  }
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x10)
  {
    AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)a2, 0);
    if (AggregateElement)
    {
      int v19 = AggregateElement;
      LODWORD(v20) = 0;
      do
      {
        uint64_t v21 = sub_1CC6EF0A4(a1, v19);
        if (v22)
        {
          int v23 = (_DWORD *)v21;
          unsigned int v24 = *((_DWORD *)v15 + 2);
          uint64_t v25 = 4 * v22;
          do
          {
            if (v24 >= *((_DWORD *)v15 + 3)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*v15 + 4 * v24) = *v23;
            unsigned int v24 = *((_DWORD *)v15 + 2) + 1;
            *((_DWORD *)v15 + 2) = v24;
            ++v23;
            v25 -= 4;
          }
          while (v25);
        }
        int v20 = (llvm::Type *)(v20 + 1);
        int v19 = llvm::Constant::getAggregateElement((llvm::Constant *)a2, v20);
      }
      while (v19);
    }
    goto LABEL_77;
  }
  uint64_t v362 = a1;
  long long v364 = v15;
  uint64_t v40 = *(void *)(a1 + 872);
  uint64_t v360 = *(void *)v378;
  unsigned int v43 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v40, "", 0);
  unint64_t v44 = v43 & 0x7FFFFFFF;
  *(void *)(*(void *)(v40 + 24) + 16 * v44) = 4;
  unint64_t v45 = *(unsigned int *)(v40 + 432);
  if (v44 >= v45)
  {
    uint64_t v41 = (const llvm::DataLayout *)(v44 + 1);
    uint64_t v46 = *(void *)(v40 + 440);
    uint64_t v47 = v44 + 1 - v45;
    if (v44 >= *(unsigned int *)(v40 + 436)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v48 = *(_DWORD *)(v40 + 432);
    if (v47)
    {
      uint64_t v49 = (void *)(*(void *)(v40 + 424) + 8 * *(unsigned int *)(v40 + 432));
      uint64_t v50 = ~v44 + v45;
      do
      {
        *v49++ = v46;
        BOOL v37 = __CFADD__(v50++, 1);
      }
      while (!v37);
      int v48 = *(_DWORD *)(v40 + 432);
    }
    *(_DWORD *)(v40 + 432) = v48 + v47;
  }
  uint64_t v51 = v362;
  *(void *)(*(void *)(v40 + 424) + 8 * v44) = v360;
  uint64_t v52 = *(void *)(v40 + 8);
  if (v52) {
    (*(void (**)(uint64_t, void))(*(void *)v52 + 24))(v52, v43);
  }
  unsigned int v53 = *((_DWORD *)v15 + 2);
  if (v53 >= *((_DWORD *)v15 + 3)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*v15 + 4 * v53) = v43;
  ++*((_DWORD *)v15 + 2);
  int v54 = *(_DWORD *)*v15;
  unint64_t v55 = *(unsigned __int8 **)(*(void *)(v362 + 848) + 32);
  *(void *)&long long v381 = v55;
  if (!v55) {
    goto LABEL_70;
  }
  llvm::MetadataTracking::track((uint64_t)&v381, v55, 2);
  if (!(void)v381) {
    goto LABEL_70;
  }
  uint64_t v56 = *(unsigned int *)(v381 + 8);
  if (v56 == 2) {
    uint64_t v57 = *(void *)(v381 - 8);
  }
  else {
    uint64_t v57 = 0;
  }
  uint64_t v58 = *(void *)(v362 + 856);
  Impl = (llvm::Value *)llvm::DILocation::getImpl(*(void **)*a2, 0, 0, *(void *)(v381 - 8 * v56), v57, 0, 0, 1);
  unint64_t v369 = Impl;
  if (Impl) {
    llvm::MetadataTracking::track((uint64_t)&v369, (unsigned __int8 *)Impl, 2);
  }
  unint64_t v60 = (llvm::Value **)(v58 + 32);
  if (&v369 == (llvm::Value **)(v58 + 32)) {
    goto LABEL_152;
  }
  int v61 = *v60;
  if (*v60)
  {
    int v122 = *(unsigned __int8 *)v61;
    if ((v122 - 4) > 0x1E)
    {
      if ((v122 - 3) >= 0xFFFFFFFE) {
        unint64_t v136 = *v60;
      }
      else {
        unint64_t v136 = 0;
      }
      if ((v122 - 3) < 0xFFFFFFFE)
      {
        if (v122 == 3) {
          *((void *)v61 + 1) = 0;
        }
        goto LABEL_65;
      }
      unint64_t v124 = (unint64_t)v136 + 8;
    }
    else
    {
      if ((*((unsigned char *)v61 + 1) & 0x7F) != 2 && !*((_DWORD *)v61 + 3)) {
        goto LABEL_65;
      }
      uint64_t v123 = *((void *)v61 + 2);
      if ((v123 & 4) == 0) {
        goto LABEL_65;
      }
      unint64_t v124 = v123 & 0xFFFFFFFFFFFFFFF8;
      if (!v124) {
        goto LABEL_65;
      }
    }
    unint64_t v371 = (void *)(v58 + 32);
    sub_1CC5FA668(v124 + 16, &v371);
  }
LABEL_65:
  unint64_t v55 = (unsigned __int8 *)v369;
  int *v60 = v369;
  if (!v55) {
    goto LABEL_66;
  }
  llvm::MetadataTracking::track(v58 + 32, v55, 2);
LABEL_152:
  if (!v369) {
    goto LABEL_66;
  }
  int v119 = *(unsigned __int8 *)v369;
  if ((v119 - 4) > 0x1E)
  {
    if ((v119 - 3) >= 0xFFFFFFFE) {
      int v158 = v369;
    }
    else {
      int v158 = 0;
    }
    if ((v119 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v121 = (unint64_t)v158 + 8;
LABEL_223:
      unint64_t v371 = &v369;
      sub_1CC5FA668(v121 + 16, &v371);
      goto LABEL_66;
    }
    if (v119 == 3) {
      *((void *)v369 + 1) = 0;
    }
  }
  else if ((*((unsigned char *)v369 + 1) & 0x7F) == 2 || *((_DWORD *)v369 + 3))
  {
    uint64_t v120 = *((void *)v369 + 2);
    if ((v120 & 4) != 0)
    {
      unint64_t v121 = v120 & 0xFFFFFFFFFFFFFFF8;
      if (v121) {
        goto LABEL_223;
      }
    }
  }
LABEL_66:
  if (!(void)v381) {
    goto LABEL_70;
  }
  int v62 = *(unsigned __int8 *)v381;
  if ((v62 - 4) > 0x1E)
  {
    if ((v62 - 3) >= 0xFFFFFFFE) {
      uint64_t v82 = v381;
    }
    else {
      uint64_t v82 = 0;
    }
    if ((v62 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v83 = v82 + 8;
LABEL_99:
      unint64_t v371 = &v381;
      sub_1CC5FA668(v83 + 16, &v371);
      goto LABEL_70;
    }
    if (v62 == 3) {
      *(void *)(v381 + 8) = 0;
    }
  }
  else if ((*(unsigned char *)(v381 + 1) & 0x7F) == 2 || *(_DWORD *)(v381 + 12))
  {
    uint64_t v347 = *(void *)(v381 + 16);
    if ((v347 & 4) != 0)
    {
      unint64_t v83 = v347 & 0xFFFFFFFFFFFFFFF8;
      if (v83) {
        goto LABEL_99;
      }
    }
  }
LABEL_70:
  unsigned int v63 = *((unsigned __int8 *)a2 + 16);
  if (v63 == 17)
  {
    uint64_t v66 = *(void *)(v362 + 856);
    LODWORD(v371) = v54;
    LODWORD(v372) = 1;
    (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)v66 + 24))(v66, &v371, a2);
    goto LABEL_77;
  }
  if (v63 != 16)
  {
    if (v63 - 11 <= 1)
    {
      uint64_t v67 = *(void *)(v362 + 856);
      LODWORD(v371) = v54;
      LODWORD(v372) = 1;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void, void, void))(*(void *)v67 + 32))(v67, 68, &v371, 1, 0, 0, 0);
      goto LABEL_77;
    }
    if (v63 == 19)
    {
      uint64_t v69 = *(void *)(v362 + 856);
      LODWORD(v381) = v54;
      DWORD2(v381) = 1;
      if (v54 < 0 && (uint64_t v70 = *(void *)(v69 + 24), (v54 & 0x7FFFFFFFu) < *(_DWORD *)(v70 + 432)))
      {
        unint64_t v71 = *(void *)(*(void *)(v70 + 424) + 8 * (v54 & 0x7FFFFFFF));
        if (v71)
        {
          unint64_t v72 = (v71 >> 3);
LABEL_86:
          uint64_t v73 = llvm::IntegerType::get(****(llvm::IntegerType *****)(v69 + 8), (llvm::LLVMContext *)v72);
          unint64_t v75 = *(llvm::ConstantInt **)v73;
          unsigned int v76 = *(_DWORD *)(v73 + 8);
          LODWORD(v372) = v76 >> 8;
          if (v76 >> 8 >= 0x41) {
            operator new[]();
          }
          unint64_t v371 = 0;
          llvm::ConstantInt::get(v75, (llvm::LLVMContext *)&v371, v74);
          if (v372 >= 0x41 && v371) {
            MEMORY[0x1D25D9CB0](v371, 0x1000C8000313F17);
          }
          unint64_t v65 = *(void (**)(void))(*(void *)v69 + 16);
          goto LABEL_73;
        }
        if ((v71 & 4) != 0)
        {
          if ((v71 & 2) != 0) {
            unint64_t v72 = (unsigned __int16)(v71 >> 19);
          }
          else {
            unint64_t v72 = (v71 >> 19);
          }
          goto LABEL_86;
        }
      }
      else
      {
        unint64_t v71 = 0;
      }
      unint64_t v72 = (unsigned __int16)(v71 >> 3);
      goto LABEL_86;
    }
    if (v63 > 3)
    {
      if (v63 == 13)
      {
        uint64_t v77 = *a2;
        if (*(unsigned char *)(*a2 + 8) == 18)
        {
          unsigned int ElementCount = llvm::ConstantAggregateZero::getElementCount((llvm::ConstantAggregateZero *)a2);
          if (ElementCount == 1)
          {
            NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(v77 + 24), v79, v80);
LABEL_149:
            uint64_t v118 = (uint64_t)NullValue;
LABEL_150:
            sub_1CC6F5BF4(v362, a2, v118, *(void *)(v362 + 856));
            goto LABEL_77;
          }
          *(void *)&long long v381 = v382;
          *((void *)&v381 + 1) = 0x400000000;
          if (ElementCount)
          {
            uint64_t v126 = 0;
            uint64_t v127 = 8 * ElementCount;
            do
            {
              uint64_t v128 = *a2;
              if (*(_DWORD *)(*a2 + 8) == 17 || (*(_DWORD *)(*a2 + 8) & 0xFE) == 18) {
                unint64_t v134 = (llvm::Constant **)(v128 + 24);
              }
              else {
                unint64_t v134 = (llvm::Constant **)(*(void *)(v128 + 16) + v126);
              }
              unsigned __int8 v130 = llvm::Constant::getNullValue(*v134, v79, v80);
              char v131 = (int *)sub_1CC6EF0A4(v362, v130);
              if (v79) {
                int v132 = *v131;
              }
              else {
                int v132 = 0;
              }
              if (DWORD2(v381) >= (unint64_t)HIDWORD(v381)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(_DWORD *)(v381 + 4 * DWORD2(v381)) = v132;
              unint64_t v133 = ++DWORD2(v381);
              v126 += 8;
            }
            while (v127 != v126);
            uint64_t v135 = (int *)v381;
          }
          else
          {
            unint64_t v133 = 0;
            uint64_t v135 = (int *)v382;
          }
          uint64_t v152 = *(void *)(v362 + 856);
          LODWORD(v369) = v54;
          int v370 = 1;
          unint64_t v371 = &v373;
          uint64_t v372 = 0x800000000;
          if (v133 >= 9) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v133)
          {
            uint64_t v153 = 0;
            uint64_t v154 = 4 * v133;
            do
            {
              int v155 = *v135++;
              uint64_t v156 = &(&v373)[v153];
              _DWORD *v156 = v155;
              v156[4] = 0;
              v153 += 3;
              v154 -= 4;
            }
            while (v154);
            int v157 = v372;
          }
          else
          {
            int v157 = 0;
          }
          LODWORD(v372) = v157 + v133;
          (*(void (**)(uint64_t, uint64_t, llvm::Value **, uint64_t, void **))(*(void *)v152 + 32))(v152, 77, &v369, 1, &v373);
          int v15 = v364;
          if (v371 != &v373) {
            free(v371);
          }
          int v164 = (void *)v381;
          if ((void *)v381 == v382) {
            goto LABEL_77;
          }
          goto LABEL_259;
        }
LABEL_110:
        uint64_t v97 = **(uint64_t *****)(v51 + 864);
        if ((*((unsigned char *)v97 + 23) & 0x20) == 0) {
          goto LABEL_125;
        }
        uint64_t v98 = ***v97;
        unint64_t v371 = **(void ***)(v51 + 864);
        int v99 = *(_DWORD *)(v98 + 2496);
        if (v99)
        {
          uint64_t v100 = *(void *)(v98 + 2480);
          int v101 = v99 - 1;
          unsigned int v102 = v101 & ((v97 >> 4) ^ (v97 >> 9));
          unint64_t v103 = (uint64_t ****)(v100 + 40 * v102);
          unint64_t v104 = *v103;
          if (*v103 == v97) {
            goto LABEL_121;
          }
          uint64_t v105 = 0;
          int v106 = 1;
          while (v104 != (uint64_t ***)-4096)
          {
            if (v105) {
              BOOL v107 = 0;
            }
            else {
              BOOL v107 = v104 == (uint64_t ***)-8192;
            }
            if (v107) {
              uint64_t v105 = v103;
            }
            unsigned int v108 = v102 + v106++;
            unsigned int v102 = v108 & v101;
            unint64_t v103 = (uint64_t ****)(v100 + 40 * v102);
            unint64_t v104 = *v103;
            if (*v103 == v97) {
              goto LABEL_121;
            }
          }
          if (v105) {
            uint64_t v206 = v105;
          }
          else {
            uint64_t v206 = v103;
          }
        }
        else
        {
          uint64_t v206 = 0;
        }
        unint64_t v103 = (uint64_t ****)sub_1CC609054(v98 + 2480, (uint64_t)&v371, (uint64_t *)&v371, v206);
        unint64_t v207 = (uint64_t ***)v371;
        v103[3] = 0;
        v103[4] = 0;
        unint64_t *v103 = v207;
        v103[1] = (uint64_t ***)(v103 + 3);
        v103[2] = (uint64_t ***)0x100000000;
LABEL_121:
        uint64_t v109 = *((unsigned int *)v103 + 4);
        uint64_t v51 = v362;
        if (v109)
        {
          int v110 = v103[1] + 1;
          uint64_t v111 = 16 * v109;
          while (*((_DWORD *)v110 - 2))
          {
            v110 += 2;
            v111 -= 16;
            if (!v111) {
              goto LABEL_125;
            }
          }
          uint64_t v204 = *v110;
          long long v381 = 0uLL;
          if (v204)
          {
            uint64_t v205 = v204;
            if (*(unsigned char *)v204 != 15) {
              uint64_t v205 = *(void *)(v204 - 8 * *(unsigned int *)(v204 + 8));
            }
            *(void *)&long long v381 = v205;
            DWORD2(v381) = *(_DWORD *)(v204 + 28);
            uint64_t v51 = v362;
          }
          goto LABEL_126;
        }
LABEL_125:
        long long v381 = 0uLL;
LABEL_126:
        uint64_t v112 = *(void *)(**(void **)(v51 + 864) + 80);
        if (v112) {
          uint64_t v113 = v112 - 24;
        }
        else {
          uint64_t v113 = 0;
        }
        llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)&v371, (uint64_t)"gisel-irtranslator", (uint64_t)"GISelFailure", 12, &v381, v113);
        *(void *)&long long v381 = "unable to translate constant: ";
        *((void *)&v381 + 1) = 30;
        sub_1CC59ADEC((uint64_t *)&v375, (uint64_t)&v381);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v365, "Type", 4uLL, (llvm::Type *)*a2);
        sub_1CD3D6290((uint64_t)&v371, (long long *)v365);
        if (v368 < 0) {
          operator delete(__p);
        }
        if (v366 < 0) {
          operator delete(v365[0]);
        }
        sub_1CC6F1568(**(uint64_t *****)(v51 + 864), *(uint64_t **)(*(void *)(v51 + 864) + 360), *(void *)(v51 + 888), *(uint64_t ****)(v51 + 904), (llvm::DiagnosticInfoOptimizationBase *)&v371);
        int v12 = (int *)*v15;
        unint64_t v371 = &unk_1F2616800;
        int v114 = (char *)v375;
        if (v376)
        {
          unint64_t v115 = (unint64_t)v376 << 6;
          do
          {
            uint64_t v116 = (void **)&v114[v115];
            if (v114[v115 - 17] < 0) {
              operator delete(*(v116 - 5));
            }
            if (*((char *)v116 - 41) < 0) {
              operator delete(*(v116 - 8));
            }
            v115 -= 64;
          }
          while (v115);
          int v114 = (char *)v375;
        }
        if (v114 != (char *)&v377) {
          free(v114);
        }
        goto LABEL_78;
      }
      if (v63 == 15) {
        uint64_t v117 = (llvm::ConstantFP ***)a2;
      }
      else {
        uint64_t v117 = 0;
      }
      if (v63 == 15)
      {
        if (*(_DWORD *)(*a2 + 32) == 1)
        {
          NullValue = llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantFP ***)a2, 0);
          goto LABEL_149;
        }
        unsigned int v137 = 0;
        unsigned int v138 = 0;
        *(void *)&long long v381 = v382;
        *((void *)&v381 + 1) = 0x400000000;
        while (v138 < *((_DWORD *)*v117 + 8))
        {
          ElementAsConstant = llvm::ConstantDataSequential::getElementAsConstant(v117, v138);
          unint64_t v140 = (int *)sub_1CC6EF0A4(v362, ElementAsConstant);
          if (v141) {
            int v142 = *v140;
          }
          else {
            int v142 = 0;
          }
          if (DWORD2(v381) >= (unint64_t)HIDWORD(v381)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(v381 + 4 * DWORD2(v381)) = v142;
          unsigned int v137 = ++DWORD2(v381);
          ++v138;
        }
        uint64_t v145 = *(void *)(v362 + 856);
        LODWORD(v369) = v54;
        int v370 = 1;
        long long v146 = (int *)v381;
        unint64_t v371 = &v373;
        uint64_t v372 = 0x800000000;
        if (v137 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v137)
        {
          uint64_t v147 = 0;
          uint64_t v148 = 4 * v137;
          do
          {
            int v149 = *v146++;
            uint64_t v150 = &(&v373)[v147];
            _DWORD *v150 = v149;
            void v150[4] = 0;
            v147 += 3;
            v148 -= 4;
          }
          while (v148);
          int v151 = v372;
        }
        else
        {
          int v151 = 0;
        }
        LODWORD(v372) = v151 + v137;
        (*(void (**)(uint64_t, uint64_t, llvm::Value **, uint64_t, void **))(*(void *)v145 + 32))(v145, 77, &v369, 1, &v373);
        if (v371 != &v373) {
          free(v371);
        }
        int v164 = (void *)v381;
        int v15 = v364;
        if ((void *)v381 == v382) {
          goto LABEL_77;
        }
LABEL_259:
        free(v164);
        goto LABEL_77;
      }
      if (v63 == 5) {
        char v125 = a2;
      }
      else {
        char v125 = 0;
      }
      if (v63 == 5)
      {
        switch(*((_WORD *)a2 + 9))
        {
          case 1:
            if ((sub_1CC6F2494(v362, (unint64_t)a2, *(void *)(v362 + 856)) & 1) == 0) {
              goto LABEL_110;
            }
            goto LABEL_77;
          case 2:
            sub_1CC6F2A44(v362, (uint64_t ***)a2, *(void **)(v362 + 856));
            goto LABEL_77;
          case 3:
            sub_1CC6F4060(v362, (uint64_t)a2, *(void **)(v362 + 856));
            goto LABEL_77;
          case 4:
            sub_1CD615858(v362, a2, *(void *)(v362 + 856));
            goto LABEL_77;
          case 5:
            if (!sub_1CC6FBE60(v362, (unint64_t)a2, *(void **)(v362 + 856))) {
              goto LABEL_110;
            }
            goto LABEL_77;
          case 7:
            sub_1CC6FD94C(*(unsigned int *)(*(void *)(*(void *)(v362 + 864) + 8) + 1040), (uint64_t)a2, *(void **)(v362 + 856));
            goto LABEL_77;
          case 0xC:
            sub_1CC6F1FA0(v362, 177, (uint64_t)a2, *(void *)(v362 + 856));
            goto LABEL_77;
          case 0xD:
            uint64_t v224 = *(void *)(v362 + 856);
            uint64_t v225 = v362;
            uint64_t v226 = 45;
            break;
          case 0xE:
            uint64_t v224 = *(void *)(v362 + 856);
            uint64_t v225 = v362;
            uint64_t v226 = 163;
            break;
          case 0xF:
            uint64_t v224 = *(void *)(v362 + 856);
            uint64_t v225 = v362;
            uint64_t v226 = 46;
            break;
          case 0x10:
            uint64_t v224 = *(void *)(v362 + 856);
            uint64_t v225 = v362;
            uint64_t v226 = 164;
            break;
          case 0x11:
            uint64_t v224 = *(void *)(v362 + 856);
            uint64_t v225 = v362;
            uint64_t v226 = 47;
            break;
          case 0x12:
            uint64_t v224 = *(void *)(v362 + 856);
            uint64_t v225 = v362;
            uint64_t v226 = 165;
            break;
          case 0x13:
            uint64_t v224 = *(void *)(v362 + 856);
            uint64_t v225 = v362;
            uint64_t v226 = 60;
            break;
          case 0x14:
            uint64_t v224 = *(void *)(v362 + 856);
            uint64_t v225 = v362;
            uint64_t v226 = 59;
            break;
          case 0x15:
            uint64_t v224 = *(void *)(v362 + 856);
            uint64_t v225 = v362;
            uint64_t v226 = 168;
            break;
          case 0x16:
            uint64_t v224 = *(void *)(v362 + 856);
            uint64_t v225 = v362;
            uint64_t v226 = 62;
            break;
          case 0x17:
            uint64_t v224 = *(void *)(v362 + 856);
            uint64_t v225 = v362;
            uint64_t v226 = 61;
            break;
          case 0x18:
            uint64_t v224 = *(void *)(v362 + 856);
            uint64_t v225 = v362;
            uint64_t v226 = 169;
            break;
          case 0x19:
            uint64_t v224 = *(void *)(v362 + 856);
            uint64_t v225 = v362;
            uint64_t v226 = 127;
            break;
          case 0x1A:
            uint64_t v224 = *(void *)(v362 + 856);
            uint64_t v225 = v362;
            uint64_t v226 = 128;
            break;
          case 0x1B:
            uint64_t v224 = *(void *)(v362 + 856);
            uint64_t v225 = v362;
            uint64_t v226 = 129;
            break;
          case 0x1C:
            uint64_t v224 = *(void *)(v362 + 856);
            uint64_t v225 = v362;
            uint64_t v226 = 65;
            break;
          case 0x1D:
            uint64_t v224 = *(void *)(v362 + 856);
            uint64_t v225 = v362;
            uint64_t v226 = 66;
            break;
          case 0x1E:
            uint64_t v224 = *(void *)(v362 + 856);
            uint64_t v225 = v362;
            uint64_t v226 = 67;
            break;
          case 0x1F:
            if ((sub_1CC6FD4C0(v362, (uint64_t)a2, *(void **)(v362 + 856)) & 1) == 0) {
              goto LABEL_110;
            }
            goto LABEL_77;
          case 0x20:
            sub_1CC6F49F8(v362, a2, *(const llvm::MachineBasicBlock ***)(v362 + 856));
            goto LABEL_77;
          case 0x21:
            sub_1CC6F5020(v362, (unint64_t)a2, *(const llvm::MachineBasicBlock ***)(v362 + 856));
            goto LABEL_77;
          case 0x22:
            sub_1CC6F5D48(v362, a2, *(void *)(v362 + 856));
            goto LABEL_77;
          case 0x23:
            sub_1CD62E1DC(*(void *)(v362 + 856), 3u, *((unsigned __int8 *)a2 + 60));
            goto LABEL_77;
          case 0x24:
            sub_1CC6FE13C(v362, (uint64_t)a2, *(void **)(v362 + 856));
            goto LABEL_77;
          case 0x25:
            if (!sub_1CC6FE414(v362, (uint64_t)a2, *(void **)(v362 + 856))) {
              goto LABEL_110;
            }
            goto LABEL_77;
          case 0x26:
            int v298 = *((_DWORD *)a2 + 5);
            if ((v298 & 0x40000000) != 0) {
              unint64_t v299 = (uint64_t *)*(a2 - 1);
            }
            else {
              unint64_t v299 = &a2[-4 * (v298 & 0x7FFFFFF)];
            }
            uint64_t v300 = *(void *)(v362 + 856);
            unint64_t v301 = (int *)sub_1CC6EF0A4(v362, *v299);
            if (v302) {
              int v303 = *v301;
            }
            else {
              int v303 = 0;
            }
            uint64_t v304 = (int *)sub_1CC6EF0A4(v362, a2);
            if (v305) {
              int v306 = *v304;
            }
            else {
              int v306 = 0;
            }
            LODWORD(v381) = v306;
            DWORD2(v381) = 1;
            LODWORD(v371) = v303;
            LODWORD(v373) = 0;
            (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*(void *)v300 + 32))(v300, 119, &v381, 1, &v371, 1, 0);
            goto LABEL_453;
          case 0x27:
            int v227 = *((_DWORD *)a2 + 5);
            if ((v227 & 0x40000000) != 0) {
              uint64_t v228 = (uint64_t *)*(a2 - 1);
            }
            else {
              uint64_t v228 = &a2[-4 * (v227 & 0x7FFFFFF)];
            }
            uint64_t v229 = *(void *)(v362 + 856);
            uint64_t v230 = (int *)sub_1CC6EF0A4(v362, *v228);
            if (v231) {
              int v232 = *v230;
            }
            else {
              int v232 = 0;
            }
            int v233 = (int *)sub_1CC6EF0A4(v362, a2);
            if (v234) {
              int v235 = *v233;
            }
            else {
              int v235 = 0;
            }
            LODWORD(v381) = v235;
            DWORD2(v381) = 1;
            LODWORD(v371) = v232;
            LODWORD(v373) = 0;
            (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*(void *)v229 + 32))(v229, 126, &v381, 1, &v371, 1, 0);
            goto LABEL_453;
          case 0x28:
            int v244 = *((_DWORD *)a2 + 5);
            if ((v244 & 0x40000000) != 0) {
              uint64_t v245 = (uint64_t *)*(a2 - 1);
            }
            else {
              uint64_t v245 = &a2[-4 * (v244 & 0x7FFFFFF)];
            }
            uint64_t v246 = *(void *)(v362 + 856);
            uint64_t v247 = (int *)sub_1CC6EF0A4(v362, *v245);
            if (v248) {
              int v249 = *v247;
            }
            else {
              int v249 = 0;
            }
            int v250 = (int *)sub_1CC6EF0A4(v362, a2);
            if (v251) {
              int v252 = *v250;
            }
            else {
              int v252 = 0;
            }
            LODWORD(v381) = v252;
            DWORD2(v381) = 1;
            LODWORD(v371) = v249;
            LODWORD(v373) = 0;
            (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*(void *)v246 + 32))(v246, 124, &v381, 1, &v371, 1, 0);
            goto LABEL_453;
          case 0x29:
            int v307 = *((_DWORD *)a2 + 5);
            if ((v307 & 0x40000000) != 0) {
              BOOL v308 = (uint64_t *)*(a2 - 1);
            }
            else {
              BOOL v308 = &a2[-4 * (v307 & 0x7FFFFFF)];
            }
            uint64_t v309 = *(void *)(v362 + 856);
            char v310 = (int *)sub_1CC6EF0A4(v362, *v308);
            if (v311) {
              int v312 = *v310;
            }
            else {
              int v312 = 0;
            }
            char v313 = (int *)sub_1CC6EF0A4(v362, a2);
            if (v314) {
              int v315 = *v313;
            }
            else {
              int v315 = 0;
            }
            LODWORD(v381) = v315;
            DWORD2(v381) = 1;
            LODWORD(v371) = v312;
            LODWORD(v373) = 0;
            (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*(void *)v309 + 32))(v309, 181, &v381, 1, &v371, 1, 0);
            goto LABEL_453;
          case 0x2A:
            int v289 = *((_DWORD *)a2 + 5);
            if ((v289 & 0x40000000) != 0) {
              uint64_t v290 = (uint64_t *)*(a2 - 1);
            }
            else {
              uint64_t v290 = &a2[-4 * (v289 & 0x7FFFFFF)];
            }
            uint64_t v291 = *(void *)(v362 + 856);
            v292 = (int *)sub_1CC6EF0A4(v362, *v290);
            if (v293) {
              int v294 = *v292;
            }
            else {
              int v294 = 0;
            }
            int v295 = (int *)sub_1CC6EF0A4(v362, a2);
            if (v296) {
              int v297 = *v295;
            }
            else {
              int v297 = 0;
            }
            LODWORD(v381) = v297;
            DWORD2(v381) = 1;
            LODWORD(v371) = v294;
            LODWORD(v373) = 0;
            (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*(void *)v291 + 32))(v291, 180, &v381, 1, &v371, 1, 0);
            goto LABEL_453;
          case 0x2B:
            int v316 = *((_DWORD *)a2 + 5);
            if ((v316 & 0x40000000) != 0) {
              unint64_t v317 = (uint64_t *)*(a2 - 1);
            }
            else {
              unint64_t v317 = &a2[-4 * (v316 & 0x7FFFFFF)];
            }
            uint64_t v318 = *(void *)(v362 + 856);
            char v319 = (int *)sub_1CC6EF0A4(v362, *v317);
            if (v320) {
              int v321 = *v319;
            }
            else {
              int v321 = 0;
            }
            uint64_t v322 = (int *)sub_1CC6EF0A4(v362, a2);
            if (v323) {
              int v324 = *v322;
            }
            else {
              int v324 = 0;
            }
            LODWORD(v381) = v324;
            DWORD2(v381) = 1;
            LODWORD(v371) = v321;
            LODWORD(v373) = 0;
            (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*(void *)v318 + 32))(v318, 183, &v381, 1, &v371, 1, 0);
            goto LABEL_453;
          case 0x2C:
            int v262 = *((_DWORD *)a2 + 5);
            if ((v262 & 0x40000000) != 0) {
              unint64_t v263 = (uint64_t *)*(a2 - 1);
            }
            else {
              unint64_t v263 = &a2[-4 * (v262 & 0x7FFFFFF)];
            }
            uint64_t v264 = *(void *)(v362 + 856);
            uint64_t v265 = (int *)sub_1CC6EF0A4(v362, *v263);
            if (v266) {
              int v267 = *v265;
            }
            else {
              int v267 = 0;
            }
            uint64_t v268 = (int *)sub_1CC6EF0A4(v362, a2);
            if (v269) {
              int v270 = *v268;
            }
            else {
              int v270 = 0;
            }
            LODWORD(v381) = v270;
            DWORD2(v381) = 1;
            LODWORD(v371) = v267;
            LODWORD(v373) = 0;
            (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*(void *)v264 + 32))(v264, 182, &v381, 1, &v371, 1, 0);
            goto LABEL_453;
          case 0x2D:
            int v271 = *((_DWORD *)a2 + 5);
            if ((v271 & 0x40000000) != 0) {
              uint64_t v272 = (uint64_t *)*(a2 - 1);
            }
            else {
              uint64_t v272 = &a2[-4 * (v271 & 0x7FFFFFF)];
            }
            uint64_t v273 = *(void *)(v362 + 856);
            v274 = (int *)sub_1CC6EF0A4(v362, *v272);
            if (v275) {
              int v276 = *v274;
            }
            else {
              int v276 = 0;
            }
            uint64_t v277 = (int *)sub_1CC6EF0A4(v362, a2);
            if (v278) {
              int v279 = *v277;
            }
            else {
              int v279 = 0;
            }
            LODWORD(v381) = v279;
            DWORD2(v381) = 1;
            LODWORD(v371) = v276;
            LODWORD(v373) = 0;
            (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*(void *)v273 + 32))(v273, 179, &v381, 1, &v371, 1, 0);
            goto LABEL_453;
          case 0x2E:
            int v280 = *((_DWORD *)a2 + 5);
            if ((v280 & 0x40000000) != 0) {
              int v281 = (uint64_t *)*(a2 - 1);
            }
            else {
              int v281 = &a2[-4 * (v280 & 0x7FFFFFF)];
            }
            uint64_t v282 = *(void *)(v362 + 856);
            unint64_t v283 = (int *)sub_1CC6EF0A4(v362, *v281);
            if (v284) {
              int v285 = *v283;
            }
            else {
              int v285 = 0;
            }
            int64_t v286 = (int *)sub_1CC6EF0A4(v362, a2);
            if (v287) {
              int v288 = *v286;
            }
            else {
              int v288 = 0;
            }
            LODWORD(v381) = v288;
            DWORD2(v381) = 1;
            LODWORD(v371) = v285;
            LODWORD(v373) = 0;
            (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*(void *)v282 + 32))(v282, 178, &v381, 1, &v371, 1, 0);
            goto LABEL_453;
          case 0x2F:
            int v253 = *((_DWORD *)a2 + 5);
            if ((v253 & 0x40000000) != 0) {
              unint64_t v254 = (uint64_t *)*(a2 - 1);
            }
            else {
              unint64_t v254 = &a2[-4 * (v253 & 0x7FFFFFF)];
            }
            uint64_t v255 = *(void *)(v362 + 856);
            unint64_t v256 = (int *)sub_1CC6EF0A4(v362, *v254);
            if (v257) {
              int v258 = *v256;
            }
            else {
              int v258 = 0;
            }
            uint64_t v259 = (int *)sub_1CC6EF0A4(v362, a2);
            if (v260) {
              int v261 = *v259;
            }
            else {
              int v261 = 0;
            }
            LODWORD(v381) = v261;
            DWORD2(v381) = 1;
            LODWORD(v371) = v258;
            LODWORD(v373) = 0;
            (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*(void *)v255 + 32))(v255, 80, &v381, 1, &v371, 1, 0);
            goto LABEL_453;
          case 0x30:
            int v215 = *((_DWORD *)a2 + 5);
            if ((v215 & 0x40000000) != 0) {
              v216 = (uint64_t *)*(a2 - 1);
            }
            else {
              v216 = &a2[-4 * (v215 & 0x7FFFFFF)];
            }
            uint64_t v217 = *(void *)(v362 + 856);
            unint64_t v218 = (int *)sub_1CC6EF0A4(v362, *v216);
            if (v219) {
              int v220 = *v218;
            }
            else {
              int v220 = 0;
            }
            uint64_t v221 = (int *)sub_1CC6EF0A4(v362, a2);
            if (v222) {
              int v223 = *v221;
            }
            else {
              int v223 = 0;
            }
            LODWORD(v381) = v223;
            DWORD2(v381) = 1;
            LODWORD(v371) = v220;
            LODWORD(v373) = 0;
            (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*(void *)v217 + 32))(v217, 81, &v381, 1, &v371, 1, 0);
            goto LABEL_453;
          case 0x31:
            uint64_t v236 = *(void *)(v362 + 856);
            int v237 = *((_DWORD *)a2 + 5);
            if ((v237 & 0x40000000) != 0) {
              char v238 = (llvm ***)*(a2 - 1);
            }
            else {
              char v238 = (llvm ***)&a2[-4 * (v237 & 0x7FFFFFF)];
            }
            unint64_t LLTForType = llvm::getLLTForType(**v238, *(llvm::Type **)(v362 + 880), v41);
            unint64_t v241 = llvm::getLLTForType((llvm *)*a2, *(llvm::Type **)(v362 + 880), v240);
            int v242 = *((_DWORD *)a2 + 5);
            if (LLTForType == v241)
            {
              if ((v242 & 0x40000000) != 0) {
                unint64_t v243 = (uint64_t *)*(a2 - 1);
              }
              else {
                unint64_t v243 = &a2[-4 * (v242 & 0x7FFFFFF)];
              }
              sub_1CC6F5BF4(v362, a2, *v243, v236);
            }
            else
            {
              if ((v242 & 0x40000000) != 0) {
                v348 = (uint64_t *)*(a2 - 1);
              }
              else {
                v348 = &a2[-4 * (v242 & 0x7FFFFFF)];
              }
              unint64_t v349 = (int *)sub_1CC6EF0A4(v362, *v348);
              if (v350) {
                int v351 = *v349;
              }
              else {
                int v351 = 0;
              }
              unint64_t v352 = (int *)sub_1CC6EF0A4(v362, a2);
              if (v353) {
                int v354 = *v352;
              }
              else {
                int v354 = 0;
              }
              LODWORD(v381) = v354;
              DWORD2(v381) = 1;
              LODWORD(v371) = v351;
              LODWORD(v373) = 0;
              (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*(void *)v236 + 32))(v236, 82, &v381, 1, &v371, 1, 0);
            }
            goto LABEL_453;
          case 0x32:
            int v325 = *((_DWORD *)a2 + 5);
            if ((v325 & 0x40000000) != 0) {
              uint64_t v326 = (uint64_t *)*(a2 - 1);
            }
            else {
              uint64_t v326 = &a2[-4 * (v325 & 0x7FFFFFF)];
            }
            uint64_t v327 = *(void *)(v362 + 856);
            int8x8_t v328 = (int *)sub_1CC6EF0A4(v362, *v326);
            if (v329) {
              int v330 = *v328;
            }
            else {
              int v330 = 0;
            }
            unsigned int v331 = (int *)sub_1CC6EF0A4(v362, a2);
            if (v332) {
              int v333 = *v331;
            }
            else {
              int v333 = 0;
            }
            LODWORD(v381) = v333;
            DWORD2(v381) = 1;
            LODWORD(v371) = v330;
            LODWORD(v373) = 0;
            (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*(void *)v327 + 32))(v327, 221, &v381, 1, &v371, 1, 0);
            goto LABEL_453;
          case 0x35:
          case 0x36:
            sub_1CC6F2164(v362, (uint64_t)a2, *(void *)(v362 + 856));
            goto LABEL_77;
          case 0x37:
            uint64_t v334 = *(void *)(v362 + 856);
            unint64_t v371 = &v373;
            uint64_t v372 = 0x400000000;
            uint64_t v335 = sub_1CC6EF0A4(v362, a2);
            if (v336)
            {
              unint64_t v337 = (_DWORD *)v335;
              uint64_t v338 = 4 * v336;
              do
              {
                LODWORD(v381) = *v337;
                DWORD2(v381) = 1;
                (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void, void, void))(*(void *)v334 + 32))(v334, 69, &v381, 1, 0, 0, 0);
                if (v372 >= (unint64_t)HIDWORD(v372)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v371 + v372) = v339;
                LODWORD(v372) = v372 + 1;
                ++v337;
                v338 -= 4;
              }
              while (v338);
            }
            *(void *)&long long v381 = v125;
            uint64_t v340 = *(unsigned int *)(v362 + 552);
            if (v340 >= *(_DWORD *)(v362 + 556)) {
              sub_1CD616CA8();
            }
            unint64_t v341 = (uint64_t **)(*(void *)(v362 + 544) + 32 * v340);
            *unint64_t v341 = v125;
            uint64_t v342 = (void **)(v341 + 3);
            v341[2] = (uint64_t *)0x100000000;
            v341[1] = (uint64_t *)(v341 + 3);
            int v343 = (void **)(v341 + 1);
            int v344 = v372;
            if (v343 != &v371 && v372 != 0)
            {
              int v346 = v371;
              if (v371 == &v373)
              {
                if (v372 >= 2)
                {
                  *((_DWORD *)v343 + 2) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy(v342, &v373, 8 * v372);
                *((_DWORD *)v343 + 2) = v344;
              }
              else
              {
                if (v342 != v343 + 2)
                {
                  free(v342);
                  int v346 = v371;
                  int v344 = v372;
                }
                *int v343 = v346;
                *((_DWORD *)v343 + 2) = v344;
                *((_DWORD *)v343 + 3) = HIDWORD(v372);
                unint64_t v371 = &v373;
                HIDWORD(v372) = 0;
              }
              LODWORD(v372) = 0;
            }
            ++*(_DWORD *)(v362 + 552);
            int v203 = v371;
            if (v371 != &v373) {
              goto LABEL_291;
            }
            goto LABEL_453;
          case 0x38:
            if ((sub_1CC6F7808(v362, (uint64_t)a2, *(void *)(v362 + 856), v42) & 1) == 0) {
              goto LABEL_110;
            }
            goto LABEL_77;
          case 0x39:
            sub_1CC6F5A14(v362, (uint64_t)a2, *(void *)(v362 + 856));
            goto LABEL_77;
          case 0x3C:
            sub_1CD616008(v362, (uint64_t)a2, *(void *)(v362 + 856));
            goto LABEL_77;
          case 0x3D:
            sub_1CC6FDBF8((void *)v362, (uint64_t)a2, *(void **)(v362 + 856));
            goto LABEL_77;
          case 0x3E:
            sub_1CC6FD9F8(v362, (uint64_t)a2, *(void *)(v362 + 856));
            goto LABEL_77;
          case 0x3F:
            sub_1CC6FDF6C(v362, (llvm::ConstantExpr *)a2, *(void *)(v362 + 856));
            goto LABEL_77;
          case 0x40:
            sub_1CC6F5540(v362, (uint64_t)a2);
            goto LABEL_77;
          case 0x41:
            sub_1CC6F5910(v362, (uint64_t)a2);
            goto LABEL_77;
          case 0x42:
            if ((sub_1CC6FCAA0(v362, (llvm **)a2, *(void **)(v362 + 856)) & 1) == 0) {
              goto LABEL_110;
            }
            goto LABEL_77;
          case 0x43:
            sub_1CC6FE6F4(v362, (uint64_t)a2, *(void *)(v362 + 856));
            goto LABEL_77;
          default:
            goto LABEL_110;
        }
        sub_1CC6F1D98(v225, v226, (uint64_t)a2, v224);
        goto LABEL_77;
      }
      if (v63 == 10) {
        uint64_t v143 = a2;
      }
      else {
        uint64_t v143 = 0;
      }
      if (v63 != 10)
      {
        if (v63 == 4)
        {
          sub_1CD62E294(*(void *)(v362 + 856), v54, (uint64_t)a2);
          goto LABEL_77;
        }
        goto LABEL_110;
      }
      unint64_t v144 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
      if (v144 == 1)
      {
        uint64_t v118 = *(a2 - 4);
        goto LABEL_150;
      }
      *(void *)&long long v381 = v382;
      *((void *)&v381 + 1) = 0x400000000;
      if (v144)
      {
        for (unint64_t i = 0; i < v144; ++i)
        {
          int v160 = (int *)sub_1CC6EF0A4(v362, v143[-4 * v144]);
          if (v161) {
            int v162 = *v160;
          }
          else {
            int v162 = 0;
          }
          if (DWORD2(v381) >= (unint64_t)HIDWORD(v381)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(v381 + 4 * DWORD2(v381)) = v162;
          unint64_t v163 = ++DWORD2(v381);
          unint64_t v144 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
          v143 += 4;
        }
        unsigned int v173 = (int *)v381;
      }
      else
      {
        unint64_t v163 = 0;
        unsigned int v173 = (int *)v382;
      }
      uint64_t v174 = *(void *)(v362 + 856);
      LODWORD(v369) = v54;
      int v370 = 1;
      unint64_t v371 = &v373;
      uint64_t v372 = 0x800000000;
      if (v163 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v163)
      {
        uint64_t v175 = 0;
        uint64_t v176 = 4 * v163;
        do
        {
          int v177 = *v173++;
          uint64_t v178 = &(&v373)[v175];
          *uint64_t v178 = v177;
          v178[4] = 0;
          v175 += 3;
          v176 -= 4;
        }
        while (v176);
        int v179 = v372;
      }
      else
      {
        int v179 = 0;
      }
      LODWORD(v372) = v179 + v163;
      (*(void (**)(uint64_t, uint64_t, llvm::Value **, uint64_t, void **))(*(void *)v174 + 32))(v174, 77, &v369, 1, &v373);
      if (v371 != &v373) {
        free(v371);
      }
      int v203 = (void *)v381;
      if ((void *)v381 != v382) {
LABEL_291:
      }
        free(v203);
LABEL_453:
      int v15 = v364;
      goto LABEL_77;
    }
    if (v63 != 3 || (*((unsigned char *)a2 + 34) & 0x40) == 0)
    {
LABEL_109:
      int v95 = *(void **)(v51 + 856);
      LODWORD(v371) = v54;
      LODWORD(v372) = 1;
      sub_1CC735BC8(v95, (uint64_t *)&v371, (uint64_t)a2);
      if (v96) {
        goto LABEL_77;
      }
      goto LABEL_110;
    }
    uint64_t v84 = **(void **)*a2;
    unint64_t v371 = a2;
    int v85 = *(_DWORD *)(v84 + 2520);
    if (v85)
    {
      uint64_t v86 = *(void *)(v84 + 2504);
      int v87 = v85 - 1;
      unsigned int v88 = v87 & (v6 ^ (a2 >> 9));
      BOOL v89 = (uint64_t **)(v86 + 24 * v88);
      int v90 = *v89;
      if (*v89 == a2)
      {
LABEL_104:
        if (v89[2] != (uint64_t *)12) {
          goto LABEL_109;
        }
        unint64_t v91 = v89[1];
        uint64_t v92 = *v91;
        int v93 = *((_DWORD *)v91 + 2);
        if (v92 != 0x7274702E6D766C6CLL || v93 != 1752462689) {
          goto LABEL_109;
        }
        unint64_t v169 = llvm::GlobalPtrAuthInfo::analyze((uint64_t ***)a2, (const llvm::Value *)v55);
        unint64_t v170 = (int *)sub_1CC6EF0A4(v51, *(void *)(*(void *)(v169 - 32)- 32 * (*(_DWORD *)(*(void *)(v169 - 32) + 20) & 0x7FFFFFF)));
        if (v171) {
          int v172 = *v170;
        }
        else {
          int v172 = 0;
        }
        uint64_t v182 = (int *)sub_1CC6EF0A4(v362, *(void *)(*(void *)(v169 - 32)- 32 * (*(_DWORD *)(*(void *)(v169 - 32) + 20) & 0x7FFFFFF)+ 64));
        if (v183) {
          int v184 = *v182;
        }
        else {
          int v184 = 0;
        }
        char v185 = *(void **)(v362 + 856);
        unint64_t v186 = (llvm::MachineFunction *)v185[1];
        uint64_t v187 = *(void *)(v185[2] + 8) + 3456;
        unint64_t v188 = (unsigned __int8 *)v185[4];
        *(void *)&long long v381 = v188;
        if (v188) {
          llvm::MetadataTracking::track((uint64_t)&v381, v188, 2);
        }
        MachineInstr = llvm::MachineFunction::CreateMachineInstr(v186, v187, (unsigned __int8 **)&v381, 0);
        if ((void)v381)
        {
          int v355 = *(unsigned __int8 *)v381;
          if ((v355 - 4) > 0x1E)
          {
            if ((v355 - 3) >= 0xFFFFFFFE) {
              uint64_t v358 = v381;
            }
            else {
              uint64_t v358 = 0;
            }
            if ((v355 - 3) < 0xFFFFFFFE)
            {
              if (v355 == 3) {
                *(void *)(v381 + 8) = 0;
              }
              goto LABEL_277;
            }
            unint64_t v357 = v358 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v381 + 1) & 0x7F) != 2 && !*(_DWORD *)(v381 + 12)) {
              goto LABEL_277;
            }
            uint64_t v356 = *(void *)(v381 + 16);
            if ((v356 & 4) == 0) {
              goto LABEL_277;
            }
            unint64_t v357 = v356 & 0xFFFFFFFFFFFFFFF8;
            if (!v357) {
              goto LABEL_277;
            }
          }
          unint64_t v371 = &v381;
          sub_1CC5FA668(v357 + 16, &v371);
        }
LABEL_277:
        char v190 = (unint64_t *)v185[6];
        uint64_t v191 = *(void *)(v185[5] + 40);
        *((void *)MachineInstr + 3) = v191;
        uint64_t v192 = *(void *)(v191 + 32);
        uint64_t v193 = *((unsigned int *)MachineInstr + 10);
        if (v193)
        {
          uint64_t v208 = *((void *)MachineInstr + 4);
          uint64_t v209 = *(void *)(v192 + 40);
          uint64_t v210 = 32 * v193;
          do
          {
            if (!*(unsigned char *)v208)
            {
              uint64_t v211 = *(unsigned int *)(v208 + 4);
              if ((int)v211 >= 0) {
                uint64_t v212 = (uint64_t *)(*(void *)(v209 + 272) + 8 * v211);
              }
              else {
                uint64_t v212 = (uint64_t *)(*(void *)(v209 + 24) + 16 * (v211 & 0x7FFFFFFF) + 8);
              }
              uint64_t v213 = *v212;
              if (*v212)
              {
                uint64_t v214 = *(void *)(v213 + 16);
                *(void *)(v213 + 16) = v208;
                *(void *)(v208 + 16) = v214;
                if (*(unsigned char *)(v208 + 3))
                {
                  *(void *)(v208 + 24) = v213;
                }
                else
                {
                  *(void *)(v208 + 24) = 0;
                  uint64_t v212 = (uint64_t *)(v214 + 24);
                }
              }
              else
              {
                *(void *)(v208 + 16) = v208;
                *(void *)(v208 + 24) = 0;
              }
              *uint64_t v212 = v208;
            }
            v208 += 32;
            v210 -= 32;
          }
          while (v210);
        }
        uint64_t v194 = *(void *)(v192 + 728);
        if (v194) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v194 + 24))(v194, MachineInstr);
        }
        unint64_t v195 = *v190 & 0xFFFFFFFFFFFFFFF8;
        *(void *)MachineInstr = v195 | *(void *)MachineInstr & 7;
        *((void *)MachineInstr + 1) = v190;
        *(void *)(v195 + 8) = MachineInstr;
        *char v190 = *v190 & 7 | (unint64_t)MachineInstr;
        uint64_t v196 = v185[7];
        if (v196) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v196 + 24))(v196, MachineInstr);
        }
        uint64_t v372 = 0;
        uint64_t v373 = 0;
        uint64_t v374 = 0;
        LODWORD(v371) = 0x1000000;
        HIDWORD(v371) = v54;
        llvm::MachineInstr::addOperand(MachineInstr, v186, (const llvm::MachineOperand *)&v371);
        uint64_t v372 = 0;
        uint64_t v373 = 0;
        LODWORD(v371) = 0;
        HIDWORD(v371) = v172;
        uint64_t v374 = 0;
        llvm::MachineInstr::addOperand(MachineInstr, v186, (const llvm::MachineOperand *)&v371);
        uint64_t v197 = *(void *)(*(void *)(v169 - 32) - 32 * (*(_DWORD *)(*(void *)(v169 - 32) + 20) & 0x7FFFFFF) + 32);
        uint64_t v198 = (void *)(v197 + 24);
        if (*(_DWORD *)(v197 + 32) >= 0x41u) {
          uint64_t v198 = (void *)*v198;
        }
        uint64_t v199 = (void *)*v198;
        LODWORD(v371) = 1;
        uint64_t v372 = 0;
        uint64_t v373 = v199;
        llvm::MachineInstr::addOperand(MachineInstr, v186, (const llvm::MachineOperand *)&v371);
        uint64_t v372 = 0;
        uint64_t v373 = 0;
        LODWORD(v371) = 0;
        HIDWORD(v371) = v184;
        uint64_t v374 = 0;
        llvm::MachineInstr::addOperand(MachineInstr, v186, (const llvm::MachineOperand *)&v371);
        uint64_t v200 = *(void *)(*(void *)(v169 - 32) - 32 * (*(_DWORD *)(*(void *)(v169 - 32) + 20) & 0x7FFFFFF) + 96);
        int64_t v201 = (void *)(v200 + 24);
        if (*(_DWORD *)(v200 + 32) >= 0x41u) {
          int64_t v201 = (void *)*v201;
        }
        int v202 = (void *)*v201;
        LODWORD(v371) = 1;
        uint64_t v372 = 0;
        uint64_t v373 = v202;
        llvm::MachineInstr::addOperand(MachineInstr, v186, (const llvm::MachineOperand *)&v371);
        goto LABEL_453;
      }
      unint64_t v165 = 0;
      int v166 = 1;
      while (v90 != (uint64_t *)-4096)
      {
        if (v165) {
          BOOL v167 = 0;
        }
        else {
          BOOL v167 = v90 == (uint64_t *)-8192;
        }
        if (v167) {
          unint64_t v165 = v89;
        }
        unsigned int v168 = v88 + v166++;
        unsigned int v88 = v168 & v87;
        BOOL v89 = (uint64_t **)(v86 + 24 * v88);
        int v90 = *v89;
        if (*v89 == a2) {
          goto LABEL_104;
        }
      }
      if (v165) {
        int v180 = v165;
      }
      else {
        int v180 = v89;
      }
    }
    else
    {
      int v180 = 0;
    }
    BOOL v89 = (uint64_t **)sub_1CC5BF31C(v84 + 2504, (uint64_t)&v371, (uint64_t *)&v371, v180);
    unint64_t v181 = (uint64_t *)v371;
    v89[1] = 0;
    v89[2] = 0;
    void *v89 = v181;
    uint64_t v51 = v362;
    goto LABEL_104;
  }
  uint64_t v64 = *(void *)(v362 + 856);
  LODWORD(v371) = v54;
  LODWORD(v372) = 1;
  unint64_t v65 = *(void (**)(void))(*(void *)v64 + 16);
LABEL_73:
  v65();
LABEL_77:
  int v12 = (int *)*v15;
LABEL_78:
  if (v378 != v380) {
    free(v378);
  }
  return v12;
}

unint64_t sub_1CC6F1568(uint64_t ***a1, uint64_t *a2, uint64_t a3, uint64_t ***a4, llvm::DiagnosticInfoOptimizationBase *this)
{
  uint64_t v8 = *a2;
  *a2 |= 0x10uLL;
  if (*((void *)this + 3) && *(_DWORD *)(*(void *)(a3 + 112) + 1024) != 1) {
    goto LABEL_19;
  }
  if ((*((unsigned char *)a1 + 23) & 0x10) == 0)
  {
    int v19 = 0;
    uint64_t v18 = &byte_1CFBCE98E;
    goto LABEL_12;
  }
  uint64_t v9 = ***a1;
  uint64_t v10 = *(void *)(v9 + 152);
  uint64_t v11 = *(unsigned int *)(v9 + 168);
  if (!v11) {
    goto LABEL_10;
  }
  LODWORD(v12) = (v11 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  int v13 = (uint64_t ****)(v10 + 16 * v12);
  uint64_t v14 = *v13;
  if (*v13 != a1)
  {
    int v15 = 1;
    while (v14 != (uint64_t ***)-4096)
    {
      int v16 = v12 + v15++;
      uint64_t v12 = v16 & (v11 - 1);
      uint64_t v14 = *(uint64_t ****)(v10 + 16 * v12);
      if (v14 == a1)
      {
        int v13 = (uint64_t ****)(v10 + 16 * v12);
        goto LABEL_11;
      }
    }
LABEL_10:
    int v13 = (uint64_t ****)(v10 + 16 * v11);
  }
LABEL_11:
  uint64_t v17 = v13[1];
  int v20 = *v17;
  uint64_t v18 = (char *)(v17 + 2);
  int v19 = v20;
LABEL_12:
  __int16 v27 = 1283;
  v26[0] = " (in function: ";
  void v26[2] = v18;
  void v26[3] = v19;
  v28[0] = v26;
  v28[2] = ")";
  __int16 v29 = 770;
  llvm::Twine::str((llvm::Twine *)v28, v30);
  uint64_t v21 = (void **)v30[0];
  if (v31 >= 0) {
    uint64_t v21 = v30;
  }
  uint64_t v22 = (void *)(v31 & 0x7F);
  if (v31 < 0) {
    uint64_t v22 = v30[1];
  }
  v32[0] = v21;
  v32[1] = v22;
  sub_1CC59ADEC((uint64_t *)this + 10, (uint64_t)v32);
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (*(_DWORD *)(*(void *)(a3 + 112) + 1024) == 1)
  {
    llvm::DiagnosticInfoOptimizationBase::getMsg(this, (uint64_t)v26);
    __int16 v29 = 260;
    v28[0] = v26;
    llvm::report_fatal_error((llvm *)v28, (const llvm::Twine *)1);
  }
LABEL_19:
  llvm::DiagnosticInfoOptimizationBase::getMsg(this, (uint64_t)&__p);
  sub_1CD631770((v8 & 0x10) == 0, 54282728);
  if (v25 < 0) {
    operator delete(__p);
  }
  return llvm::OptimizationRemarkEmitter::emit(a4, this);
}

uint64_t sub_1CC6F1754(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_DWORD *)(a1 + 688);
  uint64_t v20 = a2;
  uint64_t v21 = 0;
  if (sub_1CB87DF68(a1 + 688, &v20, &v21)
    && v21 != (void *)(*(void *)(a1 + 688) + 16 * *(unsigned int *)(a1 + 704)))
  {
    return *((unsigned int *)v21 + 2);
  }
  unsigned int v6 = *(llvm::DataLayout **)(a1 + 880);
  uint64_t v7 = *(llvm::Type **)(a2 + 64);
  unint64_t v8 = (unint64_t)(sub_1CB83544C((uint64_t)v6, (uint64_t)v7) + 7) >> 3;
  BOOL v10 = v9 == 1;
  char Alignment = llvm::DataLayout::getAlignment(v6, v7, 1);
  uint64_t v13 = (1 << Alignment) + v8 - 1;
  uint64_t v14 = -(1 << Alignment);
  if (v10) {
  uint64_t v15 = *(void *)(a2 - 32);
  }
  int v16 = (void *)(v15 + 24);
  if (*(_DWORD *)(v15 + 32) >= 0x41u) {
    int v16 = (void *)*v16;
  }
  if (*v16 * (v13 & (unint64_t)v14) <= 1) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = *v16 * (v13 & v14);
  }
  uint64_t v20 = a2;
  uint64_t v21 = 0;
  char v18 = sub_1CB87DF68((uint64_t)v4, &v20, &v21);
  int v19 = v21;
  if ((v18 & 1) == 0)
  {
    int v19 = sub_1CC7033D0(v4, (uint64_t)&v20, &v20, v21);
    void *v19 = v20;
    *((_DWORD *)v19 + 2) = 0;
  }
  uint64_t result = llvm::MachineFrameInfo::CreateStackObject(*(unsigned __int8 **)(*(void *)(a1 + 864) + 56), v17, *(_WORD *)(a2 + 18) & 0x3F, 0, a2, 0);
  *((_DWORD *)v19 + 2) = result;
  return result;
}

uint64_t sub_1CC6F18C4(uint64_t a1, uint64_t a2)
{
  v17[34] = *MEMORY[0x1E4F143B8];
  switch(*(unsigned char *)(a2 + 16))
  {
    case '<':
    case '=':
      unint64_t v4 = (unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1;
      goto LABEL_4;
    case '@':
    case 'A':
      LOBYTE(v4) = *(unsigned char *)(a2 + 19);
LABEL_4:
      uint64_t result = __clz(1 << v4) ^ 0x3F;
      break;
    default:
      llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)v14, (uint64_t)"gisel-irtranslator", (uint64_t)"", 0, a2);
      v13[0] = "unable to translate memop: ";
      v13[1] = 27;
      sub_1CC59ADEC((uint64_t *)&v15, (uint64_t)v13);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v9, "Opcode", 6uLL, (unsigned __int8 *)a2);
      sub_1CD3D6290((uint64_t)v14, (long long *)v9);
      if (v12 < 0) {
        operator delete(__p);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
      sub_1CC6F1568(**(uint64_t *****)(a1 + 864), *(uint64_t **)(*(void *)(a1 + 864) + 360), *(void *)(a1 + 888), *(uint64_t ****)(a1 + 904), (llvm::DiagnosticInfoOptimizationBase *)v14);
      v14[0] = &unk_1F2616800;
      unsigned int v6 = (char *)v15;
      if (v16)
      {
        unint64_t v7 = (unint64_t)v16 << 6;
        do
        {
          unint64_t v8 = (void **)&v6[v7];
          if (v6[v7 - 17] < 0) {
            operator delete(*(v8 - 5));
          }
          if (*((char *)v8 - 41) < 0) {
            operator delete(*(v8 - 8));
          }
          v7 -= 64;
        }
        while (v7);
        unsigned int v6 = (char *)v15;
      }
      if (v6 != (char *)v17) {
        free(v6);
      }
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_1CC6F1ABC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = result;
  unsigned int v8 = *(_DWORD *)(result + 536);
  unsigned int v9 = a2 >> 4;
  unsigned int v10 = a3 >> 4;
  if (v8)
  {
    uint64_t v11 = *(void *)(result + 520);
    unint64_t v12 = (v10 ^ (a3 >> 9) | ((unint64_t)(v9 ^ (a2 >> 9)) << 32))
        + ~((unint64_t)(v10 ^ (a3 >> 9)) << 32);
    unint64_t v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
    unint64_t v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
    unsigned int v15 = (v8 - 1) & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~(v14 << 27)));
    unsigned int v16 = (uint64_t *)(v11 + 40 * v15);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    if (*v16 == a2 && v18 == a3) {
      goto LABEL_31;
    }
    uint64_t v20 = 0;
    int v21 = 1;
    while (v17 != -4096 || v18 != -4096)
    {
      if (v20) {
        BOOL v22 = 0;
      }
      else {
        BOOL v22 = v18 == -8192;
      }
      if (v22 && v17 == -8192) {
        uint64_t v20 = v16;
      }
      unsigned int v24 = v15 + v21++;
      unsigned int v15 = v24 & (v8 - 1);
      unsigned int v16 = (uint64_t *)(v11 + 40 * v15);
      uint64_t v17 = *v16;
      uint64_t v18 = v16[1];
      if (*v16 == a2 && v18 == a3) {
        goto LABEL_31;
      }
    }
    if (v20) {
      unsigned int v16 = v20;
    }
  }
  else
  {
    unsigned int v16 = 0;
  }
  result += 520;
  int v26 = *(_DWORD *)(v7 + 528);
  if (4 * v26 + 4 >= 3 * v8)
  {
    uint64_t result = (uint64_t)sub_1CC7036BC((uint64_t *)result, 2 * v8);
    int v28 = *(_DWORD *)(v7 + 536);
    if (v28)
    {
      uint64_t v29 = *(void *)(v7 + 520);
      unint64_t v30 = (v10 ^ (a3 >> 9) | ((unint64_t)(v9 ^ (a2 >> 9)) << 32))
          + ~((unint64_t)(v10 ^ (a3 >> 9)) << 32);
      unint64_t v31 = (v30 ^ (v30 >> 22)) + ~((v30 ^ (v30 >> 22)) << 13);
      unint64_t v32 = (9 * (v31 ^ (v31 >> 8))) ^ ((9 * (v31 ^ (v31 >> 8))) >> 15);
      int v33 = v28 - 1;
      unsigned int v34 = v33 & (((v32 + ~(v32 << 27)) >> 31) ^ (v32 + ~(v32 << 27)));
      unsigned int v16 = (uint64_t *)(v29 + 40 * v34);
      uint64_t v35 = *v16;
      uint64_t v36 = v16[1];
      if (*v16 != a2 || v36 != a3)
      {
        uint64_t v38 = 0;
        int v39 = 1;
        while (v35 != -4096 || v36 != -4096)
        {
          if (v38) {
            BOOL v40 = 0;
          }
          else {
            BOOL v40 = v36 == -8192;
          }
          if (v40 && v35 == -8192) {
            uint64_t v38 = v16;
          }
          unsigned int v42 = v34 + v39++;
          unsigned int v34 = v42 & v33;
          unsigned int v16 = (uint64_t *)(v29 + 40 * v34);
          uint64_t v35 = *v16;
          uint64_t v36 = v16[1];
          if (*v16 == a2 && v36 == a3) {
            goto LABEL_28;
          }
        }
        if (v38) {
          unsigned int v16 = v38;
        }
      }
    }
    else
    {
      unsigned int v16 = 0;
    }
  }
  else if (v8 + ~v26 - *(_DWORD *)(v7 + 532) <= v8 >> 3)
  {
    sub_1CC7036BC((uint64_t *)result, v8);
    unint64_t v44 = 0;
    uint64_t result = sub_1CC702D5C(*(void *)(v7 + 520), *(_DWORD *)(v7 + 536), a2, a3, &v44);
    unsigned int v16 = v44;
  }
LABEL_28:
  ++*(_DWORD *)(v7 + 528);
  if (*v16 != -4096 || v16[1] != -4096) {
    --*(_DWORD *)(v7 + 532);
  }
  uint64_t *v16 = a2;
  v16[1] = a3;
  v16[2] = (uint64_t)(v16 + 4);
  v16[3] = 0x100000000;
LABEL_31:
  unsigned int v27 = *((_DWORD *)v16 + 6);
  if (v27 >= *((_DWORD *)v16 + 7)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(v16[2] + 8 * v27) = a4;
  ++*((_DWORD *)v16 + 6);
  return result;
}

uint64_t sub_1CC6F1D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v8 = *(_DWORD *)(a3 + 20);
  if ((v8 & 0x40000000) != 0) {
    unsigned int v9 = *(void **)(a3 - 8);
  }
  else {
    unsigned int v9 = (void *)(a3 - 32 * (v8 & 0x7FFFFFF));
  }
  unsigned int v10 = (int *)sub_1CC6EF0A4(a1, *v9);
  if (v11) {
    int v12 = *v10;
  }
  else {
    int v12 = 0;
  }
  int v13 = *(_DWORD *)(a3 + 20);
  if ((v13 & 0x40000000) != 0) {
    uint64_t v14 = *(void *)(a3 - 8);
  }
  else {
    uint64_t v14 = a3 - 32 * (v13 & 0x7FFFFFF);
  }
  unsigned int v15 = (int *)sub_1CC6EF0A4(a1, *(void *)(v14 + 32));
  if (v16) {
    int v17 = *v15;
  }
  else {
    int v17 = 0;
  }
  uint64_t v18 = (int *)sub_1CC6EF0A4(a1, a3);
  if (v19) {
    int v20 = *v18;
  }
  else {
    int v20 = 0;
  }
  unsigned int v21 = *(unsigned __int8 *)(a3 + 16);
  if (v21 < 0x1C)
  {
    uint64_t v26 = 0x100000000;
  }
  else
  {
    unsigned int v22 = 0;
    HIDWORD(v24) = v21 - 41;
    LODWORD(v24) = v21 - 41;
    unsigned int v23 = v24 >> 1;
    if (v23 <= 6 && ((1 << v23) & 0x47) != 0) {
      unsigned int v22 = (*(unsigned char *)(a3 + 17) & 6) << 10;
    }
    if (v21 <= 0x37 && ((1 << v21) & 0xC1800000000000) != 0) {
      unsigned int v22 = v22 & 0xFFFFDFFF | ((((*(unsigned char *)(a3 + 17) & 2) >> 1) & 1) << 13);
    }
    if (sub_1CB845E74(a3))
    {
      int v25 = *(unsigned __int8 *)(a3 + 17) >> 1;
      if (v25 == 127) {
        int v25 = -1;
      }
      v22 |= (8 * v25) & 0x3F0 | ((v25 & 1) << 10);
    }
    uint64_t v26 = v22 | 0x100000000;
  }
  v29[0] = v20;
  uint64_t v29[2] = 1;
  v28[0] = v12;
  void v28[4] = 0;
  _DWORD v28[6] = v17;
  v28[10] = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, a2, v29, 1, v28, 2, v26);
}

uint64_t sub_1CC6F1FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int v8 = *(_DWORD *)(a3 + 20);
  if ((v8 & 0x40000000) != 0) {
    unsigned int v9 = *(void **)(a3 - 8);
  }
  else {
    unsigned int v9 = (void *)(a3 - 32 * (v8 & 0x7FFFFFF));
  }
  unsigned int v10 = (int *)sub_1CC6EF0A4(a1, *v9);
  if (v11) {
    int v12 = *v10;
  }
  else {
    int v12 = 0;
  }
  int v13 = (int *)sub_1CC6EF0A4(a1, a3);
  if (v14) {
    int v15 = *v13;
  }
  else {
    int v15 = 0;
  }
  unsigned int v16 = *(unsigned __int8 *)(a3 + 16);
  if (v16 < 0x1C)
  {
    uint64_t v23 = 0x100000000;
  }
  else
  {
    HIDWORD(v18) = v16 - 41;
    LODWORD(v18) = v16 - 41;
    unsigned int v17 = v18 >> 1;
    BOOL v19 = v17 > 6;
    int v20 = (1 << v17) & 0x47;
    if (v19 || v20 == 0) {
      unsigned int v25 = 0;
    }
    else {
      unsigned int v25 = (*(unsigned char *)(a3 + 17) & 6) << 10;
    }
    if (v16 <= 0x37 && ((1 << v16) & 0xC1800000000000) != 0) {
      unsigned int v25 = v25 & 0xFFFFDFFF | ((((*(unsigned char *)(a3 + 17) & 2) >> 1) & 1) << 13);
    }
    if (sub_1CB845E74(a3))
    {
      int v22 = *(unsigned __int8 *)(a3 + 17) >> 1;
      if (v22 == 127) {
        int v22 = -1;
      }
      v25 |= (8 * v22) & 0x3F0 | ((v22 & 1) << 10);
    }
    uint64_t v23 = v25 | 0x100000000;
  }
  v27[0] = v15;
  void v27[2] = 1;
  v26[0] = v12;
  void v26[4] = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, a2, v27, 1, v26, 1, v23);
}

uint64_t sub_1CC6F2164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *(unsigned __int8 *)(a2 + 16);
  BOOL v8 = v6 < 0x1C || v6 - 83 < 0xFFFFFFFE;
  int v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0) {
    unsigned int v10 = *(void **)(a2 - 8);
  }
  else {
    unsigned int v10 = (void *)(a2 - 32 * (v9 & 0x7FFFFFF));
  }
  uint64_t v11 = (int *)sub_1CC6EF0A4(a1, *v10);
  if (v12) {
    int v13 = *v11;
  }
  else {
    int v13 = 0;
  }
  int v14 = *(_DWORD *)(a2 + 20);
  if ((v14 & 0x40000000) != 0) {
    uint64_t v15 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v15 = a2 - 32 * (v14 & 0x7FFFFFF);
  }
  unsigned int v16 = (int *)sub_1CC6EF0A4(a1, *(void *)(v15 + 32));
  if (v17) {
    int v18 = *v16;
  }
  else {
    int v18 = 0;
  }
  BOOL v19 = (int *)sub_1CC6EF0A4(a1, a2);
  if (v20)
  {
    int v22 = *v19;
    if (v8)
    {
LABEL_21:
      int v23 = *(unsigned __int16 *)(a2 + 24);
      goto LABEL_24;
    }
  }
  else
  {
    int v22 = 0;
    if (v8) {
      goto LABEL_21;
    }
  }
  int v23 = *(_WORD *)(a2 + 18) & 0x3F;
LABEL_24:
  if ((v23 - 32) <= 9)
  {
    int v35 = v22;
    int v36 = 1;
    v37[0] = v23;
    int v38 = 2;
    int v39 = v13;
    int v40 = 0;
    int v41 = v18;
    int v42 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a3 + 32))(a3, 134, &v35, 1, v37, 3, 0);
  }
  if (v23 == 15)
  {
    int v35 = v22;
    int v36 = 1;
    AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)a2, v20, v21);
    goto LABEL_30;
  }
  if (!v23)
  {
    int v35 = v22;
    int v36 = 1;
    AllOnesValue = llvm::Constant::getNullValue(*(llvm::Constant **)a2, v20, v21);
LABEL_30:
    uint64_t v26 = (int *)sub_1CC6EF0A4(a1, AllOnesValue);
    if (v27) {
      int v28 = *v26;
    }
    else {
      int v28 = 0;
    }
    v37[0] = v28;
    int v38 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a3 + 32))(a3, 19, &v35, 1, v37, 1, 0);
  }
  if (v8)
  {
    uint64_t v29 = 0x100000000;
  }
  else
  {
    unsigned int v30 = 0;
    unsigned int v31 = *(unsigned __int8 *)(a2 + 16);
    HIDWORD(v33) = v31 - 41;
    LODWORD(v33) = v31 - 41;
    unsigned int v32 = v33 >> 1;
    if (v32 <= 6 && ((1 << v32) & 0x47) != 0) {
      unsigned int v30 = (*(unsigned char *)(a2 + 17) & 6) << 10;
    }
    if (v31 <= 0x37 && ((1 << v31) & 0xC1800000000000) != 0) {
      unsigned int v30 = v30 & 0xFFFFDFFF | ((((*(unsigned char *)(a2 + 17) & 2) >> 1) & 1) << 13);
    }
    if (sub_1CB845E74(a2))
    {
      int v34 = *(unsigned __int8 *)(a2 + 17) >> 1;
      if (v34 == 127) {
        int v34 = -1;
      }
      v30 |= (8 * v34) & 0x3F0 | ((v34 & 1) << 10);
    }
    uint64_t v29 = v30 | 0x100000000;
  }
  int v35 = v22;
  int v36 = 1;
  v37[0] = v23;
  int v38 = 2;
  int v39 = v13;
  int v40 = 0;
  int v41 = v18;
  int v42 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 135, &v35, 1, v37, 3, v29);
}

uint64_t sub_1CC6F2494(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  if (v6)
  {
    int v9 = *(uint64_t **)(a2 - 32 * v6);
    if (v9)
    {
      unint64_t v11 = sub_1CB83544C(*(void *)(a1 + 880), *v9) + 7;
      if (v10 == 1) {
      if (v11 >= 8)
      }
        sub_1CC6EF0A4(a1, v9);
    }
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 248) + 24))(*(void *)(a1 + 248)))
  {
    uint64_t v12 = *(const llvm::Value **)(a1 + 816);
    if (v12) {
      llvm::SwiftErrorValueTracking::getOrCreateVRegUseAt((llvm::SwiftErrorValueTracking *)(a1 + 712), a2, *(const llvm::MachineBasicBlock **)(a3 + 40), v12);
    }
  }
  uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 248) + 40);

  return v7();
}

uint64_t sub_1CC6F25D0(uint64_t a1, uint64_t a2, const llvm::APInt *a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  if (a2)
  {
    unsigned int v15 = *(unsigned __int8 *)(a2 + 16);
    if (v15 >= 0x1C && v15 - 83 >= 0xFFFFFFFE)
    {
      uint64_t v17 = *(_WORD *)(a2 + 18) & 0x3FLL;
      if (a8) {
        LODWORD(v17) = dword_1CFB1CA74[v17];
      }
      uint64_t v18 = *(void *)(a2 - 64);
      BOOL v19 = *(void **)(a2 - 32);
      int v20 = *(unsigned __int8 **)(*(void *)(a1 + 848) + 32);
      uint64_t v49 = v20;
      if (v20)
      {
        llvm::MetadataTracking::track((uint64_t)&v49, v20, 2);
        int v20 = v49;
      }
      LODWORD(v50) = v17;
      BYTE4(v50) = 0;
      *((void *)&v50 + 1) = v18;
      uint64_t v51 = 0;
      uint64_t v52 = v19;
      unsigned int v53 = a3;
      uint64_t v54 = a4;
      uint64_t v55 = a5;
      uint64_t v56 = 0;
      int v57 = 0;
      uint64_t v58 = v20;
      if (v20)
      {
        llvm::MetadataTracking::track((uint64_t)&v58, v20, 2);
        unsigned int v21 = v49;
        int v59 = a6;
        int v60 = a7;
        if (!v49) {
          goto LABEL_34;
        }
        int v22 = *v49;
        if ((v22 - 4) > 0x1E)
        {
          if ((v22 - 3) >= 0xFFFFFFFE) {
            int v34 = v49;
          }
          else {
            int v34 = 0;
          }
          if ((v22 - 3) < 0xFFFFFFFE)
          {
LABEL_53:
            if (v22 == 3) {
              *((void *)v21 + 1) = 0;
            }
            goto LABEL_34;
          }
          unint64_t v24 = (unint64_t)(v34 + 8);
        }
        else
        {
          if ((v49[1] & 0x7F) != 2 && !*((_DWORD *)v49 + 3)) {
            goto LABEL_34;
          }
          uint64_t v23 = *((void *)v49 + 2);
          if ((v23 & 4) == 0) {
            goto LABEL_34;
          }
          unint64_t v24 = v23 & 0xFFFFFFFFFFFFFFF8;
          if (!v24) {
            goto LABEL_34;
          }
        }
        int v35 = &v49;
LABEL_52:
        int v61 = v35;
        sub_1CC5FA668(v24 + 16, &v61);
        goto LABEL_34;
      }
LABEL_33:
      int v59 = a6;
      int v60 = a7;
      goto LABEL_34;
    }
  }
  if (a8) {
    int v25 = 33;
  }
  else {
    int v25 = 32;
  }
  uint64_t v26 = ****(uint64_t *****)(a1 + 864);
  uint64_t v27 = *v26;
  int v28 = *(void **)(*v26 + 1560);
  if (!v28)
  {
    int v41 = *(llvm::ConstantInt **)(v27 + 1888);
    unsigned int v42 = *(_DWORD *)(v27 + 1896);
    DWORD2(v50) = v42 >> 8;
    if (v42 >> 8 > 0x40) {
      operator new[]();
    }
    if (v42 <= 0xFF) {
      LOBYTE(v43) = 0;
    }
    else {
      unint64_t v43 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v42) + 63);
    }
    *(void *)&long long v50 = v43 & 1;
    int v28 = llvm::ConstantInt::get(v41, (llvm::LLVMContext *)&v50, a3);
    if (DWORD2(v50) >= 0x41 && (void)v50) {
      MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
    }
    *(void *)(v27 + 1560) = v28;
  }
  uint64_t v29 = *(unsigned __int8 **)(*(void *)(a1 + 848) + 32);
  int v48 = v29;
  if (v29)
  {
    llvm::MetadataTracking::track((uint64_t)&v48, v29, 2);
    uint64_t v29 = v48;
  }
  LODWORD(v50) = v25;
  BYTE4(v50) = 0;
  *((void *)&v50 + 1) = a2;
  uint64_t v51 = 0;
  uint64_t v52 = v28;
  unsigned int v53 = a3;
  uint64_t v54 = a4;
  uint64_t v55 = a5;
  uint64_t v56 = 0;
  int v57 = 0;
  uint64_t v58 = v29;
  if (!v29) {
    goto LABEL_33;
  }
  llvm::MetadataTracking::track((uint64_t)&v58, v29, 2);
  unsigned int v21 = v48;
  int v59 = a6;
  int v60 = a7;
  if (!v48) {
    goto LABEL_34;
  }
  int v22 = *v48;
  if ((v22 - 4) > 0x1E)
  {
    if ((v22 - 3) >= 0xFFFFFFFE) {
      int v36 = v48;
    }
    else {
      int v36 = 0;
    }
    if ((v22 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v24 = (unint64_t)(v36 + 8);
LABEL_51:
      int v35 = &v48;
      goto LABEL_52;
    }
    goto LABEL_53;
  }
  if ((v48[1] & 0x7F) == 2 || *((_DWORD *)v48 + 3))
  {
    uint64_t v30 = *((void *)v48 + 2);
    if ((v30 & 4) != 0)
    {
      unint64_t v24 = v30 & 0xFFFFFFFFFFFFFFF8;
      if (v24) {
        goto LABEL_51;
      }
    }
  }
LABEL_34:
  uint64_t v31 = *(void *)(a1 + 1792);
  unint64_t v32 = *(void *)(v31 + 16);
  if (v32 < *(void *)(v31 + 24)) {
    uint64_t result = sub_1CD616B8C(v32, &v50) + 88;
  }
  else {
    uint64_t result = sub_1CC7039C8((long long **)(v31 + 8), &v50);
  }
  *(void *)(v31 + 16) = result;
  if (!v58) {
    goto LABEL_37;
  }
  int v37 = *v58;
  if ((v37 - 4) <= 0x1E)
  {
    if ((v58[1] & 0x7F) != 2 && !*((_DWORD *)v58 + 3)) {
      goto LABEL_37;
    }
    uint64_t v38 = *((void *)v58 + 2);
    if ((v38 & 4) == 0) {
      goto LABEL_37;
    }
    unint64_t v39 = v38 & 0xFFFFFFFFFFFFFFF8;
    if (!v39) {
      goto LABEL_37;
    }
LABEL_66:
    int v61 = &v58;
    uint64_t result = sub_1CC5FA668(v39 + 16, &v61);
    goto LABEL_37;
  }
  if ((v37 - 3) >= 0xFFFFFFFE) {
    int v40 = v58;
  }
  else {
    int v40 = 0;
  }
  if ((v37 - 3) >= 0xFFFFFFFE)
  {
    unint64_t v39 = (unint64_t)(v40 + 8);
    goto LABEL_66;
  }
  if (v37 == 3) {
    *((void *)v58 + 1) = 0;
  }
LABEL_37:
  if (!v56) {
    return result;
  }
  int v44 = *v56;
  if ((v44 - 4) > 0x1E)
  {
    if ((v44 - 3) >= 0xFFFFFFFE) {
      uint64_t v47 = v56;
    }
    else {
      uint64_t v47 = 0;
    }
    if ((v44 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v46 = (unint64_t)(v47 + 8);
LABEL_89:
      int v61 = &v56;
      return sub_1CC5FA668(v46 + 16, &v61);
    }
    if (v44 == 3) {
      *((void *)v56 + 1) = 0;
    }
  }
  else if ((v56[1] & 0x7F) == 2 || *((_DWORD *)v56 + 3))
  {
    uint64_t v45 = *((void *)v56 + 2);
    if ((v45 & 4) != 0)
    {
      unint64_t v46 = v45 & 0xFFFFFFFFFFFFFFF8;
      if (v46) {
        goto LABEL_89;
      }
    }
  }
  return result;
}

void sub_1CC6F2A44(uint64_t a1, uint64_t ***a2, void *a3)
{
  uint64_t v6 = (void *)a3[5];
  BOOL v8 = a2 - 4;
  uint64_t v7 = (unsigned __int8 ***)*(a2 - 4);
  int v9 = (unsigned __int8 ****)(a1 + 496);
  uint64_t v147 = v7;
  int v10 = *(_DWORD *)(a1 + 512);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 496);
    int v12 = v10 - 1;
    unsigned int v13 = v12 & ((v7 >> 4) ^ (v7 >> 9));
    int v14 = (unsigned __int8 ****)(v11 + 16 * v13);
    unsigned int v15 = *v14;
    if (v7 == *v14) {
      goto LABEL_11;
    }
    unsigned int v16 = 0;
    int v17 = 1;
    while (v15 != (unsigned __int8 ***)-4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == (unsigned __int8 ***)-8192;
      }
      if (v18) {
        unsigned int v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      int v14 = (unsigned __int8 ****)(v11 + 16 * v13);
      unsigned int v15 = *v14;
      if (v7 == *v14) {
        goto LABEL_11;
      }
    }
    if (v16) {
      uint64_t v77 = v16;
    }
    else {
      uint64_t v77 = v14;
    }
  }
  else
  {
    uint64_t v77 = 0;
  }
  int v14 = (unsigned __int8 ****)sub_1CB883BA0(v9, (uint64_t)&v147, &v147, v77);
  *int v14 = v147;
  v14[1] = 0;
LABEL_11:
  int v20 = (unsigned __int8 *)v14[1];
  if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 1)
  {
    if (!*(_DWORD *)(a1 + 896) || (unsigned __int8 *)v6[1] != v20) {
      sub_1CC73677C(a3, v20);
    }
    if (*((unsigned char *)a2 + 16) != 30)
    {
      uint64_t v21 = 2;
      switch(*((unsigned char *)a2 + 16))
      {
        case 0x1E:
LABEL_249:
          __break(1u);
          goto LABEL_250;
        case 0x1F:
          LODWORD(v21) = (*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_105;
        case 0x20:
        case 0x26:
          LODWORD(v21) = (*((_DWORD *)a2 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_105;
        case 0x21:
          goto LABEL_19;
        case 0x24:
          LODWORD(v21) = *((_WORD *)a2 + 9) & 1;
          goto LABEL_105;
        case 0x25:
          LODWORD(v21) = 1;
          goto LABEL_19;
        case 0x27:
          LODWORD(v21) = *((_DWORD *)a2 + 20) + 1;
LABEL_105:
          if (!v21) {
            return;
          }
          goto LABEL_19;
        default:
          return;
      }
    }
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 3) {
      LODWORD(v21) = 2;
    }
    else {
      LODWORD(v21) = 1;
    }
LABEL_19:
    uint64_t v22 = 0;
    uint64_t v23 = v21;
    while (1)
    {
      int v24 = *((unsigned __int8 *)a2 + 16);
      if (v24 == 30)
      {
        uint64_t v21 = (uint64_t)&v8[-4 * v22];
      }
      else
      {
        uint64_t v37 = (v24 - 31);
        uint64_t v21 = (uint64_t)v8;
        switch(v37)
        {
          case 1:
          case 7:
            int v41 = *((_DWORD *)a2 + 5);
            if ((v41 & 0x40000000) != 0) {
              unsigned int v42 = (uint64_t ***)*(a2 - 1);
            }
            else {
              unsigned int v42 = &a2[-4 * (v41 & 0x7FFFFFF)];
            }
            int v40 = &v42[4 * v22];
            goto LABEL_43;
          case 2:
            uint64_t v43 = 0x1FFFFFFFFFFFFFF8;
            if (!v22) {
              uint64_t v43 = 0x1FFFFFFFFFFFFFF4;
            }
            uint64_t v21 = (uint64_t)&a2[v43];
            break;
          case 3:
          case 4:
            goto LABEL_249;
          case 5:
            if ((*((_WORD *)a2 + 9) & 1) == 0)
            {
              int v25 = 0;
              goto LABEL_23;
            }
            uint64_t v21 = (uint64_t)&a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 4];
            break;
          case 6:
            break;
          case 8:
            if (v22) {
              uint64_t v21 = (uint64_t)&(&v8[4 * v22])[-4 * *((unsigned int *)a2 + 20) - 4];
            }
            else {
              uint64_t v21 = (uint64_t)&a2[-4 * *((unsigned int *)a2 + 20) - 8];
            }
            break;
          default:
            int v38 = *((_DWORD *)a2 + 5);
            if ((v38 & 0x40000000) != 0) {
              unint64_t v39 = (uint64_t ***)*(a2 - 1);
            }
            else {
              unint64_t v39 = &a2[-4 * (v38 & 0x7FFFFFF)];
            }
            int v40 = &v39[4 * (2 * v22)];
LABEL_43:
            uint64_t v21 = (uint64_t)(v40 + 4);
            break;
        }
      }
      int v25 = *(unsigned __int8 ****)v21;
LABEL_23:
      uint64_t v147 = v25;
      int v26 = *(_DWORD *)(a1 + 512);
      if (!v26) {
        break;
      }
      uint64_t v27 = *(void *)(a1 + 496);
      int v28 = v26 - 1;
      unsigned int v29 = v28 & ((v25 >> 4) ^ (v25 >> 9));
      uint64_t v30 = (void *)(v27 + 16 * v29);
      uint64_t v31 = (void *)*v30;
      if (v25 != (unsigned __int8 ***)*v30)
      {
        unint64_t v32 = 0;
        int v33 = 1;
        while (v31 != (void *)-4096)
        {
          if (v32) {
            BOOL v34 = 0;
          }
          else {
            BOOL v34 = v31 == (void *)-8192;
          }
          if (v34) {
            unint64_t v32 = v30;
          }
          unsigned int v35 = v29 + v33++;
          unsigned int v29 = v35 & v28;
          uint64_t v30 = (void *)(v27 + 16 * v29);
          uint64_t v31 = (void *)*v30;
          if (v25 == (unsigned __int8 ***)*v30) {
            goto LABEL_33;
          }
        }
        if (v32) {
          int v36 = v32;
        }
        else {
          int v36 = v30;
        }
        goto LABEL_38;
      }
LABEL_33:
      llvm::MachineBasicBlock::addSuccessor(v6, (void *)v30[1], -1);
      if (++v22 == v23) {
        return;
      }
    }
    int v36 = 0;
LABEL_38:
    uint64_t v30 = sub_1CB883BA0(v9, (uint64_t)&v147, &v147, v36);
    *uint64_t v30 = v147;
    v30[1] = 0;
    goto LABEL_33;
  }
  uint64_t v44 = (uint64_t)*(a2 - 12);
  uint64_t v45 = (unsigned __int8 ***)*(a2 - 8);
  uint64_t v147 = v45;
  int v46 = *(_DWORD *)(a1 + 512);
  if (v46)
  {
    uint64_t v47 = *(void *)(a1 + 496);
    int v48 = v46 - 1;
    unsigned int v49 = v48 & ((v45 >> 4) ^ (v45 >> 9));
    long long v50 = (unsigned __int8 ****)(v47 + 16 * v49);
    uint64_t v51 = *v50;
    if (v45 == *v50) {
      goto LABEL_69;
    }
    uint64_t v52 = 0;
    int v53 = 1;
    while (v51 != (unsigned __int8 ***)-4096)
    {
      if (v52) {
        BOOL v54 = 0;
      }
      else {
        BOOL v54 = v51 == (unsigned __int8 ***)-8192;
      }
      if (v54) {
        uint64_t v52 = v50;
      }
      unsigned int v55 = v49 + v53++;
      unsigned int v49 = v55 & v48;
      long long v50 = (unsigned __int8 ****)(v47 + 16 * v49);
      uint64_t v51 = *v50;
      if (v45 == *v50) {
        goto LABEL_69;
      }
    }
    if (v52) {
      unint64_t v78 = v52;
    }
    else {
      unint64_t v78 = v50;
    }
  }
  else
  {
    unint64_t v78 = 0;
  }
  long long v50 = (unsigned __int8 ****)sub_1CB883BA0(v9, (uint64_t)&v147, &v147, v78);
  const char *v50 = v147;
  v50[1] = 0;
LABEL_69:
  uint64_t v56 = (uint64_t)v50[1];
  uint64_t v57 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 864) + 16) + 120))(*(void *)(*(void *)(a1 + 864) + 16));
  if (*(unsigned __int8 *)(v44 + 16) <= 0x1Bu) {
    int v59 = 0;
  }
  else {
    int v59 = (uint64_t *)v44;
  }
  if (*(unsigned char *)(v57 + 48)) {
    BOOL v60 = 1;
  }
  else {
    BOOL v60 = v59 == 0;
  }
  if (v60) {
    goto LABEL_119;
  }
  uint64_t v61 = v59[1];
  if (!v61 || *(void *)(v61 + 8)) {
    goto LABEL_119;
  }
  if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
    goto LABEL_93;
  }
  uint64_t v62 = ***a2;
  uint64_t v147 = (unsigned __int8 ***)a2;
  int v63 = *(_DWORD *)(v62 + 2496);
  if (!v63)
  {
    unint64_t v140 = 0;
LABEL_242:
    uint64_t v67 = sub_1CC609054(v62 + 2480, (uint64_t)&v147, (uint64_t *)&v147, v140);
    uint64_t v141 = v147;
    v67[3] = 0;
    v67[4] = 0;
    void *v67 = v141;
    v67[1] = v67 + 3;
    v67[2] = 0x100000000;
    goto LABEL_89;
  }
  uint64_t v64 = *(void *)(v62 + 2480);
  int v65 = v63 - 1;
  unsigned int v66 = v65 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v67 = (void *)(v64 + 40 * v66);
  uint64_t v68 = (void *)*v67;
  if ((uint64_t ***)*v67 != a2)
  {
    uint64_t v69 = 0;
    int v70 = 1;
    while (v68 != (void *)-4096)
    {
      if (v69) {
        BOOL v71 = 0;
      }
      else {
        BOOL v71 = v68 == (void *)-8192;
      }
      if (v71) {
        uint64_t v69 = v67;
      }
      unsigned int v72 = v66 + v70++;
      unsigned int v66 = v72 & v65;
      uint64_t v67 = (void *)(v64 + 40 * v66);
      uint64_t v68 = (void *)*v67;
      if ((uint64_t ***)*v67 == a2) {
        goto LABEL_89;
      }
    }
    if (v69) {
      unint64_t v140 = v69;
    }
    else {
      unint64_t v140 = v67;
    }
    goto LABEL_242;
  }
LABEL_89:
  uint64_t v73 = *((unsigned int *)v67 + 4);
  if (v73)
  {
    unsigned int v74 = (void *)(v67[1] + 8);
    uint64_t v75 = 16 * v73;
    while (*((_DWORD *)v74 - 2) != 15)
    {
      v74 += 2;
      v75 -= 16;
      if (!v75) {
        goto LABEL_93;
      }
    }
    if (*v74) {
      goto LABEL_119;
    }
  }
LABEL_93:
  uint64_t v158 = 0;
  uint64_t v159 = 0;
  uint64_t v147 = &v159;
  uint64_t v148 = &v158;
  if (sub_1CC185750(&v147, v59))
  {
    int v76 = 28;
  }
  else
  {
    uint64_t v147 = &v159;
    uint64_t v148 = &v158;
    if (!sub_1CC185634(&v147, v59)) {
      goto LABEL_119;
    }
    int v76 = 29;
  }
  if (*((unsigned char *)v159 + 16) != 89
    || ((int v79 = *((_DWORD *)v159 + 5), (v79 & 0x40000000) != 0)
      ? (uint64_t v80 = (unsigned __int8 **)*(v159 - 1))
      : (uint64_t v80 = &v159[-4 * (v79 & 0x7FFFFFF)]),
        (int v81 = *v80) == 0
     || *(unsigned char *)(v158 + 16) != 89
     || ((int v82 = *(_DWORD *)(v158 + 20), (v82 & 0x40000000) != 0)
       ? (unint64_t v83 = *(unsigned __int8 ***)(v158 - 8))
       : (unint64_t v83 = (unsigned __int8 **)(v158 - 32 * (v82 & 0x7FFFFFF))),
         v81 != *v83)))
  {
    unsigned int v95 = sub_1CC6F36FC(*(void *)(a1 + 944), v6[2], (uint64_t)v20);
    unsigned int v96 = sub_1CC6F36FC(*(void *)(a1 + 944), v6[2], v56);
    sub_1CD61449C(a1, (uint64_t)v59, (const llvm::APInt *)v20, v56, v6, v76, v95, v96, 0);
    BOOL v97 = sub_1CD614848((int **)(*(void *)(a1 + 1792) + 8));
    uint64_t v98 = *(void *)(a1 + 1792);
    if (v97)
    {
      sub_1CC6F3814(a1, *(int **)(v98 + 8), (uint64_t)v6, *(void *)(a1 + 848));
      uint64_t v99 = *(void *)(a1 + 1792);
      sub_1CC703C1C((uint64_t)&v147, *(void *)(v99 + 8) + 88, *(void *)(v99 + 16), *(void *)(v99 + 8));
      int v101 = v100;
      unsigned int v102 = *(unsigned __int8 ****)(v99 + 16);
      if (v102 == v100)
      {
LABEL_229:
        *(void *)(v99 + 16) = v101;
        return;
      }
      unint64_t v103 = v102 - 2;
      while (1)
      {
        unint64_t v104 = *v103;
        if (!*v103) {
          goto LABEL_152;
        }
        int v107 = *(unsigned __int8 *)v104;
        if ((v107 - 4) > 0x1E)
        {
          if ((v107 - 3) >= 0xFFFFFFFE) {
            int v110 = *v103;
          }
          else {
            int v110 = 0;
          }
          if ((v107 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v109 = (unint64_t)(v110 + 1);
LABEL_166:
            uint64_t v147 = v103;
            sub_1CC5FA668(v109 + 16, &v147);
            goto LABEL_152;
          }
          if (v107 == 3) {
            v104[1] = 0;
          }
        }
        else if ((*((unsigned char *)v104 + 1) & 0x7F) == 2 || *((_DWORD *)v104 + 3))
        {
          unsigned int v108 = v104[2];
          if ((v108 & 4) != 0)
          {
            unint64_t v109 = (unint64_t)v108 & 0xFFFFFFFFFFFFFFF8;
            if (v109) {
              goto LABEL_166;
            }
          }
        }
LABEL_152:
        uint64_t v105 = (unsigned __int8 *)*(v103 - 2);
        if (v105)
        {
          int v111 = *v105;
          if ((v111 - 4) > 0x1E)
          {
            if ((v111 - 3) >= 0xFFFFFFFE) {
              uint64_t v114 = (uint64_t)*(v103 - 2);
            }
            else {
              uint64_t v114 = 0;
            }
            if ((v111 - 3) < 0xFFFFFFFE)
            {
              if (v111 == 3) {
                *((void *)v105 + 1) = 0;
              }
              goto LABEL_153;
            }
            unint64_t v113 = v114 + 8;
          }
          else
          {
            if ((v105[1] & 0x7F) != 2 && !*((_DWORD *)v105 + 3)) {
              goto LABEL_153;
            }
            uint64_t v112 = *((void *)v105 + 2);
            if ((v112 & 4) == 0) {
              goto LABEL_153;
            }
            unint64_t v113 = v112 & 0xFFFFFFFFFFFFFFF8;
            if (!v113) {
              goto LABEL_153;
            }
          }
          uint64_t v147 = v103 - 2;
          sub_1CC5FA668(v113 + 16, &v147);
        }
LABEL_153:
        int v106 = v103 - 9;
        v103 -= 11;
        if (v106 == v101) {
          goto LABEL_229;
        }
      }
    }
    int v119 = *(char **)(v98 + 8);
    uint64_t v118 = *(char **)(v98 + 16);
    int v120 = -1171354717 * ((unint64_t)(v118 - v119) >> 3);
    int v121 = v120 - 1;
    if (v120 != 1)
    {
      uint64_t v122 = 136;
      do
      {
        uint64_t v123 = *(uint64_t **)(*(void *)(*(void *)(a1 + 1792) + 8) + v122);
        uint64_t v124 = *(void *)(a1 + 864) + 320;
        *(void *)(*(void *)(v123[4] + 104) + 8 * *((unsigned int *)v123 + 6)) = 0;
        *((_DWORD *)v123 + 6) = -1;
        uint64_t v125 = *v123;
        uint64_t v126 = (void *)v123[1];
        void *v126 = *v123;
        *(void *)(v125 + 8) = v126;
        *uint64_t v123 = 0;
        v123[1] = 0;
        llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(v124, (llvm::MachineBasicBlock *)v123);
        v122 += 88;
        --v121;
      }
      while (v121);
      uint64_t v98 = *(void *)(a1 + 1792);
      int v119 = *(char **)(v98 + 8);
      uint64_t v118 = *(char **)(v98 + 16);
    }
    if (v118 == v119)
    {
LABEL_230:
      *(void *)(v98 + 16) = v119;
      goto LABEL_119;
    }
    uint64_t v127 = (unsigned __int8 ***)(v118 - 16);
    while (1)
    {
      uint64_t v128 = *v127;
      if (!*v127) {
        goto LABEL_198;
      }
      int v131 = *(unsigned __int8 *)v128;
      if ((v131 - 4) > 0x1E)
      {
        if ((v131 - 3) >= 0xFFFFFFFE) {
          unint64_t v134 = *v127;
        }
        else {
          unint64_t v134 = 0;
        }
        if ((v131 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v133 = (unint64_t)(v134 + 1);
LABEL_212:
          uint64_t v147 = v127;
          sub_1CC5FA668(v133 + 16, &v147);
          goto LABEL_198;
        }
        if (v131 == 3) {
          v128[1] = 0;
        }
      }
      else if ((*((unsigned char *)v128 + 1) & 0x7F) == 2 || *((_DWORD *)v128 + 3))
      {
        int v132 = v128[2];
        if ((v132 & 4) != 0)
        {
          unint64_t v133 = (unint64_t)v132 & 0xFFFFFFFFFFFFFFF8;
          if (v133) {
            goto LABEL_212;
          }
        }
      }
LABEL_198:
      char v129 = (unsigned __int8 *)*(v127 - 2);
      if (v129)
      {
        int v135 = *v129;
        if ((v135 - 4) > 0x1E)
        {
          if ((v135 - 3) >= 0xFFFFFFFE) {
            uint64_t v138 = (uint64_t)*(v127 - 2);
          }
          else {
            uint64_t v138 = 0;
          }
          if ((v135 - 3) < 0xFFFFFFFE)
          {
            if (v135 == 3) {
              *((void *)v129 + 1) = 0;
            }
            goto LABEL_199;
          }
          unint64_t v137 = v138 + 8;
        }
        else
        {
          if ((v129[1] & 0x7F) != 2 && !*((_DWORD *)v129 + 3)) {
            goto LABEL_199;
          }
          uint64_t v136 = *((void *)v129 + 2);
          if ((v136 & 4) == 0) {
            goto LABEL_199;
          }
          unint64_t v137 = v136 & 0xFFFFFFFFFFFFFFF8;
          if (!v137) {
            goto LABEL_199;
          }
        }
        uint64_t v147 = v127 - 2;
        sub_1CC5FA668(v137 + 16, &v147);
      }
LABEL_199:
      unsigned __int8 v130 = (char *)(v127 - 9);
      v127 -= 11;
      if (v130 == v119) {
        goto LABEL_230;
      }
    }
  }
LABEL_119:
  uint64_t v84 = ****(uint64_t *****)(a1 + 864);
  uint64_t v85 = *v84;
  uint64_t v86 = *(void **)(*v84 + 1560);
  if (!v86)
  {
    unint64_t v115 = *(llvm::ConstantInt **)(v85 + 1888);
    unsigned int v116 = *(_DWORD *)(v85 + 1896);
    LODWORD(v148) = v116 >> 8;
    if (v116 >> 8 > 0x40) {
      operator new[]();
    }
    if (v116 <= 0xFF) {
      char v117 = 0;
    }
    else {
      char v117 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v116) + 63);
    }
    uint64_t v147 = (unsigned __int8 ***)(v117 & 1);
    uint64_t v86 = llvm::ConstantInt::get(v115, (llvm::LLVMContext *)&v147, v58);
    if (v148 >= 0x41 && v147) {
      MEMORY[0x1D25D9CB0](v147, 0x1000C8000313F17);
    }
    *(void *)(v85 + 1560) = v86;
  }
  int v87 = *(unsigned __int8 **)(*(void *)(a1 + 848) + 32);
  long long v146 = v87;
  if (v87)
  {
    llvm::MetadataTracking::track((uint64_t)&v146, v87, 2);
    int v87 = v146;
  }
  LODWORD(v147) = 32;
  BYTE4(v147) = 0;
  uint64_t v148 = (uint64_t *)v44;
  uint64_t v149 = 0;
  uint64_t v150 = v86;
  int v151 = v20;
  uint64_t v152 = v56;
  uint64_t v153 = v6;
  int v9 = &v147;
  uint64_t v154 = 0;
  int v155 = 0;
  uint64_t v156 = v87;
  if (!v87)
  {
    uint64_t v157 = -1;
    goto LABEL_131;
  }
  llvm::MetadataTracking::track((uint64_t)&v156, v87, 2);
  uint64_t v157 = -1;
  if (!v146) {
    goto LABEL_131;
  }
  int v88 = *v146;
  if ((v88 - 4) > 0x1E)
  {
    if ((v88 - 3) >= 0xFFFFFFFE) {
      unint64_t v91 = v146;
    }
    else {
      unint64_t v91 = 0;
    }
    if ((v88 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v90 = (unint64_t)(v91 + 8);
LABEL_139:
      uint64_t v159 = &v146;
      sub_1CC5FA668(v90 + 16, &v159);
      goto LABEL_131;
    }
    if (v88 == 3) {
      *((void *)v146 + 1) = 0;
    }
  }
  else if ((v146[1] & 0x7F) == 2 || *((_DWORD *)v146 + 3))
  {
    uint64_t v89 = *((void *)v146 + 2);
    if ((v89 & 4) != 0)
    {
      unint64_t v90 = v89 & 0xFFFFFFFFFFFFFFF8;
      if (v90) {
        goto LABEL_139;
      }
    }
  }
LABEL_131:
  sub_1CC6F3814(a1, (int *)&v147, (uint64_t)v6, *(void *)(a1 + 848));
  if (!v156) {
    goto LABEL_132;
  }
  int v92 = *v156;
  if ((v92 - 4) > 0x1E)
  {
    if ((v92 - 3) >= 0xFFFFFFFE) {
      unint64_t v139 = v156;
    }
    else {
      unint64_t v139 = 0;
    }
    if ((v92 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v94 = (unint64_t)(v139 + 8);
LABEL_236:
      uint64_t v159 = &v156;
      sub_1CC5FA668(v94 + 16, &v159);
      goto LABEL_132;
    }
    if (v92 == 3) {
      *((void *)v156 + 1) = 0;
    }
  }
  else if ((v156[1] & 0x7F) == 2 || *((_DWORD *)v156 + 3))
  {
    uint64_t v93 = *((void *)v156 + 2);
    if ((v93 & 4) != 0)
    {
      unint64_t v94 = v93 & 0xFFFFFFFFFFFFFFF8;
      if (v94) {
        goto LABEL_236;
      }
    }
  }
LABEL_132:
  uint64_t v21 = v154;
  if (!v154) {
    return;
  }
LABEL_250:
  int v142 = *(unsigned __int8 *)v21;
  if ((v142 - 4) > 0x1E)
  {
    if ((v142 - 3) >= 0xFFFFFFFE) {
      uint64_t v145 = v21;
    }
    else {
      uint64_t v145 = 0;
    }
    if ((v142 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v144 = v145 + 8;
LABEL_261:
      uint64_t v159 = (unsigned __int8 **)(v9 + 7);
      sub_1CC5FA668(v144 + 16, &v159);
      return;
    }
    if (v142 == 3) {
      *(void *)(v21 + 8) = 0;
    }
  }
  else if ((*(unsigned char *)(v21 + 1) & 0x7F) == 2 || *(_DWORD *)(v21 + 12))
  {
    uint64_t v143 = *(void *)(v21 + 16);
    if ((v143 & 4) != 0)
    {
      unint64_t v144 = v143 & 0xFFFFFFFFFFFFFFF8;
      if (v144) {
        goto LABEL_261;
      }
    }
  }
}

uint64_t sub_1CC6F36FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    return llvm::BranchProbabilityInfo::getEdgeProbability(a1, a2, *(void *)(a3 + 16));
  }
  uint64_t v4 = *(void *)(a2 + 40);
  if (v4 == a2 + 40)
  {
LABEL_10:
    unsigned int v8 = 0;
  }
  else
  {
    uint64_t v5 = v4 - 24;
    if (!v4) {
      uint64_t v5 = 0;
    }
    int v6 = *(unsigned __int8 *)(v5 + 16);
    int v7 = v6 - 29;
    if (v6 == 30)
    {
      if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3) {
        unsigned int v8 = 2;
      }
      else {
        unsigned int v8 = 1;
      }
    }
    else
    {
      unsigned int v8 = 0;
      switch(v7)
      {
        case 0:
        case 5:
        case 6:
          break;
        case 1:
          __break(1u);
          goto LABEL_19;
        case 2:
          unsigned int v8 = (*(_DWORD *)(v5 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 3:
        case 9:
LABEL_19:
          unsigned int v8 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) - 1;
          break;
        case 4:
          unsigned int v8 = 2;
          break;
        case 7:
          unsigned int v8 = *(_WORD *)(v5 + 18) & 1;
          break;
        case 8:
          unsigned int v8 = 1;
          break;
        case 10:
          unsigned int v8 = *(_DWORD *)(v5 + 80) + 1;
          break;
        default:
          goto LABEL_10;
      }
    }
  }
  if (v8 <= 1) {
    unsigned int v8 = 1;
  }
  if (v8 == 0x80000000) {
    return 1;
  }
  else {
    return ((v8 >> 1) | 0x80000000) / v8;
  }
}

uint64_t sub_1CC6F3814(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = (int *)sub_1CC6EF0A4(a1, *((void *)a2 + 1));
  if (v9) {
    int v10 = *v8;
  }
  else {
    int v10 = 0;
  }
  int v12 = (unsigned __int8 **)(a4 + 32);
  uint64_t v11 = *(unsigned __int8 **)(a4 + 32);
  int v79 = v11;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)&v79, v11, 2);
  }
  unsigned int v13 = (unsigned __int8 **)(a2 + 18);
  if (a2 + 18 != (int *)v12)
  {
    int v14 = *v12;
    if (!*v12) {
      goto LABEL_7;
    }
    int v38 = *v14;
    if ((v38 - 4) > 0x1E)
    {
      if ((v38 - 3) >= 0xFFFFFFFE) {
        uint64_t v44 = *v12;
      }
      else {
        uint64_t v44 = 0;
      }
      if ((v38 - 3) < 0xFFFFFFFE)
      {
        if (v38 == 3) {
          *((void *)v14 + 1) = 0;
        }
        goto LABEL_7;
      }
      unint64_t v40 = (unint64_t)(v44 + 8);
    }
    else if ((v14[1] & 0x7F) != 2 && !*((_DWORD *)v14 + 3) {
           || (uint64_t v39 = *((void *)v14 + 2), (v39 & 4) == 0)
    }
           || (unint64_t v40 = v39 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_7:
      unsigned int v15 = *v13;
      *int v12 = *v13;
      if (v15) {
        llvm::MetadataTracking::track(a4 + 32, v15, 2);
      }
      goto LABEL_9;
    }
    *(void *)&long long v82 = a4 + 32;
    sub_1CC5FA668(v40 + 16, &v82);
    goto LABEL_7;
  }
LABEL_9:
  uint64_t v16 = *((void *)a2 + 6);
  *(void *)(a4 + 40) = v16;
  *(void *)(a4 + 48) = v16 + 48;
  if (*((unsigned char *)a2 + 4))
  {
    sub_1CC6F3FE0(*(void *)(a1 + 944), *((llvm::MachineBasicBlock **)a2 + 6), *((llvm::MachineBasicBlock **)a2 + 4), a2[20]);
    sub_1CC6F1ABC(a1, *(void *)(a3 + 16), *(void *)(*((void *)a2 + 4) + 16), *((void *)a2 + 6));
    sub_1CC2BE0A8(*(unsigned int **)(*((void *)a2 + 6) + 112), *(unsigned int **)(*((void *)a2 + 6) + 120));
    uint64_t v67 = (unsigned __int8 *)*((void *)a2 + 4);
    uint64_t v68 = *((void *)a2 + 6);
    uint64_t v69 = *(void *)(v68 + 32);
    int v70 = *(unsigned __int8 **)(v68 + 8);
    if (v70 == (unsigned __int8 *)(v69 + 320)) {
      int v70 = 0;
    }
    if (v67 != v70) {
      sub_1CC73677C((void *)a4, v67);
    }
    uint64_t result = (uint64_t)sub_1CB896804((unsigned __int8 **)(a4 + 32), &v79);
    goto LABEL_39;
  }
  uint64_t v17 = *((void *)a2 + 2);
  if (v17)
  {
    uint64_t v52 = *((void *)a2 + 1);
    uint64_t v53 = *((void *)a2 + 3);
    BOOL v54 = (int *)sub_1CC6EF0A4(a1, v17);
    if (v55) {
      int v56 = *v54;
    }
    else {
      int v56 = 0;
    }
    if (sub_1CB8C0D18(*((void *)a2 + 1) + 24))
    {
      BOOL v71 = (int *)sub_1CC6EF0A4(a1, *((void *)a2 + 3));
      if (v72) {
        int v73 = *v71;
      }
      else {
        int v73 = 0;
      }
      uint64_t v77 = 9;
      int v78 = 0;
      LODWORD(v82) = v56;
      int v83 = 0;
      LODWORD(v80) = v73;
      int v81 = 0;
      uint64_t v65 = a4;
      int v66 = 41;
    }
    else
    {
      uint64_t v57 = (unint64_t **)(v52 + 24);
      if (v56 < 0 && (uint64_t v58 = *(void *)(a1 + 872), (v56 & 0x7FFFFFFFu) < *(_DWORD *)(v58 + 432))) {
        uint64_t v59 = *(void *)(*(void *)(v58 + 424) + 8 * (v56 & 0x7FFFFFFF));
      }
      else {
        uint64_t v59 = 0;
      }
      *(void *)&long long v80 = v59;
      DWORD2(v80) = 0;
      LODWORD(v82) = v56;
      int v83 = 0;
      int v84 = v10;
      int v85 = 0;
      uint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 46, &v80, 1, &v82, 2, 0);
      uint64_t v74 = v61;
      *(void *)&long long v82 = v59;
      DWORD2(v82) = 0;
      unsigned int v76 = *(_DWORD *)(v53 + 32);
      if (v76 > 0x40) {
        operator new[]();
      }
      uint64_t v75 = *(void *)(v53 + 24);
      llvm::APInt::operator-=((uint64_t)&v75, v57);
      DWORD2(v80) = v76;
      *(void *)&long long v80 = v75;
      unsigned int v76 = 0;
      uint64_t v62 = sub_1CC737454((llvm::ConstantInt *****)a4, (uint64_t)&v82, (llvm::LLVMContext *)&v80);
      uint64_t v64 = v63;
      if (DWORD2(v80) >= 0x41 && (void)v80) {
        MEMORY[0x1D25D9CB0](v80, 0x1000C8000313F17);
      }
      if (v76 >= 0x41 && v75) {
        MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
      }
      uint64_t v77 = 9;
      int v78 = 0;
      *(void *)&long long v82 = v60;
      *((void *)&v82 + 1) = v74;
      int v83 = 1;
      *(void *)&long long v80 = v62;
      *((void *)&v80 + 1) = v64;
      int v81 = 1;
      uint64_t v65 = a4;
      int v66 = 37;
    }
    sub_1CC73933C(v65, v66, (uint64_t)&v77, &v82, &v80);
    goto LABEL_80;
  }
  if (*(unsigned char *)(*((void *)a2 + 3) + 16) == 16) {
    uint64_t v18 = *((void *)a2 + 3);
  }
  else {
    uint64_t v18 = 0;
  }
  if (v10 < 0 && (uint64_t v19 = *(void *)(a1 + 872), (v10 & 0x7FFFFFFFu) < *(_DWORD *)(v19 + 432))) {
    uint64_t v20 = *(void *)(*(void *)(v19 + 424) + 8 * (v10 & 0x7FFFFFFF));
  }
  else {
    uint64_t v20 = 0;
  }
  *(void *)&long long v82 = v20;
  uint64_t v22 = sub_1CB8F1DC4((unint64_t *)&v82);
  if (v21 == 1) {
  if (v22 != 1 || !v18)
  }
    goto LABEL_76;
  uint64_t v23 = (void *)(v18 + 24);
  if (*(_DWORD *)(v18 + 32) >= 0x41u) {
    uint64_t v23 = (void *)*v23;
  }
  if (*v23 != 1 || *a2 != 32)
  {
LABEL_76:
    uint64_t v47 = (int *)sub_1CC6EF0A4(a1, *((void *)a2 + 3));
    if (v48) {
      int v49 = *v47;
    }
    else {
      int v49 = 0;
    }
    int v50 = *a2;
    if (*a2 <= 0xF)
    {
      *(void *)&long long v80 = 9;
      DWORD2(v80) = 0;
      LODWORD(v82) = v50;
      int v83 = 2;
      int v84 = v10;
      int v85 = 0;
      int v86 = v49;
      int v87 = 0;
      (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 135, &v80, 1, &v82, 3, 0);
    }
    else
    {
      *(void *)&long long v80 = 9;
      DWORD2(v80) = 0;
      LODWORD(v82) = v50;
      int v83 = 2;
      int v84 = v10;
      int v85 = 0;
      int v86 = v49;
      int v87 = 0;
      (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 134, &v80, 1, &v82, 3, 0);
    }
LABEL_80:
    int v10 = *(_DWORD *)(*(void *)(v51 + 32) + 4);
  }
  int v24 = (void *)*((void *)a2 + 6);
  int v25 = (void *)*((void *)a2 + 4);
  uint64_t v26 = *(void *)(a1 + 944);
  if (v26)
  {
    int EdgeProbability = a2[20];
    if (EdgeProbability == -1) {
      int EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability(v26, v24[2], v25[2]);
    }
    llvm::MachineBasicBlock::addSuccessor(v24, v25, EdgeProbability);
  }
  else
  {
    llvm::MachineBasicBlock::addSuccessorWithoutProb(*((void **)a2 + 6), *((llvm::MachineBasicBlock **)a2 + 4));
  }
  sub_1CC6F1ABC(a1, *(void *)(a3 + 16), *(void *)(*((void *)a2 + 4) + 16), *((void *)a2 + 6));
  int v28 = (void *)*((void *)a2 + 5);
  if (*((void **)a2 + 4) != v28)
  {
    unsigned int v29 = (void *)*((void *)a2 + 6);
    uint64_t v30 = *(void *)(a1 + 944);
    if (v30)
    {
      int v31 = a2[21];
      if (v31 == -1) {
        int v31 = llvm::BranchProbabilityInfo::getEdgeProbability(v30, v29[2], v28[2]);
      }
      llvm::MachineBasicBlock::addSuccessor(v29, v28, v31);
    }
    else
    {
      llvm::MachineBasicBlock::addSuccessorWithoutProb(*((void **)a2 + 6), *((llvm::MachineBasicBlock **)a2 + 5));
    }
  }
  sub_1CC2BE0A8(*(unsigned int **)(*((void *)a2 + 6) + 112), *(unsigned int **)(*((void *)a2 + 6) + 120));
  sub_1CC6F1ABC(a1, *(void *)(a3 + 16), *(void *)(*((void *)a2 + 5) + 16), *((void *)a2 + 6));
  LODWORD(v82) = v10;
  int v83 = 0;
  sub_1CC7376D4((void *)a4, (int *)&v82, *((void *)a2 + 4));
  uint64_t result = (uint64_t)sub_1CC73677C((void *)a4, *((unsigned __int8 **)a2 + 5));
  if (&v79 == v12) {
    goto LABEL_39;
  }
  int v33 = *v12;
  if (!*v12) {
    goto LABEL_36;
  }
  int v41 = *v33;
  if ((v41 - 4) > 0x1E)
  {
    if ((v41 - 3) >= 0xFFFFFFFE) {
      uint64_t v45 = *v12;
    }
    else {
      uint64_t v45 = 0;
    }
    if ((v41 - 3) < 0xFFFFFFFE)
    {
      if (v41 == 3) {
        *((void *)v33 + 1) = 0;
      }
      goto LABEL_36;
    }
    unint64_t v43 = (unint64_t)(v45 + 8);
  }
  else
  {
    if ((v33[1] & 0x7F) != 2 && !*((_DWORD *)v33 + 3)) {
      goto LABEL_36;
    }
    uint64_t v42 = *((void *)v33 + 2);
    if ((v42 & 4) == 0) {
      goto LABEL_36;
    }
    unint64_t v43 = v42 & 0xFFFFFFFFFFFFFFF8;
    if (!v43) {
      goto LABEL_36;
    }
  }
  *(void *)&long long v82 = a4 + 32;
  uint64_t result = sub_1CC5FA668(v43 + 16, &v82);
LABEL_36:
  BOOL v34 = v79;
  *int v12 = v79;
  if (!v34) {
    return result;
  }
  uint64_t result = llvm::MetadataTracking::track(a4 + 32, v34, 2);
LABEL_39:
  if (v79)
  {
    int v35 = *v79;
    if ((v35 - 4) > 0x1E)
    {
      if ((v35 - 3) >= 0xFFFFFFFE) {
        int v46 = v79;
      }
      else {
        int v46 = 0;
      }
      if ((v35 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v37 = (unint64_t)(v46 + 8);
LABEL_75:
        *(void *)&long long v82 = &v79;
        return sub_1CC5FA668(v37 + 16, &v82);
      }
      if (v35 == 3) {
        *((void *)v79 + 1) = 0;
      }
    }
    else if ((v79[1] & 0x7F) == 2 || *((_DWORD *)v79 + 3))
    {
      uint64_t v36 = *((void *)v79 + 2);
      if ((v36 & 4) != 0)
      {
        unint64_t v37 = v36 & 0xFFFFFFFFFFFFFFF8;
        if (v37) {
          goto LABEL_75;
        }
      }
    }
  }
  return result;
}

void sub_1CC6F3FE0(uint64_t a1, llvm::MachineBasicBlock *this, llvm::MachineBasicBlock *a3, int a4)
{
  if (a1)
  {
    if (a4 == -1) {
      a4 = sub_1CC6F36FC(a1, *((void *)this + 2), (uint64_t)a3);
    }
    llvm::MachineBasicBlock::addSuccessor(this, a3, a4);
  }
  else
  {
    llvm::MachineBasicBlock::addSuccessorWithoutProb(this, a3);
  }
}

void sub_1CC6F4060(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 944);
  std::string __p = 0;
  uint64_t v122 = 0;
  unint64_t v123 = 0;
  sub_1CC6F4908((uint64_t)&__p, ((*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFFu) - 1);
  unsigned int v6 = *(_DWORD *)(v3 + 20);
  int v7 = (v6 >> 1) & 0x3FFFFFF;
  uint64_t v8 = (v7 - 1);
  uint64_t v120 = v4;
  if (v7 == 1) {
    goto LABEL_32;
  }
  uint64_t v9 = 0;
  int v10 = (_DWORD *)(v4 + 496);
  do
  {
    unsigned int v11 = *(_DWORD *)(v3 + 20);
    if ((v11 & 0x40000000) != 0) {
      uint64_t v12 = *(void *)(v3 - 8);
    }
    else {
      uint64_t v12 = v3 - 32 * (v11 & 0x7FFFFFF);
    }
    uint64_t v13 = (2 * v9 + 3);
    if (v9 == 4294967294) {
      uint64_t v13 = 1;
    }
    int v14 = *(void **)(v12 + 32 * v13);
    v138[0] = v14;
    int v15 = *(_DWORD *)(v4 + 512);
    if (v15)
    {
      uint64_t v16 = *(void *)(v4 + 496);
      int v17 = v15 - 1;
      unsigned int v18 = v17 & ((v14 >> 4) ^ (v14 >> 9));
      uint64_t v19 = (void *)(v16 + 16 * v18);
      uint64_t v20 = (void *)*v19;
      if (v14 == (void *)*v19) {
        goto LABEL_17;
      }
      uint64_t v21 = 0;
      int v22 = 1;
      while (v20 != (void *)-4096)
      {
        if (v21) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = v20 == (void *)-8192;
        }
        if (v23) {
          uint64_t v21 = v19;
        }
        unsigned int v24 = v18 + v22++;
        unsigned int v18 = v24 & v17;
        uint64_t v19 = (void *)(v16 + 16 * v18);
        uint64_t v20 = (void *)*v19;
        if (v14 == (void *)*v19) {
          goto LABEL_17;
        }
      }
      if (v21) {
        BOOL v34 = v21;
      }
      else {
        BOOL v34 = v19;
      }
    }
    else
    {
      BOOL v34 = 0;
    }
    uint64_t v19 = sub_1CB883BA0(v10, (uint64_t)v138, v138, v34);
    void *v19 = v138[0];
    v19[1] = 0;
    unsigned int v11 = *(_DWORD *)(v3 + 20);
LABEL_17:
    uint64_t v25 = v19[1];
    if ((v11 & 0x40000000) != 0) {
      uint64_t v26 = *(void *)(v3 - 8);
    }
    else {
      uint64_t v26 = v3 - 32 * (v11 & 0x7FFFFFF);
    }
    uint64_t v27 = *(void **)(v26 + 32 * ((2 * v9 + 2) & 0xFFFFFFFE));
    if (v5)
    {
      if (v9 == 4294967294) {
        int v28 = 0;
      }
      else {
        int v28 = v9 + 1;
      }
      int EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability(v5, *(void *)(v3 + 40), v28);
    }
    else
    {
      int EdgeProbability = ((v11 >> 2) & 0x1FFFFFF | 0x80000000) / ((v11 >> 1) & 0x3FFFFFF);
    }
    LODWORD(v138[0]) = 0;
    v138[1] = v27;
    *(void *)&long long v139 = v27;
    *((void *)&v139 + 1) = v25;
    LODWORD(v140) = EdgeProbability;
    uint64_t v30 = v122;
    if ((unint64_t)v122 >= v123)
    {
      int v33 = sub_1CC703E20(&__p, (uint64_t)v138);
    }
    else
    {
      long long v31 = *(_OWORD *)v138;
      long long v32 = v139;
      v122[4] = v140;
      *uint64_t v30 = v31;
      v30[1] = v32;
      int v33 = (char *)v30 + 40;
    }
    uint64_t v4 = v120;
    uint64_t v122 = v33;
    ++v9;
  }
  while (v9 != v8);
  unsigned int v6 = *(_DWORD *)(v3 + 20);
LABEL_32:
  if ((v6 & 0x40000000) != 0) {
    uint64_t v35 = *(void *)(v3 - 8);
  }
  else {
    uint64_t v35 = v3 - 32 * (v6 & 0x7FFFFFF);
  }
  uint64_t v36 = *(void **)(v35 + 32);
  v138[0] = v36;
  int v37 = *(_DWORD *)(v4 + 512);
  if (!v37)
  {
    unint64_t v103 = 0;
    goto LABEL_119;
  }
  uint64_t v38 = *(void *)(v4 + 496);
  int v39 = v37 - 1;
  unsigned int v40 = v39 & ((v36 >> 4) ^ (v36 >> 9));
  int v41 = (void *)(v38 + 16 * v40);
  uint64_t v42 = (void *)*v41;
  if (v36 != (void *)*v41)
  {
    unint64_t v43 = 0;
    int v44 = 1;
    while (v42 != (void *)-4096)
    {
      if (v43) {
        BOOL v45 = 0;
      }
      else {
        BOOL v45 = v42 == (void *)-8192;
      }
      if (v45) {
        unint64_t v43 = v41;
      }
      unsigned int v46 = v40 + v44++;
      unsigned int v40 = v46 & v39;
      int v41 = (void *)(v38 + 16 * v40);
      uint64_t v42 = (void *)*v41;
      if (v36 == (void *)*v41) {
        goto LABEL_44;
      }
    }
    if (v43) {
      unint64_t v103 = v43;
    }
    else {
      unint64_t v103 = v41;
    }
LABEL_119:
    int v41 = sub_1CB883BA0((_DWORD *)(v4 + 496), (uint64_t)v138, v138, v103);
    *int v41 = v138[0];
    v41[1] = 0;
  }
LABEL_44:
  uint64_t v112 = v41[1];
  llvm::SwitchCG::sortAndRangeify((char **)&__p);
  uint64_t v47 = *(void **)(v3 + 40);
  v138[0] = v47;
  int v48 = *(_DWORD *)(v4 + 512);
  if (!v48)
  {
    unint64_t v104 = 0;
    goto LABEL_123;
  }
  uint64_t v49 = *(void *)(v4 + 496);
  int v50 = v48 - 1;
  unsigned int v51 = v50 & ((v47 >> 4) ^ (v47 >> 9));
  uint64_t v52 = (void *)(v49 + 16 * v51);
  uint64_t v53 = (void *)*v52;
  if (v47 != (void *)*v52)
  {
    BOOL v54 = 0;
    int v55 = 1;
    while (v53 != (void *)-4096)
    {
      if (v54) {
        BOOL v56 = 0;
      }
      else {
        BOOL v56 = v53 == (void *)-8192;
      }
      if (v56) {
        BOOL v54 = v52;
      }
      unsigned int v57 = v51 + v55++;
      unsigned int v51 = v57 & v50;
      uint64_t v52 = (void *)(v49 + 16 * v51);
      uint64_t v53 = (void *)*v52;
      if (v47 == (void *)*v52) {
        goto LABEL_54;
      }
    }
    if (v54) {
      unint64_t v104 = v54;
    }
    else {
      unint64_t v104 = v52;
    }
LABEL_123:
    uint64_t v52 = sub_1CB883BA0((_DWORD *)(v4 + 496), (uint64_t)v138, v138, v104);
    void *v52 = v138[0];
    v52[1] = 0;
  }
LABEL_54:
  uint64_t v58 = (void *)v52[1];
  if (__p == v122)
  {
    llvm::MachineBasicBlock::addSuccessor((void *)v52[1], (void *)v112, -1);
    if (v58[1] == v58[4] + 320) {
      uint64_t v109 = 0;
    }
    else {
      uint64_t v109 = v58[1];
    }
    if (v112 != v109) {
      sub_1CC73677C(a3, (unsigned __int8 *)v112);
    }
  }
  else
  {
    llvm::SwitchCG::SwitchLowering::findJumpTables(*(void *)(v4 + 1792), (uint64_t *)&__p, v3, v112, 0, 0);
    llvm::SwitchCG::SwitchLowering::findBitTestClusters(*(uint64_t **)(v4 + 1792), (uint64_t *)&__p, v3);
    v138[0] = &v139;
    v138[1] = (void *)0x400000000;
    uint64_t v59 = __p;
    uint64_t v60 = v122 - 5;
    int v61 = sub_1CC6F36FC(*(void *)(v4 + 944), v58[2], v112);
    uint64_t v125 = v58;
    uint64_t v126 = v59;
    uint64_t v128 = 0;
    uint64_t v129 = 0;
    uint64_t v127 = v60;
    LODWORD(v130) = v61;
    uint64_t v62 = (_OWORD *)sub_1CC703F44((uint64_t)v138, (unint64_t)&v125, 1);
    uint64_t v63 = (char *)v138[0] + 48 * LODWORD(v138[1]);
    long long v65 = v62[1];
    long long v64 = v62[2];
    _OWORD *v63 = *v62;
    v63[1] = v65;
    v63[2] = v64;
    BOOL v66 = __CFADD__(v138[1], 1);
    unsigned int v67 = ++LODWORD(v138[1]);
    if (!v66)
    {
      uint64_t v110 = v3;
      uint64_t v115 = (uint64_t)v58;
      while (1)
      {
        uint64_t v68 = (char *)v138[0] + 48 * v67;
        uint64_t v69 = (llvm::MachineBasicBlock *)*((void *)v68 - 6);
        unint64_t v70 = *((void *)v68 - 5);
        unint64_t v71 = *((void *)v68 - 4);
        unsigned int v111 = *((_DWORD *)v68 - 2);
        LODWORD(v138[1]) = v67 - 1;
        int v72 = *(_DWORD *)(v3 + 20);
        if ((v72 & 0x40000000) != 0) {
          int v73 = *(void **)(v3 - 8);
        }
        else {
          int v73 = (void *)(v3 - 32 * (v72 & 0x7FFFFFF));
        }
        char v117 = (void *)*v73;
        unint64_t v113 = (uint64_t *)*((void *)v69 + 1);
        uint64_t v114 = *(llvm::MachineFunction **)(v4 + 920);
        if (v113 == (uint64_t *)((char *)v114 + 320)) {
          uint64_t v74 = 0;
        }
        else {
          uint64_t v74 = *((void *)v69 + 1);
        }
        if (*(unsigned char *)(v4 + 1760))
        {
          unint64_t v75 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v71 + 40 - v70) >> 3));
          uint64_t v76 = v71 + 40 == v70 ? 0 : v75;
          sub_1CC703FD0(v70, v71 + 40, v76, 1);
          if (v70 < v71)
          {
            unint64_t v77 = v71;
            while (*(_DWORD *)(v77 - 8) <= *(_DWORD *)(v71 + 32))
            {
              if (!*(_DWORD *)(v77 - 40) && *(void *)(v77 - 16) == v74)
              {
                uint64_t v78 = *(void *)(v77 - 8);
                long long v79 = *(_OWORD *)(v77 - 40);
                long long v80 = *(_OWORD *)(v77 - 24);
                int v81 = *(_DWORD *)(v71 + 32);
                long long v82 = *(_OWORD *)(v71 + 16);
                *(_OWORD *)(v77 - 40) = *(_OWORD *)v71;
                *(_OWORD *)(v77 - 24) = v82;
                *(_DWORD *)(v77 - 8) = v81;
                *(_OWORD *)unint64_t v71 = v79;
                *(_OWORD *)(v71 + 16) = v80;
                *(_DWORD *)(v71 + 32) = v78;
                break;
              }
              v77 -= 40;
              if (v70 >= v77) {
                break;
              }
            }
          }
        }
        if (v71 >= v70) {
          break;
        }
LABEL_110:
        unsigned int v67 = v138[1];
        uint64_t v3 = v110;
        if (!LODWORD(v138[1])) {
          goto LABEL_111;
        }
      }
      unint64_t v83 = v70;
      unsigned int v84 = v111;
      do
      {
        uint64_t v85 = *(unsigned int *)(v83 + 32);
        unint64_t v86 = v85 + v84;
        unsigned int v87 = v85 + v84;
        if (v86 <= 0x80000000) {
          unsigned int v84 = v87;
        }
        else {
          unsigned int v84 = 0x80000000;
        }
        v83 += 40;
      }
      while (v71 >= v83);
      uint64_t v88 = v70;
      unint64_t v116 = v71;
      while (2)
      {
        uint64_t v118 = (uint64_t)v69;
        if (v70 == v71)
        {
          MachineBasicBlock = (llvm::MachineBasicBlock *)v112;
          char v90 = llvm::BasicBlock::getFirstNonPHIOrDbg(*(llvm::BasicBlock **)(v112 + 16), 1)[16] == 35;
        }
        else
        {
          MachineBasicBlock = (llvm::MachineBasicBlock *)llvm::MachineFunction::CreateMachineBasicBlock(v114, *((const llvm::BasicBlock **)v69 + 2));
          llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v114 + 320, (uint64_t)MachineBasicBlock);
          char v90 = 0;
          uint64_t v91 = *v113;
          *(void *)MachineBasicBlock = *v113;
          *((void *)MachineBasicBlock + 1) = v113;
          *(void *)(v91 + 8) = MachineBasicBlock;
          uint64_t *v113 = (uint64_t)MachineBasicBlock;
        }
        unsigned int v92 = *(_DWORD *)(v70 + 32);
        if (v84 >= v92) {
          v84 -= v92;
        }
        else {
          unsigned int v84 = 0;
        }
        int v93 = *(_DWORD *)v70;
        if (*(_DWORD *)v70)
        {
          if (v93 == 1)
          {
            uint64_t v69 = MachineBasicBlock;
            uint64_t v4 = v120;
            sub_1CD614DBC(v120, v111, v115, v118, v112, v113, v84, v88, MachineBasicBlock, v90);
            unint64_t v71 = v116;
          }
          else
          {
            uint64_t v4 = v120;
            unint64_t v71 = v116;
            uint64_t v69 = MachineBasicBlock;
            if (v93 == 2) {
              sub_1CD615700(v120, v115, v118, v113, v111, v84, v88, (uint64_t)MachineBasicBlock, v90);
            }
          }
        }
        else
        {
          uint64_t v94 = *(void *)(v70 + 8);
          uint64_t v95 = *(void *)(v70 + 16);
          if (v94 == v95) {
            unsigned int v96 = 0;
          }
          else {
            unsigned int v96 = v117;
          }
          if (v94 == v95) {
            int v97 = 32;
          }
          else {
            int v97 = 41;
          }
          if (v94 == v95) {
            uint64_t v98 = v117;
          }
          else {
            uint64_t v98 = *(void **)(v70 + 8);
          }
          uint64_t v99 = *(void *)(v70 + 24);
          uint64_t v100 = (unsigned __int8 *)a3[4];
          uint64_t v124 = v100;
          if (v100)
          {
            char v107 = v90;
            llvm::MetadataTracking::track((uint64_t)&v124, v100, 2);
            char v90 = v107;
            uint64_t v100 = v124;
            unsigned int v92 = *(_DWORD *)(v70 + 32);
          }
          LODWORD(v125) = v97;
          BYTE4(v125) = v90;
          uint64_t v126 = v98;
          uint64_t v127 = v96;
          uint64_t v128 = v95;
          uint64_t v129 = v99;
          uint64_t v69 = MachineBasicBlock;
          unsigned __int8 v130 = MachineBasicBlock;
          uint64_t v131 = v118;
          int v132 = 0;
          int v133 = 0;
          unint64_t v134 = v100;
          if (v100)
          {
            llvm::MetadataTracking::track((uint64_t)&v134, v100, 2);
            unsigned int v135 = v92;
            unsigned int v136 = v84;
            uint64_t v4 = v120;
            uint64_t v101 = v115;
            unint64_t v71 = v116;
            if (v124) {
              llvm::MetadataTracking::untrack((uint64_t)&v124, v124);
            }
          }
          else
          {
            unsigned int v135 = v92;
            unsigned int v136 = v84;
            uint64_t v4 = v120;
            uint64_t v101 = v115;
            unint64_t v71 = v116;
          }
          sub_1CC6F3814(v4, (int *)&v125, v101, (uint64_t)a3);
          if (v134)
          {
            int v102 = *v134;
            if ((v102 - 4) > 0x1E)
            {
              if ((v102 - 3) >= 0xFFFFFFFE) {
                uint64_t v105 = v134;
              }
              else {
                uint64_t v105 = 0;
              }
              if ((v102 - 3) < 0xFFFFFFFE)
              {
                if (v102 == 3) {
                  *((void *)v134 + 1) = 0;
                }
                goto LABEL_101;
              }
              unint64_t v106 = (unint64_t)(v105 + 8);
            }
            else
            {
              if ((v134[1] & 0x7F) != 2 && !*((_DWORD *)v134 + 3)) {
                goto LABEL_101;
              }
              uint64_t v108 = *((void *)v134 + 2);
              if ((v108 & 4) == 0) {
                goto LABEL_101;
              }
              unint64_t v106 = v108 & 0xFFFFFFFFFFFFFFF8;
              if (!v106) {
                goto LABEL_101;
              }
            }
            unint64_t v137 = &v134;
            sub_1CC5FA668(v106 + 16, &v137);
          }
LABEL_101:
          if (v132) {
            llvm::MetadataTracking::untrack((uint64_t)&v132, v132);
          }
        }
        v70 += 40;
        v88 += 40;
        if (v70 > v71) {
          goto LABEL_110;
        }
        continue;
      }
    }
LABEL_111:
    if (v138[0] != &v139) {
      free(v138[0]);
    }
  }
  if (__p)
  {
    uint64_t v122 = __p;
    operator delete(__p);
  }
}

void sub_1CC6F4908(uint64_t a1, unint64_t a2)
{
  char v2 = *(unsigned char **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667) {
      abort();
    }
    uint64_t v4 = *(unsigned char **)(a1 + 8);
    uint64_t v5 = 5 * a2;
    unsigned int v6 = (char *)operator new(40 * a2);
    int v7 = &v6[v4 - v2];
    uint64_t v8 = v7;
    if (v4 != v2)
    {
      uint64_t v9 = &v6[v4 - v2];
      do
      {
        long long v10 = *(_OWORD *)(v4 - 40);
        long long v11 = *(_OWORD *)(v4 - 24);
        uint64_t v8 = v9 - 40;
        *((_DWORD *)v9 - 2) = *((_DWORD *)v4 - 2);
        *(_OWORD *)(v9 - 24) = v11;
        *(_OWORD *)(v9 - 40) = v10;
        v4 -= 40;
        v9 -= 40;
      }
      while (v4 != v2);
    }
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v6[8 * v5];
    if (v2)
    {
      operator delete(v2);
    }
  }
}

uint64_t sub_1CC6F49F8(uint64_t a1, uint64_t *a2, const llvm::MachineBasicBlock **a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t result = sub_1CB83544C(*(void *)(a1 + 880), *a2);
  unint64_t v8 = result + 7;
  if (v7 == 1) {
  if (v8 >= 8)
  }
  {
    uint64_t v9 = (int *)sub_1CC6EF0A4(v5, v4);
    unint64_t v81 = v10;
    uint64_t v11 = *sub_1CC6EEDFC(v5 + 256, v4);
    uint64_t v12 = (unsigned int *)sub_1CC6EF0A4(v5, *(v4 - 4));
    if (v13) {
      unsigned int v80 = *v12;
    }
    else {
      unsigned int v80 = 0;
    }
    uint64_t v14 = *(void *)(v5 + 880);
    uint64_t v15 = *(void *)*(v4 - 4);
    unsigned int v16 = *(_DWORD *)(v15 + 8);
    if ((v16 & 0xFE) == 0x12) {
      unsigned int v16 = *(_DWORD *)(**(void **)(v15 + 16) + 8);
    }
    uint64_t v17 = *(void *)(v14 + 232);
    if (v16 < 0x100) {
      goto LABEL_18;
    }
    unsigned int v18 = v16 >> 8;
    unint64_t v19 = *(unsigned int *)(v14 + 240);
    uint64_t v20 = *(void *)(v14 + 232);
    if (v19)
    {
      uint64_t v20 = v17;
      unint64_t v21 = v19;
      do
      {
        unint64_t v22 = v21 >> 1;
        uint64_t v23 = v20 + 16 * (v21 >> 1);
        unsigned int v24 = *(_DWORD *)(v23 + 8);
        uint64_t v25 = v23 + 16;
        v21 += ~(v21 >> 1);
        if (v24 < v18) {
          uint64_t v20 = v25;
        }
        else {
          unint64_t v21 = v22;
        }
      }
      while (v21);
    }
    if (v20 == v17 + 16 * v19 || *(_DWORD *)(v20 + 8) != v18) {
LABEL_18:
    }
      uint64_t v20 = v17;
    uint64_t v26 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v15, (llvm::LLVMContext *)*(unsigned int *)(v20 + 4));
    if ((*(_DWORD *)(v15 + 8) & 0xFE) == 0x12) {
      llvm::VectorType::get(v26, (llvm::Type *)(*(unsigned int *)(v15 + 32) | ((unint64_t)(*(_DWORD *)(v15 + 8) == 19) << 32)));
    }
    unint64_t LLTForType = llvm::getLLTForType(v26, *(llvm::Type **)(v5 + 880), v27);
    if ((*(unsigned int (**)(void))(**(void **)(v5 + 248) + 24))(*(void *)(v5 + 248)))
    {
      uint64_t v28 = *(v4 - 4);
      int v29 = *(unsigned __int8 *)(v28 + 16);
      if (v28 && v29 == 21)
      {
        uint64_t v30 = *(void *)(*(void *)(v28 + 24) + 112);
        if (v30)
        {
          unsigned int v31 = *(_DWORD *)(v28 + 32) + 2;
          if (v31 < *(_DWORD *)(v30 + 8))
          {
            uint64_t v32 = *(void *)(v30 + 8 * v31 + 40);
            if (v32)
            {
              if (*(char *)(v32 + 19) < 0)
              {
LABEL_74:
                int VRegUseAt = llvm::SwiftErrorValueTracking::getOrCreateVRegUseAt((llvm::SwiftErrorValueTracking *)(v5 + 712), (unint64_t)v4, a3[5], (const llvm::Value *)v28);
                int v87 = *v9;
                int v88 = 1;
                LODWORD(v84) = VRegUseAt;
                LODWORD(v85) = 0;
                return (*((uint64_t (**)(const llvm::MachineBasicBlock **, uint64_t, int *, uint64_t, long long *, uint64_t, void))*a3
                        + 4))(a3, 19, &v87, 1, &v84, 1, 0);
              }
            }
          }
        }
      }
      else if (v29 == 59 && (*(_WORD *)(v28 + 18) & 0x80) != 0)
      {
        goto LABEL_74;
      }
    }
    int v33 = (llvm::TargetLoweringBase *)(*(uint64_t (**)(void))(**(void **)(*(void *)(v5 + 864) + 16)
                                                                        + 120))(*(void *)(*(void *)(v5 + 864)
                                                                                            + 16));
    uint64_t result = llvm::TargetLoweringBase::getLoadMemOperandFlags(v33, (uint64_t ***)v4, *(const llvm::DataLayout **)(v5 + 880));
    __int16 v78 = result;
    if (!v81) {
      return result;
    }
    if (v81 != 1 || (*((unsigned char *)v4 + 23) & 0x20) == 0) {
      goto LABEL_49;
    }
    uint64_t v34 = **(void **)*v4;
    *(void *)&long long v84 = v4;
    int v35 = *(_DWORD *)(v34 + 2496);
    if (v35)
    {
      uint64_t v36 = *(void *)(v34 + 2480);
      int v37 = v35 - 1;
      unsigned int v38 = v37 & ((v4 >> 4) ^ (v4 >> 9));
      int v39 = (uint64_t **)(v36 + 40 * v38);
      unsigned int v40 = *v39;
      if (*v39 == v4) {
        goto LABEL_44;
      }
      int v41 = 0;
      int v42 = 1;
      while (v40 != (uint64_t *)-4096)
      {
        if (v41) {
          BOOL v43 = 0;
        }
        else {
          BOOL v43 = v40 == (uint64_t *)-8192;
        }
        if (v43) {
          int v41 = v39;
        }
        unsigned int v44 = v38 + v42++;
        unsigned int v38 = v44 & v37;
        int v39 = (uint64_t **)(v36 + 40 * v38);
        unsigned int v40 = *v39;
        if (*v39 == v4) {
          goto LABEL_44;
        }
      }
      if (v41) {
        uint64_t v68 = v41;
      }
      else {
        uint64_t v68 = v39;
      }
    }
    else
    {
      uint64_t v68 = 0;
    }
    int v39 = (uint64_t **)sub_1CC609054(v34 + 2480, (uint64_t)&v84, (uint64_t *)&v84, v68);
    uint64_t v69 = (uint64_t *)v84;
    v39[3] = 0;
    v39[4] = 0;
    unsigned char *v39 = v69;
    v39[1] = (uint64_t *)(v39 + 3);
    v39[2] = (uint64_t *)0x100000000;
LABEL_44:
    uint64_t v45 = *((unsigned int *)v39 + 4);
    if (v45)
    {
      unsigned int v46 = v39[1] + 1;
      uint64_t v47 = 16 * v45;
      while (*((_DWORD *)v46 - 2) != 4)
      {
        uint64_t v77 = 0;
        v46 += 2;
        v47 -= 16;
        if (!v47) {
          goto LABEL_50;
        }
      }
      uint64_t v77 = *v46;
      goto LABEL_50;
    }
LABEL_49:
    uint64_t v77 = 0;
LABEL_50:
    uint64_t v48 = 0;
    unsigned int v49 = 1;
    uint64_t v75 = v5;
    uint64_t v76 = a3;
    uint64_t v73 = v11;
    uint64_t v74 = v9;
    int v72 = v4;
    do
    {
      unsigned int v86 = 0;
      sub_1CC735FF8((uint64_t)a3, &v86, v80, LLTForType, *(void *)(v11 + 8 * v48) >> 3, (uint64_t *)&v84);
      uint64_t v50 = *(v4 - 4);
      if (v50)
      {
        unsigned int v51 = *(_DWORD *)(*(void *)v50 + 8);
        if ((v51 & 0xFE) == 0x12) {
          unsigned int v51 = *(_DWORD *)(**(void **)(*(void *)v50 + 16) + 8);
        }
        unsigned int v52 = v51 >> 8;
      }
      else
      {
        unsigned int v52 = 0;
      }
      unint64_t v53 = *(void *)(v11 + 8 * v48);
      char v54 = sub_1CC6F18C4(v5, (uint64_t)v4);
      uint64_t v55 = *(void *)(v5 + 864);
      int v56 = v9[v48];
      if (v56 < 0 && (uint64_t v57 = *(void *)(v5 + 872), v58 = v56 & 0x7FFFFFFF, v58 < *(_DWORD *)(v57 + 432)))
      {
        char v59 = v54;
        uint64_t v82 = *(void *)(*(void *)(v57 + 424) + 8 * v58);
      }
      else
      {
        char v59 = v54;
        uint64_t v82 = 0;
      }
      unint64_t v83 = *(void *)(v11 + 8 * v48);
      llvm::Instruction::getAAMetadata((uint64_t ***)v4, &v84);
      __int16 v60 = *((unsigned __int8 *)v4 + 60);
      unsigned int v61 = *((unsigned __int16 *)v4 + 9);
      *(void *)(v55 + 208) += 80;
      uint64_t v62 = *(void *)(v55 + 128);
      if (((v62 + 7) & 0xFFFFFFFFFFFFFFF8) - v62 + 80 > *(void *)(v55 + 136) - v62)
      {
        unsigned int v66 = *(_DWORD *)(v55 + 152) >> 7;
        if (v66 >= 0x1E) {
          LOBYTE(v66) = 30;
        }
        uint64_t v71 = 4096 << v66;
        unint64_t v63 = (unint64_t)operator new(4096 << v66, (std::align_val_t)8uLL);
        unint64_t v67 = *(unsigned int *)(v55 + 152);
        if (v67 >= *(unsigned int *)(v55 + 156)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v55 + 144) + 8 * v67) = v63;
        ++*(_DWORD *)(v55 + 152);
        *(void *)(v55 + 136) = v63 + v71;
      }
      else
      {
        unint64_t v63 = (v62 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v55 + 128) = v63 + 80;
      *(void *)unint64_t v63 = v50 & 0xFFFFFFFFFFFFFFFBLL;
      *(void *)(v63 + 8) = v53 >> 3;
      *(_DWORD *)(v63 + 16) = v52;
      *(unsigned char *)(v63 + 20) = 0;
      *(void *)(v63 + 24) = v82;
      long long v64 = v85;
      *(_OWORD *)(v63 + 40) = v84;
      *(_WORD *)(v63 + 32) = v78;
      *(unsigned char *)(v63 + 34) = 63 - __clz(((1 << v59) | (v83 >> 3)) & -(uint64_t)((1 << v59) | (v83 >> 3)));
      *(_OWORD *)(v63 + 56) = v64;
      a3 = v76;
      *(void *)(v63 + 72) = v77;
      *(_WORD *)(v63 + 36) = v60 & 0xF8FF | (((v61 >> 7) & 7) << 8);
      uint64_t v9 = v74;
      int v87 = v74[v48];
      int v88 = 1;
      LODWORD(v84) = v86;
      LODWORD(v85) = 0;
      uint64_t result = (uint64_t)sub_1CC737934(v76, 0x5Au, &v87, (int *)&v84, (llvm::MachineMemOperand *)v63);
      uint64_t v48 = v49;
      BOOL v65 = v81 > v49++;
      uint64_t v4 = v72;
      uint64_t v11 = v73;
      uint64_t v5 = v75;
    }
    while (v65);
  }
  return result;
}

uint64_t sub_1CC6F5020(uint64_t a1, unint64_t a2, const llvm::MachineBasicBlock **a3)
{
  unint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t result = sub_1CB83544C(*(void *)(a1 + 880), **(void **)(a2 - 64));
  unint64_t v8 = result + 7;
  if (v7 == 1) {
  if (v8 >= 8)
  }
  {
    uint64_t v9 = (_DWORD *)sub_1CC6EF0A4(v5, *(void *)(v4 - 64));
    unint64_t v65 = v10;
    uint64_t v11 = *sub_1CC6EEDFC(v5 + 256, *(uint64_t **)(v4 - 64));
    uint64_t v12 = (unsigned int *)sub_1CC6EF0A4(v5, *(void *)(v4 - 32));
    if (v13) {
      unsigned int v64 = *v12;
    }
    else {
      unsigned int v64 = 0;
    }
    uint64_t v14 = *(void *)(v5 + 880);
    uint64_t v15 = **(void **)(v4 - 32);
    unsigned int v16 = *(_DWORD *)(v15 + 8);
    if ((v16 & 0xFE) == 0x12) {
      unsigned int v16 = *(_DWORD *)(**(void **)(v15 + 16) + 8);
    }
    uint64_t v17 = *(void *)(v14 + 232);
    if (v16 < 0x100) {
      goto LABEL_18;
    }
    unsigned int v18 = v16 >> 8;
    unint64_t v19 = *(unsigned int *)(v14 + 240);
    uint64_t v20 = *(void *)(v14 + 232);
    if (v19)
    {
      uint64_t v20 = v17;
      unint64_t v21 = v19;
      do
      {
        unint64_t v22 = v21 >> 1;
        uint64_t v23 = v20 + 16 * (v21 >> 1);
        unsigned int v24 = *(_DWORD *)(v23 + 8);
        uint64_t v25 = v23 + 16;
        v21 += ~(v21 >> 1);
        if (v24 < v18) {
          uint64_t v20 = v25;
        }
        else {
          unint64_t v21 = v22;
        }
      }
      while (v21);
    }
    if (v20 == v17 + 16 * v19 || *(_DWORD *)(v20 + 8) != v18) {
LABEL_18:
    }
      uint64_t v20 = v17;
    uint64_t v26 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v15, (llvm::LLVMContext *)*(unsigned int *)(v20 + 4));
    if ((*(_DWORD *)(v15 + 8) & 0xFE) == 0x12) {
      llvm::VectorType::get(v26, (llvm::Type *)(*(unsigned int *)(v15 + 32) | ((unint64_t)(*(_DWORD *)(v15 + 8) == 19) << 32)));
    }
    unint64_t LLTForType = llvm::getLLTForType(v26, *(llvm::Type **)(v5 + 880), v27);
    if ((*(unsigned int (**)(void))(**(void **)(v5 + 248) + 24))(*(void *)(v5 + 248)))
    {
      uint64_t v28 = *(void *)(v4 - 32);
      int v29 = *(unsigned __int8 *)(v28 + 16);
      if (v28 && v29 == 21)
      {
        uint64_t v30 = *(void *)(*(void *)(v28 + 24) + 112);
        if (v30)
        {
          unsigned int v31 = *(_DWORD *)(v28 + 32) + 2;
          if (v31 < *(_DWORD *)(v30 + 8))
          {
            uint64_t v32 = *(void *)(v30 + 8 * v31 + 40);
            if (v32)
            {
              if (*(char *)(v32 + 19) < 0)
              {
LABEL_51:
                v68[0] = llvm::SwiftErrorValueTracking::getOrCreateVRegDefAt((llvm::SwiftErrorValueTracking *)(v5 + 712), v4, a3[5], (const llvm::Value *)v28);
                v68[2] = 1;
                LODWORD(v69) = *v9;
                LODWORD(v70) = 0;
                return (*((uint64_t (**)(const llvm::MachineBasicBlock **, uint64_t, int *, uint64_t, long long *, uint64_t, void))*a3
                        + 4))(a3, 19, v68, 1, &v69, 1, 0);
              }
            }
          }
        }
      }
      else if (v29 == 59 && (*(_WORD *)(v28 + 18) & 0x80) != 0)
      {
        goto LABEL_51;
      }
    }
    int v33 = (llvm::TargetLoweringBase *)(*(uint64_t (**)(void))(**(void **)(*(void *)(v5 + 864) + 16)
                                                                        + 120))(*(void *)(*(void *)(v5 + 864)
                                                                                            + 16));
    uint64_t result = llvm::TargetLoweringBase::getStoreMemOperandFlags(v33, (const llvm::StoreInst *)v4, *(const llvm::DataLayout **)(v5 + 880));
    __int16 v62 = result;
    if (v65)
    {
      uint64_t v34 = 0;
      unsigned int v35 = 1;
      uint64_t v60 = v5;
      unsigned int v61 = a3;
      uint64_t v58 = v11;
      char v59 = v9;
      unint64_t v57 = v4;
      do
      {
        v71[0] = 0;
        sub_1CC735FF8((uint64_t)a3, v71, v64, LLTForType, *(void *)(v11 + 8 * v34) >> 3, (uint64_t *)&v69);
        uint64_t v36 = *(void *)(v4 - 32);
        if (v36)
        {
          unsigned int v37 = *(_DWORD *)(*(void *)v36 + 8);
          if ((v37 & 0xFE) == 0x12) {
            unsigned int v37 = *(_DWORD *)(**(void **)(*(void *)v36 + 16) + 8);
          }
          unsigned int v38 = v9;
          unsigned int v39 = v37 >> 8;
        }
        else
        {
          unsigned int v38 = v9;
          unsigned int v39 = 0;
        }
        unint64_t v67 = *(void *)(v11 + 8 * v34);
        char v40 = sub_1CC6F18C4(v5, v4);
        uint64_t v41 = *(void *)(v5 + 864);
        int v42 = v38[v34];
        if (v42 < 0
          && (v43 = *(void *)(v5 + 872), uint64_t v44 = v42 & 0x7FFFFFFF, v44 < *(_DWORD *)(v43 + 432)))
        {
          char v45 = v40;
          uint64_t v66 = *(void *)(*(void *)(v43 + 424) + 8 * v44);
        }
        else
        {
          char v45 = v40;
          uint64_t v66 = 0;
        }
        unint64_t v46 = *(void *)(v11 + 8 * v34);
        llvm::Instruction::getAAMetadata((uint64_t ***)v4, &v69);
        __int16 v47 = *(unsigned __int8 *)(v4 + 60);
        unsigned int v48 = *(unsigned __int16 *)(v4 + 18);
        *(void *)(v41 + 208) += 80;
        uint64_t v49 = *(void *)(v41 + 128);
        if (((v49 + 7) & 0xFFFFFFFFFFFFFFF8) - v49 + 80 > *(void *)(v41 + 136) - v49)
        {
          unsigned int v54 = *(_DWORD *)(v41 + 152) >> 7;
          if (v54 >= 0x1E) {
            LOBYTE(v54) = 30;
          }
          uint64_t v56 = 4096 << v54;
          unint64_t v50 = (unint64_t)operator new(4096 << v54, (std::align_val_t)8uLL);
          unint64_t v55 = *(unsigned int *)(v41 + 152);
          if (v55 >= *(unsigned int *)(v41 + 156)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unint64_t v51 = v67;
          *(void *)(*(void *)(v41 + 144) + 8 * v55) = v50;
          ++*(_DWORD *)(v41 + 152);
          *(void *)(v41 + 136) = v50 + v56;
        }
        else
        {
          unint64_t v50 = (v49 + 7) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v51 = v67;
        }
        *(void *)(v41 + 128) = v50 + 80;
        *(void *)unint64_t v50 = v36 & 0xFFFFFFFFFFFFFFFBLL;
        *(void *)(v50 + 8) = v51 >> 3;
        *(_DWORD *)(v50 + 16) = v39;
        *(unsigned char *)(v50 + 20) = 0;
        *(void *)(v50 + 24) = v66;
        long long v52 = v70;
        *(_OWORD *)(v50 + 40) = v69;
        *(_WORD *)(v50 + 32) = v62;
        *(unsigned char *)(v50 + 34) = 63 - __clz(((1 << v45) | (v46 >> 3)) & -(uint64_t)((1 << v45) | (v46 >> 3)));
        *(_OWORD *)(v50 + 56) = v52;
        *(void *)(v50 + 72) = 0;
        *(_WORD *)(v50 + 36) = v47 & 0xF8FF | (((v48 >> 7) & 7) << 8);
        uint64_t v9 = v59;
        LODWORD(v69) = v59[v34];
        LODWORD(v70) = 0;
        v68[0] = v71[0];
        v68[4] = 0;
        a3 = v61;
        uint64_t result = (uint64_t)sub_1CC737D1C(v61, (int *)&v69, v68, (llvm::MachineMemOperand *)v50);
        uint64_t v34 = v35;
        BOOL v53 = v65 > v35++;
        unint64_t v4 = v57;
        uint64_t v11 = v58;
        uint64_t v5 = v60;
      }
      while (v53);
    }
  }
  return result;
}

uint64_t sub_1CC6F5540(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0) {
    uint64_t v5 = *(uint64_t ***)(a2 - 8);
  }
  else {
    uint64_t v5 = (uint64_t **)(a2 - 32 * (v4 & 0x7FFFFFF));
  }
  unsigned int v6 = *v5;
  unint64_t v7 = sub_1CC6F5664(a2, *(llvm::DataLayout **)(a1 + 880));
  uint64_t v8 = sub_1CC6EF0A4(a1, v6);
  uint64_t v9 = sub_1CC6EEDFC(a1 + 256, v6);
  unint64_t v10 = (char *)*v9;
  unint64_t v11 = *((unsigned int *)v9 + 2);
  if (v11)
  {
    uint64_t v12 = (char *)*v9;
    do
    {
      unint64_t v13 = v11 >> 1;
      uint64_t v14 = (unint64_t *)&v12[8 * (v11 >> 1)];
      unint64_t v16 = *v14;
      uint64_t v15 = (char *)(v14 + 1);
      v11 += ~(v11 >> 1);
      if (v16 < v7) {
        uint64_t v12 = v15;
      }
      else {
        unint64_t v11 = v13;
      }
    }
    while (v11);
  }
  else
  {
    uint64_t v12 = (char *)*v9;
  }
  uint64_t result = (uint64_t)sub_1CC6EE95C(a1, (uint64_t *)a2);
  if (*(_DWORD *)(result + 8))
  {
    uint64_t v18 = result;
    unint64_t v19 = 0;
    unint64_t v20 = (unint64_t)(v12 - v10) >> 3;
    uint64_t v21 = *(void *)result;
    do
    {
      unsigned int v22 = *(_DWORD *)(v21 + 4 * v19);
      uint64_t v23 = (v20 + v19);
      if (v22)
      {
        uint64_t result = llvm::MachineRegisterInfo::replaceRegWith(*(void **)(a1 + 872), v22, *(_DWORD *)(v8 + 4 * v23));
        uint64_t v21 = *(void *)v18;
      }
      *(_DWORD *)(v21 + 4 * v19++) = *(_DWORD *)(v8 + 4 * v23);
    }
    while (v19 < *(unsigned int *)(v18 + 8));
  }
  return result;
}

uint64_t sub_1CC6F5664(uint64_t a1, llvm::DataLayout *a2)
{
  v10[1] = *(const llvm::Value **)MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a1 + 20);
  if ((v4 & 0x40000000) != 0) {
    uint64_t v5 = *(uint64_t ***)(a1 - 8);
  }
  else {
    uint64_t v5 = (uint64_t **)(a1 - 32 * (v4 & 0x7FFFFFF));
  }
  unsigned int v6 = *v5;
  unint64_t v7 = (llvm::ConstantInt *)(***(void ***)a1 + 1960);
  v10[0] = (const llvm::Value *)llvm::ConstantInt::get(v7, 0, 0);
  int v8 = *(unsigned __int8 *)(a1 + 16);
  if (v8 == 92)
  {
    if (*(_DWORD *)(a1 + 72))
    {
      llvm::ConstantInt::get(v7, **(unsigned int **)(a1 + 64), 0);
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  else if (v8 == 93)
  {
    if (*(_DWORD *)(a1 + 72))
    {
      llvm::ConstantInt::get(v7, **(unsigned int **)(a1 + 64), 0);
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  else if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFFu) >= 2uLL)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return 8 * llvm::DataLayout::getIndexedOffsetInType(a2, *v6, v10, 1);
}

uint64_t sub_1CC6F5910(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0) {
    uint64_t v5 = *(uint64_t **)(a2 - 8);
  }
  else {
    uint64_t v5 = (uint64_t *)(a2 - 32 * (v4 & 0x7FFFFFF));
  }
  uint64_t v6 = *v5;
  unint64_t v7 = sub_1CC6F5664(a2, *(llvm::DataLayout **)(a1 + 880));
  int v8 = sub_1CC6EE95C(a1, (uint64_t *)a2);
  uint64_t v9 = *sub_1CC6EEDFC(a1 + 256, (uint64_t *)a2);
  uint64_t v10 = sub_1CC6EF0A4(a1, v6);
  int v11 = *(_DWORD *)(a2 + 20);
  if ((v11 & 0x40000000) != 0) {
    uint64_t v12 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v12 = a2 - 32 * (v11 & 0x7FFFFFF);
  }
  uint64_t result = sub_1CC6EF0A4(a1, *(void *)(v12 + 32));
  if (*((_DWORD *)v8 + 2))
  {
    unint64_t v15 = 0;
    uint64_t v16 = result + 4 * v14;
    uint64_t v17 = *v8;
    do
    {
      if (*(void *)(v9 + 8 * v15) >= v7 && result != v16) {
        uint64_t v18 = (_DWORD *)result;
      }
      else {
        uint64_t v18 = (_DWORD *)v10;
      }
      result += 4 * ((*(void *)(v9 + 8 * v15) >= v7) & (result != v16));
      *(_DWORD *)(v17 + 4 * v15++) = *v18;
      v10 += 4;
    }
    while (v15 < *((unsigned int *)v8 + 2));
  }
  return result;
}

uint64_t sub_1CC6F5A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0) {
    unint64_t v7 = *(void **)(a2 - 8);
  }
  else {
    unint64_t v7 = (void *)(a2 - 32 * (v6 & 0x7FFFFFF));
  }
  int v8 = (int *)sub_1CC6EF0A4(a1, *v7);
  if (v9) {
    int v10 = *v8;
  }
  else {
    int v10 = 0;
  }
  uint64_t v11 = sub_1CC6EF0A4(a1, a2);
  unint64_t v13 = v12;
  int v14 = *(_DWORD *)(a2 + 20);
  if ((v14 & 0x40000000) != 0) {
    uint64_t v15 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v15 = a2 - 32 * (v14 & 0x7FFFFFF);
  }
  uint64_t v16 = sub_1CC6EF0A4(a1, *(void *)(v15 + 32));
  int v17 = *(_DWORD *)(a2 + 20);
  if ((v17 & 0x40000000) != 0) {
    uint64_t v18 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v18 = a2 - 32 * (v17 & 0x7FFFFFF);
  }
  uint64_t result = sub_1CC6EF0A4(a1, *(void *)(v18 + 64));
  uint64_t v20 = result;
  if (*(unsigned char *)(a2 + 16) == 85 && (uint64_t result = sub_1CB845E74(a2), result))
  {
    int v21 = *(unsigned __int8 *)(a2 + 17) >> 1;
    if (v21 == 127) {
      int v21 = -1;
    }
    uint64_t v22 = (8 * v21) & 0x3F0 | ((v21 & 1) << 10) | 0x100000000;
  }
  else
  {
    uint64_t v22 = 0x100000000;
  }
  if (v13)
  {
    uint64_t v23 = 0;
    unsigned int v24 = 1;
    do
    {
      int v25 = *(_DWORD *)(v11 + 4 * v23);
      int v26 = *(_DWORD *)(v16 + 4 * v23);
      int v27 = *(_DWORD *)(v20 + 4 * v23);
      v30[0] = v25;
      v30[2] = 1;
      v29[0] = v10;
      _DWORD v29[4] = 0;
      v29[6] = v26;
      v29[10] = 0;
      v29[12] = v27;
      v29[16] = 0;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 136, v30, 1, v29, 3, v22);
      uint64_t v23 = v24;
    }
    while (v13 > v24++);
  }
  return result;
}

void *sub_1CC6F5BF4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = (int *)sub_1CC6EF0A4(a1, a3);
  if (v8) {
    int v9 = *v7;
  }
  else {
    int v9 = 0;
  }
  uint64_t v10 = a1 + 256;
  uint64_t v11 = sub_1CC6EEB04(v10, (uint64_t)a2);
  if (*((_DWORD *)v11 + 2))
  {
    v15[0] = *(_DWORD *)*v11;
    v15[2] = 1;
    v14[0] = v9;
    v14[4] = 0;
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a4 + 32))(a4, 19, v15, 1, v14, 1, 0);
  }
  else
  {
    if (!*((_DWORD *)v11 + 3)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)*uint64_t v11 = v9;
    ++*((_DWORD *)v11 + 2);
    uint64_t result = sub_1CC6EEDFC(v10, a2);
    unsigned int v13 = *((_DWORD *)result + 2);
    if (v13 >= *((_DWORD *)result + 3)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*result + 8 * v13) = 0;
    ++*((_DWORD *)result + 2);
  }
  return result;
}

uint64_t sub_1CC6F5D48(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a2;
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  int v6 = *((_DWORD *)a2 + 5);
  if ((v6 & 0x40000000) != 0) {
    unint64_t v7 = (llvm ***)*(a2 - 1);
  }
  else {
    unint64_t v7 = (llvm ***)&a2[-4 * (v6 & 0x7FFFFFF)];
  }
  uint64_t v8 = *v7;
  int v9 = (int *)sub_1CC6EF0A4(a1, *v7);
  if (v11) {
    int v12 = *v9;
  }
  else {
    int v12 = 0;
  }
  unsigned int v13 = *v8;
  unint64_t LLTForType = llvm::getLLTForType(*v8, *(llvm::Type **)(a1 + 880), v10);
  uint64_t v15 = *(void *)(a1 + 880);
  unsigned int v16 = *((_DWORD *)v13 + 2);
  if ((v16 & 0xFE) == 0x12) {
    unsigned int v16 = *(_DWORD *)(**((void **)v13 + 2) + 8);
  }
  uint64_t v17 = *(void *)(v15 + 232);
  if (v16 < 0x100) {
    goto LABEL_18;
  }
  unsigned int v18 = v16 >> 8;
  unint64_t v19 = *(unsigned int *)(v15 + 240);
  uint64_t v20 = *(void *)(v15 + 232);
  if (v19)
  {
    uint64_t v20 = v17;
    unint64_t v21 = v19;
    do
    {
      unint64_t v22 = v21 >> 1;
      uint64_t v23 = v20 + 16 * (v21 >> 1);
      unsigned int v24 = *(_DWORD *)(v23 + 8);
      uint64_t v25 = v23 + 16;
      v21 += ~(v21 >> 1);
      if (v24 < v18) {
        uint64_t v20 = v25;
      }
      else {
        unint64_t v21 = v22;
      }
    }
    while (v21);
  }
  if (v20 == v17 + 16 * v19 || *(_DWORD *)(v20 + 8) != v18) {
LABEL_18:
  }
    uint64_t v20 = v17;
  uint64_t v126 = (llvm *)llvm::IntegerType::get(*(llvm::IntegerType **)v13, (llvm::LLVMContext *)*(unsigned int *)(v20 + 4));
  if ((*((_DWORD *)v13 + 2) & 0xFE) == 0x12)
  {
    llvm::VectorType::get(v126, (llvm::Type *)(*((unsigned int *)v13 + 8) | ((unint64_t)(*((_DWORD *)v13 + 2) == 19) << 32)));
    uint64_t v126 = v120;
    unint64_t v27 = llvm::getLLTForType(v120, *(llvm::Type **)(a1 + 880), v121);
  }
  else
  {
    unint64_t v27 = llvm::getLLTForType(v126, *(llvm::Type **)(a1 + 880), v26);
  }
  unint64_t v130 = v27;
  uint64_t v28 = *v4;
  int v125 = 1;
  if (*v4 && (*(_DWORD *)(v28 + 8) & 0xFE) == 0x12)
  {
    int v29 = (llvm::Type *)*(unsigned int *)(v28 + 32);
    if (v29 < 2)
    {
      int v125 = 1;
    }
    else if ((LLTForType & 0xFFFFFFFFFFFFFFF9) != 0 && (LLTForType & 4) != 0)
    {
      int v125 = 0;
    }
    else
    {
      unint64_t v136 = sub_1CBA5A95C(*(unsigned int *)(v28 + 32), LLTForType);
      int v137 = 0;
      LODWORD(v131) = v12;
      int v132 = 0;
      sub_1CD62D79C((void *)a3, (uint64_t)&v136, &v131);
      int v12 = *(_DWORD *)(*(void *)(v103 + 32) + 4);
      llvm::FixedVectorType::get(v13, v29);
      uint64_t v105 = v104;
      unint64_t LLTForType = llvm::getLLTForType(v104, *(llvm::Type **)(a1 + 880), v106);
      uint64_t v107 = *(void *)(a1 + 880);
      unsigned int v108 = *((_DWORD *)v105 + 2);
      if ((v108 & 0xFE) == 0x12) {
        unsigned int v108 = *(_DWORD *)(**((void **)v105 + 2) + 8);
      }
      uint64_t v109 = *(void *)(v107 + 232);
      if (v108 < 0x100) {
        goto LABEL_126;
      }
      unsigned int v110 = v108 >> 8;
      unint64_t v111 = *(unsigned int *)(v107 + 240);
      uint64_t v112 = *(void *)(v107 + 232);
      if (v111)
      {
        uint64_t v112 = v109;
        unint64_t v113 = v111;
        do
        {
          unint64_t v114 = v113 >> 1;
          uint64_t v115 = v112 + 16 * (v113 >> 1);
          unsigned int v116 = *(_DWORD *)(v115 + 8);
          uint64_t v117 = v115 + 16;
          v113 += ~(v113 >> 1);
          if (v116 < v110) {
            uint64_t v112 = v117;
          }
          else {
            unint64_t v113 = v114;
          }
        }
        while (v113);
      }
      if (v112 == v109 + 16 * v111 || *(_DWORD *)(v112 + 8) != v110) {
LABEL_126:
      }
        uint64_t v112 = v109;
      uint64_t v126 = (llvm *)llvm::IntegerType::get(*(llvm::IntegerType **)v105, (llvm::LLVMContext *)*(unsigned int *)(v112 + 4));
      if ((*((_DWORD *)v105 + 2) & 0xFE) == 0x12)
      {
        llvm::VectorType::get(v126, (llvm::Type *)(*((unsigned int *)v105 + 8) | ((unint64_t)(*((_DWORD *)v105 + 2) == 19) << 32)));
        uint64_t v126 = v122;
        unint64_t v119 = llvm::getLLTForType(v122, *(llvm::Type **)(a1 + 880), v123);
      }
      else
      {
        unint64_t v119 = llvm::getLLTForType(v126, *(llvm::Type **)(a1 + 880), v118);
      }
      int v125 = 0;
      unint64_t v130 = v119;
    }
  }
  uint64_t v30 = 3;
  if (*((unsigned char *)v4 + 16) == 62) {
    uint64_t v30 = 8;
  }
  uint64_t v31 = v4[v30];
  int v32 = *((_DWORD *)v4 + 5);
  if ((v32 & 0x40000000) != 0)
  {
    uint64_t v34 = (uint64_t *)*(v4 - 1);
    uint64_t v33 = v32 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v33 = v32 & 0x7FFFFFF;
    uint64_t v34 = &v4[-4 * v33];
  }
  uint64_t v35 = v31 | 4;
  uint64_t v36 = v34 + 4;
  uint64_t v128 = v34 + 4;
  uint64_t v129 = v35;
  if (v33 == 1) {
    goto LABEL_109;
  }
  unint64_t v127 = LLTForType;
  uint64_t v124 = v4;
  unint64_t v37 = 0;
  unsigned int v38 = &v34[4 * v33];
  do
  {
    unsigned int v39 = (void *)*v36;
    char v40 = (llvm::Type *)(v129 & 0xFFFFFFFFFFFFFFF8);
    if ((v129 & 4) != 0 || !v40)
    {
      unint64_t v46 = *(llvm::DataLayout **)(a1 + 880);
      if ((v129 & 4) == 0 || !v40)
      {
        if (v39) {
          BOOL v47 = *((unsigned char *)v39 + 16) == 16;
        }
        else {
          BOOL v47 = 0;
        }
        AggregateElement = (void *)*v36;
        if (!v47) {
          AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v39, 0);
        }
        unint64_t v51 = (unsigned int *)AggregateElement[3];
        uint64_t v49 = (unsigned int *)(AggregateElement + 3);
        unint64_t v50 = v51;
        if (v49[2] < 0x41) {
          unint64_t v50 = v49;
        }
        char v40 = *(llvm::Type **)(*((void *)v40 + 2) + 8 * *v50);
      }
      uint64_t v52 = sub_1CB83544C((uint64_t)v46, (uint64_t)v40);
      BOOL v54 = v53 == 1;
      char Alignment = llvm::DataLayout::getAlignment(v46, v40, 1);
      if (v54) {
      unint64_t v57 = ((1 << Alignment) + ((unint64_t)(v52 + 7) >> 3) - 1) & -(1 << Alignment);
      }
      if (*((unsigned char *)v39 + 16) != 16 || v39 == 0)
      {
        if (v37)
        {
          *(void *)&long long v131 = v130;
          DWORD2(v131) = 0;
          char v59 = (llvm::LLVMContext *)(unsigned __int16)(v130 >> 3);
          uint64_t v60 = (llvm::LLVMContext *)(unsigned __int16)(v130 >> 19);
          if ((v130 & 2) == 0) {
            uint64_t v60 = (llvm::LLVMContext *)(v130 >> 19);
          }
          if ((v130 & 4) != 0) {
            char v59 = v60;
          }
          if (v130) {
            unsigned int v61 = (llvm::LLVMContext *)(v130 >> 3);
          }
          else {
            unsigned int v61 = v59;
          }
          __int16 v62 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a3 + 8), v61);
          unint64_t v63 = llvm::ConstantInt::get(v62, v37, (const llvm::APInt *)1);
          (*(void (**)(uint64_t, long long *, void *))(*(void *)a3 + 16))(a3, &v131, v63);
          int v65 = *(_DWORD *)(*(void *)(v64 + 32) + 4);
          unint64_t v136 = v127;
          int v137 = 0;
          LODWORD(v131) = v12;
          int v132 = 0;
          LODWORD(v133) = v65;
          int v135 = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a3 + 32))(a3, 193, &v136, 1, &v131, 2, 0);
          int v12 = *(_DWORD *)(*(void *)(v66 + 32) + 4);
        }
        unint64_t v67 = (int *)sub_1CC6EF0A4(a1, v39);
        if (v68)
        {
          int v70 = *v67;
          if (*v67 < 0 && (uint64_t v71 = *(void *)(a1 + 872), (v70 & 0x7FFFFFFFu) < *(_DWORD *)(v71 + 432))) {
            unint64_t v68 = *(void *)(*(void *)(v71 + 424) + 8 * (v70 & 0x7FFFFFFF));
          }
          else {
            unint64_t v68 = 0;
          }
        }
        else
        {
          int v70 = 0;
        }
        unint64_t v74 = v130;
        if (v68 != v130)
        {
          uint64_t v75 = (v68 >> 2) & 1;
          if ((v68 & 0xFFFFFFFFFFFFFFF9) == 0) {
            LODWORD(v75) = 0;
          }
          if (((v125 | v75) & 1) == 0)
          {
            unint64_t v136 = sub_1CD6133A0(&v130, v68);
            int v137 = 0;
            LODWORD(v131) = v70;
            int v132 = 0;
            sub_1CD62D79C((void *)a3, (uint64_t)&v136, &v131);
            int v70 = *(_DWORD *)(*(void *)(v87 + 32) + 4);
            unint64_t v74 = v130;
          }
          unint64_t v136 = v74;
          int v137 = 0;
          LODWORD(v131) = v70;
          int v132 = 0;
          sub_1CC738034((void *)a3, 124, &v136, (int *)&v131);
          int v70 = *(_DWORD *)(*(void *)(v76 + 32) + 4);
        }
        if (v57 != 1)
        {
          unint64_t v77 = llvm::getLLTForType(v126, *(llvm::Type **)(a1 + 880), v69);
          *(void *)&long long v131 = v77;
          DWORD2(v131) = 0;
          __int16 v78 = (llvm::LLVMContext *)(unsigned __int16)(v77 >> 3);
          long long v79 = (llvm::LLVMContext *)(unsigned __int16)(v77 >> 19);
          if ((v77 & 2) == 0) {
            long long v79 = (llvm::LLVMContext *)(v77 >> 19);
          }
          if ((v77 & 4) != 0) {
            __int16 v78 = v79;
          }
          if (v77) {
            unsigned int v80 = (llvm::LLVMContext *)(v77 >> 3);
          }
          else {
            unsigned int v80 = v78;
          }
          unint64_t v81 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a3 + 8), v80);
          uint64_t v82 = llvm::ConstantInt::get(v81, v57, (const llvm::APInt *)1);
          uint64_t v83 = (*(uint64_t (**)(uint64_t, long long *, void *))(*(void *)a3 + 16))(a3, &v131, v82);
          unint64_t v136 = v130;
          int v137 = 0;
          LODWORD(v131) = v70;
          int v132 = 0;
          uint64_t v133 = v83;
          uint64_t v134 = v84;
          int v135 = 1;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a3 + 32))(a3, 47, &v136, 1, &v131, 2, 0);
          int v70 = *(_DWORD *)(*(void *)(v85 + 32) + 4);
        }
        unint64_t v136 = v127;
        int v137 = 0;
        LODWORD(v131) = v12;
        int v132 = 0;
        LODWORD(v133) = v70;
        int v135 = 0;
        (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a3 + 32))(a3, 193, &v136, 1, &v131, 2, 0);
        unint64_t v37 = 0;
        int v12 = *(_DWORD *)(*(void *)(v86 + 32) + 4);
      }
      else
      {
        unsigned int v72 = *((_DWORD *)v39 + 8);
        if (v72 > 0x40) {
          uint64_t v73 = *(void *)v39[3];
        }
        else {
          uint64_t v73 = (uint64_t)(v39[3] << -(char)v72) >> -(char)v72;
        }
        v37 += v73 * v57;
      }
    }
    else
    {
      if (v39) {
        BOOL v41 = *((unsigned char *)v39 + 16) == 16;
      }
      else {
        BOOL v41 = 0;
      }
      if (!v41) {
        unsigned int v39 = llvm::Constant::getAggregateElement((llvm::Constant *)v39, 0);
      }
      uint64_t v44 = (unsigned int *)v39[3];
      uint64_t v43 = (unsigned int *)(v39 + 3);
      int v42 = v44;
      if (v43[2] < 0x41) {
        int v42 = v43;
      }
      uint64_t v45 = *v42;
      v37 += *((void *)llvm::DataLayout::getStructLayout(*(llvm::DataLayout **)(a1 + 880), v40) + v45 + 2);
    }
    sub_1CB8460E4((uint64_t)&v128);
    uint64_t v36 = v128;
  }
  while (v128 != v38);
  if (!v37)
  {
    int v4 = v124;
LABEL_109:
    uint64_t v98 = (int *)sub_1CC6EF0A4(a1, v4);
    if (v99) {
      int v100 = *v98;
    }
    else {
      int v100 = 0;
    }
    LODWORD(v136) = v100;
    int v137 = 1;
    LODWORD(v131) = v12;
    int v132 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a3 + 32))(a3, 19, &v136, 1, &v131, 1, 0);
  }
  *(void *)&long long v131 = v130;
  DWORD2(v131) = 0;
  int v88 = (llvm::LLVMContext *)(unsigned __int16)(v130 >> 3);
  uint64_t v89 = (llvm::LLVMContext *)(unsigned __int16)(v130 >> 19);
  if ((v130 & 2) == 0) {
    uint64_t v89 = (llvm::LLVMContext *)(v130 >> 19);
  }
  if ((v130 & 4) != 0) {
    int v88 = v89;
  }
  if (v130) {
    char v90 = (llvm::LLVMContext *)(v130 >> 3);
  }
  else {
    char v90 = v88;
  }
  uint64_t v91 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a3 + 8), v90);
  unsigned int v92 = llvm::ConstantInt::get(v91, v37, (const llvm::APInt *)1);
  (*(void (**)(uint64_t, long long *, void *))(*(void *)a3 + 16))(a3, &v131, v92);
  uint64_t v94 = v93;
  uint64_t v95 = (int *)sub_1CC6EF0A4(a1, v124);
  if (v96) {
    int v97 = *v95;
  }
  else {
    int v97 = 0;
  }
  int v102 = *(_DWORD *)(*(void *)(v94 + 32) + 4);
  LODWORD(v136) = v97;
  int v137 = 1;
  LODWORD(v131) = v12;
  int v132 = 0;
  LODWORD(v133) = v102;
  int v135 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a3 + 32))(a3, 193, &v136, 1, &v131, 2, 0);
}

void sub_1CC6F66DC(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
  v115[2] = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a2 + 20);
  uint64_t v5 = v4 & 0x7FFFFFF;
  int v6 = (void *)(a2 - 32 * v5);
  if (*(unsigned __int8 *)(v6[4] + 16) - 11 < 2) {
    return;
  }
  unsigned int v7 = a4;
  unint64_t v113 = v115;
  uint64_t v114 = 0x300000000;
  int v11 = *(unsigned __int8 *)(a2 + 16);
  if (v11 != 84)
  {
    if (v11 == 39) {
      uint64_t v12 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else {
      uint64_t v12 = 2;
    }
    unsigned int v7 = a4;
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_142:
    uint64_t v100 = *(v6 - 1);
    if ((v100 & 0xFFFFFFFF0) != 0) {
      uint64_t v13 = (*((_DWORD *)v6 - 3) - *(_DWORD *)((char *)v6 - v100));
    }
    else {
      uint64_t v13 = 0;
    }
    unsigned int v7 = a4;
    goto LABEL_5;
  }
  uint64_t v12 = 0;
  if (v4 < 0) {
    goto LABEL_142;
  }
LABEL_4:
  uint64_t v13 = 0;
LABEL_5:
  if (v6 + 4 == (void *)(a2 - 32 * v12 - 32 * v13 - 32))
  {
    unsigned int v23 = 0;
    unsigned int v15 = -1;
    unsigned int v24 = v115;
    goto LABEL_26;
  }
  uint64_t v14 = 32 * v5 - 32 * v12 - 32 * v13 - 64;
  unsigned int v15 = -1;
  do
  {
    unsigned int v16 = (int *)sub_1CC6EF0A4(a1, *v6);
    if (!v17)
    {
      int v18 = 0;
LABEL_20:
      *(void *)&long long v111 = 0;
      goto LABEL_21;
    }
    int v18 = *v16;
    if ((*v16 & 0x80000000) == 0) {
      goto LABEL_20;
    }
    uint64_t v19 = *(void *)(a1 + 872);
    if ((v18 & 0x7FFFFFFFu) >= *(_DWORD *)(v19 + 432)) {
      goto LABEL_20;
    }
    *(void *)&long long v111 = *(void *)(*(void *)(v19 + 424) + 8 * (v18 & 0x7FFFFFFF));
    if ((v111 & 0xFFFFFFFFFFFFFFF9) != 0 && (v111 & 6) == 2)
    {
      unsigned int v22 = sub_1CB8F1DC4((unint64_t *)&v111);
      if (v21 == 1) {
      if (v15 >= v22)
      }
        unsigned int v15 = v22;
    }
LABEL_21:
    if (v114 >= (unint64_t)HIDWORD(v114)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)v113 + v114) = v18;
    unsigned int v23 = v114 + 1;
    LODWORD(v114) = v114 + 1;
    v6 += 4;
    v14 -= 32;
  }
  while (v14);
  unsigned int v24 = v113;
LABEL_26:
  uint64_t v25 = v23 - 1;
  int v26 = *((_DWORD *)v24 + v25);
  if ((v26 & 0x80000000) == 0
    || (uint64_t v27 = *(void *)(a1 + 872), v28 = v26 & 0x7FFFFFFF, v28 >= *(_DWORD *)(v27 + 432))
    || *(void *)(*(void *)(v27 + 424) + 8 * v28) != ((8 * v15) | 1))
  {
    uint64_t v109 = (unsigned __int8 *)((8 * v15) | 1);
    int v110 = 0;
    LODWORD(v111) = *((_DWORD *)v24 + v25);
    LODWORD(v112) = 0;
    sub_1CC738034(a3, 126, (unint64_t *)&v109, (int *)&v111);
    *((_DWORD *)v24 + v25) = *(_DWORD *)(*(void *)(v29 + 32) + 4);
  }
  uint64_t v30 = (llvm::MachineFunction *)a3[1];
  uint64_t v31 = *(void *)(a3[2] + 8) + 48 * v7;
  int v32 = (unsigned __int8 *)a3[4];
  uint64_t v109 = v32;
  if (v32) {
    llvm::MetadataTracking::track((uint64_t)&v109, v32, 2);
  }
  uint64_t v33 = llvm::MachineFunction::CreateMachineInstr(v30, v31, &v109, 0);
  if (v109)
  {
    int v95 = *v109;
    if ((v95 - 4) > 0x1E)
    {
      if ((v95 - 3) >= 0xFFFFFFFE) {
        uint64_t v101 = v109;
      }
      else {
        uint64_t v101 = 0;
      }
      if ((v95 - 3) < 0xFFFFFFFE)
      {
        if (v95 == 3) {
          *((void *)v109 + 1) = 0;
        }
        goto LABEL_33;
      }
      unint64_t v97 = (unint64_t)(v101 + 8);
    }
    else
    {
      if ((v109[1] & 0x7F) != 2 && !*((_DWORD *)v109 + 3)) {
        goto LABEL_33;
      }
      uint64_t v96 = *((void *)v109 + 2);
      if ((v96 & 4) == 0) {
        goto LABEL_33;
      }
      unint64_t v97 = v96 & 0xFFFFFFFFFFFFFFF8;
      if (!v97) {
        goto LABEL_33;
      }
    }
    *(void *)&long long v111 = &v109;
    sub_1CC5FA668(v97 + 16, &v111);
  }
LABEL_33:
  uint64_t v34 = (unint64_t *)a3[6];
  uint64_t v35 = *(void *)(a3[5] + 40);
  *((void *)v33 + 3) = v35;
  uint64_t v36 = *(void *)(v35 + 32);
  uint64_t v37 = *((unsigned int *)v33 + 10);
  if (v37)
  {
    uint64_t v70 = *((void *)v33 + 4);
    uint64_t v71 = *(void *)(v36 + 40);
    uint64_t v72 = 32 * v37;
    do
    {
      if (!*(unsigned char *)v70)
      {
        uint64_t v73 = *(unsigned int *)(v70 + 4);
        if ((int)v73 >= 0) {
          unint64_t v74 = (uint64_t *)(*(void *)(v71 + 272) + 8 * v73);
        }
        else {
          unint64_t v74 = (uint64_t *)(*(void *)(v71 + 24) + 16 * (v73 & 0x7FFFFFFF) + 8);
        }
        uint64_t v75 = *v74;
        if (*v74)
        {
          uint64_t v76 = *(void *)(v75 + 16);
          *(void *)(v75 + 16) = v70;
          *(void *)(v70 + 16) = v76;
          if (*(unsigned char *)(v70 + 3))
          {
            *(void *)(v70 + 24) = v75;
          }
          else
          {
            *(void *)(v70 + 24) = 0;
            unint64_t v74 = (uint64_t *)(v76 + 24);
          }
        }
        else
        {
          *(void *)(v70 + 16) = v70;
          *(void *)(v70 + 24) = 0;
        }
        *unint64_t v74 = v70;
      }
      v70 += 32;
      v72 -= 32;
    }
    while (v72);
  }
  uint64_t v38 = *(void *)(v36 + 728);
  if (v38) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v38 + 24))(v38, v33);
  }
  unint64_t v39 = *v34 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v33 = v39 | *(void *)v33 & 7;
  *((void *)v33 + 1) = v34;
  *(void *)(v39 + 8) = v33;
  *uint64_t v34 = *v34 & 7 | (unint64_t)v33;
  uint64_t v40 = a3[7];
  if (v40) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v40 + 24))(v40, v33);
  }
  if (v114)
  {
    BOOL v41 = (int *)v113;
    uint64_t v42 = 4 * v114;
    do
    {
      int v43 = *v41++;
      *((void *)&v111 + 1) = 0;
      LODWORD(v111) = 0;
      DWORD1(v111) = v43;
      long long v112 = 0uLL;
      llvm::MachineInstr::addOperand(v33, v30, (const llvm::MachineOperand *)&v111);
      v42 -= 4;
    }
    while (v42);
  }
  int v44 = *(unsigned __int8 *)(a2 + 16);
  if (v44 == 84)
  {
    uint64_t v45 = 0;
  }
  else if (v44 == 39)
  {
    uint64_t v45 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v45 = 2;
  }
  int v46 = *(_DWORD *)(a2 + 20);
  if (v46 < 0 && (uint64_t v98 = a2 - 32 * (v46 & 0x7FFFFFF), v99 = *(void *)(v98 - 8), (v99 & 0xFFFFFFFF0) != 0))
  {
    uint64_t v48 = -(uint64_t)(v46 & 0x7FFFFFF);
    int v47 = *(_DWORD *)(v98 - 12) - *(_DWORD *)(v98 - v99);
  }
  else
  {
    int v47 = 0;
    uint64_t v48 = -(uint64_t)(v46 & 0x7FFFFFF);
  }
  unsigned int v49 = a4;
  uint64_t v50 = *(void *)(a2
                  + 32 * v48
                  + 32
                  * (((-32 * v45 + 32 * (unint64_t)-v47 - 32 * v48 - 32) >> 5) - 1));
  unint64_t v51 = (unsigned int *)(v50 + 24);
  if (*(_DWORD *)(v50 + 32) >= 0x41u) {
    unint64_t v51 = *(unsigned int **)v51;
  }
  uint64_t v52 = *v51;
  if (!sub_1CC581858(a2))
  {
    if (sub_1CC706D94(a2))
    {
      uint64_t v57 = *(void *)(a2 + 64);
      if (!v57 || (unsigned int v58 = *(_DWORD *)(v57 + 8), v58 < 3))
      {
        char v66 = 0;
        goto LABEL_63;
      }
      char v59 = *(llvm::AttributeSetNode **)(v57 + 56);
      if (v59)
      {
        LOWORD(v59) = llvm::AttributeSetNode::getAlignment(v59);
        int v60 = BYTE1(v59);
      }
      else
      {
        int v60 = 0;
      }
      unsigned int v79 = v59 | (v60 << 8);
      if (v79 >= 0x100) {
        char v66 = v79;
      }
      else {
        char v66 = 0;
      }
    }
    else
    {
      BOOL v61 = sub_1CC5818AC(a2);
      uint64_t v57 = *(void *)(a2 + 64);
      if (!v57)
      {
        char v66 = 0;
        int v67 = 0;
        LOBYTE(v68) = 0;
        char v69 = 0;
        unsigned int v49 = a4;
        if (!v61) {
          goto LABEL_110;
        }
        goto LABEL_107;
      }
      unsigned int v58 = *(_DWORD *)(v57 + 8);
      if (v58 < 3)
      {
        int v63 = 0;
        LOBYTE(v62) = 0;
      }
      else
      {
        __int16 v62 = *(llvm::AttributeSetNode **)(v57 + 56);
        if (v62)
        {
          LOWORD(v62) = llvm::AttributeSetNode::getAlignment(v62);
          int v63 = BYTE1(v62);
        }
        else
        {
          int v63 = 0;
        }
      }
      unsigned int v80 = v62 | (v63 << 8);
      if (v80 >= 0x100) {
        char v66 = v80;
      }
      else {
        char v66 = 0;
      }
      if (!v61)
      {
        char v69 = 0;
        unsigned int v49 = a4;
        goto LABEL_110;
      }
    }
    if (v58 >= 4)
    {
      unint64_t v68 = *(llvm::AttributeSetNode **)(v57 + 64);
      unsigned int v49 = a4;
      if (v68)
      {
        LOWORD(v68) = llvm::AttributeSetNode::getAlignment(v68);
        int v67 = BYTE1(v68);
      }
      else
      {
        int v67 = 0;
      }
      goto LABEL_107;
    }
LABEL_63:
    int v67 = 0;
    LOBYTE(v68) = 0;
    unsigned int v49 = a4;
LABEL_107:
    unsigned int v81 = v68 | (v67 << 8);
    if (v81 >= 0x100) {
      char v69 = v81;
    }
    else {
      char v69 = 0;
    }
    goto LABEL_110;
  }
  uint64_t v53 = *(void *)(a2 + 64);
  if (!v53)
  {
    int v64 = 0;
    LOBYTE(v65) = 0;
    char v66 = 0;
    goto LABEL_89;
  }
  unsigned int v54 = *(_DWORD *)(v53 + 8);
  if (v54 < 3)
  {
    int v64 = 0;
    LOBYTE(v65) = 0;
    char v66 = 0;
LABEL_67:
    unsigned int v49 = a4;
    goto LABEL_89;
  }
  unint64_t v55 = *(llvm::AttributeSetNode **)(v53 + 56);
  if (v55)
  {
    LOWORD(v55) = llvm::AttributeSetNode::getAlignment(v55);
    int v56 = BYTE1(v55);
  }
  else
  {
    int v56 = 0;
  }
  unsigned int v77 = v55 | (v56 << 8);
  if (v77 <= 0x100) {
    char v66 = 0;
  }
  else {
    char v66 = v77;
  }
  if (v54 < 4)
  {
    int v64 = 0;
    LOBYTE(v65) = 0;
    goto LABEL_67;
  }
  int v65 = *(llvm::AttributeSetNode **)(v53 + 64);
  unsigned int v49 = a4;
  if (v65)
  {
    LOWORD(v65) = llvm::AttributeSetNode::getAlignment(v65);
    int v64 = BYTE1(v65);
  }
  else
  {
    int v64 = 0;
  }
LABEL_89:
  unsigned int v78 = v65 | (v64 << 8);
  if (v78 <= 0x100) {
    char v69 = 0;
  }
  else {
    char v69 = v78;
  }
LABEL_110:
  if (v49 != 235)
  {
    BOOL v82 = (*(_WORD *)(a2 + 18) & 3u) - 1 >= 2;
    LODWORD(v111) = 1;
    uint64_t v83 = !v82;
    *((void *)&v111 + 1) = 0;
    *(void *)&long long v112 = v83;
    llvm::MachineInstr::addOperand(v33, v30, (const llvm::MachineOperand *)&v111);
  }
  __int16 v84 = 4 * (v52 != 0);
  uint64_t v85 = *(void *)(a1 + 864);
  uint64_t v86 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v106[0] = v86 & 0xFFFFFFFFFFFFFFFBLL;
  v106[1] = 0;
  char v108 = 0;
  if (v86)
  {
    uint64_t v87 = *(void *)v86;
    unsigned int v88 = *(_DWORD *)(*(void *)v86 + 8);
    if ((v88 & 0xFE) == 0x12) {
      unsigned int v88 = *(_DWORD *)(**(void **)(v87 + 16) + 8);
    }
    LODWORD(v86) = v88 >> 8;
  }
  int v107 = v86;
  long long v111 = 0u;
  long long v112 = 0u;
  MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v85, (uint64_t)v106, v84 | 2u, 1, v66, &v111, 0, 1, 0, 0, 0);
  llvm::MachineInstr::addMemOperand(v33, v30, MachineMemOperand);
  if (v49 != 237)
  {
    uint64_t v90 = *(void *)(a1 + 864);
    uint64_t v91 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    v103[0] = v91 & 0xFFFFFFFFFFFFFFFBLL;
    v103[1] = 0;
    char v105 = 0;
    if (v91)
    {
      uint64_t v92 = *(void *)v91;
      unsigned int v93 = *(_DWORD *)(*(void *)v91 + 8);
      if ((v93 & 0xFE) == 0x12) {
        unsigned int v93 = *(_DWORD *)(**(void **)(v92 + 16) + 8);
      }
      LODWORD(v91) = v93 >> 8;
    }
    int v104 = v91;
    long long v111 = 0u;
    long long v112 = 0u;
    uint64_t v94 = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v90, (uint64_t)v103, v84 | 1u, 1, v69, &v111, 0, 1, 0, 0, 0);
    llvm::MachineInstr::addMemOperand(v33, v30, v94);
  }
  if (v113 != v115) {
    free(v113);
  }
}

uint64_t sub_1CC6F6FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (_DWORD *)sub_1CC6EF0A4(a1, a2);
  v17[0] = *v8;
  v17[2] = 1;
  v17[4] = v8[1];
  v17[6] = 1;
  int v9 = (int *)sub_1CC6EF0A4(a1, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
  if (v10) {
    int v11 = *v9;
  }
  else {
    int v11 = 0;
  }
  v16[0] = v11;
  v16[4] = 0;
  uint64_t v12 = (int *)sub_1CC6EF0A4(a1, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
  if (v13) {
    int v14 = *v12;
  }
  else {
    int v14 = 0;
  }
  v16[6] = v14;
  v16[10] = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a4 + 32))(a4, a3, v17, 2, v16, 2, 0);
}

uint64_t sub_1CC6F70D4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  v83[16] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = sub_1CC6EF0A4(a1, a2);
  uint64_t v69 = v8;
  uint64_t v70 = v7;
  unsigned int v81 = v83;
  uint64_t v82 = 0x800000000;
  int v78 = 0;
  int v9 = *(_DWORD *)(a2 + 20);
  uint64_t v10 = (const llvm::Value **)(a2 - 32 * (v9 & 0x7FFFFFF));
  int v11 = *(unsigned __int8 *)(a2 + 16);
  if (v11 == 84)
  {
    uint64_t v12 = 0;
  }
  else if (v11 == 39)
  {
    uint64_t v12 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v12 = 2;
  }
  if (v9 < 0 && (uint64_t v66 = (uint64_t)*(v10 - 1), (v66 & 0xFFFFFFFF0) != 0)) {
    uint64_t v13 = (*((_DWORD *)v10 - 3) - *(_DWORD *)((char *)v10 - v66));
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = a2 - 32 * v12 - 32 * v13 - 32;
  if (v10 != (const llvm::Value **)v14)
  {
    unsigned int VRegDefAt = 0;
    unsigned int v16 = (llvm::SwiftErrorValueTracking *)(a1 + 712);
    uint64_t v3 = "";
    while (1)
    {
      int v17 = (*(uint64_t (**)(void))(**(void **)(a1 + 248) + 24))(*(void *)(a1 + 248));
      uint64_t v19 = *v10;
      if (!v17) {
        break;
      }
      int v20 = *((unsigned __int8 *)v19 + 16);
      if (v19) {
        BOOL v21 = v20 == 21;
      }
      else {
        BOOL v21 = 0;
      }
      if (v21)
      {
        uint64_t v35 = *(void *)(*((void *)v19 + 3) + 112);
        if (!v35) {
          break;
        }
        unsigned int v36 = *((_DWORD *)v19 + 8) + 2;
        if (v36 >= *(_DWORD *)(v35 + 8)) {
          break;
        }
        uint64_t v40 = *(void *)(v35 + 8 * v36 + 40);
        if (!v40 || (*(char *)(v40 + 19) & 0x80000000) == 0) {
          break;
        }
      }
      else if (v20 != 59 || (*((_WORD *)v19 + 9) & 0x80) == 0)
      {
        break;
      }
      unint64_t v68 = v16;
      unint64_t LLTForType = llvm::getLLTForType(*(llvm **)v19, *(llvm::Type **)(a1 + 880), v18);
      uint64_t v22 = *(void *)(a1 + 872);
      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v22, "", 0);
      unint64_t v24 = IncompleteVirtualRegister & 0x7FFFFFFF;
      *(void *)(*(void *)(v22 + 24) + 16 * v24) = 4;
      unint64_t v25 = *(unsigned int *)(v22 + 432);
      if (v24 >= v25)
      {
        unint64_t v26 = v24 + 1;
        uint64_t v27 = *(void *)(v22 + 440);
        if (v24 >= *(unsigned int *)(v22 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v28 = *(_DWORD *)(v22 + 432);
        if (v26 != v25)
        {
          uint64_t v29 = (void *)(*(void *)(v22 + 424) + 8 * v25);
          uint64_t v30 = ~v24 + v25;
          do
            *v29++ = v27;
          while (!__CFADD__(v30++, 1));
          int v28 = *(_DWORD *)(v22 + 432);
        }
        *(_DWORD *)(v22 + 432) = v28 + v26 - v25;
      }
      *(void *)(*(void *)(v22 + 424) + 8 * v24) = LLTForType;
      uint64_t v32 = *(void *)(v22 + 8);
      if (v32) {
        (*(void (**)(uint64_t))(*(void *)v32 + 24))(v32);
      }
      int v78 = IncompleteVirtualRegister;
      LODWORD(v76) = IncompleteVirtualRegister;
      LODWORD(v77) = 1;
      unsigned int v16 = v68;
      LODWORD(v74) = llvm::SwiftErrorValueTracking::getOrCreateVRegUseAt(v68, a2, *(const llvm::MachineBasicBlock **)(a3 + 40), *v10);
      LODWORD(v75) = 0;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, void))(*(void *)a3 + 32))(a3, 19, &v76, 1, &v74, 1, 0);
      int v33 = v82;
      uint64_t v3 = "";
      if (v82 >= HIDWORD(v82))
      {
        sub_1CD4C2394((uint64_t)&v81, (uint64_t)&v78, 1);
      }
      else
      {
        uint64_t v34 = (char *)v81 + 16 * v82;
        *uint64_t v34 = &v78;
        v34[1] = 1;
        LODWORD(v82) = v33 + 1;
      }
      unsigned int VRegDefAt = llvm::SwiftErrorValueTracking::getOrCreateVRegDefAt(v68, a2, *(const llvm::MachineBasicBlock **)(a3 + 40), *v10);
LABEL_31:
      v10 += 4;
      if (v10 == (const llvm::Value **)v14) {
        goto LABEL_40;
      }
    }
    uint64_t v38 = sub_1CC6EF0A4(a1, v19);
    if (v82 >= (unint64_t)HIDWORD(v82)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v39 = (uint64_t *)((char *)v81 + 16 * v82);
    uint64_t *v39 = v38;
    v39[1] = v37;
    LODWORD(v82) = v82 + 1;
    goto LABEL_31;
  }
  unsigned int VRegDefAt = 0;
LABEL_40:
  if (!sub_1CC646CF4(a2, 7)
    || (sub_1CD615F38((_DWORD *)a2, "ptrauth", 7uLL, &v74),
        int v56 = *(const char ***)v74,
        uint64_t v57 = *(const llvm::Value **)(v74 + 32),
        unint64_t v76 = llvm::GlobalPtrAuthInfo::analyze(*(uint64_t ****)(a2 - 32), v58),
        uint64_t v77 = v59,
        (_BYTE)v59)
    && (llvm::GlobalPtrAuthInfo::isCompatibleWith((llvm::GlobalPtrAuthInfo *)&v76, (const llvm::Value *)v56, v57, *(const llvm::DataLayout **)(a1 + 880), v60, v61, v62) & 1) != 0)
  {
    char v41 = 0;
    LOBYTE(v42) = 0;
    unsigned int v43 = 0;
  }
  else
  {
    int v63 = (int *)sub_1CC6EF0A4(a1, v57);
    if (v64) {
      int v42 = *v63;
    }
    else {
      int v42 = 0;
    }
    int v65 = v56 + 3;
    if (*((_DWORD *)v56 + 8) >= 0x41u) {
      int v65 = (const char **)*v65;
    }
    uint64_t v3 = *v65;
    unsigned int v43 = v42 & 0xFFFFFF00;
    char v41 = 1;
  }
  if (*(unsigned char *)(a2 + 16) == 84)
  {
    uint64_t v44 = *****(void *****)(a1 + 904);
    if (*(void *)(v44 + 128)
      || (*(unsigned int (**)(void))(**(void **)(v44 + 72) + 48))(*(void *)(v44 + 72)))
    {
      uint64_t v45 = *(void *)(*(void *)(a2 + 40) + 56);
      int v46 = *(uint64_t **)(a1 + 8);
      uint64_t v47 = *v46;
      uint64_t v48 = v46[1];
      if (v47 == v48)
      {
LABEL_48:
        uint64_t v49 = 0;
      }
      else
      {
        while (*(char **)v47 != llvm::TargetLibraryInfoWrapperPass::ID)
        {
          v47 += 16;
          if (v47 == v48) {
            goto LABEL_48;
          }
        }
        uint64_t v49 = *(void *)(v47 + 8);
      }
      uint64_t v50 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v49 + 96))(v49, llvm::TargetLibraryInfoWrapperPass::ID);
      sub_1CBF5AC74(v50, v45);
    }
  }
  uint64_t v51 = *(void *)(a1 + 248);
  int v71 = v43 | v42;
  uint64_t v72 = v3;
  char v73 = v41;
  v79[0] = &unk_1F261BFF8;
  v79[1] = a1;
  v79[2] = a2;
  unsigned int v80 = v79;
  uint64_t v52 = sub_1CC6E5F88(v51, a3, a2, v70, v69, (uint64_t)v81, v82, VRegDefAt, (uint64_t)&v71, (uint64_t)v79);
  if (v80 == v79)
  {
    (*(void (**)(void *))(v79[0] + 32))(v79);
    if (!v52) {
      goto LABEL_63;
    }
    goto LABEL_57;
  }
  if (v80) {
    (*(void (**)(void))(*v80 + 40))();
  }
  if (v52)
  {
LABEL_57:
    uint64_t v53 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 864) + 16) + 104))(*(void *)(*(void *)(a1 + 864) + 16));
    unint64_t v54 = **(void **)(a3 + 48) & 0xFFFFFFFFFFFFFFF8;
    if (!v54 || (*(unsigned char *)v54 & 4) == 0)
    {
      while ((*(_WORD *)(v54 + 44) & 4) != 0)
        unint64_t v54 = *(void *)v54 & 0xFFFFFFFFFFFFFFF8;
    }
    *(unsigned char *)(a1 + 1761) = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 1136))(v53);
  }
LABEL_63:
  if (v81 != v83) {
    free(v81);
  }
  return v52;
}

uint64_t sub_1CC6F7808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v6 = v5;
  unint64_t v8 = v7;
  uint64_t v9 = v4;
  uint64_t v655 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v4 + 864) + 8) + 56))(*(void *)(*(void *)(v4 + 864) + 8));
  uint64_t v11 = *(void *)(v8 - 32);
  if (!v11) {
    goto LABEL_5;
  }
  if (*(unsigned char *)(v11 + 16) || *(void *)(v11 + 24) != *(void *)(v8 + 72))
  {
    uint64_t v11 = 0;
LABEL_5:
    char v12 = 1;
    goto LABEL_6;
  }
  if ((*(_DWORD *)(v11 + 32) & 0x300) == 0x100) {
    return 0;
  }
  if (*(_DWORD *)(*(void *)(*(void *)(v9 + 864) + 8) + 484) == 15)
  {
    char hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(*(llvm::GlobalValue **)(v8 - 32));
    char v12 = 0;
    uint64_t result = 0;
    if (hasExternalWeakLinkage) {
      return result;
    }
  }
  else
  {
    char v12 = 0;
  }
LABEL_6:
  if (sub_1CC646CF4(v8, 3)) {
    return 0;
  }
  if (*(unsigned char *)(*(void *)(v8 - 32) + 16) == 24)
  {
    return sub_1CD615E00(v9, v8, v6);
  }
  else
  {
    llvm::diagnoseDontCall(v8, v13);
    if ((v12 & 1) == 0 && (*(unsigned char *)(v11 + 33) & 0x20) != 0)
    {
      uint64_t v19 = *(unsigned int *)(v11 + 36);
      if (v10 && v19 == 0)
      {
        uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, v11);
        int v21 = *(_DWORD *)(v11 + 32) & 0x2000;
      }
      else
      {
        int v21 = 1;
      }
      if (v21 && v19)
      {
        if (*(unsigned char *)(v8 + 16) == 84)
        {
          uint64_t v22 = *(void *)(v8 - 32);
          if (v22)
          {
            if (!*(unsigned char *)(v22 + 16)
              && *(void *)(v22 + 24) == *(void *)(v8 + 72)
              && (*(unsigned char *)(v22 + 33) & 0x20) != 0
              && (*(_DWORD *)(v22 + 36) - 194) <= 6)
            {
              uint64_t v23 = *****(void *****)(v9 + 904);
              if (*(void *)(v23 + 128)
                || (*(unsigned int (**)(void))(**(void **)(v23 + 72) + 48))(*(void *)(v23 + 72)))
              {
                uint64_t v24 = *(void *)(*(void *)(v8 + 40) + 56);
                unint64_t v25 = *(uint64_t **)(v9 + 8);
                uint64_t v26 = *v25;
                uint64_t v27 = v25[1];
                if (v26 == v27)
                {
LABEL_37:
                  uint64_t v28 = 0;
                }
                else
                {
                  while (*(char **)v26 != llvm::TargetLibraryInfoWrapperPass::ID)
                  {
                    v26 += 16;
                    if (v26 == v27) {
                      goto LABEL_37;
                    }
                  }
                  uint64_t v28 = *(void *)(v26 + 8);
                }
                uint64_t v29 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v28 + 96))(v28, llvm::TargetLibraryInfoWrapperPass::ID);
                sub_1CBF5AC74(v29, v24);
              }
            }
          }
        }
        if ((int)v19 > 169)
        {
          if ((int)v19 <= 238)
          {
            switch((int)v19)
            {
              case 192:
LABEL_883:
                uint64_t v30 = v19;
                goto LABEL_197;
              case 193:
                uint64_t v30 = 188;
                goto LABEL_197;
              case 194:
              case 195:
              case 196:
              case 197:
              case 198:
              case 199:
              case 200:
                goto LABEL_76;
              case 201:
                uint64_t v30 = 191;
                goto LABEL_197;
              case 202:
                uint64_t v30 = 187;
                goto LABEL_197;
              case 203:
                uint64_t v30 = 220;
                goto LABEL_197;
              default:
                switch((int)v19)
                {
                  case 170:
                    uint64_t v30 = 201;
                    goto LABEL_197;
                  case 171:
                  case 172:
                  case 173:
                  case 174:
                  case 178:
                  case 179:
                    goto LABEL_76;
                  case 175:
                    uint64_t v30 = 174;
                    goto LABEL_197;
                  case 176:
                    goto LABEL_883;
                  case 177:
                    uint64_t v30 = 175;
                    goto LABEL_197;
                  case 180:
                    uint64_t v30 = 87;
                    goto LABEL_197;
                  case 181:
                    uint64_t v30 = 200;
                    goto LABEL_197;
                  default:
                    if (v19 != 238) {
                      goto LABEL_76;
                    }
                    uint64_t v30 = 170;
                    break;
                }
                goto LABEL_197;
            }
          }
          if ((int)v19 > 279)
          {
            if (v19 == 280)
            {
              uint64_t v30 = 217;
            }
            else
            {
              if (v19 != 296)
              {
                switch((int)v19)
                {
                  case 317:
                    uint64_t v30 = 245;
                    goto LABEL_197;
                  case 318:
                    uint64_t v30 = 247;
                    goto LABEL_197;
                  case 320:
                    uint64_t v30 = 243;
                    goto LABEL_197;
                  case 321:
                    uint64_t v30 = 244;
                    goto LABEL_197;
                  case 323:
                    uint64_t v30 = 246;
                    goto LABEL_197;
                  case 324:
                    uint64_t v30 = 248;
                    goto LABEL_197;
                  case 325:
                    uint64_t v30 = 250;
                    goto LABEL_197;
                  case 326:
                    uint64_t v30 = 251;
                    goto LABEL_197;
                  case 327:
                    uint64_t v30 = 252;
                    goto LABEL_197;
                  case 328:
                    uint64_t v30 = 253;
                    goto LABEL_197;
                  case 329:
                    uint64_t v30 = 249;
                    goto LABEL_197;
                  default:
                    goto LABEL_76;
                }
              }
              uint64_t v30 = 85;
            }
          }
          else
          {
            switch((int)v19)
            {
              case 252:
                uint64_t v30 = 194;
                break;
              case 253:
              case 254:
              case 255:
              case 257:
                goto LABEL_76;
              case 256:
                uint64_t v30 = 89;
                break;
              case 258:
                uint64_t v30 = 219;
                break;
              case 259:
                uint64_t v30 = 86;
                break;
              case 260:
                uint64_t v30 = 88;
                break;
              default:
                if (v19 == 239)
                {
                  uint64_t v30 = 171;
                  break;
                }
                if (v19 != 273) {
                  goto LABEL_76;
                }
                uint64_t v30 = 216;
                break;
            }
          }
LABEL_197:
          *(void *)&long long v630 = &v631;
          *((void *)&v630 + 1) = 0x400000000;
          int v121 = *(_DWORD *)(v8 + 20);
          uint64_t v122 = v121 & 0x7FFFFFF;
          unint64_t v123 = (void *)(v8 - 32 * v122);
          int v124 = *(unsigned __int8 *)(v8 + 16);
          if (v124 == 84)
          {
            uint64_t v125 = 0;
          }
          else if (v124 == 39)
          {
            uint64_t v125 = (*(_DWORD *)(v8 + 80) + 1);
          }
          else
          {
            uint64_t v125 = 2;
          }
          if (v121 < 0 && (uint64_t v596 = *(v123 - 1), (v596 & 0xFFFFFFFF0) != 0)) {
            uint64_t v126 = (*((_DWORD *)v123 - 3) - *(_DWORD *)((char *)v123 - v596));
          }
          else {
            uint64_t v126 = 0;
          }
          if (v123 != (void *)(v8 - 32 * v125 - 32 * v126 - 32))
          {
            uint64_t v127 = 32 * v122 - 32 * v125 - 32 * v126 - 32;
            do
            {
              uint64_t v128 = (int *)sub_1CC6EF0A4(v9, *v123);
              if (v129) {
                int v130 = *v128;
              }
              else {
                int v130 = 0;
              }
              LODWORD(v623) = v130;
              LODWORD(v624) = 0;
              if (DWORD2(v630) >= HIDWORD(v630))
              {
                if ((unint64_t)v630 > (unint64_t)&v623
                  || (unint64_t)v630 + 24 * DWORD2(v630) <= (unint64_t)&v623)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v131 = v630 + 24 * DWORD2(v630);
              long long v132 = v623;
              *(void *)(v131 + 16) = v624;
              *(_OWORD *)uint64_t v131 = v132;
              ++DWORD2(v630);
              v123 += 4;
              v127 -= 32;
            }
            while (v127);
          }
          uint64_t v133 = (int *)sub_1CC6EF0A4(v9, v8);
          if (v134) {
            int v135 = *v133;
          }
          else {
            int v135 = 0;
          }
          unsigned int v136 = 0;
          LODWORD(v623) = v135;
          DWORD2(v623) = 1;
          unsigned int v137 = *(unsigned __int8 *)(v8 + 16);
          HIDWORD(v139) = v137 - 41;
          LODWORD(v139) = v137 - 41;
          unsigned int v138 = v139 >> 1;
          if (v138 <= 6 && ((1 << v138) & 0x47) != 0) {
            unsigned int v136 = (*(unsigned char *)(v8 + 17) & 6) << 10;
          }
          if (v137 <= 0x37 && ((1 << v137) & 0xC1800000000000) != 0) {
            unsigned int v136 = v136 & 0xFFFFDFFF | ((((*(unsigned char *)(v8 + 17) & 2) >> 1) & 1) << 13);
          }
          if (sub_1CB845E74(v8))
          {
            int v140 = *(unsigned __int8 *)(v8 + 17) >> 1;
            if (v140 == 127) {
              int v140 = -1;
            }
            v136 |= (8 * v140) & 0x3F0 | ((v140 & 1) << 10);
          }
          (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void, void, uint64_t))(*(void *)v6 + 32))(v6, v30, &v623, 1, v630, DWORD2(v630), v136 | 0x100000000);
LABEL_227:
          uint64_t v141 = (long long *)v630;
          if ((long long *)v630 == &v631) {
            return 1;
          }
          goto LABEL_228;
        }
        if ((int)v19 > 138)
        {
          switch((int)v19)
          {
            case 139:
              uint64_t v30 = 184;
              goto LABEL_197;
            case 140:
              uint64_t v30 = 218;
              goto LABEL_197;
            case 142:
              uint64_t v30 = 166;
              goto LABEL_197;
            case 148:
              uint64_t v30 = 130;
              goto LABEL_197;
            case 149:
              uint64_t v30 = 131;
              goto LABEL_197;
            default:
              goto LABEL_76;
          }
        }
        if ((int)v19 <= 75)
        {
          if ((int)v19 > 74)
          {
            uint64_t v30 = 172;
            goto LABEL_197;
          }
          uint64_t v30 = 212;
          switch((int)v19)
          {
            case 8:
              uint64_t v30 = 213;
              goto LABEL_197;
            case 9:
              goto LABEL_197;
            case 10:
            case 11:
            case 12:
            case 15:
            case 16:
            case 17:
            case 18:
              break;
            case 13:
              uint64_t v30 = 186;
              goto LABEL_197;
            case 14:
              uint64_t v30 = 214;
              goto LABEL_197;
            case 19:
              uint64_t v30 = 185;
              goto LABEL_197;
            default:
              if (v19 == 53)
              {
                uint64_t v30 = 211;
                goto LABEL_197;
              }
              if (v19 == 51)
              {
                uint64_t v30 = 215;
                goto LABEL_197;
              }
              break;
          }
        }
        else if (v19 == 76)
        {
          uint64_t v30 = 173;
          goto LABEL_197;
        }
LABEL_76:
        if ((int)v19 <= 51)
        {
          if ((int)v19 <= 6)
          {
            if (v19 == 1)
            {
              sub_1CC6F1FA0(v9, 199, v8, v6);
              return 1;
            }
            if (v19 != 4) {
              goto LABEL_97;
            }
LABEL_88:
            uint64_t v37 = (int *)sub_1CC6EF0A4(v9, v8);
            if (v38) {
              int v39 = *v37;
            }
            else {
              int v39 = 0;
            }
            LODWORD(v623) = v39;
            DWORD2(v623) = 1;
            uint64_t v87 = (int *)sub_1CC6EF0A4(v9, *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
            if (v88) {
              int v89 = *v87;
            }
            else {
              int v89 = 0;
            }
LABEL_151:
            LODWORD(v630) = v89;
LABEL_152:
            LODWORD(v631) = 0;
            uint64_t v90 = *(void (**)(void, void, void, void, void, void, void))(*(void *)v6 + 32);
            uint64_t v91 = &v623;
            uint64_t v92 = &v630;
            uint64_t v93 = v6;
            uint64_t v94 = 19;
            uint64_t v95 = 0;
          }
          else
          {
            switch(v19)
            {
              case 7:
                return 1;
              case 0x11:
                uint64_t v44 = (int *)sub_1CC6EF0A4(v9, v8);
                if (v45) {
                  int v46 = *v44;
                }
                else {
                  int v46 = 0;
                }
                int v104 = (int *)sub_1CC6EF0A4(v9, *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
                if (v105) {
                  int v106 = *v104;
                }
                else {
                  int v106 = 0;
                }
                unsigned int v107 = 0;
                unsigned int v108 = *(unsigned __int8 *)(v8 + 16);
                HIDWORD(v110) = v108 - 41;
                LODWORD(v110) = v108 - 41;
                unsigned int v109 = v110 >> 1;
                if (v109 <= 6 && ((1 << v109) & 0x47) != 0) {
                  unsigned int v107 = (*(unsigned char *)(v8 + 17) & 6) << 10;
                }
                if (v108 <= 0x37 && ((1 << v108) & 0xC1800000000000) != 0) {
                  unsigned int v107 = v107 & 0xFFFFDFFF | ((((*(unsigned char *)(v8 + 17) & 2) >> 1) & 1) << 13);
                }
                if (sub_1CB845E74(v8))
                {
                  int v111 = *(unsigned __int8 *)(v8 + 17) >> 1;
                  if (v111 == 127) {
                    int v111 = -1;
                  }
                  v107 |= (8 * v111) & 0x3F0 | ((v111 & 1) << 10);
                }
                uint64_t v95 = v107 | 0x100000000;
                LODWORD(v623) = v46;
                DWORD2(v623) = 1;
                LODWORD(v630) = v106;
                LODWORD(v631) = 0;
                uint64_t v90 = *(void (**)(void, void, void, void, void, void, void))(*(void *)v6 + 32);
                uint64_t v91 = &v623;
                uint64_t v92 = &v630;
                uint64_t v93 = v6;
                uint64_t v94 = 178;
                break;
              case 0x12:
                uint64_t v31 = (int *)sub_1CC6EF0A4(v9, v8);
                if (v32) {
                  int v33 = *v31;
                }
                else {
                  int v33 = 0;
                }
                LODWORD(v623) = v33;
                DWORD2(v623) = 1;
                uint64_t v96 = (int *)sub_1CC6EF0A4(v9, *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
                if (v97) {
                  int v98 = *v96;
                }
                else {
                  int v98 = 0;
                }
                unsigned int v99 = 0;
                LODWORD(v630) = v98;
                LODWORD(v631) = 0;
                unsigned int v100 = *(unsigned __int8 *)(v8 + 16);
                HIDWORD(v102) = v100 - 41;
                LODWORD(v102) = v100 - 41;
                unsigned int v101 = v102 >> 1;
                if (v101 <= 6 && ((1 << v101) & 0x47) != 0) {
                  unsigned int v99 = (*(unsigned char *)(v8 + 17) & 6) << 10;
                }
                if (v100 <= 0x37 && ((1 << v100) & 0xC1800000000000) != 0) {
                  unsigned int v99 = v99 & 0xFFFFDFFF | ((((*(unsigned char *)(v8 + 17) & 2) >> 1) & 1) << 13);
                }
                if (sub_1CB845E74(v8))
                {
                  int v103 = *(unsigned __int8 *)(v8 + 17) >> 1;
                  if (v103 == 127) {
                    int v103 = -1;
                  }
                  v99 |= (8 * v103) & 0x3F0 | ((v103 & 1) << 10);
                }
                uint64_t v95 = v99 | 0x100000000;
                uint64_t v90 = *(void (**)(void, void, void, void, void, void, void))(*(void *)v6 + 32);
                uint64_t v91 = &v623;
                uint64_t v92 = &v630;
                uint64_t v93 = v6;
                uint64_t v94 = 179;
                break;
              default:
                goto LABEL_97;
            }
          }
          uint64_t v112 = 1;
LABEL_184:
          v90(v93, v94, v91, 1, v92, v112, v95);
          return 1;
        }
        switch((int)v19)
        {
          case 52:
          case 54:
            uint64_t v200 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32);
            uint64_t v201 = *(unsigned int *)(v200 + 32);
            if (v19 == 54)
            {
              if (v201 > 0x40)
              {
                int v354 = 0;
                int64_t v355 = (unint64_t)(v201 + 63) >> 6;
                do
                {
                  BOOL v356 = v355-- < 1;
                  if (v356) {
                    break;
                  }
                  unint64_t v357 = *(void *)(*(void *)(v200 + 24) + 8 * v355);
                  v354 += __clz(v357);
                }
                while (!v357);
                int v358 = v201 | 0xFFFFFFC0;
                if ((v201 & 0x3F) == 0) {
                  int v358 = 0;
                }
                BOOL v202 = v354 + v358 == v201;
              }
              else
              {
                BOOL v202 = *(void *)(v200 + 24) == 0;
              }
              int v359 = v202;
              BOOL v360 = v359 == 0;
              unsigned int v361 = 207;
            }
            else
            {
              if (v201 > 0x40)
              {
                int v362 = 0;
                int64_t v363 = (unint64_t)(v201 + 63) >> 6;
                do
                {
                  BOOL v356 = v363-- < 1;
                  if (v356) {
                    break;
                  }
                  unint64_t v364 = *(void *)(*(void *)(v200 + 24) + 8 * v363);
                  v362 += __clz(v364);
                }
                while (!v364);
                int v365 = v201 | 0xFFFFFFC0;
                if ((v201 & 0x3F) == 0) {
                  int v365 = 0;
                }
                BOOL v222 = v362 + v365 == v201;
              }
              else
              {
                BOOL v222 = *(void *)(v200 + 24) == 0;
              }
              int v366 = v222;
              BOOL v360 = v366 == 0;
              unsigned int v361 = 209;
            }
            if (v360) {
              uint64_t v367 = v361 + 1;
            }
            else {
              uint64_t v367 = v361;
            }
            char v368 = (int *)sub_1CC6EF0A4(v9, v8);
            if (v369) {
              int v370 = *v368;
            }
            else {
              int v370 = 0;
            }
            LODWORD(v623) = v370;
            DWORD2(v623) = 1;
            unint64_t v371 = (int *)sub_1CC6EF0A4(v9, *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
            if (v372) {
              int v373 = *v371;
            }
            else {
              int v373 = 0;
            }
            LODWORD(v630) = v373;
            LODWORD(v631) = 0;
            uint64_t v90 = *(void (**)(void, void, void, void, void, void, void))(*(void *)v6 + 32);
            uint64_t v91 = &v623;
            uint64_t v92 = &v630;
            uint64_t v93 = v6;
            uint64_t v94 = v367;
            uint64_t v112 = 1;
            goto LABEL_545;
          case 53:
          case 55:
          case 60:
          case 61:
          case 62:
          case 63:
          case 64:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 74:
          case 75:
          case 76:
          case 78:
          case 119:
          case 120:
          case 121:
          case 122:
          case 123:
          case 124:
          case 125:
          case 127:
          case 128:
          case 129:
          case 130:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
          case 136:
          case 137:
          case 138:
          case 139:
          case 140:
          case 141:
          case 142:
          case 144:
          case 145:
          case 147:
          case 148:
          case 149:
          case 150:
          case 151:
          case 152:
          case 153:
          case 154:
          case 155:
          case 156:
          case 157:
          case 158:
          case 159:
          case 160:
          case 161:
          case 162:
          case 165:
          case 169:
          case 170:
          case 171:
          case 172:
          case 174:
          case 175:
          case 176:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 182:
          case 183:
          case 184:
          case 185:
          case 186:
          case 187:
          case 188:
          case 189:
          case 190:
          case 191:
          case 192:
          case 193:
          case 195:
          case 198:
            goto LABEL_97;
          case 56:
            unint64_t v243 = (void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
            int v244 = *(unsigned __int8 **)(*v243 + 24);
            int v245 = *v244;
            if ((v245 - 4) < 0x1C || (v245 - 33) < 2) {
              return 1;
            }
            if (v245 == 32) {
              int v244 = (unsigned __int8 *)**((void **)v244 + 3);
            }
            uint64_t v246 = *((void *)v244 + 16);
            if (!v246) {
              return 1;
            }
            int v247 = *(unsigned __int8 *)(v246 + 16);
            if ((v247 - 11) < 2) {
              return 1;
            }
            if (v247 == 21)
            {
              v588 = *(void **)(v9 + 864);
              uint64_t v589 = *(void *)(*v588 + 112);
              if (v589)
              {
                uint64_t v590 = *(unsigned int *)(v246 + 32);
                if ((v590 + 2) < *(_DWORD *)(v589 + 8))
                {
                  uint64_t v595 = *(void *)(v589 + 8 * (v590 + 2) + 40);
                  if (v595)
                  {
                    if ((*(unsigned char *)(v595 + 19) & 0x40) != 0)
                    {
                      LODWORD(v273) = *(_DWORD *)(*(void *)(v588[5] + 456) + 8 * v590);
                      goto LABEL_847;
                    }
                  }
                }
              }
            }
            else if (v247 == 59 && *(unsigned char *)(*(void *)(v246 - 32) + 16) == 16)
            {
              uint64_t v248 = *(void *)(v246 + 40);
              uint64_t v249 = *(void *)(*(void *)(v248 + 56) + 80);
              uint64_t v250 = v249 ? v249 - 24 : 0;
              if (v248 == v250 && (*(_WORD *)(v246 + 18) & 0x40) == 0)
              {
                uint64_t v251 = *(void *)(v9 + 864);
                uint64_t v252 = *(void *)(v243[4] + 24);
                uint64_t v253 = *(void *)(v243[8] + 24);
                int v254 = sub_1CC6F1754(v9, v246);
                uint64_t v255 = *(unsigned __int8 **)(v8 + 48);
                *(void *)&long long v630 = v252;
                *(void *)&long long v623 = v253;
                int v622 = v254;
                v653 = v255;
                sub_1CD6168D8(v251 + 768, &v630, (uint64_t *)&v623, &v622, (uint64_t *)&v653);
                return 1;
              }
            }
            v591 = (_DWORD *)sub_1CC6EF0A4(v9, v246);
            if (v273) {
              LODWORD(v273) = *v591;
            }
            unint64_t v243 = (void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
LABEL_847:
            uint64_t v270 = *(void *)(v243[4] + 24);
            uint64_t v271 = *(void *)(v243[8] + 24);
            uint64_t v272 = v6;
            goto LABEL_393;
          case 57:
            sub_1CD62CFFC(v6, *(void *)(*(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)) + 24));
            return 1;
          case 58:
            uint64_t v268 = (void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
            uint64_t v269 = *(unsigned __int8 **)(*v268 + 24);
            if (*v269 - 4 >= 0x1F && (uint64_t v416 = *((void *)v269 + 16)) != 0)
            {
              if (*(unsigned __int8 *)(v416 + 16) <= 0x14u)
              {
                sub_1CC7352B8((void *)v6, v416, *(void *)(v268[4] + 24), *(void *)(v268[8] + 24));
              }
              else
              {
                uint64_t v417 = sub_1CC6EF0A4(v9, v416);
                if (v418)
                {
                  v419 = (int *)v417;
                  uint64_t v420 = 4 * v418;
                  do
                  {
                    int v421 = *v419++;
                    unint64_t v422 = v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF);
                    sub_1CC73512C(v6, v421, *(void *)(*(void *)(v422 + 32) + 24), *(void *)(*(void *)(v422 + 64) + 24));
                    v420 -= 4;
                  }
                  while (v420);
                }
              }
            }
            else
            {
              uint64_t v270 = *(void *)(v268[4] + 24);
              uint64_t v271 = *(void *)(v268[8] + 24);
              uint64_t v272 = v6;
              LODWORD(v273) = 0;
LABEL_393:
              sub_1CD62CF8C(v272, v273, v270, v271);
            }
            return 1;
          case 59:
LABEL_235:
            uint64_t v148 = *(void *)(v8 + 64);
            if (!v148) {
              goto LABEL_97;
            }
            if (!*(_DWORD *)(v148 + 8)) {
              goto LABEL_97;
            }
            uint64_t v149 = *(void *)(v148 + 40);
            if (!v149) {
              goto LABEL_97;
            }
            int v150 = *(_DWORD *)(v149 + 40);
            if (!v150) {
              goto LABEL_97;
            }
            uint64_t v151 = *(void *)(v149 + 24);
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_1EBCBE588))
            {
              unint64_t v598 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v598 = 0xFF51AFD7ED558CCDLL;
              }
              qword_1EBCBE580 = v598;
              __cxa_guard_release(&qword_1EBCBE588);
            }
            unint64_t v152 = 0x9DDFEA08EB382D69
                 * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xD478F398F5D9C7F9)) ^ ((0x9DDFEA08EB382D69
                                                                                        * (qword_1EBCBE580 ^ 0xD478F398F5D9C7F9)) >> 47) ^ 0xBA0D95B585B8B58DLL);
            unsigned int v153 = (-348639895 * ((v152 >> 47) ^ v152)) ^ 0x2D636E75;
            int v154 = 1;
            while (2)
            {
              unsigned int v155 = v153 & (v150 - 1);
              uint64_t v156 = v151 + 24 * v155;
              uint64_t v157 = *(void **)v156;
              if (*(void *)v156 == -1)
              {
                if ("trap-func-name" != (char *)-1) {
                  goto LABEL_243;
                }
LABEL_254:
                uint64_t v159 = *(void *)(v156 + 16);
                if (!v159 || !*(_DWORD *)(v159 + 16)) {
                  goto LABEL_97;
                }
                uint64_t v160 = v159 + *(unsigned int *)(v159 + 12) + 25;
                LODWORD(v630) = 0;
                DWORD2(v630) = DWORD2(v630) & 0xFFF00000 | 1;
                long long v631 = 0u;
                uint64_t v633 = 0;
                v634 = v636;
                uint64_t v635 = 0x400000000;
                char v637 = 0;
                v638 = v640;
                uint64_t v639 = 0x400000000;
                v641 = v643;
                uint64_t v642 = 0x200000000;
                v643[1] = 0;
                v644 = v646;
                uint64_t v645 = 0x2000000000;
                v646[1216] = 0;
                char v649 = 0;
                long long v647 = 0u;
                char v648 = 0;
                int v650 = 0;
                char v651 = 1;
                int v652 = 0;
                if (v19 == 302)
                {
                  uint64_t v161 = (unsigned char *)sub_1CC6EF0A4(v9, *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
                  sub_1CB925510((uint64_t)&v623, v161, v162, **(void **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)), 0, 0, 0, 1, 0);
                  sub_1CD615D50((uint64_t)&v644, (unint64_t)&v623);
                  if (v628 != v629) {
                    free(v628);
                  }
                  if (v626 != v627) {
                    free(v626);
                  }
                  if (*((unsigned char **)&v623 + 1) != v625) {
                    free(*((void **)&v623 + 1));
                  }
                }
                *((void *)&v630 + 1) = 9;
                *(void *)&long long v631 = 0;
                *((void *)&v631 + 1) = v160;
                LODWORD(v632) = 0;
                *(void *)&long long v647 = v8;
                LODWORD(v653) = 0;
                sub_1CB925510((uint64_t)&v623, &v653, 1, ***(void ***)v8 + 1576, 0, 0, 0, 1, 0);
                sub_1CD615D9C((uint64_t)&v633, (uint64_t)&v623);
                if (v628 != v629) {
                  free(v628);
                }
                if (v626 != v627) {
                  free(v626);
                }
                if (*((unsigned char **)&v623 + 1) != v625) {
                  free(*((void **)&v623 + 1));
                }
                char v163 = (*(uint64_t (**)(void, uint64_t, long long *))(**(void **)(v9 + 248) + 72))(*(void *)(v9 + 248), v6, &v630);
                int v164 = (char *)v644;
                if (v645)
                {
                  uint64_t v165 = 152 * v645;
                  do
                  {
                    int v166 = &v164[v165];
                    BOOL v167 = *(char **)&v164[v165 - 40];
                    if (&v164[v165 - 24] != v167) {
                      free(v167);
                    }
                    unsigned int v168 = (char *)*((void *)v166 - 9);
                    if (v166 - 56 != v168) {
                      free(v168);
                    }
                    unint64_t v169 = *(char **)&v164[v165 - 144];
                    if (&v164[v165 - 128] != v169) {
                      free(v169);
                    }
                    v165 -= 152;
                  }
                  while (v165);
                  int v164 = (char *)v644;
                }
                if (v164 != (char *)v646) {
                  free(v164);
                }
                if (v641 != v643) {
                  free(v641);
                }
                if (v638 != v640) {
                  free(v638);
                }
                if (v634 == v636)
                {
                  if ((v163 & 1) == 0) {
                    goto LABEL_97;
                  }
                }
                else
                {
                  free(v634);
                  if ((v163 & 1) == 0) {
                    goto LABEL_97;
                  }
                }
                return 1;
              }
              if (v157 == (void *)-2)
              {
                if ("trap-func-name" == (char *)-2) {
                  goto LABEL_254;
                }
              }
              else if (*(void *)(v156 + 8) == 14 {
                     && *v157 == 0x6E75662D70617274
              }
                     && *(void *)((char *)v157 + 6) == 0x656D616E2D636E75)
              {
                goto LABEL_254;
              }
LABEL_243:
              if (v157 != (void *)-1)
              {
                unsigned int v153 = v154 + v155;
                ++v154;
                continue;
              }
              goto LABEL_97;
            }
          case 73:
            TypeInfo = llvm::ExtractTypeInfo(*(llvm **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)), v15);
            v530 = (int *)sub_1CC6EF0A4(v9, v8);
            if (v531) {
              int v532 = *v530;
            }
            else {
              int v532 = 0;
            }
            unsigned int TypeIDFor = llvm::MachineFunction::getTypeIDFor(*(llvm::MachineFunction **)(v9 + 864), TypeInfo);
            LODWORD(v630) = v532;
            DWORD2(v630) = 1;
            unint64_t v559 = TypeIDFor;
            if (v532 < 0 && (uint64_t v560 = *(void *)(v6 + 24), (v532 & 0x7FFFFFFFu) < *(_DWORD *)(v560 + 432)))
            {
              unint64_t v561 = *(void *)(*(void *)(v560 + 424) + 8 * (v532 & 0x7FFFFFFF));
              if (v561)
              {
                unint64_t v562 = (v561 >> 3);
                goto LABEL_798;
              }
              if ((v561 & 4) != 0)
              {
                if ((v561 & 2) != 0) {
                  unint64_t v562 = (unsigned __int16)(v561 >> 19);
                }
                else {
                  unint64_t v562 = (v561 >> 19);
                }
LABEL_798:
                v563 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(v6 + 8), (llvm::LLVMContext *)v562);
                v564 = llvm::ConstantInt::get(v563, v559, (const llvm::APInt *)1);
                (*(void (**)(uint64_t, long long *, void *))(*(void *)v6 + 16))(v6, &v630, v564);
                return 1;
              }
            }
            else
            {
              unint64_t v561 = 0;
            }
            unint64_t v562 = (unsigned __int16)(v561 >> 3);
            goto LABEL_798;
          case 77:
          case 166:
            goto LABEL_88;
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 91:
          case 92:
          case 93:
          case 94:
          case 95:
          case 96:
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 103:
          case 104:
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 111:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
            char ExceptionBehavior = llvm::ConstrainedFPIntrinsic::getExceptionBehavior((llvm::ConstrainedFPIntrinsic *)v8);
            int v35 = *(_DWORD *)(*(void *)(v8 - 32) + 36);
            uint64_t v36 = 225;
            switch(v35)
            {
              case 'S':
                break;
              case 'T':
              case 'U':
              case 'W':
              case 'Z':
              case '[':
              case '\\':
              case ']':
              case '^':
                goto LABEL_97;
              case 'V':
                uint64_t v36 = 228;
                break;
              case 'X':
                uint64_t v36 = 230;
                break;
              case 'Y':
                uint64_t v36 = 227;
                break;
              case '_':
                uint64_t v36 = 229;
                break;
                uint64_t v36 = 226;
                break;
              default:
                if (v35 != 116) {
                  goto LABEL_97;
                }
                uint64_t v36 = 231;
                break;
            }
            unsigned int v296 = 0;
            unsigned int v297 = *(unsigned __int8 *)(v8 + 16);
            HIDWORD(v299) = v297 - 41;
            LODWORD(v299) = v297 - 41;
            unsigned int v298 = v299 >> 1;
            if (v298 <= 6 && ((1 << v298) & 0x47) != 0) {
              unsigned int v296 = (*(unsigned char *)(v8 + 17) & 6) << 10;
            }
            if (v297 <= 0x37 && ((1 << v297) & 0xC1800000000000) != 0) {
              unsigned int v296 = v296 & 0xFFFFDFFF | ((((*(unsigned char *)(v8 + 17) & 2) >> 1) & 1) << 13);
            }
            if (sub_1CB845E74(v8))
            {
              int v300 = *(unsigned __int8 *)(v8 + 17) >> 1;
              if (v300 == 127) {
                int v300 = -1;
              }
              v296 |= (8 * v300) & 0x3F0 | ((v300 & 1) << 10);
            }
            if (ExceptionBehavior) {
              uint64_t v301 = v296;
            }
            else {
              uint64_t v301 = v296 | 0x4000;
            }
            *(void *)&long long v630 = &v631;
            *((void *)&v630 + 1) = 0x400000000;
            uint64_t v302 = (int *)sub_1CC6EF0A4(v9, *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
            if (v303) {
              int v304 = *v302;
            }
            else {
              int v304 = 0;
            }
            LODWORD(v623) = v304;
            LODWORD(v624) = 0;
            uint64_t v305 = v630 + 24 * DWORD2(v630);
            long long v306 = v623;
            *(void *)(v305 + 16) = v624;
            *(_OWORD *)uint64_t v305 = v306;
            ++DWORD2(v630);
            if ((llvm::ConstrainedFPIntrinsic::isUnaryOp((llvm::ConstrainedFPIntrinsic *)v8) & 1) == 0)
            {
              int v307 = (int *)sub_1CC6EF0A4(v9, *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
              if (v308) {
                int v309 = *v307;
              }
              else {
                int v309 = 0;
              }
              LODWORD(v623) = v309;
              LODWORD(v624) = 0;
              if (DWORD2(v630) >= HIDWORD(v630))
              {
                if ((unint64_t)v630 > (unint64_t)&v623
                  || (unint64_t)v630 + 24 * DWORD2(v630) <= (unint64_t)&v623)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v310 = v630 + 24 * DWORD2(v630);
              long long v311 = v623;
              *(void *)(v310 + 16) = v624;
              *(_OWORD *)uint64_t v310 = v311;
              ++DWORD2(v630);
            }
            if ((*(_DWORD *)(*(void *)(v8 - 32) + 36) & 0xFFFFFFFD) == 0x58)
            {
              int v312 = (int *)sub_1CC6EF0A4(v9, *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
              if (v313) {
                int v314 = *v312;
              }
              else {
                int v314 = 0;
              }
              LODWORD(v623) = v314;
              LODWORD(v624) = 0;
              if (DWORD2(v630) >= HIDWORD(v630))
              {
                if ((unint64_t)v630 > (unint64_t)&v623
                  || (unint64_t)v630 + 24 * DWORD2(v630) <= (unint64_t)&v623)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v315 = v630 + 24 * DWORD2(v630);
              long long v316 = v623;
              *(void *)(v315 + 16) = v624;
              *(_OWORD *)uint64_t v315 = v316;
              ++DWORD2(v630);
            }
            unint64_t v317 = (int *)sub_1CC6EF0A4(v9, v8);
            if (v318) {
              int v319 = *v317;
            }
            else {
              int v319 = 0;
            }
            LODWORD(v623) = v319;
            DWORD2(v623) = 1;
            (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void, void, uint64_t))(*(void *)v6 + 32))(v6, v36, &v623, 1, v630, DWORD2(v630), v301 | 0x100000000);
            goto LABEL_227;
          case 126:
          case 163:
            return 1;
          case 143:
            uint64_t v227 = *(void *)(v9 + 864);
            uint64_t v228 = *(void *)(v227 + 8);
            uint64_t v229 = (*(uint64_t (**)(void))(**(void **)(v227 + 16) + 120))(*(void *)(v227 + 16));
            uint64_t v230 = (int *)sub_1CC6EF0A4(v9, v8);
            if (v231) {
              int v232 = *v230;
            }
            else {
              int v232 = 0;
            }
            uint64_t v374 = (int *)sub_1CC6EF0A4(v9, *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
            if (v375) {
              int v376 = *v374;
            }
            else {
              int v376 = 0;
            }
            uint64_t v377 = (int *)sub_1CC6EF0A4(v9, *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
            if (v378) {
              int v379 = *v377;
            }
            else {
              int v379 = 0;
            }
            int v380 = (int *)sub_1CC6EF0A4(v9, *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
            if (v382) {
              int v383 = *v380;
            }
            else {
              int v383 = 0;
            }
            if (*(_DWORD *)(v228 + 1104) != 2)
            {
              uint64_t v384 = *(void *)(v9 + 864);
              unint64_t v385 = sub_1CB87DC14(v229, *(void *)(v9 + 880), *(llvm::EVT **)v8, 0);
              if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v229 + 1336))(v229, v384, v385, v386))
              {
                unsigned int v387 = 0;
                unsigned int v388 = *(unsigned __int8 *)(v8 + 16);
                HIDWORD(v390) = v388 - 41;
                LODWORD(v390) = v388 - 41;
                unsigned int v389 = v390 >> 1;
                if (v389 <= 6 && ((1 << v389) & 0x47) != 0) {
                  unsigned int v387 = (*(unsigned char *)(v8 + 17) & 6) << 10;
                }
                if (v388 <= 0x37 && ((1 << v388) & 0xC1800000000000) != 0) {
                  unsigned int v387 = v387 & 0xFFFFDFFF | ((((*(unsigned char *)(v8 + 17) & 2) >> 1) & 1) << 13);
                }
                if (sub_1CB845E74(v8))
                {
                  int v391 = *(unsigned __int8 *)(v8 + 17) >> 1;
                  if (v391 == 127) {
                    int v391 = -1;
                  }
                  v387 |= (8 * v391) & 0x3F0 | ((v391 & 1) << 10);
                }
                LODWORD(v623) = v232;
                DWORD2(v623) = 1;
                LODWORD(v630) = v376;
                LODWORD(v631) = 0;
                DWORD2(v631) = v379;
                LODWORD(v633) = 0;
                LODWORD(v634) = v383;
                v636[0] = 0;
                (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 166, &v623, 1, &v630, 3, v387 | 0x100000000);
                return 1;
              }
            }
            unint64_t LLTForType = llvm::getLLTForType(*(llvm **)v8, *(llvm::Type **)(v9 + 880), v381);
            unsigned int v393 = 0;
            unsigned int v394 = *(unsigned __int8 *)(v8 + 16);
            HIDWORD(v396) = v394 - 41;
            LODWORD(v396) = v394 - 41;
            unsigned int v395 = v396 >> 1;
            if (v395 <= 6 && ((1 << v395) & 0x47) != 0) {
              unsigned int v393 = (*(unsigned char *)(v8 + 17) & 6) << 10;
            }
            if (v394 <= 0x37 && ((1 << v394) & 0xC1800000000000) != 0) {
              unsigned int v393 = v393 & 0xFFFFDFFF | ((((*(unsigned char *)(v8 + 17) & 2) >> 1) & 1) << 13);
            }
            if (sub_1CB845E74(v8))
            {
              int v397 = *(unsigned __int8 *)(v8 + 17) >> 1;
              if (v397 == 127) {
                int v397 = -1;
              }
              v393 |= (8 * v397) & 0x3F0 | ((v397 & 1) << 10);
            }
            *(void *)&long long v623 = LLTForType;
            DWORD2(v623) = 0;
            LODWORD(v630) = v376;
            LODWORD(v631) = 0;
            DWORD2(v631) = v379;
            LODWORD(v633) = 0;
            uint64_t v398 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 165, &v623, 1, &v630, 2, v393 | 0x100000000);
            uint64_t v400 = v399;
            unsigned int v401 = 0;
            unsigned int v402 = *(unsigned __int8 *)(v8 + 16);
            HIDWORD(v404) = v402 - 41;
            LODWORD(v404) = v402 - 41;
            unsigned int v403 = v404 >> 1;
            if (v403 <= 6 && ((1 << v403) & 0x47) != 0) {
              unsigned int v401 = (*(unsigned char *)(v8 + 17) & 6) << 10;
            }
            if (v402 <= 0x37 && ((1 << v402) & 0xC1800000000000) != 0) {
              unsigned int v401 = v401 & 0xFFFFDFFF | ((((*(unsigned char *)(v8 + 17) & 2) >> 1) & 1) << 13);
            }
            if (sub_1CB845E74(v8))
            {
              int v405 = *(unsigned __int8 *)(v8 + 17) >> 1;
              if (v405 == 127) {
                int v405 = -1;
              }
              v401 |= (8 * v405) & 0x3F0 | ((v405 & 1) << 10);
            }
            uint64_t v95 = v401 | 0x100000000;
            LODWORD(v623) = v232;
            DWORD2(v623) = 1;
            *(void *)&long long v630 = v398;
            *((void *)&v630 + 1) = v400;
            LODWORD(v631) = 1;
            DWORD2(v631) = v383;
            LODWORD(v633) = 0;
            uint64_t v90 = *(void (**)(void, void, void, void, void, void, void))(*(void *)v6 + 32);
            uint64_t v91 = &v623;
            uint64_t v92 = &v630;
            uint64_t v93 = v6;
            uint64_t v94 = 163;
LABEL_591:
            uint64_t v112 = 2;
            goto LABEL_184;
          case 146:
            unsigned int v519 = 0;
            unsigned int v520 = *(unsigned __int8 *)(v8 + 16);
            HIDWORD(v522) = v520 - 41;
            LODWORD(v522) = v520 - 41;
            unsigned int v521 = v522 >> 1;
            if (v521 <= 6 && ((1 << v521) & 0x47) != 0) {
              unsigned int v519 = (*(unsigned char *)(v8 + 17) & 6) << 10;
            }
            if (v520 <= 0x37 && ((1 << v520) & 0xC1800000000000) != 0) {
              unsigned int v519 = v519 & 0xFFFFDFFF | ((((*(unsigned char *)(v8 + 17) & 2) >> 1) & 1) << 13);
            }
            if (sub_1CB845E74(v8))
            {
              int v523 = *(unsigned __int8 *)(v8 + 17) >> 1;
              if (v523 == 127) {
                int v523 = -1;
              }
              v519 |= (8 * v523) & 0x3F0 | ((v523 & 1) << 10);
            }
            v524 = *(uint64_t **)(*(void *)(*(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32) + 24)
                               + 8);
            char v525 = llvm::convertStrToRoundingMode(v524 + 3, *v524);
            v526 = (int *)sub_1CC6EF0A4(v9, v8);
            if (v527) {
              int v528 = *v526;
            }
            else {
              int v528 = 0;
            }
            LODWORD(v653) = v528;
            unsigned int v654 = 1;
            v576 = (int *)sub_1CC6EF0A4(v9, *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
            if (v577) {
              int v578 = *v576;
            }
            else {
              int v578 = 0;
            }
            LODWORD(v623) = v578;
            LODWORD(v624) = 0;
            uint64_t v349 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 **, uint64_t, long long *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 84, &v653, 1, &v623, 1, v519 | 0x100000000);
            int v351 = v579;
            LODWORD(v630) = 1;
            uint64_t v352 = v525;
LABEL_513:
            *((void *)&v630 + 1) = 0;
            *(void *)&long long v631 = v352;
            uint64_t v353 = (llvm::MachineFunction *)v349;
            goto LABEL_608;
          case 164:
            unint64_t v256 = llvm::getLLTForType(**(llvm ***)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)), *(llvm::Type **)(v9 + 880), v16);
            uint64_t v257 = *(void *)(v9 + 872);
            unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v257, "", 0);
            unint64_t v259 = IncompleteVirtualRegister & 0x7FFFFFFF;
            *(void *)(*(void *)(v257 + 24) + 16 * v259) = 4;
            unint64_t v260 = *(unsigned int *)(v257 + 432);
            if (v259 >= v260)
            {
              uint64_t v261 = *(void *)(v257 + 440);
              uint64_t v262 = v259 + 1 - v260;
              if (v259 >= *(unsigned int *)(v257 + 436)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v263 = *(_DWORD *)(v257 + 432);
              if (v262)
              {
                uint64_t v264 = (void *)(*(void *)(v257 + 424) + 8 * *(unsigned int *)(v257 + 432));
                uint64_t v265 = ~v259 + v260;
                do
                {
                  *v264++ = v261;
                  BOOL v266 = __CFADD__(v265++, 1);
                }
                while (!v266);
                int v263 = *(_DWORD *)(v257 + 432);
              }
              *(_DWORD *)(v257 + 432) = v263 + v262;
            }
            *(void *)(*(void *)(v257 + 424) + 8 * v259) = v256;
            uint64_t v267 = *(void *)(v257 + 8);
            if (v267) {
              (*(void (**)(uint64_t, void))(*(void *)v267 + 24))(v267, IncompleteVirtualRegister);
            }
            LODWORD(v630) = IncompleteVirtualRegister;
            DWORD2(v630) = 1;
            uint64_t v90 = *(void (**)(void, void, void, void, void, void, void))(*(void *)v6 + 32);
            uint64_t v91 = &v630;
            uint64_t v93 = v6;
            uint64_t v94 = 68;
            uint64_t v92 = 0;
            uint64_t v112 = 0;
LABEL_545:
            uint64_t v95 = 0;
            goto LABEL_184;
          case 167:
          case 168:
            if (!*(_DWORD *)(*(void *)(*(void *)(v9 + 864) + 8) + 552)) {
              return 1;
            }
            if (v19 == 168) {
              uint64_t v170 = 21;
            }
            else {
              uint64_t v170 = 22;
            }
            *(void *)&long long v630 = &v631;
            *((void *)&v630 + 1) = 0x400000000;
            llvm::getUnderlyingObjects(*(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32), (uint64_t)&v630, 0, (llvm::Value *)6);
            uint64_t v171 = (long long *)v630;
            if (!DWORD2(v630)) {
              goto LABEL_459;
            }
            int v172 = (long long *)(v630 + 8 * DWORD2(v630));
            while (2)
            {
              uint64_t v173 = *(void *)v171;
              if (!*(void *)v171 || *(unsigned char *)(v173 + 16) != 59) {
                goto LABEL_302;
              }
              if (*(unsigned char *)(*(void *)(v173 - 32) + 16) != 16
                || ((v174 = *(void *)(v173 + 40), (uint64_t v175 = *(void *)(*(void *)(v174 + 56) + 80)) != 0)
                  ? (uint64_t v176 = v175 - 24)
                  : (uint64_t v176 = 0),
                    v174 != v176 || (*(_WORD *)(v173 + 18) & 0x40) != 0))
              {
LABEL_458:
                uint64_t v171 = (long long *)v630;
LABEL_459:
                if (v171 == &v631) {
                  return 1;
                }
                uint64_t v141 = v171;
LABEL_228:
                free(v141);
                return 1;
              }
              int v177 = *(llvm::MachineFunction **)(v6 + 8);
              uint64_t v178 = *(void *)(*(void *)(v6 + 16) + 8);
              int v179 = *(unsigned __int8 **)(v6 + 32);
              v653 = v179;
              if (v179) {
                llvm::MetadataTracking::track((uint64_t)&v653, v179, 2);
              }
              int v180 = llvm::MachineFunction::CreateMachineInstr(v177, v178 + 48 * v170, &v653, 0);
              if (!v653) {
                goto LABEL_296;
              }
              int v196 = *v653;
              if ((v196 - 4) > 0x1E)
              {
                if ((v196 - 3) >= 0xFFFFFFFE) {
                  uint64_t v199 = v653;
                }
                else {
                  uint64_t v199 = 0;
                }
                if ((v196 - 3) < 0xFFFFFFFE)
                {
                  if (v196 == 3) {
                    *((void *)v653 + 1) = 0;
                  }
                  goto LABEL_296;
                }
                unint64_t v198 = (unint64_t)(v199 + 8);
              }
              else
              {
                if ((v653[1] & 0x7F) != 2 && !*((_DWORD *)v653 + 3)) {
                  goto LABEL_296;
                }
                uint64_t v197 = *((void *)v653 + 2);
                if ((v197 & 4) == 0) {
                  goto LABEL_296;
                }
                unint64_t v198 = v197 & 0xFFFFFFFFFFFFFFF8;
                if (!v198) {
                  goto LABEL_296;
                }
              }
              *(void *)&long long v623 = &v653;
              sub_1CC5FA668(v198 + 16, &v623);
LABEL_296:
              unint64_t v181 = *(unint64_t **)(v6 + 48);
              uint64_t v182 = *(void *)(*(void *)(v6 + 40) + 40);
              *((void *)v180 + 3) = v182;
              uint64_t v183 = *(void *)(v182 + 32);
              uint64_t v184 = *((unsigned int *)v180 + 10);
              if (v184)
              {
                uint64_t v189 = *((void *)v180 + 4);
                uint64_t v190 = *(void *)(v183 + 40);
                uint64_t v191 = 32 * v184;
                do
                {
                  if (!*(unsigned char *)v189)
                  {
                    uint64_t v192 = *(unsigned int *)(v189 + 4);
                    if ((int)v192 >= 0) {
                      uint64_t v193 = (uint64_t *)(*(void *)(v190 + 272) + 8 * v192);
                    }
                    else {
                      uint64_t v193 = (uint64_t *)(*(void *)(v190 + 24) + 16 * (v192 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v194 = *v193;
                    if (*v193)
                    {
                      uint64_t v195 = *(void *)(v194 + 16);
                      *(void *)(v194 + 16) = v189;
                      *(void *)(v189 + 16) = v195;
                      if (*(unsigned char *)(v189 + 3))
                      {
                        *(void *)(v189 + 24) = v194;
                      }
                      else
                      {
                        *(void *)(v189 + 24) = 0;
                        uint64_t v193 = (uint64_t *)(v195 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v189 + 16) = v189;
                      *(void *)(v189 + 24) = 0;
                    }
                    *uint64_t v193 = v189;
                  }
                  v189 += 32;
                  v191 -= 32;
                }
                while (v191);
              }
              uint64_t v185 = *(void *)(v183 + 728);
              if (v185) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v185 + 24))(v185, v180);
              }
              unint64_t v186 = *v181 & 0xFFFFFFFFFFFFFFF8;
              *(void *)int v180 = v186 | *(void *)v180 & 7;
              *((void *)v180 + 1) = v181;
              *(void *)(v186 + 8) = v180;
              unint64_t *v181 = *v181 & 7 | (unint64_t)v180;
              uint64_t v187 = *(void *)(v6 + 56);
              if (v187) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v187 + 24))(v187, v180);
              }
              int v188 = sub_1CC6F1754(v9, v173);
              LODWORD(v623) = 5;
              *((void *)&v623 + 1) = 0;
              LODWORD(v624) = v188;
              llvm::MachineInstr::addOperand(v180, v177, (const llvm::MachineOperand *)&v623);
LABEL_302:
              uint64_t v171 = (long long *)((char *)v171 + 8);
              if (v171 == v172) {
                goto LABEL_458;
              }
              continue;
            }
          case 173:
            int v233 = *(uint64_t *****)(v9 + 864);
            uint64_t v234 = *v233;
            if ((*((unsigned char *)*v233 + 23) & 0x10) == 0)
            {
              v617 = 0;
              v470 = &byte_1CFBCE98E;
              goto LABEL_673;
            }
            uint64_t v235 = ***v234;
            uint64_t v236 = *(void *)(v235 + 152);
            uint64_t v237 = *(unsigned int *)(v235 + 168);
            if (!v237) {
              goto LABEL_666;
            }
            LODWORD(v238) = (v237 - 1) & ((v234 >> 4) ^ (v234 >> 9));
            unint64_t v239 = (uint64_t ****)(v236 + 16 * v238);
            v240 = *v239;
            if (*v239 == v234) {
              goto LABEL_667;
            }
            int v241 = 1;
            while (v240 != (uint64_t ***)-4096)
            {
              int v242 = v238 + v241++;
              uint64_t v238 = v242 & (v237 - 1);
              v240 = *(uint64_t ****)(v236 + 16 * v238);
              if (v240 == v234)
              {
                unint64_t v239 = (uint64_t ****)(v236 + 16 * v238);
                goto LABEL_667;
              }
            }
LABEL_666:
            unint64_t v239 = (uint64_t ****)(v236 + 16 * v237);
LABEL_667:
            v468 = v239[1];
            v471 = (llvm::GlobalValue *)*v468;
            v470 = (char *)(v468 + 2);
            v469 = v471;
            if (v471)
            {
              int v472 = *v470;
              if (v472 == 1) {
                v469 = (llvm::GlobalValue *)((char *)v469 - 1);
              }
              v617 = v469;
              if (v472 == 1) {
                v470 = (char *)v239[1] + 17;
              }
            }
            else
            {
              v617 = 0;
            }
LABEL_673:
            int v473 = *(unsigned __int8 *)(v8 + 16);
            if (v473 == 84)
            {
              uint64_t v474 = 0;
            }
            else if (v473 == 39)
            {
              uint64_t v474 = (*(_DWORD *)(v8 + 80) + 1);
            }
            else
            {
              uint64_t v474 = 2;
            }
            int v475 = *(_DWORD *)(v8 + 20);
            if (v475 < 0
              && (unint64_t v599 = v8 - 32 * (v475 & 0x7FFFFFF), v600 = *(void *)(v599 - 8), (v600 & 0xFFFFFFFF0) != 0))
            {
              uint64_t v477 = -(uint64_t)(v475 & 0x7FFFFFF);
              uint64_t v476 = (*(_DWORD *)(v599 - 12) - *(_DWORD *)(v599 - v600));
            }
            else
            {
              uint64_t v476 = 0;
              uint64_t v477 = -(uint64_t)(v475 & 0x7FFFFFF);
            }
            unint64_t v478 = -32 * v474 - 32 * v476 - 32 * v477 - 32;
            if ((v478 & 0x1FFFFFFFE0) == 0) {
              return 1;
            }
            uint64_t v479 = 0;
            v614 = v233[41];
            uint64_t v480 = (v478 >> 5);
            while (1)
            {
              v481 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v8
                                                                    - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)
                                                                    + 32 * v479));
              if (*((unsigned char *)v481 + 16) != 19) {
                break;
              }
LABEL_680:
              if (++v479 == v480) {
                return 1;
              }
            }
            int v482 = sub_1CC6F1754(v9, (uint64_t)v481);
            uint64_t v483 = *(void *)(*(void *)(v9 + 864) + 32);
            v484 = *(llvm::MCContext **)(v483 + 2056);
            v485 = (llvm::MCContext *)(v483 + 8);
            if (v484) {
              v486 = v484;
            }
            else {
              v486 = v485;
            }
            uint64_t FrameAllocSymbol = llvm::MCContext::getOrCreateFrameAllocSymbol(v486, (uint64_t)v470, (uint64_t)v617, v479);
            v488 = *(llvm::MachineFunction **)(v6 + 8);
            uint64_t v489 = *(void *)(*(void *)(v6 + 16) + 8);
            v490 = *(unsigned __int8 **)(v6 + 32);
            *(void *)&long long v623 = v490;
            if (v490) {
              llvm::MetadataTracking::track((uint64_t)&v623, v490, 2);
            }
            MachineInstr = llvm::MachineFunction::CreateMachineInstr(v488, v489 + 1536, (unsigned __int8 **)&v623, 0);
            if (!(void)v623) {
              goto LABEL_688;
            }
            int v505 = *(unsigned __int8 *)v623;
            if ((v505 - 4) > 0x1E)
            {
              if ((v505 - 3) >= 0xFFFFFFFE) {
                uint64_t v508 = v623;
              }
              else {
                uint64_t v508 = 0;
              }
              if ((v505 - 3) < 0xFFFFFFFE)
              {
                if (v505 == 3) {
                  *(void *)(v623 + 8) = 0;
                }
                goto LABEL_688;
              }
              unint64_t v507 = v508 + 8;
            }
            else
            {
              if ((*(unsigned char *)(v623 + 1) & 0x7F) != 2 && !*(_DWORD *)(v623 + 12)) {
                goto LABEL_688;
              }
              uint64_t v506 = *(void *)(v623 + 16);
              if ((v506 & 4) == 0) {
                goto LABEL_688;
              }
              unint64_t v507 = v506 & 0xFFFFFFFFFFFFFFF8;
              if (!v507) {
                goto LABEL_688;
              }
            }
            *(void *)&long long v630 = &v623;
            sub_1CC5FA668(v507 + 16, &v630);
LABEL_688:
            *(void *)&long long v631 = FrameAllocSymbol;
            DWORD2(v631) = 0;
            long long v630 = 0xFuLL;
            llvm::MachineInstr::addOperand(MachineInstr, v488, (const llvm::MachineOperand *)&v630);
            LODWORD(v630) = 5;
            *((void *)&v630 + 1) = 0;
            LODWORD(v631) = v482;
            llvm::MachineInstr::addOperand(MachineInstr, v488, (const llvm::MachineOperand *)&v630);
            v492 = (unint64_t *)v614[7];
            v493 = v614[5];
            *((void *)MachineInstr + 3) = v493;
            v494 = v493[4];
            uint64_t v495 = *((unsigned int *)MachineInstr + 10);
            if (v495)
            {
              uint64_t v498 = *((void *)MachineInstr + 4);
              uint64_t v499 = v494[5];
              uint64_t v500 = 32 * v495;
              do
              {
                if (!*(unsigned char *)v498)
                {
                  uint64_t v501 = *(unsigned int *)(v498 + 4);
                  if ((int)v501 >= 0) {
                    v502 = (uint64_t *)(*(void *)(v499 + 272) + 8 * v501);
                  }
                  else {
                    v502 = (uint64_t *)(*(void *)(v499 + 24) + 16 * (v501 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v503 = *v502;
                  if (*v502)
                  {
                    uint64_t v504 = *(void *)(v503 + 16);
                    *(void *)(v503 + 16) = v498;
                    *(void *)(v498 + 16) = v504;
                    if (*(unsigned char *)(v498 + 3))
                    {
                      *(void *)(v498 + 24) = v503;
                    }
                    else
                    {
                      *(void *)(v498 + 24) = 0;
                      v502 = (uint64_t *)(v504 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v498 + 16) = v498;
                    *(void *)(v498 + 24) = 0;
                  }
                  uint64_t *v502 = v498;
                }
                v498 += 32;
                v500 -= 32;
              }
              while (v500);
            }
            uint64_t v496 = v494[91];
            if (v496) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v496 + 24))(v496, MachineInstr);
            }
            unint64_t v497 = *v492 & 0xFFFFFFFFFFFFFFF8;
            *(void *)MachineInstr = v497 | *(void *)MachineInstr & 7;
            *((void *)MachineInstr + 1) = v492;
            *(void *)(v497 + 8) = MachineInstr;
            unint64_t *v492 = *v492 & 7 | (unint64_t)MachineInstr;
            goto LABEL_680;
          case 194:
            uint64_t v223 = v9;
            uint64_t v224 = v8;
            uint64_t v225 = (void *)v6;
            unsigned int v226 = 234;
            goto LABEL_395;
          case 196:
            uint64_t v223 = v9;
            uint64_t v224 = v8;
            uint64_t v225 = (void *)v6;
            unsigned int v226 = 235;
            goto LABEL_395;
          case 197:
            uint64_t v223 = v9;
            uint64_t v224 = v8;
            uint64_t v225 = (void *)v6;
            unsigned int v226 = 236;
            goto LABEL_395;
          case 199:
            uint64_t v223 = v9;
            uint64_t v224 = v8;
            uint64_t v225 = (void *)v6;
            unsigned int v226 = 237;
LABEL_395:
            sub_1CC6F66DC(v223, v224, v225, v226);
            return 1;
          default:
            switch((int)v19)
            {
              case 245:
              case 290:
                goto LABEL_88;
              case 246:
              case 247:
              case 248:
              case 250:
              case 251:
              case 252:
              case 253:
              case 256:
              case 257:
              case 258:
              case 259:
              case 260:
              case 261:
              case 266:
              case 267:
              case 268:
              case 269:
              case 270:
              case 271:
              case 273:
              case 279:
              case 280:
              case 281:
              case 289:
              case 291:
              case 292:
              case 293:
              case 294:
              case 296:
              case 297:
              case 298:
              case 299:
              case 313:
              case 317:
              case 318:
              case 320:
              case 321:
                goto LABEL_97;
              case 249:
                int v288 = (llvm::GlobalValue **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
                v612 = v288[4];
                int v289 = v288[8];
                v616 = *v288;
                int v290 = *((unsigned __int8 *)*v288 + 16);
                if (v290 == 75 || v290 == 5 && *((_WORD *)v616 + 9) == 47)
                {
                  int v291 = *((_DWORD *)v616 + 5);
                  if ((v291 & 0x40000000) != 0) {
                    v292 = (llvm::GlobalValue **)*((void *)v616 - 1);
                  }
                  else {
                    v292 = (llvm::GlobalValue **)((char *)v616 - 32 * (v291 & 0x7FFFFFF));
                  }
                  v616 = *v292;
                }
                v423 = *(llvm::DataLayout **)(v9 + 880);
                unsigned int v654 = *(_DWORD *)(*((void *)v423 + 29) + 4);
                if (v654 > 0x40) {
                  operator new[]();
                }
                v653 = 0;
                v424 = llvm::Value::stripAndAccumulateConstantOffsets(v616, v423, (llvm::APInt *)&v653, 1, 0, 0, v17);
                char v427 = 0;
                unsigned int v428 = *((unsigned __int8 *)v424 + 16);
                if (v428 > 3) {
                  goto LABEL_733;
                }
                if (v428 != 3 || (*((unsigned char *)v424 + 34) & 0x40) == 0) {
                  goto LABEL_628;
                }
                uint64_t v429 = ***(void ***)v424;
                *(void *)&long long v630 = v424;
                int v430 = *(_DWORD *)(v429 + 2520);
                if (v430)
                {
                  uint64_t v431 = *(void *)(v429 + 2504);
                  int v432 = v430 - 1;
                  unsigned int v433 = (v430 - 1) & ((v424 >> 4) ^ (v424 >> 9));
                  v434 = (llvm::GlobalValue **)(v431 + 24 * v433);
                  v435 = *v434;
                  if (*v434 == v424) {
                    goto LABEL_623;
                  }
                  v565 = 0;
                  int v566 = 1;
                  while (v435 != (llvm::GlobalValue *)-4096)
                  {
                    if (v565) {
                      BOOL v567 = 0;
                    }
                    else {
                      BOOL v567 = v435 == (llvm::GlobalValue *)-8192;
                    }
                    if (v567) {
                      v565 = v434;
                    }
                    unsigned int v568 = v433 + v566++;
                    unsigned int v433 = v568 & v432;
                    v434 = (llvm::GlobalValue **)(v431 + 24 * (v568 & v432));
                    v435 = *v434;
                    if (*v434 == v424)
                    {
LABEL_623:
                      if (v434[2] == (llvm::GlobalValue *)12
                        && ((v436 = v434[1],
                             uint64_t v437 = *(void *)v436,
                             int v438 = *((_DWORD *)v436 + 2),
                             v437 == 0x7274702E6D766C6CLL)
                          ? (BOOL v439 = v438 == 1752462689)
                          : (BOOL v439 = 0),
                            v439))
                      {
                        char v427 = 0;
                      }
                      else
                      {
LABEL_628:
                        int v440 = *((unsigned __int8 *)v289 + 16);
                        if (v440 == 16) {
                          v441 = v289;
                        }
                        else {
                          v441 = 0;
                        }
                        v613 = v441;
                        if (v440 != 84) {
                          goto LABEL_640;
                        }
                        v442 = (llvm::GlobalValue *)*((void *)v289 - 4);
                        if (!v442) {
                          goto LABEL_641;
                        }
                        if (!*((unsigned char *)v442 + 16)
                          && *((void *)v442 + 3) == *((void *)v289 + 9)
                          && (*((unsigned char *)v442 + 33) & 0x20) != 0
                          && *((_DWORD *)v442 + 9) == 247)
                        {
                          v443 = (llvm::GlobalValue **)((char *)v289 - 32 * (*((_DWORD *)v289 + 5) & 0x7FFFFFF));
                          v444 = v443[4];
                          if (*((unsigned char *)v444 + 16) != 16) {
                            v444 = 0;
                          }
                          v613 = v444;
                          v442 = *v443;
                        }
                        else
                        {
LABEL_640:
                          v442 = 0;
                        }
LABEL_641:
                        if (!v613) {
                          v442 = v289;
                        }
                        NullValue = v442;
                        if (!v442) {
                          NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v289, v425, v426);
                        }
                        uint64_t v445 = *(void *)(v9 + 872);
                        unint64_t v609 = llvm::getLLTForType(*(llvm **)v616, *(llvm::Type **)(v9 + 880), v426);
                        unsigned int v611 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v445, "", 0);
                        unint64_t v446 = v611 & 0x7FFFFFFF;
                        *(void *)(*(void *)(v445 + 24) + 16 * v446) = 4;
                        unint64_t v447 = *(unsigned int *)(v445 + 432);
                        if (v446 >= v447)
                        {
                          uint64_t v448 = *(void *)(v445 + 440);
                          uint64_t v449 = v446 + 1 - v447;
                          if (v446 >= *(unsigned int *)(v445 + 436)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          int v450 = *(_DWORD *)(v445 + 432);
                          if (v449)
                          {
                            v451 = (void *)(*(void *)(v445 + 424) + 8 * v447);
                            uint64_t v452 = ~v446 + v447;
                            do
                            {
                              *v451++ = v448;
                              BOOL v266 = __CFADD__(v452++, 1);
                            }
                            while (!v266);
                            int v450 = *(_DWORD *)(v445 + 432);
                          }
                          *(_DWORD *)(v445 + 432) = v450 + v449;
                        }
                        *(void *)(*(void *)(v445 + 424) + 8 * v446) = v609;
                        uint64_t v453 = *(void *)(v445 + 8);
                        if (v453) {
                          (*(void (**)(uint64_t, void))(*(void *)v453 + 24))(v453, v611);
                        }
                        v454 = *(llvm::MachineFunction **)(v6 + 8);
                        uint64_t v455 = *(void *)(*(void *)(v6 + 16) + 8) + 3456;
                        v456 = *(unsigned __int8 **)(v6 + 32);
                        *(void *)&long long v623 = v456;
                        if (v456) {
                          llvm::MetadataTracking::track((uint64_t)&v623, v456, 2);
                        }
                        v457 = llvm::MachineFunction::CreateMachineInstr(v454, v455, (unsigned __int8 **)&v623, 0);
                        if ((void)v623)
                        {
                          int v604 = *(unsigned __int8 *)v623;
                          if ((v604 - 4) > 0x1E)
                          {
                            if ((v604 - 3) >= 0xFFFFFFFE) {
                              uint64_t v608 = v623;
                            }
                            else {
                              uint64_t v608 = 0;
                            }
                            if ((v604 - 3) < 0xFFFFFFFE)
                            {
                              if (v604 == 3) {
                                *(void *)(v623 + 8) = 0;
                              }
                              goto LABEL_658;
                            }
                            unint64_t v606 = v608 + 8;
                          }
                          else
                          {
                            if ((*(unsigned char *)(v623 + 1) & 0x7F) != 2 && !*(_DWORD *)(v623 + 12)) {
                              goto LABEL_658;
                            }
                            uint64_t v605 = *(void *)(v623 + 16);
                            if ((v605 & 4) == 0) {
                              goto LABEL_658;
                            }
                            unint64_t v606 = v605 & 0xFFFFFFFFFFFFFFF8;
                            if (!v606) {
                              goto LABEL_658;
                            }
                          }
                          *(void *)&long long v630 = &v623;
                          sub_1CC5FA668(v606 + 16, &v630);
                        }
LABEL_658:
                        v458 = *(unint64_t **)(v6 + 48);
                        uint64_t v459 = *(void *)(*(void *)(v6 + 40) + 40);
                        *((void *)v457 + 3) = v459;
                        uint64_t v460 = *(void *)(v459 + 32);
                        uint64_t v461 = *((unsigned int *)v457 + 10);
                        if (v461)
                        {
                          uint64_t v569 = *((void *)v457 + 4);
                          uint64_t v570 = *(void *)(v460 + 40);
                          uint64_t v571 = 32 * v461;
                          do
                          {
                            if (!*(unsigned char *)v569)
                            {
                              uint64_t v572 = *(unsigned int *)(v569 + 4);
                              if ((int)v572 >= 0) {
                                v573 = (uint64_t *)(*(void *)(v570 + 272) + 8 * v572);
                              }
                              else {
                                v573 = (uint64_t *)(*(void *)(v570 + 24) + 16 * (v572 & 0x7FFFFFFF) + 8);
                              }
                              uint64_t v574 = *v573;
                              if (*v573)
                              {
                                uint64_t v575 = *(void *)(v574 + 16);
                                *(void *)(v574 + 16) = v569;
                                *(void *)(v569 + 16) = v575;
                                if (*(unsigned char *)(v569 + 3))
                                {
                                  *(void *)(v569 + 24) = v574;
                                }
                                else
                                {
                                  *(void *)(v569 + 24) = 0;
                                  v573 = (uint64_t *)(v575 + 24);
                                }
                              }
                              else
                              {
                                *(void *)(v569 + 16) = v569;
                                *(void *)(v569 + 24) = 0;
                              }
                              uint64_t *v573 = v569;
                            }
                            v569 += 32;
                            v571 -= 32;
                          }
                          while (v571);
                        }
                        uint64_t v462 = *(void *)(v460 + 728);
                        if (v462) {
                          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v462 + 24))(v462, v457);
                        }
                        unint64_t v463 = *v458 & 0xFFFFFFFFFFFFFFF8;
                        *(void *)v457 = v463 | *(void *)v457 & 7;
                        *((void *)v457 + 1) = v458;
                        *(void *)(v463 + 8) = v457;
                        unint64_t *v458 = *v458 & 7 | (unint64_t)v457;
                        uint64_t v464 = *(void *)(v6 + 56);
                        if (v464) {
                          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v464 + 24))(v464, v457);
                        }
                        *((void *)&v630 + 1) = 0;
                        long long v631 = 0uLL;
                        DWORD1(v630) = v611;
                        LODWORD(v630) = 0x1000000;
                        llvm::MachineInstr::addOperand(v457, v454, (const llvm::MachineOperand *)&v630);
                        v465 = (int *)sub_1CC6EF0A4(v9, v616);
                        if (v466) {
                          int v467 = *v465;
                        }
                        else {
                          int v467 = 0;
                        }
                        *((void *)&v630 + 1) = 0;
                        long long v631 = 0uLL;
                        DWORD1(v630) = v467;
                        LODWORD(v630) = 0;
                        llvm::MachineInstr::addOperand(v457, v454, (const llvm::MachineOperand *)&v630);
                        v509 = (void *)((char *)v612 + 24);
                        if (*((_DWORD *)v612 + 8) >= 0x41u) {
                          v509 = (void *)*v509;
                        }
                        v510 = (void *)*v509;
                        LODWORD(v630) = 1;
                        *((void *)&v630 + 1) = 0;
                        *(void *)&long long v631 = v510;
                        llvm::MachineInstr::addOperand(v457, v454, (const llvm::MachineOperand *)&v630);
                        v511 = (int *)sub_1CC6EF0A4(v9, NullValue);
                        if (v512) {
                          int v513 = *v511;
                        }
                        else {
                          int v513 = 0;
                        }
                        *((void *)&v630 + 1) = 0;
                        long long v631 = 0uLL;
                        DWORD1(v630) = v513;
                        LODWORD(v630) = 0;
                        llvm::MachineInstr::addOperand(v457, v454, (const llvm::MachineOperand *)&v630);
                        v514 = v613;
                        if (v613)
                        {
                          v515 = (llvm::GlobalValue **)((char *)v613 + 24);
                          if (*((_DWORD *)v613 + 8) >= 0x41u) {
                            v515 = (llvm::GlobalValue **)*v515;
                          }
                          v514 = *v515;
                        }
                        char v427 = 1;
                        LODWORD(v630) = 1;
                        *((void *)&v630 + 1) = 0;
                        *(void *)&long long v631 = v514;
                        llvm::MachineInstr::addOperand(v457, v454, (const llvm::MachineOperand *)&v630);
                        v516 = (int *)sub_1CC6EF0A4(v9, v8);
                        if (v517) {
                          int v518 = *v516;
                        }
                        else {
                          int v518 = 0;
                        }
                        LODWORD(v623) = v518;
                        DWORD2(v623) = 1;
                        LODWORD(v630) = v611;
                        LODWORD(v631) = 0;
                        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v6 + 32))(v6, 80, &v623, 1, &v630, 1, 0);
                      }
LABEL_733:
                      if (v654 >= 0x41 && v653) {
                        MEMORY[0x1D25D9CB0](v653, 0x1000C8000313F17);
                      }
                      if (v427) {
                        return 1;
                      }
LABEL_97:
                      if (*(unsigned char *)(*(void *)v8 + 8) == 7)
                      {
                        uint64_t v47 = 0;
                        uint64_t v48 = 0;
                      }
                      else
                      {
                        uint64_t v47 = (int *)sub_1CC6EF0A4(v9, v8);
                        uint64_t v48 = v49;
                      }
                      uint64_t v50 = *(void *)(v11 + 112);
                      if (v50) {
                        LODWORD(v50) = (*(unsigned __int8 *)(v50 + 17) >> 4) & 1;
                      }
                      uint64_t v51 = sub_1CC7390C0((void *)v6, v19, v47, v48, v50 ^ 1);
                      uint64_t v53 = v52;
                      if (sub_1CB845E74(v8))
                      {
                        unsigned int v54 = 0;
                        unsigned int v55 = *(unsigned __int8 *)(v8 + 16);
                        HIDWORD(v57) = v55 - 41;
                        LODWORD(v57) = v55 - 41;
                        unsigned int v56 = v57 >> 1;
                        if (v56 <= 6 && ((1 << v56) & 0x47) != 0) {
                          unsigned int v54 = (*(unsigned char *)(v8 + 17) & 6) << 10;
                        }
                        if (v55 <= 0x37 && ((1 << v55) & 0xC1800000000000) != 0) {
                          unsigned int v54 = v54 & 0xFFFFDFFF | ((((*(unsigned char *)(v8 + 17) & 2) >> 1) & 1) << 13);
                        }
                        if (sub_1CB845E74(v8))
                        {
                          int v58 = *(unsigned __int8 *)(v8 + 17) >> 1;
                          if (v58 == 127) {
                            LOWORD(v58) = -1;
                          }
                          LOWORD(v54) = (8 * v58) & 0x3F0 | ((v58 & 1) << 10) | v54;
                        }
                        *((_WORD *)v53 + 22) = v54;
                      }
                      int v59 = *(_DWORD *)(v8 + 20);
                      uint64_t v60 = v59 & 0x7FFFFFF;
                      int v61 = *(unsigned __int8 *)(v8 + 16);
                      if (v61 == 84)
                      {
                        uint64_t v62 = 0;
                      }
                      else if (v61 == 39)
                      {
                        uint64_t v62 = (*(_DWORD *)(v8 + 80) + 1);
                      }
                      else
                      {
                        uint64_t v62 = 2;
                      }
                      unint64_t v63 = v8 - 32 * v60;
                      if (v59 < 0 && (uint64_t v597 = *(void *)(v63 - 8), (v597 & 0xFFFFFFFF0) != 0)) {
                        uint64_t v64 = (*(_DWORD *)(v63 - 12) - *(_DWORD *)(v63 - v597));
                      }
                      else {
                        uint64_t v64 = 0;
                      }
                      if (v63 != v8 - 32 * v62 - 32 * v64 - 32)
                      {
                        int v65 = 0;
                        unint64_t v66 = (32 * v62 + 32 * v64) ^ 0xFFFFFFFFFFFFFFE0;
                        uint64_t v67 = -32 * v60;
                        do
                        {
                          int HasAttr = llvm::CallBase::paramHasAttr(v8, v65, 9);
                          uint64_t v69 = *(void *)(v8 + v67);
                          int v70 = *(unsigned __int8 *)(v69 + 16);
                          if (HasAttr)
                          {
                            if (v69) {
                              BOOL v71 = v70 == 16;
                            }
                            else {
                              BOOL v71 = 0;
                            }
                            if (v71)
                            {
                              unsigned int v76 = *(_DWORD *)(v69 + 32);
                              if (v76 > 0x40) {
                                uint64_t v77 = **(void **)(v69 + 24);
                              }
                              else {
                                uint64_t v77 = (uint64_t)(*(void *)(v69 + 24) << -(char)v76) >> -(char)v76;
                              }
                              LODWORD(v630) = 1;
                              *((void *)&v630 + 1) = 0;
                              *(void *)&long long v631 = v77;
                            }
                            else
                            {
                              LODWORD(v630) = 3;
                              *((void *)&v630 + 1) = 0;
                              *(void *)&long long v631 = v69;
                            }
                          }
                          else
                          {
                            if (v69) {
                              BOOL v72 = v70 == 23;
                            }
                            else {
                              BOOL v72 = 0;
                            }
                            if (v72)
                            {
                              Impl = *(llvm::MDNode **)(v69 + 24);
                              int v79 = *(unsigned __int8 *)Impl;
                              if ((v79 - 4) >= 0x1F)
                              {
                                if (v79 != 1) {
                                  return 0;
                                }
                                uint64_t v80 = ****(void ****)(v9 + 864);
                                *(void *)&long long v630 = *(void *)(v69 + 24);
                                Impl = llvm::MDTuple::getImpl(v80, &v630, 1, 0, 1);
                              }
                              LODWORD(v630) = 14;
                              *((void *)&v630 + 1) = 0;
                              *(void *)&long long v631 = Impl;
                            }
                            else
                            {
                              char v73 = (int *)sub_1CC6EF0A4(v9, v69);
                              if (v74 > 1) {
                                return 0;
                              }
                              int v75 = *v73;
                              *((void *)&v630 + 1) = 0;
                              DWORD1(v630) = v75;
                              LODWORD(v630) = 0;
                              long long v631 = 0uLL;
                            }
                          }
                          llvm::MachineInstr::addOperand(v53, v51, (const llvm::MachineOperand *)&v630);
                          ++v65;
                          v67 += 32;
                        }
                        while (v66 != v67);
                      }
                      uint64_t v81 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v9 + 864) + 16) + 120))(*(void *)(*(void *)(v9 + 864) + 16));
                      LODWORD(v630) = 0;
                      BYTE8(v630) = 0;
                      uint64_t v633 = 0;
                      LODWORD(v634) = 256;
                      long long v631 = 0uLL;
                      LODWORD(v632) = 0;
                      if ((*(unsigned int (**)(void))(*(void *)v81 + 472))())
                      {
                        uint64_t v82 = *(llvm::DataLayout **)(v9 + 880);
                        llvm::EVT::getTypeForEVT((llvm::EVT *)((char *)&v630 + 8), **(llvm::LLVMContext ***)v11);
                        char Alignment = llvm::DataLayout::getAlignment(v82, v83, 1);
                        if (BYTE1(v634)) {
                          char v85 = (char)v634;
                        }
                        else {
                          char v85 = Alignment;
                        }
                        if (BYTE8(v630))
                        {
                          unint64_t LLTForMVT = llvm::getLLTForMVT(BYTE8(v630));
                        }
                        else
                        {
                          unint64_t v114 = sub_1CB896FB8((unsigned __int8 *)&v630 + 8) << 6;
                          if (v113 == 1) {
                          unint64_t LLTForMVT = v114 & 0x7FFFFFFC0 | 1;
                          }
                        }
                        uint64_t v115 = *(void *)(v9 + 864);
                        uint64_t v116 = *((void *)&v631 + 1);
                        if (*((void *)&v631 + 1) < 8uLL)
                        {
                          unsigned int v120 = 0;
                        }
                        else
                        {
                          uint64_t v117 = (_DWORD *)(*((void *)&v631 + 1) & 0xFFFFFFFFFFFFFFF8);
                          if ((BYTE8(v631) & 4) != 0 || !v117)
                          {
                            unsigned int v120 = v117[3];
                          }
                          else
                          {
                            uint64_t v118 = *(void *)v117;
                            unsigned int v119 = *(_DWORD *)(*(void *)v117 + 8);
                            if ((v119 & 0xFE) == 0x12) {
                              unsigned int v119 = *(_DWORD *)(**(void **)(v118 + 16) + 8);
                            }
                            unsigned int v120 = v119 >> 8;
                          }
                        }
                        __int16 v142 = WORD1(v634);
                        *(void *)(v115 + 208) += 80;
                        uint64_t v143 = *(void *)(v115 + 128);
                        if (((v143 + 7) & 0xFFFFFFFFFFFFFFF8) - v143 + 80 > *(void *)(v115 + 136) - v143)
                        {
                          unsigned int v413 = *(_DWORD *)(v115 + 152) >> 7;
                          if (v413 >= 0x1E) {
                            LOBYTE(v413) = 30;
                          }
                          uint64_t v414 = 4096 << v413;
                          unint64_t v144 = (unint64_t)operator new(4096 << v413, (std::align_val_t)8uLL);
                          unsigned int v415 = *(_DWORD *)(v115 + 152);
                          if (v415 >= *(_DWORD *)(v115 + 156)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *(void *)(*(void *)(v115 + 144) + 8 * v415) = v144;
                          ++*(_DWORD *)(v115 + 152);
                          *(void *)(v115 + 136) = v144 + v414;
                        }
                        else
                        {
                          unint64_t v144 = (v143 + 7) & 0xFFFFFFFFFFFFFFF8;
                        }
                        *(void *)(v115 + 128) = v144 + 80;
                        *(void *)unint64_t v144 = v116;
                        *(void *)(v144 + 8) = 0;
                        *(_DWORD *)(v144 + 16) = v120;
                        *(unsigned char *)(v144 + 20) = 0;
                        *(void *)(v144 + 24) = LLTForMVT;
                        *(_WORD *)(v144 + 32) = v142;
                        *(unsigned char *)(v144 + 34) = v85;
                        *(_OWORD *)(v144 + 40) = 0u;
                        *(_OWORD *)(v144 + 56) = 0u;
                        *(void *)(v144 + 72) = 0;
                        *(_WORD *)(v144 + 36) = 1;
                        uint64_t v145 = v53;
                        long long v146 = v51;
                        MachineMemOperand = (llvm::MachineMemOperand *)v144;
LABEL_234:
                        llvm::MachineInstr::addMemOperand(v145, v146, MachineMemOperand);
                      }
                      return 1;
                    }
                  }
                  if (v565) {
                    v586 = v565;
                  }
                  else {
                    v586 = v434;
                  }
                }
                else
                {
                  v586 = 0;
                }
                v434 = (llvm::GlobalValue **)sub_1CC5BF31C(v429 + 2504, (uint64_t)&v630, (uint64_t *)&v630, v586);
                v587 = (llvm::GlobalValue *)v630;
                v434[1] = 0;
                v434[2] = 0;
                *v434 = v587;
                goto LABEL_623;
              case 254:
              case 255:
                uint64_t v40 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
                char v41 = (int *)sub_1CC6EF0A4(v9, v8);
                if (v42) {
                  int v43 = *v41;
                }
                else {
                  int v43 = 0;
                }
                LODWORD(v623) = v43;
                DWORD2(v623) = 1;
                uint64_t v349 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, void, void, void))(*(void *)v6 + 32))(v6, 232, &v623, 1, 0, 0, 0);
                int v351 = v350;
                uint64_t v352 = *(void *)(v40 + 24);
                LODWORD(v630) = 14;
                goto LABEL_513;
              case 262:
                uint64_t v280 = v9;
                uint64_t v281 = 150;
                goto LABEL_422;
              case 263:
                uint64_t v285 = v9;
                uint64_t v286 = v8;
                uint64_t v287 = 141;
                goto LABEL_419;
              case 264:
                uint64_t v533 = v9;
                uint64_t v534 = 159;
                goto LABEL_763;
              case 265:
                uint64_t v533 = v9;
                uint64_t v534 = 161;
                goto LABEL_763;
              case 272:
              case 314:
              case 316:
                return 1;
              case 274:
                uint64_t v280 = v9;
                uint64_t v281 = 196;
                goto LABEL_422;
              case 275:
                uint64_t v280 = v9;
                uint64_t v281 = 195;
                goto LABEL_422;
              case 276:
                uint64_t v533 = v9;
                uint64_t v534 = 155;
                goto LABEL_763;
              case 277:
                uint64_t v533 = v9;
                uint64_t v534 = 157;
                goto LABEL_763;
              case 278:
                uint64_t v285 = v9;
                uint64_t v286 = v8;
                uint64_t v287 = 146;
                goto LABEL_419;
              case 282:
                uint64_t v280 = v9;
                uint64_t v281 = 154;
                goto LABEL_422;
              case 283:
                uint64_t v280 = v9;
                uint64_t v281 = 152;
                goto LABEL_422;
              case 284:
                uint64_t v285 = v9;
                uint64_t v286 = v8;
                uint64_t v287 = 143;
                goto LABEL_419;
              case 285:
                v549 = (_DWORD *)sub_1CC6EF0A4(v9, v8);
                if (v550) {
                  LODWORD(v550) = *v549;
                }
                sub_1CD61596C((void *)v9, v550, v6);
                return 1;
              case 286:
                v618 = (llvm::GlobalValue *)llvm::getLLTForType(**(llvm ***)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)), *(llvm::Type **)(v9 + 880), v16);
                uint64_t v535 = *(void *)(v9 + 872);
                unsigned int v615 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v535, "", 0);
                unint64_t v536 = v615 & 0x7FFFFFFF;
                *(void *)(*(void *)(v535 + 24) + 16 * v536) = 4;
                unint64_t v537 = *(unsigned int *)(v535 + 432);
                if (v536 >= v537)
                {
                  uint64_t v538 = *(void *)(v535 + 440);
                  uint64_t v539 = v536 + 1 - v537;
                  if (v536 >= *(unsigned int *)(v535 + 436)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  int v540 = *(_DWORD *)(v535 + 432);
                  if (v539)
                  {
                    v541 = (void *)(*(void *)(v535 + 424) + 8 * *(unsigned int *)(v535 + 432));
                    uint64_t v542 = ~v536 + v537;
                    do
                    {
                      *v541++ = v538;
                      BOOL v266 = __CFADD__(v542++, 1);
                    }
                    while (!v266);
                    int v540 = *(_DWORD *)(v535 + 432);
                  }
                  *(_DWORD *)(v535 + 432) = v540 + v539;
                }
                *(void *)(*(void *)(v535 + 424) + 8 * v536) = v618;
                uint64_t v543 = *(void *)(v535 + 8);
                if (v543) {
                  (*(void (**)(uint64_t, void))(*(void *)v543 + 24))(v543, v615);
                }
                sub_1CD61596C((void *)v9, v615, v6);
                uint64_t v544 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32);
                int v545 = sub_1CC6F1754(v9, v544);
                *(_DWORD *)(*(void *)(*(void *)(v9 + 864) + 56) + 64) = v545;
                LODWORD(v630) = v615;
                LODWORD(v631) = 0;
                v546 = (int *)sub_1CC6EF0A4(v9, v544);
                if (v547) {
                  int v548 = *v546;
                }
                else {
                  int v548 = 0;
                }
                LODWORD(v623) = v548;
                LODWORD(v624) = 0;
                uint64_t v580 = *(void *)(v9 + 864);
                FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v580 + 432), v545);
                uint64_t v582 = (unint64_t)FixedStack | 4;
                if (FixedStack) {
                  int v583 = *((_DWORD *)FixedStack + 3);
                }
                else {
                  int v583 = 0;
                }
                *(void *)(v580 + 208) += 80;
                uint64_t v584 = *(void *)(v580 + 128);
                if (((v584 + 7) & 0xFFFFFFFFFFFFFFF8) - v584 + 80 > *(void *)(v580 + 136) - v584)
                {
                  unsigned int v592 = *(_DWORD *)(v580 + 152) >> 7;
                  if (v592 >= 0x1E) {
                    LOBYTE(v592) = 30;
                  }
                  uint64_t v593 = 4096 << v592;
                  unint64_t v585 = (unint64_t)operator new(4096 << v592, (std::align_val_t)8uLL);
                  unsigned int v594 = *(_DWORD *)(v580 + 152);
                  if (v594 >= *(_DWORD *)(v580 + 156)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*(void *)(v580 + 144) + 8 * v594) = v585;
                  ++*(_DWORD *)(v580 + 152);
                  *(void *)(v580 + 136) = v585 + v593;
                }
                else
                {
                  unint64_t v585 = (v584 + 7) & 0xFFFFFFFFFFFFFFF8;
                }
                *(void *)(v580 + 128) = v585 + 80;
                *(void *)unint64_t v585 = v582;
                *(void *)(v585 + 8) = 0;
                *(_DWORD *)(v585 + 16) = v583;
                *(unsigned char *)(v585 + 20) = 0;
                *(void *)(v585 + 24) = v618;
                *(_WORD *)(v585 + 32) = 6;
                *(unsigned char *)(v585 + 34) = 3;
                *(_OWORD *)(v585 + 40) = 0u;
                *(_OWORD *)(v585 + 56) = 0u;
                *(void *)(v585 + 72) = 0;
                *(_WORD *)(v585 + 36) = 1;
                sub_1CC737D1C((void *)v6, (int *)&v630, (int *)&v623, (llvm::MachineMemOperand *)v585);
                return 1;
              case 287:
                uint64_t v293 = (int *)sub_1CC6EF0A4(v9, *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
                if (v294) {
                  int v295 = *v293;
                }
                else {
                  int v295 = 0;
                }
                int v412 = *(_DWORD *)((*(uint64_t (**)(void))(**(void **)(*(void *)(v9 + 864) + 16)
                                                                     + 120))(*(void *)(*(void *)(v9 + 864) + 16))
                                 + 88);
                if (!v412) {
                  goto LABEL_97;
                }
                LODWORD(v623) = v412;
                DWORD2(v623) = 1;
                LODWORD(v630) = v295;
                goto LABEL_152;
              case 288:
                uint64_t v282 = (int *)sub_1CC6EF0A4(v9, v8);
                if (v283) {
                  int v284 = *v282;
                }
                else {
                  int v284 = 0;
                }
                int v89 = *(_DWORD *)((*(uint64_t (**)(void))(**(void **)(*(void *)(v9 + 864) + 16) + 120))(*(void *)(*(void *)(v9 + 864) + 16))
                                + 88);
                if (!v89) {
                  goto LABEL_97;
                }
                LODWORD(v623) = v284;
                DWORD2(v623) = 1;
                goto LABEL_151;
              case 295:
              case 302:
                goto LABEL_235;
              case 300:
                uint64_t v280 = v9;
                uint64_t v281 = 149;
                goto LABEL_422;
              case 301:
                uint64_t v285 = v9;
                uint64_t v286 = v8;
                uint64_t v287 = 137;
                goto LABEL_419;
              case 303:
                uint64_t v533 = v9;
                uint64_t v534 = 160;
                goto LABEL_763;
              case 304:
                uint64_t v533 = v9;
                uint64_t v534 = 162;
                goto LABEL_763;
              case 305:
                uint64_t v280 = v9;
                uint64_t v281 = 198;
                goto LABEL_422;
              case 306:
                uint64_t v280 = v9;
                uint64_t v281 = 197;
                goto LABEL_422;
              case 307:
                uint64_t v533 = v9;
                uint64_t v534 = 156;
                goto LABEL_763;
              case 308:
                uint64_t v533 = v9;
                uint64_t v534 = 158;
LABEL_763:
                sub_1CD615BE8(v533, v534, v8, v6);
                return 1;
              case 309:
                uint64_t v285 = v9;
                uint64_t v286 = v8;
                uint64_t v287 = 145;
                goto LABEL_419;
              case 310:
                uint64_t v280 = v9;
                uint64_t v281 = 153;
                goto LABEL_422;
              case 311:
                uint64_t v280 = v9;
                uint64_t v281 = 151;
LABEL_422:
                sub_1CC6F1D98(v280, v281, v8, v6);
                return 1;
              case 312:
                uint64_t v285 = v9;
                uint64_t v286 = v8;
                uint64_t v287 = 139;
LABEL_419:
                sub_1CC6F6FAC(v285, v286, v287, v6);
                return 1;
              case 315:
                uint64_t v274 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v9 + 864) + 16) + 120))(*(void *)(*(void *)(v9 + 864) + 16));
                uint64_t v275 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
                unsigned int v276 = (*(uint64_t (**)(void))(*(void *)v274 + 632))();
                uint64_t v277 = (int *)sub_1CC6EF0A4(v9, v275);
                if (v278) {
                  int v279 = *v277;
                }
                else {
                  int v279 = 0;
                }
                uint64_t v406 = v276 >> 3;
                LODWORD(v623) = v279;
                LODWORD(v624) = 0;
                uint64_t v407 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, long long *, uint64_t, void))(*(void *)v6 + 32))(v6, 122, 0, 0, &v623, 1, 0);
                v409 = v408;
                uint64_t v410 = *(void *)(v9 + 864);
                v619[0] = v275 & 0xFFFFFFFFFFFFFFFBLL;
                v619[1] = 0;
                char v621 = 0;
                unsigned int v411 = *(_DWORD *)(*(void *)v275 + 8);
                if ((v411 & 0xFE) == 0x12) {
                  unsigned int v411 = *(_DWORD *)(**(void **)(*(void *)v275 + 16) + 8);
                }
                unsigned int v620 = v411 >> 8;
                long long v630 = 0u;
                long long v631 = 0u;
                MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v410, (uint64_t)v619, 2, v406, 0, &v630, 0, 1, 0, 0, 0);
                uint64_t v145 = v409;
                long long v146 = (llvm::MachineFunction *)v407;
                goto LABEL_234;
              case 319:
              case 322:
                int v203 = (int *)sub_1CC6EF0A4(v9, v8);
                if (v204) {
                  int v205 = *v203;
                }
                else {
                  int v205 = 0;
                }
                uint64_t v320 = (int *)sub_1CC6EF0A4(v9, *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
                if (v321) {
                  int v322 = *v320;
                }
                else {
                  int v322 = 0;
                }
                uint64_t v323 = (int *)sub_1CC6EF0A4(v9, *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
                if (v324) {
                  int v325 = *v323;
                }
                else {
                  int v325 = 0;
                }
                char v326 = *(unsigned char *)(v8 + 17);
                if ((v326 & 2) != 0)
                {
                  BOOL v332 = v19 == 319;
                  if (v19 == 319) {
                    uint64_t v333 = 241;
                  }
                  else {
                    uint64_t v333 = 242;
                  }
                  if (v332) {
                    uint64_t v334 = 163;
                  }
                  else {
                    uint64_t v334 = 165;
                  }
                  if (v205 < 0 && (uint64_t v335 = *(void *)(v9 + 872), (v205 & 0x7FFFFFFFu) < *(_DWORD *)(v335 + 432))) {
                    uint64_t v336 = *(void *)(*(void *)(v335 + 424) + 8 * (v205 & 0x7FFFFFFF));
                  }
                  else {
                    uint64_t v336 = 0;
                  }
                  unsigned int v337 = 0;
                  *(void *)&long long v623 = v336;
                  DWORD2(v623) = 0;
                  LODWORD(v630) = v325;
                  LODWORD(v631) = 0;
                  unsigned int v338 = *(unsigned __int8 *)(v8 + 16);
                  HIDWORD(v340) = v338 - 41;
                  LODWORD(v340) = v338 - 41;
                  unsigned int v339 = v340 >> 1;
                  if (v339 <= 6 && ((1 << v339) & 0x47) != 0) {
                    unsigned int v337 = (v326 & 6) << 10;
                  }
                  if (v338 <= 0x37 && ((1 << v338) & 0xC1800000000000) != 0) {
                    v337 |= (v326 & 2) << 12;
                  }
                  if (sub_1CB845E74(v8))
                  {
                    int v341 = *(unsigned __int8 *)(v8 + 17) >> 1;
                    if (v341 == 127) {
                      int v341 = -1;
                    }
                    v337 |= (8 * v341) & 0x3F0 | ((v341 & 1) << 10);
                  }
                  uint64_t v342 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, v333, &v623, 1, &v630, 1, v337 | 0x100000000);
                  unsigned int v343 = 0;
                  LODWORD(v623) = v205;
                  DWORD2(v623) = 1;
                  LODWORD(v630) = v322;
                  LODWORD(v631) = 0;
                  *((void *)&v631 + 1) = v342;
                  uint64_t v632 = v344;
                  LODWORD(v633) = 1;
                  unsigned int v345 = *(unsigned __int8 *)(v8 + 16);
                  HIDWORD(v347) = v345 - 41;
                  LODWORD(v347) = v345 - 41;
                  unsigned int v346 = v347 >> 1;
                  if (v346 <= 6 && ((1 << v346) & 0x47) != 0) {
                    unsigned int v343 = (*(unsigned char *)(v8 + 17) & 6) << 10;
                  }
                  if (v345 <= 0x37 && ((1 << v345) & 0xC1800000000000) != 0) {
                    unsigned int v343 = v343 & 0xFFFFDFFF | ((((*(unsigned char *)(v8 + 17) & 2) >> 1) & 1) << 13);
                  }
                  if (sub_1CB845E74(v8))
                  {
                    int v348 = *(unsigned __int8 *)(v8 + 17) >> 1;
                    if (v348 == 127) {
                      int v348 = -1;
                    }
                    v343 |= (8 * v348) & 0x3F0 | ((v348 & 1) << 10);
                  }
                  uint64_t v95 = v343 | 0x100000000;
                  uint64_t v90 = *(void (**)(void, void, void, void, void, void, void))(*(void *)v6 + 32);
                  uint64_t v91 = &v623;
                  uint64_t v92 = &v630;
                  uint64_t v93 = v6;
                  uint64_t v94 = v334;
                }
                else
                {
                  unsigned int v327 = 0;
                  if (v19 == 319) {
                    uint64_t v328 = 239;
                  }
                  else {
                    uint64_t v328 = 240;
                  }
                  LODWORD(v623) = v205;
                  DWORD2(v623) = 1;
                  LODWORD(v630) = v322;
                  LODWORD(v631) = 0;
                  DWORD2(v631) = v325;
                  LODWORD(v633) = 0;
                  HIDWORD(v330) = *(unsigned __int8 *)(v8 + 16) - 41;
                  LODWORD(v330) = HIDWORD(v330);
                  unsigned int v329 = v330 >> 1;
                  if (v329 <= 6 && ((1 << v329) & 0x47) != 0) {
                    unsigned int v327 = (v326 & 6) << 10;
                  }
                  if (sub_1CB845E74(v8))
                  {
                    int v331 = *(unsigned __int8 *)(v8 + 17) >> 1;
                    if (v331 == 127) {
                      int v331 = -1;
                    }
                    v327 |= (8 * v331) & 0x3F0 | ((v331 & 1) << 10);
                  }
                  uint64_t v95 = v327 | 0x100000000;
                  uint64_t v90 = *(void (**)(void, void, void, void, void, void, void))(*(void *)v6 + 32);
                  uint64_t v91 = &v623;
                  uint64_t v92 = &v630;
                  uint64_t v93 = v6;
                  uint64_t v94 = v328;
                }
                goto LABEL_591;
              default:
                if (v19 != 383) {
                  goto LABEL_97;
                }
                uint64_t v206 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
                unint64_t v207 = *(llvm::MachineFunction **)(v6 + 8);
                uint64_t v208 = *(void *)(*(void *)(v6 + 16) + 8) + 11184;
                uint64_t v209 = *(unsigned __int8 **)(v6 + 32);
                *(void *)&long long v623 = v209;
                if (v209) {
                  llvm::MetadataTracking::track((uint64_t)&v623, v209, 2);
                }
                uint64_t v210 = llvm::MachineFunction::CreateMachineInstr(v207, v208, (unsigned __int8 **)&v623, 0);
                if (!(void)v623) {
                  goto LABEL_344;
                }
                int v601 = *(unsigned __int8 *)v623;
                if ((v601 - 4) > 0x1E)
                {
                  if ((v601 - 3) >= 0xFFFFFFFE) {
                    uint64_t v607 = v623;
                  }
                  else {
                    uint64_t v607 = 0;
                  }
                  if ((v601 - 3) >= 0xFFFFFFFE)
                  {
                    unint64_t v603 = v607 + 8;
LABEL_936:
                    *(void *)&long long v630 = &v623;
                    sub_1CC5FA668(v603 + 16, &v630);
                    goto LABEL_344;
                  }
                  if (v601 == 3) {
                    *(void *)(v623 + 8) = 0;
                  }
                }
                else if ((*(unsigned char *)(v623 + 1) & 0x7F) == 2 || *(_DWORD *)(v623 + 12))
                {
                  uint64_t v602 = *(void *)(v623 + 16);
                  if ((v602 & 4) != 0)
                  {
                    unint64_t v603 = v602 & 0xFFFFFFFFFFFFFFF8;
                    if (v603) {
                      goto LABEL_936;
                    }
                  }
                }
LABEL_344:
                uint64_t v211 = *(unint64_t **)(v6 + 48);
                uint64_t v212 = *(void *)(*(void *)(v6 + 40) + 40);
                *((void *)v210 + 3) = v212;
                uint64_t v213 = *(void *)(v212 + 32);
                uint64_t v214 = *((unsigned int *)v210 + 10);
                if (v214)
                {
                  uint64_t v551 = *((void *)v210 + 4);
                  uint64_t v552 = *(void *)(v213 + 40);
                  uint64_t v553 = 32 * v214;
                  do
                  {
                    if (!*(unsigned char *)v551)
                    {
                      uint64_t v554 = *(unsigned int *)(v551 + 4);
                      if ((int)v554 >= 0) {
                        v555 = (uint64_t *)(*(void *)(v552 + 272) + 8 * v554);
                      }
                      else {
                        v555 = (uint64_t *)(*(void *)(v552 + 24) + 16 * (v554 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v556 = *v555;
                      if (*v555)
                      {
                        uint64_t v557 = *(void *)(v556 + 16);
                        *(void *)(v556 + 16) = v551;
                        *(void *)(v551 + 16) = v557;
                        if (*(unsigned char *)(v551 + 3))
                        {
                          *(void *)(v551 + 24) = v556;
                        }
                        else
                        {
                          *(void *)(v551 + 24) = 0;
                          v555 = (uint64_t *)(v557 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v551 + 16) = v551;
                        *(void *)(v551 + 24) = 0;
                      }
                      uint64_t *v555 = v551;
                    }
                    v551 += 32;
                    v553 -= 32;
                  }
                  while (v553);
                }
                uint64_t v215 = *(void *)(v213 + 728);
                if (v215) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v215 + 24))(v215, v210);
                }
                unint64_t v216 = *v211 & 0xFFFFFFFFFFFFFFF8;
                *(void *)uint64_t v210 = v216 | *(void *)v210 & 7;
                *((void *)v210 + 1) = v211;
                *(void *)(v216 + 8) = v210;
                *uint64_t v211 = *v211 & 7 | (unint64_t)v210;
                uint64_t v217 = *(void *)(v6 + 56);
                if (v217) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v217 + 24))(v217, v210);
                }
                uint64_t v218 = *(void *)(v206 + 24);
                LODWORD(v630) = 14;
                *((void *)&v630 + 1) = 0;
                *(void *)&long long v631 = v218;
                llvm::MachineInstr::addOperand(v210, v207, (const llvm::MachineOperand *)&v630);
                uint64_t v219 = (int *)sub_1CC6EF0A4(v9, *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
                if (v220) {
                  int v221 = *v219;
                }
                else {
                  int v221 = 0;
                }
                *((void *)&v630 + 1) = 0;
                long long v631 = 0uLL;
                DWORD1(v630) = v221;
                LODWORD(v630) = 0;
                int v351 = v210;
                uint64_t v353 = v207;
LABEL_608:
                llvm::MachineInstr::addOperand(v351, v353, (const llvm::MachineOperand *)&v630);
                return 1;
            }
        }
      }
    }
    return sub_1CC6F70D4(v9, v8, v6);
  }
}

BOOL sub_1CC6FBE60(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v168 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(llvm::MCContext **)(*(void *)(a1 + 864) + 24);
  unint64_t v7 = *(unsigned __int8 **)(a2 - 96);
  uint64_t v8 = *(void *)(a2 - 64);
  uint64_t v9 = *(void *)(a2 - 32);
  if (v9 && !*(unsigned char *)(v9 + 16) && *(void *)(v9 + 24) == *(void *)(a2 + 72) && (*(unsigned char *)(v9 + 33) & 0x20) != 0) {
    return 0;
  }
  uint64_t v10 = 0;
  if (sub_1CC646CF4(a2, 0)) {
    return v10;
  }
  if (sub_1CC646CF4(a2, 3)) {
    return 0;
  }
  for (uint64_t i = *(void *)(v8 + 48); ; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v12 = i - 24;
    if (!i) {
      uint64_t v12 = 0;
    }
    if (*(unsigned char *)(v12 + 16) != 83) {
      break;
    }
  }
  if (*(unsigned char *)(i - 8) != 94) {
    return 0;
  }
  uint64_t v158 = v7;
  uint64_t v159 = (unsigned __int8 *)v8;
  uint64_t v13 = *(void *)(a2 - 32);
  int v14 = *(unsigned __int8 *)(v13 + 16);
  if (v14 == 24 && !*(unsigned char *)(v13 + 88))
  {
    uint64_t v10 = 0;
    if ((sub_1CD615E00(a1, a2, (uint64_t)a3) & 1) == 0) {
      return v10;
    }
    TempSymbol = 0;
    uint64_t v26 = 0;
    goto LABEL_34;
  }
  char v163 = "tmp";
  __int16 v167 = 259;
  TempSymbol = (llvm::MCSymbol *)llvm::MCContext::createTempSymbol(v6, (const llvm::Twine *)&v163, 1);
  unsigned int v15 = (llvm::MachineFunction *)a3[1];
  uint64_t v16 = *(void *)(a3[2] + 8) + 192;
  uint64_t v17 = (unsigned __int8 *)a3[4];
  uint64_t v162 = v17;
  if (v17) {
    llvm::MetadataTracking::track((uint64_t)&v162, v17, 2);
  }
  uint64_t v18 = llvm::MachineFunction::CreateMachineInstr(v15, v16, &v162, 0);
  if (!v162) {
    goto LABEL_18;
  }
  int v146 = *v162;
  if ((v146 - 4) > 0x1E)
  {
    if ((v146 - 3) >= 0xFFFFFFFE) {
      unint64_t v152 = v162;
    }
    else {
      unint64_t v152 = 0;
    }
    if ((v146 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v148 = (unint64_t)(v152 + 8);
LABEL_219:
      char v163 = &v162;
      sub_1CC5FA668(v148 + 16, &v163);
      goto LABEL_18;
    }
    if (v146 == 3) {
      *((void *)v162 + 1) = 0;
    }
  }
  else if ((v162[1] & 0x7F) == 2 || *((_DWORD *)v162 + 3))
  {
    uint64_t v147 = *((void *)v162 + 2);
    if ((v147 & 4) != 0)
    {
      unint64_t v148 = v147 & 0xFFFFFFFFFFFFFFF8;
      if (v148) {
        goto LABEL_219;
      }
    }
  }
LABEL_18:
  uint64_t v19 = (unint64_t *)a3[6];
  uint64_t v20 = *(void *)(a3[5] + 40);
  *((void *)v18 + 3) = v20;
  uint64_t v21 = *(void *)(v20 + 32);
  uint64_t v22 = *((unsigned int *)v18 + 10);
  if (v22)
  {
    uint64_t v127 = *((void *)v18 + 4);
    uint64_t v128 = *(void *)(v21 + 40);
    uint64_t v129 = 32 * v22;
    do
    {
      if (!*(unsigned char *)v127)
      {
        uint64_t v130 = *(unsigned int *)(v127 + 4);
        if ((int)v130 >= 0) {
          uint64_t v131 = (uint64_t *)(*(void *)(v128 + 272) + 8 * v130);
        }
        else {
          uint64_t v131 = (uint64_t *)(*(void *)(v128 + 24) + 16 * (v130 & 0x7FFFFFFF) + 8);
        }
        uint64_t v132 = *v131;
        if (*v131)
        {
          uint64_t v133 = *(void *)(v132 + 16);
          *(void *)(v132 + 16) = v127;
          *(void *)(v127 + 16) = v133;
          if (*(unsigned char *)(v127 + 3))
          {
            *(void *)(v127 + 24) = v132;
          }
          else
          {
            *(void *)(v127 + 24) = 0;
            uint64_t v131 = (uint64_t *)(v133 + 24);
          }
        }
        else
        {
          *(void *)(v127 + 16) = v127;
          *(void *)(v127 + 24) = 0;
        }
        *uint64_t v131 = v127;
      }
      v127 += 32;
      v129 -= 32;
    }
    while (v129);
  }
  uint64_t v23 = *(void *)(v21 + 728);
  if (v23) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v23 + 24))(v23, v18);
  }
  unint64_t v24 = *v19 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v18 = v24 | *(void *)v18 & 7;
  *((void *)v18 + 1) = v19;
  *(void *)(v24 + 8) = v18;
  unint64_t *v19 = *v19 & 7 | (unint64_t)v18;
  uint64_t v25 = a3[7];
  if (v25) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v25 + 24))(v25, v18);
  }
  uint64_t v164 = 0;
  uint64_t v165 = (uint64_t)TempSymbol;
  int v166 = 0;
  char v163 = (void *)15;
  llvm::MachineInstr::addOperand(v18, v15, (const llvm::MachineOperand *)&v163);
  if (v14 != 24)
  {
    if (sub_1CC6F70D4(a1, a2, (uint64_t)a3)) {
      goto LABEL_25;
    }
    return 0;
  }
  if ((sub_1CD615E00(a1, a2, (uint64_t)a3) & 1) == 0) {
    return 0;
  }
LABEL_25:
  char v163 = "tmp";
  __int16 v167 = 259;
  uint64_t v26 = llvm::MCContext::createTempSymbol(v6, (const llvm::Twine *)&v163, 1);
  uint64_t v27 = (llvm::MachineFunction *)a3[1];
  uint64_t v28 = *(void *)(a3[2] + 8) + 192;
  uint64_t v29 = (unsigned __int8 *)a3[4];
  uint64_t v162 = v29;
  if (v29) {
    llvm::MetadataTracking::track((uint64_t)&v162, v29, 2);
  }
  uint64_t v30 = llvm::MachineFunction::CreateMachineInstr(v27, v28, &v162, 0);
  if (!v162) {
    goto LABEL_28;
  }
  int v149 = *v162;
  if ((v149 - 4) > 0x1E)
  {
    if ((v149 - 3) >= 0xFFFFFFFE) {
      unsigned int v153 = v162;
    }
    else {
      unsigned int v153 = 0;
    }
    if ((v149 - 3) < 0xFFFFFFFE)
    {
      if (v149 == 3) {
        *((void *)v162 + 1) = 0;
      }
      goto LABEL_28;
    }
    unint64_t v151 = (unint64_t)(v153 + 8);
  }
  else
  {
    if ((v162[1] & 0x7F) != 2 && !*((_DWORD *)v162 + 3)) {
      goto LABEL_28;
    }
    uint64_t v150 = *((void *)v162 + 2);
    if ((v150 & 4) == 0) {
      goto LABEL_28;
    }
    unint64_t v151 = v150 & 0xFFFFFFFFFFFFFFF8;
    if (!v151) {
      goto LABEL_28;
    }
  }
  char v163 = &v162;
  sub_1CC5FA668(v151 + 16, &v163);
LABEL_28:
  uint64_t v31 = (unint64_t *)a3[6];
  uint64_t v32 = *(void *)(a3[5] + 40);
  *((void *)v30 + 3) = v32;
  uint64_t v33 = *(void *)(v32 + 32);
  uint64_t v34 = *((unsigned int *)v30 + 10);
  uint64_t v8 = (uint64_t)v159;
  if (v34)
  {
    uint64_t v137 = *((void *)v30 + 4);
    uint64_t v138 = *(void *)(v33 + 40);
    uint64_t v139 = 32 * v34;
    do
    {
      if (!*(unsigned char *)v137)
      {
        uint64_t v140 = *(unsigned int *)(v137 + 4);
        if ((int)v140 >= 0) {
          uint64_t v141 = (uint64_t *)(*(void *)(v138 + 272) + 8 * v140);
        }
        else {
          uint64_t v141 = (uint64_t *)(*(void *)(v138 + 24) + 16 * (v140 & 0x7FFFFFFF) + 8);
        }
        uint64_t v142 = *v141;
        if (*v141)
        {
          uint64_t v143 = *(void *)(v142 + 16);
          *(void *)(v142 + 16) = v137;
          *(void *)(v137 + 16) = v143;
          if (*(unsigned char *)(v137 + 3))
          {
            *(void *)(v137 + 24) = v142;
          }
          else
          {
            *(void *)(v137 + 24) = 0;
            uint64_t v141 = (uint64_t *)(v143 + 24);
          }
        }
        else
        {
          *(void *)(v137 + 16) = v137;
          *(void *)(v137 + 24) = 0;
        }
        *uint64_t v141 = v137;
      }
      v137 += 32;
      v139 -= 32;
    }
    while (v139);
  }
  uint64_t v35 = *(void *)(v33 + 728);
  if (v35) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v35 + 24))(v35, v30);
  }
  unint64_t v36 = *v31 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v30 = v36 | *(void *)v30 & 7;
  *((void *)v30 + 1) = v31;
  *(void *)(v36 + 8) = v30;
  unint64_t *v31 = *v31 & 7 | (unint64_t)v30;
  uint64_t v37 = a3[7];
  if (v37) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v37 + 24))(v37, v30);
  }
  uint64_t v164 = 0;
  uint64_t v165 = v26;
  int v166 = 0;
  char v163 = (void *)15;
  llvm::MachineInstr::addOperand(v30, v27, (const llvm::MachineOperand *)&v163);
  LOBYTE(v10) = 1;
LABEL_34:
  char v163 = &v165;
  uint64_t v164 = 0x100000000;
  uint64_t v39 = *(void *)(a1 + 944);
  uint64_t v157 = a3[5];
  if (v39) {
    LODWORD(v40) = llvm::BranchProbabilityInfo::getEdgeProbability(v39, *(void *)(a3[5] + 16), v8);
  }
  else {
    LODWORD(v40) = 0;
  }
  uint64_t v41 = *(void *)(v8 + 56);
  int v42 = *(_DWORD *)(v41 + 20);
  if ((v42 & 0x40000000) != 0) {
    int v43 = *(llvm::Value ***)(v41 - 8);
  }
  else {
    int v43 = (llvm::Value **)(v41 - 32 * (v42 & 0x7FFFFFF));
  }
  unsigned int v44 = llvm::classifyEHPersonality(*v43, v38);
  BOOL v45 = v44 != 12;
  if (v44 == 12) {
    goto LABEL_150;
  }
  char v156 = v10;
  int v154 = (llvm::MCSymbol *)v26;
  unsigned int v155 = a3;
  unsigned int v46 = v44 - 7;
  uint64_t v161 = (_DWORD *)(a1 + 496);
  unsigned int v47 = v44 - 9;
  uint64_t v48 = v8;
  while (1)
  {
    for (uint64_t j = *(void *)(v48 + 48); ; uint64_t j = *(void *)(j + 8))
    {
      uint64_t v50 = j - 24;
      uint64_t v51 = j ? j - 24 : 0;
      if (*(unsigned char *)(v51 + 16) != 83) {
        break;
      }
    }
    int v52 = *(unsigned __int8 *)(j - 8);
    if (v52 == 38)
    {
      int v54 = *(_DWORD *)(j - 4);
      if ((v54 & 0x40000000) != 0)
      {
        uint64_t v56 = *(void *)(j - 32);
        uint64_t v55 = v54 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v55 = v54 & 0x7FFFFFF;
        uint64_t v56 = v50 - 32 * v55;
      }
      int v57 = *(_WORD *)(j - 6) & 1;
      uint64_t v58 = 1;
      if (*(_WORD *)(j - 6)) {
        uint64_t v58 = 2;
      }
      if (v58 == v55)
      {
LABEL_80:
        if (!v57) {
          goto LABEL_114;
        }
        int v73 = *(_DWORD *)(j - 4);
        if ((v73 & 0x40000000) != 0) {
          uint64_t v74 = *(void *)(j - 32);
        }
        else {
          uint64_t v74 = v50 - 32 * (v73 & 0x7FFFFFF);
        }
        uint64_t v53 = *(void *)(v74 + 32);
        uint64_t v75 = *(void *)(a1 + 944);
        if (v75 && v53) {
          unint64_t v40 = (llvm::BranchProbabilityInfo::getEdgeProbability(v75, v48, *(void *)(v74 + 32))
        }
               * (unint64_t)v40
               + 0x40000000) >> 31;
        goto LABEL_87;
      }
      int v59 = (unsigned __int8 **)(v56 + 32 * v55);
      uint64_t v60 = (unsigned __int8 **)(v56 + 32 * v58);
      while (1)
      {
        int v61 = *v60;
        uint64_t v162 = *v60;
        int v62 = *(_DWORD *)(a1 + 512);
        if (!v62) {
          break;
        }
        uint64_t v63 = *(void *)(a1 + 496);
        int v64 = v62 - 1;
        unsigned int v65 = v64 & ((v61 >> 4) ^ (v61 >> 9));
        unint64_t v66 = (unsigned __int8 **)(v63 + 16 * v65);
        uint64_t v67 = *v66;
        if (v61 != *v66)
        {
          unint64_t v68 = 0;
          int v69 = 1;
          while (v67 != (unsigned __int8 *)-4096)
          {
            if (v68) {
              BOOL v70 = 0;
            }
            else {
              BOOL v70 = v67 == (unsigned __int8 *)-8192;
            }
            if (v70) {
              unint64_t v68 = v66;
            }
            unsigned int v71 = v65 + v69++;
            unsigned int v65 = v71 & v64;
            unint64_t v66 = (unsigned __int8 **)(v63 + 16 * v65);
            uint64_t v67 = *v66;
            if (v61 == *v66) {
              goto LABEL_69;
            }
          }
          if (v68) {
            BOOL v72 = v68;
          }
          else {
            BOOL v72 = v66;
          }
          goto LABEL_78;
        }
LABEL_69:
        sub_1CC3C6E9C((uint64_t)&v163, (uint64_t)v66[1], v40);
        if (v47 <= 1) {
          *(unsigned char *)(*((void *)v163 + 2 * v164 - 2) + 189) = 1;
        }
        if (v46 >= 2) {
          *(unsigned char *)(*((void *)v163 + 2 * v164 - 2) + 187) = 1;
        }
        v60 += 4;
        if (v60 == v59)
        {
          int v57 = *(_WORD *)(j - 6) & 1;
          goto LABEL_80;
        }
      }
      BOOL v72 = 0;
LABEL_78:
      unint64_t v66 = (unsigned __int8 **)sub_1CB883BA0(v161, (uint64_t)&v162, &v162, v72);
      *unint64_t v66 = v162;
      v66[1] = 0;
      goto LABEL_69;
    }
    if (v52 == 79)
    {
      uint64_t v162 = (unsigned __int8 *)v48;
      int v87 = *(_DWORD *)(a1 + 512);
      if (v87)
      {
        uint64_t v88 = *(void *)(a1 + 496);
        int v89 = v87 - 1;
        unsigned int v90 = v89 & ((v48 >> 4) ^ (v48 >> 9));
        uint64_t v91 = (void *)(v88 + 16 * v90);
        uint64_t v92 = *v91;
        if (v48 == *v91)
        {
LABEL_113:
          sub_1CC3C6E9C((uint64_t)&v163, v91[1], v40);
          uint64_t v97 = *((void *)v163 + 2 * v164 - 2);
          *(unsigned char *)(v97 + 187) = 1;
          *(unsigned char *)(v97 + 189) = 1;
          goto LABEL_114;
        }
        uint64_t v93 = 0;
        int v94 = 1;
        while (v92 != -4096)
        {
          if (v93) {
            BOOL v95 = 0;
          }
          else {
            BOOL v95 = v92 == -8192;
          }
          if (v95) {
            uint64_t v93 = v91;
          }
          unsigned int v96 = v90 + v94++;
          unsigned int v90 = v96 & v89;
          uint64_t v91 = (void *)(v88 + 16 * v90);
          uint64_t v92 = *v91;
          if (v48 == *v91) {
            goto LABEL_113;
          }
        }
        if (v93) {
          uint64_t v145 = v93;
        }
        else {
          uint64_t v145 = v91;
        }
      }
      else
      {
        uint64_t v145 = 0;
      }
      uint64_t v91 = sub_1CB883BA0(v161, (uint64_t)&v162, &v162, v145);
      *uint64_t v91 = v162;
      v91[1] = 0;
      goto LABEL_113;
    }
    if (v52 == 94) {
      break;
    }
    uint64_t v53 = v48;
LABEL_87:
    uint64_t v48 = v53;
    if (!v53) {
      goto LABEL_114;
    }
  }
  uint64_t v162 = (unsigned __int8 *)v48;
  int v77 = *(_DWORD *)(a1 + 512);
  if (!v77)
  {
    unint64_t v144 = 0;
    goto LABEL_193;
  }
  uint64_t v78 = *(void *)(a1 + 496);
  int v79 = v77 - 1;
  unsigned int v80 = v79 & ((v48 >> 4) ^ (v48 >> 9));
  uint64_t v81 = (void *)(v78 + 16 * v80);
  uint64_t v82 = *v81;
  if (v48 != *v81)
  {
    uint64_t v83 = 0;
    int v84 = 1;
    while (v82 != -4096)
    {
      if (v83) {
        BOOL v85 = 0;
      }
      else {
        BOOL v85 = v82 == -8192;
      }
      if (v85) {
        uint64_t v83 = v81;
      }
      unsigned int v86 = v80 + v84++;
      unsigned int v80 = v86 & v79;
      uint64_t v81 = (void *)(v78 + 16 * v80);
      uint64_t v82 = *v81;
      if (v48 == *v81) {
        goto LABEL_102;
      }
    }
    if (v83) {
      unint64_t v144 = v83;
    }
    else {
      unint64_t v144 = v81;
    }
LABEL_193:
    uint64_t v81 = sub_1CB883BA0(v161, (uint64_t)&v162, &v162, v144);
    *uint64_t v81 = v162;
    v81[1] = 0;
  }
LABEL_102:
  sub_1CC3C6E9C((uint64_t)&v163, v81[1], v40);
LABEL_114:
  uint64_t v162 = v159;
  int v98 = *(_DWORD *)(a1 + 512);
  if (!v98)
  {
    int v135 = 0;
    unsigned int v108 = v155;
    uint64_t v105 = v157;
    int v104 = v158;
    goto LABEL_175;
  }
  uint64_t v99 = *(void *)(a1 + 496);
  int v100 = v98 - 1;
  unsigned int v101 = (v98 - 1) & ((v159 >> 4) ^ (v159 >> 9));
  unint64_t v102 = (unsigned __int8 **)(v99 + 16 * v101);
  int v103 = *v102;
  uint64_t v105 = v157;
  int v104 = v158;
  if (v159 == *v102)
  {
    int v111 = (llvm::MachineBasicBlock *)v102[1];
    uint64_t v162 = v158;
    unsigned int v108 = v155;
LABEL_127:
    unsigned int v112 = v100 & ((v104 >> 4) ^ (v104 >> 9));
    unint64_t v113 = (unsigned __int8 **)(v99 + 16 * v112);
    unint64_t v114 = *v113;
    if (v104 != *v113)
    {
      uint64_t v115 = 0;
      int v116 = 1;
      while (v114 != (unsigned __int8 *)-4096)
      {
        if (v115) {
          BOOL v117 = 0;
        }
        else {
          BOOL v117 = v114 == (unsigned __int8 *)-8192;
        }
        if (v117) {
          uint64_t v115 = v113;
        }
        unsigned int v118 = v112 + v116++;
        unsigned int v112 = v118 & v100;
        unint64_t v113 = (unsigned __int8 **)(v99 + 16 * v112);
        unint64_t v114 = *v113;
        if (v104 == *v113) {
          goto LABEL_136;
        }
      }
      if (v115) {
        uint64_t v134 = v115;
      }
      else {
        uint64_t v134 = v113;
      }
      goto LABEL_171;
    }
  }
  else
  {
    int v106 = 0;
    int v107 = 1;
    unsigned int v108 = v155;
    while (v103 != (unsigned __int8 *)-4096)
    {
      if (v106) {
        BOOL v109 = 0;
      }
      else {
        BOOL v109 = v103 == (unsigned __int8 *)-8192;
      }
      if (v109) {
        int v106 = v102;
      }
      unsigned int v110 = v101 + v107++;
      unsigned int v101 = v110 & v100;
      unint64_t v102 = (unsigned __int8 **)(v99 + 16 * v101);
      int v103 = *v102;
      if (v159 == *v102)
      {
        int v111 = (llvm::MachineBasicBlock *)v102[1];
        goto LABEL_125;
      }
    }
    if (v106) {
      int v135 = v106;
    }
    else {
      int v135 = v102;
    }
LABEL_175:
    unsigned int v136 = sub_1CB883BA0(v161, (uint64_t)&v162, &v162, v135);
    int v111 = 0;
    void *v136 = v162;
    v136[1] = 0;
    uint64_t v99 = *(void *)(a1 + 496);
    int v98 = *(_DWORD *)(a1 + 512);
LABEL_125:
    uint64_t v162 = v104;
    if (v98)
    {
      int v100 = v98 - 1;
      goto LABEL_127;
    }
    uint64_t v134 = 0;
LABEL_171:
    unint64_t v113 = (unsigned __int8 **)sub_1CB883BA0(v161, (uint64_t)&v162, &v162, v134);
    const char *v113 = v162;
    v113[1] = 0;
  }
LABEL_136:
  unsigned int v119 = (llvm::MachineBasicBlock *)v113[1];
  uint64_t v120 = *(void *)(a1 + 944);
  if (v120)
  {
    int EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability(v120, *(void *)(v105 + 16), *((void *)v119 + 2));
    llvm::MachineBasicBlock::addSuccessor((void *)v105, v119, EdgeProbability);
  }
  else
  {
    llvm::MachineBasicBlock::addSuccessorWithoutProb((void *)v105, v119);
  }
  if (v164)
  {
    uint64_t v122 = 16 * v164;
    unint64_t v123 = (int *)((char *)v163 + 8);
    do
    {
      uint64_t v124 = *((void *)v123 - 1);
      *(unsigned char *)(v124 + 184) = 1;
      uint64_t v125 = *(void *)(a1 + 944);
      if (v125)
      {
        int v126 = *v123;
        if (*v123 == -1) {
          int v126 = llvm::BranchProbabilityInfo::getEdgeProbability(v125, *(void *)(v105 + 16), *(void *)(v124 + 16));
        }
        llvm::MachineBasicBlock::addSuccessor((void *)v105, (void *)v124, v126);
      }
      else
      {
        llvm::MachineBasicBlock::addSuccessorWithoutProb((void *)v105, (llvm::MachineBasicBlock *)v124);
      }
      v123 += 4;
      v122 -= 16;
    }
    while (v122);
  }
  sub_1CC2BE0A8(*(unsigned int **)(v105 + 112), *(unsigned int **)(v105 + 120));
  if (v156) {
    llvm::MachineFunction::addInvoke(*(llvm::MachineFunction **)(a1 + 864), v111, TempSymbol, v154);
  }
  sub_1CC73677C(v108, (unsigned __int8 *)v119);
  BOOL v45 = 1;
LABEL_150:
  if (v163 != &v165) {
    free(v163);
  }
  return v45;
}

uint64_t sub_1CC6FCAA0(uint64_t a1, llvm **a2, void *a3)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (unsigned char *)a3[5];
  v6[184] = 1;
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 864) + 16) + 120))(*(void *)(*(void *)(a1 + 864) + 16));
  uint64_t v8 = v7;
  uint64_t v9 = **(void **)(a1 + 864);
  int v10 = *(_DWORD *)(v9 + 20);
  if ((v10 & 0x40000000) != 0) {
    uint64_t v11 = *(void **)(v9 - 8);
  }
  else {
    uint64_t v11 = (void *)(v9 - 32 * (v10 & 0x7FFFFFF));
  }
  uint64_t v12 = *v11;
  if (!(*(unsigned int (**)(uint64_t, void))(*(void *)v7 + 712))(v7, *v11)
    && !(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v8 + 720))(v8, v12)
    || *((unsigned char *)*a2 + 8) == 12)
  {
    return 1;
  }
  uint64_t v97 = v12;
  int v14 = (llvm::MachineFunction *)a3[1];
  uint64_t v15 = *(void *)(a3[2] + 8) + 192;
  uint64_t v16 = (unsigned __int8 *)a3[4];
  v99[0] = v16;
  if (v16) {
    llvm::MetadataTracking::track((uint64_t)v99, v16, 2);
  }
  MachineInstr = llvm::MachineFunction::CreateMachineInstr(v14, v15, v99, 0);
  if (v99[0])
  {
    int v90 = *v99[0];
    if ((v90 - 4) > 0x1E)
    {
      if ((v90 - 3) >= 0xFFFFFFFE) {
        uint64_t v93 = v99[0];
      }
      else {
        uint64_t v93 = 0;
      }
      if ((v90 - 3) < 0xFFFFFFFE)
      {
        if (v90 == 3) {
          *((void *)v99[0] + 1) = 0;
        }
        goto LABEL_11;
      }
      unint64_t v92 = (unint64_t)(v93 + 8);
    }
    else
    {
      if ((v99[0][1] & 0x7F) != 2 && !*((_DWORD *)v99[0] + 3)) {
        goto LABEL_11;
      }
      uint64_t v91 = *((void *)v99[0] + 2);
      if ((v91 & 4) == 0) {
        goto LABEL_11;
      }
      unint64_t v92 = v91 & 0xFFFFFFFFFFFFFFF8;
      if (!v92) {
        goto LABEL_11;
      }
    }
    int v103 = v99;
    sub_1CC5FA668(v92 + 16, &v103);
  }
LABEL_11:
  uint64_t v18 = (unint64_t *)a3[6];
  uint64_t v19 = *(void *)(a3[5] + 40);
  *((void *)MachineInstr + 3) = v19;
  uint64_t v20 = *(void *)(v19 + 32);
  uint64_t v21 = *((unsigned int *)MachineInstr + 10);
  if (v21)
  {
    uint64_t v83 = *((void *)MachineInstr + 4);
    uint64_t v84 = *(void *)(v20 + 40);
    uint64_t v85 = 32 * v21;
    do
    {
      if (!*(unsigned char *)v83)
      {
        uint64_t v86 = *(unsigned int *)(v83 + 4);
        if ((int)v86 >= 0) {
          int v87 = (uint64_t *)(*(void *)(v84 + 272) + 8 * v86);
        }
        else {
          int v87 = (uint64_t *)(*(void *)(v84 + 24) + 16 * (v86 & 0x7FFFFFFF) + 8);
        }
        uint64_t v88 = *v87;
        if (*v87)
        {
          uint64_t v89 = *(void *)(v88 + 16);
          *(void *)(v88 + 16) = v83;
          *(void *)(v83 + 16) = v89;
          if (*(unsigned char *)(v83 + 3))
          {
            *(void *)(v83 + 24) = v88;
          }
          else
          {
            *(void *)(v83 + 24) = 0;
            int v87 = (uint64_t *)(v89 + 24);
          }
        }
        else
        {
          *(void *)(v83 + 16) = v83;
          *(void *)(v83 + 24) = 0;
        }
        *int v87 = v83;
      }
      v83 += 32;
      v85 -= 32;
    }
    while (v85);
  }
  uint64_t v22 = *(void *)(v20 + 728);
  if (v22) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v22 + 24))(v22, MachineInstr);
  }
  unint64_t v23 = *v18 & 0xFFFFFFFFFFFFFFF8;
  *(void *)MachineInstr = v23 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = v18;
  *(void *)(v23 + 8) = MachineInstr;
  *uint64_t v18 = *v18 & 7 | (unint64_t)MachineInstr;
  uint64_t v24 = a3[7];
  if (v24) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v24 + 24))(v24, MachineInstr);
  }
  BOOL v95 = v6;
  uint64_t v25 = llvm::MachineFunction::addLandingPad(*(llvm::MachineFunction **)(a1 + 864), (llvm::MachineBasicBlock *)v6);
  uint64_t v104 = 0;
  uint64_t v105 = v25;
  int v106 = 0;
  int v103 = (void *)15;
  llvm::MachineInstr::addOperand(MachineInstr, v14, (const llvm::MachineOperand *)&v103);
  uint64_t v26 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 864) + 16) + 176))(*(void *)(*(void *)(a1 + 864) + 16));
  uint64_t v27 = (int *)(*(uint64_t (**)(uint64_t, void))(*(void *)v26 + 48))(v26, *(void *)(a1 + 864));
  if (v27) {
    sub_1CBA6DECC(*(void *)(*(void *)(a1 + 864) + 40) + 280, v27, 0xFFFFFFFF);
  }
  int v94 = a2;
  unint64_t LLTForType = llvm::getLLTForType(*a2, *(llvm::Type **)(a1 + 880), v28);
  uint64_t v29 = *(void *)(a1 + 872);
  int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v29, "", 0);
  unint64_t v31 = IncompleteVirtualRegister & 0x7FFFFFFF;
  *(void *)(*(void *)(v29 + 24) + 16 * v31) = 4;
  unint64_t v32 = *(unsigned int *)(v29 + 432);
  if (v31 >= v32)
  {
    uint64_t v33 = *(void *)(v29 + 440);
    uint64_t v34 = v31 + 1 - v32;
    if (v31 >= *(unsigned int *)(v29 + 436)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v35 = *(_DWORD *)(v29 + 432);
    if (v34)
    {
      unint64_t v36 = (void *)(*(void *)(v29 + 424) + 8 * *(unsigned int *)(v29 + 432));
      uint64_t v37 = ~v31 + v32;
      do
      {
        *v36++ = v33;
        BOOL v38 = __CFADD__(v37++, 1);
      }
      while (!v38);
      int v35 = *(_DWORD *)(v29 + 432);
    }
    *(_DWORD *)(v29 + 432) = v35 + v34;
  }
  *(void *)(*(void *)(v29 + 424) + 8 * v31) = LLTForType;
  uint64_t v39 = *(void *)(v29 + 8);
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 24))(v39);
  }
  LODWORD(v103) = IncompleteVirtualRegister;
  LODWORD(v104) = 1;
  (*(void (**)(void *, uint64_t, void **, uint64_t, void, void, void))(*a3 + 32))(a3, 68, &v103, 1, 0, 0, 0);
  int v103 = &v105;
  uint64_t v104 = 0x200000000;
  uint64_t v41 = *((unsigned int *)*v94 + 3);
  if (v41)
  {
    int v42 = (llvm **)*((void *)*v94 + 2);
    uint64_t v43 = 8 * v41;
    do
    {
      unint64_t v44 = llvm::getLLTForType(*v42, *(llvm::Type **)(a1 + 880), v40);
      if (v104 >= (unint64_t)HIDWORD(v104)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v103 + v104) = v44;
      LODWORD(v104) = v104 + 1;
      ++v42;
      v43 -= 8;
    }
    while (v43);
  }
  uint64_t v45 = v97;
  int v46 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 712))(v8, v97);
  if (v46)
  {
    int v47 = v46;
    uint64_t v49 = (char *)v95[20];
    unint64_t v48 = v95[21];
    if ((unint64_t)v49 >= v48)
    {
      uint64_t v51 = (char *)v95[19];
      uint64_t v52 = (v49 - v51) >> 4;
      unint64_t v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) >> 60) {
        goto LABEL_100;
      }
      uint64_t v54 = v48 - (void)v51;
      if (v54 >> 3 > v53) {
        unint64_t v53 = v54 >> 3;
      }
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v55 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v55 = v53;
      }
      if (v55)
      {
        if (v55 >> 60) {
          goto LABEL_101;
        }
        uint64_t v56 = (char *)operator new(16 * v55);
      }
      else
      {
        uint64_t v56 = 0;
      }
      int v57 = &v56[16 * v52];
      *(_WORD *)int v57 = v47;
      *((void *)v57 + 1) = -1;
      uint64_t v50 = v57 + 16;
      if (v49 != v51)
      {
        do
        {
          *((_OWORD *)v57 - 1) = *((_OWORD *)v49 - 1);
          v57 -= 16;
          v49 -= 16;
        }
        while (v49 != v51);
        uint64_t v49 = (char *)v95[19];
      }
      v95[19] = v57;
      v95[20] = v50;
      v95[21] = &v56[16 * v55];
      uint64_t v45 = v97;
      if (v49) {
        operator delete(v49);
      }
    }
    else
    {
      *(_WORD *)uint64_t v49 = v46;
      *((void *)v49 + 1) = -1;
      uint64_t v50 = v49 + 16;
    }
    v95[20] = v50;
    uint64_t v58 = (_DWORD *)sub_1CC6EF0A4(a1, v94);
    int v101 = *v58;
    int v102 = 1;
    LODWORD(v99[0]) = v47;
    int v100 = 0;
    (*(void (**)(void *, uint64_t, int *, uint64_t, unsigned __int8 **, uint64_t, void))(*a3 + 32))(a3, 19, &v101, 1, v99, 1, 0);
    int v59 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 720))(v8, v45);
    if (v59)
    {
      int v60 = v59;
      int v62 = (char *)v95[20];
      unint64_t v61 = v95[21];
      int v98 = v58;
      if ((unint64_t)v62 < v61)
      {
        *(_WORD *)int v62 = v59;
        *((void *)v62 + 1) = -1;
        uint64_t v63 = v62 + 16;
LABEL_71:
        v95[20] = v63;
        uint64_t v71 = *(void *)(a1 + 872);
        uint64_t v72 = *(void *)v103;
        int v73 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v71, "", 0);
        unint64_t v74 = v73 & 0x7FFFFFFF;
        *(void *)(*(void *)(v71 + 24) + 16 * v74) = 4;
        unint64_t v75 = *(unsigned int *)(v71 + 432);
        if (v74 >= v75)
        {
          uint64_t v76 = *(void *)(v71 + 440);
          uint64_t v77 = v74 + 1 - v75;
          if (v74 >= *(unsigned int *)(v71 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v78 = *(_DWORD *)(v71 + 432);
          if (v77)
          {
            int v79 = (void *)(*(void *)(v71 + 424) + 8 * *(unsigned int *)(v71 + 432));
            uint64_t v80 = ~v74 + v75;
            do
            {
              *v79++ = v76;
              BOOL v38 = __CFADD__(v80++, 1);
            }
            while (!v38);
            int v78 = *(_DWORD *)(v71 + 432);
          }
          *(_DWORD *)(v71 + 432) = v78 + v77;
        }
        *(void *)(*(void *)(v71 + 424) + 8 * v74) = v72;
        uint64_t v81 = *(void *)(v71 + 8);
        if (v81) {
          (*(void (**)(uint64_t))(*(void *)v81 + 24))(v81);
        }
        uint64_t v13 = 1;
        int v101 = v73;
        int v102 = 1;
        LODWORD(v99[0]) = v60;
        int v100 = 0;
        (*(void (**)(void *, uint64_t, int *, uint64_t, unsigned __int8 **, uint64_t, void))(*a3 + 32))(a3, 19, &v101, 1, v99, 1, 0);
        int v101 = v98[1];
        int v102 = 1;
        LODWORD(v99[0]) = v73;
        int v100 = 0;
        sub_1CC7382B0((uint64_t)a3);
        goto LABEL_82;
      }
      int v64 = (unsigned char *)v95[19];
      uint64_t v65 = (v62 - v64) >> 4;
      unint64_t v66 = v65 + 1;
      if (!((unint64_t)(v65 + 1) >> 60))
      {
        uint64_t v67 = v61 - (void)v64;
        if (v67 >> 3 > v66) {
          unint64_t v66 = v67 >> 3;
        }
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v68 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v66;
        }
        if (!v68)
        {
          int v69 = 0;
          goto LABEL_66;
        }
        if (!(v68 >> 60))
        {
          int v69 = (char *)operator new(16 * v68);
LABEL_66:
          BOOL v70 = &v69[16 * v65];
          *(_WORD *)BOOL v70 = v60;
          *((void *)v70 + 1) = -1;
          uint64_t v63 = v70 + 16;
          if (v62 != v64)
          {
            do
            {
              *((_OWORD *)v70 - 1) = *((_OWORD *)v62 - 1);
              v70 -= 16;
              v62 -= 16;
            }
            while (v62 != v64);
            int v62 = (char *)v95[19];
          }
          v95[19] = v70;
          v95[20] = v63;
          v95[21] = &v69[16 * v68];
          if (v62) {
            operator delete(v62);
          }
          goto LABEL_71;
        }
LABEL_101:
        sub_1CB833614();
      }
LABEL_100:
      abort();
    }
  }
  uint64_t v13 = 0;
LABEL_82:
  if (v103 != &v105) {
    free(v103);
  }
  return v13;
}

uint64_t sub_1CC6FD4C0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  __int16 v3 = *(_WORD *)(a2 + 18);
  if ((v3 & 0x80) != 0) {
    return 1;
  }
  uint64_t v7 = *(void *)(a2 - 32);
  if (*(unsigned char *)(v7 + 16) == 16
    && ((uint64_t v8 = *(void *)(a2 + 40), (v9 = *(void *)(*(void *)(v8 + 56) + 80)) != 0)
      ? (uint64_t v10 = v9 - 24)
      : (uint64_t v10 = 0),
        (v3 & 0x40) == 0 && v8 == v10))
  {
    uint64_t v11 = (int *)sub_1CC6EF0A4(a1, a2);
    if (v12) {
      int v13 = *v11;
    }
    else {
      int v13 = 0;
    }
    int v14 = sub_1CC6F1754(a1, a2);
    uint64_t v15 = 1;
    LODWORD(v58) = v13;
    LODWORD(v59) = 1;
    sub_1CC735850(a3, (uint64_t *)&v58, v14);
  }
  else if (*(_DWORD *)(*(void *)(*(void *)(a1 + 864) + 8) + 484) == 15)
  {
    return 0;
  }
  else
  {
    uint64_t v17 = (int *)sub_1CC6EF0A4(a1, v7);
    if (v18) {
      int v19 = *v17;
    }
    else {
      int v19 = 0;
    }
    llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)(a1 + 880), *(llvm::Type **)a2);
    uint64_t v56 = v20;
    unint64_t LLTForType = llvm::getLLTForType(v20, *(llvm::Type **)(a1 + 880), v21);
    uint64_t v23 = *(void *)(a1 + 872);
    if (v19 < 0 && (v19 & 0x7FFFFFFFu) < *(_DWORD *)(v23 + 432)) {
      uint64_t v24 = *(void *)(*(void *)(v23 + 424) + 8 * (v19 & 0x7FFFFFFF));
    }
    else {
      uint64_t v24 = 0;
    }
    if (v24 != LLTForType)
    {
      int GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v23, LLTForType, "", 0);
      LODWORD(v64) = GenericVirtualRegister;
      int v65 = 1;
      LODWORD(v58) = v19;
      int v60 = 0;
      sub_1CC738034(a3, 126, &v64, (int *)&v58);
      uint64_t v23 = *(void *)(a1 + 872);
      int v19 = GenericVirtualRegister;
    }
    uint64_t v26 = *(llvm::Type **)(a2 + 64);
    int v55 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v23, LLTForType, "", 0);
    uint64_t v27 = *(llvm::DataLayout **)(a1 + 880);
    unint64_t v28 = (unint64_t)(sub_1CB83544C((uint64_t)v27, (uint64_t)v26) + 7) >> 3;
    BOOL v30 = v29 == 1;
    int v57 = v26;
    char Alignment = llvm::DataLayout::getAlignment(v27, v26, 1);
    unint64_t v33 = ((1 << Alignment) + v28 - 1) & -(1 << Alignment);
    if (v30) {
    uint64_t v34 = llvm::ConstantInt::get(v56, v33, 0);
    }
    int v35 = (int *)sub_1CC6EF0A4(a1, v34);
    if (v36) {
      int v37 = *v35;
    }
    else {
      int v37 = 0;
    }
    LODWORD(v64) = v55;
    int v65 = 1;
    LODWORD(v58) = v19;
    int v60 = 0;
    LODWORD(v61) = v37;
    int v63 = 0;
    (*(void (**)(void *, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*a3 + 32))(a3, 47, &v64, 1, &v58, 2, 0);
    unsigned int v38 = *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 864) + 16) + 112))(*(void *)(*(void *)(a1 + 864) + 16))
                             + 12);
    unint64_t v58 = LLTForType;
    LODWORD(v59) = 0;
    uint64_t v39 = sub_1CC7362A8((uint64_t)a3, &v58, (1 << v38) - 1);
    unint64_t v64 = LLTForType;
    int v65 = 0;
    LODWORD(v58) = v55;
    int v60 = 0;
    uint64_t v61 = v39;
    uint64_t v62 = v40;
    int v63 = 1;
    uint64_t v41 = (*(uint64_t (**)(void *, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*a3 + 32))(a3, 45, &v64, 1, &v58, 2, 0x100000800);
    uint64_t v43 = v42;
    unint64_t v58 = LLTForType;
    LODWORD(v59) = 0;
    uint64_t v44 = sub_1CC7362A8((uint64_t)a3, &v58, -(1 << v38));
    unint64_t v64 = LLTForType;
    int v65 = 0;
    unint64_t v58 = v41;
    uint64_t v59 = v43;
    int v60 = 1;
    uint64_t v61 = v44;
    uint64_t v62 = v45;
    int v63 = 1;
    uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*a3 + 32))(a3, 65, &v64, 1, &v58, 2, 0);
    uint64_t v48 = v47;
    unsigned int v49 = __clz(1 << *(_WORD *)(a2 + 18)) ^ 0x3F;
    unsigned int PrefTypeAlign = llvm::DataLayout::getPrefTypeAlign(*(llvm::DataLayout **)(a1 + 880), v57);
    if (v49 > PrefTypeAlign) {
      unsigned int PrefTypeAlign = v49;
    }
    if (PrefTypeAlign <= v38) {
      char v51 = 0;
    }
    else {
      char v51 = PrefTypeAlign;
    }
    uint64_t v52 = (int *)sub_1CC6EF0A4(a1, a2);
    if (v53) {
      int v54 = *v52;
    }
    else {
      int v54 = 0;
    }
    LODWORD(v64) = v54;
    uint64_t v15 = 1;
    int v65 = 1;
    unint64_t v58 = v46;
    uint64_t v59 = v48;
    int v60 = 1;
    sub_1CD62D084((uint64_t)a3, (int *)&v64, (int *)&v58, v51);
    llvm::MachineFrameInfo::CreateVariableSizedObject(*(unsigned __int8 **)(*(void *)(a1 + 864) + 56), v51, a2);
  }
  return v15;
}

uint64_t sub_1CC6FD94C(uint64_t result, uint64_t a2, void *a3)
{
  if ((result & 0x80) != 0)
  {
    if ((result & 0x100) == 0
      || ((uint64_t v4 = *(void *)(*(void *)(a2 + 40) + 48)) != 0 ? (v5 = v4 - 24 == a2) : (v5 = 0),
          v5
       || ((v6 = *(void *)(a2 + 24)) != 0 ? (uint64_t result = v6 - 24) : (uint64_t result = 0),
           !v6
        || *(unsigned char *)(result + 16) != 84
        || ((uint64_t v7 = *(void *)(result + 64)) == 0 || (*(unsigned char *)(v7 + 16) & 1) == 0)
        && (uint64_t result = llvm::CallBase::hasFnAttrOnCalledFunction(result, 32), (result & 1) == 0))))
    {
      return (uint64_t)sub_1CC7390C0(a3, 295, 0, 0, 1);
    }
  }
  return result;
}

void *sub_1CC6FD9F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(*(void *)a2 + 32) == 1)
  {
    int v25 = *(_DWORD *)(a2 + 20);
    if ((v25 & 0x40000000) != 0) {
      uint64_t v26 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v26 = a2 - 32 * (v25 & 0x7FFFFFF);
    }
    uint64_t v27 = *(void *)(v26 + 32);
    return sub_1CC6F5BF4(a1, (uint64_t *)a2, v27, a3);
  }
  else
  {
    uint64_t v6 = (int *)sub_1CC6EF0A4(a1, a2);
    if (v7) {
      int v8 = *v6;
    }
    else {
      int v8 = 0;
    }
    int v9 = *(_DWORD *)(a2 + 20);
    if ((v9 & 0x40000000) != 0) {
      uint64_t v10 = *(void **)(a2 - 8);
    }
    else {
      uint64_t v10 = (void *)(a2 - 32 * (v9 & 0x7FFFFFF));
    }
    uint64_t v11 = (int *)sub_1CC6EF0A4(a1, *v10);
    if (v12) {
      int v13 = *v11;
    }
    else {
      int v13 = 0;
    }
    int v14 = *(_DWORD *)(a2 + 20);
    if ((v14 & 0x40000000) != 0) {
      uint64_t v15 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v15 = a2 - 32 * (v14 & 0x7FFFFFF);
    }
    uint64_t v16 = (int *)sub_1CC6EF0A4(a1, *(void *)(v15 + 32));
    if (v17) {
      int v18 = *v16;
    }
    else {
      int v18 = 0;
    }
    int v19 = *(_DWORD *)(a2 + 20);
    if ((v19 & 0x40000000) != 0) {
      uint64_t v20 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v20 = a2 - 32 * (v19 & 0x7FFFFFF);
    }
    uint64_t v21 = (int *)sub_1CC6EF0A4(a1, *(void *)(v20 + 64));
    if (v22) {
      int v23 = *v21;
    }
    else {
      int v23 = 0;
    }
    v28[0] = v8;
    v28[2] = 1;
    v29[0] = v13;
    _DWORD v29[4] = 0;
    v29[6] = v18;
    v29[10] = 0;
    v29[12] = v23;
    v29[16] = 0;
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a3 + 32))(a3, 204, v28, 1, v29, 3, 0);
  }
}

void *sub_1CC6FDBF8(void *a1, uint64_t a2, void *a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0) {
    uint64_t v7 = *(uint64_t **)(a2 - 8);
  }
  else {
    uint64_t v7 = (uint64_t *)(a2 - 32 * (v6 & 0x7FFFFFF));
  }
  uint64_t v8 = *v7;
  if (*(_DWORD *)(*(void *)*v7 + 32) == 1)
  {
    return sub_1CC6F5BF4((uint64_t)a1, (uint64_t *)a2, v8, (uint64_t)a3);
  }
  uint64_t v10 = (int *)sub_1CC6EF0A4(a1, a2);
  if (v11) {
    int v12 = *v10;
  }
  else {
    int v12 = 0;
  }
  int v13 = *(_DWORD *)(a2 + 20);
  if ((v13 & 0x40000000) != 0) {
    int v14 = *(void **)(a2 - 8);
  }
  else {
    int v14 = (void *)(a2 - 32 * (v13 & 0x7FFFFFF));
  }
  uint64_t v15 = (int *)sub_1CC6EF0A4(a1, *v14);
  if (v16) {
    int v17 = *v15;
  }
  else {
    int v17 = 0;
  }
  uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a1[108] + 16) + 120))(*(void *)(a1[108] + 16));
  LOBYTE(v39) = (*(uint64_t (**)(uint64_t, void))(*(void *)v18 + 72))(v18, a1[110]);
  unsigned int v20 = sub_1CB87E200((unsigned __int8 *)&v39);
  if (v19 == 1) {
  int v21 = *(_DWORD *)(a2 + 20);
  }
  if ((v21 & 0x40000000) != 0) {
    uint64_t v22 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v22 = a2 - 32 * (v21 & 0x7FFFFFF);
  }
  uint64_t v23 = *(void *)(v22 + 32);
  if (v23 && *(unsigned char *)(v23 + 16) == 16 && *(_DWORD *)(v23 + 32) != v20)
  {
    llvm::APInt::sextOrTrunc(v23 + 24, v20, (uint64_t)&v39);
    int v25 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v23, (llvm::LLVMContext *)&v39, v24);
    uint64_t v26 = (int *)sub_1CC6EF0A4(a1, v25);
    if (v27) {
      int v28 = *v26;
    }
    else {
      int v28 = 0;
    }
    if (v40 >= 0x41 && v39) {
      MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
    }
    if (v28) {
      goto LABEL_38;
    }
    int v21 = *(_DWORD *)(a2 + 20);
  }
  if ((v21 & 0x40000000) != 0) {
    uint64_t v29 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v29 = a2 - 32 * (v21 & 0x7FFFFFF);
  }
  uint64_t v30 = (int *)sub_1CC6EF0A4(a1, *(void *)(v29 + 32));
  if (!v31)
  {
    int v28 = 0;
LABEL_42:
    unint64_t v33 = 0;
    goto LABEL_43;
  }
  int v28 = *v30;
LABEL_38:
  if ((v28 & 0x80000000) == 0) {
    goto LABEL_42;
  }
  uint64_t v32 = a1[109];
  if ((v28 & 0x7FFFFFFFu) >= *(_DWORD *)(v32 + 432)) {
    goto LABEL_42;
  }
  unint64_t v33 = *(void *)(*(void *)(v32 + 424) + 8 * (v28 & 0x7FFFFFFF));
LABEL_43:
  unint64_t v39 = v33;
  uint64_t v35 = sub_1CB8F1DC4(&v39);
  if (v34 == 1) {
  if (v35 != v20)
  }
  {
    uint64_t v37 = (8 * v20) | 1;
    int v38 = 0;
    LODWORD(v39) = v28;
    int v41 = 0;
    sub_1CC738034(a3, 124, (unint64_t *)&v37, (int *)&v39);
    int v28 = *(_DWORD *)(*(void *)(v36 + 32) + 4);
  }
  LODWORD(v37) = v12;
  int v38 = 1;
  LODWORD(v39) = v17;
  int v41 = 0;
  int v42 = v28;
  int v43 = 0;
  return (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*a3 + 32))(a3, 205, &v37, 1, &v39, 2, 0);
}

void sub_1CC6FDF6C(uint64_t a1, llvm::ConstantExpr *this, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 16) == 91)
  {
    ShuffleMask = (const void *)*((void *)this + 8);
    uint64_t v7 = *((unsigned int *)this + 18);
  }
  else
  {
    ShuffleMask = (const void *)llvm::ConstantExpr::getShuffleMask(this);
    uint64_t v7 = v25;
  }
  uint64_t v8 = (void *)sub_1CB906F34((uint64_t *)(*(void *)(a1 + 864) + 128), 4 * v7, 2);
  int v9 = v8;
  if (v7) {
    memmove(v8, ShuffleMask, 4 * v7);
  }
  uint64_t v10 = (int *)sub_1CC6EF0A4(a1, this);
  if (v11) {
    int v12 = *v10;
  }
  else {
    int v12 = 0;
  }
  v31[0] = v12;
  v31[2] = 1;
  int v13 = *((_DWORD *)this + 5);
  if ((v13 & 0x40000000) != 0) {
    int v14 = (void *)*((void *)this - 1);
  }
  else {
    int v14 = (void *)((char *)this - 32 * (v13 & 0x7FFFFFF));
  }
  uint64_t v15 = (int *)sub_1CC6EF0A4(a1, *v14);
  if (v16) {
    int v17 = *v15;
  }
  else {
    int v17 = 0;
  }
  v30[0] = v17;
  _DWORD v30[4] = 0;
  int v18 = *((_DWORD *)this + 5);
  if ((v18 & 0x40000000) != 0) {
    int v19 = (char *)*((void *)this - 1);
  }
  else {
    int v19 = (char *)this - 32 * (v18 & 0x7FFFFFF);
  }
  unsigned int v20 = (int *)sub_1CC6EF0A4(a1, *((void *)v19 + 4));
  if (v21) {
    int v22 = *v20;
  }
  else {
    int v22 = 0;
  }
  v30[6] = v22;
  v30[10] = 0;
  uint64_t v23 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a3 + 32))(a3, 206, v31, 1, v30, 2, 0);
  int v26 = 19;
  uint64_t v27 = 0;
  int v28 = v9;
  uint64_t v29 = v7;
  llvm::MachineInstr::addOperand(v24, v23, (const llvm::MachineOperand *)&v26);
}

llvm::MachineFunction *sub_1CC6FE13C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 864) + 16) + 120))(*(void *)(*(void *)(a1 + 864) + 16));
  __int16 v37 = *(_WORD *)(a2 + 18);
  __int16 v34 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 88))(v5, a2);
  int v6 = (int *)sub_1CC6EF0A4(a1, a2);
  int v36 = *v6;
  int v35 = v6[1];
  uint64_t v7 = (int *)sub_1CC6EF0A4(a1, *(void *)(a2 - 96));
  if (v8) {
    int v33 = *v7;
  }
  else {
    int v33 = 0;
  }
  int v9 = (int *)sub_1CC6EF0A4(a1, *(void *)(a2 - 64));
  if (v10) {
    int v11 = *v9;
  }
  else {
    int v11 = 0;
  }
  int v12 = (int *)sub_1CC6EF0A4(a1, *(void *)(a2 - 32));
  if (v13) {
    int v14 = *v12;
  }
  else {
    int v14 = 0;
  }
  uint64_t v15 = *(void *)(a1 + 864);
  uint64_t v16 = *(void *)(a2 - 96);
  if (v16)
  {
    unsigned int v17 = *(_DWORD *)(*(void *)v16 + 8);
    if ((v17 & 0xFE) == 0x12) {
      unsigned int v17 = *(_DWORD *)(**(void **)(*(void *)v16 + 16) + 8);
    }
    unsigned int v18 = v17 >> 8;
  }
  else
  {
    unsigned int v18 = 0;
  }
  int v19 = v11;
  if (v11 < 0 && (uint64_t v20 = *(void *)(a1 + 872), (v11 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v20 + 432))) {
    uint64_t v21 = *(void *)(*(void *)(v20 + 424) + 8 * (v11 & 0x7FFFFFFF));
  }
  else {
    uint64_t v21 = 0;
  }
  char v22 = sub_1CC6F18C4(a1, a2);
  llvm::Instruction::getAAMetadata((uint64_t ***)a2, v39);
  __int16 v23 = *(unsigned __int8 *)(a2 + 60);
  unsigned int v24 = *(unsigned __int16 *)(a2 + 18);
  *(void *)(v15 + 208) += 80;
  uint64_t v25 = *(void *)(v15 + 128);
  if (((v25 + 7) & 0xFFFFFFFFFFFFFFF8) - v25 + 80 > *(void *)(v15 + 136) - v25)
  {
    unsigned int v30 = *(_DWORD *)(v15 + 152) >> 7;
    if (v30 >= 0x1E) {
      LOBYTE(v30) = 30;
    }
    uint64_t v32 = 4096 << v30;
    unint64_t v26 = (unint64_t)operator new(4096 << v30, (std::align_val_t)8uLL);
    unsigned int v31 = *(_DWORD *)(v15 + 152);
    if (v31 >= *(_DWORD *)(v15 + 156)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v15 + 144) + 8 * v31) = v26;
    ++*(_DWORD *)(v15 + 152);
    *(void *)(v15 + 136) = v26 + v32;
  }
  else
  {
    unint64_t v26 = (v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v15 + 128) = v26 + 80;
  *(void *)unint64_t v26 = v16 & 0xFFFFFFFFFFFFFFFBLL;
  *(void *)(v26 + 8) = 0;
  *(_DWORD *)(v26 + 16) = v18;
  *(unsigned char *)(v26 + 20) = 0;
  *(void *)(v26 + 24) = v21;
  long long v27 = v39[1];
  *(_OWORD *)(v26 + 40) = v39[0];
  if (v37) {
    __int16 v28 = 7;
  }
  else {
    __int16 v28 = 3;
  }
  *(_WORD *)(v26 + 32) = v34 | v28;
  *(unsigned char *)(v26 + 34) = v22;
  *(_OWORD *)(v26 + 56) = v27;
  *(void *)(v26 + 72) = 0;
  *(_WORD *)(v26 + 36) = v23 & 0x88FF | (((v24 >> 2) & 7) << 8) & 0x8FFF | (v24 >> 5 << 12);
  return sub_1CC739558(a3, v36, v35, v33, v19, v14, (llvm::MachineMemOperand *)v26);
}

BOOL sub_1CC6FE414(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 864) + 16) + 120))(*(void *)(*(void *)(a1 + 864) + 16));
  if (*(_WORD *)(a2 + 18)) {
    __int16 v7 = 7;
  }
  else {
    __int16 v7 = 3;
  }
  __int16 v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 88))(v6, a2);
  int v9 = (int *)sub_1CC6EF0A4(a1, a2);
  if (v10) {
    int v11 = *v9;
  }
  else {
    int v11 = 0;
  }
  int v12 = (int *)sub_1CC6EF0A4(a1, *(void *)(a2 - 64));
  if (v13) {
    int v14 = *v12;
  }
  else {
    int v14 = 0;
  }
  uint64_t v15 = (int *)sub_1CC6EF0A4(a1, *(void *)(a2 - 32));
  if (v16) {
    int v17 = *v15;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = *(_WORD *)(a2 + 18) >> 4;
  if (v18 <= 0xC)
  {
    int v38 = a3;
    v42[0] = v11;
    v42[2] = 1;
    v41[0] = v14;
    v41[4] = 0;
    v40[0] = v17;
    v40[4] = 0;
    uint64_t v19 = *(void *)(a1 + 864);
    uint64_t v20 = *(void *)(a2 - 64);
    if (v20)
    {
      unsigned int v21 = *(_DWORD *)(*(void *)v20 + 8);
      if ((v21 & 0xFE) == 0x12) {
        unsigned int v21 = *(_DWORD *)(**(void **)(*(void *)v20 + 16) + 8);
      }
      unsigned int v22 = v21 >> 8;
    }
    else
    {
      unsigned int v22 = 0;
    }
    unint64_t v23 = v20 & 0xFFFFFFFFFFFFFFFBLL;
    if (v17 < 0 && (uint64_t v24 = *(void *)(a1 + 872), v25 = v17 & 0x7FFFFFFF, v25 < *(_DWORD *)(v24 + 432))) {
      uint64_t v26 = *(void *)(*(void *)(v24 + 424) + 8 * v25);
    }
    else {
      uint64_t v26 = 0;
    }
    __int16 v27 = v8 | v7;
    char v28 = sub_1CC6F18C4(a1, a2);
    llvm::Instruction::getAAMetadata((uint64_t ***)a2, v39);
    __int16 v29 = *(unsigned __int8 *)(a2 + 60);
    unsigned int v30 = *(unsigned __int16 *)(a2 + 18);
    *(void *)(v19 + 208) += 80;
    uint64_t v31 = *(void *)(v19 + 128);
    if (((v31 + 7) & 0xFFFFFFFFFFFFFFF8) - v31 + 80 > *(void *)(v19 + 136) - v31)
    {
      unsigned int v35 = *(_DWORD *)(v19 + 152) >> 7;
      if (v35 >= 0x1E) {
        LOBYTE(v35) = 30;
      }
      uint64_t v37 = 4096 << v35;
      unint64_t v32 = (unint64_t)operator new(4096 << v35, (std::align_val_t)8uLL);
      unsigned int v36 = *(_DWORD *)(v19 + 152);
      if (v36 >= *(_DWORD *)(v19 + 156)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v19 + 144) + 8 * v36) = v32;
      ++*(_DWORD *)(v19 + 152);
      *(void *)(v19 + 136) = v32 + v37;
    }
    else
    {
      unint64_t v32 = (v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v19 + 128) = v32 + 80;
    *(void *)unint64_t v32 = v23;
    *(void *)(v32 + 8) = 0;
    *(_DWORD *)(v32 + 16) = v22;
    *(unsigned char *)(v32 + 20) = 0;
    *(void *)(v32 + 24) = v26;
    long long v33 = v39[1];
    *(_OWORD *)(v32 + 40) = v39[0];
    *(_WORD *)(v32 + 32) = v27;
    *(unsigned char *)(v32 + 34) = v28;
    *(_OWORD *)(v32 + 56) = v33;
    *(void *)(v32 + 72) = 0;
    *(_WORD *)(v32 + 36) = v29 & 0xF8FF | (((v30 >> 1) & 7) << 8);
    sub_1CC7397E0(v38, v18 + 100, v42, v41, v40, (llvm::MachineMemOperand *)v32);
  }
  return v18 < 0xD;
}

uint64_t sub_1CC6FE6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = sub_1CC6EF0A4(a1, a2);
  unint64_t v8 = v7;
  int v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0) {
    uint64_t v10 = *(void **)(a2 - 8);
  }
  else {
    uint64_t v10 = (void *)(a2 - 32 * (v9 & 0x7FFFFFF));
  }
  uint64_t result = sub_1CC6EF0A4(a1, *v10);
  if (v8)
  {
    uint64_t v12 = result;
    uint64_t v13 = 0;
    unsigned int v14 = 1;
    do
    {
      int v15 = *(_DWORD *)(v6 + 4 * v13);
      int v16 = *(_DWORD *)(v12 + 4 * v13);
      v19[0] = v15;
      v19[2] = 1;
      v18[0] = v16;
      v18[4] = 0;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a3 + 32))(a3, 83, v19, 1, v18, 1, 0);
      uint64_t v13 = v14;
    }
    while (v8 > v14++);
  }
  return result;
}

_DWORD *sub_1CC6FE80C(_DWORD *result)
{
  if (*((void *)result + 1))
  {
    uint64_t v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1CBA7B248(result);
    }
    else
    {
      if (v1)
      {
        char v2 = *(void **)result;
        uint64_t v3 = 16 * v1;
        do
        {
          *char v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((void *)result + 1) = 0;
    }
  }
  return result;
}

void sub_1CC6FE85C(void *a1, uint64_t a2)
{
  a1[108] = a2;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &unk_1EA61EFE3)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &unk_1EA61EFE3);
  unint64_t v7 = (uint64_t *)a1[1];
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (v8 == v9)
  {
LABEL_9:
    uint64_t v10 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v8 != &llvm::TargetPassConfig::ID)
    {
      v8 += 16;
      if (v8 == v9) {
        goto LABEL_9;
      }
    }
    uint64_t v10 = *(void *)(v8 + 8);
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v10 + 96))(v10, &llvm::TargetPassConfig::ID);
  a1[111] = v11;
  if (word_1EBCD9B40)
  {
    if (!byte_1EBCD9BB8) {
LABEL_13:
    }
      operator new();
  }
  else if (!(*(unsigned int (**)(uint64_t))(*(void *)v11 + 280))(v11))
  {
    goto LABEL_13;
  }
  operator new();
}

const char *sub_1CC702B8C()
{
  return "IRTranslator";
}

double sub_1CC702B9C(uint64_t a1)
{
  *(void *)(a1 + 68) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a1 + 240;
  *(void *)(a1 + 232) = 0x800000000;
  *(void *)(a1 + 304) = a1 + 320;
  *(void *)(a1 + 312) = 0x600000000;
  *(_DWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(void *)(a1 + 424) = a1 + 440;
  *(void *)(a1 + 432) = 0x3200000000;
  *(void *)(a1 + 664) = 0;
  *(_DWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(void *)(a1 + 680) = a1 + 712;
  *(void *)(a1 + 688) = a1 + 712;
  *(void *)(a1 + 696) = 4;
  *(_DWORD *)(a1 + 704) = 0;
  *(void *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(void *)(a1 + 784) = a1 + 800;
  *(void *)(a1 + 792) = 0;
  *(_DWORD *)(a1 + 800) = 0x80000000;
  *(_DWORD *)(a1 + 816) = 1;
  *(void *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 832) = 1;
  *(void *)(a1 + 824) = 0;
  return result;
}

void *sub_1CC702C90(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC0A1BB8(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *double result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC702D5C(uint64_t result, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    int v8 = a2 - 1;
    unsigned int v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    uint64_t v10 = (void *)(result + 40 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (*v10 != a3 || v12 != a4)
    {
      unsigned int v14 = 0;
      int v15 = 1;
      while (v11 != -4096 || v12 != -4096)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v12 == -8192;
        }
        if (v16 && v11 == -8192) {
          unsigned int v14 = v10;
        }
        unsigned int v18 = v9 + v15++;
        unsigned int v9 = v18 & v8;
        uint64_t v10 = (void *)(result + 40 * (v18 & v8));
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        if (*v10 == a3 && v12 == a4) {
          goto LABEL_25;
        }
      }
      if (v14) {
        uint64_t v10 = v14;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
LABEL_25:
  *a5 = v10;
  return result;
}

void sub_1CC702E30(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = &v3[v2];
    do
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *v3;
      if (*v3 == *(void *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        unint64_t v8 = *(void *)a1;
      }
      else
      {
        uint64_t v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E) {
          LOBYTE(v7) = 30;
        }
        unint64_t v8 = v6 + (4096 << v7);
      }
      unint64_t v9 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v9 + 24 <= v8)
      {
        uint64_t v10 = (void *)(v9 + 16);
        do
        {
          uint64_t v11 = (void *)*(v10 - 2);
          if (v10 != v11) {
            free(v11);
          }
          unint64_t v12 = (unint64_t)(v10 + 4);
          v10 += 3;
        }
        while (v12 <= v8);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v13 = *(unsigned int *)(a1 + 72);
  if (v13)
  {
    uint64_t v20 = *(void **)(a1 + 64);
    unsigned int v21 = &v20[2 * v13];
    do
    {
      unint64_t v22 = (*v20 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v23 = *v20 + v20[1];
      if (v22 + 24 <= v23)
      {
        uint64_t v24 = (void *)(v22 + 16);
        do
        {
          unsigned int v25 = (void *)*(v24 - 2);
          if (v24 != v25) {
            free(v25);
          }
          unint64_t v26 = (unint64_t)(v24 + 4);
          v24 += 3;
        }
        while (v26 <= v23);
      }
      v20 += 2;
    }
    while (v20 != v21);
    uint64_t v27 = *(unsigned int *)(a1 + 72);
    if (v27)
    {
      char v28 = *(uint64_t **)(a1 + 64);
      uint64_t v29 = 16 * v27;
      do
      {
        uint64_t v30 = *v28;
        v28 += 2;
        MEMORY[0x1D25D9CD0](v30, 8);
        v29 -= 16;
      }
      while (v29);
    }
  }
  *(_DWORD *)(a1 + 72) = 0;
  uint64_t v14 = *(unsigned int *)(a1 + 24);
  if (v14)
  {
    *(void *)(a1 + 80) = 0;
    int v15 = *(void **)(a1 + 16);
    uint64_t v16 = *v15 + 4096;
    *(void *)a1 = *v15;
    *(void *)(a1 + 8) = v16;
    if (v14 != 1)
    {
      int v17 = v15 + 1;
      uint64_t v18 = 8 * v14 - 8;
      do
      {
        uint64_t v19 = *v17++;
        MEMORY[0x1D25D9CD0](v19, 8);
        v18 -= 8;
      }
      while (v18);
    }
    *(_DWORD *)(a1 + 24) = 1;
  }
}

void sub_1CC702FE4(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = &v3[v2];
    do
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *v3;
      if (*v3 == *(void *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        unint64_t v7 = *(void *)a1;
      }
      else
      {
        uint64_t v19 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v19 >= 0x1E) {
          LOBYTE(v19) = 30;
        }
        unint64_t v7 = v6 + (4096 << v19);
      }
      unint64_t v8 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v8 + 24 <= v7)
      {
        unint64_t v9 = (void *)(v8 + 16);
        do
        {
          uint64_t v10 = (void *)*(v9 - 2);
          if (v9 != v10) {
            free(v10);
          }
          unint64_t v11 = (unint64_t)(v9 + 4);
          v9 += 3;
        }
        while (v11 <= v7);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 72);
  if (v12)
  {
    uint64_t v20 = *(void **)(a1 + 64);
    unsigned int v21 = &v20[2 * v12];
    do
    {
      unint64_t v22 = (*v20 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v23 = *v20 + v20[1];
      if (v22 + 24 <= v23)
      {
        uint64_t v24 = (void *)(v22 + 16);
        do
        {
          unsigned int v25 = (void *)*(v24 - 2);
          if (v24 != v25) {
            free(v25);
          }
          unint64_t v26 = (unint64_t)(v24 + 4);
          v24 += 3;
        }
        while (v26 <= v23);
      }
      v20 += 2;
    }
    while (v20 != v21);
    uint64_t v27 = *(unsigned int *)(a1 + 72);
    if (v27)
    {
      char v28 = *(uint64_t **)(a1 + 64);
      uint64_t v29 = 16 * v27;
      do
      {
        uint64_t v30 = *v28;
        v28 += 2;
        MEMORY[0x1D25D9CD0](v30, 8);
        v29 -= 16;
      }
      while (v29);
    }
  }
  *(_DWORD *)(a1 + 72) = 0;
  uint64_t v13 = *(unsigned int *)(a1 + 24);
  if (v13)
  {
    *(void *)(a1 + 80) = 0;
    uint64_t v14 = *(void **)(a1 + 16);
    uint64_t v15 = *v14 + 4096;
    *(void *)a1 = *v14;
    *(void *)(a1 + 8) = v15;
    if (v13 != 1)
    {
      uint64_t v16 = v14 + 1;
      uint64_t v17 = 8 * v13 - 8;
      do
      {
        uint64_t v18 = *v16++;
        MEMORY[0x1D25D9CD0](v18, 8);
        v17 -= 8;
      }
      while (v17);
    }
    *(_DWORD *)(a1 + 24) = 1;
  }
}

void sub_1CC703194(uint64_t a1)
{
  *(void *)a1 = &unk_1F261BEF0;
  uint64_t v2 = *(void *)(a1 + 1792);
  *(void *)(a1 + 1792) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  sub_1CB9A4128(a1 + 912);
  uint64_t v3 = *(void *)(a1 + 904);
  *(void *)(a1 + 904) = 0;
  if (v3) {
    sub_1CC0CC1D8(a1 + 904, v3);
  }
  uint64_t v4 = *(void *)(a1 + 856);
  *(void *)(a1 + 856) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 848);
  *(void *)(a1 + 848) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_1CD61698C((void *)(a1 + 712));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 688), 8);
  sub_1CD6169EC((char **)(a1 + 544));
  sub_1CC7032DC(a1 + 520);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 520), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 496), 8);
  sub_1CC703368(a1 + 256);

  sub_1CBA0E6AC((llvm::Pass *)a1);
}

void sub_1CC7032DC(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)a1 + 40 * v1;
    uint64_t v3 = *(void *)a1 + 32;
    do
    {
      uint64_t v5 = *(void *)(v3 - 32);
      uint64_t v4 = *(void *)(v3 - 24);
      uint64_t v6 = v3 - 32;
      if ((v5 != -4096 || v4 != -4096) && (v5 != -8192 || v4 != -8192))
      {
        unint64_t v7 = *(void **)(v3 - 16);
        if ((void *)v3 != v7) {
          free(v7);
        }
      }
      v3 += 40;
    }
    while (v6 + 40 != v2);
  }
}

uint64_t sub_1CC703368(uint64_t a1)
{
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 216), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 192), 8);
  sub_1CC702FE4(a1 + 96);
  sub_1CBFFBA64(a1 + 96);
  sub_1CC702E30(a1);

  return sub_1CBFFBA64(a1);
}

void *sub_1CC7033D0(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = a1[2];
  unsigned int v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC703484((uint64_t)a1, v7);
  unint64_t v9 = 0;
  sub_1CB87DF68((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096) {
    --a1[3];
  }
  return a4;
}

void *sub_1CC703484(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC703550(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *double result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC703550(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      double result = sub_1CB87DF68(v5, (void *)a2, &v10);
      unint64_t v9 = v10;
      *uint64_t v10 = *(void *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

void *sub_1CC703600(_DWORD *a1, void *a2)
{
  int v3 = a1[4];
  if (!v3)
  {
    uint64_t v13 = 0;
LABEL_15:
    uint64_t v6 = sub_1CB883BA0(a1, (uint64_t)a2, a2, v13);
    void *v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  uint64_t v6 = (void *)(*(void *)a1 + 16 * v5);
  uint64_t v7 = *v6;
  if (*a2 != *v6)
  {
    uint64_t v8 = 0;
    int v9 = 1;
    while (v7 != -4096)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == -8192;
      }
      if (v10) {
        uint64_t v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      uint64_t v6 = (void *)(*(void *)a1 + 16 * (v11 & v4));
      uint64_t v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v8) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = v6;
    }
    goto LABEL_15;
  }
  return v6;
}

_OWORD *sub_1CC7036BC(uint64_t *a1, int a2)
{
  unsigned int v3 = *((_DWORD *)a1 + 4);
  int v4 = (uint64_t *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  double result = operator new(40 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v10 = *((unsigned int *)a1 + 4);
    if (v10)
    {
      uint64_t v11 = 40 * v10;
      int64x2_t v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *double result = v12;
        double result = (_OWORD *)((char *)result + 40);
        v11 -= 40;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v13 = &v4[5 * v3];
      uint64_t v14 = v4;
      do
      {
        uint64_t v15 = *v14;
        uint64_t v16 = v14[1];
        if ((*v14 != -4096 || v16 != -4096) && (v15 != -8192 || v16 != -8192))
        {
          unint64_t v17 = ((v16 >> 4) ^ (v16 >> 9) | ((unint64_t)((v15 >> 4) ^ (v15 >> 9)) << 32))
              + ~((unint64_t)((v16 >> 4) ^ (v16 >> 9)) << 32);
          unint64_t v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
          unint64_t v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
          int v20 = *((_DWORD *)a1 + 4) - 1;
          unsigned int v21 = v20 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~(v19 << 27)));
          uint64_t v22 = *a1 + 40 * v21;
          uint64_t v23 = *(void *)v22;
          uint64_t v24 = *(void *)(v22 + 8);
          if (v15 != *(void *)v22 || v16 != v24)
          {
            uint64_t v26 = 0;
            int v27 = 1;
            while (v23 != -4096 || v24 != -4096)
            {
              if (v26) {
                BOOL v28 = 0;
              }
              else {
                BOOL v28 = v24 == -8192;
              }
              if (v28 && v23 == -8192) {
                uint64_t v26 = v22;
              }
              unsigned int v30 = v21 + v27++;
              unsigned int v21 = v30 & v20;
              uint64_t v22 = *a1 + 40 * v21;
              uint64_t v23 = *(void *)v22;
              uint64_t v24 = *(void *)(v22 + 8);
              if (v15 == *(void *)v22 && v16 == v24) {
                goto LABEL_37;
              }
            }
            if (v26) {
              uint64_t v22 = v26;
            }
          }
LABEL_37:
          *(void *)uint64_t v22 = v15;
          *(void *)(v22 + 8) = v14[1];
          *(void *)(v22 + 16) = v22 + 32;
          *(void *)(v22 + 24) = 0x100000000;
          unint64_t v32 = (uint64_t *)v14[2];
          if ((uint64_t *)v22 != v14)
          {
            unsigned int v33 = *((_DWORD *)v14 + 6);
            if (v33)
            {
              if (v32 == v14 + 4)
              {
                if (v33 >= 2) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy((void *)(v22 + 32), v32, 8 * *((unsigned int *)v14 + 6));
                *(_DWORD *)(v22 + 24) = v33;
                unint64_t v32 = (uint64_t *)v14[2];
              }
              else
              {
                *(void *)(v22 + 16) = v32;
                int v34 = *((_DWORD *)v14 + 7);
                *(_DWORD *)(v22 + 24) = v33;
                *(_DWORD *)(v22 + 28) = v34;
                v14[2] = (uint64_t)(v14 + 4);
                *((_DWORD *)v14 + 7) = 0;
                unint64_t v32 = v14 + 4;
              }
              *((_DWORD *)v14 + 6) = 0;
            }
          }
          ++*((_DWORD *)a1 + 2);
          if (v32 != v14 + 4) {
            free(v32);
          }
        }
        v14 += 5;
      }
      while (v14 != v13);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v35 = *((unsigned int *)a1 + 4);
  if (v35)
  {
    uint64_t v36 = 40 * v35;
    int64x2_t v37 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *double result = v37;
      double result = (_OWORD *)((char *)result + 40);
      v36 -= 40;
    }
    while (v36);
  }
  return result;
}

uint64_t sub_1CC7039C8(long long **a1, long long *a2)
{
  uint64_t v2 = 0x2E8BA2E8BA2E8BA3 * (((char *)a1[1] - (char *)*a1) >> 3);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x2E8BA2E8BA2E8BALL) {
    abort();
  }
  if (0x5D1745D1745D1746 * (((char *)a1[2] - (char *)*a1) >> 3) > v3) {
    unint64_t v3 = 0x5D1745D1745D1746 * (((char *)a1[2] - (char *)*a1) >> 3);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((char *)a1[2] - (char *)*a1) >> 3)) >= 0x1745D1745D1745DLL) {
    unint64_t v6 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x2E8BA2E8BA2E8BALL) {
      sub_1CB833614();
    }
    int v7 = (char *)operator new(88 * v6);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = (long long *)&v7[88 * v6];
  uint64_t v9 = sub_1CD616B8C((uint64_t)&v7[88 * v2], a2);
  uint64_t v10 = v9 + 88;
  int64x2_t v12 = *a1;
  uint64_t v11 = a1[1];
  if (v11 == *a1)
  {
    *a1 = (long long *)v9;
    a1[1] = (long long *)v10;
    a1[2] = v8;
  }
  else
  {
    do
    {
      uint64_t v11 = (long long *)((char *)v11 - 88);
      uint64_t v9 = sub_1CD616C08(v9 - 88, v11);
    }
    while (v11 != v12);
    uint64_t v11 = *a1;
    uint64_t v13 = a1[1];
    *a1 = (long long *)v9;
    a1[1] = (long long *)v10;
    a1[2] = v8;
    if (v13 != v11)
    {
      uint64_t v14 = (unsigned __int8 **)(v13 - 1);
      do
      {
        uint64_t v15 = *v14;
        if (!*v14) {
          goto LABEL_16;
        }
        int v18 = *v15;
        if ((v18 - 4) > 0x1E)
        {
          if ((v18 - 3) >= 0xFFFFFFFE) {
            unsigned int v21 = *v14;
          }
          else {
            unsigned int v21 = 0;
          }
          if ((v18 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v20 = (unint64_t)(v21 + 8);
LABEL_30:
            int v27 = v14;
            sub_1CC5FA668(v20 + 16, &v27);
            goto LABEL_16;
          }
          if (v18 == 3) {
            *((void *)v15 + 1) = 0;
          }
        }
        else if ((v15[1] & 0x7F) == 2 || *((_DWORD *)v15 + 3))
        {
          uint64_t v19 = *((void *)v15 + 2);
          if ((v19 & 4) != 0)
          {
            unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFF8;
            if (v20) {
              goto LABEL_30;
            }
          }
        }
LABEL_16:
        uint64_t v16 = *(v14 - 2);
        if (v16)
        {
          int v22 = *v16;
          if ((v22 - 4) > 0x1E)
          {
            if ((v22 - 3) >= 0xFFFFFFFE) {
              uint64_t v25 = (uint64_t)*(v14 - 2);
            }
            else {
              uint64_t v25 = 0;
            }
            if ((v22 - 3) < 0xFFFFFFFE)
            {
              if (v22 == 3) {
                *((void *)v16 + 1) = 0;
              }
              goto LABEL_17;
            }
            unint64_t v24 = v25 + 8;
          }
          else
          {
            if ((v16[1] & 0x7F) != 2 && !*((_DWORD *)v16 + 3)) {
              goto LABEL_17;
            }
            uint64_t v23 = *((void *)v16 + 2);
            if ((v23 & 4) == 0) {
              goto LABEL_17;
            }
            unint64_t v24 = v23 & 0xFFFFFFFFFFFFFFF8;
            if (!v24) {
              goto LABEL_17;
            }
          }
          int v27 = v14 - 2;
          sub_1CC5FA668(v24 + 16, &v27);
        }
LABEL_17:
        unint64_t v17 = (long long *)(v14 - 9);
        v14 -= 11;
      }
      while (v17 != v11);
    }
  }
  if (v11) {
    operator delete(v11);
  }
  return v10;
}

uint64_t sub_1CC703C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a3;
    for (uint64_t i = 0; ; i += 88)
    {
      uint64_t v8 = a4 + i;
      uint64_t v9 = a2 + i;
      long long v10 = *(_OWORD *)(a2 + i);
      long long v11 = *(_OWORD *)(a2 + i + 16);
      long long v12 = *(_OWORD *)(a2 + i + 32);
      *(void *)(v8 + 48) = *(void *)(a2 + i + 48);
      *(_OWORD *)(v8 + 16) = v11;
      *(_OWORD *)(v8 + 32) = v12;
      *(_OWORD *)uint64_t v8 = v10;
      if (a2 != a4) {
        break;
      }
LABEL_10:
      *(void *)(v8 + 80) = *(void *)(v9 + 80);
      if (v9 + 88 == v6) {
        return v6;
      }
    }
    uint64_t v13 = *(unsigned __int8 **)(v8 + 56);
    if (!v13)
    {
LABEL_5:
      *(void *)(v8 + 56) = *(void *)(v9 + 56);
      uint64_t v14 = *(unsigned __int8 **)(v9 + 56);
      if (v14)
      {
        llvm::MetadataTracking::retrack(v9 + 56, v14, v8 + 56);
        *(void *)(v9 + 56) = 0;
      }
      uint64_t v15 = a2 + i;
      uint64_t v16 = *(unsigned __int8 **)(a4 + i + 72);
      *(_DWORD *)(a4 + i + 64) = *(_DWORD *)(a2 + i + 64);
      if (!v16) {
        goto LABEL_8;
      }
      int v22 = *v16;
      if ((v22 - 4) > 0x1E)
      {
        if ((v22 - 3) >= 0xFFFFFFFE) {
          uint64_t v26 = v16;
        }
        else {
          uint64_t v26 = 0;
        }
        if ((v22 - 3) < 0xFFFFFFFE)
        {
          if (v22 == 3) {
            *((void *)v16 + 1) = 0;
          }
          goto LABEL_8;
        }
        unint64_t v24 = (unint64_t)(v26 + 8);
      }
      else
      {
        if ((v16[1] & 0x7F) != 2 && !*((_DWORD *)v16 + 3)) {
          goto LABEL_8;
        }
        uint64_t v23 = *((void *)v16 + 2);
        if ((v23 & 4) == 0) {
          goto LABEL_8;
        }
        unint64_t v24 = v23 & 0xFFFFFFFFFFFFFFF8;
        if (!v24) {
          goto LABEL_8;
        }
      }
      uint64_t v28 = a4 + i + 72;
      sub_1CC5FA668(v24 + 16, &v28);
LABEL_8:
      uint64_t v18 = *(void *)(v15 + 72);
      unint64_t v17 = (unsigned __int8 **)(v15 + 72);
      *(void *)(a4 + i + 72) = v18;
      if (*v17)
      {
        llvm::MetadataTracking::retrack((uint64_t)v17, *v17, a4 + i + 72);
        long long *v17 = 0;
      }
      goto LABEL_10;
    }
    int v19 = *v13;
    if ((v19 - 4) > 0x1E)
    {
      if ((v19 - 3) >= 0xFFFFFFFE) {
        uint64_t v25 = *(void *)(v8 + 56);
      }
      else {
        uint64_t v25 = 0;
      }
      if ((v19 - 3) < 0xFFFFFFFE)
      {
        if (v19 == 3) {
          *((void *)v13 + 1) = 0;
        }
        goto LABEL_5;
      }
      unint64_t v21 = v25 + 8;
    }
    else
    {
      if ((v13[1] & 0x7F) != 2 && !*((_DWORD *)v13 + 3)) {
        goto LABEL_5;
      }
      uint64_t v20 = *((void *)v13 + 2);
      if ((v20 & 4) == 0) {
        goto LABEL_5;
      }
      unint64_t v21 = v20 & 0xFFFFFFFFFFFFFFF8;
      if (!v21) {
        goto LABEL_5;
      }
    }
    uint64_t v28 = v8 + 56;
    sub_1CC5FA668(v21 + 16, &v28);
    goto LABEL_5;
  }
  return a2;
}

char *sub_1CC703E20(void **a1, uint64_t a2)
{
  unint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    abort();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 3) > v5) {
    unint64_t v5 = 0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - v3) >> 3) >= 0x333333333333333) {
    unint64_t v8 = 0x666666666666666;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x666666666666666) {
      sub_1CB833614();
    }
    uint64_t v9 = (char *)operator new(40 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  long long v10 = &v9[40 * v4];
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)long long v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v11;
  *((void *)v10 + 4) = *(void *)(a2 + 32);
  long long v12 = v10 + 40;
  if (v2 != v3)
  {
    do
    {
      long long v13 = *(_OWORD *)(v2 - 40);
      long long v14 = *(_OWORD *)(v2 - 24);
      *((_DWORD *)v10 - 2) = *((_DWORD *)v2 - 2);
      *(_OWORD *)(v10 - 24) = v14;
      *(_OWORD *)(v10 - 40) = v13;
      v10 -= 40;
      v2 -= 40;
    }
    while (v2 != v3);
    uint64_t v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = &v9[40 * v8];
  if (v2) {
    operator delete(v2);
  }
  return v12;
}

unint64_t sub_1CC703F44(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v5 = *(void *)a1 + 48 * v3;
    if (*(void *)a1 > a2 || v5 <= a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return a2;
}

unint64_t sub_1CC703FD0(unint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  long long v10 = (long long *)(a2 - 40);
  unint64_t v11 = v9;
LABEL_3:
  while (1)
  {
    unint64_t v9 = v11;
    uint64_t v12 = a2 - v11;
    uint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v11) >> 3);
    if (v5 || !v4) {
      break;
    }
    if (v12 <= 959)
    {
      unint64_t v258 = v11 + 40;
      BOOL v260 = v11 == a2 || v258 == a2;
      if (a4)
      {
        if (!v260)
        {
          unint64_t v261 = v11;
          while (1)
          {
            unint64_t v262 = v261;
            unint64_t v261 = v258;
            unsigned int v263 = *(_DWORD *)(v262 + 32);
            unsigned int v264 = *(_DWORD *)(v262 + 72);
            if (v264 != v263) {
              break;
            }
            uint64_t v265 = *(void *)(v262 + 48);
            uint64_t v266 = *(void *)(v262 + 8);
            uint64_t v267 = (void *)(v266 + 24);
            uint64_t v268 = *(unsigned int *)(v265 + 32);
            if (v268 <= 0x40)
            {
              if ((uint64_t)(*(void *)(v265 + 24) << -(char)v268) >> -(char)v268 >= (uint64_t)(*v267 << -(char)v268) >> -(char)v268) {
                goto LABEL_292;
              }
              goto LABEL_272;
            }
            uint64_t v286 = *(void *)(v265 + 24);
            uint64_t v287 = *(void *)(v286 + 8 * ((v268 - 1) >> 6)) & (1 << (v268 - 1));
            double result = v287 != 0;
            unsigned int v288 = *(_DWORD *)(v266 + 32);
            unsigned int v289 = v288 - 1;
            uint64_t v290 = *(void *)(v266 + 24);
            if (v288 >= 0x41) {
              uint64_t v267 = (void *)(v290 + 8 * (v289 >> 6));
            }
            if (result != ((*v267 >> v289) & 1))
            {
              if (!v287) {
                goto LABEL_292;
              }
              goto LABEL_272;
            }
            unint64_t v291 = v268 + 63;
            uint64_t v292 = v290 - 8;
            uint64_t v293 = (v291 >> 3) & 0x3FFFFFF8;
            uint64_t v294 = v286 - 8;
            do
            {
              if (!v293) {
                goto LABEL_292;
              }
              unint64_t v295 = *(void *)(v294 + v293);
              unint64_t v296 = *(void *)(v292 + v293);
              v293 -= 8;
            }
            while (v295 == v296);
            if (v295 <= v296) {
              goto LABEL_272;
            }
LABEL_292:
            unint64_t v258 = v261 + 40;
            if (v261 + 40 == a2) {
              return result;
            }
          }
          if (v264 <= v263) {
            goto LABEL_292;
          }
          uint64_t v265 = *(void *)(v262 + 48);
LABEL_272:
          uint64_t v269 = *(void *)(v262 + 40);
          long long v507 = *(_OWORD *)(v262 + 56);
          *(_DWORD *)(v261 + 32) = *(_DWORD *)(v262 + 32);
          long long v270 = *(_OWORD *)(v262 + 16);
          *(_OWORD *)unint64_t v261 = *(_OWORD *)v262;
          *(_OWORD *)(v261 + 16) = v270;
          unint64_t v271 = v11;
          if (v262 == v11) {
            goto LABEL_291;
          }
          while (1)
          {
            unsigned int v272 = *(_DWORD *)(v262 - 8);
            if (v264 == v272)
            {
              uint64_t v273 = *(void *)(v262 - 32);
              uint64_t v274 = (void *)(v273 + 24);
              uint64_t v275 = *(unsigned int *)(v265 + 32);
              if (v275 <= 0x40)
              {
                if ((uint64_t)(*(void *)(v265 + 24) << -(char)v275) >> -(char)v275 >= (uint64_t)(*v274 << -(char)v275) >> -(char)v275) {
                  goto LABEL_290;
                }
              }
              else
              {
                uint64_t v277 = *(void *)(v265 + 24);
                double result = *(void *)(v277 + 8 * ((v275 - 1) >> 6)) & (1 << (v275 - 1));
                unsigned int v278 = *(_DWORD *)(v273 + 32);
                unsigned int v279 = v278 - 1;
                uint64_t v280 = *(void *)(v273 + 24);
                if (v278 >= 0x41) {
                  uint64_t v274 = (void *)(v280 + 8 * (v279 >> 6));
                }
                if ((result != 0) == ((*v274 >> v279) & 1))
                {
                  unint64_t v281 = v275 + 63;
                  uint64_t v282 = v280 - 8;
                  uint64_t v283 = (v281 >> 3) & 0x3FFFFFF8;
                  uint64_t v284 = v277 - 8;
                  while (v283)
                  {
                    uint64_t v285 = *(long long **)(v284 + v283);
                    double result = *(void *)(v282 + v283);
                    v283 -= 8;
                    if (v285 != (long long *)result)
                    {
                      if ((unint64_t)v285 <= result) {
                        goto LABEL_279;
                      }
                      break;
                    }
                  }
LABEL_290:
                  unint64_t v271 = v262;
LABEL_291:
                  *(void *)unint64_t v271 = v269;
                  *(void *)(v271 + 8) = v265;
                  *(_OWORD *)(v271 + 16) = v507;
                  *(_DWORD *)(v271 + 32) = v264;
                  goto LABEL_292;
                }
                if (!result) {
                  goto LABEL_290;
                }
              }
            }
            else if (v264 <= v272)
            {
              goto LABEL_290;
            }
LABEL_279:
            long long v276 = *(_OWORD *)(v262 - 24);
            *(_OWORD *)unint64_t v262 = *(_OWORD *)(v262 - 40);
            *(_OWORD *)(v262 + 16) = v276;
            *(_DWORD *)(v262 + 32) = *(_DWORD *)(v262 - 8);
            v262 -= 40;
            if (v262 == v11)
            {
              unint64_t v271 = v11;
              goto LABEL_291;
            }
          }
        }
        return result;
      }
      if (v260) {
        return result;
      }
      while (2)
      {
        unint64_t v457 = v9;
        unint64_t v9 = v258;
        unsigned int v458 = *(_DWORD *)(v457 + 32);
        unsigned int v459 = *(_DWORD *)(v457 + 72);
        if (v459 == v458)
        {
          uint64_t v460 = *(void *)(v457 + 48);
          uint64_t v461 = *(void *)(v457 + 8);
          uint64_t v462 = (void *)(v461 + 24);
          uint64_t v463 = *(unsigned int *)(v460 + 32);
          if (v463 > 0x40)
          {
            uint64_t v481 = *(void *)(v460 + 24);
            uint64_t v482 = *(void *)(v481 + 8 * ((v463 - 1) >> 6)) & (1 << (v463 - 1));
            double result = *(unsigned int *)(v461 + 32);
            unsigned int v483 = result - 1;
            uint64_t v484 = *(void *)(v461 + 24);
            if (result >= 0x41) {
              uint64_t v462 = (void *)(v484 + 8 * (v483 >> 6));
            }
            if ((v482 != 0) == ((*v462 >> v483) & 1))
            {
              unint64_t v485 = v463 + 63;
              uint64_t v486 = v484 - 8;
              uint64_t v487 = (v485 >> 3) & 0x3FFFFFF8;
              uint64_t v488 = v481 - 8;
              while (v487)
              {
                unint64_t v489 = *(void *)(v488 + v487);
                unint64_t v490 = *(void *)(v486 + v487);
                v487 -= 8;
                if (v489 != v490)
                {
                  if (v489 <= v490) {
                    goto LABEL_465;
                  }
                  break;
                }
              }
            }
            else if (v482)
            {
              break;
            }
LABEL_483:
            unint64_t v258 = v9 + 40;
            if (v9 + 40 == a2) {
              return result;
            }
            continue;
          }
          if ((uint64_t)(*(void *)(v460 + 24) << -(char)v463) >> -(char)v463 >= (uint64_t)(*v462 << -(char)v463) >> -(char)v463) {
            goto LABEL_483;
          }
        }
        else
        {
          if (v459 <= v458) {
            goto LABEL_483;
          }
          uint64_t v460 = *(void *)(v457 + 48);
        }
        break;
      }
LABEL_465:
      uint64_t v464 = *(void *)v9;
      long long v511 = *(_OWORD *)(v457 + 56);
      unint64_t v465 = v9;
      while (1)
      {
        while (1)
        {
LABEL_466:
          while (1)
          {
            unint64_t v466 = v465;
            unint64_t v465 = v457;
            long long v467 = *(_OWORD *)(v457 + 16);
            *(_OWORD *)unint64_t v466 = *(_OWORD *)v457;
            *(_OWORD *)(v466 + 16) = v467;
            *(_DWORD *)(v466 + 32) = *(_DWORD *)(v457 + 32);
            v457 -= 40;
            unsigned int v468 = *(_DWORD *)(v465 - 8);
            if (v459 == v468) {
              break;
            }
            if (v459 <= v468) {
              goto LABEL_482;
            }
          }
          uint64_t v469 = *(void *)(v465 - 32);
          v470 = (void *)(v469 + 24);
          uint64_t v471 = *(unsigned int *)(v460 + 32);
          if (v471 > 0x40) {
            break;
          }
          if ((uint64_t)(*(void *)(v460 + 24) << -(char)v471) >> -(char)v471 >= (uint64_t)(*v470 << -(char)v471) >> -(char)v471) {
            goto LABEL_482;
          }
        }
        uint64_t v472 = *(void *)(v460 + 24);
        double result = *(void *)(v472 + 8 * ((v471 - 1) >> 6)) & (1 << (v471 - 1));
        unsigned int v473 = *(_DWORD *)(v469 + 32);
        unsigned int v474 = v473 - 1;
        uint64_t v475 = *(void *)(v469 + 24);
        if (v473 >= 0x41) {
          v470 = (void *)(v475 + 8 * (v474 >> 6));
        }
        if ((result != 0) == ((*v470 >> v474) & 1)) {
          break;
        }
        if (!result) {
          goto LABEL_482;
        }
      }
      unint64_t v476 = v471 + 63;
      uint64_t v477 = v475 - 8;
      uint64_t v478 = (v476 >> 3) & 0x3FFFFFF8;
      uint64_t v479 = v472 - 8;
      while (v478)
      {
        uint64_t v480 = *(long long **)(v479 + v478);
        double result = *(void *)(v477 + v478);
        v478 -= 8;
        if (v480 != (long long *)result)
        {
          if ((unint64_t)v480 <= result) {
            goto LABEL_466;
          }
          break;
        }
      }
LABEL_482:
      *(void *)unint64_t v465 = v464;
      *(void *)(v465 + 8) = v460;
      *(_OWORD *)(v465 + 16) = v511;
      *(_DWORD *)(v465 + 32) = v459;
      goto LABEL_483;
    }
    if (!a3)
    {
      if (v11 == a2) {
        return result;
      }
      int64_t v297 = (unint64_t)(v13 - 2) >> 1;
      int64_t v298 = v297;
LABEL_306:
      int64_t v299 = v298;
      if (v297 < v298) {
        goto LABEL_364;
      }
      uint64_t v300 = (2 * v298) | 1;
      unint64_t v301 = v11 + 40 * v300;
      if (2 * v299 + 2 >= v13) {
        goto LABEL_314;
      }
      unsigned int v302 = *(_DWORD *)(v301 + 72);
      unsigned int v303 = *(_DWORD *)(v11 + 40 * v300 + 32);
      if (v303 == v302)
      {
        uint64_t v304 = *(void *)(v11 + 40 * v300 + 8);
        uint64_t v305 = *(void *)(v301 + 48);
        long long v306 = (void *)(v305 + 24);
        uint64_t v307 = *(unsigned int *)(v304 + 32);
        if (v307 <= 0x40)
        {
          BOOL v308 = (uint64_t)(*(void *)(v304 + 24) << -(char)v307) >> -(char)v307 < (uint64_t)(*v306 << -(char)v307) >> -(char)v307;
          goto LABEL_312;
        }
        uint64_t v366 = *(void *)(v304 + 24);
        uint64_t v367 = *(void *)(v366 + 8 * ((v307 - 1) >> 6)) & (1 << (v307 - 1));
        unsigned int v368 = *(_DWORD *)(v305 + 32);
        unsigned int v369 = v368 - 1;
        uint64_t v370 = *(void *)(v305 + 24);
        if (v368 >= 0x41) {
          long long v306 = (void *)(v370 + 8 * (v369 >> 6));
        }
        if (((v367 != 0) ^ (*v306 >> v369)))
        {
          v301 += 40 * (v367 != 0);
          if (!v367) {
            goto LABEL_314;
          }
LABEL_313:
          uint64_t v300 = 2 * v299 + 2;
LABEL_314:
          unint64_t v309 = v11 + 40 * v299;
          unsigned int v310 = *(_DWORD *)(v309 + 32);
          unsigned int v311 = *(_DWORD *)(v301 + 32);
          if (v311 == v310)
          {
            uint64_t v312 = *(void *)(v301 + 8);
            uint64_t v313 = *(void *)(v11 + 40 * v299 + 8);
            int v314 = (void *)(v313 + 24);
            uint64_t v315 = *(unsigned int *)(v312 + 32);
            if (v315 > 0x40)
            {
              uint64_t v361 = *(void *)(v312 + 24);
              uint64_t v362 = *(void *)(v361 + 8 * ((v315 - 1) >> 6)) & (1 << (v315 - 1));
              unsigned int v363 = *(_DWORD *)(v313 + 32);
              unsigned int v364 = v363 - 1;
              uint64_t v365 = *(void *)(v313 + 24);
              if (v363 >= 0x41) {
                int v314 = (void *)(v365 + 8 * (v364 >> 6));
              }
              if ((v362 != 0) == ((*v314 >> v364) & 1))
              {
                unint64_t v371 = v315 + 63;
                uint64_t v372 = v365 - 8;
                uint64_t v373 = (v371 >> 3) & 0x3FFFFFF8;
                uint64_t v374 = v361 - 8;
                do
                {
                  if (!v373) {
                    goto LABEL_320;
                  }
                  unint64_t v375 = *(void *)(v374 + v373);
                  unint64_t v376 = *(void *)(v372 + v373);
                  v373 -= 8;
                }
                while (v375 == v376);
                if (v375 <= v376) {
                  goto LABEL_364;
                }
              }
              else if (v362)
              {
                goto LABEL_364;
              }
            }
            else if ((uint64_t)(*(void *)(v312 + 24) << -(char)v315) >> -(char)v315 < (uint64_t)(*v314 << -(char)v315) >> -(char)v315)
            {
              goto LABEL_364;
            }
          }
          else
          {
            if (v311 > v310) {
              goto LABEL_364;
            }
            uint64_t v313 = *(void *)(v309 + 8);
          }
LABEL_320:
          uint64_t v316 = *(void *)v309;
          long long v508 = *(_OWORD *)(v309 + 16);
          long long v317 = *(_OWORD *)v301;
          long long v318 = *(_OWORD *)(v301 + 16);
          *(_DWORD *)(v309 + 32) = *(_DWORD *)(v301 + 32);
          *(_OWORD *)unint64_t v309 = v317;
          *(_OWORD *)(v309 + 16) = v318;
          if (v297 < v300) {
            goto LABEL_363;
          }
          while (1)
          {
            unint64_t v319 = v301;
            uint64_t v320 = 2 * v300;
            uint64_t v300 = (2 * v300) | 1;
            unint64_t v301 = v11 + 40 * v300;
            uint64_t v321 = v320 + 2;
            if (v321 < v13)
            {
              unsigned int v322 = *(_DWORD *)(v301 + 72);
              unsigned int v323 = *(_DWORD *)(v11 + 40 * v300 + 32);
              if (v323 == v322)
              {
                uint64_t v324 = *(void *)(v11 + 40 * v300 + 8);
                uint64_t v325 = *(void *)(v301 + 48);
                char v326 = (void *)(v325 + 24);
                uint64_t v327 = *(unsigned int *)(v324 + 32);
                if (v327 > 0x40)
                {
                  uint64_t v344 = *(void *)(v324 + 24);
                  uint64_t v345 = *(void *)(v344 + 8 * ((v327 - 1) >> 6)) & (1 << (v327 - 1));
                  unsigned int v346 = *(_DWORD *)(v325 + 32);
                  unsigned int v347 = v346 - 1;
                  uint64_t v348 = *(void *)(v325 + 24);
                  if (v346 >= 0x41) {
                    char v326 = (void *)(v348 + 8 * (v347 >> 6));
                  }
                  if ((v345 != 0) == ((*v326 >> v347) & 1))
                  {
                    unint64_t v355 = v327 + 63;
                    uint64_t v356 = v348 - 8;
                    uint64_t v357 = (v355 >> 3) & 0x3FFFFFF8;
                    uint64_t v358 = v344 - 8;
                    do
                    {
                      if (!v357)
                      {
                        unsigned int v331 = 0;
                        goto LABEL_327;
                      }
                      unint64_t v359 = *(void *)(v358 + v357);
                      unint64_t v360 = *(void *)(v356 + v357);
                      v357 -= 8;
                    }
                    while (v359 == v360);
                    if (v359 > v360) {
                      unsigned int v331 = 1;
                    }
                    else {
                      unsigned int v331 = -1;
                    }
                  }
                  else if (v345)
                  {
                    unsigned int v331 = -1;
                  }
                  else
                  {
                    unsigned int v331 = 1;
                  }
                }
                else
                {
                  uint64_t v328 = -v327;
                  uint64_t v329 = (uint64_t)(*(void *)(v324 + 24) << v328) >> v328;
                  uint64_t v330 = (uint64_t)(*v326 << v328) >> v328;
                  BOOL v79 = v329 < v330;
                  unsigned int v331 = v329 > v330;
                  if (v79) {
                    unsigned int v331 = -1;
                  }
                }
LABEL_327:
                BOOL v332 = v331 >> 31;
              }
              else
              {
                BOOL v332 = v323 > v322;
              }
              v301 += 40 * v332;
              if (v332) {
                uint64_t v300 = v321;
              }
            }
            unsigned int v333 = *(_DWORD *)(v301 + 32);
            if (v333 == v310)
            {
              uint64_t v334 = *(void *)(v301 + 8);
              uint64_t v335 = *(unsigned int *)(v334 + 32);
              if (v335 > 0x40)
              {
                uint64_t v338 = *(void *)(v334 + 24);
                uint64_t v339 = *(void *)(v338 + 8 * ((v335 - 1) >> 6)) & (1 << (v335 - 1));
                unsigned int v340 = *(_DWORD *)(v313 + 32);
                unsigned int v341 = v340 - 1;
                uint64_t v342 = *(void *)(v313 + 24);
                if (v340 >= 0x41) {
                  unsigned int v343 = (void *)(v342 + 8 * (v341 >> 6));
                }
                else {
                  unsigned int v343 = (void *)(v313 + 24);
                }
                if ((v339 != 0) == ((*v343 >> v341) & 1))
                {
                  unint64_t v349 = v335 + 63;
                  uint64_t v350 = v342 - 8;
                  uint64_t v351 = (v349 >> 3) & 0x3FFFFFF8;
                  uint64_t v352 = v338 - 8;
                  do
                  {
                    if (!v351) {
                      goto LABEL_336;
                    }
                    unint64_t v353 = *(void *)(v352 + v351);
                    unint64_t v354 = *(void *)(v350 + v351);
                    v351 -= 8;
                  }
                  while (v353 == v354);
                  if (v353 <= v354)
                  {
LABEL_362:
                    unint64_t v301 = v319;
LABEL_363:
                    *(void *)unint64_t v301 = v316;
                    *(void *)(v301 + 8) = v313;
                    *(_OWORD *)(v301 + 16) = v508;
                    *(_DWORD *)(v301 + 32) = v310;
LABEL_364:
                    int64_t v298 = v299 - 1;
                    if (!v299)
                    {
                      while (2)
                      {
                        uint64_t v383 = 0;
                        uint64_t v519 = *(void *)(v11 + 32);
                        long long v509 = *(_OWORD *)v11;
                        long long v515 = *(_OWORD *)(v11 + 16);
                        unint64_t v384 = v11;
                        do
                        {
                          double result = v383 + 1;
                          unint64_t v385 = v384 + 40 * (v383 + 1);
                          uint64_t v386 = (2 * v383) | 1;
                          uint64_t v387 = 2 * v383 + 2;
                          if (v387 < v13)
                          {
                            unsigned int v388 = *(_DWORD *)(v385 + 72);
                            unsigned int v389 = *(_DWORD *)(v384 + 40 * result + 32);
                            if (v389 == v388)
                            {
                              uint64_t v390 = *(void *)(v384 + 40 * result + 8);
                              uint64_t v391 = *(void *)(v385 + 48);
                              v392 = (void *)(v391 + 24);
                              uint64_t v393 = *(unsigned int *)(v390 + 32);
                              if (v393 > 0x40)
                              {
                                uint64_t v400 = *(void *)(v390 + 24);
                                uint64_t v401 = *(void *)(v400 + 8 * ((v393 - 1) >> 6)) & (1 << (v393 - 1));
                                unsigned int v402 = *(_DWORD *)(v391 + 32);
                                unsigned int v403 = v402 - 1;
                                uint64_t v404 = *(void *)(v391 + 24);
                                if (v402 >= 0x41) {
                                  v392 = (void *)(v404 + 8 * (v403 >> 6));
                                }
                                if ((v401 != 0) == ((*v392 >> v403) & 1))
                                {
                                  unint64_t v405 = v393 + 63;
                                  uint64_t v406 = v404 - 8;
                                  uint64_t v407 = (v405 >> 3) & 0x3FFFFFF8;
                                  uint64_t v408 = v400 - 8;
                                  do
                                  {
                                    if (!v407)
                                    {
                                      unsigned int v397 = 0;
                                      goto LABEL_392;
                                    }
                                    unint64_t v409 = *(void *)(v408 + v407);
                                    unint64_t v410 = *(void *)(v406 + v407);
                                    v407 -= 8;
                                  }
                                  while (v409 == v410);
                                  if (v409 > v410) {
                                    unsigned int v397 = 1;
                                  }
                                  else {
                                    unsigned int v397 = -1;
                                  }
                                }
                                else if (v401)
                                {
                                  unsigned int v397 = -1;
                                }
                                else
                                {
                                  unsigned int v397 = 1;
                                }
                              }
                              else
                              {
                                uint64_t v394 = -v393;
                                uint64_t v395 = (uint64_t)(*(void *)(v390 + 24) << v394) >> v394;
                                uint64_t v396 = (uint64_t)(*v392 << v394) >> v394;
                                BOOL v79 = v395 < v396;
                                unsigned int v397 = v395 > v396;
                                if (v79) {
                                  unsigned int v397 = -1;
                                }
                              }
LABEL_392:
                              double result = v397 >> 31;
                            }
                            else
                            {
                              double result = v389 > v388;
                            }
                            v385 += 40 * result;
                            if (result) {
                              uint64_t v386 = v387;
                            }
                          }
                          long long v398 = *(_OWORD *)v385;
                          long long v399 = *(_OWORD *)(v385 + 16);
                          *(_DWORD *)(v384 + 32) = *(_DWORD *)(v385 + 32);
                          *(_OWORD *)unint64_t v384 = v398;
                          *(_OWORD *)(v384 + 16) = v399;
                          unint64_t v384 = v385;
                          uint64_t v383 = v386;
                        }
                        while (v386 <= (uint64_t)((unint64_t)(v13 - 2) >> 1));
                        a2 -= 40;
                        if (v385 == a2)
                        {
                          *(_DWORD *)(v385 + 32) = v519;
                          *(_OWORD *)unint64_t v385 = v509;
                          *(_OWORD *)(v385 + 16) = v515;
                          goto LABEL_423;
                        }
                        long long v411 = *(_OWORD *)a2;
                        long long v412 = *(_OWORD *)(a2 + 16);
                        *(_DWORD *)(v385 + 32) = *(_DWORD *)(a2 + 32);
                        *(_OWORD *)unint64_t v385 = v411;
                        *(_OWORD *)(v385 + 16) = v412;
                        *(_DWORD *)(a2 + 32) = v519;
                        *(_OWORD *)a2 = v509;
                        *(_OWORD *)(a2 + 16) = v515;
                        uint64_t v413 = v385 - v11 + 40;
                        if (v413 >= 41)
                        {
                          unint64_t v414 = v413 / 0x28uLL - 2;
                          unint64_t v415 = v414 >> 1;
                          unsigned int v416 = *(_DWORD *)(v385 + 32);
                          unsigned int v417 = *(_DWORD *)(v11 + 40 * (v414 >> 1) + 32);
                          if (v417 != v416)
                          {
                            if (v417 <= v416) {
                              goto LABEL_423;
                            }
                            uint64_t v419 = *(void *)(v385 + 8);
                            goto LABEL_420;
                          }
                          uint64_t v418 = *(void *)(v11 + 40 * v415 + 8);
                          uint64_t v419 = *(void *)(v385 + 8);
                          uint64_t v420 = (void *)(v419 + 24);
                          uint64_t v421 = *(unsigned int *)(v418 + 32);
                          if (v421 > 0x40)
                          {
                            double result = *(void *)(v418 + 24);
                            uint64_t v446 = *(void *)(result + 8 * ((v421 - 1) >> 6)) & (1 << (v421 - 1));
                            unsigned int v447 = *(_DWORD *)(v419 + 32);
                            unsigned int v448 = v447 - 1;
                            uint64_t v449 = *(void *)(v419 + 24);
                            if (v447 >= 0x41) {
                              uint64_t v420 = (void *)(v449 + 8 * (v448 >> 6));
                            }
                            if ((v446 != 0) != ((*v420 >> v448) & 1))
                            {
                              if (!v446) {
                                goto LABEL_423;
                              }
                              goto LABEL_420;
                            }
                            unint64_t v450 = v421 + 63;
                            uint64_t v451 = v449 - 8;
                            uint64_t v452 = (v450 >> 3) & 0x3FFFFFF8;
                            result -= 8;
                            while (v452)
                            {
                              unint64_t v453 = *(void *)(result + v452);
                              unint64_t v454 = *(void *)(v451 + v452);
                              v452 -= 8;
                              if (v453 != v454)
                              {
                                if (v453 <= v454) {
                                  goto LABEL_420;
                                }
                                break;
                              }
                            }
                          }
                          else
                          {
                            uint64_t v422 = -v421;
                            double result = (uint64_t)(*(void *)(v418 + 24) << v422) >> v422;
                            if ((uint64_t)result >= (uint64_t)(*v420 << v422) >> v422) {
                              goto LABEL_423;
                            }
LABEL_420:
                            uint64_t v423 = *(void *)v385;
                            long long v504 = *(_OWORD *)(v385 + 16);
                            unsigned int v424 = *(_DWORD *)(v385 + 32);
                            double result = v11 + 40 * v415;
                            int v425 = *(_DWORD *)(result + 32);
                            long long v426 = *(_OWORD *)(result + 16);
                            *(_OWORD *)unint64_t v385 = *(_OWORD *)result;
                            *(_OWORD *)(v385 + 16) = v426;
                            *(_DWORD *)(v385 + 32) = v425;
                            if (v414 >= 2)
                            {
                              while (1)
                              {
                                unint64_t v428 = v415 - 1;
                                unint64_t v415 = (v415 - 1) >> 1;
                                unsigned int v429 = *(_DWORD *)(v11 + 40 * v415 + 32);
                                if (v429 == v424)
                                {
                                  uint64_t v430 = *(void *)(v11 + 40 * v415 + 8);
                                  uint64_t v431 = *(unsigned int *)(v430 + 32);
                                  if (v431 > 0x40)
                                  {
                                    uint64_t v434 = *(void *)(v430 + 24);
                                    uint64_t v435 = *(void *)(v434 + 8 * ((v431 - 1) >> 6)) & (1 << (v431 - 1));
                                    unsigned int v436 = *(_DWORD *)(v419 + 32);
                                    unsigned int v437 = v436 - 1;
                                    uint64_t v438 = *(void *)(v419 + 24);
                                    if (v436 >= 0x41) {
                                      BOOL v439 = (void *)(v438 + 8 * (v437 >> 6));
                                    }
                                    else {
                                      BOOL v439 = (void *)(v419 + 24);
                                    }
                                    if ((v435 != 0) == ((*v439 >> v437) & 1))
                                    {
                                      unint64_t v440 = v431 + 63;
                                      uint64_t v441 = v438 - 8;
                                      uint64_t v442 = (v440 >> 3) & 0x3FFFFFF8;
                                      uint64_t v443 = v434 - 8;
                                      while (v442)
                                      {
                                        unint64_t v444 = *(void *)(v443 + v442);
                                        unint64_t v445 = *(void *)(v441 + v442);
                                        v442 -= 8;
                                        if (v444 != v445)
                                        {
                                          if (v444 <= v445) {
                                            goto LABEL_431;
                                          }
                                          goto LABEL_421;
                                        }
                                      }
                                      break;
                                    }
                                    if (!v435) {
                                      break;
                                    }
                                  }
                                  else if ((uint64_t)(*(void *)(v430 + 24) << -(char)v431) >> -(char)v431 >= (uint64_t)(*(void *)(v419 + 24) << -(char)v431) >> -(char)v431)
                                  {
                                    break;
                                  }
                                }
                                else if (v429 <= v424)
                                {
                                  break;
                                }
LABEL_431:
                                unint64_t v427 = v11 + 40 * v415;
                                long long v432 = *(_OWORD *)v427;
                                long long v433 = *(_OWORD *)(v427 + 16);
                                *(_DWORD *)(result + 32) = *(_DWORD *)(v427 + 32);
                                *(_OWORD *)double result = v432;
                                *(_OWORD *)(result + 16) = v433;
                                double result = v427;
                                if (v428 <= 1) {
                                  goto LABEL_422;
                                }
                              }
                            }
LABEL_421:
                            unint64_t v427 = result;
LABEL_422:
                            *(void *)unint64_t v427 = v423;
                            *(void *)(v427 + 8) = v419;
                            *(_OWORD *)(v427 + 16) = v504;
                            *(_DWORD *)(v427 + 32) = v424;
                          }
                        }
LABEL_423:
                        BOOL v79 = v13-- <= 2;
                        if (v79) {
                          return result;
                        }
                        continue;
                      }
                    }
                    goto LABEL_306;
                  }
                }
                else if (v339)
                {
                  goto LABEL_362;
                }
              }
              else if ((uint64_t)(*(void *)(v334 + 24) << -(char)v335) >> -(char)v335 < (uint64_t)(*(void *)(v313 + 24) << -(char)v335) >> -(char)v335)
              {
                goto LABEL_362;
              }
            }
            else if (v333 > v310)
            {
              goto LABEL_362;
            }
LABEL_336:
            long long v336 = *(_OWORD *)v301;
            long long v337 = *(_OWORD *)(v301 + 16);
            *(_DWORD *)(v319 + 32) = *(_DWORD *)(v301 + 32);
            *(_OWORD *)unint64_t v319 = v336;
            *(_OWORD *)(v319 + 16) = v337;
            if (v297 < v300) {
              goto LABEL_363;
            }
          }
        }
        unint64_t v377 = v307 + 63;
        uint64_t v378 = v370 - 8;
        uint64_t v379 = (v377 >> 3) & 0x3FFFFFF8;
        uint64_t v380 = v366 - 8;
        do
        {
          if (!v379) {
            goto LABEL_314;
          }
          unint64_t v381 = *(void *)(v380 + v379);
          unint64_t v382 = *(void *)(v378 + v379);
          v379 -= 8;
        }
        while (v381 == v382);
        BOOL v308 = v381 <= v382;
      }
      else
      {
        BOOL v308 = v303 > v302;
      }
LABEL_312:
      v301 += 40 * v308;
      if (v308) {
        goto LABEL_313;
      }
      goto LABEL_314;
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    unint64_t v15 = v11 + 40 * ((unint64_t)v13 >> 1);
    if ((unint64_t)v12 >= 0x1401)
    {
      sub_1CC706108((long long *)v9, (long long *)(v9 + 40 * ((unint64_t)v13 >> 1)), (long long *)(a2 - 40));
      uint64_t v16 = 5 * v14;
      unint64_t v17 = (long long *)(v9 + 40 * v14 - 40);
      sub_1CC706108((long long *)(v9 + 40), v17, (long long *)(a2 - 80));
      uint64_t v18 = (long long *)(v9 + 40 + 8 * v16);
      sub_1CC706108((long long *)(v9 + 80), v18, (long long *)(a2 - 120));
      double result = (unint64_t)sub_1CC706108(v17, (long long *)v15, v18);
      uint64_t v517 = *(void *)(v9 + 32);
      long long v505 = *(_OWORD *)v9;
      long long v512 = *(_OWORD *)(v9 + 16);
      long long v19 = *(_OWORD *)v15;
      long long v20 = *(_OWORD *)(v15 + 16);
      *(_DWORD *)(v9 + 32) = *(_DWORD *)(v15 + 32);
      *(_OWORD *)unint64_t v9 = v19;
      *(_OWORD *)(v9 + 16) = v20;
      *(_DWORD *)(v15 + 32) = v517;
      *(_OWORD *)unint64_t v15 = v505;
      *(_OWORD *)(v15 + 16) = v512;
    }
    else
    {
      double result = (unint64_t)sub_1CC706108((long long *)(v9 + 40 * ((unint64_t)v13 >> 1)), (long long *)v9, (long long *)(a2 - 40));
    }
    --a3;
    if (a4)
    {
      unsigned int v21 = *(_DWORD *)(v9 + 32);
    }
    else
    {
      unsigned int v21 = *(_DWORD *)(v9 + 32);
      unsigned int v22 = *(_DWORD *)(v9 - 8);
      if (v22 == v21)
      {
        uint64_t v23 = *(void *)(v9 - 32);
        uint64_t v24 = *(void *)(v9 + 8);
        uint64_t v25 = (void *)(v24 + 24);
        uint64_t v26 = *(unsigned int *)(v23 + 32);
        if (v26 > 0x40)
        {
          uint64_t v158 = *(void *)(v23 + 24);
          uint64_t v159 = *(void *)(v158 + 8 * ((v26 - 1) >> 6)) & (1 << (v26 - 1));
          unsigned int v160 = *(_DWORD *)(v24 + 32);
          unsigned int v161 = v160 - 1;
          uint64_t v162 = *(void *)(v24 + 24);
          double result = v162 + 8 * ((v160 - 1) >> 6);
          if (v160 >= 0x41) {
            uint64_t v25 = (void *)(v162 + 8 * (v161 >> 6));
          }
          if ((v159 != 0) == ((*v25 >> v161) & 1))
          {
            unint64_t v163 = v26 + 63;
            uint64_t v164 = v162 - 8;
            uint64_t v165 = (v163 >> 3) & 0x3FFFFFF8;
            uint64_t v166 = v158 - 8;
            do
            {
              if (!v165) {
                goto LABEL_15;
              }
              unint64_t v167 = *(void *)(v166 + v165);
              unint64_t v168 = *(void *)(v164 + v165);
              v165 -= 8;
            }
            while (v167 == v168);
            if (v167 > v168) {
              goto LABEL_15;
            }
          }
          else if (!v159)
          {
            goto LABEL_15;
          }
        }
        else if ((uint64_t)(*(void *)(v23 + 24) << -(char)v26) >> -(char)v26 >= (uint64_t)(*v25 << -(char)v26) >> -(char)v26)
        {
          goto LABEL_15;
        }
      }
      else if (v22 <= v21)
      {
        uint64_t v24 = *(void *)(v9 + 8);
LABEL_15:
        uint64_t v27 = *(void *)v9;
        long long v502 = *(_OWORD *)(v9 + 16);
        unsigned int v28 = *(_DWORD *)(a2 - 8);
        if (v21 == v28)
        {
          uint64_t v29 = *(void *)(a2 - 32);
          unsigned int v30 = (void *)(v29 + 24);
          uint64_t v31 = *(unsigned int *)(v24 + 32);
          if (v31 <= 0x40)
          {
            if ((uint64_t)(*(void *)(v24 + 24) << -(char)v31) >> -(char)v31 >= (uint64_t)(*v30 << -(char)v31) >> -(char)v31) {
              goto LABEL_164;
            }
LABEL_132:
            unint64_t v140 = v9;
            do
            {
              while (1)
              {
                while (1)
                {
LABEL_133:
                  while (1)
                  {
                    unint64_t v11 = v140 + 40;
                    unsigned int v141 = *(_DWORD *)(v140 + 72);
                    if (v21 == v141) {
                      break;
                    }
                    v140 += 40;
                    if (v21 > v141) {
                      goto LABEL_181;
                    }
                  }
                  uint64_t v142 = *(void *)(v140 + 48);
                  uint64_t v143 = (void *)(v142 + 24);
                  uint64_t v144 = *(unsigned int *)(v24 + 32);
                  if (v144 > 0x40) {
                    break;
                  }
                  uint64_t v145 = -v144;
                  uint64_t v146 = (uint64_t)(*(void *)(v24 + 24) << v145) >> v145;
                  uint64_t v147 = (uint64_t)(*v143 << v145) >> v145;
                  unint64_t v140 = v11;
                  if (v146 < v147) {
                    goto LABEL_181;
                  }
                }
                uint64_t v148 = *(void *)(v24 + 24);
                uint64_t v149 = *(void *)(v148 + 8 * ((v144 - 1) >> 6)) & (1 << (v144 - 1));
                double result = *(unsigned int *)(v142 + 32);
                unsigned int v150 = result - 1;
                uint64_t v151 = *(void *)(v142 + 24);
                if (result >= 0x41) {
                  uint64_t v143 = (void *)(v151 + 8 * (v150 >> 6));
                }
                if ((v149 != 0) != ((*v143 >> v150) & 1)) {
                  break;
                }
                unint64_t v152 = v144 + 63;
                uint64_t v153 = v151 - 8;
                uint64_t v154 = (v152 >> 3) & 0x3FFFFFF8;
                uint64_t v155 = v148 - 8;
                do
                {
                  if (!v154)
                  {
                    unint64_t v140 = v11;
                    goto LABEL_133;
                  }
                  unint64_t v156 = *(void *)(v155 + v154);
                  unint64_t v157 = *(void *)(v153 + v154);
                  v154 -= 8;
                }
                while (v156 == v157);
                unint64_t v140 = v11;
                if (v156 <= v157) {
                  goto LABEL_181;
                }
              }
              unint64_t v140 = v11;
            }
            while (!v149);
LABEL_181:
            unint64_t v190 = a2;
            if (v11 >= a2) {
              goto LABEL_232;
            }
            unint64_t v190 = a2;
            while (1)
            {
              unint64_t v191 = v190;
              v190 -= 40;
              if (v21 == v28)
              {
                uint64_t v192 = *(void *)(v191 - 32);
                uint64_t v193 = (void *)(v192 + 24);
                uint64_t v194 = *(unsigned int *)(v24 + 32);
                if (v194 > 0x40)
                {
                  uint64_t v195 = *(void *)(v24 + 24);
                  uint64_t v196 = *(void *)(v195 + 8 * ((v194 - 1) >> 6)) & (1 << (v194 - 1));
                  double result = v196 != 0;
                  unsigned int v197 = *(_DWORD *)(v192 + 32);
                  unsigned int v198 = v197 - 1;
                  uint64_t v199 = *(void *)(v192 + 24);
                  if (v197 >= 0x41) {
                    uint64_t v193 = (void *)(v199 + 8 * (v198 >> 6));
                  }
                  if (result == ((*v193 >> v198) & 1))
                  {
                    unint64_t v200 = v194 + 63;
                    uint64_t v201 = v199 - 8;
                    uint64_t v202 = (v200 >> 3) & 0x3FFFFFF8;
                    uint64_t v203 = v195 - 8;
                    while (v202)
                    {
                      unint64_t v204 = *(void *)(v203 + v202);
                      unint64_t v205 = *(void *)(v201 + v202);
                      v202 -= 8;
                      if (v204 != v205)
                      {
                        if (v204 <= v205) {
                          goto LABEL_188;
                        }
                        break;
                      }
                    }
LABEL_232:
                    while (v11 < v190)
                    {
                      uint64_t v518 = *(void *)(v11 + 32);
                      long long v506 = *(_OWORD *)v11;
                      long long v514 = *(_OWORD *)(v11 + 16);
                      long long v206 = *(_OWORD *)v190;
                      long long v207 = *(_OWORD *)(v190 + 16);
                      *(_DWORD *)(v11 + 32) = *(_DWORD *)(v190 + 32);
                      *(_OWORD *)unint64_t v11 = v206;
                      *(_OWORD *)(v11 + 16) = v207;
                      *(_DWORD *)(v190 + 32) = v518;
                      *(_OWORD *)unint64_t v190 = v506;
                      *(_OWORD *)(v190 + 16) = v514;
LABEL_200:
                      unint64_t v208 = v11;
                      do
                      {
                        while (1)
                        {
LABEL_201:
                          while (1)
                          {
                            unint64_t v11 = v208 + 40;
                            unsigned int v209 = *(_DWORD *)(v208 + 72);
                            if (v21 == v209) {
                              break;
                            }
                            v208 += 40;
                            if (v21 > v209) {
                              goto LABEL_216;
                            }
                          }
                          uint64_t v210 = *(void *)(v208 + 48);
                          uint64_t v211 = (void *)(v210 + 24);
                          uint64_t v212 = *(unsigned int *)(v24 + 32);
                          if (v212 > 0x40) {
                            break;
                          }
                          uint64_t v213 = -v212;
                          uint64_t v214 = (uint64_t)(*(void *)(v24 + 24) << v213) >> v213;
                          uint64_t v215 = (uint64_t)(*v211 << v213) >> v213;
                          unint64_t v208 = v11;
                          if (v214 < v215) {
                            goto LABEL_216;
                          }
                        }
                        uint64_t v216 = *(void *)(v24 + 24);
                        uint64_t v217 = *(void *)(v216 + 8 * ((v212 - 1) >> 6)) & (1 << (v212
                                                                                                  - 1));
                        double result = *(unsigned int *)(v210 + 32);
                        unsigned int v218 = result - 1;
                        uint64_t v219 = *(void *)(v210 + 24);
                        if (result >= 0x41) {
                          uint64_t v211 = (void *)(v219 + 8 * (v218 >> 6));
                        }
                        if ((v217 != 0) == ((*v211 >> v218) & 1))
                        {
                          unint64_t v220 = v212 + 63;
                          uint64_t v221 = v219 - 8;
                          uint64_t v222 = (v220 >> 3) & 0x3FFFFFF8;
                          uint64_t v223 = v216 - 8;
                          while (v222)
                          {
                            unint64_t v224 = *(void *)(v223 + v222);
                            unint64_t v225 = *(void *)(v221 + v222);
                            v222 -= 8;
                            if (v224 != v225)
                            {
                              unint64_t v208 = v11;
                              if (v224 > v225) {
                                goto LABEL_201;
                              }
                              goto LABEL_216;
                            }
                          }
                          goto LABEL_200;
                        }
                        unint64_t v208 = v11;
                      }
                      while (!v217);
LABEL_216:
                      unint64_t v226 = v190;
                      while (1)
                      {
                        while (1)
                        {
LABEL_217:
                          while (1)
                          {
                            unint64_t v190 = v226 - 40;
                            unsigned int v227 = *(_DWORD *)(v226 - 8);
                            if (v21 == v227) {
                              break;
                            }
                            v226 -= 40;
                            if (v21 <= v227) {
                              goto LABEL_232;
                            }
                          }
                          uint64_t v228 = *(void *)(v226 - 32);
                          uint64_t v229 = (void *)(v228 + 24);
                          uint64_t v230 = *(unsigned int *)(v24 + 32);
                          if (v230 > 0x40) {
                            break;
                          }
                          uint64_t v231 = -v230;
                          uint64_t v232 = (uint64_t)(*(void *)(v24 + 24) << v231) >> v231;
                          uint64_t v233 = (uint64_t)(*v229 << v231) >> v231;
                          unint64_t v226 = v190;
                          if (v232 >= v233) {
                            goto LABEL_232;
                          }
                        }
                        uint64_t v234 = *(void *)(v24 + 24);
                        uint64_t v235 = *(void *)(v234 + 8 * ((v230 - 1) >> 6)) & (1 << (v230
                                                                                                  - 1));
                        double result = *(unsigned int *)(v228 + 32);
                        unsigned int v236 = result - 1;
                        uint64_t v237 = *(void *)(v228 + 24);
                        if (result >= 0x41) {
                          uint64_t v229 = (void *)(v237 + 8 * (v236 >> 6));
                        }
                        if ((v235 != 0) == ((*v229 >> v236) & 1)) {
                          break;
                        }
                        unint64_t v226 = v190;
                        if (!v235) {
                          goto LABEL_232;
                        }
                      }
                      unint64_t v238 = v230 + 63;
                      uint64_t v239 = v237 - 8;
                      uint64_t v240 = (v238 >> 3) & 0x3FFFFFF8;
                      uint64_t v241 = v234 - 8;
                      while (v240)
                      {
                        unint64_t v242 = *(void *)(v241 + v240);
                        unint64_t v243 = *(void *)(v239 + v240);
                        v240 -= 8;
                        if (v242 != v243)
                        {
                          unint64_t v226 = v190;
                          if (v242 <= v243) {
                            goto LABEL_217;
                          }
                          goto LABEL_232;
                        }
                      }
                    }
                    BOOL v4 = v11 - 40 >= v9;
                    BOOL v5 = v11 - 40 == v9;
                    if (v11 - 40 != v9)
                    {
                      long long v244 = *(_OWORD *)(v11 - 40);
                      long long v245 = *(_OWORD *)(v11 - 24);
                      *(_DWORD *)(v9 + 32) = *(_DWORD *)(v11 - 8);
                      *(_OWORD *)unint64_t v9 = v244;
                      *(_OWORD *)(v9 + 16) = v245;
                    }
                    a4 = 0;
                    *(void *)(v11 - 40) = v27;
                    *(void *)(v11 - 32) = v24;
                    *(_OWORD *)(v11 - 24) = v502;
                    *(_DWORD *)(v11 - 8) = v21;
                    goto LABEL_3;
                  }
                  if (!v196) {
                    goto LABEL_232;
                  }
                }
                else if ((uint64_t)(*(void *)(v24 + 24) << -(char)v194) >> -(char)v194 >= (uint64_t)(*v193 << -(char)v194) >> -(char)v194)
                {
                  goto LABEL_232;
                }
              }
              else if (v21 <= v28)
              {
                goto LABEL_232;
              }
LABEL_188:
              unsigned int v28 = *(_DWORD *)(v191 - 48);
            }
          }
          uint64_t v169 = *(void *)(v24 + 24);
          uint64_t v170 = *(void *)(v169 + 8 * ((v31 - 1) >> 6)) & (1 << (v31 - 1));
          double result = *(unsigned int *)(v29 + 32);
          unsigned int v171 = result - 1;
          uint64_t v172 = *(void *)(v29 + 24);
          if (result >= 0x41) {
            unsigned int v30 = (void *)(v172 + 8 * (v171 >> 6));
          }
          if ((v170 != 0) == ((*v30 >> v171) & 1))
          {
            unint64_t v246 = v31 + 63;
            uint64_t v247 = v172 - 8;
            uint64_t v248 = (v246 >> 3) & 0x3FFFFFF8;
            uint64_t v249 = v169 - 8;
            while (v248)
            {
              unint64_t v250 = *(void *)(v249 + v248);
              unint64_t v251 = *(void *)(v247 + v248);
              v248 -= 8;
              if (v250 != v251)
              {
                if (v250 <= v251) {
                  goto LABEL_132;
                }
                break;
              }
            }
          }
          else if (v170)
          {
            goto LABEL_132;
          }
        }
        else if (v21 > v28)
        {
          goto LABEL_132;
        }
LABEL_164:
        unint64_t v11 = v9 + 40;
        unint64_t v173 = v9;
        while (v11 < a2)
        {
          unint64_t v174 = v173;
          unint64_t v173 = v11;
          unsigned int v175 = *(_DWORD *)(v174 + 72);
          if (v21 == v175)
          {
            uint64_t v176 = *(void *)(v174 + 48);
            int v177 = (void *)(v176 + 24);
            uint64_t v178 = *(unsigned int *)(v24 + 32);
            if (v178 > 0x40)
            {
              uint64_t v179 = *(void *)(v24 + 24);
              uint64_t v180 = *(void *)(v179 + 8 * ((v178 - 1) >> 6)) & (1 << (v178 - 1));
              double result = v180 != 0;
              unsigned int v181 = *(_DWORD *)(v176 + 32);
              unsigned int v182 = v181 - 1;
              uint64_t v183 = *(void *)(v176 + 24);
              if (v181 >= 0x41) {
                int v177 = (void *)(v183 + 8 * (v182 >> 6));
              }
              if (result == ((*v177 >> v182) & 1))
              {
                unint64_t v184 = v178 + 63;
                uint64_t v185 = v183 - 8;
                uint64_t v186 = (v184 >> 3) & 0x3FFFFFF8;
                uint64_t v187 = v179 - 8;
                while (v186)
                {
                  unint64_t v188 = *(void *)(v187 + v186);
                  unint64_t v189 = *(void *)(v185 + v186);
                  v186 -= 8;
                  if (v188 != v189)
                  {
                    if (v188 > v189) {
                      break;
                    }
                    goto LABEL_181;
                  }
                }
              }
              else if (v180)
              {
                goto LABEL_181;
              }
            }
            else if ((uint64_t)(*(void *)(v24 + 24) << -(char)v178) >> -(char)v178 < (uint64_t)(*v177 << -(char)v178) >> -(char)v178)
            {
              goto LABEL_181;
            }
          }
          else if (v21 > v175)
          {
            goto LABEL_181;
          }
          v11 += 40;
        }
        goto LABEL_181;
      }
    }
    uint64_t v32 = *(void *)v9;
    uint64_t v33 = *(void *)(v9 + 8);
    long long v503 = *(_OWORD *)(v9 + 16);
    int v34 = (void *)(v33 + 24);
    unint64_t v35 = v9;
    while (1)
    {
      while (1)
      {
LABEL_22:
        while (1)
        {
          unint64_t v36 = v35;
          v35 += 40;
          unsigned int v37 = *(_DWORD *)(v36 + 72);
          if (v37 == v21) {
            break;
          }
          if (v37 <= v21) {
            goto LABEL_38;
          }
        }
        uint64_t v38 = *(void *)(v36 + 48);
        uint64_t v39 = *(unsigned int *)(v38 + 32);
        if (v39 > 0x40) {
          break;
        }
        if ((uint64_t)(*(void *)(v38 + 24) << -(char)v39) >> -(char)v39 >= (uint64_t)(*v34 << -(char)v39) >> -(char)v39) {
          goto LABEL_38;
        }
      }
      uint64_t v40 = *(void *)(v38 + 24);
      uint64_t v41 = *(void *)(v40 + 8 * ((v39 - 1) >> 6)) & (1 << (v39 - 1));
      unsigned int v42 = *(_DWORD *)(v33 + 32);
      unsigned int v43 = v42 - 1;
      uint64_t v44 = *(void *)(v33 + 24);
      uint64_t v45 = (void *)(v42 >= 0x41 ? v44 + 8 * (v43 >> 6) : v33 + 24);
      if ((v41 != 0) == ((*v45 >> v43) & 1)) {
        break;
      }
      if (!v41) {
        goto LABEL_38;
      }
    }
    unint64_t v46 = v39 + 63;
    uint64_t v47 = v44 - 8;
    uint64_t v48 = (v46 >> 3) & 0x3FFFFFF8;
    uint64_t v49 = v40 - 8;
    while (v48)
    {
      unint64_t v50 = *(void *)(v49 + v48);
      unint64_t v51 = *(void *)(v47 + v48);
      v48 -= 8;
      if (v50 != v51)
      {
        if (v50 <= v51) {
          goto LABEL_22;
        }
        break;
      }
    }
LABEL_38:
    unint64_t v52 = a2;
    if (v36 == v9)
    {
      unint64_t v53 = a2;
      if (v35 < a2)
      {
        unint64_t v72 = a2;
        do
        {
          while (1)
          {
            unint64_t v53 = v72 - 40;
            unsigned int v73 = *(_DWORD *)(v72 - 8);
            if (v73 == v21) {
              break;
            }
            BOOL v81 = v73 > v21 || v35 >= v53;
            v72 -= 40;
            if (v81) {
              goto LABEL_87;
            }
          }
          uint64_t v74 = *(void *)(v72 - 32);
          uint64_t v75 = *(unsigned int *)(v74 + 32);
          if (v75 > 0x40)
          {
            uint64_t v82 = *(void *)(v74 + 24);
            uint64_t v83 = *(void *)(v82 + 8 * ((v75 - 1) >> 6)) & (1 << (v75 - 1));
            unsigned int v84 = *(_DWORD *)(v33 + 32);
            unsigned int v85 = v84 - 1;
            uint64_t v86 = *(void *)(v33 + 24);
            if (v84 >= 0x41) {
              int v87 = (void *)(v86 + 8 * (v85 >> 6));
            }
            else {
              int v87 = (void *)(v33 + 24);
            }
            if ((v83 != 0) == ((*v87 >> v85) & 1))
            {
              unint64_t v88 = v75 + 63;
              uint64_t v89 = v86 - 8;
              uint64_t v90 = (v88 >> 3) & 0x3FFFFFF8;
              uint64_t v91 = v82 - 8;
              do
              {
                if (!v90)
                {
                  int v80 = 0;
                  goto LABEL_64;
                }
                unint64_t v92 = *(void *)(v91 + v90);
                unint64_t v93 = *(void *)(v89 + v90);
                v90 -= 8;
              }
              while (v92 == v93);
              if (v92 > v93) {
                int v80 = 1;
              }
              else {
                int v80 = -1;
              }
            }
            else if (v83)
            {
              int v80 = -1;
            }
            else
            {
              int v80 = 1;
            }
          }
          else
          {
            uint64_t v76 = -v75;
            uint64_t v77 = (uint64_t)(*(void *)(v74 + 24) << v76) >> v76;
            uint64_t v78 = (uint64_t)(*v34 << v76) >> v76;
            BOOL v79 = v77 < v78;
            int v80 = v77 > v78;
            if (v79) {
              int v80 = -1;
            }
          }
LABEL_64:
          if (v80 < 0) {
            break;
          }
          unint64_t v72 = v53;
        }
        while (v35 < v53);
      }
    }
    else
    {
      do
      {
        while (1)
        {
          while (1)
          {
LABEL_39:
            while (1)
            {
              unint64_t v53 = v52 - 40;
              unsigned int v54 = *(_DWORD *)(v52 - 8);
              if (v54 == v21) {
                break;
              }
              v52 -= 40;
              if (v54 > v21) {
                goto LABEL_87;
              }
            }
            uint64_t v55 = *(void *)(v52 - 32);
            uint64_t v56 = *(unsigned int *)(v55 + 32);
            if (v56 > 0x40) {
              break;
            }
            uint64_t v57 = -v56;
            uint64_t v58 = (uint64_t)(*(void *)(v55 + 24) << v57) >> v57;
            uint64_t v59 = (uint64_t)(*v34 << v57) >> v57;
            unint64_t v52 = v53;
            if (v58 < v59) {
              goto LABEL_87;
            }
          }
          uint64_t v60 = *(void *)(v55 + 24);
          uint64_t v61 = *(void *)(v60 + 8 * ((v56 - 1) >> 6)) & (1 << (v56 - 1));
          unsigned int v62 = *(_DWORD *)(v33 + 32);
          unsigned int v63 = v62 - 1;
          uint64_t v64 = *(void *)(v33 + 24);
          int v65 = (void *)(v62 >= 0x41 ? v64 + 8 * (v63 >> 6) : v33 + 24);
          if ((v61 != 0) != ((*v65 >> v63) & 1)) {
            break;
          }
          unint64_t v66 = v56 + 63;
          uint64_t v67 = v64 - 8;
          uint64_t v68 = (v66 >> 3) & 0x3FFFFFF8;
          uint64_t v69 = v60 - 8;
          do
          {
            if (!v68)
            {
              unint64_t v52 = v53;
              goto LABEL_39;
            }
            unint64_t v70 = *(void *)(v69 + v68);
            unint64_t v71 = *(void *)(v67 + v68);
            v68 -= 8;
          }
          while (v70 == v71);
          unint64_t v52 = v53;
          if (v70 <= v71) {
            goto LABEL_87;
          }
        }
        unint64_t v52 = v53;
      }
      while (!v61);
    }
LABEL_87:
    unint64_t v11 = v35;
    if (v35 < v53)
    {
      unint64_t v94 = v53;
      do
      {
        unint64_t v95 = v94;
        long long v96 = *(_OWORD *)v11;
        long long v513 = *(_OWORD *)(v11 + 16);
        int v97 = *(void *)(v11 + 32);
        long long v99 = *(_OWORD *)v95;
        long long v98 = *(_OWORD *)(v95 + 16);
        *(_DWORD *)(v11 + 32) = *(_DWORD *)(v95 + 32);
        *(_OWORD *)unint64_t v11 = v99;
        *(_OWORD *)(v11 + 16) = v98;
        *(_DWORD *)(v95 + 32) = v97;
        *(_OWORD *)unint64_t v95 = v96;
        *(_OWORD *)(v95 + 16) = v513;
        unint64_t v100 = v11;
        do
        {
          while (1)
          {
            while (1)
            {
              while (1)
              {
                unint64_t v11 = v100 + 40;
                unsigned int v101 = *(_DWORD *)(v100 + 72);
                if (v101 == v21) {
                  break;
                }
                v100 += 40;
                if (v101 <= v21) {
                  goto LABEL_121;
                }
              }
              uint64_t v102 = *(void *)(v100 + 48);
              uint64_t v103 = *(unsigned int *)(v102 + 32);
              if (v103 > 0x40) {
                break;
              }
              uint64_t v104 = -v103;
              uint64_t v105 = (uint64_t)(*(void *)(v102 + 24) << v104) >> v104;
              uint64_t v106 = (uint64_t)(*v34 << v104) >> v104;
              unint64_t v100 = v11;
              if (v105 >= v106) {
                goto LABEL_121;
              }
            }
            uint64_t v107 = *(void *)(v102 + 24);
            uint64_t v108 = *(void *)(v107 + 8 * ((v103 - 1) >> 6)) & (1 << (v103 - 1));
            unsigned int v109 = *(_DWORD *)(v33 + 32);
            unsigned int v110 = v109 - 1;
            uint64_t v111 = *(void *)(v33 + 24);
            unsigned int v112 = (void *)(v109 >= 0x41 ? v111 + 8 * (v110 >> 6) : v33 + 24);
            if ((v108 != 0) == ((*v112 >> v110) & 1)) {
              break;
            }
            unint64_t v100 = v11;
            if (!v108) {
              goto LABEL_121;
            }
          }
          unint64_t v113 = v103 + 63;
          uint64_t v114 = v111 - 8;
          uint64_t v115 = (v113 >> 3) & 0x3FFFFFF8;
          uint64_t v116 = v107 - 8;
          do
          {
            if (!v115) {
              goto LABEL_121;
            }
            unint64_t v117 = *(void *)(v116 + v115);
            unint64_t v118 = *(void *)(v114 + v115);
            v115 -= 8;
          }
          while (v117 == v118);
          unint64_t v100 = v11;
        }
        while (v117 <= v118);
        do
        {
          while (1)
          {
LABEL_121:
            while (1)
            {
              unint64_t v94 = v95 - 40;
              unsigned int v131 = *(_DWORD *)(v95 - 8);
              if (v131 == v21) {
                break;
              }
              v95 -= 40;
              if (v131 > v21) {
                goto LABEL_124;
              }
            }
            uint64_t v132 = *(void *)(v95 - 32);
            uint64_t v133 = *(unsigned int *)(v132 + 32);
            if (v133 <= 0x40) {
              break;
            }
            uint64_t v119 = *(void *)(v132 + 24);
            uint64_t v120 = *(void *)(v119 + 8 * ((v133 - 1) >> 6)) & (1 << (v133 - 1));
            unsigned int v121 = *(_DWORD *)(v33 + 32);
            unsigned int v122 = v121 - 1;
            uint64_t v123 = *(void *)(v33 + 24);
            if (v121 >= 0x41) {
              uint64_t v124 = (void *)(v123 + 8 * (v122 >> 6));
            }
            else {
              uint64_t v124 = (void *)(v33 + 24);
            }
            if ((v120 != 0) == ((*v124 >> v122) & 1))
            {
              unint64_t v125 = v133 + 63;
              uint64_t v126 = v123 - 8;
              uint64_t v127 = (v125 >> 3) & 0x3FFFFFF8;
              uint64_t v128 = v119 - 8;
              do
              {
                if (!v127)
                {
                  unint64_t v95 = v94;
                  goto LABEL_121;
                }
                unint64_t v129 = *(void *)(v128 + v127);
                unint64_t v130 = *(void *)(v126 + v127);
                v127 -= 8;
              }
              while (v129 == v130);
              unint64_t v95 = v94;
              if (v129 <= v130) {
                goto LABEL_124;
              }
            }
            else
            {
              unint64_t v95 = v94;
              if (v120) {
                goto LABEL_124;
              }
            }
          }
          uint64_t v134 = -v133;
          uint64_t v135 = (uint64_t)(*(void *)(v132 + 24) << v134) >> v134;
          uint64_t v136 = (uint64_t)(*v34 << v134) >> v134;
          unint64_t v95 = v94;
        }
        while (v135 >= v136);
LABEL_124:
        ;
      }
      while (v11 < v94);
    }
    if (v11 - 40 != v9)
    {
      long long v137 = *(_OWORD *)(v11 - 40);
      long long v138 = *(_OWORD *)(v11 - 24);
      *(_DWORD *)(v9 + 32) = *(_DWORD *)(v11 - 8);
      *(_OWORD *)unint64_t v9 = v137;
      *(_OWORD *)(v9 + 16) = v138;
    }
    *(void *)(v11 - 40) = v32;
    *(void *)(v11 - 32) = v33;
    *(_OWORD *)(v11 - 24) = v503;
    *(_DWORD *)(v11 - 8) = v21;
    if (v35 >= v53)
    {
      BOOL v139 = sub_1CC706604(v9, v11 - 40);
      double result = sub_1CC706604(v11, a2);
      if (result)
      {
        a2 = v11 - 40;
        if (v139) {
          return result;
        }
        goto LABEL_2;
      }
      if (v139) {
        continue;
      }
    }
    double result = sub_1CC703FD0(v9, v11 - 40, a3, a4 & 1);
    a4 = 0;
  }
  switch(v13)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v252 = *(_DWORD *)(v11 + 32);
      unsigned int v253 = *(_DWORD *)(a2 - 8);
      if (v253 != v252)
      {
        if (v253 <= v252) {
          return result;
        }
        goto LABEL_455;
      }
      uint64_t v254 = *(void *)(a2 - 32);
      uint64_t v255 = *(void *)(v11 + 8);
      unint64_t v256 = (void *)(v255 + 24);
      uint64_t v257 = *(unsigned int *)(v254 + 32);
      if (v257 <= 0x40)
      {
        if ((uint64_t)(*(void *)(v254 + 24) << -(char)v257) >> -(char)v257 >= (uint64_t)(*v256 << -(char)v257) >> -(char)v257) {
          return result;
        }
        goto LABEL_455;
      }
      uint64_t v491 = *(void *)(v254 + 24);
      uint64_t v492 = *(void *)(v491 + 8 * ((v257 - 1) >> 6)) & (1 << (v257 - 1));
      unsigned int v493 = *(_DWORD *)(v255 + 32);
      unsigned int v494 = v493 - 1;
      uint64_t v495 = *(void *)(v255 + 24);
      if (v493 >= 0x41) {
        unint64_t v256 = (void *)(v495 + 8 * (v494 >> 6));
      }
      if ((v492 != 0) == ((*v256 >> v494) & 1))
      {
        unint64_t v496 = v257 + 63;
        uint64_t v497 = v495 - 8;
        uint64_t v498 = (v496 >> 3) & 0x3FFFFFF8;
        uint64_t v499 = v491 - 8;
        do
        {
          if (!v498) {
            return result;
          }
          unint64_t v500 = *(void *)(v499 + v498);
          unint64_t v501 = *(void *)(v497 + v498);
          v498 -= 8;
        }
        while (v500 == v501);
        if (v500 <= v501)
        {
LABEL_455:
          uint64_t v520 = *(void *)(v11 + 32);
          long long v510 = *(_OWORD *)v11;
          long long v516 = *(_OWORD *)(v11 + 16);
          long long v455 = *v10;
          long long v456 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v11 + 32) = *(_DWORD *)(a2 - 8);
          *(_OWORD *)unint64_t v11 = v455;
          *(_OWORD *)(v11 + 16) = v456;
          *(_DWORD *)(a2 - 8) = v520;
          *long long v10 = v510;
          *(_OWORD *)(a2 - 24) = v516;
          return result;
        }
      }
      else if (v492)
      {
        goto LABEL_455;
      }
      break;
    case 3:
      return (unint64_t)sub_1CC706108((long long *)v11, (long long *)(v11 + 40), (long long *)(a2 - 40));
    case 4:
      return (unint64_t)sub_1CC706A54(v11, v11 + 40, v11 + 80, a2 - 40);
    case 5:
      return (unint64_t)sub_1CC705CBC(v11, v11 + 40, v11 + 80, v11 + 120, a2 - 40);
    default:
      JUMPOUT(0);
  }
  return result;
}

long long *sub_1CC705CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result = sub_1CC706A54(a1, a2, a3, a4);
  unsigned int v11 = *(_DWORD *)(a4 + 32);
  unsigned int v12 = *(_DWORD *)(a5 + 32);
  if (v12 == v11)
  {
    uint64_t v13 = *(void *)(a5 + 8);
    uint64_t v14 = *(void *)(a4 + 8);
    unint64_t v15 = (void *)(v14 + 24);
    uint64_t v16 = *(unsigned int *)(v13 + 32);
    if (v16 > 0x40)
    {
      uint64_t v55 = *(void *)(v13 + 24);
      uint64_t v56 = *(void *)(v55 + 8 * ((v16 - 1) >> 6)) & (1 << (v16 - 1));
      unsigned int v57 = *(_DWORD *)(v14 + 32);
      unsigned int v58 = v57 - 1;
      uint64_t v59 = *(void *)(v14 + 24);
      if (v57 >= 0x41) {
        unint64_t v15 = (void *)(v59 + 8 * (v58 >> 6));
      }
      if ((v56 != 0) == ((*v15 >> v58) & 1))
      {
        unint64_t v70 = v16 + 63;
        uint64_t v71 = v59 - 8;
        uint64_t v72 = (v70 >> 3) & 0x3FFFFFF8;
        uint64_t v73 = v55 - 8;
        while (v72)
        {
          unint64_t v74 = *(void *)(v73 + v72);
          unint64_t v75 = *(void *)(v71 + v72);
          v72 -= 8;
          if (v74 != v75)
          {
            if (v74 <= v75) {
              goto LABEL_6;
            }
            return result;
          }
        }
        return result;
      }
      if (!v56) {
        return result;
      }
    }
    else if ((uint64_t)(*(void *)(v13 + 24) << -(char)v16) >> -(char)v16 >= (uint64_t)(*v15 << -(char)v16) >> -(char)v16)
    {
      return result;
    }
  }
  else if (v12 <= v11)
  {
    return result;
  }
LABEL_6:
  uint64_t v17 = *(void *)(a4 + 32);
  long long v18 = *(_OWORD *)a4;
  long long v19 = *(_OWORD *)(a4 + 16);
  int v20 = *(_DWORD *)(a5 + 32);
  long long v21 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_OWORD *)(a4 + 16) = v21;
  *(_DWORD *)(a4 + 32) = v20;
  *(_OWORD *)a5 = v18;
  *(_OWORD *)(a5 + 16) = v19;
  *(_DWORD *)(a5 + 32) = v17;
  unsigned int v22 = *(_DWORD *)(a3 + 32);
  unsigned int v23 = *(_DWORD *)(a4 + 32);
  if (v23 == v22)
  {
    uint64_t v24 = *(void *)(a4 + 8);
    uint64_t v25 = *(void *)(a3 + 8);
    uint64_t v26 = (void *)(v25 + 24);
    uint64_t v27 = *(unsigned int *)(v24 + 32);
    if (v27 > 0x40)
    {
      uint64_t v60 = *(void *)(v24 + 24);
      uint64_t v61 = *(void *)(v60 + 8 * ((v27 - 1) >> 6)) & (1 << (v27 - 1));
      unsigned int v62 = *(_DWORD *)(v25 + 32);
      unsigned int v63 = v62 - 1;
      uint64_t v64 = *(void *)(v25 + 24);
      if (v62 >= 0x41) {
        uint64_t v26 = (void *)(v64 + 8 * (v63 >> 6));
      }
      if ((v61 != 0) == ((*v26 >> v63) & 1))
      {
        unint64_t v81 = v27 + 63;
        uint64_t v82 = v64 - 8;
        uint64_t v83 = (v81 >> 3) & 0x3FFFFFF8;
        uint64_t v84 = v60 - 8;
        while (v83)
        {
          unint64_t v85 = *(void *)(v84 + v83);
          unint64_t v86 = *(void *)(v82 + v83);
          v83 -= 8;
          if (v85 != v86)
          {
            if (v85 <= v86) {
              goto LABEL_11;
            }
            return result;
          }
        }
        return result;
      }
      if (!v61) {
        return result;
      }
    }
    else if ((uint64_t)(*(void *)(v24 + 24) << -(char)v27) >> -(char)v27 >= (uint64_t)(*v26 << -(char)v27) >> -(char)v27)
    {
      return result;
    }
  }
  else if (v23 <= v22)
  {
    return result;
  }
LABEL_11:
  uint64_t v28 = *(void *)(a3 + 32);
  long long v29 = *(_OWORD *)a3;
  long long v30 = *(_OWORD *)(a3 + 16);
  int v31 = *(_DWORD *)(a4 + 32);
  long long v32 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)(a3 + 16) = v32;
  *(_DWORD *)(a3 + 32) = v31;
  *(_OWORD *)a4 = v29;
  *(_OWORD *)(a4 + 16) = v30;
  *(_DWORD *)(a4 + 32) = v28;
  unsigned int v33 = *(_DWORD *)(a2 + 32);
  unsigned int v34 = *(_DWORD *)(a3 + 32);
  if (v34 == v33)
  {
    uint64_t v35 = *(void *)(a3 + 8);
    uint64_t v36 = *(void *)(a2 + 8);
    unsigned int v37 = (void *)(v36 + 24);
    uint64_t v38 = *(unsigned int *)(v35 + 32);
    if (v38 > 0x40)
    {
      uint64_t v65 = *(void *)(v35 + 24);
      uint64_t v66 = *(void *)(v65 + 8 * ((v38 - 1) >> 6)) & (1 << (v38 - 1));
      unsigned int v67 = *(_DWORD *)(v36 + 32);
      unsigned int v68 = v67 - 1;
      uint64_t v69 = *(void *)(v36 + 24);
      if (v67 >= 0x41) {
        unsigned int v37 = (void *)(v69 + 8 * (v68 >> 6));
      }
      if ((v66 != 0) == ((*v37 >> v68) & 1))
      {
        unint64_t v87 = v38 + 63;
        uint64_t v88 = v69 - 8;
        uint64_t v89 = (v87 >> 3) & 0x3FFFFFF8;
        uint64_t v90 = v65 - 8;
        while (v89)
        {
          unint64_t v91 = *(void *)(v90 + v89);
          unint64_t v92 = *(void *)(v88 + v89);
          v89 -= 8;
          if (v91 != v92)
          {
            if (v91 <= v92) {
              goto LABEL_16;
            }
            return result;
          }
        }
        return result;
      }
      if (!v66) {
        return result;
      }
    }
    else if ((uint64_t)(*(void *)(v35 + 24) << -(char)v38) >> -(char)v38 >= (uint64_t)(*v37 << -(char)v38) >> -(char)v38)
    {
      return result;
    }
  }
  else if (v34 <= v33)
  {
    return result;
  }
LABEL_16:
  uint64_t v39 = *(void *)(a2 + 32);
  long long v40 = *(_OWORD *)a2;
  long long v41 = *(_OWORD *)(a2 + 16);
  int v42 = *(_DWORD *)(a3 + 32);
  long long v43 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v43;
  *(_DWORD *)(a2 + 32) = v42;
  *(_OWORD *)a3 = v40;
  *(_OWORD *)(a3 + 16) = v41;
  *(_DWORD *)(a3 + 32) = v39;
  unsigned int v44 = *(_DWORD *)(a1 + 32);
  unsigned int v45 = *(_DWORD *)(a2 + 32);
  if (v45 != v44)
  {
    if (v45 <= v44) {
      return result;
    }
    goto LABEL_21;
  }
  uint64_t v46 = *(void *)(a2 + 8);
  uint64_t v47 = *(void *)(a1 + 8);
  uint64_t v48 = (void *)(v47 + 24);
  uint64_t v49 = *(unsigned int *)(v46 + 32);
  if (v49 <= 0x40)
  {
    if ((uint64_t)(*(void *)(v46 + 24) << -(char)v49) >> -(char)v49 >= (uint64_t)(*v48 << -(char)v49) >> -(char)v49) {
      return result;
    }
    goto LABEL_21;
  }
  uint64_t v76 = *(void *)(v46 + 24);
  uint64_t v77 = *(void *)(v76 + 8 * ((v49 - 1) >> 6)) & (1 << (v49 - 1));
  unsigned int v78 = *(_DWORD *)(v47 + 32);
  unsigned int v79 = v78 - 1;
  uint64_t v80 = *(void *)(v47 + 24);
  if (v78 >= 0x41) {
    uint64_t v48 = (void *)(v80 + 8 * (v79 >> 6));
  }
  if ((v77 != 0) == ((*v48 >> v79) & 1))
  {
    unint64_t v93 = v49 + 63;
    uint64_t v94 = v80 - 8;
    uint64_t v95 = (v93 >> 3) & 0x3FFFFFF8;
    uint64_t v96 = v76 - 8;
    while (v95)
    {
      unint64_t v97 = *(void *)(v96 + v95);
      unint64_t v98 = *(void *)(v94 + v95);
      v95 -= 8;
      if (v97 != v98)
      {
        if (v97 <= v98) {
          goto LABEL_21;
        }
        return result;
      }
    }
  }
  else if (v77)
  {
LABEL_21:
    uint64_t v50 = *(void *)(a1 + 32);
    long long v51 = *(_OWORD *)a1;
    long long v52 = *(_OWORD *)(a1 + 16);
    int v53 = *(_DWORD *)(a2 + 32);
    long long v54 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v54;
    *(_DWORD *)(a1 + 32) = v53;
    *(_OWORD *)a2 = v51;
    *(_OWORD *)(a2 + 16) = v52;
    *(_DWORD *)(a2 + 32) = v50;
  }
  return result;
}

long long *sub_1CC706108(long long *result, long long *a2, long long *a3)
{
  unsigned int v3 = *((_DWORD *)result + 8);
  unsigned int v4 = *((_DWORD *)a2 + 8);
  if (v4 == v3)
  {
    uint64_t v5 = *((void *)a2 + 1);
    uint64_t v6 = *((void *)result + 1);
    int v7 = (void *)(v6 + 24);
    uint64_t v8 = *(unsigned int *)(v5 + 32);
    if (v8 <= 0x40)
    {
      if ((uint64_t)(*(void *)(v5 + 24) << -(char)v8) >> -(char)v8 >= (uint64_t)(*v7 << -(char)v8) >> -(char)v8) {
        goto LABEL_16;
      }
LABEL_6:
      unsigned int v9 = *((_DWORD *)a3 + 8);
      if (v9 == v4)
      {
        uint64_t v10 = *((void *)a3 + 1);
        uint64_t v11 = *((void *)a2 + 1);
        unsigned int v12 = (void *)(v11 + 24);
        uint64_t v13 = *(unsigned int *)(v10 + 32);
        if (v13 <= 0x40)
        {
          if ((uint64_t)(*(void *)(v10 + 24) << -(char)v13) >> -(char)v13 >= (uint64_t)(*v12 << -(char)v13) >> -(char)v13) {
            goto LABEL_31;
          }
LABEL_11:
          uint64_t v14 = *((void *)result + 4);
          long long v15 = *result;
          long long v16 = result[1];
          int v17 = *((_DWORD *)a3 + 8);
          long long v18 = a3[1];
          *double result = *a3;
          result[1] = v18;
          *((_DWORD *)result + 8) = v17;
          goto LABEL_37;
        }
        uint64_t v45 = *(void *)(v10 + 24);
        uint64_t v46 = *(void *)(v45 + 8 * ((v13 - 1) >> 6)) & (1 << (v13 - 1));
        unsigned int v47 = *(_DWORD *)(v11 + 32);
        unsigned int v48 = v47 - 1;
        uint64_t v49 = *(void *)(v11 + 24);
        if (v47 >= 0x41) {
          unsigned int v12 = (void *)(v49 + 8 * (v48 >> 6));
        }
        if ((v46 != 0) == ((*v12 >> v48) & 1))
        {
          unint64_t v83 = v13 + 63;
          uint64_t v84 = v49 - 8;
          uint64_t v85 = (v83 >> 3) & 0x3FFFFFF8;
          uint64_t v86 = v45 - 8;
          while (v85)
          {
            unint64_t v87 = *(void *)(v86 + v85);
            unint64_t v88 = *(void *)(v84 + v85);
            v85 -= 8;
            if (v87 != v88)
            {
              if (v87 <= v88) {
                goto LABEL_11;
              }
              goto LABEL_31;
            }
          }
          goto LABEL_31;
        }
        if (v46) {
          goto LABEL_11;
        }
      }
      else if (v9 > v4)
      {
        goto LABEL_11;
      }
LABEL_31:
      uint64_t v50 = *((void *)result + 4);
      long long v51 = *result;
      long long v52 = result[1];
      int v53 = *((_DWORD *)a2 + 8);
      long long v54 = a2[1];
      *double result = *a2;
      result[1] = v54;
      *((_DWORD *)result + 8) = v53;
      *a2 = v51;
      a2[1] = v52;
      *((_DWORD *)a2 + 8) = v50;
      unsigned int v55 = *((_DWORD *)a3 + 8);
      if (v55 == v50)
      {
        uint64_t v56 = *((void *)a3 + 1);
        uint64_t v57 = *((void *)a2 + 1);
        unsigned int v58 = (void *)(v57 + 24);
        uint64_t v59 = *(unsigned int *)(v56 + 32);
        if (v59 > 0x40)
        {
          uint64_t v78 = *(void *)(v56 + 24);
          uint64_t v79 = *(void *)(v78 + 8 * ((v59 - 1) >> 6)) & (1 << (v59 - 1));
          unsigned int v80 = *(_DWORD *)(v57 + 32);
          unsigned int v81 = v80 - 1;
          uint64_t v82 = *(void *)(v57 + 24);
          if (v80 >= 0x41) {
            unsigned int v58 = (void *)(v82 + 8 * (v81 >> 6));
          }
          if ((v79 != 0) == ((*v58 >> v81) & 1))
          {
            unint64_t v101 = v59 + 63;
            uint64_t v102 = v82 - 8;
            uint64_t v103 = (v101 >> 3) & 0x3FFFFFF8;
            uint64_t v104 = v78 - 8;
            while (v103)
            {
              unint64_t v105 = *(void *)(v104 + v103);
              unint64_t v106 = *(void *)(v102 + v103);
              v103 -= 8;
              if (v105 != v106)
              {
                if (v105 <= v106) {
                  goto LABEL_36;
                }
                return result;
              }
            }
            return result;
          }
          if (!v79) {
            return result;
          }
        }
        else if ((uint64_t)(*(void *)(v56 + 24) << -(char)v59) >> -(char)v59 >= (uint64_t)(*v58 << -(char)v59) >> -(char)v59)
        {
          return result;
        }
      }
      else if (v55 <= v50)
      {
        return result;
      }
LABEL_36:
      uint64_t v14 = *((void *)a2 + 4);
      long long v15 = *a2;
      long long v16 = a2[1];
      int v60 = *((_DWORD *)a3 + 8);
      long long v61 = a3[1];
      *a2 = *a3;
      a2[1] = v61;
      *((_DWORD *)a2 + 8) = v60;
LABEL_37:
      *a3 = v15;
      a3[1] = v16;
      *((_DWORD *)a3 + 8) = v14;
      return result;
    }
    uint64_t v19 = *(void *)(v5 + 24);
    uint64_t v20 = *(void *)(v19 + 8 * ((v8 - 1) >> 6)) & (1 << (v8 - 1));
    unsigned int v21 = *(_DWORD *)(v6 + 32);
    unsigned int v22 = v21 - 1;
    uint64_t v23 = *(void *)(v6 + 24);
    if (v21 >= 0x41) {
      int v7 = (void *)(v23 + 8 * (v22 >> 6));
    }
    if ((v20 != 0) == ((*v7 >> v22) & 1))
    {
      unint64_t v67 = v8 + 63;
      uint64_t v68 = v23 - 8;
      uint64_t v69 = (v67 >> 3) & 0x3FFFFFF8;
      uint64_t v70 = v19 - 8;
      while (v69)
      {
        unint64_t v71 = *(void *)(v70 + v69);
        unint64_t v72 = *(void *)(v68 + v69);
        v69 -= 8;
        if (v71 != v72)
        {
          if (v71 <= v72) {
            goto LABEL_6;
          }
          goto LABEL_16;
        }
      }
      goto LABEL_16;
    }
    if (v20) {
      goto LABEL_6;
    }
  }
  else if (v4 > v3)
  {
    goto LABEL_6;
  }
LABEL_16:
  unsigned int v24 = *((_DWORD *)a3 + 8);
  if (v24 == v4)
  {
    uint64_t v25 = *((void *)a3 + 1);
    uint64_t v26 = *((void *)a2 + 1);
    uint64_t v27 = (void *)(v26 + 24);
    uint64_t v28 = *(unsigned int *)(v25 + 32);
    if (v28 > 0x40)
    {
      uint64_t v62 = *(void *)(v25 + 24);
      uint64_t v63 = *(void *)(v62 + 8 * ((v28 - 1) >> 6)) & (1 << (v28 - 1));
      unsigned int v64 = *(_DWORD *)(v26 + 32);
      unsigned int v65 = v64 - 1;
      uint64_t v66 = *(void *)(v26 + 24);
      if (v64 >= 0x41) {
        uint64_t v27 = (void *)(v66 + 8 * (v65 >> 6));
      }
      if ((v63 != 0) == ((*v27 >> v65) & 1))
      {
        unint64_t v89 = v28 + 63;
        uint64_t v90 = v66 - 8;
        uint64_t v91 = (v89 >> 3) & 0x3FFFFFF8;
        uint64_t v92 = v62 - 8;
        while (v91)
        {
          unint64_t v93 = *(void *)(v92 + v91);
          unint64_t v94 = *(void *)(v90 + v91);
          v91 -= 8;
          if (v93 != v94)
          {
            if (v93 <= v94) {
              goto LABEL_21;
            }
            return result;
          }
        }
        return result;
      }
      if (!v63) {
        return result;
      }
    }
    else if ((uint64_t)(*(void *)(v25 + 24) << -(char)v28) >> -(char)v28 >= (uint64_t)(*v27 << -(char)v28) >> -(char)v28)
    {
      return result;
    }
  }
  else if (v24 <= v4)
  {
    return result;
  }
LABEL_21:
  uint64_t v29 = *((void *)a2 + 4);
  long long v30 = *a2;
  long long v31 = a2[1];
  int v32 = *((_DWORD *)a3 + 8);
  long long v33 = a3[1];
  *a2 = *a3;
  a2[1] = v33;
  *((_DWORD *)a2 + 8) = v32;
  *a3 = v30;
  a3[1] = v31;
  *((_DWORD *)a3 + 8) = v29;
  unsigned int v34 = *((_DWORD *)result + 8);
  unsigned int v35 = *((_DWORD *)a2 + 8);
  if (v35 != v34)
  {
    if (v35 <= v34) {
      return result;
    }
    goto LABEL_26;
  }
  uint64_t v36 = *((void *)a2 + 1);
  uint64_t v37 = *((void *)result + 1);
  uint64_t v38 = (void *)(v37 + 24);
  uint64_t v39 = *(unsigned int *)(v36 + 32);
  if (v39 <= 0x40)
  {
    if ((uint64_t)(*(void *)(v36 + 24) << -(char)v39) >> -(char)v39 >= (uint64_t)(*v38 << -(char)v39) >> -(char)v39) {
      return result;
    }
LABEL_26:
    uint64_t v40 = *((void *)result + 4);
    long long v41 = *result;
    long long v42 = result[1];
    int v43 = *((_DWORD *)a2 + 8);
    long long v44 = a2[1];
    *double result = *a2;
    result[1] = v44;
    *((_DWORD *)result + 8) = v43;
    *a2 = v41;
    a2[1] = v42;
    *((_DWORD *)a2 + 8) = v40;
    return result;
  }
  uint64_t v73 = *(void *)(v36 + 24);
  uint64_t v74 = *(void *)(v73 + 8 * ((v39 - 1) >> 6)) & (1 << (v39 - 1));
  unsigned int v75 = *(_DWORD *)(v37 + 32);
  unsigned int v76 = v75 - 1;
  uint64_t v77 = *(void *)(v37 + 24);
  if (v75 >= 0x41) {
    uint64_t v38 = (void *)(v77 + 8 * (v76 >> 6));
  }
  if ((v74 != 0) == ((*v38 >> v76) & 1))
  {
    unint64_t v95 = v39 + 63;
    uint64_t v96 = v77 - 8;
    uint64_t v97 = (v95 >> 3) & 0x3FFFFFF8;
    uint64_t v98 = v73 - 8;
    while (v97)
    {
      unint64_t v99 = *(void *)(v98 + v97);
      unint64_t v100 = *(void *)(v96 + v97);
      v97 -= 8;
      if (v99 != v100)
      {
        if (v99 <= v100) {
          goto LABEL_26;
        }
        return result;
      }
    }
  }
  else if (v74)
  {
    goto LABEL_26;
  }
  return result;
}

BOOL sub_1CC706604(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unsigned int v6 = *(_DWORD *)(a1 + 32);
      unsigned int v7 = *(_DWORD *)(a2 - 8);
      if (v7 == v6)
      {
        uint64_t v8 = *(void *)(a2 - 32);
        uint64_t v9 = *(void *)(a1 + 8);
        uint64_t v10 = (void *)(v9 + 24);
        uint64_t v11 = *(unsigned int *)(v8 + 32);
        if (v11 > 0x40)
        {
          uint64_t v57 = *(void *)(v8 + 24);
          uint64_t v58 = *(void *)(v57 + 8 * ((v11 - 1) >> 6)) & (1 << (v11 - 1));
          unsigned int v59 = *(_DWORD *)(v9 + 32);
          unsigned int v60 = v59 - 1;
          uint64_t v61 = *(void *)(v9 + 24);
          if (v59 >= 0x41) {
            uint64_t v10 = (void *)(v61 + 8 * (v60 >> 6));
          }
          if ((v58 != 0) == ((*v10 >> v60) & 1))
          {
            unint64_t v62 = v11 + 63;
            uint64_t v63 = v61 - 8;
            uint64_t v64 = (v62 >> 3) & 0x3FFFFFF8;
            uint64_t v65 = v57 - 8;
            do
            {
              if (!v64) {
                return 1;
              }
              unint64_t v66 = *(void *)(v65 + v64);
              unint64_t v67 = *(void *)(v63 + v64);
              v64 -= 8;
            }
            while (v66 == v67);
            if (v66 > v67) {
              return 1;
            }
          }
          else if (!v58)
          {
            return result;
          }
        }
        else if ((uint64_t)(*(void *)(v8 + 24) << -(char)v11) >> -(char)v11 >= (uint64_t)(*v10 << -(char)v11) >> -(char)v11)
        {
          return result;
        }
      }
      else if (v7 <= v6)
      {
        return result;
      }
      uint64_t v51 = a2 - 40;
      uint64_t v52 = *(void *)(a1 + 32);
      long long v53 = *(_OWORD *)a1;
      long long v54 = *(_OWORD *)(a1 + 16);
      int v55 = *(_DWORD *)(a2 - 8);
      long long v56 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 16) = v56;
      *(_DWORD *)(a1 + 32) = v55;
      *(_OWORD *)uint64_t v51 = v53;
      *(_OWORD *)(v51 + 16) = v54;
      *(_DWORD *)(v51 + 32) = v52;
      return 1;
    case 3uLL:
      sub_1CC706108((long long *)a1, (long long *)(a1 + 40), (long long *)(a2 - 40));
      return 1;
    case 4uLL:
      sub_1CC706A54(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      sub_1CC705CBC(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v12 = a1 + 80;
      sub_1CC706108((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80));
      uint64_t v13 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      int v14 = 0;
      break;
  }
  while (1)
  {
    unsigned int v15 = *(_DWORD *)(v12 + 32);
    unsigned int v16 = *(_DWORD *)(v13 + 32);
    if (v16 != v15)
    {
      if (v16 <= v15) {
        goto LABEL_33;
      }
      uint64_t v17 = *(void *)(v13 + 8);
      goto LABEL_14;
    }
    uint64_t v17 = *(void *)(v13 + 8);
    uint64_t v18 = *(void *)(v12 + 8);
    uint64_t v19 = (void *)(v18 + 24);
    uint64_t v20 = *(unsigned int *)(v17 + 32);
    if (v20 <= 0x40) {
      break;
    }
    uint64_t v40 = *(void *)(v17 + 24);
    uint64_t v41 = *(void *)(v40 + 8 * ((v20 - 1) >> 6)) & (1 << (v20 - 1));
    unsigned int v42 = *(_DWORD *)(v18 + 32);
    unsigned int v43 = v42 - 1;
    uint64_t v44 = *(void *)(v18 + 24);
    if (v42 >= 0x41) {
      uint64_t v19 = (void *)(v44 + 8 * (v43 >> 6));
    }
    if ((v41 != 0) != ((*v19 >> v43) & 1))
    {
      if (!v41) {
        goto LABEL_33;
      }
      goto LABEL_14;
    }
    unint64_t v45 = v20 + 63;
    uint64_t v46 = v44 - 8;
    uint64_t v47 = (v45 >> 3) & 0x3FFFFFF8;
    uint64_t v48 = v40 - 8;
    do
    {
      if (!v47) {
        goto LABEL_33;
      }
      unint64_t v49 = *(void *)(v48 + v47);
      unint64_t v50 = *(void *)(v46 + v47);
      v47 -= 8;
    }
    while (v49 == v50);
    if (v49 <= v50) {
      goto LABEL_14;
    }
LABEL_33:
    uint64_t v12 = v13;
    v13 += 40;
    if (v13 == a2) {
      return 1;
    }
  }
  if ((uint64_t)(*(void *)(v17 + 24) << -(char)v20) >> -(char)v20 >= (uint64_t)(*v19 << -(char)v20) >> -(char)v20) {
    goto LABEL_33;
  }
LABEL_14:
  uint64_t v21 = *(void *)v13;
  long long v68 = *(_OWORD *)(v13 + 16);
  *(_DWORD *)(v13 + 32) = *(_DWORD *)(v12 + 32);
  long long v22 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v12;
  *(_OWORD *)(v13 + 16) = v22;
  uint64_t v23 = a1;
  if (v12 == a1) {
    goto LABEL_32;
  }
  while (1)
  {
    unsigned int v24 = *(_DWORD *)(v12 - 8);
    if (v16 != v24)
    {
      if (v16 <= v24) {
        goto LABEL_31;
      }
      goto LABEL_20;
    }
    uint64_t v25 = *(void *)(v12 - 32);
    uint64_t v26 = (void *)(v25 + 24);
    uint64_t v27 = *(unsigned int *)(v17 + 32);
    if (v27 <= 0x40)
    {
      if ((uint64_t)(*(void *)(v17 + 24) << -(char)v27) >> -(char)v27 >= (uint64_t)(*v26 << -(char)v27) >> -(char)v27) {
        goto LABEL_31;
      }
      goto LABEL_20;
    }
    uint64_t v29 = *(void *)(v17 + 24);
    uint64_t v30 = *(void *)(v29 + 8 * ((v27 - 1) >> 6)) & (1 << (v27 - 1));
    unsigned int v31 = *(_DWORD *)(v25 + 32);
    unsigned int v32 = v31 - 1;
    uint64_t v33 = *(void *)(v25 + 24);
    if (v31 >= 0x41) {
      uint64_t v26 = (void *)(v33 + 8 * (v32 >> 6));
    }
    if ((v30 != 0) == ((*v26 >> v32) & 1)) {
      break;
    }
    if (!v30) {
      goto LABEL_31;
    }
LABEL_20:
    long long v28 = *(_OWORD *)(v12 - 24);
    *(_OWORD *)uint64_t v12 = *(_OWORD *)(v12 - 40);
    *(_OWORD *)(v12 + 16) = v28;
    *(_DWORD *)(v12 + 32) = *(_DWORD *)(v12 - 8);
    v12 -= 40;
    if (v12 == a1)
    {
      uint64_t v23 = a1;
      goto LABEL_32;
    }
  }
  unint64_t v34 = v27 + 63;
  uint64_t v35 = v33 - 8;
  uint64_t v36 = (v34 >> 3) & 0x3FFFFFF8;
  uint64_t v37 = v29 - 8;
  while (v36)
  {
    unint64_t v38 = *(void *)(v37 + v36);
    unint64_t v39 = *(void *)(v35 + v36);
    v36 -= 8;
    if (v38 != v39)
    {
      if (v38 <= v39) {
        goto LABEL_20;
      }
      break;
    }
  }
LABEL_31:
  uint64_t v23 = v12;
LABEL_32:
  *(void *)uint64_t v23 = v21;
  *(void *)(v23 + 8) = v17;
  *(_OWORD *)(v23 + 16) = v68;
  *(_DWORD *)(v23 + 32) = v16;
  if (++v14 != 8) {
    goto LABEL_33;
  }
  return v13 + 40 == a2;
}

long long *sub_1CC706A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = sub_1CC706108((long long *)a1, (long long *)a2, (long long *)a3);
  unsigned int v9 = *(_DWORD *)(a3 + 32);
  unsigned int v10 = *(_DWORD *)(a4 + 32);
  if (v10 == v9)
  {
    uint64_t v11 = *(void *)(a4 + 8);
    uint64_t v12 = *(void *)(a3 + 8);
    uint64_t v13 = (void *)(v12 + 24);
    uint64_t v14 = *(unsigned int *)(v11 + 32);
    if (v14 > 0x40)
    {
      uint64_t v42 = *(void *)(v11 + 24);
      uint64_t v43 = *(void *)(v42 + 8 * ((v14 - 1) >> 6)) & (1 << (v14 - 1));
      unsigned int v44 = *(_DWORD *)(v12 + 32);
      unsigned int v45 = v44 - 1;
      uint64_t v46 = *(void *)(v12 + 24);
      if (v44 >= 0x41) {
        uint64_t v13 = (void *)(v46 + 8 * (v45 >> 6));
      }
      if ((v43 != 0) == ((*v13 >> v45) & 1))
      {
        unint64_t v57 = v14 + 63;
        uint64_t v58 = v46 - 8;
        uint64_t v59 = (v57 >> 3) & 0x3FFFFFF8;
        uint64_t v60 = v42 - 8;
        while (v59)
        {
          unint64_t v61 = *(void *)(v60 + v59);
          unint64_t v62 = *(void *)(v58 + v59);
          v59 -= 8;
          if (v61 != v62)
          {
            if (v61 <= v62) {
              goto LABEL_6;
            }
            return result;
          }
        }
        return result;
      }
      if (!v43) {
        return result;
      }
    }
    else if ((uint64_t)(*(void *)(v11 + 24) << -(char)v14) >> -(char)v14 >= (uint64_t)(*v13 << -(char)v14) >> -(char)v14)
    {
      return result;
    }
  }
  else if (v10 <= v9)
  {
    return result;
  }
LABEL_6:
  uint64_t v15 = *(void *)(a3 + 32);
  long long v16 = *(_OWORD *)a3;
  long long v17 = *(_OWORD *)(a3 + 16);
  int v18 = *(_DWORD *)(a4 + 32);
  long long v19 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)(a3 + 16) = v19;
  *(_DWORD *)(a3 + 32) = v18;
  *(_OWORD *)a4 = v16;
  *(_OWORD *)(a4 + 16) = v17;
  *(_DWORD *)(a4 + 32) = v15;
  unsigned int v20 = *(_DWORD *)(a2 + 32);
  unsigned int v21 = *(_DWORD *)(a3 + 32);
  if (v21 == v20)
  {
    uint64_t v22 = *(void *)(a3 + 8);
    uint64_t v23 = *(void *)(a2 + 8);
    unsigned int v24 = (void *)(v23 + 24);
    uint64_t v25 = *(unsigned int *)(v22 + 32);
    if (v25 > 0x40)
    {
      uint64_t v47 = *(void *)(v22 + 24);
      uint64_t v48 = *(void *)(v47 + 8 * ((v25 - 1) >> 6)) & (1 << (v25 - 1));
      unsigned int v49 = *(_DWORD *)(v23 + 32);
      unsigned int v50 = v49 - 1;
      uint64_t v51 = *(void *)(v23 + 24);
      if (v49 >= 0x41) {
        unsigned int v24 = (void *)(v51 + 8 * (v50 >> 6));
      }
      if ((v48 != 0) == ((*v24 >> v50) & 1))
      {
        unint64_t v63 = v25 + 63;
        uint64_t v64 = v51 - 8;
        uint64_t v65 = (v63 >> 3) & 0x3FFFFFF8;
        uint64_t v66 = v47 - 8;
        while (v65)
        {
          unint64_t v67 = *(void *)(v66 + v65);
          unint64_t v68 = *(void *)(v64 + v65);
          v65 -= 8;
          if (v67 != v68)
          {
            if (v67 <= v68) {
              goto LABEL_11;
            }
            return result;
          }
        }
        return result;
      }
      if (!v48) {
        return result;
      }
    }
    else if ((uint64_t)(*(void *)(v22 + 24) << -(char)v25) >> -(char)v25 >= (uint64_t)(*v24 << -(char)v25) >> -(char)v25)
    {
      return result;
    }
  }
  else if (v21 <= v20)
  {
    return result;
  }
LABEL_11:
  uint64_t v26 = *(void *)(a2 + 32);
  long long v27 = *(_OWORD *)a2;
  long long v28 = *(_OWORD *)(a2 + 16);
  int v29 = *(_DWORD *)(a3 + 32);
  long long v30 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v30;
  *(_DWORD *)(a2 + 32) = v29;
  *(_OWORD *)a3 = v27;
  *(_OWORD *)(a3 + 16) = v28;
  *(_DWORD *)(a3 + 32) = v26;
  unsigned int v31 = *(_DWORD *)(a1 + 32);
  unsigned int v32 = *(_DWORD *)(a2 + 32);
  if (v32 != v31)
  {
    if (v32 <= v31) {
      return result;
    }
    goto LABEL_16;
  }
  uint64_t v33 = *(void *)(a2 + 8);
  uint64_t v34 = *(void *)(a1 + 8);
  uint64_t v35 = (void *)(v34 + 24);
  uint64_t v36 = *(unsigned int *)(v33 + 32);
  if (v36 <= 0x40)
  {
    if ((uint64_t)(*(void *)(v33 + 24) << -(char)v36) >> -(char)v36 >= (uint64_t)(*v35 << -(char)v36) >> -(char)v36) {
      return result;
    }
    goto LABEL_16;
  }
  uint64_t v52 = *(void *)(v33 + 24);
  uint64_t v53 = *(void *)(v52 + 8 * ((v36 - 1) >> 6)) & (1 << (v36 - 1));
  unsigned int v54 = *(_DWORD *)(v34 + 32);
  unsigned int v55 = v54 - 1;
  uint64_t v56 = *(void *)(v34 + 24);
  if (v54 >= 0x41) {
    uint64_t v35 = (void *)(v56 + 8 * (v55 >> 6));
  }
  if ((v53 != 0) == ((*v35 >> v55) & 1))
  {
    unint64_t v69 = v36 + 63;
    uint64_t v70 = v56 - 8;
    uint64_t v71 = (v69 >> 3) & 0x3FFFFFF8;
    uint64_t v72 = v52 - 8;
    while (v71)
    {
      unint64_t v73 = *(void *)(v72 + v71);
      unint64_t v74 = *(void *)(v70 + v71);
      v71 -= 8;
      if (v73 != v74)
      {
        if (v73 <= v74) {
          goto LABEL_16;
        }
        return result;
      }
    }
  }
  else if (v53)
  {
LABEL_16:
    uint64_t v37 = *(void *)(a1 + 32);
    long long v38 = *(_OWORD *)a1;
    long long v39 = *(_OWORD *)(a1 + 16);
    int v40 = *(_DWORD *)(a2 + 32);
    long long v41 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v41;
    *(_DWORD *)(a1 + 32) = v40;
    *(_OWORD *)a2 = v38;
    *(_OWORD *)(a2 + 16) = v39;
    *(_DWORD *)(a2 + 32) = v37;
  }
  return result;
}

BOOL sub_1CC706D94(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 196;
}

void sub_1CC706DE4()
{
}

void *sub_1CC706DF8(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F261BFB0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC706E40(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F261BFB0;
  a2[1] = v2;
  return result;
}

int *sub_1CC706E6C(uint64_t a1, uint64_t *a2)
{
  return sub_1CC6EF0A4(*(void *)(a1 + 8), a2);
}

void sub_1CC706E78()
{
}

__n128 sub_1CC706E8C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F261BFF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC706ED8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F261BFF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CC706F08(uint64_t a1)
{
  uint64_t v1 = sub_1CC6EF0A4(*(void *)(a1 + 8), *(uint64_t **)(*(void *)(a1 + 16) - 32));
  if (v2) {
    return *v1;
  }
  else {
    return 0;
  }
}

void sub_1CC706F3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *a1;
    uint64_t v7 = 32 * v2;
    do
    {
      uint64_t v8 = a2 + v5;
      uint64_t v9 = v6 + v5;
      *(void *)uint64_t v8 = *(void *)(v6 + v5);
      unsigned int v10 = (void *)(a2 + v5 + 24);
      *(void *)(a2 + v5 + 8) = v10;
      *(void *)(v8 + 16) = 0x100000000;
      unsigned int v11 = *(_DWORD *)(v6 + v5 + 16);
      if (v11) {
        BOOL v12 = v9 == v8;
      }
      else {
        BOOL v12 = 1;
      }
      if (!v12)
      {
        uint64_t v13 = *(const void **)(v9 + 8);
        if ((const void *)(v9 + 24) == v13)
        {
          if (v11 >= 2) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v10, v13, 8 * *(unsigned int *)(v6 + v5 + 16));
          *(_DWORD *)(v8 + 16) = v11;
        }
        else
        {
          *(void *)(a2 + v5 + 8) = v13;
          int v18 = *(_DWORD *)(v6 + v5 + 20);
          *(_DWORD *)(v8 + 16) = v11;
          *(_DWORD *)(v8 + 20) = v18;
          *(void *)(v9 + 8) = v9 + 24;
          *(_DWORD *)(v6 + v5 + 20) = 0;
        }
        *(_DWORD *)(v9 + 16) = 0;
      }
      v5 += 32;
    }
    while (v7 != v5);
    uint64_t v14 = *((unsigned int *)a1 + 2);
    if (v14)
    {
      uint64_t v15 = *a1;
      uint64_t v16 = 32 * v14;
      do
      {
        long long v17 = *(void **)(v15 + v16 - 24);
        if ((void *)(v15 + v16 - 8) != v17) {
          free(v17);
        }
        v16 -= 32;
      }
      while (v16);
    }
  }
}

void sub_1CC707088(uint64_t a1)
{
  sub_1CC7070C0(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC7070C0(uint64_t a1)
{
  *(void *)a1 = &unk_1F261C068;
  uint64_t v2 = (void **)(a1 + 8);
  uint64_t v4 = (void **)(a1 + 56);
  sub_1CC707138(&v4);
  uint64_t v4 = (void **)(a1 + 32);
  sub_1CC7071BC(&v4);
  uint64_t v4 = v2;
  sub_1CC707240(&v4);
  return a1;
}

void sub_1CC707138(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1CD57FDF4(v4 - 192);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC7071BC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1CD494A40(v4 - 80);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC707240(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (unsigned __int8 **)**a1;
  if (!v2) {
    return;
  }
  uint64_t v4 = (unsigned __int8 **)v1[1];
  uint64_t v5 = **a1;
  if (v4 == v2) {
    goto LABEL_36;
  }
  uint64_t v6 = v4 - 2;
  do
  {
    uint64_t v7 = *v6;
    if (!*v6) {
      goto LABEL_5;
    }
    int v10 = *v7;
    if ((v10 - 4) > 0x1E)
    {
      if ((v10 - 3) >= 0xFFFFFFFE) {
        uint64_t v13 = *v6;
      }
      else {
        uint64_t v13 = 0;
      }
      if ((v10 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v12 = (unint64_t)(v13 + 8);
LABEL_19:
        int v18 = v6;
        sub_1CC5FA668(v12 + 16, &v18);
        goto LABEL_5;
      }
      if (v10 == 3) {
        *((void *)v7 + 1) = 0;
      }
    }
    else if ((v7[1] & 0x7F) == 2 || *((_DWORD *)v7 + 3))
    {
      uint64_t v11 = *((void *)v7 + 2);
      if ((v11 & 4) != 0)
      {
        unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFF8;
        if (v12) {
          goto LABEL_19;
        }
      }
    }
LABEL_5:
    uint64_t v8 = *(v6 - 2);
    if (!v8) {
      goto LABEL_6;
    }
    int v14 = *v8;
    if ((v14 - 4) > 0x1E)
    {
      if ((v14 - 3) >= 0xFFFFFFFE) {
        uint64_t v17 = (uint64_t)*(v6 - 2);
      }
      else {
        uint64_t v17 = 0;
      }
      if ((v14 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v16 = v17 + 8;
LABEL_33:
        int v18 = v6 - 2;
        sub_1CC5FA668(v16 + 16, &v18);
        goto LABEL_6;
      }
      if (v14 == 3) {
        *((void *)v8 + 1) = 0;
      }
    }
    else if ((v8[1] & 0x7F) == 2 || *((_DWORD *)v8 + 3))
    {
      uint64_t v15 = *((void *)v8 + 2);
      if ((v15 & 4) != 0)
      {
        unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFF8;
        if (v16) {
          goto LABEL_33;
        }
      }
    }
LABEL_6:
    uint64_t v9 = v6 - 9;
    v6 -= 11;
  }
  while (v9 != v2);
  uint64_t v5 = **a1;
LABEL_36:
  v1[1] = v2;

  operator delete(v5);
}

uint64_t sub_1CC7073D0()
{
  *(void *)&long long v4 = "Should enable CSE in irtranslator";
  *((void *)&v4 + 1) = 33;
  int v3 = 0;
  char v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD616A68(&v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCD9B38, &dword_1CB82C000);
}

uint64_t sub_1CC707440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v227 = v5;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v4;
  v260[304] = *MEMORY[0x1E4F143B8];
  uint64_t v223 = *(void *)(v6 - 32);
  unint64_t v258 = (char *)v260;
  uint64_t v259 = 0x1000000000;
  uint64_t v11 = (void **)v8[1];
  uint64_t v12 = (*v11)[5] + 272;
  uint64_t v13 = (*(uint64_t (**)(void *))(*v11[2] + 176))(v11[2]);
  uint64_t v228 = v9[3];
  uint64_t v229 = v9;
  uint64_t v230 = (void *)v10;
  uint64_t v225 = v12;
  uint64_t v222 = v13;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v10 + 8) + 2008))(&v245);
  uint64_t v14 = *(void *)(v7 - 32);
  if (*(unsigned char *)(v14 + 81)) {
    int v15 = *(unsigned __int8 *)(v14 + 80) | 2;
  }
  else {
    int v15 = *(unsigned __int8 *)(v14 + 80);
  }
  uint64_t v16 = *(void *)(v7 + 64);
  uint64_t v221 = (llvm::AttributeList *)(v7 + 64);
  if (v16 && (*(unsigned char *)(v16 + 12) & 0x40) != 0 || llvm::CallBase::hasFnAttrOnCalledFunction(v7, 6)) {
    v15 |= 0x20u;
  }
  unsigned int v17 = v15 | (4 * *(_DWORD *)(v14 + 84));
  uint64_t v18 = v245;
  uint64_t v231 = v246;
  uint64_t v233 = (void ***)v11;
  uint64_t v224 = v7;
  if (v245 != v246)
  {
    uint64_t v19 = 0;
    unsigned int v20 = 0;
    do
    {
      sub_1CD616D7C((uint64_t)&v251, v18);
      uint64_t v255 = v257;
      uint64_t v256 = 0x100000000;
      unsigned int v21 = sub_1CC708CCC(&v258, (unint64_t)&v251);
      sub_1CD616DE4((uint64_t)&v258[152 * v259], (uint64_t *)v21);
      *(void *)(v22 + 128) = v22 + 144;
      uint64_t v23 = v22 + 128;
      *(void *)(v23 + 8) = 0x100000000;
      if (*((_DWORD *)v21 + 34)) {
        sub_1CB927804(v23, (uint64_t)(v21 + 128));
      }
      LODWORD(v259) = v259 + 1;
      if (v255 != v257) {
        free(v255);
      }
      sub_1CD50E94C((uint64_t)&v251);
      unsigned int v24 = &v258[152 * v259];
      int v25 = *((_DWORD *)v24 - 38);
      if (!v25) {
        goto LABEL_17;
      }
      if (v25 != 1)
      {
        *(v24 - 32) = 1;
        goto LABEL_29;
      }
      if (!*(v24 - 139))
      {
        uint64_t v70 = *(void *)v7;
        uint64_t v71 = v230[1];
        if (*(void *)v7 && *(unsigned char *)(v70 + 8) == 16) {
          unsigned __int8 v72 = sub_1CB87DC14(v71, v225, *(llvm::EVT **)(*(void *)(v70 + 16) + 8 * v20), 0);
        }
        else {
          unsigned __int8 v72 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v71 + 568))(v71, v225);
        }
        int v32 = v72;
        *(v24 - 32) = v72;
        ++v20;
      }
      else
      {
LABEL_17:
        uint64_t v26 = *(void *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 32 * v19);
        *((void *)v24 - 5) = v26;
        if (*(unsigned char *)(v26 + 16) == 22
          || (*(v24 - 139)
            ? (uint64_t ParamElementType = llvm::AttributeList::getParamElementType(v221, v19))
            : (uint64_t ParamElementType = *(void *)v26),
              (*(_DWORD *)(ParamElementType + 8) & 0xFE) != 0x12
           && ((unsigned int v28 = *(_DWORD *)(ParamElementType + 8),
                BOOL v38 = v28 > 0x15,
                int v29 = (1 << v28) & 0x20AC7F,
                !v38)
             ? (BOOL v30 = v29 == 0)
             : (BOOL v30 = 1),
               v30)))
        {
LABEL_268:
          uint64_t v176 = 0;
          goto LABEL_286;
        }
        unsigned __int8 v31 = (*(uint64_t (**)(void, uint64_t))(*(void *)v230[1] + 568))(v230[1], v225);
        int v32 = v31;
        *(v24 - 32) = v31;
        uint64_t v19 = (v19 + 1);
      }
      if (v32 == 178) {
        goto LABEL_268;
      }
LABEL_29:
      uint64_t v33 = v230[1];
      uint64_t v34 = (const std::string *)*((void *)v24 - 17);
      unint64_t v35 = *((void *)v24 - 16) - (void)v34;
      unsigned int v235 = v20;
      uint64_t v36 = v19;
      if (v35 == 24)
      {
        std::string::operator=((std::string *)v24 - 3, v34);
        char v37 = *(v24 - 49);
        BOOL v38 = v37 < 0;
        if (v37 >= 0) {
          long long v39 = v24 - 72;
        }
        else {
          long long v39 = (char *)*((void *)v24 - 9);
        }
        uint64_t v40 = v37 & 0x7F;
        if (v38) {
          uint64_t v41 = *((void *)v24 - 8);
        }
        else {
          uint64_t v41 = v40;
        }
        int v42 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)v33 + 2040))(v33, v39, v41);
      }
      else
      {
        uint64_t v43 = -1431655765 * (v35 >> 3);
        if (v43)
        {
          unsigned int v220 = v17;
          uint64_t v44 = 0;
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          int v42 = 6;
          int v47 = -1;
          do
          {
            uint64_t v48 = (uint64_t *)(*((void *)v24 - 17) + v44);
            char v49 = *((unsigned char *)v48 + 23);
            if (v49 >= 0) {
              uint64_t v50 = *((void *)v24 - 17) + v44;
            }
            else {
              uint64_t v50 = *v48;
            }
            if (v49 >= 0) {
              uint64_t v51 = v49 & 0x7F;
            }
            else {
              uint64_t v51 = v48[1];
            }
            int v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v33 + 2040))(v33, v50, v51);
            if (*(v24 - 139)) {
              BOOL v53 = v52 == 2;
            }
            else {
              BOOL v53 = 1;
            }
            if (v53 || v52 == 0 || v52 == 1)
            {
              BOOL v56 = v52 != 2 || *((_DWORD *)v24 - 36) == -1;
              if (v56 && dword_1CFB1CB1C[v52] > v47)
              {
                uint64_t v46 = v45;
                int v42 = v52;
                int v47 = dword_1CFB1CB1C[v52];
              }
            }
            ++v45;
            v44 += 24;
          }
          while (v43 != v45);
          uint64_t v34 = (const std::string *)*((void *)v24 - 17);
          uint64_t v7 = v224;
          uint64_t v11 = v233;
          unsigned int v17 = v220;
        }
        else
        {
          uint64_t v46 = 0;
          int v42 = 6;
        }
        std::string::operator=((std::string *)v24 - 3, &v34[v46]);
      }
      *((_DWORD *)v24 - 12) = v42;
      uint64_t v57 = *(v24 - 49);
      if ((v57 & 0x80u) == 0) {
        uint64_t v58 = v57 & 0x7F;
      }
      else {
        uint64_t v58 = *((void *)v24 - 8);
      }
      if (v58 == 1)
      {
        uint64_t v59 = v24 - 72;
        if ((v57 & 0x80) != 0)
        {
          uint64_t v59 = (char *)*((void *)v24 - 9);
          uint64_t v57 = *((void *)v24 - 8);
        }
        int v60 = memcmp(v59, "X", v57 != 0);
        if (v57 == 1 && !v60)
        {
          uint64_t v61 = *((void *)v24 - 5);
          if (v61)
          {
            unsigned int v62 = *(unsigned __int8 *)(v61 + 16);
            if (v62 > 0x16 || ((1 << v62) & 0x410001) == 0)
            {
              uint64_t v63 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v33 + 2064))(v33, *(v24 - 32), 0);
              if (v63)
              {
                MEMORY[0x1D25D9630](v24 - 72, v63);
                char v64 = *(v24 - 49);
                BOOL v65 = v64 < 0;
                if (v64 >= 0) {
                  uint64_t v66 = v24 - 72;
                }
                else {
                  uint64_t v66 = (char *)*((void *)v24 - 9);
                }
                uint64_t v67 = v64 & 0x7F;
                if (v65) {
                  uint64_t v68 = *((void *)v24 - 8);
                }
                else {
                  uint64_t v68 = v67;
                }
                int v42 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)v33 + 2040))(v33, v66, v68);
                *((_DWORD *)v24 - 12) = v42;
              }
              else
              {
                int v42 = *((_DWORD *)v24 - 12);
              }
            }
          }
        }
      }
      if (v42 == 5 || v42 == 2)
      {
        int v69 = *((_DWORD *)v24 - 38);
        if (v69 != 2)
        {
          uint64_t v19 = v36;
          unsigned int v20 = v235;
          if (v69 == 1)
          {
            v17 |= 0x10u;
          }
          else if (!v69)
          {
            v17 |= 8u;
          }
          goto LABEL_95;
        }
        v17 |= 0x18u;
      }
      uint64_t v19 = v36;
      unsigned int v20 = v235;
LABEL_95:
      v18 += 128;
    }
    while (v18 != v231);
  }
  unint64_t v73 = (llvm::MachineFunction *)v229[1];
  uint64_t v74 = *(void *)(v229[2] + 8) + 48;
  unsigned int v75 = (unsigned __int8 *)v229[4];
  uint64_t v247 = v75;
  if (v75) {
    llvm::MetadataTracking::track((uint64_t)&v247, v75, 2);
  }
  unsigned int v76 = llvm::MachineFunction::CreateMachineInstr(v73, v74, &v247, 0);
  if (v247)
  {
    int v216 = *v247;
    if ((v216 - 4) > 0x1E)
    {
      if ((v216 - 3) >= 0xFFFFFFFE) {
        uint64_t v219 = v247;
      }
      else {
        uint64_t v219 = 0;
      }
      if ((v216 - 3) < 0xFFFFFFFE)
      {
        uint64_t v11 = v233;
        if (v216 == 3) {
          *((void *)v247 + 1) = 0;
        }
        goto LABEL_107;
      }
      unint64_t v218 = (unint64_t)(v219 + 8);
    }
    else
    {
      uint64_t v11 = v233;
      if ((v247[1] & 0x7F) != 2 && !*((_DWORD *)v247 + 3)) {
        goto LABEL_107;
      }
      uint64_t v217 = *((void *)v247 + 2);
      if ((v217 & 4) == 0) {
        goto LABEL_107;
      }
      unint64_t v218 = v217 & 0xFFFFFFFFFFFFFFF8;
      if (!v218) {
        goto LABEL_107;
      }
    }
    uint64_t v251 = (uint64_t)&v247;
    sub_1CC5FA668(v218 + 16, &v251);
    uint64_t v11 = v233;
  }
LABEL_107:
  uint64_t v77 = (void *)(v223 + 24);
  if (*(char *)(v223 + 47) < 0) {
    uint64_t v77 = (void *)*v77;
  }
  uint64_t v252 = 0;
  unsigned int v253 = v77;
  int v254 = 0;
  uint64_t v251 = 9;
  llvm::MachineInstr::addOperand(v76, v73, (const llvm::MachineOperand *)&v251);
  LODWORD(v251) = 1;
  uint64_t v252 = 0;
  unsigned int v253 = (void *)v17;
  llvm::MachineInstr::addOperand(v76, v73, (const llvm::MachineOperand *)&v251);
  unint64_t v243 = v73;
  long long v244 = v76;
  unsigned int v226 = *((_DWORD *)v76 + 10);
  uint64_t v251 = (uint64_t)&v253;
  uint64_t v252 = 0x1000000000;
  if (v259)
  {
    uint64_t v78 = v258;
    uint64_t v232 = &v258[152 * v259];
    do
    {
      uint64_t v79 = v78 + 80;
      unsigned int v236 = (const char **)(v78 + 80);
      if (v78[103] < 0) {
        uint64_t v79 = *(const char **)v79;
      }
      unsigned int v80 = v78;
      if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *(unsigned __int8 *)v79 + 60) & 0x400) != 0)
      {
        int v81 = atoi(v79);
        unsigned int v80 = &v258[152 * v81];
      }
      uint64_t v82 = (*(uint64_t (**)(void *))(*v11[2] + 120))(v11[2]);
      uint64_t v83 = (*(uint64_t (**)(void *))(*v11[2] + 176))(v11[2]);
      if (*((_DWORD *)v78 + 26) != 2)
      {
        uint64_t v86 = (char *)*((void *)v80 + 10);
        uint64_t v85 = v80 + 80;
        uint64_t v84 = v86;
        char v87 = v85[23];
        int v88 = v87;
        unint64_t v89 = v87 >= 0 ? v85 : v84;
        uint64_t v90 = v87 & 0x7F;
        uint64_t v91 = v88 >= 0 ? v90 : *((void *)v85 + 1);
        int v92 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, void))(*(void *)v82 + 2048))(v82, v83, v89, v91, v85[40]);
        if (v93)
        {
          int v94 = v92;
          unint64_t v95 = (unint64_t)v93;
          uint64_t v96 = v78 + 80;
          if (v78[103] < 0) {
            uint64_t v96 = *v236;
          }
          if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *(unsigned __int8 *)v96 + 60) & 0x400) == 0)
          {
            uint64_t v97 = v78[120];
            if (v97 == 1)
            {
              int v98 = 1;
              unint64_t v99 = v233;
            }
            else
            {
              unint64_t v99 = v233;
              int v98 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, void))(*(void *)v82 + 584))(v82, ***v233, v97, 0, 0);
            }
            unint64_t v100 = **(unsigned __int16 ***)v95;
            uint64_t v101 = (uint64_t)v99[5];
            if (v94)
            {
              --v100;
              do
              {
                int v102 = v100[1];
                ++v100;
              }
              while (v94 != v102);
            }
            if (v98)
            {
              unint64_t v103 = v95 & 0xFFFFFFFFFFFFFFFBLL;
              do
              {
                if (v94)
                {
                  int IncompleteVirtualRegister = *v100;
                }
                else
                {
                  int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v101, "", 0);
                  *(void *)(*(void *)(v101 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v103;
                  uint64_t v105 = *(void *)(v101 + 8);
                  if (v105) {
                    (*(void (**)(uint64_t))(*(void *)v105 + 24))(v105);
                  }
                }
                unint64_t v106 = *((unsigned int *)v78 + 34);
                if (v106 >= *((unsigned int *)v78 + 35)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(_DWORD *)(*((void *)v78 + 16) + 4 * v106) = IncompleteVirtualRegister;
                ++*((_DWORD *)v78 + 34);
                ++v100;
                --v98;
              }
              while (v98);
            }
          }
        }
      }
      int v107 = *(_DWORD *)v78;
      if (*(_DWORD *)v78)
      {
        if (v107 == 2)
        {
          int v118 = *((_DWORD *)v78 + 34);
          uint64_t v11 = v233;
          if (v118)
          {
            LODWORD(v247) = 1;
            uint64_t v248 = 0;
            uint64_t v249 = (8 * v118) | 4u;
            llvm::MachineInstr::addOperand(v244, v243, (const llvm::MachineOperand *)&v247);
            uint64_t v119 = *((unsigned int *)v78 + 34);
            if (v119)
            {
              uint64_t v120 = (int *)*((void *)v78 + 16);
              uint64_t v121 = 4 * v119;
              do
              {
                int v123 = *v120++;
                int v122 = v123;
                if ((v123 - 1) >= 0x3FFFFFFF) {
                  unsigned int v124 = 66;
                }
                else {
                  unsigned int v124 = 70;
                }
                sub_1CB89517C(&v243, v122, v124, 0);
                v121 -= 4;
              }
              while (v121);
            }
          }
          goto LABEL_208;
        }
        uint64_t v11 = v233;
        if (v107 == 1)
        {
          if (*((_DWORD *)v78 + 26) != 2)
          {
            int v132 = *((_DWORD *)v78 + 34);
            if (!v132) {
              goto LABEL_284;
            }
            if (v78[4]) {
              int v133 = 3;
            }
            else {
              int v133 = 2;
            }
            unsigned int v134 = v133 | (8 * v132);
            int v135 = **((_DWORD **)v78 + 16);
            if (v135 < 0) {
              v134 |= (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(v228 + 24) + 16 * (v135 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
            }
                                           + 24) << 16)
                    + 0x10000;
            LODWORD(v247) = 1;
            uint64_t v248 = 0;
            uint64_t v249 = v134;
            llvm::MachineInstr::addOperand(v244, v243, (const llvm::MachineOperand *)&v247);
            uint64_t v136 = *((unsigned int *)v78 + 34);
            if (v136)
            {
              long long v137 = (int *)*((void *)v78 + 16);
              uint64_t v138 = 4 * v136;
              do
              {
                int v140 = *v137++;
                int v139 = v140;
                BOOL v141 = (v140 - 1) < 0x3FFFFFFF;
                if (v78[4]) {
                  int v142 = 66;
                }
                else {
                  int v142 = 2;
                }
                sub_1CB89517C(&v243, v139, v142 | (4 * v141), 0);
                v138 -= 4;
              }
              while (v138);
            }
            uint64_t v143 = sub_1CC708CCC((char **)&v251, (unint64_t)v78);
            uint64_t v144 = sub_1CD616D7C(v251 + 152 * v252, (uint64_t)v143);
            *(void *)(v144 + 128) = v144 + 144;
            uint64_t v145 = v144 + 128;
            *(void *)(v145 + 8) = 0x100000000;
            if (*((_DWORD *)v143 + 34)) {
              sub_1CB927A18(v145, (uint64_t)(v143 + 128));
            }
            LODWORD(v252) = v252 + 1;
            goto LABEL_208;
          }
          uint64_t v108 = v230[1];
          char v109 = v78[103];
          BOOL v110 = v109 < 0;
          uint64_t v111 = *((void *)v78 + 11);
          if (v109 >= 0) {
            unsigned int v112 = v78 + 80;
          }
          else {
            unsigned int v112 = (char *)*((void *)v78 + 10);
          }
          uint64_t v113 = v109 & 0x7F;
LABEL_150:
          if (v110) {
            uint64_t v114 = v111;
          }
          else {
            uint64_t v114 = v113;
          }
          int v115 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)v108 + 2056))(v108, v112, v114);
          LODWORD(v247) = 1;
          uint64_t v248 = 0;
          uint64_t v249 = (v115 << 16) | 0xEu;
          llvm::MachineInstr::addOperand(v244, v243, (const llvm::MachineOperand *)&v247);
          uint64_t v116 = *(void *)(v227 + 24);
          if (!v116) {
            goto LABEL_287;
          }
          int v117 = *(_DWORD *)(*(uint64_t (**)(uint64_t, void))(*(void *)v116 + 48))(v116, *((void *)v78 + 14));
LABEL_155:
          uint64_t v248 = 0;
          LODWORD(v247) = 0;
          HIDWORD(v247) = v117;
          uint64_t v249 = 0;
          uint64_t v250 = 0;
          llvm::MachineInstr::addOperand(v244, v243, (const llvm::MachineOperand *)&v247);
        }
      }
      else
      {
        if (v78[103] < 0)
        {
          unint64_t v125 = v78 + 80;
          uint64_t v126 = *v236;
          if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *(unsigned __int8 *)*v236 + 60) & 0x400) != 0)
          {
LABEL_199:
            int v146 = atoi(v126);
            uint64_t v147 = *((void *)v244 + 4);
            unsigned int v148 = v226;
            for (int i = v146; i; --i)
              v148 += ((unsigned __int16)*(_DWORD *)(v147 + 32 * v148 + 16) >> 3) + 1;
            if ((*(void *)(v147 + 32 * v148 + 16) & 6) != 2) {
              goto LABEL_284;
            }
            uint64_t v150 = *(void *)(v227 + 24);
            if (!v150) {
              goto LABEL_287;
            }
            *(void *)uint64_t v237 = v148 + 1;
            int v151 = *(_DWORD *)(v147 + 32 * *(void *)v237 + 4);
            unint64_t v152 = (unsigned int *)(*(uint64_t (**)(uint64_t, void))(*(void *)v150 + 48))(v150, *((void *)v78 + 14));
            uint64_t v153 = v152;
            if (v151 < 0)
            {
              unint64_t v154 = *(void *)(*(void *)(v228 + 24) + 16 * (v151 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
              unsigned int v155 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v228, "", 0);
              *(void *)(*(void *)(v228 + 24) + 16 * (v155 & 0x7FFFFFFF)) = v154;
              uint64_t v156 = *(void *)(v228 + 8);
              if (v156) {
                (*(void (**)(uint64_t, void))(*(void *)v156 + 24))(v156, v155);
              }
              int v157 = sub_1CC708AAC(v155, *v153, v229);
              uint64_t v11 = v233;
              if (!v157) {
                goto LABEL_284;
              }
            }
            else
            {
              unsigned int v155 = *v152;
              uint64_t v11 = v233;
            }
            LODWORD(v247) = 1;
            uint64_t v248 = 0;
            uint64_t v249 = (v146 << 16) | 0x80000009;
            llvm::MachineInstr::addOperand(v244, v243, (const llvm::MachineOperand *)&v247);
            uint64_t v248 = 0;
            LODWORD(v247) = 0;
            HIDWORD(v247) = v155;
            uint64_t v249 = 0;
            uint64_t v250 = 0;
            llvm::MachineInstr::addOperand(v244, v243, (const llvm::MachineOperand *)&v247);
            llvm::MachineInstr::tieOperands((uint64_t)v244, v237[0], *((_DWORD *)v244 + 10) - 1);
            goto LABEL_208;
          }
        }
        else
        {
          unint64_t v125 = v78 + 80;
          uint64_t v126 = v78 + 80;
          if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *(unsigned __int8 *)v236 + 60) & 0x400) != 0) {
            goto LABEL_199;
          }
        }
        uint64_t v113 = v78[103];
        int v127 = *((_DWORD *)v78 + 26);
        uint64_t v11 = v233;
        if (v127 == 2)
        {
          if (!v78[13]) {
            goto LABEL_284;
          }
          uint64_t v108 = v230[1];
          BOOL v110 = (v113 & 0x80u) != 0;
          uint64_t v111 = *((void *)v78 + 11);
          if ((v113 & 0x80u) == 0) {
            unsigned int v112 = v125;
          }
          else {
            unsigned int v112 = (char *)*((void *)v78 + 10);
          }
          goto LABEL_150;
        }
        if (v127 != 4)
        {
          if (v127 != 5)
          {
            if (v78[13]) {
              goto LABEL_284;
            }
            unsigned int v158 = *((_DWORD *)v78 + 34);
            if (!v158) {
              goto LABEL_284;
            }
            uint64_t v159 = *(void *)(v227 + 24);
            if (!v159) {
              goto LABEL_287;
            }
            uint64_t v160 = (*(uint64_t (**)(uint64_t, void))(*(void *)v159 + 48))(v159, *((void *)v78 + 14));
            if (v158 > 1) {
              goto LABEL_284;
            }
            unsigned int v161 = (unsigned int *)v160;
            int v162 = **((_DWORD **)v78 + 16);
            unsigned int v163 = v162 < 0
                 ? (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(v228 + 24) + 16 * (v162 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                        + 24) << 16)
                 + 65545
                 : 9;
            LODWORD(v247) = 1;
            uint64_t v248 = 0;
            uint64_t v249 = v163;
            llvm::MachineInstr::addOperand(v244, v243, (const llvm::MachineOperand *)&v247);
            if (!sub_1CC708AAC(**((_DWORD **)v78 + 16), *v161, v229)) {
              goto LABEL_284;
            }
            int v117 = **((_DWORD **)v78 + 16);
            goto LABEL_155;
          }
          if (v78[13]) {
            goto LABEL_284;
          }
        }
        uint64_t v241 = 0;
        uint64_t v242 = 0;
        std::string __p = 0;
        if ((v113 & 0x80u) == 0) {
          uint64_t v128 = v125;
        }
        else {
          uint64_t v128 = (char *)*((void *)v78 + 10);
        }
        if ((v113 & 0x80u) == 0) {
          uint64_t v129 = v113;
        }
        else {
          uint64_t v129 = *((void *)v78 + 11);
        }
        if (!(*(unsigned int (**)(void *, void, char *, uint64_t, void **, void *))(*v230 + 8))(v230, *((void *)v78 + 14), v128, v129, &__p, v229))
        {
          if (__p)
          {
            uint64_t v241 = (const llvm::MachineOperand *)__p;
            operator delete(__p);
          }
          goto LABEL_284;
        }
        LODWORD(v247) = 1;
        uint64_t v248 = 0;
        uint64_t v249 = ((unint64_t)(v241 - (const llvm::MachineOperand *)__p) >> 2) & 0xFFFFFFF8 | 5;
        llvm::MachineInstr::addOperand(v244, v243, (const llvm::MachineOperand *)&v247);
        unint64_t v130 = (const llvm::MachineOperand *)__p;
        if (v241 != __p)
        {
          uint64_t v131 = 32 * ((v241 - (const llvm::MachineOperand *)__p) >> 5);
          do
          {
            llvm::MachineInstr::addOperand(v244, v243, v130);
            unint64_t v130 = (const llvm::MachineOperand *)((char *)v130 + 32);
            v131 -= 32;
          }
          while (v131);
          unint64_t v130 = (const llvm::MachineOperand *)__p;
        }
        if (v130)
        {
          uint64_t v241 = v130;
          operator delete(v130);
        }
      }
LABEL_208:
      v78 += 152;
    }
    while (v78 != v232);
  }
  if (*(void *)(v224 + 48) || (*(unsigned char *)(v224 + 23) & 0x20) != 0)
  {
    uint64_t MetadataImpl = llvm::Instruction::getMetadataImpl((uint64_t ***)v224, "srcloc", 6uLL);
    if (MetadataImpl)
    {
      LODWORD(v247) = 14;
      uint64_t v248 = 0;
      uint64_t v249 = MetadataImpl;
      llvm::MachineInstr::addOperand(v244, v243, (const llvm::MachineOperand *)&v247);
    }
  }
  uint64_t v165 = v244;
  uint64_t v166 = (unint64_t *)v229[6];
  uint64_t v167 = *(void *)(v229[5] + 40);
  *((void *)v244 + 3) = v167;
  uint64_t v168 = *(void *)(v167 + 32);
  uint64_t v169 = *((unsigned int *)v165 + 10);
  if (v169)
  {
    uint64_t v208 = *((void *)v165 + 4);
    uint64_t v209 = *(void *)(v168 + 40);
    uint64_t v210 = 32 * v169;
    do
    {
      if (!*(unsigned char *)v208)
      {
        uint64_t v211 = *(unsigned int *)(v208 + 4);
        if ((int)v211 >= 0) {
          uint64_t v212 = (uint64_t *)(*(void *)(v209 + 272) + 8 * v211);
        }
        else {
          uint64_t v212 = (uint64_t *)(*(void *)(v209 + 24) + 16 * (v211 & 0x7FFFFFFF) + 8);
        }
        uint64_t v213 = *v212;
        if (*v212)
        {
          uint64_t v214 = *(void *)(v213 + 16);
          *(void *)(v213 + 16) = v208;
          *(void *)(v208 + 16) = v214;
          if (*(unsigned char *)(v208 + 3))
          {
            *(void *)(v208 + 24) = v213;
          }
          else
          {
            *(void *)(v208 + 24) = 0;
            uint64_t v212 = (uint64_t *)(v214 + 24);
          }
        }
        else
        {
          *(void *)(v208 + 16) = v208;
          *(void *)(v208 + 24) = 0;
        }
        *uint64_t v212 = v208;
      }
      v208 += 32;
      v210 -= 32;
    }
    while (v210);
  }
  uint64_t v170 = *(void *)(v168 + 728);
  if (v170) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v170 + 24))(v170, v165);
  }
  unint64_t v171 = *v166 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v165 = v171 | *(void *)v165 & 7;
  *((void *)v165 + 1) = v166;
  *(void *)(v171 + 8) = v165;
  *uint64_t v166 = *v166 & 7 | (unint64_t)v165;
  uint64_t v172 = v229[7];
  if (v172) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v172 + 24))(v172, v165);
  }
  uint64_t v173 = *(void *)(v227 + 24);
  if (!v173) {
LABEL_287:
  }
    sub_1CB920400();
  uint64_t v174 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v173 + 48))(v173, v224);
  if (v175 == v252)
  {
    uint64_t v176 = 1;
    uint64_t v177 = v175;
    if (!v175) {
      goto LABEL_285;
    }
    uint64_t v178 = v174;
    uint64_t v179 = 0;
    uint64_t v180 = (void *)(v228 + 424);
    uint64_t v181 = v228 + 440;
    while (1)
    {
      unsigned int v182 = (char *)(v251 + 152 * v179);
      unsigned int v183 = *((_DWORD *)v182 + 34);
      if (v183)
      {
        unsigned int v184 = *(_DWORD *)(v251 + 152 * v179 + 104);
        if (v184 >= 2)
        {
          if (v184 - 4 < 3) {
            break;
          }
        }
        else
        {
          if (v183 > 1) {
            break;
          }
          unsigned int v185 = **((_DWORD **)v182 + 16);
          unsigned int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(v222, v185, v228);
          unsigned int v187 = RegSizeInBits;
          int v188 = *(_DWORD *)(v178 + 4 * v179);
          if ((v188 & 0x80000000) == 0 || (uint64_t v189 = v188 & 0x7FFFFFFF, v189 >= *(_DWORD *)(v228 + 432)))
          {
            unint64_t v239 = 0;
LABEL_258:
            uint64_t v192 = RegSizeInBits;
LABEL_259:
            uint64_t v206 = sub_1CB8F1DC4(&v239);
            if (v205 == 1) {
            if (v206 != v192)
            }
              break;
            LODWORD(__p) = *(_DWORD *)(v178 + 4 * v179);
            LODWORD(v241) = 1;
            LODWORD(v247) = v185;
            LODWORD(v249) = 0;
            (*(void (**)(void *, uint64_t, void **, uint64_t, unsigned __int8 **, uint64_t, void))(*v229 + 32))(v229, 19, &__p, 1, &v247, 1, 0);
            goto LABEL_264;
          }
          unint64_t v239 = *(void *)(*v180 + 8 * v189);
          if ((v239 & 1) == 0) {
            goto LABEL_258;
          }
          *(void *)unint64_t v238 = v181;
          unint64_t v191 = sub_1CB8F1DC4(&v239);
          if (v190 == 1) {
          uint64_t v192 = v187;
          }
          if (v191 >= v187)
          {
            uint64_t v181 = *(void *)v238;
            goto LABEL_259;
          }
          uint64_t v234 = v180;
          int v193 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v228, "", 0);
          unint64_t v194 = v193 & 0x7FFFFFFF;
          *(void *)(*(void *)(v228 + 24) + 16 * v194) = 4;
          uint64_t v195 = v228;
          unint64_t v196 = *(unsigned int *)(v228 + 432);
          if (v194 >= v196)
          {
            unint64_t v197 = v194 + 1;
            uint64_t v198 = *(void *)(v228 + 440);
            if (v194 >= *(unsigned int *)(v228 + 436)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v199 = *(_DWORD *)(v228 + 432);
            if (v197 != v196)
            {
              unint64_t v200 = (void *)(*v234 + 8 * v196);
              uint64_t v201 = ~v194 + v196;
              do
                *v200++ = v198;
              while (!__CFADD__(v201++, 1));
              int v199 = *(_DWORD *)(v228 + 432);
            }
            *(_DWORD *)(v228 + 432) = v199 + v197 - v196;
            uint64_t v195 = v228;
          }
          *(void *)(*(void *)(v195 + 424) + 8 * v194) = (8 * v192) | 1;
          uint64_t v203 = *(void *)(v195 + 8);
          uint64_t v180 = v234;
          if (v203)
          {
            int v207 = v193;
            (*(void (**)(uint64_t))(*(void *)v203 + 24))(v203);
            int v193 = v207;
          }
          LODWORD(__p) = v193;
          LODWORD(v241) = 1;
          LODWORD(v247) = v185;
          LODWORD(v249) = 0;
          int v204 = v193;
          (*(void (**)(void *, uint64_t, void **, uint64_t, unsigned __int8 **, uint64_t, void))(*v229 + 32))(v229, 19, &__p, 1, &v247, 1, 0);
          LODWORD(__p) = *(_DWORD *)(v178 + 4 * v179);
          LODWORD(v241) = 1;
          LODWORD(v247) = v204;
          LODWORD(v249) = 0;
          (*(void (**)(void *, uint64_t, void **, uint64_t, unsigned __int8 **, uint64_t, void))(*v229 + 32))(v229, 119, &__p, 1, &v247, 1, 0);
          uint64_t v181 = *(void *)v238;
        }
      }
LABEL_264:
      if (++v179 == v177)
      {
        uint64_t v176 = 1;
        goto LABEL_285;
      }
    }
  }
LABEL_284:
  uint64_t v176 = 0;
LABEL_285:
  sub_1CC708C4C((char **)&v251);
LABEL_286:
  uint64_t v251 = (uint64_t)&v245;
  sub_1CC27A9C0((void ***)&v251);
  sub_1CC708C4C(&v258);
  return v176;
}

uint64_t sub_1CC708AAC(unsigned int a1, unsigned int a2, void *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a3[1] + 16) + 176))(*(void *)(a3[1] + 16));
  if ((a2 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v7 = a3[3];
  if ((a2 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v7 + 432)) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 424) + 8 * (a2 & 0x7FFFFFFF));
  if ((v8 & 0xFFFFFFFFFFFFFFF9) == 0) {
    return 0;
  }
  uint64_t v9 = v6;
  unsigned int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(v6, a2, a3[3]);
  unsigned int v11 = llvm::TargetRegisterInfo::getRegSizeInBits(v9, a1, v7);
  if (v11 < RegSizeInBits) {
    return 0;
  }
  if (v11 <= RegSizeInBits)
  {
LABEL_10:
    uint64_t v12 = 1;
    LODWORD(v17) = a1;
    int v18 = 1;
    v15[0] = a2;
    int v16 = 0;
    (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*a3 + 32))(a3, 19, &v17, 1, v15, 1, 0);
    return v12;
  }
  if (v8)
  {
    uint64_t v17 = (8 * v11) | 1;
    int v18 = 0;
    v15[0] = a2;
    int v16 = 0;
    (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*a3 + 32))(a3, 118, &v17, 1, v15, 1, 0);
    a2 = *(_DWORD *)(*(void *)(v14 + 32) + 4);
    goto LABEL_10;
  }
  return 0;
}

char **sub_1CC708C4C(char **a1)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 152 * v3;
    do
    {
      uint64_t v5 = *(char **)&v2[v4 - 24];
      if (&v2[v4 - 8] != v5) {
        free(v5);
      }
      sub_1CD50E94C((uint64_t)&v2[v4 - 152]);
      v4 -= 152;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

char *sub_1CC708CCC(char **a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v4 = *((unsigned int *)a1 + 2);
  uint64_t v3 = *((unsigned int *)a1 + 3);
  if (v4 >= v3)
  {
    unint64_t v7 = v4 + 1;
    BOOL v9 = (unint64_t)*a1 <= a2 && (unint64_t)&(*a1)[152 * v4] > a2;
    if (v9) {
      unint64_t v10 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(a2 - (void)*a1) >> 3);
    }
    else {
      unint64_t v10 = -1;
    }
    if (v4 == -1) {
      sub_1CD0A88F0(v7);
    }
    if (v3 == -1) {
      sub_1CD0A89A8(0xFFFFFFFFuLL);
    }
    unint64_t v11 = (2 * v3) | 1;
    if (v11 <= v7) {
      unint64_t v11 = v4 + 1;
    }
    if (v11 >= 0xFFFFFFFF) {
      uint64_t v12 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v11;
    }
    uint64_t v13 = (char *)malloc_type_malloc(152 * v12, 0x4065EBACuLL);
    if (!v13) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    uint64_t v14 = v13;
    int v15 = *a1;
    unsigned int v16 = *((_DWORD *)a1 + 2);
    if (v16)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 152 * v16;
      do
      {
        sub_1CD616DE4((uint64_t)&v14[v17], (uint64_t *)&v15[v17]);
        *(void *)(v19 + 128) = v19 + 144;
        uint64_t v20 = v19 + 128;
        *(void *)(v20 + 8) = 0x100000000;
        if (*(_DWORD *)&v15[v17 + 136]) {
          sub_1CB927804(v20, (uint64_t)&v15[v17 + 128]);
        }
        v17 += 152;
      }
      while (v18 != v17);
      int v15 = *a1;
      unsigned int v21 = *((_DWORD *)a1 + 2);
      if (v21)
      {
        uint64_t v22 = 152 * v21;
        do
        {
          uint64_t v23 = *(char **)&v15[v22 - 24];
          if (&v15[v22 - 8] != v23) {
            free(v23);
          }
          sub_1CD50E94C((uint64_t)&v15[v22 - 152]);
          v22 -= 152;
        }
        while (v22);
        int v15 = *a1;
      }
    }
    if (v15 != (char *)(a1 + 2)) {
      free(v15);
    }
    *a1 = v14;
    *((_DWORD *)a1 + 3) = v12;
    if (v9) {
      return &v14[152 * v10];
    }
  }
  return (char *)v2;
}

void sub_1CC708E98(llvm *a1)
{
  llvm::initializeTargetPassConfigPass((uint64_t)a1);
  sub_1CC6DED78((uint64_t)a1);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v2);
  llvm::initializeLazyBlockFrequencyInfoPassPass(a1, v3);
  operator new();
}

uint64_t sub_1CC708F50(uint64_t a1, uint64_t a2)
{
  uint64_t v262 = *MEMORY[0x1E4F143B8];
  if ((**(unsigned char **)(a2 + 360) & 0x10) != 0) {
    return 0;
  }
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_5:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::TargetPassConfig::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_5;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v205 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::TargetPassConfig::ID);
  BOOL v9 = (void *)(*(uint64_t (**)(void))(**(void **)(a2 + 16) + 152))(*(void *)(a2 + 16));
  uint64_t v10 = *(void *)(*(void *)a2 + 112);
  if (v10 && (*(unsigned char *)(v10 + 17) & 8) != 0) {
    int v11 = 0;
  }
  else {
    int v11 = *(_DWORD *)(*(void *)(a2 + 8) + 552);
  }
  int v12 = *(_DWORD *)(a1 + 264);
  *(_DWORD *)(a1 + 264) = v11;
  uint64_t v13 = *(uint64_t **)(a1 + 8);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (v14 == v15)
  {
LABEL_15:
    uint64_t v16 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v14 != &unk_1EA61EFE4)
    {
      v14 += 16;
      if (v14 == v15) {
        goto LABEL_15;
      }
    }
    uint64_t v16 = *(void *)(v14 + 8);
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v16 + 96))(v16, &unk_1EA61EFE4);
  uint64_t v18 = sub_1CBA02330(v17);
  if (*(_DWORD *)(a1 + 264))
  {
    uint64_t v19 = *(uint64_t **)(a1 + 8);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    if (v20 == v21)
    {
LABEL_21:
      uint64_t v22 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v20 != &llvm::ProfileSummaryInfoWrapperPass::ID)
      {
        v20 += 16;
        if (v20 == v21) {
          goto LABEL_21;
        }
      }
      uint64_t v22 = *(void *)(v20 + 8);
    }
    uint64_t v23 = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v22 + 96))(v22, &llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
    *(void *)(a1 + 256) = v23;
    if (*(void *)(v23 + 8))
    {
      uint64_t v78 = *(uint64_t **)(a1 + 8);
      uint64_t v79 = *v78;
      uint64_t v80 = v78[1];
      if (v79 == v80)
      {
LABEL_150:
        uint64_t v81 = 0;
      }
      else
      {
        while (*(char **)v79 != llvm::LazyBlockFrequencyInfoPass::ID)
        {
          v79 += 16;
          if (v79 == v80) {
            goto LABEL_150;
          }
        }
        uint64_t v81 = *(void *)(v79 + 8);
      }
      uint64_t v84 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v81 + 96))(v81, llvm::LazyBlockFrequencyInfoPass::ID);
      *(void *)(a1 + 248) = sub_1CD499004((llvm::BlockFrequencyInfo *)(v84 + 32));
    }
  }
  int v206 = v12;
  v260[0] = v261;
  v260[1] = (void *)0x600000000;
  v261[12] = 0;
  uint64_t v207 = a1;
  (*(void (**)(void *, uint64_t, uint64_t, void **, void, void))(*v9 + 32))(v9, a2, v18, v260, *(void *)(a1 + 256), *(void *)(a1 + 248));
  v219[0] = (uint64_t ***)a2;
  v219[1] = 0;
  unsigned int v24 = *(void **)(a2 + 40);
  v217[0] = 0;
  v217[1] = 0;
  int v218 = 0;
  v229[0] = (void *)a2;
  sub_1CC6EBBBC((uint64_t)v229, (uint64_t)&__src);
  int v25 = v232;
  v229[0] = v232;
  size_t size = (const void *)__src.__r_.__value_.__l.__size_;
  uint64_t v208 = a2;
  if (__src.__r_.__value_.__l.__size_ == __src.__r_.__value_.__r.__words[0])
  {
    v229[1] = v232;
    std::string::size_type v27 = __src.__r_.__value_.__l.__size_;
  }
  else
  {
    int v82 = __src.__r_.__value_.__r.__words[2];
    int v25 = malloc_type_malloc(8 * LODWORD(__src.__r_.__value_.__r.__words[2]), 0x4065EBACuLL);
    if (!v25)
    {
      if (v82) {
        goto LABEL_374;
      }
      int v25 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v25) {
        goto LABEL_374;
      }
    }
    v229[1] = v25;
    size_t size = (const void *)__src.__r_.__value_.__l.__size_;
    std::string::size_type v27 = __src.__r_.__value_.__r.__words[0];
  }
  int v28 = HIDWORD(__src.__r_.__value_.__r.__words[2]);
  LODWORD(v230) = __src.__r_.__value_.__r.__words[2];
  if (size == (const void *)v27) {
    unsigned int v29 = HIDWORD(__src.__r_.__value_.__r.__words[2]);
  }
  else {
    unsigned int v29 = __src.__r_.__value_.__r.__words[2];
  }
  if (v29)
  {
    memmove(v25, size, 8 * v29);
    int v28 = HIDWORD(__src.__r_.__value_.__r.__words[2]);
  }
  unsigned int v30 = v248;
  HIDWORD(v230) = v28;
  int v231 = v237;
  uint64_t v233 = v235;
  uint64_t v234 = 0x800000000;
  if (v248)
  {
    if (v248 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v235, v247, 16 * v248);
    LODWORD(v234) = v30;
  }
  unsigned __int8 v31 = v225;
  unsigned int v220 = v225;
  int v32 = v251;
  if (v251 != v250)
  {
    unsigned int v83 = v252;
    unsigned __int8 v31 = malloc_type_malloc(8 * v252, 0x4065EBACuLL);
    if (v31 || !v83 && (unsigned __int8 v31 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      uint64_t v221 = v31;
      uint64_t v33 = v250;
      int v32 = v251;
      goto LABEL_36;
    }
LABEL_374:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v221 = v225;
  uint64_t v33 = v251;
LABEL_36:
  unsigned int v222 = v252;
  unsigned int v34 = v253;
  if (v32 == v33) {
    unsigned int v35 = v253;
  }
  else {
    unsigned int v35 = v252;
  }
  if (v35)
  {
    memmove(v31, v32, 8 * v35);
    unsigned int v34 = v253;
  }
  unsigned int v223 = v34;
  int v224 = v254;
  unsigned int v226 = v228;
  uint64_t v227 = 0x800000000;
  uint64_t v36 = v256;
  if (v256)
  {
    if (v256 >= 9uLL) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v228, v255, 16 * v256);
    LODWORD(v227) = v36;
  }
  while (1)
  {
    if (v234 == v36)
    {
      char v37 = v226;
      if (!v36)
      {
LABEL_125:
        int v74 = 1;
        uint64_t v75 = a2;
        goto LABEL_127;
      }
      uint64_t v38 = 0;
      while (1)
      {
        long long v39 = (char *)v233 + v38;
        if (*(void *)((char *)v233 + v38) != *(void *)((char *)v226 + v38)
          || *(void *)((char *)v233 + v38 + 8) != *(void *)((char *)v226 + v38 + 8))
        {
          break;
        }
        v38 += 16;
        if (v39 + 16 == (char *)v233 + 16 * v36) {
          goto LABEL_125;
        }
      }
    }
    long long __dst = 0;
    uint64_t v41 = (void **)*((void *)v233 + 2 * v234 - 2);
    long long __dst = v41;
    v9[6] = v41;
    if (v218)
    {
      unsigned int v42 = (v218 - 1) & ((v41 >> 4) ^ (v41 >> 9));
      uint64_t v43 = (void ***)(v217[0] + 8 * v42);
      uint64_t v44 = *v43;
      if (v41 == *v43) {
        goto LABEL_69;
      }
      uint64_t v45 = 0;
      int v46 = 1;
      while (v44 != (void **)-4096)
      {
        if (v45) {
          BOOL v47 = 0;
        }
        else {
          BOOL v47 = v44 == (void **)-8192;
        }
        if (v47) {
          uint64_t v45 = v43;
        }
        unsigned int v48 = v42 + v46++;
        unsigned int v42 = v48 & (v218 - 1);
        uint64_t v43 = (void ***)(v217[0] + 8 * v42);
        uint64_t v44 = *v43;
        if (v41 == *v43) {
          goto LABEL_69;
        }
      }
      char v49 = v45 ? v45 : v43;
    }
    else
    {
      char v49 = 0;
    }
    uint64_t v50 = sub_1CBB24DE0((uint64_t)v217, (uint64_t)&__dst, (uint64_t *)&__dst, v49);
    void *v50 = __dst;
    uint64_t v41 = __dst;
LABEL_69:
    unint64_t v51 = (unint64_t)v41[6] & 0xFFFFFFFFFFFFFFF8;
    if (v41 + 6 != (void **)v51) {
      break;
    }
LABEL_121:
    LODWORD(v234) = v234 - 1;
    if (v234) {
      sub_1CB93B280((llvm::SmallPtrSetImplBase *)v229);
    }
    uint64_t v36 = v227;
  }
  if (!v51 || (*(unsigned char *)v51 & 4) == 0)
  {
    while ((*(_WORD *)(v51 + 44) & 4) != 0)
      unint64_t v51 = *(void *)v51 & 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t v52 = (unint64_t)v41[7];
  while (1)
  {
    unint64_t v53 = v51;
    unint64_t v51 = v52;
    if (v53 != v52)
    {
      unint64_t v51 = *(void *)v53 & 0xFFFFFFFFFFFFFFF8;
      if (!v51 || (*(unsigned char *)v51 & 4) == 0)
      {
        while ((*(_WORD *)(v51 + 44) & 4) != 0)
          unint64_t v51 = *(void *)v51 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    unsigned int v54 = **(unsigned __int16 **)(v53 + 16);
    if (v54 > 0x20 || ((1 << v54) & 0x100600000) == 0)
    {
      v213.__r_.__value_.__s.__data_[0] = 0;
      if (llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v53, 0, (BOOL *)&v213)
        || ((int v62 = **(unsigned __int16 **)(v53 + 16), v62 != 69) ? (v63 = v62 == 0) : (v63 = 1), v63))
      {
        uint64_t v56 = *(unsigned int *)(v53 + 40);
        if (!v56)
        {
LABEL_99:
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v53);
          goto LABEL_118;
        }
        uint64_t v57 = *(_DWORD **)(v53 + 32);
        uint64_t v58 = &v57[8 * v56];
        while (1)
        {
          if ((*v57 & 0x10000FF) == 0x1000000)
          {
            uint64_t v59 = v57[1];
            if ((v59 - 1) < 0x3FFFFFFF) {
              goto LABEL_104;
            }
            int v60 = (uint64_t *)((int)v59 < 0 ? v24[3] + 16 * (v59 & 0x7FFFFFFF) + 8 : v24[34] + 8 * v59);
            uint64_t v61 = *v60;
            if (v61) {
              break;
            }
          }
LABEL_98:
          v57 += 8;
          if (v57 == v58) {
            goto LABEL_99;
          }
        }
        while ((*(_DWORD *)v61 & 0x81000000) != 0)
        {
          uint64_t v61 = *(void *)(v61 + 24);
          if (!v61) {
            goto LABEL_98;
          }
        }
      }
LABEL_104:
      unsigned int v54 = **(unsigned __int16 **)(v53 + 16);
    }
    if (v54 - 42 <= 2)
    {
      uint64_t v64 = *(void *)(v53 + 32);
      uint64_t v65 = *(unsigned int *)(v64 + 4);
      unsigned int v66 = *(_DWORD *)(v64 + 36);
      uint64_t v67 = v24[3];
      uint64_t v68 = *(void *)(v67 + 16 * (v65 & 0x7FFFFFFF));
      if ((v68 & 4) == 0)
      {
        unint64_t v69 = v68 & 0xFFFFFFFFFFFFFFF8;
        if (v69) {
          *(void *)(v67 + 16 * (v66 & 0x7FFFFFFF)) = v69;
        }
      }
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v53);
      uint64_t v70 = (*(uint64_t (**)(void))(**(void **)(*v24 + 16) + 176))(*(void *)(*v24 + 16));
      if ((v65 & 0x80000000) != 0) {
        uint64_t v71 = (uint64_t *)(v24[3] + 16 * (v65 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v71 = (uint64_t *)(v24[34] + 8 * v65);
      }
      uint64_t v72 = *v71;
      if (*v71)
      {
        do
        {
          uint64_t v73 = *(void *)(v72 + 24);
          if (v66 - 1 <= 0x3FFFFFFE) {
            llvm::MachineOperand::substPhysReg((unsigned int *)v72, v66, v70);
          }
          else {
            llvm::MachineOperand::setReg(v72, v66);
          }
          uint64_t v72 = v73;
        }
        while (v73);
      }
      goto LABEL_118;
    }
    if (!(*(unsigned int (**)(void *, unint64_t))(*v9 + 16))(v9, v53)) {
      break;
    }
LABEL_118:
    if (v53 == v52) {
      goto LABEL_121;
    }
  }
  uint64_t v75 = a2;
  sub_1CC73B9B4(a2, v205, v219, "gisel-select", (uint64_t)"cannot select", 13, (void *)v53);
  int v74 = 0;
  char v37 = v226;
LABEL_127:
  if (v37 != v228) {
    free(v37);
  }
  if (v221 != v220) {
    free(v221);
  }
  if (v233 != v235) {
    free(v233);
  }
  if (v229[1] != v229[0]) {
    free(v229[1]);
  }
  if (v255 != &v257) {
    free(v255);
  }
  if (v251 != v250) {
    free(v251);
  }
  if (v247 != &v249) {
    free(v247);
  }
  if (__src.__r_.__value_.__l.__size_ != __src.__r_.__value_.__r.__words[0])
  {
    free((void *)__src.__r_.__value_.__l.__size_);
    if (!v74) {
      goto LABEL_146;
    }
LABEL_143:
    unsigned int v76 = (void *)(v75 + 320);
    uint64_t v77 = *(void **)(v75 + 328);
    if (v77 == (void *)(v75 + 320))
    {
LABEL_240:
      if (!byte_1EBCD9CA0)
      {
LABEL_241:
        unint64_t v130 = (void *)(*(uint64_t (**)(void))(**(void **)(v75 + 16) + 120))(*(void *)(v75 + 16));
        (*(void (**)(void))(*v130 + 1480))();
        if (byte_1EBCD9C1F >= 0) {
          uint64_t v131 = byte_1EBCD9C1F & 0x7F;
        }
        else {
          uint64_t v131 = unk_1EBCD9C10;
        }
        uint64_t v132 = *(void *)(v130[1] + 8);
        if (*(void *)(v132 + 32)) {
          strlen(*(const char **)(v132 + 32));
        }
        if (byte_1EBCD9C1F >= 0) {
          int v133 = &qword_1EBCD9C08;
        }
        else {
          int v133 = (uint64_t *)qword_1EBCD9C08;
        }
        llvm::CodeGenCoverage::emit((llvm *)v260, (uint64_t)v133, v131);
        *((_DWORD *)v24 + 108) = 0;
        uint64_t v8 = 1;
        goto LABEL_250;
      }
      unsigned int v220 = 0;
      HIBYTE(v223) = 0;
      int v224 = 7777;
      long long v137 = (void *)(*(void *)(*(void *)v75 + 40) + 216);
      v232[0] = 260;
      v229[0] = v137;
      llvm::Triple::Triple((llvm::Triple *)&__src, (const llvm::Twine *)v229);
      ArchName = llvm::Triple::getArchName((llvm::Triple *)&__src);
      if (!ArchName)
      {
        long long __dst = 0;
        size_t v215 = 0;
        int64_t v216 = 0;
        goto LABEL_266;
      }
      size_t v140 = v139;
      if (v139 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_368;
      }
      BOOL v141 = ArchName;
      if (v139 >= 0x17)
      {
        uint64_t v143 = (v139 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v139 | 7) != 0x17) {
          uint64_t v143 = v139 | 7;
        }
        uint64_t v144 = v143 + 1;
        p_dst = (void **)operator new(v143 + 1);
        size_t v215 = v140;
        int64_t v216 = v144 | 0x8000000000000000;
        long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v216) = v139;
        p_dst = (void **)&__dst;
        if (!v139) {
          goto LABEL_265;
        }
      }
      memmove(p_dst, v141, v140);
LABEL_265:
      *((unsigned char *)p_dst + v140) = 0;
LABEL_266:
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__src.__r_.__value_.__l.__data_);
      }
      int v145 = SHIBYTE(v216);
      if (v216 >= 0) {
        size_t v146 = HIBYTE(v216) & 0x7F;
      }
      else {
        size_t v146 = v215;
      }
      sub_1CB907098((uint64_t)&v212, v146 + 1);
      if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v147 = &v212;
      }
      else {
        uint64_t v147 = (std::string *)v212.__r_.__value_.__r.__words[0];
      }
      if (v146)
      {
        if (v145 >= 0) {
          unsigned int v148 = (void **)&__dst;
        }
        else {
          unsigned int v148 = __dst;
        }
        memmove(v147, v148, v146);
      }
      *(_WORD *)((char *)&v147->__r_.__value_.__l.__data_ + v146) = 32;
      uint64_t v75 = v208;
      uint64_t v149 = *(void *)(*(void *)v208 + 40);
      unint64_t v152 = *(const std::string::value_type **)(v149 + 192);
      uint64_t v150 = v149 + 192;
      int v151 = v152;
      char v153 = *(unsigned char *)(v150 + 23);
      if (v153 >= 0) {
        unint64_t v154 = (const std::string::value_type *)v150;
      }
      else {
        unint64_t v154 = v151;
      }
      std::string::size_type v155 = *(void *)(v150 + 8);
      if (v153 >= 0) {
        std::string::size_type v156 = v153 & 0x7F;
      }
      else {
        std::string::size_type v156 = v155;
      }
      int v157 = std::string::append(&v212, v154, v156);
      std::string::size_type v158 = v157->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v213.__r_.__value_.__l.__data_ = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
      v213.__r_.__value_.__r.__words[2] = v158;
      v157->__r_.__value_.__l.__size_ = 0;
      v157->__r_.__value_.__r.__words[2] = 0;
      v157->__r_.__value_.__r.__words[0] = 0;
      uint64_t v159 = std::string::append(&v213, " ");
      std::string::size_type v160 = v159->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__src.__r_.__value_.__l.__data_ = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
      __src.__r_.__value_.__r.__words[2] = v160;
      v159->__r_.__value_.__l.__size_ = 0;
      v159->__r_.__value_.__r.__words[2] = 0;
      v159->__r_.__value_.__r.__words[0] = 0;
      unsigned int v161 = *(uint64_t ****)v208;
      if ((*(unsigned char *)(*(void *)v208 + 23) & 0x10) == 0)
      {
        size_t v171 = 0;
        HIBYTE(v211) = 0;
        p_p = &__p;
        goto LABEL_301;
      }
      uint64_t v162 = ***v161;
      uint64_t v163 = *(void *)(v162 + 152);
      uint64_t v164 = *(unsigned int *)(v162 + 168);
      if (v164)
      {
        LODWORD(v165) = (v164 - 1) & ((v161 >> 4) ^ (v161 >> 9));
        uint64_t v166 = (uint64_t ****)(v163 + 16 * v165);
        uint64_t v167 = *v166;
        if (*v166 == v161) {
          goto LABEL_293;
        }
        int v168 = 1;
        while (v167 != (uint64_t ***)-4096)
        {
          int v169 = v165 + v168++;
          uint64_t v165 = v169 & (v164 - 1);
          uint64_t v167 = *(uint64_t ****)(v163 + 16 * v165);
          if (v167 == v161)
          {
            uint64_t v166 = (uint64_t ****)(v163 + 16 * v165);
            goto LABEL_293;
          }
        }
      }
      uint64_t v166 = (uint64_t ****)(v163 + 16 * v164);
LABEL_293:
      uint64_t v170 = (unint64_t *)v166[1];
      unint64_t v173 = *v170;
      uint64_t v172 = v170 + 2;
      size_t v171 = v173;
      if (v173 <= 0x7FFFFFFFFFFFFFF7)
      {
        if (v171 >= 0x17)
        {
          uint64_t v175 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v171 | 7) != 0x17) {
            uint64_t v175 = v171 | 7;
          }
          uint64_t v176 = v175 + 1;
          p_p = operator new(v175 + 1);
          std::string::size_type v210 = v171;
          int64_t v211 = v176 | 0x8000000000000000;
          std::string __p = p_p;
        }
        else
        {
          HIBYTE(v211) = v171;
          p_p = &__p;
          if (!v171)
          {
LABEL_301:
            *((unsigned char *)p_p + v171) = 0;
            if (v211 >= 0) {
              uint64_t v177 = (const std::string::value_type *)&__p;
            }
            else {
              uint64_t v177 = (const std::string::value_type *)__p;
            }
            if (v211 >= 0) {
              std::string::size_type v178 = HIBYTE(v211) & 0x7F;
            }
            else {
              std::string::size_type v178 = v210;
            }
            uint64_t v179 = std::string::append(&__src, v177, v178);
            std::string::size_type v180 = v179->__r_.__value_.__r.__words[2];
            *(_OWORD *)uint64_t v229 = *(_OWORD *)&v179->__r_.__value_.__l.__data_;
            std::string::size_type v230 = v180;
            v179->__r_.__value_.__l.__size_ = 0;
            v179->__r_.__value_.__r.__words[2] = 0;
            v179->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v211) < 0) {
              operator delete(__p);
            }
            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__src.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v213.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v212.__r_.__value_.__l.__data_);
            }
            if (llvm::RemoteBisectClient::shouldPerformBisectAction((llvm::RemoteBisectClient *)&v220, (uint64_t)v229))
            {
              if (SHIBYTE(v230) < 0) {
                operator delete(v229[0]);
              }
              if (SHIBYTE(v216) < 0) {
                operator delete(__dst);
              }
              if (SHIBYTE(v223) < 0) {
                operator delete(v220);
              }
              goto LABEL_241;
            }
            uint64_t v181 = *(uint64_t ****)v208;
            if ((*(unsigned char *)(*(void *)v208 + 23) & 0x20) == 0)
            {
              LODWORD(v196) = 0;
              uint64_t v197 = 0;
              uint64_t v134 = v207;
              int v135 = v206;
              goto LABEL_342;
            }
            uint64_t v182 = ***v181;
            __src.__r_.__value_.__r.__words[0] = *(void *)v208;
            int v183 = *(_DWORD *)(v182 + 2496);
            uint64_t v134 = v207;
            int v135 = v206;
            if (v183)
            {
              uint64_t v184 = *(void *)(v182 + 2480);
              int v185 = v183 - 1;
              unsigned int v186 = v185 & ((v181 >> 4) ^ (v181 >> 9));
              unsigned int v187 = (uint64_t ****)(v184 + 40 * v186);
              int v188 = *v187;
              if (*v187 == v181)
              {
LABEL_333:
                uint64_t v193 = *((unsigned int *)v187 + 4);
                if (v193)
                {
                  unint64_t v194 = v187[1] + 1;
                  uint64_t v195 = 16 * v193;
                  LODWORD(v196) = 0;
                  while (*((_DWORD *)v194 - 2))
                  {
                    uint64_t v197 = 0;
                    v194 += 2;
                    v195 -= 16;
                    if (!v195) {
                      goto LABEL_342;
                    }
                  }
                  uint64_t v196 = *v194;
                  if (*v194)
                  {
                    uint64_t v197 = *v194;
                    if (*(unsigned char *)v196 != 15) {
                      uint64_t v197 = *(void *)(v196 - 8 * *(unsigned int *)(v196 + 8));
                    }
                    LODWORD(v196) = *(_DWORD *)(v196 + 28);
                    goto LABEL_342;
                  }
                }
                else
                {
                  LODWORD(v196) = 0;
                }
                uint64_t v197 = 0;
LABEL_342:
                uint64_t v198 = *(void *)(v208 + 328);
                std::string::size_type v199 = **(void **)(v198 + 32);
                LODWORD(__src.__r_.__value_.__r.__words[1]) = 16;
                __src.__r_.__value_.__s.__data_[12] = 2;
                __src.__r_.__value_.__r.__words[2] = v199;
                uint64_t v237 = v197;
                int v238 = v196;
                int v239 = 0;
                uint64_t v240 = "gisel-bisect";
                uint64_t v241 = "GISelFailure";
                uint64_t v242 = 12;
                char v243 = 0;
                char v244 = 0;
                uint64_t v245 = &v247;
                uint64_t v246 = 0x400000000;
                char v257 = 0;
                int v258 = -1;
                uint64_t v259 = v198;
                __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F260B560;
                v213.__r_.__value_.__r.__words[0] = (std::string::size_type)"bisection specified fall back";
                v213.__r_.__value_.__l.__size_ = 29;
                sub_1CC59ADEC((uint64_t *)&v245, (uint64_t)&v213);
                **(void **)(v208 + 360) |= 0x10uLL;
                sub_1CC73B894(0, (llvm::Value **)v208, v205, v219, (llvm::DiagnosticInfoOptimizationBase *)&__src);
                __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2616800;
                unint64_t v200 = (void **)v245;
                if (v246)
                {
                  unint64_t v201 = (unint64_t)v246 << 6;
                  do
                  {
                    uint64_t v202 = (void **)((char *)v200 + v201);
                    if (*((char *)v200 + v201 - 17) < 0) {
                      operator delete(*(v202 - 5));
                    }
                    if (*((char *)v202 - 41) < 0) {
                      operator delete(*(v202 - 8));
                    }
                    v201 -= 64;
                  }
                  while (v201);
                  unint64_t v200 = (void **)v245;
                }
                if (v200 != &v247) {
                  free(v200);
                }
                if (SHIBYTE(v230) < 0) {
                  operator delete(v229[0]);
                }
                if (SHIBYTE(v216) < 0) {
                  operator delete(__dst);
                }
                if (SHIBYTE(v223) < 0) {
                  operator delete(v220);
                }
                uint64_t v8 = 0;
                goto LABEL_251;
              }
              uint64_t v189 = 0;
              int v190 = 1;
              while (v188 != (uint64_t ***)-4096)
              {
                if (v189) {
                  BOOL v191 = 0;
                }
                else {
                  BOOL v191 = v188 == (uint64_t ***)-8192;
                }
                if (v191) {
                  uint64_t v189 = v187;
                }
                unsigned int v192 = v186 + v190++;
                unsigned int v186 = v192 & v185;
                unsigned int v187 = (uint64_t ****)(v184 + 40 * v186);
                int v188 = *v187;
                if (*v187 == v181) {
                  goto LABEL_333;
                }
              }
              if (v189) {
                uint64_t v203 = v189;
              }
              else {
                uint64_t v203 = v187;
              }
            }
            else
            {
              uint64_t v203 = 0;
            }
            unsigned int v187 = (uint64_t ****)sub_1CC609054(v182 + 2480, (uint64_t)&__src, (uint64_t *)&__src, v203);
            std::string::size_type v204 = __src.__r_.__value_.__r.__words[0];
            v187[3] = 0;
            v187[4] = 0;
            *unsigned int v187 = (uint64_t ***)v204;
            v187[1] = (uint64_t ***)(v187 + 3);
            v187[2] = (uint64_t ***)0x100000000;
            goto LABEL_333;
          }
        }
        memmove(p_p, v172, v171);
        goto LABEL_301;
      }
LABEL_368:
      abort();
    }
    while (1)
    {
      unint64_t v89 = v77 + 6;
      unint64_t v90 = v77[6] & 0xFFFFFFFFFFFFFFF8;
      if (v77 + 6 != (void *)v90)
      {
        if (v218)
        {
          unsigned int v87 = (v218 - 1) & ((v77 >> 4) ^ (v77 >> 9));
          int v88 = *(void **)(v217[0] + 8 * v87);
          if (v77 == v88)
          {
LABEL_166:
            if (v87 != v218)
            {
              if (!v90 || (*(unsigned char *)v90 & 4) == 0)
              {
                while ((*(_WORD *)(v90 + 44) & 4) != 0)
                  unint64_t v90 = *(void *)v90 & 0xFFFFFFFFFFFFFFF8;
              }
              unint64_t v112 = v77[7];
              do
              {
                unint64_t v113 = v90;
                unint64_t v90 = v112;
                if (v113 != v112)
                {
                  unint64_t v90 = *(void *)v113 & 0xFFFFFFFFFFFFFFF8;
                  if (!v90 || (*(unsigned char *)v90 & 4) == 0)
                  {
                    while ((*(_WORD *)(v90 + 44) & 4) != 0)
                      unint64_t v90 = *(void *)v90 & 0xFFFFFFFFFFFFFFF8;
                  }
                }
                if (**(_WORD **)(v113 + 16) == 19)
                {
                  uint64_t v114 = *(void *)(v113 + 32);
                  unsigned int v115 = *(_DWORD *)(v114 + 36);
                  if ((v115 & 0x80000000) != 0)
                  {
                    int v116 = *(_DWORD *)(v114 + 4);
                    if (v116 < 0)
                    {
                      uint64_t v117 = v116 & 0x7FFFFFFF;
                      if ((*(void *)(v24[3] + 16 * (v115 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v24[3] + 16 * v117) & 0xFFFFFFFFFFFFFFF8))
                      {
                        (*(void (**)(void))(**(void **)(*v24 + 16) + 176))(*(void *)(*v24 + 16));
                        uint64_t v118 = *(void *)(v24[3] + 16 * v117 + 8);
                        if (v118)
                        {
                          do
                          {
                            uint64_t v119 = *(void *)(v118 + 24);
                            llvm::MachineOperand::setReg(v118, v115);
                            uint64_t v118 = v119;
                          }
                          while (v119);
                        }
                        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v113);
                      }
                    }
                  }
                }
              }
              while (v113 != v112);
              goto LABEL_211;
            }
          }
          else
          {
            int v85 = 1;
            while (v88 != (void *)-4096)
            {
              unsigned int v86 = v87 + v85++;
              unsigned int v87 = v86 & (v218 - 1);
              int v88 = *(void **)(v217[0] + 8 * v87);
              if (v77 == v88) {
                goto LABEL_166;
              }
            }
          }
        }
        uint64_t v91 = (void *)v77[7];
        if (v91 != v89)
        {
          do
          {
            int v92 = (void *)v91[1];
            uint64_t v93 = *(void *)(v91[3] + 32);
            if (v93)
            {
              uint64_t v94 = *(void *)(v93 + 728);
              if (v94) {
                (*(void (**)(uint64_t, void *))(*(void *)v94 + 32))(v94, v91);
              }
              uint64_t v95 = *((unsigned int *)v91 + 10);
              if (v95)
              {
                uint64_t v96 = v91[4];
                uint64_t v97 = *(void *)(v93 + 40);
                uint64_t v98 = 32 * v95;
                do
                {
                  if (!*(unsigned char *)v96)
                  {
                    uint64_t v99 = *(unsigned int *)(v96 + 4);
                    if ((v99 & 0x80000000) != 0) {
                      unint64_t v100 = (uint64_t *)(*(void *)(v97 + 24) + 16 * (v99 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      unint64_t v100 = (uint64_t *)(*(void *)(v97 + 272) + 8 * v99);
                    }
                    uint64_t v101 = *v100;
                    uint64_t v103 = *(void *)(v96 + 16);
                    uint64_t v102 = *(void *)(v96 + 24);
                    if (v96 != *v100) {
                      unint64_t v100 = (uint64_t *)(v103 + 24);
                    }
                    *unint64_t v100 = v102;
                    if (v102) {
                      uint64_t v104 = v102;
                    }
                    else {
                      uint64_t v104 = v101;
                    }
                    *(void *)(v104 + 16) = v103;
                    *(void *)(v96 + 16) = 0;
                    *(void *)(v96 + 24) = 0;
                  }
                  v96 += 32;
                  v98 -= 32;
                }
                while (v98);
              }
            }
            v91[3] = 0;
            uint64_t v105 = (unint64_t *)v91[1];
            unint64_t v106 = *v91 & 0xFFFFFFFFFFFFFFF8;
            unint64_t *v105 = v106 | *v105 & 7;
            *(void *)(v106 + 8) = v105;
            *v91 &= 7uLL;
            v91[1] = 0;
            uint64_t v107 = *(void *)(v77[5] + 32);
            uint64_t v108 = (void *)v91[4];
            if (v108)
            {
              uint64_t v109 = *((unsigned __int8 *)v91 + 47);
              BOOL v110 = (uint64_t *)(v107 + 232);
              if (*(_DWORD *)(v107 + 240) <= v109) {
                sub_1CC34BDE0(v107 + 232, v109 + 1);
              }
              uint64_t v111 = *v110;
              *uint64_t v108 = *(void *)(*v110 + 8 * v109);
              *(void *)(v111 + 8 * v109) = v108;
            }
            *uint64_t v91 = *(void *)(v107 + 224);
            *(void *)(v107 + 224) = v91;
            uint64_t v91 = v92;
          }
          while (v92 != v89);
        }
      }
LABEL_211:
      uint64_t v77 = (void *)v77[1];
      if (v77 == v76)
      {
        uint64_t v75 = v208;
        uint64_t v120 = *(void **)(v208 + 328);
        if (v120 == v76) {
          goto LABEL_240;
        }
        uint64_t v121 = *(void *)(v208 + 56);
        int v122 = *(unsigned __int8 *)(v121 + 62);
        while (1)
        {
          if (v122 && *(unsigned char *)(v208 + 354)) {
            goto LABEL_240;
          }
          for (uint64_t i = v120[7]; (void *)i != v120 + 6; uint64_t i = *(void *)(i + 8))
          {
            __int16 v124 = *(_WORD *)(i + 44);
            unint64_t v125 = *(unsigned __int16 **)(i + 16);
            uint64_t v126 = *((void *)v125 + 1);
            if ((v124 & 0xC) != 0 && (v124 & 4) == 0)
            {
              uint64_t v128 = i;
              if ((v126 & 0x80) != 0)
              {
LABEL_228:
                if ((v126 & 0x20) == 0)
                {
                  uint64_t v129 = i;
                  while ((*(_WORD *)(v129 + 44) & 8) != 0)
                  {
                    uint64_t v129 = *(void *)(v129 + 8);
                    if ((*(unsigned char *)(*(void *)(v129 + 16) + 8) & 0x20) != 0) {
                      goto LABEL_232;
                    }
                  }
                  goto LABEL_223;
                }
              }
              else
              {
                while ((*(_WORD *)(v128 + 44) & 8) != 0)
                {
                  uint64_t v128 = *(void *)(v128 + 8);
                  if ((*(unsigned char *)(*(void *)(v128 + 16) + 8) & 0x80) != 0) {
                    goto LABEL_228;
                  }
                }
              }
            }
            else if ((*((void *)v125 + 1) & 0xA0) == 0x80)
            {
              goto LABEL_223;
            }
LABEL_232:
            if (*v125 - 1 > 1) {
              goto LABEL_233;
            }
            if ((*(unsigned char *)(*(void *)(i + 32) + 48) & 2) == 0)
            {
LABEL_224:
              *(unsigned char *)(v208 + 354) = 1;
              goto LABEL_233;
            }
LABEL_223:
            int v122 = 1;
            *(unsigned char *)(v121 + 62) = 1;
            if (*v125 - 1 <= 1) {
              goto LABEL_224;
            }
LABEL_233:
            if ((v124 & 8) != 0 && (*(void *)i & 4) == 0)
            {
              do
                uint64_t i = *(void *)(i + 8);
              while ((*(_WORD *)(i + 44) & 8) != 0);
            }
          }
          uint64_t v120 = (void *)v120[1];
          if (v120 == v76) {
            goto LABEL_240;
          }
        }
      }
    }
  }
  if (v74) {
    goto LABEL_143;
  }
LABEL_146:
  uint64_t v8 = 0;
LABEL_250:
  uint64_t v134 = v207;
  int v135 = v206;
LABEL_251:
  MEMORY[0x1D25D9CD0](v217[0], 8);
  if (v260[0] != v261) {
    free(v260[0]);
  }
  *(_DWORD *)(v134 + 264) = v135;
  return v8;
}

const char *sub_1CC70A464()
{
  return "InstructionSelect";
}

double sub_1CC70A474@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 97;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

double sub_1CC70A49C@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 128;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

uint64_t sub_1CC70A4C4()
{
  qword_1EBCD9C08 = 0;
  unk_1EBCD9C10 = 0;
  unk_1EBCD9C18 = 0;
  __cxa_atexit(MEMORY[0x1E4FBA210], &qword_1EBCD9C08, &dword_1CB82C000);
  *(void *)&long long v3 = "Enable remote bisection in GlobalISel after isel";
  *((void *)&v3 + 1) = 48;
  char v1 = 0;
  unint64_t v2 = &v1;
  sub_1CD3F48AC((uint64_t)&unk_1EBCD9C20, "gisel-bisect-selection", &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD9C20, &dword_1CB82C000);
}

uint64_t sub_1CC70A570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)a2) {
    return 0;
  }
  uint64_t result = *(unsigned int *)(a2 + 4);
  if (!result) {
    return result;
  }
  sub_1CC73C44C(result, a4, 1, (uint64_t)&v8);
  if (!v10) {
    return 0;
  }
  if (v9 > 0x40)
  {
    uint64_t v7 = *v8;
    MEMORY[0x1D25D9CB0]();
    uint64_t v6 = v7;
  }
  else
  {
    uint64_t v6 = (uint64_t)((void)v8 << -(uint64_t)v9) >> -(uint64_t)v9;
  }
  return v6 == a3;
}

BOOL sub_1CC70A610(int a1, llvm::MachineInstr *this, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *(void *)(a3 + 24);
  if (v3 == v4 && *((void *)this + 1) == a3) {
    return 1;
  }
  uint64_t v7 = (unsigned __int16 *)*((void *)this + 2);
  if (*v7 - 1 > 1 || (*(unsigned char *)(*((void *)this + 4) + 48) & 0x20) == 0)
  {
    if ((*((_WORD *)this + 22) & 0xC) != 0 && (*((_WORD *)this + 22) & 4) == 0)
    {
      if (!llvm::MachineInstr::hasPropertyInBundle((uint64_t)this, 0x1000000000, 1)) {
        goto LABEL_11;
      }
      uint64_t v3 = *((void *)this + 3);
      uint64_t v4 = *(void *)(a3 + 24);
    }
    else if ((v7[6] & 0x10) == 0)
    {
      goto LABEL_11;
    }
  }
  if (v3 != v4) {
    return 0;
  }
LABEL_11:
  uint64_t v9 = *((void *)this + 2);
  unsigned __int16 v10 = *(_WORD *)v9 - 1;
  if (v10 <= 1u && (*(unsigned char *)(*((void *)this + 4) + 48) & 8) != 0) {
    return 0;
  }
  __int16 v11 = *((_WORD *)this + 22);
  if ((v11 & 0xC) != 0 && (v11 & 4) == 0)
  {
    if (llvm::MachineInstr::hasPropertyInBundle((uint64_t)this, 0x80000, 1)) {
      return 0;
    }
    uint64_t v9 = *((void *)this + 2);
    unsigned __int16 v10 = *(_WORD *)v9 - 1;
  }
  else if ((*(unsigned char *)(v9 + 10) & 8) != 0)
  {
    return 0;
  }
  if (v10 <= 1u && (*(unsigned char *)(*((void *)this + 4) + 48) & 0x10) != 0) {
    return 0;
  }
  __int16 v12 = *((_WORD *)this + 22);
  int v13 = v12 & 0xC;
  if ((v12 & 0xC) != 0 && (v12 & 4) == 0)
  {
    if (llvm::MachineInstr::hasPropertyInBundle((uint64_t)this, 0x100000, 1)) {
      return 0;
    }
    __int16 v12 = *((_WORD *)this + 22);
    int v13 = v12 & 0xC;
  }
  else if ((*(unsigned char *)(v9 + 10) & 0x10) != 0)
  {
    return 0;
  }
  if (!v13 || (v12 & 4) != 0)
  {
    if ((*(unsigned char *)(*((void *)this + 2) + 10) & 0x20) == 0) {
      goto LABEL_22;
    }
LABEL_45:
    if ((v12 & 0x4000) == 0) {
      return 0;
    }
    goto LABEL_22;
  }
  BOOL hasPropertyInBundle = llvm::MachineInstr::hasPropertyInBundle((uint64_t)this, 0x200000, 1);
  __int16 v12 = *((_WORD *)this + 22);
  if (hasPropertyInBundle) {
    goto LABEL_45;
  }
LABEL_22:
  uint64_t v14 = (unsigned __int16 *)*((void *)this + 2);
  uint64_t v15 = *((void *)v14 + 1);
  if ((v12 & 0xC) != 0 && (v12 & 4) == 0)
  {
    if ((v15 & 0x1000000) != 0) {
      return 0;
    }
    uint64_t v18 = this;
    BOOL result = 0;
    while ((*((_WORD *)v18 + 22) & 8) != 0)
    {
      uint64_t v18 = (llvm::MachineInstr *)*((void *)v18 + 1);
      if (*(unsigned char *)(*((void *)v18 + 2) + 11)) {
        return result;
      }
    }
LABEL_25:
    if (*v14 - 1 > 1 || (*(unsigned char *)(*((void *)this + 4) + 48) & 1) == 0) {
      return llvm::MachineInstr::getNumExplicitOperands((uint64_t)this) == *((_DWORD *)this + 10);
    }
    return 0;
  }
  if ((v15 & 0x1000000) == 0) {
    goto LABEL_25;
  }
  return 0;
}

void sub_1CC70A830(int a1@<W0>, const void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v16[4] = *MEMORY[0x1E4F143B8];
  std::string __src = v16;
  uint64_t v15 = 0x400000000;
  size_t v6 = 8 * a3;
  if ((unint64_t)(8 * a3) >= 0x21 && a3) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v6 >= 0x21) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v7 = 0;
  if (a3)
  {
    memcpy(__src, a2, v6);
    int v7 = v15;
  }
  uint64_t v8 = v7 + (v6 >> 3);
  LODWORD(v15) = v8;
  if (v8)
  {
    if (v8 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v12, __src, 8 * v8);
    int v13 = a1;
    uint64_t v9 = operator new(0x40uLL);
    void *v9 = &unk_1F261C1B0;
    v9[1] = v9 + 3;
    v9[2] = 0x400000000;
    unsigned __int16 v10 = v9;
    memcpy(v9 + 3, v12, 8 * v8);
    __int16 v11 = v10;
    v10[4] = v8;
    a1 = v13;
  }
  else
  {
    int v13 = a1;
    __int16 v11 = operator new(0x40uLL);
    *__int16 v11 = &unk_1F261C1B0;
    v11[1] = v11 + 3;
    void v11[2] = 0x400000000;
  }
  *((_DWORD *)v11 + 14) = a1;
  *(void *)(a4 + 24) = v11;
  if (__src != v16) {
    free(__src);
  }
}

uint64_t sub_1CC70AAB8(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v5)
      {
        uint64_t v9 = *(unsigned int *)(a1 + 8);
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
        uint64_t v6 = v9;
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v7 = *(unsigned int *)(a2 + 8);
      if (v6 != v7) {
        memcpy((void *)(*(void *)a1 + 8 * v6), (const void *)(*(void *)a2 + 8 * v6), *(void *)a2 + 8 * v7 - (*(void *)a2 + 8 * v6));
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void *sub_1CC70AB94(void *a1)
{
  *a1 = &unk_1F261C1B0;
  unint64_t v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CC70ABE8(void *a1)
{
  *a1 = &unk_1F261C1B0;
  unint64_t v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CC70AC5C(uint64_t a1)
{
  unint64_t v2 = operator new(0x40uLL);
  uint64_t v3 = v2;
  *unint64_t v2 = &unk_1F261C1B0;
  v2[1] = v2 + 3;
  v2[2] = 0x400000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 8 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

const void **sub_1CC70AD24(const void **result, const void **a2)
{
  uint64_t v3 = result;
  *a2 = &unk_1F261C1B0;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x400000000;
  unsigned int v4 = *((_DWORD *)result + 4);
  if (v4) {
    BOOL v5 = a2 == result;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    BOOL result = (const void **)memcpy(a2 + 3, result[1], 8 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v4;
  }
  *((_DWORD *)a2 + 14) = *((_DWORD *)v3 + 14);
  return result;
}

void sub_1CC70ADE0(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CC70ADFC(void *__p)
{
  unint64_t v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

BOOL sub_1CC70AE44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    BOOL v5 = *(void **)(a1 + 8);
    while (*v5 != *(void *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 56)))
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        BOOL v5 = (void *)(v2 + 8 * v3);
        return v3 != ((uint64_t)v5 - v2) >> 3;
      }
    }
  }
  else
  {
    BOOL v5 = *(void **)(a1 + 8);
  }
  return v3 != ((uint64_t)v5 - v2) >> 3;
}

uint64_t sub_1CC70AE9C(uint64_t a1, const void **a2)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v3 = a2;
    BOOL v5 = a2 + 2;
    uint64_t v4 = (const void **)*a2;
    if (v4 == v5)
    {
      uint64_t v7 = v3 + 1;
      unsigned int v9 = *((_DWORD *)v3 + 2);
      uint64_t v10 = *(unsigned int *)(a1 + 8);
      unsigned int v15 = v9;
      uint64_t v16 = v3;
      if (v10 >= v9)
      {
        if (v9) {
          memmove(*(void **)a1, v4, 8 * v9);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v9)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v10)
        {
          uint64_t v14 = *(unsigned int *)(a1 + 8);
          memmove(*(void **)a1, v4, 8 * v10);
          uint64_t v11 = v14;
        }
        else
        {
          uint64_t v11 = 0;
        }
        uint64_t v12 = *v7;
        if (v11 != v12) {
          memcpy((void *)(*(void *)a1 + 8 * v11), (char *)*v16 + 8 * v11, (unsigned char *)*v16 + 8 * v12 - ((unsigned char *)*v16 + 8 * v11));
        }
      }
      *(_DWORD *)(a1 + 8) = v15;
    }
    else
    {
      uint64_t v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        uint64_t v17 = v3;
        int v13 = v5;
        free(v6);
        BOOL v5 = v13;
        uint64_t v3 = v17;
        uint64_t v4 = (const void **)*v17;
      }
      *(void *)a1 = v4;
      uint64_t v7 = v3 + 1;
      *(void *)(a1 + 8) = v3[1];
      *uint64_t v3 = v5;
      *((_DWORD *)v3 + 3) = 0;
    }
    *uint64_t v7 = 0;
  }
  return a1;
}

uint64_t sub_1CC70AFE8(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(unsigned int *)(a2 + 8);
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if (v3)
      {
        uint64_t v7 = *(void **)a2;
        uint64_t v8 = *(void *)a2 + 16 * v3;
        unsigned int v9 = *(void **)a1;
        do
        {
          void *v9 = *v7;
          v9[1] = v7[1];
          v7 += 2;
          v9 += 2;
        }
        while (v7 != (void *)v8);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v3)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v4)
      {
        uint64_t v10 = *(void **)a2;
        uint64_t v11 = *(void *)a2 + 16 * v4;
        uint64_t v12 = *(void **)a1;
        do
        {
          *uint64_t v12 = *v10;
          v12[1] = v10[1];
          v10 += 2;
          v12 += 2;
        }
        while (v10 != (void *)v11);
      }
      else
      {
        uint64_t v4 = 0;
      }
      uint64_t v5 = *(unsigned int *)(a2 + 8);
      if (v4 != v5) {
        memcpy((void *)(*(void *)a1 + 16 * v4), (const void *)(*(void *)a2 + 16 * v4), *(void *)a2 + 16 * v5 - (*(void *)a2 + 16 * v4));
      }
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
  return a1;
}

void *sub_1CC70B100(void *a1)
{
  *a1 = &unk_1F261C1F8;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

void sub_1CC70B154(void *a1)
{
  *a1 = &unk_1F261C1F8;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CC70B1C8(uint64_t a1)
{
  uint64_t v2 = operator new(0x60uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = &unk_1F261C1F8;
  v2[1] = v3;
  v2[2] = v2 + 4;
  v2[3] = 0x400000000;
  if (*(_DWORD *)(a1 + 24)) {
    sub_1CC70AFE8((uint64_t)(v2 + 2), a1 + 16);
  }
  return v2;
}

uint64_t sub_1CC70B23C(uint64_t result, void *a2)
{
  *a2 = &unk_1F261C1F8;
  uint64_t v2 = *(void *)(result + 8);
  a2[2] = a2 + 4;
  uint64_t v3 = (uint64_t)(a2 + 2);
  *(void *)(v3 - 8) = v2;
  *(void *)(v3 + 8) = 0x400000000;
  if (*(_DWORD *)(result + 24)) {
    return sub_1CC70AFE8(v3, result + 16);
  }
  return result;
}

void sub_1CC70B290(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2 != (void *)(a1 + 32)) {
    free(v2);
  }
}

void sub_1CC70B2AC(void *__p)
{
  uint64_t v2 = (void *)__p[2];
  if (v2 != __p + 4) {
    free(v2);
  }

  operator delete(__p);
}

BOOL sub_1CC70B2F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(unsigned int *)(a1 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(void *)(v4 + 8 * *(unsigned int *)(a1 + 8));
    uint64_t v6 = *(void *)(v4 + 8 * *(unsigned int *)(a1 + 12));
    uint64_t v7 = 16 * v3;
    uint64_t v8 = *(void **)(a1 + 16);
    while (*v8 != v5 || v8[1] != v6)
    {
      v8 += 2;
      v7 -= 16;
      if (!v7)
      {
        uint64_t v8 = (void *)(v2 + 16 * v3);
        return v3 != ((uint64_t)v8 - v2) >> 4;
      }
    }
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 16);
  }
  return v3 != ((uint64_t)v8 - v2) >> 4;
}

void *sub_1CC70B354(void *a1)
{
  *a1 = &unk_1F261C240;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

void sub_1CC70B3A8(void *a1)
{
  *a1 = &unk_1F261C240;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

_DWORD *sub_1CC70B41C(uint64_t a1)
{
  uint64_t v2 = operator new(0x40uLL);
  uint64_t v3 = v2;
  *(void *)uint64_t v2 = &unk_1F261C240;
  v2[2] = *(_DWORD *)(a1 + 8);
  *((void *)v2 + 2) = v2 + 8;
  *((void *)v2 + 3) = 0x400000000;
  unsigned int v4 = *(_DWORD *)(a1 + 24);
  if (v4) {
    BOOL v5 = v2 == (_DWORD *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 8, *(const void **)(a1 + 16), 8 * *(unsigned int *)(a1 + 24));
    v3[6] = v4;
  }
  return v3;
}

const void **sub_1CC70B4E4(const void **result, const void **a2)
{
  *a2 = &unk_1F261C240;
  *((_DWORD *)a2 + 2) = *((_DWORD *)result + 2);
  a2[2] = a2 + 4;
  a2[3] = (const void *)0x400000000;
  unsigned int v2 = *((_DWORD *)result + 6);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    BOOL result = (const void **)memcpy(a2 + 4, result[2], 8 * *((unsigned int *)result + 6));
    *((_DWORD *)a2 + 6) = v2;
  }
  return result;
}

void sub_1CC70B5A0(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 16);
  if (v2 != (void *)(a1 + 32)) {
    free(v2);
  }
}

void sub_1CC70B5BC(void *__p)
{
  unsigned int v2 = (void *)__p[2];
  if (v2 != __p + 4) {
    free(v2);
  }

  operator delete(__p);
}

BOOL sub_1CC70B604(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  if ((v2 & 0xFFFFFFFFFFFFFFF9) == 0
    || (*(void *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8)) & 4) == 0)
  {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(unsigned int *)(a1 + 24);
  char v7 = 3;
  if ((v2 & 1) == 0) {
    char v7 = 19;
  }
  unint64_t v8 = v2 >> v7;
  if ((v2 & 2) != 0) {
    unint64_t v9 = (v2 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v8) | 2;
  }
  else {
    unint64_t v9 = v2 & 0x8000000000000000 | (8 * v8) | 1;
  }
  if (v6)
  {
    uint64_t v10 = 8 * v6;
    uint64_t v11 = *(void **)(a1 + 16);
    while (*v11 != v9)
    {
      ++v11;
      v10 -= 8;
      if (!v10)
      {
        uint64_t v11 = (void *)(v5 + 8 * v6);
        return v6 != ((uint64_t)v11 - v5) >> 3;
      }
    }
  }
  else
  {
    uint64_t v11 = *(void **)(a1 + 16);
  }
  return v6 != ((uint64_t)v11 - v5) >> 3;
}

void sub_1CC70B6B4()
{
}

_DWORD *sub_1CC70B6C8(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  *(void *)BOOL result = &unk_1F261C288;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CC70B714(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F261C288;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1CC70B744(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8)) & 1;
}

void sub_1CC70B75C()
{
}

_DWORD *sub_1CC70B770(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  *(void *)BOOL result = &unk_1F261C2D0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CC70B7BC(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F261C2D0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1CC70B7EC(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  BOOL v3 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  uint64_t v4 = (v2 >> 2) & 1;
  if (v3) {
    return 0;
  }
  else {
    return v4;
  }
}

void sub_1CC70B80C()
{
}

void *sub_1CC70B820(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F261C318;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC70B868(uint64_t result, void *a2)
{
  *a2 = &unk_1F261C318;
  a2[1] = *(void *)(result + 8);
  return result;
}

BOOL sub_1CC70B898(uint64_t a1, uint64_t a2)
{
  unint64_t v7 = *(void *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  if ((v7 & 1) == 0) {
    return 0;
  }
  unint64_t v4 = sub_1CB8F1DC4(&v7);
  if (v5 == 1)
  {
    unint64_t v6 = v4;
    unint64_t v4 = v6;
  }
  return v4 < *(unsigned int *)(a1 + 12);
}

void sub_1CC70B918()
{
}

void *sub_1CC70B92C(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F261C360;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC70B974(uint64_t result, void *a2)
{
  *a2 = &unk_1F261C360;
  a2[1] = *(void *)(result + 8);
  return result;
}

BOOL sub_1CC70B9A4(uint64_t a1, uint64_t a2)
{
  unint64_t v7 = *(void *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  if ((v7 & 1) == 0) {
    return 0;
  }
  unint64_t v4 = sub_1CB8F1DC4(&v7);
  if (v5 == 1)
  {
    unint64_t v6 = v4;
    unint64_t v4 = v6;
  }
  return v4 > *(unsigned int *)(a1 + 12);
}

void sub_1CC70BA24()
{
}

void *sub_1CC70BA38(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F261C3A8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC70BA80(uint64_t result, void *a2)
{
  *a2 = &unk_1F261C3A8;
  a2[1] = *(void *)(result + 8);
  return result;
}

BOOL sub_1CC70BAB0(uint64_t a1, uint64_t a2)
{
  unint64_t v7 = *(void *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  unint64_t v3 = sub_1CB8F1DC4(&v7);
  if (v4 == 1)
  {
    unint64_t v6 = v3;
    unint64_t v3 = v6;
  }
  return v3 < *(unsigned int *)(a1 + 12);
}

void sub_1CC70BB24()
{
}

void *sub_1CC70BB38(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F261C3F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC70BB80(uint64_t result, void *a2)
{
  *a2 = &unk_1F261C3F0;
  a2[1] = *(void *)(result + 8);
  return result;
}

BOOL sub_1CC70BBB0(uint64_t a1, uint64_t a2)
{
  unint64_t v7 = *(void *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  unint64_t v3 = sub_1CB8F1DC4(&v7);
  if (v4 == 1)
  {
    unint64_t v6 = v3;
    unint64_t v3 = v6;
  }
  return v3 > *(unsigned int *)(a1 + 12);
}

void sub_1CC70BC24()
{
}

void *sub_1CC70BC38(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F261C438;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC70BC80(uint64_t result, void *a2)
{
  *a2 = &unk_1F261C438;
  a2[1] = *(void *)(result + 8);
  return result;
}

BOOL sub_1CC70BCB0(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  unsigned int v3 = (unsigned __int16)(v2 >> 3);
  unsigned int v4 = (unsigned __int16)(v2 >> 19);
  if ((v2 & 2) == 0) {
    unsigned int v4 = v2 >> 19;
  }
  if ((v2 & 4) != 0) {
    unsigned int v3 = v4;
  }
  if (v2) {
    unsigned int v5 = v2 >> 3;
  }
  else {
    unsigned int v5 = v3;
  }
  return *(_DWORD *)(a1 + 12) > v5;
}

void sub_1CC70BCF4()
{
}

void *sub_1CC70BD08(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F261C480;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC70BD50(uint64_t result, void *a2)
{
  *a2 = &unk_1F261C480;
  a2[1] = *(void *)(result + 8);
  return result;
}

BOOL sub_1CC70BD80(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  unsigned int v3 = (unsigned __int16)(v2 >> 3);
  unsigned int v4 = (unsigned __int16)(v2 >> 19);
  if ((v2 & 2) == 0) {
    unsigned int v4 = v2 >> 19;
  }
  if ((v2 & 4) != 0) {
    unsigned int v3 = v4;
  }
  if (v2) {
    unsigned int v5 = v2 >> 3;
  }
  else {
    unsigned int v5 = v3;
  }
  return *(_DWORD *)(a1 + 12) < v5;
}

void sub_1CC70BDC4()
{
}

_DWORD *sub_1CC70BDD8(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  *(void *)BOOL result = &unk_1F261C4C8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CC70BE24(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F261C4C8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1CC70BE54(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  int v3 = (unsigned __int16)(v2 >> 3);
  int v4 = (unsigned __int16)(v2 >> 19);
  if ((v2 & 2) == 0) {
    int v4 = v2 >> 19;
  }
  if ((v2 & 4) != 0) {
    int v3 = v4;
  }
  if (v2) {
    int v5 = v2 >> 3;
  }
  else {
    int v5 = v3;
  }
  return !v5 || (v5 & (v5 - 1)) != 0;
}

void sub_1CC70BEA8()
{
}

_DWORD *sub_1CC70BEBC(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  *(void *)BOOL result = &unk_1F261C510;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CC70BF08(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F261C510;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1CC70BF38(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = *(void *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  if ((v6 & 1) == 0) {
    return 0;
  }
  int v3 = sub_1CB8F1DC4(&v6);
  if (v4 == 1)
  {
    int v5 = v3;
    int v3 = v5;
  }
  return !v3 || (v3 & (v3 - 1)) != 0;
}

void sub_1CC70BFB8()
{
}

void *sub_1CC70BFCC(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F261C558;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC70C014(uint64_t result, void *a2)
{
  *a2 = &unk_1F261C558;
  a2[1] = *(void *)(result + 8);
  return result;
}

BOOL sub_1CC70C044(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CB8F1DC4((unint64_t *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8)));
  int v6 = v5;
  return v4 == sub_1CB8F1DC4((unint64_t *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 12))) && v6 == v7;
}

void sub_1CC70C0A8()
{
}

_DWORD *sub_1CC70C0BC(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  *(void *)BOOL result = &unk_1F261C5A0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CC70C108(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F261C5A0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1CC70C138(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = sub_1CB8F1DC4((unint64_t *)(*(void *)(a2 + 24) + 24 * *(unsigned int *)(a1 + 8))) + 7;
  if (v2 == 1)
  {
    unint64_t v6 = v3;
    unint64_t v3 = v6;
  }
  unint64_t v4 = v3 >> 3;
  return !v4 || (v4 & (v4 - 1)) != 0;
}

void sub_1CC70C1AC()
{
}

_DWORD *sub_1CC70C1C0(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  *(void *)BOOL result = &unk_1F261C5E8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CC70C20C(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F261C5E8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1CC70C23C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  if ((v2 & 0xFFFFFFFFFFFFFFF9) == 0
    || (*(void *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8)) & 4) == 0)
  {
    return 0;
  }
  uint64_t v5 = 0x800000000000000;
  if ((v2 & 2) == 0) {
    uint64_t v5 = 0x8000000000000;
  }
  if ((v5 & v2) != 0) {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  }
  return !(unsigned __int16)(v2 >> 3)
      || ((unsigned __int16)(v2 >> 3) & ((unsigned __int16)(v2 >> 3) - 1)) != 0;
}

void sub_1CC70C2C4()
{
}

void *sub_1CC70C2D8(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F261C630;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC70C320(uint64_t result, void *a2)
{
  *a2 = &unk_1F261C630;
  a2[1] = *(void *)(result + 8);
  return result;
}

BOOL sub_1CC70C350(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(v3 + 8 * v2);
  if ((v4 & 0xFFFFFFFFFFFFFFF9) == 0 || (*(void *)(v3 + 8 * v2) & 4) == 0) {
    return 0;
  }
  uint64_t v8 = 0x800000000000000;
  if ((v4 & 2) == 0) {
    uint64_t v8 = 0x8000000000000;
  }
  if ((v8 & v4) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    uint64_t v4 = *(void *)(v3 + 8 * v2);
  }
  return (unsigned __int16)(v4 >> 3) % *(_DWORD *)(a1 + 12) != 0;
}

void sub_1CC70C3E4()
{
}

__n128 sub_1CC70C3F8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F261C678;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC70C444(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F261C678;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CC70C474(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_1CC70C488()
{
}

__n128 sub_1CC70C49C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F261C6C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC70C4E8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F261C6C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CC70C518(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  sub_1CD6133A0(&v4, *(void *)(a1 + 16));
  return *(unsigned int *)(a1 + 8);
}

void sub_1CC70C568()
{
}

void *sub_1CC70C57C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F261C708;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC70C5C4(uint64_t result, void *a2)
{
  *a2 = &unk_1F261C708;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t sub_1CC70C5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  unint64_t v10 = *(void *)(v3 + 8 * *(unsigned int *)(a1 + 8));
  unint64_t v5 = *(void *)(v3 + 8 * v4);
  uint64_t v6 = (unsigned __int16)(v5 >> 3);
  uint64_t v7 = (unsigned __int16)(v5 >> 19);
  if ((v5 & 2) == 0) {
    uint64_t v7 = (v5 >> 19);
  }
  if ((v5 & 4) != 0) {
    uint64_t v6 = v7;
  }
  if (v5) {
    uint64_t v8 = (v5 >> 3);
  }
  else {
    uint64_t v8 = v6;
  }
  sub_1CD6133A0(&v10, (8 * v8) | 1);
  return *(unsigned int *)(a1 + 8);
}

void sub_1CC70C674()
{
}

void *sub_1CC70C688(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F261C750;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC70C6D0(uint64_t result, void *a2)
{
  *a2 = &unk_1F261C750;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t sub_1CC70C700(uint64_t a1, uint64_t a2)
{
  sub_1CB8F1DC4((unint64_t *)(*(void *)(a2 + 24) + 24 * *(unsigned int *)(a1 + 8)));
  if (v3 == 1) {
  return *(unsigned int *)(a1 + 12);
  }
}

void sub_1CC70C770()
{
}

void *sub_1CC70C784(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F261C798;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC70C7CC(uint64_t result, void *a2)
{
  *a2 = &unk_1F261C798;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t sub_1CC70C7FC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_1CC70C8AC()
{
}

void *sub_1CC70C8C0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F261C7E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC70C908(uint64_t result, void *a2)
{
  *a2 = &unk_1F261C7E0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t sub_1CC70C938(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  uint64_t v4 = 0x800000000000000;
  if ((v3 & 2) == 0) {
    uint64_t v4 = 0x8000000000000;
  }
  if ((v4 & v3) != 0) {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  }
  unsigned int v5 = *(_DWORD *)(a1 + 12);
  char v6 = 3;
  if ((v3 & 1) == 0) {
    char v6 = 19;
  }
  unint64_t v7 = v3 & 0x8000000000000000 | (8 * (v3 >> v6)) | 1;
  char v8 = 35;
  char v9 = 19;
  if ((v3 & 4) == 0) {
    char v8 = 19;
  }
  unint64_t v10 = v3 >> v8;
  if ((v3 & 4) == 0) {
    char v9 = 3;
  }
  if (v3) {
    char v9 = 3;
  }
  unint64_t v11 = (8 * (unsigned __int16)(v3 >> v9)) & 0xFFFFF8000007FFFFLL | ((v10 & 0xFFFFFF) << 19);
  if ((v3 & 2) != 0) {
    unint64_t v12 = v11 | 2;
  }
  else {
    unint64_t v12 = v7;
  }
  unsigned int v13 = 1 << -(char)__clz((unsigned __int16)(v3 >> 3) - 1);
  if (v13 <= v5) {
    uint64_t v14 = v5;
  }
  else {
    uint64_t v14 = v13;
  }
  sub_1CBA5A95C(v14, v12);
  return *(unsigned int *)(a1 + 8);
}

void sub_1CC70CA18()
{
}

void *sub_1CC70CA2C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F261C828;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC70CA74(uint64_t result, void *a2)
{
  *a2 = &unk_1F261C828;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t sub_1CC70CAA4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_1CC70CB18()
{
}

void *sub_1CC70CB2C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F261C870;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC70CB74(uint64_t result, void *a2)
{
  *a2 = &unk_1F261C870;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t sub_1CC70CBA4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_1CC70CC10()
{
}

_DWORD *sub_1CC70CC24(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F261C8B8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CC70CC70(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F261C8B8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1CC70CCA0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_1CC70CD0C(uint64_t a1)
{
}

uint64_t sub_1CC70CDB4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v741 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(unsigned int *)(a3 + 8);
  if (v8)
  {
    long long v515 = *(llvm::MachineInstr ***)a3;
    uint64_t v516 = 8 * v8;
    do
    {
      uint64_t v517 = *v515++;
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)a4 + 40))(a4, v517);
      llvm::MachineInstr::eraseFromParent(v517);
      v516 -= 8;
    }
    while (v516);
    uint64_t v5 = a3;
    *(_DWORD *)(a3 + 8) = 0;
  }
  uint64_t v9 = 0;
  v725 = v727;
  uint64_t v726 = 0x400000000;
  switch(**(_WORD **)(a2 + 16))
  {
    case 'v':
      uint64_t v133 = *a1;
      *(void *)(v133 + 40) = *(void *)(a2 + 24);
      *(void *)(v133 + 48) = a2;
      uint64_t v134 = (unsigned __int8 **)(a2 + 56);
      int v135 = (uint64_t *)(v133 + 32);
      if (a2 + 56 == v133 + 32) {
        goto LABEL_157;
      }
      uint64_t v136 = (unsigned __int8 *)*v135;
      if (!*v135) {
        goto LABEL_155;
      }
      int v256 = *v136;
      if ((v256 - 4) > 0x1E)
      {
        if ((v256 - 3) >= 0xFFFFFFFE) {
          uint64_t v264 = *v135;
        }
        else {
          uint64_t v264 = 0;
        }
        if ((v256 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v258 = v264 + 8;
LABEL_384:
          v735 = v135;
          sub_1CC5FA668(v258 + 16, &v735);
          goto LABEL_155;
        }
        if (v256 == 3) {
          *((void *)v136 + 1) = 0;
        }
      }
      else if ((v136[1] & 0x7F) == 2 || *((_DWORD *)v136 + 3))
      {
        uint64_t v257 = *((void *)v136 + 2);
        if ((v257 & 4) != 0)
        {
          unint64_t v258 = v257 & 0xFFFFFFFFFFFFFFF8;
          if (v258) {
            goto LABEL_384;
          }
        }
      }
LABEL_155:
      long long v137 = *v134;
      *int v135 = (uint64_t)*v134;
      if (v137) {
        llvm::MetadataTracking::track((uint64_t)v135, v137, 2);
      }
LABEL_157:
      uint64_t v138 = *(void *)(a2 + 32);
      unsigned int v139 = *(_DWORD *)(v138 + 4);
      uint64_t v140 = *(unsigned int *)(v138 + 36);
      uint64_t v141 = a1[1];
      do
      {
        uint64_t v142 = v140;
        if ((v140 & 0x80000000) != 0) {
          uint64_t v143 = (uint64_t *)(*(void *)(v141 + 24) + 16 * (v140 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v143 = (uint64_t *)(*(void *)(v141 + 272) + 8 * v140);
        }
        uint64_t v144 = *v143;
        if (!v144) {
          break;
        }
        if ((*(unsigned char *)(v144 + 3) & 1) == 0)
        {
          uint64_t v144 = *(void *)(v144 + 24);
          if (!v144 || (*(unsigned char *)(v144 + 3) & 1) == 0) {
            break;
          }
        }
        uint64_t v145 = *(void *)(v144 + 8);
        if (!v145) {
          break;
        }
        if (**(_WORD **)(v145 + 16) != 19) {
          break;
        }
        if (*(_DWORD *)(v145 + 40) != 2) {
          break;
        }
        uint64_t v140 = *(unsigned int *)(*(void *)(v145 + 32) + 36);
        if ((v140 & 0x80000000) == 0) {
          break;
        }
      }
      while ((v140 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v141 + 432)
           && (*(void *)(*(void *)(v141 + 424) + 8 * (v140 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) != 0);
      if ((v142 & 0x80000000) != 0) {
        size_t v146 = (uint64_t *)(*(void *)(v141 + 24) + 16 * (v142 & 0x7FFFFFFF) + 8);
      }
      else {
        size_t v146 = (uint64_t *)(*(void *)(v141 + 272) + 8 * v142);
      }
      uint64_t v147 = *v146;
      if (v147)
      {
        if (*(unsigned char *)(v147 + 3) & 1) != 0 || (uint64_t v147 = *(void *)(v147 + 24)) != 0 && (*(unsigned char *)(v147 + 3))
        {
          uint64_t v148 = *(void *)(v147 + 8);
          if (v148)
          {
            if (**(_WORD **)(v148 + 16) == 119 && *(_DWORD *)(v148 + 40) == 2)
            {
              unsigned int v149 = *(_DWORD *)(*(void *)(v148 + 32) + 36);
              if ((v139 & 0x80000000) != 0 && (v139 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v141 + 432)) {
                uint64_t v150 = *(void *)(*(void *)(v141 + 424) + 8 * (v139 & 0x7FFFFFFF));
              }
              else {
                uint64_t v150 = 0;
              }
              if ((v149 & 0x80000000) != 0 && (v149 & 0x7FFFFFFF) < *(_DWORD *)(v141 + 432)) {
                uint64_t v151 = *(void *)(*(void *)(v141 + 424) + 8 * (v149 & 0x7FFFFFFF));
              }
              else {
                uint64_t v151 = 0;
              }
              unint64_t v152 = (void *)*a1;
              if (v150 == v151)
              {
                sub_1CC714178(v139, v149, (void *)v141, *a1, (uint64_t)&v725, a4 + 8);
              }
              else
              {
                LODWORD(v728) = v139;
                LODWORD(v729) = 1;
                LODWORD(v735) = v149;
                LODWORD(v737) = 0;
                sub_1CC738034(v152, 118, (unint64_t *)&v728, (int *)&v735);
              }
              if (v726 >= HIDWORD(v726)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v725 + v726) = v139;
LABEL_181:
              LODWORD(v726) = v726 + 1;
LABEL_182:
              uint64_t v153 = a1[1];
              if ((v142 & 0x80000000) != 0) {
                unint64_t v154 = (uint64_t *)(*(void *)(v153 + 24) + 16 * (v142 & 0x7FFFFFFF) + 8);
              }
              else {
                unint64_t v154 = (uint64_t *)(*(void *)(v153 + 272) + 8 * v142);
              }
              uint64_t v155 = *v154;
              if (v155
                && ((*(unsigned char *)(v155 + 3) & 1) != 0
                 || (uint64_t v155 = *(void *)(v155 + 24)) != 0 && (*(unsigned char *)(v155 + 3) & 1) != 0))
              {
                uint64_t v156 = *(void *)(v155 + 8);
              }
              else
              {
                uint64_t v156 = 0;
              }
              unsigned int v157 = *(_DWORD *)(v5 + 8);
              if (v157 >= *(_DWORD *)(v5 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)v5 + 8 * v157) = a2;
              ++*(_DWORD *)(v5 + 8);
              uint64_t v76 = (uint64_t)a1;
              uint64_t v77 = a2;
              uint64_t v78 = v156;
LABEL_189:
              uint64_t v79 = v5;
LABEL_190:
              sub_1CC714A08(v76, v77, v78, v79, 0);
LABEL_191:
              uint64_t v9 = 1;
              goto LABEL_433;
            }
          }
        }
      }
      if ((v142 & 0x80000000) != 0) {
        v470 = (uint64_t *)(*(void *)(v141 + 24) + 16 * (v142 & 0x7FFFFFFF) + 8);
      }
      else {
        v470 = (uint64_t *)(*(void *)(v141 + 272) + 8 * v142);
      }
      uint64_t v471 = *v470;
      if (!v471) {
        goto LABEL_797;
      }
      if ((*(unsigned char *)(v471 + 3) & 1) == 0)
      {
        uint64_t v471 = *(void *)(v471 + 24);
        if (!v471 || (*(unsigned char *)(v471 + 3) & 1) == 0) {
          goto LABEL_797;
        }
      }
      uint64_t v472 = *(void *)(v471 + 8);
      if (!v472) {
        goto LABEL_797;
      }
      uint64_t v473 = *(void *)(v141 + 24);
      uint64_t v474 = *(void *)(v141 + 272);
      uint64_t v475 = (uint64_t *)((v142 & 0x80000000) != 0 ? v473 + 16 * (v142 & 0x7FFFFFFF) + 8 : v474 + 8 * v142);
      uint64_t v476 = *v475;
      if (v476)
      {
        if (*(unsigned char *)(v476 + 3) & 1) != 0 || (uint64_t v476 = *(void *)(v476 + 24)) != 0 && (*(unsigned char *)(v476 + 3))
        {
          uint64_t v477 = *(void *)(v476 + 8);
          if (v477)
          {
            if (**(_WORD **)(v477 + 16) == 118 && *(_DWORD *)(v477 + 40) == 2) {
              goto LABEL_804;
            }
          }
        }
      }
      uint64_t v478 = (uint64_t *)((v142 & 0x80000000) != 0 ? v473 + 16 * (v142 & 0x7FFFFFFF) + 8 : v474 + 8 * v142);
      if ((uint64_t v479 = *v478) != 0
        && ((*(unsigned char *)(v479 + 3) & 1) != 0 || (uint64_t v479 = *(void *)(v479 + 24)) != 0 && (*(unsigned char *)(v479 + 3) & 1) != 0)
        && (uint64_t v477 = *(void *)(v479 + 8)) != 0
        && **(_WORD **)(v477 + 16) == 124
        && *(_DWORD *)(v477 + 40) == 2
        || ((v142 & 0x80000000) == 0
          ? (uint64_t v480 = (uint64_t *)(v474 + 8 * v142))
          : (uint64_t v480 = (uint64_t *)(v473 + 16 * (v142 & 0x7FFFFFFF) + 8)),
            (uint64_t v481 = *v480) != 0
         && ((*(unsigned char *)(v481 + 3) & 1) != 0 || (uint64_t v481 = *(void *)(v481 + 24)) != 0 && (*(unsigned char *)(v481 + 3) & 1) != 0)
         && (uint64_t v477 = *(void *)(v481 + 8)) != 0
         && **(_WORD **)(v477 + 16) == 126
         && *(_DWORD *)(v477 + 40) == 2))
      {
LABEL_804:
        int v484 = *(_DWORD *)(*(void *)(v477 + 32) + 36);
        uint64_t v485 = *a1;
        uint64_t v486 = **(unsigned __int16 **)(v472 + 16);
        LODWORD(v728) = v139;
        LODWORD(v729) = 1;
        LODWORD(v735) = v484;
        LODWORD(v737) = 0;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t **, uint64_t, void))(*(void *)v485
                                                                                                  + 32))(v485, v486, &v728, 1, &v735, 1, 0);
        if (v726 >= HIDWORD(v726)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v725 + v726) = v139;
        LODWORD(v726) = v726 + 1;
        unsigned int v487 = *(_DWORD *)(v5 + 8);
        if (v487 < *(_DWORD *)(v5 + 12))
        {
LABEL_806:
          *(void *)(*(void *)v5 + 8 * v487) = a2;
          ++*(_DWORD *)(v5 + 8);
          sub_1CC714A08((uint64_t)a1, a2, v472, v5, 0);
          uint64_t v9 = 1;
          goto LABEL_433;
        }
      }
      else
      {
LABEL_797:
        if ((v142 & 0x80000000) != 0) {
          uint64_t v482 = (uint64_t *)(*(void *)(v141 + 24) + 16 * (v142 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v482 = (uint64_t *)(*(void *)(v141 + 272) + 8 * v142);
        }
        uint64_t v483 = *v482;
        if ((*(unsigned char *)(v483 + 3) & 1) == 0) {
          uint64_t v483 = *(void *)(v483 + 24);
        }
        uint64_t v472 = *(void *)(v483 + 8);
        if (**(_WORD **)(v472 + 16) != 120) {
          goto LABEL_802;
        }
        uint64_t v488 = (v139 & 0x80000000) != 0 && (v139 & 0x7FFFFFFF) < *(_DWORD *)(v141 + 432)
             ? *(void **)(*(void *)(v141 + 424) + 8 * (v139 & 0x7FFFFFFF))
             : 0;
        uint64_t v732 = (uint64_t)v488;
        v728 = v488;
        LODWORD(v735) = 120;
        uint64_t v736 = (uint64_t)&v728;
        uint64_t v737 = 1;
        uint64_t v738 = 0;
        uint64_t v739 = 0;
        if (sub_1CC72D410(a1[2], (uint64_t)&v735))
        {
LABEL_802:
          uint64_t v9 = sub_1CC7145A0(a1, a2, v5, (uint64_t)&v725);
          goto LABEL_433;
        }
        uint64_t v489 = *(void *)(v472 + 32);
        unint64_t v490 = (llvm::ConstantInt *****)*a1;
        LODWORD(v735) = v139;
        LODWORD(v736) = 1;
        uint64_t v491 = *(void *)(v489 + 48) + 24;
        unsigned int v493 = sub_1CB8F1DC4((unint64_t *)&v732);
        if (v492 == 1) {
        llvm::APInt::sext(v491, v493, (uint64_t)&v728);
        }
        uint64_t v495 = llvm::ConstantInt::get(***v490[1], (llvm::LLVMContext *)&v728, v494);
        ((void (*)(llvm::ConstantInt *****, uint64_t **, void *))(*v490)[2])(v490, &v735, v495);
        if (v729 >= 0x41 && v728) {
          MEMORY[0x1D25D9CB0](v728, 0x1000C8000313F17);
        }
        if (v726 >= HIDWORD(v726)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v725 + v726) = v139;
        LODWORD(v726) = v726 + 1;
        unsigned int v487 = *(_DWORD *)(v5 + 8);
        if (v487 < *(_DWORD *)(v5 + 12)) {
          goto LABEL_806;
        }
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    case 'w':
      uint64_t v10 = *a1;
      *(void *)(v10 + 40) = *(void *)(a2 + 24);
      *(void *)(v10 + 48) = a2;
      uint64_t v11 = *(void *)(a2 + 32);
      unsigned int v12 = *(_DWORD *)(v11 + 4);
      uint64_t v13 = *(unsigned int *)(v11 + 36);
      uint64_t v14 = a1[1];
      do
      {
        uint64_t v15 = v13;
        if ((v13 & 0x80000000) != 0) {
          uint64_t v16 = (uint64_t *)(*(void *)(v14 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v16 = (uint64_t *)(*(void *)(v14 + 272) + 8 * v13);
        }
        uint64_t v17 = *v16;
        if (!v17) {
          break;
        }
        if ((*(unsigned char *)(v17 + 3) & 1) == 0)
        {
          uint64_t v17 = *(void *)(v17 + 24);
          if (!v17 || (*(unsigned char *)(v17 + 3) & 1) == 0) {
            break;
          }
        }
        uint64_t v18 = *(void *)(v17 + 8);
        if (!v18) {
          break;
        }
        if (**(_WORD **)(v18 + 16) != 19) {
          break;
        }
        if (*(_DWORD *)(v18 + 40) != 2) {
          break;
        }
        uint64_t v13 = *(unsigned int *)(*(void *)(v18 + 32) + 36);
        if ((v13 & 0x80000000) == 0) {
          break;
        }
      }
      while ((v13 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v14 + 432)
           && (*(void *)(*(void *)(v14 + 424) + 8 * (v13 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) != 0);
      if ((v15 & 0x80000000) != 0) {
        uint64_t v19 = (uint64_t *)(*(void *)(v14 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v19 = (uint64_t *)(*(void *)(v14 + 272) + 8 * v15);
      }
      uint64_t v20 = *v19;
      if (v20
        && ((*(unsigned char *)(v20 + 3) & 1) != 0 || (uint64_t v20 = *(void *)(v20 + 24)) != 0 && (*(unsigned char *)(v20 + 3) & 1) != 0))
      {
        uint64_t v21 = *(void *)(v20 + 8);
      }
      else
      {
        uint64_t v21 = 0;
      }
      int v22 = **(unsigned __int16 **)(v21 + 16);
      if (v22 != 120) {
        goto LABEL_20;
      }
      if ((v12 & 0x80000000) != 0 && (v12 & 0x7FFFFFFF) < *(_DWORD *)(v14 + 432)) {
        uint64_t v23 = *(void **)(*(void *)(v14 + 424) + 8 * (v12 & 0x7FFFFFFF));
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v732 = (uint64_t)v23;
      v728 = v23;
      LODWORD(v735) = 120;
      uint64_t v736 = (uint64_t)&v728;
      uint64_t v737 = 1;
      uint64_t v738 = 0;
      uint64_t v739 = 0;
      if (!sub_1CC72D410(a1[2], (uint64_t)&v735))
      {
        uint64_t v158 = *(void *)(v21 + 32);
        uint64_t v159 = (llvm::ConstantInt *****)*a1;
        LODWORD(v735) = v12;
        LODWORD(v736) = 1;
        uint64_t v160 = *(void *)(v158 + 48);
        unsigned int v163 = sub_1CB8F1DC4((unint64_t *)&v732);
        if (v161 == 1) {
        uint64_t v164 = (unint64_t *)(v160 + 24);
        }
        unsigned int v165 = *(_DWORD *)(v160 + 32);
        if (v163 > 0x40)
        {
          if (v165 != v163) {
            operator new[]();
          }
          sub_1CD0463BC((uint64_t)&v728, v160 + 24);
        }
        else
        {
          if (v165 >= 0x41) {
            uint64_t v164 = (unint64_t *)*v164;
          }
          unint64_t v166 = *v164;
          LODWORD(v729) = v163;
          unint64_t v167 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v163;
          if (!v163) {
            unint64_t v167 = 0;
          }
          v728 = (void *)(v167 & v166);
        }
        int v168 = llvm::ConstantInt::get(***v159[1], (llvm::LLVMContext *)&v728, v162);
        ((void (*)(llvm::ConstantInt *****, uint64_t **, void *))(*v159)[2])(v159, &v735, v168);
        if (v729 >= 0x41 && v728) {
          MEMORY[0x1D25D9CB0](v728, 0x1000C8000313F17);
        }
        goto LABEL_203;
      }
      int v22 = **(unsigned __int16 **)(v21 + 16);
LABEL_20:
      if (v22 == 76)
      {
        unsigned int v24 = *(_DWORD *)(*(void *)(v21 + 32) + 36);
        uint64_t v25 = a1[1];
        if ((v24 & 0x80000000) != 0 && (v24 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v25 + 432)) {
          uint64_t v26 = *(void *)(*(void *)(v25 + 424) + 8 * (v24 & 0x7FFFFFFF));
        }
        else {
          uint64_t v26 = 0;
        }
        uint64_t v732 = v26;
        if ((v12 & 0x80000000) != 0 && (v12 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v25 + 432)) {
          unint64_t v27 = *(void *)(*(void *)(v25 + 424) + 8 * (v12 & 0x7FFFFFFF));
        }
        else {
          unint64_t v27 = 0;
        }
        unint64_t v724 = v27;
        unsigned int v29 = sub_1CB8F1DC4(&v724);
        if (v28 == 1) {
        unsigned int v31 = sub_1CB8F1DC4((unint64_t *)&v732);
        }
        if (v30 == 1) {
        if (v724 & 1) != 0 && (v732)
        }
        {
          if (v29 >= v31)
          {
            if (v29 == v31)
            {
              sub_1CC714178(v12, v24, (void *)a1[1], *a1, (uint64_t)&v725, a4 + 8);
LABEL_205:
              unsigned int v169 = *(_DWORD *)(v5 + 8);
              if (v169 >= *(_DWORD *)(v5 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)v5 + 8 * v169) = a2;
              ++*(_DWORD *)(v5 + 8);
              sub_1CC714A08((uint64_t)a1, a2, v21, v5, 0);
              uint64_t v9 = 1;
              goto LABEL_433;
            }
            unint64_t v226 = v29 / v31;
            if (!(v29 % v31))
            {
              v728 = (void *)v724;
              uint64_t v729 = v732;
              LODWORD(v735) = 76;
              uint64_t v736 = (uint64_t)&v728;
              uint64_t v737 = 2;
              uint64_t v738 = 0;
              uint64_t v739 = 0;
              if (sub_1CC72D410(a1[2], (uint64_t)&v735) - 9 >= 2)
              {
                v735 = &v737;
                uint64_t v736 = 0x800000000;
                sub_1CBA0E058((uint64_t)&v735, v226, 0);
                uint64_t v227 = (int *)v735;
                if (v226 <= 1) {
                  uint64_t v228 = 1;
                }
                else {
                  uint64_t v228 = v226;
                }
                uint64_t v229 = (int *)(*(void *)(v21 + 32) + 36);
                std::string::size_type v230 = v735;
                do
                {
                  int v231 = *v229;
                  v229 += 8;
                  *(_DWORD *)std::string::size_type v230 = v231;
                  std::string::size_type v230 = (uint64_t *)((char *)v230 + 4);
                  --v228;
                }
                while (v228);
                uint64_t v232 = *a1;
                LODWORD(v728) = v12;
                LODWORD(v729) = 1;
                sub_1CC73661C(v232, (uint64_t)&v728, v227, v736);
                if (v726 >= HIDWORD(v726)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((_DWORD *)v725 + v726) = v12;
                LODWORD(v726) = v726 + 1;
                if (v735 != &v737) {
                  free(v735);
                }
                goto LABEL_205;
              }
            }
          }
          else
          {
            v728 = (void *)v724;
            uint64_t v729 = v732;
            LODWORD(v735) = 119;
            uint64_t v736 = (uint64_t)&v728;
            uint64_t v737 = 2;
            uint64_t v738 = 0;
            uint64_t v739 = 0;
            if (sub_1CC72D410(a1[2], (uint64_t)&v735) - 9 >= 2)
            {
              uint64_t v32 = *a1;
              LODWORD(v728) = v12;
              LODWORD(v729) = 1;
              LODWORD(v735) = v24;
              LODWORD(v737) = 0;
              (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t **, uint64_t, void))(*(void *)v32 + 32))(v32, 119, &v728, 1, &v735, 1, 0);
LABEL_203:
              if (v726 >= HIDWORD(v726)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v725 + v726) = v12;
              LODWORD(v726) = v726 + 1;
              goto LABEL_205;
            }
          }
        }
LABEL_708:
        if (v726 >= HIDWORD(v726)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v9 = 0;
        *((_DWORD *)v725 + v726) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
        unsigned int v225 = v726 + 1;
        LODWORD(v726) = v225;
        if (!v225) {
          goto LABEL_434;
        }
        goto LABEL_710;
      }
      uint64_t v65 = a1[1];
      if ((v15 & 0x80000000) != 0) {
        unsigned int v66 = (uint64_t *)(*(void *)(v65 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
      }
      else {
        unsigned int v66 = (uint64_t *)(*(void *)(v65 + 272) + 8 * v15);
      }
      uint64_t v67 = *v66;
      if (v67)
      {
        if (*(unsigned char *)(v67 + 3) & 1) != 0 || (uint64_t v67 = *(void *)(v67 + 24)) != 0 && (*(unsigned char *)(v67 + 3))
        {
          uint64_t v68 = *(void *)(v67 + 8);
          if (v68)
          {
            if (**(_WORD **)(v68 + 16) == 119 && *(_DWORD *)(v68 + 40) == 2)
            {
              uint64_t v69 = *(unsigned int *)(*(void *)(v68 + 32) + 36);
              uint64_t v70 = *a1;
              LODWORD(v728) = v12;
              LODWORD(v729) = 1;
              LODWORD(v735) = v69;
              LODWORD(v737) = 0;
              (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t **, uint64_t, void))(*(void *)v70 + 32))(v70, 119, &v728, 1, &v735, 1, 0);
              if (v726 >= HIDWORD(v726)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v725 + v726) = v12;
              LODWORD(v726) = v726 + 1;
              uint64_t v71 = a1[1];
              if ((v69 & 0x80000000) != 0) {
                uint64_t v72 = (uint64_t *)(*(void *)(v71 + 24) + 16 * (v69 & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v72 = (uint64_t *)(*(void *)(v71 + 272) + 8 * v69);
              }
              uint64_t v73 = *v72;
              if (v73
                && ((*(unsigned char *)(v73 + 3) & 1) != 0
                 || (uint64_t v73 = *(void *)(v73 + 24)) != 0 && (*(unsigned char *)(v73 + 3) & 1) != 0))
              {
                uint64_t v74 = *(void *)(v73 + 8);
              }
              else
              {
                uint64_t v74 = 0;
              }
              unsigned int v75 = *(_DWORD *)(v5 + 8);
              if (v75 >= *(_DWORD *)(v5 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)v5 + 8 * v75) = a2;
              ++*(_DWORD *)(v5 + 8);
              uint64_t v76 = (uint64_t)a1;
              uint64_t v77 = a2;
              uint64_t v78 = v74;
              uint64_t v79 = v5;
              goto LABEL_190;
            }
          }
        }
      }
      if ((v12 & 0x80000000) != 0 && (v12 & 0x7FFFFFFF) < *(_DWORD *)(v65 + 432)) {
        unint64_t v421 = *(void *)(*(void *)(v65 + 424) + 8 * (v12 & 0x7FFFFFFF));
      }
      else {
        unint64_t v421 = 0;
      }
      unint64_t v724 = v421;
      if ((v15 & 0x80000000) != 0 && (v15 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v65 + 432)) {
        unint64_t v422 = *(void *)(*(void *)(v65 + 424) + 8 * (v15 & 0x7FFFFFFF));
      }
      else {
        unint64_t v422 = 0;
      }
      unint64_t v723 = v422;
      uint64_t v423 = sub_1CB8F1DC4(&v723);
      if (**(_WORD **)(v21 + 16) != 82) {
        goto LABEL_708;
      }
      unint64_t v425 = v423;
      uint64_t v426 = a1[1];
      unint64_t v427 = (uint64_t *)((v15 & 0x80000000) != 0
                       ? *(void *)(v426 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8
                       : *(void *)(v426 + 272) + 8 * v15);
      uint64_t v428 = *v427;
      if (!v428) {
        goto LABEL_708;
      }
      while ((*(unsigned char *)(v428 + 3) & 1) != 0)
      {
        uint64_t v428 = *(void *)(v428 + 24);
        if (!v428) {
          goto LABEL_708;
        }
      }
      while (1)
      {
        uint64_t v428 = *(void *)(v428 + 24);
        if (!v428) {
          break;
        }
        if ((*(unsigned char *)(v428 + 3) & 1) == 0) {
          goto LABEL_708;
        }
      }
      if (v424 == 1) {
      if (v425 < 0x41)
      }
        goto LABEL_708;
      int v429 = *(_DWORD *)(*(void *)(v21 + 32) + 36);
      if (v429 < 0 && (uint64_t v466 = a1[1], (v429 & 0x7FFFFFFFu) < *(_DWORD *)(v466 + 432)))
      {
        unint64_t v430 = *(void *)(*(void *)(v466 + 424) + 8 * (v429 & 0x7FFFFFFF));
        if ((v430 & 2) != 0)
        {
          char v467 = 35;
          char v468 = 19;
          if ((v430 & 4) == 0) {
            char v467 = 19;
          }
          unint64_t v469 = v430 >> v467;
          if ((v430 & 4) == 0) {
            char v468 = 3;
          }
          if (v430) {
            char v468 = 3;
          }
          unint64_t v432 = (8 * (unsigned __int16)(v430 >> v468)) & 0xFFFFF8000007FFFFLL | ((v469 & 0xFFFFFF) << 19) | 2;
          goto LABEL_685;
        }
      }
      else
      {
        unint64_t v430 = 0;
      }
      char v431 = 3;
      if ((v430 & 1) == 0) {
        char v431 = 19;
      }
      unint64_t v432 = v430 & 0x8000000000000000 | (8 * (v430 >> v431)) | 1;
LABEL_685:
      uint64_t v722 = v432;
      unint64_t v434 = sub_1CB8F1DC4(&v724);
      if (v433 == 1) {
      uint64_t v716 = a4;
      }
      unint64_t v437 = sub_1CB8F1DC4((unint64_t *)&v722);
      if (v435 == 1) {
      int IncompleteVirtualRegister = v12;
      }
      unint64_t v707 = v437;
      unint64_t v712 = v434;
      if (v434 < v437)
      {
        uint64_t v439 = a1[1];
        unint64_t v699 = v722;
        int v703 = v429;
        int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v439, "", 0);
        unint64_t v440 = IncompleteVirtualRegister & 0x7FFFFFFF;
        *(void *)(*(void *)(v439 + 24) + 16 * v440) = 4;
        unint64_t v441 = *(unsigned int *)(v439 + 432);
        if (v440 >= v441)
        {
          unsigned int v436 = (const llvm::APInt *)(v440 + 1);
          uint64_t v442 = *(void *)(v439 + 440);
          uint64_t v443 = v440 + 1 - v441;
          if (v440 >= *(unsigned int *)(v439 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v444 = *(_DWORD *)(v439 + 432);
          if (v443)
          {
            unint64_t v445 = (void *)(*(void *)(v439 + 424) + 8 * *(unsigned int *)(v439 + 432));
            uint64_t v446 = ~v440 + v441;
            do
            {
              *v445++ = v442;
              BOOL v392 = __CFADD__(v446++, 1);
            }
            while (!v392);
            int v444 = *(_DWORD *)(v439 + 432);
          }
          *(_DWORD *)(v439 + 432) = v444 + v443;
        }
        int v429 = v703;
        *(void *)(*(void *)(v439 + 424) + 8 * v440) = v699;
        uint64_t v447 = *(void *)(v439 + 8);
        if (v447) {
          (*(void (**)(uint64_t))(*(void *)v447 + 24))(v447);
        }
      }
      unsigned int v448 = (void *****)*a1;
      LODWORD(v728) = IncompleteVirtualRegister;
      LODWORD(v729) = 1;
      uint64_t v732 = 257;
      LODWORD(v733) = 0;
      uint64_t v449 = ****v448[1];
      unint64_t v450 = *(llvm::ConstantInt **)(v449 + 1960);
      unsigned int v451 = *(_DWORD *)(v449 + 1968);
      LODWORD(v736) = v451 >> 8;
      if (v451 >> 8 >= 0x41) {
        operator new[]();
      }
      v735 = 0;
      uint64_t v452 = llvm::ConstantInt::get(v450, (llvm::LLVMContext *)&v735, v436);
      if (v736 >= 0x41 && v735) {
        MEMORY[0x1D25D9CB0](v735, 0x1000C8000313F17);
      }
      uint64_t v453 = ((uint64_t (*)(void *****, uint64_t *, void *))(*v448)[2])(v448, &v732, v452);
      LODWORD(v735) = v429;
      LODWORD(v737) = 0;
      uint64_t v738 = v453;
      uint64_t v739 = v454;
      int v740 = 1;
      ((void (*)(void *****, uint64_t, void **, uint64_t, uint64_t **, uint64_t, void))(*v448)[4])(v448, 205, &v728, 1, &v735, 2, 0);
      if (v726 >= HIDWORD(v726)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v725 + v726) = IncompleteVirtualRegister;
      LODWORD(v726) = v726 + 1;
      if (v712 < v707)
      {
        uint64_t v455 = *a1;
        LODWORD(v728) = v12;
        LODWORD(v729) = 1;
        LODWORD(v735) = IncompleteVirtualRegister;
        LODWORD(v737) = 0;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t **, uint64_t, void))(*(void *)v455
                                                                                                  + 32))(v455, 119, &v728, 1, &v735, 1, 0);
        if (v726 >= HIDWORD(v726)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v725 + v726) = v12;
        LODWORD(v726) = v726 + 1;
      }
      unsigned int v456 = *(_DWORD *)(v5 + 8);
      if (v456 >= *(_DWORD *)(v5 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)v5 + 8 * v456) = a2;
      ++*(_DWORD *)(v5 + 8);
      sub_1CC714A08((uint64_t)a1, a2, v21, v5, 0);
      uint64_t v9 = 1;
      a4 = v716;
LABEL_433:
      unsigned int v225 = v726;
      if (!v726) {
        goto LABEL_434;
      }
      do
      {
LABEL_710:
        uint64_t v457 = *((unsigned int *)v725 + --v225);
        LODWORD(v726) = v225;
        uint64_t v458 = a1[1];
        if ((v457 & 0x80000000) != 0) {
          unsigned int v459 = (uint64_t *)(*(void *)(v458 + 24) + 16 * (v457 & 0x7FFFFFFF) + 8);
        }
        else {
          unsigned int v459 = (uint64_t *)(*(void *)(v458 + 272) + 8 * v457);
        }
        uint64_t v460 = *v459;
        if (v460)
        {
          while ((*(unsigned char *)(v460 + 3) & 1) != 0)
          {
            uint64_t v460 = *(void *)(v460 + 24);
            if (!v460) {
              goto LABEL_729;
            }
          }
          uint64_t v461 = *(void *)(v460 + 8);
LABEL_717:
          uint64_t v462 = v460;
          int v463 = **(unsigned __int16 **)(v461 + 16);
          if ((v463 - 73) > 0x35 || ((1 << (v463 - 73)) & 0x28600000000003) == 0)
          {
            if (v463 == 19)
            {
              int v465 = *(_DWORD *)(*(void *)(v461 + 32) + 4);
              if (v465 < 0)
              {
                if (v726 >= (unint64_t)HIDWORD(v726)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((_DWORD *)v725 + v726) = v465;
                LODWORD(v726) = v726 + 1;
              }
            }
          }
          else
          {
            (*(void (**)(uint64_t))(*(void *)a4 + 64))(a4);
          }
          uint64_t v460 = v462;
          while (1)
          {
            uint64_t v460 = *(void *)(v460 + 24);
            if (!v460) {
              break;
            }
            if ((*(unsigned char *)(v460 + 3) & 1) == 0)
            {
              uint64_t v461 = *(void *)(v460 + 8);
              if (v461 != *(void *)(v462 + 8)) {
                goto LABEL_717;
              }
            }
          }
          unsigned int v225 = v726;
        }
LABEL_729:
        ;
      }
      while (v225);
LABEL_434:
      if (v725 != v727) {
        free(v725);
      }
      return v9;
    case 'x':
    case 'y':
    case 'z':
    case '{':
    case '}':
      goto LABEL_434;
    case '|':
      uint64_t v196 = *a1;
      *(void *)(v196 + 40) = *(void *)(a2 + 24);
      *(void *)(v196 + 48) = a2;
      uint64_t v197 = (unsigned __int8 **)(a2 + 56);
      uint64_t v198 = (uint64_t *)(v196 + 32);
      if (a2 + 56 == v196 + 32) {
        goto LABEL_260;
      }
      std::string::size_type v199 = (unsigned __int8 *)*v198;
      if (!*v198) {
        goto LABEL_258;
      }
      int v261 = *v199;
      if ((v261 - 4) > 0x1E)
      {
        if ((v261 - 3) >= 0xFFFFFFFE) {
          uint64_t v268 = *v198;
        }
        else {
          uint64_t v268 = 0;
        }
        if ((v261 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v263 = v268 + 8;
LABEL_414:
          v735 = v198;
          sub_1CC5FA668(v263 + 16, &v735);
          goto LABEL_258;
        }
        if (v261 == 3) {
          *((void *)v199 + 1) = 0;
        }
      }
      else if ((v199[1] & 0x7F) == 2 || *((_DWORD *)v199 + 3))
      {
        uint64_t v262 = *((void *)v199 + 2);
        if ((v262 & 4) != 0)
        {
          unint64_t v263 = v262 & 0xFFFFFFFFFFFFFFF8;
          if (v263) {
            goto LABEL_414;
          }
        }
      }
LABEL_258:
      unint64_t v200 = *v197;
      *uint64_t v198 = (uint64_t)*v197;
      if (v200) {
        llvm::MetadataTracking::track((uint64_t)v198, v200, 2);
      }
LABEL_260:
      uint64_t v201 = *(void *)(a2 + 32);
      int v202 = *(_DWORD *)(v201 + 4);
      uint64_t v203 = *(unsigned int *)(v201 + 36);
      uint64_t v204 = a1[1];
      do
      {
        uint64_t v142 = v203;
        if ((v203 & 0x80000000) != 0) {
          uint64_t v205 = (uint64_t *)(*(void *)(v204 + 24) + 16 * (v203 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v205 = (uint64_t *)(*(void *)(v204 + 272) + 8 * v203);
        }
        uint64_t v206 = *v205;
        if (!v206) {
          break;
        }
        if ((*(unsigned char *)(v206 + 3) & 1) == 0)
        {
          uint64_t v206 = *(void *)(v206 + 24);
          if (!v206 || (*(unsigned char *)(v206 + 3) & 1) == 0) {
            break;
          }
        }
        uint64_t v207 = *(void *)(v206 + 8);
        if (!v207) {
          break;
        }
        if (**(_WORD **)(v207 + 16) != 19) {
          break;
        }
        if (*(_DWORD *)(v207 + 40) != 2) {
          break;
        }
        uint64_t v203 = *(unsigned int *)(*(void *)(v207 + 32) + 36);
        if ((v203 & 0x80000000) == 0) {
          break;
        }
      }
      while ((v203 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v204 + 432)
           && (*(void *)(*(void *)(v204 + 424) + 8 * (v203 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) != 0);
      if ((v142 & 0x80000000) != 0) {
        uint64_t v208 = (uint64_t *)(*(void *)(v204 + 24) + 16 * (v142 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v208 = (uint64_t *)(*(void *)(v204 + 272) + 8 * v142);
      }
      uint64_t v209 = *v208;
      if (v209)
      {
        if (*(unsigned char *)(v209 + 3) & 1) != 0 || (uint64_t v209 = *(void *)(v209 + 24)) != 0 && (*(unsigned char *)(v209 + 3))
        {
          uint64_t v210 = *(void *)(v209 + 8);
          if (v210)
          {
            if (**(_WORD **)(v210 + 16) == 119 && *(_DWORD *)(v210 + 40) == 2)
            {
              uint64_t v211 = *(void *)(v210 + 32);
              uint64_t v212 = v5;
              if (v202 < 0 && (v202 & 0x7FFFFFFFu) < *(_DWORD *)(v204 + 432)) {
                std::string v213 = *(void **)(*(void *)(v204 + 424) + 8 * (v202 & 0x7FFFFFFF));
              }
              else {
                std::string v213 = 0;
              }
              int v214 = *(_DWORD *)(v211 + 36);
              v728 = v213;
              LODWORD(v735) = 125;
              uint64_t v736 = (uint64_t)&v728;
              uint64_t v737 = 1;
              uint64_t v738 = 0;
              uint64_t v739 = 0;
              if (sub_1CC72D410(a1[2], (uint64_t)&v735) - 11 <= 0xFFFFFFFD)
              {
                uint64_t v215 = a1[1];
                if ((v142 & 0x80000000) != 0
                  && (v142 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v215 + 432))
                {
                  unint64_t v216 = *(void *)(*(void *)(v215 + 424) + 8 * (v142 & 0x7FFFFFFF));
                  if (v216)
                  {
                    uint64_t v217 = (v216 >> 3);
LABEL_280:
                    if (v214 < 0 && (v214 & 0x7FFFFFFFu) < *(_DWORD *)(v215 + 432)) {
                      int v218 = *(void **)(*(void *)(v215 + 424) + 8 * (v214 & 0x7FFFFFFF));
                    }
                    else {
                      int v218 = 0;
                    }
                    if (v213 != v218)
                    {
                      uint64_t v219 = (void *)*a1;
                      v728 = v213;
                      LODWORD(v729) = 0;
                      LODWORD(v735) = v214;
                      LODWORD(v737) = 0;
                      sub_1CC738034(v219, 118, (unint64_t *)&v728, (int *)&v735);
                      int v214 = *(_DWORD *)(*(void *)(v220 + 32) + 4);
                    }
                    uint64_t v5 = v212;
                    uint64_t v221 = *a1;
                    LODWORD(v728) = v202;
                    LODWORD(v729) = 1;
                    LODWORD(v735) = v214;
                    LODWORD(v737) = 0;
                    uint64_t v738 = v217;
                    int v740 = 3;
                    (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t **, uint64_t, void))(*(void *)v221 + 32))(v221, 125, &v728, 1, &v735, 2, 0);
                    goto LABEL_182;
                  }
                  if ((v216 & 4) != 0)
                  {
                    if ((v216 & 2) != 0) {
                      uint64_t v217 = (unsigned __int16)(v216 >> 19);
                    }
                    else {
                      uint64_t v217 = (v216 >> 19);
                    }
                    goto LABEL_280;
                  }
                }
                else
                {
                  unint64_t v216 = 0;
                }
                uint64_t v217 = (unsigned __int16)(v216 >> 3);
                goto LABEL_280;
              }
LABEL_432:
              uint64_t v9 = 0;
              goto LABEL_433;
            }
          }
        }
      }
      LODWORD(v723) = 0;
      uint64_t v732 = 0;
      v735 = (uint64_t *)&v723;
      uint64_t v736 = (uint64_t)&v723;
      uint64_t v737 = (uint64_t)&v732;
      LODWORD(v728) = v142;
      if ((v142 & 0x80000000) != 0) {
        unint64_t v496 = (uint64_t *)(*(void *)(v204 + 24) + 16 * (v142 & 0x7FFFFFFF) + 8);
      }
      else {
        unint64_t v496 = (uint64_t *)(*(void *)(v204 + 272) + 8 * v142);
      }
      uint64_t v497 = *v496;
      if (v497
        && ((*(unsigned char *)(v497 + 3) & 1) != 0 || (uint64_t v497 = *(void *)(v497 + 24)) != 0 && (*(unsigned char *)(v497 + 3) & 1) != 0))
      {
        uint64_t v732 = *(void *)(v497 + 8);
        if (v732)
        {
          if (sub_1CBA5FC98((_DWORD **)&v735, v204, (unsigned int *)&v728))
          {
            uint64_t v498 = *a1;
            uint64_t v499 = **(unsigned __int16 **)(v732 + 16);
            LODWORD(v728) = v202;
            LODWORD(v729) = 1;
            LODWORD(v735) = v723;
            LODWORD(v737) = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t **, uint64_t, void))(*(void *)v498 + 32))(v498, v499, &v728, 1, &v735, 1, 0);
            if (v726 >= HIDWORD(v726)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v725 + v726) = v202;
            goto LABEL_181;
          }
          uint64_t v204 = a1[1];
        }
      }
      else
      {
        uint64_t v732 = 0;
      }
      if ((v142 & 0x80000000) != 0) {
        unint64_t v500 = (uint64_t *)(*(void *)(v204 + 24) + 16 * (v142 & 0x7FFFFFFF) + 8);
      }
      else {
        unint64_t v500 = (uint64_t *)(*(void *)(v204 + 272) + 8 * v142);
      }
      uint64_t v501 = *v500;
      if ((*(unsigned char *)(v501 + 3) & 1) == 0) {
        uint64_t v501 = *(void *)(v501 + 24);
      }
      uint64_t v64 = *(void *)(v501 + 8);
      if (**(_WORD **)(v64 + 16) != 120) {
        goto LABEL_82;
      }
      long long v502 = v202 < 0 && (v202 & 0x7FFFFFFFu) < *(_DWORD *)(v204 + 432)
           ? *(void **)(*(void *)(v204 + 424) + 8 * (v202 & 0x7FFFFFFF))
           : 0;
      unint64_t v724 = (unint64_t)v502;
      v728 = v502;
      LODWORD(v735) = 120;
      uint64_t v736 = (uint64_t)&v728;
      uint64_t v737 = 1;
      uint64_t v738 = 0;
      uint64_t v739 = 0;
      if (sub_1CC72D410(a1[2], (uint64_t)&v735)) {
        goto LABEL_82;
      }
      uint64_t v503 = *(void *)(v64 + 32);
      long long v504 = (llvm::ConstantInt *****)*a1;
      LODWORD(v735) = v202;
      LODWORD(v736) = 1;
      uint64_t v505 = *(void *)(v503 + 48) + 24;
      unsigned int v507 = sub_1CB8F1DC4(&v724);
      if (v506 == 1) {
      llvm::APInt::sext(v505, v507, (uint64_t)&v728);
      }
      long long v509 = llvm::ConstantInt::get(***v504[1], (llvm::LLVMContext *)&v728, v508);
      ((void (*)(llvm::ConstantInt *****, uint64_t **, void *))(*v504)[2])(v504, &v735, v509);
      if (v729 >= 0x41 && v728) {
        MEMORY[0x1D25D9CB0](v728, 0x1000C8000313F17);
      }
      if (v726 >= HIDWORD(v726)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v725 + v726) = v202;
      LODWORD(v726) = v726 + 1;
      uint64_t v249 = v5;
      goto LABEL_329;
    case '~':
      uint64_t v40 = *a1;
      *(void *)(v40 + 40) = *(void *)(a2 + 24);
      *(void *)(v40 + 48) = a2;
      uint64_t v41 = (unsigned __int8 **)(a2 + 56);
      unsigned int v42 = (uint64_t *)(v40 + 32);
      if (a2 + 56 == v40 + 32) {
        goto LABEL_52;
      }
      uint64_t v43 = (unsigned __int8 *)*v42;
      if (!*v42) {
        goto LABEL_50;
      }
      int v233 = *v43;
      if ((v233 - 4) > 0x1E)
      {
        if ((v233 - 3) >= 0xFFFFFFFE) {
          uint64_t v259 = *v42;
        }
        else {
          uint64_t v259 = 0;
        }
        if ((v233 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v235 = v259 + 8;
LABEL_356:
          v735 = v42;
          sub_1CC5FA668(v235 + 16, &v735);
          goto LABEL_50;
        }
        if (v233 == 3) {
          *((void *)v43 + 1) = 0;
        }
      }
      else if ((v43[1] & 0x7F) == 2 || *((_DWORD *)v43 + 3))
      {
        uint64_t v234 = *((void *)v43 + 2);
        if ((v234 & 4) != 0)
        {
          unint64_t v235 = v234 & 0xFFFFFFFFFFFFFFF8;
          if (v235) {
            goto LABEL_356;
          }
        }
      }
LABEL_50:
      uint64_t v44 = *v41;
      uint64_t *v42 = (uint64_t)*v41;
      if (v44) {
        llvm::MetadataTracking::track((uint64_t)v42, v44, 2);
      }
LABEL_52:
      uint64_t v45 = *(void *)(a2 + 32);
      int v46 = *(_DWORD *)(v45 + 4);
      uint64_t v47 = *(unsigned int *)(v45 + 36);
      uint64_t v48 = a1[1];
      do
      {
        uint64_t v49 = v47;
        if ((v47 & 0x80000000) != 0) {
          uint64_t v50 = (uint64_t *)(*(void *)(v48 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v50 = (uint64_t *)(*(void *)(v48 + 272) + 8 * v47);
        }
        uint64_t v51 = *v50;
        if (!v51) {
          break;
        }
        if ((*(unsigned char *)(v51 + 3) & 1) == 0)
        {
          uint64_t v51 = *(void *)(v51 + 24);
          if (!v51 || (*(unsigned char *)(v51 + 3) & 1) == 0) {
            break;
          }
        }
        uint64_t v52 = *(void *)(v51 + 8);
        if (!v52) {
          break;
        }
        if (**(_WORD **)(v52 + 16) != 19) {
          break;
        }
        if (*(_DWORD *)(v52 + 40) != 2) {
          break;
        }
        uint64_t v47 = *(unsigned int *)(*(void *)(v52 + 32) + 36);
        if ((v47 & 0x80000000) == 0) {
          break;
        }
      }
      while ((v47 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v48 + 432)
           && (*(void *)(*(void *)(v48 + 424) + 8 * (v47 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) != 0);
      if ((v49 & 0x80000000) != 0) {
        unint64_t v53 = (uint64_t *)(*(void *)(v48 + 24) + 16 * (v49 & 0x7FFFFFFF) + 8);
      }
      else {
        unint64_t v53 = (uint64_t *)(*(void *)(v48 + 272) + 8 * v49);
      }
      uint64_t v54 = *v53;
      if (v54
        && ((*(unsigned char *)(v54 + 3) & 1) != 0 || (uint64_t v54 = *(void *)(v54 + 24)) != 0 && (*(unsigned char *)(v54 + 3) & 1) != 0)
        && (uint64_t v55 = *(void *)(v54 + 8)) != 0
        && **(_WORD **)(v55 + 16) == 119
        && *(_DWORD *)(v55 + 40) == 2)
      {
        int v170 = 0;
        int v171 = *(_DWORD *)(*(void *)(v55 + 32) + 36);
      }
      else
      {
        if ((v49 & 0x80000000) != 0) {
          uint64_t v56 = (uint64_t *)(*(void *)(v48 + 24) + 16 * (v49 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v56 = (uint64_t *)(*(void *)(v48 + 272) + 8 * v49);
        }
        uint64_t v57 = *v56;
        if (!v57
          || (*(unsigned char *)(v57 + 3) & 1) == 0 && ((uint64_t v57 = *(void *)(v57 + 24)) == 0 || (*(unsigned char *)(v57 + 3) & 1) == 0)
          || (uint64_t v58 = *(void *)(v57 + 8)) == 0
          || **(_WORD **)(v58 + 16) != 124
          || *(_DWORD *)(v58 + 40) != 2)
        {
          if ((v49 & 0x80000000) != 0) {
            uint64_t v59 = (uint64_t *)(*(void *)(v48 + 24) + 16 * (v49 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v59 = (uint64_t *)(*(void *)(v48 + 272) + 8 * v49);
          }
          uint64_t v60 = *v59;
          if (v60)
          {
            if (*(unsigned char *)(v60 + 3) & 1) != 0 || (uint64_t v60 = *(void *)(v60 + 24)) != 0 && (*(unsigned char *)(v60 + 3))
            {
              uint64_t v61 = *(void *)(v60 + 8);
              if (v61)
              {
                if (**(_WORD **)(v61 + 16) == 126 && *(_DWORD *)(v61 + 40) == 2)
                {
                  unsigned int v282 = *(_DWORD *)(*(void *)(v61 + 32) + 36);
                  (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 56))(a4, a2);
                  llvm::MachineOperand::setReg(*(void *)(a2 + 32) + 32, v282);
                  (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 64))(a4, a2);
                  if (v726 >= HIDWORD(v726)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_DWORD *)v725 + v726) = v46;
                  LODWORD(v726) = v726 + 1;
                  uint64_t v283 = a1[1];
                  if ((v49 & 0x80000000) != 0) {
                    uint64_t v284 = (uint64_t *)(*(void *)(v283 + 24) + 16 * (v49 & 0x7FFFFFFF) + 8);
                  }
                  else {
                    uint64_t v284 = (uint64_t *)(*(void *)(v283 + 272) + 8 * v49);
                  }
                  uint64_t v285 = *v284;
                  if ((*(unsigned char *)(v285 + 3) & 1) == 0) {
                    uint64_t v285 = *(void *)(v285 + 24);
                  }
                  uint64_t v78 = *(void *)(v285 + 8);
                  uint64_t v76 = (uint64_t)a1;
                  uint64_t v77 = a2;
                  goto LABEL_189;
                }
              }
            }
          }
          if ((v49 & 0x80000000) != 0) {
            int v62 = (uint64_t *)(*(void *)(v48 + 24) + 16 * (v49 & 0x7FFFFFFF) + 8);
          }
          else {
            int v62 = (uint64_t *)(*(void *)(v48 + 272) + 8 * v49);
          }
          uint64_t v63 = *v62;
          if ((*(unsigned char *)(v63 + 3) & 1) == 0) {
            uint64_t v63 = *(void *)(v63 + 24);
          }
          uint64_t v64 = *(void *)(v63 + 8);
          if (**(_WORD **)(v64 + 16) != 120) {
            goto LABEL_82;
          }
          int v238 = v46 < 0 && (v46 & 0x7FFFFFFFu) < *(_DWORD *)(v48 + 432)
               ? *(void **)(*(void *)(v48 + 424) + 8 * (v46 & 0x7FFFFFFF))
               : 0;
          uint64_t v732 = (uint64_t)v238;
          v728 = v238;
          LODWORD(v735) = 120;
          uint64_t v736 = (uint64_t)&v728;
          uint64_t v737 = 1;
          uint64_t v738 = 0;
          uint64_t v739 = 0;
          if (sub_1CC72D410(a1[2], (uint64_t)&v735))
          {
LABEL_82:
            uint64_t v9 = sub_1CC7145A0(a1, a2, v5, (uint64_t)&v725);
            goto LABEL_433;
          }
          uint64_t v239 = *(void *)(v64 + 32);
          uint64_t v240 = (llvm::ConstantInt *****)*a1;
          int v241 = v46;
          LODWORD(v735) = v46;
          LODWORD(v736) = 1;
          uint64_t v242 = *(void *)(v239 + 48);
          unsigned int v245 = sub_1CB8F1DC4((unint64_t *)&v732);
          if (v243 == 1) {
          if (v245 > 0x40)
          }
          {
            if (*(_DWORD *)(v242 + 32) != v245) {
              operator new[]();
            }
            sub_1CD0463BC((uint64_t)&v728, v242 + 24);
          }
          else
          {
            uint64_t v246 = *(void *)(v242 + 24);
            LODWORD(v729) = v245;
            unint64_t v247 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v245;
            if (!v245) {
              unint64_t v247 = 0;
            }
            v728 = (void *)(v247 & v246);
          }
          unsigned int v248 = llvm::ConstantInt::get(***v240[1], (llvm::LLVMContext *)&v728, v244);
          ((void (*)(llvm::ConstantInt *****, uint64_t **, void *))(*v240)[2])(v240, &v735, v248);
          if (v729 >= 0x41 && v728) {
            MEMORY[0x1D25D9CB0](v728, 0x1000C8000313F17);
          }
          uint64_t v249 = v5;
          if (v726 >= HIDWORD(v726)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v725 + v726) = v241;
          LODWORD(v726) = v726 + 1;
LABEL_329:
          unsigned int v250 = *(_DWORD *)(v249 + 8);
          if (v250 >= *(_DWORD *)(v249 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)v249 + 8 * v250) = a2;
          ++*(_DWORD *)(v249 + 8);
          uint64_t v76 = (uint64_t)a1;
          uint64_t v77 = a2;
          uint64_t v78 = v64;
          uint64_t v79 = v249;
          goto LABEL_190;
        }
        int v171 = 0;
        int v170 = *(_DWORD *)(*(void *)(v58 + 32) + 36);
      }
      int v710 = v171;
      if (v46 < 0 && (v46 & 0x7FFFFFFFu) < *(_DWORD *)(v48 + 432)) {
        unint64_t v172 = *(void *)(*(void *)(v48 + 424) + 8 * (v46 & 0x7FFFFFFF));
      }
      else {
        unint64_t v172 = 0;
      }
      v728 = (void *)v172;
      LODWORD(v735) = 65;
      uint64_t v736 = (uint64_t)&v728;
      uint64_t v737 = 1;
      uint64_t v738 = 0;
      uint64_t v739 = 0;
      if (sub_1CC72D410(a1[2], (uint64_t)&v735) - 9 < 2
        || sub_1CC714CF8((uint64_t)a1, v172))
      {
        goto LABEL_432;
      }
      uint64_t v717 = v5;
      int v706 = v46;
      if ((v49 & 0x80000000) != 0
        && (uint64_t v174 = a1[1], (v49 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v174 + 432)))
      {
        unint64_t v175 = *(void *)(*(void *)(v174 + 424) + 8 * (v49 & 0x7FFFFFFF));
        if (v175)
        {
          unsigned int v176 = v175 >> 3;
          goto LABEL_220;
        }
        if ((v175 & 4) != 0)
        {
          if ((v175 & 2) != 0) {
            unsigned int v176 = (unsigned __int16)(v175 >> 19);
          }
          else {
            unsigned int v176 = v175 >> 19;
          }
LABEL_220:
          LODWORD(v733) = v176;
          if (v176 > 0x40) {
            operator new[]();
          }
          if (v176) {
            unint64_t v177 = 0xFFFFFFFFFFFFFFFFLL >> ~(v176 + 63);
          }
          else {
            unint64_t v177 = 0;
          }
          uint64_t v732 = v177;
          uint64_t v715 = a4;
          std::string::size_type v178 = (llvm::ConstantInt *****)*a1;
          v735 = (uint64_t *)v172;
          LODWORD(v736) = 0;
          if (v172)
          {
            unsigned int v179 = v172 >> 3;
          }
          else if ((v172 & 4) != 0)
          {
            if ((v172 & 2) != 0) {
              unsigned int v179 = (unsigned __int16)(v172 >> 19);
            }
            else {
              unsigned int v179 = v172 >> 19;
            }
          }
          else
          {
            unsigned int v179 = (unsigned __int16)(v172 >> 3);
          }
          if (v179 > 0x40)
          {
            if (v176 != v179) {
              operator new[]();
            }
            sub_1CD0463BC((uint64_t)&v728, (uint64_t)&v732);
          }
          else
          {
            LODWORD(v729) = v179;
            unint64_t v180 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v179;
            if (!v179) {
              unint64_t v180 = 0;
            }
            v728 = (void *)(v180 & v177);
          }
          a4 = v715;
          uint64_t v181 = llvm::ConstantInt::get(***v178[1], (llvm::LLVMContext *)&v728, v173);
          uint64_t v182 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t **, void *))(*v178)[2])(v178, &v735, v181);
          uint64_t v184 = v183;
          if (v729 >= 0x41 && v728) {
            MEMORY[0x1D25D9CB0](v728, 0x1000C8000313F17);
          }
          int v185 = v710;
          if (v170)
          {
            if (v170 < 0 && (uint64_t v510 = a1[1], (v170 & 0x7FFFFFFFu) < *(_DWORD *)(v510 + 432))) {
              uint64_t v511 = *(void *)(*(void *)(v510 + 424) + 8 * (v170 & 0x7FFFFFFF));
            }
            else {
              uint64_t v511 = 0;
            }
            if (v172 != v511)
            {
              long long v512 = (void *)*a1;
              v728 = (void *)v172;
              LODWORD(v729) = 0;
              LODWORD(v735) = v170;
              LODWORD(v737) = 0;
              sub_1CD62DA74(v512, (unint64_t *)&v728, (int *)&v735);
              int v170 = *(_DWORD *)(*(void *)(v513 + 32) + 4);
            }
            a4 = v715;
            int v185 = v710;
          }
          if (v185 < 0)
          {
            uint64_t v186 = a1[1];
            if ((v185 & 0x7FFFFFFFu) >= *(_DWORD *)(v186 + 432)) {
              uint64_t v187 = 0;
            }
            else {
              uint64_t v187 = *(void *)(*(void *)(v186 + 424) + 8 * (v185 & 0x7FFFFFFF));
            }
            if (v172 != v187)
            {
              int v254 = (void *)*a1;
              v728 = (void *)v172;
              LODWORD(v729) = 0;
              LODWORD(v735) = v185;
              LODWORD(v737) = 0;
              sub_1CC738034(v254, 118, (unint64_t *)&v728, (int *)&v735);
              int v185 = *(_DWORD *)(*(void *)(v255 + 32) + 4);
            }
            goto LABEL_236;
          }
          if (v185)
          {
            if (v710 < 0 && (uint64_t v553 = a1[1], (v710 & 0x7FFFFFFFu) < *(_DWORD *)(v553 + 432))) {
              uint64_t v554 = *(void *)(*(void *)(v553 + 424) + 8 * (v710 & 0x7FFFFFFF));
            }
            else {
              uint64_t v554 = 0;
            }
            if (v172 == v554)
            {
              a4 = v715;
              int v185 = v710;
LABEL_236:
              uint64_t v188 = *a1;
              if (v170) {
                int v189 = v170;
              }
              else {
                int v189 = v185;
              }
              LODWORD(v728) = v706;
              LODWORD(v729) = 1;
              LODWORD(v735) = v189;
              LODWORD(v737) = 0;
              uint64_t v738 = v182;
              uint64_t v739 = v184;
              int v740 = 1;
              (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t **, uint64_t, void))(*(void *)v188 + 32))(v188, 65, &v728, 1, &v735, 2, 0);
              uint64_t v190 = a1[1];
              if ((v49 & 0x80000000) != 0) {
                BOOL v191 = (uint64_t *)(*(void *)(v190 + 24) + 16 * (v49 & 0x7FFFFFFF) + 8);
              }
              else {
                BOOL v191 = (uint64_t *)(*(void *)(v190 + 272) + 8 * v49);
              }
              uint64_t v192 = *v191;
              if (!v192) {
                goto LABEL_823;
              }
              if (*(unsigned char *)(v192 + 3)) {
                goto LABEL_243;
              }
              uint64_t v192 = *(void *)(v192 + 24);
              if (!v192)
              {
                uint64_t v193 = 0;
                a4 = v715;
                goto LABEL_244;
              }
              a4 = v715;
              if (*(unsigned char *)(v192 + 3)) {
LABEL_243:
              }
                uint64_t v193 = *(void *)(v192 + 8);
              else {
LABEL_823:
              }
                uint64_t v193 = 0;
LABEL_244:
              unsigned int v194 = *(_DWORD *)(v717 + 8);
              if (v194 >= *(_DWORD *)(v717 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)v717 + 8 * v194) = a2;
              ++*(_DWORD *)(v717 + 8);
              sub_1CC714A08((uint64_t)a1, a2, v193, v717, 0);
              if (v733 >= 0x41 && v732) {
                MEMORY[0x1D25D9CB0](v732, 0x1000C8000313F17);
              }
              goto LABEL_191;
            }
            uint64_t v570 = (void *)*a1;
            v728 = (void *)v172;
            LODWORD(v729) = 0;
            LODWORD(v735) = v710;
            LODWORD(v737) = 0;
            sub_1CC738034(v570, 118, (unint64_t *)&v728, (int *)&v735);
            int v185 = *(_DWORD *)(*(void *)(v571 + 32) + 4);
          }
          a4 = v715;
          goto LABEL_236;
        }
      }
      else
      {
        unint64_t v175 = 0;
      }
      unsigned int v176 = (unsigned __int16)(v175 >> 3);
      goto LABEL_220;
    default:
      switch(**(_WORD **)(a2 + 16))
      {
        case 'I':
          uint64_t v269 = *(void *)(a2 + 32);
          uint64_t v270 = *(unsigned int *)(v269 + 36);
          uint64_t v271 = a1[1];
          do
          {
            uint64_t v272 = v270;
            if ((v270 & 0x80000000) != 0) {
              uint64_t v273 = (uint64_t *)(*(void *)(v271 + 24) + 16 * (v270 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v273 = (uint64_t *)(*(void *)(v271 + 272) + 8 * v270);
            }
            uint64_t v274 = *v273;
            if (!v274) {
              break;
            }
            if ((*(unsigned char *)(v274 + 3) & 1) == 0)
            {
              uint64_t v274 = *(void *)(v274 + 24);
              if (!v274 || (*(unsigned char *)(v274 + 3) & 1) == 0) {
                break;
              }
            }
            uint64_t v275 = *(void *)(v274 + 8);
            if (!v275) {
              break;
            }
            if (**(_WORD **)(v275 + 16) != 19) {
              break;
            }
            if (*(_DWORD *)(v275 + 40) != 2) {
              break;
            }
            uint64_t v270 = *(unsigned int *)(*(void *)(v275 + 32) + 36);
            if ((v270 & 0x80000000) == 0) {
              break;
            }
          }
          while ((v270 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v271 + 432)
               && (*(void *)(*(void *)(v271 + 424) + 8 * (v270 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) != 0);
          if ((v272 & 0x80000000) != 0) {
            long long v276 = (uint64_t *)(*(void *)(v271 + 24) + 16 * (v272 & 0x7FFFFFFF) + 8);
          }
          else {
            long long v276 = (uint64_t *)(*(void *)(v271 + 272) + 8 * v272);
          }
          uint64_t v277 = *v276;
          if (!v277) {
            goto LABEL_432;
          }
          if ((*(unsigned char *)(v277 + 3) & 1) == 0)
          {
            uint64_t v277 = *(void *)(v277 + 24);
            if (!v277 || (*(unsigned char *)(v277 + 3) & 1) == 0) {
              goto LABEL_432;
            }
          }
          uint64_t v278 = *(void *)(v277 + 8);
          if (!v278) {
            goto LABEL_432;
          }
          unsigned int v279 = **(unsigned __int16 **)(v278 + 16) - 76;
          if (v279 > 3 || v279 == 2) {
            goto LABEL_432;
          }
          uint64_t v720 = v5;
          int v406 = *(_DWORD *)(v269 + 4);
          if (v406 < 0 && (v406 & 0x7FFFFFFFu) < *(_DWORD *)(v271 + 432)) {
            uint64_t v407 = *(void *)(*(void *)(v271 + 424) + 8 * (v406 & 0x7FFFFFFF));
          }
          else {
            uint64_t v407 = 0;
          }
          uint64_t v732 = v407;
          if ((v272 & 0x80000000) != 0 && (unint64_t v408 = v272 & 0x7FFFFFFF, v408 < *(unsigned int *)(v271 + 432))) {
            unint64_t v409 = *(void *)(*(void *)(v271 + 424) + 8 * v408);
          }
          else {
            unint64_t v409 = 0;
          }
          unint64_t v724 = v409;
          int v411 = sub_1CB8F1DC4((unint64_t *)&v732);
          if (v410 == 1) {
          unsigned int v412 = *(_DWORD *)(*(void *)(a2 + 32) + 80);
          }
          unint64_t v413 = (*(_DWORD *)(v278 + 40) - 1);
          unint64_t v415 = sub_1CB8F1DC4(&v724);
          if (v414 == 1) {
          unsigned int v416 = v412 / (v415 / v413);
          }
          unsigned int v417 = (v411 + v412 - 1) / (v415 / v413);
          uint64_t v9 = v416 == v417;
          if (v416 == v417)
          {
            uint64_t v418 = *a1;
            *(void *)(v418 + 40) = *(void *)(a2 + 24);
            *(void *)(v418 + 48) = a2;
            uint64_t v419 = (void *)*a1;
            LODWORD(v728) = v406;
            LODWORD(v729) = 1;
            LODWORD(v735) = *(_DWORD *)(*(void *)(v278 + 32) + 32 * (v416 + 1) + 4);
            LODWORD(v737) = 0;
            sub_1CC7383D8(v419, (unint64_t *)&v728, (int *)&v735, v412 % (v415 / v413));
            if (v726 >= HIDWORD(v726)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v725 + v726) = v406;
            LODWORD(v726) = v726 + 1;
            sub_1CC714514((uint64_t)a1, a2, v278, v720);
          }
          goto LABEL_433;
        case 'J':
          int v80 = *(_DWORD *)(a2 + 40);
          uint64_t v81 = *(void *)(a2 + 32);
          size_t v695 = (v80 - 1);
          uint64_t v82 = *(unsigned int *)(v81 + 32 * v695 + 4);
          uint64_t v83 = a1[1];
          if ((v82 & 0x80000000) != 0) {
            uint64_t v84 = (uint64_t *)(*(void *)(v83 + 24) + 16 * (v82 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v84 = (uint64_t *)(*(void *)(v83 + 272) + 8 * v82);
          }
          uint64_t v85 = *v84;
          if ((*(unsigned char *)(v85 + 3) & 1) == 0) {
            uint64_t v85 = *(void *)(v85 + 24);
          }
          uint64_t v86 = *(void *)(v85 + 8);
          int v87 = *(_DWORD *)(*(void *)(v86 + 32) + 4);
          if ((v87 & 0x80000000) == 0) {
            goto LABEL_432;
          }
          uint64_t v88 = v87 & 0x7FFFFFFF;
          unint64_t v89 = *(unsigned int *)(v83 + 432);
          if (v88 >= v89) {
            goto LABEL_432;
          }
          uint64_t v90 = *(void *)(v83 + 424);
          if ((*(void *)(v90 + 8 * v88) & 0xFFFFFFFFFFFFFFF9) == 0) {
            goto LABEL_432;
          }
          uint64_t v91 = a4 + 8;
          while (1)
          {
            int v92 = *(unsigned __int16 **)(v86 + 16);
            unsigned int v93 = *v92;
            BOOL v94 = v93 > 0x2C;
            uint64_t v95 = (1 << v93) & 0x1C0000080000;
            BOOL v96 = v94 || v95 == 0;
            if (v96) {
              break;
            }
            int v265 = *(_DWORD *)(*(void *)(v86 + 32) + 36);
            if ((v265 & 0x80000000) == 0) {
              break;
            }
            uint64_t v266 = v265 & 0x7FFFFFFF;
            if (v266 >= v89 || (*(void *)(v90 + 8 * v266) & 0xFFFFFFFFFFFFFFF9) == 0) {
              break;
            }
            uint64_t v86 = 0;
            uint64_t v267 = *(void *)(*(void *)(v83 + 24) + 16 * v266 + 8);
            if (v267)
            {
              if ((*(unsigned char *)(v267 + 3) & 1) != 0
                || (uint64_t v86 = 0, (v267 = *(void *)(v267 + 24)) != 0) && (uint64_t v86 = 0, (*(unsigned char *)(v267 + 3) & 1) != 0))
              {
                uint64_t v86 = *(void *)(v267 + 8);
              }
            }
          }
          if ((v82 & 0x80000000) != 0 && (v82 & 0x7FFFFFFF) < v89) {
            unint64_t v705 = *(void *)(v90 + 8 * (v82 & 0x7FFFFFFF));
          }
          else {
            unint64_t v705 = 0;
          }
          int v97 = *(_DWORD *)(v81 + 4);
          if (v97 < 0 && (uint64_t v195 = v97 & 0x7FFFFFFF, v195 < v89)) {
            uint64_t v98 = *(void *)(v90 + 8 * v195);
          }
          else {
            uint64_t v98 = 0;
          }
          unint64_t v701 = v98;
          uint64_t v722 = v98;
          uint64_t v99 = *(void *)(v86 + 32);
          unsigned int v100 = *((unsigned __int8 *)v92 + 4);
          if ((v92[4] & 2) == 0 || (int v222 = *(_DWORD *)(v86 + 40), v222 == v100))
          {
            unsigned int v101 = *((unsigned __int8 *)v92 + 4);
          }
          else
          {
            int v223 = v222 - 1;
            unsigned int v101 = *((unsigned __int8 *)v92 + 4);
            do
            {
              int v224 = *(_DWORD *)(v99 + 32 * v100);
              if ((v224 & 0x10000FF) != 0x1000000) {
                break;
              }
              v101 += (v224 & 0x2000000) == 0;
              if (v223 == v100) {
                break;
              }
              ++v100;
            }
            while ((v224 & 0x2000000) == 0);
          }
          uint64_t v714 = a4;
          int v694 = v80;
          unsigned int v102 = 0;
          if (v101)
          {
            uint64_t v103 = 32 * v101 - 32;
            uint64_t v104 = (int *)(v99 + 4);
            do
            {
              int v105 = *v104;
              v104 += 8;
              if (v105 == v82)
              {
                BOOL v106 = 1;
              }
              else
              {
                ++v102;
                BOOL v106 = v103 == 0;
              }
              v103 -= 32;
            }
            while (!v106);
          }
          uint64_t v107 = *a1;
          *(void *)(v107 + 40) = *(void *)(a2 + 24);
          *(void *)(v107 + 48) = a2;
          uint64_t v108 = (unsigned __int8 **)(a2 + 56);
          uint64_t v109 = (uint64_t *)(v107 + 32);
          if (a2 + 56 == v107 + 32) {
            goto LABEL_128;
          }
          BOOL v110 = (unsigned __int8 *)*v109;
          if (!*v109) {
            goto LABEL_126;
          }
          int v251 = *v110;
          if ((v251 - 4) > 0x1E)
          {
            if ((v251 - 3) >= 0xFFFFFFFE) {
              uint64_t v260 = *v109;
            }
            else {
              uint64_t v260 = 0;
            }
            if ((v251 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v253 = v260 + 8;
LABEL_362:
              v735 = v109;
              sub_1CC5FA668(v253 + 16, &v735);
              goto LABEL_126;
            }
            if (v251 == 3) {
              *((void *)v110 + 1) = 0;
            }
          }
          else if ((v110[1] & 0x7F) == 2 || *((_DWORD *)v110 + 3))
          {
            uint64_t v252 = *((void *)v110 + 2);
            if ((v252 & 4) != 0)
            {
              unint64_t v253 = v252 & 0xFFFFFFFFFFFFFFF8;
              if (v253) {
                goto LABEL_362;
              }
            }
          }
LABEL_126:
          uint64_t v111 = *v108;
          *uint64_t v109 = (uint64_t)*v108;
          if (v111) {
            llvm::MetadataTracking::track((uint64_t)v109, v111, 2);
          }
LABEL_128:
          uint64_t v697 = v91;
          uint64_t v709 = v86;
          uint64_t v113 = *a1;
          uint64_t v112 = a1[1];
          uint64_t v114 = a1[2];
          v728 = (void *)v112;
          uint64_t v729 = v113;
          uint64_t v730 = v114;
          int v731 = 0;
          uint64_t v115 = (*(_DWORD *)(a2 + 40) - 1);
          int v116 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
          if (v116 < 0 && (uint64_t v117 = v116 & 0x7FFFFFFF, v117 < *(_DWORD *)(v112 + 432))) {
            uint64_t v118 = *(uint64_t **)(*(void *)(v112 + 424) + 8 * v117);
          }
          else {
            uint64_t v118 = 0;
          }
          v735 = v118;
          if (v115 >= 0x3A) {
            operator new();
          }
          unint64_t v119 = (v115 << 58) | 1;
          if (v115)
          {
            for (uint64_t i = 0; i != v115; ++i)
            {
              uint64_t v121 = *(unsigned int *)(*(void *)(a2 + 32) + 32 * i + 4);
              if ((v121 & 0x80000000) != 0) {
                int v122 = (uint64_t *)(v728[3] + 16 * (v121 & 0x7FFFFFFF) + 8);
              }
              else {
                int v122 = (uint64_t *)(v728[34] + 8 * v121);
              }
              uint64_t v123 = *v122;
              if (v123)
              {
                while ((*(_DWORD *)v123 & 0x81000000) != 0)
                {
                  uint64_t v123 = *(void *)(v123 + 24);
                  if (!v123) {
                    goto LABEL_139;
                  }
                }
                uint64_t v125 = sub_1CB8F1DC4((unint64_t *)&v735);
                if (v124 == 1) {
                int v731 = 0;
                }
                unsigned int v126 = sub_1CC714E1C((uint64_t *)&v728, v121, 0, v125);
                if (v126 == v121 || !v126) {
                  continue;
                }
                unsigned int v236 = (v126 & 0x80000000) != 0 && (v126 & 0x7FFFFFFF) < (unint64_t)*((unsigned int *)v728 + 108)
                     ? *(uint64_t **)(v728[53] + 8 * (v126 & 0x7FFFFFFF))
                     : 0;
                if (v236 != v735) {
                  continue;
                }
                uint64_t v237 = v697;
                sub_1CC714178(v121, v126, v728, v729, (uint64_t)&v725, v697);
                (*(void (**)(uint64_t, uint64_t))(*(void *)v237 + 32))(v237, a2);
                llvm::MachineOperand::setReg(*(void *)(a2 + 32) + 32 * i, v121);
                (*(void (**)(uint64_t, uint64_t))(*(void *)v237 + 40))(v237, a2);
                if ((v119 & 1) == 0)
                {
LABEL_315:
                  *(void *)(*(void *)v119 + 8 * (i >> 6)) |= 1 << i;
                  continue;
                }
              }
              else
              {
LABEL_139:
                if ((v119 & 1) == 0) {
                  goto LABEL_315;
                }
              }
              unint64_t v119 = v119 & 0xFC00000000000000 | (2
                                                  * (((v119 >> 1) & ~(-1 << (v119 >> 58)) | (1 << i)) & ~(-1 << (v119 >> 58)))) | 1;
            }
          }
          if (v119)
          {
            uint64_t v127 = v709;
            if ((~(-1 << (v119 >> 58)) & ~(v119 >> 1)) == 0)
            {
LABEL_148:
              unsigned int v128 = *(_DWORD *)(v5 + 8);
              if (v128 >= *(_DWORD *)(v5 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)v5 + 8 * v128) = a2;
              ++*(_DWORD *)(v5 + 8);
              uint64_t v129 = (uint64_t)a1;
              uint64_t v130 = a2;
              uint64_t v131 = v127;
              uint64_t v132 = v5;
LABEL_150:
              sub_1CC714A08(v129, v130, v131, v132, v102);
              goto LABEL_151;
            }
          }
          else
          {
            unint64_t v286 = *(unsigned int *)(v119 + 64);
            unint64_t v287 = v286 >> 6;
            if (v286 < 0x40)
            {
LABEL_1201:
              int v652 = *(_DWORD *)(v119 + 64) & 0x3F;
              unsigned int v289 = *(char **)v119;
              if (v652) {
                BOOL v292 = *(void *)(*(void *)v119 + 8 * v287) == ~(-1 << v652);
              }
              else {
                BOOL v292 = 1;
              }
            }
            else
            {
              uint64_t v288 = 0;
              unsigned int v289 = *(char **)v119;
              if (v287 <= 1) {
                uint64_t v290 = 1;
              }
              else {
                uint64_t v290 = v286 >> 6;
              }
              uint64_t v291 = 8 * v290;
              while (*(void *)&v289[v288] == -1)
              {
                v288 += 8;
                if (v291 == v288) {
                  goto LABEL_1201;
                }
              }
              BOOL v292 = 0;
            }
            if (v289 != (char *)(v119 + 16)) {
              free(v289);
            }
            MEMORY[0x1D25D9CE0](v119, 0x1080C40EF38A13ELL);
            uint64_t v127 = v709;
            if (v292) {
              goto LABEL_148;
            }
          }
          unsigned int v293 = **(unsigned __int16 **)(v127 + 16);
          if ((v705 & 1) == 0)
          {
            unsigned int v294 = 0;
            if (v293 - 74 > 0x34)
            {
              uint64_t v299 = v127;
            }
            else
            {
              if (((1 << (v293 - 74)) & 0x14300000000000) == 0)
              {
                uint64_t v299 = v127;
                unint64_t v305 = v701;
                if (v293 == 74)
                {
                  int v331 = *(_DWORD *)(*(void *)(v127 + 32) + 32 * (*(_DWORD *)(v127 + 40) - 1) + 4);
                  if (v331 < 0 && (uint64_t v357 = a1[1], (v331 & 0x7FFFFFFFu) < *(_DWORD *)(v357 + 432))) {
                    unint64_t v332 = *(void *)(*(void *)(v357 + 424) + 8 * (v331 & 0x7FFFFFFF));
                  }
                  else {
                    unint64_t v332 = 0;
                  }
                  uint64_t v333 = a1[2];
                  uint64_t v732 = v705;
                  unint64_t v733 = v332;
                  LODWORD(v735) = 74;
                  uint64_t v736 = (uint64_t)&v732;
                  uint64_t v737 = 2;
                  uint64_t v738 = 0;
                  uint64_t v739 = 0;
                  unint64_t v334 = sub_1CC72D410(v333, (uint64_t)&v735);
                  uint64_t v9 = 0;
                  switch((char)v334)
                  {
                    case 1:
                    case 3:
                      if (HIDWORD(v334) == 1) {
                        goto LABEL_540;
                      }
                      goto LABEL_523;
                    case 6:
                    case 9:
LABEL_523:
                      uint64_t v335 = v5;
                      long long v336 = (void *)*a1;
                      LODWORD(v735) = v331;
                      LODWORD(v737) = 0;
                      sub_1CC7363F0(v336, v701, (int *)&v735);
                      if (v695)
                      {
                        uint64_t v338 = v337;
                        uint64_t v339 = 0;
                        unsigned int v340 = v102 * v695;
                        do
                        {
                          sub_1CC714178(*(_DWORD *)(*(void *)(a2 + 32) + v339 + 4), *(_DWORD *)(*(void *)(v338 + 32) + 32 * v340 + 4), (void *)a1[1], *a1, (uint64_t)&v725, v697);
                          v339 += 32;
                          ++v340;
                        }
                        while (32 * v695 != v339);
                      }
                      unsigned int v341 = *(_DWORD *)(v335 + 8);
                      if (v341 >= *(_DWORD *)(v335 + 12)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *(void *)(*(void *)v335 + 8 * v341) = a2;
                      ++*(_DWORD *)(v335 + 8);
                      uint64_t v129 = (uint64_t)a1;
                      uint64_t v130 = a2;
                      uint64_t v131 = v709;
                      uint64_t v132 = v335;
                      goto LABEL_150;
                    default:
                      goto LABEL_152;
                  }
                }
LABEL_483:
                v735 = (uint64_t *)v305;
                if (v293 - 76 < 2)
                {
                  uint64_t v719 = v5;
                  size_t v358 = v695;
                  if (v294)
                  {
                    if ((v305 & 0xFFFFFFFFFFFFFFF9) != 0 && (v305 & 4) != 0) {
                      goto LABEL_485;
                    }
                    if ((v705 & 0xFFFFFFFFFFFFFFF9) == 0 || (v705 & 4) == 0) {
                      goto LABEL_485;
                    }
                    unint64_t v420 = (v705 & 2) != 0
                         ? (v705 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)(v705 >> 19)) | 2
                         : v705 & 0x8000000000000000 | (8 * (v705 >> 19)) | 1;
                    uint64_t v127 = v709;
                    if (v420 != v701) {
                      goto LABEL_485;
                    }
                    goto LABEL_1148;
                  }
                }
                else
                {
                  if (v293 != 79) {
                    goto LABEL_485;
                  }
                  uint64_t v719 = v5;
                  size_t v358 = v695;
                  if (v294)
                  {
                    if ((v305 & 0xFFFFFFFFFFFFFFF9) == 0 || (v305 & 4) == 0) {
                      goto LABEL_485;
                    }
                    if ((v705 & 2) != 0)
                    {
                      char v657 = 35;
                      char v658 = 19;
                      if ((v705 & 4) == 0) {
                        char v657 = 19;
                      }
                      unint64_t v659 = v705 >> v657;
                      if ((v705 & 4) == 0) {
                        char v658 = 3;
                      }
                      if (v705) {
                        char v658 = 3;
                      }
                      unint64_t v400 = (8 * (unsigned __int16)(v705 >> v658)) & 0xFFFFF8000007FFFFLL | ((v659 & 0xFFFFFF) << 19) | 2;
                    }
                    else
                    {
                      unint64_t v400 = v705 & 0x8000000000000000 | (v705 >> 16) & 0x7FFFFFFF8 | 1;
                    }
                    uint64_t v732 = v400;
                    unsigned int v402 = sub_1CB8F1DC4((unint64_t *)&v732);
                    if (v401 == 1) {
                    unint64_t v403 = v402;
                    }
                    unint64_t v405 = sub_1CB8F1DC4((unint64_t *)&v735);
                    if (v294 == 119)
                    {
                      if (v404 == 1) {
                      BOOL v94 = v405 > v403;
                      }
                      uint64_t v127 = v709;
                      uint64_t v5 = v719;
                      if (!v94)
                      {
LABEL_1149:
                        size_t v358 = v695;
                        unint64_t v305 = v701;
                        if (*(_DWORD *)(v299 + 40) != v694) {
                          goto LABEL_540;
                        }
                        goto LABEL_1150;
                      }
LABEL_485:
                      int v306 = **(unsigned __int16 **)(v127 + 16);
                      if ((v306 - 118) > 8 || ((1 << (v306 - 118)) & 0x143) == 0) {
                        goto LABEL_540;
                      }
                      int v308 = *(_DWORD *)(*(void *)(v127 + 32) + 36);
                      uint64_t v309 = a1[1];
                      if (v308 < 0 && (v308 & 0x7FFFFFFFu) < *(_DWORD *)(v309 + 432)) {
                        unint64_t v310 = *(void *)(*(void *)(v309 + 424) + 8 * (v308 & 0x7FFFFFFF));
                      }
                      else {
                        unint64_t v310 = 0;
                      }
                      unint64_t v311 = (*(_DWORD *)(a2 + 40) - 1);
                      unint64_t v724 = v310;
                      uint64_t v312 = *(void *)(a2 + 32);
                      int v313 = *(_DWORD *)(v312 + 4);
                      if (v313 < 0 && (uint64_t v342 = v313 & 0x7FFFFFFF, v342 < *(_DWORD *)(v309 + 432))) {
                        unint64_t v314 = *(void *)(*(void *)(v309 + 424) + 8 * v342);
                      }
                      else {
                        unint64_t v314 = 0;
                      }
                      unint64_t v723 = v314;
                      int v315 = *(_DWORD *)(v312 + 32 * v311 + 4);
                      uint64_t v718 = v5;
                      if (v315 < 0 && (uint64_t v343 = v315 & 0x7FFFFFFF, v343 < *(_DWORD *)(v309 + 432))) {
                        unint64_t v316 = *(void *)(*(void *)(v309 + 424) + 8 * v343);
                      }
                      else {
                        unint64_t v316 = 0;
                      }
                      unsigned int v318 = sub_1CB8F1DC4(&v724);
                      if (v317 == 1) {
                      unsigned int v320 = sub_1CB8F1DC4(&v723);
                      }
                      if (v319 == 1) {
                      if (v306 != 119)
                      }
                        goto LABEL_540;
                      if ((v316 & 0xFFFFFFFFFFFFFFF9) != 0 && (v316 & 4) != 0)
                      {
                        uint64_t v321 = v316 & 1;
                        char v322 = 3;
                        if ((v316 & 1) == 0) {
                          char v322 = 19;
                        }
                        unint64_t v323 = v316 >> v322;
                        if ((v316 & 2) != 0) {
                          unint64_t v324 = (v316 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v323) | 2;
                        }
                        else {
                          unint64_t v324 = v316 & 0x8000000000000000 | (8 * v323) | 1;
                        }
                        if ((v723 & 0xFFFFFFFFFFFFFFF9) != 0 && (v723 & 4) != 0)
                        {
                          char v325 = 3;
                          if ((v723 & 1) == 0) {
                            char v325 = 19;
                          }
                          unint64_t v326 = v723 >> v325;
                          if ((v723 & 2) != 0) {
                            unint64_t v327 = (v723 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v326) | 2;
                          }
                          else {
                            unint64_t v327 = v723 & 0x8000000000000000 | (8 * v326) | 1;
                          }
                          if (v324 == v327)
                          {
                            unsigned int v328 = v724;
                            uint64_t v329 = 0x800000000000000;
                            if ((v724 & 2) == 0) {
                              uint64_t v329 = 0x8000000000000;
                            }
                            if ((v329 & v724) != 0)
                            {
                              llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v319);
                              unsigned int v328 = v724;
                            }
                            unint64_t v330 = (unsigned __int16)(v328 >> 3) / v311;
LABEL_544:
                            unint64_t v344 = sub_1CD6133E4(&v724, v330);
                            uint64_t v732 = v344;
                            unint64_t v733 = v724;
                            LODWORD(v735) = 74;
                            uint64_t v736 = (uint64_t)&v732;
                            uint64_t v737 = 2;
                            uint64_t v738 = 0;
                            uint64_t v739 = 0;
                            if (sub_1CC72D410(a1[2], (uint64_t)&v735) - 11 <= 0xFFFFFFFD)
                            {
                              uint64_t v345 = *a1;
                              *(void *)(v345 + 40) = *(void *)(a2 + 24);
                              *(void *)(v345 + 48) = a2;
                              unsigned int v346 = (void *)*a1;
                              LODWORD(v735) = v308;
                              LODWORD(v737) = 0;
                              sub_1CC7363F0(v346, v344, (int *)&v735);
                              if (v311)
                              {
                                uint64_t v348 = v347;
                                uint64_t v349 = 0;
                                do
                                {
                                  int v350 = *(_DWORD *)(*(void *)(a2 + 32) + v349 + 4);
                                  if (v726 >= (unint64_t)HIDWORD(v726)) {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                                  }
                                  *((_DWORD *)v725 + v726) = v350;
                                  LODWORD(v726) = v726 + 1;
                                  uint64_t v351 = *a1;
                                  LODWORD(v732) = v350;
                                  LODWORD(v733) = 1;
                                  LODWORD(v735) = *(_DWORD *)(*(void *)(v348 + 32) + v349 + 4);
                                  LODWORD(v737) = 0;
                                  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t **, uint64_t, void))(*(void *)v351 + 32))(v351, 119, &v732, 1, &v735, 1, 0);
                                  v349 += 32;
                                }
                                while (32 * v311 != v349);
                              }
                              uint64_t v352 = v718;
                              unsigned int v353 = *(_DWORD *)(v718 + 8);
                              if (v353 >= *(_DWORD *)(v718 + 12)) {
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                              }
                              *(void *)(*(void *)v718 + 8 * v353) = a2;
                              ++*(_DWORD *)(v718 + 8);
                              uint64_t v354 = (uint64_t)a1;
                              uint64_t v355 = a2;
                              uint64_t v356 = v127;
LABEL_1189:
                              uint64_t v565 = v352;
                              goto LABEL_1190;
                            }
LABEL_540:
                            uint64_t v9 = 0;
                            goto LABEL_152;
                          }
                        }
                        else if (v324 == v723)
                        {
                          unint64_t v330 = 1;
                          goto LABEL_544;
                        }
                      }
                      else
                      {
                        uint64_t v321 = v316 & 1;
                      }
                      uint64_t v9 = 0;
                      if ((v724 & 1) == 0 || !v321) {
                        goto LABEL_152;
                      }
                      if (((v723 & 0xFFFFFFFFFFFFFFF9) == 0 || (v723 & 4) == 0) && !(v318 % v320))
                      {
                        unint64_t v702 = v318 / v320;
                        uint64_t v732 = v723;
                        unint64_t v733 = v724;
                        LODWORD(v735) = 74;
                        uint64_t v736 = (uint64_t)&v732;
                        uint64_t v737 = 2;
                        uint64_t v738 = 0;
                        uint64_t v739 = 0;
                        if (sub_1CC72D410(a1[2], (uint64_t)&v735) - 9 >= 2)
                        {
                          int v698 = v308;
                          v735 = &v737;
                          uint64_t v736 = 0x800000000;
                          sub_1CBA0E058((uint64_t)&v735, v702, 0);
                          if (v320 <= v318)
                          {
                            unint64_t v380 = 0;
                            if (v702 <= 1) {
                              uint64_t v381 = 1;
                            }
                            else {
                              uint64_t v381 = v702;
                            }
                            uint64_t v370 = v709;
                            do
                            {
                              if (v380 >= v311)
                              {
                                uint64_t v383 = a1[1];
                                unint64_t v384 = v723;
                                int v382 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v383, "", 0);
                                unint64_t v385 = v382 & 0x7FFFFFFF;
                                *(void *)(*(void *)(v383 + 24) + 16 * v385) = 4;
                                unint64_t v386 = *(unsigned int *)(v383 + 432);
                                if (v385 >= v386)
                                {
                                  uint64_t v387 = *(void *)(v383 + 440);
                                  if (v385 >= *(unsigned int *)(v383 + 436)) {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                                  }
                                  int v388 = *(_DWORD *)(v383 + 432);
                                  uint64_t v389 = v385 + 1 - v386;
                                  if (v389)
                                  {
                                    uint64_t v390 = (void *)(*(void *)(v383 + 424) + 8 * v386);
                                    uint64_t v391 = ~v385 + v386;
                                    do
                                    {
                                      *v390++ = v387;
                                      BOOL v392 = __CFADD__(v391++, 1);
                                    }
                                    while (!v392);
                                    int v388 = *(_DWORD *)(v383 + 432);
                                  }
                                  *(_DWORD *)(v383 + 432) = v388 + v389;
                                }
                                *(void *)(*(void *)(v383 + 424) + 8 * v385) = v384;
                                uint64_t v393 = *(void *)(v383 + 8);
                                if (v393) {
                                  (*(void (**)(uint64_t))(*(void *)v393 + 24))(v393);
                                }
                                uint64_t v370 = v709;
                              }
                              else
                              {
                                int v382 = *(_DWORD *)(*(void *)(a2 + 32) + 32 * v380 + 4);
                              }
                              unsigned int v368 = (char *)v735;
                              *((_DWORD *)v735 + v380++) = v382;
                            }
                            while (v380 != v381);
                            uint64_t v369 = v718;
                          }
                          else
                          {
                            unsigned int v368 = (char *)v735;
                            uint64_t v369 = v718;
                            uint64_t v370 = v709;
                          }
                          uint64_t v394 = *a1;
                          *(void *)(v394 + 40) = *(void *)(a2 + 24);
                          *(void *)(v394 + 48) = a2;
                          uint64_t v395 = *a1;
                          LODWORD(v732) = v698;
                          int v734 = 0;
                          sub_1CC738BB8(v395, v368, v736, (uint64_t)&v732);
                          sub_1CB925718((unsigned int *)&v725, v735, (unsigned char *)v735 + 4 * v702);
                          unsigned int v396 = *(_DWORD *)(v369 + 8);
                          if (v396 >= *(_DWORD *)(v369 + 12)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *(void *)(*(void *)v369 + 8 * v396) = a2;
                          ++*(_DWORD *)(v369 + 8);
                          sub_1CC714A08((uint64_t)a1, a2, v370, v369, 0);
                          if (v735 != &v737) {
                            free(v735);
                          }
LABEL_151:
                          uint64_t v9 = 1;
LABEL_152:
                          a4 = v714;
                          goto LABEL_433;
                        }
                      }
                      goto LABEL_540;
                    }
                    if (v404 == 1) {
                    BOOL v392 = v405 >= v403;
                    }
                    uint64_t v127 = v709;
                    uint64_t v5 = v719;
                    if (!v392) {
                      goto LABEL_485;
                    }
LABEL_1148:
                    uint64_t v719 = v5;
                    goto LABEL_1149;
                  }
                }
                uint64_t v359 = (*(_DWORD *)(v299 + 40) - 1);
                if (v359 < v358)
                {
                  unsigned int v360 = v358 / v359;
                  if (v358 % v359) {
                    goto LABEL_540;
                  }
                  uint64_t v361 = *a1;
                  *(void *)(v361 + 40) = *(void *)(a2 + 24);
                  *(void *)(v361 + 48) = a2;
                  uint64_t v362 = 0;
                  if (v360 <= 1) {
                    unsigned int v363 = 1;
                  }
                  else {
                    unsigned int v363 = v358 / v359;
                  }
                  unsigned int v711 = v363;
                  do
                  {
                    LODWORD(v364) = 0;
                    v735 = &v737;
                    uint64_t v736 = 0x800000000;
                    unsigned int v365 = v360 * v362;
                    unsigned int v366 = v711;
                    do
                    {
                      if (v364 >= HIDWORD(v736)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((_DWORD *)v735 + v364) = *(_DWORD *)(*(void *)(a2 + 32) + 32 * v365 + 4);
                      uint64_t v364 = (v736 + 1);
                      LODWORD(v736) = v736 + 1;
                      ++v365;
                      --v366;
                    }
                    while (v366);
                    uint64_t v367 = *a1;
                    ++v362;
                    LODWORD(v732) = *(_DWORD *)(*(void *)(v299 + 32) + 32 * v362 + 4);
                    int v734 = 0;
                    sub_1CC738BB8(v367, (char *)v735, v364, (uint64_t)&v732);
                    sub_1CB925718((unsigned int *)&v725, v735, (unsigned char *)v735 + 4 * v736);
                    if (v735 != &v737) {
                      free(v735);
                    }
                  }
                  while (v362 != v359);
                  goto LABEL_1187;
                }
                if (v359 > v358)
                {
                  unsigned int v371 = v359 / v358;
                  if (v359 % v358) {
                    goto LABEL_540;
                  }
                  uint64_t v372 = *a1;
                  *(void *)(v372 + 40) = *(void *)(a2 + 24);
                  *(void *)(v372 + 48) = a2;
                  uint64_t v373 = 0;
                  if (v371 <= 1) {
                    int v374 = 1;
                  }
                  else {
                    int v374 = v371;
                  }
                  do
                  {
                    LODWORD(v375) = 0;
                    v735 = &v737;
                    uint64_t v736 = 0x800000000;
                    LODWORD(v376) = v371 * v373;
                    int v377 = v374;
                    do
                    {
                      uint64_t v376 = (v376 + 1);
                      if (v375 >= HIDWORD(v736)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((_DWORD *)v735 + v375) = *(_DWORD *)(*(void *)(v299 + 32) + 32 * v376 + 4);
                      uint64_t v375 = (v736 + 1);
                      LODWORD(v736) = v736 + 1;
                      --v377;
                    }
                    while (v377);
                    int v378 = *(_DWORD *)(*(void *)(a2 + 32) + 32 * v373 + 4);
                    uint64_t v379 = *a1;
                    LODWORD(v732) = v378;
                    LODWORD(v733) = 1;
                    sub_1CC73661C(v379, (uint64_t)&v732, (int *)v735, v375);
                    if (v726 >= (unint64_t)HIDWORD(v726)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((_DWORD *)v725 + v726) = v378;
                    LODWORD(v726) = v726 + 1;
                    if (v735 != &v737) {
                      free(v735);
                    }
                    ++v373;
                  }
                  while (v373 != v695);
                  goto LABEL_1187;
                }
LABEL_1150:
                int v621 = *(_DWORD *)(*(void *)(v299 + 32) + 36);
                if (v621 < 0 && (uint64_t v650 = a1[1], v651 = v621 & 0x7FFFFFFF, v651 < *(_DWORD *)(v650 + 432))) {
                  unint64_t v622 = *(void *)(*(void *)(v650 + 424) + 8 * v651);
                }
                else {
                  unint64_t v622 = 0;
                }
                if (v305 == v622) {
                  unsigned int v623 = 0;
                }
                else {
                  unsigned int v623 = 82;
                }
                if (v294) {
                  uint64_t v624 = v294;
                }
                else {
                  uint64_t v624 = v623;
                }
                BOOL v96 = v305 == v622;
                unint64_t v724 = v622;
                uint64_t v625 = *a1;
                uint64_t v9 = !v96 || v294 != 0;
                *(void *)(v625 + 40) = *(void *)(a2 + 24);
                *(void *)(v625 + 48) = a2;
                if (v9 == 1)
                {
                  if (v358)
                  {
                    uint64_t v626 = 0;
                    do
                    {
                      uint64_t v627 = *(unsigned int *)(*(void *)(a2 + 32) + 32 * v626 + 4);
                      uint64_t v628 = a1[1];
                      if ((v627 & 0x80000000) != 0) {
                        v629 = (uint64_t *)(*(void *)(v628 + 24) + 16 * (v627 & 0x7FFFFFFF) + 8);
                      }
                      else {
                        v629 = (uint64_t *)(*(void *)(v628 + 272) + 8 * v627);
                      }
                      ++v626;
                      uint64_t v630 = *v629;
                      if (v630)
                      {
                        int v631 = *(_DWORD *)(*(void *)(v299 + 32) + 32 * v626 + 4);
                        while ((*(unsigned char *)(v630 + 3) & 1) != 0)
                        {
                          uint64_t v630 = *(void *)(v630 + 24);
                          if (!v630) {
                            goto LABEL_1173;
                          }
                        }
                        uint64_t v632 = *a1;
                        LODWORD(v732) = v627;
                        LODWORD(v733) = 1;
                        LODWORD(v735) = v631;
                        LODWORD(v737) = 0;
                        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t **, uint64_t, void))(*(void *)v632 + 32))(v632, v624, &v732, 1, &v735, 1, 0);
                        if (v726 >= (unint64_t)HIDWORD(v726)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((_DWORD *)v725 + v726) = v627;
                        LODWORD(v726) = v726 + 1;
                      }
LABEL_1173:
                      ;
                    }
                    while (v626 != v358);
                  }
                  unsigned int v633 = *(_DWORD *)(v719 + 8);
                  if (v633 >= *(_DWORD *)(v719 + 12)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*(void *)v719 + 8 * v633) = a2;
                  ++*(_DWORD *)(v719 + 8);
                  uint64_t v634 = (uint64_t)a1;
                  uint64_t v635 = a2;
                  uint64_t v636 = v299;
                  uint64_t v637 = v719;
LABEL_1176:
                  sub_1CC714A08(v634, v635, v636, v637, 0);
                  goto LABEL_152;
                }
                if (v358)
                {
                  uint64_t v638 = 0;
                  uint64_t v639 = 32 * v358;
                  do
                  {
                    unsigned int v640 = *(_DWORD *)(*(void *)(a2 + 32) + v638 + 4);
                    unsigned int v641 = *(_DWORD *)(*(void *)(v299 + 32) + v638 + 36);
                    uint64_t v642 = sub_1CB8F1DC4((unint64_t *)&v722);
                    int v644 = v643;
                    if (v642 != sub_1CB8F1DC4(&v724) || v644 != v645) {
                      goto LABEL_152;
                    }
                    if (v722 != v724)
                    {
                      uint64_t v647 = *a1;
                      uint64_t v732 = v722;
                      LODWORD(v733) = 0;
                      LODWORD(v735) = v641;
                      LODWORD(v737) = 0;
                      sub_1CC7382B0(v647);
                      unsigned int v641 = *(_DWORD *)(*(void *)(v648 + 32) + 4);
                    }
                    sub_1CC714178(v640, v641, (void *)a1[1], *a1, (uint64_t)&v725, v697);
                    v638 += 32;
                  }
                  while (v639 != v638);
                }
LABEL_1187:
                uint64_t v352 = v719;
                unsigned int v649 = *(_DWORD *)(v719 + 8);
                if (v649 >= *(_DWORD *)(v719 + 12)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)v719 + 8 * v649) = a2;
                ++*(_DWORD *)(v719 + 8);
                uint64_t v354 = (uint64_t)a1;
                uint64_t v355 = a2;
                uint64_t v356 = v299;
                goto LABEL_1189;
              }
              uint64_t v295 = *(unsigned int *)(*(void *)(v127 + 32) + 36);
              uint64_t v296 = a1[1];
              if ((v295 & 0x80000000) != 0) {
                int64_t v297 = (uint64_t *)(*(void *)(v296 + 24) + 16 * (v295 & 0x7FFFFFFF) + 8);
              }
              else {
                int64_t v297 = (uint64_t *)(*(void *)(v296 + 272) + 8 * v295);
              }
              uint64_t v298 = *v297;
              if ((*(unsigned char *)(v298 + 3) & 1) == 0) {
                uint64_t v298 = *(void *)(v298 + 24);
              }
              uint64_t v299 = *(void *)(v298 + 8);
              int v300 = *(_DWORD *)(*(void *)(v299 + 32) + 4);
              if ((v300 & 0x80000000) == 0) {
                goto LABEL_485;
              }
              uint64_t v301 = v300 & 0x7FFFFFFF;
              unsigned int v302 = *(_DWORD *)(v296 + 432);
              if (v301 >= v302) {
                goto LABEL_485;
              }
              uint64_t v303 = *(void *)(v296 + 424);
              if ((*(void *)(v303 + 8 * v301) & 0xFFFFFFFFFFFFFFF9) == 0) {
                goto LABEL_485;
              }
              unsigned int v294 = **(unsigned __int16 **)(v127 + 16);
              while (1)
              {
                unsigned int v293 = **(unsigned __int16 **)(v299 + 16);
                if (v293 > 0x2C || ((1 << v293) & 0x1C0000080000) == 0) {
                  break;
                }
                int v397 = *(_DWORD *)(*(void *)(v299 + 32) + 36);
                if ((v397 & 0x80000000) == 0) {
                  break;
                }
                uint64_t v398 = v397 & 0x7FFFFFFF;
                if (v398 >= v302 || (*(void *)(v303 + 8 * v398) & 0xFFFFFFFFFFFFFFF9) == 0) {
                  break;
                }
                uint64_t v299 = 0;
                uint64_t v399 = *(void *)(*(void *)(v296 + 24) + 16 * v398 + 8);
                if (v399)
                {
                  if ((*(unsigned char *)(v399 + 3) & 1) != 0
                    || (uint64_t v299 = 0, (v399 = *(void *)(v399 + 24)) != 0)
                    && (uint64_t v299 = 0, (*(unsigned char *)(v399 + 3) & 1) != 0))
                  {
                    uint64_t v299 = *(void *)(v399 + 8);
                  }
                }
              }
            }
            unint64_t v305 = v701;
            goto LABEL_483;
          }
          uint64_t v721 = v5;
          unsigned int v518 = 0;
          if (v293 - 74 > 0x34)
          {
            uint64_t v523 = v709;
          }
          else if (((1 << (v293 - 74)) & 0x14300000000000) != 0)
          {
            uint64_t v519 = *(unsigned int *)(*(void *)(v709 + 32) + 36);
            uint64_t v520 = a1[1];
            if ((v519 & 0x80000000) != 0) {
              unsigned int v521 = (uint64_t *)(*(void *)(v520 + 24) + 16 * (v519 & 0x7FFFFFFF) + 8);
            }
            else {
              unsigned int v521 = (uint64_t *)(*(void *)(v520 + 272) + 8 * v519);
            }
            uint64_t v522 = *v521;
            if ((*(unsigned char *)(v522 + 3) & 1) == 0) {
              uint64_t v522 = *(void *)(v522 + 24);
            }
            uint64_t v523 = *(void *)(v522 + 8);
            int v524 = *(_DWORD *)(*(void *)(v523 + 32) + 4);
            if ((v524 & 0x80000000) == 0) {
              goto LABEL_946;
            }
            uint64_t v525 = v524 & 0x7FFFFFFF;
            unsigned int v526 = *(_DWORD *)(v520 + 432);
            if (v525 >= v526) {
              goto LABEL_946;
            }
            uint64_t v527 = *(void *)(v520 + 424);
            if ((*(void *)(v527 + 8 * v525) & 0xFFFFFFFFFFFFFFF9) == 0) {
              goto LABEL_946;
            }
            unsigned int v518 = **(unsigned __int16 **)(v127 + 16);
            while (1)
            {
              unsigned int v528 = **(unsigned __int16 **)(v523 + 16);
              if (v528 > 0x2C || ((1 << v528) & 0x1C0000080000) == 0) {
                break;
              }
              int v616 = *(_DWORD *)(*(void *)(v523 + 32) + 36);
              if ((v616 & 0x80000000) == 0) {
                break;
              }
              uint64_t v617 = v616 & 0x7FFFFFFF;
              if (v617 >= v526 || (*(void *)(v527 + 8 * v617) & 0xFFFFFFFFFFFFFFF9) == 0) {
                break;
              }
              uint64_t v523 = 0;
              uint64_t v618 = *(void *)(*(void *)(v520 + 24) + 16 * v617 + 8);
              if (v618)
              {
                if ((*(unsigned char *)(v618 + 3) & 1) != 0
                  || (uint64_t v523 = 0, (v618 = *(void *)(v618 + 24)) != 0) && (uint64_t v523 = 0, (*(unsigned char *)(v618 + 3) & 1) != 0))
                {
                  uint64_t v523 = *(void *)(v618 + 8);
                }
              }
            }
            unsigned int v293 = **(unsigned __int16 **)(v523 + 16);
          }
          else
          {
            uint64_t v523 = v709;
            if (v293 == 74)
            {
              int v555 = *(_DWORD *)(*(void *)(v709 + 32) + 32 * (*(_DWORD *)(v709 + 40) - 1) + 4);
              if (v555 < 0 && (uint64_t v581 = a1[1], (v555 & 0x7FFFFFFFu) < *(_DWORD *)(v581 + 432))) {
                unint64_t v556 = *(void *)(*(void *)(v581 + 424) + 8 * (v555 & 0x7FFFFFFF));
              }
              else {
                unint64_t v556 = 0;
              }
              uint64_t v557 = a1[2];
              uint64_t v732 = v705;
              unint64_t v733 = v556;
              LODWORD(v735) = 74;
              uint64_t v736 = (uint64_t)&v732;
              uint64_t v737 = 2;
              uint64_t v738 = 0;
              uint64_t v739 = 0;
              unint64_t v558 = sub_1CC72D410(v557, (uint64_t)&v735);
              uint64_t v9 = 0;
              switch((char)v558)
              {
                case 1:
                case 3:
                  if (HIDWORD(v558) == 1) {
                    goto LABEL_540;
                  }
                  goto LABEL_1008;
                case 6:
                case 9:
LABEL_1008:
                  unint64_t v559 = (void *)*a1;
                  LODWORD(v735) = v555;
                  LODWORD(v737) = 0;
                  sub_1CC7363F0(v559, v701, (int *)&v735);
                  if (v695)
                  {
                    uint64_t v561 = v560;
                    uint64_t v562 = 0;
                    unsigned int v563 = v102 * v695;
                    do
                    {
                      sub_1CC714178(*(_DWORD *)(*(void *)(a2 + 32) + v562 + 4), *(_DWORD *)(*(void *)(v561 + 32) + 32 * v563 + 4), (void *)a1[1], *a1, (uint64_t)&v725, v697);
                      v562 += 32;
                      ++v563;
                    }
                    while (32 * v695 != v562);
                  }
                  unsigned int v564 = *(_DWORD *)(v721 + 8);
                  if (v564 >= *(_DWORD *)(v721 + 12)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  uint64_t v565 = v721;
                  *(void *)(*(void *)v721 + 8 * v564) = a2;
                  ++*(_DWORD *)(v721 + 8);
                  uint64_t v354 = (uint64_t)a1;
                  uint64_t v355 = a2;
                  uint64_t v356 = v709;
                  unsigned int v566 = v102;
                  goto LABEL_1191;
                default:
                  goto LABEL_152;
              }
            }
          }
          v735 = (uint64_t *)v701;
          if (v293 - 76 < 2)
          {
            if (v518)
            {
              if ((v701 & 0xFFFFFFFFFFFFFFF9) != 0 && (v701 & 4) != 0
                || (v705 & 0xFFFFFFFFFFFFFFF9) == 0
                || (v705 & 4) == 0)
              {
                goto LABEL_946;
              }
              char v653 = 3;
              if ((v705 & 1) == 0) {
                char v653 = 19;
              }
              unint64_t v654 = v705 >> v653;
              unint64_t v655 = v705 & 0x8000000000000000 | (8 * v654);
              uint64_t v656 = (v705 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v654) | 2;
              if ((v705 & 2) == 0) {
                uint64_t v656 = v655 | 1;
              }
              if (v656 != v701) {
                goto LABEL_946;
              }
              goto LABEL_1254;
            }
          }
          else
          {
            if (v293 != 79) {
              goto LABEL_946;
            }
            if (v518)
            {
              if ((v701 & 0xFFFFFFFFFFFFFFF9) == 0 || (v701 & 4) == 0) {
                goto LABEL_946;
              }
              if ((v705 & 2) != 0)
              {
                char v660 = 35;
                char v661 = 19;
                if ((v705 & 4) == 0) {
                  char v660 = 19;
                }
                unint64_t v662 = v705 >> v660;
                if ((v705 & 4) == 0) {
                  char v661 = 3;
                }
                if (v705) {
                  char v661 = 3;
                }
                unint64_t v620 = (8 * (unsigned __int16)(v705 >> v661)) & 0xFFFFF8000007FFFFLL | ((v662 & 0xFFFFFF) << 19) | 2;
              }
              else
              {
                char v619 = 3;
                if ((v705 & 1) == 0) {
                  char v619 = 19;
                }
                unint64_t v620 = v705 & 0x8000000000000000 | (8 * (v705 >> v619)) | 1;
              }
              uint64_t v732 = v620;
              unsigned int v664 = sub_1CB8F1DC4((unint64_t *)&v732);
              if (v663 == 1) {
              unint64_t v666 = sub_1CB8F1DC4((unint64_t *)&v735);
              }
              if (v518 == 119)
              {
                if (v665 == 1) {
                if (v666 <= v664)
                }
                  goto LABEL_1254;
LABEL_946:
                int v530 = **(unsigned __int16 **)(v709 + 16);
                if ((v530 - 118) > 8 || ((1 << (v530 - 118)) & 0x143) == 0) {
                  goto LABEL_1031;
                }
                uint64_t v532 = a1[1];
                int v704 = *(_DWORD *)(*(void *)(v709 + 32) + 36);
                if (v704 < 0 && (uint64_t v567 = v704 & 0x7FFFFFFF, v567 < *(_DWORD *)(v532 + 432))) {
                  unint64_t v533 = *(void *)(*(void *)(v532 + 424) + 8 * v567);
                }
                else {
                  unint64_t v533 = 0;
                }
                unint64_t v708 = (*(_DWORD *)(a2 + 40) - 1);
                unint64_t v724 = v533;
                uint64_t v534 = *(void *)(a2 + 32);
                int v535 = *(_DWORD *)(v534 + 4);
                if (v535 < 0 && (uint64_t v568 = v535 & 0x7FFFFFFF, v568 < *(_DWORD *)(v532 + 432))) {
                  unint64_t v536 = *(void *)(*(void *)(v532 + 424) + 8 * v568);
                }
                else {
                  unint64_t v536 = 0;
                }
                unint64_t v723 = v536;
                int v537 = *(_DWORD *)(v534 + 32 * v708 + 4);
                if (v537 < 0 && (uint64_t v569 = v537 & 0x7FFFFFFF, v569 < *(_DWORD *)(v532 + 432))) {
                  unint64_t v538 = *(void *)(*(void *)(v532 + 424) + 8 * v569);
                }
                else {
                  unint64_t v538 = 0;
                }
                unsigned int v540 = sub_1CB8F1DC4(&v724);
                if (v539 == 1) {
                unsigned int v542 = sub_1CB8F1DC4(&v723);
                }
                if (v541 == 1) {
                if (v530 != 119)
                }
                  goto LABEL_1031;
                if ((v538 & 0xFFFFFFFFFFFFFFF9) != 0 && (v538 & 4) != 0)
                {
                  uint64_t v543 = v538 & 1;
                  char v544 = 3;
                  if ((v538 & 1) == 0) {
                    char v544 = 19;
                  }
                  unint64_t v545 = v538 >> v544;
                  if ((v538 & 2) != 0) {
                    unint64_t v546 = (v538 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v545) | 2;
                  }
                  else {
                    unint64_t v546 = v538 & 0x8000000000000000 | (8 * v545) | 1;
                  }
                  if ((v723 & 0xFFFFFFFFFFFFFFF9) != 0 && (v723 & 4) != 0)
                  {
                    char v547 = 3;
                    if ((v723 & 1) == 0) {
                      char v547 = 19;
                    }
                    unint64_t v548 = v723 >> v547;
                    if ((v723 & 2) != 0) {
                      unint64_t v549 = (v723 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v548) | 2;
                    }
                    else {
                      unint64_t v549 = v723 & 0x8000000000000000 | (8 * v548) | 1;
                    }
                    if (v546 == v549)
                    {
                      unsigned int v550 = v724;
                      uint64_t v551 = 0x800000000000000;
                      if ((v724 & 2) == 0) {
                        uint64_t v551 = 0x8000000000000;
                      }
                      if ((v551 & v724) != 0)
                      {
                        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v541);
                        unsigned int v550 = v724;
                      }
                      unint64_t v552 = (unsigned __int16)(v550 >> 3) / v708;
LABEL_1052:
                      unint64_t v572 = sub_1CD6133E4(&v724, v552);
                      uint64_t v732 = v572;
                      unint64_t v733 = v724;
                      LODWORD(v735) = 74;
                      uint64_t v736 = (uint64_t)&v732;
                      uint64_t v737 = 2;
                      uint64_t v738 = 0;
                      uint64_t v739 = 0;
                      if (sub_1CC72D410(a1[2], (uint64_t)&v735) - 11 <= 0xFFFFFFFD)
                      {
                        uint64_t v573 = *a1;
                        *(void *)(v573 + 40) = *(void *)(a2 + 24);
                        *(void *)(v573 + 48) = a2;
                        uint64_t v574 = (void *)*a1;
                        LODWORD(v735) = v704;
                        LODWORD(v737) = 0;
                        sub_1CC7363F0(v574, v572, (int *)&v735);
                        if (v708)
                        {
                          uint64_t v576 = v575;
                          uint64_t v577 = 0;
                          do
                          {
                            int v578 = *(_DWORD *)(*(void *)(a2 + 32) + v577 + 4);
                            if (v726 >= (unint64_t)HIDWORD(v726)) {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            *((_DWORD *)v725 + v726) = v578;
                            LODWORD(v726) = v726 + 1;
                            uint64_t v579 = *a1;
                            LODWORD(v732) = v578;
                            LODWORD(v733) = 1;
                            LODWORD(v735) = *(_DWORD *)(*(void *)(v576 + 32) + v577 + 4);
                            LODWORD(v737) = 0;
                            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t **, uint64_t, void))(*(void *)v579 + 32))(v579, 119, &v732, 1, &v735, 1, 0);
                            v577 += 32;
                          }
                          while (32 * v708 != v577);
                        }
                        unsigned int v580 = *(_DWORD *)(v721 + 8);
                        if (v580 >= *(_DWORD *)(v721 + 12)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        uint64_t v565 = v721;
                        *(void *)(*(void *)v721 + 8 * v580) = a2;
                        ++*(_DWORD *)(v721 + 8);
                        uint64_t v354 = (uint64_t)a1;
                        uint64_t v355 = a2;
                        uint64_t v356 = v709;
                        goto LABEL_1190;
                      }
LABEL_1031:
                      uint64_t v9 = 0;
                      goto LABEL_152;
                    }
                  }
                  else if (v546 == v723)
                  {
                    unint64_t v552 = 1;
                    goto LABEL_1052;
                  }
                }
                else
                {
                  uint64_t v543 = v538 & 1;
                }
                uint64_t v9 = 0;
                if ((v724 & 1) == 0 || !v543) {
                  goto LABEL_152;
                }
                if ((v723 & 0xFFFFFFFFFFFFFFF9) == 0 || (v723 & 4) == 0)
                {
                  unint64_t v693 = v540 / v542;
                  if (!(v540 % v542))
                  {
                    uint64_t v732 = v723;
                    unint64_t v733 = v724;
                    LODWORD(v735) = 74;
                    uint64_t v736 = (uint64_t)&v732;
                    uint64_t v737 = 2;
                    uint64_t v738 = 0;
                    uint64_t v739 = 0;
                    if (sub_1CC72D410(a1[2], (uint64_t)&v735) - 9 >= 2)
                    {
                      v735 = &v737;
                      uint64_t v736 = 0x800000000;
                      sub_1CBA0E058((uint64_t)&v735, v693, 0);
                      if (v542 <= v540)
                      {
                        unint64_t v604 = 0;
                        if (v693 <= 1) {
                          uint64_t v605 = 1;
                        }
                        else {
                          uint64_t v605 = v693;
                        }
                        uint64_t v700 = v605;
                        do
                        {
                          if (v604 >= v708)
                          {
                            uint64_t v607 = a1[1];
                            size_t v696 = v723;
                            unsigned int v606 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v607, "", 0);
                            unint64_t v608 = v606 & 0x7FFFFFFF;
                            *(void *)(*(void *)(v607 + 24) + 16 * v608) = 4;
                            unint64_t v609 = *(unsigned int *)(v607 + 432);
                            if (v608 >= v609)
                            {
                              unint64_t v610 = v608 + 1;
                              uint64_t v611 = *(void *)(v607 + 440);
                              if (v608 >= *(unsigned int *)(v607 + 436)) {
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                              }
                              int v612 = *(_DWORD *)(v607 + 432);
                              if (v610 != v609)
                              {
                                v613 = (void *)(*(void *)(v607 + 424) + 8 * *(unsigned int *)(v607 + 432));
                                uint64_t v614 = ~v608 + v609;
                                do
                                {
                                  *v613++ = v611;
                                  BOOL v392 = __CFADD__(v614++, 1);
                                }
                                while (!v392);
                                int v612 = *(_DWORD *)(v607 + 432);
                              }
                              *(_DWORD *)(v607 + 432) = v612 + v610 - v609;
                            }
                            *(void *)(*(void *)(v607 + 424) + 8 * v608) = v696;
                            uint64_t v615 = *(void *)(v607 + 8);
                            if (v615) {
                              (*(void (**)(uint64_t, void))(*(void *)v615 + 24))(v615, v606);
                            }
                          }
                          else
                          {
                            unsigned int v606 = *(_DWORD *)(*(void *)(a2 + 32) + 32 * v604 + 4);
                          }
                          v591 = (char *)v735;
                          *((_DWORD *)v735 + v604++) = v606;
                        }
                        while (v604 != v700);
                      }
                      else
                      {
                        v591 = (char *)v735;
                      }
                      uint64_t v592 = *a1;
                      *(void *)(v592 + 40) = *(void *)(a2 + 24);
                      *(void *)(v592 + 48) = a2;
                      uint64_t v593 = *a1;
                      LODWORD(v732) = v704;
                      int v734 = 0;
                      sub_1CC738BB8(v593, v591, v736, (uint64_t)&v732);
                      sub_1CB925718((unsigned int *)&v725, v735, (unsigned char *)v735 + 4 * v693);
                      unsigned int v594 = *(_DWORD *)(v721 + 8);
                      if (v594 >= *(_DWORD *)(v721 + 12)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *(void *)(*(void *)v721 + 8 * v594) = a2;
                      ++*(_DWORD *)(v721 + 8);
                      sub_1CC714A08((uint64_t)a1, a2, v709, v721, 0);
                      if (v735 != &v737) {
                        free(v735);
                      }
LABEL_1192:
                      uint64_t v9 = 1;
                      goto LABEL_152;
                    }
                  }
                }
                goto LABEL_1031;
              }
              if (v665 == 1) {
              if (v666 < v664)
              }
                goto LABEL_946;
LABEL_1254:
              if (*(_DWORD *)(v523 + 40) != v694) {
                goto LABEL_1031;
              }
              goto LABEL_1255;
            }
          }
          uint64_t v582 = (*(_DWORD *)(v523 + 40) - 1);
          if (v582 >= v695)
          {
            if (v582 <= v695)
            {
LABEL_1255:
              int v667 = *(_DWORD *)(*(void *)(v523 + 32) + 36);
              if (v667 < 0 && (uint64_t v691 = a1[1], v692 = v667 & 0x7FFFFFFF, v692 < *(_DWORD *)(v691 + 432))) {
                unint64_t v668 = *(void *)(*(void *)(v691 + 424) + 8 * v692);
              }
              else {
                unint64_t v668 = 0;
              }
              if (v701 == v668) {
                unsigned int v669 = 0;
              }
              else {
                unsigned int v669 = 82;
              }
              if (v518) {
                uint64_t v670 = v518;
              }
              else {
                uint64_t v670 = v669;
              }
              BOOL v96 = v701 == v668;
              unint64_t v724 = v668;
              uint64_t v671 = *a1;
              uint64_t v9 = !v96 || v518 != 0;
              *(void *)(v671 + 40) = *(void *)(a2 + 24);
              *(void *)(v671 + 48) = a2;
              if (v9 == 1)
              {
                if (v695)
                {
                  uint64_t v672 = 0;
                  do
                  {
                    uint64_t v673 = *(unsigned int *)(*(void *)(a2 + 32) + 32 * v672 + 4);
                    uint64_t v674 = a1[1];
                    if ((v673 & 0x80000000) != 0) {
                      v675 = (uint64_t *)(*(void *)(v674 + 24) + 16 * (v673 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      v675 = (uint64_t *)(*(void *)(v674 + 272) + 8 * v673);
                    }
                    ++v672;
                    uint64_t v676 = *v675;
                    if (v676)
                    {
                      int v677 = *(_DWORD *)(*(void *)(v523 + 32) + 32 * v672 + 4);
                      while ((*(unsigned char *)(v676 + 3) & 1) != 0)
                      {
                        uint64_t v676 = *(void *)(v676 + 24);
                        if (!v676) {
                          goto LABEL_1278;
                        }
                      }
                      uint64_t v678 = *a1;
                      LODWORD(v732) = v673;
                      LODWORD(v733) = 1;
                      LODWORD(v735) = v677;
                      LODWORD(v737) = 0;
                      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t **, uint64_t, void))(*(void *)v678 + 32))(v678, v670, &v732, 1, &v735, 1, 0);
                      if (v726 >= (unint64_t)HIDWORD(v726)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((_DWORD *)v725 + v726) = v673;
                      LODWORD(v726) = v726 + 1;
                    }
LABEL_1278:
                    ;
                  }
                  while (v672 != v695);
                }
                unsigned int v679 = *(_DWORD *)(v721 + 8);
                if (v679 >= *(_DWORD *)(v721 + 12)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v637 = v721;
                *(void *)(*(void *)v721 + 8 * v679) = a2;
                ++*(_DWORD *)(v721 + 8);
                uint64_t v634 = (uint64_t)a1;
                uint64_t v635 = a2;
                uint64_t v636 = v523;
                goto LABEL_1176;
              }
              if (v695)
              {
                uint64_t v680 = 0;
                while (1)
                {
                  unsigned int v681 = *(_DWORD *)(*(void *)(a2 + 32) + v680 + 4);
                  unsigned int v682 = *(_DWORD *)(*(void *)(v523 + 32) + v680 + 36);
                  uint64_t v683 = sub_1CB8F1DC4((unint64_t *)&v722);
                  int v685 = v684;
                  if (v683 != sub_1CB8F1DC4(&v724) || v685 != v686) {
                    goto LABEL_152;
                  }
                  if (v722 != v724)
                  {
                    uint64_t v688 = *a1;
                    uint64_t v732 = v722;
                    LODWORD(v733) = 0;
                    LODWORD(v735) = v682;
                    LODWORD(v737) = 0;
                    sub_1CC7382B0(v688);
                    unsigned int v682 = *(_DWORD *)(*(void *)(v689 + 32) + 4);
                  }
                  sub_1CC714178(v681, v682, (void *)a1[1], *a1, (uint64_t)&v725, v697);
                  v680 += 32;
                  if (32 * v695 == v680) {
                    goto LABEL_1291;
                  }
                }
              }
              goto LABEL_1291;
            }
            unsigned int v595 = v582 / v695;
            if (v582 % v695) {
              goto LABEL_1031;
            }
            uint64_t v596 = *a1;
            *(void *)(v596 + 40) = *(void *)(a2 + 24);
            *(void *)(v596 + 48) = a2;
            uint64_t v597 = 0;
            if (v595 <= 1) {
              int v598 = 1;
            }
            else {
              int v598 = v595;
            }
            do
            {
              LODWORD(v599) = 0;
              v735 = &v737;
              uint64_t v736 = 0x800000000;
              LODWORD(v600) = v595 * v597;
              int v601 = v598;
              do
              {
                uint64_t v600 = (v600 + 1);
                if (v599 >= HIDWORD(v736)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((_DWORD *)v735 + v599) = *(_DWORD *)(*(void *)(v523 + 32) + 32 * v600 + 4);
                uint64_t v599 = (v736 + 1);
                LODWORD(v736) = v736 + 1;
                --v601;
              }
              while (v601);
              int v602 = *(_DWORD *)(*(void *)(a2 + 32) + 32 * v597 + 4);
              uint64_t v603 = *a1;
              LODWORD(v732) = v602;
              LODWORD(v733) = 1;
              sub_1CC73661C(v603, (uint64_t)&v732, (int *)v735, v599);
              if (v726 >= (unint64_t)HIDWORD(v726)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v725 + v726) = v602;
              LODWORD(v726) = v726 + 1;
              if (v735 != &v737) {
                free(v735);
              }
              ++v597;
            }
            while (v597 != v695);
          }
          else
          {
            unsigned int v583 = v695 / v582;
            if (v695 % v582) {
              goto LABEL_1031;
            }
            uint64_t v584 = *a1;
            *(void *)(v584 + 40) = *(void *)(a2 + 24);
            *(void *)(v584 + 48) = a2;
            uint64_t v585 = 0;
            if (v583 <= 1) {
              unsigned int v586 = 1;
            }
            else {
              unsigned int v586 = v695 / v582;
            }
            unsigned int v713 = v586;
            do
            {
              LODWORD(v587) = 0;
              v735 = &v737;
              uint64_t v736 = 0x800000000;
              unsigned int v588 = v583 * v585;
              unsigned int v589 = v713;
              do
              {
                if (v587 >= HIDWORD(v736)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((_DWORD *)v735 + v587) = *(_DWORD *)(*(void *)(a2 + 32) + 32 * v588 + 4);
                uint64_t v587 = (v736 + 1);
                LODWORD(v736) = v736 + 1;
                ++v588;
                --v589;
              }
              while (v589);
              uint64_t v590 = *a1;
              ++v585;
              LODWORD(v732) = *(_DWORD *)(*(void *)(v523 + 32) + 32 * v585 + 4);
              int v734 = 0;
              sub_1CC738BB8(v590, (char *)v735, v587, (uint64_t)&v732);
              sub_1CB925718((unsigned int *)&v725, v735, (unsigned char *)v735 + 4 * v736);
              if (v735 != &v737) {
                free(v735);
              }
            }
            while (v585 != v582);
          }
LABEL_1291:
          unsigned int v690 = *(_DWORD *)(v721 + 8);
          if (v690 >= *(_DWORD *)(v721 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v565 = v721;
          *(void *)(*(void *)v721 + 8 * v690) = a2;
          ++*(_DWORD *)(v721 + 8);
          uint64_t v354 = (uint64_t)a1;
          uint64_t v355 = a2;
          uint64_t v356 = v523;
LABEL_1190:
          unsigned int v566 = 0;
LABEL_1191:
          sub_1CC714A08(v354, v355, v356, v565, v566);
          goto LABEL_1192;
        case 'L':
        case 'M':
        case 'O':
          uint64_t v33 = a1[1];
          uint64_t v34 = *(unsigned int *)(*(void *)(a2 + 32) + 4);
          if ((v34 & 0x80000000) != 0) {
            unsigned int v35 = (uint64_t *)(*(void *)(v33 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
          }
          else {
            unsigned int v35 = (uint64_t *)(*(void *)(v33 + 272) + 8 * v34);
          }
          uint64_t v36 = *v35;
          if (!v36) {
            goto LABEL_432;
          }
          while ((*(unsigned char *)(v36 + 3) & 1) != 0)
          {
            uint64_t v36 = *(void *)(v36 + 24);
            if (!v36) {
              goto LABEL_432;
            }
          }
          uint64_t v37 = *(void *)(v36 + 8);
LABEL_42:
          uint64_t v38 = v37;
          int v39 = **(unsigned __int16 **)(v37 + 16);
          if (v39 == 74 || v39 == 119)
          {
            uint64_t v9 = 0;
            unsigned int v225 = 1;
            v727[0] = *(_DWORD *)(*(void *)(a2 + 32) + 4);
            LODWORD(v726) = 1;
            goto LABEL_710;
          }
          while (1)
          {
            uint64_t v36 = *(void *)(v36 + 24);
            if (!v36) {
              goto LABEL_432;
            }
            if ((*(unsigned char *)(v36 + 3) & 1) == 0)
            {
              uint64_t v37 = *(void *)(v36 + 8);
              if (v37 != v38) {
                goto LABEL_42;
              }
            }
          }
        default:
          goto LABEL_434;
      }
  }
}

void *sub_1CC71210C(void *a1)
{
  *a1 = &unk_1F25F0A58;
  uint64_t v2 = (void *)a1[2];
  if (v2 != (void *)a1[1]) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CC712160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  if ((**(unsigned char **)(v5 + 360) & 0x10) == 0)
  {
    uint64_t v7 = v5;
    uint64_t v8 = v4;
    uint64_t v9 = *(uint64_t **)(v4 + 8);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    if (v10 == v11)
    {
LABEL_6:
      uint64_t v12 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v10 != &llvm::TargetPassConfig::ID)
      {
        v10 += 16;
        if (v10 == v11) {
          goto LABEL_6;
        }
      }
      uint64_t v12 = *(void *)(v10 + 8);
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::TargetPassConfig::ID);
    uint64_t v14 = *(uint64_t **)(v8 + 8);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    if (v15 == v16)
    {
LABEL_11:
      uint64_t v17 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v15 != &unk_1EA61EFE3)
      {
        v15 += 16;
        if (v15 == v16) {
          goto LABEL_11;
        }
      }
      uint64_t v17 = *(void *)(v15 + 8);
    }
    (*(void (**)(uint64_t, void *))(*(void *)v17 + 96))(v17, &unk_1EA61EFE3);
    int v18 = 0;
    uint64_t v19 = v7 + 320;
    do
    {
      uint64_t v19 = *(void *)(v19 + 8);
      ++v18;
    }
    while (v19 != v7 + 320);
    if (word_1EBCD9CF0)
    {
      if (byte_1EBCD9D68) {
LABEL_17:
      }
        operator new();
    }
    else if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 280))(v13))
    {
      goto LABEL_17;
    }
    operator new();
  }
  return 0;
}

const char *sub_1CC713D54()
{
  return "Legalizer";
}

double sub_1CC713D64@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 1;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

double sub_1CC713D8C@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 32;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

double sub_1CC713DB4@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 2;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

void sub_1CC713DDC(void *a1)
{
  *a1 = &unk_1F25F0A58;
  uint64_t v2 = (void *)a1[2];
  if (v2 != (void *)a1[1]) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

int32x2_t sub_1CC713E50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int32x2_t **)(a1 + 72);
  int32x2_t v3 = v2[258];
  uint64_t v4 = v2[260].u32[0];
  unsigned int v5 = a2 >> 4;
  if (v4)
  {
    LODWORD(v6) = (v4 - 1) & (v5 ^ (a2 >> 9));
    uint64_t v7 = *(void *)&v3 + 16 * v6;
    uint64_t v8 = *(void *)v7;
    if (*(void *)v7 == a2) {
      goto LABEL_8;
    }
    int v9 = 1;
    while (v8 != -4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v4 - 1);
      uint64_t v8 = *(void *)(*(void *)&v3 + 16 * v6);
      if (v8 == a2)
      {
        uint64_t v7 = *(void *)&v3 + 16 * v6;
        goto LABEL_8;
      }
    }
  }
  uint64_t v7 = *(void *)&v3 + 16 * v4;
LABEL_8:
  if (v7 != *(void *)&v3 + 16 * v4)
  {
    *(void *)(*(void *)v2 + 8 * *(unsigned int *)(v7 + 8)) = 0;
    *(void *)uint64_t v7 = -8192;
    int32x2_t result = vadd_s32(v2[259], (int32x2_t)0x1FFFFFFFFLL);
    v2[259] = result;
  }
  uint64_t v12 = *(int32x2_t **)(a1 + 80);
  int32x2_t v13 = v12[130];
  uint64_t v14 = v12[132].u32[0];
  if (v14)
  {
    LODWORD(v15) = (v14 - 1) & (v5 ^ (a2 >> 9));
    uint64_t v16 = *(void *)&v13 + 16 * v15;
    uint64_t v17 = *(void *)v16;
    if (*(void *)v16 == a2) {
      goto LABEL_17;
    }
    int v18 = 1;
    while (v17 != -4096)
    {
      int v19 = v15 + v18++;
      uint64_t v15 = v19 & (v14 - 1);
      uint64_t v17 = *(void *)(*(void *)&v13 + 16 * v15);
      if (v17 == a2)
      {
        uint64_t v16 = *(void *)&v13 + 16 * v15;
        goto LABEL_17;
      }
    }
  }
  uint64_t v16 = *(void *)&v13 + 16 * v14;
LABEL_17:
  if (v16 != *(void *)&v13 + 16 * v14)
  {
    *(void *)(*(void *)v12 + 8 * *(unsigned int *)(v16 + 8)) = 0;
    *(void *)uint64_t v16 = -8192;
    int32x2_t result = vadd_s32(v12[131], (int32x2_t)0x1FFFFFFFFLL);
    v12[131] = result;
  }
  return result;
}

void *sub_1CC713F90(void *result, uint64_t a2)
{
  int v2 = **(unsigned __int16 **)(a2 + 16);
  if ((v2 - 45) <= 0xD2)
  {
    uint64_t v3 = (v2 - 73);
    if (v3 <= 0x35 && (((1 << v3) & 0x2860000000005BLL) != 0 || v3 == 2 && byte_1EBCD9E28))
    {
      uint64_t v4 = result[10];
      uint64_t v29 = a2;
      int v5 = *(_DWORD *)(v4 + 8);
      int v6 = *(_DWORD *)(v4 + 1056);
      if (v6)
      {
        uint64_t v7 = *(void *)(v4 + 1040);
        int v8 = v6 - 1;
        unsigned int v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
        int v10 = (void *)(v7 + 16 * v9);
        uint64_t v11 = *v10;
        if (*v10 == a2) {
          return result;
        }
        uint64_t v12 = 0;
        int v13 = 1;
        while (v11 != -4096)
        {
          if (v12) {
            BOOL v14 = 0;
          }
          else {
            BOOL v14 = v11 == -8192;
          }
          if (v14) {
            uint64_t v12 = v10;
          }
          unsigned int v15 = v9 + v13++;
          unsigned int v9 = v15 & v8;
          int v10 = (void *)(v7 + 16 * v9);
          uint64_t v11 = *v10;
          if (*v10 == a2) {
            return result;
          }
        }
        if (v12) {
          uint64_t v16 = v12;
        }
        else {
          uint64_t v16 = v10;
        }
      }
      else
      {
        uint64_t v16 = 0;
      }
      uint64_t v17 = v4 + 1040;
    }
    else
    {
      uint64_t v4 = result[9];
      uint64_t v29 = a2;
      int v5 = *(_DWORD *)(v4 + 8);
      int v19 = *(_DWORD *)(v4 + 2080);
      if (v19)
      {
        uint64_t v20 = *(void *)(v4 + 2064);
        int v21 = v19 - 1;
        unsigned int v22 = v21 & ((a2 >> 4) ^ (a2 >> 9));
        uint64_t v23 = (void *)(v20 + 16 * v22);
        uint64_t v24 = *v23;
        if (*v23 == a2) {
          return result;
        }
        uint64_t v25 = 0;
        int v26 = 1;
        while (v24 != -4096)
        {
          if (v25) {
            BOOL v27 = 0;
          }
          else {
            BOOL v27 = v24 == -8192;
          }
          if (v27) {
            uint64_t v25 = v23;
          }
          unsigned int v28 = v22 + v26++;
          unsigned int v22 = v28 & v21;
          uint64_t v23 = (void *)(v20 + 16 * v22);
          uint64_t v24 = *v23;
          if (*v23 == a2) {
            return result;
          }
        }
        if (v25) {
          uint64_t v16 = v25;
        }
        else {
          uint64_t v16 = v23;
        }
      }
      else
      {
        uint64_t v16 = 0;
      }
      uint64_t v17 = v4 + 2064;
    }
    int32x2_t result = sub_1CB9A052C(v17, (uint64_t)&v29, &v29, v16);
    *int32x2_t result = v29;
    *((_DWORD *)result + 2) = v5;
    unsigned int v18 = *(_DWORD *)(v4 + 8);
    if (v18 >= *(_DWORD *)(v4 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)v4 + 8 * v18) = v29;
    ++*(_DWORD *)(v4 + 8);
  }
  return result;
}

void sub_1CC714178(unsigned int a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (a1 - 1 >= 0x3FFFFFFF
    && a2 - 1 >= 0x3FFFFFFF
    && ((a1 & 0x80000000) == 0 || (a1 & 0x7FFFFFFF) >= (unint64_t)*((unsigned int *)a3 + 108)
      ? (uint64_t v11 = 0)
      : (uint64_t v11 = *(void *)(a3[53] + 8 * (a1 & 0x7FFFFFFF))),
        (a2 & 0x80000000) == 0 || (a2 & 0x7FFFFFFF) >= (unint64_t)*((unsigned int *)a3 + 108)
      ? (uint64_t v12 = 0)
      : (uint64_t v12 = *(void *)(a3[53] + 8 * (a2 & 0x7FFFFFFF))),
        v11 == v12
     && ((uint64_t v13 = a1 & 0x7FFFFFFF, v14 = a3[3], v15 = *(void *)(v14 + 16 * v13), v15 < 8)
      || v15 == *(void *)(v14 + 16 * (a2 & 0x7FFFFFFF)))))
  {
    uint64_t v16 = a1;
    uint64_t v32 = v34;
    uint64_t v33 = 0x400000000;
    if ((a1 & 0x80000000) != 0) {
      uint64_t v17 = (uint64_t *)(v14 + 16 * v13 + 8);
    }
    else {
      uint64_t v17 = (uint64_t *)(a3[34] + 8 * a1);
    }
    uint64_t v18 = *v17;
    if (*v17)
    {
      while ((*(unsigned char *)(v18 + 3) & 1) != 0)
      {
        uint64_t v18 = *(void *)(v18 + 24);
        if (!v18) {
          goto LABEL_16;
        }
      }
      unint64_t v26 = 0;
      uint64_t v27 = *(void *)(v18 + 8);
      unint64_t v28 = 4;
LABEL_29:
      if (v26 >= v28) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v32 + v26) = v27;
      LODWORD(v33) = v33 + 1;
      (*(void (**)(uint64_t, uint64_t))(*(void *)a6 + 32))(a6, v27);
      uint64_t v29 = v18;
      while (1)
      {
        uint64_t v29 = *(void *)(v29 + 24);
        if (!v29) {
          break;
        }
        if ((*(unsigned char *)(v29 + 3) & 1) == 0)
        {
          uint64_t v27 = *(void *)(v29 + 8);
          if (v27 != *(void *)(v18 + 8))
          {
            unint64_t v26 = v33;
            unint64_t v28 = HIDWORD(v33);
            uint64_t v18 = v29;
            goto LABEL_29;
          }
        }
      }
    }
LABEL_16:
    (*(void (**)(void))(**(void **)(*a3 + 16) + 176))(*(void *)(*a3 + 16));
    if ((a1 & 0x80000000) != 0) {
      int v19 = (uint64_t *)(a3[3] + 16 * v13 + 8);
    }
    else {
      int v19 = (uint64_t *)(a3[34] + 8 * v16);
    }
    uint64_t v20 = *v19;
    if (*v19)
    {
      do
      {
        uint64_t v21 = *(void *)(v20 + 24);
        llvm::MachineOperand::setReg(v20, a2);
        uint64_t v20 = v21;
      }
      while (v21);
    }
    unsigned int v22 = *(_DWORD *)(a5 + 8);
    if (v22 >= *(_DWORD *)(a5 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a5 + 4 * v22) = a2;
    ++*(_DWORD *)(a5 + 8);
    uint64_t v23 = (uint64_t *)v32;
    if (v33)
    {
      uint64_t v24 = 8 * v33;
      do
      {
        uint64_t v25 = *v23++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a6 + 40))(a6, v25);
        v24 -= 8;
      }
      while (v24);
      uint64_t v23 = (uint64_t *)v32;
    }
    if (v23 != (uint64_t *)v34) {
      free(v23);
    }
  }
  else
  {
    v31[0] = a1;
    v31[2] = 1;
    LODWORD(v32) = a2;
    v34[0] = 0;
    (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 19, v31, 1, &v32, 1, 0);
    unsigned int v30 = *(_DWORD *)(a5 + 8);
    if (v30 >= *(_DWORD *)(a5 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a5 + 4 * v30) = a1;
    ++*(_DWORD *)(a5 + 8);
  }
}

uint64_t sub_1CC714514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4 = *(_DWORD *)(a4 + 8);
  if (v4 >= *(_DWORD *)(a4 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a4 + 8 * v4) = a2;
  ++*(_DWORD *)(a4 + 8);

  return sub_1CC714A08(a1, a2, a3, a4, 0);
}

uint64_t sub_1CC7145A0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(unsigned int *)(*(void *)(a2 + 32) + 36);
  uint64_t v9 = a1[1];
  if ((v8 & 0x80000000) != 0) {
    int v10 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  }
  else {
    int v10 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v8);
  }
  uint64_t v11 = *v10;
  if ((*(unsigned char *)(v11 + 3) & 1) == 0) {
    uint64_t v11 = *(void *)(v11 + 24);
  }
  uint64_t v12 = *(void *)(v11 + 8);
  LODWORD(v11) = *(_DWORD *)(*(void *)(v12 + 32) + 4);
  if ((v11 & 0x80000000) == 0
    || (v11 &= 0x7FFFFFFFu, unsigned int v13 = *(_DWORD *)(v9 + 432), v11 >= v13)
    || (v14 = *(void *)(v9 + 424), uint64_t v11 = *(void *)(v14 + 8 * v11), (v11 & 0xFFFFFFFFFFFFFFF9) == 0))
  {
LABEL_21:
    int v20 = 0;
    return v20 & v11;
  }
  LODWORD(v11) = **(unsigned __int16 **)(a2 + 16);
  uint64_t v15 = *(void *)(v9 + 24);
  while (1)
  {
    int v16 = **(unsigned __int16 **)(v12 + 16);
    if (v16 == 19) {
      goto LABEL_12;
    }
    if (v16 == 68) {
      break;
    }
    if ((v16 - 42) > 2) {
      goto LABEL_21;
    }
LABEL_12:
    int v17 = *(_DWORD *)(*(void *)(v12 + 32) + 36);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    uint64_t v18 = v17 & 0x7FFFFFFF;
    if (v18 >= v13 || (*(void *)(v14 + 8 * v18) & 0xFFFFFFFFFFFFFFF9) == 0) {
      goto LABEL_21;
    }
    uint64_t v12 = 0;
    uint64_t v19 = *(void *)(v15 + 16 * v18 + 8);
    if (v19)
    {
      if ((*(unsigned char *)(v19 + 3) & 1) != 0
        || (uint64_t v12 = 0, (v19 = *(void *)(v19 + 24)) != 0) && (uint64_t v12 = 0, (*(unsigned char *)(v19 + 3) & 1) != 0))
      {
        uint64_t v12 = *(void *)(v19 + 8);
      }
    }
  }
  uint64_t v22 = *a1;
  *(void *)(v22 + 40) = *(void *)(a2 + 24);
  *(void *)(v22 + 48) = a2;
  int v23 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
  if (v23 < 0 && (uint64_t v24 = a1[1], (v23 & 0x7FFFFFFFu) < *(_DWORD *)(v24 + 432))) {
    unint64_t v25 = *(void *)(*(void *)(v24 + 424) + 8 * (v23 & 0x7FFFFFFF));
  }
  else {
    unint64_t v25 = 0;
  }
  if (v11 != 118)
  {
    int v20 = 1;
    if (sub_1CC714CF8((uint64_t)a1, v25)) {
      goto LABEL_31;
    }
    uint64_t v27 = *a1;
    LODWORD(v37) = v23;
    int v38 = 1;
    if (v23 < 0 && (uint64_t v28 = *(void *)(v27 + 24), (v23 & 0x7FFFFFFFu) < *(_DWORD *)(v28 + 432)))
    {
      unint64_t v29 = *(void *)(*(void *)(v28 + 424) + 8 * (v23 & 0x7FFFFFFF));
      if (v29)
      {
        unint64_t v30 = (v29 >> 3);
        goto LABEL_36;
      }
      if ((v29 & 4) != 0)
      {
        if ((v29 & 2) != 0) {
          unint64_t v30 = (unsigned __int16)(v29 >> 19);
        }
        else {
          unint64_t v30 = (v29 >> 19);
        }
LABEL_36:
        uint64_t v32 = llvm::IntegerType::get(****(llvm::IntegerType *****)(v27 + 8), (llvm::LLVMContext *)v30);
        uint64_t v33 = *(llvm::ConstantInt **)v32;
        unsigned int v34 = *(_DWORD *)(v32 + 8);
        LODWORD(v40) = v34 >> 8;
        if (v34 >> 8 >= 0x41) {
          operator new[]();
        }
        uint64_t v39 = 0;
        llvm::ConstantInt::get(v33, (llvm::LLVMContext *)&v39, v31);
        if (v40 >= 0x41 && v39) {
          MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
        }
        (*(void (**)(uint64_t, unint64_t *))(*(void *)v27 + 16))(v27, &v37);
LABEL_39:
        unsigned int v35 = *(_DWORD *)(a4 + 8);
        if (v35 >= *(_DWORD *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a4 + 4 * v35) = v23;
        ++*(_DWORD *)(a4 + 8);
        unsigned int v36 = *(_DWORD *)(a3 + 8);
        if (v36 >= *(_DWORD *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a3 + 8 * v36) = a2;
        ++*(_DWORD *)(a3 + 8);
        sub_1CC714A08((uint64_t)a1, a2, v12, a3, 0);
        int v20 = 1;
        LODWORD(v11) = 1;
        return v20 & v11;
      }
    }
    else
    {
      unint64_t v29 = 0;
    }
    unint64_t v30 = (unsigned __int16)(v29 >> 3);
    goto LABEL_36;
  }
  unint64_t v37 = v25;
  LODWORD(v39) = 68;
  int v20 = 1;
  uint64_t v40 = &v37;
  uint64_t v41 = 1;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  if (!sub_1CC72D410(a1[2], (uint64_t)&v39))
  {
    uint64_t v26 = *a1;
    LODWORD(v39) = v23;
    LODWORD(v40) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void, void, void))(*(void *)v26 + 32))(v26, 68, &v39, 1, 0, 0, 0);
    goto LABEL_39;
  }
LABEL_31:
  LODWORD(v11) = 0;
  return v20 & v11;
}

uint64_t sub_1CC714A08(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  if (a2 != a3)
  {
    while (1)
    {
      if (**(_WORD **)(a2 + 16) == 74) {
        int v5 = (unsigned int *)(*(void *)(a2 + 32) + 32 * (*(_DWORD *)(a2 + 40) - 1) + 4);
      }
      else {
        int v5 = (unsigned int *)(*(void *)(a2 + 32) + 36);
      }
      uint64_t v6 = *v5;
      uint64_t v7 = *(void *)(result + 8);
      if ((v6 & 0x80000000) != 0) {
        uint64_t v8 = (uint64_t *)(*(void *)(v7 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v8 = (uint64_t *)(*(void *)(v7 + 272) + 8 * v6);
      }
      uint64_t v9 = *v8;
      if (v9)
      {
        if (*(unsigned char *)(v9 + 3)) {
          goto LABEL_8;
        }
        uint64_t v9 = *(void *)(v9 + 24);
        if (v9)
        {
          if (*(unsigned char *)(v9 + 3))
          {
LABEL_8:
            uint64_t v9 = *(void *)(v9 + 8);
            goto LABEL_9;
          }
          uint64_t v9 = 0;
        }
      }
LABEL_9:
      if ((v6 & 0x80000000) != 0) {
        int v10 = (uint64_t *)(*(void *)(v7 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
      }
      else {
        int v10 = (uint64_t *)(*(void *)(v7 + 272) + 8 * v6);
      }
      uint64_t v11 = *v10;
      if (!v11) {
        break;
      }
      while ((*(unsigned char *)(v11 + 3) & 1) != 0)
      {
        uint64_t v11 = *(void *)(v11 + 24);
        if (!v11) {
          goto LABEL_33;
        }
      }
      while (1)
      {
        uint64_t v11 = *(void *)(v11 + 24);
        if (!v11) {
          break;
        }
        if ((*(unsigned char *)(v11 + 3) & 1) == 0) {
          goto LABEL_33;
        }
      }
      if (v9 == a3) {
        goto LABEL_18;
      }
      unint64_t v26 = *(unsigned int *)(a4 + 8);
      if (v26 >= *(unsigned int *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a4 + 8 * v26) = v9;
      ++*(_DWORD *)(a4 + 8);
      a2 = v9;
    }
  }
LABEL_33:
  if (a2 != a3) {
    return result;
  }
LABEL_18:
  uint64_t v12 = *(void *)(a3 + 32);
  uint64_t v13 = *(void *)(a3 + 16);
  unsigned int v14 = *(unsigned __int8 *)(v13 + 4);
  if ((*(unsigned char *)(v13 + 8) & 2) == 0 || (int v23 = *(_DWORD *)(a3 + 40), v23 == v14))
  {
    unsigned int v15 = v14;
  }
  else
  {
    int v24 = v23 - 1;
    unsigned int v15 = v14;
    do
    {
      int v25 = *(_DWORD *)(v12 + 32 * v14);
      if ((v25 & 0x10000FF) != 0x1000000) {
        break;
      }
      v15 += (v25 & 0x2000000) == 0;
      if (v24 == v14) {
        break;
      }
      ++v14;
    }
    while ((v25 & 0x2000000) == 0);
  }
  if (!v15)
  {
LABEL_57:
    unsigned int v30 = *(_DWORD *)(a4 + 8);
    if (v30 >= *(_DWORD *)(a4 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a4 + 8 * v30) = a3;
    ++*(_DWORD *)(a4 + 8);
    return result;
  }
  unsigned int v16 = 0;
  uint64_t v17 = v12 + 32 * v15;
  uint64_t v18 = (unsigned int *)(v12 + 32 * a5 + 4);
  uint64_t v19 = *(void *)(result + 8);
  while (v16 == a5)
  {
    uint64_t v20 = *v18;
    if ((v20 & 0x80000000) != 0) {
      uint64_t v21 = (uint64_t *)(*(void *)(v19 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v21 = (uint64_t *)(*(void *)(v19 + 272) + 8 * v20);
    }
    uint64_t v22 = *v21;
    if (!v22) {
      goto LABEL_57;
    }
    while ((*(unsigned char *)(v22 + 3) & 1) != 0)
    {
      uint64_t v22 = *(void *)(v22 + 24);
      if (!v22) {
        goto LABEL_57;
      }
    }
    while (1)
    {
      uint64_t v22 = *(void *)(v22 + 24);
      if (!v22) {
        break;
      }
      if ((*(unsigned char *)(v22 + 3) & 1) == 0) {
        goto LABEL_57;
      }
    }
    v12 += 32;
    unsigned int v16 = a5;
LABEL_31:
    if (v12 == v17) {
      goto LABEL_57;
    }
    ++v16;
  }
  uint64_t v27 = *(unsigned int *)(v12 + 4);
  if ((v27 & 0x80000000) != 0) {
    uint64_t v28 = (uint64_t *)(*(void *)(v19 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v28 = (uint64_t *)(*(void *)(v19 + 272) + 8 * v27);
  }
  uint64_t v29 = *v28;
  if (!v29)
  {
LABEL_49:
    v12 += 32;
    goto LABEL_31;
  }
  while ((*(unsigned char *)(v29 + 3) & 1) != 0)
  {
    uint64_t v29 = *(void *)(v29 + 24);
    if (!v29) {
      goto LABEL_49;
    }
  }
  return result;
}

BOOL sub_1CC714CF8(uint64_t a1, unint64_t a2)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  unint64_t v13 = a2;
  if ((a2 & 0xFFFFFFFFFFFFFFF9) != 0 && (a2 & 4) != 0)
  {
    uint64_t v7 = sub_1CBA15978(&v13);
    v16[0] = v7;
    int v8 = 120;
    uint64_t v9 = v16;
    uint64_t v10 = 1;
    uint64_t v4 = 1;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    if (sub_1CC72D410(*(void *)(a1 + 16), (uint64_t)&v8) - 9 < 2) {
      return v4;
    }
    v14[0] = v13;
    v14[1] = v7;
    LODWORD(v15[0]) = 77;
    v15[1] = v14;
    v15[2] = 2;
    v15[3] = 0;
    _DWORD v15[4] = 0;
    uint64_t v2 = *(void *)(a1 + 16);
    uint64_t v3 = (int *)v15;
  }
  else
  {
    v15[0] = a2;
    int v8 = 120;
    uint64_t v9 = v15;
    uint64_t v10 = 1;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v2 = *(void *)(a1 + 16);
    uint64_t v3 = &v8;
  }
  return sub_1CC72D410(v2, (uint64_t)v3) - 9 < 2;
}

uint64_t sub_1CC714E1C(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = a3;
  v90[24] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  if ((a2 & 0x80000000) != 0) {
    uint64_t v9 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v9 = (uint64_t *)(*(void *)(v8 + 272) + 8 * a2);
  }
  uint64_t v10 = *v9;
  if ((*(unsigned char *)(v10 + 3) & 1) == 0) {
    uint64_t v10 = *(void *)(v10 + 24);
  }
  uint64_t v11 = *(void *)(v10 + 8);
  int v12 = *(_DWORD *)(*(void *)(v11 + 32) + 4);
  if (v12 < 0
    && (uint64_t v13 = v12 & 0x7FFFFFFF, v14 = *(_DWORD *)(v8 + 432), v13 < v14)
    && (uint64_t v15 = *(void *)(v8 + 424), (*(void *)(v15 + 8 * v13) & 0xFFFFFFFFFFFFFFF9) != 0))
  {
    while (1)
    {
      unsigned int v16 = **(unsigned __int16 **)(v11 + 16);
      BOOL v17 = v16 > 0x2C;
      uint64_t v18 = (1 << v16) & 0x1C0000080000;
      if (v17 || v18 == 0) {
        break;
      }
      int v20 = *(_DWORD *)(*(void *)(v11 + 32) + 36);
      if ((v20 & 0x80000000) == 0) {
        break;
      }
      uint64_t v21 = v20 & 0x7FFFFFFF;
      if (v21 >= v14 || (*(void *)(v15 + 8 * v21) & 0xFFFFFFFFFFFFFFF9) == 0) {
        break;
      }
      uint64_t v11 = 0;
      uint64_t v22 = *(void *)(*(void *)(v8 + 24) + 16 * v21 + 8);
      if (v22)
      {
        if ((*(unsigned char *)(v22 + 3) & 1) != 0
          || (uint64_t v11 = 0, (v22 = *(void *)(v22 + 24)) != 0) && (uint64_t v11 = 0, (*(unsigned char *)(v22 + 3) & 1) != 0))
        {
          uint64_t v11 = *(void *)(v22 + 8);
        }
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  switch(**(_WORD **)(v11 + 16))
  {
    case 'J':
      if ((a2 & 0x80000000) != 0 && (a2 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v8 + 432)) {
        int v23 = *(void **)(*(void *)(v8 + 424) + 8 * (a2 & 0x7FFFFFFF));
      }
      else {
        int v23 = 0;
      }
      uint64_t v88 = v23;
      int v39 = sub_1CB8F1DC4((unint64_t *)&v88);
      if (v38 == 1) {
      uint64_t v40 = *(void *)(v11 + 32);
      }
      uint64_t v41 = *(void *)(v11 + 16);
      unsigned int v42 = *(unsigned __int8 *)(v41 + 4);
      if ((*(unsigned char *)(v41 + 8) & 2) == 0 || (int v55 = *(_DWORD *)(v11 + 40), v55 == v42))
      {
        unsigned int v43 = v42;
      }
      else
      {
        int v56 = v55 - 1;
        unsigned int v43 = v42;
        do
        {
          int v57 = *(_DWORD *)(v40 + 32 * v42);
          if ((v57 & 0x10000FF) != 0x1000000) {
            break;
          }
          v43 += (v57 & 0x2000000) == 0;
          if (v56 == v42) {
            break;
          }
          ++v42;
        }
        while ((v57 & 0x2000000) == 0);
      }
      int v44 = 0;
      if (v43)
      {
        uint64_t v45 = 32 * v43 - 32;
        int v46 = (int *)(v40 + 4);
        do
        {
          int v47 = *v46;
          v46 += 8;
          BOOL v48 = v47 == a2;
          if (v47 == a2) {
            int v49 = 0;
          }
          else {
            int v49 = v39;
          }
          BOOL v50 = v48 || v45 == 0;
          v45 -= 32;
          v44 += v49;
        }
        while (!v50);
      }
      unsigned int v51 = sub_1CC714E1C(a1, *(unsigned int *)(v40 + 32 * (*(_DWORD *)(v11 + 40) - 1) + 4), v44 + v5, a4);
      if (v5) {
        BOOL v52 = 0;
      }
      else {
        BOOL v52 = v39 == a4;
      }
      char v53 = v52;
      if (v51) {
        uint64_t v31 = v51;
      }
      else {
        uint64_t v31 = a2;
      }
      if (v51 || (v53 & 1) != 0) {
        return v31;
      }
      return *((unsigned int *)a1 + 6);
    case 'K':
      return sub_1CD617AB0(a1, v11, a3, a4);
    case 'M':
      int v32 = *(_DWORD *)(*(void *)(v11 + 32) + 36);
      if (v32 < 0 && (v32 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v8 + 432)) {
        uint64_t v33 = *(void **)(*(void *)(v8 + 424) + 8 * (v32 & 0x7FFFFFFF));
      }
      else {
        uint64_t v33 = 0;
      }
      uint64_t v88 = v33;
      unsigned int v35 = sub_1CB8F1DC4((unint64_t *)&v88);
      if (v34 == 1) {
      if (v5 % v35 || v35 > a4)
      }
        return *((unsigned int *)a1 + 6);
      uint64_t v36 = v5 / v35 + 1;
      if (v35 >= a4)
      {
        uint64_t v37 = *(void *)(v11 + 32) + 32 * v36;
        return *(unsigned int *)(v37 + 4);
      }
      uint64_t v58 = a4 / v35;
      if (a4 % v35) {
        return *((unsigned int *)a1 + 6);
      }
      if (v58 == *(_DWORD *)(v11 + 40) - 1)
      {
        uint64_t v37 = *(void *)(v11 + 32);
        return *(unsigned int *)(v37 + 4);
      }
      unint64_t v59 = v32 < 0 && (v32 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(*a1 + 432)
          ? *(void *)(*(void *)(*a1 + 424) + 8 * (v32 & 0x7FFFFFFF))
          : 0;
      uint64_t v60 = (void *)sub_1CBA5A95C(v58, v59);
      uint64_t v61 = a1[2];
      uint64_t v85 = v60;
      uint64_t v86 = v59;
      LODWORD(v88) = 77;
      uint64_t v89 = (uint64_t)&v85;
      v90[0] = 2;
      v90[1] = 0;
      v90[2] = 0;
      if (sub_1CC72D410(v61, (uint64_t)&v88)) {
        return *((unsigned int *)a1 + 6);
      }
      uint64_t v85 = v87;
      uint64_t v86 = 0xC00000000;
      unsigned int v62 = v58 + v36;
      if (v36 < v62)
      {
        unsigned int v63 = 0;
        do
        {
          if (v63 >= HIDWORD(v86)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v85 + v63) = *(_DWORD *)(*(void *)(v11 + 32) + 32 * v36 + 4);
          unsigned int v63 = v86 + 1;
          LODWORD(v86) = v86 + 1;
          ++v36;
        }
        while (v36 != v62);
      }
      uint64_t v64 = (void *)a1[1];
      v64[5] = *(void *)(v11 + 24);
      v64[6] = v11;
      uint64_t v65 = (unsigned __int8 **)(v11 + 56);
      unsigned int v66 = (unsigned __int8 **)(v64 + 4);
      if (v65 == v64 + 4) {
        goto LABEL_99;
      }
      uint64_t v67 = *v66;
      if (!*v66) {
        goto LABEL_97;
      }
      int v79 = *v67;
      if ((v79 - 4) > 0x1E)
      {
        if ((v79 - 3) >= 0xFFFFFFFE) {
          uint64_t v82 = *v66;
        }
        else {
          uint64_t v82 = 0;
        }
        if ((v79 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v81 = (unint64_t)(v82 + 8);
LABEL_120:
          uint64_t v88 = v66;
          sub_1CC5FA668(v81 + 16, &v88);
          goto LABEL_97;
        }
        if (v79 == 3) {
          *((void *)v67 + 1) = 0;
        }
      }
      else if ((v67[1] & 0x7F) == 2 || *((_DWORD *)v67 + 3))
      {
        uint64_t v80 = *((void *)v67 + 2);
        if ((v80 & 4) != 0)
        {
          unint64_t v81 = v80 & 0xFFFFFFFFFFFFFFF8;
          if (v81) {
            goto LABEL_120;
          }
        }
      }
LABEL_97:
      uint64_t v68 = *v65;
      *unsigned int v66 = *v65;
      if (v68) {
        llvm::MetadataTracking::track((uint64_t)v66, v68, 2);
      }
LABEL_99:
      uint64_t v69 = a1[1];
      uint64_t v83 = v60;
      int v84 = 0;
      uint64_t v70 = (int *)v85;
      int v71 = v86;
      uint64_t v88 = v90;
      uint64_t v89 = 0x800000000;
      if (v86 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v86)
      {
        uint64_t v72 = 0;
        uint64_t v73 = 4 * v86;
        do
        {
          int v74 = *v70++;
          unsigned int v75 = &v90[v72];
          *unsigned int v75 = v74;
          v75[4] = 0;
          v72 += 3;
          v73 -= 4;
        }
        while (v73);
        int v76 = v89;
      }
      else
      {
        int v76 = 0;
      }
      LODWORD(v89) = v76 + v71;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void *))(*(void *)v69 + 32))(v69, 77, &v83, 1, v90);
      uint64_t v78 = v77;
      if (v88 != v90) {
        free(v88);
      }
      uint64_t v31 = *(unsigned int *)(*(void *)(v78 + 32) + 4);
      if (v85 != v87) {
        free(v85);
      }
      return v31;
    case 'O':
      int v24 = *(_DWORD *)(*(void *)(v11 + 32) + 36);
      if (v24 < 0 && (uint64_t v25 = v24 & 0x7FFFFFFF, v25 < *(_DWORD *)(v8 + 432))) {
        unint64_t v26 = *(void **)(*(void *)(v8 + 424) + 8 * v25);
      }
      else {
        unint64_t v26 = 0;
      }
      uint64_t v88 = v26;
      unsigned int v28 = sub_1CB8F1DC4((unint64_t *)&v88);
      if (v27 == 1) {
      uint64_t v29 = v5 % v28;
      }
      if ((int)v29 + (int)a4 > v28) {
        return *((unsigned int *)a1 + 6);
      }
      uint64_t v30 = *(unsigned int *)(*(void *)(v11 + 32) + 32 * (v5 / v28 + 1) + 4);
      if (v28 == a4 && !v29) {
        *((_DWORD *)a1 + 6) = v30;
      }
      return sub_1CC714E1C(a1, v30, v29, a4);
    default:
      return *((unsigned int *)a1 + 6);
  }
}

void sub_1CC715554(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1CC715554(a1, *a2);
    sub_1CC715554(a1, a2[1]);
    unsigned int v5 = (unsigned __int8 *)a2[4];
    if (v5) {
      llvm::MetadataTracking::untrack((uint64_t)(a2 + 4), v5);
    }
    operator delete(a2);
  }
}

void **sub_1CC7155C8(void **result)
{
  char v1 = (void **)*result;
  uint64_t v2 = *((unsigned int *)result + 2);
  if (v2)
  {
    uint64_t v7 = result;
    uint64_t v3 = 8 * v2;
    uint64_t v4 = (char *)(v1 - 1);
    do
    {
      unsigned int v5 = *(unsigned __int8 **)&v4[v3];
      if (v5) {
        llvm::MetadataTracking::untrack((uint64_t)&v4[v3], v5);
      }
      v3 -= 8;
    }
    while (v3);
    int32x2_t result = v7;
    char v1 = (void **)*v7;
  }
  if (v1 != result + 2)
  {
    uint64_t v6 = result;
    free(v1);
    return v6;
  }
  return result;
}

uint64_t sub_1CC715648()
{
  *(void *)&long long v4 = "Should enable CSE in Legalizer";
  *((void *)&v4 + 1) = 30;
  int v3 = 0;
  char v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD617C08(&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCD9CE8, &dword_1CB82C000);
  *(void *)&long long v4 = "Allow G_INSERT to be considered an artifact. Hack around AMDGPU test infinite loops.";
  *((void *)&v4 + 1) = 84;
  int v3 = 0;
  char v1 = 1;
  uint64_t v2 = &v1;
  sub_1CD617D2C(&v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCD9DA8, &dword_1CB82C000);
}

uint64_t sub_1CC715714(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *(void *)(v6 + 40) = *(void *)(a2 + 24);
  *(void *)(v6 + 48) = a2;
  uint64_t v7 = (unsigned __int8 **)(a2 + 56);
  uint64_t v8 = (unsigned __int8 **)(v6 + 32);
  if (a2 + 56 == v6 + 32) {
    goto LABEL_5;
  }
  uint64_t v9 = *v8;
  if (*v8)
  {
    int v18 = *v9;
    if ((v18 - 4) > 0x1E)
    {
      if ((v18 - 3) >= 0xFFFFFFFE) {
        uint64_t v21 = *v8;
      }
      else {
        uint64_t v21 = 0;
      }
      if ((v18 - 3) < 0xFFFFFFFE)
      {
        if (v18 == 3) {
          *((void *)v9 + 1) = 0;
        }
        goto LABEL_3;
      }
      unint64_t v20 = (unint64_t)(v21 + 8);
    }
    else
    {
      if ((v9[1] & 0x7F) != 2 && !*((_DWORD *)v9 + 3)) {
        goto LABEL_3;
      }
      uint64_t v19 = *((void *)v9 + 2);
      if ((v19 & 4) == 0) {
        goto LABEL_3;
      }
      unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFF8;
      if (!v20) {
        goto LABEL_3;
      }
    }
    uint64_t v22 = v8;
    sub_1CC5FA668(v20 + 16, &v22);
  }
LABEL_3:
  uint64_t v10 = *v7;
  *uint64_t v8 = *v7;
  if (v10) {
    llvm::MetadataTracking::track((uint64_t)v8, v10, 2);
  }
LABEL_5:
  uint64_t v11 = a1[3];
  if ((**(_WORD **)(a2 + 16) & 0xFFFE) == 0x74)
  {
    int v17 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v11 + 24))(v11, a1, a2);
LABEL_10:
    if (v17) {
      return 1;
    }
    else {
      return 2;
    }
  }
  uint64_t v12 = sub_1CC72D660(v11, a2, a1[2]);
  uint64_t v15 = v12;
  if (!(_BYTE)v12) {
    return v15;
  }
  switch((char)v12)
  {
    case 1:
      uint64_t result = sub_1CC715B98(a1, a2, SHIDWORD(v12), v13);
      break;
    case 2:
      uint64_t result = sub_1CC71B718((uint64_t)a1, a2, SHIDWORD(v12), v13);
      break;
    case 3:
      uint64_t result = sub_1CC72364C(a1, (llvm::MachineInstr *)a2, SHIDWORD(v12), v13, v14);
      break;
    case 4:
      uint64_t result = sub_1CD618638(a1, (llvm::MachineInstr *)a2, SHIDWORD(v12), v13);
      break;
    case 5:
      uint64_t result = sub_1CD61829C((uint64_t)a1, a2, SHIDWORD(v12), v13);
      break;
    case 6:
      uint64_t result = sub_1CC71FF84((uint64_t)a1, a2);
      break;
    case 7:
      uint64_t result = sub_1CD617E50(a1, a2, a3);
      break;
    case 8:
      int v17 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, unint64_t))(*(void *)a1[3] + 16))(a1[3], a1, a2, v13);
      goto LABEL_10;
    default:
      return 2;
  }
  return result;
}

uint64_t sub_1CC715B98(uint64_t *a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v777 = *MEMORY[0x1E4F143B8];
  unint64_t v753 = a4;
  int v5 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
  if (v5 < 0 && (v6 = (void *)a1[2], uint64_t v7 = v5 & 0x7FFFFFFF, v7 < *((_DWORD *)v6 + 108))) {
    uint64_t v8 = *(void *)(v6[53] + 8 * v7);
  }
  else {
    uint64_t v8 = 0;
  }
  *(void *)&long long v759 = v8;
  unint64_t v10 = sub_1CB8F1DC4((unint64_t *)&v759);
  if (v9 == 1) {
  unint64_t v744 = sub_1CB8F1DC4(&v753);
  }
  if (v11 == 1) {
  int v12 = **(unsigned __int16 **)(a2 + 16);
  }
  if ((v12 - 91) < 2)
  {
    uint64_t v13 = *(void *)(a2 + 32);
    int v738 = *(_DWORD *)(v13 + 4);
    int v14 = *(_DWORD *)(v13 + 36);
    uint64_t v15 = a1[2];
    unint64_t v16 = v753;
    unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v15, "", 0);
    unint64_t v18 = IncompleteVirtualRegister & 0x7FFFFFFF;
    *(void *)(*(void *)(v15 + 24) + 16 * v18) = 4;
    unint64_t v19 = *(unsigned int *)(v15 + 432);
    if (v18 >= v19)
    {
      uint64_t v20 = *(void *)(v15 + 440);
      uint64_t v21 = v18 + 1 - v19;
      if (v18 >= *(unsigned int *)(v15 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v22 = *(_DWORD *)(v15 + 432);
      if (v21)
      {
        int v23 = (void *)(*(void *)(v15 + 424) + 8 * *(unsigned int *)(v15 + 432));
        uint64_t v24 = ~v18 + v19;
        do
        {
          *v23++ = v20;
          BOOL v25 = __CFADD__(v24++, 1);
        }
        while (!v25);
        int v22 = *(_DWORD *)(v15 + 432);
      }
      *(_DWORD *)(v15 + 432) = v22 + v21;
    }
    *(void *)(*(void *)(v15 + 424) + 8 * v18) = v16;
    uint64_t v26 = *(void *)(v15 + 8);
    if (v26) {
      (*(void (**)(uint64_t, void))(*(void *)v26 + 24))(v26, IncompleteVirtualRegister);
    }
    uint64_t v27 = *(void *)(a2 + 48);
    if ((v27 & 7) != 0)
    {
      unsigned int v28 = *(unint64_t **)((v27 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      unsigned int v28 = (unint64_t *)(v27 & 0xFFFFFFFFFFFFFFF8);
      *(void *)(a2 + 48) = v27 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((v28[3] & 0xFFFFFFFFFFFFFFF9) != 0)
    {
      unsigned int v30 = sub_1CB8F1DC4(v28 + 3);
      if (v29 == 1) {
      unint64_t v31 = v30;
      }
    }
    else
    {
      unint64_t v31 = 0xFFFFFFFFLL;
    }
    if (v31 == v744)
    {
      int v32 = a1;
      uint64_t v33 = (void *)*a1;
      LODWORD(v774) = IncompleteVirtualRegister;
      DWORD2(v774) = 1;
      LODWORD(v759) = v14;
      int v760 = 0;
      unsigned int v34 = 90;
LABEL_27:
      sub_1CC737934(v33, v34, (int *)&v774, (int *)&v759, (llvm::MachineMemOperand *)v28);
      goto LABEL_28;
    }
    if (v31 < v744)
    {
      int v32 = a1;
      uint64_t v33 = (void *)*a1;
      unsigned int v34 = **(unsigned __int16 **)(a2 + 16);
      LODWORD(v774) = IncompleteVirtualRegister;
      DWORD2(v774) = 1;
      LODWORD(v759) = v14;
      int v760 = 0;
      goto LABEL_27;
    }
    int v32 = a1;
    if (v31 <= v744)
    {
LABEL_28:
      uint64_t v35 = *v32;
      LODWORD(v774) = v738;
      DWORD2(v774) = 1;
      LODWORD(v759) = IncompleteVirtualRegister;
      int v760 = 0;
      (*(void (**)(void))(*(void *)v35 + 32))();
LABEL_29:
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
      return 1;
    }
    return 2;
  }
  uint64_t v36 = 2;
  if (**(unsigned __int16 **)(a2 + 16) > 0x92u)
  {
    if (**(unsigned __int16 **)(a2 + 16) > 0xB3u)
    {
      if ((v12 - 180) < 2)
      {
        return sub_1CD61B03C((uint64_t)a1, a2, a3, v753);
      }
      else
      {
        switch(**(_WORD **)(a2 + 16))
        {
          case 0xC1:
          case 0xC2:
            if (a3 != 1) {
              return 2;
            }
            uint64_t v296 = a1;
            uint64_t v295 = a2;
            (*(void (**)(uint64_t, uint64_t))(*(void *)a1[1] + 32))(a1[1], a2);
            uint64_t v302 = v753;
            uint64_t v303 = *a1;
            uint64_t v304 = *(void *)(a2 + 32);
            unsigned int v305 = 2;
            goto LABEL_737;
          case 0xCC:
          case 0xCD:
            uint64_t v36 = 2;
            if (a3 != 2) {
              return v36;
            }
            if (v12 == 205) {
              int v677 = 2;
            }
            else {
              int v677 = 3;
            }
            uint64_t v296 = a1;
            uint64_t v295 = a2;
            (*(void (**)(uint64_t, uint64_t))(*(void *)a1[1] + 32))(a1[1], a2);
            uint64_t v302 = v753;
            uint64_t v303 = *a1;
            uint64_t v304 = *(void *)(a2 + 32);
            unsigned int v305 = v677;
LABEL_737:
            sub_1CD61ADF0(v303, v304, v302, v305);
            goto LABEL_405;
          case 0xCF:
          case 0xD0:
          case 0xD1:
          case 0xD2:
          case 0xD3:
            if (a3 != 1)
            {
LABEL_403:
              uint64_t v296 = a1;
              uint64_t v295 = a2;
              (*(void (**)(uint64_t, uint64_t))(*(void *)a1[1] + 32))(a1[1], a2);
              uint64_t v297 = v753;
              uint64_t v298 = *(void *)(a2 + 32);
              uint64_t v299 = a1;
              uint64_t v300 = 126;
              goto LABEL_404;
            }
            if ((v12 - 207) < 2)
            {
              uint64_t v301 = sub_1CD61A6D4((uint64_t)a1, a2, v753);
            }
            else if ((v12 - 209) < 2)
            {
              uint64_t v301 = sub_1CD61A350((uint64_t)a1, a2, v753);
            }
            else
            {
              if (v12 != 211) {
                return 2;
              }
              uint64_t v301 = sub_1CD61AA58((uint64_t)a1, (llvm::MachineInstr *)a2, v753);
            }
            break;
          case 0xD4:
          case 0xD5:
            unint64_t v678 = v10 / v744;
            if (v10 % v744) {
              return 2;
            }
            (*(void (**)(uint64_t, uint64_t))(*(void *)a1[1] + 32))(a1[1], a2);
            *(void *)&long long v759 = &v760;
            *((void *)&v759 + 1) = 0x200000000;
            *(void *)&long long v774 = &v775;
            *((void *)&v774 + 1) = 0x200000000;
            sub_1CC724218(a1, *(_DWORD *)(*(void *)(a2 + 32) + 36), v753, v678, (uint64_t)&v759);
            if (v678)
            {
              int v679 = 0;
              uint64_t v680 = v678;
              do
              {
                uint64_t v681 = *a1;
                uint64_t v682 = **(unsigned __int16 **)(a2 + 16);
                *(void *)&long long v770 = v753;
                DWORD2(v770) = 0;
                LODWORD(v772) = *(_DWORD *)(v759 + 4 * (v678 + ~v679));
                v773[0] = 0;
                (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v681 + 32))(v681, v682, &v770, 1, &v772, 1, 0);
                if (DWORD2(v774) >= (unint64_t)HIDWORD(v774)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(_DWORD *)(v774 + 4 * DWORD2(v774)) = *(_DWORD *)(*(void *)(v683 + 32) + 4);
                unsigned int v684 = ++DWORD2(v774);
                ++v679;
                --v680;
              }
              while (v680);
            }
            else
            {
              unsigned int v684 = DWORD2(v774);
            }
            uint64_t v685 = *a1;
            LODWORD(v772) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
            DWORD2(v772) = 1;
            sub_1CC73661C(v685, (uint64_t)&v772, (int *)v774, v684);
            (*(void (**)(uint64_t, uint64_t))(*(void *)a1[1] + 40))(a1[1], a2);
            llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
            if ((uint64_t *)v774 != &v775) {
              free((void *)v774);
            }
            uint64_t v98 = (uint64_t *)v759;
            if ((int *)v759 == &v760) {
              return 1;
            }
            goto LABEL_172;
          default:
            return v36;
        }
      }
    }
    else
    {
      if (v12 != 147)
      {
        if (v12 != 178) {
          return v36;
        }
        if (!a3)
        {
          uint64_t v296 = a1;
          uint64_t v295 = a2;
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1[1] + 32))(a1[1], a2);
          uint64_t v297 = v753;
          uint64_t v298 = *(void *)(a2 + 32);
          uint64_t v299 = a1;
          uint64_t v300 = 178;
LABEL_404:
          sub_1CD61ACD8(v299, v298, v297, v300);
LABEL_405:
          (*(void (**)(uint64_t, uint64_t))(*(void *)v296[1] + 40))(v296[1], v295);
          return 1;
        }
        return 2;
      }
      return sub_1CC726FA8(a1, a2, v753);
    }
    return v301;
  }
  switch(**(_WORD **)(a2 + 16))
  {
    case 0x41:
    case 0x42:
    case 0x43:
      unint64_t v174 = v753;
      uint64_t v175 = *(void *)(a2 + 32);
      int v176 = *(_DWORD *)(v175 + 4);
      if (v176 < 0 && (unint64_t v177 = (void *)a1[2], (v176 & 0x7FFFFFFFu) < (unint64_t)*((unsigned int *)v177 + 108))) {
        unint64_t v178 = *(void *)(v177[53] + 8 * (v176 & 0x7FFFFFFF));
      }
      else {
        unint64_t v178 = 0;
      }
      *(void *)&long long v774 = &v775;
      *((void *)&v774 + 1) = 0x400000000;
      *(void *)&long long v772 = v773;
      *((void *)&v772 + 1) = 0x400000000;
      unint64_t v733 = v771;
      *(void *)&long long v770 = v771;
      *((void *)&v770 + 1) = 0x400000000;
      *(void *)&long long v768 = v769;
      *((void *)&v768 + 1) = 0x400000000;
      *(void *)&long long v766 = v767;
      *((void *)&v766 + 1) = 0x400000000;
      *(void *)&long long __src = v765;
      *((void *)&__src + 1) = 0x400000000;
      unint64_t v757 = 0;
      sub_1CC7243F4(a1, *(_DWORD *)(v175 + 36), v178, v753, (uint64_t *)&v757, (uint64_t)&v770, (int **)&v768);
      unint64_t v754 = 0;
      sub_1CC7243F4(a1, *(_DWORD *)(*(void *)(a2 + 32) + 68), v178, v174, (uint64_t *)&v754, (uint64_t)&v766, (int **)&__src);
      if (DWORD2(v766))
      {
        uint64_t v180 = 0;
        uint64_t v181 = 4 * DWORD2(v766);
        do
        {
          uint64_t v182 = **(unsigned __int16 **)(a2 + 16);
          *(void *)&long long v755 = v174;
          DWORD2(v755) = 0;
          uint64_t v183 = *a1;
          LODWORD(v759) = *(_DWORD *)(v770 + v180);
          int v760 = 0;
          LODWORD(v761) = *(_DWORD *)(v766 + v180);
          int v763 = 0;
          (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v183 + 32))(v183, v182, &v755, 1, &v759, 2, 0);
          if (DWORD2(v774) >= (unint64_t)HIDWORD(v774)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(v774 + 4 * DWORD2(v774)) = *(_DWORD *)(*(void *)(v184 + 32) + 4);
          ++DWORD2(v774);
          v180 += 4;
        }
        while (v181 != v180);
      }
      unint64_t v185 = v757;
      if (DWORD2(__src))
      {
        uint64_t v526 = 0;
        uint64_t v731 = 4 * DWORD2(__src);
        do
        {
          uint64_t v527 = **(unsigned __int16 **)(a2 + 16);
          *(void *)&long long v755 = v185;
          DWORD2(v755) = 0;
          uint64_t v528 = *a1;
          LODWORD(v759) = *(_DWORD *)(v768 + v526);
          int v760 = 0;
          LODWORD(v761) = *(_DWORD *)(__src + v526);
          int v763 = 0;
          (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v528 + 32))(v528, v527, &v755, 1, &v759, 2, 0);
          if (DWORD2(v772) >= (unint64_t)HIDWORD(v772)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(v772 + 4 * DWORD2(v772)) = *(_DWORD *)(*(void *)(v529 + 32) + 4);
          unsigned int v186 = ++DWORD2(v772);
          v526 += 4;
        }
        while (v731 != v526);
      }
      else
      {
        unsigned int v186 = DWORD2(v772);
      }
      sub_1CC724950(a1, v176, v178, v174, (int *)v774, DWORD2(v774), v185, v179, v772, v186);
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
      if ((_DWORD *)__src != v765) {
        free((void *)__src);
      }
      if ((_DWORD *)v766 != v767) {
        free((void *)v766);
      }
      if ((_DWORD *)v768 != v769) {
        free((void *)v768);
      }
      uint64_t v144 = (int *)v770;
      goto LABEL_166;
    case 0x44:
      int v286 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      if (v286 < 0 && (unint64_t v287 = (void *)a1[2], (v286 & 0x7FFFFFFFu) < *((_DWORD *)v287 + 108))) {
        unint64_t v288 = *(void *)(v287[53] + 8 * (v286 & 0x7FFFFFFF));
      }
      else {
        unint64_t v288 = 0;
      }
      unint64_t v289 = v10 / v744;
      if (v10 % v744)
      {
        unint64_t v660 = v753;
        if ((v288 & 0xFFFFFFFFFFFFFFF9) != 0 && (v288 & 4) != 0)
        {
          uint64_t v661 = 0x800000000000000;
          if ((v288 & 2) == 0) {
            uint64_t v661 = 0x8000000000000;
          }
          unint64_t v660 = sub_1CBA5A95C((unsigned __int16)(v288 >> 3) | ((unint64_t)((v661 & v288) != 0) << 32), v753);
        }
        uint64_t v662 = *a1;
        *(void *)&long long v759 = v660;
        DWORD2(v759) = 0;
        uint64_t v36 = 1;
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void, void, void))(*(void *)v662 + 32))(v662, 68, &v759, 1, 0, 0, 0);
        int v664 = *(_DWORD *)(*(void *)(v663 + 32) + 4);
        uint64_t v665 = *a1;
        LODWORD(v774) = v286;
        DWORD2(v774) = 1;
        LODWORD(v759) = v664;
        int v760 = 0;
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v665 + 32))(v665, 118, &v774, 1, &v759, 1, 0);
        goto LABEL_689;
      }
      *(void *)&long long v759 = &v760;
      *((void *)&v759 + 1) = 0x200000000;
      if ((int)v289 >= 1)
      {
        do
        {
          uint64_t v291 = *a1;
          *(void *)&long long v774 = v753;
          DWORD2(v774) = 0;
          (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void, void, void))(*(void *)v291 + 32))(v291, 68, &v774, 1, 0, 0, 0);
          if (DWORD2(v759) >= (unint64_t)HIDWORD(v759)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(v759 + 4 * DWORD2(v759)) = *(_DWORD *)(*(void *)(v292 + 32) + 4);
          uint64_t v290 = ++DWORD2(v759);
          LODWORD(v289) = v289 - 1;
        }
        while (v289);
      }
      else
      {
        uint64_t v290 = 0;
      }
      uint64_t v293 = *a1;
      if ((v288 & 0xFFFFFFFFFFFFFFF9) != 0 && (v288 & 4) != 0)
      {
        LODWORD(v774) = v286;
        DWORD2(v774) = 1;
        sub_1CC738CA0(v293, (uint64_t)&v774, (int *)v759, v290);
      }
      else
      {
        LODWORD(v774) = v286;
        DWORD2(v774) = 1;
        sub_1CC73661C(v293, (uint64_t)&v774, (int *)v759, v290);
      }
      unsigned int v294 = (llvm::MachineInstr *)a2;
LABEL_333:
      llvm::MachineInstr::eraseFromParent(v294);
      uint64_t v98 = (uint64_t *)v759;
      if ((int *)v759 == &v760) {
        return 1;
      }
      goto LABEL_172;
    case 0x45:
      unint64_t v406 = v10 / v744;
      if (v10 % v744) {
        return 2;
      }
      unint64_t v407 = (v10 / v744);
      v742 = (uint64_t *)v773;
      *(void *)&long long v772 = v773;
      *((void *)&v772 + 1) = 0x200000000;
      sub_1CBA0E058((uint64_t)&v772, v407, 0);
      unint64_t v408 = (unint64_t)*(unsigned int *)(a2 + 40) >> 1;
      *(void *)&long long v774 = &v775;
      *((void *)&v774 + 1) = 0x200000000;
      *(void *)&long long v759 = &v760;
      *((void *)&v759 + 1) = 0x200000000;
      sub_1CD629660((uint64_t)&v759, v408, (uint64_t)&v774);
      if ((uint64_t *)v774 != &v775) {
        free((void *)v774);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1[1] + 32))(a1[1], a2);
      if (*(_DWORD *)(a2 + 40) >= 2u)
      {
        unsigned int v409 = 1;
        do
        {
          unint64_t v410 = *(llvm::MachineBasicBlock **)(*(void *)(a2 + 32) + 32 * (v409 + 1) + 16);
          uint64_t v411 = *a1;
          unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v410);
          *(void *)(v411 + 40) = v410;
          *(void *)(v411 + 48) = FirstTerminator;
          sub_1CC724218(a1, *(_DWORD *)(*(void *)(a2 + 32) + 32 * v409 + 4), v753, v406, v759 + 24 * (v409 >> 1));
          v409 += 2;
        }
        while (v409 < *(_DWORD *)(a2 + 40));
      }
      uint64_t v413 = *a1;
      uint64_t v748 = *(void *)(a2 + 24);
      *(void *)(v413 + 40) = v748;
      *(void *)(v413 + 48) = a2;
      if (v406)
      {
        uint64_t v414 = 0;
        do
        {
          int GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v753, "", 0);
          *(_DWORD *)(v772 + 4 * v414) = GenericVirtualRegister;
          unsigned int v416 = (void *)*a1;
          unsigned int v417 = sub_1CC734F48((void *)*a1, 0x45u);
          uint64_t v419 = (llvm::MachineInstr *)v418;
          sub_1CC734FCC(v416, (uint64_t)v417, v418);
          int v420 = *(_DWORD *)(v772 + 4 * v414);
          *((void *)&v774 + 1) = 0;
          uint64_t v775 = 0;
          uint64_t v776 = 0;
          LODWORD(v774) = 0x1000000;
          DWORD1(v774) = v420;
          llvm::MachineInstr::addOperand(v419, v417, (const llvm::MachineOperand *)&v774);
          if (*(_DWORD *)(a2 + 40) >= 2u)
          {
            unsigned int v421 = 1;
            do
            {
              int v422 = *(_DWORD *)(*(void *)(v759 + 24 * (v421 >> 1)) + 4 * v414);
              *((void *)&v774 + 1) = 0;
              LODWORD(v774) = 0;
              DWORD1(v774) = v422;
              uint64_t v775 = 0;
              uint64_t v776 = 0;
              llvm::MachineInstr::addOperand(v419, v417, (const llvm::MachineOperand *)&v774);
              llvm::MachineInstr::addOperand(v419, v417, (const llvm::MachineOperand *)(*(void *)(a2 + 32) + 32 * (v421 + 1)));
              v421 += 2;
            }
            while (v421 < *(_DWORD *)(a2 + 40));
          }
          ++v414;
        }
        while (v414 != v407);
      }
      uint64_t v423 = *a1;
      uint64_t v424 = v748 + 48;
      uint64_t v425 = *(void *)(v748 + 56);
      while (2)
      {
        if (v425 != v424)
        {
          if (!**(_WORD **)(v425 + 16) || **(_WORD **)(v425 + 16) == 69)
          {
            uint64_t v425 = *(void *)(v425 + 8);
            continue;
          }
          uint64_t v424 = v425;
        }
        break;
      }
      *(void *)(v423 + 40) = v748;
      *(void *)(v423 + 48) = v424;
      uint64_t v426 = *a1;
      LODWORD(v774) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      DWORD2(v774) = 1;
      sub_1CC73661C(v426, (uint64_t)&v774, (int *)v772, DWORD2(v772));
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1[1] + 40))(a1[1], a2);
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
      sub_1CD629894((char **)&v759);
      uint64_t v98 = (uint64_t *)v772;
      goto LABEL_549;
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x4A:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x87:
      return v36;
    case 0x49:
      *(void *)&long long v766 = v753;
      if (a3 != 1) {
        return 2;
      }
      unint64_t v106 = sub_1CB8F1DC4((unint64_t *)&v766);
      if (v105 == 1) {
      int v107 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
      }
      if (v107 < 0 && (uint64_t v108 = (void *)a1[2], (v107 & 0x7FFFFFFFu) < *((_DWORD *)v108 + 108))) {
        uint64_t v109 = *(void *)(v108[53] + 8 * (v107 & 0x7FFFFFFF));
      }
      else {
        uint64_t v109 = 0;
      }
      *(void *)&long long v759 = v109;
      unint64_t v111 = sub_1CB8F1DC4((unint64_t *)&v759);
      if (v110 == 1) {
      unint64_t v112 = v111 / v106;
      }
      if (v111 % v106)
      {
        unint64_t v111 = v106 + v106 * v112;
        int v483 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], (8 * (v106 + v106 * v112)) | 1, "", 0);
        uint64_t v484 = *a1;
        LODWORD(v774) = v483;
        DWORD2(v774) = 1;
        LODWORD(v759) = v107;
        int v760 = 0;
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v484 + 32))(v484, 118, &v774, 1, &v759, 1, 0);
        int v107 = v483;
      }
      *(void *)&long long v774 = &v775;
      *((void *)&v774 + 1) = 0x200000000;
      *(void *)&long long v772 = v773;
      *((void *)&v772 + 1) = 0x200000000;
      unint64_t v733 = &v760;
      *(void *)&long long v759 = &v760;
      *((void *)&v759 + 1) = 0x200000000;
      int v113 = v107;
      unint64_t v114 = v111 / v106;
      sub_1CC724218(a1, v113, v766, v111 / v106, (uint64_t)&v774);
      uint64_t v115 = *(void *)(a2 + 32);
      int v116 = *(_DWORD *)(v115 + 4);
      if (v116 < 0)
      {
        uint64_t v117 = a1;
        uint64_t v118 = (void *)a1[2];
        uint64_t v119 = *(unsigned int *)(v115 + 4);
        if ((v116 & 0x7FFFFFFFu) >= (unint64_t)*((unsigned int *)v118 + 108)) {
          uint64_t v120 = 0;
        }
        else {
          uint64_t v120 = *(void *)(v118[53] + 8 * (v116 & 0x7FFFFFFF));
        }
      }
      else
      {
        uint64_t v117 = a1;
        uint64_t v120 = 0;
        uint64_t v119 = *(unsigned int *)(v115 + 4);
      }
      unint64_t v121 = *(void *)(v115 + 80);
      *(void *)&long long v770 = v120;
      unint64_t v122 = sub_1CB8F1DC4((unint64_t *)&v770);
      if (v123 == 1)
      {
        unint64_t v485 = v122;
        unint64_t v122 = v485;
      }
      if ((int)v114 < 1) {
        goto LABEL_156;
      }
      unsigned int v124 = 0;
      uint64_t v125 = 0;
      unint64_t v126 = v122 + v121;
      unint64_t v127 = v119 & 0x7FFFFFFF;
      uint64_t v128 = 4 * v114;
      while (1)
      {
        unint64_t v129 = v106 + v124;
        BOOL v62 = v129 > v121;
        unint64_t v130 = v129 - v121;
        if (v62 && v126 > v124) {
          break;
        }
LABEL_137:
        v125 += 4;
        v124 += v106;
        if (v128 == v125)
        {
LABEL_156:
          int v137 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
          if ((v137 & 0x80000000) == 0
            || (uint64_t v138 = v117[2], (v137 & 0x7FFFFFFFu) >= *(_DWORD *)(v138 + 432))
            || ((uint64_t v139 = *(void *)(*(void *)(v138 + 424) + 8 * (v137 & 0x7FFFFFFF)),
                 unint64_t v140 = v139 & 0xFFFFFFFFFFFFFFF9,
                 uint64_t v141 = v139 & 4,
                 v140)
              ? (BOOL v142 = v141 == 0)
              : (BOOL v142 = 1),
                v142))
          {
            uint64_t v143 = *v117;
            if (DWORD2(v772) < 2)
            {
              LODWORD(v768) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
              DWORD2(v768) = 1;
              LODWORD(v770) = *(_DWORD *)v772;
              v771[0] = 0;
              (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v143 + 32))(v143, 19, &v768, 1, &v770, 1, 0);
            }
            else
            {
              LODWORD(v770) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
              DWORD2(v770) = 1;
              sub_1CC73661C(v143, (uint64_t)&v770, (int *)v772, DWORD2(v772));
            }
          }
          else
          {
            uint64_t v486 = *v117;
            LODWORD(v770) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
            DWORD2(v770) = 1;
            sub_1CC738CA0(v486, (uint64_t)&v770, (int *)v772, DWORD2(v772));
          }
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          uint64_t v144 = (int *)v759;
LABEL_166:
          if (v144 != v733) {
            free(v144);
          }
          if ((_DWORD *)v772 != v773) {
            free((void *)v772);
          }
          uint64_t v98 = (uint64_t *)v774;
          uint64_t v145 = &v775;
          goto LABEL_171;
        }
      }
      if (v121 == v124)
      {
        if ((v119 & 0x80000000) != 0 && (uint64_t v132 = v117[2], v127 < *(unsigned int *)(v132 + 432))) {
          uint64_t v133 = *(void *)(*(void *)(v132 + 424) + 8 * v127);
        }
        else {
          uint64_t v133 = 0;
        }
        if ((void)v766 == v133) {
          goto LABEL_153;
        }
      }
      uint64_t v134 = v121 - v124;
      if (v121 >= v124)
      {
        if (v122 >= v130) {
          unint64_t v135 = v130;
        }
        else {
          unint64_t v135 = v122;
        }
        if (v134)
        {
          unint64_t v726 = v127;
          uint64_t v728 = v119;
          unint64_t v730 = v122;
          goto LABEL_539;
        }
      }
      else
      {
        unint64_t v135 = v126 - v124;
        if (v135 >= v106) {
          unint64_t v135 = v106;
        }
      }
      if (v135 == v106)
      {
LABEL_153:
        int v136 = *(_DWORD *)(v774 + v125);
LABEL_154:
        if (DWORD2(v772) >= (unint64_t)HIDWORD(v772)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(v772 + 4 * DWORD2(v772)) = v136;
        ++DWORD2(v772);
        goto LABEL_137;
      }
      unint64_t v726 = v127;
      uint64_t v728 = v119;
      unint64_t v730 = v122;
      uint64_t v134 = 0;
LABEL_539:
      int v136 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v117[2], (8 * v135) | 1, "", 0);
      uint64_t v454 = (void *)*v117;
      LODWORD(v768) = v136;
      DWORD2(v768) = 1;
      LODWORD(v770) = *(_DWORD *)(v774 + v125);
      v771[0] = 0;
      sub_1CC7383D8(v454, (unint64_t *)&v768, (int *)&v770, v134);
      uint64_t v119 = v728;
      unint64_t v122 = v730;
      unint64_t v127 = v726;
      goto LABEL_154;
    case 0x4B:
      *(void *)&long long v755 = v753;
      if (a3) {
        return 2;
      }
      int v38 = &v775;
      *(void *)&long long v774 = &v775;
      *((void *)&v774 + 1) = 0x200000000;
      *(void *)&long long v772 = v773;
      *((void *)&v772 + 1) = 0x200000000;
      *(void *)&long long v770 = v771;
      *((void *)&v770 + 1) = 0x200000000;
      *(void *)&long long v759 = &v760;
      *((void *)&v759 + 1) = 0x200000000;
      uint64_t v39 = *(void *)(a2 + 32);
      int v40 = *(_DWORD *)(v39 + 4);
      if (v40 < 0 && (uint64_t v41 = (void *)a1[2], v42 = v40 & 0x7FFFFFFF, v42 < *((_DWORD *)v41 + 108))) {
        unint64_t v43 = *(void *)(v41[53] + 8 * v42);
      }
      else {
        unint64_t v43 = 0;
      }
      unint64_t v757 = v43;
      unint64_t v754 = 0;
      sub_1CC7243F4(a1, *(_DWORD *)(v39 + 36), v43, v753, (uint64_t *)&v754, (uint64_t)&v774, (int **)&v772);
      if (DWORD2(v772))
      {
        unsigned int v448 = (_DWORD *)v772;
        unsigned int v449 = DWORD2(v774);
        uint64_t v450 = 4 * DWORD2(v772);
        do
        {
          if (v449 >= HIDWORD(v774)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(v774 + 4 * v449) = *v448;
          unsigned int v449 = ++DWORD2(v774);
          ++v448;
          v450 -= 4;
        }
        while (v450);
      }
      uint64_t v45 = sub_1CB8F1DC4((unint64_t *)&v755);
      if (v44 == 1) {
      uint64_t v46 = *(void *)(a2 + 32);
      }
      uint64_t v47 = *(unsigned int *)(v46 + 68);
      if ((v47 & 0x80000000) != 0
        && (BOOL v48 = (void *)a1[2], (v47 & 0x7FFFFFFF) < (unint64_t)*((unsigned int *)v48 + 108)))
      {
        uint64_t v49 = *(void *)(v48[53] + 8 * (v47 & 0x7FFFFFFF));
      }
      else
      {
        uint64_t v49 = 0;
      }
      unint64_t v50 = *(void *)(v46 + 112);
      *(void *)&long long v768 = v49;
      unint64_t v52 = sub_1CB8F1DC4((unint64_t *)&v768);
      if (v51 == 1) {
      uint64_t v53 = DWORD2(v774);
      }
      if (DWORD2(v774))
      {
        uint64_t v54 = 0;
        unint64_t v55 = v47 & 0x7FFFFFFF;
        unint64_t v56 = v754;
        unint64_t v57 = v52 + v50;
        unint64_t v739 = v754;
        while (1)
        {
          unint64_t v58 = (v54 * v45);
          uint64_t v59 = a1[2];
          if (v50 == v58
            && ((v47 & 0x80000000) == 0 || v55 >= *(unsigned int *)(v59 + 432)
              ? (uint64_t v66 = 0)
              : (uint64_t v66 = *(void *)(*(void *)(v59 + 424) + 8 * v55)),
                (void)v755 == v66))
          {
            unint64_t v63 = DWORD2(v770);
            unint64_t v64 = HIDWORD(v770);
            int v60 = v47;
          }
          else
          {
            int v60 = *(_DWORD *)(v774 + 4 * v54);
            if (v60 < 0 && (v60 & 0x7FFFFFFFu) < *(_DWORD *)(v59 + 432)) {
              uint64_t v61 = *(void *)(*(void *)(v59 + 424) + 8 * (v60 & 0x7FFFFFFF));
            }
            else {
              uint64_t v61 = 0;
            }
            if (v61 == v56)
            {
              unint64_t v718 = v55;
              int v60 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v59, v755, "", 0);
              uint64_t v312 = *a1;
              LODWORD(v766) = v60;
              DWORD2(v766) = 1;
              LODWORD(v768) = *(_DWORD *)(v774 + 4 * v54);
              v769[0] = 0;
              (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v312 + 32))(v312, 118, &v766, 1, &v768, 1, 0);
              unint64_t v56 = v739;
              unint64_t v55 = v718;
            }
            BOOL v62 = v58 + v45 > v50 && v57 > v58;
            if (v62)
            {
              unint64_t v717 = v55;
              unint64_t v719 = v52;
              uint64_t v732 = v47;
              uint64_t v722 = v38;
              if (v50 >= v58) {
                unint64_t v67 = v50 - v58;
              }
              else {
                unint64_t v67 = 0;
              }
              unint64_t v68 = v57 - v58;
              if (v57 - v58 >= v45 - v67) {
                unint64_t v68 = v45 - v67;
              }
              uint64_t v69 = a1[2];
              unsigned int v715 = v67;
              if (v58 <= v50 && v68 >= v52)
              {
                int v725 = v47;
              }
              else
              {
                uint64_t v70 = v58 - v50;
                if (v58 < v50) {
                  uint64_t v70 = 0;
                }
                unsigned int v707 = v68;
                uint64_t v710 = v70;
                int v71 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v69, "", 0);
                unint64_t v72 = v71 & 0x7FFFFFFF;
                *(void *)(*(void *)(v69 + 24) + 16 * v72) = 4;
                unint64_t v73 = *(unsigned int *)(v69 + 432);
                int v725 = v71;
                if (v72 >= v73)
                {
                  unint64_t v74 = v72 + 1;
                  uint64_t v75 = *(void *)(v69 + 440);
                  if (v72 >= *(unsigned int *)(v69 + 436)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  int v76 = *(_DWORD *)(v69 + 432);
                  if (v74 != v73)
                  {
                    uint64_t v77 = (void *)(*(void *)(v69 + 424) + 8 * v73);
                    uint64_t v78 = ~v72 + v73;
                    do
                    {
                      *v77++ = v75;
                      BOOL v25 = __CFADD__(v78++, 1);
                    }
                    while (!v25);
                    int v76 = *(_DWORD *)(v69 + 432);
                  }
                  *(_DWORD *)(v69 + 432) = v76 + v74 - v73;
                }
                *(void *)(*(void *)(v69 + 424) + 8 * v72) = (8 * v707) | 1;
                uint64_t v79 = *(void *)(v69 + 8);
                if (v79)
                {
                  int v452 = v71;
                  (*(void (**)(uint64_t))(*(void *)v79 + 24))(v79);
                  int v71 = v452;
                }
                uint64_t v80 = (void *)*a1;
                LODWORD(v766) = v71;
                DWORD2(v766) = 1;
                LODWORD(v768) = v732;
                v769[0] = 0;
                sub_1CC7383D8(v80, (unint64_t *)&v766, (int *)&v768, v710);
                uint64_t v69 = a1[2];
              }
              uint64_t v711 = v755;
              int v81 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v69, "", 0);
              unint64_t v82 = v81 & 0x7FFFFFFF;
              *(void *)(*(void *)(v69 + 24) + 16 * v82) = 4;
              unint64_t v83 = *(unsigned int *)(v69 + 432);
              int v84 = v725;
              if (v82 >= v83)
              {
                unint64_t v85 = v82 + 1;
                uint64_t v86 = *(void *)(v69 + 440);
                if (v82 >= *(unsigned int *)(v69 + 436)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                int v87 = *(_DWORD *)(v69 + 432);
                if (v85 != v83)
                {
                  uint64_t v88 = (void *)(*(void *)(v69 + 424) + 8 * *(unsigned int *)(v69 + 432));
                  uint64_t v89 = ~v82 + v83;
                  do
                  {
                    *v88++ = v86;
                    BOOL v25 = __CFADD__(v89++, 1);
                  }
                  while (!v25);
                  int v87 = *(_DWORD *)(v69 + 432);
                }
                *(_DWORD *)(v69 + 432) = v87 + v85 - v83;
              }
              *(void *)(*(void *)(v69 + 424) + 8 * v82) = v711;
              uint64_t v90 = *(void *)(v69 + 8);
              uint64_t v47 = v732;
              if (v90)
              {
                int v453 = v81;
                (*(void (**)(uint64_t))(*(void *)v90 + 24))(v90);
                int v81 = v453;
                int v84 = v725;
              }
              uint64_t v91 = (void *)*a1;
              LODWORD(__src) = v81;
              DWORD2(__src) = 1;
              LODWORD(v768) = v60;
              v769[0] = 0;
              LODWORD(v766) = v84;
              v767[0] = 0;
              int v92 = v81;
              sub_1CC7388A0(v91, (uint64_t *)&__src, &v768, (int *)&v766, v715);
              unint64_t v63 = DWORD2(v770);
              int v60 = v92;
              unint64_t v52 = v719;
              int v38 = v722;
              unint64_t v55 = v717;
              unint64_t v56 = v739;
              if (DWORD2(v770) >= (unint64_t)HIDWORD(v770)) {
LABEL_98:
              }
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              goto LABEL_60;
            }
            unint64_t v63 = DWORD2(v770);
            unint64_t v64 = HIDWORD(v770);
          }
          if (v63 >= v64) {
            goto LABEL_98;
          }
LABEL_60:
          *(_DWORD *)(v770 + 4 * v63) = v60;
          unsigned int v65 = ++DWORD2(v770);
          if (++v54 == v53) {
            goto LABEL_100;
          }
        }
      }
      unsigned int v65 = DWORD2(v770);
LABEL_100:
      unint64_t v93 = v45 * v65;
      int v94 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      unint64_t v96 = sub_1CB8F1DC4(&v757);
      if (v95 == 1) {
      if (v93 > v96)
      }
      {
        int v445 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], (8 * v93) | 1, "", 0);
        uint64_t v446 = *a1;
        LODWORD(v768) = v445;
        DWORD2(v768) = 1;
        sub_1CC73661C(v446, (uint64_t)&v768, (int *)v770, DWORD2(v770));
        uint64_t v447 = *a1;
        LODWORD(v766) = v94;
        DWORD2(v766) = 1;
        LODWORD(v768) = v445;
        v769[0] = 0;
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v447 + 32))(v447, 119, &v766, 1, &v768, 1, 0);
      }
      else
      {
        uint64_t v97 = *a1;
        LODWORD(v768) = v94;
        DWORD2(v768) = 1;
        sub_1CC73661C(v97, (uint64_t)&v768, (int *)v770, DWORD2(v770));
      }
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
      if ((int *)v759 != &v760) {
        free((void *)v759);
      }
      if ((_DWORD *)v770 != v771) {
        free((void *)v770);
      }
      if ((_DWORD *)v772 != v773) {
        free((void *)v772);
      }
      uint64_t v98 = (uint64_t *)v774;
      if ((uint64_t *)v774 == v38) {
        return 1;
      }
      goto LABEL_172;
    case 0x50:
      if (!a3) {
        goto LABEL_403;
      }
      return 2;
    case 0x51:
      if (a3 != 1) {
        return 2;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1[1] + 32))(a1[1], a2);
      uint64_t v36 = 1;
      sub_1CD61ADF0(*a1, *(void *)(a2 + 32), v753, 1u);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1[1] + 40))(a1[1], a2);
      return v36;
    case 0x52:
      if (v10 % v744) {
        return 2;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1[1] + 32))(a1[1], a2);
      unint64_t v340 = sub_1CB8F1DC4(&v753);
      if (v339 == 1) {
      *(void *)&long long v759 = &v760;
      }
      *((void *)&v759 + 1) = 0x200000000;
      *(void *)&long long v774 = &v775;
      *((void *)&v774 + 1) = 0x200000000;
      unint64_t v341 = v10 / v340;
      sub_1CC724218(a1, *(_DWORD *)(*(void *)(a2 + 32) + 36), v753, v341, (uint64_t)&v759);
      if ((int)v341 >= 1)
      {
        uint64_t v342 = 0;
        do
        {
          uint64_t v343 = a1[2];
          int v344 = *(_DWORD *)(v759 + v342);
          if (v344 < 0 && (v344 & 0x7FFFFFFFu) < *(_DWORD *)(v343 + 432)) {
            uint64_t v345 = *(void *)(*(void *)(v343 + 424) + 8 * (v344 & 0x7FFFFFFF));
          }
          else {
            uint64_t v345 = 0;
          }
          if (v753 != v345)
          {
            int v344 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v343, v753, "", 0);
            uint64_t v346 = *a1;
            LODWORD(v770) = v344;
            DWORD2(v770) = 1;
            LODWORD(v772) = *(_DWORD *)(v759 + v342);
            v773[0] = 0;
            sub_1CC7382B0(v346);
          }
          if (DWORD2(v774) >= (unint64_t)HIDWORD(v774)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(v774 + 4 * DWORD2(v774)) = v344;
          ++DWORD2(v774);
          v342 += 4;
        }
        while (4 * v341 != v342);
      }
      int v443 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      if ((v443 & 0x80000000) == 0
        || (uint64_t v477 = (void *)a1[2], (v443 & 0x7FFFFFFFu) >= *((_DWORD *)v477 + 108))
        || ((uint64_t v478 = *(void *)(v477[53] + 8 * (v443 & 0x7FFFFFFF)),
             unint64_t v479 = v478 & 0xFFFFFFFFFFFFFFF9,
             uint64_t v480 = v478 & 4,
             v479)
          ? (BOOL v481 = v480 == 0)
          : (BOOL v481 = 1),
            v481))
      {
        uint64_t v444 = *a1;
        LODWORD(v772) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
        DWORD2(v772) = 1;
        sub_1CC73661C(v444, (uint64_t)&v772, (int *)v774, DWORD2(v774));
      }
      else
      {
        uint64_t v482 = *a1;
        LODWORD(v772) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
        DWORD2(v772) = 1;
        sub_1CC738CA0(v482, (uint64_t)&v772, (int *)v774, DWORD2(v774));
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1[1] + 40))(a1[1], a2);
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
      if ((uint64_t *)v774 != &v775) {
        free((void *)v774);
      }
      uint64_t v98 = (uint64_t *)v759;
      if ((int *)v759 == &v760) {
        return 1;
      }
      goto LABEL_172;
    case 0x53:
      if (a3) {
        return 2;
      }
      int v347 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      if (v347 < 0 && (uint64_t v475 = (void *)a1[2], v476 = v347 & 0x7FFFFFFF, v476 < *((_DWORD *)v475 + 108))) {
        uint64_t v348 = *(void *)(v475[53] + 8 * v476);
      }
      else {
        uint64_t v348 = 0;
      }
      *(void *)&long long v770 = v348;
      unint64_t v350 = sub_1CB8F1DC4((unint64_t *)&v770);
      if (v349 == 1) {
      unint64_t v352 = sub_1CB8F1DC4(&v753);
      }
      if (v351 == 1) {
      if (v350 % v352)
      }
        return 2;
      unsigned int v353 = (void *)*a1;
      LODWORD(v759) = *(_DWORD *)(*(void *)(a2 + 32) + 36);
      int v760 = 0;
      sub_1CC7363F0(v353, v753, (int *)&v759);
      uint64_t v355 = v354;
      unsigned int v356 = 0;
      unint64_t v357 = 0;
      *(void *)&long long v759 = &v760;
      *((void *)&v759 + 1) = 0x800000000;
      while (1)
      {
        int NumExplicitDefs = llvm::MachineInstr::getNumExplicitDefs(v355);
        uint64_t v359 = *(void *)(*((void *)v355 + 2) + 32);
        if (v359)
        {
          unsigned int v360 = -1;
          do
            ++v360;
          while (*(_WORD *)(v359 + 2 * v360));
        }
        else
        {
          unsigned int v360 = 0;
        }
        unint64_t v361 = v360 + NumExplicitDefs;
        uint64_t v362 = *a1;
        if (v357 >= v361) {
          break;
        }
        int v363 = *(_DWORD *)(*((void *)v355 + 4) + 32 * v357 + 4);
        *(void *)&long long v772 = v753;
        DWORD2(v772) = 0;
        LODWORD(v774) = v363;
        LODWORD(v775) = 0;
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v362 + 32))(v362, 83, &v772, 1, &v774, 1, 0);
        if (DWORD2(v759) >= (unint64_t)HIDWORD(v759)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(v759 + 4 * DWORD2(v759)) = *(_DWORD *)(*(void *)(v364 + 32) + 4);
        unsigned int v356 = ++DWORD2(v759);
        ++v357;
      }
      LODWORD(v774) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      DWORD2(v774) = 1;
      sub_1CC73661C(v362, (uint64_t)&v774, (int *)v759, v356);
      unsigned int v294 = (llvm::MachineInstr *)a2;
      goto LABEL_333;
    case 0x5A:
      int v313 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      if (v313 < 0 && (uint64_t v439 = (void *)a1[2], (v313 & 0x7FFFFFFFu) < *((_DWORD *)v439 + 108)))
      {
        *(void *)&long long v772 = *(void *)(v439[53] + 8 * (v313 & 0x7FFFFFFF));
        if ((v772 & 0xFFFFFFFFFFFFFFF9) != 0 && (v772 & 4) != 0) {
          return 2;
        }
      }
      else
      {
        *(void *)&long long v772 = 0;
      }
      uint64_t v314 = *(void *)(a2 + 48);
      if ((v314 & 7) != 0)
      {
        unint64_t v315 = *(void *)((v314 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        unint64_t v315 = v314 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(a2 + 48) = v314 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v316 = 8 * sub_1CB8F20C0(v315);
      uint64_t v318 = sub_1CB8F1DC4((unint64_t *)&v772);
      if (v317 == 1) {
      if (v316 == v318)
      }
      {
        unint64_t v580 = v753;
        uint64_t v581 = a1;
        uint64_t v582 = a2;
        int v583 = a3;
        return sub_1CD619BD4(v581, v582, v583, v580);
      }
      int v319 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v753, "", 0);
      unsigned int v320 = (void *)*a1;
      LODWORD(v774) = v319;
      DWORD2(v774) = 1;
      LODWORD(v759) = *(_DWORD *)(*(void *)(a2 + 32) + 36);
      int v760 = 0;
      uint64_t v321 = *(void *)(a2 + 48);
      if ((v321 & 7) != 0)
      {
        char v322 = *(llvm::MachineMemOperand **)((v321 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        char v322 = (llvm::MachineMemOperand *)(v321 & 0xFFFFFFFFFFFFFFF8);
        *(void *)(a2 + 48) = v321 & 0xFFFFFFFFFFFFFFF8;
      }
      sub_1CC737934(v320, 0x5Au, (int *)&v774, (int *)&v759, v322);
      uint64_t v323 = *a1;
      LODWORD(v774) = v313;
      DWORD2(v774) = 1;
      LODWORD(v759) = v319;
      int v760 = 0;
      (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v323 + 32))(v323, 118, &v774, 1, &v759, 1, 0);
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
      return 1;
    case 0x60:
      int v324 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      if (v324 < 0 && (unint64_t v441 = (void *)a1[2], (v324 & 0x7FFFFFFFu) < *((_DWORD *)v441 + 108)))
      {
        *(void *)&long long v772 = *(void *)(v441[53] + 8 * (v324 & 0x7FFFFFFF));
        if ((v772 & 0xFFFFFFFFFFFFFFF9) != 0 && (v772 & 4) != 0) {
          return 2;
        }
      }
      else
      {
        *(void *)&long long v772 = 0;
      }
      int v326 = sub_1CB8F1DC4(&v753);
      if (v325 == 1) {
      int v328 = sub_1CB8F1DC4((unint64_t *)&v772);
      }
      if (v327 == 1) {
      if ((v772 & 0xFFFFFFFFFFFFFFF9) != 0 && (v772 & 4) != 0 && v328 != v326 * (v10 / v744))
      }
        return 2;
      uint64_t v329 = *(void *)(a2 + 48);
      if ((v329 & 7) != 0)
      {
        unint64_t v330 = *(void *)((v329 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        unint64_t v330 = v329 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(a2 + 48) = v329 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v331 = 8 * sub_1CB8F20C0(v330);
      uint64_t v333 = sub_1CB8F1DC4((unint64_t *)&v772);
      if (v332 == 1) {
      if (v331 != v333)
      }
      {
        int v334 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v753, "", 0);
        uint64_t v335 = *a1;
        LODWORD(v774) = v334;
        DWORD2(v774) = 1;
        LODWORD(v759) = v324;
        int v760 = 0;
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v335 + 32))(v335, 119, &v774, 1, &v759, 1, 0);
        long long v336 = (void *)*a1;
        LODWORD(v759) = v334;
        int v760 = 0;
        LODWORD(v774) = *(_DWORD *)(*(void *)(a2 + 32) + 36);
        LODWORD(v775) = 0;
        uint64_t v337 = *(void *)(a2 + 48);
        if ((v337 & 7) != 0)
        {
          uint64_t v338 = *(llvm::MachineMemOperand **)((v337 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          uint64_t v338 = (llvm::MachineMemOperand *)(v337 & 0xFFFFFFFFFFFFFFF8);
          *(void *)(a2 + 48) = v337 & 0xFFFFFFFFFFFFFFF8;
        }
        sub_1CC737D1C(v336, (int *)&v759, (int *)&v774, v338);
        goto LABEL_29;
      }
      unint64_t v580 = v753;
      uint64_t v581 = a1;
      uint64_t v582 = a2;
      int v583 = 0;
      return sub_1CD619BD4(v581, v582, v583, v580);
    case 0x76:
    case 0x7C:
    case 0x7E:
      if (a3) {
        return 2;
      }
      unint64_t v255 = v753;
      uint64_t v256 = *(void *)(a2 + 32);
      int v257 = *(_DWORD *)(v256 + 4);
      int v258 = *(_DWORD *)(v256 + 36);
      if (v257 < 0 && (uint64_t v259 = (void *)a1[2], (v257 & 0x7FFFFFFFu) < (unint64_t)*((unsigned int *)v259 + 108)))
      {
        unint64_t v260 = *(void *)(v259[53] + 8 * (v257 & 0x7FFFFFFF));
        if ((v260 & 0xFFFFFFFFFFFFFFF9) != 0 && (*(void *)(v259[53] + 8 * (v257 & 0x7FFFFFFF)) & 4) != 0) {
          return 2;
        }
      }
      else
      {
        unint64_t v260 = 0;
      }
      *(void *)&long long v759 = &v760;
      *((void *)&v759 + 1) = 0x800000000;
      unint64_t v262 = sub_1CC7257E0((uint64_t)a1, (uint64_t)&v759, v260, v753, v258);
      unint64_t v263 = (void *)sub_1CC724E64((llvm::IntegerType ******)a1, v260, v255, v262, (uint64_t)&v759, **(unsigned __int16 **)(a2 + 16));
      sub_1CC725580(a1, v257, v263, (int *)v759, DWORD2(v759));
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
      uint64_t v98 = (uint64_t *)v759;
      if ((int *)v759 == &v760) {
        return 1;
      }
      goto LABEL_172;
    case 0x77:
      if (a3 != 1) {
        return 2;
      }
      int v430 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
      if (v430 < 0 && (unsigned int v521 = (void *)a1[2], v522 = v430 & 0x7FFFFFFF, v522 < *((_DWORD *)v521 + 108))) {
        uint64_t v431 = *(void *)(v521[53] + 8 * v522);
      }
      else {
        uint64_t v431 = 0;
      }
      *(void *)&long long v759 = v431;
      uint64_t v433 = sub_1CB8F1DC4((unint64_t *)&v759);
      if (v432 == 1) {
      uint64_t v435 = 2 * sub_1CB8F1DC4(&v753);
      }
      if (v434 == 1) {
      if (v435 != v433)
      }
        return 2;
      unsigned int v436 = (void *)*a1;
      LODWORD(v759) = *(_DWORD *)(*(void *)(a2 + 32) + 36);
      int v760 = 0;
      sub_1CC7363F0(v436, v753, (int *)&v759);
      uint64_t v437 = *a1;
      uint64_t v36 = 1;
      LODWORD(v774) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      DWORD2(v774) = 1;
      LODWORD(v759) = *(_DWORD *)(*(void *)(v438 + 32) + 4);
      int v760 = 0;
      (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v437 + 32))(v437, 19, &v774, 1, &v759, 1, 0);
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
      return v36;
    case 0x78:
      uint64_t v146 = *(void *)(a2 + 32);
      int v147 = *(_DWORD *)(v146 + 4);
      if (v147 < 0 && (uint64_t v148 = (void *)a1[2], v149 = v147 & 0x7FFFFFFF, v149 < *((_DWORD *)v148 + 108))) {
        uint64_t v150 = *(void *)(v148[53] + 8 * v149);
      }
      else {
        uint64_t v150 = 0;
      }
      *(void *)&long long v766 = v150;
      uint64_t v151 = *(void *)(v146 + 48);
      unsigned int v153 = sub_1CB8F1DC4((unint64_t *)&v766);
      if (v152 == 1) {
      unsigned int v157 = sub_1CB8F1DC4(&v753);
      }
      if (v154 == 1) {
      v745 = (void *)(v151 + 24);
      }
      *(void *)&long long v759 = &v760;
      *((void *)&v759 + 1) = 0x400000000;
      uint64_t v158 = v153 / v157;
      if (v157 > v153)
      {
        unsigned int v169 = 0;
      }
      else
      {
        uint64_t v159 = 0;
        unsigned int v740 = v153;
        do
        {
          unsigned int v160 = v159 * v157;
          unsigned int v161 = (llvm::ConstantInt *****)*a1;
          *(void *)&long long v774 = v753;
          DWORD2(v774) = 0;
          unsigned int v162 = *(_DWORD *)(v151 + 32);
          DWORD2(v770) = v162;
          if (v162 > 0x40) {
            operator new[]();
          }
          if (v162 == v160)
          {
            *(void *)&long long v770 = 0;
          }
          else
          {
            *(void *)&long long v770 = *v745 >> v160;
            unsigned int v160 = v162;
          }
          if (v157 > 0x40)
          {
            if (v160 != v157) {
              operator new[]();
            }
            sub_1CD0463BC((uint64_t)&v772, (uint64_t)&v770);
          }
          else
          {
            if (v160 >= 0x41) {
              unsigned int v163 = (long long *)v770;
            }
            else {
              unsigned int v163 = &v770;
            }
            uint64_t v164 = *(void *)v163;
            DWORD2(v772) = v157;
            unint64_t v165 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v157;
            if (!v157) {
              unint64_t v165 = 0;
            }
            *(void *)&long long v772 = v165 & v164;
          }
          unint64_t v166 = llvm::ConstantInt::get(***v161[1], (llvm::LLVMContext *)&v772, v155);
          ((void (*)(llvm::ConstantInt *****, long long *, void *))(*v161)[2])(v161, &v774, v166);
          uint64_t v168 = v167;
          if (DWORD2(v772) >= 0x41 && (void)v772) {
            MEMORY[0x1D25D9CB0](v772, 0x1000C8000313F17);
          }
          if (DWORD2(v770) >= 0x41 && (void)v770) {
            MEMORY[0x1D25D9CB0](v770, 0x1000C8000313F17);
          }
          if (DWORD2(v759) >= (unint64_t)HIDWORD(v759)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(v759 + 4 * DWORD2(v759)) = *(_DWORD *)(*(void *)(v168 + 32) + 4);
          unsigned int v169 = ++DWORD2(v759);
          ++v159;
        }
        while (v159 != v158);
        unsigned int v153 = v740;
      }
      *(void *)&long long v774 = &v775;
      *((void *)&v774 + 1) = 0x100000000;
      uint64_t v170 = v153 - v158 * v157;
      if (v153 == v158 * v157)
      {
        uint64_t v171 = 0;
        unint64_t v172 = 0;
        unint64_t v173 = &v775;
      }
      else
      {
        uint64_t v523 = (llvm::ConstantInt *****)*a1;
        unint64_t v172 = (8 * v170) | 1;
        *(void *)&long long v772 = v172;
        DWORD2(v772) = 0;
        sub_1CB8F02F4((uint64_t)v745, v158 * v157, (uint64_t)&v768);
        llvm::APInt::trunc((uint64_t)&v768, v170, (uint64_t)&v770);
        sub_1CC737454(v523, (uint64_t)&v772, (llvm::LLVMContext *)&v770);
        uint64_t v525 = v524;
        if (DWORD2(v770) >= 0x41 && (void)v770) {
          MEMORY[0x1D25D9CB0](v770, 0x1000C8000313F17);
        }
        if (DWORD2(v768) >= 0x41 && (void)v768) {
          MEMORY[0x1D25D9CB0](v768, 0x1000C8000313F17);
        }
        if (DWORD2(v774) >= HIDWORD(v774)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(v774 + 4 * DWORD2(v774)) = *(_DWORD *)(*(void *)(v525 + 32) + 4);
        uint64_t v171 = ++DWORD2(v774);
        unsigned int v169 = DWORD2(v759);
        unint64_t v173 = (uint64_t *)v774;
      }
      sub_1CC724950(a1, *(_DWORD *)(*(void *)(a2 + 32) + 4), v766, v753, (int *)v759, v169, v172, v156, (uint64_t)v173, v171);
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
      if ((uint64_t *)v774 != &v775) {
        free((void *)v774);
      }
      uint64_t v98 = (uint64_t *)v759;
      if ((int *)v759 != &v760) {
        goto LABEL_172;
      }
      return 1;
    case 0x7D:
      if (a3) {
        return 2;
      }
      uint64_t v427 = *(void *)(a2 + 32);
      uint64_t v428 = *(void *)(v427 + 80);
      if (v753)
      {
        uint64_t v429 = (v753 >> 3);
      }
      else if ((v753 & 4) != 0)
      {
        if ((v753 & 2) != 0) {
          uint64_t v429 = (unsigned __int16)(v753 >> 19);
        }
        else {
          uint64_t v429 = (v753 >> 19);
        }
      }
      else
      {
        uint64_t v429 = (unsigned __int16)(v753 >> 3);
      }
      if (v428 <= v429)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1[1] + 32))(a1[1], a2);
        uint64_t v512 = *(void *)(a2 + 32);
        uint64_t v513 = v512 + 32;
        uint64_t v514 = *a1;
        *(void *)&long long v774 = v753;
        DWORD2(v774) = 0;
        LODWORD(v759) = *(_DWORD *)(v512 + 36);
        int v760 = 0;
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v514 + 32))(v514, 119, &v774, 1, &v759, 1, 0);
        llvm::MachineOperand::setReg(v513, *(_DWORD *)(*(void *)(v515 + 32) + 4));
        uint64_t v516 = *(void *)(a2 + 32);
        unsigned int v517 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v753, "", 0);
        uint64_t v518 = *(void *)(*a1 + 48);
        if (!v518 || (*(unsigned char *)v518 & 4) == 0)
        {
          while ((*(_WORD *)(v518 + 44) & 8) != 0)
            uint64_t v518 = *(void *)(v518 + 8);
        }
        *(void *)(*a1 + 48) = *(void *)(v518 + 8);
        uint64_t v519 = *a1;
        LODWORD(v774) = *(_DWORD *)(v516 + 4);
        DWORD2(v774) = 1;
        unsigned int v520 = v517;
        LODWORD(v759) = v517;
        int v760 = 0;
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v519 + 32))(v519, 124, &v774, 1, &v759, 1, 0);
        llvm::MachineOperand::setReg(v516, v520);
        uint64_t v104 = *(void (**)(void))(*(void *)a1[1] + 40);
        goto LABEL_114;
      }
      unint64_t v487 = v10 / v744;
      if (v10 % v744) {
        return 2;
      }
      v742 = &v775;
      *(void *)&long long v774 = &v775;
      *((void *)&v774 + 1) = 0x200000000;
      *(void *)&long long v772 = v773;
      *((void *)&v772 + 1) = 0x200000000;
      if ((int)v487 < 1)
      {
        uint64_t v490 = 0;
        uint64_t v491 = (char *)v773;
      }
      else
      {
        int v488 = v10 / v744;
        do
        {
          int v489 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v753, "", 0);
          if (DWORD2(v772) >= (unint64_t)HIDWORD(v772)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(v772 + 4 * DWORD2(v772)) = v489;
          uint64_t v490 = ++DWORD2(v772);
          --v488;
        }
        while (v488);
        uint64_t v491 = (char *)v772;
        uint64_t v427 = *(void *)(a2 + 32);
      }
      uint64_t v492 = *a1;
      LODWORD(v759) = *(_DWORD *)(v427 + 36);
      int v760 = 0;
      sub_1CC738BB8(v492, v491, v490, (uint64_t)&v759);
      uint64_t v493 = *a1;
      *(void *)&long long v759 = v753;
      DWORD2(v759) = 0;
      int v494 = (unsigned __int16)(v753 >> 3);
      int v495 = (unsigned __int16)(v753 >> 19);
      if ((v753 & 2) == 0) {
        int v495 = v753 >> 19;
      }
      if ((v753 & 4) != 0) {
        int v494 = v495;
      }
      if (v753) {
        int v496 = v753 >> 3;
      }
      else {
        int v496 = v494;
      }
      sub_1CC7362A8(v493, (unint64_t *)&v759, (v496 - 1));
      if ((int)v487 <= 0)
      {
        unsigned int v504 = DWORD2(v774);
LABEL_692:
        uint64_t v646 = *a1;
        LODWORD(v759) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
        DWORD2(v759) = 1;
        sub_1CC73661C(v646, (uint64_t)&v759, (int *)v774, v504);
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
        uint64_t v472 = (_DWORD *)v772;
LABEL_546:
        if (v472 != v773) {
          free(v472);
        }
        uint64_t v98 = (uint64_t *)v774;
LABEL_549:
        uint64_t v145 = v742;
LABEL_171:
        if (v98 == v145) {
          return 1;
        }
LABEL_172:
        free(v98);
        return 1;
      }
      uint64_t v498 = 0;
      int v499 = 0;
      int v500 = 0;
      int v501 = *(_DWORD *)(*(void *)(v497 + 32) + 4);
      while (1)
      {
        uint64_t v502 = v498 + 1;
        if (v753)
        {
          if (v428 > (v753 >> 3) * v502) {
            goto LABEL_591;
          }
          int v503 = v753 >> 3;
        }
        else if ((v753 & 4) != 0)
        {
          if ((v753 & 2) != 0) {
            int v505 = 0xFFFF;
          }
          else {
            int v505 = -1;
          }
          if (v428 > (v505 & (v753 >> 19)) * v502)
          {
LABEL_591:
            if (DWORD2(v774) >= (unint64_t)HIDWORD(v774)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(v774 + 4 * DWORD2(v774)) = *(_DWORD *)(v772 + 4 * v498);
            goto LABEL_593;
          }
          int v503 = (unsigned __int16)(v753 >> 19);
          if ((v753 & 2) == 0) {
            int v503 = v753 >> 19;
          }
        }
        else
        {
          int v503 = (unsigned __int16)(v753 >> 3);
          if (v428 > (v503 * v502)) {
            goto LABEL_591;
          }
        }
        if (v428 >= (v503 * v498))
        {
          uint64_t v506 = *a1;
          *(void *)&long long v770 = v753;
          DWORD2(v770) = 0;
          LODWORD(v759) = *(_DWORD *)(v772 + 4 * v498);
          int v760 = 0;
          unint64_t v507 = (unsigned __int16)(v753 >> 3);
          unint64_t v508 = (unsigned __int16)(v753 >> 19);
          if ((v753 & 2) == 0) {
            unint64_t v508 = (v753 >> 19);
          }
          if ((v753 & 4) != 0) {
            unint64_t v507 = v508;
          }
          if (v753) {
            unint64_t v507 = (v753 >> 3);
          }
          unint64_t v761 = v428 % v507;
          int v763 = 3;
          (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v506 + 32))(v506, 125, &v770, 1, &v759, 2, 0);
          if (DWORD2(v774) >= (unint64_t)HIDWORD(v774)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(v774 + 4 * DWORD2(v774)) = *(_DWORD *)(*(void *)(v509 + 32) + 4);
          unsigned int v504 = DWORD2(v774) + 1;
          DWORD2(v774) = v504;
          int v500 = *(_DWORD *)(v774 + 4 * v504 - 4);
          goto LABEL_594;
        }
        if (!v499)
        {
          uint64_t v510 = *a1;
          *(void *)&long long v770 = v753;
          DWORD2(v770) = 0;
          LODWORD(v759) = v500;
          int v760 = 0;
          LODWORD(v761) = v501;
          int v763 = 0;
          (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v510 + 32))(v510, 129, &v770, 1, &v759, 2, 0);
          if (DWORD2(v774) >= (unint64_t)HIDWORD(v774)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(v774 + 4 * DWORD2(v774)) = *(_DWORD *)(*(void *)(v511 + 32) + 4);
          unsigned int v504 = DWORD2(v774) + 1;
          DWORD2(v774) = v504;
          int v499 = *(_DWORD *)(v774 + 4 * v504 - 4);
          goto LABEL_594;
        }
        if (DWORD2(v774) >= (unint64_t)HIDWORD(v774)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(v774 + 4 * DWORD2(v774)) = v499;
LABEL_593:
        unsigned int v504 = ++DWORD2(v774);
LABEL_594:
        uint64_t v498 = v502;
        if (v487 == v502) {
          goto LABEL_692;
        }
      }
    case 0x7F:
    case 0x80:
    case 0x81:
      if (a3 != 1)
      {
        uint64_t v187 = *(void *)(a2 + 32);
        int v188 = *(_DWORD *)(v187 + 4);
        uint64_t v189 = a1[2];
        if (v188 < 0 && (v188 & 0x7FFFFFFFu) < *(_DWORD *)(v189 + 432))
        {
          unint64_t v190 = *(void *)(*(void *)(v189 + 424) + 8 * (v188 & 0x7FFFFFFF));
          uint64_t v191 = v190 & 4;
          if ((v190 & 0xFFFFFFFFFFFFFFF9) != 0 && v191 != 0) {
            return 2;
          }
        }
        else
        {
          uint64_t v191 = 0;
          unint64_t v190 = 0;
        }
        unsigned int v193 = *(_DWORD *)(v187 + 68);
        if ((v193 & 0x80000000) != 0 && (v193 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v189 + 432)) {
          uint64_t v741 = *(void *)(*(void *)(v189 + 424) + 8 * (v193 & 0x7FFFFFFF));
        }
        else {
          uint64_t v741 = 0;
        }
        if (v190)
        {
          unsigned int v194 = v190 >> 3;
        }
        else if (v191)
        {
          if ((v190 & 2) != 0) {
            unsigned int v194 = (unsigned __int16)(v190 >> 19);
          }
          else {
            unsigned int v194 = v190 >> 19;
          }
        }
        else
        {
          unsigned int v194 = (unsigned __int16)(v190 >> 3);
        }
        if (v194) {
          return 2;
        }
        unint64_t v195 = v194 >> 1;
        sub_1CC73C44C(v193, v189, 1, (uint64_t)&v774);
        uint64_t v746 = (8 * v195) | 1;
        if (!(_BYTE)v776)
        {
          uint64_t v530 = *a1;
          *(void *)&long long v759 = v741;
          DWORD2(v759) = 0;
          uint64_t v531 = sub_1CC7362A8(v530, (unint64_t *)&v759, v195);
          unint64_t v729 = v532;
          unsigned int v533 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], (8 * v195) | 1, "", 0);
          unsigned int v534 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], (8 * v195) | 1, "", 0);
          uint64_t v535 = *a1;
          *(void *)&long long v774 = __PAIR64__(v534, v533);
          unsigned int v735 = v534;
          LODWORD(v759) = *(_DWORD *)(*(void *)(a2 + 32) + 36);
          int v760 = 0;
          sub_1CC738BB8(v535, (char *)&v774, 2, (uint64_t)&v759);
          uint64_t v536 = *a1;
          *(void *)&long long v774 = v741;
          DWORD2(v774) = 0;
          LODWORD(v759) = v193;
          int v760 = 0;
          unint64_t v761 = v531;
          unint64_t v762 = v729;
          int v763 = 1;
          uint64_t v721 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v536 + 32))(v536, 46, &v774, 1, &v759, 2, 0);
          unint64_t v724 = v537;
          uint64_t v538 = *a1;
          *(void *)&long long v774 = v741;
          DWORD2(v774) = 0;
          *(void *)&long long v759 = v531;
          *((void *)&v759 + 1) = v729;
          int v760 = 1;
          LODWORD(v761) = v193;
          int v763 = 0;
          uint64_t v708 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v538 + 32))(v538, 46, &v774, 1, &v759, 2, 0);
          unint64_t v712 = v539;
          uint64_t v540 = *a1;
          *(void *)&long long v759 = v741;
          DWORD2(v759) = 0;
          uint64_t v541 = sub_1CC7362A8(v540, (unint64_t *)&v759, 0);
          uint64_t v543 = v542;
          uint64_t v544 = *a1;
          *(void *)&long long v772 = 9;
          DWORD2(v772) = 0;
          LODWORD(v759) = v193;
          int v760 = 0;
          *(void *)&long long v774 = v531;
          *((void *)&v774 + 1) = v729;
          LODWORD(v775) = 1;
          *(void *)&long long v727 = sub_1CC73933C(v544, 36, (uint64_t)&v772, &v759, &v774);
          *((void *)&v727 + 1) = v545;
          uint64_t v546 = *a1;
          *(void *)&long long v772 = 9;
          DWORD2(v772) = 0;
          LODWORD(v759) = v193;
          int v760 = 0;
          *(void *)&long long v774 = v541;
          *((void *)&v774 + 1) = v543;
          LODWORD(v775) = 1;
          *(void *)&long long v716 = sub_1CC73933C(v546, 32, (uint64_t)&v772, &v759, &v774);
          *((void *)&v716 + 1) = v547;
          unint64_t v757 = 0;
          uint64_t v548 = **(unsigned __int16 **)(a2 + 16);
          if (v548 == 127)
          {
            uint64_t v549 = *a1;
            *(void *)&long long v774 = (8 * v195) | 1;
            DWORD2(v774) = 0;
            LODWORD(v759) = v533;
            int v760 = 0;
            LODWORD(v761) = v193;
            int v763 = 0;
            uint64_t v743 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v549 + 32))(v549, v548, &v774, 1, &v759, 2, 0);
            uint64_t v705 = v550;
            uint64_t v551 = *a1;
            *(void *)&long long v774 = (8 * v195) | 1;
            DWORD2(v774) = 0;
            LODWORD(v759) = v533;
            int v760 = 0;
            unint64_t v761 = v708;
            unint64_t v762 = v712;
            int v763 = 1;
            uint64_t v552 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v551 + 32))(v551, 128, &v774, 1, &v759, 2, 0);
            uint64_t v554 = v553;
            uint64_t v555 = *a1;
            *(void *)&long long v774 = (8 * v195) | 1;
            DWORD2(v774) = 0;
            LODWORD(v759) = v735;
            int v760 = 0;
            LODWORD(v761) = v193;
            int v763 = 0;
            uint64_t v556 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v555 + 32))(v555, 127, &v774, 1, &v759, 2, 0);
            uint64_t v557 = *a1;
            *(void *)&long long v774 = (8 * v195) | 1;
            DWORD2(v774) = 0;
            *(void *)&long long v759 = v552;
            *((void *)&v759 + 1) = v554;
            int v760 = 1;
            unint64_t v761 = v556;
            unint64_t v762 = v558;
            int v763 = 1;
            uint64_t v559 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v557 + 32))(v557, 66, &v774, 1, &v759, 2, 0);
            uint64_t v709 = v560;
            uint64_t v713 = v559;
            uint64_t v561 = *a1;
            *(void *)&long long v759 = (8 * v195) | 1;
            DWORD2(v759) = 0;
            uint64_t v562 = sub_1CC7362A8(v561, (unint64_t *)&v759, 0);
            uint64_t v564 = v563;
            uint64_t v565 = *a1;
            *(void *)&long long v774 = (8 * v195) | 1;
            DWORD2(v774) = 0;
            LODWORD(v759) = v533;
            int v760 = 0;
            unint64_t v761 = v721;
            unint64_t v762 = v724;
            int v763 = 1;
            uint64_t v566 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v565 + 32))(v565, 127, &v774, 1, &v759, 2, 0);
            uint64_t v568 = v567;
            uint64_t v569 = *a1;
            *(void *)&long long v770 = (8 * v195) | 1;
            DWORD2(v770) = 0;
            long long v759 = v727;
            int v760 = 1;
            *(void *)&long long v774 = v743;
            *((void *)&v774 + 1) = v705;
            LODWORD(v775) = 1;
            *(void *)&long long v772 = v562;
            *((void *)&v772 + 1) = v564;
            v773[0] = 1;
            sub_1CC739494(v569, (uint64_t *)&v770, &v759, &v774, &v772, 0);
            uint64_t v571 = v570;
            uint64_t v572 = *a1;
            *(void *)&long long __src = (8 * v195) | 1;
            DWORD2(__src) = 0;
            long long v759 = v716;
            int v760 = 1;
            LODWORD(v774) = v735;
            LODWORD(v775) = 0;
            *(void *)&long long v755 = __src;
            DWORD2(v755) = 0;
            long long v770 = v727;
            v771[0] = 1;
            *(void *)&long long v768 = v713;
            *((void *)&v768 + 1) = v709;
            v769[0] = 1;
            *(void *)&long long v766 = v566;
            *((void *)&v766 + 1) = v568;
            v767[0] = 1;
            *(void *)&long long v772 = sub_1CC739494(v572, (uint64_t *)&v755, &v770, &v768, &v766, 0);
            *((void *)&v772 + 1) = v573;
            v773[0] = 1;
            p_src = &__src;
            uint64_t v575 = v572;
          }
          else
          {
            uint64_t v584 = *a1;
            *(void *)&long long v774 = (8 * v195) | 1;
            DWORD2(v774) = 0;
            LODWORD(v759) = v735;
            int v760 = 0;
            LODWORD(v761) = v193;
            int v763 = 0;
            uint64_t v585 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v584 + 32))(v584, v548, &v774, 1, &v759, 2, 0);
            uint64_t v704 = v586;
            uint64_t v706 = v585;
            uint64_t v587 = *a1;
            *(void *)&long long v774 = (8 * v195) | 1;
            DWORD2(v774) = 0;
            LODWORD(v759) = v533;
            int v760 = 0;
            LODWORD(v761) = v193;
            int v763 = 0;
            uint64_t v588 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v587 + 32))(v587, 128, &v774, 1, &v759, 2, 0);
            uint64_t v590 = v589;
            uint64_t v591 = *a1;
            *(void *)&long long v774 = (8 * v195) | 1;
            DWORD2(v774) = 0;
            LODWORD(v759) = v735;
            int v760 = 0;
            unint64_t v761 = v708;
            unint64_t v762 = v712;
            int v763 = 1;
            uint64_t v592 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v591 + 32))(v591, 127, &v774, 1, &v759, 2, 0);
            uint64_t v593 = *a1;
            *(void *)&long long v774 = (8 * v195) | 1;
            DWORD2(v774) = 0;
            *(void *)&long long v759 = v588;
            *((void *)&v759 + 1) = v590;
            int v760 = 1;
            unint64_t v761 = v592;
            unint64_t v762 = v594;
            int v763 = 1;
            uint64_t v595 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v593 + 32))(v593, 66, &v774, 1, &v759, 2, 0);
            uint64_t v714 = v596;
            uint64_t v597 = *a1;
            if (**(_WORD **)(a2 + 16) == 128)
            {
              *(void *)&long long v759 = (8 * v195) | 1;
              DWORD2(v759) = 0;
              uint64_t v598 = sub_1CC7362A8(v597, (unint64_t *)&v759, 0);
            }
            else
            {
              *(void *)&long long v759 = v741;
              DWORD2(v759) = 0;
              uint64_t v631 = sub_1CC7362A8(v597, (unint64_t *)&v759, (v195 - 1));
              uint64_t v632 = *a1;
              *(void *)&long long v774 = (8 * v195) | 1;
              DWORD2(v774) = 0;
              LODWORD(v759) = v735;
              int v760 = 0;
              unint64_t v761 = v631;
              unint64_t v762 = v633;
              int v763 = 1;
              uint64_t v598 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v632 + 32))(v632, 129, &v774, 1, &v759, 2, 0);
            }
            uint64_t v634 = v598;
            uint64_t v635 = v599;
            uint64_t v636 = *a1;
            uint64_t v637 = **(unsigned __int16 **)(a2 + 16);
            *(void *)&long long v774 = v746;
            DWORD2(v774) = 0;
            LODWORD(v759) = v735;
            int v760 = 0;
            unint64_t v761 = v721;
            unint64_t v762 = v724;
            int v763 = 1;
            uint64_t v638 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v636 + 32))(v636, v637, &v774, 1, &v759, 2, 0);
            uint64_t v639 = *a1;
            *(void *)&long long __src = v746;
            DWORD2(__src) = 0;
            long long v759 = v716;
            int v760 = 1;
            LODWORD(v774) = v533;
            LODWORD(v775) = 0;
            *(void *)&long long v755 = v746;
            DWORD2(v755) = 0;
            long long v770 = v727;
            v771[0] = 1;
            *(void *)&long long v768 = v595;
            *((void *)&v768 + 1) = v714;
            v769[0] = 1;
            *(void *)&long long v766 = v638;
            *((void *)&v766 + 1) = v640;
            v767[0] = 1;
            *(void *)&long long v772 = sub_1CC739494(v639, (uint64_t *)&v755, &v770, &v768, &v766, 0);
            *((void *)&v772 + 1) = v641;
            v773[0] = 1;
            sub_1CC739494(v639, (uint64_t *)&__src, &v759, &v774, &v772, 0);
            uint64_t v571 = v642;
            uint64_t v575 = *a1;
            *(void *)&long long v770 = v746;
            DWORD2(v770) = 0;
            long long v759 = v727;
            int v760 = 1;
            *(void *)&long long v774 = v706;
            *((void *)&v774 + 1) = v704;
            LODWORD(v775) = 1;
            *(void *)&long long v772 = v634;
            *((void *)&v772 + 1) = v635;
            v773[0] = 1;
            p_src = &v770;
          }
          sub_1CC739494(v575, (uint64_t *)p_src, &v759, &v774, &v772, 0);
          int v644 = *(_DWORD *)(*(void *)(v643 + 32) + 4);
          LODWORD(v757) = *(_DWORD *)(*(void *)(v571 + 32) + 4);
          HIDWORD(v757) = v644;
          uint64_t v645 = *a1;
          uint64_t v36 = 1;
          LODWORD(v759) = v188;
          DWORD2(v759) = 1;
          sub_1CC73661C(v645, (uint64_t)&v759, (int *)&v757, 2);
LABEL_689:
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          return v36;
        }
        *(void *)&long long v755 = (8 * v195) | 1;
        uint64_t v196 = a1[2];
        LODWORD(v197) = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v196, "", 0);
        unint64_t v198 = v197 & 0x7FFFFFFF;
        *(void *)(*(void *)(v196 + 24) + 16 * v198) = 4;
        std::string::size_type v199 = (void *)*(unsigned int *)(v196 + 432);
        if (v198 >= (unint64_t)v199)
        {
          uint64_t v200 = *(void *)(v196 + 440);
          unint64_t v201 = v198 + 1 - (void)v199;
          if (v198 >= *(unsigned int *)(v196 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v202 = *(_DWORD *)(v196 + 432);
          if (v201)
          {
            uint64_t v203 = (void *)(*(void *)(v196 + 424) + 8 * *(unsigned int *)(v196 + 432));
            uint64_t v204 = (char *)v199 + ~v198;
            do
            {
              *v203++ = v200;
              BOOL v25 = __CFADD__(v204++, 1);
            }
            while (!v25);
            int v202 = *(_DWORD *)(v196 + 432);
          }
          *(_DWORD *)(v196 + 432) = v202 + v201;
        }
        *(void *)(*(void *)(v196 + 424) + 8 * v198) = (8 * v195) | 1;
        uint64_t v205 = *(void *)(v196 + 8);
        if (v205) {
          (*(void (**)(uint64_t, void))(*(void *)v205 + 24))(v205, v197);
        }
        uint64_t v206 = a1[2];
        LODWORD(v207) = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v206, "", 0);
        unint64_t v208 = v207 & 0x7FFFFFFF;
        *(void *)(*(void *)(v206 + 24) + 16 * v208) = 4;
        unint64_t v209 = *(unsigned int *)(v206 + 432);
        if (v208 >= v209)
        {
          std::string::size_type v199 = (void *)(v206 + 424);
          uint64_t v210 = *(void *)(v206 + 440);
          uint64_t v211 = v208 + 1 - v209;
          if (v208 >= *(unsigned int *)(v206 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v212 = *(_DWORD *)(v206 + 432);
          if (v211)
          {
            std::string v213 = (void *)(*v199 + 8 * *(unsigned int *)(v206 + 432));
            uint64_t v214 = ~v208 + v209;
            do
            {
              *v213++ = v210;
              BOOL v25 = __CFADD__(v214++, 1);
            }
            while (!v25);
            int v212 = *(_DWORD *)(v206 + 432);
          }
          *(_DWORD *)(v206 + 432) = v212 + v211;
        }
        uint64_t v215 = (8 * v195) | 1;
        *(void *)(*(void *)(v206 + 424) + 8 * v208) = v746;
        uint64_t v216 = *(void *)(v206 + 8);
        if (v216) {
          (*(void (**)(uint64_t, void))(*(void *)v216 + 24))(v216, v207);
        }
        uint64_t v217 = *a1;
        *(void *)&long long v772 = __PAIR64__(v207, v197);
        LODWORD(v759) = *(_DWORD *)(*(void *)(a2 + 32) + 36);
        int v760 = 0;
        sub_1CC738BB8(v217, (char *)&v772, 2, (uint64_t)&v759);
        if (DWORD2(v774) <= 0x40)
        {
          if ((void)v774) {
            goto LABEL_261;
          }
        }
        else
        {
          int v218 = 0;
          int64_t v219 = ((unint64_t)DWORD2(v774) + 63) >> 6;
          do
          {
            BOOL v62 = v219-- < 1;
            if (v62) {
              break;
            }
            unint64_t v220 = *(void *)(v774 + 8 * v219);
            v218 += __clz(v220);
          }
          while (!v220);
          unsigned int v221 = DWORD2(v774) | 0xFFFFFFC0;
          if ((BYTE8(v774) & 0x3F) == 0) {
            unsigned int v221 = 0;
          }
          if (v218 + v221 != DWORD2(v774))
          {
LABEL_261:
            unsigned int v224 = sub_1CB8F1DC4((unint64_t *)&v755);
            if (v222 == 1) {
            unint64_t v225 = 2 * v224;
            }
            int v226 = **(unsigned __int16 **)(a2 + 16);
            if (v226 == 128)
            {
              if (DWORD2(v774) >= 0x41)
              {
                int v227 = 0;
                int64_t v228 = ((unint64_t)DWORD2(v774) + 63) >> 6;
                uint64_t v229 = v228;
                do
                {
                  BOOL v62 = v229-- < 1;
                  if (v62) {
                    break;
                  }
                  unint64_t v230 = *(void *)(v774 + 8 * v229);
                  v227 += __clz(v230);
                }
                while (!v230);
                unsigned int v231 = DWORD2(v774) | 0xFFFFFFC0;
                if ((BYTE8(v774) & 0x3F) == 0) {
                  unsigned int v231 = 0;
                }
                if (DWORD2(v774) - v227 - v231 <= 0x40)
                {
                  unint64_t v232 = *(void *)v774;
                  if (*(void *)v774 <= v225)
                  {
                    int v233 = 0;
                    unint64_t v234 = v224;
                    do
                    {
                      BOOL v62 = v228-- < 1;
                      if (v62) {
                        break;
                      }
                      unint64_t v235 = *(void *)(v774 + 8 * v228);
                      v233 += __clz(v235);
                    }
                    while (!v235);
                    if (DWORD2(v774) - (v231 + v233) >= 0x41 || v232 > v224)
                    {
                      *(void *)&long long v770 = v741;
                      DWORD2(v770) = 0;
                      DWORD2(v766) = DWORD2(v774);
                      operator new[]();
                    }
                    goto LABEL_668;
                  }
                }
                goto LABEL_653;
              }
              unint64_t v232 = v774;
              if ((unint64_t)v774 > v225)
              {
LABEL_653:
                uint64_t v252 = a1;
                uint64_t v577 = *a1;
                *(void *)&long long v759 = (8 * v195) | 1;
                DWORD2(v759) = 0;
                uint64_t v578 = sub_1CC7362A8(v577, (unint64_t *)&v759, 0);
                unint64_t v225 = (unint64_t)v579;
                unint64_t v249 = v578 & 0xFFFFFFFF00000000;
                int v250 = 1;
                LODWORD(v207) = v578;
                LODWORD(v197) = v578;
                std::string::size_type v199 = v579;
                int v251 = 1;
LABEL_654:
                unint64_t v245 = v249;
                goto LABEL_286;
              }
              unint64_t v234 = v224;
              if ((unint64_t)v774 <= v224)
              {
                uint64_t v215 = (8 * v195) | 1;
LABEL_668:
                uint64_t v252 = a1;
                uint64_t v603 = (llvm::ConstantInt *****)*a1;
                if (v232 == v234)
                {
                  *(void *)&long long v759 = v215;
                  DWORD2(v759) = 0;
                  uint64_t v628 = sub_1CC7362A8((uint64_t)v603, (unint64_t *)&v759, 0);
                  unint64_t v225 = v629;
                  int v251 = 0;
                  unint64_t v245 = 0;
                  unint64_t v249 = v628 & 0xFFFFFFFF00000000;
                  int v250 = 1;
                  LODWORD(v197) = v628;
                }
                else
                {
                  *(void *)&long long v759 = v741;
                  DWORD2(v759) = 0;
                  unint64_t v604 = llvm::ConstantInt::get(***v603[1], (llvm::LLVMContext *)&v774, v223);
                  uint64_t v605 = ((uint64_t (*)(llvm::ConstantInt *****, long long *, void *))(*v603)[2])(v603, &v759, v604);
                  unint64_t v607 = v606;
                  uint64_t v608 = *a1;
                  *(void *)&long long v772 = v215;
                  DWORD2(v772) = 0;
                  LODWORD(v759) = v197;
                  int v760 = 0;
                  unint64_t v761 = v605;
                  unint64_t v762 = v606;
                  int v763 = 1;
                  uint64_t v736 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v608 + 32))(v608, 128, &v772, 1, &v759, 2, 0);
                  uint64_t v610 = v609;
                  uint64_t v611 = (llvm::ConstantInt *****)*a1;
                  *(void *)&long long v770 = v741;
                  DWORD2(v770) = 0;
                  DWORD2(__src) = DWORD2(v774);
                  if (DWORD2(v774) > 0x40) {
                    operator new[]();
                  }
                  if (DWORD2(v774)) {
                    unint64_t v630 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v774);
                  }
                  else {
                    unint64_t v630 = 0;
                  }
                  *(void *)&long long __src = v630 & ~(void)v774;
                  llvm::APInt::operator++((uint64_t)&__src);
                  DWORD2(v766) = DWORD2(__src);
                  *(void *)&long long v766 = __src;
                  DWORD2(__src) = 0;
                  llvm::APInt::operator+=((uint64_t)&v766, v234);
                  DWORD2(v768) = DWORD2(v766);
                  *(void *)&long long v768 = v766;
                  DWORD2(v766) = 0;
                  v613 = llvm::ConstantInt::get(***v611[1], (llvm::LLVMContext *)&v768, v612);
                  uint64_t v614 = ((uint64_t (*)(llvm::ConstantInt *****, long long *, void *))(*v611)[2])(v611, &v770, v613);
                  *(void *)&long long v772 = v746;
                  DWORD2(v772) = 0;
                  LODWORD(v759) = v207;
                  int v760 = 0;
                  unint64_t v761 = v614;
                  unint64_t v762 = v615;
                  int v763 = 1;
                  uint64_t v616 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v611)[4])(v611, 127, &v772, 1, &v759, 2, 0);
                  unint64_t v618 = v617;
                  if (DWORD2(v768) >= 0x41 && (void)v768) {
                    MEMORY[0x1D25D9CB0](v768, 0x1000C8000313F17);
                  }
                  if (DWORD2(v766) >= 0x41 && (void)v766) {
                    MEMORY[0x1D25D9CB0](v766, 0x1000C8000313F17);
                  }
                  int v619 = v207;
                  if (DWORD2(__src) >= 0x41 && (void)__src) {
                    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                  }
                  uint64_t v620 = *a1;
                  *(void *)&long long v772 = v746;
                  DWORD2(v772) = 0;
                  *(void *)&long long v759 = v736;
                  *((void *)&v759 + 1) = v610;
                  int v251 = 1;
                  int v760 = 1;
                  unint64_t v761 = v616;
                  unint64_t v762 = v618;
                  int v763 = 1;
                  uint64_t v621 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v620 + 32))(v620, 66, &v772, 1, &v759, 2, 0);
                  int v622 = v621;
                  uint64_t v207 = v623;
                  unint64_t v245 = v621 & 0xFFFFFFFF00000000;
                  uint64_t v624 = *a1;
                  *(void *)&long long v772 = v746;
                  DWORD2(v772) = 0;
                  LODWORD(v759) = v619;
                  int v760 = 0;
                  unint64_t v761 = v605;
                  unint64_t v762 = v607;
                  int v763 = 1;
                  uint64_t v625 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v624 + 32))(v624, 128, &v772, 1, &v759, 2, 0);
                  unint64_t v225 = v626;
                  unint64_t v249 = v625 & 0xFFFFFFFF00000000;
                  int v250 = 1;
                  LODWORD(v197) = v625;
                  int v627 = v622;
                  std::string::size_type v199 = (void *)v207;
                  LODWORD(v207) = v627;
                }
                goto LABEL_286;
              }
              uint64_t v576 = (llvm::ConstantInt *****)*a1;
              *(void *)&long long v770 = v741;
              DWORD2(v770) = 0;
              DWORD2(v766) = DWORD2(v774);
              *(void *)&long long v766 = v774;
              llvm::APInt::operator-=((uint64_t)&v766, v224);
              DWORD2(v768) = DWORD2(v766);
              *(void *)&long long v768 = v766;
              DWORD2(v766) = 0;
              uint64_t v237 = llvm::ConstantInt::get(***v576[1], (llvm::LLVMContext *)&v768, v236);
              uint64_t v238 = ((uint64_t (*)(llvm::ConstantInt *****, long long *, void *))(*v576)[2])(v576, &v770, v237);
              *(void *)&long long v772 = (8 * v195) | 1;
              DWORD2(v772) = 0;
              LODWORD(v759) = v207;
              *(void *)((char *)&v759 + 4) = __src;
              HIDWORD(v759) = DWORD2(__src);
              int v760 = 0;
              unint64_t v761 = v238;
              unint64_t v762 = v239;
              int v763 = 1;
              uint64_t v207 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v576)[4])(v576, 128, &v772, 1, &v759, 2, 0);
              std::string::size_type v199 = v240;
              if (DWORD2(v768) >= 0x41 && (void)v768) {
                MEMORY[0x1D25D9CB0](v768, 0x1000C8000313F17);
              }
              if (DWORD2(v766) >= 0x41 && (void)v766) {
                MEMORY[0x1D25D9CB0](v766, 0x1000C8000313F17);
              }
              uint64_t v197 = *a1;
              *(void *)&long long v772 = (8 * v195) | 1;
              DWORD2(v772) = 0;
              uint64_t v241 = llvm::IntegerType::get(****(llvm::IntegerType *****)(v197 + 8), (llvm::LLVMContext *)v195);
              char v243 = *(llvm::ConstantInt **)v241;
              unsigned int v244 = *(_DWORD *)(v241 + 8);
              DWORD2(v759) = v244 >> 8;
              if (v244 >> 8 >= 0x41) {
                operator new[]();
              }
              unint64_t v245 = v207 & 0xFFFFFFFF00000000;
              *(void *)&long long v759 = 0;
              uint64_t v246 = llvm::ConstantInt::get(v243, (llvm::LLVMContext *)&v759, v242);
              if (DWORD2(v759) >= 0x41 && (void)v759) {
                MEMORY[0x1D25D9CB0](v759, 0x1000C8000313F17);
              }
              uint64_t v247 = (*(uint64_t (**)(uint64_t, long long *, void *))(*(void *)v197 + 16))(v197, &v772, v246);
              unint64_t v225 = v248;
              unint64_t v249 = v247 & 0xFFFFFFFF00000000;
              int v250 = 1;
              LODWORD(v197) = v247;
              int v251 = 1;
              goto LABEL_285;
            }
            if (v226 == 127)
            {
              int v264 = DWORD2(v774);
              if (DWORD2(v774) < 0x41)
              {
                unint64_t v265 = v774;
              }
              else
              {
                if (v264 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v774) > 0x40) {
                  goto LABEL_666;
                }
                unint64_t v265 = *(void *)v774;
              }
              if (v265 <= v225)
              {
                unint64_t v266 = v224;
                if (v265 > v224)
                {
                  uint64_t v306 = *a1;
                  *(void *)&long long v759 = (8 * v195) | 1;
                  DWORD2(v759) = 0;
                  uint64_t v207 = sub_1CC7362A8(v306, (unint64_t *)&v759, 0);
                  int v734 = v307;
                  uint64_t v252 = a1;
                  int v308 = (llvm::ConstantInt *****)*a1;
                  *(void *)&long long v770 = v741;
                  DWORD2(v770) = 0;
                  DWORD2(v766) = DWORD2(v774);
                  if (DWORD2(v774) > 0x40) {
                    operator new[]();
                  }
                  *(void *)&long long v766 = v774;
                  llvm::APInt::operator-=((uint64_t)&v766, v224);
                  DWORD2(v768) = DWORD2(v766);
                  *(void *)&long long v768 = v766;
                  DWORD2(v766) = 0;
                  uint64_t v309 = sub_1CC737454(v308, (uint64_t)&v770, (llvm::LLVMContext *)&v768);
                  *(void *)&long long v772 = v746;
                  DWORD2(v772) = 0;
                  LODWORD(v759) = v197;
                  int v760 = 0;
                  unint64_t v761 = v309;
                  unint64_t v762 = v310;
                  int v763 = 1;
                  uint64_t v197 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v308)[4])(v308, 127, &v772, 1, &v759, 2, 0);
                  unint64_t v225 = v311;
                  if (DWORD2(v768) >= 0x41 && (void)v768) {
                    MEMORY[0x1D25D9CB0](v768, 0x1000C8000313F17);
                  }
                  unint64_t v245 = v207 & 0xFFFFFFFF00000000;
                  unint64_t v249 = v197 & 0xFFFFFFFF00000000;
                  if (DWORD2(v766) >= 0x41 && (void)v766) {
                    MEMORY[0x1D25D9CB0](v766, 0x1000C8000313F17);
                  }
                  int v250 = 1;
                  int v251 = 1;
                }
                else
                {
                  uint64_t v252 = a1;
                  uint64_t v267 = (llvm::ConstantInt *****)*a1;
                  if (v265 == v224)
                  {
                    *(void *)&long long v759 = v746;
                    DWORD2(v759) = 0;
                    uint64_t v666 = sub_1CC7362A8((uint64_t)v267, (unint64_t *)&v759, 0);
                    std::string::size_type v199 = v667;
                    int v250 = 0;
                    unint64_t v249 = 0;
                    unint64_t v245 = v666 & 0xFFFFFFFF00000000;
                    int v251 = 1;
                    LODWORD(v207) = v666;
                    goto LABEL_286;
                  }
                  *(void *)&long long v770 = v741;
                  DWORD2(v770) = 0;
                  uint64_t v268 = sub_1CC737454(v267, (uint64_t)&v770, (llvm::LLVMContext *)&v774);
                  *(void *)&long long v772 = v746;
                  DWORD2(v772) = 0;
                  LODWORD(v759) = v197;
                  int v760 = 0;
                  unint64_t v761 = v268;
                  unint64_t v762 = v269;
                  int v763 = 1;
                  uint64_t v270 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v267)[4])(v267, 127, &v772, 1, &v759, 2, 0);
                  int v734 = v271;
                  uint64_t v272 = (llvm::ConstantInt *****)*a1;
                  *(void *)&long long v770 = v741;
                  DWORD2(v770) = 0;
                  uint64_t v273 = sub_1CC737454(v272, (uint64_t)&v770, (llvm::LLVMContext *)&v774);
                  *(void *)&long long v772 = v746;
                  DWORD2(v772) = 0;
                  LODWORD(v759) = v207;
                  int v760 = 0;
                  unint64_t v761 = v273;
                  unint64_t v762 = v274;
                  int v763 = 1;
                  uint64_t v275 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v272)[4])(v272, 127, &v772, 1, &v759, 2, 0);
                  uint64_t v277 = v276;
                  uint64_t v278 = (llvm::ConstantInt *****)*a1;
                  *(void *)&long long v770 = v741;
                  DWORD2(v770) = 0;
                  DWORD2(__src) = DWORD2(v774);
                  if (DWORD2(v774) > 0x40) {
                    operator new[]();
                  }
                  *(void *)&long long __src = v774;
                  sub_1CBA14940((uint64_t)&__src);
                  llvm::APInt::operator++((uint64_t)&__src);
                  DWORD2(v766) = DWORD2(__src);
                  *(void *)&long long v766 = __src;
                  DWORD2(__src) = 0;
                  llvm::APInt::operator+=((uint64_t)&v766, v266);
                  DWORD2(v768) = DWORD2(v766);
                  *(void *)&long long v768 = v766;
                  DWORD2(v766) = 0;
                  uint64_t v279 = sub_1CC737454(v278, (uint64_t)&v770, (llvm::LLVMContext *)&v768);
                  *(void *)&long long v772 = v746;
                  DWORD2(v772) = 0;
                  LODWORD(v759) = v197;
                  int v760 = 0;
                  unint64_t v761 = v279;
                  unint64_t v762 = v280;
                  int v763 = 1;
                  uint64_t v197 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v278)[4])(v278, 128, &v772, 1, &v759, 2, 0);
                  unint64_t v282 = v281;
                  LODWORD(v207) = v270;
                  if (DWORD2(v768) >= 0x41 && (void)v768) {
                    MEMORY[0x1D25D9CB0](v768, 0x1000C8000313F17);
                  }
                  if (DWORD2(v766) >= 0x41 && (void)v766) {
                    MEMORY[0x1D25D9CB0](v766, 0x1000C8000313F17);
                  }
                  unint64_t v245 = v270 & 0xFFFFFFFF00000000;
                  if (DWORD2(__src) >= 0x41 && (void)__src) {
                    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                  }
                  uint64_t v283 = *a1;
                  *(void *)&long long v772 = v746;
                  DWORD2(v772) = 0;
                  *(void *)&long long v759 = v275;
                  *((void *)&v759 + 1) = v277;
                  int v250 = 1;
                  int v760 = 1;
                  unint64_t v761 = v197;
                  unint64_t v762 = v282;
                  int v763 = 1;
                  uint64_t v284 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v283 + 32))(v283, 66, &v772, 1, &v759, 2, 0);
                  unint64_t v225 = v285;
                  unint64_t v249 = v284 & 0xFFFFFFFF00000000;
                  LODWORD(v197) = v284;
                  int v251 = 1;
                }
                goto LABEL_319;
              }
LABEL_666:
              uint64_t v252 = a1;
              uint64_t v600 = *a1;
              *(void *)&long long v759 = (8 * v195) | 1;
              DWORD2(v759) = 0;
              uint64_t v601 = sub_1CC7362A8(v600, (unint64_t *)&v759, 0);
              LODWORD(v197) = v601;
              unint64_t v225 = (unint64_t)v602;
              unint64_t v249 = v601 & 0xFFFFFFFF00000000;
              int v250 = 1;
              std::string::size_type v199 = v602;
              int v251 = 1;
              LODWORD(v207) = v601;
              goto LABEL_654;
            }
            int v647 = DWORD2(v774);
            if (DWORD2(v774) >= 0x41)
            {
              if (v647 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v774) <= 0x40)
              {
                unint64_t v648 = *(void *)v774;
                if (*(void *)v774 <= v225)
                {
                  unint64_t v649 = v224;
                  if (v648 > v224)
                  {
                    *(void *)&long long v770 = v741;
                    DWORD2(v770) = 0;
                    DWORD2(v766) = v647;
                    operator new[]();
                  }
LABEL_730:
                  uint64_t v672 = (llvm::ConstantInt *****)*a1;
                  if (v648 == v649)
                  {
                    *(void *)&long long v770 = v741;
                    DWORD2(v770) = 0;
                    uint64_t v673 = sub_1CC7362A8((uint64_t)v672, (unint64_t *)&v770, v224 - 1);
                    *(void *)&long long v772 = v746;
                    DWORD2(v772) = 0;
                    LODWORD(v759) = v207;
                    int v760 = 0;
                    unint64_t v761 = v673;
                    unint64_t v762 = v674;
                    int v250 = 1;
                    int v763 = 1;
                    uint64_t v675 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v672)[4])(v672, 129, &v772, 1, &v759, 2, 0);
                    unint64_t v225 = v676;
                    int v251 = 0;
                    unint64_t v245 = 0;
                    unint64_t v249 = v675 & 0xFFFFFFFF00000000;
                    LODWORD(v197) = v675;
LABEL_285:
                    uint64_t v252 = a1;
LABEL_286:
                    uint64_t v253 = *v252;
                    int v254 = (llvm::MachineInstr *)a2;
                    LODWORD(v772) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
                    DWORD2(v772) = 1;
                    *(void *)&long long v759 = v245 | v207;
                    *((void *)&v759 + 1) = v199;
                    int v760 = v251;
                    unint64_t v761 = v249 | v197;
                    unint64_t v762 = v225;
                    int v763 = v250;
LABEL_287:
                    (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v253 + 32))(v253, 76, &v772, 1, &v759, 2, 0);
                    llvm::MachineInstr::eraseFromParent(v254);
                    if ((_BYTE)v776 && DWORD2(v774) >= 0x41 && (void)v774) {
                      MEMORY[0x1D25D9CB0](v774, 0x1000C8000313F17);
                    }
                    return 1;
                  }
                  *(void *)&long long v759 = v741;
                  DWORD2(v759) = 0;
                  uint64_t v686 = sub_1CC737454(v672, (uint64_t)&v759, (llvm::LLVMContext *)&v774);
                  unint64_t v688 = v687;
                  uint64_t v689 = *a1;
                  *(void *)&long long v772 = v746;
                  DWORD2(v772) = 0;
                  LODWORD(v759) = v197;
                  int v760 = 0;
                  unint64_t v761 = v686;
                  unint64_t v762 = v687;
                  int v763 = 1;
                  uint64_t v737 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v689 + 32))(v689, 128, &v772, 1, &v759, 2, 0);
                  uint64_t v691 = v690;
                  uint64_t v252 = a1;
                  uint64_t v692 = (llvm::ConstantInt *****)*a1;
                  *(void *)&long long v770 = v741;
                  DWORD2(v770) = 0;
                  DWORD2(__src) = DWORD2(v774);
                  if (DWORD2(v774) > 0x40) {
                    operator new[]();
                  }
                  *(void *)&long long __src = v774;
                  sub_1CBA14940((uint64_t)&__src);
                  llvm::APInt::operator++((uint64_t)&__src);
                  DWORD2(v766) = DWORD2(__src);
                  *(void *)&long long v766 = __src;
                  DWORD2(__src) = 0;
                  llvm::APInt::operator+=((uint64_t)&v766, v649);
                  DWORD2(v768) = DWORD2(v766);
                  *(void *)&long long v768 = v766;
                  DWORD2(v766) = 0;
                  uint64_t v693 = sub_1CC737454(v692, (uint64_t)&v770, (llvm::LLVMContext *)&v768);
                  *(void *)&long long v772 = v746;
                  DWORD2(v772) = 0;
                  LODWORD(v759) = v207;
                  int v760 = 0;
                  unint64_t v761 = v693;
                  unint64_t v762 = v694;
                  int v763 = 1;
                  uint64_t v695 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v692)[4])(v692, 127, &v772, 1, &v759, 2, 0);
                  unint64_t v697 = v696;
                  if (DWORD2(v768) >= 0x41 && (void)v768) {
                    MEMORY[0x1D25D9CB0](v768, 0x1000C8000313F17);
                  }
                  if (DWORD2(v766) >= 0x41 && (void)v766) {
                    MEMORY[0x1D25D9CB0](v766, 0x1000C8000313F17);
                  }
                  if (DWORD2(__src) >= 0x41 && (void)__src) {
                    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                  }
                  uint64_t v698 = *a1;
                  *(void *)&long long v772 = v746;
                  DWORD2(v772) = 0;
                  *(void *)&long long v759 = v737;
                  *((void *)&v759 + 1) = v691;
                  int v760 = 1;
                  unint64_t v761 = v695;
                  unint64_t v762 = v697;
                  int v763 = 1;
                  uint64_t v699 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v698 + 32))(v698, 66, &v772, 1, &v759, 2, 0);
                  int v734 = v700;
                  unint64_t v245 = v699 & 0xFFFFFFFF00000000;
                  uint64_t v701 = *a1;
                  *(void *)&long long v772 = v746;
                  DWORD2(v772) = 0;
                  LODWORD(v759) = v207;
                  int v760 = 0;
                  unint64_t v761 = v686;
                  unint64_t v762 = v688;
                  int v763 = 1;
                  uint64_t v702 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v701 + 32))(v701, 129, &v772, 1, &v759, 2, 0);
                  unint64_t v225 = v703;
                  unint64_t v249 = v702 & 0xFFFFFFFF00000000;
                  int v250 = 1;
                  LODWORD(v197) = v702;
                  int v251 = 1;
                  LODWORD(v207) = v699;
LABEL_319:
                  std::string::size_type v199 = v734;
                  goto LABEL_286;
                }
              }
            }
            else
            {
              unint64_t v648 = v774;
              if ((unint64_t)v774 <= v225)
              {
                unint64_t v649 = v224;
                if ((unint64_t)v774 > v224)
                {
                  uint64_t v650 = (llvm::ConstantInt *****)*a1;
                  *(void *)&long long v770 = v741;
                  DWORD2(v770) = 0;
                  DWORD2(v766) = DWORD2(v774);
                  *(void *)&long long v766 = v774;
                  llvm::APInt::operator-=((uint64_t)&v766, v224);
                  DWORD2(v768) = DWORD2(v766);
                  *(void *)&long long v768 = v766;
                  DWORD2(v766) = 0;
                  uint64_t v651 = sub_1CC737454(v650, (uint64_t)&v770, (llvm::LLVMContext *)&v768);
                  *(void *)&long long v772 = (8 * v195) | 1;
                  DWORD2(v772) = 0;
                  LODWORD(v759) = v207;
                  *(void *)((char *)&v759 + 4) = __src;
                  HIDWORD(v759) = DWORD2(__src);
                  int v760 = 0;
                  unint64_t v761 = v651;
                  unint64_t v762 = v652;
                  int v763 = 1;
                  uint64_t v653 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v650)[4])(v650, 129, &v772, 1, &v759, 2, 0);
                  unint64_t v655 = v654;
                  if (DWORD2(v768) >= 0x41 && (void)v768) {
                    MEMORY[0x1D25D9CB0](v768, 0x1000C8000313F17);
                  }
                  unint64_t v245 = v653 & 0xFFFFFFFF00000000;
                  if (DWORD2(v766) >= 0x41 && (void)v766) {
                    MEMORY[0x1D25D9CB0](v766, 0x1000C8000313F17);
                  }
                  uint64_t v252 = a1;
                  uint64_t v197 = *a1;
                  *(void *)&long long v770 = v741;
                  DWORD2(v770) = 0;
                  uint64_t v656 = sub_1CC7362A8(v197, (unint64_t *)&v770, v224 - 1);
                  *(void *)&long long v772 = (8 * v195) | 1;
                  DWORD2(v772) = 0;
                  LODWORD(v759) = v207;
                  int v760 = 0;
                  unint64_t v761 = v656;
                  unint64_t v762 = v657;
                  int v251 = 1;
                  int v763 = 1;
                  uint64_t v658 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v197 + 32))(v197, 129, &v772, 1, &v759, 2, 0);
                  unint64_t v225 = v659;
                  unint64_t v249 = v658 & 0xFFFFFFFF00000000;
                  int v250 = 1;
                  LODWORD(v197) = v658;
                  LODWORD(v207) = v653;
                  std::string::size_type v199 = v655;
                  goto LABEL_286;
                }
                goto LABEL_730;
              }
            }
            uint64_t v252 = a1;
            uint64_t v197 = *a1;
            *(void *)&long long v770 = v741;
            DWORD2(v770) = 0;
            uint64_t v668 = sub_1CC7362A8(v197, (unint64_t *)&v770, v224 - 1);
            *(void *)&long long v772 = (8 * v195) | 1;
            DWORD2(v772) = 0;
            LODWORD(v759) = v207;
            int v760 = 0;
            unint64_t v761 = v668;
            unint64_t v762 = v669;
            int v251 = 1;
            int v763 = 1;
            uint64_t v670 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v197 + 32))(v197, 129, &v772, 1, &v759, 2, 0);
            unint64_t v225 = (unint64_t)v671;
            unint64_t v249 = v670 & 0xFFFFFFFF00000000;
            int v250 = 1;
            LODWORD(v207) = v670;
            LODWORD(v197) = v670;
            std::string::size_type v199 = v671;
            goto LABEL_654;
          }
        }
        int v254 = (llvm::MachineInstr *)a2;
        uint64_t v253 = *a1;
        LODWORD(v772) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
        DWORD2(v772) = 1;
        LODWORD(v759) = v197;
        int v760 = 0;
        LODWORD(v761) = v207;
        int v763 = 0;
        goto LABEL_287;
      }
      unint64_t v99 = v753;
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1[1] + 32))(a1[1], a2);
      uint64_t v100 = *(void *)(a2 + 32);
      uint64_t v101 = v100 + 64;
      uint64_t v102 = *a1;
      *(void *)&long long v774 = v99;
      DWORD2(v774) = 0;
      LODWORD(v759) = *(_DWORD *)(v100 + 68);
      int v760 = 0;
      (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v102 + 32))(v102, 119, &v774, 1, &v759, 1, 0);
      llvm::MachineOperand::setReg(v101, *(_DWORD *)(*(void *)(v103 + 32) + 4));
      uint64_t v104 = *(void (**)(void))(*(void *)a1[1] + 40);
LABEL_114:
      v104();
      return 1;
    case 0x86:
      int v365 = *(_DWORD *)(*(void *)(a2 + 32) + 68);
      if (v365 < 0 && (unsigned int v451 = (void *)a1[2], (v365 & 0x7FFFFFFFu) < (unint64_t)*((unsigned int *)v451 + 108))) {
        unint64_t v366 = *(void *)(v451[53] + 8 * (v365 & 0x7FFFFFFF));
      }
      else {
        unint64_t v366 = 0;
      }
      unint64_t v754 = v366;
      uint64_t v368 = sub_1CB8F1DC4(&v754);
      if (v367 == 1) {
      int v369 = *(_DWORD *)(*(void *)(a2 + 32) + 48);
      }
      unsigned int v370 = v369 & 0xFFFFFFFE;
      if (v368 != 2 * v744 && v370 != 32) {
        return 2;
      }
      unint64_t v752 = 0;
      v742 = &v775;
      *(void *)&long long v774 = &v775;
      *((void *)&v774 + 1) = 0x400000000;
      *(void *)&long long v772 = v773;
      *((void *)&v772 + 1) = 0x400000000;
      sub_1CC7243F4(a1, v365, v754, v753, (uint64_t *)&v752, (uint64_t)&v774, (int **)&v772);
      uint64_t v751 = 0;
      *(void *)&long long v770 = v771;
      *((void *)&v770 + 1) = 0x400000000;
      *(void *)&long long v768 = v769;
      *((void *)&v768 + 1) = 0x400000000;
      sub_1CC7243F4(a1, *(_DWORD *)(*(void *)(a2 + 32) + 100), v754, v753, &v751, (uint64_t)&v770, (int **)&v768);
      uint64_t v371 = 0;
      int v747 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      if (v747 < 0)
      {
        uint64_t v473 = (void *)a1[2];
        uint64_t v474 = v747 & 0x7FFFFFFF;
        if (v474 >= *((_DWORD *)v473 + 108)) {
          uint64_t v371 = 0;
        }
        else {
          uint64_t v371 = *(void *)(v473[53] + 8 * v474);
        }
      }
      if (v370 == 32)
      {
        uint64_t v372 = *a1;
        *(void *)&long long v759 = v753;
        DWORD2(v759) = 0;
        uint64_t v373 = sub_1CC7362A8(v372, (unint64_t *)&v759, 0);
        uint64_t v720 = v374;
        uint64_t v723 = v373;
        *(void *)&long long v766 = v767;
        *((void *)&v766 + 1) = 0x400000000;
        if (DWORD2(v774) && DWORD2(v770))
        {
          uint64_t v375 = (int *)v774;
          uint64_t v376 = (int *)v770;
          uint64_t v377 = 4 * DWORD2(v770) - 4;
          uint64_t v378 = 4 * DWORD2(v774) - 4;
          do
          {
            int v379 = *v375;
            int v380 = *v376;
            uint64_t v381 = *a1;
            *(void *)&long long __src = v753;
            DWORD2(__src) = 0;
            LODWORD(v759) = v379;
            int v760 = 0;
            LODWORD(v761) = v380;
            int v763 = 0;
            (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v381 + 32))(v381, 67, &__src, 1, &v759, 2, 0);
            if (DWORD2(v766) >= (unint64_t)HIDWORD(v766)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(v766 + 4 * DWORD2(v766)) = *(_DWORD *)(*(void *)(v382 + 32) + 4);
            ++DWORD2(v766);
            if (!v378) {
              break;
            }
            ++v375;
            ++v376;
            uint64_t v383 = v377;
            v377 -= 4;
            v378 -= 4;
          }
          while (v383);
        }
        *(void *)&long long __src = v765;
        *((void *)&__src + 1) = 0x400000000;
        if (DWORD2(v772) && DWORD2(v768))
        {
          unint64_t v384 = (int *)v772;
          unint64_t v385 = (int *)v768;
          unint64_t v386 = v752;
          uint64_t v387 = 4 * DWORD2(v768) - 4;
          uint64_t v388 = 4 * DWORD2(v772) - 4;
          do
          {
            int v390 = *v384++;
            int v389 = v390;
            int v391 = *v385++;
            uint64_t v392 = *a1;
            *(void *)&long long v755 = v386;
            DWORD2(v755) = 0;
            LODWORD(v759) = v389;
            int v760 = 0;
            LODWORD(v761) = v391;
            int v763 = 0;
            (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v392 + 32))(v392, 67, &v755, 1, &v759, 2, 0);
            unint64_t v394 = sub_1CC7257E0((uint64_t)a1, (uint64_t)&__src, v753, v386, *(_DWORD *)(*(void *)(v393 + 32) + 4));
            sub_1CC724E64((llvm::IntegerType ******)a1, v386, v753, v394, (uint64_t)&__src, 126);
            sub_1CD61AE7C((unsigned int *)&v766, v766 + 4 * DWORD2(v766), (int *)__src, (int *)(__src + 4 * DWORD2(__src)));
            if (!v388) {
              break;
            }
            uint64_t v395 = v387;
            v387 -= 4;
            v388 -= 4;
          }
          while (v395);
        }
        uint64_t v396 = *a1;
        int v398 = *(_DWORD *)v766;
        int v397 = *(_DWORD *)(v766 + 4);
        *(void *)&long long v755 = v753;
        DWORD2(v755) = 0;
        LODWORD(v759) = v398;
        int v760 = 0;
        LODWORD(v761) = v397;
        int v763 = 0;
        uint64_t v399 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v396 + 32))(v396, 66, &v755, 1, &v759, 2, 0);
        if (DWORD2(v766) >= 3)
        {
          uint64_t v401 = 4 * DWORD2(v766);
          uint64_t v402 = 8;
          do
          {
            uint64_t v403 = *a1;
            int v404 = *(_DWORD *)(v766 + v402);
            *(void *)&long long v755 = v753;
            DWORD2(v755) = 0;
            *(void *)&long long v759 = v399;
            *((void *)&v759 + 1) = v400;
            int v760 = 1;
            LODWORD(v761) = v404;
            int v763 = 0;
            uint64_t v399 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v403 + 32))(v403, 66, &v755, 1, &v759, 2, 0);
            v402 += 4;
          }
          while (v401 != v402);
        }
        uint64_t v405 = *a1;
        LODWORD(v757) = v747;
        int v758 = 1;
        *(void *)&long long v759 = v399;
        *((void *)&v759 + 1) = v400;
        int v760 = 1;
        *(void *)&long long v755 = v723;
        *((void *)&v755 + 1) = v720;
        int v756 = 1;
        sub_1CC73933C(v405, v369, (uint64_t)&v757, &v759, &v755);
        if ((_DWORD *)__src != v765) {
          free((void *)__src);
        }
        if ((_DWORD *)v766 != v767) {
          free((void *)v766);
        }
      }
      else
      {
        int v455 = *(_DWORD *)v774;
        int v456 = *(_DWORD *)(v774 + 4);
        int v458 = *(_DWORD *)v770;
        int v457 = *(_DWORD *)(v770 + 4);
        uint64_t v459 = *a1;
        *(void *)&long long __src = v371;
        DWORD2(__src) = 0;
        LODWORD(v759) = v456;
        int v760 = 0;
        LODWORD(v766) = v457;
        v767[0] = 0;
        uint64_t v460 = sub_1CC73933C(v459, v369, (uint64_t)&__src, &v759, &v766);
        uint64_t v462 = v461;
        uint64_t v463 = *a1;
        *(void *)&long long __src = v371;
        DWORD2(__src) = 0;
        LODWORD(v759) = v456;
        int v760 = 0;
        LODWORD(v766) = v457;
        v767[0] = 0;
        uint64_t v464 = sub_1CC73933C(v463, 32, (uint64_t)&__src, &v759, &v766);
        uint64_t v466 = v465;
        uint64_t v467 = *a1;
        int UnsignedPredicate = llvm::ICmpInst::getUnsignedPredicate(v369);
        *(void *)&long long __src = v371;
        DWORD2(__src) = 0;
        LODWORD(v759) = v455;
        int v760 = 0;
        LODWORD(v766) = v458;
        v767[0] = 0;
        uint64_t v469 = sub_1CC73933C(v467, UnsignedPredicate, (uint64_t)&__src, &v759, &v766);
        uint64_t v470 = *a1;
        LODWORD(v755) = v747;
        DWORD2(v755) = 1;
        *(void *)&long long v759 = v464;
        *((void *)&v759 + 1) = v466;
        int v760 = 1;
        *(void *)&long long v766 = v469;
        *((void *)&v766 + 1) = v471;
        v767[0] = 1;
        *(void *)&long long __src = v460;
        *((void *)&__src + 1) = v462;
        v765[0] = 1;
        sub_1CC739494(v470, (uint64_t *)&v755, &v759, &v766, &__src, 0);
      }
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
      if ((_DWORD *)v768 != v769) {
        free((void *)v768);
      }
      if ((_DWORD *)v770 != v771) {
        free((void *)v770);
      }
      uint64_t v472 = (_DWORD *)v772;
      goto LABEL_546;
    case 0x88:
      return sub_1CD619F88(a1, (llvm::MachineInstr *)a2, a3, v753);
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
      return sub_1CD6195AC(a1, (llvm::MachineInstr *)a2, a3, v753);
    default:
      if ((v12 - 45) < 2) {
        return sub_1CD6195AC(a1, (llvm::MachineInstr *)a2, a3, v753);
      }
      if (v12 != 47) {
        return v36;
      }
      return sub_1CC726FA8(a1, a2, v753);
  }
}

uint64_t sub_1CC71B718(uint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v623 = *MEMORY[0x1E4F143B8];
  unint64_t v599 = a4;
  int v4 = **(unsigned __int16 **)(a2 + 16);
  uint64_t v5 = 2;
  int v10 = 0;
  uint64_t v11 = 45;
  uint64_t v12 = 124;
  char v13 = 1;
  switch(**(_WORD **)(a2 + 16))
  {
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x41:
    case 0x42:
    case 0x43:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      uint64_t v5 = 1;
      sub_1CC7271E8(*(void *)a1, *(void *)(a2 + 32), a4, 1u, 118);
      uint64_t v25 = *(void *)a1;
      uint64_t v26 = *(void *)(a2 + 32);
      uint64_t v27 = a4;
      unsigned int v28 = 2;
      goto LABEL_155;
    case 0x32:
      uint64_t v171 = *(void *)(a2 + 32);
      int v172 = *(_DWORD *)(v171 + 16);
      unsigned int v173 = v172 - 32;
      if ((v172 - 38) >= 4) {
        unsigned int v174 = 126;
      }
      else {
        unsigned int v174 = 124;
      }
      if (v173 >= 0xA) {
        uint64_t v175 = 178;
      }
      else {
        uint64_t v175 = v174;
      }
      uint64_t v5 = 1;
      sub_1CC7271E8(*(void *)a1, v171, a4, 1u, v175);
      uint64_t v118 = *(void *)a1;
      uint64_t v119 = *(void *)(a2 + 32);
      uint64_t v120 = a4;
      unsigned int v121 = 2;
      uint64_t v122 = v175;
      goto LABEL_442;
    case 0x33:
      if (!a3)
      {
        sub_1CC7271E8(*(void *)a1, *(void *)(a2 + 32), a4, 4u, 118);
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = *(void *)(a2 + 32);
        uint64_t v22 = a4;
        unsigned int v23 = 5;
        goto LABEL_7;
      }
      uint64_t v184 = *(void *)(a2 + 32);
      int v185 = *(_DWORD *)(v184 + 48);
      unsigned int v186 = v185 - 32;
      if ((v185 - 38) >= 4) {
        unsigned int v187 = 126;
      }
      else {
        unsigned int v187 = 124;
      }
      if (v186 >= 0xA) {
        uint64_t v188 = 178;
      }
      else {
        uint64_t v188 = v187;
      }
LABEL_220:
      sub_1CC7271E8(*(void *)a1, v184, a4, 2u, v188);
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void *)(a2 + 32);
      uint64_t v75 = a4;
      unsigned int v76 = 3;
      uint64_t v144 = v188;
      goto LABEL_440;
    case 0x3A:
      if (a3) {
        return 2;
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      uint64_t v5 = 1;
      sub_1CC7271E8(*(void *)a1, *(void *)(a2 + 32), a4, 1u, 178);
      uint64_t v176 = *(void *)a1;
      uint64_t v177 = *(void *)(a2 + 32);
      uint64_t v178 = a4;
      unsigned int v179 = 2;
      goto LABEL_192;
    case 0x3B:
    case 0x3D:
    case 0xC3:
    case 0xC4:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      uint64_t v5 = 1;
      sub_1CC7271E8(*(void *)a1, *(void *)(a2 + 32), a4, 1u, 124);
      uint64_t v25 = *(void *)a1;
      uint64_t v26 = *(void *)(a2 + 32);
      uint64_t v27 = a4;
      unsigned int v28 = 2;
      goto LABEL_18;
    case 0x3C:
    case 0x3E:
    case 0xC5:
    case 0xC6:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      uint64_t v5 = 1;
      sub_1CC7271E8(*(void *)a1, *(void *)(a2 + 32), a4, 1u, 126);
      uint64_t v25 = *(void *)a1;
      uint64_t v26 = *(void *)(a2 + 32);
      uint64_t v27 = a4;
      unsigned int v28 = 2;
      uint64_t v37 = 126;
      goto LABEL_156;
    case 0x3F:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      sub_1CC7271E8(*(void *)a1, *(void *)(a2 + 32), a4, 2u, 124);
      uint64_t v164 = *(void *)a1;
      uint64_t v165 = *(void *)(a2 + 32);
      uint64_t v166 = a4;
      uint64_t v167 = 124;
      goto LABEL_188;
    case 0x40:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      sub_1CC7271E8(*(void *)a1, *(void *)(a2 + 32), a4, 2u, 126);
      uint64_t v164 = *(void *)a1;
      uint64_t v165 = *(void *)(a2 + 32);
      uint64_t v166 = a4;
      uint64_t v167 = 126;
LABEL_188:
      sub_1CC7271E8(v164, v165, v166, 3u, v167);
      sub_1CC7272A4((void *)a1, *(void *)(a2 + 32), a4, 0, 0x77u);
      goto LABEL_189;
    case 0x44:
    case 0x5A:
    case 0x5B:
    case 0x5C:
      goto LABEL_122;
    case 0x45:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      if (*(_DWORD *)(a2 + 40) >= 2u)
      {
        unsigned int v189 = 1;
        do
        {
          unint64_t v190 = *(llvm::MachineBasicBlock **)(*(void *)(a2 + 32) + 32 * (v189 + 1) + 16);
          uint64_t v191 = *(void *)a1;
          unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v190);
          *(void *)(v191 + 40) = v190;
          *(void *)(v191 + 48) = FirstTerminator;
          sub_1CC7271E8(*(void *)a1, *(void *)(a2 + 32), a4, v189, 118);
          v189 += 2;
        }
        while (v189 < *(_DWORD *)(a2 + 40));
      }
      uint64_t v193 = *(void *)(a2 + 24);
      uint64_t v194 = *(void *)a1;
      unint64_t v195 = (void *)(v193 + 48);
      uint64_t v196 = *(void *)(v193 + 56);
      while (2)
      {
        if ((void *)v196 != v195)
        {
          if (!**(_WORD **)(v196 + 16) || **(_WORD **)(v196 + 16) == 69)
          {
            uint64_t v196 = *(void *)(v196 + 8);
            continue;
          }
          unint64_t v195 = (void *)v196;
        }
        break;
      }
      unint64_t v197 = *v195 & 0xFFFFFFFFFFFFFFF8;
      if (!v197 || (*(unsigned char *)v197 & 4) == 0)
      {
        while ((*(_WORD *)(v197 + 44) & 4) != 0)
          unint64_t v197 = *(void *)v197 & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v194 + 40) = v193;
      *(void *)(v194 + 48) = v197;
      goto LABEL_123;
    case 0x49:
      unint64_t v600 = a4;
      uint64_t v145 = *(void *)(a2 + 32);
      int v146 = *(_DWORD *)(v145 + 4);
      int v147 = *(_DWORD *)(v145 + 36);
      uint64_t v148 = *(void *)(a1 + 16);
      if (v147 < 0 && (v147 & 0x7FFFFFFFu) < *(_DWORD *)(v148 + 432)) {
        unint64_t v149 = *(void *)(*(void *)(v148 + 424) + 8 * (v147 & 0x7FFFFFFF));
      }
      else {
        unint64_t v149 = 0;
      }
      unint64_t v605 = v149;
      if (v146 < 0 && (v146 & 0x7FFFFFFFu) < *(_DWORD *)(v148 + 432)) {
        uint64_t v260 = *(void *)(*(void *)(v148 + 424) + 8 * (v146 & 0x7FFFFFFF));
      }
      else {
        uint64_t v260 = 0;
      }
      uint64_t v261 = *(void *)(v145 + 80);
      if (!a3)
      {
        if ((v149 & 0xFFFFFFFFFFFFFFF9) != 0 && (v149 & 4) != 0
          || (v260 & 0xFFFFFFFFFFFFFFF9) != 0 && (v260 & 4) != 0)
        {
          return 2;
        }
        LODWORD(v612[0]) = v147;
        LODWORD(v613) = 0;
        if ((v149 & 0xFFFFFFFFFFFFFFF9) != 0 && (v149 & 6) == 2)
        {
          uint64_t v331 = *(void *)(**(void **)(*(void *)a1 + 8) + 40);
          char v332 = 35;
          if ((v149 & 4) == 0) {
            char v332 = 19;
          }
          uint64_t v333 = *(__int32 **)(v331 + 656);
          size_t v334 = *(unsigned int *)(v331 + 664);
          uint64_t v335 = wmemchr(v333, (v149 >> v332) & 0xFFFFFF, v334);
          if (v335) {
            long long v336 = v335;
          }
          else {
            long long v336 = &v333[v334];
          }
          if (v334 != v336 - v333) {
            return 2;
          }
          unsigned int v338 = sub_1CB8F1DC4(&v605);
          if (v337 == 1) {
          unint64_t v149 = (8 * v338) | 1;
          }
          uint64_t v339 = *(void *)a1;
          uint64_t v609 = (void *)v149;
          LODWORD(v610) = 0;
          long long v615 = *(_OWORD *)v612;
          LODWORD(v616) = v613;
          v612[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v339 + 32))(v339, 80, &v609, 1, &v615, 1, 0);
          v612[1] = v340;
          LODWORD(v613) = 1;
          unint64_t v605 = v149;
        }
        if ((v260 & 0xFFFFFFFFFFFFFFF9) != 0 && (v260 & 6) == 2) {
          return 2;
        }
        if (!v261)
        {
          uint64_t v561 = *(void **)a1;
          LODWORD(v609) = v146;
          LODWORD(v610) = 1;
          unint64_t v606 = (void *)v600;
          int v607 = 0;
          *(void *)&long long v615 = sub_1CC738034(v561, 118, (unint64_t *)&v606, (int *)v612);
          *((void *)&v615 + 1) = v562;
          LODWORD(v616) = 1;
          uint64_t v438 = *(void (**)(void))(*v561 + 32);
          goto LABEL_519;
        }
        unint64_t v342 = sub_1CB8F1DC4(&v600);
        if (v341 == 1) {
        unint64_t v344 = sub_1CB8F1DC4(&v605);
        }
        if (v343 == 1) {
        if (v342 > v344)
        }
        {
          uint64_t v345 = *(void *)a1;
          *(void *)&long long v615 = v600;
          DWORD2(v615) = 0;
          v612[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*(void *)v345 + 32))(v345, 118, &v615, 1, v612, 1, 0);
          v612[1] = v346;
          LODWORD(v613) = 1;
          unint64_t v149 = v600;
        }
        int v347 = *(llvm::IntegerType ******)a1;
        unint64_t v606 = (void *)v149;
        int v607 = 0;
        uint64_t v348 = (llvm::LLVMContext *)(unsigned __int16)(v149 >> 3);
        uint64_t v349 = (llvm::LLVMContext *)(unsigned __int16)(v149 >> 19);
        if ((v149 & 2) == 0) {
          uint64_t v349 = (llvm::LLVMContext *)(v149 >> 19);
        }
        if ((v149 & 4) != 0) {
          uint64_t v348 = v349;
        }
        if (v149) {
          unint64_t v350 = (llvm::LLVMContext *)(v149 >> 3);
        }
        else {
          unint64_t v350 = v348;
        }
        uint64_t v351 = (llvm::ConstantInt *)llvm::IntegerType::get(***v347[1], v350);
        unint64_t v352 = llvm::ConstantInt::get(v351, v261, (const llvm::APInt *)1);
        uint64_t v353 = ((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*v347)[2])(v347, &v606, v352);
        uint64_t v609 = (void *)v149;
        LODWORD(v610) = 0;
        long long v615 = *(_OWORD *)v612;
        LODWORD(v616) = v613;
        uint64_t v617 = v353;
        uint64_t v618 = v354;
        int v619 = 1;
        uint64_t v355 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*v347)[4])(v347, 128, &v609, 1, &v615, 2, 0);
        uint64_t v356 = *(void *)a1;
        LODWORD(v609) = v146;
        LODWORD(v610) = 1;
        *(void *)&long long v615 = v355;
        *((void *)&v615 + 1) = v357;
        LODWORD(v616) = 1;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v356 + 32))(v356, 119, &v609, 1, &v615, 1, 0);
        goto LABEL_520;
      }
      if (v149)
      {
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
        uint64_t v118 = *(void *)a1;
        uint64_t v119 = *(void *)(a2 + 32);
        uint64_t v5 = 1;
        uint64_t v120 = a4;
        unsigned int v121 = 1;
        uint64_t v122 = 118;
LABEL_442:
        sub_1CC7271E8(v118, v119, v120, v121, v122);
        goto LABEL_160;
      }
      uint64_t v5 = 2;
      if ((v149 & 0xFFFFFFFFFFFFFFF9) == 0 || (v149 & 4) == 0) {
        return v5;
      }
      unint64_t v262 = v149 >> 16;
      if ((v149 & 2) != 0)
      {
        if (v260 != (v262 & 0x7FFFFFFFFF8 | 2)) {
          return 2;
        }
        int v263 = 0xFFFF;
      }
      else
      {
        if (v260 != (v149 & 0x8000000000000000 | v262 & 0x7FFFFFFF8 | 1)) {
          return 2;
        }
        int v263 = -1;
      }
      if (v261 % (v263 & (v149 >> 19))) {
        return 2;
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      sub_1CC7271E8(*(void *)a1, *(void *)(a2 + 32), a4, 1u, 118);
      uint64_t v264 = *(void *)(a2 + 32);
      unint64_t v266 = sub_1CB8F1DC4(&v600);
      if (v265 == 1) {
      unint64_t v268 = sub_1CB8F1DC4(&v605);
      }
      if (v267 == 1) {
      *(void *)(v264 + 80) = v266 / v268 * v261;
      }
      unint64_t v18 = v600;
      if ((v600 & 0xFFFFFFFFFFFFFFF9) != 0 && (v600 & 4) != 0)
      {
        char v269 = 3;
        if ((v600 & 1) == 0) {
          char v269 = 19;
        }
        unint64_t v270 = v600 >> v269;
        if ((v600 & 2) != 0) {
          unint64_t v18 = (v600 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v270) | 2;
        }
        else {
          unint64_t v18 = v600 & 0x8000000000000000 | (8 * v270) | 1;
        }
      }
      uint64_t v16 = *(void *)(a2 + 32);
      int v17 = (void *)a1;
      goto LABEL_124;
    case 0x4A:
      unint64_t v606 = (void *)a4;
      if (a3) {
        return 2;
      }
      uint64_t v150 = (*(_DWORD *)(a2 + 40) - 1);
      uint64_t v151 = *(void *)(a2 + 32);
      int v152 = *(_DWORD *)(v151 + 32 * v150 + 4);
      uint64_t v153 = *(void *)(a1 + 16);
      if (v152 < 0 && (v152 & 0x7FFFFFFFu) < *(_DWORD *)(v153 + 432))
      {
        unint64_t v600 = *(void *)(*(void *)(v153 + 424) + 8 * (v152 & 0x7FFFFFFF));
        if ((v600 & 0xFFFFFFFFFFFFFFF9) != 0 && (v600 & 4) != 0) {
          return 2;
        }
      }
      else
      {
        unint64_t v600 = 0;
      }
      int v384 = *(_DWORD *)(v151 + 4);
      if ((v384 & 0x80000000) == 0) {
        return 2;
      }
      if ((v384 & 0x7FFFFFFFu) >= *(_DWORD *)(v153 + 432)) {
        return 2;
      }
      unint64_t v605 = *(void *)(*(void *)(v153 + 424) + 8 * (v384 & 0x7FFFFFFF));
      if ((v605 & 1) == 0) {
        return 2;
      }
      unint64_t v462 = sub_1CB8F1DC4((unint64_t *)&v606);
      if (v461 == 1) {
      unint64_t v464 = sub_1CB8F1DC4(&v600);
      }
      if (v463 == 1) {
      if (v462 >= v464)
      }
      {
        if ((v600 & 0xFFFFFFFFFFFFFFF9) != 0 && (v600 & 6) == 2)
        {
          uint64_t v526 = *(void *)(**(void **)(*(void *)a1 + 8) + 40);
          char v527 = 35;
          if ((v600 & 4) == 0) {
            char v527 = 19;
          }
          uint64_t v528 = *(__int32 **)(v526 + 656);
          size_t v529 = *(unsigned int *)(v526 + 664);
          uint64_t v530 = wmemchr(v528, (v600 >> v527) & 0xFFFFFF, v529);
          if (v530) {
            uint64_t v531 = v530;
          }
          else {
            uint64_t v531 = &v528[v529];
          }
          if (v529 != v531 - v528) {
            return 2;
          }
          unsigned int v533 = sub_1CB8F1DC4(&v600);
          if (v532 == 1) {
          unint64_t v600 = (8 * v533) | 1;
          }
          uint64_t v534 = *(void *)a1;
          v612[0] = (void *)v600;
          LODWORD(v612[1]) = 0;
          LODWORD(v615) = v152;
          LODWORD(v616) = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v534
                                                                                                  + 32))(v534, 80, v612, 1, &v615, 1, 0);
          int v152 = *(_DWORD *)(*(void *)(v535 + 32) + 4);
        }
        unint64_t v537 = sub_1CB8F1DC4((unint64_t *)&v606);
        if (v536 == 1) {
        unint64_t v539 = sub_1CB8F1DC4(&v600);
        }
        if (v538 == 1) {
        if (v537 > v539)
        }
        {
          unint64_t v600 = (unint64_t)v606;
          uint64_t v540 = *(void *)a1;
          v612[0] = v606;
          LODWORD(v612[1]) = 0;
          LODWORD(v615) = v152;
          LODWORD(v616) = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v540
                                                                                                  + 32))(v540, 118, v612, 1, &v615, 1, 0);
          int v152 = *(_DWORD *)(*(void *)(v541 + 32) + 4);
        }
        unsigned int v543 = sub_1CB8F1DC4(&v605);
        if (v542 == 1) {
        uint64_t v544 = *(void *)a1;
        }
        LODWORD(v612[0]) = v384;
        LODWORD(v612[1]) = 1;
        LODWORD(v615) = v152;
        LODWORD(v616) = 0;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v544 + 32))(v544, 119, v612, 1, &v615, 1, 0);
        if (v150 != 1)
        {
          uint64_t v545 = v150 - 1;
          uint64_t v546 = 36;
          unsigned int v547 = v543;
          do
          {
            uint64_t v548 = *(llvm::IntegerType ******)a1;
            *(void *)&long long v615 = v600;
            DWORD2(v615) = 0;
            uint64_t v549 = (llvm::LLVMContext *)(unsigned __int16)(v600 >> 3);
            uint64_t v550 = (llvm::LLVMContext *)(unsigned __int16)(v600 >> 19);
            if ((v600 & 2) == 0) {
              uint64_t v550 = (llvm::LLVMContext *)(v600 >> 19);
            }
            if ((v600 & 4) != 0) {
              uint64_t v549 = v550;
            }
            if (v600) {
              uint64_t v551 = (llvm::LLVMContext *)(v600 >> 3);
            }
            else {
              uint64_t v551 = v549;
            }
            uint64_t v552 = (llvm::ConstantInt *)llvm::IntegerType::get(***v548[1], v551);
            uint64_t v553 = llvm::ConstantInt::get(v552, v547, (const llvm::APInt *)1);
            uint64_t v554 = ((uint64_t (*)(llvm::IntegerType *****, long long *, void *))(*v548)[2])(v548, &v615, v553);
            uint64_t v555 = *(void *)a1;
            v612[0] = (void *)v600;
            LODWORD(v612[1]) = 0;
            LODWORD(v615) = v152;
            LODWORD(v616) = 0;
            uint64_t v617 = v554;
            uint64_t v618 = v556;
            int v619 = 1;
            uint64_t v557 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v555 + 32))(v555, 128, v612, 1, &v615, 2, 0);
            uint64_t v558 = *(void *)a1;
            LODWORD(v612[0]) = *(_DWORD *)(*(void *)(a2 + 32) + v546);
            LODWORD(v612[1]) = 1;
            *(void *)&long long v615 = v557;
            *((void *)&v615 + 1) = v559;
            LODWORD(v616) = 1;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v558 + 32))(v558, 119, v612, 1, &v615, 1, 0);
            v546 += 32;
            v547 += v543;
            --v545;
          }
          while (v545);
        }
      }
      else
      {
        uint64_t v604 = sub_1CC73EF40(v600, (unint64_t)v606);
        uint64_t v465 = sub_1CB8F1DC4((unint64_t *)&v604);
        int v467 = v466;
        if (v465 != sub_1CB8F1DC4(&v600) || v467 != v468)
        {
          if ((v600 & 0xFFFFFFFFFFFFFFF9) != 0 && (v600 & 6) == 2) {
            return 2;
          }
          uint64_t v469 = *(void *)a1;
          v612[0] = (void *)v604;
          LODWORD(v612[1]) = 0;
          LODWORD(v615) = v152;
          LODWORD(v616) = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v469
                                                                                                  + 32))(v469, 118, v612, 1, &v615, 1, 0);
          int v152 = *(_DWORD *)(*(void *)(v470 + 32) + 4);
        }
        uint64_t v471 = *(void **)a1;
        LODWORD(v615) = v152;
        LODWORD(v616) = 0;
        sub_1CC7363F0(v471, (unint64_t)v606, (int *)&v615);
        uint64_t v473 = v472;
        unint64_t v603 = sub_1CC73F3C4((unint64_t)v606, v605);
        uint64_t v583 = v473;
        int v474 = *(_DWORD *)(v473 + 40);
        unint64_t v476 = sub_1CB8F1DC4(&v605);
        if (v475 == 1) {
        uint64_t v574 = (v474 - 1);
        }
        unint64_t v478 = sub_1CB8F1DC4(&v603);
        if (v477 == 1) {
        unint64_t v479 = v476 / v478;
        }
        if (v479 == 1)
        {
          unint64_t v481 = sub_1CB8F1DC4((unint64_t *)&v606);
          if (v480 == 1) {
          unint64_t v483 = sub_1CB8F1DC4(&v605);
          }
          if (v482 == 1) {
          uint64_t v484 = v583;
          }
          if (v574)
          {
            unint64_t v485 = v481 / v483;
            uint64_t v486 = (v481 / v483);
            uint64_t v598 = (int)v150;
            uint64_t v571 = (int)v485;
            uint64_t v580 = v486;
            for (uint64_t i = 0; i != v574; ++i)
            {
              unint64_t v487 = *(void **)a1;
              int v488 = *(llvm::MachineFunction **)(*(void *)a1 + 8);
              uint64_t v489 = *(void *)(*(void *)(*(void *)a1 + 16) + 8);
              uint64_t v490 = *(void **)(*(void *)a1 + 32);
              v612[0] = v490;
              if (v490) {
                llvm::MetadataTracking::track((uint64_t)v612, (unsigned __int8 *)v490, 2);
              }
              MachineInstr = llvm::MachineFunction::CreateMachineInstr(v488, v489 + 3552, (unsigned __int8 **)v612, 0);
              uint64_t v588 = MachineInstr;
              uint64_t v592 = v488;
              if (v612[0])
              {
                int v522 = *(unsigned __int8 *)v612[0];
                if ((v522 - 4) > 0x1E)
                {
                  if ((v522 - 3) >= 0xFFFFFFFE) {
                    uint64_t v525 = v612[0];
                  }
                  else {
                    uint64_t v525 = 0;
                  }
                  if ((v522 - 3) >= 0xFFFFFFFE)
                  {
                    unint64_t v524 = (unint64_t)v525 + 8;
LABEL_628:
                    *(void *)&long long v615 = v612;
                    sub_1CC5FA668(v524 + 16, &v615);
                    uint64_t v486 = v580;
                    uint64_t v484 = v583;
                    goto LABEL_579;
                  }
                  uint64_t v486 = v580;
                  uint64_t v484 = v583;
                  if (v522 == 3) {
                    *((void *)v612[0] + 1) = 0;
                  }
                }
                else
                {
                  uint64_t v486 = v580;
                  uint64_t v484 = v583;
                  if ((*((unsigned char *)v612[0] + 1) & 0x7F) == 2 || *((_DWORD *)v612[0] + 3))
                  {
                    uint64_t v523 = *((void *)v612[0] + 2);
                    if ((v523 & 4) != 0)
                    {
                      unint64_t v524 = v523 & 0xFFFFFFFFFFFFFFF8;
                      if (v524) {
                        goto LABEL_628;
                      }
                    }
                  }
                }
              }
LABEL_579:
              uint64_t v492 = (unint64_t *)v487[6];
              uint64_t v493 = *(void *)(v487[5] + 40);
              *((void *)MachineInstr + 3) = v493;
              uint64_t v494 = *(void *)(v493 + 32);
              uint64_t v495 = *((unsigned int *)MachineInstr + 10);
              if (v495)
              {
                uint64_t v514 = *((void *)MachineInstr + 4);
                uint64_t v515 = *(void *)(v494 + 40);
                uint64_t v516 = 32 * v495;
                do
                {
                  if (!*(unsigned char *)v514)
                  {
                    uint64_t v517 = *(unsigned int *)(v514 + 4);
                    if ((int)v517 >= 0) {
                      uint64_t v518 = (uint64_t *)(*(void *)(v515 + 272) + 8 * v517);
                    }
                    else {
                      uint64_t v518 = (uint64_t *)(*(void *)(v515 + 24) + 16 * (v517 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v519 = *v518;
                    if (*v518)
                    {
                      uint64_t v520 = *(void *)(v519 + 16);
                      *(void *)(v519 + 16) = v514;
                      *(void *)(v514 + 16) = v520;
                      if (*(unsigned char *)(v514 + 3))
                      {
                        *(void *)(v514 + 24) = v519;
                      }
                      else
                      {
                        *(void *)(v514 + 24) = 0;
                        uint64_t v518 = (uint64_t *)(v520 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v514 + 16) = v514;
                      *(void *)(v514 + 24) = 0;
                    }
                    *uint64_t v518 = v514;
                  }
                  v514 += 32;
                  v516 -= 32;
                  uint64_t v486 = v580;
                  uint64_t v484 = v583;
                  MachineInstr = v588;
                  int v488 = v592;
                }
                while (v516);
              }
              uint64_t v496 = *(void *)(v494 + 728);
              if (v496) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v496 + 24))(v496, MachineInstr);
              }
              unint64_t v497 = *v492 & 0xFFFFFFFFFFFFFFF8;
              *(void *)MachineInstr = v497 | *(void *)MachineInstr & 7;
              *((void *)MachineInstr + 1) = v492;
              *(void *)(v497 + 8) = MachineInstr;
              unint64_t *v492 = *v492 & 7 | (unint64_t)MachineInstr;
              uint64_t v498 = v487[7];
              if (v498)
              {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v498 + 24))(v498, MachineInstr);
                if (v486)
                {
LABEL_584:
                  uint64_t v499 = 0;
                  uint64_t v500 = i * v571;
                  do
                  {
                    if (v499 + v500 >= v598)
                    {
                      uint64_t v502 = *(void *)(a1 + 16);
                      unint64_t v503 = v605;
                      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v502, "", 0);
                      unint64_t v505 = IncompleteVirtualRegister & 0x7FFFFFFF;
                      *(void *)(*(void *)(v502 + 24) + 16 * v505) = 4;
                      unint64_t v506 = *(unsigned int *)(v502 + 432);
                      if (v505 >= v506)
                      {
                        uint64_t v507 = *(void *)(v502 + 440);
                        if (v505 >= *(unsigned int *)(v502 + 436)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        int v508 = *(_DWORD *)(v502 + 432);
                        uint64_t v509 = v505 + 1 - v506;
                        if (v509)
                        {
                          uint64_t v510 = (void *)(*(void *)(v502 + 424) + 8 * *(unsigned int *)(v502 + 432));
                          uint64_t v511 = ~v505 + v506;
                          do
                          {
                            *v510++ = v507;
                            BOOL v85 = __CFADD__(v511++, 1);
                          }
                          while (!v85);
                          int v508 = *(_DWORD *)(v502 + 432);
                        }
                        *(_DWORD *)(v502 + 432) = v508 + v509;
                      }
                      *(void *)(*(void *)(v502 + 424) + 8 * v505) = v503;
                      uint64_t v512 = *(void *)(v502 + 8);
                      if (v512)
                      {
                        int v513 = IncompleteVirtualRegister;
                        (*(void (**)(uint64_t))(*(void *)v512 + 24))(v512);
                        int IncompleteVirtualRegister = v513;
                      }
                      *((void *)&v615 + 1) = 0;
                      uint64_t v616 = 0;
                      uint64_t v617 = 0;
                      LODWORD(v615) = 0x1000000;
                      DWORD1(v615) = IncompleteVirtualRegister;
                      MachineInstr = v588;
                      int v488 = v592;
                      llvm::MachineInstr::addOperand(v588, v592, (const llvm::MachineOperand *)&v615);
                      uint64_t v486 = v580;
                      uint64_t v484 = v583;
                    }
                    else
                    {
                      int v501 = *(_DWORD *)(*(void *)(a2 + 32) + 32 * (v499 + v500) + 4);
                      *((void *)&v615 + 1) = 0;
                      uint64_t v616 = 0;
                      uint64_t v617 = 0;
                      LODWORD(v615) = 0x1000000;
                      DWORD1(v615) = v501;
                      llvm::MachineInstr::addOperand(MachineInstr, v488, (const llvm::MachineOperand *)&v615);
                    }
                    ++v499;
                  }
                  while (v499 != v486);
                }
              }
              else if (v486)
              {
                goto LABEL_584;
              }
              int v521 = *(_DWORD *)(*(void *)(v484 + 32) + 32 * i + 4);
              *((void *)&v615 + 1) = 0;
              LODWORD(v615) = 0;
              DWORD1(v615) = v521;
              uint64_t v616 = 0;
              uint64_t v617 = 0;
              llvm::MachineInstr::addOperand(MachineInstr, v488, (const llvm::MachineOperand *)&v615);
            }
          }
        }
        else
        {
          *(void *)&long long v615 = &v616;
          *((void *)&v615 + 1) = 0x1000000000;
          if (v574)
          {
            uint64_t v563 = 0;
            do
            {
              sub_1CC724D60(a1, (uint64_t)&v615, v603, *(_DWORD *)(*(void *)(v583 + 32) + v563 + 4));
              v563 += 32;
            }
            while (32 * v574 != v563);
          }
          v612[0] = &v613;
          v612[1] = (void *)0x800000000;
          if (v150)
          {
            for (uint64_t j = 0; j != v150; ++j)
            {
              if ((int)v479 < 1)
              {
                uint64_t v568 = 0;
              }
              else
              {
                uint64_t v565 = 0;
                uint64_t v566 = v479;
                do
                {
                  uint64_t v567 = v565 + j * (int)v479;
                  if (LODWORD(v612[1]) >= HIDWORD(v612[1]))
                  {
                    sub_1CD62990C((uint64_t)v612, *(_DWORD *)(v615 + 4 * v567));
                  }
                  else
                  {
                    *((_DWORD *)v612[0] + LODWORD(v612[1])) = *(_DWORD *)(v615 + 4 * v567);
                    ++LODWORD(v612[1]);
                  }
                  ++v565;
                  --v566;
                }
                while (v566);
                uint64_t v568 = LODWORD(v612[1]);
              }
              uint64_t v569 = *(void *)a1;
              LODWORD(v609) = *(_DWORD *)(*(void *)(a2 + 32) + 32 * j + 4);
              LODWORD(v610) = 1;
              sub_1CC73661C(v569, (uint64_t)&v609, (int *)v612[0], v568);
              LODWORD(v612[1]) = 0;
            }
            if (v612[0] != &v613) {
              free(v612[0]);
            }
          }
          if ((uint64_t *)v615 != &v616) {
            free((void *)v615);
          }
        }
      }
LABEL_520:
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
      return 1;
    case 0x4B:
      if (!a3 && ((a4 & 0xFFFFFFFFFFFFFFF9) == 0 || (a4 & 4) == 0)) {
        goto LABEL_154;
      }
      return 2;
    case 0x4C:
      unint64_t v605 = a4;
      if (a3 != 1) {
        return 2;
      }
      uint64_t v155 = *(void *)(a2 + 32);
      uint64_t v156 = *(void *)(a1 + 16);
      int v578 = *(_DWORD *)(v155 + 4);
      if (v578 < 0 && (uint64_t v157 = v578 & 0x7FFFFFFF, v157 < *(_DWORD *)(v156 + 432)))
      {
        uint64_t v604 = *(void *)(*(void *)(v156 + 424) + 8 * v157);
        if ((v604 & 0xFFFFFFFFFFFFFFF9) != 0 && (v604 & 4) != 0) {
          return 2;
        }
      }
      else
      {
        uint64_t v604 = 0;
      }
      int v329 = *(_DWORD *)(v155 + 36);
      if (v329 < 0 && (v329 & 0x7FFFFFFFu) < *(_DWORD *)(v156 + 432)) {
        unint64_t v330 = *(void *)(*(void *)(v156 + 424) + 8 * (v329 & 0x7FFFFFFF));
      }
      else {
        unint64_t v330 = 0;
      }
      unint64_t v603 = v330;
      int v359 = sub_1CB8F1DC4((unint64_t *)&v604);
      if (v358 == 1) {
      int v596 = sub_1CB8F1DC4(&v603);
      }
      if (v360 == 1) {
      int v362 = sub_1CB8F1DC4(&v605);
      }
      if (v361 == 1) {
      int v363 = *(_DWORD *)(a2 + 40);
      }
      unint64_t v365 = sub_1CB8F1DC4((unint64_t *)&v604);
      if (v364 == 1) {
      int v573 = v362;
      }
      if (v362 < v359)
      {
        int v366 = (v359 + v362 - 1) / v362;
        int v367 = v596;
        int v368 = v362;
        do
        {
          int v369 = v368;
          int v368 = v367 % v368;
          int v367 = v369;
        }
        while (v368);
        *(void *)&long long v615 = &v616;
        *((void *)&v615 + 1) = 0x800000000;
        v612[0] = &v613;
        v612[1] = (void *)0x800000000;
        uint64_t v609 = v611;
        uint64_t v610 = 0x800000000;
        uint64_t v370 = (v366 * v362);
        int v602 = (void *)((8 * v370) | 1);
        uint64_t v371 = *(unsigned int *)(a2 + 40);
        if (v371 == 1)
        {
          int v372 = 0;
        }
        else
        {
          uint64_t v398 = *(void *)(a2 + 32);
          uint64_t v399 = v398 + 32 * v371;
          uint64_t v400 = v398 + 32;
          uint64_t v586 = v399;
          do
          {
            int v401 = *(_DWORD *)(v398 + 36);
            uint64_t v398 = v400;
            if (v369 == v596)
            {
              if (v610 >= (unint64_t)HIDWORD(v610)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v609 + v610) = v401;
              LODWORD(v610) = v610 + 1;
            }
            else
            {
              uint64_t v402 = *(void **)a1;
              LODWORD(v606) = v401;
              int v608 = 0;
              sub_1CC7363F0(v402, (8 * v369) | 1, (int *)&v606);
              uint64_t v399 = v586;
              int v404 = *(_DWORD *)(v403 + 40);
              unsigned int v405 = v404 - 1;
              if (v404 != 1)
              {
                uint64_t v406 = 0;
                unsigned int v407 = v610;
                do
                {
                  if (v407 >= HIDWORD(v610)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_DWORD *)v609 + v407) = *(_DWORD *)(*(void *)(v403 + 32) + v406 + 4);
                  unsigned int v407 = v610 + 1;
                  LODWORD(v610) = v610 + 1;
                  v406 += 32;
                }
                while (32 * v405 != v406);
              }
            }
            uint64_t v400 = v398 + 32;
          }
          while (v398 + 32 != v399);
          int v372 = v610;
        }
        if (v370 != v372)
        {
          uint64_t v439 = *(void *)a1;
          unint64_t v606 = (void *)((8 * v369) | 1);
          int v607 = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void, void, void))(*(void *)v439 + 32))(v439, 68, &v606, 1, 0, 0, 0);
          int v441 = v370 - v610;
          if (v370 != v610)
          {
            int v457 = *(_DWORD *)(*(void *)(v440 + 32) + 4);
            LODWORD(v370) = v610;
            do
            {
              if (v370 >= HIDWORD(v610)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v609 + v370) = v457;
              LODWORD(v370) = v610 + 1;
              LODWORD(v610) = v610 + 1;
              --v441;
            }
            while (v441);
          }
        }
        if (v366)
        {
          unint64_t v442 = v370;
          int v443 = (int *)v609;
          unint64_t v444 = v573 / v369;
          do
          {
            uint64_t v445 = *(void *)a1;
            unint64_t v606 = (void *)v605;
            int v607 = 0;
            unint64_t v446 = v442 - v444;
            if (v442 >= v444) {
              uint64_t v447 = v573 / v369;
            }
            else {
              uint64_t v447 = v442;
            }
            sub_1CC73661C(v445, (uint64_t)&v606, v443, v447);
            if (LODWORD(v612[1]) >= (unint64_t)HIDWORD(v612[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v612[0] + LODWORD(v612[1])) = *(_DWORD *)(*(void *)(v448 + 32) + 4);
            ++LODWORD(v612[1]);
            v443 += v444;
            unint64_t v442 = v446;
            --v366;
          }
          while (v366);
        }
        uint64_t v449 = sub_1CB8F1DC4((unint64_t *)&v604);
        int v451 = v450;
        uint64_t v453 = sub_1CB8F1DC4((unint64_t *)&v602);
        uint64_t v454 = *(void *)a1;
        if (v449 == v453 && v451 == v452)
        {
          LODWORD(v606) = v578;
          int v607 = 1;
          sub_1CC73661C(v454, (uint64_t)&v606, (int *)v612[0], LODWORD(v612[1]));
        }
        else
        {
          unint64_t v606 = v602;
          int v607 = 0;
          sub_1CC73661C(v454, (uint64_t)&v606, (int *)v612[0], LODWORD(v612[1]));
          uint64_t v455 = *(void *)a1;
          LODWORD(v600) = v578;
          int v601 = 1;
          LODWORD(v606) = *(_DWORD *)(*(void *)(v456 + 32) + 4);
          int v608 = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v455 + 32))(v455, 119, &v600, 1, &v606, 1, 0);
        }
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
        if (v609 != v611) {
          free(v609);
        }
        if (v612[0] != &v613) {
          free(v612[0]);
        }
        if ((uint64_t *)v615 != &v616) {
          free((void *)v615);
        }
        return 1;
      }
      int v570 = v359;
      uint64_t v394 = *(void *)a1;
      v612[0] = (void *)v605;
      LODWORD(v612[1]) = 0;
      LODWORD(v615) = v329;
      LODWORD(v616) = 0;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v394 + 32))(v394, 126, v612, 1, &v615, 1, 0);
      int v396 = *(_DWORD *)(*(void *)(v395 + 32) + 4);
      if (v363 == 2)
      {
        int v397 = *(_DWORD *)(*(void *)(v395 + 32) + 4);
      }
      else
      {
        unsigned int v408 = 2;
        unint64_t v582 = v365 / (v363 - 1);
        int v576 = v363;
        do
        {
          int v597 = v396;
          int v409 = *(_DWORD *)(*(void *)(a2 + 32) + 32 * v408 + 4);
          uint64_t v410 = *(void *)a1;
          v612[0] = (void *)v605;
          LODWORD(v612[1]) = 0;
          LODWORD(v615) = v409;
          LODWORD(v616) = 0;
          uint64_t v411 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v410 + 32))(v410, 126, v612, 1, &v615, 1, 0);
          uint64_t v587 = v412;
          uint64_t v591 = v411;
          unsigned int v413 = v408 + 1;
          unint64_t v414 = v605;
          if (v408 + 1 == v363 && v605 == v604)
          {
            int v397 = v578;
          }
          else
          {
            uint64_t v415 = *(void *)(a1 + 16);
            int v416 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v415, "", 0);
            int v397 = v416;
            unint64_t v417 = v416 & 0x7FFFFFFF;
            *(void *)(*(void *)(v415 + 24) + 16 * v417) = 4;
            unint64_t v418 = *(unsigned int *)(v415 + 432);
            if (v417 >= v418)
            {
              unint64_t v419 = v417 + 1;
              uint64_t v420 = *(void *)(v415 + 440);
              if (v417 >= *(unsigned int *)(v415 + 436)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v421 = *(_DWORD *)(v415 + 432);
              if (v419 != v418)
              {
                int v422 = (void *)(*(void *)(v415 + 424) + 8 * v418);
                uint64_t v423 = ~v417 + v418;
                do
                {
                  *v422++ = v420;
                  BOOL v85 = __CFADD__(v423++, 1);
                }
                while (!v85);
                int v421 = *(_DWORD *)(v415 + 432);
              }
              *(_DWORD *)(v415 + 432) = v421 + v419 - v418;
              int v397 = v416;
            }
            *(void *)(*(void *)(v415 + 424) + 8 * v417) = v414;
            uint64_t v424 = *(void *)(v415 + 8);
            if (v424) {
              (*(void (**)(uint64_t))(*(void *)v424 + 24))(v424);
            }
            unint64_t v414 = v605;
            int v363 = v576;
          }
          uint64_t v425 = *(llvm::IntegerType ******)a1;
          *(void *)&long long v615 = v414;
          DWORD2(v615) = 0;
          uint64_t v426 = (llvm::LLVMContext *)(unsigned __int16)(v414 >> 3);
          uint64_t v427 = (llvm::LLVMContext *)(unsigned __int16)(v414 >> 19);
          if ((v414 & 2) == 0) {
            uint64_t v427 = (llvm::LLVMContext *)(v414 >> 19);
          }
          if ((v414 & 4) != 0) {
            uint64_t v426 = v427;
          }
          if (v414) {
            uint64_t v428 = (llvm::LLVMContext *)(v414 >> 3);
          }
          else {
            uint64_t v428 = v426;
          }
          uint64_t v429 = (llvm::ConstantInt *)llvm::IntegerType::get(***v425[1], v428);
          int v430 = llvm::ConstantInt::get(v429, (v408 - 1) * v582, (const llvm::APInt *)1);
          uint64_t v431 = ((uint64_t (*)(llvm::IntegerType *****, long long *, void *))(*v425)[2])(v425, &v615, v430);
          uint64_t v432 = *(void *)a1;
          v612[0] = (void *)v605;
          LODWORD(v612[1]) = 0;
          *(void *)&long long v615 = v591;
          *((void *)&v615 + 1) = v587;
          LODWORD(v616) = 1;
          uint64_t v617 = v431;
          uint64_t v618 = v433;
          int v619 = 1;
          uint64_t v434 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v432 + 32))(v432, 127, v612, 1, &v615, 2, 0);
          uint64_t v435 = *(void *)a1;
          LODWORD(v612[0]) = v397;
          LODWORD(v612[1]) = 1;
          LODWORD(v615) = v597;
          LODWORD(v616) = 0;
          uint64_t v617 = v434;
          uint64_t v618 = v436;
          int v619 = 1;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v435
                                                                                                  + 32))(v435, 66, v612, 1, &v615, 2, 0);
          int v396 = v397;
          ++v408;
        }
        while (v413 != v363);
      }
      if (v573 > v570 || (v604 & 0xFFFFFFFFFFFFFFF9) != 0 && (v604 & 6) == 2)
      {
        uint64_t v437 = *(void *)a1;
        LODWORD(v612[0]) = v578;
        LODWORD(v612[1]) = 1;
        LODWORD(v615) = v397;
        LODWORD(v616) = 0;
        uint64_t v438 = *(void (**)(void))(*(void *)v437 + 32);
LABEL_519:
        v438();
      }
      goto LABEL_520;
    case 0x4D:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      uint64_t v123 = a4;
      if (a3 != 1)
      {
        char v124 = 3;
        if ((a4 & 1) == 0) {
          char v124 = 19;
        }
        unint64_t v125 = a4 & 0x8000000000000000 | (8 * (a4 >> v124)) | 1;
        char v126 = 35;
        char v127 = 19;
        if ((a4 & 4) == 0) {
          char v126 = 19;
        }
        unint64_t v128 = a4 >> v126;
        if ((a4 & 4) == 0) {
          char v127 = 3;
        }
        if (a4) {
          char v127 = 3;
        }
        unint64_t v129 = (8 * (unsigned __int16)(a4 >> v127)) & 0xFFFFF8000007FFFFLL | ((v128 & 0xFFFFFF) << 19);
        if ((a4 & 2) != 0) {
          uint64_t v123 = v129 | 2;
        }
        else {
          uint64_t v123 = v125;
        }
      }
      int v130 = *(_DWORD *)(a2 + 40);
      if (v130 != 1)
      {
        for (unsigned int k = 1; k != v130; ++k)
          sub_1CC7271E8(*(void *)a1, *(void *)(a2 + 32), v123, k, 118);
      }
      if (a3 != 1) {
        goto LABEL_123;
      }
      *(void *)(a2 + 16) = *(void *)(*(void *)(*(void *)a1 + 16) + 8) + 3744;
      goto LABEL_126;
    case 0x50:
      if (!a3) {
        goto LABEL_122;
      }
      return 2;
    case 0x51:
      if (a3 != 1) {
        return 2;
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      uint64_t v118 = *(void *)a1;
      uint64_t v119 = *(void *)(a2 + 32);
      uint64_t v5 = 1;
      uint64_t v120 = a4;
      unsigned int v121 = 1;
      uint64_t v122 = 126;
      goto LABEL_442;
    case 0x53:
      goto LABEL_154;
    case 0x55:
    case 0x56:
    case 0x58:
    case 0xA3:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA7:
    case 0xA8:
    case 0xA9:
    case 0xAA:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB0:
    case 0xB1:
    case 0xB8:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xD6:
    case 0xD7:
    case 0xD8:
    case 0xD9:
    case 0xDA:
    case 0xDB:
    case 0xDC:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      int v14 = *(_DWORD *)(a2 + 40);
      if (v14 != 1)
      {
        for (unsigned int m = 1; m != v14; ++m)
          sub_1CC7271E8(*(void *)a1, *(void *)(a2 + 32), a4, m, 178);
      }
      goto LABEL_5;
    case 0x60:
      if (a3) {
        return 2;
      }
      int v198 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      if ((v198 & 0x80000000) == 0) {
        return 2;
      }
      uint64_t v199 = *(void *)(a1 + 16);
      uint64_t v200 = v198 & 0x7FFFFFFF;
      if (v200 >= *(_DWORD *)(v199 + 432)) {
        return 2;
      }
      uint64_t v201 = *(void *)(*(void *)(v199 + 424) + 8 * v200);
      if ((v201 & 1) == 0) {
        return 2;
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      if ((v201 & 0x7FFFFFFF8) == 8) {
        uint64_t v144 = 126;
      }
      else {
        uint64_t v144 = 118;
      }
      goto LABEL_168;
    case 0x62:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      if (!a3)
      {
        sub_1CC7271E8(*(void *)a1, *(void *)(a2 + 32), a4, 3u, 118);
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = *(void *)(a2 + 32);
        uint64_t v22 = a4;
        unsigned int v23 = 4;
        goto LABEL_7;
      }
LABEL_189:
      uint64_t v159 = *(void *)(a2 + 32);
      uint64_t v5 = 1;
      unsigned int v160 = (void *)a1;
      uint64_t v161 = a4;
      unsigned int v162 = 1;
      goto LABEL_158;
    case 0x63:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      goto LABEL_179;
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void *)(a2 + 32);
      uint64_t v22 = a4;
      unsigned int v23 = 2;
      goto LABEL_7;
    case 0x72:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      uint64_t v168 = *(void *)(*(void *)(*(void *)a1 + 8) + 16);
      int v169 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v168 + 120))(v168) + 52);
      if (v169 == 1) {
        unsigned int v170 = 126;
      }
      else {
        unsigned int v170 = 118;
      }
      if (v169 == 2) {
        uint64_t v144 = 124;
      }
      else {
        uint64_t v144 = v170;
      }
LABEL_168:
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void *)(a2 + 32);
      uint64_t v75 = a4;
      unsigned int v76 = 0;
      goto LABEL_440;
    case 0x78:
      uint64_t v202 = *(void *)(a2 + 32);
      uint64_t v203 = ****(llvm::ConstantInt *****)(*(void *)a1 + 8);
      uint64_t v204 = *(void *)(a1 + 24);
      int v205 = *(_DWORD *)(v202 + 4);
      if (v205 < 0
        && (uint64_t v206 = *(void *)(a1 + 16), v207 = v205 & 0x7FFFFFFF, v207 < *(_DWORD *)(v206 + 432)))
      {
        uint64_t v208 = *(void *)(*(void *)(v206 + 424) + 8 * v207);
      }
      else
      {
        uint64_t v208 = 0;
      }
      int v271 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v204 + 32))(v204, v208);
      uint64_t v272 = *(void *)(v202 + 48);
      unsigned int v274 = sub_1CB8F1DC4(&v599);
      if (v271 == 124)
      {
        if (v273 == 1) {
        llvm::APInt::sext(v272 + 24, v274, (uint64_t)&v615);
        }
      }
      else
      {
        if (v273 == 1) {
        if (v274 > 0x40)
        }
        {
          if (*(_DWORD *)(v272 + 32) != v274) {
            operator new[]();
          }
          sub_1CD0463BC((uint64_t)&v615, v272 + 24);
        }
        else
        {
          uint64_t v314 = *(void *)(v272 + 24);
          DWORD2(v615) = v274;
          unint64_t v315 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v274;
          if (!v274) {
            unint64_t v315 = 0;
          }
          *(void *)&long long v615 = v315 & v314;
        }
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      *(void *)(v202 + 48) = llvm::ConstantInt::get(v203, (llvm::LLVMContext *)&v615, v316);
      sub_1CC7272A4((void *)a1, *(void *)(a2 + 32), v599, 0, 0x77u);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a2);
      goto LABEL_364;
    case 0x79:
      uint64_t v132 = *(void *)(*(void *)(a2 + 32) + 48);
      uint64_t v134 = *(void **)(v132 + 32);
      uint64_t v133 = (llvm::detail::DoubleAPFloat *)(v132 + 32);
      if (v134 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v133, (llvm::APInt *)&v615);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v133, (uint64_t)&v615);
      }
      uint64_t v136 = *(void *)a1;
      *(void *)(v136 + 40) = *(void *)(a2 + 24);
      *(void *)(v136 + 48) = a2;
      int v137 = (unsigned __int8 **)(a2 + 56);
      uint64_t v138 = (unsigned __int8 **)(v136 + 32);
      if (a2 + 56 == v136 + 32) {
        goto LABEL_117;
      }
      uint64_t v139 = *v138;
      if (!*v138) {
        goto LABEL_115;
      }
      int v458 = *v139;
      if ((v458 - 4) > 0x1E)
      {
        if ((v458 - 3) >= 0xFFFFFFFE) {
          uint64_t v560 = *v138;
        }
        else {
          uint64_t v560 = 0;
        }
        if ((v458 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v460 = (unint64_t)(v560 + 8);
LABEL_668:
          v612[0] = v138;
          sub_1CC5FA668(v460 + 16, v612);
          goto LABEL_115;
        }
        if (v458 == 3) {
          *((void *)v139 + 1) = 0;
        }
      }
      else if ((v139[1] & 0x7F) == 2 || *((_DWORD *)v139 + 3))
      {
        uint64_t v459 = *((void *)v139 + 2);
        if ((v459 & 4) != 0)
        {
          unint64_t v460 = v459 & 0xFFFFFFFFFFFFFFF8;
          if (v460) {
            goto LABEL_668;
          }
        }
      }
LABEL_115:
      unint64_t v140 = *v137;
      *uint64_t v138 = *v137;
      if (v140) {
        llvm::MetadataTracking::track((uint64_t)v138, v140, 2);
      }
LABEL_117:
      uint64_t v141 = *(llvm::ConstantInt ******)a1;
      LODWORD(v612[0]) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      LODWORD(v612[1]) = 1;
      BOOL v142 = llvm::ConstantInt::get(***v141[1], (llvm::LLVMContext *)&v615, v135);
      ((void (*)(llvm::ConstantInt *****, void **, void *))(*v141)[2])(v141, v612, v142);
      sub_1CC7272A4((void *)a1, *(void *)(v143 + 32), v599, 0, 0x77u);
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
LABEL_364:
      if (DWORD2(v615) >= 0x41 && (void)v615) {
        MEMORY[0x1D25D9CB0](v615, 0x1000C8000313F17);
      }
      return 1;
    case 0x7D:
      if (a3) {
        return 2;
      }
LABEL_154:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      uint64_t v25 = *(void *)a1;
      uint64_t v26 = *(void *)(a2 + 32);
      uint64_t v5 = 1;
      uint64_t v27 = a4;
      unsigned int v28 = 1;
LABEL_155:
      uint64_t v37 = 118;
      goto LABEL_156;
    case 0x7F:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void *)(a2 + 32);
      if (a3) {
        goto LABEL_270;
      }
      uint64_t v22 = a4;
      goto LABEL_223;
    case 0x80:
    case 0x81:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      if (a3) {
        goto LABEL_269;
      }
      if (**(_WORD **)(a2 + 16) == 129) {
        uint64_t v24 = 124;
      }
      else {
        uint64_t v24 = 126;
      }
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void *)(a2 + 32);
      uint64_t v22 = a4;
      unsigned int v23 = 1;
      goto LABEL_8;
    case 0x86:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      if (!a3) {
        goto LABEL_123;
      }
      uint64_t v184 = *(void *)(a2 + 32);
      if ((*(_DWORD *)(v184 + 48) - 38) >= 4) {
        uint64_t v188 = 126;
      }
      else {
        uint64_t v188 = 124;
      }
      goto LABEL_220;
    case 0x87:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      if (!a3) {
        goto LABEL_123;
      }
      sub_1CC7271E8(*(void *)a1, *(void *)(a2 + 32), a4, 2u, 178);
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void *)(a2 + 32);
      uint64_t v75 = a4;
      unsigned int v76 = 3;
      goto LABEL_120;
    case 0x88:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      if (!a3)
      {
LABEL_179:
        sub_1CC7271E8(*(void *)a1, *(void *)(a2 + 32), a4, 2u, 118);
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = *(void *)(a2 + 32);
        uint64_t v22 = a4;
        unsigned int v23 = 3;
        goto LABEL_7;
      }
      int v110 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
      if (v110 < 0
        && (v111 = *(void *)(a1 + 16), uint64_t v112 = v110 & 0x7FFFFFFF, v112 < *(_DWORD *)(v111 + 432)))
      {
        unint64_t v113 = *(void *)(*(void *)(v111 + 424) + 8 * v112);
      }
      else
      {
        unint64_t v113 = 0;
      }
      BOOL v307 = (v113 & 0xFFFFFFFFFFFFFFF9) != 0;
      uint64_t v308 = (v113 >> 2) & 1;
      uint64_t v309 = *(void *)(*(void *)(*(void *)a1 + 8) + 16);
      uint64_t v310 = (*(uint64_t (**)(uint64_t))(*(void *)v309 + 120))(v309);
      uint64_t v311 = 52;
      if ((v307 & v308) != 0) {
        uint64_t v311 = 60;
      }
      int v312 = *(_DWORD *)(v310 + v311);
      if (v312 == 1) {
        unsigned int v313 = 126;
      }
      else {
        unsigned int v313 = 118;
      }
      if (v312 == 2) {
        uint64_t v144 = 124;
      }
      else {
        uint64_t v144 = v313;
      }
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void *)(a2 + 32);
      uint64_t v75 = a4;
      unsigned int v76 = 1;
      goto LABEL_440;
    case 0x89:
      int v10 = 0;
      goto LABEL_241;
    case 0x8A:
      char v13 = 0;
      int v10 = *(_DWORD *)(*(void *)(a2 + 32) + 132);
      uint64_t v11 = 138;
      goto LABEL_241;
    case 0x8B:
      int v10 = 0;
      uint64_t v11 = 46;
      goto LABEL_241;
    case 0x8C:
      char v13 = 0;
      int v10 = *(_DWORD *)(*(void *)(a2 + 32) + 132);
      uint64_t v11 = 140;
LABEL_241:
      uint64_t v12 = 126;
      goto LABEL_242;
    case 0x8D:
      goto LABEL_242;
    case 0x8E:
      char v13 = 0;
      int v10 = *(_DWORD *)(*(void *)(a2 + 32) + 132);
      uint64_t v11 = 138;
      goto LABEL_242;
    case 0x8F:
      int v10 = 0;
      uint64_t v11 = 46;
      goto LABEL_242;
    case 0x90:
      char v13 = 0;
      int v10 = *(_DWORD *)(*(void *)(a2 + 32) + 132);
      uint64_t v11 = 140;
LABEL_242:
      std::string v213 = *(void **)a1;
      if (a3 != 1)
      {
        v612[0] = (void *)a4;
        LODWORD(v612[1]) = 0;
        LODWORD(v615) = *(_DWORD *)(*(void *)(a2 + 32) + 68);
        LODWORD(v616) = 0;
        uint64_t v220 = (*(uint64_t (**)(void *, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*v213 + 32))(v213, v12, v612, 1, &v615, 1, 0);
        uint64_t v222 = v221;
        uint64_t v223 = *(void *)a1;
        v612[0] = (void *)a4;
        LODWORD(v612[1]) = 0;
        LODWORD(v615) = *(_DWORD *)(*(void *)(a2 + 32) + 100);
        LODWORD(v616) = 0;
        uint64_t v224 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v223 + 32))(v223, v12, v612, 1, &v615, 1, 0);
        if (v13)
        {
          uint64_t v226 = *(void *)a1;
          v612[0] = (void *)a4;
          LODWORD(v612[1]) = 0;
          *(void *)&long long v615 = v220;
          *((void *)&v615 + 1) = v222;
          LODWORD(v616) = 1;
          uint64_t v617 = v224;
          uint64_t v618 = v225;
          int v619 = 1;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v226
                                                                                                  + 32))(v226, v11, v612, 1, &v615, 2, 0);
        }
        else
        {
          int v228 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
          if (v228 < 0
            && (v229 = *(void *)(a1 + 16), uint64_t v230 = v228 & 0x7FFFFFFF, v230 < *(_DWORD *)(v229 + 432)))
          {
            uint64_t v231 = *(void *)(*(void *)(v229 + 424) + 8 * v230);
          }
          else
          {
            uint64_t v231 = 0;
          }
          uint64_t v232 = *(void *)a1;
          v612[0] = (void *)a4;
          LODWORD(v612[1]) = 0;
          uint64_t v613 = v231;
          int v614 = 0;
          *(void *)&long long v615 = v220;
          *((void *)&v615 + 1) = v222;
          LODWORD(v616) = 1;
          uint64_t v617 = v224;
          uint64_t v618 = v225;
          int v619 = 1;
          LODWORD(v620) = v10;
          int v622 = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v232
                                                                                                  + 32))(v232, v11, v612, 2, &v615, 3, 0);
        }
        int v233 = *(_DWORD *)(*(void *)(v227 + 32) + 4);
        int v234 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
        if (v234 < 0
          && (uint64_t v235 = *(void *)(a1 + 16), v236 = v234 & 0x7FFFFFFF, v236 < *(_DWORD *)(v235 + 432)))
        {
          uint64_t v237 = *(void **)(*(void *)(v235 + 424) + 8 * v236);
        }
        else
        {
          uint64_t v237 = 0;
        }
        uint64_t v238 = *(void *)a1;
        v612[0] = v237;
        LODWORD(v612[1]) = 0;
        LODWORD(v615) = v233;
        LODWORD(v616) = 0;
        uint64_t v5 = 1;
        uint64_t v239 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v238 + 32))(v238, 119, v612, 1, &v615, 1, 0);
        uint64_t v240 = *(void *)a1;
        v612[0] = (void *)a4;
        LODWORD(v612[1]) = 0;
        *(void *)&long long v615 = v239;
        *((void *)&v615 + 1) = v241;
        LODWORD(v616) = 1;
        uint64_t v242 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v240 + 32))(v240, v12, v612, 1, &v615, 1, 0);
        uint64_t v243 = *(void *)a1;
        LODWORD(v612[0]) = *(_DWORD *)(*(void *)(a2 + 32) + 36);
        LODWORD(v612[1]) = 1;
        LODWORD(v615) = 33;
        LODWORD(v616) = 2;
        LODWORD(v617) = v233;
        int v619 = 0;
        uint64_t v620 = v242;
        uint64_t v621 = v244;
        int v622 = 1;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v243 + 32))(v243, 134, v612, 1, &v615, 3, 0);
        uint64_t v245 = *(void *)a1;
        LODWORD(v612[0]) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
        LODWORD(v612[1]) = 1;
        LODWORD(v615) = v233;
        LODWORD(v616) = 0;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v245 + 32))(v245, 119, v612, 1, &v615, 1, 0);
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
        return v5;
      }
      BOOL v214 = (a4 & 0xFFFFFFFFFFFFFFF9) != 0;
      uint64_t v215 = (a4 >> 2) & 1;
      uint64_t v216 = (*(uint64_t (**)(void))(**(void **)(v213[1] + 16) + 120))(*(void *)(v213[1] + 16));
      uint64_t v217 = 52;
      if ((v214 & v215) != 0) {
        uint64_t v217 = 60;
      }
      int v218 = *(_DWORD *)(v216 + v217);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      sub_1CC7272A4((void *)a1, *(void *)(a2 + 32), a4, 1u, 0x77u);
      if ((v13 & 1) == 0)
      {
        if (v218 == 1) {
          unsigned int v219 = 126;
        }
        else {
          unsigned int v219 = 118;
        }
        if (v218 == 2) {
          uint64_t v144 = 124;
        }
        else {
          uint64_t v144 = v219;
        }
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = *(void *)(a2 + 32);
        uint64_t v75 = a4;
        unsigned int v76 = 4;
        goto LABEL_440;
      }
      goto LABEL_126;
    case 0x91:
    case 0x92:
      sub_1CD61B4C4((uint64_t *)a1, a2, a3, a4);
      return 1;
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
    case 0x99:
    case 0x9A:
      uint64_t v38 = *(void *)(a2 + 32);
      int v39 = *(_DWORD *)(v38 + 4);
      if (a4)
      {
        int v40 = a4 >> 3;
      }
      else if ((a4 & 4) != 0)
      {
        if ((a4 & 2) != 0) {
          int v40 = (unsigned __int16)(a4 >> 19);
        }
        else {
          int v40 = a4 >> 19;
        }
      }
      else
      {
        int v40 = (unsigned __int16)(a4 >> 3);
      }
      int v593 = *(_DWORD *)(v38 + 4);
      if (v39 < 0 && (uint64_t v41 = *(void *)(a1 + 16), v42 = v39 & 0x7FFFFFFF, v42 < *(_DWORD *)(v41 + 432)))
      {
        unint64_t v43 = *(void *)(*(void *)(v41 + 424) + 8 * v42);
        if (v43)
        {
          int v44 = v43 >> 3;
          goto LABEL_26;
        }
        if ((v43 & 4) != 0)
        {
          if ((v43 & 2) != 0) {
            int v44 = (unsigned __int16)(v43 >> 19);
          }
          else {
            int v44 = v43 >> 19;
          }
LABEL_26:
          unsigned int v45 = v40 - v44;
          uint64_t v46 = *(void *)a1;
          v612[0] = (void *)a4;
          LODWORD(v612[1]) = 0;
          LODWORD(v615) = *(_DWORD *)(v38 + 36);
          LODWORD(v616) = 0;
          uint64_t v584 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v46 + 32))(v46, 118, v612, 1, &v615, 1, 0);
          uint64_t v48 = v47;
          uint64_t v49 = *(void *)a1;
          unsigned int v589 = v4 - 153;
          v612[0] = (void *)a4;
          LODWORD(v612[1]) = 0;
          LODWORD(v615) = *(_DWORD *)(*(void *)(a2 + 32) + 68);
          LODWORD(v616) = 0;
          uint64_t v50 = (*(uint64_t (**)(void))(*(void *)v49 + 32))();
          uint64_t v52 = v51;
          uint64_t v53 = *(llvm::IntegerType ******)a1;
          *(void *)&long long v615 = a4;
          DWORD2(v615) = 0;
          uint64_t v581 = v50;
          if (a4)
          {
            unint64_t v54 = (a4 >> 3);
          }
          else if ((a4 & 4) != 0)
          {
            if ((a4 & 2) != 0) {
              unint64_t v54 = (unsigned __int16)(a4 >> 19);
            }
            else {
              unint64_t v54 = (a4 >> 19);
            }
          }
          else
          {
            unint64_t v54 = (unsigned __int16)(a4 >> 3);
          }
          unint64_t v55 = (llvm::ConstantInt *)llvm::IntegerType::get(***v53[1], (llvm::LLVMContext *)v54);
          unint64_t v56 = llvm::ConstantInt::get(v55, v45, (const llvm::APInt *)1);
          uint64_t v57 = ((uint64_t (*)(llvm::IntegerType *****, long long *, void *))(*v53)[2])(v53, &v615, v56);
          uint64_t v59 = v58;
          uint64_t v60 = *(void *)a1;
          v612[0] = (void *)a4;
          LODWORD(v612[1]) = 0;
          *(void *)&long long v615 = v584;
          *((void *)&v615 + 1) = v48;
          LODWORD(v616) = 1;
          uint64_t v617 = v57;
          uint64_t v618 = v58;
          int v619 = 1;
          uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v60 + 32))(v60, 127, v612, 1, &v615, 2, 0);
          uint64_t v63 = v62;
          if (v589 < 2)
          {
            uint64_t v65 = v581;
          }
          else
          {
            uint64_t v64 = *(void *)a1;
            v612[0] = (void *)a4;
            LODWORD(v612[1]) = 0;
            *(void *)&long long v615 = v581;
            *((void *)&v615 + 1) = v52;
            LODWORD(v616) = 1;
            uint64_t v617 = v57;
            uint64_t v618 = v59;
            int v619 = 1;
            uint64_t v65 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v64 + 32))(v64, 127, v612, 1, &v615, 2, 0);
            uint64_t v52 = v66;
          }
          uint64_t v67 = *(void *)a1;
          uint64_t v68 = **(unsigned __int16 **)(a2 + 16);
          v612[0] = (void *)a4;
          LODWORD(v612[1]) = 0;
          *(void *)&long long v615 = v61;
          *((void *)&v615 + 1) = v63;
          LODWORD(v616) = 1;
          uint64_t v617 = v65;
          uint64_t v618 = v52;
          int v619 = 1;
          uint64_t v69 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, uint64_t))(*(void *)v67 + 32))(v67, v68, v612, 1, &v615, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
          uint64_t v70 = *(void *)a1;
          v612[0] = (void *)a4;
          LODWORD(v612[1]) = 0;
          *(void *)&long long v615 = v69;
          *((void *)&v615 + 1) = v71;
          LODWORD(v616) = 1;
          uint64_t v617 = v57;
          uint64_t v618 = v59;
          int v619 = 1;
          uint64_t v72 = (*(uint64_t (**)(void))(*(void *)v70 + 32))();
          uint64_t v73 = *(void *)a1;
          uint64_t v5 = 1;
          LODWORD(v612[0]) = v593;
          LODWORD(v612[1]) = 1;
          *(void *)&long long v615 = v72;
          *((void *)&v615 + 1) = v74;
          LODWORD(v616) = 1;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v73 + 32))(v73, 119, v612, 1, &v615, 1, 0);
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          return v5;
        }
      }
      else
      {
        unint64_t v43 = 0;
      }
      int v44 = (unsigned __int16)(v43 >> 3);
      goto LABEL_26;
    case 0xAB:
      if (a3) {
        return 2;
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      uint64_t v176 = *(void *)a1;
      uint64_t v177 = *(void *)(a2 + 32);
      uint64_t v5 = 1;
      uint64_t v178 = a4;
      unsigned int v179 = 1;
LABEL_192:
      sub_1CC7271E8(v176, v177, v178, v179, 178);
      uint64_t v159 = *(void *)(a2 + 32);
      unsigned int v160 = (void *)a1;
      uint64_t v161 = a4;
      unsigned int v162 = 0;
      unsigned int v163 = 179;
      goto LABEL_159;
    case 0xB4:
    case 0xB5:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      if (!a3) {
        goto LABEL_123;
      }
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void *)(a2 + 32);
      uint64_t v75 = a4;
      unsigned int v76 = 1;
LABEL_120:
      uint64_t v144 = 178;
      goto LABEL_440;
    case 0xB6:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      if (!a3) {
        goto LABEL_5;
      }
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void *)(a2 + 32);
      uint64_t v75 = a4;
      unsigned int v76 = 1;
      goto LABEL_439;
    case 0xB7:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      if (!a3)
      {
LABEL_5:
        uint64_t v16 = *(void *)(a2 + 32);
        int v17 = (void *)a1;
        unint64_t v18 = a4;
        unsigned int v19 = 179;
        goto LABEL_125;
      }
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void *)(a2 + 32);
      uint64_t v75 = a4;
      unsigned int v76 = 1;
      goto LABEL_271;
    case 0xC1:
      goto LABEL_186;
    case 0xC2:
      if (a3 != 1) {
        return 2;
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
LABEL_269:
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void *)(a2 + 32);
LABEL_270:
      uint64_t v75 = a4;
      unsigned int v76 = 2;
      goto LABEL_271;
    case 0xC7:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      uint64_t v25 = *(void *)a1;
      uint64_t v26 = *(void *)(a2 + 32);
      uint64_t v5 = 1;
      uint64_t v27 = a4;
      unsigned int v28 = 1;
LABEL_18:
      uint64_t v37 = 124;
LABEL_156:
      sub_1CC7271E8(v25, v26, v27, v28, v37);
      uint64_t v159 = *(void *)(a2 + 32);
      unsigned int v160 = (void *)a1;
      uint64_t v161 = a4;
      goto LABEL_157;
    case 0xCC:
      if (a3 == 2)
      {
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = *(void *)(a2 + 32);
        uint64_t v75 = a4;
        unsigned int v76 = 3;
        goto LABEL_439;
      }
      if (a3 != 1) {
        return 2;
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      int v114 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
      if (v114 < 0
        && (v115 = *(void *)(a1 + 16), uint64_t v116 = v114 & 0x7FFFFFFF, v116 < *(_DWORD *)(v115 + 432)))
      {
        unint64_t v117 = *(void *)(*(void *)(v115 + 424) + 8 * v116);
      }
      else
      {
        unint64_t v117 = 0;
      }
      uint64_t v386 = 0x800000000000000;
      if ((v117 & 2) == 0) {
        uint64_t v386 = 0x8000000000000;
      }
      unint64_t v387 = sub_1CBA5A95C((unsigned __int16)(v117 >> 3) | ((unint64_t)((v386 & v117) != 0) << 32), a4);
      uint64_t v5 = 1;
      sub_1CC7271E8(*(void *)a1, *(void *)(a2 + 32), v387, 1u, 118);
      sub_1CC7271E8(*(void *)a1, *(void *)(a2 + 32), a4, 2u, 118);
      uint64_t v159 = *(void *)(a2 + 32);
      unsigned int v160 = (void *)a1;
      uint64_t v161 = v387;
      goto LABEL_157;
    case 0xCD:
      if (a3 == 2)
      {
LABEL_186:
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = *(void *)(a2 + 32);
        uint64_t v75 = a4;
        unsigned int v76 = 2;
LABEL_439:
        uint64_t v144 = 124;
        goto LABEL_440;
      }
      if (a3) {
        return 2;
      }
      int v180 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
      if (v180 < 0
        && (v181 = *(void *)(a1 + 16), uint64_t v182 = v180 & 0x7FFFFFFF, v182 < *(_DWORD *)(v181 + 432)))
      {
        uint64_t v183 = *(void *)(*(void *)(v181 + 424) + 8 * v182);
      }
      else
      {
        uint64_t v183 = 0;
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      uint64_t v388 = v183 & 0x7FFF8;
      uint64_t v389 = 0x800000000000000;
      if ((v183 & 2) == 0) {
        uint64_t v389 = 0x8000000000000;
      }
      uint64_t v390 = v389 & v183;
      unsigned int v392 = sub_1CB8F1DC4(&v599);
      if (v391 == 1) {
      unint64_t v393 = v388 & 0xFFF800000007FFFFLL | ((unint64_t)(v390 != 0) << 51) | ((unint64_t)v392 << 19) | 4;
      }
      uint64_t v5 = 1;
      sub_1CC7271E8(*(void *)a1, *(void *)(a2 + 32), v393, 1u, 118);
      uint64_t v161 = v599;
      uint64_t v159 = *(void *)(a2 + 32);
      unsigned int v160 = (void *)a1;
LABEL_157:
      unsigned int v162 = 0;
LABEL_158:
      unsigned int v163 = 119;
LABEL_159:
      sub_1CC7272A4(v160, v159, v161, v162, v163);
LABEL_160:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a2);
      return v5;
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
      if (!a3)
      {
LABEL_122:
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
        goto LABEL_123;
      }
      int v29 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
      if ((v4 - 207) >= 2) {
        uint64_t v30 = 126;
      }
      else {
        uint64_t v30 = 118;
      }
      uint64_t v31 = *(void *)a1;
      v612[0] = (void *)a4;
      LODWORD(v612[1]) = 0;
      LODWORD(v615) = v29;
      LODWORD(v616) = 0;
      uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v31 + 32))(v31, v30, v612, 1, &v615, 1, 0);
      uint64_t v34 = v33;
      unint64_t v35 = 0;
      if (v29 < 0)
      {
        uint64_t v36 = *(void *)(a1 + 16);
        if ((v29 & 0x7FFFFFFFu) >= *(_DWORD *)(v36 + 432)) {
          unint64_t v35 = 0;
        }
        else {
          unint64_t v35 = *(void *)(*(void *)(v36 + 424) + 8 * (v29 & 0x7FFFFFFF));
        }
      }
      unint64_t v600 = v35;
      uint64_t v275 = **(unsigned __int16 **)(a2 + 16);
      if (v275 == 207)
      {
        unsigned int v277 = sub_1CB8F1DC4(&v599);
        if (v276 == 1) {
        char v280 = sub_1CB8F1DC4(&v600);
        }
        if (v278 == 1) {
        LODWORD(v610) = v277;
        }
        if (v277 > 0x40) {
          operator new[]();
        }
        uint64_t v609 = (void *)(1 << v280);
        unint64_t v281 = *(llvm::ConstantInt ******)a1;
        unint64_t v282 = (void *)v599;
        unint64_t v606 = (void *)v599;
        int v607 = 0;
        uint64_t v283 = llvm::ConstantInt::get(***v281[1], (llvm::LLVMContext *)&v609, v279);
        uint64_t v284 = ((uint64_t (*)(llvm::ConstantInt *****, void **, void *))(*v281)[2])(v281, &v606, v283);
        v612[0] = v282;
        LODWORD(v612[1]) = 0;
        *(void *)&long long v615 = v32;
        *((void *)&v615 + 1) = v34;
        LODWORD(v616) = 1;
        uint64_t v617 = v284;
        uint64_t v618 = v285;
        int v619 = 1;
        uint64_t v32 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*v281)[4])(v281, 66, v612, 1, &v615, 2, 0);
        uint64_t v34 = v286;
        if (v610 >= 0x41 && v609) {
          MEMORY[0x1D25D9CB0](v609, 0x1000C8000313F17);
        }
        uint64_t v275 = 208;
      }
      uint64_t v287 = *(void *)a1;
      v612[0] = (void *)v599;
      LODWORD(v612[1]) = 0;
      *(void *)&long long v615 = v32;
      *((void *)&v615 + 1) = v34;
      LODWORD(v616) = 1;
      uint64_t v288 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v287 + 32))(v287, v275, v612, 1, &v615, 1, 0);
      uint64_t v290 = v289;
      if (**(unsigned __int16 **)(a2 + 16) - 209 <= 1)
      {
        int v291 = sub_1CB8F1DC4(&v599);
        int v293 = v292;
        unsigned int v295 = v291 - sub_1CB8F1DC4(&v600);
        if (v293 == 1) {
        uint64_t v296 = *(llvm::IntegerType ******)a1;
        }
        uint64_t v297 = (void *)v599;
        uint64_t v609 = (void *)v599;
        LODWORD(v610) = 0;
        uint64_t v298 = (llvm::LLVMContext *)(unsigned __int16)(v599 >> 3);
        uint64_t v299 = (llvm::LLVMContext *)(unsigned __int16)(v599 >> 19);
        if ((v599 & 2) == 0) {
          uint64_t v299 = (llvm::LLVMContext *)(v599 >> 19);
        }
        if ((v599 & 4) != 0) {
          uint64_t v298 = v299;
        }
        if (v599) {
          uint64_t v300 = (llvm::LLVMContext *)(v599 >> 3);
        }
        else {
          uint64_t v300 = v298;
        }
        uint64_t v301 = (llvm::ConstantInt *)llvm::IntegerType::get(***v296[1], v300);
        uint64_t v302 = llvm::ConstantInt::get(v301, v295, (const llvm::APInt *)1);
        uint64_t v303 = ((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*v296)[2])(v296, &v609, v302);
        v612[0] = v297;
        LODWORD(v612[1]) = 0;
        *(void *)&long long v615 = v288;
        *((void *)&v615 + 1) = v290;
        LODWORD(v616) = 1;
        uint64_t v617 = v303;
        uint64_t v618 = v304;
        int v619 = 1;
        uint64_t v288 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*v296)[4])(v296, 46, v612, 1, &v615, 2, 0);
        uint64_t v290 = v305;
      }
      uint64_t v306 = *(void **)a1;
      LODWORD(v612[0]) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      LODWORD(v612[1]) = 1;
      *(void *)&long long v615 = v288;
      *((void *)&v615 + 1) = v290;
      LODWORD(v616) = 1;
      sub_1CC738034(v306, 126, (unint64_t *)v612, (int *)&v615);
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
      return 1;
    case 0xD4:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      int v594 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      uint64_t v77 = *(void *)(a1 + 16);
      unsigned int v590 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v77, "", 0);
      unint64_t v78 = v590 & 0x7FFFFFFF;
      *(void *)(*(void *)(v77 + 24) + 16 * v78) = 4;
      unint64_t v79 = *(unsigned int *)(v77 + 432);
      if (v78 >= v79)
      {
        uint64_t v80 = *(void *)(v77 + 440);
        uint64_t v81 = v78 + 1 - v79;
        if (v78 >= *(unsigned int *)(v77 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v82 = *(_DWORD *)(v77 + 432);
        if (v81)
        {
          unint64_t v83 = (void *)(*(void *)(v77 + 424) + 8 * *(unsigned int *)(v77 + 432));
          uint64_t v84 = ~v78 + v79;
          do
          {
            *v83++ = v80;
            BOOL v85 = __CFADD__(v84++, 1);
          }
          while (!v85);
          int v82 = *(_DWORD *)(v77 + 432);
        }
        *(_DWORD *)(v77 + 432) = v82 + v81;
      }
      *(void *)(*(void *)(v77 + 424) + 8 * v78) = a4;
      uint64_t v86 = *(void *)(v77 + 8);
      if (v86) {
        (*(void (**)(uint64_t, void))(*(void *)v86 + 24))(v86, v590);
      }
      uint64_t v87 = *(void *)(a1 + 16);
      unsigned int v585 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v87, "", 0);
      unint64_t v88 = v585 & 0x7FFFFFFF;
      *(void *)(*(void *)(v87 + 24) + 16 * v88) = 4;
      unint64_t v89 = *(unsigned int *)(v87 + 432);
      if (v88 >= v89)
      {
        uint64_t v90 = *(void *)(v87 + 440);
        uint64_t v91 = v88 + 1 - v89;
        if (v88 >= *(unsigned int *)(v87 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v92 = *(_DWORD *)(v87 + 432);
        if (v91)
        {
          unint64_t v93 = (void *)(*(void *)(v87 + 424) + 8 * *(unsigned int *)(v87 + 432));
          uint64_t v94 = ~v88 + v89;
          do
          {
            *v93++ = v90;
            BOOL v85 = __CFADD__(v94++, 1);
          }
          while (!v85);
          int v92 = *(_DWORD *)(v87 + 432);
        }
        *(_DWORD *)(v87 + 432) = v92 + v91;
      }
      *(void *)(*(void *)(v87 + 424) + 8 * v88) = a4;
      uint64_t v95 = *(void *)(v87 + 8);
      if (v95) {
        (*(void (**)(uint64_t, void))(*(void *)v95 + 24))(v95, v585);
      }
      uint64_t v96 = *(void *)(a1 + 16);
      int v97 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v96, "", 0);
      unint64_t v98 = v97 & 0x7FFFFFFF;
      *(void *)(*(void *)(v96 + 24) + 16 * v98) = 4;
      unint64_t v99 = *(unsigned int *)(v96 + 432);
      if (v98 >= v99)
      {
        uint64_t v100 = *(void *)(v96 + 440);
        uint64_t v101 = v98 + 1 - v99;
        if (v98 >= *(unsigned int *)(v96 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v102 = *(_DWORD *)(v96 + 432);
        if (v101)
        {
          uint64_t v103 = (void *)(*(void *)(v96 + 424) + 8 * *(unsigned int *)(v96 + 432));
          uint64_t v104 = ~v98 + v99;
          do
          {
            *v103++ = v100;
            BOOL v85 = __CFADD__(v104++, 1);
          }
          while (!v85);
          int v102 = *(_DWORD *)(v96 + 432);
        }
        *(_DWORD *)(v96 + 432) = v102 + v101;
      }
      *(void *)(*(void *)(v96 + 424) + 8 * v98) = a4;
      uint64_t v105 = *(void *)(v96 + 8);
      int v106 = v594;
      if (v105) {
        (*(void (**)(uint64_t))(*(void *)v105 + 24))(v105);
      }
      sub_1CC7271E8(*(void *)a1, *(void *)(a2 + 32), a4, 1u, 118);
      llvm::MachineOperand::setReg(*(void *)(a2 + 32), v585);
      uint64_t v107 = *(void *)(*(void *)a1 + 48);
      if (!v107 || (*(unsigned char *)v107 & 4) == 0)
      {
        while ((*(_WORD *)(v107 + 44) & 8) != 0)
          uint64_t v107 = *(void *)(v107 + 8);
      }
      *(void *)(*(void *)a1 + 48) = *(void *)(v107 + 8);
      if (v594 < 0 && (uint64_t v108 = *(void *)(a1 + 16), (v594 & 0x7FFFFFFFu) < *(_DWORD *)(v108 + 432))) {
        unint64_t v109 = *(void *)(*(void *)(v108 + 424) + 8 * (v594 & 0x7FFFFFFF));
      }
      else {
        unint64_t v109 = 0;
      }
      int v246 = (unsigned __int16)(a4 >> 3);
      int v247 = (unsigned __int16)(a4 >> 19);
      if ((a4 & 2) == 0) {
        int v247 = a4 >> 19;
      }
      if ((a4 & 4) != 0) {
        int v246 = v247;
      }
      if (a4) {
        int v246 = a4 >> 3;
      }
      int v248 = (unsigned __int16)(v109 >> 3);
      int v249 = (unsigned __int16)(v109 >> 19);
      if ((v109 & 2) == 0) {
        int v249 = v109 >> 19;
      }
      if ((v109 & 4) != 0) {
        int v248 = v249;
      }
      if (v109) {
        int v250 = v109 >> 3;
      }
      else {
        int v250 = v248;
      }
      unint64_t v251 = (v246 - v250);
      uint64_t v252 = *(void *)a1;
      LODWORD(v615) = v97;
      DWORD2(v615) = 1;
      if ((v97 & 0x80000000) == 0 || (uint64_t v253 = *(void *)(v252 + 24), (v97 & 0x7FFFFFFFu) >= *(_DWORD *)(v253 + 432)))
      {
        unint64_t v254 = 0;
LABEL_695:
        unint64_t v255 = (unsigned __int16)(v254 >> 3);
        goto LABEL_696;
      }
      unint64_t v254 = *(void *)(*(void *)(v253 + 424) + 8 * (v97 & 0x7FFFFFFF));
      if (v254)
      {
        unint64_t v255 = (v254 >> 3);
        goto LABEL_290;
      }
      if ((v254 & 4) == 0) {
        goto LABEL_695;
      }
      if ((v254 & 2) != 0) {
        unint64_t v255 = (unsigned __int16)(v254 >> 19);
      }
      else {
        unint64_t v255 = (v254 >> 19);
      }
LABEL_696:
      int v106 = v594;
LABEL_290:
      uint64_t v256 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(v252 + 8), (llvm::LLVMContext *)v255);
      int v257 = llvm::ConstantInt::get(v256, v251, (const llvm::APInt *)1);
      (*(void (**)(uint64_t, long long *, void *))(*(void *)v252 + 16))(v252, &v615, v257);
      uint64_t v258 = *(void *)a1;
      LODWORD(v612[0]) = v590;
      LODWORD(v612[1]) = 1;
      LODWORD(v615) = v585;
      LODWORD(v616) = 0;
      LODWORD(v617) = v97;
      int v619 = 0;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v258 + 32))(v258, 128, v612, 1, &v615, 2, 0);
      uint64_t v259 = *(void *)a1;
      LODWORD(v612[0]) = v106;
      LODWORD(v612[1]) = 1;
      LODWORD(v615) = v590;
      LODWORD(v616) = 0;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v259 + 32))(v259, 119, v612, 1, &v615, 1, 0);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a2);
      return 1;
    case 0xD5:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      int v209 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      uint64_t v210 = *(void *)(a1 + 16);
      int v595 = v209;
      if (v209 < 0 && (uint64_t v211 = v209 & 0x7FFFFFFF, v211 < *(_DWORD *)(v210 + 432))) {
        unint64_t v212 = *(void *)(*(void *)(v210 + 424) + 8 * v211);
      }
      else {
        unint64_t v212 = 0;
      }
      if (a4)
      {
        int v575 = a4 >> 3;
      }
      else if ((a4 & 4) != 0)
      {
        if ((a4 & 2) != 0) {
          int v575 = (unsigned __int16)(a4 >> 19);
        }
        else {
          int v575 = a4 >> 19;
        }
      }
      else
      {
        int v575 = (unsigned __int16)(a4 >> 3);
      }
      if (v212)
      {
        int v317 = v212 >> 3;
      }
      else if ((v212 & 4) != 0)
      {
        if ((v212 & 2) != 0) {
          int v317 = (unsigned __int16)(v212 >> 19);
        }
        else {
          int v317 = v212 >> 19;
        }
      }
      else
      {
        int v317 = (unsigned __int16)(v212 >> 3);
      }
      int v572 = v317;
      unsigned int v579 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v210, "", 0);
      unint64_t v318 = v579 & 0x7FFFFFFF;
      *(void *)(*(void *)(v210 + 24) + 16 * v318) = 4;
      unint64_t v319 = *(unsigned int *)(v210 + 432);
      if (v318 >= v319)
      {
        uint64_t v320 = *(void *)(v210 + 440);
        uint64_t v321 = v318 + 1 - v319;
        if (v318 >= *(unsigned int *)(v210 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v322 = *(_DWORD *)(v210 + 432);
        if (v321)
        {
          uint64_t v323 = (void *)(*(void *)(v210 + 424) + 8 * *(unsigned int *)(v210 + 432));
          uint64_t v324 = ~v318 + v319;
          do
          {
            *v323++ = v320;
            BOOL v85 = __CFADD__(v324++, 1);
          }
          while (!v85);
          int v322 = *(_DWORD *)(v210 + 432);
        }
        *(_DWORD *)(v210 + 432) = v322 + v321;
      }
      *(void *)(*(void *)(v210 + 424) + 8 * v318) = a4;
      uint64_t v325 = *(void *)(v210 + 8);
      if (v325) {
        (*(void (**)(uint64_t, void))(*(void *)v325 + 24))(v325, v579);
      }
      sub_1CC7271E8(*(void *)a1, *(void *)(a2 + 32), a4, 1u, 118);
      llvm::MachineOperand::setReg(*(void *)(a2 + 32), v579);
      uint64_t v326 = *(void *)(*(void *)a1 + 48);
      if (v326 && (*(unsigned char *)v326 & 4) != 0)
      {
        int v328 = (llvm::LLVMContext *)(a4 >> 19);
        n = (llvm::LLVMContext *)(unsigned __int16)(a4 >> 3);
      }
      else
      {
        int v328 = (llvm::LLVMContext *)(a4 >> 19);
        for (n = (llvm::LLVMContext *)(unsigned __int16)(a4 >> 3);
              (*(_WORD *)(v326 + 44) & 8) != 0;
      }
      *(void *)(*(void *)a1 + 48) = *(void *)(v326 + 8);
      uint64_t v373 = *(llvm::IntegerType ******)a1;
      *(void *)&long long v615 = a4;
      DWORD2(v615) = 0;
      uint64_t v374 = (llvm::LLVMContext *)(unsigned __int16)(a4 >> 19);
      if ((a4 & 2) == 0) {
        uint64_t v374 = v328;
      }
      if ((a4 & 4) == 0) {
        uint64_t v374 = n;
      }
      if (a4) {
        uint64_t v375 = (llvm::LLVMContext *)(a4 >> 3);
      }
      else {
        uint64_t v375 = v374;
      }
      uint64_t v376 = (llvm::ConstantInt *)llvm::IntegerType::get(***v373[1], v375);
      uint64_t v377 = llvm::ConstantInt::get(v376, (v575 - v572), (const llvm::APInt *)1);
      uint64_t v378 = ((uint64_t (*)(llvm::IntegerType *****, long long *, void *))(*v373)[2])(v373, &v615, v377);
      uint64_t v379 = *(void *)a1;
      v612[0] = (void *)v599;
      LODWORD(v612[1]) = 0;
      LODWORD(v615) = v579;
      LODWORD(v616) = 0;
      uint64_t v617 = v378;
      uint64_t v618 = v380;
      int v619 = 1;
      uint64_t v381 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v379 + 32))(v379, 128, v612, 1, &v615, 2, 0);
      uint64_t v382 = *(void *)a1;
      LODWORD(v612[0]) = v595;
      LODWORD(v612[1]) = 1;
      *(void *)&long long v615 = v381;
      *((void *)&v615 + 1) = v383;
      LODWORD(v616) = 1;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t, void))(*(void *)v382 + 32))(v382, 119, v612, 1, &v615, 1, 0);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a2);
      return 1;
    case 0xFE:
    case 0xFF:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void *)(a2 + 32);
      uint64_t v22 = a4;
      if (a3)
      {
        sub_1CC7271E8(v20, v21, a4, 2u, 126);
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = *(void *)(a2 + 32);
        uint64_t v75 = a4;
        unsigned int v76 = 3;
LABEL_271:
        uint64_t v144 = 126;
LABEL_440:
        sub_1CC7271E8(v20, v21, v75, v76, v144);
      }
      else
      {
LABEL_223:
        unsigned int v23 = 1;
LABEL_7:
        uint64_t v24 = 118;
LABEL_8:
        sub_1CC7271E8(v20, v21, v22, v23, v24);
LABEL_123:
        uint64_t v16 = *(void *)(a2 + 32);
        int v17 = (void *)a1;
        unint64_t v18 = a4;
LABEL_124:
        unsigned int v19 = 119;
LABEL_125:
        sub_1CC7272A4(v17, v16, v18, 0, v19);
      }
LABEL_126:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a2);
      return 1;
    default:
      return v5;
  }
}

uint64_t sub_1CC71FF84(uint64_t a1, uint64_t a2)
{
  uint64_t v451 = *MEMORY[0x1E4F143B8];
  int v2 = **(unsigned __int16 **)(a2 + 16);
  if (v2 != 164)
  {
    uint64_t v25 = 2;
    switch(**(_WORD **)(a2 + 16))
    {
      case 0x3D:
      case 0x3E:
        int v130 = *(_DWORD **)(a2 + 32);
        int v131 = v130[1];
        if (v131 < 0
          && (v132 = *(void *)(a1 + 16), uint64_t v133 = v131 & 0x7FFFFFFF, v133 < *(_DWORD *)(v132 + 432)))
        {
          uint64_t v134 = *(void *)(*(void *)(v132 + 424) + 8 * v133);
        }
        else
        {
          uint64_t v134 = 0;
        }
        uint64_t v135 = *(void *)a1;
        if (v2 == 61) {
          uint64_t v136 = 59;
        }
        else {
          uint64_t v136 = 60;
        }
        *(void *)&long long v440 = v134;
        DWORD2(v440) = 0;
        LODWORD(v444) = v130[9];
        LODWORD(v445) = 0;
        LODWORD(v446) = v130[17];
        int v448 = 0;
        uint64_t v25 = 1;
        uint64_t v137 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v135 + 32))(v135, v136, &v440, 1, &v444, 2, 0);
        uint64_t v138 = *(void *)a1;
        int v139 = *(_DWORD *)(*(void *)(a2 + 32) + 68);
        *(void *)&long long v440 = v134;
        DWORD2(v440) = 0;
        *(void *)&long long v444 = v137;
        *((void *)&v444 + 1) = v140;
        LODWORD(v445) = 1;
        LODWORD(v446) = v139;
        int v448 = 0;
        uint64_t v141 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v138 + 32))(v138, 47, &v440, 1, &v444, 2, 0);
        uint64_t v142 = *(void *)a1;
        uint64_t v143 = *(void *)(a2 + 32);
        int v144 = *(_DWORD *)(v143 + 4);
        LODWORD(v143) = *(_DWORD *)(v143 + 36);
        LODWORD(v440) = v144;
        DWORD2(v440) = 1;
        LODWORD(v444) = v143;
        LODWORD(v445) = 0;
        uint64_t v446 = v141;
        uint64_t v447 = v145;
        int v448 = 1;
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v142 + 32))(v142, 46, &v440, 1, &v444, 2, 0);
        int v146 = (llvm::MachineInstr *)a2;
        goto LABEL_115;
      case 0x3F:
      case 0x40:
        sub_1CD6225E0((uint64_t *)a1, a2);
        return 1;
      case 0x49:
        return sub_1CD61FFA4((uint64_t *)a1, (llvm::MachineInstr *)a2);
      case 0x4A:
        return sub_1CC729194((llvm::IntegerType ******)a1, a2);
      case 0x4B:
        return sub_1CC7296C0((uint64_t *)a1, (llvm::MachineInstr *)a2);
      case 0x4C:
        return sub_1CC728C54((llvm::IntegerType ******)a1, a2);
      case 0x52:
        return sub_1CD61B9C4((uint64_t *)a1, (llvm::MachineInstr *)a2);
      case 0x56:
        sub_1CD61D664((uint64_t *)a1, a2);
        return 1;
      case 0x58:
        uint64_t v127 = a2;
        uint64_t v92 = a1;
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
        uint64_t v128 = *(void *)(*(void *)(*(void *)a1 + 16) + 8);
        uint64_t v129 = 10512;
LABEL_107:
        *(void *)(v127 + 16) = v128 + v129;
        (*(void (**)(void, uint64_t))(**(void **)(v92 + 8) + 40))(*(void *)(v92 + 8), v127);
        return 1;
      case 0x5A:
      case 0x5B:
      case 0x5C:
        return sub_1CD61BCCC((uint64_t *)a1, a2);
      case 0x60:
        return sub_1CD61C5A0((uint64_t *)a1, a2);
      case 0x62:
        uint64_t v245 = *(_DWORD **)(a2 + 32);
        int v246 = v245[1];
        int v247 = v245[9];
        int v248 = v245[17];
        int v249 = v245[25];
        int v250 = v245[33];
        uint64_t v251 = *(void *)a1;
        uint64_t v252 = *(void *)(a2 + 48);
        if ((v252 & 7) != 0)
        {
          uint64_t v253 = *(llvm::MachineMemOperand **)((v252 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          uint64_t v253 = (llvm::MachineMemOperand *)(v252 & 0xFFFFFFFFFFFFFFF8);
          *(void *)(a2 + 48) = v252 & 0xFFFFFFFFFFFFFFF8;
        }
        sub_1CD62E0C8(v251, v246, v248, v249, v250, v253);
        uint64_t v254 = *(void *)a1;
        uint64_t v25 = 1;
        LODWORD(v436) = v247;
        DWORD2(v436) = 1;
        LODWORD(v444) = v246;
        LODWORD(v445) = 0;
        LODWORD(v440) = v249;
        LODWORD(v441) = 0;
        sub_1CC73933C(v254, 32, (uint64_t)&v436, &v444, &v440);
        int v146 = (llvm::MachineInstr *)a2;
LABEL_115:
        llvm::MachineInstr::eraseFromParent(v146);
        return v25;
      case 0x7D:
        uint64_t v42 = *(void *)(a2 + 32);
        int v43 = *(_DWORD *)(v42 + 4);
        uint64_t v44 = *(void *)(a1 + 16);
        if (v43 < 0 && (v43 & 0x7FFFFFFFu) < *(_DWORD *)(v44 + 432)) {
          unint64_t v45 = *(void *)(*(void *)(v44 + 424) + 8 * (v43 & 0x7FFFFFFF));
        }
        else {
          unint64_t v45 = 0;
        }
        uint64_t v421 = *(void *)(v42 + 80);
        int v425 = *(_DWORD *)(v42 + 36);
        unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v44, "", 0);
        unint64_t v47 = IncompleteVirtualRegister & 0x7FFFFFFF;
        *(void *)(*(void *)(v44 + 24) + 16 * v47) = 4;
        unint64_t v48 = *(unsigned int *)(v44 + 432);
        if (v47 >= v48)
        {
          uint64_t v49 = *(void *)(v44 + 440);
          uint64_t v50 = v47 + 1 - v48;
          if (v47 >= *(unsigned int *)(v44 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v51 = *(_DWORD *)(v44 + 432);
          if (v50)
          {
            uint64_t v52 = (void *)(*(void *)(v44 + 424) + 8 * *(unsigned int *)(v44 + 432));
            uint64_t v53 = ~v47 + v48;
            do
            {
              *v52++ = v49;
              BOOL v17 = __CFADD__(v53++, 1);
            }
            while (!v17);
            int v51 = *(_DWORD *)(v44 + 432);
          }
          *(_DWORD *)(v44 + 432) = v51 + v50;
        }
        *(void *)(*(void *)(v44 + 424) + 8 * v47) = v45;
        uint64_t v54 = *(void *)(v44 + 8);
        if (v54) {
          (*(void (**)(uint64_t, void))(*(void *)v54 + 24))(v54, IncompleteVirtualRegister);
        }
        unint64_t v55 = *(void *****)a1;
        *(void *)&long long v444 = v45;
        DWORD2(v444) = 0;
        if (v45)
        {
          unint64_t v56 = (v45 >> 3);
          uint64_t v57 = (llvm::IntegerType *)***v55[1];
          unint64_t v58 = v56;
        }
        else
        {
          unint64_t v287 = (unsigned __int16)(v45 >> 19);
          if ((v45 & 2) != 0) {
            unint64_t v56 = (unsigned __int16)(v45 >> 19);
          }
          else {
            unint64_t v56 = (v45 >> 19);
          }
          if ((v45 & 4) == 0) {
            unint64_t v56 = (unsigned __int16)(v45 >> 3);
          }
          uint64_t v57 = (llvm::IntegerType *)***v55[1];
          if ((v45 & 2) == 0) {
            unint64_t v287 = (v45 >> 19);
          }
          if ((v45 & 4) != 0) {
            unint64_t v58 = v287;
          }
          else {
            unint64_t v58 = (unsigned __int16)(v45 >> 3);
          }
        }
        unint64_t v59 = v56 - v421;
        uint64_t v60 = (llvm::ConstantInt *)llvm::IntegerType::get(v57, (llvm::LLVMContext *)v58);
        uint64_t v20 = 1;
        uint64_t v61 = llvm::ConstantInt::get(v60, v59, (const llvm::APInt *)1);
        ((void (*)(void ****, long long *, void *))(*v55)[2])(v55, &v444, v61);
        uint64_t v63 = v62;
        uint64_t v64 = *(void *)a1;
        int v65 = *(_DWORD *)(*(void *)(v62 + 32) + 4);
        LODWORD(v440) = IncompleteVirtualRegister;
        DWORD2(v440) = 1;
        LODWORD(v444) = v425;
        LODWORD(v445) = 0;
        LODWORD(v446) = v65;
        int v448 = 0;
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v64 + 32))(v64, 127, &v440, 1, &v444, 2, 0);
        uint64_t v66 = *(void *)a1;
        int v67 = *(_DWORD *)(*(void *)(v63 + 32) + 4);
        LODWORD(v440) = v43;
        DWORD2(v440) = 1;
        LODWORD(v444) = IncompleteVirtualRegister;
        LODWORD(v445) = 0;
        LODWORD(v446) = v67;
        int v448 = 0;
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v66 + 32))(v66, 129, &v440, 1, &v444, 2, 0);
        goto LABEL_32;
      case 0x82:
      case 0x83:
        sub_1CD622734((uint64_t *)a1, a2);
        return 1;
      case 0x84:
      case 0x85:
        sub_1CD62284C((uint64_t *)a1, a2);
        return 1;
      case 0x88:
        return sub_1CD62205C((uint64_t **)a1, (llvm::MachineInstr *)a2);
      case 0x89:
        uint64_t v217 = (llvm::MachineInstr *)a2;
        uint64_t v240 = *(_DWORD **)(a2 + 32);
        int v242 = v240[9];
        int v243 = v240[17];
        int v221 = v240[25];
        uint64_t v244 = *(void *)a1;
        LODWORD(v440) = v240[1];
        int v241 = v440;
        DWORD2(v440) = 1;
        LODWORD(v444) = v243;
        LODWORD(v445) = 0;
        LODWORD(v446) = v221;
        int v448 = 0;
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v244 + 32))(v244, 45, &v440, 1, &v444, 2, 0);
        uint64_t v223 = *(void *)a1;
        LODWORD(v436) = v242;
        DWORD2(v436) = 1;
        LODWORD(v444) = v241;
        goto LABEL_187;
      case 0x8A:
        uint64_t v224 = *(_DWORD **)(a2 + 32);
        int v225 = v224[1];
        int v226 = v224[9];
        int v227 = v224[17];
        int v228 = v224[25];
        int v229 = v224[33];
        if (v225 < 0 && (uint64_t v260 = *(void *)(a1 + 16), (v225 & 0x7FFFFFFFu) < *(_DWORD *)(v260 + 432))) {
          uint64_t v230 = *(void *)(*(void *)(v260 + 424) + 8 * (v225 & 0x7FFFFFFF));
        }
        else {
          uint64_t v230 = 0;
        }
        uint64_t v231 = *(void *)a1;
        *(void *)&long long v440 = v230;
        DWORD2(v440) = 0;
        LODWORD(v444) = v227;
        LODWORD(v445) = 0;
        LODWORD(v446) = v228;
        int v448 = 0;
        uint64_t v232 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v231 + 32))(v231, 45, &v440, 1, &v444, 2, 0);
        uint64_t v234 = v233;
        uint64_t v235 = *(void *)a1;
        *(void *)&long long v440 = v230;
        DWORD2(v440) = 0;
        LODWORD(v444) = v229;
        LODWORD(v445) = 0;
        uint64_t v236 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v235 + 32))(v235, 126, &v440, 1, &v444, 1, 0);
        uint64_t v237 = *(void *)a1;
        LODWORD(v440) = v225;
        DWORD2(v440) = 1;
        *(void *)&long long v444 = v232;
        *((void *)&v444 + 1) = v234;
        LODWORD(v445) = 1;
        uint64_t v446 = v236;
        uint64_t v447 = v238;
        int v448 = 1;
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v237 + 32))(v237, 45, &v440, 1, &v444, 2, 0);
        uint64_t v239 = *(void *)a1;
        LODWORD(v436) = v226;
        DWORD2(v436) = 1;
        LODWORD(v444) = v225;
        LODWORD(v445) = 0;
        LODWORD(v440) = v227;
        LODWORD(v441) = 0;
        sub_1CC73933C(v239, 36, (uint64_t)&v436, &v444, &v440);
        goto LABEL_185;
      case 0x8B:
        uint64_t v217 = (llvm::MachineInstr *)a2;
        int v218 = *(_DWORD **)(a2 + 32);
        int v219 = v218[9];
        int v220 = v218[17];
        int v221 = v218[25];
        uint64_t v222 = *(void *)a1;
        LODWORD(v440) = v218[1];
        DWORD2(v440) = 1;
        LODWORD(v444) = v220;
        LODWORD(v445) = 0;
        LODWORD(v446) = v221;
        int v448 = 0;
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v222 + 32))(v222, 46, &v440, 1, &v444, 2, 0);
        uint64_t v223 = *(void *)a1;
        LODWORD(v436) = v219;
        DWORD2(v436) = 1;
        LODWORD(v444) = v220;
LABEL_187:
        LODWORD(v445) = 0;
        LODWORD(v440) = v221;
        LODWORD(v441) = 0;
        sub_1CC73933C(v223, 36, (uint64_t)&v436, &v444, &v440);
        llvm::MachineInstr::eraseFromParent(v217);
        return 1;
      case 0x8C:
        uint64_t v193 = *(_DWORD **)(a2 + 32);
        int v194 = v193[1];
        uint64_t v195 = *(void *)(a1 + 16);
        int v428 = v193[9];
        if (v428 < 0 && (uint64_t v259 = v428 & 0x7FFFFFFF, v259 < *(_DWORD *)(v195 + 432))) {
          uint64_t v196 = *(void *)(*(void *)(v195 + 424) + 8 * v259);
        }
        else {
          uint64_t v196 = 0;
        }
        int v197 = v193[17];
        int v198 = v193[25];
        int v199 = v193[33];
        if (v194 < 0 && (v194 & 0x7FFFFFFFu) < *(_DWORD *)(v195 + 432)) {
          uint64_t v200 = *(void *)(*(void *)(v195 + 424) + 8 * (v194 & 0x7FFFFFFF));
        }
        else {
          uint64_t v200 = 0;
        }
        uint64_t v201 = *(void *)a1;
        *(void *)&long long v440 = v200;
        DWORD2(v440) = 0;
        LODWORD(v444) = v197;
        LODWORD(v445) = 0;
        LODWORD(v446) = v198;
        int v448 = 0;
        uint64_t v202 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v201 + 32))(v201, 46, &v440, 1, &v444, 2, 0);
        uint64_t v204 = v203;
        uint64_t v205 = *(void *)a1;
        *(void *)&long long v440 = v200;
        DWORD2(v440) = 0;
        LODWORD(v444) = v199;
        LODWORD(v445) = 0;
        uint64_t v206 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v205 + 32))(v205, 126, &v440, 1, &v444, 1, 0);
        uint64_t v207 = *(void *)a1;
        LODWORD(v440) = v194;
        DWORD2(v440) = 1;
        *(void *)&long long v444 = v202;
        *((void *)&v444 + 1) = v204;
        LODWORD(v445) = 1;
        uint64_t v446 = v206;
        uint64_t v447 = v208;
        int v448 = 1;
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v207 + 32))(v207, 46, &v440, 1, &v444, 2, 0);
        uint64_t v209 = *(void *)a1;
        *(void *)&long long v436 = v196;
        DWORD2(v436) = 0;
        LODWORD(v444) = v197;
        LODWORD(v445) = 0;
        LODWORD(v440) = v198;
        LODWORD(v441) = 0;
        uint64_t v210 = sub_1CC73933C(v209, 32, (uint64_t)&v436, &v444, &v440);
        uint64_t v212 = v211;
        uint64_t v213 = *(void *)a1;
        *(void *)&long long v436 = v196;
        DWORD2(v436) = 0;
        LODWORD(v444) = v197;
        LODWORD(v445) = 0;
        LODWORD(v440) = v198;
        LODWORD(v441) = 0;
        uint64_t v214 = sub_1CC73933C(v213, 36, (uint64_t)&v436, &v444, &v440);
        uint64_t v215 = *(void *)a1;
        LODWORD(v438) = v428;
        LODWORD(v439) = 1;
        *(void *)&long long v444 = v210;
        *((void *)&v444 + 1) = v212;
        LODWORD(v445) = 1;
        LODWORD(v440) = v199;
        LODWORD(v441) = 0;
        *(void *)&long long v436 = v214;
        *((void *)&v436 + 1) = v216;
        int v437 = 1;
        sub_1CC739494(v215, (uint64_t *)&v438, &v444, &v440, &v436, 0);
LABEL_185:
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
        return 1;
      case 0x8D:
      case 0x8F:
        sub_1CD61CC48((uint64_t *)a1, a2);
        return 1;
      case 0x91:
      case 0x92:
        uint64_t v167 = *(_DWORD **)(a2 + 32);
        int v168 = v167[1];
        int v169 = v167[17];
        int v170 = v167[25];
        if (v168 < 0 && (uint64_t v258 = *(void *)(a1 + 16), (v168 & 0x7FFFFFFFu) < *(_DWORD *)(v258 + 432))) {
          uint64_t v171 = *(void *)(*(void *)(v258 + 424) + 8 * (v168 & 0x7FFFFFFF));
        }
        else {
          uint64_t v171 = 0;
        }
        int v172 = v167[9];
        unint64_t v438 = v171;
        if (v2 == 146) {
          uint64_t v173 = 148;
        }
        else {
          uint64_t v173 = 147;
        }
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
        *(void *)(a2 + 16) = *(void *)(*(void *)(*(void *)a1 + 16) + 8) + 2256;
        llvm::MachineInstr::removeOperand((char *)a2, 1u);
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a2);
        uint64_t v175 = *(void *)a1;
        *(void *)&long long v440 = v171;
        DWORD2(v440) = 0;
        LODWORD(v444) = v169;
        LODWORD(v445) = 0;
        LODWORD(v446) = v170;
        int v448 = 0;
        uint64_t v176 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v175 + 32))(v175, v173, &v440, 1, &v444, 2, 0);
        uint64_t v178 = v177;
        uint64_t v179 = *(void *)a1;
        *(void *)&long long v444 = v171;
        DWORD2(v444) = 0;
        uint64_t v180 = sub_1CC7362A8(v179, (unint64_t *)&v444, 0);
        uint64_t v182 = *(void *)(*(void *)a1 + 48);
        if (!v182 || (*(unsigned char *)v182 & 4) == 0)
        {
          while ((*(_WORD *)(v182 + 44) & 8) != 0)
            uint64_t v182 = *(void *)(v182 + 8);
        }
        *(void *)(*(void *)a1 + 48) = *(void *)(v182 + 8);
        uint64_t v183 = *(void *)a1;
        if (v2 == 146)
        {
          *(void *)&long long v444 = v171;
          DWORD2(v444) = 0;
          uint64_t v185 = sub_1CB8F1DC4(&v438);
          if (v184 == 1) {
          uint64_t v186 = sub_1CC7362A8(v183, (unint64_t *)&v444, v185 - 1);
          }
          uint64_t v187 = *(void *)a1;
          *(void *)&long long v440 = v438;
          DWORD2(v440) = 0;
          LODWORD(v444) = v168;
          LODWORD(v445) = 0;
          uint64_t v446 = v186;
          uint64_t v447 = v188;
          int v448 = 1;
          uint64_t v189 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v187 + 32))(v187, 129, &v440, 1, &v444, 2, 0);
          uint64_t v190 = *(void *)a1;
          LODWORD(v436) = v172;
          DWORD2(v436) = 1;
          *(void *)&long long v444 = v176;
          *((void *)&v444 + 1) = v178;
          LODWORD(v445) = 1;
          *(void *)&long long v440 = v189;
          *((void *)&v440 + 1) = v191;
          LODWORD(v441) = 1;
          uint64_t v192 = v190;
        }
        else
        {
          LODWORD(v436) = v172;
          DWORD2(v436) = 1;
          *(void *)&long long v444 = v176;
          *((void *)&v444 + 1) = v178;
          LODWORD(v445) = 1;
          *(void *)&long long v440 = v180;
          *((void *)&v440 + 1) = v181;
          LODWORD(v441) = 1;
          uint64_t v192 = v183;
        }
        sub_1CC73933C(v192, 33, (uint64_t)&v436, &v444, &v440);
        return 1;
      case 0x93:
      case 0x94:
        sub_1CD61CEDC((uint64_t *)a1, a2);
        return 1;
      case 0x95:
      case 0x97:
        int v147 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
        if (v147 < 0
          && (uint64_t v148 = *(void *)(a1 + 16), v149 = v147 & 0x7FFFFFFF, v149 < *(_DWORD *)(v148 + 432)))
        {
          uint64_t v150 = *(void *)(*(void *)(v148 + 424) + 8 * v149);
        }
        else
        {
          uint64_t v150 = 0;
        }
        *(void *)&long long v440 = v150;
        uint64_t v151 = *(void *)(a1 + 24);
        LODWORD(v444) = 197;
        *((void *)&v444 + 1) = &v440;
        uint64_t v445 = 1;
        uint64_t v446 = 0;
        uint64_t v447 = 0;
        int v152 = &v444;
        goto LABEL_121;
      case 0x96:
      case 0x98:
        int v163 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
        if (v163 < 0
          && (uint64_t v164 = *(void *)(a1 + 16), v165 = v163 & 0x7FFFFFFF, v165 < *(_DWORD *)(v164 + 432)))
        {
          uint64_t v166 = *(void *)(*(void *)(v164 + 424) + 8 * v165);
        }
        else
        {
          uint64_t v166 = 0;
        }
        *(void *)&long long v436 = v166;
        uint64_t v255 = *(void *)(a1 + 24);
        LODWORD(v444) = 195;
        *((void *)&v444 + 1) = &v436;
        uint64_t v445 = 1;
        uint64_t v446 = 0;
        uint64_t v447 = 0;
        if ((sub_1CC72D410(v255, (uint64_t)&v444) & 0xF7) != 0) {
          goto LABEL_122;
        }
        uint64_t v151 = *(void *)(a1 + 24);
        LODWORD(v440) = 196;
        *((void *)&v440 + 1) = &v436;
        uint64_t v441 = 1;
        uint64_t v442 = 0;
        uint64_t v443 = 0;
        int v152 = &v440;
LABEL_121:
        if ((sub_1CC72D410(v151, (uint64_t)v152) & 0xF7) != 0) {
LABEL_122:
        }
          sub_1CD6215F0((uint64_t *)a1, a2);
        else {
          sub_1CD620ED4(a1, a2);
        }
        return 1;
      case 0x99:
      case 0x9A:
        sub_1CD62199C((llvm::ConstantInt ******)a1, a2);
        return 1;
      case 0xA7:
        sub_1CD61D1F8((uint64_t *)a1, a2);
        return 1;
      case 0xAB:
        sub_1CD61EE48((uint64_t *)a1, a2);
        return 1;
      case 0xB1:
        int v153 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
        if (v153 < 0 && (uint64_t v256 = *(void *)(a1 + 16), (v153 & 0x7FFFFFFFu) < *(_DWORD *)(v256 + 432)))
        {
          uint64_t v154 = *(void *)(*(void *)(v256 + 424) + 8 * (v153 & 0x7FFFFFFF));
          *(void *)&long long v436 = v154;
          if ((v154 & 0xFFFFFFFFFFFFFFF9) != 0 && (v154 & 4) != 0) {
            return 2;
          }
        }
        else
        {
          uint64_t v154 = 0;
          *(void *)&long long v436 = 0;
        }
        uint64_t v155 = *(llvm::ConstantInt ******)a1;
        *(void *)&long long v444 = v154;
        DWORD2(v444) = 0;
        uint64_t v157 = sub_1CB8F1DC4((unint64_t *)&v436);
        if (v156 == 1) {
        sub_1CBA62420(v157, (llvm::APInt *)&v440);
        }
        uint64_t v158 = sub_1CC737454(v155, (uint64_t)&v444, (llvm::LLVMContext *)&v440);
        uint64_t v160 = v159;
        if (DWORD2(v440) >= 0x41 && (void)v440) {
          MEMORY[0x1D25D9CB0](v440, 0x1000C8000313F17);
        }
        uint64_t v22 = (llvm::MachineInstr *)a2;
        int v161 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
        uint64_t v162 = *(void *)a1;
        uint64_t v20 = 1;
        LODWORD(v440) = v153;
        DWORD2(v440) = 1;
        LODWORD(v444) = v161;
        LODWORD(v445) = 0;
        uint64_t v446 = v158;
        uint64_t v447 = v160;
        int v448 = 1;
        unsigned int v23 = *(void (**)(void))(*(void *)v162 + 32);
        goto LABEL_17;
      case 0xB3:
        return sub_1CD61ED64((uint64_t *)a1, (llvm::MachineInstr *)a2);
      case 0xB4:
        return sub_1CD61E3CC((uint64_t *)a1, (llvm::MachineInstr *)a2);
      case 0xB5:
        return sub_1CD61DF5C((llvm::ConstantFP ******)a1, (llvm::MachineInstr *)a2);
      case 0xB6:
        return sub_1CD61DB68((uint64_t *)a1, (llvm::MachineInstr *)a2);
      case 0xB7:
        return sub_1CD61DA18((uint64_t *)a1, (llvm::MachineInstr *)a2);
      case 0xB9:
        sub_1CD61EFA4(a1, a2);
        return 1;
      case 0xBB:
      case 0xBC:
        sub_1CD61F4DC((uint64_t *)a1, a2);
        return 1;
      case 0xC3:
      case 0xC4:
      case 0xC5:
      case 0xC6:
        uint64_t v27 = *(_DWORD **)(a2 + 32);
        int v28 = v27[1];
        int v29 = v27[9];
        int v30 = v27[17];
        if (v28 < 0 && (uint64_t v31 = *(void *)(a1 + 16), (v28 & 0x7FFFFFFFu) < *(_DWORD *)(v31 + 432)))
        {
          uint64_t v32 = *(void *)(*(void *)(v31 + 424) + 8 * (v28 & 0x7FFFFFFF));
          unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFF9;
          uint64_t v34 = v32 & 4;
          uint64_t v35 = 0x800000000000000;
          if ((v32 & 2) == 0) {
            uint64_t v35 = 0x8000000000000;
          }
          unint64_t v36 = v32 & 0x7FFF8 | ((unint64_t)((v35 & v32) != 0) << 51) | 0x80004;
          if (v33) {
            BOOL v37 = v34 == 0;
          }
          else {
            BOOL v37 = 1;
          }
          if (v37) {
            unint64_t v36 = 9;
          }
        }
        else
        {
          unint64_t v36 = 9;
        }
        uint64_t v38 = *(void *)a1;
        *(void *)&long long v440 = v36;
        DWORD2(v440) = 0;
        LODWORD(v444) = 40 - 2 * (unsigned __int16)(v2 - 195);
        LODWORD(v445) = 2;
        LODWORD(v446) = v29;
        int v448 = 0;
        int v449 = v30;
        int v450 = 0;
        uint64_t v20 = 1;
        uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v38 + 32))(v38, 134, &v440, 1, &v444, 3, 0);
        uint64_t v40 = *(void *)a1;
        LODWORD(v440) = v28;
        DWORD2(v440) = 1;
        *(void *)&long long v444 = v39;
        *((void *)&v444 + 1) = v41;
        LODWORD(v445) = 1;
        LODWORD(v446) = v29;
        int v448 = 0;
        int v449 = v30;
        int v450 = 0;
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v40 + 32))(v40, 136, &v440, 1, &v444, 3, 0);
LABEL_32:
        uint64_t v24 = (llvm::MachineInstr *)a2;
        goto LABEL_18;
      case 0xC7:
        sub_1CD621E40((uint64_t *)a1, (llvm::MachineInstr *)a2);
        return 1;
      case 0xCC:
      case 0xCD:
        return sub_1CD61F6E4((uint64_t *)a1, a2);
      case 0xCE:
        uint64_t v68 = *(void *)(a2 + 32);
        int v69 = *(_DWORD *)(v68 + 4);
        uint64_t v70 = *(unsigned int *)(v68 + 36);
        uint64_t v71 = *(void *)(a1 + 16);
        if ((v70 & 0x80000000) != 0 && (v70 & 0x7FFFFFFF) < *(_DWORD *)(v71 + 432)) {
          uint64_t v426 = *(void *)(*(void *)(v71 + 424) + 8 * (v70 & 0x7FFFFFFF));
        }
        else {
          uint64_t v426 = 0;
        }
        if (v69 < 0 && (v69 & 0x7FFFFFFFu) < *(_DWORD *)(v71 + 432)) {
          unint64_t v72 = *(void *)(*(void *)(v71 + 424) + 8 * (v69 & 0x7FFFFFFF));
        }
        else {
          unint64_t v72 = 0;
        }
        int v422 = *(_DWORD *)(v68 + 68);
        uint64_t v74 = *(unsigned int **)(v68 + 112);
        uint64_t v73 = *(void *)(v68 + 120);
        *(void *)&long long v440 = &v441;
        *((void *)&v440 + 1) = 0x2000000000;
        uint64_t v75 = (v72 >> 2) & 1;
        if ((v72 & 0xFFFFFFFFFFFFFFF9) == 0) {
          LODWORD(v75) = 0;
        }
        int v419 = v69;
        if v75 != 1 || (v72)
        {
          int v261 = v70;
          unint64_t v418 = v72;
          if (v75)
          {
            char v262 = 3;
            if ((v72 & 1) == 0) {
              char v262 = 19;
            }
            unint64_t v263 = v72 >> v262;
            if ((v72 & 2) != 0) {
              unint64_t v264 = (v72 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v263) | 2;
            }
            else {
              unint64_t v264 = v72 & 0x8000000000000000 | (8 * v263) | 1;
            }
            unint64_t v418 = v264;
          }
          if (v73)
          {
            unsigned int v77 = 0;
            int v416 = 0;
            uint64_t v265 = 0x800000000000000;
            if ((v426 & 2) == 0) {
              uint64_t v265 = 0x8000000000000;
            }
            uint64_t v266 = v265 & v426;
            unsigned int v267 = (unsigned __int16)(v426 >> 3);
            uint64_t v268 = 4 * v73;
            do
            {
              unsigned int v269 = *v74;
              if ((*v74 & 0x80000000) != 0)
              {
                if (!v416)
                {
                  uint64_t v279 = *(void *)a1;
                  *(void *)&long long v444 = v418;
                  DWORD2(v444) = 0;
                  (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void, void, void))(*(void *)v279 + 32))(v279, 68, &v444, 1, 0, 0, 0);
                  int v416 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
                  unsigned int v77 = DWORD2(v440);
                }
                unsigned int v278 = HIDWORD(v440);
                int v277 = v416;
              }
              else
              {
                if (v426)
                {
                  if (v269) {
                    int v277 = v422;
                  }
                  else {
                    int v277 = v261;
                  }
                }
                else
                {
                  if (v266) {
                    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
                  }
                  if (v269 >= v267) {
                    int v270 = v422;
                  }
                  else {
                    int v270 = v261;
                  }
                  if (v269 >= v267) {
                    int v271 = (unsigned __int16)(v426 >> 3);
                  }
                  else {
                    int v271 = 0;
                  }
                  uint64_t v272 = *(void ******)a1;
                  *(void *)&long long v444 = 257;
                  DWORD2(v444) = 0;
                  uint64_t v273 = llvm::ConstantInt::get((llvm::ConstantInt *)(****v272[1] + 1960), (int)(v269 - v271), (const llvm::APInt *)1);
                  uint64_t v274 = ((uint64_t (*)(void *****, long long *, void *))(*v272)[2])(v272, &v444, v273);
                  uint64_t v275 = *(void *)a1;
                  *(void *)&long long v436 = v418;
                  DWORD2(v436) = 0;
                  LODWORD(v444) = v270;
                  LODWORD(v445) = 0;
                  uint64_t v446 = v274;
                  uint64_t v447 = v276;
                  int v448 = 1;
                  (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v275 + 32))(v275, 205, &v436, 1, &v444, 2, 0);
                  int v277 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
                  unsigned int v77 = DWORD2(v440);
                }
                unsigned int v278 = HIDWORD(v440);
              }
              if (v77 >= v278) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(_DWORD *)(v440 + 4 * v77) = v277;
              unsigned int v77 = ++DWORD2(v440);
              ++v74;
              v268 -= 4;
            }
            while (v268);
LABEL_298:
            uint64_t v280 = *(void *)a1;
            if (v72)
            {
              LODWORD(v436) = v419;
              DWORD2(v436) = 1;
              LODWORD(v444) = *(_DWORD *)v440;
              LODWORD(v445) = 0;
              (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v280 + 32))(v280, 19, &v436, 1, &v444, 1, 0);
            }
            else
            {
              LODWORD(v436) = v419;
              DWORD2(v436) = 1;
              unint64_t v281 = (int *)v440;
              *(void *)&long long v444 = &v445;
              *((void *)&v444 + 1) = 0x800000000;
              if (v77 >= 9) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v77)
              {
                uint64_t v282 = 0;
                uint64_t v283 = 4 * v77;
                do
                {
                  int v284 = *v281++;
                  uint64_t v285 = (_DWORD *)((char *)&v445 + v282);
                  *uint64_t v285 = v284;
                  v285[4] = 0;
                  v282 += 24;
                  v283 -= 4;
                }
                while (v283);
                int v286 = DWORD2(v444);
              }
              else
              {
                int v286 = 0;
              }
              DWORD2(v444) = v286 + v77;
              (*(void (**)(uint64_t, uint64_t, long long *, uint64_t))(*(void *)v280 + 32))(v280, 77, &v436, 1);
              if ((uint64_t *)v444 != &v445) {
                free((void *)v444);
              }
            }
            llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
            if ((uint64_t *)v440 != &v441) {
              free((void *)v440);
            }
            return 1;
          }
        }
        else
        {
          if ((v72 & 2) != 0) {
            unint64_t v76 = (v72 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)(v72 >> 19)) | 2;
          }
          else {
            unint64_t v76 = v72 & 0x8000000000000000 | (8 * (v72 >> 19)) | 1;
          }
          if (v73)
          {
            unsigned int v77 = 0;
            int v417 = 0;
            uint64_t v78 = 0x800000000000000;
            if ((v426 & 2) == 0) {
              uint64_t v78 = 0x8000000000000;
            }
            uint64_t v79 = v78 & v426;
            uint64_t v80 = 4 * v73;
            do
            {
              unsigned int v81 = *v74;
              if ((*v74 & 0x80000000) != 0)
              {
                int v89 = v417;
                if (!v417)
                {
                  uint64_t v91 = *(void *)a1;
                  *(void *)&long long v444 = v76;
                  DWORD2(v444) = 0;
                  (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void, void, void))(*(void *)v91 + 32))(v91, 68, &v444, 1, 0, 0, 0);
                  int v89 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
                  unsigned int v77 = DWORD2(v440);
                }
                unsigned int v90 = HIDWORD(v440);
                int v417 = v89;
              }
              else
              {
                if (v426)
                {
                  if (v81) {
                    int v89 = v422;
                  }
                  else {
                    int v89 = v70;
                  }
                }
                else
                {
                  if (v79) {
                    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
                  }
                  uint64_t v82 = v70;
                  if (v81 < (unsigned __int16)(v426 >> 3))
                  {
                    int v83 = 0;
                  }
                  else
                  {
                    LODWORD(v70) = v422;
                    int v83 = (unsigned __int16)(v426 >> 3);
                  }
                  uint64_t v84 = *(void ******)a1;
                  *(void *)&long long v444 = 257;
                  DWORD2(v444) = 0;
                  BOOL v85 = llvm::ConstantInt::get((llvm::ConstantInt *)(****v84[1] + 1960), (int)(v81 - v83), (const llvm::APInt *)1);
                  uint64_t v86 = ((uint64_t (*)(void *****, long long *, void *))(*v84)[2])(v84, &v444, v85);
                  uint64_t v87 = *(void *)a1;
                  *(void *)&long long v436 = v76;
                  DWORD2(v436) = 0;
                  LODWORD(v444) = v70;
                  uint64_t v70 = v82;
                  LODWORD(v445) = 0;
                  uint64_t v446 = v86;
                  uint64_t v447 = v88;
                  int v448 = 1;
                  (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v87 + 32))(v87, 205, &v436, 1, &v444, 2, 0);
                  int v89 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
                  unsigned int v77 = DWORD2(v440);
                }
                unsigned int v90 = HIDWORD(v440);
              }
              if (v77 >= v90) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(_DWORD *)(v440 + 4 * v77) = v89;
              unsigned int v77 = ++DWORD2(v440);
              ++v74;
              v80 -= 4;
            }
            while (v80);
            goto LABEL_298;
          }
        }
        unsigned int v77 = 0;
        goto LABEL_298;
      case 0xCF:
      case 0xD0:
      case 0xD1:
      case 0xD2:
      case 0xD3:
        uint64_t v92 = a1;
        uint64_t v93 = *(void *)(*(void *)a1 + 16);
        switch(**(_WORD **)(a2 + 16))
        {
          case 0xCF:
            uint64_t v94 = *(void *)(a2 + 32);
            int v95 = *(_DWORD *)(v94 + 4);
            int v96 = *(_DWORD *)(v94 + 36);
            uint64_t v97 = *(void *)(a1 + 16);
            if (v95 < 0 && (v95 & 0x7FFFFFFFu) < *(_DWORD *)(v97 + 432)) {
              uint64_t v98 = *(void *)(*(void *)(v97 + 424) + 8 * (v95 & 0x7FFFFFFF));
            }
            else {
              uint64_t v98 = 0;
            }
            if (v96 < 0 && (v96 & 0x7FFFFFFFu) < *(_DWORD *)(v97 + 432)) {
              unint64_t v99 = *(void *)(*(void *)(v97 + 424) + 8 * (v96 & 0x7FFFFFFF));
            }
            else {
              unint64_t v99 = 0;
            }
            unint64_t v433 = v99;
            unsigned int v423 = sub_1CB8F1DC4(&v433);
            if (v100 == 1) {
            *(void *)&long long v440 = v98;
            }
            *((void *)&v440 + 1) = v433;
            LODWORD(v444) = 208;
            *((void *)&v444 + 1) = &v440;
            uint64_t v445 = 2;
            uint64_t v446 = 0;
            uint64_t v447 = 0;
            unsigned int v101 = sub_1CC72D410(*(void *)(a1 + 24), (uint64_t)&v444);
            if (v101 <= 8 && ((1 << v101) & 0x181) != 0)
            {
              uint64_t v400 = *(void *)a1;
              *(void *)&long long v440 = v98;
              DWORD2(v440) = 0;
              LODWORD(v444) = v96;
              LODWORD(v445) = 0;
              uint64_t v401 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v400 + 32))(v400, 208, &v440, 1, &v444, 1, 0);
              uint64_t v403 = v402;
              uint64_t v404 = *(void *)a1;
              *(void *)&long long v444 = v433;
              DWORD2(v444) = 0;
              uint64_t v406 = sub_1CC7362A8(v404, (unint64_t *)&v444, 0);
              uint64_t v407 = *(void *)a1;
              unint64_t v408 = 9;
              if ((v98 & 0xFFFFFFFFFFFFFFF9) != 0 && (v98 & 4) != 0)
              {
                uint64_t v409 = 0x800000000000000;
                if ((v98 & 2) == 0) {
                  uint64_t v409 = 0x8000000000000;
                }
                unint64_t v408 = v98 & 0x7FFF8 | ((unint64_t)((v409 & v98) != 0) << 51) | 0x80004;
              }
              *(void *)&long long v436 = v408;
              DWORD2(v436) = 0;
              LODWORD(v444) = v96;
              LODWORD(v445) = 0;
              *(void *)&long long v440 = v406;
              *((void *)&v440 + 1) = v405;
              LODWORD(v441) = 1;
              uint64_t v410 = sub_1CC73933C(v407, 32, (uint64_t)&v436, &v444, &v440);
              uint64_t v412 = v411;
              uint64_t v413 = *(void *)a1;
              *(void *)&long long v444 = v98;
              DWORD2(v444) = 0;
              uint64_t v414 = sub_1CC7362A8(v413, (unint64_t *)&v444, v423);
              uint64_t v312 = *(void *)a1;
              LODWORD(v438) = v95;
              LODWORD(v439) = 1;
              *(void *)&long long v444 = v410;
              *((void *)&v444 + 1) = v412;
              LODWORD(v445) = 1;
              *(void *)&long long v440 = v414;
              *((void *)&v440 + 1) = v415;
              LODWORD(v441) = 1;
              *(void *)&long long v436 = v401;
              *((void *)&v436 + 1) = v403;
              int v437 = 1;
              goto LABEL_340;
            }
            int v102 = *(llvm::IntegerType ******)a1;
            *(void *)&long long v440 = v433;
            DWORD2(v440) = 0;
            uint64_t v103 = (llvm::LLVMContext *)(unsigned __int16)(v433 >> 3);
            uint64_t v104 = (llvm::LLVMContext *)(unsigned __int16)(v433 >> 19);
            if ((v433 & 2) == 0) {
              uint64_t v104 = (llvm::LLVMContext *)(v433 >> 19);
            }
            if ((v433 & 4) != 0) {
              uint64_t v103 = v104;
            }
            if (v433) {
              uint64_t v105 = (llvm::LLVMContext *)(v433 >> 3);
            }
            else {
              uint64_t v105 = v103;
            }
            uint64_t v106 = llvm::IntegerType::get(***v102[1], v105);
            uint64_t v108 = *(llvm::ConstantInt **)v106;
            unsigned int v109 = *(_DWORD *)(v106 + 8);
            DWORD2(v444) = v109 >> 8;
            if (v109 >> 8 > 0x40) {
              operator new[]();
            }
            if (v109 <= 0xFF) {
              unint64_t v110 = 0;
            }
            else {
              unint64_t v110 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v109) + 63);
            }
            *(void *)&long long v444 = v110;
            uint64_t v427 = v93;
            uint64_t v111 = llvm::ConstantInt::get(v108, (llvm::LLVMContext *)&v444, v107);
            if (DWORD2(v444) >= 0x41 && (void)v444) {
              MEMORY[0x1D25D9CB0](v444, 0x1000C8000313F17);
            }
            uint64_t v112 = ((uint64_t (*)(llvm::IntegerType *****, long long *, void *))(*v102)[2])(v102, &v440, v111);
            uint64_t v114 = v113;
            uint64_t v115 = *(void *)a1;
            *(void *)&long long v440 = v433;
            DWORD2(v440) = 0;
            LODWORD(v444) = v96;
            LODWORD(v445) = 0;
            uint64_t v446 = v112;
            uint64_t v447 = v113;
            int v448 = 1;
            uint64_t v116 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v115 + 32))(v115, 67, &v440, 1, &v444, 2, 0);
            uint64_t v118 = v117;
            uint64_t v119 = *(void *)a1;
            unint64_t v120 = v433;
            *(void *)&long long v440 = v433;
            DWORD2(v440) = 0;
            LODWORD(v444) = v96;
            LODWORD(v445) = 0;
            uint64_t v446 = v112;
            uint64_t v447 = v114;
            int v448 = 1;
            uint64_t v121 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v119 + 32))(v119, 45, &v440, 1, &v444, 2, 0);
            *(void *)&long long v440 = v120;
            DWORD2(v440) = 0;
            *(void *)&long long v444 = v116;
            *((void *)&v444 + 1) = v118;
            LODWORD(v445) = 1;
            uint64_t v446 = v121;
            uint64_t v447 = v122;
            int v448 = 1;
            uint64_t v123 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v119 + 32))(v119, 65, &v440, 1, &v444, 2, 0);
            uint64_t v125 = v124;
            *(void *)&long long v436 = v433;
            *((void *)&v436 + 1) = v433;
            LODWORD(v444) = 211;
            *((void *)&v444 + 1) = &v436;
            uint64_t v445 = 2;
            uint64_t v446 = 0;
            uint64_t v447 = 0;
            int v126 = sub_1CC72D410(*(void *)(a1 + 24), (uint64_t)&v444);
            if (!v126) {
              goto LABEL_105;
            }
            if ((v126 - 7) < 2) {
              goto LABEL_105;
            }
            unint64_t v438 = v433;
            unint64_t v439 = v433;
            LODWORD(v440) = 209;
            *((void *)&v440 + 1) = &v438;
            uint64_t v441 = 2;
            uint64_t v442 = 0;
            uint64_t v443 = 0;
            unsigned int v369 = sub_1CC72D410(*(void *)(a1 + 24), (uint64_t)&v440);
            if (v369 > 8 || ((1 << v369) & 0x181) == 0)
            {
LABEL_105:
              *(void *)(a2 + 16) = *(void *)(v427 + 8) + 10128;
              llvm::MachineOperand::setReg(*(void *)(a2 + 32) + 32, *(_DWORD *)(*(void *)(v125 + 32) + 4));
              return 1;
            }
            uint64_t v370 = *(void *)a1;
            *(void *)&long long v444 = v433;
            DWORD2(v444) = 0;
            uint64_t v371 = sub_1CC7362A8(v370, (unint64_t *)&v444, v423);
            uint64_t v373 = v372;
            uint64_t v374 = *(void *)a1;
            int v375 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
            *(void *)&long long v440 = v433;
            DWORD2(v440) = 0;
            *(void *)&long long v444 = v123;
            *((void *)&v444 + 1) = v125;
            LODWORD(v445) = 1;
            uint64_t v376 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v374 + 32))(v374, 209, &v440, 1, &v444, 1, 0);
            LODWORD(v440) = v375;
            DWORD2(v440) = 1;
            *(void *)&long long v444 = v371;
            *((void *)&v444 + 1) = v373;
            LODWORD(v445) = 1;
            uint64_t v446 = v376;
            uint64_t v447 = v377;
            int v448 = 1;
            (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v374 + 32))(v374, 46, &v440, 1, &v444, 2, 0);
            uint64_t v314 = (llvm::MachineInstr *)a2;
            break;
          case 0xD0:
            uint64_t v127 = a2;
            (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
            uint64_t v128 = *(void *)(v93 + 8);
            uint64_t v129 = 9936;
            goto LABEL_107;
          case 0xD1:
            uint64_t v288 = *(void *)(a2 + 32);
            int v289 = *(_DWORD *)(v288 + 4);
            int v290 = *(_DWORD *)(v288 + 36);
            uint64_t v291 = *(void *)(a1 + 16);
            if (v289 < 0 && (v289 & 0x7FFFFFFFu) < *(_DWORD *)(v291 + 432)) {
              uint64_t v292 = *(void *)(*(void *)(v291 + 424) + 8 * (v289 & 0x7FFFFFFF));
            }
            else {
              uint64_t v292 = 0;
            }
            if (v290 < 0 && (v290 & 0x7FFFFFFFu) < *(_DWORD *)(v291 + 432)) {
              unint64_t v293 = *(void *)(*(void *)(v291 + 424) + 8 * (v290 & 0x7FFFFFFF));
            }
            else {
              unint64_t v293 = 0;
            }
            unint64_t v433 = v293;
            unsigned int v295 = sub_1CB8F1DC4(&v433);
            if (v294 == 1) {
            *(void *)&long long v440 = v292;
            }
            *((void *)&v440 + 1) = v433;
            LODWORD(v444) = 210;
            *((void *)&v444 + 1) = &v440;
            uint64_t v445 = 2;
            uint64_t v446 = 0;
            uint64_t v447 = 0;
            unsigned int v296 = sub_1CC72D410(*(void *)(a1 + 24), (uint64_t)&v444);
            if (v296 <= 8 && ((1 << v296) & 0x181) != 0)
            {
              uint64_t v297 = *(void *)a1;
              *(void *)&long long v440 = v292;
              DWORD2(v440) = 0;
              LODWORD(v444) = v290;
              LODWORD(v445) = 0;
              uint64_t v298 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v297 + 32))(v297, 210, &v440, 1, &v444, 1, 0);
              uint64_t v300 = v299;
              uint64_t v301 = *(void *)a1;
              *(void *)&long long v444 = v433;
              DWORD2(v444) = 0;
              uint64_t v303 = sub_1CC7362A8(v301, (unint64_t *)&v444, 0);
              uint64_t v304 = *(void *)a1;
              unint64_t v305 = 9;
              if ((v433 & 0xFFFFFFFFFFFFFFF9) != 0 && (v433 & 4) != 0)
              {
                uint64_t v306 = 0x800000000000000;
                if ((v433 & 2) == 0) {
                  uint64_t v306 = 0x8000000000000;
                }
                unint64_t v305 = v433 & 0x7FFF8 | ((unint64_t)((v306 & v433) != 0) << 51) | 0x80004;
              }
              *(void *)&long long v436 = v305;
              DWORD2(v436) = 0;
              LODWORD(v444) = v290;
              LODWORD(v445) = 0;
              *(void *)&long long v440 = v303;
              *((void *)&v440 + 1) = v302;
              LODWORD(v441) = 1;
              uint64_t v307 = sub_1CC73933C(v304, 32, (uint64_t)&v436, &v444, &v440);
              uint64_t v309 = v308;
              uint64_t v310 = *(void *)a1;
              *(void *)&long long v444 = v292;
              DWORD2(v444) = 0;
              uint64_t v311 = sub_1CC7362A8(v310, (unint64_t *)&v444, v295);
              uint64_t v312 = *(void *)a1;
              LODWORD(v438) = v289;
              LODWORD(v439) = 1;
              *(void *)&long long v444 = v307;
              *((void *)&v444 + 1) = v309;
              LODWORD(v445) = 1;
              *(void *)&long long v440 = v311;
              *((void *)&v440 + 1) = v313;
              LODWORD(v441) = 1;
              *(void *)&long long v436 = v298;
              *((void *)&v436 + 1) = v300;
              int v437 = 1;
LABEL_340:
              sub_1CC739494(v312, (uint64_t *)&v438, &v444, &v440, &v436, 0);
            }
            else
            {
              if (v295)
              {
                unint64_t v378 = (v295 - 1) | (((unint64_t)v295 - 1) >> 1) | (((v295 - 1) | (((unint64_t)v295 - 1) >> 1)) >> 2);
                unint64_t v379 = v378 | (v378 >> 4) | ((v378 | (v378 >> 4)) >> 8);
                unsigned int v380 = ((v379 >> 16) | v379) + 1;
                if (v380 >= 2)
                {
                  unsigned int v381 = v380 >> 1;
                  int v382 = 1;
                  do
                  {
                    uint64_t v383 = *(void *)a1;
                    *(void *)&long long v444 = v433;
                    DWORD2(v444) = 0;
                    uint64_t v384 = sub_1CC7362A8(v383, (unint64_t *)&v444, 1 << (v382 - 1));
                    uint64_t v385 = *(void *)a1;
                    unint64_t v386 = v433;
                    *(void *)&long long v440 = v433;
                    DWORD2(v440) = 0;
                    LODWORD(v444) = v290;
                    LODWORD(v445) = 0;
                    uint64_t v446 = v384;
                    uint64_t v447 = v387;
                    int v448 = 1;
                    uint64_t v388 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v385 + 32))(v385, 128, &v440, 1, &v444, 2, 0);
                    *(void *)&long long v440 = v386;
                    DWORD2(v440) = 0;
                    LODWORD(v444) = v290;
                    LODWORD(v445) = 0;
                    uint64_t v446 = v388;
                    uint64_t v447 = v389;
                    int v448 = 1;
                    (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v385 + 32))(v385, 66, &v440, 1, &v444, 2, 0);
                    int v290 = *(_DWORD *)(*(void *)(v390 + 32) + 4);
                  }
                  while (v381 >> v382++);
                }
              }
              uint64_t v392 = *(void *)a1;
              *(void *)&long long v440 = v292;
              DWORD2(v440) = 0;
              LODWORD(v444) = v290;
              LODWORD(v445) = 0;
              uint64_t v393 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v392 + 32))(v392, 211, &v440, 1, &v444, 1, 0);
              uint64_t v395 = v394;
              uint64_t v396 = *(void *)a1;
              int v397 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
              *(void *)&long long v436 = v292;
              DWORD2(v436) = 0;
              uint64_t v398 = sub_1CC7362A8(v396, (unint64_t *)&v436, v295);
              LODWORD(v440) = v397;
              DWORD2(v440) = 1;
              *(void *)&long long v444 = v398;
              *((void *)&v444 + 1) = v399;
              LODWORD(v445) = 1;
              uint64_t v446 = v393;
              uint64_t v447 = v395;
              int v448 = 1;
              (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v396 + 32))(v396, 46, &v440, 1, &v444, 2, 0);
            }
            uint64_t v314 = (llvm::MachineInstr *)a2;
            break;
          case 0xD2:
            uint64_t v127 = a2;
            (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
            uint64_t v128 = *(void *)(v93 + 8);
            uint64_t v129 = 10032;
            goto LABEL_107;
          case 0xD3:
            int v315 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
            if (v315 < 0 && (uint64_t v316 = *(void *)(a1 + 16), (v315 & 0x7FFFFFFFu) < *(_DWORD *)(v316 + 432))) {
              unint64_t v317 = *(void *)(*(void *)(v316 + 424) + 8 * (v315 & 0x7FFFFFFF));
            }
            else {
              unint64_t v317 = 0;
            }
            unint64_t v435 = v317;
            unint64_t v319 = (llvm::APInt *)sub_1CB8F1DC4(&v435);
            if (v318 == 1) {
            uint64_t v320 = *(llvm::ConstantInt ******)a1;
            }
            *(void *)&long long v444 = v435;
            DWORD2(v444) = 0;
            uint64_t v321 = sub_1CC7362A8((uint64_t)v320, (unint64_t *)&v444, 1uLL);
            *(void *)&long long v440 = v435;
            DWORD2(v440) = 0;
            LODWORD(v444) = v315;
            LODWORD(v445) = 0;
            uint64_t v446 = v321;
            uint64_t v447 = v322;
            int v448 = 1;
            uint64_t v323 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v320)[4])(v320, 128, &v440, 1, &v444, 2, 0);
            uint64_t v325 = v324;
            DWORD2(v444) = 8;
            *(void *)&long long v444 = 85;
            llvm::APInt::getSplat(v319, (llvm::APInt *)&v444, (uint64_t)&v436);
            if (DWORD2(v444) >= 0x41 && (void)v444) {
              MEMORY[0x1D25D9CB0](v444, 0x1000C8000313F17);
            }
            *(void *)&long long v444 = v435;
            DWORD2(v444) = 0;
            uint64_t v326 = sub_1CC737454(v320, (uint64_t)&v444, (llvm::LLVMContext *)&v436);
            *(void *)&long long v440 = v435;
            DWORD2(v440) = 0;
            *(void *)&long long v444 = v323;
            *((void *)&v444 + 1) = v325;
            LODWORD(v445) = 1;
            uint64_t v446 = v326;
            uint64_t v447 = v327;
            int v448 = 1;
            uint64_t v328 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v320)[4])(v320, 65, &v440, 1, &v444, 2, 0);
            *(void *)&long long v440 = v435;
            DWORD2(v440) = 0;
            LODWORD(v444) = v315;
            LODWORD(v445) = 0;
            uint64_t v446 = v328;
            uint64_t v447 = v329;
            int v448 = 1;
            uint64_t v330 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v320)[4])(v320, 46, &v440, 1, &v444, 2, 0);
            uint64_t v332 = v331;
            *(void *)&long long v444 = v435;
            DWORD2(v444) = 0;
            uint64_t v333 = sub_1CC7362A8((uint64_t)v320, (unint64_t *)&v444, 2uLL);
            *(void *)&long long v440 = v435;
            DWORD2(v440) = 0;
            *(void *)&long long v444 = v330;
            *((void *)&v444 + 1) = v332;
            LODWORD(v445) = 1;
            uint64_t v446 = v333;
            uint64_t v447 = v334;
            int v448 = 1;
            uint64_t v335 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v320)[4])(v320, 128, &v440, 1, &v444, 2, 0);
            uint64_t v337 = v336;
            DWORD2(v444) = 8;
            *(void *)&long long v444 = 51;
            llvm::APInt::getSplat(v319, (llvm::APInt *)&v444, (uint64_t)&v438);
            if (DWORD2(v444) >= 0x41 && (void)v444) {
              MEMORY[0x1D25D9CB0](v444, 0x1000C8000313F17);
            }
            *(void *)&long long v444 = v435;
            DWORD2(v444) = 0;
            uint64_t v338 = sub_1CC737454(v320, (uint64_t)&v444, (llvm::LLVMContext *)&v438);
            uint64_t v340 = v339;
            *(void *)&long long v440 = v435;
            DWORD2(v440) = 0;
            *(void *)&long long v444 = v335;
            *((void *)&v444 + 1) = v337;
            LODWORD(v445) = 1;
            uint64_t v446 = v338;
            uint64_t v447 = v339;
            int v448 = 1;
            uint64_t v341 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v320)[4])(v320, 65, &v440, 1, &v444, 2, 0);
            uint64_t v343 = v342;
            *(void *)&long long v440 = v435;
            DWORD2(v440) = 0;
            *(void *)&long long v444 = v330;
            *((void *)&v444 + 1) = v332;
            LODWORD(v445) = 1;
            uint64_t v446 = v338;
            uint64_t v447 = v340;
            int v448 = 1;
            uint64_t v344 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v320)[4])(v320, 65, &v440, 1, &v444, 2, 0);
            *(void *)&long long v440 = v435;
            DWORD2(v440) = 0;
            *(void *)&long long v444 = v341;
            *((void *)&v444 + 1) = v343;
            LODWORD(v445) = 1;
            uint64_t v446 = v344;
            uint64_t v447 = v345;
            int v448 = 1;
            uint64_t v346 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v320)[4])(v320, 45, &v440, 1, &v444, 2, 0);
            uint64_t v348 = v347;
            *(void *)&long long v444 = v435;
            DWORD2(v444) = 0;
            uint64_t v349 = sub_1CC7362A8((uint64_t)v320, (unint64_t *)&v444, 4uLL);
            *(void *)&long long v440 = v435;
            DWORD2(v440) = 0;
            *(void *)&long long v444 = v346;
            *((void *)&v444 + 1) = v348;
            LODWORD(v445) = 1;
            uint64_t v446 = v349;
            uint64_t v447 = v350;
            int v448 = 1;
            uint64_t v351 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v320)[4])(v320, 128, &v440, 1, &v444, 2, 0);
            *(void *)&long long v440 = v435;
            DWORD2(v440) = 0;
            *(void *)&long long v444 = v351;
            *((void *)&v444 + 1) = v352;
            LODWORD(v445) = 1;
            uint64_t v446 = v346;
            uint64_t v447 = v348;
            int v448 = 1;
            uint64_t v353 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v320)[4])(v320, 45, &v440, 1, &v444, 2, 0);
            uint64_t v355 = v354;
            DWORD2(v444) = 8;
            *(void *)&long long v444 = 15;
            llvm::APInt::getSplat(v319, (llvm::APInt *)&v444, (uint64_t)&v433);
            if (DWORD2(v444) >= 0x41 && (void)v444) {
              MEMORY[0x1D25D9CB0](v444, 0x1000C8000313F17);
            }
            *(void *)&long long v444 = v435;
            DWORD2(v444) = 0;
            uint64_t v356 = sub_1CC737454(v320, (uint64_t)&v444, (llvm::LLVMContext *)&v433);
            *(void *)&long long v440 = v435;
            DWORD2(v440) = 0;
            *(void *)&long long v444 = v353;
            *((void *)&v444 + 1) = v355;
            LODWORD(v445) = 1;
            uint64_t v446 = v356;
            uint64_t v447 = v357;
            int v448 = 1;
            uint64_t v358 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v320)[4])(v320, 65, &v440, 1, &v444, 2, 0);
            uint64_t v360 = v359;
            *(void *)&long long v444 = v435;
            DWORD2(v444) = 0;
            unsigned int v432 = 8;
            uint64_t v431 = 1;
            llvm::APInt::getSplat(v319, (llvm::APInt *)&v431, (uint64_t)&v440);
            uint64_t v361 = sub_1CC737454(v320, (uint64_t)&v444, (llvm::LLVMContext *)&v440);
            uint64_t v363 = v362;
            if (DWORD2(v440) >= 0x41 && (void)v440) {
              MEMORY[0x1D25D9CB0](v440, 0x1000C8000313F17);
            }
            if (v432 >= 0x41 && v431) {
              MEMORY[0x1D25D9CB0](v431, 0x1000C8000313F17);
            }
            *(void *)&long long v440 = v435;
            DWORD2(v440) = 0;
            *(void *)&long long v444 = v358;
            *((void *)&v444 + 1) = v360;
            LODWORD(v445) = 1;
            uint64_t v446 = v361;
            uint64_t v447 = v363;
            int v448 = 1;
            uint64_t v364 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v320)[4])(v320, 47, &v440, 1, &v444, 2, 0);
            uint64_t v366 = v365;
            *(void *)&long long v444 = v435;
            DWORD2(v444) = 0;
            uint64_t v367 = sub_1CC7362A8((uint64_t)v320, (unint64_t *)&v444, (v319 - 8));
            LODWORD(v440) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
            DWORD2(v440) = 1;
            *(void *)&long long v444 = v364;
            *((void *)&v444 + 1) = v366;
            LODWORD(v445) = 1;
            uint64_t v446 = v367;
            uint64_t v447 = v368;
            int v448 = 1;
            ((void (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v320)[4])(v320, 128, &v440, 1, &v444, 2, 0);
            llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
            if (v434 >= 0x41 && v433) {
              MEMORY[0x1D25D9CB0](v433, 0x1000C8000313F17);
            }
            if (v439 >= 0x41 && v438) {
              MEMORY[0x1D25D9CB0](v438, 0x1000C8000313F17);
            }
            if (DWORD2(v436) >= 0x41 && (void)v436) {
              MEMORY[0x1D25D9CB0](v436, 0x1000C8000313F17);
            }
            return 1;
          default:
            return 2;
        }
        llvm::MachineInstr::eraseFromParent(v314);
        return 1;
      case 0xD4:
        sub_1CD620474((uint64_t *)a1, (llvm::MachineInstr *)a2);
        return 1;
      case 0xD5:
        sub_1CD62099C((uint64_t *)a1, (llvm::MachineInstr *)a2);
        return 1;
      case 0xDA:
        sub_1CD61D368((uint64_t *)a1, a2);
        return 1;
      case 0xE0:
        return sub_1CD61FBA8((uint64_t *)a1, (llvm::MachineInstr *)a2);
      case 0xE8:
      case 0xE9:
        return sub_1CD620D50((void *)a1, a2);
      case 0xEA:
      case 0xEC:
      case 0xED:
        return sub_1CC72A084(a1, a2, 0);
      case 0xEB:
        return sub_1CD623014(a1, (unint64_t *)a2);
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFA:
      case 0xFB:
      case 0xFC:
      case 0xFD:
        return sub_1CD623170(a1, a2);
      default:
        return v25;
    }
  }
  int v3 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
  if (v3 < 0 && (uint64_t v4 = *(void *)(a1 + 16), (v3 & 0x7FFFFFFFu) < *(_DWORD *)(v4 + 432))) {
    uint64_t v5 = *(void *)(*(void *)(v4 + 424) + 8 * (v3 & 0x7FFFFFFF));
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)&long long v440 = v5;
  LODWORD(v444) = 177;
  *((void *)&v444 + 1) = &v440;
  uint64_t v445 = 1;
  uint64_t v446 = 0;
  uint64_t v447 = 0;
  if (sub_1CC72D410(v6, (uint64_t)&v444) == 6) {
    return 2;
  }
  uint64_t v7 = *(void *)(a2 + 32);
  int v424 = *(_DWORD *)(v7 + 36);
  int v420 = *(_DWORD *)(v7 + 68);
  uint64_t v8 = *(void *)(a1 + 16);
  unsigned int v9 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v8, "", 0);
  unint64_t v10 = v9 & 0x7FFFFFFF;
  *(void *)(*(void *)(v8 + 24) + 16 * v10) = 4;
  unint64_t v11 = *(unsigned int *)(v8 + 432);
  if (v10 >= v11)
  {
    uint64_t v12 = *(void *)(v8 + 440);
    uint64_t v13 = v10 + 1 - v11;
    if (v10 >= *(unsigned int *)(v8 + 436)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v14 = *(_DWORD *)(v8 + 432);
    if (v13)
    {
      uint64_t v15 = (void *)(*(void *)(v8 + 424) + 8 * *(unsigned int *)(v8 + 432));
      uint64_t v16 = ~v10 + v11;
      do
      {
        *v15++ = v12;
        BOOL v17 = __CFADD__(v16++, 1);
      }
      while (!v17);
      int v14 = *(_DWORD *)(v8 + 432);
    }
    *(_DWORD *)(v8 + 432) = v14 + v13;
  }
  *(void *)(*(void *)(v8 + 424) + 8 * v10) = v5;
  uint64_t v18 = *(void *)(v8 + 8);
  if (v18) {
    (*(void (**)(uint64_t, void))(*(void *)v18 + 24))(v18, v9);
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = 1;
  LODWORD(v440) = v9;
  DWORD2(v440) = 1;
  LODWORD(v444) = v420;
  LODWORD(v445) = 0;
  (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v19 + 32))(v19, 177, &v440, 1, &v444, 1, 0);
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = (llvm::MachineInstr *)a2;
  LODWORD(v440) = v3;
  DWORD2(v440) = 1;
  LODWORD(v444) = v424;
  LODWORD(v445) = 0;
  LODWORD(v446) = v9;
  int v448 = 0;
  unsigned int v23 = *(void (**)(void))(*(void *)v21 + 32);
LABEL_17:
  v23();
  uint64_t v24 = v22;
LABEL_18:
  llvm::MachineInstr::eraseFromParent(v24);
  return v20;
}

uint64_t sub_1CC72364C(uint64_t *a1, llvm::MachineInstr *this, int a3, unint64_t a4, int8x8_t a5)
{
  v89[1] = *MEMORY[0x1E4F143B8];
  unint64_t v84 = a4;
  unsigned int v9 = 1;
  if ((a4 & 0xFFFFFFFFFFFFFFF9) != 0 && (a4 & 4) != 0)
  {
    uint64_t v10 = 0x800000000000000;
    if ((a4 & 2) == 0) {
      uint64_t v10 = 0x8000000000000;
    }
    if ((v10 & a4) != 0) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)this);
    }
    unsigned int v9 = (unsigned __int16)(a4 >> 3);
  }
  uint64_t v74 = a1;
  if (**((_WORD **)this + 2) == 82)
  {
    uint64_t v11 = a1[2];
    uint64_t v12 = *((void *)this + 4);
    int v13 = *(_DWORD *)(v12 + 4);
    if (v13 < 0 && (uint64_t v14 = v13 & 0x7FFFFFFF, v14 < *(_DWORD *)(v11 + 432))) {
      unint64_t v15 = *(void *)(*(void *)(v11 + 424) + 8 * v14);
    }
    else {
      unint64_t v15 = 0;
    }
    unint64_t v83 = v15;
    int v16 = *(_DWORD *)(v12 + 36);
    if (v16 < 0 && (uint64_t v17 = v16 & 0x7FFFFFFF, v17 < *(_DWORD *)(v11 + 432))) {
      unint64_t v18 = *(void *)(*(void *)(v11 + 424) + 8 * v17);
    }
    else {
      unint64_t v18 = 0;
    }
    unint64_t v82 = v18;
    unint64_t v81 = sub_1CBA15978(&v82);
    unint64_t v20 = sub_1CB8F1DC4(&v83);
    if (v19 == 1) {
    unint64_t v22 = sub_1CB8F1DC4(&v84);
    }
    if (v21 == 1) {
    if (v20 % v22)
    }
      return 2;
    unint64_t v24 = sub_1CB8F1DC4(&v84);
    if (v23 == 1) {
    unint64_t v26 = sub_1CB8F1DC4(&v81);
    }
    if (v25 == 1) {
    unint64_t v80 = sub_1CBA5A95C((v24 / v26), v81);
    }
    uint64_t v27 = sub_1CB8F1DC4(&v84);
    int v29 = v28;
    uint64_t v31 = 2;
    if (v27 != sub_1CB8F1DC4(&v80) || v29 != v30) {
      return v31;
    }
    unint64_t v33 = sub_1CB8F1DC4(&v82);
    if (v32 == 1) {
    unint64_t v35 = sub_1CB8F1DC4(&v80);
    }
    if (v34 == 1) {
    uint64_t v87 = (int *)v89;
    }
    uint64_t v88 = 0x200000000;
    unint64_t v72 = this;
    v85[0] = &v86;
    v85[1] = (void *)0x200000000;
    unint64_t v36 = v33 / v35;
    sub_1CC724218(a1, *(_DWORD *)(*((void *)this + 4) + 36), v80, v36, (uint64_t)v85);
    if ((int)v36 >= 1)
    {
      uint64_t v37 = 0;
      uint64_t v73 = v36;
      do
      {
        unint64_t v38 = v84;
        if (v84 == v80)
        {
          unsigned int IncompleteVirtualRegister = *((_DWORD *)v85[0] + v37);
        }
        else
        {
          uint64_t v39 = a1[2];
          unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v39, "", 0);
          unint64_t v41 = IncompleteVirtualRegister & 0x7FFFFFFF;
          *(void *)(*(void *)(v39 + 24) + 16 * v41) = 4;
          unint64_t v42 = *(unsigned int *)(v39 + 432);
          if (v41 >= v42)
          {
            uint64_t v43 = *(void *)(v39 + 440);
            if (v41 >= *(unsigned int *)(v39 + 436)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v44 = *(_DWORD *)(v39 + 432);
            uint64_t v45 = v41 + 1 - v42;
            a1 = v74;
            if (v45)
            {
              uint64_t v46 = (void *)(*(void *)(v39 + 424) + 8 * *(unsigned int *)(v39 + 432));
              uint64_t v47 = ~v41 + v42;
              do
                *v46++ = v43;
              while (!__CFADD__(v47++, 1));
              int v44 = *(_DWORD *)(v39 + 432);
            }
            *(_DWORD *)(v39 + 432) = v44 + v45;
          }
          *(void *)(*(void *)(v39 + 424) + 8 * v41) = v38;
          uint64_t v49 = *(void *)(v39 + 8);
          if (v49) {
            (*(void (**)(uint64_t, void))(*(void *)v49 + 24))(v49, IncompleteVirtualRegister);
          }
          uint64_t v50 = *a1;
          unsigned int v78 = IncompleteVirtualRegister;
          int v79 = 1;
          int v75 = *((_DWORD *)v85[0] + v37);
          int v77 = 0;
          sub_1CC7382B0(v50);
        }
        if (v88 >= (unint64_t)HIDWORD(v88)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v87[v88] = IncompleteVirtualRegister;
        LODWORD(v88) = v88 + 1;
        ++v37;
      }
      while (v37 != v73);
    }
    int v51 = *(_DWORD *)(*((void *)v72 + 4) + 4);
    if ((v51 & 0x80000000) == 0
      || (uint64_t v52 = a1[2], (v51 & 0x7FFFFFFFu) >= *(_DWORD *)(v52 + 432))
      || ((uint64_t v53 = *(void *)(*(void *)(v52 + 424) + 8 * (v51 & 0x7FFFFFFF)),
           unint64_t v54 = v53 & 0xFFFFFFFFFFFFFFF9,
           uint64_t v55 = v53 & 4,
           v54)
        ? (BOOL v56 = v55 == 0)
        : (BOOL v56 = 1),
          v56))
    {
      uint64_t v61 = *a1;
      int v75 = *(_DWORD *)(*((void *)v72 + 4) + 4);
      int v76 = 1;
      sub_1CC73661C(v61, (uint64_t)&v75, v87, v88);
    }
    else
    {
      uint64_t v57 = *a1;
      int v75 = *(_DWORD *)(*((void *)v72 + 4) + 4);
      int v76 = 1;
      sub_1CC738CA0(v57, (uint64_t)&v75, v87, v88);
    }
    llvm::MachineInstr::eraseFromParent(v72);
    if (v85[0] != &v86) {
      free(v85[0]);
    }
    if (v87 != (int *)v89) {
      free(v87);
    }
  }
  else
  {
    uint64_t v31 = 2;
    switch(**((_WORD **)this + 2))
    {
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x3F:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x50:
      case 0x51:
      case 0x53:
      case 0x55:
      case 0x56:
      case 0x58:
      case 0x76:
      case 0x77:
      case 0x7C:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x98:
      case 0x99:
      case 0x9A:
      case 0xA3:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xA7:
      case 0xA8:
      case 0xA9:
      case 0xAA:
      case 0xAC:
      case 0xAD:
      case 0xAE:
      case 0xAF:
      case 0xB0:
      case 0xB1:
      case 0xB2:
      case 0xB3:
      case 0xB4:
      case 0xB5:
      case 0xB6:
      case 0xB7:
      case 0xB8:
      case 0xB9:
      case 0xBA:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBE:
      case 0xBF:
      case 0xC0:
      case 0xC1:
      case 0xC3:
      case 0xC4:
      case 0xC5:
      case 0xC6:
      case 0xC7:
      case 0xCF:
      case 0xD0:
      case 0xD1:
      case 0xD2:
      case 0xD3:
      case 0xD4:
      case 0xD5:
      case 0xD6:
      case 0xD7:
      case 0xD8:
      case 0xD9:
      case 0xDA:
      case 0xDB:
      case 0xDC:
      case 0xDD:
        unint64_t v59 = a1;
        uint64_t v60 = this;
        goto LABEL_64;
      case 0x45:
        sub_1CD6237F0(a1, this, v9);
        return 1;
      case 0x4A:
        return sub_1CD623C64((uint64_t)a1, (uint64_t)this, a3, a4);
      case 0x4D:
        uint64_t v62 = a1;
        uint64_t v63 = this;
        int v64 = a3;
        goto LABEL_74;
      case 0x4F:
        if (a3 != 1) {
          return 2;
        }
        uint64_t v62 = a1;
        uint64_t v63 = this;
        int v64 = 1;
LABEL_74:
        return sub_1CD623EE8(v62, (uint64_t)v63, v64, a4);
      case 0x5A:
      case 0x60:
        return sub_1CD619BD4(a1, (uint64_t)this, a3, a4);
      case 0x7D:
        LODWORD(v87) = 2;
        uint64_t v31 = 1;
        goto LABEL_84;
      case 0x86:
      case 0x87:
        uint64_t v31 = 1;
        LODWORD(v87) = 1;
LABEL_84:
        sub_1CC72A30C(a1, (uint64_t)this, v9, &v87, 1);
        return v31;
      case 0x88:
        uint64_t v60 = this;
        int v65 = *(_DWORD *)(*((void *)this + 4) + 36);
        if ((v65 & 0x80000000) == 0
          || (uint64_t v66 = a1[2], v67 = v65 & 0x7FFFFFFF, v67 >= *(_DWORD *)(v66 + 432))
          || ((v68 = *(void *)(*(void *)(v66 + 424) + 8 * v67), v69 = v68 & 0xFFFFFFFFFFFFFFF9, uint64_t v70 = v68 & 4, v69)
            ? (BOOL v71 = v70 == 0)
            : (BOOL v71 = 1),
              v71))
        {
          uint64_t v31 = 1;
          LODWORD(v87) = 1;
          sub_1CC72A30C(a1, (uint64_t)this, v9, &v87, 1);
          return v31;
        }
        unint64_t v59 = a1;
LABEL_64:
        sub_1CC72A30C(v59, (uint64_t)v60, v9, 0, 0);
        break;
      case 0xCC:
      case 0xCD:
        return sub_1CD624684((uint64_t)a1, (uint64_t)this, a4);
      case 0xCE:
        return sub_1CC72B9E4(a1, (uint64_t)this, a3, a5);
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFA:
      case 0xFB:
      case 0xFC:
      case 0xFD:
        return sub_1CC72B268(a1, (uint64_t)this, a3, a4);
      default:
        return v31;
    }
  }
  return 1;
}

uint64_t sub_1CC724218(uint64_t *a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  int v6 = a2;
  if (a4 <= 0)
  {
    unsigned int v20 = *(_DWORD *)(a5 + 8);
  }
  else
  {
    for (int i = 0; i != a4; ++i)
    {
      uint64_t v8 = a1[2];
      unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v8, "", 0);
      unint64_t v10 = IncompleteVirtualRegister & 0x7FFFFFFF;
      *(void *)(*(void *)(v8 + 24) + 16 * v10) = 4;
      unint64_t v11 = *(unsigned int *)(v8 + 432);
      if (v10 >= v11)
      {
        unint64_t v12 = v10 + 1;
        uint64_t v13 = *(void *)(v8 + 440);
        if (v10 >= *(unsigned int *)(v8 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v14 = *(_DWORD *)(v8 + 432);
        if (v12 != v11)
        {
          unint64_t v15 = (void *)(*(void *)(v8 + 424) + 8 * *(unsigned int *)(v8 + 432));
          uint64_t v16 = ~v10 + v11;
          do
            *v15++ = v13;
          while (!__CFADD__(v16++, 1));
          int v14 = *(_DWORD *)(v8 + 432);
        }
        *(_DWORD *)(v8 + 432) = v14 + v12 - v11;
      }
      *(void *)(*(void *)(v8 + 424) + 8 * v10) = a3;
      uint64_t v18 = *(void *)(v8 + 8);
      if (v18) {
        (*(void (**)(uint64_t, void))(*(void *)v18 + 24))(v18, IncompleteVirtualRegister);
      }
      unint64_t v19 = *(unsigned int *)(a5 + 8);
      if (v19 >= *(unsigned int *)(a5 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a5 + 4 * v19) = IncompleteVirtualRegister;
      unsigned int v20 = *(_DWORD *)(a5 + 8) + 1;
      *(_DWORD *)(a5 + 8) = v20;
    }
    int v6 = a2;
  }
  uint64_t v21 = *a1;
  unint64_t v22 = *(char **)a5;
  v28[0] = v6;
  _DWORD v28[4] = 0;
  return sub_1CC738BB8(v21, v22, v20, (uint64_t)v28);
}

void sub_1CC7243F4(uint64_t *a1, int a2, unint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, int **a7)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v62 = a4;
  unint64_t v63 = a3;
  unsigned int v12 = sub_1CB8F1DC4(&v63);
  if (v11 == 1) {
  unsigned int v13 = sub_1CB8F1DC4((unint64_t *)&v62);
  }
  if (v14 == 1)
  {
    unsigned int v34 = v13;
    unsigned int v13 = v34;
  }
  unsigned int v15 = v12 / v13;
  uint64_t v58 = a6;
  if (v12 == v12 / v13 * v13)
  {
    if (v13 > v12)
    {
      unsigned int v31 = *(_DWORD *)(a6 + 8);
    }
    else
    {
      int v16 = 0;
      int v55 = a2;
      if (v15 <= 1) {
        int v17 = 1;
      }
      else {
        int v17 = v12 / v13;
      }
      int v56 = v17;
      do
      {
        uint64_t v18 = a1[2];
        uint64_t v19 = v62;
        unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v18, "", 0);
        unint64_t v21 = IncompleteVirtualRegister & 0x7FFFFFFF;
        *(void *)(*(void *)(v18 + 24) + 16 * v21) = 4;
        unint64_t v22 = *(unsigned int *)(v18 + 432);
        if (v21 >= v22)
        {
          uint64_t v23 = *(void *)(v18 + 440);
          if (v21 >= *(unsigned int *)(v18 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v24 = *(_DWORD *)(v18 + 432);
          uint64_t v25 = v21 + 1 - v22;
          a6 = v58;
          if (v25)
          {
            unint64_t v26 = (void *)(*(void *)(v18 + 424) + 8 * *(unsigned int *)(v18 + 432));
            uint64_t v27 = ~v21 + v22;
            do
              *v26++ = v23;
            while (!__CFADD__(v27++, 1));
            int v24 = *(_DWORD *)(v18 + 432);
          }
          *(_DWORD *)(v18 + 432) = v24 + v25;
        }
        *(void *)(*(void *)(v18 + 424) + 8 * v21) = v19;
        uint64_t v29 = *(void *)(v18 + 8);
        if (v29) {
          (*(void (**)(uint64_t, void))(*(void *)v29 + 24))(v29, IncompleteVirtualRegister);
        }
        unint64_t v30 = *(unsigned int *)(a6 + 8);
        if (v30 >= *(unsigned int *)(a6 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a6 + 4 * v30) = IncompleteVirtualRegister;
        unsigned int v31 = *(_DWORD *)(a6 + 8) + 1;
        *(_DWORD *)(a6 + 8) = v31;
        ++v16;
      }
      while (v16 != v56);
      a2 = v55;
    }
    uint64_t v32 = *a1;
    unint64_t v33 = *(char **)a6;
    LODWORD(v64) = a2;
    v66[0] = 0;
    sub_1CC738BB8(v32, v33, v31, (uint64_t)&v64);
  }
  else
  {
    unsigned int v35 = v13;
    uint64_t v57 = v15 * v13;
    unsigned int v36 = v62;
    if ((v62 & 0xFFFFFFFFFFFFFFF9) != 0 && (v62 & 4) != 0)
    {
      int v64 = v66;
      uint64_t v65 = 0x800000000;
      uint64_t v44 = 0x800000000000000;
      if ((v62 & 2) == 0) {
        uint64_t v44 = 0x8000000000000;
      }
      if ((v44 & v62) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v14);
        unsigned int v36 = v62;
      }
      sub_1CD618E18(a1, a2, (unsigned __int16)(v36 >> 3), (uint64_t)&v64);
      if (v65 == 1)
      {
        unint64_t v45 = 0;
      }
      else
      {
        uint64_t v46 = 0;
        unsigned int v47 = *(_DWORD *)(a6 + 8);
        unsigned int v48 = 1;
        do
        {
          if (v47 >= *(_DWORD *)(a6 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a6 + 4 * v47) = *((_DWORD *)v64 + v46);
          unsigned int v47 = *(_DWORD *)(a6 + 8) + 1;
          *(_DWORD *)(a6 + 8) = v47;
          uint64_t v46 = v48;
          unint64_t v45 = v65 - 1;
        }
        while (v45 > v48++);
      }
      unsigned int v50 = *((_DWORD *)a7 + 2);
      if (v50 >= *((_DWORD *)a7 + 3)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      (*a7)[v50] = *((_DWORD *)v64 + v45);
      ++*((_DWORD *)a7 + 2);
      int v51 = **a7;
      if (v51 < 0 && (uint64_t v53 = a1[2], v54 = v51 & 0x7FFFFFFF, v54 < *(_DWORD *)(v53 + 432))) {
        uint64_t v52 = *(void *)(*(void *)(v53 + 424) + 8 * v54);
      }
      else {
        uint64_t v52 = 0;
      }
      *a5 = v52;
      if (v64 != v66) {
        free(v64);
      }
    }
    else
    {
      *a5 = (8 * (v12 % v13)) | 1;
      if (v13 <= v12)
      {
        unsigned int v37 = 0;
        do
        {
          int GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v62, "", 0);
          unint64_t v39 = *(unsigned int *)(v58 + 8);
          if (v39 >= *(unsigned int *)(v58 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)v58 + 4 * v39) = GenericVirtualRegister;
          ++*(_DWORD *)(v58 + 8);
          uint64_t v40 = (void *)*a1;
          LODWORD(v60) = GenericVirtualRegister;
          int v61 = 1;
          LODWORD(v64) = a2;
          v66[0] = 0;
          sub_1CC7383D8(v40, &v60, (int *)&v64, v37);
          v37 += v35;
          --v15;
        }
        while (v15);
      }
      if (v12 > v57)
      {
        int v41 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], *a5, "", 0);
        unsigned int v42 = *((_DWORD *)a7 + 2);
        if (v42 >= *((_DWORD *)a7 + 3)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        (*a7)[v42] = v41;
        ++*((_DWORD *)a7 + 2);
        uint64_t v43 = (void *)*a1;
        LODWORD(v60) = v41;
        int v61 = 1;
        LODWORD(v64) = a2;
        v66[0] = 0;
        sub_1CC7383D8(v43, &v60, (int *)&v64, v57);
      }
    }
  }
}

void sub_1CC724950(uint64_t *a1, int a2, unint64_t a3, unint64_t a4, int *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v11 = a5;
  v48[24] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = (a3 >> 2) & 1;
  if ((a3 & 0xFFFFFFFFFFFFFFF9) == 0) {
    LODWORD(v15) = 0;
  }
  if ((a7 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    uint64_t v16 = a9;
    if (v15)
    {
      uint64_t v47 = 0x800000000;
      unsigned int v42 = a5;
      uint64_t v43 = a9;
      unsigned int v35 = &a5[a6];
      uint64_t v36 = a9 + 4 * a10;
      uint64_t v44 = v35;
      uint64_t v45 = v36;
      uint64_t v46 = v48;
      while (v11 != v35 || v16 != v36 || v44 != v35 || v45 != v36)
      {
        uint64_t v38 = 0;
        do
        {
          unint64_t v39 = (_DWORD *)(*(uint64_t (**)(int **))((char *)&off_1F261CA58 + v38))(&v42);
          v38 += 16;
        }
        while (!v39);
        if (v47 >= (unint64_t)HIDWORD(v47)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v40 = 0;
        *((_DWORD *)v46 + v47) = *v39;
        LODWORD(v47) = v47 + 1;
        do
        {
          if ((*(uint64_t (**)(int **))((char *)&off_1F261CA38 + v40))(&v42)) {
            break;
          }
          BOOL v23 = v40 == 16;
          v40 += 16;
        }
        while (!v23);
        unint64_t v11 = v42;
        uint64_t v16 = v43;
      }
      sub_1CD6190B8(a1, a2, (uint64_t)v46, v47);
      int v28 = v46;
      if (v46 != v48) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v46 = v48;
      uint64_t v47 = 0xC00000000;
      unint64_t v19 = sub_1CC73F3C4(a3, a7);
      unint64_t v20 = sub_1CC73F3C4(v19, a4);
      unsigned int v42 = v11;
      uint64_t v43 = a9;
      unint64_t v21 = &v11[a6];
      uint64_t v22 = a9 + 4 * a10;
      uint64_t v44 = v21;
      uint64_t v45 = v22;
      while (1)
      {
        if (v11 == v21 && v16 == v22)
        {
          BOOL v23 = v44 == v21 && v45 == v22;
          if (v23) {
            break;
          }
        }
        uint64_t v24 = 0;
        do
        {
          uint64_t v25 = (int *)(*(uint64_t (**)(int **))((char *)&off_1F261CA58 + v24))(&v42);
          v24 += 16;
        }
        while (!v25);
        sub_1CC724D60((uint64_t)a1, (uint64_t)&v46, v20, *v25);
        uint64_t v26 = 0;
        do
        {
          if ((*(uint64_t (**)(int **))((char *)&off_1F261CA38 + v26))(&v42)) {
            break;
          }
          BOOL v23 = v26 == 16;
          v26 += 16;
        }
        while (!v23);
        unint64_t v11 = v42;
        uint64_t v16 = v43;
      }
      uint64_t v27 = (void *)sub_1CC724E64((llvm::IntegerType ******)a1, a3, a7, v20, (uint64_t)&v46, 118);
      sub_1CC725580(a1, a2, v27, (int *)v46, v47);
      int v28 = v46;
      if (v46 != v48) {
LABEL_20:
      }
        free(v28);
    }
  }
  else if (v15)
  {
    uint64_t v29 = *a1;
    if ((a4 & 0xFFFFFFFFFFFFFFF9) != 0 && (a4 & 4) != 0)
    {
      LODWORD(v46) = a2;
      LODWORD(v47) = 1;
      sub_1CC738F60(v29, (uint64_t)&v46, a5, a6);
    }
    else
    {
      LODWORD(v42) = a2;
      LODWORD(v43) = 1;
      uint64_t v46 = v48;
      uint64_t v47 = 0x800000000;
      if ((unint64_t)(4 * a6) >= 0x21) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v31 = 0;
      if (a6)
      {
        uint64_t v32 = v48;
        uint64_t v33 = 4 * a6;
        do
        {
          int v34 = *v11++;
          *uint64_t v32 = v34;
          _DWORD v32[4] = 0;
          v32 += 6;
          v33 -= 4;
        }
        while (v33);
        int v31 = v47;
      }
      LODWORD(v47) = v31 + ((unint64_t)(4 * a6) >> 2);
      (*(void (**)(uint64_t, uint64_t, int **, uint64_t, void *))(*(void *)v29 + 32))(v29, 77, &v42, 1, v48);
      int v28 = v46;
      if (v46 != v48) {
        goto LABEL_20;
      }
    }
  }
  else
  {
    uint64_t v30 = *a1;
    LODWORD(v46) = a2;
    LODWORD(v47) = 1;
    sub_1CC73661C(v30, (uint64_t)&v46, a5, a6);
  }
}

void sub_1CC724D60(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  if (a4 < 0 && (uint64_t v5 = *(void *)(a1 + 16), (a4 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v5 + 432))) {
    uint64_t v6 = *(void *)(*(void *)(v5 + 424) + 8 * (a4 & 0x7FFFFFFF));
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 == a3)
  {
    unsigned int v15 = *(_DWORD *)(a2 + 8);
    if (v15 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v15) = a4;
    ++*(_DWORD *)(a2 + 8);
  }
  else
  {
    uint64_t v7 = *(void **)a1;
    v16[0] = a4;
    v16[4] = 0;
    sub_1CC7363F0(v7, a3, v16);
    uint64_t v9 = v8;
    uint64_t v10 = *(unsigned int *)(a2 + 8);
    uint64_t v11 = (*(_DWORD *)(v8 + 40) - 1);
    sub_1CBBDF5D8(a2, v10 + (int)v11);
    if (v11)
    {
      unsigned int v12 = (_DWORD *)(*(void *)a2 + 4 * (int)v10);
      unsigned int v13 = (int *)(*(void *)(v9 + 32) + 4);
      do
      {
        int v14 = *v13;
        v13 += 8;
        *v12++ = v14;
        --v11;
      }
      while (v11);
    }
  }
}

uint64_t sub_1CC724E64(llvm::IntegerType ******a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  unint64_t v72 = a4;
  unint64_t v73 = a3;
  uint64_t v74 = sub_1CC73EF40(a2, a3);
  unint64_t v8 = sub_1CB8F1DC4((unint64_t *)&v74);
  if (v7 == 1) {
  unint64_t v10 = sub_1CB8F1DC4(&v73);
  }
  if (v9 == 1) {
  unint64_t v11 = v8 / v10;
  }
  unint64_t v13 = sub_1CB8F1DC4(&v73);
  if (v12 == 1) {
  unint64_t v15 = sub_1CB8F1DC4(&v72);
  }
  if (v14 == 1) {
  unint64_t v16 = v13 / v15;
  }
  uint64_t v17 = *(int *)(a5 + 8);
  if ((int)(v13 / v15 * v11) <= (int)v17)
  {
    int v28 = 0;
  }
  else
  {
    if (a6 == 126)
    {
      uint64_t v18 = *a1;
      int v75 = (void *)v72;
      LODWORD(v76) = 0;
      unint64_t v19 = (llvm::LLVMContext *)(unsigned __int16)(v72 >> 3);
      unint64_t v20 = (llvm::LLVMContext *)(unsigned __int16)(v72 >> 19);
      if ((v72 & 2) == 0) {
        unint64_t v20 = (llvm::LLVMContext *)(v72 >> 19);
      }
      if ((v72 & 4) != 0) {
        unint64_t v19 = v20;
      }
      if (v72) {
        unint64_t v21 = (llvm::LLVMContext *)(v72 >> 3);
      }
      else {
        unint64_t v21 = v19;
      }
      uint64_t v22 = llvm::IntegerType::get(***v18[1], v21);
      uint64_t v24 = *(llvm::ConstantInt **)v22;
      unsigned int v25 = *(_DWORD *)(v22 + 8);
      LODWORD(v79) = v25 >> 8;
      if (v25 >> 8 >= 0x41) {
        operator new[]();
      }
      unsigned int v78 = 0;
      uint64_t v26 = llvm::ConstantInt::get(v24, (llvm::LLVMContext *)&v78, v23);
      if (v79 >= 0x41 && v78) {
        MEMORY[0x1D25D9CB0](v78, 0x1000C8000313F17);
      }
      ((void (*)(llvm::IntegerType *****, void **, void *))(*v18)[2])(v18, &v75, v26);
    }
    else if (a6 == 118)
    {
      uint64_t v58 = *a1;
      unsigned int v78 = (void *)v72;
      LODWORD(v79) = 0;
      ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void, void, void))(*v58)[4])(v58, 68, &v78, 1, 0, 0, 0);
    }
    else
    {
      uint64_t v61 = (uint64_t)*a1;
      unsigned int v78 = (void *)513;
      LODWORD(v79) = 0;
      uint64_t v63 = sub_1CB8F1DC4(&v72);
      if (v62 == 1) {
      uint64_t v64 = sub_1CC7362A8(v61, (unint64_t *)&v78, v63 - 1);
      }
      uint64_t v65 = *a1;
      int v66 = *(_DWORD *)(*(void *)a5 + 4 * *(unsigned int *)(a5 + 8) - 4);
      int v75 = (void *)v72;
      LODWORD(v76) = 0;
      LODWORD(v78) = v66;
      int v80 = 0;
      uint64_t v81 = v64;
      uint64_t v82 = v67;
      int v83 = 1;
      ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v65)[4])(v65, 129, &v75, 1, &v78, 2, 0);
    }
    int v28 = *(_DWORD *)(*(void *)(v27 + 32) + 4);
  }
  uint64_t v29 = &v80;
  unsigned int v78 = &v80;
  uint64_t v79 = 0x400000000;
  sub_1CBA0E058((uint64_t)&v78, (int)v11, 0);
  uint64_t v30 = (int)v16;
  int v75 = v77;
  uint64_t v76 = 0x400000000;
  sub_1CBA0E058((uint64_t)&v75, (int)v16, 0);
  if (v11)
  {
    uint64_t v31 = 0;
    int v32 = 0;
    uint64_t v33 = v16;
    do
    {
      if (v16)
      {
        uint64_t v35 = 0;
        uint64_t v36 = v31 * v30;
        unsigned int v37 = v75;
        uint64_t v38 = *(void *)a5;
        char v34 = 1;
        uint64_t v39 = v33;
        do
        {
          int v40 = v28;
          if (v35 + v36 < v17)
          {
            char v34 = 0;
            int v40 = *(_DWORD *)(v38 + 4 * (v35 + v36));
          }
          *v37++ = v40;
          ++v35;
          --v39;
        }
        while (v39);
      }
      else
      {
        char v34 = 1;
      }
      if ((v34 & 1) != 0 && !v32)
      {
        uint64_t v43 = v17;
        uint64_t v44 = v29;
        if (a6 == 126)
        {
          uint64_t v45 = *a1;
          unint64_t v70 = v73;
          int v71 = 0;
          uint64_t v46 = (llvm::LLVMContext *)(unsigned __int16)(v73 >> 3);
          uint64_t v47 = (llvm::LLVMContext *)(unsigned __int16)(v73 >> 19);
          if ((v73 & 2) == 0) {
            uint64_t v47 = (llvm::LLVMContext *)(v73 >> 19);
          }
          if ((v73 & 4) != 0) {
            uint64_t v46 = v47;
          }
          if (v73) {
            unsigned int v48 = (llvm::LLVMContext *)(v73 >> 3);
          }
          else {
            unsigned int v48 = v46;
          }
          uint64_t v49 = llvm::IntegerType::get(***v45[1], v48);
          int v51 = *(llvm::ConstantInt **)v49;
          unsigned int v52 = *(_DWORD *)(v49 + 8);
          unsigned int v85 = v52 >> 8;
          if (v52 >> 8 >= 0x41) {
            operator new[]();
          }
          unint64_t v84 = 0;
          uint64_t v53 = llvm::ConstantInt::get(v51, (llvm::LLVMContext *)&v84, v50);
          if (v85 >= 0x41 && v84) {
            MEMORY[0x1D25D9CB0](v84, 0x1000C8000313F17);
          }
          ((void (*)(llvm::IntegerType *****, unint64_t *, void *))(*v45)[2])(v45, &v70, v53);
          int v32 = *(_DWORD *)(*(void *)(v54 + 32) + 4);
          uint64_t v29 = v44;
          uint64_t v17 = v43;
          uint64_t v30 = (int)v16;
          uint64_t v33 = v16;
        }
        else
        {
          uint64_t v17 = v43;
          uint64_t v30 = (int)v16;
          uint64_t v33 = v16;
          if (a6 != 118)
          {
LABEL_33:
            if (v16 == 1)
            {
              int v41 = v78;
              int v42 = *(_DWORD *)v75;
            }
            else
            {
              uint64_t v56 = (uint64_t)*a1;
              unint64_t v84 = v73;
              unsigned int v85 = 0;
              sub_1CC73661C(v56, (uint64_t)&v84, (int *)v75, v76);
              uint64_t v33 = v16;
              int v42 = *(_DWORD *)(*(void *)(v57 + 32) + 4);
              int v41 = v78;
            }
            v41[v31] = v42;
            if (v34) {
              int v32 = v41[v31];
            }
            else {
              int v32 = 0;
            }
            goto LABEL_37;
          }
          unint64_t v59 = *a1;
          unint64_t v84 = v73;
          unsigned int v85 = 0;
          ((void (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, void, void, void))(*v59)[4])(v59, 68, &v84, 1, 0, 0, 0);
          uint64_t v33 = v16;
          int v32 = *(_DWORD *)(*(void *)(v60 + 32) + 4);
        }
      }
      if (!v32) {
        goto LABEL_33;
      }
      *((_DWORD *)v78 + v31) = v32;
LABEL_37:
      ++v31;
    }
    while (v31 != v11);
  }
  sub_1CB927804(a5, (uint64_t)&v78);
  if (v75 != v77) {
    free(v75);
  }
  if (v78 != v29) {
    free(v78);
  }
  return v74;
}

void sub_1CC725580(uint64_t *a1, int a2, void *a3, int *a4, uint64_t a5)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v33 = (unint64_t)a3;
  if (a2 < 0 && (uint64_t v5 = a1[2], (a2 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v5 + 432))) {
    uint64_t v6 = *(void *)(*(void *)(v5 + 424) + 8 * (a2 & 0x7FFFFFFF));
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v32 = v6;
  uint64_t v7 = *a1;
  if ((void *)v6 == a3)
  {
    LODWORD(v34) = a2;
    LODWORD(v35) = 1;
    sub_1CC73661C(v7, (uint64_t)&v34, a4, a5);
  }
  else
  {
    char v10 = (char)a3;
    char v34 = a3;
    LODWORD(v35) = 0;
    unint64_t v11 = (void *)sub_1CC73661C(v7, (uint64_t)&v34, a4, a5);
    if (v6 & 1) != 0 && (v10)
    {
      uint64_t v13 = *a1;
      LODWORD(v29) = a2;
      LODWORD(v30) = 1;
      char v34 = v11;
      uint64_t v35 = v12;
      v36[0] = 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v13 + 32))(v13, 119, &v29, 1, &v34, 1, 0);
    }
    else
    {
      unint64_t v15 = sub_1CB8F1DC4(&v33);
      if (v14 == 1) {
      unint64_t v17 = sub_1CB8F1DC4((unint64_t *)&v32);
      }
      if (v16 == 1) {
      unint64_t v18 = v15 / v17;
      }
      char v34 = v36;
      uint64_t v35 = 0x800000000;
      sub_1CBA0E058((uint64_t)&v34, v18, 0);
      unint64_t v19 = (char *)v34;
      *(_DWORD *)char v34 = a2;
      if (v18 != 1)
      {
        uint64_t v20 = 1;
        do
        {
          int GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v32, "", 0);
          unint64_t v19 = (char *)v34;
          *((_DWORD *)v34 + v20++) = GenericVirtualRegister;
        }
        while (v18 != v20);
      }
      uint64_t v22 = *a1;
      uint64_t v23 = v35;
      unint64_t v27 = v33;
      int v28 = 0;
      uint64_t v29 = sub_1CC73661C(v22, (uint64_t)&v27, a4, a5);
      uint64_t v30 = v24;
      int v31 = 1;
      sub_1CC738BB8(v22, v19, v23, (uint64_t)&v29);
      if (v34 != v36) {
        free(v34);
      }
    }
  }
}

unint64_t sub_1CC7257E0(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, int a5)
{
  if (a5 < 0 && (uint64_t v8 = *(void *)(a1 + 16), (a5 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v8 + 432))) {
    unint64_t v9 = *(void *)(*(void *)(v8 + 424) + 8 * (a5 & 0x7FFFFFFF));
  }
  else {
    unint64_t v9 = 0;
  }
  unint64_t v11 = sub_1CC73F3C4(v9, a4);
  unint64_t v12 = sub_1CC73F3C4(v11, a3);
  sub_1CC724D60(a1, a2, v12, a5);
  return v12;
}

uint64_t sub_1CC725868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v117 = v9;
  uint64_t v11 = v10;
  unint64_t v12 = (unint64_t *)v7;
  v160[57] = *MEMORY[0x1E4F143B8];
  unint64_t v13 = *(void *)(v7 + 8);
  int v14 = ***(llvm::IntegerType ****)v13;
  uint64_t v158 = (char *)v160;
  uint64_t v159 = 0x300000000;
  uint64_t v122 = (unint64_t *)v7;
  if (*(_DWORD *)(v10 + 40) != 1)
  {
    uint64_t v15 = v8;
    unint64_t v16 = 0;
    uint64_t v4 = &v143;
    uint64_t v17 = 4;
    while (1)
    {
      int v18 = *(_DWORD *)(*(void *)(v11 + 32) + v17);
      int v123 = v18;
      if (v18 < 0 && (uint64_t v19 = v18 & 0x7FFFFFFF, v19 < *(_DWORD *)(v15 + 432)))
      {
        unint64_t v20 = *(void *)(*(void *)(v15 + 424) + 8 * v19);
        uint64_t v124 = v20;
        if ((v20 & 0xFFFFFFFFFFFFFFF9) != 0 && (v20 & 6) == 2)
        {
          char v22 = 35;
          if ((v20 & 4) == 0) {
            char v22 = 19;
          }
          uint64_t v23 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v14 + 1912), (llvm::Type *)((v20 >> v22) & 0xFFFFFF));
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v124 = 0;
      }
      unsigned int v25 = (llvm::LLVMContext *)sub_1CB8F1DC4((unint64_t *)&v124);
      if (v24 == 1) {
      uint64_t v23 = llvm::IntegerType::get(v14, v25);
      }
LABEL_17:
      sub_1CB925510((uint64_t)&v132, &v123, 1, v23, 0, 0, 0, 1, 0);
      unint64_t v26 = sub_1CB927410((uint64_t)&v158, (unint64_t)&v132, 1);
      sub_1CC6EAC74((uint64_t)&v158[152 * v159], v26);
      LODWORD(v159) = v159 + 1;
      if (v141 != &v143) {
        free(v141);
      }
      if (v139 != &v140) {
        free(v139);
      }
      if ((long long *)v133 != (long long *)((char *)&v134 + 8)) {
        free((void *)v133);
      }
      ++v16;
      v17 += 32;
      if (v16 >= (*(_DWORD *)(v11 + 40) - 1))
      {
        unint64_t v12 = v122;
        unint64_t v13 = v122[1];
        break;
      }
    }
  }
  uint64_t v27 = (*(uint64_t (**)(void))(**(void **)(v13 + 16) + 136))(*(void *)(v13 + 16));
  int v28 = (void *)(*(uint64_t (**)(void))(**(void **)(v12[1] + 16) + 120))(*(void *)(v12[1] + 16));
  uint64_t v29 = 379;
  uint64_t v30 = 382;
  switch(**(_WORD **)(v11 + 16))
  {
    case 0xEB:
      __break(1u);
      goto LABEL_165;
    case 0xEC:
      uint64_t v29 = 380;
      goto LABEL_28;
    case 0xED:
      uint64_t v29 = 381;
      goto LABEL_28;
    case 0xEE:
      goto LABEL_29;
    default:
LABEL_28:
      **((_DWORD **)v158 + 1) |= 0x80u;
      uint64_t v30 = v29;
LABEL_29:
      uint64_t v31 = v28[v30 + 21756];
      if (!v31)
      {
        uint64_t v46 = 2;
        goto LABEL_131;
      }
      int v132 = 0;
      LODWORD(v133) = v133 & 0xFFF00000 | 1;
      uint64_t v4 = (uint64_t *)&v132;
      long long v134 = 0u;
      unint64_t v136 = 0;
      v137[0] = v138;
      uint64_t v121 = v138;
      uint64_t v5 = 0x400000000;
      v137[1] = (void *)0x400000000;
      LOBYTE(v141) = 0;
      unint64_t v120 = v144;
      uint64_t v142 = v144;
      uint64_t v143 = 0x400000000;
      uint64_t v119 = &v146;
      v145[0] = &v146;
      uint64_t v6 = 0x200000000;
      v145[1] = (void *)0x200000000;
      uint64_t v147 = 0;
      uint64_t v118 = (char *)v151;
      uint64_t v149 = v151;
      uint64_t v150 = 0x2000000000;
      v151[1216] = 0;
      char v154 = 0;
      long long v152 = 0u;
      char v153 = 0;
      int v155 = 0;
      char v156 = 1;
      int v157 = 0;
      int v32 = *((_DWORD *)v28 + v30 + 45425);
      uint64_t v133 = 9;
      *((void *)&v134 + 1) = v31;
      int v132 = v32;
      int v135 = 0;
      int v123 = 0;
      unint64_t v12 = (unint64_t *)&v124;
      sub_1CB925510((uint64_t)&v124, &v123, 1, *(void *)v14 + 1576, 0, 0, 0, 1, 0);
      unint64_t v136 = v124;
      sub_1CB9276BC((uint64_t)v137, (uint64_t)&v125);
      LOBYTE(v141) = v127[48];
      sub_1CB927804((uint64_t)&v142, (uint64_t)&v128);
      sub_1CB927804((uint64_t)v145, (uint64_t)&v129);
      uint64_t v147 = v130[1];
      int v148 = v131;
      int v28 = v129;
      if (v129 != v130) {
LABEL_165:
      }
        free(v28);
      if (v128 != v12 + 12) {
        free(v128);
      }
      if (v125 != v127) {
        free(v125);
      }
      uint64_t v33 = *(void *)(*(void *)(v11 + 32) + 32 * (*(_DWORD *)(v11 + 40) - 1) + 16);
      if (!v33) {
        goto LABEL_84;
      }
      unint64_t v34 = v122[2];
      uint64_t v35 = *(void *)(v11 + 24);
      uint64_t v36 = **(void **)(v35 + 32);
      uint64_t v37 = *(void *)(v36 + 112);
      unint64_t v38 = **(void **)v36;
      if (v37 && *(_DWORD *)(v37 + 8) > 1u)
      {
        uint64_t v47 = *(void *)(v37 + 48);
        uint64_t v124 = v38;
        uint64_t v125 = v127;
        uint64_t v126 = 0x800000000;
        if (v47)
        {
          uint64_t v39 = (char *)(v47 + 48);
          int v40 = (char *)(v47 + 48 + 8 * *(unsigned int *)(v47 + 8));
        }
        else
        {
          uint64_t v39 = 0;
          int v40 = 0;
        }
      }
      else
      {
        uint64_t v39 = 0;
        int v40 = 0;
        uint64_t v124 = v38;
        uint64_t v125 = v127;
        uint64_t v126 = 0x800000000;
      }
      sub_1CC512940((uint64_t)&v125, (uint64_t)v127, v39, v40);
      llvm::AttrBuilder::removeAttribute((uint64_t)&v124, 19);
      llvm::AttrBuilder::removeAttribute((uint64_t)&v124, 39);
      int v41 = v126;
      if (v125 != v127) {
        free(v125);
      }
      if (v41) {
        goto LABEL_83;
      }
      if (v37 && *(_DWORD *)(v37 + 8) >= 2u)
      {
        uint64_t v54 = *(void *)(v37 + 48);
        if (v54)
        {
          if ((*(unsigned char *)(v54 + 20) & 8) != 0) {
            goto LABEL_83;
          }
        }
        uint64_t v55 = *(void *)(v37 + 48);
        if (v55)
        {
          if (*(unsigned char *)(v55 + 18)) {
            goto LABEL_83;
          }
        }
      }
      uint64_t v42 = *(void *)(v11 + 8);
      uint64_t v43 = v35 + 48;
      if (v42 == v43) {
        goto LABEL_81;
      }
      break;
  }
  while (1)
  {
    int v44 = **(unsigned __int16 **)(v42 + 16);
    if ((v44 - 13) >= 5 && v44 != 23) {
      break;
    }
    uint64_t v42 = *(void *)(v42 + 8);
    if (v42 == v43) {
      goto LABEL_83;
    }
  }
  if (v44 == 19)
  {
    if (**(_WORD **)(v11 + 16) == 238) {
      goto LABEL_83;
    }
    int v48 = *(_DWORD *)(*(void *)(v11 + 32) + 4);
    if ((v48 & 0x80000000) == 0) {
      goto LABEL_83;
    }
    uint64_t v49 = *(void *)(v42 + 32);
    if (v48 != *(_DWORD *)(v49 + 36)) {
      goto LABEL_83;
    }
    int v50 = *(_DWORD *)(v49 + 4);
    if ((v50 - 1) > 0x3FFFFFFE) {
      goto LABEL_83;
    }
    uint64_t v42 = *(void *)(v42 + 8);
    if (v42 == v43) {
      goto LABEL_83;
    }
    while (1)
    {
      int v51 = *(unsigned __int16 **)(v42 + 16);
      int v52 = *v51;
      if ((v52 - 13) >= 5 && v52 != 23) {
        break;
      }
      LOBYTE(v33) = 0;
      uint64_t v42 = *(void *)(v42 + 8);
      if (v42 == v43) {
        goto LABEL_84;
      }
    }
    uint64_t v56 = *((void *)v51 + 1);
    if ((*(_WORD *)(v42 + 44) & 0xC) != 0 && (*(_WORD *)(v42 + 44) & 4) == 0)
    {
      if ((v56 & 0x20) == 0)
      {
        uint64_t v102 = v42;
        while ((*(_WORD *)(v102 + 44) & 8) != 0)
        {
          uint64_t v102 = *(void *)(v102 + 8);
          if ((*(unsigned char *)(*(void *)(v102 + 16) + 8) & 0x20) != 0) {
            goto LABEL_79;
          }
        }
        goto LABEL_83;
      }
    }
    else if ((v56 & 0x20) == 0)
    {
LABEL_83:
      LOBYTE(v33) = 0;
      goto LABEL_84;
    }
LABEL_79:
    int v58 = *(_DWORD *)(v42 + 40);
    if (v58 - llvm::MachineInstr::getNumExplicitOperands(v42) != 1
      || v50 != *(_DWORD *)(*(void *)(v42 + 32) + 4))
    {
      goto LABEL_83;
    }
  }
LABEL_81:
  if (v42 == v43
    || ((*(uint64_t (**)(unint64_t, uint64_t))(*(void *)v34 + 1136))(v34, v42) & 1) != 0)
  {
    goto LABEL_83;
  }
  __int16 v99 = *(_WORD *)(v42 + 44);
  unint64_t v100 = *(void *)(*(void *)(v42 + 16) + 8);
  if ((v99 & 0xC) == 0 || (v99 & 4) != 0)
  {
    uint64_t v33 = (v100 >> 5) & 1;
  }
  else if ((v100 & 0x20) != 0)
  {
    LOBYTE(v33) = 1;
  }
  else
  {
    do
    {
      unsigned int v101 = *(unsigned __int16 *)(v42 + 44);
      LODWORD(v33) = (v101 >> 3) & 1;
      if ((v101 & 8) == 0) {
        break;
      }
      uint64_t v42 = *(void *)(v42 + 8);
    }
    while ((*(unsigned char *)(*(void *)(v42 + 16) + 8) & 0x20) == 0);
  }
LABEL_84:
  BYTE1(v155) = v33;
  if (v159)
  {
    uint64_t v59 = (uint64_t)(v4 + 24);
    unint64_t v60 = (unint64_t)v158;
    uint64_t v61 = 152 * v159;
    do
    {
      unint64_t v62 = sub_1CB927410(v59, v60, 1);
      uint64_t v63 = v149;
      int v64 = v150;
      uint64_t v65 = &v149[38 * v150];
      *(void *)uint64_t v65 = *(void *)v62;
      *((void *)v65 + 1) = v65 + 6;
      *((void *)v65 + 2) = v5;
      if (*(_DWORD *)(v62 + 16)) {
        sub_1CB927924((uint64_t)(v65 + 2), v62 + 8);
      }
      *((unsigned char *)v65 + 72) = *(unsigned char *)(v62 + 72);
      int v66 = &v63[38 * v64];
      *((void *)v66 + 10) = v66 + 24;
      uint64_t v67 = (uint64_t)(v66 + 20);
      *(void *)(v67 + 8) = v5;
      if (*(_DWORD *)(v62 + 88)) {
        sub_1CB927A18(v67, v62 + 80);
      }
      uint64_t v68 = &v63[38 * v64];
      *((void *)v68 + 14) = v68 + 32;
      uint64_t v69 = (uint64_t)(v68 + 28);
      *(void *)(v69 + 8) = v6;
      if (*(_DWORD *)(v62 + 120)) {
        sub_1CB927A18(v69, v62 + 112);
      }
      unint64_t v70 = &v63[38 * v64];
      uint64_t v71 = *(void *)(v62 + 136);
      v70[36] = *(_DWORD *)(v62 + 144);
      *((void *)v70 + 17) = v71;
      LODWORD(v150) = v150 + 1;
      v60 += 152;
      v61 -= 152;
    }
    while (v61);
  }
  if (!(*(unsigned int (**)(uint64_t, unint64_t *, int *))(*(void *)v27 + 72))(v27, v122, &v132))
  {
    uint64_t v46 = 2;
    goto LABEL_113;
  }
  if (!BYTE2(v155))
  {
    uint64_t v46 = 1;
    goto LABEL_113;
  }
  uint64_t v72 = v117;
  sub_1CC734BA0(v117);
  unint64_t v73 = *(void **)(v117 + 168);
  if (v73 == *(void **)(v117 + 160)) {
    goto LABEL_96;
  }
  uint64_t v97 = *(unsigned int *)(v117 + 176);
  if (v97 < 0x21 || 4 * (*(_DWORD *)(v117 + 180) - *(_DWORD *)(v117 + 184)) >= v97)
  {
    memset(v73, 255, 8 * v97);
LABEL_96:
    *(_DWORD *)(v117 + 180) = 0;
    *(_DWORD *)(v117 + 184) = 0;
    goto LABEL_97;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(v117 + 160));
LABEL_97:
  uint64_t v74 = *(unsigned int *)(v117 + 96);
  if (v74)
  {
    uint64_t v103 = *(void *)(v117 + 88) - 8;
    uint64_t v104 = 8 * v74;
    uint64_t v72 = v117;
    do
    {
      uint64_t v105 = *(unsigned __int8 **)(v103 + v104);
      if (v105)
      {
        int v106 = *v105;
        if ((v106 - 4) > 0x1E)
        {
          if ((v106 - 3) >= 0xFFFFFFFE) {
            uint64_t v107 = *(void *)(v103 + v104);
          }
          else {
            uint64_t v107 = 0;
          }
          if ((v106 - 3) < 0xFFFFFFFE)
          {
            if (v106 == 3) {
              *((void *)v105 + 1) = 0;
            }
            goto LABEL_171;
          }
          unint64_t v108 = v107 + 8;
        }
        else
        {
          if ((v105[1] & 0x7F) != 2 && !*((_DWORD *)v105 + 3)) {
            goto LABEL_171;
          }
          uint64_t v109 = *((void *)v105 + 2);
          if ((v109 & 4) == 0) {
            goto LABEL_171;
          }
          unint64_t v108 = v109 & 0xFFFFFFFFFFFFFFF8;
          if (!v108) {
            goto LABEL_171;
          }
        }
        uint64_t v124 = v103 + v104;
        sub_1CC5FA668(v108 + 16, &v124);
      }
LABEL_171:
      v104 -= 8;
    }
    while (v104);
  }
  uint64_t v76 = v72 + 144;
  int v75 = *(void **)(v72 + 144);
  *(_DWORD *)(v72 + 96) = 0;
  uint64_t v77 = v72 + 136;
  sub_1CC715554(v72 + 136, v75);
  *(void *)(v72 + 136) = v72 + 144;
  *(void *)(v72 + 144) = 0;
  *(void *)(v72 + 152) = 0;
  uint64_t v78 = *(void *)(v11 + 24);
  uint64_t v79 = *(llvm::MachineInstr **)(v11 + 8);
  do
  {
    if (v79 == (llvm::MachineInstr *)(v78 + 48)) {
      int v80 = 0;
    }
    else {
      int v80 = v79;
    }
    llvm::MachineInstr::eraseFromParent(v80);
    uint64_t v78 = *(void *)(v11 + 24);
    uint64_t v79 = *(llvm::MachineInstr **)(v11 + 8);
  }
  while (v79 != (llvm::MachineInstr *)(v78 + 48) && v79 != 0);
  uint64_t v82 = *(void **)(v72 + 168);
  if (v82 == *(void **)(v72 + 160)) {
    goto LABEL_108;
  }
  uint64_t v98 = *(unsigned int *)(v72 + 176);
  if (v98 < 0x21 || 4 * (*(_DWORD *)(v72 + 180) - *(_DWORD *)(v72 + 184)) >= v98)
  {
    memset(v82, 255, 8 * v98);
LABEL_108:
    *(_DWORD *)(v72 + 180) = 0;
    *(_DWORD *)(v72 + 184) = 0;
    goto LABEL_109;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(v117 + 160));
LABEL_109:
  uint64_t v83 = *(unsigned int *)(v72 + 96);
  if (v83)
  {
    uint64_t v110 = *(void *)(v72 + 88) - 8;
    uint64_t v111 = 8 * v83;
    uint64_t v72 = v117;
    do
    {
      uint64_t v112 = *(unsigned __int8 **)(v110 + v111);
      if (v112)
      {
        int v113 = *v112;
        if ((v113 - 4) > 0x1E)
        {
          if ((v113 - 3) >= 0xFFFFFFFE) {
            uint64_t v114 = *(void *)(v110 + v111);
          }
          else {
            uint64_t v114 = 0;
          }
          if ((v113 - 3) < 0xFFFFFFFE)
          {
            if (v113 == 3) {
              *((void *)v112 + 1) = 0;
            }
            goto LABEL_189;
          }
          unint64_t v115 = v114 + 8;
        }
        else
        {
          if ((v112[1] & 0x7F) != 2 && !*((_DWORD *)v112 + 3)) {
            goto LABEL_189;
          }
          uint64_t v116 = *((void *)v112 + 2);
          if ((v116 & 4) == 0) {
            goto LABEL_189;
          }
          unint64_t v115 = v116 & 0xFFFFFFFFFFFFFFF8;
          if (!v115) {
            goto LABEL_189;
          }
        }
        uint64_t v124 = v110 + v111;
        sub_1CC5FA668(v115 + 16, &v124);
      }
LABEL_189:
      v111 -= 8;
    }
    while (v111);
  }
  *(_DWORD *)(v72 + 96) = 0;
  sub_1CC715554(v77, *(void **)(v72 + 144));
  *(void *)(v72 + 144) = 0;
  *(void *)(v72 + 152) = 0;
  uint64_t v46 = 1;
  *(void *)(v72 + 136) = v76;
LABEL_113:
  unint64_t v84 = (char *)v149;
  if (v150)
  {
    uint64_t v85 = 152 * v150;
    do
    {
      uint64_t v86 = &v84[v85];
      uint64_t v87 = *(char **)&v84[v85 - 40];
      if (&v84[v85 - 24] != v87) {
        free(v87);
      }
      uint64_t v88 = (char *)*((void *)v86 - 9);
      if (v86 - 56 != v88) {
        free(v88);
      }
      int v89 = *(char **)&v84[v85 - 144];
      if (&v84[v85 - 128] != v89) {
        free(v89);
      }
      v85 -= 152;
    }
    while (v85);
    unint64_t v84 = (char *)v149;
  }
  if (v84 != v118) {
    free(v84);
  }
  if (v145[0] != v119) {
    free(v145[0]);
  }
  if (v142 != v120) {
    free(v142);
  }
  if (v137[0] != v121) {
    free(v137[0]);
  }
LABEL_131:
  unsigned int v90 = v158;
  if (v159)
  {
    uint64_t v91 = 152 * v159;
    do
    {
      uint64_t v92 = &v90[v91];
      uint64_t v93 = *(char **)&v90[v91 - 40];
      if (&v90[v91 - 24] != v93) {
        free(v93);
      }
      uint64_t v94 = (char *)*((void *)v92 - 9);
      if (v92 - 56 != v94) {
        free(v94);
      }
      int v95 = *(char **)&v90[v91 - 144];
      if (&v90[v91 - 128] != v95) {
        free(v95);
      }
      v91 -= 152;
    }
    while (v91);
    unsigned int v90 = v158;
  }
  if (v90 != (char *)v160) {
    free(v90);
  }
  return v46;
}

uint64_t sub_1CC72653C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = a2;
  v60[57] = *MEMORY[0x1E4F143B8];
  if (**(unsigned __int16 **)(a1 + 16) <= 0xD1u)
  {
    switch(**(_WORD **)(a1 + 16))
    {
      case 0xA3:
        HIDWORD(v8) = a3;
        LODWORD(v8) = a3 - 32;
        int v7 = v8 >> 4;
        uint64_t v9 = &unk_1CFB1CB40;
        goto LABEL_42;
      case 0xA4:
        HIDWORD(v23) = a3;
        LODWORD(v23) = a3 - 32;
        int v7 = v23 >> 4;
        uint64_t v9 = &unk_1CFB1CB78;
        goto LABEL_42;
      case 0xA5:
        HIDWORD(v16) = a3;
        LODWORD(v16) = a3 - 32;
        int v7 = v16 >> 4;
        uint64_t v9 = &unk_1CFB1CBB0;
        goto LABEL_42;
      case 0xA6:
        HIDWORD(v17) = a3;
        LODWORD(v17) = a3 - 32;
        int v7 = v17 >> 4;
        uint64_t v9 = &unk_1CFB1CD00;
        goto LABEL_42;
      case 0xA7:
      case 0xAB:
      case 0xB1:
      case 0xB2:
      case 0xB3:
      case 0xB4:
      case 0xB5:
      case 0xB6:
      case 0xB7:
      case 0xB8:
      case 0xB9:
      case 0xBA:
        goto LABEL_82;
      case 0xA8:
        HIDWORD(v24) = a3;
        LODWORD(v24) = a3 - 32;
        int v7 = v24 >> 4;
        uint64_t v9 = &unk_1CFB1CBE8;
        goto LABEL_42;
      case 0xA9:
        HIDWORD(v18) = a3;
        LODWORD(v18) = a3 - 32;
        int v7 = v18 >> 4;
        uint64_t v9 = &unk_1CFB1CC90;
        goto LABEL_42;
      case 0xAA:
        HIDWORD(v25) = a3;
        LODWORD(v25) = a3 - 32;
        int v7 = v25 >> 4;
        uint64_t v9 = &unk_1CFB1CCC8;
        goto LABEL_42;
      case 0xAC:
        HIDWORD(v19) = a3;
        LODWORD(v19) = a3 - 32;
        int v7 = v19 >> 4;
        uint64_t v9 = &unk_1CFB1CC20;
        goto LABEL_42;
      case 0xAD:
        HIDWORD(v26) = a3;
        LODWORD(v26) = a3 - 32;
        int v7 = v26 >> 4;
        uint64_t v9 = &unk_1CFB1CC58;
        goto LABEL_42;
      case 0xAE:
        HIDWORD(v13) = a3;
        LODWORD(v13) = a3 - 32;
        int v7 = v13 >> 4;
        uint64_t v9 = &unk_1CFB1CDE0;
        goto LABEL_42;
      case 0xAF:
        HIDWORD(v27) = a3;
        LODWORD(v27) = a3 - 32;
        int v7 = v27 >> 4;
        uint64_t v9 = &unk_1CFB1CE18;
        goto LABEL_42;
      case 0xB0:
        HIDWORD(v11) = a3;
        LODWORD(v11) = a3 - 32;
        int v7 = v11 >> 4;
        uint64_t v9 = &unk_1CFB1CDA8;
        goto LABEL_42;
      case 0xBB:
        HIDWORD(v14) = a3;
        LODWORD(v14) = a3 - 32;
        int v7 = v14 >> 4;
        uint64_t v9 = &unk_1CFB1CEC0;
        goto LABEL_42;
      case 0xBC:
        HIDWORD(v20) = a3;
        LODWORD(v20) = a3 - 32;
        int v7 = v20 >> 4;
        uint64_t v9 = &unk_1CFB1CEF8;
        goto LABEL_42;
      default:
        switch(**(_WORD **)(a1 + 16))
        {
          case ';':
            if (a3 == 32)
            {
              uint64_t v10 = 23;
            }
            else if (a3 == 128)
            {
              uint64_t v10 = 25;
            }
            else
            {
              uint64_t v10 = 24;
            }
            break;
          case '<':
            if (a3 == 32)
            {
              uint64_t v10 = 29;
            }
            else if (a3 == 128)
            {
              uint64_t v10 = 31;
            }
            else
            {
              uint64_t v10 = 30;
            }
            break;
          case '=':
            if (a3 == 32)
            {
              uint64_t v10 = 35;
            }
            else if (a3 == 128)
            {
              uint64_t v10 = 37;
            }
            else
            {
              uint64_t v10 = 36;
            }
            break;
          case '>':
            if (a3 == 32)
            {
              uint64_t v10 = 41;
            }
            else if (a3 == 128)
            {
              uint64_t v10 = 43;
            }
            else
            {
              uint64_t v10 = 42;
            }
            break;
          default:
            HIDWORD(v12) = a3;
            LODWORD(v12) = a3 - 32;
            int v7 = v12 >> 4;
            uint64_t v9 = &unk_1CFB1CFD8;
            goto LABEL_42;
        }
        goto LABEL_43;
    }
  }
  switch(**(_WORD **)(a1 + 16))
  {
    case 0xD3:
    case 0xD4:
    case 0xD5:
LABEL_82:
      __break(1u);
      JUMPOUT(0x1CC726B3CLL);
    case 0xD6:
      HIDWORD(v28) = a3;
      LODWORD(v28) = a3 - 32;
      int v7 = v28 >> 4;
      uint64_t v9 = &unk_1CFB1CE50;
      goto LABEL_42;
    case 0xD7:
      HIDWORD(v21) = a3;
      LODWORD(v21) = a3 - 32;
      int v7 = v21 >> 4;
      uint64_t v9 = &unk_1CFB1CD70;
      goto LABEL_42;
    case 0xD8:
      HIDWORD(v15) = a3;
      LODWORD(v15) = a3 - 32;
      int v7 = v15 >> 4;
      uint64_t v9 = &unk_1CFB1CD38;
      goto LABEL_42;
    case 0xD9:
      HIDWORD(v29) = a3;
      LODWORD(v29) = a3 - 32;
      int v7 = v29 >> 4;
      uint64_t v9 = &unk_1CFB1CF30;
      goto LABEL_42;
    case 0xDA:
      HIDWORD(v30) = a3;
      LODWORD(v30) = a3 - 32;
      int v7 = v30 >> 4;
      uint64_t v9 = &unk_1CFB1CE88;
      goto LABEL_42;
    case 0xDB:
      HIDWORD(v31) = a3;
      LODWORD(v31) = a3 - 32;
      int v7 = v31 >> 4;
      uint64_t v9 = &unk_1CFB1CF68;
      goto LABEL_42;
    case 0xDC:
      HIDWORD(v22) = a3;
      LODWORD(v22) = a3 - 32;
      int v7 = v22 >> 4;
      uint64_t v9 = &unk_1CFB1CFA0;
LABEL_42:
      uint64_t v10 = v9[v7];
      break;
    default:
      if (a3 == 32)
      {
        uint64_t v10 = 59;
      }
      else if (a3 == 128)
      {
        uint64_t v10 = 61;
      }
      else
      {
        uint64_t v10 = 60;
      }
      break;
  }
LABEL_43:
  int v58 = (char *)v60;
  uint64_t v59 = 0x300000000;
  uint64_t v32 = *(void *)(a1 + 32);
  uint64_t v33 = *(unsigned int *)(a1 + 40);
  if (v33 != 1)
  {
    uint64_t v48 = v10;
    uint64_t v49 = a2;
    uint64_t v34 = 32 * v33 - 32;
    uint64_t v35 = (int *)(v32 + 36);
    do
    {
      int v36 = *v35;
      v35 += 8;
      int v50 = v36;
      sub_1CB925510((uint64_t)v51, &v50, 1, a4, 0, 0, 0, 1, 0);
      unint64_t v37 = sub_1CB927410((uint64_t)&v58, (unint64_t)v51, 1);
      sub_1CC6EAC74((uint64_t)&v58[152 * v59], v37);
      LODWORD(v59) = v59 + 1;
      if (v56 != v57) {
        free(v56);
      }
      if (v54 != v55) {
        free(v54);
      }
      if (v52 != v53) {
        free(v52);
      }
      v34 -= 32;
    }
    while (v34);
    uint64_t v32 = *(void *)(a1 + 32);
    uint64_t v10 = v48;
    uint64_t v5 = v49;
  }
  int v50 = *(_DWORD *)(v32 + 4);
  sub_1CB925510((uint64_t)v51, &v50, 1, a4, 0, 0, 0, 1, 0);
  uint64_t v38 = (uint64_t)v58;
  uint64_t v39 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v5 + 8) + 16) + 120))(*(void *)(*(void *)(v5 + 8) + 16));
  uint64_t v40 = sub_1CD619348(v5, *(void *)(v39 + 8 * v10 + 174048), (uint64_t)v51, v38);
  if (v56 != v57) {
    free(v56);
  }
  if (v54 != v55) {
    free(v54);
  }
  if (v52 != v53) {
    free(v52);
  }
  int v41 = v58;
  if (v59)
  {
    uint64_t v42 = 152 * v59;
    do
    {
      uint64_t v43 = &v41[v42];
      int v44 = *(char **)&v41[v42 - 40];
      if (&v41[v42 - 24] != v44) {
        free(v44);
      }
      uint64_t v45 = (char *)*((void *)v43 - 9);
      if (v43 - 56 != v45) {
        free(v45);
      }
      uint64_t v46 = *(char **)&v41[v42 - 144];
      if (&v41[v42 - 128] != v46) {
        free(v46);
      }
      v42 -= 152;
    }
    while (v42);
    int v41 = v58;
  }
  if (v41 != (char *)v60) {
    free(v41);
  }
  return v40;
}

uint64_t sub_1CC726BE0(void *a1, unint64_t a2)
{
  unint64_t v8 = a2;
  if ((a2 & 1) == 0) {
    return 0;
  }
  uint64_t v5 = sub_1CB8F1DC4(&v8);
  if (v4 == 1)
  {
    uint64_t v7 = v5;
    uint64_t v5 = v7;
  }
  uint64_t result = 0;
  *((void *)&v6 + 1) = v5;
  *(void *)&long long v6 = v5 - 16;
  switch((unint64_t)(v6 >> 4))
  {
    case 0uLL:
      uint64_t result = *a1 + 1624;
      break;
    case 1uLL:
      uint64_t result = *a1 + 1672;
      break;
    case 3uLL:
      uint64_t result = *a1 + 1696;
      break;
    case 4uLL:
      uint64_t result = *a1 + 1768;
      break;
    case 7uLL:
      uint64_t result = *a1 + 1792;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1CC726CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v32[3] = *MEMORY[0x1E4F143B8];
  int v8 = **(unsigned __int16 **)(a1 + 16);
  char VT = llvm::MVT::getVT(a3, 0, a3);
  char v11 = llvm::MVT::getVT(a4, 0, v10);
  switch(v8)
  {
    case 179:
      unsigned int FPROUND = llvm::RTLIB::getFPROUND(v11, 0, VT);
      break;
    case 180:
      unsigned int FPROUND = llvm::RTLIB::getFPTOSINT(v11, 0, VT);
      break;
    case 181:
      unsigned int FPROUND = llvm::RTLIB::getFPTOUINT(v11, 0, VT);
      break;
    case 182:
      unsigned int FPROUND = llvm::RTLIB::getSINTTOFP(v11, 0, VT);
      break;
    case 183:
      unsigned int FPROUND = llvm::RTLIB::getUINTTOFP(v11, 0, VT);
      break;
    default:
      unsigned int FPROUND = llvm::RTLIB::getFPEXT(v11, 0, VT);
      break;
  }
  unsigned int v13 = FPROUND;
  int v18 = *(_DWORD *)(*(void *)(a1 + 32) + 4);
  sub_1CB925510((uint64_t)v26, &v18, 1, a3, 0, 0, 0, 1, 0);
  int v17 = *(_DWORD *)(*(void *)(a1 + 32) + 36);
  sub_1CB925510((uint64_t)v19, &v17, 1, a4, 0, 0, 0, 1, 0);
  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a2 + 8) + 16) + 120))(*(void *)(*(void *)(a2 + 8) + 16));
  uint64_t v15 = sub_1CD619348(a2, *(void *)(v14 + 8 * v13 + 174048), (uint64_t)v26, (uint64_t)v19);
  if (v24 != &v25) {
    free(v24);
  }
  if (v22 != &v23) {
    free(v22);
  }
  if (v20 != &v21) {
    free(v20);
  }
  if (v31 != v32) {
    free(v31);
  }
  if (v29 != &v30) {
    free(v29);
  }
  if (v27 != &v28) {
    free(v27);
  }
  return v15;
}

uint64_t sub_1CC726FA8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v30[1] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = a3;
  uint64_t v5 = *(_DWORD **)(a2 + 32);
  int v6 = v5[1];
  int v7 = v5[9];
  int v8 = v5[17];
  if (v6 < 0 && (uint64_t v9 = a1[2], (v6 & 0x7FFFFFFFu) < *(_DWORD *)(v9 + 432)))
  {
    unint64_t v21 = *(void *)(*(void *)(v9 + 424) + 8 * (v6 & 0x7FFFFFFF));
    if ((v21 & 0xFFFFFFFFFFFFFFF9) != 0 && (v21 & 4) != 0) {
      return 2;
    }
  }
  else
  {
    unint64_t v21 = 0;
  }
  unsigned int v12 = sub_1CB8F1DC4(&v21);
  if (v11 == 1) {
  unsigned int v13 = sub_1CB8F1DC4((unint64_t *)&v22);
  }
  if (v14 == 1)
  {
    unsigned int v19 = v13;
    unsigned int v13 = v19;
  }
  uint64_t v15 = v12 / v13;
  if (v12 % v13) {
    return 2;
  }
  unsigned int v17 = v15 << (**(unsigned __int16 **)(a2 + 16) == 147);
  uint64_t v28 = v30;
  uint64_t v29 = 0x200000000;
  uint64_t v25 = &v27;
  uint64_t v26 = 0x200000000;
  v23[0] = &v24;
  v23[1] = (void *)0x200000000;
  sub_1CBA0E058((uint64_t)v23, v17, 0);
  sub_1CC724218(a1, v7, v22, v15, (uint64_t)&v28);
  sub_1CC724218(a1, v8, v22, v15, (uint64_t)&v25);
  sub_1CD62518C(*a1, (uint64_t)v23, (int *)v28, v29, (int *)v25, v26, v22);
  uint64_t v18 = *a1;
  v20[0] = v6;
  void v20[2] = 1;
  sub_1CC73661C(v18, (uint64_t)v20, (int *)v23[0] + v17 - v15, v15);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  if (v23[0] != &v24) {
    free(v23[0]);
  }
  if (v25 != &v27) {
    free(v25);
  }
  if (v28 != v30) {
    free(v28);
  }
  return 1;
}

uint64_t sub_1CC7271E8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2 + 32 * a4;
  uint64_t v9 = a3;
  int v10 = 0;
  v8[0] = *(_DWORD *)(v5 + 4);
  _OWORD v8[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a1 + 32))(a1, a5, &v9, 1, v8, 1, 0);
  return llvm::MachineOperand::setReg(v5, *(_DWORD *)(*(void *)(v6 + 32) + 4));
}

uint64_t sub_1CC7272A4(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1[2];
  unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v7, "", 0);
  unint64_t v9 = IncompleteVirtualRegister & 0x7FFFFFFF;
  *(void *)(*(void *)(v7 + 24) + 16 * v9) = 4;
  unint64_t v10 = *(unsigned int *)(v7 + 432);
  if (v9 >= v10)
  {
    uint64_t v11 = *(void *)(v7 + 440);
    uint64_t v12 = v9 + 1 - v10;
    if (v9 >= *(unsigned int *)(v7 + 436)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v13 = *(_DWORD *)(v7 + 432);
    if (v12)
    {
      uint64_t v14 = (void *)(*(void *)(v7 + 424) + 8 * *(unsigned int *)(v7 + 432));
      uint64_t v15 = ~v9 + v10;
      do
        *v14++ = v11;
      while (!__CFADD__(v15++, 1));
      int v13 = *(_DWORD *)(v7 + 432);
    }
    *(_DWORD *)(v7 + 432) = v13 + v12;
  }
  *(void *)(*(void *)(v7 + 424) + 8 * v9) = a3;
  uint64_t v17 = *(void *)(v7 + 8);
  if (v17) {
    (*(void (**)(uint64_t, void))(*(void *)v17 + 24))(v17, IncompleteVirtualRegister);
  }
  uint64_t v18 = *(void *)(*a1 + 48);
  if (!v18 || (*(unsigned char *)v18 & 4) == 0)
  {
    while ((*(_WORD *)(v18 + 44) & 8) != 0)
      uint64_t v18 = *(void *)(v18 + 8);
  }
  uint64_t v19 = a2 + 32 * a4;
  *(void *)(*a1 + 48) = *(void *)(v18 + 8);
  uint64_t v20 = *a1;
  v26[0] = *(_DWORD *)(v19 + 4);
  void v26[2] = 1;
  v25[0] = IncompleteVirtualRegister;
  v25[4] = 0;
  (*(void (**)(uint64_t, void, _DWORD *, uint64_t, _DWORD *, uint64_t, void))(*(void *)v20 + 32))(v20, a5, v26, 1, v25, 1, 0);
  return llvm::MachineOperand::setReg(v19, IncompleteVirtualRegister);
}

uint64_t sub_1CC7274B0(uint64_t a1, void *a2, int a3, unint64_t a4)
{
  v11[0] = a3;
  v11[4] = 0;
  uint64_t result = sub_1CC7363F0(a2, a4, v11);
  int v7 = *(_DWORD *)(v6 + 40);
  unsigned int v8 = v7 - 1;
  if (v7 != 1)
  {
    uint64_t v9 = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 8);
    do
    {
      if (v10 >= *(_DWORD *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a1 + 4 * v10) = *(_DWORD *)(*(void *)(v6 + 32) + v9 + 4);
      unsigned int v10 = *(_DWORD *)(a1 + 8) + 1;
      *(_DWORD *)(a1 + 8) = v10;
      v9 += 32;
    }
    while (32 * v8 != v9);
  }
  return result;
}

uint64_t sub_1CC72757C(uint64_t *a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  if (a3 != 1) {
    return 2;
  }
  uint64_t v6 = *(_DWORD **)(a2 + 32);
  int v7 = v6[9];
  int v8 = v6[17];
  uint64_t v9 = a1[2];
  if (v7 < 0 && (v7 & 0x7FFFFFFFu) < *(_DWORD *)(v9 + 432))
  {
    unint64_t v10 = *(void *)(*(void *)(v9 + 424) + 8 * (v7 & 0x7FFFFFFF));
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v10 = 0;
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  if ((v8 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v9 + 432))
  {
    unint64_t v11 = *(void *)(*(void *)(v9 + 424) + 8 * (v8 & 0x7FFFFFFF));
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v11 = 0;
LABEL_10:
  if ((v10 & 2) != 0)
  {
    char v91 = 35;
    char v92 = 19;
    if ((v10 & 4) == 0) {
      char v91 = 19;
    }
    unint64_t v93 = v10 >> v91;
    if ((v10 & 4) == 0) {
      char v92 = 3;
    }
    if (v10) {
      char v92 = 3;
    }
    unint64_t v13 = (8 * (unsigned __int16)(v10 >> v92)) & 0xFFFFF8000007FFFFLL | ((v93 & 0xFFFFFF) << 19) | 2;
  }
  else
  {
    char v12 = 3;
    if ((v10 & 1) == 0) {
      char v12 = 19;
    }
    unint64_t v13 = v10 & 0x8000000000000000 | (8 * (v10 >> v12)) | 1;
  }
  int v14 = v6[1];
  unint64_t v100 = v13;
  if ((a4 & 0xFFFFFFFFFFFFFFF9) != 0) {
    int v15 = (a4 >> 2) & 1;
  }
  else {
    int v15 = 0;
  }
  int v97 = v14;
  if (v15 == 1)
  {
    uint64_t v16 = 0x800000000000000;
    if ((a4 & 2) == 0) {
      uint64_t v16 = 0x8000000000000;
    }
    if ((v16 & a4) != 0) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    }
    unsigned int v17 = (unsigned __int16)(a4 >> 3);
  }
  else
  {
    unsigned int v17 = 1;
  }
  uint64_t v18 = 0x800000000000000;
  if ((v10 & 2) == 0) {
    uint64_t v18 = 0x8000000000000;
  }
  if ((v18 & v10) != 0) {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  }
  uint64_t v19 = (void *)a4;
  if (v15)
  {
    char v20 = 3;
    if ((a4 & 1) == 0) {
      char v20 = 19;
    }
    unint64_t v21 = a4 >> v20;
    if ((a4 & 2) != 0) {
      uint64_t v19 = (void *)((a4 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v21) | 2);
    }
    else {
      uint64_t v19 = (void *)(a4 & 0x8000000000000000 | (8 * v21) | 1);
    }
  }
  __int16 v99 = v19;
  uint64_t v22 = *a1;
  unsigned int v101 = (void *)a4;
  LODWORD(v102) = 0;
  LODWORD(v106) = v7;
  v108[0] = 0;
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)v22 + 32))(v22, 82, &v101, 1, &v106, 1, 0);
  int v24 = *(_DWORD *)(*(void *)(v23 + 32) + 4);
  unsigned int v26 = sub_1CB8F1DC4((unint64_t *)&v99);
  if (v25 == 1) {
  unsigned int v27 = (unsigned __int16)(v10 >> 3);
  }
  unsigned int v29 = sub_1CB8F1DC4(&v100);
  if (v28 == 1) {
  if (v17 > v27)
  }
  {
    unsigned int v31 = v10 >> 3;
    unint64_t v32 = v17 / (unsigned __int16)(v10 >> 3);
    if ((_WORD)v17 == (_WORD)v32 * (_WORD)v31)
    {
      unint64_t v33 = (unint64_t)v99;
      if (v32 != 1) {
        unint64_t v33 = sub_1CBA5A95C(v32, (unint64_t)v99);
      }
      uint64_t v34 = (llvm::IntegerType *****)*a1;
      int v106 = (void *)v11;
      LODWORD(v107) = 0;
      unint64_t v95 = v33;
      if (v11)
      {
        unint64_t v35 = (v11 >> 3);
      }
      else if ((v11 & 4) != 0)
      {
        if ((v11 & 2) != 0) {
          unint64_t v35 = (unsigned __int16)(v11 >> 19);
        }
        else {
          unint64_t v35 = (v11 >> 19);
        }
      }
      else
      {
        unint64_t v35 = (unsigned __int16)(v11 >> 3);
      }
      int v36 = (llvm::ConstantInt *)llvm::IntegerType::get(***v34[1], (llvm::LLVMContext *)v35);
      unint64_t v37 = llvm::ConstantInt::get(v36, v32, (const llvm::APInt *)1);
      uint64_t v38 = ((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*v34)[2])(v34, &v106, v37);
      uint64_t v40 = v39;
      unsigned int v101 = v103;
      uint64_t v102 = 0x800000000;
      sub_1CBA0E058((uint64_t)&v101, v32, 0);
      uint64_t v41 = *a1;
      unint64_t v104 = v11;
      int v105 = 0;
      LODWORD(v106) = v8;
      v108[0] = 0;
      uint64_t v109 = v38;
      uint64_t v110 = v40;
      int v111 = 1;
      uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v41 + 32))(v41, 47, &v104, 1, &v106, 2, 0);
      if (v17 >= (unsigned __int16)v31)
      {
        uint64_t v54 = (void *)v42;
        uint64_t v55 = v43;
        unint64_t v56 = 0;
        if (v32 <= 1) {
          uint64_t v57 = 1;
        }
        else {
          uint64_t v57 = v32;
        }
        uint64_t v58 = 0xFFFFLL;
        if ((v11 & 2) == 0) {
          uint64_t v58 = 0xFFFFFFFFLL;
        }
        uint64_t v94 = (llvm::LLVMContext *)(v58 & (v11 >> 19));
        do
        {
          uint64_t v59 = (llvm::IntegerType *****)*a1;
          int v106 = (void *)v11;
          unint64_t v60 = (v11 >> 3);
          LODWORD(v107) = 0;
          if ((v11 & 1) == 0)
          {
            if ((v11 & 4) != 0) {
              unint64_t v60 = (unint64_t)v94;
            }
            else {
              unint64_t v60 = (unsigned __int16)(v11 >> 3);
            }
          }
          uint64_t v61 = (llvm::ConstantInt *)llvm::IntegerType::get(***v59[1], (llvm::LLVMContext *)v60);
          unint64_t v62 = llvm::ConstantInt::get(v61, v56, (const llvm::APInt *)1);
          uint64_t v63 = ((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*v59)[2])(v59, &v106, v62);
          uint64_t v64 = *a1;
          unint64_t v104 = v11;
          int v105 = 0;
          int v106 = v54;
          uint64_t v107 = v55;
          v108[0] = 1;
          uint64_t v109 = v63;
          uint64_t v110 = v65;
          int v111 = 1;
          uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v64 + 32))(v64, 45, &v104, 1, &v106, 2, 0);
          uint64_t v67 = *a1;
          unint64_t v104 = (unint64_t)v99;
          int v105 = 0;
          LODWORD(v106) = v24;
          v108[0] = 0;
          uint64_t v109 = v66;
          uint64_t v110 = v68;
          int v111 = 1;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v67 + 32))(v67, 205, &v104, 1, &v106, 2, 0);
          int v44 = (int *)v101;
          *((_DWORD *)v101 + v56++) = *(_DWORD *)(*(void *)(v69 + 32) + 4);
        }
        while (v57 != v56);
      }
      else
      {
        int v44 = (int *)v101;
      }
      uint64_t v45 = *a1;
      unint64_t v104 = v95;
      int v105 = 0;
      int v46 = v102;
      int v106 = v108;
      uint64_t v107 = 0x800000000;
      if (v102 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v102)
      {
        uint64_t v47 = 0;
        uint64_t v48 = 4 * v102;
        do
        {
          int v49 = *v44++;
          int v50 = &v108[v47];
          _DWORD *v50 = v49;
          v50[4] = 0;
          v47 += 6;
          v48 -= 4;
        }
        while (v48);
        int v51 = v107;
      }
      else
      {
        int v51 = 0;
      }
      LODWORD(v107) = v51 + v46;
      uint64_t v87 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _DWORD *))(*(void *)v45 + 32))(v45, 77, &v104, 1, v108);
      uint64_t v89 = v88;
      if (v106 != v108) {
        free(v106);
      }
      uint64_t v90 = *a1;
      LODWORD(v104) = v97;
      int v105 = 1;
      int v106 = v87;
      uint64_t v107 = v89;
      v108[0] = 1;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v90 + 32))(v90, 82, &v104, 1, &v106, 1, 0);
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
      if (v101 != v103) {
        free(v101);
      }
      return 1;
    }
    return 2;
  }
  if (v17 >= v27 || v26 % v29) {
    return 2;
  }
  uint64_t v52 = 2;
  if (v29 <= v26)
  {
    v30.i32[0] = v26 / v29;
    uint8x8_t v70 = (uint8x8_t)vcnt_s8(v30);
    v70.i16[0] = vaddlv_u8(v70);
    if (v70.i32[0] <= 1u)
    {
      unint64_t v96 = 31 - __clz(v26 / v29);
      uint64_t v71 = (llvm::IntegerType *****)*a1;
      int v106 = (void *)v11;
      LODWORD(v107) = 0;
      if (v11)
      {
        unint64_t v72 = (v11 >> 3);
      }
      else if ((v11 & 4) != 0)
      {
        if ((v11 & 2) != 0) {
          unint64_t v72 = (unsigned __int16)(v11 >> 19);
        }
        else {
          unint64_t v72 = (v11 >> 19);
        }
      }
      else
      {
        unint64_t v72 = (unsigned __int16)(v11 >> 3);
      }
      unint64_t v73 = (llvm::ConstantInt *)llvm::IntegerType::get(***v71[1], (llvm::LLVMContext *)v72);
      uint64_t v52 = 1;
      uint64_t v74 = llvm::ConstantInt::get(v73, v96, (const llvm::APInt *)1);
      uint64_t v75 = ((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*v71)[2])(v71, &v106, v74);
      uint64_t v76 = *a1;
      unsigned int v101 = (void *)v11;
      LODWORD(v102) = 0;
      LODWORD(v106) = v8;
      v108[0] = 0;
      uint64_t v109 = v75;
      uint64_t v110 = v77;
      int v111 = 1;
      uint64_t v78 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)v76 + 32))(v76, 128, &v101, 1, &v106, 2, 0);
      if (v15)
      {
        uint64_t v80 = *a1;
        unsigned int v101 = v99;
        LODWORD(v102) = 0;
        LODWORD(v106) = v24;
        v108[0] = 0;
        uint64_t v109 = v78;
        uint64_t v110 = v79;
        int v111 = 1;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)v80 + 32))(v80, 205, &v101, 1, &v106, 2, 0);
        int v24 = *(_DWORD *)(*(void *)(v81 + 32) + 4);
      }
      int v82 = sub_1CC727EDC(*a1, v8, v26, v29);
      uint64_t v83 = *a1;
      unsigned int v101 = v99;
      LODWORD(v102) = 0;
      LODWORD(v106) = v24;
      v108[0] = 0;
      LODWORD(v109) = v82;
      int v111 = 0;
      unint64_t v84 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)v83 + 32))(v83, 128, &v101, 1, &v106, 2, 0);
      uint64_t v85 = *a1;
      LODWORD(v101) = v97;
      LODWORD(v102) = 1;
      int v106 = v84;
      uint64_t v107 = v86;
      v108[0] = 1;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)v85 + 32))(v85, 119, &v101, 1, &v106, 1, 0);
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    }
  }
  return v52;
}

uint64_t sub_1CC727EDC(uint64_t a1, int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = __clz(a3 / a4);
  if (a2 < 0 && (uint64_t v8 = *(void *)(a1 + 24), (a2 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v8 + 432))) {
    unint64_t v9 = *(void *)(*(void *)(v8 + 424) + 8 * (a2 & 0x7FFFFFFF));
  }
  else {
    unint64_t v9 = 0;
  }
  unsigned int v10 = 31 - v7;
  unint64_t v40 = v9;
  unint64_t v41 = v9;
  LODWORD(v42) = 0;
  unsigned int v13 = sub_1CB8F1DC4(&v40);
  if (v11 == 1) {
  if (v13 > 0x40)
  }
    operator new[]();
  BOOL v14 = v10 == v13 || v13 == 0;
  unsigned int v39 = v13;
  unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13 << v10;
  if (v14) {
    unint64_t v15 = 0;
  }
  if (v13) {
    unint64_t v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
  }
  else {
    unint64_t v16 = 0;
  }
  unint64_t v17 = ~(v16 & v15);
  unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
  if (!v13) {
    unint64_t v18 = 0;
  }
  unint64_t v38 = v18 & v17;
  unsigned int v48 = v13;
  unint64_t v47 = v18 & v17;
  unsigned int v39 = 0;
  uint64_t v19 = llvm::ConstantInt::get(****(llvm::ConstantInt *****)(a1 + 8), (llvm::LLVMContext *)&v47, v12);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)a1 + 16))(a1, &v41, v19);
  uint64_t v22 = v21;
  if (v48 >= 0x41 && v47) {
    MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
  }
  unint64_t v47 = v40;
  unsigned int v48 = 0;
  LODWORD(v41) = a2;
  int v43 = 0;
  uint64_t v44 = v20;
  uint64_t v45 = v22;
  int v46 = 1;
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)a1 + 32))(a1, 65, &v47, 1, &v41, 2, 0);
  uint64_t v25 = v24;
  unint64_t v26 = v40;
  unint64_t v36 = v40;
  int v37 = 0;
  unsigned int v27 = (llvm::LLVMContext *)(unsigned __int16)(v40 >> 3);
  uint64_t v28 = (llvm::LLVMContext *)(unsigned __int16)(v40 >> 19);
  if ((v40 & 2) == 0) {
    uint64_t v28 = (llvm::LLVMContext *)(v40 >> 19);
  }
  if ((v40 & 4) != 0) {
    unsigned int v27 = v28;
  }
  if (v40) {
    unsigned int v29 = (llvm::LLVMContext *)(v40 >> 3);
  }
  else {
    unsigned int v29 = v27;
  }
  int8x8_t v30 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a1 + 8), v29);
  unsigned int v31 = llvm::ConstantInt::get(v30, 31 - __clz(a4), (const llvm::APInt *)1);
  uint64_t v32 = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)a1 + 16))(a1, &v36, v31);
  unint64_t v47 = v26;
  unsigned int v48 = 0;
  unint64_t v41 = v23;
  uint64_t v42 = v25;
  int v43 = 1;
  uint64_t v44 = v32;
  uint64_t v45 = v33;
  int v46 = 1;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)a1 + 32))(a1, 127, &v47, 1, &v41, 2, 0);
  return *(unsigned int *)(*(void *)(v34 + 32) + 4);
}

uint64_t sub_1CC728308(uint64_t *a1, llvm::MachineInstr *a2, int a3, unint64_t a4)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 2;
  }
  unsigned int v7 = (_DWORD *)*((void *)a2 + 4);
  int v8 = v7[1];
  int v9 = v7[25];
  uint64_t v10 = a1[2];
  if (v8 < 0 && (v8 & 0x7FFFFFFFu) < *(_DWORD *)(v10 + 432))
  {
    unint64_t v11 = *(void *)(*(void *)(v10 + 424) + 8 * (v8 & 0x7FFFFFFF));
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v11 = 0;
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  if ((v9 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v10 + 432))
  {
    unint64_t v85 = *(void *)(*(void *)(v10 + 424) + 8 * (v9 & 0x7FFFFFFF));
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v85 = 0;
LABEL_10:
  if ((v11 & 2) != 0)
  {
    char v78 = 35;
    char v79 = 19;
    if ((v11 & 4) == 0) {
      char v78 = 19;
    }
    unint64_t v80 = v11 >> v78;
    if ((v11 & 4) == 0) {
      char v79 = 3;
    }
    if (v11) {
      char v79 = 3;
    }
    unint64_t v13 = (8 * (unsigned __int16)(v11 >> v79)) & 0xFFFFF8000007FFFFLL | ((v80 & 0xFFFFFF) << 19) | 2;
  }
  else
  {
    char v12 = 3;
    if ((v11 & 1) == 0) {
      char v12 = 19;
    }
    unint64_t v13 = v11 & 0x8000000000000000 | (8 * (v11 >> v12)) | 1;
  }
  int v14 = v7[17];
  int v15 = v7[9];
  unint64_t v91 = v13;
  if ((a4 & 0xFFFFFFFFFFFFFFF9) != 0) {
    int v16 = (a4 >> 2) & 1;
  }
  else {
    int v16 = 0;
  }
  unint64_t v17 = a4;
  if (v16 == 1)
  {
    char v18 = 3;
    if ((a4 & 1) == 0) {
      char v18 = 19;
    }
    unint64_t v19 = a4 >> v18;
    if ((a4 & 2) != 0) {
      unint64_t v17 = (a4 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v19) | 2;
    }
    else {
      unint64_t v17 = a4 & 0x8000000000000000 | (8 * v19) | 1;
    }
  }
  int v87 = v14;
  unint64_t v90 = v17;
  unsigned int v21 = sub_1CB8F1DC4(&v90);
  if (v20 == 1) {
  unsigned int v23 = sub_1CB8F1DC4(&v91);
  }
  if (v22 == 1) {
  int v89 = v8;
  }
  if (v16)
  {
    uint64_t v24 = 0x800000000000000;
    if ((a4 & 2) == 0) {
      uint64_t v24 = 0x8000000000000;
    }
    if ((v24 & a4) != 0) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v22);
    }
    unsigned int v25 = (unsigned __int16)(a4 >> 3);
  }
  else
  {
    unsigned int v25 = 1;
  }
  uint64_t v26 = 0x800000000000000;
  if ((v11 & 2) == 0) {
    uint64_t v26 = 0x8000000000000;
  }
  if ((v26 & v11) != 0) {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v22);
  }
  uint64_t v27 = *a1;
  unint64_t v94 = a4;
  unsigned int v95 = 0;
  LODWORD(v96) = v15;
  int v97 = 0;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v27 + 32))(v27, 82, &v94, 1, &v96, 1, 0);
  if (v25 >= (unsigned __int16)(v11 >> 3) || v21 % v23) {
    return 2;
  }
  uint64_t v30 = 2;
  if (v23 <= v21)
  {
    v29.i32[0] = v21 / v23;
    uint8x8_t v32 = (uint8x8_t)vcnt_s8(v29);
    v32.i16[0] = vaddlv_u8(v32);
    if (v32.i32[0] <= 1u)
    {
      int v33 = *(_DWORD *)(*(void *)(v28 + 32) + 4);
      unint64_t v83 = 31 - __clz(v21 / v23);
      uint64_t v34 = (llvm::IntegerType *****)*a1;
      *(void *)&long long v96 = v85;
      DWORD2(v96) = 0;
      unint64_t v35 = (llvm::LLVMContext *)(unsigned __int16)(v85 >> 3);
      unint64_t v36 = (llvm::LLVMContext *)(unsigned __int16)(v85 >> 19);
      if ((v85 & 2) == 0) {
        unint64_t v36 = (llvm::LLVMContext *)(v85 >> 19);
      }
      if ((v85 & 4) != 0) {
        unint64_t v35 = v36;
      }
      if (v85) {
        int v37 = (llvm::LLVMContext *)(v85 >> 3);
      }
      else {
        int v37 = v35;
      }
      unint64_t v38 = (llvm::ConstantInt *)llvm::IntegerType::get(***v34[1], v37);
      unsigned int v39 = llvm::ConstantInt::get(v38, v83, (const llvm::APInt *)1);
      uint64_t v40 = ((uint64_t (*)(llvm::IntegerType *****, long long *, void *))(*v34)[2])(v34, &v96, v39);
      uint64_t v41 = *a1;
      unint64_t v94 = v85;
      unsigned int v95 = 0;
      LODWORD(v96) = v9;
      int v97 = 0;
      uint64_t v98 = v40;
      __int16 v99 = v42;
      int v100 = 1;
      uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v41 + 32))(v41, 128, &v94, 1, &v96, 2, 0);
      uint64_t v86 = v43;
      int v45 = v33;
      if (v16)
      {
        uint64_t v46 = *a1;
        unint64_t v94 = v90;
        unsigned int v95 = 0;
        LODWORD(v96) = v33;
        int v97 = 0;
        uint64_t v98 = v44;
        __int16 v99 = v43;
        int v100 = 1;
        (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v46 + 32))(v46, 205, &v94, 1, &v96, 2, 0);
        int v45 = *(_DWORD *)(*(void *)(v47 + 32) + 4);
      }
      int v48 = v45;
      int v49 = sub_1CC727EDC(*a1, v9, v21, v23);
      int v50 = (llvm::ConstantInt *****)*a1;
      uint64_t v51 = *(void *)(*a1 + 24);
      int v82 = v33;
      if (v48 < 0)
      {
        int v53 = v87;
        if ((v48 & 0x7FFFFFFFu) >= *(_DWORD *)(v51 + 432)) {
          unint64_t v52 = 0;
        }
        else {
          unint64_t v52 = *(void *)(*(void *)(v51 + 424) + 8 * (v48 & 0x7FFFFFFF));
        }
      }
      else
      {
        unint64_t v52 = 0;
        int v53 = v87;
      }
      unint64_t v93 = v52;
      uint64_t v81 = v44;
      if (v53 < 0 && (v53 & 0x7FFFFFFFu) < *(_DWORD *)(v51 + 432)) {
        unint64_t v54 = *(void *)(*(void *)(v51 + 424) + 8 * (v53 & 0x7FFFFFFF));
      }
      else {
        unint64_t v54 = 0;
      }
      unint64_t v92 = v54;
      unint64_t v94 = v52;
      unsigned int v95 = 0;
      LODWORD(v96) = v53;
      int v97 = 0;
      uint64_t v55 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v50)[4])(v50, 126, &v94, 1, &v96, 1, 0);
      unint64_t v94 = v52;
      unsigned int v95 = 0;
      *(void *)&long long v96 = v55;
      *((void *)&v96 + 1) = v56;
      int v97 = 1;
      LODWORD(v98) = v49;
      int v100 = 0;
      uint64_t v88 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v50)[4])(v50, 127, &v94, 1, &v96, 2, 0);
      unint64_t v84 = v57;
      *(void *)&long long v96 = v52;
      DWORD2(v96) = 0;
      unsigned int v59 = sub_1CB8F1DC4(&v93);
      if (v58 == 1) {
      unsigned int v62 = sub_1CB8F1DC4(&v92);
      }
      if (v60 == 1) {
      unsigned int v95 = v59;
      }
      if (v59 > 0x40) {
        operator new[]();
      }
      unint64_t v94 = 0;
      if (v62)
      {
        if (v62 > 0x40) {
          llvm::APInt::setBitsSlowCase(&v94, 0, v62);
        }
        else {
          unint64_t v94 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v62;
        }
      }
      uint64_t v63 = llvm::ConstantInt::get(***v50[1], (llvm::LLVMContext *)&v94, v61);
      uint64_t v64 = ((uint64_t (*)(llvm::ConstantInt *****, long long *, void *))(*v50)[2])(v50, &v96, v63);
      uint64_t v66 = v65;
      if (v95 >= 0x41 && v94) {
        MEMORY[0x1D25D9CB0](v94, 0x1000C8000313F17);
      }
      unint64_t v94 = v93;
      unsigned int v95 = 0;
      *(void *)&long long v96 = v64;
      *((void *)&v96 + 1) = v66;
      uint64_t v30 = 1;
      int v97 = 1;
      LODWORD(v98) = v49;
      int v100 = 0;
      uint64_t v67 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v50)[4])(v50, 127, &v94, 1, &v96, 2, 0);
      unint64_t v94 = v93;
      unsigned int v95 = 0;
      *(void *)&long long v96 = v67;
      *((void *)&v96 + 1) = v68;
      int v97 = 1;
      uint64_t v69 = sub_1CD613DEC(v50, (uint64_t *)&v94, &v96);
      unint64_t v94 = v93;
      unsigned int v95 = 0;
      LODWORD(v96) = v48;
      int v97 = 0;
      uint64_t v98 = v69;
      __int16 v99 = v70;
      int v100 = 1;
      uint64_t v71 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v50)[4])(v50, 65, &v94, 1, &v96, 2, 0);
      unint64_t v94 = v93;
      unsigned int v95 = 0;
      *(void *)&long long v96 = v71;
      *((void *)&v96 + 1) = v72;
      int v97 = 1;
      uint64_t v98 = v88;
      __int16 v99 = v84;
      int v100 = 1;
      ((void (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v50)[4])(v50, 66, &v94, 1, &v96, 2, 0);
      int v74 = *(_DWORD *)(*(void *)(v73 + 32) + 4);
      if (v16)
      {
        uint64_t v75 = *a1;
        unint64_t v94 = a4;
        unsigned int v95 = 0;
        LODWORD(v96) = v82;
        int v97 = 0;
        LODWORD(v98) = v74;
        int v100 = 0;
        uint64_t v101 = v81;
        uint64_t v102 = v86;
        int v103 = 1;
        (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v75 + 32))(v75, 204, &v94, 1, &v96, 3, 0);
        int v74 = *(_DWORD *)(*(void *)(v76 + 32) + 4);
      }
      uint64_t v77 = *a1;
      LODWORD(v94) = v89;
      unsigned int v95 = 1;
      LODWORD(v96) = v74;
      int v97 = 0;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v77 + 32))(v77, 82, &v94, 1, &v96, 1, 0);
      llvm::MachineInstr::eraseFromParent(a2);
    }
  }
  return v30;
}

uint64_t sub_1CC728C54(llvm::IntegerType ******a1, uint64_t a2)
{
  int v2 = (llvm::MachineInstr *)a2;
  int v3 = a1;
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 32);
  int v5 = *(_DWORD *)(v4 + 4);
  int v6 = *(_DWORD *)(v4 + 36);
  unsigned int v7 = a1[2];
  if (v5 < 0 && (v5 & 0x7FFFFFFFu) < *((_DWORD *)v7 + 108)) {
    unint64_t v8 = (unint64_t)v7[53][v5 & 0x7FFFFFFF];
  }
  else {
    unint64_t v8 = 0;
  }
  int v9 = *(_DWORD *)(a2 + 40);
  unint64_t v62 = v8;
  if (v6 < 0 && (v6 & 0x7FFFFFFFu) < *((_DWORD *)v7 + 108)) {
    unint64_t v10 = (unint64_t)v7[53][v6 & 0x7FFFFFFF];
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v61 = v10;
  int v58 = sub_1CB8F1DC4(&v61);
  if (v11 == 1) {
  uint64_t v13 = sub_1CB8F1DC4(&v62);
  }
  if (v12 == 1) {
  uint64_t v14 = (8 * v13) | 1;
  }
  int v15 = *v3;
  uint64_t v69 = v14;
  int v70 = 0;
  LODWORD(v63) = v6;
  int v65 = 0;
  ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*v15)[4])(v15, 126, &v69, 1, &v63, 1, 0);
  int v17 = *(_DWORD *)(*(void *)(v16 + 32) + 4);
  if (v9 == 2)
  {
    int IncompleteVirtualRegister = *(_DWORD *)(*(void *)(v16 + 32) + 4);
  }
  else
  {
    uint64_t v55 = v2;
    uint64_t v56 = (llvm::LLVMContext *)v13;
    unsigned int v27 = 2;
    int v53 = v5;
    unint64_t v54 = v3;
    int v57 = v9;
    uint64_t v52 = (8 * v13) | 1;
    do
    {
      int v28 = *(_DWORD *)(*((void *)v2 + 4) + 32 * v27 + 4);
      int8x8_t v29 = *v3;
      uint64_t v69 = v14;
      int v70 = 0;
      LODWORD(v63) = v28;
      int v65 = 0;
      uint64_t v30 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*v29)[4])(v29, 126, &v69, 1, &v63, 1, 0);
      uint64_t v59 = v31;
      uint64_t v60 = v30;
      unsigned int v32 = v27 + 1;
      if (v27 + 1 != v9 || (int IncompleteVirtualRegister = v5, v14 != v62))
      {
        uint64_t v33 = (uint64_t)v3[2];
        int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v33, "", 0);
        unint64_t v34 = IncompleteVirtualRegister & 0x7FFFFFFF;
        *(void *)(*(void *)(v33 + 24) + 16 * v34) = 4;
        unint64_t v35 = *(unsigned int *)(v33 + 432);
        if (v34 >= v35)
        {
          unint64_t v36 = v34 + 1;
          uint64_t v37 = *(void *)(v33 + 440);
          if (v34 >= *(unsigned int *)(v33 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v38 = *(_DWORD *)(v33 + 432);
          if (v36 != v35)
          {
            unsigned int v39 = (void *)(*(void *)(v33 + 424) + 8 * *(unsigned int *)(v33 + 432));
            uint64_t v40 = ~v34 + v35;
            do
              *v39++ = v37;
            while (!__CFADD__(v40++, 1));
            int v38 = *(_DWORD *)(v33 + 432);
          }
          *(_DWORD *)(v33 + 432) = v38 + v36 - v35;
          uint64_t v14 = v52;
        }
        *(void *)(*(void *)(v33 + 424) + 8 * v34) = v14;
        uint64_t v42 = *(void *)(v33 + 8);
        int v3 = v54;
        if (v42) {
          (*(void (**)(uint64_t))(*(void *)v42 + 24))(v42);
        }
        int v2 = v55;
        int v5 = v53;
      }
      int v43 = *v3;
      uint64_t v63 = v14;
      LODWORD(v64) = 0;
      uint64_t v44 = (llvm::ConstantInt *)llvm::IntegerType::get(***v43[1], v56);
      int v45 = llvm::ConstantInt::get(v44, (v27 - 1) * v58, (const llvm::APInt *)1);
      uint64_t v46 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*v43)[2])(v43, &v63, v45);
      uint64_t v47 = *v3;
      uint64_t v69 = v14;
      int v70 = 0;
      uint64_t v63 = v60;
      uint64_t v64 = v59;
      int v65 = 1;
      uint64_t v66 = v46;
      uint64_t v67 = v48;
      int v68 = 1;
      uint64_t v49 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*v47)[4])(v47, 127, &v69, 1, &v63, 2, 0);
      int v50 = *v3;
      LODWORD(v69) = IncompleteVirtualRegister;
      int v70 = 1;
      LODWORD(v63) = v17;
      int v65 = 0;
      uint64_t v66 = v49;
      uint64_t v67 = v51;
      int v68 = 1;
      ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*v50)[4])(v50, 66, &v69, 1, &v63, 2, 0);
      int v17 = IncompleteVirtualRegister;
      ++v27;
      int v9 = v57;
    }
    while (v32 != v57);
  }
  if ((v62 & 0xFFFFFFFFFFFFFFF9) == 0 || (v62 & 6) != 2) {
    goto LABEL_24;
  }
  unint64_t v19 = (*(*v3)[1])[5];
  char v20 = 35;
  if ((v62 & 4) == 0) {
    char v20 = 19;
  }
  unsigned int v21 = (__int32 *)v19[82];
  size_t v22 = *((unsigned int *)v19 + 166);
  unsigned int v23 = wmemchr(v21, (v62 >> v20) & 0xFFFFFF, v22);
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = &v21[v22];
  }
  if (v22 == v24 - v21)
  {
    unsigned int v25 = *v3;
    LODWORD(v69) = v5;
    int v70 = 1;
    LODWORD(v63) = IncompleteVirtualRegister;
    int v65 = 0;
    ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*v25)[4])(v25, 81, &v69, 1, &v63, 1, 0);
LABEL_24:
    llvm::MachineInstr::eraseFromParent(v2);
    return 1;
  }
  return 2;
}

uint64_t sub_1CC729194(llvm::IntegerType ******a1, uint64_t a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 32);
  int v5 = *(_DWORD *)(v4 + 32 * (v3 - 1) + 4);
  int v6 = *(_DWORD *)(v4 + 4);
  unsigned int v7 = a1[2];
  if (v6 < 0 && (v6 & 0x7FFFFFFFu) < *((_DWORD *)v7 + 108))
  {
    unint64_t v54 = v7[53][v6 & 0x7FFFFFFF];
    if (((unint64_t)v54 & 0xFFFFFFFFFFFFFFF9) != 0 && (v54 & 6) == 2) {
      return 2;
    }
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v54 = 0;
    if ((v5 & 0x80000000) == 0)
    {
LABEL_13:
      uint64_t v55 = 0;
      goto LABEL_14;
    }
  }
  if ((v5 & 0x7FFFFFFFu) >= *((_DWORD *)v7 + 108)) {
    goto LABEL_13;
  }
  uint64_t v55 = v7[53][v5 & 0x7FFFFFFF];
  if (v55) {
    goto LABEL_42;
  }
LABEL_14:
  int v9 = (*(*a1)[1])[5];
  unsigned int v11 = sub_1CB8F1DC4((unint64_t *)&v55);
  if (v10 == 1) {
  uint64_t v12 = (8 * v11) | 1;
  }
  if (((unint64_t)v55 & 0xFFFFFFFFFFFFFFF9) != 0 && (v55 & 6) == 2)
  {
    char v13 = 35;
    if ((v55 & 4) == 0) {
      char v13 = 19;
    }
    uint64_t v14 = (__int32 *)v9[82];
    size_t v15 = *((unsigned int *)v9 + 166);
    uint64_t v16 = wmemchr(v14, ((unint64_t)v55 >> v13) & 0xFFFFFF, v15);
    if (v16) {
      int v17 = v16;
    }
    else {
      int v17 = &v14[v15];
    }
    if (v15 != v17 - v14) {
      return 2;
    }
    char v18 = *a1;
    uint64_t v62 = v12;
    int v63 = 0;
    LODWORD(v56) = v5;
    int v58 = 0;
    unint64_t v19 = (void (*)(void))(*v18)[4];
  }
  else
  {
    char v20 = 3;
    if ((v55 & 1) == 0) {
      char v20 = 19;
    }
    unint64_t v21 = (unint64_t)v55 & 0x8000000000000000 | (8 * ((unint64_t)v55 >> v20)) | 1;
    char v22 = 35;
    char v23 = 19;
    if ((v55 & 4) == 0) {
      char v22 = 19;
    }
    unint64_t v24 = (unint64_t)v55 >> v22;
    if ((v55 & 4) == 0) {
      char v23 = 3;
    }
    if (v55) {
      char v23 = 3;
    }
    unint64_t v25 = (8 * (unsigned __int16)((unint64_t)v55 >> v23)) & 0xFFFFF8000007FFFFLL | ((v24 & 0xFFFFFF) << 19);
    if ((v55 & 2) != 0) {
      uint64_t v26 = v25 | 2;
    }
    else {
      uint64_t v26 = v21;
    }
    if ((v26 & 0xFFFFFFFFFFFFFFF9) != 0 && (v26 & 6) == 2)
    {
      unsigned int v27 = *a1;
      uint64_t v62 = (8 * v11) | 1;
      int v63 = 0;
      LODWORD(v56) = v5;
      int v58 = 0;
      ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*v27)[4])(v27, 80, &v62, 1, &v56, 1, 0);
      int v5 = *(_DWORD *)(*(void *)(v28 + 32) + 4);
    }
    int8x8_t v29 = *a1;
    uint64_t v62 = (8 * v11) | 1;
    int v63 = 0;
    LODWORD(v56) = v5;
    int v58 = 0;
    unint64_t v19 = (void (*)(void))(*v29)[4];
  }
  v19();
  int v5 = *(_DWORD *)(*(void *)(v30 + 32) + 4);
  if (!v5) {
    return 2;
  }
  if ((v5 & 0x80000000) == 0)
  {
LABEL_45:
    unint64_t v32 = 0;
    goto LABEL_46;
  }
LABEL_42:
  uint64_t v31 = a1[2];
  if ((v5 & 0x7FFFFFFFu) >= *((_DWORD *)v31 + 108)) {
    goto LABEL_45;
  }
  unint64_t v32 = (unint64_t)v31[53][v5 & 0x7FFFFFFF];
LABEL_46:
  unint64_t v34 = *a1;
  LODWORD(v62) = v6;
  int v63 = 1;
  LODWORD(v56) = v5;
  int v58 = 0;
  ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*v34)[4])(v34, 119, &v62, 1, &v56, 1, 0);
  unsigned int v36 = sub_1CB8F1DC4((unint64_t *)&v54);
  if (v35 == 1) {
  if (v3 != 2)
  }
  {
    uint64_t v37 = 0xFFFFLL;
    if ((v32 & 2) == 0) {
      uint64_t v37 = 0xFFFFFFFFLL;
    }
    uint64_t v52 = (llvm::LLVMContext *)(v37 & (v32 >> 19));
    int v38 = v3 - 2;
    uint64_t v39 = 36;
    unsigned int v40 = v36;
    do
    {
      uint64_t v41 = *a1;
      uint64_t v56 = v32;
      unint64_t v42 = (v32 >> 3);
      LODWORD(v57) = 0;
      if ((v32 & 1) == 0)
      {
        if ((v32 & 4) != 0) {
          unint64_t v42 = (unint64_t)v52;
        }
        else {
          unint64_t v42 = (unsigned __int16)(v32 >> 3);
        }
      }
      unint64_t v43 = v40;
      uint64_t v44 = (llvm::ConstantInt *)llvm::IntegerType::get(***v41[1], (llvm::LLVMContext *)v42);
      int v45 = llvm::ConstantInt::get(v44, v43, (const llvm::APInt *)1);
      uint64_t v46 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*v41)[2])(v41, &v56, v45);
      uint64_t v47 = *a1;
      uint64_t v62 = v32;
      int v63 = 0;
      LODWORD(v56) = v5;
      int v58 = 0;
      uint64_t v59 = v46;
      uint64_t v60 = v48;
      int v61 = 1;
      uint64_t v49 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*v47)[4])(v47, 128, &v62, 1, &v56, 2, 0);
      int v50 = *a1;
      LODWORD(v62) = *(_DWORD *)(*(void *)(a2 + 32) + v39);
      int v63 = 1;
      uint64_t v56 = v49;
      uint64_t v57 = v51;
      int v58 = 1;
      ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*v50)[4])(v50, 119, &v62, 1, &v56, 1, 0);
      unsigned int v40 = v43 + v36;
      v39 += 32;
      --v38;
    }
    while (v38);
  }
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  return 1;
}

uint64_t sub_1CC7296C0(uint64_t *a1, llvm::MachineInstr *a2)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 4);
  int v5 = *(_DWORD *)(v4 + 36);
  int v6 = *(_DWORD *)(v4 + 68);
  uint64_t v7 = a1[2];
  if (v5 < 0 && (v5 & 0x7FFFFFFFu) < *(_DWORD *)(v7 + 432)) {
    unint64_t v8 = *(void *)(*(void *)(v7 + 424) + 8 * (v5 & 0x7FFFFFFF));
  }
  else {
    unint64_t v8 = 0;
  }
  unint64_t v9 = *(void *)(v4 + 112);
  int v10 = *(_DWORD *)(v4 + 4);
  unint64_t v101 = v8;
  if (v6 < 0 && (v6 & 0x7FFFFFFFu) < *(_DWORD *)(v7 + 432)) {
    unint64_t v11 = *(void *)(*(void *)(v7 + 424) + 8 * (v6 & 0x7FFFFFFF));
  }
  else {
    unint64_t v11 = 0;
  }
  unint64_t v100 = v11;
  if ((v8 & 0xFFFFFFFFFFFFFFF9) != 0
    && (v8 & 4) != 0
    && ((v11 & 0xFFFFFFFFFFFFFFF9) == 0 || (v11 & 2) == 0 || (v11 & 4) != 0))
  {
    char v12 = 3;
    if ((v8 & 1) == 0) {
      char v12 = 19;
    }
    unint64_t v13 = v8 >> v12;
    if ((v8 & 2) != 0) {
      unint64_t v14 = (v8 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v13) | 2;
    }
    else {
      unint64_t v14 = v8 & 0x8000000000000000 | (8 * v13) | 1;
    }
    unint64_t v98 = v14;
    unsigned int v16 = sub_1CB8F1DC4(&v98);
    if (v15 == 1) {
    unsigned int v18 = sub_1CB8F1DC4(&v100);
    }
    if (v17 == 1) {
    unint64_t v19 = v16;
    }
    unint64_t v20 = v9 / v16;
    if (!(v9 % v16) && !(v18 % v16))
    {
      unint64_t v21 = v9 + v18;
      unint64_t v23 = sub_1CB8F1DC4(&v101);
      if (v22 == 1) {
      if (v21 <= v23)
      }
      {
        unint64_t v97 = v21;
        unint64_t v80 = (void *)*a1;
        LODWORD(v105) = v5;
        int v107 = 0;
        sub_1CC7363F0(v80, v98, (int *)&v105);
        uint64_t v82 = v81;
        LODWORD(v83) = 0;
        int v105 = &v107;
        uint64_t v106 = 0x800000000;
        if (v19 <= v9)
        {
          unsigned int v91 = 0;
          unint64_t v83 = 0;
          unsigned int v92 = 0;
          do
          {
            if (v91 >= HIDWORD(v106)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v105 + v91) = *(_DWORD *)(*(void *)(v81 + 32) + 32 * v83 + 4);
            unsigned int v91 = v106 + 1;
            LODWORD(v106) = v106 + 1;
            unint64_t v83 = ++v92;
          }
          while (v20 > v92);
        }
        unint64_t v85 = sub_1CB8F1DC4(&v100);
        if (v84 == 1) {
        if (v85 <= v19)
        }
        {
          if (v106 >= HIDWORD(v106)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v105 + v106) = v6;
          LODWORD(v106) = v106 + 1;
          unint64_t v83 = (v83 + 1);
        }
        else
        {
          uint64_t v86 = (void *)*a1;
          LODWORD(v102) = v6;
          int v104 = 0;
          sub_1CC7363F0(v86, v98, (int *)&v102);
          unint64_t v87 = v97 / v19;
          if (v97 / v19 <= v83)
          {
            unint64_t v83 = v83;
          }
          else
          {
            unsigned int v88 = 0;
            unsigned int v89 = v106;
            int v90 = v83 + 1;
            do
            {
              if (v89 >= HIDWORD(v106)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v105 + v89) = *(_DWORD *)(*(void *)(v84 + 32) + 32 * v88 + 4);
              unsigned int v89 = v106 + 1;
              LODWORD(v106) = v106 + 1;
              unint64_t v83 = v90 + v88++;
            }
            while (v87 > v83);
          }
        }
        for (uint64_t i = (32 * v83) | 4; ; i += 32)
        {
          unint64_t v94 = v101;
          if ((v101 & 2) != 0) {
            uint64_t v95 = 0x800000000000000;
          }
          else {
            uint64_t v95 = 0x8000000000000;
          }
          if ((v95 & v101) != 0)
          {
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)v84);
            unint64_t v94 = v101;
          }
          if (v83 >= (unsigned __int16)(v94 >> 3)) {
            break;
          }
          if (v106 >= (unint64_t)HIDWORD(v106)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v105 + v106) = *(_DWORD *)(*(void *)(v82 + 32) + i);
          LODWORD(v106) = v106 + 1;
          ++v83;
        }
        uint64_t v96 = *a1;
        LODWORD(v102) = v10;
        int v103 = 1;
        sub_1CC73661C(v96, (uint64_t)&v102, (int *)v105, v106);
        llvm::MachineInstr::eraseFromParent(a2);
        if (v105 != &v107) {
          free(v105);
        }
        return 1;
      }
    }
    unint64_t v11 = v100;
  }
  unint64_t v24 = v11 & 0xFFFFFFFFFFFFFFF9;
  if ((v11 & 0xFFFFFFFFFFFFFFF9) != 0 && (v11 & 4) != 0) {
    return 2;
  }
  if ((v101 & 0xFFFFFFFFFFFFFFF9) != 0 && (v101 & 4) != 0)
  {
    char v25 = 3;
    if ((v101 & 1) == 0) {
      char v25 = 19;
    }
    unint64_t v26 = v101 >> v25;
    unint64_t v27 = v101 & 0x8000000000000000 | (8 * v26) | 1;
    unint64_t v28 = (v101 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v26) | 2;
    if ((v101 & 2) == 0) {
      unint64_t v28 = v27;
    }
    if (v28 != v11) {
      return 2;
    }
  }
  uint64_t v29 = *(void *)(**(void **)(*a1 + 8) + 40);
  if ((v101 & 0xFFFFFFFFFFFFFFF9) != 0 && (v101 & 6) == 2)
  {
    char v30 = 35;
    if ((v101 & 4) == 0) {
      char v30 = 19;
    }
    uint64_t v31 = *(__int32 **)(v29 + 656);
    size_t v32 = *(unsigned int *)(v29 + 664);
    uint64_t v33 = wmemchr(v31, (v101 >> v30) & 0xFFFFFF, v32);
    if (v33) {
      unint64_t v34 = v33;
    }
    else {
      unint64_t v34 = &v31[v32];
    }
    if (v32 != v34 - v31) {
      return 2;
    }
    unint64_t v11 = v100;
    unint64_t v24 = v100 & 0xFFFFFFFFFFFFFFF9;
  }
  if (v24 && (v11 & 6) == 2)
  {
    char v35 = 35;
    if ((v11 & 4) == 0) {
      char v35 = 19;
    }
    unsigned int v36 = *(__int32 **)(v29 + 656);
    size_t v37 = *(unsigned int *)(v29 + 664);
    int v38 = wmemchr(v36, (v11 >> v35) & 0xFFFFFF, v37);
    uint64_t v39 = v38 ? v38 : &v36[v37];
    if (v37 != v39 - v36) {
      return 2;
    }
  }
  unint64_t v41 = v101;
  if ((v101 & 1) == 0)
  {
    unsigned int v43 = sub_1CB8F1DC4(&v101);
    if (v42 == 1) {
    uint64_t v44 = *a1;
    }
    unint64_t v41 = (8 * v43) | 1;
    uint64_t v102 = v41;
    int v103 = 0;
    LODWORD(v105) = v5;
    int v107 = 0;
    sub_1CC7382B0(v44);
    int v5 = *(_DWORD *)(*(void *)(v45 + 32) + 4);
  }
  if ((v100 & 1) == 0)
  {
    unsigned int v47 = sub_1CB8F1DC4(&v100);
    if (v46 == 1) {
    uint64_t v48 = *a1;
    }
    uint64_t v102 = (8 * v47) | 1;
    int v103 = 0;
    LODWORD(v105) = v6;
    int v107 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v48 + 32))(v48, 80, &v102, 1, &v105, 1, 0);
    int v6 = *(_DWORD *)(*(void *)(v49 + 32) + 4);
  }
  uint64_t v50 = *a1;
  uint64_t v102 = v41;
  int v103 = 0;
  LODWORD(v105) = v6;
  int v107 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v50 + 32))(v50, 126, &v102, 1, &v105, 1, 0);
  int v52 = *(_DWORD *)(*(void *)(v51 + 32) + 4);
  if (v9)
  {
    int v53 = (llvm::IntegerType *****)*a1;
    int v105 = (void *)v41;
    LODWORD(v106) = 0;
    unint64_t v54 = (llvm::LLVMContext *)(unsigned __int16)(v41 >> 3);
    uint64_t v55 = (llvm::LLVMContext *)(unsigned __int16)(v41 >> 19);
    if ((v41 & 2) == 0) {
      uint64_t v55 = (llvm::LLVMContext *)(v41 >> 19);
    }
    if ((v41 & 4) != 0) {
      unint64_t v54 = v55;
    }
    if (v41) {
      uint64_t v56 = (llvm::LLVMContext *)(v41 >> 3);
    }
    else {
      uint64_t v56 = v54;
    }
    uint64_t v57 = (llvm::ConstantInt *)llvm::IntegerType::get(***v53[1], v56);
    int v58 = llvm::ConstantInt::get(v57, v9, (const llvm::APInt *)1);
    uint64_t v59 = ((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*v53)[2])(v53, &v105, v58);
    uint64_t v60 = *a1;
    uint64_t v102 = v41;
    int v103 = 0;
    LODWORD(v105) = v52;
    int v107 = 0;
    uint64_t v108 = v59;
    uint64_t v109 = v61;
    int v110 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v60 + 32))(v60, 127, &v102, 1, &v105, 2, 0);
    int v52 = *(_DWORD *)(*(void *)(v62 + 32) + 4);
  }
  unsigned int v64 = sub_1CB8F1DC4(&v101);
  if (v63 == 1) {
  int v66 = sub_1CB8F1DC4(&v100);
  }
  if (v65 == 1) {
  unsigned int v67 = v66 + v9;
  }
  unsigned int v99 = v64;
  if (v64 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v98);
  }
  unint64_t v98 = 0;
  sub_1CD6295E4((uint64_t)&v98, v67, v9);
  int v68 = (llvm::ConstantInt *****)*a1;
  int v105 = (void *)v41;
  LODWORD(v106) = 0;
  int v70 = llvm::ConstantInt::get(***v68[1], (llvm::LLVMContext *)&v98, v69);
  uint64_t v71 = ((uint64_t (*)(llvm::ConstantInt *****, void **, void *))(*v68)[2])(v68, &v105, v70);
  uint64_t v72 = *a1;
  uint64_t v102 = v41;
  int v103 = 0;
  LODWORD(v105) = v5;
  int v107 = 0;
  uint64_t v108 = v71;
  uint64_t v109 = v73;
  int v110 = 1;
  int v74 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v72 + 32))(v72, 65, &v102, 1, &v105, 2, 0);
  uint64_t v75 = *a1;
  uint64_t v102 = v41;
  int v103 = 0;
  int v105 = v74;
  uint64_t v106 = v76;
  int v107 = 1;
  LODWORD(v108) = v52;
  int v110 = 0;
  uint64_t v77 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v75 + 32))(v75, 66, &v102, 1, &v105, 2, 0);
  uint64_t v78 = *a1;
  LODWORD(v102) = v10;
  int v103 = 1;
  int v105 = v77;
  uint64_t v106 = v79;
  int v107 = 1;
  sub_1CC7382B0(v78);
  llvm::MachineInstr::eraseFromParent(a2);
  if (v99 >= 0x41)
  {
    if (v98) {
      MEMORY[0x1D25D9CB0](v98, 0x1000C8000313F17);
    }
  }
  return 1;
}

uint64_t sub_1CC72A084(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v7 = (unint64_t *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 48);
  int v8 = **(unsigned __int16 **)(a2 + 16);
  if ((v6 & 7) != 0)
  {
    uint64_t v7 = (unint64_t *)((v6 & 0xFFFFFFFFFFFFFFF8) + 8);
    unint64_t v9 = *v7;
  }
  else
  {
    unint64_t v9 = v6 & 0xFFFFFFFFFFFFFFF8;
    *uint64_t v7 = v9;
  }
  int v10 = *(_DWORD **)(a2 + 32);
  if (v8 == 237)
  {
    unsigned __int8 v11 = 0;
    unint64_t v12 = v9;
  }
  else
  {
    unint64_t v12 = v7[1];
    unsigned __int8 v11 = *(unsigned char *)(v12 + 34);
  }
  unsigned __int8 v13 = *(unsigned char *)(v9 + 34);
  unsigned int v14 = v10[1];
  unsigned int v15 = v10[9];
  sub_1CC73C44C(v10[17], *(void *)(a1 + 16), 1, (uint64_t)&v32);
  if (!v34) {
    return 2;
  }
  if (v33 >= 0x41) {
    unsigned int v16 = v32;
  }
  else {
    unsigned int v16 = (_DWORD **)&v32;
  }
  int v17 = *v16;
  if (!*v16)
  {
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    uint64_t v19 = 1;
    goto LABEL_22;
  }
  __int16 v18 = *(_WORD *)(v12 + 32);
  if (v8 == 235)
  {
    uint64_t v21 = sub_1CD62871C(a1, (unint64_t *)a2, v14, v15, (unint64_t)v17, -1, v13, v11, (v18 & 4) != 0);
LABEL_28:
    uint64_t v19 = v21;
    goto LABEL_22;
  }
  if ((v18 & 4) != 0 || a3 && (unint64_t)v17 > a3) {
    goto LABEL_19;
  }
  switch(v8)
  {
    case 237:
      uint64_t v21 = sub_1CD627FF0(a1, (llvm::MachineInstr *)a2, v14, v15, (uint64_t)v17, v13);
      goto LABEL_28;
    case 236:
      uint64_t v21 = sub_1CD628E0C(a1, (unint64_t *)a2, v14, v15, v17, v13, v11);
      goto LABEL_28;
    case 234:
      char v22 = *(uint64_t **)(*(void *)(a2 + 24) + 32);
      uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22[2] + 120))(v22[2]);
      unint64_t v24 = (unsigned int *)(v23 + 184260);
      uint64_t v25 = *v22;
      unsigned int v26 = *(_DWORD *)(v22[1] + 484);
      BOOL v27 = v26 > 0x21;
      uint64_t v28 = (1 << v26) & 0x3F0000888;
      BOOL v29 = v27 || v28 == 0;
      if (v29 && (uint64_t v31 = *(void *)(v25 + 112)) != 0 && (*(unsigned char *)(v31 + 17) & 4) != 0
        || (uint64_t v30 = *(void *)(v25 + 112)) != 0 && *(char *)(v30 + 13) < 0)
      {
        unint64_t v24 = (unsigned int *)(v23 + 184264);
      }
      uint64_t v21 = sub_1CD62871C(a1, (unint64_t *)a2, v14, v15, (unint64_t)v17, *v24, v13, v11, 0);
      goto LABEL_28;
  }
LABEL_19:
  uint64_t v19 = 2;
LABEL_22:
  if (v34 && v33 >= 0x41 && v32) {
    MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
  }
  return v19;
}

char **sub_1CC72A30C(uint64_t *a1, uint64_t a2, unsigned int a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v6 = a2;
  v102[36] = *MEMORY[0x1E4F143B8];
  int v8 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
  if (v8 < 0 && (v9 = a1[2], uint64_t v10 = v8 & 0x7FFFFFFF, v10 < *(_DWORD *)(v9 + 432))) {
    uint64_t v11 = *(void *)(*(void *)(v9 + 424) + 8 * v10);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0x800000000000000;
  if ((v11 & 2) == 0) {
    uint64_t v12 = 0x8000000000000;
  }
  if ((v12 & v11) != 0) {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  }
  uint64_t v13 = *(void *)(v6 + 16);
  unsigned int v14 = *(unsigned __int8 *)(v13 + 4);
  int v88 = *(_DWORD *)(v6 + 40);
  BOOL v15 = (*(unsigned char *)(v13 + 8) & 2) == 0 || *(_DWORD *)(v6 + 40) == v14;
  char v16 = v15;
  unsigned int v17 = *(unsigned __int8 *)(v13 + 4);
  if (!v15)
  {
    unsigned int v80 = *(unsigned __int8 *)(v13 + 4);
    unsigned int v17 = v80;
    do
    {
      int v81 = *(_DWORD *)(*(void *)(v6 + 32) + 32 * v80);
      if ((v81 & 0x10000FF) != 0x1000000) {
        break;
      }
      v17 += (v81 & 0x2000000) == 0;
      if (v88 - 1 == v80) {
        break;
      }
      ++v80;
    }
    while ((v81 & 0x2000000) == 0);
  }
  uint64_t v18 = *(void *)(v13 + 32);
  if (v18)
  {
    unsigned int v19 = -1;
    do
      ++v19;
    while (*(_WORD *)(v18 + 2 * v19));
  }
  else
  {
    unsigned int v19 = 0;
  }
  if (v16)
  {
    unsigned int v20 = v14;
  }
  else
  {
    unsigned int v20 = v14;
    do
    {
      int v82 = *(_DWORD *)(*(void *)(v6 + 32) + 32 * v14);
      if ((v82 & 0x10000FF) != 0x1000000) {
        break;
      }
      v20 += (v82 & 0x2000000) == 0;
      if (v88 - 1 == v14) {
        break;
      }
      ++v14;
    }
    while ((v82 & 0x2000000) == 0);
  }
  if (v18)
  {
    unsigned int v21 = -1;
    do
      ++v21;
    while (*(_WORD *)(v18 + 2 * v21));
  }
  else
  {
    unsigned int v21 = 0;
  }
  uint64_t v96 = v98;
  uint64_t v97 = 0x800000000;
  v101[0] = (char *)v102;
  v101[1] = (char *)0x200000000;
  unint64_t v89 = v21 + v20;
  sub_1CD62996C((uint64_t)v101, v89, (uint64_t)&v96);
  if (v96 != v98) {
    free(v96);
  }
  unsigned int v87 = v19 + v17;
  uint64_t v96 = v98;
  uint64_t v97 = 0x800000000;
  v99[0] = (char *)&v100;
  v99[1] = (char *)0x200000000;
  sub_1CD629D00((uint64_t)v99, v89, (uint64_t)&v96);
  if (v96 != v98) {
    free(v96);
  }
  if (v89)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 4;
    do
    {
      int v24 = *(_DWORD *)(*(void *)(v6 + 32) + v23);
      if (v24 < 0 && (uint64_t v25 = a1[2], v26 = v24 & 0x7FFFFFFF, v26 < *(_DWORD *)(v25 + 432))) {
        unint64_t v27 = *(void *)(*(void *)(v25 + 424) + 8 * v26);
      }
      else {
        unint64_t v27 = 0;
      }
      sub_1CC72ACB4((uint64_t)&v101[0][v22], v27, a3);
      v22 += 144;
      v23 += 32;
    }
    while (144 * v89 != v22);
  }
  *(void *)&long long v94 = v95;
  *((void *)&v94 + 1) = 0x800000000;
  uint64_t v96 = v98;
  uint64_t v97 = 0x300000000;
  sub_1CD629FBC((uint64_t)&v96, v88 - v87, (uint64_t)&v94);
  if ((void *)v94 != v95) {
    free((void *)v94);
  }
  int v90 = a1;
  uint64_t v91 = v6;
  unsigned int v83 = (unsigned __int16)(v11 >> 3);
  uint64_t v28 = a5;
  BOOL v29 = a4;
  if (v89 < *(_DWORD *)(v6 + 40))
  {
    uint64_t v30 = 0;
    uint64_t v31 = 4 * a5;
    unint64_t v32 = v89;
    do
    {
      if (v28)
      {
        uint64_t v33 = v31;
        char v34 = v29;
        while (v32 != *v34)
        {
          ++v34;
          v33 -= 4;
          if (!v33) {
            goto LABEL_46;
          }
        }
        int v43 = *((_DWORD *)v101[0] + 2);
        if (v43)
        {
          uint64_t v44 = (char *)v96 + 208 * v30;
          uint64_t v45 = *(void *)(v91 + 32) + 32 * v32;
          uint64_t v46 = (void *)(v45 + 16);
          do
          {
            if (*(unsigned char *)v45 == 1)
            {
              *(void *)&long long v94 = *v46;
              LODWORD(v95[0]) = 3;
            }
            else if (*(unsigned char *)v45)
            {
              LODWORD(v94) = *(_DWORD *)v46;
              LODWORD(v95[0]) = 2;
            }
            else
            {
              LODWORD(v94) = *(_DWORD *)(v45 + 4);
              LODWORD(v95[0]) = 0;
            }
            unsigned int v47 = *((_DWORD *)v44 + 2);
            unint64_t v48 = *(void *)v44;
            if (v47 >= *((_DWORD *)v44 + 3))
            {
              BOOL v51 = v48 + 24 * v47 > (unint64_t)&v94;
              if (v48 > (unint64_t)&v94 || !v51) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v49 = v48 + 24 * *((unsigned int *)v44 + 2);
            long long v50 = v94;
            *(void *)(v49 + 16) = v95[0];
            *(_OWORD *)uint64_t v49 = v50;
            ++*((_DWORD *)v44 + 2);
            --v43;
          }
          while (v43);
        }
      }
      else
      {
LABEL_46:
        *(void *)&long long v94 = v95;
        *((void *)&v94 + 1) = 0x800000000;
        sub_1CD618E18(a1, *(_DWORD *)(*(void *)(v6 + 32) + 32 * v32 + 4), a3, (uint64_t)&v94);
        char v35 = (_DWORD *)v94;
        if (DWORD2(v94))
        {
          uint64_t v36 = 4 * DWORD2(v94);
          uint64_t v28 = a5;
          uint64_t v31 = 4 * a5;
          do
          {
            size_t v37 = (char *)v96 + 208 * v30;
            LODWORD(v92) = *v35;
            LODWORD(v93[0]) = 0;
            unsigned int v38 = *((_DWORD *)v37 + 2);
            unint64_t v39 = *(void *)v37;
            if (v38 >= *((_DWORD *)v37 + 3))
            {
              BOOL v42 = v39 + 24 * v38 > (unint64_t)&v92;
              if (v39 > (unint64_t)&v92 || !v42) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v40 = v39 + 24 * *((unsigned int *)v37 + 2);
            long long v41 = v92;
            *(void *)(v40 + 16) = v93[0];
            *(_OWORD *)uint64_t v40 = v41;
            ++*((_DWORD *)v37 + 2);
            ++v35;
            v36 -= 4;
          }
          while (v36);
          char v35 = (_DWORD *)v94;
        }
        else
        {
          uint64_t v28 = a5;
          uint64_t v31 = 4 * a5;
        }
        if (v35 != (_DWORD *)v95)
        {
          free(v35);
          uint64_t v31 = 4 * a5;
          uint64_t v28 = a5;
        }
        BOOL v29 = a4;
      }
      ++v32;
      ++v30;
      uint64_t v6 = v91;
    }
    while (v32 < *(unsigned int *)(v91 + 40));
  }
  LODWORD(v52) = v83 / a3;
  if (v83 % a3) {
    uint64_t v52 = (v52 + 1);
  }
  else {
    uint64_t v52 = v52;
  }
  unint64_t v53 = v89;
  uint64_t v86 = v52;
  if (v52)
  {
    uint64_t v54 = 0;
    do
    {
      *(void *)&long long v92 = v93;
      *((void *)&v92 + 1) = 0x200000000;
      if (v53)
      {
        uint64_t v55 = 0;
        unsigned int v56 = 0;
        do
        {
          if (v56 >= HIDWORD(v92)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_OWORD *)(v92 + 16 * v56) = *(_OWORD *)(*(void *)&v101[0][v55] + 16 * v54);
          unsigned int v56 = ++DWORD2(v92);
          v55 += 144;
        }
        while (144 * v89 != v55);
      }
      else
      {
        unsigned int v56 = 0;
      }
      *(void *)&long long v94 = v95;
      *((void *)&v94 + 1) = 0x300000000;
      if (v88 == v87)
      {
        unsigned int v57 = 0;
        int v58 = v95;
      }
      else
      {
        uint64_t v59 = 0;
        unsigned int v57 = 0;
        uint64_t v60 = v88 - v87;
        do
        {
          unint64_t v61 = *(void *)((char *)v96 + v59) + 24 * v54;
          if (v57 >= HIDWORD(v94))
          {
            unint64_t v64 = v94 + 24 * v57;
            if ((unint64_t)v94 > v61 || v64 <= v61) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v62 = v94 + 24 * DWORD2(v94);
          long long v63 = *(_OWORD *)v61;
          *(void *)(v62 + 16) = *(void *)(v61 + 16);
          *(_OWORD *)uint64_t v62 = v63;
          unsigned int v57 = ++DWORD2(v94);
          v59 += 208;
          --v60;
        }
        while (v60);
        unsigned int v56 = DWORD2(v92);
        int v58 = (void *)v94;
      }
      (*(void (**)(uint64_t, void, void, void, void *, void, uint64_t))(*(void *)*a1 + 32))(*a1, **(unsigned __int16 **)(v91 + 16), v92, v56, v58, v57, *(unsigned __int16 *)(v91 + 44) | 0x100000000);
      if (v53)
      {
        uint64_t v67 = 0;
        uint64_t v68 = 4;
        do
        {
          uint64_t v69 = &v99[0][v67];
          unint64_t v70 = *(unsigned int *)&v99[0][v67 + 8];
          if (v70 >= *(unsigned int *)&v99[0][v67 + 12]) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)v69 + 4 * v70) = *(_DWORD *)(*(void *)(v66 + 32) + v68);
          ++*((_DWORD *)v69 + 2);
          v67 += 48;
          v68 += 32;
        }
        while (48 * v89 != v67);
      }
      if ((void *)v94 != v95) {
        free((void *)v94);
      }
      if ((void *)v92 != v93) {
        free((void *)v92);
      }
      ++v54;
      unint64_t v53 = v89;
    }
    while (v54 != v86);
  }
  if (v83 % a3)
  {
    uint64_t v71 = (llvm::MachineInstr *)v91;
    if (v53)
    {
      uint64_t v72 = 0;
      uint64_t v73 = 48 * v53;
      uint64_t v74 = 4;
      do
      {
        sub_1CD6190B8(v90, *(_DWORD *)(*(void *)(v91 + 32) + v74), *(void *)&v99[0][v72], *(unsigned int *)&v99[0][v72 + 8]);
        v72 += 48;
        v74 += 32;
      }
      while (v73 != v72);
    }
  }
  else
  {
    uint64_t v71 = (llvm::MachineInstr *)v91;
    if (v53)
    {
      uint64_t v75 = 0;
      uint64_t v76 = 48 * v53;
      uint64_t v77 = 4;
      do
      {
        uint64_t v78 = *v90;
        LODWORD(v94) = *(_DWORD *)(*(void *)(v91 + 32) + v77);
        DWORD2(v94) = 1;
        sub_1CC73661C(v78, (uint64_t)&v94, *(int **)&v99[0][v75], *(unsigned int *)&v99[0][v75 + 8]);
        v75 += 48;
        v77 += 32;
      }
      while (v76 != v75);
    }
  }
  llvm::MachineInstr::eraseFromParent(v71);
  sub_1CD62A2E0((char **)&v96);
  sub_1CD629F40(v99);
  return sub_1CD629C84(v101);
}

unint64_t sub_1CC72ACB4(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v18 = 0;
  char v5 = 3;
  if ((a2 & 1) == 0) {
    char v5 = 19;
  }
  unint64_t v6 = a2 & 0x8000000000000000 | (8 * (a2 >> v5)) | 1;
  char v7 = 35;
  char v8 = 19;
  if ((a2 & 4) == 0) {
    char v7 = 19;
  }
  unint64_t v9 = a2 >> v7;
  if ((a2 & 4) == 0) {
    char v8 = 3;
  }
  if (a2) {
    char v8 = 3;
  }
  unint64_t v10 = (8 * (unsigned __int16)(a2 >> v8)) & 0xFFFFF8000007FFFFLL | ((v9 & 0xFFFFFF) << 19);
  if ((a2 & 2) != 0) {
    unint64_t v11 = v10 | 2;
  }
  else {
    unint64_t v11 = v6;
  }
  if (a3 != 1) {
    unint64_t v11 = sub_1CBA5A95C(a3, v11);
  }
  unint64_t result = sub_1CC72AE20(a2, v11, &v18);
  int v13 = result;
  if ((int)result >= 1)
  {
    unsigned int v14 = *(_DWORD *)(a1 + 8);
    do
    {
      if (v14 >= *(_DWORD *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      BOOL v15 = (unint64_t *)(*(void *)a1 + 16 * v14);
      unint64_t *v15 = v11;
      v15[1] = 0;
      unsigned int v14 = *(_DWORD *)(a1 + 8) + 1;
      *(_DWORD *)(a1 + 8) = v14;
      --v13;
    }
    while (v13);
  }
  if ((v18 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    unsigned int v16 = *(_DWORD *)(a1 + 8);
    if (v16 >= *(_DWORD *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v17 = (void *)(*(void *)a1 + 16 * v16);
    void *v17 = v18;
    v17[1] = 0;
    ++*(_DWORD *)(a1 + 8);
  }
  return result;
}

unint64_t sub_1CC72AE20(unint64_t a1, unint64_t a2, unint64_t *a3)
{
  unint64_t v20 = a2;
  unint64_t v21 = a1;
  unsigned int v5 = sub_1CB8F1DC4(&v21);
  if (v4 == 1) {
  unsigned int v6 = sub_1CB8F1DC4(&v20);
  }
  if (v7 == 1)
  {
    unsigned int v19 = v6;
    unsigned int v6 = v19;
  }
  unsigned int v8 = v5 / v6;
  unint64_t v9 = v5 % v6;
  if (v9)
  {
    if ((v20 & 0xFFFFFFFFFFFFFFF9) != 0 && (v20 & 4) != 0)
    {
      uint64_t v11 = (unsigned __int16)(v21 >> 3);
      uint64_t v12 = (unsigned __int16)(v21 >> 19);
      if ((v21 & 2) == 0) {
        uint64_t v12 = (v21 >> 19);
      }
      if ((v21 & 4) != 0) {
        uint64_t v11 = v12;
      }
      if (v21) {
        uint64_t v13 = (v21 >> 3);
      }
      else {
        uint64_t v13 = v11;
      }
      uint64_t v14 = v9 / v13;
      if (v9 % v13)
      {
        unint64_t v10 = 0xFFFFFFFF00000000;
        unsigned int v8 = -1;
        return v10 | v8;
      }
      unint64_t v15 = (8 * v13) | 1;
      if (v14 != 1) {
        unint64_t v15 = sub_1CBA5A95C(v14, v15);
      }
    }
    else
    {
      unint64_t v15 = (8 * v9) | 1;
    }
    *a3 = v15;
    unint64_t v17 = sub_1CB8F1DC4(a3);
    if (v16 == 1) {
    unint64_t v10 = (v9 / v17) << 32;
    }
  }
  else
  {
    unint64_t v10 = 0;
  }
  return v10 | v8;
}

uint64_t sub_1CC72AF6C(uint64_t **a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unsigned int v8 = a1;
  uint64_t v41 = a2;
  unint64_t v9 = *a1;
  uint64_t v35 = *(void *)(**a1 + 8);
  int v36 = sub_1CB8F1DC4((unint64_t *)&v41);
  if (v10 == 1)
  {
    if (!a4) {
      return a5;
    }
  }
  else if (!a4)
  {
    return a5;
  }
  uint64_t v11 = 0;
  uint64_t v34 = (uint64_t)(v8 + 3);
  uint64_t v31 = v8;
  unint64_t v32 = v9;
  uint64_t v33 = a4;
  do
  {
    if (a5 >= *((_DWORD *)v8 + 2)) {
      break;
    }
    int v40 = 0;
    sub_1CC735FF8(*v9, (unsigned int *)&v40, *((_DWORD *)v8 + 3), (unint64_t)v8[2], a5 >> 3, v38);
    MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v35, v34, a5 >> 3, v41);
    if (*((unsigned char *)v8 + 104))
    {
      uint64_t v13 = v9[2];
      uint64_t v14 = v41;
      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v13, "", 0);
      unint64_t v16 = IncompleteVirtualRegister & 0x7FFFFFFF;
      *(void *)(*(void *)(v13 + 24) + 16 * v16) = 4;
      unint64_t v17 = *(unsigned int *)(v13 + 432);
      if (v16 >= v17)
      {
        uint64_t v18 = *(void *)(v13 + 440);
        if (v16 >= *(unsigned int *)(v13 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v19 = *(_DWORD *)(v13 + 432);
        uint64_t v20 = v16 + 1 - v17;
        if (v20)
        {
          unint64_t v21 = (void *)(*(void *)(v13 + 424) + 8 * *(unsigned int *)(v13 + 432));
          uint64_t v22 = ~v16 + v17;
          do
            *v21++ = v18;
          while (!__CFADD__(v22++, 1));
          int v19 = *(_DWORD *)(v13 + 432);
        }
        *(_DWORD *)(v13 + 432) = v19 + v20;
        unsigned int v8 = v31;
      }
      *(void *)(*(void *)(v13 + 424) + 8 * v16) = v14;
      uint64_t v24 = *(void *)(v13 + 8);
      if (v24)
      {
        int v29 = IncompleteVirtualRegister;
        (*(void (**)(uint64_t))(*(void *)v24 + 24))(v24);
        int IncompleteVirtualRegister = v29;
      }
      unint64_t v25 = *(unsigned int *)(a3 + 8);
      unint64_t v9 = v32;
      if (v25 >= *(unsigned int *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a3 + 4 * v25) = IncompleteVirtualRegister;
      ++*(_DWORD *)(a3 + 8);
      uint64_t v26 = (void *)*v32;
      v37[0] = IncompleteVirtualRegister;
      void v37[2] = 1;
      LODWORD(v38[0]) = v40;
      int v39 = 0;
      sub_1CC737934(v26, 0x5Au, v37, (int *)v38, MachineMemOperand);
    }
    else
    {
      unint64_t v27 = (void *)*v9;
      LODWORD(v38[0]) = *(_DWORD *)(*(void *)a3 + 4 * v11);
      int v39 = 0;
      v37[0] = v40;
      _DWORD v37[4] = 0;
      sub_1CC737D1C(v27, (int *)v38, v37, MachineMemOperand);
    }
    int v28 = *((unsigned char *)v8 + 105) ? -v36 : v36;
    a5 = (v28 + a5);
    ++v11;
  }
  while (v11 != v33);
  return a5;
}

uint64_t sub_1CC72B268(uint64_t *a1, uint64_t a2, int a3, unint64_t a4)
{
  v65[6] = *MEMORY[0x1E4F143B8];
  if (a3 != 1) {
    return 2;
  }
  unsigned int v5 = (llvm::MachineInstr *)a2;
  uint64_t v7 = *(void *)(a2 + 32);
  int v8 = *(_DWORD *)(v7 + 36);
  uint64_t v9 = a1[2];
  if (v8 < 0 && (v8 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v9 + 432)) {
    uint64_t v10 = *(void *)(*(void *)(v9 + 424) + 8 * (v8 & 0x7FFFFFFF));
  }
  else {
    uint64_t v10 = 0;
  }
  int v11 = *(_DWORD *)(v7 + 4);
  int v52 = v11;
  if (v11 < 0 && (v11 & 0x7FFFFFFFu) < *(_DWORD *)(v9 + 432)) {
    unint64_t v12 = *(void *)(*(void *)(v9 + 424) + 8 * (v11 & 0x7FFFFFFF));
  }
  else {
    unint64_t v12 = 0;
  }
  uint64_t v13 = **(unsigned __int16 **)(a2 + 16);
  BOOL v14 = (a4 & 0xFFFFFFFFFFFFFFF9) != 0 && (a4 >> 2) & 1;
  if (v14)
  {
    if ((v10 & 2) != 0) {
      uint64_t v15 = 0x800000000000000;
    }
    else {
      uint64_t v15 = 0x8000000000000;
    }
    if ((v15 & v10) != 0) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    }
    if ((a4 & 2) != 0) {
      uint64_t v16 = 0x800000000000000;
    }
    else {
      uint64_t v16 = 0x8000000000000;
    }
    if ((v16 & a4) != 0) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    }
    unsigned int v5 = (llvm::MachineInstr *)a2;
    if ((unsigned __int16)(v10 >> 3) % (unsigned __int16)(a4 >> 3)) {
      return 2;
    }
  }
  uint64_t v18 = dword_1CFB1D010[(__int16)v13 - 241];
  long long v63 = v65;
  uint64_t v64 = 0xC00000000;
  uint64_t v19 = 0x800000000000000;
  if ((v10 & 2) == 0) {
    uint64_t v19 = 0x8000000000000;
  }
  uint64_t v20 = v19 & v10;
  uint64_t v49 = v20;
  if (v14)
  {
    if (v20) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    }
    uint64_t v21 = 0x800000000000000;
    if ((a4 & 2) == 0) {
      uint64_t v21 = 0x8000000000000;
    }
    if ((v21 & a4) != 0) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    }
    unsigned int v22 = (unsigned __int16)(v10 >> 3) / (unsigned __int16)(a4 >> 3);
  }
  else
  {
    if (v20) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    }
    unsigned int v22 = (unsigned __int16)(v10 >> 3);
  }
  sub_1CC724218(a1, v8, a4, v22, (uint64_t)&v63);
  if ((a4 & 1) == 0)
  {
    BOOL v51 = v5;
    uint64_t v60 = v62;
    uint64_t v61 = 0xC00000000;
    if (v22)
    {
      uint64_t v25 = 0;
      do
      {
        uint64_t v26 = *a1;
        unint64_t v58 = v12;
        int v59 = 0;
        LODWORD(v53) = *(_DWORD *)((char *)v63 + v25);
        int v55 = 0;
        (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v26 + 32))(v26, v13, &v58, 1, &v53, 1, 0);
        if (v61 >= (unint64_t)HIDWORD(v61)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v60 + v61) = *(_DWORD *)(*(void *)(v23 + 32) + 4);
        LODWORD(v61) = v61 + 1;
        v25 += 4;
      }
      while (4 * v22 != v25);
    }
    if (v49) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)v23);
    }
    v24.i32[0] = (unsigned __int16)(v10 >> 3);
    int8x8_t v34 = vcnt_s8(v24);
    v34.i16[0] = vaddlv_u8((uint8x8_t)v34);
    if (v34.i32[0] != 1) {
      goto LABEL_67;
    }
    uint64_t v35 = 0x800000000000000;
    if ((a4 & 2) == 0) {
      uint64_t v35 = 0x8000000000000;
    }
    if ((v35 & a4) != 0) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)v23);
    }
    v34.i32[0] = (unsigned __int16)(a4 >> 3);
    uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34);
    v36.i16[0] = vaddlv_u8(v36);
    if (v36.i32[0] == 1)
    {
      sub_1CD624A98((uint64_t)a1, (uint64_t)v51, v8, v10, a4, v18);
    }
    else
    {
LABEL_67:
      if (v22 >= 2)
      {
        int v37 = *(_DWORD *)v60;
        uint64_t v38 = v22 - 1;
        uint64_t v39 = 4 * v22;
        uint64_t v40 = 4;
        do
        {
          uint64_t v41 = *a1;
          if (4 * v38 == v40)
          {
            LODWORD(v58) = v52;
            int v59 = 1;
            LODWORD(v53) = v37;
            int v55 = 0;
            int v56 = *((_DWORD *)v60 + v38);
            int v57 = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v41 + 32))(v41, v18, &v58, 1, &v53, 2, 0);
          }
          else
          {
            unint64_t v58 = v12;
            int v59 = 0;
            LODWORD(v53) = v37;
            int v55 = 0;
            int v56 = *(_DWORD *)((char *)v60 + v40);
            int v57 = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v41 + 32))(v41, v18, &v58, 1, &v53, 2, 0);
            int v37 = *(_DWORD *)(*(void *)(v42 + 32) + 4);
          }
          v40 += 4;
        }
        while (v39 != v40);
      }
      llvm::MachineInstr::eraseFromParent(v51);
    }
    uint64_t v33 = v60;
    if (v60 == v62) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  if (v12 == a4)
  {
    if (!v22 || (v24.i32[0] = v22, uint8x8_t v27 = (uint8x8_t)vcnt_s8(v24), v27.i16[0] = vaddlv_u8(v27), v27.i32[0] > 1u))
    {
      int v43 = *(_DWORD *)v63;
      if (v22 >= 2)
      {
        uint64_t v44 = 4;
        do
        {
          uint64_t v45 = *a1;
          unint64_t v53 = a4;
          int v54 = 0;
          LODWORD(v60) = v43;
          v62[0] = 0;
          v62[2] = *(_DWORD *)((char *)v63 + v44);
          v62[6] = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v45 + 32))(v45, v18, &v53, 1, &v60, 2, 0);
          int v43 = *(_DWORD *)(*(void *)(v46 + 32) + 4);
          v44 += 4;
        }
        while (4 * v22 != v44);
      }
      uint64_t v47 = *a1;
      uint64_t v17 = 1;
      LODWORD(v53) = v52;
      int v54 = 1;
      LODWORD(v60) = v43;
      v62[0] = 0;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v47 + 32))(v47, 19, &v53, 1, &v60, 1, 0);
      llvm::MachineInstr::eraseFromParent(v5);
      goto LABEL_82;
    }
    uint64_t v60 = v62;
    uint64_t v61 = 0xC00000000;
    if (v22 >= 2)
    {
      do
      {
        if (v22 != 1)
        {
          unint64_t v28 = 0;
          do
          {
            uint64_t v29 = *a1;
            unint64_t v58 = a4;
            int v59 = 0;
            uint64_t v30 = (char *)v63 + 4 * v28;
            LODWORD(v53) = *v30;
            int v55 = 0;
            int v56 = v30[1];
            int v57 = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v29 + 32))(v29, v18, &v58, 1, &v53, 2, 0);
            if (v61 >= HIDWORD(v61)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v60 + v61) = *(_DWORD *)(*(void *)(v31 + 32) + 4);
            LODWORD(v61) = v61 + 1;
            v28 += 2;
          }
          while (v28 < v22 - 1);
        }
        sub_1CB927A18((uint64_t)&v63, (uint64_t)&v60);
        LODWORD(v61) = 0;
        unsigned int v22 = v64;
      }
      while (v64 > 1);
    }
    uint64_t v32 = *a1;
    LODWORD(v58) = v52;
    int v59 = 1;
    LODWORD(v53) = *(_DWORD *)v63;
    int v55 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v32 + 32))(v32, 19, &v58, 1, &v53, 1, 0);
    llvm::MachineInstr::eraseFromParent(v5);
    uint64_t v33 = v60;
    if (v60 == v62) {
      goto LABEL_76;
    }
LABEL_75:
    free(v33);
LABEL_76:
    uint64_t v17 = 1;
    goto LABEL_82;
  }
  uint64_t v17 = 2;
LABEL_82:
  if (v63 != v65) {
    free(v63);
  }
  return v17;
}

uint64_t sub_1CC72B9E4(uint64_t *a1, uint64_t a2, int a3, int8x8_t a4)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 2;
  }
  uint64_t v6 = *(void *)(a2 + 32);
  int v7 = *(_DWORD *)(v6 + 4);
  int v8 = *(_DWORD *)(v6 + 36);
  int v9 = *(_DWORD *)(v6 + 68);
  uint64_t v10 = a1[2];
  if (v7 < 0 && (v7 & 0x7FFFFFFFu) < *(_DWORD *)(v10 + 432)) {
    unint64_t v11 = *(void *)(*(void *)(v10 + 424) + 8 * (v7 & 0x7FFFFFFF));
  }
  else {
    unint64_t v11 = 0;
  }
  uint64_t v87 = *(void *)(v6 + 112);
  unint64_t v92 = v11;
  if ((v8 & 0x80000000) == 0 || (v8 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v10 + 432))
  {
    uint64_t v12 = 0;
    if (v9 < 0) {
      goto LABEL_11;
    }
LABEL_13:
    uint64_t v13 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = *(void *)(*(void *)(v10 + 424) + 8 * (v8 & 0x7FFFFFFF));
  if ((v9 & 0x80000000) == 0) {
    goto LABEL_13;
  }
LABEL_11:
  if ((v9 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v10 + 432)) {
    goto LABEL_13;
  }
  uint64_t v13 = *(void *)(*(void *)(v10 + 424) + 8 * (v9 & 0x7FFFFFFF));
LABEL_14:
  uint64_t result = 2;
  if (v11 == v12 && v11 == v13)
  {
    uint64_t v15 = 0x800000000000000;
    if ((v11 & 2) == 0) {
      uint64_t v15 = 0x8000000000000;
    }
    unint64_t v16 = v15 & v11;
    if ((v15 & v11) != 0) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    }
    a4.i32[0] = (unsigned __int16)(v11 >> 3);
    uint8x8_t v17 = (uint8x8_t)vcnt_s8(a4);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.i32[0] != 1) {
      return 2;
    }
    int v82 = v7;
    unsigned int v83 = (llvm::MachineInstr *)a2;
    unint64_t v18 = sub_1CD6133E4(&v92, (v11 >> 4) & 0x7FFF | ((unint64_t)(v16 != 0) << 32));
    unint64_t v20 = v18;
    uint64_t v21 = 0x800000000000000;
    if ((v18 & 2) == 0) {
      uint64_t v21 = 0x8000000000000;
    }
    if ((v21 & v18) != 0) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v19);
    }
    uint64_t v22 = (unsigned __int16)(v20 >> 3);
    v103[0] = v104;
    v103[1] = (void *)0xC00000000;
    v101[0] = v102;
    v101[1] = (void *)0xC00000000;
    sub_1CC724218(a1, v8, v20, 2, (uint64_t)v103);
    sub_1CC724218(a1, v9, v20, 2, (uint64_t)v101);
    uint64_t v23 = 0;
    unsigned int v24 = 0;
    unsigned int v25 = 0;
    *(void *)&long long v26 = *(void *)v103[0];
    *((void *)&v26 + 1) = *(void *)v101[0];
    long long v100 = v26;
    char v27 = 35;
    if ((v20 & 4) == 0) {
      char v27 = 19;
    }
    unint64_t v28 = v20 >> v27;
    if ((v20 & 4) != 0) {
      char v29 = 19;
    }
    else {
      char v29 = 3;
    }
    if (v20) {
      char v29 = 3;
    }
    uint64_t v97 = v99;
    unint64_t v30 = (8 * (unsigned __int16)(v20 >> v29)) & 0xFFFFF8000007FFFFLL | ((v28 & 0xFFFFFF) << 19);
    uint64_t v98 = 0x1000000000;
    if (v20) {
      char v31 = 3;
    }
    else {
      char v31 = 19;
    }
    unint64_t v32 = v20 & 0x8000000000000000 | (8 * (v20 >> v31)) | 1;
    if ((v20 & 2) != 0) {
      uint64_t v33 = (void *)(v30 | 2);
    }
    else {
      uint64_t v33 = (void *)v32;
    }
    char v34 = 1;
    do
    {
      char v35 = v34;
      uint64_t v96 = -1;
      if ((unsigned __int16)(v20 >> 3))
      {
        unsigned int v85 = v25;
        char v86 = v34;
        unsigned int v84 = v24;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        do
        {
          unsigned int v38 = *(_DWORD *)(v87 + 4 * (v37 + v23 * v22));
          unsigned int v39 = v38 / v22;
          if (v38 / v22 <= 3)
          {
            uint64_t v40 = 0;
            char v41 = 1;
            do
            {
              char v42 = v41;
              int v43 = *((_DWORD *)&v96 + v40);
              if (v43 == v39) {
                goto LABEL_51;
              }
              if (v43 == -1)
              {
                *((_DWORD *)&v96 + v40) = v39;
LABEL_51:
                int v45 = v38 + (v40 - v39) * v22;
                unsigned int v44 = HIDWORD(v98);
                goto LABEL_52;
              }
              char v41 = 0;
              uint64_t v40 = 1;
            }
            while ((v42 & 1) != 0);
            unint64_t v93 = v95;
            uint64_t v94 = 0x1000000000;
            uint64_t v46 = (unsigned int *)(v87 + 4 * (unsigned __int16)(v20 >> 3) * v23);
            uint64_t v47 = (unsigned __int16)(v20 >> 3);
            do
            {
              unsigned int v49 = *v46++;
              unsigned int v48 = v49;
              unsigned int v50 = v49 / v22;
              if (v49 / v22 >= 4)
              {
                uint64_t v60 = *a1;
                int v105 = v33;
                LODWORD(v106) = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void, void, void))(*(void *)v60 + 32))(v60, 68, &v105, 1, 0, 0, 0);
                if (v94 >= (unint64_t)HIDWORD(v94)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((_DWORD *)v93 + v94) = *(_DWORD *)(*(void *)(v61 + 32) + 4);
                unsigned int v59 = v94 + 1;
                LODWORD(v94) = v94 + 1;
              }
              else
              {
                BOOL v51 = (llvm::IntegerType *****)*a1;
                unint64_t v90 = (unint64_t)v33;
                int v91 = 0;
                int v52 = *((_DWORD *)&v101[-2] + v50);
                uint64_t v88 = 257;
                int v89 = 0;
                unint64_t v53 = (int)(v48 - v50 * v22);
                int v54 = (llvm::ConstantInt *)llvm::IntegerType::get(***v51[1], (llvm::LLVMContext *)0x20);
                int v55 = llvm::ConstantInt::get(v54, v53, (const llvm::APInt *)1);
                uint64_t v56 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*v51)[2])(v51, &v88, v55);
                LODWORD(v105) = v52;
                v107[0] = 0;
                uint64_t v108 = v56;
                uint64_t v109 = v57;
                int v110 = 1;
                ((void (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*v51)[4])(v51, 205, &v90, 1, &v105, 2, 0);
                if (v94 >= (unint64_t)HIDWORD(v94)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((_DWORD *)v93 + v94) = *(_DWORD *)(*(void *)(v58 + 32) + 4);
                unsigned int v59 = v94 + 1;
                LODWORD(v94) = v94 + 1;
              }
              --v47;
            }
            while (v47);
            uint64_t v62 = *a1;
            unint64_t v90 = v20;
            int v91 = 0;
            long long v63 = (int *)v93;
            int v105 = v107;
            uint64_t v106 = 0x800000000;
            if (v59 >= 9) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v59)
            {
              uint64_t v64 = 0;
              uint64_t v65 = 4 * v59;
              do
              {
                int v66 = *v63++;
                uint64_t v67 = &v107[v64];
                _DWORD *v67 = v66;
                v67[4] = 0;
                v64 += 6;
                v65 -= 4;
              }
              while (v65);
              int v68 = v106;
            }
            else
            {
              int v68 = 0;
            }
            LODWORD(v106) = v68 + v59;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _DWORD *))(*(void *)v62 + 32))(v62, 77, &v90, 1, v107);
            uint64_t v70 = v69;
            unsigned int v25 = v85;
            if (v105 != v107) {
              free(v105);
            }
            char v35 = v86;
            if (v86) {
              unsigned int v25 = *(_DWORD *)(*(void *)(v70 + 32) + 4);
            }
            unsigned int v24 = v84;
            if ((v86 & 1) == 0) {
              unsigned int v24 = *(_DWORD *)(*(void *)(v70 + 32) + 4);
            }
            if (v93 != v95)
            {
              free(v93);
              char v35 = v86;
            }
            goto LABEL_83;
          }
          unsigned int v44 = HIDWORD(v98);
          int v45 = -1;
LABEL_52:
          if (v36 >= v44) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v97 + v36) = v45;
          unsigned int v36 = v98 + 1;
          LODWORD(v98) = v98 + 1;
          ++v37;
        }
        while (v37 != v22);
        unsigned int v25 = v85;
        char v35 = v86;
        if (v96 == -1) {
          goto LABEL_80;
        }
        int v73 = *((_DWORD *)&v101[-2] + v96);
        if (HIDWORD(v96) == -1)
        {
          uint64_t v74 = *a1;
          uint64_t v75 = v20;
          int v105 = (void *)v20;
          LODWORD(v106) = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void, void, void))(*(void *)v74 + 32))(v74, 68, &v105, 1, 0, 0, 0);
          uint64_t v77 = (int *)(*(void *)(v76 + 32) + 4);
          unsigned int v36 = v98;
        }
        else
        {
          uint64_t v77 = (int *)&v101[-2] + HIDWORD(v96);
          uint64_t v75 = v20;
        }
        int v78 = *v77;
        uint64_t v79 = (uint64_t *)*a1;
        unint64_t v90 = v75;
        int v91 = 0;
        LODWORD(v105) = v73;
        v107[0] = 0;
        LODWORD(v93) = v78;
        v95[0] = 0;
        sub_1CD62DEA0(v79, (uint64_t *)&v90, (int *)&v105, (int *)&v93, v97, v36);
        unsigned int v25 = v85;
        char v35 = v86;
        if (v86) {
          unsigned int v25 = *(_DWORD *)(*(void *)(v80 + 32) + 4);
        }
        else {
          unsigned int v24 = *(_DWORD *)(*(void *)(v80 + 32) + 4);
        }
      }
      else
      {
LABEL_80:
        uint64_t v71 = *a1;
        int v105 = (void *)v20;
        LODWORD(v106) = 0;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void, void, void))(*(void *)v71 + 32))(v71, 68, &v105, 1, 0, 0, 0);
        if (v35) {
          unsigned int v25 = *(_DWORD *)(*(void *)(v72 + 32) + 4);
        }
        else {
          unsigned int v24 = *(_DWORD *)(*(void *)(v72 + 32) + 4);
        }
      }
LABEL_83:
      char v34 = 0;
      LODWORD(v98) = 0;
      uint64_t v23 = 1;
    }
    while ((v35 & 1) != 0);
    uint64_t v81 = *a1;
    LODWORD(v105) = v82;
    LODWORD(v106) = 1;
    unint64_t v93 = (void *)__PAIR64__(v24, v25);
    sub_1CC738F60(v81, (uint64_t)&v105, (int *)&v93, 2);
    llvm::MachineInstr::eraseFromParent(v83);
    if (v97 != v99) {
      free(v97);
    }
    if (v101[0] != v102) {
      free(v101[0]);
    }
    if (v103[0] != v104) {
      free(v103[0]);
    }
    return 1;
  }
  return result;
}

uint64_t sub_1CC72C264(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = (void (**)(void **))&unk_1F261CA00;
  int v6 = a3;
  int v7 = (void **)&v5;
  uint64_t v3 = sub_1CD632044(a1, a2, (uint64_t)&v5, 1);
  if (v7 == (void **)&v5)
  {
    v5[4]((void **)&v5);
  }
  else if (v7)
  {
    (*((void (**)(void))*v7 + 5))();
  }
  return v3;
}

uint64_t sub_1CC72C354(unsigned int a1, unint64_t a2, int a3, uint64_t a4, long long *a5, llvm::LLVMContext *a6)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (a3 == 2) {
    goto LABEL_6;
  }
  unint64_t v9 = a2;
  if (a3 != 1) {
    goto LABEL_7;
  }
  if ((a2 & 0x80000000) == 0 || (uint64_t v10 = *(void *)(a4 + 24), (a2 & 0x7FFFFFFF) >= *(_DWORD *)(v10 + 432))) {
LABEL_6:
  }
    unint64_t v9 = 0;
  else {
    unint64_t v9 = *(void *)(*(void *)(v10 + 424) + 8 * (a2 & 0x7FFFFFFF));
  }
LABEL_7:
  *(void *)&long long v37 = v9;
  DWORD2(v37) = 0;
  unint64_t v11 = (llvm::LLVMContext *)(unsigned __int16)(v9 >> 3);
  uint64_t v12 = (llvm::LLVMContext *)(unsigned __int16)(v9 >> 19);
  if ((v9 & 2) == 0) {
    uint64_t v12 = (llvm::LLVMContext *)(v9 >> 19);
  }
  if ((v9 & 4) != 0) {
    unint64_t v11 = v12;
  }
  if (v9) {
    uint64_t v13 = (llvm::LLVMContext *)(v9 >> 3);
  }
  else {
    uint64_t v13 = v11;
  }
  unint64_t v14 = a1;
  uint64_t v15 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), v13);
  unint64_t v16 = llvm::ConstantInt::get(v15, v14, (const llvm::APInt *)1);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, long long *, void *))(*(void *)a4 + 16))(a4, &v37, v16);
  uint64_t v19 = v18;
  *(void *)&long long v37 = v9;
  DWORD2(v37) = 0;
  uint64_t v21 = llvm::ConstantInt::get(****(llvm::ConstantInt *****)(a4 + 8), a6, v20);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, long long *, void *))(*(void *)a4 + 16))(a4, &v37, v21);
  uint64_t v24 = v23;
  unint64_t v42 = v9;
  int v43 = 0;
  long long v37 = *a5;
  int v38 = *((_DWORD *)a5 + 4);
  uint64_t v39 = v22;
  uint64_t v40 = v23;
  int v41 = 1;
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 65, &v42, 1, &v37, 2, 0);
  unint64_t v42 = v9;
  int v43 = 0;
  *(void *)&long long v37 = v25;
  *((void *)&v37 + 1) = v26;
  int v38 = 1;
  uint64_t v39 = v17;
  uint64_t v40 = v19;
  int v41 = 1;
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 128, &v42, 1, &v37, 2, 0);
  uint64_t v29 = v28;
  unint64_t v42 = v9;
  int v43 = 0;
  long long v37 = *a5;
  int v38 = *((_DWORD *)a5 + 4);
  uint64_t v39 = v17;
  uint64_t v40 = v19;
  int v41 = 1;
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 127, &v42, 1, &v37, 2, 0);
  unint64_t v42 = v9;
  int v43 = 0;
  *(void *)&long long v37 = v30;
  *((void *)&v37 + 1) = v31;
  int v38 = 1;
  uint64_t v39 = v22;
  uint64_t v40 = v24;
  int v41 = 1;
  uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 65, &v42, 1, &v37, 2, 0);
  unint64_t v42 = a2;
  int v43 = a3;
  *(void *)&long long v37 = v27;
  *((void *)&v37 + 1) = v29;
  int v38 = 1;
  uint64_t v39 = v32;
  uint64_t v40 = v33;
  int v41 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 66, &v42, 1, &v37, 2, 0);
}

uint64_t sub_1CC72C6DC(char **a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  int v6 = a3;
  if (!(a3[11] | a3[8]) && a3[14] < a3[9]) {
    return 0;
  }
  unint64_t v52 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(*(void *)a6 + 680))(a6, a3, a5);
  if (!v52)
  {
    unint64_t v52 = 513;
    if (!v6[8])
    {
      while (1)
      {
        unsigned __int8 v42 = v6[9];
        uint64_t v44 = sub_1CB8F1DC4(&v52);
        if (v43 == 1) {
        if (1 << v42 >= (unint64_t)(v44 + 7) >> 3
        }
          || ((*(uint64_t (**)(uint64_t, unint64_t, void, void, void, void))(*(void *)a6 + 656))(a6, v52, a4, v6[9], 0, 0) & 1) != 0)
        {
          break;
        }
        uint64_t v46 = sub_1CB8F1DC4(&v52);
        if (v45 == 1) {
        unint64_t v52 = (v46 + 7) & 0x7FFFFFFF8 | 1;
        }
      }
    }
  }
  unint64_t v9 = *(void *)v6;
  if (!*(void *)v6) {
    return 1;
  }
  unsigned int v10 = 0;
  unint64_t v11 = a1;
  do
  {
    uint64_t v13 = sub_1CB8F1DC4(&v52);
    if (v12 == 1) {
    for (unint64_t i = ((unint64_t)(v13 + 7) >> 3); i > v9; unint64_t i = v27)
    }
    {
      unint64_t v51 = v52;
      if ((v52 & 0xFFFFFFFFFFFFFFF9) != 0 && (v52 & 4) != 0)
      {
        unint64_t v17 = sub_1CB8F1DC4(&v51);
        if (v16 == 1) {
        unint64_t v18 = 257;
        }
        if (v17 > 0x40) {
          unint64_t v18 = 513;
        }
        unint64_t v51 = v18;
      }
      uint64_t v20 = sub_1CB8F1DC4(&v51);
      if (v19 == 1) {
      uint64_t v21 = (8 << ~__clz(v20 - 1)) & 0x7FFFFFFF8 | 1;
      }
      if (v20 == 1) {
        uint64_t v21 = 1;
      }
      unint64_t v51 = v21;
      uint64_t v23 = sub_1CB8F1DC4(&v51);
      if (v22 == 1) {
      unint64_t v24 = v23 + 7;
      }
      char v50 = 0;
      unsigned __int8 MVTForLLT = llvm::getMVTForLLT(v52);
      if (v10 && v6[10] && (v24 >> 3) < v9)
      {
        unsigned __int8 v26 = v6[8] ? 0 : v6[9];
        if ((*(unsigned int (**)(uint64_t, void, void, void, void, void, char *))(*(void *)a6 + 648))(a6, MVTForLLT, 0, a4, v26, 0, &v50))
        {
          LODWORD(v27) = v9;
          if (v50) {
            continue;
          }
        }
      }
      unint64_t v27 = v24 >> 3;
      unint64_t v52 = v51;
    }
    BOOL v8 = ++v10 <= a2;
    if (v10 > a2) {
      break;
    }
    uint64_t v29 = v11[1];
    unint64_t v28 = (unint64_t)v11[2];
    if ((unint64_t)v29 >= v28)
    {
      uint64_t v31 = *v11;
      uint64_t v32 = (v29 - v31) >> 3;
      unint64_t v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 61) {
        abort();
      }
      char v34 = v6;
      uint64_t v35 = a2;
      uint64_t v36 = v28 - (void)v31;
      if (v36 >> 2 > v33) {
        unint64_t v33 = v36 >> 2;
      }
      unint64_t v37 = (unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v33;
      if (v37)
      {
        if (v37 >> 61) {
          sub_1CB833614();
        }
        int v38 = (char *)operator new(8 * v37);
      }
      else
      {
        int v38 = 0;
      }
      uint64_t v39 = &v38[8 * v32];
      *(void *)uint64_t v39 = v52;
      uint64_t v30 = v39 + 8;
      if (v29 == v31)
      {
        unint64_t v11 = a1;
      }
      else
      {
        do
        {
          uint64_t v40 = *((void *)v29 - 1);
          v29 -= 8;
          *((void *)v39 - 1) = v40;
          v39 -= 8;
        }
        while (v29 != v31);
        unint64_t v11 = a1;
        uint64_t v29 = *a1;
      }
      *unint64_t v11 = v39;
      v11[1] = v30;
      void v11[2] = &v38[8 * v37];
      if (v29) {
        operator delete(v29);
      }
      a2 = v35;
      int v6 = v34;
    }
    else
    {
      *(void *)uint64_t v29 = v52;
      uint64_t v30 = v29 + 8;
    }
    v11[1] = v30;
    v9 -= i;
  }
  while (v9);
  return v8;
}

void sub_1CC72CB18(unint64_t a1, llvm::IntegerType *this)
{
  unint64_t v13 = a1;
  if ((a1 & 0xFFFFFFFFFFFFFFF9) != 0 && (a1 & 4) != 0)
  {
    unint64_t v4 = (unsigned __int16)(a1 >> 19);
    uint64_t v5 = 0x800000000000000;
    if ((a1 & 2) != 0) {
      uint64_t v6 = 0x800000000000000;
    }
    else {
      uint64_t v6 = 0x8000000000000;
    }
    if ((a1 & 2) == 0)
    {
      unint64_t v4 = (a1 >> 19);
      uint64_t v5 = 0x8000000000000;
    }
    if (a1) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = v6;
    }
    if (a1) {
      unint64_t v8 = (a1 >> 3);
    }
    else {
      unint64_t v8 = v4;
    }
    unsigned int v10 = (llvm::FixedVectorType *)llvm::IntegerType::get(this, (llvm::LLVMContext *)v8);
    if ((v7 & a1) != 0) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v9);
    }
    llvm::FixedVectorType::get(v10, (llvm::Type *)(unsigned __int16)(a1 >> 3));
  }
  else
  {
    uint64_t v12 = (llvm::LLVMContext *)sub_1CB8F1DC4(&v13);
    if (v11 == 1) {
    llvm::IntegerType::get(this, v12);
    }
  }
}

uint64_t sub_1CC72CC0C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if ((a2 & 2) != 0) {
    unint64_t v6 = (unsigned __int16)(a2 >> 19);
  }
  else {
    unint64_t v6 = (a2 >> 19);
  }
  if ((a2 & 4) != 0) {
    unint64_t v7 = a2 & 4;
  }
  else {
    unint64_t v7 = 0;
  }
  if ((a2 & 4) == 0) {
    unint64_t v6 = (unsigned __int16)(a2 >> 3);
  }
  if (a2) {
    unint64_t v8 = a2 & 4;
  }
  else {
    unint64_t v8 = v7;
  }
  if (a2) {
    unint64_t v9 = (a2 >> 3);
  }
  else {
    unint64_t v9 = v6;
  }
  sub_1CC73C44C(a1, *(void *)(a3 + 24), 1, (uint64_t)&v48);
  unint64_t v10 = a2 & 0xFFFFFFFFFFFFFFF9;
  if (v8) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11 && v50)
  {
    llvm::APInt::truncOrSelf((llvm::APInt *)&v48, 8u, (uint64_t)&v51);
    llvm::APInt::getSplat((llvm::APInt *)v9, (llvm::APInt *)&v51, (uint64_t)&v56);
    unint64_t v46 = a2;
    unsigned int v47 = 0;
    unint64_t v37 = llvm::ConstantInt::get(****(llvm::ConstantInt *****)(a3 + 8), (llvm::LLVMContext *)&v56, v36);
    (*(void (**)(uint64_t, unint64_t *, void *))(*(void *)a3 + 16))(a3, &v46, v37);
    uint64_t v5 = *(unsigned int *)(*(void *)(v38 + 32) + 4);
    if (v57 >= 0x41 && v56) {
      MEMORY[0x1D25D9CB0](v56, 0x1000C8000313F17);
    }
    if (DWORD2(v51) >= 0x41 && (void)v51) {
      MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
    }
    goto LABEL_59;
  }
  if (v50)
  {
    uint64_t v12 = v48;
    if (v49 < 0x41) {
      goto LABEL_30;
    }
    int v13 = 0;
    int64_t v14 = ((unint64_t)v49 + 63) >> 6;
    do
    {
      if (v14-- < 1) {
        break;
      }
      unint64_t v16 = v48[v14];
      v13 += __clz(v16);
    }
    while (!v16);
    unsigned int v17 = v49 | 0xFFFFFFC0;
    if ((v49 & 0x3F) == 0) {
      unsigned int v17 = 0;
    }
    if (v49 - v13 - v17 <= 0x40)
    {
      uint64_t v12 = (void *)*v48;
LABEL_30:
      if (!v12)
      {
        unint64_t v56 = a2;
        unsigned int v57 = 0;
        if ((a2 & 2) != 0) {
          unint64_t v28 = (unsigned __int16)(a2 >> 19);
        }
        else {
          unint64_t v28 = (a2 >> 19);
        }
        if ((a2 & 4) == 0) {
          unint64_t v28 = (unsigned __int16)(a2 >> 3);
        }
        if (a2) {
          unint64_t v29 = (a2 >> 3);
        }
        else {
          unint64_t v29 = v28;
        }
        uint64_t v30 = llvm::IntegerType::get(****(llvm::IntegerType *****)(a3 + 8), (llvm::LLVMContext *)v29);
        uint64_t v32 = *(llvm::ConstantInt **)v30;
        unsigned int v33 = *(_DWORD *)(v30 + 8);
        DWORD2(v51) = v33 >> 8;
        if (v33 >> 8 >= 0x41) {
          operator new[]();
        }
        *(void *)&long long v51 = 0;
        char v34 = llvm::ConstantInt::get(v32, (llvm::LLVMContext *)&v51, v31);
        if (DWORD2(v51) >= 0x41 && (void)v51) {
          MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
        }
        (*(void (**)(uint64_t, unint64_t *, void *))(*(void *)a3 + 16))(a3, &v56, v34);
        goto LABEL_58;
      }
    }
  }
  if (v10) {
    BOOL v18 = v8 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  int v19 = !v18;
  char v20 = 3;
  if ((a2 & 1) == 0) {
    char v20 = 19;
  }
  unint64_t v21 = a2 >> v20;
  unint64_t v22 = a2 & 0x8000000000000000 | (8 * v21) | 1;
  uint64_t v23 = (a2 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v21) | 2;
  if ((a2 & 2) == 0) {
    uint64_t v23 = v22;
  }
  if (v19 == 1) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = a2;
  }
  unint64_t v56 = v24;
  unsigned int v57 = 0;
  LODWORD(v51) = v5;
  int v52 = 0;
  uint64_t v25 = sub_1CC738034((void *)a3, 126, &v56, (int *)&v51);
  if (v9 >= 9)
  {
    uint64_t v39 = v25;
    uint64_t v40 = v26;
    DWORD2(v51) = 8;
    *(void *)&long long v51 = 1;
    llvm::APInt::getSplat((llvm::APInt *)v9, (llvm::APInt *)&v51, (uint64_t)&v46);
    if (DWORD2(v51) >= 0x41 && (void)v51) {
      MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
    }
    *(void *)&long long v51 = v24;
    DWORD2(v51) = 0;
    unsigned __int8 v42 = llvm::ConstantInt::get(****(llvm::ConstantInt *****)(a3 + 8), (llvm::LLVMContext *)&v46, v41);
    uint64_t v43 = (*(uint64_t (**)(uint64_t, long long *, void *))(*(void *)a3 + 16))(a3, &v51, v42);
    unint64_t v56 = v24;
    unsigned int v57 = 0;
    *(void *)&long long v51 = v39;
    *((void *)&v51 + 1) = v40;
    int v52 = 1;
    uint64_t v53 = v43;
    uint64_t v54 = v44;
    int v55 = 1;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a3 + 32))(a3, 47, &v56, 1, &v51, 2, 0);
    uint64_t v5 = *(unsigned int *)(*(void *)(v45 + 32) + 4);
    if (v47 >= 0x41 && v46) {
      MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
    }
  }
  if (v19)
  {
    unint64_t v56 = a2;
    unsigned int v57 = 0;
    LODWORD(v51) = v5;
    int v52 = 0;
    sub_1CD62D79C((void *)a3, (uint64_t)&v56, &v51);
LABEL_58:
    uint64_t v5 = *(unsigned int *)(*(void *)(v27 + 32) + 4);
  }
LABEL_59:
  if (v50 && v49 >= 0x41 && v48) {
    MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
  }
  return v5;
}

void sub_1CC72D138()
{
}

_DWORD *sub_1CC72D14C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F261CA00;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CC72D198(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F261CA00;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1CC72D1C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  return !*a2 || *(unsigned char *)(v2 + 16) != 16 || llvm::APInt::urem((uint64_t **)(v2 + 24), *(unsigned int *)(a1 + 8)) != 0;
}

BOOL sub_1CC72D210(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[2];
  if (*a1 != v2) {
    *a1 = v1 + 4;
  }
  return v1 != v2;
}

BOOL sub_1CC72D234(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 != v2) {
    *(void *)(a1 + 8) = v1 + 4;
  }
  return v1 != v2;
}

uint64_t sub_1CC72D258(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    unint64_t v5 = result;
    do
    {
      unint64_t v6 = sub_1CB927410(a3, v5, 1);
      uint64_t v7 = *(void *)a3;
      unsigned int v8 = *(_DWORD *)(a3 + 8);
      uint64_t v9 = *(void *)a3 + 152 * v8;
      *(void *)uint64_t v9 = *(void *)v6;
      *(void *)(v9 + 8) = v9 + 24;
      *(void *)(v9 + 16) = 0x400000000;
      if (*(_DWORD *)(v6 + 16)) {
        sub_1CB927924(v9 + 8, v6 + 8);
      }
      *(unsigned char *)(v9 + 72) = *(unsigned char *)(v6 + 72);
      uint64_t v10 = v7 + 152 * v8;
      *(void *)(v10 + 80) = v10 + 96;
      uint64_t v11 = v10 + 80;
      *(void *)(v11 + 8) = 0x400000000;
      if (*(_DWORD *)(v6 + 88)) {
        sub_1CB927A18(v11, v6 + 80);
      }
      uint64_t v12 = v7 + 152 * v8;
      *(void *)(v12 + 112) = v12 + 128;
      uint64_t result = v12 + 112;
      *(void *)(result + 8) = 0x200000000;
      if (*(_DWORD *)(v6 + 120)) {
        uint64_t result = sub_1CB927A18(result, v6 + 112);
      }
      uint64_t v13 = v7 + 152 * v8;
      uint64_t v14 = *(void *)(v6 + 136);
      *(_DWORD *)(v13 + 144) = *(_DWORD *)(v6 + 144);
      *(void *)(v13 + 136) = v14;
      ++*(_DWORD *)(a3 + 8);
      v5 += 152;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t sub_1CC72D384(uint64_t a1, int a2)
{
  unsigned int v2 = a2 - 45;
  int v3 = *(_DWORD *)(a1 + 8 + 168 * (a2 - 45));
  if (v3) {
    unsigned int v2 = v3 - 45;
  }
  return a1 + 8 + 168 * v2;
}

uint64_t sub_1CC72D3AC(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  if (a3 != 1)
  {
    unint64_t v4 = a2 + 1;
    uint64_t v5 = 4 * a3 - 4;
    do
    {
      int v6 = *v4++;
      *(_DWORD *)(a1 + 168 * (v6 - 45) + 8) = v3;
      v5 -= 4;
    }
    while (v5);
  }
  unsigned int v7 = v3 - 45;
  int v8 = *(_DWORD *)(a1 + 8 + 168 * v7);
  if (v8) {
    unsigned int v7 = v8 - 45;
  }
  uint64_t result = a1 + 8 + 168 * v7;
  *(unsigned char *)(result + 4) = 1;
  return result;
}

uint64_t sub_1CC72D410(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 8 + 168 * (*(_DWORD *)a2 - 45));
  if (v4) {
    unsigned int v5 = v4 - 45;
  }
  else {
    unsigned int v5 = *(_DWORD *)a2 - 45;
  }
  uint64_t v6 = *(unsigned int *)(a1 + 8 + 168 * v5 + 16);
  if (!v6) {
    goto LABEL_35;
  }
  unsigned int v7 = (unsigned __int8 *)(*(void *)(a1 + 168 * v5 + 16) + 32);
  uint64_t v8 = 72 * v6;
  uint64_t v9 = 9;
  while (1)
  {
    uint64_t v10 = *((void *)v7 - 1);
    if (!v10)
    {
      sub_1CB920400();
LABEL_25:
      uint64_t v9 = 2;
      return v9 | (v11 << 32);
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v10 + 48))(v10, a2)) {
      break;
    }
    v7 += 72;
    v8 -= 72;
    if (!v8)
    {
      uint64_t v11 = 0;
      return v9 | (v11 << 32);
    }
  }
  uint64_t v11 = *((void *)v7 + 4);
  if (v11) {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 48))(v11, a2);
  }
  uint64_t v9 = *v7;
  if (v9 == 11)
  {
LABEL_35:
    if (*(void *)(a2 + 16))
    {
      uint64_t v13 = 0;
      unsigned int v14 = 0;
      uint64_t v15 = a1 + 35456;
      while (1)
      {
        uint64_t v16 = *(void *)(*(void *)(a2 + 8) + 8 * v13);
        v19[0] = *(_DWORD *)a2;
        v19[1] = v14;
        uint64_t v20 = v16;
        char v17 = sub_1CC72F46C(v15, (uint64_t)v19);
        if (v17) {
          break;
        }
        uint64_t v11 = 0;
        uint64_t v9 = 0;
        uint64_t v13 = ++v14;
        if (*(void *)(a2 + 16) <= (unint64_t)v14) {
          return v9 | (v11 << 32);
        }
      }
      char v18 = v17;
      uint64_t v11 = v14;
      if (v18 == 8)
      {
        uint64_t v9 = 8;
      }
      else
      {
        uint64_t v9 = 0;
        switch(v18)
        {
          case 1:
            uint64_t v9 = 1;
            break;
          case 2:
            goto LABEL_25;
          case 3:
            uint64_t v9 = 3;
            break;
          case 4:
            uint64_t v9 = 4;
            break;
          case 5:
            uint64_t v9 = 5;
            break;
          case 6:
            uint64_t v9 = 6;
            break;
          case 7:
            uint64_t v9 = 7;
            break;
          case 9:
            uint64_t v9 = 9;
            break;
          case 10:
            uint64_t v9 = 10;
            break;
          default:
            return v9 | (v11 << 32);
        }
      }
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v9 = 0;
    }
  }
  return v9 | (v11 << 32);
}

uint64_t sub_1CC72D660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD v39[8] = *MEMORY[0x1E4F143B8];
  unint64_t v37 = v39;
  uint64_t v38 = 0x800000000;
  int v3 = *(unsigned __int16 **)(a2 + 16);
  unsigned int v4 = v3[1];
  if (v3[1])
  {
    unsigned int v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = (unsigned __int8 *)(*((void *)v3 + 5) + 3);
    uint64_t v7 = 4;
    unint64_t v8 = 0x2000000000000001;
    while (1)
    {
      int v9 = *v6;
      v6 += 6;
      unsigned int v10 = v9 - 6;
      if ((v9 - 6) <= 5)
      {
        if (v8)
        {
          if (((v8 >> 1) & (1 << v10)) == 0)
          {
            unint64_t v8 = (2 * ((1 << v10) | (v8 >> 1))) | 0x2000000000000001;
LABEL_7:
            if (v10 == 1 && *v3 == 74)
            {
              int v11 = *(_DWORD *)(*(void *)(a2 + 32) + 32 * (*(_DWORD *)(a2 + 40) - 1) + 4);
              if ((v11 & 0x80000000) == 0) {
                goto LABEL_31;
              }
LABEL_10:
              unint64_t v12 = v11 & 0x7FFFFFFF;
              if (v12 >= *(unsigned int *)(a3 + 432)) {
                goto LABEL_31;
              }
              uint64_t v13 = *(void *)(*(void *)(a3 + 424) + 8 * v12);
            }
            else
            {
              int v11 = *(_DWORD *)(*(void *)(a2 + 32) + v7);
              if (v11 < 0) {
                goto LABEL_10;
              }
LABEL_31:
              uint64_t v13 = 0;
            }
            if (v4 >= HIDWORD(v38)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v37 + v4) = v13;
            unsigned int v4 = v38 + 1;
            LODWORD(v38) = v38 + 1;
            int v3 = *(unsigned __int16 **)(a2 + 16);
          }
        }
        else
        {
          uint64_t v25 = *(void *)(*(void *)v8 + 8 * (v10 >> 6));
          if ((v25 & (1 << v10)) == 0)
          {
            *(void *)(*(void *)v8 + 8 * (v10 >> 6)) = v25 | (1 << v10);
            goto LABEL_7;
          }
        }
      }
      ++v5;
      v7 += 32;
      if (v5 >= v3[1]) {
        goto LABEL_15;
      }
    }
  }
  unint64_t v8 = 0x2000000000000001;
LABEL_15:
  char v34 = v36;
  uint64_t v35 = 0x200000000;
  uint64_t v15 = (int *)(a2 + 48);
  unint64_t v14 = *(void *)(a2 + 48);
  if (v14 < 8) {
    goto LABEL_16;
  }
  if ((v14 & 7) != 0)
  {
    uint64_t v26 = (int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    BOOL v27 = (*(void *)(a2 + 48) & 7) != 3 || v26 == 0;
    if (v27 || (v29 = *v26, v15 = v26 + 2, uint64_t v28 = v29, !v29))
    {
LABEL_16:
      uint64_t v16 = 0;
      char v17 = v36;
      goto LABEL_17;
    }
    uint64_t v20 = &v15[2 * v28];
  }
  else
  {
    *(void *)(a2 + 48) = v14 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = (int *)(a2 + 56);
  }
  LODWORD(v16) = 0;
  do
  {
    uint64_t v21 = *(void *)v15;
    uint64_t v22 = (1 << *(unsigned char *)(*(void *)v15 + 34)) | *(void *)(*(void *)v15 + 8);
    *(void *)&long long v30 = *(void *)(*(void *)v15 + 24);
    *((void *)&v30 + 1) = 8 << (63 - __clz(v22 & -v22));
    LODWORD(v31) = *(unsigned char *)(v21 + 37) & 0xF;
    if (v16 >= HIDWORD(v35))
    {
      if (v34 > &v30 || (char *)v34 + 24 * v16 <= (char *)&v30) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v23 = (char *)v34 + 24 * v35;
    long long v24 = v30;
    *((void *)v23 + 2) = v31;
    *(_OWORD *)uint64_t v23 = v24;
    uint64_t v16 = (v35 + 1);
    LODWORD(v35) = v35 + 1;
    v15 += 2;
  }
  while (v15 != v20);
  int v3 = *(unsigned __int16 **)(a2 + 16);
  unsigned int v4 = v38;
  char v17 = v34;
LABEL_17:
  LODWORD(v30) = *v3;
  *((void *)&v30 + 1) = v37;
  uint64_t v31 = v4;
  uint64_t v32 = v17;
  uint64_t v33 = v16;
  uint64_t v18 = sub_1CC72D410(a1, (uint64_t)&v30);
  if (v34 != v36) {
    free(v34);
  }
  if ((v8 & 1) == 0)
  {
    if (*(void *)v8 != v8 + 16) {
      free(*(void **)v8);
    }
    MEMORY[0x1D25D9CE0](v8, 0x1080C40EF38A13ELL);
  }
  if (v37 != v39) {
    free(v37);
  }
  return v18;
}

uint64_t sub_1CC72DA70(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2;
  if ((sub_1CB8F1DC4(&v3) & 7) != 0) {
    return 126;
  }
  else {
    return 124;
  }
}

uint64_t sub_1CC72DAA8()
{
  *(void *)&long long v2 = "Don't verify that MIR is fully legal between GlobalISel passes";
  *((void *)&v2 + 1) = 62;
  int v1 = 1;
  sub_1CD62A47C(&v2, &v1);

  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCD9E68, &dword_1CB82C000);
}

uint64_t sub_1CC72DB18(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1 + 16;
  uint64_t v3 = 211;
  do
  {
    *(void *)(v2 - 16) = v2;
    *(void *)(v2 - 8) = 0x100000000;
    v2 += 40;
    --v3;
  }
  while (v3);
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 10128;
  do
  {
    *(void *)(v5 + v4 - 1688) = v5 + v4 - 1672;
    *(void *)(v5 + v4 - 1680) = 0x100000000;
    v4 += 48;
  }
  while (v4 != 10128);
  uint64_t v6 = a1 + 18584;
  uint64_t v7 = 10128;
  do
  {
    *(void *)(v6 - 16) = v6;
    *(void *)(v6 - 8) = 0x100000000;
    v6 += 48;
    v7 -= 48;
  }
  while (v7);
  *(unsigned char *)(a1 + 28696) = 0;
  uint64_t v8 = a1 + 28720;
  uint64_t v9 = 8440;
  do
  {
    *(void *)(v8 - 16) = v8;
    *(void *)(v8 - 8) = 0x100000000;
    v8 += 40;
    v9 -= 40;
  }
  while (v9);
  uint64_t v10 = a1 + 37160;
  uint64_t v11 = 8440;
  do
  {
    *(void *)(v10 - 16) = v10;
    *(void *)(v10 - 8) = 0x100000000;
    v10 += 40;
    v11 -= 40;
  }
  while (v11);
  uint64_t v12 = 45584;
  do
  {
    uint64_t v13 = a1 + v12;
    *(_OWORD *)uint64_t v13 = 0uLL;
    *(_OWORD *)(v13 + 16) = 0uLL;
    *(_DWORD *)(v13 + 32) = 1065353216;
    v12 += 40;
  }
  while (v13 + 40 != a1 + 54024);
  uint64_t v14 = 54024;
  do
  {
    uint64_t v15 = a1 + v14;
    *(_OWORD *)uint64_t v15 = 0uLL;
    *(_OWORD *)(v15 + 16) = 0uLL;
    *(_DWORD *)(v15 + 32) = 1065353216;
    v14 += 40;
  }
  while (v15 + 40 != a1 + 62464);
  __int16 v18 = 1;
  char v19 = 0;
  sub_1CC7304A4(&__p, (uint64_t)&v18, 1uLL);
  sub_1CC72FAB4(1u, a1 + 31624, (char **)&__p);
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  __int16 v18 = 1;
  char v19 = 0;
  sub_1CC7304A4(&__p, (uint64_t)&v18, 1uLL);
  sub_1CC72FAB4(1u, a1 + 31944, (char **)&__p);
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  __int16 v18 = 1;
  char v19 = 0;
  sub_1CC7304A4(&__p, (uint64_t)&v18, 1uLL);
  sub_1CC72FAB4(1u, a1 + 31864, (char **)&__p);
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  __int16 v18 = 1;
  char v19 = 0;
  sub_1CC7304A4(&__p, (uint64_t)&v18, 1uLL);
  sub_1CC72FAB4(0, a1 + 31664, (char **)&__p);
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  __int16 v18 = 1;
  char v19 = 0;
  sub_1CC7304A4(&__p, (uint64_t)&v18, 1uLL);
  sub_1CC72FAB4(1u, a1 + 31664, (char **)&__p);
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  __int16 v18 = 1;
  char v19 = 0;
  sub_1CC7304A4(&__p, (uint64_t)&v18, 1uLL);
  sub_1CC72FAB4(0, a1 + 31544, (char **)&__p);
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  __int16 v18 = 1;
  char v19 = 0;
  sub_1CC7304A4(&__p, (uint64_t)&v18, 1uLL);
  sub_1CC72FAB4(0, a1 + 31584, (char **)&__p);
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  v38[0] = &unk_1F261CAC0;
  v38[1] = sub_1CD62A588;
  uint64_t v39 = v38;
  if (!*(_DWORD *)(a1 + 9552)) {
    sub_1CC72FD74((unsigned int *)(a1 + 9544), 1uLL);
  }
  sub_1CC72F114(*(void **)(a1 + 9544), v38);
  if (v39 == v38)
  {
    (*(void (**)(void *))(v38[0] + 32))(v38);
  }
  else if (v39)
  {
    (*(void (**)(void))(*v39 + 40))();
  }
  v36[0] = &unk_1F261CAC0;
  v36[1] = sub_1CD62A594;
  unint64_t v37 = v36;
  if (!*(_DWORD *)(a1 + 8448)) {
    sub_1CC72FD74((unsigned int *)(a1 + 8440), 1uLL);
  }
  sub_1CC72F114(*(void **)(a1 + 8440), v36);
  if (v37 == v36)
  {
    (*(void (**)(void *))(v36[0] + 32))(v36);
  }
  else if (v37)
  {
    (*(void (**)(void))(*v37 + 40))();
  }
  v34[0] = &unk_1F261CAC0;
  v34[1] = sub_1CD62A594;
  uint64_t v35 = v34;
  if (!*(_DWORD *)(a1 + 9456)) {
    sub_1CC72FD74((unsigned int *)(a1 + 9448), 1uLL);
  }
  sub_1CC72F114(*(void **)(a1 + 9448), v34);
  if (v35 == v34)
  {
    (*(void (**)(void *))(v34[0] + 32))(v34);
  }
  else if (v35)
  {
    (*(void (**)(void))(*v35 + 40))();
  }
  v32[0] = &unk_1F261CAC0;
  v32[1] = sub_1CD62A588;
  uint64_t v33 = v32;
  if (!*(_DWORD *)(a1 + 10608)) {
    sub_1CC72FD74((unsigned int *)(a1 + 10600), 1uLL);
  }
  sub_1CC72F114(*(void **)(a1 + 10600), v32);
  if (v33 == v32)
  {
    (*(void (**)(void *))(v32[0] + 32))(v32);
  }
  else if (v33)
  {
    (*(void (**)(void))(*v33 + 40))();
  }
  v30[0] = &unk_1F261CAC0;
  v30[1] = sub_1CD62A588;
  uint64_t v31 = v30;
  if (!*(_DWORD *)(a1 + 10896)) {
    sub_1CC72FD74((unsigned int *)(a1 + 10888), 1uLL);
  }
  sub_1CC72F114(*(void **)(a1 + 10888), v30);
  if (v31 == v30)
  {
    (*(void (**)(void *))(v30[0] + 32))(v30);
  }
  else if (v31)
  {
    (*(void (**)(void))(*v31 + 40))();
  }
  v28[0] = &unk_1F261CAC0;
  v28[1] = sub_1CD62A5A8;
  uint64_t v29 = v28;
  if (!*(_DWORD *)(a1 + 11760)) {
    sub_1CC72FD74((unsigned int *)(a1 + 11752), 1uLL);
  }
  sub_1CC72F114(*(void **)(a1 + 11752), v28);
  if (v29 == v28)
  {
    (*(void (**)(void *))(v28[0] + 32))(v28);
  }
  else if (v29)
  {
    (*(void (**)(void))(*v29 + 40))();
  }
  v26[0] = &unk_1F261CAC0;
  v26[1] = sub_1CD62A588;
  BOOL v27 = v26;
  if (!*(_DWORD *)(a1 + 9888)) {
    sub_1CC72FD74((unsigned int *)(a1 + 9880), 1uLL);
  }
  sub_1CC72F114(*(void **)(a1 + 9880), v26);
  if (v27 == v26)
  {
    (*(void (**)(void *))(v26[0] + 32))(v26);
  }
  else if (v27)
  {
    (*(void (**)(void))(*v27 + 40))();
  }
  v24[0] = &unk_1F261CAC0;
  v24[1] = sub_1CD62A588;
  uint64_t v25 = v24;
  uint64_t v16 = (void **)(a1 + 9784);
  if (!*(_DWORD *)(a1 + 9792)) {
    sub_1CC72FD74((unsigned int *)(a1 + 9784), 1uLL);
  }
  sub_1CC72F114(*v16, v24);
  if (v25 == v24)
  {
    (*(void (**)(void *))(v24[0] + 32))(v24);
  }
  else if (v25)
  {
    (*(void (**)(void))(*v25 + 40))();
  }
  v22[0] = &unk_1F261CAC0;
  v22[1] = sub_1CD62A588;
  uint64_t v23 = v22;
  if (*(_DWORD *)(a1 + 9792) <= 1u) {
    sub_1CC72FD74((unsigned int *)(a1 + 9784), 2uLL);
  }
  sub_1CC72F114(*v16 + 4, v22);
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  __int16 v18 = 1;
  char v19 = 6;
  sub_1CC7304A4(&__p, (uint64_t)&v18, 1uLL);
  sub_1CC72FAB4(0, a1 + 33984, (char **)&__p);
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_1CC72E55C(uint64_t a1)
{
  void (**v106)(void **__return_ptr);
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  unsigned int v117;
  void *v118[3];
  void *v119;
  void *v120;
  char *v121;
  void *__p;
  char *v123;
  char *v124;
  uint64_t *v125;
  void *v126[2];
  uint64_t *v127;
  void *v128[2];
  char *v129;
  char *v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  unint64_t *v135;
  uint64_t v136;

  uint64_t v1 = 0;
  unint64_t v136 = *MEMORY[0x1E4F143B8];
  do
  {
    uint64_t v108 = v1;
    uint64_t v2 = a1 + 40 * v1;
    if (*(_DWORD *)(v2 + 8))
    {
      uint64_t v3 = 0;
      unsigned int v4 = 0;
      uint64_t v5 = a1 + 48 * v1;
      int v113 = v5 + 8440;
      uint64_t v6 = a1 + 40 * v1;
      uint64_t v112 = v6 + 28704;
      int v110 = v6;
      uint64_t v111 = v5 + 18568;
      uint64_t v109 = v6 + 37144;
      unint64_t v115 = v1 + 45;
      while (1)
      {
        uint64_t v129 = 0;
        int v130 = 0;
        int v131 = 0;
        v128[0] = 0;
        v128[1] = 0;
        uint64_t v127 = (uint64_t *)v128;
        v126[0] = 0;
        v126[1] = 0;
        uint64_t v125 = (uint64_t *)v126;
        uint64_t v7 = *(void *)v2 + 24 * v3;
        int v8 = *(_DWORD *)(v7 + 8);
        uint64_t v9 = *(void *)v7;
        uint64_t v10 = *(unsigned int *)(v7 + 16);
        uint64_t v11 = v9 + 16 * v10;
        uint64_t v117 = v4;
        uint64_t v114 = v3;
        if (v8)
        {
          if (v10)
          {
            uint64_t v12 = 16 * v10;
            uint64_t v13 = v9;
            while (1)
            {
              BOOL v14 = *(void *)v13 == 4 || *(void *)v13 == 2;
              if (!v14) {
                break;
              }
              v13 += 16;
              v12 -= 16;
              if (!v12) {
                goto LABEL_13;
              }
            }
          }
          else
          {
            uint64_t v13 = v9;
          }
        }
        else
        {
LABEL_13:
          uint64_t v13 = v9 + 16 * v10;
        }
        uint64_t v15 = v9 + 16 * v10;
        uint64_t v16 = v15;
        if (v13 != v15) {
          break;
        }
LABEL_100:
        int v132 = (unint64_t)&unk_1F261CAC0;
        uint64_t v133 = (char *)sub_1CD62A5C0;
        int v135 = &v132;
        unsigned int v61 = v117;
        if (*(_DWORD *)(v113 + 8) > v117)
        {
          uint64_t v62 = (void *)(*(void *)v113 + 32 * v114);
          if (v62[3]) {
            sub_1CC72F114(&v132, v62);
          }
        }
        unint64_t v63 = 126 - 2 * __clz((v130 - v129) >> 2);
        if (v130 == v129) {
          uint64_t v64 = 0;
        }
        else {
          uint64_t v64 = v63;
        }
        sub_1CC730704((unsigned __int16 *)v129, (unsigned __int16 *)v130, v64, 1);
        if (!v135) {
LABEL_204:
        }
          sub_1CB920400();
        (*(void (**)(void **__return_ptr))(*v135 + 48))(&__p);
        sub_1CC72FAB4(v117, v112, (char **)&__p);
        if (__p)
        {
          int v123 = (char *)__p;
          operator delete(__p);
        }
        if (v135 == &v132)
        {
          (*(void (**)(unint64_t *))(v132 + 32))(&v132);
        }
        else if (v135)
        {
          (*(void (**)(void))(*v135 + 40))();
        }
        uint64_t v65 = v127;
        if (v127 != (uint64_t *)v128)
        {
          do
          {
            LOWORD(v132) = *((_WORD *)v65 + 16);
            long long v134 = 0;
            int v135 = 0;
            uint64_t v133 = 0;
            sub_1CC72FE90(&v133, (unsigned char *)v65[5], (unsigned char *)v65[6], (v65[6] - v65[5]) >> 2);
            int v66 = v133;
            unint64_t v67 = 126 - 2 * __clz((v134 - v133) >> 2);
            if (v134 == v133) {
              uint64_t v68 = 0;
            }
            else {
              uint64_t v68 = v67;
            }
            sub_1CC730704((unsigned __int16 *)v133, (unsigned __int16 *)v134, v68, 1);
            unsigned __int16 v69 = v132;
            sub_1CC72F5BC((uint64_t)&__p, (uint64_t)&v133, 9, 9);
            sub_1CD62A5D4(a1, v115, v117, v69, (char **)&__p);
            if (__p)
            {
              int v123 = (char *)__p;
              operator delete(__p);
            }
            if (v66) {
              operator delete(v66);
            }
            uint64_t v70 = (uint64_t *)v65[1];
            if (v70)
            {
              do
              {
                uint64_t v71 = v70;
                uint64_t v70 = (uint64_t *)*v70;
              }
              while (v70);
            }
            else
            {
              do
              {
                uint64_t v71 = (uint64_t *)v65[2];
                BOOL v14 = *v71 == (void)v65;
                uint64_t v65 = v71;
              }
              while (!v14);
            }
            uint64_t v65 = v71;
          }
          while (v71 != (uint64_t *)v128);
        }
        std::string __p = 0;
        int v123 = 0;
        uint64_t v124 = 0;
        uint64_t v72 = v125;
        if (v125 == (uint64_t *)v126)
        {
          int v103 = 0;
          uint64_t v102 = 0;
        }
        else
        {
          do
          {
            LOWORD(v132) = *((_WORD *)v72 + 16);
            long long v134 = 0;
            int v135 = 0;
            uint64_t v133 = 0;
            sub_1CC72FE90(&v133, (unsigned char *)v72[5], (unsigned char *)v72[6], (v72[6] - v72[5]) >> 2);
            unint64_t v73 = 126 - 2 * __clz((v134 - v133) >> 2);
            if (v134 == v133) {
              uint64_t v74 = 0;
            }
            else {
              uint64_t v74 = v73;
            }
            sub_1CC730704((unsigned __int16 *)v133, (unsigned __int16 *)v134, v74, 1);
            unsigned int v75 = (unsigned __int16)v132;
            uint64_t v76 = v123;
            if (v123 >= v124)
            {
              int v78 = (char *)__p;
              uint64_t v79 = (v123 - (unsigned char *)__p) >> 2;
              unint64_t v80 = v79 + 1;
              if ((unint64_t)(v79 + 1) >> 62) {
                goto LABEL_202;
              }
              uint64_t v81 = v124 - (unsigned char *)__p;
              if ((v124 - (unsigned char *)__p) >> 1 > v80) {
                unint64_t v80 = v81 >> 1;
              }
              if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v82 = v80;
              }
              if (v82)
              {
                if (v82 >> 62) {
                  goto LABEL_203;
                }
                unsigned int v83 = (char *)operator new(4 * v82);
              }
              else
              {
                unsigned int v83 = 0;
              }
              unsigned int v84 = &v83[4 * v79];
              *(_DWORD *)unsigned int v84 = v75;
              uint64_t v77 = v84 + 4;
              if (v76 != v78)
              {
                do
                {
                  int v85 = *((_DWORD *)v76 - 1);
                  v76 -= 4;
                  *((_DWORD *)v84 - 1) = v85;
                  v84 -= 4;
                }
                while (v76 != v78);
                uint64_t v76 = (char *)__p;
              }
              std::string __p = v84;
              int v123 = v77;
              uint64_t v124 = &v83[4 * v82];
              if (v76) {
                operator delete(v76);
              }
            }
            else
            {
              *(_DWORD *)int v123 = (unsigned __int16)v132;
              uint64_t v77 = v76 + 4;
            }
            int v123 = v77;
            uint64_t v119 = 0;
            unint64_t v120 = 0;
            uint64_t v121 = 0;
            char v86 = v133;
            uint64_t v87 = v134;
            if (v133 != v134)
            {
              uint64_t v88 = 0;
              do
              {
                int v89 = *(_DWORD *)v86;
                unsigned int v90 = (unsigned __int16)*(_DWORD *)v86 / v75;
                if (v88 >= v121)
                {
                  unint64_t v92 = (char *)v119;
                  uint64_t v93 = (v88 - (unsigned char *)v119) >> 2;
                  unint64_t v94 = v93 + 1;
                  if ((unint64_t)(v93 + 1) >> 62) {
                    goto LABEL_202;
                  }
                  uint64_t v95 = v121 - (unsigned char *)v119;
                  if ((v121 - (unsigned char *)v119) >> 1 > v94) {
                    unint64_t v94 = v95 >> 1;
                  }
                  if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v96 = v94;
                  }
                  if (v96)
                  {
                    if (v96 >> 62) {
                      goto LABEL_203;
                    }
                    uint64_t v97 = (char *)operator new(4 * v96);
                  }
                  else
                  {
                    uint64_t v97 = 0;
                  }
                  uint64_t v98 = (unsigned int *)&v97[4 * v93];
                  *uint64_t v98 = v89 & 0xFF0000 | v90;
                  int v91 = v98 + 1;
                  if (v88 != v92)
                  {
                    do
                    {
                      unsigned int v99 = *((_DWORD *)v88 - 1);
                      v88 -= 4;
                      *--uint64_t v98 = v99;
                    }
                    while (v88 != v92);
                    uint64_t v88 = (char *)v119;
                  }
                  uint64_t v119 = v98;
                  unint64_t v120 = v91;
                  uint64_t v121 = &v97[4 * v96];
                  if (v88) {
                    operator delete(v88);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v88 = v89 & 0xFF0000 | v90;
                  int v91 = v88 + 4;
                }
                unint64_t v120 = v91;
                v86 += 4;
                uint64_t v88 = (char *)v91;
              }
              while (v86 != v87);
            }
            sub_1CC72F5BC((uint64_t)v118, (uint64_t)&v119, 4, 3);
            unsigned int v61 = v117;
            sub_1CD62A6B8(a1, v115, v117, v75, (char **)v118);
            if (v118[0])
            {
              v118[1] = v118[0];
              operator delete(v118[0]);
            }
            if (v119) {
              operator delete(v119);
            }
            if (v133) {
              operator delete(v133);
            }
            long long v100 = (uint64_t *)v72[1];
            if (v100)
            {
              do
              {
                unint64_t v101 = v100;
                long long v100 = (uint64_t *)*v100;
              }
              while (v100);
            }
            else
            {
              do
              {
                unint64_t v101 = (uint64_t *)v72[2];
                BOOL v14 = *v101 == (void)v72;
                uint64_t v72 = v101;
              }
              while (!v14);
            }
            uint64_t v72 = v101;
          }
          while (v101 != (uint64_t *)v126);
          uint64_t v102 = (unsigned __int16 *)__p;
          int v103 = (unsigned __int16 *)v123;
        }
        unint64_t v104 = 126 - 2 * __clz(((char *)v103 - (char *)v102) >> 2);
        if (v103 == v102) {
          uint64_t v105 = 0;
        }
        else {
          uint64_t v105 = v104;
        }
        sub_1CC730704(v102, v103, v105, 1);
        uint64_t v106 = (void (**)(void **__return_ptr))&unk_1F261CAC0;
        int v132 = (unint64_t)&unk_1F261CAC0;
        uint64_t v133 = (char *)sub_1CD62A5C0;
        int v135 = &v132;
        if (*(_DWORD *)(v111 + 8) > v61)
        {
          int v107 = (void *)(*(void *)v111 + 32 * v114);
          if (v107[3])
          {
            sub_1CC72F114(&v132, v107);
            if (!v135) {
              goto LABEL_204;
            }
            uint64_t v106 = (void (**)(void **__return_ptr))*v135;
          }
        }
        v106[6](&v119);
        sub_1CC72FAB4(v61, v109, (char **)&v119);
        if (v119)
        {
          unint64_t v120 = v119;
          operator delete(v119);
        }
        if (v135 == &v132)
        {
          (*(void (**)(unint64_t *))(v132 + 32))(&v132);
        }
        else if (v135)
        {
          (*(void (**)(void))(*v135 + 40))();
        }
        if (__p)
        {
          int v123 = (char *)__p;
          operator delete(__p);
        }
        sub_1CD4F4ECC(v126[0]);
        sub_1CD4F4ECC(v128[0]);
        if (v129)
        {
          int v130 = v129;
          operator delete(v129);
        }
        uint64_t v3 = v61 + 1;
        uint64_t v2 = v110;
        unsigned int v4 = v3;
        if (*(_DWORD *)(v110 + 8) == v3) {
          goto LABEL_200;
        }
      }
      while (1)
      {
        int v17 = *(unsigned __int8 *)(v13 + 8);
        int v132 = *(void *)v13;
        unsigned __int16 v19 = sub_1CB8F1DC4(&v132);
        int v20 = (int)v18;
        if ((v132 & 0xFFFFFFFFFFFFFFF9) != 0 && (v132 & 6) == 2)
        {
          char v25 = 19;
          if ((v132 & 4) != 0) {
            char v25 = 35;
          }
          LOWORD(__p) = v132 >> v25;
          BOOL v27 = sub_1CC730550(&v127, (unsigned __int16)__p, &__p);
          if (v20 == 1) {
          uint64_t v29 = (int *)v27[6];
          }
          unint64_t v28 = v27[7];
          if ((unint64_t)v29 >= v28)
          {
            long long v30 = (_DWORD *)v27[5];
            uint64_t v31 = v29 - v30;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 62) {
              goto LABEL_202;
            }
            uint64_t v33 = v28 - (void)v30;
            if (v33 >> 1 > v32) {
              unint64_t v32 = v33 >> 1;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            if (v34)
            {
              if (v34 >> 62) {
                goto LABEL_203;
              }
              uint64_t v35 = (char *)operator new(4 * v34);
            }
            else
            {
              uint64_t v35 = 0;
            }
            uint64_t v54 = (int *)&v35[4 * v31];
            *uint64_t v54 = v19 | (v17 << 16);
            uint64_t v43 = v54 + 1;
            uint64_t v15 = v16;
            if (v29 != v30)
            {
              do
              {
                int v55 = *--v29;
                *--uint64_t v54 = v55;
              }
              while (v29 != v30);
LABEL_86:
              uint64_t v29 = (int *)v27[5];
            }
LABEL_87:
            v27[5] = v54;
            v27[6] = v43;
            v27[7] = &v35[4 * v34];
            if (v29) {
              operator delete(v29);
            }
            goto LABEL_89;
          }
        }
        else
        {
          if ((v132 & 0xFFFFFFFFFFFFFFF9) == 0 || (v132 & 4) == 0)
          {
            if (v18 == 1) {
            uint64_t v23 = (unsigned __int16 *)v130;
            }
            if ((unint64_t)v130 >= v131)
            {
              uint64_t v44 = v129;
              int64_t v45 = (v130 - v129) >> 2;
              unint64_t v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62) {
                goto LABEL_202;
              }
              uint64_t v47 = v131 - (void)v129;
              if ((uint64_t)(v131 - (void)v129) >> 1 > v46) {
                unint64_t v46 = v47 >> 1;
              }
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v48 = v46;
              }
              if (v48)
              {
                if (v48 >> 62) {
                  goto LABEL_203;
                }
                unsigned int v49 = (char *)operator new(4 * v48);
              }
              else
              {
                unsigned int v49 = 0;
              }
              unint64_t v56 = (int *)&v49[4 * v45];
              int *v56 = v19 | (v17 << 16);
              long long v24 = (unsigned __int16 *)(v56 + 1);
              if (v23 != (unsigned __int16 *)v44)
              {
                do
                {
                  int v57 = *((_DWORD *)v23 - 1);
                  v23 -= 2;
                  *--unint64_t v56 = v57;
                }
                while (v23 != (unsigned __int16 *)v44);
                uint64_t v23 = (unsigned __int16 *)v129;
              }
              uint64_t v129 = (char *)v56;
              int v130 = (char *)v24;
              int v131 = (unint64_t)&v49[4 * v48];
              if (v23) {
                operator delete(v23);
              }
            }
            else
            {
              *(_DWORD *)int v130 = v19 | (v17 << 16);
              long long v24 = v23 + 2;
            }
            int v130 = (char *)v24;
            goto LABEL_90;
          }
          char v36 = 19;
          if (v132) {
            char v36 = 3;
          }
          unint64_t v37 = v132 >> v36;
          if ((v132 & 2) != 0) {
            uint64_t v38 = (void *)((v132 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v37) | 2);
          }
          else {
            uint64_t v38 = (void *)(v132 & 0x8000000000000000 | (8 * v37) | 1);
          }
          std::string __p = v38;
          unsigned __int16 v40 = sub_1CB8F1DC4((unint64_t *)&__p);
          if (v39 == 1) {
          LOWORD(v119) = v40;
          }
          BOOL v27 = sub_1CC730550(&v125, v40, &v119);
          if (v20 == 1) {
          uint64_t v29 = (int *)v27[6];
          }
          unint64_t v42 = v27[7];
          if ((unint64_t)v29 >= v42)
          {
            char v50 = (_DWORD *)v27[5];
            uint64_t v51 = v29 - v50;
            unint64_t v52 = v51 + 1;
            if ((unint64_t)(v51 + 1) >> 62) {
LABEL_202:
            }
              abort();
            uint64_t v53 = v42 - (void)v50;
            if (v53 >> 1 > v52) {
              unint64_t v52 = v53 >> 1;
            }
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v52;
            }
            if (v34)
            {
              if (v34 >> 62) {
LABEL_203:
              }
                sub_1CB833614();
              uint64_t v35 = (char *)operator new(4 * v34);
            }
            else
            {
              uint64_t v35 = 0;
            }
            uint64_t v54 = (int *)&v35[4 * v51];
            *uint64_t v54 = v19 | (v17 << 16);
            uint64_t v43 = v54 + 1;
            uint64_t v15 = v16;
            if (v29 != v50)
            {
              do
              {
                int v58 = *--v29;
                *--uint64_t v54 = v58;
              }
              while (v29 != v50);
              goto LABEL_86;
            }
            goto LABEL_87;
          }
        }
        int *v29 = v19 | (v17 << 16);
        uint64_t v43 = v29 + 1;
LABEL_89:
        v27[6] = v43;
LABEL_90:
        uint64_t v59 = v13 + 16;
        uint64_t v13 = v11;
        if (v59 != v11)
        {
          uint64_t v13 = v59;
          while (*(void *)v13 == 4 || *(void *)v13 == 2)
          {
            v13 += 16;
            if (v13 == v11)
            {
              uint64_t v13 = v11;
              break;
            }
          }
        }
        if (v13 == v15) {
          goto LABEL_100;
        }
      }
    }
LABEL_200:
    uint64_t v1 = v108 + 1;
  }
  while (v108 != 210);
  *(unsigned char *)(a1 + 28696) = 1;
}

void *sub_1CC72F114(void *a1, void *a2)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      int v8 = v7;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v7);
    }
    else
    {
      int v8 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    int v8 = 0;
  }
  if (v7 != a1)
  {
    unsigned int v4 = v8;
    uint64_t v5 = (void *)a1[3];
    if (v8 == v7)
    {
      if (v5 == a1)
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, v9);
        (*(void (**)(void *))(*v8 + 32))(v8);
        int v8 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v7);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        int v8 = v7;
        (*(void (**)(void *, void *))(v9[0] + 24))(v9, a1);
        (*(void (**)(void *))(v9[0] + 32))(v9);
      }
      else
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, a1);
        (*(void (**)(void *))(*v8 + 32))(v8);
        int v8 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v7);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v8;
      int v8 = v7;
    }
    else
    {
      int v8 = (void *)a1[3];
      a1[3] = v4;
    }
  }
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
  return a1;
}

uint64_t sub_1CC72F46C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    return sub_1CC72F490(a1, a2);
  }
  if ((v2 & 0xFFFFFFFFFFFFFFF9) != 0 && (*(void *)(a2 + 8) & 6) == 2) {
    return sub_1CC72F490(a1, a2);
  }
  else {
    return sub_1CD62A79C(a1, (int *)a2);
  }
}

uint64_t sub_1CC72F490(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a2 - 256) < 0xFFFFFF2D) {
    goto LABEL_14;
  }
  unsigned int v3 = *(_DWORD *)a2 - 45;
  uint64_t v5 = (unint64_t *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 8);
  if ((v4 & 0xFFFFFFFFFFFFFFF9) != 0 && (*(void *)(a2 + 8) & 6) == 2)
  {
    uint64_t v7 = sub_1CC731998((void *)(a1 + 40 * v3 + 45584), v4 >> 19);
    if (!v7)
    {
LABEL_14:
      LOBYTE(v12) = 10;
      return v12;
    }
    uint64_t v14 = (uint64_t)(v7 + 3);
  }
  else
  {
    uint64_t v14 = a1 + 40 * v3 + 28704;
  }
  unsigned int v8 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)(v14 + 8) <= v8) {
    goto LABEL_14;
  }
  uint64_t v9 = (unsigned __int16 **)(*(void *)v14 + 24 * v8);
  unsigned int v11 = sub_1CB8F1DC4(v5);
  if (v10 == 1)
  {
    unsigned int v15 = v11;
    unsigned int v11 = v15;
  }
  return (sub_1CC72F878(v9, v11) >> 16);
}

void sub_1CC72F5BC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = *(_WORD **)a2;
  if (*(void *)(a2 + 8) == *(void *)a2)
  {
    uint64_t v29 = 0;
    unsigned int v11 = 0;
    unint64_t v27 = 0;
    int v28 = 1;
  }
  else
  {
    unsigned __int8 v7 = a3;
    int v9 = a3 << 16;
    if (*v6 == 1)
    {
      unsigned int v11 = 0;
    }
    else
    {
      uint64_t v10 = operator new(4uLL);
      *uint64_t v10 = (v7 << 16) | 1;
      unsigned int v11 = v10 + 1;
      *(void *)(a1 + 16) = v10 + 1;
      *(void *)a1 = v10;
      *(void *)(a1 + 8) = v10 + 1;
    }
    unint64_t v12 = 0;
    do
    {
      unint64_t v13 = *(void *)(a1 + 16);
      if ((unint64_t)v11 < v13)
      {
        *unsigned int v11 = *(_DWORD *)&v6[2 * v12];
        uint64_t v21 = v11 + 1;
      }
      else
      {
        uint64_t v14 = *(int **)a1;
        uint64_t v15 = ((uint64_t)v11 - *(void *)a1) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          goto LABEL_51;
        }
        uint64_t v17 = v13 - (void)v14;
        if (v17 >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          if (v18 >> 62) {
            goto LABEL_52;
          }
          unsigned __int16 v19 = (char *)operator new(4 * v18);
        }
        else
        {
          unsigned __int16 v19 = 0;
        }
        int v20 = &v19[4 * v15];
        *(_DWORD *)int v20 = *(_DWORD *)&v6[2 * v12];
        uint64_t v21 = (int *)(v20 + 4);
        if (v11 != v14)
        {
          do
          {
            int v22 = *--v11;
            *((_DWORD *)v20 - 1) = v22;
            v20 -= 4;
          }
          while (v11 != v14);
          unsigned int v11 = *(int **)a1;
        }
        *(void *)a1 = v20;
        *(void *)(a1 + 8) = v21;
        *(void *)(a1 + 16) = &v19[4 * v18];
        if (v11) {
          operator delete(v11);
        }
      }
      *(void *)(a1 + 8) = v21;
      uint64_t v23 = 4 * v12;
      uint64_t v6 = *(_WORD **)a2;
      int v24 = *(unsigned __int16 *)(*(void *)a2 + 4 * v12++);
      unint64_t v25 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
      if (v12 >= v25 || v24 + 1 == (unsigned __int16)v6[2 * v12])
      {
        unsigned int v11 = v21;
      }
      else
      {
        int v26 = (unsigned __int16)(v24 + 1) | v9;
        if ((unint64_t)v21 < *(void *)(a1 + 16))
        {
          *uint64_t v21 = v26;
          unsigned int v11 = v21 + 1;
        }
        else
        {
          unsigned int v11 = sub_1CC73062C((void **)a1, v26);
        }
        *(void *)(a1 + 8) = v11;
        uint64_t v6 = *(_WORD **)a2;
        LOWORD(v24) = *(_WORD *)(*(void *)a2 + v23) + 1;
        unint64_t v25 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
      }
    }
    while (v12 < v25);
    unint64_t v27 = *(void *)(a1 + 16);
    int v28 = (unsigned __int16)(v24 + 1);
    if ((unint64_t)v11 < v27)
    {
      *unsigned int v11 = v28 | (a4 << 16);
      char v36 = v11 + 1;
      goto LABEL_46;
    }
    uint64_t v29 = *(int **)a1;
  }
  uint64_t v30 = v11 - v29;
  unint64_t v31 = v30 + 1;
  if ((unint64_t)(v30 + 1) >> 62) {
LABEL_51:
  }
    abort();
  uint64_t v32 = v27 - (void)v29;
  if (v32 >> 1 > v31) {
    unint64_t v31 = v32 >> 1;
  }
  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v33 = v31;
  }
  if (v33)
  {
    if (v33 >> 62) {
LABEL_52:
    }
      sub_1CB833614();
    unint64_t v34 = (char *)operator new(4 * v33);
  }
  else
  {
    unint64_t v34 = 0;
  }
  uint64_t v35 = (int *)&v34[4 * v30];
  *uint64_t v35 = v28 | (a4 << 16);
  char v36 = v35 + 1;
  if (v11 != v29)
  {
    do
    {
      int v37 = *--v11;
      *--uint64_t v35 = v37;
    }
    while (v11 != v29);
    uint64_t v29 = *(int **)a1;
  }
  *(void *)a1 = v35;
  *(void *)(a1 + 8) = v36;
  *(void *)(a1 + 16) = &v34[4 * v33];
  if (v29) {
    operator delete(v29);
  }
LABEL_46:
  *(void *)(a1 + 8) = v36;
}

uint64_t sub_1CC72F878(unsigned __int16 **a1, unsigned int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (char *)a1[1] - (char *)*a1;
  unint64_t v4 = v3 >> 2;
  if (v3)
  {
    uint64_t v5 = *a1;
    unint64_t v6 = v4;
    do
    {
      unint64_t v7 = v6 >> 1;
      unsigned int v8 = &v5[2 * (v6 >> 1)];
      unsigned int v10 = *v8;
      int v9 = v8 + 2;
      v6 += ~(v6 >> 1);
      if (v10 <= a2) {
        uint64_t v5 = v9;
      }
      else {
        unint64_t v6 = v7;
      }
    }
    while (v6);
  }
  else
  {
    uint64_t v5 = *a1;
  }
  unint64_t v11 = (char *)v5 - (char *)v2;
  uint64_t v12 = *((unsigned __int8 *)v2 + (((((char *)v5 - (char *)v2) << 30) - 0x100000000) >> 30) + 2);
  if ((v12 - 5) >= 4)
  {
    unint64_t v14 = v11 >> 2;
    uint64_t v15 = v11 << 30;
    switch(v12)
    {
      case 1:
        goto LABEL_12;
      case 2:
      case 4:
        unint64_t v23 = v15 >> 32;
        if (v23 >= v4) {
          return (unsigned __int16)a2 | (v12 << 16);
        }
        int v24 = &v2[2 * v23 + 1];
        break;
      case 3:
        int v35 = v12;
        int v36 = v14;
        __int16 v37 = 1;
        char v38 = 3;
        unint64_t v27 = a1;
        sub_1CC7304A4(&v39, (uint64_t)&v37, 1uLL);
        uint64_t v29 = *v27;
        int v28 = v27[1];
        unint64_t v34 = v27;
        if ((char *)v28 - (char *)*v27 == (char *)v40 - (char *)v39)
        {
          if (v29 == v28)
          {
            LOBYTE(v32) = 1;
          }
          else
          {
            uint64_t v30 = v39;
            do
            {
              BOOL v32 = *v29 == *v30 && *((unsigned __int8 *)v29 + 2) == *((unsigned __int8 *)v30 + 2);
              v29 += 2;
              v30 += 2;
            }
            while (v32 && v29 != v28);
          }
        }
        else
        {
          LOBYTE(v32) = 0;
        }
        if (v39)
        {
          unsigned __int16 v40 = v39;
          operator delete(v39);
        }
        a1 = v34;
        LODWORD(v12) = v35;
        LODWORD(v14) = v36;
        if (v32)
        {
          LODWORD(v12) = 3;
          LOWORD(a2) = 1;
        }
        else
        {
LABEL_12:
          uint64_t v16 = (v14 - 2);
          if ((int)v14 - 2 < 0) {
            return (unsigned __int16)a2 | (v12 << 16);
          }
          uint64_t v17 = &(*a1)[2 * v16 + 1];
          uint64_t v18 = v16 + 1;
          do
          {
            unsigned int v19 = *(unsigned __int8 *)v17;
            BOOL v20 = v19 > 9;
            int v21 = (1 << v19) & 0x21E;
            if (v20 || v21 == 0)
            {
              LOWORD(a2) = *(v17 - 1);
              return (unsigned __int16)a2 | (v12 << 16);
            }
            v17 -= 2;
            BOOL v20 = v18-- <= 1;
          }
          while (!v20);
        }
        return (unsigned __int16)a2 | (v12 << 16);
      case 5:
      case 6:
      case 7:
      case 8:
        __break(1u);
        goto LABEL_45;
      case 9:
LABEL_45:
        LODWORD(v12) = 9;
        return (unsigned __int16)a2 | (v12 << 16);
      default:
        return (unsigned __int16)a2 | (v12 << 16);
    }
    while (1)
    {
      int v25 = *(unsigned __int8 *)v24;
      if ((v25 - 1) >= 4 && v25 != 9) {
        break;
      }
      ++v23;
      v24 += 2;
      if (v4 == v23) {
        return (unsigned __int16)a2 | (v12 << 16);
      }
    }
    LOWORD(a2) = *(v24 - 1);
  }
  return (unsigned __int16)a2 | (v12 << 16);
}

void sub_1CC72FAB4(unsigned int a1, uint64_t a2, char **a3)
{
  if (*(_DWORD *)(a2 + 8) <= a1) {
    sub_1CC72FCA4(a2, a1 + 1);
  }
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)a2 + 24 * a1;
  if ((char **)v7 != a3)
  {
    unsigned int v8 = *a3;
    int v9 = a3[1];
    uint64_t v10 = v9 - *a3;
    unint64_t v11 = v10 >> 2;
    uint64_t v12 = v6 + 24 * a1;
    uint64_t v15 = *(void *)(v12 + 16);
    unint64_t v14 = (void *)(v12 + 16);
    uint64_t v13 = v15;
    uint64_t v16 = *(char **)v7;
    if (v10 >> 2 <= (unint64_t)((v15 - *(void *)v7) >> 2))
    {
      uint64_t v25 = v6 + 24 * a1;
      int v26 = *(char **)(v25 + 8);
      int v22 = (void *)(v25 + 8);
      BOOL v20 = v26;
      unint64_t v27 = (v26 - v16) >> 2;
      if (v27 >= v11)
      {
        BOOL v32 = *(char **)v7;
        if (v8 != v9)
        {
          unint64_t v33 = *(char **)v7;
          do
          {
            *(_WORD *)unint64_t v33 = *(_WORD *)v8;
            void v33[2] = v8[2];
            v32 += 4;
            v8 += 4;
            v33 += 4;
          }
          while (v8 != v9);
        }
        uint64_t v24 = v32 - v16;
        BOOL v20 = v16;
      }
      else
      {
        int v28 = &v8[4 * v27];
        if (v20 != v16)
        {
          do
          {
            *(_WORD *)uint64_t v16 = *(_WORD *)v8;
            void v16[2] = v8[2];
            v8 += 4;
            v16 += 4;
          }
          while (v8 != v28);
        }
        uint64_t v29 = v20;
        if (v28 != v9)
        {
          uint64_t v30 = v20;
          do
          {
            int v31 = *(_DWORD *)v28;
            v28 += 4;
            *(_DWORD *)uint64_t v30 = v31;
            v30 += 4;
            v29 += 4;
          }
          while (v28 != v9);
        }
        uint64_t v24 = v29 - v20;
      }
    }
    else
    {
      if (v16)
      {
        *(void *)(v6 + 24 * a1 + 8) = v16;
        operator delete(v16);
        uint64_t v13 = 0;
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = 0;
      }
      if (v10 < 0) {
        goto LABEL_30;
      }
      uint64_t v17 = v13 >> 1;
      if (v13 >> 1 <= v11) {
        uint64_t v17 = v10 >> 2;
      }
      unint64_t v18 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v17;
      if (v18 >> 62) {
LABEL_30:
      }
        abort();
      unsigned int v19 = (char *)operator new(4 * v18);
      BOOL v20 = v19;
      *(void *)uint64_t v7 = v19;
      uint64_t v21 = v6 + 24 * a1;
      *(void *)(v21 + 8) = v19;
      int v22 = (void *)(v21 + 8);
      *unint64_t v14 = &v19[4 * v18];
      unint64_t v23 = v19;
      if (v8 != v9)
      {
        memcpy(v19, v8, v10 & 0xFFFFFFFFFFFFFFFCLL);
        unint64_t v23 = &v20[v10 & 0xFFFFFFFFFFFFFFFCLL];
      }
      uint64_t v24 = v23 - v20;
    }
    *int v22 = &v20[v24];
  }
}

void sub_1CC72FCA4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    int v3 = a2;
    if (v2 > a2)
    {
      uint64_t v5 = 3 * v2;
      uint64_t v6 = *(void *)a1 + 8 * v5 - 24;
      uint64_t v7 = 24 * a2 - 8 * v5;
      do
      {
        unsigned int v8 = *(void **)v6;
        if (*(void *)v6)
        {
          *(void *)(v6 + 8) = v8;
          operator delete(v8);
        }
        v6 -= 24;
        v7 += 24;
      }
      while (v7);
    }
    else
    {
      if (*(unsigned int *)(a1 + 12) < a2) {
        sub_1CD62AA0C();
      }
      if (a2 != v2) {
        bzero((void *)(*(void *)a1 + 24 * v2), 24 * ((24 * (a2 - v2) - 24) / 0x18) + 24);
      }
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
}

unsigned int *sub_1CC72FD74(unsigned int *result, unint64_t a2)
{
  unint64_t v2 = result[2];
  if (v2 != a2)
  {
    unsigned int v3 = a2;
    unint64_t v4 = result;
    if (v2 <= a2)
    {
      if (result[3] < a2) {
        sub_1CD62AB18();
      }
      if (v2 != a2)
      {
        uint64_t v8 = 32 * a2 - 32 * v2;
        int v9 = (void *)(*(void *)result + 32 * v2 + 24);
        do
        {
          void *v9 = 0;
          v9 += 4;
          v8 -= 32;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v5 = 32 * a2 - 32 * v2;
      uint64_t v6 = *(void *)result + 32 * v2 - 32;
      uint64_t v7 = (unsigned int *)v6;
      do
      {
        uint64_t result = (unsigned int *)*((void *)v7 + 3);
        if (v7 == result)
        {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v7 + 32))(v7);
        }
        else if (result)
        {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 40))(result);
        }
        v7 -= 8;
        v6 -= 32;
        v5 += 32;
      }
      while (v5);
    }
    v4[2] = v3;
  }
  return result;
}

void *sub_1CC72FE90(void *result, unsigned char *a2, unsigned char *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 62) {
      abort();
    }
    uint64_t v7 = result;
    uint64_t result = operator new(4 * a4);
    uint64_t v8 = result;
    *uint64_t v7 = result;
    v7[1] = result;
    void v7[2] = (char *)result + 4 * a4;
    if (a2 != a3)
    {
      size_t v9 = (a3 - a2) & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t result = memcpy(result, a2, v9);
      uint64_t v8 = (void *)((char *)v8 + v9);
    }
    v7[1] = v8;
  }
  return result;
}

uint64_t **sub_1CC72FF1C(void *a1, unsigned __int16 a2)
{
  unint64_t v2 = a1[1];
  if (v2)
  {
    uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] <= 1uLL)
    {
      unint64_t v4 = (v2 - 1) & a2;
    }
    else
    {
      unint64_t v4 = a2;
      if (v2 <= a2) {
        unint64_t v4 = a2 % v2;
      }
    }
    uint64_t v5 = *(uint64_t ****)(*a1 + 8 * v4);
    if (v5)
    {
      uint64_t v6 = *v5;
      if (v6)
      {
        while (1)
        {
          unint64_t v7 = (unint64_t)v6[1];
          if (v7 == a2)
          {
            if (*((unsigned __int16 *)v6 + 8) == a2) {
              return v6;
            }
          }
          else
          {
            if (v3.u32[0] <= 1uLL)
            {
              v7 &= v2 - 1;
            }
            else if (v7 >= v2)
            {
              v7 %= v2;
            }
            if (v7 != v4) {
              return 0;
            }
          }
          uint64_t result = 0;
          uint64_t v6 = (uint64_t **)*v6;
          if (!v6) {
            return result;
          }
        }
      }
    }
  }
  return 0;
}

void *sub_1CC72FFE0(uint64_t a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    size_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x40uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  void v10[3] = v10 + 5;
  v10[4] = 0x100000000;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t prime = v16;
    }
    else {
      size_t prime = v15;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_40;
    }
    if (prime < v7)
    {
      unint64_t v18 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v19 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v19.i16[0] = vaddlv_u8(v19), v19.u32[0] > 1uLL))
      {
        unint64_t v18 = std::__next_prime(v18);
      }
      else
      {
        uint64_t v20 = 1 << -(char)__clz(v18 - 1);
        if (v18 >= 2) {
          unint64_t v18 = v20;
        }
      }
      if (prime <= v18) {
        size_t prime = v18;
      }
      if (prime < v7) {
LABEL_40:
      }
        sub_1CC730294(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v21 = *(void *)a1;
  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *uint64_t v10 = *v22;
LABEL_54:
    *int v22 = v10;
    goto LABEL_55;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v23 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v23 >= v7) {
        v23 %= v7;
      }
    }
    else
    {
      v23 &= v7 - 1;
    }
    int v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_54;
  }
LABEL_55:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1CC730294(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1CB833614();
    }
    unint64_t v4 = operator new(8 * a2);
    uint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    unint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] <= 1uLL)
      {
        v8 &= a2 - 1;
      }
      else if (v8 >= a2)
      {
        v8 %= a2;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      uint64_t v10 = (void *)*v7;
      if (*v7)
      {
        while (1)
        {
          unint64_t v11 = v10[1];
          if (v9.u32[0] <= 1uLL)
          {
            v11 &= a2 - 1;
          }
          else if (v11 >= a2)
          {
            v11 %= a2;
          }
          if (v11 == v8) {
            goto LABEL_22;
          }
          if (*(void *)(*(void *)a1 + 8 * v11)) {
            break;
          }
          *(void *)(*(void *)a1 + 8 * v11) = v7;
LABEL_18:
          unint64_t v7 = v10;
          uint64_t v10 = (void *)*v10;
          unint64_t v8 = v11;
          if (!v10) {
            return;
          }
        }
        *unint64_t v7 = *v10;
        *uint64_t v10 = **(void **)(*(void *)a1 + 8 * v11);
        **(void **)(*(void *)a1 + 8 * v11) = v10;
        uint64_t v10 = v7;
LABEL_22:
        unint64_t v11 = v8;
        goto LABEL_18;
      }
    }
  }
  else
  {
    float v12 = *(void **)a1;
    *(void *)a1 = 0;
    if (v12) {
      operator delete(v12);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *sub_1CC7303F0(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = result;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
  uint64_t v7 = *((unsigned int *)result + 2);
  if (v6 + v7 > *((unsigned int *)result + 3)) {
    sub_1CD62AA0C();
  }
  if (a2 != a3)
  {
    unint64_t v8 = (void *)(*result + 24 * v7);
    do
    {
      *unint64_t v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      uint8x8_t v9 = *(unsigned char **)v4;
      uint64_t v10 = *(unsigned char **)(v4 + 8);
      v4 += 24;
      uint64_t result = sub_1CC72FE90(v8, v9, v10, (v10 - v9) >> 2);
      v8 += 3;
    }
    while (v4 != a3);
    LODWORD(v7) = *((_DWORD *)v5 + 2);
  }
  *((_DWORD *)v5 + 2) = v7 + v6;
  return result;
}

void *sub_1CC7304A4(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 62) {
      abort();
    }
    uint64_t v6 = 4 * a3;
    uint64_t v7 = (char *)operator new(4 * a3);
    uint64_t v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[4 * a3];
    do
    {
      *(_DWORD *)&v7[v8] = *(_DWORD *)(a2 + v8);
      v8 += 4;
    }
    while (v6 != v8);
    a1[1] = &v7[v8];
  }
  return a1;
}

uint64_t sub_1CC730528(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F261CAC0;
  a2[1] = v2;
  return result;
}

void *sub_1CC730550(uint64_t **a1, unsigned __int16 a2, _WORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = (unsigned __int16 *)a1[1];
  if (v5)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v5;
        unsigned int v8 = v5[16];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = (unsigned __int16 *)*v7;
        uint64_t v6 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        return v7;
      }
      uint64_t v5 = (unsigned __int16 *)v7[1];
    }
    while (v5);
    uint64_t v6 = (uint64_t **)(v7 + 1);
  }
  else
  {
    uint64_t v7 = a1 + 1;
  }
LABEL_9:
  uint8x8_t v9 = v7;
  uint64_t v7 = operator new(0x40uLL);
  *((_WORD *)v7 + 16) = *a3;
  *uint64_t v7 = 0;
  v7[1] = 0;
  v7[6] = 0;
  v7[7] = 0;
  void v7[5] = 0;
  void v7[2] = v9;
  _WORD *v6 = v7;
  uint64_t v10 = (uint64_t *)**a1;
  unint64_t v11 = v7;
  if (v10)
  {
    *a1 = v10;
    unint64_t v11 = *v6;
  }
  sub_1CB8358B8(a1[1], v11);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v7;
}

_DWORD *sub_1CC73062C(void **a1, int a2)
{
  unint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  uint64_t v4 = (v2 - (unsigned char *)*a1) >> 2;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 62) {
    abort();
  }
  uint64_t v8 = (unsigned char *)a1[2] - v3;
  if (v8 >> 1 > v5) {
    unint64_t v5 = v8 >> 1;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 62) {
      sub_1CB833614();
    }
    uint64_t v10 = (char *)operator new(4 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[4 * v4];
  *(_DWORD *)unint64_t v11 = a2;
  float v12 = v11 + 4;
  if (v2 != v3)
  {
    do
    {
      int v13 = *((_DWORD *)v2 - 1);
      v2 -= 4;
      *((_DWORD *)v11 - 1) = v13;
      v11 -= 4;
    }
    while (v2 != v3);
    uint64_t v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[4 * v9];
  if (v2) {
    operator delete(v2);
  }
  return v12;
}

unsigned __int16 *sub_1CC730704(unsigned __int16 *result, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
unsigned __int16 *sub_1CC730AE8(unsigned __int16 *result, unsigned __int16 *a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v2 = result + 2;
  if (result + 2 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  uint64_t v4 = result;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = v2;
    unsigned int v6 = v5[2];
    unsigned int v7 = *v5;
    if (v6 >= v7)
    {
      if (v7 < v6) {
        goto LABEL_20;
      }
      unsigned int v8 = *((unsigned __int8 *)v5 + 2);
      if (*((unsigned __int8 *)v5 + 6) >= v8) {
        goto LABEL_20;
      }
    }
    else
    {
      LOBYTE(v8) = *((unsigned char *)v5 + 2);
    }
    unsigned int v9 = *((_DWORD *)v5 + 1);
    unsigned int v10 = (unsigned __int16)v9;
    v5[2] = v7;
    *((unsigned char *)v4 + 2) = v8;
    unsigned int v11 = HIWORD(v9);
    float v12 = result;
    if (v5 == result) {
      goto LABEL_19;
    }
    uint64_t v13 = v3;
    while (1)
    {
      unsigned int v14 = *(unsigned __int16 *)((char *)result + v13 - 4);
      if (v14 <= v10) {
        break;
      }
      LOBYTE(v15) = *((unsigned char *)result + v13 - 2);
LABEL_13:
      v5 -= 2;
      unint64_t v16 = (char *)result + v13;
      *(_WORD *)unint64_t v16 = v14;
      void v16[2] = v15;
      v13 -= 4;
      if (!v13)
      {
        float v12 = result;
        goto LABEL_19;
      }
    }
    if (v14 < v10)
    {
      float v12 = (unsigned __int16 *)((char *)result + v13);
      goto LABEL_19;
    }
    unsigned int v15 = *((unsigned __int8 *)result + v13 - 2);
    if (v15 > v11) {
      goto LABEL_13;
    }
    float v12 = v5;
LABEL_19:
    *float v12 = v10;
    *((unsigned char *)v12 + 2) = v11;
LABEL_20:
    uint64_t v2 = v4 + 2;
    v3 += 4;
  }
  while (v4 + 2 != a2);
  return result;
}

_DWORD *sub_1CC730BD4(_DWORD *result, _DWORD *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v3 = (char *)result + 2;
      do
      {
        uint64_t v4 = (unsigned __int16 *)result;
        uint64_t result = v2;
        unsigned int v5 = v4[2];
        unsigned int v6 = *v4;
        if (v5 < v6 || v6 >= v5 && *((unsigned __int8 *)v4 + 6) < *((unsigned __int8 *)v4 + 2))
        {
          int v7 = *result;
          unsigned int v8 = (unsigned __int16)*result;
          for (unint64_t i = v3; ; i -= 4)
          {
            *((_WORD *)i + 1) = v6;
            i[4] = *i;
            unsigned int v6 = *((unsigned __int16 *)i - 3);
            if (v6 <= v8 && (v6 < v8 || *(i - 4) <= BYTE2(v7))) {
              break;
            }
          }
          *((_WORD *)i - 1) = v8;
          *unint64_t i = BYTE2(v7);
        }
        uint64_t v2 = result + 1;
        v3 += 4;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

unsigned __int16 *sub_1CC730C7C(unsigned __int16 *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *result;
  if (v3 >= v4 && (v4 < v3 || *((unsigned __int8 *)a2 + 2) >= *((unsigned __int8 *)result + 2)))
  {
    unsigned int v8 = *a3;
    if (v8 >= v3)
    {
      if (v3 < v8) {
        return result;
      }
      unsigned int v10 = *((unsigned __int8 *)a3 + 2);
      unsigned int v9 = *((unsigned __int8 *)a2 + 2);
      if (v10 >= v9) {
        return result;
      }
    }
    else
    {
      LOBYTE(v9) = *((unsigned char *)a2 + 2);
      LOBYTE(v10) = *((unsigned char *)a3 + 2);
    }
    *a2 = v8;
    *a3 = v3;
    *((unsigned char *)a2 + 2) = v10;
    *((unsigned char *)a3 + 2) = v9;
    unsigned int v11 = *a2;
    unsigned int v12 = *result;
    if (v11 >= v12)
    {
      if (v12 < v11) {
        return result;
      }
      unsigned int v14 = *((unsigned __int8 *)a2 + 2);
      unsigned int v13 = *((unsigned __int8 *)result + 2);
      if (v14 >= v13) {
        return result;
      }
    }
    else
    {
      LOBYTE(v13) = *((unsigned char *)result + 2);
      LOBYTE(v14) = *((unsigned char *)a2 + 2);
    }
    *uint64_t result = v11;
    *a2 = v12;
    *((unsigned char *)result + 2) = v14;
    *((unsigned char *)a2 + 2) = v13;
    return result;
  }
  unsigned int v5 = *a3;
  if (v5 < v3)
  {
    LOBYTE(v6) = *((unsigned char *)a3 + 2);
LABEL_6:
    *uint64_t result = v5;
    *a3 = v4;
    char v7 = *((unsigned char *)result + 2);
    *((unsigned char *)result + 2) = v6;
    *((unsigned char *)a3 + 2) = v7;
    return result;
  }
  if (v3 >= v5)
  {
    unsigned int v6 = *((unsigned __int8 *)a3 + 2);
    unsigned int v15 = *((unsigned __int8 *)a2 + 2);
    if (v6 < v15) {
      goto LABEL_6;
    }
  }
  else
  {
    LOBYTE(v15) = *((unsigned char *)a2 + 2);
  }
  *uint64_t result = v3;
  *a2 = v4;
  unsigned int v16 = *((unsigned __int8 *)result + 2);
  *((unsigned char *)result + 2) = v15;
  *((unsigned char *)a2 + 2) = v16;
  unsigned int v17 = *a3;
  if (v17 < v4)
  {
    LOBYTE(v18) = *((unsigned char *)a3 + 2);
LABEL_24:
    *a2 = v17;
    *a3 = v4;
    *((unsigned char *)a2 + 2) = v18;
    *((unsigned char *)a3 + 2) = v16;
    return result;
  }
  if (v4 >= v17)
  {
    unsigned int v18 = *((unsigned __int8 *)a3 + 2);
    if (v18 < v16) {
      goto LABEL_24;
    }
  }
  return result;
}

unsigned __int16 *sub_1CC730DC4(unsigned __int16 *a1, unint64_t a2)
{
  unsigned int v2 = (unsigned __int16)*(_DWORD *)a1;
  unsigned int v3 = BYTE2(*(_DWORD *)a1);
  unsigned int v4 = *(unsigned __int16 *)(a2 - 4);
  if (v4 <= v2 && (v4 < v2 || *(unsigned __int8 *)(a2 - 2) <= v3))
  {
    for (unint64_t i = a1 + 2; (unint64_t)i < a2; i += 2)
    {
      unsigned int v17 = *i;
      if (v17 > v2 || v17 >= v2 && *((unsigned __int8 *)i + 2) > v3) {
        break;
      }
    }
  }
  else
  {
    unint64_t i = a1;
    do
    {
      unsigned int v7 = i[2];
      i += 2;
      unsigned int v6 = v7;
    }
    while (v7 <= v2 && (v6 < v2 || *((unsigned __int8 *)i + 2) <= v3));
  }
  if ((unint64_t)i < a2)
  {
    for (a2 -= 4; v4 > v2 || v4 >= v2 && *(unsigned __int8 *)(a2 + 2) > v3; a2 -= 4)
    {
      unsigned int v8 = *(unsigned __int16 *)(a2 - 4);
      unsigned int v4 = v8;
    }
  }
  if ((unint64_t)i < a2)
  {
    LOWORD(v9) = *i;
    unsigned __int16 v10 = *(_WORD *)a2;
    do
    {
      *unint64_t i = v10;
      *(_WORD *)a2 = v9;
      unsigned int v11 = i[2];
      i += 2;
      unsigned int v9 = v11;
      char v12 = *((unsigned char *)i - 2);
      *((unsigned char *)i - 2) = *(unsigned char *)(a2 + 2);
      *(unsigned char *)(a2 + 2) = v12;
      while (v9 <= v2 && (v9 < v2 || *((unsigned __int8 *)i + 2) <= v3))
      {
        unsigned int v13 = i[2];
        i += 2;
        unsigned int v9 = v13;
      }
      do
      {
        do
        {
          unsigned int v14 = *(unsigned __int16 *)(a2 - 4);
          a2 -= 4;
          unsigned __int16 v10 = v14;
          BOOL v15 = v14 >= v2;
        }
        while (v14 > v2);
      }
      while (v15 && *(unsigned __int8 *)(a2 + 2) > v3);
    }
    while ((unint64_t)i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    *((unsigned char *)a1 + 2) = *((unsigned char *)i - 2);
  }
  *(i - 2) = v2;
  *((unsigned char *)i - 2) = v3;
  return i;
}

unint64_t sub_1CC730F10(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  unsigned int v3 = (unsigned __int16)*(_DWORD *)a1;
  unsigned int v4 = BYTE2(*(_DWORD *)a1);
  while (1)
  {
    unsigned int v5 = *(unsigned __int16 *)(a1 + v2 + 4);
    if (v5 >= v3 && (v5 > v3 || *(unsigned __int8 *)(a1 + v2 + 6) >= v4)) {
      break;
    }
    v2 += 4;
  }
  unint64_t v6 = a1 + v2 + 4;
  if (v2)
  {
    do
    {
      unsigned int v8 = *(unsigned __int16 *)(a2 - 4);
      a2 -= 4;
      unsigned int v7 = v8;
    }
    while (v8 >= v3 && (v7 > v3 || *(unsigned __int8 *)(a2 + 2) >= v4));
  }
  else
  {
LABEL_16:
    if (v6 < a2)
    {
      do
      {
        unsigned int v10 = *(unsigned __int16 *)(a2 - 4);
        a2 -= 4;
        unsigned int v9 = v10;
        if (v10 < v3) {
          break;
        }
        if (v9 > v3) {
          goto LABEL_16;
        }
      }
      while (v6 < a2 && *(unsigned __int8 *)(a2 + 2) >= v4);
    }
  }
  if (v6 >= a2)
  {
    unint64_t v12 = v6;
  }
  else
  {
    LOWORD(v11) = *(_WORD *)a2;
    unint64_t v12 = v6;
    unint64_t v13 = a2;
    do
    {
      *(_WORD *)unint64_t v12 = v11;
      *(_WORD *)unint64_t v13 = v5;
      char v14 = *(unsigned char *)(v12 + 2);
      *(unsigned char *)(v12 + 2) = *(unsigned char *)(v13 + 2);
      *(unsigned char *)(v13 + 2) = v14;
      do
      {
        do
        {
          unsigned int v15 = *(unsigned __int16 *)(v12 + 4);
          v12 += 4;
          LOWORD(v5) = v15;
          BOOL v16 = v15 > v3;
        }
        while (v15 < v3);
      }
      while (!v16 && *(unsigned __int8 *)(v12 + 2) < v4);
      do
      {
        unsigned int v17 = *(unsigned __int16 *)(v13 - 4);
        v13 -= 4;
        unsigned int v11 = v17;
      }
      while (v17 >= v3 && (v11 > v3 || *(unsigned __int8 *)(v13 + 2) >= v4));
    }
    while (v12 < v13);
  }
  if (v12 - 4 != a1)
  {
    *(_WORD *)a1 = *(_WORD *)(v12 - 4);
    *(unsigned char *)(a1 + 2) = *(unsigned char *)(v12 - 2);
  }
  *(_WORD *)(v12 - 4) = v3;
  *(unsigned char *)(v12 - 2) = v4;
  return v12 - 4;
}

BOOL sub_1CC73105C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 2;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(a2 - 2);
      unsigned int v7 = *a1;
      if (v6 < v7)
      {
        LOBYTE(v8) = *((unsigned char *)a1 + 2);
        LOBYTE(v9) = *((unsigned char *)a2 - 2);
LABEL_30:
        *a1 = v6;
        *(a2 - 2) = v7;
        *((unsigned char *)a1 + 2) = v9;
        *((unsigned char *)a2 - 2) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        unsigned int v9 = *((unsigned __int8 *)a2 - 2);
        unsigned int v8 = *((unsigned __int8 *)a1 + 2);
        if (v9 < v8) {
          goto LABEL_30;
        }
      }
      return result;
    case 3:
      sub_1CC730C7C(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1CC731280(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1CC731384(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      unsigned int v10 = a1 + 4;
      sub_1CC730C7C(a1, a1 + 2, a1 + 4);
      unsigned int v11 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
LABEL_6:
  unsigned int v14 = *v11;
  unsigned int v15 = *v10;
  if (v14 >= v15)
  {
    if (v15 < v14) {
      goto LABEL_21;
    }
    unsigned int v16 = *((unsigned __int8 *)v10 + 2);
    if (*((unsigned __int8 *)v11 + 2) >= v16) {
      goto LABEL_21;
    }
  }
  else
  {
    LOBYTE(v16) = *((unsigned char *)v10 + 2);
  }
  unsigned int v17 = *(_DWORD *)v11;
  unsigned int v18 = (unsigned __int16)*(_DWORD *)v11;
  *unsigned int v11 = v15;
  *((unsigned char *)v11 + 2) = v16;
  unsigned int v19 = HIWORD(v17);
  uint64_t v20 = (uint64_t)a1;
  if (v10 == a1) {
    goto LABEL_20;
  }
  uint64_t v21 = v12;
  while (1)
  {
    char v22 = (char *)a1 + v21;
    unsigned int v23 = *(unsigned __int16 *)((char *)a1 + v21 + 4);
    if (v23 <= v18)
    {
      if (v23 < v18)
      {
        uint64_t v20 = (uint64_t)a1 + v21 + 8;
        goto LABEL_20;
      }
      unsigned int v24 = *((unsigned __int8 *)a1 + v21 + 6);
      if (v24 <= v19)
      {
        uint64_t v20 = (uint64_t)v10;
LABEL_20:
        *(_WORD *)uint64_t v20 = v18;
        *(unsigned char *)(v20 + 2) = v19;
        if (++v13 == 8) {
          return v11 + 2 == a2;
        }
LABEL_21:
        unsigned int v10 = v11;
        v12 += 4;
        v11 += 2;
        if (v11 == a2) {
          return 1;
        }
        goto LABEL_6;
      }
    }
    else
    {
      LOBYTE(v24) = v22[6];
    }
    v10 -= 2;
    *((_WORD *)v22 + 4) = v23;
    *((unsigned char *)a1 + v21 + 10) = v24;
    v21 -= 4;
    if (v21 == -8)
    {
      uint64_t v20 = (uint64_t)a1;
      goto LABEL_20;
    }
  }
}

unsigned __int16 *sub_1CC731280(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  BOOL result = sub_1CC730C7C(a1, a2, a3);
  unsigned int v9 = *a4;
  unsigned int v10 = *a3;
  if (v9 >= v10)
  {
    if (v10 < v9) {
      return result;
    }
    unsigned int v12 = *((unsigned __int8 *)a4 + 2);
    unsigned int v11 = *((unsigned __int8 *)a3 + 2);
    if (v12 >= v11) {
      return result;
    }
  }
  else
  {
    LOBYTE(v11) = *((unsigned char *)a3 + 2);
    LOBYTE(v12) = *((unsigned char *)a4 + 2);
  }
  *a3 = v9;
  *a4 = v10;
  *((unsigned char *)a3 + 2) = v12;
  *((unsigned char *)a4 + 2) = v11;
  unsigned int v13 = *a3;
  unsigned int v14 = *a2;
  if (v13 >= v14)
  {
    if (v14 < v13) {
      return result;
    }
    unsigned int v16 = *((unsigned __int8 *)a3 + 2);
    unsigned int v15 = *((unsigned __int8 *)a2 + 2);
    if (v16 >= v15) {
      return result;
    }
  }
  else
  {
    LOBYTE(v15) = *((unsigned char *)a2 + 2);
    LOBYTE(v16) = *((unsigned char *)a3 + 2);
  }
  *a2 = v13;
  *a3 = v14;
  *((unsigned char *)a2 + 2) = v16;
  *((unsigned char *)a3 + 2) = v15;
  unsigned int v17 = *a2;
  unsigned int v18 = *a1;
  if (v17 < v18)
  {
    LOBYTE(v19) = *((unsigned char *)a1 + 2);
    LOBYTE(v20) = *((unsigned char *)a2 + 2);
LABEL_15:
    *a1 = v17;
    *a2 = v18;
    *((unsigned char *)a1 + 2) = v20;
    *((unsigned char *)a2 + 2) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    unsigned int v20 = *((unsigned __int8 *)a2 + 2);
    unsigned int v19 = *((unsigned __int8 *)a1 + 2);
    if (v20 < v19) {
      goto LABEL_15;
    }
  }
  return result;
}

unsigned __int16 *sub_1CC731384(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  BOOL result = sub_1CC731280(a1, a2, a3, a4);
  unsigned int v11 = *a5;
  unsigned int v12 = *a4;
  if (v11 >= v12)
  {
    if (v12 < v11) {
      return result;
    }
    unsigned int v14 = *((unsigned __int8 *)a5 + 2);
    unsigned int v13 = *((unsigned __int8 *)a4 + 2);
    if (v14 >= v13) {
      return result;
    }
  }
  else
  {
    LOBYTE(v13) = *((unsigned char *)a4 + 2);
    LOBYTE(v14) = *((unsigned char *)a5 + 2);
  }
  *a4 = v11;
  *a5 = v12;
  *((unsigned char *)a4 + 2) = v14;
  *((unsigned char *)a5 + 2) = v13;
  unsigned int v15 = *a4;
  unsigned int v16 = *a3;
  if (v15 >= v16)
  {
    if (v16 < v15) {
      return result;
    }
    unsigned int v18 = *((unsigned __int8 *)a4 + 2);
    unsigned int v17 = *((unsigned __int8 *)a3 + 2);
    if (v18 >= v17) {
      return result;
    }
  }
  else
  {
    LOBYTE(v17) = *((unsigned char *)a3 + 2);
    LOBYTE(v18) = *((unsigned char *)a4 + 2);
  }
  *a3 = v15;
  *a4 = v16;
  *((unsigned char *)a3 + 2) = v18;
  *((unsigned char *)a4 + 2) = v17;
  unsigned int v19 = *a3;
  unsigned int v20 = *a2;
  if (v19 >= v20)
  {
    if (v20 < v19) {
      return result;
    }
    unsigned int v22 = *((unsigned __int8 *)a3 + 2);
    unsigned int v21 = *((unsigned __int8 *)a2 + 2);
    if (v22 >= v21) {
      return result;
    }
  }
  else
  {
    LOBYTE(v21) = *((unsigned char *)a2 + 2);
    LOBYTE(v22) = *((unsigned char *)a3 + 2);
  }
  *a2 = v19;
  *a3 = v20;
  *((unsigned char *)a2 + 2) = v22;
  *((unsigned char *)a3 + 2) = v21;
  unsigned int v23 = *a2;
  unsigned int v24 = *a1;
  if (v23 < v24)
  {
    LOBYTE(v25) = *((unsigned char *)a1 + 2);
    LOBYTE(v26) = *((unsigned char *)a2 + 2);
LABEL_9:
    *a1 = v23;
    *a2 = v24;
    *((unsigned char *)a1 + 2) = v26;
    *((unsigned char *)a2 + 2) = v25;
    return result;
  }
  if (v24 >= v23)
  {
    unsigned int v26 = *((unsigned __int8 *)a2 + 2);
    unsigned int v25 = *((unsigned __int8 *)a1 + 2);
    if (v26 < v25) {
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t sub_1CC7314D8(uint64_t result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if ((unsigned __int16 *)result != a2)
  {
    uint64_t v4 = a2;
    unsigned int v5 = (unsigned __int16 *)result;
    uint64_t v6 = (uint64_t)a2 - result;
    uint64_t v7 = ((uint64_t)a2 - result) >> 2;
    if ((uint64_t)a2 - result >= 5)
    {
      unint64_t v8 = (unint64_t)(v7 - 2) >> 1;
      unint64_t v9 = v8 + 1;
      unsigned int v10 = (unsigned __int16 *)(result + 4 * v8);
      do
      {
        BOOL result = sub_1CC731778((uint64_t)v5, v7, v10);
        v10 -= 2;
        --v9;
      }
      while (v9);
    }
    if (v4 != a3)
    {
      for (unint64_t i = v4; i != a3; i += 2)
      {
        unsigned int v12 = *i;
        unsigned int v13 = *v5;
        if (v12 >= v13)
        {
          if (v13 < v12) {
            continue;
          }
          unsigned int v14 = *((unsigned __int8 *)i + 2);
          unsigned int v15 = *((unsigned __int8 *)v5 + 2);
          if (v14 >= v15) {
            continue;
          }
        }
        else
        {
          LOBYTE(v14) = *((unsigned char *)i + 2);
          LOBYTE(v15) = *((unsigned char *)v5 + 2);
        }
        *unint64_t i = v13;
        unsigned __int16 *v5 = v12;
        *((unsigned char *)i + 2) = v15;
        *((unsigned char *)v5 + 2) = v14;
        BOOL result = sub_1CC731778((uint64_t)v5, v7, v5);
      }
    }
    if (v6 >= 5)
    {
      do
      {
        uint64_t v16 = 0;
        int v17 = *(_DWORD *)v5;
        uint64_t v18 = v7 - 2;
        if (v7 < 2) {
          uint64_t v18 = v7 - 1;
        }
        uint64_t v19 = v18 >> 1;
        unsigned int v20 = v5;
        do
        {
          unsigned int v21 = v20;
          uint64_t v22 = v16 + 1;
          v20 += 2 * v16 + 2;
          uint64_t v23 = 2 * v16;
          uint64_t v16 = (2 * v16) | 1;
          uint64_t v24 = v23 + 2;
          if (v24 < v7)
          {
            unsigned int v25 = v20[2];
            BOOL result = *v20;
            if (result < v25
              || v25 >= result && LOBYTE(v21[2 * v22 + 1]) < *((unsigned __int8 *)v20 + 6))
            {
              v20 += 2;
              uint64_t v16 = v24;
            }
          }
          *unsigned int v21 = *v20;
          *((unsigned char *)v21 + 2) = *((unsigned char *)v20 + 2);
        }
        while (v16 <= v19);
        if (v20 == v4 - 2)
        {
          unsigned __int16 *v20 = v17;
          *((unsigned char *)v20 + 2) = BYTE2(v17);
        }
        else
        {
          unsigned __int16 *v20 = *(v4 - 2);
          *((unsigned char *)v20 + 2) = *((unsigned char *)v4 - 2);
          *(v4 - 2) = v17;
          *((unsigned char *)v4 - 2) = BYTE2(v17);
          uint64_t v26 = (char *)v20 - (char *)v5 + 4;
          if (v26 >= 5)
          {
            unint64_t v27 = ((unint64_t)v26 >> 2) - 2;
            unint64_t v28 = v27 >> 1;
            uint64_t v29 = &v5[2 * (v27 >> 1)];
            unsigned int v30 = *v29;
            unsigned int v31 = *v20;
            if (v30 < v31)
            {
              LOBYTE(v32) = *((unsigned char *)v29 + 2);
LABEL_30:
              unsigned int v33 = *(_DWORD *)v20;
              unsigned int v34 = (unsigned __int16)*(_DWORD *)v20;
              unsigned __int16 *v20 = v30;
              *((unsigned char *)v20 + 2) = v32;
              unsigned int v35 = HIWORD(v33);
              if (v27 >= 2)
              {
                while (1)
                {
                  unint64_t v37 = v28 - 1;
                  unint64_t v28 = (v28 - 1) >> 1;
                  int v36 = &v5[2 * v28];
                  unsigned int v38 = *v36;
                  if (v38 >= v34)
                  {
                    if (v38 > v34) {
                      break;
                    }
                    unsigned int v39 = LOBYTE(v5[2 * v28 + 1]);
                    if (v39 >= v35) {
                      break;
                    }
                  }
                  else
                  {
                    LOBYTE(v39) = *((unsigned char *)v36 + 2);
                  }
                  unsigned __int16 *v29 = v38;
                  *((unsigned char *)v29 + 2) = v39;
                  uint64_t v29 = &v5[2 * v28];
                  if (v37 <= 1) {
                    goto LABEL_37;
                  }
                }
              }
              int v36 = v29;
LABEL_37:
              unsigned __int16 *v36 = v34;
              *((unsigned char *)v36 + 2) = v35;
              goto LABEL_38;
            }
            if (v31 >= v30)
            {
              unsigned int v32 = LOBYTE(v5[2 * v28 + 1]);
              if (v32 < *((unsigned __int8 *)v20 + 2)) {
                goto LABEL_30;
              }
            }
          }
        }
LABEL_38:
        v4 -= 2;
      }
      while (v7-- > 2);
    }
  }
  return result;
}

uint64_t sub_1CC731778(uint64_t result, uint64_t a2, unsigned __int16 *a3)
{
  if (a2 >= 2)
  {
    uint64_t v3 = (uint64_t)a3 - result;
    int64_t v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 2)
    {
      uint64_t v5 = v3 >> 1;
      uint64_t v6 = (v3 >> 1) + 1;
      uint64_t v7 = (unsigned __int16 *)(result + 4 * v6);
      uint64_t v8 = v5 + 2;
      if (v8 < a2)
      {
        unsigned int v9 = v7[2];
        unsigned int v10 = *v7;
        if (v10 < v9
          || v9 >= v10 && *(unsigned __int8 *)(result + 4 * v6 + 2) < *((unsigned __int8 *)v7 + 6))
        {
          v7 += 2;
          uint64_t v6 = v8;
        }
      }
      unsigned int v11 = *v7;
      unsigned int v12 = *a3;
      if (v11 >= v12)
      {
        unsigned int v13 = *((unsigned __int8 *)v7 + 2);
        if (v12 < v11 || v13 >= *((unsigned __int8 *)a3 + 2))
        {
          unsigned int v14 = (unsigned __int16)*(_DWORD *)a3;
          unsigned int v15 = BYTE2(*(_DWORD *)a3);
          *a3 = v11;
          *((unsigned char *)a3 + 2) = v13;
          if (v4 >= v6)
          {
            while (1)
            {
              uint64_t v17 = 2 * v6;
              uint64_t v6 = (2 * v6) | 1;
              uint64_t v16 = (unsigned __int16 *)(result + 4 * v6);
              uint64_t v18 = v17 + 2;
              if (v18 < a2)
              {
                unsigned int v19 = v16[2];
                unsigned int v20 = *v16;
                if (v20 < v19
                  || v19 >= v20
                  && *(unsigned __int8 *)(result + 4 * v6 + 2) < *((unsigned __int8 *)v16 + 6))
                {
                  v16 += 2;
                  uint64_t v6 = v18;
                }
              }
              unsigned int v21 = *v16;
              if (v21 < v14) {
                break;
              }
              unsigned int v22 = *((unsigned __int8 *)v16 + 2);
              if (v21 <= v14 && v22 < v15) {
                break;
              }
              *uint64_t v7 = v21;
              *((unsigned char *)v7 + 2) = v22;
              uint64_t v7 = v16;
              if (v4 < v6) {
                goto LABEL_13;
              }
            }
          }
          uint64_t v16 = v7;
LABEL_13:
          unsigned __int16 *v16 = v14;
          *((unsigned char *)v16 + 2) = v15;
        }
      }
    }
  }
  return result;
}

_DWORD *sub_1CC7318BC(void **a1, _DWORD *a2)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  uint64_t v4 = (v2 - (unsigned char *)*a1) >> 2;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 62) {
    abort();
  }
  uint64_t v8 = (unsigned char *)a1[2] - v3;
  if (v8 >> 1 > v5) {
    unint64_t v5 = v8 >> 1;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 62) {
      sub_1CB833614();
    }
    unsigned int v10 = (char *)operator new(4 * v9);
  }
  else
  {
    unsigned int v10 = 0;
  }
  unsigned int v11 = &v10[4 * v4];
  *(_DWORD *)unsigned int v11 = *a2;
  unsigned int v12 = v11 + 4;
  if (v2 != v3)
  {
    do
    {
      int v13 = *((_DWORD *)v2 - 1);
      v2 -= 4;
      *((_DWORD *)v11 - 1) = v13;
      v11 -= 4;
    }
    while (v2 != v3);
    uint64_t v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[4 * v9];
  if (v2) {
    operator delete(v2);
  }
  return v12;
}

uint64_t **sub_1CC731998(void *a1, unsigned __int16 a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] <= 1uLL)
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  else
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  unint64_t v5 = *(uint64_t ****)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (BOOL result = *v5; result; BOOL result = (uint64_t **)*result)
  {
    unint64_t v7 = (unint64_t)result[1];
    if (v7 == a2)
    {
      if (*((unsigned __int16 *)result + 8) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] <= 1uLL)
      {
        v7 &= v2 - 1;
      }
      else if (v7 >= v2)
      {
        v7 %= v2;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void sub_1CC731A4C()
{
}

uint64_t sub_1CC731AE8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EA61BF58;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F261CB08;
  sub_1CC732FD4(a1 + 248, a2);
  *(void *)(a1 + 320) = &unk_1F261CD58;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 408) = 0;
  *(void *)(a1 + 424) = a1 + 456;
  *(void *)(a1 + 432) = a1 + 456;
  *(void *)(a1 + 440) = 16;
  *(_DWORD *)(a1 + 448) = 0;
  return a1;
}

_OWORD *sub_1CC731BE0(_OWORD *result, uint64_t a2, uint64_t a3)
{
  uint8x8_t v3 = result;
  unsigned int v4 = **(unsigned __int16 **)(a3 + 16) - 90;
  BOOL v5 = v4 > 6;
  int v6 = (1 << v4) & 0x47;
  if (v5 || v6 == 0)
  {
    *BOOL result = 0u;
    result[1] = 0u;
  }
  else
  {
    int v21 = 0;
    unsigned int v9 = *(_DWORD *)(*(void *)(a3 + 32) + 36);
    v19[0] = (unint64_t)&v21;
    v19[1] = (unint64_t)&v20;
    uint64_t v20 = 0;
    unsigned int v22 = v9;
    char v10 = sub_1CD61402C((uint64_t)v19, a2, &v22);
    if ((v10 & 1) == 0)
    {
      int v21 = *(_DWORD *)(*(void *)(a3 + 32) + 36);
      uint64_t v20 = 0;
    }
    uint64_t v11 = *(void *)(a3 + 48);
    if ((v11 & 7) != 0)
    {
      unint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(a3 + 48) = v12;
    }
    v19[0] = *(void *)(v12 + 24);
    BOOL result = (_OWORD *)sub_1CB8F1DC4(v19);
    if (v13 == 1) {
      unint64_t v14 = -1;
    }
    else {
      unint64_t v14 = ((unint64_t)result + 7) >> 3;
    }
    uint64_t v15 = *(void *)(a3 + 48);
    if ((v15 & 7) != 0)
    {
      uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v15 &= 0xFFFFFFFFFFFFFFF8;
      *(void *)(a3 + 48) = v15;
      uint64_t v16 = v15;
    }
    *(unsigned char *)uint8x8_t v3 = (*(unsigned char *)(v16 + 32) & 4) != 0;
    if ((v15 & 3) != 0)
    {
      uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v15 &= 0xFFFFFFFFFFFFFFF8;
      *(void *)(a3 + 48) = v15;
      uint64_t v17 = v15;
    }
    *((unsigned char *)v3 + 1) = (*(_WORD *)(v17 + 36) & 0xF00) != 0;
    *((_DWORD *)v3 + 1) = v21;
    *((void *)v3 + 1) = v20;
    *((void *)v3 + 2) = v14;
    if ((v15 & 7) != 0)
    {
      unint64_t v18 = *(void *)((v15 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      unint64_t v18 = v15 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(a3 + 48) = v18;
    }
    *((void *)v3 + 3) = v18;
  }
  return result;
}

uint64_t sub_1CC731D50(uint64_t a1, uint64_t **a2)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (void *)**a2;
  unsigned int v5 = *((_DWORD *)a2 + 2);
  int v6 = *(_DWORD *)(v4[4] + 4);
  if (v6 < 0 && (uint64_t v7 = *(void *)(a1 + 280), v8 = v6 & 0x7FFFFFFF, v8 < *(_DWORD *)(v7 + 432))) {
    unint64_t v9 = *(void *)(*(void *)(v7 + 424) + 8 * v8);
  }
  else {
    unint64_t v9 = 0;
  }
  unint64_t v96 = v9;
  unint64_t v94 = 0;
  std::string::size_type v95 = (8 * v5 * sub_1CB8F1DC4(&v96)) | 1;
  if (v5 >= 2)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 8 * (v5 - 1);
    do
    {
      MergedLocation = (char *)llvm::DILocation::getMergedLocation(*(llvm::DILocation **)((*a2)[v11 / 8] + 56), *(const llvm::DILocation **)((*a2)[v11 / 8 + 1] + 56), v10);
      unint64_t v104 = MergedLocation;
      if (MergedLocation) {
        llvm::MetadataTracking::track((uint64_t)&v104, (unsigned __int8 *)MergedLocation, 2);
      }
      if (!v94) {
        goto LABEL_10;
      }
      int v14 = *v94;
      if ((v14 - 4) > 0x1E)
      {
        if ((v14 - 3) >= 0xFFFFFFFE) {
          uint64_t v17 = v94;
        }
        else {
          uint64_t v17 = 0;
        }
        if ((v14 - 3) < 0xFFFFFFFE)
        {
          if (v14 == 3) {
            *((void *)v94 + 1) = 0;
          }
          goto LABEL_10;
        }
        unint64_t v16 = (unint64_t)(v17 + 8);
      }
      else
      {
        if ((v94[1] & 0x7F) != 2 && !*((_DWORD *)v94 + 3)) {
          goto LABEL_10;
        }
        uint64_t v15 = *((void *)v94 + 2);
        if ((v15 & 4) == 0) {
          goto LABEL_10;
        }
        unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFF8;
        if (!v16) {
          goto LABEL_10;
        }
      }
      int v107 = &v94;
      sub_1CC5FA668(v16 + 16, &v107);
LABEL_10:
      unint64_t v94 = v104;
      if (v104) {
        llvm::MetadataTracking::retrack((uint64_t)&v104, (unsigned __int8 *)v104, (uint64_t)&v94);
      }
      v11 += 8;
    }
    while (v12 != v11);
  }
  uint64_t v18 = (*a2)[*((unsigned int *)a2 + 2) - 1];
  *(void *)(a1 + 360) = *(void *)(v18 + 24);
  *(void *)(a1 + 368) = v18;
  unsigned int v19 = (char **)(a1 + 352);
  if (&v94 != (char **)(a1 + 352))
  {
    uint64_t v20 = *v19;
    if (!*v19) {
      goto LABEL_30;
    }
    int v66 = *v20;
    if ((v66 - 4) > 0x1E)
    {
      if ((v66 - 3) >= 0xFFFFFFFE) {
        uint64_t v88 = *v19;
      }
      else {
        uint64_t v88 = 0;
      }
      if ((v66 - 3) < 0xFFFFFFFE)
      {
        if (v66 == 3) {
          *((void *)v20 + 1) = 0;
        }
        goto LABEL_30;
      }
      unint64_t v68 = (unint64_t)(v88 + 8);
    }
    else if ((v20[1] & 0x7F) != 2 && !*((_DWORD *)v20 + 3) {
           || (uint64_t v67 = *((void *)v20 + 2), (v67 & 4) == 0)
    }
           || (unint64_t v68 = v67 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_30:
      int v21 = (unsigned __int8 *)v94;
      char *v19 = v94;
      if (v21) {
        llvm::MetadataTracking::track(a1 + 352, v21, 2);
      }
      goto LABEL_32;
    }
    int v107 = (char **)(a1 + 352);
    sub_1CC5FA668(v68 + 16, &v107);
    goto LABEL_30;
  }
LABEL_32:
  unint64_t v104 = (char *)&v106;
  uint64_t v105 = 0x800000000;
  uint64_t v22 = *((unsigned int *)a2 + 2);
  if (v22)
  {
    uint64_t v26 = *a2;
    uint64_t v27 = (uint64_t)&(*a2)[v22];
    do
    {
      sub_1CC73C44C(*(_DWORD *)(*(void *)(*v26 + 32) + 4), *(void *)(a1 + 280), 1, (uint64_t)&v107);
      int v28 = v110;
      if ((_BYTE)v110)
      {
        sub_1CD62BB50((uint64_t)&v104, (const llvm::APInt *)&v107);
      }
      else
      {
        if (v105)
        {
          uint64_t v29 = v104;
          uint64_t v30 = 16 * v105;
          do
          {
            if (*(_DWORD *)&v29[v30 - 8] >= 0x41u)
            {
              uint64_t v31 = *(void *)&v29[v30 - 16];
              if (v31) {
                MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
              }
            }
            v30 -= 16;
          }
          while (v30);
        }
        LODWORD(v105) = 0;
      }
      if ((_BYTE)v110 && v108 >= 0x41 && v107) {
        MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
      }
      if (!v28) {
        break;
      }
      ++v26;
    }
    while (v26 != (uint64_t *)v27);
  }
  uint64_t v23 = *(void *)(a1 + 296);
  uint64_t v24 = v4[6];
  if ((v24 & 7) != 0)
  {
    unint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFF8;
    v4[6] = v24 & 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t MachineMemOperand = llvm::MachineFunction::getMachineMemOperand(v23, v25, 0, v95);
  if (!v105) {
    goto LABEL_57;
  }
  unsigned int v33 = (llvm::MachineMemOperand *)MachineMemOperand;
  v122.__r_.__value_.__r.__words[0] = v95;
  LODWORD(v107) = 120;
  uint64_t v108 = &v122;
  uint64_t v109 = 1;
  uint64_t v110 = 0;
  unint64_t v111 = 0;
  int v34 = sub_1CC72D410(*(void *)(a1 + 312), (uint64_t)&v107);
  if (v34 == 9 || v34 && !*(unsigned char *)(a1 + 416))
  {
LABEL_57:
    uint64_t v35 = 0;
    goto LABEL_58;
  }
  unsigned int v42 = sub_1CB8F1DC4(&v95);
  if (v40 == 1) {
  unsigned int v93 = v42;
  }
  if (v42 > 0x40) {
    operator new[]();
  }
  unint64_t v92 = 0;
  if (v105)
  {
    uint64_t v61 = 0;
    unint64_t v62 = 0;
    do
    {
      unint64_t v63 = v104;
      int v64 = sub_1CB8F1DC4(&v96);
      if (v65 == 1)
      {
        int v90 = v64;
        int v64 = v90;
      }
      llvm::APInt::insertBits(&v92, (const llvm::APInt *)&v63[v61], v64 * v62++);
      v61 += 16;
    }
    while (v62 < v105);
  }
  int v107 = (char **)v95;
  LODWORD(v108) = 0;
  uint64_t v43 = llvm::ConstantInt::get(****(llvm::ConstantInt *****)(a1 + 328), (llvm::LLVMContext *)&v92, v41);
  (*(void (**)(uint64_t, char ***, void *))(*(void *)(a1 + 320) + 16))(a1 + 320, &v107, v43);
  LODWORD(v107) = *(_DWORD *)(*(void *)(v44 + 32) + 4);
  LODWORD(v109) = 0;
  LODWORD(v122.__r_.__value_.__l.__data_) = *(_DWORD *)(v4[4] + 36);
  LODWORD(v122.__r_.__value_.__r.__words[2]) = 0;
  sub_1CC737D1C((void *)(a1 + 320), (int *)&v107, (int *)&v122, v33);
  v91[0] = *(uint64_t ****)(a1 + 296);
  v91[1] = 0;
  uint64_t v45 = ****(void ****)v91[0];
  if (*(void *)(v45 + 128)
    || (*(unsigned int (**)(void))(**(void **)(v45 + 72) + 48))(*(void *)(v45 + 72)))
  {
    uint64_t v46 = v4[7];
    if (v46)
    {
      uint64_t v48 = *(void *)(v46 - 8 * *(unsigned int *)(v46 + 8));
      if (*(unsigned char *)v48 != 15) {
        uint64_t v48 = *(void *)(v48 - 8 * *(unsigned int *)(v48 + 8));
      }
      unsigned int v47 = *(_DWORD *)(v46 + 4);
      LODWORD(v46) = *(unsigned __int16 *)(v46 + 2);
    }
    else
    {
      unsigned int v47 = 0;
      uint64_t v48 = 0;
    }
    uint64_t v49 = v4[3];
    uint64_t v50 = **(void **)(v49 + 32);
    LODWORD(v108) = 15;
    BYTE4(v108) = 2;
    uint64_t v109 = v50;
    uint64_t v110 = v48;
    unint64_t v111 = __PAIR64__(v46, v47);
    uint64_t v112 = "loadstore-opt";
    int v113 = "MergedStore";
    uint64_t v114 = 11;
    char v115 = 0;
    char v116 = 0;
    uint64_t v117 = v119;
    uint64_t v118 = 0x400000000;
    v119[256] = 0;
    int v120 = -1;
    uint64_t v121 = v49;
    int v107 = (char **)&unk_1F260B468;
    v122.__r_.__value_.__r.__words[0] = (std::string::size_type)"Merged ";
    v122.__r_.__value_.__l.__size_ = 7;
    sub_1CC59ADEC((uint64_t *)&v117, (uint64_t)&v122);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v122, "NumMerged", 9uLL, *((unsigned int *)a2 + 2));
    uint64_t v51 = sub_1CD3D6290((uint64_t)&v107, (long long *)&v122);
    v100.__r_.__value_.__r.__words[0] = (std::string::size_type)" stores of ";
    v100.__r_.__value_.__l.__size_ = 11;
    sub_1CC59ADEC((uint64_t *)(v51 + 80), (uint64_t)&v100);
    unint64_t v53 = (unint64_t)(sub_1CB8F1DC4(&v96) + 7) >> 3;
    if (v52 == 1) {
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v100, "OrigWidth", 9uLL, v53);
    }
    uint64_t v54 = sub_1CD3D6290(v51, (long long *)&v100);
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)" bytes into a single store of ";
    v97.__r_.__value_.__l.__size_ = 30;
    sub_1CC59ADEC((uint64_t *)(v54 + 80), (uint64_t)&v97);
    unint64_t v56 = (unint64_t)(sub_1CB8F1DC4(&v95) + 7) >> 3;
    if (v55 == 1) {
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v97, "NewWidth", 8uLL, v56);
    }
    uint64_t v57 = sub_1CD3D6290(v54, (long long *)&v97);
    v103[0] = " bytes";
    v103[1] = 6;
    sub_1CC59ADEC((uint64_t *)(v57 + 80), (uint64_t)v103);
    if (v99 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v97.__r_.__value_.__l.__data_);
    }
    if (v102 < 0) {
      operator delete(v101);
    }
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v100.__r_.__value_.__l.__data_);
    }
    if (v124 < 0) {
      operator delete(v123);
    }
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v122.__r_.__value_.__l.__data_);
    }
    llvm::MachineOptimizationRemarkEmitter::emit(v91, (llvm::DiagnosticInfoOptimizationBase *)&v107);
    int v107 = (char **)&unk_1F2616800;
    int v58 = (char *)v117;
    if (v118)
    {
      unint64_t v59 = (unint64_t)v118 << 6;
      do
      {
        uint64_t v60 = (void **)&v58[v59];
        if (v58[v59 - 17] < 0) {
          operator delete(*(v60 - 5));
        }
        if (*((char *)v60 - 41) < 0) {
          operator delete(*(v60 - 8));
        }
        v59 -= 64;
      }
      while (v59);
      int v58 = (char *)v117;
    }
    if (v58 != v119) {
      free(v58);
    }
  }
  uint64_t v69 = *((unsigned int *)a2 + 2);
  if (v69)
  {
    uint64_t v70 = *a2;
    uint64_t v71 = (uint64_t)&(*a2)[v69];
    while (1)
    {
      uint64_t v72 = *(void *)(a1 + 432);
      uint64_t v73 = *v70;
      uint64_t v74 = *(unsigned int *)(a1 + 444);
      if (v72 != *(void *)(a1 + 424)) {
        break;
      }
      if (v74)
      {
        unsigned int v75 = 0;
        uint64_t v76 = 8 * v74;
        uint64_t v77 = *(void **)(a1 + 432);
        while (*v77 != v73)
        {
          if (*v77 == -2) {
            unsigned int v75 = v77;
          }
          ++v77;
          v76 -= 8;
          if (!v76)
          {
            if (!v75) {
              goto LABEL_130;
            }
            *unsigned int v75 = v73;
            --*(_DWORD *)(a1 + 448);
            goto LABEL_154;
          }
        }
        goto LABEL_154;
      }
LABEL_130:
      unsigned int v78 = *(_DWORD *)(a1 + 440);
      if (v74 >= v78) {
        goto LABEL_133;
      }
      *(_DWORD *)(a1 + 444) = v74 + 1;
      *(void *)(v72 + 8 * v74) = v73;
LABEL_154:
      if (++v70 == (uint64_t *)v71) {
        goto LABEL_117;
      }
    }
    unsigned int v78 = *(_DWORD *)(a1 + 440);
LABEL_133:
    if (3 * v78 <= 4 * ((int)v74 - *(_DWORD *)(a1 + 448)))
    {
      if (v78 >= 0x40) {
        v78 *= 2;
      }
      else {
        unsigned int v78 = 128;
      }
    }
    else if (v78 - v74 >= v78 >> 3)
    {
      goto LABEL_135;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 424), v78);
    unsigned int v78 = *(_DWORD *)(a1 + 440);
    uint64_t v72 = *(void *)(a1 + 432);
LABEL_135:
    unsigned int v79 = v78 - 1;
    unsigned int v80 = (v78 - 1) & ((v73 >> 4) ^ (v73 >> 9));
    uint64_t v81 = (void *)(v72 + 8 * v80);
    uint64_t v82 = *v81;
    if (*v81 == -1)
    {
      unsigned int v83 = 0;
LABEL_147:
      if (v83) {
        uint64_t v87 = v83;
      }
      else {
        uint64_t v87 = v81;
      }
      if (*v87 != v73)
      {
        if (*v87 == -2) {
          --*(_DWORD *)(a1 + 448);
        }
        else {
          ++*(_DWORD *)(a1 + 444);
        }
        *uint64_t v87 = v73;
      }
    }
    else
    {
      unsigned int v83 = 0;
      int v84 = 1;
      while (v82 != v73)
      {
        if (v83) {
          BOOL v85 = 0;
        }
        else {
          BOOL v85 = v82 == -2;
        }
        if (v85) {
          unsigned int v83 = v81;
        }
        unsigned int v86 = v80 + v84++;
        unsigned int v80 = v86 & v79;
        uint64_t v81 = (void *)(v72 + 8 * (v86 & v79));
        uint64_t v82 = *v81;
        if (*v81 == -1) {
          goto LABEL_147;
        }
      }
    }
    goto LABEL_154;
  }
LABEL_117:
  if (v93 >= 0x41 && v92) {
    MEMORY[0x1D25D9CB0](v92, 0x1000C8000313F17);
  }
  uint64_t v35 = 1;
LABEL_58:
  sub_1CD480C18(&v104);
  if (v94)
  {
    int v36 = *v94;
    if ((v36 - 4) > 0x1E)
    {
      if ((v36 - 3) >= 0xFFFFFFFE) {
        unsigned int v38 = v94;
      }
      else {
        unsigned int v38 = 0;
      }
      if ((v36 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v39 = (unint64_t)(v38 + 8);
LABEL_68:
        int v107 = &v94;
        sub_1CC5FA668(v39 + 16, &v107);
        return v35;
      }
      if (v36 == 3) {
        *((void *)v94 + 1) = 0;
      }
    }
    else if ((v94[1] & 0x7F) == 2 || *((_DWORD *)v94 + 3))
    {
      uint64_t v89 = *((void *)v94 + 2);
      if ((v89 & 4) != 0)
      {
        unint64_t v39 = v89 & 0xFFFFFFFFFFFFFFF8;
        if (v39) {
          goto LABEL_68;
        }
      }
    }
  }
  return v35;
}