uint64_t llvm::dwarf::AttributeVendor(int a1)
{
  uint64_t result;
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;

  result = 0;
  if (a1 <= 8704)
  {
    if (a1 > 8322)
    {
      if (a1 <= 8448)
      {
        switch(a1)
        {
          case 8323:
          case 8325:
          case 8326:
          case 8327:
            result = 10;
            break;
          case 8324:
            return result;
          default:
            if (a1 == 8339) {
              v13 = 10;
            }
            else {
              v13 = 0;
            }
            if (a1 == 8338) {
              result = 10;
            }
            else {
              result = v13;
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 8449:
          case 8450:
          case 8451:
          case 8452:
          case 8453:
          case 8454:
          case 8455:
          case 8463:
          case 8464:
          case 8465:
          case 8466:
          case 8467:
          case 8468:
          case 8469:
          case 8470:
          case 8471:
          case 8472:
          case 8473:
          case 8474:
          case 8496:
          case 8497:
          case 8498:
          case 8499:
          case 8500:
          case 8501:
          case 8502:
          case 8503:
          case 8504:
LABEL_14:
            result = 3;
            break;
          default:
            return result;
        }
      }
    }
    else if (a1 <= 0x2000)
    {
      if (a1 == 2056) {
        v11 = 10;
      }
      else {
        v11 = 0;
      }
      if (a1 == 2055) {
        v12 = 10;
      }
      else {
        v12 = v11;
      }
      if (a1 == 2054) {
        return 10;
      }
      else {
        return v12;
      }
    }
    else
    {
      switch(a1)
      {
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8203:
        case 8204:
        case 8205:
        case 8206:
        case 8207:
        case 8208:
        case 8209:
          result = 6;
          break;
        case 8210:
        case 8211:
        case 8212:
        case 8213:
        case 8214:
        case 8215:
        case 8216:
        case 8217:
        case 8218:
        case 8219:
        case 8223:
        case 8224:
        case 8225:
        case 8226:
        case 8227:
        case 8233:
          result = 12;
          break;
        case 8230:
          result = 14;
          break;
        default:
          return result;
      }
    }
  }
  else if (a1 <= 12815)
  {
    switch(a1)
    {
      case 8705:
      case 8706:
      case 8707:
      case 8708:
      case 8709:
      case 8710:
      case 8711:
      case 8712:
      case 8713:
      case 8720:
      case 8721:
      case 8722:
      case 8723:
      case 8724:
      case 8725:
      case 8726:
      case 8727:
      case 8728:
      case 8729:
      case 8736:
      case 8737:
      case 8738:
      case 8739:
      case 8740:
      case 8741:
      case 8742:
      case 8743:
      case 8744:
      case 8745:
      case 8746:
      case 8747:
      case 8748:
      case 8749:
      case 8750:
      case 8752:
      case 8753:
      case 8754:
      case 8755:
      case 8756:
      case 8757:
      case 8758:
      case 8759:
      case 8760:
      case 8761:
      case 8762:
      case 8763:
        result = 16;
        break;
      case 8714:
      case 8715:
      case 8716:
      case 8717:
      case 8718:
      case 8719:
      case 8730:
      case 8731:
      case 8732:
      case 8733:
      case 8734:
      case 8735:
      case 8751:
        return result;
      default:
        switch(a1)
        {
          case 8960:
            result = 8;
            break;
          case 8961:
          case 8962:
          case 8963:
          case 8964:
          case 8965:
            goto LABEL_14;
          default:
            switch(a1)
            {
              case 10496:
              case 10497:
              case 10498:
              case 10499:
              case 10500:
                result = 11;
                break;
              default:
                return result;
            }
            break;
        }
        break;
    }
  }
  else if (a1 <= 15120)
  {
    if (a1 == 14850) {
      v3 = 15;
    }
    else {
      v3 = 0;
    }
    if (a1 == 14849) {
      v4 = 15;
    }
    else {
      v4 = v3;
    }
    if (a1 == 14848) {
      v5 = 15;
    }
    else {
      v5 = 0;
    }
    if (a1 == 14656) {
      v6 = 13;
    }
    else {
      v6 = v5;
    }
    if (a1 <= 14848) {
      v7 = v6;
    }
    else {
      v7 = v4;
    }
    if (a1 == 14655) {
      v8 = 13;
    }
    else {
      v8 = 0;
    }
    if (a1 == 14654) {
      v9 = 13;
    }
    else {
      v9 = v8;
    }
    if (a1 == 12816) {
      v10 = 17;
    }
    else {
      v10 = v9;
    }
    if (a1 <= 14655) {
      return v10;
    }
    else {
      return v7;
    }
  }
  else
  {
    switch(a1)
    {
      case 16353:
      case 16354:
      case 16355:
      case 16356:
      case 16357:
      case 16358:
      case 16359:
      case 16360:
      case 16361:
      case 16362:
      case 16363:
      case 16364:
      case 16365:
      case 16366:
      case 16367:
        result = 1;
        break;
      default:
        switch(a1)
        {
          case 15872:
          case 15873:
          case 15874:
          case 15875:
          case 15876:
          case 15877:
          case 15878:
          case 15880:
          case 15881:
            result = 5;
            break;
          case 15879:
            result = 1;
            break;
          default:
            return result;
        }
        break;
    }
  }
  return result;
}

const char *llvm::dwarf::FormEncodingString(llvm::dwarf *this)
{
  int v1 = (int)this;
  result = 0;
  if (v1 > 7936)
  {
    v3 = "DW_FORM_GNU_ref_alt";
    v4 = "DW_FORM_LLVM_addrx_offset";
    if (v1 != 8193) {
      v4 = 0;
    }
    if (v1 == 7969) {
      v5 = "DW_FORM_GNU_strp_alt";
    }
    else {
      v5 = v4;
    }
    if (v1 != 7968) {
      v3 = v5;
    }
    v6 = "DW_FORM_GNU_str_index";
    if (v1 != 7938) {
      v6 = 0;
    }
    if (v1 == 7937) {
      v7 = "DW_FORM_GNU_addr_index";
    }
    else {
      v7 = v6;
    }
    if (v1 <= 7967) {
      return v7;
    }
    else {
      return v3;
    }
  }
  else
  {
    switch(v1)
    {
      case 1:
        result = "DW_FORM_addr";
        break;
      case 3:
        result = "DW_FORM_block2";
        break;
      case 4:
        result = "DW_FORM_block4";
        break;
      case 5:
        result = "DW_FORM_data2";
        break;
      case 6:
        result = "DW_FORM_data4";
        break;
      case 7:
        result = "DW_FORM_data8";
        break;
      case 8:
        result = "DW_FORM_string";
        break;
      case 9:
        result = "DW_FORM_block";
        break;
      case 10:
        result = "DW_FORM_block1";
        break;
      case 11:
        result = "DW_FORM_data1";
        break;
      case 12:
        result = "DW_FORM_flag";
        break;
      case 13:
        result = "DW_FORM_sdata";
        break;
      case 14:
        result = "DW_FORM_strp";
        break;
      case 15:
        result = "DW_FORM_udata";
        break;
      case 16:
        result = "DW_FORM_ref_addr";
        break;
      case 17:
        result = "DW_FORM_ref1";
        break;
      case 18:
        result = "DW_FORM_ref2";
        break;
      case 19:
        result = "DW_FORM_ref4";
        break;
      case 20:
        result = "DW_FORM_ref8";
        break;
      case 21:
        result = "DW_FORM_ref_udata";
        break;
      case 22:
        result = "DW_FORM_indirect";
        break;
      case 23:
        result = "DW_FORM_sec_offset";
        break;
      case 24:
        result = "DW_FORM_exprloc";
        break;
      case 25:
        result = "DW_FORM_flag_present";
        break;
      case 26:
        result = "DW_FORM_strx";
        break;
      case 27:
        result = "DW_FORM_addrx";
        break;
      case 28:
        result = "DW_FORM_ref_sup4";
        break;
      case 29:
        result = "DW_FORM_strp_sup";
        break;
      case 30:
        result = "DW_FORM_data16";
        break;
      case 31:
        result = "DW_FORM_line_strp";
        break;
      case 32:
        result = "DW_FORM_ref_sig8";
        break;
      case 33:
        result = "DW_FORM_implicit_const";
        break;
      case 34:
        result = "DW_FORM_loclistx";
        break;
      case 35:
        result = "DW_FORM_rnglistx";
        break;
      case 36:
        result = "DW_FORM_ref_sup8";
        break;
      case 37:
        result = "DW_FORM_strx1";
        break;
      case 38:
        result = "DW_FORM_strx2";
        break;
      case 39:
        result = "DW_FORM_strx3";
        break;
      case 40:
        result = "DW_FORM_strx4";
        break;
      case 41:
        result = "DW_FORM_addrx1";
        break;
      case 42:
        result = "DW_FORM_addrx2";
        break;
      case 43:
        result = "DW_FORM_addrx3";
        break;
      case 44:
        result = "DW_FORM_addrx4";
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t llvm::dwarf::FormVersion(int a1)
{
  if ((a1 - 1) > 0x2B) {
    return 0;
  }
  else {
    return dword_1CFAC5088[(__int16)(a1 - 1)];
  }
}

uint64_t llvm::dwarf::FormVendor(int a1)
{
  if (a1 == 8193) {
    int v1 = 5;
  }
  else {
    int v1 = 0;
  }
  if (a1 == 7969) {
    int v2 = 3;
  }
  else {
    int v2 = v1;
  }
  if (a1 == 7968) {
    unsigned int v3 = 3;
  }
  else {
    unsigned int v3 = v2;
  }
  if (a1 == 7938) {
    int v4 = 3;
  }
  else {
    int v4 = 0;
  }
  if (a1 == 7937) {
    unsigned int v5 = 3;
  }
  else {
    unsigned int v5 = v4;
  }
  if (a1 <= 7967) {
    return v5;
  }
  else {
    return v3;
  }
}

const char *llvm::dwarf::OperationEncodingString(llvm::dwarf *this)
{
  int v1 = (int)this;
  result = 0;
  switch(v1)
  {
    case 3:
      result = "DW_OP_addr";
      break;
    case 4:
    case 5:
    case 7:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 231:
    case 233:
    case 234:
    case 235:
    case 236:
    case 239:
    case 241:
    case 242:
    case 244:
    case 245:
    case 246:
    case 247:
    case 249:
    case 250:
      return result;
    case 6:
      result = "DW_OP_deref";
      break;
    case 8:
      result = "DW_OP_const1u";
      break;
    case 9:
      result = "DW_OP_const1s";
      break;
    case 10:
      result = "DW_OP_const2u";
      break;
    case 11:
      result = "DW_OP_const2s";
      break;
    case 12:
      result = "DW_OP_const4u";
      break;
    case 13:
      result = "DW_OP_const4s";
      break;
    case 14:
      result = "DW_OP_const8u";
      break;
    case 15:
      result = "DW_OP_const8s";
      break;
    case 16:
      result = "DW_OP_constu";
      break;
    case 17:
      result = "DW_OP_consts";
      break;
    case 18:
      result = "DW_OP_dup";
      break;
    case 19:
      result = "DW_OP_drop";
      break;
    case 20:
      result = "DW_OP_over";
      break;
    case 21:
      result = "DW_OP_pick";
      break;
    case 22:
      result = "DW_OP_swap";
      break;
    case 23:
      result = "DW_OP_rot";
      break;
    case 24:
      result = "DW_OP_xderef";
      break;
    case 25:
      result = "DW_OP_abs";
      break;
    case 26:
      result = "DW_OP_and";
      break;
    case 27:
      result = "DW_OP_div";
      break;
    case 28:
      result = "DW_OP_minus";
      break;
    case 29:
      result = "DW_OP_mod";
      break;
    case 30:
      result = "DW_OP_mul";
      break;
    case 31:
      result = "DW_OP_neg";
      break;
    case 32:
      result = "DW_OP_not";
      break;
    case 33:
      result = "DW_OP_or";
      break;
    case 34:
      result = "DW_OP_plus";
      break;
    case 35:
      result = "DW_OP_plus_uconst";
      break;
    case 36:
      result = "DW_OP_shl";
      break;
    case 37:
      result = "DW_OP_shr";
      break;
    case 38:
      result = "DW_OP_shra";
      break;
    case 39:
      result = "DW_OP_xor";
      break;
    case 40:
      result = "DW_OP_bra";
      break;
    case 41:
      result = "DW_OP_eq";
      break;
    case 42:
      result = "DW_OP_ge";
      break;
    case 43:
      result = "DW_OP_gt";
      break;
    case 44:
      result = "DW_OP_le";
      break;
    case 45:
      result = "DW_OP_lt";
      break;
    case 46:
      result = "DW_OP_ne";
      break;
    case 47:
      result = "DW_OP_skip";
      break;
    case 48:
      result = "DW_OP_lit0";
      break;
    case 49:
      result = "DW_OP_lit1";
      break;
    case 50:
      result = "DW_OP_lit2";
      break;
    case 51:
      result = "DW_OP_lit3";
      break;
    case 52:
      result = "DW_OP_lit4";
      break;
    case 53:
      result = "DW_OP_lit5";
      break;
    case 54:
      result = "DW_OP_lit6";
      break;
    case 55:
      result = "DW_OP_lit7";
      break;
    case 56:
      result = "DW_OP_lit8";
      break;
    case 57:
      result = "DW_OP_lit9";
      break;
    case 58:
      result = "DW_OP_lit10";
      break;
    case 59:
      result = "DW_OP_lit11";
      break;
    case 60:
      result = "DW_OP_lit12";
      break;
    case 61:
      result = "DW_OP_lit13";
      break;
    case 62:
      result = "DW_OP_lit14";
      break;
    case 63:
      result = "DW_OP_lit15";
      break;
    case 64:
      result = "DW_OP_lit16";
      break;
    case 65:
      result = "DW_OP_lit17";
      break;
    case 66:
      result = "DW_OP_lit18";
      break;
    case 67:
      result = "DW_OP_lit19";
      break;
    case 68:
      result = "DW_OP_lit20";
      break;
    case 69:
      result = "DW_OP_lit21";
      break;
    case 70:
      result = "DW_OP_lit22";
      break;
    case 71:
      result = "DW_OP_lit23";
      break;
    case 72:
      result = "DW_OP_lit24";
      break;
    case 73:
      result = "DW_OP_lit25";
      break;
    case 74:
      result = "DW_OP_lit26";
      break;
    case 75:
      result = "DW_OP_lit27";
      break;
    case 76:
      result = "DW_OP_lit28";
      break;
    case 77:
      result = "DW_OP_lit29";
      break;
    case 78:
      result = "DW_OP_lit30";
      break;
    case 79:
      result = "DW_OP_lit31";
      break;
    case 80:
      result = "DW_OP_reg0";
      break;
    case 81:
      result = "DW_OP_reg1";
      break;
    case 82:
      result = "DW_OP_reg2";
      break;
    case 83:
      result = "DW_OP_reg3";
      break;
    case 84:
      result = "DW_OP_reg4";
      break;
    case 85:
      result = "DW_OP_reg5";
      break;
    case 86:
      result = "DW_OP_reg6";
      break;
    case 87:
      result = "DW_OP_reg7";
      break;
    case 88:
      result = "DW_OP_reg8";
      break;
    case 89:
      result = "DW_OP_reg9";
      break;
    case 90:
      result = "DW_OP_reg10";
      break;
    case 91:
      result = "DW_OP_reg11";
      break;
    case 92:
      result = "DW_OP_reg12";
      break;
    case 93:
      result = "DW_OP_reg13";
      break;
    case 94:
      result = "DW_OP_reg14";
      break;
    case 95:
      result = "DW_OP_reg15";
      break;
    case 96:
      result = "DW_OP_reg16";
      break;
    case 97:
      result = "DW_OP_reg17";
      break;
    case 98:
      result = "DW_OP_reg18";
      break;
    case 99:
      result = "DW_OP_reg19";
      break;
    case 100:
      result = "DW_OP_reg20";
      break;
    case 101:
      result = "DW_OP_reg21";
      break;
    case 102:
      result = "DW_OP_reg22";
      break;
    case 103:
      result = "DW_OP_reg23";
      break;
    case 104:
      result = "DW_OP_reg24";
      break;
    case 105:
      result = "DW_OP_reg25";
      break;
    case 106:
      result = "DW_OP_reg26";
      break;
    case 107:
      result = "DW_OP_reg27";
      break;
    case 108:
      result = "DW_OP_reg28";
      break;
    case 109:
      result = "DW_OP_reg29";
      break;
    case 110:
      result = "DW_OP_reg30";
      break;
    case 111:
      result = "DW_OP_reg31";
      break;
    case 112:
      result = "DW_OP_breg0";
      break;
    case 113:
      result = "DW_OP_breg1";
      break;
    case 114:
      result = "DW_OP_breg2";
      break;
    case 115:
      result = "DW_OP_breg3";
      break;
    case 116:
      result = "DW_OP_breg4";
      break;
    case 117:
      result = "DW_OP_breg5";
      break;
    case 118:
      result = "DW_OP_breg6";
      break;
    case 119:
      result = "DW_OP_breg7";
      break;
    case 120:
      result = "DW_OP_breg8";
      break;
    case 121:
      result = "DW_OP_breg9";
      break;
    case 122:
      result = "DW_OP_breg10";
      break;
    case 123:
      result = "DW_OP_breg11";
      break;
    case 124:
      result = "DW_OP_breg12";
      break;
    case 125:
      result = "DW_OP_breg13";
      break;
    case 126:
      result = "DW_OP_breg14";
      break;
    case 127:
      result = "DW_OP_breg15";
      break;
    case 128:
      result = "DW_OP_breg16";
      break;
    case 129:
      result = "DW_OP_breg17";
      break;
    case 130:
      result = "DW_OP_breg18";
      break;
    case 131:
      result = "DW_OP_breg19";
      break;
    case 132:
      result = "DW_OP_breg20";
      break;
    case 133:
      result = "DW_OP_breg21";
      break;
    case 134:
      result = "DW_OP_breg22";
      break;
    case 135:
      result = "DW_OP_breg23";
      break;
    case 136:
      result = "DW_OP_breg24";
      break;
    case 137:
      result = "DW_OP_breg25";
      break;
    case 138:
      result = "DW_OP_breg26";
      break;
    case 139:
      result = "DW_OP_breg27";
      break;
    case 140:
      result = "DW_OP_breg28";
      break;
    case 141:
      result = "DW_OP_breg29";
      break;
    case 142:
      result = "DW_OP_breg30";
      break;
    case 143:
      result = "DW_OP_breg31";
      break;
    case 144:
      result = "DW_OP_regx";
      break;
    case 145:
      result = "DW_OP_fbreg";
      break;
    case 146:
      result = "DW_OP_bregx";
      break;
    case 147:
      result = "DW_OP_piece";
      break;
    case 148:
      result = "DW_OP_deref_size";
      break;
    case 149:
      result = "DW_OP_xderef_size";
      break;
    case 150:
      result = "DW_OP_nop";
      break;
    case 151:
      result = "DW_OP_push_object_address";
      break;
    case 152:
      result = "DW_OP_call2";
      break;
    case 153:
      result = "DW_OP_call4";
      break;
    case 154:
      result = "DW_OP_call_ref";
      break;
    case 155:
      result = "DW_OP_form_tls_address";
      break;
    case 156:
      result = "DW_OP_call_frame_cfa";
      break;
    case 157:
      result = "DW_OP_bit_piece";
      break;
    case 158:
      result = "DW_OP_implicit_value";
      break;
    case 159:
      result = "DW_OP_stack_value";
      break;
    case 160:
      result = "DW_OP_implicit_pointer";
      break;
    case 161:
      result = "DW_OP_addrx";
      break;
    case 162:
      result = "DW_OP_constx";
      break;
    case 163:
      result = "DW_OP_entry_value";
      break;
    case 164:
      result = "DW_OP_const_type";
      break;
    case 165:
      result = "DW_OP_regval_type";
      break;
    case 166:
      result = "DW_OP_deref_type";
      break;
    case 167:
      result = "DW_OP_xderef_type";
      break;
    case 168:
      result = "DW_OP_convert";
      break;
    case 169:
      result = "DW_OP_reinterpret";
      break;
    case 224:
      result = "DW_OP_GNU_push_tls_address";
      break;
    case 225:
      result = "DW_OP_HP_is_value";
      break;
    case 226:
      result = "DW_OP_HP_fltconst4";
      break;
    case 227:
      result = "DW_OP_HP_fltconst8";
      break;
    case 228:
      result = "DW_OP_HP_mod_range";
      break;
    case 229:
      result = "DW_OP_HP_unmod_range";
      break;
    case 230:
      result = "DW_OP_HP_tls";
      break;
    case 232:
      result = "DW_OP_INTEL_bit_piece";
      break;
    case 237:
      result = "DW_OP_WASM_location";
      break;
    case 238:
      result = "DW_OP_WASM_location_int";
      break;
    case 240:
      result = "DW_OP_APPLE_uninit";
      break;
    case 243:
      result = "DW_OP_GNU_entry_value";
      break;
    case 248:
      result = "DW_OP_PGI_omp_thread_num";
      break;
    case 251:
      result = "DW_OP_GNU_addr_index";
      break;
    case 252:
      result = "DW_OP_GNU_const_index";
      break;
    default:
      switch(v1)
      {
        case 4096:
          result = "DW_OP_LLVM_fragment";
          break;
        case 4097:
          result = "DW_OP_LLVM_convert";
          break;
        case 4098:
          result = "DW_OP_LLVM_tag_offset";
          break;
        case 4099:
          result = "DW_OP_LLVM_entry_value";
          break;
        case 4100:
          result = "DW_OP_LLVM_implicit_pointer";
          break;
        case 4101:
          result = "DW_OP_LLVM_arg";
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

uint64_t llvm::dwarf::getOperationEncoding(uint64_t a1, uint64_t a2)
{
  switch(a2)
  {
    case 9:
      if (*(void *)a1 == 0x75645F504F5F5744 && *(unsigned char *)(a1 + 8) == 112)
      {
        unint64_t v16 = 0x100000012;
      }
      else if (*(void *)a1 == 0x6F725F504F5F5744 && *(unsigned char *)(a1 + 8) == 116)
      {
        unint64_t v16 = 0x100000017;
      }
      else if (*(void *)a1 == 0x62615F504F5F5744 && *(unsigned char *)(a1 + 8) == 115)
      {
        unint64_t v16 = 0x100000019;
      }
      else if (*(void *)a1 == 0x6E615F504F5F5744 && *(unsigned char *)(a1 + 8) == 100)
      {
        unint64_t v16 = 0x10000001ALL;
      }
      else if (*(void *)a1 == 0x69645F504F5F5744 && *(unsigned char *)(a1 + 8) == 118)
      {
        unint64_t v16 = 0x10000001BLL;
      }
      else if (*(void *)a1 == 0x6F6D5F504F5F5744 && *(unsigned char *)(a1 + 8) == 100)
      {
        unint64_t v16 = 0x10000001DLL;
      }
      else if (*(void *)a1 == 0x756D5F504F5F5744 && *(unsigned char *)(a1 + 8) == 108)
      {
        unint64_t v16 = 0x10000001ELL;
      }
      else if (*(void *)a1 == 0x656E5F504F5F5744 && *(unsigned char *)(a1 + 8) == 103)
      {
        unint64_t v16 = 0x10000001FLL;
      }
      else if (*(void *)a1 == 0x6F6E5F504F5F5744 && *(unsigned char *)(a1 + 8) == 116)
      {
        unint64_t v16 = 0x100000020;
      }
      else if (*(void *)a1 == 0x68735F504F5F5744 && *(unsigned char *)(a1 + 8) == 108)
      {
        unint64_t v16 = 0x100000024;
      }
      else if (*(void *)a1 == 0x68735F504F5F5744 && *(unsigned char *)(a1 + 8) == 114)
      {
        unint64_t v16 = 0x100000025;
      }
      else if (*(void *)a1 == 0x6F785F504F5F5744 && *(unsigned char *)(a1 + 8) == 114)
      {
        unint64_t v16 = 0x100000027;
      }
      else if (*(void *)a1 == 0x72625F504F5F5744 && *(unsigned char *)(a1 + 8) == 97)
      {
        unint64_t v16 = 0x100000028;
      }
      else
      {
        if (*(void *)a1 != 0x6F6E5F504F5F5744 || *(unsigned char *)(a1 + 8) != 112) {
          goto LABEL_58;
        }
        unint64_t v16 = 0x100000096;
      }
      goto LABEL_1015;
    case 10:
      if (*(void *)a1 == 0x64615F504F5F5744 && *(_WORD *)(a1 + 8) == 29284)
      {
        unint64_t v16 = 0x100000003;
      }
      else if (*(void *)a1 == 0x72645F504F5F5744 && *(_WORD *)(a1 + 8) == 28783)
      {
        unint64_t v16 = 0x100000013;
      }
      else if (*(void *)a1 == 0x766F5F504F5F5744 && *(_WORD *)(a1 + 8) == 29285)
      {
        unint64_t v16 = 0x100000014;
      }
      else if (*(void *)a1 == 0x69705F504F5F5744 && *(_WORD *)(a1 + 8) == 27491)
      {
        unint64_t v16 = 0x100000015;
      }
      else if (*(void *)a1 == 0x77735F504F5F5744 && *(_WORD *)(a1 + 8) == 28769)
      {
        unint64_t v16 = 0x100000016;
      }
      else if (*(void *)a1 == 0x6C705F504F5F5744 && *(_WORD *)(a1 + 8) == 29557)
      {
        unint64_t v16 = 0x100000022;
      }
      else if (*(void *)a1 == 0x68735F504F5F5744 && *(_WORD *)(a1 + 8) == 24946)
      {
        unint64_t v16 = 0x100000026;
      }
      else if (*(void *)a1 == 0x6B735F504F5F5744 && *(_WORD *)(a1 + 8) == 28777)
      {
        unint64_t v16 = 0x10000002FLL;
      }
      else if (*(void *)a1 == 0x696C5F504F5F5744 && *(_WORD *)(a1 + 8) == 12404)
      {
        unint64_t v16 = 0x100000030;
      }
      else if (*(void *)a1 == 0x696C5F504F5F5744 && *(_WORD *)(a1 + 8) == 12660)
      {
        unint64_t v16 = 0x100000031;
      }
      else if (*(void *)a1 == 0x696C5F504F5F5744 && *(_WORD *)(a1 + 8) == 12916)
      {
        unint64_t v16 = 0x100000032;
      }
      else if (*(void *)a1 == 0x696C5F504F5F5744 && *(_WORD *)(a1 + 8) == 13172)
      {
        unint64_t v16 = 0x100000033;
      }
      else if (*(void *)a1 == 0x696C5F504F5F5744 && *(_WORD *)(a1 + 8) == 13428)
      {
        unint64_t v16 = 0x100000034;
      }
      else if (*(void *)a1 == 0x696C5F504F5F5744 && *(_WORD *)(a1 + 8) == 13684)
      {
        unint64_t v16 = 0x100000035;
      }
      else if (*(void *)a1 == 0x696C5F504F5F5744 && *(_WORD *)(a1 + 8) == 13940)
      {
        unint64_t v16 = 0x100000036;
      }
      else if (*(void *)a1 == 0x696C5F504F5F5744 && *(_WORD *)(a1 + 8) == 14196)
      {
        unint64_t v16 = 0x100000037;
      }
      else if (*(void *)a1 == 0x696C5F504F5F5744 && *(_WORD *)(a1 + 8) == 14452)
      {
        unint64_t v16 = 0x100000038;
      }
      else if (*(void *)a1 == 0x696C5F504F5F5744 && *(_WORD *)(a1 + 8) == 14708)
      {
        unint64_t v16 = 0x100000039;
      }
      else if (*(void *)a1 == 0x65725F504F5F5744 && *(_WORD *)(a1 + 8) == 12391)
      {
        unint64_t v16 = 0x100000050;
      }
      else if (*(void *)a1 == 0x65725F504F5F5744 && *(_WORD *)(a1 + 8) == 12647)
      {
        unint64_t v16 = 0x100000051;
      }
      else if (*(void *)a1 == 0x65725F504F5F5744 && *(_WORD *)(a1 + 8) == 12903)
      {
        unint64_t v16 = 0x100000052;
      }
      else if (*(void *)a1 == 0x65725F504F5F5744 && *(_WORD *)(a1 + 8) == 13159)
      {
        unint64_t v16 = 0x100000053;
      }
      else if (*(void *)a1 == 0x65725F504F5F5744 && *(_WORD *)(a1 + 8) == 13415)
      {
        unint64_t v16 = 0x100000054;
      }
      else if (*(void *)a1 == 0x65725F504F5F5744 && *(_WORD *)(a1 + 8) == 13671)
      {
        unint64_t v16 = 0x100000055;
      }
      else if (*(void *)a1 == 0x65725F504F5F5744 && *(_WORD *)(a1 + 8) == 13927)
      {
        unint64_t v16 = 0x100000056;
      }
      else if (*(void *)a1 == 0x65725F504F5F5744 && *(_WORD *)(a1 + 8) == 14183)
      {
        unint64_t v16 = 0x100000057;
      }
      else if (*(void *)a1 == 0x65725F504F5F5744 && *(_WORD *)(a1 + 8) == 14439)
      {
        unint64_t v16 = 0x100000058;
      }
      else if (*(void *)a1 == 0x65725F504F5F5744 && *(_WORD *)(a1 + 8) == 14695)
      {
        unint64_t v16 = 0x100000059;
      }
      else
      {
        if (*(void *)a1 != 0x65725F504F5F5744 || *(_WORD *)(a1 + 8) != 30823)
        {
LABEL_58:
          unint64_t v16 = 0;
          goto LABEL_875;
        }
        unint64_t v16 = 0x100000090;
      }
      goto LABEL_1015;
    case 11:
      if (*(void *)a1 ^ 0x65645F504F5F5744 | *(void *)(a1 + 3) ^ 0x66657265645F504FLL) {
        unint64_t v16 = 0;
      }
      else {
        unint64_t v16 = 0x100000006;
      }
      goto LABEL_95;
    case 12:
      if (*(void *)a1 == 0x6F635F504F5F5744 && *(_DWORD *)(a1 + 8) == 1970565998)
      {
        unint64_t v16 = 0x100000010;
        goto LABEL_1015;
      }
      if (*(void *)a1 == 0x6F635F504F5F5744 && *(_DWORD *)(a1 + 8) == 1937011566)
      {
        unint64_t v16 = 0x100000011;
        goto LABEL_1015;
      }
      if (*(void *)a1 == 0x64785F504F5F5744 && *(_DWORD *)(a1 + 8) == 1717924453)
      {
        unint64_t v16 = 0x100000018;
        goto LABEL_1015;
      }
      if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 808544101)
      {
        unint64_t v16 = 0x10000007ALL;
        goto LABEL_1015;
      }
      if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 825321317)
      {
        unint64_t v16 = 0x10000007BLL;
        goto LABEL_1015;
      }
      if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 842098533)
      {
        unint64_t v16 = 0x10000007CLL;
        goto LABEL_1015;
      }
      if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 858875749)
      {
        unint64_t v16 = 0x10000007DLL;
        goto LABEL_1015;
      }
      if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 875652965)
      {
        unint64_t v16 = 0x10000007ELL;
        goto LABEL_1015;
      }
      if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 892430181)
      {
        unint64_t v16 = 0x10000007FLL;
        goto LABEL_1015;
      }
      if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 909207397)
      {
        unint64_t v16 = 0x100000080;
        goto LABEL_1015;
      }
      if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 925984613)
      {
        unint64_t v16 = 0x100000081;
        goto LABEL_1015;
      }
      if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 942761829)
      {
        unint64_t v16 = 0x100000082;
        goto LABEL_1015;
      }
      if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 959539045)
      {
        unint64_t v16 = 0x100000083;
      }
      else if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 808609637)
      {
        unint64_t v16 = 0x100000084;
      }
      else if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 825386853)
      {
        unint64_t v16 = 0x100000085;
      }
      else if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 842164069)
      {
        unint64_t v16 = 0x100000086;
      }
      else if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 858941285)
      {
        unint64_t v16 = 0x100000087;
      }
      else if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 875718501)
      {
        unint64_t v16 = 0x100000088;
      }
      else if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 892495717)
      {
        unint64_t v16 = 0x100000089;
      }
      else if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 909272933)
      {
        unint64_t v16 = 0x10000008ALL;
      }
      else if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 926050149)
      {
        unint64_t v16 = 0x10000008BLL;
      }
      else if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 942827365)
      {
        unint64_t v16 = 0x10000008CLL;
      }
      else if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 959604581)
      {
        unint64_t v16 = 0x10000008DLL;
      }
      else if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 808675173)
      {
        unint64_t v16 = 0x10000008ELL;
      }
      else if (*(void *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 825452389)
      {
        unint64_t v16 = 0x10000008FLL;
      }
      else if (*(void *)a1 == 0x6F635F504F5F5744 && *(_DWORD *)(a1 + 8) == 2020897646)
      {
        unint64_t v16 = 0x1000000A2;
      }
      else if (*(void *)a1 == 0x50485F504F5F5744 && *(_DWORD *)(a1 + 8) == 1936487519)
      {
        unint64_t v16 = 0x1000000E6;
      }
      else
      {
        unint64_t v16 = 0;
LABEL_840:
        if (a2 == 19)
        {
          if (*(void *)a1 == 0x41575F504F5F5744
            && *(void *)(a1 + 8) == 0x7461636F6C5F4D53
            && *(void *)(a1 + 11) == 0x6E6F697461636F6CLL)
          {
            unint64_t v16 = 0x1000000EDLL;
          }
          else
          {
            if (*(void *)a1 != 0x4C4C5F504F5F5744
              || *(void *)(a1 + 8) != 0x6D676172665F4D56
              || *(void *)(a1 + 11) != 0x746E656D67617266)
            {
              int v172 = 0;
              goto LABEL_915;
            }
            unint64_t v16 = 0x100001000;
          }
        }
        else
        {
LABEL_856:
          if (a2 != 23) {
            goto LABEL_875;
          }
          uint64_t v182 = *(void *)a1 ^ 0x41575F504F5F5744 | *(void *)(a1 + 8) ^ 0x7461636F6C5F4D53 | *(void *)(a1 + 15) ^ 0x746E695F6E6F6974;
          uint64_t v183 = 0x1000000EELL;
LABEL_858:
          if (!v182) {
            unint64_t v16 = v183;
          }
        }
      }
      goto LABEL_1015;
    case 13:
      if (*(void *)a1 == 0x6F635F504F5F5744 && *(void *)(a1 + 5) == 0x753174736E6F635FLL)
      {
        unint64_t v16 = 0x100000008;
        goto LABEL_1015;
      }
      if (*(void *)a1 == 0x6F635F504F5F5744 && *(void *)(a1 + 5) == 0x733174736E6F635FLL)
      {
        unint64_t v16 = 0x100000009;
        goto LABEL_1015;
      }
      if (*(void *)a1 == 0x6F635F504F5F5744 && *(void *)(a1 + 5) == 0x753274736E6F635FLL)
      {
        unint64_t v16 = 0x10000000ALL;
        goto LABEL_1015;
      }
      if (*(void *)a1 == 0x6F635F504F5F5744 && *(void *)(a1 + 5) == 0x733274736E6F635FLL)
      {
        unint64_t v16 = 0x10000000BLL;
        goto LABEL_1015;
      }
      if (*(void *)a1 == 0x6F635F504F5F5744 && *(void *)(a1 + 5) == 0x753474736E6F635FLL)
      {
        unint64_t v16 = 0x10000000CLL;
        goto LABEL_1015;
      }
      if (*(void *)a1 == 0x6F635F504F5F5744 && *(void *)(a1 + 5) == 0x733474736E6F635FLL)
      {
        unint64_t v16 = 0x10000000DLL;
        goto LABEL_1015;
      }
      if (*(void *)a1 == 0x6F635F504F5F5744 && *(void *)(a1 + 5) == 0x753874736E6F635FLL)
      {
        unint64_t v16 = 0x10000000ELL;
        goto LABEL_1015;
      }
      if (*(void *)a1 == 0x6F635F504F5F5744 && *(void *)(a1 + 5) == 0x733874736E6F635FLL)
      {
        unint64_t v16 = 0x10000000FLL;
        goto LABEL_1015;
      }
      unint64_t v16 = 0;
LABEL_95:
      BOOL v25 = HIDWORD(v16) == 0;
LABEL_324:
      if (a2 == 11 && v25)
      {
        if (*(void *)a1 == 0x696D5F504F5F5744 && *(void *)(a1 + 3) == 0x73756E696D5F504FLL)
        {
          unint64_t v16 = 0x10000001CLL;
          goto LABEL_1015;
        }
LABEL_330:
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x303174696C5F504FLL)
        {
          unint64_t v16 = 0x10000003ALL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x313174696C5F504FLL)
        {
          unint64_t v16 = 0x10000003BLL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x323174696C5F504FLL)
        {
          unint64_t v16 = 0x10000003CLL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x333174696C5F504FLL)
        {
          unint64_t v16 = 0x10000003DLL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x343174696C5F504FLL)
        {
          unint64_t v16 = 0x10000003ELL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x353174696C5F504FLL)
        {
          unint64_t v16 = 0x10000003FLL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x363174696C5F504FLL)
        {
          unint64_t v16 = 0x100000040;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x373174696C5F504FLL)
        {
          unint64_t v16 = 0x100000041;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x383174696C5F504FLL)
        {
          unint64_t v16 = 0x100000042;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x393174696C5F504FLL)
        {
          unint64_t v16 = 0x100000043;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x303274696C5F504FLL)
        {
          unint64_t v16 = 0x100000044;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x313274696C5F504FLL)
        {
          unint64_t v16 = 0x100000045;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x323274696C5F504FLL)
        {
          unint64_t v16 = 0x100000046;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x333274696C5F504FLL)
        {
          unint64_t v16 = 0x100000047;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x343274696C5F504FLL)
        {
          unint64_t v16 = 0x100000048;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x353274696C5F504FLL)
        {
          unint64_t v16 = 0x100000049;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x363274696C5F504FLL)
        {
          unint64_t v16 = 0x10000004ALL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x373274696C5F504FLL)
        {
          unint64_t v16 = 0x10000004BLL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x383274696C5F504FLL)
        {
          unint64_t v16 = 0x10000004CLL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x393274696C5F504FLL)
        {
          unint64_t v16 = 0x10000004DLL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x303374696C5F504FLL)
        {
          unint64_t v16 = 0x10000004ELL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x696C5F504F5F5744 && *(void *)(a1 + 3) == 0x313374696C5F504FLL)
        {
          unint64_t v16 = 0x10000004FLL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x30316765725F504FLL)
        {
          unint64_t v16 = 0x10000005ALL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x31316765725F504FLL)
        {
          unint64_t v16 = 0x10000005BLL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x32316765725F504FLL)
        {
          unint64_t v16 = 0x10000005CLL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x33316765725F504FLL)
        {
          unint64_t v16 = 0x10000005DLL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x34316765725F504FLL)
        {
          unint64_t v16 = 0x10000005ELL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x35316765725F504FLL)
        {
          unint64_t v16 = 0x10000005FLL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x36316765725F504FLL)
        {
          unint64_t v16 = 0x100000060;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x37316765725F504FLL)
        {
          unint64_t v16 = 0x100000061;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x38316765725F504FLL)
        {
          unint64_t v16 = 0x100000062;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x39316765725F504FLL)
        {
          unint64_t v16 = 0x100000063;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x30326765725F504FLL)
        {
          unint64_t v16 = 0x100000064;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x31326765725F504FLL)
        {
          unint64_t v16 = 0x100000065;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x32326765725F504FLL)
        {
          unint64_t v16 = 0x100000066;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x33326765725F504FLL)
        {
          unint64_t v16 = 0x100000067;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x34326765725F504FLL)
        {
          unint64_t v16 = 0x100000068;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x35326765725F504FLL)
        {
          unint64_t v16 = 0x100000069;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x36326765725F504FLL)
        {
          unint64_t v16 = 0x10000006ALL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x37326765725F504FLL)
        {
          unint64_t v16 = 0x10000006BLL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x38326765725F504FLL)
        {
          unint64_t v16 = 0x10000006CLL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x39326765725F504FLL)
        {
          unint64_t v16 = 0x10000006DLL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x30336765725F504FLL)
        {
          unint64_t v16 = 0x10000006ELL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x65725F504F5F5744 && *(void *)(a1 + 3) == 0x31336765725F504FLL)
        {
          unint64_t v16 = 0x10000006FLL;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x72625F504F5F5744 && *(void *)(a1 + 3) == 0x30676572625F504FLL)
        {
          unint64_t v16 = 0x100000070;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x72625F504F5F5744 && *(void *)(a1 + 3) == 0x31676572625F504FLL)
        {
          unint64_t v16 = 0x100000071;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x72625F504F5F5744 && *(void *)(a1 + 3) == 0x32676572625F504FLL)
        {
          unint64_t v16 = 0x100000072;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x72625F504F5F5744 && *(void *)(a1 + 3) == 0x33676572625F504FLL)
        {
          unint64_t v16 = 0x100000073;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x72625F504F5F5744 && *(void *)(a1 + 3) == 0x34676572625F504FLL)
        {
          unint64_t v16 = 0x100000074;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x72625F504F5F5744 && *(void *)(a1 + 3) == 0x35676572625F504FLL)
        {
          unint64_t v16 = 0x100000075;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x72625F504F5F5744 && *(void *)(a1 + 3) == 0x36676572625F504FLL)
        {
          unint64_t v16 = 0x100000076;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x72625F504F5F5744 && *(void *)(a1 + 3) == 0x37676572625F504FLL)
        {
          unint64_t v16 = 0x100000077;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x72625F504F5F5744 && *(void *)(a1 + 3) == 0x38676572625F504FLL)
        {
          unint64_t v16 = 0x100000078;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x72625F504F5F5744 && *(void *)(a1 + 3) == 0x39676572625F504FLL)
        {
          unint64_t v16 = 0x100000079;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x62665F504F5F5744 && *(void *)(a1 + 3) == 0x67657262665F504FLL)
        {
          unint64_t v16 = 0x100000091;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x72625F504F5F5744 && *(void *)(a1 + 3) == 0x78676572625F504FLL)
        {
          unint64_t v16 = 0x100000092;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x69705F504F5F5744 && *(void *)(a1 + 3) == 0x65636569705F504FLL)
        {
          unint64_t v16 = 0x100000093;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x61635F504F5F5744 && *(void *)(a1 + 3) == 0x326C6C61635F504FLL)
        {
          unint64_t v16 = 0x100000098;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x61635F504F5F5744 && *(void *)(a1 + 3) == 0x346C6C61635F504FLL)
        {
          unint64_t v16 = 0x100000099;
          goto LABEL_1015;
        }
        if (*(void *)a1 == 0x64615F504F5F5744 && *(void *)(a1 + 3) == 0x78726464615F504FLL)
        {
          unint64_t v16 = 0x1000000A1;
          goto LABEL_1015;
        }
LABEL_875:
        int v172 = 0;
LABEL_876:
        if (a2 == 21)
        {
          if (*(void *)a1 == 0x4E475F504F5F5744
            && *(void *)(a1 + 8) == 0x5F7972746E655F55
            && *(void *)(a1 + 13) == 0x65756C61765F7972)
          {
            unint64_t v16 = 0x1000000F3;
            goto LABEL_1015;
          }
          int v173 = 0;
        }
        else
        {
          int v173 = 0;
LABEL_886:
          if (a2 == 24)
          {
            if (*(void *)a1 == 0x47505F504F5F5744
              && *(void *)(a1 + 8) == 0x68745F706D6F5F49
              && *(void *)(a1 + 16) == 0x6D756E5F64616572)
            {
              unint64_t v16 = 0x1000000F8;
              goto LABEL_1015;
            }
            if ((v173 & 1) == 0) {
              goto LABEL_915;
            }
            goto LABEL_908;
          }
        }
LABEL_896:
        if (a2 == 21)
        {
          if (*(void *)a1 == 0x4E475F504F5F5744
            && *(void *)(a1 + 8) == 0x5F74736E6F635F55
            && *(void *)(a1 + 13) == 0x7865646E695F7473)
          {
            unint64_t v16 = 0x1000000FCLL;
            goto LABEL_1015;
          }
          uint64_t v205 = *(void *)a1 ^ 0x4C4C5F504F5F5744 | *(void *)(a1 + 8) ^ 0x6F5F6761745F4D56 | *(void *)(a1 + 13) ^ 0x74657366666F5F67;
          BOOL v206 = v205 == 0;
          if (!v205) {
            LOBYTE(v172) = 0;
          }
          uint64_t v207 = 0x100001002;
          goto LABEL_924;
        }
        if (!v173)
        {
LABEL_915:
          if (a2 == 27)
          {
            uint64_t v211 = *(void *)a1 ^ 0x4C4C5F504F5F5744 | *(void *)(a1 + 8) ^ 0x696C706D695F4D56 | *(void *)(a1 + 16) ^ 0x6E696F705F746963 | *(void *)(a1 + 19) ^ 0x7265746E696F705FLL;
            BOOL v206 = v211 == 0;
            if (!v211) {
              LOBYTE(v172) = 0;
            }
            uint64_t v207 = 0x100001004;
          }
          else
          {
            if (a2 != 22)
            {
              if (!v172) {
                goto LABEL_1015;
              }
              goto LABEL_929;
            }
            uint64_t v210 = *(void *)a1 ^ 0x4C4C5F504F5F5744 | *(void *)(a1 + 8) ^ 0x7972746E655F4D56 | *(void *)(a1 + 14) ^ 0x65756C61765F7972;
            BOOL v206 = v210 == 0;
            if (!v210) {
              LOBYTE(v172) = 0;
            }
            uint64_t v207 = 0x100001003;
          }
LABEL_924:
          if (!v206) {
            uint64_t v207 = v16;
          }
          if ((v172 & 1) == 0)
          {
            unint64_t v16 = v207;
            goto LABEL_1015;
          }
LABEL_929:
          if (!(*(void *)a1 ^ 0x4C4C5F504F5F5744 | *(void *)(a1 + 6) ^ 0x6772615F4D564C4CLL)) {
            unint64_t v16 = 0x100001005;
          }
          goto LABEL_1015;
        }
LABEL_908:
        if (*(void *)a1 == 0x4C4C5F504F5F5744
          && *(void *)(a1 + 8) == 0x65766E6F635F4D56
          && *(_WORD *)(a1 + 16) == 29810)
        {
          unint64_t v16 = 0x100001001;
          goto LABEL_1015;
        }
        goto LABEL_915;
      }
      char v143 = !v25;
      char v144 = a2 != 8 || !v25;
      if ((v144 & 1) == 0)
      {
        switch(*(void *)a1)
        {
          case 0x726F5F504F5F5744:
            unint64_t v16 = 0x100000021;
            goto LABEL_1015;
          case 0x71655F504F5F5744:
            unint64_t v16 = 0x100000029;
            goto LABEL_1015;
          case 0x65675F504F5F5744:
            unint64_t v16 = 0x10000002ALL;
            goto LABEL_1015;
          case 0x74675F504F5F5744:
            unint64_t v16 = 0x10000002BLL;
            goto LABEL_1015;
          case 0x656C5F504F5F5744:
            unint64_t v16 = 0x10000002CLL;
            goto LABEL_1015;
          case 0x746C5F504F5F5744:
            unint64_t v16 = 0x10000002DLL;
            goto LABEL_1015;
          case 0x656E5F504F5F5744:
            unint64_t v16 = 0x10000002ELL;
            goto LABEL_1015;
        }
        goto LABEL_875;
      }
      if (a2 != 17) {
        char v143 = 1;
      }
      if (v143)
      {
        if (v25)
        {
          switch(a2)
          {
            case 11:
              goto LABEL_330;
            case 13:
LABEL_652:
              if (*(void *)a1 != 0x6F635F504F5F5744 || *(void *)(a1 + 5) != 0x747265766E6F635FLL) {
                goto LABEL_856;
              }
              unint64_t v16 = 0x1000000A8;
              break;
            case 14:
              if (*(void *)a1 != 0x61635F504F5F5744 || *(void *)(a1 + 6) != 0x6665725F6C6C6163)
              {
                int v172 = 1;
                goto LABEL_876;
              }
              unint64_t v16 = 0x10000009ALL;
              break;
            case 15:
              uint64_t v182 = *(void *)a1 ^ 0x69625F504F5F5744 | *(void *)(a1 + 7) ^ 0x65636569705F7469;
              uint64_t v183 = 0x10000009DLL;
              goto LABEL_858;
            case 16:
              if (*(void *)a1 == 0x65645F504F5F5744 && *(void *)(a1 + 8) == 0x657A69735F666572)
              {
                unint64_t v16 = 0x100000094;
              }
              else if (*(void *)a1 == 0x6F635F504F5F5744 && *(void *)(a1 + 8) == 0x657079745F74736ELL)
              {
                unint64_t v16 = 0x1000000A4;
              }
              else if (*(void *)a1 == 0x65645F504F5F5744 && *(void *)(a1 + 8) == 0x657079745F666572)
              {
                unint64_t v16 = 0x1000000A6;
              }
              break;
            case 17:
              goto LABEL_594;
            case 18:
LABEL_712:
              if (*(void *)a1 == 0x50485F504F5F5744
                && *(void *)(a1 + 8) == 0x736E6F63746C665FLL
                && *(_WORD *)(a1 + 16) == 13428)
              {
                unint64_t v16 = 0x1000000E2;
              }
              else if (*(void *)a1 == 0x50485F504F5F5744 {
                     && *(void *)(a1 + 8) == 0x736E6F63746C665FLL
              }
                     && *(_WORD *)(a1 + 16) == 14452)
              {
                unint64_t v16 = 0x1000000E3;
              }
              else if (*(void *)a1 == 0x50485F504F5F5744 {
                     && *(void *)(a1 + 8) == 0x6E61725F646F6D5FLL
              }
                     && *(_WORD *)(a1 + 16) == 25959)
              {
                unint64_t v16 = 0x1000000E4;
              }
              else
              {
                if (*(void *)a1 != 0x50415F504F5F5744
                  || *(void *)(a1 + 8) != 0x6E696E755F454C50
                  || *(_WORD *)(a1 + 16) != 29801)
                {
                  int v172 = 0;
                  int v173 = 1;
                  goto LABEL_886;
                }
                unint64_t v16 = 0x1000000F0;
              }
              break;
            case 20:
              if (*(void *)a1 == 0x61635F504F5F5744
                && *(void *)(a1 + 8) == 0x656D6172665F6C6CLL
                && *(_DWORD *)(a1 + 16) == 1634100063)
              {
                unint64_t v16 = 0x10000009CLL;
              }
              else if (*(void *)a1 == 0x6D695F504F5F5744 {
                     && *(void *)(a1 + 8) == 0x765F746963696C70
              }
                     && *(_DWORD *)(a1 + 16) == 1702194273)
              {
                unint64_t v16 = 0x10000009ELL;
              }
              else if (*(void *)a1 == 0x50485F504F5F5744 {
                     && *(void *)(a1 + 8) == 0x725F646F6D6E755FLL
              }
                     && *(_DWORD *)(a1 + 16) == 1701277281)
              {
                unint64_t v16 = 0x1000000E5;
              }
              else
              {
                if (*(void *)a1 != 0x4E475F504F5F5744
                  || *(void *)(a1 + 8) != 0x695F726464615F55
                  || *(_DWORD *)(a1 + 16) != 2019910766)
                {
                  int v173 = 0;
                  int v172 = 0;
                  goto LABEL_896;
                }
                unint64_t v16 = 0x1000000FBLL;
              }
              break;
            case 21:
LABEL_753:
              if (*(void *)a1 != 0x4E495F504F5F5744
                || *(void *)(a1 + 8) != 0x5F7469625F4C4554
                || *(void *)(a1 + 13) != 0x65636569705F7469)
              {
                goto LABEL_875;
              }
              unint64_t v16 = 0x1000000E8;
              break;
            case 22:
              if (*(void *)a1 == 0x6F665F504F5F5744
                && *(void *)(a1 + 8) == 0x615F736C745F6D72
                && *(void *)(a1 + 14) == 0x737365726464615FLL)
              {
                unint64_t v16 = 0x10000009BLL;
              }
              else
              {
                switch(a2)
                {
                  case 18:
                    goto LABEL_712;
                  case 19:
                  case 20:
                  case 23:
                  case 24:
                  case 25:
                    goto LABEL_840;
                  case 21:
                    goto LABEL_753;
                  case 22:
                    if (*(void *)a1 != 0x6D695F504F5F5744
                      || *(void *)(a1 + 8) != 0x705F746963696C70
                      || *(void *)(a1 + 14) != 0x7265746E696F705FLL)
                    {
                      goto LABEL_875;
                    }
                    unint64_t v16 = 0x1000000A0;
                    break;
                  case 26:
                    goto LABEL_741;
                  default:
                    if (a2 != 13) {
                      goto LABEL_840;
                    }
                    goto LABEL_652;
                }
              }
              break;
            case 25:
              uint64_t v182 = *(void *)a1 ^ 0x75705F504F5F5744 | *(void *)(a1 + 8) ^ 0x63656A626F5F6873 | *(void *)(a1 + 16) ^ 0x7365726464615F74 | *(unsigned __int8 *)(a1 + 24) ^ 0x73;
              uint64_t v183 = 0x100000097;
              goto LABEL_858;
            case 26:
LABEL_741:
              if (*(void *)a1 != 0x4E475F504F5F5744
                || *(void *)(a1 + 8) != 0x745F687375705F55
                || *(void *)(a1 + 16) != 0x65726464615F736CLL
                || *(_WORD *)(a1 + 24) != 29555)
              {
                goto LABEL_856;
              }
              unint64_t v16 = 0x1000000E0;
              break;
            default:
              goto LABEL_840;
          }
        }
      }
      else if (*(void *)a1 == 0x6C705F504F5F5744 {
             && *(void *)(a1 + 8) == 0x736E6F63755F7375
      }
             && *(unsigned char *)(a1 + 16) == 116)
      {
        unint64_t v16 = 0x100000023;
      }
      else
      {
LABEL_594:
        if (*(void *)a1 == 0x64785F504F5F5744
          && *(void *)(a1 + 8) == 0x7A69735F66657265
          && *(unsigned char *)(a1 + 16) == 101)
        {
          unint64_t v16 = 0x100000095;
        }
        else if (*(void *)a1 == 0x74735F504F5F5744 {
               && *(void *)(a1 + 8) == 0x756C61765F6B6361
        }
               && *(unsigned char *)(a1 + 16) == 101)
        {
          unint64_t v16 = 0x10000009FLL;
        }
        else if (*(void *)a1 == 0x6E655F504F5F5744 {
               && *(void *)(a1 + 8) == 0x756C61765F797274
        }
               && *(unsigned char *)(a1 + 16) == 101)
        {
          unint64_t v16 = 0x1000000A3;
        }
        else if (*(void *)a1 == 0x65725F504F5F5744 {
               && *(void *)(a1 + 8) == 0x7079745F6C617667
        }
               && *(unsigned char *)(a1 + 16) == 101)
        {
          unint64_t v16 = 0x1000000A5;
        }
        else if (*(void *)a1 == 0x64785F504F5F5744 {
               && *(void *)(a1 + 8) == 0x7079745F66657265
        }
               && *(unsigned char *)(a1 + 16) == 101)
        {
          unint64_t v16 = 0x1000000A7;
        }
        else if (*(void *)a1 == 0x65725F504F5F5744 {
               && *(void *)(a1 + 8) == 0x6572707265746E69
        }
               && *(unsigned char *)(a1 + 16) == 116)
        {
          unint64_t v16 = 0x1000000A9;
        }
        else if (*(void *)a1 == 0x50485F504F5F5744 {
               && *(void *)(a1 + 8) == 0x756C61765F73695FLL
        }
               && *(unsigned char *)(a1 + 16) == 101)
        {
          unint64_t v16 = 0x1000000E1;
        }
      }
LABEL_1015:
      if ((v16 & 0x300000000) != 0) {
        return v16;
      }
      else {
        return 0;
      }
    default:
      unint64_t v16 = 0;
      BOOL v25 = 1;
      goto LABEL_324;
  }
}

uint64_t llvm::dwarf::OperationVersion(int a1)
{
  if ((a1 - 3) > 0xA6) {
    return 0;
  }
  else {
    return dword_1CFAC5138[a1 - 3];
  }
}

uint64_t llvm::dwarf::OperationVendor(int a1)
{
  if ((a1 - 224) > 0x1C) {
    return 0;
  }
  else {
    return dword_1CFAC53D4[a1 - 224];
  }
}

uint64_t llvm::dwarf::getAttributeEncoding(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0;
  BOOL v3 = 1;
  switch(a2)
  {
    case 12:
      if (*(void *)a1 == 0x665F4554415F5744 && *(_DWORD *)(a1 + 8) == 1952542572)
      {
        unint64_t v2 = 0x100000004;
      }
      else
      {
        if (*(void *)a1 != 0x415F4554415F5744 || *(_DWORD *)(a1 + 8) != 1229538131)
        {
          unint64_t v2 = 0;
          goto LABEL_145;
        }
        unint64_t v2 = 0x100000012;
      }
      goto LABEL_171;
    case 13:
      if (*(void *)a1 != 0x735F4554415F5744 || *(void *)(a1 + 5) != 0x64656E6769735F45)
      {
        uint64_t v7 = *(void *)a1 ^ 0x655F4554415F5744 | *(void *)(a1 + 5) ^ 0x6465746964655F45;
        uint64_t v8 = 0x10000000CLL;
        goto LABEL_69;
      }
      unint64_t v2 = 0x100000005;
      goto LABEL_171;
    case 14:
      if (*(void *)a1 != 0x615F4554415F5744 || *(void *)(a1 + 6) != 0x737365726464615FLL)
      {
        if (*(void *)a1 ^ 0x625F4554415F5744 | *(void *)(a1 + 6) ^ 0x6E61656C6F6F625FLL) {
          unint64_t v2 = 0;
        }
        else {
          unint64_t v2 = 0x100000002;
        }
        goto LABEL_80;
      }
      unint64_t v2 = 0x100000001;
      goto LABEL_171;
    case 15:
      if (*(void *)a1 != 0x755F4554415F5744 || *(void *)(a1 + 7) != 0x64656E6769736E75) {
        goto LABEL_79;
      }
      unint64_t v2 = 0x100000007;
      goto LABEL_171;
    case 18:
      if (*(void *)a1 != 0x735F4554415F5744
        || *(void *)(a1 + 8) != 0x68635F64656E6769
        || *(_WORD *)(a1 + 16) != 29281)
      {
        goto LABEL_79;
      }
      unint64_t v2 = 0x100000006;
      goto LABEL_171;
    case 20:
      if (*(void *)a1 == 0x635F4554415F5744
        && *(void *)(a1 + 8) == 0x665F78656C706D6FLL
        && *(_DWORD *)(a1 + 16) == 1952542572)
      {
        unint64_t v2 = 0x100000003;
      }
      else
      {
        if (*(void *)a1 != 0x755F4554415F5744
          || *(void *)(a1 + 8) != 0x5F64656E6769736ELL
          || *(_DWORD *)(a1 + 16) != 1918986339)
        {
          goto LABEL_79;
        }
        unint64_t v2 = 0x100000008;
      }
      goto LABEL_171;
    case 21:
      if (*(void *)a1 == 0x705F4554415F5744
        && *(void *)(a1 + 8) == 0x65645F64656B6361
        && *(void *)(a1 + 13) == 0x6C616D696365645FLL)
      {
        unint64_t v2 = 0x10000000ALL;
      }
      else if (*(void *)a1 == 0x6E5F4554415F5744 {
             && *(void *)(a1 + 8) == 0x735F636972656D75
      }
             && *(void *)(a1 + 13) == 0x676E697274735F63)
      {
        unint64_t v2 = 0x10000000BLL;
      }
      else
      {
        uint64_t v7 = *(void *)a1 ^ 0x755F4554415F5744 | *(void *)(a1 + 8) ^ 0x5F64656E6769736ELL | *(void *)(a1 + 13) ^ 0x64657869665F6465;
        uint64_t v8 = 0x10000000ELL;
LABEL_69:
        if (v7) {
          unint64_t v2 = 0;
        }
        else {
          unint64_t v2 = v8;
        }
      }
      goto LABEL_171;
    case 22:
      if (*(void *)a1 != 0x695F4554415F5744
        || *(void *)(a1 + 8) != 0x7972616E6967616DLL
        || *(void *)(a1 + 14) != 0x74616F6C665F7972)
      {
LABEL_79:
        unint64_t v2 = 0;
LABEL_80:
        BOOL v3 = HIDWORD(v2) == 0;
        goto LABEL_81;
      }
      unint64_t v2 = 0x100000009;
      goto LABEL_171;
    default:
LABEL_81:
      if (a2 == 19 && v3)
      {
        if (*(void *)a1 == 0x735F4554415F5744
          && *(void *)(a1 + 8) == 0x69665F64656E6769
          && *(void *)(a1 + 11) == 0x64657869665F6465)
        {
          unint64_t v2 = 0x10000000DLL;
        }
        goto LABEL_171;
      }
      char v25 = !v3;
      char v26 = a2 != 20 || !v3;
      if ((v26 & 1) == 0)
      {
        if (*(void *)a1 == 0x645F4554415F5744
          && *(void *)(a1 + 8) == 0x665F6C616D696365
          && *(_DWORD *)(a1 + 16) == 1952542572)
        {
          unint64_t v2 = 0x10000000FLL;
        }
        goto LABEL_171;
      }
      if (a2 != 10) {
        char v25 = 1;
      }
      if ((v25 & 1) == 0)
      {
        if (*(void *)a1 == 0x555F4554415F5744 && *(_WORD *)(a1 + 8) == 18004)
        {
          unint64_t v2 = 0x100000010;
        }
        else if (*(void *)a1 == 0x555F4554415F5744 && *(_WORD *)(a1 + 8) == 21315)
        {
          unint64_t v2 = 0x100000011;
        }
        goto LABEL_171;
      }
      char v31 = !v3;
      if (a2 != 23) {
        char v31 = 1;
      }
      if ((v31 & 1) == 0)
      {
        if (*(void *)a1 == 0x485F4554415F5744
          && *(void *)(a1 + 8) == 0x656C706D6F635F50
          && *(void *)(a1 + 15) == 0x74616F6C665F7865)
        {
          unint64_t v2 = 0x100000081;
          goto LABEL_171;
        }
LABEL_145:
        BOOL v35 = (v2 & 0x100000000) == 0;
        goto LABEL_146;
      }
      uint64_t v34 = v2 & 0x100000000;
      BOOL v35 = (v2 & 0x100000000) == 0;
      if (a2 == 18 && !v34)
      {
        if (*(void *)a1 == 0x485F4554415F5744
          && *(void *)(a1 + 8) == 0x3174616F6C665F50
          && *(_WORD *)(a1 + 16) == 14386)
        {
          unint64_t v2 = 0x100000082;
          goto LABEL_171;
        }
        goto LABEL_145;
      }
      if (a2 != 26 || v34)
      {
LABEL_146:
        if (a2 == 22 && v35)
        {
          if (*(void *)a1 == 0x485F4554415F5744
            && *(void *)(a1 + 8) == 0x6874616F6C665F50
            && *(void *)(a1 + 14) == 0x6C65746E69706874)
          {
            unint64_t v2 = 0x100000084;
          }
          goto LABEL_171;
        }
        char v40 = !v35;
        if (a2 == 27) {
          char v41 = v40;
        }
        else {
          char v41 = 1;
        }
        if (v41)
        {
          if (a2 != 28) {
            char v40 = 1;
          }
          if (v40) {
            goto LABEL_171;
          }
          uint64_t v42 = *(void *)a1 ^ 0x485F4554415F5744 | *(void *)(a1 + 8) ^ 0x6E6967616D695F50 | *(void *)(a1 + 16) ^ 0x616F6C665F797261 | *(unsigned int *)(a1 + 24) ^ 0x38323174;
          uint64_t v43 = 0x100000086;
        }
        else
        {
          uint64_t v42 = *(void *)a1 ^ 0x485F4554415F5744 | *(void *)(a1 + 8) ^ 0x6E6967616D695F50 | *(void *)(a1 + 16) ^ 0x616F6C665F797261 | *(void *)(a1 + 19) ^ 0x303974616F6C665FLL;
          uint64_t v43 = 0x100000085;
        }
        if (!v42) {
          unint64_t v2 = v43;
        }
        goto LABEL_171;
      }
      if (*(void *)a1 == 0x485F4554415F5744
        && *(void *)(a1 + 8) == 0x656C706D6F635F50
        && *(void *)(a1 + 16) == 0x3174616F6C665F78
        && *(_WORD *)(a1 + 24) == 14386)
      {
        unint64_t v2 = 0x100000083;
      }
LABEL_171:
      if ((v2 & 0x300000000) != 0) {
        return v2;
      }
      else {
        return 0;
      }
  }
}

uint64_t llvm::dwarf::AttributeEncodingVersion(int a1)
{
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
LABEL_4:
      uint64_t result = 2;
      break;
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      uint64_t result = 3;
      break;
    case 16:
      uint64_t result = 4;
      break;
    case 17:
    case 18:
      uint64_t result = 5;
      break;
    default:
      switch(a1)
      {
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
          goto LABEL_4;
        default:
          uint64_t result = 0;
          break;
      }
      break;
  }
  return result;
}

uint64_t llvm::dwarf::AttributeEncodingVendor(char a1)
{
  if ((a1 + 127) >= 6u) {
    return 0;
  }
  else {
    return 12;
  }
}

char *llvm::dwarf::DecimalSignString(llvm::dwarf *this)
{
  if ((this - 1) > 4) {
    return 0;
  }
  else {
    return off_1E682E850[(int)this - 1];
  }
}

const char *llvm::dwarf::EndianityString(llvm::dwarf *this)
{
  int v1 = "DW_END_little";
  unint64_t v2 = "DW_END_lo_user";
  BOOL v3 = "DW_END_hi_user";
  if (this != 255) {
    BOOL v3 = 0;
  }
  if (this != 64) {
    unint64_t v2 = v3;
  }
  if (this != 2) {
    int v1 = v2;
  }
  int v4 = "DW_END_default";
  unsigned int v5 = "DW_END_big";
  if (this != 1) {
    unsigned int v5 = 0;
  }
  if (this) {
    int v4 = v5;
  }
  if ((int)this <= 1) {
    return v4;
  }
  else {
    return v1;
  }
}

char *llvm::dwarf::DefaultedMemberString(llvm::dwarf *this)
{
  if (this > 2) {
    return 0;
  }
  else {
    return off_1E682E8D0[(int)this];
  }
}

char *llvm::dwarf::VisibilityString(llvm::dwarf *this)
{
  if ((this - 1) > 2) {
    return 0;
  }
  else {
    return off_1E682E878[(int)this - 1];
  }
}

char *llvm::dwarf::VirtualityString(llvm::dwarf *this)
{
  if (this > 2) {
    return 0;
  }
  else {
    return off_1E682E838[(int)this];
  }
}

uint64_t llvm::dwarf::getVirtuality(uint64_t a1, uint64_t a2)
{
  if (a2 == 26)
  {
    if (*(void *)a1 == 0x55545249565F5744
      && *(void *)(a1 + 8) == 0x75705F5954494C41
      && *(void *)(a1 + 16) == 0x75747269765F6572
      && *(_WORD *)(a1 + 24) == 27745)
    {
      return 2;
    }
    return 0xFFFFFFFFLL;
  }
  if (a2 != 21)
  {
    if (a2 == 18)
    {
      BOOL v2 = *(void *)a1 == 0x55545249565F5744 && *(void *)(a1 + 8) == 0x6F6E5F5954494C41;
      if (v2 && *(_WORD *)(a1 + 16) == 25966) {
        return 0;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (*(void *)a1 != 0x55545249565F5744
    || *(void *)(a1 + 8) != 0x69765F5954494C41
    || *(void *)(a1 + 13) != 0x6C6175747269765FLL)
  {
    return 0xFFFFFFFFLL;
  }
  return 1;
}

const char *llvm::dwarf::LanguageString(llvm::dwarf *this)
{
  if (this == 4) {
    return "DW_LANG_C_plus_plus";
  }
  int v2 = (int)this;
  if ((int)this > 0x8000)
  {
    BOOL v3 = "DW_LANG_BORLAND_Delphi";
    if (this != 45056) {
      BOOL v3 = 0;
    }
    if (this == 36439) {
      int v4 = "DW_LANG_GOOGLE_RenderScript";
    }
    else {
      int v4 = v3;
    }
    if (this == 32769) {
      return "DW_LANG_Mips_Assembler";
    }
    else {
      return v4;
    }
  }
  else
  {
    uint64_t result = 0;
    switch(v2)
    {
      case 1:
        uint64_t result = "DW_LANG_C89";
        break;
      case 2:
        uint64_t result = "DW_LANG_C";
        break;
      case 3:
        uint64_t result = "DW_LANG_Ada83";
        break;
      case 5:
        uint64_t result = "DW_LANG_Cobol74";
        break;
      case 6:
        uint64_t result = "DW_LANG_Cobol85";
        break;
      case 7:
        uint64_t result = "DW_LANG_Fortran77";
        break;
      case 8:
        uint64_t result = "DW_LANG_Fortran90";
        break;
      case 9:
        uint64_t result = "DW_LANG_Pascal83";
        break;
      case 10:
        uint64_t result = "DW_LANG_Modula2";
        break;
      case 11:
        uint64_t result = "DW_LANG_Java";
        break;
      case 12:
        uint64_t result = "DW_LANG_C99";
        break;
      case 13:
        uint64_t result = "DW_LANG_Ada95";
        break;
      case 14:
        uint64_t result = "DW_LANG_Fortran95";
        break;
      case 15:
        uint64_t result = "DW_LANG_PLI";
        break;
      case 16:
        uint64_t result = "DW_LANG_ObjC";
        break;
      case 17:
        uint64_t result = "DW_LANG_ObjC_plus_plus";
        break;
      case 18:
        uint64_t result = "DW_LANG_UPC";
        break;
      case 19:
        uint64_t result = "DW_LANG_D";
        break;
      case 20:
        uint64_t result = "DW_LANG_Python";
        break;
      case 21:
        uint64_t result = "DW_LANG_OpenCL";
        break;
      case 22:
        uint64_t result = "DW_LANG_Go";
        break;
      case 23:
        uint64_t result = "DW_LANG_Modula3";
        break;
      case 24:
        uint64_t result = "DW_LANG_Haskell";
        break;
      case 25:
        uint64_t result = "DW_LANG_C_plus_plus_03";
        break;
      case 26:
        uint64_t result = "DW_LANG_C_plus_plus_11";
        break;
      case 27:
        uint64_t result = "DW_LANG_OCaml";
        break;
      case 28:
        uint64_t result = "DW_LANG_Rust";
        break;
      case 29:
        uint64_t result = "DW_LANG_C11";
        break;
      case 30:
        uint64_t result = "DW_LANG_Swift";
        break;
      case 31:
        uint64_t result = "DW_LANG_Julia";
        break;
      case 32:
        uint64_t result = "DW_LANG_Dylan";
        break;
      case 33:
        uint64_t result = "DW_LANG_C_plus_plus_14";
        break;
      case 34:
        uint64_t result = "DW_LANG_Fortran03";
        break;
      case 35:
        uint64_t result = "DW_LANG_Fortran08";
        break;
      case 36:
        uint64_t result = "DW_LANG_RenderScript";
        break;
      case 37:
        uint64_t result = "DW_LANG_BLISS";
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t llvm::dwarf::getLanguage(uint64_t a1, uint64_t a2)
{
  if (a2 == 11)
  {
    if (*(void *)a1 == 0x5F474E414C5F5744 && *(void *)(a1 + 3) == 0x3938435F474E414CLL)
    {
      uint64_t v8 = 0x100000001;
      goto LABEL_231;
    }
    if (*(void *)a1 == 0x5F474E414C5F5744 && *(void *)(a1 + 3) == 0x3939435F474E414CLL)
    {
      uint64_t v8 = 0x10000000CLL;
      goto LABEL_231;
    }
    if (*(void *)a1 == 0x5F474E414C5F5744 && *(void *)(a1 + 3) == 0x494C505F474E414CLL)
    {
      uint64_t v8 = 0x10000000FLL;
      goto LABEL_231;
    }
    if (*(void *)a1 == 0x5F474E414C5F5744 && *(void *)(a1 + 3) == 0x4350555F474E414CLL)
    {
      uint64_t v8 = 0x100000012;
      goto LABEL_231;
    }
    if (*(void *)a1 == 0x5F474E414C5F5744 && *(void *)(a1 + 3) == 0x3131435F474E414CLL)
    {
      uint64_t v8 = 0x10000001DLL;
      goto LABEL_231;
    }
    goto LABEL_22;
  }
  uint64_t v8 = 0x10000000ALL;
  switch(__ROR8__(a2 - 9, 1))
  {
    case 0:
      if (*(void *)a1 != 0x5F474E414C5F5744 || *(unsigned char *)(a1 + 8) != 67) {
        goto LABEL_28;
      }
      int v10 = 0;
      uint64_t v7 = 0x100000002;
      goto LABEL_100;
    case 2:
      if (*(void *)a1 != 0x5F474E414C5F5744 || *(void *)(a1 + 5) != 0x33386164415F474ELL) {
        goto LABEL_41;
      }
      uint64_t v8 = 0x100000003;
      goto LABEL_231;
    case 3:
      if (*(void *)a1 == 0x5F474E414C5F5744 && *(void *)(a1 + 7) == 0x34376C6F626F435FLL)
      {
        uint64_t v8 = 0x100000005;
        goto LABEL_231;
      }
      if (*(void *)a1 == 0x5F474E414C5F5744 && *(void *)(a1 + 7) == 0x35386C6F626F435FLL)
      {
        uint64_t v8 = 0x100000006;
        goto LABEL_231;
      }
      if (*(void *)a1 == 0x5F474E414C5F5744 && *(void *)(a1 + 7) == 0x32616C75646F4D5FLL) {
        goto LABEL_231;
      }
      if (a2 == 17) {
        goto LABEL_46;
      }
      if (a2 != 13)
      {
        if (a2 == 12)
        {
LABEL_29:
          if (*(void *)a1 == 0x5F474E414C5F5744 && *(_DWORD *)(a1 + 8) == 1635148106)
          {
            uint64_t v8 = 0x10000000BLL;
            goto LABEL_231;
          }
        }
        goto LABEL_99;
      }
LABEL_41:
      if (*(void *)a1 == 0x5F474E414C5F5744 && *(void *)(a1 + 5) == 0x35396164415F474ELL)
      {
        uint64_t v8 = 0x10000000DLL;
        goto LABEL_231;
      }
LABEL_45:
      if (a2 != 17)
      {
LABEL_99:
        uint64_t v7 = 0;
        int v10 = 1;
LABEL_100:
        BOOL v24 = a2 == 12;
        if (a2 == 12 && v10)
        {
          if (*(void *)a1 == 0x5F474E414C5F5744 && *(_DWORD *)(a1 + 8) == 1131045455)
          {
            uint64_t v8 = 0x100000010;
            goto LABEL_231;
          }
          BOOL v24 = 1;
LABEL_161:
          int v10 = 1;
          goto LABEL_162;
        }
        char v26 = v10 ^ 1;
        if (a2 == 22) {
          char v27 = v10 ^ 1;
        }
        else {
          char v27 = 1;
        }
        if ((v27 & 1) == 0)
        {
          if (*(void *)a1 == 0x5F474E414C5F5744
            && *(void *)(a1 + 8) == 0x756C705F436A624FLL
            && *(void *)(a1 + 14) == 0x73756C705F73756CLL)
          {
            uint64_t v8 = 0x100000011;
            goto LABEL_231;
          }
          if (*(void *)a1 == 0x5F474E414C5F5744
            && *(void *)(a1 + 8) == 0x705F73756C705F43
            && *(void *)(a1 + 14) == 0x33305F73756C705FLL)
          {
            uint64_t v8 = 0x100000019;
            goto LABEL_231;
          }
          if (*(void *)a1 == 0x5F474E414C5F5744
            && *(void *)(a1 + 8) == 0x705F73756C705F43
            && *(void *)(a1 + 14) == 0x31315F73756C705FLL)
          {
            uint64_t v8 = 0x10000001ALL;
            goto LABEL_231;
          }
          if (*(void *)a1 == 0x5F474E414C5F5744
            && *(void *)(a1 + 8) == 0x705F73756C705F43
            && *(void *)(a1 + 14) == 0x34315F73756C705FLL)
          {
            uint64_t v8 = 0x100000021;
            goto LABEL_231;
          }
          if (*(void *)a1 == 0x5F474E414C5F5744
            && *(void *)(a1 + 8) == 0x7373415F7370694DLL
            && *(void *)(a1 + 14) == 0x72656C626D657373)
          {
            uint64_t v8 = 0x100008001;
            goto LABEL_231;
          }
          BOOL v38 = (*(void *)a1 ^ 0x5F474E414C5F5744 | *(void *)(a1 + 8) ^ 0x5F444E414C524F42 | *(void *)(a1 + 14) ^ 0x6968706C65445F44) == 0;
          uint64_t v8 = 0x10000B000;
          goto LABEL_176;
        }
        if (a2 != 9) {
          char v26 = 1;
        }
        if ((v26 & 1) == 0)
        {
          if (*(void *)a1 == 0x5F474E414C5F5744 && *(unsigned char *)(a1 + 8) == 68)
          {
            uint64_t v8 = 0x100000013;
            goto LABEL_231;
          }
          goto LABEL_230;
        }
        char v49 = v10 ^ 1;
        if (a2 == 14) {
          char v50 = v10 ^ 1;
        }
        else {
          char v50 = 1;
        }
        if ((v50 & 1) == 0)
        {
          if (*(void *)a1 == 0x5F474E414C5F5744 && *(void *)(a1 + 6) == 0x6E6F687479505F47)
          {
            uint64_t v8 = 0x100000014;
            goto LABEL_231;
          }
          if (*(void *)a1 == 0x5F474E414C5F5744 && *(void *)(a1 + 6) == 0x4C436E65704F5F47)
          {
            uint64_t v8 = 0x100000015;
            goto LABEL_231;
          }
          goto LABEL_230;
        }
        if (a2 != 10) {
          char v49 = 1;
        }
        if ((v49 & 1) == 0)
        {
          if (*(void *)a1 == 0x5F474E414C5F5744 && *(_WORD *)(a1 + 8) == 28487)
          {
            uint64_t v8 = 0x100000016;
            goto LABEL_231;
          }
          goto LABEL_230;
        }
        char v56 = v10 ^ 1;
        if (a2 == 15) {
          char v57 = v10 ^ 1;
        }
        else {
          char v57 = 1;
        }
        if (v57)
        {
          if (a2 != 13) {
            char v56 = 1;
          }
          if (v56)
          {
LABEL_162:
            if (v24 && v10)
            {
              if (*(void *)a1 == 0x5F474E414C5F5744 && *(_DWORD *)(a1 + 8) == 1953723730)
              {
                uint64_t v8 = 0x10000001CLL;
                goto LABEL_231;
              }
              goto LABEL_230;
            }
            char v42 = v10 ^ 1;
            if (a2 == 20) {
              char v43 = v42;
            }
            else {
              char v43 = 1;
            }
            if (v43)
            {
              if (a2 == 27) {
                char v53 = v42;
              }
              else {
                char v53 = 1;
              }
              if ((v53 & 1) == 0)
              {
                if (*(void *)a1 ^ 0x5F474E414C5F5744 | *(void *)(a1 + 8) ^ 0x525F454C474F4F47 | *(void *)(a1 + 16) ^ 0x7263537265646E65 | *(void *)(a1 + 19) ^ 0x7470697263537265) {
                  uint64_t v8 = v7;
                }
                else {
                  uint64_t v8 = 0x100008E57;
                }
                goto LABEL_231;
              }
              goto LABEL_230;
            }
            uint64_t v44 = *(void *)a1 ^ 0x5F474E414C5F5744 | *(void *)(a1 + 8) ^ 0x63537265646E6552 | *(unsigned int *)(a1 + 16) ^ 0x74706972;
            uint64_t v8 = 0x100000024;
            goto LABEL_175;
          }
          if (*(void *)a1 == 0x5F474E414C5F5744 && *(void *)(a1 + 5) == 0x6C6D61434F5F474ELL)
          {
            uint64_t v8 = 0x10000001BLL;
            goto LABEL_231;
          }
          if (*(void *)a1 == 0x5F474E414C5F5744 && *(void *)(a1 + 5) == 0x74666977535F474ELL)
          {
            uint64_t v8 = 0x10000001ELL;
            goto LABEL_231;
          }
          if (*(void *)a1 == 0x5F474E414C5F5744 && *(void *)(a1 + 5) == 0x61696C754A5F474ELL)
          {
            uint64_t v8 = 0x10000001FLL;
            goto LABEL_231;
          }
          if (*(void *)a1 == 0x5F474E414C5F5744 && *(void *)(a1 + 5) == 0x6E616C79445F474ELL)
          {
            uint64_t v8 = 0x100000020;
            goto LABEL_231;
          }
          uint64_t v44 = *(void *)a1 ^ 0x5F474E414C5F5744 | *(void *)(a1 + 5) ^ 0x5353494C425F474ELL;
          uint64_t v8 = 0x100000025;
        }
        else
        {
          if (*(void *)a1 == 0x5F474E414C5F5744 && *(void *)(a1 + 7) == 0x33616C75646F4D5FLL)
          {
            uint64_t v8 = 0x100000017;
            goto LABEL_231;
          }
          uint64_t v44 = *(void *)a1 ^ 0x5F474E414C5F5744 | *(void *)(a1 + 7) ^ 0x6C6C656B7361485FLL;
          uint64_t v8 = 0x100000018;
        }
LABEL_175:
        BOOL v38 = v44 == 0;
LABEL_176:
        if (!v38) {
          uint64_t v8 = v7;
        }
        goto LABEL_231;
      }
LABEL_46:
      if (*(void *)a1 == 0x5F474E414C5F5744
        && *(void *)(a1 + 8) == 0x396E617274726F46
        && *(unsigned char *)(a1 + 16) == 53)
      {
        uint64_t v8 = 0x10000000ELL;
        goto LABEL_231;
      }
      if (*(void *)a1 == 0x5F474E414C5F5744
        && *(void *)(a1 + 8) == 0x306E617274726F46
        && *(unsigned char *)(a1 + 16) == 51)
      {
        uint64_t v8 = 0x100000022;
        goto LABEL_231;
      }
      if (*(void *)a1 == 0x5F474E414C5F5744
        && *(void *)(a1 + 8) == 0x306E617274726F46
        && *(unsigned char *)(a1 + 16) == 56)
      {
        uint64_t v8 = 0x100000023;
        goto LABEL_231;
      }
LABEL_22:
      uint64_t v7 = 0;
LABEL_230:
      uint64_t v8 = v7;
LABEL_231:
      if ((v8 & 0xFF00000000) != 0) {
        return v8;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v8 = 0x100000004;
      if (*(void *)a1 ^ 0x5F474E414C5F5744 | *(void *)(a1 + 8) ^ 0x705F73756C705F43 | *(void *)(a1 + 11) ^ 0x73756C705F73756CLL) {
        uint64_t v8 = 0;
      }
      goto LABEL_231;
    default:
LABEL_28:
      uint64_t v7 = 0;
      int v10 = 1;
      switch(a2)
      {
        case 12:
          goto LABEL_29;
        case 13:
          goto LABEL_41;
        case 15:
          if (*(void *)a1 != 0x5F474E414C5F5744 || *(void *)(a1 + 7) != 0x32616C75646F4D5FLL) {
            goto LABEL_99;
          }
          goto LABEL_231;
        case 16:
          if (*(void *)a1 != 0x5F474E414C5F5744 || *(void *)(a1 + 8) != 0x33386C6163736150)
          {
            BOOL v24 = 0;
            uint64_t v7 = 0;
            goto LABEL_161;
          }
          uint64_t v8 = 0x100000009;
          goto LABEL_231;
        case 17:
          if (*(void *)a1 == 0x5F474E414C5F5744
            && *(void *)(a1 + 8) == 0x376E617274726F46
            && *(unsigned char *)(a1 + 16) == 55)
          {
            uint64_t v8 = 0x100000007;
            goto LABEL_231;
          }
          if (*(void *)a1 == 0x5F474E414C5F5744
            && *(void *)(a1 + 8) == 0x396E617274726F46
            && *(unsigned char *)(a1 + 16) == 48)
          {
            uint64_t v8 = 0x100000008;
            goto LABEL_231;
          }
          break;
        default:
          goto LABEL_100;
      }
      goto LABEL_45;
  }
}

uint64_t llvm::dwarf::LanguageVersion(int a1)
{
  if ((a1 - 1) > 0x24) {
    return 0;
  }
  else {
    return dword_1CFAC5448[a1 - 1];
  }
}

uint64_t llvm::dwarf::LanguageVendor(int a1)
{
  if (a1 == 32769) {
    int v1 = 6;
  }
  else {
    int v1 = 0;
  }
  if (a1 == 36439) {
    unsigned int v2 = 4;
  }
  else {
    unsigned int v2 = v1;
  }
  if (a1 == 45056) {
    return 2;
  }
  else {
    return v2;
  }
}

char *llvm::dwarf::CaseString(llvm::dwarf *this)
{
  if (this > 3) {
    return 0;
  }
  else {
    return off_1E682E890[(int)this];
  }
}

uint64_t llvm::dwarf::getCallingConvention(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0;
  BOOL v3 = 1;
  switch(a2)
  {
    case 12:
      if (*(void *)a1 == 0x6F6E5F43435F5744 && *(_DWORD *)(a1 + 8) == 1818324338)
      {
        unint64_t v2 = 0x100000001;
      }
      else if (*(void *)a1 ^ 0x6F6E5F43435F5744 | *(unsigned int *)(a1 + 8) ^ 0x6C6C6163)
      {
        unint64_t v2 = 0;
      }
      else
      {
        unint64_t v2 = 0x100000003;
      }
      break;
    case 13:
      if (*(void *)a1 ^ 0x72705F43435F5744 | *(void *)(a1 + 5) ^ 0x6D6172676F72705FLL) {
        unint64_t v2 = 0;
      }
      else {
        unint64_t v2 = 0x100000002;
      }
      goto LABEL_36;
    case 19:
      uint64_t v5 = *(void *)a1 ^ 0x61705F43435F5744 | *(void *)(a1 + 8) ^ 0x61765F79625F7373 | *(void *)(a1 + 11) ^ 0x65756C61765F7962;
      uint64_t v6 = 0x100000005;
      goto LABEL_126;
    case 20:
      if (*(void *)a1 == 0x4E475F43435F5744
        && *(void *)(a1 + 8) == 0x6173656E65725F55
        && *(_DWORD *)(a1 + 16) == 1752391539)
      {
        unint64_t v2 = 0x100000040;
      }
      else
      {
        if (*(void *)a1 != 0x4F425F43435F5744
          || *(void *)(a1 + 8) != 0x61705F444E414C52
          || *(_DWORD *)(a1 + 16) != 1818321779)
        {
          unint64_t v2 = 0;
          BOOL v3 = 1;
          goto LABEL_68;
        }
        unint64_t v2 = 0x1000000B2;
      }
      break;
    case 21:
      if (*(void *)a1 == 0x4F425F43435F5744
        && *(void *)(a1 + 8) == 0x74735F444E414C52
        && *(void *)(a1 + 13) == 0x6C6C61636474735FLL)
      {
        unint64_t v2 = 0x1000000B1;
        break;
      }
      unint64_t v2 = 0;
LABEL_36:
      BOOL v3 = HIDWORD(v2) == 0;
LABEL_37:
      if (a2 == 21 && v3)
      {
        if (*(void *)a1 == 0x4C4C5F43435F5744
          && *(void *)(a1 + 8) == 0x6F746365765F4D56
          && *(void *)(a1 + 13) == 0x6C6C6163726F7463)
        {
          unint64_t v2 = 0x1000000C0;
          break;
        }
        if (*(void *)a1 == 0x4C4C5F43435F5744
          && *(void *)(a1 + 8) == 0x365F3638585F4D56
          && *(void *)(a1 + 13) == 0x5673795334365F36)
        {
          unint64_t v2 = 0x1000000C2;
          break;
        }
        goto LABEL_108;
      }
      char v17 = !v3;
      if (a2 != 16) {
        char v17 = 1;
      }
      if ((v17 & 1) == 0)
      {
        if (*(void *)a1 == 0x4C4C5F43435F5744 && *(void *)(a1 + 8) == 0x34366E69575F4D56)
        {
          unint64_t v2 = 0x1000000C1;
          break;
        }
        if (*(void *)a1 == 0x4C4C5F43435F5744 && *(void *)(a1 + 8) == 0x53435041415F4D56)
        {
          unint64_t v2 = 0x1000000C3;
          break;
        }
        goto LABEL_108;
      }
LABEL_68:
      if (a2 == 20 && v3)
      {
        if (*(void *)a1 == 0x4C4C5F43435F5744
          && *(void *)(a1 + 8) == 0x53435041415F4D56
          && *(_DWORD *)(a1 + 16) == 1346786911)
        {
          unint64_t v2 = 0x1000000C4;
          break;
        }
        goto LABEL_108;
      }
      char v43 = !v3;
      if (a2 != 23) {
        char v43 = 1;
      }
      if (v43) {
        goto LABEL_172;
      }
      goto LABEL_157;
    case 22:
      if (*(void *)a1 == 0x4F425F43435F5744
        && *(void *)(a1 + 8) == 0x61735F444E414C52
        && *(void *)(a1 + 14) == 0x6C6C616365666173)
      {
        unint64_t v2 = 0x1000000B0;
        break;
      }
      if (*(void *)a1 == 0x4F425F43435F5744
        && *(void *)(a1 + 8) == 0x736D5F444E414C52
        && *(void *)(a1 + 14) == 0x6E7275746572736DLL)
      {
        unint64_t v2 = 0x1000000B4;
        break;
      }
      if (*(void *)a1 == 0x4F425F43435F5744
        && *(void *)(a1 + 8) == 0x68745F444E414C52
        && *(void *)(a1 + 14) == 0x6C6C616373696874)
      {
        unint64_t v2 = 0x1000000B5;
        break;
      }
      if (*(void *)a1 == 0x4F425F43435F5744
        && *(void *)(a1 + 8) == 0x61665F444E414C52
        && *(void *)(a1 + 14) == 0x6C6C616374736166)
      {
        unint64_t v2 = 0x1000000B6;
        break;
      }
      unint64_t v2 = 0;
LABEL_108:
      BOOL v30 = (v2 & 0x100000000) == 0;
      goto LABEL_109;
    case 23:
      if (*(void *)a1 == 0x61705F43435F5744
        && *(void *)(a1 + 8) == 0x65725F79625F7373
        && *(void *)(a1 + 15) == 0x65636E6572656665)
      {
        unint64_t v2 = 0x100000004;
        break;
      }
      unint64_t v2 = 0;
LABEL_157:
      if (*(void *)a1 == 0x4C4C5F43435F5744
        && *(void *)(a1 + 8) == 0x6C65746E495F4D56
        && *(void *)(a1 + 15) == 0x636369426C634F6CLL)
      {
        unint64_t v2 = 0x1000000C5;
        break;
      }
      if ((v2 & 0x100000000) == 0)
      {
        BOOL v46 = *(void *)a1 == 0x4C4C5F43435F5744 && *(void *)(a1 + 8) == 0x46726970535F4D56;
        if (v46 && *(void *)(a1 + 15) == 0x6E6F6974636E7546)
        {
          unint64_t v2 = 0x1000000C6;
          break;
        }
      }
LABEL_172:
      BOOL v30 = (v2 & 0x100000000) == 0;
      if (a2 != 23 || (v2 & 0x100000000) != 0)
      {
LABEL_109:
        if (a2 == 16 && v30)
        {
          if (*(void *)a1 == 0x4C4C5F43435F5744 && *(void *)(a1 + 8) == 0x74666977535F4D56) {
            unint64_t v2 = 0x1000000C8;
          }
          break;
        }
        char v39 = !v30;
        char v40 = a2 != 22 || !v30;
        if ((v40 & 1) == 0)
        {
          if (*(void *)a1 == 0x4C4C5F43435F5744
            && *(void *)(a1 + 8) == 0x65736572505F4D56
            && *(void *)(a1 + 14) == 0x6C6C416576726573)
          {
            unint64_t v2 = 0x1000000CALL;
          }
          break;
        }
        if (a2 != 21) {
          char v39 = 1;
        }
        if ((v39 & 1) == 0)
        {
          if (*(void *)a1 == 0x4C4C5F43435F5744
            && *(void *)(a1 + 8) == 0x65523638585F4D56
            && *(void *)(a1 + 13) == 0x6C6C614367655236)
          {
            unint64_t v2 = 0x1000000CBLL;
          }
          break;
        }
        char v52 = !v30;
        if (a2 == 20) {
          char v53 = v52;
        }
        else {
          char v53 = 1;
        }
        if (v53)
        {
          if (a2 != 31) {
            char v52 = 1;
          }
          if ((v52 & 1) == 0) {
            goto LABEL_140;
          }
        }
        else
        {
          if (*(void *)a1 != 0x4C4C5F43435F5744
            || *(void *)(a1 + 8) != 0x74666977535F4D56
            || *(_DWORD *)(a1 + 16) != 1818845524)
          {
            uint64_t v37 = *(void *)a1 ^ 0x44475F43435F5744 | *(void *)(a1 + 8) ^ 0x704F5F4D42495F42 | *(unsigned int *)(a1 + 16) ^ 0x4C436E65;
            uint64_t v38 = 0x1000000FFLL;
            goto LABEL_217;
          }
          unint64_t v2 = 0x1000000CCLL;
        }
      }
      else
      {
        if (*(void *)a1 != 0x4C4C5F43435F5744
          || *(void *)(a1 + 8) != 0x436E65704F5F4D56
          || *(void *)(a1 + 15) != 0x6C656E72654B4C43)
        {
          uint64_t v37 = *(void *)a1 ^ 0x4C4C5F43435F5744 | *(void *)(a1 + 8) ^ 0x65736572505F4D56 | *(void *)(a1 + 15) ^ 0x74736F4D65767265;
          uint64_t v38 = 0x1000000C9;
          goto LABEL_217;
        }
        unint64_t v2 = 0x1000000C7;
      }
      break;
    case 24:
      uint64_t v5 = *(void *)a1 ^ 0x4F425F43435F5744 | *(void *)(a1 + 8) ^ 0x736D5F444E414C52 | *(void *)(a1 + 16) ^ 0x6C6C616374736166;
      uint64_t v6 = 0x1000000B3;
LABEL_126:
      if (v5) {
        unint64_t v2 = 0;
      }
      else {
        unint64_t v2 = v6;
      }
      break;
    case 31:
      if (*(void *)a1 == 0x4E475F43435F5744
        && *(void *)(a1 + 8) == 0x6E616C726F625F55
        && *(void *)(a1 + 16) == 0x6163747361665F64
        && *(void *)(a1 + 23) == 0x363833695F6C6C61)
      {
        unint64_t v2 = 0x100000041;
      }
      else
      {
        unint64_t v2 = 0;
LABEL_140:
        uint64_t v37 = *(void *)a1 ^ 0x4C4C5F43435F5744 | *(void *)(a1 + 8) ^ 0x745F5847415F4D56 | *(void *)(a1 + 16) ^ 0x6E695F6461657268 | *(void *)(a1 + 23) ^ 0x746E61697261766ELL;
        uint64_t v38 = 0x1000000D0;
LABEL_217:
        if (!v37) {
          unint64_t v2 = v38;
        }
      }
      break;
    default:
      goto LABEL_37;
  }
  if ((v2 & 0x300000000) != 0) {
    return v2;
  }
  else {
    return 0;
  }
}

char *llvm::dwarf::InlineCodeString(llvm::dwarf *this)
{
  if (this > 3) {
    return 0;
  }
  else {
    return off_1E682E8B0[(int)this];
  }
}

const char *llvm::dwarf::ArrayOrderString(llvm::dwarf *this)
{
  int v1 = "DW_ORD_row_major";
  if (this) {
    int v1 = 0;
  }
  if (this == 1) {
    return "DW_ORD_col_major";
  }
  else {
    return v1;
  }
}

uint64_t llvm::dwarf::getMacinfo(uint64_t a1, uint64_t a2)
{
  switch(a2)
  {
    case 16:
      if (*(void *)a1 != 0x4E4943414D5F5744 || *(void *)(a1 + 8) != 0x6665646E755F4F46) {
        goto LABEL_40;
      }
      uint64_t result = 2;
      break;
    case 17:
      if (*(void *)a1 != 0x4E4943414D5F5744
        || *(void *)(a1 + 8) != 0x6E696665645F4F46
        || *(unsigned char *)(a1 + 16) != 101)
      {
        goto LABEL_40;
      }
      uint64_t result = 1;
      break;
    case 19:
      if (*(void *)a1 != 0x4E4943414D5F5744
        || *(void *)(a1 + 8) != 0x665F646E655F4F46
        || *(void *)(a1 + 11) != 0x656C69665F646E65)
      {
        goto LABEL_40;
      }
      uint64_t result = 4;
      break;
    case 21:
      if (*(void *)a1 == 0x4E4943414D5F5744
        && *(void *)(a1 + 8) == 0x74726174735F4F46
        && *(void *)(a1 + 13) == 0x656C69665F747261)
      {
        uint64_t result = 3;
      }
      else
      {
        if (*(void *)a1 != 0x4E4943414D5F5744
          || *(void *)(a1 + 8) != 0x6F646E65765F4F46
          || *(void *)(a1 + 13) != 0x7478655F726F646ELL)
        {
          goto LABEL_40;
        }
        uint64_t result = 255;
      }
      break;
    default:
LABEL_40:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t llvm::dwarf::getMacro(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0;
  BOOL v3 = 1;
  switch(a2)
  {
    case 14:
      if (*(void *)a1 ^ 0x4F5243414D5F5744 | *(void *)(a1 + 6) ^ 0x6665646E755F4F52) {
        unint64_t v2 = 0;
      }
      else {
        unint64_t v2 = 0x100000002;
      }
      goto LABEL_42;
    case 15:
      if (*(void *)a1 == 0x4F5243414D5F5744 && *(void *)(a1 + 7) == 0x656E696665645F4FLL)
      {
        unint64_t v2 = 0x100000001;
        break;
      }
      if (*(void *)a1 == 0x4F5243414D5F5744 && *(void *)(a1 + 7) == 0x74726F706D695F4FLL)
      {
        unint64_t v2 = 0x100000007;
        break;
      }
      goto LABEL_41;
    case 17:
      uint64_t v6 = *(void *)a1 ^ 0x4F5243414D5F5744 | *(void *)(a1 + 8) ^ 0x6C69665F646E655FLL | *(unsigned __int8 *)(a1 + 16) ^ 0x65;
      uint64_t v7 = 0x100000004;
      goto LABEL_17;
    case 18:
      uint64_t v6 = *(void *)a1 ^ 0x4F5243414D5F5744 | *(void *)(a1 + 8) ^ 0x735F6665646E755FLL | *(unsigned __int16 *)(a1 + 16) ^ 0x7075;
      uint64_t v7 = 0x100000009;
LABEL_17:
      if (v6) {
        unint64_t v2 = 0;
      }
      else {
        unint64_t v2 = v7;
      }
      break;
    case 19:
      if (*(void *)a1 == 0x4F5243414D5F5744
        && *(void *)(a1 + 8) == 0x665F74726174735FLL
        && *(void *)(a1 + 11) == 0x656C69665F747261)
      {
        unint64_t v2 = 0x100000003;
        break;
      }
      if (*(void *)a1 == 0x4F5243414D5F5744
        && *(void *)(a1 + 8) == 0x735F6665646E755FLL
        && *(void *)(a1 + 11) == 0x707274735F666564)
      {
        unint64_t v2 = 0x100000006;
        break;
      }
      if (*(void *)a1 == 0x4F5243414D5F5744
        && *(void *)(a1 + 8) == 0x5F656E696665645FLL
        && *(void *)(a1 + 11) == 0x7075735F656E6966)
      {
        unint64_t v2 = 0x100000008;
        break;
      }
LABEL_41:
      unint64_t v2 = 0;
LABEL_42:
      BOOL v3 = HIDWORD(v2) == 0;
LABEL_43:
      if (a2 == 19 && v3)
      {
        if (*(void *)a1 != 0x4F5243414D5F5744
          || *(void *)(a1 + 8) != 0x5F74726F706D695FLL
          || *(void *)(a1 + 11) != 0x7075735F74726F70)
        {
          uint64_t v16 = *(void *)a1 ^ 0x4F5243414D5F5744 | *(void *)(a1 + 8) ^ 0x735F6665646E755FLL | *(void *)(a1 + 11) ^ 0x787274735F666564;
          uint64_t v17 = 0x10000000CLL;
          goto LABEL_66;
        }
        unint64_t v2 = 0x10000000ALL;
      }
      else
      {
        char v18 = !v3;
        if (a2 != 20) {
          char v18 = 1;
        }
        if ((v18 & 1) == 0) {
          goto LABEL_65;
        }
      }
      break;
    case 20:
      if (*(void *)a1 == 0x4F5243414D5F5744
        && *(void *)(a1 + 8) == 0x5F656E696665645FLL
        && *(_DWORD *)(a1 + 16) == 1886549107)
      {
        unint64_t v2 = 0x100000005;
      }
      else
      {
        unint64_t v2 = 0;
LABEL_65:
        uint64_t v16 = *(void *)a1 ^ 0x4F5243414D5F5744 | *(void *)(a1 + 8) ^ 0x5F656E696665645FLL | *(unsigned int *)(a1 + 16) ^ 0x78727473;
        uint64_t v17 = 0x10000000BLL;
LABEL_66:
        if (!v16) {
          unint64_t v2 = v17;
        }
      }
      break;
    default:
      goto LABEL_43;
  }
  if ((v2 & 0x300000000) != 0) {
    return v2;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

const char *llvm::dwarf::CallFrameString(int a1, int a2)
{
  if (a1 == 29 && a2 == 18) {
    return "DW_CFA_MIPS_advance_loc8";
  }
  if (a1 == 45 && (a2 - 33) < 2) {
    return "DW_CFA_GNU_window_save";
  }
  if (a1 == 45 && (a2 - 3) < 2) {
    return "DW_CFA_AARCH64_negate_ra_state";
  }
  if (a1 == 46 && (a2 - 41) < 2) {
    return "DW_CFA_GNU_args_size";
  }
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      uint64_t result = "DW_CFA_nop";
      break;
    case 1:
      uint64_t result = "DW_CFA_set_loc";
      break;
    case 2:
      uint64_t result = "DW_CFA_advance_loc1";
      break;
    case 3:
      uint64_t result = "DW_CFA_advance_loc2";
      break;
    case 4:
      uint64_t result = "DW_CFA_advance_loc4";
      break;
    case 5:
      uint64_t result = "DW_CFA_offset_extended";
      break;
    case 6:
      uint64_t result = "DW_CFA_restore_extended";
      break;
    case 7:
      uint64_t result = "DW_CFA_undefined";
      break;
    case 8:
      uint64_t result = "DW_CFA_same_value";
      break;
    case 9:
      uint64_t result = "DW_CFA_register";
      break;
    case 10:
      uint64_t result = "DW_CFA_remember_state";
      break;
    case 11:
      uint64_t result = "DW_CFA_restore_state";
      break;
    case 12:
      uint64_t result = "DW_CFA_def_cfa";
      break;
    case 13:
      uint64_t result = "DW_CFA_def_cfa_register";
      break;
    case 14:
      uint64_t result = "DW_CFA_def_cfa_offset";
      break;
    case 15:
      uint64_t result = "DW_CFA_def_cfa_expression";
      break;
    case 16:
      uint64_t result = "DW_CFA_expression";
      break;
    case 17:
      uint64_t result = "DW_CFA_offset_extended_sf";
      break;
    case 18:
      uint64_t result = "DW_CFA_def_cfa_sf";
      break;
    case 19:
      uint64_t result = "DW_CFA_def_cfa_offset_sf";
      break;
    case 20:
      uint64_t result = "DW_CFA_val_offset";
      break;
    case 21:
      uint64_t result = "DW_CFA_val_offset_sf";
      break;
    case 22:
      uint64_t result = "DW_CFA_val_expression";
      break;
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      return result;
    case 48:
      uint64_t result = "DW_CFA_LLVM_def_aspace_cfa";
      break;
    case 49:
      uint64_t result = "DW_CFA_LLVM_def_aspace_cfa_sf";
      break;
    case 64:
      uint64_t result = "DW_CFA_advance_loc";
      break;
    default:
      if (a1 == 128)
      {
        uint64_t result = "DW_CFA_offset";
      }
      else if (a1 == 192)
      {
        uint64_t result = "DW_CFA_restore";
      }
      break;
  }
  return result;
}

char *llvm::dwarf::AtomTypeString(llvm::dwarf *this)
{
  if (this > 7) {
    return 0;
  }
  else {
    return off_1E682E7A0[(int)this];
  }
}

uint64_t llvm::dwarf::getFixedFormByteSize(int a1, unint64_t a2)
{
  unsigned __int8 v3 = 0;
  int v4 = a1 - 1;
  int v5 = 0;
  switch(v4)
  {
    case 0:
      int v5 = (unsigned __int16)a2 != 0 && BYTE2(a2) != 0;
      if ((unsigned __int16)a2 != 0 && BYTE2(a2) != 0) {
        unsigned __int8 v3 = BYTE2(a2);
      }
      else {
        unsigned __int8 v3 = 0;
      }
      return v3 | (v5 << 8);
    case 1:
    case 2:
    case 3:
    case 7:
    case 8:
    case 9:
    case 12:
    case 14:
    case 20:
    case 21:
    case 23:
    case 25:
    case 26:
    case 33:
    case 34:
    case 42:
      return v3 | (v5 << 8);
    case 4:
    case 17:
    case 37:
    case 41:
      int v5 = 1;
      unsigned __int8 v3 = 2;
      return v3 | (v5 << 8);
    case 5:
    case 18:
    case 27:
    case 39:
    case 43:
      int v5 = 1;
      unsigned __int8 v3 = 4;
      return v3 | (v5 << 8);
    case 6:
    case 19:
    case 31:
    case 35:
      int v5 = 1;
      unsigned __int8 v3 = 8;
      return v3 | (v5 << 8);
    case 10:
    case 11:
    case 16:
    case 36:
    case 40:
      unsigned __int8 v3 = 1;
      goto LABEL_3;
    case 13:
    case 22:
    case 28:
    case 30:
      unint64_t v7 = a2 >> 16;
      if (BYTE3(a2)) {
        char v8 = 8;
      }
      else {
        char v8 = 4;
      }
      goto LABEL_12;
    case 15:
      unint64_t v7 = a2 >> 16;
      if (BYTE3(a2)) {
        char v8 = 8;
      }
      else {
        char v8 = 4;
      }
      if ((unsigned __int16)a2 == 2) {
        char v8 = BYTE2(a2);
      }
LABEL_12:
      BOOL v9 = v7 == 0;
      if ((_BYTE)v7) {
        char v10 = v8;
      }
      else {
        char v10 = 0;
      }
      int v11 = !v9;
      if ((_WORD)a2) {
        unsigned __int8 v3 = v10;
      }
      else {
        unsigned __int8 v3 = 0;
      }
      if ((_WORD)a2) {
        int v5 = v11;
      }
      else {
        int v5 = 0;
      }
      break;
    case 24:
    case 32:
      unsigned __int8 v3 = 0;
LABEL_3:
      int v5 = 1;
      break;
    case 29:
      int v5 = 1;
      unsigned __int8 v3 = 16;
      break;
    case 38:
      int v5 = 1;
      unsigned __int8 v3 = 3;
      break;
    default:
      int v5 = 0;
      break;
  }
  return v3 | (v5 << 8);
}

BOOL llvm::dwarf::isValidFormForVersion(int a1, unsigned int a2, uint64_t a3)
{
  if (((a1 - 7937) > 0x20 || ((1 << (a1 - 1)) & 0x180000003) == 0) && a1 != 8193) {
    return llvm::dwarf::FormVersion(a1) - 1 < a2;
  }
  return a3;
}

const char *llvm::dwarf::FormatString(llvm::dwarf *this)
{
  if (this) {
    return "DWARF64";
  }
  else {
    return "DWARF32";
  }
}

uint64_t llvm::ELF::convertArchNameToEMachine(uint64_t a1, uint64_t a2)
{
  int v2 = 65704;
  v177[0] = a1;
  v177[1] = a2;
  llvm::StringRef::lower((llvm::StringRef *)v177, v175);
  if (v176 >= 0) {
    unsigned __int8 v3 = v175;
  }
  else {
    unsigned __int8 v3 = (void **)v175[0];
  }
  if (v176 >= 0) {
    int v4 = (void *)(v176 & 0x7F);
  }
  else {
    int v4 = v175[1];
  }
  if (v4 != (void *)4)
  {
    int v6 = 0;
    BOOL v7 = 1;
    int v8 = 0;
    unsigned int v5 = 0;
    switch((unint64_t)v4)
    {
      case 3uLL:
        if (*(_WORD *)v3 == 13165 && *((unsigned char *)v3 + 2) == 50)
        {
          BOOL v21 = 0;
          int v24 = 0;
          int v8 = 0;
          BOOL v7 = 0;
          unsigned int v5 = 65537;
          int v6 = 1;
          goto LABEL_144;
        }
        if (*(_WORD *)v3 == 14387 && *((unsigned char *)v3 + 2) == 54)
        {
          int v8 = 0;
          BOOL v7 = 0;
          unsigned int v5 = 65539;
        }
        else if (*(_WORD *)v3 == 14390 && *((unsigned char *)v3 + 2) == 107)
        {
          int v8 = 0;
          BOOL v7 = 0;
          unsigned int v5 = 65540;
        }
        else if (*(_WORD *)v3 == 14392 && *((unsigned char *)v3 + 2) == 107)
        {
          int v8 = 0;
          BOOL v7 = 0;
          unsigned int v5 = 65541;
        }
        else
        {
          if (*(_WORD *)v3 != 13880 || *((unsigned char *)v3 + 2) != 48)
          {
            if (*(_WORD *)v3 == 13881 && *((unsigned char *)v3 + 2) == 48)
            {
              int v24 = 0;
              BOOL v7 = 0;
              unsigned int v5 = 65555;
              BOOL v21 = 1;
LABEL_83:
              BOOL v27 = 0;
              int v8 = 0;
              BOOL v28 = 0;
              BOOL v29 = v4 == (void *)9;
              int v6 = v21;
              BOOL v21 = 0;
              goto LABEL_436;
            }
            int v15 = 0;
            BOOL v16 = *(_WORD *)v3 == 28784 && *((unsigned char *)v3 + 2) == 99;
            int v6 = 1;
            if (!v16)
            {
              int v8 = 0;
              unsigned int v5 = 0;
              BOOL v17 = 0;
              goto LABEL_102;
            }
            unsigned int v5 = 65556;
            goto LABEL_135;
          }
          int v8 = 0;
          BOOL v7 = 0;
          unsigned int v5 = 65543;
        }
        int v6 = 1;
        goto LABEL_88;
      case 5uLL:
        if (*(_DWORD *)v3 == 1918988403 && *((unsigned char *)v3 + 4) == 99)
        {
          int v6 = 0;
          BOOL v7 = 0;
          unsigned int v5 = 65538;
        }
        else
        {
          unsigned int v5 = 0;
          if (*(_DWORD *)v3 != 1668112745 || *((unsigned char *)v3 + 4) != 117) {
            goto LABEL_44;
          }
          int v6 = 0;
          BOOL v7 = 0;
          unsigned int v5 = 65542;
        }
        int v8 = 1;
LABEL_88:
        int v18 = v6 & v7;
        goto LABEL_89;
      case 6uLL:
        BOOL v21 = 0;
        if (*(_DWORD *)v3 == 1769103728 && *((_WORD *)v3 + 2) == 25459)
        {
          BOOL v7 = 0;
          unsigned int v5 = 65551;
          int v24 = 1;
        }
        else
        {
          BOOL v23 = *(_DWORD *)v3 == 896561270 && *((_WORD *)v3 + 2) == 12336;
          int v24 = 1;
          if (!v23)
          {
            int v6 = 0;
            int v8 = 0;
            BOOL v7 = 0;
            unsigned int v5 = 0;
            goto LABEL_144;
          }
          unsigned int v5 = 65553;
          BOOL v7 = 0;
        }
        goto LABEL_83;
      case 0xBuLL:
        if (*v3 == (void *)0x3373725F7370696DLL && *(void **)((char *)v3 + 3) == (void *)0x656C5F3373725F73)
        {
          BOOL v21 = 0;
          int v24 = 0;
          int v6 = 0;
          int v8 = 0;
          unsigned int v5 = 65546;
          goto LABEL_144;
        }
        int v24 = 0;
        if (*v3 != (void *)0x7032336372617073 || *(void **)((char *)v3 + 3) != (void *)0x73756C7032336372)
        {
          BOOL v21 = 0;
          int v6 = 0;
          int v8 = 0;
          unsigned int v5 = 0;
          goto LABEL_144;
        }
        unsigned int v5 = 65554;
        BOOL v21 = 0;
        goto LABEL_83;
      default:
        goto LABEL_88;
    }
  }
  if (*(_DWORD *)v3 != 1701736302)
  {
    if (*(_DWORD *)v3 == 1936746861)
    {
      unsigned int v5 = 65544;
    }
    else if (*(_DWORD *)v3 == 808924019)
    {
      unsigned int v5 = 65545;
    }
    else
    {
      unsigned int v5 = 0;
    }
    int v15 = 0;
    int v6 = 0;
    int v8 = 0;
    int v18 = 0;
    BOOL v7 = v5 < 0x10000;
    goto LABEL_96;
  }
  unsigned int v5 = 0x10000;
LABEL_44:
  int v18 = 0;
  int v6 = 0;
  BOOL v7 = v4 != (void *)4;
  int v8 = v7;
LABEL_89:
  int v15 = 0;
  if (v7 && v8)
  {
    BOOL v30 = *(_DWORD *)v3 == 912486512 && *((unsigned char *)v3 + 4) == 52;
    int v15 = 1;
    if (!v30)
    {
      int v8 = 1;
      BOOL v7 = 1;
      goto LABEL_96;
    }
    unsigned int v5 = 65557;
LABEL_135:
    int v24 = 0;
    BOOL v7 = 0;
    BOOL v21 = v4 == (void *)2;
    int v8 = v15;
    goto LABEL_144;
  }
LABEL_96:
  BOOL v17 = v4 == (void *)4 && v7;
  if (v17 && *(_DWORD *)v3 == 809055091)
  {
    unsigned int v5 = 65558;
    goto LABEL_143;
  }
  if (v18)
  {
LABEL_102:
    if (*(_WORD *)v3 == 28787 && *((unsigned char *)v3 + 2) == 117)
    {
      unsigned int v5 = 65559;
      goto LABEL_143;
    }
    int v18 = 1;
  }
  if (!v17)
  {
LABEL_111:
    if (v18)
    {
      if (*(_WORD *)v3 == 25458 && *((unsigned char *)v3 + 2) == 101)
      {
        unsigned int v5 = 65575;
        goto LABEL_143;
      }
      if (*(_WORD *)v3 == 29281 && *((unsigned char *)v3 + 2) == 109)
      {
        unsigned int v5 = 65576;
        goto LABEL_143;
      }
    }
    if (!v15 || (*(_DWORD *)v3 == 1752198241 ? (BOOL v34 = *((unsigned char *)v3 + 4) == 97) : (BOOL v34 = 0), !v34))
    {
      BOOL v21 = v4 == (void *)2;
      if (v4 != (void *)2) {
        BOOL v7 = 0;
      }
      if (v7)
      {
        if (*(_WORD *)v3 == 26739) {
          unsigned int v5 = 65578;
        }
        BOOL v21 = 1;
        goto LABEL_138;
      }
      int v24 = 0;
      BOOL v7 = 0;
LABEL_144:
      int v37 = v5 & 0x10000;
      BOOL v36 = (v5 & 0xFF0000) == 0;
      BOOL v27 = v4 == (void *)7;
      if (v4 == (void *)7 && !v37)
      {
        if (*(_DWORD *)v3 == 1918988403 && *(_DWORD *)((char *)v3 + 3) == 964060018)
        {
          unsigned int v5 = 65579;
          goto LABEL_201;
        }
        BOOL v27 = 1;
      }
      int v35 = 0;
      if (v37 || !v27) {
        goto LABEL_158;
      }
      if (*(_DWORD *)v3 != 1667854964 || *(_DWORD *)((char *)v3 + 3) != 1701998435)
      {
        int v35 = 1;
        BOOL v36 = 1;
        BOOL v27 = 1;
        goto LABEL_158;
      }
      unsigned int v5 = 65580;
LABEL_201:
      BOOL v28 = v4 == (void *)8;
      BOOL v27 = 1;
      goto LABEL_208;
    }
    unsigned int v5 = 65577;
LABEL_143:
    int v24 = 0;
    BOOL v7 = 0;
    BOOL v21 = v4 == (void *)2;
    goto LABEL_144;
  }
  switch(*(_DWORD *)v3)
  {
    case 0x30303876:
      BOOL v21 = 0;
      unsigned int v5 = 65572;
      break;
    case 0x30327266:
      BOOL v21 = 0;
      unsigned int v5 = 65573;
      break;
    case 0x32336872:
      unsigned int v5 = 65574;
      goto LABEL_143;
    default:
      goto LABEL_111;
  }
LABEL_138:
  int v35 = 0;
  int v24 = 0;
  BOOL v7 = 0;
  BOOL v27 = 0;
  BOOL v36 = (v5 & 0xFF0000) == 0;
LABEL_158:
  if ((v36 & v6) == 1 && *(_WORD *)v3 == 29281 && *((unsigned char *)v3 + 2) == 99)
  {
    unsigned int v5 = 65581;
LABEL_207:
    BOOL v28 = v4 == (void *)8;
    goto LABEL_208;
  }
  int v41 = v36 & v24;
  if ((v36 & v24) == 1 && *(_DWORD *)v3 == 861878376 && *((_WORD *)v3 + 2) == 12336)
  {
    unsigned int v5 = 65582;
    goto LABEL_207;
  }
  if (v35)
  {
    if (*(_DWORD *)v3 == 861878376 && *(_DWORD *)((char *)v3 + 3) == 1747988531)
    {
      unsigned int v5 = 65583;
      goto LABEL_207;
    }
  }
  if ((v36 & v6) != 0 && *(_WORD *)v3 == 14440 && *((unsigned char *)v3 + 2) == 115)
  {
    unsigned int v5 = 65584;
    goto LABEL_207;
  }
  if (v41)
  {
    if (*(_DWORD *)v3 == 895432808 && *((_WORD *)v3 + 2) == 12336)
    {
      unsigned int v5 = 65585;
      goto LABEL_207;
    }
  }
  if ((v36 & v8) == 1 && *(_DWORD *)v3 == 912220521 && *((unsigned char *)v3 + 4) == 52)
  {
    unsigned int v5 = 65586;
    goto LABEL_207;
  }
  if (v41)
  {
    if (*(_DWORD *)v3 == 1936746861 && *((_WORD *)v3 + 2) == 30815)
    {
      BOOL v28 = v4 == (void *)8;
      unsigned int v5 = 65587;
      goto LABEL_435;
    }
  }
  BOOL v28 = v4 == (void *)8;
  if (v4 != (void *)8) {
    BOOL v36 = 0;
  }
  if (v36)
  {
    BOOL v28 = 1;
    if (*v3 == (void *)0x65726966646C6F63)
    {
      unsigned int v5 = 65588;
LABEL_435:
      BOOL v29 = v4 == (void *)9;
      goto LABEL_436;
    }
  }
LABEL_208:
  int v48 = v5 & 0x10000;
  if ((v5 & 0xFF0000) != 0) {
    int v49 = 0;
  }
  else {
    int v49 = v24;
  }
  if (v49 == 1 && *(_DWORD *)v3 == 1667774518 && *((_WORD *)v3 + 2) == 12849)
  {
    unsigned int v5 = 65589;
    goto LABEL_435;
  }
  if (v48) {
    int v51 = 0;
  }
  else {
    int v51 = v6;
  }
  if (v51 == 1)
  {
    if (*(_WORD *)v3 == 28013 && *((unsigned char *)v3 + 2) == 97)
    {
      unsigned int v5 = 65590;
      goto LABEL_435;
    }
    if (*(_WORD *)v3 == 25456 && *((unsigned char *)v3 + 2) == 112)
    {
      unsigned int v5 = 65591;
      goto LABEL_435;
    }
  }
  BOOL v54 = v4 == (void *)4 && v48 == 0;
  int v55 = v54;
  if (v54)
  {
    if (*(_DWORD *)v3 == 1970299758)
    {
      unsigned int v5 = 65592;
      goto LABEL_435;
    }
    if (*(_DWORD *)v3 == 829580398)
    {
      unsigned int v5 = 65593;
      goto LABEL_435;
    }
  }
  if (v48) {
    BOOL v56 = 0;
  }
  else {
    BOOL v56 = v28;
  }
  if (v56 && *v3 == (void *)0x65726F6372617473)
  {
    unsigned int v5 = 65594;
    goto LABEL_435;
  }
  if (v55 && *(_DWORD *)v3 == 909206893)
  {
    unsigned int v5 = 65595;
    goto LABEL_435;
  }
  if (v48) {
    int v57 = 0;
  }
  else {
    int v57 = v8;
  }
  if (v57 == 1)
  {
    if (*(_DWORD *)v3 == 808547443 && *((unsigned char *)v3 + 4) == 48)
    {
      unsigned int v5 = 65596;
      goto LABEL_435;
    }
    if (*(_DWORD *)v3 == 2037279092 && *((unsigned char *)v3 + 4) == 106)
    {
      unsigned int v5 = 65597;
      goto LABEL_435;
    }
  }
  if (v49)
  {
    if (*(_DWORD *)v3 == 1597388920 && *((_WORD *)v3 + 2) == 13366)
    {
      unsigned int v5 = 65598;
      goto LABEL_435;
    }
  }
  if (v55 && *(_DWORD *)v3 == 1886610544)
  {
    unsigned int v5 = 65599;
    goto LABEL_435;
  }
  if (v57)
  {
    if (*(_DWORD *)v3 == 829449328 && *((unsigned char *)v3 + 4) == 48)
    {
      unsigned int v5 = 65600;
      goto LABEL_435;
    }
    if (*(_DWORD *)v3 == 829449328 && *((unsigned char *)v3 + 4) == 49)
    {
      unsigned int v5 = 65601;
      goto LABEL_435;
    }
  }
  if (v55 && *(_DWORD *)v3 == 909539430)
  {
    unsigned int v5 = 65602;
    goto LABEL_435;
  }
  if (v48) {
    BOOL v63 = 0;
  }
  else {
    BOOL v63 = v27;
  }
  if (v63 && *(_DWORD *)v3 == 1882813555 && *(_DWORD *)((char *)v3 + 3) == 1937075312)
  {
    unsigned int v5 = 65603;
    goto LABEL_435;
  }
  if (v51)
  {
    if (*(_WORD *)v3 == 29811 && *((unsigned char *)v3 + 2) == 55)
    {
      unsigned int v5 = 65604;
      goto LABEL_435;
    }
  }
  if (v49)
  {
    if (*(_DWORD *)v3 == 1667774518 && *((_WORD *)v3 + 2) == 13873)
    {
      unsigned int v5 = 65605;
    }
    else if (*(_DWORD *)v3 == 1667774518 && *((_WORD *)v3 + 2) == 12593)
    {
      unsigned int v5 = 65606;
    }
    else if (*(_DWORD *)v3 == 1667774518 && *((_WORD *)v3 + 2) == 14384)
    {
      unsigned int v5 = 65607;
    }
    else
    {
      if (*(_DWORD *)v3 != 1667774518 || *((_WORD *)v3 + 2) != 13616) {
        goto LABEL_305;
      }
      unsigned int v5 = 65608;
    }
    BOOL v29 = v4 == (void *)9;
    int v24 = 1;
    goto LABEL_436;
  }
LABEL_305:
  if (v51)
  {
    if (*(_WORD *)v3 == 30323 && *((unsigned char *)v3 + 2) == 120)
    {
      unsigned int v5 = 65609;
      goto LABEL_435;
    }
  }
  if (v55 && *(_DWORD *)v3 == 959542387)
  {
    unsigned int v5 = 65610;
    goto LABEL_435;
  }
  if (v51)
  {
    if (*(_WORD *)v3 == 24950 && *((unsigned char *)v3 + 2) == 120)
    {
      unsigned int v5 = 65611;
      goto LABEL_435;
    }
  }
  if (v55 && *(_DWORD *)v3 == 1936290403)
  {
    unsigned int v5 = 65612;
    goto LABEL_435;
  }
  if (v63 && *(_DWORD *)v3 == 1702257002 && *(_DWORD *)((char *)v3 + 3) == 1852402789)
  {
    unsigned int v5 = 65613;
    goto LABEL_435;
  }
  if (v56 && *v3 == (void *)0x6874617065726966)
  {
    unsigned int v5 = 65614;
    goto LABEL_435;
  }
  if (v51)
  {
    if (*(_WORD *)v3 == 29562 && *((unsigned char *)v3 + 2) == 112)
    {
      unsigned int v5 = 65615;
      goto LABEL_435;
    }
  }
  if (v55 && *(_DWORD *)v3 == 2020175213)
  {
    unsigned int v5 = 65616;
    goto LABEL_435;
  }
  if (v57)
  {
    if (*(_DWORD *)v3 == 1851880808 && *((unsigned char *)v3 + 4) == 121)
    {
      unsigned int v5 = 65617;
    }
    else
    {
      if (*(_DWORD *)v3 != 1936290416 || *((unsigned char *)v3 + 4) != 109) {
        goto LABEL_342;
      }
      unsigned int v5 = 65618;
    }
    BOOL v29 = v4 == (void *)9;
    int v8 = 1;
    goto LABEL_436;
  }
LABEL_342:
  if (v51)
  {
    if (*(_WORD *)v3 == 30305 && *((unsigned char *)v3 + 2) == 114)
    {
      unsigned int v5 = 65619;
      goto LABEL_435;
    }
  }
  if (v55)
  {
    switch(*(_DWORD *)v3)
    {
      case 0x30337266:
        unsigned int v5 = 65620;
        goto LABEL_435;
      case 0x76303164:
        int v2 = 65621;
        goto LABEL_991;
      case 0x76303364:
        int v2 = 65622;
        goto LABEL_991;
      case 0x30353876:
        int v2 = 65623;
        goto LABEL_991;
      case 0x7232336D:
        int v2 = 65624;
        goto LABEL_991;
    }
  }
  if (!v63) {
    goto LABEL_362;
  }
  if (*(_DWORD *)v3 == 808545901 && *(_DWORD *)((char *)v3 + 3) == 808465200)
  {
    unsigned int v5 = 65625;
LABEL_430:
    BOOL v29 = v4 == (void *)9;
    BOOL v27 = 1;
    goto LABEL_436;
  }
  if (*(_DWORD *)v3 == 808545901 && *(_DWORD *)((char *)v3 + 3) == 808464944)
  {
    unsigned int v5 = 65626;
    goto LABEL_430;
  }
LABEL_362:
  char v79 = !v21;
  if (v48) {
    char v79 = 1;
  }
  if ((v79 & 1) == 0 && *(_WORD *)v3 == 27248)
  {
    unsigned int v5 = 65627;
    goto LABEL_435;
  }
  if (v56 && *v3 == (void *)0x637369726E65706FLL)
  {
    unsigned int v5 = 65628;
    goto LABEL_435;
  }
  char v80 = !v7;
  if (v48) {
    char v80 = 1;
  }
  if ((v80 & 1) == 0
    && *v3 == (void *)0x706D6F635F637261
    && *(void **)((char *)v3 + 3) == (void *)0x746361706D6F635FLL)
  {
    unsigned int v5 = 65629;
    goto LABEL_435;
  }
  if (v49)
  {
    if (*(_DWORD *)v3 == 1852142712 && *((_WORD *)v3 + 2) == 24947)
    {
      unsigned int v5 = 65630;
      goto LABEL_435;
    }
  }
  BOOL v29 = v4 == (void *)9;
  if (v4 == (void *)9 && !v48)
  {
    BOOL v83 = *v3 == (void *)0x726F636F65646976 && *((unsigned char *)v3 + 8) == 101;
    BOOL v29 = 1;
    if (v83)
    {
      unsigned int v5 = 65631;
LABEL_556:
      BOOL v106 = v4 == (void *)12;
      goto LABEL_557;
    }
  }
LABEL_436:
  int v84 = v5 & 0x10000;
  BOOL v85 = (v5 & 0xFF0000) == 0 && v27;
  if (v85 && *(_DWORD *)v3 == 1601006964 && *(_DWORD *)((char *)v3 + 3) == 1886414687)
  {
    unsigned int v5 = 65632;
    BOOL v27 = 1;
    goto LABEL_556;
  }
  if (v84) {
    int v87 = 0;
  }
  else {
    int v87 = v8;
  }
  if (v87 == 1 && *(_DWORD *)v3 == 842232686 && *((unsigned char *)v3 + 4) == 107)
  {
    unsigned int v5 = 65633;
    goto LABEL_556;
  }
  if (v84) {
    int v89 = 0;
  }
  else {
    int v89 = v6;
  }
  if (v89 == 1 && *(_WORD *)v3 == 28788 && *((unsigned char *)v3 + 2) == 99)
  {
    unsigned int v5 = 65634;
    goto LABEL_556;
  }
  if (!v87) {
    goto LABEL_469;
  }
  if (*(_DWORD *)v3 == 829451891 && *((unsigned char *)v3 + 4) == 107)
  {
    unsigned int v5 = 65635;
LABEL_544:
    BOOL v106 = v4 == (void *)12;
    int v8 = 1;
    goto LABEL_557;
  }
  if (*(_DWORD *)v3 == 808612979 && *((unsigned char *)v3 + 4) == 48)
  {
    unsigned int v5 = 65636;
    goto LABEL_544;
  }
LABEL_469:
  BOOL v93 = v4 == (void *)4 && v84 == 0;
  int v94 = v93;
  if (v93 && *(_DWORD *)v3 == 1798467689)
  {
    unsigned int v5 = 65637;
    goto LABEL_556;
  }
  if (v89)
  {
    if (*(_WORD *)v3 == 24941 && *((unsigned char *)v3 + 2) == 120)
    {
      unsigned int v5 = 65638;
      goto LABEL_556;
    }
  }
  char v96 = !v21;
  if (v84) {
    char v96 = 1;
  }
  if ((v96 & 1) == 0 && *(_WORD *)v3 == 29283)
  {
    unsigned int v5 = 65639;
    goto LABEL_556;
  }
  if (v84) {
    int v97 = 0;
  }
  else {
    int v97 = v24;
  }
  if (v97 != 1) {
    goto LABEL_499;
  }
  if (*(_DWORD *)v3 == 1668100710 && *((_WORD *)v3 + 2) == 13873)
  {
    unsigned int v5 = 65640;
    goto LABEL_556;
  }
  if (*(_DWORD *)v3 == 879784813 && *((_WORD *)v3 + 2) == 12339)
  {
    unsigned int v5 = 65641;
    goto LABEL_556;
  }
LABEL_499:
  char v100 = !v28;
  if (v84) {
    char v100 = 1;
  }
  if ((v100 & 1) == 0 && *v3 == (void *)0x6E69666B63616C62)
  {
    unsigned int v5 = 65642;
    goto LABEL_556;
  }
  if (v97)
  {
    if (*(_DWORD *)v3 == 1667196275 && *((_WORD *)v3 + 2) == 13107)
    {
      unsigned int v5 = 65643;
      goto LABEL_556;
    }
  }
  if (v89)
  {
    if (*(_WORD *)v3 == 25971 && *((unsigned char *)v3 + 2) == 112)
    {
      unsigned int v5 = 65644;
      goto LABEL_556;
    }
  }
  if (v94 && *(_DWORD *)v3 == 1633907297)
  {
    unsigned int v5 = 65645;
    goto LABEL_556;
  }
  if (v85 && *(_DWORD *)v3 == 1667853941 && *(_DWORD *)((char *)v3 + 3) == 1701998435)
  {
    unsigned int v5 = 65646;
    goto LABEL_556;
  }
  if (v97)
  {
    if (*(_DWORD *)v3 == 1701017701 && *((_WORD *)v3 + 2) == 29555)
    {
      unsigned int v5 = 65647;
      goto LABEL_556;
    }
  }
  if (v89)
  {
    if (*(_WORD *)v3 == 30820 && *((unsigned char *)v3 + 2) == 112)
    {
      unsigned int v5 = 65648;
      goto LABEL_556;
    }
  }
  BOOL v106 = v4 == (void *)12;
  if (v4 == (void *)12 && !v84)
  {
    BOOL v107 = *v3 == (void *)0x6E5F617265746C61 && *((_DWORD *)v3 + 2) == 846425961;
    BOOL v106 = 1;
    if (v107)
    {
      unsigned int v5 = 65649;
LABEL_642:
      BOOL v123 = v4 == (void *)10;
LABEL_643:
      if (v4 == (void *)13
        && (v5 & 0xFF0000) == 0
        && *v3 == (void *)0x6D6563697474616CLL
        && *(void **)((char *)v3 + 5) == (void *)0x32336F63696D6563)
      {
        int v2 = 65674;
        goto LABEL_991;
      }
      goto LABEL_649;
    }
  }
LABEL_557:
  int v108 = v5 & 0x10000;
  if (v6 && !v108 && *(_WORD *)v3 == 29283 && *((unsigned char *)v3 + 2) == 120)
  {
    unsigned int v5 = 65650;
    int v6 = 1;
    goto LABEL_642;
  }
  if (v108) {
    int v110 = 0;
  }
  else {
    int v110 = v8;
  }
  if (v110 == 1 && *(_DWORD *)v3 == 1952540536 && *((unsigned char *)v3 + 4) == 101)
  {
    unsigned int v5 = 65651;
    goto LABEL_642;
  }
  BOOL v112 = v4 == (void *)4 && v108 == 0;
  int v113 = v112;
  if (!v112) {
    goto LABEL_581;
  }
  if (*(_DWORD *)v3 == 909521251)
  {
    unsigned int v5 = 65652;
    goto LABEL_642;
  }
  if (*(_DWORD *)v3 == 1664495981)
  {
    unsigned int v5 = 65653;
    goto LABEL_642;
  }
LABEL_581:
  char v114 = !v28;
  if (v108) {
    char v114 = 1;
  }
  if ((v114 & 1) == 0 && *v3 == (void *)0x6630336369707364)
  {
    unsigned int v5 = 65654;
    goto LABEL_642;
  }
  char v115 = !v21;
  if (v108) {
    char v115 = 1;
  }
  if ((v115 & 1) == 0 && *(_WORD *)v3 == 25955)
  {
    unsigned int v5 = 65655;
    goto LABEL_642;
  }
  if (v113 && *(_DWORD *)v3 == 1664234349)
  {
    unsigned int v5 = 65656;
    goto LABEL_642;
  }
  char v116 = !v27;
  if (v108) {
    char v116 = 1;
  }
  if ((v116 & 1) == 0 && *(_DWORD *)v3 == 862679924 && *(_DWORD *)((char *)v3 + 3) == 808464435)
  {
    unsigned int v5 = 65667;
    goto LABEL_642;
  }
  if (v113 && *(_DWORD *)v3 == 942699378)
  {
    unsigned int v5 = 65668;
    goto LABEL_642;
  }
  if (!v110) {
    goto LABEL_609;
  }
  if (*(_DWORD *)v3 == 1918986355 && *((unsigned char *)v3 + 4) == 99)
  {
    unsigned int v5 = 65669;
LABEL_640:
    BOOL v123 = v4 == (void *)10;
    int v8 = 1;
    goto LABEL_643;
  }
  if (*(_DWORD *)v3 == 1735353189 && *((unsigned char *)v3 + 4) == 50)
  {
    unsigned int v5 = 65670;
    goto LABEL_640;
  }
LABEL_609:
  char v120 = v24 ^ 1;
  if (v108) {
    char v120 = 1;
  }
  if ((v120 & 1) == 0 && *(_DWORD *)v3 == 1919902579 && *((_WORD *)v3 + 2) == 14181)
  {
    unsigned int v5 = 65671;
    goto LABEL_642;
  }
  if (v110)
  {
    if (*(_DWORD *)v3 == 846230372 && *((unsigned char *)v3 + 4) == 52)
    {
      unsigned int v5 = 65672;
      goto LABEL_642;
    }
  }
  BOOL v123 = v4 == (void *)10;
  if (v4 != (void *)10 || v108) {
    goto LABEL_643;
  }
  if (*v3 == (void *)0x726F636F65646976 && *((_WORD *)v3 + 4) == 13157)
  {
    int v2 = 65673;
    goto LABEL_991;
  }
  BOOL v123 = 1;
LABEL_649:
  int v126 = v5 & 0x10000;
  if ((v5 & 0xFF0000) != 0) {
    int v24 = 0;
  }
  if (v24 == 1 && *(_DWORD *)v3 == 1667196275 && *((_WORD *)v3 + 2) == 14129)
  {
    int v2 = 65675;
    goto LABEL_991;
  }
  if (v126) {
    BOOL v28 = 0;
  }
  if (v28)
  {
    if (*v3 == (void *)0x30303036635F6974)
    {
      int v2 = 65676;
      goto LABEL_991;
    }
    if (*v3 == (void *)0x30303032635F6974)
    {
      int v2 = 65677;
      goto LABEL_991;
    }
    if (*v3 == (void *)0x30303535635F6974)
    {
      int v2 = 65678;
      goto LABEL_991;
    }
  }
  if (v126) {
    BOOL v123 = 0;
  }
  if (v123 && *v3 == (void *)0x6C705F7073646D6DLL && *((_WORD *)v3 + 4) == 29557)
  {
    int v2 = 65696;
    goto LABEL_991;
  }
  if (v126) {
    BOOL v7 = 0;
  }
  if (v7 && *v3 == (void *)0x5F73736572707963 && *(void **)((char *)v3 + 3) == (void *)0x63386D5F73736572)
  {
    int v2 = 65697;
    goto LABEL_991;
  }
  BOOL v130 = v4 == (void *)4 && v126 == 0;
  int v131 = v130;
  if (v130 && *(_DWORD *)v3 == 1664234354)
  {
    int v2 = 65698;
    goto LABEL_991;
  }
  if (v28 && *v3 == (void *)0x616964656D697274)
  {
    int v2 = 65699;
    goto LABEL_991;
  }
  if (v126) {
    BOOL v27 = 0;
  }
  if (v27 && *(_DWORD *)v3 == 1635280232 && *(_DWORD *)((char *)v3 + 3) == 1852794721)
  {
    int v2 = 65700;
    goto LABEL_991;
  }
  if (v131 && *(_DWORD *)v3 == 825569336)
  {
    int v2 = 65701;
    goto LABEL_991;
  }
  if (v24)
  {
    if (*(_DWORD *)v3 == 1886942323 && *((_WORD *)v3 + 2) == 30775)
    {
      int v2 = 65702;
      goto LABEL_991;
    }
  }
  if (v126) {
    int v8 = 0;
  }
  if (v8 != 1) {
    goto LABEL_712;
  }
  if (*(_DWORD *)v3 == 863200366 && *((unsigned char *)v3 + 4) == 50)
  {
    int v2 = 65703;
    goto LABEL_991;
  }
  if (*(_DWORD *)v3 != 1735353189 || *((unsigned char *)v3 + 4) != 49)
  {
LABEL_712:
    if (v24)
    {
      if (*(_DWORD *)v3 == 1735353189 && *((_WORD *)v3 + 2) == 30769) {
        goto LABEL_991;
      }
      if (*(_DWORD *)v3 == 1903714669 && *((_WORD *)v3 + 2) == 12339)
      {
        int v2 = 65705;
        goto LABEL_991;
      }
      if (*(_DWORD *)v3 == 1869441400 && *((_WORD *)v3 + 2) == 13873)
      {
        int v2 = 65706;
        goto LABEL_991;
      }
    }
    if (v8)
    {
      if (*(_DWORD *)v3 == 1768841581 && *((unsigned char *)v3 + 4) == 107)
      {
        int v2 = 65707;
        goto LABEL_991;
      }
    }
    if (v27 && *(_DWORD *)v3 == 2036429411 && *(_DWORD *)((char *)v3 + 3) == 846622329)
    {
      int v2 = 65708;
      goto LABEL_991;
    }
    if (v126) {
      BOOL v21 = 0;
    }
    if (v21 && *(_WORD *)v3 == 30834)
    {
      int v2 = 65709;
      goto LABEL_991;
    }
    if (v8)
    {
      if (*(_DWORD *)v3 == 1635018093 && *((unsigned char *)v3 + 4) == 103)
      {
        int v2 = 65710;
        goto LABEL_991;
      }
    }
    if (v7 && *v3 == (void *)0x626C655F7473636DLL && *(void **)((char *)v3 + 3) == (void *)0x737572626C655F74)
    {
      int v2 = 65711;
      goto LABEL_991;
    }
    if (v24)
    {
      if (*(_DWORD *)v3 == 1735353189 && *((_WORD *)v3 + 2) == 13873)
      {
        int v2 = 65712;
        goto LABEL_991;
      }
    }
    if (v131)
    {
      if (*(_DWORD *)v3 == 909210211)
      {
        int v2 = 65713;
        goto LABEL_991;
      }
      if (*(_DWORD *)v3 == 1970304101)
      {
        int v2 = 65714;
        goto LABEL_991;
      }
    }
    if (v8)
    {
      if (*(_DWORD *)v3 == 962948211 && *((unsigned char *)v3 + 4) == 120)
      {
        int v2 = 65715;
        goto LABEL_991;
      }
    }
    if (v131)
    {
      if (*(_DWORD *)v3 == 1831874924)
      {
        int v2 = 65716;
        goto LABEL_991;
      }
      if (*(_DWORD *)v3 == 1831874923)
      {
        int v2 = 65717;
        goto LABEL_991;
      }
    }
    if (v27 && *(_DWORD *)v3 == 1668440417 && *(_DWORD *)((char *)v3 + 3) == 875980899)
    {
      int v2 = 65719;
      goto LABEL_991;
    }
    if (v8)
    {
      if (*(_DWORD *)v3 == 863139425 && *((unsigned char *)v3 + 4) == 50)
      {
        int v2 = 65721;
        goto LABEL_991;
      }
    }
    if (v131 && *(_DWORD *)v3 == 946697331)
    {
      int v2 = 65722;
      goto LABEL_991;
    }
    if (v24)
    {
      if (*(_DWORD *)v3 == 1701603700 && *((_WORD *)v3 + 2) == 13366)
      {
        int v2 = 65723;
        goto LABEL_991;
      }
    }
    if (v27 && *(_DWORD *)v3 == 1701603700 && *(_DWORD *)((char *)v3 + 3) == 1869770853)
    {
      int v2 = 65724;
      goto LABEL_991;
    }
    if (v131 && *(_DWORD *)v3 == 1633973603)
    {
      int v2 = 65726;
      goto LABEL_991;
    }
    if (v24)
    {
      if (*(_DWORD *)v3 == 1701603700 && *((_WORD *)v3 + 2) == 30823)
      {
        int v2 = 65727;
        goto LABEL_991;
      }
    }
    if (v7 && *v3 == (void *)0x69687364756F6C63 && *(void **)((char *)v3 + 3) == (void *)0x646C656968736475)
    {
      int v2 = 65728;
      goto LABEL_991;
    }
    char v151 = !v29;
    if (v126) {
      char v151 = 1;
    }
    if ((v151 & 1) == 0)
    {
      if (*v3 == (void *)0x73315F6165726F63 && *((unsigned char *)v3 + 8) == 116)
      {
        int v2 = 65729;
        goto LABEL_991;
      }
      if (*v3 == (void *)0x6E325F6165726F63 && *((unsigned char *)v3 + 8) == 100)
      {
        int v2 = 65730;
        goto LABEL_991;
      }
    }
    char v154 = !v106;
    if (v126) {
      char v154 = 1;
    }
    if ((v154 & 1) == 0 && *v3 == (void *)0x706D6F635F637261 && *((_DWORD *)v3 + 2) == 846488417)
    {
      int v2 = 65731;
      goto LABEL_991;
    }
    if (v8)
    {
      if (*(_DWORD *)v3 == 1852141679 && *((unsigned char *)v3 + 4) == 56)
      {
        int v2 = 65732;
        goto LABEL_991;
      }
    }
    if (v131 && *(_DWORD *)v3 == 943156338)
    {
      int v2 = 65733;
      goto LABEL_991;
    }
    if (v123 && *v3 == (void *)0x726F636F65646976 && *((_WORD *)v3 + 4) == 13669)
    {
      int v2 = 65734;
      goto LABEL_991;
    }
    if (v8)
    {
      if (*(_DWORD *)v3 == 1869297719 && *((unsigned char *)v3 + 4) == 114)
      {
        int v2 = 65735;
        goto LABEL_991;
      }
    }
    if (v27 && *(_DWORD *)v3 == 808990261 && *(_DWORD *)((char *)v3 + 3) == 2019897392)
    {
      int v2 = 65736;
      goto LABEL_991;
    }
    if (v126) {
      int v6 = 0;
    }
    if (v6 == 1)
    {
      if (*(_WORD *)v3 == 24930 && *((unsigned char *)v3 + 2) == 49)
      {
        int v2 = 65737;
        goto LABEL_991;
      }
      if (*(_WORD *)v3 == 24930 && *((unsigned char *)v3 + 2) == 50)
      {
        int v2 = 65738;
        goto LABEL_991;
      }
    }
    if (v8)
    {
      if (*(_DWORD *)v3 == 1919902584 && *((unsigned char *)v3 + 4) == 101)
      {
        int v2 = 65739;
        goto LABEL_991;
      }
    }
    if (v28)
    {
      if (*v3 == (void *)0x6369705F7068636DLL)
      {
        int v2 = 65740;
        goto LABEL_991;
      }
      if (*v3 == (void *)0x3530326C65746E69)
      {
        int v2 = 65741;
        goto LABEL_991;
      }
      if (*v3 == (void *)0x3630326C65746E69)
      {
        int v2 = 65742;
        goto LABEL_991;
      }
      if (*v3 == (void *)0x3730326C65746E69)
      {
        int v2 = 65743;
        goto LABEL_991;
      }
      if (*v3 == (void *)0x3830326C65746E69)
      {
        int v2 = 65744;
        goto LABEL_991;
      }
      if (*v3 == (void *)0x3930326C65746E69)
      {
        int v2 = 65745;
        goto LABEL_991;
      }
    }
    if (v131 && *(_DWORD *)v3 == 842231147)
    {
      int v2 = 65746;
      goto LABEL_991;
    }
    if (v8)
    {
      if (*(_DWORD *)v3 == 863530347 && *((unsigned char *)v3 + 4) == 50)
      {
        int v2 = 65747;
        goto LABEL_991;
      }
      if (*(_DWORD *)v3 == 829975915 && *((unsigned char *)v3 + 4) == 54)
      {
        int v2 = 65748;
        goto LABEL_991;
      }
    }
    if (v131 && *(_DWORD *)v3 == 947416427)
    {
      int v2 = 65749;
      goto LABEL_991;
    }
    if (v8)
    {
      if (*(_DWORD *)v3 == 1918989931 && *((unsigned char *)v3 + 4) == 99)
      {
        int v2 = 65750;
        goto LABEL_991;
      }
    }
    if (v6)
    {
      if (*(_WORD *)v3 == 25699 && *((unsigned char *)v3 + 2) == 112)
      {
        int v2 = 65751;
        goto LABEL_991;
      }
    }
    if (v131)
    {
      switch(*(_DWORD *)v3)
      {
        case 0x65676F63:
          int v2 = 65752;
          goto LABEL_991;
        case 0x6C6F6F63:
          int v2 = 65753;
          goto LABEL_991;
        case 0x63726F6E:
          int v2 = 65754;
          goto LABEL_991;
      }
    }
    if (v7 && *v3 == (void *)0x696C616B5F727363 && *(void **)((char *)v3 + 3) == (void *)0x61626D696C616B5FLL)
    {
      int v2 = 65755;
      goto LABEL_991;
    }
    if (v24)
    {
      if (*(_DWORD *)v3 == 1734634849 && *((_WORD *)v3 + 2) == 30064)
      {
        int v2 = 65760;
        goto LABEL_991;
      }
    }
    if (!v8) {
      goto LABEL_912;
    }
    if (*(_DWORD *)v3 == 1668508018 && *((unsigned char *)v3 + 4) == 118)
    {
      int v2 = 65779;
      goto LABEL_991;
    }
    if (*(_DWORD *)v3 == 1634623852 && *((unsigned char *)v3 + 4) == 105)
    {
      int v2 = 65780;
    }
    else
    {
LABEL_912:
      if (v6 && (*(_WORD *)v3 == 28770 ? (BOOL v171 = *((unsigned char *)v3 + 2) == 102) : (BOOL v171 = 0), v171))
      {
        int v2 = 65783;
      }
      else
      {
        if (v21)
        {
          if (*(_WORD *)v3 == 25974)
          {
            LOBYTE(v131) = 0;
            int v172 = 65787;
          }
          else
          {
            int v172 = v5;
          }
          if ((v131 & 1) == 0)
          {
            int v2 = v172;
            goto LABEL_991;
          }
        }
        else if (!v131)
        {
          int v2 = v5;
          goto LABEL_991;
        }
        if (*(_DWORD *)v3 == 2037085027) {
          int v2 = 65788;
        }
        else {
          int v2 = v5;
        }
      }
    }
  }
LABEL_991:
  if (v176 < 0) {
    operator delete(v175[0]);
  }
  if ((v2 & 0xFF0000) != 0) {
    return (unsigned __int16)v2;
  }
  else {
    return 0;
  }
}

const char *llvm::ELF::convertEMachineToArchName(llvm::ELF *this)
{
  if ((this - 1) > 0xFB) {
    return "None";
  }
  else {
    return off_1E682E950[(__int16)((_WORD)this - 1)];
  }
}

uint64_t llvm::MachO::getCPUType@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  if (*(_DWORD *)(this + 44) != 5)
  {
    if (*(char *)(this + 23) >= 0) {
      uint64_t v8 = this;
    }
    else {
      uint64_t v8 = *(void *)this;
    }
    uint64_t v11 = v8;
    v12 = "type";
    BOOL v9 = std::generic_category();
    sub_1CD4F664C(22, (uint64_t)v9, (uint64_t)"Unsupported triple for mach-o cpu %s: %s", (uint64_t *)&v12, &v11);
  }
  int v5 = *(_DWORD *)(this + 24);
  if ((v5 - 41) > 1) {
    goto LABEL_6;
  }
  this = sub_1CD0BDF24(*(_DWORD *)(this + 24));
  if (this == 64)
  {
    *(unsigned char *)(a2 + 8) &= ~1u;
    int v6 = 16777223;
    goto LABEL_17;
  }
  if (this == 32)
  {
    *(unsigned char *)(a2 + 8) &= ~1u;
    int v6 = 7;
  }
  else
  {
LABEL_6:
    if (v5 > 0x28 || ((1 << v5) & 0x18000000006) == 0)
    {
      if ((v5 - 3) > 2)
      {
        if (v5 > 47)
        {
          if (v5 == 48)
          {
            *(unsigned char *)(a2 + 8) &= ~1u;
            int v6 = 23;
            goto LABEL_17;
          }
          if (v5 == 49)
          {
            *(unsigned char *)(a2 + 8) &= ~1u;
            int v6 = 16777239;
            goto LABEL_17;
          }
        }
        else
        {
          if (v5 == 21)
          {
            *(unsigned char *)(a2 + 8) &= ~1u;
            int v6 = 18;
            goto LABEL_17;
          }
          if (v5 == 23)
          {
            *(unsigned char *)(a2 + 8) &= ~1u;
            int v6 = 16777234;
            goto LABEL_17;
          }
        }
        sub_1CC1B2624((uint64_t)&v10, (uint64_t)"type", v3);
      }
      this = sub_1CD0BDF24(v5);
      if (this == 32) {
        int v6 = 33554444;
      }
      else {
        int v6 = 16777228;
      }
      *(unsigned char *)(a2 + 8) &= ~1u;
    }
    else
    {
      *(unsigned char *)(a2 + 8) &= ~1u;
      int v6 = 12;
    }
  }
LABEL_17:
  *(_DWORD *)a2 = v6;
  return this;
}

void sub_1CC1B2624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v3 = a3;
  }
  else {
    uint64_t v3 = *(void *)a3;
  }
  uint64_t v5 = v3;
  uint64_t v6 = a2;
  int v4 = std::generic_category();
  sub_1CD4F664C(22, (uint64_t)v4, (uint64_t)"Unsupported triple for mach-o cpu %s: %s", &v6, &v5);
}

uint64_t llvm::MachO::getCPUSubType@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (llvm::Triple *)this;
  if (*(_DWORD *)(this + 44) != 5)
  {
    if (*(char *)(this + 23) >= 0) {
      uint64_t v24 = this;
    }
    else {
      uint64_t v24 = *(void *)this;
    }
    uint64_t v31 = v24;
    v32 = "subtype";
    char v25 = std::generic_category();
    sub_1CD4F664C(22, (uint64_t)v25, (uint64_t)"Unsupported triple for mach-o cpu %s: %s", (uint64_t *)&v32, &v31);
  }
  unsigned int v5 = *(_DWORD *)(this + 24);
  if (v5 - 41 <= 1)
  {
    this = sub_1CD0BDF24(*(_DWORD *)(this + 24));
    if (this != 32)
    {
      this = (uint64_t)llvm::Triple::getArchName(v3);
      int v6 = 3;
      if (v11 == 7)
      {
        if (*(_DWORD *)this ^ 0x5F363878 | *(_DWORD *)(this + 3) ^ 0x6834365F) {
          int v6 = 3;
        }
        else {
          int v6 = 8;
        }
      }
      goto LABEL_53;
    }
    goto LABEL_4;
  }
  if (v5 > 0x31) {
    goto LABEL_20;
  }
  if (((1 << v5) & 0xA00000) != 0)
  {
    *(unsigned char *)(a2 + 8) &= ~1u;
    *(_DWORD *)a2 = 0;
    return this;
  }
  if (((1 << v5) & 0x18000000000) != 0) {
    goto LABEL_24;
  }
  if (((1 << v5) & 0x3000000000000) == 0)
  {
LABEL_20:
    if (v5 - 3 < 3)
    {
      this = sub_1CD0BDF24(*(_DWORD *)(this + 24));
      if (this != 32)
      {
        if (*((_DWORD *)v3 + 7) == 31 && v5 == 3) {
          int v6 = 2;
        }
        else {
          int v6 = 0;
        }
        goto LABEL_53;
      }
      goto LABEL_22;
    }
    if (v5 - 1 > 1) {
      sub_1CC1B2624((uint64_t)&v30, (uint64_t)"subtype", this);
    }
LABEL_24:
    ArchName = (char *)llvm::Triple::getArchName((llvm::Triple *)this);
    CanonicalArchName = llvm::ARM::getCanonicalArchName(ArchName, v13);
    this = llvm::ARM::getArchSynonym((unint64_t)CanonicalArchName, v15);
    BOOL v16 = (const void *)this;
    size_t v18 = v17;
    uint64_t v19 = -(uint64_t)v17;
    v20 = &dword_1E6850C98;
    while (1)
    {
      size_t v21 = *((void *)v20 - 7);
      v22 = v20 - 16;
      if (v21 >= v18)
      {
        if (!v18) {
          break;
        }
        this = memcmp((const void *)(*((void *)v20 - 8) + v21 + v19), v16, v18);
        if (!this) {
          break;
        }
      }
      v20 += 18;
      if (v22 + 18 == (int *)off_1E6851828) {
        goto LABEL_29;
      }
    }
    int v29 = *v20;
    int v6 = 9;
    switch(*v20)
    {
      case 6:
        goto LABEL_45;
      case 7:
      case 8:
      case 9:
        goto LABEL_56;
      case 10:
      case 11:
        goto LABEL_49;
      case 12:
      case 13:
      case 15:
      case 16:
      case 17:
        goto LABEL_53;
      case 14:
        int v6 = 14;
        break;
      case 18:
        int v6 = 15;
        break;
      case 19:
        int v6 = 16;
        break;
      default:
        if (v29 == 41) {
          int v6 = 12;
        }
        else {
          int v6 = 9;
        }
        if (v29 == 40) {
          int v6 = 11;
        }
        break;
    }
    goto LABEL_53;
  }
  this = llvm::Triple::getAIRVersion((llvm::Triple *)this);
  if (this == 2)
  {
    uint64_t v26 = this & 0x7FFFFFFF00000000;
    uint64_t v27 = v7 & 0x7FFFFFFF00000000;
    if (!(this & 0x7FFFFFFF00000000 | v7 & 0x7FFFFFFF00000000 | v7 & 0x7FFFFFFF))
    {
      int v6 = 4;
      goto LABEL_53;
    }
    uint64_t v28 = v7 & 0x7FFFFFFF;
    if (!v27 && !(v26 ^ 0x100000000 | v28))
    {
LABEL_45:
      int v6 = 5;
      goto LABEL_53;
    }
    if (!v27 && !(v26 ^ 0x200000000 | v28))
    {
LABEL_49:
      int v6 = 6;
      goto LABEL_53;
    }
    if (!v27 && !(v26 ^ 0x300000000 | v28))
    {
LABEL_56:
      int v6 = 7;
      goto LABEL_53;
    }
    if (!v27 && !(v26 ^ 0x400000000 | v28))
    {
      int v6 = 8;
      goto LABEL_53;
    }
    if (!v27 && !(v26 ^ 0x500000000 | v28))
    {
LABEL_29:
      int v6 = 9;
      goto LABEL_53;
    }
    if (!v27 && !(v26 ^ 0x600000000 | v28))
    {
      int v6 = 10;
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  if (this != 1) {
    goto LABEL_52;
  }
  uint64_t v8 = this & 0x7FFFFFFF00000000;
  uint64_t v9 = v7 & 0x7FFFFFFF;
  uint64_t v10 = v7 & 0x7FFFFFFF00000000;
  if ((v7 & 0x7FFFFFFF00000000) == 0 && !(v8 ^ 0x600000000 | v9))
  {
LABEL_22:
    int v6 = 1;
    goto LABEL_53;
  }
  if (!v10 && !(v8 ^ 0x800000000 | v9))
  {
    int v6 = 2;
    goto LABEL_53;
  }
  if (v10 || v8 ^ 0xB00000000 | v9)
  {
LABEL_52:
    int v6 = 11;
    goto LABEL_53;
  }
LABEL_4:
  int v6 = 3;
LABEL_53:
  *(unsigned char *)(a2 + 8) &= ~1u;
  *(_DWORD *)a2 = v6;
  return this;
}

uint64_t llvm::MachO::getCPUSubType@<X0>(llvm::MachO *this@<X0>, const llvm::Triple *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v5 = a2;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::MachO::getCPUSubType((uint64_t)this, (uint64_t)&v10);
  if (v11)
  {
    uint64_t v8 = v10;
    *(unsigned char *)(a4 + 8) |= 1u;
    *(void *)a4 = v8;
  }
  else
  {
    if (v10 != 2)
    {
      std::generic_category();
      sub_1CD06481C();
    }
    if (v5 >= 0x40)
    {
      std::generic_category();
      sub_1CD06481C();
    }
    if (a3) {
      int v9 = -1073741822;
    }
    else {
      int v9 = -2147483646;
    }
    *(unsigned char *)(a4 + 8) &= ~1u;
    *(_DWORD *)a4 = v9 | (v5 << 24);
  }
  return result;
}

uint64_t llvm::identify_magic(unsigned __int8 *a1, unint64_t a2)
{
  if (a2 < 4) {
    return 0;
  }
  unsigned int v4 = *a1;
  if (v4 <= 0x65)
  {
    if (*a1 <= 0x3Bu)
    {
      if (*a1 <= 2u)
      {
        if (*a1)
        {
          if (v4 == 1)
          {
            if (*(unsigned __int16 *)a1 == 57089) {
              return 31;
            }
            if (*(__int16 *)a1 == -2303) {
              return 32;
            }
          }
          return 0;
        }
        if (*(_DWORD *)a1 == -65536)
        {
          if (a2 < 0x1C) {
            return 28;
          }
          if (*(void *)(a1 + 12) != 0x4BA9BAEED1BAA1C7 || *(void *)(a1 + 20) != 0xB8DCA46AF6FA20AFLL)
          {
            if (*(void *)(a1 + 12) ^ 0x4DABD9A50CB3FE38 | *(void *)(a1 + 20) ^ 0xC2532622B6D69BACLL) {
              return 28;
            }
            else {
              return 26;
            }
          }
        }
        else
        {
          if (a2 >= 0x10 && *(void *)a1 == 0x2000000000 && *((void *)a1 + 1) == 0xFFFF0000FFFFLL) {
            return 30;
          }
          if (a1[1])
          {
            if (*(_DWORD *)a1 == 1836278016) {
              return 33;
            }
            return 0;
          }
        }
        return 27;
      }
      if (v4 == 3)
      {
        if (!(*(unsigned __int16 *)a1 ^ 0xF003 | a1[2])) {
          return 8;
        }
        return 0;
      }
      if (v4 != 33)
      {
        if (v4 == 45 && a2 >= 9)
        {
          BOOL v13 = *(void *)a1 == 0x70617421202D2D2DLL && a1[8] == 105;
          if (v13) {
            return 35;
          }
          if (a2 >= 0xA && *(void *)a1 == 0x686372610A2D2D2DLL && *((_WORD *)a1 + 4) == 14963) {
            return 35;
          }
        }
        return 0;
      }
      if (a2 < 8) {
        return 0;
      }
      if (*(void *)a1 == 0xA3E686372613C21) {
        return 2;
      }
      uint64_t v23 = *(void *)a1;
      uint64_t v24 = 0x6E6968743C21;
LABEL_94:
      if (v23 != (v24 & 0xFFFFFFFFFFFFLL | 0xA3E000000000000)) {
        return 0;
      }
      return 2;
    }
    if (*a1 <= 0x4Cu)
    {
      if (v4 != 60)
      {
        if (v4 != 66)
        {
          if (v4 != 76) {
            return 0;
          }
LABEL_69:
          if (a1[1] == 1) {
            return 27;
          }
          goto LABEL_70;
        }
        int v25 = *(_DWORD *)a1;
        int v26 = -557825214;
        return v25 == v26;
      }
      if (a2 < 8) {
        return 0;
      }
      uint64_t v23 = *(void *)a1;
      uint64_t v24 = 0x66616769623CLL;
      goto LABEL_94;
    }
    if (v4 != 77)
    {
      if (v4 != 80)
      {
        if (v4 == 100)
        {
          int v19 = a1[1];
          if (v19 == 170 || v19 == 134) {
            return 27;
          }
          else {
            return 0;
          }
        }
        return 0;
      }
      goto LABEL_68;
    }
    if (a2 >= 0x40 && *(_WORD *)a1 == 23117)
    {
      unint64_t v27 = *((unsigned int *)a1 + 15);
      if (a2 < v27) {
        unint64_t v27 = a2;
      }
      if (a2 - v27 >= 4 && *(_DWORD *)&a1[v27] == 17744) {
        return 29;
      }
    }
    else if (a2 < 0x1A)
    {
      goto LABEL_126;
    }
    if (*(void *)a1 == 0x666F736F7263694DLL
      && *((void *)a1 + 1) == 0x202B2B432F432074
      && *((void *)a1 + 2) == 0x30302E372046534DLL
      && *((_WORD *)a1 + 12) == 2573)
    {
      return 34;
    }
LABEL_126:
    if (*(_DWORD *)a1 == 1347241037) {
      return 25;
    }
    if (*(_DWORD *)a1 == 1112298573) {
      return 37;
    }
    return 0;
  }
  if (*a1 > 0xC3u)
  {
    if (*a1 <= 0xDDu)
    {
      switch(*a1)
      {
        case 0xC4u:
          goto LABEL_69;
        case 0xCAu:
          if (*(_DWORD *)a1 == -1095041334)
          {
            if (a2 < 8) {
              return 0;
            }
          }
          else if (a2 < 8 || *(_DWORD *)a1 != -1078264118)
          {
            return 0;
          }
          if ((char)a1[7] >= 43) {
            return 0;
          }
          uint64_t v2 = 23;
          break;
        case 0xCBu:
          if (*(_DWORD *)a1 != -1095041333) {
            return 0;
          }
          return 24;
        case 0xCEu:
        case 0xCFu:
          goto LABEL_51;
        default:
          return 0;
      }
      return v2;
    }
    if (v4 != 222)
    {
      if (v4 != 240)
      {
        if (v4 == 254)
        {
LABEL_51:
          if (*(_DWORD *)a1 == -822415874 || *(_DWORD *)a1 == -805638658)
          {
            unint64_t v21 = 32;
            if (a1[3] == 206) {
              unint64_t v21 = 28;
            }
            if (a2 < v21) {
              return 0;
            }
            uint64_t v16 = 15;
            uint64_t v17 = 14;
            uint64_t v18 = 13;
          }
          else
          {
            if (*(_DWORD *)a1 != -17958194 && *(_DWORD *)a1 != -17958193) {
              return 0;
            }
            BOOL v13 = v4 == 206;
            unint64_t v15 = 32;
            if (v13) {
              unint64_t v15 = 28;
            }
            if (a2 < v15) {
              return 0;
            }
            uint64_t v16 = 12;
            uint64_t v17 = 13;
            uint64_t v18 = 14;
          }
          unsigned int v22 = (unsigned __int16)(((a1[v17] << 8) | (a1[v18] << 12) | (char)a1[v16]) - 1);
          if (v22 < 0xE) {
            return v22 + 9;
          }
          return 0;
        }
        return 0;
      }
      goto LABEL_68;
    }
    int v25 = *(_DWORD *)a1;
    int v26 = 186106078;
    return v25 == v26;
  }
  uint64_t v5 = v4 - 102;
  if (v5 > 0x2A) {
    return 0;
  }
  if (((1 << v5) & 0x60000001) != 0)
  {
LABEL_68:
    if (*(_DWORD *)a1 == -1168773808) {
      return 36;
    }
    goto LABEL_69;
  }
  if (((1 << v5) & 0x40000000004) != 0)
  {
LABEL_70:
    if (a1[1] != 2) {
      return 0;
    }
    return 27;
  }
  if (v5 != 25 || a2 < 0x12 || *(_DWORD *)a1 != 1179403647) {
    return 0;
  }
  int v6 = a1[5];
  uint64_t v7 = 16;
  if (v6 != 2) {
    uint64_t v7 = 17;
  }
  int v8 = a1[v7];
  uint64_t v2 = 3;
  if (!v8)
  {
    BOOL v13 = v6 == 2;
    uint64_t v9 = 16;
    if (v13) {
      uint64_t v9 = 17;
    }
    int v10 = (char)a1[v9];
    unsigned int v11 = v10 - 1;
    unsigned int v12 = v10 + 3;
    if (v11 >= 4) {
      return 3;
    }
    else {
      return v12;
    }
  }
  return v2;
}

uint64_t llvm::identify_magic(unsigned __int8 *a1, _DWORD *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  sub_1CD096690(a1, (llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, 0, 0, 0, 0, (uint64_t)&v5);
  if (v6) {
    return v5;
  }
  uint64_t v3 = v5;
  *a2 = llvm::identify_magic(*(unsigned __int8 **)(v5 + 8), *(void *)(v5 + 16) - *(void *)(v5 + 8));
  std::system_category();
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  return 0;
}

void llvm::msgpack::DocNode::convertToArray(llvm::msgpack::DocNode *this)
{
}

void sub_1CC1B3344()
{
}

void llvm::msgpack::DocNode::convertToMap(llvm::msgpack::DocNode *this)
{
}

void sub_1CC1B3508()
{
}

uint64_t llvm::msgpack::MapDocNode::find(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)&v6[0] = *v4 + 176;
  *(void *)&v6[1] = a2;
  *(void *)&v6[2] = a3;
  return sub_1CC1B437C(v3, v6);
}

void *llvm::msgpack::MapDocNode::operator[](void **a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v4 = **a1 + 176;
  *((void *)&v4 + 1) = a2;
  uint64_t v5 = a3;
  return llvm::msgpack::MapDocNode::operator[]((uint64_t)a1, &v4);
}

void *llvm::msgpack::MapDocNode::operator[](uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v8 = a2;
  long long v4 = sub_1CC1B4530(v3, (double *)a2, (uint64_t)&std::piecewise_construct, &v8);
  uint64_t v7 = *((void *)v4 + 7);
  uint64_t result = (void *)v4 + 7;
  uint64_t v6 = v7;
  if (!v7 || *(unsigned char *)(v6 + 8) == 10) {
    void *result = **(void **)a1 + 256;
  }
  return result;
}

void *llvm::msgpack::MapDocNode::operator[](void **a1, int a2)
{
  *(void *)&long long v3 = **a1 + 96;
  *((void *)&v3 + 1) = a2;
  return llvm::msgpack::MapDocNode::operator[]((uint64_t)a1, &v3);
}

void *llvm::msgpack::MapDocNode::operator[](void **a1, unsigned int a2)
{
  *(void *)&long long v3 = **a1 + 112;
  *((void *)&v3 + 1) = a2;
  return llvm::msgpack::MapDocNode::operator[]((uint64_t)a1, &v3);
}

void *llvm::msgpack::MapDocNode::operator[](void **a1, uint64_t a2)
{
  *(void *)&long long v3 = **a1 + 96;
  *((void *)&v3 + 1) = a2;
  return llvm::msgpack::MapDocNode::operator[]((uint64_t)a1, &v3);
}

{
  long long v3;

  *(void *)&long long v3 = **a1 + 112;
  *((void *)&v3 + 1) = a2;
  return llvm::msgpack::MapDocNode::operator[]((uint64_t)a1, &v3);
}

char *llvm::msgpack::ArrayDocNode::operator[](uint64_t a1, unint64_t a2)
{
  long long v4 = *(void ***)(a1 + 8);
  uint64_t v5 = (char *)*v4;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v4[1] - (unsigned char *)*v4) >> 3);
  if (v6 <= a2)
  {
    *(void *)&long long v9 = **(void **)a1 + 256;
    unint64_t v7 = a2 + 1 - v6;
    if (a2 + 1 <= v6)
    {
      if (a2 + 1 < v6) {
        v4[1] = &v5[24 * a2 + 24];
      }
    }
    else
    {
      sub_1CC1B467C(v4, v7, &v9);
    }
    uint64_t v5 = **(char ***)(a1 + 8);
  }
  return &v5[24 * a2];
}

void *llvm::msgpack::DocNode::operator=(void *result, uint64_t a2, uint64_t a3)
{
  void *result = *(void *)*result + 176;
  result[1] = a2;
  result[2] = a3;
  return result;
}

uint64_t llvm::msgpack::DocNode::operator=(uint64_t result, char a2)
{
  *(void *)uint64_t result = **(void **)result + 144;
  *(unsigned char *)(result + 8) = a2;
  return result;
}

void *llvm::msgpack::DocNode::operator=(void *result, int a2)
{
  void *result = *(void *)*result + 96;
  result[1] = a2;
  return result;
}

void *llvm::msgpack::DocNode::operator=(void *result, unsigned int a2)
{
  void *result = *(void *)*result + 112;
  result[1] = a2;
  return result;
}

void *llvm::msgpack::DocNode::operator=(void *result, uint64_t a2)
{
  void *result = *(void *)*result + 96;
  result[1] = a2;
  return result;
}

{
  void *result = *(void *)*result + 112;
  result[1] = a2;
  return result;
}

uint64_t llvm::msgpack::Document::readFromBlob(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t (*a5)(uint64_t, char *, long long *, uint64_t *), uint64_t a6)
{
  v59[36] = *MEMORY[0x1E4F143B8];
  v48[0] = a2;
  v48[1] = a3;
  v48[2] = "MsgPack";
  v48[3] = 7;
  v48[4] = a2;
  v48[5] = a2 + a3;
  int v57 = v59;
  uint64_t v58 = 0x400000000;
  if (a4) {
    sub_1CC1B3344();
  }
  uint64_t v37 = a1 + 96;
  uint64_t v38 = a1 + 176;
  uint64_t v35 = a1 + 144;
  uint64_t v36 = a1 + 160;
  uint64_t v34 = a1 + 112;
  while (2)
  {
    LOBYTE(v45) = 0;
    uint64_t v46 = 0;
    llvm::msgpack::Reader::read(v48, &v45, &v51);
    if (BYTE8(v51))
    {
      uint64_t v32 = v51;
      *(void *)&long long v51 = 0;
      if (v32) {
        (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
      }
      if (v58 == 1) {
        uint64_t v30 = a4;
      }
      else {
        uint64_t v30 = 0;
      }
      goto LABEL_41;
    }
    uint64_t v8 = a1 + 128;
    switch(LOBYTE(v45))
    {
      case 0:
        uint64_t v44 = v46;
        uint64_t v8 = v37;
        goto LABEL_14;
      case 1:
        uint64_t v44 = v46;
        uint64_t v8 = v34;
        goto LABEL_14;
      case 2:
        goto LABEL_14;
      case 3:
        LOBYTE(v44) = v46;
        uint64_t v8 = v35;
        goto LABEL_14;
      case 4:
        uint64_t v44 = v46;
        uint64_t v8 = v36;
        goto LABEL_14;
      case 5:
        uint64_t v6 = v47;
        uint64_t v44 = v46;
        uint64_t v8 = v38;
LABEL_14:
        long long v9 = (char *)(a1 + 72);
        if (!v58) {
          goto LABEL_21;
        }
        int v10 = (char *)v57 + 72 * v58;
        uint64_t v11 = (uint64_t)(v10 - 72);
        int v12 = *(unsigned __int8 *)(*((void *)v10 - 9) + 8);
        if (v12 == 8)
        {
          v14 = (char *)v57 + 72 * v58;
          long long v9 = (char *)*((void *)v14 - 4);
          if (v9)
          {
            *((void *)v14 - 4) = 0;
            ++*((void *)v14 - 6);
            goto LABEL_21;
          }
          uint64_t v28 = v44;
          *((void *)v14 - 3) = v8;
          *((void *)v14 - 2) = v28;
          *((void *)v14 - 1) = v6;
          *(void *)&long long v42 = v8;
          *((void *)&v42 + 1) = v28;
          uint64_t v43 = v6;
          int v29 = llvm::msgpack::MapDocNode::operator[](v11, &v42);
          unsigned int v26 = v58;
          *((void *)v57 + 9 * v58 - 4) = v29;
LABEL_39:
          if (!v26) {
            goto LABEL_40;
          }
          continue;
        }
        if (v12 != 7) {
          sub_1CC1B3508();
        }
        unint64_t v13 = *((void *)v10 - 6);
        *((void *)v10 - 6) = v13 + 1;
        long long v9 = llvm::msgpack::ArrayDocNode::operator[](v11, v13);
LABEL_21:
        if (*(void *)v9 && *(unsigned char *)(*(void *)v9 + 8) != 10)
        {
          uint64_t v17 = a1 + 128;
          if (v58)
          {
            uint64_t v18 = (char *)v57 + 72 * v58;
            uint64_t v19 = *((void *)v18 - 3);
            uint64_t v17 = a1 + 128;
            if (v19)
            {
              uint64_t v17 = a1 + 128;
              if (*(unsigned char *)(v19 + 8) != 10)
              {
                long long v41 = *((_OWORD *)v18 - 1);
                uint64_t v17 = *((void *)v18 - 3);
              }
            }
          }
          long long v50 = v41;
          *(void *)&long long v51 = v8;
          *((void *)&v51 + 1) = v44;
          uint64_t v52 = v6;
          uint64_t v49 = v17;
          unsigned int v15 = a5(a6, v9, &v51, &v49);
          if ((v15 & 0x80000000) != 0)
          {
LABEL_49:
            uint64_t v30 = 0;
            goto LABEL_41;
          }
          uint64_t v8 = *(void *)v9;
        }
        else
        {
          unsigned int v15 = 0;
          uint64_t v16 = v44;
          *(void *)long long v9 = v8;
          *((void *)v9 + 1) = v16;
          *((void *)v9 + 2) = v6;
        }
        if (*(unsigned __int8 *)(v8 + 8) - 7 < 2)
        {
          uint64_t v20 = *((void *)v9 + 2);
          long long v51 = *(_OWORD *)v9;
          uint64_t v52 = v20;
          uint64_t v53 = v15;
          uint64_t v54 = v46 + v15;
          uint64_t v55 = 0;
          uint64_t v56 = 0;
          unint64_t v21 = sub_1CC1B4828((uint64_t)&v57, (unint64_t)&v51);
          unsigned int v22 = (char *)v57 + 72 * v58;
          *(_OWORD *)unsigned int v22 = *(_OWORD *)v21;
          long long v24 = *(_OWORD *)(v21 + 32);
          long long v23 = *(_OWORD *)(v21 + 48);
          long long v25 = *(_OWORD *)(v21 + 16);
          *((void *)v22 + 8) = *(void *)(v21 + 64);
          *((_OWORD *)v22 + 2) = v24;
          *((_OWORD *)v22 + 3) = v23;
          *((_OWORD *)v22 + 1) = v25;
          unsigned int v26 = v58 + 1;
          LODWORD(v58) = v26;
          if (!v26) {
            goto LABEL_40;
          }
LABEL_34:
          while (1)
          {
            unint64_t v27 = (char *)v57 + 72 * v26;
            if (*((void *)v27 - 4) || *((void *)v27 - 6) != *((void *)v27 - 5)) {
              goto LABEL_39;
            }
            LODWORD(v58) = --v26;
            if (!v26) {
              goto LABEL_40;
            }
          }
        }
        unsigned int v26 = v58;
        if (v58) {
          goto LABEL_34;
        }
LABEL_40:
        uint64_t v30 = 1;
LABEL_41:
        if (v57 != v59) {
          free(v57);
        }
        return v30;
      case 7:
        sub_1CC1B3344();
      case 8:
        sub_1CC1B3508();
      default:
        goto LABEL_49;
    }
  }
}

void llvm::msgpack::Document::writeToBlob(uint64_t a1, uint64_t a2)
{
  v42[24] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  int v32 = 0;
  char v36 = 0;
  uint64_t v37 = 0;
  uint64_t v39 = a2;
  int v38 = 0;
  uint64_t v31 = &unk_1F2646F30;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v28 = &v31;
  int v29 = 0;
  char v30 = 0;
  char v40 = v42;
  uint64_t v41 = 0x400000000;
  long long v2 = *(_OWORD *)(a1 + 72);
  size_t v3 = *(void *)(a1 + 88);
  while (1)
  {
    uint64_t v4 = v2;
    switch(*(unsigned char *)(v2 + 8))
    {
      case 1:
        llvm::msgpack::Writer::write((llvm::raw_ostream **)&v28, *((unint64_t *)&v2 + 1));
        goto LABEL_22;
      case 2:
        v23[0] = -64;
        goto LABEL_13;
      case 3:
        if (BYTE8(v2)) {
          char v5 = -61;
        }
        else {
          char v5 = -62;
        }
        v23[0] = v5;
LABEL_13:
        llvm::raw_ostream::write((llvm::raw_ostream *)&v31, v23, 1uLL);
        goto LABEL_22;
      case 4:
      case 6:
        __break(1u);
        JUMPOUT(0x1CC1B418CLL);
      case 5:
        llvm::msgpack::Writer::write((uint64_t)&v28, *((const char **)&v2 + 1), v3);
        goto LABEL_22;
      case 7:
        uint64_t v6 = (uint64_t *)*((void *)&v2 + 1);
        long long v21 = v2;
        llvm::msgpack::Writer::writeArraySize((llvm::raw_ostream **)&v28, -1431655765 * ((*(void *)(*((void *)&v2 + 1) + 8) - **((void **)&v2 + 1)) >> 3));
        *(_OWORD *)long long v23 = v21;
        size_t v24 = v3;
        uint64_t v25 = 0;
        if (*(unsigned char *)(v4 + 8) != 7) {
          sub_1CC1B3344();
        }
        uint64_t v26 = *v6;
        char v27 = 0;
        goto LABEL_20;
      case 8:
        unint64_t v7 = (uint64_t *)*((void *)&v2 + 1);
        long long v22 = v2;
        llvm::msgpack::Writer::writeMapSize((llvm::raw_ostream **)&v28, *(_DWORD *)(*((void *)&v2 + 1) + 16));
        *(_OWORD *)long long v23 = v22;
        size_t v24 = v3;
        if (*(unsigned char *)(v4 + 8) != 8) {
          sub_1CC1B3508();
        }
        uint64_t v25 = *v7;
        uint64_t v26 = 0;
        char v27 = 1;
LABEL_20:
        uint64_t v8 = (_OWORD *)sub_1CC1B48A4((uint64_t)&v40, (unint64_t)v23);
        long long v9 = (char *)v40 + 48 * v41;
        long long v11 = v8[1];
        long long v10 = v8[2];
        *long long v9 = *v8;
        v9[1] = v11;
        v9[2] = v10;
        unsigned int v12 = v41 + 1;
        LODWORD(v41) = v41 + 1;
        break;
      default:
        llvm::msgpack::Writer::write((llvm::raw_ostream **)&v28, *((unint64_t *)&v2 + 1));
LABEL_22:
        unsigned int v12 = v41;
        break;
    }
    if (!v12) {
      break;
    }
    while (1)
    {
      unint64_t v13 = (char *)v40 + 48 * v12;
      int v14 = *(unsigned __int8 *)(*((void *)v13 - 6) + 8);
      if (v14 != 8) {
        break;
      }
      if (*((void *)v13 - 3) != *((void *)v13 - 5) + 8) {
        goto LABEL_33;
      }
LABEL_30:
      LODWORD(v41) = --v12;
      if (!v12) {
        goto LABEL_42;
      }
    }
    if (v14 != 7) {
      sub_1CC1B3344();
    }
    if (*((void *)v13 - 2) == *(void *)(*((void *)v13 - 5) + 8)) {
      goto LABEL_30;
    }
    unint64_t v13 = (char *)v40 + 48 * v12;
    if (*(unsigned char *)(*((void *)v13 - 6) + 8) != 8)
    {
      uint64_t v20 = (long long *)*((void *)v13 - 2);
      long long v2 = *v20;
      size_t v3 = *((void *)v20 + 2);
      *((void *)v13 - 2) = (char *)v20 + 24;
      continue;
    }
LABEL_33:
    uint64_t v15 = *((void *)v13 - 3);
    if (*(v13 - 8))
    {
      long long v2 = *(_OWORD *)(v15 + 32);
      size_t v3 = *(void *)(v15 + 48);
      *(v13 - 8) = 0;
    }
    else
    {
      uint64_t v16 = *(void **)(v15 + 8);
      uint64_t v17 = (void *)*((void *)v13 - 3);
      if (v16)
      {
        do
        {
          uint64_t v18 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v18 = (void *)v17[2];
          BOOL v19 = *v18 == (void)v17;
          uint64_t v17 = v18;
        }
        while (!v19);
      }
      long long v2 = *(_OWORD *)(v15 + 56);
      size_t v3 = *(void *)(v15 + 72);
      *((void *)v13 - 3) = v18;
      *(v13 - 8) = 1;
    }
  }
LABEL_42:
  if (v40 != v42) {
    free(v40);
  }
  uint64_t v31 = &unk_1F2646B98;
  if (v38 == 1 && v33) {
    MEMORY[0x1D25D9CB0](v33, 0x1000C8077774924);
  }
}

void sub_1CC1B41B0(uint64_t a1)
{
  long long v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

char *sub_1CC1B4204(char **a1, uint64_t *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61) {
    abort();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (v7)
  {
    if (v7 >> 61) {
      sub_1CB833614();
    }
    uint64_t v8 = (char *)operator new(8 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  long long v9 = &v8[8 * v2];
  long long v10 = &v8[8 * v7];
  uint64_t v11 = *a2;
  *a2 = 0;
  *(void *)long long v9 = v11;
  unsigned int v12 = v9 + 8;
  unint64_t v13 = *a1;
  int v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    do
    {
      uint64_t v15 = *((void *)v14 - 1);
      v14 -= 8;
      *(void *)int v14 = 0;
      *((void *)v9 - 1) = v15;
      v9 -= 8;
    }
    while (v14 != v13);
    int v14 = *a1;
    uint64_t v16 = a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    while (v16 != v14)
    {
      uint64_t v18 = *((void *)v16 - 1);
      v16 -= 8;
      uint64_t v17 = v18;
      *(void *)uint64_t v16 = 0;
      if (v18)
      {
        sub_1CC1B4328(v17, *(void **)(v17 + 8));
        MEMORY[0x1D25D9CE0](v17, 0x1020C4062D53EE8);
      }
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_1CC1B4328(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1CC1B4328(a1, *a2);
    sub_1CC1B4328(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t sub_1CC1B437C(uint64_t a1, double *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    int v6 = sub_1CC1B43F8((double *)(v3 + 32), a2);
    unint64_t v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      unint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || sub_1CC1B43F8(a2, (double *)(v5 + 32))) {
    return v2;
  }
  return v5;
}

uint64_t sub_1CC1B43F8(double *a1, double *a2)
{
  double v2 = *a2;
  if (!*(void *)a2) {
    return 0;
  }
  unsigned int v3 = *(unsigned __int8 *)(*(void *)&v2 + 8);
  if (v3 == 10) {
    return 0;
  }
  double v6 = *a1;
  if (*(void *)a1 == *(void *)&v2)
  {
    uint64_t result = 0;
    switch(*(unsigned char *)(*(void *)&v2 + 8))
    {
      case 1:
        BOOL v8 = *((void *)a1 + 1) >= *((void *)a2 + 1);
        return !v8;
      case 2:
        return result;
      case 3:
        BOOL v8 = *((unsigned __int8 *)a1 + 8) >= *((unsigned __int8 *)a2 + 8);
        return !v8;
      case 4:
        uint64_t result = a1[1] < a2[1];
        break;
      case 5:
      case 6:
        unint64_t v9 = *((void *)a1 + 2);
        unint64_t v10 = *((void *)a2 + 2);
        if (v10 >= v9) {
          size_t v11 = *((void *)a1 + 2);
        }
        else {
          size_t v11 = *((void *)a2 + 2);
        }
        if (v11 && (int v12 = memcmp(*((const void **)a1 + 1), *((const void **)a2 + 1), v11)) != 0)
        {
          int v13 = (v12 >> 31) | 1;
        }
        else
        {
          if (v9 < v10) {
            int v13 = -1;
          }
          else {
            int v13 = 1;
          }
          if (v9 == v10) {
            int v13 = 0;
          }
        }
        uint64_t result = v13 == -1;
        break;
      default:
        uint64_t result = *((void *)a1 + 1) < *((void *)a2 + 1);
        break;
    }
  }
  else if (v6 == 0.0)
  {
    return 1;
  }
  else
  {
    unsigned int v7 = *(unsigned __int8 *)(*(void *)&v6 + 8);
    BOOL v8 = v7 != 10 && v7 >= v3;
    return !v8;
  }
  return result;
}

_OWORD *sub_1CC1B4530(uint64_t a1, double *a2, uint64_t a3, _OWORD **a4)
{
  double v6 = (void **)sub_1CC1B45E8(a1, &v14, a2);
  unsigned int v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = v6;
    unsigned int v7 = operator new(0x50uLL);
    uint64_t v9 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v9;
    *((void *)v7 + 7) = 0;
    uint64_t v10 = v14;
    *(void *)unsigned int v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v10;
    *BOOL v8 = v7;
    uint64_t v11 = **(void **)a1;
    int v12 = (uint64_t *)v7;
    if (v11)
    {
      *(void *)a1 = v11;
      int v12 = (uint64_t *)*v8;
    }
    sub_1CB8358B8(*(uint64_t **)(a1 + 8), v12);
    ++*(void *)(a1 + 16);
  }
  return v7;
}

void *sub_1CC1B45E8(uint64_t a1, void *a2, double *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unsigned int v7 = (void *)v4;
        BOOL v8 = (double *)(v4 + 32);
        if (!sub_1CC1B43F8(a3, (double *)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_1CC1B43F8(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    unsigned int v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void sub_1CC1B467C(void **a1, unint64_t a2, long long *a3)
{
  unsigned int v7 = (char *)a1[1];
  double v6 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      int v13 = &v7[24 * a2];
      uint64_t v14 = 24 * a2;
      do
      {
        long long v15 = *a3;
        *((void *)v7 + 2) = *((void *)a3 + 2);
        *(_OWORD *)unsigned int v7 = v15;
        v7 += 24;
        v14 -= 24;
      }
      while (v14);
      unsigned int v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        sub_1CB833614();
      }
      int v12 = (char *)operator new(24 * v11);
    }
    else
    {
      int v12 = 0;
    }
    uint64_t v16 = &v12[24 * v8];
    uint64_t v17 = &v16[24 * a2];
    uint64_t v18 = 24 * a2;
    BOOL v19 = v16;
    do
    {
      long long v20 = *a3;
      *((void *)v19 + 2) = *((void *)a3 + 2);
      *(_OWORD *)BOOL v19 = v20;
      v19 += 24;
      v18 -= 24;
    }
    while (v18);
    long long v21 = (char *)*a1;
    if (v7 != *a1)
    {
      do
      {
        long long v22 = *(_OWORD *)(v7 - 24);
        *((void *)v16 - 1) = *((void *)v7 - 1);
        *(_OWORD *)(v16 - 24) = v22;
        v16 -= 24;
        v7 -= 24;
      }
      while (v7 != v21);
      unsigned int v7 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = &v12[24 * v11];
    if (v7)
    {
      operator delete(v7);
    }
  }
}

unint64_t sub_1CC1B4828(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v4 = *(void *)a1 + 72 * v2;
    if (*(void *)a1 > a2 || v4 <= a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return a2;
}

unint64_t sub_1CC1B48A4(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v4 = *(void *)a1 + 48 * v2;
    if (*(void *)a1 > a2 || v4 <= a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return a2;
}

void llvm::msgpack::DocNode::toString(llvm::msgpack::DocNode *this@<X0>, uint64_t a2@<X8>)
{
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v18 = 0;
  int v9 = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  uint64_t v16 = v17;
  int v15 = 0;
  unint64_t v8 = &unk_1F2646F30;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  switch(*(unsigned char *)(*(void *)this + 8))
  {
    case 1:
      if (*(unsigned char *)(**(void **)this + 272))
      {
        uint64_t v3 = *((void *)this + 1);
        v7[0] = &unk_1F25FF808;
        v7[1] = "%#llx";
        v7[2] = v3;
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v8, (uint64_t)v7);
      }
      else
      {
        sub_1CD098D14((llvm::raw_ostream *)&v8, *((void *)this + 1), 0, 0, 0);
      }
      break;
    case 2:
      break;
    case 3:
      if (*((unsigned char *)this + 8)) {
        unint64_t v4 = "true";
      }
      else {
        unint64_t v4 = "false";
      }
      if (*((unsigned char *)this + 8)) {
        size_t v5 = 4;
      }
      else {
        size_t v5 = 5;
      }
      goto LABEL_14;
    case 4:
      llvm::write_double((llvm::raw_ostream *)&v8, 0, 0, 0, *((double *)this + 1));
      break;
    case 5:
      size_t v5 = *((void *)this + 2);
      if (v5)
      {
        unint64_t v4 = (const char *)*((void *)this + 1);
LABEL_14:
        llvm::raw_ostream::write((llvm::raw_ostream *)&v8, v4, v5);
      }
      break;
    default:
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v8, *((void *)this + 1));
      break;
  }
  if (*((char *)v16 + 23) < 0)
  {
    sub_1CB8BDF7C(a2, *v16, (unint64_t)v16[1]);
  }
  else
  {
    long long v6 = *(_OWORD *)v16;
    *(void *)(a2 + 16) = v16[2];
    *(_OWORD *)a2 = v6;
  }
  unint64_t v8 = &unk_1F2646B98;
  if (v15 == 1 && v10) {
    MEMORY[0x1D25D9CB0](v10, 0x1000C8077774924);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
}

const char *llvm::msgpack::DocNode::fromString(uint64_t a1, std::string::value_type *a2, std::string::size_type a3, uint64_t a4, uint64_t a5)
{
  char v8 = 0;
  switch(a5)
  {
    case 0:
      goto LABEL_28;
    case 1:
    case 2:
    case 3:
      goto LABEL_41;
    case 4:
      if (*(_DWORD *)a4 != 1953392929)
      {
        if (*(_DWORD *)a4 == 1818848801)
        {
          *(void *)a1 = **(void **)a1 + 128;
          return "";
        }
LABEL_41:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v21 = 0;
        uint64_t v9 = llvm::yaml::ScalarTraits<std::string,void>::input(a2, a3, 0, (uint64_t)__p);
        if (!v18) {
          operator new[]();
        }
        if (SHIBYTE(v21) < 0) {
          operator delete(__p[0]);
        }
        return (const char *)v9;
      }
      char v8 = 1;
LABEL_28:
      *(void *)a1 = **(void **)a1 + 112;
      *(void *)(a1 + 8) = 0;
      __p[0] = 0;
      if ((llvm::getAsUnsignedInteger((unsigned __int8 *)a2, a3, 0, (unint64_t *)__p) & 1) == 0
        || (*(void *)a1 = **(void **)a1 + 96,
            *(void *)(a1 + 8) = 0,
            __p[0] = 0,
            (llvm::getAsSignedInteger((uint64_t)a2, a3, 0, (unint64_t *)__p) & 1) == 0))
      {
        uint64_t v9 = 0;
        *(void **)(a1 + 8) = __p[0];
        return (const char *)v9;
      }
      if (v8) {
        return "invalid number";
      }
      char v13 = 0;
LABEL_34:
      *(void *)a1 = **(void **)a1 + 144;
      *(unsigned char *)(a1 + 8) = 0;
      unsigned __int16 v16 = llvm::yaml::parseBool(a2, a3);
      if (v16 >= 0x100u)
      {
        uint64_t v9 = 0;
        *(unsigned char *)(a1 + 8) = v16;
        return (const char *)v9;
      }
      if (v13) {
        return "invalid BOOLean";
      }
      char v15 = 0;
LABEL_39:
      *(void *)a1 = **(void **)a1 + 160;
      *(void *)(a1 + 8) = 0;
      uint64_t v9 = (uint64_t)llvm::yaml::ScalarTraits<double,void>::input((uint64_t)a2, a3, 0, (double *)(a1 + 8));
      if ((v15 & 1) == 0 && v17) {
        goto LABEL_41;
      }
      return (const char *)v9;
    case 5:
      if (*(_DWORD *)a4 != 1869570593 || *(unsigned char *)(a4 + 4) != 108) {
        goto LABEL_41;
      }
      char v13 = 1;
      goto LABEL_34;
    case 6:
      if (*(_DWORD *)a4 != 1869375009 || *(_WORD *)(a4 + 4) != 29793) {
        goto LABEL_41;
      }
      char v15 = 1;
      goto LABEL_39;
    default:
      if (a5 != 21) {
        goto LABEL_41;
      }
      BOOL v10 = *(void *)a4 == 0x6C6D61793A676174 && *(void *)(a4 + 8) == 0x3030322C67726F2ELL;
      if (!v10 || *(void *)(a4 + 13) != 0x7274733A32303032) {
        goto LABEL_41;
      }
      char v8 = 0;
      goto LABEL_28;
  }
}

void llvm::msgpack::Document::toYAML(llvm::msgpack::Document *this, llvm::raw_ostream *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1F2646940;
  v3[1] = 0;
  v3[2] = a2;
  int v4 = 70;
  size_t v5 = v7;
  uint64_t v6 = 0x800000000;
  memset(&v7[32], 0, 48);
  llvm::yaml::Output::beginDocuments((llvm::yaml::Output *)v3);
  sub_1CC1B50F8((uint64_t)v3, (llvm::msgpack::Document *)((char *)this + 72));
  llvm::yaml::Output::output((uint64_t)v3, "\n...\n", 5uLL);
  v3[0] = &unk_1F2646940;
  if (v5 != v7) {
    free(v5);
  }
}

void llvm::msgpack::Document::fromYAML(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[39] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 72) = a1 + 256;
  llvm::yaml::Input::Input((uint64_t)v3, a2, a3, 0);
}

void sub_1CC1B50F8(uint64_t a1, llvm::msgpack::DocNode *a2)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1);
    goto LABEL_5;
  }
  int v4 = *(unsigned __int8 *)(*(void *)a2 + 8);
  if (v4 != 8)
  {
    int v5 = 2 * (v4 == 7);
LABEL_5:
    if (v5 == 2)
    {
      if (*(unsigned char *)(*(void *)a2 + 8) != 7) {
        sub_1CC1B3344();
      }
      int v28 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
        int v28 = -1431655765 * ((*(void *)(*((void *)a2 + 1) + 8) - **((void **)a2 + 1)) >> 3);
      }
      if (v28)
      {
        for (unint64_t i = 0; i != v28; ++i)
        {
          *(void *)&long long v53 = 0;
          if ((*(unsigned int (**)(uint64_t, unint64_t, long long *))(*(void *)a1 + 32))(a1, i, &v53))
          {
            char v30 = llvm::msgpack::ArrayDocNode::operator[]((uint64_t)a2, i);
            sub_1CC1B50F8(a1, v30);
            (*(void (**)(uint64_t, void))(*(void *)a1 + 40))(a1, v53);
          }
        }
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
      return;
    }
    if (v5 != 1)
    {
      if (v5) {
        return;
      }
      if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
      {
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v46 = 0;
        (*(void (**)(uint64_t, void **))(*(void *)a1 + 232))(a1, __p);
        __dst = 0;
        std::string::size_type v67 = 0;
        (*(void (**)(uint64_t, std::string::value_type **, void))(*(void *)a1 + 216))(a1, &__dst, 0);
        if (v46 >= 0) {
          uint64_t v31 = __p;
        }
        else {
          uint64_t v31 = (void **)__p[0];
        }
        if (v46 >= 0) {
          uint64_t v32 = HIBYTE(v46) & 0x7F;
        }
        else {
          uint64_t v32 = (uint64_t)__p[1];
        }
        uint64_t v33 = llvm::msgpack::DocNode::fromString((uint64_t)a2, __dst, v67, (uint64_t)v31, v32);
        if (v34)
        {
          LOWORD(v55) = 261;
          *(void *)&long long v53 = v33;
          *((void *)&v53 + 1) = v34;
          (*(void (**)(uint64_t, long long *))(*(void *)a1 + 248))(a1, &v53);
        }
        if ((SHIBYTE(v46) & 0x80000000) == 0) {
          return;
        }
        uint64_t v35 = __p[0];
LABEL_112:
        operator delete(v35);
        return;
      }
      v61[0] = 0;
      v61[1] = 0;
      uint64_t v62 = 0;
      v59[0] = 0;
      v59[1] = 0;
      uint64_t v60 = 0;
      DWORD2(v53) = 0;
      BYTE8(v55) = 0;
      uint64_t v56 = 0;
      uint64_t v58 = v61;
      int v57 = 0;
      *(void *)&long long v53 = &unk_1F2646F30;
      long long v54 = 0uLL;
      *(void *)&long long v55 = 0;
      LODWORD(__p[1]) = 0;
      char v49 = 0;
      uint64_t v50 = 0;
      uint64_t v52 = v59;
      int v51 = 0;
      __p[0] = &unk_1F2646F30;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      int v48 = 0;
      if (*(unsigned char *)(*(void *)a2 + 8) == 2)
      {
        uint64_t v6 = "!nil";
        size_t v7 = 4;
      }
      else
      {
        __dst = (std::string::value_type *)(**(void **)a2 + 128);
        llvm::msgpack::DocNode::toString(a2, (uint64_t)&v63);
        if (v65 >= 0) {
          char v36 = (std::string::value_type *)&v63;
        }
        else {
          char v36 = v63;
        }
        if (v65 >= 0) {
          std::string::size_type v37 = v65 & 0x7F;
        }
        else {
          std::string::size_type v37 = (std::string::size_type)v64;
        }
        llvm::msgpack::DocNode::fromString((uint64_t)&__dst, v36, v37, (uint64_t)"", 0);
        if (v65 < 0) {
          operator delete(v63);
        }
        int v38 = __dst[8];
        LODWORD(v39) = *(unsigned __int8 *)(*(void *)a2 + 8);
        if (v38 == v39) {
          goto LABEL_90;
        }
        uint64_t v39 = (char)v39;
        if (v38 == 1 && !v39) {
          goto LABEL_90;
        }
        if (!__dst[8] && v39 == 1) {
          goto LABEL_90;
        }
        uint64_t v6 = off_1E682F130[v39];
        size_t v7 = qword_1CFAC6028[v39];
        if (v7 <= v47 - (uint64_t)v48)
        {
          memcpy(v48, v6, v7);
          v48 += v7;
          goto LABEL_90;
        }
      }
      llvm::raw_ostream::write((llvm::raw_ostream *)__p, v6, v7);
LABEL_90:
      llvm::msgpack::DocNode::toString(a2, (uint64_t)&__dst);
      if (v68 >= 0) {
        p_dst = (const char *)&__dst;
      }
      else {
        p_dst = __dst;
      }
      if (v68 >= 0) {
        size_t v41 = HIBYTE(v68) & 0x7F;
      }
      else {
        size_t v41 = v67;
      }
      llvm::raw_ostream::write((llvm::raw_ostream *)&v53, p_dst, v41);
      if (SHIBYTE(v68) < 0) {
        operator delete(__dst);
      }
      (*(void (**)(uint64_t, void **))(*(void *)a1 + 232))(a1, v52);
      char v42 = *((unsigned char *)v58 + 23);
      if (v42 >= 0) {
        uint64_t v43 = (std::string::value_type *)v58;
      }
      else {
        uint64_t v43 = (std::string::value_type *)*v58;
      }
      if (v42 >= 0) {
        uint64_t v44 = v42 & 0x7F;
      }
      else {
        uint64_t v44 = v58[1];
      }
      __dst = v43;
      std::string::size_type v67 = v44;
      if (((1 << *(unsigned char *)(*(void *)a2 + 8)) & 0x1B) == 0) {
        llvm::yaml::ScalarTraits<FlowStringRef,void>::mustQuote(v43, v44);
      }
      (*(void (**)(uint64_t, std::string::value_type **))(*(void *)a1 + 216))(a1, &__dst);
      __p[0] = &unk_1F2646B98;
      if (v51 == 1 && v46) {
        MEMORY[0x1D25D9CB0](v46, 0x1000C8077774924);
      }
      *(void *)&long long v53 = &unk_1F2646B98;
      if (v57 == 1 && (void)v54) {
        MEMORY[0x1D25D9CB0](v54, 0x1000C8077774924);
      }
      if (SHIBYTE(v60) < 0) {
        operator delete(v59[0]);
      }
      if ((SHIBYTE(v62) & 0x80000000) == 0) {
        return;
      }
      uint64_t v35 = (void *)v61[0];
      goto LABEL_112;
    }
    if (*(unsigned char *)(*(void *)a2 + 8) != 8) {
      sub_1CC1B3508();
    }
  }
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 104))(a1);
  if (v8)
  {
    if (*(unsigned char *)(*(void *)a2 + 8) != 8) {
      sub_1CC1B3508();
    }
    uint64_t v9 = (void *)*((void *)a2 + 1);
    uint64_t v12 = (void *)*v9;
    BOOL v10 = v9 + 1;
    uint64_t v11 = v12;
    if (v12 != v10)
    {
      do
      {
        long long v13 = *((_OWORD *)v11 + 3);
        long long v53 = *((_OWORD *)v11 + 2);
        long long v54 = v13;
        long long v55 = *((_OWORD *)v11 + 4);
        llvm::msgpack::DocNode::toString((llvm::msgpack::DocNode *)&v53, (uint64_t)__p);
        if (v46 >= 0) {
          uint64_t v14 = __p;
        }
        else {
          uint64_t v14 = (void **)__p[0];
        }
        sub_1CC1B5D78(a1, (uint64_t)v14, (uint64_t)&v54 + 8);
        if (SHIBYTE(v46) < 0) {
          operator delete(__p[0]);
        }
        char v15 = (void *)v11[1];
        if (v15)
        {
          do
          {
            unsigned __int16 v16 = v15;
            char v15 = (void *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            unsigned __int16 v16 = (void *)v11[2];
            BOOL v17 = *v16 == (void)v11;
            uint64_t v11 = v16;
          }
          while (!v17);
        }
        uint64_t v11 = v16;
      }
      while (v16 != v10);
    }
    uint64_t v18 = *(void (**)(uint64_t))(*(void *)a1 + 112);
    v18(a1);
    return;
  }
  (*(void (**)(std::string::value_type **__return_ptr, uint64_t))(*(void *)a1 + 136))(&v63, a1);
  BOOL v19 = (std::string::value_type **)v63;
  long long v20 = v64;
  if (v63 == (std::string::value_type *)v64) {
    goto LABEL_52;
  }
  do
  {
    long long v22 = *v19;
    std::string::size_type v21 = (std::string::size_type)v19[1];
    __p[0] = (void *)(**(void **)a2 + 128);
    llvm::msgpack::DocNode::fromString((uint64_t)__p, v22, v21, (uint64_t)"", 0);
    if (!v22)
    {
      __dst = 0;
      std::string::size_type v67 = 0;
      size_t v24 = &__dst;
      int64_t v68 = 0;
      goto LABEL_46;
    }
    if (v21 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v21 >= 0x17)
    {
      uint64_t v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17) {
        uint64_t v25 = v21 | 7;
      }
      uint64_t v26 = v25 + 1;
      long long v23 = (std::string::value_type **)operator new(v25 + 1);
      std::string::size_type v67 = v21;
      int64_t v68 = v26 | 0x8000000000000000;
      __dst = (std::string::value_type *)v23;
LABEL_42:
      memmove(v23, v22, v21);
      goto LABEL_43;
    }
    HIBYTE(v68) = v21;
    long long v23 = &__dst;
    if (v21) {
      goto LABEL_42;
    }
LABEL_43:
    *((unsigned char *)v23 + v21) = 0;
    if (v68 >= 0) {
      size_t v24 = &__dst;
    }
    else {
      size_t v24 = (std::string::value_type **)__dst;
    }
LABEL_46:
    if (*(unsigned char *)(*(void *)a2 + 8) != 8) {
      sub_1CC1B3508();
    }
    long long v53 = *(_OWORD *)__p;
    *(void *)&long long v54 = v46;
    char v27 = llvm::msgpack::MapDocNode::operator[]((uint64_t)a2, &v53);
    sub_1CC1B5D78(a1, (uint64_t)v24, (uint64_t)v27);
    if (SHIBYTE(v68) < 0) {
      operator delete(__dst);
    }
    v19 += 2;
  }
  while (v19 != v20);
  BOOL v19 = (std::string::value_type **)v63;
LABEL_52:
  if (v19)
  {
    v64 = v19;
    operator delete(v19);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
}

BOOL sub_1CC1B5AB8(char *a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 == 4)
  {
    if (*(_DWORD *)a1 == 1851878958 || *(_DWORD *)a1 == 1314999854 || *(_DWORD *)a1 == 1312902702) {
      return 1;
    }
    goto LABEL_11;
  }
  if (a2 != 1)
  {
LABEL_11:
    int v3 = *a1;
    goto LABEL_12;
  }
  uint64_t v2 = 0;
  int v3 = *a1;
  if (v3 == 43 || v3 == 45) {
    return v2;
  }
LABEL_12:
  if (v3 == 45 || v3 == 43)
  {
    int v4 = a1 + 1;
    unint64_t v5 = a2 - 1;
  }
  else
  {
    int v4 = a1;
    unint64_t v5 = a2;
  }
  if (v5 == 4 && (*(_DWORD *)v4 == 1718511918 || *(_DWORD *)v4 == 1718503726 || *(_DWORD *)v4 == 1179535662)) {
    return 1;
  }
  if (a2 < 2) {
    goto LABEL_23;
  }
  if (*(_WORD *)a1 == 28464)
  {
    if (a2 < 3) {
      return 0;
    }
    uint64_t v18 = a1 + 2;
    unint64_t v19 = a2 - 2;
    unsigned __int16 v16 = "01234567";
    uint64_t v17 = 8;
    return llvm::StringRef::find_first_not_of(&v18, (unsigned __int8 *)v16, v17, 0) == -1;
  }
  if (*(_WORD *)a1 == 30768)
  {
    if (a2 < 3) {
      return 0;
    }
    uint64_t v18 = a1 + 2;
    unint64_t v19 = a2 - 2;
    unsigned __int16 v16 = "0123456789abcdefABCDEF";
    uint64_t v17 = 22;
    return llvm::StringRef::find_first_not_of(&v18, (unsigned __int8 *)v16, v17, 0) == -1;
  }
LABEL_23:
  if (!v5) {
    goto LABEL_29;
  }
  uint64_t v2 = 0;
  int v6 = *v4;
  if (v6 != 101 && v6 != 69)
  {
    if (v6 == 46 && (v5 == 1 || !memchr("0123456789", v4[1], 0xBuLL))) {
      return 0;
    }
LABEL_29:
    uint64_t v18 = v4;
    unint64_t v19 = v5;
    unint64_t first_not_of = llvm::StringRef::find_first_not_of(&v18, "0123456789", 10, 0);
    unint64_t v8 = first_not_of;
    if (first_not_of >= v5) {
      unint64_t first_not_of = v5;
    }
    if (v5 > v8)
    {
      uint64_t v9 = (unsigned __int8 *)&v4[first_not_of];
      int v10 = v4[first_not_of];
      if (v10 == 101 || v10 == 69)
      {
LABEL_37:
        unint64_t v12 = v5 + ~first_not_of;
        if (v12)
        {
          long long v13 = v9 + 1;
          int v14 = v9[1];
          if (v14 != 45 && v14 != 43) {
            goto LABEL_42;
          }
          if (--v12)
          {
            long long v13 = v9 + 2;
LABEL_42:
            uint64_t v18 = (char *)v13;
            unint64_t v19 = v12;
            return v12 <= llvm::StringRef::find_first_not_of(&v18, "0123456789", 10, 0);
          }
        }
        return 0;
      }
      if (v10 != 46) {
        return 0;
      }
      v5 += ~first_not_of;
      uint64_t v11 = v9 + 1;
      uint64_t v18 = (char *)(v9 + 1);
      unint64_t v19 = v5;
      unint64_t first_not_of = llvm::StringRef::find_first_not_of(&v18, "0123456789", 10, 0);
      if (v5 > first_not_of)
      {
        uint64_t v9 = &v11[first_not_of];
        if ((v11[first_not_of] | 0x20) != 0x65) {
          return 0;
        }
        goto LABEL_37;
      }
    }
    return 1;
  }
  return v2;
}

uint64_t sub_1CC1B5D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  char v6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *, uint64_t *))(*(void *)a1 + 120))(a1, a2, 1, 0, &v6, &v7);
  if (result)
  {
    sub_1CC1B50F8(a1, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v7);
  }
  return result;
}

__n128 llvm::msgpack::Reader::Reader(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)a2 + *(void *)(a2 + 8);
  *(void *)(a1 + 32) = *(void *)a2;
  *(void *)(a1 + 40) = v4;
  return result;
}

{
  __n128 result;
  long long v3;
  uint64_t v4;

  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)a2 + *(void *)(a2 + 8);
  *(void *)(a1 + 32) = *(void *)a2;
  *(void *)(a1 + 40) = v4;
  return result;
}

void *llvm::msgpack::Reader::Reader(void *result, uint64_t a2, uint64_t a3)
{
  void *result = a2;
  result[1] = a3;
  result[2] = "MsgPack";
  result[3] = 7;
  result[4] = a2;
  result[5] = a2 + a3;
  return result;
}

{
  void *result = a2;
  result[1] = a3;
  result[2] = "MsgPack";
  result[3] = 7;
  result[4] = a2;
  result[5] = a2 + a3;
  return result;
}

unsigned char *llvm::msgpack::Reader::read@<X0>(unsigned char *result@<X0>, double *a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v5 = (unsigned __int8 *)*((void *)result + 4);
  uint64_t v4 = (unsigned int *)*((void *)result + 5);
  if (v5 == (unsigned __int8 *)v4)
  {
    a3[8] &= ~1u;
    *a3 = 0;
  }
  else
  {
    char v6 = (unsigned int *)(v5 + 1);
    *((void *)result + 4) = v5 + 1;
    uint64_t v7 = *v5;
    switch(*v5)
    {
      case 0xC0u:
        *(unsigned char *)a2 = 2;
        goto LABEL_80;
      case 0xC2u:
        *(unsigned char *)a2 = 3;
        *((unsigned char *)a2 + 8) = 0;
        goto LABEL_80;
      case 0xC3u:
        *(unsigned char *)a2 = 3;
        *((unsigned char *)a2 + 8) = 1;
        goto LABEL_68;
      case 0xC4u:
        char v15 = 6;
        goto LABEL_38;
      case 0xC5u:
        char v16 = 6;
        goto LABEL_42;
      case 0xC6u:
        char v9 = 6;
        goto LABEL_55;
      case 0xC7u:
        *(unsigned char *)a2 = 9;
        if (v4 == v6) {
          goto LABEL_46;
        }
        unsigned int v10 = v5[1];
        uint64_t v11 = v5 + 2;
        goto LABEL_72;
      case 0xC8u:
        *(unsigned char *)a2 = 9;
        if ((unint64_t)((char *)v4 - (char *)v6) <= 1) {
          goto LABEL_46;
        }
        unsigned int v10 = bswap32(*(unsigned __int16 *)(v5 + 1)) >> 16;
        uint64_t v11 = v5 + 3;
        goto LABEL_72;
      case 0xC9u:
        *(unsigned char *)a2 = 9;
        if ((unint64_t)((char *)v4 - (char *)v6) <= 3)
        {
LABEL_46:
          std::generic_category();
          operator new();
        }
        unsigned int v10 = bswap32(*(_DWORD *)(v5 + 1));
        uint64_t v11 = v5 + 5;
LABEL_72:
        *((void *)result + 4) = v11;
        int v14 = a3;
        goto LABEL_73;
      case 0xCAu:
        *(unsigned char *)a2 = 4;
        if ((unint64_t)((char *)v4 - (char *)v6) <= 3)
        {
          std::generic_category();
          operator new();
        }
        a2[1] = COERCE_FLOAT(bswap32(*v6));
        goto LABEL_78;
      case 0xCBu:
        *(unsigned char *)a2 = 4;
        if ((unint64_t)((char *)v4 - (char *)v6) <= 7)
        {
          std::generic_category();
          operator new();
        }
        goto LABEL_28;
      case 0xCCu:
        *(unsigned char *)a2 = 1;
        if (v4 == v6) {
          goto LABEL_24;
        }
        *((void *)a2 + 1) = *(unsigned __int8 *)v6;
        uint64_t v12 = *((void *)result + 4) + 1;
        goto LABEL_70;
      case 0xCDu:
        *(unsigned char *)a2 = 1;
        if ((unint64_t)((char *)v4 - (char *)v6) <= 1) {
          goto LABEL_24;
        }
        *((void *)a2 + 1) = bswap32(*(unsigned __int16 *)v6) >> 16;
        uint64_t v12 = *((void *)result + 4) + 2;
        goto LABEL_70;
      case 0xCEu:
        *(unsigned char *)a2 = 1;
        if ((unint64_t)((char *)v4 - (char *)v6) <= 3) {
          goto LABEL_24;
        }
        *((void *)a2 + 1) = bswap32(*v6);
        uint64_t v12 = *((void *)result + 4) + 4;
        goto LABEL_70;
      case 0xCFu:
        *(unsigned char *)a2 = 1;
        if ((unint64_t)((char *)v4 - (char *)v6) <= 7)
        {
LABEL_24:
          std::generic_category();
          operator new();
        }
        *((void *)a2 + 1) = bswap64(*(void *)v6);
        uint64_t v12 = *((void *)result + 4) + 8;
LABEL_70:
        *((void *)result + 4) = v12;
        a3[8] &= ~1u;
        *a3 = 1;
        return result;
      case 0xD0u:
        *(unsigned char *)a2 = 0;
        if (v4 == v6) {
          goto LABEL_52;
        }
        *((void *)a2 + 1) = *(char *)v6;
        uint64_t v13 = *((void *)result + 4) + 1;
        goto LABEL_79;
      case 0xD1u:
        *(unsigned char *)a2 = 0;
        if ((unint64_t)((char *)v4 - (char *)v6) <= 1) {
          goto LABEL_52;
        }
        *((void *)a2 + 1) = (__int16)(bswap32(*(unsigned __int16 *)v6) >> 16);
        uint64_t v13 = *((void *)result + 4) + 2;
        goto LABEL_79;
      case 0xD2u:
        *(unsigned char *)a2 = 0;
        if ((unint64_t)((char *)v4 - (char *)v6) <= 3) {
          goto LABEL_52;
        }
        *((void *)a2 + 1) = (int)bswap32(*v6);
LABEL_78:
        uint64_t v13 = *((void *)result + 4) + 4;
        goto LABEL_79;
      case 0xD3u:
        *(unsigned char *)a2 = 0;
        if ((unint64_t)((char *)v4 - (char *)v6) <= 7)
        {
LABEL_52:
          std::generic_category();
          operator new();
        }
LABEL_28:
        *((void *)a2 + 1) = bswap64(*(void *)v6);
        uint64_t v13 = *((void *)result + 4) + 8;
LABEL_79:
        *((void *)result + 4) = v13;
        goto LABEL_80;
      case 0xD4u:
        *(unsigned char *)a2 = 9;
        int v14 = a3;
        unsigned int v10 = 1;
        goto LABEL_73;
      case 0xD5u:
        *(unsigned char *)a2 = 9;
        int v14 = a3;
        unsigned int v10 = 2;
        goto LABEL_73;
      case 0xD6u:
        *(unsigned char *)a2 = 9;
        int v14 = a3;
        unsigned int v10 = 4;
        goto LABEL_73;
      case 0xD7u:
        *(unsigned char *)a2 = 9;
        int v14 = a3;
        unsigned int v10 = 8;
        goto LABEL_73;
      case 0xD8u:
        *(unsigned char *)a2 = 9;
        int v14 = a3;
        unsigned int v10 = 16;
LABEL_73:
        return (unsigned char *)llvm::msgpack::Reader::createExt((uint64_t)result, (uint64_t)a2, v10, v14);
      case 0xD9u:
        char v15 = 5;
LABEL_38:
        *(unsigned char *)a2 = v15;
        return (unsigned char *)sub_1CC1B6638(a3, (uint64_t)result, (uint64_t)a2);
      case 0xDAu:
        char v16 = 5;
LABEL_42:
        *(unsigned char *)a2 = v16;
        return (unsigned char *)sub_1CC1B6730(a3, (uint64_t)result, (uint64_t)a2);
      case 0xDBu:
        char v9 = 5;
LABEL_55:
        *(unsigned char *)a2 = v9;
        return (unsigned char *)sub_1CC1B6834(a3, (uint64_t)result, (uint64_t)a2);
      case 0xDCu:
        char v18 = 7;
        goto LABEL_59;
      case 0xDDu:
        char v17 = 7;
        goto LABEL_63;
      case 0xDEu:
        char v18 = 8;
LABEL_59:
        *(unsigned char *)a2 = v18;
        return sub_1CC1B6934(a3, (uint64_t)result, (uint64_t)a2);
      case 0xDFu:
        char v17 = 8;
LABEL_63:
        *(unsigned char *)a2 = v17;
        return sub_1CC1B6A28(a3, (uint64_t)result, (uint64_t)a2);
      default:
        uint64_t v8 = (char)v7;
        if ((v7 & 0xE0) == 0xE0)
        {
          *(unsigned char *)a2 = 0;
          goto LABEL_7;
        }
        if ((v7 & 0x80) == 0)
        {
          *(unsigned char *)a2 = 1;
          *((void *)a2 + 1) = v7;
LABEL_68:
          a3[8] &= ~1u;
LABEL_81:
          *a3 = 1;
          return result;
        }
        if ((v7 & 0xE0) != 0xA0)
        {
          if (((char)v7 & 0xFFFFFFF0) == 0xFFFFFF80)
          {
            char v19 = 8;
          }
          else
          {
            if ((v7 & 0xF0) != 0x90)
            {
              std::generic_category();
              operator new();
            }
            char v19 = 7;
          }
          *(unsigned char *)a2 = v19;
          uint64_t v8 = v7 & 0xF;
LABEL_7:
          *((void *)a2 + 1) = v8;
LABEL_80:
          a3[8] &= ~1u;
          goto LABEL_81;
        }
        *(unsigned char *)a2 = 5;
        __n128 result = (unsigned char *)llvm::msgpack::Reader::createRaw((uint64_t)result, (uint64_t)a2, v7 & 0x1F, a3);
        break;
    }
  }
  return result;
}

uint64_t sub_1CC1B6638(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(unsigned __int8 **)(a2 + 32);
  if (*(unsigned __int8 **)(a2 + 40) == v3)
  {
    std::generic_category();
    operator new();
  }
  unsigned int v4 = *v3;
  *(void *)(a2 + 32) = v3 + 1;

  return llvm::msgpack::Reader::createRaw(a2, a3, v4, a1);
}

uint64_t sub_1CC1B6730(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(unsigned __int16 **)(a2 + 32);
  if (*(void *)(a2 + 40) - (void)v3 <= 1uLL)
  {
    std::generic_category();
    operator new();
  }
  unsigned int v4 = bswap32(*v3) >> 16;
  *(void *)(a2 + 32) = v3 + 1;

  return llvm::msgpack::Reader::createRaw(a2, a3, v4, a1);
}

uint64_t sub_1CC1B6834(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(unsigned int **)(a2 + 32);
  if (*(void *)(a2 + 40) - (void)v3 <= 3uLL)
  {
    std::generic_category();
    operator new();
  }
  unsigned int v4 = bswap32(*v3);
  *(void *)(a2 + 32) = v3 + 1;

  return llvm::msgpack::Reader::createRaw(a2, a3, v4, a1);
}

unsigned char *sub_1CC1B6934(unsigned char *result, uint64_t a2, uint64_t a3)
{
  long long v3 = *(unsigned __int16 **)(a2 + 32);
  if (*(void *)(a2 + 40) - (void)v3 <= 1uLL)
  {
    std::generic_category();
    operator new();
  }
  *(void *)(a3 + 8) = bswap32(*v3) >> 16;
  *(void *)(a2 + 32) += 2;
  result[8] &= ~1u;
  void *result = 1;
  return result;
}

unsigned char *sub_1CC1B6A28(unsigned char *result, uint64_t a2, uint64_t a3)
{
  long long v3 = *(unsigned int **)(a2 + 32);
  if (*(void *)(a2 + 40) - (void)v3 <= 3uLL)
  {
    std::generic_category();
    operator new();
  }
  *(void *)(a3 + 8) = bswap32(*v3);
  *(void *)(a2 + 32) += 4;
  result[8] &= ~1u;
  void *result = 1;
  return result;
}

uint64_t llvm::msgpack::Reader::createExt@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned char *a4@<X8>)
{
  unint64_t v5 = *(unsigned char **)(result + 32);
  if (v5 == *(unsigned char **)(result + 40))
  {
    std::generic_category();
    operator new();
  }
  *(void *)(result + 32) = v5 + 1;
  *(unsigned char *)(a2 + 8) = *v5;
  uint64_t v6 = *(void *)(result + 32);
  if (*(void *)(result + 40) - v6 < (unint64_t)a3)
  {
    std::generic_category();
    operator new();
  }
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = a3;
  *(void *)(result + 32) += a3;
  a4[8] &= ~1u;
  *a4 = 1;
  return result;
}

uint64_t llvm::msgpack::Reader::createRaw@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned char *a4@<X8>)
{
  uint64_t v5 = *(void *)(result + 32);
  if (*(void *)(result + 40) - v5 < (unint64_t)a3)
  {
    std::generic_category();
    operator new();
  }
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = a3;
  *(void *)(result + 32) += a3;
  a4[8] &= ~1u;
  *a4 = 1;
  return result;
}

uint64_t llvm::msgpack::Writer::Writer(uint64_t result, uint64_t a2, char a3)
{
  *(void *)__n128 result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(result + 16) = a3;
  return result;
}

{
  *(void *)__n128 result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(result + 16) = a3;
  return result;
}

llvm::raw_ostream *llvm::msgpack::Writer::writeNil(llvm::raw_ostream **this)
{
  int v1 = *this;
  char v3 = -64;
  return llvm::raw_ostream::write(v1, &v3, 1uLL);
}

llvm::raw_ostream *llvm::msgpack::Writer::write(llvm::raw_ostream **this, int a2)
{
  if (a2) {
    char v2 = -61;
  }
  else {
    char v2 = -62;
  }
  char v3 = *this;
  char v5 = v2;
  return llvm::raw_ostream::write(v3, &v5, 1uLL);
}

llvm::raw_ostream *llvm::msgpack::Writer::write(llvm::raw_ostream **this, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    if (a2 < 0xFFFFFFFFFFFFFFE0)
    {
      if (a2 < 0xFFFFFFFFFFFFFF80)
      {
        if (a2 < 0xFFFFFFFFFFFF8000)
        {
          uint64_t v11 = *this;
          if (a2 < 0xFFFFFFFF80000000)
          {
            v16[0] = -45;
            llvm::raw_ostream::write(v11, v16, 1uLL);
            uint64_t v6 = *this;
            unint64_t v14 = bswap64(a2);
            if ((*((_DWORD *)this + 2) - 1) >= 2) {
              unint64_t v15 = v14;
            }
            else {
              unint64_t v15 = a2;
            }
            *(void *)char v16 = v15;
            size_t v7 = 8;
          }
          else
          {
            v16[0] = -46;
            llvm::raw_ostream::write(v11, v16, 1uLL);
            uint64_t v6 = *this;
            unsigned int v12 = bswap32(a2);
            if ((*((_DWORD *)this + 2) - 1) >= 2) {
              int v13 = v12;
            }
            else {
              int v13 = a2;
            }
            *(_DWORD *)char v16 = v13;
            size_t v7 = 4;
          }
        }
        else
        {
          uint64_t v8 = *this;
          v16[0] = -47;
          llvm::raw_ostream::write(v8, v16, 1uLL);
          uint64_t v6 = *this;
          unsigned int v9 = bswap32(a2) >> 16;
          if ((*((_DWORD *)this + 2) - 1) >= 2) {
            __int16 v10 = v9;
          }
          else {
            __int16 v10 = a2;
          }
          *(_WORD *)char v16 = v10;
          size_t v7 = 2;
        }
        return llvm::raw_ostream::write(v6, v16, v7);
      }
      char v5 = *this;
      v16[0] = -48;
      llvm::raw_ostream::write(v5, v16, 1uLL);
    }
    uint64_t v6 = *this;
    v16[0] = a2;
    size_t v7 = 1;
    return llvm::raw_ostream::write(v6, v16, v7);
  }

  return llvm::msgpack::Writer::write(this, a2);
}

{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  size_t v6;
  llvm::raw_ostream *v8;
  unsigned int v9;
  __int16 v10;
  llvm::raw_ostream *v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  char v16[8];

  if (a2 <= 0x7F) {
    goto LABEL_4;
  }
  if (a2 <= 0xFF)
  {
    unsigned int v4 = *this;
    v16[0] = -52;
    llvm::raw_ostream::write(v4, v16, 1uLL);
LABEL_4:
    char v5 = *this;
    v16[0] = a2;
    uint64_t v6 = 1;
    return llvm::raw_ostream::write(v5, v16, v6);
  }
  if (a2 >> 16)
  {
    uint64_t v11 = *this;
    if (HIDWORD(a2))
    {
      v16[0] = -49;
      llvm::raw_ostream::write(v11, v16, 1uLL);
      char v5 = *this;
      unint64_t v14 = bswap64(a2);
      if ((*((_DWORD *)this + 2) - 1) >= 2) {
        unint64_t v15 = v14;
      }
      else {
        unint64_t v15 = a2;
      }
      *(void *)char v16 = v15;
      uint64_t v6 = 8;
    }
    else
    {
      v16[0] = -50;
      llvm::raw_ostream::write(v11, v16, 1uLL);
      char v5 = *this;
      unsigned int v12 = bswap32(a2);
      if ((*((_DWORD *)this + 2) - 1) >= 2) {
        int v13 = v12;
      }
      else {
        int v13 = a2;
      }
      *(_DWORD *)char v16 = v13;
      uint64_t v6 = 4;
    }
  }
  else
  {
    uint64_t v8 = *this;
    v16[0] = -51;
    llvm::raw_ostream::write(v8, v16, 1uLL);
    char v5 = *this;
    unsigned int v9 = bswap32(a2) >> 16;
    if ((*((_DWORD *)this + 2) - 1) >= 2) {
      __int16 v10 = v9;
    }
    else {
      __int16 v10 = a2;
    }
    *(_WORD *)char v16 = v10;
    uint64_t v6 = 2;
  }
  return llvm::raw_ostream::write(v5, v16, v6);
}

llvm::raw_ostream *llvm::msgpack::Writer::write(llvm::raw_ostream **this, double a2)
{
  double v4 = fabs(a2);
  char v5 = *this;
  if (v4 < 1.17549435e-38 || v4 > 3.40282347e38)
  {
    char v17 = -53;
    llvm::raw_ostream::write(v5, &v17, 1uLL);
    size_t v7 = *this;
    *(double *)&unint64_t v12 = COERCE_DOUBLE(bswap64(*(unint64_t *)&a2));
    if ((*((_DWORD *)this + 2) - 1) >= 2) {
      double v13 = *(double *)&v12;
    }
    else {
      double v13 = a2;
    }
    *(double *)char v18 = v13;
    __int16 v10 = v18;
    size_t v11 = 8;
  }
  else
  {
    char v15 = -54;
    llvm::raw_ostream::write(v5, &v15, 1uLL);
    *(float *)&unsigned int v6 = a2;
    size_t v7 = *this;
    *(float *)&unsigned int v8 = COERCE_FLOAT(bswap32(v6));
    if ((*((_DWORD *)this + 2) - 1) >= 2) {
      float v9 = *(float *)&v8;
    }
    else {
      float v9 = a2;
    }
    float v16 = v9;
    __int16 v10 = (char *)&v16;
    size_t v11 = 4;
  }
  return llvm::raw_ostream::write(v7, v10, v11);
}

llvm::raw_ostream *llvm::msgpack::Writer::write(uint64_t a1, const char *a2, size_t a3)
{
  if (a3 <= 0x1F)
  {
    unsigned int v6 = *(llvm::raw_ostream **)a1;
    char v17 = a3 | 0xA0;
    size_t v7 = &v17;
LABEL_6:
    size_t v9 = 1;
    goto LABEL_7;
  }
  if (a3 <= 0xFF && !*(unsigned char *)(a1 + 16))
  {
    unsigned int v8 = *(llvm::raw_ostream **)a1;
    char v18 = -39;
    llvm::raw_ostream::write(v8, &v18, 1uLL);
    unsigned int v6 = *(llvm::raw_ostream **)a1;
    char v19 = a3;
    size_t v7 = &v19;
    goto LABEL_6;
  }
  unint64_t v12 = *(llvm::raw_ostream **)a1;
  if (a3 >> 16)
  {
    char v22 = -37;
    llvm::raw_ostream::write(v12, &v22, 1uLL);
    unsigned int v6 = *(llvm::raw_ostream **)a1;
    unsigned int v15 = bswap32(a3);
    if ((*(_DWORD *)(a1 + 8) - 1) >= 2) {
      int v16 = v15;
    }
    else {
      int v16 = a3;
    }
    int v23 = v16;
    size_t v7 = (char *)&v23;
    size_t v9 = 4;
  }
  else
  {
    char v20 = -38;
    llvm::raw_ostream::write(v12, &v20, 1uLL);
    unsigned int v6 = *(llvm::raw_ostream **)a1;
    unsigned int v13 = bswap32(a3) >> 16;
    if ((*(_DWORD *)(a1 + 8) - 1) >= 2) {
      __int16 v14 = v13;
    }
    else {
      __int16 v14 = a3;
    }
    __int16 v21 = v14;
    size_t v7 = (char *)&v21;
    size_t v9 = 2;
  }
LABEL_7:
  llvm::raw_ostream::write(v6, v7, v9);
  __int16 v10 = *(llvm::raw_ostream **)a1;
  __n128 result = (llvm::raw_ostream *)*((void *)v10 + 4);
  if (a3 > *((void *)v10 + 3) - (void)result) {
    return llvm::raw_ostream::write(v10, a2, a3);
  }
  if (a3)
  {
    __n128 result = (llvm::raw_ostream *)memcpy(result, a2, a3);
    *((void *)v10 + 4) += a3;
  }
  return result;
}

llvm::raw_ostream *llvm::msgpack::Writer::write(uint64_t a1, uint64_t a2)
{
  size_t v4 = *(void *)(a2 + 8);
  if (v4 > 0xFF)
  {
    size_t v9 = *(llvm::raw_ostream **)a1;
    if (v4 >> 16)
    {
      char v19 = -58;
      llvm::raw_ostream::write(v9, &v19, 1uLL);
      unsigned int v6 = *(llvm::raw_ostream **)a1;
      unsigned int v12 = bswap32(v4);
      if ((*(_DWORD *)(a1 + 8) - 1) >= 2) {
        int v13 = v12;
      }
      else {
        int v13 = v4;
      }
      *(_DWORD *)char v20 = v13;
      size_t v7 = v20;
      size_t v8 = 4;
    }
    else
    {
      char v17 = -59;
      llvm::raw_ostream::write(v9, &v17, 1uLL);
      unsigned int v6 = *(llvm::raw_ostream **)a1;
      unsigned int v10 = bswap32(v4) >> 16;
      if ((*(_DWORD *)(a1 + 8) - 1) >= 2) {
        __int16 v11 = v10;
      }
      else {
        __int16 v11 = v4;
      }
      __int16 v18 = v11;
      size_t v7 = (char *)&v18;
      size_t v8 = 2;
    }
  }
  else
  {
    char v5 = *(llvm::raw_ostream **)a1;
    char v15 = -60;
    llvm::raw_ostream::write(v5, &v15, 1uLL);
    unsigned int v6 = *(llvm::raw_ostream **)a1;
    char v16 = v4;
    size_t v7 = &v16;
    size_t v8 = 1;
  }
  llvm::raw_ostream::write(v6, v7, v8);
  return llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, *(const char **)a2, v4);
}

llvm::raw_ostream *llvm::msgpack::Writer::writeArraySize(llvm::raw_ostream **this, unsigned int a2)
{
  if (a2 > 0xF)
  {
    size_t v7 = *this;
    if (HIWORD(a2))
    {
      char v16 = -35;
      llvm::raw_ostream::write(v7, &v16, 1uLL);
      size_t v4 = *this;
      unsigned int v10 = bswap32(a2);
      if ((*((_DWORD *)this + 2) - 1) >= 2) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = a2;
      }
      *(_DWORD *)char v17 = v11;
      char v5 = v17;
      size_t v6 = 4;
    }
    else
    {
      char v14 = -36;
      llvm::raw_ostream::write(v7, &v14, 1uLL);
      size_t v4 = *this;
      unsigned int v8 = bswap32(a2) >> 16;
      if ((*((_DWORD *)this + 2) - 1) >= 2) {
        __int16 v9 = v8;
      }
      else {
        __int16 v9 = a2;
      }
      __int16 v15 = v9;
      char v5 = (char *)&v15;
      size_t v6 = 2;
    }
  }
  else
  {
    size_t v4 = *this;
    char v13 = a2 | 0x90;
    char v5 = &v13;
    size_t v6 = 1;
  }
  return llvm::raw_ostream::write(v4, v5, v6);
}

llvm::raw_ostream *llvm::msgpack::Writer::writeMapSize(llvm::raw_ostream **this, unsigned int a2)
{
  if (a2 > 0xF)
  {
    size_t v7 = *this;
    if (HIWORD(a2))
    {
      char v16 = -33;
      llvm::raw_ostream::write(v7, &v16, 1uLL);
      size_t v4 = *this;
      unsigned int v10 = bswap32(a2);
      if ((*((_DWORD *)this + 2) - 1) >= 2) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = a2;
      }
      *(_DWORD *)char v17 = v11;
      char v5 = v17;
      size_t v6 = 4;
    }
    else
    {
      char v14 = -34;
      llvm::raw_ostream::write(v7, &v14, 1uLL);
      size_t v4 = *this;
      unsigned int v8 = bswap32(a2) >> 16;
      if ((*((_DWORD *)this + 2) - 1) >= 2) {
        __int16 v9 = v8;
      }
      else {
        __int16 v9 = a2;
      }
      __int16 v15 = v9;
      char v5 = (char *)&v15;
      size_t v6 = 2;
    }
  }
  else
  {
    size_t v4 = *this;
    char v13 = a2 | 0x80;
    char v5 = &v13;
    size_t v6 = 1;
  }
  return llvm::raw_ostream::write(v4, v5, v6);
}

llvm::raw_ostream *llvm::msgpack::Writer::writeExt(uint64_t a1, char a2, uint64_t a3)
{
  size_t v6 = *(void *)(a3 + 8);
  switch(v6)
  {
    case 1uLL:
      size_t v7 = *(llvm::raw_ostream **)a1;
      char v8 = -44;
      goto LABEL_10;
    case 2uLL:
      size_t v7 = *(llvm::raw_ostream **)a1;
      char v8 = -43;
      goto LABEL_10;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
      goto LABEL_5;
    case 4uLL:
      size_t v7 = *(llvm::raw_ostream **)a1;
      char v8 = -42;
      goto LABEL_10;
    case 8uLL:
      size_t v7 = *(llvm::raw_ostream **)a1;
      char v8 = -41;
      goto LABEL_10;
    default:
      if (v6 == 16)
      {
        size_t v7 = *(llvm::raw_ostream **)a1;
        char v8 = -40;
LABEL_10:
        v18[0] = v8;
        goto LABEL_11;
      }
LABEL_5:
      if (v6 <= 0xFF)
      {
        __int16 v9 = *(llvm::raw_ostream **)a1;
        v18[0] = -57;
        llvm::raw_ostream::write(v9, v18, 1uLL);
        size_t v7 = *(llvm::raw_ostream **)a1;
        v18[0] = v6;
LABEL_11:
        size_t v10 = 1;
        goto LABEL_12;
      }
      char v13 = *(llvm::raw_ostream **)a1;
      if (v6 >> 16)
      {
        v18[0] = -55;
        llvm::raw_ostream::write(v13, v18, 1uLL);
        size_t v7 = *(llvm::raw_ostream **)a1;
        unsigned int v16 = bswap32(v6);
        if ((*(_DWORD *)(a1 + 8) - 1) >= 2) {
          int v17 = v16;
        }
        else {
          int v17 = v6;
        }
        *(_DWORD *)__int16 v18 = v17;
        size_t v10 = 4;
      }
      else
      {
        v18[0] = -56;
        llvm::raw_ostream::write(v13, v18, 1uLL);
        size_t v7 = *(llvm::raw_ostream **)a1;
        unsigned int v14 = bswap32(v6) >> 16;
        if ((*(_DWORD *)(a1 + 8) - 1) >= 2) {
          __int16 v15 = v14;
        }
        else {
          __int16 v15 = v6;
        }
        *(_WORD *)__int16 v18 = v15;
        size_t v10 = 2;
      }
LABEL_12:
      llvm::raw_ostream::write(v7, v18, v10);
      unsigned int v11 = *(llvm::raw_ostream **)a1;
      v18[0] = a2;
      llvm::raw_ostream::write(v11, v18, 1uLL);
      return llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, *(const char **)a3, v6);
  }
}

const char *llvm::XCOFF::getNameForTracebackTableLanguageId(unsigned int a1)
{
  if (a1 > 0xE) {
    return "Unknown";
  }
  else {
    return off_1E682F3A8[(char)a1];
  }
}

void llvm::XCOFF::parseParmsType(llvm::XCOFF *this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  int v5 = (int)this;
  v19[4] = *MEMORY[0x1E4F143B8];
  int v17 = v19;
  long long v18 = xmmword_1CDC7F9D0;
  unsigned int v7 = a3 + a2;
  if (a3 + a2)
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    unsigned int v11 = 0;
    int v12 = 1;
    do
    {
      unsigned int v13 = v12;
      if (v12 != 1)
      {
        if (*((void *)&v18 + 1) < (unint64_t)(v8 + 2)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(_WORD *)((char *)v17 + v8) = 8236;
        uint64_t v8 = v18 + 2;
        *(void *)&long long v18 = v18 + 2;
      }
      unint64_t v14 = v8 + 1;
      if (v5 < 0)
      {
        if ((v5 & 0x40000000) != 0)
        {
          if (*((void *)&v18 + 1) < v14) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *((unsigned char *)v17 + v8) = 100;
        }
        else
        {
          if (*((void *)&v18 + 1) < v14) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *((unsigned char *)v17 + v8) = 102;
        }
        uint64_t v8 = v18 + 1;
        *(void *)&long long v18 = v18 + 1;
        ++v9;
        int v15 = 2;
      }
      else
      {
        if (*((void *)&v18 + 1) < v14) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *((unsigned char *)v17 + v8) = 105;
        uint64_t v8 = v18 + 1;
        *(void *)&long long v18 = v18 + 1;
        ++v10;
        int v15 = 1;
      }
      v5 <<= v15;
      if (v13 >= v7) {
        break;
      }
      v11 += v15;
      int v12 = v13 + 1;
    }
    while (v11 < 0x1F);
    if (v13 >= v7)
    {
      if (v5) {
        goto LABEL_33;
      }
    }
    else
    {
      if (*((void *)&v18 + 1) < (unint64_t)(v8 + 5)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      unsigned int v16 = (char *)v17 + v8;
      v16[4] = 46;
      *(_DWORD *)unsigned int v16 = 774774828;
      uint64_t v8 = v18 + 5;
      *(void *)&long long v18 = v18 + 5;
      if (v5)
      {
LABEL_33:
        std::generic_category();
        sub_1CD06481C();
      }
    }
  }
  else
  {
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    uint64_t v8 = 0;
    if (this) {
      goto LABEL_33;
    }
  }
  if (v10 > a2 || v9 > a3) {
    goto LABEL_33;
  }
  *(unsigned char *)(a4 + 56) &= ~1u;
  *(void *)a4 = a4 + 24;
  *(_OWORD *)(a4 + 8) = xmmword_1CDC7F9D0;
  if (v8) {
    sub_1CC1B8518(a4, (uint64_t)&v17);
  }
  if (v17 != v19) {
    free(v17);
  }
}

uint64_t llvm::XCOFF::getExtendedTBTableFlagString@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  char v3 = (_DWORD *)(a2 + 24);
  *(void *)a2 = a2 + 24;
  *(_OWORD *)(a2 + 8) = xmmword_1CDC7F9D0;
  if ((this & 0x80) == 0)
  {
    unint64_t v4 = 0;
    if ((this & 0x40) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 27) = 540103503;
  _DWORD *v3 = 1331642964;
  unint64_t v4 = 7;
  *(void *)(a2 + 8) = 7;
  if ((this & 0x40) != 0)
  {
LABEL_3:
    int v5 = (char *)v3 + v4;
    *(void *)int v5 = *(void *)"TB_RESERVED ";
    *((_DWORD *)v5 + 2) = 541345110;
    v4 += 12;
    *(void *)(a2 + 8) = v4;
  }
LABEL_4:
  if ((this & 0x20) != 0)
  {
    if (v4 >= 0x13) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    qmemcpy((char *)v3 + v4, "TB_SSP_CANARY ", 14);
    unint64_t v4 = *(void *)(a2 + 8) + 14;
    *(void *)(a2 + 8) = v4;
    if ((this & 0x10) == 0)
    {
LABEL_6:
      if ((this & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_13;
    }
  }
  else if ((this & 0x10) == 0)
  {
    goto LABEL_6;
  }
  if (*(void *)(a2 + 16) < v4 + 7) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  size_t v6 = (_DWORD *)(*(void *)a2 + v4);
  *(_DWORD *)((char *)v6 + 3) = 540169039;
  _DWORD *v6 = 1331642964;
  unint64_t v4 = *(void *)(a2 + 8) + 7;
  *(void *)(a2 + 8) = v4;
  if ((this & 8) == 0)
  {
LABEL_7:
    if ((this & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }
LABEL_13:
  if (*(void *)(a2 + 16) < v4 + 11) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  unint64_t v7 = *(void *)a2 + v4;
  *(void *)unint64_t v7 = *(void *)"TB_EH_INFO ";
  *(_DWORD *)(v7 + 7) = 542066254;
  unint64_t v4 = *(void *)(a2 + 8) + 11;
  *(void *)(a2 + 8) = v4;
  if (this)
  {
LABEL_15:
    if (*(void *)(a2 + 16) < v4 + 16) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_OWORD *)(*(void *)a2 + v4) = *(_OWORD *)"TB_LONGTBTABLE2 ";
    unint64_t v4 = *(void *)(a2 + 8) + 16;
    *(void *)(a2 + 8) = v4;
  }
LABEL_17:
  if ((this & 6) != 0)
  {
    if (*(void *)(a2 + 16) < v4 + 8) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(void *)(*(void *)a2 + v4) = 0x206E776F6E6B6E55;
    unint64_t v4 = *(void *)(a2 + 8) + 8;
  }
  *(void *)(a2 + 8) = v4 - 1;
  return this;
}

void llvm::XCOFF::parseParmsTypeWithVecInfo(llvm::XCOFF *this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  unsigned int v5 = this;
  char v18[4] = *MEMORY[0x1E4F143B8];
  unsigned int v16 = v18;
  long long v17 = xmmword_1CDC7F9D0;
  unsigned int v7 = a3 + a2 + a4;
  if (v7)
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    int v13 = 1;
    do
    {
      unsigned int v14 = v13;
      if (v9)
      {
        if (*((void *)&v17 + 1) < (unint64_t)(v8 + 2)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(_WORD *)((char *)v16 + v8) = 8236;
        uint64_t v8 = v17 + 2;
        *(void *)&long long v17 = v17 + 2;
      }
      switch((v5 >> 30) ^ 2)
      {
        case 1u:
          if (*((void *)&v17 + 1) < (unint64_t)(v8 + 1)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *((unsigned char *)v16 + v8) = 100;
          goto LABEL_11;
        case 2u:
          if (*((void *)&v17 + 1) < (unint64_t)(v8 + 1)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *((unsigned char *)v16 + v8) = 105;
          uint64_t v8 = v17 + 1;
          *(void *)&long long v17 = v17 + 1;
          ++v12;
          break;
        case 3u:
          if (*((void *)&v17 + 1) < (unint64_t)(v8 + 1)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *((unsigned char *)v16 + v8) = 118;
          uint64_t v8 = v17 + 1;
          *(void *)&long long v17 = v17 + 1;
          ++v10;
          break;
        default:
          if (*((void *)&v17 + 1) < (unint64_t)(v8 + 1)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *((unsigned char *)v16 + v8) = 102;
LABEL_11:
          uint64_t v8 = v17 + 1;
          *(void *)&long long v17 = v17 + 1;
          ++v11;
          break;
      }
      v5 *= 4;
      if (v9 > 0x1D) {
        break;
      }
      v9 += 2;
      ++v13;
    }
    while (v14 < v7);
    if (v14 >= v7)
    {
      if (v5) {
        goto LABEL_36;
      }
    }
    else
    {
      if (*((void *)&v17 + 1) < (unint64_t)(v8 + 5)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      int v15 = (char *)v16 + v8;
      v15[4] = 46;
      *(_DWORD *)int v15 = 774774828;
      uint64_t v8 = v17 + 5;
      *(void *)&long long v17 = v17 + 5;
      if (v5)
      {
LABEL_36:
        std::generic_category();
        sub_1CD06481C();
      }
    }
  }
  else
  {
    unsigned int v10 = 0;
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    uint64_t v8 = 0;
    if (this) {
      goto LABEL_36;
    }
  }
  if (v12 > a2 || v11 > a3 || v10 > a4) {
    goto LABEL_36;
  }
  *(unsigned char *)(a5 + 56) &= ~1u;
  *(void *)a5 = a5 + 24;
  *(_OWORD *)(a5 + 8) = xmmword_1CDC7F9D0;
  if (v8) {
    sub_1CC1B8518(a5, (uint64_t)&v16);
  }
  if (v16 != v18) {
    free(v16);
  }
}

void llvm::XCOFF::parseVectorParmsType(llvm::XCOFF *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v3 = this;
  v13[4] = *MEMORY[0x1E4F143B8];
  unsigned int v11 = v13;
  long long v12 = xmmword_1CDC7F9D0;
  if (!a2)
  {
    uint64_t v5 = 0;
    if (!this) {
      goto LABEL_31;
    }
    goto LABEL_29;
  }
  uint64_t v5 = 0;
  int v6 = 0;
  int v7 = a2 - 1;
  if (a2 - 1 >= 0xF) {
    int v7 = 15;
  }
  unsigned int v8 = v7 + 1;
  do
  {
    if (v6)
    {
      if (*((void *)&v12 + 1) < (unint64_t)(v5 + 2)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(_WORD *)((char *)v11 + v5) = 8236;
      uint64_t v5 = v12 + 2;
      *(void *)&long long v12 = v12 + 2;
    }
    ++v6;
    switch((v3 >> 30) ^ 2)
    {
      case 1u:
        if (*((void *)&v12 + 1) < (unint64_t)(v5 + 2)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(_WORD *)((char *)v11 + v5) = 26230;
        break;
      case 2u:
        if (*((void *)&v12 + 1) < (unint64_t)(v5 + 2)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(_WORD *)((char *)v11 + v5) = 25462;
        break;
      case 3u:
        if (*((void *)&v12 + 1) < (unint64_t)(v5 + 2)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(_WORD *)((char *)v11 + v5) = 29558;
        break;
      default:
        if (*((void *)&v12 + 1) < (unint64_t)(v5 + 2)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(_WORD *)((char *)v11 + v5) = 26998;
        break;
    }
    uint64_t v9 = v12;
    uint64_t v5 = v12 + 2;
    *(void *)&long long v12 = v12 + 2;
    v3 *= 4;
  }
  while (v8 != v6);
  if (v8 >= a2)
  {
    if (!v3) {
      goto LABEL_31;
    }
LABEL_29:
    std::generic_category();
    sub_1CD06481C();
  }
  if (*((void *)&v12 + 1) < (unint64_t)(v9 + 7)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  unsigned int v10 = (char *)v11 + v5;
  v10[4] = 46;
  *(_DWORD *)unsigned int v10 = 774774828;
  uint64_t v5 = v12 + 5;
  *(void *)&long long v12 = v12 + 5;
  if (v3) {
    goto LABEL_29;
  }
LABEL_31:
  *(unsigned char *)(a3 + 56) &= ~1u;
  *(void *)a3 = a3 + 24;
  *(_OWORD *)(a3 + 8) = xmmword_1CDC7F9D0;
  if (v5) {
    sub_1CC1B8518(a3, (uint64_t)&v11);
  }
  if (v11 != v13) {
    free(v11);
  }
}

uint64_t sub_1CC1B8518(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = (const void *)(a2 + 24);
    unint64_t v4 = *(const void **)a2;
    if (v4 == v5)
    {
      size_t v6 = *(void *)(a2 + 8);
      size_t v7 = *(void *)(a1 + 8);
      if (v7 >= v6)
      {
        if (v6) {
          memmove(*(void **)a1, v4, *(void *)(a2 + 8));
        }
      }
      else
      {
        if (*(void *)(a1 + 16) < v6)
        {
          *(void *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (v7)
        {
          size_t v11 = *(void *)(a1 + 8);
          memmove(*(void **)a1, v4, v7);
          size_t v7 = v11;
        }
        uint64_t v8 = *(void *)(a2 + 8);
        if (v7 != v8) {
          memcpy((void *)(*(void *)a1 + v7), (const void *)(*(void *)a2 + v7), *(void *)a2 + v8 - (*(void *)a2 + v7));
        }
      }
      *(void *)(a1 + 8) = v6;
    }
    else
    {
      unsigned int v10 = *(void **)a1;
      if (*(void *)a1 != a1 + 24)
      {
        free(v10);
        unint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a2 + 16) = 0;
      *(void *)a2 = v5;
    }
    *(void *)(a2 + 8) = 0;
  }
  return a1;
}

void llvm::checkBitcodeCompatibility()
{
  strcpy((char *)operator new(0x58uLL), "([[:digit:]]+)\\.([[:digit:]]+)\\.([[:digit:]]+)\\.?([[:digit:]]*)\\.?([[:digit:]]*)");
  char v14 = 0;
  uint64_t v15 = 0;
  *(_OWORD *)size_t v6 = 0u;
  memset(v7, 0, sizeof(v7));
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  char v13 = 0;
  MEMORY[0x1D25D9B30](&v0);
  int v1 = std::locale::use_facet(&v0, MEMORY[0x1E4FBA258]);
  char v2 = std::locale::use_facet(&v0, MEMORY[0x1E4FBA280]);
  long long v3 = 0u;
  long long v4 = 0u;
  uint64_t v5 = 0;
  sub_1CC1B95E4();
}

{
  llvm::checkBitcodeCompatibility();
}

void llvm::checkV1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v9 = a6;
  uint64_t v7 = a2;
  uint64_t v8 = &v9;
  sub_1CC1C2B3C((uint64_t)&v6, "^APPLE_1_([[:digit:]]+)\\.([[:digit:]]+)\\.([[:digit:]]+)\\.?([[:digit:]]*)\\.?([[:digit:]]*)_([[:digit:]]+)$");
}

void sub_1CC1B91F4(std::string *a1, uint64_t a2, llvm::Twine *this)
{
  *((unsigned char *)&v29.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v29, " (Producer: '");
  llvm::Twine::str(this, v27);
  if (v28 >= 0) {
    uint64_t v5 = v27;
  }
  else {
    uint64_t v5 = (void **)v27[0];
  }
  if (v28 >= 0) {
    std::string::size_type v6 = v28 & 0x7F;
  }
  else {
    std::string::size_type v6 = (std::string::size_type)v27[1];
  }
  uint64_t v7 = std::string::append(&v29, (const std::string::value_type *)v5, v6);
  std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  int v9 = std::string::append(&v30, "' Reader: '");
  std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  char v11 = *(unsigned char *)(*(void *)a2 + 23);
  if (v11 >= 0) {
    uint64_t v12 = *(const std::string::value_type **)a2;
  }
  else {
    uint64_t v12 = **(const std::string::value_type ***)a2;
  }
  if (v11 >= 0) {
    std::string::size_type v13 = v11 & 0x7F;
  }
  else {
    std::string::size_type v13 = *(void *)(*(void *)a2 + 8);
  }
  char v14 = std::string::append(&v31, v12, v13);
  std::string::size_type v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  unsigned int v16 = std::string::append(&v32, "_");
  std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  LODWORD(v17) = **(_DWORD **)(a2 + 8);
  __int16 v24 = 265;
  v23[0] = v17;
  llvm::Twine::str((llvm::Twine *)v23, __p);
  if (v26 >= 0) {
    long long v18 = __p;
  }
  else {
    long long v18 = (void **)__p[0];
  }
  if (v26 >= 0) {
    std::string::size_type v19 = v26 & 0x7F;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  char v20 = std::string::append(&v33, (const std::string::value_type *)v18, v19);
  std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  char v22 = std::string::append(&v34, "')");
  *a1 = *v22;
  v22->__r_.__value_.__r.__words[0] = 0;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
}

void sub_1CC1B9430(std::string *a1, uint64_t a2)
{
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_1CD91A420;
  strcpy(v36.__r_.__value_.__l.__data_, "Invalid bitcode version");
  uint64_t v4 = *(void *)a2;
  v15[0] = **(unsigned int **)(a2 + 8);
  v15[2] = ".";
  __int16 v16 = 777;
  uint64_t v5 = *(unsigned int **)(a2 + 24);
  uint64_t v6 = **(unsigned int **)(a2 + 16);
  v17[0] = v15;
  v17[2] = v6;
  __int16 v18 = 2306;
  v19[0] = v17;
  v19[2] = ".";
  __int16 v20 = 770;
  uint64_t v7 = *v5;
  v21[0] = v19;
  v21[2] = v7;
  __int16 v22 = 2306;
  v23[0] = v21;
  v23[2] = ".";
  __int16 v24 = 770;
  std::string::size_type v8 = *(unsigned int **)(a2 + 40);
  uint64_t v9 = **(unsigned int **)(a2 + 32);
  v25[0] = v23;
  v25[2] = v9;
  __int16 v26 = 2306;
  v27[0] = v25;
  v27[2] = ".";
  __int16 v28 = 770;
  uint64_t v10 = *v8;
  v29[0] = v27;
  v29[2] = v10;
  __int16 v30 = 2306;
  v31[0] = v29;
  v31[2] = "_";
  __int16 v32 = 770;
  uint64_t v11 = **(unsigned int **)(a2 + 48);
  v33[0] = v31;
  v33[2] = v11;
  __int16 v34 = 2306;
  sub_1CC1B91F4(&v35, v4, (llvm::Twine *)v33);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v12 = &v35;
  }
  else {
    uint64_t v12 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = *((unsigned char *)&v35.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
  }
  char v14 = std::string::append(&v36, (const std::string::value_type *)v12, size);
  *a1 = *v14;
  v14->__r_.__value_.__r.__words[0] = 0;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
}

void sub_1CC1B95E4()
{
}

uint64_t sub_1CC1B99D8()
{
  return sub_1CC1B99F0();
}

void sub_1CC1B99F0()
{
}

unsigned char *sub_1CC1B9ABC(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v6 = (uint64_t)a2;
  do
  {
    uint64_t v7 = (unsigned char *)v6;
    uint64_t v6 = ((uint64_t (*)(uint64_t, uint64_t, unsigned char *))loc_1CC1BA1D0)(a1, v6, a3);
  }
  while (v7 != (unsigned char *)v6);
  if (v7 == a2) {
    operator new();
  }
  if (v7 != a3 && *v7 == 124)
  {
    std::string::size_type v8 = v7 + 1;
    uint64_t v9 = (uint64_t)(v7 + 1);
    do
    {
      uint64_t v10 = v9;
      uint64_t v9 = ((uint64_t (*)(uint64_t, uint64_t, unsigned char *))loc_1CC1BA1D0)(a1, v9, a3);
    }
    while (v10 != v9);
    if (v8 == (unsigned char *)v10) {
      operator new();
    }
    sub_1CC1BA0C8();
  }
  return v7;
}

uint64_t sub_1CC1B9C1C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  long long v3 = a2;
  if (a2 == a3) {
    return (uint64_t)a2;
  }
  uint64_t v4 = a3;
  if (*a2 == 94) {
    operator new();
  }
  if (a2 == a3) {
    return (uint64_t)v4;
  }
  do
  {
    uint64_t v6 = v3;
    long long v3 = sub_1CC1C0434(a1, v3, v4);
  }
  while (v6 != v3);
  if (v6 == v4) {
    return (uint64_t)v4;
  }
  if (v6 + 1 == v4 && *v6 == 36) {
    operator new();
  }
  uint64_t v8 = sub_1CC1B99D8();
  return sub_1CC1B9D84(v8);
}

char *sub_1CC1B9D84(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6 = (char *)sub_1CC1C0968(a1, a2, a3);
  if (v6 == a2) {
    goto LABEL_8;
  }
  uint64_t v7 = v6;
  if (v6 == a3) {
    return a3;
  }
  if (*v6 == 124)
  {
    if (v6 + 1 != (char *)sub_1CC1C0968(a1, v6 + 1, a3)) {
      sub_1CC1BA0C8();
    }
LABEL_8:
    sub_1CC1B99D8();
    JUMPOUT(0x1CC1B9E28);
  }
  return v7;
}

void sub_1CC1B9E2C()
{
}

void sub_1CC1B9E40(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void sub_1CC1B9E58(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC1B9E90(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *sub_1CC1B9EC4(void *a1)
{
  *a1 = &unk_1F2608478;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1CC1B9F30(void *a1)
{
  *a1 = &unk_1F2608478;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC1B9FBC(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void *sub_1CC1B9FD0(void *a1)
{
  *a1 = &unk_1F2608478;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1CC1BA03C(void *a1)
{
  *a1 = &unk_1F2608478;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC1BA0C8()
{
}

uint64_t sub_1CC1BA998(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return (uint64_t)a2;
  }
  int v4 = *a2;
  if (v4 <= 62)
  {
    if (v4 == 42 || (uint64_t v5 = a2, v4 == 43)) {
LABEL_18:
    }
      sub_1CC1BFE8C();
    return (uint64_t)v5;
  }
  if (v4 == 63) {
    goto LABEL_18;
  }
  uint64_t v5 = a2;
  if (v4 != 123) {
    return (uint64_t)v5;
  }
  uint64_t v6 = a2 + 1;
  uint64_t v7 = (char *)sub_1CC1BFFD4(a2 + 1, a3, &v14);
  if (v6 == v7)
  {
LABEL_24:
    sub_1CC1B99D8();
    goto LABEL_25;
  }
  if (v7 != a3)
  {
    int v8 = *v7;
    if (v8 == 44)
    {
      uint64_t v9 = v7 + 1;
      if (v7 + 1 != a3)
      {
        if (*v9 == 125) {
          goto LABEL_18;
        }
        int v13 = -1;
        uint64_t v11 = (char *)sub_1CC1BFFD4(v7 + 1, a3, &v13);
        if (v9 == v11 || v11 == a3 || *v11 != 125) {
          goto LABEL_25;
        }
        if (v13 >= v14) {
          goto LABEL_18;
        }
      }
    }
    else if (v8 == 125)
    {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
LABEL_25:
  uint64_t v12 = sub_1CC1B99D8();
  return sub_1CC1BAC9C(v12);
}

void sub_1CC1BAC9C()
{
}

void sub_1CC1BAD30()
{
}

void *sub_1CC1BAE00(void *a1)
{
  *a1 = &unk_1F2608478;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1CC1BAE6C(void *a1)
{
  *a1 = &unk_1F2608478;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC1BAEF8(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 80) = v4;
  return result;
}

void *sub_1CC1BAF58(void *a1)
{
  *a1 = &unk_1F2608478;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1CC1BAFC4(void *a1)
{
  *a1 = &unk_1F2608478;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC1BB050(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *sub_1CC1BB0A0(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608508;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608478;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_1CC1BB12C(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608508;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608478;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC1BB1D8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 80) = v12;
  return result;
}

uint64_t sub_1CC1BB2EC(uint64_t a1)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x1D25D9B30]();
  *(void *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x1E4FBA258]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E4FBA280]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  return a1;
}

std::locale *sub_1CC1BB348(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608538;
  uint64_t v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608478;
  BOOL v4 = a1[1].__locale_;
  if (v4) {
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void sub_1CC1BB42C(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608538;
  uint64_t v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608478;
  BOOL v4 = a1[1].__locale_;
  if (v4) {
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC1BB530(uint64_t a1, uint64_t a2)
{
  char v26 = 0;
  uint64_t v27 = 0;
  uint64_t v4 = a1 + 16;
  __p = 0;
  uint64_t v17 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v23 = 0;
  long long v24 = 0uLL;
  char v25 = 0;
  unint64_t v5 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v18 = 0;
  *(void *)&long long v19 = v6;
  *((void *)&v19 + 1) = v6;
  char v20 = 0;
  sub_1CC1BBB08((uint64_t)&__p, v5, &v19);
  uint64_t v21 = v7;
  uint64_t v22 = v7;
  char v23 = 0;
  long long v24 = v19;
  char v25 = v20;
  uint64_t v27 = v7;
  char v26 = 1;
  if (*(unsigned __int8 *)(a1 + 84) == ((uint64_t (*)(uint64_t))loc_1CC1BB6BC)(v4))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    uint64_t v8 = (char *)__p;
    goto LABEL_7;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  uint64_t v8 = (char *)__p;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v17 - (uint64_t)__p) >> 3);
  if (v9 < 2)
  {
LABEL_7:
    if (!v8) {
      return;
    }
    goto LABEL_8;
  }
  int v10 = 0;
  int v11 = *(_DWORD *)(a1 + 80);
  uint64_t v12 = *(void *)(a2 + 32);
  unint64_t v13 = 1;
  do
  {
    int v14 = &v8[24 * v13];
    uint64_t v15 = v12 + 24 * (v11 + v10);
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v14;
    *(unsigned char *)(v15 + 16) = v14[16];
    unint64_t v13 = (v10 + 2);
    ++v10;
  }
  while (v9 > v13);
LABEL_8:

  operator delete(v8);
}

void *sub_1CC1BBB08(uint64_t a1, unint64_t a2, long long *a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t result = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) < a2)
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v6 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    unint64_t v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      abort();
    uint64_t v11 = 3 * v10;
    uint64_t result = operator new(24 * v10);
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v11];
    uint64_t v12 = &result[3 * a2];
    uint64_t v13 = 24 * a2;
    do
    {
      *(_OWORD *)uint64_t result = *a3;
      result[2] = *((void *)a3 + 2);
      result += 3;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  uint64_t v14 = *(void *)(a1 + 8);
  unint64_t v15 = (v14 - (uint64_t)result) / 24;
  if (v15 >= a2) {
    uint64_t v16 = a2;
  }
  else {
    uint64_t v16 = (v14 - (uint64_t)result) / 24;
  }
  if (v16)
  {
    uint64_t v17 = result;
    do
    {
      *(_OWORD *)uint64_t v17 = *a3;
      *((unsigned char *)v17 + 16) = *((unsigned char *)a3 + 16);
      v17 += 3;
      --v16;
    }
    while (v16);
  }
  if (a2 <= v15)
  {
    uint64_t v12 = &result[3 * a2];
LABEL_25:
    *(void *)(a1 + 8) = v12;
    return result;
  }
  uint64_t v18 = v14 + 24 * (a2 - v15);
  uint64_t v19 = 24 * a2 - 24 * v15;
  do
  {
    long long v20 = *a3;
    *(void *)(v14 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v14 = v20;
    v14 += 24;
    v19 -= 24;
  }
  while (v19);
  *(void *)(a1 + 8) = v18;
  return result;
}

char *sub_1CC1BBC90(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      sub_1CB833614();
    }
    uint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  uint64_t v9 = &v7[96 * v2];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  unint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  uint64_t v13 = v9 + 96;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = &v9[v16];
      uint64_t v18 = &v15[v16];
      long long v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 7) = 0;
      *((void *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((void *)v17 - 6) = *(void *)&v15[v16 - 48];
      *((void *)v18 - 8) = 0;
      *((void *)v18 - 7) = 0;
      *((void *)v18 - 6) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((void *)v17 - 3) = *(void *)&v15[v16 - 24];
      *((void *)v18 - 5) = 0;
      *((void *)v18 - 4) = 0;
      *((void *)v18 - 3) = 0;
      uint64_t v20 = *(void *)&v15[v16 - 16];
      *(void *)(v17 - 11) = *(void *)&v15[v16 - 11];
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    unint64_t v15 = (char *)*a1;
    uint64_t v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      uint64_t v22 = (void *)*((void *)v21 - 5);
      if (v22)
      {
        *((void *)v21 - 4) = v22;
        operator delete(v22);
      }
      char v23 = (void *)*((void *)v21 - 8);
      if (v23)
      {
        *((void *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void sub_1CC1BBE5C(void **a1, unint64_t a2, long long *a3)
{
  uint64_t v7 = (char *)a1[1];
  unint64_t v6 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = &v7[24 * a2];
      uint64_t v14 = 24 * a2;
      do
      {
        long long v15 = *a3;
        *((void *)v7 + 2) = *((void *)a3 + 2);
        *(_OWORD *)uint64_t v7 = v15;
        v7 += 24;
        v14 -= 24;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        sub_1CB833614();
      }
      uint64_t v12 = (char *)operator new(24 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v16 = &v12[24 * v8];
    uint64_t v17 = &v16[24 * a2];
    uint64_t v18 = 24 * a2;
    long long v19 = v16;
    do
    {
      long long v20 = *a3;
      *((void *)v19 + 2) = *((void *)a3 + 2);
      *(_OWORD *)long long v19 = v20;
      v19 += 24;
      v18 -= 24;
    }
    while (v18);
    uint64_t v21 = (char *)*a1;
    if (v7 != *a1)
    {
      do
      {
        long long v22 = *(_OWORD *)(v7 - 24);
        *((void *)v16 - 1) = *((void *)v7 - 1);
        *(_OWORD *)(v16 - 24) = v22;
        v16 -= 24;
        v7 -= 24;
      }
      while (v7 != v21);
      uint64_t v7 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = &v12[24 * v11];
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_1CC1BC008(char **a1, unint64_t a2)
{
  unint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      bzero(a1[1], 16 * a2);
      v5 += 16 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = v5 - *a1;
    unint64_t v8 = a2 + (v7 >> 4);
    if (v8 >> 60) {
      abort();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        sub_1CB833614();
      }
      unint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v11[16 * (v7 >> 4)];
    uint64_t v13 = &v11[16 * v10];
    bzero(v12, 16 * a2);
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v5 - 1);
        v12 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      unint64_t v5 = *a1;
    }
    *a1 = v12;
    a1[1] = &v11[16 * a2 + v7];
    a1[2] = v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_1CC1BC14C(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (void *)*((void *)v4 - 5);
        if (v6)
        {
          *((void *)v4 - 4) = v6;
          operator delete(v6);
        }
        uint64_t v7 = (void *)*((void *)v4 - 8);
        if (v7)
        {
          *((void *)v4 - 7) = v7;
          operator delete(v7);
        }
        v4 -= 96;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1CC1BC1E8(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 == a3 || *a2 != 91) {
    return (uint64_t)a2;
  }
  if (a2 + 1 != a3) {
    operator new();
  }
  sub_1CC1B99D8();
  sub_1CC1B99D8();
  uint64_t v4 = sub_1CC1B99D8();
  return sub_1CC1BC8A4(v4);
}

uint64_t sub_1CC1BC8A4(uint64_t result)
{
  if ((*(unsigned char *)(result + 24) & 2) == 0) {
    operator new();
  }
  return result;
}

uint64_t sub_1CC1BC928(uint64_t result)
{
  if ((*(unsigned char *)(result + 24) & 2) == 0) {
    operator new();
  }
  return result;
}

void *sub_1CC1BC9A4(void *a1)
{
  *a1 = &unk_1F2608478;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1CC1BCA10(void *a1)
{
  *a1 = &unk_1F2608478;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC1BCD80(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24);
  if ((v1 & 1) == 0)
  {
    if ((v1 & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1CC1BCEEC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24);
  if ((v1 & 1) == 0)
  {
    if ((v1 & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

std::locale *sub_1CC1BD01C(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608598;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608478;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_1CC1BD0A8(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608598;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608478;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC1BD154(uint64_t result, uint64_t a2)
{
  unint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *sub_1CC1BD1E8(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F26085C8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608478;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_1CC1BD274(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F26085C8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608478;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC1BD320(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void *sub_1CC1BD368(void *a1)
{
  *a1 = &unk_1F2608478;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1CC1BD3D4(void *a1)
{
  *a1 = &unk_1F2608478;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC1BD460(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

std::locale *sub_1CC1BD4A8(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608628;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608478;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_1CC1BD534(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608628;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608478;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC1BD5E0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 80) = v6;
  return result;
}

std::locale *sub_1CC1BD6F8(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608658;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608478;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_1CC1BD784(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608658;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608478;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC1BD830(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      uint64_t v9 = v6;
      unint64_t v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v10++;
        if (v11 != v13) {
          break;
        }
        if (!--v9) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 80) = v8;
  return result;
}

void *sub_1CC1BD8C0(void *a1)
{
  *a1 = &unk_1F2608478;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1CC1BD92C(void *a1)
{
  *a1 = &unk_1F2608478;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC1BD9B8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2)
  {
    uint64_t v11 = sub_1CC1B99D8();
    sub_1CC1BDA78(v11, v12);
  }
  else
  {
    unsigned int v5 = v2 - 1;
    if (*(unsigned char *)(v3 + 24 * v5 + 16)
      && (uint64_t v7 = v3 + 24 * v5,
          int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
          uint64_t v9 = *(void *)(a2 + 16),
          *(void *)(a2 + 24) - v9 >= v8)
      && !memcmp(*(const void **)v7, *(const void **)(a2 + 16), v8))
    {
      *(_DWORD *)a2 = -994;
      *(void *)(a2 + 16) = v9 + v8;
      uint64_t v10 = *(void *)(a1 + 8);
    }
    else
    {
      uint64_t v10 = 0;
      *(_DWORD *)a2 = -993;
    }
    *(void *)(a2 + 80) = v10;
  }
}

void sub_1CC1BDA78(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = &v5[-v6];
      uint64_t v8 = (uint64_t)&v5[-v6 + 1];
      if (v8 >= 0)
      {
        unint64_t v9 = v4 - v6;
        if (2 * v9 > v8) {
          uint64_t v8 = 2 * v9;
        }
        if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v10 = v8;
        }
        if (v10) {
          uint64_t v11 = operator new(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        long long v19 = &v7[(void)v11];
        long long v20 = (char *)v11 + v10;
        v7[(void)v11] = v2;
        uint64_t v18 = (uint64_t)&v7[(void)v11 + 1];
        if (v5 != (unsigned char *)v6)
        {
          uint64_t v21 = &v5[~v6];
          do
          {
            char v22 = *--v5;
            (v21--)[(void)v11] = v22;
          }
          while (v5 != (unsigned char *)v6);
LABEL_45:
          unsigned int v5 = *(unsigned char **)(a1 + 40);
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      abort();
    }
    goto LABEL_22;
  }
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v12 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v12)
    {
      unint64_t v23 = *(void *)(a1 + 40);
      long long v24 = &v5[-v23];
      uint64_t v25 = (uint64_t)&v5[-v23 + 1];
      if (v25 >= 0)
      {
        unint64_t v26 = v12 - v23;
        if (2 * v26 > v25) {
          uint64_t v25 = 2 * v26;
        }
        if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v27 = v25;
        }
        if (v27) {
          uint64_t v11 = operator new(v27);
        }
        else {
          uint64_t v11 = 0;
        }
        long long v19 = &v24[(void)v11];
        long long v20 = (char *)v11 + v27;
        v24[(void)v11] = v2;
        uint64_t v18 = (uint64_t)&v24[(void)v11 + 1];
        if (v5 != (unsigned char *)v23)
        {
          __int16 v30 = &v5[~v23];
          do
          {
            char v31 = *--v5;
            (v30--)[(void)v11] = v31;
          }
          while (v5 != (unsigned char *)v23);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    unsigned char *v5 = v2;
    uint64_t v18 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v12) {
    goto LABEL_22;
  }
  unint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = &v5[-v13];
  uint64_t v15 = (uint64_t)&v5[-v13 + 1];
  if (v15 < 0) {
    goto LABEL_50;
  }
  unint64_t v16 = v12 - v13;
  if (2 * v16 > v15) {
    uint64_t v15 = 2 * v16;
  }
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v17 = v15;
  }
  if (v17) {
    uint64_t v11 = operator new(v17);
  }
  else {
    uint64_t v11 = 0;
  }
  long long v19 = &v14[(void)v11];
  long long v20 = (char *)v11 + v17;
  v14[(void)v11] = v2;
  uint64_t v18 = (uint64_t)&v14[(void)v11 + 1];
  if (v5 != (unsigned char *)v13)
  {
    __int16 v28 = &v5[~v13];
    do
    {
      char v29 = *--v5;
      (v28--)[(void)v11] = v29;
    }
    while (v5 != (unsigned char *)v13);
    goto LABEL_45;
  }
LABEL_46:
  uint64_t v11 = v19;
LABEL_47:
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v18;
  *(void *)(a1 + 56) = v20;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v18;
}

uint64_t sub_1CC1BDCAC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)a1 = &unk_1F26086B8;
  *(void *)(a1 + 8) = a3;
  uint64_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 170) = a6;
  std::locale::locale(&v20, v11);
  std::locale::name(&__s1, &v20);
  char v12 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v14 = *((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type v14 = __s1.__r_.__value_.__l.__size_;
  }
  if (v14 == 1)
  {
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    }
    else
    {
      p_s1 = &__s1;
      std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    int v16 = memcmp(p_s1, "C", size != 0);
    BOOL v18 = size != 1 || v16 != 0;
    if (v12 < 0) {
      goto LABEL_16;
    }
  }
  else
  {
    BOOL v18 = 1;
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_16:
    }
      operator delete(__s1.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v20);
  *(unsigned char *)(a1 + 171) = v18;
  return a1;
}

void sub_1CC1BDDEC(std::locale *a1)
{
  sub_1CC1BE8BC(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC1BDE24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = *(char **)(a2 + 16);
  unsigned int v5 = *(char **)(a2 + 24);
  if (v4 == v5)
  {
    uint64_t v12 = 0;
    int v13 = *(unsigned __int8 *)(a1 + 168);
    goto LABEL_257;
  }
  if (!*(unsigned char *)(a1 + 171) || v4 + 1 == v5) {
    goto LABEL_82;
  }
  char v6 = *v4;
  LOBYTE(v137) = *v4;
  char v7 = v4[1];
  HIBYTE(v137) = v7;
  if (*(unsigned char *)(a1 + 169))
  {
    LOBYTE(v137) = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v6);
    HIBYTE(v137) = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v7);
  }
  *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = v137;
  __s.__r_.__value_.__s.__data_[2] = 0;
  std::__get_collation_name(&v138, (const char *)&__s);
  std::string __p = v138;
  int v8 = SHIBYTE(v138.__r_.__value_.__r.__words[2]);
  std::string::size_type size = *((unsigned char *)&v138.__r_.__value_.__s + 23) & 0x7F;
  if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v138.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    std::string::size_type v10 = *((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x7F;
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v10 = __s.__r_.__value_.__l.__size_;
    }
    if (v10 <= 2)
    {
      (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 32) + 32))(&v138);
      if (v8 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v138;
      std::string::size_type v11 = *((unsigned char *)&v138.__r_.__value_.__s + 23) & 0x7F;
      if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v11 = v138.__r_.__value_.__l.__size_;
      }
      if (v11 == 12 || v11 == 1)
      {
        std::string::operator=(&__p, &__s);
      }
      else if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
      {
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      }
    }
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v14) {
      goto LABEL_30;
    }
LABEL_82:
    int v13 = 0;
    uint64_t v12 = 1;
    goto LABEL_83;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v14) {
    goto LABEL_82;
  }
LABEL_30:
  uint64_t v15 = *(void *)(a1 + 112);
  uint64_t v16 = *(void *)(a1 + 120) - v15;
  if (v16)
  {
    uint64_t v17 = v16 >> 1;
    if ((unint64_t)(v16 >> 1) <= 1) {
      uint64_t v17 = 1;
    }
    BOOL v18 = (unsigned __int8 *)(v15 + 1);
    do
    {
      if (v137 == *(v18 - 1) && HIBYTE(v137) == *v18) {
        goto LABEL_255;
      }
      v18 += 2;
      --v17;
    }
    while (v17);
  }
  uint64_t v20 = a1 + 16;
  if (!*(unsigned char *)(a1 + 170) || *(void *)(a1 + 88) == *(void *)(a1 + 96))
  {
    int v13 = 0;
LABEL_192:
    if (*(void *)(a1 + 136) == *(void *)(a1 + 144)) {
      goto LABEL_233;
    }
    sub_1CC1BEAD4((uint64_t)&__s, v20, (char *)&v137, (char *)&v138);
    uint64_t v96 = *(void *)(a1 + 136);
    char v97 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    uint64_t v98 = *(void *)(a1 + 144) - v96;
    if (!v98)
    {
      if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0) {
        operator delete(__s.__r_.__value_.__l.__data_);
      }
      goto LABEL_233;
    }
    int v135 = v13;
    unint64_t v99 = 0;
    unint64_t v100 = v98 / 24;
    uint64_t v101 = *((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x7F;
    std::string::size_type v103 = __s.__r_.__value_.__l.__size_;
    v102 = (const void *)__s.__r_.__value_.__r.__words[0];
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v104 = *((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type v104 = __s.__r_.__value_.__l.__size_;
    }
    if (v100 <= 1) {
      uint64_t v105 = 1;
    }
    else {
      uint64_t v105 = v98 / 24;
    }
    for (BOOL i = 1; ; BOOL i = v99 < v100)
    {
      uint64_t v107 = v96 + 24 * v99;
      char v108 = *(unsigned char *)(v107 + 23);
      int v109 = v108;
      uint64_t v110 = v108 & 0x7F;
      if (v109 < 0) {
        uint64_t v110 = *(void *)(v107 + 8);
      }
      if (v104 != v110) {
        goto LABEL_213;
      }
      v111 = v109 >= 0 ? (unsigned __int8 *)(v96 + 24 * v99) : *(unsigned __int8 **)v107;
      if ((v97 & 0x80) == 0) {
        break;
      }
      BOOL v129 = i;
      uint64_t v132 = v96;
      int v113 = v102;
      std::string::size_type v114 = v103;
      if (!memcmp(v102, v111, v103))
      {
        operator delete(__s.__r_.__value_.__l.__data_);
        if (v129) {
          goto LABEL_255;
        }
LABEL_219:
        int v13 = 1;
LABEL_233:
        if ((char)v137 < 0)
        {
          unsigned int v118 = *(_DWORD *)(a1 + 164);
          int v119 = (v118 >> 7) & 1;
LABEL_246:
          if ((SHIBYTE(v137) & 0x80000000) == 0)
          {
            int v120 = *(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * HIBYTE(v137)) & v118;
            int v121 = HIBYTE(v137) == 95 ? v119 : 0;
            if (v120 || v121 != 0)
            {
LABEL_256:
              uint64_t v12 = 2;
              goto LABEL_257;
            }
          }
        }
        else
        {
          int v115 = *(_DWORD *)(a1 + 160);
          uint64_t v116 = *(void *)(*(void *)(a1 + 24) + 16);
          int v117 = *(_DWORD *)(v116 + 4 * v137);
          if ((v117 & v115) == 0 && (v137 != 95 || (v115 & 0x80) == 0)
            || SHIBYTE(v137) < 0
            || (*(_DWORD *)(v116 + 4 * HIBYTE(v137)) & v115) == 0 && ((v115 & 0x80) == 0 || HIBYTE(v137) != 95))
          {
            unsigned int v118 = *(_DWORD *)(a1 + 164);
            if ((v118 & v117) == 0)
            {
              int v119 = (v118 >> 7) & 1;
              if (v137 != 95 || (v118 & 0x80) == 0) {
                goto LABEL_246;
              }
            }
            goto LABEL_256;
          }
        }
LABEL_255:
        int v13 = 1;
        goto LABEL_256;
      }
      ++v99;
      std::string::size_type v103 = v114;
      v102 = v113;
      uint64_t v96 = v132;
      if (v99 == v105) {
        goto LABEL_231;
      }
LABEL_217:
      ;
    }
    if (!v101)
    {
LABEL_218:
      if (i) {
        goto LABEL_255;
      }
      goto LABEL_219;
    }
    uint64_t v112 = 0;
    while (__s.__r_.__value_.__s.__data_[v112] == v111[v112])
    {
      if (v101 == ++v112) {
        goto LABEL_218;
      }
    }
LABEL_213:
    if (++v99 == v105)
    {
      if (v97 < 0) {
LABEL_231:
      }
        operator delete(__s.__r_.__value_.__l.__data_);
      int v13 = v135;
      goto LABEL_233;
    }
    goto LABEL_217;
  }
  sub_1CC1BEA28((uint64_t)&__s, a1 + 16, (char *)&v137, (char *)&v138);
  uint64_t v21 = *(void *)(a1 + 88);
  char v22 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  uint64_t v23 = *(void *)(a1 + 96) - v21;
  if (v23)
  {
    uint64_t v24 = 0;
    unint64_t v25 = v23 / 48;
    char v126 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v26 = *((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type v26 = __s.__r_.__value_.__l.__size_;
    }
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_s = &__s;
    }
    else {
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    }
    if (v25 <= 1) {
      uint64_t v28 = 1;
    }
    else {
      uint64_t v28 = v23 / 48;
    }
    char v29 = (char *)(v21 + 47);
    BOOL v30 = 1;
    while (1)
    {
      char v31 = *(v29 - 24);
      if (v31 >= 0) {
        __int16 v32 = (unsigned __int8 *)(v29 - 47);
      }
      else {
        __int16 v32 = *(unsigned __int8 **)(v29 - 47);
      }
      if (v31 >= 0) {
        size_t v33 = v31 & 0x7F;
      }
      else {
        size_t v33 = *(void *)(v29 - 39);
      }
      if (v33 >= v26) {
        size_t v34 = v26;
      }
      else {
        size_t v34 = v33;
      }
      int v35 = memcmp(p_s, v32, v34);
      if (v26 >= v33) {
        int v36 = 0;
      }
      else {
        int v36 = -1;
      }
      if (v35) {
        int v36 = v35;
      }
      if ((v36 & 0x80000000) == 0)
      {
        std::string::size_type v37 = (unsigned __int8 *)(v29 - 23);
        if (*v29 < 0)
        {
          size_t v38 = *(void *)(v29 - 15);
          std::string::size_type v37 = *(unsigned __int8 **)(v29 - 23);
        }
        else
        {
          size_t v38 = *v29;
        }
        if (v26 >= v38) {
          size_t v39 = v38;
        }
        else {
          size_t v39 = v26;
        }
        int v40 = memcmp(v37, p_s, v39);
        if (v38 >= v26) {
          int v41 = 0;
        }
        else {
          int v41 = -1;
        }
        if (v40) {
          int v41 = v40;
        }
        if ((v41 & 0x80000000) == 0) {
          break;
        }
      }
      BOOL v30 = ++v24 < v25;
      v29 += 48;
      if (v28 == v24)
      {
        int v13 = 0;
        char v95 = 1;
        goto LABEL_186;
      }
    }
    char v95 = 0;
    int v13 = 1;
LABEL_186:
    uint64_t v20 = a1 + 16;
    char v22 = v126;
  }
  else
  {
    BOOL v30 = 0;
    int v13 = 0;
    char v95 = 1;
  }
  if (v22 < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (!v30) {
    goto LABEL_192;
  }
  if ((v95 & 1) == 0) {
    goto LABEL_256;
  }
  uint64_t v12 = 2;
LABEL_83:
  unsigned __int8 v42 = **(unsigned char **)(v2 + 16);
  v138.__r_.__value_.__s.__data_[0] = v42;
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v42 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), (char)v42);
    v138.__r_.__value_.__s.__data_[0] = v42;
  }
  uint64_t v43 = *(unsigned __int8 **)(a1 + 40);
  unint64_t v44 = *(void *)(a1 + 48) - (void)v43;
  if (v44)
  {
    if (v44 <= 1) {
      unint64_t v44 = 1;
    }
    while (1)
    {
      int v45 = *v43++;
      if (v45 == v42) {
        break;
      }
      if (!--v44) {
        goto LABEL_90;
      }
    }
LABEL_227:
    int v13 = 1;
    goto LABEL_257;
  }
LABEL_90:
  unsigned int v46 = *(_DWORD *)(a1 + 164);
  if (v46 || *(void *)(a1 + 64) != *(void *)(a1 + 72))
  {
    if ((v42 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * v42) & v46) == 0)
    {
      int v48 = (v46 >> 7) & 1;
      char v47 = v42 == 95 ? v48 : 0;
    }
    else
    {
      char v47 = 1;
    }
    char v49 = *(void **)(a1 + 72);
    uint64_t v50 = memchr(*(void **)(a1 + 64), (char)v42, (size_t)v49 - *(void *)(a1 + 64));
    int v51 = v50 ? v50 : v49;
    if ((v47 & 1) == 0 && v51 == v49) {
      goto LABEL_227;
    }
  }
  uint64_t v52 = *(void *)(a1 + 88);
  uint64_t v53 = *(void *)(a1 + 96);
  if (v52 != v53)
  {
    int v133 = v13;
    if (*(unsigned char *)(a1 + 170))
    {
      sub_1CC1BEA28((uint64_t)&__s, a1 + 16, (char *)&v138, &v138.__r_.__value_.__s.__data_[1]);
      uint64_t v52 = *(void *)(a1 + 88);
      uint64_t v53 = *(void *)(a1 + 96);
      char v54 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else
    {
      char v54 = 1;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v42;
    }
    uint64_t v55 = v53 - v52;
    if (v55)
    {
      char v127 = v54;
      uint64_t v130 = v12;
      uint64_t v56 = 0;
      unint64_t v57 = v55 / 48;
      if (v54 >= 0) {
        std::string::size_type v58 = v54 & 0x7F;
      }
      else {
        std::string::size_type v58 = __s.__r_.__value_.__l.__size_;
      }
      if (v54 >= 0) {
        v59 = &__s;
      }
      else {
        v59 = (std::string *)__s.__r_.__value_.__r.__words[0];
      }
      if (v57 <= 1) {
        uint64_t v60 = 1;
      }
      else {
        uint64_t v60 = v55 / 48;
      }
      v61 = (char *)(v52 + 47);
      BOOL v62 = 1;
      while (1)
      {
        char v63 = *(v61 - 24);
        if (v63 >= 0) {
          v64 = (unsigned __int8 *)(v61 - 47);
        }
        else {
          v64 = *(unsigned __int8 **)(v61 - 47);
        }
        if (v63 >= 0) {
          size_t v65 = v63 & 0x7F;
        }
        else {
          size_t v65 = *(void *)(v61 - 39);
        }
        if (v65 >= v58) {
          size_t v66 = v58;
        }
        else {
          size_t v66 = v65;
        }
        int v67 = memcmp(v59, v64, v66);
        if (v58 >= v65) {
          int v68 = 0;
        }
        else {
          int v68 = -1;
        }
        if (v67) {
          int v68 = v67;
        }
        if ((v68 & 0x80000000) == 0)
        {
          v69 = (unsigned __int8 *)(v61 - 23);
          if (*v61 < 0)
          {
            size_t v70 = *(void *)(v61 - 15);
            v69 = *(unsigned __int8 **)(v61 - 23);
          }
          else
          {
            size_t v70 = *v61;
          }
          if (v58 >= v70) {
            size_t v71 = v70;
          }
          else {
            size_t v71 = v58;
          }
          int v72 = memcmp(v69, v59, v71);
          if (v70 >= v58) {
            int v73 = 0;
          }
          else {
            int v73 = -1;
          }
          if (v72) {
            int v73 = v72;
          }
          if ((v73 & 0x80000000) == 0) {
            break;
          }
        }
        BOOL v62 = ++v56 < v57;
        v61 += 48;
        if (v60 == v56)
        {
          int v13 = v133;
          goto LABEL_151;
        }
      }
      int v13 = 1;
LABEL_151:
      uint64_t v12 = v130;
      if ((v127 & 0x80) == 0) {
        goto LABEL_153;
      }
    }
    else
    {
      BOOL v62 = 0;
      if ((v54 & 0x80) == 0) {
        goto LABEL_153;
      }
    }
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_153:
    if (v62) {
      goto LABEL_257;
    }
  }
  if (*(void *)(a1 + 136) == *(void *)(a1 + 144)) {
    goto LABEL_225;
  }
  sub_1CC1BEAD4((uint64_t)&__s, a1 + 16, (char *)&v138, &v138.__r_.__value_.__s.__data_[1]);
  uint64_t v74 = *(void *)(a1 + 136);
  char v75 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  uint64_t v76 = *(void *)(a1 + 144) - v74;
  if (!v76)
  {
    if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
LABEL_225:
    if (v138.__r_.__value_.__s.__data_[0] < 0
      || (*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4
                                                               * v138.__r_.__value_.__s.__data_[0]) & *(_DWORD *)(a1 + 160)) == 0)
    {
      if (((v138.__r_.__value_.__s.__data_[0] == 95) & ((*(_DWORD *)(a1 + 160) & 0x80u) >> 7)) != 0) {
        int v13 = 1;
      }
      goto LABEL_257;
    }
    goto LABEL_227;
  }
  uint64_t v131 = v12;
  int v134 = v13;
  unint64_t v77 = 0;
  unint64_t v78 = v76 / 24;
  uint64_t v79 = *((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x7F;
  std::string::size_type v81 = __s.__r_.__value_.__l.__size_;
  char v80 = (const void *)__s.__r_.__value_.__r.__words[0];
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v82 = *((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type v82 = __s.__r_.__value_.__l.__size_;
  }
  if (v78 <= 1) {
    uint64_t v83 = 1;
  }
  else {
    uint64_t v83 = v76 / 24;
  }
  for (BOOL j = 1; ; BOOL j = v77 < v78)
  {
    BOOL v85 = (unsigned __int8 **)(v74 + 24 * v77);
    char v86 = *((unsigned char *)v85 + 23);
    int v87 = v86;
    v88 = (unsigned __int8 *)(v86 & 0x7F);
    if (v87 < 0) {
      v88 = v85[1];
    }
    if ((unsigned __int8 *)v82 == v88) {
      break;
    }
LABEL_175:
    if (++v77 == v83)
    {
      if (v75 < 0) {
LABEL_223:
      }
        operator delete(__s.__r_.__value_.__l.__data_);
      int v13 = v134;
      uint64_t v12 = v131;
      goto LABEL_225;
    }
LABEL_179:
    ;
  }
  if (v87 >= 0) {
    int v89 = (unsigned __int8 *)(v74 + 24 * v77);
  }
  else {
    int v89 = *v85;
  }
  if ((v75 & 0x80) == 0)
  {
    if (!v79)
    {
LABEL_180:
      int v13 = 1;
      uint64_t v12 = v131;
      if (!j) {
        goto LABEL_225;
      }
      goto LABEL_257;
    }
    uint64_t v90 = 0;
    while (__s.__r_.__value_.__s.__data_[v90] == v89[v90])
    {
      if (v79 == ++v90) {
        goto LABEL_180;
      }
    }
    goto LABEL_175;
  }
  BOOL v125 = j;
  uint64_t v128 = v2;
  uint64_t v91 = v74;
  std::string::size_type v92 = v82;
  BOOL v93 = v80;
  std::string::size_type v94 = v81;
  if (memcmp(v80, v89, v81))
  {
    ++v77;
    std::string::size_type v81 = v94;
    char v80 = v93;
    std::string::size_type v82 = v92;
    uint64_t v74 = v91;
    uint64_t v2 = v128;
    if (v77 == v83) {
      goto LABEL_223;
    }
    goto LABEL_179;
  }
  operator delete(__s.__r_.__value_.__l.__data_);
  int v13 = 1;
  uint64_t v2 = v128;
  uint64_t v12 = v131;
  if (!v125) {
    goto LABEL_225;
  }
LABEL_257:
  if (v13 == *(unsigned __int8 *)(a1 + 168))
  {
    uint64_t v123 = 0;
    int v124 = -993;
  }
  else
  {
    *(void *)(v2 + 16) += v12;
    uint64_t v123 = *(void *)(a1 + 8);
    int v124 = -995;
  }
  *(_DWORD *)uint64_t v2 = v124;
  *(void *)(v2 + 80) = v123;
}

std::locale *sub_1CC1BE8BC(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F26086B8;
  char v7 = a1 + 17;
  sub_1CB8338B8((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  char v7 = a1 + 11;
  sub_1CC1BE9A4((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  unint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F2608478;
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void sub_1CC1BE9A4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unsigned int v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1CD3C4FA4(v4 - 48);
      while ((void *)v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC1BEA28(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  sub_1CC028D80(__p, a3, a4, a4 - a3);
  if (v8 >= 0) {
    unsigned int v5 = __p;
  }
  else {
    unsigned int v5 = (void **)__p[0];
  }
  char v6 = (char *)(v8 & 0x7F);
  if (v8 < 0) {
    char v6 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v5, &v6[(void)v5]);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1CC1BEAD4(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  sub_1CC028D80(__p, a3, a4, a4 - a3);
  if (v13 >= 0) {
    char v6 = __p;
  }
  else {
    char v6 = (void **)__p[0];
  }
  char v7 = (char *)(v13 & 0x7F);
  if (v13 < 0) {
    char v7 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, &v7[(void)v6]);
  char v8 = *(unsigned char *)(a1 + 23);
  int v9 = v8;
  uint64_t v10 = v8 & 0x7F;
  if (v9 < 0) {
    uint64_t v10 = *(void *)(a1 + 8);
  }
  if (v10 != 1)
  {
    if (v10 == 12)
    {
      if (v9 >= 0) {
        std::string::size_type v11 = (unsigned char *)a1;
      }
      else {
        std::string::size_type v11 = *(unsigned char **)a1;
      }
      v11[11] = v11[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a1 = 0;
      *(void *)(a1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
    }
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
}

uint64_t sub_1CC1BEBDC(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  unsigned int v5 = a3 - 2;
  char v6 = a2;
  char v7 = a2;
  for (i = a2; ; char v7 = i)
  {
    int v9 = *i++;
    if (v9 == 46 && *i == 93) {
      break;
    }
    if (a2 == v5) {
      goto LABEL_15;
    }
    ++v6;
    --v5;
  }
  if (v7 == a3)
  {
LABEL_15:
    sub_1CC1B99D8();
  }
  else
  {
    sub_1CC1BF6C4((uint64_t)&v18, a1, a2, v6);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(_OWORD *)a4 = v18;
    unint64_t v10 = v19;
    *(void *)(a4 + 16) = v19;
    v10 >>= 56;
    int v11 = (char)v10;
    uint64_t v12 = v10 & 0x7F;
    if (v11 < 0) {
      uint64_t v12 = *(void *)(a4 + 8);
    }
    if ((unint64_t)(v12 - 1) < 2) {
      return (uint64_t)(v6 + 2);
    }
  }
  int v14 = sub_1CC1B99D8();
  return sub_1CC1BECD0(v14, v15, v16, v17);
}

unsigned char *sub_1CC1BECD0(uint64_t a1, unsigned char *a2, unsigned char *a3, std::string *this, uint64_t a5)
{
  if (a2 == a3)
  {
    sub_1CC1B99D8();
    JUMPOUT(0x1CC1BEDF4);
  }
  int v6 = (char)*a2;
  if (v6 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119) {
          return (unsigned char *)((uint64_t (*)(uint64_t, unsigned char *))loc_1CC1BCA9C)(a1, a2);
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        sub_1CC1BDA78(a5, 95);
        return a2 + 1;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v6 == 98)
      {
        unint64_t v10 = this;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return a2 + 1;
      }
      if (v6 != 100) {
        return (unsigned char *)((uint64_t (*)(uint64_t, unsigned char *))loc_1CC1BCA9C)(a1, a2);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return a2 + 1;
  }
  if (v6 <= 82)
  {
    if (*a2)
    {
      if (v6 == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return a2 + 1;
      }
      return (unsigned char *)((uint64_t (*)(void, void))loc_1CC1BCA9C)(a1, a2);
    }
    std::string::value_type v9 = 0;
    unint64_t v10 = this;
    goto LABEL_19;
  }
  if (v6 == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (v6 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    sub_1CC1BF858(a5);
    return a2 + 1;
  }
  return (unsigned char *)((uint64_t (*)(void, void))loc_1CC1BCA9C)(a1, a2);
}

void sub_1CC1BEFFC(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  if (*(unsigned char *)(a1 + 170))
  {
    if (*(unsigned char *)(a1 + 169))
    {
      for (unint64_t i = 0; ; ++i)
      {
        unint64_t v7 = v4[23] < 0 ? *((void *)v4 + 1) : v4[23];
        if (i >= v7) {
          break;
        }
        int v8 = v4;
        if (v4[23] < 0) {
          int v8 = *(char **)v4;
        }
        char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v8[i]);
        unint64_t v10 = v4;
        if (v4[23] < 0) {
          unint64_t v10 = *(char **)v4;
        }
        v10[i] = v9;
      }
      for (unint64_t j = 0; ; ++j)
      {
        unint64_t v12 = v3[23] < 0 ? *((void *)v3 + 1) : v3[23];
        if (j >= v12) {
          break;
        }
        char v13 = v3;
        if (v3[23] < 0) {
          char v13 = *(char **)v3;
        }
        char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v13[j]);
        int v15 = v3;
        if (v3[23] < 0) {
          int v15 = *(char **)v3;
        }
        v15[j] = v14;
      }
    }
    else
    {
      for (unint64_t k = 0; ; ++k)
      {
        unint64_t v18 = a2[23] < 0 ? *((void *)a2 + 1) : a2[23];
        if (k >= v18) {
          break;
        }
        unint64_t v19 = a2;
        if (a2[23] < 0) {
          unint64_t v19 = *(char **)a2;
        }
        uint64_t v20 = a2;
        if (a2[23] < 0) {
          uint64_t v20 = *(char **)a2;
        }
        v20[k] = v19[k];
      }
      for (unint64_t m = 0; ; ++m)
      {
        unint64_t v22 = a3[23] < 0 ? *((void *)a3 + 1) : a3[23];
        if (m >= v22) {
          break;
        }
        uint64_t v23 = a3;
        if (a3[23] < 0) {
          uint64_t v23 = *(char **)a3;
        }
        uint64_t v24 = a3;
        if (a3[23] < 0) {
          uint64_t v24 = *(char **)a3;
        }
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      std::string::size_type v26 = v4;
      uint64_t v4 = *(char **)v4;
      uint64_t v25 = *((void *)v26 + 1);
    }
    else
    {
      uint64_t v25 = v4[23];
    }
    sub_1CC1BEA28((uint64_t)&v46, a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      uint64_t v28 = v3;
      uint64_t v3 = *(char **)v3;
      uint64_t v27 = *((void *)v28 + 1);
    }
    else
    {
      uint64_t v27 = v3[23];
    }
    sub_1CC1BEA28((uint64_t)v44, a1 + 16, v3, &v3[v27]);
    *(_OWORD *)int v48 = v46;
    uint64_t v49 = v47;
    uint64_t v47 = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)v44;
    uint64_t v51 = v45;
    v44[0] = 0;
    v44[1] = 0;
    uint64_t v45 = 0;
    long long v46 = 0uLL;
    unint64_t v29 = *(void *)(a1 + 96);
    if (v29 >= *(void *)(a1 + 104))
    {
      BOOL v30 = sub_1CC1BFAC4((void **)(a1 + 88), (uint64_t)v48);
      int v31 = SHIBYTE(v51);
      *(void *)(a1 + 96) = v30;
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v29 = *(_OWORD *)v48;
      *(void *)(v29 + 16) = v49;
      v48[1] = 0;
      uint64_t v49 = 0;
      v48[0] = 0;
      *(_OWORD *)(v29 + 24) = *(_OWORD *)__p;
      *(void *)(v29 + 40) = v51;
      *(void *)(a1 + 96) = v29 + 48;
    }
    if (SHIBYTE(v49) < 0) {
      operator delete(v48[0]);
    }
    if (SHIBYTE(v45) < 0) {
      operator delete(v44[0]);
    }
    if (SHIBYTE(v47) < 0)
    {
      __int16 v32 = (void *)v46;
LABEL_83:
      operator delete(v32);
    }
  }
  else
  {
    if (a2[23] < 0) {
      uint64_t v16 = *((void *)a2 + 1);
    }
    else {
      uint64_t v16 = a2[23];
    }
    if (v16 != 1 || (a3[23] < 0 ? (uint64_t v33 = *((void *)a3 + 1)) : (uint64_t v33 = a3[23]), v33 != 1))
    {
      uint64_t v43 = sub_1CC1B99D8();
      sub_1CC1BF468(v43);
      return;
    }
    if (*(unsigned char *)(a1 + 169))
    {
      size_t v34 = a2;
      if (a2[23] < 0) {
        size_t v34 = *(char **)a2;
      }
      char v35 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v34);
      int v36 = v4;
      if (v4[23] < 0) {
        int v36 = *(unsigned char **)v4;
      }
      *int v36 = v35;
      std::string::size_type v37 = v3;
      if (v3[23] < 0) {
        std::string::size_type v37 = *(char **)v3;
      }
      char v38 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v37);
      size_t v39 = v3;
      if (v3[23] < 0) {
        size_t v39 = *(unsigned char **)v3;
      }
      *size_t v39 = v38;
    }
    *(_OWORD *)int v48 = *(_OWORD *)v4;
    uint64_t v49 = *((void *)v4 + 2);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)uint64_t v4 = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)v3;
    uint64_t v51 = *((void *)v3 + 2);
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    *(void *)uint64_t v3 = 0;
    unint64_t v40 = *(void *)(a1 + 96);
    if (v40 >= *(void *)(a1 + 104))
    {
      int v41 = sub_1CC1BFAC4((void **)(a1 + 88), (uint64_t)v48);
      int v42 = SHIBYTE(v51);
      *(void *)(a1 + 96) = v41;
      if (v42 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v40 = *(_OWORD *)v48;
      *(void *)(v40 + 16) = v49;
      v48[1] = 0;
      uint64_t v49 = 0;
      v48[0] = 0;
      *(_OWORD *)(v40 + 24) = *(_OWORD *)__p;
      *(void *)(v40 + 40) = v51;
      *(void *)(a1 + 96) = v40 + 48;
    }
    if (SHIBYTE(v49) < 0)
    {
      __int16 v32 = v48[0];
      goto LABEL_83;
    }
  }
}

void sub_1CC1BF468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
    int v8 = *(char **)(a1 + 120);
    unint64_t v7 = *(void *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      char v9 = *(char **)(a1 + 112);
      uint64_t v10 = v8 - v9;
      if (v8 - v9 > -3)
      {
        uint64_t v11 = v10 >> 1;
        unint64_t v12 = v7 - (void)v9;
        if (v12 <= (v10 >> 1) + 1) {
          unint64_t v13 = v11 + 1;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v14 = v13;
        }
        if (!v14)
        {
          int v15 = 0;
          goto LABEL_28;
        }
        if ((v14 & 0x8000000000000000) == 0)
        {
          int v15 = (char *)operator new(2 * v14);
LABEL_28:
          uint64_t v25 = &v15[2 * v11];
          std::string::size_type v26 = &v15[2 * v14];
          *(_WORD *)uint64_t v25 = v6;
          uint64_t v24 = v25 + 2;
          if (v8 == v9) {
            goto LABEL_49;
          }
          do
          {
            __int16 v27 = *((_WORD *)v8 - 1);
            v8 -= 2;
            *((_WORD *)v25 - 1) = v27;
            v25 -= 2;
          }
          while (v8 != v9);
          goto LABEL_48;
        }
LABEL_53:
        sub_1CB833614();
      }
LABEL_52:
      abort();
    }
    goto LABEL_26;
  }
  __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  int v8 = *(char **)(a1 + 120);
  unint64_t v16 = *(void *)(a1 + 128);
  if (*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v8 >= v16)
    {
      uint64_t v17 = *(char **)(a1 + 112);
      uint64_t v18 = v8 - v17;
      if (v8 - v17 > -3)
      {
        uint64_t v19 = v18 >> 1;
        unint64_t v20 = v16 - (void)v17;
        if (v20 <= (v18 >> 1) + 1) {
          unint64_t v21 = v19 + 1;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v20 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v22 = v21;
        }
        if (v22)
        {
          if (v22 < 0) {
            goto LABEL_53;
          }
          uint64_t v23 = (char *)operator new(2 * v22);
        }
        else
        {
          uint64_t v23 = 0;
        }
        uint64_t v25 = &v23[2 * v19];
        std::string::size_type v26 = &v23[2 * v22];
        *(_WORD *)uint64_t v25 = v6;
        uint64_t v24 = v25 + 2;
        if (v8 == v17) {
          goto LABEL_49;
        }
        do
        {
          __int16 v35 = *((_WORD *)v8 - 1);
          v8 -= 2;
          *((_WORD *)v25 - 1) = v35;
          v25 -= 2;
        }
        while (v8 != v17);
        goto LABEL_48;
      }
      goto LABEL_52;
    }
LABEL_26:
    *(_WORD *)int v8 = v6;
    uint64_t v24 = v8 + 2;
    goto LABEL_51;
  }
  if ((unint64_t)v8 < v16) {
    goto LABEL_26;
  }
  uint64_t v28 = *(char **)(a1 + 112);
  uint64_t v29 = v8 - v28;
  if (v8 - v28 <= -3) {
    goto LABEL_52;
  }
  uint64_t v30 = v29 >> 1;
  unint64_t v31 = v16 - (void)v28;
  if (v31 <= (v29 >> 1) + 1) {
    unint64_t v32 = v30 + 1;
  }
  else {
    unint64_t v32 = v31;
  }
  if (v31 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v33 = v32;
  }
  if (v33)
  {
    if (v33 < 0) {
      goto LABEL_53;
    }
    size_t v34 = (char *)operator new(2 * v33);
  }
  else
  {
    size_t v34 = 0;
  }
  uint64_t v25 = &v34[2 * v30];
  std::string::size_type v26 = &v34[2 * v33];
  *(_WORD *)uint64_t v25 = v6;
  uint64_t v24 = v25 + 2;
  if (v8 == v28) {
    goto LABEL_49;
  }
  do
  {
    __int16 v36 = *((_WORD *)v8 - 1);
    v8 -= 2;
    *((_WORD *)v25 - 1) = v36;
    v25 -= 2;
  }
  while (v8 != v28);
LABEL_48:
  int v8 = *(char **)(a1 + 112);
LABEL_49:
  *(void *)(a1 + 112) = v25;
  *(void *)(a1 + 120) = v24;
  *(void *)(a1 + 128) = v26;
  if (v8) {
    operator delete(v8);
  }
LABEL_51:
  *(void *)(a1 + 120) = v24;
}

void sub_1CC1BF6C4(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  sub_1CC028D80(&__str, a3, a4, a4 - a3);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::string::size_type size = *((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x7F;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    std::__get_collation_name(&v14, (const char *)p_str);
    *(_OWORD *)a1 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
    unint64_t v8 = v14.__r_.__value_.__r.__words[2];
    *(void *)(a1 + 16) = *((void *)&v14.__r_.__value_.__l + 2);
    v8 >>= 56;
    int v9 = (char)v8;
    uint64_t v10 = v8 & 0x7F;
    if (v9 < 0) {
      uint64_t v10 = *(void *)(a1 + 8);
    }
    if (!v10)
    {
      std::string::size_type v11 = *((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x7F;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v11 = __str.__r_.__value_.__l.__size_;
      }
      if (v11 <= 2)
      {
        (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v14);
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        *(_OWORD *)a1 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
        unint64_t v12 = v14.__r_.__value_.__r.__words[2];
        *(void *)(a1 + 16) = *((void *)&v14.__r_.__value_.__l + 2);
        uint64_t v13 = HIBYTE(v12) & 0x7F;
        if ((v12 & 0x8000000000000000) != 0) {
          uint64_t v13 = *(void *)(a1 + 8);
        }
        if (v13 == 12 || v13 == 1)
        {
          std::string::operator=((std::string *)a1, &__str);
        }
        else if (SHIBYTE(v12) < 0)
        {
          **(unsigned char **)a1 = 0;
          *(void *)(a1 + 8) = 0;
        }
        else
        {
          *(unsigned char *)a1 = 0;
          *(unsigned char *)(a1 + 23) = 0;
        }
      }
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1CC1BF858(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), 95);
    char v3 = v2;
    unsigned __int8 v5 = *(unsigned char **)(a1 + 72);
    unint64_t v4 = *(void *)(a1 + 80);
    if ((unint64_t)v5 < v4)
    {
      unsigned char *v5 = v2;
      uint64_t v6 = (uint64_t)(v5 + 1);
LABEL_32:
      *(void *)(a1 + 72) = v6;
      return;
    }
    unint64_t v15 = *(void *)(a1 + 64);
    unint64_t v16 = &v5[-v15];
    uint64_t v17 = (uint64_t)&v5[-v15 + 1];
    if (v17 >= 0)
    {
      unint64_t v18 = v4 - v15;
      if (2 * v18 > v17) {
        uint64_t v17 = 2 * v18;
      }
      if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v19 = v17;
      }
      if (v19) {
        unint64_t v20 = operator new(v19);
      }
      else {
        unint64_t v20 = 0;
      }
      uint64_t v22 = &v20[v19];
      v16[(void)v20] = v3;
      uint64_t v6 = (uint64_t)&v16[(void)v20 + 1];
      if (v5 == (unsigned char *)v15)
      {
        unint64_t v20 = &v16[(void)v20];
      }
      else
      {
        uint64_t v23 = &v5[~v15];
        do
        {
          char v24 = *--v5;
          (v23--)[(void)v20] = v24;
        }
        while (v5 != (unsigned char *)v15);
        unsigned __int8 v5 = *(unsigned char **)(a1 + 64);
      }
      *(void *)(a1 + 64) = v20;
      *(void *)(a1 + 72) = v6;
      *(void *)(a1 + 80) = v22;
      if (v5) {
        operator delete(v5);
      }
      goto LABEL_32;
    }
LABEL_55:
    abort();
  }
  unint64_t v8 = *(unsigned char **)(a1 + 72);
  unint64_t v7 = *(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v8 >= v7)
    {
      unint64_t v9 = *(void *)(a1 + 64);
      uint64_t v10 = &v8[-v9];
      uint64_t v11 = (uint64_t)&v8[-v9 + 1];
      if (v11 < 0) {
        goto LABEL_55;
      }
      unint64_t v12 = v7 - v9;
      if (2 * v12 > v11) {
        uint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v13 = v11;
      }
      if (v13) {
        std::string v14 = operator new(v13);
      }
      else {
        std::string v14 = 0;
      }
      uint64_t v30 = &v10[(void)v14];
      unint64_t v31 = (char *)v14 + v13;
      v10[(void)v14] = 95;
      uint64_t v21 = (uint64_t)&v10[(void)v14 + 1];
      if (v8 != (unsigned char *)v9)
      {
        unint64_t v32 = &v8[~v9];
        do
        {
          char v33 = *--v8;
          (v32--)[(void)v14] = v33;
        }
        while (v8 != (unsigned char *)v9);
LABEL_50:
        unint64_t v8 = *(unsigned char **)(a1 + 64);
        goto LABEL_52;
      }
      goto LABEL_51;
    }
  }
  else if ((unint64_t)v8 >= v7)
  {
    unint64_t v25 = *(void *)(a1 + 64);
    std::string::size_type v26 = &v8[-v25];
    uint64_t v27 = (uint64_t)&v8[-v25 + 1];
    if (v27 < 0) {
      goto LABEL_55;
    }
    unint64_t v28 = v7 - v25;
    if (2 * v28 > v27) {
      uint64_t v27 = 2 * v28;
    }
    if (v28 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v29 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v29 = v27;
    }
    if (v29) {
      std::string v14 = operator new(v29);
    }
    else {
      std::string v14 = 0;
    }
    uint64_t v30 = &v26[(void)v14];
    unint64_t v31 = (char *)v14 + v29;
    v26[(void)v14] = 95;
    uint64_t v21 = (uint64_t)&v26[(void)v14 + 1];
    if (v8 != (unsigned char *)v25)
    {
      size_t v34 = &v8[~v25];
      do
      {
        char v35 = *--v8;
        (v34--)[(void)v14] = v35;
      }
      while (v8 != (unsigned char *)v25);
      goto LABEL_50;
    }
LABEL_51:
    std::string v14 = v30;
LABEL_52:
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = v21;
    *(void *)(a1 + 80) = v31;
    if (v8) {
      operator delete(v8);
    }
    goto LABEL_54;
  }
  *unint64_t v8 = 95;
  uint64_t v21 = (uint64_t)(v8 + 1);
LABEL_54:
  *(void *)(a1 + 72) = v21;
}

char *sub_1CC1BFAC4(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_1CB833614();
    }
    unint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[48 * v2];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  unint64_t v9 = &v7[48 * v6];
  long long v10 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v11 = v8 + 48;
  unint64_t v12 = (char *)*a1;
  size_t v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
  }
  else
  {
    do
    {
      long long v14 = *((_OWORD *)v13 - 3);
      *((void *)v8 - 4) = *((void *)v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *((void *)v13 - 5) = 0;
      *((void *)v13 - 4) = 0;
      *((void *)v13 - 6) = 0;
      long long v15 = *(_OWORD *)(v13 - 24);
      *((void *)v8 - 1) = *((void *)v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      *((void *)v13 - 3) = 0;
      v13 -= 48;
    }
    while (v13 != v12);
    size_t v13 = (char *)*a1;
    uint64_t v16 = (uint64_t)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while ((char *)v16 != v13)
      uint64_t v16 = sub_1CD3C4FA4(v16 - 48);
  }
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

void *sub_1CC1BFC34(void *a1)
{
  *a1 = &unk_1F2608478;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1CC1BFCA0(void *a1)
{
  *a1 = &unk_1F2608478;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC1BFD2C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void *sub_1CC1BFD5C(void *a1)
{
  *a1 = &unk_1F2608478;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1CC1BFDC8(void *a1)
{
  *a1 = &unk_1F2608478;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC1BFE54(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void sub_1CC1BFE8C()
{
}

void *sub_1CC1BFFD4(void *result, void *a2, int *a3)
{
  if (result != a2)
  {
    int v3 = *(unsigned __int8 *)result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      int v4 = v3 - 48;
      *a3 = v4;
      uint64_t result = (void *)((char *)result + 1);
      if (result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          int v5 = *(unsigned __int8 *)result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38) {
            break;
          }
          if (v4 >= 214748364)
          {
            unint64_t v6 = (void *)sub_1CC1B99D8();
            return sub_1CC1C0070(v6);
          }
          int v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          uint64_t result = (void *)((char *)result + 1);
          if (result == a2) {
            return a2;
          }
        }
      }
    }
  }
  return result;
}

void sub_1CC1C0074(void *a1)
{
  sub_1CC1C02BC(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC1C00AC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 40);
  uint64_t v3 = *(void *)(a2 + 56);
  int v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    unint64_t *v4 = v5;
    unint64_t v6 = *(void *)(result + 24);
    unint64_t v7 = *(void *)(result + 32);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6) {
      BOOL v8 = v5 < v7 && *(void *)(v3 + 16 * v2 + 8) != *(void *)(a2 + 16);
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (v8)
      {
        *(void *)(a2 + 80) = *(void *)(result + 8);
        *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
        int v12 = *(_DWORD *)(result + 44);
        int v13 = *(_DWORD *)(result + 48);
        if (v12 != v13)
        {
          uint64_t v14 = (v12 - 1);
          long long v15 = (const double *)(a2 + 24);
          float64x2_t v16 = vld1q_dup_f64(v15);
          uint64_t v17 = (v13 - 1) - v14;
          unint64_t v18 = (float64x2_t *)(*(void *)(a2 + 32) + 24 * v14 + 16);
          do
          {
            v18[-1] = v16;
            LOBYTE(v18->f64[0]) = 0;
            unint64_t v18 = (float64x2_t *)((char *)v18 + 24);
            --v17;
          }
          while (v17);
        }
        return result;
      }
LABEL_30:
      *(void *)(a2 + 80) = *(void *)(result + 16);
      return result;
    }
    goto LABEL_28;
  }
  unint64_t *v4 = 0;
  if (!*(void *)(result + 32))
  {
    *(_DWORD *)a2 = -994;
    goto LABEL_30;
  }
  if (!*(void *)(result + 24))
  {
LABEL_28:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
  int v19 = *(_DWORD *)(result + 44);
  int v20 = *(_DWORD *)(result + 48);
  if (v19 != v20)
  {
    uint64_t v21 = (v19 - 1);
    uint64_t v22 = (const double *)(a2 + 24);
    float64x2_t v23 = vld1q_dup_f64(v22);
    uint64_t v24 = (v20 - 1) - v21;
    unint64_t v25 = (float64x2_t *)(*(void *)(a2 + 32) + 24 * v21 + 16);
    do
    {
      v25[-1] = v23;
      LOBYTE(v25->f64[0]) = 0;
      unint64_t v25 = (float64x2_t *)((char *)v25 + 24);
      --v24;
    }
    while (v24);
  }
  return result;
}

uint64_t sub_1CC1C0200(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(void *)(a3 + 80) = *(void *)(result + 16);
  }
  else
  {
    *(void *)(a3 + 80) = *(void *)(result + 8);
    int v3 = *(_DWORD *)(result + 44);
    *(void *)(*(void *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(void *)(a3 + 16);
    int v4 = *(_DWORD *)(result + 48);
    if (v3 != v4)
    {
      uint64_t v5 = (v3 - 1);
      unint64_t v6 = (const double *)(a3 + 24);
      float64x2_t v7 = vld1q_dup_f64(v6);
      uint64_t v8 = (v4 - 1) - v5;
      unint64_t v9 = (float64x2_t *)(*(void *)(a3 + 32) + 24 * v5 + 16);
      do
      {
        v9[-1] = v7;
        LOBYTE(v9->f64[0]) = 0;
        unint64_t v9 = (float64x2_t *)((char *)v9 + 24);
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

void sub_1CC1C0284(void *a1)
{
  sub_1CC1C02BC(a1);

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CC1C02BC(void *a1)
{
  *a1 = &unk_1F2608778;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = &unk_1F2608478;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_1CC1C0374()
{
}

uint64_t sub_1CC1C0388(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void sub_1CC1C03A0(void *a1)
{
  sub_1CC1C02BC(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC1C03D8(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_1CC1C03E4(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void sub_1CC1C040C()
{
}

uint64_t sub_1CC1C0420(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

unsigned __int8 *sub_1CC1C0434(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v3 = (unint64_t)a2;
  if (a2 == a3) {
    return (unsigned __int8 *)v3;
  }
  float64x2_t v7 = a2 + 1;
  int v6 = *a2;
  if (a2 + 1 != a3 || v6 != 36)
  {
    if ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0) {
      sub_1CC1BCD80(a1);
    }
    if (v7 == a3 || v6 != 92)
    {
      if (v6 == 46) {
        operator new();
      }
    }
    else
    {
      unsigned int v11 = (char)*v7 - 36;
      if (v11 <= 0x3A && ((1 << v11) & 0x580000000000441) != 0) {
        sub_1CC1BCD80(a1);
      }
    }
  }
  uint64_t v8 = (unsigned __int8 *)sub_1CC1BC1E8(a1, a2, a3);
  if ((unsigned __int8 *)v3 != v8)
  {
LABEL_5:
    while (1)
    {
      unint64_t v9 = v8;
      if (v8 == (unsigned __int8 *)v3) {
        return (unsigned __int8 *)v3;
      }
      if (v8 == a3) {
        return a3;
      }
      unint64_t v3 = (*(_DWORD *)(a1 + 28) + 1);
      int v15 = *v8;
      if (v15 == 42) {
        sub_1CC1BFE8C();
      }
      if (v8 + 1 == a3 || v15 != 92 || v8[1] != 123) {
        return v9;
      }
      int v25 = 0;
      uint64_t v17 = (unsigned __int8 *)sub_1CC1BFFD4(v8 + 2, a3, &v25);
      if (v8 + 2 != v17)
      {
        if (v17 == a3) {
          goto LABEL_58;
        }
        unint64_t v18 = v17 + 1;
        int v19 = *v17;
        if (v19 != 44)
        {
          if (v18 != a3 && v19 == 92 && *v18 == 125) {
LABEL_57:
          }
            sub_1CC1BFE8C();
LABEL_58:
          sub_1CC1B99D8();
          goto LABEL_59;
        }
        int v24 = -1;
        int v20 = (unsigned __int8 *)sub_1CC1BFFD4(v17 + 1, a3, &v24);
        if (v20 == a3 || v20 + 1 == a3 || *v20 != 92 || v20[1] != 125) {
          goto LABEL_58;
        }
        if (v24 == -1 || v24 >= v25) {
          goto LABEL_57;
        }
      }
      sub_1CC1B99D8();
LABEL_47:
      int v21 = sub_1CC1C0908(a1, v12);
      uint64_t v22 = 2;
      if (!v21) {
        uint64_t v22 = 0;
      }
      uint64_t v8 = (unsigned __int8 *)(v3 + v22);
    }
  }
  if (v7 == a3 || *(unsigned char *)v3 != 92) {
    return (unsigned __int8 *)v3;
  }
  int v12 = *v7;
  if (v12 != 40) {
    goto LABEL_47;
  }
  uint64_t v8 = (unsigned __int8 *)(v3 + 2);
  sub_1CC1BC8A4(a1);
  do
  {
    int v13 = v8;
    uint64_t v8 = (unsigned __int8 *)sub_1CC1C0434(a1, v8, a3);
  }
  while (v13 != v8);
  if (v13 == a3)
  {
    uint64_t v14 = a3;
LABEL_55:
    if (v14 != v13)
    {
      sub_1CC1BC928(a1);
      goto LABEL_5;
    }
    goto LABEL_59;
  }
  if (v13 + 1 != a3 && *v13 == 92)
  {
    uint64_t v14 = &v13[2 * (v13[1] == 41)];
    uint64_t v8 = v14;
    goto LABEL_55;
  }
LABEL_59:
  float64x2_t v23 = (void *)sub_1CC1B99D8();
  return (unsigned __int8 *)sub_1CC1C07D0(v23);
}

void *sub_1CC1C07D0(void *a1)
{
  *a1 = &unk_1F2608478;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1CC1C083C(void *a1)
{
  *a1 = &unk_1F2608478;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC1C08C8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

uint64_t sub_1CC1C0908(uint64_t a1, unsigned __int8 a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 <= *(_DWORD *)(a1 + 28)) {
    sub_1CC1BCEEC(a1);
  }
  uint64_t v3 = sub_1CC1B99D8();
  return sub_1CC1C0968(v3);
}

uint64_t sub_1CC1C0968(uint64_t a1, char *a2, char *a3)
{
  int v6 = (char *)sub_1CC1C09C8(a1, a2, a3);
  if (v6 == a2)
  {
    uint64_t v9 = sub_1CC1B99D8();
    return sub_1CC1C09C8(v9, v10, v11);
  }
  else
  {
    do
    {
      float64x2_t v7 = v6;
      int v6 = (char *)sub_1CC1C09C8(a1, v6, a3);
    }
    while (v7 != v6);
    return (uint64_t)v7;
  }
}

uint64_t sub_1CC1C09C8(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3)
  {
LABEL_24:
    unsigned int v11 = (char *)sub_1CC1BC1E8(a1, a2, a3);
    goto LABEL_25;
  }
  int v6 = *a2;
  int v7 = *a2;
  uint64_t v8 = (v6 - 36);
  if (v8 > 0x3A) {
    goto LABEL_13;
  }
  if (((1 << (v6 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v8 == 5)
    {
      if (*(_DWORD *)(a1 + 36)) {
        goto LABEL_4;
      }
LABEL_14:
      sub_1CC1BCD80(a1);
    }
LABEL_13:
    if ((v6 - 123) < 2) {
      goto LABEL_4;
    }
    goto LABEL_14;
  }
LABEL_4:
  uint64_t v9 = (unsigned __int8 *)(a2 + 1);
  if (a2 + 1 == a3 || v7 != 92)
  {
LABEL_22:
    if (v7 == 46) {
      operator new();
    }
    goto LABEL_24;
  }
  int v10 = (char)*v9;
  if ((v10 - 36) <= 0x3A && ((1 << (v10 - 36)) & 0x5800000080004F1) != 0
    || (v10 - 123) < 3)
  {
    sub_1CC1BCD80(a1);
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
  {
    unsigned int v11 = (char *)((uint64_t (*)(uint64_t, char *, char *, void))loc_1CC1BEDF4)(a1, a2 + 1, a3, 0);
  }
  else
  {
    int v12 = sub_1CC1C0908(a1, *v9);
    uint64_t v13 = 2;
    if (!v12) {
      uint64_t v13 = 0;
    }
    unsigned int v11 = &a2[v13];
  }
  if (v11 == a2)
  {
    int v7 = *a2;
    goto LABEL_22;
  }
LABEL_25:
  if (v11 == a2 && v11 != a3)
  {
    int v14 = *a2;
    if (v14 == 36) {
      operator new();
    }
    if (v14 != 40)
    {
      if (v14 == 94) {
        operator new();
      }
      return (uint64_t)a2;
    }
    sub_1CC1BC8A4(a1);
    ++*(_DWORD *)(a1 + 36);
    int v15 = (char *)sub_1CC1B9D84(a1);
    if (v15 == a3 || (float64x2_t v16 = v15, *v15 != 41))
    {
      uint64_t v18 = sub_1CC1B99D8();
      return sub_1CC1C0D38(v18, v19, v20, v21);
    }
    sub_1CC1BC928(a1);
    --*(_DWORD *)(a1 + 36);
    unsigned int v11 = v16 + 1;
  }
  if (v11 == a2) {
    return (uint64_t)a2;
  }

  return sub_1CC1BA998(a1, v11, a3);
}

uint64_t sub_1CC1C0D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a1 + 28);
  *(void *)(a4 + 24) = a3;
  uint64_t v9 = (long long *)(a4 + 24);
  *(void *)(a4 + 32) = a3;
  *(unsigned char *)(a4 + 40) = 0;
  sub_1CC1BBB08(a4, (v8 + 1), (long long *)(a4 + 24));
  *(void *)(a4 + 48) = a2;
  *(void *)(a4 + 56) = a2;
  *(unsigned char *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 72) = *v9;
  *(unsigned char *)(a4 + 88) = *(unsigned char *)(a4 + 40);
  *(void *)(a4 + 104) = a2;
  *(unsigned char *)(a4 + 96) = 1;
  if (!sub_1CC1C11DC(a1, a2, a3, (uint64_t *)a4, 0, 1))
  {
    if (a2 == a3) {
      goto LABEL_12;
    }
    uint64_t v16 = a2 + 1;
    if (v16 != a3)
    {
      do
      {
        sub_1CC1BBB08(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3), v9);
        int v17 = sub_1CC1C11DC(a1, v16, a3, (uint64_t *)a4, 128, 0);
        uint64_t v11 = *(void *)a4;
        uint64_t v10 = *(void *)(a4 + 8);
        if (v17) {
          goto LABEL_3;
        }
        sub_1CC1BBB08(a4, 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 3), v9);
      }
      while (++v16 != a3);
    }
    sub_1CC1BBB08(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3), v9);
    if (!sub_1CC1C11DC(a1, a3, a3, (uint64_t *)a4, 128, 0))
    {
LABEL_12:
      uint64_t result = 0;
      *(void *)(a4 + 8) = *(void *)a4;
      return result;
    }
  }
  uint64_t v11 = *(void *)a4;
  uint64_t v10 = *(void *)(a4 + 8);
LABEL_3:
  if (v10 == v11) {
    int v12 = (uint64_t *)v9;
  }
  else {
    int v12 = (uint64_t *)v11;
  }
  uint64_t v13 = *v12;
  *(void *)(a4 + 56) = *v12;
  *(unsigned char *)(a4 + 64) = *(void *)(a4 + 48) != v13;
  uint64_t v14 = v12[1];
  *(void *)(a4 + 72) = v14;
  *(unsigned char *)(a4 + 88) = v14 != *(void *)(a4 + 80);
  return 1;
}

void sub_1CC1C0EF0(char **a1, uint64_t a2, char *a3, uint64_t *a4)
{
  uint64_t v8 = a4[6];
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - *a1) >> 3);
  unint64_t v13 = v9 - v12;
  if (v9 <= v12)
  {
    if (v9 < v12)
    {
      uint64_t v11 = &v10[8 * ((a4[1] - *a4) >> 3)];
      a1[1] = v11;
    }
  }
  else
  {
    uint64_t v14 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v14 - v11) >> 3) >= v13)
    {
      uint64_t v20 = &v11[24 * v13];
      uint64_t v25 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((v11 - *a1) >> 3);
      do
      {
        *(void *)uint64_t v11 = 0;
        *((void *)v11 + 1) = 0;
        v11[16] = 0;
        v11 += 24;
        v25 -= 24;
      }
      while (v25);
      a1[1] = v20;
    }
    else
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v10) >> 3);
      unint64_t v16 = 0x5555555555555556 * ((v14 - v10) >> 3);
      if (v16 <= v9) {
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
      }
      if (v15 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v16;
      }
      if (v17 > 0xAAAAAAAAAAAAAAALL) {
        sub_1CB833614();
      }
      uint64_t v18 = (char *)operator new(24 * v17);
      uint64_t v19 = &v18[24 * v12];
      uint64_t v20 = &v18[24 * v9];
      uint64_t v21 = v19;
      uint64_t v22 = 24 * v9 - 24 * v12;
      do
      {
        *(void *)uint64_t v21 = 0;
        *((void *)v21 + 1) = 0;
        v21[16] = 0;
        v21 += 24;
        v22 -= 24;
      }
      while (v22);
      if (v11 == v10)
      {
        float64x2_t v23 = &v18[24 * v12];
      }
      else
      {
        do
        {
          float64x2_t v23 = v19 - 24;
          long long v24 = *(_OWORD *)(v11 - 24);
          *((void *)v19 - 1) = *((void *)v11 - 1);
          *(_OWORD *)(v19 - 24) = v24;
          v11 -= 24;
          v19 -= 24;
        }
        while (v11 != v10);
      }
      *a1 = v23;
      a1[1] = v20;
      a1[2] = &v18[24 * v17];
      if (v10)
      {
        operator delete(v10);
        uint64_t v20 = a1[1];
      }
    }
    uint64_t v10 = *a1;
    uint64_t v11 = v20;
  }
  if (v11 != v10)
  {
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    uint64_t v29 = *a4;
    uint64_t v28 = a4[1];
    do
    {
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v28 - v29) >> 3);
      unint64_t v31 = (void *)(v29 + v26);
      if (v30 <= v27) {
        unint64_t v32 = a4 + 3;
      }
      else {
        unint64_t v32 = v31;
      }
      *(void *)&v10[v26] = a2 + *v32 - v8;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v27) {
        char v33 = a4 + 3;
      }
      else {
        char v33 = (uint64_t *)(*a4 + v26);
      }
      *(void *)&(*a1)[v26 + 8] = a2 + v33[1] - v8;
      uint64_t v29 = *a4;
      uint64_t v28 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v28 - *a4) >> 3) <= v27) {
        size_t v34 = a4 + 3;
      }
      else {
        size_t v34 = (uint64_t *)(*a4 + v26);
      }
      uint64_t v10 = *a1;
      char v35 = a1[1];
      (*a1)[v26 + 16] = *((unsigned char *)v34 + 16);
      ++v27;
      v26 += 24;
    }
    while (v27 < 0xAAAAAAAAAAAAAAABLL * ((v35 - v10) >> 3));
  }
  a1[3] = a3;
  a1[4] = a3;
  *((unsigned char *)a1 + 40) = 0;
  __int16 v36 = (char *)(a2 + a4[6] - v8);
  a1[6] = v36;
  a1[7] = (char *)(a2 + a4[7] - v8);
  *((unsigned char *)a1 + 64) = *((unsigned char *)a4 + 64);
  a1[9] = (char *)(a2 + a4[9] - v8);
  a1[10] = (char *)(a2 + a4[10] - v8);
  *((unsigned char *)a1 + 88) = *((unsigned char *)a4 + 88);
  a1[13] = v36;
  *((unsigned char *)a1 + 96) = *((unsigned char *)a4 + 96);
}

uint64_t sub_1CC1C11DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    JUMPOUT(0x1CC1BB6BCLL);
  }
  if (!*(_DWORD *)(a1 + 28))
  {
    long long v213 = 0u;
    long long v214 = 0u;
    *(_OWORD *)v212 = 0u;
    uint64_t v18 = *(void *)(a1 + 40);
    if (v18)
    {
      *(_DWORD *)v215 = 0;
      memset(&v215[8], 0, 48);
      *(_OWORD *)std::string __p = 0uLL;
      memset(v217, 0, 21);
      sub_1CC1C2558((uint64_t)v212, (uint64_t)v215);
      if (__p[0]) {
        operator delete(__p[0]);
      }
      v194 = a4;
      uint64_t v197 = a3 - a2;
      if (*(void *)&v215[32]) {
        operator delete(*(void **)&v215[32]);
      }
      uint64_t v19 = *((void *)&v214 + 1);
      uint64_t v20 = v212[1];
      unint64_t v21 = *((void *)&v214 + 1) + v214 - 1;
      unint64_t v22 = v21 / 0x2A;
      uint64_t v23 = *((void *)v212[1] + v21 / 0x2A);
      unint64_t v24 = v21 % 0x2A;
      uint64_t v25 = v23 + 96 * v24;
      *(_DWORD *)uint64_t v25 = 0;
      *(void *)(v25 + 8) = a2;
      *(void *)(v20[v22] + 96 * v24 + 16) = a2;
      *(void *)(v20[v22] + 96 * v24 + 24) = a3;
      uint64_t v26 = v20[v22] + 96 * v24;
      uint64_t v29 = *(void *)(v26 + 56);
      uint64_t v27 = v26 + 56;
      uint64_t v28 = v29;
      unint64_t v30 = *(unsigned int *)(a1 + 32);
      unint64_t v31 = (*(void *)(v27 + 8) - v29) >> 4;
      if (v30 <= v31)
      {
        uint64_t v33 = a3 - a2;
        if (v30 < v31) {
          *(void *)(v27 + 8) = v28 + 16 * v30;
        }
      }
      else
      {
        sub_1CC1BC008((char **)v27, v30 - v31);
        uint64_t v19 = *((void *)&v214 + 1);
        uint64_t v20 = v212[1];
        unint64_t v32 = *((void *)&v214 + 1) + v214 - 1;
        unint64_t v22 = v32 / 0x2A;
        unint64_t v24 = v32 % 0x2A;
        uint64_t v33 = a3 - a2;
      }
      char v209 = 0;
      unsigned int v109 = 0;
      uint64_t v110 = 3 * v24;
      *(void *)(v20[v22] + 32 * v110 + 80) = v18;
      uint64_t v111 = v20[v22] + 32 * v110;
      uint64_t v204 = 0;
      char v211 = a5;
      *(_DWORD *)(v111 + 88) = a5;
      *(unsigned char *)(v111 + 92) = a6;
      while (2)
      {
        if ((++v109 & 0xFFF) == 0 && (int)(v109 >> 12) >= (int)v33)
        {
LABEL_255:
          sub_1CC1B99D8();
LABEL_256:
          sub_1CC1B99D8();
LABEL_257:
          abort();
        }
        unint64_t v113 = v19 + v214 - 1;
        uint64_t v114 = *((void *)v212[1] + v113 / 0x2A);
        unint64_t v115 = v113 % 0x2A;
        uint64_t v116 = v114 + 96 * (v113 % 0x2A);
        unsigned int v118 = (void *)(v116 + 80);
        uint64_t v117 = *(void *)(v116 + 80);
        if (v117) {
          (*(void (**)(uint64_t, unint64_t))(*(void *)v117 + 16))(v117, v114 + 96 * v115);
        }
        switch(*(_DWORD *)v116)
        {
          case 0xFFFFFC18:
            uint64_t v119 = *(void *)(v114 + 96 * v115 + 16);
            if ((v211 & 0x20) != 0 && v119 == a2)
            {
              unint64_t v120 = *((void *)&v214 + 1) + v214 - 1;
              uint64_t v121 = *((void *)v212[1] + v120 / 0x2A);
              unint64_t v122 = v120 % 0x2A;
LABEL_148:
              BOOL v129 = *(void **)(v121 + 96 * v122 + 56);
              if (v129)
              {
LABEL_149:
                *(void *)(v121 + 96 * v122 + 64) = v129;
                operator delete(v129);
              }
LABEL_150:
              uint64_t v130 = *(void **)(v121 + 96 * v122 + 32);
              if (v130)
              {
                *(void *)(v121 + 96 * v122 + 40) = v130;
                operator delete(v130);
              }
              uint64_t v131 = 42 * ((uint64_t)(v213 - (unint64_t)v212[1]) >> 3) - 1;
              long long v132 = v214;
              --*((void *)&v214 + 1);
              if ((void *)v213 == v212[1]) {
                uint64_t v131 = 0;
              }
              if ((unint64_t)(v131 - (*((void *)&v132 + 1) + v132) + 1) >= 0x54)
              {
                operator delete(*(void **)(v213 - 8));
                *(void *)&long long v213 = v213 - 8;
              }
            }
            else
            {
              uint64_t v136 = v119 - *(void *)(v114 + 96 * v115 + 8);
              uint64_t v137 = v204;
              if ((v209 & (v204 >= v136)) == 0) {
                uint64_t v137 = v136;
              }
              if (v137 == v33)
              {
                std::string v138 = (void **)v212[1];
                v139 = (unsigned char *)v213;
                if ((void *)v213 == v212[1])
                {
                  v139 = v212[1];
                }
                else
                {
                  v140 = (char *)v212[1] + 8 * ((unint64_t)v214 / 0x2A);
                  v141 = (void *)(*v140 + 96 * ((unint64_t)v214 % 0x2A));
                  unint64_t v142 = *((void *)v212[1] + (*((void *)&v214 + 1) + (void)v214) / 0x2AuLL)
                       + 96 * ((*((void *)&v214 + 1) + (void)v214) % 0x2AuLL);
                  if (v141 != (void *)v142)
                  {
                    do
                    {
                      char v143 = (void *)v141[7];
                      if (v143)
                      {
                        v141[8] = v143;
                        operator delete(v143);
                      }
                      char v144 = (void *)v141[4];
                      if (v144)
                      {
                        v141[5] = v144;
                        operator delete(v144);
                      }
                      v141 += 12;
                      if ((void *)((char *)v141 - *v140) == (void *)4032)
                      {
                        v145 = (void *)v140[1];
                        ++v140;
                        v141 = v145;
                      }
                    }
                    while (v141 != (void *)v142);
                    std::string v138 = (void **)v212[1];
                    v139 = (unsigned char *)v213;
                  }
                  uint64_t v33 = v197;
                }
                *((void *)&v214 + 1) = 0;
                unint64_t v153 = v139 - (unsigned char *)v138;
                if (v153 >= 0x11)
                {
                  do
                  {
                    operator delete(*v138);
                    std::string v138 = (void **)((char *)v212[1] + 8);
                    v212[1] = v138;
                    unint64_t v153 = v213 - (void)v138;
                  }
                  while ((void)v213 - (void)v138 > 0x10uLL);
                }
                if (v153 >> 3 == 1)
                {
                  uint64_t v154 = 21;
LABEL_224:
                  *(void *)&long long v214 = v154;
                }
                else if (v153 >> 3 == 2)
                {
                  uint64_t v154 = 42;
                  goto LABEL_224;
                }
                char v209 = 1;
                uint64_t v204 = v33;
                goto LABEL_160;
              }
              uint64_t v204 = v137;
              unint64_t v146 = *((void *)&v214 + 1) + v214 - 1;
              uint64_t v147 = *((void *)v212[1] + v146 / 0x2A);
              unint64_t v148 = v146 % 0x2A;
              v149 = *(void **)(v147 + 96 * (v146 % 0x2A) + 56);
              if (v149)
              {
                *(void *)(v147 + 96 * v148 + 64) = v149;
                operator delete(v149);
              }
              v150 = *(void **)(v147 + 96 * v148 + 32);
              if (v150)
              {
                *(void *)(v147 + 96 * v148 + 40) = v150;
                operator delete(v150);
              }
              uint64_t v151 = 42 * ((uint64_t)(v213 - (unint64_t)v212[1]) >> 3) - 1;
              long long v152 = v214;
              --*((void *)&v214 + 1);
              if ((void *)v213 == v212[1]) {
                uint64_t v151 = 0;
              }
              if ((unint64_t)(v151 - (*((void *)&v152 + 1) + v152) + 1) >= 0x54)
              {
                operator delete(*(void **)(v213 - 8));
                *(void *)&long long v213 = v213 - 8;
              }
              char v209 = 1;
            }
LABEL_160:
            uint64_t v19 = *((void *)&v214 + 1);
            if (*((void *)&v214 + 1)) {
              continue;
            }
            if ((v209 & 1) == 0) {
              goto LABEL_240;
            }
            uint64_t v186 = *v194;
            *(void *)uint64_t v186 = a2;
            *(void *)(v186 + 8) = a2 + v204;
            char v34 = 1;
            *(unsigned char *)(v186 + 16) = 1;
            break;
          case 0xFFFFFC19:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_160;
          case 0xFFFFFC1D:
            unint64_t v123 = v214;
            int v124 = (char *)v212[1];
            BOOL v125 = (char *)v213;
            if ((void)v214) {
              goto LABEL_231;
            }
            unint64_t v126 = (uint64_t)(v213 - (unint64_t)v212[1]) >> 3;
            uint64_t v127 = 42 * v126 - 1;
            if ((void *)v213 == v212[1]) {
              uint64_t v127 = 0;
            }
            if ((unint64_t)(v127 - *((void *)&v214 + 1)) < 0x2A)
            {
              if (v126 >= (uint64_t)(*((void *)&v213 + 1) - (unint64_t)v212[0]) >> 3)
              {
                if (*((void **)&v213 + 1) == v212[0]) {
                  unint64_t v155 = 1;
                }
                else {
                  unint64_t v155 = (uint64_t)(*((void *)&v213 + 1) - (unint64_t)v212[0]) >> 2;
                }
                *(void *)&v215[32] = (char *)&v213 + 8;
                if (v155 >> 61) {
LABEL_258:
                }
                  sub_1CB833614();
                *(void *)v215 = operator new(8 * v155);
                *(void *)&v215[8] = *(void *)v215;
                *(void *)&v215[16] = *(void *)v215;
                *(void *)&v215[24] = *(void *)v215 + 8 * v155;
                *(void *)&long long v218 = operator new(0xFC0uLL);
                sub_1CB904CD8((uint64_t)v215, &v218);
                v156 = (uint64_t *)v212[1];
                v157 = *(char **)&v215[16];
                for (uint64_t i = a2; v156 != (uint64_t *)v213; *(void *)&v215[16] += 8)
                {
                  if (v157 == *(char **)&v215[24])
                  {
                    v158 = *(char **)&v215[8];
                    v159 = *(void **)v215;
                    if (*(void *)&v215[8] <= *(void *)v215)
                    {
                      if (v157 == *(char **)v215) {
                        unint64_t v166 = 1;
                      }
                      else {
                        unint64_t v166 = (uint64_t)&v157[-*(void *)v215] >> 2;
                      }
                      if (v166 >> 61) {
                        goto LABEL_258;
                      }
                      v167 = (char *)operator new(8 * v166);
                      uint64_t v169 = v157 - v158;
                      BOOL v168 = v157 == v158;
                      v157 = &v167[8 * (v166 >> 2)];
                      if (!v168)
                      {
                        v157 = &v167[8 * (v166 >> 2) + (v169 & 0xFFFFFFFFFFFFFFF8)];
                        uint64_t v170 = 8 * (v169 >> 3);
                        BOOL v171 = &v167[8 * (v166 >> 2)];
                        do
                        {
                          uint64_t v172 = *(void *)v158;
                          v158 += 8;
                          *(void *)BOOL v171 = v172;
                          v171 += 8;
                          v170 -= 8;
                        }
                        while (v170);
                      }
                      *(void *)v215 = v167;
                      *(void *)&v215[8] = &v167[8 * (v166 >> 2)];
                      *(void *)&v215[16] = v157;
                      *(void *)&v215[24] = &v167[8 * v166];
                      if (v159) {
                        operator delete(v159);
                      }
                    }
                    else
                    {
                      uint64_t v160 = (uint64_t)(*(void *)&v215[8] - *(void *)v215) >> 3;
                      if (v160 >= -1) {
                        uint64_t v161 = v160 + 1;
                      }
                      else {
                        uint64_t v161 = v160 + 2;
                      }
                      uint64_t v162 = *(void *)&v215[8] - 8 * (v161 >> 1);
                      size_t v163 = (size_t)&v157[-*(void *)&v215[8]];
                      if (v157 != *(char **)&v215[8])
                      {
                        v164 = (void *)(*(void *)&v215[8] - 8 * (v161 >> 1));
                        memmove(v164, *(const void **)&v215[8], v163);
                        uint64_t v162 = (uint64_t)v164;
                        v157 = v158;
                      }
                      v165 = &v157[-8 * (v161 >> 1)];
                      v157 = (char *)(v162 + v163);
                      *(void *)&v215[8] = v165;
                      *(void *)&v215[16] = v162 + v163;
                    }
                    a2 = i;
                  }
                  uint64_t v173 = *v156++;
                  *(void *)v157 = v173;
                  v157 = (char *)(*(void *)&v215[16] + 8);
                }
                v174 = v212[0];
                *(_OWORD *)v212 = *(_OWORD *)v215;
                *(void *)&long long v213 = v157;
                *((void *)&v213 + 1) = *(void *)&v215[24];
                uint64_t v175 = 21;
                if (&v157[-*(void *)&v215[8]] != (char *)8) {
                  uint64_t v175 = v214 + 42;
                }
                *(void *)&long long v214 = v175;
                if (v174) {
                  operator delete(v174);
                }
                uint64_t v33 = v197;
              }
              else
              {
                if (v212[1] == v212[0])
                {
                  *(void *)v215 = operator new(0xFC0uLL);
                  sub_1CB904CD8((uint64_t)v212, v215);
                  *(void *)v215 = *(void *)(v213 - 8);
                  *(void *)&long long v213 = v213 - 8;
                }
                else
                {
                  *(void *)v215 = operator new(0xFC0uLL);
                }
                sub_1CC1C2A0C(v212, v215);
                uint64_t v176 = 21;
                if ((void)v213 - (unint64_t)v212[1] != 8) {
                  uint64_t v176 = v214 + 42;
                }
                *(void *)&long long v214 = v176;
              }
            }
            else
            {
              *(void *)&long long v214 = 42;
              *(void *)v215 = *(void *)(v213 - 8);
              *(void *)&long long v213 = v213 - 8;
              sub_1CC1C2A0C(v212, v215);
            }
            unint64_t v123 = v214;
            int v124 = (char *)v212[1];
            BOOL v125 = (char *)v213;
LABEL_231:
            v177 = &v124[8 * (v123 / 0x2A)];
            unint64_t v178 = *(void *)v177 + 96 * (v123 % 0x2A);
            if (v125 == v124) {
              uint64_t v179 = 0;
            }
            else {
              uint64_t v179 = v178;
            }
            if (v179 == *(void *)v177) {
              uint64_t v179 = *((void *)v177 - 1) + 4032;
            }
            long long v180 = *(_OWORD *)(v116 + 16);
            *(_OWORD *)(v179 - 96) = *(_OWORD *)v116;
            *(_OWORD *)(v179 - 80) = v180;
            uint64_t v181 = v114 + 96 * v115;
            *(void *)(v179 - 56) = 0;
            *(void *)(v179 - 48) = 0;
            *(void *)(v179 - 64) = 0;
            *(_OWORD *)(v179 - 64) = *(_OWORD *)(v181 + 32);
            *(void *)(v179 - 48) = *(void *)(v181 + 48);
            *(void *)(v181 + 32) = 0;
            *(void *)(v181 + 40) = 0;
            *(void *)(v181 + 48) = 0;
            *(void *)(v179 - 40) = 0;
            *(void *)(v179 - 32) = 0;
            *(void *)(v179 - 24) = 0;
            *(_OWORD *)(v179 - 40) = *(_OWORD *)(v181 + 56);
            *(void *)(v179 - 24) = *(void *)(v181 + 72);
            *(void *)(v181 + 56) = 0;
            *(void *)(v181 + 64) = 0;
            *(void *)(v181 + 72) = 0;
            uint64_t v182 = *v118;
            *(void *)(v179 - 11) = *(void *)(v116 + 85);
            *(void *)(v179 - 16) = v182;
            uint64_t v183 = *((void *)&v214 + 1);
            *(void *)&long long v214 = v214 - 1;
            ++*((void *)&v214 + 1);
            uint64_t v184 = v183 + v214;
            unint64_t v185 = (v183 + (uint64_t)v214) / 0x2AuLL;
            uint64_t v121 = *((void *)v212[1] + v185);
            unint64_t v122 = v184 - 42 * v185;
            BOOL v129 = *(void **)(v121 + 96 * v122 + 56);
            if (!v129) {
              goto LABEL_150;
            }
            goto LABEL_149;
          case 0xFFFFFC1F:
            unint64_t v128 = *((void *)&v214 + 1) + v214 - 1;
            uint64_t v121 = *((void *)v212[1] + v128 / 0x2A);
            unint64_t v122 = v128 % 0x2A;
            goto LABEL_148;
          case 0xFFFFFC20:
            long long v133 = *(_OWORD *)(v116 + 16);
            *(_OWORD *)v215 = *(_OWORD *)v116;
            *(_OWORD *)&v215[16] = v133;
            int v134 = (unsigned char **)(v114 + 96 * v115);
            memset(&v215[32], 0, 24);
            sub_1CBF340A8(&v215[32], v134[4], v134[5], 0xAAAAAAAAAAAAAAABLL * ((v134[5] - v134[4]) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v217[0] = 0;
            sub_1CC0C57E8(__p, v134[7], v134[8], (v134[8] - v134[7]) >> 4);
            uint64_t v135 = *v118;
            *(void *)((char *)&v217[1] + 5) = *(void *)(v116 + 85);
            v217[1] = v135;
            (*(void (**)(void, uint64_t, unsigned char **))(*(void *)*v118 + 24))(*v118, 1, v134);
            (*(void (**)(void, void, unsigned char *))(*(void *)v217[1] + 24))(v217[1], 0, v215);
            sub_1CC1C2558((uint64_t)v212, (uint64_t)v215);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if (*(void *)&v215[32])
            {
              *(void *)&v215[40] = *(void *)&v215[32];
              operator delete(*(void **)&v215[32]);
            }
            goto LABEL_160;
          default:
            goto LABEL_256;
        }
        break;
      }
    }
    else
    {
LABEL_240:
      char v34 = 0;
    }
    v187 = (void **)v212[1];
    v188 = (void **)v213;
    *((void *)&v214 + 1) = 0;
    unint64_t v189 = v213 - (unint64_t)v212[1];
    if ((unint64_t)v213 - (unint64_t)v212[1] >= 0x11)
    {
      do
      {
        operator delete(*v187);
        v188 = (void **)v213;
        v187 = (void **)((char *)v212[1] + 8);
        v212[1] = v187;
        unint64_t v189 = v213 - (void)v187;
      }
      while ((void)v213 - (void)v187 > 0x10uLL);
    }
    unint64_t v190 = v189 >> 3;
    if (v190 == 1)
    {
      uint64_t v191 = 21;
    }
    else
    {
      if (v190 != 2) {
        goto LABEL_248;
      }
      uint64_t v191 = 42;
    }
    *(void *)&long long v214 = v191;
LABEL_248:
    if (v187 != v188)
    {
      do
      {
        v192 = *v187++;
        operator delete(v192);
      }
      while (v187 != v188);
      if ((void *)v213 != v212[1]) {
        *(void *)&long long v213 = v213 + (((unint64_t)v212[1] - v213 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
    }
    if (v212[0]) {
      operator delete(v212[0]);
    }
    return v34 & 1;
  }
  v212[0] = 0;
  v212[1] = 0;
  *(void *)&long long v213 = 0;
  uint64_t v12 = *(void *)(a1 + 40);
  if (!v12)
  {
    char v34 = 0;
    goto LABEL_127;
  }
  *(void *)&long long v218 = a3;
  *((void *)&v218 + 1) = a3;
  char v219 = 0;
  *(_DWORD *)v215 = 0;
  memset(&v215[8], 0, 48);
  *(_OWORD *)std::string __p = 0u;
  memset(v217, 0, 21);
  unint64_t v13 = sub_1CC1BBC90(v212, (uint64_t)v215);
  v212[1] = v13;
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (*(void *)&v215[32]) {
    operator delete(*(void **)&v215[32]);
  }
  uint64_t v14 = *((void *)v13 - 8);
  uint64_t v15 = a3 - a2;
  *((_DWORD *)v13 - 24) = 0;
  *((void *)v13 - 11) = a2;
  *((void *)v13 - 10) = a2;
  *((void *)v13 - 9) = a3;
  unint64_t v16 = *(unsigned int *)(a1 + 28);
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
  if (v16 <= v17)
  {
    if (v16 < v17) {
      *((void *)v13 - 7) = v14 + 24 * v16;
    }
  }
  else
  {
    sub_1CC1BBE5C((void **)v13 - 8, v16 - v17, &v218);
  }
  uint64_t v35 = *((void *)v13 - 5);
  unint64_t v36 = *(unsigned int *)(a1 + 32);
  unint64_t v37 = (*((void *)v13 - 4) - v35) >> 4;
  uint64_t v205 = a2;
  v195 = a4;
  if (v36 <= v37)
  {
    if (v36 < v37) {
      *((void *)v13 - 4) = v35 + 16 * v36;
    }
  }
  else
  {
    sub_1CC1BC008((char **)v13 - 5, v36 - v37);
  }
  uint64_t v202 = 0;
  v203 = 0;
  v198 = 0;
  v200 = 0;
  uint64_t v201 = 0;
  uint64_t v207 = 0;
  char v34 = 0;
  unsigned int v38 = 0;
  uint64_t v39 = 0;
  *((void *)v13 - 2) = v12;
  *((_DWORD *)v13 - 2) = a5;
  *(v13 - 4) = a6;
  unint64_t v40 = &v215[32];
  int v41 = __p;
  int v42 = &v217[1];
  while (2)
  {
    BOOL v43 = (++v38 & 0xFFF) != 0 || (int)(v38 >> 12) < (int)v15;
    if (!v43) {
      goto LABEL_255;
    }
    uint64_t v44 = *((void *)v13 - 2);
    uint64_t v45 = v13 - 96;
    if (v44) {
      (*(void (**)(uint64_t, char *))(*(void *)v44 + 16))(v44, v13 - 96);
    }
    switch(*(_DWORD *)v45)
    {
      case 0xFFFFFC18:
        uint64_t v46 = *((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v46 == v205) {
          goto LABEL_38;
        }
        if ((v34 & (v39 >= v46 - *((void *)v13 - 11))) != 0)
        {
          uint64_t v55 = v207;
          goto LABEL_102;
        }
        uint64_t v196 = v46 - *((void *)v13 - 11);
        unint64_t v57 = (unsigned char *)*((void *)v13 - 8);
        uint64_t v56 = (unsigned char *)*((void *)v13 - 7);
        unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v57) >> 3);
        uint64_t v55 = v207;
        if (0xAAAAAAAAAAAAAAABLL * ((v202 - (uint64_t)v207) >> 3) < v58)
        {
          if (v207)
          {
            operator delete(v207);
            uint64_t v202 = 0;
          }
          if (v58 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_257;
          }
          unint64_t v59 = 0x5555555555555556 * (v202 >> 3);
          if (v59 <= v58) {
            unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v57) >> 3);
          }
          unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * (v202 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v59;
          if (v60 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_257;
          }
          uint64_t v61 = 3 * v60;
          uint64_t v55 = (char *)operator new(24 * v60);
          BOOL v62 = v55;
          if (v57 != v56)
          {
            size_t v63 = 24 * ((v56 - v57 - 24) / 0x18uLL) + 24;
            v64 = v55;
            memcpy(v55, v57, v63);
            uint64_t v55 = v64;
            BOOL v62 = &v64[v63];
          }
          uint64_t v202 = (uint64_t)&v55[8 * v61];
          goto LABEL_74;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v203 - v207) >> 3) >= v58)
        {
          BOOL v62 = v207;
          if (v57 != v56)
          {
            size_t v71 = v207;
            do
            {
              *(_OWORD *)size_t v71 = *(_OWORD *)v57;
              v71[16] = v57[16];
              v62 += 24;
              v57 += 24;
              v71 += 24;
            }
            while (v57 != v56);
          }
LABEL_74:
          uint64_t v70 = v62 - v55;
          v203 = v55;
          goto LABEL_75;
        }
        size_t v65 = &v57[8 * ((v203 - v207) >> 3)];
        size_t v66 = v207;
        if (v203 != v207)
        {
          do
          {
            *(_OWORD *)size_t v66 = *(_OWORD *)v57;
            v66[16] = v57[16];
            v57 += 24;
            v66 += 24;
          }
          while (v57 != v65);
        }
        int v67 = v203;
        if (v65 != v56)
        {
          int v68 = v203;
          do
          {
            long long v69 = *(_OWORD *)v65;
            *((void *)v68 + 2) = *((void *)v65 + 2);
            *(_OWORD *)int v68 = v69;
            v68 += 24;
            v65 += 24;
            v67 += 24;
          }
          while (v65 != v56);
        }
        uint64_t v70 = v67 - v203;
LABEL_75:
        int v73 = (char *)*((void *)v13 - 5);
        int v72 = (char *)*((void *)v13 - 4);
        int64_t v74 = v72 - v73;
        unint64_t v75 = (v72 - v73) >> 4;
        uint64_t v76 = v200;
        if (v75 <= (v201 - (uint64_t)v200) >> 4)
        {
          int v89 = v198;
          unint64_t v90 = ((char *)v198 - (char *)v200) >> 4;
          if (v90 >= v75)
          {
            v88 = v203;
            char v95 = (char *)v200;
            if (v73 != v72)
            {
              uint64_t v96 = v200;
              do
              {
                *uint64_t v96 = *(void *)v73;
                v96[1] = *((void *)v73 + 1);
                v95 += 16;
                v73 += 16;
                v96 += 2;
              }
              while (v73 != v72);
            }
            int64_t v87 = v95 - (char *)v200;
            uint64_t v39 = v196;
          }
          else
          {
            uint64_t v91 = &v73[16 * v90];
            std::string::size_type v92 = v200;
            v88 = v203;
            uint64_t v76 = v198;
            if (v198 != (_OWORD *)v200)
            {
              do
              {
                *std::string::size_type v92 = *(void *)v73;
                v92[1] = *((void *)v73 + 1);
                v73 += 16;
                v92 += 2;
              }
              while (v73 != v91);
            }
            BOOL v93 = (char *)v198;
            if (v91 == v72)
            {
              uint64_t v39 = v196;
            }
            else
            {
              uint64_t v39 = v196;
              do
              {
                long long v94 = *(_OWORD *)v91;
                v91 += 16;
                *v89++ = v94;
                v93 += 16;
              }
              while (v91 != v72);
            }
            int64_t v87 = v93 - (char *)v198;
          }
        }
        else
        {
          v208 = v41;
          if (v200)
          {
            unint64_t v77 = v55;
            uint64_t v78 = v70;
            operator delete(v200);
            uint64_t v70 = v78;
            uint64_t v55 = v77;
            uint64_t v201 = 0;
          }
          if (v74 < 0) {
            goto LABEL_257;
          }
          uint64_t v199 = v70;
          uint64_t v79 = v201 >> 3;
          if (v201 >> 3 <= v75) {
            uint64_t v79 = (v72 - v73) >> 4;
          }
          unint64_t v80 = (unint64_t)v201 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v79;
          if (v80 >> 60) {
            goto LABEL_257;
          }
          std::string::size_type v81 = v40;
          std::string::size_type v82 = v42;
          uint64_t v83 = v55;
          int v84 = operator new(16 * v80);
          BOOL v85 = v84;
          char v86 = v84;
          if (v73 != v72)
          {
            memcpy(v84, v73, v74 & 0xFFFFFFFFFFFFFFF0);
            char v86 = (char *)v85 + (v74 & 0xFFFFFFFFFFFFFFF0);
          }
          v200 = v85;
          uint64_t v201 = (uint64_t)&v85[2 * v80];
          int64_t v87 = v86 - (unsigned char *)v85;
          uint64_t v76 = v85;
          uint64_t v55 = v83;
          int v42 = v82;
          unint64_t v40 = v81;
          int v41 = v208;
          v88 = v203;
          uint64_t v39 = v196;
          uint64_t v70 = v199;
        }
        v203 = &v88[v70];
        v198 = (_OWORD *)((char *)v76 + v87);
LABEL_102:
        char v97 = (char *)v212[1];
        uint64_t v207 = v55;
        if (v39 == v15)
        {
          uint64_t v98 = (char *)v212[0];
          while (v97 != v98)
          {
            unint64_t v99 = (void *)*((void *)v97 - 5);
            if (v99)
            {
              *((void *)v97 - 4) = v99;
              operator delete(v99);
            }
            unint64_t v100 = (void *)*((void *)v97 - 8);
            if (v100)
            {
              *((void *)v97 - 7) = v100;
              operator delete(v100);
            }
            v97 -= 96;
          }
          v212[1] = v98;
          char v34 = 1;
          uint64_t v39 = v15;
        }
        else
        {
          uint64_t v101 = (void *)*((void *)v212[1] - 5);
          if (v101)
          {
            *((void *)v212[1] - 4) = v101;
            operator delete(v101);
          }
          v102 = (void *)*((void *)v97 - 8);
          if (v102)
          {
            *((void *)v97 - 7) = v102;
            operator delete(v102);
          }
          v212[1] = v97 - 96;
          char v34 = 1;
        }
LABEL_116:
        unint64_t v13 = (char *)v212[1];
        if (v212[0] != v212[1]) {
          continue;
        }
        if (v34)
        {
          uint64_t v103 = *v195;
          std::string::size_type v104 = v207;
          *(void *)uint64_t v103 = v205;
          *(void *)(v103 + 8) = v205 + v39;
          *(unsigned char *)(v103 + 16) = 1;
          if (v203 != v207)
          {
            uint64_t v105 = v207 + 16;
            unsigned int v106 = 1;
            do
            {
              uint64_t v107 = v103 + 24 * v106;
              *(_OWORD *)uint64_t v107 = *((_OWORD *)v105 - 1);
              char v108 = *v105;
              v105 += 24;
              *(unsigned char *)(v107 + 16) = v108;
              BOOL v43 = 0xAAAAAAAAAAAAAAABLL * ((v203 - v207) >> 3) > v106++;
            }
            while (v43);
          }
        }
        else
        {
          std::string::size_type v104 = v207;
        }
        if (v200)
        {
          operator delete(v200);
          std::string::size_type v104 = v207;
        }
        if (v104) {
          operator delete(v104);
        }
LABEL_127:
        *(void *)v215 = v212;
        sub_1CC1BC14C((void ***)v215);
        return v34 & 1;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_116;
      case 0xFFFFFC1F:
LABEL_38:
        uint64_t v47 = v212[1];
        int v48 = (void *)*((void *)v212[1] - 5);
        if (v48)
        {
          *((void *)v212[1] - 4) = v48;
          operator delete(v48);
        }
        uint64_t v49 = (void *)*(v47 - 8);
        if (v49)
        {
          *(v47 - 7) = v49;
          operator delete(v49);
        }
        v212[1] = v47 - 12;
        goto LABEL_116;
      case 0xFFFFFC20:
        long long v50 = *((_OWORD *)v13 - 5);
        *(_OWORD *)v215 = *(_OWORD *)v45;
        *(_OWORD *)&v215[16] = v50;
        v40[1] = 0;
        v40[2] = 0;
        *unint64_t v40 = 0;
        sub_1CBF340A8(v40, *((unsigned char **)v13 - 8), *((unsigned char **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
        *int v41 = 0;
        v41[1] = 0;
        v41[2] = 0;
        sub_1CC0C57E8(v41, *((unsigned char **)v13 - 5), *((unsigned char **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
        uint64_t v51 = *((void *)v13 - 2);
        *(void *)((char *)v42 + 5) = *(void *)(v13 - 11);
        *int v42 = v51;
        (*(void (**)(void, uint64_t, char *))(**((void **)v13 - 2) + 24))(*((void *)v13 - 2), 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(*(void *)v217[1] + 24))(v217[1], 0, v215);
        uint64_t v52 = (char *)v212[1];
        if (v212[1] >= (void *)v213)
        {
          v212[1] = sub_1CC1BBC90(v212, (uint64_t)v215);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v53 = *(_OWORD *)&v215[16];
          *(_OWORD *)v212[1] = *(_OWORD *)v215;
          *((_OWORD *)v52 + 1) = v53;
          *((void *)v52 + 4) = 0;
          *((void *)v52 + 5) = 0;
          *((void *)v52 + 6) = 0;
          *((void *)v52 + 7) = 0;
          *((_OWORD *)v52 + 2) = *(_OWORD *)&v215[32];
          *((void *)v52 + 6) = *(void *)&v215[48];
          *unint64_t v40 = 0;
          v40[1] = 0;
          v40[2] = 0;
          *((void *)v52 + 8) = 0;
          *((void *)v52 + 9) = 0;
          *(_OWORD *)(v52 + 56) = *(_OWORD *)__p;
          *((void *)v52 + 9) = v217[0];
          *int v41 = 0;
          v41[1] = 0;
          v41[2] = 0;
          uint64_t v54 = *v42;
          *(void *)(v52 + 85) = *(void *)((char *)v42 + 5);
          *((void *)v52 + 10) = v54;
          v212[1] = v52 + 96;
        }
        if (*(void *)&v215[32])
        {
          *(void *)&v215[40] = *(void *)&v215[32];
          operator delete(*(void **)&v215[32]);
        }
        goto LABEL_116;
      default:
        goto LABEL_256;
    }
  }
}

__n128 sub_1CC1C2558(uint64_t a1, uint64_t a2)
{
  int v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  uint64_t v6 = (v5 - v4) >> 3;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 42 * v6 - 1;
  }
  unint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40) + v8;
  if (v7 == v9)
  {
    if (v8 < 0x2A)
    {
      unint64_t v21 = *(char **)(a1 + 24);
      uint64_t v22 = (uint64_t)&v21[-*(void *)a1];
      if (v5 - v4 < (unint64_t)v22)
      {
        if (v21 != v5)
        {
          unint64_t v75 = (char *)operator new(0xFC0uLL);
          sub_1CB904CD8(a1, &v75);
LABEL_55:
          int v4 = *(char **)(a1 + 8);
          unint64_t v9 = *(void *)(a1 + 32) + *(void *)(a1 + 40);
          goto LABEL_56;
        }
        unint64_t v75 = (char *)operator new(0xFC0uLL);
        sub_1CC1C2A0C((void **)a1, &v75);
        uint64_t v55 = *(void **)(a1 + 8);
        uint64_t v56 = *(char **)(a1 + 16);
        uint64_t v59 = *v55;
        unint64_t v57 = (char *)(v55 + 1);
        uint64_t v58 = v59;
        *(void *)(a1 + 8) = v57;
        if (v56 == *(char **)(a1 + 24))
        {
          unint64_t v60 = *(char **)a1;
          if ((unint64_t)v57 <= *(void *)a1)
          {
            if (v56 == v60) {
              unint64_t v67 = 1;
            }
            else {
              unint64_t v67 = (v56 - v60) >> 2;
            }
            if (v67 >> 61) {
              goto LABEL_75;
            }
            int v68 = (char *)operator new(8 * v67);
            long long v69 = &v68[8 * (v67 >> 2)];
            uint64_t v70 = v56 - v57;
            BOOL v46 = v56 == v57;
            uint64_t v56 = v69;
            if (!v46)
            {
              uint64_t v56 = &v69[v70 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v71 = 8 * (v70 >> 3);
              int v72 = &v68[8 * (v67 >> 2)];
              do
              {
                uint64_t v73 = *(void *)v57;
                v57 += 8;
                *(void *)int v72 = v73;
                v72 += 8;
                v71 -= 8;
              }
              while (v71);
            }
            *(void *)a1 = v68;
            *(void *)(a1 + 8) = v69;
            *(void *)(a1 + 16) = v56;
            *(void *)(a1 + 24) = &v68[8 * v67];
            if (v60)
            {
              operator delete(v60);
              uint64_t v56 = *(char **)(a1 + 16);
            }
          }
          else
          {
            uint64_t v61 = (uint64_t)&v57[-*(void *)a1] >> 3;
            if (v61 >= -1) {
              uint64_t v62 = v61 + 1;
            }
            else {
              uint64_t v62 = v61 + 2;
            }
            uint64_t v63 = -(v62 >> 1);
            uint64_t v64 = v62 >> 1;
            size_t v65 = &v57[-8 * v64];
            size_t v66 = v56 - v57;
            if (v66)
            {
              memmove(&v57[-8 * v64], v57, v66);
              unint64_t v57 = *(char **)(a1 + 8);
            }
            uint64_t v56 = &v65[v66];
            *(void *)(a1 + 8) = &v57[8 * v63];
            *(void *)(a1 + 16) = v56;
          }
        }
        *(void *)uint64_t v56 = v58;
        goto LABEL_54;
      }
      if (v21 == *(char **)a1) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = v22 >> 2;
      }
      uint64_t v78 = a1 + 24;
      if (!(v23 >> 61))
      {
        unint64_t v75 = (char *)operator new(8 * v23);
        __src = &v75[8 * v6];
        *(void *)&long long v77 = __src;
        *((void *)&v77 + 1) = &v75[8 * v23];
        int64_t v74 = operator new(0xFC0uLL);
        sub_1CB904CD8((uint64_t)&v75, &v74);
        uint64_t v24 = *(void *)(a1 + 8);
        uint64_t v25 = *(void *)(a1 + 16);
        uint64_t v26 = (char *)__src;
        while (v25 != v24)
        {
          if (v26 == v75)
          {
            uint64_t v28 = (char *)v77;
            if ((unint64_t)v77 >= *((void *)&v77 + 1))
            {
              if (*((char **)&v77 + 1) == v26) {
                unint64_t v33 = 1;
              }
              else {
                unint64_t v33 = (uint64_t)(*((void *)&v77 + 1) - (void)v26) >> 2;
              }
              if (v33 >> 61) {
                goto LABEL_75;
              }
              char v34 = (char *)operator new(8 * v33);
              uint64_t v27 = &v34[(2 * v33 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v35 = v27;
              uint64_t v36 = v28 - v26;
              if (v28 != v26)
              {
                uint64_t v35 = &v27[v36 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v37 = 8 * (v36 >> 3);
                unsigned int v38 = &v34[(2 * v33 + 6) & 0xFFFFFFFFFFFFFFF8];
                uint64_t v39 = v26;
                do
                {
                  uint64_t v40 = *(void *)v39;
                  v39 += 8;
                  *(void *)unsigned int v38 = v40;
                  v38 += 8;
                  v37 -= 8;
                }
                while (v37);
              }
              unint64_t v75 = v34;
              __src = &v34[(2 * v33 + 6) & 0xFFFFFFFFFFFFFFF8];
              *(void *)&long long v77 = v35;
              *((void *)&v77 + 1) = &v34[8 * v33];
              if (v26) {
                operator delete(v26);
              }
            }
            else
            {
              uint64_t v29 = (uint64_t)(*((void *)&v77 + 1) - v77) >> 3;
              if (v29 >= -1) {
                uint64_t v30 = v29 + 1;
              }
              else {
                uint64_t v30 = v29 + 2;
              }
              uint64_t v31 = v30 >> 1;
              uint64_t v32 = v77 + 8 * (v30 >> 1);
              uint64_t v27 = (char *)(v32 - (v77 - (void)v26));
              if ((char *)v77 != v26)
              {
                memmove((void *)(v32 - (v77 - (void)v26)), v26, v77 - (void)v26);
                uint64_t v26 = v28;
              }
              __src = v27;
              *(void *)&long long v77 = &v26[8 * v31];
            }
          }
          else
          {
            uint64_t v27 = v26;
          }
          uint64_t v41 = *(void *)(v25 - 8);
          v25 -= 8;
          *((void *)v27 - 1) = v41;
          uint64_t v26 = (char *)__src - 8;
          __src = (char *)__src - 8;
          uint64_t v24 = *(void *)(a1 + 8);
        }
        int v42 = *(char **)a1;
        *(void *)a1 = v75;
        *(void *)(a1 + 8) = v26;
        *(_OWORD *)(a1 + 16) = v77;
        if (v42) {
          operator delete(v42);
        }
        goto LABEL_55;
      }
    }
    else
    {
      *(void *)(a1 + 32) = v8 - 42;
      uint64_t v12 = *(void *)v4;
      uint64_t v10 = v4 + 8;
      uint64_t v11 = v12;
      *(void *)(a1 + 8) = v10;
      if (v5 != *(char **)(a1 + 24))
      {
LABEL_53:
        *(void *)uint64_t v5 = v11;
LABEL_54:
        *(void *)(a1 + 16) += 8;
        goto LABEL_55;
      }
      unint64_t v13 = *(char **)a1;
      if ((unint64_t)v10 > *(void *)a1)
      {
        uint64_t v14 = (uint64_t)&v10[-*(void *)a1] >> 3;
        if (v14 >= -1) {
          uint64_t v15 = v14 + 1;
        }
        else {
          uint64_t v15 = v14 + 2;
        }
        uint64_t v16 = -(v15 >> 1);
        uint64_t v17 = v15 >> 1;
        uint64_t v18 = &v10[-8 * v17];
        int64_t v19 = v5 - v10;
        if (v5 != v10)
        {
          memmove(&v10[-8 * v17], v10, v5 - v10);
          uint64_t v5 = *(char **)(a1 + 8);
        }
        uint64_t v20 = &v5[8 * v16];
        uint64_t v5 = &v18[v19];
        *(void *)(a1 + 8) = v20;
        *(void *)(a1 + 16) = &v18[v19];
        goto LABEL_53;
      }
      if (v5 == v13) {
        unint64_t v43 = 1;
      }
      else {
        unint64_t v43 = (v5 - v13) >> 2;
      }
      if (!(v43 >> 61))
      {
        uint64_t v44 = (char *)operator new(8 * v43);
        uint64_t v45 = &v44[8 * (v43 >> 2)];
        uint64_t v47 = v5 - v10;
        BOOL v46 = v5 == v10;
        uint64_t v5 = v45;
        if (!v46)
        {
          uint64_t v5 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v48 = 8 * (v47 >> 3);
          uint64_t v49 = &v44[8 * (v43 >> 2)];
          do
          {
            uint64_t v50 = *(void *)v10;
            v10 += 8;
            *(void *)uint64_t v49 = v50;
            v49 += 8;
            v48 -= 8;
          }
          while (v48);
        }
        *(void *)a1 = v44;
        *(void *)(a1 + 8) = v45;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = &v44[8 * v43];
        if (v13)
        {
          operator delete(v13);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_53;
      }
    }
LABEL_75:
    sub_1CB833614();
  }
LABEL_56:
  unint64_t v51 = *(void *)&v4[8 * (v9 / 0x2A)] + 96 * (v9 % 0x2A);
  long long v52 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v51 = *(_OWORD *)a2;
  *(_OWORD *)(v51 + 16) = v52;
  *(void *)(v51 + 40) = 0;
  *(void *)(v51 + 48) = 0;
  *(void *)(v51 + 32) = 0;
  *(_OWORD *)(v51 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v51 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v51 + 56) = 0;
  *(void *)(v51 + 64) = 0;
  *(void *)(v51 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v51 + 56) = result;
  *(void *)(v51 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v54 = *(void *)(a2 + 80);
  *(void *)(v51 + 85) = *(void *)(a2 + 85);
  *(void *)(v51 + 80) = v54;
  ++*(void *)(a1 + 40);
  return result;
}

void sub_1CC1C2A0C(void **a1, void *a2)
{
  int v4 = a1[1];
  if (v4 == *a1)
  {
    uint64_t v7 = a1[2];
    uint64_t v6 = a1[3];
    if (v7 >= v6)
    {
      uint64_t v13 = v6 - (unsigned char *)v4;
      BOOL v12 = v13 == 0;
      uint64_t v14 = v13 >> 2;
      if (v12) {
        unint64_t v15 = 1;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15 >> 61) {
        sub_1CB833614();
      }
      uint64_t v16 = (char *)operator new(8 * v15);
      uint64_t v5 = &v16[(2 * v15 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v17 = v5;
      uint64_t v18 = v7 - (unsigned char *)v4;
      if (v7 != (unsigned char *)v4)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = &v16[(2 * v15 + 6) & 0xFFFFFFFFFFFFFFF8];
        unint64_t v21 = v4;
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      *a1 = v16;
      a1[1] = v5;
      a1[2] = v17;
      a1[3] = &v16[8 * v15];
      if (v4)
      {
        operator delete(v4);
        uint64_t v5 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v8 = (v6 - v7) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v11 = &v7[8 * (v9 >> 1)];
      uint64_t v5 = &v11[-(v7 - (unsigned char *)v4)];
      if (v7 != (unsigned char *)v4)
      {
        memmove(&v11[-(v7 - (unsigned char *)v4)], v4, v7 - (unsigned char *)v4);
        int v4 = a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[v10];
    }
  }
  else
  {
    uint64_t v5 = (char *)a1[1];
  }
  *((void *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void sub_1CC1C2B3C(uint64_t a1, const char *a2)
{
  int v4 = (const std::locale *)MEMORY[0x1D25D9B30]();
  *(void *)(a1 + 8) = std::locale::use_facet(v4, MEMORY[0x1E4FBA258]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E4FBA280]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  strlen(a2);
  sub_1CC1C2BCC();
}

void sub_1CC1C2BCC()
{
}

unsigned char *sub_1CC1C2FC0(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v6 = (uint64_t)a2;
  do
  {
    uint64_t v7 = (unsigned char *)v6;
    uint64_t v6 = ((uint64_t (*)(uint64_t, uint64_t, unsigned char *))loc_1CC1C332C)(a1, v6, a3);
  }
  while ((unsigned char *)v6 != v7);
  if (v7 == a2) {
    operator new();
  }
  if (v7 != a3)
  {
    if (*v7 == 124)
    {
      uint64_t v8 = v7 + 1;
      uint64_t v9 = (uint64_t)(v7 + 1);
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = ((uint64_t (*)(uint64_t, uint64_t, unsigned char *))loc_1CC1C332C)(a1, v9, a3);
      }
      while (v9 != v10);
      if ((unsigned char *)v10 == v8) {
        operator new();
      }
      sub_1CC1BA0C8();
    }
    return v7;
  }
  return a3;
}

uint64_t sub_1CC1C3120(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return (uint64_t)a2;
  }
  int v4 = a3;
  if (*a2 == 94) {
    operator new();
  }
  if (a2 == a3) {
    return (uint64_t)v4;
  }
  do
  {
    uint64_t v6 = v3;
    uint64_t v3 = (unsigned __int8 *)sub_1CC1C4BAC(a1, v3, v4);
  }
  while (v3 != v6);
  if (v6 == v4) {
    return (uint64_t)v4;
  }
  if (v6 + 1 == v4 && *v6 == 36) {
    operator new();
  }
  uint64_t v8 = sub_1CC1B99D8();
  return sub_1CC1C3288(v8);
}

char *sub_1CC1C3288(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = sub_1CC1C4F3C(a1, a2, a3);
  if (v6 == a2) {
    goto LABEL_8;
  }
  if (v6 != v3)
  {
    if (*v6 == 124)
    {
      if (sub_1CC1C4F3C(a1, v6 + 1, v3) != v6 + 1) {
        sub_1CC1BA0C8();
      }
LABEL_8:
      sub_1CC1B99D8();
      JUMPOUT(0x1CC1C332CLL);
    }
    return v6;
  }
  return v3;
}

char *sub_1CC1C3AE8(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v4 = *a2;
  if (v4 <= 62)
  {
    if (v4 == 42 || v4 == 43) {
LABEL_18:
    }
      sub_1CC1BFE8C();
    return a2;
  }
  if (v4 == 63) {
    goto LABEL_18;
  }
  if (v4 != 123) {
    return a2;
  }
  uint64_t v5 = a2 + 1;
  uint64_t v6 = sub_1CC1BFFD4(a2 + 1, a3, &v15);
  if (v6 == (void *)v5)
  {
LABEL_23:
    sub_1CC1B99D8();
    goto LABEL_24;
  }
  if (v6 != (void *)a3)
  {
    int v7 = *(char *)v6;
    if (v7 == 44)
    {
      uint64_t v8 = (char *)v6 + 1;
      if ((char *)v6 + 1 != a3)
      {
        if (*v8 == 125) {
          goto LABEL_18;
        }
        int v14 = -1;
        uint64_t v10 = (char *)sub_1CC1BFFD4((void *)((char *)v6 + 1), a3, &v14);
        if (v10 == v8 || v10 == a3 || *v10 != 125) {
          goto LABEL_24;
        }
        if (v14 >= v15) {
          goto LABEL_18;
        }
      }
    }
    else if (v7 == 125)
    {
      goto LABEL_18;
    }
    goto LABEL_23;
  }
LABEL_24:
  uint64_t v11 = sub_1CC1B99D8();
  return sub_1CC1C3DE4(v11, v12, v13);
}

unsigned char *sub_1CC1C3DE4(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 != a3) {
      operator new();
    }
    sub_1CC1B99D8();
    sub_1CC1B99D8();
    sub_1CC1B99D8();
    JUMPOUT(0x1CC1C4498);
  }
  return a2;
}

uint64_t sub_1CC1C477C(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }
  if (&a2[i] == a3)
  {
LABEL_15:
    sub_1CC1B99D8();
  }
  else
  {
    sub_1CC1BF6C4((uint64_t)&v15, a1, a2, &a2[i]);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(_OWORD *)a4 = v15;
    unint64_t v7 = v16;
    *(void *)(a4 + 16) = v16;
    v7 >>= 56;
    int v8 = (char)v7;
    uint64_t v9 = v7 & 0x7F;
    if (v8 < 0) {
      uint64_t v9 = *(void *)(a4 + 8);
    }
    if ((unint64_t)(v9 - 1) < 2) {
      return (uint64_t)&a2[i + 2];
    }
  }
  int v11 = sub_1CC1B99D8();
  return sub_1CC1C486C(v11, v12, v13, v14);
}

unsigned char *sub_1CC1C486C(int a1, unsigned char *a2, unsigned char *a3, std::string *this, uint64_t a5)
{
  if (a2 == a3)
  {
    sub_1CC1B99D8();
    JUMPOUT(0x1CC1C49A4);
  }
  int v6 = (char)*a2;
  if (v6 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119) {
          goto LABEL_25;
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        sub_1CC1BDA78(a5, 95);
        return a2 + 1;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v6 == 98)
      {
        uint64_t v10 = this;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return a2 + 1;
      }
      if (v6 != 100) {
        goto LABEL_25;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return a2 + 1;
  }
  if (v6 <= 82)
  {
    if (*a2)
    {
      if (v6 == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return a2 + 1;
      }
      goto LABEL_25;
    }
    std::string::value_type v9 = 0;
    uint64_t v10 = this;
    goto LABEL_19;
  }
  if (v6 == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (v6 != 87)
  {
LABEL_25:
    JUMPOUT(0x1CC1C4498);
  }
  *(_DWORD *)(a5 + 164) |= 0x500u;
  sub_1CC1BF858(a5);
  return a2 + 1;
}

uint64_t sub_1CC1C4BAC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return (uint64_t)v3;
  }
  int v7 = a2 + 1;
  int v6 = *a2;
  if (a2 + 1 != a3 || v6 != 36)
  {
    if ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0) {
      sub_1CC1BCD80(a1);
    }
    if (v7 == a3 || v6 != 92)
    {
      if (v6 == 46) {
        operator new();
      }
    }
    else
    {
      unsigned int v14 = (char)*v7 - 36;
      if (v14 <= 0x3A && ((1 << v14) & 0x580000000000441) != 0) {
        sub_1CC1BCD80(a1);
      }
    }
  }
  int v8 = sub_1CC1C3DE4(a1, a2, a3);
  std::string::value_type v9 = v8;
  if (v8 == v3 && v8 != a3)
  {
    if (v7 == a3 || *v3 != 92) {
      return (uint64_t)v3;
    }
    int v10 = *v7;
    if (v10 == 40)
    {
      uint64_t v11 = (uint64_t)(v3 + 2);
      sub_1CC1BC8A4(a1);
      do
      {
        int v12 = (unsigned __int8 *)v11;
        uint64_t v11 = sub_1CC1C4BAC(a1, v11, a3);
      }
      while ((unsigned __int8 *)v11 != v12);
      if (v12 == a3 || v12 + 1 == a3 || *v12 != 92 || v12[1] != 41) {
        goto LABEL_56;
      }
      std::string::value_type v9 = v12 + 2;
      sub_1CC1BC928(a1);
    }
    else
    {
      int v15 = sub_1CC1C0908(a1, v10);
      uint64_t v16 = 2;
      if (!v15) {
        uint64_t v16 = 0;
      }
      std::string::value_type v9 = &v3[v16];
    }
  }
  if (v9 == v3) {
    return (uint64_t)v3;
  }
  if (v9 == a3) {
    return (uint64_t)a3;
  }
  int v17 = *v9;
  if (v17 == 42) {
    sub_1CC1BFE8C();
  }
  if (v9 + 1 == a3 || v17 != 92 || v9[1] != 123) {
    return (uint64_t)v9;
  }
  int v25 = 0;
  uint64_t v18 = (unsigned __int8 *)sub_1CC1BFFD4(v9 + 2, a3, &v25);
  if (v18 == v9 + 2)
  {
LABEL_48:
    sub_1CC1B99D8();
    return (uint64_t)v9;
  }
  if (v18 != a3)
  {
    uint64_t v19 = v18 + 1;
    int v20 = *v18;
    if (v20 == 44)
    {
      int v24 = -1;
      unint64_t v21 = (unsigned __int8 *)sub_1CC1BFFD4(v18 + 1, a3, &v24);
      if (v21 != a3 && v21 + 1 != a3 && *v21 == 92 && v21[1] == 125)
      {
        if (v24 != -1 && v24 < v25) {
          goto LABEL_48;
        }
LABEL_53:
        sub_1CC1BFE8C();
      }
    }
    else if (v19 != a3 && v20 == 92 && *v19 == 125)
    {
      goto LABEL_53;
    }
  }
  sub_1CC1B99D8();
LABEL_56:
  uint64_t v23 = sub_1CC1B99D8();
  return sub_1CC1C4F3C(v23);
}

char *sub_1CC1C4F3C(uint64_t a1, char *a2, char *a3)
{
  int v6 = sub_1CC1C4F9C(a1, a2, a3);
  if (v6 == a2)
  {
    uint64_t v9 = sub_1CC1B99D8();
    return sub_1CC1C4F9C(v9, v10, v11);
  }
  else
  {
    do
    {
      int v7 = v6;
      int v6 = sub_1CC1C4F9C(a1, v6, a3);
    }
    while (v6 != v7);
    return v7;
  }
}

char *sub_1CC1C4F9C(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3)
  {
LABEL_24:
    uint64_t v11 = sub_1CC1C3DE4(a1, a2, a3);
    goto LABEL_25;
  }
  int v6 = *a2;
  int v7 = *a2;
  uint64_t v8 = (v6 - 36);
  if (v8 > 0x3A) {
    goto LABEL_13;
  }
  if (((1 << (v6 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v8 == 5)
    {
      if (*(_DWORD *)(a1 + 36)) {
        goto LABEL_4;
      }
LABEL_14:
      sub_1CC1BCD80(a1);
    }
LABEL_13:
    if ((v6 - 123) < 2) {
      goto LABEL_4;
    }
    goto LABEL_14;
  }
LABEL_4:
  uint64_t v9 = (unsigned __int8 *)(a2 + 1);
  if (a2 + 1 == a3 || v7 != 92)
  {
LABEL_22:
    if (v7 == 46) {
      operator new();
    }
    goto LABEL_24;
  }
  int v10 = (char)*v9;
  if ((v10 - 36) <= 0x3A && ((1 << (v10 - 36)) & 0x5800000080004F1) != 0
    || (v10 - 123) < 3)
  {
    sub_1CC1BCD80(a1);
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
  {
    uint64_t v11 = (char *)((uint64_t (*)(uint64_t, char *, char *, void))loc_1CC1C49A4)(a1, a2 + 1, a3, 0);
  }
  else
  {
    int v12 = sub_1CC1C0908(a1, *v9);
    uint64_t v13 = 2;
    if (!v12) {
      uint64_t v13 = 0;
    }
    uint64_t v11 = &a2[v13];
  }
  if (v11 == a2)
  {
    int v7 = *a2;
    goto LABEL_22;
  }
LABEL_25:
  if (v11 == a2 && v11 != a3)
  {
    int v14 = *a2;
    if (v14 == 36) {
      operator new();
    }
    if (v14 != 40)
    {
      if (v14 == 94) {
        operator new();
      }
      return a2;
    }
    sub_1CC1BC8A4(a1);
    ++*(_DWORD *)(a1 + 36);
    int v15 = (char *)sub_1CC1C3288(a1);
    if (v15 == a3 || (uint64_t v16 = v15, *v15 != 41))
    {
      int v18 = sub_1CC1B99D8();
      return (char *)llvm::BitcodeAnalyzer::decodeMetadataStringsBlob(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    sub_1CC1BC928(a1);
    --*(_DWORD *)(a1 + 36);
    uint64_t v11 = v16 + 1;
  }
  if (v11 == a2) {
    return a2;
  }

  return sub_1CC1C3AE8(a1, v11, a3);
}

unsigned char *llvm::BitcodeAnalyzer::decodeMetadataStringsBlob@<X0>(llvm::raw_ostream *this@<X7>, const void *a2@<X1>, size_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a7)
  {
    uint64_t v36 = 92;
    uint64_t v37 = std::generic_category();
    uint64_t v32 = "Cannot decode empty blob.";
LABEL_45:
    uint64_t v42 = (uint64_t)v32;
    goto LABEL_48;
  }
  if (a5 != 2)
  {
    uint64_t v36 = 92;
    uint64_t v37 = std::generic_category();
    uint64_t v32 = "Decoding metadata strings blob needs two record entries.";
    goto LABEL_45;
  }
  unint64_t v10 = a7;
  uint64_t v14 = *a4;
  unint64_t v15 = *a4;
  unint64_t v16 = *((unsigned int *)a4 + 2);
  int v17 = (void *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v17 > 0xEuLL)
  {
    qmemcpy(v17, " num-strings = ", 15);
    *((void *)this + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(this, " num-strings = ", 0xFuLL);
  }
  sub_1CD098D14(this, v15, 0, 0, 0);
  uint64_t v18 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v18) > 2)
  {
    *(unsigned char *)(v18 + 2) = 10;
    *(_WORD *)uint64_t v18 = 31520;
    *((void *)this + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(this, " {\n", 3uLL);
  }
  if (v10 >= v16) {
    int v19 = (const std::error_category *)v16;
  }
  else {
    int v19 = (const std::error_category *)v10;
  }
  uint64_t v36 = a6;
  uint64_t v37 = v19;
  int v20 = (char *)v19 + a6;
  unint64_t v21 = v10 - (void)v19;
  unint64_t v38 = 0;
  uint64_t v39 = 0;
  int v40 = 0;
  do
  {
    if (v40) {
      BOOL v22 = 1;
    }
    else {
      BOOL v22 = (unint64_t)v37 > v38;
    }
    if (!v22)
    {
      unint64_t v33 = std::generic_category();
      uint64_t v42 = 92;
      unint64_t v43 = v33;
      char v34 = "bad length";
      goto LABEL_47;
    }
    __n128 result = (unsigned char *)sub_1CC1CA844((uint64_t)&v36, 6u, (uint64_t)&v42);
    if (v43)
    {
LABEL_40:
      uint64_t v30 = v42;
      *a8 = v42;
      if (v30) {
        return result;
      }
      unint64_t v26 = 0;
      unint64_t v10 = 0;
    }
    else
    {
      if ((v42 & 0x20) != 0)
      {
        unsigned int v29 = 0;
        LODWORD(v25) = v42 & 0x1F;
        do
        {
          if (v29 >= 0x1B)
          {
            uint64_t v31 = std::generic_category();
            uint64_t v42 = 92;
            unint64_t v43 = v31;
            uint64_t v41 = "Unterminated VBR";
            sub_1CD06481C();
          }
          __n128 result = (unsigned char *)sub_1CC1CA844((uint64_t)&v36, 6u, (uint64_t)&v42);
          if (v43) {
            goto LABEL_40;
          }
          unint64_t v25 = ((v42 & 0x1F) << (v29 + 5)) | v25;
          v29 += 5;
        }
        while ((v42 & 0x20) != 0);
        unint64_t v24 = v10 & 0xFFFFFFFF00000000;
      }
      else
      {
        unint64_t v24 = v42;
        unint64_t v25 = v10 & 0xFFFFFFFF00000000;
      }
      unint64_t v10 = v24 | v25;
      unint64_t v26 = v24 | v25;
      *a8 = 0;
    }
    if (v21 < v26)
    {
      uint64_t v35 = std::generic_category();
      uint64_t v42 = 92;
      unint64_t v43 = v35;
      char v34 = "truncated chars";
LABEL_47:
      uint64_t v41 = v34;
LABEL_48:
      sub_1CD06481C();
    }
    uint64_t v27 = (unsigned char *)*((void *)this + 4);
    if (a3 <= *((void *)this + 3) - (void)v27)
    {
      if (a3)
      {
        memcpy(v27, a2, a3);
        uint64_t v27 = (unsigned char *)(*((void *)this + 4) + a3);
        *((void *)this + 4) = v27;
      }
    }
    else
    {
      llvm::raw_ostream::write(this, (const char *)a2, a3);
      uint64_t v27 = (unsigned char *)*((void *)this + 4);
    }
    if (*((void *)this + 3) - (void)v27 > 4uLL)
    {
      void v27[4] = 39;
      *(_DWORD *)uint64_t v27 = 538976288;
      *((void *)this + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(this, "    '", 5uLL);
    }
    if (v21 < v26) {
      unint64_t v26 = v21;
    }
    llvm::raw_ostream::write_escaped(this, v20, v26, 1);
    uint64_t v28 = (_WORD *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v28 > 1uLL)
    {
      *uint64_t v28 = 2599;
      *((void *)this + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(this, "'\n", 2uLL);
    }
    v20 += v26;
    v21 -= v26;
    LODWORD(v14) = v14 - 1;
  }
  while (v14);
  __n128 result = (unsigned char *)*((void *)this + 4);
  if (a3 <= *((void *)this + 3) - (void)result)
  {
    if (a3)
    {
      memcpy(result, a2, a3);
      __n128 result = (unsigned char *)(*((void *)this + 4) + a3);
      *((void *)this + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, (const char *)a2, a3);
    __n128 result = (unsigned char *)*((void *)this + 4);
  }
  if (*((void *)this + 3) - (void)result > 2uLL)
  {
    result[2] = 125;
    *(_WORD *)__n128 result = 8224;
    *((void *)this + 4) += 3;
  }
  else
  {
    __n128 result = llvm::raw_ostream::write(this, "  }", 3uLL);
  }
  *a8 = 0;
  return result;
}

uint64_t llvm::BitcodeAnalyzer::BitcodeAnalyzer(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)__n128 result = a2;
  *(void *)(result + 8) = a3;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0x200000000;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = result + 80;
  *(void *)(result + 72) = 0x800000000;
  *(unsigned char *)(result + 376) = 0;
  *(unsigned char *)(result + 720) = 0;
  *(_DWORD *)(result + 728) = 0;
  *(_OWORD *)(result + 336) = 0u;
  *(_OWORD *)(result + 352) = 0u;
  *(void *)(result + 744) = 0;
  *(void *)(result + 752) = 0;
  *(void *)(result + 736) = result + 744;
  if (*(unsigned char *)(a4 + 16))
  {
    *(_OWORD *)(result + 376) = *(_OWORD *)a4;
    *(void *)(result + 392) = 0;
    *(void *)(result + 400) = 0;
    *(void *)(result + 408) = 0x200000000;
    *(void *)(result + 416) = 0;
    *(void *)(result + 424) = 0;
    *(void *)(result + 432) = 0;
    *(void *)(result + 440) = result + 456;
    *(void *)(result + 448) = 0x800000000;
    *(void *)(result + 712) = 0;
    *(unsigned char *)(result + 720) = 1;
  }
  return result;
}

void llvm::BitcodeAnalyzer::analyze(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  v48[34] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v8 = *(llvm::raw_ostream **)a2;
    char v9 = 1;
  }
  else
  {
    char v9 = 0;
    uint64_t v8 = 0;
  }
  sub_1CC1C5D74((uint64_t)&v42, v8, v9, a1);
  if (BYTE8(v42))
  {
    uint64_t v10 = v42;
    *a4 = v42;
    if (v10) {
      return;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 368) = v42;
    *a4 = 0;
  }
  *(void *)(a1 + 336) = a1 + 344;
  if (*(unsigned char *)(a1 + 720))
  {
    uint64_t v12 = *(void *)(a1 + 408);
    uint64_t v11 = *(void **)(a1 + 416);
    long long v13 = *(_OWORD *)(a1 + 392);
    long long v42 = *(_OWORD *)(a1 + 376);
    long long v43 = v13;
    unsigned int v14 = *(_DWORD *)(a1 + 412);
    int v44 = v12;
    memset(__p, 0, sizeof(__p));
    unsigned int v45 = v14;
    sub_1CC1CAD70(__p, v11, *(void **)(a1 + 424), (uint64_t)(*(void *)(a1 + 424) - (void)v11) >> 4);
    v47[0] = (char *)v48;
    v47[1] = (char *)0x800000000;
    if (*(_DWORD *)(a1 + 448)) {
      sub_1CC1CADFC((uint64_t)v47, a1 + 440);
    }
    v48[32] = *(void *)(a1 + 712);
    if (*(unsigned char *)(a2 + 16))
    {
      unint64_t v15 = *(llvm::raw_ostream **)a2;
      char v16 = 1;
    }
    else
    {
      unint64_t v15 = 0;
      char v16 = 0;
    }
    sub_1CC1C5D74((uint64_t)&v39, v15, v16, (uint64_t)&v42);
    if ((v40 & 1) == 0)
    {
      *a4 = 0;
      goto LABEL_16;
    }
    uint64_t v17 = v39;
    *a4 = v39;
    if (v17)
    {
LABEL_49:
      int v24 = 1;
    }
    else
    {
      do
      {
LABEL_16:
        if (v44) {
          BOOL v18 = 1;
        }
        else {
          BOOL v18 = *((void *)&v42 + 1) > (unint64_t)v43;
        }
        if (!v18)
        {
          int v24 = 0;
          goto LABEL_50;
        }
        sub_1CC1CA844((uint64_t)&v42, v45, (uint64_t)&v39);
        if (v40) {
          goto LABEL_75;
        }
        if (v39 != 1)
        {
          unint64_t v25 = std::generic_category();
          uint64_t v39 = 92;
          int v40 = v25;
          *(void *)&long long v35 = "Invalid record at top-level in block info file";
          sub_1CD06481C();
        }
        sub_1CC1CA844((uint64_t)&v42, 8u, (uint64_t)&v39);
        if (v40) {
          goto LABEL_75;
        }
        if ((v39 & 0x80) != 0)
        {
          unsigned int v20 = 0;
          LODWORD(v21) = v39 & 0x7F;
          while (1)
          {
            if (v20 >= 0x19)
            {
              uint64_t v30 = std::generic_category();
              uint64_t v39 = 92;
              int v40 = v30;
              *(void *)&long long v35 = "Unterminated VBR";
              sub_1CD06481C();
            }
            sub_1CC1CA844((uint64_t)&v42, 8u, (uint64_t)&v39);
            if (v40) {
              break;
            }
            uint64_t v21 = ((v39 & 0x7F) << (v20 + 7)) | v21;
            v20 += 7;
            if ((v39 & 0x80) == 0)
            {
              if (v21) {
                goto LABEL_26;
              }
              goto LABEL_32;
            }
          }
LABEL_75:
          *a4 = v39;
          goto LABEL_49;
        }
        if (v39)
        {
LABEL_26:
          sub_1CC1C6524((uint64_t)&v42, a4);
          int v19 = *a4 != 0;
        }
        else
        {
LABEL_32:
          LOBYTE(v35) = 0;
          char v37 = 0;
          llvm::BitstreamCursor::ReadBlockInfoBlock((llvm::BitstreamCursor *)&v42, 1, (uint64_t)&v39);
          if (v41 & 1) != 0 || (sub_1CD4F7554((uint64_t)&v35, (uint64_t)&v39), (v41))
          {
            uint64_t v22 = v39;
            uint64_t v39 = 0;
          }
          else
          {
            uint64_t v22 = 0;
          }
          *a4 = v22;
          sub_1CC1CB4C8((uint64_t)&v39);
          if (*a4)
          {
            int v19 = 1;
          }
          else
          {
            if (!v37)
            {
              int v23 = std::generic_category();
              uint64_t v39 = 92;
              int v40 = v23;
              unint64_t v38 = "Malformed BlockInfoBlock in block info file";
              sub_1CD06481C();
            }
            sub_1CC1CB1A4((void **)(a1 + 344));
            *(_OWORD *)(a1 + 344) = v35;
            *(void *)(a1 + 360) = v36;
            uint64_t v36 = 0;
            long long v35 = 0uLL;
            int v19 = 3;
          }
          if (v37)
          {
            uint64_t v39 = (uint64_t)&v35;
            sub_1CC1CB314((void ***)&v39);
          }
        }
      }
      while (!v19);
      if (v19 == 3) {
        int v24 = 0;
      }
      else {
        int v24 = v19;
      }
    }
LABEL_50:
    sub_1CC1CB3C4(v47);
    if (__p[0])
    {
      sub_1CC1CAA74((uint64_t)__p, (uint64_t)__p[0]);
      operator delete(__p[0]);
      if (!v24) {
        goto LABEL_52;
      }
    }
    else if (!v24)
    {
      goto LABEL_52;
    }
  }
  else
  {
    while (1)
    {
LABEL_52:
      if (!*(_DWORD *)(a1 + 32) && *(void *)(a1 + 8) <= *(void *)(a1 + 16))
      {
        *a4 = 0;
        return;
      }
      sub_1CC1CA844(a1, *(_DWORD *)(a1 + 36), (uint64_t)&v42);
      if (BYTE8(v42)) {
        break;
      }
      if (v42 != 1)
      {
        uint64_t v28 = std::generic_category();
        *(void *)&long long v42 = 92;
        *((void *)&v42 + 1) = v28;
        uint64_t v39 = (uint64_t)"Invalid record at top-level";
        sub_1CD06481C();
      }
      sub_1CC1CA844(a1, 8u, (uint64_t)&v42);
      if (BYTE8(v42)) {
        break;
      }
      if ((v42 & 0x80) != 0)
      {
        unsigned int v27 = 0;
        unsigned int v26 = v42 & 0x7F;
        while (1)
        {
          if (v27 >= 0x19)
          {
            unsigned int v29 = std::generic_category();
            *(void *)&long long v42 = 92;
            *((void *)&v42 + 1) = v29;
            uint64_t v39 = (uint64_t)"Unterminated VBR";
            sub_1CD06481C();
          }
          sub_1CC1CA844(a1, 8u, (uint64_t)&v42);
          if (BYTE8(v42)) {
            goto LABEL_74;
          }
          v26 |= (v42 & 0x7F) << (v27 + 7);
          v27 += 7;
          if ((v42 & 0x80) == 0) {
            goto LABEL_59;
          }
        }
      }
      unsigned int v26 = v42;
LABEL_59:
      LOBYTE(v33) = 0;
      char v34 = 0;
      if (*(unsigned char *)(a2 + 16))
      {
        long long v33 = *(_OWORD *)a2;
        char v34 = 1;
        long long v31 = *(_OWORD *)a3;
        uint64_t v32 = *(void *)(a3 + 16);
        llvm::BitcodeAnalyzer::parseBlock(a1, v26, 0, &v33, &v31, (void **)a4);
        char v34 = 0;
      }
      else
      {
        long long v31 = *(_OWORD *)a3;
        uint64_t v32 = *(void *)(a3 + 16);
        llvm::BitcodeAnalyzer::parseBlock(a1, v26, 0, &v33, &v31, (void **)a4);
      }
      if (*a4) {
        return;
      }
      ++*(_DWORD *)(a1 + 728);
    }
LABEL_74:
    *a4 = v42;
  }
}

uint64_t sub_1CC1C5D74(uint64_t a1, llvm::raw_ostream *this, char a3, uint64_t a4)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  int v7 = *(char **)a4;
  unint64_t v6 = *(void *)(a4 + 8);
  uint64_t v8 = (char *)(*(void *)a4 + v6);
  if (v6 && *v7 == 222 && v7[1] == 192 && v7[2] == 23 && v7[3] == 11)
  {
    if (v6 <= 0x13)
    {
      *(void *)&long long v53 = 92;
      *((void *)&v53 + 1) = std::generic_category();
      v49[0] = "Invalid bitcode wrapper header";
      sub_1CD06481C();
    }
    if (a3)
    {
      unint64_t v11 = *(unsigned int *)v7;
      uint64_t v10 = *((unsigned int *)v7 + 1);
      uint64_t v13 = *((unsigned int *)v7 + 2);
      uint64_t v12 = *((unsigned int *)v7 + 3);
      uint64_t v14 = *((unsigned int *)v7 + 4);
      unint64_t v15 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v15 > 0x16uLL)
      {
        qmemcpy(v15, "<BITCODE_WRAPPER_HEADER", 23);
        char v16 = (_DWORD *)(*((void *)this + 4) + 23);
        *((void *)this + 4) = v16;
      }
      else
      {
        llvm::raw_ostream::write(this, "<BITCODE_WRAPPER_HEADER", 0x17uLL);
        char v16 = (_DWORD *)*((void *)this + 4);
      }
      if (*((void *)this + 3) - (void)v16 > 6uLL)
      {
        *(_DWORD *)((char *)v16 + 3) = 1029925223;
        *char v16 = 1734429984;
        *((void *)this + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(this, " Magic=", 7uLL);
      }
      long long v53 = v11;
      LODWORD(v54) = 10;
      WORD2(v54) = 1;
      BYTE6(v54) = 1;
      llvm::raw_ostream::operator<<(this, (uint64_t)&v53);
      uint64_t v17 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v17) > 8)
      {
        *(unsigned char *)(v17 + 8) = 61;
        *(void *)uint64_t v17 = *(void *)" Version=";
        *((void *)this + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(this, " Version=", 9uLL);
      }
      v49[0] = v10;
      v49[1] = 0;
      int v50 = 10;
      __int16 v51 = 1;
      char v52 = 1;
      llvm::raw_ostream::operator<<(this, (uint64_t)v49);
      BOOL v18 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v18 > 7uLL)
      {
        *BOOL v18 = 0x3D74657366664F20;
        *((void *)this + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(this, " Offset=", 8uLL);
      }
      v45[0] = v13;
      v45[1] = 0;
      int v46 = 10;
      __int16 v47 = 1;
      char v48 = 1;
      llvm::raw_ostream::operator<<(this, (uint64_t)v45);
      uint64_t v19 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v19) > 5)
      {
        *(_WORD *)(v19 + 4) = 15717;
        *(_DWORD *)uint64_t v19 = 2053722912;
        *((void *)this + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(this, " Size=", 6uLL);
      }
      v41[0] = v12;
      v41[1] = 0;
      int v42 = 10;
      __int16 v43 = 1;
      char v44 = 1;
      llvm::raw_ostream::operator<<(this, (uint64_t)v41);
      uint64_t v20 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v20) > 8)
      {
        *(unsigned char *)(v20 + 8) = 61;
        *(void *)uint64_t v20 = *(void *)" CPUType=";
        *((void *)this + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(this, " CPUType=", 9uLL);
      }
      v37[0] = v14;
      v37[1] = 0;
      int v38 = 10;
      __int16 v39 = 1;
      char v40 = 1;
      llvm::raw_ostream::operator<<(this, (uint64_t)v37);
      uint64_t v21 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v21) > 2)
      {
        *(unsigned char *)(v21 + 2) = 10;
        *(_WORD *)uint64_t v21 = 15919;
        *((void *)this + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(this, "/>\n", 3uLL);
      }
    }
    if (((v8 - v7) & 0xFFFFFFF0) == 0
      || (v22 = *((unsigned int *)v7 + 2), uint64_t v23 = *((unsigned int *)v7 + 3), v23 + v22 > (unint64_t)(v8 - v7)))
    {
      int v24 = std::generic_category();
      *(void *)&long long v53 = 92;
      *((void *)&v53 + 1) = v24;
      v49[0] = "Invalid bitcode wrapper header";
      sub_1CD06481C();
    }
    v7 += v22;
    uint64_t v8 = &v7[v23];
  }
  *(void *)&long long v53 = v7;
  *((void *)&v53 + 1) = v8 - v7;
  long long v54 = 0uLL;
  uint64_t v55 = 0x200000000;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v57 = 0;
  v58[0] = (char *)&v59;
  v58[1] = (char *)0x800000000;
  uint64_t v60 = 0;
  *(void *)(a4 + 32) = 0x200000000;
  long long v25 = v54;
  *(_OWORD *)a4 = v53;
  *(_OWORD *)(a4 + 16) = v25;
  sub_1CC1CAA38((uint64_t *)(a4 + 40));
  *(_OWORD *)(a4 + 40) = *(_OWORD *)__p;
  *(void *)(a4 + 56) = v57;
  __p[1] = 0;
  uint64_t v57 = 0;
  __p[0] = 0;
  sub_1CC1CAB0C(a4 + 64, (uint64_t)v58);
  *(void *)(a4 + 336) = v60;
  sub_1CC1CB3C4(v58);
  if (__p[0])
  {
    sub_1CC1CAA74((uint64_t)__p, (uint64_t)__p[0]);
    operator delete(__p[0]);
  }
  uint64_t result = sub_1CC1CA844(a4, 8u, (uint64_t)&v53);
  if (BYTE8(v53))
  {
    uint64_t v28 = v53;
    if ((void)v53) {
      goto LABEL_90;
    }
    int v27 = 0;
  }
  else
  {
    int v27 = v53;
  }
  uint64_t result = sub_1CC1CA844(a4, 8u, (uint64_t)&v53);
  if (BYTE8(v53))
  {
    uint64_t v28 = v53;
    if ((void)v53) {
      goto LABEL_90;
    }
    int v29 = 0;
    goto LABEL_40;
  }
  int v29 = v53;
  if (v27 == 67 && v53 == 80)
  {
    uint64_t result = sub_1CC1CA844(a4, 8u, (uint64_t)&v53);
    if ((BYTE8(v53) & 1) == 0)
    {
      int v30 = v53;
      goto LABEL_56;
    }
    uint64_t v28 = v53;
    if (!(void)v53)
    {
      int v30 = 0;
LABEL_56:
      uint64_t result = sub_1CC1CA844(a4, 8u, (uint64_t)&v53);
      if ((BYTE8(v53) & 1) == 0)
      {
        if (v30 == 67 && v53 == 72)
        {
          *(unsigned char *)(a1 + 8) &= ~1u;
          int v35 = 2;
LABEL_88:
          *(_DWORD *)a1 = v35;
          return result;
        }
        goto LABEL_91;
      }
      goto LABEL_89;
    }
LABEL_90:
    *(unsigned char *)(a1 + 8) |= 1u;
    *(void *)a1 = v28;
    return result;
  }
  if (v27 == 68 && v53 == 73)
  {
    uint64_t result = sub_1CC1CA844(a4, 8u, (uint64_t)&v53);
    if (BYTE8(v53))
    {
      uint64_t v28 = v53;
      if ((void)v53) {
        goto LABEL_90;
      }
      int v32 = 0;
    }
    else
    {
      int v32 = v53;
    }
    uint64_t result = sub_1CC1CA844(a4, 8u, (uint64_t)&v53);
    if ((BYTE8(v53) & 1) == 0)
    {
      if (v32 == 65 && v53 == 71)
      {
        *(unsigned char *)(a1 + 8) &= ~1u;
        int v35 = 3;
        goto LABEL_88;
      }
      goto LABEL_91;
    }
    goto LABEL_89;
  }
  if (v27 != 82 || v53 != 77)
  {
LABEL_40:
    uint64_t result = sub_1CC1CA844(a4, 4u, (uint64_t)&v53);
    if (BYTE8(v53))
    {
      uint64_t v28 = v53;
      if ((void)v53) {
        goto LABEL_90;
      }
      int v31 = 0;
    }
    else
    {
      int v31 = v53;
    }
    uint64_t result = sub_1CC1CA844(a4, 4u, (uint64_t)&v53);
    if (BYTE8(v53))
    {
      uint64_t v28 = v53;
      if ((void)v53) {
        goto LABEL_90;
      }
      int v33 = 0;
    }
    else
    {
      int v33 = v53;
    }
    uint64_t result = sub_1CC1CA844(a4, 4u, (uint64_t)&v53);
    if (BYTE8(v53))
    {
      uint64_t v28 = v53;
      if ((void)v53) {
        goto LABEL_90;
      }
      int v36 = 0;
    }
    else
    {
      int v36 = v53;
    }
    uint64_t result = sub_1CC1CA844(a4, 4u, (uint64_t)&v53);
    if (BYTE8(v53))
    {
      uint64_t v28 = v53;
      if ((void)v53) {
        goto LABEL_90;
      }
    }
    else
    {
      LOBYTE(v28) = v53 == 13;
    }
    if (v27 == 66 && v29 == 67 && !v31 && v33 == 12 && v36 == 14 && (v28 & 1) != 0)
    {
      *(unsigned char *)(a1 + 8) &= ~1u;
      int v35 = 1;
      goto LABEL_88;
    }
    goto LABEL_91;
  }
  uint64_t result = sub_1CC1CA844(a4, 8u, (uint64_t)&v53);
  if (BYTE8(v53))
  {
    uint64_t v28 = v53;
    if ((void)v53) {
      goto LABEL_90;
    }
    int v34 = 0;
  }
  else
  {
    int v34 = v53;
  }
  uint64_t result = sub_1CC1CA844(a4, 8u, (uint64_t)&v53);
  if ((BYTE8(v53) & 1) == 0)
  {
    if (v34 == 82 && v53 == 75)
    {
      *(unsigned char *)(a1 + 8) &= ~1u;
      int v35 = 4;
      goto LABEL_88;
    }
    goto LABEL_91;
  }
LABEL_89:
  uint64_t v28 = v53;
  if ((void)v53) {
    goto LABEL_90;
  }
LABEL_91:
  *(unsigned char *)(a1 + 8) &= ~1u;
  *(_DWORD *)a1 = 0;
  return result;
}

uint64_t sub_1CC1C6524@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_1CC1CA844(a1, 4u, (uint64_t)&v20);
  if (v21) {
    goto LABEL_19;
  }
  if ((v20 & 8) != 0)
  {
    unsigned int v13 = -3;
    do
    {
      v13 += 3;
      if (v13 >= 0x1D)
      {
        uint64_t v17 = std::generic_category();
        uint64_t v20 = 92;
        uint64_t v21 = v17;
        uint64_t v19 = "Unterminated VBR";
        sub_1CD06481C();
      }
      uint64_t result = sub_1CC1CA844(a1, 4u, (uint64_t)&v20);
      if (v21) {
        goto LABEL_19;
      }
    }
    while ((v20 & 8) != 0);
  }
  unsigned int v5 = *(_DWORD *)(a1 + 32);
  BOOL v6 = v5 >= 0x20;
  char v7 = v5 - 32;
  if (v6)
  {
    *(void *)(a1 + 24) >>= v7;
    int v8 = 32;
  }
  else
  {
    int v8 = 0;
  }
  *(_DWORD *)(a1 + 32) = v8;
  uint64_t result = sub_1CC1CA844(a1, 0x20u, (uint64_t)&v20);
  if (v21)
  {
LABEL_19:
    *a2 = v20;
    return result;
  }
  unint64_t v10 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v11 = *(unsigned int *)(a1 + 32);
  unint64_t v12 = 8 * v9 - v11 + 32 * v20;
  unint64_t v18 = v12;
  if (!v11 && v10 <= v9)
  {
    char v16 = std::generic_category();
    uint64_t v20 = 92;
    uint64_t v21 = v16;
    uint64_t v19 = "can't skip block: already at end of stream";
    sub_1CD06481C();
  }
  if (v10 < v12 >> 3)
  {
    uint64_t v20 = 8 * v9 - v11;
    uint64_t v14 = std::generic_category();
    sub_1CD4F7410(92, (uint64_t)v14, (uint64_t)"can't skip to bit %zu from %llu", (uint64_t *)&v18, &v20);
  }
  *(void *)(a1 + 16) = (v12 >> 3) & 0x1FFFFFFFFFFFFFF8;
  *(_DWORD *)(a1 + 32) = 0;
  if ((v12 & 0x3F) == 0
    || (uint64_t result = sub_1CC1CA844(a1, v12 & 0x3F, (uint64_t)&v20), (v21 & 1) == 0)
    || (uint64_t v15 = v20, *a2 = v20, !v15))
  {
    *a2 = 0;
  }
  return result;
}

void llvm::BitcodeAnalyzer::parseBlock(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, long long *a4@<X3>, long long *a5@<X4>, void **a6@<X8>)
{
  uint64_t v218 = *MEMORY[0x1E4F143B8];
  size_t v12 = (2 * a3);
  if (v12 >= 0x17)
  {
    if ((v12 | 7) == 0x17) {
      uint64_t v14 = (v12 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v14 = v12 | 7;
    }
    p_b = (void **)operator new(v14 + 1);
    size_t v203 = v12;
    uint64_t v204 = v14 - 0x7FFFFFFFFFFFFFFFLL;
    __b = p_b;
    goto LABEL_8;
  }
  HIBYTE(v204) = 2 * a3;
  p_b = (void **)&__b;
  if (v12) {
LABEL_8:
  }
    memset(p_b, 32, v12);
  *((unsigned char *)p_b + v12) = 0;
  unint64_t v15 = 8 * *(void *)(a1 + 16) - *(unsigned int *)(a1 + 32);
  char v16 = *(uint64_t **)(a1 + 744);
  if (v16)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v17 = (uint64_t **)v16;
        unsigned int v18 = *((_DWORD *)v16 + 8);
        if (v18 <= a2) {
          break;
        }
        char v16 = *v17;
        uint64_t v19 = v17;
        if (!*v17) {
          goto LABEL_17;
        }
      }
      if (v18 >= a2) {
        break;
      }
      char v16 = v17[1];
      if (!v16)
      {
        uint64_t v19 = v17 + 1;
        goto LABEL_17;
      }
    }
  }
  else
  {
    uint64_t v19 = (uint64_t **)(a1 + 744);
    uint64_t v17 = (uint64_t **)(a1 + 744);
LABEL_17:
    unint64_t v6 = (unint64_t)v17;
    uint64_t v17 = (uint64_t **)operator new(0x60uLL);
    *((_DWORD *)v17 + 8) = a2;
    *((_DWORD *)v17 + 10) = 0;
    *uint64_t v17 = 0;
    v17[1] = 0;
    *((_OWORD *)v17 + 3) = 0u;
    *((_OWORD *)v17 + 4) = 0u;
    *((_OWORD *)v17 + 5) = 0u;
    v17[2] = (uint64_t *)v6;
    *uint64_t v19 = (uint64_t *)v17;
    uint64_t v20 = **(void **)(a1 + 736);
    uint64_t v21 = (uint64_t *)v17;
    if (v20)
    {
      *(void *)(a1 + 736) = v20;
      uint64_t v21 = *v19;
    }
    sub_1CB8358B8(*(uint64_t **)(a1 + 744), v21);
    ++*(void *)(a1 + 752);
  }
  ++*((_DWORD *)v17 + 10);
  BOOL v189 = *((unsigned char *)a4 + 16) != 0;
  if (!a2)
  {
    if (*((unsigned char *)a4 + 16) && !*((unsigned char *)a4 + 11))
    {
      if (v204 >= 0) {
        uint64_t v22 = (const char *)&__b;
      }
      else {
        uint64_t v22 = (const char *)__b;
      }
      if (v204 >= 0) {
        size_t v23 = HIBYTE(v204) & 0x7F;
      }
      else {
        size_t v23 = v203;
      }
      int v24 = llvm::raw_ostream::write(*(llvm::raw_ostream **)a4, v22, v23);
      uint64_t v25 = *((void *)v24 + 4);
      if ((unint64_t)(*((void *)v24 + 3) - v25) > 0x12)
      {
        *(_DWORD *)(v25 + 15) = 171847499;
        *(_OWORD *)uint64_t v25 = *(_OWORD *)"<BLOCKINFO_BLOCK/>\n";
        *((void *)v24 + 4) += 19;
      }
      else
      {
        llvm::raw_ostream::write(v24, "<BLOCKINFO_BLOCK/>\n", 0x13uLL);
      }
    }
    v209.__r_.__value_.__s.__data_[0] = 0;
    char v210 = 0;
    llvm::BitstreamCursor::ReadBlockInfoBlock((llvm::BitstreamCursor *)a1, 1, (uint64_t)&v214);
    if (v217 & 1) != 0 || (sub_1CD4F7554((uint64_t)&v209, (uint64_t)&v214), (v217))
    {
      unsigned int v26 = v214;
      long long v214 = 0;
    }
    else
    {
      unsigned int v26 = 0;
    }
    *a6 = v26;
    sub_1CC1CB4C8((uint64_t)&v214);
    if (*a6) {
      goto LABEL_34;
    }
    if (!v210)
    {
      uint64_t v28 = std::generic_category();
      long long v214 = (void *)92;
      *(void *)v215 = v28;
      v207[0] = "Malformed BlockInfoBlock";
      sub_1CD06481C();
    }
    sub_1CC1CB1A4((void **)(a1 + 344));
    *(std::string *)(a1 + 344) = v209;
    memset(&v209, 0, sizeof(v209));
    *(void *)(a1 + 16) = (v15 >> 3) & 0x1FFFFFFFFFFFFFF8;
    *(_DWORD *)(a1 + 32) = 0;
    if (v15 & 0x3F) != 0 && (sub_1CC1CA844(a1, v15 & 0x3F, (uint64_t)&v214), (v215[0]))
    {
      v174 = v214;
      *a6 = v214;
      if (v174)
      {
LABEL_34:
        int v27 = 0;
        goto LABEL_44;
      }
    }
    else
    {
      *a6 = 0;
    }
    if (*((unsigned char *)a4 + 16)) {
      BOOL v189 = *((unsigned char *)a4 + 11) != 0;
    }
    else {
      BOOL v189 = 0;
    }
    int v27 = 1;
LABEL_44:
    if (v210)
    {
      long long v214 = &v209;
      sub_1CC1CB314((void ***)&v214);
    }
    if (!v27) {
      goto LABEL_330;
    }
  }
  unsigned int v201 = 0;
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)a1, &v201, a2, a6);
  if (*a6) {
    goto LABEL_330;
  }
  unint64_t v177 = (8 * *(void *)(a1 + 16) - (unint64_t)*(unsigned int *)(a1 + 32)) >> 3;
  if (v189)
  {
    if (v204 >= 0) {
      int v29 = (const char *)&__b;
    }
    else {
      int v29 = (const char *)__b;
    }
    if (v204 >= 0) {
      size_t v30 = HIBYTE(v204) & 0x7F;
    }
    else {
      size_t v30 = v203;
    }
    int v31 = llvm::raw_ostream::write(*(llvm::raw_ostream **)a4, v29, v30);
    int v32 = (unsigned char *)*((void *)v31 + 4);
    unint64_t v33 = v15;
    if (*((unsigned char **)v31 + 3) == v32)
    {
      llvm::raw_ostream::write(v31, "<", 1uLL);
    }
    else
    {
      unsigned char *v32 = 60;
      ++*((void *)v31 + 4);
    }
    int v34 = sub_1CC1C9668(a2, *(void *)(a1 + 344), *(void *)(a1 + 352), *(_DWORD *)(a1 + 368));
    int v35 = *(llvm::raw_ostream **)a4;
    std::string __s = v34;
    char v176 = v36;
    if (v36)
    {
      unint64_t v6 = (unint64_t)v34;
      if (v34)
      {
        size_t v37 = strlen(v34);
        int v38 = (void *)*((void *)v35 + 4);
        if (v37 <= *((void *)v35 + 3) - (void)v38)
        {
          if (v37)
          {
            memcpy(v38, (const void *)v6, v37);
            *((void *)v35 + 4) += v37;
          }
        }
        else
        {
          llvm::raw_ostream::write(v35, (const char *)v6, v37);
        }
      }
      int v35 = *(llvm::raw_ostream **)a4;
      if (*((unsigned char *)a4 + 9)) {
        goto LABEL_69;
      }
      uint64_t v39 = *((void *)v35 + 4);
      if ((unint64_t)(*((void *)v35 + 3) - v39) <= 8)
      {
        char v40 = " BlockID=";
        char v41 = *(llvm::raw_ostream **)a4;
        size_t v42 = 9;
LABEL_67:
        llvm::raw_ostream::write(v41, v40, v42);
LABEL_68:
        sub_1CD098D14(v35, a2, 0, 0, 0);
        int v35 = *(llvm::raw_ostream **)a4;
LABEL_69:
        uint64_t v44 = *((void *)v35 + 4);
        if ((unint64_t)(*((void *)v35 + 3) - v44) > 9)
        {
          *(_WORD *)(v44 + 8) = 15731;
          *(void *)uint64_t v44 = *(void *)" NumWords=";
          *((void *)v35 + 4) += 10;
        }
        else
        {
          llvm::raw_ostream::write(v35, " NumWords=", 0xAuLL);
        }
        sub_1CD098D14(v35, v201, 0, 0, 0);
        unsigned int v45 = (void *)*((void *)v35 + 4);
        if (*((void *)v35 + 3) - (void)v45 > 0xEuLL)
        {
          qmemcpy(v45, " BlockCodeSize=", 15);
          *((void *)v35 + 4) += 15;
        }
        else
        {
          llvm::raw_ostream::write(v35, " BlockCodeSize=", 0xFuLL);
        }
        sub_1CD098D14(v35, *(unsigned int *)(a1 + 36), 0, 0, 0);
        int v46 = (_WORD *)*((void *)v35 + 4);
        if (*((void *)v35 + 3) - (void)v46 > 1uLL)
        {
          *int v46 = 2622;
          *((void *)v35 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v35, ">\n", 2uLL);
        }
        unint64_t v15 = v33;
        goto LABEL_76;
      }
      *(unsigned char *)(v39 + 8) = 61;
      *(void *)uint64_t v39 = *(void *)" BlockID=";
      uint64_t v172 = *((void *)v35 + 4) + 9;
    }
    else
    {
      uint64_t v43 = *((void *)v35 + 4);
      if ((unint64_t)(*((void *)v35 + 3) - v43) <= 0xB)
      {
        char v40 = "UnknownBlock";
        char v41 = *(llvm::raw_ostream **)a4;
        size_t v42 = 12;
        goto LABEL_67;
      }
      *(_DWORD *)(v43 + 8) = 1801678700;
      *(void *)uint64_t v43 = *(void *)"UnknownBlock";
      uint64_t v172 = *((void *)v35 + 4) + 12;
    }
    *((void *)v35 + 4) = v172;
    goto LABEL_68;
  }
  std::string __s = 0;
  char v176 = 0;
LABEL_76:
  unint64_t v178 = 0;
  long long v214 = v216;
  unsigned int v187 = a3 + 1;
  *(void *)v215 = 0x4000000000;
  __int16 v47 = a4;
  unsigned int v183 = a2;
  uint64_t v184 = a5;
  unint64_t v190 = (uint64_t *)a6;
  while (1)
  {
    while (1)
    {
      uint64_t v48 = *(unsigned int *)(a1 + 32);
      unint64_t v49 = *(void *)(a1 + 16);
      if (!v48 && *(void *)(a1 + 8) <= v49)
      {
        uint64_t v169 = std::generic_category();
        v209.__r_.__value_.__r.__words[0] = 92;
        v209.__r_.__value_.__l.__size_ = (std::string::size_type)v169;
        BOOL v168 = "Premature end of bitstream";
LABEL_318:
        v207[0] = v168;
        sub_1CD06481C();
      }
      sub_1CC1CA5F4(a1, 2, (uint64_t)&v209);
      std::string::size_type v50 = v209.__r_.__value_.__r.__words[0];
      int data = v193;
      if ((v209.__r_.__value_.__s.__data_[8] & 1) == 0) {
        int data = (int)v209.__r_.__value_.__l.__data_;
      }
      int v193 = data;
      unint64_t v6 = (v209.__r_.__value_.__s.__data_[8] & 1) != 0 ? v6 : HIDWORD(v209.__r_.__value_.__r.__words[0]);
      unint64_t v194 = v6;
      if (v209.__r_.__value_.__s.__data_[8])
      {
        *a6 = (void *)v209.__r_.__value_.__r.__words[0];
        if (v50) {
          goto LABEL_328;
        }
      }
      else
      {
        *a6 = 0;
      }
      if (data != 2) {
        break;
      }
      unint64_t v6 = *(void *)(a1 + 16);
      uint64_t v52 = *(unsigned int *)(a1 + 32);
      LOBYTE(v199) = 0;
      char v200 = 0;
      if (*((unsigned char *)v47 + 16))
      {
        long long v199 = *v47;
        char v200 = 1;
        long long v197 = *a5;
        uint64_t v198 = *((void *)a5 + 2);
        llvm::BitcodeAnalyzer::parseBlock(a1, v194, v187, &v199, &v197);
        char v200 = 0;
      }
      else
      {
        long long v197 = *a5;
        uint64_t v198 = *((void *)a5 + 2);
        llvm::BitcodeAnalyzer::parseBlock(a1, v194, v187, &v199, &v197);
      }
      if (*a6) {
        goto LABEL_328;
      }
      ++*((_DWORD *)v17 + 14);
      unint64_t v15 = v15 - 8 * v6 + v52 + 8 * *(void *)(a1 + 16) - *(unsigned int *)(a1 + 32);
      LODWORD(v6) = v194;
    }
    if (data == 1) {
      break;
    }
    if (!data)
    {
      v167 = std::generic_category();
      v209.__r_.__value_.__r.__words[0] = 92;
      v209.__r_.__value_.__l.__size_ = (std::string::size_type)v167;
      BOOL v168 = "malformed bitcode file";
      goto LABEL_318;
    }
    if (v6 == 2)
    {
      llvm::BitstreamCursor::ReadAbbrevRecord((llvm::BitstreamCursor *)a1, (unint64_t *)a6);
      if (*a6) {
        goto LABEL_328;
      }
      ++*((_DWORD *)v17 + 15);
    }
    else
    {
      long long v53 = a6;
      v215[0] = 0;
      ++*((_DWORD *)v17 + 16);
      *(void *)v195 = 0;
      *(void *)uint64_t v196 = 0;
      uint64_t v185 = *(void *)(a1 + 16);
      uint64_t v54 = *(unsigned int *)(a1 + 32);
      llvm::BitstreamCursor::readRecord((void *)a1, v6, (uint64_t)&v214, (unsigned __int8 **)v195, (uint64_t)&v209);
      if (v209.__r_.__value_.__s.__data_[8]) {
        unint64_t data_low = 0;
      }
      else {
        unint64_t data_low = LODWORD(v209.__r_.__value_.__l.__data_);
      }
      if (v209.__r_.__value_.__s.__data_[8])
      {
        std::string::size_type v56 = v209.__r_.__value_.__r.__words[0];
        *long long v53 = (void *)v209.__r_.__value_.__r.__words[0];
        if (v56) {
          goto LABEL_328;
        }
      }
      else
      {
        *long long v53 = 0;
      }
      unint64_t v188 = v15;
      uint64_t v57 = v17[9];
      uint64_t v58 = (char *)v17[10];
      uint64_t v59 = (char *)(v58 - (char *)v57);
      unint64_t v60 = (v58 - (char *)v57) >> 4;
      unint64_t v191 = data_low;
      if (v60 <= data_low)
      {
        unint64_t v61 = (data_low + 1);
        unint64_t v62 = v61 - v60;
        if (v61 <= v60)
        {
          if (v61 < v60) {
            v17[10] = &v57[2 * v61];
          }
          __int16 v47 = a4;
        }
        else
        {
          uint64_t v63 = v17[11];
          if (v62 <= ((char *)v63 - v58) >> 4)
          {
            bzero(v58, 16 * v62);
            v17[10] = (uint64_t *)&v58[16 * v62];
          }
          else
          {
            uint64_t v64 = (char *)v63 - (char *)v57;
            if (v64 >> 3 > v61) {
              unint64_t v61 = v64 >> 3;
            }
            BOOL v65 = (unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0;
            unint64_t v66 = 0xFFFFFFFFFFFFFFFLL;
            if (!v65) {
              unint64_t v66 = v61;
            }
            if (v66 >> 60) {
              sub_1CB833614();
            }
            unint64_t v181 = v66;
            uint64_t v179 = operator new(16 * v66);
            unint64_t v67 = (char *)v179 + 16 * v60;
            bzero(v67, 16 * v62);
            if (v58 != (char *)v57)
            {
              do
              {
                *((_OWORD *)v67 - 1) = *((_OWORD *)v58 - 1);
                v67 -= 16;
                v58 -= 16;
              }
              while (v58 != (char *)v57);
              uint64_t v58 = (char *)v17[9];
            }
            v17[9] = (uint64_t *)v67;
            v17[10] = (uint64_t *)&v59[16 * v62 + (void)v179];
            v17[11] = (uint64_t *)((char *)v179 + 16 * v181);
            if (v58) {
              operator delete(v58);
            }
          }
          uint64_t v57 = v17[9];
          unint64_t data_low = v191;
          __int16 v47 = a4;
        }
        a5 = v184;
        unint64_t v15 = v188;
      }
      else
      {
        __int16 v47 = a4;
        a5 = v184;
        unint64_t v15 = v188;
      }
      unint64_t v68 = 8 * v49 - v48;
      long long v69 = (char *)&v57[2 * data_low];
      ++*(_DWORD *)v69;
      *((void *)v69 + 1) = *((void *)v69 + 1) - (v68 + *(unsigned int *)(a1 + 32)) + 8 * *(void *)(a1 + 16);
      if (v194 != 3)
      {
        ++*((_DWORD *)v69 + 1);
        ++*((_DWORD *)v17 + 17);
      }
      unint64_t v70 = 8 * v185 - v54;
      unint64_t v71 = v70 >> 3;
      int v72 = v190;
      if (!v189)
      {
        a2 = v183;
        goto LABEL_265;
      }
      unint64_t v186 = v70 >> 3;
      char v180 = v70;
      if (v204 >= 0) {
        uint64_t v73 = (const char *)&__b;
      }
      else {
        uint64_t v73 = (const char *)__b;
      }
      if (v204 >= 0) {
        size_t v74 = HIBYTE(v204) & 0x7F;
      }
      else {
        size_t v74 = v203;
      }
      unint64_t v75 = llvm::raw_ostream::write(*(llvm::raw_ostream **)v47, v73, v74);
      uint64_t v76 = *((void *)v75 + 4);
      a2 = v183;
      if ((unint64_t)(*((void *)v75 + 3) - v76) > 2)
      {
        *(unsigned char *)(v76 + 2) = 60;
        *(_WORD *)uint64_t v76 = 8224;
        *((void *)v75 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v75, "  <", 3uLL);
      }
      long long v77 = sub_1CC1C9734(v191, v183, *(void *)(a1 + 344), *(void *)(a1 + 352), *(_DWORD *)(a1 + 368));
      if (!v78)
      {
        uint64_t v83 = *(llvm::raw_ostream **)v47;
        uint64_t v87 = *(void *)(*(void *)v47 + 32);
        if ((unint64_t)(*(void *)(*(void *)v47 + 24) - v87) <= 0xA)
        {
          BOOL v85 = "UnknownCode";
          size_t v86 = 11;
LABEL_145:
          uint64_t v83 = llvm::raw_ostream::write(v83, v85, v86);
LABEL_146:
          sub_1CD098D14(v83, v191, 0, 0, 0);
          goto LABEL_147;
        }
        *(_DWORD *)(v87 + 7) = 1701080899;
        *(void *)uint64_t v87 = *(void *)"UnknownCode";
        uint64_t v155 = *((void *)v83 + 4) + 11;
LABEL_280:
        *((void *)v83 + 4) = v155;
        goto LABEL_146;
      }
      uint64_t v79 = v77;
      if (v77)
      {
        unint64_t v80 = *(llvm::raw_ostream **)v47;
        size_t v81 = strlen(v77);
        std::string::size_type v82 = *(void **)(*(void *)v47 + 32);
        if (v81 <= *(void *)(*(void *)v47 + 24) - (void)v82)
        {
          if (v81)
          {
            memcpy(v82, v79, v81);
            *((void *)v80 + 4) += v81;
          }
        }
        else
        {
          llvm::raw_ostream::write(v80, v79, v81);
        }
      }
      if (!*((unsigned char *)v47 + 9))
      {
        uint64_t v83 = *(llvm::raw_ostream **)v47;
        int v84 = *(void **)(*(void *)v47 + 32);
        if (*(void *)(*(void *)v47 + 24) - (void)v84 <= 7uLL)
        {
          BOOL v85 = " codeid=";
          size_t v86 = 8;
          goto LABEL_145;
        }
        *int v84 = 0x3D646965646F6320;
        uint64_t v155 = *((void *)v83 + 4) + 8;
        goto LABEL_280;
      }
LABEL_147:
      if (v194 == 3)
      {
        unint64_t v88 = v68;
        uint64_t v182 = 0;
      }
      else
      {
        unint64_t v89 = (v194 - 4);
        uint64_t v90 = *(void *)(a1 + 40);
        if (v89 >= (*(void *)(a1 + 48) - v90) >> 4)
        {
          uint64_t v173 = std::generic_category();
          v209.__r_.__value_.__r.__words[0] = 92;
          v209.__r_.__value_.__l.__size_ = (std::string::size_type)v173;
          v207[0] = "Invalid abbrev number";
          sub_1CD06481C();
        }
        uint64_t v91 = *(void *)(v90 + 16 * v89);
        std::string::size_type v92 = *(llvm::raw_ostream **)v47;
        uint64_t v93 = *(void *)(*(void *)v47 + 32);
        if ((unint64_t)(*(void *)(*(void *)v47 + 24) - v93) > 9)
        {
          *(_WORD *)(v93 + 8) = 15716;
          *(void *)uint64_t v93 = *(void *)" abbrevid=";
          *((void *)v92 + 4) += 10;
        }
        else
        {
          std::string::size_type v92 = llvm::raw_ostream::write(v92, " abbrevid=", 0xAuLL);
        }
        uint64_t v182 = v91;
        unint64_t v88 = v68;
        sub_1CD098D14(v92, v194, 0, 0, 0);
      }
      uint64_t v94 = v215[0];
      if (v215[0])
      {
        unint64_t v95 = 0;
        do
        {
          uint64_t v96 = *(llvm::raw_ostream **)v47;
          uint64_t v97 = *(void *)(*(void *)v47 + 32);
          if ((unint64_t)(*(void *)(*(void *)v47 + 24) - v97) > 2)
          {
            *(unsigned char *)(v97 + 2) = 112;
            *(_WORD *)uint64_t v97 = 28448;
            *((void *)v96 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(*(llvm::raw_ostream **)v47, " op", 3uLL);
          }
          sub_1CD098D14(v96, v95, 0, 0, 0);
          uint64_t v98 = (unsigned char *)*((void *)v96 + 4);
          if (*((unsigned char **)v96 + 3) == v98)
          {
            llvm::raw_ostream::write(v96, "=", 1uLL);
          }
          else
          {
            *uint64_t v98 = 61;
            ++*((void *)v96 + 4);
          }
          llvm::raw_ostream::operator<<(v96, *((void *)v214 + v95++));
        }
        while (v94 != v95);
      }
      if (v183 == 15)
      {
        a5 = v184;
        if (v191 == 39)
        {
          uint64_t v110 = *(llvm::raw_ostream **)v47;
          uint64_t v111 = *(void *)(*(void *)v47 + 32);
          if ((unint64_t)(*(void *)(*(void *)v47 + 24) - v111) > 8)
          {
            *(unsigned char *)(v111 + 8) = 32;
            *(void *)uint64_t v111 = *(void *)" (offset ";
            *((void *)v110 + 4) += 9;
          }
          else
          {
            llvm::raw_ostream::write(v110, " (offset ", 9uLL);
          }
          uint64_t v112 = *(llvm::raw_ostream **)v47;
          uint64_t v113 = *(void *)(*(void *)v47 + 32);
          unint64_t v114 = *(void *)(*(void *)v47 + 24) - v113;
          if (v178 == v88)
          {
            if (v114 <= 5)
            {
              unint64_t v115 = *(llvm::raw_ostream **)v47;
              uint64_t v116 = "match)";
              size_t v117 = 6;
              goto LABEL_196;
            }
            *(_WORD *)(v113 + 4) = 10600;
            *(_DWORD *)uint64_t v113 = 1668571501;
            uint64_t v156 = *((void *)v112 + 4) + 6;
LABEL_291:
            *((void *)v112 + 4) = v156;
          }
          else
          {
            if (v114 > 9)
            {
              *(_WORD *)(v113 + 8) = 8250;
              *(void *)uint64_t v113 = *(void *)"mismatch: ";
              *((void *)v112 + 4) += 10;
            }
            else
            {
              llvm::raw_ostream::write(*(llvm::raw_ostream **)v47, "mismatch: ", 0xAuLL);
            }
            sub_1CD098D14(v112, v178, 0, 0, 0);
            uint64_t v119 = (_DWORD *)*((void *)v112 + 4);
            if (*((void *)v112 + 3) - (void)v119 > 3uLL)
            {
              *uint64_t v119 = 544437792;
              *((void *)v112 + 4) += 4;
            }
            else
            {
              llvm::raw_ostream::write(v112, " vs ", 4uLL);
            }
            sub_1CD098D14(v112, v88, 0, 0, 0);
            unint64_t v120 = (unsigned char *)*((void *)v112 + 4);
            if (*((unsigned char **)v112 + 3) != v120)
            {
              *unint64_t v120 = 41;
              uint64_t v156 = *((void *)v112 + 4) + 1;
              goto LABEL_291;
            }
            unint64_t v115 = v112;
            uint64_t v116 = ")";
            size_t v117 = 1;
LABEL_196:
            llvm::raw_ostream::write(v115, v116, v117);
          }
LABEL_197:
          uint64_t v99 = v182;
          goto LABEL_203;
        }
        if (v191 != 38) {
          goto LABEL_197;
        }
        uint64_t v99 = v182;
        if (v215[0] == 2)
        {
          unint64_t v178 = *(void *)v214
               + (*((void *)v214 + 1) << 32)
               + 8 * *(void *)(a1 + 16)
               - *(unsigned int *)(a1 + 32);
          goto LABEL_203;
        }
        uint64_t v105 = *(llvm::raw_ostream **)v47;
        unsigned int v118 = *(_OWORD **)(*(void *)v47 + 32);
        if (*(void *)(*(void *)v47 + 24) - (void)v118 <= 0xFuLL)
        {
          char v108 = "(Invalid record)";
          size_t v109 = 16;
          goto LABEL_202;
        }
        *unsigned int v118 = *(_OWORD *)"(Invalid record)";
        uint64_t v157 = *((void *)v105 + 4) + 16;
LABEL_300:
        *((void *)v105 + 4) = v157;
        goto LABEL_203;
      }
      a5 = v184;
      if (v183 != 8) {
        goto LABEL_197;
      }
      uint64_t v99 = v182;
      if (v191 == 17 && *((unsigned char *)v184 + 16))
      {
        if (v215[0] == 5)
        {
          long long v211 = xmmword_1CFAC4320;
          uint64_t v212 = 3285377520;
          char v213 = 0;
          llvm::SHA1::update(&v209, *(unsigned char **)v184, *((void *)v184 + 1));
          llvm::SHA1::update(&v209, (unsigned char *)(*(void *)a1 + v177), (int)v186 - (int)v177);
          llvm::SHA1::result((llvm::SHA1 *)&v209, (uint64_t)v207);
          uint64_t v100 = 0;
          uint64_t v101 = (unsigned int *)v214;
          do
          {
            unsigned int v102 = *v101;
            v101 += 2;
            *(_DWORD *)((char *)v205 + v100) = bswap32(v102);
            v100 += 4;
          }
          while (v100 != 20);
          BOOL v104 = v207[0] == v205[0] && v207[1] == v205[1] && v208 == (unint64_t)v206;
          uint64_t v105 = *(llvm::raw_ostream **)v47;
          unsigned int v106 = *(void **)(*(void *)v47 + 32);
          unint64_t v107 = *(void *)(*(void *)v47 + 24) - (void)v106;
          if (v104)
          {
            if (v107 <= 7)
            {
              char v108 = " (match)";
              size_t v109 = 8;
              goto LABEL_202;
            }
            *unsigned int v106 = 0x29686374616D2820;
            uint64_t v157 = *((void *)v105 + 4) + 8;
          }
          else
          {
            if (v107 <= 0xC)
            {
              char v108 = " (!mismatch!)";
              size_t v109 = 13;
LABEL_202:
              llvm::raw_ostream::write(v105, v108, v109);
              goto LABEL_203;
            }
            qmemcpy(v106, " (!mismatch!)", 13);
            uint64_t v157 = *((void *)v105 + 4) + 13;
          }
        }
        else
        {
          uint64_t v105 = *(llvm::raw_ostream **)v47;
          uint64_t v121 = *(void *)(*(void *)v47 + 32);
          if ((unint64_t)(*(void *)(*(void *)v47 + 24) - v121) <= 9)
          {
            char v108 = " (invalid)";
            size_t v109 = 10;
            goto LABEL_202;
          }
          *(_WORD *)(v121 + 8) = 10596;
          *(void *)uint64_t v121 = *(void *)" (invalid)";
          uint64_t v157 = *((void *)v105 + 4) + 10;
        }
        goto LABEL_300;
      }
LABEL_203:
      unint64_t v122 = *(llvm::raw_ostream **)v47;
      unint64_t v123 = *(_WORD **)(*(void *)v47 + 32);
      if (*(void *)(*(void *)v47 + 24) - (void)v123 > 1uLL)
      {
        *unint64_t v123 = 15919;
        *((void *)v122 + 4) += 2;
        if (!v99) {
          goto LABEL_226;
        }
      }
      else
      {
        llvm::raw_ostream::write(v122, "/>", 2uLL);
        if (!v99) {
          goto LABEL_226;
        }
      }
      if (*(_DWORD *)(v99 + 8) != 1)
      {
        unsigned int v124 = 0;
        while (1)
        {
          unsigned int v125 = v124 + 1;
          if ((*(unsigned char *)(*(void *)v99 + 16 * (v124 + 1) + 8) & 0xF) == 6) {
            break;
          }
          ++v124;
          if (*(_DWORD *)(v99 + 8) - 1 == v125) {
            goto LABEL_226;
          }
        }
        memset(&v209, 0, sizeof(v209));
        int v126 = v215[0];
        while (v126 != v124)
        {
          uint64_t v127 = *((void *)v214 + v124);
          if ((v127 - 32) > 0x5Eu) {
            goto LABEL_224;
          }
          std::string::push_back(&v209, v127);
          ++v124;
        }
        unint64_t v128 = *(llvm::raw_ostream **)v47;
        uint64_t v129 = *(void *)(*(void *)v47 + 32);
        if ((unint64_t)(*(void *)(*(void *)v47 + 24) - v129) > 0x11)
        {
          *(_WORD *)(v129 + 16) = 10016;
          *(_OWORD *)uint64_t v129 = *(_OWORD *)" record string = '";
          *((void *)v128 + 4) += 18;
        }
        else
        {
          unint64_t v128 = llvm::raw_ostream::write(v128, " record string = '", 0x12uLL);
        }
        if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v130 = &v209;
        }
        else {
          uint64_t v130 = (std::string *)v209.__r_.__value_.__r.__words[0];
        }
        if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = *((unsigned char *)&v209.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          size_t size = v209.__r_.__value_.__l.__size_;
        }
        long long v132 = llvm::raw_ostream::write(v128, (const char *)v130, size);
        long long v133 = (unsigned char *)*((void *)v132 + 4);
        if (*((unsigned char **)v132 + 3) == v133)
        {
          llvm::raw_ostream::write(v132, "'", 1uLL);
        }
        else
        {
          *long long v133 = 39;
          ++*((void *)v132 + 4);
        }
LABEL_224:
        if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v209.__r_.__value_.__l.__data_);
        }
      }
LABEL_226:
      unint64_t v15 = v188;
      if (*(void *)v195)
      {
        if (v183 == 15 && v191 == 35)
        {
          if (v204 >= 0) {
            int v134 = (void **)&__b;
          }
          else {
            int v134 = __b;
          }
          if (v204 >= 0) {
            size_t v135 = HIBYTE(v204) & 0x7F;
          }
          else {
            size_t v135 = v203;
          }
          llvm::BitcodeAnalyzer::decodeMetadataStringsBlob(*(llvm::raw_ostream **)v47, v134, v135, (uint64_t *)v214, v215[0], *(uint64_t *)v195, *(unint64_t *)v196, v190);
          if (*v190) {
            goto LABEL_328;
          }
          goto LABEL_262;
        }
        uint64_t v136 = *(llvm::raw_ostream **)v47;
        uint64_t v137 = *(void **)(*(void *)v47 + 32);
        if (*(void *)(*(void *)v47 + 24) - (void)v137 > 0xCuLL)
        {
          qmemcpy(v137, " blob int data = ", 13);
          *((void *)v136 + 4) += 13;
        }
        else
        {
          llvm::raw_ostream::write(v136, " blob int data = ", 0xDuLL);
        }
        if (*((unsigned char *)v47 + 10))
        {
          std::string v138 = *(llvm::raw_ostream **)v47;
          v139 = *(unsigned char **)(*(void *)v47 + 32);
          if (*(unsigned char **)(*(void *)v47 + 24) == v139)
          {
            llvm::raw_ostream::write(v138, "'", 1uLL);
          }
          else
          {
            unsigned char *v139 = 39;
            ++*((void *)v138 + 4);
          }
          v140 = llvm::raw_ostream::write_escaped(*(llvm::raw_ostream **)v47, *(char **)v195, *(uint64_t *)v196, 1);
          v141 = (unsigned char *)*((void *)v140 + 4);
          if (*((unsigned char **)v140 + 3) == v141)
          {
            llvm::raw_ostream::write(v140, "'", 1uLL);
          }
          else
          {
            unsigned char *v141 = 39;
            ++*((void *)v140 + 4);
          }
          goto LABEL_262;
        }
        unint64_t v142 = *(void *)v196;
        if (*(void *)v196)
        {
          char v143 = *(unsigned __int8 **)v195;
          while (*v143 - 32 < 0x5F)
          {
            ++v143;
            if (!--v142) {
              goto LABEL_248;
            }
          }
          char v144 = *(llvm::raw_ostream **)v47;
          uint64_t v151 = *(void **)(*(void *)v47 + 32);
          if (*(void *)(*(void *)v47 + 24) - (void)v151 > 0xCuLL)
          {
            qmemcpy(v151, "unprintable, ", 13);
            *((void *)v144 + 4) += 13;
          }
          else
          {
            llvm::raw_ostream::write(*(llvm::raw_ostream **)v47, "unprintable, ", 0xDuLL);
          }
          sub_1CD098D14(v144, *(unint64_t *)v196, 0, 0, 0);
          long long v152 = (_DWORD *)*((void *)v144 + 4);
          if (*((void *)v144 + 3) - (void)v152 <= 6uLL)
          {
            unint64_t v148 = v144;
            v149 = " bytes.";
            size_t v150 = 7;
LABEL_260:
            llvm::raw_ostream::write(v148, v149, v150);
LABEL_261:
            unint64_t v15 = v188;
            goto LABEL_262;
          }
          *(_DWORD *)((char *)v152 + 3) = 779314548;
          *long long v152 = 1954112032;
          uint64_t v158 = *((void *)v144 + 4) + 7;
        }
        else
        {
LABEL_248:
          char v144 = *(llvm::raw_ostream **)v47;
          v145 = *(unsigned char **)(*(void *)v47 + 32);
          if (*(unsigned char **)(*(void *)v47 + 24) == v145)
          {
            llvm::raw_ostream::write(*(llvm::raw_ostream **)v47, "'", 1uLL);
            unint64_t v146 = (unsigned char *)*((void *)v144 + 4);
          }
          else
          {
            unsigned char *v145 = 39;
            unint64_t v146 = (unsigned char *)(*((void *)v144 + 4) + 1);
            *((void *)v144 + 4) = v146;
          }
          unint64_t v147 = *(void *)v196;
          if (*(void *)v196 <= *((void *)v144 + 3) - (void)v146)
          {
            if (*(void *)v196)
            {
              memcpy(v146, *(const void **)v195, *(size_t *)v196);
              unint64_t v146 = (unsigned char *)(*((void *)v144 + 4) + v147);
              *((void *)v144 + 4) = v146;
            }
          }
          else
          {
            llvm::raw_ostream::write(v144, *(const char **)v195, *(size_t *)v196);
            unint64_t v146 = (unsigned char *)*((void *)v144 + 4);
          }
          if (*((unsigned char **)v144 + 3) == v146)
          {
            unint64_t v148 = v144;
            v149 = "'";
            size_t v150 = 1;
            goto LABEL_260;
          }
          *unint64_t v146 = 39;
          uint64_t v158 = *((void *)v144 + 4) + 1;
        }
        *((void *)v144 + 4) = v158;
        goto LABEL_261;
      }
LABEL_262:
      unint64_t v153 = *(llvm::raw_ostream **)v47;
      uint64_t v154 = *(unsigned char **)(*(void *)v47 + 32);
      if (*(unsigned char **)(*(void *)v47 + 24) == v154)
      {
        llvm::raw_ostream::write(v153, "\n", 1uLL);
      }
      else
      {
        *uint64_t v154 = 10;
        ++*((void *)v153 + 4);
      }
      LOBYTE(v70) = v180;
      unint64_t v71 = v186;
      int v72 = v190;
LABEL_265:
      *(void *)(a1 + 16) = v71 & 0x1FFFFFFFFFFFFFF8;
      *(_DWORD *)(a1 + 32) = 0;
      if ((v70 & 0x3F) != 0
        && (sub_1CC1CA844(a1, v70 & 0x3F, (uint64_t)&v209), (v209.__r_.__value_.__s.__data_[8] & 1) != 0))
      {
        std::string::size_type v159 = v209.__r_.__value_.__r.__words[0];
        *int v72 = v209.__r_.__value_.__r.__words[0];
        if (v159) {
          goto LABEL_328;
        }
      }
      else
      {
        *int v72 = 0;
      }
      LODWORD(v6) = v194;
      llvm::BitstreamCursor::skipRecord((llvm::BitstreamCursor *)a1, v194, (uint64_t)&v209);
      if (v209.__r_.__value_.__s.__data_[8])
      {
        *unint64_t v190 = v209.__r_.__value_.__r.__words[0];
        goto LABEL_328;
      }
      a6 = (void **)v190;
    }
  }
  v17[6] = (uint64_t *)((char *)&v17[6][*(void *)(a1 + 16)] - *(unsigned int *)(a1 + 32) - v15);
  if (v189)
  {
    if (v204 >= 0) {
      uint64_t v160 = (const char *)&__b;
    }
    else {
      uint64_t v160 = (const char *)__b;
    }
    if (v204 >= 0) {
      size_t v161 = HIBYTE(v204) & 0x7F;
    }
    else {
      size_t v161 = v203;
    }
    uint64_t v162 = llvm::raw_ostream::write(*(llvm::raw_ostream **)v47, v160, v161);
    size_t v163 = (_WORD *)*((void *)v162 + 4);
    if (*((void *)v162 + 3) - (void)v163 > 1uLL)
    {
      *size_t v163 = 12092;
      *((void *)v162 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v162, "</", 2uLL);
    }
    v164 = *(llvm::raw_ostream **)v47;
    if (v176)
    {
      if (__s)
      {
        size_t v165 = strlen(__s);
        unint64_t v166 = (void *)*((void *)v164 + 4);
        if (v165 <= *((void *)v164 + 3) - (void)v166)
        {
          if (v165)
          {
            memcpy(v166, __s, v165);
            *((void *)v164 + 4) += v165;
          }
        }
        else
        {
          llvm::raw_ostream::write(v164, __s, v165);
        }
      }
    }
    else
    {
      uint64_t v170 = *((void *)v164 + 4);
      if ((unint64_t)(*((void *)v164 + 3) - v170) > 0xB)
      {
        *(_DWORD *)(v170 + 8) = 1801678700;
        *(void *)uint64_t v170 = *(void *)"UnknownBlock";
        *((void *)v164 + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)v47, "UnknownBlock", 0xCuLL);
      }
      sub_1CD098D14(v164, a2, 0, 0, 0);
    }
    BOOL v171 = (_WORD *)*((void *)v164 + 4);
    if (*((void *)v164 + 3) - (void)v171 > 1uLL)
    {
      *BOOL v171 = 2622;
      *((void *)v164 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v164, ">\n", 2uLL);
    }
  }
  *a6 = 0;
LABEL_328:
  if (v214 != v216) {
    free(v214);
  }
LABEL_330:
  if (SHIBYTE(v204) < 0) {
    operator delete(__b);
  }
}

void llvm::BitcodeAnalyzer::printStats(uint64_t a1, llvm::raw_ostream *this, char a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = (void *)*((void *)this + 4);
  uint64_t v127 = (uint64_t *)((char *)this + 32);
  if (*((void *)this + 3) - (void)v7 > 7uLL)
  {
    void *v7 = 0x207972616D6D7553;
    int v8 = (unsigned char *)(*v127 + 8);
    *uint64_t v127 = (uint64_t)v8;
  }
  else
  {
    llvm::raw_ostream::write(this, "Summary ", 8uLL);
    int v8 = (unsigned char *)*((void *)this + 4);
  }
  unint64_t v9 = 8 * v6;
  if (*(unsigned char *)(a4 + 16))
  {
    if (*((void *)this + 3) - (void)v8 > 2uLL)
    {
      v8[2] = 32;
      *(_WORD *)int v8 = 26223;
      unint64_t v10 = (_WORD *)(*v127 + 3);
      *uint64_t v127 = (uint64_t)v10;
    }
    else
    {
      llvm::raw_ostream::write(this, "of ", 3uLL);
      unint64_t v10 = (_WORD *)*((void *)this + 4);
    }
    uint64_t v11 = *(const char **)a4;
    if (v11)
    {
      size_t v12 = strlen(v11);
      size_t v13 = v12;
      if (v12 <= *((void *)this + 3) - (void)v10)
      {
        if (v12)
        {
          memcpy(v10, v11, v12);
          unint64_t v10 = (_WORD *)(*v127 + v13);
          *uint64_t v127 = (uint64_t)v10;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, v11, v12);
        unint64_t v10 = (_WORD *)*((void *)this + 4);
      }
    }
    if (*((void *)this + 3) - (void)v10 > 1uLL)
    {
      *unint64_t v10 = 2618;
      int v8 = (unsigned char *)(*v127 + 2);
      *uint64_t v127 = (uint64_t)v8;
    }
    else
    {
      llvm::raw_ostream::write(this, ":\n", 2uLL);
      int v8 = (unsigned char *)*((void *)this + 4);
    }
  }
  if (*((void *)this + 3) - (void)v8 > 0x14uLL)
  {
    qmemcpy(v8, "         Total size: ", 21);
    *v127 += 21;
  }
  else
  {
    llvm::raw_ostream::write(this, "         Total size: ", 0x15uLL);
  }
  double v14 = (double)v9;
  uint64_t v129 = &unk_1F2608868;
  uint64_t v130 = "%lub/%.2fB/%luW";
  *(void *)&double v131 = 8 * v6;
  double v132 = (double)v9 * 0.125;
  unint64_t v133 = v9 >> 5;
  llvm::raw_ostream::operator<<(this, (uint64_t)&v129);
  unint64_t v15 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v15)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
    char v16 = (void *)*((void *)this + 4);
  }
  else
  {
    *unint64_t v15 = 10;
    char v16 = (void *)(*v127 + 1);
    *uint64_t v127 = (uint64_t)v16;
  }
  if (*((void *)this + 3) - (void)v16 > 0x14uLL)
  {
    qmemcpy(v16, "        Stream type: ", 21);
    *v127 += 21;
  }
  else
  {
    llvm::raw_ostream::write(this, "        Stream type: ", 0x15uLL);
  }
  switch(*(_DWORD *)(a1 + 368))
  {
    case 0:
      uint64_t v17 = (uint64_t *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v17 <= 7uLL)
      {
        unsigned int v18 = "unknown\n";
        goto LABEL_22;
      }
      uint64_t v123 = 0xA6E776F6E6B6E75;
      goto LABEL_238;
    case 1:
      uint64_t v17 = (uint64_t *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v17 <= 7uLL)
      {
        unsigned int v18 = "LLVM IR\n";
LABEL_22:
        uint64_t v19 = this;
        size_t v20 = 8;
        goto LABEL_29;
      }
      uint64_t v123 = 0xA5249204D564C4CLL;
LABEL_238:
      *uint64_t v17 = v123;
      unsigned int v124 = v127;
      uint64_t v125 = *v127 + 8;
      goto LABEL_242;
    case 2:
      uint64_t v21 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v21 <= 0x14uLL)
      {
        unsigned int v18 = "Clang Serialized AST\n";
        uint64_t v19 = this;
        size_t v20 = 21;
        goto LABEL_29;
      }
      qmemcpy(v21, "Clang Serialized AST\n", 21);
      unsigned int v124 = v127;
      uint64_t v125 = *v127 + 21;
      goto LABEL_242;
    case 3:
      uint64_t v22 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v22 <= 0x1CuLL)
      {
        unsigned int v18 = "Clang Serialized Diagnostics\n";
        uint64_t v19 = this;
        size_t v20 = 29;
        goto LABEL_29;
      }
      qmemcpy(v22, "Clang Serialized Diagnostics\n", 29);
      unsigned int v124 = v127;
      uint64_t v125 = *v127 + 29;
      goto LABEL_242;
    case 4:
      size_t v23 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v23 > 0xCuLL)
      {
        qmemcpy(v23, "LLVM Remarks\n", 13);
        unsigned int v124 = v127;
        uint64_t v125 = *v127 + 13;
LABEL_242:
        *unsigned int v124 = v125;
      }
      else
      {
        unsigned int v18 = "LLVM Remarks\n";
        uint64_t v19 = this;
        size_t v20 = 13;
LABEL_29:
        llvm::raw_ostream::write(v19, v18, v20);
      }
LABEL_30:
      int v24 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v24 > 0x14uLL)
      {
        qmemcpy(v24, "  # Toplevel Blocks: ", 21);
        *v127 += 21;
      }
      else
      {
        llvm::raw_ostream::write(this, "  # Toplevel Blocks: ", 0x15uLL);
      }
      sub_1CD098D14(this, *(unsigned int *)(a1 + 728), 0, 0, 0);
      uint64_t v25 = (unsigned char *)*((void *)this + 4);
      if (*((unsigned char **)this + 3) == v25)
      {
        llvm::raw_ostream::write(this, "\n", 1uLL);
        unsigned int v26 = (unsigned char *)*((void *)this + 4);
      }
      else
      {
        *uint64_t v25 = 10;
        unsigned int v26 = (unsigned char *)(*v127 + 1);
        *uint64_t v127 = (uint64_t)v26;
      }
      if (*((unsigned char **)this + 3) == v26)
      {
        llvm::raw_ostream::write(this, "\n", 1uLL);
        uint64_t v27 = *((void *)this + 4);
      }
      else
      {
        *unsigned int v26 = 10;
        uint64_t v27 = *v127 + 1;
        *uint64_t v127 = v27;
      }
      if ((unint64_t)(*((void *)this + 3) - v27) > 0x12)
      {
        *(_DWORD *)(v27 + 15) = 171604338;
        *(_OWORD *)uint64_t v27 = *(_OWORD *)"Per-block Summary:\n";
        *v127 += 19;
      }
      else
      {
        llvm::raw_ostream::write(this, "Per-block Summary:\n", 0x13uLL);
      }
      uint64_t v28 = *(void **)(a1 + 736);
      if (v28 == (void *)(a1 + 744)) {
        return;
      }
      break;
    default:
      goto LABEL_30;
  }
  do
  {
    uint64_t v29 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v29) > 0xB)
    {
      *(_DWORD *)(v29 + 8) = 589317193;
      *(void *)uint64_t v29 = *(void *)"  Block ID #";
      *v127 += 12;
    }
    else
    {
      llvm::raw_ostream::write(this, "  Block ID #", 0xCuLL);
    }
    sub_1CD098D14(this, *((unsigned int *)v28 + 8), 0, 0, 0);
    size_t v30 = sub_1CC1C9668(*((_DWORD *)v28 + 8), *(void *)(a1 + 344), *(void *)(a1 + 352), *(_DWORD *)(a1 + 368));
    int v31 = (_WORD *)*((void *)this + 4);
    if (v32)
    {
      unint64_t v33 = v30;
      if (*((void *)this + 3) - (void)v31 > 1uLL)
      {
        *int v31 = 10272;
        int v34 = (unsigned char *)(*v127 + 2);
        *uint64_t v127 = (uint64_t)v34;
        if (v30)
        {
LABEL_44:
          size_t v35 = strlen(v33);
          size_t v36 = v35;
          if (v35 <= *((void *)this + 3) - (void)v34)
          {
            if (v35)
            {
              memcpy(v34, v33, v35);
              int v34 = (unsigned char *)(*v127 + v36);
              *uint64_t v127 = (uint64_t)v34;
            }
          }
          else
          {
            llvm::raw_ostream::write(this, v33, v35);
            int v34 = (unsigned char *)*((void *)this + 4);
          }
        }
      }
      else
      {
        llvm::raw_ostream::write(this, " (", 2uLL);
        int v34 = (unsigned char *)*((void *)this + 4);
        if (v33) {
          goto LABEL_44;
        }
      }
      if (*((unsigned char **)this + 3) == v34)
      {
        llvm::raw_ostream::write(this, ")", 1uLL);
        int v31 = (_WORD *)*((void *)this + 4);
      }
      else
      {
        *int v34 = 41;
        int v31 = (_WORD *)(*v127 + 1);
        *uint64_t v127 = (uint64_t)v31;
      }
    }
    if (*((void *)this + 3) - (void)v31 > 1uLL)
    {
      *int v31 = 2618;
      size_t v37 = (void *)(*v127 + 2);
      *uint64_t v127 = (uint64_t)v37;
    }
    else
    {
      llvm::raw_ostream::write(this, ":\n", 2uLL);
      size_t v37 = (void *)*((void *)this + 4);
    }
    if (*((void *)this + 3) - (void)v37 > 0x14uLL)
    {
      qmemcpy(v37, "      Num Instances: ", 21);
      *v127 += 21;
    }
    else
    {
      llvm::raw_ostream::write(this, "      Num Instances: ", 0x15uLL);
    }
    sub_1CD098D14(this, *((unsigned int *)v28 + 10), 0, 0, 0);
    int v38 = (unsigned char *)*((void *)this + 4);
    if (*((unsigned char **)this + 3) == v38)
    {
      llvm::raw_ostream::write(this, "\n", 1uLL);
      uint64_t v39 = (void *)*((void *)this + 4);
    }
    else
    {
      *int v38 = 10;
      uint64_t v39 = (void *)(*v127 + 1);
      *uint64_t v127 = (uint64_t)v39;
    }
    if (*((void *)this + 3) - (void)v39 > 0x14uLL)
    {
      qmemcpy(v39, "         Total Size: ", 21);
      *v127 += 21;
    }
    else
    {
      llvm::raw_ostream::write(this, "         Total Size: ", 0x15uLL);
    }
    unint64_t v40 = v28[6];
    uint64_t v129 = &unk_1F2608868;
    uint64_t v130 = "%lub/%.2fB/%luW";
    double v131 = *(double *)&v40;
    double v132 = (double)v40 * 0.125;
    unint64_t v133 = v40 >> 5;
    llvm::raw_ostream::operator<<(this, (uint64_t)&v129);
    char v41 = (unsigned char *)*((void *)this + 4);
    if (*((unsigned char **)this + 3) == v41)
    {
      llvm::raw_ostream::write(this, "\n", 1uLL);
      size_t v42 = (void *)*((void *)this + 4);
    }
    else
    {
      *char v41 = 10;
      size_t v42 = (void *)(*v127 + 1);
      *uint64_t v127 = (uint64_t)v42;
    }
    unint64_t v43 = v28[6];
    if (*((void *)this + 3) - (void)v42 > 0x14uLL)
    {
      qmemcpy(v42, "    Percent of file: ", 21);
      *v127 += 21;
    }
    else
    {
      llvm::raw_ostream::write(this, "    Percent of file: ", 0x15uLL);
    }
    uint64_t v129 = &unk_1F25F6490;
    uint64_t v130 = "%2.4f%%";
    double v131 = (double)v43 * 100.0 / v14;
    llvm::raw_ostream::operator<<(this, (uint64_t)&v129);
    unsigned int v45 = (unsigned char *)*((void *)this + 4);
    if (*((unsigned char **)this + 3) == v45)
    {
      llvm::raw_ostream::write(this, "\n", 1uLL);
      int v46 = (void *)*((void *)this + 4);
    }
    else
    {
      *unsigned int v45 = 10;
      int v46 = (void *)(*v127 + 1);
      *uint64_t v127 = (uint64_t)v46;
    }
    unint64_t v47 = *((void *)this + 3) - (void)v46;
    if (*((_DWORD *)v28 + 10) < 2u)
    {
      if (v47 > 0x14)
      {
        qmemcpy(v46, "      Num SubBlocks: ", 21);
        *v127 += 21;
      }
      else
      {
        llvm::raw_ostream::write(this, "      Num SubBlocks: ", 0x15uLL);
      }
      sub_1CD098D14(this, *((unsigned int *)v28 + 14), 0, 0, 0);
      uint64_t v64 = (unsigned char *)*((void *)this + 4);
      if (*((unsigned char **)this + 3) == v64)
      {
        llvm::raw_ostream::write(this, "\n", 1uLL);
        BOOL v65 = (void *)*((void *)this + 4);
      }
      else
      {
        unsigned char *v64 = 10;
        BOOL v65 = (void *)(*v127 + 1);
        *uint64_t v127 = (uint64_t)v65;
      }
      if (*((void *)this + 3) - (void)v65 > 0x14uLL)
      {
        qmemcpy(v65, "        Num Abbrevs: ", 21);
        *v127 += 21;
      }
      else
      {
        llvm::raw_ostream::write(this, "        Num Abbrevs: ", 0x15uLL);
      }
      sub_1CD098D14(this, *((unsigned int *)v28 + 15), 0, 0, 0);
      unint64_t v66 = (unsigned char *)*((void *)this + 4);
      if (*((unsigned char **)this + 3) == v66)
      {
        llvm::raw_ostream::write(this, "\n", 1uLL);
        unint64_t v67 = (void *)*((void *)this + 4);
      }
      else
      {
        *unint64_t v66 = 10;
        unint64_t v67 = (void *)(*v127 + 1);
        *uint64_t v127 = (uint64_t)v67;
      }
      if (*((void *)this + 3) - (void)v67 > 0x14uLL)
      {
        qmemcpy(v67, "        Num Records: ", 21);
        *v127 += 21;
      }
      else
      {
        llvm::raw_ostream::write(this, "        Num Records: ", 0x15uLL);
      }
      sub_1CD098D14(this, *((unsigned int *)v28 + 16), 0, 0, 0);
    }
    else
    {
      if (v47 > 0x14)
      {
        qmemcpy(v46, "       Average Size: ", 21);
        *v127 += 21;
      }
      else
      {
        llvm::raw_ostream::write(this, "       Average Size: ", 0x15uLL);
      }
      LODWORD(v44) = *((_DWORD *)v28 + 10);
      double v48 = (double)(unint64_t)v28[6] / (double)v44;
      uint64_t v129 = &unk_1F2608888;
      uint64_t v130 = "%.2f/%.2fB/%luW";
      double v131 = v48;
      double v132 = v48 * 0.125;
      unint64_t v133 = (unint64_t)(v48 * 0.03125);
      llvm::raw_ostream::operator<<(this, (uint64_t)&v129);
      unint64_t v49 = (unsigned char *)*((void *)this + 4);
      if (*((unsigned char **)this + 3) == v49)
      {
        llvm::raw_ostream::write(this, "\n", 1uLL);
        std::string::size_type v50 = (void *)*((void *)this + 4);
      }
      else
      {
        *unint64_t v49 = 10;
        std::string::size_type v50 = (void *)(*v127 + 1);
        *uint64_t v127 = (uint64_t)v50;
      }
      if (*((void *)this + 3) - (void)v50 > 0x14uLL)
      {
        qmemcpy(v50, "  Tot/Avg SubBlocks: ", 21);
        *v127 += 21;
      }
      else
      {
        llvm::raw_ostream::write(this, "  Tot/Avg SubBlocks: ", 0x15uLL);
      }
      sub_1CD098D14(this, *((unsigned int *)v28 + 14), 0, 0, 0);
      long long v53 = (unsigned char *)*((void *)this + 4);
      if (*((unsigned char **)this + 3) == v53)
      {
        llvm::raw_ostream::write(this, "/", 1uLL);
      }
      else
      {
        *long long v53 = 47;
        ++*v127;
      }
      LODWORD(v51) = *((_DWORD *)v28 + 14);
      LODWORD(v52) = *((_DWORD *)v28 + 10);
      llvm::write_double(this, 0, 0, 0, (double)v51 / (double)v52);
      uint64_t v54 = (unsigned char *)*((void *)this + 4);
      if (*((unsigned char **)this + 3) == v54)
      {
        llvm::raw_ostream::write(this, "\n", 1uLL);
        uint64_t v55 = (void *)*((void *)this + 4);
      }
      else
      {
        *uint64_t v54 = 10;
        uint64_t v55 = (void *)(*v127 + 1);
        *uint64_t v127 = (uint64_t)v55;
      }
      if (*((void *)this + 3) - (void)v55 > 0x14uLL)
      {
        qmemcpy(v55, "    Tot/Avg Abbrevs: ", 21);
        *v127 += 21;
      }
      else
      {
        llvm::raw_ostream::write(this, "    Tot/Avg Abbrevs: ", 0x15uLL);
      }
      sub_1CD098D14(this, *((unsigned int *)v28 + 15), 0, 0, 0);
      uint64_t v58 = (unsigned char *)*((void *)this + 4);
      if (*((unsigned char **)this + 3) == v58)
      {
        llvm::raw_ostream::write(this, "/", 1uLL);
      }
      else
      {
        *uint64_t v58 = 47;
        ++*v127;
      }
      LODWORD(v56) = *((_DWORD *)v28 + 15);
      LODWORD(v57) = *((_DWORD *)v28 + 10);
      llvm::write_double(this, 0, 0, 0, (double)v56 / (double)v57);
      uint64_t v59 = (unsigned char *)*((void *)this + 4);
      if (*((unsigned char **)this + 3) == v59)
      {
        llvm::raw_ostream::write(this, "\n", 1uLL);
        unint64_t v60 = (void *)*((void *)this + 4);
      }
      else
      {
        unsigned char *v59 = 10;
        unint64_t v60 = (void *)(*v127 + 1);
        *uint64_t v127 = (uint64_t)v60;
      }
      if (*((void *)this + 3) - (void)v60 > 0x14uLL)
      {
        qmemcpy(v60, "    Tot/Avg Records: ", 21);
        *v127 += 21;
      }
      else
      {
        llvm::raw_ostream::write(this, "    Tot/Avg Records: ", 0x15uLL);
      }
      sub_1CD098D14(this, *((unsigned int *)v28 + 16), 0, 0, 0);
      uint64_t v63 = (unsigned char *)*((void *)this + 4);
      if (*((unsigned char **)this + 3) == v63)
      {
        llvm::raw_ostream::write(this, "/", 1uLL);
      }
      else
      {
        *uint64_t v63 = 47;
        ++*v127;
      }
      LODWORD(v61) = *((_DWORD *)v28 + 16);
      LODWORD(v62) = *((_DWORD *)v28 + 10);
      llvm::write_double(this, 0, 0, 0, (double)v61 / (double)v62);
    }
    unint64_t v68 = (unsigned char *)*((void *)this + 4);
    if (*((unsigned char **)this + 3) == v68)
    {
      llvm::raw_ostream::write(this, "\n", 1uLL);
    }
    else
    {
      *unint64_t v68 = 10;
      ++*v127;
    }
    unsigned int v69 = *((_DWORD *)v28 + 16);
    unint64_t v70 = (unsigned char *)*v127;
    if (v69)
    {
      LODWORD(v43) = *((_DWORD *)v28 + 17);
      if (*((void *)this + 3) - (void)v70 > 0x14uLL)
      {
        qmemcpy(v70, "    Percent Abbrevs: ", 21);
        *v127 += 21;
      }
      else
      {
        llvm::raw_ostream::write(this, "    Percent Abbrevs: ", 0x15uLL);
      }
      uint64_t v129 = &unk_1F25F6490;
      uint64_t v130 = "%2.4f%%";
      double v131 = (double)v43 * 100.0 / (double)v69;
      llvm::raw_ostream::operator<<(this, (uint64_t)&v129);
      unint64_t v71 = (unsigned char *)*((void *)this + 4);
      if (*((unsigned char **)this + 3) == v71)
      {
        llvm::raw_ostream::write(this, "\n", 1uLL);
        unint64_t v70 = (unsigned char *)*((void *)this + 4);
      }
      else
      {
        *unint64_t v71 = 10;
        unint64_t v70 = (unsigned char *)(*v127 + 1);
        *uint64_t v127 = (uint64_t)v70;
      }
    }
    if (*((unsigned char **)this + 3) == v70)
    {
      llvm::raw_ostream::write(this, "\n", 1uLL);
    }
    else
    {
      *unint64_t v70 = 10;
      ++*v127;
    }
    if (a3)
    {
      uint64_t v72 = v28[9];
      uint64_t v73 = v28[10];
      if (v72 != v73)
      {
        unint64_t v74 = v73 - v72;
        if ((v74 & 0xFFFFFFFF0) != 0)
        {
          uint64_t v75 = 0;
          uint64_t v76 = 0;
          long long v77 = 0;
          char v78 = 0;
          uint64_t v79 = (v74 >> 4);
          while (1)
          {
            uint64_t v80 = *(unsigned int *)(v28[9] + 16 * v75);
            if (v80)
            {
              uint64_t v81 = v80 | (v75 << 32);
              if (v78 >= v76)
              {
                uint64_t v83 = ((char *)v78 - (char *)v77) >> 3;
                unint64_t v84 = v83 + 1;
                if ((unint64_t)(v83 + 1) >> 61) {
                  abort();
                }
                if (v76 - v77 > v84) {
                  unint64_t v84 = v76 - v77;
                }
                if ((unint64_t)((char *)v76 - (char *)v77) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v85 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v85 = v84;
                }
                if (v85)
                {
                  if (v85 >> 61) {
                    sub_1CB833614();
                  }
                  size_t v86 = (char *)operator new(8 * v85);
                }
                else
                {
                  size_t v86 = 0;
                }
                uint64_t v87 = (unsigned int *)&v86[8 * v83];
                *(void *)uint64_t v87 = v81;
                std::string::size_type v82 = v87 + 2;
                while (v78 != v77)
                {
                  uint64_t v88 = *((void *)v78 - 1);
                  v78 -= 2;
                  *((void *)v87 - 1) = v88;
                  v87 -= 2;
                }
                uint64_t v76 = (unsigned int *)&v86[8 * v85];
                if (v77) {
                  operator delete(v77);
                }
                long long v77 = v87;
                goto LABEL_128;
              }
              *(void *)char v78 = v81;
              v78 += 2;
            }
            std::string::size_type v82 = v78;
LABEL_128:
            ++v75;
            char v78 = v82;
            if (v75 == v79) {
              goto LABEL_131;
            }
          }
        }
        std::string::size_type v82 = 0;
        long long v77 = 0;
LABEL_131:
        if ((char *)v82 - (char *)v77 < 1)
        {
LABEL_135:
          sub_1CC1CB548(v77, v82, ((char *)v82 - (char *)v77) >> 3, 0, 0);
        }
        else
        {
          unint64_t v89 = ((char *)v82 - (char *)v77) >> 3;
          while (1)
          {
            uint64_t v90 = (unsigned int *)operator new(8 * v89, MEMORY[0x1E4FBA2D0]);
            if (v90) {
              break;
            }
            BOOL v91 = v89 > 1;
            v89 >>= 1;
            if (!v91) {
              goto LABEL_135;
            }
          }
          std::string::size_type v92 = v90;
          sub_1CC1CB548(v77, v82, ((char *)v82 - (char *)v77) >> 3, v90, v89);
          operator delete(v92);
        }
        if (v77 != v82)
        {
          uint64_t v93 = v82 - 2;
          if (v77 < v82 - 2)
          {
            uint64_t v94 = v77;
            do
            {
              unsigned int v95 = *v94;
              *uint64_t v94 = *v93;
              *uint64_t v93 = v95;
              unsigned int v96 = v94[1];
              v94[1] = v93[1];
              v93[1] = v96;
              v94 += 2;
              v93 -= 2;
            }
            while (v94 < v93);
          }
        }
        uint64_t v97 = *((void *)this + 4);
        if ((unint64_t)(*((void *)this + 3) - v97) > 0x12)
        {
          *(_DWORD *)(v97 + 15) = 171601249;
          *(_OWORD *)uint64_t v97 = *(_OWORD *)"\tRecord Histogram:\n";
          uint64_t v98 = (void *)(*v127 + 19);
          *uint64_t v127 = (uint64_t)v98;
        }
        else
        {
          llvm::raw_ostream::write(this, "\tRecord Histogram:\n", 0x13uLL);
          uint64_t v98 = (void *)*((void *)this + 4);
        }
        if (*((void *)this + 3) - (void)v98 > 0x32uLL)
        {
          qmemcpy(v98, "\t\t  Count    # Bits     b/Rec   % Abv  Record Kind\n", 51);
          *v127 += 51;
        }
        else
        {
          llvm::raw_ostream::write(this, "\t\t  Count    # Bits     b/Rec   % Abv  Record Kind\n", 0x33uLL);
        }
        if (v77 != v82)
        {
          for (uint64_t i = v77; i != v82; i += 2)
          {
            uint64_t v100 = i[1];
            uint64_t v101 = v28[9];
            uint64_t v102 = v101 + 16 * v100;
            double v103 = *(double *)(v102 + 8);
            uint64_t v129 = &unk_1F26088A8;
            unsigned int v104 = *(_DWORD *)v102;
            uint64_t v130 = "\t\t%7d %9lu";
            LODWORD(v131) = v104;
            double v132 = v103;
            llvm::raw_ostream::operator<<(this, (uint64_t)&v129);
            if (*(_DWORD *)v102 < 2u)
            {
              unint64_t v107 = (void *)*((void *)this + 4);
              if (*((void *)this + 3) - (void)v107 > 9uLL)
              {
                memset(v107, 32, 10);
                *v127 += 10;
              }
              else
              {
                llvm::raw_ostream::write(this, "          ", 0xAuLL);
              }
            }
            else
            {
              double v106 = (double)*(unint64_t *)(v102 + 8) / (double)*(unsigned int *)v102;
              uint64_t v129 = &unk_1F25F6490;
              uint64_t v130 = " %9.1f";
              double v131 = v106;
              llvm::raw_ostream::operator<<(this, (uint64_t)&v129);
            }
            unsigned int v108 = *(_DWORD *)(v101 + 16 * v100 + 4);
            if (v108)
            {
              LODWORD(v105) = *(_DWORD *)v102;
              uint64_t v129 = &unk_1F25F6490;
              uint64_t v130 = " %7.2f";
              double v131 = (double)v108 / (double)v105 * 100.0;
              llvm::raw_ostream::operator<<(this, (uint64_t)&v129);
            }
            else
            {
              size_t v109 = (void *)*((void *)this + 4);
              if (*((void *)this + 3) - (void)v109 > 7uLL)
              {
                *size_t v109 = 0x2020202020202020;
                *v127 += 8;
              }
              else
              {
                llvm::raw_ostream::write(this, "        ", 8uLL);
              }
            }
            uint64_t v110 = (_WORD *)*((void *)this + 4);
            if (*((void *)this + 3) - (void)v110 > 1uLL)
            {
              *uint64_t v110 = 8224;
              *v127 += 2;
            }
            else
            {
              llvm::raw_ostream::write(this, "  ", 2uLL);
            }
            uint64_t v111 = sub_1CC1C9734(i[1], *((_DWORD *)v28 + 8), *(void *)(a1 + 344), *(void *)(a1 + 352), *(_DWORD *)(a1 + 368));
            if (v112)
            {
              uint64_t v113 = v111;
              unint64_t v114 = (unsigned char *)*v127;
              if (v111)
              {
                size_t v115 = strlen(v111);
                size_t v116 = v115;
                if (v115 <= *((void *)this + 3) - (void)v114)
                {
                  if (v115)
                  {
                    memcpy(v114, v113, v115);
                    unint64_t v114 = (unsigned char *)(*v127 + v116);
                    *uint64_t v127 = (uint64_t)v114;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(this, v113, v115);
                  unint64_t v114 = (unsigned char *)*((void *)this + 4);
                }
              }
              if (*((unsigned char **)this + 3) != v114)
              {
                *unint64_t v114 = 10;
LABEL_176:
                ++*v127;
                continue;
              }
            }
            else
            {
              uint64_t v117 = *((void *)this + 4);
              if ((unint64_t)(*((void *)this + 3) - v117) > 0xA)
              {
                *(_DWORD *)(v117 + 7) = 1701080899;
                *(void *)uint64_t v117 = *(void *)"UnknownCode";
                *v127 += 11;
              }
              else
              {
                llvm::raw_ostream::write(this, "UnknownCode", 0xBuLL);
              }
              sub_1CD098D14(this, i[1], 0, 0, 0);
              unsigned int v118 = (unsigned char *)*((void *)this + 4);
              if (*((unsigned char **)this + 3) != v118)
              {
                *unsigned int v118 = 10;
                goto LABEL_176;
              }
            }
            llvm::raw_ostream::write(this, "\n", 1uLL);
          }
        }
        uint64_t v119 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v119)
        {
          llvm::raw_ostream::write(this, "\n", 1uLL);
          if (!v77) {
            goto LABEL_180;
          }
LABEL_179:
          operator delete(v77);
          goto LABEL_180;
        }
        *uint64_t v119 = 10;
        ++*v127;
        if (v77) {
          goto LABEL_179;
        }
      }
    }
LABEL_180:
    unint64_t v120 = (void *)v28[1];
    if (v120)
    {
      do
      {
        uint64_t v121 = v120;
        unint64_t v120 = (void *)*v120;
      }
      while (v120);
    }
    else
    {
      do
      {
        uint64_t v121 = (void *)v28[2];
        BOOL v122 = *v121 == (void)v28;
        uint64_t v28 = v121;
      }
      while (!v122);
    }
    uint64_t v28 = v121;
  }
  while (v121 != (void *)(a1 + 744));
}

char *sub_1CC1C9668(unsigned int a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a1 <= 7)
  {
    int v4 = "BLOCKINFO_BLOCK";
    if (a1) {
      return 0;
    }
    return (char *)v4;
  }
  if (a2 != a3 && *(_DWORD *)(a3 - 80) == a1)
  {
    a2 = a3 - 80;
    goto LABEL_8;
  }
  uint64_t v5 = -858993459 * ((unint64_t)(a3 - a2) >> 4);
  if (v5)
  {
    while (*(_DWORD *)a2 != a1)
    {
      a2 += 80;
      if (!--v5) {
        goto LABEL_17;
      }
    }
LABEL_8:
    int v4 = (const char *)(a2 + 32);
    if (*(char *)(a2 + 55) < 0)
    {
      if (*(void *)(a2 + 40)) {
        return *(char **)v4;
      }
    }
    else if (*(unsigned char *)(a2 + 55))
    {
      return (char *)v4;
    }
  }
LABEL_17:
  if (a4 == 1 && a1 - 8 <= 0x11) {
    return off_1E682F420[a1 - 8];
  }
  else {
    return 0;
  }
}

const char *sub_1CC1C9734(int a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a2 <= 7)
  {
    uint64_t v5 = "SETRECORDNAME";
    uint64_t v6 = "BLOCKNAME";
    char v7 = "SETBID";
    if (a1 != 1) {
      char v7 = 0;
    }
    if (a1 != 2) {
      uint64_t v6 = v7;
    }
    if (a1 != 3) {
      uint64_t v5 = v6;
    }
    if (a2) {
      return 0;
    }
    else {
      return v5;
    }
  }
  if (a3 != a4 && *(_DWORD *)(a4 - 80) == a2)
  {
    a3 = a4 - 80;
LABEL_14:
    for (uint64_t i = *(void *)(a3 + 56); i != *(void *)(a3 + 64); i += 32)
    {
      if (*(_DWORD *)i == a1)
      {
        uint64_t result = (const char *)(i + 8);
        if (*(char *)(i + 31) < 0) {
          return *(const char **)result;
        }
        return result;
      }
    }
    goto LABEL_21;
  }
  uint64_t v10 = -858993459 * ((unint64_t)(a4 - a3) >> 4);
  if (v10)
  {
    while (*(_DWORD *)a3 != a2)
    {
      a3 += 80;
      if (!--v10) {
        goto LABEL_21;
      }
    }
    goto LABEL_14;
  }
LABEL_21:
  if (a5 != 1) {
    return 0;
  }
  switch(a2)
  {
    case 8u:
      int v14 = a1 - 1;
      uint64_t result = "VERSION";
      switch(v14)
      {
        case 0:
          return result;
        case 1:
          uint64_t result = "TRIPLE";
          break;
        case 2:
          uint64_t result = "DATALAYOUT";
          break;
        case 3:
          uint64_t result = "ASM";
          break;
        case 4:
          uint64_t result = "SECTIONNAME";
          break;
        case 5:
          uint64_t result = "DEPLIB";
          break;
        case 6:
          uint64_t result = "GLOBALVAR";
          break;
        case 7:
          uint64_t result = "FUNCTION";
          break;
        case 10:
          uint64_t result = "GCNAME";
          break;
        case 11:
          uint64_t result = "COMDAT";
          break;
        case 12:
          uint64_t result = "VSTOFFSET";
          break;
        case 13:
          uint64_t result = "ALIAS";
          break;
        case 14:
          uint64_t result = "METADATA_VALUES_UNUSED";
          break;
        case 15:
          uint64_t result = "SOURCE_FILENAME";
          break;
        case 16:
          uint64_t result = "HASH";
          break;
        default:
          return 0;
      }
      return result;
    case 9u:
      if ((a1 - 1) >= 2) {
        return 0;
      }
      else {
        return "ENTRY";
      }
    case 0xAu:
      BOOL v12 = a1 == 3;
      size_t v13 = "ENTRY";
      goto LABEL_57;
    case 0xBu:
      int v15 = a1 - 1;
      uint64_t result = "SETTYPE";
      switch(v15)
      {
        case 0:
          return result;
        case 1:
          uint64_t result = "NULL";
          break;
        case 2:
          uint64_t result = "UNDEF";
          break;
        case 3:
          goto LABEL_65;
        case 4:
          uint64_t result = "WIDE_INTEGER";
          break;
        case 5:
          goto LABEL_64;
        case 6:
          uint64_t result = "AGGREGATE";
          break;
        case 7:
          uint64_t result = "STRING";
          break;
        case 8:
          uint64_t result = "CSTRING";
          break;
        case 9:
          uint64_t result = "CE_BINOP";
          break;
        case 10:
          uint64_t result = "CE_CAST";
          break;
        case 11:
          uint64_t result = "CE_GEP";
          break;
        case 12:
          uint64_t result = "CE_SELECT";
          break;
        case 13:
          uint64_t result = "CE_EXTRACTELT";
          break;
        case 14:
          uint64_t result = "CE_INSERTELT";
          break;
        case 15:
          uint64_t result = "CE_SHUFFLEVEC";
          break;
        case 16:
          uint64_t result = "CE_CMP";
          break;
        case 18:
          uint64_t result = "CE_SHUFVEC_EX";
          break;
        case 19:
          uint64_t result = "CE_INBOUNDS_GEP";
          break;
        case 20:
          uint64_t result = "CST_CODE_BLOCKADDRESS";
          break;
        case 21:
          uint64_t result = "DATA";
          break;
        case 24:
          uint64_t result = "CE_UNOP";
          break;
        case 26:
          uint64_t result = "DSO_LOCAL_EQUIVALENT";
          break;
        case 28:
          uint64_t result = "NO_CFI_VALUE";
          break;
        case 29:
          uint64_t result = "INLINEASM";
          break;
        default:
          goto LABEL_61;
      }
      return result;
    case 0xCu:
      int v16 = a1 - 1;
      uint64_t result = "DECLAREBLOCKS";
      switch(v16)
      {
        case 0:
          return result;
        case 1:
          uint64_t result = "INST_BINOP";
          break;
        case 2:
          uint64_t result = "INST_CAST";
          break;
        case 3:
          uint64_t result = "INST_GEP_OLD";
          break;
        case 4:
          uint64_t result = "INST_SELECT";
          break;
        case 5:
          uint64_t result = "INST_EXTRACTELT";
          break;
        case 6:
          uint64_t result = "INST_INSERTELT";
          break;
        case 7:
          uint64_t result = "INST_SHUFFLEVEC";
          break;
        case 8:
          uint64_t result = "INST_CMP";
          break;
        case 9:
          uint64_t result = "INST_RET";
          break;
        case 10:
          uint64_t result = "INST_BR";
          break;
        case 11:
          uint64_t result = "INST_SWITCH";
          break;
        case 12:
          uint64_t result = "INST_INVOKE";
          break;
        case 14:
          uint64_t result = "INST_UNREACHABLE";
          break;
        case 15:
          uint64_t result = "INST_PHI";
          break;
        case 18:
          uint64_t result = "INST_ALLOCA";
          break;
        case 19:
          uint64_t result = "INST_LOAD";
          break;
        case 22:
          uint64_t result = "INST_VAARG";
          break;
        case 25:
          uint64_t result = "INST_EXTRACTVAL";
          break;
        case 26:
          uint64_t result = "INST_INSERTVAL";
          break;
        case 27:
          uint64_t result = "INST_CMP2";
          break;
        case 28:
          uint64_t result = "INST_VSELECT";
          break;
        case 29:
          uint64_t result = "INST_INBOUNDS_GEP_OLD";
          break;
        case 32:
          uint64_t result = "DEBUG_LOC_AGAIN";
          break;
        case 33:
          uint64_t result = "INST_CALL";
          break;
        case 34:
          uint64_t result = "DEBUG_LOC";
          break;
        case 35:
          uint64_t result = "INST_FENCE";
          break;
        case 40:
          uint64_t result = "INST_LOADATOMIC";
          break;
        case 42:
          uint64_t result = "INST_GEP";
          break;
        case 43:
          uint64_t result = "INST_STORE";
          break;
        case 44:
          uint64_t result = "INST_STOREATOMIC";
          break;
        case 45:
          uint64_t result = "INST_CMPXCHG";
          break;
        case 47:
          uint64_t result = "INST_CLEANUPRET";
          break;
        case 48:
          uint64_t result = "INST_CATCHRET";
          break;
        case 49:
          uint64_t result = "INST_CATCHPAD";
          break;
        case 54:
          uint64_t result = "OPERAND_BUNDLE";
          break;
        case 55:
          uint64_t result = "INST_UNOP";
          break;
        case 56:
          uint64_t result = "INST_CALLBR";
          break;
        case 58:
          uint64_t result = "INST_ATOMICRMW";
          break;
        case 59:
          uint64_t result = "BLOCKADDR_USERS";
          break;
        default:
          goto LABEL_61;
      }
      return result;
    case 0xDu:
      uint64_t v17 = "STRING";
      BOOL v18 = a1 == 2;
      uint64_t v19 = "EPOCH";
      goto LABEL_50;
    case 0xEu:
      int v20 = a1 - 1;
      uint64_t result = "ENTRY";
      switch(v20)
      {
        case 0:
          return result;
        case 1:
          uint64_t result = "BBENTRY";
          break;
        case 2:
          uint64_t result = "FNENTRY";
          break;
        case 4:
          uint64_t result = "COMBINED_ENTRY";
          break;
        default:
          goto LABEL_61;
      }
      return result;
    case 0xFu:
      int v21 = a1 - 1;
      uint64_t result = "STRING_OLD";
      switch(v21)
      {
        case 0:
          return result;
        case 1:
          uint64_t result = "VALUE";
          break;
        case 2:
          uint64_t result = "NODE";
          break;
        case 3:
          uint64_t result = "NAME";
          break;
        case 4:
          uint64_t result = "DISTINCT_NODE";
          break;
        case 5:
          uint64_t result = "KIND";
          break;
        case 6:
          uint64_t result = "LOCATION";
          break;
        case 7:
          uint64_t result = "OLD_NODE";
          break;
        case 8:
          uint64_t result = "OLD_FN_NODE";
          break;
        case 9:
          uint64_t result = "NAMED_NODE";
          break;
        case 11:
          uint64_t result = "GENERIC_DEBUG";
          break;
        case 12:
          uint64_t result = "SUBRANGE";
          break;
        case 13:
          uint64_t result = "ENUMERATOR";
          break;
        case 14:
          uint64_t result = "BASIC_TYPE";
          break;
        case 15:
          uint64_t result = "FILE";
          break;
        case 16:
          uint64_t result = "DERIVED_TYPE";
          break;
        case 17:
          uint64_t result = "COMPOSITE_TYPE";
          break;
        case 18:
          uint64_t result = "SUBROUTINE_TYPE";
          break;
        case 19:
          uint64_t result = "COMPILE_UNIT";
          break;
        case 20:
          uint64_t result = "SUBPROGRAM";
          break;
        case 21:
          uint64_t result = "LEXICAL_BLOCK";
          break;
        case 22:
          uint64_t result = "LEXICAL_BLOCK_FILE";
          break;
        case 23:
          uint64_t result = "NAMESPACE";
          break;
        case 24:
          uint64_t result = "TEMPLATE_TYPE";
          break;
        case 25:
          uint64_t result = "TEMPLATE_VALUE";
          break;
        case 26:
          uint64_t result = "GLOBAL_VAR";
          break;
        case 27:
          uint64_t result = "LOCAL_VAR";
          break;
        case 28:
          uint64_t result = "EXPRESSION";
          break;
        case 29:
          uint64_t result = "OBJC_PROPERTY";
          break;
        case 30:
          uint64_t result = "IMPORTED_ENTITY";
          break;
        case 31:
          uint64_t result = "MODULE";
          break;
        case 32:
          uint64_t result = "MACRO";
          break;
        case 33:
          uint64_t result = "MACRO_FILE";
          break;
        case 34:
          uint64_t result = "STRINGS";
          break;
        case 35:
          uint64_t result = "GLOBAL_DECL_ATTACHMENT";
          break;
        case 36:
          uint64_t result = "GLOBAL_VAR_EXPR";
          break;
        case 37:
          uint64_t result = "INDEX_OFFSET";
          break;
        case 38:
          uint64_t result = "INDEX";
          break;
        case 45:
          uint64_t result = "ARG_LIST";
          break;
        default:
          goto LABEL_61;
      }
      return result;
    case 0x10u:
      BOOL v12 = a1 == 11;
      size_t v13 = "ATTACHMENT";
      goto LABEL_57;
    case 0x11u:
      int v22 = a1 - 1;
      uint64_t result = "NUMENTRY";
      switch(v22)
      {
        case 0:
          return result;
        case 1:
          uint64_t result = "VOID";
          break;
        case 2:
LABEL_64:
          uint64_t result = "FLOAT";
          break;
        case 3:
          uint64_t result = "DOUBLE";
          break;
        case 4:
          uint64_t result = "LABEL";
          break;
        case 5:
          uint64_t result = "OPAQUE";
          break;
        case 6:
LABEL_65:
          uint64_t result = "INTEGER";
          break;
        case 7:
          uint64_t result = "POINTER";
          break;
        case 9:
          uint64_t result = "HALF";
          break;
        case 10:
          uint64_t result = "ARRAY";
          break;
        case 11:
          uint64_t result = "VECTOR";
          break;
        case 12:
          uint64_t result = "X86_FP80";
          break;
        case 13:
          uint64_t result = "FP128";
          break;
        case 14:
          uint64_t result = "PPC_FP128";
          break;
        case 15:
          uint64_t result = "METADATA";
          break;
        case 16:
          uint64_t result = "X86_MMX";
          break;
        case 17:
          uint64_t result = "STRUCT_ANON";
          break;
        case 18:
          uint64_t result = "STRUCT_NAME";
          break;
        case 19:
          uint64_t result = "STRUCT_NAMED";
          break;
        case 20:
          uint64_t result = "FUNCTION";
          break;
        case 21:
          uint64_t result = "TOKEN";
          break;
        case 22:
          uint64_t result = "BFLOAT";
          break;
        default:
          return 0;
      }
      return result;
    case 0x12u:
      uint64_t v17 = "USELIST_CODE_DEFAULT";
      BOOL v18 = a1 == 2;
      uint64_t v19 = "USELIST_CODE_BB";
      goto LABEL_50;
    case 0x13u:
      uint64_t v17 = "ENTRY";
      BOOL v18 = a1 == 2;
      uint64_t v19 = "HASH";
LABEL_50:
      if (!v18) {
        uint64_t v19 = 0;
      }
      if (a1 == 1) {
        return v17;
      }
      else {
        return v19;
      }
    case 0x14u:
    case 0x18u:
      int v11 = a1 - 1;
      uint64_t result = "PERMODULE";
      switch(v11)
      {
        case 0:
          return result;
        case 1:
          uint64_t result = "PERMODULE_PROFILE";
          break;
        case 2:
          uint64_t result = "PERMODULE_GLOBALVAR_INIT_REFS";
          break;
        case 3:
          uint64_t result = "COMBINED";
          break;
        case 4:
          uint64_t result = "COMBINED_PROFILE";
          break;
        case 5:
          uint64_t result = "COMBINED_GLOBALVAR_INIT_REFS";
          break;
        case 6:
          uint64_t result = "ALIAS";
          break;
        case 7:
          uint64_t result = "COMBINED_ALIAS";
          break;
        case 8:
          uint64_t result = "COMBINED_ORIGINAL_NAME";
          break;
        case 9:
          uint64_t result = "VERSION";
          break;
        case 10:
          uint64_t result = "TYPE_TESTS";
          break;
        case 11:
          uint64_t result = "TYPE_TEST_ASSUME_VCALLS";
          break;
        case 12:
          uint64_t result = "TYPE_CHECKED_LOAD_VCALLS";
          break;
        case 13:
          uint64_t result = "TYPE_TEST_ASSUME_CONST_VCALL";
          break;
        case 14:
          uint64_t result = "TYPE_CHECKED_LOAD_CONST_VCALL";
          break;
        case 15:
          uint64_t result = "VALUE_GUID";
          break;
        case 16:
          uint64_t result = "CFI_FUNCTION_DEFS";
          break;
        case 17:
          uint64_t result = "CFI_FUNCTION_DECLS";
          break;
        case 18:
          uint64_t result = "PERMODULE_RELBF";
          break;
        case 19:
          uint64_t result = "FLAGS";
          break;
        case 20:
          uint64_t result = "TYPE_ID";
          break;
        case 21:
          uint64_t result = "TYPE_ID_METADATA";
          break;
        case 22:
          uint64_t result = "PERMODULE_VTABLE_GLOBALVAR_INIT_REFS";
          break;
        case 23:
          uint64_t result = "BLOCK_COUNT";
          break;
        case 24:
          uint64_t result = "PARAM_ACCESS";
          break;
        default:
LABEL_61:
          uint64_t result = 0;
          break;
      }
      return result;
    case 0x15u:
      BOOL v12 = a1 == 1;
      size_t v13 = "OPERAND_BUNDLE_TAG";
      goto LABEL_57;
    case 0x16u:
      BOOL v12 = a1 == 6;
      size_t v13 = "KIND";
      goto LABEL_57;
    case 0x17u:
    case 0x19u:
      BOOL v12 = a1 == 1;
      size_t v13 = "BLOB";
LABEL_57:
      if (v12) {
        uint64_t result = v13;
      }
      else {
        uint64_t result = 0;
      }
      break;
    default:
      return 0;
  }
  return result;
}

void sub_1CC1CA5F4(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  while (1)
  {
    if (!*(_DWORD *)(a1 + 32) && *(void *)(a1 + 8) <= *(void *)(a1 + 16)) {
      goto LABEL_12;
    }
    sub_1CC1CA844(a1, *(_DWORD *)(a1 + 36), (uint64_t)&v22);
    if (v23) {
      goto LABEL_33;
    }
    if (v22 != 2) {
      break;
    }
    if ((a2 & 2) != 0) {
      goto LABEL_7;
    }
    llvm::BitstreamCursor::ReadAbbrevRecord((llvm::BitstreamCursor *)a1, &v22);
    unint64_t v6 = v22;
    if (v22) {
      goto LABEL_34;
    }
  }
  if (v22 == 1)
  {
    sub_1CC1CA844(a1, 8u, (uint64_t)&v22);
    if ((v23 & 1) == 0)
    {
      if ((v22 & 0x80) == 0)
      {
        unint64_t v8 = v22;
LABEL_19:
        unint64_t v6 = (v8 << 32) | 2;
        goto LABEL_8;
      }
      unsigned int v20 = 0;
      LODWORD(v8) = v22 & 0x7F;
      while (1)
      {
        if (v20 >= 0x19)
        {
          int v21 = std::generic_category();
          unint64_t v22 = 92;
          size_t v23 = v21;
          sub_1CD06481C();
        }
        sub_1CC1CA844(a1, 8u, (uint64_t)&v22);
        if (v23) {
          break;
        }
        unint64_t v8 = ((v22 & 0x7F) << (v20 + 7)) | v8;
        v20 += 7;
        if ((v22 & 0x80) == 0) {
          goto LABEL_19;
        }
      }
    }
LABEL_33:
    unint64_t v6 = v22;
LABEL_34:
    char v7 = *(unsigned char *)(a3 + 8) | 1;
    goto LABEL_9;
  }
  if (v22)
  {
LABEL_7:
    unint64_t v6 = (v22 << 32) | 3;
LABEL_8:
    char v7 = *(unsigned char *)(a3 + 8) & 0xFE;
LABEL_9:
    *(unsigned char *)(a3 + 8) = v7;
LABEL_10:
    *(void *)a3 = v6;
    return;
  }
  if (a2)
  {
LABEL_26:
    *(unsigned char *)(a3 + 8) &= ~1u;
    unint64_t v6 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 72);
  if (v9)
  {
    unsigned int v10 = *(_DWORD *)(a1 + 32);
    BOOL v11 = v10 >= 0x20;
    char v12 = v10 - 32;
    if (v11)
    {
      *(void *)(a1 + 24) >>= v12;
      int v13 = 32;
    }
    else
    {
      int v13 = 0;
    }
    *(_DWORD *)(a1 + 32) = v13;
    uint64_t v14 = *(void *)(a1 + 64) + 32 * v9;
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v14 - 32);
    sub_1CC1CAA38((uint64_t *)(a1 + 40));
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(v14 - 24);
    *(void *)(a1 + 56) = *(void *)(v14 - 8);
    *(void *)(v14 - 24) = 0;
    *(void *)(v14 - 16) = 0;
    *(void *)(v14 - 8) = 0;
    uint64_t v15 = (*(_DWORD *)(a1 + 72) - 1);
    *(_DWORD *)(a1 + 72) = v15;
    uint64_t v16 = *(void *)(a1 + 64) + 32 * v15;
    uint64_t v19 = *(void *)(v16 + 8);
    BOOL v18 = (void **)(v16 + 8);
    uint64_t v17 = v19;
    if (v19)
    {
      sub_1CC1CAA74((uint64_t)v18, v17);
      operator delete(*v18);
    }
    goto LABEL_26;
  }
LABEL_12:
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = 0;
}

uint64_t sub_1CC1CA844@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  int v4 = (unsigned int *)(result + 32);
  unsigned int v3 = *(_DWORD *)(result + 32);
  if (a2 > v3)
  {
    if (v3) {
      uint64_t v6 = *(void *)(result + 24);
    }
    else {
      uint64_t v6 = 0;
    }
    unsigned int v7 = a2 - v3;
    unsigned int v19 = a2 - v3;
    unint64_t v8 = *(void *)(result + 16);
    unint64_t v9 = *(void *)(result + 8);
    unsigned int v10 = v9 - v8;
    if (v9 <= v8)
    {
      uint64_t v20 = *(void *)(result + 8);
      uint64_t v16 = (uint64_t *)(result + 16);
      uint64_t v17 = std::generic_category();
      sub_1CD4F6FE0(5, (uint64_t)v17, (uint64_t)"Unexpected end of file reading %u of %u bytes", v16, &v20);
    }
    BOOL v11 = (void *)(*(void *)result + v8);
    if (v9 < v8 + 8)
    {
      *(void *)(result + 24) = 0;
      if (v10)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        do
        {
          unsigned int v15 = *(unsigned __int8 *)v11;
          BOOL v11 = (void *)((char *)v11 + 1);
          v14 |= (unint64_t)v15 << (v13 & 0xF8);
          *(void *)(result + 24) = v14;
          v13 += 8;
        }
        while (8 * v10 != v13);
      }
    }
    else
    {
      *(void *)(result + 24) = *v11;
      unsigned int v10 = 8;
    }
    *(void *)(result + 16) = v8 + v10;
    unsigned int *v4 = 8 * v10;
    if (8 * v10 < v7)
    {
      BOOL v18 = std::generic_category();
      sub_1CD4F7124(5, (uint64_t)v18, (uint64_t)"Unexpected end of file reading %u of %u bits", v4, &v19);
    }
    unint64_t v12 = *(void *)(result + 24);
    *(void *)(result + 24) = v12 >> v7;
    *(_DWORD *)(result + 32) = 8 * v10 - v7;
    *(unsigned char *)(a3 + 8) &= ~1u;
    *(void *)a3 = ((v12 & (0xFFFFFFFFFFFFFFFFLL >> (v3 - a2))) << v3) | v6;
  }
  else
  {
    unint64_t v5 = *(void *)(result + 24);
    *(void *)(result + 24) = v5 >> a2;
    *(_DWORD *)(result + 32) = v3 - a2;
    *(unsigned char *)(a3 + 8) &= ~1u;
    *(void *)a3 = v5 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a2);
  }
  return result;
}

void sub_1CC1CAA38(uint64_t *a1)
{
  if (*a1)
  {
    sub_1CC1CAA74((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1CC1CAA74(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 16)
  {
    unint64_t v5 = *(std::__shared_weak_count **)(i - 8);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_1CC1CAB0C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v4 = *(char **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      uint64_t v5 = *(unsigned int *)(a2 + 8);
      uint64_t v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        uint64_t v7 = *(void *)a1;
        if (v5)
        {
          sub_1CC1CACF0((uint64_t)v4, (uint64_t)&v4[32 * v5], v7);
          uint64_t v9 = v8;
          uint64_t v7 = *(void *)a1;
          uint64_t v6 = *(unsigned int *)(a1 + 8);
        }
        else
        {
          uint64_t v9 = *(void *)a1;
        }
        uint64_t v10 = v7 + 32 * v6;
        if (v10 != v9)
        {
          BOOL v11 = (uint64_t *)(v10 - 24);
          do
          {
            if (*v11)
            {
              sub_1CC1CAA74((uint64_t)v11, *v11);
              operator delete((void *)*v11);
            }
            unint64_t v12 = v11 - 1;
            v11 -= 4;
          }
          while (v12 != (uint64_t *)v9);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          sub_1CC1CAC78(a1);
          sub_1CD4F7304();
        }
        if (v6) {
          sub_1CC1CACF0((uint64_t)v4, (uint64_t)&v4[32 * v6], *(void *)a1);
        }
        else {
          uint64_t v6 = 0;
        }
        uint64_t v13 = *(unsigned int *)(a2 + 8);
        if (v6 != v13)
        {
          uint64_t v14 = *(void *)a2 + 32 * v13;
          uint64_t v15 = *(void *)a1 + 32 * v6;
          uint64_t v16 = *(void *)a2 + 32 * v6;
          do
          {
            *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
            *(void *)(v15 + 16) = 0;
            *(void *)(v15 + 24) = 0;
            *(void *)(v15 + 8) = 0;
            *(_OWORD *)(v15 + 8) = *(_OWORD *)(v16 + 8);
            *(void *)(v15 + 24) = *(void *)(v16 + 24);
            *(void *)(v16 + 8) = 0;
            *(void *)(v16 + 16) = 0;
            *(void *)(v16 + 24) = 0;
            v16 += 32;
            v15 += 32;
          }
          while (v16 != v14);
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
      sub_1CC1CAC78(a2);
    }
    else
    {
      sub_1CD4F726C((char **)a1, (char **)a2);
    }
  }
  return a1;
}

uint64_t sub_1CC1CAC78(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)result - 24;
    uint64_t v3 = 32 * v1;
    do
    {
      uint64_t v4 = *(void *)(v2 + v3);
      if (v4)
      {
        uint64_t v7 = v2;
        uint64_t v8 = result;
        uint64_t v5 = (void **)(v2 + v3);
        uint64_t v6 = v3;
        sub_1CC1CAA74(v2 + v3, v4);
        operator delete(*v5);
        uint64_t v3 = v6;
        uint64_t v2 = v7;
        uint64_t result = v8;
      }
      v3 -= 32;
    }
    while (v3);
  }
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_1CC1CACF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    *(_DWORD *)a3 = *(_DWORD *)v4;
    sub_1CC1CAA38((uint64_t *)(a3 + 8));
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(v4 + 8);
    *(void *)(a3 + 24) = *(void *)(v4 + 24);
    a3 += 32;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 24) = 0;
    v4 += 32;
  }
  while (v4 != v5);
  return v5;
}

void *sub_1CC1CAD70(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 60) {
      abort();
    }
    uint64_t v7 = result;
    uint64_t result = operator new(16 * a4);
    void *v7 = result;
    v7[1] = result;
    for (v7[2] = &result[2 * a4]; a2 != a3; a2 += 2)
    {
      uint64_t v8 = a2[1];
      const char *result = *a2;
      result[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      result += 2;
    }
    v7[1] = result;
  }
  return result;
}

uint64_t sub_1CC1CADFC(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(unsigned int *)(a2 + 8);
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if (v3)
      {
        sub_1CC1CAF5C(*(void *)a2, *(void *)a2 + 32 * v3, *(void *)a1);
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)a1;
        uint64_t v4 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        uint64_t v12 = *(void *)a1;
        uint64_t v11 = *(void *)a1;
      }
      uint64_t v13 = v12 + 32 * v4;
      if (v13 != v11)
      {
        uint64_t v14 = (uint64_t *)(v13 - 24);
        do
        {
          if (*v14)
          {
            sub_1CC1CAA74((uint64_t)v14, *v14);
            operator delete((void *)*v14);
          }
          uint64_t v15 = v14 - 1;
          v14 -= 4;
        }
        while (v15 != (uint64_t *)v11);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v3)
      {
        sub_1CC1CAC78(a1);
        sub_1CD4F7304();
      }
      if (v4)
      {
        uint64_t v16 = a2;
        sub_1CC1CAF5C(*(void *)a2, *(void *)a2 + 32 * v4, *(void *)a1);
        a2 = v16;
      }
      else
      {
        uint64_t v4 = 0;
      }
      uint64_t v5 = *(unsigned int *)(a2 + 8);
      if (v4 != v5)
      {
        uint64_t v6 = *(void *)a2 + 32 * v5;
        uint64_t v7 = *(void *)a1 + 32 * v4;
        uint64_t v8 = *(void *)a2 + 32 * v4;
        do
        {
          *(_DWORD *)uint64_t v7 = *(_DWORD *)v8;
          *(void *)(v7 + 16) = 0;
          *(void *)(v7 + 24) = 0;
          *(void *)(v7 + 8) = 0;
          sub_1CC1CAD70((void *)(v7 + 8), *(void **)(v8 + 8), *(void **)(v8 + 16), (uint64_t)(*(void *)(v8 + 16) - *(void *)(v8 + 8)) >> 4);
          v8 += 32;
          v7 += 32;
        }
        while (v8 != v6);
      }
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t sub_1CC1CAF5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      *(_DWORD *)a3 = *(_DWORD *)v4;
      if (v4 != a3) {
        sub_1CC1CAFD4((uint64_t *)(a3 + 8), *(uint64_t **)(v4 + 8), *(uint64_t **)(v4 + 16), (uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 4);
      }
      v4 += 32;
      a3 += 32;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void sub_1CC1CAFD4(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = (char *)*a1;
  if (a4 <= (a1[2] - *a1) >> 4)
  {
    uint64_t v14 = (char *)a1[1];
    unint64_t v15 = (v14 - v8) >> 4;
    if (v15 >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v21 = *a1;
      }
      else
      {
        uint64_t v21 = *a1;
        do
        {
          sub_1CBF4C340(v8, v6);
          v6 += 2;
          v8 += 16;
          v21 += 16;
        }
        while (v6 != a3);
      }
      sub_1CC1CAA74((uint64_t)a1, v21);
    }
    else
    {
      uint64_t v16 = &a2[2 * v15];
      if (v14 != v8)
      {
        uint64_t v17 = 16 * v15;
        do
        {
          sub_1CBF4C340(v8, v6);
          v6 += 2;
          v8 += 16;
          v17 -= 16;
        }
        while (v17);
        uint64_t v8 = (char *)a1[1];
      }
      BOOL v18 = v8;
      if (v16 != a3)
      {
        BOOL v18 = v8;
        unsigned int v19 = v8;
        do
        {
          uint64_t v20 = v16[1];
          *unsigned int v19 = *v16;
          v19[1] = v20;
          if (v20) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
          }
          v18 += 16;
          v16 += 2;
          v19 += 2;
        }
        while (v16 != a3);
      }
      a1[1] = (uint64_t)v18;
    }
  }
  else
  {
    sub_1CC1CAA38(a1);
    if (a4 >> 60) {
      goto LABEL_33;
    }
    uint64_t v9 = a1[2] - *a1;
    uint64_t v10 = v9 >> 3;
    if (v9 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    unint64_t v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 60) {
LABEL_33:
    }
      abort();
    uint64_t v12 = operator new(16 * v11);
    *a1 = (uint64_t)v12;
    a1[1] = (uint64_t)v12;
    for (a1[2] = (uint64_t)&v12[2 * v11]; v6 != a3; v6 += 2)
    {
      uint64_t v13 = v6[1];
      void *v12 = *v6;
      v12[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      v12 += 2;
    }
    a1[1] = (uint64_t)v12;
  }
}

void sub_1CC1CB1A4(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v5 = *a1;
    uint64_t v2 = (uint64_t)a1[1];
    uint64_t v3 = v1;
    if ((void *)v2 != v1)
    {
      do
        uint64_t v2 = sub_1CC1CB21C(v2 - 80);
      while ((void *)v2 != v5);
      uint64_t v3 = *a1;
    }
    a1[1] = v5;
    operator delete(v3);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_1CC1CB21C(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 56);
  sub_1CC1CB288(&v4);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    sub_1CC1CAA74(a1 + 8, v2);
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1CC1CB288(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 4;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC1CB314(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (uint64_t)v4 - 72;
      do
      {
        uint64_t v8 = (void **)(v6 + 48);
        sub_1CC1CB288(&v8);
        if (*(char *)(v6 + 47) < 0) {
          operator delete(*(void **)(v6 + 24));
        }
        if (*(void *)v6)
        {
          sub_1CC1CAA74(v6, *(void *)v6);
          operator delete(*(void **)v6);
        }
        uint64_t v7 = v6 - 8;
        v6 -= 80;
      }
      while ((void *)v7 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char **sub_1CC1CB3C4(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v5 = v2 - 24;
    uint64_t v6 = 32 * v3;
    do
    {
      uint64_t v7 = *(void *)&v5[v6];
      if (v7)
      {
        sub_1CC1CAA74((uint64_t)&v5[v6], v7);
        operator delete(*(void **)&v5[v6]);
      }
      v6 -= 32;
    }
    while (v6);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CC1CB444(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t sub_1CC1CB488(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t sub_1CC1CB4C8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = *(void **)a1;
    *(void *)a1 = 0;
    if (v2) {
      (*(void (**)(void *))(*(void *)v2 + 8))(v2);
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = (void **)a1;
    sub_1CC1CB314(&v4);
    *(unsigned char *)(a1 + 24) = 0;
  }
  return a1;
}

unsigned int *sub_1CC1CB548(unsigned int *result, unsigned int *a2, unint64_t a3, unsigned int *a4, uint64_t a5)
{
  if (a3 < 2) {
    return result;
  }
  uint64_t v6 = result;
  if (a3 == 2)
  {
    unsigned int v7 = *(a2 - 2);
    unsigned int v8 = *result;
    if (v7 < *result || v8 >= v7 && *(a2 - 1) < result[1])
    {
      const char *result = v7;
      *(a2 - 2) = v8;
      unsigned int v9 = result[1];
      result[1] = *(a2 - 1);
      *(a2 - 1) = v9;
    }
    return result;
  }
  if ((uint64_t)a3 > 0)
  {
    uint64_t v12 = a4;
    unint64_t v13 = a3 >> 1;
    uint64_t v14 = &result[2 * (a3 >> 1)];
    unint64_t v15 = a3 >> 1;
    if ((uint64_t)a3 <= a5)
    {
      sub_1CC1CB82C(result, v14, v15, a4);
      uint64_t v28 = &v12[2 * v13];
      uint64_t result = sub_1CC1CB82C(&v6[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), v28);
      uint64_t v29 = &v12[2 * a3];
      size_t v30 = v28;
      while (v30 != v29)
      {
        unsigned int v31 = *v30;
        unsigned int v32 = *v12;
        if (*v30 >= *v12 && (v32 < v31 || v30[1] >= v12[1]))
        {
          unsigned int *v6 = v32;
          v6[1] = v12[1];
          v12 += 2;
        }
        else
        {
          unsigned int *v6 = v31;
          v6[1] = v30[1];
          v30 += 2;
        }
        v6 += 2;
        if (v12 == v28)
        {
          if (v30 != v29)
          {
            uint64_t v33 = 0;
            do
            {
              int v34 = &v30[v33];
              size_t v35 = &v6[v33];
              *size_t v35 = v30[v33];
              v35[1] = v30[v33 + 1];
              v33 += 2;
            }
            while (v34 + 2 != v29);
          }
          return result;
        }
      }
      if (v12 != v28)
      {
        uint64_t v36 = 0;
        do
        {
          size_t v37 = &v12[v36];
          int v38 = &v6[v36];
          *int v38 = v12[v36];
          v38[1] = v12[v36 + 1];
          v36 += 2;
        }
        while (v37 + 2 != v28);
      }
    }
    else
    {
      sub_1CC1CB548(result, v14, v15, a4, a5);
      sub_1CC1CB548(&v6[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), v12, a5);
      return (unsigned int *)sub_1CC1CBAAC((char *)v6, (char *)&v6[2 * (a3 >> 1)], (char *)a2, a3 >> 1, a3 - (a3 >> 1), (char *)v12, a5);
    }
    return result;
  }
  if (result == a2) {
    return result;
  }
  uint64_t v16 = result + 2;
  if (result + 2 == a2) {
    return result;
  }
  uint64_t v17 = 0;
  BOOL v18 = result;
  do
  {
    unsigned int v19 = v18;
    BOOL v18 = v16;
    unsigned int v20 = *v16;
    unsigned int v21 = *v19;
    if (v20 >= *v19 && (v21 < v20 || v19[3] >= v19[1])) {
      goto LABEL_28;
    }
    unsigned int v22 = *v18;
    unsigned int v23 = v18[1];
    *BOOL v18 = v21;
    v18[1] = v19[1];
    if (v19 == result)
    {
LABEL_26:
      unsigned int v19 = result;
      goto LABEL_27;
    }
    uint64_t v24 = v17;
    while (1)
    {
      unsigned int v25 = *(unsigned int *)((char *)result + v24 - 8);
      if (v25 <= v22) {
        break;
      }
      unsigned int v26 = *(unsigned int *)((char *)result + v24 - 4);
LABEL_25:
      v19 -= 2;
      uint64_t v27 = (unsigned int *)((char *)result + v24);
      *uint64_t v27 = v25;
      v27[1] = v26;
      v24 -= 8;
      if (!v24) {
        goto LABEL_26;
      }
    }
    if (v25 < v22) {
      goto LABEL_27;
    }
    unsigned int v26 = *(unsigned int *)((char *)result + v24 - 4);
    if (v26 > v23) {
      goto LABEL_25;
    }
    unsigned int v19 = (unsigned int *)((char *)result + v24);
LABEL_27:
    *unsigned int v19 = v22;
    v19[1] = v23;
LABEL_28:
    uint64_t v16 = v18 + 2;
    v17 += 8;
  }
  while (v18 + 2 != a2);
  return result;
}

unsigned int *sub_1CC1CB82C(unsigned int *result, unsigned int *a2, unint64_t a3, unsigned int *a4)
{
  if (!a3) {
    return result;
  }
  uint64_t v4 = a4;
  uint64_t v6 = (uint64_t *)result;
  if (a3 == 1)
  {
    unsigned int v8 = result;
LABEL_31:
    *(void *)uint64_t v4 = *(void *)v8;
    return result;
  }
  if (a3 == 2)
  {
    unsigned int v8 = a2 - 2;
    unsigned int v9 = *(a2 - 2);
    if (v9 < *result || *result >= v9 && *(a2 - 1) < result[1])
    {
      uint64_t v10 = a2 - 2;
      unsigned int v8 = result;
    }
    else
    {
      uint64_t v10 = result;
    }
    *(void *)a4 = *(void *)v10;
    uint64_t v4 = a4 + 2;
    goto LABEL_31;
  }
  if ((uint64_t)a3 <= 8)
  {
    if (result == a2) {
      return result;
    }
    unint64_t v11 = (uint64_t *)(result + 2);
    *(void *)a4 = *(void *)result;
    if (result + 2 == a2) {
      return result;
    }
    uint64_t v12 = 0;
    unint64_t v13 = a4;
    uint64_t v14 = a4;
    while (1)
    {
      unint64_t v15 = v11;
      unsigned int v17 = *v14;
      v14 += 2;
      unsigned int v16 = v17;
      if (*(_DWORD *)v15 >= v17 && (v16 < *(_DWORD *)v15 || *((_DWORD *)v6 + 3) >= v13[1]))
      {
        *(void *)uint64_t v14 = *v15;
        goto LABEL_25;
      }
      *((void *)v13 + 1) = *(void *)v13;
      BOOL v18 = a4;
      if (v13 == a4) {
        goto LABEL_24;
      }
      uint64_t v19 = v12;
      while (1)
      {
        unsigned int v20 = *(unsigned int *)((char *)a4 + v19 - 8);
        if (*(_DWORD *)v15 >= v20) {
          break;
        }
        unsigned int v21 = *(unsigned int *)((char *)a4 + v19 - 4);
LABEL_18:
        v13 -= 2;
        unsigned int v22 = (unsigned int *)((char *)a4 + v19);
        unsigned int *v22 = v20;
        v22[1] = v21;
        v19 -= 8;
        if (!v19)
        {
          BOOL v18 = a4;
          goto LABEL_24;
        }
      }
      if (v20 >= *(_DWORD *)v15) {
        break;
      }
      BOOL v18 = v13;
LABEL_24:
      *BOOL v18 = *(_DWORD *)v15;
      v18[1] = *((_DWORD *)v6 + 3);
LABEL_25:
      unint64_t v11 = v15 + 1;
      v12 += 8;
      unint64_t v13 = v14;
      uint64_t v6 = v15;
      if (v15 + 1 == (uint64_t *)a2) {
        return result;
      }
    }
    BOOL v18 = (unsigned int *)((char *)a4 + v19);
    unsigned int v21 = *(unsigned int *)((char *)a4 + v19 - 4);
    if (*((_DWORD *)v6 + 3) >= v21) {
      goto LABEL_24;
    }
    goto LABEL_18;
  }
  unsigned int v23 = (uint64_t *)&result[2 * (a3 >> 1)];
  sub_1CC1CB548(result, v23, a3 >> 1, a4, a3 >> 1);
  uint64_t result = (unsigned int *)sub_1CC1CB548(&v6[a3 >> 1], a2, a3 - (a3 >> 1), &v4[2 * (a3 >> 1)], a3 - (a3 >> 1));
  uint64_t v24 = (unsigned int *)&v6[a3 >> 1];
  while (v24 != a2)
  {
    if (*v24 >= *(_DWORD *)v6 && (*(_DWORD *)v6 < *v24 || v24[1] >= *((_DWORD *)v6 + 1)))
    {
      uint64_t v27 = *v6++;
      uint64_t v25 = v27;
    }
    else
    {
      uint64_t v26 = *(void *)v24;
      v24 += 2;
      uint64_t v25 = v26;
    }
    *(void *)uint64_t v4 = v25;
    v4 += 2;
    if (v6 == v23)
    {
      if (v24 != a2)
      {
        unint64_t v28 = 0;
        do
        {
          *(void *)&v4[v28] = *(void *)&v24[v28];
          v28 += 2;
        }
        while (&v24[v28] != a2);
      }
      return result;
    }
  }
  if (v6 != v23)
  {
    unint64_t v29 = 0;
    do
    {
      *(void *)&v4[v29 / 4] = v6[v29 / 8];
      v29 += 8;
    }
    while (&v6[v29 / 8] != v23);
  }
  return result;
}

char *sub_1CC1CBAAC(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v9 = 0;
      unsigned int v10 = *(_DWORD *)a2;
      uint64_t v11 = -a4;
      while (1)
      {
        unsigned int v12 = *(_DWORD *)&result[v9];
        if (v10 < v12 || v12 >= v10 && *((_DWORD *)a2 + 1) < *(_DWORD *)&result[v9 + 4]) {
          break;
        }
        v9 += 8;
        if (__CFADD__(v11++, 1)) {
          return result;
        }
      }
      uint64_t v14 = &result[v9];
      if (-v11 >= a5)
      {
        if (v11 == -1)
        {
          long long v53 = &result[v9];
          *(_DWORD *)long long v53 = v10;
          *(_DWORD *)a2 = v12;
          int v54 = *((_DWORD *)v53 + 1);
          *((_DWORD *)v53 + 1) = *((_DWORD *)a2 + 1);
          *((_DWORD *)a2 + 1) = v54;
          return result;
        }
        if (v11 <= 0) {
          uint64_t v23 = -v11;
        }
        else {
          uint64_t v23 = 1 - v11;
        }
        uint64_t v24 = v23 >> 1;
        unsigned int v20 = &result[8 * (v23 >> 1) + v9];
        unsigned int v17 = a3;
        if (a3 != a2)
        {
          unint64_t v25 = (a3 - a2) >> 3;
          unsigned int v26 = *(_DWORD *)v20;
          unsigned int v17 = a2;
          do
          {
            unint64_t v27 = v25 >> 1;
            unint64_t v28 = &v17[8 * (v25 >> 1)];
            if (*(_DWORD *)v28 < v26 || v26 >= *(_DWORD *)v28 && *(_DWORD *)&v17[8 * v27 + 4] < *((_DWORD *)v20 + 1))
            {
              unsigned int v17 = v28 + 8;
              unint64_t v27 = v25 + ~v27;
            }
            unint64_t v25 = v27;
          }
          while (v27);
        }
        uint64_t v16 = (v17 - a2) >> 3;
      }
      else
      {
        if (a5 >= 0) {
          uint64_t v15 = a5;
        }
        else {
          uint64_t v15 = a5 + 1;
        }
        uint64_t v16 = v15 >> 1;
        unsigned int v17 = &a2[8 * (v15 >> 1)];
        if (v14 == a2)
        {
          unsigned int v20 = a2;
        }
        else
        {
          unint64_t v18 = (a2 - result - v9) >> 3;
          unsigned int v19 = *(_DWORD *)v17;
          unsigned int v20 = &result[v9];
          do
          {
            unint64_t v21 = v18 >> 1;
            unsigned int v22 = &v20[8 * (v18 >> 1)];
            if (v19 >= *(_DWORD *)v22 && (*(_DWORD *)v22 < v19 || *((_DWORD *)v17 + 1) >= *(_DWORD *)&v20[8 * v21 + 4]))
            {
              unsigned int v20 = v22 + 8;
              unint64_t v21 = v18 + ~v21;
            }
            unint64_t v18 = v21;
          }
          while (v21);
        }
        uint64_t v24 = (v20 - result - v9) >> 3;
      }
      unint64_t v29 = v17;
      if (v20 != a2)
      {
        unint64_t v29 = v20;
        if (a2 != v17)
        {
          unsigned int v30 = *(_DWORD *)v20;
          *(_DWORD *)unsigned int v20 = v10;
          *(_DWORD *)a2 = v30;
          int v31 = *((_DWORD *)v20 + 1);
          *((_DWORD *)v20 + 1) = *((_DWORD *)a2 + 1);
          *((_DWORD *)a2 + 1) = v31;
          unint64_t v29 = v20 + 8;
          for (uint64_t i = a2 + 8; i != v17; i += 8)
          {
            if (v29 == a2) {
              a2 = i;
            }
            int v33 = *(_DWORD *)v29;
            *(_DWORD *)unint64_t v29 = *(_DWORD *)i;
            *(_DWORD *)uint64_t i = v33;
            int v34 = *((_DWORD *)v29 + 1);
            *((_DWORD *)v29 + 1) = *((_DWORD *)i + 1);
            *((_DWORD *)i + 1) = v34;
            v29 += 8;
          }
          if (v29 != a2)
          {
            size_t v35 = v29;
            uint64_t v36 = a2;
            do
            {
              while (1)
              {
                int v37 = *(_DWORD *)v35;
                *(_DWORD *)size_t v35 = *(_DWORD *)v36;
                *(_DWORD *)uint64_t v36 = v37;
                int v38 = *((_DWORD *)v35 + 1);
                *((_DWORD *)v35 + 1) = *((_DWORD *)v36 + 1);
                *((_DWORD *)v36 + 1) = v38;
                v35 += 8;
                v36 += 8;
                if (v36 == v17) {
                  break;
                }
                if (v35 == a2) {
                  a2 = v36;
                }
              }
              uint64_t v36 = a2;
            }
            while (v35 != a2);
          }
        }
      }
      a4 = -v24 - v11;
      uint64_t v39 = a5 - v16;
      if (v24 + v16 >= a5 - (v24 + v16) - v11)
      {
        char v41 = a6;
        sub_1CC1CBAAC(v29, v17);
        unsigned int v17 = v20;
        uint64_t v39 = v16;
        a4 = v24;
        a3 = v29;
      }
      else
      {
        unint64_t v40 = a3;
        char v41 = a6;
        sub_1CC1CBAAC(&result[v9], v20);
        a3 = v40;
        uint64_t v14 = v29;
      }
      a5 = v39;
      uint64_t result = v14;
      a2 = v17;
      a6 = v41;
      if (!v39) {
        return result;
      }
    }
    if (a4 <= a5)
    {
      if (result != a2)
      {
        uint64_t v48 = 0;
        do
        {
          *(void *)&a6[v48] = *(void *)&result[v48];
          v48 += 8;
        }
        while (&result[v48] != a2);
        if (v48)
        {
          unint64_t v49 = &a6[v48];
          uint64_t v50 = (uint64_t)&a6[v48 - 8];
          while (a2 != a3)
          {
            unsigned int v51 = *(_DWORD *)a2;
            unsigned int v52 = *(_DWORD *)a6;
            if (*(_DWORD *)a2 >= *(_DWORD *)a6 && (v52 < v51 || *((_DWORD *)a2 + 1) >= *((_DWORD *)a6 + 1)))
            {
              *(_DWORD *)uint64_t result = v52;
              *((_DWORD *)result + 1) = *((_DWORD *)a6 + 1);
              a6 += 8;
            }
            else
            {
              *(_DWORD *)uint64_t result = v51;
              *((_DWORD *)result + 1) = *((_DWORD *)a2 + 1);
              a2 += 8;
            }
            result += 8;
            if (v49 == a6) {
              return result;
            }
          }
          if (v49 != a6)
          {
            uint64_t v57 = 0;
            do
            {
              uint64_t v58 = &result[v57];
              uint64_t v59 = &a6[v57];
              *(_DWORD *)uint64_t v58 = *(_DWORD *)&a6[v57];
              *((_DWORD *)v58 + 1) = *(_DWORD *)&a6[v57 + 4];
              v57 += 8;
            }
            while ((char *)v50 != v59);
          }
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v42 = 0;
      do
      {
        *(void *)&a6[v42] = *(void *)&a2[v42];
        v42 += 8;
      }
      while (&a2[v42] != a3);
      if (v42)
      {
        unint64_t v43 = &a6[v42];
        unint64_t v44 = a3 - 4;
        while (a2 != result)
        {
          unsigned int v45 = *((_DWORD *)a2 - 2);
          unsigned int v46 = *((_DWORD *)v43 - 2);
          if (v46 >= v45 && (v45 < v46 || *((_DWORD *)v43 - 1) >= *((_DWORD *)a2 - 1)))
          {
            unsigned int v45 = *((_DWORD *)v43 - 2);
            unint64_t v47 = v43;
            v43 -= 8;
          }
          else
          {
            unint64_t v47 = a2;
            a2 -= 8;
          }
          *((_DWORD *)v44 - 1) = v45;
          *(_DWORD *)unint64_t v44 = *((_DWORD *)v47 - 1);
          v44 -= 8;
          if (v43 == a6) {
            return result;
          }
        }
        if (v43 != a6)
        {
          unint64_t v55 = 0;
          do
          {
            unint64_t v56 = &v44[v55];
            *((_DWORD *)v56 - 1) = *(_DWORD *)&v43[v55 - 8];
            *(_DWORD *)unint64_t v56 = *(_DWORD *)&v43[v55 - 4];
            v55 -= 8;
          }
          while (&v43[v55] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t LLVMParseBitcode(void *a1, char **a2, char **a3)
{
  uint64_t v6 = LLVMGetGlobalContext();

  return LLVMParseBitcodeInContext(v6, a1, a2, a3);
}

uint64_t LLVMParseBitcodeInContext(uint64_t a1, void *a2, char **a3, char **a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2] - v6;
  uint64_t v8 = (*(uint64_t (**)(void *))(*a2 + 16))(a2);
  *(void *)&long long v23 = v6;
  *((void *)&v23 + 1) = v7;
  uint64_t v24 = v8;
  uint64_t v25 = v9;
  llvm::parseBitcodeFile(&v23, (uint64_t)&v31);
  unsigned int v10 = v31;
  if ((v32 & 1) == 0 || (int v31 = 0, !v10))
  {
    uint64_t v16 = 0;
    int v31 = 0;
    *a3 = v10;
    goto LABEL_28;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v22 = 0;
  unsigned int v20 = __p;
  if ((*(unsigned int (**)(char *, void *))(*(void *)v10 + 48))(v10, &llvm::ErrorList::ID))
  {
    uint64_t v11 = (uint64_t *)*((void *)v10 + 1);
    unsigned int v12 = (uint64_t *)*((void *)v10 + 2);
    if (v11 == v12)
    {
      unint64_t v13 = 0;
    }
    else
    {
      unint64_t v13 = 0;
      do
      {
        unint64_t v29 = v13;
        uint64_t v14 = *v11;
        *uint64_t v11 = 0;
        uint64_t v27 = v14;
        sub_1CC1CC8DC(&v28, &v27, (uint64_t *)&v20);
        sub_1CD451630(&v29, &v28, &v30);
        unint64_t v13 = v30;
        unsigned int v30 = 0;
        if (v28) {
          (*(void (**)(char *))(*(void *)v28 + 8))(v28);
        }
        uint64_t v15 = v27;
        uint64_t v27 = 0;
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
        if (v29) {
          (*(void (**)(char *))(*(void *)v29 + 8))(v29);
        }
        ++v11;
      }
      while (v11 != v12);
    }
    unsigned int v26 = v13;
    goto LABEL_19;
  }
  unsigned int v30 = v10;
  sub_1CC1CC8DC(&v26, &v30, (uint64_t *)&v20);
  unsigned int v10 = v30;
  if (v30) {
LABEL_19:
  }
    (*(void (**)(char *))(*(void *)v10 + 8))(v10);
  int v17 = SHIBYTE(v22);
  if (a4)
  {
    if (v22 >= 0) {
      unint64_t v18 = __p;
    }
    else {
      unint64_t v18 = (void **)__p[0];
    }
    *a4 = strdup((const char *)v18);
  }
  *a3 = 0;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v16 = 1;
LABEL_28:
  sub_1CC1CC83C((uint64_t)&v31);
  return v16;
}

uint64_t LLVMParseBitcode2(void *a1, void *a2)
{
  uint64_t v4 = (char *)LLVMGetGlobalContext();

  return LLVMParseBitcodeInContext2(v4, a1, a2);
}

uint64_t LLVMParseBitcodeInContext2(char *a1, void *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2] - v5;
  uint64_t v7 = (*(uint64_t (**)(void *))(*a2 + 16))(a2);
  *(void *)&long long v11 = v5;
  *((void *)&v11 + 1) = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v8;
  llvm::parseBitcodeFile(&v11, (uint64_t)v14);
  sub_1CC1CC3D8(a1, (uint64_t)v14, (uint64_t)&v15);
  sub_1CC1CC83C((uint64_t)v14);
  if ((v16 & 1) == 0)
  {
    std::system_category();
    uint64_t v9 = v15;
LABEL_5:
    uint64_t result = 0;
    goto LABEL_6;
  }
  uint64_t v9 = v15;
  if (!v15) {
    goto LABEL_5;
  }
  uint64_t v9 = 0;
  uint64_t result = 1;
LABEL_6:
  *a3 = v9;
  return result;
}

char *sub_1CC1CC3D8@<X0>(char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v5 = *(char **)a2;
    *(void *)a2 = 0;
    uint64_t v8 = v5;
    uint64_t v6 = llvm::errorToErrorCodeAndEmitErrors((uint64_t)result, &v8);
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = v6;
    *(void *)(a3 + 8) = v7;
    uint64_t result = v8;
    if (v8) {
      return (char *)(*(uint64_t (**)(char *))(*(void *)v8 + 8))(v8);
    }
  }
  else
  {
    *(unsigned char *)(a3 + 16) &= ~1u;
    uint64_t v4 = *(char **)a2;
    *(void *)a2 = 0;
    *(void *)a3 = v4;
  }
  return result;
}

uint64_t LLVMGetBitcodeModuleInContext(uint64_t a1, const llvm::MemoryBuffer *a2, char **a3, char **a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unsigned int v19 = a2;
  llvm::getOwningLazyBitcodeModule(&v19, (uint64_t)&v25);
  uint64_t v6 = v25;
  if ((v26 & 1) == 0 || (uint64_t v25 = 0, !v6))
  {
    uint64_t v12 = 0;
    uint64_t v25 = 0;
    *a3 = v6;
    goto LABEL_28;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v18 = 0;
  char v16 = __p;
  if ((*(unsigned int (**)(char *, void *))(*(void *)v6 + 48))(v6, &llvm::ErrorList::ID))
  {
    uint64_t v7 = (uint64_t *)*((void *)v6 + 1);
    uint64_t v8 = (uint64_t *)*((void *)v6 + 2);
    if (v7 == v8)
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v9 = 0;
      do
      {
        long long v23 = v9;
        uint64_t v10 = *v7;
        uint64_t *v7 = 0;
        uint64_t v21 = v10;
        sub_1CC1CC8DC(&v22, &v21, (uint64_t *)&v16);
        sub_1CD451630(&v23, &v22, &v24);
        uint64_t v9 = v24;
        uint64_t v24 = 0;
        if (v22) {
          (*(void (**)(char *))(*(void *)v22 + 8))(v22);
        }
        uint64_t v11 = v21;
        uint64_t v21 = 0;
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
        if (v23) {
          (*(void (**)(char *))(*(void *)v23 + 8))(v23);
        }
        ++v7;
      }
      while (v7 != v8);
    }
    unsigned int v20 = v9;
    goto LABEL_19;
  }
  uint64_t v24 = v6;
  sub_1CC1CC8DC(&v20, &v24, (uint64_t *)&v16);
  uint64_t v6 = v24;
  if (v24) {
LABEL_19:
  }
    (*(void (**)(char *))(*(void *)v6 + 8))(v6);
  int v13 = SHIBYTE(v18);
  if (a4)
  {
    if (v18 >= 0) {
      uint64_t v14 = __p;
    }
    else {
      uint64_t v14 = (void **)__p[0];
    }
    *a4 = strdup((const char *)v14);
  }
  *a3 = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = 1;
LABEL_28:
  sub_1CC1CC83C((uint64_t)&v25);
  return v12;
}

uint64_t LLVMGetBitcodeModuleInContext2(char *a1, const llvm::MemoryBuffer *a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a2;
  llvm::getOwningLazyBitcodeModule(&v7, (uint64_t)v8);
  sub_1CC1CC3D8(a1, (uint64_t)v8, (uint64_t)&v9);
  sub_1CC1CC83C((uint64_t)v8);
  if ((v10 & 1) == 0)
  {
    std::system_category();
    uint64_t v5 = v9;
LABEL_5:
    uint64_t result = 0;
    goto LABEL_6;
  }
  uint64_t v5 = v9;
  if (!v9) {
    goto LABEL_5;
  }
  uint64_t v5 = 0;
  uint64_t result = 1;
LABEL_6:
  *a3 = v5;
  return result;
}

uint64_t LLVMGetBitcodeModule(const llvm::MemoryBuffer *a1, char **a2, char **a3)
{
  uint64_t v6 = LLVMGetGlobalContext();

  return LLVMGetBitcodeModuleInContext(v6, a1, a2, a3);
}

uint64_t LLVMGetBitcodeModule2(const llvm::MemoryBuffer *a1, void *a2)
{
  uint64_t v4 = (char *)LLVMGetGlobalContext();

  return LLVMGetBitcodeModuleInContext2(v4, a1, a2);
}

void sub_1CC1CC830(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t sub_1CC1CC83C(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 8);
  uint64_t v2 = *(llvm::Module **)result;
  *(void *)uint64_t result = 0;
  if (v1)
  {
    if (v2)
    {
      uint64_t v3 = result;
      (*(void (**)(llvm::Module *))(*(void *)v2 + 8))(v2);
      return v3;
    }
  }
  else if (v2)
  {
    uint64_t v5 = result;
    uint64_t v4 = v2;
    llvm::Module::~Module(v2);
    MEMORY[0x1D25D9CE0](v4, 0x10B2C407FF26C1CLL);
    return v5;
  }
  return result;
}

uint64_t sub_1CC1CC8DC(void *a1, void *a2, uint64_t *a3)
{
  uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  uint64_t v7 = *a2;
  *a2 = 0;
  if (result)
  {
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v7 + 24))(&v10, v7);
    uint64_t v8 = *a3;
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    long long v9 = v10;
    *(void *)(v8 + 16) = v11;
    *(_OWORD *)uint64_t v8 = v9;
    *a1 = 0;
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  else
  {
    *a1 = v7;
  }
  return result;
}

uint64_t llvm::errorToErrorCodeAndEmitErrors(uint64_t a1, char **a2)
{
  uint64_t v2 = *a2;
  LODWORD(v13[0]) = 0;
  if (v2)
  {
    v13[1] = std::system_category();
    uint64_t v5 = *a2;
    *a2 = 0;
    v12[0] = v13;
    v12[1] = a1;
    if (v5)
    {
      if ((*(unsigned int (**)(char *, void *))(*(void *)v5 + 48))(v5, &llvm::ErrorList::ID))
      {
        uint64_t v6 = (uint64_t *)*((void *)v5 + 1);
        uint64_t v7 = (uint64_t *)*((void *)v5 + 2);
        if (v6 == v7)
        {
          uint64_t v8 = 0;
        }
        else
        {
          uint64_t v8 = 0;
          do
          {
            uint64_t v17 = v8;
            uint64_t v9 = *v6;
            uint64_t *v6 = 0;
            uint64_t v15 = v9;
            sub_1CC1EB82C(&v16, &v15, (uint64_t)v12);
            sub_1CD451630(&v17, &v16, &v18);
            uint64_t v8 = v18;
            uint64_t v18 = 0;
            if (v16) {
              (*(void (**)(char *))(*(void *)v16 + 8))(v16);
            }
            uint64_t v10 = v15;
            uint64_t v15 = 0;
            if (v10) {
              (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
            }
            if (v17) {
              (*(void (**)(char *))(*(void *)v17 + 8))(v17);
            }
            ++v6;
          }
          while (v6 != v7);
        }
        uint64_t v14 = v8;
        (*(void (**)(char *))(*(void *)v5 + 8))(v5);
      }
      else
      {
        uint64_t v18 = v5;
        sub_1CC1EB82C(&v14, &v18, (uint64_t)v12);
        if (v18) {
          (*(void (**)(char *))(*(void *)v18 + 8))(v18);
        }
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
  }
  else
  {
    std::system_category();
  }
  return v13[0];
}

void llvm::readWideAPInt(unint64_t *a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char v16[8] = *MEMORY[0x1E4F143B8];
  v15[0] = v16;
  v15[1] = (void *)0x800000000;
  sub_1CBF7C198((uint64_t)v15, a2, 0);
  uint64_t v8 = (uint64_t *)v15[0];
  if (a2)
  {
    uint64_t v9 = 8 * a2;
    uint64_t v10 = (unint64_t *)v15[0];
    do
    {
      unint64_t v12 = *a1++;
      unint64_t v11 = v12;
      unint64_t v13 = -(uint64_t)(v12 >> 1);
      if (v12 == 1) {
        unint64_t v13 = 0x8000000000000000;
      }
      if (v11) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v11 >> 1;
      }
      *v10++ = v14;
      v9 -= 8;
    }
    while (v9);
  }
  *(_DWORD *)(a4 + 8) = a3;
  llvm::APInt::initFromArray(a4, v8);
  if (v15[0] != v16) {
    free(v15[0]);
  }
}

uint64_t llvm::getBitcodeModuleList@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  long long v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  llvm::getBitcodeFileContents((uint64_t)v6, (uint64_t)&v7);
  if (v9)
  {
    uint64_t v4 = v7;
    *(unsigned char *)(a2 + 24) |= 1u;
  }
  else
  {
    *(unsigned char *)(a2 + 24) &= ~1u;
    uint64_t v4 = v7;
    *(_OWORD *)(a2 + 8) = v8;
    long long v8 = 0uLL;
  }
  *(void *)a2 = v4;
  uint64_t v7 = 0;
  return sub_1CC1EBA40((uint64_t)&v7);
}

char **llvm::getBitcodeFileContents@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  sub_1CC1CD35C((uint64_t)&v57, *(unsigned __int8 **)a1, *(void *)(a1 + 8));
  if (v61)
  {
    uint64_t v42 = v57;
    uint64_t v57 = 0;
    *(unsigned char *)(a2 + 56) |= 1u;
    *(void *)a2 = v42;
    return sub_1CC1EBAAC(&v57);
  }
  unint64_t v4 = 8 * v59 - v60;
  unint64_t v5 = v4 >> 3;
  if ((v4 >> 3) + 8 < v58)
  {
    uint64_t v6 = 0;
    unint64_t v49 = 0;
    uint64_t v51 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    char v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      sub_1CC1CA5F4((uint64_t)&v57, 0, (uint64_t)v55);
      if (v56) {
        break;
      }
      if (v55[0] < 2)
      {
        *(void *)&long long v52 = "Malformed block";
        __int16 v54 = 259;
        sub_1CC1CD704();
      }
      if (v55[0] != 2)
      {
        if (v55[0] != 3)
        {
          int v12 = 0;
          goto LABEL_13;
        }
        llvm::BitstreamCursor::skipRecord((llvm::BitstreamCursor *)&v57, v55[1], (uint64_t)&v52);
        if ((BYTE8(v52) & 1) == 0) {
          goto LABEL_44;
        }
LABEL_43:
        uint64_t v11 = v52;
        if (!(void)v52)
        {
LABEL_44:
          int v12 = 2;
          goto LABEL_13;
        }
LABEL_11:
        *(unsigned char *)(a2 + 56) |= 1u;
        *(void *)a2 = v11;
        int v12 = 1;
        goto LABEL_13;
      }
      if ((int)v55[1] > 22)
      {
        if (v55[1] == 23)
        {
          sub_1CC1CD7C8((uint64_t)&v52, (llvm::BitstreamCursor *)&v57, 23);
          if (v53)
          {
            uint64_t v25 = v52;
            *(void *)&long long v52 = 0;
            *(unsigned char *)(a2 + 56) |= 1u;
            *(void *)a2 = v25;
            int v12 = 1;
          }
          else
          {
            for (uint64_t i = v9; i != v10; i -= 64)
            {
              if (*((void *)i - 3)) {
                break;
              }
              *((_OWORD *)i - 2) = v52;
            }
            int v12 = 2;
            if (v7 && !v6)
            {
              uint64_t v6 = *((void *)&v52 + 1);
              uint64_t v51 = v52;
            }
          }
          if ((v53 & 1) != 0 && (void)v52) {
            (*(void (**)(void))(*(void *)v52 + 8))(v52);
          }
        }
        else
        {
          if (v55[1] != 25)
          {
LABEL_42:
            sub_1CC1C6524((uint64_t)&v57, &v52);
            goto LABEL_43;
          }
          sub_1CC1CD7C8((uint64_t)&v52, (llvm::BitstreamCursor *)&v57, 25);
          if (v53)
          {
            uint64_t v11 = v52;
            goto LABEL_11;
          }
          int v12 = 2;
          if (!v7)
          {
            uint64_t v7 = *((void *)&v52 + 1);
            uint64_t v8 = v52;
          }
        }
      }
      else
      {
        if (v55[1] == 8)
        {
          uint64_t v14 = v7;
          uint64_t v47 = v8;
          uint64_t v48 = v6;
          uint64_t v19 = v51;
          unint64_t v20 = -1;
        }
        else
        {
          if (v55[1] != 13) {
            goto LABEL_42;
          }
          uint64_t v14 = v7;
          uint64_t v48 = v6;
          uint64_t v15 = v59;
          uint64_t v16 = v60;
          sub_1CC1C6524((uint64_t)&v57, &v52);
          uint64_t v17 = v52;
          if ((void)v52) {
            goto LABEL_63;
          }
          sub_1CC1CA5F4((uint64_t)&v57, 0, (uint64_t)&v52);
          if (BYTE8(v52))
          {
            uint64_t v17 = v52;
LABEL_63:
            *(unsigned char *)(a2 + 56) |= 1u;
            *(void *)a2 = v17;
            int v12 = 1;
LABEL_64:
            uint64_t v6 = v48;
            uint64_t v7 = v14;
            goto LABEL_13;
          }
          if ((void)v52 != 0x800000002)
          {
            *(void *)&long long v52 = "Malformed block";
            __int16 v54 = 259;
            sub_1CC1CD704();
          }
          uint64_t v47 = v8;
          uint64_t v18 = v16;
          uint64_t v19 = v51;
          unint64_t v20 = 8 * v15 - ((v4 & 0xFFFFFFFFFFFFFFF8) + v18);
        }
        unint64_t v46 = v20;
        uint64_t v21 = v59;
        uint64_t v22 = v60;
        sub_1CC1C6524((uint64_t)&v57, &v52);
        uint64_t v23 = v52;
        uint64_t v51 = v19;
        if ((void)v52)
        {
          *(unsigned char *)(a2 + 56) |= 1u;
          *(void *)a2 = v23;
          int v12 = 1;
LABEL_52:
          uint64_t v8 = v47;
          goto LABEL_64;
        }
        unint64_t v26 = 8 * v21 - ((v4 & 0xFFFFFFFFFFFFFFF8) + v22);
        uint64_t v27 = (char *)(((8 * v59 - (unint64_t)v60) >> 3) - v5);
        unint64_t v28 = &v57[v5];
        unint64_t v29 = *(char **)(a1 + 16);
        unsigned int v30 = *(char **)(a1 + 24);
        if (v9 < v49)
        {
          *(void *)char v9 = v28;
          *((void *)v9 + 1) = v27;
          *((void *)v9 + 2) = v29;
          *((void *)v9 + 3) = v30;
          *((void *)v9 + 4) = 0;
          *((void *)v9 + 5) = 0;
          *((void *)v9 + 6) = v46;
          *((void *)v9 + 7) = v26;
          v9 += 64;
          int v12 = 2;
          goto LABEL_52;
        }
        uint64_t v31 = (v9 - v10) >> 6;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 58) {
          abort();
        }
        uint64_t v7 = v14;
        if ((v49 - v10) >> 5 > v32) {
          unint64_t v32 = (v49 - v10) >> 5;
        }
        if ((unint64_t)(v49 - v10) >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v33 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v32;
        }
        if (v33)
        {
          unsigned int v45 = v28;
          uint64_t v50 = *(char **)(a1 + 16);
          if (v33 >> 58) {
            sub_1CB833614();
          }
          unint64_t v34 = v26;
          unint64_t v44 = v33;
          size_t v35 = (char *)operator new(v33 << 6);
          unint64_t v33 = v44;
          unint64_t v28 = v45;
          unint64_t v26 = v34;
          unint64_t v29 = v50;
        }
        else
        {
          size_t v35 = 0;
        }
        uint64_t v36 = (char **)&v35[64 * v31];
        *uint64_t v36 = v28;
        v36[1] = v27;
        v36[2] = v29;
        v36[3] = v30;
        v36[4] = 0;
        v36[5] = 0;
        v36[6] = (char *)v46;
        v36[7] = (char *)v26;
        if (v9 == v10)
        {
          char v41 = v9;
          uint64_t v10 = &v35[64 * v31];
          uint64_t v6 = v48;
        }
        else
        {
          int v37 = &v35[64 * v31];
          uint64_t v6 = v48;
          do
          {
            long long v38 = *((_OWORD *)v9 - 4);
            long long v39 = *((_OWORD *)v9 - 3);
            long long v40 = *((_OWORD *)v9 - 1);
            *((_OWORD *)v37 - 2) = *((_OWORD *)v9 - 2);
            *((_OWORD *)v37 - 1) = v40;
            *((_OWORD *)v37 - 4) = v38;
            *((_OWORD *)v37 - 3) = v39;
            v37 -= 64;
            v9 -= 64;
          }
          while (v9 != v10);
          char v41 = v10;
          uint64_t v10 = v37;
        }
        unint64_t v49 = &v35[64 * v33];
        char v9 = (char *)(v36 + 8);
        if (v41) {
          operator delete(v41);
        }
        int v12 = 2;
        uint64_t v8 = v47;
      }
LABEL_13:
      if (v56)
      {
        uint64_t v13 = *(void *)v55;
        *(void *)unint64_t v55 = 0;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
      }
      if ((v12 | 2) != 2)
      {
        if (v10) {
          operator delete(v10);
        }
        return sub_1CC1EBAAC(&v57);
      }
      unint64_t v4 = 8 * v59 - v60;
      unint64_t v5 = v4 >> 3;
      if ((v4 >> 3) + 8 >= v58) {
        goto LABEL_77;
      }
    }
    uint64_t v11 = *(void *)v55;
    *(void *)unint64_t v55 = 0;
    goto LABEL_11;
  }
  uint64_t v10 = 0;
  char v9 = 0;
  unint64_t v49 = 0;
  uint64_t v51 = 0;
  uint64_t v8 = 0;
  uint64_t v7 = 0;
  uint64_t v6 = 0;
LABEL_77:
  *(unsigned char *)(a2 + 56) &= ~1u;
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v49;
  *(void *)(a2 + 24) = v8;
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v51;
  *(void *)(a2 + 48) = v6;
  return sub_1CC1EBAAC(&v57);
}

void sub_1CC1CD35C(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if ((a3 & 3) != 0)
  {
    *(void *)&long long v20 = "Invalid bitcode signature";
    LOWORD(v22) = 259;
    sub_1CC1CD704();
  }
  unint64_t v4 = &a2[a3];
  if (a3 && *a2 == 222 && a2[1] == 192 && a2[2] == 23 && a2[3] == 11)
  {
    if ((a3 & 0xFFFFFFF0) == 0 || (uint64_t v5 = *((unsigned int *)a2 + 2), v6 = *((unsigned int *)a2 + 3), v6 + v5 > a3))
    {
      *(void *)&long long v20 = "Invalid bitcode wrapper header";
      LOWORD(v22) = 259;
      sub_1CC1CD704();
    }
    a2 += v5;
    unint64_t v4 = &a2[v6];
  }
  *(void *)&long long v20 = a2;
  *((void *)&v20 + 1) = v4 - a2;
  long long v21 = 0uLL;
  uint64_t v22 = 0x200000000;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v24 = 0;
  uint64_t v25 = (char *)&v27;
  uint64_t v26 = 0x800000000;
  uint64_t v28 = 0;
  if ((unint64_t)(v4 - a2) <= 3)
  {
    uint64_t v18 = 92;
    uint64_t v19 = std::generic_category();
    *(void *)&long long v31 = "file too small to contain bitcode header";
    sub_1CD06481C();
  }
  char v7 = 0;
  uint64_t v8 = 0;
  LOWORD(v17) = 17218;
  do
  {
    char v9 = v7;
    int v10 = *((char *)&v17 + v8);
    sub_1CC1CA844((uint64_t)&v20, 8u, (uint64_t)&v31);
    if (BYTE8(v31))
    {
      uint64_t v13 = v31;
      goto LABEL_27;
    }
    if ((void)v31 != v10)
    {
      uint64_t v14 = std::generic_category();
      uint64_t v18 = 92;
      uint64_t v19 = v14;
      unint64_t v29 = "file doesn't start with bitcode header";
      sub_1CD06481C();
    }
    char v7 = 1;
    uint64_t v8 = 1;
  }
  while ((v9 & 1) == 0);
  uint64_t v11 = 0;
  long long v31 = xmmword_1CFAC6330;
  while (1)
  {
    int v12 = (const char *)*(unsigned int *)((char *)&v31 + v11);
    sub_1CC1CA844((uint64_t)&v20, 4u, (uint64_t)&v29);
    if (v30) {
      break;
    }
    if (v29 != v12)
    {
      uint64_t v15 = std::generic_category();
      uint64_t v18 = 92;
      uint64_t v19 = v15;
      uint64_t v17 = "file doesn't start with bitcode header";
      sub_1CD06481C();
    }
    v11 += 4;
    if (v11 == 16) {
      goto LABEL_29;
    }
  }
  uint64_t v13 = (uint64_t)v29;
LABEL_27:
  if (v13)
  {
    *(unsigned char *)(a1 + 344) |= 1u;
    *(void *)a1 = v13;
  }
  else
  {
LABEL_29:
    *(unsigned char *)(a1 + 344) &= ~1u;
    *(void *)(a1 + 32) = v22;
    long long v16 = v21;
    *(_OWORD *)a1 = v20;
    *(_OWORD *)(a1 + 16) = v16;
    *(_DWORD *)(a1 + 36) = HIDWORD(v22);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)__p;
    *(void *)(a1 + 56) = v24;
    __p[1] = 0;
    uint64_t v24 = 0;
    __p[0] = 0;
    *(void *)(a1 + 64) = a1 + 80;
    *(void *)(a1 + 72) = 0x800000000;
    if (v26) {
      sub_1CC1CAB0C(a1 + 64, (uint64_t)&v25);
    }
    *(void *)(a1 + 336) = v28;
  }
  sub_1CC1CB3C4(&v25);
  if (__p[0])
  {
    sub_1CC1CAA74((uint64_t)__p, (uint64_t)__p[0]);
    operator delete(__p[0]);
  }
}

void sub_1CC1CD704()
{
  if (!atomic_load_explicit(qword_1EA618B50, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EA618B50, (void *(*)(void))sub_1CC1EB960, (void (*)(void *))sub_1CC1EB9A8);
  }
  operator new();
}

void sub_1CC1CD7C8(uint64_t a1, llvm::BitstreamCursor *this, int a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  llvm::BitstreamCursor::EnterSubBlock(this, 0, a3, v18);
  uint64_t v5 = v18[0];
  if (v18[0])
  {
    *(unsigned char *)(a1 + 16) |= 1u;
    *(void *)a1 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    int v8 = *(unsigned __int8 *)(a1 + 16);
    do
    {
      sub_1CC1CA5F4((uint64_t)this, 0, (uint64_t)&v20);
      if ((v21 & 1) == 0)
      {
        switch((int)v20)
        {
          case 0:
            v18[0] = "Malformed block";
            v19[8] = 259;
            sub_1CC1CD704();
          case 1:
            char v9 = 0;
            v8 &= ~1u;
            *(unsigned char *)(a1 + 16) = v8;
            *(void *)a1 = v6;
            *(void *)(a1 + 8) = v7;
            goto LABEL_21;
          case 2:
            sub_1CC1C6524((uint64_t)this, v18);
            int v10 = v18[0];
            if (!v18[0]) {
              goto LABEL_19;
            }
            char v9 = 0;
            goto LABEL_8;
          case 3:
            uint64_t v14 = 0;
            uint64_t v15 = 0;
            v18[0] = v19;
            v18[1] = (void *)0x100000000;
            llvm::BitstreamCursor::readRecord(this, SHIDWORD(v20), (uint64_t)v18, &v14, (uint64_t)&v16);
            char v11 = v17;
            if (v17)
            {
              uint64_t v12 = v16;
              v8 |= 1u;
              *(unsigned char *)(a1 + 16) = v8;
              *(void *)a1 = v12;
            }
            else if (v16 == 1)
            {
              uint64_t v6 = v14;
              uint64_t v7 = v15;
            }
            if (v18[0] != v19) {
              free(v18[0]);
            }
            if ((v11 & 1) == 0) {
              goto LABEL_19;
            }
            char v9 = 0;
            goto LABEL_21;
          default:
LABEL_19:
            char v9 = 1;
            goto LABEL_21;
        }
      }
      char v9 = 0;
      int v10 = v20;
      long long v20 = 0;
LABEL_8:
      v8 |= 1u;
      *(unsigned char *)(a1 + 16) = v8;
      *(void *)a1 = v10;
LABEL_21:
      if (v21)
      {
        uint64_t v13 = v20;
        long long v20 = 0;
        if (v13) {
          (*(void (**)(void *))(*(void *)v13 + 8))(v13);
        }
      }
    }
    while ((v9 & 1) != 0);
  }
}

void llvm::BitcodeModule::getModuleImpl(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v9 = *a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v12 = 0x200000000;
  memset(v13, 0, sizeof(v13));
  v14[0] = (char *)v15;
  v14[1] = (char *)0x800000000;
  v15[32] = 0;
  uint64_t v7 = 0;
  char v8 = 0;
  unint64_t v3 = *((void *)a1 + 6);
  if (v3 != -1)
  {
    uint64_t v10 = (v3 >> 3) & 0x1FFFFFFFFFFFFFF8;
    LODWORD(v12) = 0;
    if ((v3 & 0x3F) != 0)
    {
      sub_1CC1CA844((uint64_t)&v9, v3 & 0x3F, (uint64_t)&v16);
      if (v17)
      {
        uint64_t v5 = v16;
        if (v16) {
          goto LABEL_19;
        }
      }
    }
    sub_1CC1CE23C((uint64_t)&v16, (llvm::BitstreamCursor *)&v9);
    if (v19)
    {
      uint64_t v5 = v16;
      if (v16) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v7 = v16;
      char v8 = HIBYTE(v18);
    }
  }
  unint64_t v4 = *((void *)a1 + 7);
  uint64_t v10 = (v4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  LODWORD(v12) = 0;
  if ((v4 & 0x3F) == 0 || (sub_1CC1CA844((uint64_t)&v9, v4 & 0x3F, (uint64_t)&v16), (v17 & 1) == 0) || (uint64_t v5 = v16) == 0) {
    operator new();
  }
LABEL_19:
  *(unsigned char *)(a2 + 8) |= 1u;
  *(void *)a2 = v5;
  if (v8 < 0) {
    operator delete(v7);
  }
  sub_1CC1CB3C4(v14);
  if (v13[0])
  {
    sub_1CC1CAA74((uint64_t)v13, (uint64_t)v13[0]);
    operator delete(v13[0]);
  }
}

uint64_t sub_1CC1CE1A8@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(void *)(result + 16) = (a2 >> 3) & 0x1FFFFFFFFFFFFFF8;
  *(_DWORD *)(result + 32) = 0;
  unsigned int v4 = a2 & 0x3F;
  if (v4)
  {
    uint64_t result = sub_1CC1CA844(result, v4, (uint64_t)&v6);
    if (v7) {
      uint64_t v5 = v6;
    }
    else {
      uint64_t v5 = 0;
    }
    *a3 = v5;
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_1CC1CE23C(uint64_t a1, llvm::BitstreamCursor *this)
{
  v30[64] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = &v28;
  llvm::BitstreamCursor::EnterSubBlock(this, 0, 13, &v28);
  char v7 = v28;
  if (v28)
  {
    *(unsigned char *)(a1 + 24) |= 1u;
    *(void *)a1 = v7;
  }
  else
  {
    uint64_t v28 = v30;
    uint64_t v29 = 0x4000000000;
    memset(&__p, 0, sizeof(__p));
    char v8 = *(unsigned char *)(a1 + 24);
    while (1)
    {
      sub_1CC1CA5F4((uint64_t)this, 0, (uint64_t)&v24);
      long long v9 = v24;
      if (v25)
      {
        if (v24)
        {
          *(unsigned char *)(a1 + 24) = v8 | 1;
          *(void *)a1 = v9;
          goto LABEL_29;
        }
      }
      else
      {
        LODWORD(v6) = HIDWORD(v24);
      }
      int v10 = (v25 & 1) != 0 ? 3 : (int)v24;
      if (v10 != 3) {
        break;
      }
      LODWORD(v29) = 0;
      llvm::BitstreamCursor::readRecord(this, (int)v6, (uint64_t)&v28, 0, (uint64_t)&v22);
      if (v23)
      {
        char v12 = 0;
        uint64_t v13 = v22;
        uint64_t v22 = 0;
        v8 |= 1u;
        *(unsigned char *)(a1 + 24) = v8;
        *(void *)a1 = v13;
      }
      else
      {
        if (v22 == 1)
        {
          sub_1CC1D3108(&__p, (std::string *)v28, (std::string *)((char *)v28 + 8 * v29));
        }
        else
        {
          if (v22 != 2)
          {
            uint64_t v24 = "Invalid value";
            __int16 v27 = 259;
            sub_1CC1CD704();
          }
          if (*(_DWORD *)v28)
          {
            unint64_t v11 = *(unsigned int *)v28 | v3 & 0xFFFFFFFF00000000;
            v15[0] = "Incompatible epoch: Bitcode '";
            v15[2] = v11;
            __int16 v16 = 2051;
            v17[0] = v15;
            v17[2] = "' vs current: '";
            __int16 v18 = 770;
            v19[0] = v17;
            v19[2] = v2 & 0xFFFFFFFF00000000;
            __int16 v20 = 2306;
            uint64_t v24 = (const char *)v19;
            uint64_t v26 = "'";
            __int16 v27 = 770;
            sub_1CC1CD704();
          }
        }
        char v12 = 1;
      }
      if (v23)
      {
        uint64_t v14 = v22;
        uint64_t v22 = 0;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
      }
      if ((v12 & 1) == 0) {
        goto LABEL_29;
      }
    }
    if (v10 != 1)
    {
      uint64_t v24 = "Malformed block";
      __int16 v27 = 259;
      sub_1CC1CD704();
    }
    *(unsigned char *)(a1 + 24) = v8 & 0xFE;
    *(std::string *)a1 = __p;
    memset(&__p, 0, sizeof(__p));
LABEL_29:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v28 != v30) {
      free(v28);
    }
  }
}

uint64_t sub_1CC1CE558(uint64_t result, void *a2)
{
  uint64_t v2 = (void *)result;
  if (*((unsigned char *)a2 + 1641)) {
    goto LABEL_12;
  }
  *((unsigned char *)a2 + 1641) = 1;
  if (!a2[201])
  {
LABEL_7:
    uint64_t v5 = (void *)a2[202];
    uint64_t v6 = (void *)a2[203];
    if (v5 != v6)
    {
      while (1)
      {
        uint64_t result = (*(uint64_t (**)(void *, void))(*a2 + 16))(a2, *v5);
        if (*v2) {
          return result;
        }
        if (++v5 == v6)
        {
          uint64_t v5 = (void *)a2[202];
          break;
        }
      }
    }
    a2[203] = v5;
    *((unsigned char *)a2 + 1641) = 0;
LABEL_12:
    *uint64_t v2 = 0;
    return result;
  }
  while (1)
  {
    uint64_t v4 = *(void *)(*(void *)(a2[197] + ((a2[200] >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (a2[200] & 0x1FFLL));
    sub_1CD4F8464((uint64_t)(a2 + 196));
    uint64_t result = sub_1CC0A2428(a2[193], *((_DWORD *)a2 + 390), v4, v7);
    if (result)
    {
      if ((*(unsigned char *)(v4 + 34) & 0x80) == 0)
      {
        v7[0] = "Never resolved function from blockaddress";
        __int16 v8 = 259;
        sub_1CC1DDE58((int)v2, (uint64_t)(a2 + 1), (llvm::Twine *)v7);
      }
      uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*a2 + 16))(a2, v4);
      if (*v2) {
        return result;
      }
    }
    if (!a2[201]) {
      goto LABEL_7;
    }
  }
}

void llvm::BitcodeModule::readSummary(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, void **a6@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  long long v23 = *(_OWORD *)a1;
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  uint64_t v28 = (char *)&v30;
  uint64_t v29 = 0x800000000;
  uint64_t v31 = 0;
  unint64_t v12 = *(void *)(a1 + 56);
  *((void *)&v24 + 1) = 0;
  *(void *)&long long v24 = (v12 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v25 = 0x200000000;
  if (v12 & 0x3F) != 0 && (sub_1CC1CA844((uint64_t)&v23, v12 & 0x3F, (uint64_t)&v21), (v22))
  {
    uint64_t v14 = v21;
    *a6 = v21;
    if (v14) {
      goto LABEL_9;
    }
  }
  else
  {
    *a6 = 0;
  }
  uint64_t v16 = v25;
  v15[0] = v23;
  v15[1] = v24;
  *(_OWORD *)std::string __p = v26;
  uint64_t v13 = v27;
  uint64_t v27 = 0;
  long long v26 = 0uLL;
  uint64_t v18 = v13;
  v19[0] = (char *)v20;
  v19[1] = (char *)0x800000000;
  if (v29) {
    sub_1CC1CAB0C((uint64_t)v19, (uint64_t)&v28);
  }
  v20[32] = v31;
  sub_1CC1CE8B0((uint64_t)&v21, v15, *(void *)(a1 + 32), *(void *)(a1 + 40), a2, a3, a4, a5);
  sub_1CC1CB3C4(v19);
  if (__p[0])
  {
    sub_1CC1CAA74((uint64_t)__p, (uint64_t)__p[0]);
    operator delete(__p[0]);
  }
  sub_1CC1CEA80(a6, (uint64_t)&v21);
  sub_1CC1D209C((uint64_t)&v21);
LABEL_9:
  sub_1CC1CB3C4(&v28);
  if ((void)v26)
  {
    sub_1CC1CAA74((uint64_t)&v26, v26);
    operator delete((void *)v26);
  }
}

uint64_t sub_1CC1CE8B0(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  v31[34] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = (void *)*((void *)a2 + 5);
  long long v23 = *a2;
  long long v24 = a2[1];
  int v17 = *((_DWORD *)a2 + 9);
  uint64_t v25 = *((void *)a2 + 4);
  std::string __p = v16;
  uint64_t v18 = *((void *)a2 + 6);
  uint64_t v19 = *((void *)a2 + 7);
  uint64_t v27 = v18;
  uint64_t v28 = v19;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 5) = 0;
  uint64_t v29 = (char *)v31;
  uint64_t v30 = 0x800000000;
  if (*((_DWORD *)a2 + 18))
  {
    sub_1CC1CAB0C((uint64_t)&v29, (uint64_t)(a2 + 4));
    int v17 = HIDWORD(v25);
    uint64_t v16 = __p;
    uint64_t v18 = v27;
    uint64_t v19 = v28;
    BOOL v20 = v30 == 0;
  }
  else
  {
    BOOL v20 = 1;
  }
  uint64_t v21 = *((void *)a2 + 42);
  *(_OWORD *)(a1 + 24) = v23;
  v31[32] = v21;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_OWORD *)(a1 + 40) = v24;
  *(void *)(a1 + 56) = v25;
  *(void *)(a1 + 64) = v16;
  *(_DWORD *)(a1 + 60) = v17;
  *(void *)(a1 + 72) = v18;
  *(void *)(a1 + 80) = v19;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  std::string __p = 0;
  *(void *)(a1 + 88) = a1 + 104;
  *(void *)(a1 + 96) = 0x800000000;
  if (!v20) {
    sub_1CC1CAB0C(a1 + 88, (uint64_t)&v29);
  }
  *(void *)(a1 + 368) = a3;
  *(void *)(a1 + 376) = a4;
  *(unsigned char *)(a1 + 384) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 360) = a1;
  sub_1CC1CB3C4(&v29);
  if (__p)
  {
    sub_1CC1CAA74((uint64_t)&__p, (uint64_t)__p);
    operator delete(__p);
  }
  *(void *)(a1 + 416) = a5;
  *(_WORD *)(a1 + 424) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 480) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = a6;
  *(void *)(a1 + 520) = a7;
  *(_DWORD *)(a1 + 528) = a8;
  return a1;
}

void sub_1CC1CEA80(void **a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v419 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::BitstreamCursor *)(a2 + 24);
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 24), 0, 8, a1);
  if (!*a1)
  {
    int v5 = 0;
    uint64_t v6 = v397;
    v395 = v397;
    uint64_t v396 = 0x4000000000;
    v372 = (uint64_t *)(v2 + 464);
    uint64_t v376 = v2 + 440;
    v377 = (const std::string::value_type *)(v2 + 488);
    v378[0] = 0;
    v378[1] = 0;
    unsigned int v379 = 0;
    while (1)
    {
      sub_1CC1CA5F4((uint64_t)v4, 0, (uint64_t)v393);
      if (v394)
      {
        __int16 v8 = *(void **)v393;
        *(void *)v393 = 0;
        *a1 = v8;
        goto LABEL_7;
      }
      int v7 = v393[1];
      switch(v393[0])
      {
        case 0u:
          v408 = "Malformed block";
          LOWORD(v411) = 259;
          sub_1CC1DDE58((int)a1, v2, (llvm::Twine *)&v408);
        case 1u:
          *a1 = 0;
          goto LABEL_7;
        case 2u:
          if ((int)v393[1] <= 18)
          {
            if (!v393[1])
            {
              sub_1CC1EA50C(a1, v2);
              goto LABEL_146;
            }
LABEL_51:
            sub_1CC1C6524((uint64_t)v4, a1);
            goto LABEL_146;
          }
          if (v393[1] == 19)
          {
            llvm::BitstreamCursor::EnterSubBlock(v4, 0, 19, a1);
            unint64_t v12 = *a1;
            if (*a1) {
              goto LABEL_147;
            }
            uint64_t v25 = 0;
            v408 = (char *)&v409 + 8;
            *(void *)&long long v409 = 0x4000000000;
            __dst[0] = &v406;
            *(_OWORD *)&__dst[1] = xmmword_1CFAC3020;
            while (1)
            {
LABEL_54:
              sub_1CC1CA5F4((uint64_t)v4, 0, (uint64_t)&v413);
              if (BYTE8(v413))
              {
                std::string::size_type v47 = v413;
LABEL_529:
                *a1 = (void *)v47;
LABEL_151:
                if (__dst[0] != &v406) {
                  free(__dst[0]);
                }
                uint64_t v87 = v408;
                if (v408 == (char *)&v409 + 8)
                {
LABEL_146:
                  unint64_t v12 = *a1;
                  goto LABEL_147;
                }
LABEL_145:
                free(v87);
                goto LABEL_146;
              }
              if (v413 != 2) {
                break;
              }
              sub_1CC1C6524((uint64_t)v4, &v403);
              std::string::size_type v47 = v403.__r_.__value_.__r.__words[0];
              if (BYTE8(v413))
              {
                uint64_t v48 = v413;
                *(void *)&long long v413 = 0;
                if (v48) {
                  (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
                }
              }
              if (v47) {
                goto LABEL_529;
              }
            }
            if (v413 == 1)
            {
              *a1 = 0;
              goto LABEL_151;
            }
            if (!v413)
            {
              *(void *)&long long v413 = "Malformed block";
              LOWORD(v415) = 259;
              sub_1CC1DDE58((int)a1, v2, (llvm::Twine *)&v413);
            }
            LODWORD(v409) = 0;
            llvm::BitstreamCursor::readRecord(v4, SDWORD1(v413), (uint64_t)&v408, 0, (uint64_t)&v417);
            if ((v418 & 1) == 0)
            {
              if (v417 == 2)
              {
                if (v409 != 5)
                {
                  *(void *)&long long v391 = v409;
                  __int16 v404 = 266;
                  v403.__r_.__value_.__r.__words[0] = (std::string::size_type)&v391;
                  llvm::Twine::str((llvm::Twine *)&v403, &v392);
                  uint64_t v32 = std::string::insert(&v392, 0, "Invalid hash length ");
                  unint64_t v33 = (unint64_t *)v32->__r_.__value_.__r.__words[2];
                  *(_OWORD *)std::string __p = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
                  v401 = v33;
                  v32->__r_.__value_.__l.__size_ = 0;
                  v32->__r_.__value_.__r.__words[2] = 0;
                  v32->__r_.__value_.__r.__words[0] = 0;
                  LOWORD(v415) = 260;
                  *(void *)&long long v413 = __p;
                  sub_1CC1DDE58((int)a1, v2, (llvm::Twine *)&v413);
                }
                if (!v25)
                {
                  *(void *)&long long v413 = "Invalid hash that does not follow a module path";
                  LOWORD(v415) = 259;
                  sub_1CC1DDE58((int)a1, v2, (llvm::Twine *)&v413);
                }
                uint64_t v28 = (uint64_t *)v408;
                uint64_t v29 = v25 + 2;
                uint64_t v30 = 8 * v409;
                do
                {
                  uint64_t v31 = *v28++;
                  *v29++ = v31;
                  v30 -= 8;
                }
                while (v30);
                uint64_t v25 = 0;
              }
              else if (v417 == 1)
              {
                v403.__r_.__value_.__r.__words[0] = 0;
                v403.__r_.__value_.__r.__words[0] = *(void *)v408;
                if (!v409)
                {
                  *(void *)&long long v413 = "Invalid record";
                  LOWORD(v415) = 259;
                  sub_1CC1DDE58((int)a1, v2, (llvm::Twine *)&v413);
                }
                uint64_t v35 = (v409 - 1) & 0x1FFFFFFFFFFFFFFFLL;
                uint64_t v36 = (char *)__dst[1];
                if (__dst[2] < (char *)__dst[1] + v35) {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod();
                }
                if (v409 != 1)
                {
                  int v37 = (uint64_t *)((char *)v408 + 8);
                  long long v38 = (char *)__dst[0] + (unint64_t)__dst[1];
                  uint64_t v39 = 8 * v409 - 8;
                  do
                  {
                    uint64_t v40 = *v37++;
                    *v38++ = v40;
                    v39 -= 8;
                  }
                  while (v39);
                  uint64_t v36 = (char *)__dst[1];
                }
                size_t v41 = (size_t)&v36[v35];
                __dst[1] = &v36[v35];
                uint64_t v42 = *(void *)(v2 + 416);
                uint64_t v415 = 0;
                int v416 = 0;
                *(void **)&long long v413 = __dst[0];
                *((void *)&v413 + 1) = v41;
                long long v414 = v403.__r_.__value_.__r.__words[0];
                unint64_t v43 = sub_1CD4F289C(v42 + 24, (unsigned __int8 *)__dst[0], v41, &v414);
                uint64_t v25 = (void *)*v43;
                uint64_t v44 = *v43 + 40;
                uint64_t v45 = *(void *)*v43;
                unint64_t v46 = sub_1CD4F8990(v372, &v403);
                v46[1] = v44;
                v46[2] = v45;
                __dst[1] = 0;
                char v26 = 1;
LABEL_72:
                if (v418)
                {
                  unint64_t v34 = v417;
                  v417 = 0;
                  if (v34) {
                    (*(void (**)(void *))(*(void *)v34 + 8))(v34);
                  }
                }
                if ((v26 & 1) == 0) {
                  goto LABEL_151;
                }
                goto LABEL_54;
              }
              char v26 = 1;
              goto LABEL_72;
            }
            char v26 = 0;
            uint64_t v27 = v417;
            v417 = 0;
            *a1 = v27;
            goto LABEL_72;
          }
          if (v393[1] != 20 && v393[1] != 24) {
            goto LABEL_51;
          }
          if (*(char *)(v2 + 511) < 0)
          {
            if (!*(void *)(v2 + 496)) {
              goto LABEL_19;
            }
          }
          else if (!*(unsigned char *)(v2 + 511))
          {
            goto LABEL_19;
          }
          uint64_t v49 = *(void *)(v2 + 416);
          uint64_t v50 = *(void **)(v2 + 512);
          size_t v51 = *(void *)(v2 + 520);
          uint64_t v52 = *(unsigned int *)(v2 + 528);
          uint64_t v410 = 0;
          uint64_t v411 = 0;
          int v412 = 0;
          v408 = v50;
          *(void *)&long long v409 = v51;
          *((void *)&v409 + 1) = v52;
          sub_1CD4F289C(v49 + 24, (unsigned __int8 *)v50, v51, (long long *)((char *)&v409 + 8));
LABEL_19:
          uint64_t v11 = *(void *)(v2 + 432);
          if (!v11) {
            goto LABEL_23;
          }
          if (*(unsigned char *)(v2 + 384))
          {
            *a1 = 0;
            goto LABEL_22;
          }
          sub_1CC1E35A0((uint64_t)&v403, v11, (uint64_t)v4);
          if (v403.__r_.__value_.__s.__data_[8])
          {
            std::string::size_type v78 = v403.__r_.__value_.__r.__words[0];
            *a1 = (void *)v403.__r_.__value_.__r.__words[0];
            if (!v78) {
              goto LABEL_22;
            }
            goto LABEL_7;
          }
          std::string::size_type v54 = v403.__r_.__value_.__r.__words[0];
          llvm::BitstreamCursor::EnterSubBlock(v4, 0, 14, a1);
          if (!*a1)
          {
            uint64_t v88 = (void *)v378[0];
            v408 = (char *)&v409 + 8;
            *(void *)&long long v409 = 0x4000000000;
            __dst[0] = &v406;
            *(_OWORD *)&__dst[1] = xmmword_1CFAC3020;
            unsigned int v374 = v379;
            while (1)
            {
              while (1)
              {
                sub_1CC1CA5F4((uint64_t)v4, 0, (uint64_t)&v413);
                if (BYTE8(v413))
                {
                  uint64_t v117 = (void *)v413;
LABEL_531:
                  *a1 = v117;
                  goto LABEL_508;
                }
                if (v413 != 2) {
                  break;
                }
                sub_1CC1C6524((uint64_t)v4, __p);
                uint64_t v117 = __p[0];
                if (BYTE8(v413))
                {
                  uint64_t v118 = v413;
                  *(void *)&long long v413 = 0;
                  if (v118) {
                    (*(void (**)(uint64_t))(*(void *)v118 + 8))(v118);
                  }
                }
                if (v117) {
                  goto LABEL_531;
                }
              }
              if (v413 == 1) {
                break;
              }
              if (!v413)
              {
                *(void *)&long long v413 = "Malformed block";
                LOWORD(v415) = 259;
                sub_1CC1DDE58((int)a1, v2, (llvm::Twine *)&v413);
              }
              LODWORD(v409) = 0;
              llvm::BitstreamCursor::readRecord(v4, SDWORD1(v413), (uint64_t)&v408, 0, (uint64_t)__p);
              if (((uint64_t)__p[1] & 1) == 0)
              {
                if (LODWORD(__p[0]) == 1)
                {
                  if (!v409)
                  {
                    *(void *)&long long v413 = "Invalid record";
                    LOWORD(v415) = 259;
                    sub_1CC1DDE58((int)a1, v2, (llvm::Twine *)&v413);
                  }
                  v364 = v88;
                  uint64_t v97 = v2;
                  uint64_t v98 = (v409 - 1) & 0x1FFFFFFFFFFFFFFFLL;
                  uint64_t v99 = (char *)__dst[1];
                  if (__dst[2] < (char *)__dst[1] + v98) {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod();
                  }
                  if (v409 != 1)
                  {
                    uint64_t v100 = (uint64_t *)((char *)v408 + 8);
                    uint64_t v101 = (char *)__dst[0] + (unint64_t)__dst[1];
                    uint64_t v102 = 8 * v409 - 8;
                    do
                    {
                      uint64_t v103 = *v100++;
                      *v101++ = v103;
                      v102 -= 8;
                    }
                    while (v102);
LABEL_185:
                    uint64_t v99 = (char *)__dst[1];
                  }
                }
                else
                {
                  if (LODWORD(__p[0]) != 3)
                  {
                    if (LODWORD(__p[0]) == 5)
                    {
                      v363 = v88;
                      unint64_t v92 = *((void *)v408 + 1);
                      LODWORD(v413) = *(void *)v408;
                      uint64_t v93 = *(void *)(v2 + 416);
                      uint64_t v94 = *(unsigned __int8 *)(v93 + 133);
                      unint64_t v95 = (unint64_t)sub_1CD4ADB54(v93, v92) & 0xFFFFFFFFFFFFFFF8 | v94;
                      unsigned int v96 = sub_1CD4F84C8(v376, (int *)&v413);
                      *((void *)v96 + 1) = v95;
                      *((void *)v96 + 2) = v92;
                      uint64_t v88 = v363;
                    }
                    char v89 = 1;
                    goto LABEL_171;
                  }
                  if (v409 < 2)
                  {
                    *(void *)&long long v413 = "Invalid record";
                    LOWORD(v415) = 259;
                    sub_1CC1DDE58((int)a1, v2, (llvm::Twine *)&v413);
                  }
                  v364 = v88;
                  uint64_t v97 = v2;
                  uint64_t v98 = (v409 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
                  uint64_t v99 = (char *)__dst[1];
                  if (__dst[2] < (char *)__dst[1] + v98) {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod();
                  }
                  if (v409 != 2)
                  {
                    unsigned int v104 = (uint64_t *)((char *)v408 + 16);
                    unint64_t v105 = (char *)__dst[0] + (unint64_t)__dst[1];
                    uint64_t v106 = 8 * v409 - 16;
                    do
                    {
                      uint64_t v107 = *v104++;
                      *v105++ = v107;
                      v106 -= 8;
                    }
                    while (v106);
                    goto LABEL_185;
                  }
                }
                uint64_t v2 = v97;
                unsigned int v108 = &v99[v98];
                __dst[1] = v108;
                int v109 = *(void *)v408;
                int v110 = sub_1CBA86078((uint64_t)v364, v374, v109)[1];
                char v111 = *(unsigned char *)(v2 + 511);
                BOOL v112 = v111 < 0;
                if (v111 >= 0) {
                  uint64_t v113 = v377;
                }
                else {
                  uint64_t v113 = *(const std::string::value_type **)(v2 + 488);
                }
                std::string::size_type v114 = v111 & 0x7F;
                if (v112) {
                  std::string::size_type v115 = *(void *)(v2 + 496);
                }
                else {
                  std::string::size_type v115 = v114;
                }
                size_t v116 = (size_t)v108;
                uint64_t v88 = v364;
                sub_1CC1EB028(v2, v109, (const std::string::value_type *)__dst[0], v116, v110, v113, v115);
                __dst[1] = 0;
                char v89 = 1;
                goto LABEL_171;
              }
              char v89 = 0;
              uint64_t v90 = __p[0];
              __p[0] = 0;
              *a1 = v90;
LABEL_171:
              if ((uint64_t)__p[1])
              {
                BOOL v91 = __p[0];
                __p[0] = 0;
                if (v91) {
                  (*(void (**)(void *))(*(void *)v91 + 8))(v91);
                }
              }
              if ((v89 & 1) == 0) {
                goto LABEL_508;
              }
            }
            *(void *)(v2 + 40) = (v54 >> 3) & 0x1FFFFFFFFFFFFFF8;
            *(_DWORD *)(v2 + 56) = 0;
            if ((v54 & 0x3F) == 0
              || (sub_1CC1CA844((uint64_t)v4, v54 & 0x3F, (uint64_t)&v413), (BYTE8(v413) & 1) == 0)
              || (uint64_t v340 = v413, *a1 = (void *)v413, !v340))
            {
              *a1 = 0;
            }
LABEL_508:
            if (__dst[0] != &v406) {
              free(__dst[0]);
            }
            if (v408 != (char *)&v409 + 8) {
              free(v408);
            }
            if (!*a1)
            {
LABEL_22:
              *(unsigned char *)(v2 + 425) = 1;
LABEL_23:
              *(unsigned char *)(v2 + 424) = 1;
              llvm::BitstreamCursor::EnterSubBlock(v4, 0, v7, a1);
              unint64_t v12 = *a1;
              if (!*a1)
              {
                v408 = (char *)&v409 + 8;
                *(void *)&long long v409 = 0x4000000000;
                while (1)
                {
                  sub_1CC1CA5F4((uint64_t)v4, 0, (uint64_t)__dst);
                  if ((uint64_t)__dst[1]) {
                    break;
                  }
                  if (LODWORD(__dst[0]) != 2)
                  {
                    if (LODWORD(__dst[0]) != 3)
                    {
                      __dst[0] = "Invalid Summary Block: record for version expected";
                      LOWORD(v407) = 259;
                      sub_1CC1DDE58((int)a1, v2, (llvm::Twine *)__dst);
                    }
                    llvm::BitstreamCursor::readRecord(v4, SHIDWORD(__dst[0]), (uint64_t)&v408, 0, (uint64_t)&v413);
                    if (BYTE8(v413))
                    {
                      *a1 = (void *)v413;
                    }
                    else
                    {
                      if (v413 != 10)
                      {
                        __dst[0] = "Invalid Summary Block: version expected";
                        LOWORD(v407) = 259;
                        sub_1CC1DDE58((int)a1, v2, (llvm::Twine *)__dst);
                      }
                      unint64_t v390 = 0;
                      std::string::size_type v53 = *(void *)v408;
                      unint64_t v390 = v53;
                      if (v53 - 10 <= 0xFFFFFFFFFFFFFFF6)
                      {
                        __p[0] = "Invalid summary version ";
                        v401 = &v390;
                        __int16 v402 = 3075;
                        v403.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                        v403.__r_.__value_.__r.__words[2] = (std::string::size_type)". Version should be in the range [1-";
                        __int16 v404 = 770;
                        *(void *)&long long v413 = &v403;
                        *(void *)&long long v414 = &llvm::ModuleSummaryIndex::BitcodeSummaryVersion;
                        LOWORD(v415) = 3074;
                        __dst[0] = &v413;
                        __dst[2] = "].";
                        LOWORD(v407) = 770;
                        sub_1CC1DDE58((int)a1, v2, (llvm::Twine *)__dst);
                      }
                      std::string::size_type v355 = v53;
                      v356 = 0;
                      v365 = 0;
                      uint64_t v367 = v2;
                      uint64_t v119 = 0;
                      v357 = 0;
                      v358 = 0;
                      unint64_t v120 = 0;
                      v360 = 0;
                      v361 = 0;
                      v375 = 0;
                      LODWORD(v409) = 0;
                      long long v388 = 0uLL;
                      uint64_t v389 = 0;
                      long long v386 = 0uLL;
                      uint64_t v387 = 0;
                      long long v384 = 0uLL;
                      v385 = 0;
                      v371 = v6;
                      int v369 = v5;
                      while (1)
                      {
                        sub_1CC1CA5F4((uint64_t)v4, 0, (uint64_t)__dst);
                        if ((uint64_t)__dst[1]) {
                          break;
                        }
                        switch(LODWORD(__dst[0]))
                        {
                          case 2:
                            sub_1CC1C6524((uint64_t)v4, &v413);
                            v338 = (void *)v413;
                            if ((uint64_t)__dst[1])
                            {
                              v339 = __dst[0];
                              __dst[0] = 0;
                              if (v339) {
                                (*(void (**)(void *))(*(void *)v339 + 8))(v339);
                              }
                            }
                            if (v338) {
                              goto LABEL_535;
                            }
                            break;
                          case 1:
                            *a1 = 0;
                            goto LABEL_519;
                          case 0:
                            __dst[0] = "Malformed block";
                            LOWORD(v407) = 259;
                            sub_1CC1DDE58((int)a1, v367, (llvm::Twine *)__dst);
                          default:
                            LODWORD(v409) = 0;
                            llvm::BitstreamCursor::readRecord(v4, SHIDWORD(__dst[0]), (uint64_t)&v408, 0, (uint64_t)&v398);
                            if ((v399 & 1) == 0)
                            {
                              char v121 = 1;
                              int v122 = (int)v398;
                              switch((int)v398)
                              {
                                case 1:
                                case 2:
                                case 19:
                                  unint64_t v205 = *((unsigned int *)v408 + 6);
                                  if (v390 < 4)
                                  {
                                    int v341 = 0;
                                    int v207 = 0;
                                    unsigned int v208 = 4;
                                    std::string::size_type v206 = v355;
                                  }
                                  else
                                  {
                                    unint64_t v205 = *((unsigned int *)v408 + 8);
                                    std::string::size_type v206 = v355;
                                    if (v390 == 4)
                                    {
                                      int v341 = 0;
                                      int v207 = 0;
                                      unsigned int v208 = 5;
                                    }
                                    else
                                    {
                                      int v207 = *((_DWORD *)v408 + 10);
                                      if (v390 < 7)
                                      {
                                        int v341 = 0;
                                        unsigned int v208 = 6;
                                      }
                                      else
                                      {
                                        int v341 = *((_DWORD *)v408 + 12);
                                        unsigned int v208 = 7;
                                      }
                                    }
                                  }
                                  BOOL v226 = v206 == 1;
                                  int v227 = v208 + v205;
                                  sub_1CC1EB358(&v382, v367, (void *)v408 + v208, v205);
                                  sub_1CC1EB49C((char **)&v381, v367, (uint64_t)v408 + 8 * v227, v409 - (uint64_t)v227, v226, v122 == 2, v122 == 19);
                                  v228 = v382;
                                  uint64_t v229 = v383 - (void)v382;
                                  unint64_t v230 = ((unint64_t)(v383 - (void)v382) >> 3) - v341;
                                  unint64_t v231 = (v230 - v207);
                                  if (v231 >= v230)
                                  {
                                    int v234 = v230 - v207;
                                  }
                                  else
                                  {
                                    unint64_t v232 = v230 - v231;
                                    v233 = &v382[8 * v231];
                                    do
                                    {
                                      *(void *)v233 |= 2uLL;
                                      v233 += 8;
                                      --v232;
                                    }
                                    while (v232);
                                    unint64_t v231 = v230;
                                    int v234 = v230;
                                  }
                                  unint64_t v235 = v229 >> 3;
                                  if (v235 > v231)
                                  {
                                    unsigned int v236 = v234 + 1;
                                    do
                                    {
                                      *(void *)&v228[8 * v231] |= 4uLL;
                                      unint64_t v231 = v236;
                                      BOOL v20 = v235 > v236++;
                                    }
                                    while (v20);
                                  }
                                  operator new();
                                case 3:
                                  if (v390 < 5) {
                                    uint64_t v291 = 2;
                                  }
                                  else {
                                    uint64_t v291 = 3;
                                  }
                                  sub_1CC1EB358((char **)__dst, v367, (void *)v408 + v291, v409 - v291);
                                  operator new();
                                case 4:
                                case 5:
                                  int v213 = *(_DWORD *)v408;
                                  uint64_t v380 = *((void *)v408 + 1);
                                  long long v214 = (char *)v408 + 32;
                                  int v348 = v213;
                                  if (v390 < 4)
                                  {
                                    int v342 = 0;
                                    LODWORD(v237) = 0;
                                    unsigned int v217 = 5;
                                    std::string::size_type v216 = v355;
                                  }
                                  else
                                  {
                                    int v215 = 0;
                                    std::string::size_type v216 = v355;
                                    if (v390 == 4)
                                    {
                                      unsigned int v217 = 6;
                                      uint64_t v219 = 5;
                                      LODWORD(v237) = 0;
                                    }
                                    else
                                    {
                                      if (v390 == 5)
                                      {
                                        unsigned int v217 = 7;
                                        int v218 = -1;
                                        uint64_t v219 = 5;
                                      }
                                      else
                                      {
                                        if (v390 < 7)
                                        {
                                          int v215 = 0;
                                          unsigned int v217 = 8;
                                          int v218 = -1;
                                        }
                                        else
                                        {
                                          int v215 = *((_DWORD *)v408 + 16);
                                          unsigned int v217 = 9;
                                          int v218 = -2;
                                        }
                                        uint64_t v219 = 6;
                                      }
                                      uint64_t v237 = *((void *)v408 + v217 + v218);
                                    }
                                    int v342 = v215;
                                    long long v214 = (char *)v408 + 8 * v219;
                                  }
                                  BOOL v326 = v216 == 1;
                                  uint64_t v327 = *(void *)v214;
                                  int v328 = v217 + v327;
                                  sub_1CC1EB358(&v382, v367, (void *)v408 + v217, v327);
                                  sub_1CC1EB49C((char **)&v381, v367, (uint64_t)v408 + 8 * v328, v409 - (uint64_t)v328, v326, v122 == 5, 0);
                                  LODWORD(__dst[0]) = v348;
                                  sub_1CD4F84C8(v376, (int *)__dst);
                                  v329 = v382;
                                  uint64_t v330 = v383 - (void)v382;
                                  unint64_t v331 = ((unint64_t)(v383 - (void)v382) >> 3) - v342;
                                  unint64_t v332 = (v331 - v237);
                                  if (v332 >= v331)
                                  {
                                    int v335 = v331 - v237;
                                  }
                                  else
                                  {
                                    unint64_t v333 = v331 - v332;
                                    v334 = &v382[8 * v332];
                                    do
                                    {
                                      *(void *)v334 |= 2uLL;
                                      v334 += 8;
                                      --v333;
                                    }
                                    while (v333);
                                    unint64_t v332 = v331;
                                    int v335 = v331;
                                  }
                                  unint64_t v336 = v330 >> 3;
                                  if (v336 > v332)
                                  {
                                    unsigned int v337 = v335 + 1;
                                    do
                                    {
                                      *(void *)&v329[8 * v332] |= 4uLL;
                                      unint64_t v332 = v337;
                                      BOOL v20 = v336 > v337++;
                                    }
                                    while (v20);
                                  }
                                  operator new();
                                case 6:
                                  *(void *)&long long v413 = *((void *)v408 + 1);
                                  if (v390 < 5) {
                                    uint64_t v314 = 3;
                                  }
                                  else {
                                    uint64_t v314 = 4;
                                  }
                                  sub_1CC1EB358((char **)__dst, v367, (void *)v408 + v314, v409 - v314);
                                  operator new();
                                case 7:
                                  operator new();
                                case 8:
                                  __dst[0] = *((void **)v408 + 1);
                                  operator new();
                                case 9:
                                  __dst[0] = "Name attachment that does not follow a combined record";
                                  LOWORD(v407) = 259;
                                  sub_1CC1DDE58((int)a1, v367, (llvm::Twine *)__dst);
                                case 11:
                                  uint64_t v145 = v409;
                                  if (!v409) {
                                    goto LABEL_211;
                                  }
                                  unint64_t v146 = (char *)v408;
                                  unint64_t v147 = v360;
                                  uint64_t v148 = v360 - v375;
                                  v149 = &v375[(v360 - v375) & 0xFFFFFFFFFFFFFFF8];
                                  if (v409 <= (v358 - v360) >> 3)
                                  {
                                    uint64_t v198 = (char *)v408 + 8 * v409;
                                    uint64_t v199 = v360 - v149;
                                    uint64_t v200 = (v360 - v149) >> 3;
                                    if (v200 >= v409)
                                    {
                                      uint64_t v204 = v360;
                                    }
                                    else
                                    {
                                      unsigned int v201 = (char *)v408;
                                      uint64_t v202 = (char *)v408 + 8 * v200;
                                      size_t v203 = v198 - v202;
                                      memmove(v360, v202, v203);
                                      uint64_t v204 = &v360[v203];
                                      if (v199 < 1)
                                      {
                                        char v121 = 1;
                                        v360 = v204;
                                        goto LABEL_211;
                                      }
                                      uint64_t v198 = v202;
                                      unint64_t v147 = v360;
                                      unint64_t v146 = v201;
                                      v149 = &v375[(v360 - v375) & 0xFFFFFFFFFFFFFFF8];
                                    }
                                    std::string v209 = &v204[-8 * v145];
                                    char v210 = v204;
                                    while (v209 < v147)
                                    {
                                      uint64_t v211 = *(void *)v209;
                                      v209 += 8;
                                      *(void *)char v210 = v211;
                                      v210 += 8;
                                    }
                                    uint64_t v212 = &v149[8 * v145];
                                    if (v204 != v212) {
                                      memmove(&v204[-8 * ((v204 - v212) >> 3)], v149, v204 - v212);
                                    }
                                    if (v198 != v146) {
                                      memmove(v149, v146, v198 - v146);
                                    }
                                    char v121 = 1;
                                    v360 = v210;
                                  }
                                  else
                                  {
                                    uint64_t v150 = v148 >> 3;
                                    unint64_t v151 = (v148 >> 3) + v409;
                                    if (v151 >> 61) {
LABEL_541:
                                    }
                                      abort();
                                    if ((v358 - v375) >> 2 > v151) {
                                      unint64_t v151 = (v358 - v375) >> 2;
                                    }
                                    unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
                                    if ((unint64_t)(v358 - v375) < 0x7FFFFFFFFFFFFFF8) {
                                      unint64_t v152 = v151;
                                    }
                                    unint64_t v359 = v152;
                                    if (v152)
                                    {
                                      if (v152 >> 61) {
LABEL_542:
                                      }
                                        sub_1CB833614();
                                      unint64_t v153 = v408;
                                      uint64_t v154 = (char *)operator new(8 * v152);
                                    }
                                    else
                                    {
                                      unint64_t v153 = v408;
                                      uint64_t v154 = 0;
                                    }
                                    v220 = &v154[8 * v150];
                                    memcpy(v220, v153, 8 * v145);
                                    v221 = v375;
                                    if (v375 == v360)
                                    {
                                      v223 = &v375[(v360 - v375) & 0xFFFFFFFFFFFFFFF8];
                                    }
                                    else
                                    {
                                      uint64_t v222 = 8 * v150;
                                      v223 = &v375[(v360 - v375) & 0xFFFFFFFFFFFFFFF8];
                                      do
                                      {
                                        *(void *)&v154[v222 - 8] = *(void *)&v375[v222 - 8];
                                        v222 -= 8;
                                      }
                                      while (v222);
                                      v220 = v154;
                                    }
                                    v224 = &v154[8 * v145 + (v148 & 0xFFFFFFFFFFFFFFF8)];
                                    int64_t v225 = v360 - v223;
                                    if (v360 != v223)
                                    {
                                      memmove(v224, v223, v360 - v223);
                                      v221 = v375;
                                    }
                                    v358 = &v154[8 * v359];
                                    v360 = &v224[v225];
                                    if (v221) {
                                      operator delete(v221);
                                    }
                                    char v121 = 1;
                                    v375 = v220;
                                  }
                                  goto LABEL_211;
                                case 12:
                                  if (!v409) {
                                    goto LABEL_211;
                                  }
                                  unsigned int v132 = 0;
                                  unint64_t v133 = v361;
                                  int v134 = v356;
                                  do
                                  {
                                    uint64_t v135 = *((void *)v408 + v132);
                                    uint64_t v136 = *((void *)v408 + (v132 | 1));
                                    if (v120 >= v134)
                                    {
                                      uint64_t v137 = (v120 - v133) >> 4;
                                      unint64_t v138 = v137 + 1;
                                      if ((unint64_t)(v137 + 1) >> 60) {
                                        goto LABEL_541;
                                      }
                                      if ((v134 - v133) >> 3 > v138) {
                                        unint64_t v138 = (v134 - v133) >> 3;
                                      }
                                      if ((unint64_t)(v134 - v133) >= 0x7FFFFFFFFFFFFFF0) {
                                        unint64_t v139 = 0xFFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v139 = v138;
                                      }
                                      if (v139)
                                      {
                                        if (v139 >> 60) {
                                          goto LABEL_542;
                                        }
                                        v140 = v133;
                                        v141 = (char *)operator new(16 * v139);
                                        unint64_t v133 = v140;
                                      }
                                      else
                                      {
                                        v141 = 0;
                                      }
                                      unint64_t v142 = &v141[16 * v137];
                                      *(void *)unint64_t v142 = v135;
                                      *((void *)v142 + 1) = v136;
                                      if (v120 == v133)
                                      {
                                        char v144 = &v141[16 * v137];
                                      }
                                      else
                                      {
                                        char v143 = &v141[16 * v137];
                                        do
                                        {
                                          char v144 = v143 - 16;
                                          *((_OWORD *)v143 - 1) = *((_OWORD *)v120 - 1);
                                          v120 -= 16;
                                          v143 -= 16;
                                        }
                                        while (v120 != v133);
                                      }
                                      int v134 = &v141[16 * v139];
                                      unint64_t v120 = v142 + 16;
                                      if (v133) {
                                        operator delete(v133);
                                      }
                                      unint64_t v133 = v144;
                                    }
                                    else
                                    {
                                      *(void *)unint64_t v120 = v135;
                                      *((void *)v120 + 1) = v136;
                                      v120 += 16;
                                    }
                                    v132 += 2;
                                    char v121 = 1;
                                  }
                                  while (v409 != v132);
                                  v356 = v134;
                                  v361 = v133;
                                  goto LABEL_211;
                                case 13:
                                  if (!v409) {
                                    goto LABEL_211;
                                  }
                                  unsigned int v173 = 0;
                                  v174 = v365;
                                  uint64_t v175 = v357;
                                  do
                                  {
                                    uint64_t v176 = *((void *)v408 + v173);
                                    uint64_t v177 = *((void *)v408 + (v173 | 1));
                                    if (v119 >= v175)
                                    {
                                      uint64_t v178 = (v119 - v174) >> 4;
                                      unint64_t v179 = v178 + 1;
                                      if ((unint64_t)(v178 + 1) >> 60) {
                                        goto LABEL_541;
                                      }
                                      if ((v175 - v174) >> 3 > v179) {
                                        unint64_t v179 = (v175 - v174) >> 3;
                                      }
                                      if ((unint64_t)(v175 - v174) >= 0x7FFFFFFFFFFFFFF0) {
                                        unint64_t v180 = 0xFFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v180 = v179;
                                      }
                                      if (v180)
                                      {
                                        if (v180 >> 60) {
                                          goto LABEL_542;
                                        }
                                        unint64_t v181 = v174;
                                        uint64_t v182 = (char *)operator new(16 * v180);
                                        v174 = v181;
                                      }
                                      else
                                      {
                                        uint64_t v182 = 0;
                                      }
                                      unsigned int v183 = &v182[16 * v178];
                                      *(void *)unsigned int v183 = v176;
                                      *((void *)v183 + 1) = v177;
                                      if (v119 == v174)
                                      {
                                        uint64_t v185 = &v182[16 * v178];
                                      }
                                      else
                                      {
                                        uint64_t v184 = &v182[16 * v178];
                                        do
                                        {
                                          uint64_t v185 = v184 - 16;
                                          *((_OWORD *)v184 - 1) = *((_OWORD *)v119 - 1);
                                          v119 -= 16;
                                          v184 -= 16;
                                        }
                                        while (v119 != v174);
                                      }
                                      uint64_t v175 = &v182[16 * v180];
                                      uint64_t v119 = v183 + 16;
                                      if (v174) {
                                        operator delete(v174);
                                      }
                                      v174 = v185;
                                    }
                                    else
                                    {
                                      *(void *)uint64_t v119 = v176;
                                      *((void *)v119 + 1) = v177;
                                      v119 += 16;
                                    }
                                    v173 += 2;
                                    char v121 = 1;
                                  }
                                  while (v409 != v173);
                                  v357 = v175;
                                  v365 = v174;
                                  goto LABEL_211;
                                case 14:
                                  uint64_t v125 = (char *)v408 + 16;
                                  *(_OWORD *)__dst = *(_OWORD *)v408;
                                  int v126 = v409;
                                  uint64_t v127 = 8 * v409;
                                  v406 = 0;
                                  v407 = 0;
                                  __dst[2] = 0;
                                  int64_t v128 = v127 - 16;
                                  if (v127 == 16) {
                                    goto LABEL_221;
                                  }
                                  if (v409 <= 1) {
                                    goto LABEL_541;
                                  }
                                  uint64_t v129 = (char *)operator new(v127 - 16);
                                  uint64_t v130 = &v129[8 * (v128 >> 3)];
                                  __dst[2] = v129;
                                  v407 = v130;
                                  if (v126 != 2) {
                                    memmove(v129, v125, v128);
                                  }
                                  v406 = v130;
LABEL_221:
                                  double v131 = (uint64_t *)&v388;
                                  goto LABEL_262;
                                case 15:
                                  uint64_t v155 = (char *)v408 + 16;
                                  *(_OWORD *)__dst = *(_OWORD *)v408;
                                  int v156 = v409;
                                  uint64_t v157 = 8 * v409;
                                  v406 = 0;
                                  v407 = 0;
                                  __dst[2] = 0;
                                  int64_t v158 = v157 - 16;
                                  if (v157 == 16) {
                                    goto LABEL_261;
                                  }
                                  if (v409 <= 1) {
                                    goto LABEL_541;
                                  }
                                  std::string::size_type v159 = (char *)operator new(v157 - 16);
                                  uint64_t v160 = &v159[8 * (v158 >> 3)];
                                  __dst[2] = v159;
                                  v407 = v160;
                                  if (v156 != 2) {
                                    memmove(v159, v155, v158);
                                  }
                                  v406 = v160;
LABEL_261:
                                  double v131 = (uint64_t *)&v386;
LABEL_262:
                                  sub_1CC1EB688(v131, (uint64_t)__dst);
                                  if (__dst[2]) {
                                    operator delete(__dst[2]);
                                  }
LABEL_264:
                                  char v121 = 1;
                                  goto LABEL_211;
                                case 16:
                                  std::string::size_type v285 = *(void *)v408;
                                  unint64_t v286 = *((void *)v408 + 1);
                                  uint64_t v287 = *(void *)(v367 + 416);
                                  uint64_t v288 = *(unsigned __int8 *)(v287 + 133);
                                  unint64_t v289 = (unint64_t)sub_1CD4ADB54(v287, v286) & 0xFFFFFFFFFFFFFFF8 | v288;
                                  LODWORD(__dst[0]) = v285;
                                  v290 = sub_1CD4F84C8(v376, (int *)__dst);
                                  *((void *)v290 + 1) = v289;
                                  *((void *)v290 + 2) = v286;
                                  char v121 = 1;
                                  goto LABEL_211;
                                case 17:
                                  if (!v409) {
                                    goto LABEL_211;
                                  }
                                  unsigned int v186 = 0;
                                  uint64_t v187 = *(void *)(v367 + 416) + 144;
                                  while (1)
                                  {
                                    size_t v188 = *((void *)v408 + v186 + 1);
                                    if (v188 > 0x7FFFFFFFFFFFFFF7) {
                                      goto LABEL_541;
                                    }
                                    uint64_t v189 = *(void *)(v367 + 368);
                                    uint64_t v190 = *((void *)v408 + v186);
                                    if (v188 >= 0x17)
                                    {
                                      uint64_t v192 = (v188 & 0xFFFFFFFFFFFFFFF8) + 8;
                                      uint64_t v193 = *(void *)(v367 + 368);
                                      if ((v188 | 7) != 0x17) {
                                        uint64_t v192 = v188 | 7;
                                      }
                                      uint64_t v194 = v187;
                                      uint64_t v195 = v192 + 1;
                                      uint64_t v196 = (void **)operator new(v192 + 1);
                                      uint64_t v189 = v193;
                                      unint64_t v191 = v196;
                                      long long v197 = (void *)(v195 | 0x8000000000000000);
                                      uint64_t v187 = v194;
                                      __dst[2] = v197;
                                      __dst[0] = v196;
                                      __dst[1] = (void *)v188;
                                    }
                                    else
                                    {
                                      HIBYTE(__dst[2]) = *((void *)v408 + v186 + 1);
                                      unint64_t v191 = __dst;
                                      if (!v188) {
                                        goto LABEL_313;
                                      }
                                    }
                                    memmove(v191, (const void *)(v189 + v190), v188);
LABEL_313:
                                    *((unsigned char *)v191 + v188) = 0;
                                    sub_1CD4F8CDC(v187, (const void **)__dst, (uint64_t)__dst);
                                    if (SHIBYTE(__dst[2]) < 0) {
                                      operator delete(__dst[0]);
                                    }
                                    v186 += 2;
                                    char v121 = 1;
                                    if (v186 == v409) {
                                      goto LABEL_211;
                                    }
                                  }
                                case 18:
                                  if (!v409) {
                                    goto LABEL_211;
                                  }
                                  unsigned int v161 = 0;
                                  uint64_t v162 = *(void *)(v367 + 416) + 168;
                                  while (1)
                                  {
                                    size_t v163 = *((void *)v408 + v161 + 1);
                                    if (v163 > 0x7FFFFFFFFFFFFFF7) {
                                      goto LABEL_541;
                                    }
                                    uint64_t v164 = *(void *)(v367 + 368);
                                    uint64_t v165 = *((void *)v408 + v161);
                                    if (v163 >= 0x17)
                                    {
                                      uint64_t v167 = (v163 & 0xFFFFFFFFFFFFFFF8) + 8;
                                      uint64_t v168 = *(void *)(v367 + 368);
                                      if ((v163 | 7) != 0x17) {
                                        uint64_t v167 = v163 | 7;
                                      }
                                      uint64_t v169 = v162;
                                      uint64_t v170 = v167 + 1;
                                      BOOL v171 = (void **)operator new(v167 + 1);
                                      uint64_t v164 = v168;
                                      unint64_t v166 = v171;
                                      uint64_t v172 = (void *)(v170 | 0x8000000000000000);
                                      uint64_t v162 = v169;
                                      __dst[2] = v172;
                                      __dst[0] = v171;
                                      __dst[1] = (void *)v163;
                                    }
                                    else
                                    {
                                      HIBYTE(__dst[2]) = *((void *)v408 + v161 + 1);
                                      unint64_t v166 = __dst;
                                      if (!v163) {
                                        goto LABEL_275;
                                      }
                                    }
                                    memmove(v166, (const void *)(v164 + v165), v163);
LABEL_275:
                                    *((unsigned char *)v166 + v163) = 0;
                                    sub_1CD4F8CDC(v162, (const void **)__dst, (uint64_t)__dst);
                                    if (SHIBYTE(__dst[2]) < 0) {
                                      operator delete(__dst[0]);
                                    }
                                    v161 += 2;
                                    char v121 = 1;
                                    if (v161 == v409) {
                                      goto LABEL_211;
                                    }
                                  }
                                case 20:
                                  llvm::ModuleSummaryIndex::setFlags(*(unsigned char **)(v367 + 416), *(void *)v408);
                                  goto LABEL_211;
                                case 21:
                                  v258 = (int64x2_t *)v408;
                                  unint64_t v259 = v409;
                                  uint64_t v345 = *(void *)(v367 + 368);
                                  v260 = (int32x2_t *)sub_1CD4EFDD8(*(void *)(v367 + 416), (int *)(v345 + *(void *)v408), *((void *)v408 + 1));
                                  int32x2_t *v260 = vmovn_s64(v258[1]);
                                  v260[1] = *(int32x2_t *)v258[2].i8;
                                  v260[2] = (int32x2_t)v258[2].u64[1];
                                  v260[3].i8[0] = v258[3].i64[0];
                                  v260[4] = (int32x2_t)v258[3].u64[1];
                                  unint64_t v347 = v259;
                                  if (v259 < 9) {
                                    goto LABEL_211;
                                  }
                                  v343 = (uint64_t **)&v260[5];
                                  uint64_t v261 = 8;
                                  break;
                                case 22:
                                  v238 = v408;
                                  unint64_t v239 = v409;
                                  v240 = sub_1CD4AF7A0(*(void *)(v367 + 416), (const std::string::value_type *)(*(void *)(v367 + 368) + *(void *)v408), *((void *)v408 + 1));
                                  if (v239 < 3) {
                                    goto LABEL_211;
                                  }
                                  unint64_t v241 = 2;
                                  v349 = (void *)v239;
                                  __src = v240;
                                  v346 = v238;
                                  do
                                  {
                                    uint64_t v242 = v238[v241];
                                    LODWORD(__dst[0]) = *(void *)((char *)v238 + ((8 * v241) | 8));
                                    v243 = sub_1CD4F84C8(v376, (int *)__dst);
                                    v244 = __src;
                                    uint64_t v245 = *((void *)v243 + 1);
                                    v247 = (void *)*((void *)__src + 1);
                                    unint64_t v246 = *((void *)__src + 2);
                                    if ((unint64_t)v247 >= v246)
                                    {
                                      v249 = *(void **)__src;
                                      uint64_t v250 = ((uint64_t)v247 - *(void *)__src) >> 4;
                                      unint64_t v251 = v250 + 1;
                                      if ((unint64_t)(v250 + 1) >> 60) {
                                        goto LABEL_541;
                                      }
                                      uint64_t v252 = v246 - (void)v249;
                                      if (v252 >> 3 > v251) {
                                        unint64_t v251 = v252 >> 3;
                                      }
                                      if ((unint64_t)v252 >= 0x7FFFFFFFFFFFFFF0) {
                                        unint64_t v253 = 0xFFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v253 = v251;
                                      }
                                      if (v253)
                                      {
                                        if (v253 >> 60) {
                                          goto LABEL_542;
                                        }
                                        uint64_t v254 = *((void *)v243 + 1);
                                        unint64_t v344 = v253;
                                        v255 = (char *)operator new(16 * v253);
                                        unint64_t v253 = v344;
                                        v244 = __src;
                                        uint64_t v245 = v254;
                                      }
                                      else
                                      {
                                        v255 = 0;
                                      }
                                      v256 = &v255[16 * v250];
                                      *(void *)v256 = v242;
                                      *((void *)v256 + 1) = v245;
                                      v257 = v256;
                                      if (v247 == v249)
                                      {
                                        v238 = v346;
                                      }
                                      else
                                      {
                                        v238 = v346;
                                        do
                                        {
                                          *((_OWORD *)v257 - 1) = *((_OWORD *)v247 - 1);
                                          v257 -= 16;
                                          v247 -= 2;
                                        }
                                        while (v247 != v249);
                                        v247 = *(void **)v244;
                                      }
                                      unint64_t v239 = (unint64_t)v349;
                                      v248 = v256 + 16;
                                      *(void *)v244 = v257;
                                      *((void *)v244 + 1) = v256 + 16;
                                      *((void *)v244 + 2) = &v255[16 * v253];
                                      if (v247)
                                      {
                                        operator delete(v247);
                                        v244 = __src;
                                      }
                                    }
                                    else
                                    {
                                      void *v247 = v242;
                                      v247[1] = v245;
                                      v248 = v247 + 2;
                                    }
                                    v241 += 2;
                                    *((void *)v244 + 1) = v248;
                                    char v121 = 1;
                                  }
                                  while (v241 < v239);
                                  goto LABEL_211;
                                case 23:
                                  unsigned int v283 = *((void *)v408 + 3) + 4;
                                  sub_1CC1EB358((char **)__dst, v367, (void *)v408 + 4, *((void *)v408 + 3));
                                  int v284 = v409;
                                  if (v283 == v409) {
                                    goto LABEL_477;
                                  }
                                  __srcb = 0;
                                  v315 = 0;
                                  v316 = 0;
                                  int v350 = v409;
                                  while (1)
                                  {
                                    LODWORD(v413) = *((void *)v408 + v283);
                                    uint64_t v317 = *((void *)sub_1CD4F84C8(v376, (int *)&v413) + 1);
                                    uint64_t v318 = *((void *)v408 + v283 + 1);
                                    if (v316 >= __srcb)
                                    {
                                      uint64_t v319 = (v316 - v315) >> 4;
                                      unint64_t v320 = v319 + 1;
                                      if ((unint64_t)(v319 + 1) >> 60) {
                                        goto LABEL_541;
                                      }
                                      if ((__srcb - v315) >> 3 > v320) {
                                        unint64_t v320 = (__srcb - v315) >> 3;
                                      }
                                      if ((unint64_t)(__srcb - v315) >= 0x7FFFFFFFFFFFFFF0) {
                                        unint64_t v321 = 0xFFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v321 = v320;
                                      }
                                      if (v321)
                                      {
                                        if (v321 >> 60) {
                                          goto LABEL_542;
                                        }
                                        __srcc = (void *)v321;
                                        v322 = (char *)operator new(16 * v321);
                                        unint64_t v321 = (unint64_t)__srcc;
                                      }
                                      else
                                      {
                                        v322 = 0;
                                      }
                                      v323 = &v322[16 * v319];
                                      *(void *)v323 = v317;
                                      *((void *)v323 + 1) = v318;
                                      if (v316 == v315)
                                      {
                                        v324 = &v322[16 * v319];
                                      }
                                      else
                                      {
                                        v325 = &v322[16 * v319];
                                        do
                                        {
                                          v324 = v325 - 16;
                                          *((_OWORD *)v325 - 1) = *((_OWORD *)v316 - 1);
                                          v316 -= 16;
                                          v325 -= 16;
                                        }
                                        while (v316 != v315);
                                      }
                                      __srcb = &v322[16 * v321];
                                      v316 = v323 + 16;
                                      if (v315) {
                                        operator delete(v315);
                                      }
                                      v315 = v324;
                                      int v284 = v350;
                                    }
                                    else
                                    {
                                      *(void *)v316 = v317;
                                      *((void *)v316 + 1) = v318;
                                      v316 += 16;
                                    }
                                    v283 += 2;
                                    if (v283 == v284) {
LABEL_477:
                                    }
                                      operator new();
                                  }
                                case 24:
                                  *(void *)(*(void *)(v367 + 416) + 296) += *(void *)v408;
                                  goto LABEL_211;
                                case 25:
                                  v292 = v408;
                                  uint64_t v293 = v409;
                                  memset(__dst, 0, sizeof(__dst));
                                  if (v409)
                                  {
                                    do
                                    {
                                      sub_1CD4C91FC((uint64_t *)__dst);
                                      v294 = __dst[1];
                                      *((void *)__dst[1] - 8) = *v292;
                                      unint64_t v295 = v292[1];
                                      unint64_t v296 = v292[2];
                                      unint64_t v297 = -(uint64_t)(v295 >> 1);
                                      if (v295 == 1) {
                                        unint64_t v297 = 0x8000000000000000;
                                      }
                                      if (v295) {
                                        unint64_t v298 = v297;
                                      }
                                      else {
                                        unint64_t v298 = v295 >> 1;
                                      }
                                      unint64_t v299 = -(uint64_t)(v296 >> 1);
                                      if (v296 == 1) {
                                        unint64_t v299 = 0x8000000000000000;
                                      }
                                      if (v296) {
                                        unint64_t v300 = v299;
                                      }
                                      else {
                                        unint64_t v300 = v296 >> 1;
                                      }
                                      if (*((_DWORD *)v294 - 12) >= 0x41u)
                                      {
                                        uint64_t v312 = *(v294 - 7);
                                        if (v312) {
                                          MEMORY[0x1D25D9CB0](v312, 0x1000C8000313F17);
                                        }
                                      }
                                      *(v294 - 7) = v298;
                                      *((_DWORD *)v294 - 12) = 64;
                                      if (*((_DWORD *)v294 - 8) >= 0x41u)
                                      {
                                        uint64_t v313 = *(v294 - 5);
                                        if (v313) {
                                          MEMORY[0x1D25D9CB0](v313, 0x1000C8000313F17);
                                        }
                                      }
                                      *(v294 - 5) = v300;
                                      *((_DWORD *)v294 - 8) = 64;
                                      sub_1CD4F8F3C((uint64_t)(v294 - 3), v292[3]);
                                      v293 -= 4;
                                      v292 += 4;
                                      uint64_t v302 = *(v294 - 3);
                                      uint64_t v301 = *(v294 - 2);
                                      if (v302 != v301)
                                      {
                                        do
                                        {
                                          v303 = v292;
                                          *(void *)uint64_t v302 = *v292;
                                          LODWORD(v413) = v292[1];
                                          *(void *)(v302 + 8) = *((void *)sub_1CD4F84C8(v376, (int *)&v413) + 1);
                                          unint64_t v304 = v292[2];
                                          unint64_t v305 = v292[3];
                                          unint64_t v306 = -(uint64_t)(v304 >> 1);
                                          if (v304 == 1) {
                                            unint64_t v306 = 0x8000000000000000;
                                          }
                                          if (v304) {
                                            unint64_t v307 = v306;
                                          }
                                          else {
                                            unint64_t v307 = v304 >> 1;
                                          }
                                          unint64_t v308 = -(uint64_t)(v305 >> 1);
                                          if (v305 == 1) {
                                            unint64_t v308 = 0x8000000000000000;
                                          }
                                          if (v305) {
                                            unint64_t v309 = v308;
                                          }
                                          else {
                                            unint64_t v309 = v305 >> 1;
                                          }
                                          if (*(_DWORD *)(v302 + 24) >= 0x41u)
                                          {
                                            uint64_t v310 = *(void *)(v302 + 16);
                                            if (v310) {
                                              MEMORY[0x1D25D9CB0](v310, 0x1000C8000313F17);
                                            }
                                          }
                                          *(void *)(v302 + 16) = v307;
                                          *(_DWORD *)(v302 + 24) = 64;
                                          if (*(_DWORD *)(v302 + 40) >= 0x41u)
                                          {
                                            uint64_t v311 = *(void *)(v302 + 32);
                                            if (v311) {
                                              MEMORY[0x1D25D9CB0](v311, 0x1000C8000313F17);
                                            }
                                          }
                                          *(void *)(v302 + 32) = v309;
                                          *(_DWORD *)(v302 + 40) = 64;
                                          v302 += 48;
                                          v293 -= 4;
                                          v292 = v303 + 4;
                                        }
                                        while (v302 != v301);
                                        v292 = v303 + 4;
                                      }
                                    }
                                    while (v293);
                                  }
                                  sub_1CD4AEBA8((void **)&v384);
                                  long long v384 = *(_OWORD *)__dst;
                                  v385 = __dst[2];
                                  memset(__dst, 0, sizeof(__dst));
                                  *(void *)&long long v413 = __dst;
                                  sub_1CC0C4A94((void ***)&v413);
                                  goto LABEL_264;
                                default:
                                  goto LABEL_211;
                              }
                              while (2)
                              {
                                v262 = (std::string::size_type *)v258 + v261;
                                v403.__r_.__value_.__r.__words[0] = *v262;
                                __dst[0] = &v403;
                                v263 = sub_1CD4F4FFC(v343, (unint64_t *)&v403, (uint64_t)&std::piecewise_construct, (void **)__dst);
                                *((_DWORD *)v263 + 10) = v262[1];
                                size_t v264 = v262[3];
                                if (v264 > 0x7FFFFFFFFFFFFFF7) {
                                  goto LABEL_541;
                                }
                                v265 = v263;
                                std::string::size_type v266 = v262[2];
                                if (v264 >= 0x17)
                                {
                                  uint64_t v268 = (v264 & 0xFFFFFFFFFFFFFFF8) + 8;
                                  if ((v264 | 7) != 0x17) {
                                    uint64_t v268 = v264 | 7;
                                  }
                                  uint64_t v269 = v268 + 1;
                                  v270 = (void **)operator new(v268 + 1);
                                  v271 = (void *)(v269 | 0x8000000000000000);
                                  v267 = v270;
                                  __dst[2] = v271;
                                  __dst[0] = v270;
                                  __dst[1] = (void *)v264;
                                }
                                else
                                {
                                  HIBYTE(__dst[2]) = v264;
                                  v267 = __dst;
                                  if (!v264)
                                  {
LABEL_392:
                                    *((unsigned char *)v267 + v264) = 0;
                                    v272 = (void **)(v265 + 48);
                                    if (v265[71] < 0) {
                                      operator delete(*v272);
                                    }
                                    *(_OWORD *)v272 = *(_OWORD *)__dst;
                                    *((void **)v265 + 8) = __dst[2];
                                    unint64_t v273 = v261 + 5;
                                    uint64_t v274 = v258[2].i64[v261];
                                    if (v274)
                                    {
                                      __srca = v265 + 72;
                                      do
                                      {
                                        v275 = v258;
                                        unint64_t v276 = v258->u64[v273];
                                        unint64_t v277 = v273 + 1;
                                        memset(__dst, 0, sizeof(__dst));
                                        if (v276)
                                        {
                                          if (v276 >> 61) {
                                            goto LABEL_541;
                                          }
                                          v278 = (char *)operator new(8 * v276);
                                          v279 = &v278[8 * v276];
                                          __dst[0] = v278;
                                          __dst[2] = v279;
                                          memmove(v278, (char *)v275 + 8 * v277, 8 * v276);
                                          __dst[1] = v279;
                                        }
                                        *(void *)&long long v413 = __dst;
                                        v280 = (int32x2_t *)sub_1CD4F8E74((uint64_t)__srca, (unint64_t **)__dst, (uint64_t *)&v413);
                                        if (__dst[0])
                                        {
                                          __dst[1] = __dst[0];
                                          operator delete(__dst[0]);
                                        }
                                        unint64_t v281 = v276 + v277;
                                        v258 = v275;
                                        v282 = (int64x2_t *)((char *)v275 + 8 * v281);
                                        v280[7].i32[0] = v282->i64[0];
                                        v280[8] = (int32x2_t)v282->u64[1];
                                        unint64_t v273 = v281 + 4;
                                        v280[9] = vmovn_s64(v282[1]);
                                        --v274;
                                      }
                                      while (v274);
                                    }
                                    char v121 = 1;
                                    uint64_t v261 = v273;
                                    if (v273 >= v347) {
                                      goto LABEL_211;
                                    }
                                    continue;
                                  }
                                }
                                break;
                              }
                              memmove(v267, (const void *)(v345 + v266), v264);
                              goto LABEL_392;
                            }
                            char v121 = 0;
                            uint64_t v123 = v398;
                            v398 = 0;
                            *a1 = v123;
LABEL_211:
                            if (v399)
                            {
                              unsigned int v124 = v398;
                              v398 = 0;
                              if (v124) {
                                (*(void (**)(void *))(*(void *)v124 + 8))(v124);
                              }
                            }
                            uint64_t v6 = v371;
                            int v5 = v369;
                            if ((v121 & 1) == 0) {
                              goto LABEL_519;
                            }
                            break;
                        }
                      }
                      v338 = __dst[0];
LABEL_535:
                      *a1 = v338;
LABEL_519:
                      __dst[0] = &v384;
                      sub_1CC0C4A94((void ***)__dst);
                      __dst[0] = &v386;
                      sub_1CC0C4BCC((void ***)__dst);
                      __dst[0] = &v388;
                      sub_1CC0C4BCC((void ***)__dst);
                      if (v365) {
                        operator delete(v365);
                      }
                      if (v361) {
                        operator delete(v361);
                      }
                      uint64_t v2 = v367;
                      if (v375) {
                        operator delete(v375);
                      }
                    }
LABEL_144:
                    uint64_t v87 = v408;
                    if (v408 == (char *)&v409 + 8) {
                      goto LABEL_146;
                    }
                    goto LABEL_145;
                  }
                  sub_1CC1C6524((uint64_t)v4, &v413);
                  uint64_t v13 = (void *)v413;
                  if ((uint64_t)__dst[1])
                  {
                    uint64_t v14 = __dst[0];
                    __dst[0] = 0;
                    if (v14) {
                      (*(void (**)(void *))(*(void *)v14 + 8))(v14);
                    }
                  }
                  if (v13) {
                    goto LABEL_533;
                  }
                }
                uint64_t v13 = __dst[0];
LABEL_533:
                *a1 = v13;
                goto LABEL_144;
              }
LABEL_147:
              if (v12) {
                int v9 = 1;
              }
              else {
                int v9 = 2;
              }
              goto LABEL_8;
            }
LABEL_7:
            int v9 = 1;
            goto LABEL_8;
          }
          int v9 = 1;
LABEL_8:
          if (v394)
          {
            int v10 = *(void **)v393;
            *(void *)v393 = 0;
            if (v10) {
              (*(void (**)(void *))(*(void *)v10 + 8))(v10);
            }
          }
          if ((v9 | 2) != 2)
          {
            MEMORY[0x1D25D9CD0](v378[0], 4);
            if (v395 != v6) {
              free(v395);
            }
            return;
          }
          break;
        case 3u:
          LODWORD(v396) = 0;
          llvm::BitstreamCursor::readRecord(v4, v393[1], (uint64_t)&v395, 0, (uint64_t)__p);
          if ((uint64_t)__p[1])
          {
            long long v24 = __p[0];
            __p[0] = 0;
            *a1 = v24;
LABEL_128:
            int v9 = 1;
          }
          else
          {
            switch(LODWORD(__p[0]))
            {
              case 1:
                sub_1CC1EACC0((uint64_t)&v408, v2, (int *)v395, v396);
                if ((v409 & 1) == 0)
                {
                  *a1 = 0;
                  goto LABEL_139;
                }
                uint64_t v81 = v408;
                *a1 = v408;
                if (!v81) {
                  goto LABEL_139;
                }
                goto LABEL_128;
              case 7:
              case 8:
              case 0xE:
                if (*(unsigned char *)(v2 + 384))
                {
                  size_t v15 = *((void *)v395 + 1);
                  if (v15 + *(void *)v395 > *(void *)(v2 + 376)
                    || (unint64_t)v396 - 6 >= 0xFFFFFFFFFFFFFFFCLL)
                  {
LABEL_127:
                    v408 = "Invalid record";
                    LOWORD(v411) = 259;
                    sub_1CC1DDE58((int)a1, v2, (llvm::Twine *)&v408);
                  }
                  int v17 = (const std::string::value_type *)(*(void *)(v2 + 368) + *(void *)v395);
                  int v18 = sub_1CC1EAF14(*((_DWORD *)v395 + 10));
                  char v19 = *(unsigned char *)(v2 + 511);
                  BOOL v20 = v19 < 0;
                  if (v19 >= 0) {
                    uint64_t v21 = v377;
                  }
                  else {
                    uint64_t v21 = *(const std::string::value_type **)(v2 + 488);
                  }
                  std::string::size_type v22 = v19 & 0x7F;
                  if (v20) {
                    std::string::size_type v23 = *(void *)(v2 + 496);
                  }
                  else {
                    std::string::size_type v23 = v22;
                  }
                  sub_1CC1EB028(v2, v5, v17, v15, v18, v21, v23);
                }
                else
                {
                  if (v396 < 4) {
                    goto LABEL_127;
                  }
                  int v55 = sub_1CC1EAF14(*((_DWORD *)v395 + 6));
                  LODWORD(v408) = v5;
                  sub_1CD4F91E4((uint64_t)v378, &v408)[1] = v55;
                }
                ++v5;
LABEL_139:
                int v9 = 2;
                break;
              case 0xD:
                if (!v396) {
                  goto LABEL_127;
                }
                *(void *)(v2 + 432) = *(void *)v395 - 1;
                goto LABEL_139;
              case 0x10:
                v408 = &v410;
                long long v409 = xmmword_1CFAC3020;
                char v56 = (uint64_t *)v395;
                uint64_t v57 = v396;
                if (v396 >= 0x81) {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod();
                }
                uint64_t v58 = 0;
                if (v396)
                {
                  uint64_t v59 = &v410;
                  uint64_t v60 = 8 * v396;
                  do
                  {
                    uint64_t v61 = *v56++;
                    *(unsigned char *)uint64_t v59 = v61;
                    uint64_t v59 = (uint64_t *)((char *)v59 + 1);
                    v60 -= 8;
                  }
                  while (v60);
                  unint64_t v62 = *((void *)&v409 + 1);
                  uint64_t v58 = v409;
                }
                else
                {
                  unint64_t v62 = 128;
                }
                uint64_t v63 = v58 + v57;
                *(void *)&long long v409 = v63;
                if (v63 + 1 > v62) {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod();
                }
                *((unsigned char *)v408 + v63) = 0;
                MEMORY[0x1D25D9630](v377, v408);
                if (v408 != &v410) {
                  free(v408);
                }
                goto LABEL_139;
              case 0x11:
                if (v396 != 5)
                {
                  v392.__r_.__value_.__r.__words[0] = v396;
                  LOWORD(v407) = 266;
                  __dst[0] = &v392;
                  llvm::Twine::str((llvm::Twine *)__dst, &v403);
                  uint64_t v79 = std::string::insert(&v403, 0, "Invalid hash length ");
                  std::string::size_type v80 = v79->__r_.__value_.__r.__words[2];
                  long long v413 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
                  *(void *)&long long v414 = v80;
                  v79->__r_.__value_.__l.__size_ = 0;
                  v79->__r_.__value_.__r.__words[2] = 0;
                  v79->__r_.__value_.__r.__words[0] = 0;
                  LOWORD(v411) = 260;
                  v408 = &v413;
                  sub_1CC1DDE58((int)a1, v2, (llvm::Twine *)&v408);
                }
                v373 = *(void **)(v2 + 416);
                uint64_t v64 = *((unsigned int *)v373 + 8);
                *(void *)v366 = v2;
                v370 = v6;
                int v368 = v5;
                if (v64)
                {
                  size_t v65 = *(void *)(v2 + 520);
                  unint64_t v66 = *(unsigned __int8 **)(v2 + 512);
                  int v67 = 0;
                  if (v65)
                  {
                    size_t v68 = v65;
                    unsigned int v69 = v66;
                    do
                    {
                      int v70 = *v69++;
                      int v67 = 33 * v67 + v70;
                      --v68;
                    }
                    while (v68);
                  }
                  unsigned int v71 = v64 - 1;
                  uint64_t v72 = v373[3];
                  v362 = (void *)*((unsigned int *)v373 + 8);
                  uint64_t v73 = v72 + 8 * v64 + 8;
                  int v74 = 1;
                  int v75 = v67;
                  while (1)
                  {
                    uint64_t v76 = v75 & v71;
                    long long v77 = *(void **)(v72 + 8 * v76);
                    if (v77 != (void *)-8)
                    {
                      if (!v77)
                      {
                        std::string::size_type v82 = v362;
                        goto LABEL_137;
                      }
                      if (*(_DWORD *)(v73 + 4 * v76) == v67
                        && v65 == *v77
                        && (!v65 || !memcmp(v66, (char *)v77 + *((unsigned int *)v373 + 11), v65)))
                      {
                        break;
                      }
                    }
                    int v75 = v74 + v76;
                    ++v74;
                  }
                  std::string::size_type v82 = v362;
                  if (v76 != -1) {
                    std::string::size_type v82 = (void *)(int)v76;
                  }
                }
                else
                {
                  std::string::size_type v82 = 0;
                  uint64_t v72 = v373[3];
                }
LABEL_137:
                uint64_t v83 = 0;
                uint64_t v84 = *(void *)(v72 + 8 * (void)v82) + 16;
                unint64_t v85 = v395;
                uint64_t v2 = *(void *)v366;
                uint64_t v6 = v370;
                int v5 = v368;
                do
                {
                  *(_DWORD *)(v84 + 4 * v83) = v85[v83];
                  ++v83;
                }
                while (v83 != 5);
                goto LABEL_139;
              default:
                goto LABEL_139;
            }
          }
          if ((uint64_t)__p[1])
          {
            size_t v86 = __p[0];
            __p[0] = 0;
            if (v86) {
              (*(void (**)(void *))(*(void *)v86 + 8))(v86);
            }
          }
          goto LABEL_8;
        default:
          int v9 = 0;
          goto LABEL_8;
      }
    }
  }
}

uint64_t sub_1CC1D209C(uint64_t a1)
{
  if (*(char *)(a1 + 511) < 0) {
    operator delete(*(void **)(a1 + 488));
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 464), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 440), 8);
  if (*(char *)(a1 + 415) < 0) {
    operator delete(*(void **)(a1 + 392));
  }
  sub_1CC1CB3C4((char **)(a1 + 88));
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    sub_1CC1CAA74(a1 + 64, v2);
    operator delete(*(void **)(a1 + 64));
  }
  uint64_t v4 = (void **)a1;
  sub_1CC1CB314(&v4);
  return a1;
}

void sub_1CC1D2144(uint64_t a1, llvm::BitstreamCursor *this, int a3)
{
  v20[64] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = &v18;
  llvm::BitstreamCursor::EnterSubBlock(this, 0, a3, &v18);
  int v7 = v18;
  if (v18)
  {
    *(unsigned char *)(a1 + 8) |= 1u;
    *(void *)a1 = v7;
    return;
  }
  int v18 = v20;
  uint64_t v19 = 0x4000000000;
  while (1)
  {
    do
    {
      sub_1CC1CA5F4((uint64_t)this, 0, (uint64_t)&v15);
      if (v16)
      {
        int v9 = 1;
        __int16 v8 = v15;
        goto LABEL_7;
      }
      __int16 v8 = v15;
      if (v15 != 2)
      {
        int v9 = 0;
        goto LABEL_7;
      }
      sub_1CC1C6524((uint64_t)this, &v14);
      uint64_t v13 = v14;
      if (v16)
      {
        int v10 = v15;
        size_t v15 = 0;
        if (v10) {
          (*(void (**)(const char *))(*(void *)v10 + 8))(v10);
        }
      }
    }
    while (!v13);
    int v9 = 1;
    __int16 v8 = v13;
LABEL_7:
    if (v9)
    {
      if (v8) {
        goto LABEL_25;
      }
    }
    else
    {
      int v3 = (int)v8;
      LODWORD(v6) = HIDWORD(v8);
    }
    switch(v3)
    {
      case 2:
LABEL_22:
        size_t v15 = "Malformed block";
        __int16 v17 = 259;
        sub_1CC1CD704();
      case 1:
        *(unsigned char *)(a1 + 8) &= ~1u;
        LOBYTE(v12) = 1;
        goto LABEL_26;
      case 0:
        goto LABEL_22;
    }
    LODWORD(v19) = 0;
    llvm::BitstreamCursor::readRecord(this, (int)v6, (uint64_t)&v18, 0, (uint64_t)&v15);
    if (v16) {
      break;
    }
    if (v15 == 20)
    {
      unsigned int v11 = *(unsigned __int8 *)v18;
      *(unsigned char *)(a1 + 8) &= ~1u;
      int v12 = (v11 >> 3) & 1;
LABEL_26:
      *(unsigned char *)a1 = v12;
      goto LABEL_27;
    }
  }
  __int16 v8 = v15;
LABEL_25:
  *(unsigned char *)(a1 + 8) |= 1u;
  *(void *)a1 = v8;
LABEL_27:
  if (v18 != v20) {
    free(v18);
  }
}

uint64_t sub_1CC1D2378@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v3 = a1[1];
  v9[0] = *a1;
  v9[1] = v3;
  llvm::getBitcodeModuleList(v9, (uint64_t)v10);
  if (v11)
  {
    uint64_t v7 = v10[0];
    v10[0] = 0;
    *(unsigned char *)(a2 + 64) |= 1u;
    *(void *)a2 = v7;
  }
  else
  {
    uint64_t v4 = (_OWORD *)v10[0];
    if (v10[1] - v10[0] != 64) {
      sub_1CC1CD704();
    }
    *(unsigned char *)(a2 + 64) &= ~1u;
    long long v5 = v4[1];
    *(_OWORD *)a2 = *v4;
    *(_OWORD *)(a2 + 16) = v5;
    long long v6 = v4[3];
    *(_OWORD *)(a2 + 32) = v4[2];
    *(_OWORD *)(a2 + 48) = v6;
  }
  return sub_1CC1EB7C0((uint64_t)v10);
}

void llvm::parseBitcodeFile(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  sub_1CC1D2378(v5, (uint64_t)v6);
  if (v7)
  {
    uint64_t v4 = *(void *)&v6[0];
    *(unsigned char *)(a2 + 8) |= 1u;
    *(void *)a2 = v4;
  }
  else
  {
    llvm::BitcodeModule::getModuleImpl(v6, a2);
  }
}

char **llvm::getBitcodeTargetTriple@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  sub_1CC1CD35C((uint64_t)v14, *(unsigned __int8 **)a1, *(void *)(a1 + 8));
  if (v15)
  {
    char v11 = v14[0];
    v14[0] = 0;
    *(unsigned char *)(a2 + 24) |= 1u;
    *(void *)a2 = v11;
  }
  else
  {
    int v3 = *(unsigned __int8 *)(a2 + 24);
    do
    {
      sub_1CC1CA5F4((uint64_t)v14, 0, (uint64_t)v16);
      if (v17)
      {
        uint64_t v4 = *(void **)v16;
        *(void *)char v16 = 0;
LABEL_7:
        v3 |= 1u;
        *(unsigned char *)(a2 + 24) = v3;
        *(void *)a2 = v4;
LABEL_8:
        int v5 = 1;
      }
      else
      {
        switch(v16[0])
        {
          case 0u:
            std::string::size_type v22 = "Malformed block";
            v24[8] = 259;
            sub_1CC1CD704();
          case 1u:
            v3 &= ~1u;
            *(unsigned char *)(a2 + 24) = v3;
            *(unsigned char *)(a2 + 23) = 0;
            *(unsigned char *)a2 = 0;
            goto LABEL_8;
          case 2u:
            if (v16[1] == 8)
            {
              llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)v14, 0, 8, &v22);
              uint64_t v4 = v22;
              if (v22) {
                goto LABEL_7;
              }
              std::string::size_type v22 = v24;
              uint64_t v23 = 0x4000000000;
              memset(&v13, 0, sizeof(v13));
              while (1)
              {
                sub_1CC1CA5F4((uint64_t)v14, 0, (uint64_t)&__str);
                if (__str.__r_.__value_.__s.__data_[8]) {
                  break;
                }
                switch(LODWORD(__str.__r_.__value_.__l.__data_))
                {
                  case 2:
                    sub_1CC1C6524((uint64_t)v14, &v18);
                    std::string::size_type v8 = v18;
                    if (__str.__r_.__value_.__s.__data_[8])
                    {
                      std::string::size_type v9 = __str.__r_.__value_.__r.__words[0];
                      __str.__r_.__value_.__r.__words[0] = 0;
                      if (v9) {
                        (*(void (**)(std::string::size_type))(*(void *)v9 + 8))(v9);
                      }
                    }
                    if (v8) {
                      goto LABEL_48;
                    }
                    break;
                  case 1:
                    v3 &= ~1u;
                    *(unsigned char *)(a2 + 24) = v3;
                    *(std::string *)a2 = v13;
                    memset(&v13, 0, sizeof(v13));
                    goto LABEL_43;
                  case 0:
                    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"Malformed block";
                    __int16 v21 = 259;
                    sub_1CC1CD704();
                  default:
                    llvm::BitstreamCursor::readRecord(v14, SHIDWORD(__str.__r_.__value_.__r.__words[0]), (uint64_t)&v22, 0, (uint64_t)&v18);
                    if (v19)
                    {
                      std::string::size_type v10 = v18;
                      v3 |= 1u;
                      *(unsigned char *)(a2 + 24) = v3;
                      *(void *)a2 = v10;
                      goto LABEL_43;
                    }
                    if (v18 == 2)
                    {
                      memset(&__str, 0, sizeof(__str));
                      sub_1CC1D3108(&__str, (std::string *)v22, (std::string *)((char *)v22 + 8 * v23));
                      std::string::operator=(&v13, &__str);
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__str.__r_.__value_.__l.__data_);
                      }
                      LODWORD(v23) = 0;
                      if (v19)
                      {
                        std::string::size_type v7 = v18;
                        std::string::size_type v18 = 0;
                        if (v7) {
                          (*(void (**)(std::string::size_type))(*(void *)v7 + 8))(v7);
                        }
                      }
                    }
                    else
                    {
                      LODWORD(v23) = 0;
                    }
                    break;
                }
              }
              std::string::size_type v8 = __str.__r_.__value_.__r.__words[0];
LABEL_48:
              v3 |= 1u;
              *(unsigned char *)(a2 + 24) = v3;
              *(void *)a2 = v8;
LABEL_43:
              if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v13.__r_.__value_.__l.__data_);
              }
              if (v22 != v24) {
                free(v22);
              }
              goto LABEL_8;
            }
            sub_1CC1C6524((uint64_t)v14, &v22);
            uint64_t v4 = v22;
            if (v22) {
              goto LABEL_7;
            }
LABEL_39:
            int v5 = 2;
            break;
          case 3u:
            llvm::BitstreamCursor::skipRecord((llvm::BitstreamCursor *)v14, v16[1], (uint64_t)&v22);
            if ((v23 & 1) == 0) {
              goto LABEL_39;
            }
            uint64_t v4 = v22;
            goto LABEL_7;
          default:
            int v5 = 0;
            break;
        }
      }
      if (v17)
      {
        long long v6 = *(void **)v16;
        *(void *)char v16 = 0;
        if (v6) {
          (*(void (**)(void *))(*(void *)v6 + 8))(v6);
        }
      }
    }
    while (v5 != 1);
  }
  return sub_1CC1EBAAC(v14);
}

char **llvm::isBitcodeContainingObjCCategory@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  sub_1CC1CD35C((uint64_t)v31, *(unsigned __int8 **)a1, *(void *)(a1 + 8));
  if (v32)
  {
    long long v6 = v31[0];
    v31[0] = 0;
    char v9 = a2[8] | 1;
    goto LABEL_21;
  }
  int v5 = a2[8];
  while (2)
  {
    sub_1CC1CA5F4((uint64_t)v31, 0, (uint64_t)&v37);
    long long v6 = (char *)v37;
    if (v38)
    {
      if (v37) {
        goto LABEL_20;
      }
    }
    else
    {
      int v2 = (int)v37;
      int v3 = HIDWORD(v37);
    }
    switch(v2)
    {
      case 0:
        int v37 = "Malformed block";
        v39[8] = 259;
        sub_1CC1CD704();
      case 1:
        a2[8] = v5 & 0xFE;
        *a2 = 0;
        return sub_1CC1EBAAC(v31);
      case 2:
        if (v3 != 8)
        {
          sub_1CC1C6524((uint64_t)v31, &v37);
          std::string::size_type v7 = v37;
          if (v37)
          {
            v5 |= 1u;
            a2[8] = v5;
            *(void *)a2 = v7;
            int v8 = 1;
          }
          else
          {
LABEL_13:
            int v8 = 2;
          }
LABEL_14:
          if (v8 == 1) {
            return sub_1CC1EBAAC(v31);
          }
          continue;
        }
        llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)v31, 0, 8, &v37);
        long long v6 = (char *)v37;
        if (v37)
        {
LABEL_20:
          char v9 = v5 | 1;
LABEL_21:
          a2[8] = v9;
          *(void *)a2 = v6;
        }
        else
        {
          int v37 = v39;
          uint64_t v38 = 0x4000000000;
          while (1)
          {
            sub_1CC1CA5F4((uint64_t)v31, 0, (uint64_t)&v35);
            if (v35.__r_.__value_.__s.__data_[8]) {
              break;
            }
            switch(LODWORD(v35.__r_.__value_.__l.__data_))
            {
              case 2:
                sub_1CC1C6524((uint64_t)v31, &v33);
                std::string::size_type v29 = v33;
                if (v35.__r_.__value_.__s.__data_[8])
                {
                  std::string::size_type v30 = v35.__r_.__value_.__r.__words[0];
                  v35.__r_.__value_.__r.__words[0] = 0;
                  if (v30) {
                    (*(void (**)(std::string::size_type))(*(void *)v30 + 8))(v30);
                  }
                }
                if (v29) {
                  goto LABEL_86;
                }
                break;
              case 1:
                a2[8] = v5 & 0xFE;
                *a2 = 0;
                goto LABEL_83;
              case 0:
                v35.__r_.__value_.__r.__words[0] = (std::string::size_type)"Malformed block";
                __int16 v36 = 259;
                sub_1CC1CD704();
              default:
                llvm::BitstreamCursor::readRecord(v31, SHIDWORD(v35.__r_.__value_.__r.__words[0]), (uint64_t)&v37, 0, (uint64_t)&v33);
                if (v34)
                {
                  char v21 = 0;
                  std::string::size_type v22 = v33;
                  std::string::size_type v33 = 0;
                  v5 |= 1u;
                  a2[8] = v5;
                  *(void *)a2 = v22;
                }
                else
                {
                  if (v33 != 5) {
                    goto LABEL_66;
                  }
                  memset(&v35, 0, sizeof(v35));
                  sub_1CC1D3108(&v35, (std::string *)v37, (std::string *)((char *)v37 + 8 * v38));
                  int v11 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
                  uint64_t v12 = (void *)v35.__r_.__value_.__r.__words[0];
                  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    int64_t size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    int64_t size = v35.__r_.__value_.__l.__size_;
                  }
                  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v14 = &v35;
                  }
                  else {
                    uint64_t v14 = (std::string *)v35.__r_.__value_.__r.__words[0];
                  }
                  char v15 = (char *)v14 + size;
                  if (size >= 21)
                  {
                    int64_t v16 = size;
                    char v17 = v14;
                    do
                    {
                      std::string::size_type v18 = (char *)memchr(v17, 95, v16 - 20);
                      if (!v18) {
                        break;
                      }
                      if (*(void *)v18 == 0x5F2C415441445F5FLL
                        && *((void *)v18 + 1) == 0x61635F636A626F5FLL
                        && *(void *)(v18 + 13) == 0x7473696C7461635FLL)
                      {
                        if (v18 != v15 && v18 - (char *)v14 != -1)
                        {
LABEL_75:
                          int v27 = 0;
                          v5 &= ~1u;
                          a2[8] = v5;
                          *a2 = 1;
                          goto LABEL_63;
                        }
                        break;
                      }
                      char v17 = (std::string *)(v18 + 1);
                      int64_t v16 = v15 - (char *)v17;
                    }
                    while (v15 - (char *)v17 >= 21);
                  }
                  if (size >= 17)
                  {
                    uint64_t v23 = v14;
                    do
                    {
                      long long v24 = (char *)memchr(v23, 95, size - 16);
                      if (!v24) {
                        break;
                      }
                      if (*(void *)v24 == 0x5F2C434A424F5F5FLL
                        && *((void *)v24 + 1) == 0x726F67657461635FLL
                        && v24[16] == 121)
                      {
                        int v27 = 1;
                        if (v24 == v15 || v24 - (char *)v14 == -1) {
                          goto LABEL_63;
                        }
                        goto LABEL_75;
                      }
                      uint64_t v23 = (std::string *)(v24 + 1);
                      int64_t size = v15 - (char *)v23;
                    }
                    while (v15 - (char *)v23 >= 17);
                  }
                  int v27 = 1;
LABEL_63:
                  if (v11 < 0) {
                    operator delete(v12);
                  }
                  if (!v27)
                  {
                    char v21 = 0;
                  }
                  else
                  {
LABEL_66:
                    LODWORD(v38) = 0;
                    char v21 = 1;
                  }
                }
                if (v34)
                {
                  std::string::size_type v28 = v33;
                  std::string::size_type v33 = 0;
                  if (v28) {
                    (*(void (**)(std::string::size_type))(*(void *)v28 + 8))(v28);
                  }
                }
                if ((v21 & 1) == 0) {
                  goto LABEL_83;
                }
                break;
            }
          }
          std::string::size_type v29 = v35.__r_.__value_.__r.__words[0];
LABEL_86:
          a2[8] = v5 | 1;
          *(void *)a2 = v29;
LABEL_83:
          if (v37 != v39) {
            free(v37);
          }
        }
        return sub_1CC1EBAAC(v31);
      case 3:
        llvm::BitstreamCursor::skipRecord((llvm::BitstreamCursor *)v31, v3, (uint64_t)&v37);
        if ((v38 & 1) == 0) {
          goto LABEL_13;
        }
        long long v6 = (char *)v37;
        if (!v37) {
          goto LABEL_13;
        }
        goto LABEL_20;
      default:
        int v8 = 0;
        goto LABEL_14;
    }
  }
}

char **llvm::getBitcodeProducerString@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  sub_1CC1CD35C((uint64_t)v12, *(unsigned __int8 **)a1, *(void *)(a1 + 8));
  if ((v14 & 1) == 0)
  {
    char v5 = a2[24];
    while (1)
    {
      if (v13) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v12[1] > v12[2];
      }
      if (!v6)
      {
        a2[24] = v5 & 0xFE;
        a2[23] = 0;
        *a2 = 0;
        return sub_1CC1EBAAC(v12);
      }
      sub_1CC1CA5F4((uint64_t)v12, 0, (uint64_t)&v15);
      std::string::size_type v7 = (char *)v15;
      if (v16)
      {
        if (v15) {
          goto LABEL_24;
        }
      }
      else
      {
        unsigned int v3 = v15;
        int v2 = HIDWORD(v15);
      }
      if (v3 != 2) {
        break;
      }
      if (v2 == 13)
      {
        sub_1CC1CE23C((uint64_t)a2, (llvm::BitstreamCursor *)v12);
        return sub_1CC1EBAAC(v12);
      }
      sub_1CC1C6524((uint64_t)v12, &v15);
      char v9 = v15;
      if (!v15) {
        goto LABEL_20;
      }
      v5 |= 1u;
      a2[24] = v5;
      *(void *)a2 = v9;
      int v8 = 1;
LABEL_21:
      if (v8 == 1) {
        return sub_1CC1EBAAC(v12);
      }
    }
    if (v3 != 3)
    {
      if (v3 <= 1)
      {
        char v15 = "Malformed block";
        __int16 v17 = 259;
        sub_1CC1CD704();
      }
      int v8 = 0;
      goto LABEL_21;
    }
    llvm::BitstreamCursor::skipRecord((llvm::BitstreamCursor *)v12, v2, (uint64_t)&v15);
    if (v16)
    {
      std::string::size_type v7 = (char *)v15;
      if (v15)
      {
LABEL_24:
        char v10 = v5 | 1;
        goto LABEL_25;
      }
    }
LABEL_20:
    int v8 = 2;
    goto LABEL_21;
  }
  std::string::size_type v7 = v12[0];
  v12[0] = 0;
  char v10 = a2[24] | 1;
LABEL_25:
  a2[24] = v10;
  *(void *)a2 = v7;
  return sub_1CC1EBAAC(v12);
}

void llvm::readModuleSummaryIndex(_OWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void **a4@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v7 = a1[1];
  v8[0] = *a1;
  v8[1] = v7;
  sub_1CC1D2378(v8, (uint64_t)v9);
  if (v10) {
    *a4 = (void *)v9[0];
  }
  else {
    llvm::BitcodeModule::readSummary((uint64_t)v9, a2, v9[2], v9[3], a3, a4);
  }
}

uint64_t llvm::getBitcodeLTOInfo@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  long long v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  uint64_t result = sub_1CC1D2378(v6, (uint64_t)v7);
  if ((v8 & 1) == 0) {
    return llvm::BitcodeModule::getLTOInfo((llvm::BitcodeModule *)v7, a2);
  }
  uint64_t v5 = v7[0];
  *(unsigned char *)(a2 + 8) |= 1u;
  *(void *)a2 = v5;
  return result;
}

std::string *sub_1CC1D3108(std::string *this, std::string *a2, std::string *a3)
{
  uint64_t v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v7 = (char *)a3 - (char *)a2;
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    char v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    uint64_t v7 = (char *)a3 - (char *)a2;
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    char v10 = this;
  }
  unint64_t v12 = v7 >> 3;
  if (v10 > v4 || (std::string *)((char *)&v10->__r_.__value_.__l.__data_ + size + 1) <= v4)
  {
    if (v9 - size < v12)
    {
      std::string::__grow_by(this, v9, size - v9 + v12, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    char v14 = this;
    if ((v6 & 0x80) != 0) {
      char v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    char v15 = (char *)v14 + size;
    do
    {
      std::string::size_type v16 = v4->__r_.__value_.__r.__words[0];
      uint64_t v4 = (std::string *)((char *)v4 + 8);
      *v15++ = v16;
    }
    while (v4 != a3);
    *char v15 = 0;
    std::string::size_type v17 = v12 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    if (v7 < 0) {
      abort();
    }
    if ((unint64_t)v7 > 0xB7)
    {
      uint64_t v18 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v18 = v12 | 7;
      }
      uint64_t v19 = v18 + 1;
      p_p = operator new(v18 + 1);
      std::string::size_type v25 = v12;
      int64_t v26 = v19 | 0x8000000000000000;
      std::string __p = p_p;
    }
    else
    {
      HIBYTE(v26) = (unint64_t)v7 >> 3;
      p_p = &__p;
    }
    do
    {
      std::string::size_type v20 = v4->__r_.__value_.__r.__words[0];
      uint64_t v4 = (std::string *)((char *)v4 + 8);
      *p_p++ = v20;
    }
    while (v4 != a3);
    unsigned char *p_p = 0;
    if (v26 >= 0) {
      char v21 = (const std::string::value_type *)&__p;
    }
    else {
      char v21 = (const std::string::value_type *)__p;
    }
    if (v26 >= 0) {
      std::string::size_type v22 = HIBYTE(v26) & 0x7F;
    }
    else {
      std::string::size_type v22 = v25;
    }
    std::string::append(this, v21, v22);
    if (SHIBYTE(v26) < 0) {
      operator delete(__p);
    }
  }
  return this;
}

uint64_t sub_1CC1D32B4(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 40) = *(long long *)((char *)a2 + 40);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  *(void *)(a1 + 64) = a1 + 80;
  uint64_t v6 = a1 + 64;
  *(void *)(v6 + 8) = 0x800000000;
  if (*((_DWORD *)a2 + 18)) {
    sub_1CC1CAB0C(v6, (uint64_t)(a2 + 4));
  }
  *(void *)(a1 + 336) = *((void *)a2 + 42);
  return a1;
}

uint64_t sub_1CC1D3344(uint64_t a1)
{
  *(void *)a1 = &unk_1F2608928;
  int v2 = *(void **)(a1 + 1760);
  if (v2)
  {
    *(void *)(a1 + 1768) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)(a1 + 1728);
  if (v3 != (void *)(a1 + 1752)) {
    free(v3);
  }
  std::string::size_type v54 = (void **)(a1 + 1704);
  sub_1CB8338B8(&v54);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1680), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1656), 8);
  long long v4 = *(void **)(a1 + 1616);
  if (v4)
  {
    *(void *)(a1 + 1624) = v4;
    operator delete(v4);
  }
  long long v5 = *(void ***)(a1 + 1576);
  uint64_t v6 = *(void ***)(a1 + 1584);
  *(void *)(a1 + 1608) = 0;
  unint64_t v7 = (char *)v6 - (char *)v5;
  if ((unint64_t)((char *)v6 - (char *)v5) >= 0x11)
  {
    do
    {
      operator delete(*v5);
      long long v5 = (void **)(*(void *)(a1 + 1576) + 8);
      *(void *)(a1 + 1576) = v5;
      uint64_t v6 = *(void ***)(a1 + 1584);
      unint64_t v7 = (char *)v6 - (char *)v5;
    }
    while ((unint64_t)((char *)v6 - (char *)v5) > 0x10);
  }
  unint64_t v8 = v7 >> 3;
  if (v8 == 1)
  {
    uint64_t v50 = 256;
LABEL_79:
    *(void *)(a1 + 1600) = v50;
    goto LABEL_10;
  }
  if (v8 == 2)
  {
    uint64_t v50 = 512;
    goto LABEL_79;
  }
LABEL_10:
  if (v5 != v6)
  {
    do
    {
      std::string::size_type v9 = *v5++;
      operator delete(v9);
    }
    while (v5 != v6);
    uint64_t v10 = *(void *)(a1 + 1576);
    uint64_t v11 = *(void *)(a1 + 1584);
    if (v11 != v10) {
      *(void *)(a1 + 1584) = v11 + ((v10 - v11 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  unint64_t v12 = *(void **)(a1 + 1568);
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = *(unsigned int *)(a1 + 1560);
  uint64_t v14 = *(void *)(a1 + 1544);
  if (v13)
  {
    size_t v51 = (void *)(v14 + 16);
    uint64_t v52 = 32 * v13;
    do
    {
      if ((*(v51 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        std::string::size_type v53 = (void *)*(v51 - 1);
        if (v53)
        {
          *size_t v51 = v53;
          operator delete(v53);
        }
      }
      v51 += 4;
      v52 -= 32;
    }
    while (v52);
    uint64_t v14 = *(void *)(a1 + 1544);
  }
  MEMORY[0x1D25D9CD0](v14, 8);
  char v15 = *(void **)(a1 + 1520);
  if (v15)
  {
    *(void *)(a1 + 1528) = v15;
    operator delete(v15);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1496), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1464), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1440), 8);
  std::string::size_type v16 = *(void **)(a1 + 1416);
  if (v16)
  {
    *(void *)(a1 + 1424) = v16;
    operator delete(v16);
  }
  std::string::size_type v17 = *(void **)(a1 + 1392);
  if (v17)
  {
    *(void *)(a1 + 1400) = v17;
    operator delete(v17);
  }
  sub_1CD40B1BC(*(void **)(a1 + 1376));
  uint64_t v18 = *(void **)(a1 + 1344);
  if (v18)
  {
    *(void *)(a1 + 1352) = v18;
    operator delete(v18);
  }
  uint64_t v19 = *(void **)(a1 + 1320);
  if (v19)
  {
    *(void *)(a1 + 1328) = v19;
    operator delete(v19);
  }
  std::string::size_type v20 = *(void **)(a1 + 1296);
  if (v20)
  {
    *(void *)(a1 + 1304) = v20;
    operator delete(v20);
  }
  char v21 = *(void **)(a1 + 1272);
  if (v21)
  {
    *(void *)(a1 + 1280) = v21;
    operator delete(v21);
  }
  std::string::size_type v22 = *(void **)(a1 + 744);
  if (v22 != (void *)(a1 + 760)) {
    free(v22);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 720), 8);
  uint64_t v23 = *(void **)(a1 + 696);
  if (v23)
  {
    *(void *)(a1 + 704) = v23;
    operator delete(v23);
  }
  if (*(unsigned char *)(a1 + 688))
  {
    llvm::MetadataLoader::~MetadataLoader((char ***)(a1 + 680));
    *(unsigned char *)(a1 + 688) = 0;
  }
  long long v24 = *(void **)(a1 + 640);
  if (v24)
  {
    *(void *)(a1 + 648) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *(void *)(a1 + 616);
  if (v25)
  {
    uint64_t v26 = *(void *)(a1 + 624);
    int v27 = *(void **)(a1 + 616);
    if (v26 != v25)
    {
      do
      {
        uint64_t v28 = *(void *)(v26 - 16);
        if (v28 != -8192 && v28 != -4096 && v28 != 0)
        {
          unint64_t v30 = *(void *)(v26 - 32) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v30 = *(void *)(v26 - 24);
          uint64_t v31 = *(unint64_t **)(v26 - 24);
          if (v31)
          {
            *uint64_t v31 = *v31 & 7 | v30;
          }
          else
          {
            uint64_t v32 = *(void *)(v26 - 16);
            std::string::size_type v33 = ***(int32x2_t ****)v32;
            unint64_t v34 = (unint64_t)v33[303];
            if (v34 <= v30)
            {
              uint64_t v35 = v33[305].u32[0];
              if (v34 + 16 * v35 > v30)
              {
                unsigned int v36 = v35 - 1;
                LODWORD(v37) = v36 & ((v32 >> 4) ^ (v32 >> 9));
                uint64_t v38 = (uint64_t *)(v34 + 16 * v37);
                uint64_t v39 = *v38;
                if (v32 == *v38)
                {
LABEL_57:
                  *uint64_t v38 = -8192;
                  v33[304] = vadd_s32(v33[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v32 = *(void *)(v26 - 16);
                }
                else
                {
                  int v40 = 1;
                  while (v39 != -4096)
                  {
                    int v41 = v37 + v40++;
                    uint64_t v37 = v41 & v36;
                    uint64_t v39 = *(void *)(v34 + 16 * v37);
                    if (v32 == v39)
                    {
                      uint64_t v38 = (uint64_t *)(v34 + 16 * v37);
                      goto LABEL_57;
                    }
                  }
                }
                *(unsigned char *)(v32 + 17) &= ~1u;
              }
            }
          }
        }
        v26 -= 32;
      }
      while (v26 != v25);
      int v27 = *(void **)(a1 + 616);
    }
    *(void *)(a1 + 624) = v25;
    operator delete(v27);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 592), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 568), 8);
  uint64_t v42 = *(unsigned int *)(a1 + 560);
  uint64_t v43 = *(void *)(a1 + 544);
  if (v42)
  {
    uint64_t v44 = 32 * v42;
    uint64_t v45 = (void *)(v43 + 24);
    do
    {
      if (*((_DWORD *)v45 - 6) <= 0xFFFFFFFD)
      {
        unint64_t v46 = (void *)*(v45 - 2);
        if (v45 != v46) {
          free(v46);
        }
      }
      v45 += 4;
      v44 -= 32;
    }
    while (v44);
    uint64_t v43 = *(void *)(a1 + 544);
  }
  MEMORY[0x1D25D9CD0](v43, 8);
  std::string::size_type v47 = *(void **)(a1 + 520);
  if (v47)
  {
    *(void *)(a1 + 528) = v47;
    operator delete(v47);
  }
  std::string::size_type v54 = (void **)(a1 + 496);
  sub_1CB8338B8(&v54);
  std::string::size_type v54 = (void **)(a1 + 472);
  sub_1CB8338B8(&v54);
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*(void **)(a1 + 400));
  }
  sub_1CC1CB3C4((char **)(a1 + 96));
  uint64_t v48 = *(void *)(a1 + 72);
  if (v48)
  {
    sub_1CC1CAA74(a1 + 72, v48);
    operator delete(*(void **)(a1 + 72));
  }
  std::string::size_type v54 = (void **)(a1 + 8);
  sub_1CC1CB314(&v54);
  return a1;
}

void sub_1CC1D37E0(uint64_t a1)
{
  sub_1CC1D3344(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC1D3818(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v155 = *MEMORY[0x1E4F143B8];
  if (!a2 || *(unsigned char *)(a2 + 16) || (*(unsigned char *)(a2 + 34) & 0x80) == 0)
  {
    *a3 = 0;
    return;
  }
  uint64_t v4 = a1[187];
  uint64_t v5 = *((unsigned int *)a1 + 378);
  if (!v5)
  {
LABEL_273:
    unint64_t v7 = (uint64_t *)(v4 + 16 * v5);
    goto LABEL_8;
  }
  LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unint64_t v7 = (uint64_t *)(v4 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v110 = 1;
    while (v8 != -4096)
    {
      int v111 = v6 + v110++;
      uint64_t v6 = v111 & (v5 - 1);
      uint64_t v8 = *(void *)(v4 + 16 * v6);
      if (v8 == a2)
      {
        unint64_t v7 = (uint64_t *)(v4 + 16 * v6);
        goto LABEL_8;
      }
    }
    goto LABEL_273;
  }
LABEL_8:
  if (v7[1]) {
    goto LABEL_40;
  }
  std::string::size_type v9 = a3;
  do
  {
    unint64_t v10 = a1[55];
    unint64_t v11 = (v10 >> 3) & 0x1FFFFFFFFFFFFFF8;
    a1[6] = v11;
    *((_DWORD *)a1 + 16) = 0;
    if ((v10 & 0x3F) != 0)
    {
      sub_1CC1CA844((uint64_t)(a1 + 4), v10 & 0x3F, (uint64_t)v151);
      if ((uint64_t)v151[1])
      {
        uint64_t v14 = v151[0];
        LODWORD(v9) = a3;
        *a3 = v151[0];
        if (v14) {
          return;
        }
      }
      else
      {
        LODWORD(v9) = a3;
        *a3 = 0;
      }
      if (*((_DWORD *)a1 + 16)) {
        goto LABEL_17;
      }
      unint64_t v11 = a1[6];
    }
    else
    {
      *std::string::size_type v9 = 0;
    }
    if (a1[5] <= v11)
    {
      v151[0] = "Could not find function in stream";
      goto LABEL_25;
    }
LABEL_17:
    if (!*((unsigned char *)a1 + 1488))
    {
      v151[0] = "Trying to materialize functions before seeing function blocks";
LABEL_25:
      LOWORD(v154) = 259;
      sub_1CC1DDE58((int)v9, (uint64_t)(a1 + 1), (llvm::Twine *)v151);
    }
    v151[0] = &v152;
    v151[1] = (void *)0x4000000000;
    sub_1CC1CA5F4((uint64_t)(a1 + 4), 0, (uint64_t)&v149);
    if (v150)
    {
      uint64_t v12 = v149;
      uint64_t v149 = 0;
      std::string::size_type v9 = a3;
      *a3 = v12;
      goto LABEL_30;
    }
    if (v149 != 2)
    {
      v147[0] = (uint64_t)"Expect SubBlock";
      goto LABEL_29;
    }
    if (HIDWORD(v149) != 12)
    {
      v147[0] = (uint64_t)"Expect function block";
LABEL_29:
      __int16 v148 = 259;
      sub_1CC1DDE58((int)a3, (uint64_t)(a1 + 1), (llvm::Twine *)v147);
    }
    sub_1CC1DDFE4(a3, (uint64_t)a1);
    std::string::size_type v9 = a3;
    if (!*a3)
    {
      a1[55] = 8 * a1[6] - *((unsigned int *)a1 + 16);
      *a3 = 0;
    }
LABEL_30:
    if (v150)
    {
      uint64_t v13 = v149;
      uint64_t v149 = 0;
      if (v13)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        std::string::size_type v9 = a3;
      }
    }
    if (v151[0] != &v152)
    {
      free(v151[0]);
      std::string::size_type v9 = a3;
    }
    if (*v9) {
      return;
    }
  }
  while (!v7[1]);
  *std::string::size_type v9 = 0;
LABEL_40:
  char v15 = (void **)a3;
  (*(void (**)(void *))(*a1 + 32))(a1);
  if (*a3) {
    return;
  }
  unint64_t v16 = v7[1];
  a1[6] = (v16 >> 3) & 0x1FFFFFFFFFFFFFF8;
  *((_DWORD *)a1 + 16) = 0;
  if ((v16 & 0x3F) != 0)
  {
    sub_1CC1CA844((uint64_t)(a1 + 4), v16 & 0x3F, (uint64_t)v151);
    if (((uint64_t)v151[1] & 1) == 0)
    {
      char v15 = (void **)a3;
      goto LABEL_44;
    }
    unint64_t v142 = v151[0];
    char v15 = (void **)a3;
    *a3 = v151[0];
    if (v142) {
      return;
    }
  }
  else
  {
LABEL_44:
    *char v15 = 0;
  }
  sub_1CC1D4BC4(v15, (uint64_t)a1, (llvm::Value *)a2);
  if (*a3) {
    return;
  }
  uint64_t v19 = a2;
  *(_DWORD *)(a2 + 32) &= ~0x800000u;
  if (*((unsigned char *)a1 + 1642)) {
    llvm::stripDebugInfo((llvm *)a2, v17);
  }
  uint64_t v20 = a1[180];
  uint64_t v21 = *((unsigned int *)a1 + 364);
  std::string::size_type v22 = (llvm::CallBase **)(v20 + 16 * v21);
  if (*((_DWORD *)a1 + 362))
  {
    if (v21)
    {
      uint64_t v23 = 16 * v21;
      long long v24 = (llvm::CallBase **)a1[180];
      while (((unint64_t)*v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v24 += 2;
        v23 -= 16;
        if (!v23) {
          goto LABEL_53;
        }
      }
    }
    else
    {
      long long v24 = (llvm::CallBase **)a1[180];
    }
  }
  else
  {
LABEL_53:
    long long v24 = (llvm::CallBase **)(v20 + 16 * v21);
  }
  uint64_t v25 = (llvm::CallBase **)(v20 + 16 * v21);
LABEL_56:
  while (v24 != v25)
  {
    uint64_t v26 = *((void *)*v24 + 1);
    while (v26)
    {
      int v27 = *(llvm **)(v26 + 24);
      uint64_t v26 = *(void *)(v26 + 8);
      if (v27)
      {
        if (*((unsigned char *)v27 + 16) == 84) {
          llvm::UpgradeIntrinsicCall(v27, v24[1], v18);
        }
      }
    }
    uint64_t v28 = v24 + 2;
    long long v24 = v22;
    if (v28 != v22)
    {
      long long v24 = v28;
      while (((unint64_t)*v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v24 += 2;
        if (v24 == v22)
        {
          long long v24 = v22;
          goto LABEL_56;
        }
      }
    }
  }
  uint64_t v29 = a1[183];
  uint64_t v30 = *((unsigned int *)a1 + 370);
  uint64_t v31 = (uint64_t *)(v29 + 16 * v30);
  if (*((_DWORD *)a1 + 368))
  {
    if (v30)
    {
      uint64_t v32 = 16 * v30;
      std::string::size_type v33 = (uint64_t *)a1[183];
      while ((*v33 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v33 += 2;
        v32 -= 16;
        if (!v32) {
          goto LABEL_72;
        }
      }
    }
    else
    {
      std::string::size_type v33 = (uint64_t *)a1[183];
    }
  }
  else
  {
LABEL_72:
    std::string::size_type v33 = (uint64_t *)(v29 + 16 * v30);
  }
  unint64_t v34 = (uint64_t *)(v29 + 16 * v30);
LABEL_75:
  while (v33 != v34)
  {
    uint64_t v35 = *(void *)(*v33 + 8);
    if (v35)
    {
      do
      {
        uint64_t v36 = *(void *)(v35 + 8);
        sub_1CC1DDE04(*(void *)(v35 + 24), v33[1]);
        uint64_t v35 = v36;
      }
      while (v36);
    }
    uint64_t v37 = v33 + 2;
    std::string::size_type v33 = v31;
    if (v37 != v31)
    {
      std::string::size_type v33 = v37;
      while ((*v33 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v33 += 2;
        if (v33 == v31)
        {
          std::string::size_type v33 = v31;
          goto LABEL_75;
        }
      }
    }
  }
  uint64_t v38 = a1[85] + 680;
  v151[0] = (void *)a2;
  v147[0] = 0;
  if (sub_1CC1F4D40(v38, v151, v147))
  {
    char v143 = *(llvm::MDNode **)(v147[0] + 8);
    if (v143) {
      llvm::Value::setMetadata((uint64_t ***)a2, 0, v143);
    }
  }
  if (*(unsigned char *)(a1[85] + 968)) {
    goto LABEL_85;
  }
  uint64_t v106 = a2 + 72;
  for (uint64_t i = *(void *)(a2 + 80); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == v106) {
      goto LABEL_85;
    }
    uint64_t v108 = i - 24;
    if (!i) {
      uint64_t v108 = 0;
    }
    uint64_t v109 = *(void *)(v108 + 48);
    if (v109 != v108 + 40) {
      break;
    }
  }
  while (2)
  {
    if (v109) {
      BOOL v112 = (unsigned char *)(v109 - 24);
    }
    else {
      BOOL v112 = 0;
    }
    if ((v112[23] & 0x20) != 0)
    {
      uint64_t v113 = ***(void ***)v112;
      v151[0] = v112;
      int v114 = *(_DWORD *)(v113 + 2496);
      if (!v114)
      {
        v140 = 0;
        goto LABEL_271;
      }
      uint64_t v115 = *(void *)(v113 + 2480);
      int v116 = v114 - 1;
      unsigned int v117 = v116 & ((v112 >> 4) ^ (v112 >> 9));
      uint64_t v118 = (void *)(v115 + 40 * v117);
      uint64_t v119 = (unsigned char *)*v118;
      if ((unsigned char *)*v118 != v112)
      {
        unint64_t v120 = 0;
        int v121 = 1;
        while (v119 != (unsigned char *)-4096)
        {
          if (v120) {
            BOOL v122 = 0;
          }
          else {
            BOOL v122 = v119 == (unsigned char *)-8192;
          }
          if (v122) {
            unint64_t v120 = v118;
          }
          unsigned int v123 = v117 + v121++;
          unsigned int v117 = v123 & v116;
          uint64_t v118 = (void *)(v115 + 40 * v117);
          uint64_t v119 = (unsigned char *)*v118;
          if ((unsigned char *)*v118 == v112) {
            goto LABEL_230;
          }
        }
        if (v120) {
          v140 = v120;
        }
        else {
          v140 = v118;
        }
LABEL_271:
        uint64_t v118 = sub_1CC609054(v113 + 2480, (uint64_t)v151, (uint64_t *)v151, v140);
        v141 = v151[0];
        v118[4] = 0;
        v118[3] = 0;
        *uint64_t v118 = v141;
        v118[1] = v118 + 3;
        v118[2] = 0x100000000;
      }
LABEL_230:
      uint64_t v124 = *((unsigned int *)v118 + 4);
      if (v124)
      {
        uint64_t v125 = (const llvm::MDNode **)(v118[1] + 8);
        uint64_t v126 = 16 * v124;
        while (*((_DWORD *)v125 - 2) != 1)
        {
          v125 += 2;
          v126 -= 16;
          if (!v126) {
            goto LABEL_234;
          }
        }
        if (*v125)
        {
          if ((llvm::TBAAVerifier::visitTBAAMetadata((llvm::raw_ostream **)a1 + 206, (llvm::Instruction *)v112, *v125) & 1) == 0)
          {
            *(unsigned char *)(a1[85] + 968) = 1;
            uint64_t v129 = *(void *)(v19 + 40);
            uint64_t v130 = v129 + 24;
            uint64_t v131 = *(void *)(v129 + 32);
            if (v131 != v129 + 24)
            {
              do
              {
                uint64_t v132 = v131 - 56;
                if (!v131) {
                  uint64_t v132 = 0;
                }
                if ((*(unsigned char *)(v132 + 34) & 0x80) == 0)
                {
                  uint64_t v133 = v132 + 72;
                  for (uint64_t j = *(void *)(v132 + 80); j != v133; uint64_t j = *(void *)(j + 8))
                  {
                    uint64_t v135 = j - 24;
                    if (!j) {
                      uint64_t v135 = 0;
                    }
                    uint64_t v136 = *(void *)(v135 + 48);
                    if (v136 != v135 + 40)
                    {
                      while (1)
                      {
                        if (v136) {
                          uint64_t v137 = (llvm::Instruction *)(v136 - 24);
                        }
                        else {
                          uint64_t v137 = 0;
                        }
                        llvm::Instruction::setMetadata(v137, 1, 0);
                        uint64_t v136 = *(void *)(v136 + 8);
                        uint64_t v138 = j - 24;
                        if (!j) {
                          uint64_t v138 = 0;
                        }
                        if (v136 == v138 + 40) {
                          break;
                        }
LABEL_265:
                        if (j == v133) {
                          goto LABEL_266;
                        }
                      }
                      while (1)
                      {
                        uint64_t j = *(void *)(j + 8);
                        if (j == v133) {
                          goto LABEL_266;
                        }
                        uint64_t v139 = j - 24;
                        if (!j) {
                          uint64_t v139 = 0;
                        }
                        uint64_t v136 = *(void *)(v139 + 48);
                        if (v136 != v139 + 40) {
                          goto LABEL_265;
                        }
                      }
                    }
                  }
                }
LABEL_266:
                uint64_t v131 = *(void *)(v131 + 8);
                uint64_t v19 = a2;
              }
              while (v131 != v130);
            }
          }
        }
      }
    }
LABEL_234:
    uint64_t v109 = *(void *)(v109 + 8);
    uint64_t v127 = i - 24;
    if (!i) {
      uint64_t v127 = 0;
    }
    if (v109 != v127 + 40)
    {
LABEL_241:
      if (i == v106) {
        goto LABEL_85;
      }
      continue;
    }
    break;
  }
  while (1)
  {
    uint64_t i = *(void *)(i + 8);
    if (i == v106) {
      break;
    }
    uint64_t v128 = i - 24;
    if (!i) {
      uint64_t v128 = 0;
    }
    uint64_t v109 = *(void *)(v128 + 48);
    if (v109 != v128 + 40) {
      goto LABEL_241;
    }
  }
LABEL_85:
  uint64_t v40 = v19 + 72;
  for (uint64_t k = *(void *)(v19 + 80); ; uint64_t k = *(void *)(k + 8))
  {
    if (k == v40) {
      goto LABEL_205;
    }
    uint64_t v42 = k - 24;
    if (!k) {
      uint64_t v42 = 0;
    }
    uint64_t v43 = *(void *)(v42 + 48);
    if (v43 != v42 + 40) {
      break;
    }
  }
  uint64_t v144 = v40;
  while (2)
  {
    uint64_t v44 = (uint64_t ***)(v43 - 24);
    if (v43) {
      uint64_t v45 = (uint64_t ***)(v43 - 24);
    }
    else {
      uint64_t v45 = 0;
    }
    if ((*((unsigned char *)v45 + 23) & 0x20) == 0) {
      goto LABEL_110;
    }
    uint64_t v46 = ***v45;
    v151[0] = v45;
    int v47 = *(_DWORD *)(v46 + 2496);
    if (!v47)
    {
      uint64_t v102 = 0;
      goto LABEL_184;
    }
    uint64_t v48 = *(void *)(v46 + 2480);
    int v49 = v47 - 1;
    unsigned int v50 = v49 & ((v45 >> 4) ^ (v45 >> 9));
    size_t v51 = (void *)(v48 + 40 * v50);
    uint64_t v52 = *v51;
    if ((uint64_t ***)*v51 != v45)
    {
      std::string::size_type v53 = 0;
      int v54 = 1;
      while (v52 != -4096)
      {
        if (v53) {
          BOOL v55 = 0;
        }
        else {
          BOOL v55 = v52 == -8192;
        }
        if (v55) {
          std::string::size_type v53 = v51;
        }
        unsigned int v56 = v50 + v54++;
        unsigned int v50 = v56 & v49;
        size_t v51 = (void *)(v48 + 40 * v50);
        uint64_t v52 = *v51;
        if ((uint64_t ***)*v51 == v45) {
          goto LABEL_106;
        }
      }
      if (v53) {
        uint64_t v102 = v53;
      }
      else {
        uint64_t v102 = v51;
      }
LABEL_184:
      size_t v51 = sub_1CC609054(v46 + 2480, (uint64_t)v151, (uint64_t *)v151, v102);
      uint64_t v103 = v151[0];
      v51[4] = 0;
      v51[3] = 0;
      *size_t v51 = v103;
      v51[1] = v51 + 3;
      v51[2] = 0x100000000;
    }
LABEL_106:
    uint64_t v57 = *((unsigned int *)v51 + 4);
    if (!v57) {
      goto LABEL_110;
    }
    uint64_t v58 = (void *)(v51[1] + 8);
    uint64_t v59 = 16 * v57;
    while (*((_DWORD *)v58 - 2) != 2)
    {
      v58 += 2;
      v59 -= 16;
      if (!v59) {
        goto LABEL_110;
      }
    }
    uint64_t v93 = *v58;
    if (!*v58 || (uint64_t v94 = *(unsigned int *)(v93 + 8), (v95 = *(void *)(v93 - 8 * v94)) == 0) || *(unsigned char *)v95)
    {
LABEL_110:
      unsigned int v60 = *((unsigned __int8 *)v45 + 16) - 33;
      BOOL v61 = v60 > 0x33;
      uint64_t v62 = (1 << v60) & 0x8000000000041;
      if (v61 || v62 == 0) {
        goto LABEL_170;
      }
      uint64_t v64 = **(void **)(*(void *)(v43 + 48) + 16);
      v151[0] = 0;
      v151[1] = 0;
      unint64_t v153 = 0;
      uint64_t v154 = 0;
      unint64_t v152 = &v153;
      int v65 = *(unsigned __int8 *)(v64 + 8);
      if (v65 == 13)
      {
        uint64_t v66 = 13296;
        unint64_t v67 = 0x80003080004C0000;
      }
      else
      {
        *(_OWORD *)unint64_t v151 = xmmword_1CFAC6340;
        if (v65 == 15)
        {
          unint64_t v67 = 0x1000000000002;
          uint64_t v66 = 8;
          goto LABEL_119;
        }
        uint64_t v66 = 13304;
        unint64_t v67 = 0x80013080004C0002;
      }
      v151[0] = (void *)v67;
      v151[1] = (void *)v66;
LABEL_119:
      int v68 = v65;
      if ((v65 & 0xFE) == 0x12) {
        int v68 = *(unsigned __int8 *)(**(void **)(v64 + 16) + 8);
      }
      if (v68 != 15) {
        v151[1] = (void *)(v66 | 0x400);
      }
      if (v65 == 7) {
        v151[0] = (void *)(v67 | 0x1000000000);
      }
      unsigned int v69 = **(uint64_t ***)(v43 - 24);
      unsigned int v71 = (uint64_t *)(v43 + 40);
      uint64_t v70 = *(void *)(v43 + 40);
      if (v70 && *(_DWORD *)(v70 + 8) >= 2u) {
        uint64_t v72 = *(void *)(v70 + 48);
      }
      else {
        uint64_t v72 = 0;
      }
      v147[0] = v72;
      uint64_t v73 = llvm::AttributeSet::removeAttributes(v147, v69, (uint64_t)v151);
      if (v72 == v73) {
        uint64_t v74 = *v71;
      }
      else {
        uint64_t v74 = llvm::AttributeList::setAttributesAtIndex((void *)(v43 + 40), v69, 0, v73);
      }
      *(void *)(v43 + 40) = v74;
      sub_1CC1E4850((uint64_t)&v152, v153);
      unint64_t v75 = 0;
      for (unint64_t m = v44; ; m += 4)
      {
        int v77 = *(unsigned __int8 *)(v43 - 8);
        if (v77 == 84)
        {
          uint64_t v78 = 0;
        }
        else
        {
          if (v77 == 39) {
            uint64_t v78 = (*(_DWORD *)(v43 + 56) + 1);
          }
          else {
            uint64_t v78 = 2;
          }
          uint64_t v44 = (uint64_t ***)(v43 - 24);
        }
        int v79 = *(_DWORD *)(v43 - 4);
        if (v79 < 0 && (uint64_t v92 = v79 & 0x7FFFFFF, (*(void *)(v43 - 32 - 32 * v92) & 0xFFFFFFFF0) != 0))
        {
          uint64_t v81 = -v92;
          int v80 = *((_DWORD *)&v44[-4 * v92 - 1] - 1) - *(_DWORD *)((char *)&v44[-4 * v92] - (char *)v44[-4 * v92 - 1]);
        }
        else
        {
          int v80 = 0;
          uint64_t v81 = -(uint64_t)(v79 & 0x7FFFFFF);
        }
        if (v75 >= ((v43
                                  - 56
                                  - 32 * v78
                                  + 32 * (unint64_t)-v80
                                  - (unint64_t)&v44[4 * v81]) >> 5))
          goto LABEL_170;
        uint64_t v82 = (uint64_t)*m[4 * v81];
        v151[0] = 0;
        v151[1] = 0;
        unint64_t v153 = 0;
        uint64_t v154 = 0;
        unint64_t v152 = &v153;
        int v83 = *(unsigned __int8 *)(v82 + 8);
        if (v83 == 13) {
          break;
        }
        *(_OWORD *)unint64_t v151 = xmmword_1CFAC6340;
        if (v83 != 15)
        {
          uint64_t v84 = 13304;
          unint64_t v85 = 0x80013080004C0002;
LABEL_140:
          v151[0] = (void *)v85;
          v151[1] = (void *)v84;
          goto LABEL_141;
        }
        unint64_t v85 = 0x1000000000002;
        uint64_t v84 = 8;
LABEL_141:
        int v86 = v83;
        if ((v83 & 0xFE) == 0x12) {
          int v86 = *(unsigned __int8 *)(**(void **)(v82 + 16) + 8);
        }
        if (v86 != 15) {
          v151[1] = (void *)(v84 | 0x400);
        }
        if (v83 == 7) {
          v151[0] = (void *)(v85 | 0x1000000000);
        }
        uint64_t v87 = **v44;
        uint64_t v88 = *v71;
        if (*v71 && (v75 + 2) < *(_DWORD *)(v88 + 8)) {
          uint64_t v89 = *(void *)(v88 + 8 * (v75 + 2) + 40);
        }
        else {
          uint64_t v89 = 0;
        }
        v147[0] = v89;
        uint64_t v90 = llvm::AttributeSet::removeAttributes(v147, v87, (uint64_t)v151);
        if (v89 == v90) {
          uint64_t v91 = *v71;
        }
        else {
          uint64_t v91 = llvm::AttributeList::setAttributesAtIndex((void *)(v43 + 40), v87, (int)v75 + 1, v90);
        }
        *unsigned int v71 = v91;
        uint64_t v44 = (uint64_t ***)(v43 - 24);
        sub_1CC1E4850((uint64_t)&v152, v153);
        ++v75;
      }
      uint64_t v84 = 13296;
      unint64_t v85 = 0x80003080004C0000;
      goto LABEL_140;
    }
    unsigned int v96 = *(void **)(v95 + 8);
    if (*v96 == 14)
    {
      uint64_t v97 = v96[3];
      uint64_t v98 = *(void *)((char *)v96 + 30);
      if (v97 == 0x775F68636E617262 && v98 == 0x737468676965775FLL)
      {
        int v104 = *((unsigned __int8 *)v45 + 16);
        if (v43 && v104 == 30)
        {
          if ((*((_DWORD *)v45 + 5) & 0x7FFFFFF) == 3) {
            int v105 = 2;
          }
          else {
            int v105 = 1;
          }
        }
        else if (v43 && v104 == 31)
        {
          int v105 = (*((_DWORD *)v45 + 5) >> 1) & 0x3FFFFFF;
        }
        else
        {
          if (v104 == 84)
          {
            int v105 = 1;
          }
          else
          {
            if (!v43 || v104 != 32)
            {
              uint64_t v44 = (uint64_t ***)(v43 - 24);
              if (v104 != 85) {
                goto LABEL_170;
              }
              int v105 = 2;
              goto LABEL_199;
            }
            int v105 = (*((_DWORD *)v45 + 5) & 0x7FFFFFF) - 1;
          }
          uint64_t v44 = (uint64_t ***)(v43 - 24);
        }
LABEL_199:
        if (v94 != v105 + 1) {
          llvm::Instruction::setMetadata((llvm::Instruction *)v45, 2, 0);
        }
        goto LABEL_110;
      }
    }
LABEL_170:
    uint64_t v43 = *(void *)(v43 + 8);
    uint64_t v100 = k - 24;
    if (!k) {
      uint64_t v100 = 0;
    }
    if (v43 != v100 + 40)
    {
LABEL_177:
      if (k == v144) {
        goto LABEL_205;
      }
      continue;
    }
    break;
  }
  while (1)
  {
    uint64_t k = *(void *)(k + 8);
    if (k == v144) {
      break;
    }
    uint64_t v101 = k - 24;
    if (!k) {
      uint64_t v101 = 0;
    }
    uint64_t v43 = *(void *)(v101 + 48);
    if (v43 != v101 + 40) {
      goto LABEL_177;
    }
  }
LABEL_205:
  llvm::UpgradeFunctionAttributes((llvm *)a2, v39);
  sub_1CC1CE558((uint64_t)a3, a1);
}

void sub_1CC1D45FC(uint64_t a1@<X0>, void **a2@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  if (!*a2)
  {
    *(unsigned char *)(a1 + 1641) = 1;
    uint64_t v5 = *(void *)(a1 + 432);
    uint64_t v6 = v5 + 24;
    for (uint64_t i = *(void *)(v5 + 32); i != v6; uint64_t i = *(void *)(i + 8))
    {
      if (i) {
        uint64_t v8 = i - 56;
      }
      else {
        uint64_t v8 = 0;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v8);
      if (*a2) {
        return;
      }
    }
    if (*(_OWORD *)(a1 + 440) == 0
      || (*(void *)(a1 + 448) <= *(void *)(a1 + 440) ? (unint64_t v9 = *(void *)(a1 + 440)) : (unint64_t v9 = *(void *)(a1 + 448)),
          sub_1CC1E48C8(a2, a1, v9, 0, (uint64_t)sub_1CC1EAF38, (uint64_t)v30),
          !*a2))
    {
      if (*(_DWORD *)(a1 + 1552))
      {
        v30[0] = "Never resolved function from blockaddress";
        __int16 v31 = 259;
        sub_1CC1DDE58((int)a2, a1 + 8, (llvm::Twine *)v30);
      }
      uint64_t v10 = *(void *)(a1 + 1440);
      uint64_t v11 = *(unsigned int *)(a1 + 1456);
      uint64_t v12 = (llvm::CallBase **)(v10 + 16 * v11);
      if (*(_DWORD *)(a1 + 1448))
      {
        if (v11)
        {
          uint64_t v13 = 16 * v11;
          uint64_t v14 = *(llvm::CallBase ***)(a1 + 1440);
          while (((unint64_t)*v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v14 += 2;
            v13 -= 16;
            if (!v13) {
              goto LABEL_22;
            }
          }
        }
        else
        {
          uint64_t v14 = *(llvm::CallBase ***)(a1 + 1440);
        }
      }
      else
      {
LABEL_22:
        uint64_t v14 = (llvm::CallBase **)(v10 + 16 * v11);
      }
      char v15 = (llvm::CallBase **)(v10 + 16 * v11);
LABEL_25:
      while (v14 != v15)
      {
        unint64_t v16 = *v14;
        uint64_t v17 = *((void *)*v14 + 1);
        if (v17)
        {
          do
          {
            uint64_t v18 = *(llvm **)(v17 + 24);
            if (v18 && *((unsigned char *)v18 + 16) == 84) {
              llvm::UpgradeIntrinsicCall(v18, v14[1], v4);
            }
            uint64_t v17 = *(void *)(v17 + 8);
          }
          while (v17);
          unint64_t v16 = *v14;
          if (*((void *)*v14 + 1))
          {
            llvm::Value::doRAUW(v16, v14[1], (llvm::Value *)1);
            unint64_t v16 = *v14;
          }
        }
        llvm::Function::eraseFromParent(v16);
        uint64_t v19 = v14 + 2;
        uint64_t v14 = v12;
        if (v19 != v12)
        {
          uint64_t v14 = v19;
          while (((unint64_t)*v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v14 += 2;
            if (v14 == v12)
            {
              uint64_t v14 = v12;
              goto LABEL_25;
            }
          }
        }
      }
      sub_1CBB8977C((_DWORD *)(a1 + 1440));
      uint64_t v20 = *(void *)(a1 + 1464);
      uint64_t v21 = *(unsigned int *)(a1 + 1480);
      std::string::size_type v22 = (llvm::ValueAsMetadata **)(v20 + 16 * v21);
      if (*(_DWORD *)(a1 + 1472))
      {
        if (v21)
        {
          uint64_t v23 = 16 * v21;
          long long v24 = *(llvm::ValueAsMetadata ***)(a1 + 1464);
          while (((unint64_t)*v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v24 += 2;
            v23 -= 16;
            if (!v23) {
              goto LABEL_43;
            }
          }
        }
        else
        {
          long long v24 = *(llvm::ValueAsMetadata ***)(a1 + 1464);
        }
      }
      else
      {
LABEL_43:
        long long v24 = (llvm::ValueAsMetadata **)(v20 + 16 * v21);
      }
      uint64_t v25 = (llvm::ValueAsMetadata **)(v20 + 16 * v21);
LABEL_46:
      while (v24 != v25)
      {
        llvm::Value::doRAUW(*v24, v24[1], (llvm::Value *)1);
        llvm::Function::eraseFromParent(*v24);
        uint64_t v26 = v24 + 2;
        long long v24 = v22;
        if (v26 != v22)
        {
          long long v24 = v26;
          while (((unint64_t)*v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v24 += 2;
            if (v24 == v22)
            {
              long long v24 = v22;
              goto LABEL_46;
            }
          }
        }
      }
      sub_1CBB8977C((_DWORD *)(a1 + 1464));
      llvm::UpgradeDebugInfo(*(llvm ***)(a1 + 432), v27);
      llvm::UpgradeModuleFlags(*(llvm **)(a1 + 432), v28);
      llvm::UpgradeARCRuntime(*(llvm **)(a1 + 432), v29);
      *a2 = 0;
    }
  }
}

void sub_1CC1D48F4(uint64_t a1@<X0>, void **a2@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t **)(a1 + 1520);
  for (uint64_t i = *(uint64_t **)(a1 + 1528); v4 != i; ++v4)
  {
    uint64_t v6 = *v4;
    *(void *)(a1 + 48) = ((unint64_t)*v4 >> 3) & 0x1FFFFFFFFFFFFFF8;
    *(_DWORD *)(a1 + 64) = 0;
    if (v6 & 0x3F) != 0 && (sub_1CC1CA844(a1 + 32, v6 & 0x3F, (uint64_t)&v25), (v26))
    {
      unint64_t v7 = v25;
      *a2 = v25;
      if (v7) {
        return;
      }
    }
    else
    {
      *a2 = 0;
    }
    llvm::MetadataLoader::MetadataLoaderImpl::parseMetadata(*(llvm::MetadataLoader::MetadataLoaderImpl **)(a1 + 680), 1, a2);
    if (*a2) {
      return;
    }
  }
  uint64_t v8 = *(llvm::Module **)(a1 + 432);
  uint64_t v25 = "llvm.linker.options";
  v27[8] = 259;
  if (!llvm::Module::getNamedMetadata(v8, (const char **)&v25))
  {
    unint64_t v9 = *(llvm::Module **)(a1 + 432);
    uint64_t v25 = v27;
    uint64_t v26 = 0x800000000;
    llvm::Module::getModuleFlagsMetadata(v9, (uint64_t)&v25);
    if (v26)
    {
      uint64_t v10 = (uint64_t *)((char *)v25 + 16);
      uint64_t v11 = 24 * v26;
      while (1)
      {
        uint64_t v12 = *(void **)(*(v10 - 1) + 8);
        if (*v12 == 14)
        {
          uint64_t v13 = v12[3];
          uint64_t v14 = *(void *)((char *)v12 + 30);
          if (v13 == 0x4F2072656B6E694CLL && v14 == 0x736E6F6974704F20) {
            break;
          }
        }
        v10 += 3;
        v11 -= 24;
        if (!v11) {
          goto LABEL_24;
        }
      }
      uint64_t v16 = *v10;
    }
    else
    {
LABEL_24:
      uint64_t v16 = 0;
    }
    if (v25 == v27)
    {
      if (!v16) {
        goto LABEL_11;
      }
    }
    else
    {
      free(v25);
      if (!v16) {
        goto LABEL_11;
      }
    }
    uint64_t inserted = llvm::Module::getOrInsertNamedMetadata(*(_DWORD **)(a1 + 432), "llvm.linker.options", 0x13uLL);
    uint64_t v18 = *(unsigned int *)(v16 + 8);
    if (v18)
    {
      uint64_t v19 = inserted;
      uint64_t v20 = -8 * v18;
      do
      {
        uint64_t v21 = *(void **)(v16 + v20);
        uint64_t v25 = v21;
        uint64_t v22 = *(void *)(v19 + 48);
        uint64_t v23 = *(unsigned int *)(v22 + 8);
        if (v23 >= *(_DWORD *)(v22 + 12))
        {
          sub_1CC608328(*(void *)(v19 + 48), (unsigned __int8 **)&v25);
        }
        else
        {
          long long v24 = (void *)(*(void *)v22 + 8 * v23);
          *long long v24 = v21;
          if (v21)
          {
            llvm::MetadataTracking::track((uint64_t)v24, (unsigned __int8 *)v21, 2);
            LODWORD(v23) = *(_DWORD *)(v22 + 8);
          }
          *(_DWORD *)(v22 + 8) = v23 + 1;
        }
        v20 += 8;
      }
      while (v20);
    }
  }
LABEL_11:
  *(void *)(a1 + 1528) = *(void *)(a1 + 1520);
  *a2 = 0;
}

uint64_t sub_1CC1D4B48(uint64_t result)
{
  *(unsigned char *)(result + 1642) = 1;
  return result;
}

void *sub_1CC1D4B54@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  long long v3 = (unsigned char *)result[220];
  uint64_t v4 = (unsigned char *)result[221];
  int64_t v5 = v4 - v3;
  if (v4 != v3)
  {
    if (v5 < 0) {
      abort();
    }
    uint64_t v6 = (char *)operator new(v4 - v3);
    *a2 = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    a2[2] = v7;
    uint64_t result = memcpy(v6, v3, v5);
    a2[1] = v7;
  }
  return result;
}

void sub_1CC1D4BC4(void **a1, uint64_t a2, llvm::Value *a3)
{
  long long v3 = a3;
  uint64_t v1246 = *MEMORY[0x1E4F143B8];
  v1226 = a3;
  uint64_t v6 = a2 + 32;
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 32), 0, 12, a1);
  if (*a1) {
    return;
  }
  uint64_t v7 = *(void *)(a2 + 680);
  if (*(_DWORD *)(v7 + 24) >= 2u)
  {
    v1243 = (void **)"Invalid function metadata: incoming forward references";
    v1245[8] = 259;
    sub_1CC1DDE58((int)a1, a2 + 8, (llvm::Twine *)&v1243);
  }
  *(_DWORD *)(a2 + 752) = 0;
  uint64_t v8 = *(void *)(a2 + 624);
  uint64_t v9 = *(void *)(a2 + 616);
  int v10 = *(_DWORD *)(a2 + 608);
  unint64_t v1201 = *(unsigned int *)(v7 + 8);
  if (v10)
  {
    uint64_t v11 = *(void *)(a2 + 592);
    int v12 = v10 - 1;
    unsigned int v13 = v12 & ((v3 >> 4) ^ (v3 >> 9));
    uint64_t v14 = (llvm::Value **)(v11 + 16 * v13);
    char v15 = *v14;
    if (*v14 == v3) {
      goto LABEL_19;
    }
    uint64_t v16 = 0;
    int v17 = 1;
    while (v15 != (llvm::Value *)-4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == (llvm::Value *)-8192;
      }
      if (v18) {
        uint64_t v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      uint64_t v14 = (llvm::Value **)(v11 + 16 * v13);
      char v15 = *v14;
      if (*v14 == v3) {
        goto LABEL_19;
      }
    }
    if (v16) {
      uint64_t v20 = v16;
    }
    else {
      uint64_t v20 = v14;
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  uint64_t v14 = (llvm::Value **)sub_1CC1E3088(a2 + 592, (uint64_t)&v1226, (uint64_t *)&v1226, v20);
  void *v14 = v1226;
  *((_DWORD *)v14 + 2) = 0;
  long long v3 = v1226;
LABEL_19:
  uint64_t v1209 = a2 + 8;
  unint64_t v21 = v8 - v9;
  int v22 = *((_DWORD *)v14 + 2);
  if ((*((_WORD *)v3 + 9) & 1) == 0)
  {
    uint64_t v23 = (void **)*((void *)v3 + 11);
LABEL_21:
    long long v24 = v23;
    goto LABEL_22;
  }
  llvm::Function::BuildLazyArguments(v3);
  uint64_t v23 = (void **)*((void *)v3 + 11);
  if ((*((_WORD *)v3 + 9) & 1) == 0) {
    goto LABEL_21;
  }
  llvm::Function::BuildLazyArguments(v3);
  long long v24 = (void **)*((void *)v3 + 11);
LABEL_22:
  v1210 = (void *)v6;
  v1206 = a1;
  unint64_t v1199 = v21 >> 5;
  unint64_t v1200 = v21;
  v1208 = (uint64_t *)(a2 + 616);
  uint64_t v25 = &v24[5 * *((void *)v3 + 12)];
  if (v23 != v25)
  {
    unsigned int v26 = 0;
    int v27 = 37 * v22;
    while (1)
    {
      uint64_t v28 = *(void *)(a2 + 544);
      uint64_t v29 = *(unsigned int *)(a2 + 560);
      if (v29)
      {
        unsigned int v30 = v29 - 1;
        __int16 v31 = (int *)(v28 + 32 * ((v29 - 1) & v27));
        int v32 = *v31;
        if (v22 == *v31) {
          goto LABEL_26;
        }
        int v36 = 1;
        LODWORD(v37) = v30 & v27;
        while (v32 != -1)
        {
          int v38 = v37 + v36++;
          uint64_t v37 = v38 & v30;
          int v32 = *(_DWORD *)(v28 + 32 * v37);
          if (v22 == v32)
          {
            __int16 v31 = (int *)(v28 + 32 * v37);
            goto LABEL_26;
          }
        }
      }
      __int16 v31 = (int *)(v28 + 32 * v29);
LABEL_26:
      ++v26;
      if ((int *)(v28 + 32 * v29) == v31 || v31[4] <= v26) {
        int v33 = -1;
      }
      else {
        int v33 = *(_DWORD *)(*((void *)v31 + 1) + 4 * v26);
      }
      v1243 = v23;
      LODWORD(v1234) = v33;
      unint64_t v34 = *(void *)(a2 + 624);
      if (v34 >= *(void *)(a2 + 632))
      {
        uint64_t v35 = sub_1CC1E31BC(v1208, (uint64_t *)&v1243, &v1234);
      }
      else
      {
        *(void *)unint64_t v34 = 6;
        *(void *)(v34 + 8) = 0;
        *(void *)(v34 + 16) = v23;
        if (v23 != (void **)-8192 && v23 != (void **)-4096 && v23)
        {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v34);
          int v33 = (int)v1234;
        }
        *(_DWORD *)(v34 + 24) = v33;
        uint64_t v35 = v34 + 32;
      }
      *(void *)(a2 + 624) = v35;
      v23 += 5;
      if (v23 == v25) {
        goto LABEL_45;
      }
    }
  }
  uint64_t v35 = *(void *)(a2 + 624);
LABEL_45:
  uint64_t v1207 = 0;
  v1203 = (_DWORD *)(a2 + 752);
  v1204 = (uint64_t *)(a2 + 744);
  unint64_t v39 = (unint64_t)(v35 - *(void *)(a2 + 616)) >> 5;
  uint64_t v1224 = 0;
  v1225 = 0;
  uint64_t v1222 = 0;
  uint64_t v1223 = 0;
  unint64_t v1205 = 0;
  v1243 = (void **)v1245;
  v1202 = (char **)(a2 + 1392);
  uint64_t v1244 = 0x4000000000;
  *(void *)v1211 = v39;
  uint64_t v40 = a1;
  uint64_t v41 = a2 + 8;
  uint64_t v42 = v1210;
  while (2)
  {
    sub_1CC1CA5F4((uint64_t)v42, 0, (uint64_t)&v1241);
    if (v1242)
    {
      uint64_t v44 = v1241;
      v1241 = 0;
      *uint64_t v40 = v44;
LABEL_52:
      int v45 = 1;
      goto LABEL_53;
    }
    unint64_t v43 = HIDWORD(v1241);
    switch(v1241)
    {
      case 2:
        switch(HIDWORD(v1241))
        {
          case 0xB:
            sub_1CC1DE380(v40, a2);
            if (*v40) {
              goto LABEL_52;
            }
            *(void *)v1211 = (*(void *)(a2 + 624) - *(void *)(a2 + 616)) >> 5;
            int v45 = 4;
            goto LABEL_53;
          case 0xE:
            sub_1CC1E12C8(v40, a2, 0);
            goto LABEL_73;
          case 0xF:
            llvm::MetadataLoader::MetadataLoaderImpl::parseMetadata(*(llvm::MetadataLoader::MetadataLoaderImpl **)(a2 + 680), 0, v40);
            goto LABEL_73;
          case 0x10:
            llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataAttachment(*(void *)(a2 + 680), v1226, *(void *)(a2 + 744), v40);
            goto LABEL_73;
          case 0x12:
            sub_1CC1E1ADC(v40, (void *)a2);
            goto LABEL_73;
          default:
            sub_1CC1C6524((uint64_t)v42, v40);
LABEL_73:
            if (*v40) {
              int v45 = 1;
            }
            else {
              int v45 = 4;
            }
            break;
        }
        goto LABEL_53;
      case 1:
        int v45 = 7;
        goto LABEL_53;
      case 0:
        v1234 = "Malformed block";
        v1238[0] = 259;
        sub_1CC1DDE58((int)v40, v41, (llvm::Twine *)&v1234);
    }
    LODWORD(v1244) = 0;
    unsigned int __src = -1;
    llvm::BitstreamCursor::readRecord(v42, SHIDWORD(v1241), (uint64_t)&v1243, 0, (uint64_t)&v1239);
    if (v1240)
    {
      size_t v51 = v1239;
      v1239 = 0;
      *uint64_t v40 = v51;
      int v45 = 1;
      goto LABEL_1429;
    }
    int v47 = (int)v1239;
    switch((int)v1239)
    {
      case 1:
        if (!v1244) {
          goto LABEL_434;
        }
        unint64_t v216 = (unint64_t)*v1243;
        if (!*v1243) {
          goto LABEL_434;
        }
        uint64_t v217 = *(void *)(a2 + 1392);
        unint64_t v218 = (*(void *)(a2 + 1400) - v217) >> 3;
        if (v216 <= v218)
        {
          if (v216 < v218) {
            *(void *)(a2 + 1400) = v217 + 8 * v216;
          }
        }
        else
        {
          sub_1CC1E3B50(v1202, v216 - v218);
        }
        v1234 = 0;
        if (!sub_1CC0A2428(*(void *)(a2 + 1544), *(_DWORD *)(a2 + 1560), (uint64_t)v1226, &v1234)
          || (v488 = v1234, v1234 == (char *)(*(void *)(a2 + 1544) + 32 * *(unsigned int *)(a2 + 1560))))
        {
          if (*(void *)(a2 + 1392) != *(void *)(a2 + 1400))
          {
            v1238[0] = 257;
            operator new();
          }
        }
        else
        {
          v489 = (void *)*((void *)v1234 + 1);
          uint64_t v490 = *((void *)v1234 + 2) - (void)v489;
          uint64_t v491 = *(void *)(a2 + 1400) - *(void *)(a2 + 1392);
          if (v490 >> 3 > (unint64_t)(v491 >> 3))
          {
            uint64_t v94 = "Invalid ID";
            goto LABEL_1426;
          }
          if ((v491 & 0x7FFFFFFF8) != 0)
          {
            unint64_t v640 = 0;
            unint64_t v641 = ((unint64_t)v490 >> 3);
            uint64_t v642 = ((unint64_t)v491 >> 3);
            do
            {
              if (v640 >= v641 || (uint64_t v643 = *((void *)v488 + 1), (v644 = *(void *)(v643 + 8 * v640)) == 0))
              {
                v1238[0] = 257;
                operator new();
              }
              v645 = v1226;
              v646 = (void *)((char *)v1226 + 72);
              llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v1226 + 72, *(llvm::Value **)(v643 + 8 * v640));
              uint64_t v647 = *((void *)v645 + 9);
              *(void *)(v644 + 24) = v647;
              *(void *)(v644 + 32) = v646;
              uint64_t v648 = v644 + 24;
              *(void *)(v647 + 8) = v648;
              *((void *)v645 + 9) = v648;
              uint64_t v42 = v1210;
              *(void *)&(*v1202)[8 * v640] = *(void *)(*((void *)v488 + 1) + 8 * v640);
              ++v640;
            }
            while (v642 != v640);
            v489 = (void *)*((void *)v488 + 1);
            uint64_t v41 = a2 + 8;
          }
          if (v489)
          {
            *((void *)v488 + 2) = v489;
            operator delete(v489);
          }
          *(void *)v488 = -8192;
          *(int32x2_t *)(a2 + 1552) = vadd_s32(*(int32x2_t *)(a2 + 1552), (int32x2_t)0x1FFFFFFFFLL);
        }
        uint64_t v1207 = *(void *)*v1202;
        goto LABEL_937;
      case 2:
        LODWORD(v1227) = 0;
        v1231.n128_u64[0] = 0;
        LODWORD(v1214[0]) = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1227, v1211[0], (llvm::Type ***)&v1231, v1214)) {
          goto LABEL_951;
        }
        int v219 = v1227;
        if (v1244 == v1227) {
          goto LABEL_951;
        }
        unsigned int v220 = v1214[0];
        v221 = (uint64_t *)v1231.n128_u64[0];
        uint64_t v222 = v1243[v1227];
        uint64_t v223 = *(unsigned char *)(a2 + 1640) ? v1211[0] - v222 : v222;
        v224 = sub_1CC1E29E0(a2, v223, *(llvm::Type **)v1231.n128_u64[0]);
        if (!v224) {
          goto LABEL_951;
        }
        uint64_t v225 = (v219 + 2);
        if (v1244 < v225) {
          goto LABEL_951;
        }
        uint64_t v226 = (uint64_t)v224;
        unsigned int v227 = sub_1CC1E2160((int)v1243[v219 + 1], *v221);
        if (v227 == -1) {
          goto LABEL_951;
        }
        unsigned int v228 = v227;
        v1238[0] = 257;
        uint64_t v155 = (uint64_t ***)llvm::BinaryOperator::Create(v227, v221, v226, (const char **)&v1234, 0);
        unsigned int __src = v220;
        unint64_t v229 = *(unsigned int *)(a2 + 752);
        if (v229 >= *(unsigned int *)(a2 + 756)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*v1204 + 8 * v229) = v155;
        ++*v1203;
        uint64_t v41 = a2 + 8;
        if (v1244 <= v225) {
          goto LABEL_304;
        }
        HIDWORD(v231) = v228 - 13;
        LODWORD(v231) = v228 - 13;
        unsigned int v230 = v231 >> 1;
        if (v230 <= 6 && ((1 << v230) & 0x47) != 0)
        {
          unint64_t v232 = v1243;
          v233 = v1243[v225];
          if ((v233 & 2) != 0)
          {
            *((unsigned char *)v155 + 17) |= 4u;
            v233 = v232[v225];
          }
          if (v233) {
            *((unsigned char *)v155 + 17) |= 2u;
          }
LABEL_304:
          int v45 = 9;
LABEL_955:
          uint64_t v42 = v1210;
          goto LABEL_1422;
        }
        if (v228 <= 0x1B && ((1 << v228) & 0xC180000) != 0)
        {
          if ((v1243[v225] & 1) == 0)
          {
LABEL_1457:
            int v45 = 9;
            uint64_t v40 = v1206;
            uint64_t v41 = a2 + 8;
            goto LABEL_955;
          }
          char v902 = *((unsigned char *)v155 + 17) | 2;
        }
        else
        {
          if (!sub_1CB845E74((uint64_t)v155)) {
            goto LABEL_1457;
          }
          unsigned int v1006 = v1243[v225] & 0x7E | (v1243[v225] >> 7) & 1 | -(v1243[v225] & 1);
          if (!v1006) {
            goto LABEL_1457;
          }
          char v902 = *((unsigned char *)v155 + 17) | (2 * v1006);
        }
        *((unsigned char *)v155 + 17) = v902;
        goto LABEL_1457;
      case 3:
        LODWORD(v1227) = 0;
        v1231.n128_u64[0] = 0;
        LODWORD(v1214[0]) = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1227, v1211[0], (llvm::Type ***)&v1231, v1214)) {
          goto LABEL_532;
        }
        int v263 = v1227;
        if (v1244 != v1227 + 2) {
          goto LABEL_532;
        }
        size_t v264 = v1243[v1227];
        unsigned int __src = v264;
        uint64_t v265 = sub_1CC1E22AC(a2, v264);
        uint64_t v266 = v265;
        int v267 = 38;
        switch(v1243[v263 + 1])
        {
          case 0u:
            goto LABEL_1231;
          case 1u:
            int v267 = 39;
            goto LABEL_1231;
          case 2u:
            int v267 = 40;
            goto LABEL_1231;
          case 3u:
            int v267 = 41;
            goto LABEL_1231;
          case 4u:
            int v267 = 42;
            goto LABEL_1231;
          case 5u:
            int v267 = 43;
            goto LABEL_1231;
          case 6u:
            int v267 = 44;
            goto LABEL_1231;
          case 7u:
            int v267 = 45;
            goto LABEL_1231;
          case 8u:
            int v267 = 46;
            goto LABEL_1231;
          case 9u:
            int v267 = 47;
            goto LABEL_1231;
          case 0xAu:
            int v267 = 48;
            goto LABEL_1231;
          case 0xBu:
            if (!v265) {
              goto LABEL_1419;
            }
            v809 = (llvm::Type **)v1231.n128_u64[0];
            v810 = *(void ***)v1231.n128_u64[0];
            unsigned int v811 = *(_DWORD *)(*(void *)v1231.n128_u64[0] + 8);
            char v812 = v811;
            if ((v811 & 0xFE) == 0x12) {
              char v812 = *(unsigned char *)(*v810[2] + 8);
            }
            if (v812 == 15)
            {
              int v813 = *(_DWORD *)(v265 + 8);
              char v814 = v813;
              if ((v813 & 0xFE) == 0x12) {
                char v814 = *(unsigned char *)(**(void **)(v265 + 16) + 8);
              }
              if (v814 == 15)
              {
                if ((v811 & 0xFE) == 0x12) {
                  unsigned int v811 = *(_DWORD *)(*v810[2] + 8);
                }
                if ((v813 & 0xFE) == 0x12) {
                  int v813 = *(_DWORD *)(**(void **)(v265 + 16) + 8);
                }
                if ((v813 ^ v811) >= 0x100)
                {
                  uint64_t v1127 = **v810 + 1984;
                  v1238[0] = 257;
                  v1128 = llvm::CastInst::Create(47, v1231.n128_i64[0], v1127, (const char **)&v1234, 0);
                  v1238[0] = 257;
                  v1129 = llvm::CastInst::Create(48, (uint64_t)v1128, v266, (const char **)&v1234, 0);
                  if (v1129)
                  {
                    uint64_t v155 = (uint64_t ***)v1129;
                    if (v1128)
                    {
                      unint64_t v1130 = *(unsigned int *)(a2 + 752);
                      if (v1130 >= *(unsigned int *)(a2 + 756)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *(void *)(*v1204 + 8 * v1130) = v1128;
                      ++*v1203;
                      *((void *)v1128 + 5) = v1207;
                      *(_WORD *)(v1207 + 18) &= ~0x8000u;
                      if ((*((unsigned char *)v1128 + 23) & 0x10) != 0)
                      {
                        uint64_t v1146 = *(void *)(v1207 + 56);
                        if (v1146)
                        {
                          v1147 = *(llvm::ValueSymbolTable **)(v1146 + 104);
                          if (v1147) {
                            llvm::ValueSymbolTable::reinsertValue(v1147, v1128);
                          }
                        }
                      }
                      uint64_t v1131 = *(void *)(v1207 + 40);
                      *((void *)v1128 + 3) = v1131;
                      *((void *)v1128 + 4) = v1207 + 40;
                      v1132 = (char *)v1128 + 24;
                      *(void *)(v1131 + 8) = v1132;
                      *(void *)(v1207 + 40) = v1132;
                    }
                    uint64_t v40 = v1206;
                    uint64_t v42 = v1210;
                    goto LABEL_1235;
                  }
                }
              }
            }
            int v267 = 49;
            uint64_t v40 = v1206;
            uint64_t v42 = v1210;
LABEL_1233:
            if (llvm::CastInst::castIsValid(v267, *v809, v266))
            {
              v1238[0] = 257;
              uint64_t v155 = (uint64_t ***)llvm::CastInst::Create(v267, (uint64_t)v809, v266, (const char **)&v1234, 0);
LABEL_1235:
              unint64_t v182 = *(unsigned int *)(a2 + 752);
              if (v182 >= *(unsigned int *)(a2 + 756)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v41 = a2 + 8;
              goto LABEL_1365;
            }
            unint64_t v308 = "Invalid cast";
            break;
          case 0xCu:
            int v267 = 50;
LABEL_1231:
            if (!v265) {
              goto LABEL_1419;
            }
            v809 = (llvm::Type **)v1231.n128_u64[0];
            goto LABEL_1233;
          default:
            goto LABEL_1419;
        }
        goto LABEL_1420;
      case 4:
      case 30:
      case 43:
        LODWORD(v1217) = 0;
        if (v1239 == 43)
        {
          BOOL v48 = *v1243 != 0;
          LODWORD(v1217) = 2;
          unsigned int v49 = *((_DWORD *)v1243 + 2);
          uint64_t v50 = sub_1CC1E22AC(a2, v49);
        }
        else
        {
          uint64_t v50 = 0;
          BOOL v48 = v1239 == 30;
          unsigned int v49 = -1;
        }
        uint64_t v73 = &v1236;
        uint64_t v1227 = 0;
        LODWORD(v1213) = 0;
        unsigned int v74 = v1211[0];
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1217, v1211[0], (llvm::Type ***)&v1227, &v1213)) {
          goto LABEL_668;
        }
        if (v50)
        {
          unint64_t v75 = (uint64_t *)v1227;
          uint64_t v76 = *(_DWORD **)v1227;
          if ((*(_DWORD *)(*(void *)v1227 + 8) & 0xFE) == 0x12) {
            uint64_t v76 = (_DWORD *)**((void **)v76 + 2);
          }
          uint64_t v77 = *((void *)v76 + 3);
          if (v77 && v77 != v50)
          {
            uint64_t v78 = "Explicit gep type does not match pointee type of pointer operand";
LABEL_952:
            v1234 = (char *)v78;
            v1238[0] = 259;
            goto LABEL_953;
          }
          goto LABEL_698;
        }
        uint64_t v333 = *(void *)(a2 + 544);
        uint64_t v334 = *(unsigned int *)(a2 + 560);
        if (!v334) {
          goto LABEL_1810;
        }
        unsigned int v335 = v334 - 1;
        unint64_t v336 = (int *)(v333 + 32 * ((v334 - 1) & (37 * v1213)));
        int v337 = *v336;
        if (v1213 != *v336)
        {
          BOOL v1069 = v48;
          int v1070 = 1;
          LODWORD(v1071) = v335 & (37 * v1213);
          while (1)
          {
            uint64_t v40 = v1206;
            uint64_t v73 = &v1236;
            unsigned int v74 = v1211[0];
            BOOL v48 = v1069;
            if (v337 == -1) {
              break;
            }
            int v1072 = v1071 + v1070++;
            uint64_t v1071 = v1072 & v335;
            int v337 = *(_DWORD *)(v333 + 32 * v1071);
            if (v1213 == v337)
            {
              unint64_t v336 = (int *)(v333 + 32 * v1071);
              uint64_t v40 = v1206;
              uint64_t v73 = &v1236;
              unsigned int v74 = v1211[0];
              BOOL v48 = v1069;
              goto LABEL_437;
            }
          }
LABEL_1810:
          unint64_t v336 = (int *)(v333 + 32 * v334);
        }
LABEL_437:
        v338 = (int *)(v333 + 32 * v334);
        if (v338 == v336 || !v336[4]) {
          int v339 = -1;
        }
        else {
          int v339 = **((_DWORD **)v336 + 1);
        }
        unint64_t v75 = (uint64_t *)v1227;
        if ((*(_DWORD *)(*(void *)v1227 + 8) & 0xFE) == 0x12) {
          unsigned int v49 = -1;
        }
        else {
          unsigned int v49 = v339;
        }
        if (v334 && (*(_DWORD *)(*(void *)v1227 + 8) & 0xFE) == 0x12)
        {
          unsigned int v374 = v334 - 1;
          v375 = (int *)(v333 + 32 * ((37 * v339) & v374));
          int v376 = *v375;
          if (v339 == *v375)
          {
LABEL_496:
            if (v338 == v375 || !v375[4]) {
              unsigned int v49 = -1;
            }
            else {
              unsigned int v49 = **((_DWORD **)v375 + 1);
            }
          }
          else
          {
            int v1077 = 1;
            LODWORD(v1078) = (37 * v339) & v374;
            while (v376 != -1)
            {
              int v1079 = v1078 + v1077++;
              uint64_t v1078 = v1079 & v374;
              int v376 = *(_DWORD *)(v333 + 32 * v1078);
              if (v339 == v376)
              {
                v375 = (int *)(v333 + 32 * v1078);
                uint64_t v40 = v1206;
                uint64_t v73 = &v1236;
                unsigned int v74 = v1211[0];
                goto LABEL_496;
              }
            }
            unsigned int v49 = -1;
            uint64_t v40 = v1206;
            uint64_t v73 = &v1236;
            unsigned int v74 = v1211[0];
          }
        }
        uint64_t v50 = sub_1CC1E22AC(a2, v49);
LABEL_698:
        v1234 = (char *)&v1236;
        uint64_t v1235 = 0x1000000000;
        if (v1244 == v1217)
        {
          BOOL v1193 = v48;
          unsigned int v501 = 0;
        }
        else
        {
          do
          {
            v1214[0] = 0;
            int v1218 = 0;
            if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1217, v74, v1214, &v1218))
            {
              v1231.n128_u64[0] = (unint64_t)"Invalid record";
              __int16 v1233 = 259;
              sub_1CC1DDE58((int)v40, v1209, (llvm::Twine *)&v1231);
            }
            if (v1235 >= (unint64_t)HIDWORD(v1235)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(llvm::Type ***)&v1234[8 * v1235] = v1214[0];
            unsigned int v501 = v1235 + 1;
            LODWORD(v1235) = v1235 + 1;
          }
          while (v1244 != v1217);
          BOOL v1193 = v48;
          uint64_t v73 = (uint64_t *)v1234;
        }
        uint64_t v502 = v501 + 1;
        __int16 v1233 = 257;
        v503 = (uint64_t ***)operator new(32 * v502 + 80);
        uint64_t v155 = &v503[4 * v502];
        *((_DWORD *)v155 + 5) = *((_DWORD *)v155 + 5) & 0x38000000 | v502 & 0x7FFFFFF;
        if (v501 != -1)
        {
          do
          {
            *v503 = 0;
            v503[1] = 0;
            v503[2] = 0;
            v503[3] = (uint64_t **)v155;
            v503 += 4;
          }
          while (v503 != v155);
        }
        sub_1CB845A7C(v50, v75, (uint64_t)v73, v501);
        *uint64_t v155 = v504;
        v155[1] = 0;
        int v505 = *((_DWORD *)v155 + 5) & 0xC0000000 | v502 & 0x7FFFFFF;
        *((_DWORD *)v155 + 4) = 62;
        *((_DWORD *)v155 + 5) = v505;
        *(_OWORD *)(v155 + 3) = 0u;
        *(_OWORD *)(v155 + 5) = 0u;
        *((_DWORD *)v155 + 14) = 0;
        v155[8] = (uint64_t **)v50;
        v155[9] = (uint64_t **)llvm::GetElementPtrInst::getIndexedType(v50, (uint64_t)v73, v501);
        llvm::GetElementPtrInst::init(v155, (uint64_t **)v75, v73, v501, (const char **)&v1231);
        unsigned int __src = v49;
        int v506 = *((_DWORD *)v155 + 5);
        uint64_t v41 = a2 + 8;
        uint64_t v42 = v1210;
        if ((v506 & 0x7FFFFFF) == 1) {
          goto LABEL_719;
        }
        uint64_t v507 = 3;
        if (*((unsigned char *)v155 + 16) == 62) {
          uint64_t v507 = 8;
        }
        if ((v506 & 0x40000000) != 0) {
          v508 = (uint64_t ***)*(v155 - 1);
        }
        else {
          v508 = &v155[-4 * (v506 & 0x7FFFFFF)];
        }
        uint64_t v509 = (unint64_t)v155[v507] | 4;
        v1231.n128_u64[0] = (unint64_t)(v508 + 4);
        v1231.n128_u64[1] = v509;
        sub_1CB8460E4((uint64_t)&v1231);
        int v510 = *((_DWORD *)v155 + 5);
        if ((v510 & 0x40000000) != 0)
        {
          v512 = v155;
          v513 = (uint64_t ***)*(v155 - 1);
          uint64_t v511 = v510 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v511 = v510 & 0x7FFFFFF;
          v512 = v155;
          v513 = &v155[-4 * v511];
        }
        if (v511 == 2)
        {
LABEL_718:
          uint64_t v155 = v512;
LABEL_719:
          v514 = *v155;
          if (((*v155)[1] & 0xFE) == 0x12) {
            v514 = (uint64_t **)*v514[2];
          }
          unsigned int __src = sub_1CC1E23EC(a2, (uint64_t)v514, (char *)&__src, 1);
          unint64_t v43 = (unint64_t)*v155;
          if (((*v155)[1] & 0xFE) == 0x12) {
            unsigned int __src = sub_1CC1E23EC(a2, v43, (char *)&__src, 1);
          }
          unint64_t v515 = *(unsigned int *)(a2 + 752);
          if (v515 >= *(unsigned int *)(a2 + 756)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*v1204 + 8 * v515) = v155;
          ++*v1203;
          if (v1193) {
            *((unsigned char *)v155 + 17) |= 2u;
          }
          int v45 = 9;
          v516 = v1234;
          v517 = &v1236;
          goto LABEL_1345;
        }
        v518 = (unsigned int **)&v513[4 * v511];
        v519 = (unsigned int **)(v513 + 8);
        while (1)
        {
          if ((v1231.n128_u8[8] & 4) != 0)
          {
            unint64_t v522 = 0;
          }
          else
          {
            SplatValue = *v519;
            if ((*(_DWORD *)(*(void *)*v519 + 8) & 0xFE) == 0x12) {
              SplatValue = (unsigned int *)llvm::Constant::getSplatValue((llvm::Constant *)SplatValue, 0);
            }
            v521 = SplatValue + 6;
            if (SplatValue[8] >= 0x41) {
              v521 = *(unsigned int **)v521;
            }
            unint64_t v522 = *v521;
          }
          uint64_t v523 = *(void *)(a2 + 544);
          uint64_t v524 = *(unsigned int *)(a2 + 560);
          if (v524)
          {
            unsigned int v525 = v524 - 1;
            v526 = (int *)(v523 + 32 * ((v524 - 1) & (37 * __src)));
            int v527 = *v526;
            if (__src == *v526) {
              goto LABEL_737;
            }
            int v529 = 1;
            LODWORD(v530) = v525 & (37 * __src);
            while (1)
            {
              uint64_t v40 = v1206;
              uint64_t v41 = a2 + 8;
              uint64_t v42 = v1210;
              if (v527 == -1) {
                break;
              }
              int v531 = v530 + v529++;
              uint64_t v530 = v531 & v525;
              int v527 = *(_DWORD *)(v523 + 32 * v530);
              if (__src == v527)
              {
                v526 = (int *)(v523 + 32 * v530);
                uint64_t v40 = v1206;
                uint64_t v41 = a2 + 8;
                uint64_t v42 = v1210;
                goto LABEL_737;
              }
            }
          }
          v526 = (int *)(v523 + 32 * v524);
LABEL_737:
          if ((int *)(v523 + 32 * v524) == v526 || v526[4] <= v522) {
            unsigned int v528 = -1;
          }
          else {
            unsigned int v528 = *(_DWORD *)(*((void *)v526 + 1) + 4 * v522);
          }
          unsigned int __src = v528;
          sub_1CB8460E4((uint64_t)&v1231);
          v519 += 4;
          if (v519 == v518) {
            goto LABEL_718;
          }
        }
      case 5:
        LODWORD(v1227) = 0;
        v1231.n128_u64[0] = 0;
        LODWORD(v1214[0]) = 0;
        uint64_t v185 = **(void **)(a2 + 424);
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1227, v1211[0], (llvm::Type ***)&v1231, v1214)) {
          goto LABEL_951;
        }
        int v186 = v1227;
        if (v1244 == v1227) {
          goto LABEL_951;
        }
        unsigned int v187 = v1214[0];
        size_t v188 = (uint64_t *)v1231.n128_u64[0];
        uint64_t v189 = v1243[v1227];
        uint64_t v190 = *(unsigned char *)(a2 + 1640) ? v1211[0] - v189 : v189;
        unint64_t v191 = sub_1CC1E29E0(a2, v190, *(llvm::Type **)v1231.n128_u64[0]);
        if (!v191) {
          goto LABEL_951;
        }
        uint64_t v192 = (uint64_t)v191;
        sub_1CC1E23EC(a2, v185 + 1888, 0, 0);
        if (v1244 == v186 + 1) {
          goto LABEL_951;
        }
        uint64_t v193 = v1243[v186 + 1];
        uint64_t v194 = *(unsigned char *)(a2 + 1640) ? v1211[0] - v193 : v193;
        uint64_t v195 = sub_1CC1E29E0(a2, v194, (llvm::Type *)(v185 + 1888));
        if (!v195) {
          goto LABEL_951;
        }
        LODWORD(v1227) = v186 + 2;
        v1238[0] = 257;
        uint64_t v155 = (uint64_t ***)sub_1CC199EFC((uint64_t)v195, v188, v192, (const char **)&v1234, 0, 0);
        unsigned int __src = v187;
        unint64_t v196 = *(unsigned int *)(a2 + 752);
        if (v196 >= *(unsigned int *)(a2 + 756)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*v1204 + 8 * v196) = v155;
        ++*v1203;
        int v45 = 9;
        uint64_t v41 = a2 + 8;
        goto LABEL_955;
      case 6:
        LODWORD(v1214[0]) = 0;
        v1231.n128_u64[0] = 0;
        uint64_t v1227 = 0;
        LODWORD(v1217) = 0;
        LODWORD(v1213) = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, v1214, v1211[0], (llvm::Type ***)&v1231, &v1217)
          || sub_1CC1E1FFC(a2, (uint64_t *)&v1243, v1214, v1211[0], (llvm::Type ***)&v1227, &v1213))
        {
          goto LABEL_532;
        }
        uint64_t v268 = (llvm::Value *)v1231.n128_u64[0];
        if ((*(_DWORD *)(*(void *)v1231.n128_u64[0] + 8) & 0xFE) != 0x12) {
          goto LABEL_481;
        }
        uint64_t v269 = (llvm::Value *)v1227;
        v1238[0] = 257;
        v270 = (char *)operator new(0x80uLL);
        *((_DWORD *)v270 + 21) = *((_DWORD *)v270 + 21) & 0x38000000 | 2;
        uint64_t v155 = (uint64_t ***)(v270 + 64);
        *(void *)v270 = 0;
        *((void *)v270 + 1) = 0;
        *((void *)v270 + 2) = 0;
        *((void *)v270 + 3) = v270 + 64;
        *((void *)v270 + 4) = 0;
        *((void *)v270 + 5) = 0;
        *((void *)v270 + 6) = 0;
        *((void *)v270 + 7) = v270 + 64;
        llvm::ExtractElementInst::ExtractElementInst((llvm::ExtractElementInst *)(v270 + 64), v268, v269, (const char **)&v1234, 0);
        uint64_t v271 = *(void *)(a2 + 544);
        uint64_t v272 = *(unsigned int *)(a2 + 560);
        if (!v272) {
          goto LABEL_1856;
        }
        unsigned int v273 = v272 - 1;
        uint64_t v274 = (int *)(v271 + 32 * ((v272 - 1) & (37 * v1217)));
        int v275 = *v274;
        if (v1217 == *v274) {
          goto LABEL_348;
        }
        v1095 = v155;
        int v1096 = 1;
        LODWORD(v1097) = v273 & (37 * v1217);
        while (1)
        {
          uint64_t v40 = v1206;
          uint64_t v41 = a2 + 8;
          uint64_t v42 = v1210;
          uint64_t v155 = v1095;
          if (v275 == -1) {
            break;
          }
          int v1098 = v1097 + v1096++;
          uint64_t v1097 = v1098 & v273;
          int v275 = *(_DWORD *)(v271 + 32 * v1097);
          if (v1217 == v275)
          {
            uint64_t v274 = (int *)(v271 + 32 * v1097);
            uint64_t v40 = v1206;
            uint64_t v41 = a2 + 8;
            uint64_t v42 = v1210;
            uint64_t v155 = v1095;
            goto LABEL_348;
          }
        }
LABEL_1856:
        uint64_t v274 = (int *)(v271 + 32 * v272);
LABEL_348:
        if ((int *)(v271 + 32 * v272) == v274 || !v274[4]) {
          unsigned int v276 = -1;
        }
        else {
          unsigned int v276 = **((_DWORD **)v274 + 1);
        }
LABEL_957:
        unsigned int __src = v276;
        goto LABEL_958;
      case 7:
        LODWORD(v1214[0]) = 0;
        v1231.n128_u64[0] = 0;
        uint64_t v1227 = 0;
        LODWORD(v1217) = 0;
        LODWORD(v1213) = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, v1214, v1211[0], (llvm::Type ***)&v1231, &v1217)) {
          goto LABEL_532;
        }
        unint64_t v205 = (llvm::Value *)v1231.n128_u64[0];
        if ((*(_DWORD *)(*(void *)v1231.n128_u64[0] + 8) & 0xFE) == 0x12)
        {
          unsigned int v206 = v1217;
          uint64_t v207 = *(void *)(a2 + 544);
          int v208 = *(_DWORD *)(a2 + 560);
          if (v208)
          {
            int v209 = v208 - 1;
            int v210 = *(_DWORD *)(v207 + 32 * ((v208 - 1) & (37 * v1217)));
            if (v1217 != v210)
            {
              int v1089 = 1;
              unsigned int v1090 = v209 & (37 * v1217);
              while (1)
              {
                uint64_t v40 = v1206;
                uint64_t v42 = v1210;
                if (v210 == -1) {
                  break;
                }
                unsigned int v1091 = v1090 + v1089++;
                unsigned int v1090 = v1091 & v209;
                int v210 = *(_DWORD *)(v207 + 32 * v1090);
                if (v1217 == v210)
                {
                  uint64_t v40 = v1206;
                  uint64_t v42 = v1210;
                  break;
                }
              }
            }
          }
          int v550 = (int)v1214[0];
          if (v1244 != LODWORD(v1214[0]))
          {
            v551 = v1243[LODWORD(v1214[0])];
            uint64_t v552 = *(unsigned char *)(a2 + 1640) ? v1211[0] - v551 : v551;
            v553 = sub_1CC1E29E0(a2, v552, *(llvm::Type **)(*(void *)v1231.n128_u64[0] + 24));
            if (v553)
            {
              v554 = (llvm::Value *)v553;
              LODWORD(v1214[0]) = v550 + 1;
              if (!sub_1CC1E1FFC(a2, (uint64_t *)&v1243, v1214, v1211[0], (llvm::Type ***)&v1227, &v1213))
              {
                v555 = (llvm::Value *)v1227;
                v1238[0] = 257;
                v556 = (char *)operator new(0xA0uLL);
                uint64_t v557 = 0;
                uint64_t v155 = (uint64_t ***)(v556 + 96);
                *((_DWORD *)v556 + 29) = *((_DWORD *)v556 + 29) & 0x38000000 | 3;
                do
                {
                  v558 = &v556[v557];
                  *(void *)v558 = 0;
                  *((void *)v558 + 1) = 0;
                  *((void *)v558 + 2) = 0;
                  *((void *)v558 + 3) = v155;
                  v557 += 32;
                }
                while (v557 != 96);
                llvm::InsertElementInst::InsertElementInst((llvm::InsertElementInst *)(v556 + 96), v205, v554, v555, (const char **)&v1234, 0);
                unsigned int __src = v206;
                goto LABEL_1235;
              }
            }
          }
          goto LABEL_1258;
        }
LABEL_481:
        v141 = "Invalid type for value";
        goto LABEL_533;
      case 8:
        LODWORD(v1214[0]) = 0;
        v1231.n128_u64[0] = 0;
        uint64_t v1227 = 0;
        LODWORD(v1217) = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, v1214, v1211[0], (llvm::Type ***)&v1231, &v1217)) {
          goto LABEL_668;
        }
        int v234 = (int)v1214[0];
        if (v1244 == LODWORD(v1214[0])) {
          goto LABEL_668;
        }
        int v235 = (int)v1217;
        unsigned int v236 = (llvm::Value *)v1231.n128_u64[0];
        uint64_t v237 = v1243[LODWORD(v1214[0])];
        uint64_t v238 = *(unsigned char *)(a2 + 1640) ? v1211[0] - v237 : v237;
        unint64_t v239 = sub_1CC1E29E0(a2, v238, *(llvm::Type **)v1231.n128_u64[0]);
        if (!v239) {
          goto LABEL_668;
        }
        v240 = (llvm::Value *)v239;
        LODWORD(v1214[0]) = v234 + 1;
        LODWORD(v1213) = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, v1214, v1211[0], (llvm::Type ***)&v1227, &v1213)) {
          goto LABEL_668;
        }
        if ((*(_DWORD *)(*(void *)v236 + 8) & 0xFE) == 0x12 && (*(_DWORD *)(*(void *)v240 + 8) & 0xFE) == 0x12)
        {
          unint64_t v241 = (char *)operator new(0xA8uLL);
          *((_DWORD *)v241 + 21) = *((_DWORD *)v241 + 21) & 0x38000000 | 2;
          uint64_t v155 = (uint64_t ***)(v241 + 64);
          *(void *)unint64_t v241 = 0;
          *((void *)v241 + 1) = 0;
          *((void *)v241 + 2) = 0;
          *((void *)v241 + 3) = v241 + 64;
          *((void *)v241 + 4) = 0;
          *((void *)v241 + 5) = 0;
          *((void *)v241 + 6) = 0;
          *((void *)v241 + 7) = v241 + 64;
          v1238[0] = 257;
          llvm::ShuffleVectorInst::ShuffleVectorInst((llvm::ShuffleVectorInst *)(v241 + 64), v236, v240, (llvm::Value *)v1227, (const char **)&v1234, 0);
          uint64_t v242 = *(void *)(a2 + 544);
          uint64_t v243 = *(unsigned int *)(a2 + 560);
          if (v243)
          {
            unsigned int v244 = v243 - 1;
            uint64_t v245 = (int *)(v242 + 32 * ((v243 - 1) & (37 * v235)));
            int v246 = *v245;
            if (v235 == *v245)
            {
LABEL_316:
              uint64_t v247 = *((void *)v241 + 8);
              if ((int *)(v242 + 32 * v243) == v245 || !v245[4]) {
                int v248 = -1;
              }
              else {
                int v248 = **((_DWORD **)v245 + 1);
              }
              uint64_t v41 = a2 + 8;
              uint64_t v42 = v1210;
              LODWORD(v1234) = v248;
              unsigned int __src = sub_1CC1E23EC(a2, v247, (char *)&v1234, 1);
LABEL_958:
              unint64_t v182 = *(unsigned int *)(a2 + 752);
              if (v182 >= *(unsigned int *)(a2 + 756)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              goto LABEL_1365;
            }
            int v1122 = 1;
            LODWORD(v1123) = v244 & (37 * v235);
            while (1)
            {
              uint64_t v40 = v1206;
              uint64_t v155 = (uint64_t ***)(v241 + 64);
              if (v246 == -1) {
                break;
              }
              int v1124 = v1123 + v1122++;
              uint64_t v1123 = v1124 & v244;
              int v246 = *(_DWORD *)(v242 + 32 * v1123);
              if (v235 == v246)
              {
                uint64_t v245 = (int *)(v242 + 32 * v1123);
                uint64_t v40 = v1206;
                uint64_t v155 = (uint64_t ***)(v241 + 64);
                goto LABEL_316;
              }
            }
          }
          uint64_t v245 = (int *)(v242 + 32 * v243);
          goto LABEL_316;
        }
        v486 = "Invalid type for value";
        goto LABEL_669;
      case 9:
      case 28:
        LODWORD(v1227) = 0;
        v1231.n128_u64[0] = 0;
        LODWORD(v1214[0]) = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1227, v1211[0], (llvm::Type ***)&v1231, v1214)) {
          goto LABEL_1419;
        }
        int v57 = v1227;
        if (v1244 == v1227) {
          goto LABEL_1419;
        }
        uint64_t v58 = v1231.n128_u64[0];
        uint64_t v59 = v1243[v1227];
        uint64_t v60 = *(unsigned char *)(a2 + 1640) ? v1211[0] - v59 : v59;
        BOOL v61 = sub_1CC1E29E0(a2, v60, *(llvm::Type **)v1231.n128_u64[0]);
        if (!v61) {
          goto LABEL_1419;
        }
        int v62 = v57 + 1;
        if (v1244 <= v57 + 1)
        {
          unint64_t v308 = "Invalid record: operand number exceeded available operands";
        }
        else
        {
          uint64_t v63 = (uint64_t)v61;
          uint64_t v64 = *(void *)v58;
          unsigned int v65 = *(_DWORD *)(*(void *)v58 + 8);
          int v66 = *(_DWORD *)(*(void *)v58 + 8) & 0xFE;
          unsigned int v67 = v65;
          if (v66 == 18) {
            unsigned int v67 = *(unsigned __int8 *)(**(void **)(v64 + 16) + 8);
          }
          int v68 = v1243[v62];
          if (v67 > 6 || v1244 <= v57 + 2)
          {
            unsigned int v69 = 0;
          }
          else
          {
            LODWORD(v1227) = v57 + 2;
            unsigned int v69 = v1243[v57 + 2] & 0x7E | (v1243[v57 + 2] >> 7) & 1 | -(v1243[v57 + 2] & 1);
            int v62 = v57 + 2;
          }
          if (v1244 == v62 + 1)
          {
            if (v66 == 18) {
              unsigned int v65 = *(unsigned __int8 *)(**(void **)(v64 + 16) + 8);
            }
            v626 = (char *)operator new(0x80uLL);
            v627 = v626;
            *((_DWORD *)v626 + 21) = *((_DWORD *)v626 + 21) & 0x38000000 | 2;
            *(void *)v626 = 0;
            *((void *)v626 + 1) = 0;
            *((void *)v626 + 2) = 0;
            *((void *)v626 + 3) = v626 + 64;
            *((void *)v626 + 4) = 0;
            *((void *)v626 + 5) = 0;
            *((void *)v626 + 6) = 0;
            *((void *)v626 + 7) = v626 + 64;
            v628 = (uint64_t ***)(v626 + 64);
            if (v65 > 6)
            {
              v1238[0] = 257;
              uint64_t v709 = *(void *)v58;
              uint64_t v710 = ***(void ***)v58 + 1888;
              if (*(void *)v58 && (*(_DWORD *)(v709 + 8) & 0xFE) == 0x12)
              {
                v1056 = (uint64_t **)(***(void ***)v58 + 1888);
                v1057 = (llvm::Type *)*(unsigned int *)(v709 + 32);
                if (*(_DWORD *)(v709 + 8) == 19) {
                  llvm::ScalableVectorType::get(v1056, v1057);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v1056, v1057);
                }
                uint64_t v710 = v1058;
                uint64_t v40 = v1206;
                uint64_t v155 = v628;
              }
              else
              {
                uint64_t v155 = (uint64_t ***)(v626 + 64);
              }
              llvm::CmpInst::CmpInst((llvm::Value *)v155, v710, 53, (__int16)v68, v58, v63, (const char **)&v1234, 0, 0);
            }
            else
            {
              v1238[0] = 257;
              uint64_t v629 = *(void *)v58;
              uint64_t v630 = ***(void ***)v58 + 1888;
              if (*(void *)v58 && (*(_DWORD *)(v629 + 8) & 0xFE) == 0x12)
              {
                v1053 = (uint64_t **)(***(void ***)v58 + 1888);
                v1054 = (llvm::Type *)*(unsigned int *)(v629 + 32);
                if (*(_DWORD *)(v629 + 8) == 19) {
                  llvm::ScalableVectorType::get(v1053, v1054);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v1053, v1054);
                }
                uint64_t v630 = v1055;
                uint64_t v40 = v1206;
                uint64_t v155 = v628;
              }
              else
              {
                uint64_t v155 = (uint64_t ***)(v626 + 64);
              }
              llvm::CmpInst::CmpInst((llvm::Value *)v155, v630, 54, (__int16)v68, v58, v63, (const char **)&v1234, 0, 0);
            }
            v711 = *v155;
            if (((*v155)[1] & 0xFE) == 0x12) {
              v711 = (uint64_t **)*v711[2];
            }
            unsigned int __src = sub_1CC1E23EC(a2, (uint64_t)v711, 0, 0);
            if ((*(_DWORD *)(*(void *)v58 + 8) & 0xFE) == 0x12) {
              unsigned int __src = sub_1CC1E23EC(a2, (uint64_t)*v155, (char *)&__src, 1);
            }
            uint64_t v41 = a2 + 8;
            if (v69) {
              v627[81] |= 2 * (_BYTE)v69;
            }
            unint64_t v182 = *(unsigned int *)(a2 + 752);
            if (v182 >= *(unsigned int *)(a2 + 756)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v42 = v1210;
            goto LABEL_1365;
          }
LABEL_1419:
          unint64_t v308 = "Invalid record";
        }
        goto LABEL_1420;
      case 10:
        if (v1244)
        {
          LODWORD(v1227) = 0;
          v1231.n128_u64[0] = 0;
          LODWORD(v1214[0]) = 0;
          if (!sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1227, v1211[0], (llvm::Type ***)&v1231, v1214)
            && v1244 == v1227)
          {
            uint64_t v177 = *(llvm::LLVMContext **)(a2 + 424);
            uint64_t v178 = (llvm::Value *)v1231.n128_u64[0];
            BOOL v179 = v1231.n128_u64[0] != 0;
            if (v1231.n128_u64[0]) {
              size_t v180 = 96;
            }
            else {
              size_t v180 = 64;
            }
            unint64_t v181 = (uint64_t ***)operator new(v180);
            uint64_t v155 = &v181[4 * v179];
            *((_DWORD *)v155 + 5) = *((_DWORD *)v155 + 5) & 0x38000000 | v179;
            if (v178)
            {
              do
              {
                *unint64_t v181 = 0;
                v181[1] = 0;
                v181[2] = 0;
                v181[3] = (uint64_t **)v155;
                v181 += 4;
              }
              while (v181 != v155);
            }
            llvm::ReturnInst::ReturnInst((llvm::ReturnInst *)v155, v177, v178, 0);
            goto LABEL_246;
          }
          goto LABEL_532;
        }
        v370 = *(void **)(a2 + 424);
        uint64_t v175 = (char *)operator new(0x40uLL);
        uint64_t v155 = (uint64_t ***)v175;
        *((_DWORD *)v175 + 5) &= 0x38000000u;
        *(void *)uint64_t v175 = *v370 + 1576;
        *((void *)v175 + 1) = 0;
        v175[16] = 29;
        long long v176 = 0uLL;
        *(_OWORD *)(v175 + 44) = 0u;
        *(_OWORD *)(v175 + 33) = 0u;
LABEL_478:
        *(_OWORD *)(v175 + 17) = v176;
        goto LABEL_479;
      case 11:
        if ((v1244 | 2) != 3) {
          goto LABEL_434;
        }
        unint64_t v286 = *(unsigned int *)v1243;
        uint64_t v287 = *(void *)(a2 + 1392);
        unint64_t v288 = (*(void *)(a2 + 1400) - v287) >> 3;
        if (v288 <= v286) {
          goto LABEL_434;
        }
        unint64_t v289 = *(void **)(v287 + 8 * v286);
        if (!v289) {
          goto LABEL_434;
        }
        if (v1244 == 1)
        {
          v290 = (char *)operator new(0x60uLL);
          *((_DWORD *)v290 + 13) = *((_DWORD *)v290 + 13) & 0x38000000 | 1;
          *(void *)v290 = 0;
          *((void *)v290 + 1) = 0;
          *((void *)v290 + 2) = 0;
          *((void *)v290 + 4) = **(void **)*v289 + 1576;
          uint64_t v155 = (uint64_t ***)(v290 + 32);
          *((void *)v290 + 3) = v290 + 32;
          *((void *)v290 + 5) = 0;
          v290[48] = 30;
          v290[49] = 0;
          *((_WORD *)v290 + 25) = 0;
          *((_DWORD *)v290 + 13) = 1;
          *(_OWORD *)(v290 + 56) = 0u;
          *(_OWORD *)(v290 + 72) = 0u;
          *((_DWORD *)v290 + 22) = 0;
          *(void *)v290 = v289;
          uint64_t v293 = v289[1];
          v292 = v289 + 1;
          uint64_t v291 = v293;
          *((void *)v290 + 1) = v293;
          if (v293) {
            *(void *)(v291 + 16) = v290 + 8;
          }
          *((void *)v290 + 2) = v292;
          void *v292 = v290;
LABEL_479:
          unint64_t v371 = *(unsigned int *)(a2 + 752);
          if (v371 >= *(unsigned int *)(a2 + 756)) {
LABEL_549:
          }
            llvm::SmallVectorBase<unsigned int>::grow_pod();
LABEL_480:
          *(void *)(*v1204 + 8 * v371) = v155;
          ++*v1203;
          goto LABEL_1423;
        }
        unint64_t v631 = *((unsigned int *)v1243 + 2);
        if (v288 <= v631) {
          v632 = 0;
        }
        else {
          v632 = *(llvm::BasicBlock **)(v287 + 8 * v631);
        }
        v689 = (llvm::Type *)(**(void **)(a2 + 424) + 1888);
        sub_1CC1E23EC(a2, (uint64_t)v689, 0, 0);
        if (v1244 != 2)
        {
          unsigned int v690 = *((_DWORD *)v1243 + 4);
          uint64_t v691 = *(unsigned char *)(a2 + 1640) ? v1211[0] - v690 : v690;
          v692 = sub_1CC1E29E0(a2, v691, v689);
          if (v632)
          {
            v693 = (llvm::Value *)v692;
            if (v692)
            {
              v694 = (char *)operator new(0xA0uLL);
              uint64_t v695 = 0;
              uint64_t v155 = (uint64_t ***)(v694 + 96);
              *((_DWORD *)v694 + 29) = *((_DWORD *)v694 + 29) & 0x38000000 | 3;
              do
              {
                v696 = &v694[v695];
                *(void *)v696 = 0;
                *((void *)v696 + 1) = 0;
                *((void *)v696 + 2) = 0;
                *((void *)v696 + 3) = v155;
                v695 += 32;
              }
              while (v695 != 96);
              llvm::BranchInst::BranchInst((llvm::BranchInst *)(v694 + 96), (llvm::BasicBlock *)v289, v632, v693, 0);
              unint64_t v371 = *(unsigned int *)(a2 + 752);
              if (v371 >= *(unsigned int *)(a2 + 756)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v41 = a2 + 8;
              goto LABEL_480;
            }
          }
        }
LABEL_1015:
        v1234 = "Invalid record";
        v1238[0] = 259;
        int v409 = (int)v40;
        uint64_t v41 = a2 + 8;
        goto LABEL_1016;
      case 12:
        if ((unint64_t)*v1243 >> 16 == 1205)
        {
          unint64_t v277 = (llvm::Type *)sub_1CC1E22AC(a2, *((_DWORD *)v1243 + 2));
          unsigned int v278 = *((_DWORD *)v277 + 2);
          if (v1244 == 2)
          {
            v279 = 0;
          }
          else
          {
            unsigned int v410 = *((_DWORD *)v1243 + 4);
            if (*(unsigned char *)(a2 + 1640)) {
              uint64_t v411 = v1211[0] - v410;
            }
            else {
              uint64_t v411 = v410;
            }
            v279 = sub_1CC1E29E0(a2, v411, v277);
          }
          unint64_t v412 = *((unsigned int *)v1243 + 6);
          uint64_t v413 = *(void *)(a2 + 1392);
          if (v412 < (*(void *)(a2 + 1400) - v413) >> 3)
          {
            if (v279)
            {
              uint64_t v414 = *(void *)(v413 + 8 * v412);
              if (v414)
              {
                int v415 = *((_DWORD *)v1243 + 8);
                int v416 = (char *)operator new(0x48uLL);
                *((_DWORD *)v416 + 7) = *((_DWORD *)v416 + 7) & 0x38000000 | 0x40000000;
                *(void *)int v416 = 0;
                *((void *)v416 + 1) = **(void **)*v279 + 1576;
                *((void *)v416 + 2) = 0;
                uint64_t v155 = (uint64_t ***)(v416 + 8);
                *((_DWORD *)v416 + 7) = 0x40000000;
                v416[24] = 31;
                v416[25] = 0;
                *((_WORD *)v416 + 13) = 0;
                *((_DWORD *)v416 + 16) = 0;
                *((_OWORD *)v416 + 3) = 0u;
                *((_OWORD *)v416 + 2) = 0u;
                int v1175 = v415;
                llvm::SwitchInst::init((uint64_t)(v416 + 8), (uint64_t)v279, v414, 2 * v415 + 2);
                unint64_t v417 = *(unsigned int *)(a2 + 752);
                if (v417 >= *(unsigned int *)(a2 + 756)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*v1204 + 8 * v417) = v155;
                ++*v1203;
                if (!v415) {
                  goto LABEL_608;
                }
                int v1183 = 0;
                unsigned int v418 = v278 >> 8;
                int v419 = 5;
                while (1)
                {
                  v1234 = (char *)&v1236;
                  uint64_t v1235 = 0x100000000;
                  int v420 = v419 + 1;
                  v421 = v1243;
                  v422 = v1243[v419];
                  if (!v422) {
                    goto LABEL_598;
                  }
                  int v423 = 0;
                  do
                  {
                    v424 = v155;
                    int v425 = v420 + 1;
                    v426 = v1243[v420];
                    LODWORD(v427) = 1;
                    v1231.n128_u32[2] = 1;
                    v1231.n128_u64[0] = 0;
                    if (v418 >= 0x41)
                    {
                      v427 = v1243[v425];
                      int v425 = v420 + 2;
                    }
                    llvm::readWideAPInt((unint64_t *)&v1243[v425], v427, v418, (uint64_t)&v1227);
                    if (v1231.n128_u32[2] >= 0x41 && v1231.n128_u64[0]) {
                      MEMORY[0x1D25D9CB0](v1231.n128_u64[0], 0x1000C8000313F17);
                    }
                    v1231.n128_u64[0] = v1227;
                    v1231.n128_u32[2] = v1228;
                    int v420 = v427 + v425;
                    if (v426)
                    {
                      v429 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a2 + 424), (llvm::LLVMContext *)&v1231, v428);
                      uint64_t v155 = v424;
                      if (v1235 >= (unint64_t)HIDWORD(v1235)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *(void *)&v1234[8 * v1235] = v429;
                      LODWORD(v1235) = v1235 + 1;
                      goto LABEL_592;
                    }
                    if (v418 < 0x41) {
                      LODWORD(v430) = 1;
                    }
                    else {
                      v430 = v1243[v420++];
                    }
                    llvm::readWideAPInt((unint64_t *)&v1243[v420], v430, v418, (uint64_t)&v1227);
                    unint64_t v432 = v1227;
                    v1191 = (llvm::Type *)(v1227 - 8);
                    while (v1231.n128_u32[2] > 0x40)
                    {
                      unint64_t v435 = (((unint64_t)v1231.n128_u32[2] + 63) >> 3) & 0x3FFFFFF8;
                      while (v435)
                      {
                        unint64_t v436 = *(void *)(v1231.n128_u64[0] - 8 + v435);
                        unint64_t v437 = *(void *)((char *)v1191 + v435);
                        v435 -= 8;
                        BOOL v433 = v436 > v437;
                        if (v436 != v437) {
                          goto LABEL_578;
                        }
                      }
LABEL_579:
                      v434 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a2 + 424), (llvm::LLVMContext *)&v1231, v431);
                      if (v1235 >= (unint64_t)HIDWORD(v1235)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *(void *)&v1234[8 * v1235] = v434;
                      LODWORD(v1235) = v1235 + 1;
                      llvm::APInt::operator++((uint64_t)&v1231);
                    }
                    BOOL v433 = v1231.n128_u64[0] > v432;
LABEL_578:
                    if (!v433) {
                      goto LABEL_579;
                    }
                    if (v1228 >= 0x41 && v432 != 0) {
                      MEMORY[0x1D25D9CB0](v432, 0x1000C8000313F17);
                    }
                    v420 += (int)v430;
                    uint64_t v155 = v424;
LABEL_592:
                    if (v1231.n128_u32[2] >= 0x41 && v1231.n128_u64[0]) {
                      MEMORY[0x1D25D9CB0](v1231.n128_u64[0], 0x1000C8000313F17);
                    }
                    ++v423;
                  }
                  while (v423 != v422);
                  v421 = v1243;
                  uint64_t v42 = v1210;
LABEL_598:
                  unint64_t v439 = LODWORD(v421[v420]);
                  uint64_t v440 = *(void *)(a2 + 1392);
                  uint64_t v40 = v1206;
                  if (v439 >= (*(void *)(a2 + 1400) - v440) >> 3) {
                    v441 = 0;
                  }
                  else {
                    v441 = *(llvm::BasicBlock **)(v440 + 8 * v439);
                  }
                  v442 = v1234;
                  if (v1235)
                  {
                    uint64_t v443 = 8 * v1235;
                    do
                    {
                      v444 = *(llvm::ConstantInt **)v442;
                      v442 += 8;
                      llvm::SwitchInst::addCase(v155, v444, v441);
                      v443 -= 8;
                    }
                    while (v443);
                    v442 = v1234;
                  }
                  if (v442 != (char *)&v1236) {
                    free(v442);
                  }
                  int v419 = v420 + 1;
                  if (++v1183 == v1175)
                  {
LABEL_608:
                    uint64_t v41 = a2 + 8;
                    goto LABEL_1423;
                  }
                }
              }
            }
          }
LABEL_609:
          v1234 = "Invalid record";
          v1238[0] = 259;
          int v445 = (int)v40;
          uint64_t v41 = a2 + 8;
          goto LABEL_1427;
        }
        if (v1244 < 3 || (v1244 & 1) == 0)
        {
          v1234 = "Invalid record";
          v1238[0] = 259;
          int v409 = (int)v40;
LABEL_1016:
          sub_1CC1DDE58(v409, v41, (llvm::Twine *)&v1234);
        }
        v358 = (llvm::Type *)sub_1CC1E22AC(a2, *v1243);
        if (v1244 == 1)
        {
          unint64_t v359 = 0;
        }
        else
        {
          unsigned int v611 = *((_DWORD *)v1243 + 2);
          if (*(unsigned char *)(a2 + 1640)) {
            uint64_t v612 = v1211[0] - v611;
          }
          else {
            uint64_t v612 = v611;
          }
          unint64_t v359 = sub_1CC1E29E0(a2, v612, v358);
        }
        unint64_t v613 = *((unsigned int *)v1243 + 4);
        uint64_t v614 = *(void *)(a2 + 1392);
        if (v613 >= (*(void *)(a2 + 1400) - v614) >> 3) {
          goto LABEL_980;
        }
        if (!v358) {
          goto LABEL_980;
        }
        if (!v359) {
          goto LABEL_980;
        }
        uint64_t v615 = *(void *)(v614 + 8 * v613);
        if (!v615) {
          goto LABEL_980;
        }
        unint64_t v616 = v1244 + 0x1FFFFFFFDLL;
        v617 = (char *)operator new(0x48uLL);
        *((_DWORD *)v617 + 7) = *((_DWORD *)v617 + 7) & 0x38000000 | 0x40000000;
        *(void *)v617 = 0;
        *((void *)v617 + 1) = **(void **)*v359 + 1576;
        uint64_t v155 = (uint64_t ***)(v617 + 8);
        *((void *)v617 + 2) = 0;
        v617[24] = 31;
        v617[25] = 0;
        *((_WORD *)v617 + 13) = 0;
        *((_DWORD *)v617 + 7) = 0x40000000;
        *((_DWORD *)v617 + 16) = 0;
        *((_OWORD *)v617 + 2) = 0u;
        *((_OWORD *)v617 + 3) = 0u;
        v1194 = (llvm::Type *)v617;
        llvm::SwitchInst::init((uint64_t)(v617 + 8), (uint64_t)v359, v615, 2 * (v616 >> 1) + 2);
        unint64_t v618 = *(unsigned int *)(a2 + 752);
        if (v618 >= *(unsigned int *)(a2 + 756)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*v1204 + 8 * v618) = v155;
        ++*v1203;
        uint64_t v41 = a2 + 8;
        uint64_t v42 = v1210;
        if (!(v616 >> 1)) {
          goto LABEL_1423;
        }
        uint64_t v619 = 0;
        uint64_t v620 = v616 & 0x1FFFFFFFELL;
        while (1)
        {
          v621 = sub_1CC1E29E0(a2, (uint64_t)v1243[(v619 + 3)], v358);
          if (v621) {
            v622 = *((unsigned char *)v621 + 16) == 16 ? (llvm::ConstantInt *)v621 : 0;
          }
          else {
            v622 = 0;
          }
          unint64_t v623 = LODWORD(v1243[(v619 + 4)]);
          uint64_t v624 = *(void *)(a2 + 1392);
          if (v623 >= (*(void *)(a2 + 1400) - v624) >> 3) {
            break;
          }
          if (!v622) {
            break;
          }
          v625 = *(llvm::BasicBlock **)(v624 + 8 * v623);
          if (!v625) {
            break;
          }
          llvm::SwitchInst::addCase(v155, v622, v625);
          v619 += 2;
          if (v620 == v619) {
            goto LABEL_1423;
          }
        }
        v768 = v1194;
        if ((*((unsigned char *)v1194 + 31) & 8) != 0)
        {
          v1062 = llvm::UndefValue::get((llvm::UndefValue *)*v155, v622);
          llvm::ValueAsMetadata::handleRAUW((uint64_t *)v155, v1062, v1063);
        }
        v769 = (unsigned __int8 *)*((void *)v1194 + 7);
        if (!v769) {
          goto LABEL_1144;
        }
        int v986 = *v769;
        if ((v986 - 4) > 0x1E)
        {
          if ((v986 - 3) >= 0xFFFFFFFE) {
            uint64_t v1042 = *((void *)v1194 + 7);
          }
          else {
            uint64_t v1042 = 0;
          }
          if ((v986 - 3) < 0xFFFFFFFE)
          {
            LODWORD(v40) = v1206;
            uint64_t v41 = a2 + 8;
            v768 = v1194;
            if (v986 == 3) {
              *((void *)v769 + 1) = 0;
            }
            goto LABEL_1144;
          }
          unint64_t v988 = v1042 + 8;
        }
        else
        {
          LODWORD(v40) = v1206;
          uint64_t v41 = a2 + 8;
          v768 = v1194;
          if ((v769[1] & 0x7F) != 2 && !*((_DWORD *)v769 + 3)) {
            goto LABEL_1144;
          }
          uint64_t v987 = *((void *)v769 + 2);
          if ((v987 & 4) == 0) {
            goto LABEL_1144;
          }
          unint64_t v988 = v987 & 0xFFFFFFFFFFFFFFF8;
          if (!v988) {
            goto LABEL_1144;
          }
        }
        v1234 = (char *)v1194 + 56;
        sub_1CC5FA668(v988 + 16, &v1234);
        LODWORD(v40) = v1206;
        uint64_t v41 = a2 + 8;
        v768 = v1194;
LABEL_1144:
        llvm::Value::~Value((llvm::Value *)v155, v622);
        int v770 = *((_DWORD *)v768 + 7);
        uint64_t v771 = v770 & 0x7FFFFFF;
        if ((v770 & 0x40000000) != 0)
        {
          v1002 = *(char **)v768;
          if (v771)
          {
            uint64_t v1003 = 32 * v771;
            do
            {
              v1004 = &v1002[v1003];
              if (*(void *)&v1002[v1003 - 32])
              {
                **((void **)v1004 - 2) = *((void *)v1004 - 3);
                uint64_t v1005 = *((void *)v1004 - 3);
                if (v1005) {
                  *(void *)(v1005 + 16) = *((void *)v1004 - 2);
                }
              }
              v1003 -= 32;
            }
            while (v1003);
          }
          operator delete(v1002);
          LODWORD(v40) = v1206;
          uint64_t v41 = a2 + 8;
          v776 = v1194;
        }
        else
        {
          uint64_t v772 = v771;
          if (v771)
          {
            v773 = (void **)((char *)v768 - 8);
            uint64_t v774 = -32 * v772;
            do
            {
              if (*(v773 - 2))
              {
                void **v773 = *(v773 - 1);
                uint64_t v775 = (uint64_t)*(v773 - 1);
                if (v775) {
                  *(void *)(v775 + 16) = *v773;
                }
              }
              v773 -= 4;
              v774 += 32;
            }
            while (v774);
          }
          v776 = (llvm::Type *)&v155[-4 * v772];
          if (v770 < 0) {
            v776 = (llvm::Type *)((char *)v776 - *((void *)v776 - 1) - 8);
          }
        }
        operator delete(v776);
        goto LABEL_434;
      case 13:
        if (v1244 <= 3) {
          goto LABEL_434;
        }
        unint64_t v280 = (*(_DWORD *)v1243 - 1);
        uint64_t v281 = *(void *)(a2 + 1344);
        if (v280 >= (*(void *)(a2 + 1352) - v281) >> 3) {
          v282 = 0;
        }
        else {
          v282 = *(llvm::Value **)(v281 + 8 * v280);
        }
        unint64_t v446 = *((unsigned int *)v1243 + 4);
        uint64_t v447 = *(void *)(a2 + 1392);
        unint64_t v448 = (*(void *)(a2 + 1400) - v447) >> 3;
        if (v448 <= v446) {
          uint64_t v449 = 0;
        }
        else {
          uint64_t v449 = *(void *)(v447 + 8 * v446);
        }
        v450 = v1243[1];
        LODWORD(v1213) = 4;
        unint64_t v451 = *((unsigned int *)v1243 + 6);
        if (v448 <= v451) {
          v1192 = 0;
        }
        else {
          v1192 = *(llvm::Type **)(v447 + 8 * v451);
        }
        if (((unsigned __int16)v450 & 0x2000) != 0)
        {
          LODWORD(v1213) = 5;
          unsigned int v453 = *((_DWORD *)v1243 + 8);
          uint64_t v454 = sub_1CC1E22AC(a2, v453);
          if (!v454 || (uint64_t v452 = v454, *(unsigned char *)(v454 + 8) != 14))
          {
            v455 = "Explicit invoke type is not a function type";
            goto LABEL_1199;
          }
        }
        else
        {
          uint64_t v452 = 0;
          unsigned int v453 = -1;
        }
        v1214[0] = 0;
        int v1218 = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1213, v1211[0], v1214, &v1218))
        {
          v455 = "Invalid record";
LABEL_1199:
          v1234 = (char *)v455;
          v1238[0] = 259;
          LODWORD(v40) = v1206;
          goto LABEL_1200;
        }
        v498 = v1214[0];
        uint64_t v499 = (uint64_t)*v1214[0];
        if (!*v1214[0] || *(unsigned char *)(v499 + 8) != 15)
        {
          v455 = "Callee is not a pointer";
          goto LABEL_1199;
        }
        if (v452)
        {
          uint64_t v500 = *(void *)(v499 + 24);
          if (v500 && v500 != v452)
          {
            v455 = "Explicit invoke type does not match pointee type of callee operand";
            goto LABEL_1199;
          }
        }
        else
        {
          uint64_t v741 = *(void *)(a2 + 544);
          uint64_t v742 = *(unsigned int *)(a2 + 560);
          if (v742)
          {
            unsigned int v743 = v742 - 1;
            v744 = (int *)(v741 + 32 * ((v742 - 1) & (37 * v1218)));
            int v745 = *v744;
            if (v1218 != *v744)
            {
              uint64_t v1112 = v449;
              __int16 v1113 = (__int16)v450;
              v1114 = v282;
              int v1115 = 1;
              LODWORD(v1116) = v743 & (37 * v1218);
              do
              {
                uint64_t v41 = a2 + 8;
                v282 = v1114;
                LOWORD(v450) = v1113;
                uint64_t v449 = v1112;
                v498 = v1214[0];
                if (v745 == -1) {
                  goto LABEL_1891;
                }
                int v1117 = v1116 + v1115++;
                uint64_t v1116 = v1117 & v743;
                int v745 = *(_DWORD *)(v741 + 32 * v1116);
              }
              while (v1218 != v745);
              v744 = (int *)(v741 + 32 * v1116);
              uint64_t v41 = a2 + 8;
              v282 = v1114;
              LOWORD(v450) = v1113;
              uint64_t v449 = v1112;
              v498 = v1214[0];
            }
          }
          else
          {
LABEL_1891:
            v744 = (int *)(v741 + 32 * v742);
          }
          if ((int *)(v741 + 32 * v742) == v744 || !v744[4]) {
            unsigned int v453 = -1;
          }
          else {
            unsigned int v453 = **((_DWORD **)v744 + 1);
          }
          uint64_t v785 = sub_1CC1E22AC(a2, v453);
          if (!v785 || (uint64_t v452 = v785, *(unsigned char *)(v785 + 8) != 14))
          {
            v455 = "Callee is not of pointer to function type";
            goto LABEL_1199;
          }
        }
        int v786 = v1244;
        uint64_t v787 = (*(_DWORD *)(v452 + 12) - 1);
        int v788 = (int)v1213;
        if (v1244 < (int)v787 + (int)v1213) {
          goto LABEL_1265;
        }
        v1170 = v282;
        __int16 v1177 = (__int16)v450;
        v1234 = (char *)&v1236;
        uint64_t v1235 = 0x1000000000;
        v1231.n128_u64[0] = (unint64_t)v1232;
        v1231.n128_u64[1] = 0x1000000000;
        uint64_t v1185 = v787;
        uint64_t v1165 = (uint64_t)v498;
        uint64_t v1167 = v449;
        if (!v787) {
          goto LABEL_1390;
        }
        unint64_t v789 = 0;
        unint64_t v790 = 0;
        int v791 = 37 * v453;
        uint64_t v792 = v787;
        while (1)
        {
          uint64_t v793 = *(void *)(a2 + 544);
          uint64_t v794 = *(unsigned int *)(a2 + 560);
          if (v794)
          {
            unsigned int v795 = v794 - 1;
            v796 = (int *)(v793 + 32 * ((v794 - 1) & v791));
            int v797 = *v796;
            if (v453 == *v796) {
              goto LABEL_1176;
            }
            int v803 = 1;
            LODWORD(v804) = v795 & v791;
            while (1)
            {
              uint64_t v792 = v1185;
              int v791 = 37 * v453;
              if (v797 == -1) {
                break;
              }
              int v805 = v804 + v803++;
              uint64_t v804 = v805 & v795;
              int v797 = *(_DWORD *)(v793 + 32 * v804);
              if (v453 == v797)
              {
                v796 = (int *)(v793 + 32 * v804);
                uint64_t v792 = v1185;
                int v791 = 37 * v453;
                goto LABEL_1176;
              }
            }
          }
          v796 = (int *)(v793 + 32 * v794);
LABEL_1176:
          ++v790;
          if ((int *)(v793 + 32 * v794) == v796 || v790 >= v796[4]) {
            int v798 = -1;
          }
          else {
            int v798 = *(_DWORD *)(*((void *)v796 + 1) + 4 * v790);
          }
          if (v1244 == v788)
          {
            v799 = 0;
          }
          else
          {
            v800 = v1243[v788];
            if (*(unsigned char *)(a2 + 1640)) {
              uint64_t v801 = v1211[0] - v800;
            }
            else {
              uint64_t v801 = v800;
            }
            v802 = sub_1CC1E29E0(a2, v801, *(llvm::Type **)(*(void *)(v452 + 16) + 8 * v790));
            int v791 = 37 * v453;
            v799 = v802;
            unint64_t v789 = v1235;
          }
          if (v789 >= HIDWORD(v1235)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)&v1234[8 * v789] = v799;
          LODWORD(v1235) = v1235 + 1;
          if (v1231.n128_u32[2] >= (unint64_t)v1231.n128_u32[3]) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(v1231.n128_u64[0] + 4 * v1231.n128_u32[2]++) = v798;
          unint64_t v789 = v1235;
          if (!*(void *)&v1234[8 * v1235 - 8])
          {
            LODWORD(v1213) = v788;
            goto LABEL_1400;
          }
          ++v788;
          if (v790 == v792)
          {
            int v786 = v1244;
LABEL_1390:
            LODWORD(v1213) = v788;
            if (*(_DWORD *)(v452 + 8) < 0x100u)
            {
              if (v786 != v788) {
                goto LABEL_1400;
              }
            }
            else if (v786 != v788)
            {
              while (1)
              {
                v1217 = 0;
                int v1216 = 0;
                if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1213, v1211[0], &v1217, &v1216)) {
                  break;
                }
                if (v1235 >= (unint64_t)HIDWORD(v1235)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)&v1234[8 * v1235] = v1217;
                LODWORD(v1235) = v1235 + 1;
                if (v1231.n128_u32[2] >= (unint64_t)v1231.n128_u32[3]) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(_DWORD *)(v1231.n128_u64[0] + 4 * v1231.n128_u32[2]++) = v1216;
                if (v1244 == v1213) {
                  goto LABEL_1620;
                }
              }
LABEL_1400:
              uint64_t v1227 = (uint64_t)"Invalid record";
              __int16 v1230 = 259;
              sub_1CC1DDE58((int)v1206, v1209, (llvm::Twine *)&v1227);
            }
LABEL_1620:
            uint64_t v991 = v1222;
            uint64_t v992 = v1222;
            if (v1222 != v1223)
            {
              llvm::UpgradeOperandBundles(&v1222);
              uint64_t v992 = v1222;
              uint64_t v991 = v1223;
            }
            __int16 v1230 = 257;
            uint64_t v155 = (uint64_t ***)sub_1CD4EF89C(v452, v1165, v1167, (uint64_t)v1192, (uint64_t *)v1234, v1235, v992, 0xAAAAAAAAAAAAAAABLL * ((v991 - v992) >> 4), (const char **)&v1227, 0);
            uint64_t v993 = *(void *)(a2 + 544);
            uint64_t v994 = *(unsigned int *)(a2 + 560);
            if (v994)
            {
              unsigned int v995 = v994 - 1;
              v996 = (int *)(v993 + 32 * ((v994 - 1) & (37 * v453)));
              int v997 = *v996;
              if (v453 == *v996)
              {
LABEL_1624:
                if ((int *)(v993 + 32 * v994) == v996 || !v996[4]) {
                  unsigned int v998 = -1;
                }
                else {
                  unsigned int v998 = **((_DWORD **)v996 + 1);
                }
                unsigned int __src = v998;
                uint64_t v1013 = v1222;
                for (uint64_t i = v1223; i != v1013; uint64_t i = sub_1CD4AF9B4(i - 48))
                  ;
                uint64_t v1223 = v1013;
                unint64_t v1014 = *(unsigned int *)(a2 + 752);
                if (v1014 >= *(unsigned int *)(a2 + 756)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)(a2 + 744) + 8 * v1014) = v155;
                ++*(_DWORD *)(a2 + 752);
                *((_WORD *)v155 + 9) = *((_WORD *)v155 + 9) & 0xF003 | (4 * (v1177 & 0x3FF));
                v155[8] = (uint64_t **)v1170;
                sub_1CC1E2A50(v1206, a2, (uint64_t)v155, v1231.n128_i64[0]);
                if (*v1206)
                {
                  llvm::Value::deleteValue((void (**)(void))v155, (llvm::Value *)v43);
                  int v45 = 1;
                }
                else
                {
                  int v45 = 9;
                }
                uint64_t v40 = v1206;
                uint64_t v41 = a2 + 8;
                v883 = (void *)v1231.n128_u64[0];
                uint64_t v42 = v1210;
                if ((void *)v1231.n128_u64[0] != v1232) {
                  goto LABEL_1402;
                }
                goto LABEL_1073;
              }
              int v1143 = 1;
              LODWORD(v1144) = v995 & (37 * v453);
              while (v997 != -1)
              {
                int v1145 = v1144 + v1143++;
                uint64_t v1144 = v1145 & v995;
                int v997 = *(_DWORD *)(v993 + 32 * v1144);
                if (v453 == v997)
                {
                  v996 = (int *)(v993 + 32 * v1144);
                  goto LABEL_1624;
                }
              }
            }
            v996 = (int *)(v993 + 32 * v994);
            goto LABEL_1624;
          }
        }
      case 15:
        uint64_t v175 = (char *)operator new(0x40uLL);
        uint64_t v155 = (uint64_t ***)v175;
        *((_DWORD *)v175 + 5) &= 0x38000000u;
        *(void *)uint64_t v175 = **(void **)(a2 + 424) + 1576;
        *((void *)v175 + 1) = 0;
        v175[16] = 35;
        long long v176 = 0uLL;
        *(_OWORD *)(v175 + 33) = 0u;
        *(_OWORD *)(v175 + 44) = 0u;
        goto LABEL_478;
      case 16:
        if (!v1244 || (v1181 = *(_DWORD *)v1243, (uint64_t v151 = sub_1CC1E22AC(a2, *(_DWORD *)v1243)) == 0))
        {
          uint64_t v94 = "Invalid phi record";
          goto LABEL_1426;
        }
        unint64_t v152 = v1244 - 1;
        v1238[0] = 257;
        unint64_t v153 = (llvm::Type *)v151;
        uint64_t v154 = (char *)operator new(0x48uLL);
        v1174 = v153;
        *((void *)v154 + 1) = v153;
        uint64_t v155 = (uint64_t ***)(v154 + 8);
        *(void *)uint64_t v154 = 0;
        *((void *)v154 + 2) = 0;
        *((void *)v154 + 3) = 0x4000000000000053;
        *((_OWORD *)v154 + 2) = 0u;
        *((_OWORD *)v154 + 3) = 0u;
        *((_DWORD *)v154 + 16) = 0;
        *((_DWORD *)v154 + 17) = v152 >> 1;
        v1189 = (llvm::Type *)(v152 >> 1);
        llvm::Value::setNameImpl((llvm::Value *)(v154 + 8), (const char **)&v1234);
        if (v154[24]) {
          goto LABEL_211;
        }
        if ((v154[31] & 0x10) == 0) {
          goto LABEL_1705;
        }
        uint64_t v933 = ***v155;
        uint64_t v934 = *(void *)(v933 + 152);
        uint64_t v935 = *(unsigned int *)(v933 + 168);
        if (!v935) {
          goto LABEL_1697;
        }
        LODWORD(v936) = (v935 - 1) & ((v155 >> 4) ^ (v155 >> 9));
        v937 = (uint64_t ****)(v934 + 16 * v936);
        v938 = *v937;
        if (*v937 != v155)
        {
          int v939 = 1;
          while (v938 != (uint64_t ***)-4096)
          {
            int v940 = v936 + v939++;
            uint64_t v936 = v940 & (v935 - 1);
            v938 = *(uint64_t ****)(v934 + 16 * v936);
            if (v938 == v155)
            {
              v937 = (uint64_t ****)(v934 + 16 * v936);
              goto LABEL_1698;
            }
          }
LABEL_1697:
          v937 = (uint64_t ****)(v934 + 16 * v935);
        }
LABEL_1698:
        v1033 = v937[1];
        unint64_t v1036 = (unint64_t)*v1033;
        v1034 = v1033 + 2;
        unint64_t v1035 = v1036;
        if (v1036 >= 5
          && (*(_DWORD *)v1034 == *(_DWORD *)"llvm." ? (BOOL v1037 = v1034[4] == aLlvm_1[4]) : (BOOL v1037 = 0), v1037))
        {
          *((_DWORD *)v154 + 10) |= 0x2000u;
          int v1038 = llvm::Function::lookupIntrinsicID(v1034, v1035);
        }
        else
        {
LABEL_1705:
          int v1038 = 0;
          *((_DWORD *)v154 + 10) &= ~0x2000u;
        }
        *((_DWORD *)v154 + 11) = v1038;
        uint64_t v40 = v1206;
        uint64_t v41 = a2 + 8;
LABEL_211:
        uint64_t v156 = *((unsigned int *)v154 + 17);
        uint64_t v157 = operator new(40 * v156);
        *(void *)uint64_t v154 = v157;
        if (v156)
        {
          int64_t v158 = &v157[4 * v156];
          do
          {
            void *v157 = 0;
            v157[1] = 0;
            v157[2] = 0;
            v157[3] = v155;
            v157 += 4;
          }
          while (v157 != v158);
        }
        if ((v1244 & 1) == 0 && !sub_1CB845E74((uint64_t)v155))
        {
          llvm::Value::deleteValue((void (**)(void))v155, (llvm::Value *)v43);
          v1234 = "Invalid phi record";
          v1238[0] = 259;
          sub_1CC1DDE58((int)v40, v41, (llvm::Twine *)&v1234);
        }
        unint64_t v159 = *(unsigned int *)(a2 + 752);
        if (v159 >= *(unsigned int *)(a2 + 756)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*v1204 + 8 * v159) = v155;
        ++*v1203;
        BOOL v160 = v152 >= 2;
        unsigned int v161 = v1211[0];
        if (!v160)
        {
LABEL_218:
          unsigned int __src = v1181;
          if ((v1244 & 1) == 0)
          {
            unsigned int v162 = v1243[v1244 - 1];
            int v163 = v162 & 0x7E | (v162 >> 7) & 1 | -(v162 & 1);
            if (v163) {
              v154[25] |= 2 * (_BYTE)v163;
            }
            uint64_t v42 = v1210;
            goto LABEL_1423;
          }
LABEL_337:
          uint64_t v42 = v1210;
          goto LABEL_1423;
        }
        LODWORD(v559) = 0;
        while (1)
        {
          int v560 = (2 * v559) | 1;
          if (*(unsigned char *)(a2 + 1640))
          {
            if (v1244 != v560)
            {
              unint64_t v561 = (unint64_t)v1243[v560];
              LODWORD(v562) = 0;
              if (v561 != 1) {
                uint64_t v562 = -(uint64_t)(v561 >> 1);
              }
              if (v561) {
                LODWORD(v563) = v562;
              }
              else {
                unint64_t v563 = v561 >> 1;
              }
              uint64_t v564 = v161 - v563;
              goto LABEL_800;
            }
          }
          else if (v1244 != v560)
          {
            uint64_t v564 = (uint64_t)v1243[v560];
LABEL_800:
            v565 = sub_1CC1E29E0(a2, v564, v1174);
            goto LABEL_801;
          }
          v565 = 0;
LABEL_801:
          unint64_t v566 = LODWORD(v1243[2 * (int)v559 + 2]);
          uint64_t v567 = *(void *)(a2 + 1392);
          if (v566 >= (*(void *)(a2 + 1400) - v567) >> 3 || !v565 || (v568 = *(uint64_t ***)(v567 + 8 * v566)) == 0)
          {
            llvm::Value::deleteValue((void (**)(void))v155, (llvm::Value *)v43);
            v1234 = "Invalid phi record";
            v1238[0] = 259;
            int v639 = (int)v1206;
            goto LABEL_982;
          }
          int v569 = *((_DWORD *)v154 + 7);
          uint64_t v570 = v569 & 0x7FFFFFF;
          if ((v569 & 0x7FFFFFF) == *((_DWORD *)v154 + 17))
          {
            unsigned int v582 = v570 + (v570 >> 1);
            if (v582 <= 2) {
              uint64_t v583 = 2;
            }
            else {
              uint64_t v583 = v582;
            }
            *((_DWORD *)v154 + 17) = v583;
            if ((v569 & 0x40000000) != 0) {
              v584 = *(uint64_t **)v154;
            }
            else {
              v584 = (uint64_t *)&v155[-4 * v570];
            }
            v585 = operator new(40 * v583);
            *(void *)uint64_t v154 = v585;
            v586 = v585;
            do
            {
              void *v586 = 0;
              v586[1] = 0;
              v586[2] = 0;
              v586[3] = v155;
              v586 += 4;
            }
            while (v586 != &v585[4 * v583]);
            int v587 = *((_DWORD *)v154 + 7);
            if ((v587 & 0x40000000) != 0) {
              uint64_t v588 = (uint64_t)v585;
            }
            else {
              uint64_t v588 = (uint64_t)&v155[-4 * (v587 & 0x7FFFFFF)];
            }
            sub_1CC5E4108((uint64_t)&v1234, v584, &v584[4 * v570], v588);
            if (v570)
            {
              memmove((void *)(v588 + 32 * v583), &v584[4 * v570], 8 * v570);
              uint64_t v589 = 4 * v570;
              do
              {
                v590 = &v584[v589];
                if (v584[v589 - 4])
                {
                  *(void *)*(v590 - 2) = *(v590 - 3);
                  uint64_t v591 = *(v590 - 3);
                  if (v591) {
                    *(void *)(v591 + 16) = *(v590 - 2);
                  }
                }
                v589 -= 4;
              }
              while (v589 * 8);
            }
            operator delete(v584);
            int v569 = *((_DWORD *)v154 + 7);
            uint64_t v41 = a2 + 8;
            unsigned int v161 = v1211[0];
          }
          uint64_t v571 = (v569 + 1) & 0x7FFFFFF;
          *((_DWORD *)v154 + 7) = v569 & 0xF8000000 | (v569 + 1) & 0x7FFFFFF;
          if ((v569 & 0x40000000) != 0) {
            v572 = *(uint64_t ****)v154;
          }
          else {
            v572 = &v155[-4 * v571];
          }
          uint64_t v573 = (v571 - 1);
          v574 = (llvm::Type ***)&v572[4 * v573];
          if (*v574)
          {
            *v574[2] = (llvm::Type *)v574[1];
            v581 = v574[1];
            if (v581) {
              v581[2] = (llvm::Type *)v574[2];
            }
          }
          *v574 = v565;
          v577 = v565[1];
          v576 = (llvm::Type ****)(v565 + 1);
          v575 = v577;
          v574[1] = (llvm::Type **)v577;
          if (v577) {
            *((void *)v575 + 2) = v574 + 1;
          }
          v572[4 * v573 + 2] = (uint64_t **)v576;
          *v576 = v574;
          int v578 = *((_DWORD *)v154 + 7);
          uint64_t v579 = v578 & 0x7FFFFFF;
          if ((v578 & 0x40000000) != 0) {
            v580 = *(uint64_t ****)v154;
          }
          else {
            v580 = &v155[-4 * v579];
          }
          (&v580[4 * *((unsigned int *)v154 + 17)])[(v579 - 1)] = v568;
          v559 = (llvm::Type *)(v559 + 1);
          uint64_t v40 = v1206;
          if (v1189 == v559) {
            goto LABEL_218;
          }
        }
      case 19:
        if ((v1244 & 0xFFFFFFFE) != 4) {
          goto LABEL_434;
        }
        unint64_t v197 = (unint64_t)v1243[3];
        LODWORD(v1227) = *(_DWORD *)v1243;
        uint64_t v198 = sub_1CC1E22AC(a2, v1227);
        if ((v197 & 0x40) != 0)
        {
          v408 = (unsigned __int8 *)v198;
          goto LABEL_773;
        }
        uint64_t v199 = *(void *)(a2 + 544);
        uint64_t v200 = *(unsigned int *)(a2 + 560);
        if (!v200) {
          goto LABEL_1841;
        }
        unsigned int v201 = v200 - 1;
        uint64_t v202 = (int *)(v199 + 32 * ((v200 - 1) & (37 * v1227)));
        int v203 = *v202;
        if (v1227 != *v202)
        {
          int v1086 = 1;
          LODWORD(v1087) = v201 & (37 * v1227);
          while (1)
          {
            uint64_t v40 = v1206;
            uint64_t v41 = a2 + 8;
            if (v203 == -1) {
              break;
            }
            int v1088 = v1087 + v1086++;
            uint64_t v1087 = v1088 & v201;
            int v203 = *(_DWORD *)(v199 + 32 * v1087);
            if (v1227 == v203)
            {
              uint64_t v202 = (int *)(v199 + 32 * v1087);
              uint64_t v40 = v1206;
              uint64_t v41 = a2 + 8;
              goto LABEL_268;
            }
          }
LABEL_1841:
          uint64_t v202 = (int *)(v199 + 32 * v200);
        }
LABEL_268:
        if ((int *)(v199 + 32 * v200) == v202 || !v202[4]) {
          unsigned int v204 = -1;
        }
        else {
          unsigned int v204 = **((_DWORD **)v202 + 1);
        }
        LODWORD(v1227) = v204;
        v408 = (unsigned __int8 *)sub_1CC1E22AC(a2, v204);
        if (v408)
        {
LABEL_773:
          v546 = (llvm::Type *)sub_1CC1E22AC(a2, *((_DWORD *)v1243 + 2));
          v547 = sub_1CC1E29E0(a2, *((unsigned int *)v1243 + 4), v546);
          unint64_t v548 = v197 & 0x1F | (32 * ((v197 >> 8) & 7));
          if (v548 > 0x21)
          {
            v1234 = "Invalid alignment value";
            v1238[0] = 259;
            sub_1CC1DDE58((int)v40, v1209, (llvm::Twine *)&v1234);
          }
          if (v548) {
            unsigned int v549 = (v548 - 1) | 0x100;
          }
          else {
            unsigned int v549 = 0;
          }
          *uint64_t v40 = 0;
          if (v408 && v547)
          {
            uint64_t v655 = *(void *)(a2 + 432);
            if (v1244 == 5) {
              v656 = (llvm::Type *)v1243[4];
            }
            else {
              v656 = (llvm::Type *)*(unsigned int *)(v655 + 276);
            }
            v1195 = v656;
            v1234 = (char *)v1238;
            uint64_t v1235 = (uint64_t)v1238;
            uint64_t v1236 = 4;
            int v1237 = 0;
            if (v549 >> 8) {
              goto LABEL_972;
            }
            unsigned int v658 = v408[8];
            if (v658 <= 0x11)
            {
              if (((1 << v658) & 0xAC7F) != 0)
              {
LABEL_971:
                LOBYTE(v549) = llvm::DataLayout::getAlignment((llvm::DataLayout *)(v655 + 272), (llvm::Type *)v408, 0);
LABEL_972:
                v659 = (char *)operator new(0x68uLL);
                *((_DWORD *)v659 + 13) = *((_DWORD *)v659 + 13) & 0x38000000 | 1;
                uint64_t v155 = (uint64_t ***)(v659 + 32);
                *(void *)v659 = 0;
                *((void *)v659 + 1) = 0;
                *((void *)v659 + 2) = 0;
                *((void *)v659 + 3) = v659 + 32;
                __int16 v1233 = 257;
                llvm::AllocaInst::AllocaInst((unint64_t *)v659 + 4, (llvm::PointerType *)v408, v1195, v547, v549, (const char **)&v1231, 0);
                *((_WORD *)v659 + 25) = v197 & 0x80 | (((v197 >> 5) & 1) << 6) | *((_WORD *)v659 + 25) & 0xFF3F;
                unsigned int __src = sub_1CC1E23EC(a2, *((void *)v659 + 4), (char *)&v1227, 1);
                unint64_t v660 = *(unsigned int *)(a2 + 752);
                if (v660 >= *(unsigned int *)(a2 + 756)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v41 = a2 + 8;
                uint64_t v42 = v1210;
LABEL_1140:
                *(void *)(*v1204 + 8 * v660) = v155;
                ++*v1203;
                int v45 = 9;
                v517 = (uint64_t *)v1234;
                v516 = (char *)v1235;
                goto LABEL_1345;
              }
              if (((1 << v658) & 0x30000) != 0) {
                goto LABEL_1327;
              }
            }
            if ((v658 & 0xFE) == 0x12 || v658 == 21)
            {
LABEL_1327:
              if (llvm::Type::isSizedDerivedType((uint64_t)v408, (uint64_t)&v1234)) {
                goto LABEL_971;
              }
            }
            v1231.n128_u64[0] = (unint64_t)"alloca of unsized type";
            __int16 v1233 = 259;
            sub_1CC1DDE58((int)v40, v1209, (llvm::Twine *)&v1231);
          }
LABEL_951:
          uint64_t v78 = "Invalid record";
          goto LABEL_952;
        }
        std::string::size_type v285 = "Missing element type for old-style alloca";
        goto LABEL_939;
      case 20:
        LODWORD(v1214[0]) = 0;
        uint64_t v1227 = 0;
        LODWORD(v1217) = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, v1214, v1211[0], (llvm::Type ***)&v1227, &v1217)) {
          goto LABEL_532;
        }
        uint64_t v294 = LODWORD(v1214[0]);
        int v295 = LODWORD(v1214[0]) + 3;
        if (v1244 != LODWORD(v1214[0]) + 2 && v1244 != v295) {
          goto LABEL_532;
        }
        unint64_t v296 = (uint64_t *)v1227;
        if (*(unsigned char *)(*(void *)v1227 + 8) != 15) {
          goto LABEL_537;
        }
        if (v1244 == v295)
        {
          int v297 = ++LODWORD(v1214[0]);
          unint64_t v298 = v1243[v294];
          unsigned int __src = v298;
          unint64_t v299 = (unsigned __int8 *)sub_1CC1E22AC(a2, v298);
          goto LABEL_1062;
        }
        uint64_t v678 = *(void *)(a2 + 544);
        uint64_t v679 = *(unsigned int *)(a2 + 560);
        if (!v679) {
          goto LABEL_1879;
        }
        unsigned int v680 = v679 - 1;
        v681 = (int *)(v678 + 32 * ((v679 - 1) & (37 * v1217)));
        int v682 = *v681;
        if (v1217 != *v681)
        {
          int v1105 = 1;
          LODWORD(v1106) = v680 & (37 * v1217);
          while (1)
          {
            uint64_t v40 = v1206;
            uint64_t v42 = v1210;
            if (v682 == -1) {
              break;
            }
            int v1107 = v1106 + v1105++;
            uint64_t v1106 = v1107 & v680;
            int v682 = *(_DWORD *)(v678 + 32 * v1106);
            if (v1217 == v682)
            {
              v681 = (int *)(v678 + 32 * v1106);
              uint64_t v40 = v1206;
              uint64_t v42 = v1210;
              goto LABEL_1004;
            }
          }
LABEL_1879:
          v681 = (int *)(v678 + 32 * v679);
        }
LABEL_1004:
        if ((int *)(v678 + 32 * v679) == v681 || !v681[4]) {
          unsigned int v683 = -1;
        }
        else {
          unsigned int v683 = **((_DWORD **)v681 + 1);
        }
        unsigned int __src = v683;
        uint64_t v715 = sub_1CC1E22AC(a2, v683);
        if (v715)
        {
          unint64_t v299 = (unsigned __int8 *)v715;
          int v297 = v294;
LABEL_1062:
          sub_1CC1E2F4C(v40, a2, (uint64_t)v299, *v296);
          if (*v40) {
            goto LABEL_1063;
          }
          v716 = v1243[v297];
          if ((unint64_t)v716 >= 0x22)
          {
            v1234 = "Invalid alignment value";
            v1238[0] = 259;
            sub_1CC1DDE58((int)v40, v1209, (llvm::Twine *)&v1234);
          }
          *uint64_t v40 = 0;
          v1234 = (char *)v1238;
          uint64_t v1235 = (uint64_t)v1238;
          uint64_t v1236 = 4;
          int v1237 = 0;
          if (v716)
          {
            char Alignment = (_BYTE)v716 - 1;
LABEL_1304:
            v852 = (char *)operator new(0x60uLL);
            uint64_t v155 = (uint64_t ***)(v852 + 32);
            *((_DWORD *)v852 + 13) = *((_DWORD *)v852 + 13) & 0x38000000 | 1;
            *(void *)v852 = 0;
            *((void *)v852 + 1) = 0;
            *((void *)v852 + 2) = 0;
            *((void *)v852 + 3) = v852 + 32;
            __int16 v1233 = 257;
            llvm::LoadInst::LoadInst((llvm::Value *)(v852 + 32), (uint64_t)v299, (uint64_t)v296, (const char **)&v1231, v1243[v297 + 1] != 0, Alignment, 0);
            unint64_t v660 = *(unsigned int *)(a2 + 752);
            if (v660 >= *(unsigned int *)(a2 + 756)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v41 = a2 + 8;
            goto LABEL_1140;
          }
          unsigned int v851 = v299[8];
          if (v851 <= 0x11)
          {
            if (((1 << v851) & 0xAC7F) != 0)
            {
LABEL_1303:
              char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(a2 + 432) + 272), (llvm::Type *)v299, 1);
              goto LABEL_1304;
            }
            if (((1 << v851) & 0x30000) != 0) {
              goto LABEL_1539;
            }
          }
          if ((v851 & 0xFE) == 0x12 || v851 == 21)
          {
LABEL_1539:
            if (llvm::Type::isSizedDerivedType((uint64_t)v299, (uint64_t)&v1234)) {
              goto LABEL_1303;
            }
          }
          v1231.n128_u64[0] = (unint64_t)"load of unsized type";
          __int16 v1233 = 259;
          sub_1CC1DDE58((int)v40, v1209, (llvm::Twine *)&v1231);
        }
        v398 = "Missing element type for old-style load";
        goto LABEL_1259;
      case 23:
        if (v1244 <= 2) {
          goto LABEL_434;
        }
        unsigned int v183 = (llvm::Type *)sub_1CC1E22AC(a2, *(_DWORD *)v1243);
        if (v1244 == 1)
        {
          uint64_t v184 = 0;
        }
        else
        {
          unsigned int v399 = *((_DWORD *)v1243 + 2);
          if (*(unsigned char *)(a2 + 1640)) {
            uint64_t v400 = v1211[0] - v399;
          }
          else {
            uint64_t v400 = v399;
          }
          uint64_t v184 = sub_1CC1E29E0(a2, v400, v183);
        }
        unsigned int __src = *((_DWORD *)v1243 + 4);
        uint64_t v401 = sub_1CC1E22AC(a2, __src);
        if (!v183) {
          goto LABEL_1015;
        }
        if (!v184) {
          goto LABEL_1015;
        }
        uint64_t v402 = v401;
        if (!v401) {
          goto LABEL_1015;
        }
        std::string v403 = (char *)operator new(0x60uLL);
        __int16 v404 = v403;
        uint64_t v155 = (uint64_t ***)(v403 + 32);
        *((void *)v403 + 1) = 0;
        *((void *)v403 + 2) = 0;
        *((void *)v403 + 3) = v403 + 32;
        v1238[0] = 257;
        *((void *)v403 + 4) = v402;
        *((void *)v403 + 5) = 0;
        *((void *)v403 + 6) = 0x100000058;
        *(_OWORD *)(v403 + 56) = 0u;
        *(_OWORD *)(v403 + 72) = 0u;
        *((_DWORD *)v403 + 22) = 0;
        *(void *)std::string v403 = v184;
        v407 = v184[1];
        v406 = v184 + 1;
        v405 = v407;
        *((void *)v403 + 1) = v407;
        if (v407) {
          *((void *)v405 + 2) = v403 + 8;
        }
        *((void *)v403 + 2) = v406;
        void *v406 = v403;
        llvm::Value::setNameImpl((llvm::Value *)(v403 + 32), (const char **)&v1234);
        if (v404[48]) {
          goto LABEL_548;
        }
        if ((v404[55] & 0x10) == 0) {
          goto LABEL_1739;
        }
        uint64_t v947 = ***v155;
        uint64_t v948 = *(void *)(v947 + 152);
        uint64_t v949 = *(unsigned int *)(v947 + 168);
        if (!v949) {
          goto LABEL_1731;
        }
        LODWORD(v950) = (v949 - 1) & ((v155 >> 4) ^ (v155 >> 9));
        v951 = (uint64_t ****)(v948 + 16 * v950);
        v952 = *v951;
        if (*v951 == v155) {
          goto LABEL_1732;
        }
        int v953 = 1;
        do
        {
          if (v952 == (uint64_t ***)-4096)
          {
LABEL_1731:
            v951 = (uint64_t ****)(v948 + 16 * v949);
            goto LABEL_1732;
          }
          int v954 = v950 + v953++;
          uint64_t v950 = v954 & (v949 - 1);
          v952 = *(uint64_t ****)(v948 + 16 * v950);
        }
        while (v952 != v155);
        v951 = (uint64_t ****)(v948 + 16 * v950);
LABEL_1732:
        v1047 = v951[1];
        unint64_t v1049 = (unint64_t)*v1047;
        v1048 = v1047 + 2;
        unint64_t v43 = v1049;
        if (v1049 >= 5
          && (*(_DWORD *)v1048 == *(_DWORD *)"llvm." ? (BOOL v1050 = v1048[4] == aLlvm_1[4]) : (BOOL v1050 = 0), v1050))
        {
          *((_DWORD *)v404 + 16) |= 0x2000u;
          int v1051 = llvm::Function::lookupIntrinsicID(v1048, v43);
        }
        else
        {
LABEL_1739:
          int v1051 = 0;
          *((_DWORD *)v404 + 16) &= ~0x2000u;
        }
        *((_DWORD *)v404 + 17) = v1051;
        uint64_t v40 = v1206;
        uint64_t v42 = v1210;
LABEL_548:
        unint64_t v371 = *(unsigned int *)(a2 + 752);
        uint64_t v41 = a2 + 8;
        if (v371 >= *(unsigned int *)(a2 + 756)) {
          goto LABEL_549;
        }
        goto LABEL_480;
      case 24:
      case 44:
        LODWORD(v1217) = 0;
        uint64_t v1227 = 0;
        v1214[0] = 0;
        LODWORD(v1213) = 0;
        int v1218 = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1217, v1211[0], v1214, &v1213)) {
          goto LABEL_532;
        }
        if (v47 == 44)
        {
          if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1217, v1211[0], (llvm::Type ***)&v1227, &v1218)) {
            goto LABEL_532;
          }
          int v56 = (int)v1217;
LABEL_528:
          if (v1244 == v56 + 2)
          {
            char v394 = (uint64_t *)v1227;
            v395 = v1214[0];
            sub_1CC1E2F4C(v40, a2, *(void *)v1227, (uint64_t)*v1214[0]);
            if (!*v40)
            {
              uint64_t v396 = v1243[v56];
              if ((unint64_t)v396 >= 0x22)
              {
                v1234 = "Invalid alignment value";
                v1238[0] = 259;
                sub_1CC1DDE58((int)v40, v1209, (llvm::Twine *)&v1234);
              }
              *uint64_t v40 = 0;
              v1234 = (char *)v1238;
              uint64_t v1235 = (uint64_t)v1238;
              uint64_t v1236 = 4;
              int v1237 = 0;
              if (v396)
              {
                char v712 = (_BYTE)v396 - 1;
LABEL_1134:
                v760 = (char *)operator new(0x80uLL);
                *((_DWORD *)v760 + 21) = *((_DWORD *)v760 + 21) & 0x38000000 | 2;
                *((void *)v760 + 2) = 0;
                *(void *)v760 = 0;
                *((void *)v760 + 1) = 0;
                *((void *)v760 + 5) = 0;
                *((void *)v760 + 6) = 0;
                *((void *)v760 + 4) = 0;
                *((void *)v760 + 8) = **(void **)*v394 + 1576;
                *((void *)v760 + 3) = v760 + 64;
                *((void *)v760 + 7) = v760 + 64;
                v761 = v1243[v56 + 1];
                *((void *)v760 + 9) = 0;
                v760[80] = 61;
                v760[81] = 0;
                *((_WORD *)v760 + 41) = 0;
                *((_DWORD *)v760 + 21) = 2;
                *(_OWORD *)(v760 + 104) = 0u;
                *((_DWORD *)v760 + 30) = 0;
                *(_OWORD *)(v760 + 88) = 0u;
                *(void *)v760 = v394;
                uint64_t v764 = v394[1];
                v763 = v394 + 1;
                uint64_t v762 = v764;
                *((void *)v760 + 1) = v764;
                if (v764) {
                  *(void *)(v762 + 16) = v760 + 8;
                }
                *((void *)v760 + 2) = v763;
                void *v763 = v760;
                if (*((void *)v760 + 4))
                {
                  **((void **)v760 + 6) = *((void *)v760 + 5);
                  uint64_t v1111 = *((void *)v760 + 5);
                  if (v1111) {
                    *(void *)(v1111 + 16) = *((void *)v760 + 6);
                  }
                }
                *((void *)v760 + 4) = v395;
                v767 = v395[1];
                v766 = v395 + 1;
                v765 = v767;
                *((void *)v760 + 5) = v767;
                uint64_t v41 = a2 + 8;
                uint64_t v155 = (uint64_t ***)(v760 + 64);
                if (v767) {
                  *((void *)v765 + 2) = v760 + 40;
                }
                *((void *)v760 + 6) = v766;
                void *v766 = v760 + 32;
                *((_WORD *)v760 + 41) = (v761 != 0) | (unsigned __int16)(2 * (v712 & 0x3F));
                v760[124] = 1;
                unint64_t v660 = *(unsigned int *)(a2 + 752);
                if (v660 >= *(unsigned int *)(a2 + 756)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                goto LABEL_1140;
              }
              v758 = (llvm::Type *)*v394;
              unsigned int v759 = *(unsigned __int8 *)(*v394 + 8);
              if (v759 <= 0x11)
              {
                if (((1 << v759) & 0xAC7F) != 0)
                {
LABEL_1133:
                  char v712 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(a2 + 432) + 272), v758, 1);
                  goto LABEL_1134;
                }
                if (((1 << v759) & 0x30000) != 0) {
                  goto LABEL_2000;
                }
              }
              if ((v759 & 0xFE) == 0x12 || v759 == 21)
              {
LABEL_2000:
                if (llvm::Type::isSizedDerivedType(*v394, (uint64_t)&v1234))
                {
                  v758 = (llvm::Type *)*v394;
                  goto LABEL_1133;
                }
              }
              v1231.n128_u64[0] = (unint64_t)"store of unsized type";
              __int16 v1233 = 259;
              sub_1CC1DDE58((int)v40, v1209, (llvm::Twine *)&v1231);
            }
LABEL_1063:
            uint64_t v155 = 0;
            int v45 = 1;
            uint64_t v41 = a2 + 8;
            goto LABEL_1422;
          }
LABEL_532:
          v141 = "Invalid record";
LABEL_533:
          v1234 = (char *)v141;
          v1238[0] = 259;
          int v397 = (int)v40;
          goto LABEL_534;
        }
        uint64_t v340 = *(void *)(a2 + 544);
        uint64_t v341 = *(unsigned int *)(a2 + 560);
        unsigned int v342 = v1211[0];
        if (!v341) {
          goto LABEL_1815;
        }
        unsigned int v343 = v341 - 1;
        unint64_t v344 = (int *)(v340 + 32 * ((v341 - 1) & (37 * v1213)));
        int v345 = *v344;
        if (v1213 != *v344)
        {
          int v1073 = 1;
          LODWORD(v1074) = v343 & (37 * v1213);
          while (1)
          {
            uint64_t v40 = v1206;
            uint64_t v41 = a2 + 8;
            uint64_t v42 = v1210;
            unsigned int v342 = v1211[0];
            if (v345 == -1) {
              break;
            }
            int v1075 = v1074 + v1073++;
            uint64_t v1074 = v1075 & v343;
            int v345 = *(_DWORD *)(v340 + 32 * v1074);
            if (v1213 == v345)
            {
              unint64_t v344 = (int *)(v340 + 32 * v1074);
              uint64_t v40 = v1206;
              uint64_t v41 = a2 + 8;
              uint64_t v42 = v1210;
              unsigned int v342 = v1211[0];
              goto LABEL_442;
            }
          }
LABEL_1815:
          unint64_t v344 = (int *)(v340 + 32 * v341);
        }
LABEL_442:
        if ((int *)(v340 + 32 * v341) == v344 || !v344[4]) {
          unsigned int v346 = -1;
        }
        else {
          unsigned int v346 = **((_DWORD **)v344 + 1);
        }
        int v1218 = v346;
        v382 = (llvm::Type *)sub_1CC1E22AC(a2, v346);
        int v383 = (int)v1217;
        if (v1244 == v1217)
        {
          uint64_t v1227 = 0;
          goto LABEL_532;
        }
        std::string v392 = v1243[v1217];
        if (*(unsigned char *)(a2 + 1640)) {
          uint64_t v393 = v342 - v392;
        }
        else {
          uint64_t v393 = v392;
        }
        uint64_t v1227 = (uint64_t)sub_1CC1E29E0(a2, v393, v382);
        if (!v1227) {
          goto LABEL_532;
        }
        int v56 = v383 + 1;
        LODWORD(v1217) = v383 + 1;
        goto LABEL_528;
      case 26:
        LODWORD(v1214[0]) = 0;
        uint64_t v1227 = 0;
        LODWORD(v1217) = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, v1214, v1211[0], (llvm::Type ***)&v1227, &v1217)) {
          goto LABEL_532;
        }
        int v283 = v1244;
        int v284 = (int)v1214[0];
        if (LODWORD(v1214[0]) == v1244)
        {
          std::string::size_type v285 = "EXTRACTVAL: Invalid instruction with 0 indices";
LABEL_939:
          v1234 = (char *)v285;
          v1238[0] = 259;
LABEL_1200:
          int v806 = (int)v40;
          goto LABEL_1421;
        }
        LODWORD(v456) = 0;
        v457 = (uint64_t *)v1227;
        uint64_t v458 = *(void *)v1227;
        v1231.n128_u64[0] = (unint64_t)v1232;
        v1231.n128_u64[1] = 0x400000000;
        unsigned int __src = v1217;
        do
        {
          if ((*(_DWORD *)(v458 + 8) & 0xFE) != 0x10)
          {
            LODWORD(v1214[0]) = v284;
            v638 = "EXTRACTVAL: Invalid type";
LABEL_975:
            v1234 = (char *)v638;
            v1238[0] = 259;
            sub_1CC1DDE58((int)v40, v1209, (llvm::Twine *)&v1234);
          }
          unint64_t v459 = (unint64_t)v1243[v284];
          if (HIDWORD(v459))
          {
            LODWORD(v1214[0]) = v284;
            v747 = "Invalid value";
            goto LABEL_1343;
          }
          int v460 = *(_DWORD *)(v458 + 8);
          if (v460 == 16)
          {
            if (v459 >= *(unsigned int *)(v458 + 12))
            {
              LODWORD(v1214[0]) = v284;
              v747 = "EXTRACTVAL: Invalid struct index";
              goto LABEL_1343;
            }
          }
          else if (v460 == 17 && v459 >= *(void *)(v458 + 32))
          {
            LODWORD(v1214[0]) = v284;
            v747 = "EXTRACTVAL: Invalid array index";
            goto LABEL_1343;
          }
          if (v456 >= v1231.n128_u32[3]) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(v1231.n128_u64[0] + 4 * v456) = v459;
          uint64_t v456 = ++v1231.n128_u32[2];
          v461 = *(uint64_t **)(v458 + 16);
          if (v460 == 16)
          {
            uint64_t v462 = *(void *)(a2 + 544);
            uint64_t v463 = *(unsigned int *)(a2 + 560);
            if (v463)
            {
              unsigned int v464 = v463 - 1;
              v465 = (int *)(v462 + 32 * ((v463 - 1) & (37 * __src)));
              int v466 = *v465;
              if (__src == *v465) {
                goto LABEL_635;
              }
              int v474 = 1;
              LODWORD(v475) = v464 & (37 * __src);
              while (1)
              {
                uint64_t v40 = v1206;
                if (v466 == -1) {
                  break;
                }
                int v476 = v475 + v474++;
                uint64_t v475 = v476 & v464;
                int v466 = *(_DWORD *)(v462 + 32 * v475);
                if (__src == v466)
                {
                  v465 = (int *)(v462 + 32 * v475);
                  uint64_t v40 = v1206;
                  goto LABEL_635;
                }
              }
            }
            v465 = (int *)(v462 + 32 * v463);
LABEL_635:
            uint64_t v458 = v461[v459];
            if ((int *)(v462 + 32 * v463) != v465 && v465[4] > v459)
            {
              v467 = (unsigned int *)(*((void *)v465 + 1) + 4 * v459);
              uint64_t v42 = v1210;
LABEL_643:
              unsigned int v473 = *v467;
              goto LABEL_646;
            }
            unsigned int v473 = -1;
            uint64_t v42 = v1210;
            goto LABEL_646;
          }
          uint64_t v468 = *(void *)(a2 + 544);
          uint64_t v469 = *(unsigned int *)(a2 + 560);
          if (v469)
          {
            unsigned int v470 = v469 - 1;
            v471 = (int *)(v468 + 32 * ((v469 - 1) & (37 * __src)));
            int v472 = *v471;
            uint64_t v42 = v1210;
            if (__src == *v471) {
              goto LABEL_640;
            }
            int v477 = 1;
            LODWORD(v478) = v470 & (37 * __src);
            while (1)
            {
              uint64_t v40 = v1206;
              if (v472 == -1) {
                break;
              }
              int v479 = v478 + v477++;
              uint64_t v478 = v479 & v470;
              int v472 = *(_DWORD *)(v468 + 32 * v478);
              if (__src == v472)
              {
                v471 = (int *)(v468 + 32 * v478);
                uint64_t v40 = v1206;
                uint64_t v42 = v1210;
                goto LABEL_640;
              }
            }
          }
          v471 = (int *)(v468 + 32 * v469);
          uint64_t v42 = v1210;
LABEL_640:
          uint64_t v458 = *v461;
          if ((int *)(v468 + 32 * v469) != v471 && v471[4])
          {
            v467 = (unsigned int *)*((void *)v471 + 1);
            goto LABEL_643;
          }
          unsigned int v473 = -1;
LABEL_646:
          unsigned int __src = v473;
          ++v284;
        }
        while (v284 != v283);
        v663 = (unsigned int *)v1231.n128_u64[0];
        LODWORD(v1214[0]) = v283;
        v1238[0] = 257;
        v664 = (char *)operator new(0x80uLL);
        uint64_t v155 = (uint64_t ***)(v664 + 32);
        *((_DWORD *)v664 + 13) = *((_DWORD *)v664 + 13) & 0x38000000 | 1;
        *(void *)v664 = 0;
        *((void *)v664 + 1) = 0;
        *((void *)v664 + 2) = 0;
        *((void *)v664 + 3) = v664 + 32;
        uint64_t v665 = *v457;
        if (!v456)
        {
          uint64_t v670 = *v457;
          goto LABEL_1114;
        }
        uint64_t v666 = 4 * v456;
        v667 = v663;
        while (2)
        {
          unint64_t v668 = *v667;
          int v669 = *(unsigned __int8 *)(v665 + 8);
          if (!v665 || v669 != 17)
          {
            uint64_t v670 = 0;
            if (!v665 || v669 != 16) {
              goto LABEL_1114;
            }
            if (v668 >= *(_DWORD *)(v665 + 12))
            {
              uint64_t v670 = 0;
              goto LABEL_1114;
            }
            v671 = (uint64_t *)(*(void *)(v665 + 16) + 8 * v668);
            goto LABEL_993;
          }
          if (*(void *)(v665 + 32) > v668)
          {
            v671 = (uint64_t *)(v665 + 24);
            uint64_t v40 = v1206;
            uint64_t v42 = v1210;
LABEL_993:
            uint64_t v665 = *v671;
            ++v667;
            uint64_t v670 = v665;
            v666 -= 4;
            if (!v666) {
              goto LABEL_1114;
            }
            continue;
          }
          break;
        }
        uint64_t v670 = 0;
        uint64_t v40 = v1206;
        uint64_t v42 = v1210;
LABEL_1114:
        *((void *)v664 + 4) = v670;
        *((void *)v664 + 5) = 0;
        *((void *)v664 + 6) = 0x10000005CLL;
        *(_OWORD *)(v664 + 56) = 0u;
        *(_OWORD *)(v664 + 72) = 0u;
        *((_DWORD *)v664 + 22) = 0;
        *(void *)v664 = v457;
        uint64_t v751 = v457[1];
        v750 = v457 + 1;
        uint64_t v749 = v751;
        *((void *)v664 + 1) = v751;
        if (v751) {
          *(void *)(v749 + 16) = v664 + 8;
        }
        *((void *)v664 + 2) = v750;
        void *v750 = v664;
        *((void *)v664 + 12) = v664 + 112;
        *((void *)v664 + 13) = 0x400000000;
        llvm::ExtractValueInst::init((llvm::Value *)(v664 + 32), v663, v456, (const char **)&v1234);
        unint64_t v752 = *(unsigned int *)(a2 + 752);
        if (v752 >= *(unsigned int *)(a2 + 756)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v41 = a2 + 8;
LABEL_1205:
        *(void *)(*v1204 + 8 * v752) = v155;
        ++*v1203;
        int v45 = 9;
LABEL_1344:
        v516 = (char *)v1231.n128_u64[0];
        v517 = v1232;
LABEL_1345:
        if (v516 != (char *)v517) {
          free(v516);
        }
LABEL_1422:
        if (v45 == 9)
        {
LABEL_1423:
          uint64_t v892 = v1207;
          if (!v1207)
          {
            llvm::Value::deleteValue((void (**)(void))v155, (llvm::Value *)v43);
            v1234 = "Invalid instruction with no BB";
            v1238[0] = 259;
            sub_1CC1DDE58((int)v40, v41, (llvm::Twine *)&v1234);
          }
          if (v1222 != v1223)
          {
            llvm::Value::deleteValue((void (**)(void))v155, (llvm::Value *)v43);
            uint64_t v94 = "Operand bundles found with no consumer";
LABEL_1426:
            v1234 = (char *)v94;
            v1238[0] = 259;
            int v445 = (int)v40;
LABEL_1427:
            sub_1CC1DDE58(v445, v41, (llvm::Twine *)&v1234);
          }
          v155[5] = (uint64_t **)v1207;
          *(_WORD *)(v1207 + 18) &= ~0x8000u;
          if ((*((unsigned char *)v155 + 23) & 0x10) != 0)
          {
            uint64_t v897 = *(void *)(v1207 + 56);
            if (v897)
            {
              v898 = *(llvm::ValueSymbolTable **)(v897 + 104);
              if (v898) {
                llvm::ValueSymbolTable::reinsertValue(v898, (llvm::Value *)v155);
              }
            }
          }
          uint64_t v894 = *(void *)(v1207 + 40);
          v155[3] = (uint64_t **)v894;
          v155[4] = (uint64_t **)(v1207 + 40);
          *(void *)(v894 + 8) = v155 + 3;
          *(void *)(v1207 + 40) = v155 + 3;
          unint64_t v895 = v1205;
          unint64_t v43 = *(void *)v1211;
          if (*((unsigned __int8 *)v155 + 16) - 29 <= 0xA)
          {
            unint64_t v895 = (v1205 + 1);
            uint64_t v896 = *(void *)(a2 + 1392);
            if (v895 >= (*(void *)(a2 + 1400) - v896) >> 3) {
              uint64_t v892 = 0;
            }
            else {
              uint64_t v892 = *(void *)(v896 + 8 * v895);
            }
          }
          uint64_t v1207 = v892;
          unint64_t v1205 = v895;
          if (*((unsigned char *)*v155 + 8) == 7)
          {
            int v45 = 0;
          }
          else
          {
            llvm::BitcodeReaderValueList::assignValue((llvm::BitcodeReaderValueList *)v1208, (llvm::Value *)v155, v1211[0], __src, v40);
            int v45 = *v40 != 0;
            *(void *)v1211 = v1211[0] + 1;
          }
        }
LABEL_1429:
        if (v1240)
        {
          v893 = v1239;
          v1239 = 0;
          if (v893) {
            (*(void (**)(void *))(*(void *)v893 + 8))(v893);
          }
        }
LABEL_53:
        if (v1242)
        {
          uint64_t v46 = v1241;
          v1241 = 0;
          if (v46) {
            (*(void (**)(void *))(*(void *)v46 + 8))(v46);
          }
        }
        if (!v45 || v45 == 4) {
          continue;
        }
        if (v45 == 7)
        {
          if (v1222 != v1223)
          {
            v1150 = "Operand bundles found with no consumer";
            goto LABEL_1956;
          }
          uint64_t v1152 = *(void *)(a2 + 624);
          uint64_t v1153 = *(void *)(v1152 - 16);
          if (v1153) {
            BOOL v1154 = *(unsigned char *)(v1153 + 16) == 21;
          }
          else {
            BOOL v1154 = 0;
          }
          if (v1154 && !*(void *)(v1153 + 24))
          {
            unint64_t v1158 = (unint64_t)(v1152 - *v1208) >> 5;
            for (unsigned int j = v1199; v1158 != j; ++j)
            {
              uint64_t v1160 = *(void *)(*v1208 + 32 * j + 16);
              if (v1160 && *(unsigned char *)(v1160 + 16) == 21 && !*(void *)(v1160 + 24))
              {
                v1161 = llvm::UndefValue::get(*(llvm::UndefValue **)v1160, (llvm::Type *)v43);
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v1160, v1161, (llvm::Value *)1);
                llvm::Value::~Value((llvm::Value *)v1160, v1162);
                MEMORY[0x1D25D9CE0]();
              }
            }
            v1150 = "Never resolved value found in function";
LABEL_1956:
            v1234 = (char *)v1150;
            v1238[0] = 259;
            sub_1CC1DDE58((int)v40, v41, (llvm::Twine *)&v1234);
          }
          if (*(_DWORD *)(*(void *)(a2 + 680) + 24) >= 2u)
          {
            v1150 = "Invalid function metadata: outgoing forward refs";
            goto LABEL_1956;
          }
          sub_1CC1E4460(v1208, (v1200 >> 5));
          sub_1CC1F3A70(*(void *)(a2 + 680), v1201);
          v1157 = *(void **)(a2 + 1392);
          *v1202 = 0;
          *(void *)(a2 + 1400) = 0;
          *(void *)(a2 + 1408) = 0;
          if (v1157) {
            operator delete(v1157);
          }
          *uint64_t v40 = 0;
        }
        if (v1243 != (void **)v1245) {
          free(v1243);
        }
        v1243 = (void **)&v1222;
        sub_1CC1E47CC(&v1243);
        if (v1225)
        {
          int v1151 = *v1225;
          if ((v1151 - 4) > 0x1E)
          {
            if ((v1151 - 3) >= 0xFFFFFFFE) {
              v1155 = v1225;
            }
            else {
              v1155 = 0;
            }
            if ((v1151 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v1156 = (unint64_t)(v1155 + 8);
              goto LABEL_1977;
            }
            if (v1151 == 3) {
              *((void *)v1225 + 1) = 0;
            }
          }
          else if ((v1225[1] & 0x7F) == 2 || *((_DWORD *)v1225 + 3))
          {
            uint64_t v1163 = *((void *)v1225 + 2);
            if ((v1163 & 4) != 0)
            {
              unint64_t v1156 = v1163 & 0xFFFFFFFFFFFFFFF8;
              if (v1156)
              {
LABEL_1977:
                v1243 = (void **)&v1225;
                sub_1CC5FA668(v1156 + 16, &v1243);
              }
            }
          }
        }
        return;
      case 27:
        LODWORD(v1217) = 0;
        uint64_t v1227 = 0;
        LODWORD(v1213) = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1217, v1211[0], (llvm::Type ***)&v1227, &v1213)) {
          goto LABEL_532;
        }
        v1214[0] = 0;
        int v1218 = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1217, v1211[0], v1214, &v1218)) {
          goto LABEL_532;
        }
        int v139 = v1244;
        int v140 = (int)v1217;
        if (v1217 != v1244)
        {
          LODWORD(v605) = 0;
          v1231.n128_u64[0] = (unint64_t)v1232;
          v1231.n128_u64[1] = 0x400000000;
          v606 = (llvm::Type **)v1227;
          uint64_t v607 = *(void *)v1227;
          while ((*(_DWORD *)(v607 + 8) & 0xFE) == 0x10)
          {
            unint64_t v608 = (unint64_t)v1243[v140];
            if (HIDWORD(v608))
            {
              LODWORD(v1217) = v140;
              v746 = "Invalid value";
LABEL_1110:
              v1234 = (char *)v746;
              v1238[0] = 259;
              sub_1CC1DDE58((int)v40, v1209, (llvm::Twine *)&v1234);
            }
            int v609 = *(_DWORD *)(v607 + 8);
            if (v609 == 16)
            {
              if (v608 >= *(unsigned int *)(v607 + 12))
              {
                LODWORD(v1217) = v140;
                v747 = "INSERTVAL: Invalid struct index";
                goto LABEL_1343;
              }
            }
            else if (v609 == 17 && v608 >= *(void *)(v607 + 32))
            {
              LODWORD(v1217) = v140;
              v747 = "INSERTVAL: Invalid array index";
LABEL_1343:
              v1234 = (char *)v747;
              v1238[0] = 259;
              sub_1CC1DDE58((int)v40, v1209, (llvm::Twine *)&v1234);
            }
            if (v605 >= v1231.n128_u32[3]) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(v1231.n128_u64[0] + 4 * v605) = v608;
            uint64_t v605 = ++v1231.n128_u32[2];
            if (v609 == 16) {
              unint64_t v610 = v608;
            }
            else {
              unint64_t v610 = 0;
            }
            uint64_t v607 = *(void *)(*(void *)(v607 + 16) + 8 * v610);
            if (v139 == ++v140)
            {
              LODWORD(v1217) = v139;
              v748 = v1214[0];
              if ((llvm::Type *)v607 != *v1214[0])
              {
                v747 = "Inserted value type doesn't match aggregate type";
                goto LABEL_1343;
              }
              v853 = (void *)v1231.n128_u64[0];
              v1238[0] = 257;
              v854 = (char *)operator new(0xA0uLL);
              *((_DWORD *)v854 + 21) = *((_DWORD *)v854 + 21) & 0x38000000 | 2;
              *((void *)v854 + 1) = 0;
              *((void *)v854 + 2) = 0;
              *(void *)v854 = 0;
              *((void *)v854 + 5) = 0;
              *((void *)v854 + 6) = 0;
              *((void *)v854 + 4) = 0;
              v855 = *v606;
              *((_DWORD *)v854 + 21) = 2;
              *((void *)v854 + 8) = v855;
              v854 += 64;
              *((void *)v854 - 5) = v854;
              *((void *)v854 - 1) = v854;
              *((void *)v854 + 1) = 0;
              v854[16] = 93;
              v854[17] = 0;
              *((_WORD *)v854 + 9) = 0;
              *((_DWORD *)v854 + 14) = 0;
              *(_OWORD *)(v854 + 40) = 0u;
              *(_OWORD *)(v854 + 24) = 0u;
              *((void *)v854 + 8) = v854 + 80;
              *((void *)v854 + 9) = 0x400000000;
              uint64_t v155 = (uint64_t ***)v854;
              llvm::InsertValueInst::init((llvm::Value *)v854, (uint64_t)v606, (uint64_t)v748, v853, v605, (const char **)&v1234);
              unsigned int __src = v1213;
              unint64_t v856 = *(unsigned int *)(a2 + 752);
              if (v856 >= *(unsigned int *)(a2 + 756)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*v1204 + 8 * v856) = v155;
LABEL_1325:
              ++*v1203;
              int v45 = 9;
              uint64_t v40 = v1206;
              uint64_t v41 = a2 + 8;
              uint64_t v42 = v1210;
              goto LABEL_1344;
            }
          }
          LODWORD(v1217) = v140;
          v746 = "INSERTVAL: Invalid type";
          goto LABEL_1110;
        }
        v141 = "INSERTVAL: Invalid instruction with 0 indices";
        goto LABEL_533;
      case 29:
        LODWORD(v1214[0]) = 0;
        v1231.n128_u64[0] = 0;
        uint64_t v1227 = 0;
        LODWORD(v1217) = 0;
        LODWORD(v1213) = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, v1214, v1211[0], (llvm::Type ***)&v1231, &v1217)) {
          goto LABEL_1419;
        }
        int v300 = (int)v1214[0];
        if (v1244 == LODWORD(v1214[0])) {
          goto LABEL_1419;
        }
        unsigned int v301 = v1217;
        uint64_t v302 = (uint64_t *)v1231.n128_u64[0];
        v303 = v1243[LODWORD(v1214[0])];
        uint64_t v304 = *(unsigned char *)(a2 + 1640) ? v1211[0] - v303 : v303;
        unint64_t v305 = sub_1CC1E29E0(a2, v304, *(llvm::Type **)v1231.n128_u64[0]);
        if (!v305) {
          goto LABEL_1419;
        }
        uint64_t v306 = (uint64_t)v305;
        LODWORD(v1214[0]) = v300 + 1;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, v1214, v1211[0], (llvm::Type ***)&v1227, &v1213)) {
          goto LABEL_1419;
        }
        uint64_t v307 = *(void *)v1227;
        if (*(void *)v1227 && (*(_DWORD *)(v307 + 8) & 0xFE) == 0x12) {
          uint64_t v307 = *(void *)(v307 + 24);
        }
        if (v307 != **(void **)(a2 + 424) + 1888)
        {
          unint64_t v308 = "Invalid type for value";
LABEL_1420:
          v1234 = (char *)v308;
          v1238[0] = 259;
          int v806 = (int)v40;
          uint64_t v41 = a2 + 8;
LABEL_1421:
          sub_1CC1DDE58(v806, v41, (llvm::Twine *)&v1234);
        }
        v1238[0] = 257;
        uint64_t v155 = (uint64_t ***)sub_1CC199EFC(v1227, v302, v306, (const char **)&v1234, 0, 0);
        unsigned int __src = v301;
        unint64_t v755 = *(unsigned int *)(a2 + 752);
        if (v755 >= *(unsigned int *)(a2 + 756)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*v1204 + 8 * v755) = v155;
        ++*v1203;
        uint64_t v756 = LODWORD(v1214[0]);
        if (v1244 <= LODWORD(v1214[0]) || !sub_1CB845E74((uint64_t)v155))
        {
          int v45 = 9;
          uint64_t v41 = a2 + 8;
          goto LABEL_1422;
        }
        unsigned int v757 = v1243[v756] & 0x7E | (v1243[v756] >> 7) & 1 | -(v1243[v756] & 1);
        if (v757) {
          *((unsigned char *)v155 + 17) |= 2 * (_BYTE)v757;
        }
        goto LABEL_1495;
      case 31:
        if (v1244 <= 1) {
          goto LABEL_434;
        }
        uint64_t v250 = (llvm::Type *)sub_1CC1E22AC(a2, *(_DWORD *)v1243);
        if (v1244 == 1) {
          goto LABEL_1015;
        }
        unint64_t v251 = v250;
        unsigned int v252 = *((_DWORD *)v1243 + 2);
        uint64_t v253 = *(unsigned char *)(a2 + 1640) ? v1211[0] - v252 : v252;
        uint64_t v254 = sub_1CC1E29E0(a2, v253, v250);
        if (!v251) {
          goto LABEL_1015;
        }
        v255 = (llvm::Value *)v254;
        if (!v254) {
          goto LABEL_1015;
        }
        uint64_t v256 = (v1244 - 2);
        v257 = (char *)operator new(0x48uLL);
        *((_DWORD *)v257 + 7) = *((_DWORD *)v257 + 7) & 0x38000000 | 0x40000000;
        *(void *)v257 = 0;
        v258 = (llvm::IndirectBrInst *)(v257 + 8);
        llvm::IndirectBrInst::IndirectBrInst((llvm::IndirectBrInst *)(v257 + 8), v255, v256, 0);
        unint64_t v259 = *(unsigned int *)(a2 + 752);
        if (v259 >= *(unsigned int *)(a2 + 756)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v155 = (uint64_t ***)(v257 + 8);
        *(void *)(*v1204 + 8 * v259) = v258;
        ++*v1203;
        if (!v256) {
          goto LABEL_1319;
        }
        uint64_t v260 = 0;
        while (1)
        {
          unint64_t v261 = LODWORD(v1243[(v260 + 2)]);
          uint64_t v262 = *(void *)(a2 + 1392);
          if (v261 >= (*(void *)(a2 + 1400) - v262) >> 3) {
            break;
          }
          unint64_t v43 = *(void *)(v262 + 8 * v261);
          if (!v43) {
            break;
          }
          llvm::IndirectBrInst::addDestination(v258, (llvm::BasicBlock *)v43);
          if (v256 == ++v260)
          {
            uint64_t v40 = v1206;
            uint64_t v41 = a2 + 8;
            goto LABEL_337;
          }
        }
        if ((v257[31] & 8) != 0)
        {
          v1067 = llvm::UndefValue::get(*(llvm::UndefValue **)v258, (llvm::Type *)v43);
          llvm::ValueAsMetadata::handleRAUW((uint64_t *)v258, v1067, v1068);
        }
        v866 = (unsigned __int8 *)*((void *)v257 + 7);
        if (!v866) {
          goto LABEL_1332;
        }
        int v1039 = *v866;
        if ((v1039 - 4) > 0x1E)
        {
          if ((v1039 - 3) >= 0xFFFFFFFE) {
            uint64_t v1059 = *((void *)v257 + 7);
          }
          else {
            uint64_t v1059 = 0;
          }
          if ((v1039 - 3) < 0xFFFFFFFE)
          {
            if (v1039 == 3) {
              *((void *)v866 + 1) = 0;
            }
            goto LABEL_1332;
          }
          unint64_t v1041 = v1059 + 8;
        }
        else
        {
          if ((v866[1] & 0x7F) != 2 && !*((_DWORD *)v866 + 3)) {
            goto LABEL_1332;
          }
          uint64_t v1040 = *((void *)v866 + 2);
          if ((v1040 & 4) == 0) {
            goto LABEL_1332;
          }
          unint64_t v1041 = v1040 & 0xFFFFFFFFFFFFFFF8;
          if (!v1041) {
            goto LABEL_1332;
          }
        }
        v1234 = v257 + 56;
        sub_1CC5FA668(v1041 + 16, &v1234);
LABEL_1332:
        llvm::Value::~Value(v258, (llvm::Value *)v43);
        int v867 = *((_DWORD *)v257 + 7);
        uint64_t v868 = v867 & 0x7FFFFFF;
        if ((v867 & 0x40000000) != 0)
        {
          v1043 = *(char **)v257;
          if (v868)
          {
            uint64_t v1044 = 32 * v868;
            do
            {
              v1045 = &v1043[v1044];
              if (*(void *)&v1043[v1044 - 32])
              {
                **((void **)v1045 - 2) = *((void *)v1045 - 3);
                uint64_t v1046 = *((void *)v1045 - 3);
                if (v1046) {
                  *(void *)(v1046 + 16) = *((void *)v1045 - 2);
                }
              }
              v1044 -= 32;
            }
            while (v1044);
          }
          operator delete(v1043);
        }
        else
        {
          uint64_t v869 = v868;
          if (v868)
          {
            v870 = v257 - 8;
            uint64_t v871 = -32 * v869;
            do
            {
              if (*((void *)v870 - 2))
              {
                **(void **)v870 = *((void *)v870 - 1);
                uint64_t v872 = *((void *)v870 - 1);
                if (v872) {
                  *(void *)(v872 + 16) = *(void *)v870;
                }
              }
              v870 -= 32;
              v871 += 32;
            }
            while (v871);
          }
          v257 = (char *)v258 - 32 * v869;
          if (v867 < 0) {
            v257 = &v257[-*((void *)v257 - 1) - 8];
          }
        }
        operator delete(v257);
        v1234 = "Invalid record";
        v1238[0] = 259;
        LODWORD(v40) = v1206;
        goto LABEL_981;
      case 33:
        if (!v1207 || (uint64_t v249 = *(void *)(v1207 + 40), v249 == v1207 + 40))
        {
          if (!v1205) {
            goto LABEL_434;
          }
          uint64_t v331 = *(void *)&(*v1202)[8 * (v1205 - 1)];
          if (!v331) {
            goto LABEL_434;
          }
          uint64_t v249 = *(void *)(v331 + 40);
          if (v249 == v331 + 40 || v249 == 0) {
            goto LABEL_434;
          }
        }
        else if (!v249)
        {
          goto LABEL_434;
        }
        unint64_t v43 = (unint64_t)v1225;
        v1220 = v1225;
        if (v1225) {
          llvm::MetadataTracking::track((uint64_t)&v1220, v1225, 2);
        }
        v372 = (unsigned __int8 **)(v249 + 24);
        if (&v1220 != (unsigned __int8 **)(v249 + 24))
        {
          v373 = *v372;
          if (!*v372) {
            goto LABEL_486;
          }
          int v782 = *v373;
          if ((v782 - 4) > 0x1E)
          {
            if ((v782 - 3) >= 0xFFFFFFFE) {
              v884 = *v372;
            }
            else {
              v884 = 0;
            }
            if ((v782 - 3) < 0xFFFFFFFE)
            {
              uint64_t v40 = v1206;
              uint64_t v41 = a2 + 8;
              uint64_t v42 = v1210;
              if (v782 == 3) {
                *((void *)v373 + 1) = 0;
              }
              goto LABEL_486;
            }
            unint64_t v784 = (unint64_t)(v884 + 8);
          }
          else if ((v373[1] & 0x7F) != 2 && !*((_DWORD *)v373 + 3) {
                 || (uint64_t v783 = *((void *)v373 + 2), (v783 & 4) == 0)
          }
                 || (unint64_t v784 = v783 & 0xFFFFFFFFFFFFFFF8) == 0)
          {
LABEL_486:
            unint64_t v43 = (unint64_t)v1220;
            uint64_t *v372 = v1220;
            if (v43)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v1220, (unsigned __int8 *)v43, v249 + 24);
              v1220 = 0;
            }
LABEL_937:
            int v45 = 4;
            goto LABEL_1429;
          }
          v1234 = (char *)(v249 + 24);
          sub_1CC5FA668(v784 + 16, &v1234);
          uint64_t v40 = v1206;
          uint64_t v41 = a2 + 8;
          uint64_t v42 = v1210;
          goto LABEL_486;
        }
        if (!v1220) {
          goto LABEL_1820;
        }
        int v1076 = *v1220;
        if ((v1076 - 4) > 0x1E)
        {
          if ((v1076 - 3) >= 0xFFFFFFFE) {
            v1100 = v1220;
          }
          else {
            v1100 = 0;
          }
          if ((v1076 - 3) < 0xFFFFFFFE)
          {
            if (v1076 == 3) {
              *((void *)v1220 + 1) = 0;
            }
            goto LABEL_1820;
          }
          unint64_t v1101 = (unint64_t)(v1100 + 8);
        }
        else
        {
          if ((v1220[1] & 0x7F) != 2 && !*((_DWORD *)v1220 + 3))
          {
LABEL_1820:
            int v45 = 4;
LABEL_1821:
            uint64_t v40 = v1206;
            uint64_t v41 = a2 + 8;
            uint64_t v42 = v1210;
            goto LABEL_1429;
          }
          uint64_t v1148 = *((void *)v1220 + 2);
          int v45 = 4;
          if ((v1148 & 4) == 0) {
            goto LABEL_1821;
          }
          unint64_t v1101 = v1148 & 0xFFFFFFFFFFFFFFF8;
          if (!v1101) {
            goto LABEL_1821;
          }
        }
        v1234 = (char *)&v1220;
        sub_1CC5FA668(v1101 + 16, &v1234);
        int v45 = 4;
        uint64_t v40 = v1206;
        uint64_t v41 = a2 + 8;
        uint64_t v42 = v1210;
        goto LABEL_1429;
      case 34:
        if (v1244 <= 2) {
          goto LABEL_434;
        }
        unint64_t v309 = (*(_DWORD *)v1243 - 1);
        uint64_t v310 = *(void *)(a2 + 1344);
        if (v309 >= (*(void *)(a2 + 1352) - v310) >> 3) {
          uint64_t v311 = 0;
        }
        else {
          uint64_t v311 = *(void *)(v310 + 8 * v309);
        }
        uint64_t v480 = 2;
        LODWORD(v1213) = 2;
        v481 = v1243[1];
        if ((v481 & 0x20000) != 0)
        {
          uint64_t v480 = 3;
          LODWORD(v1213) = 3;
          int v482 = v1243[2] & 0x7E | (*((_DWORD *)v1243 + 4) >> 7) & 1 | -(v1243[2] & 1);
          if (!v482)
          {
            v486 = "Fast math flags indicator set for call with no FMF";
            goto LABEL_669;
          }
        }
        else
        {
          int v482 = 0;
        }
        if (((unsigned __int16)v481 & 0x8000) != 0)
        {
          LODWORD(v1213) = v480 + 1;
          v484 = v1243[v480];
          uint64_t v485 = sub_1CC1E22AC(a2, v484);
          if (!v485 || (v483 = (llvm::Type *)v485, *(unsigned char *)(v485 + 8) != 14))
          {
            v486 = "Explicit call type is not a function type";
            goto LABEL_669;
          }
        }
        else
        {
          v483 = 0;
          LODWORD(v484) = -1;
        }
        v1214[0] = 0;
        int v1218 = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1213, v1211[0], v1214, &v1218))
        {
LABEL_668:
          v486 = "Invalid record";
LABEL_669:
          v1234 = (char *)v486;
          v1238[0] = 259;
LABEL_670:
          int v487 = (int)v40;
          goto LABEL_954;
        }
        uint64_t v592 = (uint64_t)*v1214[0];
        if (!*v1214[0] || *(unsigned char *)(v592 + 8) != 15)
        {
          v486 = "Callee is not a pointer type";
          goto LABEL_669;
        }
        if (v483)
        {
          v593 = *(llvm::Type **)(v592 + 24);
          if (v593 && v593 != v483)
          {
            v486 = "Explicit call type does not match pointee type of callee operand";
            goto LABEL_669;
          }
        }
        else
        {
          uint64_t v777 = *(void *)(a2 + 544);
          uint64_t v778 = *(unsigned int *)(a2 + 560);
          if (v778)
          {
            unsigned int v779 = v778 - 1;
            v780 = (int *)(v777 + 32 * ((v778 - 1) & (37 * v1218)));
            int v781 = *v780;
            if (v1218 != *v780)
            {
              uint64_t v1118 = v311;
              int v1119 = 1;
              LODWORD(v1120) = v779 & (37 * v1218);
              do
              {
                LODWORD(v40) = v1206;
                uint64_t v41 = a2 + 8;
                uint64_t v311 = v1118;
                if (v781 == -1) {
                  goto LABEL_1899;
                }
                int v1121 = v1120 + v1119++;
                uint64_t v1120 = v1121 & v779;
                int v781 = *(_DWORD *)(v777 + 32 * v1120);
              }
              while (v1218 != v781);
              v780 = (int *)(v777 + 32 * v1120);
              LODWORD(v40) = v1206;
              uint64_t v41 = a2 + 8;
              uint64_t v311 = v1118;
            }
          }
          else
          {
LABEL_1899:
            v780 = (int *)(v777 + 32 * v778);
          }
          if ((int *)(v777 + 32 * v778) == v780 || !v780[4]) {
            LODWORD(v484) = -1;
          }
          else {
            LODWORD(v484) = **((_DWORD **)v780 + 1);
          }
          uint64_t v826 = sub_1CC1E22AC(a2, v484);
          if (!v826 || (v483 = (llvm::Type *)v826, *(unsigned char *)(v826 + 8) != 14))
          {
            v486 = "Callee is not of pointer to function type";
            goto LABEL_669;
          }
        }
        int v827 = v1244;
        uint64_t v828 = (*((_DWORD *)v483 + 3) - 1);
        int v829 = (int)v1213;
        if (v1244 < (int)v828 + (int)v1213)
        {
LABEL_1265:
          v1234 = "Insufficient operands to call";
          v1238[0] = 259;
          LODWORD(v40) = v1206;
          goto LABEL_670;
        }
        v1196 = v483;
        uint64_t v1178 = v311;
        v1234 = (char *)&v1236;
        uint64_t v1235 = 0x1000000000;
        v1231.n128_u64[0] = (unint64_t)v1232;
        v1231.n128_u64[1] = 0x1000000000;
        int v1171 = (int)v484;
        if (!v828) {
          goto LABEL_1459;
        }
        unint64_t v831 = 0;
        unint64_t v832 = 0;
        int v833 = 37 * v484;
        v834 = &v1236;
        int v1186 = 37 * v484;
        do
        {
          uint64_t v835 = *(void *)(a2 + 544);
          uint64_t v836 = *(unsigned int *)(a2 + 560);
          if (v836)
          {
            unsigned int v837 = v836 - 1;
            v838 = (int *)(v835 + 32 * ((v836 - 1) & v833));
            int v839 = *v838;
            if (v484 != *v838)
            {
              int v848 = 1;
              LODWORD(v849) = v837 & v833;
              do
              {
                LODWORD(v484) = v1171;
                int v833 = v1186;
                if (v839 == -1) {
                  goto LABEL_1300;
                }
                int v850 = v849 + v848++;
                uint64_t v849 = v850 & v837;
                int v839 = *(_DWORD *)(v835 + 32 * v849);
              }
              while (v1171 != v839);
              v838 = (int *)(v835 + 32 * v849);
              LODWORD(v484) = v1171;
              int v833 = v1186;
            }
          }
          else
          {
LABEL_1300:
            v838 = (int *)(v835 + 32 * v836);
          }
          ++v832;
          if ((int *)(v835 + 32 * v836) == v838 || v832 >= v838[4]) {
            int v840 = -1;
          }
          else {
            int v840 = *(_DWORD *)(*((void *)v838 + 1) + 4 * v832);
          }
          v841 = *(llvm::Type **)(*((void *)v1196 + 2) + 8 * v832);
          if (*((unsigned char *)v841 + 8) == 8)
          {
            unint64_t v842 = LODWORD(v1243[v829]);
            uint64_t v843 = *(void *)(a2 + 1392);
            if (v842 >= (*(void *)(a2 + 1400) - v843) >> 3) {
              v844 = 0;
            }
            else {
              v844 = *(llvm::Type ***)(v843 + 8 * v842);
            }
            if (v831 >= HIDWORD(v1235)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
          }
          else
          {
            if (v1244 == v829)
            {
              v844 = 0;
            }
            else
            {
              v845 = v1243[v829];
              if (*(unsigned char *)(a2 + 1640)) {
                uint64_t v846 = v1211[0] - v845;
              }
              else {
                uint64_t v846 = v845;
              }
              v847 = sub_1CC1E29E0(a2, v846, v841);
              int v833 = v1186;
              v844 = v847;
              unint64_t v831 = v1235;
            }
            if (v831 >= HIDWORD(v1235)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v834 = (uint64_t *)v1234;
          }
          v834[v831] = (uint64_t)v844;
          LODWORD(v1235) = v1235 + 1;
          if (v1231.n128_u32[2] >= (unint64_t)v1231.n128_u32[3]) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(v1231.n128_u64[0] + 4 * v1231.n128_u32[2]++) = v840;
          v834 = (uint64_t *)v1234;
          unint64_t v831 = v1235;
          if (!*(void *)&v1234[8 * v1235 - 8])
          {
            LODWORD(v1213) = v829;
            goto LABEL_1486;
          }
          ++v829;
        }
        while (v832 != v828);
        int v827 = v1244;
LABEL_1459:
        LODWORD(v1213) = v829;
        if (*((_DWORD *)v1196 + 2) < 0x100u)
        {
          if (v827 != v829) {
            goto LABEL_1486;
          }
        }
        else if (v827 != v829)
        {
          while (1)
          {
            v1217 = 0;
            int v1216 = 0;
            if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1213, v1211[0], &v1217, &v1216)) {
              break;
            }
            if (v1235 >= (unint64_t)HIDWORD(v1235)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)&v1234[8 * v1235] = v1217;
            LODWORD(v1235) = v1235 + 1;
            if (v1231.n128_u32[2] >= (unint64_t)v1231.n128_u32[3]) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(v1231.n128_u64[0] + 4 * v1231.n128_u32[2]++) = v1216;
            if (v1244 == v1213) {
              goto LABEL_1469;
            }
          }
LABEL_1486:
          uint64_t v1227 = (uint64_t)"Invalid record";
          __int16 v1230 = 259;
          sub_1CC1DDE58((int)v1206, v1209, (llvm::Twine *)&v1227);
        }
LABEL_1469:
        uint64_t v903 = v1222;
        uint64_t v1187 = v1222;
        if (v1222 != v1223)
        {
          llvm::UpgradeOperandBundles(&v1222);
          uint64_t v903 = v1223;
          uint64_t v1187 = v1222;
        }
        v1164 = (uint64_t *)v1234;
        v1166 = (uint64_t **)v1214[0];
        uint64_t v1168 = v1235;
        __int16 v1230 = 257;
        uint64_t v904 = (v903 - v1187) / 48;
        int v905 = 0;
        if (v903 != v1187)
        {
          uint64_t v1133 = 48 * v904;
          v1134 = (void *)(v1187 + 32);
          do
          {
            v905 += (*v1134 - *(v1134 - 1)) >> 3;
            v1134 += 6;
            v1133 -= 48;
          }
          while (v1133);
        }
        uint64_t v906 = (v905 + v1235 + 1);
        uint64_t v907 = (16 * v904);
        if (v907) {
          uint64_t v908 = (16 * v904) | 8u;
        }
        else {
          uint64_t v908 = 0;
        }
        v909 = (char *)operator new(v908 + 32 * v906 + 80);
        v910 = &v909[v908];
        uint64_t v911 = (uint64_t)&v909[32 * v906 + v908];
        *(_DWORD *)(v911 + 20) = v906 & 0x7FFFFFF | ((v907 != 0) << 31) | *(_DWORD *)(v911 + 20) & 0x38000000;
        if (v906)
        {
          do
          {
            *(void *)v910 = 0;
            *((void *)v910 + 1) = 0;
            *((void *)v910 + 2) = 0;
            *((void *)v910 + 3) = v911;
            v910 += 32;
          }
          while (v910 != (char *)v911);
        }
        uint64_t v912 = (uint64_t)&v909[32 * v906 + v908];
        if (v907) {
          *(void *)&v909[v907] = v907;
        }
        if (v903 == v1187)
        {
          int v913 = 0;
        }
        else
        {
          int v913 = 0;
          uint64_t v1135 = 48 * v904;
          v1136 = (void *)(v1187 + 32);
          do
          {
            v913 += (*v1136 - *(v1136 - 1)) >> 3;
            v1136 += 6;
            v1135 -= 48;
          }
          while (v1135);
        }
        *(void *)uint64_t v912 = **((void **)v1196 + 2);
        *(void *)(v912 + 8) = 0;
        int v914 = *(_DWORD *)(v912 + 20) & 0xC0000000 | (v913 + v1168 + 1) & 0x7FFFFFF;
        *(_DWORD *)(v912 + 16) = 84;
        *(_DWORD *)(v912 + 20) = v914;
        *(_OWORD *)(v912 + 24) = 0u;
        *(_OWORD *)(v912 + 40) = 0u;
        *(_DWORD *)(v912 + 56) = 0;
        *(void *)(v912 + 64) = 0;
        llvm::CallInst::init((uint64_t ***)&v909[32 * v906 + v908], (uint64_t **)v1196, v1166, v1164, v1168, v1187, v904, (const char **)&v1227);
        uint64_t v915 = *(void *)(a2 + 544);
        uint64_t v916 = *(unsigned int *)(a2 + 560);
        if (v916)
        {
          unsigned int v917 = v916 - 1;
          v918 = (int *)(v915 + 32 * ((v916 - 1) & (37 * v1171)));
          int v919 = *v918;
          if (v1171 != *v918)
          {
            int v1137 = 1;
            LODWORD(v1138) = v917 & (37 * v1171);
            do
            {
              if (v919 == -1) {
                goto LABEL_1929;
              }
              int v1139 = v1138 + v1137++;
              uint64_t v1138 = v1139 & v917;
              int v919 = *(_DWORD *)(v915 + 32 * v1138);
            }
            while (v1171 != v919);
            v918 = (int *)(v915 + 32 * v1138);
          }
        }
        else
        {
LABEL_1929:
          v918 = (int *)(v915 + 32 * v916);
        }
        if ((int *)(v915 + 32 * v916) == v918 || !v918[4]) {
          unsigned int v920 = -1;
        }
        else {
          unsigned int v920 = **((_DWORD **)v918 + 1);
        }
        unsigned int __src = v920;
        uint64_t v927 = v1222;
        for (uint64_t k = v1223; k != v927; uint64_t k = sub_1CD4AF9B4(k - 48))
          ;
        uint64_t v1223 = v927;
        unint64_t v928 = *(unsigned int *)(a2 + 752);
        if (v928 >= *(unsigned int *)(a2 + 756)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a2 + 744) + 8 * v928) = v912;
        ++*(_DWORD *)(a2 + 752);
        __int16 v929 = v481 & 1;
        if (((unsigned __int16)v481 & 0x4000) != 0) {
          __int16 v929 = 2;
        }
        if ((v481 & 0x10000) != 0) {
          __int16 v929 = 3;
        }
        *(_WORD *)(v912 + 18) = v929 & 0xF003 | (4 * ((v481 >> 1) & 0x3FF)) | *(_WORD *)(v912 + 18) & 0xF000;
        *(void *)(v912 + 64) = v1178;
        sub_1CC1E2A50(v1206, a2, v912, v1231.n128_i64[0]);
        if (*v1206)
        {
          llvm::Value::deleteValue((void (**)(void))v912, (llvm::Value *)v43);
          int v45 = 1;
        }
        else
        {
          if (v482)
          {
            if (!sub_1CB845E74(v912))
            {
              uint64_t v1227 = (uint64_t)"Fast-math-flags specified for call without floating-point scalar or vector return type";
              __int16 v1230 = 259;
              sub_1CC1DDE58((int)v1206, v1209, (llvm::Twine *)&v1227);
            }
            *(unsigned char *)(v912 + 17) |= 2 * (_BYTE)v482;
          }
          int v45 = 9;
        }
        if ((void *)v1231.n128_u64[0] != v1232) {
          free((void *)v1231.n128_u64[0]);
        }
        if (v1234 != (char *)&v1236) {
          free(v1234);
        }
        uint64_t v40 = v1206;
        uint64_t v41 = a2 + 8;
        uint64_t v42 = v1210;
        uint64_t v155 = (uint64_t ***)v912;
        goto LABEL_1422;
      case 35:
        if (!v1207 || (uint64_t v142 = *(void *)(v1207 + 40), v142 == v1207 + 40))
        {
          if (!v1205) {
            goto LABEL_434;
          }
          uint64_t v328 = *(void *)&(*v1202)[8 * (v1205 - 1)];
          if (!v328) {
            goto LABEL_434;
          }
          uint64_t v142 = *(void *)(v328 + 40);
          if (v142 == v328 + 40 || v142 == 0) {
            goto LABEL_434;
          }
        }
        else if (!v142)
        {
          goto LABEL_434;
        }
        if (v1244 <= 3)
        {
LABEL_434:
          uint64_t v94 = "Invalid record";
          goto LABEL_1426;
        }
        int v330 = v1244 == 5 && v1243[4] != 0;
        unsigned int v649 = *(_DWORD *)v1243;
        unsigned int v650 = *((_DWORD *)v1243 + 2);
        int v651 = *((_DWORD *)v1243 + 4);
        int v652 = *((_DWORD *)v1243 + 6);
        if (v651)
        {
          v653 = sub_1CC1F263C(*(void *)(a2 + 680), (v651 - 1));
          if (!v653) {
            goto LABEL_980;
          }
          uint64_t v654 = (uint64_t)v653;
          if (*v653 - 4 >= 0x1F) {
            goto LABEL_980;
          }
        }
        else
        {
          uint64_t v654 = 0;
        }
        if (v652)
        {
          v661 = sub_1CC1F263C(*(void *)(a2 + 680), (v652 - 1));
          if (!v661 || (uint64_t v662 = (uint64_t)v661, *v661 - 4 >= 0x1F))
          {
LABEL_980:
            v1234 = "Invalid record";
            v1238[0] = 259;
LABEL_981:
            int v639 = (int)v40;
            uint64_t v41 = a2 + 8;
LABEL_982:
            sub_1CC1DDE58(v639, v41, (llvm::Twine *)&v1234);
          }
        }
        else
        {
          uint64_t v662 = 0;
        }
        if (v654)
        {
          uint64_t v697 = *(void *)(v654 + 16);
          v698 = (void *)(v697 & 0xFFFFFFFFFFFFFFF8);
          if ((v697 & 4) != 0) {
            v698 = (void *)*v698;
          }
          Impl = (unsigned __int8 *)llvm::DILocation::getImpl(v698, v649, v650, v654, v662, v330, 0, 1);
          v1231.n128_u64[0] = (unint64_t)Impl;
          if (Impl) {
            llvm::MetadataTracking::track((uint64_t)&v1231, Impl, 2);
          }
          uint64_t v41 = a2 + 8;
          uint64_t v42 = v1210;
          if (!v1225)
          {
LABEL_1033:
            v700 = (unsigned __int8 *)v1231.n128_u64[0];
            v1225 = (unsigned __int8 *)v1231.n128_u64[0];
            if (!v1231.n128_u64[0]) {
              goto LABEL_1120;
            }
            goto LABEL_1034;
          }
          int v930 = *v1225;
          if ((v930 - 4) > 0x1E)
          {
            if ((v930 - 3) >= 0xFFFFFFFE) {
              v1007 = v1225;
            }
            else {
              v1007 = 0;
            }
            if ((v930 - 3) < 0xFFFFFFFE)
            {
              uint64_t v40 = v1206;
              uint64_t v41 = a2 + 8;
              uint64_t v42 = v1210;
              if (v930 == 3) {
                *((void *)v1225 + 1) = 0;
              }
              goto LABEL_1033;
            }
            unint64_t v932 = (unint64_t)(v1007 + 8);
          }
          else
          {
            uint64_t v40 = v1206;
            uint64_t v41 = a2 + 8;
            uint64_t v42 = v1210;
            if ((v1225[1] & 0x7F) != 2 && !*((_DWORD *)v1225 + 3)) {
              goto LABEL_1033;
            }
            uint64_t v931 = *((void *)v1225 + 2);
            if ((v931 & 4) == 0) {
              goto LABEL_1033;
            }
            unint64_t v932 = v931 & 0xFFFFFFFFFFFFFFF8;
            if (!v932) {
              goto LABEL_1033;
            }
          }
          v1234 = (char *)&v1225;
          sub_1CC5FA668(v932 + 16, &v1234);
          uint64_t v40 = v1206;
          uint64_t v41 = a2 + 8;
          uint64_t v42 = v1210;
          goto LABEL_1033;
        }
        v1231.n128_u64[0] = 0;
        if (!v1225)
        {
          v1225 = 0;
          uint64_t v41 = a2 + 8;
          uint64_t v42 = v1210;
          goto LABEL_1120;
        }
        int v946 = *v1225;
        if ((v946 - 4) > 0x1E)
        {
          if ((v946 - 3) >= 0xFFFFFFFE) {
            v1031 = v1225;
          }
          else {
            v1031 = 0;
          }
          if ((v946 - 3) > 0xFFFFFFFD)
          {
            unint64_t v1032 = (unint64_t)(v1031 + 8);
            goto LABEL_1695;
          }
          if (v946 == 3) {
            *((void *)v1225 + 1) = 0;
          }
        }
        else if ((v1225[1] & 0x7F) == 2 || *((_DWORD *)v1225 + 3))
        {
          uint64_t v1066 = *((void *)v1225 + 2);
          if ((v1066 & 4) != 0)
          {
            unint64_t v1032 = v1066 & 0xFFFFFFFFFFFFFFF8;
            if (v1032)
            {
LABEL_1695:
              v1234 = (char *)&v1225;
              sub_1CC5FA668(v1032 + 16, &v1234);
              v700 = (unsigned __int8 *)v1231.n128_u64[0];
              v1225 = (unsigned __int8 *)v1231.n128_u64[0];
              uint64_t v40 = v1206;
              uint64_t v41 = a2 + 8;
              uint64_t v42 = v1210;
              if (v1231.n128_u64[0]) {
LABEL_1034:
              }
                llvm::MetadataTracking::retrack((uint64_t)&v1231, v700, (uint64_t)&v1225);
LABEL_1120:
              unint64_t v43 = (unint64_t)v1225;
              v1219 = v1225;
              if (v1225) {
                llvm::MetadataTracking::track((uint64_t)&v1219, v1225, 2);
              }
              v753 = (unsigned __int8 **)(v142 + 24);
              if (&v1219 != (unsigned __int8 **)(v142 + 24))
              {
                v754 = *v753;
                if (!*v753) {
                  goto LABEL_1124;
                }
                int v899 = *v754;
                if ((v899 - 4) > 0x1E)
                {
                  if ((v899 - 3) >= 0xFFFFFFFE) {
                    v985 = *v753;
                  }
                  else {
                    v985 = 0;
                  }
                  if ((v899 - 3) < 0xFFFFFFFE)
                  {
                    uint64_t v40 = v1206;
                    uint64_t v41 = a2 + 8;
                    uint64_t v42 = v1210;
                    if (v899 == 3) {
                      *((void *)v754 + 1) = 0;
                    }
                    goto LABEL_1124;
                  }
                  unint64_t v901 = (unint64_t)(v985 + 8);
                }
                else
                {
                  uint64_t v40 = v1206;
                  uint64_t v41 = a2 + 8;
                  uint64_t v42 = v1210;
                  if ((v754[1] & 0x7F) != 2 && !*((_DWORD *)v754 + 3)
                    || (uint64_t v900 = *((void *)v754 + 2), (v900 & 4) == 0)
                    || (unint64_t v901 = v900 & 0xFFFFFFFFFFFFFFF8) == 0)
                  {
LABEL_1124:
                    unint64_t v43 = (unint64_t)v1219;
                    *v753 = v1219;
                    if (v43)
                    {
                      llvm::MetadataTracking::retrack((uint64_t)&v1219, (unsigned __int8 *)v43, v142 + 24);
                      v1219 = 0;
                    }
                    goto LABEL_937;
                  }
                }
                v1234 = (char *)(v142 + 24);
                sub_1CC5FA668(v901 + 16, &v1234);
                uint64_t v40 = v1206;
                uint64_t v41 = a2 + 8;
                uint64_t v42 = v1210;
                goto LABEL_1124;
              }
              if (!v1219) {
                goto LABEL_1861;
              }
              int v1099 = *v1219;
              if ((v1099 - 4) > 0x1E)
              {
                if ((v1099 - 3) >= 0xFFFFFFFE) {
                  v1125 = v1219;
                }
                else {
                  v1125 = 0;
                }
                if ((v1099 - 3) < 0xFFFFFFFE)
                {
                  if (v1099 == 3) {
                    *((void *)v1219 + 1) = 0;
                  }
                  goto LABEL_1861;
                }
                unint64_t v1126 = (unint64_t)(v1125 + 8);
              }
              else
              {
                if ((v1219[1] & 0x7F) != 2 && !*((_DWORD *)v1219 + 3))
                {
LABEL_1861:
                  int v45 = 4;
LABEL_1862:
                  uint64_t v40 = v1206;
                  uint64_t v41 = a2 + 8;
                  uint64_t v42 = v1210;
                  goto LABEL_1429;
                }
                uint64_t v1149 = *((void *)v1219 + 2);
                int v45 = 4;
                if ((v1149 & 4) == 0) {
                  goto LABEL_1862;
                }
                unint64_t v1126 = v1149 & 0xFFFFFFFFFFFFFFF8;
                if (!v1126) {
                  goto LABEL_1862;
                }
              }
              v1234 = (char *)&v1219;
              sub_1CC5FA668(v1126 + 16, &v1234);
              int v45 = 4;
              uint64_t v40 = v1206;
              uint64_t v41 = a2 + 8;
              uint64_t v42 = v1210;
              goto LABEL_1429;
            }
          }
        }
        v1225 = 0;
        uint64_t v40 = v1206;
        uint64_t v41 = a2 + 8;
        uint64_t v42 = v1210;
        goto LABEL_1120;
      case 36:
        if (v1244 != 2) {
          goto LABEL_434;
        }
        __int16 v164 = 4;
        switch(*(_DWORD *)v1243)
        {
          case 0:
          case 1:
          case 2:
            goto LABEL_434;
          case 3:
            goto LABEL_962;
          case 4:
            __int16 v164 = 5;
            goto LABEL_962;
          case 5:
            __int16 v164 = 6;
            goto LABEL_962;
          default:
            __int16 v164 = 7;
LABEL_962:
            unint64_t v657 = v1243[1];
            if (((unint64_t)v1243[1] & 0xFFFFFFFE) != 0)
            {
              if (*(void *)(a2 + 1736) <= v657) {
                LOBYTE(v657) = 1;
              }
              else {
                LOBYTE(v657) = *(unsigned char *)(*(void *)(a2 + 1728) + v657);
              }
            }
            uint64_t v155 = (uint64_t ***)operator new(0x40uLL);
            *((_DWORD *)v155 + 5) &= 0x38000000u;
            *uint64_t v155 = (uint64_t **)(**(void **)(a2 + 424) + 1576);
            v155[1] = 0;
            *((unsigned char *)v155 + 16) = 63;
            *(_OWORD *)((char *)v155 + 17) = 0u;
            *(_OWORD *)((char *)v155 + 33) = 0u;
            *(_OWORD *)((char *)v155 + 44) = 0u;
            *((_WORD *)v155 + 9) = v164;
            *((unsigned char *)v155 + 60) = v657;
            break;
        }
        goto LABEL_479;
      case 37:
        unsigned int v143 = v1244;
        LODWORD(v1227) = 0;
        v1231.n128_u64[0] = 0;
        LODWORD(v1214[0]) = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1227, v1211[0], (llvm::Type ***)&v1231, v1214)) {
          goto LABEL_532;
        }
        uint64_t v144 = (uint64_t *)v1231.n128_u64[0];
        if (*(unsigned char *)(*(void *)v1231.n128_u64[0] + 8) != 15)
        {
          std::string::size_type v285 = "Cmpxchg operand is not a pointer type";
          goto LABEL_939;
        }
        uint64_t v145 = *(void *)(a2 + 544);
        uint64_t v146 = *(unsigned int *)(a2 + 560);
        if (v146)
        {
          unsigned int v147 = v146 - 1;
          __int16 v148 = (int *)(v145 + 32 * ((v146 - 1) & (37 * LODWORD(v1214[0]))));
          int v149 = *v148;
          if (LODWORD(v1214[0]) != *v148)
          {
            int v1083 = 1;
            LODWORD(v1084) = v147 & (37 * LODWORD(v1214[0]));
            do
            {
              LODWORD(v40) = v1206;
              if (v149 == -1) {
                goto LABEL_1836;
              }
              int v1085 = v1084 + v1083++;
              uint64_t v1084 = v1085 & v147;
              int v149 = *(_DWORD *)(v145 + 32 * v1084);
            }
            while (LODWORD(v1214[0]) != v149);
            __int16 v148 = (int *)(v145 + 32 * v1084);
            LODWORD(v40) = v1206;
          }
        }
        else
        {
LABEL_1836:
          __int16 v148 = (int *)(v145 + 32 * v146);
        }
        if ((int *)(v145 + 32 * v146) == v148 || !v148[4]) {
          unsigned int v150 = -1;
        }
        else {
          unsigned int v150 = **((_DWORD **)v148 + 1);
        }
        v536 = (llvm::Type *)sub_1CC1E22AC(a2, v150);
        int v537 = v1227;
        if (v1244 == v1227) {
          goto LABEL_951;
        }
        v538 = v1243[v1227];
        uint64_t v539 = *(unsigned char *)(a2 + 1640) ? v1211[0] - v538 : v538;
        v540 = sub_1CC1E29E0(a2, v539, v536);
        if (!v540) {
          goto LABEL_951;
        }
        if (v1244 == v537 + 1) {
          goto LABEL_855;
        }
        v541 = (uint64_t *)v540;
        v542 = v1243[v537 + 1];
        uint64_t v543 = *(unsigned char *)(a2 + 1640) ? v1211[0] - v542 : v542;
        v544 = sub_1CC1E29E0(a2, v543, *v540);
        if (!v544) {
          goto LABEL_855;
        }
        LODWORD(v1227) = v537 + 2;
        if (v143 < v537 + 5 || v143 > v537 + 7) {
          goto LABEL_855;
        }
        uint64_t v1184 = (uint64_t)v544;
        v545 = v1243[v537 + 3];
        switch((int)v545)
        {
          case 0:
          case 1:
            goto LABEL_1602;
          case 2:
            goto LABEL_1576;
          case 3:
            LODWORD(v545) = 4;
            goto LABEL_1576;
          case 4:
            LODWORD(v545) = 5;
            goto LABEL_1576;
          case 5:
            LODWORD(v545) = 6;
            goto LABEL_1576;
          default:
            LODWORD(v545) = 7;
LABEL_1576:
            int v1180 = (int)v545;
            unint64_t v1198 = v1243[v537 + 4];
            if (((unint64_t)v1243[v537 + 4] & 0xFFFFFFFE) != 0)
            {
              if (*(void *)(a2 + 1736) <= v1198) {
                LOBYTE(v1198) = 1;
              }
              else {
                LOBYTE(v1198) = *(unsigned char *)(*(void *)(a2 + 1728) + v1198);
              }
            }
            sub_1CC1E2F4C(v1206, a2, *v541, *v144);
            if (*v1206) {
              goto LABEL_1581;
            }
            if (v143 > 6)
            {
              v984 = v1243[v537 + 5];
              LOWORD(v964) = (_WORD)v984;
              switch((int)v984)
              {
                case 0:
                case 1:
                  goto LABEL_1602;
                case 2:
                  goto LABEL_1585;
                case 3:
                  LOWORD(v964) = 4;
                  goto LABEL_1585;
                case 4:
                  LOWORD(v964) = 5;
                  goto LABEL_1585;
                case 5:
                  LOWORD(v964) = 6;
                  goto LABEL_1585;
                default:
                  LOWORD(v964) = 7;
                  goto LABEL_1585;
              }
            }
            int v964 = dword_1CFAC6368[v1180 - 2];
LABEL_1585:
            uint64_t v966 = sub_1CB83544C(*(void *)(a2 + 432) + 272, *v541);
            if (v965 == 1) {
            char v967 = __clz((unint64_t)(v966 + 7) >> 3);
            }
            v968 = (char *)operator new(0xA0uLL);
            uint64_t v969 = 0;
            uint64_t v970 = (uint64_t)(v968 + 96);
            *((_DWORD *)v968 + 29) = *((_DWORD *)v968 + 29) & 0x38000000 | 3;
            do
            {
              v971 = &v968[v969];
              *(void *)v971 = 0;
              *((void *)v971 + 1) = 0;
              *((void *)v971 + 2) = 0;
              *((void *)v971 + 3) = v970;
              v969 += 32;
            }
            while (v969 != 96);
            v1172 = (llvm::Value *)(v968 + 96);
            llvm::AtomicCmpXchgInst::AtomicCmpXchgInst(v970, (uint64_t)v144, (uint64_t ***)v541, v1184, 63 - v967, v1180, v964, v1198, 0);
            v972 = v1243;
            __int16 v973 = *((_WORD *)v968 + 57) & 0xFFFE | (v1243[v537 + 2] != 0);
            *((_WORD *)v968 + 57) = v973;
            if (v143 > 7)
            {
              *((_WORD *)v968 + 57) = v973 & 0xFFFD | (2 * (v972[v537 + 6] != 0));
              unsigned int v989 = sub_1CC1E23EC(a2, **(void **)(a2 + 424) + 1888, 0, 0);
              uint64_t v990 = *((void *)v968 + 12);
              v1234 = (char *)__PAIR64__(v989, v150);
              unsigned int __src = sub_1CC1E23EC(a2, v990, (char *)&v1234, 2);
              goto LABEL_1618;
            }
            *((void *)v968 + 17) = v1207;
            *(_WORD *)(v1207 + 18) &= ~0x8000u;
            if ((v968[119] & 0x10) != 0)
            {
              uint64_t v1060 = *(void *)(v1207 + 56);
              if (v1060)
              {
                v1061 = *(llvm::ValueSymbolTable **)(v1060 + 104);
                if (v1061) {
                  llvm::ValueSymbolTable::reinsertValue(v1061, v1172);
                }
              }
            }
            uint64_t v974 = *(void *)(v1207 + 40);
            *((void *)v968 + 15) = v974;
            *((void *)v968 + 16) = v1207 + 40;
            *(void *)(v974 + 8) = v968 + 120;
            *(void *)(v1207 + 40) = v968 + 120;
            LODWORD(v1217) = 0;
            v1238[0] = 257;
            v975 = (char *)operator new(0x80uLL);
            v976 = (llvm::Value *)(v975 + 32);
            *((_DWORD *)v975 + 13) = *((_DWORD *)v975 + 13) & 0x38000000 | 1;
            *(void *)v975 = 0;
            *((void *)v975 + 1) = 0;
            *((void *)v975 + 2) = 0;
            *((void *)v975 + 3) = v975 + 32;
            uint64_t v977 = *((void *)v968 + 12);
            int v978 = *(unsigned __int8 *)(v977 + 8);
            if (v977 && v978 == 17)
            {
              if (*(void *)(v977 + 32) > (unint64_t)v1217)
              {
                v980 = (uint64_t *)(v977 + 24);
                goto LABEL_1597;
              }
            }
            else
            {
              uint64_t v979 = 0;
              if (!v977 || v978 != 16)
              {
LABEL_1598:
                *((void *)v975 + 4) = v979;
                *((void *)v975 + 5) = 0;
                *((void *)v975 + 6) = 0x10000005CLL;
                *(_OWORD *)(v975 + 56) = 0u;
                *(_OWORD *)(v975 + 72) = 0u;
                *((_DWORD *)v975 + 22) = 0;
                uint64_t v983 = *((void *)v968 + 13);
                v982 = v968 + 104;
                uint64_t v981 = v983;
                *(void *)v975 = v1172;
                *((void *)v975 + 1) = v983;
                if (v983) {
                  *(void *)(v981 + 16) = v975 + 8;
                }
                *((void *)v975 + 2) = v982;
                void *v982 = v975;
                *((void *)v975 + 12) = v975 + 112;
                *((void *)v975 + 13) = 0x400000000;
                llvm::ExtractValueInst::init((llvm::Value *)(v975 + 32), &v1217, 1, (const char **)&v1234);
                unsigned int __src = v150;
                v1172 = v976;
LABEL_1618:
                unint64_t v924 = *(unsigned int *)(a2 + 752);
                if (v924 >= *(unsigned int *)(a2 + 756)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v925 = *v1204;
                uint64_t v155 = (uint64_t ***)v1172;
LABEL_1493:
                *(void *)(v925 + 8 * v924) = v155;
                goto LABEL_1494;
              }
              if (v1217 < *(_DWORD *)(v977 + 12))
              {
                v980 = (uint64_t *)(*(void *)(v977 + 16) + 8 * v1217);
LABEL_1597:
                uint64_t v979 = *v980;
                goto LABEL_1598;
              }
            }
            uint64_t v979 = 0;
            goto LABEL_1598;
        }
      case 38:
      case 59:
        int v52 = v1244;
        LODWORD(v1214[0]) = 0;
        v1231.n128_u64[0] = 0;
        LODWORD(v1217) = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, v1214, v1211[0], (llvm::Type ***)&v1231, &v1217))
        {
          v1234 = "Invalid record";
          v1238[0] = 259;
          int v53 = (int)v40;
          goto LABEL_858;
        }
        uint64_t v79 = v1231.n128_u64[0];
        if (*(unsigned char *)(*(void *)v1231.n128_u64[0] + 8) != 15) {
          goto LABEL_857;
        }
        uint64_t v1227 = 0;
        LODWORD(v1213) = -1;
        if (v47 == 38)
        {
          uint64_t v80 = *(void *)(a2 + 544);
          uint64_t v81 = *(unsigned int *)(a2 + 560);
          unsigned int v82 = v1211[0];
          if (v81)
          {
            unsigned int v83 = v81 - 1;
            uint64_t v84 = (int *)(v80 + 32 * ((v81 - 1) & (37 * v1217)));
            int v85 = *v84;
            if (v1217 != *v84)
            {
              int v1080 = 1;
              LODWORD(v1081) = v83 & (37 * v1217);
              do
              {
                LODWORD(v40) = v1206;
                unsigned int v82 = v1211[0];
                if (v85 == -1) {
                  goto LABEL_1831;
                }
                int v1082 = v1081 + v1080++;
                uint64_t v1081 = v1082 & v83;
                int v85 = *(_DWORD *)(v80 + 32 * v1081);
              }
              while (v1217 != v85);
              uint64_t v84 = (int *)(v80 + 32 * v1081);
              LODWORD(v40) = v1206;
              unsigned int v82 = v1211[0];
            }
          }
          else
          {
LABEL_1831:
            uint64_t v84 = (int *)(v80 + 32 * v81);
          }
          if ((int *)(v80 + 32 * v81) == v84 || !v84[4]) {
            unsigned int v86 = -1;
          }
          else {
            unsigned int v86 = **((_DWORD **)v84 + 1);
          }
          LODWORD(v1213) = v86;
          v532 = (llvm::Type *)sub_1CC1E22AC(a2, v86);
          int v533 = (int)v1214[0];
          if (v1244 == LODWORD(v1214[0]))
          {
            uint64_t v1227 = 0;
            goto LABEL_857;
          }
          v594 = v1243[LODWORD(v1214[0])];
          if (*(unsigned char *)(a2 + 1640)) {
            uint64_t v595 = v82 - v594;
          }
          else {
            uint64_t v595 = v594;
          }
          uint64_t v1227 = (uint64_t)sub_1CC1E29E0(a2, v595, v532);
          if (!v1227) {
            goto LABEL_857;
          }
          int v384 = v533 + 1;
          LODWORD(v1214[0]) = v533 + 1;
        }
        else
        {
          if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, v1214, v1211[0], (llvm::Type ***)&v1227, &v1213))
          {
LABEL_857:
            v1234 = "Invalid record";
            v1238[0] = 259;
            int v53 = (int)v40;
            uint64_t v41 = a2 + 8;
LABEL_858:
            sub_1CC1DDE58(v53, v41, (llvm::Twine *)&v1234);
          }
          int v384 = (int)v1214[0];
        }
        int v596 = v384 + 4;
        int v597 = v384 + 5;
        if (v52 == v384 + 4 || v52 == v597)
        {
          v598 = v1243[v384];
          if (v598 < 0xD)
          {
            v599 = v1243[v384 + 1];
            v600 = v1243[v384 + 2];
            switch((int)v600)
            {
              case 0:
              case 1:
                goto LABEL_855;
              case 2:
                goto LABEL_1351;
              case 3:
                LOWORD(v600) = 4;
                goto LABEL_1351;
              case 4:
                LOWORD(v600) = 5;
                goto LABEL_1351;
              case 5:
                LOWORD(v600) = 6;
                goto LABEL_1351;
              default:
                LOWORD(v600) = 7;
LABEL_1351:
                v873 = v1243[v384 + 3];
                char v874 = (char)v873;
                if ((v873 & 0xFFFFFFFE) != 0)
                {
                  if (*(void *)(a2 + 1736) <= (unint64_t)v873) {
                    char v874 = 1;
                  }
                  else {
                    char v874 = *(unsigned char *)(*(void *)(a2 + 1728) + v873);
                  }
                }
                if (v52 != v597) {
                  goto LABEL_1360;
                }
                v875 = v1243[v596];
                if ((unint64_t)v875 >= 0x22)
                {
                  v1234 = "Invalid alignment value";
                  v1238[0] = 259;
                  sub_1CC1DDE58((int)v1206, v1209, (llvm::Twine *)&v1234);
                }
                *v1206 = 0;
                if (v875)
                {
                  LOBYTE(v876) = (_BYTE)v875 - 1;
                  v877 = (llvm::Type **)v1227;
                }
                else
                {
LABEL_1360:
                  v877 = (llvm::Type **)v1227;
                  uint64_t v879 = sub_1CB83544C(*(void *)(a2 + 432) + 272, *(void *)v1227);
                  if (v878 == 1) {
                  unint64_t v876 = 63 - __clz((unint64_t)(v879 + 7) >> 3);
                  }
                }
                v880 = (char *)operator new(0x80uLL);
                *((_DWORD *)v880 + 21) = *((_DWORD *)v880 + 21) & 0x38000000 | 2;
                *((void *)v880 + 1) = 0;
                *((void *)v880 + 2) = 0;
                *(void *)v880 = 0;
                *((void *)v880 + 5) = 0;
                *((void *)v880 + 6) = 0;
                *((void *)v880 + 4) = 0;
                v881 = *v877;
                *((_DWORD *)v880 + 21) = 2;
                *((void *)v880 + 8) = v881;
                v880 += 64;
                *((void *)v880 - 5) = v880;
                *((void *)v880 - 1) = v880;
                *((void *)v880 + 1) = 0;
                v880[16] = 65;
                v880[17] = 0;
                *((_WORD *)v880 + 9) = 0;
                *((_DWORD *)v880 + 14) = 0;
                *(_OWORD *)(v880 + 40) = 0u;
                *(_OWORD *)(v880 + 24) = 0u;
                char v882 = v874;
                uint64_t v155 = (uint64_t ***)v880;
                llvm::AtomicRMWInst::Init((uint64_t)v880, (__int16)v598, v79, (uint64_t)v877, v876, (__int16)v600, v882);
                unsigned int __src = v1213;
                *((_WORD *)v155 + 9) = *((_WORD *)v155 + 9) & 0xFFFE | (v599 != 0);
                unint64_t v182 = *(unsigned int *)(a2 + 752);
                if (v182 >= *(unsigned int *)(a2 + 756)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v40 = v1206;
                uint64_t v41 = a2 + 8;
                uint64_t v42 = v1210;
                break;
            }
LABEL_1365:
            *(void *)(*v1204 + 8 * v182) = v155;
            ++*v1203;
LABEL_1366:
            int v45 = 9;
            goto LABEL_1422;
          }
        }
        goto LABEL_857;
      case 39:
        LODWORD(v1227) = 0;
        v1231.n128_u64[0] = 0;
        LODWORD(v1214[0]) = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1227, v1211[0], (llvm::Type ***)&v1231, v1214)) {
          goto LABEL_532;
        }
        unsigned int v173 = (llvm::Value *)v1231.n128_u64[0];
        v174 = (char *)operator new(0x60uLL);
        *((_DWORD *)v174 + 13) = *((_DWORD *)v174 + 13) & 0x38000000 | 1;
        uint64_t v155 = (uint64_t ***)(v174 + 32);
        *(void *)v174 = 0;
        *((void *)v174 + 1) = 0;
        *((void *)v174 + 2) = 0;
        *((void *)v174 + 3) = v174 + 32;
        llvm::ResumeInst::ResumeInst((llvm::ResumeInst *)(v174 + 32), v173, 0);
        goto LABEL_958;
      case 40:
      case 47:
        if (v1239 == 47)
        {
          if (v1244 <= 2) {
            goto LABEL_532;
          }
        }
        else if (v1244 <= 3)
        {
          goto LABEL_532;
        }
        LODWORD(v1227) = 1;
        unsigned int __src = *(_DWORD *)v1243;
        uint64_t v87 = sub_1CC1E22AC(a2, __src);
        if (!v87) {
          goto LABEL_532;
        }
        uint64_t v89 = (llvm::LandingPadInst *)v87;
        if (v47 == 40)
        {
          v1231.n128_u64[0] = 0;
          LODWORD(v1214[0]) = 0;
          unsigned int v90 = v1211[0];
          if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1227, v1211[0], (llvm::Type ***)&v1231, v1214)) {
            goto LABEL_532;
          }
          uint64_t v91 = v1226;
          if ((*((_WORD *)v1226 + 9) & 8) != 0)
          {
            int v92 = *((_DWORD *)v1226 + 5);
            if ((v92 & 0x40000000) != 0) {
              uint64_t v93 = (void *)*((void *)v1226 - 1);
            }
            else {
              uint64_t v93 = (void *)((char *)v1226 - 32 * (v92 & 0x7FFFFFF));
            }
            uint64_t v41 = a2 + 8;
            if (*v93 != v1231.n128_u64[0])
            {
              v141 = "Personality function mismatch";
              goto LABEL_533;
            }
          }
          else
          {
            __int16 v815 = v1231.n128_u64[0] != 0;
            sub_1CD5C0280(v1226, v1231.n128_i64[0]);
            *((_WORD *)v91 + 9) = *((_WORD *)v91 + 9) & 0xFFF7 | (8 * v815);
          }
          int v721 = v1227;
        }
        else
        {
          int v721 = 1;
          unsigned int v90 = v1211[0];
        }
        __int16 v816 = v1243[v721] != 0;
        LODWORD(v1227) = v721 + 2;
        v817 = (llvm::Type *)v1243[v721 + 1];
        v1238[0] = 257;
        uint64_t v155 = (uint64_t ***)llvm::LandingPadInst::Create(v89, v817, (const char **)&v1234, 0, v88);
        *((_WORD *)v155 + 9) = *((_WORD *)v155 + 9) & 0xFFFE | v816;
        if (!v817)
        {
LABEL_246:
          unint64_t v182 = *(unsigned int *)(a2 + 752);
          if (v182 >= *(unsigned int *)(a2 + 756)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v41 = a2 + 8;
          goto LABEL_1365;
        }
        while (1)
        {
          LODWORD(v1227) = v1227 + 1;
          v1231.n128_u64[0] = 0;
          LODWORD(v1214[0]) = 0;
          if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1227, v90, (llvm::Type ***)&v1231, v1214)) {
            break;
          }
          llvm::LandingPadInst::addClause((llvm::LandingPadInst *)v155, (llvm::Constant *)v1231.n128_u64[0]);
          LODWORD(v817) = v817 - 1;
          if (!v817) {
            goto LABEL_246;
          }
        }
        if (!v155) {
          goto LABEL_1258;
        }
        if ((*((unsigned char *)v155 + 23) & 8) != 0)
        {
          v1064 = llvm::UndefValue::get((llvm::UndefValue *)*v155, v818);
          llvm::ValueAsMetadata::handleRAUW((uint64_t *)v155, v1064, v1065);
        }
        v819 = v155[6];
        if (!v819) {
          goto LABEL_1248;
        }
        int v1008 = *(unsigned __int8 *)v819;
        if ((v1008 - 4) > 0x1E)
        {
          if ((v1008 - 3) >= 0xFFFFFFFE) {
            v1052 = v155[6];
          }
          else {
            v1052 = 0;
          }
          if ((v1008 - 3) < 0xFFFFFFFE)
          {
            if (v1008 == 3) {
              v819[1] = 0;
            }
            goto LABEL_1248;
          }
          unint64_t v1010 = (unint64_t)(v1052 + 1);
        }
        else
        {
          if ((*((unsigned char *)v819 + 1) & 0x7F) != 2 && !*((_DWORD *)v819 + 3)) {
            goto LABEL_1248;
          }
          v1009 = v819[2];
          if ((v1009 & 4) == 0) {
            goto LABEL_1248;
          }
          unint64_t v1010 = (unint64_t)v1009 & 0xFFFFFFFFFFFFFFF8;
          if (!v1010) {
            goto LABEL_1248;
          }
        }
        v1234 = (char *)(v155 + 6);
        sub_1CC5FA668(v1010 + 16, &v1234);
LABEL_1248:
        llvm::Value::~Value((llvm::Value *)v155, v818);
        int v820 = *((_DWORD *)v155 + 5);
        if ((v820 & 0x40000000) != 0)
        {
          v1026 = (char *)*(v155 - 1);
          v825 = v155 - 1;
          v1025 = v1026;
          uint64_t v1027 = v820 & 0x7FFFFFF;
          if (v1027)
          {
            uint64_t v1028 = 32 * v1027;
            do
            {
              v1029 = &v1025[v1028];
              if (*(void *)&v1025[v1028 - 32])
              {
                **((void **)v1029 - 2) = *((void *)v1029 - 3);
                uint64_t v1030 = *((void *)v1029 - 3);
                if (v1030) {
                  *(void *)(v1030 + 16) = *((void *)v1029 - 2);
                }
              }
              v1028 -= 32;
            }
            while (v1028);
          }
          operator delete(v1025);
        }
        else
        {
          uint64_t v821 = v820 & 0x7FFFFFF;
          if (v821)
          {
            v822 = v155 - 2;
            uint64_t v823 = -32 * v821;
            do
            {
              if (*(v822 - 2))
              {
                **v822 = (uint64_t *)*(v822 - 1);
                uint64_t v824 = (uint64_t)*(v822 - 1);
                if (v824) {
                  *(void *)(v824 + 16) = *v822;
                }
              }
              v822 -= 4;
              v823 += 32;
            }
            while (v823);
          }
          v825 = &v155[-4 * v821];
          if (v820 < 0) {
            v825 = (uint64_t ***)((char *)(v825 - 1) - (char *)*(v825 - 1));
          }
        }
        operator delete(v825);
        LODWORD(v40) = v1206;
        goto LABEL_1258;
      case 41:
        LODWORD(v1227) = 0;
        v1231.n128_u64[0] = 0;
        LODWORD(v1214[0]) = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1227, v1211[0], (llvm::Type ***)&v1231, v1214)) {
          goto LABEL_532;
        }
        uint64_t v133 = v1227;
        int v134 = v1227 + 5;
        if (v1244 != v1227 + 4 && v1244 != v134) {
          goto LABEL_532;
        }
        uint64_t v135 = (uint64_t *)v1231.n128_u64[0];
        if (*(unsigned char *)(*(void *)v1231.n128_u64[0] + 8) == 15)
        {
          if (v1244 == v134)
          {
            int v136 = v1227 + 1;
            LODWORD(v1227) = v1227 + 1;
            uint64_t v137 = v1243[v133];
            unsigned int __src = v137;
            uint64_t v138 = sub_1CC1E22AC(a2, v137);
LABEL_1056:
            sub_1CC1E2F4C(v40, a2, v138, *v135);
            if (*v40) {
              goto LABEL_1063;
            }
            v714 = v1243[v136 + 2];
            switch((int)v714)
            {
              case 0:
              case 4:
              case 5:
                goto LABEL_1419;
              case 1:
                goto LABEL_1415;
              case 2:
                LOWORD(v714) = 2;
                goto LABEL_1415;
              case 3:
                LOWORD(v714) = 4;
                goto LABEL_1415;
              default:
                LOWORD(v714) = 7;
LABEL_1415:
                v890 = v1243[v136];
                if (!v890) {
                  goto LABEL_1419;
                }
                unint64_t v891 = v1243[v136 + 3];
                if (((unint64_t)v1243[v136 + 3] & 0xFFFFFFFE) != 0)
                {
                  if (*(void *)(a2 + 1736) <= v891) {
                    LOBYTE(v891) = 1;
                  }
                  else {
                    LOBYTE(v891) = *(unsigned char *)(*(void *)(a2 + 1728) + v891);
                  }
                }
                if ((unint64_t)v890 >= 0x22)
                {
                  v1234 = "Invalid alignment value";
                  v1238[0] = 259;
                  sub_1CC1DDE58((int)v1206, v1209, (llvm::Twine *)&v1234);
                }
                *v1206 = 0;
                char v921 = (_BYTE)v890 - 1;
                v922 = (char *)operator new(0x60uLL);
                *((_DWORD *)v922 + 13) = *((_DWORD *)v922 + 13) & 0x38000000 | 1;
                *(void *)v922 = 0;
                *((void *)v922 + 1) = 0;
                *((void *)v922 + 2) = 0;
                *((void *)v922 + 3) = v922 + 32;
                v1238[0] = 257;
                __int16 v923 = v1243[v136 + 1] != 0;
                uint64_t v155 = (uint64_t ***)(v922 + 32);
                llvm::LoadInst::LoadInst((llvm::Value *)(v922 + 32), v138, (uint64_t)v135, (const char **)&v1234, v923, v921, (__int16)v714, v891, 0);
                break;
            }
            goto LABEL_1491;
          }
          uint64_t v672 = *(void *)(a2 + 544);
          uint64_t v673 = *(unsigned int *)(a2 + 560);
          if (v673)
          {
            unsigned int v674 = v673 - 1;
            v675 = (int *)(v672 + 32 * ((v673 - 1) & (37 * LODWORD(v1214[0]))));
            int v676 = *v675;
            if (LODWORD(v1214[0]) != *v675)
            {
              int v1102 = 1;
              LODWORD(v1103) = v674 & (37 * LODWORD(v1214[0]));
              do
              {
                uint64_t v40 = v1206;
                uint64_t v42 = v1210;
                if (v676 == -1) {
                  goto LABEL_1874;
                }
                int v1104 = v1103 + v1102++;
                uint64_t v1103 = v1104 & v674;
                int v676 = *(_DWORD *)(v672 + 32 * v1103);
              }
              while (LODWORD(v1214[0]) != v676);
              v675 = (int *)(v672 + 32 * v1103);
              uint64_t v40 = v1206;
              uint64_t v42 = v1210;
            }
          }
          else
          {
LABEL_1874:
            v675 = (int *)(v672 + 32 * v673);
          }
          if ((int *)(v672 + 32 * v673) == v675 || !v675[4]) {
            unsigned int v677 = -1;
          }
          else {
            unsigned int v677 = **((_DWORD **)v675 + 1);
          }
          unsigned int __src = v677;
          uint64_t v713 = sub_1CC1E22AC(a2, v677);
          if (v713)
          {
            uint64_t v138 = v713;
            int v136 = v133;
            goto LABEL_1056;
          }
          v398 = "Missing element type for old style atomic load";
        }
        else
        {
LABEL_537:
          v398 = "Load operand is not a pointer type";
        }
        goto LABEL_1259;
      case 42:
      case 45:
        LODWORD(v1214[0]) = 0;
        v1231.n128_u64[0] = 0;
        uint64_t v1227 = 0;
        LODWORD(v1217) = 0;
        LODWORD(v1213) = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, v1214, v1211[0], (llvm::Type ***)&v1227, &v1217)) {
          goto LABEL_1258;
        }
        int v54 = (uint64_t *)v1227;
        if (*(unsigned char *)(*(void *)v1227 + 8) != 15) {
          goto LABEL_1258;
        }
        if (v47 == 45)
        {
          if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, v1214, v1211[0], (llvm::Type ***)&v1231, &v1213)) {
            goto LABEL_1258;
          }
          int v55 = (int)v1214[0];
        }
        else
        {
          uint64_t v385 = *(void *)(a2 + 544);
          uint64_t v386 = *(unsigned int *)(a2 + 560);
          unsigned int v387 = v1211[0];
          if (v386)
          {
            unsigned int v388 = v386 - 1;
            uint64_t v389 = (int *)(v385 + 32 * ((v386 - 1) & (37 * v1217)));
            int v390 = *v389;
            if (v1217 != *v389)
            {
              int v1092 = 1;
              LODWORD(v1093) = v388 & (37 * v1217);
              do
              {
                uint64_t v40 = v1206;
                uint64_t v42 = v1210;
                unsigned int v387 = v1211[0];
                if (v390 == -1) {
                  goto LABEL_1851;
                }
                int v1094 = v1093 + v1092++;
                uint64_t v1093 = v1094 & v388;
                int v390 = *(_DWORD *)(v385 + 32 * v1093);
              }
              while (v1217 != v390);
              uint64_t v389 = (int *)(v385 + 32 * v1093);
              uint64_t v40 = v1206;
              uint64_t v42 = v1210;
              unsigned int v387 = v1211[0];
            }
          }
          else
          {
LABEL_1851:
            uint64_t v389 = (int *)(v385 + 32 * v386);
          }
          if ((int *)(v385 + 32 * v386) == v389 || !v389[4]) {
            unsigned int v391 = -1;
          }
          else {
            unsigned int v391 = **((_DWORD **)v389 + 1);
          }
          LODWORD(v1213) = v391;
          v534 = (llvm::Type *)sub_1CC1E22AC(a2, v391);
          int v535 = (int)v1214[0];
          if (v1244 == LODWORD(v1214[0]))
          {
            v1231.n128_u64[0] = 0;
            goto LABEL_1258;
          }
          v601 = v1243[LODWORD(v1214[0])];
          if (*(unsigned char *)(a2 + 1640)) {
            uint64_t v602 = v387 - v601;
          }
          else {
            uint64_t v602 = v601;
          }
          v1231.n128_u64[0] = (unint64_t)sub_1CC1E29E0(a2, v602, v534);
          if (!v1231.n128_u64[0]) {
            goto LABEL_1258;
          }
          int v55 = v535 + 1;
          LODWORD(v1214[0]) = v535 + 1;
        }
        if (v1244 == v55 + 4)
        {
          uint64_t v603 = v1231.n128_u64[0];
          sub_1CC1E2F4C(v40, a2, *(void *)v1231.n128_u64[0], *v54);
          if (*v40) {
            goto LABEL_1063;
          }
          v604 = v1243[v55 + 2];
          switch((int)v604)
          {
            case 0:
            case 3:
            case 5:
              goto LABEL_1419;
            case 1:
              goto LABEL_1405;
            case 2:
              LOWORD(v604) = 2;
              goto LABEL_1405;
            case 4:
              LOWORD(v604) = 5;
              goto LABEL_1405;
            default:
              LOWORD(v604) = 7;
LABEL_1405:
              unint64_t v885 = v1243[v55 + 3];
              if (((unint64_t)v1243[v55 + 3] & 0xFFFFFFFE) != 0)
              {
                if (*(void *)(a2 + 1736) <= v885) {
                  LOBYTE(v885) = 1;
                }
                else {
                  LOBYTE(v885) = *(unsigned char *)(*(void *)(a2 + 1728) + v885);
                }
              }
              v886 = v1243[v55];
              if (v886)
              {
                if ((unint64_t)v886 >= 0x22)
                {
                  v1234 = "Invalid alignment value";
                  v1238[0] = 259;
                  sub_1CC1DDE58((int)v1206, v1209, (llvm::Twine *)&v1234);
                }
                *v1206 = 0;
                char v887 = (_BYTE)v886 - 1;
                v888 = (char *)operator new(0x80uLL);
                *((_DWORD *)v888 + 21) = *((_DWORD *)v888 + 21) & 0x38000000 | 2;
                *(void *)v888 = 0;
                *((void *)v888 + 1) = 0;
                *((void *)v888 + 2) = 0;
                *((void *)v888 + 3) = v888 + 64;
                *((void *)v888 + 4) = 0;
                *((void *)v888 + 5) = 0;
                *((void *)v888 + 6) = 0;
                *((void *)v888 + 7) = v888 + 64;
                char v889 = v887;
                uint64_t v155 = (uint64_t ***)(v888 + 64);
                llvm::StoreInst::StoreInst((llvm::Value *)(v888 + 64), v603, (uint64_t)v54, v1243[v55 + 1] != 0, v889, (__int16)v604, v885, 0);
LABEL_1491:
                unint64_t v924 = *(unsigned int *)(a2 + 752);
                if (v924 >= *(unsigned int *)(a2 + 756)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v925 = *v1204;
                goto LABEL_1493;
              }
LABEL_1602:
              uint64_t v106 = "Invalid record";
              break;
          }
LABEL_856:
          v1234 = (char *)v106;
          v1238[0] = 259;
          LODWORD(v40) = v1206;
LABEL_953:
          int v487 = (int)v40;
          uint64_t v41 = a2 + 8;
LABEL_954:
          sub_1CC1DDE58(v487, v41, (llvm::Twine *)&v1234);
        }
LABEL_1258:
        v398 = "Invalid record";
        goto LABEL_1259;
      case 46:
        unsigned int v95 = v1244;
        LODWORD(v1214[0]) = 0;
        v1231.n128_u64[0] = 0;
        LODWORD(v1217) = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, v1214, v1211[0], (llvm::Type ***)&v1231, &v1217)) {
          goto LABEL_532;
        }
        unsigned int v96 = (uint64_t *)v1231.n128_u64[0];
        if (*(unsigned char *)(*(void *)v1231.n128_u64[0] + 8) != 15)
        {
          v398 = "Cmpxchg operand is not a pointer type";
LABEL_1259:
          v1234 = (char *)v398;
          v1238[0] = 259;
          int v397 = (int)v40;
          uint64_t v41 = a2 + 8;
LABEL_534:
          sub_1CC1DDE58(v397, v41, (llvm::Twine *)&v1234);
        }
        uint64_t v1227 = 0;
        LODWORD(v1213) = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, v1214, v1211[0], (llvm::Type ***)&v1227, &v1213)) {
          goto LABEL_1258;
        }
        int v97 = (int)v1214[0];
        if (v1244 == LODWORD(v1214[0])) {
          goto LABEL_951;
        }
        unsigned int v98 = v1213;
        uint64_t v99 = (uint64_t *)v1227;
        uint64_t v100 = v1243[LODWORD(v1214[0])];
        uint64_t v101 = *(unsigned char *)(a2 + 1640) ? v1211[0] - v100 : v100;
        uint64_t v102 = sub_1CC1E29E0(a2, v101, *(llvm::Type **)v1227);
        if (!v102) {
          goto LABEL_951;
        }
        LODWORD(v1214[0]) = v97 + 1;
        int v103 = v97 + 4;
        if (v95 >= v97 + 4 && v95 <= v97 + 7)
        {
          uint64_t v104 = (uint64_t)v102;
          int v105 = v1243[v97 + 2];
          switch((int)v105)
          {
            case 0:
            case 1:
              uint64_t v106 = "Invalid cmpxchg success ordering";
              goto LABEL_856;
            case 2:
              goto LABEL_1529;
            case 3:
              LOWORD(v105) = 4;
              goto LABEL_1529;
            case 4:
              LOWORD(v105) = 5;
              goto LABEL_1529;
            case 5:
              LOWORD(v105) = 6;
              goto LABEL_1529;
            default:
              LOWORD(v105) = 7;
LABEL_1529:
              v1179 = v1243[v97 + 1];
              __int16 v1188 = (__int16)v105;
              unsigned int v1197 = v98;
              v941 = v1243[v97 + 3];
              if ((v941 & 0xFFFFFFFE) != 0)
              {
                if (*(void *)(a2 + 1736) <= (unint64_t)v941) {
                  char v942 = 1;
                }
                else {
                  char v942 = *(unsigned char *)(*(void *)(a2 + 1728) + v941);
                }
              }
              else
              {
                char v942 = (char)v941;
              }
              sub_1CC1E2F4C(v1206, a2, *v99, *v96);
              if (*v1206)
              {
LABEL_1581:
                uint64_t v155 = 0;
                int v45 = 1;
                goto LABEL_1582;
              }
              v943 = v1243[v103];
              if (v943 > 5)
              {
                LOWORD(v944) = 7;
              }
              else
              {
                v944 = v1243[v103];
                if (((1 << (char)v943) & 0x33) != 0)
                {
                  uint64_t v106 = "Invalid cmpxchg failure ordering";
                  goto LABEL_856;
                }
                if (v944 != 2) {
                  LOWORD(v944) = 4;
                }
              }
              v1173 = (llvm::Value *)v1243[v97 + 5];
              if (v95 != v97 + 7) {
                goto LABEL_1676;
              }
              v1011 = v1243[v97 + 6];
              if ((unint64_t)v1011 >= 0x22)
              {
                v1234 = "Invalid alignment value";
                v1238[0] = 259;
                sub_1CC1DDE58((int)v1206, v1209, (llvm::Twine *)&v1234);
              }
              *v1206 = 0;
              if (v1011)
              {
                LOBYTE(v1169) = (_BYTE)v1011 - 1;
              }
              else
              {
LABEL_1676:
                uint64_t v1016 = sub_1CB83544C(*(void *)(a2 + 432) + 272, *v99);
                if (v1015 == 1) {
                unint64_t v1169 = 63 - __clz((unint64_t)(v1016 + 7) >> 3);
                }
              }
              v1017 = operator new(0xA0uLL);
              v1018 = v1017;
              uint64_t v1019 = 0;
              v1020 = (uint64_t ***)(v1017 + 24);
              v1017[29] = v1017[29] & 0x38000000 | 3;
              do
              {
                v1021 = &v1017[v1019];
                void *v1021 = 0;
                v1021[1] = 0;
                v1021[2] = 0;
                v1021[3] = v1020;
                v1019 += 8;
              }
              while (v1019 != 24);
              llvm::AtomicCmpXchgInst::AtomicCmpXchgInst((uint64_t)(v1017 + 24), (uint64_t)v96, (uint64_t ***)v99, v104, v1169, v1188, (__int16)v944, v942, 0);
              *((_WORD *)v1018 + 57) = (v1179 != 0) | (unsigned __int16)(2 * (v1173 != 0)) | *((_WORD *)v1018 + 57) & 0xFFFC;
              unsigned int v1022 = sub_1CC1E23EC(a2, **(void **)(a2 + 424) + 1888, 0, 0);
              uint64_t v1023 = *((void *)v1018 + 12);
              v1234 = (char *)__PAIR64__(v1022, v1197);
              unsigned int __src = sub_1CC1E23EC(a2, v1023, (char *)&v1234, 2);
              unint64_t v1024 = *(unsigned int *)(a2 + 752);
              if (v1024 >= *(unsigned int *)(a2 + 756)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v155 = v1020;
              *(void *)(*v1204 + 8 * v1024) = v1020;
LABEL_1494:
              ++*v1203;
LABEL_1495:
              int v45 = 9;
LABEL_1582:
              uint64_t v40 = v1206;
              uint64_t v41 = a2 + 8;
              uint64_t v42 = v1210;
              goto LABEL_1422;
          }
        }
LABEL_855:
        uint64_t v106 = "Invalid record";
        goto LABEL_856;
      case 48:
        if ((unint64_t)v1244 - 1 >= 2) {
          goto LABEL_434;
        }
        uint64_t v107 = (llvm::Type *)(**(void **)(a2 + 424) + 1744);
        sub_1CC1E23EC(a2, (uint64_t)v107, 0, 0);
        if (!v1244) {
          goto LABEL_434;
        }
        uint64_t v108 = *(unsigned char *)(a2 + 1640) ? v1211[0] - *(_DWORD *)v1243 : *(unsigned int *)v1243;
        uint64_t v109 = sub_1CC1E29E0(a2, v108, v107);
        if (!v109) {
          goto LABEL_434;
        }
        int v110 = (llvm::Value *)v109;
        if (v1244 == 2)
        {
          unint64_t v111 = *((unsigned int *)v1243 + 2);
          uint64_t v112 = *(void *)(a2 + 1392);
          if (v111 >= (*(void *)(a2 + 1400) - v112) >> 3) {
            goto LABEL_609;
          }
          uint64_t v113 = *(llvm::BasicBlock **)(v112 + 8 * v111);
          if (!v113) {
            goto LABEL_609;
          }
        }
        else
        {
          uint64_t v113 = 0;
        }
        if (v113) {
          uint64_t v857 = 2;
        }
        else {
          uint64_t v857 = 1;
        }
        v858 = (uint64_t ***)operator new(32 * v857 + 64);
        v859 = &v858[4 * v857];
        *((_DWORD *)v859 + 5) = *((_DWORD *)v859 + 5) & 0x38000000 | v857;
        do
        {
          *v858 = 0;
          v858[1] = 0;
          v858[2] = 0;
          v858[3] = (uint64_t **)v859;
          v858 += 4;
        }
        while (v858 != v859);
        uint64_t v155 = v859;
        llvm::CleanupReturnInst::CleanupReturnInst((llvm::CleanupReturnInst *)v859, v110, v113, v857, 0);
LABEL_1317:
        unint64_t v860 = *(unsigned int *)(a2 + 752);
        if (v860 >= *(unsigned int *)(a2 + 756)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*v1204 + 8 * v860) = v155;
        ++*v1203;
LABEL_1319:
        uint64_t v40 = v1206;
        uint64_t v41 = a2 + 8;
        uint64_t v42 = v1210;
        goto LABEL_1423;
      case 49:
        if (v1244 != 2) {
          goto LABEL_434;
        }
        uint64_t v165 = (llvm::Type *)(**(void **)(a2 + 424) + 1744);
        sub_1CC1E23EC(a2, (uint64_t)v165, 0, 0);
        if (!v1244) {
          goto LABEL_434;
        }
        uint64_t v166 = *(unsigned char *)(a2 + 1640) ? v1211[0] - *(_DWORD *)v1243 : *(unsigned int *)v1243;
        uint64_t v167 = sub_1CC1E29E0(a2, v166, v165);
        if (!v167) {
          goto LABEL_434;
        }
        unint64_t v168 = *((unsigned int *)v1243 + 2);
        uint64_t v169 = *(void *)(a2 + 1392);
        if (v168 >= (*(void *)(a2 + 1400) - v169) >> 3) {
          goto LABEL_609;
        }
        uint64_t v170 = *(llvm::BasicBlock **)(v169 + 8 * v168);
        if (!v170) {
          goto LABEL_609;
        }
        BOOL v171 = (llvm::Value *)v167;
        uint64_t v172 = (char *)operator new(0x80uLL);
        *((_DWORD *)v172 + 21) = *((_DWORD *)v172 + 21) & 0x38000000 | 2;
        *(void *)uint64_t v172 = 0;
        *((void *)v172 + 1) = 0;
        *((void *)v172 + 2) = 0;
        *((void *)v172 + 3) = v172 + 64;
        *((void *)v172 + 4) = 0;
        *((void *)v172 + 5) = 0;
        *((void *)v172 + 6) = 0;
        *((void *)v172 + 7) = v172 + 64;
        uint64_t v155 = (uint64_t ***)(v172 + 64);
        llvm::CatchReturnInst::CatchReturnInst((llvm::CatchReturnInst *)(v172 + 64), v171, v170, 0);
        goto LABEL_1317;
      case 50:
      case 51:
        if (v1244 <= 1) {
          goto LABEL_434;
        }
        uint64_t v70 = (llvm::Type *)(**(void **)(a2 + 424) + 1744);
        sub_1CC1E23EC(a2, (uint64_t)v70, 0, 0);
        if (v1244)
        {
          if (*(unsigned char *)(a2 + 1640)) {
            uint64_t v71 = v1211[0] - *(_DWORD *)v1243;
          }
          else {
            uint64_t v71 = *(unsigned int *)v1243;
          }
          uint64_t v72 = sub_1CC1E29E0(a2, v71, v70);
        }
        else
        {
          uint64_t v72 = 0;
        }
        int v360 = 2;
        LODWORD(v1214[0]) = 2;
        int v361 = *((_DWORD *)v1243 + 2);
        v1231.n128_u64[0] = (unint64_t)v1232;
        v1231.n128_u64[1] = 0x200000000;
        if (v361)
        {
          do
          {
            uint64_t v1227 = 0;
            LODWORD(v1217) = 0;
            if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, v1214, v1211[0], (llvm::Type ***)&v1227, &v1217)) {
              goto LABEL_508;
            }
            if (v1231.n128_u32[2] >= (unint64_t)v1231.n128_u32[3]) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(v1231.n128_u64[0] + 8 * v1231.n128_u32[2]) = v1227;
            unsigned __int32 v362 = ++v1231.n128_u32[2];
            --v361;
          }
          while (v361);
          int v360 = (int)v1214[0];
        }
        else
        {
          unsigned __int32 v362 = 0;
        }
        if (v1244 == v360)
        {
          v701 = (uint64_t *)v1231.n128_u64[0];
          uint64_t v702 = v362;
          uint64_t v703 = v362 + 1;
          size_t v704 = 32 * v703 + 64;
          int v705 = v703 & 0x7FFFFFF;
          if (v47 == 51)
          {
            v1238[0] = 257;
            v706 = (uint64_t ***)operator new(v704);
            uint64_t v155 = &v706[4 * v703];
            *((_DWORD *)v155 + 5) = *((_DWORD *)v155 + 5) & 0x38000000 | v705;
            if (v703)
            {
              do
              {
                *v706 = 0;
                v706[1] = 0;
                v706[2] = 0;
                v706[3] = (uint64_t **)v155;
                v706 += 4;
              }
              while (v706 != v155);
            }
            v707 = (llvm::Instruction *)v155;
            char v708 = 51;
          }
          else
          {
            v1238[0] = 257;
            v807 = (uint64_t ***)operator new(v704);
            uint64_t v155 = &v807[4 * v703];
            *((_DWORD *)v155 + 5) = *((_DWORD *)v155 + 5) & 0x38000000 | v705;
            if (v703)
            {
              do
              {
                *v807 = 0;
                v807[1] = 0;
                v807[2] = 0;
                v807[3] = (uint64_t **)v155;
                v807 += 4;
              }
              while (v807 != v155);
            }
            v707 = (llvm::Instruction *)v155;
            char v708 = 52;
          }
          llvm::FuncletPadInst::FuncletPadInst(v707, v708, v72, v701, v702, v703, (const char **)&v1234, 0);
          unsigned int __src = sub_1CC1E23EC(a2, (uint64_t)*v155, 0, 0);
          unint64_t v752 = *(unsigned int *)(a2 + 752);
          uint64_t v41 = a2 + 8;
          uint64_t v42 = v1210;
          if (v752 >= *(unsigned int *)(a2 + 756)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          goto LABEL_1205;
        }
LABEL_508:
        v1234 = "Invalid record";
        v1238[0] = 259;
        int v381 = (int)v40;
        goto LABEL_509;
      case 52:
        if (v1244 <= 1) {
          goto LABEL_434;
        }
        int v114 = (llvm::Type *)(**(void **)(a2 + 424) + 1744);
        sub_1CC1E23EC(a2, (uint64_t)v114, 0, 0);
        if (v1244)
        {
          if (*(unsigned char *)(a2 + 1640)) {
            uint64_t v115 = v1211[0] - *(_DWORD *)v1243;
          }
          else {
            uint64_t v115 = *(unsigned int *)v1243;
          }
          int v116 = sub_1CC1E29E0(a2, v115, v114);
        }
        else
        {
          int v116 = 0;
        }
        int v492 = *((_DWORD *)v1243 + 2);
        v1231.n128_u64[0] = (unint64_t)v1232;
        v1231.n128_u64[1] = 0x200000000;
        if (v492)
        {
          unsigned __int32 v493 = 0;
          for (int m = 0; m != v492; ++m)
          {
            unint64_t v495 = LODWORD(v1243[m + 2]);
            uint64_t v496 = *(void *)(a2 + 1392);
            if (v495 >= (*(void *)(a2 + 1400) - v496) >> 3 || (uint64_t v497 = *(void *)(v496 + 8 * v495)) == 0)
            {
              v1234 = "Invalid record";
              v1238[0] = 259;
              int v381 = (int)v40;
              uint64_t v41 = a2 + 8;
LABEL_509:
              sub_1CC1DDE58(v381, v41, (llvm::Twine *)&v1234);
            }
            if (v493 >= v1231.n128_u32[3]) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(v1231.n128_u64[0] + 8 * v493) = v497;
            unsigned __int32 v493 = ++v1231.n128_u32[2];
          }
          int v633 = m + 2;
        }
        else
        {
          int v633 = 2;
        }
        int v634 = v633 + 1;
        if (v1244 == v633 + 1)
        {
          unint64_t v635 = LODWORD(v1243[v633]);
          uint64_t v636 = *(void *)(a2 + 1392);
          if (v635 >= (*(void *)(a2 + 1400) - v636) >> 3 || (v637 = *(llvm::BasicBlock **)(v636 + 8 * v635)) == 0)
          {
LABEL_922:
            v638 = "Invalid record";
            goto LABEL_975;
          }
          int v633 = v634;
        }
        else
        {
          v637 = 0;
        }
        if (v1244 == v633)
        {
          v1238[0] = 257;
          v861 = (char *)operator new(0x48uLL);
          uint64_t v155 = (uint64_t ***)(v861 + 8);
          *((_DWORD *)v861 + 7) = *((_DWORD *)v861 + 7) & 0x38000000 | 0x40000000;
          *(void *)v861 = 0;
          llvm::CatchSwitchInst::CatchSwitchInst((llvm::CatchSwitchInst *)(v861 + 8), v116, v637, v492, (const char **)&v1234, 0);
          if (v1231.n128_u32[2])
          {
            v862 = (llvm::BasicBlock **)v1231.n128_u64[0];
            uint64_t v863 = 8 * v1231.n128_u32[2];
            do
            {
              v864 = *v862++;
              llvm::CatchSwitchInst::addHandler((llvm::CatchSwitchInst *)v155, v864);
              v863 -= 8;
            }
            while (v863);
          }
          unsigned int __src = sub_1CC1E23EC(a2, (uint64_t)*v155, 0, 0);
          unint64_t v865 = *(unsigned int *)(a2 + 752);
          if (v865 >= *(unsigned int *)(a2 + 756)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*v1204 + 8 * v865) = v155;
          goto LABEL_1325;
        }
        goto LABEL_922;
      case 55:
        if (!v1244) {
          goto LABEL_434;
        }
        unint64_t v120 = (unint64_t)*v1243;
        uint64_t v121 = *(void *)(a2 + 1704);
        if ((unint64_t)*v1243 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 1712) - v121) >> 3)) {
          goto LABEL_434;
        }
        __n128 v1231 = 0uLL;
        v1232[0] = 0;
        LODWORD(v1214[0]) = 1;
        if (v1244 == 1) {
          goto LABEL_186;
        }
        BOOL v122 = 0;
        unsigned int v123 = v1211[0];
        while (1)
        {
          uint64_t v1227 = 0;
          LODWORD(v1217) = 0;
          if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, v1214, v123, (llvm::Type ***)&v1227, &v1217))
          {
            v1234 = "Invalid record";
            v1238[0] = 259;
            sub_1CC1DDE58((int)v40, v41, (llvm::Twine *)&v1234);
          }
          if ((unint64_t)v122 >= v1232[0])
          {
            unint64_t v125 = v1231.n128_u64[0];
            uint64_t v126 = (uint64_t)((uint64_t)v122 - v1231.n128_u64[0]) >> 3;
            unint64_t v127 = v126 + 1;
            if ((unint64_t)(v126 + 1) >> 61) {
              goto LABEL_1996;
            }
            int64_t v128 = v1232[0] - v1231.n128_u64[0];
            if ((uint64_t)(v1232[0] - v1231.n128_u64[0]) >> 2 > v127) {
              unint64_t v127 = v128 >> 2;
            }
            if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v129 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v129 = v127;
            }
            if (v129)
            {
              if (v129 >> 61) {
                goto LABEL_1997;
              }
              uint64_t v130 = (char *)operator new(8 * v129);
            }
            else
            {
              uint64_t v130 = 0;
            }
            uint64_t v131 = (uint64_t *)&v130[8 * v126];
            *uint64_t v131 = v1227;
            unint64_t v124 = (unint64_t)(v131 + 1);
            if (v122 != (void *)v125)
            {
              do
              {
                uint64_t v132 = *--v122;
                *--uint64_t v131 = v132;
              }
              while (v122 != (void *)v125);
              BOOL v122 = (void *)v1231.n128_u64[0];
            }
            v1231.n128_u64[0] = (unint64_t)v131;
            v1231.n128_u64[1] = v124;
            v1232[0] = &v130[8 * v129];
            if (v122) {
              operator delete(v122);
            }
            unsigned int v123 = v1211[0];
          }
          else
          {
            *BOOL v122 = v1227;
            unint64_t v124 = (unint64_t)(v122 + 1);
          }
          v1231.n128_u64[1] = v124;
          BOOL v122 = (void *)v124;
          if (v1244 == LODWORD(v1214[0]))
          {
            unint64_t v120 = (unint64_t)*v1243;
            uint64_t v121 = *(void *)(a2 + 1704);
LABEL_186:
            sub_1CD4F7E30(&v1222, (long long *)(v121 + 24 * v120), &v1231);
            int v45 = 4;
            if (v1231.n128_u64[0]) {
              operator delete((void *)v1231.n128_u64[0]);
            }
            goto LABEL_1429;
          }
        }
      case 56:
        LODWORD(v1227) = 0;
        v1231.n128_u64[0] = 0;
        LODWORD(v1214[0]) = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1227, v1211[0], (llvm::Type ***)&v1231, v1214)) {
          goto LABEL_532;
        }
        unsigned int v211 = v1227 + 1;
        if (v1244 < (int)v1227 + 1) {
          goto LABEL_532;
        }
        uint64_t v212 = (uint64_t *)v1231.n128_u64[0];
        int v213 = sub_1CC1E210C((int)v1243[v1227], *(void *)v1231.n128_u64[0]);
        if (v213 == -1) {
          goto LABEL_532;
        }
        v1238[0] = 257;
        uint64_t v155 = (uint64_t ***)llvm::UnaryOperator::Create(v213, v212, (const char **)&v1234, 0);
        unsigned int __src = v1214[0];
        unint64_t v214 = *(unsigned int *)(a2 + 752);
        if (v214 >= *(unsigned int *)(a2 + 756)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*v1204 + 8 * v214) = v155;
        ++*v1203;
        if (v1244 > v211 && sub_1CB845E74((uint64_t)v155))
        {
          unsigned int v215 = v1243[v211] & 0x7E | (v1243[v211] >> 7) & 1 | -(v1243[v211] & 1);
          if (v215) {
            *((unsigned char *)v155 + 17) |= 2 * (_BYTE)v215;
          }
        }
        goto LABEL_1366;
      case 57:
        unint64_t v117 = (*(_DWORD *)v1243 - 1);
        uint64_t v118 = *(void *)(a2 + 1344);
        if (v117 >= (*(void *)(a2 + 1352) - v118) >> 3) {
          uint64_t v119 = 0;
        }
        else {
          uint64_t v119 = *(void *)(v118 + 8 * v117);
        }
        unint64_t v347 = *((unsigned int *)v1243 + 4);
        uint64_t v348 = *(void *)(a2 + 1392);
        if (v347 >= (*(void *)(a2 + 1400) - v348) >> 3) {
          v349 = 0;
        }
        else {
          v349 = *(llvm::Type **)(v348 + 8 * v347);
        }
        v1190 = v349;
        int v350 = v1243[1];
        int v351 = *((_DWORD *)v1243 + 6);
        v1234 = (char *)&v1236;
        uint64_t v1235 = 0x1000000000;
        if (v351)
        {
          unsigned int v352 = 0;
          for (int n = 0; n != v351; ++n)
          {
            unint64_t v354 = LODWORD(v1243[n + 4]);
            uint64_t v355 = *(void *)(a2 + 1392);
            if (v354 >= (*(void *)(a2 + 1400) - v355) >> 3) {
              uint64_t v356 = 0;
            }
            else {
              uint64_t v356 = *(void *)(v355 + 8 * v354);
            }
            if (v352 >= HIDWORD(v1235)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)&v1234[8 * v352] = v356;
            unsigned int v352 = v1235 + 1;
            LODWORD(v1235) = v1235 + 1;
          }
          int v357 = n + 4;
        }
        else
        {
          int v357 = 4;
        }
        int v1218 = v357;
        unsigned int v363 = v1211[0];
        __int16 v364 = (__int16)v350;
        if (((unsigned __int16)v350 & 0x8000) != 0)
        {
          int v1218 = v357 + 1;
          v366 = v1243[v357];
          uint64_t v367 = sub_1CC1E22AC(a2, v366);
          if (!v367 || (uint64_t v365 = v367, *(unsigned char *)(v367 + 8) != 14))
          {
            int v369 = "Explicit call type is not a function type";
            goto LABEL_1072;
          }
        }
        else
        {
          uint64_t v365 = 0;
          LODWORD(v366) = -1;
        }
        v1217 = 0;
        int v1216 = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1218, v1211[0], &v1217, &v1216))
        {
          int v369 = "Invalid record";
          goto LABEL_1072;
        }
        v377 = v1217;
        v378 = *v1217;
        if (*v1217 && *((unsigned char *)v378 + 8) == 15)
        {
          uint64_t v1182 = v119;
          if (v365)
          {
            uint64_t v379 = *((void *)v378 + 3);
            if (v379) {
              BOOL v380 = v379 == v365;
            }
            else {
              BOOL v380 = 1;
            }
            if (!v380)
            {
              int v369 = "Explicit call type does not match pointee type of callee operand";
              goto LABEL_1072;
            }
LABEL_1069:
            int v718 = v1244;
            uint64_t v719 = (*(_DWORD *)(v365 + 12) - 1);
            int v720 = v1218;
            if (v1244 < (int)v719 + v1218)
            {
              v1231.n128_u64[0] = (unint64_t)"Insufficient operands to call";
              __int16 v1233 = 259;
              sub_1CC1DDE58((int)v1206, v41, (llvm::Twine *)&v1231);
            }
            v1231.n128_u64[0] = (unint64_t)v1232;
            v1231.n128_u64[1] = 0x1000000000;
            uint64_t v1227 = (uint64_t)v1229;
            uint64_t v1228 = 0x1000000000;
            if (v719)
            {
              unint64_t v722 = 0;
              int v723 = 37 * v366;
              uint64_t v1176 = v719;
              while (1)
              {
                uint64_t v724 = *(void *)(a2 + 544);
                uint64_t v725 = *(unsigned int *)(a2 + 560);
                if (v725)
                {
                  unsigned int v726 = v725 - 1;
                  v727 = (int *)(v724 + 32 * ((v725 - 1) & v723));
                  int v728 = *v727;
                  if (v366 != *v727)
                  {
                    v737 = v377;
                    int v738 = 1;
                    LODWORD(v739) = v726 & v723;
                    do
                    {
                      v377 = v737;
                      uint64_t v719 = v1176;
                      int v723 = 37 * v366;
                      if (v728 == -1) {
                        goto LABEL_1102;
                      }
                      int v740 = v739 + v738++;
                      uint64_t v739 = v740 & v726;
                      int v728 = *(_DWORD *)(v724 + 32 * v739);
                    }
                    while (v366 != v728);
                    v727 = (int *)(v724 + 32 * v739);
                    v377 = v737;
                    uint64_t v719 = v1176;
                    int v723 = 37 * v366;
                  }
                }
                else
                {
LABEL_1102:
                  v727 = (int *)(v724 + 32 * v725);
                }
                ++v722;
                if ((int *)(v724 + 32 * v725) == v727 || v722 >= v727[4]) {
                  int v729 = -1;
                }
                else {
                  int v729 = *(_DWORD *)(*((void *)v727 + 1) + 4 * v722);
                }
                v730 = *(llvm::Type **)(*(void *)(v365 + 16) + 8 * v722);
                if (*((unsigned char *)v730 + 8) == 8)
                {
                  unint64_t v731 = LODWORD(v1243[v720]);
                  uint64_t v732 = *(void *)(a2 + 1392);
                  if (v731 >= (*(void *)(a2 + 1400) - v732) >> 3) {
                    break;
                  }
                  v733 = *(llvm::Type ***)(v732 + 8 * v731);
                }
                else
                {
                  if (v1244 == v720) {
                    break;
                  }
                  v734 = v1243[v720];
                  uint64_t v735 = *(unsigned char *)(a2 + 1640) ? v1211[0] - v734 : v734;
                  v736 = sub_1CC1E29E0(a2, v735, v730);
                  int v723 = 37 * v366;
                  uint64_t v719 = v1176;
                  v733 = v736;
                }
                if (!v733) {
                  break;
                }
                if (v1231.n128_u32[2] >= (unint64_t)v1231.n128_u32[3]) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(v1231.n128_u64[0] + 8 * v1231.n128_u32[2]++) = v733;
                if (v1228 >= (unint64_t)HIDWORD(v1228)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v41 = a2 + 8;
                *(_DWORD *)(v1227 + 4 * v1228) = v729;
                LODWORD(v1228) = v1228 + 1;
                ++v720;
                if (v722 == v719)
                {
                  int v718 = v1244;
                  unsigned int v363 = v1211[0];
                  goto LABEL_1367;
                }
              }
              int v1218 = v720;
              v1214[0] = (llvm::Type **)"Invalid record";
              __int16 v1215 = 259;
              int v830 = (int)v1206;
              uint64_t v41 = a2 + 8;
LABEL_1378:
              sub_1CC1DDE58(v830, v41, (llvm::Twine *)v1214);
            }
LABEL_1367:
            int v1218 = v720;
            if (*(_DWORD *)(v365 + 8) < 0x100u)
            {
              if (v718 != v720)
              {
LABEL_1377:
                v1214[0] = (llvm::Type **)"Invalid record";
                __int16 v1215 = 259;
                int v830 = (int)v1206;
                goto LABEL_1378;
              }
            }
            else if (v718 != v720)
            {
              do
              {
                v1213 = 0;
                int v1212 = 0;
                if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1218, v363, &v1213, &v1212)) {
                  goto LABEL_1377;
                }
                if (v1231.n128_u32[2] >= (unint64_t)v1231.n128_u32[3]) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(v1231.n128_u64[0] + 8 * v1231.n128_u32[2]++) = v1213;
                if (v1228 >= (unint64_t)HIDWORD(v1228)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(_DWORD *)(v1227 + 4 * v1228) = v1212;
                LODWORD(v1228) = v1228 + 1;
              }
              while (v1244 != v1218);
            }
            uint64_t v955 = v1222;
            uint64_t v956 = v1222;
            if (v1222 != v1223)
            {
              llvm::UpgradeOperandBundles(&v1222);
              uint64_t v956 = v1222;
              uint64_t v955 = v1223;
            }
            __int16 v1215 = 257;
            v957 = sub_1CD4EFB0C(v365, (uint64_t)v377, (uint64_t)v1190, (uint64_t)v1234, v1235, (uint64_t *)v1231.n128_u64[0], v1231.n128_u32[2], v368, v956, 0xAAAAAAAAAAAAAAABLL * ((v955 - v956) >> 4), (const char **)v1214, 0);
            uint64_t v958 = *(void *)(a2 + 544);
            uint64_t v959 = *(unsigned int *)(a2 + 560);
            if (v959)
            {
              unsigned int v960 = v959 - 1;
              v961 = (int *)(v958 + 32 * ((v959 - 1) & (37 * v366)));
              int v962 = *v961;
              if (v366 != *v961)
              {
                int v1140 = 1;
                LODWORD(v1141) = v960 & (37 * v366);
                do
                {
                  if (v962 == -1) {
                    goto LABEL_1934;
                  }
                  int v1142 = v1141 + v1140++;
                  uint64_t v1141 = v1142 & v960;
                  int v962 = *(_DWORD *)(v958 + 32 * v1141);
                }
                while (v366 != v962);
                v961 = (int *)(v958 + 32 * v1141);
              }
            }
            else
            {
LABEL_1934:
              v961 = (int *)(v958 + 32 * v959);
            }
            if ((int *)(v958 + 32 * v959) == v961 || !v961[4]) {
              unsigned int v963 = -1;
            }
            else {
              unsigned int v963 = **((_DWORD **)v961 + 1);
            }
            unsigned int __src = v963;
            uint64_t v1000 = v1222;
            for (iuint64_t i = v1223; ii != v1000; iuint64_t i = sub_1CD4AF9B4(ii - 48))
              ;
            uint64_t v1223 = v1000;
            unint64_t v1001 = *(unsigned int *)(a2 + 752);
            if (v1001 >= *(unsigned int *)(a2 + 756)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(a2 + 744) + 8 * v1001) = v957;
            ++*(_DWORD *)(a2 + 752);
            *((_WORD *)v957 + 9) = *((_WORD *)v957 + 9) & 0xF003 | (2 * v364) & 0xFFC;
            *((void *)v957 + 8) = v1182;
            sub_1CC1E2A50(v1206, a2, (uint64_t)v957, v1227);
            if (*v1206)
            {
              uint64_t v155 = (uint64_t ***)v957;
              llvm::Value::deleteValue((void (**)(void))v957, (llvm::Value *)v43);
              int v45 = 1;
              uint64_t v40 = v1206;
              uint64_t v41 = a2 + 8;
              uint64_t v42 = v1210;
            }
            else
            {
              int v45 = 9;
              uint64_t v40 = v1206;
              uint64_t v41 = a2 + 8;
              uint64_t v42 = v1210;
              uint64_t v155 = (uint64_t ***)v957;
            }
            if ((unsigned char *)v1227 != v1229) {
              free((void *)v1227);
            }
            v883 = (void *)v1231.n128_u64[0];
            if ((void *)v1231.n128_u64[0] != v1232) {
LABEL_1402:
            }
              free(v883);
LABEL_1073:
            v516 = v1234;
            v517 = &v1236;
            goto LABEL_1345;
          }
          uint64_t v684 = *(void *)(a2 + 544);
          uint64_t v685 = *(unsigned int *)(a2 + 560);
          if (v685)
          {
            unsigned int v686 = v685 - 1;
            v687 = (int *)(v684 + 32 * ((v685 - 1) & (37 * v1216)));
            int v688 = *v687;
            if (v1216 != *v687)
            {
              int v1108 = 1;
              LODWORD(v1109) = v686 & (37 * v1216);
              do
              {
                uint64_t v41 = a2 + 8;
                unsigned int v363 = v1211[0];
                v377 = v1217;
                if (v688 == -1) {
                  goto LABEL_1884;
                }
                int v1110 = v1109 + v1108++;
                uint64_t v1109 = v1110 & v686;
                int v688 = *(_DWORD *)(v684 + 32 * v1109);
              }
              while (v1216 != v688);
              v687 = (int *)(v684 + 32 * v1109);
              uint64_t v41 = a2 + 8;
              unsigned int v363 = v1211[0];
              v377 = v1217;
            }
          }
          else
          {
LABEL_1884:
            v687 = (int *)(v684 + 32 * v685);
          }
          if ((int *)(v684 + 32 * v685) == v687 || !v687[4]) {
            LODWORD(v366) = -1;
          }
          else {
            LODWORD(v366) = **((_DWORD **)v687 + 1);
          }
          uint64_t v717 = sub_1CC1E22AC(a2, v366);
          if (v717)
          {
            uint64_t v365 = v717;
            if (*(unsigned char *)(v717 + 8) == 14) {
              goto LABEL_1069;
            }
          }
          int v369 = "Callee is not of pointer to function type";
        }
        else
        {
          int v369 = "Callee is not a pointer type";
        }
LABEL_1072:
        v1231.n128_u64[0] = (unint64_t)v369;
        __int16 v1233 = 259;
        sub_1CC1DDE58((int)v1206, v41, (llvm::Twine *)&v1231);
      case 58:
        LODWORD(v1227) = 0;
        v1231.n128_u64[0] = 0;
        LODWORD(v1214[0]) = 0;
        if (sub_1CC1E1FFC(a2, (uint64_t *)&v1243, &v1227, v1211[0], (llvm::Type ***)&v1231, v1214)
          || v1244 != v1227)
        {
          goto LABEL_532;
        }
        uint64_t v327 = (char *)operator new(0x60uLL);
        uint64_t v155 = (uint64_t ***)(v327 + 32);
        *((_DWORD *)v327 + 13) = *((_DWORD *)v327 + 13) & 0x38000000 | 1;
        *(void *)uint64_t v327 = 0;
        *((void *)v327 + 1) = 0;
        *((void *)v327 + 2) = 0;
        *((void *)v327 + 3) = v327 + 32;
        v1238[0] = 257;
        llvm::FreezeInst::FreezeInst((llvm::FreezeInst *)(v327 + 32), (llvm::Value *)v1231.n128_u64[0], (const char **)&v1234, 0);
        unsigned int v276 = v1214[0];
        goto LABEL_957;
      case 60:
        if (!v1244) {
          goto LABEL_434;
        }
        uint64_t v312 = v1243;
        uint64_t v313 = &v1243[v1244];
        while (1)
        {
          uint64_t v314 = *(void *)(*v1208 + 32 * *(unsigned int *)v312 + 16);
          if (!v314 || *(unsigned char *)(v314 + 16) != 0) {
            goto LABEL_1015;
          }
          v316 = *(void **)(a2 + 1624);
          unint64_t v317 = *(void *)(a2 + 1632);
          if ((unint64_t)v316 >= v317)
          {
            uint64_t v319 = *(void **)(a2 + 1616);
            uint64_t v320 = v316 - v319;
            unint64_t v321 = v320 + 1;
            if ((unint64_t)(v320 + 1) >> 61) {
LABEL_1996:
            }
              abort();
            uint64_t v322 = v317 - (void)v319;
            if (v322 >> 2 > v321) {
              unint64_t v321 = v322 >> 2;
            }
            if ((unint64_t)v322 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v323 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v323 = v321;
            }
            if (v323)
            {
              if (v323 >> 61) {
LABEL_1997:
              }
                sub_1CB833614();
              v324 = (char *)operator new(8 * v323);
            }
            else
            {
              v324 = 0;
            }
            v325 = &v324[8 * v320];
            *(void *)v325 = v314;
            uint64_t v318 = v325 + 8;
            if (v316 != v319)
            {
              do
              {
                uint64_t v326 = *--v316;
                *((void *)v325 - 1) = v326;
                v325 -= 8;
              }
              while (v316 != v319);
              v316 = *(void **)(a2 + 1616);
            }
            *(void *)(a2 + 1616) = v325;
            *(void *)(a2 + 1624) = v318;
            *(void *)(a2 + 1632) = &v324[8 * v323];
            if (v316) {
              operator delete(v316);
            }
          }
          else
          {
            void *v316 = v314;
            uint64_t v318 = v316 + 1;
          }
          *(void *)(a2 + 1624) = v318;
          ++v312;
          int v45 = 4;
          uint64_t v42 = v1210;
          if (v312 == v313)
          {
            uint64_t v41 = a2 + 8;
            goto LABEL_1429;
          }
        }
      default:
        uint64_t v94 = "Invalid value";
        goto LABEL_1426;
    }
  }
}

uint64_t sub_1CC1DDE04(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result - 32);
  *(void *)(result + 72) = *(void *)(a2 + 24);
  if (v2)
  {
    **(void **)(result - 16) = *(void *)(result - 24);
    uint64_t v3 = *(void *)(result - 24);
    if (v3) {
      *(void *)(v3 + 16) = *(void *)(result - 16);
    }
  }
  *(void *)(result - 32) = a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v4 = (void *)(a2 + 8);
  uint64_t v5 = v6;
  *(void *)(result - 24) = v6;
  if (v6) {
    *(void *)(v5 + 16) = result - 24;
  }
  *(void *)(result - 16) = v4;
  void *v4 = result - 32;
  return result;
}

void sub_1CC1DDE58(int a1, uint64_t a2, llvm::Twine *this)
{
  llvm::Twine::str(this, &v20);
  if (*(char *)(a2 + 415) < 0)
  {
    if (!*(void *)(a2 + 400)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(a2 + 415))
  {
    goto LABEL_21;
  }
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v17, "' Reader: 'LLVM ");
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  char v16 = 0;
  __s[0] = 0;
  uint64_t v6 = std::string::append(&v18, __s, 0);
  std::string::size_type v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = std::string::append(&v19, "')");
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  uint64_t v13 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (v13 >= 0) {
    int v10 = __p;
  }
  else {
    int v10 = (void **)__p[0];
  }
  if (v13 >= 0) {
    std::string::size_type v11 = HIBYTE(v13) & 0x7F;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  std::string::append(&v20, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (v16 < 0) {
    operator delete(*(void **)__s);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
LABEL_21:
  __int16 v14 = 260;
  __p[0] = &v20;
  sub_1CC1CD704();
}

uint64_t sub_1CC1DDFE4(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 1424);
  if (*(void *)(a2 + 1416) == v3)
  {
    v7[0] = (uint64_t)"Insufficient function protos";
    __int16 v8 = 259;
    sub_1CC1DDE58((int)a1, a2 + 8, (llvm::Twine *)v7);
  }
  v7[0] = *(void *)(v3 - 8);
  *(void *)(a2 + 1424) = v3 - 8;
  uint64_t v4 = a2 + 32;
  uint64_t v5 = 8 * *(void *)(a2 + 48) - *(unsigned int *)(a2 + 64);
  sub_1CC1DE094(a2 + 1496, v7)[1] = v5;
  uint64_t result = sub_1CC1C6524(v4, a1);
  if (!*a1) {
    *a1 = 0;
  }
  return result;
}

uint64_t *sub_1CC1DE094(uint64_t a1, uint64_t *a2)
{
  __int16 v8 = 0;
  char v4 = sub_1CC1DE178(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3) {
      goto LABEL_5;
    }
  }
  else
  {
    v7 *= 2;
  }
  sub_1CC1DE20C(a1, v7);
  __int16 v8 = 0;
  sub_1CC1DE178(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t result = v8;
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  uint64_t *result = *a2;
  result[1] = 0;
  return result;
}

uint64_t sub_1CC1DE178(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v6 = (void *)(a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      int v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          int v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        int v6 = (void *)(a1 + 16 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        int v6 = v10;
      }
    }
  }
  else
  {
    int v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

void *sub_1CC1DE20C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC1DE2D8(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      void *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC1DE2D8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      BOOL v12 = 0;
      uint64_t result = sub_1CC1DE178(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      uint64_t v10 = v12;
      uint64_t v11 = a2[1];
      uint64_t *v12 = *a2;
      v10[1] = v11;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void sub_1CC1DE380(void **a1, uint64_t a2)
{
  uint64_t v3 = a1;
  v474[64] = *MEMORY[0x1E4F143B8];
  int v4 = (void *)(a2 + 32);
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 32), 0, 11, a1);
  if (!*v3)
  {
    uint64_t v5 = a2 + 8;
    int v472 = v474;
    uint64_t v473 = 0x4000000000;
    uint64_t v6 = **(void **)(a2 + 424) + 1960;
    unint64_t v7 = sub_1CC1E23EC(a2, v6, 0, 0);
    uint64_t v456 = 0;
    v457 = 0;
    uint64_t v8 = 0;
    uint64_t v447 = 0;
    unint64_t v448 = 0;
    int v445 = 0;
    uint64_t v446 = 0;
    std::string __p = 0;
    int __src = v7;
    uint64_t v9 = (*(void *)(a2 + 624) - *(void *)(a2 + 616)) >> 5;
    unint64_t v459 = (llvm::BitcodeReaderValueList *)(a2 + 616);
    uint64_t v460 = a2;
    uint64_t v443 = (void *)(a2 + 1568);
    uint64_t v444 = a2 + 1544;
    uint64_t v458 = v3;
    while (1)
    {
LABEL_3:
      sub_1CC1CA5F4((uint64_t)v4, 0, (uint64_t)&v465);
      if (v466)
      {
        uint64_t v341 = v465;
LABEL_593:
        llvm::Value *v3 = v341;
        goto LABEL_542;
      }
      if (v465 != 2) {
        break;
      }
      sub_1CC1C6524((uint64_t)v4, &v463);
      uint64_t v341 = (void *)v463.__r_.__value_.__r.__words[0];
      if (v466)
      {
        uint64_t v365 = v465;
        v465 = 0;
        if (v365) {
          (*(void (**)(void *))(*(void *)v365 + 8))(v365);
        }
      }
      uint64_t v3 = v458;
      unint64_t v7 = v7;
      if (v341) {
        goto LABEL_593;
      }
    }
    if (!v465)
    {
      v465 = "Malformed block";
      WORD4(v467) = 259;
      int v366 = (int)v3;
      uint64_t v367 = v5;
      goto LABEL_541;
    }
    if (v465 != 1)
    {
      LODWORD(v473) = 0;
      uint64_t v10 = **(void **)(v460 + 424);
      llvm::BitstreamCursor::readRecord(v4, SHIDWORD(v465), (uint64_t)&v472, 0, (uint64_t)&v470);
      if (v471)
      {
        char v15 = v470;
        unsigned int v470 = 0;
        llvm::Value *v3 = v15;
        int v289 = 1;
        goto LABEL_389;
      }
      int v13 = (int)v470;
      switch((int)v470)
      {
        case 1:
          if (v473
            && (unint64_t v105 = *(void *)v472,
                uint64_t v106 = *(void *)(v460 + 520),
                *(void *)v472 < (unint64_t)((*(void *)(v460 + 528) - v106) >> 3))
            && (uint64_t v107 = *(void *)(v106 + 8 * v105)) != 0)
          {
            if (v107 != v10 + 1576)
            {
              uint64_t v6 = *(void *)(v106 + 8 * v105);
              int v445 = (llvm::PointerType *)sub_1CC1E3458(v460, *(void *)v472);
              int v289 = 2;
              unint64_t v7 = v105;
              goto LABEL_389;
            }
            __int16 v14 = "Invalid constant type";
          }
          else
          {
            __int16 v14 = "Invalid settype record";
          }
          goto LABEL_388;
        case 2:
          unsigned int v118 = *(unsigned __int8 *)(v6 + 8);
          if (v118 > 0xE || ((1 << v118) & 0x4180) == 0)
          {
            if (v118 != 21
              || (llvm::TargetExtType::getLayoutType((llvm::TargetExtType *)v6), (v11 & 1) != 0))
            {
              uint64_t NullValue = (uint64_t)llvm::Constant::getNullValue((llvm::Constant *)v6, v11, v12);
              goto LABEL_342;
            }
          }
          __int16 v14 = "Invalid type for a constant null value";
          goto LABEL_388;
        case 4:
          if (*(unsigned char *)(v6 + 8) == 13 && v473)
          {
            unint64_t v74 = *(void *)v472;
            if (*(void *)v472)
            {
              if (v74 == 1) {
                unint64_t v75 = 0x8000000000000000;
              }
              else {
                unint64_t v75 = -(uint64_t)(v74 >> 1);
              }
            }
            else
            {
              unint64_t v75 = v74 >> 1;
            }
            uint64_t NullValue = (uint64_t)llvm::ConstantInt::get((llvm::ConstantInt *)v6, v75, 0);
            goto LABEL_342;
          }
          __int16 v14 = "Invalid integer const record";
          goto LABEL_388;
        case 5:
          if (*(_DWORD *)(v6 + 8) == 13 && v473)
          {
            llvm::readWideAPInt((unint64_t *)v472, v473, *(_DWORD *)(v6 + 8) >> 8, (uint64_t)&v465);
            ElementPtr = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)(v460 + 424), (llvm::LLVMContext *)&v465, v119);
            if (v466 >= 0x41)
            {
              unint64_t v120 = v465;
              if (v465) {
LABEL_148:
              }
                MEMORY[0x1D25D9CB0](v120, 0x1000C8000313F17);
            }
            goto LABEL_343;
          }
          __int16 v14 = "Invalid wide integer const record";
          goto LABEL_388;
        case 6:
          if (v473)
          {
            switch(*(unsigned char *)(v6 + 8))
            {
              case 0:
                uint64_t v121 = *(llvm::ConstantFP **)(v460 + 424);
                std::string::size_type v122 = *(unsigned __int16 *)v472;
                LODWORD(v463.__r_.__value_.__r.__words[1]) = 16;
                v463.__r_.__value_.__r.__words[0] = v122;
                llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)&v466, (const llvm::APInt **)&v463);
                goto LABEL_351;
              case 1:
                uint64_t v121 = *(llvm::ConstantFP **)(v460 + 424);
                std::string::size_type v262 = *(unsigned __int16 *)v472;
                LODWORD(v463.__r_.__value_.__r.__words[1]) = 16;
                v463.__r_.__value_.__r.__words[0] = v262;
                llvm::detail::IEEEFloat::initFromBFloatAPInt((llvm::detail::IEEEFloat *)&v466, (const llvm::APInt **)&v463);
                goto LABEL_351;
              case 2:
                uint64_t v121 = *(llvm::ConstantFP **)(v460 + 424);
                std::string::size_type v260 = *(unsigned int *)v472;
                LODWORD(v463.__r_.__value_.__r.__words[1]) = 32;
                v463.__r_.__value_.__r.__words[0] = v260;
                llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v466, (const llvm::APInt **)&v463);
                goto LABEL_351;
              case 3:
                uint64_t v121 = *(llvm::ConstantFP **)(v460 + 424);
                std::string::size_type v261 = *(void *)v472;
                LODWORD(v463.__r_.__value_.__r.__words[1]) = 64;
                v463.__r_.__value_.__r.__words[0] = v261;
                llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v466, (const llvm::APInt **)&v463);
LABEL_351:
                ElementPtr = llvm::ConstantFP::get(v121, (llvm::LLVMContext *)&v465, v123);
                if ((_UNKNOWN *)v466 == &unk_1CFB2E344)
                {
                  sub_1CB845718((uint64_t *)&v466 + 1);
                  goto LABEL_343;
                }
                if ((*(_DWORD *)(v466 + 8) - 64) > 0xFFFFFF7F) {
                  goto LABEL_343;
                }
                unint64_t v120 = (void *)*((void *)&v466 + 1);
                if (!*((void *)&v466 + 1)) {
                  goto LABEL_343;
                }
                goto LABEL_148;
              case 4:
                v463.__r_.__value_.__r.__words[0] = *((unsigned __int16 *)v472 + 4) | (*(void *)v472 << 16);
                v463.__r_.__value_.__l.__size_ = *((unsigned __int16 *)v472 + 3);
                LODWORD(v461.__r_.__value_.__r.__words[1]) = 80;
                llvm::APInt::initFromArray((uint64_t)&v461, (uint64_t *)&v463);
                llvm::detail::IEEEFloat::initFromF80LongDoubleAPInt((llvm::detail::IEEEFloat *)&v466, (const llvm::APInt *)&v461);
              case 5:
                LODWORD(v463.__r_.__value_.__r.__words[1]) = 128;
                llvm::APInt::initFromArray((uint64_t)&v463, (uint64_t *)v472);
                llvm::detail::IEEEFloat::initFromQuadrupleAPInt((llvm::detail::IEEEFloat *)&v466, (const llvm::APInt *)&v463);
              case 6:
                LODWORD(v463.__r_.__value_.__r.__words[1]) = 128;
                llvm::APInt::initFromArray((uint64_t)&v463, (uint64_t *)v472);
                llvm::detail::DoubleAPFloat::DoubleAPFloat(&v466, (uint64_t)&unk_1CFB2E344);
              default:
                goto LABEL_220;
            }
          }
          __int16 v14 = "Invalid float const record";
          goto LABEL_388;
        case 7:
          int v452 = v9;
          uint64_t v76 = v5;
          uint64_t v77 = v473;
          if (!v473)
          {
            v465 = "Invalid aggregate record";
            WORD4(v467) = 259;
            sub_1CC1DDE58((int)v3, v76, (llvm::Twine *)&v465);
          }
          v465 = (char *)&v466 + 8;
          *(void *)&long long v466 = 0x1000000000;
          int v78 = *(unsigned __int8 *)(v6 + 8);
          if (v78 == 16 && v6)
          {
            unint64_t v79 = 0;
            unsigned int v80 = 37 * v7;
            do
            {
              uint64_t v81 = *(void *)(v460 + 544);
              uint64_t v82 = *(unsigned int *)(v460 + 560);
              if (v82)
              {
                unsigned int v83 = v82 - 1;
                uint64_t v84 = (int *)(v81 + 32 * ((v82 - 1) & v80));
                int v85 = *v84;
                if (v7 != *v84)
                {
                  unint64_t v89 = v7;
                  uint64_t v90 = v6;
                  uint64_t v91 = v8;
                  int v92 = 1;
                  LODWORD(v93) = v83 & v80;
                  do
                  {
                    uint64_t v3 = v458;
                    uint64_t v8 = v91;
                    uint64_t v6 = v90;
                    unint64_t v7 = v89;
                    if (v85 == -1) {
                      goto LABEL_114;
                    }
                    int v94 = v93 + v92++;
                    uint64_t v93 = v94 & v83;
                    int v85 = *(_DWORD *)(v81 + 32 * v93);
                  }
                  while (v89 != v85);
                  uint64_t v84 = (int *)(v81 + 32 * v93);
                  uint64_t v3 = v458;
                  uint64_t v8 = v91;
                  uint64_t v6 = v90;
                  unint64_t v7 = v89;
                }
              }
              else
              {
LABEL_114:
                uint64_t v84 = (int *)(v81 + 32 * v82);
              }
              if ((int *)(v81 + 32 * v82) == v84 || v79 >= v84[4]) {
                int v86 = -1;
              }
              else {
                int v86 = *(_DWORD *)(*((void *)v84 + 1) + 4 * v79);
              }
              ConstantFwdRef = llvm::BitcodeReaderValueList::getConstantFwdRef(v459, *((_DWORD *)v472 + 2 * v79), *(llvm::Type **)(*(void *)(v6 + 16) + 8 * v79), v86);
              if (v466 >= (unint64_t)DWORD1(v466)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v465 + v466) = ConstantFwdRef;
              uint64_t v88 = (v466 + 1);
              LODWORD(v466) = v466 + 1;
              ++v79;
            }
            while (v79 != v77);
            uint64_t v219 = (uint64_t)llvm::ConstantStruct::get((llvm::PoisonValue *)v6, (llvm::Type *)v465, v88);
LABEL_277:
            ElementPtr = (llvm::Value *)v219;
            goto LABEL_421;
          }
          if (v78 == 17)
          {
            uint64_t v212 = *(void *)(v460 + 544);
            uint64_t v213 = *(unsigned int *)(v460 + 560);
            if (v213)
            {
              unsigned int v214 = v213 - 1;
              unsigned int v215 = (int *)(v212 + 32 * ((v213 - 1) & (37 * v7)));
              int v216 = *v215;
              if (v7 == *v215)
              {
LABEL_274:
                uint64_t v440 = v8;
                unsigned int v427 = v7;
                if ((int *)(v212 + 32 * v213) == v215 || !v215[4])
                {
                  uint64_t v217 = v457;
                  int v218 = -1;
                }
                else
                {
                  uint64_t v217 = v457;
                  int v218 = **((_DWORD **)v215 + 1);
                }
                uint64_t v263 = 0;
                size_t v264 = *(llvm::Type **)(v6 + 24);
                do
                {
                  uint64_t v265 = llvm::BitcodeReaderValueList::getConstantFwdRef(v459, *((void *)v472 + v263), v264, v218);
                  if (v466 >= (unint64_t)DWORD1(v466)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v465 + v466) = v265;
                  uint64_t v266 = (v466 + 1);
                  LODWORD(v466) = v466 + 1;
                  ++v263;
                }
                while (v77 != v263);
                ElementPtr = llvm::ConstantArray::get((llvm::PoisonValue *)v6, (llvm::Type *)v465, v266);
                v457 = v217;
                uint64_t v8 = v440;
                unint64_t v7 = v427;
                goto LABEL_421;
              }
              int v350 = v7;
              uint64_t v351 = v6;
              unsigned int v352 = v8;
              int v353 = 1;
              LODWORD(v354) = v214 & (37 * v7);
              while (1)
              {
                uint64_t v3 = v458;
                uint64_t v8 = v352;
                uint64_t v6 = v351;
                LODWORD(v7) = v350;
                if (v216 == -1) {
                  break;
                }
                int v355 = v354 + v353++;
                uint64_t v354 = v355 & v214;
                int v216 = *(_DWORD *)(v212 + 32 * v354);
                if (v350 == v216)
                {
                  unsigned int v215 = (int *)(v212 + 32 * v354);
                  uint64_t v3 = v458;
                  uint64_t v8 = v352;
                  uint64_t v6 = v351;
                  LODWORD(v7) = v350;
                  goto LABEL_274;
                }
              }
            }
            unsigned int v215 = (int *)(v212 + 32 * v213);
            goto LABEL_274;
          }
          if ((v78 & 0xFE) != 0x12)
          {
            uint64_t v219 = (uint64_t)llvm::UndefValue::get((llvm::UndefValue *)v6, v11);
            goto LABEL_277;
          }
          uint64_t v249 = *(void *)(v460 + 544);
          uint64_t v250 = *(unsigned int *)(v460 + 560);
          if (!v250) {
            goto LABEL_535;
          }
          unsigned int v251 = v250 - 1;
          unsigned int v252 = (int *)(v249 + 32 * ((v250 - 1) & (37 * v7)));
          int v253 = *v252;
          if (v7 != *v252)
          {
            int v359 = v7;
            uint64_t v360 = v6;
            int v361 = v8;
            int v362 = 1;
            LODWORD(v363) = v251 & (37 * v7);
            while (1)
            {
              uint64_t v3 = v458;
              uint64_t v8 = v361;
              uint64_t v6 = v360;
              LODWORD(v7) = v359;
              if (v253 == -1) {
                break;
              }
              int v364 = v363 + v362++;
              uint64_t v363 = v364 & v251;
              int v253 = *(_DWORD *)(v249 + 32 * v363);
              if (v359 == v253)
              {
                unsigned int v252 = (int *)(v249 + 32 * v363);
                uint64_t v3 = v458;
                uint64_t v8 = v361;
                uint64_t v6 = v360;
                LODWORD(v7) = v359;
                goto LABEL_328;
              }
            }
LABEL_535:
            unsigned int v252 = (int *)(v249 + 32 * v250);
          }
LABEL_328:
          v441 = v8;
          unsigned int v428 = v7;
          if ((int *)(v249 + 32 * v250) == v252 || !v252[4])
          {
            uint64_t v254 = v457;
            int v255 = -1;
          }
          else
          {
            uint64_t v254 = v457;
            int v255 = **((_DWORD **)v252 + 1);
          }
          uint64_t v302 = 0;
          v303 = *(llvm::Type **)(v6 + 24);
          do
          {
            uint64_t v304 = llvm::BitcodeReaderValueList::getConstantFwdRef(v459, *((void *)v472 + v302), v303, v255);
            if (v466 >= (unint64_t)DWORD1(v466)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v465 + v466) = v304;
            uint64_t v305 = (v466 + 1);
            LODWORD(v466) = v466 + 1;
            ++v302;
          }
          while (v77 != v302);
          uint64_t v306 = (llvm::FixedVectorType ***)v465;
          Impl = llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v465, (llvm::Type *)v305);
          ElementPtr = Impl;
          v457 = v254;
          uint64_t v8 = v441;
          unint64_t v7 = v428;
          if (!Impl)
          {
            llvm::FixedVectorType::get(**v306, (llvm::Type *)v305);
            uint64_t v219 = sub_1CC56A4DC(**v315 + 1288, (uint64_t)v315, v306, v305);
            goto LABEL_277;
          }
LABEL_421:
          unint64_t v308 = v465;
          uint64_t v5 = v76;
          if (v465 != (char *)&v466 + 8) {
LABEL_422:
          }
            free(v308);
LABEL_423:
          LODWORD(v9) = v452;
          goto LABEL_343;
        case 8:
        case 9:
          uint64_t v16 = v473;
          if (v473)
          {
            std::string v17 = (uint64_t *)v472;
            v465 = &v467;
            long long v466 = xmmword_1CDB15990;
            if (v473 >= 0x11) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            unint64_t v196 = &v467;
            uint64_t v197 = 8 * v473;
            do
            {
              uint64_t v198 = *v17++;
              *(unsigned char *)unint64_t v196 = v198;
              unint64_t v196 = (long long *)((char *)v196 + 1);
              v197 -= 8;
            }
            while (v197);
            *(void *)&long long v466 = v466 + v16;
            String = llvm::ConstantDataArray::getString(*(void *)(v460 + 424), (char *)v465, (llvm::Type *)v466, v13 == 9);
            goto LABEL_268;
          }
          __int16 v14 = "Invalid string record";
          goto LABEL_388;
        case 10:
          if (v473 <= 2)
          {
            __int16 v14 = "Invalid binary op constexpr record";
            goto LABEL_388;
          }
          int v163 = v472;
          uint64_t v164 = sub_1CC1E2160(*(_DWORD *)v472, v6);
          if ((v164 & 0x80000000) != 0)
          {
LABEL_220:
            uint64_t NullValue = (uint64_t)llvm::UndefValue::get((llvm::UndefValue *)v6, v11);
LABEL_342:
            ElementPtr = (llvm::Value *)NullValue;
            goto LABEL_343;
          }
          uint64_t v165 = (llvm *)v164;
          unint64_t v435 = llvm::BitcodeReaderValueList::getConstantFwdRef(v459, v163[2], (llvm::Type *)v6, v7);
          uint64_t v167 = llvm::BitcodeReaderValueList::getConstantFwdRef(v459, *((_DWORD *)v472 + 4), (llvm::Type *)v6, v7);
          int v453 = v9;
          unint64_t v439 = v8;
          uint64_t v420 = v6;
          if (v473 >= 4)
          {
            HIDWORD(v169) = v165 - 13;
            LODWORD(v169) = v165 - 13;
            unsigned int v168 = v169 >> 1;
            if (v168 < 7 && ((0x47u >> v168) & 1) != 0)
            {
              uint64_t v9 = v5;
              BOOL v171 = __p;
              uint64_t v172 = v457;
              char v314 = 3;
              uint64_t v170 = (llvm::Constant *)v435;
            }
            else
            {
              uint64_t v170 = (llvm::Constant *)v435;
              uint64_t v9 = v5;
              if ((v165 - 19) >= 9 || ((0x183u >> ((_BYTE)v165 - 19)) & 1) == 0)
              {
                BOOL v171 = __p;
                uint64_t v172 = v457;
                char v417 = 0;
LABEL_436:
                ElementPtr = llvm::ConstantFoldBinaryInstruction(v165, v170, (llvm::Constant *)v167, v166);
                if (!ElementPtr)
                {
                  int v339 = *(void ***)v170;
                  if (*(void *)v170)
                  {
                    v463.__r_.__value_.__r.__words[0] = (std::string::size_type)v435;
                    v463.__r_.__value_.__l.__size_ = (std::string::size_type)v167;
                    uint64_t v340 = **v339 + 1512;
                    LOBYTE(v465) = (_BYTE)v165;
                    BYTE1(v465) = v417;
                    WORD1(v465) = 0;
                    *(void *)&long long v466 = &v463;
                    *((void *)&v466 + 1) = 2;
                    long long v467 = 0u;
                    long long v468 = 0u;
                    uint64_t v469 = 0;
                    ElementPtr = (llvm::Value *)sub_1CC56C20C(v340, (uint64_t)v339, (unsigned __int8 *)&v465);
                  }
                  else
                  {
                    ElementPtr = 0;
                  }
                  uint64_t v3 = v458;
                }
                v457 = v172;
                std::string __p = v171;
                uint64_t v5 = v9;
                LODWORD(v9) = v453;
                uint64_t v8 = v439;
                uint64_t v6 = v420;
                goto LABEL_343;
              }
              BOOL v171 = __p;
              uint64_t v172 = v457;
              char v314 = 1;
            }
            char v417 = v314 & *((unsigned char *)v472 + 24);
            goto LABEL_436;
          }
          uint64_t v9 = v5;
          BOOL v171 = __p;
          uint64_t v172 = v457;
          char v417 = 0;
          uint64_t v170 = (llvm::Constant *)v435;
          goto LABEL_436;
        case 11:
          if (v473 <= 2) {
            goto LABEL_116;
          }
          int v157 = *(_DWORD *)v472;
          if (*(_DWORD *)v472 >= 0xDu) {
            goto LABEL_220;
          }
          unsigned int v158 = *((_DWORD *)v472 + 2);
          unint64_t v159 = (llvm::Type *)sub_1CC1E22AC(v460, v158);
          if (v159)
          {
            BOOL v160 = (llvm *)(v157 + 38);
            unsigned int v161 = llvm::BitcodeReaderValueList::getConstantFwdRef(v459, *((_DWORD *)v472 + 4), v159, v158);
            uint64_t NullValue = (uint64_t)llvm::UpgradeBitCastExpr(v160, (llvm::ConstantExpr *)v161, (llvm::Constant *)v6, v162);
            if (!NullValue) {
              uint64_t NullValue = (uint64_t)llvm::ConstantExpr::getCast(v160, (llvm::ConstantExpr *)v161, (llvm::Constant ***)v6, 0);
            }
            goto LABEL_342;
          }
LABEL_116:
          __int16 v14 = "Invalid cast constexpr record";
          goto LABEL_388;
        case 12:
        case 20:
        case 24:
          if (v473 <= 1)
          {
            __int16 v14 = "Constant GEP record must have at least two elements";
            goto LABEL_388;
          }
          v438 = v8;
          int v449 = v9;
          if (v470 != 24 && (v473 & 1) == 0)
          {
            unint64_t v18 = v7;
            std::string v19 = __p;
            std::string v20 = v457;
            uint64_t v21 = 0;
            unsigned int v22 = 0;
LABEL_204:
            uint64_t v148 = 0;
            LOBYTE(v149) = 0;
            LOBYTE(v150) = v13 == 20;
            uint64_t v151 = v472;
            goto LABEL_238;
          }
          unint64_t v18 = v7;
          std::string v19 = __p;
          std::string v20 = v457;
          uint64_t v21 = sub_1CC1E22AC(v460, *(_DWORD *)v472);
          if (v13 != 24)
          {
            unsigned int v22 = 1;
            goto LABEL_204;
          }
          uint64_t v151 = v472;
          uint64_t v150 = *((void *)v472 + 1) & 1;
          uint64_t v149 = *((void *)v472 + 1) >> 1;
          uint64_t v446 = v149 >> 8;
          unsigned int v22 = 2;
          uint64_t v148 = 0x100000000;
LABEL_238:
          v465 = (char *)&v466 + 8;
          *(void *)&long long v466 = 0x1000000000;
          v457 = v20;
          std::string __p = v19;
          if (v473 == v22) {
            goto LABEL_239;
          }
          uint64_t v415 = v148;
          unsigned __int8 v416 = v149;
          char v418 = v150;
          unint64_t v436 = (llvm::ConstantExpr *)v21;
          uint64_t v190 = v5;
          uint64_t v191 = v151[v22];
          do
          {
            uint64_t v192 = *((void *)v472 + v22);
            uint64_t v193 = (llvm::Type *)sub_1CC1E22AC(v460, v192);
            if (!v193)
            {
              v463.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid getelementptr constexpr record";
              __int16 v464 = 259;
              int v188 = (int)v3;
              uint64_t v189 = v190;
LABEL_247:
              sub_1CC1DDE58(v188, v189, (llvm::Twine *)&v463);
            }
            uint64_t v194 = llvm::BitcodeReaderValueList::getConstantFwdRef(v459, *((void *)v472 + v22 + 1), v193, v192);
            if (v466 >= (unint64_t)DWORD1(v466)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v465 + v466) = v194;
            v22 += 2;
            int v195 = v466 + 1;
            LODWORD(v466) = v466 + 1;
          }
          while (v22 != v473);
          uint64_t v5 = v190;
          if (!v195)
          {
LABEL_239:
            v463.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid gep with no operands";
            __int16 v464 = 259;
            int v188 = (int)v3;
            uint64_t v189 = v5;
            goto LABEL_247;
          }
          uint64_t v200 = sub_1CC1E22AC(v460, v191);
          if ((*(_DWORD *)(v200 + 8) & 0xFE) != 0x12)
          {
            int v258 = *(_DWORD *)(v200 + 8);
            LODWORD(v9) = v449;
            uint64_t v259 = (uint64_t)v436;
            uint64_t v8 = v438;
            unint64_t v7 = v18;
            goto LABEL_443;
          }
          uint64_t v201 = *(void *)(v460 + 544);
          uint64_t v202 = *(unsigned int *)(v460 + 560);
          if (v202)
          {
            unsigned int v203 = v202 - 1;
            unsigned int v204 = (int *)(v201 + 32 * ((v202 - 1) & (37 * v191)));
            int v205 = *v204;
            if (*v204 == v191) {
              goto LABEL_259;
            }
            int v356 = 1;
            LODWORD(v357) = v203 & (37 * v191);
            while (1)
            {
              uint64_t v3 = v458;
              uint64_t v5 = v190;
              if (v205 == -1) {
                break;
              }
              int v358 = v357 + v356++;
              uint64_t v357 = v358 & v203;
              int v205 = *(_DWORD *)(v201 + 32 * v357);
              if (v205 == v191)
              {
                unsigned int v204 = (int *)(v201 + 32 * v357);
                uint64_t v3 = v458;
                uint64_t v5 = v190;
                goto LABEL_259;
              }
            }
          }
          unsigned int v204 = (int *)(v201 + 32 * v202);
LABEL_259:
          unint64_t v7 = v18;
          if ((int *)(v201 + 32 * v202) == v204)
          {
            LODWORD(v191) = -1;
            LODWORD(v9) = v449;
            uint64_t v8 = v438;
          }
          else
          {
            LODWORD(v9) = v449;
            uint64_t v8 = v438;
            if (v204[4]) {
              LODWORD(v191) = **((_DWORD **)v204 + 1);
            }
            else {
              LODWORD(v191) = -1;
            }
          }
          uint64_t v200 = sub_1CC1E22AC(v460, v191);
          uint64_t v259 = (uint64_t)v436;
          if (!v200) {
            goto LABEL_448;
          }
          int v258 = *(unsigned __int8 *)(v200 + 8);
LABEL_443:
          if (v258 != 15)
          {
LABEL_448:
            unint64_t v317 = "GEP base operand must be pointer or vector of pointer";
            goto LABEL_449;
          }
          if (!v259)
          {
            uint64_t v259 = sub_1CC1E3458(v460, v191);
            if (v259) {
              goto LABEL_451;
            }
            unint64_t v317 = "Missing element type for old-style constant GEP";
LABEL_449:
            v463.__r_.__value_.__r.__words[0] = (std::string::size_type)v317;
            __int16 v464 = 259;
            sub_1CC1DDE58((int)v3, v5, (llvm::Twine *)&v463);
          }
          uint64_t v316 = *(void *)(v200 + 24);
          if (v316 && v316 != v259)
          {
            unint64_t v317 = "Explicit gep operator type does not match pointee type of pointer operand";
            goto LABEL_449;
          }
LABEL_451:
          ElementPtr = (llvm::Value *)llvm::ConstantExpr::getGetElementPtr(v259, *(uint64_t **)v465, (uint64_t)v465 + 8, (8 * v466 - 8) >> 3, v418, v416 | (unint64_t)(v446 << 8) | v415, 0);
          if (v465 != (char *)&v466 + 8) {
            free(v465);
          }
LABEL_343:
          llvm::BitcodeReaderValueList::assignValue(v459, ElementPtr, v9, v7, v3);
          int v289 = *v3 != 0;
          if (!*v3) {
            LODWORD(v9) = v9 + 1;
          }
LABEL_389:
          if (v471)
          {
            v290 = v470;
            unsigned int v470 = 0;
            if (v290) {
              (*(void (**)(void *))(*(void *)v290 + 8))(v290);
            }
          }
          if ((v289 | 2) != 2)
          {
LABEL_542:
            uint64_t v368 = v457;
            goto LABEL_543;
          }
          goto LABEL_3;
        case 13:
          if (v473 <= 2)
          {
            __int16 v14 = "Invalid select constexpr record";
            goto LABEL_388;
          }
          unsigned int v426 = v7;
          std::string::size_type v183 = *(void *)v472;
          uint64_t v182 = *((void *)v472 + 1);
          uint64_t v184 = *((void *)v472 + 2);
          if (v456 < v447)
          {
            *(void *)uint64_t v456 = v6;
            *((_DWORD *)v456 + 2) = v426;
            *((void *)v456 + 2) = v183;
            *((void *)v456 + 3) = v182;
            unint64_t v7 = v426;
            *((void *)v456 + 4) = v184;
            *((_DWORD *)v456 + 10) = v9;
            v456 += 48;
LABEL_373:
            llvm::BitcodeReaderValueList::getConstantFwdRef(v459, v9, (llvm::Type *)v6, v7);
            LODWORD(v9) = v9 + 1;
            int v289 = 2;
            goto LABEL_389;
          }
          unint64_t v232 = 0xAAAAAAAAAAAAAAABLL * ((v456 - __p) >> 4) + 1;
          if (v232 > 0x555555555555555) {
            goto LABEL_590;
          }
          if (0x5555555555555556 * ((v447 - __p) >> 4) > v232) {
            unint64_t v232 = 0x5555555555555556 * ((v447 - __p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v447 - __p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v233 = 0x555555555555555;
          }
          else {
            unint64_t v233 = v232;
          }
          if (!v233)
          {
            int v234 = 0;
            goto LABEL_368;
          }
          if (v233 <= 0x555555555555555)
          {
            int v234 = (char *)operator new(48 * v233);
LABEL_368:
            int v275 = &v234[16 * ((v456 - __p) >> 4)];
            *(void *)int v275 = v6;
            *((_DWORD *)v275 + 2) = v426;
            *((void *)v275 + 2) = v183;
            *((void *)v275 + 3) = v182;
            *((void *)v275 + 4) = v184;
            *((_DWORD *)v275 + 10) = v9;
            unsigned int v276 = v275;
            for (uint64_t i = v456; i != __p; i -= 48)
            {
              long long v278 = *((_OWORD *)i - 3);
              long long v279 = *((_OWORD *)i - 1);
              *((_OWORD *)v276 - 2) = *((_OWORD *)i - 2);
              *((_OWORD *)v276 - 1) = v279;
              *((_OWORD *)v276 - 3) = v278;
              v276 -= 48;
            }
            uint64_t v447 = &v234[48 * v233];
            uint64_t v456 = v275 + 48;
            if (__p) {
              operator delete(__p);
            }
            std::string __p = v276;
            unint64_t v7 = v426;
            goto LABEL_373;
          }
          goto LABEL_591;
        case 14:
          if (v473 <= 2) {
            goto LABEL_387;
          }
          int v96 = *(_DWORD *)v472;
          int v97 = (llvm::Type *)sub_1CC1E22AC(v460, *(_DWORD *)v472);
          if (!v97 || (*((_DWORD *)v97 + 2) & 0xFE) != 0x12) {
            goto LABEL_387;
          }
          unsigned int v98 = llvm::BitcodeReaderValueList::getConstantFwdRef(v459, *((_DWORD *)v472 + 2), v97, v96);
          unsigned int v99 = *((_DWORD *)v472 + 4);
          if (v473 == 4)
          {
            uint64_t v100 = sub_1CC1E22AC(v460, v99);
            if (!v100)
            {
LABEL_387:
              __int16 v14 = "Invalid extractelement constexpr record";
LABEL_388:
              v465 = v14;
              WORD4(v467) = 259;
              sub_1CC1DDE58((int)v3, v5, (llvm::Twine *)&v465);
            }
            uint64_t v101 = (llvm::Type *)v100;
            unsigned int v102 = *((_DWORD *)v472 + 6);
            int v103 = v459;
            int v104 = v99;
          }
          else
          {
            uint64_t v101 = (llvm::Type *)(**(void **)(v460 + 424) + 1960);
            int v104 = __src;
            int v103 = v459;
            unsigned int v102 = *((_DWORD *)v472 + 4);
          }
          std::string::size_type v285 = llvm::BitcodeReaderValueList::getConstantFwdRef(v103, v102, v101, v104);
          if (v285)
          {
            ElementPtr = (llvm::Value *)llvm::ConstantFoldExtractElementInstruction((llvm *)v98, (llvm::Constant *)v285, v284);
            if (ElementPtr) {
              goto LABEL_343;
            }
            unsigned int v425 = v7;
            uint64_t v176 = v6;
            uint64_t v177 = v8;
            unint64_t v286 = *v98;
            uint64_t v287 = *((void *)*v98 + 3);
            if (v287)
            {
              v463.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
              v463.__r_.__value_.__l.__size_ = (std::string::size_type)v285;
              uint64_t v288 = **(void **)v286 + 1512;
              LODWORD(v465) = 61;
              *(void *)&long long v466 = &v463;
              *((void *)&v466 + 1) = 2;
              long long v467 = 0u;
              long long v468 = 0u;
              uint64_t v469 = 0;
              ElementPtr = (llvm::Value *)sub_1CC56C20C(v288, v287, (unsigned __int8 *)&v465);
            }
            else
            {
              ElementPtr = 0;
            }
            uint64_t v3 = v458;
            goto LABEL_337;
          }
          goto LABEL_387;
        case 15:
          if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
            uint64_t v108 = (llvm::Type **)v6;
          }
          else {
            uint64_t v108 = 0;
          }
          if (v473 >= 3 && v108)
          {
            v434 = (llvm::ConstantExpr *)llvm::BitcodeReaderValueList::getConstantFwdRef(v459, *(_DWORD *)v472, (llvm::Type *)v108, v7);
            uint64_t v109 = *(void *)(v460 + 544);
            uint64_t v110 = *(unsigned int *)(v460 + 560);
            if (v110)
            {
              unsigned int v111 = v110 - 1;
              uint64_t v112 = (int *)(v109 + 32 * ((v110 - 1) & (37 * v7)));
              int v113 = *v112;
              if (v7 != *v112)
              {
                unint64_t v342 = v7;
                uint64_t v343 = v6;
                unint64_t v344 = v8;
                int v345 = v9;
                uint64_t v346 = v5;
                int v347 = 1;
                LODWORD(v348) = v111 & (37 * v7);
                do
                {
                  uint64_t v3 = v458;
                  uint64_t v5 = v346;
                  LODWORD(v9) = v345;
                  uint64_t v8 = v344;
                  uint64_t v6 = v343;
                  unint64_t v7 = v342;
                  if (v113 == -1) {
                    goto LABEL_518;
                  }
                  int v349 = v348 + v347++;
                  uint64_t v348 = v349 & v111;
                  int v113 = *(_DWORD *)(v109 + 32 * v348);
                }
                while (v342 != v113);
                uint64_t v112 = (int *)(v109 + 32 * v348);
                uint64_t v3 = v458;
                uint64_t v5 = v346;
                LODWORD(v9) = v345;
                uint64_t v8 = v344;
                uint64_t v6 = v343;
                unint64_t v7 = v342;
              }
            }
            else
            {
LABEL_518:
              uint64_t v112 = (int *)(v109 + 32 * v110);
            }
            uint64_t v114 = v6;
            uint64_t v115 = v8;
            if ((int *)(v109 + 32 * v110) == v112 || !v112[4])
            {
              int v116 = v9;
              int v117 = -1;
            }
            else
            {
              int v116 = v9;
              int v117 = **((_DWORD **)v112 + 1);
            }
            unsigned int v220 = llvm::BitcodeReaderValueList::getConstantFwdRef(v459, *((_DWORD *)v472 + 2), v108[3], v117);
            unsigned int v221 = *((_DWORD *)v472 + 4);
            if (v473 == 4)
            {
              uint64_t v222 = sub_1CC1E22AC(v460, v221);
              if (!v222)
              {
                v465 = "Invalid insertelement constexpr record";
                WORD4(v467) = 259;
                sub_1CC1DDE58((int)v3, v5, (llvm::Twine *)&v465);
              }
              uint64_t v223 = (llvm::Type *)v222;
              unsigned int v224 = *((_DWORD *)v472 + 6);
              uint64_t v225 = v459;
              int v226 = v221;
            }
            else
            {
              uint64_t v223 = (llvm::Type *)(**(void **)(v460 + 424) + 1960);
              int v226 = __src;
              uint64_t v225 = v459;
              unsigned int v224 = *((_DWORD *)v472 + 4);
            }
            unsigned int v227 = llvm::BitcodeReaderValueList::getConstantFwdRef(v225, v224, v223, v226);
            LODWORD(v9) = v116;
            uint64_t v8 = v115;
            if (!v227)
            {
              v465 = "Invalid insertelement constexpr record";
              WORD4(v467) = 259;
              sub_1CC1DDE58((int)v3, v5, (llvm::Twine *)&v465);
            }
            ElementPtr = llvm::ConstantExpr::getInsertElement(v434, (llvm::Constant *)v220, (llvm::Constant *)v227, 0, v228);
            uint64_t v6 = v114;
            goto LABEL_343;
          }
          __int16 v14 = "Invalid insertelement constexpr record";
          goto LABEL_388;
        case 16:
          if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
            uint64_t v124 = v6;
          }
          else {
            uint64_t v124 = 0;
          }
          if (v473 < 3 || !v124) {
            goto LABEL_162;
          }
          unsigned int v423 = v7;
          int v451 = v9;
          BOOL v433 = (llvm::ConstantExpr *)v5;
          uint64_t v70 = v8;
          std::string::size_type v126 = *(void *)v472;
          uint64_t v125 = *((void *)v472 + 1);
          uint64_t v127 = *((void *)v472 + 2);
          if (v8 < v448)
          {
            *(void *)uint64_t v8 = v124;
            *((_DWORD *)v8 + 2) = v423;
            *((void *)v8 + 2) = v124;
            *((void *)v8 + 3) = v126;
            *((void *)v8 + 4) = v125;
            *((void *)v8 + 5) = v127;
            unint64_t v7 = v423;
            goto LABEL_161;
          }
          unint64_t v229 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v457) >> 3) + 1;
          if (v229 > 0x492492492492492) {
            goto LABEL_590;
          }
          if (0xDB6DB6DB6DB6DB6ELL * ((v448 - v457) >> 3) > v229) {
            unint64_t v229 = 0xDB6DB6DB6DB6DB6ELL * ((v448 - v457) >> 3);
          }
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v448 - v457) >> 3)) >= 0x249249249249249) {
            unint64_t v230 = 0x492492492492492;
          }
          else {
            unint64_t v230 = v229;
          }
          if (!v230)
          {
            unint64_t v231 = 0;
            goto LABEL_363;
          }
          if (v230 <= 0x492492492492492)
          {
            unint64_t v231 = (char *)operator new(56 * v230);
LABEL_363:
            int v267 = &v231[8 * ((v8 - v457) >> 3)];
            *(void *)int v267 = v124;
            *((_DWORD *)v267 + 2) = v423;
            *((void *)v267 + 2) = v124;
            *((void *)v267 + 3) = v126;
            *((void *)v267 + 4) = v125;
            *((void *)v267 + 5) = v127;
            *((_DWORD *)v267 + 12) = v451;
            uint64_t v268 = v457;
            if (v8 == v457)
            {
              uint64_t v274 = &v231[8 * ((v8 - v457) >> 3)];
              uint64_t v3 = v458;
              uint64_t v5 = (uint64_t)v433;
            }
            else
            {
              uint64_t v269 = v8;
              v270 = &v231[8 * ((v8 - v457) >> 3)];
              uint64_t v3 = v458;
              uint64_t v5 = (uint64_t)v433;
              do
              {
                long long v271 = *(_OWORD *)(v269 - 56);
                long long v272 = *(_OWORD *)(v269 - 40);
                long long v273 = *(_OWORD *)(v269 - 24);
                uint64_t v274 = v270 - 56;
                *((void *)v270 - 1) = *((void *)v269 - 1);
                *(_OWORD *)(v270 - 24) = v273;
                *(_OWORD *)(v270 - 40) = v272;
                *(_OWORD *)(v270 - 56) = v271;
                v269 -= 56;
                v270 -= 56;
              }
              while (v269 != v457);
            }
            unint64_t v448 = &v231[56 * v230];
            uint64_t v8 = v267 + 56;
            int v128 = v451;
LABEL_410:
            unint64_t v7 = v423;
            if (v268) {
              operator delete(v268);
            }
            v457 = v274;
            goto LABEL_413;
          }
          goto LABEL_591;
        case 17:
          if (v473 <= 3)
          {
            __int16 v14 = "Invalid cmp constexpt record";
            goto LABEL_388;
          }
          int v173 = *(_DWORD *)v472;
          v174 = (llvm::Type *)sub_1CC1E22AC(v460, *(_DWORD *)v472);
          if (v174)
          {
            uint64_t v175 = v174;
            unsigned int v425 = v7;
            uint64_t v176 = v6;
            uint64_t v177 = v8;
            uint64_t v178 = llvm::BitcodeReaderValueList::getConstantFwdRef(v459, *((_DWORD *)v472 + 2), v174, v173);
            BOOL v179 = llvm::BitcodeReaderValueList::getConstantFwdRef(v459, *((_DWORD *)v472 + 4), v175, v173);
            if ((*((_DWORD *)v175 + 2) & 0xFE) == 0x12) {
              unsigned int v181 = *(unsigned __int8 *)(**((void **)v175 + 2) + 8);
            }
            else {
              unsigned int v181 = *((_DWORD *)v175 + 2);
            }
            uint64_t v256 = (llvm::ConstantExpr *)*((unsigned __int16 *)v472 + 12);
            if (v181 > 6) {
              uint64_t ICmp = (uint64_t)llvm::ConstantExpr::getICmp(v256, (llvm::Type *)v178, (llvm::Constant *)v179, 0, v180);
            }
            else {
              uint64_t ICmp = llvm::ConstantExpr::getFCmp(v256, (uint64_t ***)v178, (llvm::Constant *)v179, 0);
            }
            ElementPtr = (llvm::Value *)ICmp;
LABEL_337:
            uint64_t v8 = v177;
            uint64_t v6 = v176;
LABEL_338:
            unint64_t v7 = v425;
            goto LABEL_343;
          }
          __int16 v14 = "Invalid cmp constexpr record";
          goto LABEL_388;
        case 18:
          if (v473 <= 1) {
            goto LABEL_199;
          }
          memset(&v463, 0, sizeof(v463));
          memset(&v461, 0, sizeof(v461));
          uint64_t v134 = *((void *)v472 + 1);
          unint64_t v135 = (v134 + 2);
          if (v135 >= v473) {
            goto LABEL_230;
          }
          uint64_t v136 = *((void *)v472 + v135);
          if (v473 < (int)v134 + (int)v136 + 3) {
            goto LABEL_230;
          }
          unsigned int v424 = v7;
          uint64_t v419 = v6;
          uint64_t v58 = v8;
          int v450 = v9;
          unint64_t v137 = *(void *)v472;
          if (v134)
          {
            uint64_t v138 = 0;
            do
              std::string::push_back(&v463, *((void *)v472 + (v138++ + 2)));
            while (v134 != v138);
          }
          if (v136)
          {
            uint64_t v136 = v136;
            unsigned int v139 = v134 + 3;
            do
            {
              std::string::push_back(&v461, *((void *)v472 + v139++));
              --v136;
            }
            while (v136);
          }
          llvm::UpgradeInlineAsmString(&v463);
          unint64_t v7 = v424;
          if (!v445) {
            goto LABEL_460;
          }
          if ((v463.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v140 = &v463;
          }
          else {
            int v140 = (std::string *)v463.__r_.__value_.__r.__words[0];
          }
          if ((v463.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t size = *((unsigned char *)&v463.__r_.__value_.__s + 23) & 0x7F;
          }
          else {
            uint64_t size = v463.__r_.__value_.__l.__size_;
          }
          if ((v461.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v142 = &v461;
          }
          else {
            uint64_t v142 = (std::string *)v461.__r_.__value_.__r.__words[0];
          }
          if ((v461.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v143 = *((unsigned char *)&v461.__r_.__value_.__s + 23) & 0x7F;
          }
          else {
            uint64_t v143 = v461.__r_.__value_.__l.__size_;
          }
          uint64_t v66 = llvm::InlineAsm::get(v445, (uint64_t)v140, size, (uint64_t)v142, v143, v137 & 1, v137 > 1, 0, 0);
          goto LABEL_500;
        case 19:
          if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
            uint64_t v67 = v6;
          }
          else {
            uint64_t v67 = 0;
          }
          uint64_t v68 = sub_1CC1E22AC(v460, *(_DWORD *)v472);
          if (!v68
            || ((*(_DWORD *)(v68 + 8) & 0xFE) != 0x12 ? (uint64_t v69 = 0) : (uint64_t v69 = v68),
                v473 < 4 || !v67 || (*(_DWORD *)(v68 + 8) & 0xFE) != 0x12))
          {
LABEL_162:
            __int16 v14 = "Invalid shufflevector constexpr record";
            goto LABEL_388;
          }
          int v451 = v9;
          BOOL v433 = (llvm::ConstantExpr *)v5;
          uint64_t v70 = v8;
          uint64_t v71 = *((void *)v472 + 1);
          uint64_t v72 = *((void *)v472 + 2);
          uint64_t v73 = *((void *)v472 + 3);
          if (v8 < v448)
          {
            *(void *)uint64_t v8 = v69;
            *((_DWORD *)v8 + 2) = v7;
            *((void *)v8 + 2) = v67;
            *((void *)v8 + 3) = v71;
            *((void *)v8 + 4) = v72;
            *((void *)v8 + 5) = v73;
LABEL_161:
            int v128 = v451;
            *((_DWORD *)v70 + 12) = v451;
            uint64_t v8 = v70 + 56;
            uint64_t v5 = (uint64_t)v433;
LABEL_413:
            LODWORD(v9) = v128 + 1;
            int v289 = 2;
            goto LABEL_389;
          }
          unsigned int v423 = v7;
          unint64_t v245 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v457) >> 3) + 1;
          if (v245 > 0x492492492492492) {
LABEL_590:
          }
            abort();
          if (0xDB6DB6DB6DB6DB6ELL * ((v448 - v457) >> 3) > v245) {
            unint64_t v245 = 0xDB6DB6DB6DB6DB6ELL * ((v448 - v457) >> 3);
          }
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v448 - v457) >> 3)) >= 0x249249249249249) {
            unint64_t v246 = 0x492492492492492;
          }
          else {
            unint64_t v246 = v245;
          }
          if (v246)
          {
            if (v246 > 0x492492492492492) {
LABEL_591:
            }
              sub_1CB833614();
            uint64_t v247 = *((void *)v472 + 1);
            int v248 = (char *)operator new(56 * v246);
            uint64_t v71 = v247;
          }
          else
          {
            int v248 = 0;
          }
          unint64_t v296 = &v248[8 * ((v8 - v457) >> 3)];
          *(void *)unint64_t v296 = v69;
          *((_DWORD *)v296 + 2) = v423;
          *((void *)v296 + 2) = v67;
          *((void *)v296 + 3) = v71;
          *((void *)v296 + 4) = v72;
          *((void *)v296 + 5) = v73;
          int v128 = v451;
          *((_DWORD *)v296 + 12) = v451;
          uint64_t v268 = v457;
          if (v8 == v457)
          {
            uint64_t v274 = &v248[8 * ((v8 - v457) >> 3)];
            uint64_t v3 = v458;
            uint64_t v5 = (uint64_t)v433;
          }
          else
          {
            int v297 = v8;
            unint64_t v298 = &v248[8 * ((v8 - v457) >> 3)];
            uint64_t v3 = v458;
            uint64_t v5 = (uint64_t)v433;
            do
            {
              long long v299 = *(_OWORD *)(v297 - 56);
              long long v300 = *(_OWORD *)(v297 - 40);
              long long v301 = *(_OWORD *)(v297 - 24);
              uint64_t v274 = v298 - 56;
              *((void *)v298 - 1) = *((void *)v297 - 1);
              *(_OWORD *)(v298 - 24) = v301;
              *(_OWORD *)(v298 - 40) = v300;
              *(_OWORD *)(v298 - 56) = v299;
              v297 -= 56;
              v298 -= 56;
            }
            while (v297 != v457);
          }
          unint64_t v448 = &v248[56 * v246];
          uint64_t v8 = v296 + 56;
          goto LABEL_410;
        case 21:
          if (v473 > 2)
          {
            int v129 = *(_DWORD *)v472;
            uint64_t v130 = (llvm::Type *)sub_1CC1E22AC(v460, *(_DWORD *)v472);
            if (v130)
            {
              uint64_t v131 = llvm::BitcodeReaderValueList::getConstantFwdRef(v459, *((_DWORD *)v472 + 2), v130, v129);
              if (!v131 || (uint64_t v133 = (llvm::BlockAddress *)v131, *((unsigned char *)v131 + 16)))
              {
                v465 = "Invalid blockaddress record";
                WORD4(v467) = 259;
                sub_1CC1DDE58((int)v3, v5, (llvm::Twine *)&v465);
              }
              unsigned int v429 = v7;
              v442 = v8;
              uint64_t v291 = v5;
              v463.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
              uint64_t v292 = *((void *)v472 + 2);
              uint64_t v293 = v292;
              if (v292)
              {
                if (v131[9] == (llvm::Type *)(v131 + 9))
                {
                  uint64_t v327 = sub_1CD4F7F5C(v444, (uint64_t *)&v463);
                  v329 = (char **)(v327 + 1);
                  uint64_t v328 = (char *)v327[1];
                  int v330 = (char *)v327[2];
                  if (v328 == v330)
                  {
                    uint64_t v331 = v327;
                    sub_1CD45F140(v443, &v463);
                    uint64_t v328 = (char *)v331[1];
                    int v330 = (char *)v331[2];
                  }
                  uint64_t v332 = v330 - v328;
                  unint64_t v333 = (v292 + 1);
                  if (v333 > v332 >> 3)
                  {
                    sub_1CC1E3B50(v329, v333 - (v332 >> 3));
                    uint64_t v328 = *v329;
                  }
                  int v295 = *(llvm::Function **)&v328[8 * v292];
                  uint64_t v5 = v291;
                  if (!v295)
                  {
                    WORD4(v467) = 257;
                    operator new();
                  }
                  goto LABEL_484;
                }
                uint64_t v294 = v131[10];
                uint64_t v5 = v291;
                while (v294 != (llvm::Type *)(v131 + 9))
                {
                  uint64_t v294 = (llvm::Type *)*((void *)v294 + 1);
                  if (!--v293)
                  {
                    if (v294) {
                      int v295 = (llvm::Type *)((char *)v294 - 24);
                    }
                    else {
                      int v295 = 0;
                    }
LABEL_484:
                    ElementPtr = llvm::BlockAddress::get(v133, v295, v132);
                    uint64_t v8 = v442;
                    unint64_t v7 = v429;
                    goto LABEL_343;
                  }
                }
                v465 = "Invalid ID";
                WORD4(v467) = 259;
                int v309 = (int)v3;
                uint64_t v310 = v291;
              }
              else
              {
                v465 = "Invalid ID";
                WORD4(v467) = 259;
                int v309 = (int)v3;
                uint64_t v310 = v291;
              }
              sub_1CC1DDE58(v309, v310, (llvm::Twine *)&v465);
            }
          }
          __int16 v14 = "Invalid blockaddress record";
          goto LABEL_388;
        case 22:
          uint64_t v23 = v473;
          if (!v473)
          {
            __int16 v14 = "Invalid data record";
            goto LABEL_388;
          }
          long long v24 = *(llvm::FixedVectorType **)(v6 + 24);
          unsigned int v25 = *((_DWORD *)v24 + 2);
          unsigned int v26 = v25 >> 8;
          if (v25 == 13 && v26 == 8)
          {
            int v27 = (uint64_t *)v472;
            v465 = &v467;
            long long v466 = xmmword_1CDB15990;
            if (v473 >= 0x11) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            uint64_t v28 = &v467;
            uint64_t v29 = 8 * v473;
            do
            {
              uint64_t v30 = *v27++;
              *(unsigned char *)uint64_t v28 = v30;
              uint64_t v28 = (long long *)((char *)v28 + 1);
              v29 -= 8;
            }
            while (v29);
            __int16 v31 = (llvm::Type *)(v466 + v23);
            *(void *)&long long v466 = v31;
            int v32 = *(uint64_t **)(v460 + 424);
            if ((*(_DWORD *)(v6 + 8) & 0xFE) != 0x12)
            {
              String = sub_1CD4F7E78(*v32, v465, v31);
              goto LABEL_268;
            }
            int v33 = v465;
            llvm::FixedVectorType::get((llvm::FixedVectorType *)(*v32 + 1912), v31);
            uint64_t v35 = v34;
            int v36 = v33;
            uint64_t v37 = v31;
LABEL_267:
            String = llvm::ConstantDataSequential::getImpl(v36, v37, v35);
LABEL_268:
            ElementPtr = String;
            int v210 = (char *)v465;
            unsigned int v211 = (char *)&v467;
            goto LABEL_269;
          }
          if (v25 == 13 && v26 == 16)
          {
            v465 = &v467;
            long long v466 = xmmword_1CDB15990;
            sub_1CC1E3518(&v465, (uint64_t *)v472, (uint64_t *)v472 + v473);
            unsigned int v206 = *(uint64_t **)(v460 + 424);
            if ((*(_DWORD *)(v6 + 8) & 0xFE) != 0x12)
            {
              String = sub_1CD4F7EC4(*v206, v465, (llvm::Type *)v466);
              goto LABEL_268;
            }
            uint64_t v207 = v465;
            uint64_t v208 = v466;
            llvm::FixedVectorType::get((llvm::FixedVectorType *)(*v206 + 1936), (llvm::Type *)v466);
            uint64_t v35 = v209;
            uint64_t v37 = (llvm::Type *)(2 * v208);
LABEL_266:
            int v36 = v207;
            goto LABEL_267;
          }
          if (v25 == 13 && v26 == 32)
          {
            int v235 = (uint64_t *)v472;
            v465 = (char *)&v466 + 8;
            *(void *)&long long v466 = 0x1000000000;
            if (v473 >= 0x11) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v236 = 8 * v473;
            uint64_t v237 = (_DWORD *)&v466 + 2;
            do
            {
              uint64_t v238 = *v235++;
              *v237++ = v238;
              v236 -= 8;
            }
            while (v236);
            unint64_t v239 = (llvm::Type *)(v466 + v23);
            LODWORD(v466) = v239;
            uint64_t v240 = *(void *)(v460 + 424);
            if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
            {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(void *)v240 + 1960), v239);
              uint64_t v242 = v241;
              uint64_t v243 = (llvm::Type *)(4 * v239);
              unsigned int v244 = (char *)&v466 + 8;
            }
            else
            {
              uint64_t v242 = llvm::ArrayType::get((llvm::ArrayType *)(*(void *)v240 + 1960), v239);
              unsigned int v244 = (char *)&v466 + 8;
              uint64_t v243 = (llvm::Type *)(4 * v239);
            }
          }
          else
          {
            if (v25 != 13 || v26 != 64)
            {
              switch((char)v25)
              {
                case 0:
                case 1:
                  v465 = &v467;
                  long long v466 = xmmword_1CDB15990;
                  sub_1CC1E3518(&v465, (uint64_t *)v472, (uint64_t *)v472 + v473);
                  uint64_t v207 = v465;
                  uint64_t v311 = v466;
                  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
                    llvm::FixedVectorType::get(v24, (llvm::Type *)v466);
                  }
                  else {
                    uint64_t v312 = llvm::ArrayType::get(v24, (llvm::Type *)v466);
                  }
                  uint64_t v35 = v312;
                  uint64_t v37 = (llvm::Type *)(2 * v311);
                  goto LABEL_266;
                case 2:
                  unsigned int v431 = v7;
                  int v452 = v9;
                  unint64_t v321 = (uint64_t *)v472;
                  v465 = (char *)&v466 + 8;
                  *(void *)&long long v466 = 0x1000000000;
                  if (v473 >= 0x11) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  uint64_t v322 = 8 * v473;
                  unint64_t v323 = (_DWORD *)&v466 + 2;
                  do
                  {
                    uint64_t v324 = *v321++;
                    *v323++ = v324;
                    v322 -= 8;
                  }
                  while (v322);
                  v325 = (llvm::Type *)(v466 + v23);
                  LODWORD(v466) = v325;
                  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
                    llvm::FixedVectorType::get(v24, v325);
                  }
                  else {
                    uint64_t v326 = llvm::ArrayType::get(v24, v325);
                  }
                  unint64_t v7 = v431;
                  ElementPtr = llvm::ConstantDataSequential::getImpl((unsigned char *)&v466 + 8, (llvm::Type *)(4 * v325), v326);
                  unint64_t v308 = v465;
                  if (v465 == (char *)&v466 + 8) {
                    goto LABEL_423;
                  }
                  goto LABEL_422;
                case 3:
                  unsigned int v425 = v7;
                  v465 = (char *)&v466 + 8;
                  *(void *)&long long v466 = 0x1000000000;
                  sub_1CBFCBB74((unsigned int *)&v465, v472, (unsigned char *)v472 + 8 * v473);
                  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
                    FP = llvm::ConstantDataVector::getFP(v24, v465, (llvm::Type *)v466);
                  }
                  else {
                    FP = llvm::ConstantDataArray::getFP(v24, v465, (llvm::Type *)v466);
                  }
                  ElementPtr = FP;
                  if (v465 != (char *)&v466 + 8) {
                    free(v465);
                  }
                  uint64_t v3 = v458;
                  goto LABEL_338;
                default:
                  __int16 v14 = "Invalid type for value";
                  goto LABEL_388;
              }
            }
            v465 = (char *)&v466 + 8;
            *(void *)&long long v466 = 0x1000000000;
            sub_1CBFCBB74((unsigned int *)&v465, v472, (unsigned char *)v472 + 8 * v473);
            unint64_t v280 = *(uint64_t **)(v460 + 424);
            if ((*(_DWORD *)(v6 + 8) & 0xFE) != 0x12)
            {
              uint64_t v313 = sub_1CD4F7F10(*v280, v465, (llvm::Type *)v466);
              goto LABEL_431;
            }
            uint64_t v281 = v465;
            uint64_t v282 = v466;
            llvm::FixedVectorType::get((llvm::FixedVectorType *)(*v280 + 1984), (llvm::Type *)v466);
            uint64_t v242 = v283;
            uint64_t v243 = (llvm::Type *)(8 * v282);
            unsigned int v244 = v281;
          }
          uint64_t v313 = llvm::ConstantDataSequential::getImpl(v244, v243, v242);
LABEL_431:
          ElementPtr = v313;
          int v210 = (char *)v465;
          unsigned int v211 = (char *)&v466 + 8;
LABEL_269:
          if (v210 != v211) {
            free(v210);
          }
          goto LABEL_343;
        case 23:
          if (v473 <= 1) {
            goto LABEL_199;
          }
          memset(&v463, 0, sizeof(v463));
          memset(&v461, 0, sizeof(v461));
          uint64_t v55 = *((void *)v472 + 1);
          unint64_t v56 = (v55 + 2);
          if (v56 >= v473) {
            goto LABEL_230;
          }
          uint64_t v57 = *((void *)v472 + v56);
          if (v473 < (int)v55 + (int)v57 + 3) {
            goto LABEL_230;
          }
          unsigned int v422 = v7;
          uint64_t v419 = v6;
          uint64_t v58 = v8;
          int v450 = v9;
          std::string::size_type v59 = *(void *)v472;
          if (v55)
          {
            uint64_t v60 = 0;
            do
              std::string::push_back(&v463, *((void *)v472 + (v60++ + 2)));
            while (v55 != v60);
          }
          if (v57)
          {
            uint64_t v57 = v57;
            unsigned int v61 = v55 + 3;
            do
            {
              std::string::push_back(&v461, *((void *)v472 + v61++));
              --v57;
            }
            while (v57);
          }
          llvm::UpgradeInlineAsmString(&v463);
          unint64_t v7 = v422;
          if (!v445) {
            goto LABEL_460;
          }
          if ((v463.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v62 = &v463;
          }
          else {
            int v62 = (std::string *)v463.__r_.__value_.__r.__words[0];
          }
          if ((v463.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v63 = *((unsigned char *)&v463.__r_.__value_.__s + 23) & 0x7F;
          }
          else {
            uint64_t v63 = v463.__r_.__value_.__l.__size_;
          }
          if ((v461.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v64 = &v461;
          }
          else {
            uint64_t v64 = (std::string *)v461.__r_.__value_.__r.__words[0];
          }
          if ((v461.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v65 = *((unsigned char *)&v461.__r_.__value_.__s + 23) & 0x7F;
          }
          else {
            uint64_t v65 = v461.__r_.__value_.__l.__size_;
          }
          uint64_t v66 = llvm::InlineAsm::get(v445, (uint64_t)v62, v63, (uint64_t)v64, v65, v59 & 1, (v59 & 2) != 0, v59 >> 2, 0);
          goto LABEL_500;
        case 25:
          if (v473 <= 1)
          {
            __int16 v14 = "Invalid unary op constexpr record";
            goto LABEL_388;
          }
          unint64_t v152 = v472;
          uint64_t v153 = sub_1CC1E210C(*(_DWORD *)v472, v6);
          if ((v153 & 0x80000000) != 0) {
            goto LABEL_220;
          }
          uint64_t v154 = (llvm::ConstantExpr *)v153;
          uint64_t v155 = (unsigned __int8 *)llvm::BitcodeReaderValueList::getConstantFwdRef(v459, v152[2], (llvm::Type *)v6, v7);
          uint64_t NullValue = llvm::ConstantExpr::get(v154, v155, 0, 0, v156);
          goto LABEL_342;
        case 26:
          uint64_t NullValue = (uint64_t)llvm::PoisonValue::get((llvm::PoisonValue *)v6, v11);
          goto LABEL_342;
        case 27:
          if (v473 > 1)
          {
            int v38 = *(_DWORD *)v472;
            unint64_t v39 = (llvm::Type *)sub_1CC1E22AC(v460, *(_DWORD *)v472);
            if (v39)
            {
              uint64_t v40 = (unsigned __int8 *)llvm::BitcodeReaderValueList::getConstantFwdRef(v459, *((_DWORD *)v472 + 2), v39, v38);
              if (v40)
              {
                if (v40[16] < 4u)
                {
                  uint64_t NullValue = llvm::DSOLocalEquivalent::get((llvm::DSOLocalEquivalent *)v40, v41);
                  goto LABEL_342;
                }
              }
            }
          }
          __int16 v14 = "Invalid dso_local record";
          goto LABEL_388;
        case 28:
          if (v473 <= 1) {
            goto LABEL_199;
          }
          memset(&v463, 0, sizeof(v463));
          memset(&v461, 0, sizeof(v461));
          uint64_t v185 = *((void *)v472 + 1);
          unint64_t v186 = (v185 + 2);
          if (v186 >= v473) {
            goto LABEL_230;
          }
          uint64_t v187 = *((void *)v472 + v186);
          if (v473 < (int)v185 + (int)v187 + 3) {
            goto LABEL_230;
          }
          unsigned int v430 = v7;
          uint64_t v419 = v6;
          uint64_t v58 = v8;
          int v450 = v9;
          std::string::size_type v318 = *(void *)v472;
          if (v185)
          {
            uint64_t v319 = 0;
            do
              std::string::push_back(&v463, *((void *)v472 + (v319++ + 2)));
            while (v185 != v319);
          }
          if (v187)
          {
            uint64_t v187 = v187;
            unsigned int v320 = v185 + 3;
            do
            {
              std::string::push_back(&v461, *((void *)v472 + v320++));
              --v187;
            }
            while (v187);
          }
          llvm::UpgradeInlineAsmString(&v463);
          unint64_t v7 = v430;
          if (!v445)
          {
LABEL_460:
            v465 = "Missing element type for old-style inlineasm";
            WORD4(v467) = 259;
            sub_1CC1DDE58((int)v3, v5, (llvm::Twine *)&v465);
          }
          if ((v463.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v334 = &v463;
          }
          else {
            uint64_t v334 = (std::string *)v463.__r_.__value_.__r.__words[0];
          }
          if ((v463.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v335 = *((unsigned char *)&v463.__r_.__value_.__s + 23) & 0x7F;
          }
          else {
            uint64_t v335 = v463.__r_.__value_.__l.__size_;
          }
          if ((v461.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v336 = &v461;
          }
          else {
            unint64_t v336 = (std::string *)v461.__r_.__value_.__r.__words[0];
          }
          if ((v461.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v337 = *((unsigned char *)&v461.__r_.__value_.__s + 23) & 0x7F;
          }
          else {
            uint64_t v337 = v461.__r_.__value_.__l.__size_;
          }
          uint64_t v66 = llvm::InlineAsm::get(v445, (uint64_t)v334, v335, (uint64_t)v336, v337, v318 & 1, (v318 & 2) != 0, (v318 >> 2) & 1, (v318 & 8) != 0);
LABEL_500:
          ElementPtr = (llvm::Value *)v66;
          LODWORD(v9) = v450;
          uint64_t v8 = v58;
          uint64_t v6 = v419;
          goto LABEL_231;
        case 29:
          if (v473 > 1)
          {
            int v144 = *(_DWORD *)v472;
            uint64_t v145 = (llvm::Type *)sub_1CC1E22AC(v460, *(_DWORD *)v472);
            if (v145)
            {
              uint64_t v146 = (unsigned __int8 *)llvm::BitcodeReaderValueList::getConstantFwdRef(v459, *((_DWORD *)v472 + 2), v145, v144);
              if (v146)
              {
                if (v146[16] < 4u)
                {
                  uint64_t NullValue = llvm::NoCFIValue::get((llvm::NoCFIValue *)v146, v147);
                  goto LABEL_342;
                }
              }
            }
          }
          __int16 v14 = "Invalid no_cfi record";
          goto LABEL_388;
        case 30:
          if (v473 > 2)
          {
            uint64_t v42 = sub_1CC1E22AC(v460, *(_DWORD *)v472);
            if (v42)
            {
              unint64_t v43 = (llvm::PointerType *)v42;
              if (*(unsigned char *)(v42 + 8) == 14)
              {
                memset(&v463, 0, sizeof(v463));
                memset(&v461, 0, sizeof(v461));
                uint64_t v44 = *((void *)v472 + 2);
                unint64_t v45 = (v44 + 3);
                if (v45 >= v473
                  || (uint64_t v46 = *((void *)v472 + v45), v473 < (int)v44 + (int)v46 + 4))
                {
LABEL_230:
                  v465 = "Invalid inlineasm record";
                  WORD4(v467) = 259;
                  sub_1CC1DDE58((int)v3, v5, (llvm::Twine *)&v465);
                }
                unsigned int v421 = v7;
                unint64_t v432 = (llvm::ConstantExpr *)v5;
                uint64_t v47 = *((void *)v472 + 1);
                if (v44)
                {
                  uint64_t v48 = 0;
                  do
                    std::string::push_back(&v463, *((void *)v472 + (v48++ + 3)));
                  while (v44 != v48);
                }
                if (v46)
                {
                  uint64_t v46 = v46;
                  unsigned int v49 = v44 + 4;
                  do
                  {
                    std::string::push_back(&v461, *((void *)v472 + v49++));
                    --v46;
                  }
                  while (v46);
                }
                llvm::UpgradeInlineAsmString(&v463);
                if ((v463.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v50 = &v463;
                }
                else {
                  uint64_t v50 = (std::string *)v463.__r_.__value_.__r.__words[0];
                }
                if ((v463.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v51 = *((unsigned char *)&v463.__r_.__value_.__s + 23) & 0x7F;
                }
                else {
                  uint64_t v51 = v463.__r_.__value_.__l.__size_;
                }
                if ((v461.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int v52 = &v461;
                }
                else {
                  int v52 = (std::string *)v461.__r_.__value_.__r.__words[0];
                }
                if ((v461.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v53 = *((unsigned char *)&v461.__r_.__value_.__s + 23) & 0x7F;
                }
                else {
                  uint64_t v53 = v461.__r_.__value_.__l.__size_;
                }
                ElementPtr = (llvm::Value *)llvm::InlineAsm::get(v43, (uint64_t)v50, v51, (uint64_t)v52, v53, v47 & 1, (v47 & 2) != 0, (v47 >> 2) & 1, (v47 & 8) != 0);
                uint64_t v3 = v458;
                uint64_t v5 = (uint64_t)v432;
                unint64_t v7 = v421;
LABEL_231:
                if (SHIBYTE(v461.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v461.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v463.__r_.__value_.__l.__data_);
                }
                goto LABEL_343;
              }
            }
          }
LABEL_199:
          __int16 v14 = "Invalid inlineasm record";
          goto LABEL_388;
        default:
          goto LABEL_220;
      }
    }
    int v454 = v9;
    unint64_t v437 = (llvm::ConstantExpr *)v5;
    if (v457 != v8)
    {
      for (unsigned int j = v457; j != v8; j += 56)
      {
        v370 = v8;
        unint64_t v371 = *(llvm::Type **)j;
        int v372 = *((_DWORD *)j + 2);
        uint64_t v373 = *((void *)j + 2);
        unsigned int v374 = *((_DWORD *)j + 8);
        uint64_t v375 = *((void *)j + 5);
        unsigned int v376 = *((_DWORD *)j + 12);
        v377 = llvm::BitcodeReaderValueList::getConstantFwdRef(v459, *((_DWORD *)j + 6), *(llvm::Type **)j, v372);
        v378 = llvm::BitcodeReaderValueList::getConstantFwdRef(v459, v374, v371, v372);
        uint64_t v379 = (uint64_t **)(**(void **)(v460 + 424) + 1960);
        BOOL v380 = (llvm::Type *)*(unsigned int *)(v373 + 32);
        if (*(unsigned char *)(v373 + 8) == 19) {
          llvm::ScalableVectorType::get(v379, v380);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v379, v380);
        }
        v382 = (llvm::Type *)v381;
        int v383 = sub_1CC1E23EC(v460, v381, (char *)&__src, 1);
        int v384 = llvm::BitcodeReaderValueList::getConstantFwdRef(v459, v375, v382, v383);
        if ((llvm::ShuffleVectorInst::isValidOperands((llvm::ShuffleVectorInst *)v377, (const llvm::Value *)v378, (const llvm::Value *)v384, v385) & 1) == 0)
        {
          v465 = "Invalid shufflevector operands";
          WORD4(v467) = 259;
          int v366 = (int)v458;
          uint64_t v367 = (uint64_t)v437;
LABEL_541:
          sub_1CC1DDE58(v366, v367, (llvm::Twine *)&v465);
        }
        uint64_t v8 = v370;
        v465 = (char *)&v466 + 8;
        *(void *)&long long v466 = 0x1000000000;
        llvm::ShuffleVectorInst::getShuffleMask((llvm::Constant *)v384, (uint64_t)&v465);
        ShuffleVector = llvm::ConstantExpr::getShuffleVector((llvm *)v377, (llvm *)v378, (int *)v465, (llvm::Type *)v466, 0);
        unsigned int v387 = (llvm::Value *)ShuffleVector;
        uint64_t v388 = *(void *)(v460 + 544);
        uint64_t v389 = *(unsigned int *)(v460 + 560);
        uint64_t v3 = v458;
        if (v389)
        {
          unsigned int v390 = v389 - 1;
          unsigned int v391 = (int *)(v388 + 32 * ((v389 - 1) & (37 * v372)));
          int v392 = *v391;
          if (v372 == *v391) {
            goto LABEL_557;
          }
          int v397 = 1;
          LODWORD(v398) = v390 & (37 * v372);
          while (1)
          {
            uint64_t v3 = v458;
            uint64_t v8 = v370;
            if (v392 == -1) {
              break;
            }
            int v399 = v398 + v397++;
            uint64_t v398 = v399 & v390;
            int v392 = *(_DWORD *)(v388 + 32 * v398);
            if (v372 == v392)
            {
              unsigned int v391 = (int *)(v388 + 32 * v398);
              uint64_t v3 = v458;
              uint64_t v8 = v370;
              goto LABEL_557;
            }
          }
        }
        unsigned int v391 = (int *)(v388 + 32 * v389);
LABEL_557:
        uint64_t v393 = *ShuffleVector;
        if ((int *)(v388 + 32 * v389) == v391 || !v391[4]) {
          int v394 = -1;
        }
        else {
          int v394 = **((_DWORD **)v391 + 1);
        }
        LODWORD(v463.__r_.__value_.__l.__data_) = v394;
        int v395 = sub_1CC1E23EC(v460, v393, (char *)&v463, 1);
        llvm::BitcodeReaderValueList::assignValue(v459, v387, v376, v395, v3);
        uint64_t v396 = *v3;
        if (v465 != (char *)&v466 + 8) {
          free(v465);
        }
        if (v396) {
          goto LABEL_542;
        }
      }
    }
    if (__p != v456)
    {
      uint64_t v400 = __p;
      do
      {
        uint64_t v401 = *(llvm::Type **)v400;
        int v402 = *((_DWORD *)v400 + 2);
        std::string v403 = (uint64_t **)(**(void **)(v460 + 424) + 1888);
        LODWORD(v465) = 0;
        LODWORD(v465) = sub_1CC1E23EC(v460, (uint64_t)v403, 0, 0);
        uint64_t v404 = *((unsigned int *)v400 + 4);
        unsigned int v405 = *((_DWORD *)v400 + 8);
        unsigned int v406 = *((_DWORD *)v400 + 10);
        v407 = llvm::BitcodeReaderValueList::getConstantFwdRef(v459, *((_DWORD *)v400 + 6), v401, v402);
        v408 = llvm::BitcodeReaderValueList::getConstantFwdRef(v459, v405, v401, v402);
        BOOL v409 = (*((_DWORD *)v401 + 2) & 0xFE) != 0x12 || v401 == 0;
        if (!v409 && v403 != **(uint64_t ****)(*(void *)v459 + 32 * v404 + 16))
        {
          unsigned int v410 = (llvm::Type *)*((unsigned int *)v401 + 8);
          if (*((_DWORD *)v401 + 2) == 19) {
            llvm::ScalableVectorType::get(v403, v410);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v403, v410);
          }
          std::string v403 = (uint64_t **)v411;
          LODWORD(v465) = sub_1CC1E23EC(v460, v411, (char *)&v465, 1);
        }
        unint64_t v412 = llvm::BitcodeReaderValueList::getConstantFwdRef(v459, v404, (llvm::Type *)v403, (int)v465);
        Select = llvm::ConstantExpr::getSelect((llvm::ConstantExpr *)v412, v407, (llvm::Constant *)v408, 0, v413);
        uint64_t v3 = v458;
        llvm::BitcodeReaderValueList::assignValue(v459, Select, v406, v402, v458);
        if (*v458) {
          goto LABEL_542;
        }
        v400 += 48;
      }
      while (v400 != v456);
    }
    uint64_t v368 = v457;
    if (v454 != ((*(void *)(v460 + 624) - *(void *)(v460 + 616)) >> 5))
    {
      v465 = "Invalid constant reference";
      WORD4(v467) = 259;
      sub_1CC1DDE58((int)v3, (uint64_t)v437, (llvm::Twine *)&v465);
    }
    llvm::BitcodeReaderValueList::resolveConstantForwardRefs(v459);
    llvm::Value *v3 = 0;
LABEL_543:
    if (__p) {
      operator delete(__p);
    }
    if (v368) {
      operator delete(v368);
    }
    if (v472 != v474) {
      free(v472);
    }
  }
}

void sub_1CC1E12C8(void **a1, uint64_t a2, uint64_t a3)
{
  v66[64] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    sub_1CC1E35A0((uint64_t)&v54, a3, a2 + 32);
    if (v55)
    {
      uint64_t v48 = v54;
      goto LABEL_92;
    }
    unint64_t v6 = (unint64_t)v54;
    if (*(unsigned char *)(a2 + 392))
    {
      int v7 = *(_DWORD *)(a2 + 68);
      llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 32), 0, 14, a1);
      if (*a1) {
        return;
      }
      uint64_t v64 = v66;
      uint64_t v65 = 0x4000000000;
      while (1)
      {
        sub_1CC1CA5F4(a2 + 32, 0, (uint64_t)&v57);
        if (v58) {
          break;
        }
        switch(v57)
        {
          case 2:
            sub_1CC1C6524(a2 + 32, &__p);
            int v13 = __p;
            if (v58)
            {
              __int16 v14 = v57;
              uint64_t v57 = 0;
              if (v14) {
                (*(void (**)(void *))(*(void *)v14 + 8))(v14);
              }
            }
            if (v13) {
              goto LABEL_116;
            }
            break;
          case 1:
            *a1 = 0;
            goto LABEL_106;
          case 0:
            uint64_t v57 = "Malformed block";
            __int16 v60 = 259;
            sub_1CC1DDE58((int)a1, a2 + 8, (llvm::Twine *)&v57);
          default:
            LODWORD(v65) = 0;
            llvm::BitstreamCursor::readRecord((void *)(a2 + 32), SHIDWORD(v57), (uint64_t)&v64, 0, (uint64_t)&__p);
            if (v62)
            {
              char v10 = 0;
              uint64_t v11 = __p;
              std::string __p = 0;
              *a1 = v11;
            }
            else if (__p == 3)
            {
              uint64_t v8 = *(void *)(a2 + 616);
              if (((unint64_t)(*(void *)(a2 + 624) - v8) >> 5) <= *(void *)v64
                || !*(void *)(v8 + 32 * *(void *)v64 + 16))
              {
                uint64_t v57 = "Invalid value reference in symbol table";
                __int16 v60 = 259;
                sub_1CC1DDE58((int)a1, a2 + 8, (llvm::Twine *)&v57);
              }
              uint64_t v57 = *(void **)(v8 + 32 * *(void *)v64 + 16);
              unint64_t v9 = 32 * *((void *)v64 + 1) - 32;
              sub_1CC1DE094(a2 + 1496, (uint64_t *)&v57)[1] = v9 + (v7 + 8);
              if (v9 > *(void *)(a2 + 448)) {
                *(void *)(a2 + 448) = v9;
              }
              char v10 = 1;
            }
            else
            {
              char v10 = 1;
            }
            if (v62)
            {
              BOOL v12 = __p;
              std::string __p = 0;
              if (v12) {
                (*(void (**)(void *))(*(void *)v12 + 8))(v12);
              }
            }
            if ((v10 & 1) == 0) {
              goto LABEL_106;
            }
            break;
        }
      }
      int v13 = v57;
LABEL_116:
      *a1 = v13;
LABEL_106:
      if (v64 != v66) {
        free(v64);
      }
      if (*a1) {
        return;
      }
      *(void *)(a2 + 48) = (v6 >> 3) & 0x1FFFFFFFFFFFFFF8;
      *(_DWORD *)(a2 + 64) = 0;
      if (v6 & 0x3F) != 0 && (sub_1CC1CA844(a2 + 32, v6 & 0x3F, (uint64_t)&v64), (v65))
      {
        uint64_t v48 = (const char *)v64;
        *a1 = v64;
        if (v48) {
          return;
        }
      }
      else
      {
        uint64_t v48 = 0;
      }
LABEL_92:
      *a1 = (void *)v48;
      return;
    }
  }
  else
  {
    unint64_t v6 = 0;
  }
  int v15 = *(_DWORD *)(a2 + 68);
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 32), 0, 14, a1);
  if (*a1) {
    return;
  }
  uint64_t v50 = a2 + 8;
  uint64_t v64 = v66;
  uint64_t v65 = 0x4000000000;
  uint64_t v16 = (void *)(*(void *)(a2 + 432) + 216);
  __int16 v60 = 260;
  uint64_t v57 = v16;
  llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)&v57);
  uint64_t v57 = &v59;
  long long v58 = xmmword_1CFAC3020;
  while (1)
  {
    while (1)
    {
      sub_1CC1CA5F4(a2 + 32, 0, (uint64_t)&v54);
      if (v55)
      {
        uint64_t v46 = v54;
LABEL_114:
        *a1 = (void *)v46;
        goto LABEL_98;
      }
      if (v54 != 2) {
        break;
      }
      sub_1CC1C6524(a2 + 32, &v52);
      uint64_t v46 = v52;
      if (v55)
      {
        uint64_t v47 = v54;
        int v54 = 0;
        if (v47) {
          (*(void (**)(const char *))(*(void *)v47 + 8))(v47);
        }
      }
      if (v46) {
        goto LABEL_114;
      }
    }
    if (v54 == 1) {
      break;
    }
    if (!v54)
    {
      int v54 = "Malformed block";
      __int16 v56 = 259;
      sub_1CC1DDE58((int)a1, v50, (llvm::Twine *)&v54);
    }
    LODWORD(v65) = 0;
    llvm::BitstreamCursor::readRecord((void *)(a2 + 32), SHIDWORD(v54), (uint64_t)&v64, 0, (uint64_t)&v52);
    if (v53)
    {
      char v17 = 0;
      unint64_t v18 = (char *)v52;
      int v52 = 0;
      *a1 = v18;
      goto LABEL_63;
    }
    switch(v52)
    {
      case 3:
        sub_1CC1E3704((uint64_t)&v54, a2, (uint64_t)&v64, 2u, (uint64_t)&__p);
        if ((v55 & 1) == 0)
        {
          *a1 = 0;
          if (v54)
          {
            if (!v54[16])
            {
              uint64_t v51 = v54;
              unint64_t v29 = 32 * *((void *)v64 + 1) - 32;
              sub_1CC1DE094(a2 + 1496, (uint64_t *)&v51)[1] = v29 + (v15 + 8);
              if (v29 > *(void *)(a2 + 448)) {
                *(void *)(a2 + 448) = v29;
              }
            }
          }
          goto LABEL_60;
        }
        break;
      case 2:
        if (!v65) {
          goto LABEL_61;
        }
        uint64_t v19 = (v65 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        uint64_t v20 = v58;
        if (*((void *)&v58 + 1) < (unint64_t)(v58 + v19)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (v65 != 1)
        {
          uint64_t v21 = (uint64_t *)((char *)v64 + 8);
          unsigned int v22 = (char *)v57 + v58;
          uint64_t v23 = 8 * v65 - 8;
          do
          {
            uint64_t v24 = *v21++;
            *v22++ = v24;
            v23 -= 8;
          }
          while (v23);
          uint64_t v20 = v58;
        }
        uint64_t v25 = v20 + v19;
        *(void *)&long long v58 = v20 + v19;
        unint64_t v26 = *(unsigned int *)v64;
        uint64_t v27 = *(void *)(a2 + 1392);
        if (v26 >= (*(void *)(a2 + 1400) - v27) >> 3 || (uint64_t v28 = *(llvm::Value **)(v27 + 8 * v26)) == 0)
        {
LABEL_61:
          int v54 = "Invalid bbentry record";
          __int16 v56 = 259;
          sub_1CC1DDE58((int)a1, v50, (llvm::Twine *)&v54);
        }
        __int16 v56 = 261;
        int v54 = (char *)v57;
        uint64_t v55 = v25;
        llvm::Value::setNameImpl(v28, (const char **)&v54);
        if (*((unsigned char *)v28 + 16)) {
          goto LABEL_53;
        }
        if ((*((unsigned char *)v28 + 23) & 0x10) == 0) {
          goto LABEL_84;
        }
        uint64_t v32 = ***(void ***)v28;
        uint64_t v33 = *(void *)(v32 + 152);
        uint64_t v34 = *(unsigned int *)(v32 + 168);
        if (!v34) {
          goto LABEL_76;
        }
        LODWORD(v35) = (v34 - 1) & ((v28 >> 4) ^ (v28 >> 9));
        int v36 = (llvm::Value **)(v33 + 16 * v35);
        uint64_t v37 = *v36;
        if (*v36 != v28)
        {
          int v38 = 1;
          while (v37 != (llvm::Value *)-4096)
          {
            int v39 = v35 + v38++;
            uint64_t v35 = v39 & (v34 - 1);
            uint64_t v37 = *(llvm::Value **)(v33 + 16 * v35);
            if (v37 == v28)
            {
              int v36 = (llvm::Value **)(v33 + 16 * v35);
              goto LABEL_77;
            }
          }
LABEL_76:
          int v36 = (llvm::Value **)(v33 + 16 * v34);
        }
LABEL_77:
        uint64_t v40 = v36[1];
        unint64_t v43 = *(void *)v40;
        uint64_t v41 = (char *)v40 + 16;
        unint64_t v42 = v43;
        if (v43 >= 5 && (*(_DWORD *)v41 == *(_DWORD *)"llvm." ? (BOOL v44 = v41[4] == aLlvm_1[4]) : (BOOL v44 = 0), v44))
        {
          *((_DWORD *)v28 + 8) |= 0x2000u;
          int v45 = llvm::Function::lookupIntrinsicID(v41, v42);
        }
        else
        {
LABEL_84:
          int v45 = 0;
          *((_DWORD *)v28 + 8) &= ~0x2000u;
        }
        *((_DWORD *)v28 + 9) = v45;
LABEL_53:
        *(void *)&long long v58 = 0;
        goto LABEL_60;
      case 1:
        sub_1CC1E3704((uint64_t)&v54, a2, (uint64_t)&v64, 1u, (uint64_t)&__p);
        if ((v55 & 1) == 0)
        {
          *a1 = 0;
LABEL_60:
          char v17 = 1;
          goto LABEL_63;
        }
        break;
      default:
        goto LABEL_60;
    }
    uint64_t v30 = v54;
    *a1 = v54;
    if (!v30) {
      goto LABEL_60;
    }
    char v17 = 0;
LABEL_63:
    if (v53)
    {
      __int16 v31 = v52;
      int v52 = 0;
      if (v31) {
        (*(void (**)(const char *))(*(void *)v31 + 8))(v31);
      }
    }
    if ((v17 & 1) == 0) {
      goto LABEL_98;
    }
  }
  if (!a3
    || (*(void *)(a2 + 48) = (v6 >> 3) & 0x1FFFFFFFFFFFFFF8, *(_DWORD *)(a2 + 64) = 0, (v6 & 0x3F) == 0)
    || (sub_1CC1CA844(a2 + 32, v6 & 0x3F, (uint64_t)&v54), (v55 & 1) == 0)
    || (unsigned int v49 = v54, *a1 = v54, !v49))
  {
    *a1 = 0;
  }
LABEL_98:
  if (v57 != &v59) {
    free(v57);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v64 != v66) {
    free(v64);
  }
}

void sub_1CC1E1ADC(void **a1, void *a2)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  int v4 = a2 + 4;
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 4), 0, 18, a1);
  if (*a1) {
    return;
  }
  uint64_t v5 = (uint64_t)(a2 + 1);
  int v54 = v56;
  uint64_t v55 = 0x4000000000;
  while (1)
  {
    sub_1CC1CA5F4((uint64_t)v4, 0, (uint64_t)&v48);
    if (v49) {
      break;
    }
    switch(v48)
    {
      case 2:
        sub_1CC1C6524((uint64_t)v4, &v57);
        uint64_t v46 = v57;
        if (v49)
        {
          uint64_t v47 = v48;
          uint64_t v48 = 0;
          if (v47) {
            (*(void (**)(const char *))(*(void *)v47 + 8))(v47);
          }
        }
        uint64_t v5 = (uint64_t)(a2 + 1);
        if (v46) {
          goto LABEL_92;
        }
        break;
      case 1:
        *a1 = 0;
        goto LABEL_88;
      case 0:
        uint64_t v48 = "Malformed block";
        __int16 v51 = 259;
        sub_1CC1DDE58((int)a1, v5, (llvm::Twine *)&v48);
      default:
        LODWORD(v55) = 0;
        llvm::BitstreamCursor::readRecord(v4, SHIDWORD(v48), (uint64_t)&v54, 0, (uint64_t)&v52);
        if (v53)
        {
          char v9 = 0;
          char v10 = v52;
          int v52 = 0;
          *a1 = v10;
        }
        else
        {
          if (v52 == 1)
          {
            if (v55 <= 2)
            {
LABEL_41:
              uint64_t v48 = "Invalid record";
              __int16 v51 = 259;
              sub_1CC1DDE58((int)a1, v5, (llvm::Twine *)&v48);
            }
            uint64_t v11 = *((unsigned int *)v54 + 2 * v55 - 2);
            unsigned int v7 = v55 - 1;
            LODWORD(v55) = v55 - 1;
            uint64_t v8 = (uint64_t *)(a2[77] + 32 * v11 + 16);
LABEL_15:
            uint64_t v12 = *v8;
            uint64_t v48 = (char *)1;
            for (uint64_t i = 1; i != 33; i += 2)
              (&v48)[i] = (char *)-4096;
            uint64_t v16 = *(void *)(v12 + 8);
            int v15 = (uint64_t *)(v12 + 8);
            uint64_t v14 = v16;
            if (v16)
            {
              unsigned int v17 = 0;
              while (1)
              {
                unsigned int v18 = v17++;
                unsigned int v7 = v55;
                if (v55 < v17) {
                  goto LABEL_44;
                }
                uint64_t v19 = *((void *)v54 + v18);
                uint64_t v57 = (char *)v14;
                if (v48)
                {
                  int v20 = 16;
                  uint64_t v21 = &v49;
                }
                else
                {
                  int v20 = v50;
                  if (!v50)
                  {
                    uint64_t v30 = 0;
LABEL_36:
                    uint64_t v24 = sub_1CC1A0178((uint64_t)&v48, (uint64_t)&v57, &v57, v30);
                    *uint64_t v24 = v57;
                    *((_DWORD *)v24 + 2) = 0;
                    goto LABEL_37;
                  }
                  uint64_t v21 = v49;
                }
                int v22 = v20 - 1;
                unsigned int v23 = v22 & ((v14 >> 4) ^ (v14 >> 9));
                uint64_t v24 = &v21[2 * v23];
                uint64_t v25 = *v24;
                if (v14 != *v24)
                {
                  unint64_t v26 = 0;
                  int v27 = 1;
                  while (v25 != -4096)
                  {
                    if (v26) {
                      BOOL v28 = 0;
                    }
                    else {
                      BOOL v28 = v25 == -8192;
                    }
                    if (v28) {
                      unint64_t v26 = v24;
                    }
                    unsigned int v29 = v23 + v27++;
                    unsigned int v23 = v29 & v22;
                    uint64_t v24 = &v21[2 * v23];
                    uint64_t v25 = *v24;
                    if (v14 == *v24) {
                      goto LABEL_37;
                    }
                  }
                  if (v26) {
                    uint64_t v30 = v26;
                  }
                  else {
                    uint64_t v30 = v24;
                  }
                  goto LABEL_36;
                }
LABEL_37:
                *((_DWORD *)v24 + 2) = v19;
                uint64_t v14 = *(void *)(v14 + 8);
                if (!v14)
                {
                  unsigned int v7 = v55;
                  goto LABEL_44;
                }
              }
            }
            unsigned int v17 = 0;
LABEL_44:
            char v31 = (char)v48;
            if (v7 >= v17 && v7 == v48 >> 1)
            {
              uint64_t v33 = *v15;
              if (*v15)
              {
                uint64_t v34 = *(void *)(v33 + 8);
                if (v34)
                {
                  uint64_t v73 = 0;
                  long long v71 = 0u;
                  long long v72 = 0u;
                  long long v69 = 0u;
                  long long v70 = 0u;
                  long long v67 = 0u;
                  long long v68 = 0u;
                  long long v65 = 0u;
                  long long v66 = 0u;
                  long long v63 = 0u;
                  long long v64 = 0u;
                  long long v61 = 0u;
                  long long v62 = 0u;
                  long long v59 = 0u;
                  long long v60 = 0u;
                  long long v58 = 0u;
                  *(void *)(v33 + 8) = 0;
                  uint64_t v57 = (char *)v33;
                  uint64_t v35 = *(void *)(v34 + 8);
                  if (v35)
                  {
                    unsigned int v36 = 1;
                    do
                    {
                      uint64_t v37 = v34;
                      uint64_t v34 = v35;
                      uint64_t v38 = v36;
                      *(void *)(v37 + 8) = 0;
                      if (v36)
                      {
                        uint64_t v39 = 0;
                        while (1)
                        {
                          uint64_t v40 = (uint64_t)(&v57)[v39];
                          if (!v40) {
                            break;
                          }
                          uint64_t v37 = sub_1CC1A0594(v40, v37, (int *)&v48);
                          (&v57)[v39++] = 0;
                          if (v38 == v39)
                          {
                            LODWORD(v39) = v38;
                            break;
                          }
                        }
                      }
                      else
                      {
                        LODWORD(v39) = 0;
                      }
                      if (v39 == v38) {
                        unsigned int v36 = v38 + 1;
                      }
                      else {
                        unsigned int v36 = v38;
                      }
                      (&v57)[v39] = (char *)v37;
                      uint64_t v35 = *(void *)(v34 + 8);
                    }
                    while (v35);
                    *int v15 = v34;
                    if (!v36)
                    {
                      do
                      {
LABEL_71:
                        uint64_t v44 = *(void *)(v34 + 8);
                        unint64_t v43 = (uint64_t *)(v34 + 8);
                        v43[1] = (uint64_t)v15;
                        int v15 = v43;
                        uint64_t v34 = v44;
                      }
                      while (v44);
                      goto LABEL_72;
                    }
                  }
                  else
                  {
                    *int v15 = v34;
                    unsigned int v36 = 1;
                  }
                  uint64_t v41 = v36;
                  unint64_t v42 = (uint64_t *)&v57;
                  do
                  {
                    if (*v42)
                    {
                      uint64_t v34 = sub_1CC1A0594(*v42, v34, (int *)&v48);
                      *int v15 = v34;
                    }
                    ++v42;
                    --v41;
                  }
                  while (v41);
                  if (v34) {
                    goto LABEL_71;
                  }
LABEL_72:
                  char v31 = (char)v48;
                }
              }
            }
            if ((v31 & 1) == 0) {
              MEMORY[0x1D25D9CD0](v49, 8);
            }
            char v9 = 1;
            uint64_t v5 = (uint64_t)(a2 + 1);
            goto LABEL_76;
          }
          if (v52 == 2)
          {
            if (v55 <= 2) {
              goto LABEL_41;
            }
            uint64_t v6 = *((unsigned int *)v54 + 2 * v55 - 2);
            unsigned int v7 = v55 - 1;
            LODWORD(v55) = v55 - 1;
            uint64_t v8 = (uint64_t *)(a2[174] + 8 * v6);
            goto LABEL_15;
          }
          char v9 = 1;
        }
LABEL_76:
        if (v53)
        {
          int v45 = v52;
          int v52 = 0;
          if (v45) {
            (*(void (**)(void *))(*(void *)v45 + 8))(v45);
          }
        }
        if ((v9 & 1) == 0) {
          goto LABEL_88;
        }
        break;
    }
  }
  uint64_t v46 = v48;
LABEL_92:
  *a1 = v46;
LABEL_88:
  if (v54 != v56) {
    free(v54);
  }
}

BOOL sub_1CC1E1FFC(uint64_t a1, uint64_t *a2, _DWORD *a3, unsigned int a4, llvm::Type ***a5, _DWORD *a6)
{
  uint64_t v6 = *a3;
  if (*((_DWORD *)a2 + 2) == v6) {
    return 1;
  }
  unsigned int v10 = v6 + 1;
  uint64_t v11 = *a2;
  uint64_t v12 = *(void *)(*a2 + 8 * v6);
  *a3 = v6 + 1;
  if (*(unsigned char *)(a1 + 1640)) {
    uint64_t v13 = a4 - v12;
  }
  else {
    uint64_t v13 = v12;
  }
  if (v13 >= a4)
  {
    if (*((_DWORD *)a2 + 2) == v10) {
      return 1;
    }
    *a3 = v6 + 2;
    uint64_t v16 = *(void *)(v11 + 8 * v10);
    *a6 = v16;
    unsigned int v17 = (llvm::Type *)sub_1CC1E22AC(a1, v16);
    int v15 = sub_1CC1E29E0(a1, v13, v17);
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 616);
    *a6 = *(_DWORD *)(v14 + 32 * v13 + 24);
    if (*(_DWORD *)(a1 + 672) <= v13)
    {
      int v15 = 0;
    }
    else
    {
      if (v13 >= ((unint64_t)(*(void *)(a1 + 624) - v14) >> 5))
      {
        unsigned int v18 = (uint64_t *)(a1 + 616);
        sub_1CC1E4460((uint64_t *)(a1 + 616), (v13 + 1));
        uint64_t v14 = *v18;
      }
      int v15 = *(llvm::Type ***)(v14 + 32 * v13 + 16);
    }
  }
  *a5 = v15;
  return v15 == 0;
}

uint64_t sub_1CC1E210C(int a1, uint64_t a2)
{
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
    unsigned int v2 = *(unsigned __int8 *)(**(void **)(a2 + 16) + 8);
  }
  else {
    unsigned int v2 = *(_DWORD *)(a2 + 8);
  }
  if (v2 >= 7) {
    return 0xFFFFFFFFLL;
  }
  if (a1) {
    return 0xFFFFFFFFLL;
  }
  return 12;
}

uint64_t sub_1CC1E2160(int a1, uint64_t a2)
{
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
    unsigned int v2 = *(unsigned __int8 *)(**(void **)(a2 + 16) + 8);
  }
  else {
    unsigned int v2 = *(_DWORD *)(a2 + 8);
  }
  if (v2 >= 7)
  {
    if (v2 != 13) {
      return 0xFFFFFFFFLL;
    }
    int v3 = 0;
  }
  else
  {
    int v3 = 1;
  }
  switch(a1)
  {
    case 0:
      BOOL v4 = v3 == 0;
      unsigned int v5 = 13;
      goto LABEL_17;
    case 1:
      BOOL v4 = v3 == 0;
      unsigned int v5 = 15;
      goto LABEL_17;
    case 2:
      BOOL v4 = v3 == 0;
      unsigned int v5 = 17;
      goto LABEL_17;
    case 3:
      BOOL v7 = v3 == 0;
      unsigned int v8 = 19;
      goto LABEL_26;
    case 4:
      BOOL v4 = v3 == 0;
      unsigned int v5 = 20;
      goto LABEL_17;
    case 5:
      BOOL v7 = v3 == 0;
      unsigned int v8 = 22;
      goto LABEL_26;
    case 6:
      BOOL v4 = v3 == 0;
      unsigned int v5 = 23;
LABEL_17:
      if (v4) {
        return v5;
      }
      else {
        return v5 + 1;
      }
    case 7:
      BOOL v7 = v3 == 0;
      unsigned int v8 = 25;
      goto LABEL_26;
    case 8:
      BOOL v7 = v3 == 0;
      unsigned int v8 = 26;
      goto LABEL_26;
    case 9:
      BOOL v7 = v3 == 0;
      unsigned int v8 = 27;
      goto LABEL_26;
    case 10:
      BOOL v7 = v3 == 0;
      unsigned int v8 = 28;
      goto LABEL_26;
    case 11:
      BOOL v7 = v3 == 0;
      unsigned int v8 = 29;
      goto LABEL_26;
    case 12:
      BOOL v7 = v3 == 0;
      unsigned int v8 = 30;
LABEL_26:
      if (v7) {
        uint64_t result = v8;
      }
      else {
        uint64_t result = 0xFFFFFFFFLL;
      }
      break;
    default:
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_1CC1E22AC(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void *)(a1 + 520);
  if (a2 >= (unint64_t)((*(void *)(a1 + 528) - v3) >> 3)) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8 * a2);
  if (!v4)
  {
    uint64_t v6 = llvm::StructType::create(*(uint64_t **)(a1 + 424), 0, 0);
    uint64_t v4 = v6;
    BOOL v7 = *(uint64_t **)(a1 + 1768);
    unint64_t v8 = *(void *)(a1 + 1776);
    if ((unint64_t)v7 >= v8)
    {
      unsigned int v10 = *(void **)(a1 + 1760);
      uint64_t v11 = v7 - v10;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61) {
        abort();
      }
      uint64_t v13 = v8 - (void)v10;
      if (v13 >> 2 > v12) {
        unint64_t v12 = v13 >> 2;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        if (v14 >> 61) {
          sub_1CB833614();
        }
        int v15 = (char *)operator new(8 * v14);
      }
      else
      {
        int v15 = 0;
      }
      uint64_t v16 = (uint64_t *)&v15[8 * v11];
      *uint64_t v16 = v4;
      char v9 = v16 + 1;
      if (v7 != v10)
      {
        do
        {
          uint64_t v17 = *--v7;
          *--uint64_t v16 = v17;
        }
        while (v7 != v10);
        BOOL v7 = *(uint64_t **)(a1 + 1760);
      }
      *(void *)(a1 + 1760) = v16;
      *(void *)(a1 + 1768) = v9;
      *(void *)(a1 + 1776) = &v15[8 * v14];
      if (v7) {
        operator delete(v7);
      }
    }
    else
    {
      uint64_t *v7 = v6;
      char v9 = v7 + 1;
    }
    *(void *)(a1 + 1768) = v9;
    *(void *)(*(void *)(a1 + 520) + 8 * v2) = v4;
  }
  return v4;
}

unint64_t sub_1CC1E23EC(uint64_t a1, uint64_t a2, char *__src, uint64_t a4)
{
  if (a4) {
    int v8 = *(_DWORD *)__src;
  }
  else {
    int v8 = -1;
  }
  uint64_t v9 = *(void *)(a1 + 568);
  unsigned int v10 = *(_DWORD *)(a1 + 584);
  unsigned int v11 = a2 >> 4;
  if (!v10)
  {
LABEL_18:
    uint64_t v16 = (uint64_t *)(v9 + 24 * v10);
    goto LABEL_19;
  }
  unint64_t v12 = ((37 * v8) | ((unint64_t)(v11 ^ (a2 >> 9)) << 32))
      + ~((unint64_t)(37 * v8) << 32);
  unint64_t v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  unint64_t v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  unsigned int v15 = (v10 - 1) & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~(v14 << 27)));
  uint64_t v16 = (uint64_t *)(v9 + 24 * v15);
  uint64_t v17 = *v16;
  int v18 = *((_DWORD *)v16 + 2);
  if (*v16 != a2 || v18 != v8)
  {
    int v20 = 1;
    while (v17 != -4096 || v18 != -1)
    {
      unsigned int v21 = v15 + v20++;
      unsigned int v15 = v21 & (v10 - 1);
      uint64_t v16 = (uint64_t *)(v9 + 24 * v15);
      uint64_t v17 = *v16;
      int v18 = *((_DWORD *)v16 + 2);
      if (*v16 == a2 && v18 == v8) {
        goto LABEL_19;
      }
    }
    goto LABEL_18;
  }
LABEL_19:
  if (v16 != (uint64_t *)(v9 + 24 * v10)) {
    return *((unsigned int *)v16 + 4);
  }
  uint64_t v25 = *(char **)(a1 + 528);
  unint64_t v26 = *(char **)(a1 + 520);
  uint64_t v27 = v25 - v26;
  unint64_t v23 = (unint64_t)(v25 - v26) >> 3;
  int v106 = v23;
  unint64_t v28 = *(void *)(a1 + 536);
  if ((unint64_t)v25 >= v28)
  {
    unint64_t v105 = (unint64_t)(v25 - v26) >> 3;
    uint64_t v30 = v27 >> 3;
    unint64_t v31 = (v27 >> 3) + 1;
    if (v31 >> 61) {
      abort();
    }
    unsigned int v32 = a2 >> 4;
    uint64_t v33 = v28 - (void)v26;
    if (v33 >> 2 > v31) {
      unint64_t v31 = v33 >> 2;
    }
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v34 = v31;
    }
    if (v34)
    {
      if (v34 >> 61) {
        sub_1CB833614();
      }
      uint64_t v35 = (char *)operator new(8 * v34);
    }
    else
    {
      uint64_t v35 = 0;
    }
    unsigned int v36 = &v35[8 * v30];
    uint64_t v37 = &v35[8 * v34];
    *(void *)unsigned int v36 = a2;
    unsigned int v29 = v36 + 8;
    unsigned int v11 = v32;
    if (v25 != v26)
    {
      do
      {
        uint64_t v38 = *((void *)v25 - 1);
        v25 -= 8;
        *((void *)v36 - 1) = v38;
        v36 -= 8;
      }
      while (v25 != v26);
      uint64_t v25 = *(char **)(a1 + 520);
    }
    unint64_t v23 = v105;
    *(void *)(a1 + 520) = v36;
    *(void *)(a1 + 528) = v29;
    *(void *)(a1 + 536) = v37;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    *(void *)uint64_t v25 = a2;
    unsigned int v29 = v25 + 8;
  }
  *(void *)(a1 + 528) = v29;
  if (a4)
  {
    int v39 = *(_DWORD *)(a1 + 560);
    if (v39)
    {
      uint64_t v40 = *(void *)(a1 + 544);
      unsigned int v41 = v39 - 1;
      uint64_t v42 = v41 & (37 * v23);
      unint64_t v43 = (_DWORD *)(v40 + 32 * v42);
      int v44 = *v43;
      if (*v43 == v23)
      {
LABEL_55:
        sub_1CC1E3C8C((uint64_t)(v43 + 2), *((void *)v43 + 1) + 4 * v43[4], __src, &__src[4 * a4]);
        goto LABEL_56;
      }
      int v45 = 0;
      int v46 = 1;
      while (v44 != -1)
      {
        if (v45) {
          BOOL v47 = 0;
        }
        else {
          BOOL v47 = v44 == -2;
        }
        if (v47) {
          int v45 = v43;
        }
        int v48 = v42 + v46++;
        uint64_t v42 = v48 & v41;
        unint64_t v43 = (_DWORD *)(v40 + 32 * v42);
        int v44 = *v43;
        if (*v43 == v23) {
          goto LABEL_55;
        }
      }
      if (v45) {
        unsigned int v49 = v45;
      }
      else {
        unsigned int v49 = v43;
      }
    }
    else
    {
      unsigned int v49 = 0;
    }
    unint64_t v43 = sub_1CC1E3E34(a1 + 544, &v106, v49);
    *unint64_t v43 = v23;
    *((void *)v43 + 1) = v43 + 6;
    *((void *)v43 + 2) = 0x100000000;
    goto LABEL_55;
  }
LABEL_56:
  unsigned int v50 = *(_DWORD *)(a1 + 584);
  if (v50)
  {
    uint64_t v51 = *(void *)(a1 + 568);
    unint64_t v52 = ((37 * v8) | ((unint64_t)(v11 ^ (a2 >> 9)) << 32))
        + ~((unint64_t)(37 * v8) << 32);
    unint64_t v53 = (v52 ^ (v52 >> 22)) + ~((v52 ^ (v52 >> 22)) << 13);
    unint64_t v54 = (9 * (v53 ^ (v53 >> 8))) ^ ((9 * (v53 ^ (v53 >> 8))) >> 15);
    unsigned int v55 = (v50 - 1) & (((v54 + ~(v54 << 27)) >> 31) ^ (v54 + ~(v54 << 27)));
    __int16 v56 = (uint64_t *)(v51 + 24 * v55);
    uint64_t v57 = *v56;
    int v58 = *((_DWORD *)v56 + 2);
    if (*v56 == a2 && v58 == v8) {
      return v23;
    }
    long long v60 = 0;
    int v61 = 1;
    while (v57 != -4096 || v58 != -1)
    {
      if (v60) {
        BOOL v62 = 0;
      }
      else {
        BOOL v62 = v58 == -2;
      }
      if (v62 && v57 == -8192) {
        long long v60 = v56;
      }
      unsigned int v64 = v55 + v61++;
      unsigned int v55 = v64 & (v50 - 1);
      __int16 v56 = (uint64_t *)(v51 + 24 * v55);
      uint64_t v57 = *v56;
      int v58 = *((_DWORD *)v56 + 2);
      if (*v56 == a2 && v58 == v8) {
        return v23;
      }
    }
    if (v60) {
      long long v66 = v60;
    }
    else {
      long long v66 = v56;
    }
  }
  else
  {
    long long v66 = 0;
  }
  long long v67 = (uint64_t *)(a1 + 568);
  int v68 = *(_DWORD *)(a1 + 576);
  if (4 * v68 + 4 >= 3 * v50)
  {
    sub_1CBF8FC94(v67, 2 * v50);
    int v70 = *(_DWORD *)(a1 + 584);
    if (v70)
    {
      uint64_t v71 = *(void *)(a1 + 568);
      unint64_t v72 = ((37 * v8) | ((unint64_t)(v11 ^ (a2 >> 9)) << 32))
          + ~((unint64_t)(37 * v8) << 32);
      unint64_t v73 = (v72 ^ (v72 >> 22)) + ~((v72 ^ (v72 >> 22)) << 13);
      unint64_t v74 = (9 * (v73 ^ (v73 >> 8))) ^ ((9 * (v73 ^ (v73 >> 8))) >> 15);
      int v75 = ((v74 + ~(v74 << 27)) >> 31) ^ (v74 + ~(v74 << 27));
      int v76 = v70 - 1;
      unsigned int v77 = (v70 - 1) & v75;
      long long v66 = (uint64_t *)(v71 + 24 * v77);
      uint64_t v78 = *v66;
      int v79 = *((_DWORD *)v66 + 2);
      if (*v66 != a2 || v79 != v8)
      {
        uint64_t v81 = 0;
        int v82 = 1;
        while (v78 != -4096 || v79 != -1)
        {
          if (v81) {
            BOOL v83 = 0;
          }
          else {
            BOOL v83 = v79 == -2;
          }
          if (v83 && v78 == -8192) {
            uint64_t v81 = v66;
          }
          unsigned int v85 = v77 + v82++;
          unsigned int v77 = v85 & v76;
          long long v66 = (uint64_t *)(v71 + 24 * (v85 & v76));
          uint64_t v78 = *v66;
          int v79 = *((_DWORD *)v66 + 2);
          if (*v66 == a2 && v79 == v8) {
            goto LABEL_83;
          }
        }
        if (v81) {
          long long v66 = v81;
        }
      }
    }
    else
    {
      long long v66 = 0;
    }
  }
  else if (v50 + ~v68 - *(_DWORD *)(a1 + 580) <= v50 >> 3)
  {
    unint64_t v87 = v23;
    sub_1CBF8FC94(v67, v50);
    int v88 = *(_DWORD *)(a1 + 584);
    if (v88)
    {
      uint64_t v89 = *(void *)(a1 + 568);
      unint64_t v90 = ((37 * v8) | ((unint64_t)(v11 ^ (a2 >> 9)) << 32))
          + ~((unint64_t)(37 * v8) << 32);
      unint64_t v91 = (v90 ^ (v90 >> 22)) + ~((v90 ^ (v90 >> 22)) << 13);
      unint64_t v92 = (9 * (v91 ^ (v91 >> 8))) ^ ((9 * (v91 ^ (v91 >> 8))) >> 15);
      int v93 = ((v92 + ~(v92 << 27)) >> 31) ^ (v92 + ~(v92 << 27));
      int v94 = v88 - 1;
      unsigned int v95 = (v88 - 1) & v93;
      long long v66 = (uint64_t *)(v89 + 24 * v95);
      uint64_t v96 = *v66;
      int v97 = *((_DWORD *)v66 + 2);
      if (*v66 != a2 || v97 != v8)
      {
        unsigned int v99 = 0;
        int v100 = 1;
        while (v96 != -4096 || v97 != -1)
        {
          if (v99) {
            BOOL v101 = 0;
          }
          else {
            BOOL v101 = v97 == -2;
          }
          if (v101 && v96 == -8192) {
            unsigned int v99 = v66;
          }
          unsigned int v103 = v95 + v100++;
          unsigned int v95 = v103 & v94;
          long long v66 = (uint64_t *)(v89 + 24 * (v103 & v94));
          uint64_t v96 = *v66;
          int v97 = *((_DWORD *)v66 + 2);
          BOOL v104 = *v66 == a2 && v97 == v8;
          unint64_t v23 = v87;
          if (v104) {
            goto LABEL_83;
          }
        }
        if (v99) {
          long long v66 = v99;
        }
      }
    }
    else
    {
      long long v66 = 0;
    }
    unint64_t v23 = v87;
  }
LABEL_83:
  ++*(_DWORD *)(a1 + 576);
  if (*v66 != -4096 || *((_DWORD *)v66 + 2) != -1) {
    --*(_DWORD *)(a1 + 580);
  }
  *long long v66 = a2;
  *((_DWORD *)v66 + 2) = v8;
  *((_DWORD *)v66 + 4) = v23;
  return v23;
}

llvm::Type **sub_1CC1E29E0(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
  if (a3 && *((unsigned char *)a3 + 8) == 9)
  {
    uint64_t v3 = *(void *)a3;
    uint64_t v4 = sub_1CC1F263C(*(void *)(a1 + 680), a2);
    return (llvm::Type **)llvm::MetadataAsValue::get(v3, v4);
  }
  else
  {
    uint64_t v6 = (llvm::BitcodeReaderValueList *)(a1 + 616);
    return llvm::BitcodeReaderValueList::getValueFwdRef(v6, a2, a3);
  }
}

void sub_1CC1E2A50(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = 0;
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a3 + 64);
  uint64_t v51 = v8;
  uint64_t v9 = (uint64_t *)(a3 - 32);
  uint64_t v46 = a3 - 8;
  while (1)
  {
    unsigned int v50 = v7;
    int v10 = *(unsigned __int8 *)(a3 + 16);
    if (v10 == 84) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10 == 39 ? (*(_DWORD *)(a3 + 80) + 1) : 2;
    }
    int v12 = *(_DWORD *)(a3 + 20);
    if (v12 < 0 && (uint64_t v22 = v12 & 0x7FFFFFF, (*(void *)(v46 - 32 * v22) & 0xFFFFFFFF0) != 0))
    {
      uint64_t v14 = -v22;
      int v13 = *(_DWORD *)(a3 - 32 * v22 - 12) - *(_DWORD *)(a3 - 32 * v22 - *(void *)(a3 - 32 * v22 - 8));
    }
    else
    {
      int v13 = 0;
      uint64_t v14 = -(uint64_t)(v12 & 0x7FFFFFF);
    }
    if (v7 == (((unint64_t)&v9[4 * -v13] + -a3 + -32 * v11 + -32 * v14) >> 5)) {
      break;
    }
    uint64_t v15 = 0;
    std::string __p = (void *)0x4900000045;
    LODWORD(v53) = 71;
    do
    {
      if (v8)
      {
        uint64_t v16 = v50;
        if (v50 + 2 < *(_DWORD *)(v8 + 8))
        {
          uint64_t v17 = *(void *)(v8 + 8 * (v50 + 2) + 40);
          if (v17)
          {
            int v18 = *(_DWORD *)((char *)&__p + v15);
            if ((*(unsigned __int8 *)(v17 + v18 / 8 + 12) >> (v18 & 7)))
            {
              uint64_t AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex(&v51, v50 + 1, *(_DWORD *)((char *)&__p + v15));
              if (!AttributeAtIndex || !*(void *)(AttributeAtIndex + 16))
              {
                uint64_t v20 = sub_1CC1E3458(a2, *(_DWORD *)(a4 + 4 * v16));
                if (!v20)
                {
                  uint64_t v25 = a2 + 8;
                  unint64_t v26 = "Missing element type for typed attribute upgrade";
                  goto LABEL_38;
                }
                unint64_t v21 = llvm::Attribute::get(*(uint64_t **)(a2 + 424), v18, v20);
                uint64_t v8 = llvm::AttributeList::addParamAttribute(&v51, *(uint64_t **)(a2 + 424), &v50, 1, v21);
                uint64_t v51 = v8;
              }
            }
          }
        }
      }
      v15 += 4;
    }
    while (v15 != 12);
    unsigned int v7 = v50 + 1;
  }
  uint64_t v23 = *v9;
  if (*(unsigned char *)(*v9 + 16) == 24)
  {
    unsigned int v50 = 0;
    unsigned int v32 = *(char **)(v23 + 48);
    uint64_t v30 = v23 + 48;
    unint64_t v31 = v32;
    char v33 = *(unsigned char *)(v30 + 23);
    if (v33 >= 0) {
      unint64_t v34 = (char *)v30;
    }
    else {
      unint64_t v34 = v31;
    }
    uint64_t v35 = *(void *)(v30 + 8);
    if (v33 >= 0) {
      uint64_t v36 = v33 & 0x7F;
    }
    else {
      uint64_t v36 = v35;
    }
    llvm::InlineAsm::ParseConstraints(v34, v36, (uint64_t *)&__p);
    uint64_t v38 = (char *)__p;
    uint64_t v37 = v53;
    if (__p == v53)
    {
LABEL_71:
      if (v38)
      {
        int v44 = v53;
        int v45 = v38;
        if (v53 != v38)
        {
          do
          {
            v48[0] = (void **)(v44 - 32);
            sub_1CC1E4230(v48);
            v48[0] = (void **)(v44 - 64);
            sub_1CB8338B8(v48);
            v44 -= 80;
          }
          while (v44 != v38);
          int v45 = __p;
        }
        unint64_t v53 = v38;
        operator delete(v45);
      }
      uint64_t v23 = *v9;
      if (!*v9 || *(unsigned char *)(v23 + 16)) {
        goto LABEL_50;
      }
      goto LABEL_26;
    }
    int v39 = 0;
    while (!*(_DWORD *)v38)
    {
      if (v38[13]) {
        goto LABEL_67;
      }
LABEL_64:
      unsigned int v50 = ++v39;
LABEL_65:
      v38 += 80;
      if (v38 == v37)
      {
        uint64_t v38 = (char *)__p;
        goto LABEL_71;
      }
    }
    if (*(_DWORD *)v38 != 1 || !v38[13]) {
      goto LABEL_65;
    }
LABEL_67:
    uint64_t ParamElementType = llvm::AttributeList::getParamElementType((llvm::AttributeList *)&v51, v39);
    int v39 = v50;
    if (!ParamElementType)
    {
      uint64_t v41 = sub_1CC1E3458(a2, *(_DWORD *)(a4 + 4 * v50));
      if (!v41)
      {
        v48[0] = (void **)"Missing element type for inline asm upgrade";
        __int16 v49 = 259;
        sub_1CC1DDE58((int)a1, a2 + 8, (llvm::Twine *)v48);
      }
      uint64_t v42 = *(uint64_t **)(a2 + 424);
      unint64_t v43 = llvm::Attribute::get(v42, 70, v41);
      uint64_t v51 = llvm::AttributeList::addParamAttribute(&v51, v42, &v50, 1, v43);
      int v39 = v50;
    }
    goto LABEL_64;
  }
  if (*(unsigned char *)(*v9 + 16)) {
    goto LABEL_50;
  }
LABEL_26:
  if (*(void *)(v23 + 24) != *(void *)(a3 + 72)) {
    goto LABEL_50;
  }
  int v24 = *(_DWORD *)(v23 + 36);
  if (v24 > 650)
  {
    if (v24 <= 3652)
    {
      if (v24 != 651 && v24 != 3647) {
        goto LABEL_50;
      }
    }
    else if (v24 != 3653 && v24 != 4055 && v24 != 4053)
    {
      goto LABEL_50;
    }
  }
  else if (v24 > 449)
  {
    if (v24 != 450 && v24 != 649) {
      goto LABEL_50;
    }
  }
  else if ((v24 - 241) >= 2 && v24 != 447)
  {
    goto LABEL_50;
  }
  BOOL v27 = 1;
  if (v24 <= 4052 && v24 != 649) {
    BOOL v27 = v24 == 651;
  }
  LODWORD(__p) = v27;
  if (!llvm::AttributeList::getParamElementType((llvm::AttributeList *)&v51, v27))
  {
    uint64_t v28 = sub_1CC1E3458(a2, *(_DWORD *)(a4 + 4 * v27));
    if (!v28)
    {
      uint64_t v25 = a2 + 8;
      unint64_t v26 = "Missing element type for elementtype upgrade";
LABEL_38:
      v48[0] = (void **)v26;
      __int16 v49 = 259;
      sub_1CC1DDE58((int)a1, v25, (llvm::Twine *)v48);
    }
    unint64_t v29 = llvm::Attribute::get(*(uint64_t **)(a2 + 424), 70, v28);
    uint64_t v51 = llvm::AttributeList::addParamAttribute(&v51, *(uint64_t **)(a2 + 424), &__p, 1, v29);
  }
LABEL_50:
  *(void *)(a3 + 64) = v51;
  *a1 = 0;
}

void *sub_1CC1E2F4C(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a4 + 8) != 15)
  {
    uint64_t v10 = a2 + 8;
    uint64_t v11 = "Load/Store operand is not a pointer type";
LABEL_13:
    int v12 = v11;
    __int16 v13 = 259;
    sub_1CC1DDE58((int)result, v10, (llvm::Twine *)&v12);
  }
  uint64_t v4 = *(void *)(a4 + 24);
  if (v4) {
    BOOL v5 = v4 == a3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v10 = a2 + 8;
    uint64_t v11 = "Explicit load/store type does not match pointee type of pointer operand";
    goto LABEL_13;
  }
  unsigned int v6 = *(unsigned __int8 *)(a3 + 8);
  BOOL v7 = v6 > 0xE;
  int v8 = (1 << v6) & 0x5B80;
  if (!v7 && v8 != 0)
  {
    uint64_t v10 = a2 + 8;
    uint64_t v11 = "Cannot load/store from pointer";
    goto LABEL_13;
  }
  void *result = 0;
  return result;
}

uint64_t sub_1CC1E2FEC(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    BOOL v7 = (void *)(*a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v9) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          uint64_t v9 = v7;
        }
        unsigned int v13 = v6 + v10++;
        unsigned int v6 = v13 & v5;
        BOOL v7 = (void *)(v4 + 16 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_7;
        }
      }
      uint64_t result = 0;
      if (v9) {
        BOOL v7 = v9;
      }
    }
  }
  else
  {
    BOOL v7 = 0;
    uint64_t result = 0;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void *sub_1CC1E3088(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CBFF6AF4(a1, v7);
      uint64_t v17 = 0;
      sub_1CC1E2FEC((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CBFF6AF4(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    unsigned int v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        unsigned int v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 16 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

uint64_t sub_1CC1E31BC(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  int v3 = (char *)*a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = (v4 - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    abort();
  }
  uint64_t v10 = a1[2] - (void)v3;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  if (v11)
  {
    if (v11 >> 59) {
      sub_1CB833614();
    }
    uint64_t v12 = (char *)operator new(32 * v11);
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (uint64_t)&v12[32 * v5];
  uint64_t v14 = *a2;
  *(void *)uint64_t v13 = 6;
  *(void *)(v13 + 8) = 0;
  *(void *)(v13 + 16) = v14;
  if (v14 != -8192 && v14 != -4096 && v14)
  {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v13);
    int v3 = (char *)*a1;
    uint64_t v4 = a1[1];
  }
  BOOL v15 = &v12[32 * v11];
  *(_DWORD *)(v13 + 24) = *a3;
  uint64_t v16 = v13 + 32;
  if ((char *)v4 == v3)
  {
    *a1 = v13;
    a1[1] = v16;
    a1[2] = (uint64_t)v15;
    if (!v3) {
      return v16;
    }
    goto LABEL_34;
  }
  do
  {
    v13 -= 32;
    v4 -= 32;
    sub_1CC1E33EC(v13, v4);
  }
  while ((char *)v4 != v3);
  int v3 = (char *)*a1;
  uint64_t v17 = (char *)a1[1];
  *a1 = v13;
  a1[1] = v16;
  for (a1[2] = (uint64_t)v15; v17 != v3; v17 -= 32)
  {
    uint64_t v18 = *((void *)v17 - 2);
    if (v18 && v18 != -8192 && v18 != -4096)
    {
      unint64_t v19 = *((void *)v17 - 4) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v19 = *((void *)v17 - 3);
      uint64_t v20 = (unint64_t *)*((void *)v17 - 3);
      if (v20)
      {
        unint64_t *v20 = *v20 & 7 | v19;
      }
      else
      {
        uint64_t v21 = *((void *)v17 - 2);
        uint64_t v22 = ***(int32x2_t ****)v21;
        unint64_t v23 = (unint64_t)v22[303];
        if (v23 <= v19)
        {
          uint64_t v24 = v22[305].u32[0];
          if (v23 + 16 * v24 > v19)
          {
            unsigned int v25 = v24 - 1;
            LODWORD(v26) = v25 & ((v21 >> 4) ^ (v21 >> 9));
            BOOL v27 = (uint64_t *)(v23 + 16 * v26);
            uint64_t v28 = *v27;
            if (v21 == *v27)
            {
LABEL_29:
              *BOOL v27 = -8192;
              v22[304] = vadd_s32(v22[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v21 = *((void *)v17 - 2);
            }
            else
            {
              int v29 = 1;
              while (v28 != -4096)
              {
                int v30 = v26 + v29++;
                uint64_t v26 = v30 & v25;
                uint64_t v28 = *(void *)(v23 + 16 * v26);
                if (v21 == v28)
                {
                  BOOL v27 = (uint64_t *)(v23 + 16 * v26);
                  goto LABEL_29;
                }
              }
            }
            *(unsigned char *)(v21 + 17) &= ~1u;
          }
        }
      }
    }
  }
  if (v3) {
LABEL_34:
  }
    operator delete(v3);
  return v16;
}

uint64_t sub_1CC1E33EC(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = 6;
  *(void *)(result + 8) = 0;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(result + 16) = v2;
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
  {
    unint64_t v4 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(result + 8) = *(void *)v4;
    *(void *)unint64_t v4 = result;
    *(void *)uint64_t result = v4 | 6;
    uint64_t v5 = *(uint64_t **)(result + 8);
    if (v5) {
      uint64_t *v5 = *v5 & 7 | (result + 8);
    }
  }
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t sub_1CC1E3458(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 520);
  if (a2 >= (unint64_t)((*(void *)(a1 + 528) - v2) >> 3) || *(unsigned char *)(*(void *)(v2 + 8 * a2) + 8) != 15) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 544);
  uint64_t v4 = *(unsigned int *)(a1 + 560);
  if (v4)
  {
    unsigned int v5 = v4 - 1;
    unint64_t v6 = (int *)(v3 + 32 * ((v4 - 1) & (37 * a2)));
    int v7 = *v6;
    if (*v6 == a2) {
      goto LABEL_5;
    }
    int v10 = 1;
    LODWORD(v11) = v5 & (37 * a2);
    while (v7 != -1)
    {
      int v12 = v11 + v10++;
      uint64_t v11 = v12 & v5;
      int v7 = *(_DWORD *)(v3 + 32 * v11);
      if (v7 == a2)
      {
        unint64_t v6 = (int *)(v3 + 32 * v11);
        goto LABEL_5;
      }
    }
  }
  unint64_t v6 = (int *)(v3 + 32 * v4);
LABEL_5:
  if ((int *)(v3 + 32 * v4) == v6 || !v6[4]) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = **((_DWORD **)v6 + 1);
  }
  return sub_1CC1E22AC(a1, v8);
}

void *sub_1CC1E3518(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = result[1];
  if (result[2] < (unint64_t)(v4 + a3 - a2)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (a2 != a3)
  {
    unsigned int v5 = (_WORD *)(*result + 2 * v4);
    do
    {
      uint64_t v6 = *v3++;
      *v5++ = v6;
    }
    while (v3 != a3);
  }
  result[1] = v4 + a3 - a2;
  return result;
}

void sub_1CC1E35A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(unsigned int *)(a3 + 32);
  *(void *)(a3 + 16) = (4 * a2) & 0x1FFFFFFFFFFFFFF8;
  *(_DWORD *)(a3 + 32) = 0;
  if (((32 * (_BYTE)a2) & 0x20) != 0)
  {
    sub_1CC1CA844(a3, (32 * (_BYTE)a2) & 0x20, (uint64_t)&v10);
    if (v11)
    {
      unsigned int v8 = v10;
      if (v10) {
        goto LABEL_10;
      }
    }
  }
  sub_1CC1CA5F4(a3, 0, (uint64_t)&v13);
  if (v14)
  {
    unsigned int v8 = v13;
LABEL_10:
    char v9 = *(unsigned char *)(a1 + 8) | 1;
    goto LABEL_12;
  }
  if (v13 != 2 || HIDWORD(v13) != 14)
  {
    int v10 = "Expected value symbol table subblock";
    __int16 v12 = 259;
    sub_1CC1CD704();
  }
  unsigned int v8 = (const char *)(8 * v5 - v6);
  char v9 = *(unsigned char *)(a1 + 8) & 0xFE;
LABEL_12:
  *(unsigned char *)(a1 + 8) = v9;
  *(void *)a1 = v8;
}

void sub_1CC1E3704(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  v61[16] = *MEMORY[0x1E4F143B8];
  std::string __s = v61;
  long long v60 = xmmword_1CFAC3020;
  uint64_t v7 = *(unsigned int *)(a3 + 8);
  if (v7 < a4)
  {
    v56[0] = "Invalid record";
    __int16 v57 = 259;
    sub_1CC1DDE58((int)&v58, a2 + 8, (llvm::Twine *)v56);
  }
  char v9 = (uint64_t *)(*(void *)a3 + 8 * a4);
  uint64_t v10 = *(void *)a3 + 8 * v7 - (void)v9;
  uint64_t v11 = v10 >> 3;
  if ((unint64_t)v10 >= 0x401) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  uint64_t v12 = 0;
  if (v7 != a4)
  {
    uint64_t v13 = __s;
    uint64_t v14 = 8 * v7 - 8 * a4;
    do
    {
      uint64_t v15 = *v9++;
      *v13++ = v15;
      v14 -= 8;
    }
    while (v14);
    uint64_t v12 = v60;
  }
  uint64_t v16 = (const char *)(v12 + v11);
  *(void *)&long long v60 = v16;
  uint64_t v17 = *(void *)(a2 + 616);
  if (((unint64_t)(*(void *)(a2 + 624) - v17) >> 5) <= **(void **)a3
    || (uint64_t v18 = *(llvm::Value **)(v17 + 32 * **(void **)a3 + 16)) == 0)
  {
    v56[0] = "Invalid record";
    __int16 v57 = 259;
    sub_1CC1DDE58((int)&v55, a2 + 8, (llvm::Twine *)v56);
  }
  if (v16)
  {
    unint64_t v19 = memchr(__s, 0, (size_t)v16);
    if (v19)
    {
      if (v19 - (unsigned char *)__s != -1)
      {
        v56[0] = "Invalid value name";
        __int16 v57 = 259;
        sub_1CC1DDE58((int)&v54, a2 + 8, (llvm::Twine *)v56);
      }
    }
  }
  __int16 v57 = 261;
  v56[0] = (const char *)__s;
  v56[1] = v16;
  llvm::Value::setNameImpl(v18, v56);
  if (!*((unsigned char *)v18 + 16))
  {
    if ((*((unsigned char *)v18 + 23) & 0x10) == 0) {
      goto LABEL_54;
    }
    uint64_t v35 = ***(void ***)v18;
    uint64_t v36 = *(void *)(v35 + 152);
    uint64_t v37 = *(unsigned int *)(v35 + 168);
    if (v37)
    {
      LODWORD(v38) = (v37 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      int v39 = (llvm::Value **)(v36 + 16 * v38);
      uint64_t v40 = *v39;
      if (*v39 == v18)
      {
LABEL_47:
        unint64_t v43 = v39[1];
        unint64_t v46 = *(void *)v43;
        int v44 = (char *)v43 + 16;
        unint64_t v45 = v46;
        if (v46 >= 5 && *(_DWORD *)v44 == *(_DWORD *)"llvm." && v44[4] == aLlvm_1[4])
        {
          *((_DWORD *)v18 + 8) |= 0x2000u;
          int v48 = llvm::Function::lookupIntrinsicID(v44, v45);
LABEL_55:
          *((_DWORD *)v18 + 9) = v48;
          goto LABEL_19;
        }
LABEL_54:
        int v48 = 0;
        *((_DWORD *)v18 + 8) &= ~0x2000u;
        goto LABEL_55;
      }
      int v41 = 1;
      while (v40 != (llvm::Value *)-4096)
      {
        int v42 = v38 + v41++;
        uint64_t v38 = v42 & (v37 - 1);
        uint64_t v40 = *(llvm::Value **)(v36 + 16 * v38);
        if (v40 == v18)
        {
          int v39 = (llvm::Value **)(v36 + 16 * v38);
          goto LABEL_47;
        }
      }
    }
    int v39 = (llvm::Value **)(v36 + 16 * v37);
    goto LABEL_47;
  }
LABEL_19:
  unsigned int v20 = *((unsigned __int8 *)v18 + 16);
  if (v20 <= 3 && v20 != 1)
  {
    v56[0] = 0;
    if (sub_1CD4C9788(*(void *)(a2 + 720), *(_DWORD *)(a2 + 736), (uint64_t)v18, v56))
    {
      unint64_t v23 = v56[0];
      uint64_t v24 = *(void *)(a2 + 720);
      uint64_t v25 = *(unsigned int *)(a2 + 736);
    }
    else
    {
      uint64_t v24 = *(void *)(a2 + 720);
      uint64_t v25 = *(unsigned int *)(a2 + 736);
      unint64_t v23 = (const char *)(v24 + 8 * v25);
    }
    if (v23 != (const char *)(v24 + 8 * v25))
    {
      unsigned int v26 = *(_DWORD *)(a5 + 44);
      if (v26 > 9 || ((1 << v26) & 0x320) == 0)
      {
        if ((*((unsigned char *)v18 + 23) & 0x10) == 0)
        {
          size_t v51 = 0;
          unsigned int v50 = (unsigned __int8 *)&byte_1CFBCE98E;
          goto LABEL_58;
        }
        uint64_t v27 = ***(void ***)v18;
        uint64_t v28 = *(void *)(v27 + 152);
        uint64_t v29 = *(unsigned int *)(v27 + 168);
        if (v29)
        {
          LODWORD(v30) = (v29 - 1) & ((v18 >> 4) ^ (v18 >> 9));
          unint64_t v31 = (llvm::Value **)(v28 + 16 * v30);
          unsigned int v32 = *v31;
          if (*v31 == v18)
          {
LABEL_57:
            __int16 v49 = v31[1];
            size_t v52 = *(void *)v49;
            unsigned int v50 = (unsigned __int8 *)v49 + 16;
            size_t v51 = v52;
LABEL_58:
            uint64_t inserted = llvm::Module::getOrInsertComdat(*(void *)(a2 + 432), v50, v51);
            llvm::GlobalObject::setComdat(v18, (llvm::Comdat *)inserted);
            goto LABEL_24;
          }
          int v33 = 1;
          while (v32 != (llvm::Value *)-4096)
          {
            int v34 = v30 + v33++;
            uint64_t v30 = v34 & (v29 - 1);
            unsigned int v32 = *(llvm::Value **)(v28 + 16 * v30);
            if (v32 == v18)
            {
              unint64_t v31 = (llvm::Value **)(v28 + 16 * v30);
              goto LABEL_57;
            }
          }
        }
        unint64_t v31 = (llvm::Value **)(v28 + 16 * v29);
        goto LABEL_57;
      }
    }
  }
LABEL_24:
  *(unsigned char *)(a1 + 8) &= ~1u;
  *(void *)a1 = v18;
  if (__s != v61) {
    free(__s);
  }
}

void sub_1CC1E3B50(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(a1[1], 8 * a2);
      v5 += 8 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = v5 - *a1;
    unint64_t v8 = a2 + (v7 >> 3);
    if (v8 >> 61) {
      abort();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 2 > v8) {
      unint64_t v8 = v9 >> 2;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 61) {
        sub_1CB833614();
      }
      uint64_t v11 = (char *)operator new(8 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v12 = &v11[8 * (v7 >> 3)];
    uint64_t v13 = &v11[8 * v10];
    bzero(v12, 8 * a2);
    if (v5 != v6)
    {
      do
      {
        uint64_t v14 = *((void *)v5 - 1);
        v5 -= 8;
        *((void *)v12 - 1) = v14;
        v12 -= 8;
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
    }
    *a1 = v12;
    a1[1] = &v11[8 * a2 + v7];
    a1[2] = v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

unsigned char *sub_1CC1E3C8C(uint64_t a1, uint64_t a2, char *__src, char *a4)
{
  uint64_t v5 = __src;
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = (a2 - *(void *)a1) >> 2;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unint64_t v10 = *(unsigned int *)(a1 + 12);
  size_t v11 = a4 - __src;
  unint64_t v12 = v9 + ((a4 - __src) >> 2);
  if (*(void *)a1 + 4 * v9 == a2)
  {
    if (v12 > v10) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v5 != a4)
    {
      memcpy((void *)(v7 + 4 * v9), v5, v11);
      LODWORD(v9) = *(_DWORD *)(a1 + 8);
      uint64_t v7 = *(void *)a1;
    }
    *(_DWORD *)(a1 + 8) = v9 + (v11 >> 2);
    return (unsigned char *)(v7 + 4 * v8);
  }
  else
  {
    unint64_t v15 = (uint64_t)v11 >> 2;
    if (v12 > v10) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v16 = (unsigned char *)(v7 + 4 * v9);
    __srca = (unsigned char *)(v7 + 4 * v8);
    unint64_t v17 = (v16 - __srca) >> 2;
    if (v17 >= v15)
    {
      sub_1CD462190(a1, &v16[-4 * v15], (char *)(v7 + 4 * v9));
      if (&v16[-4 * v15] != __srca) {
        memmove(&__srca[4 * v15], __srca, &v16[-4 * v15] - __srca);
      }
      if (v5 != a4)
      {
        uint64_t v13 = __srca;
        memmove(__srca, v5, v11);
        return v13;
      }
    }
    else
    {
      unsigned int v18 = v9 + (v11 >> 2);
      *(_DWORD *)(a1 + 8) = v18;
      if (v8 != v9)
      {
        unint64_t v19 = (_DWORD *)(v7 + 4 * v8);
        memcpy((void *)(v7 + 4 * v18 - 4 * v17), __srca, v16 - __srca);
        do
        {
          int v20 = *(_DWORD *)v5;
          v5 += 4;
          *v19++ = v20;
          --v17;
        }
        while (v17);
      }
      if (v5 != a4) {
        memcpy(v16, v5, a4 - v5);
      }
    }
    return __srca;
  }
}

_DWORD *sub_1CC1E3E34(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3) {
      goto LABEL_3;
    }
    sub_1CC1E3FC0((uint64_t *)a1, v6);
    int v14 = *(_DWORD *)(a1 + 16);
    if (v14)
    {
      unsigned int v15 = v14 - 1;
      uint64_t v16 = (37 * *a2) & v15;
      a3 = (_DWORD *)(*(void *)a1 + 32 * v16);
      int v17 = *a3;
      if (*a2 == *a3) {
        goto LABEL_3;
      }
      unint64_t v12 = 0;
      int v18 = 1;
      while (v17 != -1)
      {
        if (v12) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v17 == -2;
        }
        if (v19) {
          unint64_t v12 = a3;
        }
        int v20 = v16 + v18++;
        uint64_t v16 = v20 & v15;
        a3 = (_DWORD *)(*(void *)a1 + 32 * v16);
        int v17 = *a3;
        if (*a2 == *a3) {
          goto LABEL_3;
        }
      }
      goto LABEL_10;
    }
LABEL_24:
    a3 = 0;
    goto LABEL_3;
  }
  sub_1CC1E3FC0((uint64_t *)a1, 2 * v6);
  int v8 = *(_DWORD *)(a1 + 16);
  if (!v8) {
    goto LABEL_24;
  }
  unsigned int v9 = v8 - 1;
  uint64_t v10 = (37 * *a2) & v9;
  a3 = (_DWORD *)(*(void *)a1 + 32 * v10);
  int v11 = *a3;
  if (*a2 == *a3) {
    goto LABEL_3;
  }
  unint64_t v12 = 0;
  int v13 = 1;
  while (v11 != -1)
  {
    if (v12) {
      BOOL v21 = 0;
    }
    else {
      BOOL v21 = v11 == -2;
    }
    if (v21) {
      unint64_t v12 = a3;
    }
    int v22 = v10 + v13++;
    uint64_t v10 = v22 & v9;
    a3 = (_DWORD *)(*(void *)a1 + 32 * v10);
    int v11 = *a3;
    if (*a2 == *a3) {
      goto LABEL_3;
    }
  }
LABEL_10:
  if (v12) {
    a3 = v12;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

_DWORD *sub_1CC1E3FC0(uint64_t *a1, int a2)
{
  uint64_t v3 = *((unsigned int *)a1 + 4);
  uint64_t v4 = (int *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v12 = *((unsigned int *)a1 + 4);
    if (v12)
    {
      uint64_t v13 = 32 * v12;
      do
      {
        _DWORD *result = -1;
        result += 8;
        v13 -= 32;
      }
      while (v13);
    }
    if (v3)
    {
      int v14 = &v4[8 * v3];
      unsigned int v15 = v4;
      do
      {
        int v16 = *v15;
        if (*v15 <= 0xFFFFFFFD)
        {
          int v17 = *((_DWORD *)a1 + 4) - 1;
          uint64_t v18 = v17 & (37 * v16);
          uint64_t v19 = *a1 + 32 * v18;
          int v20 = *(_DWORD *)v19;
          if (v16 != *(_DWORD *)v19)
          {
            uint64_t v25 = 0;
            int v26 = 1;
            while (v20 != -1)
            {
              if (v25) {
                BOOL v27 = 0;
              }
              else {
                BOOL v27 = v20 == -2;
              }
              if (v27) {
                uint64_t v25 = v19;
              }
              int v28 = v18 + v26++;
              uint64_t v18 = v28 & v17;
              uint64_t v19 = *a1 + 32 * v18;
              int v20 = *(_DWORD *)v19;
              if (v16 == *(_DWORD *)v19) {
                goto LABEL_18;
              }
            }
            if (v25) {
              uint64_t v19 = v25;
            }
          }
LABEL_18:
          *(void *)(v19 + 8) = v19 + 24;
          *(_DWORD *)uint64_t v19 = v16;
          *(void *)(v19 + 16) = 0x100000000;
          unsigned int v21 = v15[4];
          int v22 = (int *)*((void *)v15 + 1);
          if ((int *)v19 != v15 && v21 != 0)
          {
            if (v22 == v15 + 6)
            {
              if (v21 >= 2) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy((void *)(v19 + 24), v22, 4 * v15[4]);
              *(_DWORD *)(v19 + 16) = v21;
              int v22 = (int *)*((void *)v15 + 1);
            }
            else
            {
              *(void *)(v19 + 8) = v22;
              int v24 = v15[5];
              *(_DWORD *)(v19 + 16) = v21;
              *(_DWORD *)(v19 + 20) = v24;
              *((void *)v15 + 1) = v15 + 6;
              v15[5] = 0;
              int v22 = v15 + 6;
            }
            void v15[4] = 0;
          }
          ++*((_DWORD *)a1 + 2);
          if (v22 != v15 + 6) {
            free(v22);
          }
        }
        v15 += 8;
      }
      while (v15 != v14);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v10 = *((unsigned int *)a1 + 4);
  if (v10)
  {
    uint64_t v11 = 32 * v10;
    do
    {
      _DWORD *result = -1;
      result += 8;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

void sub_1CC1E4230(void ***a1)
{
  char v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 32;
        int v7 = (void **)(v4 - 24);
        sub_1CB8338B8(&v7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1CC1E42AC(uint64_t *a1, long long *a2, __n128 *a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    abort();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v4;
  }
  int v17 = a1 + 2;
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      sub_1CB833614();
    }
    unsigned int v9 = (char *)operator new(48 * v8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  std::string __p = v9;
  int v14 = &v9[48 * v3];
  int v16 = &v9[48 * v8];
  sub_1CC1E43E0((uint64_t)v14, a2, a3);
  unsigned int v15 = v14 + 48;
  sub_1CD4F8218(a1, &__p);
  uint64_t v10 = a1[1];
  uint64_t v11 = (uint64_t)v14;
  while (v15 != (char *)v11)
  {
    v15 -= 48;
    sub_1CD4AF9B4((uint64_t)v15);
  }
  if (__p) {
    operator delete(__p);
  }
  return v10;
}

__n128 sub_1CC1E43E0(uint64_t a1, long long *a2, __n128 *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1CB8BDF7C((uint64_t)&v7, *(const void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    uint64_t v8 = *((void *)a2 + 2);
  }
  unint64_t v5 = a3[1].n128_u64[0];
  __n128 result = *a3;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  *(_OWORD *)a1 = v7;
  *(void *)(a1 + 16) = v8;
  *(__n128 *)(a1 + 24) = result;
  *(void *)(a1 + 40) = v5;
  return result;
}

void sub_1CC1E4460(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = (v2 - *a1) >> 5;
  if (a2 > v3)
  {
    sub_1CC1E4588(a1, a2 - v3);
  }
  else if (a2 < v3)
  {
    for (uint64_t i = *a1 + 32 * a2; v2 != i; v2 -= 32)
    {
      uint64_t v5 = *(void *)(v2 - 16);
      if (v5 != -8192 && v5 != -4096 && v5 != 0)
      {
        unint64_t v7 = *(void *)(v2 - 32) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v7 = *(void *)(v2 - 24);
        uint64_t v8 = *(unint64_t **)(v2 - 24);
        if (v8)
        {
          *uint64_t v8 = *v8 & 7 | v7;
        }
        else
        {
          uint64_t v9 = *(void *)(v2 - 16);
          uint64_t v10 = ***(int32x2_t ****)v9;
          unint64_t v11 = (unint64_t)v10[303];
          if (v11 <= v7)
          {
            uint64_t v12 = v10[305].u32[0];
            if (v11 + 16 * v12 > v7)
            {
              unsigned int v13 = v12 - 1;
              LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
              unsigned int v15 = (uint64_t *)(v11 + 16 * v14);
              uint64_t v16 = *v15;
              if (v9 == *v15)
              {
LABEL_17:
                *unsigned int v15 = -8192;
                v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v9 = *(void *)(v2 - 16);
              }
              else
              {
                int v17 = 1;
                while (v16 != -4096)
                {
                  int v18 = v14 + v17++;
                  uint64_t v14 = v18 & v13;
                  uint64_t v16 = *(void *)(v11 + 16 * v14);
                  if (v9 == v16)
                  {
                    unsigned int v15 = (uint64_t *)(v11 + 16 * v14);
                    goto LABEL_17;
                  }
                }
              }
              *(unsigned char *)(v9 + 17) &= ~1u;
            }
          }
        }
      }
    }
    a1[1] = i;
  }
}

void sub_1CC1E4588(uint64_t *a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (a2 > (v4 - v5) >> 5)
  {
    unint64_t v7 = (void *)*a1;
    uint64_t v8 = v5 - *a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      abort();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 4 > v9) {
      unint64_t v9 = v10 >> 4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 59) {
        sub_1CB833614();
      }
      uint64_t v12 = (char *)operator new(32 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = (uint64_t)&v12[32 * (v8 >> 5)];
    unint64_t v14 = v13 + 32 * a2;
    uint64_t v15 = v13;
    do
    {
      *(void *)(v15 + 8) = 0;
      *(void *)(v15 + 16) = 0;
      *(void *)uint64_t v15 = 6;
      *(_DWORD *)(v15 + 24) = 0;
      v15 += 32;
    }
    while (v15 != v14);
    uint64_t v16 = &v12[32 * v11];
    while ((void *)v5 != v7)
    {
      v13 -= 32;
      v5 -= 32;
      sub_1CC1E33EC(v13, v5);
    }
    int v17 = (char *)*a1;
    int v18 = (char *)a1[1];
    *a1 = v13;
    a1[1] = v14;
    for (a1[2] = (uint64_t)v16; v18 != v17; v18 -= 32)
    {
      uint64_t v19 = *((void *)v18 - 2);
      if (v19 && v19 != -8192 && v19 != -4096)
      {
        unint64_t v20 = *((void *)v18 - 4) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v20 = *((void *)v18 - 3);
        unsigned int v21 = (unint64_t *)*((void *)v18 - 3);
        if (v21)
        {
          *unsigned int v21 = *v21 & 7 | v20;
        }
        else
        {
          uint64_t v22 = *((void *)v18 - 2);
          unint64_t v23 = ***(int32x2_t ****)v22;
          unint64_t v24 = (unint64_t)v23[303];
          if (v24 <= v20)
          {
            uint64_t v25 = v23[305].u32[0];
            if (v24 + 16 * v25 > v20)
            {
              unsigned int v26 = v25 - 1;
              LODWORD(v27) = v26 & ((v22 >> 4) ^ (v22 >> 9));
              int v28 = (uint64_t *)(v24 + 16 * v27);
              uint64_t v29 = *v28;
              if (v22 == *v28)
              {
LABEL_34:
                *int v28 = -8192;
                v23[304] = vadd_s32(v23[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v22 = *((void *)v18 - 2);
              }
              else
              {
                int v30 = 1;
                while (v29 != -4096)
                {
                  int v31 = v27 + v30++;
                  uint64_t v27 = v31 & v26;
                  uint64_t v29 = *(void *)(v24 + 16 * v27);
                  if (v22 == v29)
                  {
                    int v28 = (uint64_t *)(v24 + 16 * v27);
                    goto LABEL_34;
                  }
                }
              }
              *(unsigned char *)(v22 + 17) &= ~1u;
            }
          }
        }
      }
    }
    if (v17)
    {
      operator delete(v17);
    }
  }
  else
  {
    if (a2)
    {
      uint64_t v6 = v5 + 32 * a2;
      do
      {
        *(void *)(v5 + 8) = 0;
        *(void *)(v5 + 16) = 0;
        *(void *)uint64_t v5 = 6;
        *(_DWORD *)(v5 + 24) = 0;
        v5 += 32;
      }
      while (v5 != v6);
      uint64_t v5 = v6;
    }
    a1[1] = v5;
  }
}

void sub_1CC1E47CC(void ***a1)
{
  char v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1CD4AF9B4(v4 - 48);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC1E4850(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1CC1E4850(a1, *a2);
    sub_1CC1E4850(a1, a2[1]);
    uint64_t v5 = (void *)a2[4];
    if (v5 != a2 + 7) {
      free(v5);
    }
    operator delete(a2);
  }
}

void sub_1CC1E48C8(void **a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v778 = *MEMORY[0x1E4F143B8];
  v749[0] = a5;
  v749[1] = a6;
  if (a3)
  {
    *(void *)(a2 + 48) = (a3 >> 3) & 0x1FFFFFFFFFFFFFF8;
    *(_DWORD *)(a2 + 64) = 0;
    if ((a3 & 0x3F) != 0
      && (sub_1CC1CA844(a2 + 32, a3 & 0x3F, (uint64_t)&v774), (v774.__r_.__value_.__s.__data_[8] & 1) != 0))
    {
      std::string::size_type v687 = v774.__r_.__value_.__r.__words[0];
      void *v7 = (void *)v774.__r_.__value_.__r.__words[0];
      if (v687) {
        return;
      }
    }
    else
    {
      void *v7 = 0;
    }
  }
  else
  {
    llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 32), 0, 8, a1);
    if (*v7) {
      return;
    }
  }
  unint64_t v755 = v757;
  uint64_t v756 = 0x4000000000;
  uint64_t v8 = v6 + 8;
  char v748 = 0;
  unint64_t v9 = (llvm::BitstreamCursor *)(v6 + 32);
  v747[0] = &v748;
  v747[1] = v6;
  v747[2] = v749;
  uint64_t v741 = (void *)(v6 + 1720);
  uint64_t v742 = (std::string **)(v6 + 1704);
  int v745 = (void *)(v6 + 1376);
  uint64_t v737 = v6 + 592;
  uint64_t v738 = v6 + 544;
  uint64_t v739 = (unint64_t *)(v6 + 496);
  int v740 = (unint64_t *)(v6 + 472);
  uint64_t v736 = v6 + 720;
  v734 = (uint64_t *)(v6 + 616);
  uint64_t v735 = v6 + 1496;
  uint64_t v744 = v6 + 8;
  v746 = (llvm::BitstreamCursor *)(v6 + 32);
  do
  {
    sub_1CC1CA5F4((uint64_t)v9, 0, (uint64_t)&v753);
    if (v754)
    {
      uint64_t v10 = v753;
      v753 = 0;
      void *v7 = v10;
      goto LABEL_14;
    }
    if (v753 != 2)
    {
      if (v753 != 1)
      {
        if (!v753)
        {
          v774.__r_.__value_.__r.__words[0] = (std::string::size_type)"Malformed block";
          __int16 v776 = 259;
          sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&v774);
        }
        llvm::BitstreamCursor::readRecord(v9, SHIDWORD(v753), (uint64_t)&v755, 0, (uint64_t)&v761);
        if (v762)
        {
          int v18 = v761;
          v761 = 0;
          void *v7 = v18;
          goto LABEL_28;
        }
        int v13 = (int)v761;
        switch((int)v761)
        {
          case 1:
            sub_1CC1EACC0((uint64_t)&v774, v8, (int *)v755, v756);
            if (v774.__r_.__value_.__s.__data_[8])
            {
              void *v7 = (void *)v774.__r_.__value_.__r.__words[0];
              int v11 = 1;
            }
            else
            {
              *(unsigned char *)(v6 + 1640) = LODWORD(v774.__r_.__value_.__l.__data_) != 0;
              int v11 = 6;
            }
            goto LABEL_835;
          case 2:
            if (v748)
            {
              long long v278 = "target triple too late in module";
              goto LABEL_685;
            }
            memset(&v774, 0, sizeof(v774));
            sub_1CC1D3108(&v774, (std::string *)v755, (std::string *)((char *)v755 + 8 * v756));
            if ((v774.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v321 = &v774;
            }
            else {
              unint64_t v321 = (std::string *)v774.__r_.__value_.__r.__words[0];
            }
            if ((v774.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t size = *((unsigned char *)&v774.__r_.__value_.__s + 23) & 0x7F;
            }
            else {
              size_t size = v774.__r_.__value_.__l.__size_;
            }
            sub_1CBF4BD94(*(void *)(v6 + 432), v321, size);
LABEL_829:
            if (SHIBYTE(v774.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v774.__r_.__value_.__l.__data_);
            }
            goto LABEL_1160;
          case 3:
            if (v748)
            {
              long long v278 = "datalayout too late in module";
              goto LABEL_685;
            }
            memset(&__p, 0, sizeof(__p));
            sub_1CC1D3108(&__p, (std::string *)v755, (std::string *)((char *)v755 + 8 * v756));
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v319 = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
            }
            else {
              unint64_t v319 = __p.__r_.__value_.__l.__size_;
            }
            llvm::DataLayout::parse(p_p, v319, (uint64_t)&v774);
            if (v777)
            {
              std::string::size_type v367 = v774.__r_.__value_.__r.__words[0];
              v774.__r_.__value_.__r.__words[0] = 0;
              void *v7 = (void *)v367;
              int v11 = 1;
            }
            else
            {
              sub_1CB94E404(*(void *)(v6 + 432) + 272, (uint64_t)&v774);
              int v11 = 6;
              if ((v777 & 1) == 0)
              {
                llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v774);
                goto LABEL_833;
              }
            }
            std::string::size_type v320 = v774.__r_.__value_.__r.__words[0];
            v774.__r_.__value_.__r.__words[0] = 0;
            if (v320) {
              (*(void (**)(std::string::size_type))(*(void *)v320 + 8))(v320);
            }
LABEL_833:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
LABEL_835:
            if (v11 != 6) {
              goto LABEL_1161;
            }
            goto LABEL_1160;
          case 4:
            memset(&v774, 0, sizeof(v774));
            sub_1CC1D3108(&v774, (std::string *)v755, (std::string *)((char *)v755 + 8 * v756));
            if ((v774.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unsigned int v374 = &v774;
            }
            else {
              unsigned int v374 = (std::string *)v774.__r_.__value_.__r.__words[0];
            }
            if ((v774.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v375 = *((unsigned char *)&v774.__r_.__value_.__s + 23) & 0x7F;
            }
            else {
              std::string::size_type v375 = v774.__r_.__value_.__l.__size_;
            }
            LLVMSetModuleInlineAsm2_0(*(void *)(v6 + 432), (const std::string::value_type *)v374, v375);
            goto LABEL_829;
          case 5:
            memset(&v774, 0, sizeof(v774));
            sub_1CC1D3108(&v774, (std::string *)v755, (std::string *)((char *)v755 + 8 * v756));
            unint64_t v271 = *(void *)(v6 + 480);
            if (v271 >= *(void *)(v6 + 488))
            {
              uint64_t v303 = sub_1CBF64E70(v740, (uint64_t)&v774);
            }
            else
            {
              if (SHIBYTE(v774.__r_.__value_.__r.__words[2]) < 0)
              {
                sub_1CB8BDF7C(*(void *)(v6 + 480), v774.__r_.__value_.__l.__data_, v774.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v272 = *(_OWORD *)&v774.__r_.__value_.__l.__data_;
                *(void *)(v271 + 16) = *((void *)&v774.__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v271 = v272;
              }
              uint64_t v303 = v271 + 24;
            }
            *(void *)(v6 + 480) = v303;
            goto LABEL_829;
          case 6:
            memset(&v774, 0, sizeof(v774));
            sub_1CC1D3108(&v774, (std::string *)v755, (std::string *)((char *)v755 + 8 * v756));
            goto LABEL_829;
          case 7:
            long long v279 = (char *)v755;
            unint64_t v280 = v756;
            if (*(unsigned char *)(v6 + 392))
            {
              std::string::size_type v281 = *((void *)v755 + 1);
              if (v281 + *(void *)v755 > *(void *)(v6 + 384)) {
                goto LABEL_728;
              }
              uint64_t v282 = (const char *)(*(void *)(v6 + 376) + *(void *)v755);
              unint64_t v280 = v756 - 2;
              long long v279 = (char *)v755 + 16;
            }
            else
            {
              std::string::size_type v281 = 0;
              uint64_t v282 = "";
            }
            if (v280 <= 5)
            {
LABEL_728:
              v774.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid record";
              __int16 v776 = 259;
              sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&v774);
            }
            std::string::size_type v727 = (std::string::size_type)v282;
            LODWORD(v765) = *(_DWORD *)v279;
            uint64_t v323 = sub_1CC1E22AC(v6, v765);
            if (!v323)
            {
              int v369 = "Invalid record";
              goto LABEL_896;
            }
            uint64_t v324 = (llvm::PointerType *)v323;
            unint64_t v325 = *((void *)v279 + 1);
            if ((v325 & 2) != 0)
            {
              size_t v704 = (llvm::GlobalObject *)*((void *)v279 + 1);
              unint64_t v370 = (v325 >> 2);
              goto LABEL_880;
            }
            if (*(_DWORD *)(v323 + 8) != 15)
            {
              int v369 = "Invalid type for value";
              goto LABEL_896;
            }
            unint64_t v716 = *(unsigned int *)(v323 + 8);
            size_t v704 = (llvm::GlobalObject *)*((void *)v279 + 1);
            uint64_t v326 = *(void *)(v6 + 544);
            uint64_t v327 = *(unsigned int *)(v6 + 560);
            if (!v327) {
              goto LABEL_1358;
            }
            unsigned int v328 = v327 - 1;
            v329 = (int *)(v326 + 32 * ((v327 - 1) & (37 * v765)));
            int v330 = *v329;
            if (v765 != *v329)
            {
              uint64_t v666 = v7;
              uint64_t v667 = v6;
              int v668 = 1;
              LODWORD(v669) = v328 & (37 * v765);
              while (1)
              {
                uint64_t v6 = v667;
                unint64_t v7 = v666;
                uint64_t v8 = v744;
                if (v330 == -1) {
                  break;
                }
                int v670 = v669 + v668++;
                uint64_t v669 = v670 & v328;
                int v330 = *(_DWORD *)(v326 + 32 * v669);
                if (v765 == v330)
                {
                  v329 = (int *)(v326 + 32 * v669);
                  uint64_t v6 = v667;
                  unint64_t v7 = v666;
                  uint64_t v8 = v744;
                  goto LABEL_734;
                }
              }
LABEL_1358:
              v329 = (int *)(v326 + 32 * v327);
            }
LABEL_734:
            if ((int *)(v326 + 32 * v327) == v329 || !v329[4]) {
              unsigned int v331 = -1;
            }
            else {
              unsigned int v331 = **((_DWORD **)v329 + 1);
            }
            LODWORD(v765) = v331;
            uint64_t v379 = sub_1CC1E22AC(v6, v331);
            if (v379)
            {
              uint64_t v324 = (llvm::PointerType *)v379;
              unint64_t v370 = v716 >> 8;
LABEL_880:
              unint64_t v696 = *((void *)v279 + 3);
              unint64_t v701 = v370;
              int v717 = sub_1CC1EAF14(v696);
              unint64_t v380 = *((void *)v279 + 4);
              if (v380 > 0x21)
              {
                v774.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid alignment value";
                __int16 v776 = 259;
                sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&v774);
              }
              if (v380) {
                unsigned int v381 = (v380 - 1) | 0x100;
              }
              else {
                unsigned int v381 = 0;
              }
              unsigned __int8 v690 = v381;
              uint64_t v692 = v381 >> 8;
              void *v7 = 0;
              memset(&__p, 0, sizeof(__p));
              uint64_t v382 = *((void *)v279 + 5);
              if (v382)
              {
                unint64_t v383 = v382 - 1;
                uint64_t v384 = *(void *)(v6 + 472);
                if (v383 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v6 + 480) - v384) >> 3))
                {
                  uint64_t v388 = "Invalid ID";
                  goto LABEL_1078;
                }
                std::string::operator=(&__p, (const std::string *)(v384 + 24 * v383));
              }
              char v385 = 0;
              if (v280 < 7)
              {
                char v386 = (char)v704;
              }
              else
              {
                char v386 = (char)v704;
                if ((v717 - 7) >= 2)
                {
                  int v387 = *((_DWORD *)v279 + 12);
                  if (v387 == 2) {
                    char v385 = 2;
                  }
                  else {
                    char v385 = v387 == 1;
                  }
                }
              }
              char v712 = v7;
              char v706 = v385;
              if (v280 < 8)
              {
                uint64_t v689 = 0;
              }
              else
              {
                if (*((_DWORD *)v279 + 14) >= 5u) {
                  LOBYTE(v403) = 1;
                }
                else {
                  int v403 = *((_DWORD *)v279 + 14);
                }
                LOBYTE(v689) = v403;
                if (v280 == 8)
                {
                  HIDWORD(v689) = 0;
                }
                else
                {
                  int v430 = *((_DWORD *)v279 + 16);
                  if (v430 == 2) {
                    int v431 = 64;
                  }
                  else {
                    int v431 = (v430 == 1) << 7;
                  }
                  HIDWORD(v689) = v431;
                  if (v280 != 9)
                  {
                    char v404 = *((void *)v279 + 9) != 0;
LABEL_928:
                    char v688 = v386 & 1;
                    unsigned int v405 = operator new(0x78uLL);
                    v405[13] = v405[13] & 0x38000000 | 1;
                    unsigned int v406 = (llvm::GlobalValue *)(v405 + 8);
                    *(void *)unsigned int v405 = 0;
                    *((void *)v405 + 1) = 0;
                    *((void *)v405 + 2) = 0;
                    *((void *)v405 + 3) = v405 + 8;
                    uint64_t v407 = *(void *)(v6 + 432);
                    __int16 v776 = 261;
                    v774.__r_.__value_.__r.__words[0] = v727;
                    v774.__r_.__value_.__l.__size_ = v281;
                    v408 = (llvm::Type *)v405;
                    llvm::GlobalVariable::GlobalVariable((unint64_t *)v405 + 4, v407, v324, v688, v717, 0, (const char **)&v774.__r_.__value_.__l.__data_, 0, v689, (llvm::Type *)(v701 | 0x100000000), v404);
                    int v409 = (v690 << 16) + 0x10000;
                    if (!v692) {
                      int v409 = 0;
                    }
                    unsigned int v410 = *((_DWORD *)v408 + 16) & 0xFFC0FFFF | v409;
                    *((_DWORD *)v408 + 16) = v410;
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      size_t v411 = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
                    }
                    else {
                      size_t v411 = __p.__r_.__value_.__l.__size_;
                    }
                    if (!v411)
                    {
                      unint64_t v7 = v712;
                      goto LABEL_941;
                    }
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      unint64_t v412 = &__p;
                    }
                    else {
                      unint64_t v412 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    }
                    uint64_t v413 = (llvm::GlobalValue *)llvm::UniqueStringSaver::save(***(void ***)v406 + 2136, v412, v411);
                    uint64_t v414 = v413;
                    unsigned __int8 v416 = v415;
                    uint64_t v417 = ***(void ***)v406;
                    v774.__r_.__value_.__r.__words[0] = (std::string::size_type)v406;
                    int v418 = *(_DWORD *)(v417 + 2520);
                    unint64_t v7 = v712;
                    if (v418)
                    {
                      uint64_t v419 = *(void *)(v417 + 2504);
                      int v420 = v418 - 1;
                      unsigned int v421 = v420 & ((v406 >> 4) ^ (v406 >> 9));
                      unsigned int v422 = (llvm::GlobalValue **)(v419 + 24 * v421);
                      unsigned int v423 = *v422;
                      if (*v422 == v406)
                      {
LABEL_939:
                        v422[1] = v414;
                        v422[2] = v416;
                        unsigned int v410 = *((_DWORD *)v408 + 16) & 0xFFBFFFFF | ((v416 != 0) << 22);
LABEL_941:
                        int v424 = v410 & 0xF;
                        unsigned int v425 = v410 & 0xFFFFFFCF | (16 * (v706 & 3));
                        *((_DWORD *)v408 + 16) = v425;
                        if ((v424 - 7) < 2
                          || 16 * (v706 & 3)
                          && (char hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(v406),
                              unsigned int v425 = *((_DWORD *)v408 + 16),
                              (hasExternalWeakLinkage & 1) == 0))
                        {
                          v425 |= 0x4000u;
                        }
                        unsigned int v426 = v425 & 0xFFFFFF3F | HIDWORD(v689);
                        *((_DWORD *)v408 + 16) = v426;
                        if (v280 < 0xB)
                        {
                          if (v696 == 6)
                          {
                            unsigned int v428 = v426 & 0xFFFFFCFF;
                            unsigned int v429 = 512;
                          }
                          else
                          {
                            if (v696 != 5) {
                              goto LABEL_1038;
                            }
                            unsigned int v428 = v426 & 0xFFFFFCFF;
                            unsigned int v429 = 256;
                          }
                        }
                        else
                        {
                          int v427 = *((_DWORD *)v279 + 20);
                          if (v427 == 2) {
                            unsigned int v428 = 512;
                          }
                          else {
                            unsigned int v428 = (v427 == 1) << 8;
                          }
                          unsigned int v429 = v426 & 0xFFFFFCFF;
                        }
                        *((_DWORD *)v408 + 16) = v428 | v429;
LABEL_1038:
                        int v500 = sub_1CC1E23EC(v6, *(void *)v406, (char *)&v765, 1);
                        v774.__r_.__value_.__r.__words[0] = (std::string::size_type)v406;
                        LODWORD(v758) = v500;
                        unint64_t v501 = *(void *)(v6 + 624);
                        if (v501 >= *(void *)(v6 + 632))
                        {
                          uint64_t v502 = sub_1CC1E31BC(v734, (uint64_t *)&v774, &v758);
                        }
                        else
                        {
                          *(void *)unint64_t v501 = 6;
                          *(void *)(v501 + 8) = 0;
                          *(void *)(v501 + 16) = v406;
                          if (v406 != (llvm::GlobalValue *)-8192 && v406 != (llvm::GlobalValue *)-4096 && v406)
                          {
                            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v501);
                            int v500 = (int)v758;
                          }
                          *(_DWORD *)(v501 + 24) = v500;
                          uint64_t v502 = v501 + 32;
                        }
                        *(void *)(v6 + 624) = v502;
                        uint64_t v503 = *((void *)v279 + 2);
                        if (v503)
                        {
                          v504 = (llvm::GlobalValue *)(v503 - 1);
                          int v505 = *(llvm::GlobalValue ***)(v6 + 1280);
                          unint64_t v506 = *(void *)(v6 + 1288);
                          if ((unint64_t)v505 >= v506)
                          {
                            int v720 = v408;
                            unint64_t v731 = v406;
                            v508 = *(char **)(v6 + 1272);
                            uint64_t v509 = ((char *)v505 - v508) >> 4;
                            unint64_t v510 = v509 + 1;
                            if ((unint64_t)(v509 + 1) >> 60) {
                              goto LABEL_1377;
                            }
                            uint64_t v511 = v506 - (void)v508;
                            if (v511 >> 3 > v510) {
                              unint64_t v510 = v511 >> 3;
                            }
                            if ((unint64_t)v511 >= 0x7FFFFFFFFFFFFFF0) {
                              unint64_t v510 = 0xFFFFFFFFFFFFFFFLL;
                            }
                            char v708 = (llvm::GlobalObject *)v510;
                            if (v510)
                            {
                              if (v510 >> 60) {
                                goto LABEL_1378;
                              }
                              v512 = v504;
                              v513 = (char *)operator new(16 * v510);
                              v504 = v512;
                            }
                            else
                            {
                              v513 = 0;
                            }
                            v518 = (llvm::GlobalValue **)&v513[16 * v509];
                            *v518 = v731;
                            v518[1] = v504;
                            v519 = v518;
                            if (v505 == (llvm::GlobalValue **)v508)
                            {
                              v520 = v708;
                            }
                            else
                            {
                              v520 = v708;
                              do
                              {
                                *((_OWORD *)v519 - 1) = *((_OWORD *)v505 - 1);
                                v519 -= 2;
                                v505 -= 2;
                              }
                              while (v505 != (llvm::GlobalValue **)v508);
                              int v505 = *(llvm::GlobalValue ***)(v6 + 1272);
                            }
                            *(void *)(v6 + 1272) = v519;
                            uint64_t v507 = v518 + 2;
                            *(void *)(v6 + 1280) = v518 + 2;
                            *(void *)(v6 + 1288) = &v513[16 * (void)v520];
                            v408 = v720;
                            if (v505) {
                              operator delete(v505);
                            }
                            unsigned int v406 = v731;
                          }
                          else
                          {
                            *int v505 = v406;
                            v505[1] = v504;
                            uint64_t v507 = v505 + 2;
                          }
                          *(void *)(v6 + 1280) = v507;
                          unint64_t v7 = v712;
                        }
                        v521 = v406;
                        if (v280 < 0xC)
                        {
                          uint64_t v8 = v744;
                          if (v696 <= 0xB && ((1 << v696) & 0xC12) != 0)
                          {
                            v758 = v521;
                            sub_1CD484194((uint64_t)&v774, v736, &v758);
                          }
                        }
                        else
                        {
                          uint64_t v522 = *((void *)v279 + 11);
                          uint64_t v8 = v744;
                          if (v522)
                          {
                            uint64_t v523 = *(void *)(v6 + 696);
                            if (*((void *)v279 + 11) > (unint64_t)((*(void *)(v6 + 704) - v523) >> 3))
                            {
                              uint64_t v388 = "Invalid global variable comdat ID";
LABEL_1078:
                              v774.__r_.__value_.__r.__words[0] = (std::string::size_type)v388;
                              __int16 v776 = 259;
                              sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&v774);
                            }
                            llvm::GlobalObject::setComdat(v521, *(llvm::Comdat **)(v523 + 8 * (v522 - 1)));
                          }
                          if (v280 >= 0xD)
                          {
                            unint64_t v524 = (*((_DWORD *)v279 + 24) - 1);
                            uint64_t v525 = *(void *)(v6 + 1344);
                            if (v524 >= (*(void *)(v6 + 1352) - v525) >> 3) {
                              goto LABEL_1146;
                            }
                            uint64_t v526 = *(void *)(v525 + 8 * v524);
                            if (!v526) {
                              goto LABEL_1147;
                            }
                            if (*(_DWORD *)(v526 + 8)) {
                              uint64_t v526 = *(void *)(v526 + 40);
                            }
                            else {
LABEL_1146:
                            }
                              uint64_t v526 = 0;
LABEL_1147:
                            *((void *)v408 + 13) = v526;
                            if (v280 >= 0xE) {
                              *((_DWORD *)v408 + 16) = *((_DWORD *)v408 + 16) & 0xFFFFBFFF | ((*((_DWORD *)v279 + 26) == 1) << 14);
                            }
                          }
                        }
                        int v553 = *((_DWORD *)v408 + 16);
                        if ((v553 & 0xFu) - 7 >= 2)
                        {
                          if (v553 & 0x30) == 0 || (llvm::GlobalValue::hasExternalWeakLinkage(v521))
                          {
LABEL_1154:
                            if (v280 >= 0x10)
                            {
                              size_t v554 = *((void *)v279 + 15);
                              if ((*((unsigned char *)v408 + 65) & 0x80) != 0 || v554)
                              {
                                uint64_t v662 = (unsigned char *)(*(void *)(v6 + 376) + *((void *)v279 + 14));
                                if (v554)
                                {
                                  uint64_t v662 = llvm::UniqueStringSaver::save(***(void ***)v521 + 2136, v662, v554);
                                  uint64_t v663 = v671;
                                }
                                else
                                {
                                  uint64_t v663 = 0;
                                }
                                uint64_t v672 = ***((void ***)v408 + 4) + 2528;
                                v774.__r_.__value_.__r.__words[0] = (std::string::size_type)v521;
                                uint64_t v673 = sub_1CD4CB550(v672, (uint64_t *)&v774);
                                v673[1] = v662;
                                v673[2] = v663;
                                *((_DWORD *)v408 + 16) = *((_DWORD *)v408 + 16) & 0xFFFF7FFF | ((v663 != 0) << 15);
                                uint64_t v8 = v744;
                              }
                            }
                            void *v7 = 0;
                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(__p.__r_.__value_.__l.__data_);
                            }
                            unint64_t v9 = v746;
                            if (!*v7)
                            {
LABEL_1160:
                              int v11 = 0;
                              LODWORD(v756) = 0;
                              goto LABEL_1161;
                            }
LABEL_28:
                            int v11 = 1;
LABEL_1161:
                            if (v762)
                            {
                              v555 = v761;
                              v761 = 0;
                              if (v555) {
                                (*(void (**)(void *))(*(void *)v555 + 8))(v555);
                              }
                            }
                            goto LABEL_15;
                          }
                          int v553 = *((_DWORD *)v408 + 16);
                        }
                        *((_DWORD *)v408 + 16) = v553 | 0x4000;
                        goto LABEL_1154;
                      }
                      v514 = 0;
                      int v515 = 1;
                      while (v423 != (llvm::GlobalValue *)-4096)
                      {
                        if (v514) {
                          BOOL v516 = 0;
                        }
                        else {
                          BOOL v516 = v423 == (llvm::GlobalValue *)-8192;
                        }
                        if (v516) {
                          v514 = v422;
                        }
                        unsigned int v517 = v421 + v515++;
                        unsigned int v421 = v517 & v420;
                        unsigned int v422 = (llvm::GlobalValue **)(v419 + 24 * v421);
                        unsigned int v423 = *v422;
                        if (*v422 == v406) {
                          goto LABEL_939;
                        }
                      }
                      v733 = v414;
                      if (v514) {
                        v594 = v514;
                      }
                      else {
                        v594 = v422;
                      }
                    }
                    else
                    {
                      v733 = v413;
                      v594 = 0;
                    }
                    unsigned int v422 = (llvm::GlobalValue **)sub_1CC5BF31C(v417 + 2504, (uint64_t)&v774, (uint64_t *)&v774, v594);
                    std::string::size_type v595 = v774.__r_.__value_.__r.__words[0];
                    v422[1] = 0;
                    v422[2] = 0;
                    void *v422 = (llvm::GlobalValue *)v595;
                    uint64_t v414 = v733;
                    goto LABEL_939;
                  }
                }
              }
              char v404 = 0;
              goto LABEL_928;
            }
            int v369 = "Missing element type for old-style global";
LABEL_896:
            v774.__r_.__value_.__r.__words[0] = (std::string::size_type)v369;
            __int16 v776 = 259;
            sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&v774);
          case 8:
            sub_1CC1EA0B4((uint64_t)v747);
            uint64_t v265 = (char *)v755;
            unint64_t v266 = v756;
            if (*(unsigned char *)(v6 + 392))
            {
              std::string::size_type v267 = *((void *)v755 + 1);
              if (v267 + *(void *)v755 > *(void *)(v6 + 384)) {
                goto LABEL_705;
              }
              uint64_t v268 = (const char *)(*(void *)(v6 + 376) + *(void *)v755);
              unint64_t v266 = v756 - 2;
              uint64_t v265 = (char *)v755 + 16;
            }
            else
            {
              std::string::size_type v267 = 0;
              uint64_t v268 = "";
            }
            if (v266 <= 7) {
              goto LABEL_705;
            }
            unint64_t v699 = v266;
            v750[0] = *(_DWORD *)v265;
            uint64_t v304 = sub_1CC1E22AC(v6, v750[0]);
            if (!v304)
            {
LABEL_695:
              uint64_t v313 = "Invalid record";
              goto LABEL_696;
            }
            uint64_t v305 = (llvm::PointerType *)v304;
            int v306 = *(unsigned __int8 *)(v304 + 8);
            if (v306 != 15) {
              goto LABEL_861;
            }
            uint64_t v307 = *(void *)(v6 + 544);
            uint64_t v308 = *(unsigned int *)(v6 + 560);
            if (!v308) {
              goto LABEL_1349;
            }
            unsigned int v309 = v308 - 1;
            uint64_t v310 = (int *)(v307 + 32 * ((v308 - 1) & (37 * v750[0])));
            int v311 = *v310;
            if (v750[0] != *v310)
            {
              v656 = v265;
              unint64_t v657 = v7;
              uint64_t v658 = v6;
              int v659 = 1;
              LODWORD(v660) = v309 & (37 * v750[0]);
              while (1)
              {
                uint64_t v6 = v658;
                unint64_t v7 = v657;
                uint64_t v8 = v744;
                uint64_t v265 = v656;
                if (v311 == -1) {
                  break;
                }
                int v661 = v660 + v659++;
                uint64_t v660 = v661 & v309;
                int v311 = *(_DWORD *)(v307 + 32 * v660);
                if (v750[0] == v311)
                {
                  uint64_t v310 = (int *)(v307 + 32 * v660);
                  uint64_t v6 = v658;
                  unint64_t v7 = v657;
                  uint64_t v8 = v744;
                  uint64_t v265 = v656;
                  goto LABEL_692;
                }
              }
LABEL_1349:
              uint64_t v310 = (int *)(v307 + 32 * v308);
            }
LABEL_692:
            if ((int *)(v307 + 32 * v308) == v310 || !v310[4]) {
              unsigned int v312 = -1;
            }
            else {
              unsigned int v312 = **((_DWORD **)v310 + 1);
            }
            v750[0] = v312;
            uint64_t v373 = sub_1CC1E22AC(v6, v312);
            if (!v373)
            {
              uint64_t v313 = "Missing element type for old-style function";
LABEL_696:
              v774.__r_.__value_.__r.__words[0] = (std::string::size_type)v313;
              __int16 v776 = 259;
              int v314 = (int)v7;
LABEL_697:
              sub_1CC1DDE58(v314, v8, (llvm::Twine *)&v774);
            }
            uint64_t v305 = (llvm::PointerType *)v373;
            int v306 = *(unsigned __int8 *)(v373 + 8);
LABEL_861:
            if (v306 != 14)
            {
LABEL_864:
              uint64_t v313 = "Invalid type for value";
              goto LABEL_696;
            }
            if ((*((void *)v265 + 1) & 0xFFFFFC00) != 0)
            {
              uint64_t v313 = "Invalid calling convention ID";
              goto LABEL_696;
            }
            uint64_t v728 = *((void *)v265 + 1);
            uint64_t v695 = v265;
            unint64_t v377 = *(void *)(v6 + 432);
            if (v699 < 0x11) {
              unsigned int v378 = *(_DWORD *)(v377 + 284);
            }
            else {
              unsigned int v378 = *((_DWORD *)v695 + 32);
            }
            unsigned int v718 = v378;
            v758 = 0;
            __int16 v776 = 261;
            v774.__r_.__value_.__r.__words[0] = (std::string::size_type)v268;
            v774.__r_.__value_.__l.__size_ = v267;
            unint64_t v432 = (unint64_t *)operator new(0x80uLL);
            BOOL v433 = (llvm::GlobalValue *)(v432 + 1);
            *((_DWORD *)v432 + 7) = *((_DWORD *)v432 + 7) & 0x38000000 | 0x40000000;
            *unint64_t v432 = 0;
            llvm::Function::Function(v432 + 1, v305, 0, (llvm::Type *)v718, (const char **)&v774.__r_.__value_.__l.__data_, v377);
            v758 = v433;
            unsigned int v434 = v750[0];
            int v435 = *(_DWORD *)(v6 + 608);
            if (v435)
            {
              uint64_t v436 = *(void *)(v6 + 592);
              int v437 = v435 - 1;
              unsigned int v438 = v437 & ((v433 >> 4) ^ (v433 >> 9));
              unint64_t v439 = (llvm::GlobalValue **)(v436 + 16 * v438);
              uint64_t v440 = *v439;
              v441 = v695;
              if (v433 == *v439) {
                goto LABEL_972;
              }
              v442 = 0;
              int v443 = 1;
              while (v440 != (llvm::GlobalValue *)-4096)
              {
                if (v442) {
                  BOOL v444 = 0;
                }
                else {
                  BOOL v444 = v440 == (llvm::GlobalValue *)-8192;
                }
                if (v444) {
                  v442 = v439;
                }
                unsigned int v445 = v438 + v443++;
                unsigned int v438 = v445 & v437;
                unint64_t v439 = (llvm::GlobalValue **)(v436 + 16 * v438);
                uint64_t v440 = *v439;
                if (v433 == *v439) {
                  goto LABEL_972;
                }
              }
              if (v442) {
                uint64_t v446 = v442;
              }
              else {
                uint64_t v446 = v439;
              }
            }
            else
            {
              uint64_t v446 = 0;
              v441 = v695;
            }
            unint64_t v439 = (llvm::GlobalValue **)sub_1CC1E3088(v737, (uint64_t)&v758, (uint64_t *)&v758, v446);
            *unint64_t v439 = v758;
            *((_DWORD *)v439 + 2) = 0;
            BOOL v433 = v758;
LABEL_972:
            *((_DWORD *)v439 + 2) = v434;
            *((_WORD *)v433 + 9) = *((_WORD *)v433 + 9) & 0xC00F | (16 * v728);
            uint64_t v691 = *((void *)v441 + 2);
            unint64_t v694 = *((void *)v441 + 3);
            int v447 = sub_1CC1EAF14(v694);
            int v448 = *((_DWORD *)v433 + 8);
            if ((v447 - 7) >= 2) {
              unsigned int v449 = *((_DWORD *)v433 + 8);
            }
            else {
              unsigned int v449 = v448 & 0xFFFFFFC0;
            }
            unsigned int v450 = v449 & 0xFFFFFFF0 | v447;
            *((_DWORD *)v433 + 8) = v450;
            if ((v447 - 7) < 2)
            {
              unint64_t v9 = v746;
LABEL_1248:
              *((_DWORD *)v433 + 8) = v450 | 0x4000;
              goto LABEL_978;
            }
            unint64_t v9 = v746;
            if ((v448 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v433) & 1) == 0)
            {
              unsigned int v450 = *((_DWORD *)v433 + 8);
              goto LABEL_1248;
            }
LABEL_978:
            int v451 = v758;
            unint64_t v452 = (*((_DWORD *)v441 + 8) - 1);
            uint64_t v453 = *(void *)(v6 + 1344);
            if (v452 >= (*(void *)(v6 + 1352) - v453) >> 3) {
              uint64_t v454 = 0;
            }
            else {
              uint64_t v454 = *(void *)(v453 + 8 * v452);
            }
            *((void *)v758 + 14) = v454;
            if (*((void *)v451 + 12))
            {
              int v455 = 0;
              while (1)
              {
                uint64_t v456 = 0;
                __p.__r_.__value_.__r.__words[0] = 0x4900000045;
                LODWORD(__p.__r_.__value_.__r.__words[1]) = 71;
                uint64_t v457 = (v455 + 1);
                int v719 = v455;
                uint64_t v458 = (v455 + 2);
                do
                {
                  unint64_t v459 = v758;
                  std::string v461 = (uint64_t *)((char *)v758 + 112);
                  uint64_t v460 = *((void *)v758 + 14);
                  if (!v460) {
                    goto LABEL_986;
                  }
                  if (v458 >= *(_DWORD *)(v460 + 8)) {
                    goto LABEL_986;
                  }
                  uint64_t v462 = *(void *)(v460 + 8 * v458 + 40);
                  if (!v462) {
                    goto LABEL_986;
                  }
                  int v463 = *((_DWORD *)&__p.__r_.__value_.__l.__data_ + v456);
                  if (((*(unsigned __int8 *)(v462 + v463 / 8 + 12) >> (v463 & 7)) & 1) == 0) {
                    goto LABEL_986;
                  }
                  uint64_t v729 = v457;
                  int v707 = *((_DWORD *)&__p.__r_.__value_.__l.__data_ + v456);
                  uint64_t AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex((uint64_t *)v758 + 14, v457, v463);
                  uint64_t v457 = v729;
                  if (AttributeAtIndex)
                  {
                    if (*(void *)(AttributeAtIndex + 16)) {
                      goto LABEL_986;
                    }
                  }
                  *((void *)v459 + 14) = llvm::AttributeList::removeAttributeAtIndex(v461, **(uint64_t ***)v459, v729, v707);
                  uint64_t v465 = *(void *)(v6 + 544);
                  uint64_t v466 = *(unsigned int *)(v6 + 560);
                  if (v466)
                  {
                    unsigned int v467 = v466 - 1;
                    long long v468 = (int *)(v465 + 32 * ((v466 - 1) & (37 * v750[0])));
                    int v469 = *v468;
                    if (v750[0] == *v468) {
                      goto LABEL_993;
                    }
                    uint64_t v475 = v7;
                    uint64_t v476 = v6;
                    int v477 = 1;
                    LODWORD(v478) = v467 & (37 * v750[0]);
                    while (1)
                    {
                      uint64_t v6 = v476;
                      unint64_t v7 = v475;
                      uint64_t v8 = v744;
                      if (v469 == -1) {
                        break;
                      }
                      int v479 = v478 + v477++;
                      uint64_t v478 = v479 & v467;
                      int v469 = *(_DWORD *)(v465 + 32 * v478);
                      if (v750[0] == v469)
                      {
                        long long v468 = (int *)(v465 + 32 * v478);
                        uint64_t v6 = v476;
                        unint64_t v7 = v475;
                        uint64_t v8 = v744;
                        goto LABEL_993;
                      }
                    }
                  }
                  long long v468 = (int *)(v465 + 32 * v466);
LABEL_993:
                  if ((int *)(v465 + 32 * v466) == v468 || v468[4] <= v729) {
                    unsigned int v470 = -1;
                  }
                  else {
                    unsigned int v470 = *(_DWORD *)(*((void *)v468 + 1) + 4 * v729);
                  }
                  uint64_t v471 = sub_1CC1E3458(v6, v470);
                  if (!v471)
                  {
                    unint64_t v317 = "Missing param element type for attribute upgrade";
LABEL_706:
                    v774.__r_.__value_.__r.__words[0] = (std::string::size_type)v317;
                    __int16 v776 = 259;
                    sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&v774);
                  }
                  unint64_t v472 = llvm::Attribute::get(*(uint64_t **)(v6 + 424), v707, v471);
                  uint64_t v473 = v7;
                  int v474 = v758;
                  LODWORD(v774.__r_.__value_.__l.__data_) = v719;
                  *((void *)v474 + 14) = llvm::AttributeList::addParamAttribute((void *)v758 + 14, **(uint64_t ***)v758, &v774, 1, v472);
                  unint64_t v7 = v473;
                  uint64_t v8 = v744;
                  uint64_t v457 = v729;
LABEL_986:
                  ++v456;
                }
                while (v456 != 3);
                int v455 = v457;
                if (*((void *)v758 + 12) == v457)
                {
                  unint64_t v9 = v746;
                  v441 = v695;
                  if (!v457) {
                    break;
                  }
                  if ((*((_WORD *)v758 + 9) & 0x3FF0) != 0x530) {
                    break;
                  }
                  uint64_t v480 = *((void *)v758 + 14);
                  if (v480)
                  {
                    if (*(_DWORD *)(v480 + 8) >= 3u)
                    {
                      uint64_t v641 = *(void *)(v480 + 56);
                      if (v641)
                      {
                        if ((*(unsigned char *)(v641 + 20) & 0x20) != 0) {
                          break;
                        }
                      }
                    }
                  }
                  uint64_t v481 = *(void *)(v6 + 544);
                  uint64_t v482 = *(unsigned int *)(v6 + 560);
                  if (v482)
                  {
                    unsigned int v483 = v482 - 1;
                    v484 = (int *)(v481 + 32 * ((v482 - 1) & (37 * v750[0])));
                    int v485 = *v484;
                    if (v750[0] == *v484)
                    {
LABEL_1013:
                      if ((int *)(v481 + 32 * v482) == v484 || v484[4] < 2) {
                        unsigned int v486 = -1;
                      }
                      else {
                        unsigned int v486 = *(_DWORD *)(*((void *)v484 + 1) + 4);
                      }
                      uint64_t v556 = sub_1CC1E3458(v6, v486);
                      if (v556)
                      {
                        unint64_t v557 = llvm::Attribute::get(*(uint64_t **)(v6 + 424), 69, v556);
                        v558 = v758;
                        LODWORD(v774.__r_.__value_.__l.__data_) = 0;
                        *((void *)v558 + 14) = llvm::AttributeList::addParamAttribute((void *)v758 + 14, **(uint64_t ***)v758, &v774, 1, v557);
                        break;
                      }
                      int v587 = "Missing param element type for x86_intrcc upgrade";
LABEL_1211:
                      v774.__r_.__value_.__r.__words[0] = (std::string::size_type)v587;
                      __int16 v776 = 259;
                      sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&v774);
                    }
                    unsigned int v677 = v7;
                    uint64_t v678 = v6;
                    int v679 = 1;
                    LODWORD(v680) = v483 & (37 * v750[0]);
                    while (1)
                    {
                      uint64_t v6 = v678;
                      unint64_t v7 = v677;
                      uint64_t v8 = v744;
                      unint64_t v9 = v746;
                      v441 = v695;
                      if (v485 == -1) {
                        break;
                      }
                      int v681 = v680 + v679++;
                      uint64_t v680 = v681 & v483;
                      int v485 = *(_DWORD *)(v481 + 32 * v680);
                      if (v750[0] == v485)
                      {
                        v484 = (int *)(v481 + 32 * v680);
                        uint64_t v6 = v678;
                        unint64_t v7 = v677;
                        uint64_t v8 = v744;
                        unint64_t v9 = v746;
                        v441 = v695;
                        goto LABEL_1013;
                      }
                    }
                  }
                  v484 = (int *)(v481 + 32 * v482);
                  goto LABEL_1013;
                }
              }
            }
            unint64_t v559 = *((void *)v441 + 5);
            if (v559 > 0x21)
            {
              v774.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid alignment value";
              __int16 v776 = 259;
              sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&v774);
            }
            if (v559) {
              unsigned int v560 = (v559 - 1) | 0x100;
            }
            else {
              unsigned int v560 = 0;
            }
            uint64_t v561 = v560 >> 8;
            void *v7 = 0;
            uint64_t v562 = v758;
            int v563 = (v560 << 16) + 0x10000;
            if (!(v561 << 8)) {
              int v563 = 0;
            }
            unsigned int v564 = v563 | *((_DWORD *)v758 + 8) & 0xFFC0FFFF;
            *((_DWORD *)v758 + 8) = v564;
            uint64_t v565 = *((void *)v441 + 6);
            if (!v565) {
              goto LABEL_1189;
            }
            unint64_t v566 = v565 - 1;
            uint64_t v567 = *(void *)(v6 + 472);
            if (v566 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v6 + 480) - v567) >> 3)) {
              goto LABEL_1197;
            }
            uint64_t v568 = v567 + 24 * v566;
            char v569 = *(unsigned char *)(v568 + 23);
            uint64_t v570 = v569 >= 0 ? (llvm::GlobalValue *)v568 : *(llvm::GlobalValue **)v568;
            size_t v571 = v569 >= 0 ? v569 & 0x7F : *(void *)(v568 + 8);
            if ((v564 & 0x400000) == 0 && !v571) {
              goto LABEL_1189;
            }
            if (v571)
            {
              uint64_t v570 = (llvm::GlobalValue *)llvm::UniqueStringSaver::save(***(void ***)v562 + 2136, v570, v571);
              uint64_t v573 = v572;
            }
            else
            {
              uint64_t v573 = 0;
            }
            uint64_t v574 = ***(void ***)v562;
            v774.__r_.__value_.__r.__words[0] = (std::string::size_type)v562;
            int v575 = *(_DWORD *)(v574 + 2520);
            if (v575)
            {
              uint64_t v576 = *(void *)(v574 + 2504);
              int v577 = v575 - 1;
              unsigned int v578 = v577 & ((v562 >> 4) ^ (v562 >> 9));
              uint64_t v579 = (llvm::GlobalValue **)(v576 + 24 * v578);
              v580 = *v579;
              if (*v579 == v562)
              {
LABEL_1188:
                v579[1] = v570;
                v579[2] = v573;
                *((_DWORD *)v562 + 8) = *((_DWORD *)v562 + 8) & 0xFFBFFFFF | ((v573 != 0) << 22);
                uint64_t v562 = v758;
                unsigned int v564 = *((_DWORD *)v758 + 8);
                v441 = v695;
LABEL_1189:
                unint64_t v581 = v699;
                if ((v564 & 0xF) - 7 >= 2)
                {
                  int v582 = *((_DWORD *)v441 + 14);
                  int v583 = v582 == 2 ? 32 : 16 * (v582 == 1);
                  *((_DWORD *)v562 + 8) = v583 | v564 & 0xFFFFFFCF;
                  if (v583)
                  {
                    char v638 = llvm::GlobalValue::hasExternalWeakLinkage(v562);
                    unint64_t v581 = v699;
                    if ((v638 & 1) == 0) {
                      *((_DWORD *)v562 + 8) |= 0x4000u;
                    }
                  }
                }
                if (v581 <= 8)
                {
                  uint64_t v588 = v758;
                  unint64_t v589 = v694;
                }
                else
                {
                  uint64_t v584 = *((void *)v441 + 8);
                  if (v584)
                  {
                    unint64_t v585 = v584 - 1;
                    uint64_t v586 = *(void *)(v6 + 496);
                    if (v585 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v6 + 504) - v586) >> 3))
                    {
LABEL_1197:
                      int v587 = "Invalid ID";
                      goto LABEL_1211;
                    }
                    uint64_t v642 = v758;
                    uint64_t v643 = (long long *)(v586 + 24 * v585);
                    if (*((char *)v643 + 23) < 0)
                    {
                      sub_1CB8BDF7C((uint64_t)&__p, *(const void **)v643, *((void *)v643 + 1));
                    }
                    else
                    {
                      long long v644 = *v643;
                      __p.__r_.__value_.__r.__words[2] = *((void *)v643 + 2);
                      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v644;
                    }
                    llvm::Function::setGC((uint64_t)v642, (uint64_t)&__p);
                    uint64_t v8 = v744;
                    unint64_t v9 = v746;
                    v441 = v695;
                    unint64_t v581 = v699;
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(__p.__r_.__value_.__l.__data_);
                      unint64_t v581 = v699;
                    }
                  }
                  uint64_t v588 = v758;
                  unint64_t v589 = v694;
                  if (v581 > 9)
                  {
                    int v645 = *((_DWORD *)v441 + 18);
                    int v646 = (v645 == 1) << 7;
                    if (v645 == 2) {
                      int v646 = 64;
                    }
                    v590 = (unsigned int *)((char *)v758 + 32);
                    unsigned int v591 = v646 | *((_DWORD *)v758 + 8) & 0xFFFFFF3F;
                    *((_DWORD *)v758 + 8) = v591;
                    if (v581 == 10)
                    {
                      unsigned int v732 = 0;
                    }
                    else
                    {
                      unsigned int v732 = *((_DWORD *)v441 + 20);
                      if (v581 > 0xB)
                      {
                        uint64_t v709 = v588;
                        int v647 = *((_DWORD *)v441 + 22);
                        if (v647 == 2) {
                          int v648 = 512;
                        }
                        else {
                          int v648 = (v647 == 1) << 8;
                        }
                        unsigned int *v590 = v648 | v591 & 0xFFFFFCFF;
                        if (v581 != 12)
                        {
                          uint64_t v649 = *((void *)v695 + 12);
                          if (v649)
                          {
                            uint64_t v650 = *(void *)(v6 + 696);
                            if (*((void *)v695 + 12) > (unint64_t)((*(void *)(v6 + 704) - v650) >> 3))
                            {
                              v774.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid function comdat ID";
                              __int16 v776 = 259;
                              int v314 = (int)v7;
                              uint64_t v8 = v744;
                              goto LABEL_697;
                            }
                            llvm::GlobalObject::setComdat(v588, *(llvm::Comdat **)(v650 + 8 * (v649 - 1)));
                          }
                          if (v699 < 0xE)
                          {
                            int v596 = 0;
                            int v721 = 0;
                          }
                          else
                          {
                            int v721 = *((_DWORD *)v695 + 26);
                            if (v699 == 14)
                            {
                              int v596 = 0;
                            }
                            else
                            {
                              int v596 = *((_DWORD *)v695 + 28);
                              if (v699 >= 0x10) {
                                *((_DWORD *)v758 + 8) = *((_DWORD *)v758 + 8) & 0xFFFFBFFF | ((*((_DWORD *)v695 + 30) == 1) << 14);
                              }
                            }
                          }
                          uint64_t v8 = v744;
                          unint64_t v9 = v746;
                          unint64_t v581 = v699;
LABEL_1217:
                          int v597 = v758;
                          int v598 = *((_DWORD *)v758 + 8);
                          if ((v598 & 0xFu) - 7 >= 2)
                          {
                            if ((v598 & 0x30) == 0) {
                              goto LABEL_1222;
                            }
                            char v599 = llvm::GlobalValue::hasExternalWeakLinkage(v758);
                            unint64_t v581 = v699;
                            if (v599) {
                              goto LABEL_1222;
                            }
                            int v598 = *((_DWORD *)v597 + 8);
                          }
                          *((_DWORD *)v597 + 8) = v598 | 0x4000;
LABEL_1222:
                          if (v581 >= 0x13)
                          {
                            uint64_t v600 = *(void *)(v6 + 376);
                            if (v600)
                            {
                              uint64_t v602 = *((void *)v695 + 17);
                              size_t v601 = *((void *)v695 + 18);
                              if (v601 + v602 <= *(void *)(v6 + 384))
                              {
                                uint64_t v603 = v758;
                                if (v601 || (*((_DWORD *)v758 + 8) & 0x8000) != 0)
                                {
                                  int v682 = (unsigned char *)(v600 + v602);
                                  if (v601)
                                  {
                                    int v682 = llvm::UniqueStringSaver::save(***(void ***)v758 + 2136, v682, v601);
                                    uint64_t v683 = v684;
                                  }
                                  else
                                  {
                                    uint64_t v683 = 0;
                                  }
                                  uint64_t v685 = ***(void ***)v603 + 2528;
                                  v774.__r_.__value_.__r.__words[0] = (std::string::size_type)v603;
                                  unsigned int v686 = sub_1CD4CB550(v685, (uint64_t *)&v774);
                                  v686[1] = v682;
                                  v686[2] = v683;
                                  *((_DWORD *)v603 + 8) = *((_DWORD *)v603 + 8) & 0xFFFF7FFF | ((v683 != 0) << 15);
                                  uint64_t v8 = v744;
                                  unint64_t v9 = v746;
                                }
                              }
                            }
                          }
                          v604 = v758;
                          int v605 = sub_1CC1E23EC(v6, *(void *)v758, (char *)v750, 1);
                          v774.__r_.__value_.__r.__words[0] = (std::string::size_type)v604;
                          LODWORD(v765) = v605;
                          unint64_t v606 = *(void *)(v6 + 624);
                          if (v606 >= *(void *)(v6 + 632))
                          {
                            uint64_t v607 = sub_1CC1E31BC(v734, (uint64_t *)&v774, &v765);
                          }
                          else
                          {
                            *(void *)unint64_t v606 = 6;
                            *(void *)(v606 + 8) = 0;
                            *(void *)(v606 + 16) = v604;
                            if (v604 != (llvm::GlobalValue *)-8192 && v604 != (llvm::GlobalValue *)-4096 && v604)
                            {
                              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v606);
                              int v605 = (int)v765;
                            }
                            *(_DWORD *)(v606 + 24) = v605;
                            uint64_t v607 = v606 + 32;
                          }
                          int v608 = v721;
                          *(void *)(v6 + 624) = v607;
                          if (v596 || v721 || v732)
                          {
                            int v609 = *(llvm::GlobalObject ***)(v6 + 1328);
                            unint64_t v610 = *(void *)(v6 + 1336);
                            if ((unint64_t)v609 >= v610)
                            {
                              uint64_t v612 = *(void **)(v6 + 1320);
                              unint64_t v613 = 0xAAAAAAAAAAAAAAABLL * (v609 - (llvm::GlobalObject **)v612) + 1;
                              if (v613 > 0xAAAAAAAAAAAAAAALL) {
                                goto LABEL_1377;
                              }
                              unint64_t v614 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v610 - (void)v612) >> 3);
                              if (2 * v614 > v613) {
                                unint64_t v613 = 2 * v614;
                              }
                              if (v614 >= 0x555555555555555) {
                                unint64_t v615 = 0xAAAAAAAAAAAAAAALL;
                              }
                              else {
                                unint64_t v615 = v613;
                              }
                              if (v615)
                              {
                                if (v615 > 0xAAAAAAAAAAAAAAALL) {
                                  goto LABEL_1378;
                                }
                                unint64_t v616 = (char *)operator new(24 * v615);
                                int v608 = v721;
                              }
                              else
                              {
                                unint64_t v616 = 0;
                              }
                              v621 = &v616[8 * (v609 - (llvm::GlobalObject **)v612)];
                              *(void *)v621 = v709;
                              *((_DWORD *)v621 + 2) = v596;
                              *((_DWORD *)v621 + 3) = v608;
                              *((_DWORD *)v621 + 4) = v732;
                              *((_DWORD *)v621 + 5) = 0;
                              v622 = v621;
                              if (v609 != v612)
                              {
                                do
                                {
                                  long long v623 = *(_OWORD *)(v609 - 3);
                                  *((void *)v622 - 1) = *(v609 - 1);
                                  *(_OWORD *)(v622 - 24) = v623;
                                  v622 -= 24;
                                  v609 -= 3;
                                }
                                while (v609 != v612);
                                int v609 = *(llvm::GlobalObject ***)(v6 + 1320);
                              }
                              uint64_t v8 = v744;
                              *(void *)(v6 + 1320) = v622;
                              unsigned int v611 = v621 + 24;
                              *(void *)(v6 + 1328) = v621 + 24;
                              *(void *)(v6 + 1336) = &v616[24 * v615];
                              if (v609) {
                                operator delete(v609);
                              }
                              unint64_t v9 = v746;
                            }
                            else
                            {
                              *int v609 = v709;
                              *((_DWORD *)v609 + 2) = v596;
                              *((_DWORD *)v609 + 3) = v721;
                              unsigned int v611 = v609 + 3;
                              v609[2] = (llvm::GlobalObject *)v732;
                            }
                            *(void *)(v6 + 1328) = v611;
                          }
                          if (!v691)
                          {
                            uint64_t v624 = v758;
                            *((_DWORD *)v758 + 8) |= 0x800000u;
                            v625 = *(llvm::GlobalValue ***)(v6 + 1424);
                            unint64_t v626 = *(void *)(v6 + 1432);
                            if ((unint64_t)v625 >= v626)
                            {
                              v628 = v7;
                              uint64_t v629 = *(void **)(v6 + 1416);
                              uint64_t v630 = v625 - (llvm::GlobalValue **)v629;
                              unint64_t v631 = v630 + 1;
                              if ((unint64_t)(v630 + 1) >> 61) {
LABEL_1377:
                              }
                                abort();
                              uint64_t v632 = v626 - (void)v629;
                              if (v632 >> 2 > v631) {
                                unint64_t v631 = v632 >> 2;
                              }
                              if ((unint64_t)v632 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v633 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v633 = v631;
                              }
                              if (v633)
                              {
                                if (v633 >> 61) {
                                  goto LABEL_1378;
                                }
                                unint64_t v634 = v633;
                                unint64_t v635 = (char *)operator new(8 * v633);
                                unint64_t v633 = v634;
                              }
                              else
                              {
                                unint64_t v635 = 0;
                              }
                              uint64_t v636 = (llvm::GlobalValue **)&v635[8 * v630];
                              *uint64_t v636 = v624;
                              v627 = v636 + 1;
                              unint64_t v7 = v628;
                              if (v625 != v629)
                              {
                                do
                                {
                                  v637 = *--v625;
                                  *--uint64_t v636 = v637;
                                }
                                while (v625 != v629);
                                v625 = *(llvm::GlobalValue ***)(v6 + 1416);
                              }
                              uint64_t v8 = v744;
                              *(void *)(v6 + 1416) = v636;
                              *(void *)(v6 + 1424) = v627;
                              *(void *)(v6 + 1432) = &v635[8 * v633];
                              if (v625) {
                                operator delete(v625);
                              }
                            }
                            else
                            {
                              llvm::BasicBlock *v625 = v624;
                              v627 = v625 + 1;
                            }
                            *(void *)(v6 + 1424) = v627;
                            sub_1CC1DE094(v735, (uint64_t *)&v758)[1] = 0;
                            unint64_t v9 = v746;
                          }
                          void *v7 = 0;
LABEL_707:
                          if (!*v7) {
                            goto LABEL_1160;
                          }
                          goto LABEL_28;
                        }
                        uint64_t v8 = v744;
                        unint64_t v9 = v746;
                        unint64_t v581 = v699;
                        unint64_t v589 = v694;
                        goto LABEL_1214;
                      }
                    }
LABEL_1200:
                    if (v589 == 5)
                    {
                      int v592 = 256;
                      goto LABEL_1213;
                    }
                    if (v589 == 6)
                    {
                      int v592 = 512;
LABEL_1213:
                      unsigned int *v590 = v592 | v591 & 0xFFFFFCFF;
                    }
LABEL_1214:
                    int v596 = 0;
                    uint64_t v709 = v588;
                    if (v589 <= 0xB && ((1 << v589) & 0xC12) != 0)
                    {
                      v765 = v588;
                      sub_1CD484194((uint64_t)&v774, v736, &v765);
                      unint64_t v581 = v699;
                      int v596 = 0;
                      int v721 = 0;
                    }
                    else
                    {
                      int v721 = 0;
                    }
                    goto LABEL_1217;
                  }
                }
                unsigned int v732 = 0;
                v590 = (unsigned int *)((char *)v588 + 32);
                unsigned int v591 = *((_DWORD *)v588 + 8) & 0xFFFFFF3F;
                *((_DWORD *)v588 + 8) = v591;
                goto LABEL_1200;
              }
              v617 = 0;
              int v618 = 1;
              while (v580 != (llvm::GlobalValue *)-4096)
              {
                if (v617) {
                  BOOL v619 = 0;
                }
                else {
                  BOOL v619 = v580 == (llvm::GlobalValue *)-8192;
                }
                if (v619) {
                  v617 = v579;
                }
                unsigned int v620 = v578 + v618++;
                unsigned int v578 = v620 & v577;
                uint64_t v579 = (llvm::GlobalValue **)(v576 + 24 * v578);
                v580 = *v579;
                if (*v579 == v562) {
                  goto LABEL_1188;
                }
              }
              if (v617) {
                int v639 = v617;
              }
              else {
                int v639 = v579;
              }
            }
            else
            {
              int v639 = 0;
            }
            uint64_t v579 = (llvm::GlobalValue **)sub_1CC5BF31C(v574 + 2504, (uint64_t)&v774, (uint64_t *)&v774, v639);
            std::string::size_type v640 = v774.__r_.__value_.__r.__words[0];
            v579[1] = 0;
            v579[2] = 0;
            *uint64_t v579 = (llvm::GlobalValue *)v640;
            goto LABEL_1188;
          case 9:
          case 14:
          case 18:
            unint64_t v14 = v755;
            unint64_t v15 = v756;
            if (*(unsigned char *)(v6 + 392))
            {
              std::string::size_type v16 = *((void *)v755 + 1);
              if (v16 + *(void *)v755 > *(void *)(v6 + 384)) {
                goto LABEL_695;
              }
              int v17 = (const char *)(*(void *)(v6 + 376) + *(void *)v755);
              unint64_t v15 = v756 - 2;
              unint64_t v14 = (char *)v755 + 16;
            }
            else
            {
              std::string::size_type v16 = 0;
              int v17 = "";
            }
            unint64_t v256 = 3;
            if (v761 != 9) {
              unint64_t v256 = 4;
            }
            if (v15 < v256) {
              goto LABEL_695;
            }
            uint64_t v715 = (llvm::Type *)v17;
            unsigned int v726 = (llvm::GlobalObject *)v15;
            LODWORD(v758) = *v14;
            uint64_t v257 = sub_1CC1E22AC(v6, v758);
            if (!v257) {
              goto LABEL_695;
            }
            int v258 = (llvm::PointerType *)v257;
            if (v13 != 9)
            {
              unsigned int v700 = v14[2];
              uint64_t v376 = 2;
              goto LABEL_898;
            }
            if (*(_DWORD *)(v257 + 8) != 15) {
              goto LABEL_864;
            }
            unsigned int v703 = *(_DWORD *)(v257 + 8);
            uint64_t v259 = *(void *)(v6 + 544);
            uint64_t v260 = *(unsigned int *)(v6 + 560);
            if (!v260) {
              goto LABEL_1344;
            }
            unsigned int v261 = v260 - 1;
            std::string::size_type v262 = (int *)(v259 + 32 * ((v260 - 1) & (37 * v758)));
            int v263 = *v262;
            if (v758 != *v262)
            {
              int v651 = v7;
              uint64_t v652 = v6;
              int v653 = 1;
              LODWORD(v654) = v261 & (37 * v758);
              while (1)
              {
                uint64_t v6 = v652;
                unint64_t v7 = v651;
                uint64_t v8 = v744;
                if (v263 == -1) {
                  break;
                }
                int v655 = v654 + v653++;
                uint64_t v654 = v655 & v261;
                int v263 = *(_DWORD *)(v259 + 32 * v654);
                if (v758 == v263)
                {
                  std::string::size_type v262 = (int *)(v259 + 32 * v654);
                  uint64_t v6 = v652;
                  unint64_t v7 = v651;
                  uint64_t v8 = v744;
                  goto LABEL_623;
                }
              }
LABEL_1344:
              std::string::size_type v262 = (int *)(v259 + 32 * v260);
            }
LABEL_623:
            if ((int *)(v259 + 32 * v260) == v262 || !v262[4]) {
              unsigned int v264 = -1;
            }
            else {
              unsigned int v264 = **((_DWORD **)v262 + 1);
            }
            LODWORD(v758) = v264;
            uint64_t v368 = sub_1CC1E22AC(v6, v264);
            if (!v368)
            {
              uint64_t v313 = "Missing element type for old-style indirect symbol";
              goto LABEL_696;
            }
            int v258 = (llvm::PointerType *)v368;
            unsigned int v700 = v703 >> 8;
            uint64_t v376 = 1;
LABEL_898:
            int v705 = (llvm::GlobalObject *)v376;
            uint64_t v389 = (uint64_t *)&v14[2 * v376];
            uint64_t v390 = v389[1];
            int v693 = v390;
            uint64_t v697 = *v389;
            if (v13 == 14 || v13 == 9)
            {
              char v391 = sub_1CC1EAF14(v390);
              __int16 v776 = 261;
              v774.__r_.__value_.__r.__words[0] = (std::string::size_type)v715;
              v774.__r_.__value_.__l.__size_ = v16;
              int v392 = llvm::GlobalAlias::create(v258, (llvm::Type *)v700, v391, (const char **)&v774.__r_.__value_.__l.__data_, *(void *)(v6 + 432));
            }
            else
            {
              char v393 = sub_1CC1EAF14(v390);
              __int16 v776 = 261;
              v774.__r_.__value_.__r.__words[0] = (std::string::size_type)v715;
              v774.__r_.__value_.__l.__size_ = v16;
              int v392 = llvm::GlobalIFunc::create(v258, (llvm::Type *)v700, v393, (const char **)&v774.__r_.__value_.__l.__data_, 0, *(void *)(v6 + 432));
            }
            std::string::size_type v394 = (std::string::size_type)v392;
            unint64_t v395 = (unint64_t)v726;
            if (v726 == (llvm::GlobalObject *)((char *)v705 + 2))
            {
              uint64_t v396 = (char *)v705 + 2;
            }
            else
            {
              uint64_t v396 = (char *)v705 + 3;
              if ((v392[4] & 0xF) - 7 >= 2)
              {
                uint64_t v397 = *(void *)&v14[2 * ((void)v705 + 2)];
                int v398 = v397 == 2 ? 32 : 16 * (v397 == 1);
                *((_DWORD *)v392 + 8) = v398 | v392[4] & 0xFFFFFFCF;
                if (v398)
                {
                  if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v392) & 1) == 0) {
                    *(_DWORD *)(v394 + 32) |= 0x4000u;
                  }
                  unint64_t v395 = (unint64_t)v726;
                }
              }
            }
            if (v13 != 14 && v13 != 9) {
              goto LABEL_1111;
            }
            if ((char *)v395 == v396)
            {
              if (v693 == 6)
              {
                unsigned int v399 = *(_DWORD *)(v394 + 32) & 0xFFFFFCFF | 0x200;
LABEL_1098:
                *(_DWORD *)(v394 + 32) = v399;
              }
              else if (v693 == 5)
              {
                unsigned int v399 = *(_DWORD *)(v394 + 32) & 0xFFFFFCFF | 0x100;
                goto LABEL_1098;
              }
              unint64_t v400 = v395;
              goto LABEL_1100;
            }
            unint64_t v400 = (unint64_t)(v396 + 1);
            uint64_t v401 = *(void *)&v14[2 * (void)v396];
            if (v401 == 2) {
              int v402 = 512;
            }
            else {
              int v402 = (v401 == 1) << 8;
            }
            *(_DWORD *)(v394 + 32) = v402 | *(_DWORD *)(v394 + 32) & 0xFFFFFCFF;
            ++v396;
LABEL_1100:
            if (v395 == v400)
            {
              unint64_t v529 = v395;
            }
            else
            {
              unint64_t v529 = (unint64_t)(v396 + 1);
              uint64_t v530 = *(void *)&v14[2 * v400];
              if (v530 >= 5) {
                int v531 = 1024;
              }
              else {
                int v531 = v530 << 10;
              }
              *(_DWORD *)(v394 + 32) = *(_DWORD *)(v394 + 32) & 0xFFFFE3FF | v531;
              ++v396;
            }
            if (v395 != v529)
            {
              ++v396;
              uint64_t v532 = *(void *)&v14[2 * v529];
              if (v532 == 2) {
                int v533 = 64;
              }
              else {
                int v533 = (v532 == 1) << 7;
              }
              *(_DWORD *)(v394 + 32) = v533 | *(_DWORD *)(v394 + 32) & 0xFFFFFF3F;
            }
LABEL_1111:
            if ((char *)v395 == v396)
            {
              unsigned int v534 = *(_DWORD *)(v394 + 32);
            }
            else
            {
              uint64_t v535 = *(void *)&v14[2 * (void)v396++];
              unsigned int v534 = *(_DWORD *)(v394 + 32) & 0xFFFFBFFF | ((v535 == 1) << 14);
              *(_DWORD *)(v394 + 32) = v534;
            }
            if ((v534 & 0xF) - 7 < 2) {
              goto LABEL_1118;
            }
            if ((v534 & 0x30) != 0)
            {
              char v536 = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v394);
              unint64_t v395 = (unint64_t)v726;
              if ((v536 & 1) == 0)
              {
                unsigned int v534 = *(_DWORD *)(v394 + 32);
LABEL_1118:
                *(_DWORD *)(v394 + 32) = v534 | 0x4000;
              }
            }
            if (v395 > (unint64_t)(v396 + 1))
            {
              size_t v537 = *(void *)&v14[2 * (void)(v396 + 1)];
              if ((*(unsigned char *)(v394 + 33) & 0x80) != 0 || v537)
              {
                v664 = (unsigned char *)(*(void *)(v6 + 376) + *(void *)&v14[2 * (void)v396]);
                if (v537)
                {
                  v664 = llvm::UniqueStringSaver::save(***(void ***)v394 + 2136, v664, v537);
                  uint64_t v665 = v674;
                }
                else
                {
                  uint64_t v665 = 0;
                }
                uint64_t v675 = ***(void ***)v394 + 2528;
                v774.__r_.__value_.__r.__words[0] = v394;
                int v676 = sub_1CD4CB550(v675, (uint64_t *)&v774);
                v676[1] = v664;
                v676[2] = v665;
                *(_DWORD *)(v394 + 32) = *(_DWORD *)(v394 + 32) & 0xFFFF7FFF | ((v665 != 0) << 15);
                uint64_t v8 = v744;
              }
            }
            int data = sub_1CC1E23EC(v6, *(void *)v394, (char *)&v758, 1);
            v774.__r_.__value_.__r.__words[0] = v394;
            LODWORD(__p.__r_.__value_.__l.__data_) = data;
            unint64_t v539 = *(void *)(v6 + 624);
            if (v539 >= *(void *)(v6 + 632))
            {
              uint64_t v540 = sub_1CC1E31BC(v734, (uint64_t *)&v774, &__p);
              unint64_t v9 = v746;
            }
            else
            {
              *(void *)unint64_t v539 = 6;
              *(void *)(v539 + 8) = 0;
              *(void *)(v539 + 16) = v394;
              unint64_t v9 = v746;
              if (v394 != -8192 && v394 != -4096 && v394)
              {
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v539);
                int data = (int)__p.__r_.__value_.__l.__data_;
              }
              *(_DWORD *)(v539 + 24) = data;
              uint64_t v540 = v539 + 32;
            }
            *(void *)(v6 + 624) = v540;
            v541 = *(char **)(v6 + 1304);
            unint64_t v542 = *(void *)(v6 + 1312);
            if ((unint64_t)v541 >= v542)
            {
              v544 = v7;
              v545 = *(char **)(v6 + 1296);
              uint64_t v546 = (v541 - v545) >> 4;
              unint64_t v547 = v546 + 1;
              if ((unint64_t)(v546 + 1) >> 60) {
                goto LABEL_1377;
              }
              uint64_t v548 = v542 - (void)v545;
              if (v548 >> 3 > v547) {
                unint64_t v547 = v548 >> 3;
              }
              if ((unint64_t)v548 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v549 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v549 = v547;
              }
              if (v549)
              {
                if (v549 >> 60) {
                  goto LABEL_1378;
                }
                int v550 = (char *)operator new(16 * v549);
              }
              else
              {
                int v550 = 0;
              }
              v551 = &v550[16 * v546];
              *(void *)v551 = v394;
              *((_DWORD *)v551 + 2) = v697;
              uint64_t v552 = v551;
              unint64_t v7 = v544;
              if (v541 != v545)
              {
                do
                {
                  *((_OWORD *)v552 - 1) = *((_OWORD *)v541 - 1);
                  v552 -= 16;
                  v541 -= 16;
                }
                while (v541 != v545);
                v541 = *(char **)(v6 + 1296);
              }
              uint64_t v8 = v744;
              *(void *)(v6 + 1296) = v552;
              uint64_t v543 = v551 + 16;
              *(void *)(v6 + 1304) = v551 + 16;
              *(void *)(v6 + 1312) = &v550[16 * v549];
              unint64_t v9 = v746;
              if (v541) {
                operator delete(v541);
              }
            }
            else
            {
              *(void *)v541 = v394;
              *((_DWORD *)v541 + 2) = v697;
              uint64_t v543 = v541 + 16;
            }
            *(void *)(v6 + 1304) = v543;
            void *v7 = 0;
            goto LABEL_707;
          case 11:
            memset(&v774, 0, sizeof(v774));
            sub_1CC1D3108(&v774, (std::string *)v755, (std::string *)((char *)v755 + 8 * v756));
            unint64_t v269 = *(void *)(v6 + 504);
            if (v269 >= *(void *)(v6 + 512))
            {
              uint64_t v302 = sub_1CBF64E70(v739, (uint64_t)&v774);
            }
            else
            {
              if (SHIBYTE(v774.__r_.__value_.__r.__words[2]) < 0)
              {
                sub_1CB8BDF7C(*(void *)(v6 + 504), v774.__r_.__value_.__l.__data_, v774.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v270 = *(_OWORD *)&v774.__r_.__value_.__l.__data_;
                *(void *)(v269 + 16) = *((void *)&v774.__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v269 = v270;
              }
              uint64_t v302 = v269 + 24;
            }
            *(void *)(v6 + 504) = v302;
            goto LABEL_829;
          case 12:
            long long v273 = v755;
            unint64_t v274 = v756;
            int v275 = *(unsigned __int8 *)(v6 + 392);
            if (*(unsigned char *)(v6 + 392))
            {
              size_t v276 = *((void *)v755 + 1);
              if (v276 + *(void *)v755 > *(void *)(v6 + 384)
                || (unint64_t v277 = (std::string *)(*(void *)(v6 + 376) + *(void *)v755),
                    unint64_t v274 = v756 - 2,
                    long long v273 = (char *)v755 + 16,
                    v756 == 2))
              {
LABEL_705:
                unint64_t v317 = "Invalid record";
                goto LABEL_706;
              }
            }
            else
            {
              size_t v276 = 0;
              unint64_t v277 = (std::string *)"";
              if (!v756) {
                goto LABEL_705;
              }
            }
            if ((*v273 - 2) >= 4) {
              int v315 = 0;
            }
            else {
              int v315 = *v273 - 1;
            }
            memset(&__p, 0, sizeof(__p));
            if (v275) {
              goto LABEL_1026;
            }
            if (v274 <= 1)
            {
              uint64_t v316 = "Invalid record";
              goto LABEL_820;
            }
            unint64_t v366 = v273[2];
            if (v366 > v274 - 2)
            {
              uint64_t v316 = "Comdat name size too large";
LABEL_820:
              v774.__r_.__value_.__r.__words[0] = (std::string::size_type)v316;
              __int16 v776 = 259;
              sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&v774);
            }
            int v487 = v7;
            std::string::reserve(&__p, v273[2]);
            if (v366)
            {
              for (uint64_t i = 0; i != v366; ++i)
                std::string::push_back(&__p, *(void *)&v273[2 * (i + 2)]);
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v277 = &__p;
            }
            else {
              unint64_t v277 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v276 = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
            }
            else {
              size_t v276 = __p.__r_.__value_.__l.__size_;
            }
            unint64_t v7 = v487;
            uint64_t v8 = v744;
LABEL_1026:
            uint64_t inserted = llvm::Module::getOrInsertComdat(*(void *)(v6 + 432), (unsigned __int8 *)v277, v276);
            uint64_t v490 = inserted;
            *((_DWORD *)inserted + 2) = v315;
            uint64_t v491 = *(size_t ***)(v6 + 704);
            unint64_t v492 = *(void *)(v6 + 712);
            if ((unint64_t)v491 >= v492)
            {
              v494 = v7;
              unint64_t v495 = *(void **)(v6 + 696);
              uint64_t v496 = v491 - (size_t **)v495;
              unint64_t v497 = v496 + 1;
              if ((unint64_t)(v496 + 1) >> 61) {
                goto LABEL_1377;
              }
              uint64_t v498 = v492 - (void)v495;
              if (v498 >> 2 > v497) {
                unint64_t v497 = v498 >> 2;
              }
              if ((unint64_t)v498 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v497 = 0x1FFFFFFFFFFFFFFFLL;
              }
              unint64_t v730 = v497;
              if (v497)
              {
                if (v497 >> 61) {
                  goto LABEL_1378;
                }
                uint64_t v499 = (char *)operator new(8 * v497);
              }
              else
              {
                uint64_t v499 = 0;
              }
              int v527 = (size_t **)&v499[8 * v496];
              *int v527 = v490;
              unsigned __int32 v493 = v527 + 1;
              unint64_t v7 = v494;
              if (v491 == v495)
              {
                uint64_t v8 = v744;
              }
              else
              {
                do
                {
                  unsigned int v528 = *--v491;
                  *--int v527 = v528;
                }
                while (v491 != v495);
                uint64_t v491 = *(size_t ***)(v6 + 696);
                uint64_t v8 = v744;
              }
              *(void *)(v6 + 696) = v527;
              *(void *)(v6 + 704) = v493;
              *(void *)(v6 + 712) = &v499[8 * v730];
              if (v491) {
                operator delete(v491);
              }
            }
            else
            {
              *uint64_t v491 = inserted;
              unsigned __int32 v493 = v491 + 1;
            }
            *(void *)(v6 + 704) = v493;
            void *v7 = 0;
            unint64_t v9 = v746;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            goto LABEL_707;
          case 13:
            if (!v756)
            {
              long long v278 = "Invalid record";
LABEL_685:
              v774.__r_.__value_.__r.__words[0] = (std::string::size_type)v278;
              __int16 v776 = 259;
              sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&v774);
            }
            *(void *)(v6 + 464) = *(void *)v755 - 1;
            goto LABEL_1160;
          case 16:
            int v283 = &v775;
            v774.__r_.__value_.__r.__words[0] = (std::string::size_type)&v775;
            *(_OWORD *)&v774.__r_.__value_.__r.__words[1] = xmmword_1CFAC3020;
            int v284 = (uint64_t *)v755;
            uint64_t v285 = v756;
            if (v756 >= 0x81) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            std::string::size_type v286 = 0;
            if (v756)
            {
              uint64_t v287 = &v775;
              uint64_t v288 = 8 * v756;
              do
              {
                uint64_t v289 = *v284++;
                *(unsigned char *)uint64_t v287 = v289;
                uint64_t v287 = (uint64_t *)((char *)v287 + 1);
                v288 -= 8;
              }
              while (v288);
              std::string::size_type v286 = v774.__r_.__value_.__l.__size_;
              int v283 = (uint64_t *)v774.__r_.__value_.__r.__words[0];
            }
            v774.__r_.__value_.__l.__size_ = v286 + v285;
            LLVMSetSourceFileName_0(*(void *)(v6 + 432), v283, v286 + v285);
            if ((uint64_t *)v774.__r_.__value_.__l.__data_ != &v775) {
              free(v774.__r_.__value_.__l.__data_);
            }
            unint64_t v9 = v746;
            goto LABEL_1160;
          default:
            goto LABEL_1160;
        }
      }
      sub_1CC1EA0B4((uint64_t)v747);
LABEL_13:
      sub_1CC1EA204(v7, (void *)v6);
LABEL_14:
      int v11 = 1;
      goto LABEL_15;
    }
    switch(HIDWORD(v753))
    {
      case 0:
        sub_1CC1EA50C(v7, v8);
        goto LABEL_855;
      case 9:
        llvm::BitstreamCursor::EnterSubBlock(v9, 0, 9, v7);
        if (*v7) {
          goto LABEL_855;
        }
        if (*(void *)(v6 + 1344) != *(void *)(v6 + 1352)) {
          goto LABEL_610;
        }
        v774.__r_.__value_.__r.__words[0] = (std::string::size_type)&v774.__r_.__value_.__r.__words[2];
        v774.__r_.__value_.__l.__size_ = 0x4000000000;
        v761 = (char *)&v762 + 8;
        *(void *)&long long v762 = 0x800000000;
        while (2)
        {
          sub_1CC1CA5F4((uint64_t)v9, 0, (uint64_t)&__p);
          if (__p.__r_.__value_.__s.__data_[8])
          {
            std::string::size_type v122 = (llvm::GlobalValue *)__p.__r_.__value_.__r.__words[0];
LABEL_1339:
            void *v7 = v122;
          }
          else
          {
            if (LODWORD(__p.__r_.__value_.__l.__data_) == 2)
            {
              sub_1CC1C6524((uint64_t)v9, &v758);
              std::string::size_type v122 = v758;
              if (__p.__r_.__value_.__s.__data_[8])
              {
                std::string::size_type v123 = __p.__r_.__value_.__r.__words[0];
                __p.__r_.__value_.__r.__words[0] = 0;
                if (v123) {
                  (*(void (**)(std::string::size_type))(*(void *)v123 + 8))(v123);
                }
              }
              uint64_t v8 = v744;
              unint64_t v9 = v746;
              if (v122) {
                goto LABEL_1339;
              }
              continue;
            }
            if (LODWORD(__p.__r_.__value_.__l.__data_) != 1)
            {
              if (!LODWORD(__p.__r_.__value_.__l.__data_))
              {
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Malformed block";
                LOWORD(v773) = 259;
                sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&__p);
              }
              LODWORD(v774.__r_.__value_.__r.__words[1]) = 0;
              llvm::BitstreamCursor::readRecord(v9, SHIDWORD(__p.__r_.__value_.__r.__words[0]), (uint64_t)&v774, 0, (uint64_t)&v758);
              if (v759)
              {
                char v83 = 0;
                uint64_t v84 = v758;
                v758 = 0;
                void *v7 = v84;
              }
              else
              {
                if (v758 == 2)
                {
                  uint64_t v85 = LODWORD(v774.__r_.__value_.__r.__words[1]);
                  if (LODWORD(v774.__r_.__value_.__r.__words[1]))
                  {
                    uint64_t v710 = v7;
                    uint64_t v86 = 0;
                    do
                    {
                      uint64_t v87 = *(void *)(v774.__r_.__value_.__r.__words[0] + 8 * v86);
                      int v88 = v745;
                      while (1)
                      {
                        uint64_t v89 = (unsigned int *)*v88;
                        unint64_t v90 = (uint64_t **)v88;
                        if (!*v88) {
                          break;
                        }
                        while (1)
                        {
                          int v88 = v89;
                          unsigned int v91 = v89[8];
                          if (v91 > v87) {
                            break;
                          }
                          if (v91 >= v87) {
                            goto LABEL_250;
                          }
                          uint64_t v89 = (unsigned int *)v88[1];
                          if (!v89)
                          {
                            unint64_t v90 = (uint64_t **)(v88 + 1);
                            goto LABEL_247;
                          }
                        }
                      }
LABEL_247:
                      uint64_t v92 = v6;
                      int v93 = v88;
                      int v88 = operator new(0x30uLL);
                      *((_DWORD *)v88 + 8) = v87;
                      v88[5] = 0;
                      void *v88 = 0;
                      v88[1] = 0;
                      v88[2] = v93;
                      uint64_t v6 = v92;
                      *unint64_t v90 = v88;
                      uint64_t v94 = **(void **)(v92 + 1368);
                      unsigned int v95 = v88;
                      if (v94)
                      {
                        *(void *)(v92 + 1368) = v94;
                        unsigned int v95 = *v90;
                      }
                      sub_1CB8358B8(*(uint64_t **)(v92 + 1376), v95);
                      ++*(void *)(v92 + 1384);
                      uint64_t v8 = v744;
LABEL_250:
                      uint64_t v96 = v88[5];
                      if (v762 >= (unint64_t)DWORD1(v762)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v761 + v762) = v96;
                      unsigned int v97 = v762 + 1;
                      LODWORD(v762) = v762 + 1;
                      ++v86;
                    }
                    while (v86 != v85);
                    unint64_t v7 = v710;
                  }
                  else
                  {
                    unsigned int v97 = v762;
                  }
                  uint64_t v98 = llvm::AttributeList::get(*(uint64_t **)(v6 + 424), (uint64_t *)v761, v97);
                  unsigned int v99 = *(uint64_t **)(v6 + 1352);
                  unint64_t v107 = *(void *)(v6 + 1360);
                  if ((unint64_t)v99 >= v107)
                  {
                    uint64_t v109 = v7;
                    uint64_t v110 = *(void **)(v6 + 1344);
                    uint64_t v111 = v99 - v110;
                    unint64_t v112 = v111 + 1;
                    if ((unint64_t)(v111 + 1) >> 61) {
                      goto LABEL_1377;
                    }
                    uint64_t v113 = v107 - (void)v110;
                    if (v113 >> 2 > v112) {
                      unint64_t v112 = v113 >> 2;
                    }
                    if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    unint64_t v724 = v112;
                    if (v112)
                    {
                      if (v112 >> 61) {
                        goto LABEL_1378;
                      }
                      uint64_t v114 = (char *)operator new(8 * v112);
                    }
                    else
                    {
                      uint64_t v114 = 0;
                    }
                    uint64_t v115 = (uint64_t *)&v114[8 * v111];
                    *uint64_t v115 = v98;
                    uint64_t v108 = v115 + 1;
                    unint64_t v7 = v109;
                    if (v99 == v110)
                    {
                      uint64_t v8 = v744;
                      unint64_t v116 = v724;
                    }
                    else
                    {
                      unint64_t v116 = v724;
                      do
                      {
                        uint64_t v117 = *--v99;
                        *--uint64_t v115 = v117;
                      }
                      while (v99 != v110);
                      unsigned int v99 = *(uint64_t **)(v6 + 1344);
                      uint64_t v8 = v744;
                    }
                    *(void *)(v6 + 1344) = v115;
                    unsigned int v118 = &v114[8 * v116];
                    goto LABEL_289;
                  }
LABEL_267:
                  *unsigned int v99 = v98;
                  uint64_t v108 = v99 + 1;
LABEL_291:
                  *(void *)(v6 + 1352) = v108;
                  LODWORD(v762) = 0;
                  char v83 = 1;
                  unint64_t v9 = v746;
                  goto LABEL_292;
                }
                if (v758 == 1)
                {
                  int v65 = v774.__r_.__value_.__r.__words[1];
                  if (v774.__r_.__value_.__s.__data_[8])
                  {
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid parameter attribute record";
                    LOWORD(v773) = 259;
                    sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&__p);
                  }
                  if (LODWORD(v774.__r_.__value_.__r.__words[1]))
                  {
                    unsigned int v66 = 0;
                    do
                    {
                      __p.__r_.__value_.__r.__words[0] = *(void *)(v6 + 424);
                      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v772;
                      __p.__r_.__value_.__r.__words[2] = 0x800000000;
                      unint64_t v67 = *(void *)(v774.__r_.__value_.__r.__words[0] + 8 * (v66 | 1));
                      if ((v67 & 0xFFFF0000) != 0) {
                        llvm::AttrBuilder::addAlignmentAttr((uint64_t)&__p, __clz(WORD1(v67)) ^ 0x13F);
                      }
                      uint64_t v68 = (unsigned __int16)v67 | ((HIDWORD(v67) & 0xFFFFF) << 21);
                      if (v68)
                      {
                        unsigned int v69 = 0;
                        while (1)
                        {
                          unint64_t v70 = 0;
                          switch(v69)
                          {
                            case 2u:
                              unint64_t v70 = 4096;
                              goto LABEL_217;
                            case 4u:
                              unint64_t v70 = 0x20000000000;
                              goto LABEL_217;
                            case 5u:
                              unint64_t v70 = 0x10000000000;
                              goto LABEL_217;
                            case 6u:
                              unint64_t v70 = 0x400000000000;
                              goto LABEL_217;
                            case 9u:
                              unint64_t v70 = 0x2000000000000000;
                              goto LABEL_217;
                            case 0xAu:
                              unint64_t v70 = 8;
                              goto LABEL_217;
                            case 0xBu:
                              unint64_t v70 = 0x2000000000000;
                              goto LABEL_217;
                            case 0xCu:
                              unint64_t v70 = 0x4000000000000;
                              goto LABEL_217;
                            case 0xDu:
                              unint64_t v70 = 0x2000000;
                              goto LABEL_217;
                            case 0xEu:
                              unint64_t v70 = 0x200000000000;
                              goto LABEL_217;
                            case 0xFu:
                              unint64_t v70 = 0x200000000;
                              goto LABEL_217;
                            case 0x11u:
                              unint64_t v70 = 0x1000000;
                              goto LABEL_217;
                            case 0x12u:
                              unint64_t v70 = 256;
                              goto LABEL_217;
                            case 0x13u:
                              unint64_t v70 = 64;
                              goto LABEL_217;
                            case 0x14u:
                              unint64_t v70 = 0x4000000000;
                              goto LABEL_217;
                            case 0x16u:
                              unint64_t v70 = 0x200000;
                              goto LABEL_217;
                            case 0x17u:
                              unint64_t v70 = 0x200000000000000;
                              goto LABEL_217;
                            case 0x18u:
                              unint64_t v70 = 0x400000000;
                              goto LABEL_217;
                            case 0x19u:
                              unint64_t v70 = 0x8000000000000000;
                              goto LABEL_217;
                            case 0x1Au:
                              unint64_t v70 = 0x800000;
                              goto LABEL_217;
                            case 0x1Bu:
                              unint64_t v70 = 2048;
                              goto LABEL_217;
                            case 0x1Eu:
                              unint64_t v70 = 0x1000000000000;
                              goto LABEL_217;
                            case 0x1Fu:
                              unint64_t v70 = 0x400000;
                              goto LABEL_217;
                            case 0x20u:
                              unint64_t v70 = 4;
                              goto LABEL_217;
                            case 0x25u:
                              unint64_t v70 = 32;
                              goto LABEL_217;
                            case 0x26u:
                              unint64_t v70 = 0x80000000;
                              goto LABEL_217;
                            case 0x27u:
                              unint64_t v70 = 0x100000000000;
                              goto LABEL_217;
                            case 0x29u:
                              unint64_t v70 = 0x400000000000000;
                              goto LABEL_217;
                            case 0x2Au:
                              unint64_t v70 = 0x2000;
                              goto LABEL_217;
                            case 0x2Bu:
                              unint64_t v70 = 0x40000000000;
                              goto LABEL_217;
                            case 0x2Cu:
                              unint64_t v70 = 512;
                              goto LABEL_217;
                            case 0x2Du:
                              unint64_t v70 = 1024;
                              goto LABEL_217;
                            case 0x2Eu:
                              unint64_t v70 = 0x8000000000;
                              goto LABEL_217;
                            case 0x2Fu:
                              unint64_t v70 = 0x20000000;
                              goto LABEL_217;
                            case 0x30u:
                              unint64_t v70 = 2;
                              goto LABEL_217;
                            case 0x31u:
                              unint64_t v70 = 0x800000000000;
                              goto LABEL_217;
                            case 0x32u:
                              unint64_t v70 = 0x100000000;
                              goto LABEL_217;
                            case 0x33u:
                              unint64_t v70 = 0x100000000000000;
                              goto LABEL_217;
                            case 0x35u:
                              unint64_t v70 = 0x2000000000;
                              goto LABEL_217;
                            case 0x36u:
                              unint64_t v70 = 0x1000000000;
                              goto LABEL_217;
                            case 0x37u:
                              unint64_t v70 = 0x800000000000000;
                              goto LABEL_217;
                            case 0x38u:
                              unint64_t v70 = 0x40000000000000;
                              goto LABEL_217;
                            case 0x39u:
                              unint64_t v70 = 0x1000000000000000;
                              goto LABEL_217;
                            case 0x3Au:
                              unint64_t v70 = 0x4000;
                              goto LABEL_217;
                            case 0x3Bu:
                              unint64_t v70 = 0x8000;
                              goto LABEL_217;
                            case 0x3Cu:
                              unint64_t v70 = 0x800000000;
                              goto LABEL_217;
                            case 0x3Du:
                              unint64_t v70 = 0x80000000000000;
                              goto LABEL_217;
                            case 0x3Fu:
                              unint64_t v70 = 0x10000000000000;
                              goto LABEL_217;
                            case 0x40u:
                              unint64_t v70 = 0x8000000000000;
                              goto LABEL_217;
                            case 0x41u:
                              unint64_t v70 = 0x4000000000000000;
                              goto LABEL_217;
                            case 0x42u:
                              unint64_t v70 = 0x20000000000000;
                              goto LABEL_217;
                            case 0x43u:
                              unint64_t v70 = 1;
                              goto LABEL_217;
                            case 0x45u:
                              unint64_t v70 = 128;
                              goto LABEL_217;
                            case 0x47u:
                              unint64_t v70 = 0x80000000000;
                              goto LABEL_217;
                            case 0x49u:
                              unint64_t v70 = 16;
                              goto LABEL_217;
                            case 0x4Au:
                              unint64_t v70 = 2031616;
                              goto LABEL_217;
                            case 0x4Eu:
                              unint64_t v70 = 469762048;
                              goto LABEL_217;
                            case 0x4Fu:
                              unint64_t v70 = 0x40000000;
                              goto LABEL_217;
                            case 0x51u:
                              goto LABEL_232;
                            default:
LABEL_217:
                              unint64_t v71 = v70 & v68;
                              if (v71)
                              {
                                if (v69 == 78)
                                {
                                  unint64_t v75 = (v71 >> 26) - 1;
                                  unint64_t v76 = __clz((1 << v75)) ^ 0x13F;
                                  if (v75 <= 0x1F) {
                                    __int16 v77 = v76;
                                  }
                                  else {
                                    __int16 v77 = 0;
                                  }
                                  llvm::AttrBuilder::addStackAlignmentAttr((uint64_t **)&__p, v77);
                                }
                                else if (v69 == 74)
                                {
                                  uint64_t v72 = (v71 >> 16) - 1;
                                  unint64_t v73 = __clz((1 << v72)) ^ 0x13F;
                                  if (v72 == 31) {
                                    __int16 v74 = v73;
                                  }
                                  else {
                                    __int16 v74 = 0;
                                  }
                                  llvm::AttrBuilder::addAlignmentAttr((uint64_t)&__p, v74);
                                }
                                else if (v69 - 68 <= 5)
                                {
                                  llvm::AttrBuilder::addTypeAttr((uint64_t **)&__p, v69, 0);
                                }
                                else
                                {
                                  unint64_t v78 = llvm::Attribute::get((uint64_t *)__p.__r_.__value_.__l.__data_, v69, 0);
                                  sub_1CC50F4B4((unsigned int *)&__p.__r_.__value_.__r.__words[1], v69, v78);
                                }
                              }
                              ++v69;
                              break;
                          }
                        }
                      }
LABEL_232:
                      int v79 = *(uint64_t **)(v6 + 424);
                      uint64_t v80 = *(void *)(v774.__r_.__value_.__r.__words[0] + 8 * v66);
                      uint64_t Sorted = llvm::AttributeSetNode::getSorted(v79, (uint64_t *)__p.__r_.__value_.__l.__size_, LODWORD(__p.__r_.__value_.__r.__words[2]));
                      uint64_t v82 = llvm::AttributeList::get(v79, v80, Sorted);
                      if (v762 >= (unint64_t)DWORD1(v762)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v761 + v762) = v82;
                      LODWORD(v762) = v762 + 1;
                      if ((unint64_t *)__p.__r_.__value_.__l.__size_ != &v772) {
                        free((void *)__p.__r_.__value_.__l.__size_);
                      }
                      v66 += 2;
                    }
                    while (v66 != v65);
                  }
                  uint64_t v98 = llvm::AttributeList::get(*(uint64_t **)(v6 + 424), (uint64_t *)v761, v762);
                  unsigned int v99 = *(uint64_t **)(v6 + 1352);
                  unint64_t v100 = *(void *)(v6 + 1360);
                  if ((unint64_t)v99 >= v100)
                  {
                    BOOL v101 = v7;
                    unsigned int v102 = *(void **)(v6 + 1344);
                    uint64_t v103 = v99 - v102;
                    unint64_t v104 = v103 + 1;
                    if ((unint64_t)(v103 + 1) >> 61) {
                      goto LABEL_1377;
                    }
                    uint64_t v105 = v100 - (void)v102;
                    if (v105 >> 2 > v104) {
                      unint64_t v104 = v105 >> 2;
                    }
                    if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v104 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    unint64_t v723 = v104;
                    if (v104)
                    {
                      if (v104 >> 61) {
                        goto LABEL_1378;
                      }
                      int v106 = (char *)operator new(8 * v104);
                    }
                    else
                    {
                      int v106 = 0;
                    }
                    uint64_t v119 = (uint64_t *)&v106[8 * v103];
                    *uint64_t v119 = v98;
                    uint64_t v108 = v119 + 1;
                    unint64_t v7 = v101;
                    if (v99 == v102)
                    {
                      uint64_t v8 = v744;
                    }
                    else
                    {
                      do
                      {
                        uint64_t v120 = *--v99;
                        *--uint64_t v119 = v120;
                      }
                      while (v99 != v102);
                      unsigned int v99 = *(uint64_t **)(v6 + 1344);
                      uint64_t v8 = v744;
                    }
                    *(void *)(v6 + 1344) = v119;
                    unsigned int v118 = &v106[8 * v723];
LABEL_289:
                    *(void *)(v6 + 1352) = v108;
                    *(void *)(v6 + 1360) = v118;
                    if (v99) {
                      operator delete(v99);
                    }
                    goto LABEL_291;
                  }
                  goto LABEL_267;
                }
                char v83 = 1;
              }
LABEL_292:
              if (v759)
              {
                uint64_t v121 = v758;
                v758 = 0;
                if (v121) {
                  (*(void (**)(llvm::GlobalValue *))(*(void *)v121 + 8))(v121);
                }
              }
              if ((v83 & 1) == 0) {
                break;
              }
              continue;
            }
            void *v7 = 0;
          }
          break;
        }
        unint64_t v371 = (char *)v761;
        int v372 = (char *)&v762 + 8;
        goto LABEL_851;
      case 0xA:
        llvm::BitstreamCursor::EnterSubBlock(v9, 0, 10, v7);
        if (*v7) {
          goto LABEL_855;
        }
        if (*(void *)(v6 + 1384)) {
          goto LABEL_610;
        }
        v774.__r_.__value_.__r.__words[0] = (std::string::size_type)&v774.__r_.__value_.__r.__words[2];
        v774.__r_.__value_.__l.__size_ = 0x4000000000;
LABEL_33:
        while (2)
        {
          sub_1CC1CA5F4((uint64_t)v9, 0, (uint64_t)&__p);
          if (__p.__r_.__value_.__s.__data_[8]) {
            goto LABEL_1334;
          }
          if (LODWORD(__p.__r_.__value_.__l.__data_) == 2)
          {
            sub_1CC1C6524((uint64_t)v9, &v761);
            BOOL v62 = v761;
            if (__p.__r_.__value_.__s.__data_[8])
            {
              std::string::size_type v63 = __p.__r_.__value_.__r.__words[0];
              __p.__r_.__value_.__r.__words[0] = 0;
              if (v63) {
                (*(void (**)(std::string::size_type))(*(void *)v63 + 8))(v63);
              }
            }
            uint64_t v8 = v744;
            unint64_t v9 = v746;
            if (v62) {
              goto LABEL_1335;
            }
            continue;
          }
          break;
        }
        if (LODWORD(__p.__r_.__value_.__l.__data_) == 1) {
          goto LABEL_848;
        }
        if (LODWORD(__p.__r_.__value_.__l.__data_))
        {
          LODWORD(v774.__r_.__value_.__r.__words[1]) = 0;
          llvm::BitstreamCursor::readRecord(v9, SHIDWORD(__p.__r_.__value_.__r.__words[0]), (uint64_t)&v774, 0, (uint64_t)&v765);
          if (v766)
          {
            LOBYTE(v21) = 0;
            uint64_t v22 = v765;
            v765 = 0;
            void *v7 = v22;
          }
          else
          {
            if (v765 == 3)
            {
              int v19 = v774.__r_.__value_.__r.__words[1];
              int v20 = LODWORD(v774.__r_.__value_.__r.__words[1]) - 2;
              if (LODWORD(v774.__r_.__value_.__r.__words[1]) <= 2)
              {
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid grp record";
                LOWORD(v773) = 259;
                sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&__p);
              }
              uint64_t v698 = *(void *)(v774.__r_.__value_.__r.__words[0] + 8);
              uint64_t v702 = *(llvm::GlobalObject **)v774.__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[0] = *(void *)(v6 + 424);
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v772;
              __p.__r_.__value_.__r.__words[2] = 0x800000000;
              unsigned int v23 = 2;
              int v722 = v774.__r_.__value_.__r.__words[1];
              int v713 = LODWORD(v774.__r_.__value_.__r.__words[1]) - 2;
              while (2)
              {
                std::string::size_type v24 = v774.__r_.__value_.__r.__words[0];
                uint64_t v25 = *(void *)(v774.__r_.__value_.__r.__words[0] + 8 * v23);
                switch(v25)
                {
                  case 0:
                    LODWORD(v758) = 0;
                    unsigned int v27 = v23 + 1;
                    sub_1CC1EAD80(v7, v6, *(void *)(v774.__r_.__value_.__r.__words[0] + 8 * (v23 + 1)), &v758);
                    unint64_t v9 = v746;
                    if (*v7)
                    {
                      int v21 = 0;
                      goto LABEL_106;
                    }
                    int v33 = (int)v758;
                    HIDWORD(v34) = v758 - 69;
                    LODWORD(v34) = v758 - 69;
                    switch((v34 >> 1))
                    {
                      case 0u:
                        llvm::AttrBuilder::addByValAttr((uint64_t **)&__p, 0);
                        break;
                      case 1u:
                        llvm::AttrBuilder::addInAllocaAttr((uint64_t **)&__p, 0);
                        break;
                      case 2u:
                        llvm::AttrBuilder::addStructRetAttr((llvm::AttrBuilder *)&__p, 0);
                        break;
                      case 5u:
                        llvm::AttrBuilder::addUWTableAttr((uint64_t **)&__p, 2);
                        break;
                      default:
                        if ((v758 - 1) > 0x42)
                        {
                          v761 = "Not an enum attribute";
                          __int16 v764 = 259;
                          sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&v761);
                        }
                        unint64_t v45 = llvm::Attribute::get((uint64_t *)__p.__r_.__value_.__l.__data_, v758, 0);
                        sub_1CC50F4B4((unsigned int *)&__p.__r_.__value_.__r.__words[1], v33, v45);
                        break;
                    }
LABEL_90:
                    int v19 = v722;
                    int v20 = v713;
                    unsigned int v23 = v27 + 1;
                    if (v27 + 1 != v722) {
                      continue;
                    }
                    __int16 v49 = v7;
                    llvm::UpgradeAttributes((llvm *)&__p, v35);
                    unsigned int v50 = *(uint64_t **)(v6 + 424);
                    uint64_t v51 = llvm::AttributeSetNode::getSorted(*(uint64_t **)(v6 + 424), (uint64_t *)__p.__r_.__value_.__l.__size_, LODWORD(__p.__r_.__value_.__r.__words[2]));
                    uint64_t v52 = llvm::AttributeList::get(v50, v698, v51);
                    unint64_t v53 = *(unsigned int **)(v6 + 1376);
                    uint64_t v54 = v745;
                    uint64_t v55 = (uint64_t **)v745;
                    unint64_t v9 = v746;
                    if (v53)
                    {
                      do
                      {
                        while (1)
                        {
                          uint64_t v54 = v53;
                          unsigned int v56 = v53[8];
                          if (v56 <= v702) {
                            break;
                          }
                          unint64_t v53 = (unsigned int *)*v54;
                          uint64_t v55 = (uint64_t **)v54;
                          if (!*v54) {
                            goto LABEL_121;
                          }
                        }
                        if (v56 >= v702) {
                          goto LABEL_124;
                        }
                        unint64_t v53 = (unsigned int *)v54[1];
                      }
                      while (v53);
                      uint64_t v55 = (uint64_t **)(v54 + 1);
                    }
LABEL_121:
                    uint64_t v57 = v6;
                    uint64_t v58 = v54;
                    uint64_t v54 = operator new(0x30uLL);
                    *((_DWORD *)v54 + 8) = v702;
                    v54[5] = 0;
                    *uint64_t v54 = 0;
                    v54[1] = 0;
                    v54[2] = v58;
                    uint64_t v6 = v57;
                    *uint64_t v55 = v54;
                    uint64_t v59 = **(void **)(v57 + 1368);
                    long long v60 = v54;
                    if (v59)
                    {
                      *(void *)(v57 + 1368) = v59;
                      long long v60 = *v55;
                    }
                    sub_1CB8358B8(*(uint64_t **)(v57 + 1376), v60);
                    ++*(void *)(v57 + 1384);
                    unint64_t v9 = v746;
LABEL_124:
                    v54[5] = v52;
                    int v21 = 1;
                    unint64_t v7 = v49;
                    uint64_t v8 = v744;
LABEL_106:
                    if ((unint64_t *)__p.__r_.__value_.__l.__size_ != &v772) {
                      free((void *)__p.__r_.__value_.__l.__size_);
                    }
                    if (v21) {
                      goto LABEL_109;
                    }
                    goto LABEL_110;
                  case 1:
                    LODWORD(v758) = 0;
                    unsigned int v27 = v23 + 1;
                    sub_1CC1EAD80(v7, v6, *(void *)(v774.__r_.__value_.__r.__words[0] + 8 * (v23 + 1)), &v758);
                    if (*v7) {
                      goto LABEL_105;
                    }
                    if ((v758 - 74) >= 7)
                    {
                      int v61 = "Not an int attribute";
LABEL_127:
                      v761 = v61;
                      __int16 v764 = 259;
                      sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&v761);
                    }
                    switch((int)v758)
                    {
                      case 'J':
                        unsigned int v27 = v23 + 2;
                        unint64_t v36 = __clz(*(unsigned int *)(v774.__r_.__value_.__r.__words[0] + 8 * (v23 + 2))) ^ 0x13F;
                        if (*(_DWORD *)(v774.__r_.__value_.__r.__words[0] + 8 * (v23 + 2))) {
                          __int16 v37 = v36;
                        }
                        else {
                          __int16 v37 = 0;
                        }
                        llvm::AttrBuilder::addAlignmentAttr((uint64_t)&__p, v37);
                        break;
                      case 'K':
                        unsigned int v27 = v23 + 2;
                        llvm::AttrBuilder::addAllocSizeAttrFromRawRepr((uint64_t **)&__p, *(void *)(v774.__r_.__value_.__r.__words[0] + 8 * (v23 + 2)));
                        break;
                      case 'L':
                        unsigned int v27 = v23 + 2;
                        llvm::AttrBuilder::addDereferenceableAttr((llvm::AttrBuilder *)&__p, *(void *)(v774.__r_.__value_.__r.__words[0] + 8 * (v23 + 2)));
                        break;
                      case 'M':
                        unsigned int v27 = v23 + 2;
                        llvm::AttrBuilder::addDereferenceableOrNullAttr((uint64_t **)&__p, *(void *)(v774.__r_.__value_.__r.__words[0] + 8 * (v23 + 2)));
                        break;
                      case 'N':
                        unsigned int v27 = v23 + 2;
                        unint64_t v46 = __clz(*(unsigned int *)(v774.__r_.__value_.__r.__words[0] + 8 * (v23 + 2))) ^ 0x13F;
                        if (*(_DWORD *)(v774.__r_.__value_.__r.__words[0] + 8 * (v23 + 2))) {
                          __int16 v47 = v46;
                        }
                        else {
                          __int16 v47 = 0;
                        }
                        llvm::AttrBuilder::addStackAlignmentAttr((uint64_t **)&__p, v47);
                        break;
                      case 'O':
                        unsigned int v27 = v23 + 2;
                        llvm::AttrBuilder::addUWTableAttr((uint64_t **)&__p, *(void *)(v774.__r_.__value_.__r.__words[0] + 8 * (v23 + 2)));
                        break;
                      case 'P':
                        unsigned int v27 = v23 + 2;
                        llvm::AttrBuilder::addVScaleRangeAttrFromRawRepr((uint64_t **)&__p, *(void *)(v774.__r_.__value_.__r.__words[0] + 8 * (v23 + 2)));
                        break;
                      default:
                        goto LABEL_90;
                    }
                    goto LABEL_90;
                  case 3:
                  case 4:
                    size_t v26 = 0;
                    v761 = &v763;
                    long long v762 = xmmword_1CD96DBD0;
                    v758 = (llvm::GlobalValue *)v760;
                    long long v759 = xmmword_1CD96DBD0;
                    unsigned int v27 = v23 + 1;
                    if (v23 + 1 == v19)
                    {
                      unsigned int v30 = v23;
                    }
                    else
                    {
                      int v28 = v7;
                      uint64_t v29 = *(void *)(v774.__r_.__value_.__r.__words[0] + 8 * v27);
                      if (v29)
                      {
                        size_t v26 = 0;
                        do
                        {
                          if (v26 + 1 > *((void *)&v762 + 1)) {
                            llvm::SmallVectorBase<unsigned long long>::grow_pod();
                          }
                          *((unsigned char *)v761 + v26) = v29;
                          size_t v26 = v762 + 1;
                          *(void *)&long long v762 = v762 + 1;
                          std::string::size_type v24 = v774.__r_.__value_.__r.__words[0];
                          unsigned int v30 = v23 + 1;
                          if (v20 == v23) {
                            break;
                          }
                          uint64_t v29 = *(void *)(v774.__r_.__value_.__r.__words[0] + 8 * (v23 + 2));
                          ++v23;
                        }
                        while (v29);
                        unsigned int v27 = v30 + 1;
                      }
                      else
                      {
                        unsigned int v30 = v23;
                      }
                      unint64_t v7 = v28;
                      uint64_t v8 = v744;
                    }
                    if (v25 == 4)
                    {
                      unsigned int v27 = v30 + 2;
                      size_t v38 = v759;
                      if (v30 + 2 != v19)
                      {
                        int v39 = v7;
                        uint64_t v40 = *(void *)(v24 + 8 * v27);
                        if (v40)
                        {
                          unsigned int v41 = v30 + 3;
                          do
                          {
                            if (v38 + 1 > *((void *)&v759 + 1)) {
                              llvm::SmallVectorBase<unsigned long long>::grow_pod();
                            }
                            *((unsigned char *)v758 + v38) = v40;
                            size_t v38 = v759 + 1;
                            *(void *)&long long v759 = v759 + 1;
                            unsigned int v42 = v41 + 1;
                            if (v19 == v41) {
                              break;
                            }
                            uint64_t v40 = *(void *)(v774.__r_.__value_.__r.__words[0] + 8 * v41++);
                          }
                          while (v40);
                          size_t v26 = v762;
                          unsigned int v27 = v42 - 1;
                        }
                        unint64_t v7 = v39;
                      }
                    }
                    else
                    {
                      size_t v38 = v759;
                    }
                    unint64_t v43 = v761;
                    int v44 = llvm::Attribute::get((uint64_t *)__p.__r_.__value_.__l.__data_, (unsigned __int8 *)v761, v26, (unsigned __int8 *)v758, v38);
                    sub_1CC50F2F8((uint64_t)&__p.__r_.__value_.__l.__size_, v43, v26, (uint64_t)v44);
                    if (v758 != (llvm::GlobalValue *)v760) {
                      free(v758);
                    }
                    if (v761 != &v763) {
                      free(v761);
                    }
                    goto LABEL_90;
                  case 5:
                  case 6:
                    LODWORD(v758) = 0;
                    unsigned int v27 = v23 + 1;
                    sub_1CC1EAD80(v7, v6, *(void *)(v774.__r_.__value_.__r.__words[0] + 8 * (v23 + 1)), &v758);
                    if (*v7)
                    {
LABEL_105:
                      int v21 = 0;
                      unint64_t v9 = v746;
                      goto LABEL_106;
                    }
                    int v31 = (int)v758;
                    if ((v758 - 68) >= 6)
                    {
                      v761 = "Not a type attribute";
                      __int16 v764 = 259;
                      sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&v761);
                    }
                    if (v25 == 6)
                    {
                      unsigned int v27 = v23 + 2;
                      uint64_t v32 = sub_1CC1E22AC(v6, *(void *)(v774.__r_.__value_.__r.__words[0] + 8 * (v23 + 2)));
                    }
                    else
                    {
                      uint64_t v32 = 0;
                    }
                    llvm::AttrBuilder::addTypeAttr((uint64_t **)&__p, v31, v32);
                    goto LABEL_90;
                  default:
                    int v61 = "Invalid attribute group entry";
                    goto LABEL_127;
                }
              }
            }
LABEL_109:
            LOBYTE(v21) = 1;
          }
LABEL_110:
          if (v766)
          {
            int v48 = v765;
            v765 = 0;
            if (v48) {
              (*(void (**)(void *))(*(void *)v48 + 8))(v48);
            }
          }
          if ((v21 & 1) == 0) {
            break;
          }
          goto LABEL_33;
        }
        goto LABEL_805;
      case 0xB:
        sub_1CC1DE380(v7, v6);
        if (*v7) {
          goto LABEL_14;
        }
        sub_1CC1EA618(v7, (void *)v6);
        goto LABEL_855;
      case 0xC:
        sub_1CC1EA0B4((uint64_t)v747);
        if (*(unsigned char *)(v6 + 1488)) {
          goto LABEL_605;
        }
        unint64_t v290 = *(void *)(v6 + 1416);
        uint64_t v291 = *(void *)(v6 + 1424);
        if (v290 != v291)
        {
          uint64_t v292 = (void *)(v291 - 8);
          if (v290 < (unint64_t)v292)
          {
            unint64_t v293 = v290 + 8;
            do
            {
              uint64_t v294 = *(void *)(v293 - 8);
              *(void *)(v293 - 8) = *v292;
              *v292-- = v294;
              BOOL v295 = v293 >= (unint64_t)v292;
              v293 += 8;
            }
            while (!v295);
          }
        }
        sub_1CC1EA204(v7, (void *)v6);
        if (*v7) {
          goto LABEL_14;
        }
        *(unsigned char *)(v6 + 1488) = 1;
LABEL_605:
        uint64_t v255 = *(void *)(v6 + 464);
        if (!v255) {
          goto LABEL_680;
        }
        if (*(unsigned char *)(v6 + 456))
        {
LABEL_607:
          sub_1CC1C6524((uint64_t)v9, v7);
          goto LABEL_855;
        }
        sub_1CC1E12C8(v7, v6, v255);
        if (*v7) {
          goto LABEL_14;
        }
        *(unsigned char *)(v6 + 456) = 1;
LABEL_680:
        sub_1CC1DDFE4(v7, v6);
        if (*v7) {
          goto LABEL_14;
        }
        if (*(unsigned char *)(v6 + 456))
        {
          *(void *)(v6 + 440) = 8 * *(void *)(v6 + 48) - *(unsigned int *)(v6 + 64);
          goto LABEL_13;
        }
LABEL_683:
        int v11 = 2;
        goto LABEL_15;
      case 0xE:
        if (*(unsigned char *)(v6 + 456)) {
          goto LABEL_607;
        }
        sub_1CC1E12C8(v7, v6, 0);
        if (*v7) {
          goto LABEL_14;
        }
        *(unsigned char *)(v6 + 456) = 1;
        goto LABEL_683;
      case 0xF:
        if (!a4)
        {
          llvm::MetadataLoader::MetadataLoaderImpl::parseMetadata(*(llvm::MetadataLoader::MetadataLoaderImpl **)(v6 + 680), 1, v7);
          goto LABEL_855;
        }
        uint64_t v124 = v7;
        uint64_t v125 = 8 * *(void *)(v6 + 48) - *(unsigned int *)(v6 + 64);
        std::string::size_type v126 = *(uint64_t **)(v6 + 1528);
        unint64_t v127 = *(void *)(v6 + 1536);
        if ((unint64_t)v126 >= v127)
        {
          unint64_t v296 = *(uint64_t **)(v6 + 1520);
          uint64_t v297 = v126 - v296;
          unint64_t v298 = v297 + 1;
          if ((unint64_t)(v297 + 1) >> 61) {
            goto LABEL_1377;
          }
          uint64_t v299 = v127 - (void)v296;
          if (v299 >> 2 > v298) {
            unint64_t v298 = v299 >> 2;
          }
          if ((unint64_t)v299 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v300 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v300 = v298;
          }
          if (v300)
          {
            if (v300 >> 61) {
              goto LABEL_1378;
            }
            long long v301 = (char *)operator new(8 * v300);
          }
          else
          {
            long long v301 = 0;
          }
          int v364 = (uint64_t *)&v301[8 * v297];
          uint64_t *v364 = v125;
          int v128 = v364 + 1;
          while (v126 != v296)
          {
            uint64_t v365 = *--v126;
            *--int v364 = v365;
          }
          *(void *)(v6 + 1520) = v364;
          *(void *)(v6 + 1528) = v128;
          *(void *)(v6 + 1536) = &v301[8 * v300];
          if (v296) {
            operator delete(v296);
          }
          unint64_t v9 = v746;
        }
        else
        {
          *std::string::size_type v126 = v125;
          int v128 = v126 + 1;
          unint64_t v9 = v746;
        }
        *(void *)(v6 + 1528) = v128;
        unint64_t v7 = v124;
        sub_1CC1C6524((uint64_t)v9, v124);
        if (*v124)
        {
          int v11 = 1;
        }
        else
        {
          *uint64_t v124 = 0;
          int v11 = 2;
        }
        uint64_t v8 = v744;
        goto LABEL_15;
      case 0x11:
        llvm::BitstreamCursor::EnterSubBlock(v9, 0, 17, v7);
        if (*v7) {
          goto LABEL_855;
        }
        if (*(void *)(v6 + 520) != *(void *)(v6 + 528)) {
          goto LABEL_610;
        }
        v774.__r_.__value_.__r.__words[0] = (std::string::size_type)&v774.__r_.__value_.__r.__words[2];
        v774.__r_.__value_.__l.__size_ = 0x4000000000;
        unsigned int v752 = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v772;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1CD96DBD0;
        while (2)
        {
          sub_1CC1CA5F4((uint64_t)v9, 0, (uint64_t)&v761);
          if (v762)
          {
            unsigned int v252 = v761;
LABEL_1337:
            void *v7 = v252;
          }
          else
          {
            if (v761 == 2)
            {
              sub_1CC1C6524((uint64_t)v9, &v758);
              unsigned int v252 = v758;
              if (v762)
              {
                uint64_t v254 = v761;
                v761 = 0;
                if (v254) {
                  (*(void (**)(void *))(*(void *)v254 + 8))(v254);
                }
              }
              uint64_t v8 = v744;
              unint64_t v9 = v746;
              if (v252) {
                goto LABEL_1337;
              }
              continue;
            }
            if (v761 != 1)
            {
              if (!v761) {
                goto LABEL_845;
              }
              LODWORD(v774.__r_.__value_.__r.__words[1]) = 0;
              v758 = (llvm::GlobalValue *)((char *)&v759 + 8);
              *(void *)&long long v759 = 0xC00000000;
              llvm::BitstreamCursor::readRecord(v9, SHIDWORD(v761), (uint64_t)&v774, 0, (uint64_t)&v769);
              if (v770)
              {
                uint64_t v138 = v769;
                v769 = 0;
                void *v7 = v138;
                int v232 = 1;
                goto LABEL_536;
              }
              switch((int)v769)
              {
                case 1:
                  if (LODWORD(v774.__r_.__value_.__r.__words[1]))
                  {
                    v711 = v7;
                    unint64_t v129 = *(void *)v774.__r_.__value_.__l.__data_;
                    uint64_t v130 = *(char **)(v6 + 528);
                    uint64_t v131 = *(unsigned char **)(v6 + 520);
                    uint64_t v132 = (char *)(v130 - v131);
                    unint64_t v133 = (v130 - v131) >> 3;
                    if (*(void *)v774.__r_.__value_.__l.__data_ <= v133)
                    {
                      if (v129 >= v133)
                      {
LABEL_440:
                        int v232 = 2;
                        unint64_t v7 = v711;
                        uint64_t v8 = v744;
                        goto LABEL_536;
                      }
                      uint64_t v191 = &v131[8 * v129];
                    }
                    else
                    {
                      uint64_t v134 = *(void *)(v6 + 536);
                      unint64_t v135 = v129 - v133;
                      if (v129 - v133 > (v134 - (uint64_t)v130) >> 3)
                      {
                        if (v129 >> 61) {
                          goto LABEL_1377;
                        }
                        uint64_t v136 = v134 - (void)v131;
                        if (v136 >> 2 > v129) {
                          unint64_t v129 = v136 >> 2;
                        }
                        if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v137 = v129;
                        }
                        if (v137 >> 61) {
LABEL_1378:
                        }
                          sub_1CB833614();
                        uint64_t v725 = operator new(8 * v137);
                        v714 = (llvm::Type *)((char *)v725 + 8 * v133);
                        bzero(v714, 8 * v135);
                        if (v130 != v131)
                        {
                          do
                          {
                            uint64_t v253 = *((void *)v130 - 1);
                            v130 -= 8;
                            *((void *)v714 - 1) = v253;
                            v714 = (llvm::Type *)((char *)v714 - 8);
                          }
                          while (v130 != v131);
                          uint64_t v130 = *(char **)(v6 + 520);
                        }
                        unint64_t v7 = v711;
                        *(void *)(v6 + 520) = v714;
                        *(void *)(v6 + 528) = &v132[8 * v135 + (void)v725];
                        *(void *)(v6 + 536) = (char *)v725 + 8 * v137;
                        uint64_t v8 = v744;
                        if (v130) {
                          operator delete(v130);
                        }
LABEL_384:
                        int v232 = 2;
LABEL_536:
                        if (v770)
                        {
                          unint64_t v233 = v769;
                          v769 = 0;
                          if (v233) {
                            (*(void (**)(void *))(*(void *)v233 + 8))(v233);
                          }
                        }
                        if (v758 != (llvm::GlobalValue *)((char *)&v759 + 8)) {
                          free(v758);
                        }
                        int v234 = v232 | 2;
                        unint64_t v9 = v746;
                        if (v234 != 2) {
                          goto LABEL_846;
                        }
                        continue;
                      }
                      bzero(*(void **)(v6 + 528), 8 * v135);
                      uint64_t v191 = &v130[8 * v135];
                    }
                    *(void *)(v6 + 528) = v191;
                    goto LABEL_440;
                  }
                  int v140 = "Invalid numentry record";
                  goto LABEL_535;
                case 2:
                  uint64_t v139 = **(void **)(v6 + 424) + 1576;
                  goto LABEL_531;
                case 3:
                  uint64_t v139 = **(void **)(v6 + 424) + 1672;
                  goto LABEL_531;
                case 4:
                  uint64_t v139 = **(void **)(v6 + 424) + 1696;
                  goto LABEL_531;
                case 5:
                  uint64_t v139 = **(void **)(v6 + 424) + 1600;
                  goto LABEL_531;
                case 6:
                  if (LODWORD(v774.__r_.__value_.__r.__words[1]) != 1)
                  {
                    int v140 = "Invalid opaque type record";
                    goto LABEL_535;
                  }
                  uint64_t v162 = v752;
                  uint64_t v163 = *(void *)(v6 + 520);
                  if (v752 >= (unint64_t)((*(void *)(v6 + 528) - v163) >> 3)) {
                    goto LABEL_534;
                  }
                  uint64_t v139 = *(void *)(v163 + 8 * v752);
                  if (v139)
                  {
                    llvm::StructType::setName(*(void *)(v163 + 8 * v752), (unsigned __int8 *)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                    *(void *)(*(void *)(v6 + 520) + 8 * v162) = 0;
                  }
                  else
                  {
                    uint64_t v139 = sub_1CC1EAE0C((void *)v6, *(uint64_t **)(v6 + 424), (unsigned __int8 *)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                  }
                  __p.__r_.__value_.__l.__size_ = 0;
                  goto LABEL_531;
                case 7:
                  if (!LODWORD(v774.__r_.__value_.__r.__words[1]))
                  {
                    int v140 = "Invalid integer record";
                    goto LABEL_535;
                  }
                  if ((unint64_t)(*(void *)v774.__r_.__value_.__l.__data_ - 1) >> 23)
                  {
                    int v140 = "Bitwidth for integer type out of range";
                    goto LABEL_535;
                  }
                  uint64_t v164 = llvm::IntegerType::get(*(llvm::IntegerType **)(v6 + 424), *(llvm::LLVMContext **)v774.__r_.__value_.__l.__data_);
LABEL_377:
                  uint64_t v139 = v164;
                  goto LABEL_531;
                case 8:
                  if (!LODWORD(v774.__r_.__value_.__r.__words[1]))
                  {
                    int v140 = "Invalid pointer record";
                    goto LABEL_535;
                  }
                  if (LODWORD(v774.__r_.__value_.__r.__words[1]) == 2)
                  {
                    uint64_t v148 = (unsigned int *)v774.__r_.__value_.__r.__words[0];
                    uint64_t v149 = (llvm::Type *)*(unsigned int *)(v774.__r_.__value_.__r.__words[0] + 8);
                  }
                  else
                  {
                    uint64_t v149 = 0;
                    uint64_t v148 = (unsigned int *)v774.__r_.__value_.__r.__words[0];
                  }
                  uint64_t v187 = (unsigned __int8 *)sub_1CC1E22AC(v6, *v148);
                  if (!v187) {
                    goto LABEL_436;
                  }
                  unsigned int v188 = v187[8];
                  BOOL v189 = v188 > 0xC || ((1 << v188) & 0x1380) == 0;
                  if (!v189 || v188 == 11) {
                    goto LABEL_436;
                  }
                  uint64_t v185 = v7;
                  if (v759 >= (unint64_t)DWORD1(v759)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_DWORD *)v758 + v759) = *(_DWORD *)v774.__r_.__value_.__l.__data_;
                  LODWORD(v759) = v759 + 1;
                  unint64_t v186 = llvm::PointerType::get((llvm::PointerType *)v187, v149);
LABEL_479:
                  uint64_t v139 = v186;
                  unint64_t v7 = v185;
                  goto LABEL_531;
                case 9:
                  int v171 = v774.__r_.__value_.__r.__words[1];
                  if (LODWORD(v774.__r_.__value_.__r.__words[1]) <= 2) {
                    goto LABEL_388;
                  }
                  int v154 = (int)v7;
                  v761 = (char *)&v762 + 8;
                  *(void *)&long long v762 = 0x800000000;
                  if (LODWORD(v774.__r_.__value_.__r.__words[1]) != 3)
                  {
                    unsigned int v205 = 3;
                    do
                    {
                      uint64_t v206 = sub_1CC1E22AC(v6, *(void *)(v774.__r_.__value_.__r.__words[0] + 8 * v205));
                      if (!v206) {
                        break;
                      }
                      if (v762 >= (unint64_t)DWORD1(v762)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v761 + v762) = v206;
                      LODWORD(v762) = v762 + 1;
                      ++v205;
                    }
                    while (v171 != v205);
                  }
                  uint64_t v155 = (uint64_t **)sub_1CC1E22AC(v6, *(_DWORD *)(v774.__r_.__value_.__r.__words[0] + 16));
                  if (!v155 || (unint64_t)LODWORD(v774.__r_.__value_.__r.__words[1]) - 3 > v762) {
                    goto LABEL_419;
                  }
                  uint64_t v156 = 8 * LODWORD(v774.__r_.__value_.__r.__words[1]) - 16;
                  int v157 = v759;
                  if ((unint64_t)v759 + (v156 >> 3) > DWORD1(v759)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  uint64_t v8 = v744;
                  if (LODWORD(v774.__r_.__value_.__r.__words[1]) == 2) {
                    goto LABEL_487;
                  }
                  uint64_t v207 = (uint64_t *)(v774.__r_.__value_.__r.__words[0] + 16);
                  uint64_t v208 = (_DWORD *)((char *)v758 + 4 * v759);
                  uint64_t v209 = 8 * LODWORD(v774.__r_.__value_.__r.__words[1]) - 16;
                  do
                  {
                    uint64_t v210 = *v207++;
                    *v208++ = v210;
                    v209 -= 8;
                  }
                  while (v209);
                  goto LABEL_486;
                case 10:
                  uint64_t v139 = **(void **)(v6 + 424) + 1624;
                  goto LABEL_531;
                case 11:
                  if (LODWORD(v774.__r_.__value_.__r.__words[1]) <= 1)
                  {
                    int v140 = "Invalid array type record";
                    goto LABEL_535;
                  }
                  unsigned int v181 = (unsigned __int8 *)sub_1CC1E22AC(v6, *(_DWORD *)(v774.__r_.__value_.__r.__words[0] + 8));
                  if (!v181) {
                    goto LABEL_436;
                  }
                  unsigned int v182 = v181[8];
                  BOOL v183 = v182 > 0xE || ((1 << v182) & 0x5B80) == 0;
                  if (!v183 || v182 == 19) {
                    goto LABEL_436;
                  }
                  uint64_t v185 = v7;
                  if (v759 >= (unint64_t)DWORD1(v759)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_DWORD *)v758 + v759) = *(_DWORD *)(v774.__r_.__value_.__r.__words[0] + 8);
                  LODWORD(v759) = v759 + 1;
                  unint64_t v186 = (unint64_t)llvm::ArrayType::get((llvm::ArrayType *)v181, *(llvm::Type **)v774.__r_.__value_.__l.__data_);
                  goto LABEL_479;
                case 12:
                  if (LODWORD(v774.__r_.__value_.__r.__words[1]) <= 1)
                  {
                    int v140 = "Invalid vector type record";
                    goto LABEL_535;
                  }
                  if (!*(void *)v774.__r_.__value_.__l.__data_)
                  {
                    int v140 = "Invalid vector length";
                    goto LABEL_535;
                  }
                  uint64_t v174 = sub_1CC1E22AC(v6, *(_DWORD *)(v774.__r_.__value_.__r.__words[0] + 8));
                  if (!v174
                    || ((v175 = *(unsigned __int8 *)(v174 + 8), BOOL v176 = v175 > 0x14, v177 = (1 << v175) & 0x10A07F, !v176)
                      ? (BOOL v178 = v177 == 0)
                      : (BOOL v178 = 1),
                        v178))
                  {
LABEL_436:
                    int v140 = "Invalid type";
                    goto LABEL_535;
                  }
                  BOOL v179 = v7;
                  if (LODWORD(v774.__r_.__value_.__r.__words[1]) < 3) {
                    uint64_t v180 = 0;
                  }
                  else {
                    uint64_t v180 = *(void *)(v774.__r_.__value_.__r.__words[0] + 16);
                  }
                  if (v759 >= (unint64_t)DWORD1(v759)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_DWORD *)v758 + v759) = *(_DWORD *)(v774.__r_.__value_.__r.__words[0] + 8);
                  LODWORD(v759) = v759 + 1;
                  unsigned int v224 = (llvm::Type *)*(unsigned int *)v774.__r_.__value_.__l.__data_;
                  if (v180) {
                    llvm::ScalableVectorType::get((uint64_t **)v174, v224);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v174, v224);
                  }
                  uint64_t v139 = v225;
                  unint64_t v7 = v179;
                  uint64_t v8 = v744;
                  goto LABEL_531;
                case 13:
                  uint64_t v139 = **(void **)(v6 + 424) + 1768;
                  goto LABEL_531;
                case 14:
                  uint64_t v139 = **(void **)(v6 + 424) + 1792;
                  goto LABEL_531;
                case 15:
                  uint64_t v139 = **(void **)(v6 + 424) + 1816;
                  goto LABEL_531;
                case 16:
                  uint64_t v139 = **(void **)(v6 + 424) + 1720;
                  goto LABEL_531;
                case 17:
                  uint64_t v139 = **(void **)(v6 + 424) + 1840;
                  goto LABEL_531;
                case 18:
                  int v150 = v774.__r_.__value_.__r.__words[1];
                  if (!LODWORD(v774.__r_.__value_.__r.__words[1]))
                  {
                    int v140 = "Invalid anon struct record";
                    goto LABEL_535;
                  }
                  v761 = (char *)&v762 + 8;
                  *(void *)&long long v762 = 0x800000000;
                  if (LODWORD(v774.__r_.__value_.__r.__words[1]) == 1)
                  {
                    int v151 = 0;
                    uint64_t v152 = 1;
                  }
                  else
                  {
                    uint64_t v192 = 1;
                    do
                    {
                      uint64_t v193 = sub_1CC1E22AC(v6, *(void *)(v774.__r_.__value_.__r.__words[0] + 8 * v192));
                      int v151 = v762;
                      if (!v193) {
                        break;
                      }
                      if (v762 >= DWORD1(v762)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v761 + v762) = v193;
                      int v151 = v762 + 1;
                      LODWORD(v762) = v762 + 1;
                      ++v192;
                    }
                    while (v150 != v192);
                    uint64_t v152 = LODWORD(v774.__r_.__value_.__r.__words[1]);
                  }
                  uint64_t v194 = v152 - 1;
                  if (v152 - 1 != v151)
                  {
                    v765 = "Invalid type";
                    __int16 v768 = 259;
                    sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&v765);
                  }
                  uint64_t v195 = 8 * v152 - 8;
                  int v196 = v759;
                  if ((unint64_t)v759 + (v195 >> 3) > DWORD1(v759)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v152 != 1)
                  {
                    uint64_t v197 = (uint64_t *)(v774.__r_.__value_.__r.__words[0] + 8);
                    uint64_t v198 = (_DWORD *)((char *)v758 + 4 * v759);
                    uint64_t v199 = 8 * v152 - 8;
                    do
                    {
                      uint64_t v200 = *v197++;
                      *v198++ = v200;
                      v199 -= 8;
                    }
                    while (v199);
                    int v196 = v759;
                  }
                  LODWORD(v759) = v196 + ((unint64_t)v195 >> 3);
                  uint64_t v139 = llvm::StructType::get(*(uint64_t **)(v6 + 424), (uint64_t)v761, v762, *(void *)v774.__r_.__value_.__l.__data_ != 0);
                  int v232 = 5;
                  uint64_t v8 = v744;
                  if (v761 != (char *)&v762 + 8) {
                    free(v761);
                  }
                  if (v194 != v151) {
                    goto LABEL_536;
                  }
                  goto LABEL_531;
                case 19:
                  uint64_t v165 = (uint64_t *)v774.__r_.__value_.__r.__words[0];
                  uint64_t v166 = LODWORD(v774.__r_.__value_.__r.__words[1]);
                  std::string::size_type v167 = __p.__r_.__value_.__l.__size_;
                  if (__p.__r_.__value_.__r.__words[2] < __p.__r_.__value_.__l.__size_
                                                        + LODWORD(v774.__r_.__value_.__r.__words[1]))
                    llvm::SmallVectorBase<unsigned long long>::grow_pod();
                  if (LODWORD(v774.__r_.__value_.__r.__words[1]))
                  {
                    unsigned int v168 = (unsigned char *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_);
                    uint64_t v169 = 8 * LODWORD(v774.__r_.__value_.__r.__words[1]);
                    do
                    {
                      uint64_t v170 = *v165++;
                      *v168++ = v170;
                      v169 -= 8;
                    }
                    while (v169);
                    std::string::size_type v167 = __p.__r_.__value_.__l.__size_;
                  }
                  __p.__r_.__value_.__l.__size_ = v167 + v166;
                  goto LABEL_384;
                case 20:
                  if (!LODWORD(v774.__r_.__value_.__r.__words[1]))
                  {
                    int v140 = "Invalid named struct record";
                    goto LABEL_535;
                  }
                  uint64_t v172 = v752;
                  uint64_t v173 = *(void *)(v6 + 520);
                  if (v752 >= (unint64_t)((*(void *)(v6 + 528) - v173) >> 3)) {
                    goto LABEL_534;
                  }
                  uint64_t v139 = *(void *)(v173 + 8 * v752);
                  if (v139)
                  {
                    llvm::StructType::setName(*(void *)(v173 + 8 * v752), (unsigned __int8 *)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                    *(void *)(*(void *)(v6 + 520) + 8 * v172) = 0;
                  }
                  else
                  {
                    uint64_t v139 = sub_1CC1EAE0C((void *)v6, *(uint64_t **)(v6 + 424), (unsigned __int8 *)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                  }
                  __p.__r_.__value_.__l.__size_ = 0;
                  v761 = (char *)&v762 + 8;
                  *(void *)&long long v762 = 0x800000000;
                  int v211 = v774.__r_.__value_.__r.__words[1];
                  if (LODWORD(v774.__r_.__value_.__r.__words[1]) == 1)
                  {
                    unsigned int v212 = 0;
                    uint64_t v213 = 1;
                  }
                  else
                  {
                    uint64_t v214 = 1;
                    do
                    {
                      uint64_t v215 = sub_1CC1E22AC(v6, *(void *)(v774.__r_.__value_.__r.__words[0] + 8 * v214));
                      unsigned int v212 = v762;
                      if (!v215) {
                        break;
                      }
                      if (v762 >= DWORD1(v762)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v761 + v762) = v215;
                      unsigned int v212 = v762 + 1;
                      LODWORD(v762) = v762 + 1;
                      ++v214;
                    }
                    while (v211 != v214);
                    uint64_t v213 = LODWORD(v774.__r_.__value_.__r.__words[1]);
                  }
                  uint64_t v216 = v212;
                  uint64_t v217 = v213 - 1;
                  if (v213 - 1 != v212)
                  {
                    v765 = "Invalid named struct record";
                    __int16 v768 = 259;
                    sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&v765);
                  }
                  llvm::StructType::setBody(v139, (uint64_t)v761, v212, *(void *)v774.__r_.__value_.__l.__data_ != 0);
                  uint64_t v218 = 8 * LODWORD(v774.__r_.__value_.__r.__words[1]) - 8;
                  int v219 = v759;
                  if ((unint64_t)v759 + (v218 >> 3) > DWORD1(v759)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  uint64_t v8 = v744;
                  if (LODWORD(v774.__r_.__value_.__r.__words[1]) != 1)
                  {
                    unsigned int v220 = (uint64_t *)(v774.__r_.__value_.__r.__words[0] + 8);
                    unsigned int v221 = (_DWORD *)((char *)v758 + 4 * v759);
                    uint64_t v222 = 8 * LODWORD(v774.__r_.__value_.__r.__words[1]) - 8;
                    do
                    {
                      uint64_t v223 = *v220++;
                      *v221++ = v223;
                      v222 -= 8;
                    }
                    while (v222);
                    int v219 = v759;
                  }
                  LODWORD(v759) = v219 + ((unint64_t)v218 >> 3);
                  int v232 = 5;
                  if (v761 != (char *)&v762 + 8) {
                    free(v761);
                  }
                  if (v217 != v216) {
                    goto LABEL_536;
                  }
                  goto LABEL_531;
                case 21:
                  int v153 = v774.__r_.__value_.__r.__words[1];
                  if (LODWORD(v774.__r_.__value_.__r.__words[1]) <= 1)
                  {
LABEL_388:
                    int v140 = "Invalid function record";
                    goto LABEL_535;
                  }
                  v761 = (char *)&v762 + 8;
                  *(void *)&long long v762 = 0x800000000;
                  if (LODWORD(v774.__r_.__value_.__r.__words[1]) != 2)
                  {
                    unsigned int v201 = 2;
                    do
                    {
                      uint64_t v202 = sub_1CC1E22AC(v6, *(void *)(v774.__r_.__value_.__r.__words[0] + 8 * v201));
                      if (!v202) {
                        break;
                      }
                      int v203 = *(unsigned __int8 *)(v202 + 8);
                      if (v203 == 7 || v203 == 14)
                      {
                        v765 = "Invalid function argument type";
                        __int16 v768 = 259;
                        sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&v765);
                      }
                      if (v762 >= (unint64_t)DWORD1(v762)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v761 + v762) = v202;
                      LODWORD(v762) = v762 + 1;
                      ++v201;
                    }
                    while (v153 != v201);
                  }
                  int v154 = (int)v7;
                  uint64_t v155 = (uint64_t **)sub_1CC1E22AC(v6, *(_DWORD *)(v774.__r_.__value_.__r.__words[0] + 8));
                  if (!v155 || (unint64_t)LODWORD(v774.__r_.__value_.__r.__words[1]) - 2 > v762)
                  {
LABEL_419:
                    v765 = "Invalid type";
                    __int16 v768 = 259;
                    sub_1CC1DDE58(v154, v744, (llvm::Twine *)&v765);
                  }
                  uint64_t v156 = 8 * LODWORD(v774.__r_.__value_.__r.__words[1]) - 8;
                  int v157 = v759;
                  if ((unint64_t)v759 + (v156 >> 3) > DWORD1(v759)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  uint64_t v8 = v744;
                  if (LODWORD(v774.__r_.__value_.__r.__words[1]) != 1)
                  {
                    unsigned int v158 = (uint64_t *)(v774.__r_.__value_.__r.__words[0] + 8);
                    unint64_t v159 = (_DWORD *)((char *)v758 + 4 * v759);
                    uint64_t v160 = 8 * LODWORD(v774.__r_.__value_.__r.__words[1]) - 8;
                    do
                    {
                      uint64_t v161 = *v158++;
                      *v159++ = v161;
                      v160 -= 8;
                    }
                    while (v160);
LABEL_486:
                    int v157 = v759;
                  }
LABEL_487:
                  LODWORD(v759) = v157 + ((unint64_t)v156 >> 3);
                  uint64_t v139 = llvm::FunctionType::get(v155, (uint64_t)v761, v762, *(void *)v774.__r_.__value_.__l.__data_ != 0);
                  goto LABEL_529;
                case 22:
                  uint64_t v139 = **(void **)(v6 + 424) + 1744;
                  goto LABEL_531;
                case 23:
                  uint64_t v139 = **(void **)(v6 + 424) + 1648;
                  goto LABEL_531;
                case 24:
                  uint64_t v139 = **(void **)(v6 + 424) + 1864;
                  goto LABEL_531;
                case 25:
                  if (LODWORD(v774.__r_.__value_.__r.__words[1]) != 1)
                  {
                    int v140 = "Invalid opaque pointer record";
                    goto LABEL_535;
                  }
                  char hasOpaquePointersValue = llvm::LLVMContextImpl::hasOpaquePointersValue(**(llvm::LLVMContextImpl ***)(v6 + 424));
                  unsigned int v147 = *(llvm::LLVMContext **)(v6 + 424);
                  if (hasOpaquePointersValue)
                  {
                    if (llvm::LLVMContext::supportsTypedPointers(v147))
                    {
                      int v140 = "Opaque pointers are only supported in -opaque-pointers mode";
                      goto LABEL_535;
                    }
                  }
                  else
                  {
                    llvm::LLVMContextImpl::setOpaquePointers(*(void *)v147, 1);
                  }
                  uint64_t v164 = llvm::PointerType::get(*(uint64_t ***)(v6 + 424), (llvm::LLVMContext *)*(unsigned int *)v774.__r_.__value_.__l.__data_);
                  goto LABEL_377;
                case 26:
                  unint64_t v141 = LODWORD(v774.__r_.__value_.__r.__words[1]);
                  if (!LODWORD(v774.__r_.__value_.__r.__words[1]))
                  {
                    int v140 = "Invalid target extension type record";
                    goto LABEL_535;
                  }
                  if (v752 >= (unint64_t)((uint64_t)(*(void *)(v6 + 528) - *(void *)(v6 + 520)) >> 3)) {
                    goto LABEL_534;
                  }
                  uint64_t v142 = *(void *)v774.__r_.__value_.__l.__data_;
                  if (*(void *)v774.__r_.__value_.__l.__data_ >= (unint64_t)LODWORD(v774.__r_.__value_.__r.__words[1]))
                  {
                    int v140 = "Too many type parameters";
                    goto LABEL_535;
                  }
                  uint64_t v143 = *(void *)v774.__r_.__value_.__l.__data_;
                  v761 = (char *)&v762 + 8;
                  *(void *)&long long v762 = 0x400000000;
                  v765 = v767;
                  uint64_t v766 = 0x800000000;
                  if (v142)
                  {
                    uint64_t v144 = 0;
                    do
                    {
                      uint64_t v145 = sub_1CC1E22AC(v6, *(_DWORD *)(v774.__r_.__value_.__r.__words[0] + v144 + 8));
                      if (!v145)
                      {
                        *(void *)v750 = "Invalid type";
                        __int16 v751 = 259;
                        sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)v750);
                      }
                      if (v762 >= (unint64_t)DWORD1(v762)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v761 + v762) = v145;
                      LODWORD(v142) = v762 + 1;
                      LODWORD(v762) = v762 + 1;
                      v144 += 8;
                    }
                    while (8 * v143 != v144);
                    int v226 = v7;
                    unint64_t v141 = LODWORD(v774.__r_.__value_.__r.__words[1]);
                  }
                  else
                  {
                    int v226 = v7;
                  }
                  unint64_t v227 = v143 + 1;
                  if (v227 >= v141)
                  {
                    unsigned int v229 = v766;
                  }
                  else
                  {
                    do
                    {
                      unint64_t v228 = *(void *)(v774.__r_.__value_.__r.__words[0] + 8 * v227);
                      if (HIDWORD(v228))
                      {
                        *(void *)v750 = "Integer parameter too large";
                        __int16 v751 = 259;
                        sub_1CC1DDE58((int)v226, v744, (llvm::Twine *)v750);
                      }
                      if (v766 >= (unint64_t)HIDWORD(v766)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((_DWORD *)v765 + v766) = v228;
                      unsigned int v229 = v766 + 1;
                      LODWORD(v766) = v766 + 1;
                      ++v227;
                    }
                    while (v141 != v227);
                    LODWORD(v142) = v762;
                  }
                  uint64_t v139 = llvm::TargetExtType::get(*(void **)(v6 + 424), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t *)v761, v142, (int *)v765, v229);
                  __p.__r_.__value_.__l.__size_ = 0;
                  unint64_t v7 = v226;
                  uint64_t v8 = v744;
                  if (v765 != v767) {
                    free(v765);
                  }
LABEL_529:
                  if (v761 != (char *)&v762 + 8) {
                    free(v761);
                  }
LABEL_531:
                  unsigned int v230 = v752;
                  uint64_t v231 = *(void *)(v6 + 520);
                  if (v752 >= (unint64_t)((*(void *)(v6 + 528) - v231) >> 3))
                  {
LABEL_534:
                    int v140 = "Invalid TYPE table";
LABEL_535:
                    v761 = v140;
                    __int16 v764 = 259;
                    sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&v761);
                  }
                  if (*(void *)(v231 + 8 * v752))
                  {
                    int v140 = "Invalid TYPE table: Only named structs can be forward referenced";
                    goto LABEL_535;
                  }
                  *(void *)(v231 + 8 * v752) = v139;
                  if (!v759) {
                    goto LABEL_570;
                  }
                  int v235 = *(_DWORD *)(v6 + 560);
                  if (v235)
                  {
                    uint64_t v236 = *(void *)(v6 + 544);
                    unsigned int v237 = v235 - 1;
                    uint64_t v238 = v237 & (37 * v230);
                    unint64_t v239 = (_DWORD *)(v236 + 32 * v238);
                    int v240 = *v239;
                    if (v230 == *v239)
                    {
LABEL_559:
                      unint64_t v246 = v7;
                      uint64_t v247 = (void **)(v239 + 2);
                      if (v239 + 2 != (_DWORD *)&v758)
                      {
                        int v248 = v758;
                        if (v758 == (llvm::GlobalValue *)((char *)&v759 + 8))
                        {
                          int v249 = v759;
                          uint64_t v250 = v239[4];
                          if (v250 >= v759)
                          {
                            if (v759) {
                              memmove(*v247, (char *)&v759 + 8, 4 * v759);
                            }
                            v239[4] = v249;
                          }
                          else
                          {
                            if (v239[5] < v759)
                            {
                              v239[4] = 0;
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            if (v250) {
                              memmove(*v247, (char *)&v759 + 8, 4 * v250);
                            }
                            else {
                              uint64_t v250 = 0;
                            }
                            if (v250 != v759) {
                              memcpy((char *)*v247 + 4 * v250, (char *)v758 + 4 * v250, 4 * v759 - 4 * v250);
                            }
                            v239[4] = v249;
                            unsigned int v230 = v752;
                          }
                        }
                        else
                        {
                          unsigned int v251 = (_DWORD *)*((void *)v239 + 1);
                          if (v251 != v239 + 6)
                          {
                            free(v251);
                            int v248 = v758;
                          }
                          *((void *)v239 + 1) = v248;
                          *((void *)v239 + 2) = v759;
                          v758 = (llvm::GlobalValue *)((char *)&v759 + 8);
                          DWORD1(v759) = 0;
                        }
                        unint64_t v7 = v246;
                        LODWORD(v759) = 0;
                      }
                      uint64_t v8 = v744;
LABEL_570:
                      int v232 = 0;
                      unsigned int v752 = v230 + 1;
                      goto LABEL_536;
                    }
                    unint64_t v241 = 0;
                    int v242 = 1;
                    while (v240 != -1)
                    {
                      if (v241) {
                        BOOL v243 = 0;
                      }
                      else {
                        BOOL v243 = v240 == -2;
                      }
                      if (v243) {
                        unint64_t v241 = v239;
                      }
                      int v244 = v238 + v242++;
                      uint64_t v238 = v244 & v237;
                      unint64_t v239 = (_DWORD *)(v236 + 32 * v238);
                      int v240 = *v239;
                      if (v230 == *v239) {
                        goto LABEL_559;
                      }
                    }
                    if (v241) {
                      unint64_t v245 = v241;
                    }
                    else {
                      unint64_t v245 = v239;
                    }
                  }
                  else
                  {
                    unint64_t v245 = 0;
                  }
                  unint64_t v239 = sub_1CC1E3E34(v738, &v752, v245);
                  *unint64_t v239 = v230;
                  *((void *)v239 + 1) = v239 + 6;
                  *((void *)v239 + 2) = 0x100000000;
                  goto LABEL_559;
                default:
                  int v140 = "Invalid value";
                  goto LABEL_535;
              }
            }
            if (v752 != (uint64_t)(*(void *)(v6 + 528) - *(void *)(v6 + 520)) >> 3)
            {
LABEL_845:
              v761 = "Malformed block";
              __int16 v764 = 259;
              sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&v761);
            }
            void *v7 = 0;
          }
          break;
        }
LABEL_846:
        unint64_t v371 = (char *)__p.__r_.__value_.__r.__words[0];
        int v372 = (char *)&v772;
LABEL_851:
        if (v371 != v372) {
          free(v371);
        }
        break;
      case 0x12:
        sub_1CC1E1ADC(v7, (void *)v6);
        goto LABEL_855;
      case 0x15:
        llvm::BitstreamCursor::EnterSubBlock(v9, 0, 21, v7);
        if (*v7) {
          goto LABEL_855;
        }
        if (*(void *)(v6 + 1704) != *(void *)(v6 + 1712))
        {
LABEL_610:
          unsigned int v64 = "Invalid multiple blocks";
LABEL_611:
          v774.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
          __int16 v776 = 259;
          sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&v774);
        }
        v774.__r_.__value_.__r.__words[0] = (std::string::size_type)&v774.__r_.__value_.__r.__words[2];
        v774.__r_.__value_.__l.__size_ = 0x4000000000;
        while (1)
        {
          sub_1CC1CA5F4((uint64_t)v9, 0, (uint64_t)&__p);
          if (__p.__r_.__value_.__s.__data_[8]) {
            break;
          }
          switch(LODWORD(__p.__r_.__value_.__l.__data_))
          {
            case 2:
              sub_1CC1C6524((uint64_t)v9, &v761);
              BOOL v62 = v761;
              if (__p.__r_.__value_.__s.__data_[8])
              {
                std::string::size_type v363 = __p.__r_.__value_.__r.__words[0];
                __p.__r_.__value_.__r.__words[0] = 0;
                if (v363) {
                  (*(void (**)(std::string::size_type))(*(void *)v363 + 8))(v363);
                }
              }
              uint64_t v8 = v744;
              unint64_t v9 = v746;
              if (v62) {
                goto LABEL_1335;
              }
              break;
            case 1:
              goto LABEL_848;
            case 0:
              goto LABEL_805;
            default:
              llvm::BitstreamCursor::readRecord(v9, SHIDWORD(__p.__r_.__value_.__r.__words[0]), (uint64_t)&v774, 0, (uint64_t)&v761);
              if (v762)
              {
                char v351 = 0;
                unsigned int v352 = v761;
                v761 = 0;
                void *v7 = v352;
              }
              else
              {
                if (v761 != 1)
                {
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid operand bundle record";
                  LOWORD(v773) = 259;
                  sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&__p);
                }
                int v347 = v7;
                uint64_t v348 = *(std::string **)(v6 + 1712);
                unint64_t v349 = *(void *)(v6 + 1720);
                if ((unint64_t)v348 >= v349)
                {
                  int v353 = *v742;
                  unint64_t v354 = 0xAAAAAAAAAAAAAAABLL * (((char *)v348 - (char *)*v742) >> 3);
                  unint64_t v355 = v354 + 1;
                  if (v354 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    goto LABEL_1377;
                  }
                  if (0x5555555555555556 * ((uint64_t)(v349 - (void)v353) >> 3) > v355) {
                    unint64_t v355 = 0x5555555555555556 * ((uint64_t)(v349 - (void)v353) >> 3);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v349 - (void)v353) >> 3) >= 0x555555555555555) {
                    unint64_t v356 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v356 = v355;
                  }
                  v773 = v741;
                  if (v356)
                  {
                    if (v356 > 0xAAAAAAAAAAAAAAALL) {
                      goto LABEL_1378;
                    }
                    uint64_t v357 = (char *)operator new(24 * v356);
                  }
                  else
                  {
                    uint64_t v357 = 0;
                  }
                  int v358 = &v357[24 * v354];
                  *(void *)int v358 = 0;
                  *((void *)v358 + 1) = 0;
                  *((void *)v358 + 2) = 0;
                  if (v348 == v353)
                  {
                    int64x2_t v361 = vdupq_n_s64((unint64_t)v348);
                    int v359 = &v357[24 * v354];
                  }
                  else
                  {
                    int v359 = &v357[24 * v354];
                    do
                    {
                      long long v360 = *(_OWORD *)&v348[-1].__r_.__value_.__l.__data_;
                      *((void *)v359 - 1) = *((void *)&v348[-1].__r_.__value_.__l + 2);
                      *(_OWORD *)(v359 - 24) = v360;
                      v359 -= 24;
                      v348[-1].__r_.__value_.__l.__size_ = 0;
                      v348[-1].__r_.__value_.__r.__words[2] = 0;
                      v348[-1].__r_.__value_.__r.__words[0] = 0;
                      --v348;
                    }
                    while (v348 != v353);
                    int64x2_t v361 = *(int64x2_t *)v742;
                    unint64_t v349 = *v741;
                  }
                  int v350 = (std::string *)(v358 + 24);
                  *(void *)(v6 + 1704) = v359;
                  *(void *)(v6 + 1712) = v358 + 24;
                  *(int64x2_t *)&__p.__r_.__value_.__r.__words[1] = v361;
                  *(void *)(v6 + 1720) = &v357[24 * v356];
                  unint64_t v772 = v349;
                  __p.__r_.__value_.__r.__words[0] = v361.i64[0];
                  sub_1CBF4EE0C((uint64_t)&__p);
                  unint64_t v9 = v746;
                }
                else
                {
                  v348->__r_.__value_.__r.__words[0] = 0;
                  v348->__r_.__value_.__l.__size_ = 0;
                  int v350 = v348 + 1;
                  v348->__r_.__value_.__r.__words[2] = 0;
                }
                *(void *)(v6 + 1712) = v350;
                sub_1CC1D3108(v350 - 1, (std::string *)v774.__r_.__value_.__l.__data_, (std::string *)(v774.__r_.__value_.__r.__words[0] + 8 * LODWORD(v774.__r_.__value_.__r.__words[1])));
                LODWORD(v774.__r_.__value_.__r.__words[1]) = 0;
                char v351 = 1;
                unint64_t v7 = v347;
                uint64_t v8 = v744;
              }
              if (v762)
              {
                int v362 = v761;
                v761 = 0;
                if (v362) {
                  (*(void (**)(void *))(*(void *)v362 + 8))(v362);
                }
              }
              if ((v351 & 1) == 0) {
                goto LABEL_853;
              }
              break;
          }
        }
LABEL_1334:
        BOOL v62 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_1335:
        void *v7 = v62;
        break;
      case 0x16:
        llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKinds(*(llvm::BitstreamCursor ***)(v6 + 680), v7);
        goto LABEL_855;
      case 0x1A:
        llvm::BitstreamCursor::EnterSubBlock(v9, 0, 26, v7);
        if (*v7) {
          goto LABEL_855;
        }
        if (*(void *)(v6 + 1736))
        {
          unsigned int v64 = "Invalid multiple synchronization scope names blocks";
          goto LABEL_611;
        }
        v774.__r_.__value_.__r.__words[0] = (std::string::size_type)&v774.__r_.__value_.__r.__words[2];
        v774.__r_.__value_.__l.__size_ = 0x4000000000;
        while (1)
        {
          while (1)
          {
            sub_1CC1CA5F4((uint64_t)v9, 0, (uint64_t)&__p);
            if (__p.__r_.__value_.__s.__data_[8]) {
              goto LABEL_1334;
            }
            if (LODWORD(__p.__r_.__value_.__l.__data_) != 2) {
              break;
            }
            sub_1CC1C6524((uint64_t)v9, &v761);
            BOOL v62 = v761;
            if (__p.__r_.__value_.__s.__data_[8])
            {
              std::string::size_type v346 = __p.__r_.__value_.__r.__words[0];
              __p.__r_.__value_.__r.__words[0] = 0;
              if (v346) {
                (*(void (**)(std::string::size_type))(*(void *)v346 + 8))(v346);
              }
            }
            uint64_t v8 = v744;
            unint64_t v9 = v746;
            if (v62) {
              goto LABEL_1335;
            }
          }
          if (LODWORD(__p.__r_.__value_.__l.__data_) == 1) {
            break;
          }
          if (!LODWORD(__p.__r_.__value_.__l.__data_))
          {
LABEL_805:
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Malformed block";
            goto LABEL_806;
          }
          llvm::BitstreamCursor::readRecord(v9, SHIDWORD(__p.__r_.__value_.__r.__words[0]), (uint64_t)&v774, 0, (uint64_t)&v758);
          if (v759)
          {
            char v343 = 0;
            unint64_t v344 = v758;
            v758 = 0;
            void *v7 = v344;
          }
          else
          {
            if (v758 != 1)
            {
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid sync scope record";
              LOWORD(v773) = 259;
              sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&__p);
            }
            uint64_t v332 = &v772;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v772;
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1CDB15990;
            unint64_t v333 = (uint64_t *)v774.__r_.__value_.__r.__words[0];
            uint64_t v334 = LODWORD(v774.__r_.__value_.__r.__words[1]);
            if (LODWORD(v774.__r_.__value_.__r.__words[1]) >= 0x11) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            std::string::size_type v335 = 0;
            if (LODWORD(v774.__r_.__value_.__r.__words[1]))
            {
              unint64_t v336 = &v772;
              uint64_t v337 = 8 * LODWORD(v774.__r_.__value_.__r.__words[1]);
              do
              {
                uint64_t v338 = *v333++;
                *(unsigned char *)unint64_t v336 = v338;
                unint64_t v336 = (unint64_t *)((char *)v336 + 1);
                v337 -= 8;
              }
              while (v337);
              std::string::size_type v335 = __p.__r_.__value_.__l.__size_;
              uint64_t v332 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
            }
            __p.__r_.__value_.__l.__size_ = v335 + v334;
            uint64_t v339 = **(void **)(v6 + 424);
            uint64_t v340 = (llvm::StringMapImpl *)(v339 + 2608);
            LODWORD(v339) = *(_DWORD *)(v339 + 2620);
            v761 = v332;
            *(void *)&long long v762 = v335 + v334;
            BYTE8(v762) = v339;
            char v341 = *(unsigned char *)(*sub_1CC5ED9A0(v340, (unsigned __int8 *)v332, v335 + v334, (char *)&v762 + 8) + 8);
            uint64_t v342 = *(void *)(v6 + 1736);
            if ((unint64_t)(v342 + 1) > *(void *)(v6 + 1744)) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            *(unsigned char *)(*(void *)(v6 + 1728) + v342) = v341;
            ++*(void *)(v6 + 1736);
            LODWORD(v774.__r_.__value_.__r.__words[1]) = 0;
            unint64_t v9 = v746;
            if ((unint64_t *)__p.__r_.__value_.__l.__data_ != &v772) {
              free(__p.__r_.__value_.__l.__data_);
            }
            char v343 = 1;
          }
          if (v759)
          {
            int v345 = v758;
            v758 = 0;
            if (v345) {
              (*(void (**)(llvm::GlobalValue *))(*(void *)v345 + 8))(v345);
            }
          }
          if ((v343 & 1) == 0) {
            goto LABEL_853;
          }
        }
        if (!*(void *)(v6 + 1736))
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid empty synchronization scope names block";
LABEL_806:
          LOWORD(v773) = 259;
          sub_1CC1DDE58((int)v7, v8, (llvm::Twine *)&__p);
        }
LABEL_848:
        void *v7 = 0;
        break;
      default:
        goto LABEL_607;
    }
LABEL_853:
    if ((std::string::size_type *)v774.__r_.__value_.__l.__data_ != &v774.__r_.__value_.__r.__words[2]) {
      free(v774.__r_.__value_.__l.__data_);
    }
LABEL_855:
    if (*v7) {
      int v11 = 1;
    }
    else {
      int v11 = 2;
    }
LABEL_15:
    if (v754)
    {
      uint64_t v12 = v753;
      v753 = 0;
      if (v12) {
        (*(void (**)(void *))(*(void *)v12 + 8))(v12);
      }
    }
  }
  while ((v11 | 2) == 2);
  if (v755 != v757) {
    free(v755);
  }
}

void sub_1CC1EA0B4(uint64_t a1)
{
  if (!**(unsigned char **)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    **(unsigned char **)a1 = 1;
    uint64_t v3 = *(void *)(v2 + 432);
    uint64_t v6 = *(const char ***)(v3 + 216);
    uint64_t v4 = v3 + 216;
    uint64_t v5 = v6;
    char v7 = *(unsigned char *)(v4 + 287);
    if (v7 >= 0) {
      uint64_t v8 = (const char **)(v4 + 264);
    }
    else {
      uint64_t v8 = *(const char ***)(v4 + 264);
    }
    if (v7 >= 0) {
      size_t v9 = v7 & 0x7F;
    }
    else {
      size_t v9 = *(void *)(v4 + 272);
    }
    char v10 = *(unsigned char *)(v4 + 23);
    if (v10 >= 0) {
      int v11 = (const char **)v4;
    }
    else {
      int v11 = v5;
    }
    uint64_t v12 = *(void *)(v4 + 8);
    if (v10 >= 0) {
      uint64_t v13 = v10 & 0x7F;
    }
    else {
      uint64_t v13 = v12;
    }
    llvm::UpgradeDataLayoutString(v8, v9, v11, v13, (uint64_t)v29);
    if (v30 >= 0) {
      unint64_t v14 = v29;
    }
    else {
      unint64_t v14 = (void **)v29[0];
    }
    if (v30 >= 0) {
      unint64_t v15 = v30 & 0x7F;
    }
    else {
      unint64_t v15 = (unint64_t)v29[1];
    }
    llvm::DataLayout::reset(*(void *)(v2 + 432) + 272, v14, v15);
    uint64_t v16 = *(void *)(v2 + 432);
    uint64_t v19 = *(void *)(v16 + 216);
    uint64_t v17 = v16 + 216;
    uint64_t v18 = v19;
    char v20 = *(unsigned char *)(v17 + 23);
    if (v20 >= 0) {
      uint64_t v21 = v17;
    }
    else {
      uint64_t v21 = v18;
    }
    uint64_t v22 = *(void *)(v17 + 8);
    if (v20 >= 0) {
      uint64_t v23 = v20 & 0x7F;
    }
    else {
      uint64_t v23 = v22;
    }
    (**(void (***)(void **__return_ptr, void, uint64_t, uint64_t))(a1 + 16))(__p, *(void *)(*(void *)(a1 + 16) + 8), v21, v23);
    if (v28)
    {
      if (v27 >= 0) {
        std::string::size_type v24 = __p;
      }
      else {
        std::string::size_type v24 = (void **)__p[0];
      }
      if (v27 >= 0) {
        unint64_t v25 = v27 & 0x7F;
      }
      else {
        unint64_t v25 = (unint64_t)__p[1];
      }
      llvm::DataLayout::reset(*(void *)(v2 + 432) + 272, v24, v25);
      if (v28 && v27 < 0) {
        operator delete(__p[0]);
      }
    }
    if (v30 < 0) {
      operator delete(v29[0]);
    }
  }
}

void sub_1CC1EA204(void *a1, void *a2)
{
  sub_1CC1EA618(a1, a2);
  if (!*a1)
  {
    if (a2[159] != a2[160] || a2[162] != a2[163])
    {
      v35[0] = "Malformed global initializer set";
      __int16 v36 = 259;
      sub_1CC1DDE58((int)a1, (uint64_t)(a2 + 1), (llvm::Twine *)v35);
    }
    uint64_t v5 = a2[54];
    uint64_t v6 = v5 + 24;
    uint64_t v7 = *(void *)(v5 + 32);
    if (v7 != v5 + 24)
    {
      do
      {
        if (v7) {
          uint64_t v8 = (llvm::Function *)(v7 - 56);
        }
        else {
          uint64_t v8 = 0;
        }
        sub_1CC1F4DE8(a2[85], (uint64_t)v8);
        v35[0] = 0;
        int v9 = sub_1CC512D18(v8, (llvm::Function *)v35);
        uint64_t v10 = v35[0];
        if (v35[0]) {
          int v11 = (llvm::Function *)v35[0];
        }
        else {
          int v11 = v8;
        }
        uint64_t v12 = (llvm::LLVMContext *)*((unsigned int *)v11 + 9);
        if (v12) {
          *((void *)v11 + 14) = llvm::Intrinsic::getAttributes(**(llvm::Intrinsic ***)v11, v12);
        }
        if (v9)
        {
          unint64_t v34 = v8;
          sub_1CD4F8350(a2 + 180, &v34)[1] = v10;
        }
        else
        {
          uint64_t v13 = llvm::Intrinsic::remangleIntrinsicFunction(v8, v12);
          if ((_BYTE)v14)
          {
            unint64_t v34 = v8;
            sub_1CD4F8350(a2 + 183, &v34)[1] = v13;
          }
        }
        llvm::UpgradeFunctionAttributes(v8, v14);
        uint64_t v7 = *(void *)(v7 + 8);
      }
      while (v7 != v6);
      uint64_t v5 = a2[54];
    }
    uint64_t v15 = v5 + 8;
    uint64_t v16 = *(void *)(v5 + 16);
    if (v16 == v5 + 8)
    {
      uint64_t v19 = 0;
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      do
      {
        if (v16) {
          char v20 = (llvm *)(v16 - 56);
        }
        else {
          char v20 = 0;
        }
        uint64_t v21 = llvm::UpgradeGlobalVariable(v20, v4);
        if (v21)
        {
          uint64_t v22 = v21;
          if (v19 >= v17)
          {
            uint64_t v23 = ((char *)v19 - (char *)v18) >> 4;
            unint64_t v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 60) {
              abort();
            }
            if (v17 - v18 > v24) {
              unint64_t v24 = v17 - v18;
            }
            if ((unint64_t)((char *)v17 - (char *)v18) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v25 = v24;
            }
            if (v25 >> 60) {
              sub_1CB833614();
            }
            size_t v26 = (char *)operator new(16 * v25);
            char v27 = (llvm **)&v26[16 * v23];
            *char v27 = v20;
            v27[1] = (llvm *)v22;
            if (v19 == v18)
            {
              uint64_t v29 = (llvm::GlobalVariable **)&v26[16 * v23];
            }
            else
            {
              char v28 = &v26[16 * v23];
              do
              {
                uint64_t v29 = (llvm::GlobalVariable **)(v28 - 16);
                *((_OWORD *)v28 - 1) = *((_OWORD *)v19 - 1);
                v19 -= 2;
                v28 -= 16;
              }
              while (v19 != v18);
            }
            uint64_t v17 = (llvm **)&v26[16 * v25];
            uint64_t v19 = v27 + 2;
            if (v18) {
              operator delete(v18);
            }
            uint64_t v18 = v29;
          }
          else
          {
            *uint64_t v19 = v20;
            v19[1] = (llvm *)v21;
            v19 += 2;
          }
        }
        uint64_t v16 = *(void *)(v16 + 8);
      }
      while (v16 != v15);
      if (v18 != v19) {
        llvm::GlobalVariable::eraseFromParent(*v18);
      }
    }
    char v30 = a2 + 159;
    int v31 = (void *)a2[159];
    uint64_t v32 = (void **)(a2 + 162);
    v30[1] = 0;
    v30[2] = 0;
    *char v30 = 0;
    if (v31) {
      operator delete(v31);
    }
    int v33 = *v32;
    v32[1] = 0;
    v32[2] = 0;
    llvm::Value *v32 = 0;
    if (v33) {
      operator delete(v33);
    }
    *a1 = 0;
    if (v19) {
      operator delete(v19);
    }
  }
}

uint64_t sub_1CC1EA50C(void *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  llvm::BitstreamCursor::ReadBlockInfoBlock((llvm::BitstreamCursor *)(a2 + 24), 0, (uint64_t)&v12);
  if (v15)
  {
    uint64_t v5 = v12;
    *(void *)&long long v12 = 0;
    *a1 = v5;
  }
  else
  {
    if (!v14)
    {
      v8[0] = "Malformed block";
      __int16 v10 = 259;
      sub_1CC1DDE58((int)a1, a2, (llvm::Twine *)v8);
    }
    uint64_t v4 = v13;
    long long v7 = v12;
    uint64_t v13 = 0;
    long long v12 = 0uLL;
    char v9 = 1;
    sub_1CC1CB1A4((void **)a2);
    *(_OWORD *)a2 = v7;
    *(void *)(a2 + 16) = v4;
    memset(v8, 0, sizeof(v8));
    *a1 = 0;
    int v11 = (void **)v8;
    sub_1CC1CB314(&v11);
  }
  return sub_1CC1CB4C8((uint64_t)&v12);
}

void sub_1CC1EA618(void *a1, void *a2)
{
  uint64_t v3 = (uint64_t *)a2[159];
  uint64_t v4 = (uint64_t *)a2[160];
  *(_OWORD *)(a2 + 159) = 0u;
  a2[161] = 0;
  uint64_t v80 = (uint64_t *)a2[162];
  uint64_t v5 = (uint64_t *)a2[163];
  *((_OWORD *)a2 + 81) = 0u;
  a2[164] = 0;
  std::string __p = (void *)a2[165];
  a2[165] = 0;
  uint64_t v6 = (_DWORD *)a2[166];
  a2[167] = 0;
  a2[166] = 0;
  while (v3 != v4)
  {
    uint64_t v7 = *((unsigned int *)v4 - 2);
    v4 -= 2;
    uint64_t v8 = a2[77];
    if (v7 >= ((unint64_t)(a2[78] - v8) >> 5))
    {
      __int16 v10 = (_OWORD *)a2[160];
      unint64_t v11 = a2[161];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = (_OWORD *)a2[159];
        uint64_t v14 = v10 - v13;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 60) {
LABEL_115:
        }
          abort();
        uint64_t v16 = v11 - (void)v13;
        if (v16 >> 3 > v15) {
          unint64_t v15 = v16 >> 3;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          if (v17 >> 60) {
LABEL_116:
          }
            sub_1CB833614();
          uint64_t v18 = (char *)operator new(16 * v17);
        }
        else
        {
          uint64_t v18 = 0;
        }
        uint64_t v19 = &v18[16 * v14];
        *(_OWORD *)uint64_t v19 = *(_OWORD *)v4;
        char v20 = v19;
        if (v10 != v13)
        {
          do
          {
            *((_OWORD *)v20 - 1) = *(v10 - 1);
            v20 -= 16;
            --v10;
          }
          while (v10 != v13);
          __int16 v10 = (_OWORD *)a2[159];
        }
        a2[159] = v20;
        long long v12 = v19 + 16;
        a2[160] = v19 + 16;
        a2[161] = &v18[16 * v17];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *__int16 v10 = *(_OWORD *)v4;
        long long v12 = v10 + 1;
      }
      a2[160] = v12;
    }
    else
    {
      char v9 = *(unsigned __int8 **)(v8 + 32 * v7 + 16);
      if (!v9 || v9[16] >= 0x15u)
      {
LABEL_104:
        v82[0] = "Expected a constant";
        __int16 v83 = 259;
        sub_1CC1DDE58((int)a1, (uint64_t)(a2 + 1), (llvm::Twine *)v82);
      }
      llvm::GlobalVariable::setInitializer(*v4, (llvm::Constant *)v9);
    }
  }
  uint64_t v21 = v80;
  while (v80 != v5)
  {
    uint64_t v22 = *((unsigned int *)v5 - 2);
    v5 -= 2;
    uint64_t v23 = a2[77];
    if (v22 >= ((unint64_t)(a2[78] - v23) >> 5))
    {
      __int16 v36 = (_OWORD *)a2[163];
      unint64_t v37 = a2[164];
      if ((unint64_t)v36 >= v37)
      {
        int v39 = (_OWORD *)a2[162];
        uint64_t v40 = v36 - v39;
        unint64_t v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 60) {
          goto LABEL_115;
        }
        uint64_t v42 = v37 - (void)v39;
        if (v42 >> 3 > v41) {
          unint64_t v41 = v42 >> 3;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43)
        {
          if (v43 >> 60) {
            goto LABEL_116;
          }
          int v44 = (char *)operator new(16 * v43);
        }
        else
        {
          int v44 = 0;
        }
        unint64_t v45 = &v44[16 * v40];
        *(_OWORD *)unint64_t v45 = *(_OWORD *)v5;
        unint64_t v46 = v45;
        if (v36 != v39)
        {
          do
          {
            *((_OWORD *)v46 - 1) = *(v36 - 1);
            v46 -= 16;
            --v36;
          }
          while (v36 != v39);
          __int16 v36 = (_OWORD *)a2[162];
        }
        a2[162] = v46;
        size_t v38 = v45 + 16;
        a2[163] = v45 + 16;
        a2[164] = &v44[16 * v43];
        if (v36) {
          operator delete(v36);
        }
      }
      else
      {
        *__int16 v36 = *(_OWORD *)v5;
        size_t v38 = v36 + 1;
      }
      a2[163] = v38;
    }
    else
    {
      unint64_t v24 = *(llvm::detail::IEEEFloat **)(v23 + 32 * v22 + 16);
      if (!v24 || *((unsigned __int8 *)v24 + 16) >= 0x15u)
      {
LABEL_106:
        uint64_t v77 = (uint64_t)(a2 + 1);
        unint64_t v78 = "Expected a constant";
        goto LABEL_107;
      }
      uint64_t v25 = *v5;
      int v26 = *(unsigned __int8 *)(*v5 + 16);
      if (*v5) {
        BOOL v27 = v26 == 1;
      }
      else {
        BOOL v27 = 0;
      }
      if (v27)
      {
        if (*(void *)v24 != *(void *)v25)
        {
          uint64_t v77 = (uint64_t)(a2 + 1);
          unint64_t v78 = "Alias and aliasee types don't match";
          goto LABEL_107;
        }
        llvm::GlobalAlias::setAliasee(*v5, v24);
      }
      else
      {
        if (!v25 || v26 != 2)
        {
          uint64_t v77 = (uint64_t)(a2 + 1);
          unint64_t v78 = "Expected an alias or an ifunc";
LABEL_107:
          v82[0] = v78;
          __int16 v83 = 259;
          sub_1CC1DDE58((int)a1, v77, (llvm::Twine *)v82);
        }
        char v28 = (uint64_t **)llvm::PointerType::get(*(llvm::PointerType **)(v25 + 24), 0);
        uint64_t v29 = (llvm::PointerType *)llvm::FunctionType::get(v28, 0, 0, 0);
        char v30 = (llvm::Constant *)llvm::PointerType::get(v29, 0);
        if (*(llvm::Constant **)v24 != v30) {
          unint64_t v24 = sub_1CC56C0C0((llvm *)0x31, v24, v30, 0);
        }
        int v31 = (llvm::detail::IEEEFloat **)(v25 - 32);
        if (*(void *)(v25 - 32))
        {
          **(void **)(v25 - 16) = *(void *)(v25 - 24);
          uint64_t v32 = *(void *)(v25 - 24);
          if (v32) {
            *(void *)(v32 + 16) = *(void *)(v25 - 16);
          }
        }
        *int v31 = v24;
        if (v24)
        {
          uint64_t v35 = *((void *)v24 + 1);
          unint64_t v34 = (llvm::detail::IEEEFloat ***)((char *)v24 + 8);
          uint64_t v33 = v35;
          *(void *)(v25 - 24) = v35;
          if (v35) {
            *(void *)(v33 + 16) = v25 - 24;
          }
          *(void *)(v25 - 16) = v34;
          *unint64_t v34 = v31;
        }
      }
    }
  }
  __int16 v47 = __p;
  if (__p != (void *)v6)
  {
    do
    {
      int v48 = *(v6 - 4);
      if (v48)
      {
        uint64_t v49 = (v48 - 1);
        uint64_t v50 = a2[77];
        if (v49 < ((unint64_t)(a2[78] - v50) >> 5))
        {
          uint64_t v51 = *(void *)(v50 + 32 * v49 + 16);
          if (!v51 || *(unsigned __int8 *)(v51 + 16) >= 0x15u) {
            goto LABEL_106;
          }
          uint64_t v52 = *((void *)v6 - 3);
          sub_1CD5C0280((void *)v52, v51);
          *(_WORD *)(v52 + 18) |= 8u;
          *(v6 - 4) = 0;
        }
      }
      int v53 = *(v6 - 3);
      if (v53)
      {
        uint64_t v54 = (v53 - 1);
        uint64_t v55 = a2[77];
        if (v54 < ((unint64_t)(a2[78] - v55) >> 5))
        {
          uint64_t v56 = *(void *)(v55 + 32 * v54 + 16);
          if (!v56 || *(unsigned __int8 *)(v56 + 16) >= 0x15u) {
            goto LABEL_106;
          }
          uint64_t v57 = *((void *)v6 - 3);
          sub_1CC5BB180((void *)v57, v56);
          int v53 = 0;
          *(_WORD *)(v57 + 18) |= 2u;
          *(v6 - 3) = 0;
        }
      }
      uint64_t v58 = v6 - 6;
      int v59 = *(v6 - 2);
      if (v59)
      {
        uint64_t v60 = (v59 - 1);
        uint64_t v61 = a2[77];
        if (v60 >= ((unint64_t)(a2[78] - v61) >> 5)) {
          goto LABEL_82;
        }
        uint64_t v62 = *(void *)(v61 + 32 * v60 + 16);
        if (!v62 || *(unsigned __int8 *)(v62 + 16) >= 0x15u) {
          goto LABEL_104;
        }
        uint64_t v63 = *((void *)v6 - 3);
        sub_1CD5C0388((void *)v63, v62);
        *(_WORD *)(v63 + 18) |= 4u;
        *(v6 - 2) = 0;
        int v53 = *(v6 - 3);
      }
      if (*(v6 - 4) | v53)
      {
LABEL_82:
        unsigned int v64 = (void *)a2[166];
        unint64_t v65 = a2[167];
        if ((unint64_t)v64 >= v65)
        {
          uint64_t v68 = (void *)a2[165];
          unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * (v64 - v68) + 1;
          if (v69 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_115;
          }
          unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (void)v68) >> 3);
          if (2 * v70 > v69) {
            unint64_t v69 = 2 * v70;
          }
          if (v70 >= 0x555555555555555) {
            unint64_t v71 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v71 = v69;
          }
          if (v71)
          {
            if (v71 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_116;
            }
            uint64_t v72 = (char *)operator new(24 * v71);
          }
          else
          {
            uint64_t v72 = 0;
          }
          long long v73 = *(_OWORD *)v58;
          __int16 v74 = &v72[8 * (v64 - v68)];
          *((void *)v74 + 2) = v58[2];
          *(_OWORD *)__int16 v74 = v73;
          unint64_t v75 = v74;
          if (v64 != v68)
          {
            do
            {
              long long v76 = *(_OWORD *)(v64 - 3);
              *((void *)v75 - 1) = *(v64 - 1);
              *(_OWORD *)(v75 - 24) = v76;
              v75 -= 24;
              v64 -= 3;
            }
            while (v64 != v68);
            unsigned int v64 = (void *)a2[165];
          }
          a2[165] = v75;
          unint64_t v67 = v74 + 24;
          a2[166] = v74 + 24;
          a2[167] = &v72[24 * v71];
          if (v64) {
            operator delete(v64);
          }
        }
        else
        {
          long long v66 = *(_OWORD *)v58;
          v64[2] = *((void *)v6 - 1);
          *(_OWORD *)unsigned int v64 = v66;
          unint64_t v67 = v64 + 3;
        }
        a2[166] = v67;
      }
      uint64_t v6 = v58;
      __int16 v47 = __p;
      BOOL v27 = __p == v58;
      uint64_t v21 = v80;
    }
    while (!v27);
  }
  *a1 = 0;
  if (v47) {
    operator delete(v47);
  }
  if (v21) {
    operator delete(v21);
  }
  if (v3) {
    operator delete(v3);
  }
}

uint64_t sub_1CC1EACC0(uint64_t result, uint64_t a2, int *a3, uint64_t a4)
{
  if (!a4)
  {
    v6[0] = "Invalid version record";
    __int16 v7 = 259;
    sub_1CC1DDE58((int)&v8, a2, (llvm::Twine *)v6);
  }
  int v4 = *a3;
  if (*a3 >= 3)
  {
    v6[0] = "Invalid value";
    __int16 v7 = 259;
    sub_1CC1DDE58((int)&v5, a2, (llvm::Twine *)v6);
  }
  *(unsigned char *)(a2 + 384) = v4 == 2;
  *(unsigned char *)(result + 8) &= ~1u;
  *(_DWORD *)__n128 result = v4;
  return result;
}

void *sub_1CC1EAD80(void *result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v8 = a3;
  if ((unint64_t)(a3 - 1) >= 0x50)
  {
    *a4 = 0;
    v4[0] = "Unknown attribute kind (";
    v4[2] = &v8;
    __int16 v5 = 3075;
    v6[0] = v4;
    _OWORD v6[2] = ")";
    __int16 v7 = 770;
    sub_1CC1DDE58((int)result, a2 + 8, (llvm::Twine *)v6);
  }
  *a4 = dword_1CFAC6380[a3 - 1];
  _DWORD *result = 0;
  return result;
}

uint64_t sub_1CC1EAE0C(void *a1, uint64_t *a2, unsigned __int8 *a3, size_t a4)
{
  uint64_t v5 = llvm::StructType::create(a2, a3, a4);
  uint64_t v6 = v5;
  __int16 v7 = (uint64_t *)a1[221];
  unint64_t v8 = a1[222];
  if ((unint64_t)v7 >= v8)
  {
    __int16 v10 = (void *)a1[220];
    uint64_t v11 = v7 - v10;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      abort();
    }
    uint64_t v13 = v8 - (void)v10;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_1CB833614();
      }
      unint64_t v15 = (char *)operator new(8 * v14);
    }
    else
    {
      unint64_t v15 = 0;
    }
    uint64_t v16 = (uint64_t *)&v15[8 * v11];
    *uint64_t v16 = v6;
    char v9 = v16 + 1;
    if (v7 != v10)
    {
      do
      {
        uint64_t v17 = *--v7;
        *--uint64_t v16 = v17;
      }
      while (v7 != v10);
      __int16 v7 = (uint64_t *)a1[220];
    }
    a1[220] = v16;
    a1[221] = v9;
    a1[222] = &v15[8 * v14];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    uint64_t *v7 = v5;
    char v9 = v7 + 1;
  }
  a1[221] = v9;
  return v6;
}

uint64_t sub_1CC1EAF14(int a1)
{
  if ((a1 - 1) > 0x12) {
    return 0;
  }
  else {
    return dword_1CFAC64C0[a1 - 1];
  }
}

void sub_1CC1EAF38(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t sub_1CC1EAF44(uint64_t a1)
{
  sub_1CC1CB3C4((char **)(a1 + 64));
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    sub_1CC1CAA74(a1 + 40, v2);
    operator delete(*(void **)(a1 + 40));
  }
  return a1;
}

void sub_1CC1EAF94()
{
}

void *sub_1CC1EAFA8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F2608970;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC1EAFF0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2608970;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC1EB01C(uint64_t a1, unsigned int *a2)
{
  return sub_1CC1E22AC(*(void *)(a1 + 8), *a2);
}

void sub_1CC1EB028(uint64_t a1, int a2, const std::string::value_type *a3, size_t a4, int a5, const std::string::value_type *a6, std::string::size_type a7)
{
  char v9 = (int *)a3;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  llvm::GlobalValue::getGlobalIdentifier(a3, a4, a5, a6, a7, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = (int *)&__p;
  }
  else {
    p_p = (int *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t size = __p.__r_.__value_.__l.__size_;
  }
  long long v32 = xmmword_1CFAC4320;
  uint64_t v33 = 0;
  llvm::MD5::update((int *)&v32, p_p, size);
  unint64_t v14 = llvm::MD5::final((int *)&v32, v31);
  unint64_t v15 = *(void *)v31;
  unsigned int v16 = a5 - 7;
  unint64_t v17 = *(void *)v31;
  if (v16 <= 1)
  {
    long long v32 = xmmword_1CFAC4320;
    uint64_t v33 = 0;
    llvm::MD5::update((int *)&v32, v9, a4);
    unint64_t v14 = llvm::MD5::final((int *)&v32, v31);
    unint64_t v17 = *(void *)v31;
  }
  if (byte_1EBCC88C8)
  {
    uint64_t v18 = llvm::dbgs((llvm *)v14);
    uint64_t v19 = v18;
    uint64_t v20 = *((void *)v18 + 4);
    if ((unint64_t)(*((void *)v18 + 3) - v20) > 4)
    {
      *(unsigned char *)(v20 + 4) = 32;
      *(_DWORD *)uint64_t v20 = 1145656647;
      *((void *)v18 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v18, "GUID ", 5uLL);
    }
    sub_1CD098D14(v19, v15, 0, 0, 0);
    uint64_t v21 = (unsigned char *)*((void *)v19 + 4);
    if (*((unsigned char **)v19 + 3) == v21)
    {
      llvm::raw_ostream::write(v19, "(", 1uLL);
    }
    else
    {
      *uint64_t v21 = 40;
      ++*((void *)v19 + 4);
    }
    sub_1CD098D14(v19, v17, 0, 0, 0);
    uint64_t v22 = *((void *)v19 + 4);
    if ((unint64_t)(*((void *)v19 + 3) - v22) > 4)
    {
      *(unsigned char *)(v22 + 4) = 32;
      *(_DWORD *)uint64_t v22 = 1936269353;
      uint64_t v23 = (unsigned char *)(*((void *)v19 + 4) + 5);
      *((void *)v19 + 4) = v23;
    }
    else
    {
      llvm::raw_ostream::write(v19, ") is ", 5uLL);
      uint64_t v23 = (unsigned char *)*((void *)v19 + 4);
    }
    if (a4 <= *((void *)v19 + 3) - (void)v23)
    {
      if (a4)
      {
        memcpy(v23, v9, a4);
        uint64_t v23 = (unsigned char *)(*((void *)v19 + 4) + a4);
        *((void *)v19 + 4) = v23;
      }
    }
    else
    {
      llvm::raw_ostream::write(v19, (const char *)v9, a4);
      uint64_t v23 = (unsigned char *)*((void *)v19 + 4);
    }
    if (*((unsigned char **)v19 + 3) == v23)
    {
      llvm::raw_ostream::write(v19, "\n", 1uLL);
    }
    else
    {
      *uint64_t v23 = 10;
      ++*((void *)v19 + 4);
    }
  }
  uint64_t v24 = *(void *)(a1 + 416);
  if (!*(unsigned char *)(a1 + 384))
  {
    uint64_t v25 = (int *)sub_1CB906F34(*(uint64_t **)(v24 + 192), a4 + 1, 0);
    int v26 = v25;
    if (a4) {
      memcpy(v25, v9, a4);
    }
    *((unsigned char *)v26 + a4) = 0;
    char v9 = v26;
  }
  BOOL v27 = sub_1CD4ADB54(v24, v15);
  *((void *)v27 + 1) = v9;
  *((void *)v27 + 2) = a4;
  unint64_t v28 = (unint64_t)v27 & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(v24 + 133);
  LODWORD(v32) = a2;
  uint64_t v29 = sub_1CD4F84C8(a1 + 440, (int *)&v32);
  *((void *)v29 + 1) = v28;
  *((void *)v29 + 2) = v17;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1CC1EB358(char **a1, uint64_t a2, void *a3, unint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1CD4F8818((uint64_t)a1, a4);
  if (a4)
  {
    uint64_t v8 = a2 + 440;
    char v9 = &a3[a4];
    do
    {
      int v22 = *a3;
      uint64_t v10 = *((void *)sub_1CD4F84C8(v8, &v22) + 1);
      unint64_t v12 = a1[1];
      unint64_t v11 = (unint64_t)a1[2];
      if ((unint64_t)v12 >= v11)
      {
        unint64_t v14 = *a1;
        uint64_t v15 = (v12 - *a1) >> 3;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61) {
          abort();
        }
        uint64_t v17 = v11 - (void)v14;
        if (v17 >> 2 > v16) {
          unint64_t v16 = v17 >> 2;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          if (v18 >> 61) {
            sub_1CB833614();
          }
          uint64_t v19 = (char *)operator new(8 * v18);
        }
        else
        {
          uint64_t v19 = 0;
        }
        uint64_t v20 = &v19[8 * v15];
        *(void *)uint64_t v20 = v10;
        uint64_t v13 = v20 + 8;
        while (v12 != v14)
        {
          uint64_t v21 = *((void *)v12 - 1);
          v12 -= 8;
          *((void *)v20 - 1) = v21;
          v20 -= 8;
        }
        *a1 = v20;
        a1[2] = &v19[8 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(void *)unint64_t v12 = v10;
        uint64_t v13 = v12 + 8;
      }
      a1[1] = v13;
      ++a3;
    }
    while (a3 != v9);
  }
}

void sub_1CC1EB49C(char **a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6, int a7)
{
  unint64_t v9 = a4;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1CD4F88CC((uint64_t)a1, a4);
  if (v9)
  {
    unsigned int v13 = 0;
    uint64_t v14 = a2 + 440;
    if (a6) {
      int v15 = 2;
    }
    else {
      int v15 = 1;
    }
    int v37 = a6;
    int v38 = v15;
    uint64_t v35 = a2 + 440;
    uint64_t v36 = a3;
    do
    {
      int v39 = *(void *)(a3 + 8 * v13);
      unint64_t v16 = sub_1CD4F84C8(v14, &v39);
      if (a5)
      {
        LOBYTE(v17) = 0;
        LODWORD(v18) = 0;
        v13 += v38;
      }
      else if (a6)
      {
        LODWORD(v18) = 0;
        uint64_t v17 = *(void *)(a3 + 8 * ++v13);
      }
      else
      {
        LOBYTE(v17) = 0;
        if (a7) {
          uint64_t v18 = *(void *)(a3 + 8 * ++v13);
        }
        else {
          LODWORD(v18) = 0;
        }
      }
      uint64_t v19 = *((void *)v16 + 1);
      int v20 = v17 & 7 | (8 * v18);
      int v22 = a1[1];
      unint64_t v21 = (unint64_t)a1[2];
      if ((unint64_t)v22 >= v21)
      {
        unint64_t v24 = v9;
        uint64_t v25 = a5;
        int v26 = *a1;
        uint64_t v27 = (v22 - *a1) >> 4;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 60) {
          abort();
        }
        uint64_t v29 = v21 - (void)v26;
        if (v29 >> 3 > v28) {
          unint64_t v28 = v29 >> 3;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          if (v30 >> 60) {
            sub_1CB833614();
          }
          int v31 = (char *)operator new(16 * v30);
        }
        else
        {
          int v31 = 0;
        }
        long long v32 = &v31[16 * v27];
        *(void *)long long v32 = v19;
        *((_DWORD *)v32 + 2) = v20;
        uint64_t v33 = v32;
        a5 = v25;
        if (v22 != v26)
        {
          do
          {
            *((_OWORD *)v33 - 1) = *((_OWORD *)v22 - 1);
            v33 -= 16;
            v22 -= 16;
          }
          while (v22 != v26);
          int v22 = *a1;
        }
        unint64_t v9 = v24;
        uint64_t v23 = v32 + 16;
        *a1 = v33;
        a1[2] = &v31[16 * v30];
        uint64_t v14 = v35;
        a3 = v36;
        if (v22) {
          operator delete(v22);
        }
        a6 = v37;
      }
      else
      {
        *(void *)int v22 = v19;
        *((_DWORD *)v22 + 2) = v20;
        uint64_t v23 = v22 + 16;
      }
      a1[1] = v23;
      ++v13;
    }
    while (v13 != v9);
  }
}

uint64_t *sub_1CC1EB688(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[2];
  unint64_t v5 = result[1];
  if (v5 >= v4)
  {
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *result) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0x666666666666666) {
      abort();
    }
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *result) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x333333333333333) {
      unint64_t v8 = 0x666666666666666;
    }
    v14[4] = result + 2;
    if (v8 > 0x666666666666666) {
      sub_1CB833614();
    }
    uint64_t v10 = 5 * v8;
    unint64_t v11 = (char *)operator new(40 * v8);
    unint64_t v12 = &v11[40 * v7];
    v14[0] = v11;
    v14[1] = v12;
    long long v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)unint64_t v12 = *(_OWORD *)a2;
    *((_OWORD *)v12 + 1) = v13;
    *((void *)v12 + 4) = *(void *)(a2 + 32);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    v14[2] = v12 + 40;
    v14[3] = &v11[8 * v10];
    sub_1CD4AE5F0(v3, v14);
    uint64_t v6 = v3[1];
    __n128 result = (uint64_t *)sub_1CD4AE684((uint64_t)v14);
  }
  else
  {
    *(_OWORD *)unint64_t v5 = *(_OWORD *)a2;
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 16) = 0;
    *(_OWORD *)(v5 + 16) = *(_OWORD *)(a2 + 16);
    *(void *)(v5 + 32) = *(void *)(a2 + 32);
    uint64_t v6 = v5 + 40;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
  }
  v3[1] = v6;
  return result;
}

uint64_t sub_1CC1EB7C0(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 24);
  uint64_t v3 = *(void **)a1;
  if (v2)
  {
    *(void *)a1 = 0;
    if (v3) {
      (*(void (**)(void *))(*(void *)v3 + 8))(v3);
    }
  }
  else if (v3)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_1CC1EB82C(void *a1, void *a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  uint64_t v7 = *a2;
  *a2 = 0;
  if (result)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
    unint64_t v9 = *(uint64_t **)a3;
    *unint64_t v9 = v8;
    v9[1] = v10;
    uint64_t v11 = *(void *)(a3 + 8);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v7 + 24))(__p, v7);
    __int16 v15 = 260;
    uint64_t v14 = __p;
    llvm::LLVMContext::emitError(v11, (uint64_t)&v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    *a1 = 0;
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  else
  {
    *a1 = v7;
  }
  return result;
}

void sub_1CC1EB960()
{
}

uint64_t sub_1CC1EB9A8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1CC1EB9D8(std::error_category *a1)
{
  std::error_category::~error_category(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC1EBA10()
{
  return "llvm.bitcode";
}

void sub_1CC1EBA1C(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "Corrupted bitcode");
}

uint64_t sub_1CC1EBA40(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 56);
  uint64_t v3 = *(void **)a1;
  if (v2)
  {
    *(void *)a1 = 0;
    if (v3) {
      (*(void (**)(void *))(*(void *)v3 + 8))(v3);
    }
  }
  else if (v3)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

char **sub_1CC1EBAAC(char **a1)
{
  if ((_BYTE)a1[43])
  {
    uint64_t v3 = *a1;
    *a1 = 0;
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    sub_1CC1CB3C4(a1 + 8);
    uint64_t v2 = (uint64_t)a1[5];
    if (v2)
    {
      sub_1CC1CAA74((uint64_t)(a1 + 5), v2);
      operator delete(a1[5]);
    }
  }
  return a1;
}

void sub_1CC1EBB30(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t sub_1CC1EBB3C()
{
  char v3 = 0;
  unint64_t v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Print the global id for each value when reading the module summary";
  v1.n128_u64[1] = 66;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCC8848, "print-summary-global-ids", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC8848, &dword_1CB82C000);
}

void llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadModuleMetadataBlock(llvm::MetadataLoader::MetadataLoaderImpl *this@<X0>, llvm *a2@<X8>)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 256);
  sub_1CD4F95C4((uint64_t)this + 256, *((long long **)this + 25));
  uint64_t v7 = v65;
  uint64_t v63 = v65;
  uint64_t v64 = 0x4000000000;
  *((void *)this + 81) = 0;
  uint64_t v56 = (uint64_t **)((char *)this + 624);
  uint64_t v57 = v6;
  while (2)
  {
    while (2)
    {
      uint64_t v8 = 8 * *((void *)this + 34) - *((unsigned int *)this + 72);
      while (1)
      {
        sub_1CC1CA5F4((uint64_t)v6, 1, (uint64_t)&v59);
        if (v60) {
          break;
        }
        uint64_t v10 = (unsigned __int8 *)v59;
        if (v59 != 2)
        {
          int v11 = 0;
          goto LABEL_11;
        }
        unint64_t v9 = (llvm *)sub_1CC1C6524((uint64_t)v6, &v66);
        uint64_t v10 = v66;
        if (v60)
        {
          unint64_t v9 = (llvm *)v59;
          int v59 = 0;
          if (v9) {
            unint64_t v9 = (llvm *)(*(uint64_t (**)(llvm *))(*(void *)v9 + 8))(v9);
          }
        }
        int v11 = 1;
        uint64_t v6 = v57;
        if (v10) {
          goto LABEL_11;
        }
      }
      int v11 = 1;
      uint64_t v10 = (unsigned __int8 *)v59;
LABEL_11:
      if (v11)
      {
        if (v10) {
          goto LABEL_114;
        }
      }
      else
      {
        LODWORD(v2) = HIDWORD(v10);
      }
      if (!v11) {
        int v3 = (int)v10;
      }
      switch(v3)
      {
        case 0:
        case 2:
          int v59 = "Malformed block";
          __int16 v62 = 259;
          llvm::BitcodeErrorCategory(v9);
          operator new();
        case 1:
          *((unsigned char *)a2 + 8) &= ~1u;
          *(unsigned char *)a2 = 1;
          goto LABEL_115;
        case 3:
          uint64_t v12 = *((void *)this + 34);
          uint64_t v13 = *((unsigned int *)this + 72);
          llvm::BitstreamCursor::skipRecord(v6, v2, (uint64_t)&v59);
          int v14 = (int)v59;
          if (v60)
          {
            int v14 = 0;
            __int16 v15 = v59;
            if (v59)
            {
              *((unsigned char *)a2 + 8) |= 1u;
              *(void *)a2 = v15;
              goto LABEL_115;
            }
          }
          break;
        default:
          continue;
      }
      break;
    }
    int v3 = 3;
    int v16 = v14 - 1;
    unint64_t v17 = 8 * v12 - v13;
    switch(v16)
    {
      case 0:
      case 1:
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 36:
      case 39:
      case 40:
      case 43:
      case 44:
        *((void *)this + 76) = *((void *)this + 75);
        *((void *)this + 79) = *((void *)this + 78);
        *((unsigned char *)a2 + 8) &= ~1u;
        *(unsigned char *)a2 = 0;
        goto LABEL_115;
      case 3:
        *((void *)this + 34) = (v17 >> 3) & 0x1FFFFFFFFFFFFFF8;
        *((_DWORD *)this + 72) = 0;
        if ((v17 & 0x3F) != 0)
        {
          sub_1CC1CA844((uint64_t)v6, v17 & 0x3F, (uint64_t)&v59);
          if (v60)
          {
            unint64_t v21 = (unsigned __int8 *)v59;
            if (v59) {
              goto LABEL_107;
            }
          }
        }
        LODWORD(v64) = 0;
        llvm::BitstreamCursor::readRecord(v6, v2, (uint64_t)&v63, 0, (uint64_t)&v59);
        if (v60) {
          goto LABEL_106;
        }
        uint64_t v18 = (uint64_t *)v63;
        uint64_t v19 = v64;
        int v59 = &v61;
        long long v60 = xmmword_1CD96EEC0;
        if (v64 >= 9) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        uint64_t v38 = 0;
        if (v64)
        {
          int v39 = &v61;
          uint64_t v40 = 8 * v64;
          do
          {
            uint64_t v41 = *v18++;
            *(unsigned char *)int v39 = v41;
            int v39 = (uint64_t *)((char *)v39 + 1);
            v40 -= 8;
          }
          while (v40);
          uint64_t v38 = v60;
        }
        *(void *)&long long v60 = v38 + v19;
        sub_1CC1CA844((uint64_t)v6, *((_DWORD *)this + 73), (uint64_t)&v66);
        if ((v67 & 1) != 0
          || (LODWORD(v64) = 0,
              llvm::BitstreamCursor::readRecord(v6, (int)v66, (uint64_t)&v63, 0, (uint64_t)&v66),
              (v67 & 1) != 0))
        {
          char v51 = 0;
          uint64_t v52 = v66;
          *((unsigned char *)a2 + 8) |= 1u;
          *(void *)a2 = v52;
        }
        else
        {
          uint64_t v42 = v64;
          uint64_t inserted = llvm::Module::getOrInsertNamedMetadata(*((_DWORD **)this + 27), (unsigned __int8 *)v59, v60);
          if (v42)
          {
            uint64_t v44 = inserted;
            uint64_t v45 = 0;
            do
            {
              unint64_t v46 = sub_1CC1F2FD0((uint64_t)this, *(_DWORD *)((char *)v63 + v45));
              __int16 v47 = v46;
              if (v46)
              {
                switch(*v46)
                {
                  case 4u:
                  case 5u:
                  case 6u:
                  case 7u:
                  case 8u:
                  case 9u:
                  case 0xAu:
                  case 0xBu:
                  case 0xCu:
                  case 0xDu:
                  case 0xEu:
                  case 0xFu:
                  case 0x10u:
                  case 0x11u:
                  case 0x12u:
                  case 0x13u:
                  case 0x14u:
                  case 0x15u:
                  case 0x16u:
                  case 0x17u:
                  case 0x18u:
                  case 0x19u:
                  case 0x1Au:
                  case 0x1Bu:
                  case 0x1Cu:
                  case 0x1Du:
                  case 0x1Eu:
                  case 0x1Fu:
                  case 0x20u:
                  case 0x21u:
                  case 0x22u:
                    break;
                  default:
                    __int16 v47 = 0;
                    break;
                }
              }
              long long v66 = v47;
              uint64_t v48 = *(void *)(v44 + 48);
              uint64_t v49 = *(unsigned int *)(v48 + 8);
              if (v49 >= *(_DWORD *)(v48 + 12))
              {
                sub_1CC608328(*(void *)(v44 + 48), &v66);
              }
              else
              {
                uint64_t v50 = (unsigned __int8 **)(*(void *)v48 + 8 * v49);
                *uint64_t v50 = v47;
                if (v47)
                {
                  llvm::MetadataTracking::track((uint64_t)v50, v47, 2);
                  LODWORD(v49) = *(_DWORD *)(v48 + 8);
                }
                *(_DWORD *)(v48 + 8) = v49 + 1;
              }
              v45 += 8;
              uint64_t v6 = v57;
            }
            while (8 * v42 != v45);
          }
          char v51 = 1;
        }
        if (v59 != &v61) {
          free(v59);
        }
        int v3 = 3;
        if ((v51 & 1) == 0) {
          goto LABEL_115;
        }
        continue;
      case 34:
        *((void *)this + 34) = (v17 >> 3) & 0x1FFFFFFFFFFFFFF8;
        *((_DWORD *)this + 72) = 0;
        if ((v17 & 0x3F) != 0)
        {
          sub_1CC1CA844((uint64_t)v6, v17 & 0x3F, (uint64_t)&v59);
          if (v60)
          {
            unint64_t v21 = (unsigned __int8 *)v59;
            if (v59) {
              goto LABEL_107;
            }
          }
        }
        int v59 = 0;
        *(void *)&long long v60 = 0;
        LODWORD(v64) = 0;
        llvm::BitstreamCursor::readRecord(v6, v2, (uint64_t)&v63, (unsigned __int8 **)&v59, (uint64_t)&v66);
        if (v67)
        {
          unint64_t v21 = v66;
          goto LABEL_107;
        }
        sub_1CD4F9634((uint64_t)this + 600, *(unsigned int *)v63);
        long long v66 = (unsigned __int8 *)this;
        llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataStrings(v20, (int *)v63, v64, (const char *)v59, v60, (uint64_t (*)(uint64_t, const char *, unint64_t))sub_1CC1F505C, (uint64_t)&v66, &v58);
        unint64_t v21 = v58;
        if (v58) {
          goto LABEL_107;
        }
LABEL_31:
        int v3 = 3;
        continue;
      case 35:
        int v3 = 3;
        if (*((void *)this + 81)) {
          continue;
        }
        *((void *)this + 81) = v8;
        goto LABEL_31;
      case 37:
        *((void *)this + 34) = (v17 >> 3) & 0x1FFFFFFFFFFFFFF8;
        *((_DWORD *)this + 72) = 0;
        if ((v17 & 0x3F) != 0)
        {
          sub_1CC1CA844((uint64_t)v6, v17 & 0x3F, (uint64_t)&v59);
          if (v60)
          {
            unint64_t v21 = (unsigned __int8 *)v59;
            if (v59) {
              goto LABEL_107;
            }
          }
        }
        LODWORD(v64) = 0;
        llvm::BitstreamCursor::readRecord(v6, v2, (uint64_t)&v63, 0, (uint64_t)&v59);
        if (v60) {
          goto LABEL_106;
        }
        if (v64 != 2)
        {
          int v53 = "Invalid record";
LABEL_110:
          int v59 = v53;
          __int16 v62 = 259;
          sub_1CC1EC6B0(a2);
        }
        uint64_t v22 = 8 * *((void *)this + 34) - *((unsigned int *)this + 72);
        unint64_t v23 = *(void *)v63 + (*((void *)v63 + 1) << 32) + v22;
        *((void *)this + 34) = (v23 >> 3) & 0x1FFFFFFFFFFFFFF8;
        *((_DWORD *)this + 72) = 0;
        if ((v23 & 0x3F) != 0)
        {
          sub_1CC1CA844((uint64_t)v6, v23 & 0x3F, (uint64_t)&v59);
          if (v60)
          {
            unint64_t v21 = (unsigned __int8 *)v59;
            if (v59) {
              goto LABEL_107;
            }
          }
        }
        while (2)
        {
          sub_1CC1CA5F4((uint64_t)v6, 1, (uint64_t)&v59);
          if (v60)
          {
            uint64_t v10 = (unsigned __int8 *)v59;
LABEL_114:
            *((unsigned char *)a2 + 8) |= 1u;
            *(void *)a2 = v10;
            goto LABEL_115;
          }
          int v3 = (int)v59;
          if (v59 == 2)
          {
            sub_1CC1C6524((uint64_t)v6, &v66);
            uint64_t v10 = v66;
            if (v60)
            {
              unint64_t v24 = v59;
              int v59 = 0;
              if (v24) {
                (*(void (**)(void *))(*(void *)v24 + 8))(v24);
              }
            }
            uint64_t v6 = v57;
            if (v10) {
              goto LABEL_114;
            }
            continue;
          }
          break;
        }
        unint64_t v2 = (unint64_t)v59 >> 32;
        LODWORD(v64) = 0;
        llvm::BitstreamCursor::readRecord(v6, SHIDWORD(v59), (uint64_t)&v63, 0, (uint64_t)&v59);
        if ((v60 & 1) == 0)
        {
          sub_1CBF7ACFC((uint64_t)v56, v64);
          if (v64)
          {
            uint64_t v54 = a2;
            uint64_t v55 = v7;
            uint64_t v25 = (char *)v63;
            int v26 = (char *)v63 + 8 * v64;
            uint64_t v27 = (uint64_t *)*((void *)this + 79);
            do
            {
              v22 += *(void *)v25;
              unint64_t v28 = *((void *)this + 80);
              if ((unint64_t)v27 >= v28)
              {
                unint64_t v30 = *v56;
                uint64_t v31 = v27 - *v56;
                unint64_t v32 = v31 + 1;
                if ((unint64_t)(v31 + 1) >> 61) {
                  abort();
                }
                uint64_t v33 = v28 - (void)v30;
                if (v33 >> 2 > v32) {
                  unint64_t v32 = v33 >> 2;
                }
                if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v34 = v32;
                }
                if (v34)
                {
                  if (v34 >> 61) {
                    sub_1CB833614();
                  }
                  uint64_t v35 = (char *)operator new(8 * v34);
                }
                else
                {
                  uint64_t v35 = 0;
                }
                uint64_t v36 = (uint64_t *)&v35[8 * v31];
                *uint64_t v36 = v22;
                uint64_t v29 = v36 + 1;
                while (v27 != v30)
                {
                  uint64_t v37 = *--v27;
                  *--uint64_t v36 = v37;
                }
                *((void *)this + 78) = v36;
                *((void *)this + 79) = v29;
                *((void *)this + 80) = &v35[8 * v34];
                if (v30) {
                  operator delete(v30);
                }
                uint64_t v6 = v57;
              }
              else
              {
                *uint64_t v27 = v22;
                uint64_t v29 = v27 + 1;
              }
              *((void *)this + 79) = v29;
              v25 += 8;
              uint64_t v27 = v29;
            }
            while (v25 != v26);
            a2 = v54;
            uint64_t v7 = v55;
          }
          continue;
        }
LABEL_106:
        unint64_t v21 = (unsigned __int8 *)v59;
LABEL_107:
        *((unsigned char *)a2 + 8) |= 1u;
        *(void *)a2 = v21;
LABEL_115:
        if (v63 != v7) {
          free(v63);
        }
        return;
      case 38:
        int v53 = "Corrupted Metadata block";
        goto LABEL_110;
      default:
        continue;
    }
  }
}

void sub_1CC1EC5A8(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  char v4 = *(unsigned char *)(a1 + 8);
  while (1)
  {
    sub_1CC1CA5F4(a2, 1, (uint64_t)&v9);
    if (v10) {
      break;
    }
    uint64_t v5 = v9;
    if (v9 != 2)
    {
      *(unsigned char *)(a1 + 8) = v4 & 0xFE;
      goto LABEL_5;
    }
    sub_1CC1C6524(a2, &v8);
    uint64_t v6 = v8;
    if (v8)
    {
      v4 |= 1u;
      *(unsigned char *)(a1 + 8) = v4;
      *(void *)a1 = v6;
    }
    if (v10)
    {
      uint64_t v7 = v9;
      uint64_t v9 = 0;
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
    }
    if (v6) {
      return;
    }
  }
  *(unsigned char *)(a1 + 8) = v4 | 1;
  uint64_t v5 = v9;
LABEL_5:
  *(void *)a1 = v5;
}

void sub_1CC1EC6B0(llvm *a1)
{
}

llvm *llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataStrings@<X0>(llvm *result@<X0>, int *a2@<X1>, uint64_t a3@<X2>, const char *a4@<X3>, unint64_t a5@<X4>, uint64_t (*a6)(uint64_t, const char *, unint64_t)@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a3 != 2)
  {
    uint64_t v25 = "Invalid record: metadata strings layout";
    goto LABEL_31;
  }
  int v10 = *a2;
  if (!*a2)
  {
    uint64_t v25 = "Invalid record: metadata strings with no strings";
    goto LABEL_31;
  }
  unint64_t v11 = a2[2];
  unint64_t v12 = a5 - v11;
  if (a5 < v11)
  {
    uint64_t v25 = "Invalid record: metadata strings corrupt offset";
LABEL_31:
    int v26 = v25;
    LOWORD(v30) = 259;
    llvm::BitcodeErrorCategory(result);
    operator new();
  }
  int v26 = a4;
  unint64_t v27 = v11;
  __int16 v15 = &a4[v11];
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  int v30 = 0;
  do
  {
    if (v30) {
      BOOL v16 = 1;
    }
    else {
      BOOL v16 = v27 > v28;
    }
    if (!v16)
    {
      unint64_t v23 = "Invalid record: metadata strings bad length";
      goto LABEL_26;
    }
    uint64_t result = (llvm *)sub_1CC1CA844((uint64_t)&v26, 6u, (uint64_t)&v31);
    if (v32)
    {
LABEL_24:
      uint64_t v22 = v31;
      *a8 = v31;
      if (v22) {
        return result;
      }
      unint64_t v19 = 0;
      unint64_t v8 = 0;
    }
    else
    {
      if ((v31 & 0x20) != 0)
      {
        unsigned int v21 = 0;
        LODWORD(v18) = v31 & 0x1F;
        do
        {
          if (v21 >= 0x1B)
          {
            *(void *)&v35.__val_ = std::generic_category();
            v35.__cat_ = (const std::error_category *)"Unterminated VBR";
            llvm::createStringError((llvm *)0x5C, v35, v24);
          }
          uint64_t result = (llvm *)sub_1CC1CA844((uint64_t)&v26, 6u, (uint64_t)&v31);
          if (v32) {
            goto LABEL_24;
          }
          unint64_t v18 = ((v31 & 0x1F) << (v21 + 5)) | v18;
          v21 += 5;
        }
        while ((v31 & 0x20) != 0);
        unint64_t v17 = v8 & 0xFFFFFFFF00000000;
      }
      else
      {
        unint64_t v17 = v31;
        unint64_t v18 = v8 & 0xFFFFFFFF00000000;
      }
      unint64_t v8 = v17 | v18;
      unint64_t v19 = v17 | v18;
      *a8 = 0;
    }
    BOOL v20 = v12 >= v19;
    v12 -= v19;
    if (!v20)
    {
      unint64_t v23 = "Invalid record: metadata strings truncated chars";
LABEL_26:
      uint64_t v31 = v23;
      __int16 v33 = 259;
      llvm::BitcodeErrorCategory(result);
      operator new();
    }
    uint64_t result = (llvm *)a6(a7, v15, v19);
    v15 += v19;
    --v10;
  }
  while (v10);
  *a8 = 0;
  return result;
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseGlobalObjectAttachment(unsigned __int8 *a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  if (a4)
  {
    uint64_t v9 = (uint64_t)a1;
    for (unsigned int i = 0; i != a4; i += 2)
    {
      uint64_t v11 = *(void *)(v9 + 944);
      uint64_t v12 = *(unsigned int *)(v9 + 960);
      if (v12)
      {
        uint64_t v13 = *(void *)(a3 + 8 * i);
        LODWORD(v14) = (v12 - 1) & (37 * v13);
        __int16 v15 = (int *)(v11 + 8 * v14);
        int v16 = *v15;
        if (*v15 == v13) {
          goto LABEL_5;
        }
        int v17 = 1;
        while (v16 != -1)
        {
          int v18 = v14 + v17++;
          uint64_t v14 = v18 & (v12 - 1);
          int v16 = *(_DWORD *)(v11 + 8 * v14);
          if (v16 == v13)
          {
            __int16 v15 = (int *)(v11 + 8 * v14);
            goto LABEL_5;
          }
        }
      }
      __int16 v15 = (int *)(v11 + 8 * v12);
LABEL_5:
      if ((int *)(v11 + 8 * v12) == v15
        || (a1 = sub_1CC1F263C(v9, *(void *)(a3 + 8 * (i | 1)))) == 0
        || *a1 - 4 >= 0x1F)
      {
        llvm::BitcodeErrorCategory((llvm *)a1);
        operator new();
      }
      llvm::Value::addMetadata(a2, v15[1], (llvm::MDNode *)a1);
    }
  }
  *a5 = 0;
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadata(llvm::MetadataLoader::MetadataLoaderImpl *this@<X0>, int a2@<W1>, void **a3@<X8>)
{
  LODWORD(v3) = a2;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if ((a2 & 1) == 0 && *((_DWORD *)this + 6) >= 2u)
  {
    int v30 = "Invalid metadata: fwd refs into function blocks";
    v32[8] = 259;
    llvm::BitcodeErrorCategory(this);
    operator new();
  }
  uint64_t v6 = *((void *)this + 25);
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = *(unsigned int *)(v6 + 32);
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)v6, 0, 15, a3);
  if (!*a3)
  {
    int v30 = v32;
    uint64_t v31 = 0x4000000000;
    memset(v24, 0, sizeof(v24));
    if (!v3 || !*((unsigned char *)this + 972) || *((_DWORD *)this + 2) || byte_1EBCC8A48)
    {
LABEL_11:
      unsigned int v22 = *((_DWORD *)this + 2);
      while (1)
      {
        uint64_t v9 = *((void *)this + 25);
        while (1)
        {
          sub_1CC1CA5F4(v9, 0, (uint64_t)&v25);
          if (v26) {
            break;
          }
          int v11 = (int)v25;
          if (v25 != 2)
          {
            unint64_t v3 = (unint64_t)v25 >> 32;
            *a3 = 0;
            LODWORD(v7) = v11;
            goto LABEL_21;
          }
          sub_1CC1C6524(v9, &v28);
          uint64_t v12 = v28;
          if (v26)
          {
            uint64_t v13 = v25;
            uint64_t v25 = 0;
            if (v13) {
              (*(void (**)(const char *))(*(void *)v13 + 8))(v13);
            }
          }
          if (v12)
          {
            *a3 = v12;
            goto LABEL_35;
          }
        }
        int v16 = v25;
        *a3 = v25;
        if (v16) {
          goto LABEL_35;
        }
LABEL_21:
        switch(v7)
        {
          case 2:
LABEL_32:
            uint64_t v25 = "Malformed block";
            __int16 v27 = 259;
            llvm::BitcodeErrorCategory(v10);
            operator new();
          case 1:
            sub_1CC1ED0A4((uint64_t)this, (llvm::MDNode *)v24);
            sub_1CC1F3C34((uint64_t)this);
            sub_1CC1F3CE8((uint64_t)this);
            *a3 = 0;
            goto LABEL_35;
          case 0:
            goto LABEL_32;
        }
        LODWORD(v31) = 0;
        uint64_t v25 = 0;
        unint64_t v26 = 0;
        llvm::BitstreamCursor::readRecord(*((void **)this + 25), v3, (uint64_t)&v30, (unsigned __int8 **)&v25, (uint64_t)&v28);
        if (v29) {
          break;
        }
        sub_1CC1EDA0C((llvm *)a3, (uint64_t)this, (unsigned int *)&v30, (int)v28, (uint64_t)v24, v25, v26, &v22);
        uint64_t v14 = *a3;
        if (v29)
        {
          __int16 v15 = v28;
          unint64_t v28 = 0;
          if (v15) {
            (*(void (**)(void *))(*(void *)v15 + 8))(v15);
          }
        }
        if (v14) {
          goto LABEL_35;
        }
      }
      *a3 = v28;
      goto LABEL_35;
    }
    llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadModuleMetadataBlock(this, (llvm *)&v28);
    if (v29) {
      goto LABEL_47;
    }
    if (!(_BYTE)v28) {
      goto LABEL_11;
    }
    sub_1CC1F3A70((uint64_t)this, ((*((void *)this + 79) - *((void *)this + 78)) >> 3)+ ((*((void *)this + 76) - *((void *)this + 75)) >> 4));
    llvm::MetadataLoader::MetadataLoaderImpl::loadGlobalDeclAttachments((uint64_t)this, &v25);
    sub_1CD452AF8(&v28, &v25);
    if (v26)
    {
      int v17 = v25;
      uint64_t v25 = 0;
      if (v17) {
        (*(void (**)(const char *))(*(void *)v17 + 8))(v17);
      }
    }
    if (v29)
    {
LABEL_47:
      unint64_t v19 = v28;
      unint64_t v28 = 0;
      *a3 = v19;
    }
    else
    {
      unint64_t v18 = 8 * v7 - v8;
      sub_1CC1ED0A4((uint64_t)this, (llvm::MDNode *)v24);
      sub_1CC1F3C34((uint64_t)this);
      sub_1CC1F3CE8((uint64_t)this);
      sub_1CC1ED94C(*((void *)this + 25));
      *((void *)this + 34) = (v18 >> 3) & 0x1FFFFFFFFFFFFFF8;
      *((_DWORD *)this + 72) = 0;
      if ((v18 & 0x3F) == 0 || (sub_1CC1CA844((uint64_t)this + 256, v18 & 0x3F, (uint64_t)&v25), (v26 & 1) == 0))
      {
        *a3 = 0;
        goto LABEL_45;
      }
      unsigned int v21 = v25;
      *a3 = v25;
      if (!v21)
      {
LABEL_45:
        sub_1CC1C6524(*((void *)this + 25), &v25);
        if (v25)
        {
          unint64_t v23 = v25;
          uint64_t v25 = 0;
          sub_1CD4515D0(&v23);
          if (v23) {
            (*(void (**)(void *))(*v23 + 8))(v23);
          }
          *a3 = 0;
          if (v25) {
            (*(void (**)(char *))(*(void *)v25 + 8))(v25);
          }
        }
        else
        {
          *a3 = 0;
        }
      }
    }
    if (v29)
    {
      BOOL v20 = v28;
      unint64_t v28 = 0;
      if (v20) {
        (*(void (**)(void *))(*(void *)v20 + 8))(v20);
      }
    }
LABEL_35:
    sub_1CC1F3F40((uint64_t)v24);
    if (v30 != v32) {
      free(v30);
    }
  }
}

uint64_t sub_1CC1ED0A4(uint64_t a1, llvm::MDNode *a2)
{
  uint64_t v2 = (uint64_t)a2;
  char v4 = (_DWORD *)(a1 + 24);
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  unsigned int v110 = 0;
  while (1)
  {
    uint64_t v5 = *(void *)(v2 + 8);
    if (*(void *)(v2 + 16) != v5)
    {
      unint64_t v6 = *(void *)(v2 + 32);
      uint64_t v7 = (void *)(v5 + 8 * (v6 >> 8));
      uint64_t v8 = *v7 + 16 * v6;
      uint64_t v9 = *(void *)(v5 + (((*(void *)(v2 + 40) + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*(unsigned char *)(v2 + 40) + v6);
      while (v8 != v9)
      {
        uint64_t v10 = *(unsigned int *)(v8 + 4);
        LODWORD(v111[0]) = v10;
        if (*(_DWORD *)(a1 + 8) > v10 && (int v11 = *(unsigned __int8 **)(*(void *)a1 + 8 * v10)) != 0)
        {
          if (*v11 - 4 <= 0x1E && (v11[1] & 0x7F) == 2)
          {
            if (!v110) {
              goto LABEL_34;
            }
            unsigned int v12 = (v110 - 1) & (37 * v10);
            uint64_t v13 = (int *)&v108[v12];
            int v14 = *v13;
            if (v10 != *v13)
            {
              __int16 v15 = 0;
              int v16 = 1;
              while (v14 != -1)
              {
                if (v15) {
                  BOOL v17 = 0;
                }
                else {
                  BOOL v17 = v14 == -2;
                }
                if (v17) {
                  __int16 v15 = v13;
                }
                unsigned int v18 = v12 + v16++;
                unsigned int v12 = v18 & (v110 - 1);
                uint64_t v13 = (int *)&v108[v12];
                int v14 = *v13;
                if (v10 == *v13) {
                  goto LABEL_36;
                }
              }
              goto LABEL_31;
            }
          }
        }
        else
        {
          if (!v110)
          {
LABEL_34:
            unint64_t v24 = 0;
            goto LABEL_35;
          }
          unsigned int v19 = (v110 - 1) & (37 * v10);
          uint64_t v13 = (int *)&v108[v19];
          int v20 = *v13;
          if (v10 != *v13)
          {
            __int16 v15 = 0;
            int v21 = 1;
            while (v20 != -1)
            {
              if (v15) {
                BOOL v22 = 0;
              }
              else {
                BOOL v22 = v20 == -2;
              }
              if (v22) {
                __int16 v15 = v13;
              }
              unsigned int v23 = v19 + v21++;
              unsigned int v19 = v23 & (v110 - 1);
              uint64_t v13 = (int *)&v108[v19];
              int v20 = *v13;
              if (v10 == *v13) {
                goto LABEL_36;
              }
            }
LABEL_31:
            if (v15) {
              unint64_t v24 = v15;
            }
            else {
              unint64_t v24 = v13;
            }
LABEL_35:
            uint64_t v25 = sub_1CBB29C30((uint64_t)&v108, (uint64_t)v111, v111, v24);
            *uint64_t v25 = v111[0];
          }
        }
LABEL_36:
        v8 += 16;
        if (v8 - *v7 == 4096)
        {
          uint64_t v26 = v7[1];
          ++v7;
          uint64_t v8 = v26;
        }
      }
    }
    if (!v109) {
      break;
    }
    __int16 v27 = v108;
    uint64_t v28 = v110;
    char v29 = &v108[v110];
    if (v110)
    {
      uint64_t v30 = 0;
      while (v108[v30] >= 0xFFFFFFFE)
      {
        if (v110 == ++v30)
        {
          uint64_t v31 = &v108[v110];
          goto LABEL_48;
        }
      }
      uint64_t v31 = &v108[v30];
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v31 = v108;
    }
LABEL_48:
    char v32 = &v27[v28];
LABEL_49:
    while (v31 != v32)
    {
      unsigned int v34 = *v31;
      uint64_t v33 = v31 + 1;
      sub_1CC1F2CC8(a1, v34, v2);
      while (v33 != v29)
      {
        unsigned int v35 = *v33++;
        if (v35 <= 0xFFFFFFFD)
        {
          uint64_t v31 = v33 - 1;
          goto LABEL_49;
        }
      }
      uint64_t v31 = v29;
    }
    sub_1CBB2A024(&v108);
    if (*v4 >= 2u)
    {
      do
      {
        uint64_t v36 = sub_1CD4FA050(v4);
        sub_1CC1F2CC8(a1, *v36, v2);
      }
      while (*(_DWORD *)(a1 + 24) > 1u);
    }
  }
  if (*v4 >= 2u)
  {
    __int16 v27 = v108;
    uint64_t v28 = v110;
    uint64_t v31 = &v108[v110];
    char v29 = v31;
    goto LABEL_48;
  }
  uint64_t v38 = (unsigned int *)(a1 + 120);
  unsigned int v37 = *(_DWORD *)(a1 + 120);
  if (v37 <= 1)
  {
    if (v37)
    {
      uint64_t v39 = a1 + 128;
      uint64_t v40 = 1;
    }
    else
    {
      uint64_t v39 = *(void *)(a1 + 128);
      uint64_t v40 = *(unsigned int *)(a1 + 136);
    }
    uint64_t v41 = (uint64_t *)(v39 + 16 * v40);
    int v42 = *(_DWORD *)(a1 + 120);
    unint64_t v43 = v41;
    goto LABEL_62;
  }
  if (v37)
  {
    uint64_t v44 = (uint64_t *)(a1 + 128);
    unint64_t v43 = (uint64_t *)(a1 + 144);
LABEL_185:
    int v42 = *(_DWORD *)(a1 + 120) & 1;
    uint64_t v41 = v44;
    while ((*v41 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v41 += 2;
      if (v41 == v43)
      {
        uint64_t v41 = v43;
        break;
      }
    }
LABEL_62:
    if (!v42)
    {
      uint64_t v44 = *(uint64_t **)(a1 + 128);
      LODWORD(v45) = *(_DWORD *)(a1 + 136);
      goto LABEL_65;
    }
    uint64_t v44 = (uint64_t *)(a1 + 128);
    uint64_t v45 = 1;
  }
  else
  {
    uint64_t v44 = *(uint64_t **)(a1 + 128);
    uint64_t v45 = *(unsigned int *)(a1 + 136);
    if (v45)
    {
      unint64_t v43 = &v44[2 * v45];
      goto LABEL_185;
    }
    unint64_t v43 = *(uint64_t **)(a1 + 128);
    uint64_t v41 = v43;
LABEL_65:
    uint64_t v45 = v45;
  }
  unint64_t v46 = &v44[2 * v45];
  if (v41 != v46)
  {
    do
    {
      sub_1CD4FA0C4((uint64_t)v111, a1 + 96, v41, v41 + 1);
      __int16 v47 = v41 + 2;
      uint64_t v41 = v43;
      if (v47 != v43)
      {
        uint64_t v41 = v47;
        while ((*v41 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v41 += 2;
          if (v41 == v43)
          {
            uint64_t v41 = v43;
            break;
          }
        }
      }
    }
    while (v41 != v46);
    unsigned int v37 = *v38;
  }
  if (v37 > 1 || *(_DWORD *)(a1 + 124))
  {
    if (v37)
    {
      unsigned int v99 = (void *)(a1 + 128);
      unint64_t v100 = (void *)(a1 + 144);
    }
    else
    {
      uint64_t v98 = *(unsigned int *)(a1 + 136);
      if (((2 * v37) & 0xFFFFFFFC) < v98 && v98 >= 0x41)
      {
        sub_1CD4FA538((void *)(a1 + 120));
        goto LABEL_76;
      }
      if (!v98)
      {
        int v106 = 0;
LABEL_174:
        *(_DWORD *)(a1 + 120) = v106;
        *(_DWORD *)(a1 + 124) = 0;
        goto LABEL_76;
      }
      unsigned int v99 = *(void **)(a1 + 128);
      unint64_t v100 = &v99[2 * v98];
    }
    do
    {
      *unsigned int v99 = -4096;
      v99 += 2;
    }
    while (v99 != v100);
    int v106 = *v38 & 1;
    goto LABEL_174;
  }
LABEL_76:
  uint64_t v48 = *(unsigned int *)(a1 + 152);
  if (v48)
  {
    uint64_t v49 = 16 * v48;
    uint64_t v50 = (uint64_t *)(*(void *)(a1 + 144) + 8);
    do
    {
      uint64_t v51 = *v50;
      uint64_t v52 = sub_1CC1F4090(a1, *(v50 - 1));
      uint64_t v53 = *(void *)(v51 + 16);
      if ((v53 & 4) != 0) {
        llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v53 & 0xFFFFFFFFFFFFFFF8), v52);
      }
      v50 += 2;
      v49 -= 16;
    }
    while (v49);
    uint64_t v54 = *(unsigned int *)(a1 + 152);
    if (v54)
    {
      uint64_t v55 = 16 * v54;
      uint64_t v56 = *(void *)(a1 + 144) - 16;
      do
      {
        sub_1CD4FA988(v56 + v55, a2);
        v55 -= 16;
      }
      while (v55);
    }
  }
  uint64_t v57 = (unsigned int *)(a1 + 72);
  *(_DWORD *)(a1 + 152) = 0;
  unsigned int v58 = *(_DWORD *)(a1 + 72);
  if (v58 <= 1)
  {
    if (v58)
    {
      uint64_t v59 = a1 + 80;
      uint64_t v60 = 1;
    }
    else
    {
      uint64_t v59 = *(void *)(a1 + 80);
      uint64_t v60 = *(unsigned int *)(a1 + 88);
    }
    uint64_t v61 = (uint64_t *)(v59 + 16 * v60);
    int v62 = *(_DWORD *)(a1 + 72);
    uint64_t v63 = v61;
    goto LABEL_88;
  }
  if (v58)
  {
    long long v66 = (uint64_t *)(a1 + 80);
    uint64_t v63 = (uint64_t *)(a1 + 96);
LABEL_190:
    int v62 = *(_DWORD *)(a1 + 72) & 1;
    uint64_t v61 = v66;
    while ((*v61 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v61 += 2;
      if (v61 == v63)
      {
        uint64_t v61 = v63;
        break;
      }
    }
LABEL_88:
    if (v62)
    {
      uint64_t v64 = (uint64_t *)(a1 + 80);
      uint64_t v65 = 1;
    }
    else
    {
      uint64_t v64 = *(uint64_t **)(a1 + 80);
      uint64_t v65 = *(unsigned int *)(a1 + 88);
    }
    long long v66 = v63;
  }
  else
  {
    long long v66 = *(uint64_t **)(a1 + 80);
    uint64_t v105 = *(unsigned int *)(a1 + 88);
    if (v105)
    {
      uint64_t v63 = &v66[2 * v105];
      goto LABEL_190;
    }
    uint64_t v65 = 0;
    uint64_t v61 = *(uint64_t **)(a1 + 80);
    uint64_t v64 = v61;
  }
  char v67 = &v64[2 * v65];
  if (v61 != v67)
  {
    while (2)
    {
      uint64_t v68 = *v61;
      v111[0] = 0;
      if ((sub_1CD4FA190(a1 + 96, v68, v111) & 1) != 0 && (a2 = *(llvm::MDNode **)(v111[0] + 8)) != 0)
      {
        uint64_t v69 = *(void *)(v61[1] + 16);
        if ((v69 & 4) == 0)
        {
LABEL_100:
          unint64_t v70 = v61 + 2;
          uint64_t v61 = v66;
          if (v70 != v66)
          {
            uint64_t v61 = v70;
            while ((*v61 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v61 += 2;
              if (v61 == v66)
              {
                uint64_t v61 = v66;
                break;
              }
            }
          }
          if (v61 == v67)
          {
            unsigned int v58 = *v57;
            goto LABEL_107;
          }
          continue;
        }
      }
      else
      {
        uint64_t v69 = *(void *)(v61[1] + 16);
        if ((v69 & 4) == 0) {
          goto LABEL_100;
        }
        a2 = (llvm::MDNode *)*v61;
      }
      break;
    }
    llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v69 & 0xFFFFFFFFFFFFFFF8), a2);
    goto LABEL_100;
  }
LABEL_107:
  if (v58 > 1 || *(_DWORD *)(a1 + 76))
  {
    if ((v58 & 1) == 0)
    {
      unsigned int v101 = (2 * v58) & 0xFFFFFFFC;
      uint64_t v102 = *(unsigned int *)(a1 + 88);
      if (v101 < v102 && v102 >= 0x41)
      {
        sub_1CD4FA9CC(a1 + 72, a2);
      }
      else
      {
        if (v102)
        {
          uint64_t v103 = *(void **)(a1 + 80);
          unint64_t v104 = &v103[2 * v102];
          goto LABEL_176;
        }
LABEL_183:
        *(_DWORD *)(a1 + 72) = v102;
        *(_DWORD *)(a1 + 76) = 0;
      }
      goto LABEL_109;
    }
    uint64_t v103 = (void *)(a1 + 80);
    unint64_t v104 = (void *)(a1 + 96);
    while (1)
    {
LABEL_176:
      if (*v103 == -8192) {
        goto LABEL_180;
      }
      if (*v103 != -4096) {
        break;
      }
LABEL_181:
      v103 += 2;
      if (v103 == v104)
      {
        LODWORD(v102) = *v57 & 1;
        goto LABEL_183;
      }
    }
    unint64_t v107 = (llvm::MDNode *)v103[1];
    v103[1] = 0;
    if (v107) {
      llvm::MDNode::deleteTemporary(v107, a2);
    }
LABEL_180:
    *uint64_t v103 = -4096;
    goto LABEL_181;
  }
LABEL_109:
  unsigned int v71 = *(_DWORD *)(a1 + 48);
  if (v71 >= 2)
  {
    int v88 = sub_1CD4FA050((_DWORD *)(a1 + 48));
    uint64_t v89 = v88;
    unsigned int v91 = v90;
    if (v71)
    {
      uint64_t v92 = a1 + 56;
      uint64_t v93 = 1;
    }
    else
    {
      uint64_t v92 = *(void *)(a1 + 56);
      uint64_t v93 = *(unsigned int *)(a1 + 64);
    }
    uint64_t v94 = (unsigned int *)(v92 + 4 * v93);
    if (v94 != v88)
    {
      do
      {
        unsigned int v95 = *(unsigned __int8 **)(*(void *)a1 + 8 * *v89);
        if (v95 && *v95 - 4 <= 0x1E) {
          llvm::MDNode::resolveCycles((uint64_t)v95);
        }
        uint64_t v96 = v89 + 1;
        while (v96 != v91)
        {
          unsigned int v97 = *v96++;
          if (v97 <= 0xFFFFFFFD)
          {
            uint64_t v89 = v96 - 1;
            goto LABEL_151;
          }
        }
        uint64_t v89 = v91;
LABEL_151:
        ;
      }
      while (v89 != v94);
    }
    sub_1CD4FAAAC((void *)(a1 + 48));
  }
  if (*(void *)(v2 + 40))
  {
    unint64_t v72 = *(void *)(v2 + 32);
    while (1)
    {
      uint64_t v73 = *(void *)(*(void *)(v2 + 8) + ((v72 >> 5) & 0x7FFFFFFFFFFFFF8));
      uint64_t v74 = *(unsigned int *)(v73 + 16 * v72 + 4);
      uint64_t v75 = *(_DWORD *)(a1 + 8) <= v74 ? 0 : *(void *)(*(void *)a1 + 8 * v74);
      long long v76 = (unsigned __int8 *)(v73 + 16 * v72);
      unint64_t v78 = (uint64_t *)(v76 + 8);
      uint64_t v77 = (void *)*((void *)v76 + 1);
      if (v77) {
        break;
      }
LABEL_123:
      uint64_t v82 = *(void *)(v2 + 40) - 1;
      *(void *)(v2 + 32) = ++v72;
      *(void *)(v2 + 40) = v82;
      if (v72 >= 0x200)
      {
        operator delete(**(void ***)(v2 + 8));
        *(void *)(v2 + 8) += 8;
        uint64_t v86 = *(void *)(v2 + 40);
        unint64_t v72 = *(void *)(v2 + 32) - 256;
        *(void *)(v2 + 32) = v72;
        if (!v86) {
          return MEMORY[0x1D25D9CD0](v108, 4);
        }
      }
      else if (!v82)
      {
        return MEMORY[0x1D25D9CD0](v108, 4);
      }
    }
    *uint64_t v77 = v75;
    int v79 = *(unsigned __int8 **)*v78;
    if (v79) {
      llvm::MetadataTracking::track(*v78, v79, 2);
    }
    unint64_t v112 = v76;
    int v80 = *v76;
    if ((v80 - 4) > 0x1E)
    {
      if ((v80 - 3) >= 0xFFFFFFFE) {
        __int16 v83 = v76;
      }
      else {
        __int16 v83 = 0;
      }
      if ((v80 - 3) < 0xFFFFFFFE)
      {
        if (v80 == 3) {
          *unint64_t v78 = 0;
        }
        goto LABEL_121;
      }
      unint64_t v84 = (unint64_t)(v83 + 8);
    }
    else if ((v76[1] & 0x7F) != 2 && !*((_DWORD *)v76 + 3) {
           || (uint64_t v85 = *((void *)v76 + 2), (v85 & 4) == 0)
    }
           || (unint64_t v84 = v85 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_121:
      unint64_t v72 = *(void *)(v2 + 32);
      uint64_t v81 = *(void **)(*(void *)(*(void *)(v2 + 8) + ((v72 >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * v72
                       + 8);
      if (v81) {
        *uint64_t v81 = 0;
      }
      goto LABEL_123;
    }
    v111[0] = &v112;
    sub_1CC5FA668(v84 + 16, v111);
    goto LABEL_121;
  }
  return MEMORY[0x1D25D9CD0](v108, 4);
}

void sub_1CC1ED94C(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 72);
  if (v1)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 32);
    BOOL v4 = v3 >= 0x20;
    char v5 = v3 - 32;
    if (v4)
    {
      *(void *)(a1 + 24) >>= v5;
      int v6 = 32;
    }
    else
    {
      int v6 = 0;
    }
    uint64_t v7 = *(void *)(a1 + 64) + 32 * v1;
    int v8 = *(_DWORD *)(v7 - 32);
    *(_DWORD *)(a1 + 32) = v6;
    *(_DWORD *)(a1 + 36) = v8;
    sub_1CC1CAA38((uint64_t *)(a1 + 40));
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(v7 - 24);
    *(void *)(a1 + 56) = *(void *)(v7 - 8);
    *(void *)(v7 - 24) = 0;
    *(void *)(v7 - 16) = 0;
    *(void *)(v7 - 8) = 0;
    uint64_t v9 = (*(_DWORD *)(a1 + 72) - 1);
    *(_DWORD *)(a1 + 72) = v9;
    uint64_t v10 = *(void *)(a1 + 64) + 32 * v9;
    uint64_t v13 = *(void *)(v10 + 8);
    unsigned int v12 = (void **)(v10 + 8);
    uint64_t v11 = v13;
    if (v13)
    {
      sub_1CC1CAA74((uint64_t)v12, v11);
      int v14 = *v12;
      operator delete(v14);
    }
  }
}

void sub_1CC1EDA0C(llvm *a1, uint64_t a2, unsigned int *a3, int a4, uint64_t a5, const char *a6, unint64_t a7, unsigned int *a8)
{
  uint64_t v9 = a1;
  uint64_t v979 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v968 = 0;
  v967[0] = a2;
  v967[1] = &v968;
  v967[2] = a8;
  v967[3] = a5;
  uint64_t v10 = a8;
  uint64_t v11 = a3;
  switch(a4)
  {
    case 1:
      sub_1CC1F4974(&v974, *(uint64_t **)a3, (uint64_t *)(*(void *)a3 + 8 * a3[2]), a3[2]);
      char v13 = HIBYTE(v975[0]);
      unint64_t v14 = HIBYTE(v975[0]) & 0x70;
      size_t v15 = *((void *)&v974 + 1);
      if (v975[0] >= 0)
      {
        int v16 = &v974;
      }
      else
      {
        unint64_t v14 = *((void *)&v974 + 1);
        int v16 = (long long *)v974;
      }
      BOOL v17 = v14 >= 0x10 && *(void *)v16 == 0x6365762E6D766C6CLL && *((void *)v16 + 1) == 0x2E72657A69726F74;
      int v213 = SHIBYTE(v975[0]);
      *(unsigned char *)(a2 + 969) |= v17;
      size_t v214 = v13 & 0x7F;
      if (v213 >= 0) {
        size_t v215 = v214;
      }
      else {
        size_t v215 = v15;
      }
      uint64_t v216 = (unsigned __int8 *)llvm::MDString::get(*(uint64_t **)(a2 + 208), (unsigned __int8 *)v16, v215);
      sub_1CC1F2468(a2, v216, *v10);
      ++*v10;
      if (SHIBYTE(v975[0]) < 0) {
        operator delete((void *)v974);
      }
      goto LABEL_1112;
    case 2:
      if (a3[2] != 2) {
        goto LABEL_298;
      }
      LODWORD(v974) = **(_DWORD **)a3;
      uint64_t v114 = *(void *)(a2 + 248);
      if (!v114) {
        goto LABEL_1214;
      }
      uint64_t v115 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, long long *))(*(void *)v114 + 48))(v114, &v974);
      int v116 = v115[8];
      if (v116 != 9 && v116 != 7) {
        goto LABEL_323;
      }
      goto LABEL_298;
    case 3:
      goto LABEL_148;
    case 4:
      uint64_t v143 = *(uint64_t **)a3;
      uint64_t v144 = a3[2];
      uint64_t v970 = (unsigned __int8 **)&v972;
      long long v971 = xmmword_1CD96EEC0;
      if (v144 >= 9) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      uint64_t v232 = 0;
      if (v144)
      {
        unint64_t v233 = &v972;
        uint64_t v234 = 8 * v144;
        do
        {
          uint64_t v235 = *v143++;
          *(unsigned char *)unint64_t v233 = v235;
          unint64_t v233 = (uint64_t *)((char *)v233 + 1);
          v234 -= 8;
        }
        while (v234);
        uint64_t v232 = v971;
      }
      *(void *)&long long v971 = v232 + v144;
      a3[2] = 0;
      sub_1CC1CA844(*(void *)(a2 + 200), *(_DWORD *)(*(void *)(a2 + 200) + 36), (uint64_t)&v974);
      if (BYTE8(v974))
      {
        uint64_t v840 = v974;
        *(void *)uint64_t v9 = v974;
        if (v840)
        {
          char v247 = 0;
          goto LABEL_436;
        }
        int v236 = 4;
      }
      else
      {
        int v236 = v974;
        *(void *)uint64_t v9 = 0;
      }
      llvm::BitstreamCursor::readRecord(*(void **)(a2 + 200), v236, (uint64_t)v11, 0, (uint64_t)&v977);
      if (v978)
      {
        *(void *)uint64_t v9 = v977;
        char v247 = 0;
      }
      else
      {
        if (v977 != 10)
        {
          *(void *)&long long v974 = "METADATA_NAME not followed by METADATA_NAMED_NODE";
          __int16 v976 = 259;
          sub_1CC1EC6B0(v9);
        }
        uint64_t v237 = v11[2];
        uint64_t inserted = llvm::Module::getOrInsertNamedMetadata(*(_DWORD **)(a2 + 216), (unsigned __int8 *)v970, v971);
        if (v237)
        {
          uint64_t v239 = inserted;
          uint64_t v240 = 0;
          uint64_t v241 = 8 * v237;
          do
          {
            int v242 = sub_1CC1F2FD0(a2, *(_DWORD *)(*(void *)v11 + v240));
            if (!v242 || (BOOL v243 = v242, *v242 - 4 >= 0x1F))
            {
              *(void *)&long long v974 = "Invalid named metadata: expect fwd ref to MDNode";
              __int16 v976 = 259;
              sub_1CC1EC6B0(v9);
            }
            *(void *)&long long v974 = v242;
            uint64_t v244 = *(void *)(v239 + 48);
            uint64_t v245 = *(unsigned int *)(v244 + 8);
            if (v245 >= *(_DWORD *)(v244 + 12))
            {
              sub_1CC608328(*(void *)(v239 + 48), (unsigned __int8 **)&v974);
            }
            else
            {
              unint64_t v246 = (unsigned __int8 **)(*(void *)v244 + 8 * v245);
              *unint64_t v246 = v243;
              llvm::MetadataTracking::track((uint64_t)v246, v243, 2);
              ++*(_DWORD *)(v244 + 8);
            }
            v240 += 8;
            char v247 = 1;
          }
          while (v241 != v240);
        }
        else
        {
          char v247 = 1;
        }
      }
LABEL_436:
      if (v970 != (unsigned __int8 **)&v972) {
        free(v970);
      }
      if ((v247 & 1) == 0) {
        return;
      }
      goto LABEL_1112;
    case 5:
      unsigned __int8 v968 = 1;
LABEL_148:
      *(void *)&long long v974 = v975;
      *((void *)&v974 + 1) = 0x800000000;
      unsigned int v152 = a3[2];
      if (v152 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v152)
      {
        int v153 = *(_DWORD **)v11;
        uint64_t v154 = 8 * v152;
        do
        {
          if (*v153) {
            uint64_t v155 = sub_1CC1F4430((uint64_t)v967, (*v153 - 1));
          }
          else {
            uint64_t v155 = 0;
          }
          if (DWORD2(v974) >= (unint64_t)HIDWORD(v974)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(v974 + 8 * DWORD2(v974)) = v155;
          unsigned int v156 = ++DWORD2(v974);
          v153 += 2;
          v154 -= 8;
        }
        while (v154);
      }
      else
      {
        unsigned int v156 = DWORD2(v974);
      }
      int v203 = v968;
      uint64_t v204 = *(void *)(a2 + 208);
      uint64_t v132 = v156;
      uint64_t v338 = (void *)v974;
      goto LABEL_213;
    case 6:
      llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKindRecord(a2, (unsigned int **)a3, a1);
      goto LABEL_209;
    case 7:
      if ((unint64_t)a3[2] - 5 >= 2) {
        goto LABEL_298;
      }
      unsigned int v118 = *(uint64_t **)a3;
      unsigned __int8 v968 = **(void **)a3 != 0;
      unsigned int v119 = *((_DWORD *)v118 + 2);
      unsigned int v120 = *((_DWORD *)v118 + 4);
      uint64_t v121 = sub_1CC1F4430((uint64_t)v967, *((unsigned int *)v118 + 6));
      int v122 = *(_DWORD *)(*(void *)v11 + 32);
      if (v122) {
        std::string::size_type v123 = sub_1CC1F4430((uint64_t)v967, (v122 - 1));
      }
      else {
        std::string::size_type v123 = 0;
      }
      int v278 = v11[2] == 6 && *(void *)(*(void *)v11 + 40) != 0;
      uint64_t Impl = llvm::DILocation::getImpl(*(void **)(a2 + 208), v119, v120, (uint64_t)v121, (uint64_t)v123, v278, v968, 1);
      goto LABEL_1109;
    case 8:
      unsigned int v124 = a3[2];
      if (v124) {
        goto LABEL_298;
      }
      *(void *)&long long v974 = v975;
      *((void *)&v974 + 1) = 0x800000000;
      if (v124)
      {
        for (unsigned int i = 0; i != v124; i += 2)
        {
          uint64_t v8 = *(void *)(*(void *)v11 + 8 * i);
          LODWORD(v970) = v8;
          uint64_t v126 = *(void *)(a2 + 248);
          if (!v126)
          {
LABEL_1214:
            sub_1CB920400();
            goto LABEL_1215;
          }
          unint64_t v127 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, unsigned __int8 ***))(*(void *)v126 + 48))(v126, &v970);
          if (!v127)
          {
            uint64_t v970 = (unsigned __int8 **)"Invalid record";
            __int16 v973 = 259;
            llvm::BitcodeErrorCategory(0);
            operator new();
          }
          int v128 = v127[8];
          if (v128 == 7)
          {
            if (DWORD2(v974) >= (unint64_t)HIDWORD(v974)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(v974 + 8 * DWORD2(v974)) = 0;
          }
          else
          {
            if (v128 == 9)
            {
              unint64_t v129 = sub_1CC1F4430((uint64_t)v967, *(void *)(*(void *)v11 + 8 * (i + 1)));
            }
            else
            {
              ValueFwdRef = llvm::BitcodeReaderValueList::getValueFwdRef(*(llvm::BitcodeReaderValueList **)(a2 + 192), *(void *)(*(void *)v11 + 8 * (i + 1)), (llvm::Type *)v127);
              unint64_t v129 = (unsigned __int8 *)llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)ValueFwdRef, v131);
            }
            if (DWORD2(v974) >= (unint64_t)HIDWORD(v974)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(v974 + 8 * DWORD2(v974)) = v129;
          }
          uint64_t v132 = ++DWORD2(v974);
        }
        uint64_t v338 = (void *)v974;
      }
      else
      {
        uint64_t v132 = 0;
        uint64_t v338 = v975;
      }
      uint64_t v204 = *(void *)(a2 + 208);
      int v203 = 0;
LABEL_213:
      unsigned int v205 = (unsigned __int8 *)llvm::MDTuple::getImpl(v204, v338, v132, v203, 1);
      goto LABEL_214;
    case 9:
      unsigned int v167 = a3[2];
      if (v167) {
        goto LABEL_298;
      }
      if (v167 != 2) {
        goto LABEL_178;
      }
      LODWORD(v974) = **(_DWORD **)a3;
      uint64_t v168 = *(void *)(a2 + 248);
      if (!v168) {
        goto LABEL_1214;
      }
      uint64_t v115 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, long long *))(*(void *)v168 + 48))(v168, &v974);
      int v169 = v115[8];
      if (v169 == 9 || v169 == 7)
      {
LABEL_178:
        uint64_t Impl = (uint64_t)llvm::MDTuple::getImpl(*(void *)(a2 + 208), 0, 0, 0, 1);
      }
      else
      {
LABEL_323:
        std::string::size_type v267 = llvm::BitcodeReaderValueList::getValueFwdRef(*(llvm::BitcodeReaderValueList **)(a2 + 192), *(_DWORD *)(*(void *)v11 + 8), (llvm::Type *)v115);
        uint64_t Impl = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v267, v268);
      }
      goto LABEL_1109;
    case 12:
      unsigned int v161 = a3[2];
      if (v161 <= 3) {
        goto LABEL_298;
      }
      uint64_t v162 = *(uint64_t **)a3;
      unsigned __int8 v968 = **(void **)a3 != 0;
      unsigned int v163 = *((_DWORD *)v162 + 2);
      if (HIWORD(v163) || *((_DWORD *)v162 + 4) != 0) {
        goto LABEL_298;
      }
      int v165 = *((_DWORD *)v162 + 6);
      if (v165)
      {
        uint64_t v166 = sub_1CC1F4430((uint64_t)v967, (v165 - 1));
        unsigned int v161 = v11[2];
      }
      else
      {
        uint64_t v166 = 0;
      }
      *(void *)&long long v974 = v975;
      *((void *)&v974 + 1) = 0x800000000;
      if (v161 == 4)
      {
        uint64_t v490 = 0;
        uint64_t v491 = (unsigned __int8 **)v975;
      }
      else
      {
        LODWORD(v490) = 0;
        for (unsigned int j = 4; j != v161; ++j)
        {
          uint64_t v493 = *(void *)(*(void *)v11 + 8 * j);
          if (v493)
          {
            v494 = sub_1CC1F4430((uint64_t)v967, (v493 - 1));
            LODWORD(v490) = DWORD2(v974);
          }
          else
          {
            v494 = 0;
          }
          if (v490 >= HIDWORD(v974)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(v974 + 8 * v490) = v494;
          uint64_t v490 = ++DWORD2(v974);
        }
        uint64_t v491 = (unsigned __int8 **)v974;
      }
      unint64_t v495 = (unsigned __int8 *)llvm::GenericDINode::getImpl(*(void **)(a2 + 208), v163, (uint64_t)v166, v491, v490, v968, 1);
      sub_1CC1F2468(a2, v495, *v10);
      ++*v10;
      uint64_t v206 = (void *)v974;
      if ((void *)v974 == v975) {
        goto LABEL_1112;
      }
      goto LABEL_215;
    case 13:
      uint64_t v65 = *(uint64_t **)a3;
      uint64_t v66 = **(void **)a3 >> 1;
      if (v66 == 2)
      {
        uint64_t v218 = *(void **)(a2 + 208);
        int v219 = *((_DWORD *)v65 + 2);
        if (v219)
        {
          unsigned int v220 = sub_1CC1F4430((uint64_t)v967, (v219 - 1));
          uint64_t v65 = *(uint64_t **)v11;
        }
        else
        {
          unsigned int v220 = 0;
        }
        int v332 = *((_DWORD *)v65 + 4);
        if (v332)
        {
          unint64_t v333 = sub_1CC1F4430((uint64_t)v967, (v332 - 1));
          uint64_t v65 = *(uint64_t **)v11;
        }
        else
        {
          unint64_t v333 = 0;
        }
        int v334 = *((_DWORD *)v65 + 6);
        if (v334)
        {
          std::string::size_type v335 = sub_1CC1F4430((uint64_t)v967, (v334 - 1));
          uint64_t v65 = *(uint64_t **)v11;
        }
        else
        {
          std::string::size_type v335 = 0;
        }
        int v336 = *((_DWORD *)v65 + 8);
        if (v336) {
          uint64_t v337 = sub_1CC1F4430((uint64_t)v967, (v336 - 1));
        }
        else {
          uint64_t v337 = 0;
        }
        uint64_t Impl = (uint64_t)llvm::DISubrange::getImpl(v218, (uint64_t)v220, (uint64_t)v333, (uint64_t)v335, (uint64_t)v337, 0, 1);
      }
      else if (v66 == 1)
      {
        uint64_t v662 = *(llvm::Type **)(a2 + 208);
        int v663 = *((_DWORD *)v65 + 2);
        if (v663)
        {
          v664 = sub_1CC1F4430((uint64_t)v967, (v663 - 1));
          uint64_t v65 = *(uint64_t **)v11;
        }
        else
        {
          v664 = 0;
        }
        uint64_t Impl = (uint64_t)llvm::DISubrange::getImpl(v662, (llvm::LLVMContext *)v664, -(v65[2] & 1) ^ ((unint64_t)v65[2] >> 1), 0, 1);
      }
      else
      {
        if (v66)
        {
          char v67 = "Invalid record: Unsupported version of DISubrange";
          goto LABEL_299;
        }
        uint64_t Impl = (uint64_t)llvm::DISubrange::getImpl(*(llvm::Type **)(a2 + 208), (llvm::LLVMContext *)v65[1], -(v65[2] & 1) ^ ((unint64_t)v65[2] >> 1), 0, 1);
      }
      goto LABEL_1109;
    case 14:
      uint64_t v101 = a3[2];
      if (v101 <= 2) {
        goto LABEL_298;
      }
      uint64_t v102 = *(uint64_t **)a3;
      unint64_t v104 = **(void **)a3;
      unint64_t v103 = *(void *)(*(void *)a3 + 8);
      uint64_t v105 = **(void **)v11 & 1;
      unsigned __int8 v968 = **(unsigned char **)v11 & 1;
      if ((v104 & 4) != 0)
      {
        llvm::readWideAPInt((unint64_t *)v102 + 3, v101 - 3, v103, (uint64_t)&v974);
        unint64_t v106 = v974;
        unint64_t v107 = *(void **)(a2 + 208);
        if (!v968)
        {
          unsigned int v964 = DWORD2(v974);
          if (DWORD2(v974) > 0x40) {
            operator new[]();
          }
          goto LABEL_608;
        }
        unsigned int v966 = DWORD2(v974);
        if (DWORD2(v974) > 0x40) {
          operator new[]();
        }
LABEL_466:
        unint64_t v965 = v106;
        int v358 = *(_DWORD *)(*(void *)v11 + 16);
        if (v358) {
          int v359 = sub_1CC1F4430((uint64_t)v967, (v358 - 1));
        }
        else {
          int v359 = 0;
        }
        long long v468 = (unsigned __int8 *)llvm::DIEnumerator::getImpl(v107, (const llvm::APInt *)&v965, (v104 >> 1) & 1, (uint64_t)v359, 1, 1);
        sub_1CC1F2468(a2, v468, *v10);
        if (v966 >= 0x41)
        {
          unint64_t v469 = v965;
          if (v965) {
            goto LABEL_867;
          }
        }
        goto LABEL_868;
      }
      unint64_t v106 = -(uint64_t)(v103 & 1) ^ (v103 >> 1);
      unint64_t v107 = *(void **)(a2 + 208);
      if (v105)
      {
        unsigned int v966 = 64;
        goto LABEL_466;
      }
      unsigned int v964 = 64;
LABEL_608:
      unint64_t v963 = v106;
      int v627 = *(_DWORD *)(*(void *)v11 + 16);
      if (v627) {
        v628 = sub_1CC1F4430((uint64_t)v967, (v627 - 1));
      }
      else {
        v628 = 0;
      }
      uint64_t v629 = (unsigned __int8 *)llvm::DIEnumerator::getImpl(v107, (const llvm::APInt *)&v963, (v104 >> 1) & 1, (uint64_t)v628, 0, 1);
      sub_1CC1F2468(a2, v629, *v10);
      if (v964 >= 0x41)
      {
        unint64_t v469 = v963;
        if (v963) {
LABEL_867:
        }
          MEMORY[0x1D25D9CB0](v469, 0x1000C8000313F17);
      }
LABEL_868:
      ++*v10;
LABEL_1112:
      *(void *)uint64_t v9 = 0;
      return;
    case 15:
      unsigned int v79 = a3[2];
      if (v79 - 8 <= 0xFFFFFFFD) {
        goto LABEL_298;
      }
      int v80 = *(uint64_t **)a3;
      uint64_t v81 = **(void **)a3;
      unsigned __int8 v968 = v81 != 0;
      if (v79 < 7) {
        int v82 = 0;
      }
      else {
        int v82 = *((_DWORD *)v80 + 12);
      }
      int v258 = *(void **)(a2 + 208);
      int v259 = *((_DWORD *)v80 + 2);
      int v260 = *((_DWORD *)v80 + 4);
      if (v81)
      {
        if (v260)
        {
          unsigned int v261 = sub_1CC1F4430((uint64_t)v967, (v260 - 1));
          int v80 = *(uint64_t **)v11;
        }
        else
        {
          unsigned int v261 = 0;
        }
        uint64_t Impl = (uint64_t)llvm::DIBasicType::getImpl(v258, v259, (uint64_t)v261, v80[3], *((_DWORD *)v80 + 8), *((_DWORD *)v80 + 10), v82, 1, 1);
      }
      else
      {
        if (v260)
        {
          long long v273 = sub_1CC1F4430((uint64_t)v967, (v260 - 1));
          int v80 = *(uint64_t **)v11;
        }
        else
        {
          long long v273 = 0;
        }
        uint64_t Impl = (uint64_t)llvm::DIBasicType::getImpl(v258, v259, (uint64_t)v273, v80[3], *((_DWORD *)v80 + 8), *((_DWORD *)v80 + 10), v82, 0, 1);
      }
      goto LABEL_1109;
    case 16:
      unsigned int v43 = a3[2];
      if (v43 > 6 || ((1 << v43) & 0x68) == 0) {
        goto LABEL_298;
      }
      uint64_t v45 = *(uint64_t **)a3;
      int v46 = **(void **)a3 != 0;
      unsigned __int8 v968 = **(void **)a3 != 0;
      if (v43 < 5) {
        goto LABEL_236;
      }
      uint64_t v47 = v45[3];
      if (v47)
      {
        uint64_t v48 = v45[4];
        if (v48)
        {
          if (v48)
          {
            uint64_t v950 = sub_1CC1F4430((uint64_t)v967, (v48 - 1));
            int v46 = v968;
            uint64_t v45 = *(uint64_t **)v11;
          }
          else
          {
            uint64_t v950 = 0;
          }
          int v339 = v47 & 0xFFFFFF00;
          LODWORD(v47) = v47;
          char v221 = 1;
LABEL_442:
          uint64_t v340 = *(void **)(a2 + 208);
          int v341 = *((_DWORD *)v45 + 2);
          if (v46)
          {
            if (v341)
            {
              uint64_t v342 = sub_1CC1F4430((uint64_t)v967, (v341 - 1));
              uint64_t v45 = *(uint64_t **)v11;
            }
            else
            {
              uint64_t v342 = 0;
            }
            int v344 = *((_DWORD *)v45 + 4);
            if (v344) {
              int v345 = sub_1CC1F4430((uint64_t)v967, (v344 - 1));
            }
            else {
              int v345 = 0;
            }
            std::string::size_type v346 = v950;
            int v347 = v339 | v47;
            if (v11[2] < 6)
            {
              uint64_t v350 = 0;
              uint64_t v351 = 0;
            }
            else
            {
              int v348 = *(_DWORD *)(*(void *)v11 + 40);
              if (v348)
              {
                unint64_t v349 = sub_1CC1F4430((uint64_t)v967, (v348 - 1));
                std::string::size_type v346 = v950;
                uint64_t v350 = (uint64_t)v349;
              }
              else
              {
                uint64_t v350 = 0;
              }
              uint64_t v351 = 1;
            }
            LODWORD(v974) = v347;
            *((void *)&v974 + 1) = v346;
            LOBYTE(v975[0]) = v221;
            v512 = v340;
            uint64_t v513 = (uint64_t)v342;
            uint64_t v514 = (uint64_t)v345;
            int v515 = 1;
          }
          else
          {
            if (v341)
            {
              char v343 = sub_1CC1F4430((uint64_t)v967, (v341 - 1));
              uint64_t v45 = *(uint64_t **)v11;
            }
            else
            {
              char v343 = 0;
            }
            int v462 = *((_DWORD *)v45 + 4);
            if (v462) {
              int v463 = sub_1CC1F4430((uint64_t)v967, (v462 - 1));
            }
            else {
              int v463 = 0;
            }
            __int16 v464 = v950;
            int v465 = v339 | v47;
            if (v11[2] < 6)
            {
              uint64_t v350 = 0;
              uint64_t v351 = 0;
            }
            else
            {
              int v466 = *(_DWORD *)(*(void *)v11 + 40);
              if (v466)
              {
                unsigned int v467 = sub_1CC1F4430((uint64_t)v967, (v466 - 1));
                __int16 v464 = v950;
                uint64_t v350 = (uint64_t)v467;
              }
              else
              {
                uint64_t v350 = 0;
              }
              uint64_t v351 = 1;
            }
            LODWORD(v974) = v465;
            *((void *)&v974 + 1) = v464;
            LOBYTE(v975[0]) = v221;
            v512 = v340;
            uint64_t v513 = (uint64_t)v343;
            uint64_t v514 = (uint64_t)v463;
            int v515 = 0;
          }
          uint64_t Impl = (uint64_t)llvm::DIFile::getImpl(v512, v513, v514, &v974, v350, v351, v515, 1);
          goto LABEL_1109;
        }
LABEL_236:
        char v221 = 0;
        LODWORD(v47) = 0;
      }
      else
      {
        char v221 = 0;
      }
      int v339 = 0;
      goto LABEL_442;
    case 17:
      unsigned int v133 = a3[2];
      if (v133 - 16 <= 0xFFFFFFFB) {
        goto LABEL_298;
      }
      uint64_t v134 = *(uint64_t **)a3;
      if (v133 < 0xD)
      {
        unsigned int v930 = 0;
        int v920 = 0;
        unint64_t v911 = 0;
        unint64_t v136 = 0;
        unsigned __int8 v137 = 0;
        unsigned int v941 = a3[2];
        uint64_t v955 = 0;
        goto LABEL_478;
      }
      uint64_t v135 = v134[12];
      unsigned int v941 = (v135 - 1) >> 8;
      unint64_t v136 = (unint64_t)(v135 != 0) << 32;
      if (v135) {
        unsigned __int8 v137 = v135 - 1;
      }
      else {
        unsigned __int8 v137 = 0;
      }
      if (v133 == 13)
      {
        unsigned int v930 = 0;
        int v920 = 0;
        unint64_t v911 = 0;
      }
      else
      {
        uint64_t v364 = v134[13];
        unsigned int v930 = v364 & 0xFFFFFF00;
        unint64_t v911 = (unint64_t)(v364 != 0) << 32;
        int v920 = v364;
        if (v133 >= 0xF)
        {
          uint64_t v365 = v134[14];
          if (v365)
          {
            if (v365)
            {
              uint64_t v955 = sub_1CC1F4430((uint64_t)v967, (v365 - 1));
              uint64_t v134 = *(uint64_t **)v11;
              goto LABEL_478;
            }
          }
        }
      }
      uint64_t v955 = 0;
LABEL_478:
      uint64_t v366 = *v134;
      unsigned __int8 v968 = *v134 != 0;
      int v367 = *((_DWORD *)v134 + 20);
      uint64_t v368 = *(void **)(a2 + 208);
      int v369 = *((_DWORD *)v134 + 4);
      int v908 = *((_DWORD *)v134 + 2);
      if (v366)
      {
        if (v369)
        {
          uint64_t v897 = sub_1CC1F4430((uint64_t)v967, (v369 - 1));
          uint64_t v134 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v897 = 0;
        }
        int v419 = *((_DWORD *)v134 + 6);
        if (v419)
        {
          unint64_t v891 = sub_1CC1F4430((uint64_t)v967, (v419 - 1));
          uint64_t v134 = *(uint64_t **)v11;
        }
        else
        {
          unint64_t v891 = 0;
        }
        int v420 = *((_DWORD *)v134 + 8);
        int v421 = *((_DWORD *)v134 + 10);
        uint64_t v903 = v368;
        if (v421) {
          unsigned int v422 = sub_1CC1F4430((uint64_t)v967, (v421 - 1));
        }
        else {
          unsigned int v422 = 0;
        }
        unsigned int v423 = sub_1CC1F426C(a2, (llvm::MDNode *)v422);
        int v424 = *(_DWORD *)(*(void *)v11 + 48);
        int v884 = v420;
        uint64_t v876 = (uint64_t)v423;
        int v425 = v367;
        if (v424) {
          unsigned int v426 = sub_1CC1F4430((uint64_t)v967, (v424 - 1));
        }
        else {
          unsigned int v426 = 0;
        }
        int v427 = sub_1CC1F426C(a2, (llvm::MDNode *)v426);
        unsigned int v428 = *(uint64_t **)v11;
        uint64_t v429 = *(void *)(*(void *)v11 + 56);
        int v430 = *((_DWORD *)v428 + 16);
        uint64_t v431 = v428[9];
        unint64_t v432 = v137 | ((unint64_t)(v941 & 0xFFFFFF) << 8) | v136;
        int v433 = *((_DWORD *)v428 + 22);
        if (v433) {
          unsigned int v434 = sub_1CC1F4430((uint64_t)v967, (v433 - 1));
        }
        else {
          unsigned int v434 = 0;
        }
        v844 = sub_1CC1F426C(a2, (llvm::MDNode *)v434);
        uint64_t Impl = llvm::DIDerivedType::getImpl(v903, v908, (uint64_t)v897, (uint64_t)v891, v884, v876, (uint64_t)v427, v429, v430, v431, v432, v911 | v920 | v930, v425, (uint64_t)v844, (uint64_t)v955, 1, 1);
      }
      else
      {
        if (v369)
        {
          v898 = sub_1CC1F4430((uint64_t)v967, (v369 - 1));
          uint64_t v134 = *(uint64_t **)v11;
        }
        else
        {
          v898 = 0;
        }
        int v564 = *((_DWORD *)v134 + 6);
        if (v564)
        {
          uint64_t v892 = sub_1CC1F4430((uint64_t)v967, (v564 - 1));
          uint64_t v134 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v892 = 0;
        }
        int v886 = *((_DWORD *)v134 + 8);
        int v565 = *((_DWORD *)v134 + 10);
        if (v565) {
          unint64_t v566 = sub_1CC1F4430((uint64_t)v967, (v565 - 1));
        }
        else {
          unint64_t v566 = 0;
        }
        v878 = sub_1CC1F426C(a2, (llvm::MDNode *)v566);
        int v567 = *(_DWORD *)(*(void *)v11 + 48);
        int v869 = v367;
        if (v567) {
          uint64_t v568 = sub_1CC1F4430((uint64_t)v967, (v567 - 1));
        }
        else {
          uint64_t v568 = 0;
        }
        char v569 = sub_1CC1F426C(a2, (llvm::MDNode *)v568);
        uint64_t v570 = *(uint64_t **)v11;
        uint64_t v571 = *(void *)(*(void *)v11 + 56);
        int v572 = *((_DWORD *)v570 + 16);
        uint64_t v573 = v570[9];
        unint64_t v574 = v137 | ((unint64_t)(v941 & 0xFFFFFF) << 8) | v136;
        int v575 = *((_DWORD *)v570 + 22);
        if (v575) {
          uint64_t v576 = sub_1CC1F4430((uint64_t)v967, (v575 - 1));
        }
        else {
          uint64_t v576 = 0;
        }
        v845 = sub_1CC1F426C(a2, (llvm::MDNode *)v576);
        uint64_t Impl = llvm::DIDerivedType::getImpl(v368, v908, (uint64_t)v898, (uint64_t)v892, v886, (uint64_t)v878, (uint64_t)v569, v571, v572, v573, v574, v911 | v920 | v930, v869, (uint64_t)v845, (uint64_t)v955, 0, 1);
      }
      goto LABEL_1109;
    case 18:
      if (a3[2] - 23 <= 0xFFFFFFF8) {
        goto LABEL_298;
      }
      uint64_t v138 = *(uint64_t **)a3;
      unint64_t v139 = **(void **)a3;
      unsigned __int8 v968 = v139 & 1;
      unsigned int v140 = *((_DWORD *)v138 + 2);
      int v141 = *((_DWORD *)v138 + 4);
      if (v141)
      {
        uint64_t v142 = sub_1CC1F4430((uint64_t)v967, (v141 - 1));
        uint64_t v138 = *(uint64_t **)v11;
      }
      else
      {
        uint64_t v142 = 0;
      }
      int v279 = *((_DWORD *)v138 + 6);
      if (v279)
      {
        unint64_t v280 = sub_1CC1F4430((uint64_t)v967, (v279 - 1));
        uint64_t v138 = *(uint64_t **)v11;
      }
      else
      {
        unint64_t v280 = 0;
      }
      int v281 = *((_DWORD *)v138 + 8);
      int v282 = *((_DWORD *)v138 + 10);
      if (v282) {
        int v283 = sub_1CC1F4430((uint64_t)v967, (v282 - 1));
      }
      else {
        int v283 = 0;
      }
      int v284 = sub_1CC1F426C(a2, (llvm::MDNode *)v283);
      uint64_t v285 = *(uint64_t **)v11;
      if (HIDWORD(*(void *)(*(void *)v11 + 64))) {
        goto LABEL_356;
      }
      std::string::size_type v286 = v284;
      uint64_t v895 = *(void *)(*(void *)v11 + 64);
      uint64_t v901 = v285[7];
      unsigned int v956 = *((_DWORD *)v285 + 20);
      int v889 = *((_DWORD *)v285 + 24);
      int v287 = *((_DWORD *)v285 + 30);
      if (v287) {
        v945 = sub_1CC1F4430((uint64_t)v967, (v287 - 1));
      }
      else {
        v945 = 0;
      }
      char v882 = v9;
      unint64_t v885 = v139;
      v875 = v10;
      uint64_t v877 = (uint64_t)v286;
      if (*(unsigned char *)(a2 + 972) && !byte_1EBCC8988 && v945 && v140 <= 0x17 && ((1 << v140) & 0x880014) != 0)
      {
        uint64_t v479 = (uint64_t)v280;
        unsigned int v480 = v956 | 4;
        if (!v142)
        {
          uint64_t v487 = 0;
          v656 = 0;
          uint64_t v655 = 0;
          uint64_t v654 = 0;
          uint64_t v653 = 0;
          uint64_t v589 = 0;
          uint64_t v588 = 0;
          unint64_t v585 = 0;
          uint64_t v657 = 0;
          uint64_t v705 = 0;
          uint64_t v661 = 0;
          uint64_t v660 = 0;
          uint64_t v658 = v901;
LABEL_1033:
          int v659 = v889;
          goto LABEL_1122;
        }
        int v959 = v956 | 4;
        uint64_t v481 = (void *)*((void *)v142 + 1);
        size_t v484 = *v481;
        uint64_t v482 = v481 + 3;
        size_t v483 = v484;
        if (!v484
          || (int v485 = memchr(v482, 60, v483)) == 0
          || v485 - v482 == -1
          || v483 >= 5 && (*(_DWORD *)v482 == 1314149215 ? (BOOL v486 = v482[4] == 124) : (BOOL v486 = 0), v486))
        {
          uint64_t v487 = (uint64_t)v142;
          int v703 = *(_DWORD *)(*(void *)v11 + 112);
          if (v703)
          {
            unint64_t v585 = sub_1CC1F4430((uint64_t)v967, (v703 - 1));
            v656 = 0;
            uint64_t v655 = 0;
            uint64_t v654 = 0;
            uint64_t v653 = 0;
            uint64_t v589 = 0;
            uint64_t v588 = 0;
LABEL_1032:
            uint64_t v657 = 0;
            uint64_t v705 = 0;
            uint64_t v661 = 0;
            uint64_t v660 = 0;
            uint64_t v658 = v901;
            unsigned int v480 = v959;
            goto LABEL_1033;
          }
        }
        else
        {
          uint64_t v487 = (uint64_t)v142;
        }
        v656 = 0;
        uint64_t v655 = 0;
        uint64_t v654 = 0;
        uint64_t v653 = 0;
        uint64_t v589 = 0;
        uint64_t v588 = 0;
        unint64_t v585 = 0;
        goto LABEL_1032;
      }
      int v488 = *(_DWORD *)(*(void *)v11 + 48);
      if (v488) {
        v489 = sub_1CC1F4430((uint64_t)v967, (v488 - 1));
      }
      else {
        v489 = 0;
      }
      unsigned int v578 = sub_1CC1F426C(a2, (llvm::MDNode *)v489);
      uint64_t v579 = *(uint64_t **)v11;
      uint64_t v923 = *(void *)(*(void *)v11 + 72);
      uint64_t v935 = v578;
      int v580 = *(_DWORD *)(*(void *)v11 + 88);
      if (v580)
      {
        unint64_t v581 = sub_1CC1F4430((uint64_t)v967, (v580 - 1));
        uint64_t v579 = *(uint64_t **)v11;
      }
      else
      {
        unint64_t v581 = 0;
      }
      int v913 = v581;
      int v582 = *((_DWORD *)v579 + 26);
      if (v582) {
        int v583 = sub_1CC1F4430((uint64_t)v967, (v582 - 1));
      }
      else {
        int v583 = 0;
      }
      v909 = sub_1CC1F426C(a2, (llvm::MDNode *)v583);
      int v584 = *(_DWORD *)(*(void *)v11 + 112);
      if (v584) {
        unint64_t v585 = sub_1CC1F4430((uint64_t)v967, (v584 - 1));
      }
      else {
        unint64_t v585 = 0;
      }
      unsigned int v586 = v11[2];
      if (v586 < 0x11)
      {
        uint64_t v479 = (uint64_t)v280;
        uint64_t v487 = (uint64_t)v142;
        uint64_t v588 = 0;
        uint64_t v589 = 0;
      }
      else
      {
        v864 = v585;
        int v587 = *(_DWORD *)(*(void *)v11 + 128);
        if (v587)
        {
          uint64_t v588 = sub_1CC1F4430((uint64_t)v967, (v587 - 1));
          unsigned int v586 = v11[2];
        }
        else
        {
          uint64_t v588 = 0;
        }
        if (v586 < 0x12)
        {
          uint64_t v479 = (uint64_t)v280;
          uint64_t v487 = (uint64_t)v142;
          uint64_t v589 = 0;
          uint64_t v653 = 0;
          uint64_t v654 = 0;
          uint64_t v655 = 0;
          v656 = 0;
          uint64_t v658 = v901;
          uint64_t v657 = (uint64_t)v909;
          int v659 = v889;
          uint64_t v661 = v923;
          uint64_t v660 = (uint64_t)v935;
          unint64_t v585 = v864;
          goto LABEL_1120;
        }
        int v651 = *(_DWORD *)(*(void *)v11 + 136);
        v859 = v588;
        if (v651)
        {
          uint64_t v652 = sub_1CC1F4430((uint64_t)v967, (v651 - 1));
          uint64_t v588 = v859;
          uint64_t v589 = (uint64_t)v652;
          unsigned int v586 = v11[2];
        }
        else
        {
          uint64_t v589 = 0;
        }
        unint64_t v585 = v864;
        if (v586 >= 0x14)
        {
          uint64_t v858 = v589;
          v773 = *(uint64_t **)v11;
          int v774 = *(_DWORD *)(*(void *)v11 + 144);
          if (v774)
          {
            uint64_t v872 = sub_1CC1F4430((uint64_t)v967, (v774 - 1));
            v773 = *(uint64_t **)v11;
          }
          else
          {
            uint64_t v872 = 0;
          }
          int v796 = *((_DWORD *)v773 + 38);
          if (v796) {
            uint64_t v654 = sub_1CC1F4430((uint64_t)v967, (v796 - 1));
          }
          else {
            uint64_t v654 = 0;
          }
          uint64_t v588 = v859;
          unint64_t v585 = v864;
          uint64_t v589 = v858;
          uint64_t v479 = (uint64_t)v280;
          unsigned int v797 = v11[2];
          uint64_t v487 = (uint64_t)v142;
          if (v797 < 0x15)
          {
            uint64_t v655 = 0;
            v656 = 0;
            uint64_t v658 = v901;
          }
          else
          {
            int v798 = *(_DWORD *)(*(void *)v11 + 160);
            if (v798)
            {
              v799 = v654;
              v800 = sub_1CC1F4430((uint64_t)v967, (v798 - 1));
              uint64_t v654 = v799;
              uint64_t v589 = v858;
              uint64_t v588 = v859;
              unint64_t v585 = v864;
              uint64_t v655 = (uint64_t)v800;
              unsigned int v797 = v11[2];
            }
            else
            {
              uint64_t v655 = 0;
            }
            uint64_t v658 = v901;
            if (v797 >= 0x16)
            {
              uint64_t v852 = v655;
              v855 = v654;
              int v836 = *(_DWORD *)(*(void *)v11 + 168);
              if (v836) {
                v656 = sub_1CC1F4430((uint64_t)v967, (v836 - 1));
              }
              else {
                v656 = 0;
              }
              int v659 = v889;
              uint64_t v661 = v923;
              uint64_t v660 = (uint64_t)v935;
              uint64_t v657 = (uint64_t)v909;
              uint64_t v588 = v859;
              unint64_t v585 = v864;
              uint64_t v654 = v855;
              uint64_t v589 = v858;
              uint64_t v653 = (uint64_t)v872;
              uint64_t v655 = v852;
LABEL_1120:
              if (!v945)
              {
                int v791 = 0;
                int v789 = v140;
                uint64_t v783 = v877;
                unsigned int v786 = v895;
                uint64_t v784 = v661;
                uint64_t v788 = v657;
                int v785 = v659;
                unsigned int v782 = v956;
                uint64_t v787 = (uint64_t)v913;
                goto LABEL_1125;
              }
              unsigned int v480 = v956;
              uint64_t v705 = (uint64_t)v913;
LABEL_1122:
              unsigned int v961 = v480;
              uint64_t v926 = v661;
              uint64_t v938 = v660;
              uint64_t v910 = v657;
              uint64_t v917 = v705;
              int v867 = v656;
              uint64_t v873 = v653;
              uint64_t v847 = (uint64_t)v656;
              uint64_t v841 = v658;
              int v775 = v140;
              unsigned int v862 = v140;
              __int16 v776 = v585;
              char v777 = v588;
              uint64_t v778 = v589;
              unsigned int v779 = v654;
              uint64_t v780 = v655;
              uint64_t v781 = llvm::DICompositeType::buildODRType(*(void **)(a2 + 208), (uint64_t)v945, v775, v487, v479, v281, v877, v660, v841, v895, v661, v480, v705, v659, v657, (uint64_t)v585, (unint64_t)v588, v589, v653,
                       (uint64_t)v654,
                       v655,
                       v847);
              unsigned int v782 = v961;
              uint64_t v783 = v877;
              uint64_t v784 = v926;
              uint64_t v660 = v938;
              v656 = v867;
              uint64_t v653 = v873;
              uint64_t v655 = v780;
              int v785 = v889;
              uint64_t v654 = v779;
              uint64_t v589 = v778;
              unsigned int v786 = v895;
              uint64_t v658 = v901;
              uint64_t v588 = v777;
              uint64_t v788 = v910;
              uint64_t v787 = v917;
              unint64_t v585 = v776;
              int v789 = v862;
              uint64_t v790 = v781;
              int v791 = 1;
              if (v781) {
                goto LABEL_1126;
              }
LABEL_1125:
              uint64_t v790 = llvm::DICompositeType::getImpl(*(void **)(a2 + 208), v789, v487, v479, v281, v783, v660, v658, v786, v784, v782, v787, v785, v788, (uint64_t)v585, (uint64_t)v945, (unint64_t)v588, v589, v653,
                       (uint64_t)v654,
                       v655,
                       (uint64_t)v656,
                       v968,
                       1);
LABEL_1126:
              uint64_t v9 = v882;
              uint64_t v10 = v875;
              if (v885 <= 1 && v791)
              {
                if ((*(unsigned char *)(v790 + 28) & 4) != 0) {
                  uint64_t v792 = a2 + 120;
                }
                else {
                  uint64_t v792 = a2 + 96;
                }
                uint64_t v970 = (unsigned __int8 **)v945;
                *(void *)&long long v971 = v790;
                sub_1CD4FA0C4((uint64_t)&v974, v792, (uint64_t *)&v970, &v971);
              }
              unsigned int v771 = *v875;
              uint64_t v772 = a2;
              char v770 = (unsigned __int8 *)v790;
              goto LABEL_1111;
            }
            v656 = 0;
          }
          int v659 = v889;
          uint64_t v661 = v923;
          uint64_t v660 = (uint64_t)v935;
          uint64_t v657 = (uint64_t)v909;
          uint64_t v653 = (uint64_t)v872;
          goto LABEL_1120;
        }
        uint64_t v479 = (uint64_t)v280;
        uint64_t v487 = (uint64_t)v142;
      }
      uint64_t v653 = 0;
      uint64_t v654 = 0;
      uint64_t v655 = 0;
      v656 = 0;
      uint64_t v658 = v901;
      uint64_t v657 = (uint64_t)v909;
      int v659 = v889;
      uint64_t v661 = v923;
      uint64_t v660 = (uint64_t)v935;
      goto LABEL_1120;
    case 19:
      unsigned int v183 = a3[2];
      if (v183 - 5 <= 0xFFFFFFFD) {
        goto LABEL_298;
      }
      uint64_t v184 = *(uint64_t **)a3;
      unint64_t v185 = **(void **)a3;
      if (v183 < 4) {
        LOBYTE(v8) = 0;
      }
      else {
        LOBYTE(v8) = *((unsigned char *)v184 + 24);
      }
      unsigned __int8 v968 = v185 & 1;
      LODWORD(v11) = *((_DWORD *)v184 + 2);
      int v262 = *((_DWORD *)v184 + 4);
      if (v262)
      {
        int v263 = sub_1CC1F4430((uint64_t)v967, (v262 - 1));
        unsigned int v264 = (llvm::MDNode *)v263;
        if (v185 < 2)
        {
          if (v263)
          {
            if (*v263 == 4)
            {
              *(void *)&long long v974 = v263;
              int v265 = v263[1] & 0x7F;
              if (v265 != 1)
              {
                if (v265 == 2)
                {
LABEL_1215:
                  uint64_t v970 = (unsigned __int8 **)&v974;
                  uint64_t v969 = llvm::MDTuple::getImpl(*(void *)(a2 + 176), 0, 0, 2, 1);
                  uint64_t v977 = &v969;
                  sub_1CD4FAF80(a2 + 144, &v970, (unsigned __int8 ***)&v977);
                  int v839 = v969;
                  uint64_t v969 = 0;
                  if (v839) {
                    llvm::MDNode::deleteTemporary(v839, v838);
                  }
                  unsigned int v264 = *(llvm::MDNode **)(*(void *)(a2 + 144) + 16 * *(unsigned int *)(a2 + 152) - 8);
                }
                else
                {
                  unsigned int v264 = sub_1CC1F4090(a2, (uint64_t)v263);
                }
              }
            }
          }
        }
      }
      else
      {
        unsigned int v264 = 0;
      }
      llvm::DISubroutineType::getImpl(*(void **)(a2 + 208), (int)v11, v8, (uint64_t)v264, v968, 1);
      goto LABEL_1109;
    case 20:
      if (a3[2] - 23 <= 0xFFFFFFF6) {
        goto LABEL_298;
      }
      unsigned __int8 v968 = 1;
      uint64_t v172 = *(void *)(a2 + 208);
      uint64_t v173 = *(uint64_t **)a3;
      int v174 = *(_DWORD *)(*(void *)a3 + 8);
      int v175 = *(_DWORD *)(*(void *)a3 + 16);
      if (v175)
      {
        BOOL v176 = sub_1CC1F4430((uint64_t)v967, (v175 - 1));
        uint64_t v173 = *(uint64_t **)v11;
      }
      else
      {
        BOOL v176 = 0;
      }
      int v306 = *((_DWORD *)v173 + 6);
      if (v306)
      {
        uint64_t v307 = sub_1CC1F4430((uint64_t)v967, (v306 - 1));
        uint64_t v173 = *(uint64_t **)v11;
      }
      else
      {
        uint64_t v307 = 0;
      }
      int v308 = *((_DWORD *)v173 + 10);
      uint64_t v912 = v173[4];
      if (v308)
      {
        unsigned int v309 = sub_1CC1F4430((uint64_t)v967, (v308 - 1));
        uint64_t v173 = *(uint64_t **)v11;
      }
      else
      {
        unsigned int v309 = 0;
      }
      int v310 = *((_DWORD *)v173 + 12);
      int v311 = *((_DWORD *)v173 + 14);
      if (v311)
      {
        uint64_t v907 = sub_1CC1F4430((uint64_t)v967, (v311 - 1));
        uint64_t v173 = *(uint64_t **)v11;
      }
      else
      {
        uint64_t v907 = 0;
      }
      int v902 = *((_DWORD *)v173 + 16);
      int v312 = *((_DWORD *)v173 + 18);
      if (v312)
      {
        uint64_t v896 = sub_1CC1F4430((uint64_t)v967, (v312 - 1));
        uint64_t v173 = *(uint64_t **)v11;
      }
      else
      {
        uint64_t v896 = 0;
      }
      int v313 = *((_DWORD *)v173 + 20);
      if (v313)
      {
        v890 = sub_1CC1F4430((uint64_t)v967, (v313 - 1));
        uint64_t v173 = *(uint64_t **)v11;
      }
      else
      {
        v890 = 0;
      }
      int v314 = *((_DWORD *)v173 + 24);
      if (v314)
      {
        v883 = sub_1CC1F4430((uint64_t)v967, (v314 - 1));
        uint64_t v173 = *(uint64_t **)v11;
      }
      else
      {
        v883 = 0;
      }
      int v315 = *((_DWORD *)v173 + 26);
      if (v315) {
        uint64_t v316 = sub_1CC1F4430((uint64_t)v967, (v315 - 1));
      }
      else {
        uint64_t v316 = 0;
      }
      unsigned int v317 = v11[2];
      uint64_t v946 = (uint64_t)v307;
      uint64_t v957 = (uint64_t)v176;
      uint64_t v932 = (uint64_t)v309;
      int v922 = v310;
      if (v317 >= 0x10)
      {
        unint64_t v319 = *(uint64_t **)v11;
        int v320 = *(_DWORD *)(*(void *)v11 + 120);
        if (!v320)
        {
          uint64_t v318 = 0;
          goto LABEL_642;
        }
        int v321 = v174;
        uint64_t v322 = v172;
        uint64_t v323 = v316;
        uint64_t v324 = sub_1CC1F4430((uint64_t)v967, (v320 - 1));
        uint64_t v316 = v323;
        uint64_t v172 = v322;
        int v174 = v321;
        uint64_t v318 = (uint64_t)v324;
        unsigned int v317 = v11[2];
      }
      else
      {
        uint64_t v318 = 0;
      }
      if (v317 < 0xF)
      {
        int v325 = v174;
        uint64_t v326 = v172;
        uint64_t v327 = 0;
        int v328 = 0;
        uint64_t v329 = 0;
LABEL_644:
        char v496 = 0;
        char v497 = 0;
        uint64_t v498 = 0;
        char v499 = 1;
        goto LABEL_887;
      }
      unint64_t v319 = *(uint64_t **)v11;
LABEL_642:
      uint64_t v329 = v319[14];
      if (v317 < 0x11)
      {
        int v325 = v174;
        uint64_t v326 = v172;
        uint64_t v327 = 0;
        int v328 = 0;
        goto LABEL_644;
      }
      char v499 = v319[16] != 0;
      if (v317 == 17)
      {
        int v325 = v174;
        uint64_t v326 = v172;
        uint64_t v327 = 0;
        int v328 = 0;
        char v496 = 0;
      }
      else
      {
        char v496 = v319[17] != 0;
        if (v317 >= 0x13)
        {
          int v328 = *((_DWORD *)v319 + 36);
          if (v317 != 19)
          {
            char v497 = v319[19] != 0;
            if (v317 >= 0x15)
            {
              BOOL v863 = v319[16] != 0;
              uint64_t v868 = v319[14];
              uint64_t v874 = v318;
              v881 = v316;
              int v325 = v174;
              uint64_t v326 = v172;
              int v795 = *((_DWORD *)v319 + 40);
              if (v795)
              {
                uint64_t v327 = sub_1CC1F4430((uint64_t)v967, (v795 - 1));
                unsigned int v317 = v11[2];
              }
              else
              {
                uint64_t v327 = 0;
              }
              if (v317 >= 0x16 && (int v837 = *(_DWORD *)(*(void *)v11 + 168)) != 0) {
                uint64_t v498 = sub_1CC1F4430((uint64_t)v967, (v837 - 1));
              }
              else {
                uint64_t v498 = 0;
              }
              uint64_t v316 = v881;
              uint64_t v329 = v868;
              uint64_t v318 = v874;
              char v499 = v863;
LABEL_887:
              *(void *)&long long v843 = v883;
              *((void *)&v843 + 1) = v316;
              *(void *)&long long v842 = v896;
              *((void *)&v842 + 1) = v890;
              unint64_t v633 = (unsigned __int8 *)llvm::DICompileUnit::getImpl(v326, v325, v957, v946, v912 != 0, v932, v922, (uint64_t)v907, v902, v842, v843, v318, v329, v499, v496, v328, v497, (uint64_t)v327, (uint64_t)v498,
                                          1);
              sub_1CC1F2468(a2, v633, *v10);
              ++*v10;
              int v634 = *(_DWORD *)(*(void *)v11 + 88);
              if (v634)
              {
                unint64_t v635 = sub_1CC1F2FD0(a2, v634 - 1);
                if (v635)
                {
                  uint64_t v636 = v635;
                  v637 = *(unsigned __int8 ***)(a2 + 664);
                  unint64_t v638 = *(void *)(a2 + 672);
                  if ((unint64_t)v637 >= v638)
                  {
                    std::string::size_type v640 = *(char **)(a2 + 656);
                    uint64_t v641 = ((char *)v637 - v640) >> 4;
                    unint64_t v642 = v641 + 1;
                    if ((unint64_t)(v641 + 1) >> 60) {
                      abort();
                    }
                    uint64_t v643 = v638 - (void)v640;
                    if (v643 >> 3 > v642) {
                      unint64_t v642 = v643 >> 3;
                    }
                    if ((unint64_t)v643 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v644 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v644 = v642;
                    }
                    if (v644)
                    {
                      if (v644 >> 60) {
                        sub_1CB833614();
                      }
                      int v645 = (char *)operator new(16 * v644);
                    }
                    else
                    {
                      int v645 = 0;
                    }
                    int v646 = (unsigned __int8 **)&v645[16 * v641];
                    void *v646 = v633;
                    v646[1] = v636;
                    int v639 = v646 + 2;
                    if (v637 != (unsigned __int8 **)v640)
                    {
                      do
                      {
                        *((_OWORD *)v646 - 1) = *((_OWORD *)v637 - 1);
                        v646 -= 2;
                        v637 -= 2;
                      }
                      while (v637 != (unsigned __int8 **)v640);
                      v637 = *(unsigned __int8 ***)(a2 + 656);
                    }
                    *(void *)(a2 + 656) = v646;
                    *(void *)(a2 + 664) = v639;
                    *(void *)(a2 + 672) = &v645[16 * v644];
                    if (v637) {
                      operator delete(v637);
                    }
                  }
                  else
                  {
                    llvm::GlobalValue *v637 = v633;
                    v637[1] = v635;
                    int v639 = v637 + 2;
                  }
                  *(void *)(a2 + 664) = v639;
                }
              }
              goto LABEL_1112;
            }
            int v325 = v174;
            uint64_t v326 = v172;
            uint64_t v327 = 0;
LABEL_886:
            uint64_t v498 = 0;
            goto LABEL_887;
          }
          int v325 = v174;
          uint64_t v326 = v172;
          uint64_t v327 = 0;
        }
        else
        {
          int v325 = v174;
          uint64_t v326 = v172;
          uint64_t v327 = 0;
          int v328 = 0;
        }
      }
      char v497 = 0;
      goto LABEL_886;
    case 21:
      unsigned int v33 = a3[2];
      if (v33 - 22 <= 0xFFFFFFFB) {
        goto LABEL_298;
      }
      unsigned int v34 = *(uint64_t **)a3;
      unint64_t v35 = **(void **)a3;
      if ((v35 & 4) != 0)
      {
        int v249 = *((_DWORD *)v34 + 22);
        int v37 = (v249 & 0x200000) != 0 ? v249 & 0x3FDFFFFF : *((_DWORD *)v34 + 22);
        unsigned int v38 = (v249 & 0x200000) != 0 ? *((_DWORD *)v34 + 18) | 0x100 : *((_DWORD *)v34 + 18);
      }
      else
      {
        int v36 = *((_DWORD *)v34 + 26);
        int v37 = (v36 & 0x200000) != 0 ? v36 & 0x3FDFFFFF : *((_DWORD *)v34 + 26);
        unsigned int v38 = ((v36 & 0x200000u) >> 13) | (4 * (v34[7] != 0)) | (8 * (v34[8] != 0)) | (16 * (v34[14] != 0)) | v34[11] & 3;
      }
      int v250 = v35 & 1 | ((v38 & 8) != 0);
      unsigned __int8 v968 = v35 & 1 | ((v38 & 8) != 0);
      uint64_t v251 = (v35 >> 1) & 1;
      if ((v35 & 4) == 0 && v33 <= 0x12 && v251) {
        goto LABEL_298;
      }
      if ((v35 & 4) == 0) {
        LOBYTE(v251) = 1;
      }
      if ((v251 & 1) == 0) {
        goto LABEL_298;
      }
      int v931 = v37;
      if ((v35 & 4) != 0)
      {
        BOOL v906 = v33 > 0x12;
        BOOL v921 = 0;
        int v253 = 0;
        int v254 = 0;
        BOOL v943 = v33 > 0x13;
        BOOL v255 = 1;
        BOOL v256 = 1;
      }
      else
      {
        BOOL v906 = 0;
        BOOL v943 = 0;
        BOOL v252 = v33 > 0x12;
        int v253 = 2;
        if (v33 <= 0x12) {
          int v254 = 2;
        }
        else {
          int v254 = 3;
        }
        if ((v35 & 2) != 0) {
          BOOL v252 = 0;
        }
        BOOL v921 = v252;
        BOOL v255 = v33 > 0x13;
        BOOL v256 = v33 > 0x14;
      }
      uint64_t v602 = v34[v254 | 0xCu];
      if (v602)
      {
        unsigned int v960 = sub_1CC1F4430((uint64_t)v967, (v602 - 1));
        int v250 = v968;
        unsigned int v34 = *(uint64_t **)v11;
      }
      else
      {
        unsigned int v960 = 0;
      }
      int v914 = *(void **)(a2 + 208);
      int v624 = *((_DWORD *)v34 + 2);
      if (v250)
      {
        if (v624) {
          v625 = sub_1CC1F4430((uint64_t)v967, (v624 - 1));
        }
        else {
          v625 = 0;
        }
        uint64_t v904 = sub_1CC1F426C(a2, (llvm::MDNode *)v625);
        uint64_t v665 = *(uint64_t **)v11;
        int v666 = *(_DWORD *)(*(void *)v11 + 16);
        if (v666)
        {
          int v899 = sub_1CC1F4430((uint64_t)v967, (v666 - 1));
          uint64_t v665 = *(uint64_t **)v11;
        }
        else
        {
          int v899 = 0;
        }
        int v667 = *((_DWORD *)v665 + 6);
        if (v667)
        {
          v893 = sub_1CC1F4430((uint64_t)v967, (v667 - 1));
          uint64_t v665 = *(uint64_t **)v11;
        }
        else
        {
          v893 = 0;
        }
        int v668 = *((_DWORD *)v665 + 8);
        if (v668)
        {
          char v887 = sub_1CC1F4430((uint64_t)v967, (v668 - 1));
          uint64_t v665 = *(uint64_t **)v11;
        }
        else
        {
          char v887 = 0;
        }
        int v879 = *((_DWORD *)v665 + 10);
        int v669 = *((_DWORD *)v665 + 12);
        if (v669)
        {
          v870 = sub_1CC1F4430((uint64_t)v967, (v669 - 1));
          uint64_t v665 = *(uint64_t **)v11;
        }
        else
        {
          v870 = 0;
        }
        uint64_t v865 = v665[v253 + 7];
        uint64_t v670 = v665[v253 | 8u];
        if (v670) {
          uint64_t v671 = sub_1CC1F4430((uint64_t)v967, (v670 - 1));
        }
        else {
          uint64_t v671 = 0;
        }
        uint64_t v672 = sub_1CC1F426C(a2, (llvm::MDNode *)v671);
        uint64_t v673 = *(uint64_t **)v11;
        uint64_t v860 = (uint64_t)v672;
        if (v255) {
          uint64_t v856 = v673[v254 | 0x10u];
        }
        else {
          LODWORD(v856) = 0;
        }
        uint64_t v853 = v673[v253 + 10];
        uint64_t v674 = v673[v254 + 13];
        if (v674)
        {
          int v850 = sub_1CC1F4430((uint64_t)v967, (v674 - 1));
          uint64_t v673 = *(uint64_t **)v11;
        }
        else
        {
          int v850 = 0;
        }
        uint64_t v675 = v673[v254 + 14];
        if (v675)
        {
          int v848 = sub_1CC1F4430((uint64_t)v967, (v675 - 1));
          uint64_t v673 = *(uint64_t **)v11;
        }
        else
        {
          int v848 = 0;
        }
        uint64_t v676 = v673[v254 + 15];
        if (v676) {
          unsigned int v677 = sub_1CC1F4430((uint64_t)v967, (v676 - 1));
        }
        else {
          unsigned int v677 = 0;
        }
        if (v256 && (uint64_t v678 = *(void *)(*(void *)v11 + 8 * (v254 + 17)), v678)) {
          int v679 = sub_1CC1F4430((uint64_t)v967, (v678 - 1));
        }
        else {
          int v679 = 0;
        }
        uint64_t v680 = v35 << 62;
        if (v906 && (uint64_t v681 = *(void *)(*(void *)v11 + 8 * (v254 + 18)), v681)) {
          int v682 = sub_1CC1F4430((uint64_t)v967, (v681 - 1));
        }
        else {
          int v682 = 0;
        }
        uint64_t v683 = (unint64_t)v960 & (v680 >> 63);
        if (v943 && (uint64_t v684 = *(void *)(*(void *)v11 + 8 * (v254 + 19)), v684)) {
          uint64_t v685 = sub_1CC1F4430((uint64_t)v967, (v684 - 1));
        }
        else {
          uint64_t v685 = 0;
        }
        BOOL v686 = v921;
        std::string::size_type v687 = (unsigned __int8 *)llvm::DISubprogram::getImpl(v914, v904, (uint64_t)v899, v893, v887, v879, v870, v865, v860, __SPAIR64__(v856, v853), __SPAIR64__(v38, v931), v683, (uint64_t)v850, (uint64_t)v848, (uint64_t)v677, (uint64_t)v679, (uint64_t)v682, (uint64_t)v685, 1,
                                    1);
      }
      else
      {
        if (v624) {
          unint64_t v626 = sub_1CC1F4430((uint64_t)v967, (v624 - 1));
        }
        else {
          unint64_t v626 = 0;
        }
        int v905 = sub_1CC1F426C(a2, (llvm::MDNode *)v626);
        unint64_t v731 = *(uint64_t **)v11;
        int v732 = *(_DWORD *)(*(void *)v11 + 16);
        if (v732)
        {
          uint64_t v900 = sub_1CC1F4430((uint64_t)v967, (v732 - 1));
          unint64_t v731 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v900 = 0;
        }
        int v733 = *((_DWORD *)v731 + 6);
        if (v733)
        {
          uint64_t v894 = sub_1CC1F4430((uint64_t)v967, (v733 - 1));
          unint64_t v731 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v894 = 0;
        }
        int v734 = *((_DWORD *)v731 + 8);
        if (v734)
        {
          v888 = sub_1CC1F4430((uint64_t)v967, (v734 - 1));
          unint64_t v731 = *(uint64_t **)v11;
        }
        else
        {
          v888 = 0;
        }
        int v880 = *((_DWORD *)v731 + 10);
        int v735 = *((_DWORD *)v731 + 12);
        if (v735)
        {
          uint64_t v871 = sub_1CC1F4430((uint64_t)v967, (v735 - 1));
          unint64_t v731 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v871 = 0;
        }
        uint64_t v866 = v731[v253 + 7];
        uint64_t v736 = v731[v253 | 8u];
        if (v736) {
          uint64_t v737 = sub_1CC1F4430((uint64_t)v967, (v736 - 1));
        }
        else {
          uint64_t v737 = 0;
        }
        uint64_t v738 = sub_1CC1F426C(a2, (llvm::MDNode *)v737);
        uint64_t v739 = *(uint64_t **)v11;
        uint64_t v861 = (uint64_t)v738;
        if (v255) {
          uint64_t v857 = v739[v254 | 0x10u];
        }
        else {
          LODWORD(v857) = 0;
        }
        uint64_t v854 = v739[v253 + 10];
        uint64_t v740 = v739[v254 + 13];
        if (v740)
        {
          unsigned int v851 = sub_1CC1F4430((uint64_t)v967, (v740 - 1));
          uint64_t v739 = *(uint64_t **)v11;
        }
        else
        {
          unsigned int v851 = 0;
        }
        uint64_t v741 = v739[v254 + 14];
        if (v741)
        {
          uint64_t v849 = sub_1CC1F4430((uint64_t)v967, (v741 - 1));
          uint64_t v739 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v849 = 0;
        }
        uint64_t v742 = v739[v254 + 15];
        if (v742) {
          unsigned int v743 = sub_1CC1F4430((uint64_t)v967, (v742 - 1));
        }
        else {
          unsigned int v743 = 0;
        }
        if (v256 && (uint64_t v744 = *(void *)(*(void *)v11 + 8 * (v254 + 17)), v744)) {
          int v745 = sub_1CC1F4430((uint64_t)v967, (v744 - 1));
        }
        else {
          int v745 = 0;
        }
        uint64_t v746 = v35 << 62;
        if (v906 && (uint64_t v747 = *(void *)(*(void *)v11 + 8 * (v254 + 18)), v747)) {
          char v748 = sub_1CC1F4430((uint64_t)v967, (v747 - 1));
        }
        else {
          char v748 = 0;
        }
        uint64_t v749 = (unint64_t)v960 & (v746 >> 63);
        if (v943 && (uint64_t v750 = *(void *)(*(void *)v11 + 8 * (v254 + 19)), v750)) {
          __int16 v751 = sub_1CC1F4430((uint64_t)v967, (v750 - 1));
        }
        else {
          __int16 v751 = 0;
        }
        BOOL v686 = v921;
        std::string::size_type v687 = (unsigned __int8 *)llvm::DISubprogram::getImpl(v914, v905, (uint64_t)v900, v894, v888, v880, v871, v866, v861, __SPAIR64__(v857, v854), __SPAIR64__(v38, v931), v749, (uint64_t)v851, (uint64_t)v849, (uint64_t)v743, (uint64_t)v745, (uint64_t)v748, (uint64_t)v751, 0,
                                    1);
      }
      unsigned int v752 = (llvm::MDNode *)v687;
      sub_1CC1F2468(a2, v687, *v10);
      ++*v10;
      if (v960) {
        BOOL v753 = v686;
      }
      else {
        BOOL v753 = 0;
      }
      if (v753 && *v960 == 1)
      {
        uint64_t v754 = *(unsigned char *)(*((void *)v960 + 16) + 16) ? 0 : *((void *)v960 + 16);
        *(void *)&long long v974 = v754;
        if (v754)
        {
          if ((*(unsigned char *)(v754 + 34) & 0x80) != 0)
          {
            sub_1CD4FB17C((_DWORD *)(a2 + 680), (uint64_t *)&v974)[1] = v752;
          }
          else if (*(void *)(v754 + 72) != v754 + 72)
          {
            llvm::Value::setMetadata((uint64_t ***)v754, 0, v752);
          }
        }
      }
      goto LABEL_1112;
    case 22:
      if (a3[2] != 5) {
        goto LABEL_298;
      }
      __int16 v83 = *(uint64_t **)a3;
      uint64_t v84 = **(void **)a3;
      unsigned __int8 v968 = v84 != 0;
      uint64_t v85 = *(void **)(a2 + 208);
      int v86 = *((_DWORD *)v83 + 2);
      if (v84)
      {
        if (v86)
        {
          uint64_t v87 = sub_1CC1F4430((uint64_t)v967, (v86 - 1));
          __int16 v83 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v87 = 0;
        }
        int v394 = *((_DWORD *)v83 + 4);
        if (v394)
        {
          unint64_t v395 = sub_1CC1F4430((uint64_t)v967, (v394 - 1));
          __int16 v83 = *(uint64_t **)v11;
        }
        else
        {
          unint64_t v395 = 0;
        }
        int v400 = *((_DWORD *)v83 + 6);
        unsigned int v401 = *((_DWORD *)v83 + 8);
        int v402 = v85;
        uint64_t v403 = (uint64_t)v87;
        int v404 = 1;
      }
      else
      {
        if (v86)
        {
          unint64_t v274 = sub_1CC1F4430((uint64_t)v967, (v86 - 1));
          __int16 v83 = *(uint64_t **)v11;
        }
        else
        {
          unint64_t v274 = 0;
        }
        int v549 = *((_DWORD *)v83 + 4);
        if (v549)
        {
          unint64_t v395 = sub_1CC1F4430((uint64_t)v967, (v549 - 1));
          __int16 v83 = *(uint64_t **)v11;
        }
        else
        {
          unint64_t v395 = 0;
        }
        int v400 = *((_DWORD *)v83 + 6);
        unsigned int v401 = *((_DWORD *)v83 + 8);
        int v402 = v85;
        uint64_t v403 = (uint64_t)v274;
        int v404 = 0;
      }
      uint64_t Impl = (uint64_t)llvm::DILexicalBlock::getImpl(v402, v403, (uint64_t)v395, v400, v401, v404, 1);
      goto LABEL_1109;
    case 23:
      if (a3[2] != 4) {
        goto LABEL_298;
      }
      unint64_t v186 = *(uint64_t **)a3;
      uint64_t v187 = **(void **)a3;
      unsigned __int8 v968 = v187 != 0;
      unsigned int v188 = *(void **)(a2 + 208);
      int v189 = *((_DWORD *)v186 + 2);
      if (v187)
      {
        if (v189)
        {
          uint64_t v190 = sub_1CC1F4430((uint64_t)v967, (v189 - 1));
          unint64_t v186 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v190 = 0;
        }
        int v445 = *((_DWORD *)v186 + 4);
        if (v445)
        {
          uint64_t v446 = sub_1CC1F4430((uint64_t)v967, (v445 - 1));
          unint64_t v186 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v446 = 0;
        }
        int v447 = *((_DWORD *)v186 + 6);
        int v448 = v188;
        uint64_t v449 = (uint64_t)v190;
        int v450 = 1;
      }
      else
      {
        if (v189)
        {
          int v330 = sub_1CC1F4430((uint64_t)v967, (v189 - 1));
          unint64_t v186 = *(uint64_t **)v11;
        }
        else
        {
          int v330 = 0;
        }
        int v590 = *((_DWORD *)v186 + 4);
        if (v590)
        {
          uint64_t v446 = sub_1CC1F4430((uint64_t)v967, (v590 - 1));
          unint64_t v186 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v446 = 0;
        }
        int v447 = *((_DWORD *)v186 + 6);
        int v448 = v188;
        uint64_t v449 = (uint64_t)v330;
        int v450 = 0;
      }
      uint64_t Impl = (uint64_t)llvm::DILexicalBlockFile::getImpl(v448, v449, (uint64_t)v446, v447, v450, 1);
      goto LABEL_1109;
    case 24:
      unsigned int v39 = a3[2];
      if (v39 == 5)
      {
        uint64_t v40 = *(uint64_t **)a3;
        int v41 = *(_DWORD *)(*(void *)a3 + 24);
        if (v41) {
          goto LABEL_31;
        }
        goto LABEL_251;
      }
      if (v39 == 3)
      {
        uint64_t v40 = *(uint64_t **)a3;
        int v41 = *(_DWORD *)(*(void *)a3 + 16);
        if (v41)
        {
LABEL_31:
          int v42 = sub_1CC1F4430((uint64_t)v967, (v41 - 1));
          uint64_t v40 = *(uint64_t **)v11;
LABEL_252:
          unint64_t v228 = *v40;
          unsigned __int8 v968 = *(unsigned char *)v40 & 1;
          unsigned int v229 = *(void **)(a2 + 208);
          int v230 = *((_DWORD *)v40 + 2);
          if (v228)
          {
            if (v230) {
              uint64_t v231 = sub_1CC1F4430((uint64_t)v967, (v230 - 1));
            }
            else {
              uint64_t v231 = 0;
            }
            uint64_t v354 = (v228 >> 1) & 1;
            unint64_t v355 = v229;
            uint64_t v356 = (uint64_t)v42;
            int v357 = 1;
          }
          else
          {
            if (v230) {
              uint64_t v231 = sub_1CC1F4430((uint64_t)v967, (v230 - 1));
            }
            else {
              uint64_t v231 = 0;
            }
            uint64_t v354 = (v228 >> 1) & 1;
            unint64_t v355 = v229;
            uint64_t v356 = (uint64_t)v42;
            int v357 = 0;
          }
          uint64_t Impl = (uint64_t)llvm::DINamespace::getImpl(v355, (uint64_t)v231, v356, v354, v357, 1);
          goto LABEL_1109;
        }
LABEL_251:
        int v42 = 0;
        goto LABEL_252;
      }
      goto LABEL_298;
    case 25:
      if (a3[2] - 5 <= 0xFFFFFFFD) {
        goto LABEL_298;
      }
      uint64_t v74 = *(uint64_t **)a3;
      uint64_t v75 = **(void **)a3;
      unsigned __int8 v968 = v75 != 0;
      long long v76 = *(void **)(a2 + 208);
      int v77 = *((_DWORD *)v74 + 2);
      if (v75)
      {
        if (v77)
        {
          unint64_t v78 = sub_1CC1F4430((uint64_t)v967, (v77 - 1));
          uint64_t v74 = *(uint64_t **)v11;
        }
        else
        {
          unint64_t v78 = 0;
        }
        int v385 = *((_DWORD *)v74 + 4);
        if (v385) {
          char v386 = sub_1CC1F4430((uint64_t)v967, (v385 - 1));
        }
        else {
          char v386 = 0;
        }
        int v387 = sub_1CC1F426C(a2, (llvm::MDNode *)v386);
        char v389 = v11[2] == 4
            && (int v388 = *(_DWORD *)(*(void *)v11 + 24)) != 0
            && sub_1CC1F4430((uint64_t)v967, (v388 - 1)) != 0;
        uint64_t v390 = v76;
        uint64_t v391 = (uint64_t)v78;
        uint64_t v392 = (uint64_t)v387;
        int v393 = 1;
      }
      else
      {
        if (v77)
        {
          long long v272 = sub_1CC1F4430((uint64_t)v967, (v77 - 1));
          uint64_t v74 = *(uint64_t **)v11;
        }
        else
        {
          long long v272 = 0;
        }
        int v547 = *((_DWORD *)v74 + 4);
        if (v547) {
          uint64_t v548 = sub_1CC1F4430((uint64_t)v967, (v547 - 1));
        }
        else {
          uint64_t v548 = 0;
        }
        int v550 = sub_1CC1F426C(a2, (llvm::MDNode *)v548);
        char v389 = v11[2] == 4
            && (int v551 = *(_DWORD *)(*(void *)v11 + 24)) != 0
            && sub_1CC1F4430((uint64_t)v967, (v551 - 1)) != 0;
        uint64_t v390 = v76;
        uint64_t v391 = (uint64_t)v272;
        uint64_t v392 = (uint64_t)v550;
        int v393 = 0;
      }
      uint64_t Impl = (uint64_t)llvm::DITemplateTypeParameter::getImpl(v390, v391, v392, v389, v393, 1);
      goto LABEL_1109;
    case 26:
      if (a3[2] - 7 <= 0xFFFFFFFD) {
        goto LABEL_298;
      }
      uint64_t v59 = *(uint64_t **)a3;
      uint64_t v60 = **(void **)a3;
      unsigned __int8 v968 = v60 != 0;
      uint64_t v61 = *(void **)(a2 + 208);
      int v62 = *((_DWORD *)v59 + 2);
      int v63 = *((_DWORD *)v59 + 4);
      if (v60)
      {
        if (v63)
        {
          uint64_t v64 = sub_1CC1F4430((uint64_t)v967, (v63 - 1));
          uint64_t v59 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v64 = 0;
        }
        int v370 = *((_DWORD *)v59 + 6);
        if (v370) {
          unint64_t v371 = sub_1CC1F4430((uint64_t)v967, (v370 - 1));
        }
        else {
          unint64_t v371 = 0;
        }
        int v372 = sub_1CC1F426C(a2, (llvm::MDNode *)v371);
        uint64_t v373 = *(uint64_t **)v11;
        if (v11[2] == 6)
        {
          int v374 = *((_DWORD *)v373 + 8);
          if (!v374)
          {
            BOOL v375 = 0;
            goto LABEL_821;
          }
          BOOL v375 = sub_1CC1F4430((uint64_t)v967, (v374 - 1)) != 0;
          uint64_t v373 = *(uint64_t **)v11;
          if (v11[2] == 6)
          {
LABEL_821:
            int v376 = *((_DWORD *)v373 + 10);
            if (!v376) {
              goto LABEL_822;
            }
            goto LABEL_493;
          }
        }
        else
        {
          BOOL v375 = 0;
        }
        int v376 = *((_DWORD *)v373 + 8);
        if (!v376)
        {
LABEL_822:
          unint64_t v377 = 0;
          goto LABEL_823;
        }
LABEL_493:
        unint64_t v377 = sub_1CC1F4430((uint64_t)v967, (v376 - 1));
LABEL_823:
        uint64_t v603 = v61;
        int v604 = v62;
        uint64_t v605 = (uint64_t)v64;
        uint64_t v606 = (uint64_t)v372;
        char v607 = v375;
        int v608 = 1;
        goto LABEL_911;
      }
      if (v63)
      {
        unint64_t v271 = sub_1CC1F4430((uint64_t)v967, (v63 - 1));
        uint64_t v59 = *(uint64_t **)v11;
      }
      else
      {
        unint64_t v271 = 0;
      }
      int v533 = *((_DWORD *)v59 + 6);
      if (v533) {
        unsigned int v534 = sub_1CC1F4430((uint64_t)v967, (v533 - 1));
      }
      else {
        unsigned int v534 = 0;
      }
      uint64_t v535 = sub_1CC1F426C(a2, (llvm::MDNode *)v534);
      char v536 = *(uint64_t **)v11;
      if (v11[2] == 6)
      {
        int v537 = *((_DWORD *)v536 + 8);
        if (!v537)
        {
          BOOL v538 = 0;
          goto LABEL_908;
        }
        BOOL v538 = sub_1CC1F4430((uint64_t)v967, (v537 - 1)) != 0;
        char v536 = *(uint64_t **)v11;
        if (v11[2] == 6)
        {
LABEL_908:
          int v539 = *((_DWORD *)v536 + 10);
          if (!v539) {
            goto LABEL_909;
          }
          goto LABEL_708;
        }
      }
      else
      {
        BOOL v538 = 0;
      }
      int v539 = *((_DWORD *)v536 + 8);
      if (!v539)
      {
LABEL_909:
        unint64_t v377 = 0;
LABEL_910:
        uint64_t v603 = v61;
        int v604 = v62;
        uint64_t v605 = (uint64_t)v271;
        uint64_t v606 = (uint64_t)v535;
        char v607 = v538;
        int v608 = 0;
LABEL_911:
        uint64_t Impl = (uint64_t)llvm::DITemplateValueParameter::getImpl(v603, v604, v605, v606, v607, (uint64_t)v377, v608, 1);
        goto LABEL_1109;
      }
LABEL_708:
      unint64_t v377 = sub_1CC1F4430((uint64_t)v967, (v539 - 1));
      goto LABEL_910;
    case 27:
      unsigned int v108 = a3[2];
      if (v108 - 14 <= 0xFFFFFFFC) {
        goto LABEL_298;
      }
      uint64_t v109 = *(uint64_t **)a3;
      unint64_t v110 = **(void **)a3;
      int v111 = v110 & 1;
      unsigned __int8 v968 = **(unsigned char **)a3 & 1;
      unint64_t v112 = v110 >> 1;
      if (v112)
      {
        if (v112 == 1)
        {
          long long v360 = *(void **)(a2 + 208);
          int v361 = *((_DWORD *)v109 + 2);
          if (v111)
          {
            if (v361)
            {
              uint64_t v958 = sub_1CC1F4430((uint64_t)v967, (v361 - 1));
              uint64_t v109 = *(uint64_t **)v11;
            }
            else
            {
              uint64_t v958 = 0;
            }
            int v706 = *((_DWORD *)v109 + 4);
            if (v706)
            {
              uint64_t v949 = sub_1CC1F4430((uint64_t)v967, (v706 - 1));
              uint64_t v109 = *(uint64_t **)v11;
            }
            else
            {
              uint64_t v949 = 0;
            }
            int v708 = *((_DWORD *)v109 + 6);
            if (v708)
            {
              v937 = sub_1CC1F4430((uint64_t)v967, (v708 - 1));
              uint64_t v109 = *(uint64_t **)v11;
            }
            else
            {
              v937 = 0;
            }
            int v711 = *((_DWORD *)v109 + 8);
            if (v711)
            {
              uint64_t v710 = sub_1CC1F4430((uint64_t)v967, (v711 - 1));
              uint64_t v109 = *(uint64_t **)v11;
            }
            else
            {
              uint64_t v710 = 0;
            }
            int v712 = *((_DWORD *)v109 + 10);
            int v715 = *((_DWORD *)v109 + 12);
            if (v715) {
              unint64_t v716 = sub_1CC1F4430((uint64_t)v967, (v715 - 1));
            }
            else {
              unint64_t v716 = 0;
            }
            int v717 = sub_1CC1F426C(a2, (llvm::MDNode *)v716);
            unint64_t v723 = *(uint64_t **)v11;
            uint64_t v724 = *(void *)(*(void *)v11 + 56);
            uint64_t v725 = *(void *)(*(void *)v11 + 64);
            int v726 = *(_DWORD *)(*(void *)v11 + 80);
            if (v726)
            {
              int v722 = sub_1CC1F4430((uint64_t)v967, (v726 - 1));
              unint64_t v723 = *(uint64_t **)v11;
            }
            else
            {
              int v722 = 0;
            }
            char v727 = v725 != 0;
            char v728 = v724 != 0;
            uint64_t v729 = v723[11];
            v846[4] = 1;
            *(_DWORD *)uint64_t v846 = 1;
          }
          else
          {
            if (v361)
            {
              uint64_t v958 = sub_1CC1F4430((uint64_t)v967, (v361 - 1));
              uint64_t v109 = *(uint64_t **)v11;
            }
            else
            {
              uint64_t v958 = 0;
            }
            int v704 = *((_DWORD *)v109 + 4);
            if (v704)
            {
              uint64_t v949 = sub_1CC1F4430((uint64_t)v967, (v704 - 1));
              uint64_t v109 = *(uint64_t **)v11;
            }
            else
            {
              uint64_t v949 = 0;
            }
            int v707 = *((_DWORD *)v109 + 6);
            if (v707)
            {
              v937 = sub_1CC1F4430((uint64_t)v967, (v707 - 1));
              uint64_t v109 = *(uint64_t **)v11;
            }
            else
            {
              v937 = 0;
            }
            int v709 = *((_DWORD *)v109 + 8);
            if (v709)
            {
              uint64_t v710 = sub_1CC1F4430((uint64_t)v967, (v709 - 1));
              uint64_t v109 = *(uint64_t **)v11;
            }
            else
            {
              uint64_t v710 = 0;
            }
            int v712 = *((_DWORD *)v109 + 10);
            int v713 = *((_DWORD *)v109 + 12);
            if (v713) {
              v714 = sub_1CC1F4430((uint64_t)v967, (v713 - 1));
            }
            else {
              v714 = 0;
            }
            int v717 = sub_1CC1F426C(a2, (llvm::MDNode *)v714);
            unsigned int v718 = *(uint64_t **)v11;
            uint64_t v719 = *(void *)(*(void *)v11 + 56);
            uint64_t v720 = *(void *)(*(void *)v11 + 64);
            int v721 = *(_DWORD *)(*(void *)v11 + 80);
            if (v721)
            {
              int v722 = sub_1CC1F4430((uint64_t)v967, (v721 - 1));
              unsigned int v718 = *(uint64_t **)v11;
            }
            else
            {
              int v722 = 0;
            }
            char v727 = v720 != 0;
            char v728 = v719 != 0;
            uint64_t v729 = v718[11];
            v846[4] = 1;
            *(_DWORD *)uint64_t v846 = 0;
          }
          uint64_t Impl = (uint64_t)llvm::DIGlobalVariable::getImpl(v360, (uint64_t)v958, (uint64_t)v949, (uint64_t)v937, (uint64_t)v710, v712, (uint64_t)v717, v728, v727, (uint64_t)v722, 0, v729, 0, *(int *)v846, v846[4]);
          goto LABEL_1109;
        }
        if (v112 == 2)
        {
          if (v108 >= 0xD && (int v113 = *((_DWORD *)v109 + 24)) != 0)
          {
            int v953 = sub_1CC1F4430((uint64_t)v967, (v113 - 1));
            int v111 = v968;
            uint64_t v109 = *(uint64_t **)v11;
          }
          else
          {
            int v953 = 0;
          }
          int v528 = *((_DWORD *)v109 + 2);
          uint64_t v947 = *(void **)(a2 + 208);
          if (v111)
          {
            if (v528)
            {
              uint64_t v934 = sub_1CC1F4430((uint64_t)v967, (v528 - 1));
              uint64_t v109 = *(uint64_t **)v11;
            }
            else
            {
              uint64_t v934 = 0;
            }
            int v688 = *((_DWORD *)v109 + 4);
            if (v688)
            {
              unint64_t v924 = sub_1CC1F4430((uint64_t)v967, (v688 - 1));
              uint64_t v109 = *(uint64_t **)v11;
            }
            else
            {
              unint64_t v924 = 0;
            }
            int v689 = *((_DWORD *)v109 + 6);
            if (v689)
            {
              uint64_t v915 = sub_1CC1F4430((uint64_t)v967, (v689 - 1));
              uint64_t v109 = *(uint64_t **)v11;
            }
            else
            {
              uint64_t v915 = 0;
            }
            int v690 = *((_DWORD *)v109 + 8);
            if (v690)
            {
              uint64_t v691 = sub_1CC1F4430((uint64_t)v967, (v690 - 1));
              uint64_t v109 = *(uint64_t **)v11;
            }
            else
            {
              uint64_t v691 = 0;
            }
            int v692 = *((_DWORD *)v109 + 10);
            int v693 = *((_DWORD *)v109 + 12);
            if (v693) {
              unint64_t v694 = sub_1CC1F4430((uint64_t)v967, (v693 - 1));
            }
            else {
              unint64_t v694 = 0;
            }
            uint64_t v695 = sub_1CC1F426C(a2, (llvm::MDNode *)v694);
            unint64_t v696 = *(uint64_t **)v11;
            uint64_t v697 = *(void *)(*(void *)v11 + 56);
            uint64_t v698 = *(void *)(*(void *)v11 + 64);
            int v699 = *(_DWORD *)(*(void *)v11 + 72);
            if (v699)
            {
              unsigned int v700 = sub_1CC1F4430((uint64_t)v967, (v699 - 1));
              unint64_t v696 = *(uint64_t **)v11;
            }
            else
            {
              unsigned int v700 = 0;
            }
            int v701 = *((_DWORD *)v696 + 20);
            if (v701)
            {
              uint64_t v702 = sub_1CC1F4430((uint64_t)v967, (v701 - 1));
              unint64_t v696 = *(uint64_t **)v11;
            }
            else
            {
              uint64_t v702 = 0;
            }
            uint64_t Impl = (uint64_t)llvm::DIGlobalVariable::getImpl(v947, (uint64_t)v934, (uint64_t)v924, (uint64_t)v915, (uint64_t)v691, v692, (uint64_t)v695, v697 != 0, v698 != 0, (uint64_t)v700, (uint64_t)v702, v696[11], (uint64_t)v953, 1, 1);
          }
          else
          {
            if (v528)
            {
              uint64_t v936 = sub_1CC1F4430((uint64_t)v967, (v528 - 1));
              uint64_t v109 = *(uint64_t **)v11;
            }
            else
            {
              uint64_t v936 = 0;
            }
            int v755 = *((_DWORD *)v109 + 4);
            if (v755)
            {
              uint64_t v925 = sub_1CC1F4430((uint64_t)v967, (v755 - 1));
              uint64_t v109 = *(uint64_t **)v11;
            }
            else
            {
              uint64_t v925 = 0;
            }
            int v756 = *((_DWORD *)v109 + 6);
            if (v756)
            {
              uint64_t v916 = sub_1CC1F4430((uint64_t)v967, (v756 - 1));
              uint64_t v109 = *(uint64_t **)v11;
            }
            else
            {
              uint64_t v916 = 0;
            }
            int v757 = *((_DWORD *)v109 + 8);
            if (v757)
            {
              v758 = sub_1CC1F4430((uint64_t)v967, (v757 - 1));
              uint64_t v109 = *(uint64_t **)v11;
            }
            else
            {
              v758 = 0;
            }
            int v759 = *((_DWORD *)v109 + 10);
            int v760 = *((_DWORD *)v109 + 12);
            if (v760) {
              v761 = sub_1CC1F4430((uint64_t)v967, (v760 - 1));
            }
            else {
              v761 = 0;
            }
            long long v762 = sub_1CC1F426C(a2, (llvm::MDNode *)v761);
            uint64_t v763 = *(uint64_t **)v11;
            uint64_t v764 = *(void *)(*(void *)v11 + 56);
            uint64_t v765 = *(void *)(*(void *)v11 + 64);
            int v766 = *(_DWORD *)(*(void *)v11 + 72);
            if (v766)
            {
              v767 = sub_1CC1F4430((uint64_t)v967, (v766 - 1));
              uint64_t v763 = *(uint64_t **)v11;
            }
            else
            {
              v767 = 0;
            }
            int v768 = *((_DWORD *)v763 + 20);
            if (v768)
            {
              v769 = sub_1CC1F4430((uint64_t)v967, (v768 - 1));
              uint64_t v763 = *(uint64_t **)v11;
            }
            else
            {
              v769 = 0;
            }
            uint64_t Impl = (uint64_t)llvm::DIGlobalVariable::getImpl(v947, (uint64_t)v936, (uint64_t)v925, (uint64_t)v916, (uint64_t)v758, v759, (uint64_t)v762, v764 != 0, v765 != 0, (uint64_t)v767, (uint64_t)v769, v763[11], (uint64_t)v953, 0, 1);
          }
          goto LABEL_1109;
        }
LABEL_298:
        char v67 = "Invalid record";
LABEL_299:
        *(void *)&long long v974 = v67;
        __int16 v976 = 259;
        sub_1CC1EC6B0(v9);
      }
      *(unsigned char *)(a2 + 970) = 1;
      int v362 = *((_DWORD *)v109 + 18);
      if (v362)
      {
        unint64_t v363 = (unint64_t)sub_1CC1F4430((uint64_t)v967, (v362 - 1));
        unsigned int v108 = v11[2];
      }
      else
      {
        unint64_t v363 = 0;
      }
      if (v108 < 0xC)
      {
        LODWORD(v630) = 0;
LABEL_876:
        int v948 = v630;
        if (v363 && *(unsigned char *)v363 == 1)
        {
          uint64_t v631 = *(void *)(v363 + 128);
          int v632 = *(unsigned __int8 *)(v631 + 16);
          if (v631 && v632 == 3)
          {
            unint64_t v363 = 0;
LABEL_1151:
            int v939 = *(void **)(a2 + 208);
            uint64_t v801 = *(uint64_t **)v11;
            int v802 = *(_DWORD *)(*(void *)v11 + 8);
            int v962 = (llvm::Value *)v631;
            if (v968)
            {
              if (v802)
              {
                uint64_t v927 = sub_1CC1F4430((uint64_t)v967, (v802 - 1));
                uint64_t v801 = *(uint64_t **)v11;
              }
              else
              {
                uint64_t v927 = 0;
              }
              int v803 = *((_DWORD *)v801 + 4);
              if (v803)
              {
                v918 = sub_1CC1F4430((uint64_t)v967, (v803 - 1));
                uint64_t v801 = *(uint64_t **)v11;
              }
              else
              {
                v918 = 0;
              }
              int v804 = *((_DWORD *)v801 + 6);
              if (v804)
              {
                int v805 = sub_1CC1F4430((uint64_t)v967, (v804 - 1));
                uint64_t v801 = *(uint64_t **)v11;
              }
              else
              {
                int v805 = 0;
              }
              int v806 = *((_DWORD *)v801 + 8);
              if (v806)
              {
                v807 = sub_1CC1F4430((uint64_t)v967, (v806 - 1));
                uint64_t v801 = *(uint64_t **)v11;
              }
              else
              {
                v807 = 0;
              }
              int v808 = *((_DWORD *)v801 + 10);
              int v809 = *((_DWORD *)v801 + 12);
              if (v809) {
                v810 = sub_1CC1F4430((uint64_t)v967, (v809 - 1));
              }
              else {
                v810 = 0;
              }
              unsigned int v811 = sub_1CC1F426C(a2, (llvm::MDNode *)v810);
              char v812 = *(uint64_t **)v11;
              uint64_t v813 = *(void *)(*(void *)v11 + 56);
              uint64_t v814 = v812[8];
              int v815 = *((_DWORD *)v812 + 20);
              if (v815) {
                __int16 v816 = sub_1CC1F4430((uint64_t)v967, (v815 - 1));
              }
              else {
                __int16 v816 = 0;
              }
              v817 = llvm::DIGlobalVariable::getImpl(v939, (uint64_t)v927, (uint64_t)v918, (uint64_t)v805, (uint64_t)v807, v808, (uint64_t)v811, v813 != 0, v814 != 0, (uint64_t)v816, 0, v948, 0, 1, 1);
            }
            else
            {
              if (v802)
              {
                unint64_t v928 = sub_1CC1F4430((uint64_t)v967, (v802 - 1));
                uint64_t v801 = *(uint64_t **)v11;
              }
              else
              {
                unint64_t v928 = 0;
              }
              int v818 = *((_DWORD *)v801 + 4);
              if (v818)
              {
                int v919 = sub_1CC1F4430((uint64_t)v967, (v818 - 1));
                uint64_t v801 = *(uint64_t **)v11;
              }
              else
              {
                int v919 = 0;
              }
              int v819 = *((_DWORD *)v801 + 6);
              if (v819)
              {
                int v820 = sub_1CC1F4430((uint64_t)v967, (v819 - 1));
                uint64_t v801 = *(uint64_t **)v11;
              }
              else
              {
                int v820 = 0;
              }
              int v821 = *((_DWORD *)v801 + 8);
              if (v821)
              {
                v822 = sub_1CC1F4430((uint64_t)v967, (v821 - 1));
                uint64_t v801 = *(uint64_t **)v11;
              }
              else
              {
                v822 = 0;
              }
              int v823 = *((_DWORD *)v801 + 10);
              int v824 = *((_DWORD *)v801 + 12);
              if (v824) {
                v825 = sub_1CC1F4430((uint64_t)v967, (v824 - 1));
              }
              else {
                v825 = 0;
              }
              uint64_t v826 = sub_1CC1F426C(a2, (llvm::MDNode *)v825);
              int v827 = *(uint64_t **)v11;
              uint64_t v828 = *(void *)(*(void *)v11 + 56);
              uint64_t v829 = v827[8];
              int v830 = *((_DWORD *)v827 + 20);
              if (v830) {
                unint64_t v831 = sub_1CC1F4430((uint64_t)v967, (v830 - 1));
              }
              else {
                unint64_t v831 = 0;
              }
              v817 = llvm::DIGlobalVariable::getImpl(v939, (uint64_t)v928, (uint64_t)v919, (uint64_t)v820, (uint64_t)v822, v823, (uint64_t)v826, v828 != 0, v829 != 0, (uint64_t)v831, 0, v948, 0, 0, 1);
            }
            uint64_t v832 = (uint64_t)v817;
            if ((unint64_t)v962 | v363)
            {
              int v833 = *(void **)(a2 + 208);
              v834 = (llvm::MDNode *)v363;
              if (!v363) {
                v834 = llvm::DIExpression::getImpl(*(void **)(a2 + 208), 0, 0, 0, 1);
              }
              uint64_t v835 = llvm::DIGlobalVariableExpression::getImpl(v833, v832, (uint64_t)v834, 1, 1);
              if (v962) {
                llvm::Value::addMetadata(v962, 0, v835);
              }
            }
            else
            {
              uint64_t v835 = 0;
            }
            if (v363) {
              char v770 = (unsigned __int8 *)v835;
            }
            else {
              char v770 = (unsigned __int8 *)v832;
            }
            goto LABEL_1110;
          }
          if (v632 == 16)
          {
            uint64_t v793 = *(void **)(a2 + 208);
            *(void *)&long long v974 = 16;
            uint64_t v794 = (void *)(v631 + 24);
            if (*(_DWORD *)(v631 + 32) >= 0x41u) {
              uint64_t v794 = (void *)*v794;
            }
            *((void *)&v974 + 1) = *v794;
            v975[0] = 159;
            unint64_t v363 = (unint64_t)llvm::DIExpression::getImpl(v793, &v974, 3, 0, 1);
          }
          else
          {
            unint64_t v363 = 0;
          }
        }
        uint64_t v631 = 0;
        goto LABEL_1151;
      }
      unint64_t v630 = *(void *)(*(void *)v11 + 88);
      if (!HIDWORD(v630)) {
        goto LABEL_876;
      }
      goto LABEL_356;
    case 28:
      unsigned int v49 = a3[2];
      if (v49 - 11 <= 0xFFFFFFFC) {
        goto LABEL_298;
      }
      uint64_t v50 = *(uint64_t **)a3;
      uint64_t v51 = **(void **)a3;
      int v52 = v51 & 1;
      unsigned __int8 v968 = **(unsigned char **)a3 & 1;
      BOOL v53 = v49 > 8 && (v51 & 2) == 0;
      uint64_t v54 = 7;
      if (v53) {
        uint64_t v54 = 8;
      }
      int v55 = v50[v54];
      if ((v51 & 2) != 0)
      {
        unint64_t v56 = v50[8];
        if (HIDWORD(v56))
        {
LABEL_356:
          char v67 = "Alignment value is too large";
          goto LABEL_299;
        }
        if (v49 >= 0xA)
        {
          int v257 = *((_DWORD *)v50 + 18);
          if (v257)
          {
            v951 = sub_1CC1F4430((uint64_t)v967, (v257 - 1));
            int v52 = v968;
            uint64_t v50 = *(uint64_t **)v11;
            goto LABEL_47;
          }
        }
      }
      else
      {
        LODWORD(v56) = 0;
      }
      v951 = 0;
LABEL_47:
      int v940 = *(void **)(a2 + 208);
      uint64_t v57 = 1;
      if (v53) {
        uint64_t v57 = 2;
      }
      int v58 = v50[v57];
      if (v52)
      {
        if (v58)
        {
          __int16 v929 = sub_1CC1F4430((uint64_t)v967, (v58 - 1));
          uint64_t v50 = *(uint64_t **)v11;
        }
        else
        {
          __int16 v929 = 0;
        }
        uint64_t v516 = v50[v53 | 2u];
        if (v516)
        {
          unsigned int v517 = sub_1CC1F4430((uint64_t)v967, (v516 - 1));
          uint64_t v50 = *(uint64_t **)v11;
        }
        else
        {
          unsigned int v517 = 0;
        }
        int v518 = v56;
        uint64_t v519 = 3;
        if (v53) {
          uint64_t v519 = 4;
        }
        int v520 = v50[v519];
        int v521 = v55;
        if (v520)
        {
          uint64_t v522 = sub_1CC1F4430((uint64_t)v967, (v520 - 1));
          uint64_t v50 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v522 = 0;
        }
        uint64_t v523 = v50[v53 | 4u];
        uint64_t v524 = 5;
        if (v53) {
          uint64_t v524 = 6;
        }
        int v525 = v50[v524];
        if (v525) {
          uint64_t v526 = sub_1CC1F4430((uint64_t)v967, (v525 - 1));
        }
        else {
          uint64_t v526 = 0;
        }
        int v527 = sub_1CC1F426C(a2, (llvm::MDNode *)v526);
        uint64_t Impl = (uint64_t)llvm::DILocalVariable::getImpl(v940, (uint64_t)v929, (uint64_t)v517, (uint64_t)v522, v523, (uint64_t)v527, *(void *)(*(void *)v11 + 8 * (v53 | 6u)), v521, v518, (uint64_t)v951, 1, 1);
      }
      else
      {
        if (v58)
        {
          uint64_t v933 = sub_1CC1F4430((uint64_t)v967, (v58 - 1));
          uint64_t v50 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v933 = 0;
        }
        uint64_t v614 = v50[v53 | 2u];
        if (v614)
        {
          unint64_t v615 = sub_1CC1F4430((uint64_t)v967, (v614 - 1));
          uint64_t v50 = *(uint64_t **)v11;
        }
        else
        {
          unint64_t v615 = 0;
        }
        uint64_t v616 = 3;
        if (v53) {
          uint64_t v616 = 4;
        }
        int v617 = v50[v616];
        if (v617)
        {
          int v618 = sub_1CC1F4430((uint64_t)v967, (v617 - 1));
          uint64_t v50 = *(uint64_t **)v11;
        }
        else
        {
          int v618 = 0;
        }
        uint64_t v619 = v50[v53 | 4u];
        uint64_t v620 = 5;
        if (v53) {
          uint64_t v620 = 6;
        }
        int v621 = v50[v620];
        if (v621) {
          v622 = sub_1CC1F4430((uint64_t)v967, (v621 - 1));
        }
        else {
          v622 = 0;
        }
        long long v623 = sub_1CC1F426C(a2, (llvm::MDNode *)v622);
        uint64_t Impl = (uint64_t)llvm::DILocalVariable::getImpl(v940, (uint64_t)v933, (uint64_t)v615, (uint64_t)v618, v619, (uint64_t)v623, *(void *)(*(void *)v11 + 8 * (v53 | 6u)), v55, v56, (uint64_t)v951, 0, 1);
      }
      goto LABEL_1109;
    case 29:
      uint64_t v196 = a3[2];
      if (!v196) {
        goto LABEL_298;
      }
      uint64_t v197 = (unsigned __int8 **)(*(void *)a3 + 8);
      unint64_t v198 = **(void **)a3;
      unsigned __int8 v968 = **(unsigned char **)a3 & 1;
      uint64_t v970 = v197;
      *(void *)&long long v971 = v196 - 1;
      *(void *)&long long v974 = v975;
      *((void *)&v974 + 1) = 0x600000000;
      sub_1CD4FAC38(a1, a2, v198 >> 1, (uint64_t)&v970, (unsigned int *)&v974);
      if (*(void *)v9)
      {
        if ((void *)v974 != v975) {
          free((void *)v974);
        }
        return;
      }
      unint64_t v730 = (unsigned __int8 *)llvm::DIExpression::getImpl(*(void **)(a2 + 208), v970, v971, v968, 1);
      sub_1CC1F2468(a2, v730, *v10);
      ++*v10;
      uint64_t v206 = (void *)v974;
      if ((void *)v974 != v975) {
        goto LABEL_215;
      }
      goto LABEL_1112;
    case 30:
      if (a3[2] != 8) {
        goto LABEL_298;
      }
      uint64_t v191 = *(uint64_t **)a3;
      uint64_t v192 = **(void **)a3;
      unsigned __int8 v968 = v192 != 0;
      uint64_t v193 = *(void **)(a2 + 208);
      int v194 = *((_DWORD *)v191 + 2);
      if (v192)
      {
        if (v194)
        {
          uint64_t v195 = sub_1CC1F4430((uint64_t)v967, (v194 - 1));
          uint64_t v191 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v195 = 0;
        }
        int v451 = *((_DWORD *)v191 + 4);
        if (v451)
        {
          unint64_t v452 = sub_1CC1F4430((uint64_t)v967, (v451 - 1));
          uint64_t v191 = *(uint64_t **)v11;
        }
        else
        {
          unint64_t v452 = 0;
        }
        int v453 = *((_DWORD *)v191 + 6);
        int v454 = *((_DWORD *)v191 + 8);
        if (v454)
        {
          int v455 = sub_1CC1F4430((uint64_t)v967, (v454 - 1));
          uint64_t v191 = *(uint64_t **)v11;
        }
        else
        {
          int v455 = 0;
        }
        int v456 = *((_DWORD *)v191 + 10);
        if (v456)
        {
          uint64_t v457 = sub_1CC1F4430((uint64_t)v967, (v456 - 1));
          uint64_t v191 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v457 = 0;
        }
        int v458 = *((_DWORD *)v191 + 12);
        int v459 = *((_DWORD *)v191 + 14);
        if (v459) {
          uint64_t v460 = sub_1CC1F4430((uint64_t)v967, (v459 - 1));
        }
        else {
          uint64_t v460 = 0;
        }
        std::string v461 = sub_1CC1F426C(a2, (llvm::MDNode *)v460);
        uint64_t Impl = (uint64_t)llvm::DIObjCProperty::getImpl(v193, (uint64_t)v195, (uint64_t)v452, v453, (uint64_t)v455, (uint64_t)v457, v458, (uint64_t)v461, 1, 1);
      }
      else
      {
        if (v194)
        {
          unsigned int v331 = sub_1CC1F4430((uint64_t)v967, (v194 - 1));
          uint64_t v191 = *(uint64_t **)v11;
        }
        else
        {
          unsigned int v331 = 0;
        }
        int v591 = *((_DWORD *)v191 + 4);
        if (v591)
        {
          int v592 = sub_1CC1F4430((uint64_t)v967, (v591 - 1));
          uint64_t v191 = *(uint64_t **)v11;
        }
        else
        {
          int v592 = 0;
        }
        int v593 = *((_DWORD *)v191 + 6);
        int v594 = *((_DWORD *)v191 + 8);
        if (v594)
        {
          std::string::size_type v595 = sub_1CC1F4430((uint64_t)v967, (v594 - 1));
          uint64_t v191 = *(uint64_t **)v11;
        }
        else
        {
          std::string::size_type v595 = 0;
        }
        int v596 = *((_DWORD *)v191 + 10);
        if (v596)
        {
          int v597 = sub_1CC1F4430((uint64_t)v967, (v596 - 1));
          uint64_t v191 = *(uint64_t **)v11;
        }
        else
        {
          int v597 = 0;
        }
        int v598 = *((_DWORD *)v191 + 12);
        int v599 = *((_DWORD *)v191 + 14);
        if (v599) {
          uint64_t v600 = sub_1CC1F4430((uint64_t)v967, (v599 - 1));
        }
        else {
          uint64_t v600 = 0;
        }
        size_t v601 = sub_1CC1F426C(a2, (llvm::MDNode *)v600);
        uint64_t Impl = (uint64_t)llvm::DIObjCProperty::getImpl(v193, (uint64_t)v331, (uint64_t)v592, v593, (uint64_t)v595, (uint64_t)v597, v598, (uint64_t)v601, 0, 1);
      }
      goto LABEL_1109;
    case 31:
      unsigned int v73 = a3[2];
      if (v73 - 9 <= 0xFFFFFFFC)
      {
        char v67 = "Invalid DIImportedEntity record";
        goto LABEL_299;
      }
      uint64_t v208 = *(uint64_t **)a3;
      uint64_t v209 = **(void **)a3;
      unsigned __int8 v968 = v209 != 0;
      uint64_t v210 = *(void **)(a2 + 208);
      int v211 = *((_DWORD *)v208 + 4);
      int v954 = *((_DWORD *)v208 + 2);
      if (v209)
      {
        if (v211)
        {
          char v942 = sub_1CC1F4430((uint64_t)v967, (v211 - 1));
          uint64_t v208 = *(uint64_t **)v11;
        }
        else
        {
          char v942 = 0;
        }
        int v378 = *((_DWORD *)v208 + 6);
        if (v378) {
          uint64_t v379 = sub_1CC1F4430((uint64_t)v967, (v378 - 1));
        }
        else {
          uint64_t v379 = 0;
        }
        unint64_t v380 = sub_1CC1F426C(a2, (llvm::MDNode *)v379);
        unsigned int v381 = *(uint64_t **)v11;
        if (v73 < 7)
        {
          unint64_t v383 = 0;
          int v384 = 0;
        }
        else
        {
          int v382 = *((_DWORD *)v381 + 12);
          if (v382)
          {
            unint64_t v383 = sub_1CC1F4430((uint64_t)v967, (v382 - 1));
            unsigned int v381 = *(uint64_t **)v11;
          }
          else
          {
            unint64_t v383 = 0;
          }
          int v384 = *((_DWORD *)v381 + 8);
        }
        int v609 = v210;
        int v610 = *((_DWORD *)v381 + 10);
        if (v610) {
          unsigned int v611 = sub_1CC1F4430((uint64_t)v967, (v610 - 1));
        }
        else {
          unsigned int v611 = 0;
        }
        if (v73 >= 8 && (int v612 = *(_DWORD *)(*(void *)v11 + 56)) != 0) {
          unint64_t v613 = sub_1CC1F4430((uint64_t)v967, (v612 - 1));
        }
        else {
          unint64_t v613 = 0;
        }
        uint64_t Impl = (uint64_t)llvm::DIImportedEntity::getImpl(v609, v954, (uint64_t)v942, (uint64_t)v380, (uint64_t)v383, v384, (uint64_t)v611, (uint64_t)v613, 1, 1);
      }
      else
      {
        if (v211)
        {
          v944 = sub_1CC1F4430((uint64_t)v967, (v211 - 1));
          uint64_t v208 = *(uint64_t **)v11;
        }
        else
        {
          v944 = 0;
        }
        int v540 = *((_DWORD *)v208 + 6);
        if (v540) {
          v541 = sub_1CC1F4430((uint64_t)v967, (v540 - 1));
        }
        else {
          v541 = 0;
        }
        unint64_t v542 = sub_1CC1F426C(a2, (llvm::MDNode *)v541);
        uint64_t v543 = *(uint64_t **)v11;
        if (v73 < 7)
        {
          v545 = 0;
          int v546 = 0;
        }
        else
        {
          int v544 = *((_DWORD *)v543 + 12);
          if (v544)
          {
            v545 = sub_1CC1F4430((uint64_t)v967, (v544 - 1));
            uint64_t v543 = *(uint64_t **)v11;
          }
          else
          {
            v545 = 0;
          }
          int v546 = *((_DWORD *)v543 + 8);
        }
        int v647 = *((_DWORD *)v543 + 10);
        if (v647) {
          int v648 = sub_1CC1F4430((uint64_t)v967, (v647 - 1));
        }
        else {
          int v648 = 0;
        }
        if (v73 >= 8 && (int v649 = *(_DWORD *)(*(void *)v11 + 56)) != 0) {
          uint64_t v650 = sub_1CC1F4430((uint64_t)v967, (v649 - 1));
        }
        else {
          uint64_t v650 = 0;
        }
        uint64_t Impl = (uint64_t)llvm::DIImportedEntity::getImpl(v210, v954, (uint64_t)v944, (uint64_t)v542, (uint64_t)v545, v546, (uint64_t)v648, (uint64_t)v650, 0, 1);
      }
      goto LABEL_1109;
    case 32:
      unsigned int v88 = a3[2];
      if (v88 - 10 <= 0xFFFFFFFA) {
        goto LABEL_298;
      }
      if (v88 <= 7) {
        unsigned int v89 = 1;
      }
      else {
        unsigned int v89 = 2;
      }
      unint64_t v90 = *(uint64_t **)a3;
      uint64_t v91 = **(void **)a3;
      unsigned __int8 v968 = v91 != 0;
      v952 = *(void **)(a2 + 208);
      if (v91)
      {
        if (v88 >= 8 && (int v92 = *((_DWORD *)v90 + 2)) != 0)
        {
          uint64_t v93 = sub_1CC1F4430((uint64_t)v967, (v92 - 1));
          unint64_t v90 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v93 = 0;
        }
        uint64_t v269 = v90[v89];
        if (v269)
        {
          long long v270 = sub_1CC1F4430((uint64_t)v967, (v269 - 1));
          unint64_t v90 = *(uint64_t **)v11;
        }
        else
        {
          long long v270 = 0;
        }
        uint64_t v398 = v90[v89 + 1];
        if (v398)
        {
          unsigned int v399 = sub_1CC1F4430((uint64_t)v967, (v398 - 1));
          unint64_t v90 = *(uint64_t **)v11;
        }
        else
        {
          unsigned int v399 = 0;
        }
        uint64_t v410 = v90[v89 + 2];
        if (v410)
        {
          size_t v411 = sub_1CC1F4430((uint64_t)v967, (v410 - 1));
          unint64_t v90 = *(uint64_t **)v11;
        }
        else
        {
          size_t v411 = 0;
        }
        uint64_t v412 = v90[v89 + 3];
        if (v412)
        {
          uint64_t v413 = sub_1CC1F4430((uint64_t)v967, (v412 - 1));
          unint64_t v90 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v413 = 0;
        }
        uint64_t v414 = v90[v89 | 4];
        if (v414) {
          uint64_t v415 = sub_1CC1F4430((uint64_t)v967, (v414 - 1));
        }
        else {
          uint64_t v415 = 0;
        }
        unsigned int v416 = v11[2];
        if (v416 >= 8)
        {
          int v417 = *(_DWORD *)(*(void *)v11 + 56);
          if (v416 != 8)
          {
            char v418 = *(void *)(*(void *)v11 + 64) != 0;
            goto LABEL_687;
          }
        }
        else
        {
          int v417 = 0;
        }
        char v418 = 0;
LABEL_687:
        uint64_t Impl = (uint64_t)llvm::DIModule::getImpl(v952, (uint64_t)v93, (uint64_t)v270, (uint64_t)v399, (uint64_t)v411, (uint64_t)v413, (uint64_t)v415, v417, v418, 1, 1);
        goto LABEL_1109;
      }
      if (v88 >= 8 && (int v275 = *((_DWORD *)v90 + 2)) != 0)
      {
        size_t v276 = sub_1CC1F4430((uint64_t)v967, (v275 - 1));
        unint64_t v90 = *(uint64_t **)v11;
      }
      else
      {
        size_t v276 = 0;
      }
      uint64_t v352 = v90[v89];
      if (v352)
      {
        int v353 = sub_1CC1F4430((uint64_t)v967, (v352 - 1));
        unint64_t v90 = *(uint64_t **)v11;
      }
      else
      {
        int v353 = 0;
      }
      uint64_t v553 = v90[v89 + 1];
      if (v553)
      {
        size_t v554 = sub_1CC1F4430((uint64_t)v967, (v553 - 1));
        unint64_t v90 = *(uint64_t **)v11;
      }
      else
      {
        size_t v554 = 0;
      }
      uint64_t v555 = v90[v89 + 2];
      if (v555)
      {
        uint64_t v556 = sub_1CC1F4430((uint64_t)v967, (v555 - 1));
        unint64_t v90 = *(uint64_t **)v11;
      }
      else
      {
        uint64_t v556 = 0;
      }
      uint64_t v557 = v90[v89 + 3];
      if (v557)
      {
        v558 = sub_1CC1F4430((uint64_t)v967, (v557 - 1));
        unint64_t v90 = *(uint64_t **)v11;
      }
      else
      {
        v558 = 0;
      }
      uint64_t v559 = v90[v89 | 4];
      if (v559) {
        unsigned int v560 = sub_1CC1F4430((uint64_t)v967, (v559 - 1));
      }
      else {
        unsigned int v560 = 0;
      }
      unsigned int v561 = v11[2];
      if (v561 >= 8)
      {
        int v562 = *(_DWORD *)(*(void *)v11 + 56);
        if (v561 != 8)
        {
          char v563 = *(void *)(*(void *)v11 + 64) != 0;
          goto LABEL_870;
        }
      }
      else
      {
        int v562 = 0;
      }
      char v563 = 0;
LABEL_870:
      uint64_t Impl = (uint64_t)llvm::DIModule::getImpl(v952, (uint64_t)v276, (uint64_t)v353, (uint64_t)v554, (uint64_t)v556, (uint64_t)v558, (uint64_t)v560, v562, v563, 0, 1);
LABEL_1109:
      char v770 = (unsigned __int8 *)Impl;
LABEL_1110:
      unsigned int v771 = *v10;
      uint64_t v772 = a2;
LABEL_1111:
      sub_1CC1F2468(v772, v770, v771);
      ++*v10;
      goto LABEL_1112;
    case 33:
      if (a3[2] != 5) {
        goto LABEL_298;
      }
      uint64_t v145 = *(uint64_t **)a3;
      uint64_t v146 = **(void **)a3;
      unsigned __int8 v968 = v146 != 0;
      unsigned int v147 = *(void **)(a2 + 208);
      unsigned int v148 = *((_DWORD *)v145 + 2);
      unsigned int v149 = *((_DWORD *)v145 + 4);
      int v150 = *((_DWORD *)v145 + 6);
      if (v146)
      {
        if (v150)
        {
          int v151 = sub_1CC1F4430((uint64_t)v967, (v150 - 1));
          uint64_t v145 = *(uint64_t **)v11;
        }
        else
        {
          int v151 = 0;
        }
        int v435 = *((_DWORD *)v145 + 8);
        if (v435) {
          uint64_t v436 = sub_1CC1F4430((uint64_t)v967, (v435 - 1));
        }
        else {
          uint64_t v436 = 0;
        }
        int v437 = v147;
        unsigned int v438 = v148;
        unsigned int v439 = v149;
        unint64_t v440 = (unint64_t)v151;
        int v441 = 1;
      }
      else
      {
        if (v150)
        {
          uint64_t v288 = sub_1CC1F4430((uint64_t)v967, (v150 - 1));
          uint64_t v145 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v288 = 0;
        }
        int v577 = *((_DWORD *)v145 + 8);
        if (v577) {
          uint64_t v436 = sub_1CC1F4430((uint64_t)v967, (v577 - 1));
        }
        else {
          uint64_t v436 = 0;
        }
        int v437 = v147;
        unsigned int v438 = v148;
        unsigned int v439 = v149;
        unint64_t v440 = (unint64_t)v288;
        int v441 = 0;
      }
      uint64_t Impl = (uint64_t)llvm::DIMacro::getImpl(v437, v438, v439, v440, (unint64_t)v436, v441, 1);
      goto LABEL_1109;
    case 34:
      if (a3[2] != 5) {
        goto LABEL_298;
      }
      uint64_t v94 = *(uint64_t **)a3;
      uint64_t v95 = **(void **)a3;
      unsigned __int8 v968 = v95 != 0;
      uint64_t v96 = *(void **)(a2 + 208);
      unsigned int v97 = *((_DWORD *)v94 + 2);
      unsigned int v98 = *((_DWORD *)v94 + 4);
      int v99 = *((_DWORD *)v94 + 6);
      if (v95)
      {
        if (v99)
        {
          unint64_t v100 = sub_1CC1F4430((uint64_t)v967, (v99 - 1));
          uint64_t v94 = *(uint64_t **)v11;
        }
        else
        {
          unint64_t v100 = 0;
        }
        int v396 = *((_DWORD *)v94 + 8);
        if (v396) {
          uint64_t v397 = sub_1CC1F4430((uint64_t)v967, (v396 - 1));
        }
        else {
          uint64_t v397 = 0;
        }
        unsigned int v405 = v96;
        unsigned int v406 = v97;
        unsigned int v407 = v98;
        unint64_t v408 = (unint64_t)v100;
        int v409 = 1;
      }
      else
      {
        if (v99)
        {
          unint64_t v277 = sub_1CC1F4430((uint64_t)v967, (v99 - 1));
          uint64_t v94 = *(uint64_t **)v11;
        }
        else
        {
          unint64_t v277 = 0;
        }
        int v552 = *((_DWORD *)v94 + 8);
        if (v552) {
          uint64_t v397 = sub_1CC1F4430((uint64_t)v967, (v552 - 1));
        }
        else {
          uint64_t v397 = 0;
        }
        unsigned int v405 = v96;
        unsigned int v406 = v97;
        unsigned int v407 = v98;
        unint64_t v408 = (unint64_t)v277;
        int v409 = 0;
      }
      uint64_t Impl = (uint64_t)llvm::DIMacroFile::getImpl(v405, v406, v407, v408, (unint64_t)v397, v409, 1);
      goto LABEL_1109;
    case 35:
      *(void *)&long long v974 = a2;
      *((void *)&v974 + 1) = a8;
      llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataStrings(a1, *(int **)a3, a3[2], a6, a7, (uint64_t (*)(uint64_t, const char *, unint64_t))sub_1CC1F4A18, (uint64_t)&v974, a1);
      goto LABEL_209;
    case 36:
      unsigned int v68 = a3[2];
      if ((v68 & 1) == 0) {
        goto LABEL_298;
      }
      uint64_t v69 = **(void **)(a2 + 192);
      if (((unint64_t)(*(void *)(*(void *)(a2 + 192) + 8) - v69) >> 5) <= **(void **)a3) {
        goto LABEL_298;
      }
      unint64_t v70 = *(unsigned __int8 **)(v69 + 32 * **(void **)a3 + 16);
      unsigned int v71 = v70[16];
      if (v71 > 3 || v71 == 1) {
        goto LABEL_1112;
      }
      llvm::MetadataLoader::MetadataLoaderImpl::parseGlobalObjectAttachment((unsigned __int8 *)a2, (llvm::Value *)v70, *(void *)a3 + 8, v68 - 1, a1);
LABEL_209:
      if (!*(void *)v9) {
        goto LABEL_1112;
      }
      return;
    case 37:
      if (a3[2] != 3) {
        goto LABEL_298;
      }
      int v177 = *(uint64_t **)a3;
      unsigned __int8 v968 = **(void **)a3 != 0;
      int v178 = *((_DWORD *)v177 + 4);
      if (!v178 || (BOOL v179 = sub_1CC1F4430((uint64_t)v967, (v178 - 1))) == 0) {
        BOOL v179 = llvm::DIExpression::getImpl(*(void **)(a2 + 208), 0, 0, 0, 1);
      }
      uint64_t v180 = *(void **)(a2 + 208);
      int v181 = *(_DWORD *)(*(void *)v11 + 8);
      if (v968)
      {
        if (v181) {
          unsigned int v182 = sub_1CC1F4430((uint64_t)v967, (v181 - 1));
        }
        else {
          unsigned int v182 = 0;
        }
        v442 = v180;
        uint64_t v443 = (uint64_t)v179;
        int v444 = 1;
      }
      else
      {
        if (v181) {
          unsigned int v182 = sub_1CC1F4430((uint64_t)v967, (v181 - 1));
        }
        else {
          unsigned int v182 = 0;
        }
        v442 = v180;
        uint64_t v443 = (uint64_t)v179;
        int v444 = 0;
      }
      uint64_t Impl = (uint64_t)llvm::DIGlobalVariableExpression::getImpl(v442, (uint64_t)v182, v443, v444, 1);
      goto LABEL_1109;
    case 40:
      if (a3[2] != 5) {
        goto LABEL_298;
      }
      uint64_t v199 = *(uint64_t **)a3;
      unsigned __int8 v968 = **(void **)a3 & 1;
      uint64_t v200 = *(void **)(a2 + 208);
      int v201 = *((_DWORD *)v199 + 2);
      if (v968)
      {
        if (v201)
        {
          unint64_t v266 = sub_1CC1F4430((uint64_t)v967, (v201 - 1));
          uint64_t v199 = *(uint64_t **)v11;
        }
        else
        {
          unint64_t v266 = 0;
        }
        int v502 = *((_DWORD *)v199 + 4);
        if (v502)
        {
          uint64_t v503 = sub_1CC1F4430((uint64_t)v967, (v502 - 1));
          uint64_t v199 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v503 = 0;
        }
        int v506 = *((_DWORD *)v199 + 6);
        if (v506)
        {
          int v505 = sub_1CC1F4430((uint64_t)v967, (v506 - 1));
          uint64_t v199 = *(uint64_t **)v11;
        }
        else
        {
          int v505 = 0;
        }
        int v507 = *((_DWORD *)v199 + 8);
        v508 = v200;
        uint64_t v509 = (uint64_t)v266;
        uint64_t v510 = (uint64_t)v503;
        int v511 = 1;
      }
      else
      {
        if (v201)
        {
          uint64_t v202 = sub_1CC1F4430((uint64_t)v967, (v201 - 1));
          uint64_t v199 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v202 = 0;
        }
        int v500 = *((_DWORD *)v199 + 4);
        if (v500)
        {
          unint64_t v501 = sub_1CC1F4430((uint64_t)v967, (v500 - 1));
          uint64_t v199 = *(uint64_t **)v11;
        }
        else
        {
          unint64_t v501 = 0;
        }
        int v504 = *((_DWORD *)v199 + 6);
        if (v504)
        {
          int v505 = sub_1CC1F4430((uint64_t)v967, (v504 - 1));
          uint64_t v199 = *(uint64_t **)v11;
        }
        else
        {
          int v505 = 0;
        }
        int v507 = *((_DWORD *)v199 + 8);
        v508 = v200;
        uint64_t v509 = (uint64_t)v202;
        uint64_t v510 = (uint64_t)v501;
        int v511 = 0;
      }
      uint64_t Impl = (uint64_t)llvm::DILabel::getImpl(v508, v509, v510, (uint64_t)v505, v507, v511, 1);
      goto LABEL_1109;
    case 41:
      unsigned int v28 = a3[2];
      if (v28 - 10 <= 0xFFFFFFFD) {
        goto LABEL_298;
      }
      char v29 = *(uint64_t **)a3;
      int v30 = **(void **)a3 != 0;
      unsigned __int8 v968 = **(void **)a3 != 0;
      if (v28 == 8)
      {
        uint64_t v31 = 0;
        unsigned int v32 = 5;
      }
      else
      {
        int v248 = *((_DWORD *)v29 + 10);
        if (v248)
        {
          uint64_t v31 = sub_1CC1F4430((uint64_t)v967, (v248 - 1));
          int v30 = v968;
          char v29 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v31 = 0;
        }
        unsigned int v32 = 6;
      }
      unsigned int v470 = *(void **)(a2 + 208);
      int v471 = *((_DWORD *)v29 + 2);
      int v472 = *((_DWORD *)v29 + 4);
      if (v30)
      {
        if (v472)
        {
          uint64_t v473 = sub_1CC1F4430((uint64_t)v967, (v472 - 1));
          char v29 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v473 = 0;
        }
        int v475 = *((_DWORD *)v29 + 6);
        if (v475)
        {
          uint64_t v476 = sub_1CC1F4430((uint64_t)v967, (v475 - 1));
          char v29 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v476 = 0;
        }
        int v477 = *((_DWORD *)v29 + 8);
        if (v477)
        {
          uint64_t v478 = sub_1CC1F4430((uint64_t)v967, (v477 - 1));
          char v29 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v478 = 0;
        }
        uint64_t Impl = (uint64_t)llvm::DIStringType::getImpl(v470, v471, (uint64_t)v473, (uint64_t)v476, (uint64_t)v478, (uint64_t)v31, v29[v32], v29[v32 + 1], v29[v32 + 2], 1, 1);
      }
      else
      {
        if (v472)
        {
          int v474 = sub_1CC1F4430((uint64_t)v967, (v472 - 1));
          char v29 = *(uint64_t **)v11;
        }
        else
        {
          int v474 = 0;
        }
        int v529 = *((_DWORD *)v29 + 6);
        if (v529)
        {
          uint64_t v530 = sub_1CC1F4430((uint64_t)v967, (v529 - 1));
          char v29 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v530 = 0;
        }
        int v531 = *((_DWORD *)v29 + 8);
        if (v531)
        {
          uint64_t v532 = sub_1CC1F4430((uint64_t)v967, (v531 - 1));
          char v29 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v532 = 0;
        }
        uint64_t Impl = (uint64_t)llvm::DIStringType::getImpl(v470, v471, (uint64_t)v474, (uint64_t)v530, (uint64_t)v532, (uint64_t)v31, v29[v32], v29[v32 + 1], v29[v32 + 2], 0, 1);
      }
      goto LABEL_1109;
    case 44:
      int v157 = *(uint64_t **)a3;
      unsigned __int8 v968 = **(void **)a3 & 1;
      unsigned int v158 = *(void **)(a2 + 208);
      int v159 = *((_DWORD *)v157 + 2);
      if (v968)
      {
        if (v159)
        {
          uint64_t v217 = sub_1CC1F4430((uint64_t)v967, (v159 - 1));
          int v157 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v217 = 0;
        }
        int v291 = *((_DWORD *)v157 + 4);
        if (v291)
        {
          uint64_t v292 = sub_1CC1F4430((uint64_t)v967, (v291 - 1));
          int v157 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v292 = 0;
        }
        int v295 = *((_DWORD *)v157 + 6);
        if (v295)
        {
          unint64_t v296 = sub_1CC1F4430((uint64_t)v967, (v295 - 1));
          int v157 = *(uint64_t **)v11;
        }
        else
        {
          unint64_t v296 = 0;
        }
        int v299 = *((_DWORD *)v157 + 8);
        if (v299)
        {
          unint64_t v298 = sub_1CC1F4430((uint64_t)v967, (v299 - 1));
          int v157 = *(uint64_t **)v11;
        }
        else
        {
          unint64_t v298 = 0;
        }
        int v300 = *((_DWORD *)v157 + 10);
        long long v301 = v158;
        uint64_t v302 = (uint64_t)v217;
        uint64_t v303 = (uint64_t)v292;
        uint64_t v304 = (uint64_t)v296;
        int v305 = 1;
      }
      else
      {
        if (v159)
        {
          uint64_t v160 = sub_1CC1F4430((uint64_t)v967, (v159 - 1));
          int v157 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v160 = 0;
        }
        int v289 = *((_DWORD *)v157 + 4);
        if (v289)
        {
          unint64_t v290 = sub_1CC1F4430((uint64_t)v967, (v289 - 1));
          int v157 = *(uint64_t **)v11;
        }
        else
        {
          unint64_t v290 = 0;
        }
        int v293 = *((_DWORD *)v157 + 6);
        if (v293)
        {
          uint64_t v294 = sub_1CC1F4430((uint64_t)v967, (v293 - 1));
          int v157 = *(uint64_t **)v11;
        }
        else
        {
          uint64_t v294 = 0;
        }
        int v297 = *((_DWORD *)v157 + 8);
        if (v297)
        {
          unint64_t v298 = sub_1CC1F4430((uint64_t)v967, (v297 - 1));
          int v157 = *(uint64_t **)v11;
        }
        else
        {
          unint64_t v298 = 0;
        }
        int v300 = *((_DWORD *)v157 + 10);
        long long v301 = v158;
        uint64_t v302 = (uint64_t)v160;
        uint64_t v303 = (uint64_t)v290;
        uint64_t v304 = (uint64_t)v294;
        int v305 = 0;
      }
      uint64_t Impl = (uint64_t)llvm::DICommonBlock::getImpl(v301, v302, v303, v304, (uint64_t)v298, v300, v305, 1);
      goto LABEL_1109;
    case 45:
      unint64_t v24 = *(void **)(a2 + 208);
      uint64_t v25 = *(uint64_t **)a3;
      int v26 = *(_DWORD *)(*(void *)a3 + 8);
      if (v26)
      {
        __int16 v27 = sub_1CC1F4430((uint64_t)v967, (v26 - 1));
        uint64_t v25 = *(uint64_t **)v11;
      }
      else
      {
        __int16 v27 = 0;
      }
      int v222 = *((_DWORD *)v25 + 4);
      if (v222)
      {
        uint64_t v223 = sub_1CC1F4430((uint64_t)v967, (v222 - 1));
        uint64_t v25 = *(uint64_t **)v11;
      }
      else
      {
        uint64_t v223 = 0;
      }
      int v224 = *((_DWORD *)v25 + 6);
      if (v224)
      {
        uint64_t v225 = sub_1CC1F4430((uint64_t)v967, (v224 - 1));
        uint64_t v25 = *(uint64_t **)v11;
      }
      else
      {
        uint64_t v225 = 0;
      }
      int v226 = *((_DWORD *)v25 + 8);
      if (v226) {
        unint64_t v227 = sub_1CC1F4430((uint64_t)v967, (v226 - 1));
      }
      else {
        unint64_t v227 = 0;
      }
      uint64_t Impl = (uint64_t)llvm::DIGenericSubrange::getImpl(v24, (uint64_t)v27, (uint64_t)v223, (uint64_t)v225, (uint64_t)v227, 0, 1);
      goto LABEL_1109;
    case 46:
      *(void *)&long long v974 = v975;
      *((void *)&v974 + 1) = 0x400000000;
      unsigned int v18 = a3[2];
      if (v18 >= 5) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v18)
      {
        unsigned int v19 = *(unsigned int **)v11;
        uint64_t v20 = 8 * v18;
        do
        {
          int v21 = sub_1CC1F4430((uint64_t)v967, *v19);
          int v22 = *v21;
          if ((v22 - 4) <= 0x1E)
          {
            if ((v21[1] & 0x7F) == 2) {
              uint64_t v207 = "Invalid record: DIArgList should not contain forward refs";
            }
            else {
LABEL_257:
            }
              uint64_t v207 = "Invalid record";
            uint64_t v970 = (unsigned __int8 **)v207;
            __int16 v973 = 259;
            sub_1CC1EC6B0(v9);
          }
          if ((v22 - 1) >= 2) {
            goto LABEL_257;
          }
          if (DWORD2(v974) >= (unint64_t)HIDWORD(v974)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(v974 + 8 * DWORD2(v974)) = v21;
          unsigned int v23 = ++DWORD2(v974);
          v19 += 2;
          v20 -= 8;
        }
        while (v20);
      }
      else
      {
        unsigned int v23 = DWORD2(v974);
      }
      unsigned int v205 = (unsigned __int8 *)llvm::DIArgList::getImpl(*(void **)(a2 + 208), (unsigned char *)v974, (const void *)v23, 0, 1);
LABEL_214:
      sub_1CC1F2468(a2, v205, *v10);
      ++*v10;
      uint64_t v206 = (void *)v974;
      if ((void *)v974 != v975) {
LABEL_215:
      }
        free(v206);
      goto LABEL_1112;
    default:
      goto LABEL_1112;
  }
}

void sub_1CC1F2468(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v18 = a3;
  if (*a2 - 4 <= 0x1E && ((a2[1] & 0x7F) == 2 || *((_DWORD *)a2 + 3)))
  {
    sub_1CD4F9C48(a1 + 48, &v18, (uint64_t)v19);
    a3 = v18;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  if (a3 == v5)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 12);
    if (a3 >= v6)
    {
      if (v6 == -1) {
        sub_1CD0A89A8(0xFFFFFFFFuLL);
      }
      unint64_t v13 = (2 * v6) | 1;
      if (v13 >= 0xFFFFFFFF) {
        uint64_t v14 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v14 = v13;
      }
      size_t v15 = (unsigned __int8 **)malloc_type_malloc(8 * v14, 0x4065EBACuLL);
      if (!v15) {
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      }
      int v16 = v15;
      BOOL v17 = &v15[*(unsigned int *)(a1 + 8)];
      *BOOL v17 = a2;
      llvm::MetadataTracking::track((uint64_t)v17, a2, 2);
      sub_1CC1F3B98(a1, v16);
      if (*(void *)a1 != a1 + 16) {
        free(*(void **)a1);
      }
      *(void *)a1 = v16;
      ++*(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 12) = v14;
    }
    else
    {
      uint64_t v7 = (void *)(*(void *)a1 + 8 * a3);
      void *v7 = a2;
      llvm::MetadataTracking::track((uint64_t)v7, a2, 2);
      ++*(_DWORD *)(a1 + 8);
    }
  }
  else
  {
    if (a3 >= v5)
    {
      sub_1CC1F3A70(a1, a3 + 1);
      a3 = v18;
    }
    uint64_t v8 = (unsigned __int8 **)(*(void *)a1 + 8 * a3);
    uint64_t v9 = *v8;
    if (*v8)
    {
      uint64_t v10 = *((void *)v9 + 2);
      if ((v10 & 4) != 0) {
        llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v10 & 0xFFFFFFFFFFFFFFF8), (llvm::Metadata *)a2);
      }
      v19[0] = 0;
      if (sub_1CD4F9D04(a1 + 24, &v18, v19))
      {
        *(_DWORD *)v19[0] = -2;
        int v12 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 24) -= 2;
        *(_DWORD *)(a1 + 28) = v12;
      }
      llvm::MDNode::deleteTemporary((llvm::MDNode *)v9, v11);
    }
    else
    {
      sub_1CC19E068(v8, a2);
    }
  }
}

unsigned __int8 *sub_1CC1F263C(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = a2;
  unint64_t v4 = (uint64_t)(*(void *)(a1 + 608) - *(void *)(a1 + 600)) >> 4;
  if (v4 > a2)
  {
    return llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMDString((llvm::MetadataLoader::MetadataLoaderImpl *)a1, a2);
  }
  else
  {
    if (*(_DWORD *)(a1 + 8) > a2)
    {
      uint64_t v5 = *(void *)(*(void *)a1 + 8 * a2);
      if (v5) {
        return (unsigned __int8 *)v5;
      }
    }
    if (v4 + ((uint64_t)(*(void *)(a1 + 632) - *(void *)(a1 + 624)) >> 3) > a2)
    {
      memset(v7, 0, sizeof(v7));
      sub_1CC1F2CC8(a1, a2, v7);
      sub_1CC1ED0A4(a1, v7);
      if (*(_DWORD *)(a1 + 8) <= v2) {
        uint64_t v5 = 0;
      }
      else {
        uint64_t v5 = *(void *)(*(void *)a1 + 8 * v2);
      }
      sub_1CC1F3F40((uint64_t)v7);
      return (unsigned __int8 *)v5;
    }
    return sub_1CC1F2FD0(a1, a2);
  }
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataAttachment(uint64_t a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  v46[64] = *MEMORY[0x1E4F143B8];
  llvm::BitstreamCursor::EnterSubBlock(*(llvm::BitstreamCursor **)(a1 + 200), 0, 16, a4);
  if (!*a4)
  {
    uint64_t v10 = v46;
    uint64_t v44 = v46;
    uint64_t v45 = 0x4000000000;
    memset(v38, 0, sizeof(v38));
    while (1)
    {
      uint64_t v11 = *(void *)(a1 + 200);
      while (1)
      {
        sub_1CC1CA5F4(v11, 0, (uint64_t)&v41);
        if (v42) {
          break;
        }
        int v13 = (int)v41;
        if (v41 != 2)
        {
          unint64_t v4 = (unint64_t)v41 >> 32;
          *a4 = 0;
          int v5 = v13;
          goto LABEL_12;
        }
        sub_1CC1C6524(v11, &v39);
        uint64_t v14 = v39;
        if (v42)
        {
          size_t v15 = v41;
          int v41 = 0;
          if (v15) {
            (*(void (**)(char *))(*(void *)v15 + 8))(v15);
          }
        }
        if (v14)
        {
          *a4 = v14;
          goto LABEL_65;
        }
      }
      unint64_t v35 = v41;
      *a4 = v41;
      if (v35) {
        goto LABEL_65;
      }
LABEL_12:
      if (v5 == 2)
      {
LABEL_63:
        int v41 = "Malformed block";
        __int16 v43 = 259;
        llvm::BitcodeErrorCategory(v12);
        operator new();
      }
      if (v5 == 1) {
        break;
      }
      if (!v5) {
        goto LABEL_63;
      }
      LODWORD(v45) = 0;
      Record = (llvm *)llvm::BitstreamCursor::readRecord(*(void **)(a1 + 200), v4, (uint64_t)&v44, 0, (uint64_t)&v39);
      if (v40)
      {
        unsigned int v19 = v39;
        unsigned int v39 = 0;
        *a4 = v19;
        int v18 = 1;
        goto LABEL_26;
      }
      if (v39 == 11)
      {
        int v17 = v45;
        if (!v45)
        {
          int v41 = "Invalid record";
          __int16 v43 = 259;
          llvm::BitcodeErrorCategory(Record);
          operator new();
        }
        if ((v45 & 1) == 0)
        {
          llvm::MetadataLoader::MetadataLoaderImpl::parseGlobalObjectAttachment((unsigned __int8 *)a1, a2, (uint64_t)v44, v45, a4);
          if (*a4) {
            int v18 = 1;
          }
          else {
            int v18 = 2;
          }
          goto LABEL_26;
        }
        if (v45 != 1)
        {
          int v36 = *(llvm::Instruction **)(a3 + 8 * *(void *)v44);
          int v37 = v10;
          unsigned int v21 = 1;
          while (1)
          {
            uint64_t v22 = *(void *)(a1 + 944);
            uint64_t v23 = *(unsigned int *)(a1 + 960);
            if (v23)
            {
              uint64_t v24 = *((void *)v44 + v21);
              LODWORD(v25) = (v23 - 1) & (37 * v24);
              int v26 = (int *)(v22 + 8 * v25);
              int v27 = *v26;
              if (*v26 == v24) {
                goto LABEL_34;
              }
              int v32 = 1;
              while (v27 != -1)
              {
                int v33 = v25 + v32++;
                uint64_t v25 = v33 & (v23 - 1);
                int v27 = *(_DWORD *)(v22 + 8 * v25);
                if (v27 == v24)
                {
                  int v26 = (int *)(v22 + 8 * v25);
                  goto LABEL_34;
                }
              }
            }
            int v26 = (int *)(v22 + 8 * v23);
LABEL_34:
            if ((int *)(v22 + 8 * v23) == v26)
            {
              unsigned int v34 = "Invalid ID";
LABEL_60:
              int v41 = (char *)v34;
              __int16 v43 = 259;
              llvm::BitcodeErrorCategory(Record);
              operator new();
            }
            if (v26[1] != 1 || !*(unsigned char *)(a1 + 968))
            {
              unint64_t v28 = *((void *)v44 + v21 + 1);
              if (v28 < ((uint64_t)(*(void *)(a1 + 632) - *(void *)(a1 + 624)) >> 3)
                       + ((uint64_t)(*(void *)(a1 + 608) - *(void *)(a1 + 600)) >> 4)
                && (*(_DWORD *)(a1 + 8) <= v28 || !*(void *)(*(void *)a1 + 8 * v28)))
              {
                sub_1CC1F2CC8(a1, v28, (uint64_t)v38);
                sub_1CC1ED0A4(a1, (llvm::MDNode *)v38);
              }
              Record = (llvm *)sub_1CC1F2FD0(a1, v28);
              int v29 = *(unsigned __int8 *)Record;
              if (v29 == 2)
              {
                int v18 = 0;
                uint64_t v10 = v37;
                goto LABEL_26;
              }
              if ((v29 - 4) >= 0x1F)
              {
                unsigned int v34 = "Invalid metadata attachment";
                goto LABEL_60;
              }
              int v30 = Record;
              if (*(unsigned char *)(a1 + 969))
              {
                uint64_t v31 = (llvm::MDNode *)v26[1];
                if (v31 == 18)
                {
                  int v30 = llvm::upgradeInstructionLoopAttachment(Record, v31);
                  goto LABEL_46;
                }
              }
              else
              {
LABEL_46:
                uint64_t v31 = (llvm::MDNode *)v26[1];
              }
              if (v31 == 1)
              {
                int v30 = llvm::UpgradeTBAANode(v30, v31, v30);
                LODWORD(v31) = v26[1];
              }
              llvm::Instruction::setMetadata(v36, (int)v31, v30);
            }
            int v18 = 0;
            v21 += 2;
            uint64_t v10 = v37;
            if (v21 == v17) {
              goto LABEL_26;
            }
          }
        }
      }
      int v18 = 0;
LABEL_26:
      if (v40)
      {
        uint64_t v20 = v39;
        unsigned int v39 = 0;
        if (v20) {
          (*(void (**)(void *))(*(void *)v20 + 8))(v20);
        }
      }
      if ((v18 | 2) != 2) {
        goto LABEL_65;
      }
    }
    sub_1CC1ED0A4(a1, (llvm::MDNode *)v38);
    *a4 = 0;
LABEL_65:
    sub_1CC1F3F40((uint64_t)v38);
    if (v44 != v10) {
      free(v44);
    }
  }
}

void sub_1CC1F2CC8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  v32[64] = *MEMORY[0x1E4F143B8];
  unsigned int v26 = a2;
  if (*(_DWORD *)(a1 + 8) <= a2
    || (uint64_t v5 = *(void *)(*(void *)a1 + 8 * a2)) == 0
    || (*(unsigned char *)(v5 + 1) & 0x7F) == 2)
  {
    v31[0] = v32;
    v31[1] = (void *)0x4000000000;
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    unint64_t v6 = *(void *)(*(void *)(a1 + 624) + 8 * (a2 - ((uint64_t)(*(void *)(a1 + 608) - *(void *)(a1 + 600)) >> 4)));
    *(void *)(a1 + 272) = (v6 >> 3) & 0x1FFFFFFFFFFFFFF8;
    *(_DWORD *)(a1 + 288) = 0;
    if ((v6 & 0x3F) != 0)
    {
      sub_1CC1CA844(a1 + 256, v6 & 0x3F, (uint64_t)&v29);
      if (v30)
      {
        if (v29)
        {
          v22[0] = (uint64_t)"lazyLoadOneMetadata failed jumping: ";
          __int16 v23 = 259;
          uint64_t v18 = v29;
          uint64_t v11 = &v18;
LABEL_27:
          sub_1CD4FB504(v11, &v19);
          __int16 v21 = 260;
          uint64_t v20 = &v19;
          sub_1CD3E3950(v22, (uint64_t *)&v20, (uint64_t)&v29);
          llvm::report_fatal_error((llvm *)&v29, (const llvm::Twine *)1);
        }
      }
    }
    do
    {
      sub_1CC1CA5F4(a1 + 256, 0, (uint64_t)&v29);
      if (v30)
      {
        uint64_t v7 = v29;
        int v9 = 1;
        goto LABEL_14;
      }
      uint64_t v7 = v29;
      if (v29 != 2)
      {
        int v9 = 0;
        goto LABEL_14;
      }
      sub_1CC1C6524(a1 + 256, v22);
      uint64_t v13 = v22[0];
      if (v30)
      {
        uint64_t v8 = v29;
        uint64_t v29 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
      }
    }
    while (!v13);
    int v9 = 1;
    uint64_t v7 = v13;
LABEL_14:
    if (v9 && v7)
    {
      v22[0] = (uint64_t)"lazyLoadOneMetadata failed advanceSkippingSubblocks: ";
      __int16 v23 = 259;
      uint64_t v17 = v7;
      uint64_t v11 = &v17;
      goto LABEL_27;
    }
    llvm::BitstreamCursor::readRecord((void *)(a1 + 256), SHIDWORD(v7), (uint64_t)v31, (unsigned __int8 **)&v24, (uint64_t)&v27);
    if (v28)
    {
      v22[0] = (uint64_t)"Can't lazyload MD: ";
      __int16 v23 = 259;
      uint64_t v12 = v27;
      uint64_t v27 = 0;
      uint64_t v14 = v12;
      uint64_t v11 = &v14;
      goto LABEL_27;
    }
    sub_1CC1EDA0C((llvm *)&v16, a1, (unsigned int *)v31, v27, a3, v24, v25, &v26);
    if (v16)
    {
      v22[0] = (uint64_t)"Can't lazyload MD, parseOneMetadata: ";
      __int16 v23 = 259;
      uint64_t v15 = v16;
      uint64_t v11 = &v15;
      goto LABEL_27;
    }
    if (v28)
    {
      uint64_t v10 = v27;
      uint64_t v27 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
    if (v31[0] != v32) {
      free(v31[0]);
    }
  }
}

unsigned __int8 *sub_1CC1F2FD0(uint64_t a1, unsigned int a2)
{
  unsigned int v6 = a2;
  if (*(_DWORD *)(a1 + 184) <= a2) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 8) <= a2) {
    sub_1CC1F3A70(a1, a2 + 1);
  }
  uint64_t Impl = *(unsigned __int8 **)(*(void *)a1 + 8 * a2);
  if (!Impl)
  {
    sub_1CD4F9C48(a1 + 24, &v6, (uint64_t)v7);
    uint64_t Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(*(void *)(a1 + 176), 0, 0, 2, 1);
    sub_1CC19E068((unsigned __int8 **)(*(void *)a1 + 8 * v6), Impl);
  }
  return Impl;
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKindRecord(uint64_t a1@<X0>, unsigned int **a2@<X1>, void *a3@<X8>)
{
  v29[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((unsigned int *)a2 + 2);
  if (v4 <= 1)
  {
    v25[0] = "Invalid record";
    __int16 v26 = 259;
    llvm::BitcodeErrorCategory((llvm *)a1);
    operator new();
  }
  uint64_t v7 = (uint64_t *)(*a2 + 2);
  uint64_t v6 = **a2;
  uint64_t v27 = v29;
  long long v28 = xmmword_1CD96EEC0;
  unint64_t v8 = 8 * v4 - 8;
  unint64_t v9 = v8 >> 3;
  if (v8 >= 0x41) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  uint64_t v11 = v29;
  do
  {
    uint64_t v10 = *v7++;
    *v11++ = v10;
    v8 -= 8;
  }
  while (v8);
  *(void *)&long long v28 = v28 + v9;
  uint64_t MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)(a1 + 216), (unsigned __int8 *)v27, v28);
  v25[0] = v6 | (MDKindID << 32);
  int v13 = *(_DWORD *)(a1 + 960);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 944);
    int v15 = v13 - 1;
    unsigned int v16 = v15 & (37 * v6);
    uint64_t v17 = (_DWORD *)(v14 + 8 * v16);
    int v18 = *v17;
    if (*v17 == v6)
    {
LABEL_24:
      v25[0] = "Conflicting METADATA_KIND records";
      __int16 v26 = 259;
      llvm::BitcodeErrorCategory((llvm *)MDKindID);
      operator new();
    }
    std::string v19 = 0;
    int v20 = 1;
    while (v18 != -1)
    {
      if (v19) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = v18 == -2;
      }
      if (v23) {
        std::string v19 = v17;
      }
      unsigned int v24 = v16 + v20++;
      unsigned int v16 = v24 & v15;
      uint64_t v17 = (_DWORD *)(v14 + 8 * v16);
      int v18 = *v17;
      if (*v17 == v6) {
        goto LABEL_24;
      }
    }
    if (v19) {
      __int16 v21 = v19;
    }
    else {
      __int16 v21 = v17;
    }
  }
  else
  {
    __int16 v21 = 0;
  }
  uint64_t v22 = sub_1CB83889C(a1 + 944, (uint64_t)v25, v25, v21);
  *(void *)uint64_t v22 = v25[0];
  *a3 = 0;
  if (v27 != v29) {
    free(v27);
  }
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKinds(llvm::BitstreamCursor **this@<X0>, void **a2@<X8>)
{
  v20[64] = *MEMORY[0x1E4F143B8];
  llvm::BitstreamCursor::EnterSubBlock(this[25], 0, 22, a2);
  if (!*a2)
  {
    int v18 = v20;
    uint64_t v19 = 0x4000000000;
    while (1)
    {
      uint64_t v6 = (uint64_t)this[25];
      while (1)
      {
        sub_1CC1CA5F4(v6, 0, (uint64_t)&v15);
        if (v16) {
          break;
        }
        int v8 = v15;
        if (v15 != 2)
        {
          unint64_t v2 = HIDWORD(v15);
          *a2 = 0;
          int v3 = v8;
          goto LABEL_7;
        }
        sub_1CC1C6524(v6, &v14);
        uint64_t v11 = v14;
        if (v16)
        {
          unint64_t v13 = v15;
          unint64_t v15 = 0;
          if (v13) {
            (*(void (**)(unint64_t))(*(void *)v13 + 8))(v13);
          }
        }
        if (v11)
        {
          *a2 = v11;
          goto LABEL_16;
        }
      }
      unint64_t v10 = v15;
      *a2 = (void *)v15;
      if (v10) {
        goto LABEL_16;
      }
LABEL_7:
      if (v3 == 1)
      {
        *a2 = 0;
        goto LABEL_16;
      }
      if (v3 == 2 || !v3)
      {
        unint64_t v15 = (unint64_t)"Malformed block";
        __int16 v17 = 259;
        llvm::BitcodeErrorCategory(v7);
        operator new();
      }
      LODWORD(v19) = 0;
      llvm::BitstreamCursor::readRecord(this[25], v2, (uint64_t)&v18, 0, (uint64_t)&v15);
      if (v16) {
        break;
      }
      if (v15 == 6)
      {
        llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKindRecord((uint64_t)this, (unsigned int **)&v18, a2);
        unint64_t v9 = *a2;
        if (v16)
        {
          unint64_t v12 = v15;
          unint64_t v15 = 0;
          if (v12) {
            (*(void (**)(unint64_t))(*(void *)v12 + 8))(v12);
          }
        }
        if (v9) {
          goto LABEL_16;
        }
      }
    }
    *a2 = (void *)v15;
LABEL_16:
    if (v18 != v20) {
      free(v18);
    }
  }
}

void *llvm::MetadataLoader::MetadataLoader(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  void *result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  void *result = v2;
  return result;
}

void llvm::MetadataLoader::~MetadataLoader(char ***this)
{
  uint64_t v2 = *this;
  *this = 0;
  if (v2)
  {
    int v3 = sub_1CC1F5168(v2);
    MEMORY[0x1D25D9CE0](v3, 0x10F0C4004B5578BLL);
  }
}

{
  char **v2;
  char **v3;

  uint64_t v2 = *this;
  *this = 0;
  if (v2)
  {
    int v3 = sub_1CC1F5168(v2);
    MEMORY[0x1D25D9CE0](v3, 0x10F0C4004B5578BLL);
  }
}

void llvm::MetadataLoader::MetadataLoader()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

{
  uint64_t v0;

  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void llvm::MetadataLoader::parseMetadata(llvm::MetadataLoader::MetadataLoaderImpl **this@<X0>, int a2@<W1>, void **a3@<X8>)
{
}

BOOL llvm::MetadataLoader::hasFwdRefs(llvm::MetadataLoader *this)
{
  return *(_DWORD *)(*(void *)this + 24) > 1u;
}

unsigned __int8 *llvm::MetadataLoader::getMetadataFwdRefOrLoad(llvm::MetadataLoader *this, uint64_t a2)
{
  return sub_1CC1F263C(*(void *)this, a2);
}

uint64_t llvm::MetadataLoader::lookupSubprogramForFunction(llvm::MetadataLoader *this, llvm::Function *a2)
{
  uint64_t v2 = *(void *)this + 680;
  uint64_t v5 = 0;
  uint64_t v6 = a2;
  int v3 = sub_1CC1F4D40(v2, &v6, &v5);
  uint64_t result = 0;
  if (v3) {
    return *(void *)(v5 + 8);
  }
  return result;
}

void llvm::MetadataLoader::parseMetadataAttachment(uint64_t *a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
}

void llvm::MetadataLoader::parseMetadataKinds(llvm::BitstreamCursor ***this@<X0>, void **a2@<X8>)
{
}

uint64_t llvm::MetadataLoader::isStrippingTBAA(llvm::MetadataLoader *this)
{
  return *(unsigned __int8 *)(*(void *)this + 968);
}

uint64_t llvm::MetadataLoader::size(llvm::MetadataLoader *this)
{
  return *(unsigned int *)(*(void *)this + 8);
}

void llvm::MetadataLoader::shrinkTo(llvm::MetadataLoader *this, unsigned int a2)
{
}

void llvm::MetadataLoader::upgradeDebugIntrinsics(llvm::MetadataLoader *this, llvm::Function *a2)
{
}

uint64_t sub_1CC1F39E4(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  sub_1CC1CAD70((void *)(a1 + 40), *((void **)a2 + 5), *((void **)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 4);
  *(void *)(a1 + 64) = a1 + 80;
  *(void *)(a1 + 72) = 0x800000000;
  if (*((_DWORD *)a2 + 18)) {
    sub_1CC1CADFC(a1 + 64, (uint64_t)(a2 + 4));
  }
  *(void *)(a1 + 336) = *((void *)a2 + 42);
  return a1;
}

void sub_1CC1F3A70(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    int v3 = a2;
    if (v2 > a2)
    {
      long long v5 = (unsigned __int8 **)(*(void *)a1 + 8 * v2 - 8);
      uint64_t v6 = 8 * a2 - 8 * v2;
      while (1)
      {
        uint64_t v7 = *v5;
        if (*v5)
        {
          int v8 = *v7;
          if ((v8 - 4) > 0x1E)
          {
            if ((v8 - 3) >= 0xFFFFFFFE) {
              unint64_t v9 = *v5;
            }
            else {
              unint64_t v9 = 0;
            }
            if ((v8 - 3) < 0xFFFFFFFE)
            {
              if (v8 == 3) {
                *((void *)v7 + 1) = 0;
              }
              goto LABEL_8;
            }
            unint64_t v10 = (unint64_t)(v9 + 8);
          }
          else
          {
            if ((v7[1] & 0x7F) != 2 && !*((_DWORD *)v7 + 3)) {
              goto LABEL_8;
            }
            uint64_t v11 = *((void *)v7 + 2);
            if ((v11 & 4) == 0) {
              goto LABEL_8;
            }
            unint64_t v10 = v11 & 0xFFFFFFFFFFFFFFF8;
            if (!v10) {
              goto LABEL_8;
            }
          }
          unint64_t v12 = v5;
          sub_1CC5FA668(v10 + 16, &v12);
        }
LABEL_8:
        --v5;
        v6 += 8;
        if (!v6) {
          goto LABEL_24;
        }
      }
    }
    if (*(unsigned int *)(a1 + 12) < a2) {
      sub_1CD4F9BD8();
    }
    if (v2 != a2) {
      bzero((void *)(*(void *)a1 + 8 * v2), 8 * a2 - 8 * v2);
    }
LABEL_24:
    *(_DWORD *)(a1 + 8) = v3;
  }
}

uint64_t sub_1CC1F3B98(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  if (v2)
  {
    uint64_t v4 = result;
    long long v5 = *(unsigned __int8 ***)result;
    uint64_t v6 = 8 * v2;
    do
    {
      *a2 = *v5;
      if (*v5)
      {
        uint64_t result = llvm::MetadataTracking::retrack((uint64_t)v5, *v5, (uint64_t)a2);
        uint64_t *v5 = 0;
      }
      ++v5;
      ++a2;
      v6 -= 8;
    }
    while (v6);
    uint64_t v7 = *(unsigned int *)(v4 + 8);
    if (v7)
    {
      uint64_t v8 = *(void *)v4;
      uint64_t v9 = 8 * v7;
      uint64_t v10 = v8 - 8;
      do
      {
        uint64_t result = v10 + v9;
        uint64_t v11 = *(unsigned __int8 **)(v10 + v9);
        if (v11) {
          uint64_t result = llvm::MetadataTracking::untrack(result, v11);
        }
        v9 -= 8;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t sub_1CC1F3C34(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 656);
  if (v1 != *(void *)(result + 664))
  {
    uint64_t v7 = *(void *)(result + 664);
    uint64_t v8 = result;
    do
    {
      uint64_t v2 = *(void *)(v1 + 8);
      if (v2)
      {
        if (*(unsigned char *)v2 == 4)
        {
          uint64_t v3 = *(unsigned int *)(v2 + 8);
          if (v3)
          {
            uint64_t v4 = *(llvm::Metadata **)v1;
            uint64_t v5 = -8 * v3;
            do
            {
              uint64_t v6 = *(llvm::MDNode **)(v2 + v5);
              if (v6 && *(unsigned char *)v6 == 17) {
                llvm::MDNode::replaceOperandWith(v6, 5, v4);
              }
              v5 += 8;
            }
            while (v5);
          }
        }
      }
      v1 += 16;
    }
    while (v1 != v7);
    uint64_t result = v8;
    uint64_t v1 = *(void *)(v8 + 656);
  }
  *(void *)(result + 664) = v1;
  return result;
}

void sub_1CC1F3CE8(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 970))
  {
    uint64_t v1 = *(llvm::Module **)(a1 + 216);
    unint64_t v25 = "llvm.dbg.cu";
    v27[8] = 259;
    NamedMetaint data = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v1, (const char **)&v25);
    if (NamedMetadata)
    {
      uint64_t v3 = NamedMetadata;
      int NumOperands = llvm::NamedMDNode::getNumOperands(NamedMetadata);
      if (NumOperands)
      {
        int v5 = NumOperands;
        for (unsigned int i = 0; i != v5; ++i)
        {
          uint64_t Operand = llvm::NamedMDNode::getOperand(v3, i);
          uint64_t v8 = *(unsigned int **)(Operand - 8 * *(unsigned int *)(Operand + 8) + 48);
          if (v8)
          {
            if (*(unsigned char *)v8 == 4)
            {
              unint64_t v9 = v8[2];
              if (v9)
              {
                for (unint64_t j = 0; j < v9; ++j)
                {
                  uint64_t v11 = *(unsigned char **)&v8[2 * j + -2 * v9];
                  if (v11 && *v11 == 24)
                  {
                    unint64_t v12 = *(void **)(a1 + 208);
                    uint64_t Impl = llvm::DIExpression::getImpl(v12, 0, 0, 0, 1);
                    uint64_t v14 = llvm::DIGlobalVariableExpression::getImpl(v12, (uint64_t)v11, (uint64_t)Impl, 1, 1);
                    llvm::MDNode::replaceOperandWith((llvm::MDNode *)v8, j, v14);
                    unint64_t v9 = v8[2];
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v15 = *(void *)(a1 + 216);
    uint64_t v16 = v15 + 8;
    uint64_t v17 = *(void *)(v15 + 16);
    if (v17 != v15 + 8)
    {
      do
      {
        if (v17) {
          int v18 = (unsigned int *)(v17 - 56);
        }
        else {
          int v18 = 0;
        }
        unint64_t v25 = v27;
        uint64_t v26 = 0x100000000;
        llvm::Value::getMetadata(v18, 0, (uint64_t)&v25);
        llvm::Value::eraseMetadata((llvm::Value *)v18, 0);
        uint64_t v19 = (llvm::MDNode **)v25;
        if (v26)
        {
          uint64_t v20 = 8 * v26;
          do
          {
            __int16 v21 = *v19;
            if (*(unsigned char *)*v19 == 24)
            {
              uint64_t v22 = *(void **)(a1 + 208);
              BOOL v23 = llvm::DIExpression::getImpl(v22, 0, 0, 0, 1);
              __int16 v21 = llvm::DIGlobalVariableExpression::getImpl(v22, (uint64_t)v21, (uint64_t)v23, 1, 1);
            }
            llvm::Value::addMetadata((llvm::Value *)v18, 0, v21);
            ++v19;
            v20 -= 8;
          }
          while (v20);
          uint64_t v19 = (llvm::MDNode **)v25;
        }
        if (v19 != (llvm::MDNode **)v27) {
          free(v19);
        }
        uint64_t v17 = *(void *)(v17 + 8);
      }
      while (v17 != v16);
    }
  }
}

uint64_t sub_1CC1F3F40(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 16 * v5;
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(unsigned char *)(a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        uint64_t v17 = *(void **)(v8 + 8);
        if (v17)
        {
          *uint64_t v17 = 0;
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          uint64_t v18 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v18;
          uint64_t v8 = v18;
        }
      }
      while (v8 != v9);
      uint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  void *v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 128;
    goto LABEL_9;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 256;
LABEL_9:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

llvm::MDNode *sub_1CC1F4090(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  v10[32] = *MEMORY[0x1E4F143B8];
  if (a2 && *(unsigned char *)a2 == 4 && (*(unsigned char *)(a2 + 1) & 0x7F) != 1)
  {
    unsigned int v9 = 0;
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (v4 >= 0x21) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v4)
    {
      uint64_t v5 = -8 * v4;
      do
      {
        uint64_t v6 = sub_1CC1F426C(a1, *(llvm::MDNode **)(v2 + v5));
        if (v9 >= 0x20uLL) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v10[v9] = v6;
        unsigned int v7 = ++v9;
        v5 += 8;
      }
      while (v5);
    }
    else
    {
      unsigned int v7 = 0;
    }
    return llvm::MDTuple::getImpl(*(void *)(a1 + 176), v10, v7, 0, 1);
  }
  return (llvm::MDNode *)v2;
}

void *sub_1CC1F41E8(void *a1, unsigned int a2)
{
  if (a2 <= 1)
  {
    *a1 = 1;
LABEL_3:
    uint64_t result = a1 + 1;
    unsigned int v4 = a1 + 3;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  uint64_t v5 = a2;
  uint64_t result = operator new(16 * a2, (std::align_val_t)8uLL);
  a1[1] = result;
  a1[2] = v5;
  int v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if (v6) {
    goto LABEL_3;
  }
  unsigned int v4 = &result[2 * v5];
  do
  {
LABEL_4:
    void *result = -4096;
    result += 2;
  }
  while (result != v4);
  return result;
}

llvm::MDNode *sub_1CC1F426C(uint64_t a1, llvm::MDNode *Impl)
{
  if (Impl)
  {
    if (!*(unsigned char *)Impl)
    {
      unsigned int v7 = Impl;
      uint64_t v8 = 0;
      if ((sub_1CD4FA190(a1 + 96, (uint64_t)Impl, &v8) & 1) == 0 || (uint64_t Impl = *(llvm::MDNode **)(v8 + 8)) == 0)
      {
        unsigned int v4 = sub_1CD4FA610((_DWORD *)(a1 + 72), (uint64_t *)&v7);
        uint64_t Impl = (llvm::MDNode *)v4[1];
        if (!Impl)
        {
          uint64_t v5 = v4;
          uint64_t Impl = llvm::MDTuple::getImpl(*(void *)(a1 + 176), 0, 0, 2, 1);
          int v6 = (llvm::MDNode *)v5[1];
          v5[1] = Impl;
          if (v6)
          {
            llvm::MDNode::deleteTemporary(v6, Impl);
            return (llvm::MDNode *)v5[1];
          }
        }
      }
    }
  }
  return Impl;
}

void sub_1CC1F4310(uint64_t a1, llvm::MDNode *a2)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = a1 + 8;
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 16);
    if (!v3) {
      return;
    }
    uint64_t v2 = *(void *)(a1 + 8);
  }
  uint64_t v4 = 16 * v3;
  uint64_t v5 = (llvm::MDNode **)(v2 + 8);
  do
  {
    uint64_t v6 = (uint64_t)*(v5 - 1);
    if (v6 != -4096 && v6 != -8192)
    {
      unsigned int v7 = *v5;
      void *v5 = 0;
      if (v7)
      {
        uint64_t v8 = v5;
        uint64_t v9 = v4;
        llvm::MDNode::deleteTemporary(v7, a2);
        uint64_t v5 = v8;
        uint64_t v4 = v9;
      }
    }
    v5 += 2;
    v4 -= 16;
  }
  while (v4);
}

void *sub_1CC1F4390(void *a1, unsigned int a2)
{
  if (a2 <= 1)
  {
    *a1 = 1;
LABEL_3:
    uint64_t v2 = a1 + 1;
    size_t v3 = 4;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  uint64_t v5 = a2;
  size_t v7 = 4 * a2;
  uint64_t v8 = a1;
  uint64_t v2 = operator new(v7, (std::align_val_t)4uLL);
  a1 = v8;
  v8[1] = v2;
  _OWORD v8[2] = v5;
  int v6 = *(_DWORD *)v8;
  *uint64_t v8 = *(_DWORD *)v8 & 1;
  if (v6) {
    goto LABEL_3;
  }
  size_t v3 = v7;
LABEL_4:

  return memset(v2, 255, v3);
}

unsigned __int8 *sub_1CC1F4430(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = (uint64_t)(*(void *)(*(void *)a1 + 608) - *(void *)(*(void *)a1 + 600)) >> 4;
  if (v4 > a2)
  {
    uint64_t v28 = *(llvm::MetadataLoader::MetadataLoaderImpl **)a1;
    return llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMDString(v28, a2);
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(v3 + 8);
    if (**(unsigned char **)(a1 + 8))
    {
      if (v6 <= a2
        || (uint64_t result = *(unsigned __int8 **)(*(void *)v3 + 8 * a2)) == 0
        || *result - 4 <= 0x1E && ((result[1] & 0x7F) == 2 || *((_DWORD *)result + 3)))
      {
        uint64_t v8 = *(void *)(a1 + 24);
        unint64_t v10 = *(char **)(v8 + 8);
        uint64_t v9 = *(char **)(v8 + 16);
        uint64_t v11 = v9 - v10;
        if (v9 == v10) {
          uint64_t v12 = 0;
        }
        else {
          uint64_t v12 = 32 * (v9 - v10) - 1;
        }
        unint64_t v13 = *(void *)(v8 + 32);
        unint64_t v14 = *(void *)(v8 + 40) + v13;
        if (v12 != v14) {
          goto LABEL_12;
        }
        if (v13 >= 0x100)
        {
          *(void *)(v8 + 32) = v13 - 256;
          uint64_t v31 = *(void *)v10;
          uint64_t v29 = v10 + 8;
          uint64_t v30 = v31;
          *(void *)(v8 + 8) = v29;
          if (v9 == *(char **)(v8 + 24))
          {
            int v32 = *(char **)v8;
            if ((unint64_t)v29 <= *(void *)v8)
            {
              if (v9 == v32) {
                unint64_t v42 = 1;
              }
              else {
                unint64_t v42 = (v9 - v32) >> 2;
              }
              if (v42 >> 61) {
                goto LABEL_86;
              }
              __int16 v43 = (char *)operator new(8 * v42);
              uint64_t v44 = &v43[8 * (v42 >> 2)];
              uint64_t v46 = v9 - v29;
              BOOL v45 = v9 == v29;
              uint64_t v9 = v44;
              if (!v45)
              {
                uint64_t v9 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v47 = 8 * (v46 >> 3);
                uint64_t v48 = &v43[8 * (v42 >> 2)];
                do
                {
                  uint64_t v49 = *(void *)v29;
                  v29 += 8;
                  *(void *)uint64_t v48 = v49;
                  v48 += 8;
                  v47 -= 8;
                }
                while (v47);
              }
              *(void *)uint64_t v8 = v43;
              *(void *)(v8 + 8) = v44;
              *(void *)(v8 + 16) = v9;
              *(void *)(v8 + 24) = &v43[8 * v42];
              if (v32)
              {
                operator delete(v32);
                uint64_t v9 = *(char **)(v8 + 16);
              }
            }
            else
            {
              uint64_t v33 = (uint64_t)&v29[-*(void *)v8] >> 3;
              if (v33 >= -1) {
                uint64_t v34 = v33 + 1;
              }
              else {
                uint64_t v34 = v33 + 2;
              }
              uint64_t v35 = -(v34 >> 1);
              uint64_t v36 = v34 >> 1;
              int v37 = &v29[-8 * v36];
              int64_t v38 = v9 - v29;
              if (v9 != v29)
              {
                memmove(&v29[-8 * v36], v29, v9 - v29);
                uint64_t v9 = *(char **)(v8 + 8);
              }
              unsigned int v39 = &v9[8 * v35];
              uint64_t v9 = &v37[v38];
              *(void *)(v8 + 8) = v39;
              *(void *)(v8 + 16) = &v37[v38];
            }
          }
          *(void *)uint64_t v9 = v30;
        }
        else
        {
          uint64_t v18 = *(char **)(v8 + 24);
          uint64_t v19 = (uint64_t)&v18[-*(void *)v8];
          if (v11 >= (unint64_t)v19)
          {
            uint64_t v20 = v19 >> 2;
            if (v18 == *(char **)v8) {
              unint64_t v21 = 1;
            }
            else {
              unint64_t v21 = v20;
            }
            uint64_t v74 = v8 + 24;
            if (!(v21 >> 61))
            {
              uint64_t v22 = (char *)operator new(8 * v21);
              BOOL v23 = &v22[v11];
              unint64_t v70 = v22;
              unsigned int v71 = &v22[v11];
              unsigned int v24 = &v22[8 * v21];
              unsigned int v73 = v24;
              unint64_t v25 = operator new(0x1000uLL);
              if (v21 != v11 >> 3)
              {
LABEL_29:
                *(void *)BOOL v23 = v25;
                uint64_t v26 = v23 + 8;
                unint64_t v72 = v23 + 8;
                if (v9 != v10)
                {
                  do
                  {
                    v9 -= 8;
                    sub_1CD4A5618((const void **)&v70, v9);
                  }
                  while (v9 != *(char **)(v8 + 8));
                  uint64_t v22 = v70;
                  BOOL v23 = v71;
                  uint64_t v26 = v72;
                  unsigned int v24 = v73;
                }
                uint64_t v27 = *(char **)v8;
                *(void *)uint64_t v8 = v22;
                *(void *)(v8 + 8) = v23;
                *(void *)(v8 + 16) = v26;
                *(void *)(v8 + 24) = v24;
                if (v27) {
                  operator delete(v27);
                }
                goto LABEL_32;
              }
              uint64_t v69 = v25;
              if (v11 >= 1)
              {
                v23 -= (4 * v21 + 4) & 0xFFFFFFFFFFFFFFF8;
                unsigned int v71 = v23;
LABEL_56:
                unint64_t v25 = v69;
                goto LABEL_29;
              }
              if (v9 == v10) {
                unint64_t v40 = 1;
              }
              else {
                unint64_t v40 = v11 >> 2;
              }
              if (!(v40 >> 61))
              {
                int v41 = (char *)operator new(8 * v40);
                BOOL v23 = &v41[8 * (v40 >> 2)];
                unsigned int v24 = &v41[8 * v40];
                unint64_t v70 = v41;
                unsigned int v71 = v23;
                unsigned int v73 = v24;
                operator delete(v22);
                unint64_t v10 = *(char **)(v8 + 8);
                uint64_t v9 = *(char **)(v8 + 16);
                uint64_t v22 = v41;
                goto LABEL_56;
              }
            }
LABEL_86:
            sub_1CB833614();
          }
          if (v18 != v9)
          {
            unint64_t v70 = (char *)operator new(0x1000uLL);
            sub_1CD4A54E0(v8, &v70);
LABEL_32:
            unint64_t v10 = *(char **)(v8 + 8);
            unint64_t v14 = *(void *)(v8 + 32) + *(void *)(v8 + 40);
LABEL_12:
            uint64_t v15 = *(void *)&v10[(v14 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v14;
            *(void *)(v15 + 8) = 0;
            *(_DWORD *)uint64_t v15 = 259;
            *(_DWORD *)(v15 + 4) = a2;
            uint64_t v17 = *(void *)(v8 + 32);
            uint64_t v16 = *(void *)(v8 + 40);
            *(void *)(v8 + 40) = v16 + 1;
            return (unsigned __int8 *)(*(void *)(*(void *)(v8 + 8)
                                                 + (((unint64_t)(v17 + v16) >> 5) & 0x7FFFFFFFFFFFFF8))
                                     + 16 * (v17 + v16));
          }
          unint64_t v70 = (char *)operator new(0x1000uLL);
          sub_1CD3F24DC((void **)v8, &v70);
          uint64_t v50 = *(void **)(v8 + 8);
          uint64_t v51 = *(char **)(v8 + 16);
          uint64_t v54 = *v50;
          int v52 = (char *)(v50 + 1);
          uint64_t v53 = v54;
          *(void *)(v8 + 8) = v52;
          if (v51 == *(char **)(v8 + 24))
          {
            int v55 = *(char **)v8;
            if ((unint64_t)v52 <= *(void *)v8)
            {
              if (v51 == v55) {
                unint64_t v62 = 1;
              }
              else {
                unint64_t v62 = (v51 - v55) >> 2;
              }
              if (v62 >> 61) {
                goto LABEL_86;
              }
              int v63 = (char *)operator new(8 * v62);
              uint64_t v64 = &v63[8 * (v62 >> 2)];
              uint64_t v65 = v51 - v52;
              BOOL v45 = v51 == v52;
              uint64_t v51 = v64;
              if (!v45)
              {
                uint64_t v51 = &v64[v65 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v66 = 8 * (v65 >> 3);
                char v67 = &v63[8 * (v62 >> 2)];
                do
                {
                  uint64_t v68 = *(void *)v52;
                  v52 += 8;
                  *(void *)char v67 = v68;
                  v67 += 8;
                  v66 -= 8;
                }
                while (v66);
              }
              *(void *)uint64_t v8 = v63;
              *(void *)(v8 + 8) = v64;
              *(void *)(v8 + 16) = v51;
              *(void *)(v8 + 24) = &v63[8 * v62];
              if (v55)
              {
                operator delete(v55);
                uint64_t v51 = *(char **)(v8 + 16);
              }
            }
            else
            {
              uint64_t v56 = (uint64_t)&v52[-*(void *)v8] >> 3;
              if (v56 >= -1) {
                uint64_t v57 = v56 + 1;
              }
              else {
                uint64_t v57 = v56 + 2;
              }
              uint64_t v58 = -(v57 >> 1);
              uint64_t v59 = v57 >> 1;
              uint64_t v60 = &v52[-8 * v59];
              size_t v61 = v51 - v52;
              if (v61)
              {
                memmove(&v52[-8 * v59], v52, v61);
                int v52 = *(char **)(v8 + 8);
              }
              uint64_t v51 = &v60[v61];
              *(void *)(v8 + 8) = &v52[8 * v58];
              *(void *)(v8 + 16) = v51;
            }
          }
          *(void *)uint64_t v51 = v53;
        }
        *(void *)(v8 + 16) += 8;
        goto LABEL_32;
      }
    }
    else if (v6 <= a2 || (uint64_t result = *(unsigned __int8 **)(*(void *)v3 + 8 * a2)) == 0)
    {
      if (v4 + ((uint64_t)(*(void *)(v3 + 632) - *(void *)(v3 + 624)) >> 3) <= a2)
      {
        return sub_1CC1F2FD0(v3, a2);
      }
      else
      {
        sub_1CC1F2FD0(v3, **(_DWORD **)(a1 + 16));
        sub_1CC1F2CC8(v3, a2, *(void *)(a1 + 24));
        if (*(_DWORD *)(v3 + 8) <= a2) {
          return 0;
        }
        else {
          return *(unsigned __int8 **)(*(void *)v3 + 8 * a2);
        }
      }
    }
  }
  return result;
}

void *sub_1CC1F4974(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v7 = result;
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    void *v7 = result;
    size_t v7 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    uint64_t v10 = *a2++;
    *(unsigned char *)size_t v7 = v10;
    size_t v7 = (void *)((char *)v7 + 1);
  }
  *(unsigned char *)size_t v7 = 0;
  return result;
}

void sub_1CC1F4A18(unsigned int **a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v4 = (uint64_t)*a1;
  uint64_t v5 = (unsigned __int8 *)llvm::MDString::get(*((uint64_t **)*a1 + 26), a2, a3);
  sub_1CC1F2468(v4, v5, *a1[1]);
  ++*a1[1];
}

uint64_t sub_1CC1F4A68(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  sub_1CC1F4AC8((uint64_t)&v3, a2, &v4);
  uint64_t result = v3;
  if (v3) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return result;
}

uint64_t sub_1CC1F4AC8@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(void **)result;
  if (*(void *)result)
  {
    *(void *)uint64_t result = 0;
    if ((*(unsigned int (**)(void *, void *))(*v4 + 48))(v4, &llvm::ErrorList::ID))
    {
      *a3 = 0;
      unsigned int v6 = (uint64_t *)v4[1];
      size_t v7 = (uint64_t *)v4[2];
      if (v6 != v7)
      {
        uint64_t v8 = 0;
        do
        {
          unint64_t v14 = v8;
          uint64_t v9 = *v6;
          uint64_t *v6 = 0;
          uint64_t v12 = v9;
          sub_1CC1F4C94(&v12, a2, (uint64_t *)&v13);
          sub_1CD451630(&v14, &v13, &v15);
          uint64_t v8 = v15;
          *a3 = (uint64_t)v15;
          uint64_t v15 = 0;
          if (v13) {
            (*(void (**)(char *))(*(void *)v13 + 8))(v13);
          }
          uint64_t v10 = v12;
          uint64_t v12 = 0;
          if (v10) {
            (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
          }
          if (v14) {
            (*(void (**)(char *))(*(void *)v14 + 8))(v14);
          }
          ++v6;
        }
        while (v6 != v7);
      }
      return (*(uint64_t (**)(void *))(*v4 + 8))(v4);
    }
    else
    {
      uint64_t v11 = v4;
      sub_1CC1F4C94((uint64_t *)&v11, a2, a3);
      uint64_t result = (uint64_t)v11;
      uint64_t v11 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t sub_1CC1F4C94@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)*a1 + 48))(*a1, &llvm::ErrorInfoBase::ID);
  uint64_t v7 = *a1;
  *a1 = 0;
  if (result)
  {
    sub_1CD4FB5E0(a2, v7);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
    uint64_t v7 = 0;
  }
  *a3 = v7;
  return result;
}

uint64_t sub_1CC1F4D40(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_17:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_17;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void sub_1CC1F4DE8(uint64_t a1, uint64_t a2)
{
  v21[8] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 971))
  {
    uint64_t v2 = a2 + 72;
    uint64_t v3 = *(void *)(a2 + 80);
    if (v3 != a2 + 72)
    {
      do
      {
        uint64_t v5 = v3 - 24;
        if (!v3) {
          uint64_t v5 = 0;
        }
        uint64_t v6 = v5 + 40;
        for (uint64_t i = *(void *)(v5 + 48); i != v6; uint64_t i = *(void *)(i + 8))
        {
          if (i) {
            uint64_t v8 = i - 24;
          }
          else {
            uint64_t v8 = 0;
          }
          BOOL v9 = sub_1CC1F4FA8(v8);
          if (!v9) {
            uint64_t v8 = 0;
          }
          if (i)
          {
            if (v9)
            {
              int v10 = (void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
              uint64_t v11 = *(void *)(v10[8] + 24);
              if (v11)
              {
                uint64_t v13 = v11 + 24;
                uint64_t v12 = *(void *)(v11 + 24);
                uint64_t v14 = *(void *)(v13 + 8) - v12;
                if ((v14 & 0x7FFFFFFF8) != 0 && *(void *)v12 == 6)
                {
                  uint64_t v15 = *(unsigned __int8 **)(*v10 + 24);
                  int v16 = *v15;
                  if ((v16 - 4) >= 0x1C && (v16 - 33) >= 2)
                  {
                    if (v16 == 32) {
                      uint64_t v15 = (unsigned __int8 *)**((void **)v15 + 3);
                    }
                    uint64_t v17 = *((void *)v15 + 16);
                    if (v17 && *(unsigned char *)(v17 + 16) == 21)
                    {
                      uint64_t v19 = v21;
                      uint64_t v20 = 0x800000000;
                      sub_1CBFCBB74((unsigned int *)&v19, (unsigned char *)(v12 + 8), (unsigned char *)(v12 + v14));
                      uint64_t Impl = llvm::DIExpression::getImpl(*(void **)(a1 + 208), v19, v20, 0, 1);
                      sub_1CD4FB76C(v8, (uint64_t)Impl);
                      if (v19 != v21) {
                        free(v19);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v3 = *(void *)(v3 + 8);
      }
      while (v3 != v2);
    }
  }
}

BOOL sub_1CC1F4FA8(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 56;
}

uint64_t LLVMSetArgOperand_0(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = result - 32 * (*(_DWORD *)(result + 20) & 0x7FFFFFF);
  int v4 = (void *)(v3 + 32 * a2);
  uint64_t v5 = v4;
  if (*v4)
  {
    uint64_t v7 = (void *)v4[2];
    uint64_t v6 = v4 + 2;
    void *v7 = *(v6 - 1);
    uint64_t v8 = *(v6 - 1);
    if (v8) {
      *(void *)(v8 + 16) = *v6;
    }
  }
  void *v5 = a3;
  if (a3)
  {
    uint64_t v11 = *(void *)(a3 + 8);
    BOOL v9 = (void *)(a3 + 8);
    uint64_t v10 = v11;
    uint64_t v12 = v3 + 32 * a2;
    *(void *)(v12 + 8) = v11;
    if (v11) {
      *(void *)(v10 + 16) = v12 + 8;
    }
    *(void *)(v12 + 16) = v9;
    *BOOL v9 = v5;
  }
  return result;
}

void sub_1CC1F505C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(char **)(*(void *)a1 + 608);
  unint64_t v7 = *(void *)(*(void *)a1 + 616);
  if ((unint64_t)v6 >= v7)
  {
    BOOL v9 = (char *)v5[75];
    uint64_t v10 = (v6 - v9) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      abort();
    }
    uint64_t v12 = v7 - (void)v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 60) {
        sub_1CB833614();
      }
      uint64_t v14 = (char *)operator new(16 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[16 * v10];
    *(void *)uint64_t v15 = a2;
    *((void *)v15 + 1) = a3;
    uint64_t v8 = v15 + 16;
    if (v6 != v9)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v6 - 1);
        v15 -= 16;
        v6 -= 16;
      }
      while (v6 != v9);
      uint64_t v6 = (char *)v5[75];
    }
    v5[75] = v15;
    v5[76] = v8;
    v5[77] = &v14[16 * v13];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(void *)uint64_t v6 = a2;
    *((void *)v6 + 1) = a3;
    uint64_t v8 = v6 + 16;
  }
  v5[76] = v8;
}

char **sub_1CC1F5168(char **a1)
{
  MEMORY[0x1D25D9CD0](a1[118], 4);
  if (((_BYTE)a1[85] & 1) == 0) {
    MEMORY[0x1D25D9CD0](a1[86], 8);
  }
  uint64_t v2 = a1[82];
  if (v2)
  {
    a1[83] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[78];
  if (v3)
  {
    a1[79] = v3;
    operator delete(v3);
  }
  int v4 = a1[75];
  if (v4)
  {
    a1[76] = v4;
    operator delete(v4);
  }
  sub_1CC1CB3C4(a1 + 40);
  uint64_t v5 = (llvm::MDNode *)a1[37];
  if (v5)
  {
    sub_1CC1CAA74((uint64_t)(a1 + 37), (uint64_t)v5);
    operator delete(a1[37]);
  }
  uint64_t v6 = (char **)a1[31];
  if (v6 == a1 + 28)
  {
    (*((void (**)(char **))a1[28] + 4))(a1 + 28);
  }
  else if (v6)
  {
    (*((void (**)(char **))*v6 + 5))(v6);
  }
  unint64_t v7 = a1[18];
  uint64_t v8 = *((unsigned int *)a1 + 38);
  if (v8)
  {
    uint64_t v19 = 16 * v8;
    uint64_t v20 = v7 - 16;
    do
    {
      sub_1CD4FA988((uint64_t)&v20[v19], v5);
      v19 -= 16;
    }
    while (v19);
    unint64_t v7 = a1[18];
  }
  if (v7 != (char *)(a1 + 20)) {
    free(v7);
  }
  if (((_BYTE)a1[15] & 1) == 0) {
    MEMORY[0x1D25D9CD0](a1[16], 8);
  }
  if (((_BYTE)a1[12] & 1) == 0) {
    MEMORY[0x1D25D9CD0](a1[13], 8);
  }
  sub_1CC1F4310((uint64_t)(a1 + 9), v5);
  if (((_BYTE)a1[9] & 1) == 0) {
    MEMORY[0x1D25D9CD0](a1[10], 8);
  }
  if (((_BYTE)a1[6] & 1) == 0) {
    MEMORY[0x1D25D9CD0](a1[7], 4);
  }
  if (((_BYTE)a1[3] & 1) == 0) {
    MEMORY[0x1D25D9CD0](a1[4], 4);
  }
  BOOL v9 = *a1;
  uint64_t v10 = *((unsigned int *)a1 + 2);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    uint64_t v12 = v9 - 8;
    while (1)
    {
      unint64_t v13 = *(unsigned __int8 **)&v12[v11];
      if (v13)
      {
        int v14 = *v13;
        if ((v14 - 4) > 0x1E)
        {
          if ((v14 - 3) >= 0xFFFFFFFE) {
            uint64_t v15 = *(void *)&v12[v11];
          }
          else {
            uint64_t v15 = 0;
          }
          if ((v14 - 3) < 0xFFFFFFFE)
          {
            if (v14 == 3) {
              *((void *)v13 + 1) = 0;
            }
            goto LABEL_32;
          }
          unint64_t v16 = v15 + 8;
        }
        else
        {
          if ((v13[1] & 0x7F) != 2 && !*((_DWORD *)v13 + 3)) {
            goto LABEL_32;
          }
          uint64_t v18 = *((void *)v13 + 2);
          if ((v18 & 4) == 0) {
            goto LABEL_32;
          }
          unint64_t v16 = v18 & 0xFFFFFFFFFFFFFFF8;
          if (!v16) {
            goto LABEL_32;
          }
        }
        unint64_t v21 = &v12[v11];
        sub_1CC5FA668(v16 + 16, &v21);
      }
LABEL_32:
      v11 -= 8;
      if (!v11)
      {
        BOOL v9 = *a1;
        break;
      }
    }
  }
  if (v9 != (char *)(a1 + 2)) {
    free(v9);
  }
  return a1;
}

uint64_t sub_1CC1F5400(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v8 = *a3;
  unint64_t v9 = *(void *)(a2 + 8);
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x100000000;
  *(void *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 32) = -1;
  *(void *)(a1 + 48) = 1;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)(a1 + 72) = 1;
  *(void *)(a1 + 80) = -4096;
  *(void *)(a1 + 96) = 1;
  *(void *)(a1 + 104) = -4096;
  *(void *)(a1 + 120) = 1;
  *(void *)(a1 + 128) = -4096;
  *(void *)(a1 + 144) = a1 + 160;
  *(void *)(a1 + 152) = 0x100000000;
  *(void *)(a1 + 176) = v8;
  if (v9 >= 0xFFFFFFFF) {
    int v10 = -1;
  }
  else {
    int v10 = v9;
  }
  *(_DWORD *)(a1 + 184) = v10;
  *(void *)(a1 + 192) = a4;
  *(void *)(a1 + 200) = a2;
  *(void *)(a1 + 208) = *a3;
  *(void *)(a1 + 216) = a3;
  uint64_t v11 = *(void *)(a5 + 24);
  if (v11)
  {
    if (v11 == a5)
    {
      *(void *)(a1 + 248) = a1 + 224;
      (*(void (**)(void))(**(void **)(a5 + 24) + 24))(*(void *)(a5 + 24));
    }
    else
    {
      *(void *)(a1 + 248) = v11;
      *(void *)(a5 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 248) = 0;
  }
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(void *)(a1 + 288) = 0x200000000;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = a1 + 336;
  *(void *)(a1 + 328) = 0x800000000;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(void *)(a1 + 672) = 0;
  uint64_t v12 = 688;
  *(void *)(a1 + 680) = 1;
  do
  {
    *(void *)(a1 + v12) = -4096;
    v12 += 16;
  }
  while (v12 != 944);
  *(void *)(a1 + 944) = 0;
  *(void *)(a1 + 952) = 0;
  *(_DWORD *)(a1 + 960) = 0;
  *(_DWORD *)(a1 + 968) = 0;
  *(unsigned char *)(a1 + 972) = a6;
  return a1;
}

uint64_t sub_1CC1F5568()
{
  char v3 = 0;
  int v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Import full type definitions for ThinLTO.";
  v1.n128_u64[1] = 41;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCC8908, "import-full-type-definitions", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC8908, &dword_1CB82C000);
  char v3 = 0;
  int v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Force disable the lazy-loading on-demand of metadata when loading bitcode for importing.";
  v1.n128_u64[1] = 88;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCC89C8, "disable-ondemand-mds-loading", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC89C8, &dword_1CB82C000);
}

void llvm::BitcodeReaderValueList::assignValue(llvm::BitcodeReaderValueList *this@<X0>, llvm::Value *a2@<X2>, unsigned int a3@<W1>, int a4@<W3>, void *a5@<X8>)
{
  uint64_t v9 = *(void *)this;
  unint64_t v8 = *((void *)this + 1);
  unint64_t v10 = (v8 - *(void *)this) >> 5;
  if (v10 == a3)
  {
    *(void *)&long long v24 = a2;
    int v25 = a4;
    if (v8 >= *((void *)this + 2))
    {
      uint64_t v11 = sub_1CC1E31BC((uint64_t *)this, (uint64_t *)&v24, &v25);
    }
    else
    {
      *(void *)unint64_t v8 = 6;
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = a2;
      if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096 && a2) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v8);
      }
      *(_DWORD *)(v8 + 24) = a4;
      uint64_t v11 = v8 + 32;
    }
    *((void *)this + 1) = v11;
    goto LABEL_9;
  }
  if (v10 <= a3)
  {
    unsigned int v19 = a3;
    uint64_t v20 = a2;
    sub_1CC1E4460((uint64_t *)this, a3 + 1);
    a3 = v19;
    a2 = v20;
    uint64_t v9 = *(void *)this;
  }
  uint64_t v12 = a3;
  unint64_t v13 = (llvm::ValueAsMetadata **)(v9 + 32 * a3);
  int v14 = v13[2];
  if (!v14)
  {
    if (a2)
    {
      void v13[2] = a2;
      if (((unint64_t)a2 | 0x1000) != 0xFFFFFFFFFFFFF000) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v13);
      }
    }
    goto LABEL_16;
  }
  if (*((unsigned __int8 *)v14 + 16) <= 0x14u)
  {
    unint64_t v16 = (llvm::ValueHandleBase *)(v9 + 32 * a3);
    BOOL v23 = a2;
    *(void *)&long long v24 = v13[2];
    *((void *)&v24 + 1) = a3;
    uint64_t v17 = (_OWORD *)*((void *)this + 4);
    if ((unint64_t)v17 < *((void *)this + 5))
    {
      *uint64_t v17 = v24;
      uint64_t v18 = v17 + 1;
    }
    else
    {
      uint64_t v18 = sub_1CC00319C((void **)this + 3, &v24);
    }
    *((void *)this + 4) = v18;
    sub_1CC002D7C(v16, (uint64_t)v23);
LABEL_16:
    *(_DWORD *)(v9 + 32 * v12 + 24) = a4;
    goto LABEL_9;
  }
  if (*(void *)v14 != *(void *)a2)
  {
    *(void *)&v22.__val_ = std::generic_category();
    v22.__cat_ = (const std::error_category *)"Assigned value does not match type of forward declaration";
    llvm::createStringError((llvm *)0x5C, v22, v21);
  }
  llvm::Value::doRAUW(v13[2], a2, (llvm::Value *)1);
  llvm::Value::deleteValue((void (**)(void))v14, v15);
LABEL_9:
  *a5 = 0;
}

llvm::Type **llvm::BitcodeReaderValueList::getConstantFwdRef(llvm::BitcodeReaderValueList *this, unsigned int a2, llvm::Type *a3, int a4)
{
  if (*((_DWORD *)this + 14) <= a2) {
    return 0;
  }
  uint64_t v8 = *(void *)this;
  if (((*((void *)this + 1) - *(void *)this) >> 5) <= a2)
  {
    sub_1CC1E4460((uint64_t *)this, a2 + 1);
    uint64_t v8 = *(void *)this;
  }
  uint64_t v9 = a2;
  unint64_t v10 = *(llvm::Type ***)(v8 + 32 * a2 + 16);
  if (v10)
  {
    if (*v10 != a3) {
      llvm::report_fatal_error((llvm *)"Type mismatch in constant table!", (const llvm::Twine *)1);
    }
  }
  else
  {
    uint64_t v12 = operator new(0x38uLL);
    v12[4] = a3;
    unint64_t v10 = (llvm::Type **)(v12 + 4);
    void *v12 = 0;
    v12[1] = 0;
    void v12[2] = 0;
    v12[3] = v12 + 4;
    uint64_t v13 = *((void *)this + 6);
    v12[5] = 0;
    v12[6] = 0x1003A0005;
    uint64_t v15 = llvm::UndefValue::get((llvm::UndefValue *)(*(void *)v13 + 1960), v14);
    if (*v12)
    {
      *(void *)void v12[2] = v12[1];
      uint64_t v16 = v12[1];
      if (v16) {
        *(void *)(v16 + 16) = v12[2];
      }
    }
    void *v12 = v15;
    if (v15)
    {
      uint64_t v19 = *((void *)v15 + 1);
      uint64_t v17 = (void *)((char *)v15 + 8);
      uint64_t v18 = v19;
      v12[1] = v19;
      if (v19) {
        *(void *)(v18 + 16) = v12 + 1;
      }
      void v12[2] = v17;
      *uint64_t v17 = v12;
    }
    uint64_t v52 = 6;
    uint64_t v53 = 0;
    uint64_t v54 = (int32x2_t ****)(v12 + 4);
    uint64_t v20 = (int32x2_t ****)(v12 + 4);
    if (v12 != (void *)-8224)
    {
      uint64_t v20 = (int32x2_t ****)(v12 + 4);
      if (v12 != (void *)-4128)
      {
        uint64_t v20 = (int32x2_t ****)(v12 + 4);
        if (v12 != (void *)-32)
        {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v52);
          uint64_t v20 = v54;
        }
      }
    }
    int v55 = a4;
    uint64_t v21 = *(void *)this + 32 * v9;
    std::error_code v22 = *(int32x2_t *****)(v21 + 16);
    if (v22 != v20)
    {
      BOOL v23 = v22 == (int32x2_t ****)-4096 || v22 == 0;
      if (!v23 && v22 != (int32x2_t ****)-8192)
      {
        unint64_t v40 = *(void *)v21 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v40 = *(void *)(v21 + 8);
        int v41 = *(unint64_t **)(v21 + 8);
        if (v41)
        {
          *int v41 = *v41 & 7 | v40;
        }
        else
        {
          uint64_t v42 = *(void *)(v21 + 16);
          __int16 v43 = ***(int32x2_t ****)v42;
          unint64_t v44 = (unint64_t)v43[303];
          if (v44 <= v40)
          {
            uint64_t v45 = v43[305].u32[0];
            if (v44 + 16 * v45 > v40)
            {
              unsigned int v46 = v45 - 1;
              LODWORD(v47) = v46 & ((v42 >> 4) ^ (v42 >> 9));
              uint64_t v48 = (uint64_t *)(v44 + 16 * v47);
              uint64_t v49 = *v48;
              if (v42 == *v48)
              {
LABEL_57:
                *uint64_t v48 = -8192;
                v43[304] = vadd_s32(v43[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v42 = *(void *)(v21 + 16);
              }
              else
              {
                int v50 = 1;
                while (v49 != -4096)
                {
                  int v51 = v47 + v50++;
                  uint64_t v47 = v51 & v46;
                  uint64_t v49 = *(void *)(v44 + 16 * v47);
                  if (v42 == v49)
                  {
                    uint64_t v48 = (uint64_t *)(v44 + 16 * v47);
                    goto LABEL_57;
                  }
                }
              }
              *(unsigned char *)(v42 + 17) &= ~1u;
            }
          }
        }
        uint64_t v20 = v54;
      }
      *(void *)(v21 + 16) = v20;
      if (v20 != (int32x2_t ****)-4096 && v20 != (int32x2_t ****)-8192 && v20 != 0)
      {
        uint64_t v25 = v52;
        uint64_t v26 = (void *)(v52 & 0xFFFFFFFFFFFFFFF8);
        *(void *)(v21 + 8) = *(void *)(v52 & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v26 = v21;
        *(void *)uint64_t v21 = v25 & 0xFFFFFFFFFFFFFFF8 | *(void *)v21 & 7;
        uint64_t v27 = *(uint64_t **)(v21 + 8);
        if (v27) {
          *uint64_t v27 = *v27 & 7 | (v21 + 8);
        }
      }
    }
    *(_DWORD *)(v21 + 24) = v55;
    if (v54 != (int32x2_t ****)-8192 && v54 != (int32x2_t ****)-4096 && v54 != 0)
    {
      unint64_t v29 = v52 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v52 & 0xFFFFFFFFFFFFFFF8) = v53;
      if (v53)
      {
        *uint64_t v53 = *v53 & 7 | v29;
      }
      else
      {
        uint64_t v30 = v54;
        uint64_t v31 = ***v54;
        unint64_t v32 = (unint64_t)v31[303];
        if (v32 <= v29)
        {
          uint64_t v33 = v31[305].u32[0];
          if (v32 + 16 * v33 > v29)
          {
            unsigned int v34 = v33 - 1;
            LODWORD(v35) = v34 & ((v54 >> 4) ^ (v54 >> 9));
            uint64_t v36 = (int32x2_t *****)(v32 + 16 * v35);
            int v37 = *v36;
            if (v54 == *v36)
            {
LABEL_46:
              *uint64_t v36 = (int32x2_t ****)-8192;
              v31[304] = vadd_s32(v31[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v30 = v54;
            }
            else
            {
              int v38 = 1;
              while (v37 != (int32x2_t ****)-4096)
              {
                int v39 = v35 + v38++;
                uint64_t v35 = v39 & v34;
                int v37 = *(int32x2_t *****)(v32 + 16 * v35);
                if (v54 == v37)
                {
                  uint64_t v36 = (int32x2_t *****)(v32 + 16 * v35);
                  goto LABEL_46;
                }
              }
            }
            *((unsigned char *)v30 + 17) &= ~1u;
          }
        }
      }
    }
  }
  return v10;
}

llvm::Type **llvm::BitcodeReaderValueList::getValueFwdRef(llvm::BitcodeReaderValueList *this, unsigned int a2, llvm::Type *a3)
{
  if (*((_DWORD *)this + 14) <= a2) {
    return 0;
  }
  uint64_t v6 = *(void *)this;
  if (((*((void *)this + 1) - *(void *)this) >> 5) <= a2)
  {
    sub_1CC1E4460((uint64_t *)this, a2 + 1);
    uint64_t v6 = *(void *)this;
  }
  unint64_t v7 = *(llvm::Type ***)(v6 + 32 * a2 + 16);
  if (!v7)
  {
    if (a3) {
      operator new();
    }
    return 0;
  }
  if (a3 && *v7 != a3) {
    return 0;
  }
  return v7;
}

void llvm::BitcodeReaderValueList::resolveConstantForwardRefs(llvm::BitcodeReaderValueList *this)
{
  v49[64] = *(llvm::FixedVectorType ***)MEMORY[0x1E4F143B8];
  int v2 = (unint64_t *)*((void *)this + 3);
  char v3 = (uint64_t *)*((void *)this + 4);
  unint64_t v4 = 126 - 2 * __clz(((char *)v3 - (char *)v2) >> 4);
  if (v3 == (uint64_t *)v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  sub_1CC1F630C(v2, v3, v5, 1);
  unsigned int v48 = 0;
  uint64_t v6 = *((void *)this + 4);
  if (*((void *)this + 3) != v6)
  {
    while (1)
    {
      uint64_t v9 = *(void *)(v6 - 16);
      uint64_t v7 = v6 - 16;
      uint64_t v8 = v9;
      unint64_t v10 = *(llvm::Value **)(*(void *)this + 32 * *(unsigned int *)(v7 + 8) + 16);
      *((void *)this + 4) = v7;
      uint64_t v11 = *(void *)(v9 + 8);
      if (v11) {
        break;
      }
LABEL_45:
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v8, v10, (llvm::Value *)1);
      llvm::Value::~Value((llvm::Value *)v8, v34);
      int v35 = *(_DWORD *)(v8 + 20);
      if ((v35 & 0x40000000) != 0)
      {
        __int16 v43 = *(char **)(v8 - 8);
        uint64_t v42 = (char *)(v8 - 8);
        int v41 = v43;
        uint64_t v44 = v35 & 0x7FFFFFF;
        if (v44)
        {
          uint64_t v45 = 32 * v44;
          do
          {
            unsigned int v46 = &v41[v45];
            if (*(void *)&v41[v45 - 32])
            {
              **((void **)v46 - 2) = *((void *)v46 - 3);
              uint64_t v47 = *((void *)v46 - 3);
              if (v47) {
                *(void *)(v47 + 16) = *((void *)v46 - 2);
              }
            }
            v45 -= 32;
          }
          while (v45);
        }
        operator delete(v41);
        unint64_t v40 = v42;
      }
      else
      {
        uint64_t v36 = v35 & 0x7FFFFFF;
        if (v36)
        {
          int v37 = (void **)(v8 - 16);
          uint64_t v38 = -32 * v36;
          do
          {
            if (*(v37 - 2))
            {
              **int v37 = *(v37 - 1);
              uint64_t v39 = (uint64_t)*(v37 - 1);
              if (v39) {
                *(void *)(v39 + 16) = *v37;
              }
            }
            v37 -= 4;
            v38 += 32;
          }
          while (v38);
        }
        unint64_t v40 = (char *)(v8 - 32 * v36);
        if (v35 < 0) {
          unint64_t v40 = &v40[-*((void *)v40 - 1) - 8];
        }
      }
      operator delete(v40);
      uint64_t v6 = *((void *)this + 4);
      if (*((void *)this + 3) == v6) {
        return;
      }
    }
    uint64_t v12 = (uint64_t *)((char *)v10 + 8);
    while (1)
    {
      uint64_t v13 = *(void *)(v11 + 24);
      int v14 = *(unsigned __int8 *)(v13 + 16);
      if ((v14 - 21) <= 0xFFFFFFEE)
      {
        if (*(void *)v11)
        {
          **(void **)(v11 + 16) = *(void *)(v11 + 8);
          uint64_t v15 = *(void *)(v11 + 8);
          if (v15) {
            *(void *)(v15 + 16) = *(void *)(v11 + 16);
          }
        }
        *(void *)uint64_t v11 = v10;
        if (v10)
        {
          uint64_t v16 = *v12;
          *(void *)(v11 + 8) = *v12;
          if (v16) {
            *(void *)(v16 + 16) = v11 + 8;
          }
          *(void *)(v11 + 16) = v12;
          uint64_t *v12 = v11;
        }
        goto LABEL_44;
      }
      int v17 = *(_DWORD *)(v13 + 20);
      if ((v17 & 0x40000000) != 0)
      {
        uint64_t v19 = *(llvm::FixedVectorType ****)(v13 - 8);
        uint64_t v18 = v17 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v18 = v17 & 0x7FFFFFF;
        uint64_t v19 = (llvm::FixedVectorType ***)(v13 - 32 * v18);
      }
      uint64_t v20 = &v19[4 * v18];
      if (v18)
      {
        do
        {
          uint64_t v21 = *v19;
          if (*((unsigned char *)*v19 + 16) == 5)
          {
            std::error_code v22 = *v19;
            if (*((_WORD *)v21 + 9) == 58)
            {
              std::error_code v22 = (llvm::FixedVectorType **)v10;
              if (v21 != (llvm::FixedVectorType **)v8)
              {
                BOOL v23 = (void *)*((void *)this + 3);
                uint64_t v24 = *((void *)this + 4) - (void)v23;
                if (v24)
                {
                  unint64_t v25 = v24 >> 4;
                  do
                  {
                    unint64_t v26 = v25 >> 1;
                    uint64_t v27 = &v23[2 * (v25 >> 1)];
                    unint64_t v29 = *v27;
                    uint64_t v28 = v27 + 2;
                    v25 += ~(v25 >> 1);
                    if (v29 < (unint64_t)v21) {
                      BOOL v23 = v28;
                    }
                    else {
                      unint64_t v25 = v26;
                    }
                  }
                  while (v25);
                }
                std::error_code v22 = *(llvm::FixedVectorType ***)(*(void *)this + 32 * *((unsigned int *)v23 + 2) + 16);
              }
            }
          }
          else
          {
            std::error_code v22 = *v19;
          }
          if (v48 >= 0x40uLL) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v49[v48++] = v22;
          v19 += 4;
        }
        while (v19 != v20);
        int v14 = *(unsigned __int8 *)(v13 + 16);
      }
      if (v14 == 8) {
        break;
      }
      if (v14 != 10)
      {
        if (v14 == 9) {
          uint64_t v30 = (uint64_t)llvm::ConstantStruct::get(*(llvm::PoisonValue **)v13, (llvm::Type *)v49, v48);
        }
        else {
          uint64_t v30 = (uint64_t)llvm::ConstantExpr::getWithOperands((llvm::ConstantExpr *)v13, (llvm::ConstantExpr **)v49, v48, *(llvm::Constant ****)v13, 0, 0);
        }
        goto LABEL_42;
      }
      uint64_t Impl = llvm::ConstantVector::getImpl(v49, (llvm::Type *)v48);
      if (!Impl)
      {
        llvm::FixedVectorType::get(*v49[0], (llvm::Type *)v48);
        uint64_t v30 = sub_1CC56A4DC(**v32 + 1288, (uint64_t)v32, v49, v48);
        goto LABEL_42;
      }
LABEL_43:
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v13, Impl, (llvm::Value *)1);
      llvm::Constant::destroyConstant((int32x2_t ****)v13, v33);
      unsigned int v48 = 0;
LABEL_44:
      uint64_t v11 = *(void *)(v8 + 8);
      if (!v11) {
        goto LABEL_45;
      }
    }
    uint64_t v30 = (uint64_t)llvm::ConstantArray::get(*(llvm::PoisonValue **)v13, (llvm::Type *)v49, v48);
LABEL_42:
    uint64_t Impl = (llvm::Value *)v30;
    goto LABEL_43;
  }
}

unint64_t *sub_1CC1F630C(unint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
uint64_t *sub_1CC1F6710(uint64_t *result, uint64_t *a2)
{
  if (result == a2) {
    return result;
  }
  int v2 = result + 2;
  if (result + 2 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  unint64_t v4 = result;
  do
  {
    uint64_t v5 = (unint64_t *)v4;
    unint64_t v4 = v2;
    unint64_t v6 = v5[2];
    unint64_t v7 = *v5;
    if (v6 >= *v5)
    {
      if (v7 < v6) {
        goto LABEL_20;
      }
      unsigned int v8 = *((_DWORD *)v5 + 6);
      unsigned int v9 = *((_DWORD *)v5 + 2);
      if (v8 >= v9) {
        goto LABEL_20;
      }
    }
    else
    {
      unsigned int v8 = *((_DWORD *)v5 + 6);
      unsigned int v9 = *((_DWORD *)v5 + 2);
    }
    _OWORD v5[2] = v7;
    *((_DWORD *)v4 + 2) = v9;
    unint64_t v10 = (unint64_t *)result;
    if (v5 == (unint64_t *)result) {
      goto LABEL_19;
    }
    uint64_t v11 = v3;
    while (1)
    {
      unint64_t v12 = *(uint64_t *)((char *)result + v11 - 16);
      if (v6 < v12)
      {
        unsigned int v13 = *(_DWORD *)((char *)result + v11 - 8);
        goto LABEL_12;
      }
      if (v12 < v6)
      {
        unint64_t v10 = (unint64_t *)((char *)result + v11);
        goto LABEL_19;
      }
      unsigned int v13 = *(_DWORD *)((char *)result + v11 - 8);
      if (v8 >= v13) {
        break;
      }
LABEL_12:
      v5 -= 2;
      uint64_t v14 = (uint64_t)result + v11;
      *(void *)uint64_t v14 = v12;
      *(_DWORD *)(v14 + 8) = v13;
      v11 -= 16;
      if (!v11)
      {
        unint64_t v10 = (unint64_t *)result;
        goto LABEL_19;
      }
    }
    unint64_t v10 = v5;
LABEL_19:
    *unint64_t v10 = v6;
    *((_DWORD *)v10 + 2) = v8;
LABEL_20:
    int v2 = v4 + 2;
    v3 += 16;
  }
  while (v4 + 2 != a2);
  return result;
}

uint64_t *sub_1CC1F67F8(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    int v2 = result + 2;
    if (result + 2 != a2)
    {
      for (uint64_t i = result + 1; ; i += 2)
      {
        unint64_t v4 = (unint64_t *)result;
        uint64_t result = v2;
        unint64_t v5 = v4[2];
        unint64_t v6 = *v4;
        if (v5 < *v4) {
          break;
        }
        if (v6 >= v5)
        {
          unsigned int v7 = *((_DWORD *)v4 + 6);
          if (v7 < *((_DWORD *)v4 + 2)) {
            goto LABEL_6;
          }
        }
LABEL_14:
        int v2 = result + 2;
        if (result + 2 == a2) {
          return result;
        }
      }
      unsigned int v7 = *((_DWORD *)v4 + 6);
LABEL_6:
      for (unint64_t j = i; ; j -= 2)
      {
        j[1] = v6;
        *((_DWORD *)j + 4) = *(_DWORD *)j;
        unint64_t v6 = *(j - 3);
        if (v5 >= v6 && (v6 < v5 || v7 >= *((_DWORD *)j - 4))) {
          break;
        }
      }
      *(j - 1) = v5;
      *(_DWORD *)unint64_t j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

unint64_t *sub_1CC1F689C(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *result;
  if (*a2 >= *result && (v4 < v3 || *((_DWORD *)a2 + 2) >= *((_DWORD *)result + 2)))
  {
    unint64_t v8 = *a3;
    if (*a3 >= v3)
    {
      if (v3 < v8) {
        return result;
      }
      unsigned int v10 = *((_DWORD *)a3 + 2);
      unsigned int v9 = *((_DWORD *)a2 + 2);
      if (v10 >= v9) {
        return result;
      }
    }
    else
    {
      unsigned int v9 = *((_DWORD *)a2 + 2);
      unsigned int v10 = *((_DWORD *)a3 + 2);
    }
    *a2 = v8;
    *a3 = v3;
    *((_DWORD *)a2 + 2) = v10;
    *((_DWORD *)a3 + 2) = v9;
    unint64_t v11 = *a2;
    unint64_t v12 = *result;
    if (*a2 >= *result)
    {
      if (v12 < v11) {
        return result;
      }
      unsigned int v14 = *((_DWORD *)a2 + 2);
      unsigned int v13 = *((_DWORD *)result + 2);
      if (v14 >= v13) {
        return result;
      }
    }
    else
    {
      unsigned int v13 = *((_DWORD *)result + 2);
      unsigned int v14 = *((_DWORD *)a2 + 2);
    }
    unsigned __int8 *result = v11;
    *a2 = v12;
    *((_DWORD *)result + 2) = v14;
    *((_DWORD *)a2 + 2) = v13;
    return result;
  }
  unint64_t v5 = *a3;
  if (*a3 < v3)
  {
    unsigned int v6 = *((_DWORD *)a3 + 2);
LABEL_6:
    unsigned __int8 *result = v5;
    *a3 = v4;
    int v7 = *((_DWORD *)result + 2);
    *((_DWORD *)result + 2) = v6;
    *((_DWORD *)a3 + 2) = v7;
    return result;
  }
  if (v3 >= v5)
  {
    unsigned int v6 = *((_DWORD *)a3 + 2);
    unsigned int v15 = *((_DWORD *)a2 + 2);
    if (v6 < v15) {
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v15 = *((_DWORD *)a2 + 2);
  }
  unsigned __int8 *result = v3;
  *a2 = v4;
  unsigned int v16 = *((_DWORD *)result + 2);
  *((_DWORD *)result + 2) = v15;
  *((_DWORD *)a2 + 2) = v16;
  unint64_t v17 = *a3;
  if (*a3 < v4)
  {
    unsigned int v18 = *((_DWORD *)a3 + 2);
LABEL_24:
    *a2 = v17;
    *a3 = v4;
    *((_DWORD *)a2 + 2) = v18;
    *((_DWORD *)a3 + 2) = v16;
    return result;
  }
  if (v4 >= v17)
  {
    unsigned int v18 = *((_DWORD *)a3 + 2);
    if (v18 < v16) {
      goto LABEL_24;
    }
  }
  return result;
}

unint64_t *sub_1CC1F69E4(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unsigned int v3 = *((_DWORD *)a1 + 2);
  unint64_t v4 = *(a2 - 2);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *((_DWORD *)a2 - 2)))
  {
    for (uint64_t i = a1 + 2; i < a2 && v2 >= *i && (*i < v2 || v3 >= *((_DWORD *)i + 2)); i += 2)
      ;
  }
  else
  {
    uint64_t i = a1;
    do
    {
      unint64_t v7 = i[2];
      i += 2;
      unint64_t v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= *((_DWORD *)i + 2)));
  }
  if (i < a2)
  {
    for (a2 -= 2; v2 < v4 || v4 >= v2 && v3 < *((_DWORD *)a2 + 2); a2 -= 2)
    {
      unint64_t v8 = *(a2 - 2);
      unint64_t v4 = v8;
    }
  }
  if (i < a2)
  {
    unint64_t v9 = *i;
    unint64_t v10 = *a2;
    do
    {
      *uint64_t i = v10;
      *a2 = v9;
      unint64_t v11 = i[2];
      i += 2;
      unint64_t v9 = v11;
      int v12 = *((_DWORD *)i - 2);
      *((_DWORD *)i - 2) = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *((_DWORD *)i + 2)))
      {
        unint64_t v13 = i[2];
        i += 2;
        unint64_t v9 = v13;
      }
      do
      {
        do
        {
          unint64_t v14 = *(a2 - 2);
          a2 -= 2;
          unint64_t v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < *((_DWORD *)a2 + 2));
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)i - 2);
  }
  *(i - 2) = v2;
  *((_DWORD *)i - 2) = v3;
  return i;
}

unint64_t sub_1CC1F6B38(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *a1;
  unsigned int v4 = *((_DWORD *)a1 + 2);
  while (1)
  {
    unint64_t v5 = a1[v2 + 2];
    if (v5 >= v3 && (v3 < v5 || LODWORD(a1[v2 + 3]) >= v4)) {
      break;
    }
    v2 += 2;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      unint64_t v8 = *(void *)(a2 - 16);
      a2 -= 16;
      unint64_t v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || *(_DWORD *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_16:
    if (v6 < a2)
    {
      do
      {
        unint64_t v10 = *(void *)(a2 - 16);
        a2 -= 16;
        unint64_t v9 = v10;
        if (v10 < v3) {
          break;
        }
        if (v3 < v9) {
          goto LABEL_16;
        }
      }
      while (v6 < a2 && *(_DWORD *)(a2 + 8) >= v4);
    }
  }
  if (v6 >= a2)
  {
    unint64_t v12 = v6;
  }
  else
  {
    unint64_t v11 = *(void *)a2;
    unint64_t v12 = v6;
    unint64_t v13 = a2;
    do
    {
      *(void *)unint64_t v12 = v11;
      *(void *)unint64_t v13 = v5;
      int v14 = *(_DWORD *)(v12 + 8);
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = v14;
      do
      {
        do
        {
          unint64_t v15 = *(void *)(v12 + 16);
          v12 += 16;
          unint64_t v5 = v15;
        }
        while (v15 < v3);
      }
      while (v3 >= v5 && *(_DWORD *)(v12 + 8) < v4);
      do
      {
        unint64_t v16 = *(void *)(v13 - 16);
        v13 -= 16;
        unint64_t v11 = v16;
      }
      while (v16 >= v3 && (v3 < v11 || *(_DWORD *)(v13 + 8) >= v4));
    }
    while (v12 < v13);
  }
  if ((uint64_t *)(v12 - 16) != a1)
  {
    *a1 = *(void *)(v12 - 16);
    *((_DWORD *)a1 + 2) = *(_DWORD *)(v12 - 8);
  }
  *(void *)(v12 - 16) = v3;
  *(_DWORD *)(v12 - 8) = v4;
  return v12 - 16;
}

BOOL sub_1CC1F6C88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(void *)(a2 - 16);
      unint64_t v7 = *(void *)a1;
      if (v6 < *(void *)a1)
      {
        unsigned int v8 = *(_DWORD *)(a1 + 8);
        unsigned int v9 = *(_DWORD *)(a2 - 8);
LABEL_30:
        *(void *)a1 = v6;
        *(void *)(a2 - 16) = v7;
        *(_DWORD *)(a1 + 8) = v9;
        *(_DWORD *)(a2 - 8) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        unsigned int v9 = *(_DWORD *)(a2 - 8);
        unsigned int v8 = *(_DWORD *)(a1 + 8);
        if (v9 < v8) {
          goto LABEL_30;
        }
      }
      return result;
    case 3:
      sub_1CC1F689C((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a2 - 16));
      return 1;
    case 4:
      sub_1CC1F6EA8(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_1CC1F6FAC(a1, a1 + 16, a1 + 32, a1 + 48, (unint64_t *)(a2 - 16));
      return 1;
    default:
      uint64_t v10 = a1 + 32;
      sub_1CC1F689C((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      uint64_t v11 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
LABEL_6:
  unint64_t v14 = *(void *)v11;
  unint64_t v15 = *(void *)v10;
  if (*(void *)v11 >= *(void *)v10)
  {
    if (v15 < v14) {
      goto LABEL_21;
    }
    unsigned int v16 = *(_DWORD *)(v11 + 8);
    unsigned int v17 = *(_DWORD *)(v10 + 8);
    if (v16 >= v17) {
      goto LABEL_21;
    }
  }
  else
  {
    unsigned int v16 = *(_DWORD *)(v11 + 8);
    unsigned int v17 = *(_DWORD *)(v10 + 8);
  }
  *(void *)uint64_t v11 = v15;
  *(_DWORD *)(v11 + 8) = v17;
  uint64_t v18 = a1;
  if (v10 == a1) {
    goto LABEL_20;
  }
  uint64_t v19 = v12;
  while (1)
  {
    uint64_t v20 = a1 + v19;
    unint64_t v21 = *(void *)(a1 + v19 + 16);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        uint64_t v18 = a1 + v19 + 32;
        goto LABEL_20;
      }
      unsigned int v22 = *(_DWORD *)(a1 + v19 + 24);
      if (v16 >= v22)
      {
        uint64_t v18 = v10;
LABEL_20:
        *(void *)uint64_t v18 = v14;
        *(_DWORD *)(v18 + 8) = v16;
        if (++v13 == 8) {
          return v11 + 16 == a2;
        }
LABEL_21:
        uint64_t v10 = v11;
        v12 += 16;
        v11 += 16;
        if (v11 == a2) {
          return 1;
        }
        goto LABEL_6;
      }
    }
    else
    {
      unsigned int v22 = *(_DWORD *)(v20 + 24);
    }
    v10 -= 16;
    *(void *)(v20 + 32) = v21;
    *(_DWORD *)(a1 + v19 + 40) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      uint64_t v18 = a1;
      goto LABEL_20;
    }
  }
}

unint64_t *sub_1CC1F6EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = sub_1CC1F689C((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3);
  unint64_t v9 = *(void *)a4;
  unint64_t v10 = *(void *)a3;
  if (*(void *)a4 >= *(void *)a3)
  {
    if (v10 < v9) {
      return result;
    }
    unsigned int v12 = *(_DWORD *)(a4 + 8);
    unsigned int v11 = *(_DWORD *)(a3 + 8);
    if (v12 >= v11) {
      return result;
    }
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(a3 + 8);
    unsigned int v12 = *(_DWORD *)(a4 + 8);
  }
  *(void *)a3 = v9;
  *(void *)a4 = v10;
  *(_DWORD *)(a3 + 8) = v12;
  *(_DWORD *)(a4 + 8) = v11;
  unint64_t v13 = *(void *)a3;
  unint64_t v14 = *(void *)a2;
  if (*(void *)a3 >= *(void *)a2)
  {
    if (v14 < v13) {
      return result;
    }
    unsigned int v16 = *(_DWORD *)(a3 + 8);
    unsigned int v15 = *(_DWORD *)(a2 + 8);
    if (v16 >= v15) {
      return result;
    }
  }
  else
  {
    unsigned int v15 = *(_DWORD *)(a2 + 8);
    unsigned int v16 = *(_DWORD *)(a3 + 8);
  }
  *(void *)a2 = v13;
  *(void *)a3 = v14;
  *(_DWORD *)(a2 + 8) = v16;
  *(_DWORD *)(a3 + 8) = v15;
  unint64_t v17 = *(void *)a2;
  unint64_t v18 = *(void *)a1;
  if (*(void *)a2 < *(void *)a1)
  {
    unsigned int v19 = *(_DWORD *)(a1 + 8);
    unsigned int v20 = *(_DWORD *)(a2 + 8);
LABEL_15:
    *(void *)a1 = v17;
    *(void *)a2 = v18;
    *(_DWORD *)(a1 + 8) = v20;
    *(_DWORD *)(a2 + 8) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    unsigned int v20 = *(_DWORD *)(a2 + 8);
    unsigned int v19 = *(_DWORD *)(a1 + 8);
    if (v20 < v19) {
      goto LABEL_15;
    }
  }
  return result;
}

unint64_t *sub_1CC1F6FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  BOOL result = sub_1CC1F6EA8(a1, a2, a3, a4);
  unint64_t v11 = *a5;
  unint64_t v12 = *(void *)a4;
  if (*a5 >= *(void *)a4)
  {
    if (v12 < v11) {
      return result;
    }
    unsigned int v14 = *((_DWORD *)a5 + 2);
    unsigned int v13 = *(_DWORD *)(a4 + 8);
    if (v14 >= v13) {
      return result;
    }
  }
  else
  {
    unsigned int v13 = *(_DWORD *)(a4 + 8);
    unsigned int v14 = *((_DWORD *)a5 + 2);
  }
  *(void *)a4 = v11;
  *a5 = v12;
  *(_DWORD *)(a4 + 8) = v14;
  *((_DWORD *)a5 + 2) = v13;
  unint64_t v15 = *(void *)a4;
  unint64_t v16 = *(void *)a3;
  if (*(void *)a4 >= *(void *)a3)
  {
    if (v16 < v15) {
      return result;
    }
    unsigned int v18 = *(_DWORD *)(a4 + 8);
    unsigned int v17 = *(_DWORD *)(a3 + 8);
    if (v18 >= v17) {
      return result;
    }
  }
  else
  {
    unsigned int v17 = *(_DWORD *)(a3 + 8);
    unsigned int v18 = *(_DWORD *)(a4 + 8);
  }
  *(void *)a3 = v15;
  *(void *)a4 = v16;
  *(_DWORD *)(a3 + 8) = v18;
  *(_DWORD *)(a4 + 8) = v17;
  unint64_t v19 = *(void *)a3;
  unint64_t v20 = *(void *)a2;
  if (*(void *)a3 >= *(void *)a2)
  {
    if (v20 < v19) {
      return result;
    }
    unsigned int v22 = *(_DWORD *)(a3 + 8);
    unsigned int v21 = *(_DWORD *)(a2 + 8);
    if (v22 >= v21) {
      return result;
    }
  }
  else
  {
    unsigned int v21 = *(_DWORD *)(a2 + 8);
    unsigned int v22 = *(_DWORD *)(a3 + 8);
  }
  *(void *)a2 = v19;
  *(void *)a3 = v20;
  *(_DWORD *)(a2 + 8) = v22;
  *(_DWORD *)(a3 + 8) = v21;
  unint64_t v23 = *(void *)a2;
  unint64_t v24 = *(void *)a1;
  if (*(void *)a2 < *(void *)a1)
  {
    unsigned int v25 = *(_DWORD *)(a1 + 8);
    unsigned int v26 = *(_DWORD *)(a2 + 8);
LABEL_9:
    *(void *)a1 = v23;
    *(void *)a2 = v24;
    *(_DWORD *)(a1 + 8) = v26;
    *(_DWORD *)(a2 + 8) = v25;
    return result;
  }
  if (v24 >= v23)
  {
    unsigned int v26 = *(_DWORD *)(a2 + 8);
    unsigned int v25 = *(_DWORD *)(a1 + 8);
    if (v26 < v25) {
      goto LABEL_9;
    }
  }
  return result;
}

unint64_t sub_1CC1F7100(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    uint64_t v6 = a2 - result;
    uint64_t v7 = (uint64_t)(a2 - result) >> 4;
    if ((uint64_t)(a2 - result) >= 17)
    {
      unint64_t v8 = (unint64_t)(v7 - 2) >> 1;
      unint64_t v9 = v8 + 1;
      unint64_t v10 = (unint64_t *)(result + 16 * v8);
      do
      {
        BOOL result = sub_1CC1F739C(v5, v7, v10);
        v10 -= 2;
        --v9;
      }
      while (v9);
    }
    if (v4 != a3)
    {
      for (uint64_t i = v4; i != a3; i += 16)
      {
        unint64_t v12 = *(void *)i;
        unint64_t v13 = *(void *)v5;
        if (*(void *)i >= *(void *)v5)
        {
          if (v13 < v12) {
            continue;
          }
          unsigned int v14 = *(_DWORD *)(i + 8);
          unsigned int v15 = *(_DWORD *)(v5 + 8);
          if (v14 >= v15) {
            continue;
          }
        }
        else
        {
          unsigned int v14 = *(_DWORD *)(i + 8);
          unsigned int v15 = *(_DWORD *)(v5 + 8);
        }
        *(void *)uint64_t i = v13;
        *(void *)uint64_t v5 = v12;
        *(_DWORD *)(i + 8) = v15;
        *(_DWORD *)(v5 + 8) = v14;
        BOOL result = sub_1CC1F739C(v5, v7, (unint64_t *)v5);
      }
    }
    if (v6 >= 17)
    {
      do
      {
        uint64_t v16 = 0;
        unint64_t v17 = *(void *)v5;
        int v18 = *(_DWORD *)(v5 + 8);
        uint64_t v19 = v7 - 2;
        if (v7 < 2) {
          uint64_t v19 = v7 - 1;
        }
        uint64_t v20 = v19 >> 1;
        uint64_t v21 = v5;
        do
        {
          uint64_t v22 = v21;
          uint64_t v23 = v16 + 1;
          v21 += 16 * (v16 + 1);
          uint64_t v24 = 2 * v16;
          uint64_t v16 = (2 * v16) | 1;
          uint64_t v25 = v24 + 2;
          if (v25 < v7)
          {
            BOOL result = *(void *)(v21 + 16);
            if (*(void *)v21 < result
              || result >= *(void *)v21
              && (BOOL result = *(unsigned int *)(v21 + 24), *(_DWORD *)(v22 + 16 * v23 + 8) < result))
            {
              v21 += 16;
              uint64_t v16 = v25;
            }
          }
          *(void *)uint64_t v22 = *(void *)v21;
          *(_DWORD *)(v22 + 8) = *(_DWORD *)(v21 + 8);
        }
        while (v16 <= v20);
        if (v21 == v4 - 16)
        {
          *(void *)uint64_t v21 = v17;
          *(_DWORD *)(v21 + 8) = v18;
        }
        else
        {
          *(void *)uint64_t v21 = *(void *)(v4 - 16);
          *(_DWORD *)(v21 + 8) = *(_DWORD *)(v4 - 8);
          *(void *)(v4 - 16) = v17;
          *(_DWORD *)(v4 - 8) = v18;
          uint64_t v26 = v21 - v5 + 16;
          if (v26 >= 17)
          {
            unint64_t v27 = ((unint64_t)v26 >> 4) - 2;
            unint64_t v28 = v27 >> 1;
            uint64_t v29 = v5 + 16 * (v27 >> 1);
            unint64_t v30 = *(void *)v29;
            unint64_t v31 = *(void *)v21;
            if (*(void *)v29 < *(void *)v21)
            {
              unsigned int v32 = *(_DWORD *)(v21 + 8);
              unsigned int v33 = *(_DWORD *)(v29 + 8);
LABEL_30:
              *(void *)uint64_t v21 = v30;
              *(_DWORD *)(v21 + 8) = v33;
              if (v27 >= 2)
              {
                while (1)
                {
                  unint64_t v35 = v28 - 1;
                  unint64_t v28 = (v28 - 1) >> 1;
                  uint64_t v34 = v5 + 16 * v28;
                  unint64_t v36 = *(void *)v34;
                  if (*(void *)v34 >= v31)
                  {
                    if (v31 < v36) {
                      break;
                    }
                    unsigned int v37 = *(_DWORD *)(v5 + 16 * v28 + 8);
                    if (v37 >= v32) {
                      break;
                    }
                  }
                  else
                  {
                    unsigned int v37 = *(_DWORD *)(v34 + 8);
                  }
                  *(void *)uint64_t v29 = v36;
                  *(_DWORD *)(v29 + 8) = v37;
                  uint64_t v29 = v5 + 16 * v28;
                  if (v35 <= 1) {
                    goto LABEL_37;
                  }
                }
              }
              uint64_t v34 = v29;
LABEL_37:
              *(void *)uint64_t v34 = v31;
              *(_DWORD *)(v34 + 8) = v32;
              goto LABEL_38;
            }
            if (v31 >= v30)
            {
              unsigned int v33 = *(_DWORD *)(v5 + 16 * v28 + 8);
              unsigned int v32 = *(_DWORD *)(v21 + 8);
              if (v33 < v32) {
                goto LABEL_30;
              }
            }
          }
        }
LABEL_38:
        v4 -= 16;
      }
      while (v7-- > 2);
    }
  }
  return result;
}

uint64_t sub_1CC1F739C(uint64_t result, uint64_t a2, unint64_t *a3)
{
  if (a2 >= 2)
  {
    uint64_t v3 = (uint64_t)a3 - result;
    int64_t v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 4)
    {
      uint64_t v5 = v3 >> 3;
      uint64_t v6 = (v3 >> 3) + 1;
      uint64_t v7 = (unint64_t *)(result + 16 * v6);
      uint64_t v8 = v5 + 2;
      if (v8 < a2)
      {
        unint64_t v9 = v7[2];
        if (*v7 < v9 || v9 >= *v7 && *(_DWORD *)(result + 16 * v6 + 8) < *((_DWORD *)v7 + 6))
        {
          v7 += 2;
          uint64_t v6 = v8;
        }
      }
      unint64_t v10 = *v7;
      unint64_t v11 = *a3;
      if (*v7 >= *a3)
      {
        if (v11 >= v10)
        {
          unsigned int v13 = *((_DWORD *)v7 + 2);
          unsigned int v12 = *((_DWORD *)a3 + 2);
          if (v13 < v12) {
            return result;
          }
        }
        else
        {
          unsigned int v12 = *((_DWORD *)a3 + 2);
          unsigned int v13 = *((_DWORD *)v7 + 2);
        }
        *a3 = v10;
        *((_DWORD *)a3 + 2) = v13;
        if (v4 >= v6)
        {
          while (1)
          {
            uint64_t v15 = 2 * v6;
            uint64_t v6 = (2 * v6) | 1;
            unsigned int v14 = (unint64_t *)(result + 16 * v6);
            uint64_t v16 = v15 + 2;
            if (v16 < a2)
            {
              unint64_t v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(_DWORD *)(result + 16 * v6 + 8) < *((_DWORD *)v14 + 6))
              {
                v14 += 2;
                uint64_t v6 = v16;
              }
            }
            unint64_t v18 = *v14;
            if (*v14 < v11) {
              break;
            }
            unsigned int v19 = *((_DWORD *)v14 + 2);
            if (v11 >= v18 && v19 < v12) {
              break;
            }
            unint64_t *v7 = v18;
            *((_DWORD *)v7 + 2) = v19;
            uint64_t v7 = v14;
            if (v4 < v6) {
              goto LABEL_14;
            }
          }
        }
        unsigned int v14 = v7;
LABEL_14:
        unint64_t *v14 = v11;
        *((_DWORD *)v14 + 2) = v12;
      }
    }
  }
  return result;
}

uint64_t LLVMWriteBitcodeToFile(uint64_t a1, char *a2)
{
  v6[0] = 0;
  std::system_category();
  if (a2) {
    size_t v3 = strlen(a2);
  }
  else {
    size_t v3 = 0;
  }
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v5, a2, v3, (uint64_t)v6, 0);
  if (!v6[0]) {
    llvm::WriteBitcodeToFile();
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v5);
  return 0xFFFFFFFFLL;
}

void LLVMWriteBitcodeToFD(uint64_t a1, int a2, int a3, int a4)
{
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v4, a2, a3 != 0, a4 != 0, 0);
  llvm::WriteBitcodeToFile();
}

void LLVMWriteBitcodeToFileHandle(uint64_t a1, int a2)
{
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v2, a2, 1, 0, 0);
  llvm::WriteBitcodeToFile();
}

void LLVMWriteBitcodeToMemoryBuffer()
{
  v9[6] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  int v1 = 0;
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v8 = v9;
  int v7 = 0;
  uint64_t v0 = &unk_1F2646F30;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  llvm::WriteBitcodeToFile();
}

uint64_t *sub_1CC1F77A4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v6 = *(_DWORD *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 24);
  unsigned int v8 = *(_DWORD *)(a1 + 28) | (1 << v7);
  *(_DWORD *)(a1 + 28) = v8;
  unsigned int v9 = v7 + v6;
  if (v9 >= 0x20)
  {
    int v41 = *(void **)a1;
    uint64_t v42 = *(void *)(*(void *)a1 + 8);
    if (*(void *)(*(void *)a1 + 16) < (unint64_t)(v42 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)(*v41 + v42) = v8;
    v41[1] += 4;
    __int16 v43 = *(llvm::raw_ostream **)(a1 + 8);
    if (v43)
    {
      size_t v58 = *(void *)(*(void *)a1 + 8);
      if (v58 >= *(void *)(a1 + 16))
      {
        llvm::raw_ostream::write(v43, **(const char ***)a1, v58);
        *(void *)(*(void *)a1 + 8) = 0;
      }
    }
    int v44 = *(_DWORD *)(a1 + 24);
    if (v44) {
      unsigned int v8 = 1u >> -(char)v44;
    }
    else {
      unsigned int v8 = 0;
    }
    *(_DWORD *)(a1 + 28) = v8;
    unsigned int v9 = (v44 + v6) & 0x1F;
  }
  *(_DWORD *)(a1 + 24) = v9;
  unsigned int v10 = a2;
  if (a2 >= 0x80)
  {
    unsigned int v10 = a2;
    do
    {
      unsigned int v54 = v10;
      sub_1CC202230(a1, v10 & 0x7F | 0x80, 8);
      unsigned int v10 = v54 >> 7;
    }
    while (v54 >> 14);
    unsigned int v9 = *(_DWORD *)(a1 + 24);
    unsigned int v8 = *(_DWORD *)(a1 + 28);
  }
  int v11 = (v10 << v9) | v8;
  *(_DWORD *)(a1 + 28) = v11;
  unsigned int v12 = v9 + 8;
  if (v12 >= 0x20)
  {
    uint64_t v45 = *(const char ***)a1;
    uint64_t v46 = *(void *)(*(void *)a1 + 8);
    if (*(void *)(*(void *)a1 + 16) < (unint64_t)(v46 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)&(*v45)[v46] = v11;
    v45[1] += 4;
    uint64_t v47 = *(llvm::raw_ostream **)(a1 + 8);
    if (v47)
    {
      size_t v59 = *(void *)(*(void *)a1 + 8);
      if (v59 >= *(void *)(a1 + 16))
      {
        unsigned int v60 = v10;
        llvm::raw_ostream::write(v47, **(const char ***)a1, v59);
        unsigned int v10 = v60;
        *(void *)(*(void *)a1 + 8) = 0;
      }
    }
    int v48 = *(_DWORD *)(a1 + 24);
    int v49 = v10 >> -(char)v48;
    if (v48) {
      int v11 = v49;
    }
    else {
      int v11 = 0;
    }
    *(_DWORD *)(a1 + 28) = v11;
    unsigned int v12 = (v48 + 8) & 0x1F;
  }
  *(_DWORD *)(a1 + 24) = v12;
  unsigned int v13 = a3;
  if (a3 >= 8)
  {
    unsigned int v13 = a3;
    do
    {
      unsigned int v55 = v13;
      sub_1CC202230(a1, v13 & 7 | 8, 4);
      unsigned int v13 = v55 >> 3;
    }
    while (v55 > 0x3F);
    unsigned int v12 = *(_DWORD *)(a1 + 24);
    int v11 = *(_DWORD *)(a1 + 28);
  }
  int v14 = (v13 << v12) | v11;
  *(_DWORD *)(a1 + 28) = v14;
  unsigned int v15 = v12 + 4;
  uint64_t v16 = *(const char ***)a1;
  if (v15 >= 0x20)
  {
    int v50 = v16[1];
    if (v16[2] < v50 + 4) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)&v50[(void)*v16] = v14;
    v16[1] += 4;
    uint64_t v16 = *(const char ***)a1;
    int v51 = *(llvm::raw_ostream **)(a1 + 8);
    if (v51)
    {
      unsigned int v61 = v13;
      size_t v62 = (size_t)v16[1];
      if (v62 >= *(void *)(a1 + 16))
      {
        llvm::raw_ostream::write(v51, *v16, v62);
        uint64_t v16 = *(const char ***)a1;
        *(void *)(*(void *)a1 + 8) = 0;
      }
      unsigned int v13 = v61;
    }
    int v52 = *(_DWORD *)(a1 + 24);
    int v53 = v13 >> -(char)v52;
    if (v52) {
      int v14 = v53;
    }
    else {
      int v14 = 0;
    }
    *(_DWORD *)(a1 + 28) = v14;
    unsigned int v15 = (v52 + 4) & 0x1F;
  }
  *(_DWORD *)(a1 + 24) = v15;
  if (v15)
  {
    unint64_t v17 = v16[1];
    if (v16[2] < v17 + 4) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)&v17[(void)*v16] = v14;
    v16[1] += 4;
    uint64_t v16 = *(const char ***)a1;
    unint64_t v18 = *(llvm::raw_ostream **)(a1 + 8);
    if (v18)
    {
      size_t v57 = (size_t)v16[1];
      if (v57 >= *(void *)(a1 + 16))
      {
        llvm::raw_ostream::write(v18, *v16, v57);
        uint64_t v16 = *(const char ***)a1;
        *(void *)(*(void *)a1 + 8) = 0;
      }
    }
    *(void *)(a1 + 24) = 0;
  }
  unsigned int v19 = v16[1];
  uint64_t v20 = *(void **)(a1 + 8);
  if (v20)
  {
    uint64_t v22 = (*(uint64_t (**)(void))(*v20 + 80))(*(void *)(a1 + 8)) + v20[4] - v20[2];
    unsigned int v21 = *(_DWORD *)(a1 + 24);
  }
  else
  {
    unsigned int v21 = 0;
    uint64_t v22 = 0;
  }
  uint64_t v23 = (unint64_t)&v19[v22] >> 2;
  uint64_t v64 = v23;
  int v24 = *(_DWORD *)(a1 + 32);
  int v63 = v24;
  if (v21 > 0xFFFFFFDF)
  {
    int v29 = v21 + 32;
  }
  else
  {
    uint64_t v25 = *(const char ***)a1;
    uint64_t v26 = *(void *)(*(void *)a1 + 8);
    if (*(void *)(*(void *)a1 + 16) < (unint64_t)(v26 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)&(*v25)[v26] = *(_DWORD *)(a1 + 28);
    v25[1] += 4;
    unint64_t v27 = *(llvm::raw_ostream **)(a1 + 8);
    if (v27)
    {
      size_t v56 = *(void *)(*(void *)a1 + 8);
      if (v56 >= *(void *)(a1 + 16))
      {
        llvm::raw_ostream::write(v27, **(const char ***)a1, v56);
        *(void *)(*(void *)a1 + 8) = 0;
      }
    }
    char v28 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 28) = 0;
    int v29 = v28 & 0x1F;
  }
  *(_DWORD *)(a1 + 24) = v29;
  *(_DWORD *)(a1 + 32) = a3;
  unint64_t v30 = *(void *)(a1 + 72);
  if (v30 >= *(void *)(a1 + 80))
  {
    uint64_t v31 = sub_1CC2023EC((uint64_t *)(a1 + 64), &v63, &v64);
  }
  else
  {
    *(_DWORD *)unint64_t v30 = v24;
    uint64_t v31 = v30 + 40;
    *(void *)(v30 + 8) = v23;
    *(void *)(v30 + 16) = 0;
    *(void *)(v30 + 24) = 0;
    *(void *)(v30 + 32) = 0;
  }
  BOOL result = (uint64_t *)(a1 + 40);
  uint64_t v33 = *(void *)(a1 + 40);
  *(void *)(a1 + 72) = v31;
  uint64_t v34 = *(void *)(v31 - 24);
  *(void *)(v31 - 24) = v33;
  *(void *)(a1 + 40) = v34;
  uint64_t v35 = *(void *)(v31 - 16);
  *(void *)(v31 - 16) = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v35;
  uint64_t v36 = *(void *)(v31 - 8);
  *(void *)(v31 - 8) = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v36;
  uint64_t v37 = *(void *)(a1 + 88);
  uint64_t v38 = *(void *)(a1 + 96);
  if (v37 == v38 || (uint64_t i = v38 - 32, *(_DWORD *)(v38 - 32) != a2))
  {
    if (((v38 - v37) & 0x1FFFFFFFE0) == 0) {
      return result;
    }
    uint64_t v40 = ((unint64_t)(v38 - v37) >> 5);
    for (uint64_t i = *(void *)(a1 + 88); *(_DWORD *)i != a2; i += 32)
    {
      if (!--v40) {
        return result;
      }
    }
  }
  return sub_1CC2025C4(result, *(void *)(a1 + 48), *(uint64_t **)(i + 8), *(uint64_t **)(i + 16), (uint64_t)(*(void *)(i + 16) - *(void *)(i + 8)) >> 4);
}

uint64_t sub_1CC1F7CDC(uint64_t a1, uint64_t a2)
{
  sub_1CC2029A0((llvm::raw_ostream *)a1, *(uint64_t **)a2);
  uint64_t v4 = *(_OWORD **)(a1 + 48);
  if ((unint64_t)v4 < *(void *)(a1 + 56))
  {
    _OWORD *v4 = *(_OWORD *)a2;
    char v5 = (char *)(v4 + 1);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    char v5 = sub_1CC203220((char **)(a1 + 40), a2);
  }
  *(void *)(a1 + 48) = v5;
  return ((unint64_t)&v5[-*(void *)(a1 + 40)] >> 4) + 3;
}

void sub_1CC1F7D44(off_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  int v3 = *(_DWORD *)(a1 + 32);
  unsigned int v4 = *(_DWORD *)(a1 + 24) + v3;
  if (v4 >= 0x20)
  {
    sub_1CC202350((const char ***)a1, *(_DWORD *)(a1 + 28));
    char v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 28) = 0;
    unsigned int v4 = (v8 + (_BYTE)v3) & 0x1F;
  }
  *(_DWORD *)(a1 + 24) = v4;
  if (v4)
  {
    sub_1CC202350((const char ***)a1, *(_DWORD *)(a1 + 28));
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 8);
  if (v5)
  {
    uint64_t v13 = v2;
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 80))(v5);
    uint64_t v11 = *(void *)(v9 + 32);
    uint64_t v12 = *(void *)(v9 + 16);
    uint64_t v2 = v13;
    uint64_t v5 = v10 + v11 - v12;
  }
  sub_1CC203350(a1, 32 * *(void *)(v2 - 32), ((unint64_t)(v5 + v6) >> 2) + ~*(_DWORD *)(v2 - 32));
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v2 - 40);
  if (a1 + 40 != v2 - 24) {
    sub_1CC1CAFD4((uint64_t *)(a1 + 40), *(uint64_t **)(v2 - 24), *(uint64_t **)(v2 - 16), (uint64_t)(*(void *)(v2 - 16) - *(void *)(v2 - 24)) >> 4);
  }
  int v7 = (uint64_t *)(*(void *)(a1 + 72) - 40);

  sub_1CC2035C8(a1 + 64, v7);
}

void llvm::BitcodeWriter::writeStrtab(llvm::BitcodeWriter *this)
{
  uint64_t v2 = (unsigned int *)((char *)this + 16);
  std::string __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  llvm::StringTableBuilder::finalizeInOrder((llvm::BitcodeWriter *)((char *)this + 16));
  int v3 = (unsigned __int8 *)*((void *)this + 5);
  if (v3)
  {
    sub_1CC217084((unint64_t *)&__p, (size_t)v3);
    int v3 = (unsigned __int8 *)__p;
  }
  llvm::StringTableBuilder::write(v2, v3);
  llvm::BitcodeWriter::writeBlob((uint64_t)this, 0x17u, 1u, (const char *)__p, v5 - (unsigned char *)__p);
  *((unsigned char *)this + 160) = 1;
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
}

void llvm::BitcodeWriter::copyStrtab(uint64_t a1, const char *a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 160) = 1;
}

uint64_t sub_1CC1F7F40(uint64_t *a1)
{
  v884[64] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  sub_1CC1F77A4(*a1, 0xDu, 5u);
  int v3 = (char *)operator new(0x228uLL);
  *(void *)int v3 = &unk_1F2608A00;
  *((void *)v3 + 1) = 0;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_OWORD *)(v3 + 280) = 0u;
  *(_OWORD *)(v3 + 296) = 0u;
  *(_OWORD *)(v3 + 312) = 0u;
  *(_OWORD *)(v3 + 328) = 0u;
  *(_OWORD *)(v3 + 344) = 0u;
  *(_OWORD *)(v3 + 360) = 0u;
  *(_OWORD *)(v3 + 376) = 0u;
  *(_OWORD *)(v3 + 392) = 0u;
  *(_OWORD *)(v3 + 408) = 0u;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_OWORD *)(v3 + 456) = 0u;
  *(_OWORD *)(v3 + 472) = 0u;
  *(_OWORD *)(v3 + 488) = 0u;
  *(_OWORD *)(v3 + 504) = 0u;
  *(_OWORD *)(v3 + 520) = 0u;
  *(_OWORD *)(v3 + 536) = 0u;
  *(_OWORD *)(v3 + 40) = xmmword_1CFAC6560;
  *((void *)v3 + 2) = 0;
  *((void *)v3 + 3) = v3 + 40;
  *(_OWORD *)(v3 + 56) = xmmword_1CFAC6570;
  *(_OWORD *)(v3 + 72) = xmmword_1CD96EEC0;
  *((void *)v3 + 4) = 0x2000000003;
  uint64_t v877 = v3 + 24;
  uint64_t v878 = (uint64_t)v3;
  unsigned int v4 = sub_1CC1F7CDC(v2, (uint64_t)&v877);
  uint64_t v5 = (std::__shared_weak_count *)v878;
  if (v878 && !atomic_fetch_add((atomic_ullong *volatile)(v878 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  HIBYTE(v884[0]) = 0;
  LOBYTE(__p[0]) = 0;
  sub_1CC205868((llvm::raw_ostream *)v2, 1u, __p, 0, v4);
  if (SHIBYTE(v884[0]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = (char *)operator new(0x228uLL);
  *(void *)uint64_t v6 = &unk_1F2608A00;
  *((void *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_OWORD *)(v6 + 40) = xmmword_1CFAC6580;
  *((void *)v6 + 2) = 0;
  *((void *)v6 + 3) = v6 + 40;
  *(_OWORD *)(v6 + 56) = xmmword_1CFAC4810;
  *((void *)v6 + 4) = 0x2000000002;
  __p[0] = v6 + 24;
  __p[1] = v6;
  unsigned int v7 = sub_1CC1F7CDC(v2, (uint64_t)__p);
  char v8 = (std::__shared_weak_count *)__p[1];
  if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  LODWORD(v880) = 0;
  uint64_t v843 = (uint64_t)a1;
  if (v7)
  {
    sub_1CC205E50((llvm::raw_ostream *)v2, v7, (uint64_t)&v880, 1, 0, 0, 0x100000002);
  }
  else
  {
    int v758 = *(_DWORD *)(v2 + 32);
    int v759 = *(_DWORD *)(v2 + 24);
    unsigned int v760 = *(_DWORD *)(v2 + 28) | (3 << v759);
    *(_DWORD *)(v2 + 28) = v760;
    unsigned int v761 = v759 + v758;
    if ((v759 + v758) >= 0x20)
    {
      uint64_t v787 = *(void **)v2;
      uint64_t v788 = *(void *)(*(void *)v2 + 8);
      if (*(void *)(*(void *)v2 + 16) < (unint64_t)(v788 + 4)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(_DWORD *)(*v787 + v788) = v760;
      v787[1] += 4;
      int v789 = *(llvm::raw_ostream **)(v2 + 8);
      if (v789)
      {
        size_t v817 = *(void *)(*(void *)v2 + 8);
        if (v817 >= *(void *)(v2 + 16))
        {
          llvm::raw_ostream::write(v789, **(const char ***)v2, v817);
          *(void *)(*(void *)v2 + 8) = 0;
        }
      }
      int v790 = *(_DWORD *)(v2 + 24);
      if (v790) {
        unsigned int v760 = 3u >> -(char)v790;
      }
      else {
        unsigned int v760 = 0;
      }
      unsigned int v761 = ((_BYTE)v790 + (_BYTE)v758) & 0x1F;
    }
    unsigned int v762 = v760 | (2 << v761);
    *(_DWORD *)(v2 + 24) = v761;
    *(_DWORD *)(v2 + 28) = v762;
    if (v761 >= 0x1A)
    {
      int v791 = *(const char ***)v2;
      uint64_t v792 = *(void *)(*(void *)v2 + 8);
      if (*(void *)(*(void *)v2 + 16) < (unint64_t)(v792 + 4)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(_DWORD *)&(*v791)[v792] = v762;
      v791[1] += 4;
      uint64_t v793 = *(llvm::raw_ostream **)(v2 + 8);
      if (v793)
      {
        size_t v818 = *(void *)(*(void *)v2 + 8);
        if (v818 >= *(void *)(v2 + 16))
        {
          llvm::raw_ostream::write(v793, **(const char ***)v2, v818);
          *(void *)(*(void *)v2 + 8) = 0;
        }
      }
      int v794 = *(_DWORD *)(v2 + 24);
      if (v794) {
        unsigned int v762 = 2u >> -(char)v794;
      }
      else {
        unsigned int v762 = 0;
      }
      unsigned int v763 = ((_BYTE)v794 + 6) & 0x1F;
    }
    else
    {
      unsigned int v763 = v761 + 6;
    }
    int v764 = v762 | (1 << v763);
    *(_DWORD *)(v2 + 24) = v763;
    *(_DWORD *)(v2 + 28) = v764;
    if (v763 >= 0x1A)
    {
      int v795 = *(const char ***)v2;
      uint64_t v796 = *(void *)(*(void *)v2 + 8);
      if (*(void *)(*(void *)v2 + 16) < (unint64_t)(v796 + 4)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(_DWORD *)&(*v795)[v796] = v764;
      v795[1] += 4;
      unsigned int v797 = *(llvm::raw_ostream **)(v2 + 8);
      if (v797)
      {
        size_t v819 = *(void *)(*(void *)v2 + 8);
        if (v819 >= *(void *)(v2 + 16))
        {
          llvm::raw_ostream::write(v797, **(const char ***)v2, v819);
          *(void *)(*(void *)v2 + 8) = 0;
        }
      }
      int v798 = *(_DWORD *)(v2 + 24);
      unsigned int v799 = 1u >> -(char)v798;
      if (!v798) {
        unsigned int v799 = 0;
      }
      *(_DWORD *)(v2 + 28) = v799;
      int v765 = ((_BYTE)v798 + 6) & 0x1F;
    }
    else
    {
      int v765 = v763 + 6;
    }
    *(_DWORD *)(v2 + 24) = v765;
    sub_1CC202E58(v2, v880, 6);
  }
  sub_1CC1F7D44(v2);
  sub_1CC1F77A4(*a1, 8u, 3u);
  uint64_t v824 = *(void *)(a1[68] + 8);
  uint64_t v9 = (llvm::raw_ostream *)*a1;
  uint64_t v877 = (void *)2;
  __p[0] = &v877;
  __p[1] = (void *)1;
  sub_1CC206B4C(v9, 1u, __p);
  uint64_t v10 = *a1;
  sub_1CC1F77A4(*a1, 0, 2u);
  uint64_t v11 = *(uint64_t **)(v10 + 88);
  v10 += 88;
  *(_DWORD *)(v10 - 52) = -1;
  sub_1CC207620(v10, v11);
  uint64_t v12 = (std::__shared_weak_count *)operator new(0x228uLL);
  v12->__shared_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  *(_OWORD *)&v12[4].__shared_owners_ = 0u;
  v12[5].std::__shared_count = 0u;
  *(_OWORD *)&v12[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[6].__shared_owners_ = 0u;
  v12[7].std::__shared_count = 0u;
  *(_OWORD *)&v12[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[8].__shared_owners_ = 0u;
  v12[9].std::__shared_count = 0u;
  *(_OWORD *)&v12[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[10].__shared_owners_ = 0u;
  v12[11].std::__shared_count = 0u;
  *(_OWORD *)&v12[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[12].__shared_owners_ = 0u;
  v12[13].std::__shared_count = 0u;
  *(_OWORD *)&v12[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[14].__shared_owners_ = 0u;
  v12[15].std::__shared_count = 0u;
  *(_OWORD *)&v12[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[16].__shared_owners_ = 0u;
  v12[17].std::__shared_count = 0u;
  *(_OWORD *)&v12[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[18].__shared_owners_ = 0u;
  v12[19].std::__shared_count = 0u;
  *(_OWORD *)&v12[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[20].__shared_owners_ = 0u;
  v12[21].std::__shared_count = 0u;
  *(_OWORD *)&v12[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[22].__shared_owners_ = 0u;
  *(_OWORD *)&v12[1].__shared_weak_owners_ = xmmword_1CFAC6590;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)&v12[1].__shared_weak_owners_;
  *(_OWORD *)&v12[2].__shared_owners_ = xmmword_1CFAC4740;
  v12[3].std::__shared_count = (std::__shared_count)xmmword_1CFAC6570;
  uint64_t v13 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)&v12[3].__shared_weak_owners_ = xmmword_1CFAC4730;
  v12[1].__shared_owners_ = 0x2000000004;
  __p[0] = &v12[1];
  __p[1] = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_1CC207590(v13, 14, (uint64_t)__p);
  int v14 = (std::__shared_weak_count *)__p[1];
  if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  unsigned int v15 = (char *)operator new(0x228uLL);
  *((void *)v15 + 1) = 0;
  *(void *)unsigned int v15 = &unk_1F2608A00;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  *(_OWORD *)(v15 + 168) = 0u;
  *(_OWORD *)(v15 + 184) = 0u;
  *(_OWORD *)(v15 + 200) = 0u;
  *(_OWORD *)(v15 + 216) = 0u;
  *(_OWORD *)(v15 + 232) = 0u;
  *(_OWORD *)(v15 + 248) = 0u;
  *(_OWORD *)(v15 + 264) = 0u;
  *(_OWORD *)(v15 + 280) = 0u;
  *(_OWORD *)(v15 + 296) = 0u;
  *(_OWORD *)(v15 + 312) = 0u;
  *(_OWORD *)(v15 + 328) = 0u;
  *(_OWORD *)(v15 + 344) = 0u;
  *(_OWORD *)(v15 + 360) = 0u;
  *(_OWORD *)(v15 + 376) = 0u;
  *(_OWORD *)(v15 + 392) = 0u;
  *(_OWORD *)(v15 + 408) = 0u;
  *(_OWORD *)(v15 + 424) = 0u;
  *(_OWORD *)(v15 + 440) = 0u;
  *(_OWORD *)(v15 + 456) = 0u;
  *(_OWORD *)(v15 + 472) = 0u;
  *(_OWORD *)(v15 + 488) = 0u;
  *(_OWORD *)(v15 + 504) = 0u;
  *(_OWORD *)(v15 + 520) = 0u;
  *(_OWORD *)(v15 + 536) = 0u;
  *(_OWORD *)(v15 + 40) = xmmword_1CFAC6560;
  *((void *)v15 + 2) = 0;
  *((void *)v15 + 3) = v15 + 40;
  *(_OWORD *)(v15 + 56) = xmmword_1CFAC4740;
  *(_OWORD *)(v15 + 72) = xmmword_1CFAC6570;
  uint64_t v16 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)(v15 + 88) = xmmword_1CFAC4750;
  *((void *)v15 + 4) = 0x2000000004;
  uint64_t v877 = v15 + 24;
  uint64_t v878 = (uint64_t)v15;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
  sub_1CC207590(v16, 14, (uint64_t)&v877);
  unint64_t v17 = (std::__shared_weak_count *)v878;
  if (v878 && !atomic_fetch_add((atomic_ullong *volatile)(v878 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (!atomic_fetch_add((atomic_ullong *volatile)v15 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(char *))(*(void *)v15 + 16))(v15);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v15);
  }
  unint64_t v18 = (char *)operator new(0x228uLL);
  *((void *)v18 + 1) = 0;
  *(void *)unint64_t v18 = &unk_1F2608A00;
  *(_OWORD *)(v18 + 104) = 0u;
  *(_OWORD *)(v18 + 120) = 0u;
  *(_OWORD *)(v18 + 136) = 0u;
  *(_OWORD *)(v18 + 152) = 0u;
  *(_OWORD *)(v18 + 168) = 0u;
  *(_OWORD *)(v18 + 184) = 0u;
  *(_OWORD *)(v18 + 200) = 0u;
  *(_OWORD *)(v18 + 216) = 0u;
  *(_OWORD *)(v18 + 232) = 0u;
  *(_OWORD *)(v18 + 248) = 0u;
  *(_OWORD *)(v18 + 264) = 0u;
  *(_OWORD *)(v18 + 280) = 0u;
  *(_OWORD *)(v18 + 296) = 0u;
  *(_OWORD *)(v18 + 312) = 0u;
  *(_OWORD *)(v18 + 328) = 0u;
  *(_OWORD *)(v18 + 344) = 0u;
  *(_OWORD *)(v18 + 360) = 0u;
  *(_OWORD *)(v18 + 376) = 0u;
  *(_OWORD *)(v18 + 392) = 0u;
  *(_OWORD *)(v18 + 408) = 0u;
  *(_OWORD *)(v18 + 424) = 0u;
  *(_OWORD *)(v18 + 440) = 0u;
  *(_OWORD *)(v18 + 456) = 0u;
  *(_OWORD *)(v18 + 472) = 0u;
  *(_OWORD *)(v18 + 488) = 0u;
  *(_OWORD *)(v18 + 504) = 0u;
  *(_OWORD *)(v18 + 40) = xmmword_1CFAC6560;
  *(_OWORD *)(v18 + 520) = 0u;
  *(_OWORD *)(v18 + 536) = 0u;
  *((void *)v18 + 2) = 0;
  *((void *)v18 + 3) = v18 + 40;
  *(_OWORD *)(v18 + 56) = xmmword_1CFAC4740;
  *(_OWORD *)(v18 + 72) = xmmword_1CFAC6570;
  unsigned int v19 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)(v18 + 88) = xmmword_1CD96EEC0;
  *((void *)v18 + 4) = 0x2000000004;
  int v880 = v18 + 24;
  uint64_t v881 = (uint64_t)v18;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v18 + 1, 1uLL, memory_order_relaxed);
  sub_1CC207590(v19, 14, (uint64_t)&v880);
  uint64_t v20 = (std::__shared_weak_count *)v881;
  if (v881 && !atomic_fetch_add((atomic_ullong *volatile)(v881 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (!atomic_fetch_add((atomic_ullong *volatile)v18 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(char *))(*(void *)v18 + 16))(v18);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v18);
  }
  unsigned int v21 = (std::__shared_weak_count *)operator new(0x228uLL);
  v21->__shared_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  *(_OWORD *)&v21[4].__shared_owners_ = 0u;
  v21[5].std::__shared_count = 0u;
  *(_OWORD *)&v21[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v21[6].__shared_owners_ = 0u;
  v21[7].std::__shared_count = 0u;
  *(_OWORD *)&v21[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v21[8].__shared_owners_ = 0u;
  v21[9].std::__shared_count = 0u;
  *(_OWORD *)&v21[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v21[10].__shared_owners_ = 0u;
  v21[11].std::__shared_count = 0u;
  *(_OWORD *)&v21[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v21[12].__shared_owners_ = 0u;
  v21[13].std::__shared_count = 0u;
  *(_OWORD *)&v21[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v21[14].__shared_owners_ = 0u;
  v21[15].std::__shared_count = 0u;
  *(_OWORD *)&v21[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v21[16].__shared_owners_ = 0u;
  v21[17].std::__shared_count = 0u;
  *(_OWORD *)&v21[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v21[18].__shared_owners_ = 0u;
  v21[19].std::__shared_count = 0u;
  *(_OWORD *)&v21[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v21[20].__shared_owners_ = 0u;
  v21[21].std::__shared_count = 0u;
  *(_OWORD *)&v21[1].__shared_weak_owners_ = xmmword_1CFAC6580;
  *(_OWORD *)&v21[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v21[22].__shared_owners_ = 0u;
  v21->__shared_weak_owners_ = 0;
  v21[1].__vftable = (std::__shared_weak_count_vtbl *)&v21[1].__shared_weak_owners_;
  *(_OWORD *)&v21[2].__shared_owners_ = xmmword_1CFAC4740;
  v21[3].std::__shared_count = (std::__shared_count)xmmword_1CFAC6570;
  uint64_t v22 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)&v21[3].__shared_weak_owners_ = xmmword_1CD96EEC0;
  v21[1].__shared_owners_ = 0x2000000004;
  __dst = (atomic_ullong *)&v21[1];
  int v867 = (atomic_ullong *)v21;
  atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_1CC207590(v22, 14, (uint64_t)&__dst);
  uint64_t v23 = (std::__shared_weak_count *)v867;
  if (v867 && !atomic_fetch_add(v867 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  int v24 = (std::__shared_weak_count *)operator new(0x228uLL);
  v24->__shared_owners_ = 0;
  v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  v24[3].std::__shared_count = 0u;
  *(_OWORD *)&v24[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v24[4].__shared_owners_ = 0u;
  v24[5].std::__shared_count = 0u;
  *(_OWORD *)&v24[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v24[6].__shared_owners_ = 0u;
  v24[7].std::__shared_count = 0u;
  *(_OWORD *)&v24[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v24[8].__shared_owners_ = 0u;
  v24[9].std::__shared_count = 0u;
  *(_OWORD *)&v24[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v24[10].__shared_owners_ = 0u;
  v24[11].std::__shared_count = 0u;
  *(_OWORD *)&v24[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v24[12].__shared_owners_ = 0u;
  v24[13].std::__shared_count = 0u;
  *(_OWORD *)&v24[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v24[14].__shared_owners_ = 0u;
  v24[15].std::__shared_count = 0u;
  *(_OWORD *)&v24[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v24[16].__shared_owners_ = 0u;
  v24[17].std::__shared_count = 0u;
  *(_OWORD *)&v24[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v24[18].__shared_owners_ = 0u;
  v24[19].std::__shared_count = 0u;
  *(_OWORD *)&v24[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v24[20].__shared_owners_ = 0u;
  v24[21].std::__shared_count = 0u;
  *(_OWORD *)&v24[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v24[22].__shared_owners_ = 0u;
  *(_OWORD *)&v24[1].__shared_weak_owners_ = xmmword_1CFAC6560;
  v24->__shared_weak_owners_ = 0;
  v24[1].__vftable = (std::__shared_weak_count_vtbl *)&v24[1].__shared_weak_owners_;
  v24[2].__shared_owners_ = 32 - __clz((unint64_t)(a1[10] - a1[9]) >> 3);
  v24[2].__shared_weak_owners_ = 2;
  v24[1].__shared_owners_ = 0x2000000002;
  uint64_t v25 = (llvm::raw_ostream *)*a1;
  *(void *)&long long v875 = v24 + 1;
  *((void *)&v875 + 1) = v24;
  atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_1CC207590(v25, 11, (uint64_t)&v875);
  uint64_t v26 = (std::__shared_weak_count *)*((void *)&v875 + 1);
  if (*((void *)&v875 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v875 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  unint64_t v27 = (std::__shared_weak_count *)operator new(0x228uLL);
  v27->__shared_owners_ = 0;
  v27->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  v27[3].std::__shared_count = 0u;
  *(_OWORD *)&v27[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v27[4].__shared_owners_ = 0u;
  v27[5].std::__shared_count = 0u;
  *(_OWORD *)&v27[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v27[6].__shared_owners_ = 0u;
  v27[7].std::__shared_count = 0u;
  *(_OWORD *)&v27[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v27[8].__shared_owners_ = 0u;
  v27[9].std::__shared_count = 0u;
  *(_OWORD *)&v27[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v27[10].__shared_owners_ = 0u;
  v27[11].std::__shared_count = 0u;
  *(_OWORD *)&v27[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v27[12].__shared_owners_ = 0u;
  v27[13].std::__shared_count = 0u;
  *(_OWORD *)&v27[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v27[14].__shared_owners_ = 0u;
  v27[15].std::__shared_count = 0u;
  *(_OWORD *)&v27[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v27[16].__shared_owners_ = 0u;
  v27[17].std::__shared_count = 0u;
  *(_OWORD *)&v27[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v27[18].__shared_owners_ = 0u;
  v27[19].std::__shared_count = 0u;
  *(_OWORD *)&v27[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v27[20].__shared_owners_ = 0u;
  v27[21].std::__shared_count = 0u;
  *(_OWORD *)&v27[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v27[22].__shared_owners_ = 0u;
  *(_OWORD *)&v27[1].__shared_weak_owners_ = xmmword_1CFAC65A0;
  v27->__shared_weak_owners_ = 0;
  v27[1].__vftable = (std::__shared_weak_count_vtbl *)&v27[1].__shared_weak_owners_;
  *(_OWORD *)&v27[2].__shared_owners_ = xmmword_1CFAC4740;
  v27[1].__shared_owners_ = 0x2000000002;
  char v28 = (llvm::raw_ostream *)*a1;
  uint64_t v873 = v27 + 1;
  uint64_t v874 = v27;
  atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_1CC207590(v28, 11, (uint64_t)&v873);
  int v29 = v874;
  if (v874 && !atomic_fetch_add(&v874->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  unint64_t v30 = (std::__shared_weak_count *)operator new(0x228uLL);
  v30->__shared_owners_ = 0;
  v30->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  *(_OWORD *)&v30[4].__shared_owners_ = 0u;
  v30[5].std::__shared_count = 0u;
  *(_OWORD *)&v30[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v30[6].__shared_owners_ = 0u;
  v30[7].std::__shared_count = 0u;
  *(_OWORD *)&v30[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v30[8].__shared_owners_ = 0u;
  v30[9].std::__shared_count = 0u;
  *(_OWORD *)&v30[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v30[10].__shared_owners_ = 0u;
  v30[11].std::__shared_count = 0u;
  *(_OWORD *)&v30[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v30[12].__shared_owners_ = 0u;
  v30[13].std::__shared_count = 0u;
  *(_OWORD *)&v30[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v30[14].__shared_owners_ = 0u;
  v30[15].std::__shared_count = 0u;
  *(_OWORD *)&v30[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v30[16].__shared_owners_ = 0u;
  v30[17].std::__shared_count = 0u;
  *(_OWORD *)&v30[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v30[18].__shared_owners_ = 0u;
  v30[19].std::__shared_count = 0u;
  *(_OWORD *)&v30[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v30[20].__shared_owners_ = 0u;
  v30[21].std::__shared_count = 0u;
  *(_OWORD *)&v30[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v30[22].__shared_owners_ = 0u;
  *(_OWORD *)&v30[1].__shared_weak_owners_ = xmmword_1CFAC65B0;
  v30->__shared_weak_owners_ = 0;
  v30[1].__vftable = (std::__shared_weak_count_vtbl *)&v30[1].__shared_weak_owners_;
  *(_OWORD *)&v30[2].__shared_owners_ = xmmword_1CFAC65C0;
  v30[3].__vftable = (std::__shared_weak_count_vtbl *)(32 - __clz((unint64_t)(a1[10] - a1[9]) >> 3));
  uint64_t v31 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)&v30[3].__shared_owners_ = xmmword_1CFAC65D0;
  v30[4].__vftable = (std::__shared_weak_count_vtbl *)4;
  v30[1].__shared_owners_ = 0x2000000004;
  uint64_t v871 = v30 + 1;
  uint64_t v872 = v30;
  atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_1CC207590(v31, 11, (uint64_t)&v871);
  unsigned int v32 = v872;
  if (v872 && !atomic_fetch_add(&v872->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  uint64_t v33 = (std::__shared_weak_count *)operator new(0x228uLL);
  v33->__shared_owners_ = 0;
  v33->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  *(_OWORD *)&v33[2].__shared_owners_ = 0u;
  v33[3].std::__shared_count = 0u;
  *(_OWORD *)&v33[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v33[4].__shared_owners_ = 0u;
  v33[5].std::__shared_count = 0u;
  *(_OWORD *)&v33[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v33[6].__shared_owners_ = 0u;
  v33[7].std::__shared_count = 0u;
  *(_OWORD *)&v33[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v33[8].__shared_owners_ = 0u;
  v33[9].std::__shared_count = 0u;
  *(_OWORD *)&v33[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v33[10].__shared_owners_ = 0u;
  v33[11].std::__shared_count = 0u;
  *(_OWORD *)&v33[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v33[12].__shared_owners_ = 0u;
  v33[13].std::__shared_count = 0u;
  *(_OWORD *)&v33[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v33[14].__shared_owners_ = 0u;
  v33[15].std::__shared_count = 0u;
  *(_OWORD *)&v33[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v33[16].__shared_owners_ = 0u;
  v33[17].std::__shared_count = 0u;
  *(_OWORD *)&v33[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v33[18].__shared_owners_ = 0u;
  v33[19].std::__shared_count = 0u;
  *(_OWORD *)&v33[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v33[20].__shared_owners_ = 0u;
  v33[21].std::__shared_count = 0u;
  *(_OWORD *)&v33[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v33[22].__shared_owners_ = 0u;
  *(_OWORD *)&v33[1].__shared_weak_owners_ = xmmword_1CFAC6580;
  v33->__shared_weak_owners_ = 0;
  v33[1].__vftable = (std::__shared_weak_count_vtbl *)&v33[1].__shared_weak_owners_;
  v33[1].__shared_owners_ = 0x2000000001;
  uint64_t v34 = (llvm::raw_ostream *)*a1;
  v864 = v33 + 1;
  uint64_t v865 = v33;
  atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_1CC207590(v34, 11, (uint64_t)&v864);
  uint64_t v35 = v865;
  if (v865 && !atomic_fetch_add(&v865->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  uint64_t v36 = (std::__shared_weak_count *)operator new(0x228uLL);
  v36->__shared_owners_ = 0;
  v36->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  v36[5].std::__shared_count = 0u;
  *(_OWORD *)&v36[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v36[6].__shared_owners_ = 0u;
  v36[7].std::__shared_count = 0u;
  *(_OWORD *)&v36[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v36[8].__shared_owners_ = 0u;
  v36[9].std::__shared_count = 0u;
  *(_OWORD *)&v36[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v36[10].__shared_owners_ = 0u;
  v36[11].std::__shared_count = 0u;
  *(_OWORD *)&v36[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v36[12].__shared_owners_ = 0u;
  v36[13].std::__shared_count = 0u;
  *(_OWORD *)&v36[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v36[14].__shared_owners_ = 0u;
  v36[15].std::__shared_count = 0u;
  *(_OWORD *)&v36[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v36[16].__shared_owners_ = 0u;
  v36[17].std::__shared_count = 0u;
  *(_OWORD *)&v36[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v36[18].__shared_owners_ = 0u;
  v36[19].std::__shared_count = 0u;
  *(_OWORD *)&v36[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v36[20].__shared_owners_ = 0u;
  v36[21].std::__shared_count = 0u;
  *(_OWORD *)&v36[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v36[22].__shared_owners_ = 0u;
  *(_OWORD *)&v36[1].__shared_weak_owners_ = xmmword_1CFAC65E0;
  v36->__shared_weak_owners_ = 0;
  v36[1].__vftable = (std::__shared_weak_count_vtbl *)&v36[1].__shared_weak_owners_;
  *(_OWORD *)&v36[2].__shared_owners_ = xmmword_1CFAC4810;
  v36[3].__vftable = (std::__shared_weak_count_vtbl *)(32 - __clz((unint64_t)(a1[10] - a1[9]) >> 3));
  uint64_t v37 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)&v36[3].__shared_owners_ = xmmword_1CFAC65F0;
  v36[4].std::__shared_count = (std::__shared_count)xmmword_1CFAC6600;
  v36[4].__shared_weak_owners_ = 2;
  v36[1].__shared_owners_ = 0x2000000005;
  unsigned int v862 = v36 + 1;
  BOOL v863 = v36;
  atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_1CC207590(v37, 12, (uint64_t)&v862);
  uint64_t v38 = v863;
  if (v863 && !atomic_fetch_add(&v863->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  uint64_t v39 = (std::__shared_weak_count *)operator new(0x228uLL);
  v39->__shared_owners_ = 0;
  v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  *(_OWORD *)&v39[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[4].__shared_owners_ = 0u;
  v39[5].std::__shared_count = 0u;
  *(_OWORD *)&v39[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[6].__shared_owners_ = 0u;
  v39[7].std::__shared_count = 0u;
  *(_OWORD *)&v39[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[8].__shared_owners_ = 0u;
  v39[9].std::__shared_count = 0u;
  *(_OWORD *)&v39[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[10].__shared_owners_ = 0u;
  v39[11].std::__shared_count = 0u;
  *(_OWORD *)&v39[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[12].__shared_owners_ = 0u;
  v39[13].std::__shared_count = 0u;
  *(_OWORD *)&v39[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[14].__shared_owners_ = 0u;
  v39[15].std::__shared_count = 0u;
  *(_OWORD *)&v39[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[16].__shared_owners_ = 0u;
  v39[17].std::__shared_count = 0u;
  *(_OWORD *)&v39[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[18].__shared_owners_ = 0u;
  v39[19].std::__shared_count = 0u;
  *(_OWORD *)&v39[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[20].__shared_owners_ = 0u;
  v39[21].std::__shared_count = 0u;
  *(_OWORD *)&v39[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[22].__shared_owners_ = 0u;
  *(_OWORD *)&v39[1].__shared_weak_owners_ = xmmword_1CFAC6610;
  v39->__shared_weak_owners_ = 0;
  v39[1].__vftable = (std::__shared_weak_count_vtbl *)&v39[1].__shared_weak_owners_;
  *(_OWORD *)&v39[2].__shared_owners_ = xmmword_1CFAC4810;
  v39[3].std::__shared_count = (std::__shared_count)xmmword_1CFAC65C0;
  v39[1].__shared_owners_ = 0x2000000003;
  uint64_t v40 = (llvm::raw_ostream *)*a1;
  uint64_t v860 = v39 + 1;
  uint64_t v861 = v39;
  atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_1CC207590(v40, 12, (uint64_t)&v860);
  int v41 = v861;
  if (v861 && !atomic_fetch_add(&v861->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  uint64_t v42 = (std::__shared_weak_count *)operator new(0x228uLL);
  v42->__shared_owners_ = 0;
  v42->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  *(_OWORD *)&v42[4].__shared_owners_ = 0u;
  v42[5].std::__shared_count = 0u;
  *(_OWORD *)&v42[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v42[6].__shared_owners_ = 0u;
  v42[7].std::__shared_count = 0u;
  *(_OWORD *)&v42[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v42[8].__shared_owners_ = 0u;
  v42[9].std::__shared_count = 0u;
  *(_OWORD *)&v42[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v42[10].__shared_owners_ = 0u;
  v42[11].std::__shared_count = 0u;
  *(_OWORD *)&v42[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v42[12].__shared_owners_ = 0u;
  v42[13].std::__shared_count = 0u;
  *(_OWORD *)&v42[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v42[14].__shared_owners_ = 0u;
  v42[15].std::__shared_count = 0u;
  *(_OWORD *)&v42[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v42[16].__shared_owners_ = 0u;
  v42[17].std::__shared_count = 0u;
  *(_OWORD *)&v42[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v42[18].__shared_owners_ = 0u;
  v42[19].std::__shared_count = 0u;
  *(_OWORD *)&v42[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v42[20].__shared_owners_ = 0u;
  v42[21].std::__shared_count = 0u;
  *(_OWORD *)&v42[1].__shared_weak_owners_ = xmmword_1CFAC6610;
  *(_OWORD *)&v42[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v42[22].__shared_owners_ = 0u;
  v42->__shared_weak_owners_ = 0;
  v42[1].__vftable = (std::__shared_weak_count_vtbl *)&v42[1].__shared_weak_owners_;
  *(_OWORD *)&v42[2].__shared_owners_ = xmmword_1CFAC4810;
  v42[3].std::__shared_count = (std::__shared_count)xmmword_1CFAC65C0;
  __int16 v43 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)&v42[3].__shared_weak_owners_ = xmmword_1CFAC4730;
  v42[1].__shared_owners_ = 0x2000000004;
  uint64_t v858 = v42 + 1;
  v859 = v42;
  atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_1CC207590(v43, 12, (uint64_t)&v858);
  int v44 = v859;
  if (v859 && !atomic_fetch_add(&v859->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  uint64_t v45 = (std::__shared_weak_count *)operator new(0x228uLL);
  v45->__shared_owners_ = 0;
  v45->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  *(_OWORD *)&v45[4].__shared_owners_ = 0u;
  v45[5].std::__shared_count = 0u;
  *(_OWORD *)&v45[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v45[6].__shared_owners_ = 0u;
  v45[7].std::__shared_count = 0u;
  *(_OWORD *)&v45[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v45[8].__shared_owners_ = 0u;
  v45[9].std::__shared_count = 0u;
  *(_OWORD *)&v45[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v45[10].__shared_owners_ = 0u;
  v45[11].std::__shared_count = 0u;
  *(_OWORD *)&v45[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v45[12].__shared_owners_ = 0u;
  v45[13].std::__shared_count = 0u;
  *(_OWORD *)&v45[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v45[14].__shared_owners_ = 0u;
  v45[15].std::__shared_count = 0u;
  *(_OWORD *)&v45[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v45[16].__shared_owners_ = 0u;
  v45[17].std::__shared_count = 0u;
  *(_OWORD *)&v45[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v45[18].__shared_owners_ = 0u;
  v45[19].std::__shared_count = 0u;
  *(_OWORD *)&v45[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v45[20].__shared_owners_ = 0u;
  v45[21].std::__shared_count = 0u;
  *(_OWORD *)&v45[1].__shared_weak_owners_ = xmmword_1CFAC6580;
  *(_OWORD *)&v45[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v45[22].__shared_owners_ = 0u;
  v45->__shared_weak_owners_ = 0;
  v45[1].__vftable = (std::__shared_weak_count_vtbl *)&v45[1].__shared_weak_owners_;
  *(_OWORD *)&v45[2].__shared_owners_ = xmmword_1CFAC4810;
  v45[3].std::__shared_count = (std::__shared_count)xmmword_1CFAC4810;
  uint64_t v46 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)&v45[3].__shared_weak_owners_ = xmmword_1CFAC65C0;
  v45[1].__shared_owners_ = 0x2000000004;
  uint64_t v856 = v45 + 1;
  uint64_t v857 = v45;
  atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_1CC207590(v46, 12, (uint64_t)&v856);
  uint64_t v47 = v857;
  if (v857 && !atomic_fetch_add(&v857->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  if (!atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  int v48 = (std::__shared_weak_count *)operator new(0x228uLL);
  v48->__shared_owners_ = 0;
  v48->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  v48[5].std::__shared_count = 0u;
  *(_OWORD *)&v48[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v48[6].__shared_owners_ = 0u;
  v48[7].std::__shared_count = 0u;
  *(_OWORD *)&v48[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v48[8].__shared_owners_ = 0u;
  v48[9].std::__shared_count = 0u;
  *(_OWORD *)&v48[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v48[10].__shared_owners_ = 0u;
  v48[11].std::__shared_count = 0u;
  *(_OWORD *)&v48[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v48[12].__shared_owners_ = 0u;
  v48[13].std::__shared_count = 0u;
  *(_OWORD *)&v48[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v48[14].__shared_owners_ = 0u;
  v48[15].std::__shared_count = 0u;
  *(_OWORD *)&v48[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v48[16].__shared_owners_ = 0u;
  v48[17].std::__shared_count = 0u;
  *(_OWORD *)&v48[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v48[18].__shared_owners_ = 0u;
  v48[19].std::__shared_count = 0u;
  *(_OWORD *)&v48[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v48[20].__shared_owners_ = 0u;
  v48[21].std::__shared_count = 0u;
  *(_OWORD *)&v48[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v48[22].__shared_owners_ = 0u;
  *(_OWORD *)&v48[1].__shared_weak_owners_ = xmmword_1CFAC6580;
  v48->__shared_weak_owners_ = 0;
  v48[1].__vftable = (std::__shared_weak_count_vtbl *)&v48[1].__shared_weak_owners_;
  *(_OWORD *)&v48[2].__shared_owners_ = xmmword_1CFAC4810;
  v48[3].std::__shared_count = (std::__shared_count)xmmword_1CFAC4810;
  *(_OWORD *)&v48[3].__shared_weak_owners_ = xmmword_1CFAC65C0;
  int v49 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)&v48[4].__shared_owners_ = xmmword_1CFAC4730;
  v48[1].__shared_owners_ = 0x2000000005;
  uint64_t v854 = v48 + 1;
  v855 = v48;
  atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_1CC207590(v49, 12, (uint64_t)&v854);
  int v50 = v855;
  if (v855 && !atomic_fetch_add(&v855->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  if (!atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  int v51 = (std::__shared_weak_count *)operator new(0x228uLL);
  v51->__shared_owners_ = 0;
  v51->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  *(_OWORD *)&v51[4].__shared_owners_ = 0u;
  v51[5].std::__shared_count = 0u;
  *(_OWORD *)&v51[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v51[6].__shared_owners_ = 0u;
  v51[7].std::__shared_count = 0u;
  *(_OWORD *)&v51[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v51[8].__shared_owners_ = 0u;
  v51[9].std::__shared_count = 0u;
  *(_OWORD *)&v51[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v51[10].__shared_owners_ = 0u;
  v51[11].std::__shared_count = 0u;
  *(_OWORD *)&v51[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v51[12].__shared_owners_ = 0u;
  v51[13].std::__shared_count = 0u;
  *(_OWORD *)&v51[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v51[14].__shared_owners_ = 0u;
  v51[15].std::__shared_count = 0u;
  *(_OWORD *)&v51[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v51[16].__shared_owners_ = 0u;
  v51[17].std::__shared_count = 0u;
  *(_OWORD *)&v51[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v51[18].__shared_owners_ = 0u;
  v51[19].std::__shared_count = 0u;
  *(_OWORD *)&v51[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v51[20].__shared_owners_ = 0u;
  v51[21].std::__shared_count = 0u;
  *(_OWORD *)&v51[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v51[22].__shared_owners_ = 0u;
  *(_OWORD *)&v51[1].__shared_weak_owners_ = xmmword_1CFAC6620;
  v51->__shared_weak_owners_ = 0;
  v51[1].__vftable = (std::__shared_weak_count_vtbl *)&v51[1].__shared_weak_owners_;
  *(_OWORD *)&v51[2].__shared_owners_ = xmmword_1CFAC4810;
  v51[3].__vftable = (std::__shared_weak_count_vtbl *)(32 - __clz((unint64_t)(a1[10] - a1[9]) >> 3));
  int v52 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)&v51[3].__shared_owners_ = xmmword_1CFAC65F0;
  v51[4].__vftable = (std::__shared_weak_count_vtbl *)2;
  v51[1].__shared_owners_ = 0x2000000004;
  uint64_t v852 = v51 + 1;
  uint64_t v853 = v51;
  atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_1CC207590(v52, 12, (uint64_t)&v852);
  int v53 = v853;
  if (v853 && !atomic_fetch_add(&v853->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
  if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
  }
  unsigned int v54 = (std::__shared_weak_count *)operator new(0x228uLL);
  v54->__shared_owners_ = 0;
  v54->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  *(_OWORD *)&v54[2].__shared_owners_ = 0u;
  v54[3].std::__shared_count = 0u;
  *(_OWORD *)&v54[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v54[4].__shared_owners_ = 0u;
  v54[5].std::__shared_count = 0u;
  *(_OWORD *)&v54[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v54[6].__shared_owners_ = 0u;
  v54[7].std::__shared_count = 0u;
  *(_OWORD *)&v54[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v54[8].__shared_owners_ = 0u;
  v54[9].std::__shared_count = 0u;
  *(_OWORD *)&v54[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v54[10].__shared_owners_ = 0u;
  v54[11].std::__shared_count = 0u;
  *(_OWORD *)&v54[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v54[12].__shared_owners_ = 0u;
  v54[13].std::__shared_count = 0u;
  *(_OWORD *)&v54[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v54[14].__shared_owners_ = 0u;
  v54[15].std::__shared_count = 0u;
  *(_OWORD *)&v54[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v54[16].__shared_owners_ = 0u;
  v54[17].std::__shared_count = 0u;
  *(_OWORD *)&v54[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v54[18].__shared_owners_ = 0u;
  v54[19].std::__shared_count = 0u;
  *(_OWORD *)&v54[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v54[20].__shared_owners_ = 0u;
  v54[21].std::__shared_count = 0u;
  *(_OWORD *)&v54[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v54[22].__shared_owners_ = 0u;
  *(_OWORD *)&v54[1].__shared_weak_owners_ = xmmword_1CFAC6630;
  v54->__shared_weak_owners_ = 0;
  v54[1].__vftable = (std::__shared_weak_count_vtbl *)&v54[1].__shared_weak_owners_;
  v54[1].__shared_owners_ = 0x2000000001;
  unsigned int v55 = (llvm::raw_ostream *)*a1;
  int v850 = v54 + 1;
  unsigned int v851 = v54;
  atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_1CC207590(v55, 12, (uint64_t)&v850);
  size_t v56 = v851;
  if (v851 && !atomic_fetch_add(&v851->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  if (!atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
  }
  size_t v57 = (std::__shared_weak_count *)operator new(0x228uLL);
  v57->__shared_owners_ = 0;
  v57->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  v57[3].std::__shared_count = 0u;
  *(_OWORD *)&v57[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v57[4].__shared_owners_ = 0u;
  v57[5].std::__shared_count = 0u;
  *(_OWORD *)&v57[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v57[6].__shared_owners_ = 0u;
  v57[7].std::__shared_count = 0u;
  *(_OWORD *)&v57[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v57[8].__shared_owners_ = 0u;
  v57[9].std::__shared_count = 0u;
  *(_OWORD *)&v57[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v57[10].__shared_owners_ = 0u;
  v57[11].std::__shared_count = 0u;
  *(_OWORD *)&v57[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v57[12].__shared_owners_ = 0u;
  v57[13].std::__shared_count = 0u;
  *(_OWORD *)&v57[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v57[14].__shared_owners_ = 0u;
  v57[15].std::__shared_count = 0u;
  *(_OWORD *)&v57[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v57[16].__shared_owners_ = 0u;
  v57[17].std::__shared_count = 0u;
  *(_OWORD *)&v57[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v57[18].__shared_owners_ = 0u;
  v57[19].std::__shared_count = 0u;
  *(_OWORD *)&v57[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v57[20].__shared_owners_ = 0u;
  v57[21].std::__shared_count = 0u;
  *(_OWORD *)&v57[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v57[22].__shared_owners_ = 0u;
  *(_OWORD *)&v57[1].__shared_weak_owners_ = xmmword_1CFAC6630;
  v57->__shared_weak_owners_ = 0;
  v57[1].__vftable = (std::__shared_weak_count_vtbl *)&v57[1].__shared_weak_owners_;
  *(_OWORD *)&v57[2].__shared_owners_ = xmmword_1CFAC4810;
  v57[1].__shared_owners_ = 0x2000000002;
  size_t v58 = (llvm::raw_ostream *)*a1;
  int v848 = v57 + 1;
  uint64_t v849 = v57;
  atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_1CC207590(v58, 12, (uint64_t)&v848);
  size_t v59 = v849;
  if (v849 && !atomic_fetch_add(&v849->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
  }
  if (!atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  unsigned int v60 = (std::__shared_weak_count *)operator new(0x228uLL);
  v60->__shared_owners_ = 0;
  v60->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  *(_OWORD *)&v60[2].__shared_owners_ = 0u;
  v60[3].std::__shared_count = 0u;
  *(_OWORD *)&v60[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v60[4].__shared_owners_ = 0u;
  v60[5].std::__shared_count = 0u;
  *(_OWORD *)&v60[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v60[6].__shared_owners_ = 0u;
  v60[7].std::__shared_count = 0u;
  *(_OWORD *)&v60[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v60[8].__shared_owners_ = 0u;
  v60[9].std::__shared_count = 0u;
  *(_OWORD *)&v60[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v60[10].__shared_owners_ = 0u;
  v60[11].std::__shared_count = 0u;
  *(_OWORD *)&v60[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v60[12].__shared_owners_ = 0u;
  v60[13].std::__shared_count = 0u;
  *(_OWORD *)&v60[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v60[14].__shared_owners_ = 0u;
  v60[15].std::__shared_count = 0u;
  *(_OWORD *)&v60[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v60[16].__shared_owners_ = 0u;
  v60[17].std::__shared_count = 0u;
  *(_OWORD *)&v60[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v60[18].__shared_owners_ = 0u;
  v60[19].std::__shared_count = 0u;
  *(_OWORD *)&v60[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v60[20].__shared_owners_ = 0u;
  v60[21].std::__shared_count = 0u;
  *(_OWORD *)&v60[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v60[22].__shared_owners_ = 0u;
  *(_OWORD *)&v60[1].__shared_weak_owners_ = xmmword_1CFAC6640;
  v60->__shared_weak_owners_ = 0;
  v60[1].__vftable = (std::__shared_weak_count_vtbl *)&v60[1].__shared_weak_owners_;
  v60[1].__shared_owners_ = 0x2000000001;
  unsigned int v61 = (llvm::raw_ostream *)*a1;
  uint64_t v846 = v60 + 1;
  uint64_t v847 = v60;
  atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_1CC207590(v61, 12, (uint64_t)&v846);
  size_t v62 = v847;
  if (v847 && !atomic_fetch_add(&v847->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
  }
  if (!atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  int v63 = (std::__shared_weak_count *)operator new(0x228uLL);
  v63->__shared_owners_ = 0;
  v63->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  v63[5].std::__shared_count = 0u;
  *(_OWORD *)&v63[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v63[6].__shared_owners_ = 0u;
  v63[7].std::__shared_count = 0u;
  *(_OWORD *)&v63[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v63[8].__shared_owners_ = 0u;
  v63[9].std::__shared_count = 0u;
  *(_OWORD *)&v63[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v63[10].__shared_owners_ = 0u;
  v63[11].std::__shared_count = 0u;
  *(_OWORD *)&v63[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v63[12].__shared_owners_ = 0u;
  v63[13].std::__shared_count = 0u;
  *(_OWORD *)&v63[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v63[14].__shared_owners_ = 0u;
  v63[15].std::__shared_count = 0u;
  *(_OWORD *)&v63[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v63[16].__shared_owners_ = 0u;
  v63[17].std::__shared_count = 0u;
  *(_OWORD *)&v63[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v63[18].__shared_owners_ = 0u;
  v63[19].std::__shared_count = 0u;
  *(_OWORD *)&v63[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v63[20].__shared_owners_ = 0u;
  v63[21].std::__shared_count = 0u;
  *(_OWORD *)&v63[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v63[22].__shared_owners_ = 0u;
  *(_OWORD *)&v63[1].__shared_weak_owners_ = xmmword_1CFAC6650;
  v63->__shared_weak_owners_ = 0;
  v63[1].__vftable = (std::__shared_weak_count_vtbl *)&v63[1].__shared_weak_owners_;
  *(_OWORD *)&v63[2].__shared_owners_ = xmmword_1CDF53750;
  v63[3].__vftable = (std::__shared_weak_count_vtbl *)(32 - __clz((unint64_t)(a1[10] - a1[9]) >> 3));
  uint64_t v64 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)&v63[3].__shared_owners_ = xmmword_1CD91D2D0;
  v63[4].std::__shared_count = (std::__shared_count)vdupq_n_s64(6uLL);
  v63[4].__shared_weak_owners_ = 4;
  v63[1].__shared_owners_ = 0x2000000005;
  v844 = v63 + 1;
  v845 = v63;
  atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_1CC207590(v64, 12, (uint64_t)&v844);
  uint64_t v65 = v845;
  if (v845 && !atomic_fetch_add(&v845->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
  }
  if (!atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
  }
  sub_1CC1F7D44(*a1);
  sub_1CC1F77A4(*a1, 0x11u, 4u);
  __p[0] = v884;
  __p[1] = (void *)0x4000000000;
  uint64_t v66 = 32 - __clz((unint64_t)(a1[10] - a1[9]) >> 3);
  char v67 = (char *)operator new(0x228uLL);
  *(void *)char v67 = &unk_1F2608A00;
  *((void *)v67 + 1) = 0;
  *(_OWORD *)(v67 + 88) = 0u;
  *(_OWORD *)(v67 + 104) = 0u;
  *(_OWORD *)(v67 + 120) = 0u;
  *(_OWORD *)(v67 + 136) = 0u;
  *(_OWORD *)(v67 + 152) = 0u;
  *(_OWORD *)(v67 + 168) = 0u;
  *(_OWORD *)(v67 + 184) = 0u;
  *(_OWORD *)(v67 + 200) = 0u;
  *(_OWORD *)(v67 + 216) = 0u;
  *(_OWORD *)(v67 + 232) = 0u;
  *(_OWORD *)(v67 + 248) = 0u;
  *(_OWORD *)(v67 + 264) = 0u;
  *(_OWORD *)(v67 + 280) = 0u;
  *(_OWORD *)(v67 + 296) = 0u;
  *(_OWORD *)(v67 + 312) = 0u;
  *(_OWORD *)(v67 + 328) = 0u;
  *(_OWORD *)(v67 + 344) = 0u;
  *(_OWORD *)(v67 + 360) = 0u;
  *(_OWORD *)(v67 + 376) = 0u;
  *(_OWORD *)(v67 + 392) = 0u;
  *(_OWORD *)(v67 + 408) = 0u;
  *(_OWORD *)(v67 + 424) = 0u;
  *(_OWORD *)(v67 + 440) = 0u;
  *(_OWORD *)(v67 + 456) = 0u;
  *(_OWORD *)(v67 + 472) = 0u;
  *(_OWORD *)(v67 + 488) = 0u;
  *(_OWORD *)(v67 + 504) = 0u;
  *(_OWORD *)(v67 + 520) = 0u;
  *(_OWORD *)(v67 + 536) = 0u;
  *(_OWORD *)(v67 + 40) = xmmword_1CFAC6660;
  *((void *)v67 + 2) = 0;
  *((void *)v67 + 3) = v67 + 40;
  *((void *)v67 + 7) = v66;
  *((_OWORD *)v67 + 4) = xmmword_1CD91D2D0;
  *((void *)v67 + 10) = 255;
  *((void *)v67 + 4) = 0x2000000003;
  uint64_t v68 = *a1;
  uint64_t v877 = v67 + 24;
  uint64_t v878 = (uint64_t)v67;
  unsigned int v827 = sub_1CC1F7CDC(v68, (uint64_t)&v877);
  uint64_t v69 = (std::__shared_weak_count *)v878;
  if (v878 && !atomic_fetch_add((atomic_ullong *volatile)(v878 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
    std::__shared_weak_count::__release_weak(v69);
  }
  unint64_t v70 = (char *)operator new(0x228uLL);
  *(void *)unint64_t v70 = &unk_1F2608A00;
  *((void *)v70 + 1) = 0;
  *(_OWORD *)(v70 + 72) = 0u;
  *(_OWORD *)(v70 + 88) = 0u;
  *(_OWORD *)(v70 + 104) = 0u;
  *(_OWORD *)(v70 + 120) = 0u;
  *(_OWORD *)(v70 + 136) = 0u;
  *(_OWORD *)(v70 + 152) = 0u;
  *(_OWORD *)(v70 + 168) = 0u;
  *(_OWORD *)(v70 + 184) = 0u;
  *(_OWORD *)(v70 + 200) = 0u;
  *(_OWORD *)(v70 + 216) = 0u;
  *(_OWORD *)(v70 + 232) = 0u;
  *(_OWORD *)(v70 + 248) = 0u;
  *(_OWORD *)(v70 + 264) = 0u;
  *(_OWORD *)(v70 + 280) = 0u;
  *(_OWORD *)(v70 + 296) = 0u;
  *(_OWORD *)(v70 + 312) = 0u;
  *(_OWORD *)(v70 + 328) = 0u;
  *(_OWORD *)(v70 + 344) = 0u;
  *(_OWORD *)(v70 + 360) = 0u;
  *(_OWORD *)(v70 + 376) = 0u;
  *(_OWORD *)(v70 + 392) = 0u;
  *(_OWORD *)(v70 + 408) = 0u;
  *(_OWORD *)(v70 + 424) = 0u;
  *(_OWORD *)(v70 + 440) = 0u;
  *(_OWORD *)(v70 + 456) = 0u;
  *(_OWORD *)(v70 + 472) = 0u;
  *(_OWORD *)(v70 + 488) = 0u;
  *(_OWORD *)(v70 + 504) = 0u;
  *(_OWORD *)(v70 + 520) = 0u;
  *(_OWORD *)(v70 + 536) = 0u;
  *(_OWORD *)(v70 + 40) = xmmword_1CFAC6670;
  *((void *)v70 + 2) = 0;
  *((void *)v70 + 3) = v70 + 40;
  *(_OWORD *)(v70 + 56) = xmmword_1CFAC6680;
  *((void *)v70 + 4) = 0x2000000002;
  uint64_t v71 = *a1;
  int v880 = v70 + 24;
  uint64_t v881 = (uint64_t)v70;
  unsigned int v825 = sub_1CC1F7CDC(v71, (uint64_t)&v880);
  unint64_t v72 = (std::__shared_weak_count *)v881;
  if (v881 && !atomic_fetch_add((atomic_ullong *volatile)(v881 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
  }
  unsigned int v73 = (char *)operator new(0x228uLL);
  *(void *)unsigned int v73 = &unk_1F2608A00;
  *((void *)v73 + 1) = 0;
  *(_OWORD *)(v73 + 104) = 0u;
  *(_OWORD *)(v73 + 120) = 0u;
  *(_OWORD *)(v73 + 136) = 0u;
  *(_OWORD *)(v73 + 152) = 0u;
  *(_OWORD *)(v73 + 168) = 0u;
  *(_OWORD *)(v73 + 184) = 0u;
  *(_OWORD *)(v73 + 200) = 0u;
  *(_OWORD *)(v73 + 216) = 0u;
  *(_OWORD *)(v73 + 232) = 0u;
  *(_OWORD *)(v73 + 248) = 0u;
  *(_OWORD *)(v73 + 264) = 0u;
  *(_OWORD *)(v73 + 280) = 0u;
  *(_OWORD *)(v73 + 296) = 0u;
  *(_OWORD *)(v73 + 312) = 0u;
  *(_OWORD *)(v73 + 328) = 0u;
  *(_OWORD *)(v73 + 344) = 0u;
  *(_OWORD *)(v73 + 360) = 0u;
  *(_OWORD *)(v73 + 376) = 0u;
  *(_OWORD *)(v73 + 392) = 0u;
  *(_OWORD *)(v73 + 408) = 0u;
  *(_OWORD *)(v73 + 424) = 0u;
  *(_OWORD *)(v73 + 440) = 0u;
  *(_OWORD *)(v73 + 456) = 0u;
  *(_OWORD *)(v73 + 472) = 0u;
  *(_OWORD *)(v73 + 488) = 0u;
  *(_OWORD *)(v73 + 504) = 0u;
  *(_OWORD *)(v73 + 40) = xmmword_1CFAC6690;
  *(_OWORD *)(v73 + 520) = 0u;
  *(_OWORD *)(v73 + 536) = 0u;
  *((void *)v73 + 2) = 0;
  *((void *)v73 + 3) = v73 + 40;
  *(_OWORD *)(v73 + 56) = xmmword_1CDF53750;
  *(_OWORD *)(v73 + 72) = xmmword_1CFAC6570;
  uint64_t v74 = *a1;
  *((void *)v73 + 11) = v66;
  *((void *)v73 + 12) = 2;
  *((void *)v73 + 4) = 0x2000000004;
  __dst = (atomic_ullong *)(v73 + 24);
  int v867 = (atomic_ullong *)v73;
  unsigned int v834 = sub_1CC1F7CDC(v74, (uint64_t)&__dst);
  uint64_t v75 = (std::__shared_weak_count *)v867;
  if (v867 && !atomic_fetch_add(v867 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
  }
  long long v76 = (char *)operator new(0x228uLL);
  *(_OWORD *)(v76 + 40) = xmmword_1CFAC66A0;
  *(void *)long long v76 = &unk_1F2608A00;
  *((void *)v76 + 1) = 0;
  *(_OWORD *)(v76 + 104) = 0u;
  *(_OWORD *)(v76 + 120) = 0u;
  *(_OWORD *)(v76 + 136) = 0u;
  *(_OWORD *)(v76 + 152) = 0u;
  *(_OWORD *)(v76 + 168) = 0u;
  *(_OWORD *)(v76 + 184) = 0u;
  *(_OWORD *)(v76 + 200) = 0u;
  *(_OWORD *)(v76 + 216) = 0u;
  *(_OWORD *)(v76 + 232) = 0u;
  *(_OWORD *)(v76 + 248) = 0u;
  *(_OWORD *)(v76 + 264) = 0u;
  *(_OWORD *)(v76 + 280) = 0u;
  *(_OWORD *)(v76 + 296) = 0u;
  *(_OWORD *)(v76 + 312) = 0u;
  *(_OWORD *)(v76 + 328) = 0u;
  *(_OWORD *)(v76 + 344) = 0u;
  *(_OWORD *)(v76 + 360) = 0u;
  *(_OWORD *)(v76 + 376) = 0u;
  *(_OWORD *)(v76 + 392) = 0u;
  *(_OWORD *)(v76 + 408) = 0u;
  *(_OWORD *)(v76 + 424) = 0u;
  *(_OWORD *)(v76 + 440) = 0u;
  *(_OWORD *)(v76 + 456) = 0u;
  *(_OWORD *)(v76 + 472) = 0u;
  *(_OWORD *)(v76 + 488) = 0u;
  *(_OWORD *)(v76 + 504) = 0u;
  *(_OWORD *)(v76 + 520) = 0u;
  *(_OWORD *)(v76 + 536) = 0u;
  *((void *)v76 + 2) = 0;
  *((void *)v76 + 3) = v76 + 40;
  *(_OWORD *)(v76 + 56) = xmmword_1CDF53750;
  *(_OWORD *)(v76 + 72) = xmmword_1CFAC6570;
  uint64_t v77 = *a1;
  *((void *)v76 + 11) = v66;
  *((void *)v76 + 12) = 2;
  *((void *)v76 + 4) = 0x2000000004;
  *(void *)&long long v875 = v76 + 24;
  *((void *)&v875 + 1) = v76;
  unsigned int v826 = sub_1CC1F7CDC(v77, (uint64_t)&v875);
  unint64_t v78 = (std::__shared_weak_count *)*((void *)&v875 + 1);
  if (*((void *)&v875 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v875 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
    std::__shared_weak_count::__release_weak(v78);
  }
  unsigned int v79 = (char *)operator new(0x228uLL);
  *(void *)unsigned int v79 = &unk_1F2608A00;
  *((void *)v79 + 1) = 0;
  *(_OWORD *)(v79 + 88) = 0u;
  *(_OWORD *)(v79 + 104) = 0u;
  *(_OWORD *)(v79 + 120) = 0u;
  *(_OWORD *)(v79 + 136) = 0u;
  *(_OWORD *)(v79 + 152) = 0u;
  *(_OWORD *)(v79 + 168) = 0u;
  *(_OWORD *)(v79 + 184) = 0u;
  *(_OWORD *)(v79 + 200) = 0u;
  *(_OWORD *)(v79 + 216) = 0u;
  *(_OWORD *)(v79 + 232) = 0u;
  *(_OWORD *)(v79 + 248) = 0u;
  *(_OWORD *)(v79 + 264) = 0u;
  *(_OWORD *)(v79 + 280) = 0u;
  *(_OWORD *)(v79 + 296) = 0u;
  *(_OWORD *)(v79 + 312) = 0u;
  *(_OWORD *)(v79 + 328) = 0u;
  *(_OWORD *)(v79 + 344) = 0u;
  *(_OWORD *)(v79 + 360) = 0u;
  *(_OWORD *)(v79 + 376) = 0u;
  *(_OWORD *)(v79 + 392) = 0u;
  *(_OWORD *)(v79 + 408) = 0u;
  *(_OWORD *)(v79 + 424) = 0u;
  *(_OWORD *)(v79 + 440) = 0u;
  *(_OWORD *)(v79 + 456) = 0u;
  *(_OWORD *)(v79 + 472) = 0u;
  *(_OWORD *)(v79 + 488) = 0u;
  *(_OWORD *)(v79 + 504) = 0u;
  *(_OWORD *)(v79 + 520) = 0u;
  *(_OWORD *)(v79 + 536) = 0u;
  *(_OWORD *)(v79 + 40) = xmmword_1CFAC66B0;
  *((void *)v79 + 2) = 0;
  *((void *)v79 + 3) = v79 + 40;
  *(_OWORD *)(v79 + 56) = xmmword_1CFAC6570;
  *(_OWORD *)(v79 + 72) = xmmword_1CD96EEC0;
  *((void *)v79 + 4) = 0x2000000003;
  uint64_t v80 = *a1;
  uint64_t v873 = (std::__shared_weak_count *)(v79 + 24);
  uint64_t v874 = (std::__shared_weak_count *)v79;
  unsigned int v81 = sub_1CC1F7CDC(v80, (uint64_t)&v873);
  int v82 = v874;
  if (v874 && !atomic_fetch_add(&v874->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
    std::__shared_weak_count::__release_weak(v82);
  }
  __int16 v83 = (char *)operator new(0x228uLL);
  *(void *)__int16 v83 = &unk_1F2608A00;
  *((void *)v83 + 1) = 0;
  *(_OWORD *)(v83 + 104) = 0u;
  *(_OWORD *)(v83 + 120) = 0u;
  *(_OWORD *)(v83 + 136) = 0u;
  *(_OWORD *)(v83 + 152) = 0u;
  *(_OWORD *)(v83 + 168) = 0u;
  *(_OWORD *)(v83 + 184) = 0u;
  *(_OWORD *)(v83 + 200) = 0u;
  *(_OWORD *)(v83 + 216) = 0u;
  *(_OWORD *)(v83 + 232) = 0u;
  *(_OWORD *)(v83 + 248) = 0u;
  *(_OWORD *)(v83 + 264) = 0u;
  *(_OWORD *)(v83 + 280) = 0u;
  *(_OWORD *)(v83 + 296) = 0u;
  *(_OWORD *)(v83 + 312) = 0u;
  *(_OWORD *)(v83 + 328) = 0u;
  *(_OWORD *)(v83 + 344) = 0u;
  *(_OWORD *)(v83 + 360) = 0u;
  *(_OWORD *)(v83 + 376) = 0u;
  *(_OWORD *)(v83 + 392) = 0u;
  *(_OWORD *)(v83 + 408) = 0u;
  *(_OWORD *)(v83 + 424) = 0u;
  *(_OWORD *)(v83 + 440) = 0u;
  *(_OWORD *)(v83 + 456) = 0u;
  *(_OWORD *)(v83 + 472) = 0u;
  *(_OWORD *)(v83 + 488) = 0u;
  *(_OWORD *)(v83 + 504) = 0u;
  *(_OWORD *)(v83 + 40) = xmmword_1CFAC65E0;
  *(_OWORD *)(v83 + 520) = 0u;
  *(_OWORD *)(v83 + 536) = 0u;
  *((void *)v83 + 2) = 0;
  *((void *)v83 + 3) = v83 + 40;
  *(_OWORD *)(v83 + 56) = xmmword_1CDF53750;
  *(_OWORD *)(v83 + 72) = xmmword_1CFAC6570;
  uint64_t v84 = *a1;
  *((void *)v83 + 11) = v66;
  *((void *)v83 + 12) = 2;
  *((void *)v83 + 4) = 0x2000000004;
  uint64_t v871 = (std::__shared_weak_count *)(v83 + 24);
  uint64_t v872 = (std::__shared_weak_count *)v83;
  int v836 = sub_1CC1F7CDC(v84, (uint64_t)&v871);
  uint64_t v85 = v872;
  if (v872 && !atomic_fetch_add(&v872->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
  }
  int v86 = (char *)operator new(0x228uLL);
  *(void *)int v86 = &unk_1F2608A00;
  *((void *)v86 + 1) = 0;
  *(_OWORD *)(v86 + 88) = 0u;
  *(_OWORD *)(v86 + 104) = 0u;
  *(_OWORD *)(v86 + 120) = 0u;
  *(_OWORD *)(v86 + 136) = 0u;
  *(_OWORD *)(v86 + 152) = 0u;
  *(_OWORD *)(v86 + 168) = 0u;
  *(_OWORD *)(v86 + 184) = 0u;
  *(_OWORD *)(v86 + 200) = 0u;
  *(_OWORD *)(v86 + 216) = 0u;
  *(_OWORD *)(v86 + 232) = 0u;
  *(_OWORD *)(v86 + 248) = 0u;
  *(_OWORD *)(v86 + 264) = 0u;
  *(_OWORD *)(v86 + 280) = 0u;
  *(_OWORD *)(v86 + 296) = 0u;
  *(_OWORD *)(v86 + 312) = 0u;
  *(_OWORD *)(v86 + 328) = 0u;
  *(_OWORD *)(v86 + 344) = 0u;
  *(_OWORD *)(v86 + 360) = 0u;
  *(_OWORD *)(v86 + 376) = 0u;
  *(_OWORD *)(v86 + 392) = 0u;
  *(_OWORD *)(v86 + 408) = 0u;
  *(_OWORD *)(v86 + 424) = 0u;
  *(_OWORD *)(v86 + 440) = 0u;
  *(_OWORD *)(v86 + 456) = 0u;
  *(_OWORD *)(v86 + 472) = 0u;
  *(_OWORD *)(v86 + 488) = 0u;
  *(_OWORD *)(v86 + 504) = 0u;
  *(_OWORD *)(v86 + 520) = 0u;
  *(_OWORD *)(v86 + 536) = 0u;
  *(_OWORD *)(v86 + 40) = xmmword_1CFAC65B0;
  *((void *)v86 + 2) = 0;
  *((void *)v86 + 3) = v86 + 40;
  *(_OWORD *)(v86 + 56) = xmmword_1CFAC4740;
  *((void *)v86 + 9) = v66;
  *((void *)v86 + 10) = 2;
  *((void *)v86 + 4) = 0x2000000003;
  uint64_t v87 = *a1;
  v864 = (std::__shared_weak_count *)(v86 + 24);
  uint64_t v865 = (std::__shared_weak_count *)v86;
  unsigned int v88 = sub_1CC1F7CDC(v87, (uint64_t)&v864);
  unsigned int v89 = v865;
  if (v865 && !atomic_fetch_add(&v865->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
  }
  if (LODWORD(__p[1]) >= HIDWORD(__p[1])) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((void *)__p[0] + LODWORD(__p[1])) = (a1[10] - a1[9]) >> 3;
  ++LODWORD(__p[1]);
  sub_1CC207D3C((llvm::raw_ostream *)*a1, 1u, (uint64_t)__p, 0);
  LODWORD(__p[1]) = 0;
  uint64_t v90 = a1[9];
  uint64_t v91 = a1[10];
  if (v90 != v91)
  {
    int v92 = (uint64_t *)(v843 + 48);
    do
    {
      unsigned int v93 = 0;
      uint64_t v94 = *(void *)v90;
      unint64_t v95 = *(unsigned int *)(*(void *)v90 + 8);
      unsigned int v96 = 0;
      switch(*(_DWORD *)(*(void *)v90 + 8))
      {
        case 0u:
          unsigned int v96 = 0;
          unsigned int v93 = 10;
          break;
        case 1u:
          unsigned int v96 = 0;
          unsigned int v93 = 23;
          break;
        case 2u:
          unsigned int v96 = 0;
          unsigned int v93 = 3;
          break;
        case 3u:
          unsigned int v96 = 0;
          unsigned int v93 = 4;
          break;
        case 4u:
          unsigned int v96 = 0;
          unsigned int v93 = 13;
          break;
        case 5u:
          unsigned int v96 = 0;
          unsigned int v93 = 14;
          break;
        case 6u:
          unsigned int v96 = 0;
          unsigned int v93 = 15;
          break;
        case 7u:
          unsigned int v96 = 0;
          unsigned int v93 = 2;
          break;
        case 8u:
          unsigned int v96 = 0;
          unsigned int v93 = 5;
          break;
        case 9u:
          unsigned int v96 = 0;
          unsigned int v93 = 16;
          break;
        case 0xAu:
          unsigned int v96 = 0;
          unsigned int v93 = 17;
          break;
        case 0xBu:
          unsigned int v96 = 0;
          unsigned int v93 = 24;
          break;
        case 0xCu:
          unsigned int v96 = 0;
          unsigned int v93 = 22;
          break;
        case 0xDu:
          if (!HIDWORD(__p[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unsigned int v96 = 0;
          *(void *)__p[0] = v95 >> 8;
          ++LODWORD(__p[1]);
          unsigned int v93 = 7;
          break;
        case 0xEu:
          BOOL v99 = v95 > 0xFF;
          if (!HIDWORD(__p[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)__p[0] = v99;
          ++LODWORD(__p[1]);
          unsigned int v862 = **(std::__shared_weak_count ***)(v94 + 16);
          uint64_t v860 = 0;
          if (sub_1CBFA3AF4(v92, &v862, &v860)) {
            uint64_t v100 = (uint64_t)v860;
          }
          else {
            uint64_t v100 = *(void *)(v843 + 48) + 16 * *(unsigned int *)(v843 + 64);
          }
          if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)__p[0] + LODWORD(__p[1])) = (*(_DWORD *)(v100 + 8) - 1);
          ++LODWORD(__p[1]);
          if (*(_DWORD *)(v94 + 12) == 1)
          {
            unsigned int v93 = 21;
          }
          else
          {
            uint64_t v116 = 0;
            uint64_t v117 = 8 * (*(_DWORD *)(v94 + 12) - 1);
            do
            {
              unsigned int v862 = *(std::__shared_weak_count **)(*(void *)(v94 + 16) + v116 + 8);
              uint64_t v860 = 0;
              if (sub_1CBFA3AF4(v92, &v862, &v860)) {
                uint64_t v118 = (uint64_t)v860;
              }
              else {
                uint64_t v118 = *(void *)(v843 + 48) + 16 * *(unsigned int *)(v843 + 64);
              }
              if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)__p[0] + LODWORD(__p[1])) = (*(_DWORD *)(v118 + 8) - 1);
              ++LODWORD(__p[1]);
              v116 += 8;
              unsigned int v93 = 21;
            }
            while (v117 != v116);
          }
          unsigned int v96 = v834;
          break;
        case 0xFu:
          unint64_t v101 = v95 >> 8;
          if (*(void *)(v94 + 24))
          {
            unsigned int v862 = **(std::__shared_weak_count ***)(v94 + 16);
            uint64_t v860 = 0;
            if (sub_1CBFA3AF4(v92, &v862, &v860)) {
              uint64_t v102 = (uint64_t)v860;
            }
            else {
              uint64_t v102 = *(void *)(v843 + 48) + 16 * *(unsigned int *)(v843 + 64);
            }
            if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)__p[0] + LODWORD(__p[1])) = (*(_DWORD *)(v102 + 8) - 1);
            unsigned int v121 = LODWORD(__p[1]) + 1;
            LODWORD(__p[1]) = v121;
            if (v121 >= HIDWORD(__p[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)__p[0] + v121) = v101;
            ++LODWORD(__p[1]);
            if (v95 >= 0x100) {
              unsigned int v96 = 0;
            }
            else {
              unsigned int v96 = v827;
            }
            unsigned int v93 = 8;
          }
          else
          {
            if (!HIDWORD(__p[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)__p[0] = v101;
            ++LODWORD(__p[1]);
            if (v95 >= 0x100) {
              unsigned int v96 = 0;
            }
            else {
              unsigned int v96 = v825;
            }
            unsigned int v93 = 25;
          }
          break;
        case 0x10u:
          if (!HIDWORD(__p[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)__p[0] = (v95 >> 9) & 1;
          ++LODWORD(__p[1]);
          uint64_t v104 = *(unsigned int *)(v94 + 12);
          if (v104)
          {
            uint64_t v105 = *(std::__shared_weak_count ***)(v94 + 16);
            uint64_t v106 = 8 * v104;
            do
            {
              unsigned int v862 = *v105;
              uint64_t v860 = 0;
              if (sub_1CBFA3AF4(v92, &v862, &v860)) {
                uint64_t v107 = (uint64_t)v860;
              }
              else {
                uint64_t v107 = *(void *)(v843 + 48) + 16 * *(unsigned int *)(v843 + 64);
              }
              if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)__p[0] + LODWORD(__p[1])) = (*(_DWORD *)(v107 + 8) - 1);
              ++LODWORD(__p[1]);
              ++v105;
              v106 -= 8;
            }
            while (v106);
          }
          int v108 = *(_DWORD *)(v94 + 8);
          if ((v108 & 0x400) != 0)
          {
            unsigned int v93 = 18;
            unsigned int v96 = v826;
          }
          else
          {
            if ((v108 & 0x100) != 0) {
              unsigned int v93 = 20;
            }
            else {
              unsigned int v93 = 6;
            }
            unsigned int v96 = v836 & (v108 << 23 >> 31);
            uint64_t v109 = *(void *)(v94 + 24);
            if (v109 && *(void *)v109) {
              sub_1CC205868(*(llvm::raw_ostream **)v843, 0x13u, (unsigned char *)(v109 + 16), *(void *)v109, v81);
            }
          }
          break;
        case 0x11u:
          if (!HIDWORD(__p[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)__p[0] = *(void *)(v94 + 32);
          ++LODWORD(__p[1]);
          unsigned int v862 = *(std::__shared_weak_count **)(v94 + 24);
          uint64_t v860 = 0;
          if (sub_1CBFA3AF4(v92, &v862, &v860)) {
            uint64_t v103 = (uint64_t)v860;
          }
          else {
            uint64_t v103 = *(void *)(v843 + 48) + 16 * *(unsigned int *)(v843 + 64);
          }
          if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)__p[0] + LODWORD(__p[1])) = (*(_DWORD *)(v103 + 8) - 1);
          ++LODWORD(__p[1]);
          unsigned int v93 = 11;
          unsigned int v96 = v88;
          break;
        case 0x12u:
        case 0x13u:
          if (!HIDWORD(__p[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)__p[0] = *(unsigned int *)(v94 + 32);
          ++LODWORD(__p[1]);
          unsigned int v862 = *(std::__shared_weak_count **)(v94 + 24);
          uint64_t v860 = 0;
          if (sub_1CBFA3AF4(v92, &v862, &v860)) {
            uint64_t v97 = (uint64_t)v860;
          }
          else {
            uint64_t v97 = *(void *)(v843 + 48) + 16 * *(unsigned int *)(v843 + 64);
          }
          if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)__p[0] + LODWORD(__p[1])) = (*(_DWORD *)(v97 + 8) - 1);
          unsigned int v98 = ++LODWORD(__p[1]);
          if (*(unsigned char *)(v94 + 8) == 19)
          {
            if (v98 >= HIDWORD(__p[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            unsigned int v96 = 0;
            *((void *)__p[0] + v98) = 1;
            ++LODWORD(__p[1]);
          }
          else
          {
            unsigned int v96 = 0;
          }
          unsigned int v93 = 12;
          break;
        case 0x14u:
          break;
        case 0x15u:
          sub_1CC205868(*(llvm::raw_ostream **)v843, 0x13u, *(unsigned char **)(v94 + 24), *(void *)(v94 + 32), v81);
          if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)__p[0] + LODWORD(__p[1])) = *(unsigned int *)(v94 + 12);
          unsigned int v110 = ++LODWORD(__p[1]);
          uint64_t v111 = *(unsigned int *)(v94 + 12);
          if (v111)
          {
            unint64_t v112 = *(std::__shared_weak_count ***)(v94 + 16);
            uint64_t v113 = 8 * v111;
            do
            {
              unsigned int v862 = *v112;
              uint64_t v860 = 0;
              if (sub_1CBFA3AF4(v92, &v862, &v860)) {
                uint64_t v114 = (uint64_t)v860;
              }
              else {
                uint64_t v114 = *(void *)(v843 + 48) + 16 * *(unsigned int *)(v843 + 64);
              }
              if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)__p[0] + LODWORD(__p[1])) = (*(_DWORD *)(v114 + 8) - 1);
              unsigned int v110 = ++LODWORD(__p[1]);
              ++v112;
              v113 -= 8;
            }
            while (v113);
          }
          unint64_t v115 = *(unsigned int *)(v94 + 8);
          if (v115 >= 0x100)
          {
            unsigned int v119 = *(unsigned int **)(v94 + 40);
            uint64_t v120 = 4 * (v115 >> 8);
            do
            {
              if (v110 >= HIDWORD(__p[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              unsigned int v96 = 0;
              *((void *)__p[0] + v110) = *v119;
              unsigned int v110 = ++LODWORD(__p[1]);
              ++v119;
              unsigned int v93 = 26;
              v120 -= 4;
            }
            while (v120);
          }
          else
          {
            unsigned int v96 = 0;
            unsigned int v93 = 26;
          }
          break;
        default:
          unsigned int v96 = 0;
          break;
      }
      sub_1CC207D3C(*(llvm::raw_ostream **)v843, v93, (uint64_t)__p, v96);
      LODWORD(__p[1]) = 0;
      v90 += 8;
    }
    while (v90 != v91);
  }
  int v122 = (uint64_t *)v843;
  uint64_t v123 = v843 + 24;
  sub_1CC1F7D44(*(void *)v843);
  if (__p[0] != v884) {
    free(__p[0]);
  }
  uint64_t v835 = v843 + 24;
  if (*(void *)(v843 + 320) != *(void *)(v843 + 328))
  {
    sub_1CC1F77A4(*(void *)v843, 0xAu, 3u);
    __p[0] = v884;
    __p[1] = (void *)0x4000000000;
    unsigned int v124 = *(uint64_t **)(v843 + 320);
    int v837 = *(uint64_t **)(v843 + 328);
    while (v124 != v837)
    {
      uint64_t v126 = *v124;
      uint64_t v125 = v124[1];
      unsigned int v127 = sub_1CC208194(v123, *v124, v125);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)__p[0] + LODWORD(__p[1])) = v127;
      unsigned int v128 = LODWORD(__p[1]) + 1;
      LODWORD(__p[1]) = v128;
      if (v128 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)__p[0] + v128) = v126;
      unsigned int v129 = ++LODWORD(__p[1]);
      if (v125) {
        uint64_t v130 = (uint64_t *)(v125 + 48);
      }
      else {
        uint64_t v130 = 0;
      }
      if (v125) {
        uint64_t v131 = v125 + 48 + 8 * *(unsigned int *)(v125 + 8);
      }
      else {
        uint64_t v131 = 0;
      }
      while (v130 != (uint64_t *)v131)
      {
        uint64_t v132 = *v130;
        if (!*v130)
        {
          uint64_t v141 = 0;
          goto LABEL_270;
        }
        int v133 = *(unsigned __int8 *)(v132 + 8);
        if (v133 != 2)
        {
          if (v133 == 1)
          {
            if (v129 >= HIDWORD(__p[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)__p[0] + v129) = 1;
            unsigned int v136 = ++LODWORD(__p[1]);
            uint64_t v137 = sub_1CC208200(*(_DWORD *)(v132 + 12));
            if (v136 >= HIDWORD(__p[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)__p[0] + v136) = v137;
            unsigned int v134 = LODWORD(__p[1]) + 1;
            LODWORD(__p[1]) = v134;
            uint64_t v135 = *(void *)(v132 + 16);
            if (v134 >= HIDWORD(__p[1])) {
LABEL_261:
            }
              llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          else
          {
            if (!*(unsigned char *)(v132 + 8))
            {
              if (v129 >= HIDWORD(__p[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)__p[0] + v129) = 0;
              unsigned int v134 = ++LODWORD(__p[1]);
              uint64_t v135 = sub_1CC208200(*(_DWORD *)(v132 + 12));
              goto LABEL_286;
            }
            uint64_t v141 = *(void *)(v132 + 16);
LABEL_270:
            if (v141) {
              uint64_t v142 = 6;
            }
            else {
              uint64_t v142 = 5;
            }
            if (v129 >= HIDWORD(__p[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)__p[0] + v129) = v142;
            unsigned int v143 = ++LODWORD(__p[1]);
            if (v132) {
              int v144 = *(_DWORD *)(v132 + 12);
            }
            else {
              int v144 = 0;
            }
            uint64_t v145 = sub_1CC208200(v144);
            if (v143 >= HIDWORD(__p[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)__p[0] + v143) = v145;
            unsigned int v129 = ++LODWORD(__p[1]);
            if (!v141)
            {
              uint64_t v123 = v843 + 24;
              goto LABEL_288;
            }
            uint64_t v123 = v843 + 24;
            if (v132) {
              uint64_t v146 = *(void **)(v132 + 16);
            }
            else {
              uint64_t v146 = 0;
            }
            uint64_t v877 = v146;
            int v880 = 0;
            if (sub_1CBFA3AF4((uint64_t *)(v843 + 48), &v877, &v880)) {
              unsigned int v147 = v880;
            }
            else {
              unsigned int v147 = (_DWORD *)(*(void *)(v843 + 48) + 16 * *(unsigned int *)(v843 + 64));
            }
            uint64_t v135 = (v147[2] - 1);
LABEL_285:
            unsigned int v134 = __p[1];
LABEL_286:
            if (v134 >= HIDWORD(__p[1])) {
              goto LABEL_261;
            }
          }
          *((void *)__p[0] + v134) = v135;
          unsigned int v129 = ++LODWORD(__p[1]);
          goto LABEL_288;
        }
        uint64_t v138 = *(unsigned int *)(v132 + 16);
        if (v138) {
          uint64_t v139 = 4;
        }
        else {
          uint64_t v139 = 3;
        }
        if (v129 >= HIDWORD(__p[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v140 = (char *)(v132 + 24 + *(unsigned int *)(v132 + 12));
        *((void *)__p[0] + v129) = v139;
        ++LODWORD(__p[1]);
        sub_1CC208214((uint64_t)__p, (char *)(v132 + 24), v140);
        if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v123 = v843 + 24;
        *((void *)__p[0] + LODWORD(__p[1])) = 0;
        unsigned int v129 = ++LODWORD(__p[1]);
        if (v138)
        {
          sub_1CC208214((uint64_t)__p, v140 + 1, &v140[v138 + 1]);
          uint64_t v135 = 0;
          goto LABEL_285;
        }
LABEL_288:
        ++v130;
      }
      sub_1CC207D3C(*(llvm::raw_ostream **)v843, 3u, (uint64_t)__p, 0);
      LODWORD(__p[1]) = 0;
      v124 += 2;
    }
    int v122 = (uint64_t *)v843;
    sub_1CC1F7D44(*(void *)v843);
    if (__p[0] != v884) {
      free(__p[0]);
    }
  }
  if (v122[46] != v122[47])
  {
    sub_1CC1F77A4(*v122, 9u, 3u);
    __p[0] = v884;
    __p[1] = (void *)0x4000000000;
    uint64_t v148 = v122[46];
    uint64_t v149 = v122[47];
    while (v148 != v149)
    {
      if (*(void *)v148)
      {
        int v150 = *(_DWORD *)(*(void *)v148 + 8);
        if (v150)
        {
          uint64_t v151 = 0;
          do
          {
            uint64_t v152 = *(void *)v148;
            if (*(void *)v148)
            {
              if (v151 < *(_DWORD *)(v152 + 8))
              {
                uint64_t v153 = *(void *)(v152 + 8 * v151 + 40);
                if (v153)
                {
                  unsigned int v154 = sub_1CC208194(v123, (v151 - 1), v153);
                  if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)__p[0] + LODWORD(__p[1])) = v154;
                  ++LODWORD(__p[1]);
                }
              }
            }
            ++v151;
          }
          while (v150 != v151);
        }
      }
      sub_1CC207D3C((llvm::raw_ostream *)*v122, 2u, (uint64_t)__p, 0);
      LODWORD(__p[1]) = 0;
      v148 += 8;
    }
    sub_1CC1F7D44(*v122);
    if (__p[0] != v884) {
      free(__p[0]);
    }
  }
  __p[0] = v884;
  __p[1] = (void *)0x4000000000;
  uint64_t v155 = (unint64_t ***)v122[21];
  unsigned int v156 = (unint64_t ***)v122[22];
  if (v155 != v156)
  {
    do
    {
      int v157 = *v155;
      int v158 = sub_1CC20839C((uint64_t)v122, (unsigned char *)**v155 + 72, ***v155);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + LODWORD(__p[1])) = v158;
      unsigned int v159 = LODWORD(__p[1]) + 1;
      LODWORD(__p[1]) = v159;
      if (v159 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v159) = *(_DWORD *)*v157;
      unsigned int v160 = LODWORD(__p[1]) + 1;
      LODWORD(__p[1]) = v160;
      if (v160 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v160) = *((_DWORD *)v157 + 2) + 1;
      ++LODWORD(__p[1]);
      sub_1CC2059BC((llvm::raw_ostream *)*v122, 0xCu, (uint64_t)__p, 0);
      LODWORD(__p[1]) = 0;
      ++v155;
    }
    while (v155 != v156);
    if (__p[0] != v884) {
      free(__p[0]);
    }
  }
  uint64_t v161 = v122[2];
  uint64_t v162 = *(unsigned __int8 *)(v161 + 239);
  if (*(char *)(v161 + 239) < 0)
  {
    if (!*(void *)(v161 + 224)) {
      goto LABEL_342;
    }
  }
  else if (!*(unsigned char *)(v161 + 239))
  {
    goto LABEL_342;
  }
  int v165 = *(unsigned char **)(v161 + 216);
  uint64_t v163 = v161 + 216;
  uint64_t v164 = v165;
  if ((v162 & 0x80u) == 0) {
    uint64_t v166 = (unsigned char *)v163;
  }
  else {
    uint64_t v166 = v164;
  }
  uint64_t v167 = *(void *)(v163 + 8);
  if ((v162 & 0x80u) == 0) {
    uint64_t v168 = v162;
  }
  else {
    uint64_t v168 = v167;
  }
  sub_1CC205868((llvm::raw_ostream *)*v122, 2u, v166, v168, 0);
  uint64_t v161 = v122[2];
LABEL_342:
  uint64_t v169 = *(unsigned __int8 *)(v161 + 503);
  if (*(char *)(v161 + 503) < 0)
  {
    if (!*(void *)(v161 + 488)) {
      goto LABEL_351;
    }
  }
  else if (!*(unsigned char *)(v161 + 503))
  {
    goto LABEL_351;
  }
  uint64_t v170 = (unsigned char *)(v161 + 480);
  uint64_t v172 = *(unsigned char **)(v161 + 480);
  uint64_t v171 = *(void *)(v161 + 488);
  if ((v169 & 0x80u) == 0) {
    uint64_t v173 = v170;
  }
  else {
    uint64_t v173 = v172;
  }
  if ((v169 & 0x80u) == 0) {
    uint64_t v174 = v169;
  }
  else {
    uint64_t v174 = v171;
  }
  sub_1CC205868((llvm::raw_ostream *)*v122, 3u, v173, v174, 0);
  uint64_t v161 = v122[2];
LABEL_351:
  uint64_t v175 = *(unsigned __int8 *)(v161 + 111);
  if (*(char *)(v161 + 111) < 0)
  {
    if (*(void *)(v161 + 96)) {
      goto LABEL_353;
    }
  }
  else if (*(unsigned char *)(v161 + 111))
  {
LABEL_353:
    int v178 = *(unsigned char **)(v161 + 88);
    uint64_t v176 = v161 + 88;
    int v177 = v178;
    if ((v175 & 0x80u) == 0) {
      BOOL v179 = (unsigned char *)v176;
    }
    else {
      BOOL v179 = v177;
    }
    uint64_t v180 = *(void *)(v176 + 8);
    if ((v175 & 0x80u) == 0) {
      uint64_t v181 = v175;
    }
    else {
      uint64_t v181 = v180;
    }
    sub_1CC205868((llvm::raw_ostream *)*v122, 4u, v179, v181, 0);
    uint64_t v161 = v122[2];
  }
  *(void *)int v879 = 0;
  uint64_t v878 = 0;
  uint64_t v877 = &v878;
  v882[0] = 0;
  uint64_t v881 = 0;
  int v880 = &v881;
  uint64_t v182 = v161 + 8;
  uint64_t v183 = *(void *)(v161 + 16);
  if (v183 != v161 + 8)
  {
    LODWORD(v184) = 0;
    int v185 = 0;
    int v186 = 0;
    uint64_t v187 = (uint64_t *)(v843 + 48);
    while (1)
    {
      if (v183) {
        unsigned int v188 = (unsigned char *)(v183 - 56);
      }
      else {
        unsigned int v188 = 0;
      }
      __int16 v189 = *((_WORD *)v188 + 17);
      int v190 = v185;
      if ((v189 & 0x3F) != 0) {
        int v185 = 1;
      }
      int v191 = (v189 & 0x3F) - 1;
      if ((v189 & 0x3F) == 0) {
        int v191 = 0;
      }
      BOOL v192 = v186 < v191 || v190 == 0;
      if (!v192) {
        int v191 = v186;
      }
      if ((v189 & 0x3F) != 0) {
        int v186 = v191;
      }
      __p[0] = *((void **)v188 + 3);
      __dst = 0;
      if (sub_1CBFA3AF4(v187, __p, &__dst)) {
        uint64_t v193 = (long long *)__dst;
      }
      else {
        uint64_t v193 = (long long *)(*(void *)(v843 + 48) + 16 * *(unsigned int *)(v843 + 64));
      }
      unsigned int v194 = *((_DWORD *)v193 + 2) - 1;
      if (v184 <= v194) {
        uint64_t v184 = v194;
      }
      else {
        uint64_t v184 = v184;
      }
      if ((v188[34] & 0x40) == 0) {
        goto LABEL_411;
      }
      uint64_t v195 = ***(void ***)v188;
      __p[0] = v188;
      int v196 = *(_DWORD *)(v195 + 2520);
      if (v196)
      {
        uint64_t v197 = *(void *)(v195 + 2504);
        int v198 = v196 - 1;
        unsigned int v199 = v198 & ((v188 >> 4) ^ (v188 >> 9));
        uint64_t v200 = (void *)(v197 + 24 * v199);
        int v201 = (unsigned char *)*v200;
        if ((unsigned char *)*v200 == v188) {
          goto LABEL_385;
        }
        uint64_t v216 = 0;
        int v217 = 1;
        while (v201 != (unsigned char *)-4096)
        {
          if (v216) {
            BOOL v218 = 0;
          }
          else {
            BOOL v218 = v201 == (unsigned char *)-8192;
          }
          if (v218) {
            uint64_t v216 = v200;
          }
          unsigned int v219 = v199 + v217++;
          unsigned int v199 = v219 & v198;
          uint64_t v200 = (void *)(v197 + 24 * v199);
          int v201 = (unsigned char *)*v200;
          if ((unsigned char *)*v200 == v188) {
            goto LABEL_385;
          }
        }
        if (v216) {
          unint64_t v227 = v216;
        }
        else {
          unint64_t v227 = v200;
        }
      }
      else
      {
        unint64_t v227 = 0;
      }
      uint64_t v200 = sub_1CC5BF31C(v195 + 2504, (uint64_t)__p, (uint64_t *)__p, v227);
      unint64_t v228 = __p[0];
      v200[1] = 0;
      v200[2] = 0;
      void *v200 = v228;
LABEL_385:
      size_t v202 = v200[2];
      if (v202 > 0x7FFFFFFFFFFFFFF7) {
LABEL_1338:
      }
        abort();
      int v203 = (const void *)v200[1];
      if (v202 >= 0x17)
      {
        uint64_t v205 = (v202 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v202 | 7) != 0x17) {
          uint64_t v205 = v202 | 7;
        }
        int v838 = v185;
        int v206 = v186;
        uint64_t v207 = v187;
        uint64_t v208 = v182;
        uint64_t v209 = v184;
        uint64_t v210 = v205 + 1;
        uint64_t v204 = operator new(v205 + 1);
        unint64_t v211 = v210 | 0x8000000000000000;
        uint64_t v184 = v209;
        uint64_t v182 = v208;
        uint64_t v187 = v207;
        int v186 = v206;
        int v185 = v838;
        v884[0] = v211;
        __p[0] = v204;
        __p[1] = (void *)v202;
LABEL_392:
        memmove(v204, v203, v202);
        goto LABEL_393;
      }
      HIBYTE(v884[0]) = v200[2];
      uint64_t v204 = __p;
      if (v202) {
        goto LABEL_392;
      }
LABEL_393:
      *((unsigned char *)v204 + v202) = 0;
      __dst = (atomic_ullong *)__p;
      unsigned int v212 = sub_1CB8356D4((uint64_t)&v877, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&__dst);
      if (SHIBYTE(v884[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*((_DWORD *)v212 + 14)) {
        goto LABEL_411;
      }
      int v213 = *(llvm::raw_ostream **)v843;
      if ((v188[34] & 0x40) != 0)
      {
        uint64_t v220 = ***(void ***)v188;
        __p[0] = v188;
        int v221 = *(_DWORD *)(v220 + 2520);
        if (v221)
        {
          uint64_t v222 = *(void *)(v220 + 2504);
          int v223 = v221 - 1;
          unsigned int v224 = v223 & ((v188 >> 4) ^ (v188 >> 9));
          uint64_t v225 = (void *)(v222 + 24 * v224);
          int v226 = (unsigned char *)*v225;
          if ((unsigned char *)*v225 == v188)
          {
LABEL_409:
            size_t v214 = (unsigned char *)v225[1];
            uint64_t v215 = v225[2];
            goto LABEL_410;
          }
          unsigned int v229 = 0;
          int v230 = 1;
          while (v226 != (unsigned char *)-4096)
          {
            if (v229) {
              BOOL v231 = 0;
            }
            else {
              BOOL v231 = v226 == (unsigned char *)-8192;
            }
            if (v231) {
              unsigned int v229 = v225;
            }
            unsigned int v232 = v224 + v230++;
            unsigned int v224 = v232 & v223;
            uint64_t v225 = (void *)(v222 + 24 * v224);
            int v226 = (unsigned char *)*v225;
            if ((unsigned char *)*v225 == v188) {
              goto LABEL_409;
            }
          }
          if (v229) {
            unint64_t v233 = v229;
          }
          else {
            unint64_t v233 = v225;
          }
        }
        else
        {
          unint64_t v233 = 0;
        }
        uint64_t v225 = sub_1CC5BF31C(v220 + 2504, (uint64_t)__p, (uint64_t *)__p, v233);
        uint64_t v234 = __p[0];
        v225[1] = 0;
        v225[2] = 0;
        *uint64_t v225 = v234;
        goto LABEL_409;
      }
      size_t v214 = 0;
      uint64_t v215 = 0;
LABEL_410:
      sub_1CC205868(v213, 5u, v214, v215, 0);
      *((_DWORD *)v212 + 14) = v879[0];
LABEL_411:
      uint64_t v183 = *(void *)(v183 + 8);
      if (v183 == v182)
      {
        uint64_t v161 = *(void *)(v843 + 16);
        goto LABEL_439;
      }
    }
  }
  int v186 = 0;
  int v185 = 0;
  uint64_t v184 = 0;
LABEL_439:
  uint64_t v235 = v161 + 24;
  uint64_t v236 = *(void *)(v161 + 32);
  if (v236 == v161 + 24) {
    goto LABEL_515;
  }
  uint64_t v237 = &std::piecewise_construct;
  do
  {
    if (v236) {
      uint64_t v238 = (llvm::LLVMContext ***)(v236 - 56);
    }
    else {
      uint64_t v238 = 0;
    }
    unsigned int v239 = *((_DWORD *)v238 + 8);
    if ((v239 & 0x3F0000) != 0) {
      int v240 = 1;
    }
    else {
      int v240 = v185;
    }
    int v839 = v240;
    int v241 = (HIWORD(v239) & 0x3F) - 1;
    if ((v239 & 0x3F0000) == 0) {
      int v241 = 0;
    }
    if (v186 >= v241 && v185 != 0) {
      int v241 = v186;
    }
    if ((v239 & 0x3F0000) != 0) {
      int v186 = v241;
    }
    if ((v239 & 0x400000) == 0) {
      goto LABEL_485;
    }
    uint64_t v243 = *(void *)**v238;
    __p[0] = v238;
    int v244 = *(_DWORD *)(v243 + 2520);
    if (v244)
    {
      uint64_t v245 = *(void *)(v243 + 2504);
      int v246 = v244 - 1;
      unsigned int v247 = v246 & ((v238 >> 4) ^ (v238 >> 9));
      int v248 = (llvm::LLVMContext ****)(v245 + 24 * v247);
      int v249 = *v248;
      if (*v248 == v238) {
        goto LABEL_459;
      }
      int v263 = 0;
      int v264 = 1;
      while (v249 != (llvm::LLVMContext ***)-4096)
      {
        if (v263) {
          BOOL v265 = 0;
        }
        else {
          BOOL v265 = v249 == (llvm::LLVMContext ***)-8192;
        }
        if (v265) {
          int v263 = v248;
        }
        unsigned int v266 = v247 + v264++;
        unsigned int v247 = v266 & v246;
        int v248 = (llvm::LLVMContext ****)(v245 + 24 * v247);
        int v249 = *v248;
        if (*v248 == v238) {
          goto LABEL_459;
        }
      }
      if (v263) {
        int v283 = v263;
      }
      else {
        int v283 = v248;
      }
    }
    else
    {
      int v283 = 0;
    }
    int v248 = (llvm::LLVMContext ****)sub_1CC5BF31C(v243 + 2504, (uint64_t)__p, (uint64_t *)__p, v283);
    int v284 = (llvm::LLVMContext ***)__p[0];
    v248[1] = 0;
    v248[2] = 0;
    llvm::GlobalValue *v248 = v284;
LABEL_459:
    size_t v250 = (size_t)v248[2];
    if (v250 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_1338;
    }
    uint64_t v251 = (uint64_t)v237;
    BOOL v252 = v248[1];
    if (v250 >= 0x17)
    {
      uint64_t v254 = (v250 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v250 | 7) != 0x17) {
        uint64_t v254 = v250 | 7;
      }
      uint64_t v255 = v235;
      uint64_t v256 = v184;
      uint64_t v257 = v254 + 1;
      int v253 = operator new(v254 + 1);
      unint64_t v258 = v257 | 0x8000000000000000;
      uint64_t v184 = v256;
      uint64_t v235 = v255;
      v884[0] = v258;
      __p[0] = v253;
      __p[1] = (void *)v250;
LABEL_466:
      memmove(v253, v252, v250);
      goto LABEL_467;
    }
    HIBYTE(v884[0]) = v248[2];
    int v253 = __p;
    if (v250) {
      goto LABEL_466;
    }
LABEL_467:
    *((unsigned char *)v253 + v250) = 0;
    __dst = (atomic_ullong *)__p;
    uint64_t v237 = (void *)v251;
    int v259 = sub_1CB8356D4((uint64_t)&v877, (const void **)__p, v251, (_OWORD **)&__dst);
    if (SHIBYTE(v884[0]) < 0) {
      operator delete(__p[0]);
    }
    if (!*((_DWORD *)v259 + 14))
    {
      int v260 = *(llvm::raw_ostream **)v843;
      if ((*((unsigned char *)v238 + 34) & 0x40) == 0)
      {
        unsigned int v261 = 0;
        uint64_t v262 = 0;
LABEL_484:
        sub_1CC205868(v260, 5u, v261, v262, 0);
        *((_DWORD *)v259 + 14) = v879[0];
        goto LABEL_485;
      }
      uint64_t v267 = *(void *)**v238;
      __p[0] = v238;
      int v268 = *(_DWORD *)(v267 + 2520);
      if (v268)
      {
        uint64_t v269 = *(void *)(v267 + 2504);
        int v270 = v268 - 1;
        unsigned int v271 = v270 & ((v238 >> 4) ^ (v238 >> 9));
        long long v272 = (llvm::LLVMContext ****)(v269 + 24 * v271);
        long long v273 = *v272;
        if (*v272 == v238)
        {
LABEL_483:
          unsigned int v261 = v272[1];
          uint64_t v262 = (uint64_t)v272[2];
          goto LABEL_484;
        }
        uint64_t v285 = 0;
        int v286 = 1;
        while (v273 != (llvm::LLVMContext ***)-4096)
        {
          if (v285) {
            BOOL v287 = 0;
          }
          else {
            BOOL v287 = v273 == (llvm::LLVMContext ***)-8192;
          }
          if (v287) {
            uint64_t v285 = v272;
          }
          unsigned int v288 = v271 + v286++;
          unsigned int v271 = v288 & v270;
          long long v272 = (llvm::LLVMContext ****)(v269 + 24 * v271);
          long long v273 = *v272;
          if (*v272 == v238) {
            goto LABEL_483;
          }
        }
        if (v285) {
          int v289 = v285;
        }
        else {
          int v289 = v272;
        }
      }
      else
      {
        int v289 = 0;
      }
      long long v272 = (llvm::LLVMContext ****)sub_1CC5BF31C(v267 + 2504, (uint64_t)__p, (uint64_t *)__p, v289);
      unint64_t v290 = (llvm::LLVMContext ***)__p[0];
      v272[1] = 0;
      v272[2] = 0;
      *long long v272 = v290;
      goto LABEL_483;
    }
LABEL_485:
    if ((*((_WORD *)v238 + 9) & 0x4000) != 0)
    {
      __p[0] = llvm::LLVMContext::getGC(**v238, (const llvm::Function *)v238);
      unint64_t v274 = sub_1CBF64D34((uint64_t)&v880, (const void **)__p[0], (uint64_t)v237, (long long **)__p);
      if (!*((_DWORD *)v274 + 14))
      {
        int v275 = v274;
        size_t v276 = *(llvm::raw_ostream **)v843;
        GC = llvm::LLVMContext::getGC(**v238, (const llvm::Function *)v238);
        char v278 = *((unsigned char *)GC + 23);
        BOOL v279 = v278 < 0;
        if (v278 >= 0) {
          unint64_t v280 = GC;
        }
        else {
          unint64_t v280 = (unsigned char *)*GC;
        }
        uint64_t v281 = v278 & 0x7F;
        if (v279) {
          uint64_t v282 = GC[1];
        }
        else {
          uint64_t v282 = v281;
        }
        sub_1CC205868(v276, 0xBu, v280, v282, 0);
        *((_DWORD *)v275 + 14) = v882[0];
      }
    }
    uint64_t v236 = *(void *)(v236 + 8);
    int v185 = v839;
  }
  while (v236 != v235);
  uint64_t v161 = *(void *)(v843 + 16);
LABEL_515:
  int v291 = (llvm::ValueEnumerator *)(v843 + 24);
  if (*(void *)(v161 + 8) == v161 + 8)
  {
    unsigned int v831 = 0;
    uint64_t v298 = v843;
  }
  else
  {
    uint64_t v292 = (char *)operator new(0x228uLL);
    *(void *)uint64_t v292 = &unk_1F2608A00;
    *((void *)v292 + 1) = 0;
    *(_OWORD *)(v292 + 184) = 0u;
    *(_OWORD *)(v292 + 200) = 0u;
    *(_OWORD *)(v292 + 216) = 0u;
    *(_OWORD *)(v292 + 232) = 0u;
    *(_OWORD *)(v292 + 248) = 0u;
    *(_OWORD *)(v292 + 264) = 0u;
    *(_OWORD *)(v292 + 280) = 0u;
    *(_OWORD *)(v292 + 296) = 0u;
    *(_OWORD *)(v292 + 312) = 0u;
    *(_OWORD *)(v292 + 328) = 0u;
    *(_OWORD *)(v292 + 344) = 0u;
    *(_OWORD *)(v292 + 360) = 0u;
    *(_OWORD *)(v292 + 376) = 0u;
    *(_OWORD *)(v292 + 392) = 0u;
    *(_OWORD *)(v292 + 408) = 0u;
    *(_OWORD *)(v292 + 424) = 0u;
    *(_OWORD *)(v292 + 440) = 0u;
    *(_OWORD *)(v292 + 456) = 0u;
    *(_OWORD *)(v292 + 472) = 0u;
    *(_OWORD *)(v292 + 488) = 0u;
    *(_OWORD *)(v292 + 504) = 0u;
    *(_OWORD *)(v292 + 520) = 0u;
    *(_OWORD *)(v292 + 536) = 0u;
    *(_OWORD *)(v292 + 40) = xmmword_1CFAC66C0;
    *((void *)v292 + 2) = 0;
    *((void *)v292 + 3) = v292 + 40;
    *(_OWORD *)(v292 + 56) = xmmword_1CFAC4740;
    *(_OWORD *)(v292 + 72) = xmmword_1CFAC4740;
    *((void *)v292 + 11) = 32 - __clz(v184);
    *((_OWORD *)v292 + 6) = xmmword_1CFAC66D0;
    *((_OWORD *)v292 + 7) = xmmword_1CFAC66E0;
    *((_OWORD *)v292 + 8) = xmmword_1CFAC66F0;
    *((void *)v292 + 18) = 2;
    int32x2_t v293 = vdup_n_s32(v185 == 0);
    v294.i64[0] = v293.u32[0];
    v294.i64[1] = v293.u32[1];
    int8x16_t v295 = (int8x16_t)vdupq_n_s64(2uLL);
    v296.i64[1] = v295.i64[1];
    v296.i64[0] = 32 - __clz(v186 + 1);
    *(int8x16_t *)(v292 + 152) = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v294, 0x3FuLL)), (int8x16_t)xmmword_1CFAC6680, v296);
    int32x2_t v297 = vdup_n_s32(*(void *)v879 == 0);
    v294.i64[0] = v297.u32[0];
    v294.i64[1] = v297.u32[1];
    v295.i64[0] = 32 - __clz(v879[0]);
    *(int8x16_t *)(v292 + 168) = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v294, 0x3FuLL)), (int8x16_t)xmmword_1CFAC6680, v295);
    *((void *)v292 + 4) = 0x2000000009;
    uint64_t v298 = v843;
    int v299 = *(llvm::raw_ostream **)v843;
    uint64_t v873 = (std::__shared_weak_count *)(v292 + 24);
    uint64_t v874 = (std::__shared_weak_count *)v292;
    unsigned int v831 = sub_1CC1F7CDC((uint64_t)v299, (uint64_t)&v873);
    int v300 = v874;
    if (v874 && !atomic_fetch_add(&v874->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
      std::__shared_weak_count::__release_weak(v300);
    }
  }
  __p[0] = v884;
  __p[1] = (void *)0x4000000000;
  uint64_t v301 = *(void *)(v298 + 16);
  uint64_t v304 = *(unsigned __int8 **)(v301 + 192);
  uint64_t v303 = (unsigned __int8 *)(v301 + 192);
  uint64_t v302 = v304;
  signed __int8 v305 = v303[23];
  int v306 = v305;
  if (v305 >= 0) {
    uint64_t v302 = v303;
  }
  uint64_t v307 = *((void *)v303 + 1);
  uint64_t v308 = v305 & 0x7F;
  if (v306 >= 0) {
    uint64_t v307 = v308;
  }
  if (v307)
  {
    LOBYTE(v309) = 1;
    uint64_t v310 = 2;
    uint64_t v311 = 8;
    while (1)
    {
      int v312 = *v302;
      BOOL v313 = (v312 - 48) >= 0xA && (v312 & 0xFFFFFFDF) - 65 >= 0x1A;
      BOOL v314 = !v313 || v312 == 46;
      BOOL v315 = v314 || v312 == 95;
      BOOL v316 = v315;
      BOOL v309 = v309 && v316;
      if ((v312 & 0x80) != 0) {
        break;
      }
      ++v302;
      if (!--v307)
      {
        if (v309) {
          goto LABEL_544;
        }
        uint64_t v310 = 2;
        uint64_t v311 = 7;
        break;
      }
    }
  }
  else
  {
LABEL_544:
    uint64_t v311 = 0;
    uint64_t v310 = 8;
  }
  unsigned int v317 = (char *)operator new(0x228uLL);
  *(void *)unsigned int v317 = &unk_1F2608A00;
  *((void *)v317 + 1) = 0;
  *(_OWORD *)(v317 + 88) = 0u;
  *(_OWORD *)(v317 + 104) = 0u;
  *(_OWORD *)(v317 + 120) = 0u;
  *(_OWORD *)(v317 + 136) = 0u;
  *(_OWORD *)(v317 + 152) = 0u;
  *(_OWORD *)(v317 + 168) = 0u;
  *(_OWORD *)(v317 + 184) = 0u;
  *(_OWORD *)(v317 + 200) = 0u;
  *(_OWORD *)(v317 + 216) = 0u;
  *(_OWORD *)(v317 + 232) = 0u;
  *(_OWORD *)(v317 + 248) = 0u;
  *(_OWORD *)(v317 + 264) = 0u;
  *(_OWORD *)(v317 + 280) = 0u;
  *(_OWORD *)(v317 + 296) = 0u;
  *(_OWORD *)(v317 + 312) = 0u;
  *(_OWORD *)(v317 + 328) = 0u;
  *(_OWORD *)(v317 + 344) = 0u;
  *(_OWORD *)(v317 + 360) = 0u;
  *(_OWORD *)(v317 + 376) = 0u;
  *(_OWORD *)(v317 + 392) = 0u;
  *(_OWORD *)(v317 + 408) = 0u;
  *(_OWORD *)(v317 + 424) = 0u;
  *(_OWORD *)(v317 + 440) = 0u;
  *(_OWORD *)(v317 + 456) = 0u;
  *(_OWORD *)(v317 + 472) = 0u;
  *(_OWORD *)(v317 + 488) = 0u;
  *(_OWORD *)(v317 + 504) = 0u;
  *(_OWORD *)(v317 + 520) = 0u;
  *(_OWORD *)(v317 + 536) = 0u;
  *(_OWORD *)(v317 + 40) = xmmword_1CFAC6700;
  *((void *)v317 + 2) = 0;
  *((void *)v317 + 3) = v317 + 40;
  *(_OWORD *)(v317 + 56) = xmmword_1CFAC6570;
  uint64_t v318 = *(llvm::raw_ostream **)v298;
  *((void *)v317 + 9) = v311;
  *((void *)v317 + 10) = v310;
  *((void *)v317 + 4) = 0x2000000003;
  uint64_t v871 = (std::__shared_weak_count *)(v317 + 24);
  uint64_t v872 = (std::__shared_weak_count *)v317;
  unsigned int v319 = sub_1CC1F7CDC((uint64_t)v318, (uint64_t)&v871);
  int v320 = v872;
  if (v872 && !atomic_fetch_add(&v872->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
    std::__shared_weak_count::__release_weak(v320);
  }
  uint64_t v321 = *(void *)(v298 + 16);
  if (*(char *)(v321 + 215) < 0)
  {
    uint64_t v322 = *(unsigned __int8 **)(v321 + 192);
    uint64_t v323 = *(void *)(v321 + 200);
    if (!v323) {
      goto LABEL_558;
    }
  }
  else
  {
    uint64_t v322 = (unsigned __int8 *)(v321 + 192);
    uint64_t v323 = *(unsigned __int8 *)(v321 + 215);
    if (!*(unsigned char *)(v321 + 215)) {
      goto LABEL_558;
    }
  }
  unsigned int v324 = __p[1];
  do
  {
    if (v324 >= HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__p[0] + v324) = *v322;
    unsigned int v324 = ++LODWORD(__p[1]);
    ++v322;
    --v323;
  }
  while (v323);
LABEL_558:
  sub_1CC2059BC(*(llvm::raw_ostream **)v298, 0x10u, (uint64_t)__p, v319);
  LODWORD(__p[1]) = 0;
  int v325 = *(void **)(v298 + 16);
  uint64_t v326 = v325 + 1;
  uint64_t v327 = (void *)v325[2];
  if (v327 == v325 + 1) {
    goto LABEL_692;
  }
  int v328 = (uint64_t *)(v298 + 48);
  uint64_t v840 = (uint64_t *)(v298 + 344);
  uint64_t v329 = (void *)(v298 + 152);
  while (2)
  {
    if (v327) {
      int v330 = (uint64_t ***)(v327 - 7);
    }
    else {
      int v330 = 0;
    }
    unsigned int v331 = v330 >> 4;
    if ((*((unsigned char *)v330 + 23) & 0x10) != 0)
    {
      uint64_t v332 = ***v330;
      uint64_t v333 = *(void *)(v332 + 152);
      uint64_t v334 = *(unsigned int *)(v332 + 168);
      if (!v334) {
        goto LABEL_570;
      }
      LODWORD(v335) = (v334 - 1) & (v331 ^ (v330 >> 9));
      int v336 = (uint64_t ****)(v333 + 16 * v335);
      uint64_t v337 = *v336;
      if (*v336 != v330)
      {
        int v338 = 1;
        while (v337 != (uint64_t ***)-4096)
        {
          int v339 = v335 + v338++;
          uint64_t v335 = v339 & (v334 - 1);
          uint64_t v337 = *(uint64_t ****)(v333 + 16 * v335);
          if (v337 == v330)
          {
            int v336 = (uint64_t ****)(v333 + 16 * v335);
            goto LABEL_571;
          }
        }
LABEL_570:
        int v336 = (uint64_t ****)(v333 + 16 * v334);
      }
LABEL_571:
      uint64_t v340 = v336[1];
      unint64_t v343 = (unint64_t)*v340;
      int v341 = (char *)(v340 + 2);
      unint64_t v342 = v343;
    }
    else
    {
      unint64_t v342 = 0;
      int v341 = &byte_1CFBCE98E;
    }
    int v344 = sub_1CC20839C(v298, v341, v342);
    if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__p[0] + LODWORD(__p[1])) = v344;
    unsigned int v345 = ++LODWORD(__p[1]);
    if ((*((unsigned char *)v330 + 23) & 0x10) != 0)
    {
      uint64_t v346 = ***v330;
      uint64_t v347 = *(void *)(v346 + 152);
      uint64_t v348 = *(unsigned int *)(v346 + 168);
      if (!v348) {
        goto LABEL_580;
      }
      LODWORD(v349) = (v348 - 1) & (v331 ^ (v330 >> 9));
      uint64_t v350 = v347 + 16 * v349;
      uint64_t v351 = *(uint64_t ****)v350;
      if (*(uint64_t ****)v350 != v330)
      {
        int v352 = 1;
        while (v351 != (uint64_t ***)-4096)
        {
          int v353 = v349 + v352++;
          uint64_t v349 = v353 & (v348 - 1);
          uint64_t v351 = *(uint64_t ****)(v347 + 16 * v349);
          if (v351 == v330)
          {
            uint64_t v350 = v347 + 16 * v349;
            goto LABEL_581;
          }
        }
LABEL_580:
        uint64_t v350 = v347 + 16 * v348;
      }
LABEL_581:
      uint64_t v354 = **(void **)(v350 + 8);
    }
    else
    {
      LODWORD(v354) = 0;
    }
    if (v345 >= HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__p[0] + v345) = v354;
    ++LODWORD(__p[1]);
    __dst = (atomic_ullong *)v330[3];
    *(void *)&long long v875 = 0;
    if (sub_1CBFA3AF4(v328, &__dst, &v875)) {
      uint64_t v355 = v875;
    }
    else {
      uint64_t v355 = *(void *)(v298 + 48) + 16 * *(unsigned int *)(v298 + 64);
    }
    if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__p[0] + LODWORD(__p[1])) = *(_DWORD *)(v355 + 8) - 1;
    unsigned int v356 = LODWORD(__p[1]) + 1;
    LODWORD(__p[1]) = v356;
    if (v356 >= HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__p[0] + v356) = (_BYTE)v330[10] & 1 | (4 * (*((_DWORD *)*v330 + 2) >> 8)) | 2;
    unsigned int v357 = ++LODWORD(__p[1]);
    if (v327 && *((unsigned char *)v330 + 16) == 3)
    {
      if ((*((_DWORD *)v330 + 5) & 0x7FFFFFF) == 0) {
        goto LABEL_591;
      }
LABEL_595:
      int v358 = llvm::ValueEnumerator::getValueID((uint64_t)v291, (uint64_t)*(v330 - 4)) + 1;
      unsigned int v357 = __p[1];
    }
    else
    {
      if (*((unsigned char *)v330 + 16) || v330[9] != (uint64_t **)(v330 + 9) || (*((unsigned char *)v330 + 34) & 0x80) != 0) {
        goto LABEL_595;
      }
LABEL_591:
      int v358 = 0;
    }
    if (v357 >= HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__p[0] + v357) = v358;
    unsigned int v359 = LODWORD(__p[1]) + 1;
    LODWORD(__p[1]) = v359;
    if (v359 >= HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__p[0] + v359) = dword_1CFAC680C[v330[4] & 0xF];
    char v360 = *((_WORD *)v330 + 17);
    unsigned __int8 v361 = (v360 & 0x3F) - 1;
    BOOL v192 = (v360 & 0x3F) == 0;
    unsigned int v362 = ++LODWORD(__p[1]);
    if (v192) {
      int v363 = 0;
    }
    else {
      int v363 = v361 + 1;
    }
    if (v362 >= HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__p[0] + v362) = v363;
    unsigned int v364 = ++LODWORD(__p[1]);
    if ((*((unsigned char *)v330 + 34) & 0x40) == 0)
    {
      if (v364 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v364) = 0;
      ++LODWORD(__p[1]);
      goto LABEL_618;
    }
    uint64_t v365 = ***v330;
    __dst = (atomic_ullong *)v330;
    int v366 = *(_DWORD *)(v365 + 2520);
    if (v366)
    {
      uint64_t v367 = *(void *)(v365 + 2504);
      int v368 = v366 - 1;
      unsigned int v369 = v368 & (v331 ^ (v330 >> 9));
      int v370 = (uint64_t ****)(v367 + 24 * v369);
      unint64_t v371 = *v370;
      if (*v370 == v330) {
        goto LABEL_607;
      }
      unsigned int v399 = 0;
      int v400 = 1;
      while (v371 != (uint64_t ***)-4096)
      {
        if (v399) {
          BOOL v401 = 0;
        }
        else {
          BOOL v401 = v371 == (uint64_t ***)-8192;
        }
        if (v401) {
          unsigned int v399 = v370;
        }
        unsigned int v402 = v369 + v400++;
        unsigned int v369 = v402 & v368;
        int v370 = (uint64_t ****)(v367 + 24 * v369);
        unint64_t v371 = *v370;
        if (*v370 == v330) {
          goto LABEL_607;
        }
      }
      if (v399) {
        uint64_t v403 = v399;
      }
      else {
        uint64_t v403 = v370;
      }
    }
    else
    {
      uint64_t v403 = 0;
    }
    int v370 = (uint64_t ****)sub_1CC5BF31C(v365 + 2504, (uint64_t)&__dst, (uint64_t *)&__dst, v403);
    int v404 = (long long *)__dst;
    v370[1] = 0;
    v370[2] = 0;
    char *v370 = (uint64_t ***)v404;
LABEL_607:
    size_t v372 = (size_t)v370[2];
    if (v372 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_1338;
    }
    uint64_t v373 = v370[1];
    if (v372 >= 0x17)
    {
      uint64_t v375 = (v372 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v372 | 7) != 0x17) {
        uint64_t v375 = v372 | 7;
      }
      uint64_t v376 = v375 + 1;
      p_dst = (long long *)operator new(v375 + 1);
      int v867 = (atomic_ullong *)v372;
      unint64_t v868 = v376 | 0x8000000000000000;
      __dst = (atomic_ullong *)p_dst;
    }
    else
    {
      HIBYTE(v868) = v370[2];
      p_dst = (long long *)&__dst;
      if (!v372) {
        goto LABEL_615;
      }
    }
    memmove(p_dst, v373, v372);
LABEL_615:
    uint64_t v298 = v843;
    *((unsigned char *)p_dst + v372) = 0;
    *(void *)&long long v875 = &__dst;
    int v377 = *((_DWORD *)sub_1CB8356D4((uint64_t)&v877, (const void **)&__dst, (uint64_t)&std::piecewise_construct, (_OWORD **)&v875)+ 14);
    if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v291 = (llvm::ValueEnumerator *)(v843 + 24);
    *((_DWORD *)__p[0] + LODWORD(__p[1])) = v377;
    ++LODWORD(__p[1]);
    if (SHIBYTE(v868) < 0) {
      operator delete(__dst);
    }
LABEL_618:
    unsigned int v378 = *((_DWORD *)v330 + 8);
    if ((v378 & 0x1CF0) != 0
      || v330[4] & 0x300 | (_BYTE)v330[10] & 2
      || v330[6]
      || (v378 & 0xC000) != 0
      || (unsigned int v398 = v831, v330[9]))
    {
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + LODWORD(__p[1])) = (v378 >> 4) & 3;
      unsigned int v379 = LODWORD(__p[1]) + 1;
      LODWORD(__p[1]) = v379;
      if (v379 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v379) = (*((_DWORD *)v330 + 8) >> 10) & 7;
      unsigned int v380 = LODWORD(__p[1]) + 1;
      LODWORD(__p[1]) = v380;
      if (v380 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v380) = dword_1CFAC6800[*((_DWORD *)v330 + 8) >> 6];
      unsigned int v381 = LODWORD(__p[1]) + 1;
      LODWORD(__p[1]) = v381;
      if (v381 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v381) = (*((unsigned __int8 *)v330 + 80) >> 1) & 1;
      unsigned int v382 = LODWORD(__p[1]) + 1;
      LODWORD(__p[1]) = v382;
      if (v382 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v382) = (*((_DWORD *)v330 + 8) >> 8) & 3;
      unsigned int v383 = ++LODWORD(__p[1]);
      int v384 = v330[6];
      if (!v384) {
        goto LABEL_638;
      }
      int v385 = (void *)*v329;
      if (!*v329) {
        goto LABEL_638;
      }
      char v386 = v329;
      do
      {
        unint64_t v387 = v385[4];
        BOOL v388 = v387 >= (unint64_t)v384;
        if (v387 >= (unint64_t)v384) {
          char v389 = v385;
        }
        else {
          char v389 = v385 + 1;
        }
        if (v388) {
          char v386 = v385;
        }
        int v385 = (void *)*v389;
      }
      while (*v389);
      if (v386 != v329 && v386[4] <= (unint64_t)v384) {
        int v390 = *((_DWORD *)v386 + 10);
      }
      else {
LABEL_638:
      }
        int v390 = 0;
      if (v383 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v383) = v390;
      ++LODWORD(__p[1]);
      *(void *)&long long v875 = sub_1CC208414((uint64_t)v330, -1);
      if ((void)v875)
      {
        __dst = 0;
        if (sub_1CC208488(v840, &v875, &__dst)) {
          uint64_t v391 = (long long *)__dst;
        }
        else {
          uint64_t v391 = (long long *)(*(void *)(v298 + 344) + 16 * *(unsigned int *)(v298 + 360));
        }
        int v392 = *((_DWORD *)v391 + 2);
      }
      else
      {
        int v392 = 0;
      }
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + LODWORD(__p[1])) = v392;
      unsigned int v393 = LODWORD(__p[1]) + 1;
      LODWORD(__p[1]) = v393;
      if (v393 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v393) = (*((_DWORD *)v330 + 8) >> 14) & 1;
      ++LODWORD(__p[1]);
      Partitioint n = (char *)llvm::GlobalValue::getPartition((llvm::GlobalValue *)v330);
      int v396 = sub_1CC20839C(v298, Partition, v395);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + LODWORD(__p[1])) = v396;
      ++LODWORD(__p[1]);
      llvm::GlobalValue::getPartition((llvm::GlobalValue *)v330);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v398 = 0;
      *((_DWORD *)__p[0] + LODWORD(__p[1])) = v397;
      ++LODWORD(__p[1]);
    }
    sub_1CC2059BC(*(llvm::raw_ostream **)v298, 7u, (uint64_t)__p, v398);
    LODWORD(__p[1]) = 0;
    uint64_t v327 = (void *)v327[1];
    if (v327 != v326) {
      continue;
    }
    break;
  }
  int v325 = *(void **)(v298 + 16);
LABEL_692:
  unsigned int v405 = v325 + 3;
  unsigned int v406 = (void *)v325[4];
  if (v406 != v325 + 3)
  {
    uint64_t v841 = (uint64_t *)(v298 + 48);
    uint64_t v832 = (uint64_t *)(v298 + 344);
    unsigned int v407 = (void *)(v298 + 152);
    while (1)
    {
      unint64_t v408 = v406 ? (llvm::LLVMContext ***)(v406 - 7) : 0;
      unsigned int v409 = v408 >> 4;
      if ((*((unsigned char *)v408 + 23) & 0x10) != 0) {
        break;
      }
      unint64_t v420 = 0;
      int v419 = &byte_1CFBCE98E;
LABEL_706:
      int v422 = sub_1CC20839C(v298, v419, v420);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + LODWORD(__p[1])) = v422;
      unsigned int v423 = ++LODWORD(__p[1]);
      if ((*((unsigned char *)v408 + 23) & 0x10) != 0)
      {
        uint64_t v424 = *(void *)**v408;
        uint64_t v425 = *(void *)(v424 + 152);
        uint64_t v426 = *(unsigned int *)(v424 + 168);
        if (!v426) {
          goto LABEL_714;
        }
        LODWORD(v427) = (v426 - 1) & (v409 ^ (v408 >> 9));
        uint64_t v428 = v425 + 16 * v427;
        uint64_t v429 = *(llvm::LLVMContext ****)v428;
        if (*(llvm::LLVMContext ****)v428 != v408)
        {
          int v430 = 1;
          while (v429 != (llvm::LLVMContext ***)-4096)
          {
            int v431 = v427 + v430++;
            uint64_t v427 = v431 & (v426 - 1);
            uint64_t v429 = *(llvm::LLVMContext ****)(v425 + 16 * v427);
            if (v429 == v408)
            {
              uint64_t v428 = v425 + 16 * v427;
              goto LABEL_715;
            }
          }
LABEL_714:
          uint64_t v428 = v425 + 16 * v426;
        }
LABEL_715:
        uint64_t v432 = **(void **)(v428 + 8);
        goto LABEL_716;
      }
      LODWORD(v432) = 0;
LABEL_716:
      if (v423 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v423) = v432;
      ++LODWORD(__p[1]);
      __dst = (atomic_ullong *)v408[3];
      *(void *)&long long v875 = 0;
      if (sub_1CBFA3AF4(v841, &__dst, &v875)) {
        uint64_t v433 = v875;
      }
      else {
        uint64_t v433 = *(void *)(v298 + 48) + 16 * *(unsigned int *)(v298 + 64);
      }
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + LODWORD(__p[1])) = *(_DWORD *)(v433 + 8) - 1;
      unsigned int v434 = LODWORD(__p[1]) + 1;
      LODWORD(__p[1]) = v434;
      if (v434 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v434) = (*((unsigned __int16 *)v408 + 9) >> 4) & 0x3FF;
      unsigned int v435 = ++LODWORD(__p[1]);
      if (v406 && *((unsigned char *)v408 + 16) == 3)
      {
        BOOL v436 = (*((_DWORD *)v408 + 5) & 0x7FFFFFF) == 0;
      }
      else
      {
        if (*((unsigned char *)v408 + 16) || v408[9] != (llvm::LLVMContext **)(v408 + 9))
        {
          int v437 = 0;
          goto LABEL_731;
        }
        BOOL v436 = (*((unsigned char *)v408 + 34) & 0x80) == 0;
      }
      int v437 = v436;
LABEL_731:
      if (v435 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v435) = v437;
      unsigned int v438 = LODWORD(__p[1]) + 1;
      LODWORD(__p[1]) = v438;
      if (v438 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v438) = dword_1CFAC680C[v408[4] & 0xF];
      unsigned int v439 = ++LODWORD(__p[1]);
      *(void *)&long long v875 = v408[14];
      if ((void)v875)
      {
        __dst = 0;
        if (sub_1CC208488(v832, &v875, &__dst)) {
          unint64_t v440 = (long long *)__dst;
        }
        else {
          unint64_t v440 = (long long *)(*(void *)(v298 + 344) + 16 * *(unsigned int *)(v298 + 360));
        }
        int v441 = *((_DWORD *)v440 + 2);
        unsigned int v439 = __p[1];
      }
      else
      {
        int v441 = 0;
      }
      if (v439 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v439) = v441;
      char v442 = *((_WORD *)v408 + 17);
      unsigned __int8 v443 = (v442 & 0x3F) - 1;
      BOOL v192 = (v442 & 0x3F) == 0;
      unsigned int v444 = ++LODWORD(__p[1]);
      if (v192) {
        int v445 = 0;
      }
      else {
        int v445 = v443 + 1;
      }
      if (v444 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v444) = v445;
      unsigned int v446 = ++LODWORD(__p[1]);
      if ((*((unsigned char *)v408 + 34) & 0x40) != 0)
      {
        uint64_t v448 = *(void *)**v408;
        __dst = (atomic_ullong *)v408;
        int v449 = *(_DWORD *)(v448 + 2520);
        if (v449)
        {
          uint64_t v450 = *(void *)(v448 + 2504);
          int v451 = v449 - 1;
          unsigned int v452 = v451 & (v409 ^ (v408 >> 9));
          int v453 = (llvm::LLVMContext ****)(v450 + 24 * v452);
          int v454 = *v453;
          if (*v453 == v408) {
            goto LABEL_749;
          }
          unint64_t v492 = 0;
          int v493 = 1;
          while (v454 != (llvm::LLVMContext ***)-4096)
          {
            if (v492) {
              BOOL v494 = 0;
            }
            else {
              BOOL v494 = v454 == (llvm::LLVMContext ***)-8192;
            }
            if (v494) {
              unint64_t v492 = v453;
            }
            unsigned int v495 = v452 + v493++;
            unsigned int v452 = v495 & v451;
            int v453 = (llvm::LLVMContext ****)(v450 + 24 * v452);
            int v454 = *v453;
            if (*v453 == v408) {
              goto LABEL_749;
            }
          }
          if (v492) {
            char v496 = v492;
          }
          else {
            char v496 = v453;
          }
        }
        else
        {
          char v496 = 0;
        }
        int v453 = (llvm::LLVMContext ****)sub_1CC5BF31C(v448 + 2504, (uint64_t)&__dst, (uint64_t *)&__dst, v496);
        char v497 = (long long *)__dst;
        v453[1] = 0;
        v453[2] = 0;
        *int v453 = (llvm::LLVMContext ***)v497;
LABEL_749:
        size_t v455 = (size_t)v453[2];
        if (v455 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_1338;
        }
        int v456 = v453[1];
        if (v455 >= 0x17)
        {
          uint64_t v458 = (v455 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v455 | 7) != 0x17) {
            uint64_t v458 = v455 | 7;
          }
          uint64_t v459 = v458 + 1;
          uint64_t v457 = (long long *)operator new(v458 + 1);
          unint64_t v460 = v459 | 0x8000000000000000;
          uint64_t v298 = v843;
          int v867 = (atomic_ullong *)v455;
          unint64_t v868 = v460;
          __dst = (atomic_ullong *)v457;
        }
        else
        {
          HIBYTE(v868) = v453[2];
          uint64_t v457 = (long long *)&__dst;
          if (!v455) {
            goto LABEL_757;
          }
        }
        memmove(v457, v456, v455);
LABEL_757:
        int v291 = (llvm::ValueEnumerator *)(v843 + 24);
        *((unsigned char *)v457 + v455) = 0;
        *(void *)&long long v875 = &__dst;
        int v461 = *((_DWORD *)sub_1CB8356D4((uint64_t)&v877, (const void **)&__dst, (uint64_t)&std::piecewise_construct, (_OWORD **)&v875)+ 14);
        if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)__p[0] + LODWORD(__p[1])) = v461;
        unsigned int v447 = ++LODWORD(__p[1]);
        if (SHIBYTE(v868) < 0)
        {
          operator delete(__dst);
          unsigned int v447 = __p[1];
        }
        goto LABEL_760;
      }
      if (v446 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v446) = 0;
      unsigned int v447 = ++LODWORD(__p[1]);
LABEL_760:
      if (v447 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v447) = (*((_DWORD *)v408 + 8) >> 4) & 3;
      unsigned int v462 = ++LODWORD(__p[1]);
      if ((*((_WORD *)v408 + 9) & 0x4000) != 0)
      {
        __dst = llvm::LLVMContext::getGC(**v408, (const llvm::Function *)v408);
        int v463 = *((_DWORD *)sub_1CBF64D34((uint64_t)&v880, (const void **)__dst, (uint64_t)&std::piecewise_construct, (long long **)&__dst)+ 14);
        unsigned int v462 = __p[1];
      }
      else
      {
        int v463 = 0;
      }
      if (v462 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v462) = v463;
      unsigned int v464 = LODWORD(__p[1]) + 1;
      LODWORD(__p[1]) = v464;
      if (v464 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v464) = dword_1CFAC6800[*((_DWORD *)v408 + 8) >> 6];
      unsigned int v465 = ++LODWORD(__p[1]);
      if ((*((_WORD *)v408 + 9) & 4) != 0)
      {
        int v467 = *((_DWORD *)v408 + 5);
        if ((v467 & 0x40000000) != 0) {
          long long v468 = (llvm::LLVMContext ***)*(v408 - 1);
        }
        else {
          long long v468 = &v408[-4 * (v467 & 0x7FFFFFF)];
        }
        int v466 = llvm::ValueEnumerator::getValueID((uint64_t)v291, (uint64_t)v468[8]) + 1;
        unsigned int v465 = __p[1];
      }
      else
      {
        int v466 = 0;
      }
      if (v465 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v465) = v466;
      unsigned int v469 = LODWORD(__p[1]) + 1;
      LODWORD(__p[1]) = v469;
      if (v469 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v469) = (*((_DWORD *)v408 + 8) >> 8) & 3;
      unsigned int v470 = ++LODWORD(__p[1]);
      int v471 = v408[6];
      if (!v471) {
        goto LABEL_786;
      }
      int v472 = (void *)*v407;
      if (!*v407) {
        goto LABEL_786;
      }
      uint64_t v473 = v407;
      do
      {
        unint64_t v474 = v472[4];
        BOOL v475 = v474 >= (unint64_t)v471;
        if (v474 >= (unint64_t)v471) {
          uint64_t v476 = v472;
        }
        else {
          uint64_t v476 = v472 + 1;
        }
        if (v475) {
          uint64_t v473 = v472;
        }
        int v472 = (void *)*v476;
      }
      while (*v476);
      if (v473 != v407 && v473[4] <= (unint64_t)v471) {
        int v477 = *((_DWORD *)v473 + 10);
      }
      else {
LABEL_786:
      }
        int v477 = 0;
      if (v470 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v470) = v477;
      unsigned int v478 = ++LODWORD(__p[1]);
      if ((*((_WORD *)v408 + 9) & 2) != 0)
      {
        int v480 = *((_DWORD *)v408 + 5);
        if ((v480 & 0x40000000) != 0) {
          uint64_t v481 = (llvm::LLVMContext ***)*(v408 - 1);
        }
        else {
          uint64_t v481 = &v408[-4 * (v480 & 0x7FFFFFF)];
        }
        int v479 = llvm::ValueEnumerator::getValueID((uint64_t)v291, (uint64_t)v481[4]) + 1;
        unsigned int v478 = __p[1];
      }
      else
      {
        int v479 = 0;
      }
      if (v478 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v478) = v479;
      unsigned int v482 = ++LODWORD(__p[1]);
      if ((*((_WORD *)v408 + 9) & 8) != 0)
      {
        int v484 = *((_DWORD *)v408 + 5);
        if ((v484 & 0x40000000) != 0) {
          int v485 = (uint64_t *)*(v408 - 1);
        }
        else {
          int v485 = (uint64_t *)&v408[-4 * (v484 & 0x7FFFFFF)];
        }
        int v483 = llvm::ValueEnumerator::getValueID((uint64_t)v291, *v485) + 1;
        unsigned int v482 = __p[1];
      }
      else
      {
        int v483 = 0;
      }
      if (v482 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v482) = v483;
      unsigned int v486 = LODWORD(__p[1]) + 1;
      LODWORD(__p[1]) = v486;
      if (v486 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v486) = (*((_DWORD *)v408 + 8) >> 14) & 1;
      unsigned int v487 = LODWORD(__p[1]) + 1;
      LODWORD(__p[1]) = v487;
      if (v487 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v487) = *((_DWORD *)*v408 + 2) >> 8;
      ++LODWORD(__p[1]);
      int v488 = (char *)llvm::GlobalValue::getPartition((llvm::GlobalValue *)v408);
      int v490 = sub_1CC20839C(v298, v488, v489);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + LODWORD(__p[1])) = v490;
      ++LODWORD(__p[1]);
      llvm::GlobalValue::getPartition((llvm::GlobalValue *)v408);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + LODWORD(__p[1])) = v491;
      ++LODWORD(__p[1]);
      sub_1CC2059BC(*(llvm::raw_ostream **)v298, 8u, (uint64_t)__p, 0);
      LODWORD(__p[1]) = 0;
      unsigned int v406 = (void *)v406[1];
      if (v406 == v405)
      {
        int v325 = *(void **)(v298 + 16);
        goto LABEL_848;
      }
    }
    uint64_t v410 = *(void *)**v408;
    uint64_t v411 = *(void *)(v410 + 152);
    uint64_t v412 = *(unsigned int *)(v410 + 168);
    if (v412)
    {
      LODWORD(v413) = (v412 - 1) & (v409 ^ (v408 >> 9));
      uint64_t v414 = (llvm::LLVMContext ****)(v411 + 16 * v413);
      uint64_t v415 = *v414;
      if (*v414 != v408)
      {
        int v416 = 1;
        while (v415 != (llvm::LLVMContext ***)-4096)
        {
          int v417 = v413 + v416++;
          uint64_t v413 = v417 & (v412 - 1);
          uint64_t v415 = *(llvm::LLVMContext ****)(v411 + 16 * v413);
          if (v415 == v408)
          {
            uint64_t v414 = (llvm::LLVMContext ****)(v411 + 16 * v413);
            goto LABEL_705;
          }
        }
        goto LABEL_704;
      }
    }
    else
    {
LABEL_704:
      uint64_t v414 = (llvm::LLVMContext ****)(v411 + 16 * v412);
    }
LABEL_705:
    char v418 = v414[1];
    unint64_t v421 = (unint64_t)*v418;
    int v419 = (char *)(v418 + 2);
    unint64_t v420 = v421;
    goto LABEL_706;
  }
LABEL_848:
  uint64_t v498 = v325 + 5;
  char v499 = (void *)v325[6];
  if (v499 == v325 + 5) {
    goto LABEL_903;
  }
  while (2)
  {
    if (v499) {
      int v500 = (llvm::GlobalValue *)(v499 - 6);
    }
    else {
      int v500 = 0;
    }
    unsigned int v501 = v500 >> 4;
    if ((*((unsigned char *)v500 + 23) & 0x10) != 0)
    {
      uint64_t v502 = ***(void ***)v500;
      uint64_t v503 = *(void *)(v502 + 152);
      uint64_t v504 = *(unsigned int *)(v502 + 168);
      if (!v504) {
        goto LABEL_859;
      }
      LODWORD(v505) = (v504 - 1) & (v501 ^ (v500 >> 9));
      int v506 = (llvm::GlobalValue **)(v503 + 16 * v505);
      int v507 = *v506;
      if (*v506 != v500)
      {
        int v508 = 1;
        while (v507 != (llvm::GlobalValue *)-4096)
        {
          int v509 = v505 + v508++;
          uint64_t v505 = v509 & (v504 - 1);
          int v507 = *(llvm::GlobalValue **)(v503 + 16 * v505);
          if (v507 == v500)
          {
            int v506 = (llvm::GlobalValue **)(v503 + 16 * v505);
            goto LABEL_860;
          }
        }
LABEL_859:
        int v506 = (llvm::GlobalValue **)(v503 + 16 * v504);
      }
LABEL_860:
      uint64_t v510 = v506[1];
      unint64_t v513 = *(void *)v510;
      int v511 = (char *)v510 + 16;
      unint64_t v512 = v513;
    }
    else
    {
      unint64_t v512 = 0;
      int v511 = &byte_1CFBCE98E;
    }
    int v514 = sub_1CC20839C(v298, v511, v512);
    if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__p[0] + LODWORD(__p[1])) = v514;
    unsigned int v515 = ++LODWORD(__p[1]);
    if ((*((unsigned char *)v500 + 23) & 0x10) != 0)
    {
      uint64_t v516 = ***(void ***)v500;
      uint64_t v517 = *(void *)(v516 + 152);
      uint64_t v518 = *(unsigned int *)(v516 + 168);
      if (!v518) {
        goto LABEL_869;
      }
      LODWORD(v519) = (v518 - 1) & (v501 ^ (v500 >> 9));
      uint64_t v520 = v517 + 16 * v519;
      int v521 = *(llvm::GlobalValue **)v520;
      if (*(llvm::GlobalValue **)v520 != v500)
      {
        int v522 = 1;
        while (v521 != (llvm::GlobalValue *)-4096)
        {
          int v523 = v519 + v522++;
          uint64_t v519 = v523 & (v518 - 1);
          int v521 = *(llvm::GlobalValue **)(v517 + 16 * v519);
          if (v521 == v500)
          {
            uint64_t v520 = v517 + 16 * v519;
            goto LABEL_870;
          }
        }
LABEL_869:
        uint64_t v520 = v517 + 16 * v518;
      }
LABEL_870:
      uint64_t v524 = **(void **)(v520 + 8);
    }
    else
    {
      LODWORD(v524) = 0;
    }
    if (v515 >= HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__p[0] + v515) = v524;
    ++LODWORD(__p[1]);
    __dst = (atomic_ullong *)*((void *)v500 + 3);
    *(void *)&long long v875 = 0;
    if (sub_1CBFA3AF4((uint64_t *)(v298 + 48), &__dst, &v875)) {
      uint64_t v525 = v875;
    }
    else {
      uint64_t v525 = *(void *)(v298 + 48) + 16 * *(unsigned int *)(v298 + 64);
    }
    if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__p[0] + LODWORD(__p[1])) = *(_DWORD *)(v525 + 8) - 1;
    unsigned int v526 = LODWORD(__p[1]) + 1;
    LODWORD(__p[1]) = v526;
    if (v526 >= HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__p[0] + v526) = *(_DWORD *)(*(void *)v500 + 8) >> 8;
    ++LODWORD(__p[1]);
    int ValueID = llvm::ValueEnumerator::getValueID((uint64_t)v291, *((void *)v500 - 4));
    if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__p[0] + LODWORD(__p[1])) = ValueID;
    unsigned int v528 = LODWORD(__p[1]) + 1;
    LODWORD(__p[1]) = v528;
    if (v528 >= HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__p[0] + v528) = dword_1CFAC680C[*((_DWORD *)v500 + 8) & 0xF];
    unsigned int v529 = LODWORD(__p[1]) + 1;
    LODWORD(__p[1]) = v529;
    if (v529 >= HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__p[0] + v529) = (*((_DWORD *)v500 + 8) >> 4) & 3;
    unsigned int v530 = LODWORD(__p[1]) + 1;
    LODWORD(__p[1]) = v530;
    if (v530 >= HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__p[0] + v530) = (*((_DWORD *)v500 + 8) >> 8) & 3;
    unsigned int v531 = LODWORD(__p[1]) + 1;
    LODWORD(__p[1]) = v531;
    if (v531 >= HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__p[0] + v531) = (*((_DWORD *)v500 + 8) >> 10) & 7;
    unsigned int v532 = LODWORD(__p[1]) + 1;
    LODWORD(__p[1]) = v532;
    if (v532 >= HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__p[0] + v532) = dword_1CFAC6800[*((_DWORD *)v500 + 8) >> 6];
    unsigned int v533 = LODWORD(__p[1]) + 1;
    LODWORD(__p[1]) = v533;
    if (v533 >= HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__p[0] + v533) = (*((_DWORD *)v500 + 8) >> 14) & 1;
    ++LODWORD(__p[1]);
    unsigned int v534 = (char *)llvm::GlobalValue::getPartition(v500);
    int v536 = sub_1CC20839C(v298, v534, v535);
    if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__p[0] + LODWORD(__p[1])) = v536;
    ++LODWORD(__p[1]);
    llvm::GlobalValue::getPartition(v500);
    if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__p[0] + LODWORD(__p[1])) = v537;
    ++LODWORD(__p[1]);
    sub_1CC2059BC(*(llvm::raw_ostream **)v298, 0xEu, (uint64_t)__p, 0);
    LODWORD(__p[1]) = 0;
    char v499 = (void *)v499[1];
    if (v499 != v498) {
      continue;
    }
    break;
  }
  int v325 = *(void **)(v298 + 16);
LABEL_903:
  BOOL v538 = v325 + 7;
  int v539 = (void *)v325[8];
  if (v539 != v325 + 7)
  {
    while (2)
    {
      if (v539) {
        int v540 = (llvm::GlobalValue *)(v539 - 7);
      }
      else {
        int v540 = 0;
      }
      unsigned int v541 = v540 >> 4;
      if ((*((unsigned char *)v540 + 23) & 0x10) != 0)
      {
        uint64_t v542 = ***(void ***)v540;
        uint64_t v543 = *(void *)(v542 + 152);
        uint64_t v544 = *(unsigned int *)(v542 + 168);
        if (!v544) {
          goto LABEL_914;
        }
        LODWORD(v545) = (v544 - 1) & (v541 ^ (v540 >> 9));
        int v546 = (llvm::GlobalValue **)(v543 + 16 * v545);
        int v547 = *v546;
        if (*v546 != v540)
        {
          int v548 = 1;
          while (v547 != (llvm::GlobalValue *)-4096)
          {
            int v549 = v545 + v548++;
            uint64_t v545 = v549 & (v544 - 1);
            int v547 = *(llvm::GlobalValue **)(v543 + 16 * v545);
            if (v547 == v540)
            {
              int v546 = (llvm::GlobalValue **)(v543 + 16 * v545);
              goto LABEL_915;
            }
          }
LABEL_914:
          int v546 = (llvm::GlobalValue **)(v543 + 16 * v544);
        }
LABEL_915:
        int v550 = v546[1];
        unint64_t v553 = *(void *)v550;
        int v551 = (char *)v550 + 16;
        unint64_t v552 = v553;
      }
      else
      {
        unint64_t v552 = 0;
        int v551 = &byte_1CFBCE98E;
      }
      int v554 = sub_1CC20839C(v298, v551, v552);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + LODWORD(__p[1])) = v554;
      unsigned int v555 = ++LODWORD(__p[1]);
      if ((*((unsigned char *)v540 + 23) & 0x10) != 0)
      {
        uint64_t v556 = ***(void ***)v540;
        uint64_t v557 = *(void *)(v556 + 152);
        uint64_t v558 = *(unsigned int *)(v556 + 168);
        if (!v558) {
          goto LABEL_924;
        }
        LODWORD(v559) = (v558 - 1) & (v541 ^ (v540 >> 9));
        uint64_t v560 = v557 + 16 * v559;
        unsigned int v561 = *(llvm::GlobalValue **)v560;
        if (*(llvm::GlobalValue **)v560 != v540)
        {
          int v562 = 1;
          while (v561 != (llvm::GlobalValue *)-4096)
          {
            int v563 = v559 + v562++;
            uint64_t v559 = v563 & (v558 - 1);
            unsigned int v561 = *(llvm::GlobalValue **)(v557 + 16 * v559);
            if (v561 == v540)
            {
              uint64_t v560 = v557 + 16 * v559;
              goto LABEL_925;
            }
          }
LABEL_924:
          uint64_t v560 = v557 + 16 * v558;
        }
LABEL_925:
        uint64_t v564 = **(void **)(v560 + 8);
      }
      else
      {
        LODWORD(v564) = 0;
      }
      if (v555 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v555) = v564;
      ++LODWORD(__p[1]);
      __dst = (atomic_ullong *)*((void *)v540 + 3);
      *(void *)&long long v875 = 0;
      if (sub_1CBFA3AF4((uint64_t *)(v298 + 48), &__dst, &v875)) {
        uint64_t v565 = v875;
      }
      else {
        uint64_t v565 = *(void *)(v298 + 48) + 16 * *(unsigned int *)(v298 + 64);
      }
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + LODWORD(__p[1])) = *(_DWORD *)(v565 + 8) - 1;
      unsigned int v566 = LODWORD(__p[1]) + 1;
      LODWORD(__p[1]) = v566;
      if (v566 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v566) = *(_DWORD *)(*(void *)v540 + 8) >> 8;
      ++LODWORD(__p[1]);
      int v567 = llvm::ValueEnumerator::getValueID((uint64_t)v291, *((void *)v540 - 4));
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + LODWORD(__p[1])) = v567;
      unsigned int v568 = LODWORD(__p[1]) + 1;
      LODWORD(__p[1]) = v568;
      if (v568 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v568) = dword_1CFAC680C[*((_DWORD *)v540 + 8) & 0xF];
      unsigned int v569 = LODWORD(__p[1]) + 1;
      LODWORD(__p[1]) = v569;
      if (v569 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v569) = (*((_DWORD *)v540 + 8) >> 4) & 3;
      unsigned int v570 = LODWORD(__p[1]) + 1;
      LODWORD(__p[1]) = v570;
      if (v570 >= HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + v570) = (*((_DWORD *)v540 + 8) >> 14) & 1;
      ++LODWORD(__p[1]);
      uint64_t v571 = (char *)llvm::GlobalValue::getPartition(v540);
      int v573 = sub_1CC20839C(v298, v571, v572);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + LODWORD(__p[1])) = v573;
      ++LODWORD(__p[1]);
      llvm::GlobalValue::getPartition(v540);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__p[0] + LODWORD(__p[1])) = v574;
      ++LODWORD(__p[1]);
      sub_1CC2059BC(*(llvm::raw_ostream **)v298, 0x12u, (uint64_t)__p, 0);
      LODWORD(__p[1]) = 0;
      int v539 = (void *)v539[1];
      if (v539 == v538) {
        break;
      }
      continue;
    }
  }
  int v575 = (char *)operator new(0x228uLL);
  *(void *)int v575 = &unk_1F2608A00;
  *((void *)v575 + 1) = 0;
  *(_OWORD *)(v575 + 72) = 0u;
  *(_OWORD *)(v575 + 88) = 0u;
  *(_OWORD *)(v575 + 104) = 0u;
  *(_OWORD *)(v575 + 120) = 0u;
  *(_OWORD *)(v575 + 136) = 0u;
  *(_OWORD *)(v575 + 152) = 0u;
  *(_OWORD *)(v575 + 168) = 0u;
  *(_OWORD *)(v575 + 184) = 0u;
  *(_OWORD *)(v575 + 200) = 0u;
  *(_OWORD *)(v575 + 216) = 0u;
  *(_OWORD *)(v575 + 232) = 0u;
  *(_OWORD *)(v575 + 248) = 0u;
  *(_OWORD *)(v575 + 264) = 0u;
  *(_OWORD *)(v575 + 280) = 0u;
  *(_OWORD *)(v575 + 296) = 0u;
  *(_OWORD *)(v575 + 312) = 0u;
  *(_OWORD *)(v575 + 328) = 0u;
  *(_OWORD *)(v575 + 344) = 0u;
  *(_OWORD *)(v575 + 360) = 0u;
  *(_OWORD *)(v575 + 376) = 0u;
  *(_OWORD *)(v575 + 392) = 0u;
  *(_OWORD *)(v575 + 408) = 0u;
  *(_OWORD *)(v575 + 424) = 0u;
  *(_OWORD *)(v575 + 440) = 0u;
  *(_OWORD *)(v575 + 456) = 0u;
  *(_OWORD *)(v575 + 472) = 0u;
  *(_OWORD *)(v575 + 488) = 0u;
  *(_OWORD *)(v575 + 504) = 0u;
  *(_OWORD *)(v575 + 520) = 0u;
  *(_OWORD *)(v575 + 536) = 0u;
  *(_OWORD *)(v575 + 40) = xmmword_1CFAC6710;
  *((void *)v575 + 2) = 0;
  *((void *)v575 + 3) = v575 + 40;
  *(_OWORD *)(v575 + 56) = xmmword_1CFAC6720;
  *((void *)v575 + 4) = 0x2000000002;
  uint64_t v576 = *(llvm::raw_ostream **)v298;
  __dst = (atomic_ullong *)(v575 + 24);
  int v867 = (atomic_ullong *)v575;
  unsigned int v577 = sub_1CC1F7CDC((uint64_t)v576, (uint64_t)&__dst);
  unsigned int v578 = (std::__shared_weak_count *)v867;
  if (v867 && !atomic_fetch_add(v867 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v578->__on_zero_shared)(v578);
    std::__shared_weak_count::__release_weak(v578);
  }
  long long v875 = xmmword_1CFAC67F0;
  sub_1CC206E90(*(llvm::raw_ostream **)v298, v577, (uint64_t)&v875, 2, 0, 0, 0);
  uint64_t v579 = *(llvm::raw_ostream **)v298;
  int v580 = *(void **)(*(void *)v298 + 8);
  uint64_t v581 = *(void *)(**(void **)v298 + 8);
  if (v580) {
    uint64_t v582 = (*(uint64_t (**)(void))(*v580 + 80))(*(void *)(*(void *)v298 + 8)) + v580[4] - v580[2];
  }
  else {
    uint64_t v582 = 0;
  }
  *(void *)(v298 + 536) = *((unsigned int *)v579 + 6) + 8 * (v582 + v581) - 32;
  if (__p[0] != v884) {
    free(__p[0]);
  }
  sub_1CB833850((uint64_t)&v880, (char *)v881);
  sub_1CB833850((uint64_t)&v877, (char *)v878);
  uint64_t v583 = *(void *)(v298 + 120);
  unint64_t v584 = *(void *)(v298 + 128) - v583;
  if ((v584 >> 4))
  {
    uint64_t v585 = 0;
    uint64_t v586 = (v584 >> 4);
    while (*(unsigned __int8 *)(*(void *)v583 + 16) < 4u)
    {
      ++v585;
      v583 += 16;
      if (v586 == v585) {
        goto LABEL_966;
      }
    }
    ((void (*)(uint64_t, uint64_t))loc_1CC208524)(v298, v585);
  }
LABEL_966:
  __p[0] = v884;
  __p[1] = (void *)0x4000000000;
  uint64_t v877 = v879;
  uint64_t v878 = 0x800000000;
  llvm::LLVMContext::getMDKindNames(**(void **)(v298 + 16), &v877);
  if (v878)
  {
    sub_1CC1F77A4(*(void *)v298, 0x16u, 3u);
    uint64_t v587 = v878;
    if (v878)
    {
      uint64_t v588 = 0;
      uint64_t v589 = 0;
      unint64_t v590 = LODWORD(__p[1]);
      do
      {
        if (v590 >= HIDWORD(__p[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)__p[0] + v590) = v589;
        ++LODWORD(__p[1]);
        sub_1CC208214((uint64_t)__p, *(char **)((char *)v877 + v588), (char *)(*(void *)((char *)v877 + v588) + *(void *)((char *)v877 + v588 + 8)));
        sub_1CC207D3C(*(llvm::raw_ostream **)v298, 6u, (uint64_t)__p, 0);
        unint64_t v590 = 0;
        LODWORD(__p[1]) = 0;
        ++v589;
        v588 += 16;
      }
      while (v587 != v589);
    }
    sub_1CC1F7D44(*(void *)v298);
  }
  if (v877 != v879) {
    free(v877);
  }
  if (__p[0] != v884) {
    free(__p[0]);
  }
  if (*(unsigned int *)(v298 + 476) < (unint64_t)((uint64_t)(*(void *)(v298 + 200) - *(void *)(v298 + 192)) >> 3)
    || *(void *)(*(void *)(v298 + 16) + 72) != *(void *)(v298 + 16) + 72)
  {
    sub_1CC1F77A4(*(void *)v298, 0xFu, 4u);
    __p[0] = v884;
    __p[1] = (void *)0x4000000000;
    uint64_t v881 = 0;
    int v880 = 0;
    v882[0] = 0;
    sub_1CBF2A8C4((char **)&v880, 0x1FuLL);
    int v591 = sub_1CC20A8C0((uint64_t *)v298);
    *((_DWORD *)v880 + 1) = v591;
    int v592 = sub_1CC20AA08((uint64_t *)v298);
    *((_DWORD *)v880 + 4) = v592;
    int v593 = (char *)operator new(0x228uLL);
    *(void *)int v593 = &unk_1F2608A00;
    *((void *)v593 + 1) = 0;
    *(_OWORD *)(v593 + 88) = 0u;
    *(_OWORD *)(v593 + 104) = 0u;
    *(_OWORD *)(v593 + 120) = 0u;
    *(_OWORD *)(v593 + 136) = 0u;
    *(_OWORD *)(v593 + 152) = 0u;
    *(_OWORD *)(v593 + 168) = 0u;
    *(_OWORD *)(v593 + 184) = 0u;
    *(_OWORD *)(v593 + 200) = 0u;
    *(_OWORD *)(v593 + 216) = 0u;
    *(_OWORD *)(v593 + 232) = 0u;
    *(_OWORD *)(v593 + 248) = 0u;
    *(_OWORD *)(v593 + 264) = 0u;
    *(_OWORD *)(v593 + 280) = 0u;
    *(_OWORD *)(v593 + 296) = 0u;
    *(_OWORD *)(v593 + 312) = 0u;
    *(_OWORD *)(v593 + 328) = 0u;
    *(_OWORD *)(v593 + 344) = 0u;
    *(_OWORD *)(v593 + 360) = 0u;
    *(_OWORD *)(v593 + 376) = 0u;
    *(_OWORD *)(v593 + 392) = 0u;
    *(_OWORD *)(v593 + 408) = 0u;
    *(_OWORD *)(v593 + 424) = 0u;
    *(_OWORD *)(v593 + 440) = 0u;
    *(_OWORD *)(v593 + 456) = 0u;
    *(_OWORD *)(v593 + 472) = 0u;
    *(_OWORD *)(v593 + 488) = 0u;
    *(_OWORD *)(v593 + 504) = 0u;
    *(_OWORD *)(v593 + 520) = 0u;
    *(_OWORD *)(v593 + 536) = 0u;
    *(_OWORD *)(v593 + 40) = xmmword_1CFAC6730;
    *((void *)v593 + 2) = 0;
    *((void *)v593 + 3) = v593 + 40;
    *(_OWORD *)(v593 + 56) = xmmword_1CFAC6720;
    *(_OWORD *)(v593 + 72) = xmmword_1CFAC6720;
    *((void *)v593 + 4) = 0x2000000003;
    int v594 = *(llvm::raw_ostream **)v298;
    *(void *)&long long v875 = v593 + 24;
    *((void *)&v875 + 1) = v593;
    unsigned int v595 = sub_1CC1F7CDC((uint64_t)v594, (uint64_t)&v875);
    int v596 = (std::__shared_weak_count *)*((void *)&v875 + 1);
    if (*((void *)&v875 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v875 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v596->__on_zero_shared)(v596);
      std::__shared_weak_count::__release_weak(v596);
    }
    int v597 = (char *)operator new(0x228uLL);
    *(void *)int v597 = &unk_1F2608A00;
    *((void *)v597 + 1) = 0;
    *(_OWORD *)(v597 + 88) = 0u;
    *(_OWORD *)(v597 + 104) = 0u;
    *(_OWORD *)(v597 + 120) = 0u;
    *(_OWORD *)(v597 + 136) = 0u;
    *(_OWORD *)(v597 + 152) = 0u;
    *(_OWORD *)(v597 + 168) = 0u;
    *(_OWORD *)(v597 + 184) = 0u;
    *(_OWORD *)(v597 + 200) = 0u;
    *(_OWORD *)(v597 + 216) = 0u;
    *(_OWORD *)(v597 + 232) = 0u;
    *(_OWORD *)(v597 + 248) = 0u;
    *(_OWORD *)(v597 + 264) = 0u;
    *(_OWORD *)(v597 + 280) = 0u;
    *(_OWORD *)(v597 + 296) = 0u;
    *(_OWORD *)(v597 + 312) = 0u;
    *(_OWORD *)(v597 + 328) = 0u;
    *(_OWORD *)(v597 + 344) = 0u;
    *(_OWORD *)(v597 + 360) = 0u;
    *(_OWORD *)(v597 + 376) = 0u;
    *(_OWORD *)(v597 + 392) = 0u;
    *(_OWORD *)(v597 + 408) = 0u;
    *(_OWORD *)(v597 + 424) = 0u;
    *(_OWORD *)(v597 + 440) = 0u;
    *(_OWORD *)(v597 + 456) = 0u;
    *(_OWORD *)(v597 + 472) = 0u;
    *(_OWORD *)(v597 + 488) = 0u;
    *(_OWORD *)(v597 + 504) = 0u;
    *(_OWORD *)(v597 + 520) = 0u;
    *(_OWORD *)(v597 + 536) = 0u;
    *(_OWORD *)(v597 + 40) = xmmword_1CFAC6740;
    *((void *)v597 + 2) = 0;
    *((void *)v597 + 3) = v597 + 40;
    *(_OWORD *)(v597 + 56) = xmmword_1CFAC6570;
    *(_OWORD *)(v597 + 72) = xmmword_1CFAC4810;
    *((void *)v597 + 4) = 0x2000000003;
    int v598 = *(llvm::raw_ostream **)v298;
    uint64_t v873 = (std::__shared_weak_count *)(v597 + 24);
    uint64_t v874 = (std::__shared_weak_count *)v597;
    unsigned int v599 = sub_1CC1F7CDC((uint64_t)v598, (uint64_t)&v873);
    uint64_t v600 = v874;
    if (v874 && !atomic_fetch_add(&v874->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v600->__on_zero_shared)(v600);
      std::__shared_weak_count::__release_weak(v600);
    }
    sub_1CC20AB50((llvm::raw_ostream **)v298, *(void *)(v298 + 192) + 8 * *(unsigned int *)(v298 + 476), *(unsigned int *)(v298 + 480), (uint64_t)__p);
    if (((uint64_t)(*(void *)(v298 + 200) - *(void *)(v298 + 192)) >> 3)
       - (*(unsigned int *)(v298 + 480)
        + (unint64_t)*(unsigned int *)(v298 + 476)) > dword_1EBCC8B08)
    {
      uint64_t v878 = 0;
      uint64_t v877 = 0;
      sub_1CC20B05C(*(int **)v298, 0x26u, (uint64_t)&v877, v595);
    }
    size_t v601 = *(llvm::raw_ostream **)v298;
    uint64_t v602 = *(void **)(*(void *)v298 + 8);
    uint64_t v603 = *(void *)(**(void **)v298 + 8);
    if (v602) {
      uint64_t v602 = (void *)((*(uint64_t (**)(void))(*v602 + 80))(*(void *)(*(void *)v298 + 8))
    }
                      + v602[4]
                      - v602[2]);
    uint64_t v604 = *((unsigned int *)v601 + 6);
    __dst = 0;
    int v867 = 0;
    unint64_t v868 = 0;
    sub_1CBF7ACFC((uint64_t)&__dst, ((uint64_t)(*(void *)(v298 + 200) - *(void *)(v298 + 192)) >> 3)- (*(unsigned int *)(v298 + 480)+ (unint64_t)*(unsigned int *)(v298 + 476)));
    sub_1CC20B144((llvm::raw_ostream *)v298, (uint64_t *)(*(void *)(v298 + 192) + 8 * *(unsigned int *)(v298 + 476) + 8 * *(unsigned int *)(v298 + 480)), ((uint64_t)(*(void *)(v298 + 200) - *(void *)(v298 + 192)) >> 3)- (*(unsigned int *)(v298 + 480)+ (unint64_t)*(unsigned int *)(v298 + 476)), (uint64_t)__p, (unsigned int **)&v880, (uint64_t)&__dst);
    if (((uint64_t)(*(void *)(v298 + 200) - *(void *)(v298 + 192)) >> 3)
       - (*(unsigned int *)(v298 + 480)
        + (unint64_t)*(unsigned int *)(v298 + 476)) > dword_1EBCC8B08)
    {
      uint64_t v605 = v604 + 8 * ((void)v602 + v603);
      uint64_t v606 = *(llvm::raw_ostream **)v298;
      char v607 = *(void **)(*(void *)v298 + 8);
      uint64_t v608 = *(void *)(**(void **)v298 + 8);
      if (v607) {
        uint64_t v609 = (*(uint64_t (**)(void))(*v607 + 80))(*(void *)(*(void *)v298 + 8))
      }
             + v607[4]
             - v607[2];
      else {
        uint64_t v609 = 0;
      }
      uint64_t v610 = v609 + v608;
      uint64_t v611 = *((unsigned int *)v606 + 6) - v605 + 8 * v610;
      sub_1CC203350((off_t)v606, v605 - 64, *((_DWORD *)v606 + 6) - v605 + 8 * v610);
      sub_1CC203350((off_t)v606, v605 - 32, HIDWORD(v611));
      int v612 = (long long *)__dst;
      unint64_t v613 = (long long *)v867;
      if (__dst != v867)
      {
        uint64_t v614 = (long long *)__dst;
        do
        {
          uint64_t v615 = *(void *)v614;
          *(void *)v614 -= v605;
          uint64_t v614 = (long long *)((char *)v614 + 8);
          uint64_t v605 = v615;
        }
        while (v614 != v613);
      }
      uint64_t v616 = *(llvm::raw_ostream **)v298;
      unint64_t v617 = (char *)v613 - (char *)v612;
      if (v599)
      {
        sub_1CC206E90(*(llvm::raw_ostream **)v298, v599, (uint64_t)v612, (uint64_t)v617 >> 3, 0, 0, 0x100000027);
      }
      else
      {
        int v766 = *((_DWORD *)v616 + 8);
        int v767 = *((_DWORD *)v616 + 6);
        unsigned int v768 = *((_DWORD *)v616 + 7) | (3 << v767);
        *((_DWORD *)v616 + 7) = v768;
        unsigned int v769 = v767 + v766;
        if ((v767 + v766) >= 0x20)
        {
          v800 = *(void **)v616;
          uint64_t v801 = *(void *)(*(void *)v616 + 8);
          if (*(void *)(*(void *)v616 + 16) < (unint64_t)(v801 + 4)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(_DWORD *)(*v800 + v801) = v768;
          v800[1] += 4;
          int v802 = (llvm::raw_ostream *)*((void *)v616 + 1);
          if (v802)
          {
            size_t v820 = *(void *)(*(void *)v616 + 8);
            if (v820 >= *((void *)v616 + 2))
            {
              llvm::raw_ostream::write(v802, **(const char ***)v616, v820);
              *(void *)(*(void *)v616 + 8) = 0;
            }
          }
          int v803 = *((_DWORD *)v616 + 6);
          if (v803) {
            unsigned int v768 = 3u >> -(char)v803;
          }
          else {
            unsigned int v768 = 0;
          }
          unsigned int v769 = ((_BYTE)v803 + (_BYTE)v766) & 0x1F;
        }
        unint64_t v770 = v617 >> 3;
        unsigned int v771 = v768 | (39 << v769);
        *((_DWORD *)v616 + 6) = v769;
        *((_DWORD *)v616 + 7) = v771;
        if (v769 >= 0x1A)
        {
          int v804 = *(const char ***)v616;
          uint64_t v805 = *(void *)(*(void *)v616 + 8);
          if (*(void *)(*(void *)v616 + 16) < (unint64_t)(v805 + 4)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(_DWORD *)&(*v804)[v805] = v771;
          v804[1] += 4;
          int v806 = (llvm::raw_ostream *)*((void *)v616 + 1);
          if (v806)
          {
            size_t v821 = *(void *)(*(void *)v616 + 8);
            if (v821 >= *((void *)v616 + 2))
            {
              llvm::raw_ostream::write(v806, **(const char ***)v616, v821);
              *(void *)(*(void *)v616 + 8) = 0;
            }
          }
          int v807 = *((_DWORD *)v616 + 6);
          if (v807) {
            unsigned int v771 = 0x27u >> -(char)v807;
          }
          else {
            unsigned int v771 = 0;
          }
          unsigned int v772 = ((_BYTE)v807 + 6) & 0x1F;
        }
        else
        {
          unsigned int v772 = v769 + 6;
        }
        unsigned int v773 = v771 | (1 << v772);
        *((_DWORD *)v616 + 6) = v772;
        *((_DWORD *)v616 + 7) = v773;
        if (v772 >= 0x1A)
        {
          int v808 = *(const char ***)v616;
          uint64_t v809 = *(void *)(*(void *)v616 + 8);
          if (*(void *)(*(void *)v616 + 16) < (unint64_t)(v809 + 4)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(_DWORD *)&(*v808)[v809] = v773;
          v808[1] += 4;
          v810 = (llvm::raw_ostream *)*((void *)v616 + 1);
          if (v810)
          {
            size_t v822 = *(void *)(*(void *)v616 + 8);
            if (v822 >= *((void *)v616 + 2))
            {
              llvm::raw_ostream::write(v810, **(const char ***)v616, v822);
              *(void *)(*(void *)v616 + 8) = 0;
            }
          }
          int v811 = *((_DWORD *)v616 + 6);
          if (v811) {
            unsigned int v773 = 1u >> -(char)v811;
          }
          else {
            unsigned int v773 = 0;
          }
          unsigned int v774 = ((_BYTE)v811 + 6) & 0x1F;
        }
        else
        {
          unsigned int v774 = v772 + 6;
        }
        *((_DWORD *)v616 + 6) = v774;
        if (v770 >= 0x20)
        {
          unint64_t v780 = v617 >> 3;
          do
          {
            unsigned int v781 = v780 & 0x1F | 0x20;
            v773 |= v781 << v774;
            *((_DWORD *)v616 + 7) = v773;
            v774 += 6;
            if (v774 >= 0x20)
            {
              unsigned int v782 = *(const char ***)v616;
              uint64_t v783 = *(void *)(*(void *)v616 + 8);
              if (*(void *)(*(void *)v616 + 16) < (unint64_t)(v783 + 4)) {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
              }
              *(_DWORD *)&(*v782)[v783] = v773;
              v782[1] += 4;
              uint64_t v784 = (llvm::raw_ostream *)*((void *)v616 + 1);
              if (v784)
              {
                size_t v786 = *(void *)(*(void *)v616 + 8);
                if (v786 >= *((void *)v616 + 2))
                {
                  llvm::raw_ostream::write(v784, **(const char ***)v616, v786);
                  *(void *)(*(void *)v616 + 8) = 0;
                }
              }
              int v785 = *((_DWORD *)v616 + 6);
              if (v785) {
                unsigned int v773 = v781 >> -(char)v785;
              }
              else {
                unsigned int v773 = 0;
              }
              *((_DWORD *)v616 + 7) = v773;
              unsigned int v774 = ((_BYTE)v785 + 6) & 0x1F;
            }
            *((_DWORD *)v616 + 6) = v774;
            LODWORD(v775) = v780 >> 5;
            BOOL v279 = v780 > 0x3FF;
            LODWORD(v780) = v780 >> 5;
          }
          while (v279);
        }
        else
        {
          unint64_t v775 = v617 >> 3;
        }
        int v776 = v773 | (v775 << v774);
        *((_DWORD *)v616 + 7) = v776;
        if (v774 >= 0x1A)
        {
          char v812 = *(const char ***)v616;
          uint64_t v813 = *(void *)(*(void *)v616 + 8);
          if (*(void *)(*(void *)v616 + 16) < (unint64_t)(v813 + 4)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(_DWORD *)&(*v812)[v813] = v776;
          v812[1] += 4;
          uint64_t v814 = (llvm::raw_ostream *)*((void *)v616 + 1);
          if (v814)
          {
            size_t v823 = *(void *)(*(void *)v616 + 8);
            if (v823 >= *((void *)v616 + 2))
            {
              llvm::raw_ostream::write(v814, **(const char ***)v616, v823);
              *(void *)(*(void *)v616 + 8) = 0;
            }
          }
          int v815 = *((_DWORD *)v616 + 6);
          unsigned int v816 = v775 >> -(char)v815;
          if (!v815) {
            unsigned int v816 = 0;
          }
          *((_DWORD *)v616 + 7) = v816;
          int v777 = ((_BYTE)v815 + 6) & 0x1F;
        }
        else
        {
          int v777 = v774 + 6;
        }
        *((_DWORD *)v616 + 6) = v777;
        uint64_t v298 = v843;
        int v291 = (llvm::ValueEnumerator *)(v843 + 24);
        if (v770)
        {
          unint64_t v778 = 0;
          uint64_t v779 = v617 & 0x7FFFFFFF8;
          do
          {
            sub_1CC202E58((uint64_t)v616, __dst[v778 / 8], 6);
            v778 += 8;
          }
          while (v779 != v778);
        }
      }
      int v867 = __dst;
    }
    int v618 = *(void **)(v298 + 16);
    if ((void *)v618[9] != v618 + 9)
    {
      uint64_t v619 = (char *)operator new(0x228uLL);
      *(void *)uint64_t v619 = &unk_1F2608A00;
      *((void *)v619 + 1) = 0;
      *(_OWORD *)(v619 + 88) = 0u;
      *(_OWORD *)(v619 + 104) = 0u;
      *(_OWORD *)(v619 + 120) = 0u;
      *(_OWORD *)(v619 + 136) = 0u;
      *(_OWORD *)(v619 + 152) = 0u;
      *(_OWORD *)(v619 + 168) = 0u;
      *(_OWORD *)(v619 + 184) = 0u;
      *(_OWORD *)(v619 + 200) = 0u;
      *(_OWORD *)(v619 + 216) = 0u;
      *(_OWORD *)(v619 + 232) = 0u;
      *(_OWORD *)(v619 + 248) = 0u;
      *(_OWORD *)(v619 + 264) = 0u;
      *(_OWORD *)(v619 + 280) = 0u;
      *(_OWORD *)(v619 + 296) = 0u;
      *(_OWORD *)(v619 + 312) = 0u;
      *(_OWORD *)(v619 + 328) = 0u;
      *(_OWORD *)(v619 + 344) = 0u;
      *(_OWORD *)(v619 + 360) = 0u;
      *(_OWORD *)(v619 + 376) = 0u;
      *(_OWORD *)(v619 + 392) = 0u;
      *(_OWORD *)(v619 + 408) = 0u;
      *(_OWORD *)(v619 + 424) = 0u;
      *(_OWORD *)(v619 + 440) = 0u;
      *(_OWORD *)(v619 + 456) = 0u;
      *(_OWORD *)(v619 + 472) = 0u;
      *(_OWORD *)(v619 + 488) = 0u;
      *(_OWORD *)(v619 + 504) = 0u;
      *(_OWORD *)(v619 + 520) = 0u;
      *(_OWORD *)(v619 + 536) = 0u;
      *(_OWORD *)(v619 + 40) = xmmword_1CFAC65A0;
      *((void *)v619 + 2) = 0;
      *((void *)v619 + 3) = v619 + 40;
      *(_OWORD *)(v619 + 56) = xmmword_1CFAC6570;
      *(_OWORD *)(v619 + 72) = xmmword_1CFAC4730;
      *((void *)v619 + 4) = 0x2000000003;
      uint64_t v620 = *(llvm::raw_ostream **)v298;
      uint64_t v877 = v619 + 24;
      uint64_t v878 = (uint64_t)v619;
      unsigned int v621 = sub_1CC1F7CDC((uint64_t)v620, (uint64_t)&v877);
      v622 = (std::__shared_weak_count *)v878;
      if (v878 && !atomic_fetch_add((atomic_ullong *volatile)(v878 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v622->__on_zero_shared)(v622);
        std::__shared_weak_count::__release_weak(v622);
      }
      int v618 = *(void **)(v298 + 16);
      long long v623 = v618 + 9;
      uint64_t v624 = v618[10];
      if ((void *)v624 != v618 + 9)
      {
        v625 = (uint64_t *)(v298 + 240);
        do
        {
          char v626 = *(unsigned char *)(v624 + 39);
          int v627 = v626;
          if (v626 >= 0) {
            v628 = (unsigned __int8 *)(v624 + 16);
          }
          else {
            v628 = *(unsigned __int8 **)(v624 + 16);
          }
          uint64_t v629 = *(void *)(v624 + 24);
          uint64_t v630 = v626 & 0x7F;
          if (v627 >= 0) {
            uint64_t v629 = v630;
          }
          sub_1CC211AA8((uint64_t)__p, v628, &v628[v629]);
          sub_1CC21152C(*(llvm::raw_ostream **)v298, 4u, (uint64_t)__p, v621);
          LODWORD(__p[1]) = 0;
          uint64_t v631 = *(unsigned int *)(*(void *)(v624 + 48) + 8);
          if (v631)
          {
            uint64_t v632 = 0;
            uint64_t v633 = 8 * v631;
            do
            {
              uint64_t v877 = *(void **)(**(void **)(v624 + 48) + v632);
              uint64_t v871 = 0;
              if (sub_1CBFFBC50(v625, &v877, &v871)) {
                unsigned int v634 = HIDWORD(v871->__shared_owners_) - 1;
              }
              else {
                unsigned int v634 = -1;
              }
              if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)__p[0] + LODWORD(__p[1])) = v634;
              ++LODWORD(__p[1]);
              v632 += 8;
            }
            while (v633 != v632);
          }
          uint64_t v298 = v843;
          sub_1CC21152C(*(llvm::raw_ostream **)v843, 0xAu, (uint64_t)__p, 0);
          LODWORD(__p[1]) = 0;
          uint64_t v624 = *(void *)(v624 + 8);
        }
        while ((void *)v624 != v623);
        int v618 = *(void **)(v843 + 16);
        int v291 = (llvm::ValueEnumerator *)(v843 + 24);
      }
    }
    unint64_t v635 = v618 + 3;
    uint64_t v636 = (void *)v618[4];
    if (v636 != v618 + 3)
    {
      while (1)
      {
        if (v636) {
          uint64_t v637 = (uint64_t)(v636 - 7);
        }
        else {
          uint64_t v637 = 0;
        }
        if (v636 && *(unsigned char *)(v637 + 16) == 3)
        {
          int v638 = *(_DWORD *)(v637 + 20);
          if ((v638 & 0x7FFFFFF) == 0 && (v638 & 0x20000000) != 0) {
            goto LABEL_1030;
          }
        }
        else if (!*(unsigned char *)(v637 + 16) {
               && *(void *)(v637 + 72) == v637 + 72
        }
               && (*(unsigned char *)(v637 + 34) & 0x80) == 0
               && (*(_DWORD *)(v637 + 20) & 0x20000000) != 0)
        {
LABEL_1030:
          uint64_t v877 = v879;
          uint64_t v878 = 0x400000000;
          unsigned int v639 = llvm::ValueEnumerator::getValueID((uint64_t)v291, v637);
          if (v878 >= (unint64_t)HIDWORD(v878)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v877 + v878) = v639;
          LODWORD(v878) = v878 + 1;
          sub_1CC211B34(v298, (uint64_t)&v877, (unsigned char *)v637);
          sub_1CD4FD868(*(void *)v298, 36, (uint64_t)&v877);
          if (v877 != v879) {
            free(v877);
          }
        }
        uint64_t v636 = (void *)v636[1];
        if (v636 == v635)
        {
          int v618 = *(void **)(v298 + 16);
          break;
        }
      }
    }
    std::string::size_type v640 = v618 + 1;
    uint64_t v641 = (void *)v618[2];
    if (v641 != v618 + 1)
    {
      do
      {
        if (v641) {
          unint64_t v642 = v641 - 7;
        }
        else {
          unint64_t v642 = 0;
        }
        if ((v642[23] & 0x20) != 0)
        {
          uint64_t v877 = v879;
          uint64_t v878 = 0x400000000;
          unsigned int v643 = llvm::ValueEnumerator::getValueID((uint64_t)v291, (uint64_t)v642);
          if (v878 >= (unint64_t)HIDWORD(v878)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v877 + v878) = v643;
          LODWORD(v878) = v878 + 1;
          sub_1CC211B34(v298, (uint64_t)&v877, v642);
          sub_1CD4FD868(*(void *)v298, 36, (uint64_t)&v877);
          if (v877 != v879) {
            free(v877);
          }
        }
        uint64_t v641 = (void *)v641[1];
      }
      while (v641 != v640);
    }
    sub_1CC1F7D44(*(void *)v298);
    if (__dst)
    {
      int v867 = __dst;
      operator delete(__dst);
    }
    if (v880)
    {
      uint64_t v881 = (uint64_t)v880;
      operator delete(v880);
    }
    if (__p[0] != v884) {
      free(__p[0]);
    }
  }
  if (*(unsigned char *)(v298 + 288)) {
    sub_1CC20378C((uint64_t *)v298, 0);
  }
  uint64_t v877 = v879;
  uint64_t v878 = 0x800000000;
  llvm::LLVMContextImpl::getOperandBundleTags(***(void ***)(v298 + 16), &v877);
  if (v878)
  {
    sub_1CC1F77A4(*(void *)v298, 0x15u, 3u);
    __p[0] = v884;
    __p[1] = (void *)0x4000000000;
    if (v878)
    {
      unint64_t v644 = (char **)v877;
      int v645 = (char **)((char *)v877 + 16 * v878);
      do
      {
        int v646 = *v644;
        int v647 = v644[1];
        v644 += 2;
        sub_1CC208214((uint64_t)__p, v646, &v647[(void)v646]);
        sub_1CC207D3C(*(llvm::raw_ostream **)v298, 1u, (uint64_t)__p, 0);
        LODWORD(__p[1]) = 0;
      }
      while (v644 != v645);
    }
    sub_1CC1F7D44(*(void *)v298);
    if (__p[0] != v884) {
      free(__p[0]);
    }
  }
  if (v877 != v879) {
    free(v877);
  }
  uint64_t v877 = v879;
  uint64_t v878 = 0x800000000;
  llvm::LLVMContextImpl::getSyncScopeNames(***(void ***)(v298 + 16), &v877);
  if (v878)
  {
    sub_1CC1F77A4(*(void *)v298, 0x1Au, 2u);
    __p[0] = v884;
    __p[1] = (void *)0x4000000000;
    if (v878)
    {
      int v648 = (char **)v877;
      int v649 = (char **)((char *)v877 + 16 * v878);
      do
      {
        uint64_t v650 = *v648;
        int v651 = v648[1];
        v648 += 2;
        sub_1CC208214((uint64_t)__p, v650, &v651[(void)v650]);
        sub_1CC207D3C(*(llvm::raw_ostream **)v298, 1u, (uint64_t)__p, 0);
        LODWORD(__p[1]) = 0;
      }
      while (v648 != v649);
    }
    sub_1CC1F7D44(*(void *)v298);
    if (__p[0] != v884) {
      free(__p[0]);
    }
  }
  if (v877 != v879) {
    free(v877);
  }
  long long v875 = 0uLL;
  int v876 = 0;
  uint64_t v652 = *(void *)(v298 + 16);
  uint64_t v653 = *(void *)(v652 + 32);
  uint64_t v828 = v652 + 24;
  if (v653 != v652 + 24)
  {
    uint64_t v654 = (uint64_t *)(v298 + 240);
    while (1)
    {
      uint64_t v655 = v653 ? v653 - 56 : 0;
      if (!v653 || *(unsigned char *)(v655 + 16) != 3) {
        break;
      }
      if ((*(_DWORD *)(v655 + 20) & 0x7FFFFFF) != 0) {
        goto LABEL_1087;
      }
LABEL_1284:
      uint64_t v653 = *(void *)(v653 + 8);
      if (v653 == v828) {
        goto LABEL_1308;
      }
    }
    if (!*(unsigned char *)(v655 + 16) && *(void *)(v655 + 72) == v655 + 72 && (*(unsigned char *)(v655 + 34) & 0x80) == 0) {
      goto LABEL_1284;
    }
LABEL_1087:
    uint64_t v829 = v653;
    v656 = *(llvm::raw_ostream **)v298;
    uint64_t v657 = *(void **)(*(void *)v298 + 8);
    uint64_t v658 = *(void *)(**(void **)v298 + 8);
    uint64_t v830 = v655;
    if (v657)
    {
      uint64_t v659 = (*(uint64_t (**)(void *))(*v657 + 80))(v657);
      uint64_t v655 = v830;
      uint64_t v660 = v659 + v657[4] - v657[2];
    }
    else
    {
      uint64_t v660 = 0;
    }
    uint64_t v661 = *((unsigned int *)v656 + 6) + 8 * (v660 + v658);
    __p[0] = (void *)v655;
    uint64_t v662 = (const llvm::Function *)v655;
    sub_1CBFB13A8((uint64_t *)&v875, __p)[1] = v661;
    sub_1CC1F77A4(*(void *)v298, 0xCu, 4u);
    llvm::ValueEnumerator::incorporateFunction(v291, v662);
    uint64_t v877 = v879;
    v879[0] = (*(void *)(v298 + 456) - *(void *)(v298 + 448)) >> 3;
    uint64_t v878 = 0x4000000001;
    sub_1CC2059BC(*(llvm::raw_ostream **)v298, 1u, (uint64_t)&v877, 0);
    LODWORD(v878) = 0;
    unsigned int v663 = *(_DWORD *)(v298 + 488);
    ((void (*)(uint64_t, void, void, void))loc_1CC208524)(v298, *(unsigned int *)(v298 + 484), v663, 0);
    if (*(unsigned int *)(v298 + 476) < (unint64_t)((uint64_t)(*(void *)(v298 + 200) - *(void *)(v298 + 192)) >> 3))
    {
      sub_1CC1F77A4(*(void *)v298, 0xFu, 3u);
      __p[0] = v884;
      __p[1] = (void *)0x4000000000;
      sub_1CC20AB50((llvm::raw_ostream **)v298, *(void *)(v298 + 192) + 8 * *(unsigned int *)(v298 + 476), *(unsigned int *)(v298 + 480), (uint64_t)__p);
      sub_1CC20B144((llvm::raw_ostream *)v298, (uint64_t *)(*(void *)(v298 + 192) + 8 * *(unsigned int *)(v298 + 476) + 8 * *(unsigned int *)(v298 + 480)), ((uint64_t)(*(void *)(v298 + 200) - *(void *)(v298 + 192)) >> 3)- (*(unsigned int *)(v298 + 480)+ (unint64_t)*(unsigned int *)(v298 + 476)), (uint64_t)__p, 0, 0);
      sub_1CC1F7D44(*(void *)v298);
      if (__p[0] != v884) {
        free(__p[0]);
      }
    }
    uint64_t v665 = v830;
    int v666 = (*(_DWORD *)(v830 + 20) >> 29) & 1;
    __dst = (atomic_ullong *)v870;
    int v867 = (atomic_ullong *)v870;
    unint64_t v868 = 4;
    int v869 = 0;
    uint64_t v667 = *(void *)(v830 + 80);
    uint64_t v833 = v830 + 72;
    if (v667 != v830 + 72)
    {
      uint64_t v668 = 0;
      while (2)
      {
        int v669 = (llvm::BlockAddress *)(v667 - 24);
        if (!v667) {
          int v669 = 0;
        }
        uint64_t v670 = (void *)((char *)v669 + 40);
        long long v842 = v669;
        uint64_t v671 = (void *)*((void *)v669 + 6);
        while (v671 != v670)
        {
          if (v671) {
            uint64_t v672 = (uint64_t)(v671 - 3);
          }
          else {
            uint64_t v672 = 0;
          }
          sub_1CC211CC0(v843, v672, v663, (uint64_t)&v877);
          if (*(unsigned char *)(*(void *)v672 + 8) != 7) {
            ++v663;
          }
          char v673 = *(unsigned char *)(v672 + 23);
          uint64_t v674 = *(void *)(v672 + 48);
          if (!v674) {
            goto LABEL_1111;
          }
          if (v674 == v668)
          {
            sub_1CC2059BC(*(llvm::raw_ostream **)v843, 0x21u, (uint64_t)&v877, 0);
LABEL_1111:
            uint64_t v674 = v668;
            goto LABEL_1123;
          }
          if (v878 >= (unint64_t)HIDWORD(v878)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v877 + v878) = *(_DWORD *)(v674 + 4);
          unsigned int v675 = v878 + 1;
          LODWORD(v878) = v675;
          if (v675 >= HIDWORD(v878)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v877 + v675) = *(unsigned __int16 *)(v674 + 2);
          LODWORD(v878) = v878 + 1;
          __p[0] = *(void **)(v674 - 8 * *(unsigned int *)(v674 + 8));
          int v880 = 0;
          if (sub_1CBFFBC50(v654, __p, &v880)) {
            int v676 = *((_DWORD *)v880 + 3);
          }
          else {
            int v676 = 0;
          }
          if (v878 >= (unint64_t)HIDWORD(v878)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v877 + v878) = v676;
          LODWORD(v878) = v878 + 1;
          if (*(_DWORD *)(v674 + 8) == 2) {
            unsigned int v677 = *(void **)(v674 - 8);
          }
          else {
            unsigned int v677 = 0;
          }
          __p[0] = v677;
          int v880 = 0;
          if (sub_1CBFFBC50(v654, __p, &v880)) {
            int v678 = *((_DWORD *)v880 + 3);
          }
          else {
            int v678 = 0;
          }
          if (v878 >= (unint64_t)HIDWORD(v878)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v877 + v878) = v678;
          unsigned int v679 = v878 + 1;
          LODWORD(v878) = v679;
          if (v679 >= HIDWORD(v878)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v877 + v679) = *(unsigned __int8 *)(v674 + 1) >> 7;
          LODWORD(v878) = v878 + 1;
          sub_1CC2059BC(*(llvm::raw_ostream **)v843, 0x23u, (uint64_t)&v877, 0);
          LODWORD(v878) = 0;
LABEL_1123:
          v666 |= (v673 & 0x20) >> 5;
          uint64_t v671 = (void *)v671[1];
          uint64_t v668 = v674;
        }
        uint64_t v680 = llvm::BlockAddress::lookup(v842, v664);
        int v291 = (llvm::ValueEnumerator *)(v843 + 24);
        uint64_t v665 = v830;
        if (v680)
        {
          uint64_t v681 = *(void *)(v680 + 8);
          if (v681)
          {
            while (2)
            {
              uint64_t v682 = *(void *)(v681 + 24);
              if (v682) {
                BOOL v683 = *(unsigned __int8 *)(v682 + 16) >= 0x1Cu;
              }
              else {
                BOOL v683 = 0;
              }
              if (!v683) {
                goto LABEL_1169;
              }
              atomic_ullong v684 = *(void *)(*(void *)(v682 + 40) + 56);
              if (v684 == v665) {
                goto LABEL_1169;
              }
              uint64_t v685 = v867;
              uint64_t v686 = HIDWORD(v868);
              if (v867 == __dst)
              {
                if (HIDWORD(v868))
                {
                  std::string::size_type v687 = 0;
                  uint64_t v688 = 8 * HIDWORD(v868);
                  int v689 = v867;
                  while (*v689 != v684)
                  {
                    if (*v689 == -2) {
                      std::string::size_type v687 = v689;
                    }
                    ++v689;
                    v688 -= 8;
                    if (!v688)
                    {
                      if (!v687) {
                        goto LABEL_1145;
                      }
                      atomic_ullong *v687 = v684;
                      --v869;
                      break;
                    }
                  }
LABEL_1169:
                  uint64_t v681 = *(void *)(v681 + 8);
                  if (!v681) {
                    goto LABEL_1177;
                  }
                  continue;
                }
LABEL_1145:
                v664 = (const llvm::BasicBlock *)v868;
                if (HIDWORD(v868) < v868)
                {
                  ++HIDWORD(v868);
                  v867[v686] = v684;
                  goto LABEL_1169;
                }
              }
              else
              {
                v664 = (const llvm::BasicBlock *)v868;
              }
              break;
            }
            if (3 * (int)v664 <= (4 * (HIDWORD(v868) - v869)))
            {
              if (v664 >= 0x40) {
                LODWORD(v664) = 2 * v664;
              }
              else {
                LODWORD(v664) = 128;
              }
            }
            else if ((int)v664 - HIDWORD(v868) >= v664 >> 3)
            {
              goto LABEL_1150;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&__dst, v664);
            uint64_t v665 = v830;
            v664 = (const llvm::BasicBlock *)v868;
            uint64_t v685 = v867;
LABEL_1150:
            int v690 = v664 - 1;
            unsigned int v691 = (v664 - 1) & ((v684 >> 4) ^ (v684 >> 9));
            int v692 = &v685[v691];
            atomic_ullong v693 = *v692;
            if (*v692 == -1)
            {
              unint64_t v694 = 0;
LABEL_1162:
              if (v694) {
                uint64_t v698 = v694;
              }
              else {
                uint64_t v698 = v692;
              }
              if (*v698 != v684)
              {
                if (*v698 == -2) {
                  --v869;
                }
                else {
                  ++HIDWORD(v868);
                }
                atomic_ullong *v698 = v684;
              }
            }
            else
            {
              unint64_t v694 = 0;
              int v695 = 1;
              while (v693 != v684)
              {
                if (v694) {
                  BOOL v696 = 0;
                }
                else {
                  BOOL v696 = v693 == -2;
                }
                if (v696) {
                  unint64_t v694 = v692;
                }
                unsigned int v697 = v691 + v695++;
                unsigned int v691 = v697 & v690;
                int v692 = &v685[v697 & v690];
                atomic_ullong v693 = *v692;
                if (*v692 == -1) {
                  goto LABEL_1162;
                }
              }
            }
            goto LABEL_1169;
          }
        }
LABEL_1177:
        uint64_t v667 = *(void *)(v667 + 8);
        if (v667 != v833) {
          continue;
        }
        break;
      }
      if (HIDWORD(v868) == v869)
      {
        uint64_t v298 = v843;
      }
      else
      {
        __p[0] = v884;
        __p[1] = (void *)0x400000000;
        uint64_t v298 = v843;
        if ((HIDWORD(v868) - v869) >= 5) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v867 == __dst) {
          uint64_t v735 = HIDWORD(v868);
        }
        else {
          uint64_t v735 = v868;
        }
        if (v735)
        {
          uint64_t v736 = 8 * v735;
          uint64_t v737 = v867;
          while ((unint64_t)*v737 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v737;
            v736 -= 8;
            if (!v736) {
              goto LABEL_1305;
            }
          }
        }
        else
        {
          uint64_t v737 = v867;
        }
        uint64_t v738 = &v867[v735];
        if (v737 != v738)
        {
          uint64_t v739 = *v737;
LABEL_1299:
          unsigned int v740 = llvm::ValueEnumerator::getValueID(v835, v739);
          if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)__p[0] + LODWORD(__p[1])) = v740;
          ++LODWORD(__p[1]);
          uint64_t v741 = (unint64_t *)(v737 + 1);
          while (v741 != (unint64_t *)v738)
          {
            unint64_t v742 = *v741++;
            uint64_t v739 = v742;
            if (v742 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              uint64_t v737 = (atomic_ullong *)(v741 - 1);
              goto LABEL_1299;
            }
          }
        }
LABEL_1305:
        sub_1CD4FD868(*(void *)v843, 60, (uint64_t)__p);
        if (__p[0] != v884) {
          free(__p[0]);
        }
        uint64_t v665 = v830;
      }
    }
    uint64_t v699 = *(void *)(v665 + 104);
    if (v699 && *(_DWORD *)(v699 + 12))
    {
      sub_1CC1F77A4(*(void *)v298, 0xEu, 4u);
      __p[0] = v884;
      __p[1] = (void *)0x4000000000;
      unsigned int v700 = *(void **)v699;
      uint64_t v701 = *(unsigned int *)(v699 + 8);
      if (v701)
      {
        for (uint64_t i = *(void **)v699; !*i || *i == -8; ++i)
          ;
      }
      else
      {
        uint64_t i = *(void **)v699;
      }
      int v704 = &v700[v701];
      if (i != v704)
      {
        uint64_t v705 = (void *)*i;
        do
        {
          int v707 = (unsigned __int8 *)(v705 + 2);
          uint64_t v706 = *v705;
          if (*v705)
          {
            LOBYTE(v708) = 1;
            int v709 = (unsigned __int8 *)(v705 + 2);
            while (1)
            {
              int v710 = *v709;
              BOOL v711 = (v710 - 48) >= 0xA && (v710 & 0xFFFFFFDF) - 65 >= 0x1A;
              BOOL v712 = !v711 || v710 == 46;
              BOOL v713 = v712 || v710 == 95;
              BOOL v714 = v713;
              int v708 = (v708 & 1) != 0 && v714;
              if ((v710 & 0x80) != 0) {
                break;
              }
              ++v709;
              if (!--v706) {
                goto LABEL_1214;
              }
            }
            int v708 = 0;
            int v715 = 2;
          }
          else
          {
            int v708 = 1;
LABEL_1214:
            int v715 = v708 ^ 1;
          }
          unsigned int v716 = llvm::ValueEnumerator::getValueID(v835, v705[1]);
          if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)__p[0] + LODWORD(__p[1])) = v716;
          unsigned int v717 = ++LODWORD(__p[1]);
          if (*(unsigned char *)(v705[1] + 16) == 22)
          {
            if (v708) {
              unsigned int v718 = 7;
            }
            else {
              unsigned int v718 = 4;
            }
            unsigned int v719 = 2;
          }
          else
          {
            if (v715 == 1) {
              int v720 = 5;
            }
            else {
              int v720 = 4;
            }
            unsigned int v719 = 1;
            if (v715) {
              unsigned int v718 = v720;
            }
            else {
              unsigned int v718 = 6;
            }
          }
          for (uint64_t j = *v705; j; --j)
          {
            if (v717 >= HIDWORD(__p[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)__p[0] + v717) = *v707;
            unsigned int v717 = ++LODWORD(__p[1]);
            ++v707;
          }
          uint64_t v298 = v843;
          sub_1CC207D3C(*(llvm::raw_ostream **)v843, v719, (uint64_t)__p, v718);
          LODWORD(__p[1]) = 0;
          do
          {
            int v722 = (void *)i[1];
            ++i;
            uint64_t v705 = v722;
            if (v722) {
              BOOL v723 = v705 + 1 == 0;
            }
            else {
              BOOL v723 = 1;
            }
          }
          while (v723);
        }
        while (i != v704);
      }
      sub_1CC1F7D44(*(void *)v298);
      if (__p[0] != v884) {
        free(__p[0]);
      }
      int v291 = (llvm::ValueEnumerator *)(v843 + 24);
    }
    if (v666)
    {
      sub_1CC1F77A4(*(void *)v298, 0x10u, 3u);
      __p[0] = v884;
      __p[1] = (void *)0x4000000000;
      uint64_t v724 = v830;
      if ((*(unsigned char *)(v830 + 23) & 0x20) != 0)
      {
        sub_1CC211B34(v298, (uint64_t)__p, (unsigned char *)v830);
        sub_1CC207D3C(*(llvm::raw_ostream **)v298, 0xBu, (uint64_t)__p, 0);
        uint64_t v724 = v830;
        LODWORD(__p[1]) = 0;
      }
      int v880 = v882;
      uint64_t v881 = 0x400000000;
      for (uint64_t k = *(void *)(v724 + 80); k != v833; uint64_t k = *(void *)(k + 8))
      {
        uint64_t v726 = k - 24;
        if (!k) {
          uint64_t v726 = 0;
        }
        uint64_t v727 = v726 + 40;
        for (uint64_t m = *(void *)(v726 + 48); m != v727; uint64_t m = *(void *)(m + 8))
        {
          if (m) {
            uint64_t v729 = (unsigned char *)(m - 24);
          }
          else {
            uint64_t v729 = 0;
          }
          LODWORD(v881) = 0;
          llvm::Value::getAllMetadata(v729, (uint64_t)&v880);
          if (v881)
          {
            unsigned int InstructionID = llvm::ValueEnumerator::getInstructionID((uint64_t)v291, (uint64_t)v729);
            if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)__p[0] + LODWORD(__p[1])) = InstructionID;
            unsigned int v731 = ++LODWORD(__p[1]);
            if (v881)
            {
              uint64_t v732 = 0;
              uint64_t v733 = 16 * v881;
              do
              {
                if (v731 >= HIDWORD(__p[1])) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)__p[0] + v731) = *(unsigned int *)((char *)v880 + v732);
                ++LODWORD(__p[1]);
                uint64_t v873 = *(std::__shared_weak_count **)((char *)v880 + v732 + 8);
                uint64_t v871 = 0;
                if (sub_1CBFFBC50(v654, &v873, &v871)) {
                  unsigned int v734 = HIDWORD(v871->__shared_owners_) - 1;
                }
                else {
                  unsigned int v734 = -1;
                }
                if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)__p[0] + LODWORD(__p[1])) = v734;
                unsigned int v731 = ++LODWORD(__p[1]);
                v732 += 16;
              }
              while (v733 != v732);
            }
            sub_1CC207D3C(*(llvm::raw_ostream **)v298, 0xBu, (uint64_t)__p, 0);
            LODWORD(__p[1]) = 0;
          }
        }
      }
      sub_1CC1F7D44(*(void *)v298);
      if (v880 != v882) {
        free(v880);
      }
      if (__p[0] != v884) {
        free(__p[0]);
      }
    }
    if (*(unsigned char *)(v298 + 288)) {
      sub_1CC20378C((uint64_t *)v298, v830);
    }
    llvm::ValueEnumerator::purgeFunction(v291);
    sub_1CC1F7D44(*(void *)v298);
    if (v867 != __dst) {
      free(v867);
    }
    if (v877 != v879) {
      free(v877);
    }
    uint64_t v653 = v829;
    goto LABEL_1284;
  }
LABEL_1308:
  if (*(void *)(v298 + 496)) {
    sub_1CC20392C((off_t *)v298);
  }
  unsigned int v743 = *(llvm::raw_ostream **)v298;
  uint64_t v744 = *(void **)(*(void *)v298 + 8);
  uint64_t v745 = *(void *)(**(void **)v298 + 8);
  if (v744) {
    uint64_t v746 = (*(uint64_t (**)(void))(*v744 + 80))(*(void *)(*(void *)v298 + 8)) + v744[4] - v744[2];
  }
  else {
    uint64_t v746 = 0;
  }
  sub_1CC203350(*(void *)v298, *(void *)(v298 + 536), (((unint64_t)*((unsigned int *)v743 + 6) + 8 * (v746 + v745) - *(void *)(v298 + 664)) >> 5) + 1);
  sub_1CC1F77A4(*(void *)v298, 0xEu, 4u);
  uint64_t v747 = (char *)operator new(0x228uLL);
  *(void *)uint64_t v747 = &unk_1F2608A00;
  *((void *)v747 + 1) = 0;
  *(_OWORD *)(v747 + 88) = 0u;
  *(_OWORD *)(v747 + 104) = 0u;
  *(_OWORD *)(v747 + 120) = 0u;
  *(_OWORD *)(v747 + 136) = 0u;
  *(_OWORD *)(v747 + 152) = 0u;
  *(_OWORD *)(v747 + 168) = 0u;
  *(_OWORD *)(v747 + 184) = 0u;
  *(_OWORD *)(v747 + 200) = 0u;
  *(_OWORD *)(v747 + 216) = 0u;
  *(_OWORD *)(v747 + 232) = 0u;
  *(_OWORD *)(v747 + 248) = 0u;
  *(_OWORD *)(v747 + 264) = 0u;
  *(_OWORD *)(v747 + 280) = 0u;
  *(_OWORD *)(v747 + 296) = 0u;
  *(_OWORD *)(v747 + 312) = 0u;
  *(_OWORD *)(v747 + 328) = 0u;
  *(_OWORD *)(v747 + 344) = 0u;
  *(_OWORD *)(v747 + 360) = 0u;
  *(_OWORD *)(v747 + 376) = 0u;
  *(_OWORD *)(v747 + 392) = 0u;
  *(_OWORD *)(v747 + 408) = 0u;
  *(_OWORD *)(v747 + 424) = 0u;
  *(_OWORD *)(v747 + 440) = 0u;
  *(_OWORD *)(v747 + 456) = 0u;
  *(_OWORD *)(v747 + 472) = 0u;
  *(_OWORD *)(v747 + 488) = 0u;
  *(_OWORD *)(v747 + 504) = 0u;
  *(_OWORD *)(v747 + 520) = 0u;
  *(_OWORD *)(v747 + 536) = 0u;
  *(_OWORD *)(v747 + 40) = xmmword_1CFAC6620;
  *((void *)v747 + 2) = 0;
  *((void *)v747 + 3) = v747 + 40;
  *(_OWORD *)(v747 + 56) = xmmword_1CFAC4740;
  *(_OWORD *)(v747 + 72) = xmmword_1CFAC4740;
  *((void *)v747 + 4) = 0x2000000003;
  char v748 = *(llvm::raw_ostream **)v298;
  __p[0] = v747 + 24;
  __p[1] = v747;
  unsigned int v749 = sub_1CC1F7CDC((uint64_t)v748, (uint64_t)__p);
  uint64_t v750 = (std::__shared_weak_count *)__p[1];
  if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v750->__on_zero_shared)(v750);
    std::__shared_weak_count::__release_weak(v750);
  }
  uint64_t v751 = *(void *)(v298 + 16);
  uint64_t v752 = v751 + 24;
  uint64_t v753 = *(void *)(v751 + 32);
  while (2)
  {
    if (v753 != v752)
    {
      if (v753) {
        uint64_t v754 = v753 - 56;
      }
      else {
        uint64_t v754 = 0;
      }
      if (v753 && *(unsigned char *)(v754 + 16) == 3)
      {
        if ((*(_DWORD *)(v754 + 20) & 0x7FFFFFF) == 0) {
          goto LABEL_1329;
        }
      }
      else if (!*(unsigned char *)(v754 + 16) && *(void *)(v754 + 72) == v754 + 72 && (*(unsigned char *)(v754 + 34) & 0x80) == 0)
      {
        goto LABEL_1329;
      }
      uint64_t v877 = (void *)llvm::ValueEnumerator::getValueID((uint64_t)v291, v754);
      int v880 = (void *)v754;
      uint64_t v878 = ((sub_1CBFB13A8((uint64_t *)&v875, &v880)[1] - *(void *)(v298 + 664)) >> 5) + 1;
      sub_1CC20B05C(*(int **)v298, 3u, (uint64_t)&v877, v749);
LABEL_1329:
      uint64_t v753 = *(void *)(v753 + 8);
      continue;
    }
    break;
  }
  sub_1CC1F7D44(*(void *)v298);
  if (*(unsigned char *)(v298 + 552))
  {
    llvm::SHA1::update((_DWORD *)(v298 + 568), (unsigned char *)(**(void **)(v298 + 544) + v824), *(void *)(*(void *)(v298 + 544) + 8) - v824);
    uint64_t v878 = 0;
    uint64_t v877 = 0;
    v879[0] = 0;
    llvm::SHA1::result((llvm::SHA1 *)(v298 + 568), (uint64_t)&v877);
    unint64_t v756 = 0;
    do
    {
      *(_DWORD *)((char *)__p + v756) = bswap32(*(_DWORD *)((char *)&v877 + v756));
      BOOL v313 = v756 >= 0x10;
      v756 += 4;
    }
    while (!v313);
    sub_1CD4FDB6C(*(void *)v298, (uint64_t)__p);
    uint64_t v757 = *(void *)(v298 + 560);
    if (v757)
    {
      *(_OWORD *)uint64_t v757 = *(_OWORD *)__p;
      *(_DWORD *)(v757 + 16) = v884[0];
    }
  }
  sub_1CC1F7D44(*(void *)v298);
  return MEMORY[0x1D25D9CD0](v875, 8);
}

void llvm::BitcodeWriter::writeIndex(uint64_t a1, llvm::ModuleSummaryIndex *a2, void *a3)
{
  uint64_t v298 = *MEMORY[0x1E4F143B8];
  BOOL v252 = *(llvm::raw_ostream **)(a1 + 8);
  uint64_t v253 = a1 + 16;
  uint64_t v254 = a2;
  uint64_t v255 = a3;
  v257[0] = 0;
  v257[1] = 0;
  uint64_t v256 = (uint64_t *)v257;
  int v258 = 0;
  if (a3)
  {
    uint64_t v11 = a3 + 1;
    uint64_t v12 = (void *)*a3;
    if ((void *)*a3 != a3 + 1)
    {
      do
      {
        uint64_t v13 = v12[7];
        uint64_t v14 = *((unsigned int *)v12 + 18);
        unsigned int v15 = (unint64_t *)(v13 + 16 * v14);
        if (*((_DWORD *)v12 + 16))
        {
          if (*((_DWORD *)v12 + 18))
          {
            uint64_t v16 = 16 * v14;
            unint64_t v17 = (unint64_t *)v12[7];
            while (*v17 >= 0xFFFFFFFFFFFFFFFELL)
            {
              v17 += 2;
              v16 -= 16;
              if (!v16) {
                goto LABEL_19;
              }
            }
          }
          else
          {
            unint64_t v17 = (unint64_t *)v12[7];
          }
        }
        else
        {
LABEL_19:
          unint64_t v17 = (unint64_t *)(v13 + 16 * v14);
        }
        unint64_t v18 = (unint64_t *)(v13 + 16 * v14);
LABEL_22:
        while (v17 != v18)
        {
          long long v293 = *(_OWORD *)v17;
          int v19 = ++v258;
          *((_DWORD *)sub_1CD4FD4E8(&v256, v293, (uint64_t **)&v293) + 10) = v19;
          unint64_t v20 = v17[1];
          if (v20) {
            BOOL v21 = *(_DWORD *)(v20 + 8) == 0;
          }
          else {
            BOOL v21 = 0;
          }
          if (v21)
          {
            uint64_t v25 = *(void *)(v20 + 64);
            uint64_t v24 = *(void *)(v20 + 72);
            *(void *)&long long v293 = *(void *)(v25 & 0xFFFFFFFFFFFFFFF8);
            *((void *)&v293 + 1) = v24;
            int v26 = ++v258;
            *((_DWORD *)sub_1CD4FD4E8(&v256, v293, (uint64_t **)&v293) + 10) = v26;
          }
          uint64_t v22 = v17 + 2;
          while (v22 != v15)
          {
            unint64_t v23 = *v22;
            v22 += 2;
            if (v23 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v17 = v22 - 2;
              goto LABEL_22;
            }
          }
          unint64_t v17 = v15;
        }
        unint64_t v27 = (void *)v12[1];
        if (v27)
        {
          do
          {
            char v28 = v27;
            unint64_t v27 = (void *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            char v28 = (void *)v12[2];
            BOOL v21 = *v28 == (void)v12;
            uint64_t v12 = v28;
          }
          while (!v21);
        }
        uint64_t v12 = v28;
      }
      while (v28 != v11);
    }
  }
  else
  {
    unsigned int v4 = (void *)((char *)a2 + 8);
    int v3 = *(void **)a2;
    if (*(llvm::ModuleSummaryIndex **)a2 != (llvm::ModuleSummaryIndex *)((char *)a2 + 8))
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[7];
        uint64_t v6 = (uint64_t *)v3[8];
        while (v5 != v6)
        {
          uint64_t v7 = *v5++;
          *(void *)&long long v293 = v3[4];
          *((void *)&v293 + 1) = v7;
          int v8 = ++v258;
          *((_DWORD *)sub_1CD4FD4E8(&v256, v293, (uint64_t **)&v293) + 10) = v8;
        }
        uint64_t v9 = (void *)v3[1];
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (void *)v3[2];
            BOOL v21 = *v10 == (void)v3;
            int v3 = v10;
          }
          while (!v21);
        }
        int v3 = v10;
      }
      while (v10 != v4);
    }
  }
  sub_1CC1F77A4((uint64_t)v252, 8u, 3u);
  Flags = (void *)2;
  *(void *)&long long v293 = &Flags;
  *((void *)&v293 + 1) = 1;
  sub_1CC206B4C(v252, 1u, &v293);
  sub_1CC1F77A4((uint64_t)v252, 0x13u, 3u);
  int v29 = (char *)operator new(0x228uLL);
  *(void *)int v29 = &unk_1F2608A00;
  *((void *)v29 + 1) = 0;
  *(_OWORD *)(v29 + 104) = 0u;
  *(_OWORD *)(v29 + 120) = 0u;
  *(_OWORD *)(v29 + 136) = 0u;
  *(_OWORD *)(v29 + 152) = 0u;
  *(_OWORD *)(v29 + 168) = 0u;
  *(_OWORD *)(v29 + 184) = 0u;
  *(_OWORD *)(v29 + 200) = 0u;
  *(_OWORD *)(v29 + 216) = 0u;
  *(_OWORD *)(v29 + 232) = 0u;
  *(_OWORD *)(v29 + 248) = 0u;
  *(_OWORD *)(v29 + 264) = 0u;
  *(_OWORD *)(v29 + 280) = 0u;
  *(_OWORD *)(v29 + 296) = 0u;
  *(_OWORD *)(v29 + 312) = 0u;
  *(_OWORD *)(v29 + 328) = 0u;
  *(_OWORD *)(v29 + 344) = 0u;
  *(_OWORD *)(v29 + 360) = 0u;
  *(_OWORD *)(v29 + 376) = 0u;
  *(_OWORD *)(v29 + 392) = 0u;
  *(_OWORD *)(v29 + 408) = 0u;
  *(_OWORD *)(v29 + 424) = 0u;
  *(_OWORD *)(v29 + 440) = 0u;
  *(_OWORD *)(v29 + 456) = 0u;
  *(_OWORD *)(v29 + 472) = 0u;
  *(_OWORD *)(v29 + 488) = 0u;
  *(_OWORD *)(v29 + 504) = 0u;
  *(_OWORD *)(v29 + 520) = 0u;
  *(_OWORD *)(v29 + 536) = 0u;
  *(_OWORD *)(v29 + 40) = xmmword_1CFAC6560;
  *((void *)v29 + 2) = 0;
  *((void *)v29 + 3) = v29 + 40;
  *(_OWORD *)(v29 + 56) = xmmword_1CFAC4740;
  *(_OWORD *)(v29 + 72) = xmmword_1CFAC6570;
  unint64_t v30 = v252;
  *(_OWORD *)(v29 + 88) = xmmword_1CFAC4730;
  *((void *)v29 + 4) = 0x2000000004;
  LODWORD(v269) = 0;
  *(void *)&long long v296 = v29 + 24;
  *((void *)&v296 + 1) = v29;
  int v31 = sub_1CC1F7CDC((uint64_t)v30, (uint64_t)&v296);
  unsigned int v32 = (std::__shared_weak_count *)*((void *)&v296 + 1);
  if (*((void *)&v296 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v296 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  LODWORD(v269) = v31;
  uint64_t v33 = (char *)operator new(0x228uLL);
  *(void *)uint64_t v33 = &unk_1F2608A00;
  *((void *)v33 + 1) = 0;
  *(_OWORD *)(v33 + 104) = 0u;
  *(_OWORD *)(v33 + 120) = 0u;
  *(_OWORD *)(v33 + 136) = 0u;
  *(_OWORD *)(v33 + 152) = 0u;
  *(_OWORD *)(v33 + 168) = 0u;
  *(_OWORD *)(v33 + 184) = 0u;
  *(_OWORD *)(v33 + 200) = 0u;
  *(_OWORD *)(v33 + 216) = 0u;
  *(_OWORD *)(v33 + 232) = 0u;
  *(_OWORD *)(v33 + 248) = 0u;
  *(_OWORD *)(v33 + 264) = 0u;
  *(_OWORD *)(v33 + 280) = 0u;
  *(_OWORD *)(v33 + 296) = 0u;
  *(_OWORD *)(v33 + 312) = 0u;
  *(_OWORD *)(v33 + 328) = 0u;
  *(_OWORD *)(v33 + 344) = 0u;
  *(_OWORD *)(v33 + 360) = 0u;
  *(_OWORD *)(v33 + 376) = 0u;
  *(_OWORD *)(v33 + 392) = 0u;
  *(_OWORD *)(v33 + 408) = 0u;
  *(_OWORD *)(v33 + 424) = 0u;
  *(_OWORD *)(v33 + 440) = 0u;
  *(_OWORD *)(v33 + 456) = 0u;
  *(_OWORD *)(v33 + 472) = 0u;
  *(_OWORD *)(v33 + 488) = 0u;
  *(_OWORD *)(v33 + 504) = 0u;
  *(_OWORD *)(v33 + 520) = 0u;
  *(_OWORD *)(v33 + 536) = 0u;
  *(_OWORD *)(v33 + 40) = xmmword_1CFAC6560;
  *((void *)v33 + 2) = 0;
  *((void *)v33 + 3) = v33 + 40;
  *(_OWORD *)(v33 + 56) = xmmword_1CFAC4740;
  *(_OWORD *)(v33 + 72) = xmmword_1CFAC6570;
  uint64_t v34 = v252;
  *(_OWORD *)(v33 + 88) = xmmword_1CFAC4750;
  *((void *)v33 + 4) = 0x2000000004;
  LODWORD(v295[0]) = 0;
  int v259 = (uint64_t **)(v33 + 24);
  int v260 = (llvm::raw_ostream **)v33;
  int v35 = sub_1CC1F7CDC((uint64_t)v34, (uint64_t)&v259);
  uint64_t v36 = (std::__shared_weak_count *)v260;
  if (v260 && !atomic_fetch_add((atomic_ullong *volatile)v260 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  LODWORD(v295[0]) = v35;
  uint64_t v37 = (char *)operator new(0x228uLL);
  *(void *)uint64_t v37 = &unk_1F2608A00;
  *((void *)v37 + 1) = 0;
  *(_OWORD *)(v37 + 104) = 0u;
  *(_OWORD *)(v37 + 120) = 0u;
  *(_OWORD *)(v37 + 136) = 0u;
  *(_OWORD *)(v37 + 152) = 0u;
  *(_OWORD *)(v37 + 168) = 0u;
  *(_OWORD *)(v37 + 184) = 0u;
  *(_OWORD *)(v37 + 200) = 0u;
  *(_OWORD *)(v37 + 216) = 0u;
  *(_OWORD *)(v37 + 232) = 0u;
  *(_OWORD *)(v37 + 248) = 0u;
  *(_OWORD *)(v37 + 264) = 0u;
  *(_OWORD *)(v37 + 280) = 0u;
  *(_OWORD *)(v37 + 296) = 0u;
  *(_OWORD *)(v37 + 312) = 0u;
  *(_OWORD *)(v37 + 328) = 0u;
  *(_OWORD *)(v37 + 344) = 0u;
  *(_OWORD *)(v37 + 360) = 0u;
  *(_OWORD *)(v37 + 376) = 0u;
  *(_OWORD *)(v37 + 392) = 0u;
  *(_OWORD *)(v37 + 408) = 0u;
  *(_OWORD *)(v37 + 424) = 0u;
  *(_OWORD *)(v37 + 440) = 0u;
  *(_OWORD *)(v37 + 456) = 0u;
  *(_OWORD *)(v37 + 472) = 0u;
  *(_OWORD *)(v37 + 488) = 0u;
  *(_OWORD *)(v37 + 504) = 0u;
  *(_OWORD *)(v37 + 520) = 0u;
  *(_OWORD *)(v37 + 536) = 0u;
  *(_OWORD *)(v37 + 40) = xmmword_1CFAC6560;
  *((void *)v37 + 2) = 0;
  *((void *)v37 + 3) = v37 + 40;
  *(_OWORD *)(v37 + 56) = xmmword_1CFAC4740;
  *(_OWORD *)(v37 + 72) = xmmword_1CFAC6570;
  uint64_t v38 = v252;
  *(_OWORD *)(v37 + 88) = xmmword_1CD96EEC0;
  *((void *)v37 + 4) = 0x2000000004;
  LODWORD(v286) = 0;
  int v275 = v37 + 24;
  size_t v276 = (std::__shared_weak_count *)v37;
  int v39 = sub_1CC1F7CDC((uint64_t)v38, (uint64_t)&v275);
  uint64_t v40 = v276;
  if (v276 && !atomic_fetch_add(&v276->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  LODWORD(v286) = v39;
  int v41 = (char *)operator new(0x228uLL);
  *(void *)int v41 = &unk_1F2608A00;
  *((void *)v41 + 1) = 0;
  *(_OWORD *)(v41 + 136) = 0u;
  *(_OWORD *)(v41 + 152) = 0u;
  *(_OWORD *)(v41 + 168) = 0u;
  *(_OWORD *)(v41 + 184) = 0u;
  *(_OWORD *)(v41 + 200) = 0u;
  *(_OWORD *)(v41 + 216) = 0u;
  *(_OWORD *)(v41 + 232) = 0u;
  *(_OWORD *)(v41 + 248) = 0u;
  *(_OWORD *)(v41 + 264) = 0u;
  *(_OWORD *)(v41 + 280) = 0u;
  *(_OWORD *)(v41 + 296) = 0u;
  *(_OWORD *)(v41 + 312) = 0u;
  *(_OWORD *)(v41 + 328) = 0u;
  *(_OWORD *)(v41 + 344) = 0u;
  *(_OWORD *)(v41 + 360) = 0u;
  *(_OWORD *)(v41 + 376) = 0u;
  *(_OWORD *)(v41 + 392) = 0u;
  *(_OWORD *)(v41 + 408) = 0u;
  *(_OWORD *)(v41 + 424) = 0u;
  *(_OWORD *)(v41 + 440) = 0u;
  *(_OWORD *)(v41 + 456) = 0u;
  *(_OWORD *)(v41 + 472) = 0u;
  *(_OWORD *)(v41 + 488) = 0u;
  *(_OWORD *)(v41 + 504) = 0u;
  *(_OWORD *)(v41 + 520) = 0u;
  *(_OWORD *)(v41 + 536) = 0u;
  *(_OWORD *)(v41 + 40) = xmmword_1CFAC6580;
  *((void *)v41 + 2) = 0;
  *((void *)v41 + 3) = v41 + 40;
  *(_OWORD *)(v41 + 56) = xmmword_1CFAC6720;
  *(_OWORD *)(v41 + 72) = xmmword_1CFAC6720;
  *(_OWORD *)(v41 + 88) = xmmword_1CFAC6720;
  *(_OWORD *)(v41 + 104) = xmmword_1CFAC6720;
  uint64_t v42 = v252;
  *(_OWORD *)(v41 + 120) = xmmword_1CFAC6720;
  *((void *)v41 + 4) = 0x2000000006;
  LODWORD(v283) = 0;
  long long v273 = (uint64_t *)(v41 + 24);
  v274[0] = v41;
  int v43 = sub_1CC1F7CDC((uint64_t)v42, (uint64_t)&v273);
  int v44 = (std::__shared_weak_count *)v274[0];
  if (v274[0] && !atomic_fetch_add(v274[0] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  LODWORD(v283) = v43;
  *(void *)&long long v293 = v294;
  *((void *)&v293 + 1) = 0x4000000000;
  Flags = &v269;
  uint64_t v291 = (uint64_t)&v286;
  v292[0] = v295;
  v292[1] = &v293;
  v292[2] = &v252;
  v292[3] = &v283;
  if (v255)
  {
    int v51 = (void *)*v255;
    if ((void *)*v255 != v255 + 1)
    {
      int v248 = v255 + 1;
      do
      {
        int v52 = v254;
        char v53 = *((unsigned char *)v51 + 55);
        if (v53 >= 0) {
          unsigned int v54 = (unsigned __int8 *)(v51 + 4);
        }
        else {
          unsigned int v54 = (unsigned __int8 *)v51[4];
        }
        if (v53 >= 0) {
          size_t v55 = v53 & 0x7F;
        }
        else {
          size_t v55 = v51[5];
        }
        uint64_t v251 = *((unsigned int *)v254 + 8);
        if (v251)
        {
          int v56 = 0;
          if (v55)
          {
            size_t v57 = v55;
            size_t v58 = v54;
            do
            {
              int v59 = *v58++;
              int v56 = 33 * v56 + v59;
              --v57;
            }
            while (v57);
          }
          uint64_t v60 = *((void *)v254 + 3);
          int v61 = 1;
          int v62 = v56;
          while (1)
          {
            uint64_t v63 = v62 & (v251 - 1);
            uint64_t v64 = *(void **)(v60 + 8 * v63);
            if (v64 != (void *)-8)
            {
              if (!v64) {
                goto LABEL_86;
              }
              if (*(_DWORD *)(v60 + 8 * v251 + 8 + 4 * v63) == v56
                && v55 == *v64
                && (!v55 || !memcmp(v54, (char *)v64 + *((unsigned int *)v52 + 11), v55)))
              {
                break;
              }
            }
            int v62 = v61 + v63;
            ++v61;
          }
          if (v63 != -1 && (int)v63 != v251) {
            sub_1CC215578((uint64_t)&Flags, *(uint64_t **)(v60 + 8 * (int)v63));
          }
        }
LABEL_86:
        uint64_t v65 = (void *)v51[1];
        if (v65)
        {
          do
          {
            uint64_t v66 = v65;
            uint64_t v65 = (void *)*v65;
          }
          while (v65);
        }
        else
        {
          do
          {
            uint64_t v66 = (void *)v51[2];
            BOOL v21 = *v66 == (void)v51;
            int v51 = v66;
          }
          while (!v21);
        }
        int v51 = v66;
      }
      while (v66 != v248);
    }
  }
  else
  {
    uint64_t v45 = *((unsigned int *)v254 + 8);
    if (v45)
    {
      for (uint64_t i = (uint64_t **)*((void *)v254 + 3); !*i || *i + 1 == 0; ++i)
        ;
    }
    else
    {
      uint64_t i = (uint64_t **)*((void *)v254 + 3);
    }
    uint64_t v47 = *((void *)v254 + 3) + 8 * v45;
    if (i != (uint64_t **)v47)
    {
      int v48 = *i;
      do
      {
        sub_1CC215578((uint64_t)&Flags, v48);
        do
        {
          int v49 = i[1];
          ++i;
          int v48 = v49;
          if (v49) {
            BOOL v50 = v48 + 1 == 0;
          }
          else {
            BOOL v50 = 1;
          }
        }
        while (v50);
      }
      while (i != (uint64_t **)v47);
    }
  }
  sub_1CC1F7D44((off_t)v252);
  if ((unsigned char *)v293 != v294) {
    free((void *)v293);
  }
  sub_1CC1F77A4((uint64_t)v252, 0x14u, 3u);
  Flags = (void *)9;
  *(void *)&long long v293 = &Flags;
  *((void *)&v293 + 1) = 1;
  sub_1CC206B4C(v252, 0xAu, &v293);
  char v67 = v252;
  Flags = (void *)llvm::ModuleSummaryIndex::getFlags(v254);
  *(void *)&long long v293 = &Flags;
  *((void *)&v293 + 1) = 1;
  sub_1CC206B4C(v67, 0x14u, &v293);
  uint64_t v68 = v256;
  if (v256 != (uint64_t *)v257)
  {
    do
    {
      uint64_t v69 = v68[4];
      Flags = (void *)*((unsigned int *)v68 + 10);
      uint64_t v291 = v69;
      *(void *)&long long v293 = &Flags;
      *((void *)&v293 + 1) = 2;
      sub_1CC206B4C(v252, 0x10u, &v293);
      unint64_t v70 = (uint64_t *)v68[1];
      if (v70)
      {
        do
        {
          uint64_t v71 = v70;
          unint64_t v70 = (uint64_t *)*v70;
        }
        while (v70);
      }
      else
      {
        do
        {
          uint64_t v71 = (uint64_t *)v68[2];
          BOOL v21 = *v71 == (void)v68;
          uint64_t v68 = v71;
        }
        while (!v21);
      }
      uint64_t v68 = v71;
    }
    while (v71 != (uint64_t *)v257);
  }
  unint64_t v72 = (char *)operator new(0x228uLL);
  *(void *)unint64_t v72 = &unk_1F2608A00;
  *((void *)v72 + 1) = 0;
  *(_OWORD *)(v72 + 232) = 0u;
  *(_OWORD *)(v72 + 248) = 0u;
  *(_OWORD *)(v72 + 264) = 0u;
  *(_OWORD *)(v72 + 280) = 0u;
  *(_OWORD *)(v72 + 296) = 0u;
  *(_OWORD *)(v72 + 312) = 0u;
  *(_OWORD *)(v72 + 328) = 0u;
  *(_OWORD *)(v72 + 344) = 0u;
  *(_OWORD *)(v72 + 360) = 0u;
  *(_OWORD *)(v72 + 376) = 0u;
  *(_OWORD *)(v72 + 392) = 0u;
  *(_OWORD *)(v72 + 408) = 0u;
  *(_OWORD *)(v72 + 424) = 0u;
  *(_OWORD *)(v72 + 440) = 0u;
  *(_OWORD *)(v72 + 456) = 0u;
  *(_OWORD *)(v72 + 472) = 0u;
  *(_OWORD *)(v72 + 488) = 0u;
  *(_OWORD *)(v72 + 504) = 0u;
  *(_OWORD *)(v72 + 520) = 0u;
  *(_OWORD *)(v72 + 536) = 0u;
  *(_OWORD *)(v72 + 40) = xmmword_1CFAC65A0;
  *((void *)v72 + 2) = 0;
  *((void *)v72 + 3) = v72 + 40;
  *(_OWORD *)(v72 + 56) = xmmword_1CFAC4740;
  *(_OWORD *)(v72 + 72) = xmmword_1CFAC4740;
  *(_OWORD *)(v72 + 88) = xmmword_1CFAC4810;
  *(_OWORD *)(v72 + 104) = xmmword_1CFAC4740;
  int64x2_t v73 = vdupq_n_s64(4uLL);
  *(int64x2_t *)(v72 + 120) = v73;
  *(_OWORD *)(v72 + 136) = xmmword_1CFAC4740;
  *(int64x2_t *)(v72 + 152) = v73;
  *(int64x2_t *)(v72 + 168) = v73;
  *(int64x2_t *)(v72 + 184) = v73;
  *(_OWORD *)(v72 + 200) = xmmword_1CFAC6570;
  uint64_t v74 = v252;
  *(_OWORD *)(v72 + 216) = xmmword_1CFAC4740;
  *((void *)v72 + 4) = 0x200000000CLL;
  int v288 = 0;
  int v286 = v72 + 24;
  BOOL v287 = (std::__shared_weak_count *)v72;
  int v75 = sub_1CC1F7CDC((uint64_t)v74, (uint64_t)&v286);
  long long v76 = v287;
  if (v287 && !atomic_fetch_add(&v287->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
    std::__shared_weak_count::__release_weak(v76);
  }
  int v288 = v75;
  uint64_t v77 = (char *)operator new(0x228uLL);
  *(void *)uint64_t v77 = &unk_1F2608A00;
  *((void *)v77 + 1) = 0;
  *(_OWORD *)(v77 + 232) = 0u;
  *(_OWORD *)(v77 + 248) = 0u;
  *(_OWORD *)(v77 + 264) = 0u;
  *(_OWORD *)(v77 + 280) = 0u;
  *(_OWORD *)(v77 + 296) = 0u;
  *(_OWORD *)(v77 + 312) = 0u;
  *(_OWORD *)(v77 + 328) = 0u;
  *(_OWORD *)(v77 + 344) = 0u;
  *(_OWORD *)(v77 + 360) = 0u;
  *(_OWORD *)(v77 + 376) = 0u;
  *(_OWORD *)(v77 + 392) = 0u;
  *(_OWORD *)(v77 + 408) = 0u;
  *(_OWORD *)(v77 + 424) = 0u;
  *(_OWORD *)(v77 + 440) = 0u;
  *(_OWORD *)(v77 + 456) = 0u;
  *(_OWORD *)(v77 + 472) = 0u;
  *(_OWORD *)(v77 + 488) = 0u;
  *(_OWORD *)(v77 + 504) = 0u;
  *(_OWORD *)(v77 + 520) = 0u;
  *(_OWORD *)(v77 + 536) = 0u;
  *(_OWORD *)(v77 + 40) = xmmword_1CFAC6750;
  *((void *)v77 + 2) = 0;
  *((void *)v77 + 3) = v77 + 40;
  *(_OWORD *)(v77 + 56) = xmmword_1CFAC4740;
  *(_OWORD *)(v77 + 72) = xmmword_1CFAC4740;
  *(_OWORD *)(v77 + 88) = xmmword_1CFAC4810;
  *(_OWORD *)(v77 + 104) = xmmword_1CFAC4740;
  int64x2_t v78 = vdupq_n_s64(4uLL);
  *(int64x2_t *)(v77 + 120) = v78;
  *(_OWORD *)(v77 + 136) = xmmword_1CFAC4740;
  *(int64x2_t *)(v77 + 152) = v78;
  *(int64x2_t *)(v77 + 168) = v78;
  *(int64x2_t *)(v77 + 184) = v78;
  *(_OWORD *)(v77 + 200) = xmmword_1CFAC6570;
  unsigned int v79 = v252;
  *(_OWORD *)(v77 + 216) = xmmword_1CFAC4740;
  *((void *)v77 + 4) = 0x200000000CLL;
  int v285 = 0;
  int v283 = v77 + 24;
  int v284 = (std::__shared_weak_count *)v77;
  int v80 = sub_1CC1F7CDC((uint64_t)v79, (uint64_t)&v283);
  unsigned int v81 = v284;
  if (v284 && !atomic_fetch_add(&v284->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
    std::__shared_weak_count::__release_weak(v81);
  }
  int v285 = v80;
  int v82 = (char *)operator new(0x228uLL);
  *(void *)int v82 = &unk_1F2608A00;
  *((void *)v82 + 1) = 0;
  *(_OWORD *)(v82 + 136) = 0u;
  *(_OWORD *)(v82 + 152) = 0u;
  *(_OWORD *)(v82 + 168) = 0u;
  *(_OWORD *)(v82 + 184) = 0u;
  *(_OWORD *)(v82 + 200) = 0u;
  *(_OWORD *)(v82 + 216) = 0u;
  *(_OWORD *)(v82 + 232) = 0u;
  *(_OWORD *)(v82 + 248) = 0u;
  *(_OWORD *)(v82 + 264) = 0u;
  *(_OWORD *)(v82 + 280) = 0u;
  *(_OWORD *)(v82 + 296) = 0u;
  *(_OWORD *)(v82 + 312) = 0u;
  *(_OWORD *)(v82 + 328) = 0u;
  *(_OWORD *)(v82 + 344) = 0u;
  *(_OWORD *)(v82 + 360) = 0u;
  *(_OWORD *)(v82 + 376) = 0u;
  *(_OWORD *)(v82 + 392) = 0u;
  *(_OWORD *)(v82 + 408) = 0u;
  *(_OWORD *)(v82 + 424) = 0u;
  *(_OWORD *)(v82 + 440) = 0u;
  *(_OWORD *)(v82 + 456) = 0u;
  *(_OWORD *)(v82 + 472) = 0u;
  *(_OWORD *)(v82 + 488) = 0u;
  *(_OWORD *)(v82 + 504) = 0u;
  *(_OWORD *)(v82 + 520) = 0u;
  *(_OWORD *)(v82 + 536) = 0u;
  *(_OWORD *)(v82 + 40) = xmmword_1CFAC6760;
  *((void *)v82 + 2) = 0;
  *((void *)v82 + 3) = v82 + 40;
  *(_OWORD *)(v82 + 56) = xmmword_1CFAC4740;
  *(_OWORD *)(v82 + 72) = xmmword_1CFAC4740;
  *(_OWORD *)(v82 + 88) = xmmword_1CFAC4810;
  *(_OWORD *)(v82 + 104) = xmmword_1CFAC6570;
  __int16 v83 = v252;
  *(_OWORD *)(v82 + 120) = xmmword_1CFAC4740;
  *((void *)v82 + 4) = 0x2000000006;
  int v282 = 0;
  unint64_t v280 = v82 + 24;
  uint64_t v281 = (std::__shared_weak_count *)v82;
  int v84 = sub_1CC1F7CDC((uint64_t)v83, (uint64_t)&v280);
  uint64_t v85 = v281;
  if (v281 && !atomic_fetch_add(&v281->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
  }
  int v282 = v84;
  int v86 = (char *)operator new(0x228uLL);
  *(void *)int v86 = &unk_1F2608A00;
  *((void *)v86 + 1) = 0;
  *(_OWORD *)(v86 + 120) = 0u;
  *(_OWORD *)(v86 + 136) = 0u;
  *(_OWORD *)(v86 + 152) = 0u;
  *(_OWORD *)(v86 + 168) = 0u;
  *(_OWORD *)(v86 + 184) = 0u;
  *(_OWORD *)(v86 + 200) = 0u;
  *(_OWORD *)(v86 + 216) = 0u;
  *(_OWORD *)(v86 + 232) = 0u;
  *(_OWORD *)(v86 + 248) = 0u;
  *(_OWORD *)(v86 + 264) = 0u;
  *(_OWORD *)(v86 + 280) = 0u;
  *(_OWORD *)(v86 + 296) = 0u;
  *(_OWORD *)(v86 + 312) = 0u;
  *(_OWORD *)(v86 + 328) = 0u;
  *(_OWORD *)(v86 + 344) = 0u;
  *(_OWORD *)(v86 + 360) = 0u;
  *(_OWORD *)(v86 + 376) = 0u;
  *(_OWORD *)(v86 + 392) = 0u;
  *(_OWORD *)(v86 + 408) = 0u;
  *(_OWORD *)(v86 + 424) = 0u;
  *(_OWORD *)(v86 + 440) = 0u;
  *(_OWORD *)(v86 + 456) = 0u;
  *(_OWORD *)(v86 + 472) = 0u;
  *(_OWORD *)(v86 + 488) = 0u;
  *(_OWORD *)(v86 + 504) = 0u;
  *(_OWORD *)(v86 + 520) = 0u;
  *(_OWORD *)(v86 + 536) = 0u;
  *(_OWORD *)(v86 + 40) = xmmword_1CFAC6660;
  *((void *)v86 + 2) = 0;
  *((void *)v86 + 3) = v86 + 40;
  *(_OWORD *)(v86 + 56) = xmmword_1CFAC4740;
  *(_OWORD *)(v86 + 72) = xmmword_1CFAC4740;
  *(_OWORD *)(v86 + 88) = xmmword_1CFAC4810;
  uint64_t v87 = v252;
  *(_OWORD *)(v86 + 104) = xmmword_1CFAC4740;
  *((void *)v86 + 4) = 0x2000000005;
  char v278 = v86 + 24;
  BOOL v279 = (std::__shared_weak_count *)v86;
  unsigned int v246 = sub_1CC1F7CDC((uint64_t)v87, (uint64_t)&v278);
  unsigned int v88 = v279;
  if (v279 && !atomic_fetch_add(&v279->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
    std::__shared_weak_count::__release_weak(v88);
  }
  *(void *)&long long v293 = v294;
  *((void *)&v293 + 1) = 0x4000000000;
  int v275 = 0;
  size_t v276 = 0;
  int v277 = 0;
  Flags = v292;
  uint64_t v291 = 0x4000000000;
  v274[0] = 0;
  v274[1] = 0;
  p_Flags = &Flags;
  long long v273 = (uint64_t *)v274;
  v270[1] = 0;
  unsigned int v271 = &v252;
  uint64_t v269 = (uint64_t *)v270;
  v270[0] = 0;
  int v259 = &v269;
  int v260 = &v252;
  unsigned int v261 = &v275;
  uint64_t v262 = &v293;
  int v263 = &Flags;
  int v264 = &v282;
  BOOL v265 = &v271;
  unsigned int v266 = &v273;
  uint64_t v267 = &v285;
  int v268 = &v288;
  if (v255)
  {
    unsigned int v96 = v255 + 1;
    uint64_t v97 = (void *)*v255;
    if ((void *)*v255 != v255 + 1)
    {
      do
      {
        uint64_t v98 = v97[7];
        uint64_t v99 = *((unsigned int *)v97 + 18);
        uint64_t v100 = (unint64_t *)(v98 + 16 * v99);
        if (*((_DWORD *)v97 + 16))
        {
          if (*((_DWORD *)v97 + 18))
          {
            uint64_t v101 = 16 * v99;
            uint64_t v102 = (unint64_t *)v97[7];
            while (*v102 >= 0xFFFFFFFFFFFFFFFELL)
            {
              v102 += 2;
              v101 -= 16;
              if (!v101) {
                goto LABEL_131;
              }
            }
          }
          else
          {
            uint64_t v102 = (unint64_t *)v97[7];
          }
        }
        else
        {
LABEL_131:
          uint64_t v102 = (unint64_t *)(v98 + 16 * v99);
        }
        uint64_t v103 = (unint64_t *)(v98 + 16 * v99);
LABEL_134:
        while (v102 != v103)
        {
          sub_1CC21589C((uint64_t)&v259, (uint64_t *)*v102, v102[1]);
          unint64_t v104 = v102[1];
          if (v104) {
            BOOL v105 = *(_DWORD *)(v104 + 8) == 0;
          }
          else {
            BOOL v105 = 0;
          }
          if (v105)
          {
            uint64_t v108 = *(void *)(v104 + 72);
            *(void *)&long long v296 = *(void *)(*(void *)(v104 + 64) & 0xFFFFFFFFFFFFFFF8);
            *((void *)&v296 + 1) = v108;
            v295[0] = v108;
            sub_1CD3CFB98(&v269, (unint64_t *)&v296, (uint64_t **)&v296);
            uint64_t v109 = *(uint64_t **)(v108 + 40);
            uint64_t v110 = *(void *)(v108 + 48) - (void)v109;
            if (v110)
            {
              uint64_t v111 = 8 * (v110 >> 3);
              do
              {
                uint64_t v112 = *v109++;
                int v289 = *(uint64_t **)(v112 & 0xFFFFFFFFFFFFFFF8);
                sub_1CD3CFB98(&v269, (unint64_t *)&v289, &v289);
                v111 -= 8;
              }
              while (v111);
            }
            uint64_t v113 = v257[0];
            if (!v257[0]) {
              goto LABEL_157;
            }
            uint64_t v114 = v257;
            do
            {
              unint64_t v115 = v114;
              uint64_t v116 = v113;
              unint64_t v117 = v113[4];
              uint64_t v118 = v113 + 1;
              if (v117 >= (unint64_t)v296)
              {
                uint64_t v118 = v116;
                uint64_t v114 = (void **)v116;
              }
              uint64_t v113 = (void *)*v118;
            }
            while (v113);
            if (v114 != v257
              && (v117 >= (unint64_t)v296 ? (unsigned int v119 = v116) : (unsigned int v119 = v115), v119[4] <= (unint64_t)v296))
            {
              if (v117 >= (unint64_t)v296) {
                unsigned int v121 = v116;
              }
              else {
                unsigned int v121 = v115;
              }
              int v120 = *((_DWORD *)v121 + 10);
            }
            else
            {
LABEL_157:
              int v120 = 0;
            }
            *((_DWORD *)sub_1CD40EB18((uint64_t)&v275, v295) + 2) = v120;
          }
          uint64_t v106 = v102 + 2;
          while (v106 != v100)
          {
            unint64_t v107 = *v106;
            v106 += 2;
            if (v107 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              uint64_t v102 = v106 - 2;
              goto LABEL_134;
            }
          }
          uint64_t v102 = v100;
        }
        int v122 = (void *)v97[1];
        if (v122)
        {
          do
          {
            uint64_t v123 = v122;
            int v122 = (void *)*v122;
          }
          while (v122);
        }
        else
        {
          do
          {
            uint64_t v123 = (void *)v97[2];
            BOOL v21 = *v123 == (void)v97;
            uint64_t v97 = v123;
          }
          while (!v21);
        }
        uint64_t v97 = v123;
      }
      while (v123 != v96);
    }
  }
  else
  {
    unsigned int v89 = (char *)v254 + 8;
    uint64_t v90 = *(char **)v254;
    if (*(llvm::ModuleSummaryIndex **)v254 != (llvm::ModuleSummaryIndex *)((char *)v254 + 8))
    {
      do
      {
        uint64_t v91 = (uint64_t *)*((void *)v90 + 7);
        int v92 = (uint64_t *)*((void *)v90 + 8);
        while (v91 != v92)
        {
          uint64_t v93 = *v91++;
          sub_1CC21589C((uint64_t)&v259, *((uint64_t **)v90 + 4), v93);
        }
        uint64_t v94 = (char *)*((void *)v90 + 1);
        if (v94)
        {
          do
          {
            unint64_t v95 = v94;
            uint64_t v94 = *(char **)v94;
          }
          while (v94);
        }
        else
        {
          do
          {
            unint64_t v95 = (char *)*((void *)v90 + 2);
            BOOL v21 = *(void *)v95 == (void)v90;
            uint64_t v90 = v95;
          }
          while (!v21);
        }
        uint64_t v90 = v95;
      }
      while (v95 != v89);
    }
  }
  if (DWORD2(v293))
  {
    uint64_t v176 = (void *)v293;
    uint64_t v245 = v293 + 8 * DWORD2(v293);
    do
    {
      uint64_t v177 = *v176;
      *(void *)&long long v296 = *v176;
      uint64_t v178 = *((unsigned int *)sub_1CD40EB18((uint64_t)&v275, (uint64_t *)&v296) + 2);
      if (v291 >= (unint64_t)HIDWORD(v291)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)Flags + v291) = v178;
      unsigned int v179 = v291 + 1;
      LODWORD(v291) = v291 + 1;
      uint64_t v180 = v254;
      uint64_t v181 = *((unsigned int *)v254 + 8);
      if (v181)
      {
        uint64_t v183 = *(unsigned __int8 **)(v177 + 24);
        size_t v182 = *(void *)(v177 + 32);
        uint64_t v249 = v177;
        size_t v250 = v176;
        unsigned int v247 = v179;
        int v184 = 0;
        if (v182)
        {
          size_t v185 = v182;
          int v186 = v183;
          do
          {
            int v187 = *v186++;
            int v184 = 33 * v184 + v187;
            --v185;
          }
          while (v185);
        }
        unsigned int v188 = v181 - 1;
        uint64_t v189 = *((void *)v254 + 3);
        uint64_t v244 = *((unsigned int *)v254 + 8);
        uint64_t v190 = v189 + 8 * v181 + 8;
        int v191 = 1;
        int v192 = v184;
        while (1)
        {
          uint64_t v193 = v192 & v188;
          unsigned int v194 = *(void **)(v189 + 8 * v193);
          if (v194 != (void *)-8)
          {
            if (!v194)
            {
              uint64_t v177 = v249;
              uint64_t v176 = v250;
              goto LABEL_285;
            }
            if (*(_DWORD *)(v190 + 4 * v193) == v184
              && v182 == *v194
              && (!v182 || !memcmp(v183, (char *)v194 + *((unsigned int *)v180 + 11), v182)))
            {
              break;
            }
          }
          int v192 = v191 + v193;
          ++v191;
        }
        uint64_t v177 = v249;
        if (v193 == -1 || (int)v193 == v244) {
          unsigned int v194 = 0;
        }
        else {
          unsigned int v194 = *(void **)(*(void *)(v189 + 8 * (int)v193) + 8);
        }
        uint64_t v176 = v250;
LABEL_285:
        unsigned int v179 = v247;
      }
      else
      {
        unsigned int v194 = 0;
      }
      if (v179 >= HIDWORD(v291)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)Flags + v179) = v194;
      unsigned int v195 = v291 + 1;
      LODWORD(v291) = v195;
      if (v195 >= HIDWORD(v291)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)Flags + v195) = *(_DWORD *)(v177 + 12) & 0xFLL | (16
                                                                  * (((unint64_t)*(unsigned int *)(v177 + 12) >> 6) & 0xF)) & 0xFFFFFFFFFFFFFCFFLL | ((((unint64_t)*(unsigned int *)(v177 + 12) >> 4) & 3) << 8);
      LODWORD(v291) = v291 + 1;
      *(void *)&long long v296 = *(void *)(v177 + 72);
      uint64_t v196 = *((unsigned int *)sub_1CD40EB18((uint64_t)&v275, (uint64_t *)&v296) + 2);
      if (v291 >= (unint64_t)HIDWORD(v291)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)Flags + v291) = v196;
      LODWORD(v291) = v291 + 1;
      sub_1CC207D3C(v252, 8u, (uint64_t)&Flags, v246);
      LODWORD(v291) = 0;
      uint64_t v197 = v271;
      if (!v271[3] && (*(_WORD *)(v177 + 12) & 0xFu) - 7 <= 1)
      {
        int v198 = p_Flags;
        unint64_t v199 = *((unsigned int *)p_Flags + 2);
        if (v199 >= *((unsigned int *)p_Flags + 3)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)*p_Flags + v199) = *(void *)(v177 + 16);
        ++*((_DWORD *)v198 + 2);
        sub_1CC207D3C(*v197, 9u, (uint64_t)p_Flags, 0);
        *((_DWORD *)p_Flags + 2) = 0;
      }
      uint64_t v200 = *(void *)(v177 + 72);
      if (v200 && *(_DWORD *)(v200 + 8) == 1) {
        sub_1CC215734((uint64_t **)v200, &v273);
      }
      ++v176;
    }
    while (v176 != (void *)v245);
  }
  if (*((void *)v254 + 20))
  {
    unsigned int v124 = (char *)*((void *)v254 + 18);
    uint64_t v125 = (char *)v254 + 152;
    if (v124 != (char *)v254 + 152)
    {
      do
      {
        size_t v202 = v124 + 32;
        char v203 = v124[55];
        int v204 = v203;
        if (v203 >= 0) {
          uint64_t v205 = (int *)(v124 + 32);
        }
        else {
          uint64_t v205 = (int *)*((void *)v124 + 4);
        }
        size_t v206 = *((void *)v124 + 5);
        size_t v207 = v203 & 0x7F;
        if (v204 >= 0) {
          size_t v206 = v207;
        }
        if (v206)
        {
          int v208 = *(unsigned __int8 *)v205;
          if (v208 == 1) {
            size_t v209 = v206 - 1;
          }
          else {
            size_t v209 = v206;
          }
          if (v208 == 1) {
            uint64_t v205 = (int *)((char *)v205 + 1);
          }
        }
        else
        {
          size_t v209 = 0;
        }
        long long v296 = xmmword_1CFAC4320;
        uint64_t v297 = 0;
        llvm::MD5::update((int *)&v296, v205, v209);
        llvm::MD5::final((int *)&v296, (int *)v295);
        for (uint64_t j = v270[0]; j; uint64_t j = (void *)*j)
        {
          unint64_t v211 = j[4];
          if (v295[0] >= v211)
          {
            if (v211 >= v295[0])
            {
              uint64_t v212 = v253;
              char v213 = v124[55];
              BOOL v214 = v213 < 0;
              if (v213 < 0) {
                size_t v202 = (void *)*((void *)v124 + 4);
              }
              uint64_t v215 = v213 & 0x7F;
              if (v214) {
                uint64_t v216 = *((void *)v124 + 5);
              }
              else {
                uint64_t v216 = v215;
              }
              unsigned int v217 = sub_1CD0B03C8(v202, (uint64_t)v202 + v216);
              unint64_t v218 = llvm::StringTableBuilder::add(v212, (uint64_t)v202, v216 | ((unint64_t)v217 << 32));
              if (v291 >= (unint64_t)HIDWORD(v291)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)Flags + v291) = v218;
              unsigned int v219 = v291 + 1;
              LODWORD(v291) = v291 + 1;
              if (v124[55] < 0) {
                uint64_t v220 = *((void *)v124 + 5);
              }
              else {
                uint64_t v220 = v124[55];
              }
              if (v219 >= HIDWORD(v291)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)Flags + v219) = v220;
              LODWORD(v291) = v291 + 1;
              break;
            }
            ++j;
          }
        }
        int v221 = (char *)*((void *)v124 + 1);
        if (v221)
        {
          do
          {
            uint64_t v222 = v221;
            int v221 = *(char **)v221;
          }
          while (v221);
        }
        else
        {
          do
          {
            uint64_t v222 = (char *)*((void *)v124 + 2);
            BOOL v21 = *(void *)v222 == (void)v124;
            unsigned int v124 = v222;
          }
          while (!v21);
        }
        unsigned int v124 = v222;
      }
      while (v222 != v125);
    }
    if (v291)
    {
      sub_1CC207D3C(v252, 0x11u, (uint64_t)&Flags, 0);
      LODWORD(v291) = 0;
    }
  }
  if (*((void *)v254 + 23))
  {
    uint64_t v126 = (char *)*((void *)v254 + 21);
    unsigned int v127 = (char *)v254 + 176;
    if (v126 != (char *)v254 + 176)
    {
      do
      {
        int v223 = v126 + 32;
        char v224 = v126[55];
        int v225 = v224;
        if (v224 >= 0) {
          int v226 = (int *)(v126 + 32);
        }
        else {
          int v226 = (int *)*((void *)v126 + 4);
        }
        size_t v227 = *((void *)v126 + 5);
        size_t v228 = v224 & 0x7F;
        if (v225 >= 0) {
          size_t v227 = v228;
        }
        if (v227)
        {
          int v229 = *(unsigned __int8 *)v226;
          if (v229 == 1) {
            size_t v230 = v227 - 1;
          }
          else {
            size_t v230 = v227;
          }
          if (v229 == 1) {
            int v226 = (int *)((char *)v226 + 1);
          }
        }
        else
        {
          size_t v230 = 0;
        }
        long long v296 = xmmword_1CFAC4320;
        uint64_t v297 = 0;
        llvm::MD5::update((int *)&v296, v226, v230);
        llvm::MD5::final((int *)&v296, (int *)v295);
        for (uint64_t k = v270[0]; k; uint64_t k = (void *)*k)
        {
          unint64_t v232 = k[4];
          if (v295[0] >= v232)
          {
            if (v232 >= v295[0])
            {
              uint64_t v233 = v253;
              char v234 = v126[55];
              BOOL v235 = v234 < 0;
              if (v234 < 0) {
                int v223 = (void *)*((void *)v126 + 4);
              }
              uint64_t v236 = v234 & 0x7F;
              if (v235) {
                uint64_t v237 = *((void *)v126 + 5);
              }
              else {
                uint64_t v237 = v236;
              }
              unsigned int v238 = sub_1CD0B03C8(v223, (uint64_t)v223 + v237);
              unint64_t v239 = llvm::StringTableBuilder::add(v233, (uint64_t)v223, v237 | ((unint64_t)v238 << 32));
              if (v291 >= (unint64_t)HIDWORD(v291)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)Flags + v291) = v239;
              unsigned int v240 = v291 + 1;
              LODWORD(v291) = v291 + 1;
              if (v126[55] < 0) {
                uint64_t v241 = *((void *)v126 + 5);
              }
              else {
                uint64_t v241 = v126[55];
              }
              if (v240 >= HIDWORD(v291)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)Flags + v240) = v241;
              LODWORD(v291) = v291 + 1;
              break;
            }
            ++k;
          }
        }
        int v242 = (char *)*((void *)v126 + 1);
        if (v242)
        {
          do
          {
            uint64_t v243 = v242;
            int v242 = *(char **)v242;
          }
          while (v242);
        }
        else
        {
          do
          {
            uint64_t v243 = (char *)*((void *)v126 + 2);
            BOOL v21 = *(void *)v243 == (void)v126;
            uint64_t v126 = v243;
          }
          while (!v21);
        }
        uint64_t v126 = v243;
      }
      while (v243 != v127);
    }
    if (v291)
    {
      sub_1CC207D3C(v252, 0x12u, (uint64_t)&Flags, 0);
      LODWORD(v291) = 0;
    }
  }
  unsigned int v128 = v273;
  if (v273 != (uint64_t *)v274)
  {
    do
    {
      unsigned int v129 = sub_1CD4F29A8((uint64_t)v254 + 56, (unint64_t *)v128 + 4);
      if (v129 != v130)
      {
        int v133 = v129;
        unsigned int v134 = v130;
        do
        {
          uint64_t v135 = v253;
          char v136 = *((unsigned char *)v133 + 63);
          if (v136 >= 0) {
            uint64_t v137 = v133 + 5;
          }
          else {
            uint64_t v137 = (void *)v133[5];
          }
          if (v136 >= 0) {
            uint64_t v138 = v136 & 0x7F;
          }
          else {
            uint64_t v138 = v133[6];
          }
          unsigned int v139 = sub_1CD0B03C8(v137, (uint64_t)v137 + v138);
          unint64_t v140 = llvm::StringTableBuilder::add(v135, (uint64_t)v137, v138 | ((unint64_t)v139 << 32));
          if (v291 >= (unint64_t)HIDWORD(v291)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)Flags + v291) = v140;
          unsigned int v141 = v291 + 1;
          LODWORD(v291) = v291 + 1;
          char v142 = *((unsigned char *)v133 + 63);
          int v143 = v142;
          uint64_t v144 = v142 & 0x7F;
          if (v143 >= 0) {
            uint64_t v145 = v144;
          }
          else {
            uint64_t v145 = v133[6];
          }
          if (v141 >= HIDWORD(v291)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)Flags + v141) = v145;
          unsigned int v146 = v291 + 1;
          LODWORD(v291) = v146;
          if (v146 >= HIDWORD(v291)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)Flags + v146) = *((unsigned int *)v133 + 16);
          unsigned int v147 = v291 + 1;
          LODWORD(v291) = v147;
          if (v147 >= HIDWORD(v291)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)Flags + v147) = *((unsigned int *)v133 + 17);
          unsigned int v148 = v291 + 1;
          LODWORD(v291) = v148;
          if (v148 >= HIDWORD(v291)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)Flags + v148) = v133[9];
          unsigned int v149 = v291 + 1;
          LODWORD(v291) = v149;
          if (v149 >= HIDWORD(v291)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)Flags + v149) = v133[10];
          unsigned int v150 = v291 + 1;
          LODWORD(v291) = v150;
          if (v150 >= HIDWORD(v291)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)Flags + v150) = *((unsigned __int8 *)v133 + 88);
          unsigned int v151 = v291 + 1;
          LODWORD(v291) = v151;
          if (v151 >= HIDWORD(v291)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)Flags + v151) = v133[12];
          unsigned int v152 = v291 + 1;
          LODWORD(v291) = v291 + 1;
          uint64_t v153 = (void *)v133[13];
          if (v153 != v133 + 14)
          {
            do
            {
              if (v152 >= HIDWORD(v291)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)Flags + v152) = v153[4];
              unsigned int v154 = v291 + 1;
              LODWORD(v291) = v154;
              if (v154 >= HIDWORD(v291)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)Flags + v154) = *((unsigned int *)v153 + 10);
              LODWORD(v291) = v291 + 1;
              char v155 = *((unsigned char *)v153 + 71);
              if (v155 >= 0) {
                unsigned int v156 = v153 + 6;
              }
              else {
                unsigned int v156 = (void *)v153[6];
              }
              if (v155 >= 0) {
                uint64_t v157 = v155 & 0x7F;
              }
              else {
                uint64_t v157 = v153[7];
              }
              unsigned int v158 = sub_1CD0B03C8(v156, (uint64_t)v156 + v157);
              unint64_t v159 = llvm::StringTableBuilder::add(v135, (uint64_t)v156, v157 | ((unint64_t)v158 << 32));
              if (v291 >= (unint64_t)HIDWORD(v291)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)Flags + v291) = v159;
              unsigned int v160 = v291 + 1;
              LODWORD(v291) = v291 + 1;
              char v161 = *((unsigned char *)v153 + 71);
              int v162 = v161;
              uint64_t v163 = v161 & 0x7F;
              if (v162 >= 0) {
                uint64_t v164 = v163;
              }
              else {
                uint64_t v164 = v153[7];
              }
              if (v160 >= HIDWORD(v291)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)Flags + v160) = v164;
              unsigned int v165 = v291 + 1;
              LODWORD(v291) = v165;
              if (v165 >= HIDWORD(v291)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)Flags + v165) = v153[11];
              unsigned int v152 = v291 + 1;
              LODWORD(v291) = v291 + 1;
              uint64_t v166 = (void *)v153[9];
              if (v166 != v153 + 10)
              {
                do
                {
                  if (v152 >= HIDWORD(v291)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)Flags + v152) = (uint64_t)(v166[5] - v166[4]) >> 3;
                  LODWORD(v291) = v291 + 1;
                  sub_1CD4FD9BC((unsigned int *)&Flags, (uint64_t)Flags + 8 * v291, (char *)v166[4], (char *)v166[5]);
                  if (v291 >= (unint64_t)HIDWORD(v291)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)Flags + v291) = *((unsigned int *)v166 + 14);
                  unsigned int v167 = v291 + 1;
                  LODWORD(v291) = v167;
                  if (v167 >= HIDWORD(v291)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)Flags + v167) = v166[8];
                  unsigned int v168 = v291 + 1;
                  LODWORD(v291) = v168;
                  if (v168 >= HIDWORD(v291)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)Flags + v168) = *((unsigned int *)v166 + 18);
                  unsigned int v169 = v291 + 1;
                  LODWORD(v291) = v169;
                  if (v169 >= HIDWORD(v291)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)Flags + v169) = *((unsigned int *)v166 + 19);
                  unsigned int v152 = v291 + 1;
                  LODWORD(v291) = v291 + 1;
                  uint64_t v170 = (void *)v166[1];
                  if (v170)
                  {
                    do
                    {
                      uint64_t v171 = v170;
                      uint64_t v170 = (void *)*v170;
                    }
                    while (v170);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v171 = (void *)v166[2];
                      BOOL v21 = *v171 == (void)v166;
                      uint64_t v166 = v171;
                    }
                    while (!v21);
                  }
                  uint64_t v166 = v171;
                }
                while (v171 != v153 + 10);
              }
              uint64_t v172 = (void *)v153[1];
              if (v172)
              {
                do
                {
                  uint64_t v173 = v172;
                  uint64_t v172 = (void *)*v172;
                }
                while (v172);
              }
              else
              {
                do
                {
                  uint64_t v173 = (void *)v153[2];
                  BOOL v21 = *v173 == (void)v153;
                  uint64_t v153 = v173;
                }
                while (!v21);
              }
              uint64_t v153 = v173;
            }
            while (v173 != v133 + 14);
          }
          sub_1CC207D3C(v252, 0x15u, (uint64_t)&Flags, 0);
          LODWORD(v291) = 0;
          uint64_t v174 = (void *)v133[1];
          if (v174)
          {
            do
            {
              uint64_t v175 = v174;
              uint64_t v174 = (void *)*v174;
            }
            while (v174);
          }
          else
          {
            do
            {
              uint64_t v175 = (void *)v133[2];
              BOOL v21 = *v175 == (void)v133;
              int v133 = v175;
            }
            while (!v21);
          }
          int v133 = v175;
        }
        while (v175 != v134);
      }
      uint64_t v131 = (uint64_t *)v128[1];
      if (v131)
      {
        do
        {
          uint64_t v132 = v131;
          uint64_t v131 = (uint64_t *)*v131;
        }
        while (v131);
      }
      else
      {
        do
        {
          uint64_t v132 = (uint64_t *)v128[2];
          BOOL v21 = *v132 == (void)v128;
          unsigned int v128 = v132;
        }
        while (!v21);
      }
      unsigned int v128 = v132;
    }
    while (v132 != (uint64_t *)v274);
  }
  v295[0] = *((void *)v254 + 37);
  *(void *)&long long v296 = v295;
  *((void *)&v296 + 1) = 1;
  sub_1CC206B4C(v252, 0x18u, &v296);
  sub_1CC1F7D44((off_t)v252);
  sub_1CB833A08((uint64_t)&v269, v270[0]);
  sub_1CB833A08((uint64_t)&v273, v274[0]);
  if (Flags != v292) {
    free(Flags);
  }
  MEMORY[0x1D25D9CD0](v275, 8);
  if ((unsigned char *)v293 != v294) {
    free((void *)v293);
  }
  sub_1CC1F7D44((off_t)v252);
  sub_1CD3C5048((uint64_t)&v256, v257[0]);
}

char *sub_1CC202034(uint64_t *a1, uint64_t a2, size_t __len, int __c)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a2 - *a1;
  size_t v10 = v8 + __len;
  size_t v11 = a1[2];
  if (*a1 + v8 == a2)
  {
    if (v10 > v11) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    if (__len)
    {
      memset((void *)(v7 + v8), __c, __len);
      uint64_t v7 = *a1;
      uint64_t v8 = a1[1];
    }
    a1[1] = v8 + __len;
    return (char *)(v7 + v9);
  }
  else
  {
    uint64_t v16 = a2 - *a1;
    if (v10 > v11) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v14 = (char *)(v7 + v8);
    int __src = (char *)(v7 + v16);
    size_t v15 = v8 - v16;
    if (__len <= v8 - v16)
    {
      sub_1CC2171BC(a1, &v14[-__len], (char *)(v7 + v8));
      if (&v14[-__len] != __src) {
        memmove(&__src[__len], __src, &v14[-__len] - __src);
      }
      if (__len)
      {
        uint64_t v12 = __src;
        memset(__src, __c, __len);
        return v12;
      }
    }
    else
    {
      a1[1] = v8 + __len;
      if (v16 != v8)
      {
        memcpy((void *)(v7 + __len + v16), __src, v8 - v16);
        memset(__src, __c, v15);
      }
      if (__len != v15) {
        memset(v14, __c, __len - v15);
      }
    }
    return __src;
  }
}

BOOL sub_1CC2021B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    int v2 = *a1;
    if (v2 == 222)
    {
      if (a1[1] == 192 && a1[2] == 23 && a1[3] == 11) {
        return 1;
      }
    }
    else if (v2 == 66 && a1[1] == 67 && a1[2] == 192)
    {
      return a1[3] == 222;
    }
  }
  return 0;
}

uint64_t sub_1CC202230(uint64_t result, unsigned int a2, int a3)
{
  int v3 = *(_DWORD *)(result + 24);
  int v4 = *(_DWORD *)(result + 28) | (a2 << v3);
  *(_DWORD *)(result + 28) = v4;
  unsigned int v5 = v3 + a3;
  if (v5 >= 0x20)
  {
    uint64_t v6 = *(void **)result;
    uint64_t v7 = *(void *)(*(void *)result + 8);
    if (*(void *)(*(void *)result + 16) < (unint64_t)(v7 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)(*v6 + v7) = v4;
    v6[1] += 4;
    uint64_t v8 = *(llvm::raw_ostream **)(result + 8);
    if (v8)
    {
      size_t v11 = *(void *)(*(void *)result + 8);
      if (v11 >= *(void *)(result + 16))
      {
        uint64_t v14 = result;
        unsigned int v13 = a2;
        char v12 = a3;
        llvm::raw_ostream::write(v8, **(const char ***)result, v11);
        a2 = v13;
        LOBYTE(a3) = v12;
        BOOL result = v14;
        *(void *)(*(void *)v14 + 8) = 0;
      }
    }
    int v9 = *(_DWORD *)(result + 24);
    unsigned int v10 = a2 >> -(char)v9;
    if (!v9) {
      unsigned int v10 = 0;
    }
    *(_DWORD *)(result + 28) = v10;
    unsigned int v5 = ((_BYTE)v9 + (_BYTE)a3) & 0x1F;
  }
  *(_DWORD *)(result + 24) = v5;
  return result;
}

llvm::raw_ostream *sub_1CC202350(const char ***a1, int a2)
{
  int v3 = *a1;
  int v4 = (*a1)[1];
  if ((*a1)[2] < v4 + 4) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *(_DWORD *)&v4[(void)*v3] = a2;
  v3[1] += 4;
  BOOL result = (llvm::raw_ostream *)a1[1];
  if (result)
  {
    size_t v6 = (size_t)(*a1)[1];
    if (v6 >= (unint64_t)a1[2])
    {
      BOOL result = llvm::raw_ostream::write(result, **a1, v6);
      (*a1)[1] = 0;
    }
  }
  return result;
}

uint64_t sub_1CC2023EC(uint64_t *a1, _DWORD *a2, uint64_t *a3)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    abort();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v24 = a1 + 2;
  if (v6 > 0x666666666666666) {
    sub_1CB833614();
  }
  uint64_t v9 = 5 * v6;
  unsigned int v10 = (char *)operator new(40 * v6);
  size_t v11 = &v10[40 * v3];
  std::string __p = v10;
  BOOL v21 = v11;
  uint64_t v12 = *a3;
  *(_DWORD *)size_t v11 = *a2;
  *((void *)v11 + 1) = v12;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 0;
  uint64_t v22 = (void **)(v11 + 40);
  unint64_t v23 = &v10[8 * v9];
  sub_1CC202530(a1, &__p);
  uint64_t v13 = a1[1];
  uint64_t v14 = (void **)v21;
LABEL_9:
  for (uint64_t i = v22; i != v14; uint64_t i = v17 - 2)
  {
    uint64_t v18 = (uint64_t)*(i - 3);
    unint64_t v17 = i - 3;
    uint64_t v16 = v18;
    uint64_t v22 = v17 - 2;
    if (v18)
    {
      sub_1CC1CAA74((uint64_t)v17, v16);
      operator delete(*v17);
      goto LABEL_9;
    }
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

uint64_t *sub_1CC202530(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 40;
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - 8) = 0;
      *(void *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      v3 -= 40;
      v4 -= 40;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v6 = *result;
  llvm::raw_ostream *result = v5;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1CC2025C4(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a2 - *a1;
  uint64_t v7 = (void *)(*a1 + (v6 & 0xFFFFFFFFFFFFFFF0));
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = a3;
  uint64_t v11 = v6 >> 4;
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[1];
  if (a5 > (uint64_t)(v12 - v13) >> 4)
  {
    unint64_t v14 = a5 + ((uint64_t)(v13 - v5) >> 4);
    if (v14 >> 60) {
      abort();
    }
    uint64_t v15 = v12 - v5;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    uint64_t v42 = a1 + 2;
    if (v16)
    {
      if (v16 >> 60) {
        sub_1CB833614();
      }
      unint64_t v17 = (char *)operator new(16 * v16);
    }
    else
    {
      unint64_t v17 = 0;
    }
    uint64_t v24 = (uint64_t *)&v17[16 * v11];
    std::string __p = v17;
    int v39 = v24;
    int v41 = &v17[16 * v16];
    uint64_t v25 = &v24[2 * a5];
    do
    {
      *uint64_t v24 = *v9;
      uint64_t v26 = v9[1];
      v24[1] = v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      v24 += 2;
      v9 += 2;
    }
    while (v24 != v25);
    uint64_t v40 = v25;
    uint64_t v7 = (void *)sub_1CC20287C(a1, &__p, v7);
    char v28 = v39;
    for (uint64_t i = v40; v40 != v28; uint64_t i = v40)
    {
      uint64_t v40 = i - 2;
      int v29 = (std::__shared_weak_count *)*(i - 1);
      if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (__p) {
      operator delete(__p);
    }
    return v7;
  }
  uint64_t v18 = (uint64_t)(v13 - (void)v7) >> 4;
  if (v18 >= a5)
  {
    int v19 = &a3[2 * a5];
    unint64_t v20 = (char *)a1[1];
LABEL_34:
    unint64_t v30 = (char *)&v7[2 * a5];
    int v31 = &v20[-16 * a5];
    unsigned int v32 = v20;
    if ((unint64_t)v31 < v13)
    {
      unsigned int v32 = v20;
      do
      {
        *(_OWORD *)unsigned int v32 = *(_OWORD *)v31;
        v32 += 16;
        *(void *)int v31 = 0;
        *((void *)v31 + 1) = 0;
        v31 += 16;
      }
      while ((unint64_t)v31 < v13);
    }
    a1[1] = (uint64_t)v32;
    if (v20 != v30)
    {
      uint64_t v33 = (uint64_t)(v20 - 16);
      uint64_t v34 = 16 * ((v20 - v30) >> 4);
      uint64_t v35 = v5 + 16 * v11 - 16;
      do
      {
        sub_1CC202928(v33, (long long *)(v35 + v34));
        v33 -= 16;
        v34 -= 16;
      }
      while (v34);
    }
    if (v19 != v9)
    {
      uint64_t v36 = v7;
      do
      {
        sub_1CBF4C340(v36, v9);
        v9 += 2;
        v36 += 2;
      }
      while (v9 != v19);
    }
    return v7;
  }
  int v19 = &a3[2 * v18];
  if (v19 == a4)
  {
    unint64_t v20 = (char *)a1[1];
  }
  else
  {
    unint64_t v20 = (char *)a1[1];
    BOOL v21 = v19;
    uint64_t v22 = v20;
    do
    {
      void *v22 = *v21;
      uint64_t v23 = v21[1];
      v22[1] = v23;
      if (v23) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
      }
      v20 += 16;
      v21 += 2;
      v22 += 2;
    }
    while (v21 != a4);
  }
  a1[1] = (uint64_t)v20;
  if ((uint64_t)(v13 - (void)v7) >= 1) {
    goto LABEL_34;
  }
  return v7;
}

uint64_t sub_1CC20287C(void *a1, void *a2, void *a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = (void *)*a1;
  uint64_t v6 = result;
  if ((void *)*a1 != a3)
  {
    uint64_t v12 = a3;
    uint64_t v6 = a2[1];
    do
    {
      long long v13 = *((_OWORD *)v12 - 1);
      v12 -= 2;
      *(_OWORD *)(v6 - 16) = v13;
      v6 -= 16;
      void *v12 = 0;
      v12[1] = 0;
    }
    while (v12 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = (void *)a1[1];
  uint64_t v8 = (_OWORD *)a2[2];
  if (v7 != a3)
  {
    do
    {
      *v8++ = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      a3 += 2;
    }
    while (a3 != v7);
    uint64_t v6 = a2[1];
  }
  a2[2] = v8;
  uint64_t v9 = (void *)*a1;
  *a1 = v6;
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1CC202928(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

llvm::raw_ostream *sub_1CC2029A0(llvm::raw_ostream *result, uint64_t *a2)
{
  uint64_t v3 = (uint64_t)result;
  int v4 = *((_DWORD *)result + 8);
  int v5 = *((_DWORD *)result + 6);
  unsigned int v6 = *((_DWORD *)result + 7) | (2 << v5);
  *((_DWORD *)result + 7) = v6;
  unsigned int v7 = v5 + v4;
  if ((v5 + v4) >= 0x20)
  {
    uint64_t v35 = *(void **)result;
    uint64_t v36 = *(void *)(*(void *)result + 8);
    if (*(void *)(*(void *)result + 16) < (unint64_t)(v36 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)(*v35 + v36) = v6;
    v35[1] += 4;
    uint64_t result = (llvm::raw_ostream *)*((void *)result + 1);
    if (result)
    {
      size_t v44 = *(void *)(*(void *)v3 + 8);
      if (v44 >= *(void *)(v3 + 16))
      {
        uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v3, v44);
        *(void *)(*(void *)v3 + 8) = 0;
      }
    }
    int v37 = *(_DWORD *)(v3 + 24);
    if (v37) {
      unsigned int v6 = 2u >> -(char)v37;
    }
    else {
      unsigned int v6 = 0;
    }
    unsigned int v7 = ((_BYTE)v37 + (_BYTE)v4) & 0x1F;
  }
  *(_DWORD *)(v3 + 24) = v7;
  unsigned int v8 = *((_DWORD *)a2 + 2);
  if (v8 >= 0x10)
  {
    do
    {
      unsigned int v46 = v8 & 0xF | 0x10;
      v6 |= v46 << v7;
      *(_DWORD *)(v3 + 28) = v6;
      if (v7 >= 0x1B)
      {
        int v48 = *(const char ***)v3;
        uint64_t v49 = *(void *)(*(void *)v3 + 8);
        if (*(void *)(*(void *)v3 + 16) < (unint64_t)(v49 + 4)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(_DWORD *)&(*v48)[v49] = v6;
        v48[1] += 4;
        uint64_t result = *(llvm::raw_ostream **)(v3 + 8);
        if (result)
        {
          size_t v51 = *(void *)(*(void *)v3 + 8);
          if (v51 >= *(void *)(v3 + 16))
          {
            uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v3, v51);
            *(void *)(*(void *)v3 + 8) = 0;
          }
        }
        int v50 = *(_DWORD *)(v3 + 24);
        if (v50) {
          unsigned int v6 = v46 >> -(char)v50;
        }
        else {
          unsigned int v6 = 0;
        }
        *(_DWORD *)(v3 + 28) = v6;
        unsigned int v7 = ((_BYTE)v50 + 5) & 0x1F;
      }
      else
      {
        v7 += 5;
      }
      *(_DWORD *)(v3 + 24) = v7;
      unsigned int v9 = v8 >> 4;
      BOOL v47 = v8 > 0xFF;
      v8 >>= 4;
    }
    while (v47);
  }
  else
  {
    unsigned int v9 = *((_DWORD *)a2 + 2);
  }
  int v10 = (v9 << v7) | v6;
  *(_DWORD *)(v3 + 28) = v10;
  if (v7 >= 0x1B)
  {
    uint64_t v38 = *(const char ***)v3;
    uint64_t v39 = *(void *)(*(void *)v3 + 8);
    if (*(void *)(*(void *)v3 + 16) < (unint64_t)(v39 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)&(*v38)[v39] = v10;
    v38[1] += 4;
    uint64_t result = *(llvm::raw_ostream **)(v3 + 8);
    if (result)
    {
      size_t v45 = *(void *)(*(void *)v3 + 8);
      if (v45 >= *(void *)(v3 + 16))
      {
        uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v3, v45);
        *(void *)(*(void *)v3 + 8) = 0;
      }
    }
    int v40 = *(_DWORD *)(v3 + 24);
    unsigned int v41 = v9 >> -(char)v40;
    if (!v40) {
      unsigned int v41 = 0;
    }
    *(_DWORD *)(v3 + 28) = v41;
    int v11 = ((_BYTE)v40 + 5) & 0x1F;
  }
  else
  {
    int v11 = v7 + 5;
  }
  *(_DWORD *)(v3 + 24) = v11;
  uint64_t v12 = *((unsigned int *)a2 + 2);
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 16 * v12;
    do
    {
      uint64_t v15 = *a2;
      uint64_t v16 = *a2 + v13;
      unsigned int v17 = *(unsigned char *)(v16 + 8) & 1;
      int v18 = *(_DWORD *)(v3 + 24);
      int v19 = (v17 << v18) | *(_DWORD *)(v3 + 28);
      *(_DWORD *)(v3 + 28) = v19;
      unsigned int v20 = v18 + 1;
      if (v20 >= 0x20)
      {
        unint64_t v27 = *(const char ***)v3;
        uint64_t v28 = *(void *)(*(void *)v3 + 8);
        if (*(void *)(*(void *)v3 + 16) < (unint64_t)(v28 + 4)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(_DWORD *)&(*v27)[v28] = v19;
        v27[1] += 4;
        uint64_t result = *(llvm::raw_ostream **)(v3 + 8);
        if (result)
        {
          size_t v42 = *(void *)(*(void *)v3 + 8);
          if (v42 >= *(void *)(v3 + 16))
          {
            unsigned int v52 = v17;
            uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v3, v42);
            unsigned int v17 = v52;
            *(void *)(*(void *)v3 + 8) = 0;
          }
        }
        int v29 = *(_DWORD *)(v3 + 24);
        unsigned int v30 = v17 >> -(char)v29;
        if (v29) {
          int v19 = v30;
        }
        else {
          int v19 = 0;
        }
        *(_DWORD *)(v3 + 28) = v19;
        unsigned int v20 = (v29 + 1) & 0x1F;
      }
      *(_DWORD *)(v3 + 24) = v20;
      unsigned int v21 = *(unsigned __int8 *)(v16 + 8);
      if (v21)
      {
        int v26 = 8;
      }
      else
      {
        unsigned int v22 = (v21 >> 1) & 7;
        int v23 = (v22 << v20) | v19;
        *(_DWORD *)(v3 + 28) = v23;
        if (v20 >= 0x1D)
        {
          int v31 = *(const char ***)v3;
          uint64_t v32 = *(void *)(*(void *)v3 + 8);
          if (*(void *)(*(void *)v3 + 16) < (unint64_t)(v32 + 4)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(_DWORD *)&(*v31)[v32] = v23;
          v31[1] += 4;
          uint64_t result = *(llvm::raw_ostream **)(v3 + 8);
          if (result)
          {
            size_t v43 = *(void *)(*(void *)v3 + 8);
            if (v43 >= *(void *)(v3 + 16))
            {
              unsigned int v53 = v22;
              uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v3, v43);
              unsigned int v22 = v53;
              *(void *)(*(void *)v3 + 8) = 0;
            }
          }
          int v33 = *(_DWORD *)(v3 + 24);
          unsigned int v34 = v22 >> -(char)v33;
          if (!v33) {
            unsigned int v34 = 0;
          }
          *(_DWORD *)(v3 + 28) = v34;
          int v24 = ((_BYTE)v33 + 3) & 0x1F;
        }
        else
        {
          int v24 = v20 + 3;
        }
        *(_DWORD *)(v3 + 24) = v24;
        int v25 = (*(unsigned __int8 *)(v16 + 8) >> 1) & 7;
        if ((v25 - 1) >= 2)
        {
          if ((v25 - 3) >= 3) {
            llvm::report_fatal_error((llvm *)"Invalid encoding", (const llvm::Twine *)1);
          }
          goto LABEL_15;
        }
        int v26 = 5;
      }
      uint64_t result = (llvm::raw_ostream *)sub_1CC202E58(v3, *(void *)(v15 + v13), v26);
LABEL_15:
      v13 += 16;
    }
    while (v14 != v13);
  }
  return result;
}

uint64_t sub_1CC202E58(uint64_t result, unint64_t a2, int a3)
{
  unint64_t v4 = a2;
  if (!HIDWORD(a2))
  {
    char v5 = a3 - 1;
    unsigned int v6 = 1 << (a3 - 1);
    if (v6 <= a2)
    {
      unsigned int v11 = v6 - 1;
      unsigned int v7 = *(_DWORD *)(result + 24);
      unsigned int v8 = *(_DWORD *)(result + 28);
      do
      {
        unsigned int v12 = v4 & v11 | v6;
        v8 |= v12 << v7;
        *(_DWORD *)(result + 28) = v8;
        v7 += a3;
        if (v7 >= 0x20)
        {
          uint64_t v13 = *(void **)result;
          uint64_t v14 = *(void *)(*(void *)result + 8);
          if (*(void *)(*(void *)result + 16) < (unint64_t)(v14 + 4)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(_DWORD *)(*v13 + v14) = v8;
          v13[1] += 4;
          uint64_t v15 = *(llvm::raw_ostream **)(result + 8);
          if (v15)
          {
            size_t v35 = *(void *)(*(void *)result + 8);
            if (v35 >= *(void *)(result + 16))
            {
              uint64_t v40 = result;
              unsigned int v43 = v11;
              unsigned int v45 = v4 & v11 | v6;
              llvm::raw_ostream::write(v15, **(const char ***)result, v35);
              unsigned int v11 = v43;
              unsigned int v12 = v45;
              uint64_t result = v40;
              *(void *)(*(void *)v40 + 8) = 0;
            }
          }
          int v16 = *(_DWORD *)(result + 24);
          unsigned int v8 = v12 >> -(char)v16;
          if (!v16) {
            unsigned int v8 = 0;
          }
          *(_DWORD *)(result + 28) = v8;
          unsigned int v7 = ((_BYTE)v16 + (_BYTE)a3) & 0x1F;
        }
        *(_DWORD *)(result + 24) = v7;
        LODWORD(v4) = v4 >> v5;
      }
      while (v4 >= v6);
    }
    else
    {
      unsigned int v7 = *(_DWORD *)(result + 24);
      unsigned int v8 = *(_DWORD *)(result + 28);
    }
    int v9 = (v4 << v7) | v8;
    *(_DWORD *)(result + 28) = v9;
    unsigned int v10 = v7 + a3;
    if (v10 < 0x20) {
      goto LABEL_5;
    }
    unsigned int v17 = *(const char ***)result;
    uint64_t v18 = *(void *)(*(void *)result + 8);
    if (*(void *)(*(void *)result + 16) < (unint64_t)(v18 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)&(*v17)[v18] = v9;
    v17[1] += 4;
    if (*(void *)(result + 8))
    {
      size_t v33 = *(void *)(*(void *)result + 8);
      if (v33 >= *(void *)(result + 16))
      {
        uint64_t v34 = result;
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(result + 8), **(const char ***)result, v33);
        uint64_t result = v34;
        *(void *)(*(void *)v34 + 8) = 0;
      }
    }
LABEL_17:
    int v19 = *(_DWORD *)(result + 24);
    unsigned int v20 = v4 >> -(char)v19;
    if (!v19) {
      unsigned int v20 = 0;
    }
    *(_DWORD *)(result + 28) = v20;
    unsigned int v10 = ((_BYTE)v19 + (_BYTE)a3) & 0x1F;
    goto LABEL_5;
  }
  char v21 = a3 - 1;
  unint64_t v22 = (1 << (a3 - 1));
  int v23 = v22 - 1;
  unsigned int v24 = *(_DWORD *)(result + 24);
  unsigned int v25 = *(_DWORD *)(result + 28);
  int v42 = v22 - 1;
  unint64_t v41 = v22;
  do
  {
    v25 |= (v23 & v4 | v22) << v24;
    *(_DWORD *)(result + 28) = v25;
    v24 += a3;
    if (v24 >= 0x20)
    {
      unsigned int v44 = v23 & v4 | v22;
      int v26 = *(const char ***)result;
      uint64_t v27 = *(void *)(*(void *)result + 8);
      if (*(void *)(*(void *)result + 16) < (unint64_t)(v27 + 4)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(_DWORD *)&(*v26)[v27] = v25;
      v26[1] += 4;
      if (*(void *)(result + 8))
      {
        size_t v36 = *(void *)(*(void *)result + 8);
        if (v36 >= *(void *)(result + 16))
        {
          uint64_t v37 = result;
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(result + 8), **(const char ***)result, v36);
          uint64_t result = v37;
          *(void *)(*(void *)v37 + 8) = 0;
        }
      }
      int v28 = *(_DWORD *)(result + 24);
      int v23 = v42;
      if (v28) {
        unsigned int v25 = v44 >> -(char)v28;
      }
      else {
        unsigned int v25 = 0;
      }
      *(_DWORD *)(result + 28) = v25;
      unsigned int v24 = ((_BYTE)v28 + (_BYTE)a3) & 0x1F;
      unint64_t v22 = v41;
    }
    *(_DWORD *)(result + 24) = v24;
    v4 >>= v21;
  }
  while (v4 >= v22);
  int v29 = (v4 << v24) | v25;
  *(_DWORD *)(result + 28) = v29;
  unsigned int v10 = v24 + a3;
  if (v10 >= 0x20)
  {
    uint64_t v39 = result;
    unsigned int v30 = *(const char ***)result;
    uint64_t v31 = *(void *)(*(void *)result + 8);
    if (*(void *)(*(void *)result + 16) < (unint64_t)(v31 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)&(*v30)[v31] = v29;
    v30[1] += 4;
    uint64_t v32 = *(llvm::raw_ostream **)(result + 8);
    if (v32)
    {
      size_t v38 = *(void *)(*(void *)v39 + 8);
      if (v38 >= *(void *)(v39 + 16))
      {
        llvm::raw_ostream::write(v32, **(const char ***)v39, v38);
        *(void *)(*(void *)v39 + 8) = 0;
      }
    }
    uint64_t result = v39;
    goto LABEL_17;
  }
LABEL_5:
  *(_DWORD *)(result + 24) = v10;
  return result;
}

char *sub_1CC203220(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = (v2 - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    abort();
  }
  uint64_t v7 = a1[2] - v3;
  if (v7 >> 3 > v5) {
    unint64_t v5 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v8 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8 >> 60) {
    sub_1CB833614();
  }
  unsigned int v10 = (char *)operator new(16 * v8);
  unsigned int v11 = &v10[16 * v4];
  *(_OWORD *)unsigned int v11 = *(_OWORD *)a2;
  unsigned int v12 = v11 + 16;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  while (v2 != v3)
  {
    long long v13 = *((_OWORD *)v2 - 1);
    v2 -= 16;
    *((_OWORD *)v11 - 1) = v13;
    v11 -= 16;
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
  }
  uint64_t v14 = *a1;
  uint64_t v15 = a1[1];
  *a1 = v11;
  a1[1] = v12;
  for (a1[2] = &v10[16 * v8]; v15 != v14; v15 -= 16)
  {
    int v16 = (std::__shared_weak_count *)*((void *)v15 - 1);
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

off_t sub_1CC203350(off_t result, unint64_t a2, unsigned int a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a2 >> 3;
  uint64_t v4 = a2 & 7;
  unint64_t v5 = *(void **)(result + 8);
  if (!v5)
  {
    unint64_t v6 = 0;
    goto LABEL_3;
  }
  off_t v9 = result;
  unsigned int v10 = a3;
  unint64_t v11 = a2 >> 3;
  uint64_t v12 = (*(uint64_t (**)(void))(*v5 + 80))(*(void *)(result + 8));
  unint64_t v3 = v11;
  a3 = v10;
  uint64_t v13 = v12;
  uint64_t result = v9;
  unint64_t v6 = v5[4] - v5[2] + v13;
  unint64_t v14 = v6 - v11;
  if (v6 <= v11)
  {
LABEL_3:
    uint64_t v7 = (int *)(**(void **)result + v3 - v6);
    if (v4)
    {
      int v8 = v7[1] & (-1 << v4) | (a3 >> -(char)v4) & ~(-1 << v4);
      int *v7 = *v7 & ~(-1 << v4) | (a3 << v4);
      v7[1] = v8;
    }
    else
    {
      int *v7 = a3;
    }
    return result;
  }
  uint64_t v15 = *(void **)(v9 + 8);
  off_t v16 = (*(uint64_t (**)(void *))(*v15 + 80))(v15) + v15[4] - v15[2];
  if (v4) {
    unint64_t v17 = 8;
  }
  else {
    unint64_t v17 = 4;
  }
  uint64_t v18 = v4;
  if (v14 >= v17) {
    size_t v19 = v17;
  }
  else {
    size_t v19 = v14;
  }
  unint64_t v20 = v17 - v19;
  if (v18)
  {
    char v21 = v18;
    llvm::raw_fd_ostream::seek(*(llvm::raw_fd_ostream **)(v9 + 8), v11);
    llvm::raw_fd_stream::read(*(llvm::raw_fd_stream **)(v9 + 8), v25, v19);
    if (v14 <= 7)
    {
      uint64_t v22 = 0;
      int v23 = *(void **)v9;
      do
      {
        v25[v19 + v22] = *(unsigned char *)(*v23 + v22);
        ++v22;
      }
      while (v20 != v22);
    }
    *(_DWORD *)unsigned int v25 = *(_DWORD *)v25 & ~(-1 << v21) | (v10 << v21);
    int v26 = v26 & (-1 << v21) | (v10 >> -v21) & ~(-1 << v21);
  }
  else
  {
    *(_DWORD *)unsigned int v25 = v10;
  }
  llvm::raw_fd_ostream::seek(*(llvm::raw_fd_ostream **)(v9 + 8), v11);
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(v9 + 8), v25, v19);
  if (v17 > v14)
  {
    uint64_t v24 = 0;
    do
    {
      *(unsigned char *)(**(void **)v9 + v24) = v25[v19 + v24];
      ++v24;
    }
    while (v20 != v24);
  }
  return llvm::raw_fd_ostream::seek(*(llvm::raw_fd_ostream **)(v9 + 8), v16);
}

void sub_1CC2035C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    unint64_t v5 = v4 - 3;
    do
    {
      if (*v5)
      {
        sub_1CC1CAA74((uint64_t)v5, *v5);
        operator delete((void *)*v5);
      }
      unint64_t v6 = v5 - 2;
      v5 -= 5;
    }
    while (v6 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_1CC203630(uint64_t a1, const llvm::Module *a2, uint64_t a3, uint64_t a4, int a5, void *a6)
{
  *(void *)a1 = a4;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a2;
  llvm::ValueEnumerator::ValueEnumerator((llvm::ValueEnumerator *)(a1 + 24), a2, a5);
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 504) = a1 + 512;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 496) = a6;
  *(void *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 528) = (*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 4;
  if (a6)
  {
    unsigned int v10 = (void *)*a6;
    int v8 = a6 + 1;
    off_t v9 = v10;
    if (v10 != v8)
    {
      do
      {
        unint64_t v11 = (uint64_t *)v9[7];
        uint64_t v12 = (uint64_t *)v9[8];
        while (v11 != v12)
        {
          uint64_t v13 = *v11;
          if (*v11) {
            BOOL v14 = *(_DWORD *)(*v11 + 8) == 1;
          }
          else {
            BOOL v14 = 0;
          }
          if (v14)
          {
            uint64_t v15 = *(void **)(v13 + 80);
            uint64_t v16 = *(void *)(v13 + 88) - (void)v15;
            if (v16)
            {
              uint64_t v17 = 16 * (v16 >> 4);
              do
              {
                unint64_t v18 = *v15 & 0xFFFFFFFFFFFFFFF8;
                if ((*v15 & 1) == 0 || !*(void *)(v18 + 8))
                {
                  uint64_t v24 = *(uint64_t **)v18;
                  size_t v19 = v24;
                  int v20 = *(_DWORD *)(a1 + 528) + 1;
                  *(_DWORD *)(a1 + 528) = v20;
                  *((_DWORD *)sub_1CD4FD4E8((uint64_t **)(a1 + 504), (unint64_t)v19, &v24) + 10) = v20;
                }
                v15 += 2;
                v17 -= 16;
              }
              while (v17);
            }
          }
          ++v11;
        }
        char v21 = (void *)v9[1];
        if (v21)
        {
          do
          {
            uint64_t v22 = v21;
            char v21 = (void *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            uint64_t v22 = (void *)v9[2];
            BOOL v14 = *v22 == (void)v9;
            off_t v9 = v22;
          }
          while (!v14);
        }
        off_t v9 = v22;
      }
      while (v22 != v8);
    }
  }
  return a1;
}

void sub_1CC20378C(uint64_t *a1, uint64_t a2)
{
  v15[64] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[4];
  uint64_t v3 = (uint64_t)(a1 + 3);
  if (a1[3] != v2 && *(void *)(v2 - 32) == a2)
  {
    sub_1CC1F77A4(*a1, 0x12u, 3u);
    uint64_t v6 = a1[4];
    if (a1[3] != v6)
    {
      do
      {
        if (*(void *)(v6 - 32) != a2) {
          break;
        }
        if (*(unsigned char *)(*(void *)(v6 - 40) + 16) == 22) {
          unsigned int v7 = 2;
        }
        else {
          unsigned int v7 = 1;
        }
        int v8 = *(char **)(v6 - 24);
        off_t v9 = *(char **)(v6 - 16);
        uint64_t v13 = v15;
        uint64_t v14 = 0x4000000000;
        sub_1CD4FD938((uint64_t)&v13, v8, v9);
        unsigned int ValueID = llvm::ValueEnumerator::getValueID(v3, *(void *)(v6 - 40));
        if (v14 >= (unint64_t)HIDWORD(v14)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v13 + v14) = ValueID;
        LODWORD(v14) = v14 + 1;
        sub_1CC207D3C((llvm::raw_ostream *)*a1, v7, (uint64_t)&v13, 0);
        if (v13 != v15) {
          free(v13);
        }
        uint64_t v11 = a1[4];
        uint64_t v12 = *(void **)(v11 - 24);
        if (v12)
        {
          *(void *)(v11 - 16) = v12;
          operator delete(v12);
        }
        uint64_t v6 = v11 - 40;
        a1[4] = v11 - 40;
      }
      while (a1[3] != v11 - 40);
    }
    sub_1CC1F7D44(*a1);
  }
}

void sub_1CC20392C(off_t *a1)
{
  uint64_t v227 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (llvm::Module *)a1[2];
  uint64_t v220 = v222;
  uint64_t v221 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(v2, (uint64_t)&v220);
  if (v221)
  {
    uint64_t v3 = (uint64_t *)((char *)v220 + 16);
    uint64_t v4 = 24 * v221;
    while (1)
    {
      uint64_t v5 = *(void *)(*(v3 - 1) + 8);
      if (*(void *)v5 == 7)
      {
        int v6 = *(_DWORD *)(v5 + 24);
        int v7 = *(_DWORD *)(v5 + 27);
        BOOL v8 = v6 == 1852401748 && v7 == 1330924654;
        if (v8) {
          break;
        }
      }
      v3 += 3;
      v4 -= 24;
      if (!v4) {
        goto LABEL_12;
      }
    }
    uint64_t v9 = *v3;
  }
  else
  {
LABEL_12:
    uint64_t v9 = 0;
  }
  if (v220 == v222)
  {
    if (!v9)
    {
LABEL_21:
      uint64_t v12 = *a1;
LABEL_22:
      unsigned int v13 = 20;
      goto LABEL_23;
    }
  }
  else
  {
    free(v220);
    if (!v9) {
      goto LABEL_21;
    }
  }
  uint64_t v10 = *(void *)(v9 + 128);
  if (!v10) {
    goto LABEL_21;
  }
  uint64_t v11 = (void *)(v10 + 24);
  if (*(_DWORD *)(v10 + 32) >= 0x41u) {
    uint64_t v11 = (void *)*v11;
  }
  uint64_t v12 = *a1;
  if (*v11) {
    goto LABEL_22;
  }
  unsigned int v13 = 24;
LABEL_23:
  sub_1CC1F77A4(v12, v13, 4u);
  uint64_t v14 = (llvm::raw_ostream *)*a1;
  unsigned int v217 = (void *)9;
  uint64_t v220 = &v217;
  uint64_t v221 = 1;
  sub_1CC206B4C(v14, 0xAu, &v220);
  uint64_t v15 = (llvm::raw_ostream *)*a1;
  unsigned int v217 = (void *)(8 * *(unsigned __int8 *)(a1[62] + 134));
  uint64_t v220 = &v217;
  uint64_t v221 = 1;
  sub_1CC206B4C(v15, 0x14u, &v220);
  if (*(void *)a1[62] == a1[62] + 8)
  {
    sub_1CC1F7D44(*a1);
    return;
  }
  uint64_t v16 = (off_t *)a1[63];
  if (v16 != a1 + 64)
  {
    do
    {
      uint64_t v17 = (llvm::raw_ostream *)*a1;
      uint64_t v18 = v16[4];
      unsigned int v217 = (void *)*((unsigned int *)v16 + 10);
      uint64_t v218 = v18;
      uint64_t v220 = &v217;
      uint64_t v221 = 2;
      sub_1CC206B4C(v17, 0x10u, &v220);
      size_t v19 = (off_t *)v16[1];
      if (v19)
      {
        do
        {
          int v20 = v19;
          size_t v19 = (off_t *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          int v20 = (off_t *)v16[2];
          BOOL v8 = *v20 == (void)v16;
          uint64_t v16 = v20;
        }
        while (!v8);
      }
      uint64_t v16 = v20;
    }
    while (v20 != a1 + 64);
  }
  char v21 = (char *)operator new(0x228uLL);
  *(void *)char v21 = &unk_1F2608A00;
  *((void *)v21 + 1) = 0;
  *(_OWORD *)(v21 + 200) = 0u;
  *(_OWORD *)(v21 + 216) = 0u;
  *(_OWORD *)(v21 + 232) = 0u;
  *(_OWORD *)(v21 + 248) = 0u;
  *(_OWORD *)(v21 + 264) = 0u;
  *(_OWORD *)(v21 + 280) = 0u;
  *(_OWORD *)(v21 + 296) = 0u;
  *(_OWORD *)(v21 + 312) = 0u;
  *(_OWORD *)(v21 + 328) = 0u;
  *(_OWORD *)(v21 + 344) = 0u;
  *(_OWORD *)(v21 + 360) = 0u;
  *(_OWORD *)(v21 + 376) = 0u;
  *(_OWORD *)(v21 + 392) = 0u;
  *(_OWORD *)(v21 + 408) = 0u;
  *(_OWORD *)(v21 + 424) = 0u;
  *(_OWORD *)(v21 + 440) = 0u;
  *(_OWORD *)(v21 + 456) = 0u;
  *(_OWORD *)(v21 + 472) = 0u;
  *(_OWORD *)(v21 + 488) = 0u;
  *(_OWORD *)(v21 + 504) = 0u;
  *(_OWORD *)(v21 + 520) = 0u;
  *(_OWORD *)(v21 + 536) = 0u;
  *(_OWORD *)(v21 + 40) = xmmword_1CFAC6580;
  *((void *)v21 + 2) = 0;
  *((void *)v21 + 3) = v21 + 40;
  *(_OWORD *)(v21 + 56) = xmmword_1CFAC4740;
  *(_OWORD *)(v21 + 72) = xmmword_1CFAC4810;
  *(_OWORD *)(v21 + 88) = xmmword_1CFAC4740;
  int64x2_t v22 = vdupq_n_s64(4uLL);
  *(int64x2_t *)(v21 + 104) = v22;
  *(int64x2_t *)(v21 + 120) = v22;
  *(int64x2_t *)(v21 + 136) = v22;
  *(int64x2_t *)(v21 + 152) = v22;
  *(_OWORD *)(v21 + 168) = xmmword_1CFAC6570;
  uint64_t v23 = *a1;
  *(_OWORD *)(v21 + 184) = xmmword_1CFAC4740;
  *((void *)v21 + 4) = 0x200000000ALL;
  size_t v207 = v21 + 24;
  int v208 = (std::__shared_weak_count *)v21;
  unsigned int v24 = sub_1CC1F7CDC(v23, (uint64_t)&v207);
  unsigned int v25 = v208;
  if (v208 && !atomic_fetch_add(&v208->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  int v26 = (char *)operator new(0x228uLL);
  *(void *)int v26 = &unk_1F2608A00;
  *((void *)v26 + 1) = 0;
  *(_OWORD *)(v26 + 200) = 0u;
  *(_OWORD *)(v26 + 216) = 0u;
  *(_OWORD *)(v26 + 232) = 0u;
  *(_OWORD *)(v26 + 248) = 0u;
  *(_OWORD *)(v26 + 264) = 0u;
  *(_OWORD *)(v26 + 280) = 0u;
  *(_OWORD *)(v26 + 296) = 0u;
  *(_OWORD *)(v26 + 312) = 0u;
  *(_OWORD *)(v26 + 328) = 0u;
  *(_OWORD *)(v26 + 344) = 0u;
  *(_OWORD *)(v26 + 360) = 0u;
  *(_OWORD *)(v26 + 376) = 0u;
  *(_OWORD *)(v26 + 392) = 0u;
  *(_OWORD *)(v26 + 408) = 0u;
  *(_OWORD *)(v26 + 424) = 0u;
  *(_OWORD *)(v26 + 440) = 0u;
  *(_OWORD *)(v26 + 456) = 0u;
  *(_OWORD *)(v26 + 472) = 0u;
  *(_OWORD *)(v26 + 488) = 0u;
  *(_OWORD *)(v26 + 504) = 0u;
  uint64_t v27 = 19;
  if (!byte_1EBCC8C88) {
    uint64_t v27 = 1;
  }
  *((void *)v26 + 5) = v27;
  *(_OWORD *)(v26 + 520) = 0uLL;
  *(_OWORD *)(v26 + 536) = 0uLL;
  *((void *)v26 + 2) = 0;
  *((void *)v26 + 3) = v26 + 40;
  *((_OWORD *)v26 + 3) = xmmword_1CFAC6770;
  *((_OWORD *)v26 + 4) = xmmword_1CFAC66E0;
  int64x2_t v28 = vdupq_n_s64(4uLL);
  *((_OWORD *)v26 + 5) = xmmword_1CF96C210;
  *((int64x2_t *)v26 + 6) = v28;
  *((int64x2_t *)v26 + 7) = v28;
  *((int64x2_t *)v26 + 8) = v28;
  *((int64x2_t *)v26 + 9) = v28;
  *((_OWORD *)v26 + 10) = xmmword_1CD91CB40;
  uint64_t v29 = *a1;
  *((_OWORD *)v26 + 11) = xmmword_1CFAC6780;
  *((void *)v26 + 24) = 4;
  *((void *)v26 + 4) = 0x200000000ALL;
  uint64_t v205 = v26 + 24;
  size_t v206 = (std::__shared_weak_count *)v26;
  unsigned int v30 = sub_1CC1F7CDC(v29, (uint64_t)&v205);
  uint64_t v31 = v206;
  if (v206 && !atomic_fetch_add(&v206->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  uint64_t v32 = (char *)operator new(0x228uLL);
  *(void *)uint64_t v32 = &unk_1F2608A00;
  *((void *)v32 + 1) = 0;
  *(_OWORD *)(v32 + 120) = 0u;
  *(_OWORD *)(v32 + 136) = 0u;
  *(_OWORD *)(v32 + 152) = 0u;
  *(_OWORD *)(v32 + 168) = 0u;
  *(_OWORD *)(v32 + 184) = 0u;
  *(_OWORD *)(v32 + 200) = 0u;
  *(_OWORD *)(v32 + 216) = 0u;
  *(_OWORD *)(v32 + 232) = 0u;
  *(_OWORD *)(v32 + 248) = 0u;
  *(_OWORD *)(v32 + 264) = 0u;
  *(_OWORD *)(v32 + 280) = 0u;
  *(_OWORD *)(v32 + 296) = 0u;
  *(_OWORD *)(v32 + 312) = 0u;
  *(_OWORD *)(v32 + 328) = 0u;
  *(_OWORD *)(v32 + 344) = 0u;
  *(_OWORD *)(v32 + 360) = 0u;
  *(_OWORD *)(v32 + 376) = 0u;
  *(_OWORD *)(v32 + 392) = 0u;
  *(_OWORD *)(v32 + 408) = 0u;
  *(_OWORD *)(v32 + 424) = 0u;
  *(_OWORD *)(v32 + 440) = 0u;
  *(_OWORD *)(v32 + 456) = 0u;
  *(_OWORD *)(v32 + 472) = 0u;
  *(_OWORD *)(v32 + 488) = 0u;
  *(_OWORD *)(v32 + 504) = 0u;
  *(_OWORD *)(v32 + 520) = 0u;
  *(_OWORD *)(v32 + 536) = 0u;
  *(_OWORD *)(v32 + 40) = xmmword_1CFAC6620;
  *((void *)v32 + 2) = 0;
  *((void *)v32 + 3) = v32 + 40;
  *(_OWORD *)(v32 + 56) = xmmword_1CFAC4740;
  *(_OWORD *)(v32 + 72) = xmmword_1CFAC4810;
  *(_OWORD *)(v32 + 88) = xmmword_1CFAC6570;
  uint64_t v33 = *a1;
  *(_OWORD *)(v32 + 104) = xmmword_1CFAC4740;
  *((void *)v32 + 4) = 0x2000000005;
  char v203 = v32 + 24;
  int v204 = (std::__shared_weak_count *)v32;
  unsigned int v190 = sub_1CC1F7CDC(v33, (uint64_t)&v203);
  uint64_t v34 = v204;
  if (v204 && !atomic_fetch_add(&v204->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  size_t v35 = (char *)operator new(0x228uLL);
  *(void *)size_t v35 = &unk_1F2608A00;
  *((void *)v35 + 1) = 0;
  *(_OWORD *)(v35 + 136) = 0u;
  *(_OWORD *)(v35 + 152) = 0u;
  *(_OWORD *)(v35 + 168) = 0u;
  *(_OWORD *)(v35 + 184) = 0u;
  *(_OWORD *)(v35 + 200) = 0u;
  *(_OWORD *)(v35 + 216) = 0u;
  *(_OWORD *)(v35 + 232) = 0u;
  *(_OWORD *)(v35 + 248) = 0u;
  *(_OWORD *)(v35 + 264) = 0u;
  *(_OWORD *)(v35 + 280) = 0u;
  *(_OWORD *)(v35 + 296) = 0u;
  *(_OWORD *)(v35 + 312) = 0u;
  *(_OWORD *)(v35 + 328) = 0u;
  *(_OWORD *)(v35 + 344) = 0u;
  *(_OWORD *)(v35 + 360) = 0u;
  *(_OWORD *)(v35 + 376) = 0u;
  *(_OWORD *)(v35 + 392) = 0u;
  *(_OWORD *)(v35 + 408) = 0u;
  *(_OWORD *)(v35 + 424) = 0u;
  *(_OWORD *)(v35 + 440) = 0u;
  *(_OWORD *)(v35 + 456) = 0u;
  *(_OWORD *)(v35 + 472) = 0u;
  *(_OWORD *)(v35 + 488) = 0u;
  *(_OWORD *)(v35 + 504) = 0u;
  *(_OWORD *)(v35 + 520) = 0u;
  *(_OWORD *)(v35 + 536) = 0u;
  *(_OWORD *)(v35 + 40) = xmmword_1CFAC6790;
  *((void *)v35 + 2) = 0;
  *((void *)v35 + 3) = v35 + 40;
  *(_OWORD *)(v35 + 56) = xmmword_1CFAC4740;
  *(_OWORD *)(v35 + 72) = xmmword_1CFAC4810;
  *(int64x2_t *)(v35 + 88) = vdupq_n_s64(4uLL);
  *(_OWORD *)(v35 + 104) = xmmword_1CFAC6570;
  uint64_t v36 = *a1;
  *(_OWORD *)(v35 + 120) = xmmword_1CFAC4740;
  *((void *)v35 + 4) = 0x2000000006;
  int v201 = v35 + 24;
  size_t v202 = (std::__shared_weak_count *)v35;
  unsigned int v189 = sub_1CC1F7CDC(v36, (uint64_t)&v201);
  uint64_t v37 = v202;
  if (v202 && !atomic_fetch_add(&v202->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  size_t v38 = (char *)operator new(0x228uLL);
  *(void *)size_t v38 = &unk_1F2608A00;
  *((void *)v38 + 1) = 0;
  *(_OWORD *)(v38 + 104) = 0u;
  *(_OWORD *)(v38 + 120) = 0u;
  *(_OWORD *)(v38 + 136) = 0u;
  *(_OWORD *)(v38 + 152) = 0u;
  *(_OWORD *)(v38 + 168) = 0u;
  *(_OWORD *)(v38 + 184) = 0u;
  *(_OWORD *)(v38 + 200) = 0u;
  *(_OWORD *)(v38 + 216) = 0u;
  *(_OWORD *)(v38 + 232) = 0u;
  *(_OWORD *)(v38 + 248) = 0u;
  *(_OWORD *)(v38 + 264) = 0u;
  *(_OWORD *)(v38 + 280) = 0u;
  *(_OWORD *)(v38 + 296) = 0u;
  *(_OWORD *)(v38 + 312) = 0u;
  *(_OWORD *)(v38 + 328) = 0u;
  *(_OWORD *)(v38 + 344) = 0u;
  *(_OWORD *)(v38 + 360) = 0u;
  *(_OWORD *)(v38 + 376) = 0u;
  *(_OWORD *)(v38 + 392) = 0u;
  *(_OWORD *)(v38 + 408) = 0u;
  *(_OWORD *)(v38 + 424) = 0u;
  *(_OWORD *)(v38 + 440) = 0u;
  *(_OWORD *)(v38 + 456) = 0u;
  *(_OWORD *)(v38 + 472) = 0u;
  *(_OWORD *)(v38 + 488) = 0u;
  *(_OWORD *)(v38 + 504) = 0u;
  *(_OWORD *)(v38 + 40) = xmmword_1CFAC66C0;
  *(_OWORD *)(v38 + 520) = 0u;
  *(_OWORD *)(v38 + 536) = 0u;
  *((void *)v38 + 2) = 0;
  *((void *)v38 + 3) = v38 + 40;
  *(_OWORD *)(v38 + 56) = xmmword_1CFAC4740;
  *(_OWORD *)(v38 + 72) = xmmword_1CFAC4810;
  uint64_t v39 = *a1;
  *(_OWORD *)(v38 + 88) = xmmword_1CFAC4740;
  *((void *)v38 + 4) = 0x2000000004;
  unint64_t v199 = v38 + 24;
  uint64_t v200 = (std::__shared_weak_count *)v38;
  unsigned int v188 = sub_1CC1F7CDC(v39, (uint64_t)&v199);
  uint64_t v40 = v200;
  if (v200 && !atomic_fetch_add(&v200->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  unint64_t v41 = (char *)operator new(0x228uLL);
  *(void *)unint64_t v41 = &unk_1F2608A00;
  *((void *)v41 + 1) = 0;
  *(_OWORD *)(v41 + 120) = 0u;
  *(_OWORD *)(v41 + 136) = 0u;
  *(_OWORD *)(v41 + 152) = 0u;
  *(_OWORD *)(v41 + 168) = 0u;
  *(_OWORD *)(v41 + 184) = 0u;
  *(_OWORD *)(v41 + 200) = 0u;
  *(_OWORD *)(v41 + 216) = 0u;
  *(_OWORD *)(v41 + 232) = 0u;
  *(_OWORD *)(v41 + 248) = 0u;
  *(_OWORD *)(v41 + 264) = 0u;
  *(_OWORD *)(v41 + 280) = 0u;
  *(_OWORD *)(v41 + 296) = 0u;
  *(_OWORD *)(v41 + 312) = 0u;
  *(_OWORD *)(v41 + 328) = 0u;
  *(_OWORD *)(v41 + 344) = 0u;
  *(_OWORD *)(v41 + 360) = 0u;
  *(_OWORD *)(v41 + 376) = 0u;
  *(_OWORD *)(v41 + 392) = 0u;
  *(_OWORD *)(v41 + 408) = 0u;
  *(_OWORD *)(v41 + 424) = 0u;
  *(_OWORD *)(v41 + 440) = 0u;
  *(_OWORD *)(v41 + 456) = 0u;
  *(_OWORD *)(v41 + 472) = 0u;
  *(_OWORD *)(v41 + 488) = 0u;
  *(_OWORD *)(v41 + 504) = 0u;
  *(_OWORD *)(v41 + 520) = 0u;
  *(_OWORD *)(v41 + 536) = 0u;
  *(_OWORD *)(v41 + 40) = xmmword_1CFAC67A0;
  *((void *)v41 + 2) = 0;
  *((void *)v41 + 3) = v41 + 40;
  *(_OWORD *)(v41 + 56) = xmmword_1CFAC4740;
  *(_OWORD *)(v41 + 72) = xmmword_1CFAC4740;
  *(_OWORD *)(v41 + 88) = xmmword_1CFAC6570;
  uint64_t v42 = *a1;
  *(_OWORD *)(v41 + 104) = xmmword_1CFAC4740;
  *((void *)v41 + 4) = 0x2000000005;
  uint64_t v197 = v41 + 24;
  int v198 = (std::__shared_weak_count *)v41;
  unsigned int v43 = sub_1CC1F7CDC(v42, (uint64_t)&v197);
  unsigned int v44 = v198;
  if (v198 && !atomic_fetch_add(&v198->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  unsigned int v217 = v219;
  uint64_t v218 = 0x4000000000;
  unsigned int v45 = (void *)a1[2];
  unsigned int v46 = (void *)v45[4];
  unsigned int v194 = v45 + 3;
  if (v46 == v45 + 3) {
    goto LABEL_241;
  }
  unsigned int v187 = v30;
  uint64_t v193 = a1 + 64;
  do
  {
    unsigned int v195 = v46;
    if (v46) {
      BOOL v47 = (llvm::GlobalValue *)(v46 - 7);
    }
    else {
      BOOL v47 = 0;
    }
    if ((*((unsigned char *)v47 + 23) & 0x10) == 0) {
      llvm::report_fatal_error((llvm *)"Unexpected anonymous function when writing summary", (const llvm::Twine *)1);
    }
    off_t v48 = a1[62];
    unint64_t v49 = sub_1CD4AC784(v47);
    unsigned int v52 = *(void **)(v48 + 8);
    off_t v51 = v48 + 8;
    int v50 = v52;
    if (!v52) {
      goto LABEL_68;
    }
    unsigned int v53 = (void *)v51;
    do
    {
      unint64_t v54 = v50[4];
      BOOL v55 = v54 >= v49;
      if (v54 >= v49) {
        int v56 = v50;
      }
      else {
        int v56 = v50 + 1;
      }
      if (v55) {
        unsigned int v53 = v50;
      }
      int v50 = (void *)*v56;
    }
    while (*v56);
    if (v53 == (void *)v51 || v53[4] > v49) {
LABEL_68:
    }
      unsigned int v53 = (void *)v51;
    if (v53 == (void *)v51) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = (uint64_t)(v53 + 4);
    }
    unint64_t v58 = v57 & 0xFFFFFFFFFFFFFFF8;
    if ((v57 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      int v59 = *(llvm::FunctionSummary ***)(v58 + 24);
      if (*(llvm::FunctionSummary ***)(v58 + 32) != v59)
      {
        unsigned int v191 = v43;
        int v186 = *v59;
        unsigned int ValueID = llvm::ValueEnumerator::getValueID((uint64_t)(a1 + 3), (uint64_t)v47);
        if (v218 >= (unint64_t)HIDWORD(v218)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v217 + v218) = ValueID;
        LODWORD(v218) = v218 + 1;
        size_t v185 = (llvm::raw_ostream *)*a1;
        uint64_t v61 = *((void *)v186 + 13);
        unsigned int v184 = v24;
        uint64_t v183 = (uint64_t ***)v47;
        if (v61)
        {
          uint64_t v62 = *(void *)(v61 + 8) - *(void *)v61;
          if (v62)
          {
            uint64_t v220 = *(void **)v61;
            uint64_t v221 = v62 >> 3;
            sub_1CC206B4C(v185, 0xBu, &v220);
            uint64_t v61 = *((void *)v186 + 13);
            uint64_t v220 = v222;
            uint64_t v221 = 0x4000000000;
            if (!v61) {
              goto LABEL_109;
            }
          }
          else
          {
            uint64_t v220 = v222;
            uint64_t v221 = 0x4000000000;
          }
          uint64_t v63 = *(void **)(v61 + 24);
          uint64_t v64 = *(void **)(v61 + 32);
          if (v64 == v63) {
            goto LABEL_91;
          }
          unsigned int v65 = 0;
          LODWORD(v221) = 0;
          do
          {
            if (v65 >= HIDWORD(v221)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v220 + v65) = *v63;
            unsigned int v66 = v221 + 1;
            LODWORD(v221) = v66;
            if (v66 >= HIDWORD(v221)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v220 + v66) = v63[1];
            unsigned int v65 = v221 + 1;
            LODWORD(v221) = v221 + 1;
            v63 += 2;
          }
          while (v63 != v64);
          sub_1CC207D3C(v185, 0xCu, (uint64_t)&v220, 0);
          uint64_t v61 = *((void *)v186 + 13);
          if (v61)
          {
LABEL_91:
            char v67 = *(void **)(v61 + 48);
            uint64_t v68 = *(void **)(v61 + 56);
            if (v68 == v67) {
              goto LABEL_100;
            }
            unsigned int v69 = 0;
            LODWORD(v221) = 0;
            do
            {
              if (v69 >= HIDWORD(v221)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v220 + v69) = *v67;
              unsigned int v70 = v221 + 1;
              LODWORD(v221) = v70;
              if (v70 >= HIDWORD(v221)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v220 + v70) = v67[1];
              unsigned int v69 = v221 + 1;
              LODWORD(v221) = v221 + 1;
              v67 += 2;
            }
            while (v67 != v68);
            sub_1CC207D3C(v185, 0xDu, (uint64_t)&v220, 0);
            uint64_t v61 = *((void *)v186 + 13);
            if (v61)
            {
LABEL_100:
              uint64_t v71 = *(void *)(v61 + 72);
              uint64_t v72 = *(void *)(v61 + 80);
              if (v72 == v71) {
                goto LABEL_108;
              }
              do
              {
                LODWORD(v221) = 0;
                if (!HIDWORD(v221)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)uint64_t v220 = *(void *)v71;
                unsigned int v73 = v221 + 1;
                LODWORD(v221) = v73;
                if (v73 >= HIDWORD(v221)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v220 + v73) = *(void *)(v71 + 8);
                LODWORD(v221) = v221 + 1;
                sub_1CD4FD9BC((unsigned int *)&v220, (uint64_t)v220 + 8 * v221, *(char **)(v71 + 16), *(char **)(v71 + 24));
                sub_1CC207D3C(v185, 0xEu, (uint64_t)&v220, 0);
                v71 += 40;
              }
              while (v71 != v72);
              uint64_t v61 = *((void *)v186 + 13);
              if (v61)
              {
LABEL_108:
                uint64_t v74 = *(void *)(v61 + 96);
                for (uint64_t i = *(void *)(v61 + 104); v74 != i; v74 += 40)
                {
                  LODWORD(v221) = 0;
                  if (!HIDWORD(v221)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)uint64_t v220 = *(void *)v74;
                  unsigned int v88 = v221 + 1;
                  LODWORD(v221) = v88;
                  if (v88 >= HIDWORD(v221)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v220 + v88) = *(void *)(v74 + 8);
                  LODWORD(v221) = v221 + 1;
                  sub_1CD4FD9BC((unsigned int *)&v220, (uint64_t)v220 + 8 * v221, *(char **)(v74 + 16), *(char **)(v74 + 24));
                  sub_1CC207D3C(v185, 0xFu, (uint64_t)&v220, 0);
                }
              }
            }
          }
        }
        else
        {
          uint64_t v220 = v222;
          uint64_t v221 = 0x4000000000;
        }
LABEL_109:
        long long v76 = (uint64_t *)*((void *)v186 + 14);
        if (v76)
        {
          uint64_t v77 = *v76;
          uint64_t v78 = v76[1];
          if (v78 != *v76)
          {
            LODWORD(v221) = 0;
            do
            {
              if (v221 >= (unint64_t)HIDWORD(v221)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v220 + v221) = *(void *)v77;
              LODWORD(v221) = v221 + 1;
              unsigned int v214 = *(_DWORD *)(v77 + 16);
              if (v214 > 0x40) {
                operator new[]();
              }
              char v213 = *(uint64_t **)(v77 + 8);
              unsigned int v216 = *(_DWORD *)(v77 + 32);
              if (v216 > 0x40) {
                operator new[]();
              }
              uint64_t v215 = *(uint64_t **)(v77 + 24);
              llvm::ConstantRange::sextOrTrunc((unint64_t *)&v213, 0x40u, (uint64_t)&v223);
              if (v214 >= 0x41 && v213) {
                MEMORY[0x1D25D9CB0](v213, 0x1000C8000313F17);
              }
              char v213 = (uint64_t *)v223;
              unsigned int v214 = v224;
              unsigned int v224 = 0;
              if (v216 >= 0x41 && v215)
              {
                MEMORY[0x1D25D9CB0](v215, 0x1000C8000313F17);
                uint64_t v215 = v225;
                unsigned int v216 = v226;
                unsigned int v226 = 0;
                if (v224 >= 0x41 && v223) {
                  MEMORY[0x1D25D9CB0](v223, 0x1000C8000313F17);
                }
              }
              else
              {
                uint64_t v215 = v225;
                unsigned int v216 = v226;
              }
              unsigned int v79 = (uint64_t *)&v213;
              if (v214 >= 0x41) {
                unsigned int v79 = v213;
              }
              sub_1CC20A668((uint64_t)&v220, *v79);
              int v80 = (uint64_t *)&v215;
              if (v216 >= 0x41) {
                int v80 = v215;
              }
              sub_1CC20A668((uint64_t)&v220, *v80);
              if (v216 >= 0x41 && v215) {
                MEMORY[0x1D25D9CB0](v215, 0x1000C8000313F17);
              }
              if (v214 >= 0x41 && v213) {
                MEMORY[0x1D25D9CB0](v213, 0x1000C8000313F17);
              }
              if (v221 >= (unint64_t)HIDWORD(v221)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v220 + v221) = 0xAAAAAAAAAAAAAAABLL
                                                     * ((uint64_t)(*(void *)(v77 + 48) - *(void *)(v77 + 40)) >> 4);
              LODWORD(v221) = v221 + 1;
              uint64_t v81 = *(void *)(v77 + 40);
              uint64_t v82 = *(void *)(v77 + 48);
              if (v81 != v82)
              {
                uint64_t v83 = v81 + 32;
                do
                {
                  uint64_t v84 = v83 - 32;
                  if (v221 >= (unint64_t)HIDWORD(v221)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v220 + v221) = *(void *)(v83 - 32);
                  LODWORD(v221) = v221 + 1;
                  unsigned int v85 = llvm::ValueEnumerator::getValueID((uint64_t)(a1 + 3), *(void *)((*(void *)(v83 - 24) & 0xFFFFFFFFFFFFFFF8) + 8));
                  if (v221 >= (unint64_t)HIDWORD(v221)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v220 + v221) = v85;
                  LODWORD(v221) = v221 + 1;
                  unsigned int v210 = *(_DWORD *)(v83 - 8);
                  if (v210 > 0x40) {
                    operator new[]();
                  }
                  size_t v209 = *(uint64_t **)(v83 - 16);
                  unsigned int v212 = *(_DWORD *)(v83 + 8);
                  if (v212 > 0x40) {
                    operator new[]();
                  }
                  unint64_t v211 = *(uint64_t **)v83;
                  llvm::ConstantRange::sextOrTrunc((unint64_t *)&v209, 0x40u, (uint64_t)&v223);
                  if (v210 >= 0x41 && v209) {
                    MEMORY[0x1D25D9CB0](v209, 0x1000C8000313F17);
                  }
                  size_t v209 = (uint64_t *)v223;
                  unsigned int v210 = v224;
                  unsigned int v224 = 0;
                  if (v212 >= 0x41 && v211)
                  {
                    MEMORY[0x1D25D9CB0](v211, 0x1000C8000313F17);
                    unint64_t v211 = v225;
                    unsigned int v212 = v226;
                    unsigned int v226 = 0;
                    if (v224 >= 0x41 && v223) {
                      MEMORY[0x1D25D9CB0](v223, 0x1000C8000313F17);
                    }
                  }
                  else
                  {
                    unint64_t v211 = v225;
                    unsigned int v212 = v226;
                  }
                  if (v210 >= 0x41) {
                    int v86 = v209;
                  }
                  else {
                    int v86 = (uint64_t *)&v209;
                  }
                  sub_1CC20A668((uint64_t)&v220, *v86);
                  if (v212 >= 0x41) {
                    uint64_t v87 = v211;
                  }
                  else {
                    uint64_t v87 = (uint64_t *)&v211;
                  }
                  sub_1CC20A668((uint64_t)&v220, *v87);
                  if (v212 >= 0x41 && v211) {
                    MEMORY[0x1D25D9CB0](v211, 0x1000C8000313F17);
                  }
                  if (v210 >= 0x41 && v209) {
                    MEMORY[0x1D25D9CB0](v209, 0x1000C8000313F17);
                  }
                  v83 += 48;
                }
                while (v84 + 48 != v82);
              }
              v77 += 64;
            }
            while (v77 != v78);
            if (v221) {
              sub_1CC207D3C(v185, 0x19u, (uint64_t)&v220, 0);
            }
          }
        }
        if (v220 != v222) {
          free(v220);
        }
        unint64_t v89 = llvm::FunctionSummary::specialRefCounts(v186);
        if (v218 >= (unint64_t)HIDWORD(v218)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v217 + v218) = *((_DWORD *)v186 + 3) & 0xFLL | (16
                                                                                * (((unint64_t)*((unsigned int *)v186 + 3) >> 6) & 0xF)) & 0xFFFFFFFFFFFFFCFFLL | ((((unint64_t)*((unsigned int *)v186 + 3) >> 4) & 3) << 8);
        unsigned int v90 = v218 + 1;
        LODWORD(v218) = v90;
        if (v90 >= HIDWORD(v218)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v217 + v90) = *((unsigned int *)v186 + 16);
        unsigned int v91 = v218 + 1;
        LODWORD(v218) = v91;
        if (v91 >= HIDWORD(v218)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v217 + v91) = *((_DWORD *)v186 + 17) & 0x3FFLL;
        unsigned int v92 = v218 + 1;
        LODWORD(v218) = v92;
        if (v92 >= HIDWORD(v218)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v217 + v92) = (uint64_t)(*((void *)v186 + 6) - *((void *)v186 + 5)) >> 3;
        unsigned int v93 = v218 + 1;
        LODWORD(v218) = v93;
        if (v93 >= HIDWORD(v218)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v217 + v93) = v89;
        unsigned int v94 = v218 + 1;
        LODWORD(v218) = v94;
        if (v94 >= HIDWORD(v218)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v217 + v94) = HIDWORD(v89);
        LODWORD(v218) = v218 + 1;
        unint64_t v95 = (void *)*((void *)v186 + 5);
        uint64_t v96 = *((void *)v186 + 6) - (void)v95;
        if (v96)
        {
          uint64_t v97 = 8 * (v96 >> 3);
          do
          {
            unsigned int v98 = llvm::ValueEnumerator::getValueID((uint64_t)(a1 + 3), *(void *)((*v95 & 0xFFFFFFFFFFFFFFF8) + 8));
            if (v218 >= (unint64_t)HIDWORD(v218)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v217 + v218) = v98;
            LODWORD(v218) = v218 + 1;
            ++v95;
            v97 -= 8;
          }
          while (v97);
        }
        llvm::Function::getEntryCount(v183, 0, (uint64_t)&v220);
        BOOL v99 = (v222[0] | ForceSummaryEdgesCold) != 0;
        uint64_t v100 = *((void *)v186 + 10);
        uint64_t v101 = *((void *)v186 + 11);
        unsigned int v43 = v191;
        if (v101 == v100)
        {
LABEL_224:
          if (byte_1EBCC8C88) {
            int v114 = 19;
          }
          else {
            int v114 = 1;
          }
          unsigned int v24 = v184;
          if (v99) {
            unsigned int v115 = v184;
          }
          else {
            unsigned int v115 = v187;
          }
          if (v99) {
            unsigned int v116 = 2;
          }
          else {
            unsigned int v116 = v114;
          }
          sub_1CC207D3C((llvm::raw_ostream *)*a1, v116, (uint64_t)&v217, v115);
          LODWORD(v218) = 0;
          goto LABEL_74;
        }
        while (1)
        {
          uint64_t v102 = (unint64_t *)(*(void *)v100 & 0xFFFFFFFFFFFFFFF8);
          if ((*(void *)v100 & 1) != 0 && (uint64_t v103 = v102[1]) != 0)
          {
            unsigned int v104 = llvm::ValueEnumerator::getValueID((uint64_t)(a1 + 3), v103);
          }
          else
          {
            BOOL v105 = a1 + 64;
            uint64_t v106 = (void *)*v193;
            if (!*v193) {
              goto LABEL_211;
            }
            unint64_t v107 = *v102;
            uint64_t v108 = a1 + 64;
            do
            {
              unint64_t v109 = v106[4];
              BOOL v110 = v109 >= v107;
              if (v109 >= v107) {
                uint64_t v111 = v106;
              }
              else {
                uint64_t v111 = v106 + 1;
              }
              if (v110) {
                uint64_t v108 = v106;
              }
              uint64_t v106 = (void *)*v111;
            }
            while (*v111);
            BOOL v105 = a1 + 64;
            if (v108 == v193 || v108[4] > v107) {
LABEL_211:
            }
              uint64_t v108 = v105;
            unsigned int v104 = *((_DWORD *)v108 + 10);
          }
          if (v218 >= (unint64_t)HIDWORD(v218)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v217 + v218) = v104;
          unsigned int v112 = v218 + 1;
          LODWORD(v218) = v218 + 1;
          if (v99) {
            break;
          }
          if (byte_1EBCC8C88)
          {
            unint64_t v113 = (unint64_t)*(unsigned int *)(v100 + 8) >> 3;
            goto LABEL_218;
          }
LABEL_220:
          v100 += 16;
          if (v100 == v101) {
            goto LABEL_224;
          }
        }
        unint64_t v113 = *(_DWORD *)(v100 + 8) & 7;
LABEL_218:
        if (v112 >= HIDWORD(v218)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v217 + v112) = v113;
        LODWORD(v218) = v218 + 1;
        goto LABEL_220;
      }
    }
LABEL_74:
    unsigned int v46 = (void *)v195[1];
  }
  while (v46 != v194);
  unsigned int v45 = (void *)a1[2];
LABEL_241:
  unint64_t v117 = v45 + 1;
  uint64_t v118 = (void *)v45[2];
  if (v118 == v45 + 1) {
    goto LABEL_298;
  }
  unsigned int v192 = v43;
  uint64_t v196 = v45 + 1;
  do
  {
    if (v118) {
      unsigned int v119 = (llvm::GlobalValue *)(v118 - 7);
    }
    else {
      unsigned int v119 = 0;
    }
    off_t v120 = a1[62];
    unint64_t v121 = sub_1CD4AC784(v119);
    unsigned int v124 = *(void **)(v120 + 8);
    off_t v123 = v120 + 8;
    int v122 = v124;
    if (!v124) {
      goto LABEL_257;
    }
    uint64_t v125 = (void *)v123;
    do
    {
      unint64_t v126 = v122[4];
      BOOL v127 = v126 >= v121;
      if (v126 >= v121) {
        unsigned int v128 = v122;
      }
      else {
        unsigned int v128 = v122 + 1;
      }
      if (v127) {
        uint64_t v125 = v122;
      }
      int v122 = (void *)*v128;
    }
    while (*v128);
    if (v125 == (void *)v123 || v125[4] > v121) {
LABEL_257:
    }
      uint64_t v125 = (void *)v123;
    if (v125 == (void *)v123) {
      uint64_t v129 = 0;
    }
    else {
      uint64_t v129 = (uint64_t)(v125 + 4);
    }
    unint64_t v130 = v129 & 0xFFFFFFFFFFFFFFF8;
    if ((v129 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v131 = *(uint64_t **)(v130 + 24);
      if (*(uint64_t **)(v130 + 32) != v131)
      {
        uint64_t v132 = *v131;
        unsigned int v133 = llvm::ValueEnumerator::getValueID((uint64_t)(a1 + 3), (uint64_t)v119);
        if (v218 >= (unint64_t)HIDWORD(v218)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v217 + v218) = v133;
        unsigned int v134 = v218 + 1;
        LODWORD(v218) = v134;
        if (v134 >= HIDWORD(v218)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v217 + v134) = *(_DWORD *)(v132 + 12) & 0xFLL | (16
                                                                   * (((unint64_t)*(unsigned int *)(v132 + 12) >> 6) & 0xF)) & 0xFFFFFFFFFFFFFCFFLL | ((((unint64_t)*(unsigned int *)(v132 + 12) >> 4) & 3) << 8);
        unsigned int v135 = v218 + 1;
        LODWORD(v218) = v135;
        if (v135 >= HIDWORD(v218)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v217 + v135) = *(_DWORD *)(v132 + 72) & 0x1FLL;
        LODWORD(v136) = v218 + 1;
        LODWORD(v218) = v218 + 1;
        uint64_t v137 = *(char ***)(v132 + 64);
        if (v137)
        {
          unsigned int v139 = *v137;
          uint64_t v138 = v137[1];
          if (v138 != v139)
          {
            if (v136 >= HIDWORD(v218)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            char v140 = 0;
            uint64_t v141 = (v138 - v139) >> 4;
            *((void *)v217 + v136) = (uint64_t)(*(void *)(v132 + 48) - *(void *)(v132 + 40)) >> 3;
            LODWORD(v136) = v218 + 1;
            LODWORD(v218) = v218 + 1;
            goto LABEL_273;
          }
          uint64_t v141 = 0;
        }
        else
        {
          uint64_t v141 = 0;
          unsigned int v139 = 0;
        }
        char v140 = 1;
LABEL_273:
        uint64_t v142 = v136;
        int v143 = *(void **)(v132 + 40);
        uint64_t v136 = v136;
        uint64_t v144 = *(void *)(v132 + 48) - (void)v143;
        if (v144)
        {
          uint64_t v145 = 8 * (v144 >> 3);
          do
          {
            unsigned int v146 = llvm::ValueEnumerator::getValueID((uint64_t)(a1 + 3), *(void *)((*v143 & 0xFFFFFFFFFFFFFFF8) + 8));
            if (v218 >= (unint64_t)HIDWORD(v218)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v217 + v218) = v146;
            uint64_t v136 = (v218 + 1);
            LODWORD(v218) = v218 + 1;
            ++v143;
            v145 -= 8;
          }
          while (v145);
        }
        uint64_t v147 = 8 * v136 - 8 * v142;
        if (v147 >= 16) {
          qsort((char *)v217 + 8 * v142, (unint64_t)v147 >> 3, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CD4FDB50);
        }
        if (v140)
        {
          sub_1CC207D3C((llvm::raw_ostream *)*a1, 3u, (uint64_t)&v217, v190);
          unint64_t v117 = v196;
        }
        else
        {
          unsigned int v148 = &v139[16 * v141];
          unint64_t v117 = v196;
          if (v141)
          {
            do
            {
              unsigned int v149 = llvm::ValueEnumerator::getValueID((uint64_t)(a1 + 3), *(void *)((*(void *)v139 & 0xFFFFFFFFFFFFFFF8) + 8));
              if (v218 >= (unint64_t)HIDWORD(v218)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v217 + v218) = v149;
              unsigned int v150 = v218 + 1;
              LODWORD(v218) = v150;
              if (v150 >= HIDWORD(v218)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v217 + v150) = *((void *)v139 + 1);
              LODWORD(v218) = v218 + 1;
              v139 += 16;
            }
            while (v139 != v148);
          }
          sub_1CC207D3C((llvm::raw_ostream *)*a1, 0x17u, (uint64_t)&v217, v189);
        }
        LODWORD(v218) = 0;
        unsigned int v43 = v192;
      }
    }
    uint64_t v118 = (void *)v118[1];
  }
  while (v118 != v117);
  unsigned int v45 = (void *)a1[2];
LABEL_298:
  unsigned int v151 = v45 + 5;
  unsigned int v152 = (void *)v45[6];
  if (v152 != v45 + 5)
  {
    do
    {
      if (v152) {
        uint64_t v153 = (llvm::GlobalAlias *)(v152 - 6);
      }
      else {
        uint64_t v153 = 0;
      }
      uint64_t AliaseeObject = llvm::GlobalAlias::getAliaseeObject(v153);
      if ((*(unsigned char *)(AliaseeObject + 23) & 0x10) != 0)
      {
        uint64_t v155 = AliaseeObject;
        unsigned int v156 = llvm::ValueEnumerator::getValueID((uint64_t)(a1 + 3), (uint64_t)v153);
        unsigned int v157 = llvm::ValueEnumerator::getValueID((uint64_t)(a1 + 3), v155);
        if (v218 >= (unint64_t)HIDWORD(v218)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v217 + v218) = v156;
        LODWORD(v218) = v218 + 1;
        unsigned int v158 = (llvm::ModuleSummaryIndex *)a1[62];
        unint64_t v159 = sub_1CD4AC784(v153);
        unint64_t v160 = *(unsigned int *)(llvm::ModuleSummaryIndex::getGlobalValueSummary(v158, v159) + 12);
        if (v218 >= (unint64_t)HIDWORD(v218)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v217 + v218) = v160 & 0xF | (16 * ((v160 >> 6) & 0xF)) & 0xFFFFFFFFFFFFFCFFLL | (((v160 >> 4) & 3) << 8);
        unsigned int v161 = v218 + 1;
        LODWORD(v218) = v161;
        if (v161 >= HIDWORD(v218)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v217 + v161) = v157;
        LODWORD(v218) = v218 + 1;
        sub_1CC207D3C((llvm::raw_ostream *)*a1, 7u, (uint64_t)&v217, v188);
        LODWORD(v218) = 0;
      }
      unsigned int v152 = (void *)v152[1];
    }
    while (v152 != v151);
  }
  off_t v162 = a1[62];
  uint64_t v163 = *(void **)(v162 + 80);
  uint64_t v164 = (void *)(v162 + 88);
  if (v163 != (void *)(v162 + 88))
  {
    do
    {
      uint64_t v165 = a1[1];
      char v166 = *((unsigned char *)v163 + 55);
      if (v166 >= 0) {
        unsigned int v167 = v163 + 4;
      }
      else {
        unsigned int v167 = (void *)v163[4];
      }
      if (v166 >= 0) {
        uint64_t v168 = v166 & 0x7F;
      }
      else {
        uint64_t v168 = v163[5];
      }
      unsigned int v169 = sub_1CD0B03C8(v167, (uint64_t)v167 + v168);
      unint64_t v170 = llvm::StringTableBuilder::add(v165, (uint64_t)v167, v168 | ((unint64_t)v169 << 32));
      if (v218 >= (unint64_t)HIDWORD(v218)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v217 + v218) = v170;
      unsigned int v171 = v218 + 1;
      LODWORD(v218) = v218 + 1;
      char v172 = *((unsigned char *)v163 + 55);
      int v173 = v172;
      uint64_t v174 = v172 & 0x7F;
      if (v173 >= 0) {
        uint64_t v175 = v174;
      }
      else {
        uint64_t v175 = v163[5];
      }
      if (v171 >= HIDWORD(v218)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v217 + v171) = v175;
      unsigned int v176 = v218 + 1;
      LODWORD(v218) = v218 + 1;
      uint64_t v177 = (void *)v163[7];
      uint64_t v178 = (void *)v163[8];
      while (v177 != v178)
      {
        if (v176 >= HIDWORD(v218)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v217 + v176) = *v177;
        LODWORD(v218) = v218 + 1;
        unsigned int v179 = llvm::ValueEnumerator::getValueID((uint64_t)(a1 + 3), *(void *)((v177[1] & 0xFFFFFFFFFFFFFFF8) + 8));
        if (v218 >= (unint64_t)HIDWORD(v218)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v217 + v218) = v179;
        unsigned int v176 = v218 + 1;
        LODWORD(v218) = v218 + 1;
        v177 += 2;
      }
      sub_1CC207D3C((llvm::raw_ostream *)*a1, 0x16u, (uint64_t)&v217, v43);
      LODWORD(v218) = 0;
      uint64_t v180 = (void *)v163[1];
      if (v180)
      {
        do
        {
          uint64_t v181 = v180;
          uint64_t v180 = (void *)*v180;
        }
        while (v180);
      }
      else
      {
        do
        {
          uint64_t v181 = (void *)v163[2];
          BOOL v8 = *v181 == (void)v163;
          uint64_t v163 = v181;
        }
        while (!v8);
      }
      uint64_t v163 = v181;
    }
    while (v181 != v164);
    off_t v162 = a1[62];
  }
  size_t v182 = (llvm::raw_ostream *)*a1;
  unint64_t v223 = *(void *)(v162 + 296);
  uint64_t v220 = &v223;
  uint64_t v221 = 1;
  sub_1CC206B4C(v182, 0x18u, &v220);
  sub_1CC1F7D44(*a1);
  if (v217 != v219) {
    free(v217);
  }
}

void sub_1CC205868(llvm::raw_ostream *a1, unsigned int a2, unsigned char *a3, uint64_t a4, unsigned int a5)
{
  v16[32] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = v16;
  uint64_t v15 = 0x4000000000;
  if (a4)
  {
    uint64_t v6 = a4;
    unsigned int v8 = 0;
    do
    {
      int v9 = (char)*a3;
      if (((*a3 & 0xDF) - 65) < 0x1Au || (*a3 - 48) < 0xAu || v9 == 46 || v9 == 95) {
        unsigned int v13 = a5;
      }
      else {
        unsigned int v13 = 0;
      }
      if (a5) {
        a5 = v13;
      }
      else {
        a5 = 0;
      }
      if (v8 >= HIDWORD(v15)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v14 + v8) = v9;
      unsigned int v8 = v15 + 1;
      LODWORD(v15) = v15 + 1;
      ++a3;
      --v6;
    }
    while (v6);
  }
  sub_1CC2059BC(a1, a2, (uint64_t)&v14, a5);
  if (v14 != v16) {
    free(v14);
  }
}

llvm::raw_ostream *sub_1CC2059BC(llvm::raw_ostream *result, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5 = (uint64_t)result;
  if (a4)
  {
    uint64_t v18 = *(void *)a3;
    uint64_t v19 = a2 | 0x100000000;
    uint64_t v21 = *(unsigned int *)(a3 + 8);
    return sub_1CC205E50(result, a4, v18, v21, 0, 0, v19);
  }
  else
  {
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    int v7 = *((_DWORD *)result + 8);
    int v8 = *((_DWORD *)result + 6);
    unsigned int v9 = *((_DWORD *)result + 7) | (3 << v8);
    *((_DWORD *)result + 7) = v9;
    unsigned int v10 = v8 + v7;
    if (v10 >= 0x20)
    {
      int64x2_t v22 = *(void **)result;
      uint64_t v23 = *(void *)(*(void *)result + 8);
      if (*(void *)(*(void *)result + 16) < (unint64_t)(v23 + 4)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(_DWORD *)(*v22 + v23) = v9;
      v22[1] += 4;
      uint64_t result = (llvm::raw_ostream *)*((void *)result + 1);
      if (result)
      {
        size_t v39 = *(void *)(*(void *)v5 + 8);
        if (v39 >= *(void *)(v5 + 16))
        {
          uint64_t v50 = v6;
          unsigned int v40 = a2;
          uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v5, v39);
          uint64_t v6 = v50;
          a2 = v40;
          *(void *)(*(void *)v5 + 8) = 0;
        }
      }
      int v24 = *(_DWORD *)(v5 + 24);
      if (v24) {
        unsigned int v9 = 3u >> -(char)v24;
      }
      else {
        unsigned int v9 = 0;
      }
      *(_DWORD *)(v5 + 28) = v9;
      unsigned int v10 = (v24 + v7) & 0x1F;
    }
    *(_DWORD *)(v5 + 24) = v10;
    if (a2 >= 0x20)
    {
      uint64_t v38 = v6;
      uint64_t result = (llvm::raw_ostream *)sub_1CC202230(v5, a2 & 0x1F | 0x20, 6);
      uint64_t v6 = v38;
      unsigned int v10 = *(_DWORD *)(v5 + 24);
      unsigned int v9 = *(_DWORD *)(v5 + 28);
      a2 = 1;
    }
    int v11 = (a2 << v10) | v9;
    *(_DWORD *)(v5 + 28) = v11;
    unsigned int v12 = v10 + 6;
    if (v10 + 6 >= 0x20)
    {
      unsigned int v25 = *(const char ***)v5;
      uint64_t v26 = *(void *)(*(void *)v5 + 8);
      if (*(void *)(*(void *)v5 + 16) < (unint64_t)(v26 + 4)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(_DWORD *)&(*v25)[v26] = v11;
      v25[1] += 4;
      uint64_t result = *(llvm::raw_ostream **)(v5 + 8);
      if (result)
      {
        size_t v41 = *(void *)(*(void *)v5 + 8);
        if (v41 >= *(void *)(v5 + 16))
        {
          uint64_t v42 = v6;
          unsigned int v43 = a2;
          uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v5, v41);
          uint64_t v6 = v42;
          a2 = v43;
          *(void *)(*(void *)v5 + 8) = 0;
        }
      }
      int v27 = *(_DWORD *)(v5 + 24);
      if (v27) {
        int v11 = a2 >> -(char)v27;
      }
      else {
        int v11 = 0;
      }
      unsigned int v12 = (v27 + 6) & 0x1F;
    }
    *(_DWORD *)(v5 + 24) = v12;
    if (v6 >= 0x20)
    {
      unsigned int v32 = v6;
      do
      {
        unsigned int v33 = v32 & 0x1F | 0x20;
        v11 |= v33 << v12;
        *(_DWORD *)(v5 + 28) = v11;
        if (v12 >= 0x1A)
        {
          size_t v35 = *(const char ***)v5;
          uint64_t v36 = *(void *)(*(void *)v5 + 8);
          if (*(void *)(*(void *)v5 + 16) < (unint64_t)(v36 + 4)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(_DWORD *)&(*v35)[v36] = v11;
          v35[1] += 4;
          uint64_t result = *(llvm::raw_ostream **)(v5 + 8);
          if (result)
          {
            size_t v47 = *(void *)(*(void *)v5 + 8);
            if (v47 >= *(void *)(v5 + 16))
            {
              uint64_t v51 = v6;
              unsigned int v48 = v32;
              int v49 = v32 & 0x1F | 0x20;
              uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v5, v47);
              unsigned int v33 = v49;
              unsigned int v32 = v48;
              uint64_t v6 = v51;
              *(void *)(*(void *)v5 + 8) = 0;
            }
          }
          int v37 = *(_DWORD *)(v5 + 24);
          if (v37) {
            int v11 = v33 >> -(char)v37;
          }
          else {
            int v11 = 0;
          }
          *(_DWORD *)(v5 + 28) = v11;
          unsigned int v12 = (v37 + 6) & 0x1F;
        }
        else
        {
          v12 += 6;
        }
        *(_DWORD *)(v5 + 24) = v12;
        unsigned int v13 = v32 >> 5;
        BOOL v34 = v32 > 0x3FF;
        v32 >>= 5;
      }
      while (v34);
    }
    else
    {
      unsigned int v13 = v6;
    }
    int v14 = (v13 << v12) | v11;
    *(_DWORD *)(v5 + 28) = v14;
    if (v12 >= 0x1A)
    {
      int64x2_t v28 = *(const char ***)v5;
      uint64_t v29 = *(void *)(*(void *)v5 + 8);
      if (*(void *)(*(void *)v5 + 16) < (unint64_t)(v29 + 4)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(_DWORD *)&(*v28)[v29] = v14;
      v28[1] += 4;
      uint64_t result = *(llvm::raw_ostream **)(v5 + 8);
      if (result)
      {
        size_t v44 = *(void *)(*(void *)v5 + 8);
        if (v44 >= *(void *)(v5 + 16))
        {
          uint64_t v45 = v6;
          unsigned int v46 = v13;
          uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v5, v44);
          unsigned int v13 = v46;
          uint64_t v6 = v45;
          *(void *)(*(void *)v5 + 8) = 0;
        }
      }
      int v30 = *(_DWORD *)(v5 + 24);
      unsigned int v31 = v13 >> -(char)v30;
      if (!v30) {
        unsigned int v31 = 0;
      }
      *(_DWORD *)(v5 + 28) = v31;
      int v15 = ((_BYTE)v30 + 6) & 0x1F;
    }
    else
    {
      int v15 = v12 + 6;
    }
    *(_DWORD *)(v5 + 24) = v15;
    if (v6)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 4 * v6;
      do
      {
        uint64_t result = (llvm::raw_ostream *)sub_1CC202E58(v5, *(unsigned int *)(*(void *)a3 + v16), 6);
        v16 += 4;
      }
      while (v17 != v16);
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CC205E50(llvm::raw_ostream *result, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = a6;
  uint64_t v11 = (uint64_t)result;
  uint64_t v12 = *(void *)(*((void *)result + 5) + 16 * (a2 - 4));
  int v13 = *((_DWORD *)result + 8);
  int v14 = *((_DWORD *)result + 6);
  int v15 = *((_DWORD *)result + 7) | (a2 << v14);
  *((_DWORD *)result + 7) = v15;
  unsigned int v16 = v14 + v13;
  if (v16 >= 0x20)
  {
    unsigned int v31 = *(void **)result;
    uint64_t v32 = *(void *)(*(void *)result + 8);
    if (*(void *)(*(void *)result + 16) < (unint64_t)(v32 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)(*v31 + v32) = v15;
    v31[1] += 4;
    uint64_t result = (llvm::raw_ostream *)*((void *)result + 1);
    if (result)
    {
      size_t v43 = *(void *)(*(void *)v11 + 8);
      if (v43 >= *(void *)(v11 + 16))
      {
        unsigned int v45 = a2;
        uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v11, v43);
        a2 = v45;
        uint64_t v8 = a6;
        *(void *)(*(void *)v11 + 8) = 0;
      }
    }
    int v33 = *(_DWORD *)(v11 + 24);
    unsigned int v34 = a2 >> -(char)v33;
    if (!v33) {
      unsigned int v34 = 0;
    }
    *(_DWORD *)(v11 + 28) = v34;
    unsigned int v16 = ((_BYTE)v33 + (_BYTE)v13) & 0x1F;
  }
  *(_DWORD *)(v11 + 24) = v16;
  int v17 = *(_DWORD *)(v12 + 8);
  if ((a7 & 0xFF00000000) != 0)
  {
    if ((*(unsigned char *)(*(void *)v12 + 8) & 1) == 0) {
      uint64_t result = (llvm::raw_ostream *)sub_1CC206228(v11, *(uint64_t **)v12, a7);
    }
    unsigned int v18 = 1;
  }
  else
  {
    unsigned int v18 = 0;
  }
  if (v18 != v17)
  {
    unsigned int v19 = 0;
    uint64_t v20 = v8;
    uint64_t v21 = a5;
    while (1)
    {
      uint64_t v22 = *(void *)v12 + 16 * v18;
      unsigned int v23 = *(unsigned __int8 *)(v22 + 8);
      if (v23) {
        goto LABEL_12;
      }
      int v24 = (v23 >> 1) & 7;
      if (v24 != 3) {
        break;
      }
      uint64_t v47 = v20;
      uint64_t v48 = v8;
      unsigned int v25 = (uint64_t *)(*(void *)v12 + 16 * ++v18);
      if (v21)
      {
        unsigned int v40 = v8;
        if (v8 >= 0x20)
        {
          do
          {
            sub_1CC202230(v11, v8 & 0x1F | 0x20, 6);
            unsigned int v40 = v8 >> 5;
            BOOL v39 = v8 > 0x3FF;
            LODWORD(v8) = v8 >> 5;
          }
          while (v39);
        }
        uint64_t result = (llvm::raw_ostream *)sub_1CC202230(v11, v40, 6);
        if (v48)
        {
          uint64_t v41 = v47;
          do
          {
            unsigned int v42 = *(unsigned __int8 *)v21++;
            uint64_t result = (llvm::raw_ostream *)sub_1CC2064A8(v11, v25, v42);
            --v41;
          }
          while (v41);
        }
        uint64_t v21 = 0;
      }
      else
      {
        unsigned int v26 = a4 - v19;
        if (a4 - v19 >= 0x20)
        {
          do
          {
            uint64_t result = (llvm::raw_ostream *)sub_1CC202230(v11, v26 & 0x1F | 0x20, 6);
            unsigned int v27 = v26 >> 5;
            BOOL v39 = v26 > 0x3FF;
            v26 >>= 5;
          }
          while (v39);
        }
        else
        {
          unsigned int v27 = a4 - v19;
        }
        int v28 = *(_DWORD *)(v11 + 24);
        int v29 = *(_DWORD *)(v11 + 28) | (v27 << v28);
        *(_DWORD *)(v11 + 28) = v29;
        unsigned int v30 = v28 + 6;
        if (v30 >= 0x20)
        {
          size_t v35 = *(const char ***)v11;
          uint64_t v36 = *(void *)(*(void *)v11 + 8);
          if (*(void *)(*(void *)v11 + 16) < (unint64_t)(v36 + 4)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(_DWORD *)&(*v35)[v36] = v29;
          v35[1] += 4;
          uint64_t result = *(llvm::raw_ostream **)(v11 + 8);
          if (result)
          {
            size_t v46 = *(void *)(*(void *)v11 + 8);
            if (v46 >= *(void *)(v11 + 16))
            {
              uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v11, v46);
              *(void *)(*(void *)v11 + 8) = 0;
            }
          }
          int v37 = *(_DWORD *)(v11 + 24);
          unsigned int v38 = v27 >> -(char)v37;
          if (!v37) {
            unsigned int v38 = 0;
          }
          *(_DWORD *)(v11 + 28) = v38;
          unsigned int v30 = ((_BYTE)v37 + 6) & 0x1F;
        }
        *(_DWORD *)(v11 + 24) = v30;
        if (a4 != v19)
        {
          uint64_t v8 = v48;
          do
            uint64_t result = (llvm::raw_ostream *)sub_1CC206228(v11, v25, *(_DWORD *)(a3 + 4 * v19++));
          while (a4 != v19);
          uint64_t v21 = 0;
          unsigned int v19 = a4;
          uint64_t v20 = v47;
          goto LABEL_13;
        }
        uint64_t v21 = 0;
        unsigned int v19 = a4;
      }
      uint64_t v20 = v47;
      uint64_t v8 = v48;
LABEL_13:
      if (++v18 == v17) {
        return result;
      }
    }
    if (v24 == 5)
    {
      if (v21)
      {
        uint64_t result = sub_1CC206724((llvm::raw_ostream *)v11, a5, v8, 1);
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t result = (llvm::raw_ostream *)sub_1CD4FD5B8(v11, (char *)(a3 + 4 * v19), a4 - v19, 1);
      }
      goto LABEL_13;
    }
    uint64_t result = (llvm::raw_ostream *)sub_1CC206228(v11, (uint64_t *)v22, *(_DWORD *)(a3 + 4 * v19));
LABEL_12:
    ++v19;
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_1CC206228(uint64_t result, uint64_t *a2, unsigned int a3)
{
  int v3 = (*((unsigned __int8 *)a2 + 8) >> 1) & 7;
  if (v3 == 1)
  {
    uint64_t v5 = *a2;
    if (!*a2) {
      return result;
    }
    int v6 = *(_DWORD *)(result + 24);
    int v7 = *(_DWORD *)(result + 28) | (a3 << v6);
    *(_DWORD *)(result + 28) = v7;
    unsigned int v8 = v6 + v5;
    if (v8 < 0x20) {
      goto LABEL_30;
    }
    unsigned int v9 = *(void **)result;
    uint64_t v10 = *(void *)(*(void *)result + 8);
    if (*(void *)(*(void *)result + 16) < (unint64_t)(v10 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)(*v9 + v10) = v7;
    v9[1] += 4;
    uint64_t v11 = *(llvm::raw_ostream **)(result + 8);
    if (v11)
    {
      size_t v25 = *(void *)(*(void *)result + 8);
      if (v25 >= *(void *)(result + 16))
      {
        uint64_t v30 = result;
        unsigned int v28 = a3;
        char v26 = v5;
        llvm::raw_ostream::write(v11, **(const char ***)result, v25);
        LOBYTE(v5) = v26;
        a3 = v28;
        uint64_t result = v30;
        *(void *)(*(void *)v30 + 8) = 0;
      }
    }
    int v12 = *(_DWORD *)(result + 24);
    unsigned int v13 = a3 >> -(char)v12;
    if (!v12) {
      unsigned int v13 = 0;
    }
    *(_DWORD *)(result + 28) = v13;
    char v14 = v12 + v5;
    goto LABEL_29;
  }
  if (v3 != 2)
  {
    if (a3 == 46) {
      int v15 = 62;
    }
    else {
      int v15 = 63;
    }
    if (a3 - 48 <= 9) {
      int v15 = (char)a3 + 4;
    }
    if (a3 - 65 <= 0x19) {
      int v15 = (char)a3 - 39;
    }
    unsigned int v16 = (char)a3 - 97;
    if (a3 - 97 > 0x19) {
      unsigned int v16 = v15;
    }
    int v17 = *(_DWORD *)(result + 24);
    int v18 = *(_DWORD *)(result + 28) | (v16 << v17);
    *(_DWORD *)(result + 28) = v18;
    unsigned int v8 = v17 + 6;
    if (v8 < 0x20) {
      goto LABEL_30;
    }
    unsigned int v19 = *(const char ***)result;
    uint64_t v20 = *(void *)(*(void *)result + 8);
    if (*(void *)(*(void *)result + 16) < (unint64_t)(v20 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)&(*v19)[v20] = v18;
    v19[1] += 4;
    uint64_t v21 = *(llvm::raw_ostream **)(result + 8);
    if (v21)
    {
      size_t v24 = *(void *)(*(void *)result + 8);
      if (v24 >= *(void *)(result + 16))
      {
        uint64_t v29 = result;
        unsigned int v27 = v16;
        llvm::raw_ostream::write(v21, **(const char ***)result, v24);
        unsigned int v16 = v27;
        uint64_t result = v29;
        *(void *)(*(void *)v29 + 8) = 0;
      }
    }
    int v22 = *(_DWORD *)(result + 24);
    unsigned int v23 = v16 >> -(char)v22;
    if (!v22) {
      unsigned int v23 = 0;
    }
    *(_DWORD *)(result + 28) = v23;
    char v14 = v22 + 6;
LABEL_29:
    unsigned int v8 = v14 & 0x1F;
LABEL_30:
    *(_DWORD *)(result + 24) = v8;
    return result;
  }
  uint64_t v4 = *a2;
  if (*a2)
  {
    return sub_1CC202E58(result, a3, v4);
  }
  return result;
}

uint64_t sub_1CC2064A8(uint64_t result, uint64_t *a2, unsigned int a3)
{
  int v3 = (*((unsigned __int8 *)a2 + 8) >> 1) & 7;
  if (v3 == 1)
  {
    uint64_t v5 = *a2;
    if (!*a2) {
      return result;
    }
    int v6 = *(_DWORD *)(result + 24);
    int v7 = *(_DWORD *)(result + 28) | (a3 << v6);
    *(_DWORD *)(result + 28) = v7;
    unsigned int v8 = v6 + v5;
    if (v8 < 0x20) {
      goto LABEL_33;
    }
    unsigned int v9 = *(void **)result;
    uint64_t v10 = *(void *)(*(void *)result + 8);
    if (*(void *)(*(void *)result + 16) < (unint64_t)(v10 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)(*v9 + v10) = v7;
    v9[1] += 4;
    uint64_t v11 = *(llvm::raw_ostream **)(result + 8);
    if (v11)
    {
      size_t v27 = *(void *)(*(void *)result + 8);
      if (v27 >= *(void *)(result + 16))
      {
        uint64_t v32 = result;
        unsigned int v30 = a3;
        char v28 = v5;
        llvm::raw_ostream::write(v11, **(const char ***)result, v27);
        LOBYTE(v5) = v28;
        a3 = v30;
        uint64_t result = v32;
        *(void *)(*(void *)v32 + 8) = 0;
      }
    }
    int v12 = *(_DWORD *)(result + 24);
    unsigned int v13 = a3 >> -(char)v12;
    if (!v12) {
      unsigned int v13 = 0;
    }
    *(_DWORD *)(result + 28) = v13;
    char v14 = v12 + v5;
    goto LABEL_32;
  }
  if (v3 != 2)
  {
    if (a3 == 46) {
      int v15 = 62;
    }
    else {
      int v15 = 63;
    }
    if (a3 - 48 <= 9) {
      int v16 = (char)a3 + 4;
    }
    else {
      int v16 = v15;
    }
    if (a3 - 65 <= 0x19) {
      int v17 = (char)a3 - 39;
    }
    else {
      int v17 = v16;
    }
    if (a3 - 97 <= 0x19) {
      unsigned int v18 = (char)a3 - 97;
    }
    else {
      unsigned int v18 = v17;
    }
    int v19 = *(_DWORD *)(result + 24);
    int v20 = *(_DWORD *)(result + 28) | (v18 << v19);
    *(_DWORD *)(result + 28) = v20;
    unsigned int v8 = v19 + 6;
    if (v8 < 0x20) {
      goto LABEL_33;
    }
    uint64_t v21 = *(const char ***)result;
    uint64_t v22 = *(void *)(*(void *)result + 8);
    if (*(void *)(*(void *)result + 16) < (unint64_t)(v22 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)&(*v21)[v22] = v20;
    v21[1] += 4;
    unsigned int v23 = *(llvm::raw_ostream **)(result + 8);
    if (v23)
    {
      size_t v26 = *(void *)(*(void *)result + 8);
      if (v26 >= *(void *)(result + 16))
      {
        uint64_t v31 = result;
        unsigned int v29 = v18;
        llvm::raw_ostream::write(v23, **(const char ***)result, v26);
        unsigned int v18 = v29;
        uint64_t result = v31;
        *(void *)(*(void *)v31 + 8) = 0;
      }
    }
    int v24 = *(_DWORD *)(result + 24);
    unsigned int v25 = v18 >> -(char)v24;
    if (!v24) {
      unsigned int v25 = 0;
    }
    *(_DWORD *)(result + 28) = v25;
    char v14 = v24 + 6;
LABEL_32:
    unsigned int v8 = v14 & 0x1F;
LABEL_33:
    *(_DWORD *)(result + 24) = v8;
    return result;
  }
  uint64_t v4 = *a2;
  if (*a2)
  {
    return sub_1CC202E58(result, a3, v4);
  }
  return result;
}

llvm::raw_ostream *sub_1CC206724(llvm::raw_ostream *result, const char *a2, uint64_t a3, char a4)
{
  uint64_t v4 = a3;
  int v6 = result;
  if (a4)
  {
    if (a3 > 0x1F)
    {
      unsigned int v7 = *((_DWORD *)result + 6);
      unsigned int v8 = *((_DWORD *)result + 7);
      unsigned int v20 = a3;
      do
      {
        unsigned int v21 = v20 & 0x1F | 0x20;
        v8 |= v21 << v7;
        *((_DWORD *)v6 + 7) = v8;
        v7 += 6;
        if (v7 >= 0x20)
        {
          unsigned int v23 = *(void **)v6;
          uint64_t v24 = *(void *)(*(void *)v6 + 8);
          if (*(void *)(*(void *)v6 + 16) < (unint64_t)(v24 + 4)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(_DWORD *)(*v23 + v24) = v8;
          v23[1] += 4;
          uint64_t result = (llvm::raw_ostream *)*((void *)v6 + 1);
          if (result)
          {
            size_t v34 = *(void *)(*(void *)v6 + 8);
            if (v34 >= *((void *)v6 + 2))
            {
              uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v6, v34);
              unsigned int v21 = v20 & 0x1F | 0x20;
              *(void *)(*(void *)v6 + 8) = 0;
            }
          }
          int v25 = *((_DWORD *)v6 + 6);
          unsigned int v26 = v21 >> -(char)v25;
          if (v25) {
            unsigned int v8 = v26;
          }
          else {
            unsigned int v8 = 0;
          }
          *((_DWORD *)v6 + 7) = v8;
          unsigned int v7 = (v25 + 6) & 0x1F;
        }
        *((_DWORD *)v6 + 6) = v7;
        unsigned int v9 = v20 >> 5;
        BOOL v22 = v20 > 0x3FF;
        v20 >>= 5;
      }
      while (v22);
    }
    else
    {
      unsigned int v7 = *((_DWORD *)result + 6);
      unsigned int v8 = *((_DWORD *)result + 7);
      unsigned int v9 = a3;
    }
    int v10 = (v9 << v7) | v8;
    *((_DWORD *)v6 + 7) = v10;
    unsigned int v11 = v7 + 6;
    if (v11 >= 0x20)
    {
      size_t v27 = *(const char ***)v6;
      uint64_t v28 = *(void *)(*(void *)v6 + 8);
      if (*(void *)(*(void *)v6 + 16) < (unint64_t)(v28 + 4)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(_DWORD *)&(*v27)[v28] = v10;
      v27[1] += 4;
      uint64_t result = (llvm::raw_ostream *)*((void *)v6 + 1);
      if (result)
      {
        size_t v32 = *(void *)(*(void *)v6 + 8);
        if (v32 >= *((void *)v6 + 2))
        {
          unsigned int v33 = v9;
          uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v6, v32);
          unsigned int v9 = v33;
          *(void *)(*(void *)v6 + 8) = 0;
        }
      }
      int v29 = *((_DWORD *)v6 + 6);
      unsigned int v30 = v9 >> -(char)v29;
      if (!v29) {
        unsigned int v30 = 0;
      }
      *((_DWORD *)v6 + 7) = v30;
      unsigned int v11 = (v29 + 6) & 0x1F;
    }
    *((_DWORD *)v6 + 6) = v11;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)result + 6);
  }
  if (v11)
  {
    uint64_t result = sub_1CC202350((const char ***)v6, *((_DWORD *)v6 + 7));
    *((void *)v6 + 3) = 0;
  }
  for (; v4; --v4)
  {
    int v12 = *(const char ***)v6;
    uint64_t v13 = *(void *)(*(void *)v6 + 8);
    if ((unint64_t)(v13 + 1) > *(void *)(*(void *)v6 + 16)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    (*v12)[v13] = *a2;
    ++v12[1];
    uint64_t result = (llvm::raw_ostream *)*((void *)v6 + 1);
    if (result)
    {
      size_t v31 = *(void *)(*(void *)v6 + 8);
      if (v31 >= *((void *)v6 + 2))
      {
        uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v6, v31);
        *(void *)(*(void *)v6 + 8) = 0;
      }
    }
    ++a2;
  }
  while (1)
  {
    char v14 = (void *)*((void *)v6 + 1);
    uint64_t v15 = *(void *)(*(void *)v6 + 8);
    if (v14)
    {
      uint64_t result = (llvm::raw_ostream *)(*(uint64_t (**)(void))(*v14 + 80))(*((void *)v6 + 1));
      int v16 = (char *)result + v14[4] - v14[2];
    }
    else
    {
      LOBYTE(v16) = 0;
    }
    if ((((_BYTE)v16 + (_BYTE)v15) & 3) == 0) {
      break;
    }
    int v17 = *(const char ***)v6;
    uint64_t v18 = *(void *)(*(void *)v6 + 8);
    if ((unint64_t)(v18 + 1) > *(void *)(*(void *)v6 + 16)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    (*v17)[v18] = 0;
    ++v17[1];
    uint64_t result = (llvm::raw_ostream *)*((void *)v6 + 1);
    if (result)
    {
      size_t v19 = *(void *)(*(void *)v6 + 8);
      if (v19 >= *((void *)v6 + 2))
      {
        uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v6, v19);
        *(void *)(*(void *)v6 + 8) = 0;
      }
    }
  }
  return result;
}

llvm::raw_ostream **sub_1CC206A94(llvm::raw_ostream **result, char a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *((void *)*result + 1);
  if ((unint64_t)(v3 + 1) > *((void *)*result + 2)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *(unsigned char *)(*(void *)v2 + v3) = a2;
  ++*((void *)v2 + 1);
  if (result[1])
  {
    size_t v4 = *((void *)*result + 1);
    if (v4 >= (unint64_t)result[2])
    {
      uint64_t v5 = result;
      uint64_t result = (llvm::raw_ostream **)llvm::raw_ostream::write(result[1], *(const char **)*result, v4);
      *((void *)*v5 + 1) = 0;
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CC206B4C(llvm::raw_ostream *result, unsigned int a2, void *a3)
{
  uint64_t v4 = (uint64_t)result;
  uint64_t v5 = a3[1];
  int v6 = *((_DWORD *)result + 8);
  int v7 = *((_DWORD *)result + 6);
  unsigned int v8 = *((_DWORD *)result + 7) | (3 << v7);
  *((_DWORD *)result + 7) = v8;
  unsigned int v9 = v7 + v6;
  if (v9 >= 0x20)
  {
    int v17 = *(void **)result;
    uint64_t v18 = *(void *)(*(void *)result + 8);
    if (*(void *)(*(void *)result + 16) < (unint64_t)(v18 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)(*v17 + v18) = v8;
    v17[1] += 4;
    uint64_t result = (llvm::raw_ostream *)*((void *)result + 1);
    if (result)
    {
      size_t v28 = *(void *)(*(void *)v4 + 8);
      if (v28 >= *(void *)(v4 + 16))
      {
        int v37 = v5;
        unsigned int v29 = a2;
        uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v4, v28);
        LODWORD(v5) = v37;
        a2 = v29;
        *(void *)(*(void *)v4 + 8) = 0;
      }
    }
    int v19 = *(_DWORD *)(v4 + 24);
    if (v19) {
      unsigned int v8 = 3u >> -(char)v19;
    }
    else {
      unsigned int v8 = 0;
    }
    unsigned int v9 = (v19 + v6) & 0x1F;
  }
  int v10 = (a2 << v9) | v8;
  *(_DWORD *)(v4 + 24) = v9;
  *(_DWORD *)(v4 + 28) = v10;
  if (v9 >= 0x1A)
  {
    unsigned int v20 = *(const char ***)v4;
    uint64_t v21 = *(void *)(*(void *)v4 + 8);
    if (*(void *)(*(void *)v4 + 16) < (unint64_t)(v21 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)&(*v20)[v21] = v10;
    v20[1] += 4;
    uint64_t result = *(llvm::raw_ostream **)(v4 + 8);
    if (result)
    {
      size_t v30 = *(void *)(*(void *)v4 + 8);
      if (v30 >= *(void *)(v4 + 16))
      {
        int v31 = v5;
        unsigned int v32 = a2;
        uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v4, v30);
        LODWORD(v5) = v31;
        a2 = v32;
        *(void *)(*(void *)v4 + 8) = 0;
      }
    }
    int v22 = *(_DWORD *)(v4 + 24);
    if (v22) {
      int v10 = a2 >> -(char)v22;
    }
    else {
      int v10 = 0;
    }
    *(_DWORD *)(v4 + 28) = v10;
    int v11 = (v22 + 6) & 0x1F;
  }
  else
  {
    int v11 = v9 + 6;
  }
  *(_DWORD *)(v4 + 24) = v11;
  unsigned int v12 = v5;
  if (v5 >= 0x20)
  {
    int v36 = v5;
    unsigned int v12 = v5;
    do
    {
      unsigned int v27 = v12;
      uint64_t result = (llvm::raw_ostream *)sub_1CC202230(v4, v12 & 0x1F | 0x20, 6);
      unsigned int v12 = v27 >> 5;
    }
    while (v27 > 0x3FF);
    int v11 = *(_DWORD *)(v4 + 24);
    int v10 = *(_DWORD *)(v4 + 28);
    LODWORD(v5) = v36;
  }
  int v13 = (v12 << v11) | v10;
  *(_DWORD *)(v4 + 28) = v13;
  unsigned int v14 = v11 + 6;
  if (v14 >= 0x20)
  {
    unsigned int v23 = *(const char ***)v4;
    uint64_t v24 = *(void *)(*(void *)v4 + 8);
    if (*(void *)(*(void *)v4 + 16) < (unint64_t)(v24 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)&(*v23)[v24] = v13;
    v23[1] += 4;
    uint64_t result = *(llvm::raw_ostream **)(v4 + 8);
    if (result)
    {
      size_t v33 = *(void *)(*(void *)v4 + 8);
      if (v33 >= *(void *)(v4 + 16))
      {
        int v34 = v5;
        unsigned int v35 = v12;
        uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v4, v33);
        unsigned int v12 = v35;
        LODWORD(v5) = v34;
        *(void *)(*(void *)v4 + 8) = 0;
      }
    }
    int v25 = *(_DWORD *)(v4 + 24);
    unsigned int v26 = v12 >> -(char)v25;
    if (!v25) {
      unsigned int v26 = 0;
    }
    *(_DWORD *)(v4 + 28) = v26;
    unsigned int v14 = (v25 + 6) & 0x1F;
  }
  *(_DWORD *)(v4 + 24) = v14;
  if (v5)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 8 * v5;
    do
    {
      uint64_t result = (llvm::raw_ostream *)sub_1CC202E58(v4, *(void *)(*a3 + v15), 6);
      v15 += 8;
    }
    while (v16 != v15);
  }
  return result;
}

llvm::raw_ostream *sub_1CC206E90(llvm::raw_ostream *result, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = (uint64_t)result;
  uint64_t v12 = *(void *)(*((void *)result + 5) + 16 * (a2 - 4));
  int v13 = *((_DWORD *)result + 8);
  int v14 = *((_DWORD *)result + 6);
  int v15 = *((_DWORD *)result + 7) | (a2 << v14);
  *((_DWORD *)result + 7) = v15;
  unsigned int v16 = v14 + v13;
  if (v16 >= 0x20)
  {
    unsigned int v32 = *(void **)result;
    uint64_t v33 = *(void *)(*(void *)result + 8);
    if (*(void *)(*(void *)result + 16) < (unint64_t)(v33 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)(*v32 + v33) = v15;
    v32[1] += 4;
    uint64_t result = (llvm::raw_ostream *)*((void *)result + 1);
    if (result)
    {
      size_t v40 = *(void *)(*(void *)v11 + 8);
      if (v40 >= *(void *)(v11 + 16))
      {
        unsigned int v41 = a2;
        uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v11, v40);
        a2 = v41;
        *(void *)(*(void *)v11 + 8) = 0;
      }
    }
    int v34 = *(_DWORD *)(v11 + 24);
    unsigned int v35 = a2 >> -(char)v34;
    if (!v34) {
      unsigned int v35 = 0;
    }
    *(_DWORD *)(v11 + 28) = v35;
    unsigned int v16 = ((_BYTE)v34 + (_BYTE)v13) & 0x1F;
  }
  *(_DWORD *)(v11 + 24) = v16;
  int v17 = *(_DWORD *)(v12 + 8);
  if ((a7 & 0xFF00000000) != 0)
  {
    if ((*(unsigned char *)(*(void *)v12 + 8) & 1) == 0) {
      uint64_t result = (llvm::raw_ostream *)sub_1CC206228(v11, *(uint64_t **)v12, a7);
    }
    unsigned int v18 = 1;
  }
  else
  {
    unsigned int v18 = 0;
  }
  if (v18 != v17)
  {
    unsigned int v19 = 0;
    uint64_t v20 = a6;
    uint64_t v21 = a5;
    do
    {
      uint64_t v22 = *(void *)v12 + 16 * v18;
      unsigned int v23 = *(unsigned __int8 *)(v22 + 8);
      if ((v23 & 1) == 0)
      {
        int v24 = (v23 >> 1) & 7;
        if (v24 == 3)
        {
          uint64_t v55 = v20;
          int v25 = (uint64_t *)(*(void *)v12 + 16 * ++v18);
          if (v21)
          {
            unsigned int v42 = a6;
            if (a6 >= 0x20)
            {
              unsigned int v43 = a6;
              do
              {
                unsigned int v53 = v43;
                sub_1CC202230(v11, v43 & 0x1F | 0x20, 6);
                unsigned int v42 = v53 >> 5;
                unsigned int v43 = v53 >> 5;
              }
              while (v53 > 0x3FF);
            }
            uint64_t result = (llvm::raw_ostream *)sub_1CC202230(v11, v42, 6);
            if (a6)
            {
              uint64_t v54 = v55;
              do
              {
                unsigned int v44 = *(unsigned __int8 *)v21++;
                uint64_t result = (llvm::raw_ostream *)sub_1CC2064A8(v11, v25, v44);
                --v54;
              }
              while (v54);
            }
            uint64_t v21 = 0;
          }
          else
          {
            unsigned int v26 = a4 - v19;
            unsigned int v27 = *(_DWORD *)(v11 + 24);
            unsigned int v28 = *(_DWORD *)(v11 + 28);
            if (a4 - v19 >= 0x20)
            {
              do
              {
                unsigned int v50 = v26 & 0x1F | 0x20;
                v28 |= v50 << v27;
                *(_DWORD *)(v11 + 28) = v28;
                v27 += 6;
                if (v27 >= 0x20)
                {
                  uint64_t v47 = *(const char ***)v11;
                  uint64_t v48 = *(void *)(*(void *)v11 + 8);
                  if (*(void *)(*(void *)v11 + 16) < (unint64_t)(v48 + 4)) {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod();
                  }
                  *(_DWORD *)&(*v47)[v48] = v28;
                  v47[1] += 4;
                  uint64_t result = *(llvm::raw_ostream **)(v11 + 8);
                  if (result)
                  {
                    size_t v52 = *(void *)(*(void *)v11 + 8);
                    if (v52 >= *(void *)(v11 + 16))
                    {
                      uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v11, v52);
                      unsigned int v50 = v26 & 0x1F | 0x20;
                      *(void *)(*(void *)v11 + 8) = 0;
                    }
                  }
                  int v49 = *(_DWORD *)(v11 + 24);
                  if (v49) {
                    unsigned int v28 = v50 >> -(char)v49;
                  }
                  else {
                    unsigned int v28 = 0;
                  }
                  *(_DWORD *)(v11 + 28) = v28;
                  unsigned int v27 = ((_BYTE)v49 + 6) & 0x1F;
                }
                *(_DWORD *)(v11 + 24) = v27;
                unsigned int v29 = v26 >> 5;
                BOOL v51 = v26 > 0x3FF;
                v26 >>= 5;
              }
              while (v51);
            }
            else
            {
              unsigned int v29 = a4 - v19;
            }
            int v30 = (v29 << v27) | v28;
            *(_DWORD *)(v11 + 28) = v30;
            unsigned int v31 = v27 + 6;
            if (v31 >= 0x20)
            {
              int v36 = *(const char ***)v11;
              uint64_t v37 = *(void *)(*(void *)v11 + 8);
              if (*(void *)(*(void *)v11 + 16) < (unint64_t)(v37 + 4)) {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
              }
              *(_DWORD *)&(*v36)[v37] = v30;
              v36[1] += 4;
              uint64_t result = *(llvm::raw_ostream **)(v11 + 8);
              if (result)
              {
                size_t v45 = *(void *)(*(void *)v11 + 8);
                if (v45 >= *(void *)(v11 + 16))
                {
                  unsigned int v46 = v29;
                  uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v11, v45);
                  unsigned int v29 = v46;
                  *(void *)(*(void *)v11 + 8) = 0;
                }
              }
              int v38 = *(_DWORD *)(v11 + 24);
              unsigned int v39 = v29 >> -(char)v38;
              if (!v38) {
                unsigned int v39 = 0;
              }
              *(_DWORD *)(v11 + 28) = v39;
              unsigned int v31 = ((_BYTE)v38 + 6) & 0x1F;
            }
            *(_DWORD *)(v11 + 24) = v31;
            while (a4 != v19)
              uint64_t result = (llvm::raw_ostream *)sub_1CC207320(v11, v25, *(void *)(a3 + 8 * v19++));
            uint64_t v21 = 0;
            unsigned int v19 = a4;
          }
          uint64_t v20 = v55;
          goto LABEL_13;
        }
        if (v24 == 5)
        {
          if (v21)
          {
            uint64_t result = sub_1CC206724((llvm::raw_ostream *)v11, a5, a6, 1);
            uint64_t v21 = 0;
          }
          else
          {
            uint64_t result = (llvm::raw_ostream *)sub_1CD4FD6D0(v11, (char *)(a3 + 8 * v19), a4 - v19, 1);
          }
          goto LABEL_13;
        }
        uint64_t result = (llvm::raw_ostream *)sub_1CC207320(v11, (uint64_t *)v22, *(void *)(a3 + 8 * v19));
      }
      ++v19;
LABEL_13:
      ++v18;
    }
    while (v18 != v17);
  }
  return result;
}

uint64_t sub_1CC207320(uint64_t result, uint64_t *a2, unint64_t a3)
{
  int v3 = (*((unsigned __int8 *)a2 + 8) >> 1) & 7;
  if (v3 == 1)
  {
    uint64_t v5 = *a2;
    if (!*a2) {
      return result;
    }
    int v6 = *(_DWORD *)(result + 24);
    int v7 = *(_DWORD *)(result + 28) | (a3 << v6);
    *(_DWORD *)(result + 28) = v7;
    unsigned int v8 = v6 + v5;
    if (v8 < 0x20) {
      goto LABEL_33;
    }
    unsigned int v9 = *(void **)result;
    uint64_t v10 = *(void *)(*(void *)result + 8);
    if (*(void *)(*(void *)result + 16) < (unint64_t)(v10 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)(*v9 + v10) = v7;
    v9[1] += 4;
    uint64_t v11 = *(llvm::raw_ostream **)(result + 8);
    if (v11)
    {
      size_t v27 = *(void *)(*(void *)result + 8);
      if (v27 >= *(void *)(result + 16))
      {
        int v30 = a3;
        uint64_t v32 = result;
        char v28 = v5;
        llvm::raw_ostream::write(v11, **(const char ***)result, v27);
        LOBYTE(v5) = v28;
        LODWORD(a3) = v30;
        uint64_t result = v32;
        *(void *)(*(void *)v32 + 8) = 0;
      }
    }
    int v12 = *(_DWORD *)(result + 24);
    unsigned int v13 = a3 >> -(char)v12;
    if (!v12) {
      unsigned int v13 = 0;
    }
    *(_DWORD *)(result + 28) = v13;
    char v14 = v12 + v5;
    goto LABEL_32;
  }
  if (v3 != 2)
  {
    if ((char)a3 == 46) {
      int v15 = 62;
    }
    else {
      int v15 = 63;
    }
    if (((char)a3 - 48) <= 9) {
      int v16 = (char)a3 + 4;
    }
    else {
      int v16 = v15;
    }
    if (((char)a3 - 65) <= 0x19) {
      int v17 = (char)a3 - 39;
    }
    else {
      int v17 = v16;
    }
    if ((a3 - 97) <= 0x19u) {
      unsigned int v18 = (char)a3 - 97;
    }
    else {
      unsigned int v18 = v17;
    }
    int v19 = *(_DWORD *)(result + 24);
    int v20 = *(_DWORD *)(result + 28) | (v18 << v19);
    *(_DWORD *)(result + 28) = v20;
    unsigned int v8 = v19 + 6;
    if (v8 < 0x20) {
      goto LABEL_33;
    }
    uint64_t v21 = *(const char ***)result;
    uint64_t v22 = *(void *)(*(void *)result + 8);
    if (*(void *)(*(void *)result + 16) < (unint64_t)(v22 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)&(*v21)[v22] = v20;
    v21[1] += 4;
    unsigned int v23 = *(llvm::raw_ostream **)(result + 8);
    if (v23)
    {
      size_t v26 = *(void *)(*(void *)result + 8);
      if (v26 >= *(void *)(result + 16))
      {
        uint64_t v31 = result;
        unsigned int v29 = v18;
        llvm::raw_ostream::write(v23, **(const char ***)result, v26);
        unsigned int v18 = v29;
        uint64_t result = v31;
        *(void *)(*(void *)v31 + 8) = 0;
      }
    }
    int v24 = *(_DWORD *)(result + 24);
    unsigned int v25 = v18 >> -(char)v24;
    if (!v24) {
      unsigned int v25 = 0;
    }
    *(_DWORD *)(result + 28) = v25;
    char v14 = v24 + 6;
LABEL_32:
    unsigned int v8 = v14 & 0x1F;
LABEL_33:
    *(_DWORD *)(result + 24) = v8;
    return result;
  }
  uint64_t v4 = *a2;
  if (*a2)
  {
    return sub_1CC202E58(result, a3, v4);
  }
  return result;
}

uint64_t sub_1CC207590(llvm::raw_ostream *a1, int a2, uint64_t a3)
{
  sub_1CC207688(a1, a2);
  sub_1CC2029A0(a1, *(uint64_t **)a3);
  int v6 = sub_1CC207738(a1, a2);
  int v7 = (_OWORD *)*((void *)v6 + 2);
  if ((unint64_t)v7 < *((void *)v6 + 3))
  {
    _OWORD *v7 = *(_OWORD *)a3;
    unsigned int v8 = (char *)(v7 + 1);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  else
  {
    unsigned int v8 = sub_1CC203220((char **)v6 + 1, a3);
  }
  *((void *)v6 + 2) = v8;
  return ((unint64_t)&v8[-*((void *)v6 + 1)] >> 4) + 3;
}

void sub_1CC207620(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 3;
    do
    {
      if (*v5)
      {
        sub_1CC1CAA74((uint64_t)v5, *v5);
        operator delete((void *)*v5);
      }
      int v6 = v5 - 1;
      v5 -= 4;
    }
    while (v6 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void sub_1CC207688(llvm::raw_ostream *a1, int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)a1 + 9) != a2)
  {
    v4[0] = &v5;
    int v5 = a2;
    v4[1] = (void *)0x200000001;
    sub_1CC2077D8(a1, 1u, (uint64_t)v4, 0);
    *((_DWORD *)a1 + 9) = a2;
    if (v4[0] != &v5) {
      free(v4[0]);
    }
  }
}

char *sub_1CC207738(void *a1, int a2)
{
  uint64_t v6 = (char *)a1[11];
  int v5 = (char *)a1[12];
  uint64_t v4 = a1 + 11;
  if (v6 == v5 || (int v7 = v5 - 32, *((_DWORD *)v5 - 8) != a2))
  {
    if (((v5 - v6) & 0x1FFFFFFFE0) != 0)
    {
      uint64_t v9 = ((unint64_t)(v5 - v6) >> 5);
      int v7 = v6;
      while (*(_DWORD *)v7 != a2)
      {
        v7 += 32;
        if (!--v9) {
          goto LABEL_8;
        }
      }
    }
    else
    {
LABEL_8:
      if ((unint64_t)v5 < a1[13])
      {
        uint64_t v10 = (uint64_t)(v5 + 32);
        *(_OWORD *)int v5 = 0u;
        *((_OWORD *)v5 + 1) = 0u;
      }
      else
      {
        uint64_t v10 = sub_1CC207BA8(v4);
      }
      a1[12] = v10;
      *(_DWORD *)(v10 - 32) = a2;
      return (char *)(v10 - 32);
    }
  }
  return v7;
}

llvm::raw_ostream *sub_1CC2077D8(llvm::raw_ostream *result, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5 = (uint64_t)result;
  if (a4)
  {
    uint64_t v28 = *(void *)a3;
    uint64_t v29 = a2 | 0x100000000;
    uint64_t v31 = *(unsigned int *)(a3 + 8);
    return sub_1CC205E50(result, a4, v28, v31, 0, 0, v29);
  }
  else
  {
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    int v7 = *((_DWORD *)result + 8);
    int v8 = *((_DWORD *)result + 6);
    unsigned int v9 = *((_DWORD *)result + 7) | (3 << v8);
    *((_DWORD *)result + 7) = v9;
    unsigned int v10 = v8 + v7;
    if (v10 >= 0x20)
    {
      unsigned int v18 = *(void **)result;
      uint64_t v19 = *(void *)(*(void *)result + 8);
      if (*(void *)(*(void *)result + 16) < (unint64_t)(v19 + 4)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(_DWORD *)(*v18 + v19) = v9;
      v18[1] += 4;
      uint64_t result = (llvm::raw_ostream *)*((void *)result + 1);
      if (result)
      {
        size_t v34 = *(void *)(*(void *)v5 + 8);
        if (v34 >= *(void *)(v5 + 16))
        {
          uint64_t v44 = v6;
          unsigned int v35 = a2;
          uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v5, v34);
          uint64_t v6 = v44;
          a2 = v35;
          *(void *)(*(void *)v5 + 8) = 0;
        }
      }
      int v20 = *(_DWORD *)(v5 + 24);
      if (v20) {
        unsigned int v9 = 3u >> -(char)v20;
      }
      else {
        unsigned int v9 = 0;
      }
      *(_DWORD *)(v5 + 28) = v9;
      unsigned int v10 = (v20 + v7) & 0x1F;
    }
    *(_DWORD *)(v5 + 24) = v10;
    if (a2 >= 0x20)
    {
      uint64_t v42 = v6;
      do
      {
        unsigned int v32 = a2;
        uint64_t result = (llvm::raw_ostream *)sub_1CC202230(v5, a2 & 0x1F | 0x20, 6);
        a2 = v32 >> 5;
      }
      while (v32 > 0x3FF);
      unsigned int v10 = *(_DWORD *)(v5 + 24);
      unsigned int v9 = *(_DWORD *)(v5 + 28);
      uint64_t v6 = v42;
    }
    int v11 = (a2 << v10) | v9;
    *(_DWORD *)(v5 + 28) = v11;
    unsigned int v12 = v10 + 6;
    if (v12 >= 0x20)
    {
      uint64_t v21 = *(const char ***)v5;
      uint64_t v22 = *(void *)(*(void *)v5 + 8);
      if (*(void *)(*(void *)v5 + 16) < (unint64_t)(v22 + 4)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(_DWORD *)&(*v21)[v22] = v11;
      v21[1] += 4;
      uint64_t result = *(llvm::raw_ostream **)(v5 + 8);
      if (result)
      {
        size_t v36 = *(void *)(*(void *)v5 + 8);
        if (v36 >= *(void *)(v5 + 16))
        {
          uint64_t v37 = v6;
          unsigned int v38 = a2;
          uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v5, v36);
          uint64_t v6 = v37;
          a2 = v38;
          *(void *)(*(void *)v5 + 8) = 0;
        }
      }
      int v23 = *(_DWORD *)(v5 + 24);
      if (v23) {
        int v11 = a2 >> -(char)v23;
      }
      else {
        int v11 = 0;
      }
      *(_DWORD *)(v5 + 28) = v11;
      unsigned int v12 = (v23 + 6) & 0x1F;
    }
    *(_DWORD *)(v5 + 24) = v12;
    unsigned int v13 = v6;
    if (v6 >= 0x20)
    {
      uint64_t v43 = v6;
      unsigned int v13 = v6;
      do
      {
        unsigned int v33 = v13;
        uint64_t result = (llvm::raw_ostream *)sub_1CC202230(v5, v13 & 0x1F | 0x20, 6);
        unsigned int v13 = v33 >> 5;
      }
      while (v33 > 0x3FF);
      unsigned int v12 = *(_DWORD *)(v5 + 24);
      int v11 = *(_DWORD *)(v5 + 28);
      uint64_t v6 = v43;
    }
    int v14 = (v13 << v12) | v11;
    *(_DWORD *)(v5 + 28) = v14;
    unsigned int v15 = v12 + 6;
    if (v15 >= 0x20)
    {
      int v24 = *(const char ***)v5;
      uint64_t v25 = *(void *)(*(void *)v5 + 8);
      if (*(void *)(*(void *)v5 + 16) < (unint64_t)(v25 + 4)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(_DWORD *)&(*v24)[v25] = v14;
      v24[1] += 4;
      uint64_t result = *(llvm::raw_ostream **)(v5 + 8);
      if (result)
      {
        size_t v39 = *(void *)(*(void *)v5 + 8);
        if (v39 >= *(void *)(v5 + 16))
        {
          uint64_t v40 = v6;
          unsigned int v41 = v13;
          uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v5, v39);
          unsigned int v13 = v41;
          uint64_t v6 = v40;
          *(void *)(*(void *)v5 + 8) = 0;
        }
      }
      int v26 = *(_DWORD *)(v5 + 24);
      unsigned int v27 = v13 >> -(char)v26;
      if (!v26) {
        unsigned int v27 = 0;
      }
      *(_DWORD *)(v5 + 28) = v27;
      unsigned int v15 = (v26 + 6) & 0x1F;
    }
    *(_DWORD *)(v5 + 24) = v15;
    if (v6)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 4 * v6;
      do
      {
        uint64_t result = (llvm::raw_ostream *)sub_1CC202E58(v5, *(unsigned int *)(*(void *)a3 + v16), 6);
        v16 += 4;
      }
      while (v17 != v16);
    }
  }
  return result;
}

uint64_t sub_1CC207BA8(uint64_t *a1)
{
  uint64_t v1 = (a1[1] - *a1) >> 5;
  unint64_t v2 = v1 + 1;
  if ((unint64_t)(v1 + 1) >> 59) {
    abort();
  }
  uint64_t v4 = a1[2] - *a1;
  if (v4 >> 4 > v2) {
    unint64_t v2 = v4 >> 4;
  }
  if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v5 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v5 = v2;
  }
  uint64_t v19 = a1 + 2;
  if (v5 >> 59) {
    sub_1CB833614();
  }
  uint64_t v6 = (char *)operator new(32 * v5);
  int v7 = &v6[32 * v1];
  std::string __p = v6;
  uint64_t v16 = v7;
  *(_OWORD *)int v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  uint64_t v17 = (void **)(v7 + 32);
  unsigned int v18 = &v6[32 * v5];
  sub_1CC207CA8(a1, &__p);
  uint64_t v8 = a1[1];
  unsigned int v9 = (void **)v16;
LABEL_9:
  for (uint64_t i = v17; i != v9; uint64_t i = v12 - 1)
  {
    uint64_t v13 = (uint64_t)*(i - 3);
    unsigned int v12 = i - 3;
    uint64_t v11 = v13;
    uint64_t v17 = v12 - 1;
    if (v13)
    {
      sub_1CC1CAA74((uint64_t)v12, v11);
      operator delete(*v12);
      goto LABEL_9;
    }
  }
  if (__p) {
    operator delete(__p);
  }
  return v8;
}

uint64_t *sub_1CC207CA8(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(_DWORD *)(v6 - 32) = *(_DWORD *)(v2 + v5 - 32);
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 8) = 0;
      *(void *)(v6 - 24) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  llvm::raw_ostream *result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

llvm::raw_ostream *sub_1CC207D3C(llvm::raw_ostream *result, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5 = (uint64_t)result;
  if (a4)
  {
    uint64_t v18 = *(void *)a3;
    uint64_t v19 = a2 | 0x100000000;
    uint64_t v21 = *(unsigned int *)(a3 + 8);
    return sub_1CC206E90(result, a4, v18, v21, 0, 0, v19);
  }
  else
  {
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    int v7 = *((_DWORD *)result + 8);
    int v8 = *((_DWORD *)result + 6);
    unsigned int v9 = *((_DWORD *)result + 7) | (3 << v8);
    *((_DWORD *)result + 7) = v9;
    unsigned int v10 = v8 + v7;
    if (v10 >= 0x20)
    {
      uint64_t v22 = *(void **)result;
      uint64_t v23 = *(void *)(*(void *)result + 8);
      if (*(void *)(*(void *)result + 16) < (unint64_t)(v23 + 4)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(_DWORD *)(*v22 + v23) = v9;
      v22[1] += 4;
      uint64_t result = (llvm::raw_ostream *)*((void *)result + 1);
      if (result)
      {
        size_t v38 = *(void *)(*(void *)v5 + 8);
        if (v38 >= *(void *)(v5 + 16))
        {
          uint64_t v49 = v6;
          unsigned int v39 = a2;
          uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v5, v38);
          uint64_t v6 = v49;
          a2 = v39;
          *(void *)(*(void *)v5 + 8) = 0;
        }
      }
      int v24 = *(_DWORD *)(v5 + 24);
      if (v24) {
        unsigned int v9 = 3u >> -(char)v24;
      }
      else {
        unsigned int v9 = 0;
      }
      unsigned int v10 = (v24 + v7) & 0x1F;
    }
    int v11 = (a2 << v10) | v9;
    *(_DWORD *)(v5 + 24) = v10;
    *(_DWORD *)(v5 + 28) = v11;
    if (v10 >= 0x1A)
    {
      uint64_t v25 = *(const char ***)v5;
      uint64_t v26 = *(void *)(*(void *)v5 + 8);
      if (*(void *)(*(void *)v5 + 16) < (unint64_t)(v26 + 4)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(_DWORD *)&(*v25)[v26] = v11;
      v25[1] += 4;
      uint64_t result = *(llvm::raw_ostream **)(v5 + 8);
      if (result)
      {
        size_t v40 = *(void *)(*(void *)v5 + 8);
        if (v40 >= *(void *)(v5 + 16))
        {
          uint64_t v41 = v6;
          unsigned int v42 = a2;
          uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v5, v40);
          uint64_t v6 = v41;
          a2 = v42;
          *(void *)(*(void *)v5 + 8) = 0;
        }
      }
      int v27 = *(_DWORD *)(v5 + 24);
      if (v27) {
        int v11 = a2 >> -(char)v27;
      }
      else {
        int v11 = 0;
      }
      unsigned int v12 = (v27 + 6) & 0x1F;
    }
    else
    {
      unsigned int v12 = v10 + 6;
    }
    *(_DWORD *)(v5 + 24) = v12;
    if (v6 >= 0x20)
    {
      unsigned int v32 = v6;
      do
      {
        unsigned int v33 = v32 & 0x1F | 0x20;
        v11 |= v33 << v12;
        *(_DWORD *)(v5 + 28) = v11;
        if (v12 >= 0x1A)
        {
          unsigned int v35 = *(const char ***)v5;
          uint64_t v36 = *(void *)(*(void *)v5 + 8);
          if (*(void *)(*(void *)v5 + 16) < (unint64_t)(v36 + 4)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(_DWORD *)&(*v35)[v36] = v11;
          v35[1] += 4;
          uint64_t result = *(llvm::raw_ostream **)(v5 + 8);
          if (result)
          {
            size_t v46 = *(void *)(*(void *)v5 + 8);
            if (v46 >= *(void *)(v5 + 16))
            {
              uint64_t v50 = v6;
              unsigned int v47 = v32;
              int v48 = v32 & 0x1F | 0x20;
              uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v5, v46);
              unsigned int v33 = v48;
              unsigned int v32 = v47;
              uint64_t v6 = v50;
              *(void *)(*(void *)v5 + 8) = 0;
            }
          }
          int v37 = *(_DWORD *)(v5 + 24);
          if (v37) {
            int v11 = v33 >> -(char)v37;
          }
          else {
            int v11 = 0;
          }
          *(_DWORD *)(v5 + 28) = v11;
          unsigned int v12 = (v37 + 6) & 0x1F;
        }
        else
        {
          v12 += 6;
        }
        *(_DWORD *)(v5 + 24) = v12;
        unsigned int v13 = v32 >> 5;
        BOOL v34 = v32 > 0x3FF;
        v32 >>= 5;
      }
      while (v34);
    }
    else
    {
      unsigned int v13 = v6;
    }
    int v14 = (v13 << v12) | v11;
    *(_DWORD *)(v5 + 28) = v14;
    if (v12 >= 0x1A)
    {
      uint64_t v28 = *(const char ***)v5;
      uint64_t v29 = *(void *)(*(void *)v5 + 8);
      if (*(void *)(*(void *)v5 + 16) < (unint64_t)(v29 + 4)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(_DWORD *)&(*v28)[v29] = v14;
      v28[1] += 4;
      uint64_t result = *(llvm::raw_ostream **)(v5 + 8);
      if (result)
      {
        size_t v43 = *(void *)(*(void *)v5 + 8);
        if (v43 >= *(void *)(v5 + 16))
        {
          uint64_t v44 = v6;
          unsigned int v45 = v13;
          uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v5, v43);
          unsigned int v13 = v45;
          uint64_t v6 = v44;
          *(void *)(*(void *)v5 + 8) = 0;
        }
      }
      int v30 = *(_DWORD *)(v5 + 24);
      unsigned int v31 = v13 >> -(char)v30;
      if (!v30) {
        unsigned int v31 = 0;
      }
      *(_DWORD *)(v5 + 28) = v31;
      int v15 = ((_BYTE)v30 + 6) & 0x1F;
    }
    else
    {
      int v15 = v12 + 6;
    }
    *(_DWORD *)(v5 + 24) = v15;
    if (v6)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 8 * v6;
      do
      {
        uint64_t result = (llvm::raw_ostream *)sub_1CC202E58(v5, *(void *)(*(void *)a3 + v16), 6);
        v16 += 8;
      }
      while (v17 != v16);
    }
  }
  return result;
}

uint64_t sub_1CC208194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a2;
  v6[1] = a3;
  if (!a3) {
    return 0;
  }
  uint64_t v7 = 0;
  if (sub_1CC208298((uint64_t *)(a1 + 272), (uint64_t)v6, &v7)) {
    uint64_t v4 = v7;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 272) + 24 * *(unsigned int *)(a1 + 288);
  }
  return *(unsigned int *)(v4 + 16);
}

uint64_t sub_1CC208200(int a1)
{
  return qword_1CFAC6838[a1 - 1];
}

uint64_t sub_1CC208214(uint64_t result, char *a2, char *a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (a3 - a2 + v4 > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    uint64_t v5 = (void *)(*(void *)result + 8 * v4);
    do
    {
      uint64_t v6 = *v3++;
      *v5++ = v6;
    }
    while (v3 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + a3 - a2;
  return result;
}

uint64_t sub_1CC208298(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *(void *)(a2 + 8);
    unint64_t v6 = ((v5 >> 4) ^ (v5 >> 9) | ((unint64_t)(37 * *(_DWORD *)a2) << 32))
       + ~((unint64_t)((v5 >> 4) ^ (v5 >> 9)) << 32);
    unint64_t v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    unint64_t v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    int v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~(v8 << 27));
    int v10 = v3 - 1;
    unsigned int v11 = (v3 - 1) & v9;
    uint64_t v12 = *a1 + 24 * v11;
    int v13 = *(_DWORD *)v12;
    uint64_t v14 = *(void *)(v12 + 8);
    if (*(_DWORD *)a2 == *(_DWORD *)v12 && v5 == v14)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = 1;
      uint64_t result = 1;
      while (v13 != -1 || v14 != -4)
      {
        if (v16) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v14 == -8;
        }
        if (v19 && v13 == -2) {
          uint64_t v16 = v12;
        }
        unsigned int v21 = v11 + v17++;
        unsigned int v11 = v21 & v10;
        uint64_t v12 = v4 + 24 * (v21 & v10);
        int v13 = *(_DWORD *)v12;
        uint64_t v14 = *(void *)(v12 + 8);
        if (*(_DWORD *)a2 == *(_DWORD *)v12 && v5 == v14) {
          goto LABEL_8;
        }
      }
      uint64_t result = 0;
      if (v16) {
        uint64_t v12 = v16;
      }
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_8:
  *a3 = v12;
  return result;
}

unint64_t sub_1CC20839C(uint64_t a1, unsigned char *a2, unint64_t a3)
{
  if (*(unsigned char *)(a1 + 552)) {
    llvm::SHA1::update((_DWORD *)(a1 + 568), a2, a3);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a3 | ((unint64_t)sub_1CD0B03C8(a2, (uint64_t)&a2[a3]) << 32);

  return llvm::StringTableBuilder::add(v6, (uint64_t)a2, v7);
}

uint64_t sub_1CC208414(uint64_t a1, int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 72);
  if (!v2) {
    return 0;
  }
  int v4 = a2;
  uint64_t v5 = v2;
  return llvm::AttributeList::get(**(uint64_t ***)a1, (uint64_t)&v4, 1uLL);
}

uint64_t sub_1CC208488(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    unint64_t v7 = (void *)(*a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      int v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8;
        }
        if (v12) {
          int v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        unint64_t v7 = (void *)(v4 + 16 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_4;
        }
      }
      uint64_t result = 0;
      if (v10) {
        unint64_t v7 = v10;
      }
    }
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC20A668(uint64_t result, uint64_t a2)
{
  if (a2 < 0) {
    uint64_t v2 = 1 - 2 * a2;
  }
  else {
    uint64_t v2 = 2 * a2;
  }
  unsigned int v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)result + 8 * v3) = v2;
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1CC20A6DC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v4 > 0x40)
  {
    int v6 = 0;
    int64_t v7 = (unint64_t)(v4 + 63) >> 6;
    unint64_t v2 = *(void *)a2;
    do
    {
      if (v7-- < 1) {
        break;
      }
      unint64_t v9 = *(void *)(v2 + 8 * v7);
      v6 += __clz(v9);
    }
    while (!v9);
    int v10 = v4 | 0xFFFFFFC0;
    if ((v4 & 0x3F) == 0) {
      int v10 = 0;
    }
    int v5 = v6 + v10;
  }
  else
  {
    int v5 = v4 + __clz(*(void *)a2) - 64;
  }
  unint64_t v11 = 0;
  do
  {
    uint64_t result = sub_1CC20A668(a1, *(void *)(v2 + 8 * v11));
    if (v4 == v5) {
      break;
    }
  }
  while (v11++ < (v4 + ~v5) >> 6);
  return result;
}

uint64_t sub_1CC20A79C(int a1)
{
  return dword_1CFAC6AB8[a1 - 13];
}

uint64_t sub_1CC20A7B0(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 >= 0x1C)
  {
    HIDWORD(v4) = v2 - 41;
    LODWORD(v4) = v2 - 41;
    unsigned int v3 = v4 >> 1;
    BOOL v5 = v3 > 6;
    int v6 = (1 << v3) & 0x47;
    if (!v5 && v6 != 0) {
      return ((unint64_t)*(unsigned __int8 *)(a1 + 17) >> 1) & 3;
    }
    if (v2 > 0x37 || ((1 << v2) & 0xC1800000000000) == 0) {
      goto LABEL_19;
    }
    return ((unint64_t)*(unsigned __int8 *)(a1 + 17) >> 1) & 1;
  }
  if (v2 == 5)
  {
    unsigned int v8 = *(unsigned __int16 *)(a1 + 18);
    HIDWORD(v10) = v8 - 13;
    LODWORD(v10) = v8 - 13;
    unsigned int v9 = v10 >> 1;
    BOOL v5 = v9 > 6;
    int v11 = (1 << v9) & 0x47;
    if (!v5 && v11 != 0) {
      return ((unint64_t)*(unsigned __int8 *)(a1 + 17) >> 1) & 3;
    }
    if (v8 <= 0x1B && ((1 << v8) & 0xC180000) != 0) {
      return ((unint64_t)*(unsigned __int8 *)(a1 + 17) >> 1) & 1;
    }
  }
LABEL_19:
  if (!sub_1CB845E74(a1)) {
    return 0;
  }
  int v14 = *(char *)(a1 + 17);
  if (v14 >= 0) {
    return (((v14 & 0x7C) >> 1) | (v14 << 6)) & 0xBELL;
  }
  else {
    return (((v14 & 0x7C) >> 1) | (v14 << 6)) & 0xBELL | 0x40;
  }
}

uint64_t sub_1CC20A8C0(uint64_t *a1)
{
  unsigned int v2 = (char *)operator new(0x228uLL);
  *(void *)unsigned int v2 = &unk_1F2608A00;
  *((void *)v2 + 1) = 0;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 520) = 0u;
  *(_OWORD *)(v2 + 536) = 0u;
  *(_OWORD *)(v2 + 40) = xmmword_1CFAC66C0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 40;
  *(_OWORD *)(v2 + 56) = xmmword_1CDF53750;
  *(_OWORD *)(v2 + 72) = xmmword_1CFAC4810;
  *(_OWORD *)(v2 + 88) = xmmword_1CFAC4740;
  *(_OWORD *)(v2 + 104) = xmmword_1CFAC4810;
  *(_OWORD *)(v2 + 120) = xmmword_1CFAC4810;
  uint64_t v3 = *a1;
  *(_OWORD *)(v2 + 136) = xmmword_1CDF53750;
  *((void *)v2 + 4) = 0x2000000007;
  int64_t v7 = v2 + 24;
  unsigned int v8 = (std::__shared_weak_count *)v2;
  uint64_t v4 = sub_1CC1F7CDC(v3, (uint64_t)&v7);
  BOOL v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v4;
}

uint64_t sub_1CC20AA08(uint64_t *a1)
{
  unsigned int v2 = (char *)operator new(0x228uLL);
  *(void *)unsigned int v2 = &unk_1F2608A00;
  *((void *)v2 + 1) = 0;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 520) = 0u;
  *(_OWORD *)(v2 + 536) = 0u;
  *(_OWORD *)(v2 + 40) = xmmword_1CFAC67C0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 40;
  *(_OWORD *)(v2 + 56) = xmmword_1CDF53750;
  *(_OWORD *)(v2 + 72) = xmmword_1CFAC4810;
  *(_OWORD *)(v2 + 88) = xmmword_1CDF53750;
  *(_OWORD *)(v2 + 104) = xmmword_1CFAC4810;
  *(_OWORD *)(v2 + 120) = xmmword_1CFAC6570;
  uint64_t v3 = *a1;
  *(_OWORD *)(v2 + 136) = xmmword_1CFAC4810;
  *((void *)v2 + 4) = 0x2000000007;
  int64_t v7 = v2 + 24;
  unsigned int v8 = (std::__shared_weak_count *)v2;
  uint64_t v4 = sub_1CC1F7CDC(v3, (uint64_t)&v7);
  BOOL v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v4;
}

void sub_1CC20AB50(llvm::raw_ostream **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v51[32] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v6 = a2;
    unsigned int v7 = *(_DWORD *)(a4 + 8);
    if (v7 >= *(_DWORD *)(a4 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a4 + 8 * v7) = 35;
    unsigned int v8 = *(_DWORD *)(a4 + 12);
    unsigned int v9 = *(_DWORD *)(a4 + 8) + 1;
    *(_DWORD *)(a4 + 8) = v9;
    if (v9 >= v8) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v10 = 0;
    int v11 = 0;
    unsigned int v12 = 0;
    *(void *)(*(void *)a4 + 8 * v9) = a3;
    ++*(_DWORD *)(a4 + 8);
    unsigned int v13 = &v49;
    uint64_t v48 = 0;
    uint64_t v49 = v51;
    long long v50 = xmmword_1CD96DBF0;
    unsigned int v39 = (const char **)&v49;
    size_t v40 = 0;
    unint64_t v41 = 0x20000000;
    LODWORD(v42) = 0;
    int v43 = 2;
    uint64_t v14 = a2 + 8 * a3;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    uint64_t v15 = a2;
    do
    {
      unsigned int v16 = **(_DWORD **)(*(void *)v15 + 8);
      if (v16 >= 0x20)
      {
        do
        {
          unsigned int v18 = v16 & 0x1F | 0x20;
          v11 |= v18 << v12;
          HIDWORD(v42) = v11;
          v12 += 6;
          if (v12 >= 0x20)
          {
            int v20 = (char *)v13[1];
            if (v13[2] < v20 + 4) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            *(_DWORD *)&v20[(void)*v13] = v11;
            v13[1] = (char *)v13[1] + 4;
            if (v10)
            {
              size_t v21 = (size_t)v13[1];
              if (v21 >= v41)
              {
                uint64_t v22 = (const char *)*v13;
                uint64_t v23 = v10;
                llvm::raw_ostream::write(v10, v22, v21);
                unint64_t v10 = v23;
                unsigned int v13 = (void **)v39;
                v39[1] = 0;
              }
            }
            if (v42) {
              int v11 = v18 >> -(char)v42;
            }
            else {
              int v11 = 0;
            }
            HIDWORD(v42) = v11;
            unsigned int v12 = ((_BYTE)v42 + 6) & 0x1F;
          }
          LODWORD(v42) = v12;
          unsigned int v17 = v16 >> 5;
          BOOL v19 = v16 > 0x3FF;
          v16 >>= 5;
        }
        while (v19);
      }
      else
      {
        unsigned int v17 = **(_DWORD **)(*(void *)v15 + 8);
      }
      v11 |= v17 << v12;
      HIDWORD(v42) = v11;
      v12 += 6;
      if (v12 >= 0x20)
      {
        int v24 = (char *)v13[1];
        if (v13[2] < v24 + 4) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(_DWORD *)&v24[(void)*v13] = v11;
        v13[1] = (char *)v13[1] + 4;
        unint64_t v10 = v40;
        if (v40)
        {
          size_t v25 = (size_t)v13[1];
          if (v25 >= v41)
          {
            llvm::raw_ostream::write(v40, (const char *)*v13, v25);
            unint64_t v10 = v40;
            v13[1] = 0;
          }
        }
        if (v42) {
          int v11 = v17 >> -(char)v42;
        }
        else {
          int v11 = 0;
        }
        HIDWORD(v42) = v11;
        unsigned int v12 = ((_BYTE)v42 + 6) & 0x1F;
      }
      LODWORD(v42) = v12;
      v15 += 8;
    }
    while (v15 != v14);
    if (v12)
    {
      sub_1CC202350(&v39, v11);
      uint64_t v42 = 0;
    }
    sub_1CC20BB44((uint64_t)&v39);
    unsigned int v26 = *(_DWORD *)(a4 + 8);
    if (v26 >= *(_DWORD *)(a4 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a4 + 8 * v26) = v50;
    ++*(_DWORD *)(a4 + 8);
    uint64_t v27 = v50;
    uint64_t v28 = 8 * a3;
    do
    {
      uint64_t v29 = *(size_t **)(*(void *)v6 + 8);
      size_t v32 = *v29;
      unsigned int v31 = v29 + 3;
      size_t v30 = v32;
      if (*((void *)&v50 + 1) < v27 + v32) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (v30)
      {
        memcpy((char *)v49 + v27, v31, v30);
        uint64_t v27 = v50;
      }
      v27 += v30;
      *(void *)&long long v50 = v27;
      v6 += 8;
      v28 -= 8;
    }
    while (v28);
    unsigned int v33 = *a1;
    BOOL v34 = (char *)operator new(0x228uLL);
    *(void *)BOOL v34 = &unk_1F2608A00;
    *((void *)v34 + 1) = 0;
    *(_OWORD *)(v34 + 104) = 0u;
    *(_OWORD *)(v34 + 120) = 0u;
    *(_OWORD *)(v34 + 136) = 0u;
    *(_OWORD *)(v34 + 152) = 0u;
    *(_OWORD *)(v34 + 168) = 0u;
    *(_OWORD *)(v34 + 184) = 0u;
    *(_OWORD *)(v34 + 200) = 0u;
    *(_OWORD *)(v34 + 216) = 0u;
    *(_OWORD *)(v34 + 232) = 0u;
    *(_OWORD *)(v34 + 248) = 0u;
    *(_OWORD *)(v34 + 264) = 0u;
    *(_OWORD *)(v34 + 280) = 0u;
    *(_OWORD *)(v34 + 296) = 0u;
    *(_OWORD *)(v34 + 312) = 0u;
    *(_OWORD *)(v34 + 328) = 0u;
    *(_OWORD *)(v34 + 344) = 0u;
    *(_OWORD *)(v34 + 360) = 0u;
    *(_OWORD *)(v34 + 376) = 0u;
    *(_OWORD *)(v34 + 392) = 0u;
    *(_OWORD *)(v34 + 408) = 0u;
    *(_OWORD *)(v34 + 424) = 0u;
    *(_OWORD *)(v34 + 440) = 0u;
    *(_OWORD *)(v34 + 456) = 0u;
    *(_OWORD *)(v34 + 472) = 0u;
    *(_OWORD *)(v34 + 488) = 0u;
    *(_OWORD *)(v34 + 504) = 0u;
    *(_OWORD *)(v34 + 520) = 0u;
    *(_OWORD *)(v34 + 536) = 0u;
    *(_OWORD *)(v34 + 40) = xmmword_1CFAC67D0;
    *((void *)v34 + 2) = 0;
    *((void *)v34 + 3) = v34 + 40;
    *(_OWORD *)(v34 + 56) = xmmword_1CFAC4810;
    *(_OWORD *)(v34 + 72) = xmmword_1CFAC4810;
    *(_OWORD *)(v34 + 88) = xmmword_1CFAC67E0;
    *((void *)v34 + 4) = 0x2000000004;
    unsigned int v39 = (const char **)(v34 + 24);
    size_t v40 = (llvm::raw_ostream *)v34;
    unsigned int v35 = sub_1CC1F7CDC((uint64_t)v33, (uint64_t)&v39);
    unsigned int v36 = v35;
    int v37 = v40;
    if (v40 && !atomic_fetch_add((atomic_ullong *volatile)v40 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(llvm::raw_ostream *))(*(void *)v37 + 16))(v37);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v37);
    }
    sub_1CC206E90(v33, v36, *(void *)a4, *(unsigned int *)(a4 + 8), (const char *)v49, v50, 0);
    *(_DWORD *)(a4 + 8) = 0;
    if (v49 != v51) {
      free(v49);
    }
  }
}

llvm::raw_ostream *sub_1CC20B05C(int *a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unsigned int v5 = a2;
  if (a4)
  {
    return sub_1CC206E90((llvm::raw_ostream *)a1, a4, a3, 2, 0, 0, a2 | 0x100000000);
  }
  else
  {
    sub_1CC202230((uint64_t)a1, 3u, a1[8]);
    if (v5 >= 0x20)
    {
      sub_1CC202230((uint64_t)a1, v5 & 0x1F | 0x20, 6);
      unsigned int v5 = 1;
    }
    sub_1CC202230((uint64_t)a1, v5, 6);
    sub_1CC202230((uint64_t)a1, 2u, 6);
    for (uint64_t i = 0; i != 16; i += 8)
      uint64_t result = (llvm::raw_ostream *)sub_1CC202E58((uint64_t)a1, *(void *)(a3 + i), 6);
  }
  return result;
}

llvm::raw_ostream *sub_1CC20B144(llvm::raw_ostream *result, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int **a5, uint64_t a6)
{
  if (a3)
  {
    unsigned int v7 = a5;
    unsigned int v9 = a2;
    uint64_t v10 = (uint64_t)result;
    unsigned int v88 = (uint64_t *)((char *)result + 48);
    uint64_t v89 = (uint64_t)result + 24;
    unsigned int v91 = &a2[a3];
    uint64_t v92 = 0;
    do
    {
      uint64_t v11 = *v9;
      if (a6)
      {
        uint64_t v12 = *(void *)v10;
        unsigned int v13 = *(void **)(*(void *)v10 + 8);
        uint64_t v14 = *(void *)(**(void **)v10 + 8);
        if (v13) {
          uint64_t v15 = (*(uint64_t (**)(void))(*v13 + 80))(*(void *)(*(void *)v10 + 8)) + v13[4] - v13[2];
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = *(unsigned int *)(v12 + 24) + 8 * (v15 + v14);
        unsigned int v18 = *(uint64_t **)(a6 + 8);
        unint64_t v17 = *(void *)(a6 + 16);
        if ((unint64_t)v18 >= v17)
        {
          int v20 = *(uint64_t **)a6;
          uint64_t v21 = ((uint64_t)v18 - *(void *)a6) >> 3;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61) {
            abort();
          }
          uint64_t v23 = v17 - (void)v20;
          if (v23 >> 2 > v22) {
            unint64_t v22 = v23 >> 2;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24)
          {
            if (v24 >> 61) {
              sub_1CB833614();
            }
            size_t v25 = (char *)operator new(8 * v24);
          }
          else
          {
            size_t v25 = 0;
          }
          unsigned int v26 = (uint64_t *)&v25[8 * v21];
          *unsigned int v26 = v16;
          BOOL v19 = v26 + 1;
          while (v18 != v20)
          {
            uint64_t v27 = *--v18;
            *--unsigned int v26 = v27;
          }
          *(void *)a6 = v26;
          *(void *)(a6 + 8) = v19;
          *(void *)(a6 + 16) = &v25[8 * v24];
          if (v20) {
            operator delete(v20);
          }
          unsigned int v7 = a5;
        }
        else
        {
          *unsigned int v18 = v16;
          BOOL v19 = v18 + 1;
        }
        *(void *)(a6 + 8) = v19;
      }
      switch(*(unsigned char *)v11)
      {
        case 4:
          if (v7)
          {
            unsigned int v29 = **v7;
            uint64_t v30 = v10;
            uint64_t v31 = v11;
            uint64_t v32 = a4;
          }
          else
          {
            uint64_t v30 = v10;
            uint64_t v31 = v11;
            uint64_t v32 = a4;
            unsigned int v29 = 0;
          }
          uint64_t result = sub_1CC20BBBC(v30, v31, v32, v29);
          break;
        case 5:
          if (v7) {
            uint64_t v28 = *v7 + 1;
          }
          else {
            uint64_t v28 = (unsigned int *)&v92 + 1;
          }
          uint64_t result = sub_1CC20BCCC((uint64_t *)v10, v11, a4, v28);
          break;
        case 6:
          if (v7)
          {
            unsigned int v68 = (*v7)[2];
            unsigned int v69 = (llvm::raw_ostream **)v10;
            uint64_t v70 = v11;
            uint64_t v71 = (unsigned int *)a4;
          }
          else
          {
            unsigned int v69 = (llvm::raw_ostream **)v10;
            uint64_t v70 = v11;
            uint64_t v71 = (unsigned int *)a4;
            unsigned int v68 = 0;
          }
          uint64_t result = sub_1CC20BF30(v69, v70, v71, v68);
          break;
        case 7:
          if (!v7)
          {
            uint64_t result = sub_1CC20C010(v10, v11, a4, 0);
            goto LABEL_102;
          }
          unsigned int v7 = a5;
          uint64_t result = sub_1CC20C010(v10, v11, a4, (*a5)[3]);
          break;
        case 8:
          if (!v7)
          {
            uint64_t result = sub_1CC20C194((uint64_t *)v10, v11, a4, (unsigned int *)&v92);
            goto LABEL_102;
          }
          unsigned int v7 = a5;
          uint64_t result = sub_1CC20C194((uint64_t *)v10, v11, a4, *a5 + 4);
          break;
        case 9:
          if (!v7)
          {
            uint64_t result = sub_1CC20C350(v10, v11, a4, 0);
            goto LABEL_102;
          }
          unsigned int v7 = a5;
          uint64_t result = sub_1CC20C350(v10, v11, a4, (*a5)[5]);
          break;
        case 0xA:
          if (!v7)
          {
            uint64_t result = sub_1CC20C5B0(v10, v11, a4, 0);
            goto LABEL_102;
          }
          unsigned int v7 = a5;
          uint64_t result = sub_1CC20C5B0(v10, v11, a4, (*a5)[6]);
          break;
        case 0xB:
          if (v7)
          {
            unsigned int v80 = (*v7)[7];
            uint64_t v81 = v10;
            uint64_t v82 = v11;
            uint64_t v83 = a4;
          }
          else
          {
            uint64_t v81 = v10;
            uint64_t v82 = v11;
            uint64_t v83 = a4;
            unsigned int v80 = 0;
          }
          uint64_t result = sub_1CC20C724(v81, v82, v83, v80);
          break;
        case 0xC:
          if (v7)
          {
            unsigned int v64 = (*v7)[8];
            uint64_t v65 = v10;
            uint64_t v66 = v11;
            uint64_t v67 = a4;
          }
          else
          {
            uint64_t v65 = v10;
            uint64_t v66 = v11;
            uint64_t v67 = a4;
            unsigned int v64 = 0;
          }
          uint64_t result = sub_1CC20C964(v65, v66, v67, v64);
          break;
        case 0xD:
          if (v7)
          {
            unsigned int v72 = (*v7)[9];
            uint64_t v73 = v10;
            uint64_t v74 = v11;
            uint64_t v75 = a4;
          }
          else
          {
            uint64_t v73 = v10;
            uint64_t v74 = v11;
            uint64_t v75 = a4;
            unsigned int v72 = 0;
          }
          uint64_t result = sub_1CC20CEBC(v73, v74, v75, v72);
          break;
        case 0xE:
          if (v7)
          {
            unsigned int v52 = (*v7)[10];
            uint64_t v53 = v10;
            uint64_t v54 = v11;
            uint64_t v55 = a4;
          }
          else
          {
            uint64_t v53 = v10;
            uint64_t v54 = v11;
            uint64_t v55 = a4;
            unsigned int v52 = 0;
          }
          uint64_t result = sub_1CC20D708(v53, v54, v55, v52);
          break;
        case 0xF:
          if (v7)
          {
            unsigned int v44 = (*v7)[11];
            uint64_t v45 = v10;
            uint64_t v46 = v11;
            uint64_t v47 = a4;
          }
          else
          {
            uint64_t v45 = v10;
            uint64_t v46 = v11;
            uint64_t v47 = a4;
            unsigned int v44 = 0;
          }
          uint64_t result = sub_1CC20D898(v45, v46, v47, v44);
          break;
        case 0x10:
          if (v7)
          {
            unsigned int v48 = (*v7)[12];
            uint64_t v49 = v10;
            uint64_t v50 = v11;
            uint64_t v51 = a4;
          }
          else
          {
            uint64_t v49 = v10;
            uint64_t v50 = v11;
            uint64_t v51 = a4;
            unsigned int v48 = 0;
          }
          uint64_t result = sub_1CC20DB80(v49, v50, v51, v48);
          break;
        case 0x11:
          if (v7)
          {
            unsigned int v40 = (*v7)[13];
            uint64_t v41 = v10;
            uint64_t v42 = v11;
            uint64_t v43 = a4;
          }
          else
          {
            uint64_t v41 = v10;
            uint64_t v42 = v11;
            uint64_t v43 = a4;
            unsigned int v40 = 0;
          }
          uint64_t result = sub_1CC20E328(v41, v42, v43, v40);
          break;
        case 0x12:
          if (v7)
          {
            unsigned int v76 = (*v7)[14];
            uint64_t v77 = v10;
            uint64_t v78 = v11;
            uint64_t v79 = a4;
          }
          else
          {
            uint64_t v77 = v10;
            uint64_t v78 = v11;
            uint64_t v79 = a4;
            unsigned int v76 = 0;
          }
          uint64_t result = sub_1CC20EB1C(v77, v78, v79, v76);
          break;
        case 0x13:
          if (v7)
          {
            unsigned int v56 = (*v7)[15];
            uint64_t v57 = v10;
            uint64_t v58 = v11;
            uint64_t v59 = a4;
          }
          else
          {
            uint64_t v57 = v10;
            uint64_t v58 = v11;
            uint64_t v59 = a4;
            unsigned int v56 = 0;
          }
          uint64_t result = sub_1CC20ED28(v57, v58, v59, v56);
          break;
        case 0x14:
          if (!v7)
          {
            uint64_t result = sub_1CC20EEF8(v10, v11, a4, 0);
            goto LABEL_102;
          }
          unsigned int v7 = a5;
          uint64_t result = sub_1CC20EEF8(v10, v11, a4, (*a5)[16]);
          break;
        case 0x15:
          if (!v7)
          {
            uint64_t result = sub_1CC20F084(v10, v11, a4, 0);
            goto LABEL_102;
          }
          unsigned int v7 = a5;
          uint64_t result = sub_1CC20F084(v10, v11, a4, (*a5)[17]);
          break;
        case 0x16:
          if (!v7)
          {
            uint64_t result = sub_1CC20F238(v10, v11, a4, 0);
            goto LABEL_102;
          }
          unsigned int v7 = a5;
          uint64_t result = sub_1CC20F238(v10, v11, a4, (*a5)[18]);
          break;
        case 0x17:
          if (!v7)
          {
            uint64_t result = sub_1CC20F3F8(v10, v11, a4, 0);
            goto LABEL_102;
          }
          unsigned int v7 = a5;
          uint64_t result = sub_1CC20F3F8(v10, v11, a4, (*a5)[19]);
          break;
        case 0x18:
          if (!v7)
          {
            uint64_t result = sub_1CC20F660(v10, v11, a4, 0);
            goto LABEL_102;
          }
          unsigned int v7 = a5;
          uint64_t result = sub_1CC20F660(v10, v11, a4, (*a5)[20]);
          break;
        case 0x19:
          if (v7)
          {
            unsigned int v60 = (*v7)[21];
            uint64_t v61 = v10;
            uint64_t v62 = v11;
            uint64_t v63 = a4;
          }
          else
          {
            uint64_t v61 = v10;
            uint64_t v62 = v11;
            uint64_t v63 = a4;
            unsigned int v60 = 0;
          }
          uint64_t result = sub_1CC20FB60(v61, v62, v63, v60);
          break;
        case 0x1A:
          if (!v7)
          {
            uint64_t result = sub_1CC20FF1C(v10, v11, a4, 0);
            goto LABEL_102;
          }
          unsigned int v7 = a5;
          uint64_t result = sub_1CC20FF1C(v10, v11, a4, (*a5)[22]);
          break;
        case 0x1B:
          if (!v7)
          {
            uint64_t result = sub_1CC210148(v10, v11, a4, 0);
            goto LABEL_102;
          }
          unsigned int v7 = a5;
          uint64_t result = sub_1CC210148(v10, v11, a4, (*a5)[23]);
          break;
        case 0x1C:
          if (v7)
          {
            unsigned int v84 = (*v7)[24];
            uint64_t v85 = v10;
            uint64_t v86 = v11;
            uint64_t v87 = a4;
          }
          else
          {
            uint64_t v85 = v10;
            uint64_t v86 = v11;
            uint64_t v87 = a4;
            unsigned int v84 = 0;
          }
          uint64_t result = sub_1CC210488(v85, v86, v87, v84);
          break;
        case 0x1D:
          if (!v7)
          {
            uint64_t result = sub_1CC2107C8(v10, v11, a4, 0);
            goto LABEL_102;
          }
          unsigned int v7 = a5;
          uint64_t result = sub_1CC2107C8(v10, v11, a4, (*a5)[25]);
          break;
        case 0x1E:
          if (!v7)
          {
            uint64_t result = sub_1CC2109C4(v10, v11, a4, 0);
            goto LABEL_102;
          }
          unsigned int v7 = a5;
          uint64_t result = sub_1CC2109C4(v10, v11, a4, (*a5)[26]);
          break;
        case 0x1F:
          if (!v7)
          {
            uint64_t result = sub_1CC210BC0(v10, v11, a4, 0);
            goto LABEL_102;
          }
          unsigned int v7 = a5;
          uint64_t result = sub_1CC210BC0(v10, v11, a4, (*a5)[27]);
          break;
        case 0x20:
          if (!v7)
          {
            uint64_t result = sub_1CC210E58(v10, v11, a4, 0);
            goto LABEL_102;
          }
          unsigned int v7 = a5;
          uint64_t result = sub_1CC210E58(v10, v11, a4, (*a5)[28]);
          break;
        case 0x21:
          if (!v7)
          {
            uint64_t result = sub_1CC210F84(v10, v11, a4, 0);
            goto LABEL_102;
          }
          unsigned int v7 = a5;
          uint64_t result = sub_1CC210F84(v10, v11, a4, (*a5)[29]);
          break;
        case 0x22:
          if (v7)
          {
            unsigned int v7 = a5;
            uint64_t result = sub_1CC2112D0(v10, v11, a4, (*a5)[30]);
          }
          else
          {
            uint64_t result = sub_1CC2112D0(v10, v11, a4, 0);
LABEL_102:
            unsigned int v7 = a5;
          }
          break;
        default:
          unsigned int v33 = *(uint64_t **)(v11 + 128);
          uint64_t v34 = *v33;
          uint64_t v93 = 0;
          uint64_t v94 = v34;
          if (sub_1CBFA3AF4(v88, &v94, &v93)) {
            uint64_t v35 = v93;
          }
          else {
            uint64_t v35 = *(void *)(v10 + 48) + 16 * *(unsigned int *)(v10 + 64);
          }
          int v36 = *(_DWORD *)(v35 + 8);
          unint64_t v37 = *(unsigned int *)(a4 + 8);
          if (v37 >= *(unsigned int *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a4 + 8 * v37) = (v36 - 1);
          ++*(_DWORD *)(a4 + 8);
          unsigned int ValueID = llvm::ValueEnumerator::getValueID(v89, (uint64_t)v33);
          unint64_t v39 = *(unsigned int *)(a4 + 8);
          if (v39 >= *(unsigned int *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a4 + 8 * v39) = ValueID;
          ++*(_DWORD *)(a4 + 8);
          uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)v10, 2u, a4, 0);
          *(_DWORD *)(a4 + 8) = 0;
          break;
      }
      ++v9;
    }
    while (v9 != v91);
  }
  return result;
}

uint64_t sub_1CC20BB44(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 88);
  unsigned int v2 = *(uint64_t **)(a1 + 88);
  if (v2)
  {
    sub_1CC207620(a1 + 88, v2);
    operator delete(*v3);
  }
  uint64_t v4 = *(uint64_t **)(a1 + 64);
  if (v4)
  {
    sub_1CC2035C8(a1 + 64, v4);
    operator delete(*(void **)(a1 + 64));
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    sub_1CC1CAA74(a1 + 40, v5);
    operator delete(*(void **)(a1 + 40));
  }
  return a1;
}

llvm::raw_ostream *sub_1CC20BBBC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if (v8)
  {
    uint64_t v9 = a2;
    do
    {
      uint64_t v10 = *(void *)(v9 - 8 * *(unsigned int *)(a2 + 8));
      uint64_t v15 = 0;
      uint64_t v16 = v10;
      uint64_t v11 = 0;
      if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v16, &v15)) {
        uint64_t v11 = *(unsigned int *)(v15 + 12);
      }
      unint64_t v12 = *(unsigned int *)(a3 + 8);
      if (v12 >= *(unsigned int *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a3 + 8 * v12) = v11;
      ++*(_DWORD *)(a3 + 8);
      v9 += 8;
      --v8;
    }
    while (v8);
  }
  if ((*(unsigned char *)(a2 + 1) & 0x7F) == 1) {
    unsigned int v13 = 5;
  }
  else {
    unsigned int v13 = 3;
  }
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, v13, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20BCCC(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (!*a4) {
    *a4 = sub_1CC20A8C0(a1);
  }
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = (*(unsigned char *)(a2 + 1) & 0x7F) == 1;
  unsigned int v9 = *(_DWORD *)(a3 + 12);
  unsigned int v10 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v10;
  if (v10 >= v9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v10) = *(unsigned int *)(a2 + 4);
  unsigned int v11 = *(_DWORD *)(a3 + 12);
  unsigned int v12 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v12;
  if (v12 >= v11) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v12) = *(unsigned __int16 *)(a2 + 2);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v13 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  uint64_t v23 = 0;
  uint64_t v24 = v13;
  if (sub_1CBFFBC50(a1 + 30, &v24, &v23)) {
    uint64_t v14 = (*(_DWORD *)(v23 + 12) - 1);
  }
  else {
    uint64_t v14 = 0xFFFFFFFFLL;
  }
  unsigned int v15 = *(_DWORD *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v15) = v14;
  ++*(_DWORD *)(a3 + 8);
  if (*(_DWORD *)(a2 + 8) == 2) {
    uint64_t v16 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v23 = 0;
  uint64_t v24 = v16;
  uint64_t v17 = 0;
  if (sub_1CBFFBC50(a1 + 30, &v24, &v23)) {
    uint64_t v17 = *(unsigned int *)(v23 + 12);
  }
  unsigned int v18 = *(_DWORD *)(a3 + 8);
  if (v18 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v18) = v17;
  unsigned int v19 = *(_DWORD *)(a3 + 12);
  unsigned int v20 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v20;
  unint64_t v21 = *(unsigned __int8 *)(a2 + 1);
  if (v20 >= v19) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v20) = v21 >> 7;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C((llvm::raw_ostream *)*a1, 7u, a3, *a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20BF30(llvm::raw_ostream **a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  unint64_t v7 = a3[3];
  if (((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3) + 1 > v7) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v8 = a3[2];
  if (v8 >= v7) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = ((*(unsigned char *)(a2 + 1) & 0x7F) == 1) | 6;
  ++a3[2];
  sub_1CBFCBB74(a3, *(unsigned char **)(a2 + 24), *(unsigned char **)(a2 + 32));
  uint64_t result = sub_1CC21152C(*a1, 0x1Du, (uint64_t)a3, a4);
  a3[2] = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20C010(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = (*(unsigned char *)(a2 + 1) & 0x7F) == 1;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v9 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  uint64_t v16 = 0;
  uint64_t v17 = v9;
  uint64_t v10 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v17, &v16)) {
    uint64_t v10 = *(unsigned int *)(v16 + 12);
  }
  unsigned int v11 = *(_DWORD *)(a3 + 8);
  if (v11 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v11) = v10;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v12 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  uint64_t v16 = 0;
  uint64_t v17 = v12;
  uint64_t v13 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v17, &v16)) {
    uint64_t v13 = *(unsigned int *)(v16 + 12);
  }
  unsigned int v14 = *(_DWORD *)(a3 + 8);
  if (v14 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v14) = v13;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x25u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20C194(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (!*a4) {
    *a4 = sub_1CC20AA08(a1);
  }
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = (*(unsigned char *)(a2 + 1) & 0x7F) == 1;
  unsigned int v9 = *(_DWORD *)(a3 + 12);
  unsigned int v10 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v10;
  if (v10 >= v9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v10) = *(unsigned __int16 *)(a2 + 2);
  unsigned int v11 = *(_DWORD *)(a3 + 12);
  unsigned int v12 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v12;
  if (v12 >= v11) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v12) = 0;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v13 = *(unsigned int *)(a2 + 8);
  if (v13)
  {
    uint64_t v14 = -8 * v13;
    do
    {
      uint64_t v15 = *(void *)(a2 + v14);
      uint64_t v19 = 0;
      uint64_t v20 = v15;
      uint64_t v16 = 0;
      if (sub_1CBFFBC50(a1 + 30, &v20, &v19)) {
        uint64_t v16 = *(unsigned int *)(v19 + 12);
      }
      unint64_t v17 = *(unsigned int *)(a3 + 8);
      if (v17 >= *(unsigned int *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a3 + 8 * v17) = v16;
      ++*(_DWORD *)(a3 + 8);
      v14 += 8;
    }
    while (v14);
  }
  uint64_t result = sub_1CC21152C((llvm::raw_ostream *)*a1, 0xCu, a3, *a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20C350(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = ((*(unsigned char *)(a2 + 1) & 0x7F) == 1) | 4;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v9 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  uint64_t v22 = 0;
  uint64_t v23 = v9;
  uint64_t v10 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v23, &v22)) {
    uint64_t v10 = *(unsigned int *)(v22 + 12);
  }
  unsigned int v11 = *(_DWORD *)(a3 + 8);
  if (v11 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v11) = v10;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v12 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  uint64_t v22 = 0;
  uint64_t v23 = v12;
  uint64_t v13 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v23, &v22)) {
    uint64_t v13 = *(unsigned int *)(v22 + 12);
  }
  unsigned int v14 = *(_DWORD *)(a3 + 8);
  if (v14 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v14) = v13;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v15 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  uint64_t v22 = 0;
  uint64_t v23 = v15;
  uint64_t v16 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v23, &v22)) {
    uint64_t v16 = *(unsigned int *)(v22 + 12);
  }
  unsigned int v17 = *(_DWORD *)(a3 + 8);
  if (v17 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v17) = v16;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v18 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  uint64_t v22 = 0;
  uint64_t v23 = v18;
  uint64_t v19 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v23, &v22)) {
    uint64_t v19 = *(unsigned int *)(v22 + 12);
  }
  unsigned int v20 = *(_DWORD *)(a3 + 8);
  if (v20 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v20) = v19;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0xDu, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20C5B0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8 = 6;
  if (!*(_DWORD *)(a2 + 4)) {
    uint64_t v8 = 4;
  }
  uint64_t v9 = v8 | ((*(unsigned char *)(a2 + 1) & 0x7F) == 1);
  unsigned int v10 = *(_DWORD *)(a3 + 8);
  if (v10 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v10) = v9;
  unsigned int v11 = *(_DWORD *)(a3 + 12);
  unsigned int v12 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v12;
  if (v12 >= v11) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v12) = *(unsigned int *)(a2 + 32);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v13 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  uint64_t v17 = 0;
  uint64_t v18 = v13;
  uint64_t v14 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v18, &v17)) {
    uint64_t v14 = *(unsigned int *)(v17 + 12);
  }
  unsigned int v15 = *(_DWORD *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v15) = v14;
  ++*(_DWORD *)(a3 + 8);
  sub_1CC20A6DC(a3, a2 + 24);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0xEu, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20C724(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = (*(unsigned char *)(a2 + 1) & 0x7F) == 1;
  unsigned int v9 = *(_DWORD *)(a3 + 12);
  unsigned int v10 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v10;
  if (v10 >= v9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v10) = *(unsigned __int16 *)(a2 + 2);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v11 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  uint64_t v24 = 0;
  uint64_t v25 = v11;
  uint64_t v12 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v25, &v24)) {
    uint64_t v12 = *(unsigned int *)(v24 + 12);
  }
  unsigned int v13 = *(_DWORD *)(a3 + 8);
  if (v13 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v13) = v12;
  unsigned int v14 = *(_DWORD *)(a3 + 12);
  unsigned int v15 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v15;
  if (v15 >= v14) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v15) = *(void *)(a2 + 32);
  unsigned int v16 = *(_DWORD *)(a3 + 12);
  unsigned int v17 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v17;
  if (v17 >= v16) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v17) = *(unsigned int *)(a2 + 48);
  unsigned int v18 = *(_DWORD *)(a3 + 12);
  unsigned int v19 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v19;
  if (v19 >= v18) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v19) = *(unsigned int *)(a2 + 52);
  unsigned int v20 = *(_DWORD *)(a3 + 12);
  unsigned int v21 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v21;
  uint64_t v22 = *(unsigned int *)(a2 + 28);
  if (v21 >= v20) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v21) = v22;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0xFu, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20C964(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = (*(unsigned char *)(a2 + 1) & 0x7F) == 1;
  unsigned int v9 = *(_DWORD *)(a3 + 12);
  unsigned int v10 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v10;
  if (v10 >= v9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v10) = *(unsigned __int16 *)(a2 + 2);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v11 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  uint64_t v45 = 0;
  uint64_t v46 = v11;
  uint64_t v12 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v46, &v45)) {
    uint64_t v12 = *(unsigned int *)(v45 + 12);
  }
  unsigned int v13 = *(_DWORD *)(a3 + 8);
  if (v13 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v13) = v12;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v14 = a2;
  if (*(unsigned char *)a2 != 15) {
    uint64_t v14 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  }
  uint64_t v45 = 0;
  uint64_t v46 = v14;
  uint64_t v15 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v46, &v45)) {
    uint64_t v15 = *(unsigned int *)(v45 + 12);
  }
  unsigned int v16 = *(_DWORD *)(a3 + 8);
  if (v16 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v16) = v15;
  unsigned int v17 = *(_DWORD *)(a3 + 12);
  unsigned int v18 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v18;
  if (v18 >= v17) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v18) = *(unsigned int *)(a2 + 24);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v19 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  uint64_t v45 = 0;
  uint64_t v46 = v19;
  uint64_t v20 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v46, &v45)) {
    uint64_t v20 = *(unsigned int *)(v45 + 12);
  }
  unsigned int v21 = *(_DWORD *)(a3 + 8);
  if (v21 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v21) = v20;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v22 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  uint64_t v45 = 0;
  uint64_t v46 = v22;
  uint64_t v23 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v46, &v45)) {
    uint64_t v23 = *(unsigned int *)(v45 + 12);
  }
  unsigned int v24 = *(_DWORD *)(a3 + 8);
  if (v24 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v24) = v23;
  unsigned int v25 = *(_DWORD *)(a3 + 12);
  unsigned int v26 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v26;
  if (v26 >= v25) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v26) = *(void *)(a2 + 32);
  unsigned int v27 = *(_DWORD *)(a3 + 12);
  unsigned int v28 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v28;
  if (v28 >= v27) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v28) = *(unsigned int *)(a2 + 48);
  unsigned int v29 = *(_DWORD *)(a3 + 12);
  unsigned int v30 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v30;
  if (v30 >= v29) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v30) = *(void *)(a2 + 40);
  unsigned int v31 = *(_DWORD *)(a3 + 12);
  unsigned int v32 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v32;
  if (v32 >= v31) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v32) = *(unsigned int *)(a2 + 28);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v33 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  uint64_t v45 = 0;
  uint64_t v46 = v33;
  uint64_t v34 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v46, &v45)) {
    uint64_t v34 = *(unsigned int *)(v45 + 12);
  }
  unsigned int v35 = *(_DWORD *)(a3 + 8);
  if (v35 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v35) = v34;
  unsigned int v36 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v36;
  uint64_t v37 = *(void *)(a2 + 52);
  if ((v37 & 0xFF00000000) != 0) {
    uint64_t v38 = (v37 + 1);
  }
  else {
    uint64_t v38 = 0;
  }
  if (v36 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v36) = v38;
  unsigned int v39 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v39;
  if (*(_WORD *)(a2 + 2) == 17152) {
    uint64_t v40 = *(unsigned int *)(a2 + 4);
  }
  else {
    uint64_t v40 = 0;
  }
  if (v39 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v39) = v40;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v41 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40);
  uint64_t v45 = 0;
  uint64_t v46 = v41;
  uint64_t v42 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v46, &v45)) {
    uint64_t v42 = *(unsigned int *)(v45 + 12);
  }
  unsigned int v43 = *(_DWORD *)(a3 + 8);
  if (v43 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v43) = v42;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x11u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20CEBC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = ((*(unsigned char *)(a2 + 1) & 0x7F) == 1) | 2;
  unsigned int v9 = *(_DWORD *)(a3 + 12);
  unsigned int v10 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v10;
  if (v10 >= v9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v10) = *(unsigned __int16 *)(a2 + 2);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v11 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  uint64_t v66 = 0;
  uint64_t v67 = v11;
  uint64_t v12 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v12 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v13 = *(_DWORD *)(a3 + 8);
  if (v13 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v13) = v12;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v14 = a2;
  if (*(unsigned char *)a2 != 15) {
    uint64_t v14 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  }
  uint64_t v66 = 0;
  uint64_t v67 = v14;
  uint64_t v15 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v15 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v16 = *(_DWORD *)(a3 + 8);
  if (v16 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v16) = v15;
  unsigned int v17 = *(_DWORD *)(a3 + 12);
  unsigned int v18 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v18;
  if (v18 >= v17) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v18) = *(unsigned int *)(a2 + 24);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v19 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  uint64_t v66 = 0;
  uint64_t v67 = v19;
  uint64_t v20 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v20 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v21 = *(_DWORD *)(a3 + 8);
  if (v21 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v21) = v20;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v22 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  uint64_t v66 = 0;
  uint64_t v67 = v22;
  uint64_t v23 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v23 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v24 = *(_DWORD *)(a3 + 8);
  if (v24 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v24) = v23;
  unsigned int v25 = *(_DWORD *)(a3 + 12);
  unsigned int v26 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v26;
  if (v26 >= v25) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v26) = *(void *)(a2 + 32);
  unsigned int v27 = *(_DWORD *)(a3 + 12);
  unsigned int v28 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v28;
  if (v28 >= v27) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v28) = *(unsigned int *)(a2 + 48);
  unsigned int v29 = *(_DWORD *)(a3 + 12);
  unsigned int v30 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v30;
  if (v30 >= v29) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v30) = *(void *)(a2 + 40);
  unsigned int v31 = *(_DWORD *)(a3 + 12);
  unsigned int v32 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v32;
  if (v32 >= v31) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v32) = *(unsigned int *)(a2 + 28);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v33 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  uint64_t v66 = 0;
  uint64_t v67 = v33;
  uint64_t v34 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v34 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v35 = *(_DWORD *)(a3 + 8);
  if (v35 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v35) = v34;
  unsigned int v36 = *(_DWORD *)(a3 + 12);
  unsigned int v37 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v37;
  if (v37 >= v36) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v37) = *(unsigned int *)(a2 + 52);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v38 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40);
  uint64_t v66 = 0;
  uint64_t v67 = v38;
  uint64_t v39 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v39 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v40 = *(_DWORD *)(a3 + 8);
  if (v40 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v40) = v39;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v41 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 48);
  uint64_t v66 = 0;
  uint64_t v67 = v41;
  uint64_t v42 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v42 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v43 = *(_DWORD *)(a3 + 8);
  if (v43 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v43) = v42;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v44 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 56);
  uint64_t v66 = 0;
  uint64_t v67 = v44;
  uint64_t v45 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v45 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v46 = *(_DWORD *)(a3 + 8);
  if (v46 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v46) = v45;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v47 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 64);
  uint64_t v66 = 0;
  uint64_t v67 = v47;
  uint64_t v48 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v48 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v49 = *(_DWORD *)(a3 + 8);
  if (v49 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v49) = v48;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v50 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 72);
  uint64_t v66 = 0;
  uint64_t v67 = v50;
  uint64_t v51 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v51 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v52 = *(_DWORD *)(a3 + 8);
  if (v52 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v52) = v51;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v53 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 80);
  uint64_t v66 = 0;
  uint64_t v67 = v53;
  uint64_t v54 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v54 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v55 = *(_DWORD *)(a3 + 8);
  if (v55 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v55) = v54;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v56 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 88);
  uint64_t v66 = 0;
  uint64_t v67 = v56;
  uint64_t v57 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v57 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v58 = *(_DWORD *)(a3 + 8);
  if (v58 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v58) = v57;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v59 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 96);
  uint64_t v66 = 0;
  uint64_t v67 = v59;
  uint64_t v60 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v60 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v61 = *(_DWORD *)(a3 + 8);
  if (v61 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v61) = v60;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v62 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 104);
  uint64_t v66 = 0;
  uint64_t v67 = v62;
  uint64_t v63 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v63 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v64 = *(_DWORD *)(a3 + 8);
  if (v64 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v64) = v63;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x12u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20D708(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = ((*(unsigned char *)(a2 + 1) & 0x7F) == 1) | 2;
  unsigned int v9 = *(_DWORD *)(a3 + 12);
  unsigned int v10 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v10;
  if (v10 >= v9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v10) = *(unsigned int *)(a2 + 28);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v11 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  uint64_t v18 = 0;
  uint64_t v19 = v11;
  uint64_t v12 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v19, &v18)) {
    uint64_t v12 = *(unsigned int *)(v18 + 12);
  }
  unsigned int v13 = *(_DWORD *)(a3 + 8);
  if (v13 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v13) = v12;
  unsigned int v14 = *(_DWORD *)(a3 + 12);
  unsigned int v15 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v15;
  uint64_t v16 = *(unsigned __int8 *)(a2 + 52);
  if (v15 >= v14) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v15) = v16;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x13u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20D898(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = (*(unsigned char *)(a2 + 1) & 0x7F) == 1;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v9 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  uint64_t v22 = 0;
  uint64_t v23 = v9;
  uint64_t v10 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v23, &v22)) {
    uint64_t v10 = *(unsigned int *)(v22 + 12);
  }
  unsigned int v11 = *(_DWORD *)(a3 + 8);
  if (v11 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v11) = v10;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v12 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  uint64_t v22 = 0;
  uint64_t v23 = v12;
  uint64_t v13 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v23, &v22)) {
    uint64_t v13 = *(unsigned int *)(v22 + 12);
  }
  unsigned int v14 = *(_DWORD *)(a3 + 8);
  if (v14 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v14) = v13;
  unsigned int v15 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v15;
  if (*(unsigned char *)(a2 + 40))
  {
    if (v15 >= *(_DWORD *)(a3 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a3 + 8 * v15) = *(unsigned int *)(a2 + 24);
    ++*(_DWORD *)(a3 + 8);
    uint64_t v23 = *(void *)(a2 + 32);
  }
  else
  {
    if (v15 >= *(_DWORD *)(a3 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a3 + 8 * v15) = 0;
    ++*(_DWORD *)(a3 + 8);
    uint64_t v23 = 0;
  }
  uint64_t v22 = 0;
  uint64_t v16 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v23, &v22)) {
    uint64_t v16 = *(unsigned int *)(v22 + 12);
  }
  unsigned int v17 = *(_DWORD *)(a3 + 8);
  if (v17 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v17) = v16;
  ++*(_DWORD *)(a3 + 8);
  if (*(unsigned char *)(a2 + 56))
  {
    uint64_t v18 = *(void *)(a2 + 48);
    uint64_t v22 = 0;
    uint64_t v23 = v18;
    uint64_t v19 = 0;
    if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v23, &v22)) {
      uint64_t v19 = *(unsigned int *)(v22 + 12);
    }
    unsigned int v20 = *(_DWORD *)(a3 + 8);
    if (v20 >= *(_DWORD *)(a3 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a3 + 8 * v20) = v19;
    ++*(_DWORD *)(a3 + 8);
  }
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x10u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20DB80(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = 1;
  unsigned int v9 = *(_DWORD *)(a3 + 12);
  unsigned int v10 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v10;
  if (v10 >= v9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v10) = *(unsigned int *)(a2 + 24);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v11 = a2;
  if (*(unsigned char *)a2 != 15) {
    uint64_t v11 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  }
  uint64_t v63 = 0;
  uint64_t v64 = v11;
  uint64_t v12 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v64, &v63)) {
    uint64_t v12 = *(unsigned int *)(v63 + 12);
  }
  unsigned int v13 = *(_DWORD *)(a3 + 8);
  if (v13 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v13) = v12;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v14 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  uint64_t v63 = 0;
  uint64_t v64 = v14;
  uint64_t v15 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v64, &v63)) {
    uint64_t v15 = *(unsigned int *)(v63 + 12);
  }
  unsigned int v16 = *(_DWORD *)(a3 + 8);
  if (v16 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v16) = v15;
  unsigned int v17 = *(_DWORD *)(a3 + 12);
  unsigned int v18 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v18;
  if (v18 >= v17) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v18) = *(unsigned __int8 *)(a2 + 28);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v19 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  uint64_t v63 = 0;
  uint64_t v64 = v19;
  uint64_t v20 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v64, &v63)) {
    uint64_t v20 = *(unsigned int *)(v63 + 12);
  }
  unsigned int v21 = *(_DWORD *)(a3 + 8);
  if (v21 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v21) = v20;
  unsigned int v22 = *(_DWORD *)(a3 + 12);
  unsigned int v23 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v23;
  if (v23 >= v22) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v23) = *(unsigned int *)(a2 + 32);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v24 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  uint64_t v63 = 0;
  uint64_t v64 = v24;
  uint64_t v25 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v64, &v63)) {
    uint64_t v25 = *(unsigned int *)(v63 + 12);
  }
  unsigned int v26 = *(_DWORD *)(a3 + 8);
  if (v26 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v26) = v25;
  unsigned int v27 = *(_DWORD *)(a3 + 12);
  unsigned int v28 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v28;
  if (v28 >= v27) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v28) = *(unsigned int *)(a2 + 36);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v29 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  uint64_t v63 = 0;
  uint64_t v64 = v29;
  uint64_t v30 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v64, &v63)) {
    uint64_t v30 = *(unsigned int *)(v63 + 12);
  }
  unsigned int v31 = *(_DWORD *)(a3 + 8);
  if (v31 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v31) = v30;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v32 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40);
  uint64_t v63 = 0;
  uint64_t v64 = v32;
  uint64_t v33 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v64, &v63)) {
    uint64_t v33 = *(unsigned int *)(v63 + 12);
  }
  unsigned int v34 = *(_DWORD *)(a3 + 8);
  if (v34 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v34) = v33;
  unsigned int v35 = *(_DWORD *)(a3 + 12);
  unsigned int v36 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v36;
  if (v36 >= v35) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v36) = 0;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v37 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 48);
  uint64_t v63 = 0;
  uint64_t v64 = v37;
  uint64_t v38 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v64, &v63)) {
    uint64_t v38 = *(unsigned int *)(v63 + 12);
  }
  unsigned int v39 = *(_DWORD *)(a3 + 8);
  if (v39 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v39) = v38;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v40 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 56);
  uint64_t v63 = 0;
  uint64_t v64 = v40;
  uint64_t v41 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v64, &v63)) {
    uint64_t v41 = *(unsigned int *)(v63 + 12);
  }
  unsigned int v42 = *(_DWORD *)(a3 + 8);
  if (v42 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v42) = v41;
  unsigned int v43 = *(_DWORD *)(a3 + 12);
  unsigned int v44 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v44;
  if (v44 >= v43) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v44) = *(void *)(a2 + 40);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v45 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 64);
  uint64_t v63 = 0;
  uint64_t v64 = v45;
  uint64_t v46 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v64, &v63)) {
    uint64_t v46 = *(unsigned int *)(v63 + 12);
  }
  unsigned int v47 = *(_DWORD *)(a3 + 8);
  if (v47 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v47) = v46;
  unsigned int v48 = *(_DWORD *)(a3 + 12);
  unsigned int v49 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v49;
  if (v49 >= v48) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v49) = *(unsigned __int8 *)(a2 + 48);
  unsigned int v50 = *(_DWORD *)(a3 + 12);
  unsigned int v51 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v51;
  if (v51 >= v50) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v51) = *(unsigned __int8 *)(a2 + 49);
  unsigned int v52 = *(_DWORD *)(a3 + 12);
  unsigned int v53 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v53;
  if (v53 >= v52) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v53) = *(unsigned int *)(a2 + 52);
  unsigned int v54 = *(_DWORD *)(a3 + 12);
  unsigned int v55 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v55;
  if (v55 >= v54) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v55) = *(unsigned __int8 *)(a2 + 56);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v56 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 72);
  uint64_t v63 = 0;
  uint64_t v64 = v56;
  uint64_t v57 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v64, &v63)) {
    uint64_t v57 = *(unsigned int *)(v63 + 12);
  }
  unsigned int v58 = *(_DWORD *)(a3 + 8);
  if (v58 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v58) = v57;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v59 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 80);
  uint64_t v63 = 0;
  uint64_t v64 = v59;
  uint64_t v60 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v64, &v63)) {
    uint64_t v60 = *(unsigned int *)(v63 + 12);
  }
  unsigned int v61 = *(_DWORD *)(a3 + 8);
  if (v61 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v61) = v60;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x14u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20E328(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = ((*(unsigned char *)(a2 + 1) & 0x7F) == 1) | 6;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v9 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  uint64_t v66 = 0;
  uint64_t v67 = v9;
  uint64_t v10 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v10 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v11 = *(_DWORD *)(a3 + 8);
  if (v11 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v11) = v10;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v12 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  uint64_t v66 = 0;
  uint64_t v67 = v12;
  uint64_t v13 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v13 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v14 = *(_DWORD *)(a3 + 8);
  if (v14 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v14) = v13;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v15 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  uint64_t v66 = 0;
  uint64_t v67 = v15;
  uint64_t v16 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v16 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v17 = *(_DWORD *)(a3 + 8);
  if (v17 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v17) = v16;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v18 = a2;
  if (*(unsigned char *)a2 != 15) {
    uint64_t v18 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  }
  uint64_t v66 = 0;
  uint64_t v67 = v18;
  uint64_t v19 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v19 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v20 = *(_DWORD *)(a3 + 8);
  if (v20 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v20) = v19;
  unsigned int v21 = *(_DWORD *)(a3 + 12);
  unsigned int v22 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v22;
  if (v22 >= v21) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v22) = *(unsigned int *)(a2 + 24);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v23 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  uint64_t v66 = 0;
  uint64_t v67 = v23;
  uint64_t v24 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v24 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v25 = *(_DWORD *)(a3 + 8);
  if (v25 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v25) = v24;
  unsigned int v26 = *(_DWORD *)(a3 + 12);
  unsigned int v27 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v27;
  if (v27 >= v26) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v27) = *(unsigned int *)(a2 + 28);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v28 = *(unsigned int *)(a2 + 8);
  if (v28 < 9) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = *(void *)(a2 - 8 * v28 + 64);
  }
  uint64_t v66 = 0;
  uint64_t v67 = v29;
  uint64_t v30 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v30 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v31 = *(_DWORD *)(a3 + 8);
  if (v31 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v31) = v30;
  unsigned int v32 = *(_DWORD *)(a3 + 12);
  unsigned int v33 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v33;
  if (v33 >= v32) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v33) = *(unsigned int *)(a2 + 44);
  unsigned int v34 = *(_DWORD *)(a3 + 12);
  unsigned int v35 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v35;
  if (v35 >= v34) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v35) = *(unsigned int *)(a2 + 32);
  unsigned int v36 = *(_DWORD *)(a3 + 12);
  unsigned int v37 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v37;
  if (v37 >= v36) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v37) = *(unsigned int *)(a2 + 40);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v38 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40);
  uint64_t v66 = 0;
  uint64_t v67 = v38;
  uint64_t v39 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v39 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v40 = *(_DWORD *)(a3 + 8);
  if (v40 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v40) = v39;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v41 = *(unsigned int *)(a2 + 8);
  if (v41 < 0xA) {
    uint64_t v42 = 0;
  }
  else {
    uint64_t v42 = *(void *)(a2 - 8 * v41 + 72);
  }
  uint64_t v66 = 0;
  uint64_t v67 = v42;
  uint64_t v43 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v43 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v44 = *(_DWORD *)(a3 + 8);
  if (v44 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v44) = v43;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v45 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 48);
  uint64_t v66 = 0;
  uint64_t v67 = v45;
  uint64_t v46 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v46 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v47 = *(_DWORD *)(a3 + 8);
  if (v47 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v47) = v46;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v48 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 56);
  uint64_t v66 = 0;
  uint64_t v67 = v48;
  uint64_t v49 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v49 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v50 = *(_DWORD *)(a3 + 8);
  if (v50 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v50) = v49;
  unsigned int v51 = *(_DWORD *)(a3 + 12);
  unsigned int v52 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v52;
  if (v52 >= v51) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v52) = *(int *)(a2 + 36);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v53 = *(unsigned int *)(a2 + 8);
  if (v53 < 0xB) {
    uint64_t v54 = 0;
  }
  else {
    uint64_t v54 = *(void *)(a2 - 8 * v53 + 80);
  }
  uint64_t v66 = 0;
  uint64_t v67 = v54;
  uint64_t v55 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v55 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v56 = *(_DWORD *)(a3 + 8);
  if (v56 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v56) = v55;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v57 = *(unsigned int *)(a2 + 8);
  if (v57 < 0xC) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = *(void *)(a2 - 8 * v57 + 88);
  }
  uint64_t v66 = 0;
  uint64_t v67 = v58;
  uint64_t v59 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v59 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v60 = *(_DWORD *)(a3 + 8);
  if (v60 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v60) = v59;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v61 = *(unsigned int *)(a2 + 8);
  if (v61 < 0xD) {
    uint64_t v62 = 0;
  }
  else {
    uint64_t v62 = *(void *)(a2 - 8 * v61 + 96);
  }
  uint64_t v66 = 0;
  uint64_t v67 = v62;
  uint64_t v63 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v67, &v66)) {
    uint64_t v63 = *(unsigned int *)(v66 + 12);
  }
  unsigned int v64 = *(_DWORD *)(a3 + 8);
  if (v64 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v64) = v63;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x15u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20EB1C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = (*(unsigned char *)(a2 + 1) & 0x7F) == 1;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v9 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  uint64_t v21 = 0;
  uint64_t v22 = v9;
  uint64_t v10 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v22, &v21)) {
    uint64_t v10 = *(unsigned int *)(v21 + 12);
  }
  unsigned int v11 = *(_DWORD *)(a3 + 8);
  if (v11 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v11) = v10;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v12 = a2;
  if (*(unsigned char *)a2 != 15) {
    uint64_t v12 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  }
  uint64_t v21 = 0;
  uint64_t v22 = v12;
  uint64_t v13 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v22, &v21)) {
    uint64_t v13 = *(unsigned int *)(v21 + 12);
  }
  unsigned int v14 = *(_DWORD *)(a3 + 8);
  if (v14 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v14) = v13;
  unsigned int v15 = *(_DWORD *)(a3 + 12);
  unsigned int v16 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v16;
  if (v16 >= v15) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v16) = *(unsigned int *)(a2 + 24);
  unsigned int v17 = *(_DWORD *)(a3 + 12);
  unsigned int v18 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v18;
  uint64_t v19 = *(unsigned __int16 *)(a2 + 28);
  if (v18 >= v17) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v18) = v19;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x16u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20ED28(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = (*(unsigned char *)(a2 + 1) & 0x7F) == 1;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v9 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  uint64_t v19 = 0;
  uint64_t v20 = v9;
  uint64_t v10 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v20, &v19)) {
    uint64_t v10 = *(unsigned int *)(v19 + 12);
  }
  unsigned int v11 = *(_DWORD *)(a3 + 8);
  if (v11 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v11) = v10;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v12 = a2;
  if (*(unsigned char *)a2 != 15) {
    uint64_t v12 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  }
  uint64_t v19 = 0;
  uint64_t v20 = v12;
  uint64_t v13 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v20, &v19)) {
    uint64_t v13 = *(unsigned int *)(v19 + 12);
  }
  unsigned int v14 = *(_DWORD *)(a3 + 8);
  if (v14 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v14) = v13;
  unsigned int v15 = *(_DWORD *)(a3 + 12);
  unsigned int v16 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v16;
  uint64_t v17 = *(unsigned int *)(a2 + 24);
  if (v16 >= v15) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v16) = v17;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x17u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20EEF8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = ((*(unsigned char *)(a2 + 1) & 0x7F) == 1) | (2 * (*(unsigned char *)(a2 + 24) & 1));
  ++*(_DWORD *)(a3 + 8);
  uint64_t v9 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  uint64_t v16 = 0;
  uint64_t v17 = v9;
  uint64_t v10 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v17, &v16)) {
    uint64_t v10 = *(unsigned int *)(v16 + 12);
  }
  unsigned int v11 = *(_DWORD *)(a3 + 8);
  if (v11 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v11) = v10;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v12 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  uint64_t v16 = 0;
  uint64_t v17 = v12;
  uint64_t v13 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v17, &v16)) {
    uint64_t v13 = *(unsigned int *)(v16 + 12);
  }
  unsigned int v14 = *(_DWORD *)(a3 + 8);
  if (v14 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v14) = v13;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x18u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20F084(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = (*(unsigned char *)(a2 + 1) & 0x7F) == 1;
  unsigned int v9 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v9;
  uint64_t v10 = *(unsigned int *)(a2 + 8);
  if (v10)
  {
    uint64_t v11 = -8 * v10;
    do
    {
      uint64_t v12 = *(void *)(a2 + v11);
      uint64_t v19 = 0;
      uint64_t v20 = v12;
      uint64_t v13 = 0;
      if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v20, &v19)) {
        uint64_t v13 = *(unsigned int *)(v19 + 12);
      }
      unint64_t v14 = *(unsigned int *)(a3 + 8);
      if (v14 >= *(unsigned int *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a3 + 8 * v14) = v13;
      unsigned int v9 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v9;
      v11 += 8;
    }
    while (v11);
  }
  if (v9 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v9) = *(unsigned int *)(a2 + 24);
  unsigned int v15 = *(_DWORD *)(a3 + 12);
  unsigned int v16 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v16;
  uint64_t v17 = *(unsigned __int8 *)(a2 + 28);
  if (v16 >= v15) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v16) = v17;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x20u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20F238(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = (*(unsigned char *)(a2 + 1) & 0x7F) == 1;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v9 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  uint64_t v19 = 0;
  uint64_t v20 = v9;
  uint64_t v10 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v20, &v19)) {
    uint64_t v10 = *(unsigned int *)(v19 + 12);
  }
  unsigned int v11 = *(_DWORD *)(a3 + 8);
  if (v11 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v11) = v10;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v12 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  uint64_t v19 = 0;
  uint64_t v20 = v12;
  uint64_t v13 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v20, &v19)) {
    uint64_t v13 = *(unsigned int *)(v19 + 12);
  }
  unsigned int v14 = *(_DWORD *)(a3 + 8);
  if (v14 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v14) = v13;
  unsigned int v15 = *(_DWORD *)(a3 + 12);
  unsigned int v16 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v16;
  uint64_t v17 = *(unsigned __int8 *)(a2 + 24);
  if (v16 >= v15) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v16) = v17;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x19u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20F3F8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = (*(unsigned char *)(a2 + 1) & 0x7F) == 1;
  unsigned int v9 = *(_DWORD *)(a3 + 12);
  unsigned int v10 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v10;
  if (v10 >= v9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v10) = *(unsigned __int16 *)(a2 + 2);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v11 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  uint64_t v23 = 0;
  uint64_t v24 = v11;
  uint64_t v12 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v24, &v23)) {
    uint64_t v12 = *(unsigned int *)(v23 + 12);
  }
  unsigned int v13 = *(_DWORD *)(a3 + 8);
  if (v13 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v13) = v12;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v14 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  uint64_t v23 = 0;
  uint64_t v24 = v14;
  uint64_t v15 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v24, &v23)) {
    uint64_t v15 = *(unsigned int *)(v23 + 12);
  }
  unsigned int v16 = *(_DWORD *)(a3 + 8);
  if (v16 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v16) = v15;
  unsigned int v17 = *(_DWORD *)(a3 + 12);
  unsigned int v18 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v18;
  if (v18 >= v17) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v18) = *(unsigned __int8 *)(a2 + 24);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v19 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  uint64_t v23 = 0;
  uint64_t v24 = v19;
  uint64_t v20 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v24, &v23)) {
    uint64_t v20 = *(unsigned int *)(v23 + 12);
  }
  unsigned int v21 = *(_DWORD *)(a3 + 8);
  if (v21 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v21) = v20;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x1Au, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20F660(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = ((*(unsigned char *)(a2 + 1) & 0x7F) == 1) | 4;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v9 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  uint64_t v42 = 0;
  uint64_t v43 = v9;
  uint64_t v10 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v43, &v42)) {
    uint64_t v10 = *(unsigned int *)(v42 + 12);
  }
  unsigned int v11 = *(_DWORD *)(a3 + 8);
  if (v11 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v11) = v10;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v12 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  uint64_t v42 = 0;
  uint64_t v43 = v12;
  uint64_t v13 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v43, &v42)) {
    uint64_t v13 = *(unsigned int *)(v42 + 12);
  }
  unsigned int v14 = *(_DWORD *)(a3 + 8);
  if (v14 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v14) = v13;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v15 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40);
  uint64_t v42 = 0;
  uint64_t v43 = v15;
  uint64_t v16 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v43, &v42)) {
    uint64_t v16 = *(unsigned int *)(v42 + 12);
  }
  unsigned int v17 = *(_DWORD *)(a3 + 8);
  if (v17 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v17) = v16;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v18 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  uint64_t v42 = 0;
  uint64_t v43 = v18;
  uint64_t v19 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v43, &v42)) {
    uint64_t v19 = *(unsigned int *)(v42 + 12);
  }
  unsigned int v20 = *(_DWORD *)(a3 + 8);
  if (v20 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v20) = v19;
  unsigned int v21 = *(_DWORD *)(a3 + 12);
  unsigned int v22 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v22;
  if (v22 >= v21) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v22) = *(unsigned int *)(a2 + 24);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v23 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  uint64_t v42 = 0;
  uint64_t v43 = v23;
  uint64_t v24 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v43, &v42)) {
    uint64_t v24 = *(unsigned int *)(v42 + 12);
  }
  unsigned int v25 = *(_DWORD *)(a3 + 8);
  if (v25 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v25) = v24;
  unsigned int v26 = *(_DWORD *)(a3 + 12);
  unsigned int v27 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v27;
  if (v27 >= v26) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v27) = *(unsigned __int8 *)(a2 + 32);
  unsigned int v28 = *(_DWORD *)(a3 + 12);
  unsigned int v29 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v29;
  if (v29 >= v28) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v29) = *(unsigned __int8 *)(a2 + 33);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v30 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 48);
  uint64_t v42 = 0;
  uint64_t v43 = v30;
  uint64_t v31 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v43, &v42)) {
    uint64_t v31 = *(unsigned int *)(v42 + 12);
  }
  unsigned int v32 = *(_DWORD *)(a3 + 8);
  if (v32 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v32) = v31;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v33 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 56);
  uint64_t v42 = 0;
  uint64_t v43 = v33;
  uint64_t v34 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v43, &v42)) {
    uint64_t v34 = *(unsigned int *)(v42 + 12);
  }
  unsigned int v35 = *(_DWORD *)(a3 + 8);
  if (v35 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v35) = v34;
  unsigned int v36 = *(_DWORD *)(a3 + 12);
  unsigned int v37 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v37;
  if (v37 >= v36) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v37) = *(unsigned int *)(a2 + 28);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v38 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 64);
  uint64_t v42 = 0;
  uint64_t v43 = v38;
  uint64_t v39 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v43, &v42)) {
    uint64_t v39 = *(unsigned int *)(v42 + 12);
  }
  unsigned int v40 = *(_DWORD *)(a3 + 8);
  if (v40 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v40) = v39;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x1Bu, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20FB60(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = ((*(unsigned char *)(a2 + 1) & 0x7F) == 1) | 2;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v9 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  uint64_t v33 = 0;
  uint64_t v34 = v9;
  uint64_t v10 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v34, &v33)) {
    uint64_t v10 = *(unsigned int *)(v33 + 12);
  }
  unsigned int v11 = *(_DWORD *)(a3 + 8);
  if (v11 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v11) = v10;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v12 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  uint64_t v33 = 0;
  uint64_t v34 = v12;
  uint64_t v13 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v34, &v33)) {
    uint64_t v13 = *(unsigned int *)(v33 + 12);
  }
  unsigned int v14 = *(_DWORD *)(a3 + 8);
  if (v14 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v14) = v13;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v15 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  uint64_t v33 = 0;
  uint64_t v34 = v15;
  uint64_t v16 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v34, &v33)) {
    uint64_t v16 = *(unsigned int *)(v33 + 12);
  }
  unsigned int v17 = *(_DWORD *)(a3 + 8);
  if (v17 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v17) = v16;
  unsigned int v18 = *(_DWORD *)(a3 + 12);
  unsigned int v19 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v19;
  if (v19 >= v18) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v19) = *(unsigned int *)(a2 + 24);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v20 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  uint64_t v33 = 0;
  uint64_t v34 = v20;
  uint64_t v21 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v34, &v33)) {
    uint64_t v21 = *(unsigned int *)(v33 + 12);
  }
  unsigned int v22 = *(_DWORD *)(a3 + 8);
  if (v22 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v22) = v21;
  unsigned int v23 = *(_DWORD *)(a3 + 12);
  unsigned int v24 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v24;
  if (v24 >= v23) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v24) = *(unsigned __int16 *)(a2 + 32);
  unsigned int v25 = *(_DWORD *)(a3 + 12);
  unsigned int v26 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v26;
  if (v26 >= v25) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v26) = *(unsigned int *)(a2 + 36);
  unsigned int v27 = *(_DWORD *)(a3 + 12);
  unsigned int v28 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v28;
  if (v28 >= v27) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v28) = *(unsigned int *)(a2 + 28);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v29 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  uint64_t v33 = 0;
  uint64_t v34 = v29;
  uint64_t v30 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v34, &v33)) {
    uint64_t v30 = *(unsigned int *)(v33 + 12);
  }
  unsigned int v31 = *(_DWORD *)(a3 + 8);
  if (v31 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v31) = v30;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x1Cu, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC20FF1C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = (*(unsigned char *)(a2 + 1) & 0x7F) == 1;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v9 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  uint64_t v22 = 0;
  uint64_t v23 = v9;
  uint64_t v10 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v23, &v22)) {
    uint64_t v10 = *(unsigned int *)(v22 + 12);
  }
  unsigned int v11 = *(_DWORD *)(a3 + 8);
  if (v11 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v11) = v10;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v12 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  uint64_t v22 = 0;
  uint64_t v23 = v12;
  uint64_t v13 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v23, &v22)) {
    uint64_t v13 = *(unsigned int *)(v22 + 12);
  }
  unsigned int v14 = *(_DWORD *)(a3 + 8);
  if (v14 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v14) = v13;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v15 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  uint64_t v22 = 0;
  uint64_t v23 = v15;
  uint64_t v16 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v23, &v22)) {
    uint64_t v16 = *(unsigned int *)(v22 + 12);
  }
  unsigned int v17 = *(_DWORD *)(a3 + 8);
  if (v17 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v17) = v16;
  unsigned int v18 = *(_DWORD *)(a3 + 12);
  unsigned int v19 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v19;
  uint64_t v20 = *(unsigned int *)(a2 + 24);
  if (v19 >= v18) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v19) = v20;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x28u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC210148(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = (*(unsigned char *)(a2 + 1) & 0x7F) == 1;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v9 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  uint64_t v29 = 0;
  uint64_t v30 = v9;
  uint64_t v10 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v30, &v29)) {
    uint64_t v10 = *(unsigned int *)(v29 + 12);
  }
  unsigned int v11 = *(_DWORD *)(a3 + 8);
  if (v11 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v11) = v10;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v12 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  uint64_t v29 = 0;
  uint64_t v30 = v12;
  uint64_t v13 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v30, &v29)) {
    uint64_t v13 = *(unsigned int *)(v29 + 12);
  }
  unsigned int v14 = *(_DWORD *)(a3 + 8);
  if (v14 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v14) = v13;
  unsigned int v15 = *(_DWORD *)(a3 + 12);
  unsigned int v16 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v16;
  if (v16 >= v15) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v16) = *(unsigned int *)(a2 + 24);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v17 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  uint64_t v29 = 0;
  uint64_t v30 = v17;
  uint64_t v18 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v30, &v29)) {
    uint64_t v18 = *(unsigned int *)(v29 + 12);
  }
  unsigned int v19 = *(_DWORD *)(a3 + 8);
  if (v19 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v19) = v18;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v20 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  uint64_t v29 = 0;
  uint64_t v30 = v20;
  uint64_t v21 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v30, &v29)) {
    uint64_t v21 = *(unsigned int *)(v29 + 12);
  }
  unsigned int v22 = *(_DWORD *)(a3 + 8);
  if (v22 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v22) = v21;
  unsigned int v23 = *(_DWORD *)(a3 + 12);
  unsigned int v24 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v24;
  if (v24 >= v23) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v24) = *(unsigned int *)(a2 + 28);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v25 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  uint64_t v29 = 0;
  uint64_t v30 = v25;
  uint64_t v26 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v30, &v29)) {
    uint64_t v26 = *(unsigned int *)(v29 + 12);
  }
  unsigned int v27 = *(_DWORD *)(a3 + 8);
  if (v27 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v27) = v26;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x1Eu, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC210488(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = (*(unsigned char *)(a2 + 1) & 0x7F) == 1;
  unsigned int v9 = *(_DWORD *)(a3 + 12);
  unsigned int v10 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v10;
  if (v10 >= v9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v10) = *(unsigned __int16 *)(a2 + 2);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v11 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  uint64_t v29 = 0;
  uint64_t v30 = v11;
  uint64_t v12 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v30, &v29)) {
    uint64_t v12 = *(unsigned int *)(v29 + 12);
  }
  unsigned int v13 = *(_DWORD *)(a3 + 8);
  if (v13 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v13) = v12;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v14 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  uint64_t v29 = 0;
  uint64_t v30 = v14;
  uint64_t v15 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v30, &v29)) {
    uint64_t v15 = *(unsigned int *)(v29 + 12);
  }
  unsigned int v16 = *(_DWORD *)(a3 + 8);
  if (v16 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v16) = v15;
  unsigned int v17 = *(_DWORD *)(a3 + 12);
  unsigned int v18 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v18;
  if (v18 >= v17) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v18) = *(unsigned int *)(a2 + 24);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v19 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  uint64_t v29 = 0;
  uint64_t v30 = v19;
  uint64_t v20 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v30, &v29)) {
    uint64_t v20 = *(unsigned int *)(v29 + 12);
  }
  unsigned int v21 = *(_DWORD *)(a3 + 8);
  if (v21 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v21) = v20;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v22 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  uint64_t v29 = 0;
  uint64_t v30 = v22;
  uint64_t v23 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v30, &v29)) {
    uint64_t v23 = *(unsigned int *)(v29 + 12);
  }
  unsigned int v24 = *(_DWORD *)(a3 + 8);
  if (v24 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v24) = v23;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v25 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  uint64_t v29 = 0;
  uint64_t v30 = v25;
  uint64_t v26 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v30, &v29)) {
    uint64_t v26 = *(unsigned int *)(v29 + 12);
  }
  unsigned int v27 = *(_DWORD *)(a3 + 8);
  if (v27 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v27) = v26;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x1Fu, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC2107C8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = (*(unsigned char *)(a2 + 1) & 0x7F) == 1;
  unsigned int v9 = *(_DWORD *)(a3 + 12);
  unsigned int v10 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v10;
  if (v10 >= v9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v10) = *(unsigned __int16 *)(a2 + 2);
  unsigned int v11 = *(_DWORD *)(a3 + 12);
  unsigned int v12 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v12;
  if (v12 >= v11) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v12) = *(unsigned int *)(a2 + 24);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v13 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  uint64_t v20 = 0;
  uint64_t v21 = v13;
  uint64_t v14 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v21, &v20)) {
    uint64_t v14 = *(unsigned int *)(v20 + 12);
  }
  unsigned int v15 = *(_DWORD *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v15) = v14;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v16 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  uint64_t v20 = 0;
  uint64_t v21 = v16;
  uint64_t v17 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v21, &v20)) {
    uint64_t v17 = *(unsigned int *)(v20 + 12);
  }
  unsigned int v18 = *(_DWORD *)(a3 + 8);
  if (v18 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v18) = v17;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x21u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC2109C4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = (*(unsigned char *)(a2 + 1) & 0x7F) == 1;
  unsigned int v9 = *(_DWORD *)(a3 + 12);
  unsigned int v10 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v10;
  if (v10 >= v9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v10) = *(unsigned __int16 *)(a2 + 2);
  unsigned int v11 = *(_DWORD *)(a3 + 12);
  unsigned int v12 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v12;
  if (v12 >= v11) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v12) = *(unsigned int *)(a2 + 24);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v13 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  uint64_t v20 = 0;
  uint64_t v21 = v13;
  uint64_t v14 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v21, &v20)) {
    uint64_t v14 = *(unsigned int *)(v20 + 12);
  }
  unsigned int v15 = *(_DWORD *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v15) = v14;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v16 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  uint64_t v20 = 0;
  uint64_t v21 = v16;
  uint64_t v17 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v21, &v20)) {
    uint64_t v17 = *(unsigned int *)(v20 + 12);
  }
  unsigned int v18 = *(_DWORD *)(a3 + 8);
  if (v18 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v18) = v17;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x22u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC210BC0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = (*(unsigned char *)(a2 + 1) & 0x7F) == 1;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v9 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  uint64_t v25 = 0;
  uint64_t v26 = v9;
  uint64_t v10 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v26, &v25)) {
    uint64_t v10 = *(unsigned int *)(v25 + 12);
  }
  unsigned int v11 = *(_DWORD *)(a3 + 8);
  if (v11 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v11) = v10;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v12 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  uint64_t v25 = 0;
  uint64_t v26 = v12;
  uint64_t v13 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v26, &v25)) {
    uint64_t v13 = *(unsigned int *)(v25 + 12);
  }
  unsigned int v14 = *(_DWORD *)(a3 + 8);
  if (v14 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v14) = v13;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v15 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  uint64_t v25 = 0;
  uint64_t v26 = v15;
  uint64_t v16 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v26, &v25)) {
    uint64_t v16 = *(unsigned int *)(v25 + 12);
  }
  unsigned int v17 = *(_DWORD *)(a3 + 8);
  if (v17 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v17) = v16;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v18 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  uint64_t v25 = 0;
  uint64_t v26 = v18;
  uint64_t v19 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v26, &v25)) {
    uint64_t v19 = *(unsigned int *)(v25 + 12);
  }
  unsigned int v20 = *(_DWORD *)(a3 + 8);
  if (v20 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v20) = v19;
  unsigned int v21 = *(_DWORD *)(a3 + 12);
  unsigned int v22 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v22;
  uint64_t v23 = *(unsigned int *)(a2 + 24);
  if (v22 >= v21) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v22) = v23;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x2Cu, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC210E58(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v7 = *(_DWORD *)(a2 + 32);
  if (*(_DWORD *)(a3 + 12) < v7) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v7)
  {
    unsigned int v8 = *(uint64_t **)(a2 + 24);
    uint64_t v9 = 8 * v7;
    do
    {
      uint64_t v10 = *v8;
      uint64_t v14 = 0;
      uint64_t v15 = v10;
      if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v15, &v14)) {
        unsigned int v11 = *(_DWORD *)(v14 + 12) - 1;
      }
      else {
        unsigned int v11 = -1;
      }
      unint64_t v12 = *(unsigned int *)(a3 + 8);
      if (v12 >= *(unsigned int *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a3 + 8 * v12) = v11;
      ++*(_DWORD *)(a3 + 8);
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x2Eu, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC210F84(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = (*(unsigned char *)(a2 + 1) & 0x7F) == 1;
  unsigned int v9 = *(_DWORD *)(a3 + 12);
  unsigned int v10 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v10;
  if (v10 >= v9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v10) = *(unsigned __int16 *)(a2 + 2);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v11 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  uint64_t v31 = 0;
  uint64_t v32 = v11;
  uint64_t v12 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v32, &v31)) {
    uint64_t v12 = *(unsigned int *)(v31 + 12);
  }
  unsigned int v13 = *(_DWORD *)(a3 + 8);
  if (v13 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v13) = v12;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v14 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  uint64_t v31 = 0;
  uint64_t v32 = v14;
  uint64_t v15 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v32, &v31)) {
    uint64_t v15 = *(unsigned int *)(v31 + 12);
  }
  unsigned int v16 = *(_DWORD *)(a3 + 8);
  if (v16 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v16) = v15;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v17 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  uint64_t v31 = 0;
  uint64_t v32 = v17;
  uint64_t v18 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v32, &v31)) {
    uint64_t v18 = *(unsigned int *)(v31 + 12);
  }
  unsigned int v19 = *(_DWORD *)(a3 + 8);
  if (v19 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v19) = v18;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v20 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40);
  uint64_t v31 = 0;
  uint64_t v32 = v20;
  uint64_t v21 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v32, &v31)) {
    uint64_t v21 = *(unsigned int *)(v31 + 12);
  }
  unsigned int v22 = *(_DWORD *)(a3 + 8);
  if (v22 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v22) = v21;
  unsigned int v23 = *(_DWORD *)(a3 + 12);
  unsigned int v24 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v24;
  if (v24 >= v23) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v24) = *(void *)(a2 + 32);
  unsigned int v25 = *(_DWORD *)(a3 + 12);
  unsigned int v26 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v26;
  if (v26 >= v25) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v26) = *(unsigned int *)(a2 + 48);
  unsigned int v27 = *(_DWORD *)(a3 + 12);
  unsigned int v28 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v28;
  uint64_t v29 = *(unsigned int *)(a2 + 52);
  if (v28 >= v27) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v28) = v29;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x29u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC2112D0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v8) = (*(unsigned char *)(a2 + 1) & 0x7F) == 1;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v9 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  uint64_t v22 = 0;
  uint64_t v23 = v9;
  uint64_t v10 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v23, &v22)) {
    uint64_t v10 = *(unsigned int *)(v22 + 12);
  }
  unsigned int v11 = *(_DWORD *)(a3 + 8);
  if (v11 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v11) = v10;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v12 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  uint64_t v22 = 0;
  uint64_t v23 = v12;
  uint64_t v13 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v23, &v22)) {
    uint64_t v13 = *(unsigned int *)(v22 + 12);
  }
  unsigned int v14 = *(_DWORD *)(a3 + 8);
  if (v14 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v14) = v13;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v15 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  uint64_t v22 = 0;
  uint64_t v23 = v15;
  uint64_t v16 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v23, &v22)) {
    uint64_t v16 = *(unsigned int *)(v22 + 12);
  }
  unsigned int v17 = *(_DWORD *)(a3 + 8);
  if (v17 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v17) = v16;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v18 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  uint64_t v22 = 0;
  uint64_t v23 = v18;
  uint64_t v19 = 0;
  if (sub_1CBFFBC50((uint64_t *)(a1 + 240), &v23, &v22)) {
    uint64_t v19 = *(unsigned int *)(v22 + 12);
  }
  unsigned int v20 = *(_DWORD *)(a3 + 8);
  if (v20 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v20) = v19;
  ++*(_DWORD *)(a3 + 8);
  uint64_t result = sub_1CC21152C(*(llvm::raw_ostream **)a1, 0x2Du, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1CC21152C(llvm::raw_ostream *result, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5 = (uint64_t)result;
  if (a4)
  {
    uint64_t v19 = *(void *)a3;
    uint64_t v20 = a2 | 0x100000000;
    uint64_t v22 = *(unsigned int *)(a3 + 8);
    return sub_1CC206E90(result, a4, v19, v22, 0, 0, v20);
  }
  else
  {
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    int v7 = *((_DWORD *)result + 8);
    int v8 = *((_DWORD *)result + 6);
    unsigned int v9 = *((_DWORD *)result + 7) | (3 << v8);
    *((_DWORD *)result + 7) = v9;
    unsigned int v10 = v8 + v7;
    if (v10 >= 0x20)
    {
      uint64_t v23 = *(void **)result;
      uint64_t v24 = *(void *)(*(void *)result + 8);
      if (*(void *)(*(void *)result + 16) < (unint64_t)(v24 + 4)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(_DWORD *)(*v23 + v24) = v9;
      v23[1] += 4;
      uint64_t result = (llvm::raw_ostream *)*((void *)result + 1);
      if (result)
      {
        size_t v39 = *(void *)(*(void *)v5 + 8);
        if (v39 >= *(void *)(v5 + 16))
        {
          uint64_t v58 = v6;
          unsigned int v40 = a2;
          int v41 = v7;
          uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v5, v39);
          int v7 = v41;
          uint64_t v6 = v58;
          a2 = v40;
          *(void *)(*(void *)v5 + 8) = 0;
        }
      }
      int v25 = *(_DWORD *)(v5 + 24);
      if (v25) {
        unsigned int v9 = 3u >> -(char)v25;
      }
      else {
        unsigned int v9 = 0;
      }
      unsigned int v10 = (v25 + v7) & 0x1F;
    }
    *(_DWORD *)(v5 + 24) = v10;
    if (a2 >= 0x20)
    {
      do
      {
        unsigned int v51 = a2 & 0x1F | 0x20;
        v9 |= v51 << v10;
        *(_DWORD *)(v5 + 28) = v9;
        if (v10 >= 0x1A)
        {
          unsigned int v52 = *(const char ***)v5;
          uint64_t v53 = *(void *)(*(void *)v5 + 8);
          if (*(void *)(*(void *)v5 + 16) < (unint64_t)(v53 + 4)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(_DWORD *)&(*v52)[v53] = v9;
          v52[1] += 4;
          uint64_t result = *(llvm::raw_ostream **)(v5 + 8);
          if (result)
          {
            size_t v55 = *(void *)(*(void *)v5 + 8);
            if (v55 >= *(void *)(v5 + 16))
            {
              uint64_t v60 = v6;
              unsigned int v56 = a2;
              int v57 = a2 & 0x1F | 0x20;
              uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v5, v55);
              unsigned int v51 = v57;
              uint64_t v6 = v60;
              a2 = v56;
              *(void *)(*(void *)v5 + 8) = 0;
            }
          }
          int v54 = *(_DWORD *)(v5 + 24);
          if (v54) {
            unsigned int v9 = v51 >> -(char)v54;
          }
          else {
            unsigned int v9 = 0;
          }
          *(_DWORD *)(v5 + 28) = v9;
          unsigned int v10 = (v54 + 6) & 0x1F;
        }
        else
        {
          v10 += 6;
        }
        *(_DWORD *)(v5 + 24) = v10;
        unsigned int v11 = a2 >> 5;
        BOOL v35 = a2 > 0x3FF;
        a2 >>= 5;
      }
      while (v35);
    }
    else
    {
      unsigned int v11 = a2;
    }
    int v12 = (v11 << v10) | v9;
    *(_DWORD *)(v5 + 28) = v12;
    if (v10 >= 0x1A)
    {
      unsigned int v26 = *(const char ***)v5;
      uint64_t v27 = *(void *)(*(void *)v5 + 8);
      if (*(void *)(*(void *)v5 + 16) < (unint64_t)(v27 + 4)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(_DWORD *)&(*v26)[v27] = v12;
      v26[1] += 4;
      uint64_t result = *(llvm::raw_ostream **)(v5 + 8);
      if (result)
      {
        size_t v42 = *(void *)(*(void *)v5 + 8);
        if (v42 >= *(void *)(v5 + 16))
        {
          uint64_t v43 = v6;
          unsigned int v44 = v11;
          uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v5, v42);
          unsigned int v11 = v44;
          uint64_t v6 = v43;
          *(void *)(*(void *)v5 + 8) = 0;
        }
      }
      int v28 = *(_DWORD *)(v5 + 24);
      if (v28) {
        int v12 = v11 >> -(char)v28;
      }
      else {
        int v12 = 0;
      }
      unsigned int v13 = (v28 + 6) & 0x1F;
    }
    else
    {
      unsigned int v13 = v10 + 6;
    }
    *(_DWORD *)(v5 + 24) = v13;
    if (v6 >= 0x20)
    {
      unsigned int v33 = v6;
      do
      {
        unsigned int v34 = v33 & 0x1F | 0x20;
        v12 |= v34 << v13;
        *(_DWORD *)(v5 + 28) = v12;
        if (v13 >= 0x1A)
        {
          unsigned int v36 = *(const char ***)v5;
          uint64_t v37 = *(void *)(*(void *)v5 + 8);
          if (*(void *)(*(void *)v5 + 16) < (unint64_t)(v37 + 4)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(_DWORD *)&(*v36)[v37] = v12;
          v36[1] += 4;
          uint64_t result = *(llvm::raw_ostream **)(v5 + 8);
          if (result)
          {
            size_t v48 = *(void *)(*(void *)v5 + 8);
            if (v48 >= *(void *)(v5 + 16))
            {
              uint64_t v59 = v6;
              unsigned int v49 = v33;
              int v50 = v33 & 0x1F | 0x20;
              uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v5, v48);
              unsigned int v34 = v50;
              unsigned int v33 = v49;
              uint64_t v6 = v59;
              *(void *)(*(void *)v5 + 8) = 0;
            }
          }
          int v38 = *(_DWORD *)(v5 + 24);
          if (v38) {
            int v12 = v34 >> -(char)v38;
          }
          else {
            int v12 = 0;
          }
          *(_DWORD *)(v5 + 28) = v12;
          unsigned int v13 = (v38 + 6) & 0x1F;
        }
        else
        {
          v13 += 6;
        }
        *(_DWORD *)(v5 + 24) = v13;
        unsigned int v14 = v33 >> 5;
        BOOL v35 = v33 > 0x3FF;
        v33 >>= 5;
      }
      while (v35);
    }
    else
    {
      unsigned int v14 = v6;
    }
    int v15 = (v14 << v13) | v12;
    *(_DWORD *)(v5 + 28) = v15;
    if (v13 >= 0x1A)
    {
      uint64_t v29 = *(const char ***)v5;
      uint64_t v30 = *(void *)(*(void *)v5 + 8);
      if (*(void *)(*(void *)v5 + 16) < (unint64_t)(v30 + 4)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(_DWORD *)&(*v29)[v30] = v15;
      v29[1] += 4;
      uint64_t result = *(llvm::raw_ostream **)(v5 + 8);
      if (result)
      {
        size_t v45 = *(void *)(*(void *)v5 + 8);
        if (v45 >= *(void *)(v5 + 16))
        {
          uint64_t v46 = v6;
          unsigned int v47 = v14;
          uint64_t result = llvm::raw_ostream::write(result, **(const char ***)v5, v45);
          unsigned int v14 = v47;
          uint64_t v6 = v46;
          *(void *)(*(void *)v5 + 8) = 0;
        }
      }
      int v31 = *(_DWORD *)(v5 + 24);
      unsigned int v32 = v14 >> -(char)v31;
      if (!v31) {
        unsigned int v32 = 0;
      }
      *(_DWORD *)(v5 + 28) = v32;
      int v16 = ((_BYTE)v31 + 6) & 0x1F;
    }
    else
    {
      int v16 = v13 + 6;
    }
    *(_DWORD *)(v5 + 24) = v16;
    if (v6)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 8 * v6;
      do
      {
        uint64_t result = (llvm::raw_ostream *)sub_1CC202E58(v5, *(void *)(*(void *)a3 + v17), 6);
        v17 += 8;
      }
      while (v18 != v17);
    }
  }
  return result;
}

uint64_t sub_1CC211AA8(uint64_t result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v3 = a3 - a2;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (a3 - a2 + v4 > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    uint64_t v5 = (void *)(*(void *)result + 8 * v4);
    do
    {
      unsigned int v6 = *a2++;
      *v5++ = v6;
    }
    while (a2 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + v3;
  return result;
}

void sub_1CC211B34(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  char v16[8] = *MEMORY[0x1E4F143B8];
  unsigned int v14 = v16;
  uint64_t v15 = 0x400000000;
  llvm::Value::getAllMetadata(a3, (uint64_t)&v14);
  uint64_t v5 = (char *)v14;
  if (v15)
  {
    unsigned int v6 = (uint64_t *)(a1 + 240);
    unsigned int v7 = *(_DWORD *)(a2 + 8);
    int v8 = (char *)v14 + 16 * v15;
    do
    {
      if (v7 >= *(_DWORD *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a2 + 8 * v7) = *(unsigned int *)v5;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v9 = *((void *)v5 + 1);
      uint64_t v12 = 0;
      uint64_t v13 = v9;
      if (sub_1CBFFBC50(v6, &v13, &v12)) {
        unsigned int v10 = *(_DWORD *)(v12 + 12) - 1;
      }
      else {
        unsigned int v10 = -1;
      }
      unint64_t v11 = *(unsigned int *)(a2 + 8);
      if (v11 >= *(unsigned int *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a2 + 8 * v11) = v10;
      unsigned int v7 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v7;
      v5 += 16;
    }
    while (v5 != v8);
    uint64_t v5 = (char *)v14;
  }
  if (v5 != (char *)v16) {
    free(v5);
  }
}

void sub_1CC211CC0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  v473[128] = *MEMORY[0x1E4F143B8];
  int v471 = (void *)a2;
  int v8 = *(_DWORD *)(a1 + 440);
  *(_DWORD *)(a1 + 440) = v8 + 1;
  *((_DWORD *)sub_1CC21C478(a1 + 416, (uint64_t *)&v471) + 2) = v8;
  int v9 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v10 = a1 + 24;
  unsigned int v11 = 15;
  unsigned int v12 = 12;
  uint64_t v468 = a1;
  switch(*(unsigned char *)(a2 + 16))
  {
    case 0x1D:
      int v44 = *(_DWORD *)(a2 + 20);
      uint64_t v45 = v44 & 0x7FFFFFF;
      if ((v44 & 0x7FFFFFF) == 0)
      {
        unsigned int v12 = 10;
        unsigned int v11 = 10;
        goto LABEL_564;
      }
      if (v45 == 1)
      {
        if ((v44 & 0x40000000) != 0) {
          uint64_t v46 = *(uint64_t ***)(a2 - 8);
        }
        else {
          uint64_t v46 = (uint64_t **)(a2 - 32);
        }
        unsigned int v11 = 10;
        if (!sub_1CC2150F4(a1, *v46, a3, a4))
        {
          unsigned int v12 = 11;
          goto LABEL_564;
        }
      }
      else
      {
        uint64_t v289 = 0;
        unsigned int v11 = 10;
        do
        {
          int v290 = *(_DWORD *)(a2 + 20);
          if ((v290 & 0x40000000) != 0) {
            uint64_t v291 = *(void *)(a2 - 8);
          }
          else {
            uint64_t v291 = a2 - 32 * (v290 & 0x7FFFFFF);
          }
          sub_1CC2150F4(a1, *(uint64_t **)(v291 + v289), a3, a4);
          v289 += 32;
          --v45;
        }
        while (v45);
      }
      goto LABEL_524;
    case 0x1E:
      int ValueID = llvm::ValueEnumerator::getValueID(a1 + 24, *(void *)(a2 - 32));
      unsigned int v48 = *(_DWORD *)(a4 + 8);
      if (v48 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v48) = ValueID;
      ++*(_DWORD *)(a4 + 8);
      if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 3)
      {
        int v49 = llvm::ValueEnumerator::getValueID(a1 + 24, *(void *)(a2 - 64));
        unsigned int v50 = *(_DWORD *)(a4 + 8);
        if (v50 >= *(_DWORD *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a4 + 4 * v50) = v49;
        ++*(_DWORD *)(a4 + 8);
        sub_1CC215208(a1, *(void *)(a2 - 96), a3, a4);
      }
      unsigned int v11 = 11;
      goto LABEL_524;
    case 0x1F:
      int v63 = *(_DWORD *)(a2 + 20);
      if ((v63 & 0x40000000) != 0) {
        unsigned int v64 = *(void ****)(a2 - 8);
      }
      else {
        unsigned int v64 = (void ***)(a2 - 32 * (v63 & 0x7FFFFFF));
      }
      unsigned int v212 = **v64;
      uint64_t v470 = 0;
      int v471 = v212;
      if (sub_1CBFA3AF4((uint64_t *)(a1 + 48), &v471, &v470)) {
        uint64_t v213 = v470;
      }
      else {
        uint64_t v213 = *(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      }
      int v214 = *(_DWORD *)(v213 + 8) - 1;
      unsigned int v215 = *(_DWORD *)(a4 + 8);
      if (v215 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v215) = v214;
      ++*(_DWORD *)(a4 + 8);
      int v216 = *(_DWORD *)(a2 + 20);
      if ((v216 & 0x40000000) != 0) {
        unsigned int v217 = *(uint64_t **)(a2 - 8);
      }
      else {
        unsigned int v217 = (uint64_t *)(a2 - 32 * (v216 & 0x7FFFFFF));
      }
      sub_1CC215208(a1, *v217, a3, a4);
      int v218 = *(_DWORD *)(a2 + 20);
      if ((v218 & 0x40000000) != 0) {
        uint64_t v219 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v219 = a2 - 32 * (v218 & 0x7FFFFFF);
      }
      int v220 = llvm::ValueEnumerator::getValueID(a1 + 24, *(void *)(v219 + 32));
      unsigned int v221 = *(_DWORD *)(a4 + 8);
      if (v221 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v221) = v220;
      ++*(_DWORD *)(a4 + 8);
      if (((*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFF) == 1)
      {
        unsigned int v11 = 12;
      }
      else
      {
        uint64_t v222 = 0;
        uint64_t v223 = 2 * (((*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFFu) - 1);
        unsigned int v11 = 12;
        do
        {
          int v224 = *(_DWORD *)(a2 + 20);
          if ((v224 & 0x40000000) != 0) {
            uint64_t v225 = *(void *)(a2 - 8);
          }
          else {
            uint64_t v225 = a2 - 32 * (v224 & 0x7FFFFFF);
          }
          int v226 = llvm::ValueEnumerator::getValueID(v10, *(void *)(v225 + 32 * ((v222 + 2) & 0xFFFFFFFE)));
          unint64_t v227 = *(unsigned int *)(a4 + 8);
          if (v227 >= *(unsigned int *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a4 + 4 * v227) = v226;
          ++*(_DWORD *)(a4 + 8);
          int v228 = *(_DWORD *)(a2 + 20);
          if ((v228 & 0x40000000) != 0) {
            uint64_t v229 = *(void *)(a2 - 8);
          }
          else {
            uint64_t v229 = a2 - 32 * (v228 & 0x7FFFFFF);
          }
          uint64_t v230 = (v222 + 3);
          if (v222 == 0x1FFFFFFFCLL) {
            uint64_t v230 = 1;
          }
          int v231 = llvm::ValueEnumerator::getValueID(v10, *(void *)(v229 + 32 * v230));
          unint64_t v232 = *(unsigned int *)(a4 + 8);
          if (v232 >= *(unsigned int *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a4 + 4 * v232) = v231;
          ++*(_DWORD *)(a4 + 8);
          v222 += 2;
        }
        while (v223 != v222);
      }
      goto LABEL_524;
    case 0x20:
      int v51 = *(_DWORD *)(a2 + 20);
      if ((v51 & 0x40000000) != 0) {
        unsigned int v52 = *(void ****)(a2 - 8);
      }
      else {
        unsigned int v52 = (void ***)(a2 - 32 * (v51 & 0x7FFFFFF));
      }
      int v186 = **v52;
      uint64_t v470 = 0;
      int v471 = v186;
      if (sub_1CBFA3AF4((uint64_t *)(a1 + 48), &v471, &v470)) {
        uint64_t v187 = v470;
      }
      else {
        uint64_t v187 = *(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      }
      int v188 = *(_DWORD *)(v187 + 8) - 1;
      unsigned int v189 = *(_DWORD *)(a4 + 8);
      if (v189 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v189) = v188;
      ++*(_DWORD *)(a4 + 8);
      int v190 = *(_DWORD *)(a2 + 20);
      if ((v190 & 0x40000000) != 0) {
        unsigned int v191 = *(uint64_t **)(a2 - 8);
      }
      else {
        unsigned int v191 = (uint64_t *)(a2 - 32 * (v190 & 0x7FFFFFF));
      }
      sub_1CC215208(a1, *v191, a3, a4);
      int v192 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      int v193 = v192 - 1;
      if (v192 == 1)
      {
        unsigned int v11 = 31;
      }
      else
      {
        uint64_t v194 = 32;
        unsigned int v11 = 31;
        do
        {
          int v195 = *(_DWORD *)(a2 + 20);
          if ((v195 & 0x40000000) != 0) {
            uint64_t v196 = *(void *)(a2 - 8);
          }
          else {
            uint64_t v196 = a2 - 32 * (v195 & 0x7FFFFFF);
          }
          int v197 = llvm::ValueEnumerator::getValueID(a1 + 24, *(void *)(v196 + v194));
          unint64_t v198 = *(unsigned int *)(a4 + 8);
          if (v198 >= *(unsigned int *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a4 + 4 * v198) = v197;
          ++*(_DWORD *)(a4 + 8);
          v194 += 32;
          --v193;
        }
        while (v193);
      }
      goto LABEL_524;
    case 0x21:
      uint64_t v59 = *(uint64_t **)(a2 - 32);
      uint64_t v60 = *(_DWORD **)(a2 + 72);
      int v61 = *(_DWORD *)(a2 + 20);
      if (v61 < 0 && (*(void *)(a2 - 32 * (v61 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) != 0) {
        sub_1CC215280((llvm::raw_ostream **)a1, a2, a3);
      }
      uint64_t v470 = *(void *)(a2 + 64);
      if (v470)
      {
        int v471 = 0;
        if (sub_1CC208488((uint64_t *)(a1 + 344), &v470, &v471)) {
          uint64_t v62 = v471;
        }
        else {
          uint64_t v62 = (_DWORD *)(*(void *)(a1 + 344) + 16 * *(unsigned int *)(a1 + 360));
        }
        int v287 = v62[2];
      }
      else
      {
        int v287 = 0;
      }
      unsigned int v316 = *(_DWORD *)(a4 + 8);
      if (v316 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v316) = v287;
      unsigned int v317 = *(_DWORD *)(a4 + 12);
      unsigned int v318 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v318;
      if (v318 >= v317) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v318) = (*(unsigned __int16 *)(a2 + 18) >> 2) & 0x3FF | 0x2000;
      ++*(_DWORD *)(a4 + 8);
      int v319 = llvm::ValueEnumerator::getValueID(a1 + 24, *(void *)(a2 - 96));
      unsigned int v320 = *(_DWORD *)(a4 + 8);
      if (v320 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v320) = v319;
      ++*(_DWORD *)(a4 + 8);
      int v321 = llvm::ValueEnumerator::getValueID(a1 + 24, *(void *)(a2 - 64));
      unsigned int v322 = *(_DWORD *)(a4 + 8);
      if (v322 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v322) = v321;
      ++*(_DWORD *)(a4 + 8);
      uint64_t v470 = 0;
      int v471 = v60;
      if (sub_1CBFA3AF4((uint64_t *)(a1 + 48), &v471, &v470)) {
        uint64_t v323 = v470;
      }
      else {
        uint64_t v323 = *(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      }
      int v324 = *(_DWORD *)(v323 + 8) - 1;
      unsigned int v325 = *(_DWORD *)(a4 + 8);
      if (v325 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v325) = v324;
      ++*(_DWORD *)(a4 + 8);
      sub_1CC2150F4(a1, v59, a3, a4);
      if (v60[3] != 1)
      {
        uint64_t v326 = 0;
        uint64_t v327 = 32 * (v60[3] - 1);
        do
        {
          int v328 = *(_DWORD *)(a2 + 20);
          if ((v328 & 0x40000000) != 0) {
            uint64_t v329 = *(void *)(a2 - 8);
          }
          else {
            uint64_t v329 = a2 - 32 * (v328 & 0x7FFFFFF);
          }
          sub_1CC215208(a1, *(void *)(v329 + v326), a3, a4);
          v326 += 32;
        }
        while (v327 != v326);
      }
      if (v60[2] <= 0xFFu) {
        goto LABEL_412;
      }
      int v330 = *(unsigned __int8 *)(a2 + 16);
      if (v330 == 84) {
        uint64_t v331 = 0;
      }
      else {
        uint64_t v331 = v330 == 39 ? (*(_DWORD *)(a2 + 80) + 1) : 2;
      }
      unsigned int v332 = v60[3] - 1;
      int v333 = *(_DWORD *)(a2 + 20);
      if (v333 < 0
        && (v461 = a2 - 32 * (v333 & 0x7FFFFFF), uint64_t v462 = *(void *)(v461 - 8), (v462 & 0xFFFFFFFF0) != 0))
      {
        uint64_t v335 = -(uint64_t)(v333 & 0x7FFFFFF);
        int v334 = *(_DWORD *)(v461 - 12) - *(_DWORD *)(v461 - v462);
      }
      else
      {
        int v334 = 0;
        uint64_t v335 = -(uint64_t)(v333 & 0x7FFFFFF);
      }
      unint64_t v336 = (-32 * v331 + 32 * (unint64_t)-v334 - 32 * v335 - 32) >> 5;
      if (v332 == v336)
      {
LABEL_412:
        unsigned int v11 = 13;
      }
      else
      {
        unsigned int v11 = 13;
        do
        {
          int v369 = *(_DWORD *)(a2 + 20);
          if ((v369 & 0x40000000) != 0) {
            uint64_t v370 = *(void *)(a2 - 8);
          }
          else {
            uint64_t v370 = a2 - 32 * (v369 & 0x7FFFFFF);
          }
          sub_1CC2150F4(a1, *(uint64_t **)(v370 + 32 * v332++), a3, a4);
        }
        while (v336 != v332);
      }
      goto LABEL_524;
    case 0x22:
      int v70 = *(_DWORD *)(a2 + 20);
      if ((v70 & 0x40000000) != 0) {
        uint64_t v71 = *(uint64_t ***)(a2 - 8);
      }
      else {
        uint64_t v71 = (uint64_t **)(a2 - 32 * (v70 & 0x7FFFFFF));
      }
      sub_1CC2150F4(a1, *v71, a3, a4);
      unsigned int v11 = 39;
      goto LABEL_524;
    case 0x23:
      goto LABEL_564;
    case 0x24:
      sub_1CC215208(a1, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), a3, a4);
      if (*(_WORD *)(a2 + 18))
      {
        int v72 = llvm::ValueEnumerator::getValueID(a1 + 24, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
        unsigned int v73 = *(_DWORD *)(a4 + 8);
        if (v73 >= *(_DWORD *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a4 + 4 * v73) = v72;
        ++*(_DWORD *)(a4 + 8);
      }
      unsigned int v11 = 48;
      goto LABEL_524;
    case 0x25:
      sub_1CC215208(a1, *(void *)(a2 - 64), a3, a4);
      int v28 = llvm::ValueEnumerator::getValueID(a1 + 24, *(void *)(a2 - 32));
      unsigned int v29 = *(_DWORD *)(a4 + 8);
      if (v29 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v29) = v28;
      ++*(_DWORD *)(a4 + 8);
      unsigned int v11 = 49;
      goto LABEL_524;
    case 0x26:
      int v74 = *(_DWORD *)(a2 + 20);
      if ((v74 & 0x40000000) != 0) {
        uint64_t v75 = *(uint64_t **)(a2 - 8);
      }
      else {
        uint64_t v75 = (uint64_t *)(a2 - 32 * (v74 & 0x7FFFFFF));
      }
      sub_1CC215208(a1, *v75, a3, a4);
      if (*(_WORD *)(a2 + 18)) {
        int v251 = -2;
      }
      else {
        int v251 = -1;
      }
      int v252 = v251 + (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
      unsigned int v253 = *(_DWORD *)(a4 + 8);
      if (v253 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v253) = v252;
      ++*(_DWORD *)(a4 + 8);
      int v254 = *(_DWORD *)(a2 + 20);
      if ((v254 & 0x40000000) != 0)
      {
        uint64_t v256 = *(void *)(a2 - 8);
        uint64_t v255 = v254 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v255 = v254 & 0x7FFFFFF;
        uint64_t v256 = a2 - 32 * v255;
      }
      int v257 = *(_WORD *)(a2 + 18) & 1;
      uint64_t v258 = 1;
      if (*(_WORD *)(a2 + 18)) {
        uint64_t v258 = 2;
      }
      if (v258 != v255)
      {
        int v259 = (uint64_t *)(v256 + 32 * v258);
        uint64_t v260 = 32 * v255 - 32 * v258;
        do
        {
          int v261 = llvm::ValueEnumerator::getValueID(a1 + 24, *v259);
          unint64_t v262 = *(unsigned int *)(a4 + 8);
          if (v262 >= *(unsigned int *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a4 + 4 * v262) = v261;
          ++*(_DWORD *)(a4 + 8);
          v259 += 4;
          v260 -= 32;
        }
        while (v260);
        int v257 = *(_WORD *)(a2 + 18) & 1;
      }
      if (v257)
      {
        int v263 = *(_DWORD *)(a2 + 20);
        if ((v263 & 0x40000000) != 0) {
          uint64_t v264 = *(void *)(a2 - 8);
        }
        else {
          uint64_t v264 = a2 - 32 * (v263 & 0x7FFFFFF);
        }
        int v337 = llvm::ValueEnumerator::getValueID(a1 + 24, *(void *)(v264 + 32));
        unsigned int v338 = *(_DWORD *)(a4 + 8);
        if (v338 >= *(_DWORD *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a4 + 4 * v338) = v337;
        ++*(_DWORD *)(a4 + 8);
      }
      unsigned int v11 = 52;
      goto LABEL_524;
    case 0x27:
      uint64_t v33 = a2 - 32;
      unsigned int v32 = *(uint64_t **)(a2 - 32);
      unsigned int v34 = *(_DWORD **)(a2 + 72);
      int v35 = *(_DWORD *)(a2 + 20);
      if (v35 < 0 && (*(void *)(a2 - 32 * (v35 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) != 0) {
        sub_1CC215280((llvm::raw_ostream **)v468, a2, a3);
      }
      uint64_t v470 = *(void *)(a2 + 64);
      if (v470)
      {
        int v471 = 0;
        if (sub_1CC208488((uint64_t *)(v468 + 344), &v470, &v471)) {
          unsigned int v36 = v471;
        }
        else {
          unsigned int v36 = (_DWORD *)(*(void *)(v468 + 344) + 16 * *(unsigned int *)(v468 + 360));
        }
        int v286 = v36[2];
      }
      else
      {
        int v286 = 0;
      }
      unsigned int v292 = *(_DWORD *)(a4 + 8);
      if (v292 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v292) = v286;
      unsigned int v293 = *(_DWORD *)(a4 + 12);
      unsigned int v294 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v294;
      if (v294 >= v293) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v294) = (*(unsigned __int16 *)(a2 + 18) >> 1) & 0x7FE | 0x8000;
      ++*(_DWORD *)(a4 + 8);
      int v295 = llvm::ValueEnumerator::getValueID(v10, *(void *)(v33 - 32 * *(unsigned int *)(a2 + 80) - 32));
      unsigned int v296 = *(_DWORD *)(a4 + 8);
      if (v296 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v296) = v295;
      unsigned int v297 = *(_DWORD *)(a4 + 12);
      unsigned int v298 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v298;
      if (v298 >= v297) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v298) = *(_DWORD *)(a2 + 80);
      ++*(_DWORD *)(a4 + 8);
      uint64_t v299 = *(unsigned int *)(a2 + 80);
      if (v299)
      {
        do
        {
          int v300 = llvm::ValueEnumerator::getValueID(v10, *(void *)(v33 - 32 * *(unsigned int *)(a2 + 80)));
          unint64_t v301 = *(unsigned int *)(a4 + 8);
          if (v301 >= *(unsigned int *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a4 + 4 * v301) = v300;
          ++*(_DWORD *)(a4 + 8);
          v33 += 32;
          --v299;
        }
        while (v299);
      }
      uint64_t v470 = 0;
      int v471 = v34;
      if (sub_1CBFA3AF4((uint64_t *)(v468 + 48), &v471, &v470)) {
        uint64_t v302 = v470;
      }
      else {
        uint64_t v302 = *(void *)(v468 + 48) + 16 * *(unsigned int *)(v468 + 64);
      }
      int v303 = *(_DWORD *)(v302 + 8) - 1;
      unsigned int v304 = *(_DWORD *)(a4 + 8);
      if (v304 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v304) = v303;
      ++*(_DWORD *)(a4 + 8);
      sub_1CC2150F4(v468, v32, a3, a4);
      if (v34[3] != 1)
      {
        uint64_t v305 = 0;
        uint64_t v306 = 32 * (v34[3] - 1);
        do
        {
          int v307 = *(_DWORD *)(a2 + 20);
          if ((v307 & 0x40000000) != 0) {
            uint64_t v308 = *(void *)(a2 - 8);
          }
          else {
            uint64_t v308 = a2 - 32 * (v307 & 0x7FFFFFF);
          }
          sub_1CC215208(v468, *(void *)(v308 + v305), a3, a4);
          v305 += 32;
        }
        while (v306 != v305);
      }
      if (v34[2] <= 0xFFu) {
        goto LABEL_389;
      }
      int v309 = *(unsigned __int8 *)(a2 + 16);
      if (v309 == 84) {
        uint64_t v310 = 0;
      }
      else {
        uint64_t v310 = v309 == 39 ? (*(_DWORD *)(a2 + 80) + 1) : 2;
      }
      unsigned int v311 = v34[3] - 1;
      int v312 = *(_DWORD *)(a2 + 20);
      if (v312 < 0
        && (uint64_t v459 = a2 - 32 * (v312 & 0x7FFFFFF), v460 = *(void *)(v459 - 8), (v460 & 0xFFFFFFFF0) != 0))
      {
        uint64_t v314 = -(uint64_t)(v312 & 0x7FFFFFF);
        int v313 = *(_DWORD *)(v459 - 12) - *(_DWORD *)(v459 - v460);
      }
      else
      {
        int v313 = 0;
        uint64_t v314 = -(uint64_t)(v312 & 0x7FFFFFF);
      }
      unint64_t v315 = (-32 * v310 + 32 * (unint64_t)-v313 - 32 * v314 - 32) >> 5;
      if (v311 == v315)
      {
LABEL_389:
        unsigned int v11 = 57;
      }
      else
      {
        unsigned int v11 = 57;
        do
        {
          int v367 = *(_DWORD *)(a2 + 20);
          if ((v367 & 0x40000000) != 0) {
            uint64_t v368 = *(void *)(a2 - 8);
          }
          else {
            uint64_t v368 = a2 - 32 * (v367 & 0x7FFFFFF);
          }
          sub_1CC2150F4(v468, *(uint64_t **)(v368 + 32 * v311++), a3, a4);
        }
        while (v315 != v311);
      }
      goto LABEL_524;
    case 0x28:
      int v53 = *(_DWORD *)(a2 + 20);
      if ((v53 & 0x40000000) != 0) {
        int v54 = *(uint64_t ***)(a2 - 8);
      }
      else {
        int v54 = (uint64_t **)(a2 - 32 * (v53 & 0x7FFFFFF));
      }
      BOOL v199 = sub_1CC2150F4(a1, *v54, a3, a4);
      if (v199) {
        unsigned int v12 = 0;
      }
      else {
        unsigned int v12 = 6;
      }
      if (v199) {
        int v200 = 0;
      }
      else {
        int v200 = 5;
      }
      unsigned int v201 = *(_DWORD *)(a4 + 8);
      if (v201 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v201) = 0;
      ++*(_DWORD *)(a4 + 8);
      uint64_t v202 = sub_1CC20A7B0(a2);
      if (!v202)
      {
        unsigned int v11 = 56;
        unsigned int v12 = v200;
        goto LABEL_502;
      }
      int v203 = v202;
      unsigned int v204 = *(_DWORD *)(a4 + 8);
      if (v204 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v11 = 56;
      goto LABEL_501;
    case 0x3B:
      size_t v42 = *(void **)(a2 + 64);
      uint64_t v470 = 0;
      int v471 = v42;
      if (sub_1CBFA3AF4((uint64_t *)(a1 + 48), &v471, &v470)) {
        uint64_t v43 = v470;
      }
      else {
        uint64_t v43 = *(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      }
      int v168 = *(_DWORD *)(v43 + 8) - 1;
      unsigned int v169 = *(_DWORD *)(a4 + 8);
      if (v169 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v169) = v168;
      ++*(_DWORD *)(a4 + 8);
      int v170 = *(_DWORD *)(a2 + 20);
      if ((v170 & 0x40000000) != 0) {
        unsigned int v171 = *(void ****)(a2 - 8);
      }
      else {
        unsigned int v171 = (void ***)(a2 - 32 * (v170 & 0x7FFFFFF));
      }
      char v172 = **v171;
      uint64_t v470 = 0;
      int v471 = v172;
      if (sub_1CBFA3AF4((uint64_t *)(a1 + 48), &v471, &v470)) {
        uint64_t v173 = v470;
      }
      else {
        uint64_t v173 = *(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      }
      int v174 = *(_DWORD *)(v173 + 8) - 1;
      unsigned int v175 = *(_DWORD *)(a4 + 8);
      if (v175 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v175) = v174;
      ++*(_DWORD *)(a4 + 8);
      int v176 = *(_DWORD *)(a2 + 20);
      if ((v176 & 0x40000000) != 0) {
        uint64_t v177 = *(uint64_t **)(a2 - 8);
      }
      else {
        uint64_t v177 = (uint64_t *)(a2 - 32 * (v176 & 0x7FFFFFF));
      }
      int v178 = llvm::ValueEnumerator::getValueID(a1 + 24, *v177);
      unsigned int v179 = *(_DWORD *)(a4 + 8);
      if (v179 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v179) = v178;
      unsigned int v180 = *(_DWORD *)(a4 + 12);
      unsigned int v181 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v181;
      unsigned int v182 = *(unsigned __int16 *)(a2 + 18);
      int v183 = __clz(1 << v182);
      if (v181 >= v180) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v181) = v182 & 0x80 | (v182 >> 1) & 0x20 | (64 - v183) & 0x1F | ((((64 - v183) >> 5) & 3) << 8) | 0x40;
      unsigned int v184 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v184;
      int v185 = *(_DWORD *)(*(void *)a2 + 8) >> 8;
      if (v185 != *(_DWORD *)(*(void *)(a1 + 16) + 276))
      {
        if (v184 >= *(_DWORD *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a4 + 4 * v184) = v185;
        ++*(_DWORD *)(a4 + 8);
      }
      unsigned int v11 = 19;
      goto LABEL_524;
    case 0x3C:
      int v26 = *(_DWORD *)(a2 + 20);
      if ((*(_WORD *)(a2 + 18) & 0x380) != 0)
      {
        if ((v26 & 0x40000000) != 0) {
          uint64_t v27 = *(uint64_t ***)(a2 - 8);
        }
        else {
          uint64_t v27 = (uint64_t **)(a2 - 32 * (v26 & 0x7FFFFFF));
        }
        sub_1CC2150F4(a1, *v27, a3, a4);
        unsigned int v12 = 0;
        unsigned int v11 = 41;
      }
      else
      {
        if ((v26 & 0x40000000) != 0) {
          int v285 = *(uint64_t ***)(a2 - 8);
        }
        else {
          int v285 = (uint64_t **)(a2 - 32 * (v26 & 0x7FFFFFF));
        }
        if (sub_1CC2150F4(a1, *v285, a3, a4)) {
          unsigned int v12 = 0;
        }
        else {
          unsigned int v12 = 4;
        }
        unsigned int v11 = 20;
      }
      int v384 = *(void **)a2;
      uint64_t v470 = 0;
      int v471 = v384;
      if (sub_1CBFA3AF4((uint64_t *)(a1 + 48), &v471, &v470)) {
        uint64_t v385 = v470;
      }
      else {
        uint64_t v385 = *(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      }
      int v386 = *(_DWORD *)(v385 + 8) - 1;
      unsigned int v387 = *(_DWORD *)(a4 + 8);
      if (v387 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v387) = v386;
      unsigned int v388 = *(_DWORD *)(a4 + 12);
      unsigned int v389 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v389;
      int v390 = 64 - __clz(1 << ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1));
      if (v389 >= v388) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v389) = v390;
      unsigned int v391 = *(_DWORD *)(a4 + 12);
      unsigned int v392 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v392;
      if (v392 >= v391) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v392) = *(_WORD *)(a2 + 18) & 1;
      unsigned int v393 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v393;
      int v394 = *(unsigned __int8 *)(a2 + 16);
      if (v394 == 60 || v394 == 61)
      {
        if ((*(_WORD *)(a2 + 18) & 0x380) == 0) {
          goto LABEL_502;
        }
      }
      else if ((v394 - 63) >= 3)
      {
        goto LABEL_502;
      }
      if (v393 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v393) = dword_1CFAC6B00[((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 7) & 7];
      unsigned int v395 = *(_DWORD *)(a4 + 12);
      unsigned int v204 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v204;
      int v203 = *(unsigned __int8 *)(a2 + 60);
      if (v204 >= v395) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      goto LABEL_501;
    case 0x3D:
      if ((*(_WORD *)(a2 + 18) & 0x380) != 0) {
        unsigned int v11 = 45;
      }
      else {
        unsigned int v11 = 44;
      }
      int v65 = *(_DWORD *)(a2 + 20);
      if ((v65 & 0x40000000) != 0) {
        uint64_t v66 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v66 = a2 - 32 * (v65 & 0x7FFFFFF);
      }
      sub_1CC2150F4(a1, *(uint64_t **)(v66 + 32), a3, a4);
      int v233 = *(_DWORD *)(a2 + 20);
      if ((v233 & 0x40000000) != 0) {
        char v234 = *(uint64_t ***)(a2 - 8);
      }
      else {
        char v234 = (uint64_t **)(a2 - 32 * (v233 & 0x7FFFFFF));
      }
      sub_1CC2150F4(a1, *v234, a3, a4);
      int v235 = 64 - __clz(1 << ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1));
      unsigned int v236 = *(_DWORD *)(a4 + 8);
      if (v236 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v236) = v235;
      unsigned int v237 = *(_DWORD *)(a4 + 12);
      unsigned int v238 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v238;
      if (v238 >= v237) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v238) = *(_WORD *)(a2 + 18) & 1;
      unsigned int v239 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v239;
      int v240 = *(unsigned __int8 *)(a2 + 16);
      if (v240 == 60 || v240 == 61)
      {
        if ((*(_WORD *)(a2 + 18) & 0x380) == 0) {
          goto LABEL_524;
        }
      }
      else if ((v240 - 63) >= 3)
      {
        goto LABEL_524;
      }
      if (v239 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v239) = dword_1CFAC6B00[((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 7) & 7];
      unsigned int v241 = *(_DWORD *)(a4 + 12);
      unsigned int v242 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v242;
      int v243 = *(unsigned __int8 *)(a2 + 60);
      if (v242 >= v241) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v242) = v243;
      ++*(_DWORD *)(a4 + 8);
LABEL_524:
      int v396 = *(llvm::raw_ostream **)v468;
      goto LABEL_525;
    case 0x3E:
      unsigned int v67 = *(_DWORD *)(a4 + 8);
      if (v67 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v67) = (*(unsigned __int8 *)(a2 + 17) >> 1) & 1;
      ++*(_DWORD *)(a4 + 8);
      unsigned int v68 = *(void **)(a2 + 64);
      uint64_t v470 = 0;
      int v471 = v68;
      if (sub_1CBFA3AF4((uint64_t *)(a1 + 48), &v471, &v470)) {
        uint64_t v69 = v470;
      }
      else {
        uint64_t v69 = *(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      }
      int v244 = *(_DWORD *)(v69 + 8) - 1;
      unsigned int v245 = *(_DWORD *)(a4 + 8);
      if (v245 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v245) = v244;
      ++*(_DWORD *)(a4 + 8);
      uint64_t v246 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      if (v246)
      {
        uint64_t v247 = 0;
        uint64_t v248 = 32 * v246;
        do
        {
          int v249 = *(_DWORD *)(a2 + 20);
          if ((v249 & 0x40000000) != 0) {
            uint64_t v250 = *(void *)(a2 - 8);
          }
          else {
            uint64_t v250 = a2 - 32 * (v249 & 0x7FFFFFF);
          }
          sub_1CC2150F4(a1, *(uint64_t **)(v250 + v247), a3, a4);
          v247 += 32;
        }
        while (v248 != v247);
      }
      unsigned int v11 = 43;
      unsigned int v12 = 13;
LABEL_564:
      int v396 = *(llvm::raw_ostream **)a1;
      goto LABEL_565;
    case 0x3F:
      unsigned int v83 = *(_DWORD *)(a4 + 8);
      if (v83 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v83) = dword_1CFAC6B00[*(_WORD *)(a2 + 18) & 7];
      unsigned int v84 = *(_DWORD *)(a4 + 12);
      unsigned int v85 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v85;
      int v86 = *(unsigned __int8 *)(a2 + 60);
      if (v85 >= v84) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v85) = v86;
      ++*(_DWORD *)(a4 + 8);
      unsigned int v11 = 36;
      goto LABEL_524;
    case 0x40:
      int v81 = *(_DWORD *)(a2 + 20);
      if ((v81 & 0x40000000) != 0) {
        uint64_t v82 = *(uint64_t ***)(a2 - 8);
      }
      else {
        uint64_t v82 = (uint64_t **)(a2 - 32 * (v81 & 0x7FFFFFF));
      }
      sub_1CC2150F4(a1, *v82, a3, a4);
      int v268 = *(_DWORD *)(a2 + 20);
      if ((v268 & 0x40000000) != 0) {
        uint64_t v269 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v269 = a2 - 32 * (v268 & 0x7FFFFFF);
      }
      sub_1CC2150F4(a1, *(uint64_t **)(v269 + 32), a3, a4);
      int v270 = *(_DWORD *)(a2 + 20);
      if ((v270 & 0x40000000) != 0) {
        uint64_t v271 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v271 = a2 - 32 * (v270 & 0x7FFFFFF);
      }
      sub_1CC215208(a1, *(void *)(v271 + 64), a3, a4);
      unsigned int v272 = *(_DWORD *)(a4 + 8);
      if (v272 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v272) = *(_WORD *)(a2 + 18) & 1;
      unsigned int v273 = *(_DWORD *)(a4 + 12);
      unsigned int v274 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v274;
      if (v274 >= v273) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v274) = *(_DWORD *)((char *)dword_1CFAC6B00 + (*(_WORD *)(a2 + 18) & 0x1C));
      unsigned int v275 = *(_DWORD *)(a4 + 12);
      unsigned int v276 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v276;
      if (v276 >= v275) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v276) = *(unsigned __int8 *)(a2 + 60);
      unsigned int v277 = *(_DWORD *)(a4 + 12);
      unsigned int v278 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v278;
      if (v278 >= v277) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v278) = dword_1CFAC6B00[*(_WORD *)(a2 + 18) >> 5];
      unsigned int v279 = *(_DWORD *)(a4 + 12);
      unsigned int v280 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v280;
      if (v280 >= v279) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v280) = (*(unsigned __int16 *)(a2 + 18) >> 1) & 1;
      unsigned int v281 = *(_DWORD *)(a4 + 12);
      unsigned int v282 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v282;
      int v283 = 64 - __clz(1 << *(unsigned char *)(a2 + 19));
      if (v282 >= v281) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v282) = v283;
      ++*(_DWORD *)(a4 + 8);
      unsigned int v11 = 46;
      goto LABEL_524;
    case 0x41:
      int v24 = *(_DWORD *)(a2 + 20);
      if ((v24 & 0x40000000) != 0) {
        int v25 = *(uint64_t ***)(a2 - 8);
      }
      else {
        int v25 = (uint64_t **)(a2 - 32 * (v24 & 0x7FFFFFF));
      }
      sub_1CC2150F4(a1, *v25, a3, a4);
      int v122 = *(_DWORD *)(a2 + 20);
      if ((v122 & 0x40000000) != 0) {
        uint64_t v123 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v123 = a2 - 32 * (v122 & 0x7FFFFFF);
      }
      sub_1CC2150F4(a1, *(uint64_t **)(v123 + 32), a3, a4);
      unsigned int v124 = *(_DWORD *)(a4 + 8);
      if (v124 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v124) = *(_WORD *)(a2 + 18) >> 4;
      unsigned int v125 = *(_DWORD *)(a4 + 12);
      unsigned int v126 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v126;
      if (v126 >= v125) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v126) = *(_WORD *)(a2 + 18) & 1;
      unsigned int v127 = *(_DWORD *)(a4 + 12);
      unsigned int v128 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v128;
      if (v128 >= v127) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v128) = dword_1CFAC6B00[((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1) & 7];
      unsigned int v129 = *(_DWORD *)(a4 + 12);
      unsigned int v130 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v130;
      if (v130 >= v129) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v130) = *(unsigned __int8 *)(a2 + 60);
      unsigned int v131 = *(_DWORD *)(a4 + 12);
      unsigned int v132 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v132;
      int v133 = 64 - __clz(1 << *(unsigned char *)(a2 + 19));
      if (v132 >= v131) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v132) = v133;
      ++*(_DWORD *)(a4 + 8);
      unsigned int v11 = 59;
      goto LABEL_524;
    case 0x4F:
    case 0x50:
      if (v9 == 80) {
        unsigned int v11 = 50;
      }
      else {
        unsigned int v11 = 51;
      }
      sub_1CC215208(a1, *(void *)(a2 - 32), a3, a4);
      uint64_t v13 = (*(_DWORD *)(a2 + 20) & 0x7FFFFFFu) - 1;
      unsigned int v14 = *(_DWORD *)(a4 + 8);
      if (v14 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v14) = v13;
      ++*(_DWORD *)(a4 + 8);
      if (v13)
      {
        uint64_t v15 = a2;
        do
        {
          sub_1CC2150F4(a1, *(uint64_t **)(v15 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), a3, a4);
          v15 += 32;
          --v13;
        }
        while (v13);
      }
      goto LABEL_524;
    case 0x51:
    case 0x52:
      int v16 = *(_DWORD *)(a2 + 20);
      if ((v16 & 0x40000000) != 0) {
        uint64_t v17 = *(uint64_t ***)(a2 - 8);
      }
      else {
        uint64_t v17 = (uint64_t **)(a2 - 32 * (v16 & 0x7FFFFFF));
      }
      sub_1CC2150F4(a1, *v17, a3, a4);
      int v87 = *(_DWORD *)(a2 + 20);
      if ((v87 & 0x40000000) != 0) {
        uint64_t v88 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v88 = a2 - 32 * (v87 & 0x7FFFFFF);
      }
      sub_1CC215208(a1, *(void *)(v88 + 32), a3, a4);
      unsigned int v89 = *(_DWORD *)(a4 + 8);
      if (v89 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v89) = *(_WORD *)(a2 + 18) & 0x3F;
      ++*(_DWORD *)(a4 + 8);
      uint64_t v90 = sub_1CC20A7B0(a2);
      if (v90)
      {
        unsigned int v91 = *(_DWORD *)(a4 + 8);
        if (v91 >= *(_DWORD *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a4 + 4 * v91) = v90;
        ++*(_DWORD *)(a4 + 8);
      }
      unsigned int v11 = 28;
      goto LABEL_524;
    case 0x53:
      uint64_t v472 = 0x8000000000;
      uint64_t v470 = *(void *)a2;
      int v471 = v473;
      uint64_t v469 = 0;
      if (sub_1CBFA3AF4((uint64_t *)(a1 + 48), &v470, &v469)) {
        uint64_t v41 = v469;
      }
      else {
        uint64_t v41 = *(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      }
      if (v472 >= HIDWORD(v472)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v471 + v472) = (*(_DWORD *)(v41 + 8) - 1);
      LODWORD(v472) = v472 + 1;
      uint64_t v144 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      if (v144)
      {
        uint64_t v145 = 0;
        uint64_t v146 = 0;
        uint64_t v147 = 32 * v144;
        do
        {
          int v148 = *(_DWORD *)(a2 + 20);
          if ((v148 & 0x40000000) != 0) {
            uint64_t v149 = *(void *)(a2 - 8);
          }
          else {
            uint64_t v149 = a2 - 32 * (v148 & 0x7FFFFFF);
          }
          int v150 = llvm::ValueEnumerator::getValueID(a1 + 24, *(void *)(v149 + v146));
          sub_1CC20A668((uint64_t)&v471, (int)(a3 - v150));
          int v151 = *(_DWORD *)(a2 + 20);
          if ((v151 & 0x40000000) != 0) {
            uint64_t v152 = *(void *)(a2 - 8);
          }
          else {
            uint64_t v152 = a2 - 32 * (v151 & 0x7FFFFFF);
          }
          unsigned int v153 = llvm::ValueEnumerator::getValueID(a1 + 24, *(void *)(v152 + 32 * *(unsigned int *)(a2 + 60) + v145));
          if (v472 >= (unint64_t)HIDWORD(v472)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v471 + v472) = v153;
          LODWORD(v472) = v472 + 1;
          v146 += 32;
          v145 += 8;
        }
        while (v147 != v146);
      }
      uint64_t v154 = sub_1CC20A7B0(a2);
      unsigned int v155 = v472;
      if (v154)
      {
        if (v472 >= HIDWORD(v472)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v471 + v472) = v154;
        unsigned int v155 = v472 + 1;
        LODWORD(v472) = v472 + 1;
      }
      unsigned int v156 = *(llvm::raw_ostream **)a1;
      int v157 = *(_DWORD *)(*(void *)a1 + 32);
      int v158 = *(_DWORD *)(*(void *)a1 + 24);
      unsigned int v159 = *(_DWORD *)(*(void *)a1 + 28) | (3 << v158);
      *(_DWORD *)(*(void *)a1 + 28) = v159;
      unsigned int v160 = v158 + v157;
      if ((v158 + v157) >= 0x20)
      {
        int v397 = *(void **)v156;
        uint64_t v398 = *(void *)(*(void *)v156 + 8);
        if (*(void *)(*(void *)v156 + 16) < (unint64_t)(v398 + 4)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(_DWORD *)(*v397 + v398) = v159;
        v397[1] += 4;
        unsigned int v399 = (llvm::raw_ostream *)*((void *)v156 + 1);
        if (v399)
        {
          size_t v465 = *(void *)(*(void *)v156 + 8);
          if (v465 >= *((void *)v156 + 2))
          {
            llvm::raw_ostream::write(v399, **(const char ***)v156, v465);
            *(void *)(*(void *)v156 + 8) = 0;
          }
        }
        int v400 = *((_DWORD *)v156 + 6);
        if (v400) {
          unsigned int v159 = 3u >> -(char)v400;
        }
        else {
          unsigned int v159 = 0;
        }
        unsigned int v160 = ((_BYTE)v400 + (_BYTE)v157) & 0x1F;
      }
      unsigned int v161 = (16 << v160) | v159;
      *((_DWORD *)v156 + 6) = v160;
      *((_DWORD *)v156 + 7) = v161;
      if (v160 >= 0x1A)
      {
        BOOL v401 = *(const char ***)v156;
        uint64_t v402 = *(void *)(*(void *)v156 + 8);
        if (*(void *)(*(void *)v156 + 16) < (unint64_t)(v402 + 4)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(_DWORD *)&(*v401)[v402] = v161;
        v401[1] += 4;
        uint64_t v403 = (llvm::raw_ostream *)*((void *)v156 + 1);
        if (v403)
        {
          size_t v466 = *(void *)(*(void *)v156 + 8);
          if (v466 >= *((void *)v156 + 2))
          {
            llvm::raw_ostream::write(v403, **(const char ***)v156, v466);
            *(void *)(*(void *)v156 + 8) = 0;
          }
        }
        int v404 = *((_DWORD *)v156 + 6);
        if (v404) {
          unsigned int v161 = 0x10u >> -(char)v404;
        }
        else {
          unsigned int v161 = 0;
        }
        unsigned int v162 = ((_BYTE)v404 + 6) & 0x1F;
      }
      else
      {
        unsigned int v162 = v160 + 6;
      }
      *((_DWORD *)v156 + 6) = v162;
      if (v155 >= 0x20)
      {
        unsigned int v448 = v155;
        do
        {
          unsigned int v449 = v448 & 0x1F | 0x20;
          v161 |= v449 << v162;
          *((_DWORD *)v156 + 7) = v161;
          v162 += 6;
          if (v162 >= 0x20)
          {
            uint64_t v450 = *(const char ***)v156;
            uint64_t v451 = *(void *)(*(void *)v156 + 8);
            if (*(void *)(*(void *)v156 + 16) < (unint64_t)(v451 + 4)) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            *(_DWORD *)&(*v450)[v451] = v161;
            v450[1] += 4;
            unsigned int v452 = (llvm::raw_ostream *)*((void *)v156 + 1);
            if (v452)
            {
              size_t v454 = *(void *)(*(void *)v156 + 8);
              if (v454 >= *((void *)v156 + 2))
              {
                llvm::raw_ostream::write(v452, **(const char ***)v156, v454);
                *(void *)(*(void *)v156 + 8) = 0;
              }
            }
            int v453 = *((_DWORD *)v156 + 6);
            if (v453) {
              unsigned int v161 = v449 >> -(char)v453;
            }
            else {
              unsigned int v161 = 0;
            }
            *((_DWORD *)v156 + 7) = v161;
            unsigned int v162 = ((_BYTE)v453 + 6) & 0x1F;
          }
          *((_DWORD *)v156 + 6) = v162;
          unsigned int v163 = v448 >> 5;
          BOOL v442 = v448 > 0x3FF;
          v448 >>= 5;
        }
        while (v442);
      }
      else
      {
        unsigned int v163 = v155;
      }
      int v164 = (v163 << v162) | v161;
      *((_DWORD *)v156 + 7) = v164;
      if (v162 >= 0x1A)
      {
        unsigned int v405 = *(const char ***)v156;
        uint64_t v406 = *(void *)(*(void *)v156 + 8);
        if (*(void *)(*(void *)v156 + 16) < (unint64_t)(v406 + 4)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(_DWORD *)&(*v405)[v406] = v164;
        v405[1] += 4;
        unsigned int v407 = (llvm::raw_ostream *)*((void *)v156 + 1);
        if (v407)
        {
          size_t v467 = *(void *)(*(void *)v156 + 8);
          if (v467 >= *((void *)v156 + 2))
          {
            llvm::raw_ostream::write(v407, **(const char ***)v156, v467);
            *(void *)(*(void *)v156 + 8) = 0;
          }
        }
        int v408 = *((_DWORD *)v156 + 6);
        unsigned int v409 = v163 >> -(char)v408;
        if (!v408) {
          unsigned int v409 = 0;
        }
        *((_DWORD *)v156 + 7) = v409;
        int v165 = ((_BYTE)v408 + 6) & 0x1F;
      }
      else
      {
        int v165 = v162 + 6;
      }
      *((_DWORD *)v156 + 6) = v165;
      if (v155)
      {
        uint64_t v166 = 0;
        uint64_t v167 = 8 * v155;
        do
        {
          sub_1CC202E58((uint64_t)v156, *(void *)((char *)v471 + v166), 6);
          v166 += 8;
        }
        while (v167 != v166);
      }
      LODWORD(v472) = 0;
      if (v471 != v473) {
        free(v471);
      }
      return;
    case 0x54:
      uint64_t v76 = *(void *)(a2 + 72);
      int v77 = *(_DWORD *)(a2 + 20);
      if (v77 < 0 && (*(void *)(a2 - 32 * (v77 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) != 0) {
        sub_1CC215280((llvm::raw_ostream **)a1, a2, a3);
      }
      uint64_t v470 = *(void *)(a2 + 64);
      if (v470)
      {
        int v471 = 0;
        if (sub_1CC208488((uint64_t *)(a1 + 344), &v470, &v471)) {
          uint64_t v78 = v471;
        }
        else {
          uint64_t v78 = (_DWORD *)(*(void *)(a1 + 344) + 16 * *(unsigned int *)(a1 + 360));
        }
        int v288 = v78[2];
      }
      else
      {
        int v288 = 0;
      }
      unsigned int v339 = *(_DWORD *)(a4 + 8);
      if (v339 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v339) = v288;
      ++*(_DWORD *)(a4 + 8);
      int v340 = sub_1CC20A7B0(a2);
      unsigned int v341 = *(unsigned __int16 *)(a2 + 18);
      int v342 = (v341 >> 1) & 0x7FE;
      int v343 = v341 & 3;
      int v344 = v343 == 3;
      int v345 = v343 == 2;
      int v346 = v342 | ((v343 - 1) < 2);
      if (v340) {
        int v347 = 163840;
      }
      else {
        int v347 = 0x8000;
      }
      int v348 = v347 | (v345 << 14) | (v344 << 16) | v346;
      unsigned int v349 = *(_DWORD *)(a4 + 8);
      if (v349 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v349) = v348;
      unsigned int v350 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v350;
      if (v340)
      {
        if (v350 >= *(_DWORD *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a4 + 4 * v350) = v340;
        ++*(_DWORD *)(a4 + 8);
      }
      uint64_t v470 = 0;
      int v471 = (void *)v76;
      if (sub_1CBFA3AF4((uint64_t *)(a1 + 48), &v471, &v470)) {
        uint64_t v351 = v470;
      }
      else {
        uint64_t v351 = *(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      }
      int v352 = *(_DWORD *)(v351 + 8) - 1;
      unsigned int v353 = *(_DWORD *)(a4 + 8);
      if (v353 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v353) = v352;
      ++*(_DWORD *)(a4 + 8);
      sub_1CC2150F4(a1, *(uint64_t **)(a2 - 32), a3, a4);
      if (*(_DWORD *)(v76 + 12) != 1)
      {
        uint64_t v354 = 0;
        uint64_t v355 = 8 * (*(_DWORD *)(v76 + 12) - 1);
        uint64_t v356 = a2;
        do
        {
          uint64_t v357 = *(void *)(v356 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
          if (*(unsigned char *)(*(void *)(*(void *)(v76 + 16) + v354 + 8) + 8) == 8)
          {
            int v358 = llvm::ValueEnumerator::getValueID(v10, v357);
            unint64_t v359 = *(unsigned int *)(a4 + 8);
            if (v359 >= *(unsigned int *)(a4 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*(void *)a4 + 4 * v359) = v358;
            ++*(_DWORD *)(a4 + 8);
          }
          else
          {
            sub_1CC215208(v468, v357, a3, a4);
          }
          v356 += 32;
          v354 += 8;
        }
        while (v355 != v354);
      }
      if (*(_DWORD *)(v76 + 8) <= 0xFFu) {
        goto LABEL_446;
      }
      int v360 = *(unsigned __int8 *)(a2 + 16);
      if (v360 == 84) {
        uint64_t v361 = 0;
      }
      else {
        uint64_t v361 = v360 == 39 ? (*(_DWORD *)(a2 + 80) + 1) : 2;
      }
      unsigned int v362 = *(_DWORD *)(v76 + 12) - 1;
      int v363 = *(_DWORD *)(a2 + 20);
      if (v363 < 0
        && (uint64_t v463 = a2 - 32 * (v363 & 0x7FFFFFF), v464 = *(void *)(v463 - 8), (v464 & 0xFFFFFFFF0) != 0))
      {
        uint64_t v365 = -(uint64_t)(v363 & 0x7FFFFFF);
        int v364 = *(_DWORD *)(v463 - 12) - *(_DWORD *)(v463 - v464);
      }
      else
      {
        int v364 = 0;
        uint64_t v365 = -(uint64_t)(v363 & 0x7FFFFFF);
      }
      unint64_t v366 = (-32 * v361 + 32 * (unint64_t)-v364 - 32 * v365 - 32) >> 5;
      if (v362 == v366)
      {
LABEL_446:
        unsigned int v11 = 34;
      }
      else
      {
        unsigned int v11 = 34;
        do
          sub_1CC2150F4(v468, *(uint64_t **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v362++), a3, a4);
        while (v366 != v362);
      }
      goto LABEL_524;
    case 0x55:
      int v37 = *(_DWORD *)(a2 + 20);
      if ((v37 & 0x40000000) != 0) {
        uint64_t v38 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v38 = a2 - 32 * (v37 & 0x7FFFFFF);
      }
      sub_1CC2150F4(a1, *(uint64_t **)(v38 + 32), a3, a4);
      int v134 = *(_DWORD *)(a2 + 20);
      if ((v134 & 0x40000000) != 0) {
        uint64_t v135 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v135 = a2 - 32 * (v134 & 0x7FFFFFF);
      }
      sub_1CC215208(a1, *(void *)(v135 + 64), a3, a4);
      int v136 = *(_DWORD *)(a2 + 20);
      if ((v136 & 0x40000000) != 0) {
        uint64_t v137 = *(uint64_t ***)(a2 - 8);
      }
      else {
        uint64_t v137 = (uint64_t **)(a2 - 32 * (v136 & 0x7FFFFFF));
      }
      sub_1CC2150F4(a1, *v137, a3, a4);
      uint64_t v138 = sub_1CC20A7B0(a2);
      if (v138)
      {
        unsigned int v139 = *(_DWORD *)(a4 + 8);
        if (v139 >= *(_DWORD *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a4 + 4 * v139) = v138;
        ++*(_DWORD *)(a4 + 8);
      }
      unsigned int v11 = 29;
      goto LABEL_524;
    case 0x58:
      int v22 = *(_DWORD *)(a2 + 20);
      if ((v22 & 0x40000000) != 0) {
        uint64_t v23 = *(void ****)(a2 - 8);
      }
      else {
        uint64_t v23 = (void ***)(a2 - 32 * (v22 & 0x7FFFFFF));
      }
      unsigned int v112 = **v23;
      uint64_t v470 = 0;
      int v471 = v112;
      if (sub_1CBFA3AF4((uint64_t *)(a1 + 48), &v471, &v470)) {
        uint64_t v113 = v470;
      }
      else {
        uint64_t v113 = *(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      }
      int v114 = *(_DWORD *)(v113 + 8) - 1;
      unsigned int v115 = *(_DWORD *)(a4 + 8);
      if (v115 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v115) = v114;
      ++*(_DWORD *)(a4 + 8);
      int v116 = *(_DWORD *)(a2 + 20);
      if ((v116 & 0x40000000) != 0) {
        unint64_t v117 = *(uint64_t **)(a2 - 8);
      }
      else {
        unint64_t v117 = (uint64_t *)(a2 - 32 * (v116 & 0x7FFFFFF));
      }
      sub_1CC215208(a1, *v117, a3, a4);
      uint64_t v118 = *(void **)a2;
      uint64_t v470 = 0;
      int v471 = v118;
      if (sub_1CBFA3AF4((uint64_t *)(a1 + 48), &v471, &v470)) {
        uint64_t v119 = v470;
      }
      else {
        uint64_t v119 = *(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      }
      int v120 = *(_DWORD *)(v119 + 8) - 1;
      unsigned int v121 = *(_DWORD *)(a4 + 8);
      if (v121 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v121) = v120;
      ++*(_DWORD *)(a4 + 8);
      unsigned int v11 = 23;
      goto LABEL_524;
    case 0x59:
      int v20 = *(_DWORD *)(a2 + 20);
      if ((v20 & 0x40000000) != 0) {
        uint64_t v21 = *(uint64_t ***)(a2 - 8);
      }
      else {
        uint64_t v21 = (uint64_t **)(a2 - 32 * (v20 & 0x7FFFFFF));
      }
      sub_1CC2150F4(a1, *v21, a3, a4);
      int v110 = *(_DWORD *)(a2 + 20);
      if ((v110 & 0x40000000) != 0) {
        uint64_t v111 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v111 = a2 - 32 * (v110 & 0x7FFFFFF);
      }
      sub_1CC2150F4(a1, *(uint64_t **)(v111 + 32), a3, a4);
      unsigned int v11 = 6;
      goto LABEL_524;
    case 0x5A:
      int v39 = *(_DWORD *)(a2 + 20);
      if ((v39 & 0x40000000) != 0) {
        unsigned int v40 = *(uint64_t ***)(a2 - 8);
      }
      else {
        unsigned int v40 = (uint64_t **)(a2 - 32 * (v39 & 0x7FFFFFF));
      }
      sub_1CC2150F4(a1, *v40, a3, a4);
      int v140 = *(_DWORD *)(a2 + 20);
      if ((v140 & 0x40000000) != 0) {
        uint64_t v141 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v141 = a2 - 32 * (v140 & 0x7FFFFFF);
      }
      sub_1CC215208(a1, *(void *)(v141 + 32), a3, a4);
      int v142 = *(_DWORD *)(a2 + 20);
      if ((v142 & 0x40000000) != 0) {
        uint64_t v143 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v143 = a2 - 32 * (v142 & 0x7FFFFFF);
      }
      sub_1CC2150F4(a1, *(uint64_t **)(v143 + 64), a3, a4);
      unsigned int v11 = 7;
      goto LABEL_524;
    case 0x5B:
      int v55 = *(_DWORD *)(a2 + 20);
      if ((v55 & 0x40000000) != 0) {
        unsigned int v56 = *(uint64_t ***)(a2 - 8);
      }
      else {
        unsigned int v56 = (uint64_t **)(a2 - 32 * (v55 & 0x7FFFFFF));
      }
      sub_1CC2150F4(a1, *v56, a3, a4);
      int v205 = *(_DWORD *)(a2 + 20);
      if ((v205 & 0x40000000) != 0) {
        uint64_t v206 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v206 = a2 - 32 * (v205 & 0x7FFFFFF);
      }
      sub_1CC215208(a1, *(void *)(v206 + 32), a3, a4);
      sub_1CC215208(a1, *(void *)(a2 + 96), a3, a4);
      unsigned int v11 = 8;
      goto LABEL_524;
    case 0x5C:
      int v79 = *(_DWORD *)(a2 + 20);
      if ((v79 & 0x40000000) != 0) {
        unsigned int v80 = *(uint64_t ***)(a2 - 8);
      }
      else {
        unsigned int v80 = (uint64_t **)(a2 - 32 * (v79 & 0x7FFFFFF));
      }
      sub_1CC2150F4(a1, *v80, a3, a4);
      BOOL v265 = *(const void **)(a2 + 64);
      uint64_t v266 = *(unsigned int *)(a2 + 72);
      uint64_t v267 = *(unsigned int *)(a4 + 8);
      if (v267 + v266 > (unint64_t)*(unsigned int *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v266)
      {
        memcpy((void *)(*(void *)a4 + 4 * v267), v265, 4 * v266);
        LODWORD(v267) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(a4 + 8) = v267 + v266;
      unsigned int v11 = 26;
      goto LABEL_524;
    case 0x5D:
      int v57 = *(_DWORD *)(a2 + 20);
      if ((v57 & 0x40000000) != 0) {
        uint64_t v58 = *(uint64_t ***)(a2 - 8);
      }
      else {
        uint64_t v58 = (uint64_t **)(a2 - 32 * (v57 & 0x7FFFFFF));
      }
      sub_1CC2150F4(a1, *v58, a3, a4);
      int v207 = *(_DWORD *)(a2 + 20);
      if ((v207 & 0x40000000) != 0) {
        uint64_t v208 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v208 = a2 - 32 * (v207 & 0x7FFFFFF);
      }
      sub_1CC2150F4(a1, *(uint64_t **)(v208 + 32), a3, a4);
      size_t v209 = *(const void **)(a2 + 64);
      uint64_t v210 = *(unsigned int *)(a2 + 72);
      uint64_t v211 = *(unsigned int *)(a4 + 8);
      if (v211 + v210 > (unint64_t)*(unsigned int *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v210)
      {
        memcpy((void *)(*(void *)a4 + 4 * v211), v209, 4 * v210);
        LODWORD(v211) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(a4 + 8) = v211 + v210;
      unsigned int v11 = 27;
      goto LABEL_524;
    case 0x5E:
      uint64_t v18 = *(void **)a2;
      uint64_t v470 = 0;
      int v471 = v18;
      if (sub_1CBFA3AF4((uint64_t *)(a1 + 48), &v471, &v470)) {
        uint64_t v19 = v470;
      }
      else {
        uint64_t v19 = *(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      }
      int v95 = *(_DWORD *)(v19 + 8) - 1;
      unsigned int v96 = *(_DWORD *)(a4 + 8);
      if (v96 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v96) = v95;
      unsigned int v97 = *(_DWORD *)(a4 + 12);
      unsigned int v98 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v98;
      if (v98 >= v97) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v98) = *(_WORD *)(a2 + 18) & 1;
      unsigned int v99 = *(_DWORD *)(a4 + 12);
      unsigned int v100 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v100;
      if (v100 >= v99) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v100) = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      ++*(_DWORD *)(a4 + 8);
      uint64_t v101 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      if (v101)
      {
        uint64_t v102 = 0;
        uint64_t v103 = 32 * v101;
        unsigned int v11 = 47;
        do
        {
          int v104 = *(_DWORD *)(a2 + 20);
          if ((v104 & 0x40000000) != 0) {
            uint64_t v105 = *(void *)(a2 - 8);
          }
          else {
            uint64_t v105 = a2 - 32 * (v104 & 0x7FFFFFF);
          }
          BOOL v106 = *(unsigned __int8 *)(**(void **)(v105 + v102) + 8) == 17;
          unint64_t v107 = *(unsigned int *)(a4 + 8);
          if (v107 >= *(unsigned int *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a4 + 4 * v107) = v106;
          ++*(_DWORD *)(a4 + 8);
          int v108 = *(_DWORD *)(a2 + 20);
          if ((v108 & 0x40000000) != 0) {
            uint64_t v109 = *(void *)(a2 - 8);
          }
          else {
            uint64_t v109 = a2 - 32 * (v108 & 0x7FFFFFF);
          }
          sub_1CC2150F4(a1, *(uint64_t **)(v109 + v102), a3, a4);
          v102 += 32;
        }
        while (v103 != v102);
      }
      else
      {
        unsigned int v11 = 47;
      }
      goto LABEL_524;
    case 0x5F:
      int v30 = *(_DWORD *)(a2 + 20);
      if ((v30 & 0x40000000) != 0) {
        int v31 = *(uint64_t ***)(a2 - 8);
      }
      else {
        int v31 = (uint64_t **)(a2 - 32 * (v30 & 0x7FFFFFF));
      }
      sub_1CC2150F4(a1, *v31, a3, a4);
      unsigned int v11 = 58;
      goto LABEL_524;
    default:
      unsigned int v92 = v9 - 66;
      int v93 = *(_DWORD *)(a2 + 20);
      if (v92 <= 0xC)
      {
        if ((v93 & 0x40000000) != 0) {
          uint64_t v94 = *(uint64_t ***)(a2 - 8);
        }
        else {
          uint64_t v94 = (uint64_t **)(a2 - 32 * (v93 & 0x7FFFFFF));
        }
        BOOL v371 = sub_1CC2150F4(a1, *v94, a3, a4);
        size_t v372 = *(void **)a2;
        if (v371) {
          unsigned int v12 = 0;
        }
        else {
          unsigned int v12 = 9;
        }
        uint64_t v470 = 0;
        int v471 = v372;
        if (sub_1CBFA3AF4((uint64_t *)(a1 + 48), &v471, &v470)) {
          uint64_t v373 = v470;
        }
        else {
          uint64_t v373 = *(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
        }
        int v378 = *(_DWORD *)(v373 + 8) - 1;
        unsigned int v379 = *(_DWORD *)(a4 + 8);
        if (v379 >= *(_DWORD *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a4 + 4 * v379) = v378;
        unsigned int v380 = *(_DWORD *)(a4 + 12);
        unsigned int v204 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v204;
        int v203 = (*(unsigned char *)(a2 + 16) - 66);
        if (v204 >= v380) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v11 = 3;
LABEL_501:
        *(_DWORD *)(*(void *)a4 + 4 * v204) = v203;
        ++*(_DWORD *)(a4 + 8);
        goto LABEL_502;
      }
      if ((v93 & 0x40000000) != 0) {
        int v284 = *(uint64_t ***)(a2 - 8);
      }
      else {
        int v284 = (uint64_t **)(a2 - 32 * (v93 & 0x7FFFFFF));
      }
      BOOL v374 = sub_1CC2150F4(a1, *v284, a3, a4);
      if (v374) {
        unsigned int v12 = 0;
      }
      else {
        unsigned int v12 = 8;
      }
      if (v374) {
        int v375 = 0;
      }
      else {
        int v375 = 7;
      }
      int v376 = *(_DWORD *)(a2 + 20);
      if ((v376 & 0x40000000) != 0) {
        uint64_t v377 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v377 = a2 - 32 * (v376 & 0x7FFFFFF);
      }
      sub_1CC215208(a1, *(void *)(v377 + 32), a3, a4);
      int v381 = sub_1CC20A79C(*(unsigned __int8 *)(a2 + 16) - 28);
      unsigned int v382 = *(_DWORD *)(a4 + 8);
      if (v382 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v382) = v381;
      ++*(_DWORD *)(a4 + 8);
      uint64_t v383 = sub_1CC20A7B0(a2);
      if (v383)
      {
        int v203 = v383;
        unsigned int v204 = *(_DWORD *)(a4 + 8);
        if (v204 >= *(_DWORD *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v11 = 2;
        goto LABEL_501;
      }
      unsigned int v11 = 2;
      unsigned int v12 = v375;
LABEL_502:
      int v396 = *(llvm::raw_ostream **)a1;
      if (v12)
      {
LABEL_565:
        sub_1CC205E50(v396, v12, *(void *)a4, *(unsigned int *)(a4 + 8), 0, 0, v11 | 0x100000000);
      }
      else
      {
LABEL_525:
        uint64_t v410 = *(unsigned int *)(a4 + 8);
        int v411 = *((_DWORD *)v396 + 8);
        int v412 = *((_DWORD *)v396 + 6);
        unsigned int v413 = *((_DWORD *)v396 + 7) | (3 << v412);
        *((_DWORD *)v396 + 7) = v413;
        unsigned int v414 = v412 + v411;
        if ((v412 + v411) >= 0x20)
        {
          unsigned int v423 = *(void **)v396;
          uint64_t v424 = *(void *)(*(void *)v396 + 8);
          if (*(void *)(*(void *)v396 + 16) < (unint64_t)(v424 + 4)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(_DWORD *)(*v423 + v424) = v413;
          v423[1] += 4;
          uint64_t v425 = (llvm::raw_ostream *)*((void *)v396 + 1);
          if (v425)
          {
            size_t v455 = *(void *)(*(void *)v396 + 8);
            if (v455 >= *((void *)v396 + 2))
            {
              llvm::raw_ostream::write(v425, **(const char ***)v396, v455);
              *(void *)(*(void *)v396 + 8) = 0;
            }
          }
          int v426 = *((_DWORD *)v396 + 6);
          if (v426) {
            unsigned int v413 = 3u >> -(char)v426;
          }
          else {
            unsigned int v413 = 0;
          }
          unsigned int v414 = ((_BYTE)v426 + (_BYTE)v411) & 0x1F;
        }
        *((_DWORD *)v396 + 6) = v414;
        if (v11 >= 0x20)
        {
          unsigned int v422 = v11 & 0x1F | 0x20;
          v413 |= v422 << v414;
          *((_DWORD *)v396 + 7) = v413;
          if (v414 >= 0x1A)
          {
            BOOL v436 = *(const char ***)v396;
            uint64_t v437 = *(void *)(*(void *)v396 + 8);
            if (*(void *)(*(void *)v396 + 16) < (unint64_t)(v437 + 4)) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            *(_DWORD *)&(*v436)[v437] = v413;
            v436[1] += 4;
            unsigned int v438 = (llvm::raw_ostream *)*((void *)v396 + 1);
            if (v438)
            {
              size_t v458 = *(void *)(*(void *)v396 + 8);
              if (v458 >= *((void *)v396 + 2))
              {
                llvm::raw_ostream::write(v438, **(const char ***)v396, v458);
                *(void *)(*(void *)v396 + 8) = 0;
              }
            }
            int v439 = *((_DWORD *)v396 + 6);
            if (v439) {
              unsigned int v413 = v422 >> -(char)v439;
            }
            else {
              unsigned int v413 = 0;
            }
            unsigned int v414 = ((_BYTE)v439 + 6) & 0x1F;
          }
          else
          {
            v414 += 6;
          }
          *((_DWORD *)v396 + 6) = v414;
          v11 >>= 5;
        }
        int v415 = (v11 << v414) | v413;
        *((_DWORD *)v396 + 7) = v415;
        if (v414 >= 0x1A)
        {
          uint64_t v427 = *(const char ***)v396;
          uint64_t v428 = *(void *)(*(void *)v396 + 8);
          if (*(void *)(*(void *)v396 + 16) < (unint64_t)(v428 + 4)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(_DWORD *)&(*v427)[v428] = v415;
          v427[1] += 4;
          uint64_t v429 = (llvm::raw_ostream *)*((void *)v396 + 1);
          if (v429)
          {
            size_t v456 = *(void *)(*(void *)v396 + 8);
            if (v456 >= *((void *)v396 + 2))
            {
              llvm::raw_ostream::write(v429, **(const char ***)v396, v456);
              *(void *)(*(void *)v396 + 8) = 0;
            }
          }
          int v430 = *((_DWORD *)v396 + 6);
          if (v430) {
            int v415 = v11 >> -(char)v430;
          }
          else {
            int v415 = 0;
          }
          unsigned int v416 = ((_BYTE)v430 + 6) & 0x1F;
        }
        else
        {
          unsigned int v416 = v414 + 6;
        }
        *((_DWORD *)v396 + 6) = v416;
        if (v410 >= 0x20)
        {
          unsigned int v440 = v410;
          do
          {
            unsigned int v441 = v440 & 0x1F | 0x20;
            v415 |= v441 << v416;
            *((_DWORD *)v396 + 7) = v415;
            v416 += 6;
            if (v416 >= 0x20)
            {
              unsigned __int8 v443 = *(const char ***)v396;
              uint64_t v444 = *(void *)(*(void *)v396 + 8);
              if (*(void *)(*(void *)v396 + 16) < (unint64_t)(v444 + 4)) {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
              }
              *(_DWORD *)&(*v443)[v444] = v415;
              v443[1] += 4;
              int v445 = (llvm::raw_ostream *)*((void *)v396 + 1);
              if (v445)
              {
                size_t v447 = *(void *)(*(void *)v396 + 8);
                if (v447 >= *((void *)v396 + 2))
                {
                  llvm::raw_ostream::write(v445, **(const char ***)v396, v447);
                  *(void *)(*(void *)v396 + 8) = 0;
                }
              }
              int v446 = *((_DWORD *)v396 + 6);
              if (v446) {
                int v415 = v441 >> -(char)v446;
              }
              else {
                int v415 = 0;
              }
              *((_DWORD *)v396 + 7) = v415;
              unsigned int v416 = ((_BYTE)v446 + 6) & 0x1F;
            }
            *((_DWORD *)v396 + 6) = v416;
            unsigned int v417 = v440 >> 5;
            BOOL v442 = v440 > 0x3FF;
            v440 >>= 5;
          }
          while (v442);
        }
        else
        {
          unsigned int v417 = v410;
        }
        int v418 = (v417 << v416) | v415;
        *((_DWORD *)v396 + 7) = v418;
        if (v416 >= 0x1A)
        {
          int v431 = *(const char ***)v396;
          uint64_t v432 = *(void *)(*(void *)v396 + 8);
          if (*(void *)(*(void *)v396 + 16) < (unint64_t)(v432 + 4)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(_DWORD *)&(*v431)[v432] = v418;
          v431[1] += 4;
          uint64_t v433 = (llvm::raw_ostream *)*((void *)v396 + 1);
          if (v433)
          {
            size_t v457 = *(void *)(*(void *)v396 + 8);
            if (v457 >= *((void *)v396 + 2))
            {
              llvm::raw_ostream::write(v433, **(const char ***)v396, v457);
              *(void *)(*(void *)v396 + 8) = 0;
            }
          }
          int v434 = *((_DWORD *)v396 + 6);
          unsigned int v435 = v417 >> -(char)v434;
          if (!v434) {
            unsigned int v435 = 0;
          }
          *((_DWORD *)v396 + 7) = v435;
          int v419 = ((_BYTE)v434 + 6) & 0x1F;
        }
        else
        {
          int v419 = v416 + 6;
        }
        *((_DWORD *)v396 + 6) = v419;
        if (v410)
        {
          uint64_t v420 = 0;
          uint64_t v421 = 4 * v410;
          do
          {
            sub_1CC202E58((uint64_t)v396, *(unsigned int *)(*(void *)a4 + v420), 6);
            v420 += 4;
          }
          while (v421 != v420);
        }
      }
      *(_DWORD *)(a4 + 8) = 0;
      return;
  }
}

BOOL sub_1CC2150F4(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  unsigned int ValueID = llvm::ValueEnumerator::getValueID(a1 + 24, (uint64_t)a2);
  unsigned int v9 = *(_DWORD *)(a4 + 8);
  if (v9 >= *(_DWORD *)(a4 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a4 + 4 * v9) = a3 - ValueID;
  ++*(_DWORD *)(a4 + 8);
  if (a3 <= ValueID)
  {
    uint64_t v10 = *a2;
    uint64_t v15 = 0;
    uint64_t v16 = v10;
    if (sub_1CBFA3AF4((uint64_t *)(a1 + 48), &v16, &v15)) {
      uint64_t v11 = v15;
    }
    else {
      uint64_t v11 = *(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
    }
    int v12 = *(_DWORD *)(v11 + 8) - 1;
    unsigned int v13 = *(_DWORD *)(a4 + 8);
    if (v13 >= *(_DWORD *)(a4 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a4 + 4 * v13) = v12;
    ++*(_DWORD *)(a4 + 8);
  }
  return a3 <= ValueID;
}

uint64_t sub_1CC215208(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = llvm::ValueEnumerator::getValueID(a1 + 24, a2);
  unsigned int v7 = *(_DWORD *)(a4 + 8);
  if (v7 >= *(_DWORD *)(a4 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a4 + 4 * v7) = a3 - result;
  ++*(_DWORD *)(a4 + 8);
  return result;
}

void sub_1CC215280(llvm::raw_ostream **a1, uint64_t a2, unsigned int a3)
{
  v21[32] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = v21;
  uint64_t v20 = 0x4000000000;
  int v3 = *(_DWORD *)(a2 + 20);
  if (v3 < 0)
  {
    unint64_t v4 = *(void *)(a2 - 32 * (v3 & 0x7FFFFFF) - 8);
    if ((v4 & 0xFFFFFFFF0) != 0)
    {
      uint64_t v5 = 0;
      unsigned int v6 = **(uint64_t ***)a2;
      uint64_t v7 = (v4 >> 4);
      do
      {
        uint64_t v8 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
        unsigned int v9 = (unsigned int *)(v8 - 8 - *(void *)(v8 - 8) + 16 * v5);
        uint64_t v10 = *(unsigned int *)(v8 - *(void *)(v8 - 8) + 16 * v5);
        uint64_t v11 = v9[3];
        int OperandBundleTagID = llvm::LLVMContextImpl::getOperandBundleTagID(*v6, (unsigned __int8 *)(*(void *)v9 + 16), **(void **)v9);
        if (v20 >= (unint64_t)HIDWORD(v20)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v19 + v20) = OperandBundleTagID;
        LODWORD(v20) = v20 + 1;
        if (v10 != v11)
        {
          unsigned int v13 = (uint64_t **)(v8 + 32 * v10);
          uint64_t v14 = 32 * v11 - 32 * v10;
          do
          {
            uint64_t v15 = *v13;
            v13 += 4;
            sub_1CC2150F4((uint64_t)a1, v15, a3, (uint64_t)&v19);
            v14 -= 32;
          }
          while (v14);
        }
        sub_1CC2059BC(*a1, 0x37u, (uint64_t)&v19, 0);
        LODWORD(v20) = 0;
        ++v5;
      }
      while (v5 != v7);
      if (v19 != v21) {
        free(v19);
      }
    }
  }
}

uint64_t sub_1CC215420(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 424);
  if (v2)
  {
    *(void *)(a1 + 432) = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 392), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 368), 8);
  int v3 = *(void **)(a1 + 344);
  if (v3)
  {
    *(void *)(a1 + 352) = v3;
    operator delete(v3);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 320), 8);
  unint64_t v4 = *(void **)(a1 + 296);
  if (v4)
  {
    *(void *)(a1 + 304) = v4;
    operator delete(v4);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 272), 8);
  if ((*(unsigned char *)(a1 + 240) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 248), 4);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 216), 8);
  uint64_t v5 = *(void **)(a1 + 192);
  if (v5)
  {
    *(void *)(a1 + 200) = v5;
    operator delete(v5);
  }
  unsigned int v6 = *(void **)(a1 + 168);
  if (v6)
  {
    *(void *)(a1 + 176) = v6;
    operator delete(v6);
  }
  sub_1CC215538(a1 + 120);
  uint64_t v7 = *(void **)(a1 + 96);
  if (v7)
  {
    *(void *)(a1 + 104) = v7;
    operator delete(v7);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 72), 8);
  uint64_t v8 = *(void **)(a1 + 48);
  if (v8)
  {
    *(void *)(a1 + 56) = v8;
    operator delete(v8);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 24), 8);
  uint64_t v10 = (void **)a1;
  sub_1CC0C4BCC(&v10);
  return a1;
}

uint64_t sub_1CC215538(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  sub_1CBC0FD34(*(void **)(a1 + 8));
  return a1;
}

llvm::raw_ostream *sub_1CC215578(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(llvm::raw_ostream ***)(a1 + 32);
  uint64_t v5 = *a2;
  unsigned int v6 = (char *)a2 + *a2 + 40;
  if (*a2)
  {
    LOBYTE(v8) = 1;
    unsigned int v9 = (unsigned __int8 *)(a2 + 5);
    do
    {
      int v10 = *v9;
      BOOL v14 = (v10 - 48) < 0xA || (v10 & 0xFFFFFFDF) - 65 < 0x1A || v10 == 46 || v10 == 95;
      BOOL v8 = v8 && v14;
      if ((v10 & 0x80) != 0)
      {
        uint64_t v7 = (unsigned int **)a1;
        goto LABEL_24;
      }
      ++v9;
      --v5;
    }
    while (v5);
    if (v8) {
      goto LABEL_2;
    }
    uint64_t v7 = (unsigned int **)(a1 + 16);
  }
  else
  {
LABEL_2:
    uint64_t v7 = (unsigned int **)(a1 + 8);
  }
LABEL_24:
  unsigned int v15 = **v7;
  uint64_t v16 = *(void *)(a1 + 24);
  unsigned int v17 = *(_DWORD *)(v16 + 8);
  if (v17 >= *(_DWORD *)(v16 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)v16 + 4 * v17) = *((_DWORD *)a2 + 2);
  ++*(_DWORD *)(v16 + 8);
  sub_1CD4FDBE4(*(void *)(a1 + 24), (char *)a2 + 40, v6);
  uint64_t result = sub_1CC2059BC(*v4, 1u, *(void *)(a1 + 24), v15);
  uint64_t v19 = 0;
  uint64_t v20 = (long long *)(a2 + 2);
  while (!*(_DWORD *)((char *)v20 + v19))
  {
    v19 += 4;
    if (v19 == 20) {
      goto LABEL_32;
    }
  }
  uint64_t v21 = *(uint64_t **)(a1 + 24);
  *((_DWORD *)v21 + 2) = 0;
  if (*((_DWORD *)v21 + 3) <= 4u) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v22 = *v21;
  long long v23 = *v20;
  *(_DWORD *)(v22 + 16) = *((_DWORD *)v20 + 4);
  *(_OWORD *)uint64_t v22 = v23;
  *((_DWORD *)v21 + 2) += 5;
  uint64_t result = sub_1CC2059BC(*v4, 2u, *(void *)(a1 + 24), **(_DWORD **)(a1 + 40));
LABEL_32:
  *(_DWORD *)(*(void *)(a1 + 24) + 8) = 0;
  return result;
}

uint64_t **sub_1CC215734(uint64_t **result, uint64_t **a2)
{
  unsigned int v2 = result[13];
  if (v2)
  {
    unint64_t v4 = result;
    uint64_t v5 = (unint64_t *)*v2;
    uint64_t v6 = v2[1] - *v2;
    if (!v6) {
      goto LABEL_6;
    }
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      uint64_t result = sub_1CD3CFB98(a2, v5, (uint64_t **)v5);
      ++v5;
      v7 -= 8;
    }
    while (v7);
    unsigned int v2 = v4[13];
    if (v2)
    {
LABEL_6:
      BOOL v8 = (unint64_t *)v2[3];
      uint64_t v9 = v2[4] - (void)v8;
      if (!v9) {
        goto LABEL_23;
      }
      uint64_t v10 = 16 * (v9 >> 4);
      do
      {
        uint64_t result = sub_1CD3CFB98(a2, v8, (uint64_t **)v8);
        v8 += 2;
        v10 -= 16;
      }
      while (v10);
      unsigned int v2 = v4[13];
      if (v2)
      {
LABEL_23:
        uint64_t v11 = (unint64_t *)v2[6];
        uint64_t v12 = v2[7] - (void)v11;
        if (!v12) {
          goto LABEL_24;
        }
        uint64_t v13 = 16 * (v12 >> 4);
        do
        {
          uint64_t result = sub_1CD3CFB98(a2, v11, (uint64_t **)v11);
          v11 += 2;
          v13 -= 16;
        }
        while (v13);
        unsigned int v2 = v4[13];
        if (v2)
        {
LABEL_24:
          BOOL v14 = (unint64_t *)v2[9];
          uint64_t v15 = v2[10] - (void)v14;
          if (!v15) {
            goto LABEL_18;
          }
          uint64_t v16 = 40 * (v15 / 40);
          do
          {
            uint64_t result = sub_1CD3CFB98(a2, v14, (uint64_t **)v14);
            v14 += 5;
            v16 -= 40;
          }
          while (v16);
          unsigned int v2 = v4[13];
          if (v2)
          {
LABEL_18:
            unsigned int v17 = (unint64_t *)v2[12];
            uint64_t v18 = v2[13] - (void)v17;
            if (v18)
            {
              uint64_t v19 = 40 * (v18 / 40);
              do
              {
                uint64_t result = sub_1CD3CFB98(a2, v17, (uint64_t **)v17);
                v17 += 5;
                v19 -= 40;
              }
              while (v19);
            }
          }
        }
      }
    }
  }
  return result;
}

_DWORD *sub_1CC21589C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v187[64] = *MEMORY[0x1E4F143B8];
  v175[0] = a2;
  v175[1] = (uint64_t *)a3;
  uint64_t v174 = a3;
  uint64_t v5 = *(llvm::raw_ostream ***)(a1 + 8);
  sub_1CD3CFB98(*(uint64_t ***)a1, (unint64_t *)v175, v175);
  uint64_t v6 = *(uint64_t **)(a3 + 40);
  uint64_t v7 = *(void *)(a3 + 48) - (void)v6;
  if (v7)
  {
    uint64_t v8 = 8 * (v7 >> 3);
    do
    {
      uint64_t v9 = *(uint64_t ***)a1;
      uint64_t v10 = *v6++;
      int v185 = *(void **)(v10 & 0xFFFFFFFFFFFFFFF8);
      sub_1CD3CFB98(v9, (unint64_t *)&v185, (uint64_t **)&v185);
      v8 -= 8;
    }
    while (v8);
  }
  uint64_t v12 = v5 + 5;
  uint64_t v11 = v5[5];
  if (!v11) {
    goto LABEL_15;
  }
  uint64_t v13 = v5 + 5;
  do
  {
    BOOL v14 = (uint64_t *)*((void *)v11 + 4);
    BOOL v15 = v14 >= v175[0];
    if (v14 >= v175[0]) {
      uint64_t v16 = (llvm::raw_ostream **)v11;
    }
    else {
      uint64_t v16 = (llvm::raw_ostream **)((char *)v11 + 8);
    }
    if (v15) {
      uint64_t v13 = (llvm::raw_ostream **)v11;
    }
    uint64_t v11 = *v16;
  }
  while (*v16);
  if (v13 != v12 && (uint64_t *)v13[4] <= v175[0]) {
    unsigned int v17 = *((_DWORD *)v13 + 10);
  }
  else {
LABEL_15:
  }
    unsigned int v17 = 0;
  uint64_t result = sub_1CD40EB18(*(void *)(a1 + 16), &v174);
  result[2] = v17;
  int v19 = *(_DWORD *)(a3 + 8);
  if (a3 && !v19)
  {
    uint64_t v20 = *(void *)(a1 + 24);
    unsigned int v21 = *(_DWORD *)(v20 + 8);
    if (v21 >= *(_DWORD *)(v20 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)v20 + 8 * v21) = a3;
    ++*(_DWORD *)(v20 + 8);
    return result;
  }
  unsigned int v169 = v5;
  uint64_t v170 = a3;
  if (a3 && v19 == 2)
  {
    uint64_t v22 = *(void *)(a1 + 32);
    unsigned int v23 = *(_DWORD *)(v22 + 8);
    if (v23 >= *(_DWORD *)(v22 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)v22 + 8 * v23) = v17;
    ++*(_DWORD *)(v22 + 8);
    uint64_t v24 = *(void *)(a1 + 32);
    unsigned int v171 = v5[2];
    uint64_t v25 = *((unsigned int *)v171 + 8);
    if (v25)
    {
      int v26 = *(const void **)(a3 + 24);
      size_t v27 = *(void *)(a3 + 32);
      uint64_t v167 = *(void *)(a1 + 32);
      int v28 = 0;
      if (v27)
      {
        uint64_t v29 = *(void *)(a3 + 32);
        int v30 = *(unsigned __int8 **)(a3 + 24);
        do
        {
          int v31 = *v30++;
          int v28 = 33 * v28 + v31;
          --v29;
        }
        while (v29);
      }
      unsigned int v32 = v25 - 1;
      uint64_t v33 = *((void *)v171 + 3);
      uint64_t v165 = *((unsigned int *)v171 + 8);
      uint64_t v34 = v33 + 8 * v25 + 8;
      int v35 = 1;
      int v36 = v28;
      while (1)
      {
        uint64_t v37 = v36 & v32;
        uint64_t v38 = *(void **)(v33 + 8 * v37);
        if (v38 != (void *)-8)
        {
          if (!v38) {
            goto LABEL_147;
          }
          if (*(_DWORD *)(v34 + 4 * v37) == v28 && v27 == *v38)
          {
            if (!v27) {
              break;
            }
            int v39 = (char *)v38 + *((unsigned int *)v171 + 11);
            unsigned int v40 = v26;
            int v41 = memcmp(v26, v39, v27);
            int v26 = v40;
            if (!v41) {
              break;
            }
          }
        }
        int v36 = v35 + v37;
        ++v35;
      }
      if (v37 == -1 || (int)v37 == v165) {
        uint64_t v38 = 0;
      }
      else {
        uint64_t v38 = *(void **)(*(void *)(v33 + 8 * (int)v37) + 8);
      }
LABEL_147:
      uint64_t v24 = v167;
    }
    else
    {
      uint64_t v38 = 0;
    }
    unsigned int v92 = *(_DWORD *)(v24 + 8);
    if (v92 >= *(_DWORD *)(v24 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)v24 + 8 * v92) = v38;
    ++*(_DWORD *)(v24 + 8);
    uint64_t v93 = *(void *)(a1 + 32);
    unsigned int v94 = *(_DWORD *)(v93 + 8);
    if (v94 >= *(_DWORD *)(v93 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)v93 + 8 * v94) = *(_DWORD *)(v170 + 12) & 0xFLL | (16
                                                                              * (((unint64_t)*(unsigned int *)(v170 + 12) >> 6) & 0xF)) & 0xFFFFFFFFFFFFFCFFLL | ((((unint64_t)*(unsigned int *)(v170 + 12) >> 4) & 3) << 8);
    ++*(_DWORD *)(v93 + 8);
    uint64_t v95 = *(void *)(a1 + 32);
    unsigned int v96 = *(_DWORD *)(v95 + 8);
    if (v96 >= *(_DWORD *)(v95 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)v95 + 8 * v96) = *(_DWORD *)(v170 + 72) & 0x1F;
    ++*(_DWORD *)(v95 + 8);
    unsigned int v97 = *(void **)(v170 + 40);
    for (uint64_t i = *(void **)(v170 + 48); v97 != i; ++v97)
    {
      unsigned int v99 = *v12;
      if (*v12)
      {
        unint64_t v100 = *(void *)(*v97 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v101 = v12;
        do
        {
          unint64_t v102 = *((void *)v99 + 4);
          BOOL v103 = v102 >= v100;
          if (v102 >= v100) {
            int v104 = (llvm::raw_ostream **)v99;
          }
          else {
            int v104 = (llvm::raw_ostream **)((char *)v99 + 8);
          }
          if (v103) {
            uint64_t v101 = (llvm::raw_ostream **)v99;
          }
          unsigned int v99 = *v104;
        }
        while (*v104);
        if (v101 != v12 && (unint64_t)v101[4] <= v100)
        {
          uint64_t v105 = *((unsigned int *)v101 + 10);
          uint64_t v106 = *(void *)(a1 + 32);
          unint64_t v107 = *(unsigned int *)(v106 + 8);
          if (v107 >= *(unsigned int *)(v106 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)v106 + 8 * v107) = v105;
          ++*(_DWORD *)(v106 + 8);
        }
      }
    }
    uint64_t result = sub_1CC207D3C(*v169, 6u, *(void *)(a1 + 32), **(_DWORD **)(a1 + 40));
    *(_DWORD *)(*(void *)(a1 + 32) + 8) = 0;
    int v108 = *(uint64_t **)(a1 + 48);
    uint64_t v109 = (llvm::raw_ostream **)*v108;
    if (!*(void *)(*v108 + 24) && (*(_WORD *)(v170 + 12) & 0xFu) - 7 <= 1)
    {
      uint64_t v110 = v108[1];
      uint64_t v111 = *(void *)(v170 + 16);
LABEL_238:
      unsigned int v164 = *(_DWORD *)(v110 + 8);
      if (v164 >= *(_DWORD *)(v110 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)v110 + 8 * v164) = v111;
      ++*(_DWORD *)(v110 + 8);
      uint64_t result = sub_1CC207D3C(*v109, 9u, v108[1], 0);
      *(_DWORD *)(v108[1] + 8) = 0;
      return result;
    }
    return result;
  }
  size_t v42 = *v5;
  uint64_t v43 = *(void *)(a3 + 104);
  if (v43)
  {
    uint64_t v44 = *(void *)(v43 + 8) - *(void *)v43;
    if (v44)
    {
      int v185 = *(void **)v43;
      uint64_t v186 = v44 >> 3;
      sub_1CC206B4C(v42, 0xBu, &v185);
      uint64_t v43 = *(void *)(a3 + 104);
      int v185 = v187;
      uint64_t v186 = 0x4000000000;
      if (!v43) {
        goto LABEL_75;
      }
    }
    else
    {
      int v185 = v187;
      uint64_t v186 = 0x4000000000;
    }
    uint64_t v45 = *(void **)(v43 + 24);
    uint64_t v46 = *(void **)(v43 + 32);
    if (v46 == v45) {
      goto LABEL_51;
    }
    unsigned int v47 = 0;
    LODWORD(v186) = 0;
    do
    {
      if (v47 >= HIDWORD(v186)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v185 + v47) = *v45;
      unsigned int v48 = v186 + 1;
      LODWORD(v186) = v48;
      if (v48 >= HIDWORD(v186)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v185 + v48) = v45[1];
      unsigned int v47 = v186 + 1;
      LODWORD(v186) = v186 + 1;
      v45 += 2;
    }
    while (v45 != v46);
    sub_1CC207D3C(v42, 0xCu, (uint64_t)&v185, 0);
    uint64_t v43 = *(void *)(a3 + 104);
    if (v43)
    {
LABEL_51:
      int v49 = *(void **)(v43 + 48);
      unsigned int v50 = *(void **)(v43 + 56);
      if (v50 == v49) {
        goto LABEL_60;
      }
      unsigned int v51 = 0;
      LODWORD(v186) = 0;
      do
      {
        if (v51 >= HIDWORD(v186)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v185 + v51) = *v49;
        unsigned int v52 = v186 + 1;
        LODWORD(v186) = v52;
        if (v52 >= HIDWORD(v186)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v185 + v52) = v49[1];
        unsigned int v51 = v186 + 1;
        LODWORD(v186) = v186 + 1;
        v49 += 2;
      }
      while (v49 != v50);
      sub_1CC207D3C(v42, 0xDu, (uint64_t)&v185, 0);
      uint64_t v43 = *(void *)(a3 + 104);
      if (v43)
      {
LABEL_60:
        uint64_t v53 = *(void *)(v43 + 72);
        uint64_t v54 = *(void *)(v43 + 80);
        if (v54 == v53) {
          goto LABEL_68;
        }
        do
        {
          LODWORD(v186) = 0;
          if (!HIDWORD(v186)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)int v185 = *(void *)v53;
          unsigned int v55 = v186 + 1;
          LODWORD(v186) = v55;
          if (v55 >= HIDWORD(v186)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v185 + v55) = *(void *)(v53 + 8);
          LODWORD(v186) = v186 + 1;
          sub_1CD4FD9BC((unsigned int *)&v185, (uint64_t)v185 + 8 * v186, *(char **)(v53 + 16), *(char **)(v53 + 24));
          sub_1CC207D3C(v42, 0xEu, (uint64_t)&v185, 0);
          v53 += 40;
        }
        while (v53 != v54);
        uint64_t v43 = *(void *)(a3 + 104);
        if (v43)
        {
LABEL_68:
          uint64_t v56 = *(void *)(v43 + 96);
          for (uint64_t j = *(void *)(v43 + 104); v56 != j; v56 += 40)
          {
            LODWORD(v186) = 0;
            if (!HIDWORD(v186)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)int v185 = *(void *)v56;
            unsigned int v58 = v186 + 1;
            LODWORD(v186) = v58;
            if (v58 >= HIDWORD(v186)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v185 + v58) = *(void *)(v56 + 8);
            LODWORD(v186) = v186 + 1;
            sub_1CD4FD9BC((unsigned int *)&v185, (uint64_t)v185 + 8 * v186, *(char **)(v56 + 16), *(char **)(v56 + 24));
            sub_1CC207D3C(v42, 0xFu, (uint64_t)&v185, 0);
          }
        }
      }
    }
  }
  else
  {
    int v185 = v187;
    uint64_t v186 = 0x4000000000;
  }
LABEL_75:
  char v172 = v42;
  unsigned int v184 = &v185;
  uint64_t v59 = *(uint64_t **)(a3 + 112);
  if (v59)
  {
    uint64_t v60 = *v59;
    uint64_t v61 = v59[1];
    if (v61 != *v59)
    {
      LODWORD(v186) = 0;
      do
      {
        unint64_t v62 = v186;
        if (v186 >= HIDWORD(v186)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v185 + v186) = *(void *)v60;
        LODWORD(v186) = v186 + 1;
        unsigned int v181 = *(_DWORD *)(v60 + 16);
        if (v181 > 0x40) {
          operator new[]();
        }
        uint64_t v180 = *(void *)(v60 + 8);
        unsigned int v183 = *(_DWORD *)(v60 + 32);
        if (v183 > 0x40) {
          operator new[]();
        }
        uint64_t v182 = *(void *)(v60 + 24);
        sub_1CC216B78((uint64_t *)&v184, (llvm::ConstantRange *)&v180);
        if (v183 >= 0x41 && v182) {
          MEMORY[0x1D25D9CB0](v182, 0x1000C8000313F17);
        }
        if (v181 >= 0x41 && v180) {
          MEMORY[0x1D25D9CB0](v180, 0x1000C8000313F17);
        }
        if (v186 >= (unint64_t)HIDWORD(v186)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v185 + v186) = 0xAAAAAAAAAAAAAAABLL
                                               * ((uint64_t)(*(void *)(v60 + 48) - *(void *)(v60 + 40)) >> 4);
        LODWORD(v186) = v186 + 1;
        uint64_t v63 = *(void *)(v60 + 40);
        uint64_t v64 = *(void *)(v60 + 48);
        while (v63 != v64)
        {
          if (v186 >= (unint64_t)HIDWORD(v186)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v185 + v186) = *(void *)v63;
          unsigned int v65 = v186 + 1;
          LODWORD(v186) = v186 + 1;
          uint64_t v66 = *v12;
          if (!*v12) {
            goto LABEL_112;
          }
          unint64_t v67 = *(void *)(*(void *)(v63 + 8) & 0xFFFFFFFFFFFFFFF8);
          unsigned int v68 = v12;
          do
          {
            unint64_t v69 = *((void *)v66 + 4);
            BOOL v70 = v69 >= v67;
            if (v69 >= v67) {
              uint64_t v71 = (llvm::raw_ostream **)v66;
            }
            else {
              uint64_t v71 = (llvm::raw_ostream **)((char *)v66 + 8);
            }
            if (v70) {
              unsigned int v68 = (llvm::raw_ostream **)v66;
            }
            uint64_t v66 = *v71;
          }
          while (*v71);
          if (v68 == v12 || (unint64_t)v68[4] > v67)
          {
LABEL_112:
            sub_1CD42769C((uint64_t)&v185, v62);
            break;
          }
          if (v65 >= HIDWORD(v186)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v185 + v65) = *((unsigned int *)v68 + 10);
          LODWORD(v186) = v186 + 1;
          unsigned int v177 = *(_DWORD *)(v63 + 24);
          if (v177 > 0x40) {
            operator new[]();
          }
          uint64_t v176 = *(void *)(v63 + 16);
          unsigned int v179 = *(_DWORD *)(v63 + 40);
          if (v179 > 0x40) {
            operator new[]();
          }
          uint64_t v178 = *(void *)(v63 + 32);
          sub_1CC216B78((uint64_t *)&v184, (llvm::ConstantRange *)&v176);
          if (v179 >= 0x41 && v178) {
            MEMORY[0x1D25D9CB0](v178, 0x1000C8000313F17);
          }
          if (v177 >= 0x41 && v176) {
            MEMORY[0x1D25D9CB0](v176, 0x1000C8000313F17);
          }
          v63 += 48;
        }
        v60 += 64;
      }
      while (v60 != v61);
      uint64_t v5 = v169;
      if (v186) {
        sub_1CC207D3C(v172, 0x19u, (uint64_t)&v185, 0);
      }
    }
  }
  if (v185 != v187) {
    free(v185);
  }
  sub_1CC215734((uint64_t **)v170, *(uint64_t ***)(a1 + 56));
  uint64_t v72 = *(void *)(a1 + 32);
  unsigned int v73 = *(_DWORD *)(v72 + 8);
  if (v73 >= *(_DWORD *)(v72 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v72 + 8 * v73) = v17;
  ++*(_DWORD *)(v72 + 8);
  uint64_t v74 = *(void *)(a1 + 32);
  uint64_t v173 = v5[2];
  uint64_t v75 = *((unsigned int *)v173 + 8);
  if (v75)
  {
    uint64_t v76 = *(const void **)(v170 + 24);
    size_t v77 = *(void *)(v170 + 32);
    uint64_t v168 = *(void *)(a1 + 32);
    int v78 = 0;
    if (v77)
    {
      uint64_t v79 = *(void *)(v170 + 32);
      unsigned int v80 = *(unsigned __int8 **)(v170 + 24);
      do
      {
        int v81 = *v80++;
        int v78 = 33 * v78 + v81;
        --v79;
      }
      while (v79);
    }
    unsigned int v82 = v75 - 1;
    uint64_t v83 = *((void *)v173 + 3);
    uint64_t v166 = *((unsigned int *)v173 + 8);
    uint64_t v84 = v83 + 8 * v75 + 8;
    int v85 = 1;
    int v86 = v78;
    while (1)
    {
      uint64_t v87 = v86 & v82;
      uint64_t v88 = *(void **)(v83 + 8 * v87);
      if (v88 != (void *)-8)
      {
        if (!v88) {
          goto LABEL_172;
        }
        if (*(_DWORD *)(v84 + 4 * v87) == v78 && v77 == *v88)
        {
          if (!v77) {
            break;
          }
          unsigned int v89 = (char *)v88 + *((unsigned int *)v173 + 11);
          uint64_t v90 = v76;
          int v91 = memcmp(v76, v89, v77);
          uint64_t v76 = v90;
          if (!v91) {
            break;
          }
        }
      }
      int v86 = v85 + v87;
      ++v85;
    }
    if (v87 == -1 || (int)v87 == v166) {
      uint64_t v88 = 0;
    }
    else {
      uint64_t v88 = *(void **)(*(void *)(v83 + 8 * (int)v87) + 8);
    }
LABEL_172:
    uint64_t v74 = v168;
  }
  else
  {
    uint64_t v88 = 0;
  }
  unsigned int v112 = *(_DWORD *)(v74 + 8);
  if (v112 >= *(_DWORD *)(v74 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v74 + 8 * v112) = v88;
  ++*(_DWORD *)(v74 + 8);
  uint64_t v113 = *(void *)(a1 + 32);
  unsigned int v114 = *(_DWORD *)(v113 + 8);
  if (v114 >= *(_DWORD *)(v113 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v113 + 8 * v114) = *(_DWORD *)(v170 + 12) & 0xFLL | (16
                                                                              * (((unint64_t)*(unsigned int *)(v170 + 12) >> 6) & 0xF)) & 0xFFFFFFFFFFFFFCFFLL | ((((unint64_t)*(unsigned int *)(v170 + 12) >> 4) & 3) << 8);
  ++*(_DWORD *)(v113 + 8);
  uint64_t v115 = *(void *)(a1 + 32);
  unsigned int v116 = *(_DWORD *)(v115 + 8);
  if (v116 >= *(_DWORD *)(v115 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v115 + 8 * v116) = *(unsigned int *)(v170 + 64);
  ++*(_DWORD *)(v115 + 8);
  uint64_t v117 = *(void *)(a1 + 32);
  unsigned int v118 = *(_DWORD *)(v117 + 8);
  if (v118 >= *(_DWORD *)(v117 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v117 + 8 * v118) = *(_DWORD *)(v170 + 68) & 0x3FF;
  ++*(_DWORD *)(v117 + 8);
  uint64_t v119 = *(void *)(a1 + 32);
  unsigned int v120 = *(_DWORD *)(v119 + 8);
  if (v120 >= *(_DWORD *)(v119 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v119 + 8 * v120) = *(void *)(v170 + 72);
  ++*(_DWORD *)(v119 + 8);
  uint64_t v121 = *(void *)(a1 + 32);
  unsigned int v122 = *(_DWORD *)(v121 + 8);
  if (v122 >= *(_DWORD *)(v121 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v121 + 8 * v122) = 0;
  ++*(_DWORD *)(v121 + 8);
  uint64_t v123 = *(void *)(a1 + 32);
  unsigned int v124 = *(_DWORD *)(v123 + 8);
  if (v124 >= *(_DWORD *)(v123 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v123 + 8 * v124) = 0;
  ++*(_DWORD *)(v123 + 8);
  uint64_t v125 = *(void *)(a1 + 32);
  unsigned int v126 = *(_DWORD *)(v125 + 8);
  if (v126 >= *(_DWORD *)(v125 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v125 + 8 * v126) = 0;
  ++*(_DWORD *)(v125 + 8);
  unsigned int v127 = *(void **)(v170 + 40);
  unsigned int v128 = *(void **)(v170 + 48);
  if (v128 == v127)
  {
    unsigned int v131 = 0;
    unsigned int v130 = 0;
    unsigned int v129 = 0;
  }
  else
  {
    unsigned int v129 = 0;
    unsigned int v130 = 0;
    unsigned int v131 = 0;
    do
    {
      unsigned int v132 = *v12;
      if (*v12)
      {
        unint64_t v133 = *(void *)(*v127 & 0xFFFFFFFFFFFFFFF8);
        int v134 = v12;
        do
        {
          unint64_t v135 = *((void *)v132 + 4);
          BOOL v136 = v135 >= v133;
          if (v135 >= v133) {
            uint64_t v137 = (llvm::raw_ostream **)v132;
          }
          else {
            uint64_t v137 = (llvm::raw_ostream **)((char *)v132 + 8);
          }
          if (v136) {
            int v134 = (llvm::raw_ostream **)v132;
          }
          unsigned int v132 = *v137;
        }
        while (*v137);
        if (v134 != v12 && (unint64_t)v134[4] <= v133)
        {
          uint64_t v138 = *(void *)(a1 + 32);
          unint64_t v139 = *(unsigned int *)(v138 + 8);
          if (v139 >= *(unsigned int *)(v138 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)v138 + 8 * v139) = *((unsigned int *)v134 + 10);
          ++*(_DWORD *)(v138 + 8);
          v130 += (*v127 & 2uLL) >> 1;
          if ((*v127 & 2) != 0) {
            unsigned int v140 = 0;
          }
          else {
            unsigned int v140 = (*v127 >> 2) & 1;
          }
          v129 += v140;
          ++v131;
        }
      }
      ++v127;
    }
    while (v127 != v128);
  }
  uint64_t v141 = *(void **)(a1 + 32);
  int v142 = (void *)*v141;
  v142[6] = v131;
  v142[7] = v130;
  v142[8] = v129;
  uint64_t v144 = *(void *)(v170 + 80);
  uint64_t v143 = *(void *)(v170 + 88);
  uint64_t v145 = v143 - v144;
  if (v143 == v144)
  {
LABEL_234:
    unsigned int v162 = (unsigned int **)(a1 + 72);
    unsigned int v163 = 4;
  }
  else
  {
    uint64_t v146 = 0;
    uint64_t v147 = v144 + (v145 & 0xFFFFFFFFFFFFFFF0);
    uint64_t v148 = 16 * (v145 >> 4) - 16;
    do
    {
      int v149 = *(_DWORD *)(v144 + v146 + 8) & 7;
      if (v149) {
        BOOL v150 = 1;
      }
      else {
        BOOL v150 = v148 == v146;
      }
      v146 += 16;
    }
    while (!v150);
    do
    {
      while (1)
      {
        unsigned int v156 = *v12;
        if (!*v12) {
          break;
        }
        unint64_t v157 = *(void *)(*(void *)v144 & 0xFFFFFFFFFFFFFFF8);
        int v158 = v12;
        do
        {
          unint64_t v159 = *((void *)v156 + 4);
          BOOL v160 = v159 >= v157;
          if (v159 >= v157) {
            unsigned int v161 = (llvm::raw_ostream **)v156;
          }
          else {
            unsigned int v161 = (llvm::raw_ostream **)((char *)v156 + 8);
          }
          if (v160) {
            int v158 = (llvm::raw_ostream **)v156;
          }
          unsigned int v156 = *v161;
        }
        while (*v161);
        if (v158 == v12 || (unint64_t)v158[4] > v157) {
          break;
        }
        uint64_t v151 = *((unsigned int *)v158 + 10);
        uint64_t v152 = *(void *)(a1 + 32);
        unint64_t v153 = *(unsigned int *)(v152 + 8);
        if (v153 >= *(unsigned int *)(v152 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)v152 + 8 * v153) = v151;
        ++*(_DWORD *)(v152 + 8);
        if (v149)
        {
          uint64_t v154 = *(void *)(a1 + 32);
          unint64_t v155 = *(unsigned int *)(v154 + 8);
          if (v155 >= *(unsigned int *)(v154 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)v154 + 8 * v155) = *(_DWORD *)(v144 + 8) & 7;
          ++*(_DWORD *)(v154 + 8);
          v144 += 16;
          if (v144 == v147)
          {
            uint64_t v141 = *(void **)(a1 + 32);
            goto LABEL_233;
          }
        }
        else
        {
          v144 += 16;
          if (v144 == v147)
          {
            uint64_t v141 = *(void **)(a1 + 32);
            goto LABEL_234;
          }
        }
      }
      v144 += 16;
    }
    while (v144 != v147);
    uint64_t v141 = *(void **)(a1 + 32);
    if (!v149) {
      goto LABEL_234;
    }
LABEL_233:
    unsigned int v162 = (unsigned int **)(a1 + 64);
    unsigned int v163 = 5;
  }
  uint64_t result = sub_1CC207D3C(*v169, v163, (uint64_t)v141, **v162);
  *(_DWORD *)(*(void *)(a1 + 32) + 8) = 0;
  int v108 = *(uint64_t **)(a1 + 48);
  uint64_t v109 = (llvm::raw_ostream **)*v108;
  if (!*(void *)(*v108 + 24) && (*(_WORD *)(v174 + 12) & 0xFu) - 7 <= 1)
  {
    uint64_t v110 = v108[1];
    uint64_t v111 = *(void *)(v174 + 16);
    goto LABEL_238;
  }
  return result;
}

uint64_t sub_1CC216B78(uint64_t *a1, llvm::ConstantRange *this)
{
  llvm::ConstantRange::sextOrTrunc((unint64_t *)this, 0x40u, (uint64_t)&v8);
  if (*((_DWORD *)this + 2) >= 0x41u && *(void *)this) {
    MEMORY[0x1D25D9CB0](*(void *)this, 0x1000C8000313F17);
  }
  *(void *)this = v8;
  *((_DWORD *)this + 2) = v9;
  unsigned int v9 = 0;
  unint64_t v4 = (uint64_t *)((char *)this + 16);
  if (*((_DWORD *)this + 6) >= 0x41u && *v4)
  {
    MEMORY[0x1D25D9CB0](*v4, 0x1000C8000313F17);
    unsigned int v7 = v9;
    *((void *)this + 2) = v10;
    *((_DWORD *)this + 6) = v11;
    int v11 = 0;
    if (v7 >= 0x41 && v8) {
      MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
    }
  }
  else
  {
    *((void *)this + 2) = v10;
    *((_DWORD *)this + 6) = v11;
  }
  uint64_t v5 = (uint64_t *)this;
  if (*((_DWORD *)this + 2) >= 0x41u) {
    uint64_t v5 = *(uint64_t **)this;
  }
  sub_1CC20A668(*a1, *v5);
  if (*((_DWORD *)this + 6) >= 0x41u) {
    unint64_t v4 = (uint64_t *)*v4;
  }
  return sub_1CC20A668(*a1, *v4);
}

uint64_t sub_1CC216CB4(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(result + 32);
  int v4 = *(_DWORD *)(result + 24);
  unsigned int v5 = *(_DWORD *)(result + 28) | (3 << v4);
  *(_DWORD *)(result + 28) = v5;
  unsigned int v6 = v4 + v3;
  if ((v4 + v3) >= 0x20)
  {
    uint64_t v12 = *(void **)result;
    uint64_t v13 = *(void *)(*(void *)result + 8);
    if (*(void *)(*(void *)result + 16) < (unint64_t)(v13 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)(*v12 + v13) = v5;
    v12[1] += 4;
    BOOL v14 = *(llvm::raw_ostream **)(result + 8);
    if (v14)
    {
      size_t v29 = *(void *)(*(void *)result + 8);
      if (v29 >= *(void *)(result + 16))
      {
        unsigned int v42 = v2;
        uint64_t v30 = result;
        uint64_t v31 = a2;
        char v32 = v3;
        llvm::raw_ostream::write(v14, **(const char ***)result, v29);
        LOBYTE(v3) = v32;
        unsigned int v2 = v42;
        uint64_t result = v30;
        a2 = v31;
        *(void *)(*(void *)v30 + 8) = 0;
      }
    }
    int v15 = *(_DWORD *)(result + 24);
    if (v15) {
      unsigned int v5 = 3u >> -(char)v15;
    }
    else {
      unsigned int v5 = 0;
    }
    unsigned int v6 = ((_BYTE)v15 + (_BYTE)v3) & 0x1F;
  }
  unsigned int v7 = (17 << v6) | v5;
  *(_DWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 28) = v7;
  if (v6 >= 0x1A)
  {
    uint64_t v16 = *(const char ***)result;
    uint64_t v17 = *(void *)(*(void *)result + 8);
    if (*(void *)(*(void *)result + 16) < (unint64_t)(v17 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)&(*v16)[v17] = v7;
    v16[1] += 4;
    uint64_t v18 = *(llvm::raw_ostream **)(result + 8);
    if (v18)
    {
      size_t v33 = *(void *)(*(void *)result + 8);
      if (v33 >= *(void *)(result + 16))
      {
        unsigned int v43 = v2;
        uint64_t v34 = result;
        uint64_t v35 = a2;
        llvm::raw_ostream::write(v18, **(const char ***)result, v33);
        unsigned int v2 = v43;
        uint64_t result = v34;
        a2 = v35;
        *(void *)(*(void *)v34 + 8) = 0;
      }
    }
    int v19 = *(_DWORD *)(result + 24);
    if (v19) {
      unsigned int v7 = 0x11u >> -(char)v19;
    }
    else {
      unsigned int v7 = 0;
    }
    *(_DWORD *)(result + 28) = v7;
    int v8 = ((_BYTE)v19 + 6) & 0x1F;
  }
  else
  {
    int v8 = v6 + 6;
  }
  *(_DWORD *)(result + 24) = v8;
  unsigned int v9 = v2;
  if (v2 >= 0x20)
  {
    unsigned int v41 = v2;
    uint64_t v45 = result;
    uint64_t v40 = a2;
    unsigned int v9 = v2;
    do
    {
      unsigned int v25 = v9;
      sub_1CC202230(v45, v9 & 0x1F | 0x20, 6);
      unsigned int v9 = v25 >> 5;
    }
    while (v25 > 0x3FF);
    unsigned int v2 = v41;
    uint64_t result = v45;
    int v8 = *(_DWORD *)(v45 + 24);
    unsigned int v7 = *(_DWORD *)(v45 + 28);
    a2 = v40;
  }
  int v10 = (v9 << v8) | v7;
  *(_DWORD *)(result + 28) = v10;
  unsigned int v11 = v8 + 6;
  if (v11 >= 0x20)
  {
    uint64_t v20 = *(const char ***)result;
    uint64_t v21 = *(void *)(*(void *)result + 8);
    if (*(void *)(*(void *)result + 16) < (unint64_t)(v21 + 4)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)&(*v20)[v21] = v10;
    v20[1] += 4;
    uint64_t v22 = *(llvm::raw_ostream **)(result + 8);
    if (v22)
    {
      size_t v36 = *(void *)(*(void *)result + 8);
      if (v36 >= *(void *)(result + 16))
      {
        unsigned int v44 = v2;
        uint64_t v37 = result;
        uint64_t v38 = a2;
        unsigned int v39 = v9;
        llvm::raw_ostream::write(v22, **(const char ***)result, v36);
        unsigned int v9 = v39;
        unsigned int v2 = v44;
        uint64_t result = v37;
        a2 = v38;
        *(void *)(*(void *)v37 + 8) = 0;
      }
    }
    int v23 = *(_DWORD *)(result + 24);
    unsigned int v24 = v9 >> -(char)v23;
    if (!v23) {
      unsigned int v24 = 0;
    }
    *(_DWORD *)(result + 28) = v24;
    unsigned int v11 = ((_BYTE)v23 + 6) & 0x1F;
  }
  *(_DWORD *)(result + 24) = v11;
  if (v2)
  {
    uint64_t v26 = 0;
    uint64_t v27 = 4 * v2;
    do
    {
      uint64_t v46 = result;
      uint64_t v28 = a2;
      sub_1CC202E58(result, *(unsigned int *)(*(void *)a2 + v26), 6);
      uint64_t result = v46;
      a2 = v28;
      v26 += 4;
    }
    while (v27 != v26);
  }
  return result;
}

void sub_1CC217064(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40)) {
    free(v2);
  }
}

void sub_1CC217084(unint64_t *a1, size_t a2)
{
  unsigned int v5 = (char *)a1[1];
  int v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    unsigned int v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      abort();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v7[v11];
    uint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      BOOL v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      unsigned int v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void *sub_1CC2171BC(void *result, char *a2, char *a3)
{
  uint64_t v3 = a3 - a2;
  uint64_t v4 = result[1];
  if (result[2] < (unint64_t)(v4 + a3 - a2)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (a2 != a3)
  {
    unsigned int v5 = (unsigned char *)(*result + v4);
    do
    {
      char v6 = *a2++;
      *v5++ = v6;
    }
    while (a2 != a3);
    uint64_t v4 = result[1];
  }
  result[1] = v4 + v3;
  return result;
}

uint64_t sub_1CC21724C()
{
  int v4 = 1;
  int v1 = 25;
  v2.n128_u64[0] = (unint64_t)"Number of metadatas above which we emit an index to enable lazy-loading";
  v2.n128_u64[1] = 71;
  uint64_t v3 = &v1;
  sub_1CD45A86C((uint64_t)&unk_1EBCC8A88, "bitcode-mdindex-threshold", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCC8A88, &dword_1CB82C000);
  int v4 = 1;
  int v1 = 512;
  v2.n128_u64[0] = (unint64_t)"The threshold (unit M) for flushing LLVM bitcode.";
  v2.n128_u64[1] = 49;
  uint64_t v3 = &v1;
  sub_1CD45A86C((uint64_t)&unk_1EBCC8B48, "bitcode-flush-threshold", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCC8B48, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"Write relative block frequency to function summary ";
  v2.n128_u64[1] = 51;
  uint64_t v3 = &v1;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCC8C08, "write-relbf-to-summary", &v4, (unsigned char **)&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC8C08, &dword_1CB82C000);
}

void llvm::initializeWriteBitcodePassPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC8CD0, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC21740C;
    v3[1] = &v1;
    __n128 v2 = v3;
    std::__call_once(&qword_1EBCC8CD0, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC21740C(llvm *a1, llvm::PassRegistry *a2)
{
}

void sub_1CC2174AC()
{
}

void sub_1CC217580(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC2175B8()
{
  return "Bitcode Writer";
}

void sub_1CC2175C8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  if (*(unsigned char *)(a1 + 41)) {
    sub_1CB843600(a2, a2, (uint64_t)&llvm::ModuleSummaryIndexWrapperPass::ID);
  }
}

void sub_1CC2175EC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 41))
  {
    uint64_t v1 = *(uint64_t **)(a1 + 8);
    uint64_t v2 = *v1;
    uint64_t v3 = v1[1];
    if (v2 == v3)
    {
LABEL_5:
      uint64_t v4 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v2 != &llvm::ModuleSummaryIndexWrapperPass::ID)
      {
        v2 += 16;
        if (v2 == v3) {
          goto LABEL_5;
        }
      }
      uint64_t v4 = *(void *)(v2 + 8);
    }
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 96))(v4, &llvm::ModuleSummaryIndexWrapperPass::ID);
  }
  llvm::WriteBitcodeToFile();
}

llvm::ValueEnumerator *llvm::ValueEnumerator::ValueEnumerator(llvm::ValueEnumerator *this, const llvm::Module *a2, int a3)
{
  uint64_t v3 = a2;
  uint64_t v221 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)((char *)this + 28) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = (char *)this + 128;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *(_OWORD *)((char *)this + 220) = 0u;
  *((void *)this + 30) = 1;
  *((_DWORD *)this + 62) = -1;
  *((unsigned char *)this + 264) = a3;
  *(void *)((char *)this + 452) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  *((_DWORD *)this + 72) = 0;
  *(_OWORD *)((char *)this + 324) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 372) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  *((_DWORD *)this + 102) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 54) = 0;
  *((void *)this + 55) = 0;
  if (!a3) {
    goto LABEL_2;
  }
  uint64_t v220 = 0;
  uint64_t v83 = (char *)a2 + 8;
  unsigned int v217 = 0;
  uint64_t v218 = 0;
  int v219 = 0;
  for (uint64_t i = *((void *)a2 + 2); (char *)i != v83; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v85 = i - 56;
    if (!i)
    {
      uint64_t v85 = 0;
LABEL_172:
      if (!*(unsigned char *)(v85 + 16) && *(void *)(v85 + 72) == v85 + 72 && (*(unsigned char *)(v85 + 34) & 0x80) == 0) {
        continue;
      }
      goto LABEL_175;
    }
    if (*(unsigned char *)(i - 40) != 3) {
      goto LABEL_172;
    }
    if ((*(_DWORD *)(i - 36) & 0x7FFFFFF) == 0) {
      continue;
    }
LABEL_175:
    uint64_t v86 = *(void *)(v85 - 32);
    if (*(unsigned __int8 *)(v86 + 16) >= 4u) {
      sub_1CC21B0E0(v86, (uint64_t)&v217);
    }
  }
  iuint64_t i = (char *)v3 + 40;
  for (uint64_t j = *((void *)v3 + 6); (char *)j != ii; uint64_t j = *(void *)(j + 8))
  {
    uint64_t v89 = j - 48;
    if (!j) {
      uint64_t v89 = 0;
    }
    uint64_t v90 = *(void *)(v89 - 32);
    if (*(unsigned __int8 *)(v90 + 16) >= 4u) {
      sub_1CC21B0E0(v90, (uint64_t)&v217);
    }
  }
  int v91 = (char *)v3 + 56;
  for (uint64_t k = *((void *)v3 + 8); (char *)k != v91; uint64_t k = *(void *)(k + 8))
  {
    uint64_t v93 = k - 56;
    if (!k) {
      uint64_t v93 = 0;
    }
    uint64_t v94 = *(void *)(v93 - 32);
    if (*(unsigned __int8 *)(v94 + 16) >= 4u) {
      sub_1CC21B0E0(v94, (uint64_t)&v217);
    }
  }
  uint64_t v95 = (void **)((char *)v3 + 24);
  unsigned int v96 = (void *)*((void *)v3 + 4);
  unsigned int v212 = v3;
  int v214 = (void **)((char *)v3 + 24);
  uint64_t v208 = (char *)v3 + 40;
  uint64_t v210 = (char *)v3 + 8;
  uint64_t v206 = (char *)v3 + 56;
  if (v96 == (void *)((char *)v3 + 24)) {
    goto LABEL_206;
  }
  while (2)
  {
    if (v96) {
      unsigned int v97 = v96 - 7;
    }
    else {
      unsigned int v97 = 0;
    }
    int v98 = *((_DWORD *)v97 + 5);
    if ((v98 & 0x40000000) != 0)
    {
      unint64_t v100 = (uint64_t *)*(v97 - 1);
      uint64_t v99 = v98 & 0x7FFFFFF;
      if (!v99) {
        goto LABEL_204;
      }
    }
    else
    {
      uint64_t v99 = v98 & 0x7FFFFFF;
      unint64_t v100 = &v97[-4 * v99];
      if (!v99) {
        goto LABEL_204;
      }
    }
    uint64_t v101 = 32 * v99;
    do
    {
      if (*(unsigned __int8 *)(*v100 + 16) >= 4u) {
        sub_1CC21B0E0(*v100, (uint64_t)&v217);
      }
      v100 += 4;
      v101 -= 32;
    }
    while (v101);
LABEL_204:
    unsigned int v96 = (void *)v96[1];
    if (v96 != v95) {
      continue;
    }
    break;
  }
  uint64_t v102 = *((void *)v3 + 4);
  if ((void **)v102 == v95)
  {
LABEL_206:
    LODWORD(v220) = v218;
    goto LABEL_207;
  }
  while (2)
  {
    uint64_t v105 = v102 - 56;
    if (v102)
    {
      if (*(unsigned char *)(v102 - 40) != 3) {
        goto LABEL_219;
      }
      if ((*(_DWORD *)(v102 - 36) & 0x7FFFFFF) != 0)
      {
LABEL_222:
        uint64_t v106 = v105 + 72;
        for (uint64_t m = *(void *)(v105 + 80); m != v106; uint64_t m = *(void *)(m + 8))
        {
          uint64_t v108 = m - 24;
          if (!m) {
            uint64_t v108 = 0;
          }
          uint64_t v109 = v108 + 40;
          for (uint64_t n = *(void *)(v108 + 48); n != v109; uint64_t n = *(void *)(n + 8))
          {
            if (n) {
              uint64_t v111 = n - 24;
            }
            else {
              uint64_t v111 = 0;
            }
            int v112 = *(_DWORD *)(v111 + 20);
            if ((v112 & 0x40000000) != 0)
            {
              uint64_t v114 = *(void *)(v111 - 8);
              uint64_t v113 = v112 & 0x7FFFFFF;
            }
            else
            {
              uint64_t v113 = v112 & 0x7FFFFFF;
              uint64_t v114 = v111 - 32 * v113;
            }
            uint64_t v115 = v114 + 32 * v113;
            if (v113)
            {
              do
              {
                if (*(void *)v114) {
                  BOOL v116 = *(unsigned char *)(*(void *)v114 + 16) == 23;
                }
                else {
                  BOOL v116 = 0;
                }
                if (v116)
                {
                  uint64_t v117 = *(unsigned __int8 **)(*(void *)v114 + 24);
                  int v118 = *v117;
                  if ((v118 - 3) >= 0xFFFFFFFE)
                  {
                    uint64_t v125 = *((void *)v117 + 16);
                    int v126 = *(unsigned __int8 *)(v125 + 16);
                    if (v126 == 24 || (v126 - 4) <= 0x10) {
                      sub_1CC21B0E0(v125, (uint64_t)&v217);
                    }
                  }
                  else if (v118 == 32)
                  {
                    uint64_t v119 = *((unsigned int *)v117 + 8);
                    if (v119)
                    {
                      uint64_t v120 = *((void *)v117 + 3);
                      uint64_t v121 = 8 * v119;
                      do
                      {
                        uint64_t v122 = *(void *)(*(void *)v120 + 128);
                        int v123 = *(unsigned __int8 *)(v122 + 16);
                        if (v123 == 24 || (v123 - 4) <= 0x10) {
                          sub_1CC21B0E0(v122, (uint64_t)&v217);
                        }
                        v120 += 8;
                        v121 -= 8;
                      }
                      while (v121);
                    }
                  }
                }
                v114 += 32;
              }
              while (v114 != v115);
            }
          }
        }
      }
    }
    else
    {
      uint64_t v105 = 0;
LABEL_219:
      if (*(unsigned char *)(v105 + 16) || *(void *)(v105 + 72) != v105 + 72 || (*(unsigned char *)(v105 + 34) & 0x80) != 0) {
        goto LABEL_222;
      }
    }
    uint64_t v102 = *(void *)(v102 + 8);
    uint64_t v95 = v214;
    if ((void **)v102 != v214) {
      continue;
    }
    break;
  }
  uint64_t v83 = v210;
  uint64_t v3 = v212;
  uint64_t v203 = *((void *)v212 + 4);
  LODWORD(v220) = v218;
  int v91 = v206;
  for (iuint64_t i = v208; (void **)v203 != v214; v203 = *(void *)(v203 + 8))
  {
    if (v203) {
      uint64_t v204 = v203 - 56;
    }
    else {
      uint64_t v204 = 0;
    }
    sub_1CC21B0E0(v204, (uint64_t)&v217);
  }
LABEL_207:
  for (juint64_t j = *((void *)v3 + 6); (char *)jj != ii; juint64_t j = *(void *)(jj + 8))
  {
    if (jj) {
      uint64_t v104 = jj - 48;
    }
    else {
      uint64_t v104 = 0;
    }
    sub_1CC21B0E0(v104, (uint64_t)&v217);
  }
  for (kuint64_t k = *((void *)v3 + 8); (char *)kk != v91; kuint64_t k = *(void *)(kk + 8))
  {
    if (kk) {
      uint64_t v129 = kk - 56;
    }
    else {
      uint64_t v129 = 0;
    }
    sub_1CC21B0E0(v129, (uint64_t)&v217);
  }
  for (muint64_t m = *((void *)v3 + 2); (char *)mm != v83; muint64_t m = *(void *)(mm + 8))
  {
    if (mm) {
      uint64_t v131 = mm - 56;
    }
    else {
      uint64_t v131 = 0;
    }
    sub_1CC21B0E0(v131, (uint64_t)&v217);
  }
  HIDWORD(v220) = v218;
  uint64_t v132 = *((void *)v3 + 4);
  while (2)
  {
    if ((void **)v132 != v95)
    {
      if (v132) {
        uint64_t v133 = v132 - 56;
      }
      else {
        uint64_t v133 = 0;
      }
      if (v132 && *(unsigned char *)(v133 + 16) == 3)
      {
        if ((*(_DWORD *)(v133 + 20) & 0x7FFFFFF) == 0) {
          goto LABEL_327;
        }
      }
      else if (!*(unsigned char *)(v133 + 16) && *(void *)(v133 + 72) == v133 + 72 && (*(unsigned char *)(v133 + 34) & 0x80) == 0)
      {
        goto LABEL_327;
      }
      uint64_t v134 = v133 + 72;
      for (nuint64_t n = *(void *)(v133 + 80); nn != v134; nuint64_t n = *(void *)(nn + 8))
      {
        if (nn) {
          uint64_t v136 = nn - 24;
        }
        else {
          uint64_t v136 = 0;
        }
        sub_1CC21B0E0(v136, (uint64_t)&v217);
      }
      uint64_t v137 = sub_1CB923B44((llvm::Function *)v133);
      if (v137 != v138)
      {
        uint64_t v139 = v137;
        uint64_t v140 = v138;
        do
        {
          sub_1CC21B0E0(v139, (uint64_t)&v217);
          v139 += 40;
        }
        while (v139 != v140);
      }
      uint64_t v141 = *(void *)(v133 + 80);
      if (v141 == v134)
      {
LABEL_327:
        uint64_t v132 = *(void *)(v132 + 8);
        uint64_t v95 = v214;
        continue;
      }
LABEL_293:
      uint64_t v142 = v141 - 24;
      if (!v141) {
        uint64_t v142 = 0;
      }
      uint64_t v143 = v142 + 40;
      for (uint64_t i1 = *(void *)(v142 + 48); ; uint64_t i1 = *(void *)(i1 + 8))
      {
        if (i1 == v143)
        {
          uint64_t v141 = *(void *)(v141 + 8);
          if (v141 == v134)
          {
            for (uint64_t i2 = *(void *)(v133 + 80); i2 != v134; uint64_t i2 = *(void *)(i2 + 8))
            {
              uint64_t v153 = i2 - 24;
              if (!i2) {
                uint64_t v153 = 0;
              }
              uint64_t v154 = v153 + 40;
              for (uint64_t i3 = *(void *)(v153 + 48); i3 != v154; uint64_t i3 = *(void *)(i3 + 8))
              {
                if (i3) {
                  uint64_t v156 = i3 - 24;
                }
                else {
                  uint64_t v156 = 0;
                }
                sub_1CC21B0E0(v156, (uint64_t)&v217);
              }
            }
            goto LABEL_327;
          }
          goto LABEL_293;
        }
        if (i1) {
          uint64_t v145 = i1 - 24;
        }
        else {
          uint64_t v145 = 0;
        }
        int v146 = *(_DWORD *)(v145 + 20);
        if ((v146 & 0x40000000) != 0)
        {
          uint64_t v148 = *(uint64_t **)(v145 - 8);
          uint64_t v147 = v146 & 0x7FFFFFF;
          if (!v147) {
            goto LABEL_311;
          }
        }
        else
        {
          uint64_t v147 = v146 & 0x7FFFFFF;
          uint64_t v148 = (uint64_t *)(v145 - 32 * v147);
          if (!v147) {
            goto LABEL_311;
          }
        }
        uint64_t v149 = 32 * v147;
        do
        {
          int v150 = *(unsigned __int8 *)(*v148 + 16);
          if (v150 == 24 || (v150 - 4) <= 0x10) {
            sub_1CC21B0E0(*v148, (uint64_t)&v217);
          }
          v148 += 4;
          v149 -= 32;
        }
        while (v149);
LABEL_311:
        if (i1 && *(unsigned char *)(v145 + 16) == 91) {
          sub_1CC21B0E0(*(void *)(v145 + 96), (uint64_t)&v217);
        }
      }
    }
    break;
  }
  long long v215 = 0uLL;
  uint64_t v216 = 0;
  unint64_t v157 = *v95;
  while (v157 != v95)
  {
    if (v157) {
      uint64_t v158 = (uint64_t)(v157 - 7);
    }
    else {
      uint64_t v158 = 0;
    }
    if (v157 && *(unsigned char *)(v158 + 16) == 3)
    {
      if ((*(_DWORD *)(v158 + 20) & 0x7FFFFFF) == 0) {
        goto LABEL_385;
      }
    }
    else if (!*(unsigned char *)(v158 + 16) && *(void *)(v158 + 72) == v158 + 72 && (*(unsigned char *)(v158 + 34) & 0x80) == 0)
    {
      goto LABEL_385;
    }
    uint64_t v159 = v158 + 72;
    for (uint64_t i4 = *(void *)(v158 + 80); i4 != v159; uint64_t i4 = *(void *)(i4 + 8))
    {
      if (i4) {
        uint64_t v161 = i4 - 24;
      }
      else {
        uint64_t v161 = 0;
      }
      sub_1CC21AFB8(v161, v158, (uint64_t)&v217, (uint64_t *)&v215);
    }
    uint64_t v162 = sub_1CB923B44((llvm::Function *)v158);
    if (v162 != v163)
    {
      uint64_t v164 = v162;
      uint64_t v165 = v163;
      do
      {
        sub_1CC21AFB8(v164, v158, (uint64_t)&v217, (uint64_t *)&v215);
        v164 += 40;
      }
      while (v164 != v165);
    }
    uint64_t v166 = *(void *)(v158 + 80);
    if (v166 != v159)
    {
      while (1)
      {
        uint64_t v167 = v166 - 24;
        if (!v166) {
          uint64_t v167 = 0;
        }
        uint64_t v168 = v167 + 40;
        for (uint64_t i5 = *(void *)(v167 + 48); i5 != v168; uint64_t i5 = *(void *)(i5 + 8))
        {
          if (i5) {
            uint64_t v170 = i5 - 24;
          }
          else {
            uint64_t v170 = 0;
          }
          int v171 = *(_DWORD *)(v170 + 20);
          if ((v171 & 0x40000000) != 0)
          {
            uint64_t v173 = *(uint64_t **)(v170 - 8);
            uint64_t v172 = v171 & 0x7FFFFFF;
            if (!v172) {
              goto LABEL_369;
            }
          }
          else
          {
            uint64_t v172 = v171 & 0x7FFFFFF;
            uint64_t v173 = (uint64_t *)(v170 - 32 * v172);
            if (!v172) {
              goto LABEL_369;
            }
          }
          uint64_t v174 = 32 * v172;
          do
          {
            unsigned int v175 = *(unsigned __int8 *)(*v173 + 16);
            if (v175 < 0x15 || v175 == 24) {
              sub_1CC21AFB8(*v173, v158, (uint64_t)&v217, (uint64_t *)&v215);
            }
            v173 += 4;
            v174 -= 32;
          }
          while (v174);
LABEL_369:
          if (i5 && *(unsigned char *)(v170 + 16) == 91) {
            sub_1CC21AFB8(*(void *)(v170 + 96), v158, (uint64_t)&v217, (uint64_t *)&v215);
          }
        }
        uint64_t v166 = *(void *)(v166 + 8);
        if (v166 == v159)
        {
          for (uint64_t i6 = *(void *)(v158 + 80); i6 != v159; uint64_t i6 = *(void *)(i6 + 8))
          {
            uint64_t v178 = i6 - 24;
            if (!i6) {
              uint64_t v178 = 0;
            }
            uint64_t v179 = v178 + 40;
            for (uint64_t i7 = *(void *)(v178 + 48); i7 != v179; uint64_t i7 = *(void *)(i7 + 8))
            {
              if (i7) {
                uint64_t v181 = i7 - 24;
              }
              else {
                uint64_t v181 = 0;
              }
              sub_1CC21AFB8(v181, v158, (uint64_t)&v217, (uint64_t *)&v215);
            }
          }
          break;
        }
      }
    }
LABEL_385:
    unint64_t v157 = (void *)*v157;
    uint64_t v95 = v214;
  }
  uint64_t v3 = v212;
  for (uint64_t i8 = *((void *)v212 + 2); (char *)i8 != v210; uint64_t i8 = *(void *)(i8 + 8))
  {
    if (i8) {
      uint64_t v183 = i8 - 56;
    }
    else {
      uint64_t v183 = 0;
    }
    sub_1CC21AFB8(v183, 0, (uint64_t)&v217, (uint64_t *)&v215);
  }
  for (uint64_t i9 = *((void *)v212 + 4); (void **)i9 != v95; uint64_t i9 = *(void *)(i9 + 8))
  {
    if (i9) {
      uint64_t v185 = i9 - 56;
    }
    else {
      uint64_t v185 = 0;
    }
    sub_1CC21AFB8(v185, 0, (uint64_t)&v217, (uint64_t *)&v215);
  }
  for (uint64_t i10 = *((void *)v212 + 6); (char *)i10 != v208; uint64_t i10 = *(void *)(i10 + 8))
  {
    if (i10) {
      uint64_t v187 = i10 - 48;
    }
    else {
      uint64_t v187 = 0;
    }
    sub_1CC21AFB8(v187, 0, (uint64_t)&v217, (uint64_t *)&v215);
  }
  for (uint64_t i11 = *((void *)v212 + 8); (char *)i11 != v206; uint64_t i11 = *(void *)(i11 + 8))
  {
    if (i11) {
      uint64_t v189 = i11 - 56;
    }
    else {
      uint64_t v189 = 0;
    }
    sub_1CC21AFB8(v189, 0, (uint64_t)&v217, (uint64_t *)&v215);
  }
  for (uint64_t i12 = *((void *)v212 + 2); (char *)i12 != v210; uint64_t i12 = *(void *)(i12 + 8))
  {
    uint64_t v191 = i12 - 56;
    if (i12)
    {
      if (*(unsigned char *)(i12 - 40) == 3)
      {
        if ((*(_DWORD *)(i12 - 36) & 0x7FFFFFF) != 0) {
          goto LABEL_419;
        }
        continue;
      }
    }
    else
    {
      uint64_t v191 = 0;
    }
    if (*(unsigned char *)(v191 + 16) || *(void *)(v191 + 72) != v191 + 72 || (*(unsigned char *)(v191 + 34) & 0x80) != 0)
    {
LABEL_419:
      sub_1CC21AFB8(*(void *)(v191 - 32), 0, (uint64_t)&v217, (uint64_t *)&v215);
      continue;
    }
  }
  for (uint64_t i13 = *((void *)v212 + 6); (char *)i13 != v208; uint64_t i13 = *(void *)(i13 + 8))
  {
    uint64_t v193 = i13 - 48;
    if (!i13) {
      uint64_t v193 = 0;
    }
    sub_1CC21AFB8(*(void *)(v193 - 32), 0, (uint64_t)&v217, (uint64_t *)&v215);
  }
  for (uint64_t i14 = *((void *)v212 + 8); (char *)i14 != v206; uint64_t i14 = *(void *)(i14 + 8))
  {
    uint64_t v195 = i14 - 56;
    if (!i14) {
      uint64_t v195 = 0;
    }
    sub_1CC21AFB8(*(void *)(v195 - 32), 0, (uint64_t)&v217, (uint64_t *)&v215);
  }
  uint64_t v196 = *((void *)v212 + 4);
  while (2)
  {
    if ((void **)v196 != v95)
    {
      if (v196) {
        uint64_t v197 = v196 - 56;
      }
      else {
        uint64_t v197 = 0;
      }
      int v198 = *(_DWORD *)(v197 + 20);
      if ((v198 & 0x40000000) != 0)
      {
        int v200 = *(uint64_t **)(v197 - 8);
        uint64_t v199 = v198 & 0x7FFFFFF;
        if (!v199)
        {
LABEL_442:
          uint64_t v196 = *(void *)(v196 + 8);
          continue;
        }
      }
      else
      {
        uint64_t v199 = v198 & 0x7FFFFFF;
        int v200 = (uint64_t *)(v197 - 32 * v199);
        if (!v199) {
          goto LABEL_442;
        }
      }
      uint64_t v201 = 32 * v199;
      do
      {
        uint64_t v202 = *v200;
        v200 += 4;
        sub_1CC21AFB8(v202, 0, (uint64_t)&v217, (uint64_t *)&v215);
        v201 -= 32;
      }
      while (v201);
      goto LABEL_442;
    }
    break;
  }
  MEMORY[0x1D25D9CD0](v217, 8);
  sub_1CD4FE8E0((void **)this);
  *(_OWORD *)this = v215;
  *((void *)this + 2) = v216;
  uint64_t v216 = 0;
  long long v215 = 0uLL;
  unsigned int v217 = &v215;
  sub_1CC0C4BCC((void ***)&v217);
LABEL_2:
  unsigned int v5 = (char *)v3 + 8;
  for (uint64_t i15 = *((void *)v3 + 2); (char *)i15 != v5; uint64_t i15 = *(void *)(i15 + 8))
  {
    if (i15) {
      unsigned int v7 = (llvm::Type **)(i15 - 56);
    }
    else {
      unsigned int v7 = 0;
    }
    llvm::ValueEnumerator::EnumerateValue(this, (const llvm::Value *)v7);
    llvm::ValueEnumerator::EnumerateType(this, v7[3]);
  }
  for (i16 = (void *)*((void *)v3 + 4); i16 != (void *)((char *)v3 + 24); i16 = (void *)i16[1])
  {
    if (i16) {
      unint64_t v9 = (const llvm::Value *)(i16 - 7);
    }
    else {
      unint64_t v9 = 0;
    }
    llvm::ValueEnumerator::EnumerateValue(this, v9);
    llvm::ValueEnumerator::EnumerateType(this, *((llvm::Type **)v9 + 3));
    llvm::ValueEnumerator::EnumerateAttributes((uint64_t)this, *((void *)v9 + 14));
  }
  int v207 = (char *)v3 + 24;
  size_t v10 = (char *)v3 + 40;
  for (uint64_t i17 = *((void *)v3 + 6); (char *)i17 != v10; uint64_t i17 = *(void *)(i17 + 8))
  {
    if (i17) {
      uint64_t v12 = (llvm::Type **)(i17 - 48);
    }
    else {
      uint64_t v12 = 0;
    }
    llvm::ValueEnumerator::EnumerateValue(this, (const llvm::Value *)v12);
    llvm::ValueEnumerator::EnumerateType(this, v12[3]);
  }
  uint64_t v13 = (char *)v3 + 56;
  for (uint64_t i18 = *((void *)v3 + 8); (char *)i18 != v13; uint64_t i18 = *(void *)(i18 + 8))
  {
    if (i18) {
      char v15 = (llvm::Type **)(i18 - 56);
    }
    else {
      char v15 = 0;
    }
    llvm::ValueEnumerator::EnumerateValue(this, (const llvm::Value *)v15);
    llvm::ValueEnumerator::EnumerateType(this, v15[3]);
  }
  uint64_t v17 = *((void *)this + 12);
  uint64_t v16 = *((void *)this + 13);
  uint64_t v18 = *((void *)v3 + 2);
  while (2)
  {
    if ((char *)v18 != v5)
    {
      if (v18) {
        uint64_t v19 = v18 - 56;
      }
      else {
        uint64_t v19 = 0;
      }
      if (v18 && *(unsigned char *)(v19 + 16) == 3)
      {
        if ((*(_DWORD *)(v19 + 20) & 0x7FFFFFF) == 0) {
          goto LABEL_39;
        }
      }
      else if (!*(unsigned char *)(v19 + 16) && *(void *)(v19 + 72) == v19 + 72 && (*(unsigned char *)(v19 + 34) & 0x80) == 0)
      {
        goto LABEL_39;
      }
      llvm::ValueEnumerator::EnumerateValue(this, *(const llvm::Value **)(v19 - 32));
LABEL_39:
      if (*(void *)(v19 + 72))
      {
        uint64_t v20 = sub_1CC208414(v19, -1);
        llvm::ValueEnumerator::EnumerateAttributes((uint64_t)this, v20);
      }
      uint64_t v18 = *(void *)(v18 + 8);
      continue;
    }
    break;
  }
  for (uint64_t i19 = *((void *)v3 + 6); (char *)i19 != v10; uint64_t i19 = *(void *)(i19 + 8))
  {
    uint64_t v22 = i19 - 48;
    if (!i19) {
      uint64_t v22 = 0;
    }
    llvm::ValueEnumerator::EnumerateValue(this, *(const llvm::Value **)(v22 - 32));
  }
  for (uint64_t i20 = *((void *)v3 + 8); (char *)i20 != v13; uint64_t i20 = *(void *)(i20 + 8))
  {
    uint64_t v24 = i20 - 56;
    if (!i20) {
      uint64_t v24 = 0;
    }
    llvm::ValueEnumerator::EnumerateValue(this, *(const llvm::Value **)(v24 - 32));
  }
  uint64_t v25 = *((void *)v3 + 4);
  while (2)
  {
    if ((char *)v25 != v207)
    {
      if (v25) {
        uint64_t v26 = v25 - 56;
      }
      else {
        uint64_t v26 = 0;
      }
      int v27 = *(_DWORD *)(v26 + 20);
      if ((v27 & 0x40000000) != 0)
      {
        size_t v29 = *(const llvm::Value ***)(v26 - 8);
        uint64_t v28 = v27 & 0x7FFFFFF;
        if (!v28)
        {
LABEL_63:
          uint64_t v25 = *(void *)(v25 + 8);
          continue;
        }
      }
      else
      {
        uint64_t v28 = v27 & 0x7FFFFFF;
        size_t v29 = (const llvm::Value **)(v26 - 32 * v28);
        if (!v28) {
          goto LABEL_63;
        }
      }
      uint64_t v30 = 32 * v28;
      do
      {
        uint64_t v31 = *v29;
        v29 += 4;
        llvm::ValueEnumerator::EnumerateValue(this, v31);
        v30 -= 32;
      }
      while (v30);
      goto LABEL_63;
    }
    break;
  }
  llvm::ValueEnumerator::EnumerateType(this, (llvm::Type *)(**(void **)v3 + 1720));
  llvm::ValueEnumerator::EnumerateValueSymbolTable(this, *((uint64_t ***)v3 + 14));
  for (i21 = (const llvm::NamedMDNode *)*((void *)v3 + 10);
        i21 != (const llvm::Module *)((char *)v3 + 72);
        i21 = (const llvm::NamedMDNode *)*((void *)i21 + 1))
  {
    llvm::ValueEnumerator::EnumerateNamedMDNode(this, i21);
  }
  unsigned int v217 = &v219;
  v32.n128_u64[0] = 0x800000000;
  uint64_t v218 = 0x800000000;
  for (uint64_t i22 = *((void *)v3 + 2); (char *)i22 != v5; uint64_t i22 = *(void *)(i22 + 8))
  {
    if (i22) {
      uint64_t v35 = (unsigned char *)(i22 - 56);
    }
    else {
      uint64_t v35 = 0;
    }
    LODWORD(v218) = 0;
    llvm::Value::getAllMetadata(v35, (uint64_t)&v217);
    if (v218)
    {
      uint64_t v36 = 16 * v218;
      uint64_t v37 = (const llvm::Value ***)((char *)v217 + 8);
      do
      {
        uint64_t v38 = *v37;
        v37 += 2;
        llvm::ValueEnumerator::EnumerateMetadata((uint64_t)this, 0, v38);
        v36 -= 16;
      }
      while (v36);
    }
  }
  unint64_t v205 = v16 - v17;
  uint64_t v39 = *((void *)v3 + 4);
  while (2)
  {
    if ((char *)v39 != v207)
    {
      if (v39) {
        uint64_t v40 = v39 - 56;
      }
      else {
        uint64_t v40 = 0;
      }
      uint64_t v41 = sub_1CB923B44((llvm::Function *)v40);
      if ((llvm::Type **)v41 != v42)
      {
        unsigned int v43 = (llvm::Type **)v41;
        unsigned int v44 = v42;
        do
        {
          uint64_t v45 = *v43;
          v43 += 5;
          llvm::ValueEnumerator::EnumerateType(this, v45);
        }
        while (v43 != v44);
      }
      LODWORD(v218) = 0;
      llvm::Value::getAllMetadata((unsigned char *)v40, (uint64_t)&v217);
      if (!v218)
      {
LABEL_101:
        uint64_t v52 = v40 + 72;
        uint64_t v53 = *(void *)(v40 + 80);
        uint64_t v209 = v40 + 72;
        while (v53 != v52)
        {
          uint64_t v54 = v53 - 24;
          uint64_t v211 = v53;
          if (!v53) {
            uint64_t v54 = 0;
          }
          uint64_t v55 = *(void *)(v54 + 48);
          for (i23 = v54 + 40; v55 != i23; uint64_t v55 = *(void *)(v55 + 8))
          {
            if (v55) {
              uint64_t v56 = v55 - 24;
            }
            else {
              uint64_t v56 = 0;
            }
            int v57 = *(_DWORD *)(v56 + 20);
            if ((v57 & 0x40000000) != 0)
            {
              uint64_t v59 = *(uint64_t **)(v56 - 8);
              uint64_t v58 = v57 & 0x7FFFFFF;
            }
            else
            {
              uint64_t v58 = v57 & 0x7FFFFFF;
              uint64_t v59 = (uint64_t *)(v56 - 32 * v58);
            }
            uint64_t v60 = &v59[4 * v58];
            if (v58)
            {
              do
              {
                uint64_t v61 = *v59;
                if (*v59) {
                  BOOL v62 = *(unsigned char *)(*v59 + 16) == 23;
                }
                else {
                  BOOL v62 = 0;
                }
                if (v62)
                {
                  uint64_t v63 = *(unsigned __int8 **)(v61 + 24);
                  int v64 = *v63;
                  if (v64 != 2)
                  {
                    if (v64 == 32)
                    {
                      uint64_t v65 = *((unsigned int *)v63 + 8);
                      if (v65)
                      {
                        uint64_t v66 = (const llvm::Value ***)*((void *)v63 + 3);
                        uint64_t v67 = 8 * v65;
                        do
                        {
                          unsigned int v68 = *v66;
                          if (*(unsigned char *)*v66 == 1)
                          {
                            if (v39) {
                              unsigned int v69 = llvm::ValueEnumerator::getValueID((uint64_t)this, v39 - 56) + 1;
                            }
                            else {
                              unsigned int v69 = 0;
                            }
                            llvm::ValueEnumerator::EnumerateMetadata((uint64_t)this, v69, v68);
                          }
                          ++v66;
                          v67 -= 8;
                        }
                        while (v67);
                      }
                    }
                    else
                    {
                      if (v39) {
                        unsigned int v70 = llvm::ValueEnumerator::getValueID((uint64_t)this, v39 - 56) + 1;
                      }
                      else {
                        unsigned int v70 = 0;
                      }
                      llvm::ValueEnumerator::EnumerateMetadata((uint64_t)this, v70, (const llvm::Value **)v63);
                    }
                  }
                }
                else
                {
                  llvm::ValueEnumerator::EnumerateOperandType(this, (llvm::Type **)v61);
                }
                v59 += 4;
              }
              while (v59 != v60);
            }
            int v71 = *(unsigned __int8 *)(v56 + 16);
            if (v55 && v71 == 91)
            {
              llvm::ValueEnumerator::EnumerateType(this, **(llvm::Type ***)(v56 + 96));
              int v71 = *(unsigned __int8 *)(v56 + 16);
            }
            if (v55 && v71 == 62)
            {
              llvm::ValueEnumerator::EnumerateType(this, *(llvm::Type **)(v56 + 64));
              int v71 = *(unsigned __int8 *)(v56 + 16);
            }
            if (v55 && v71 == 59) {
              llvm::ValueEnumerator::EnumerateType(this, *(llvm::Type **)(v56 + 64));
            }
            llvm::ValueEnumerator::EnumerateType(this, *(llvm::Type **)v56);
            unsigned int v72 = *(unsigned __int8 *)(v56 + 16) - 33;
            if (v72 <= 0x33 && ((1 << v72) & 0x8000000000041) != 0)
            {
              llvm::ValueEnumerator::EnumerateAttributes((uint64_t)this, *(void *)(v55 + 40));
              llvm::ValueEnumerator::EnumerateType(this, *(llvm::Type **)(v55 + 48));
            }
            LODWORD(v218) = 0;
            llvm::Value::getAllMetadata((unsigned char *)v56, (uint64_t)&v217);
            if (v218)
            {
              uint64_t v73 = 0;
              uint64_t v74 = 16 * v218;
              do
              {
                uint64_t v75 = *(const llvm::Value ***)((char *)v217 + v73 + 8);
                if (v39) {
                  unsigned int v76 = llvm::ValueEnumerator::getValueID((uint64_t)this, v39 - 56) + 1;
                }
                else {
                  unsigned int v76 = 0;
                }
                llvm::ValueEnumerator::EnumerateMetadata((uint64_t)this, v76, v75);
                v73 += 16;
              }
              while (v74 != v73);
            }
            uint64_t v77 = *(void *)(v56 + 48);
            if (v77)
            {
              uint64_t v78 = *(unsigned int *)(v77 + 8);
              if (v78)
              {
                uint64_t v79 = -8 * v78;
                do
                {
                  unsigned int v80 = *(const llvm::Value ***)(v77 + v79);
                  if (v39) {
                    unsigned int v81 = llvm::ValueEnumerator::getValueID((uint64_t)this, v39 - 56) + 1;
                  }
                  else {
                    unsigned int v81 = 0;
                  }
                  llvm::ValueEnumerator::EnumerateMetadata((uint64_t)this, v81, v80);
                  v79 += 8;
                }
                while (v79);
              }
            }
          }
          uint64_t v52 = v209;
          uint64_t v53 = *(void *)(v211 + 8);
        }
        uint64_t v39 = *(void *)(v39 + 8);
        continue;
      }
      uint64_t v46 = 16 * v218;
      unsigned int v47 = (const llvm::Value ***)((char *)v217 + 8);
      while (2)
      {
        if (v39 && *(unsigned char *)(v40 + 16) == 3)
        {
          BOOL v48 = (*(_DWORD *)(v40 + 20) & 0x7FFFFFF) == 0;
LABEL_89:
          char v49 = v48;
        }
        else
        {
          if (!*(unsigned char *)(v40 + 16) && *(void *)(v40 + 72) == v40 + 72)
          {
            BOOL v48 = (*(unsigned char *)(v40 + 34) & 0x80) == 0;
            goto LABEL_89;
          }
          char v49 = 0;
        }
        unsigned int v50 = 0;
        unsigned int v51 = *v47;
        if (v39 && (v49 & 1) == 0) {
          unsigned int v50 = llvm::ValueEnumerator::getValueID((uint64_t)this, v40) + 1;
        }
        llvm::ValueEnumerator::EnumerateMetadata((uint64_t)this, v50, v51);
        v47 += 2;
        v46 -= 16;
        if (!v46) {
          goto LABEL_101;
        }
        continue;
      }
    }
    break;
  }
  llvm::ValueEnumerator::OptimizeConstants(this, v205 >> 4, (*((void *)this + 13) - *((void *)this + 12)) >> 4, v32);
  llvm::ValueEnumerator::organizeMetadata(this);
  if (v217 != &v219) {
    free(v217);
  }
  return this;
}

void llvm::ValueEnumerator::EnumerateValue(llvm::ValueEnumerator *this, const llvm::Value *a2)
{
  uint64_t v61 = a2;
  uint64_t v4 = (char *)this + 72;
  uint64_t v3 = *((void *)this + 9);
  int v5 = *((_DWORD *)this + 22);
  if (v5)
  {
    int v6 = v5 - 1;
    unsigned int v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    unint64_t v8 = (const llvm::Value **)(v3 + 16 * v7);
    unint64_t v9 = *v8;
    if (*v8 == a2) {
      goto LABEL_16;
    }
    size_t v10 = 0;
    int v11 = 1;
    while (v9 != (const llvm::Value *)-4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v9 == (const llvm::Value *)-8192;
      }
      if (v12) {
        size_t v10 = v8;
      }
      unsigned int v13 = v7 + v11++;
      unsigned int v7 = v13 & v6;
      unint64_t v8 = (const llvm::Value **)(v3 + 16 * v7);
      unint64_t v9 = *v8;
      if (*v8 == a2) {
        goto LABEL_16;
      }
    }
    if (v10) {
      BOOL v14 = v10;
    }
    else {
      BOOL v14 = v8;
    }
  }
  else
  {
    BOOL v14 = 0;
  }
  unint64_t v8 = (const llvm::Value **)sub_1CC21DC7C((uint64_t)this + 72, (uint64_t)&v61, (uint64_t *)&v61, v14);
  *unint64_t v8 = v61;
  *((_DWORD *)v8 + 2) = 0;
LABEL_16:
  int v15 = *((_DWORD *)v8 + 2);
  if (v15)
  {
    uint64_t v16 = *((void *)this + 12) + 16 * (v15 - 1);
    ++*(_DWORD *)(v16 + 8);
    return;
  }
  uint64_t v17 = (llvm::Type **)v61;
  unsigned int v18 = *((unsigned __int8 *)v61 + 16);
  if (v18 <= 3 && v18 != 1)
  {
    unint64_t v60 = *((void *)v61 + 6);
    if (v60)
    {
      sub_1CD4FE600((uint64_t)this + 120, &v60);
      uint64_t v17 = (llvm::Type **)v61;
    }
  }
  llvm::ValueEnumerator::EnumerateType(this, *v17);
  uint64_t v20 = (uint64_t)v61;
  if (!v61
    || *((unsigned __int8 *)v61 + 16) - 21 < 0xFFFFFFEF
    || (int v21 = *((_DWORD *)v61 + 5), v22 = v21 & 0x7FFFFFF, (v21 & 0x7FFFFFF) == 0))
  {
    uint64_t v25 = (const llvm::Value **)*((void *)this + 13);
    unint64_t v24 = *((void *)this + 14);
    if ((unint64_t)v25 >= v24)
    {
      int v27 = (char *)*((void *)this + 12);
      uint64_t v28 = ((char *)v25 - v27) >> 4;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 60) {
        goto LABEL_94;
      }
      uint64_t v30 = v24 - (void)v27;
      if (v30 >> 3 > v29) {
        unint64_t v29 = v30 >> 3;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v29;
      }
      if (v31)
      {
        if (v31 >> 60) {
          goto LABEL_95;
        }
        __n128 v32 = (char *)operator new(16 * v31);
      }
      else
      {
        __n128 v32 = 0;
      }
      uint64_t v46 = (uint64_t *)&v32[16 * v28];
      *uint64_t v46 = v20;
      v46[1] = 1;
      uint64_t v26 = v46 + 2;
      if (v25 != (const llvm::Value **)v27)
      {
        do
        {
          *((_OWORD *)v46 - 1) = *((_OWORD *)v25 - 1);
          v46 -= 2;
          v25 -= 2;
        }
        while (v25 != (const llvm::Value **)v27);
        uint64_t v25 = (const llvm::Value **)*((void *)this + 12);
      }
      *((void *)this + 12) = v46;
      *((void *)this + 13) = v26;
      *((void *)this + 14) = &v32[16 * v31];
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      *uint64_t v25 = v61;
      v25[1] = (const llvm::Value *)1;
      uint64_t v26 = v25 + 2;
    }
    *((void *)this + 13) = v26;
    *((_DWORD *)v8 + 2) = ((unint64_t)v26 - *((void *)this + 12)) >> 4;
    return;
  }
  if ((v21 & 0x40000000) != 0)
  {
    int v23 = (const llvm::Value **)*((void *)v61 - 1);
  }
  else
  {
    uint64_t v22 = v22;
    int v23 = (const llvm::Value **)((char *)v61 - 32 * v22);
  }
  uint64_t v33 = 32 * v22;
  do
  {
    if (*((unsigned char *)*v23 + 16) != 22) {
      llvm::ValueEnumerator::EnumerateValue(this, *v23);
    }
    v23 += 4;
    v33 -= 32;
  }
  while (v33);
  if (*(unsigned char *)(v20 + 16) == 5)
  {
    int v34 = *(unsigned __int16 *)(v20 + 18);
    if (v34 == 63)
    {
      llvm::ValueEnumerator::EnumerateValue(this, *(const llvm::Value **)(v20 + 56));
      int v34 = *(unsigned __int16 *)(v20 + 18);
    }
    if (v34 == 34)
    {
      uint64_t v35 = 24;
      if (*(unsigned char *)(v20 + 16) == 62) {
        uint64_t v35 = 64;
      }
      llvm::ValueEnumerator::EnumerateType(this, *(llvm::Type **)(v20 + v35));
    }
  }
  uint64_t v36 = v61;
  uint64_t v38 = (const llvm::Value **)*((void *)this + 13);
  unint64_t v37 = *((void *)this + 14);
  if ((unint64_t)v38 < v37)
  {
    *uint64_t v38 = v61;
    v38[1] = (const llvm::Value *)1;
    uint64_t v39 = v38 + 2;
    goto LABEL_77;
  }
  uint64_t v40 = (char *)*((void *)this + 12);
  uint64_t v41 = ((char *)v38 - v40) >> 4;
  unint64_t v42 = v41 + 1;
  if ((unint64_t)(v41 + 1) >> 60) {
LABEL_94:
  }
    abort();
  uint64_t v43 = v37 - (void)v40;
  if (v43 >> 3 > v42) {
    unint64_t v42 = v43 >> 3;
  }
  if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v44 = v42;
  }
  if (!v44)
  {
    uint64_t v45 = 0;
    goto LABEL_72;
  }
  if (v44 >> 60) {
LABEL_95:
  }
    sub_1CB833614();
  uint64_t v45 = (char *)operator new(16 * v44);
LABEL_72:
  unsigned int v47 = (const llvm::Value **)&v45[16 * v41];
  *unsigned int v47 = v36;
  v47[1] = (const llvm::Value *)1;
  uint64_t v39 = v47 + 2;
  if (v38 != (const llvm::Value **)v40)
  {
    do
    {
      *((_OWORD *)v47 - 1) = *((_OWORD *)v38 - 1);
      v47 -= 2;
      v38 -= 2;
    }
    while (v38 != (const llvm::Value **)v40);
    uint64_t v38 = (const llvm::Value **)*((void *)this + 12);
  }
  *((void *)this + 12) = v47;
  *((void *)this + 13) = v39;
  *((void *)this + 14) = &v45[16 * v44];
  if (v38) {
    operator delete(v38);
  }
LABEL_77:
  *((void *)this + 13) = v39;
  unint64_t v48 = ((unint64_t)v39 - *((void *)this + 12)) >> 4;
  int v49 = *((_DWORD *)this + 22);
  if (!v49)
  {
    uint64_t v59 = 0;
LABEL_91:
    uint64_t v53 = sub_1CC21DC7C((uint64_t)v4, (uint64_t)&v61, (uint64_t *)&v61, v59);
    *uint64_t v53 = v61;
    *((_DWORD *)v53 + 2) = 0;
    goto LABEL_92;
  }
  uint64_t v50 = *((void *)this + 9);
  int v51 = v49 - 1;
  unsigned int v52 = ((v61 >> 4) ^ (v61 >> 9)) & v51;
  uint64_t v53 = (void *)(v50 + 16 * v52);
  uint64_t v54 = *v53;
  if (v61 != (const llvm::Value *)*v53)
  {
    uint64_t v55 = 0;
    int v56 = 1;
    while (v54 != -4096)
    {
      if (v55) {
        BOOL v57 = 0;
      }
      else {
        BOOL v57 = v54 == -8192;
      }
      if (v57) {
        uint64_t v55 = v53;
      }
      unsigned int v58 = v52 + v56++;
      unsigned int v52 = v58 & v51;
      uint64_t v53 = (void *)(v50 + 16 * v52);
      uint64_t v54 = *v53;
      if (v61 == (const llvm::Value *)*v53) {
        goto LABEL_92;
      }
    }
    if (v55) {
      uint64_t v59 = v55;
    }
    else {
      uint64_t v59 = v53;
    }
    goto LABEL_91;
  }
LABEL_92:
  *((_DWORD *)v53 + 2) = v48;
}

void llvm::ValueEnumerator::EnumerateType(llvm::ValueEnumerator *this, llvm::Type *a2)
{
  uint64_t v43 = a2;
  int v5 = (char *)this + 24;
  uint64_t v4 = *((void *)this + 3);
  int v6 = *((_DWORD *)this + 10);
  unsigned int v7 = a2 >> 4;
  if (v6)
  {
    int v8 = v6 - 1;
    unsigned int v9 = v8 & (v7 ^ (a2 >> 9));
    size_t v10 = (uint64_t *)(v4 + 16 * v9);
    int v11 = (llvm::Type *)*v10;
    if ((llvm::Type *)*v10 == a2) {
      goto LABEL_11;
    }
    BOOL v12 = 0;
    int v13 = 1;
    while (v11 != (llvm::Type *)-4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == (llvm::Type *)-8192;
      }
      if (v14) {
        BOOL v12 = v10;
      }
      unsigned int v15 = v9 + v13++;
      unsigned int v9 = v15 & v8;
      size_t v10 = (uint64_t *)(v4 + 16 * v9);
      int v11 = (llvm::Type *)*v10;
      if ((llvm::Type *)*v10 == a2) {
        goto LABEL_11;
      }
    }
    if (v12) {
      uint64_t v41 = v12;
    }
    else {
      uint64_t v41 = v10;
    }
  }
  else
  {
    uint64_t v41 = 0;
  }
  size_t v10 = sub_1CC2205AC((uint64_t)v5, (uint64_t *)&v43, v41);
  *size_t v10 = (uint64_t)a2;
  *((_DWORD *)v10 + 2) = 0;
LABEL_11:
  if (*((_DWORD *)v10 + 2)) {
    return;
  }
  if (a2 && (*((_DWORD *)a2 + 2) & 0x4FF) == 0x10) {
    *((_DWORD *)v10 + 2) = -1;
  }
  uint64_t v16 = *((unsigned int *)a2 + 3);
  if (v16)
  {
    uint64_t v17 = (llvm::Type **)*((void *)a2 + 2);
    uint64_t v18 = 8 * v16;
    do
    {
      uint64_t v19 = *v17++;
      llvm::ValueEnumerator::EnumerateType(this, v19);
      v18 -= 8;
    }
    while (v18);
  }
  int v20 = *((_DWORD *)this + 10);
  if (v20)
  {
    uint64_t v21 = *((void *)this + 3);
    int v22 = v20 - 1;
    unsigned int v23 = v22 & (v7 ^ (a2 >> 9));
    unint64_t v24 = (uint64_t *)(v21 + 16 * v23);
    uint64_t v25 = (llvm::Type *)*v24;
    if ((llvm::Type *)*v24 == a2) {
      goto LABEL_28;
    }
    uint64_t v26 = 0;
    int v27 = 1;
    while (v25 != (llvm::Type *)-4096)
    {
      if (v26) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = v25 == (llvm::Type *)-8192;
      }
      if (v28) {
        uint64_t v26 = v24;
      }
      unsigned int v29 = v23 + v27++;
      unsigned int v23 = v29 & v22;
      unint64_t v24 = (uint64_t *)(v21 + 16 * v23);
      uint64_t v25 = (llvm::Type *)*v24;
      if ((llvm::Type *)*v24 == a2) {
        goto LABEL_28;
      }
    }
    if (v26) {
      unint64_t v42 = v26;
    }
    else {
      unint64_t v42 = v24;
    }
  }
  else
  {
    unint64_t v42 = 0;
  }
  unint64_t v24 = sub_1CC2205AC((uint64_t)v5, (uint64_t *)&v43, v42);
  *unint64_t v24 = (uint64_t)a2;
  *((_DWORD *)v24 + 2) = 0;
LABEL_28:
  if ((*((_DWORD *)v24 + 2) + 1) < 2)
  {
    unint64_t v31 = (void *)*((void *)this + 7);
    unint64_t v30 = *((void *)this + 8);
    if ((unint64_t)v31 >= v30)
    {
      uint64_t v33 = (void *)*((void *)this + 6);
      uint64_t v34 = v31 - v33;
      unint64_t v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 61) {
        abort();
      }
      uint64_t v36 = v30 - (void)v33;
      if (v36 >> 2 > v35) {
        unint64_t v35 = v36 >> 2;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v35;
      }
      if (v37)
      {
        if (v37 >> 61) {
          sub_1CB833614();
        }
        uint64_t v38 = (char *)operator new(8 * v37);
      }
      else
      {
        uint64_t v38 = 0;
      }
      uint64_t v39 = &v38[8 * v34];
      *(void *)uint64_t v39 = a2;
      __n128 v32 = v39 + 8;
      if (v31 != v33)
      {
        do
        {
          uint64_t v40 = *--v31;
          *((void *)v39 - 1) = v40;
          v39 -= 8;
        }
        while (v31 != v33);
        unint64_t v31 = (void *)*((void *)this + 6);
      }
      *((void *)this + 6) = v39;
      *((void *)this + 7) = v32;
      *((void *)this + 8) = &v38[8 * v37];
      if (v31) {
        operator delete(v31);
      }
    }
    else
    {
      *unint64_t v31 = a2;
      __n128 v32 = v31 + 1;
    }
    *((void *)this + 7) = v32;
    *((_DWORD *)v24 + 2) = ((unint64_t)v32 - *((void *)this + 6)) >> 3;
  }
}

void llvm::ValueEnumerator::EnumerateAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a2;
  if (!a2) {
    return;
  }
  uint64_t v3 = (uint64_t *)(a1 + 320);
  *(void *)&long long v27 = 0;
  char v4 = sub_1CC208488((uint64_t *)(a1 + 320), &v28, &v27);
  uint64_t v5 = v27;
  if (v4)
  {
    if (*(_DWORD *)(v27 + 8)) {
      goto LABEL_4;
    }
    goto LABEL_38;
  }
  int v22 = *(_DWORD *)(a1 + 328);
  unsigned int v23 = *(_DWORD *)(a1 + 336);
  if (4 * v22 + 4 >= 3 * v23)
  {
    v23 *= 2;
    goto LABEL_44;
  }
  if (v23 + ~v22 - *(_DWORD *)(a1 + 332) <= v23 >> 3)
  {
LABEL_44:
    sub_1CC2206E4((uint64_t)v3, v23);
    *(void *)&long long v27 = 0;
    sub_1CC208488(v3, &v28, &v27);
    uint64_t v5 = v27;
  }
  ++*(_DWORD *)(a1 + 328);
  if (*(void *)v5 != -4) {
    --*(_DWORD *)(a1 + 332);
  }
  *(void *)uint64_t v5 = v28;
  *(_DWORD *)(v5 + 8) = 0;
LABEL_38:
  unint64_t v24 = *(void **)(a1 + 352);
  if ((unint64_t)v24 >= *(void *)(a1 + 360))
  {
    uint64_t v25 = sub_1CBF63C18((void **)(a1 + 344), v28);
  }
  else
  {
    *unint64_t v24 = v28;
    uint64_t v25 = v24 + 1;
  }
  *(void *)(a1 + 352) = v25;
  *(_DWORD *)(v5 + 8) = ((unint64_t)v25 - *(void *)(a1 + 344)) >> 3;
LABEL_4:
  if (v28)
  {
    int v6 = *(_DWORD *)(v28 + 8);
    if (v6)
    {
      int v7 = v6 - 2;
      int v8 = -1;
      do
      {
        unsigned int v9 = v8 + 1;
        if (v28)
        {
          if (v9 < *(_DWORD *)(v28 + 8))
          {
            uint64_t v10 = *(void *)(v28 + 8 * v9 + 40);
            if (v10)
            {
              LODWORD(v27) = v8;
              *((void *)&v27 + 1) = v10;
              uint64_t v29 = 0;
              char v11 = sub_1CC208298((uint64_t *)(a1 + 272), (uint64_t)&v27, &v29);
              uint64_t v12 = v29;
              if ((v11 & 1) == 0)
              {
                int v13 = *(_DWORD *)(a1 + 280);
                unsigned int v14 = *(_DWORD *)(a1 + 288);
                if (4 * v13 + 4 >= 3 * v14)
                {
                  v14 *= 2;
                }
                else if (v14 + ~v13 - *(_DWORD *)(a1 + 284) > v14 >> 3)
                {
LABEL_18:
                  ++*(_DWORD *)(a1 + 280);
                  BOOL v15 = *(_DWORD *)v12 == -1 && *(void *)(v12 + 8) == -4;
                  if (!v15) {
                    --*(_DWORD *)(a1 + 284);
                  }
                  *(_DWORD *)uint64_t v12 = v27;
                  *(void *)(v12 + 8) = *((void *)&v27 + 1);
                  *(_DWORD *)(v12 + 16) = 0;
LABEL_24:
                  uint64_t v16 = *(_OWORD **)(a1 + 304);
                  if ((unint64_t)v16 >= *(void *)(a1 + 312))
                  {
                    uint64_t v17 = sub_1CC00319C((void **)(a1 + 296), &v27);
                  }
                  else
                  {
                    *uint64_t v16 = v27;
                    uint64_t v17 = v16 + 1;
                  }
                  *(void *)(a1 + 304) = v17;
                  *(_DWORD *)(v12 + 16) = ((unint64_t)v17 - *(void *)(a1 + 296)) >> 4;
                  uint64_t v18 = *(unsigned int *)(v10 + 8);
                  if (v18)
                  {
                    uint64_t v19 = (uint64_t *)(v10 + 48);
                    uint64_t v20 = 8 * v18;
                    do
                    {
                      uint64_t v21 = *v19;
                      uint64_t v29 = v21;
                      if (v21)
                      {
                        if (*(unsigned char *)(v21 + 8) == 3)
                        {
                          ValueAsType = (llvm::Type *)llvm::Attribute::getValueAsType((llvm::Attribute *)&v29);
                          llvm::ValueEnumerator::EnumerateType((llvm::ValueEnumerator *)a1, ValueAsType);
                        }
                      }
                      ++v19;
                      v20 -= 8;
                    }
                    while (v20);
                  }
                  goto LABEL_13;
                }
                sub_1CC220860(a1 + 272, v14);
                uint64_t v29 = 0;
                sub_1CC208298((uint64_t *)(a1 + 272), (uint64_t)&v27, &v29);
                uint64_t v12 = v29;
                goto LABEL_18;
              }
              if (!*(_DWORD *)(v29 + 16)) {
                goto LABEL_24;
              }
            }
          }
        }
LABEL_13:
        BOOL v15 = v8++ == v7;
      }
      while (!v15);
    }
  }
}

void llvm::ValueEnumerator::EnumerateValueSymbolTable(llvm::ValueEnumerator *this, uint64_t **a2)
{
  uint64_t v3 = *((unsigned int *)a2 + 2);
  if (v3)
  {
    for (uint64_t i = *a2; !*i || *i == -8; ++i)
      ;
  }
  else
  {
    uint64_t i = *a2;
  }
  uint64_t v6 = (uint64_t)&(*a2)[v3];
  if (i != (uint64_t *)v6)
  {
    uint64_t v7 = *i;
    do
    {
      llvm::ValueEnumerator::EnumerateValue(this, *(const llvm::Value **)(v7 + 8));
      do
      {
        uint64_t v8 = i[1];
        ++i;
        uint64_t v7 = v8;
        if (v8) {
          BOOL v9 = v7 == -8;
        }
        else {
          BOOL v9 = 1;
        }
      }
      while (v9);
    }
    while (i != (uint64_t *)v6);
  }
}

void llvm::ValueEnumerator::EnumerateNamedMetadata(llvm::ValueEnumerator *this, const llvm::Module *a2)
{
  uint64_t v2 = (const llvm::Module *)((char *)a2 + 72);
  uint64_t v3 = (const llvm::NamedMDNode *)*((void *)a2 + 10);
  if (v3 != (const llvm::Module *)((char *)a2 + 72))
  {
    do
    {
      llvm::ValueEnumerator::EnumerateNamedMDNode(this, v3);
      uint64_t v3 = (const llvm::NamedMDNode *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
}

void llvm::ValueEnumerator::EnumerateMetadata(uint64_t a1, uint64_t a2, const llvm::Value **a3)
{
  if (a2) {
    LODWORD(a2) = llvm::ValueEnumerator::getValueID(a1, a2) + 1;
  }

  llvm::ValueEnumerator::EnumerateMetadata(a1, a2, a3);
}

void llvm::ValueEnumerator::EnumerateOperandType(llvm::ValueEnumerator *this, llvm::Type **a2)
{
  llvm::ValueEnumerator::EnumerateType(this, *a2);
  unsigned int v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 <= 0x14)
  {
    int v5 = *((_DWORD *)this + 22);
    if (v5)
    {
      uint64_t v6 = *((void *)this + 9);
      int v7 = v5 - 1;
      unsigned int v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
      BOOL v9 = *(const llvm::Value **)(v6 + 16 * v8);
      if (v9 == (const llvm::Value *)a2) {
        return;
      }
      int v10 = 1;
      while (v9 != (const llvm::Value *)-4096)
      {
        unsigned int v11 = v8 + v10++;
        unsigned int v8 = v11 & v7;
        BOOL v9 = *(const llvm::Value **)(v6 + 16 * v8);
        if (v9 == (const llvm::Value *)a2) {
          return;
        }
      }
    }
    int v12 = *((_DWORD *)a2 + 5);
    if ((v12 & 0x40000000) != 0)
    {
      unsigned int v14 = (const llvm::Value **)*(a2 - 1);
      uint64_t v13 = v12 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v13 = v12 & 0x7FFFFFF;
      unsigned int v14 = &a2[-4 * v13];
    }
    if (v13)
    {
      uint64_t v18 = 32 * v13;
      do
      {
        if (*((unsigned char *)*v14 + 16) != 22) {
          llvm::ValueEnumerator::EnumerateOperandType(this, *v14);
        }
        v14 += 4;
        v18 -= 32;
      }
      while (v18);
      unsigned int v4 = *((unsigned __int8 *)a2 + 16);
    }
    if (v4 == 5)
    {
      int v15 = *((unsigned __int16 *)a2 + 9);
      if (v15 == 63)
      {
        llvm::ValueEnumerator::EnumerateOperandType(this, a2[7]);
        int v15 = *((unsigned __int16 *)a2 + 9);
      }
      if (v15 == 34)
      {
        uint64_t v16 = 3;
        if (*((unsigned char *)a2 + 16) == 62) {
          uint64_t v16 = 8;
        }
        uint64_t v17 = a2[v16];
        llvm::ValueEnumerator::EnumerateType(this, v17);
      }
    }
  }
}

void *llvm::ValueEnumerator::OptimizeConstants(void *this, unsigned int a2, unsigned int a3, __n128 a4)
{
  if (a2 != a3)
  {
    v43[11] = v4;
    v43[12] = v5;
    unsigned int v7 = a2;
    if (a2 + 1 != a3)
    {
      unsigned int v8 = this;
      if (!*((unsigned char *)this + 264))
      {
        uint64_t v9 = this[12];
        uint64_t v10 = v9 + 16 * a2;
        unsigned int v11 = (__n128 *)(v9 + 16 * a3);
        uint64_t v42 = a3;
        v43[0] = (uint64_t (*)(uint64_t))this;
        if ((uint64_t)(a3 - (unint64_t)a2) < 1)
        {
LABEL_48:
          sub_1CC21C6B4(v10, v11, v43, a3 - (unint64_t)v7, 0, 0, a4);
        }
        else
        {
          int v12 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
          unint64_t v13 = a3 - (unint64_t)a2;
          while (1)
          {
            unsigned int v14 = (__n128 *)operator new(16 * v13, v12);
            if (v14) {
              break;
            }
            BOOL v40 = v13 > 1;
            v13 >>= 1;
            if (!v40) {
              goto LABEL_48;
            }
          }
          int v15 = v14;
          sub_1CC21C6B4(v10, v11, v43, a3 - (unint64_t)v7, v14, v13, a4);
          operator delete(v15);
        }
        uint64_t v16 = v8[12];
        v43[0] = (uint64_t (*)(uint64_t))sub_1CC219D2C;
        uint64_t v17 = (uint64_t *)(v16 + 16 * v7);
        uint64_t v18 = 16 * v42 - 16 * v7;
        uint64_t v19 = v17;
        while (1)
        {
          uint64_t v20 = *(void *)*v19;
          int v21 = (*(_DWORD *)(v20 + 8) & 0xFE) == 0x12
              ? *(unsigned __int8 *)(**(void **)(v20 + 16) + 8)
              : *(_DWORD *)(v20 + 8);
          if (v21 != 13) {
            break;
          }
          v19 += 2;
          v17 += 2;
          v18 -= 16;
          if (!v18) {
            goto LABEL_14;
          }
        }
        uint64_t v33 = (uint64_t *)(v16 + 16 * v42);
        uint64_t v34 = (uint64_t)(v33 - 2);
        do
        {
          v18 -= 16;
          if (!v18) {
            goto LABEL_14;
          }
          int v35 = v43[0](v34);
          v33 -= 2;
          v34 -= 16;
        }
        while (!v35);
        uint64_t v36 = (v18 >> 4) + 1;
        if (v18 < 33)
        {
LABEL_43:
          uint64_t v41 = 0;
          unint64_t v37 = 0;
        }
        else
        {
          if (v36 >= 0x7FFFFFFFFFFFFFFLL) {
            unint64_t v37 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = (v18 >> 4) + 1;
          }
          uint64_t v38 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
          while (1)
          {
            uint64_t v39 = operator new(16 * v37, v38);
            if (v39) {
              break;
            }
            BOOL v40 = v37 > 1;
            v37 >>= 1;
            if (!v40) {
              goto LABEL_43;
            }
          }
          uint64_t v41 = v39;
        }
        sub_1CC21D970(v17, v33, v43, v36, v41, v37);
        if (v41) {
          operator delete(v41);
        }
LABEL_14:
        while (1)
        {
          int v22 = (uint64_t *)(v8[12] + 16 * v7);
          int v23 = *((_DWORD *)v8 + 22);
          if (!v23) {
            break;
          }
          uint64_t v24 = v8[9];
          int v25 = v23 - 1;
          unsigned int v26 = ((*v22 >> 4) ^ (*v22 >> 9)) & v25;
          this = (void *)(v24 + 16 * v26);
          uint64_t v27 = *this;
          if (*v22 != *this)
          {
            uint64_t v28 = 0;
            int v29 = 1;
            while (v27 != -4096)
            {
              if (v28) {
                BOOL v30 = 0;
              }
              else {
                BOOL v30 = v27 == -8192;
              }
              if (v30) {
                uint64_t v28 = this;
              }
              unsigned int v31 = v26 + v29++;
              unsigned int v26 = v31 & v25;
              this = (void *)(v24 + 16 * v26);
              uint64_t v27 = *this;
              if (*v22 == *this) {
                goto LABEL_29;
              }
            }
            if (v28) {
              __n128 v32 = v28;
            }
            else {
              __n128 v32 = this;
            }
            goto LABEL_28;
          }
LABEL_29:
          *((_DWORD *)this + 2) = ++v7;
          if (v7 == a3) {
            return this;
          }
        }
        __n128 v32 = 0;
LABEL_28:
        this = sub_1CC21DC7C((uint64_t)(v8 + 9), (uint64_t)v22, v22, v32);
        *this = *v22;
        *((_DWORD *)this + 2) = 0;
        goto LABEL_29;
      }
    }
  }
  return this;
}

void llvm::ValueEnumerator::organizeMetadata(llvm::ValueEnumerator *this)
{
  v54[64] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void **)((char *)this + 168);
  uint64_t v1 = (llvm::ValueEnumerator **)*((void *)this + 21);
  unsigned int v4 = (void *)((char *)this + 176);
  uint64_t v3 = (llvm::ValueEnumerator **)*((void *)this + 22);
  if (v1 != v3)
  {
    unsigned int v52 = v54;
    uint64_t v53 = 0x4000000000;
    uint64_t v6 = (uint64_t *)((char *)this + 216);
    if (*((_DWORD *)this + 56) >= 0x41u) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v47 = (uint64_t *)((char *)this + 216);
    if (v1 == v3)
    {
      unsigned int v9 = v53;
    }
    else
    {
      do
      {
        unsigned int v7 = *v1;
        uint64_t v50 = 0;
        int v51 = v7;
        if (sub_1CBFFBC50(v6, &v51, &v50)) {
          uint64_t v8 = *(void *)(v50 + 8);
        }
        else {
          uint64_t v8 = 0;
        }
        if (v53 >= (unint64_t)HIDWORD(v53)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v52 + v53) = v8;
        unsigned int v9 = v53 + 1;
        LODWORD(v53) = v53 + 1;
        ++v1;
      }
      while (v1 != v3);
    }
    int v51 = this;
    unint64_t v10 = 126 - 2 * __clz(v9);
    if (v9) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    sub_1CC21DFD8((uint64_t)v52, (uint64_t *)v52 + v9, (uint64_t)&v51, v11, 1);
    unint64_t v13 = (void *)*((void *)this + 21);
    uint64_t v12 = *((void *)this + 22);
    *((void *)this + 21) = 0;
    std::string __p = v13;
    unint64_t v14 = (v12 - (uint64_t)v13) >> 3;
    void *v4 = 0;
    v4[1] = 0;
    sub_1CBF7ACFC((uint64_t)v2, v14);
    if (v53)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 8 * v53;
      int v17 = 1;
      do
      {
        if (*(_DWORD *)((char *)v52 + v15)) {
          break;
        }
        int v51 = 0;
        uint64_t v41 = __p[*(_DWORD *)((char *)v52 + v15 + 4) - 1];
        int v51 = (llvm::ValueEnumerator *)v41;
        uint64_t v42 = (uint64_t *)*((void *)this + 22);
        if ((unint64_t)v42 >= *((void *)this + 23))
        {
          uint64_t v43 = sub_1CBF63C18(v2, v41);
        }
        else
        {
          *uint64_t v42 = v41;
          uint64_t v43 = v42 + 1;
        }
        void *v4 = v43;
        *((_DWORD *)sub_1CC21DDF8(v47, &v51) + 3) = v17;
        if (!*(unsigned char *)v51) {
          ++*((_DWORD *)this + 114);
        }
        v15 += 8;
        ++v17;
      }
      while (v16 != v15);
      uint64_t v18 = v53;
    }
    else
    {
      uint64_t v18 = 0;
    }
    if (v18 != (uint64_t)(*v4 - (void)*v2) >> 3)
    {
      unint64_t v48 = (llvm::ValueEnumerator ***)((char *)this + 192);
      sub_1CBF7ACFC((uint64_t)this + 192, v14);
      LODWORD(v50) = 0;
      uint64_t v19 = (*((void *)this + 22) - *((void *)this + 21)) >> 3;
      int v20 = v53;
      if (v53 == v19)
      {
        int v21 = 0;
        LODWORD(v46) = 0;
      }
      else
      {
        int v21 = 0;
        LODWORD(v46) = 0;
        unsigned int v22 = (*((void *)this + 22) - *((void *)this + 21)) >> 3;
        int v23 = v47;
        do
        {
          uint64_t v24 = v52;
          int v25 = *((_DWORD *)v52 + 2 * v22);
          if (v50)
          {
            unsigned int v26 = (llvm::ValueEnumerator **)*((void *)this + 25);
            if (v50 != v25)
            {
              unint64_t v38 = ((unint64_t)v26 - *((void *)this + 24)) >> 3;
              uint64_t v39 = (_DWORD *)sub_1CC2202D4((_DWORD *)this + 60, (int *)&v50);
              int v40 = v39[3];
              v39[1] = v46;
              v39[2] = v38;
              v39[3] = v21;
              unsigned int v26 = (llvm::ValueEnumerator **)*((void *)this + 25);
              unint64_t v46 = ((unint64_t)v26 - *((void *)this + 24)) >> 3;
              uint64_t v19 = (*((void *)this + 22) - *((void *)this + 21)) >> 3;
              LODWORD(v50) = v25;
              uint64_t v24 = v52;
              int v21 = v40;
            }
          }
          else
          {
            LODWORD(v50) = *((_DWORD *)v52 + 2 * v22);
            unsigned int v26 = (llvm::ValueEnumerator **)*((void *)this + 25);
          }
          int v51 = 0;
          uint64_t v27 = (llvm::ValueEnumerator *)__p[v24[2 * v22 + 1] - 1];
          int v51 = v27;
          unint64_t v28 = *((void *)this + 26);
          if ((unint64_t)v26 >= v28)
          {
            BOOL v30 = *v48;
            uint64_t v31 = v26 - *v48;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 61) {
              abort();
            }
            uint64_t v33 = v28 - (void)v30;
            if (v33 >> 2 > v32) {
              unint64_t v32 = v33 >> 2;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            if (v34)
            {
              if (v34 >> 61) {
                sub_1CB833614();
              }
              int v35 = (char *)operator new(8 * v34);
            }
            else
            {
              int v35 = 0;
            }
            uint64_t v36 = (llvm::ValueEnumerator **)&v35[8 * v31];
            *uint64_t v36 = v27;
            int v29 = v36 + 1;
            if (v26 != v30)
            {
              do
              {
                unint64_t v37 = *--v26;
                *--uint64_t v36 = v37;
              }
              while (v26 != v30);
              unsigned int v26 = *v48;
            }
            *((void *)this + 24) = v36;
            *((void *)this + 25) = v29;
            *((void *)this + 26) = &v35[8 * v34];
            int v23 = v47;
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *unsigned int v26 = v27;
            int v29 = v26 + 1;
          }
          *((void *)this + 25) = v29;
          LODWORD(v19) = v19 + 1;
          *((_DWORD *)sub_1CC21DDF8(v23, &v51) + 3) = v19;
          if (!*(unsigned char *)v51) {
            ++v21;
          }
          ++v22;
        }
        while (v22 != v20);
      }
      uint64_t v44 = (*((void *)this + 25) - *((void *)this + 24)) >> 3;
      uint64_t v45 = (_DWORD *)sub_1CC2202D4((_DWORD *)this + 60, (int *)&v50);
      v45[1] = v46;
      void v45[2] = v44;
      v45[3] = v21;
    }
    if (__p) {
      operator delete(__p);
    }
    if (v52 != v54) {
      free(v52);
    }
  }
}

uint64_t llvm::ValueEnumerator::getInstructionID(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 392);
  uint64_t v3 = *(unsigned int *)(a1 + 408);
  if (!v3)
  {
LABEL_7:
    int v5 = (uint64_t *)(v2 + 16 * v3);
    return *((unsigned int *)v5 + 2);
  }
  LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v5 = (uint64_t *)(v2 + 16 * v4);
  uint64_t v6 = *v5;
  if (*v5 != a2)
  {
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        int v5 = (uint64_t *)(v2 + 16 * v4);
        return *((unsigned int *)v5 + 2);
      }
    }
    goto LABEL_7;
  }
  return *((unsigned int *)v5 + 2);
}

void *llvm::ValueEnumerator::setInstructionID(llvm::ValueEnumerator *this, const llvm::Instruction *a2)
{
  uint64_t v4 = a2;
  int v2 = *((_DWORD *)this + 104);
  *((_DWORD *)this + 104) = v2 + 1;
  uint64_t result = sub_1CC21C478((uint64_t)this + 392, (uint64_t *)&v4);
  *((_DWORD *)result + 2) = v2;
  return result;
}

uint64_t llvm::ValueEnumerator::getValueID(uint64_t a1, uint64_t a2)
{
  if (!a2 || *(unsigned char *)(a2 + 16) != 23)
  {
    uint64_t v2 = *(void *)(a1 + 72);
    uint64_t v3 = *(unsigned int *)(a1 + 88);
    if (v3)
    {
      LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      int v5 = (uint64_t *)(v2 + 16 * v4);
      uint64_t v6 = *v5;
      if (*v5 == a2)
      {
LABEL_10:
        int v9 = *((_DWORD *)v5 + 2);
        return (v9 - 1);
      }
      int v7 = 1;
      while (v6 != -4096)
      {
        int v8 = v4 + v7++;
        uint64_t v4 = v8 & (v3 - 1);
        uint64_t v6 = *(void *)(v2 + 16 * v4);
        if (v6 == a2)
        {
          int v5 = (uint64_t *)(v2 + 16 * v4);
          goto LABEL_10;
        }
      }
    }
    int v5 = (uint64_t *)(v2 + 16 * v3);
    goto LABEL_10;
  }
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = 0;
  uint64_t v13 = v11;
  if (!sub_1CBFFBC50((uint64_t *)(a1 + 216), &v13, &v12)) {
    return 0xFFFFFFFFLL;
  }
  int v9 = *(_DWORD *)(v12 + 12);
  return (v9 - 1);
}

BOOL sub_1CC219D2C(uint64_t **a1)
{
  uint64_t v1 = **a1;
  if ((*(_DWORD *)(v1 + 8) & 0xFE) == 0x12) {
    int v2 = *(unsigned __int8 *)(**(void **)(v1 + 16) + 8);
  }
  else {
    int v2 = *(_DWORD *)(v1 + 8);
  }
  return v2 == 13;
}

void llvm::ValueEnumerator::EnumerateNamedMDNode(llvm::ValueEnumerator *this, const llvm::NamedMDNode *a2)
{
  unsigned int NumOperands = llvm::NamedMDNode::getNumOperands(a2);
  if (NumOperands)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 8 * NumOperands;
    do
    {
      llvm::ValueEnumerator::EnumerateMetadata((uint64_t)this, 0, *(const llvm::Value ***)(**((void **)a2 + 6) + v5));
      v5 += 8;
    }
    while (v6 != v5);
  }
}

uint64_t llvm::ValueEnumerator::getMetadataFunctionID(llvm::ValueEnumerator *this, const Function *a2)
{
  if (a2) {
    return llvm::ValueEnumerator::getValueID((uint64_t)this, (uint64_t)a2) + 1;
  }
  else {
    return 0;
  }
}

void llvm::ValueEnumerator::EnumerateMetadata(uint64_t a1, unsigned int a2, const llvm::Value **a3)
{
  v31[32] = *MEMORY[0x1E4F143B8];
  int v29 = v31;
  uint64_t v30 = 0x2000000000;
  unsigned int v26 = v28;
  uint64_t v27 = 0x2000000000;
  uint64_t v5 = llvm::ValueEnumerator::enumerateMetadataImpl((uint64_t *)a1, a2, a3);
  unsigned int v6 = 0;
  if (v5)
  {
    int v7 = &v5[-*((unsigned int *)v5 + 2)];
    int v8 = v26;
    *(void *)unsigned int v26 = v5;
    v8[1] = v7;
    unsigned int v6 = v27 + 1;
    LODWORD(v27) = v27 + 1;
  }
  while (v6)
  {
    int v9 = (char *)v26 + 16 * v6;
    uint64_t v10 = *((void *)v9 - 2);
    uint64_t v11 = (const llvm::Value ***)*((void *)v9 - 1);
    if (v11 == (const llvm::Value ***)v10)
    {
LABEL_13:
      LODWORD(v27) = v6 - 1;
      uint64_t v12 = *(uint64_t **)(a1 + 176);
      if ((unint64_t)v12 >= *(void *)(a1 + 184))
      {
        uint64_t v13 = sub_1CBF63C18((void **)(a1 + 168), v10);
      }
      else
      {
        uint64_t *v12 = v10;
        uint64_t v13 = v12 + 1;
      }
      *(void *)(a1 + 176) = v13;
      unint64_t v14 = ((unint64_t)v13 - *(void *)(a1 + 168)) >> 3;
      uint64_t v25 = v10;
      *((_DWORD *)sub_1CC21DDF8((uint64_t *)(a1 + 216), &v25) + 3) = v14;
      unsigned int v6 = v27;
      if (!v27 || (*(unsigned char *)(*((void *)v26 + 2 * v27 - 2) + 1) & 0x7F) == 1)
      {
        if (v30)
        {
          int v20 = (char *)v29;
          uint64_t v21 = 8 * v30;
          do
          {
            uint64_t v22 = *(void *)v20;
            uint64_t v23 = *(unsigned int *)(*(void *)v20 + 8);
            if (v6 >= HIDWORD(v27)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v24 = (char *)v26 + 16 * v6;
            *uint64_t v24 = v22;
            v24[1] = v22 - 8 * v23;
            unsigned int v6 = v27 + 1;
            LODWORD(v27) = v27 + 1;
            v20 += 8;
            v21 -= 8;
          }
          while (v21);
        }
        LODWORD(v30) = 0;
      }
    }
    else
    {
      while (!llvm::ValueEnumerator::enumerateMetadataImpl((uint64_t *)a1, a2, *v11))
      {
        if (++v11 == (const llvm::Value ***)v10)
        {
          unsigned int v6 = v27;
          goto LABEL_13;
        }
      }
      uint64_t v15 = *v11;
      uint64_t v16 = (char *)v26;
      uint64_t v17 = v27;
      *((void *)v26 + 2 * v27 - 1) = v11 + 1;
      if ((*((unsigned char *)v15 + 1) & 0x7F) == 1 && (*(unsigned char *)(v10 + 1) & 0x7F) != 1)
      {
        if (v30 >= (unint64_t)HIDWORD(v30)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v29 + v30) = v15;
        LODWORD(v30) = v30 + 1;
        unsigned int v6 = v27;
      }
      else
      {
        uint64_t v18 = *((unsigned int *)v15 + 2);
        if (v17 >= HIDWORD(v27)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v19 = (const llvm::Value ***)&v16[16 * v17];
        *uint64_t v19 = v15;
        v19[1] = &v15[-v18];
        unsigned int v6 = v27 + 1;
        LODWORD(v27) = v27 + 1;
      }
    }
  }
  if (v26 != v28) {
    free(v26);
  }
  if (v29 != v31) {
    free(v29);
  }
}

void llvm::ValueEnumerator::EnumerateFunctionLocalMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = llvm::ValueEnumerator::getValueID(a1, a2) + 1;

  llvm::ValueEnumerator::EnumerateFunctionLocalMetadata(a1, v5, a3);
}

void *llvm::ValueEnumerator::EnumerateFunctionLocalListMetadata(llvm::ValueEnumerator *this, const llvm::Function *a2, const llvm::Value ****a3)
{
  unsigned int v5 = llvm::ValueEnumerator::getValueID((uint64_t)this, (uint64_t)a2) + 1;

  return llvm::ValueEnumerator::EnumerateFunctionLocalListMetadata(this, v5, a3);
}

void llvm::ValueEnumerator::dropFunctionFromMetadata(uint64_t a1, unsigned __int8 **a2)
{
  v15[64] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = v15;
  unsigned int v14 = 64;
  if (*((_DWORD *)a2 + 2))
  {
    *((_DWORD *)a2 + 2) = 0;
    if (*((_DWORD *)a2 + 3))
    {
      if (**a2 - 4 <= 0x1E)
      {
        v15[0] = *a2;
        uint64_t v3 = (uint64_t *)(a1 + 216);
        unsigned int v4 = 1;
        do
        {
          uint64_t v5 = *((void *)v12 + --v4);
          unsigned int v13 = v4;
          uint64_t v6 = *(unsigned int *)(v5 + 8);
          if (v6)
          {
            uint64_t v7 = -8 * v6;
            do
            {
              if (*(void *)(v5 + v7))
              {
                uint64_t v10 = *(void *)(v5 + v7);
                uint64_t v11 = 0;
                char v8 = sub_1CBFFBC50(v3, &v10, &v11);
                int v9 = v11;
                if ((v8 & 1) == 0) {
                  int v9 = (unsigned __int8 **)(*(void *)(a1 + 216) + 16 * *(unsigned int *)(a1 + 232));
                }
                if (v9 != (unsigned __int8 **)(*(void *)(a1 + 216) + 16 * *(unsigned int *)(a1 + 232)))
                {
                  if (*((_DWORD *)v9 + 2))
                  {
                    *((_DWORD *)v9 + 2) = 0;
                    if (*((_DWORD *)v9 + 3))
                    {
                      if (**v9 - 4 <= 0x1E)
                      {
                        if (v13 >= (unint64_t)v14) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)v12 + v13++) = *v9;
                      }
                    }
                  }
                }
              }
              v7 += 8;
            }
            while (v7);
            unsigned int v4 = v13;
          }
        }
        while (v4);
        if (v12 != v15) {
          free(v12);
        }
      }
    }
  }
}

const llvm::Value **llvm::ValueEnumerator::enumerateMetadataImpl(uint64_t *a1, unsigned int a2, const llvm::Value **a3)
{
  uint64_t v3 = a3;
  if (a3)
  {
    uint64_t v6 = (uint64_t)(a1 + 27);
    uint64_t v24 = a3;
    uint64_t v25 = a2;
    unsigned int v26 = 0;
    if (sub_1CBFFBC50(a1 + 27, &v24, &v26))
    {
      int v7 = *((_DWORD *)v26 + 2);
      if (v7) {
        BOOL v8 = v7 == a2;
      }
      else {
        BOOL v8 = 1;
      }
      if (!v8) {
        llvm::ValueEnumerator::dropFunctionFromMetadata((uint64_t)a1, (unsigned __int8 **)v26);
      }
    }
    else
    {
      uint64_t v10 = sub_1CC21DE58(v6, &v24, v26);
      *uint64_t v10 = v24;
      v10[1] = v25;
      int v11 = *(unsigned __int8 *)v3;
      if ((v11 - 4) < 0x1F) {
        return v3;
      }
      uint64_t v12 = v10;
      unsigned int v14 = (const llvm::Value ***)a1[22];
      unint64_t v13 = a1[23];
      if ((unint64_t)v14 >= v13)
      {
        uint64_t v16 = (void *)a1[21];
        uint64_t v17 = v14 - (const llvm::Value ***)v16;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61) {
          abort();
        }
        uint64_t v19 = v13 - (void)v16;
        if (v19 >> 2 > v18) {
          unint64_t v18 = v19 >> 2;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          if (v20 >> 61) {
            sub_1CB833614();
          }
          uint64_t v21 = (char *)operator new(8 * v20);
        }
        else
        {
          uint64_t v21 = 0;
        }
        uint64_t v22 = (const llvm::Value ***)&v21[8 * v17];
        uint64_t *v22 = v3;
        uint64_t v15 = v22 + 1;
        if (v14 != v16)
        {
          do
          {
            uint64_t v23 = *--v14;
            *--uint64_t v22 = v23;
          }
          while (v14 != v16);
          unsigned int v14 = (const llvm::Value ***)a1[21];
        }
        a1[21] = (uint64_t)v22;
        a1[22] = (uint64_t)v15;
        a1[23] = (uint64_t)&v21[8 * v20];
        if (v14)
        {
          operator delete(v14);
          int v11 = *(unsigned __int8 *)v3;
        }
      }
      else
      {
        __n128 *v14 = v3;
        uint64_t v15 = v14 + 1;
      }
      a1[22] = (uint64_t)v15;
      *((_DWORD *)v12 + 3) = ((unint64_t)v15 - a1[21]) >> 3;
      if (v11 == 1) {
        llvm::ValueEnumerator::EnumerateValue((llvm::ValueEnumerator *)a1, v3[16]);
      }
    }
    return 0;
  }
  return v3;
}

void llvm::ValueEnumerator::incorporateFunctionMetadata(llvm::ValueEnumerator *this, const llvm::Function *a2)
{
  *((_DWORD *)this + 113) = (*((void *)this + 22) - *((void *)this + 21)) >> 3;
  uint64_t v3 = (char *)this + 240;
  int ValueID = llvm::ValueEnumerator::getValueID((uint64_t)this, (uint64_t)a2);
  uint64_t v40 = 0;
  if (sub_1CC2203C0((uint64_t)v3, ValueID + 1, &v40))
  {
    unint64_t v6 = *(void *)(v40 + 4);
    int v5 = *(_DWORD *)(v40 + 12);
  }
  else
  {
    int v5 = 0;
    unint64_t v6 = 0;
  }
  *((_DWORD *)this + 114) = v5;
  unint64_t v7 = HIDWORD(v6);
  uint64_t v8 = HIDWORD(v6) - v6;
  if (v8 < 1) {
    return;
  }
  uint64_t v10 = *((void *)this + 23);
  uint64_t v9 = *((void *)this + 24);
  int v11 = (char *)(v9 + 8 * v6);
  uint64_t v13 = *((void *)this + 21);
  uint64_t v12 = (uint64_t *)*((void *)this + 22);
  uint64_t v14 = (uint64_t)v12 - v13;
  uint64_t v15 = v13 + (((unint64_t)v12 - v13) & 0xFFFFFFFFFFFFFFF8);
  if (v8 > (v10 - (uint64_t)v12) >> 3)
  {
    int __src = (uint64_t *)(v13 + (((unint64_t)v12 - v13) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v16 = v14 >> 3;
    unint64_t v17 = (v14 >> 3) + v8;
    if (v17 >> 61) {
      abort();
    }
    uint64_t v18 = v10 - v13;
    if (v18 >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        sub_1CB833614();
      }
      unint64_t v20 = (char *)operator new(8 * v19);
    }
    else
    {
      unint64_t v20 = 0;
    }
    uint64_t v21 = v6;
    uint64_t v22 = &v20[8 * v16];
    uint64_t v23 = &v22[8 * v8];
    uint64_t v24 = v22;
    uint64_t v25 = 8 * v7 - 8 * v21;
    do
    {
      uint64_t v26 = *(void *)v11;
      v11 += 8;
      *(void *)uint64_t v24 = v26;
      v24 += 8;
      v25 -= 8;
    }
    while (v25);
    if ((unint64_t)v14 >= 8)
    {
      uint64_t v27 = 8 * v16;
      do
      {
        *(void *)&v20[v27 - 8] = *(void *)(v13 - 8 + v27);
        v27 -= 8;
      }
      while (v27);
      uint64_t v12 = (uint64_t *)*((void *)this + 22);
      uint64_t v22 = v20;
    }
    unint64_t v28 = &v20[8 * v19];
    if (v12 != __src) {
      memmove(v23, __src, (char *)v12 - (char *)__src);
    }
    int v29 = (void *)*((void *)this + 21);
    *((void *)this + 21) = v22;
    *((void *)this + 22) = &v23[(char *)v12 - (char *)__src];
    *((void *)this + 23) = v28;
    if (v29)
    {
      operator delete(v29);
    }
    return;
  }
  uint64_t v30 = (char *)(v9 + 8 * v7);
  uint64_t v31 = ((uint64_t)v12 - v15) >> 3;
  if (v31 >= v8)
  {
    unint64_t v34 = (char *)*((void *)this + 22);
    unint64_t v32 = v30;
LABEL_33:
    int v35 = (char *)(v15 + 8 * v8);
    uint64_t v36 = (uint64_t *)&v34[-8 * v8];
    unint64_t v37 = v34;
    if (v36 < v12)
    {
      unint64_t v37 = v34;
      do
      {
        uint64_t v38 = *v36++;
        *(void *)unint64_t v37 = v38;
        v37 += 8;
      }
      while (v36 < v12);
    }
    *((void *)this + 22) = v37;
    if (v34 != v35) {
      memmove(&v34[-8 * ((v34 - v35) >> 3)], (const void *)(v13 + (((unint64_t)v12 - v13) & 0xFFFFFFFFFFFFFFF8)), v34 - v35);
    }
    if (v32 != v11)
    {
      memmove((void *)(v13 + (((unint64_t)v12 - v13) & 0xFFFFFFFFFFFFFFF8)), v11, v32 - v11);
    }
    return;
  }
  unint64_t v32 = &v11[8 * v31];
  int64_t v33 = v30 - v32;
  if (v30 != v32) {
    memmove(*((void **)this + 22), &v11[8 * v31], v30 - v32);
  }
  unint64_t v34 = (char *)v12 + v33;
  *((void *)this + 22) = (char *)v12 + v33;
  if ((uint64_t)v12 - v15 >= 1) {
    goto LABEL_33;
  }
}

void llvm::ValueEnumerator::incorporateFunction(llvm::ValueEnumerator *this, const llvm::Function *a2)
{
  int v2 = a2;
  v73[8] = *MEMORY[0x1E4F143B8];
  *((_DWORD *)this + 104) = 0;
  *((_DWORD *)this + 112) = (*((void *)this + 13) - *((void *)this + 12)) >> 4;
  llvm::ValueEnumerator::incorporateFunctionMetadata(this, a2);
  uint64_t v4 = sub_1CB923B44(v2);
  if (v4 != v5)
  {
    uint64_t v7 = v4;
    uint64_t v8 = v5;
    do
    {
      llvm::ValueEnumerator::EnumerateValue(this, (const llvm::Value *)v7);
      uint64_t v9 = *(void *)(v7 + 24);
      uint64_t v12 = *(void *)(v9 + 112);
      uint64_t v10 = (llvm::AttributeList *)(v9 + 112);
      uint64_t v11 = v12;
      if (!v12) {
        goto LABEL_5;
      }
      int v13 = *(_DWORD *)(v7 + 32);
      uint64_t v14 = (v13 + 2);
      if (v14 >= *(_DWORD *)(v11 + 8)) {
        goto LABEL_5;
      }
      uint64_t v15 = v11 + 40;
      uint64_t v16 = *(void *)(v15 + 8 * v14);
      if (v16 && (*(unsigned char *)(v16 + 20) & 0x20) != 0)
      {
        ParamByValType = (llvm::Type *)llvm::AttributeList::getParamByValType(v10, v13);
      }
      else
      {
        uint64_t v17 = *(void *)(v15 + 8 * v14);
        if (v17 && (*(unsigned char *)(v17 + 21) & 2) != 0)
        {
          ParamByValType = (llvm::Type *)llvm::AttributeList::getParamStructRetType(v10, v13);
        }
        else
        {
          uint64_t v18 = *(void *)(v15 + 8 * v14);
          if (!v18 || (*(unsigned char *)(v18 + 20) & 0x10) == 0) {
            goto LABEL_5;
          }
          ParamByValType = (llvm::Type *)llvm::AttributeList::getParamByRefType(v10, v13);
        }
      }
      llvm::ValueEnumerator::EnumerateType(this, ParamByValType);
LABEL_5:
      v7 += 40;
    }
    while (v7 != v8);
  }
  uint64_t v20 = (*((void *)this + 13) - *((void *)this + 12)) >> 4;
  *((_DWORD *)this + 115) = v20;
  uint64_t v21 = (char *)*((void *)v2 + 10);
  unsigned int v22 = v20;
  unsigned int v68 = (char *)v2 + 72;
  uint64_t v67 = (uint64_t)v2;
  if (v21 == (char *)v2 + 72) {
    goto LABEL_60;
  }
  do
  {
    if (v21) {
      uint64_t v23 = v21 - 24;
    }
    else {
      uint64_t v23 = 0;
    }
    for (uint64_t i = (char *)*((void *)v23 + 6); i != v23 + 40; uint64_t i = (char *)*((void *)i + 1))
    {
      if (i) {
        uint64_t v25 = i - 24;
      }
      else {
        uint64_t v25 = 0;
      }
      int v26 = *((_DWORD *)v25 + 5);
      if ((v26 & 0x40000000) != 0)
      {
        unint64_t v28 = (const llvm::Value **)*((void *)v25 - 1);
        uint64_t v27 = v26 & 0x7FFFFFF;
        if (!v27) {
          goto LABEL_37;
        }
      }
      else
      {
        uint64_t v27 = v26 & 0x7FFFFFF;
        unint64_t v28 = (const llvm::Value **)&v25[-32 * v27];
        if (!v27) {
          goto LABEL_37;
        }
      }
      uint64_t v29 = 32 * v27;
      do
      {
        int v30 = *((unsigned __int8 *)*v28 + 16);
        if (v30 == 24 || (v30 - 4) <= 0x10) {
          llvm::ValueEnumerator::EnumerateValue(this, *v28);
        }
        v28 += 4;
        v29 -= 32;
      }
      while (v29);
LABEL_37:
      if (i)
      {
        if (v25[16] == 91) {
          llvm::ValueEnumerator::EnumerateValue(this, *((const llvm::Value **)v25 + 12));
        }
      }
    }
    int64_t v33 = (char **)*((void *)this + 54);
    unint64_t v32 = *((void *)this + 55);
    if ((unint64_t)v33 >= v32)
    {
      int v35 = (void *)*((void *)this + 53);
      uint64_t v36 = v33 - (char **)v35;
      unint64_t v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 61) {
        abort();
      }
      uint64_t v38 = v32 - (void)v35;
      if (v38 >> 2 > v37) {
        unint64_t v37 = v38 >> 2;
      }
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v39 = v37;
      }
      if (v39)
      {
        if (v39 >> 61) {
          sub_1CB833614();
        }
        uint64_t v40 = (char *)operator new(8 * v39);
      }
      else
      {
        uint64_t v40 = 0;
      }
      uint64_t v41 = &v40[8 * v36];
      *(void *)uint64_t v41 = v23;
      unint64_t v34 = v41 + 8;
      if (v33 != v35)
      {
        do
        {
          uint64_t v42 = (uint64_t)*--v33;
          *((void *)v41 - 1) = v42;
          v41 -= 8;
        }
        while (v33 != v35);
        int64_t v33 = (char **)*((void *)this + 53);
      }
      *((void *)this + 53) = v41;
      *((void *)this + 54) = v34;
      *((void *)this + 55) = &v40[8 * v39];
      if (v33) {
        operator delete(v33);
      }
    }
    else
    {
      *int64_t v33 = v23;
      unint64_t v34 = v33 + 1;
    }
    *((void *)this + 54) = v34;
    unint64_t v43 = ((unint64_t)v34 - *((void *)this + 53)) >> 3;
    int v71 = v23;
    *((_DWORD *)sub_1CC220A0C((uint64_t)this + 72, (uint64_t *)&v71) + 2) = v43;
    uint64_t v21 = (char *)*((void *)v21 + 1);
  }
  while (v21 != v68);
  unsigned int v22 = *((_DWORD *)this + 115);
  uint64_t v20 = (*((void *)this + 13) - *((void *)this + 12)) >> 4;
  int v2 = (const llvm::Function *)v67;
LABEL_60:
  llvm::ValueEnumerator::OptimizeConstants(this, v22, v20, v6);
  llvm::ValueEnumerator::EnumerateAttributes((uint64_t)this, *((void *)v2 + 14));
  *((_DWORD *)this + 116) = (*((void *)this + 13) - *((void *)this + 12)) >> 4;
  int v71 = v73;
  uint64_t v72 = 0x800000000;
  unsigned int v69 = 0;
  uint64_t v44 = *((void *)v2 + 10);
  if ((char *)v44 != v68)
  {
    do
    {
      uint64_t v45 = v44 - 24;
      if (!v44) {
        uint64_t v45 = 0;
      }
      uint64_t v46 = v45 + 40;
      for (uint64_t j = *(void *)(v45 + 48); j != v46; uint64_t j = *(void *)(j + 8))
      {
        if (j) {
          unint64_t v48 = (_DWORD *)(j - 24);
        }
        else {
          unint64_t v48 = 0;
        }
        int v49 = v48[5];
        if ((v49 & 0x40000000) != 0)
        {
          int v51 = (_DWORD *)*((void *)v48 - 1);
          uint64_t v50 = v49 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v50 = v49 & 0x7FFFFFF;
          int v51 = &v48[-8 * v50];
        }
        unsigned int v52 = &v51[8 * v50];
        if (v50)
        {
          do
          {
            if (*(void *)v51) {
              BOOL v53 = *(unsigned char *)(*(void *)v51 + 16) == 23;
            }
            else {
              BOOL v53 = 0;
            }
            if (v53)
            {
              uint64_t v54 = *(unsigned __int8 **)(*(void *)v51 + 24);
              int v55 = *v54;
              if (v55 == 32)
              {
                if (v69 >= 8uLL) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v70[v69++] = v54;
                uint64_t v56 = *((unsigned int *)v54 + 8);
                if (v56)
                {
                  BOOL v57 = (void *)*((void *)v54 + 3);
                  uint64_t v58 = 8 * v56;
                  do
                  {
                    if (*(unsigned char *)*v57 == 2)
                    {
                      if (v72 >= (unint64_t)HIDWORD(v72)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v71 + v72) = *v57;
                      LODWORD(v72) = v72 + 1;
                    }
                    ++v57;
                    v58 -= 8;
                  }
                  while (v58);
                }
              }
              else if (v55 == 2)
              {
                if (v72 >= (unint64_t)HIDWORD(v72)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v71 + v72) = v54;
                LODWORD(v72) = v72 + 1;
              }
            }
            v51 += 8;
          }
          while (v51 != v52);
        }
        if (*(unsigned char *)(*(void *)v48 + 8) != 7) {
          llvm::ValueEnumerator::EnumerateValue(this, (const llvm::Value *)v48);
        }
      }
      uint64_t v44 = *(void *)(v44 + 8);
    }
    while ((char *)v44 != v68);
    if (v72)
    {
      uint64_t v59 = 0;
      uint64_t v60 = 8 * v72;
      do
      {
        uint64_t v61 = *(void *)((char *)v71 + v59);
        int ValueID = llvm::ValueEnumerator::getValueID((uint64_t)this, v67);
        llvm::ValueEnumerator::EnumerateFunctionLocalMetadata((uint64_t)this, ValueID + 1, v61);
        v59 += 8;
      }
      while (v60 != v59);
    }
    uint64_t v63 = (const llvm::Value *****)v70;
    if (v69)
    {
      uint64_t v64 = 8 * v69;
      do
      {
        uint64_t v65 = *v63++;
        int v66 = llvm::ValueEnumerator::getValueID((uint64_t)this, v67);
        llvm::ValueEnumerator::EnumerateFunctionLocalListMetadata(this, v66 + 1, v65);
        v64 -= 8;
      }
      while (v64);
    }
  }
  if (v71 != v73) {
    free(v71);
  }
}