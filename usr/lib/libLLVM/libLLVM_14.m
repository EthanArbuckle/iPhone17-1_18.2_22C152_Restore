uint64_t llvm::GlobalsAAResult::isNonEscapingGlobalNoAlias(llvm::GlobalsAAResult *this, const llvm::GlobalValue *a2, const llvm::Value *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v11;
  const llvm::GlobalValue *v12;
  uint64_t v13;
  BOOL v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v20;
  llvm::DataLayout *v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  const char *v26;
  char Alignment;
  llvm::DataLayout *v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  const char *v32;
  char v33;
  llvm *UnderlyingObject;
  unsigned int v35;
  int v36;
  void *v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  llvm *v41;
  int v42;
  uint64_t v43;
  llvm **v44;
  llvm *v45;
  llvm **v46;
  uint64_t v47;
  uint64_t v48;
  llvm **v49;
  llvm *v50;
  unsigned int v51;
  llvm **v52;
  llvm *v53;
  llvm *v54;
  char *v55;
  uint64_t v56;
  llvm **v57;
  uint64_t v58;
  llvm **v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  char *v63;
  llvm *v64;
  char *v65;
  int v66;
  BOOL v67;
  unsigned int v68;
  llvm **v69;
  unsigned int v70;
  unsigned int v71;
  llvm **v72;
  llvm *v73;
  llvm **v74;
  int v75;
  BOOL v76;
  unsigned int v77;
  uint64_t v78;
  llvm **v79;
  uint64_t v80;
  llvm **v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  llvm **v85;
  llvm *v86;
  llvm **v87;
  int v88;
  BOOL v89;
  unsigned int v90;
  llvm **v91;
  llvm *v92;
  llvm *v93;
  llvm **v94;
  uint64_t v95;
  uint64_t v96;
  llvm **v97;
  llvm *v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  llvm **v102;
  llvm **v103;
  llvm *v104;
  llvm *v105;
  llvm **v106;
  uint64_t v107;
  llvm **v108;
  uint64_t v109;
  llvm **v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  char *v114;
  llvm *v115;
  char *v116;
  int v117;
  BOOL v118;
  unsigned int v119;
  llvm **v120;
  unsigned int v121;
  unsigned int v122;
  llvm **v123;
  llvm *v124;
  llvm **v125;
  int v126;
  BOOL v127;
  unsigned int v128;
  uint64_t v129;
  llvm **v130;
  uint64_t v131;
  llvm **v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  llvm **v136;
  llvm *v137;
  llvm **v138;
  int v139;
  BOOL v140;
  unsigned int v141;
  llvm **v142;
  llvm **v144;
  llvm **v145;
  uint64_t v146;
  int v147;
  void v148[8];
  char *v149;
  char *v150;
  uint64_t v151;
  int v152;
  void v153[8];
  void *v154;
  unsigned int v155;
  unsigned int v156;
  void v157[8];
  void *v158;
  unsigned int v159;
  unsigned int v160;
  void v161[10];

  v5 = 0;
  v161[8] = *MEMORY[0x1E4F143B8];
  v144 = (llvm **)v148;
  v145 = (llvm **)v148;
  v147 = 0;
  v154 = v157;
  v156 = 8;
  v146 = 0x100000008;
  v148[0] = a3;
  v157[0] = a3;
  v6 = 1;
  while (1)
  {
    v7 = *((void *)v154 + v6 - 1);
    v155 = v6 - 1;
    v8 = *(unsigned __int8 *)(v7 + 16);
    if (v7) {
      v9 = v8 > 3;
    }
    else {
      v9 = 1;
    }
    if (v9)
    {
      if (v8 - 21 <= 0x3F && ((1 << (v8 - 21)) & 0x8000000000001001) != 0) {
        goto LABEL_11;
      }
      if (v5 > 3) {
        break;
      }
      ++v5;
      if (v7 && v8 == 60)
      {
        UnderlyingObject = llvm::getUnderlyingObject(*(llvm **)(v7 - 32), (const llvm::Value *)6);
        v149 = (char *)v153;
        v150 = (char *)v153;
        v152 = 0;
        v158 = v161;
        v160 = 8;
        v151 = 0x100000008;
        v153[0] = UnderlyingObject;
        v35 = 1;
        v161[0] = UnderlyingObject;
        while (2)
        {
          v36 = v5;
          v37 = v158;
          v38 = v158[--v35];
          v159 = v35;
          v39 = *(unsigned __int8 *)(v38 + 16);
          if (v39 < 4
            || (v39 - 21 <= 0x3F
              ? (v40 = ((1 << (v39 - 21)) & 0x8000000000001001) == 0)
              : (v40 = 1),
                !v40))
          {
LABEL_77:
            if (v35) {
              continue;
            }
            v11 = 1;
            v37 = v158;
LABEL_226:
            if (v37 != v161) {
              free(v37);
            }
            if (v150 != v149) {
              free(v150);
            }
            goto LABEL_65;
          }
          break;
        }
        ++v5;
        if (v36 > 3) {
          goto LABEL_294;
        }
        if (v39 != 85)
        {
          if (v39 != 83)
          {
            if (v39 != 60)
            {
LABEL_294:
              v11 = 0;
              goto LABEL_226;
            }
            v41 = llvm::getUnderlyingObject(*(llvm **)(v38 - 32), (const llvm::Value *)6);
LABEL_197:
            if (v159 >= (unint64_t)v160) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v158[v159] = v41;
            v35 = ++v159;
            goto LABEL_77;
          }
          v42 = *(_DWORD *)(v38 + 20);
          if ((v42 & 0x40000000) == 0)
          {
            v43 = v42 & 0x7FFFFFF;
            v44 = (llvm **)(v38 - 32 * v43);
            if (v43) {
              goto LABEL_98;
            }
            goto LABEL_199;
          }
          v44 = *(llvm ***)(v38 - 8);
          v43 = v42 & 0x7FFFFFF;
          if (v43)
          {
LABEL_98:
            v52 = &v44[4 * v43];
            while (1)
            {
              v53 = llvm::getUnderlyingObject(*v44, (const llvm::Value *)6);
              v54 = v53;
              v55 = v150;
              v56 = HIDWORD(v151);
              if (v150 == v149)
              {
                if (HIDWORD(v151))
                {
                  v57 = 0;
                  v58 = 8 * HIDWORD(v151);
                  v59 = (llvm **)v150;
                  while (*v59 != v53)
                  {
                    if (*v59 == (llvm *)-2) {
                      v57 = v59;
                    }
                    ++v59;
                    v58 -= 8;
                    if (!v58)
                    {
                      if (!v57) {
                        goto LABEL_107;
                      }
                      *v57 = v53;
                      --v152;
                      goto LABEL_131;
                    }
                  }
                  goto LABEL_133;
                }
LABEL_107:
                v60 = v151;
                if (HIDWORD(v151) < v151)
                {
                  ++HIDWORD(v151);
                  *(void *)&v150[8 * v56] = v53;
                  goto LABEL_131;
                }
              }
              else
              {
                v60 = v151;
              }
              if (3 * v60 <= 4 * (HIDWORD(v151) - v152)) {
                break;
              }
              if (v60 - HIDWORD(v151) < v60 >> 3) {
                goto LABEL_140;
              }
LABEL_112:
              v61 = v60 - 1;
              v62 = (v60 - 1) & ((v54 >> 4) ^ (v54 >> 9));
              v63 = &v55[8 * v62];
              v64 = *(llvm **)v63;
              if (*(void *)v63 != -1)
              {
                v65 = 0;
                v66 = 1;
                while (v64 != v54)
                {
                  if (v65) {
                    v67 = 0;
                  }
                  else {
                    v67 = v64 == (llvm *)-2;
                  }
                  if (v67) {
                    v65 = v63;
                  }
                  v68 = v62 + v66++;
                  v62 = v68 & v61;
                  v63 = &v55[8 * (v68 & v61)];
                  v64 = *(llvm **)v63;
                  if (*(void *)v63 == -1) {
                    goto LABEL_124;
                  }
                }
                goto LABEL_133;
              }
              v65 = 0;
LABEL_124:
              if (v65) {
                v69 = (llvm **)v65;
              }
              else {
                v69 = (llvm **)v63;
              }
              if (*v69 == v54) {
                goto LABEL_133;
              }
              if (*v69 == (llvm *)-2) {
                --v152;
              }
              else {
                ++HIDWORD(v151);
              }
              *v69 = v54;
LABEL_131:
              if (v159 >= (unint64_t)v160) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v158[v159++] = v54;
LABEL_133:
              v44 += 4;
              if (v44 == v52) {
                goto LABEL_199;
              }
            }
            if (v60 >= 0x40) {
              v60 *= 2;
            }
            else {
              v60 = 128;
            }
LABEL_140:
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v149, v60);
            v60 = v151;
            v55 = v150;
            goto LABEL_112;
          }
LABEL_199:
          v35 = v159;
          goto LABEL_77;
        }
        v45 = llvm::getUnderlyingObject(*(llvm **)(v38 - 64), (const llvm::Value *)6);
        v41 = llvm::getUnderlyingObject(*(llvm **)(v38 - 32), (const llvm::Value *)6);
        v46 = (llvm **)v150;
        v47 = HIDWORD(v151);
        if (v150 == v149)
        {
          if (HIDWORD(v151))
          {
            v48 = 0;
            v49 = 0;
            while (1)
            {
              v50 = *(llvm **)&v150[v48];
              if (v50 == v45) {
                goto LABEL_165;
              }
              if (v50 == (llvm *)-2) {
                v49 = (llvm **)&v150[v48];
              }
              v48 += 8;
              if (8 * HIDWORD(v151) == v48)
              {
                if (!v49) {
                  break;
                }
                *v49 = v45;
                --v152;
                goto LABEL_163;
              }
            }
          }
          v51 = v151;
          if (HIDWORD(v151) < v151)
          {
            ++HIDWORD(v151);
            *(void *)&v150[8 * v47] = v45;
            goto LABEL_163;
          }
        }
        else
        {
          v51 = v151;
        }
        if (3 * v51 <= 4 * (HIDWORD(v151) - v152))
        {
          if (v51 >= 0x40) {
            v51 *= 2;
          }
          else {
            v51 = 128;
          }
        }
        else if (v51 - HIDWORD(v151) >= v51 >> 3)
        {
LABEL_145:
          v70 = v51 - 1;
          v71 = (v51 - 1) & ((v45 >> 4) ^ (v45 >> 9));
          v72 = &v46[v71];
          v73 = *v72;
          if (*v72 != (llvm *)-1)
          {
            v74 = 0;
            v75 = 1;
            while (v73 != v45)
            {
              if (v74) {
                v76 = 0;
              }
              else {
                v76 = v73 == (llvm *)-2;
              }
              if (v76) {
                v74 = v72;
              }
              v77 = v71 + v75++;
              v71 = v77 & v70;
              v72 = &v46[v77 & v70];
              v73 = *v72;
              if (*v72 == (llvm *)-1) {
                goto LABEL_157;
              }
            }
            goto LABEL_165;
          }
          v74 = 0;
LABEL_157:
          if (v74) {
            v72 = v74;
          }
          if (*v72 == v45)
          {
LABEL_165:
            v78 = HIDWORD(v151);
            if (v46 == (llvm **)v149)
            {
              if (HIDWORD(v151))
              {
                v79 = 0;
                v80 = 8 * HIDWORD(v151);
                v81 = v46;
                while (*v81 != v41)
                {
                  if (*v81 == (llvm *)-2) {
                    v79 = v81;
                  }
                  ++v81;
                  v80 -= 8;
                  if (!v80)
                  {
                    if (!v79) {
                      goto LABEL_173;
                    }
                    *v79 = v41;
                    --v152;
                    goto LABEL_197;
                  }
                }
                goto LABEL_199;
              }
LABEL_173:
              v82 = v151;
              if (HIDWORD(v151) < v151)
              {
                ++HIDWORD(v151);
                v46[v78] = v41;
                goto LABEL_197;
              }
            }
            else
            {
              v82 = v151;
            }
            if (3 * v82 <= 4 * (HIDWORD(v151) - v152))
            {
              if (v82 >= 0x40) {
                v82 *= 2;
              }
              else {
                v82 = 128;
              }
            }
            else if (v82 - HIDWORD(v151) >= v82 >> 3)
            {
              goto LABEL_178;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v149, v82);
            v82 = v151;
            v46 = (llvm **)v150;
LABEL_178:
            v83 = v82 - 1;
            v84 = (v82 - 1) & ((v41 >> 4) ^ (v41 >> 9));
            v85 = &v46[v84];
            v86 = *v85;
            if (*v85 == (llvm *)-1)
            {
              v87 = 0;
LABEL_190:
              if (v87) {
                v91 = v87;
              }
              else {
                v91 = v85;
              }
              if (*v91 != v41)
              {
                if (*v91 == (llvm *)-2) {
                  --v152;
                }
                else {
                  ++HIDWORD(v151);
                }
                *v91 = v41;
                goto LABEL_197;
              }
            }
            else
            {
              v87 = 0;
              v88 = 1;
              while (v86 != v41)
              {
                if (v87) {
                  v89 = 0;
                }
                else {
                  v89 = v86 == (llvm *)-2;
                }
                if (v89) {
                  v87 = v85;
                }
                v90 = v84 + v88++;
                v84 = v90 & v83;
                v85 = &v46[v90 & v83];
                v86 = *v85;
                if (*v85 == (llvm *)-1) {
                  goto LABEL_190;
                }
              }
            }
            goto LABEL_199;
          }
          if (*v72 == (llvm *)-2) {
            --v152;
          }
          else {
            ++HIDWORD(v151);
          }
          *v72 = v45;
LABEL_163:
          if (v159 >= (unint64_t)v160) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v158[v159++] = v45;
          v46 = (llvm **)v150;
          goto LABEL_165;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v149, v51);
        v51 = v151;
        v46 = (llvm **)v150;
        goto LABEL_145;
      }
      if (v7 && v8 == 85)
      {
        v92 = llvm::getUnderlyingObject(*(llvm **)(v7 - 64), (const llvm::Value *)6);
        v93 = llvm::getUnderlyingObject(*(llvm **)(v7 - 32), (const llvm::Value *)6);
        v94 = v145;
        v95 = HIDWORD(v146);
        if (v145 == v144)
        {
          if (HIDWORD(v146))
          {
            v96 = 0;
            v97 = 0;
            while (1)
            {
              v98 = v145[v96];
              if (v98 == v92) {
                goto LABEL_304;
              }
              if (v98 == (llvm *)-2) {
                v97 = &v145[v96];
              }
              if (HIDWORD(v146) == ++v96)
              {
                if (!v97) {
                  break;
                }
                *v97 = v92;
                --v147;
                goto LABEL_302;
              }
            }
          }
          v99 = v146;
          if (HIDWORD(v146) < v146)
          {
            ++HIDWORD(v146);
            v145[v95] = v92;
            goto LABEL_302;
          }
        }
        else
        {
          v99 = v146;
        }
        if (3 * v99 <= 4 * (HIDWORD(v146) - v147))
        {
          if (v99 >= 0x40) {
            v99 *= 2;
          }
          else {
            v99 = 128;
          }
        }
        else if (v99 - HIDWORD(v146) >= v99 >> 3)
        {
LABEL_283:
          v121 = v99 - 1;
          v122 = (v99 - 1) & ((v92 >> 4) ^ (v92 >> 9));
          v123 = &v94[v122];
          v124 = *v123;
          if (*v123 != (llvm *)-1)
          {
            v125 = 0;
            v126 = 1;
            while (v124 != v92)
            {
              if (v125) {
                v127 = 0;
              }
              else {
                v127 = v124 == (llvm *)-2;
              }
              if (v127) {
                v125 = v123;
              }
              v128 = v122 + v126++;
              v122 = v128 & v121;
              v123 = &v94[v128 & v121];
              v124 = *v123;
              if (*v123 == (llvm *)-1) {
                goto LABEL_296;
              }
            }
            goto LABEL_304;
          }
          v125 = 0;
LABEL_296:
          if (v125) {
            v123 = v125;
          }
          if (*v123 == v92)
          {
LABEL_304:
            v129 = HIDWORD(v146);
            if (v94 == v144)
            {
              if (HIDWORD(v146))
              {
                v130 = 0;
                v131 = 8 * HIDWORD(v146);
                v132 = v94;
                while (*v132 != v93)
                {
                  if (*v132 == (llvm *)-2) {
                    v130 = v132;
                  }
                  ++v132;
                  v131 -= 8;
                  if (!v131)
                  {
                    if (!v130) {
                      goto LABEL_312;
                    }
                    *v130 = v93;
                    --v147;
                    goto LABEL_336;
                  }
                }
                goto LABEL_11;
              }
LABEL_312:
              v133 = v146;
              if (HIDWORD(v146) < v146)
              {
                ++HIDWORD(v146);
                v94[v129] = v93;
LABEL_336:
                if (v155 >= (unint64_t)v156) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v154 + v155++) = v93;
                goto LABEL_11;
              }
            }
            else
            {
              v133 = v146;
            }
            if (3 * v133 <= 4 * (HIDWORD(v146) - v147))
            {
              if (v133 >= 0x40) {
                v133 *= 2;
              }
              else {
                v133 = 128;
              }
            }
            else if (v133 - HIDWORD(v146) >= v133 >> 3)
            {
LABEL_317:
              v134 = v133 - 1;
              v135 = (v133 - 1) & ((v93 >> 4) ^ (v93 >> 9));
              v136 = &v94[v135];
              v137 = *v136;
              if (*v136 != (llvm *)-1)
              {
                v138 = 0;
                v139 = 1;
                while (v137 != v93)
                {
                  if (v138) {
                    v140 = 0;
                  }
                  else {
                    v140 = v137 == (llvm *)-2;
                  }
                  if (v140) {
                    v138 = v136;
                  }
                  v141 = v135 + v139++;
                  v135 = v141 & v134;
                  v136 = &v94[v141 & v134];
                  v137 = *v136;
                  if (*v136 == (llvm *)-1) {
                    goto LABEL_329;
                  }
                }
                goto LABEL_11;
              }
              v138 = 0;
LABEL_329:
              if (v138) {
                v142 = v138;
              }
              else {
                v142 = v136;
              }
              if (*v142 == v93) {
                goto LABEL_11;
              }
              if (*v142 == (llvm *)-2) {
                --v147;
              }
              else {
                ++HIDWORD(v146);
              }
              *v142 = v93;
              goto LABEL_336;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v144, v133);
            v133 = v146;
            v94 = v145;
            goto LABEL_317;
          }
          if (*v123 == (llvm *)-2) {
            --v147;
          }
          else {
            ++HIDWORD(v146);
          }
          *v123 = v92;
LABEL_302:
          if (v155 >= (unint64_t)v156) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v154 + v155++) = v92;
          v94 = v145;
          goto LABEL_304;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v144, v99);
        v99 = v146;
        v94 = v145;
        goto LABEL_283;
      }
      v11 = 0;
      if (!v7 || v8 != 83) {
        goto LABEL_353;
      }
      v100 = *(_DWORD *)(v7 + 20);
      if ((v100 & 0x40000000) == 0)
      {
        v101 = v100 & 0x7FFFFFF;
        v102 = (llvm **)(v7 - 32 * v101);
        if (v101) {
          goto LABEL_236;
        }
        goto LABEL_11;
      }
      v102 = *(llvm ***)(v7 - 8);
      v101 = v100 & 0x7FFFFFF;
      if (!v101)
      {
LABEL_11:
        v11 = 1;
        goto LABEL_65;
      }
LABEL_236:
      v103 = &v102[4 * v101];
      while (1)
      {
        v104 = llvm::getUnderlyingObject(*v102, (const llvm::Value *)6);
        v105 = v104;
        v106 = v145;
        v107 = HIDWORD(v146);
        if (v145 == v144)
        {
          if (HIDWORD(v146))
          {
            v108 = 0;
            v109 = 8 * HIDWORD(v146);
            v110 = v145;
            while (*v110 != v104)
            {
              if (*v110 == (llvm *)-2) {
                v108 = v110;
              }
              ++v110;
              v109 -= 8;
              if (!v109)
              {
                if (!v108) {
                  goto LABEL_245;
                }
                *v108 = v104;
                --v147;
                goto LABEL_269;
              }
            }
            goto LABEL_271;
          }
LABEL_245:
          v111 = v146;
          if (HIDWORD(v146) < v146)
          {
            ++HIDWORD(v146);
            v145[v107] = v104;
            goto LABEL_269;
          }
        }
        else
        {
          v111 = v146;
        }
        if (3 * v111 <= 4 * (HIDWORD(v146) - v147)) {
          break;
        }
        if (v111 - HIDWORD(v146) < v111 >> 3) {
          goto LABEL_278;
        }
LABEL_250:
        v112 = v111 - 1;
        v113 = (v111 - 1) & ((v105 >> 4) ^ (v105 >> 9));
        v114 = (char *)&v106[v113];
        v115 = *(llvm **)v114;
        if (*(void *)v114 != -1)
        {
          v116 = 0;
          v117 = 1;
          while (v115 != v105)
          {
            if (v116) {
              v118 = 0;
            }
            else {
              v118 = v115 == (llvm *)-2;
            }
            if (v118) {
              v116 = v114;
            }
            v119 = v113 + v117++;
            v113 = v119 & v112;
            v114 = (char *)&v106[v119 & v112];
            v115 = *(llvm **)v114;
            if (*(void *)v114 == -1) {
              goto LABEL_262;
            }
          }
          goto LABEL_271;
        }
        v116 = 0;
LABEL_262:
        if (v116) {
          v120 = (llvm **)v116;
        }
        else {
          v120 = (llvm **)v114;
        }
        if (*v120 == v105) {
          goto LABEL_271;
        }
        if (*v120 == (llvm *)-2) {
          --v147;
        }
        else {
          ++HIDWORD(v146);
        }
        *v120 = v105;
LABEL_269:
        if (v155 >= (unint64_t)v156) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v154 + v155++) = v105;
LABEL_271:
        v102 += 4;
        v11 = 1;
        if (v102 == v103) {
          goto LABEL_65;
        }
      }
      if (v111 >= 0x40) {
        v111 *= 2;
      }
      else {
        v111 = 128;
      }
LABEL_278:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v144, v111);
      v111 = v146;
      v106 = v145;
      goto LABEL_250;
    }
    if ((const llvm::GlobalValue *)v7 == a2) {
      break;
    }
    v12 = *((unsigned char *)a2 + 16) == 3 ? a2 : 0;
    v13 = v8 == 3 ? v7 : 0;
    if (v8 != 3 || v12 == 0) {
      break;
    }
    if (*((unsigned char *)v12 + 16))
    {
      if (*((unsigned char *)v12 + 16) == 3 && (*((_DWORD *)v12 + 5) & 0x7FFFFFF) == 0) {
        break;
      }
    }
    else if (*((const llvm::GlobalValue **)v12 + 9) == (const llvm::GlobalValue *)((char *)v12 + 72) {
           && (*((unsigned char *)v12 + 34) & 0x80) == 0)
    }
    {
      break;
    }
    if (v13) {
      v15 = *(unsigned char *)(v13 + 16) == 3;
    }
    else {
      v15 = 0;
    }
    if (v15)
    {
      if ((*(_DWORD *)(v13 + 20) & 0x7FFFFFF) == 0) {
        break;
      }
    }
    else if (!*(unsigned char *)(v13 + 16) && *(void *)(v13 + 72) == v13 + 72 && (*(unsigned char *)(v13 + 34) & 0x80) == 0)
    {
      break;
    }
    if ((llvm::GlobalValue::isInterposable(v12) & 1) != 0
      || (llvm::GlobalValue::isInterposable((llvm::GlobalValue *)v13) & 1) != 0)
    {
      break;
    }
    v16 = (unsigned __int8 *)**((void **)v12 - 4);
    v17 = **(unsigned __int8 ***)(v13 - 32);
    v18 = v16[8];
    if (v18 > 0x11) {
      goto LABEL_43;
    }
    if (((1 << v18) & 0xAC7F) == 0)
    {
      if (((1 << v18) & 0x30000) == 0)
      {
LABEL_43:
        if ((v18 & 0xFE) != 0x12 && v18 != 21) {
          break;
        }
      }
      if (!llvm::Type::isSizedDerivedType((uint64_t)v16, 0)) {
        break;
      }
    }
    v20 = v17[8];
    if (v20 > 0x11) {
      goto LABEL_52;
    }
    if (((1 << v20) & 0xAC7F) != 0) {
      goto LABEL_58;
    }
    if (((1 << v20) & 0x30000) == 0)
    {
LABEL_52:
      if ((v20 & 0xFE) != 0x12 && v20 != 21) {
        break;
      }
    }
    if (!llvm::Type::isSizedDerivedType((uint64_t)v17, 0)) {
      break;
    }
LABEL_58:
    v22 = (llvm::DataLayout *)*((void *)this + 1);
    v23 = sub_1CB83544C((uint64_t)v22, (uint64_t)v16);
    v25 = v24 == 1;
    Alignment = llvm::DataLayout::getAlignment(v22, (llvm::Type *)v16, 1);
    if (v25) {
    if ((((1 << Alignment) + ((unint64_t)(v23 + 7) >> 3) - 1) & -(1 << Alignment)) == 0)
    }
      break;
    v28 = (llvm::DataLayout *)*((void *)this + 1);
    v29 = sub_1CB83544C((uint64_t)v28, (uint64_t)v17);
    v31 = v30 == 1;
    v33 = llvm::DataLayout::getAlignment(v28, (llvm::Type *)v17, 1);
    if (v31) {
    if ((((1 << v33) + ((unint64_t)(v29 + 7) >> 3) - 1) & -(1 << v33)) == 0)
    }
      break;
    v11 = 1;
LABEL_65:
    if (v11)
    {
      v6 = v155;
      if (v155) {
        continue;
      }
    }
    goto LABEL_353;
  }
  v11 = 0;
LABEL_353:
  if (v154 != v157) {
    free(v154);
  }
  if (v145 != v144) {
    free(v145);
  }
  return v11;
}

BOOL llvm::GlobalsAAResult::alias(uint64_t a1, llvm::Value **a2, llvm::Value **a3)
{
  v5 = llvm::Value::stripPointerCastsForAliasAnalysis(*a2);
  UnderlyingObject = llvm::getUnderlyingObject(v5, (const llvm::Value *)6);
  v7 = llvm::Value::stripPointerCastsForAliasAnalysis(*a3);
  v8 = llvm::getUnderlyingObject(v7, (const llvm::Value *)6);
  uint64_t v9 = (uint64_t)v8;
  unsigned int v10 = *((unsigned __int8 *)UnderlyingObject + 16);
  if (v10 >= 4) {
    v11 = 0;
  }
  else {
    v11 = UnderlyingObject;
  }
  if (*((unsigned __int8 *)v8 + 16) >= 4u) {
    v12 = 0;
  }
  else {
    v12 = v8;
  }
  if (!((unint64_t)v11 | (unint64_t)v12)) {
    goto LABEL_77;
  }
  if (v11)
  {
    uint64_t v14 = *(void *)(a1 + 48);
    uint64_t v13 = *(void *)(a1 + 56);
    if (v13 == v14)
    {
      uint64_t v15 = *(unsigned int *)(a1 + 68);
      v16 = (llvm **)(v13 + 8 * v15);
      if (v15)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 8 * v15;
        while (*(llvm **)(v13 + v17) != v11)
        {
          v17 += 8;
          if (v18 == v17) {
            goto LABEL_27;
          }
        }
        v16 = (llvm **)(v13 + v17);
      }
LABEL_27:
      uint64_t v14 = *(void *)(a1 + 56);
    }
    else
    {
      uint64_t v19 = *(unsigned int *)(a1 + 64);
      int v20 = v19 - 1;
      unsigned int v21 = (v19 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      v16 = (llvm **)(v13 + 8 * v21);
      v22 = *v16;
      if (*v16 == (llvm *)-1)
      {
        v23 = 0;
LABEL_160:
        if (v23) {
          v16 = v23;
        }
        if (*v16 != v11) {
          v16 = (llvm **)(v13 + 8 * v19);
        }
      }
      else
      {
        v23 = 0;
        int v24 = 1;
        while (v22 != v11)
        {
          if (v23) {
            BOOL v25 = 0;
          }
          else {
            BOOL v25 = v22 == (llvm *)-2;
          }
          if (v25) {
            v23 = v16;
          }
          unsigned int v26 = v21 + v24++;
          unsigned int v21 = v26 & v20;
          v16 = (llvm **)(v13 + 8 * (v26 & v20));
          v22 = *v16;
          if (*v16 == (llvm *)-1) {
            goto LABEL_160;
          }
        }
      }
    }
    BOOL v25 = v13 == v14;
    uint64_t v27 = 64;
    if (v25) {
      uint64_t v27 = 68;
    }
    if (v16 == (llvm **)(v13 + 8 * *(unsigned int *)(a1 + v27))) {
      v11 = 0;
    }
  }
  if (v12)
  {
    uint64_t v29 = *(void *)(a1 + 48);
    uint64_t v28 = *(void *)(a1 + 56);
    if (v28 == v29)
    {
      uint64_t v30 = *(unsigned int *)(a1 + 68);
      v31 = (llvm **)(v28 + 8 * v30);
      if (v30)
      {
        uint64_t v32 = 0;
        uint64_t v33 = 8 * v30;
        while (*(llvm **)(v28 + v32) != v12)
        {
          v32 += 8;
          if (v33 == v32) {
            goto LABEL_52;
          }
        }
        v31 = (llvm **)(v28 + v32);
      }
LABEL_52:
      uint64_t v29 = *(void *)(a1 + 56);
    }
    else
    {
      uint64_t v37 = *(unsigned int *)(a1 + 64);
      int v38 = v37 - 1;
      unsigned int v39 = (v37 - 1) & ((v12 >> 4) ^ (v12 >> 9));
      v31 = (llvm **)(v28 + 8 * v39);
      v40 = *v31;
      if (*v31 == (llvm *)-1)
      {
        v41 = 0;
LABEL_165:
        if (v41) {
          v31 = v41;
        }
        if (*v31 != v12) {
          v31 = (llvm **)(v28 + 8 * v37);
        }
      }
      else
      {
        v41 = 0;
        int v42 = 1;
        while (v40 != v12)
        {
          if (v41) {
            BOOL v43 = 0;
          }
          else {
            BOOL v43 = v40 == (llvm *)-2;
          }
          if (v43) {
            v41 = v31;
          }
          unsigned int v44 = v39 + v42++;
          unsigned int v39 = v44 & v38;
          v31 = (llvm **)(v28 + 8 * (v44 & v38));
          v40 = *v31;
          if (*v31 == (llvm *)-1) {
            goto LABEL_165;
          }
        }
      }
    }
    BOOL v25 = v28 == v29;
    uint64_t v45 = 64;
    if (v25) {
      uint64_t v45 = 68;
    }
    if (v31 == (llvm **)(v28 + 8 * *(unsigned int *)(a1 + v45))) {
      v12 = 0;
    }
    BOOL v35 = v11 != 0;
    BOOL v34 = v12 != 0;
    BOOL v36 = v11 == v12;
    if (v11)
    {
      if (v12 && v11 != v12) {
        return 0;
      }
    }
  }
  else
  {
    BOOL v34 = 0;
    BOOL v35 = v11 != 0;
    BOOL v36 = v11 == 0;
  }
  int v47 = v35 || v34;
  if (byte_1EBCC5600)
  {
    if (v47 && !v36) {
      return 0;
    }
  }
  if ((v47 ^ 1 | v36)) {
    goto LABEL_77;
  }
  v49 = v35 ? v11 : v12;
  v50 = v35 ? v8 : UnderlyingObject;
  if (llvm::GlobalsAAResult::isNonEscapingGlobalNoAlias((llvm::GlobalsAAResult *)a1, v49, v50)) {
    return 0;
  }
  unsigned int v10 = *((unsigned __int8 *)UnderlyingObject + 16);
LABEL_77:
  BOOL v51 = v10 != 60 || UnderlyingObject == 0;
  if (!v51 && ((uint64_t v52 = *((void *)UnderlyingObject - 4)) != 0 ? (v53 = *(unsigned char *)(v52 + 16) == 3) : (v53 = 0), v53))
  {
    uint64_t v56 = *(void *)(a1 + 152);
    uint64_t v55 = *(void *)(a1 + 160);
    if (v55 == v56)
    {
      uint64_t v57 = *(unsigned int *)(a1 + 172);
      v58 = (void *)(v55 + 8 * v57);
      if (v57)
      {
        uint64_t v59 = 0;
        uint64_t v60 = 8 * v57;
        while (*(void *)(v55 + v59) != v52)
        {
          v59 += 8;
          if (v60 == v59) {
            goto LABEL_104;
          }
        }
        v58 = (void *)(v55 + v59);
      }
LABEL_104:
      uint64_t v56 = *(void *)(a1 + 160);
    }
    else
    {
      uint64_t v61 = *(unsigned int *)(a1 + 168);
      int v62 = v61 - 1;
      unsigned int v63 = (v61 - 1) & ((v52 >> 4) ^ (v52 >> 9));
      v58 = (void *)(v55 + 8 * v63);
      uint64_t v64 = *v58;
      if (*v58 == -1)
      {
        v65 = 0;
LABEL_170:
        if (v65) {
          v58 = v65;
        }
        if (*v58 != v52) {
          v58 = (void *)(v55 + 8 * v61);
        }
      }
      else
      {
        v65 = 0;
        int v66 = 1;
        while (v64 != v52)
        {
          if (v65) {
            BOOL v67 = 0;
          }
          else {
            BOOL v67 = v64 == -2;
          }
          if (v67) {
            v65 = v58;
          }
          unsigned int v68 = v63 + v66++;
          unsigned int v63 = v68 & v62;
          v58 = (void *)(v55 + 8 * (v68 & v62));
          uint64_t v64 = *v58;
          if (*v58 == -1) {
            goto LABEL_170;
          }
        }
      }
    }
    BOOL v25 = v55 == v56;
    uint64_t v69 = 168;
    if (v25) {
      uint64_t v69 = 172;
    }
    if (v58 == (void *)(v55 + 8 * *(unsigned int *)(a1 + v69))) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *((void *)UnderlyingObject - 4);
    }
  }
  else
  {
    uint64_t v54 = 0;
  }
  uint64_t v70 = 0;
  if (v9)
  {
    if (*(unsigned char *)(v9 + 16) == 60)
    {
      uint64_t v70 = 0;
      uint64_t v71 = *(void *)(v9 - 32);
      if (v71)
      {
        if (*(unsigned char *)(v71 + 16) == 3)
        {
          uint64_t v73 = *(void *)(a1 + 152);
          uint64_t v72 = *(void *)(a1 + 160);
          if (v72 == v73)
          {
            uint64_t v74 = *(unsigned int *)(a1 + 172);
            v75 = (void *)(v72 + 8 * v74);
            if (v74)
            {
              uint64_t v76 = 0;
              uint64_t v77 = 8 * v74;
              while (*(void *)(v72 + v76) != v71)
              {
                v76 += 8;
                if (v77 == v76) {
                  goto LABEL_132;
                }
              }
              v75 = (void *)(v72 + v76);
            }
LABEL_132:
            uint64_t v73 = *(void *)(a1 + 160);
          }
          else
          {
            uint64_t v78 = *(unsigned int *)(a1 + 168);
            int v79 = v78 - 1;
            unsigned int v80 = (v78 - 1) & ((v71 >> 4) ^ (v71 >> 9));
            v75 = (void *)(v72 + 8 * v80);
            uint64_t v81 = *v75;
            if (*v75 == -1)
            {
              v82 = 0;
LABEL_175:
              if (v82) {
                v75 = v82;
              }
              if (*v75 != v71) {
                v75 = (void *)(v72 + 8 * v78);
              }
            }
            else
            {
              v82 = 0;
              int v83 = 1;
              while (v81 != v71)
              {
                if (v82) {
                  BOOL v84 = 0;
                }
                else {
                  BOOL v84 = v81 == -2;
                }
                if (v84) {
                  v82 = v75;
                }
                unsigned int v85 = v80 + v83++;
                unsigned int v80 = v85 & v79;
                v75 = (void *)(v72 + 8 * (v85 & v79));
                uint64_t v81 = *v75;
                if (*v75 == -1) {
                  goto LABEL_175;
                }
              }
            }
          }
          BOOL v25 = v72 == v73;
          uint64_t v86 = 168;
          if (v25) {
            uint64_t v86 = 172;
          }
          if (v75 == (void *)(v72 + 8 * *(unsigned int *)(a1 + v86))) {
            uint64_t v70 = 0;
          }
          else {
            uint64_t v70 = *(void *)(v9 - 32);
          }
        }
      }
    }
  }
  if (!v54)
  {
    uint64_t v91 = 0;
    if (sub_1CBFF64C0(*(void *)(a1 + 248), *(_DWORD *)(a1 + 264), (uint64_t)UnderlyingObject, &v91)) {
      uint64_t v54 = *(void *)(v91 + 8);
    }
  }
  if (!v70)
  {
    uint64_t v91 = 0;
    if (sub_1CBFF64C0(*(void *)(a1 + 248), *(_DWORD *)(a1 + 264), v9, &v91)) {
      uint64_t v70 = *(void *)(v91 + 8);
    }
  }
  if (v54)
  {
    if (v70 && v54 != v70) {
      return 0;
    }
  }
  if (byte_1EBCC5600) {
    BOOL v89 = (v54 | v70) == 0;
  }
  else {
    BOOL v89 = 1;
  }
  return v89 || v54 == v70;
}

uint64_t llvm::GlobalsAAResult::getModRefInfoForArgument(uint64_t a1, uint64_t a2, llvm::Value *a3)
{
  v31[4] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a2 + 64);
  if (v7 && (*(unsigned char *)(v7 + 17) & 0x10) != 0) {
    return 4;
  }
  LODWORD(v26[0]) = 7;
  if ((!sub_1CC5CB59C(a2, (__int32 *)v26, 1uLL)
     || (uint64_t v10 = *(void *)(a2 - 32)) != 0
     && !*(unsigned char *)(v10 + 16)
     && *(void *)(v10 + 24) == *(void *)(a2 + 72)
     && *(_DWORD *)(v10 + 36) == 7)
    && (llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44) & 1) != 0)
  {
    return 4;
  }
  char v11 = sub_1CBF99AB0(a2, 45) ? 5 : 7;
  char v22 = v11;
  v12 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  uint64_t v21 = sub_1CBF5BBBC(a2);
  if (v12 == (uint64_t *)v21)
  {
    return 4;
  }
  else
  {
    while (1)
    {
      uint64_t v29 = v31;
      uint64_t v30 = 0x400000000;
      llvm::getUnderlyingObjects(*v12, (uint64_t)&v29, 0, (llvm::Value *)6);
      uint64_t v14 = (llvm **)v29;
      if (v30)
      {
        uint64_t v15 = 8 * v30;
        do
        {
          if ((llvm::isIdentifiedObject(*v14, v13) & 1) == 0)
          {
            uint64_t v14 = (llvm **)v29;
            if (!v30) {
              goto LABEL_28;
            }
            uint64_t v16 = 8 * v30;
            while (1)
            {
              v26[0] = *v14;
              v26[1] = (llvm::Value *)-1;
              long long v27 = 0u;
              long long v28 = 0u;
              v23[0] = a3;
              v23[1] = (llvm::Value *)-1;
              long long v24 = 0u;
              long long v25 = 0u;
              if (llvm::GlobalsAAResult::alias(a1, v26, v23)) {
                break;
              }
              ++v14;
              v16 -= 8;
              if (!v16) {
                goto LABEL_22;
              }
            }
            BOOL v20 = 0;
            uint64_t v14 = (llvm **)v29;
            unsigned __int8 v3 = v22;
            goto LABEL_31;
          }
          ++v14;
          v15 -= 8;
        }
        while (v15);
LABEL_22:
        uint64_t v17 = v30;
        uint64_t v14 = (llvm **)v29;
        if (!v30) {
          goto LABEL_28;
        }
        uint64_t v18 = 0;
        uint64_t v19 = (llvm **)((char *)v29 + 8 * v30);
        while (*(llvm::Value **)((char *)v29 + v18) != a3)
        {
          v18 += 8;
          if (8 * v30 == v18) {
            goto LABEL_29;
          }
        }
        uint64_t v19 = (llvm **)((char *)v29 + v18);
      }
      else
      {
LABEL_28:
        uint64_t v17 = 0;
        uint64_t v19 = v14;
      }
LABEL_29:
      BOOL v20 = v19 - v14 == v17;
      if (v19 - v14 != v17) {
        unsigned __int8 v3 = v22;
      }
LABEL_31:
      if (v14 != v31) {
        free(v14);
      }
      if (!v20) {
        return v3;
      }
      v12 += 4;
      unsigned __int8 v8 = 4;
      if (v12 == (uint64_t *)v21) {
        return v8;
      }
    }
  }
}

uint64_t llvm::GlobalsAAResult::getModRefInfo(uint64_t a1, uint64_t a2, llvm **a3)
{
  UnderlyingObject = llvm::getUnderlyingObject(*a3, (const llvm::Value *)6);
  if (UnderlyingObject) {
    BOOL v6 = *((unsigned __int8 *)UnderlyingObject + 16) > 3u;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    goto LABEL_7;
  }
  uint64_t v7 = UnderlyingObject;
  if ((*((_DWORD *)UnderlyingObject + 8) & 0xFu) - 7 > 1) {
    goto LABEL_7;
  }
  if (*(unsigned char *)(a1 + 144)) {
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)(a2 - 32);
  if (!v10 || *(unsigned char *)(v10 + 16) || *(void *)(v10 + 24) != *(void *)(a2 + 72)) {
    goto LABEL_7;
  }
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  if (v11 == v12)
  {
    uint64_t v13 = *(unsigned int *)(a1 + 68);
    uint64_t v14 = (llvm::Value **)(v11 + 8 * v13);
    if (v13)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 8 * v13;
      while (*(llvm **)(v11 + v15) != UnderlyingObject)
      {
        v15 += 8;
        if (v16 == v15) {
          goto LABEL_32;
        }
      }
      uint64_t v14 = (llvm::Value **)(v11 + v15);
    }
LABEL_32:
    uint64_t v12 = *(void *)(a1 + 56);
  }
  else
  {
    uint64_t v17 = *(unsigned int *)(a1 + 64);
    int v18 = v17 - 1;
    unsigned int v19 = (v17 - 1) & ((UnderlyingObject >> 4) ^ (UnderlyingObject >> 9));
    uint64_t v14 = (llvm::Value **)(v11 + 8 * v19);
    BOOL v20 = *v14;
    if (*v14 == (llvm::Value *)-1)
    {
      uint64_t v21 = 0;
LABEL_44:
      if (v21) {
        uint64_t v14 = v21;
      }
      if (*v14 != v7) {
        uint64_t v14 = (llvm::Value **)(v11 + 8 * v17);
      }
    }
    else
    {
      uint64_t v21 = 0;
      int v22 = 1;
      while (v20 != v7)
      {
        if (v21) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = v20 == (llvm::Value *)-2;
        }
        if (v23) {
          uint64_t v21 = v14;
        }
        unsigned int v24 = v19 + v22++;
        unsigned int v19 = v24 & v18;
        uint64_t v14 = (llvm::Value **)(v11 + 8 * (v24 & v18));
        BOOL v20 = *v14;
        if (*v14 == (llvm::Value *)-1) {
          goto LABEL_44;
        }
      }
    }
  }
  BOOL v23 = v11 == v12;
  uint64_t v25 = 64;
  if (v23) {
    uint64_t v25 = 68;
  }
  if (v14 == (llvm::Value **)(v11 + 8 * *(unsigned int *)(a1 + v25)))
  {
LABEL_7:
    char v8 = 7;
  }
  else
  {
    uint64_t v38 = *(void *)(a2 - 32);
    uint64_t v39 = 0;
    int v26 = sub_1CBA0E618(a1 + 272, &v38, &v39);
    char v8 = 7;
    if (v26 && v39 != *(void *)(a1 + 272) + 16 * *(unsigned int *)(a1 + 288))
    {
      uint64_t v27 = *(void *)(v39 + 8);
      if ((v27 & 4) != 0) {
        char v28 = 5;
      }
      else {
        char v28 = 4;
      }
      unint64_t v29 = v27 & 0xFFFFFFFFFFFFFFF8;
      if (v29)
      {
        char v37 = v28;
        uint64_t v30 = (unsigned char *)v29;
        uint64_t v31 = sub_1CD487ED0(v29, (uint64_t)v7);
        uint64_t v32 = v30;
        char v34 = *v30;
        uint64_t v33 = v30 + 8;
        if (v34)
        {
          uint64_t v35 = 16;
        }
        else
        {
          uint64_t v33 = (unsigned char *)*((void *)v32 + 1);
          uint64_t v35 = *((unsigned int *)v32 + 4);
        }
        BOOL v36 = &v33[16 * v35];
        char v28 = v37;
        if (v36 != (unsigned char *)v31) {
          char v28 = *(unsigned char *)(v31 + 8) | v37;
        }
      }
      char v8 = llvm::GlobalsAAResult::getModRefInfoForArgument(a1, a2, v7) | v28;
    }
  }
  if ((v8 & 3) != 0) {
    return v8 & 7;
  }
  else {
    return 4;
  }
}

uint64_t llvm::GlobalsAAResult::GlobalsAAResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  if (v5)
  {
    if (v5 == a2 + 16)
    {
      *(void *)(a1 + 40) = a1 + 16;
      (*(void (**)(void))(**(void **)(a2 + 40) + 24))(*(void *)(a2 + 40));
    }
    else
    {
      *(void *)(a1 + 40) = v5;
      *(void *)(a2 + 40) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 40) = 0;
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(a1 + 48, (void *)(a1 + 80), 8, (uint64_t *)(a2 + 48));
  *(unsigned char *)(a1 + 144) = 0;
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(a1 + 152, (void *)(a1 + 184), 8, (uint64_t *)(a2 + 152));
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a2 + 248) = 0;
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_DWORD *)(a2 + 256) = 0;
  int v6 = *(_DWORD *)(a1 + 260);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a2 + 260) = v6;
  int v7 = *(_DWORD *)(a1 + 264);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_DWORD *)(a2 + 264) = v7;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a2 + 272) = 0;
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a2 + 280) = 0;
  int v8 = *(_DWORD *)(a1 + 284);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  *(_DWORD *)(a2 + 284) = v8;
  int v9 = *(_DWORD *)(a1 + 288);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a2 + 288) = v9;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  uint64_t v10 = sub_1CD46E850((uint64_t *)(a1 + 320), (void *)(a2 + 320));
  for (i = *(uint64_t **)(a1 + 328); i != v10; i = (uint64_t *)i[1])
    i[6] = a1;
  return a1;
}

void llvm::GlobalsAAResult::~GlobalsAAResult(llvm::GlobalsAAResult *this)
{
  sub_1CBFF6368((void *)this + 40);
  MEMORY[0x1D25D9CD0](*((void *)this + 37), 8);
  sub_1CBFF6C98((uint64_t)this + 272);
  MEMORY[0x1D25D9CD0](*((void *)this + 34), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 31), 8);
  v2 = (void *)*((void *)this + 20);
  if (v2 != *((void **)this + 19)) {
    free(v2);
  }
  unsigned __int8 v3 = (void *)*((void *)this + 7);
  if (v3 != *((void **)this + 6)) {
    free(v3);
  }
  uint64_t v4 = (llvm::GlobalsAAResult *)*((void *)this + 5);
  if (v4 == (llvm::GlobalsAAResult *)((char *)this + 16))
  {
    (*(void (**)(char *))(*((void *)this + 2) + 32))((char *)this + 16);
  }
  else if (v4)
  {
    (*(void (**)(llvm::GlobalsAAResult *))(*(void *)v4 + 40))(v4);
  }
}

uint64_t llvm::GlobalsAAResult::analyzeModule@<X0>(llvm::Module *a1@<X0>, uint64_t a2@<X1>, llvm::CallGraph *a3@<X2>, llvm::GlobalsAAResult *a4@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (uint64_t)a1 + 272;
  sub_1CBFF6D30((uint64_t)v10, a2);
  llvm::GlobalsAAResult::GlobalsAAResult((uint64_t)a4, v7, (uint64_t)v10);
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  llvm::GlobalsAAResult::CollectSCCMembership(a4, a3);
  llvm::GlobalsAAResult::AnalyzeGlobals(a4, a1);
  return llvm::GlobalsAAResult::AnalyzeCallGraph(a4, a3, v8);
}

_DWORD *sub_1CBFF5CCC(_DWORD *result)
{
  v1 = result;
  int v2 = result[2];
  if (v2 || result[3])
  {
    uint64_t v3 = result[4];
    if (v3 <= 4 * v2 || v3 < 0x41)
    {
      if (v3)
      {
        uint64_t v4 = *(void **)result;
        uint64_t v5 = 16 * v3;
        do
        {
          if (*v4 != -4096)
          {
            if (*v4 != -8192)
            {
              unint64_t v6 = v4[1] & 0xFFFFFFFFFFFFFFF8;
              if (v6)
              {
                if ((*(unsigned char *)v6 & 1) == 0) {
                  MEMORY[0x1D25D9CD0](*(void *)(v6 + 8), 8);
                }
                result = (_DWORD *)MEMORY[0x1D25D9CE0](v6, 0x1000C400BDB4DB4);
              }
            }
            *uint64_t v4 = -4096;
          }
          v4 += 2;
          v5 -= 16;
        }
        while (v5);
      }
      *((void *)v1 + 1) = 0;
    }
    else
    {
      return sub_1CD48839C(result);
    }
  }
  return result;
}

_DWORD *sub_1CBFF5DC8(_DWORD *result)
{
  if (*((void *)result + 1))
  {
    uint64_t v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1CBA7B248(result);
    }
    else
    {
      if (v1)
      {
        int v2 = *(void **)result;
        uint64_t v3 = 16 * v1;
        do
        {
          void *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((void *)result + 1) = 0;
    }
  }
  return result;
}

void sub_1CBFF5E18(llvm *a1, llvm::PassRegistry *a2)
{
}

uint64_t sub_1CBFF5EC8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_15:
    uint64_t result = 1;
  }
  else
  {
    int v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        int v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_15;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1CBFF5F6C(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x11)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x10)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CBFF6104(a1, v11, v11 + 16 * v12);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  uint64_t v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)uint64_t v7 = v8;
      v7[8] = *(unsigned char *)(a1 + v6 + 16);
      v7 += 16;
    }
    v6 += 16;
  }
  while (v6 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CBFF6104(a1, (uint64_t)v14, (uint64_t)v7);
}

uint64_t sub_1CBFF6104(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 264);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    void *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v12 = 0;
      uint64_t result = sub_1CBFF5EC8((uint64_t)v5, v10, &v12);
      uint64_t v11 = v12;
      void *v12 = *(void *)a2;
      *((unsigned char *)v11 + 8) = *(unsigned char *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

int *sub_1CBFF61C8(int *a1)
{
  int v2 = *a1;
  if (*a1 <= 1)
  {
    if (v2)
    {
      int v5 = a1 + 2;
      uint64_t v6 = 16;
    }
    else
    {
      int v5 = (int *)*((void *)a1 + 1);
      uint64_t v6 = a1[4];
    }
    return &v5[4 * v6];
  }
  else if (v2)
  {
    uint64_t result = a1 + 2;
    unint64_t v4 = a1 + 66;
LABEL_4:
    while (*(void *)result == -4096 || *(void *)result == -8192)
    {
      result += 4;
      if (result == v4) {
        return v4;
      }
    }
  }
  else
  {
    uint64_t result = (int *)*((void *)a1 + 1);
    uint64_t v7 = a1[4];
    if (v7)
    {
      unint64_t v4 = &result[4 * v7];
      goto LABEL_4;
    }
  }
  return result;
}

void *sub_1CBFF624C(int *a1, unsigned int *__src)
{
  int v4 = *a1;
  if ((*a1 & 1) == 0)
  {
    MEMORY[0x1D25D9CD0](*((void *)a1 + 1), 8);
    int v4 = *a1;
  }
  *a1 = v4 | 1;
  if ((*__src & 1) != 0 || __src[4] <= 0x10)
  {
    int v5 = 0;
    *a1 = *__src | 1;
    a1[1] = __src[1];
    uint64_t v6 = a1 + 2;
  }
  else
  {
    *a1 = v4 & 0xFFFFFFFE;
    if (*__src) {
      uint64_t v11 = 16;
    }
    else {
      uint64_t v11 = __src[4];
    }
    *((void *)a1 + 1) = operator new(16 * v11, (std::align_val_t)8uLL);
    uint64_t v6 = a1 + 2;
    *((void *)a1 + 2) = v11;
    int v12 = *a1;
    *a1 = *__src & 0xFFFFFFFE | *a1 & 1;
    a1[1] = __src[1];
    if (v12)
    {
      int v5 = 0;
    }
    else
    {
      uint64_t v6 = (void *)*v6;
      int v5 = 1;
    }
  }
  char v8 = *(unsigned char *)__src;
  uint64_t v7 = __src + 2;
  if ((v8 & 1) == 0) {
    uint64_t v7 = (void *)*v7;
  }
  if (v5) {
    size_t v9 = 16 * a1[4];
  }
  else {
    size_t v9 = 256;
  }

  return memcpy(v6, v7, v9);
}

void *sub_1CBFF6368(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        int v4 = (void *)result[1];
        uint64_t v5 = result[5];
        if (v5 != -8192 && v5 != -4096 && v5 != 0)
        {
          unint64_t v7 = result[3] & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v7 = result[4];
          char v8 = (unint64_t *)result[4];
          if (v8)
          {
            unint64_t *v8 = *v8 & 7 | v7;
          }
          else
          {
            uint64_t v9 = result[5];
            uint64_t v10 = ***(int32x2_t ****)v9;
            unint64_t v11 = (unint64_t)v10[303];
            if (v11 <= v7)
            {
              uint64_t v12 = v10[305].u32[0];
              if (v11 + 16 * v12 > v7)
              {
                unsigned int v13 = v12 - 1;
                LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
                uint64_t v15 = (uint64_t *)(v11 + 16 * v14);
                uint64_t v16 = *v15;
                if (v9 == *v15)
                {
LABEL_16:
                  *uint64_t v15 = -8192;
                  v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v9 = result[5];
                }
                else
                {
                  int v17 = 1;
                  while (v16 != -4096)
                  {
                    int v18 = v14 + v17++;
                    uint64_t v14 = v18 & v13;
                    uint64_t v16 = *(void *)(v11 + 16 * v14);
                    if (v9 == v16)
                    {
                      uint64_t v15 = (uint64_t *)(v11 + 16 * v14);
                      goto LABEL_16;
                    }
                  }
                }
                *(unsigned char *)(v9 + 17) &= ~1u;
              }
            }
          }
        }
        operator delete(result);
        uint64_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t sub_1CBFF64C0(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v7 = a2 - 1;
    unsigned int v8 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v4 = (void *)(a1 + 16 * v8);
    uint64_t v9 = *v4;
    if (*v4 == a3)
    {
      uint64_t v5 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v9 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v9 == -8192;
        }
        if (v12) {
          uint64_t v10 = v4;
        }
        unsigned int v13 = v8 + v11++;
        unsigned int v8 = v13 & v7;
        int v4 = (void *)(a1 + 16 * (v13 & v7));
        uint64_t v9 = *v4;
        uint64_t v5 = 1;
        if (*v4 == a3) {
          goto LABEL_3;
        }
      }
      uint64_t v5 = 0;
      if (v10) {
        int v4 = v10;
      }
    }
  }
  else
  {
    int v4 = 0;
    uint64_t v5 = 0;
  }
LABEL_3:
  *a4 = v4;
  return v5;
}

void *sub_1CBFF6554(uint64_t a1, uint64_t a2)
{
  int v4 = operator new(0x40uLL);
  v4[3] = 2;
  *int v4 = 0;
  v4[1] = 0;
  v4[4] = 0;
  v4[5] = a2;
  if (a2 != -8192 && a2 != -4096 && a2) {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v4 + 3));
  }
  v4[2] = &unk_1F2603480;
  v4[6] = a1;
  v4[7] = 0;
  return v4;
}

void *sub_1CBFF65DC(_DWORD *a1, void *a2)
{
  int v7 = 0;
  char v4 = sub_1CBA0E618((uint64_t)a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CBFF6638(a1, a2, v7);
    void *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CBFF6638(_DWORD *a1, void *a2, void *a3)
{
  int v5 = a1[2];
  unsigned int v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[3] > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CBFF66EC((uint64_t)a1, v6);
  unsigned int v8 = 0;
  sub_1CBA0E618((uint64_t)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++a1[2];
  if (*a3 != -4096) {
    --a1[3];
  }
  return a3;
}

void *sub_1CBFF66EC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CBFF67B8(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CBFF67B8(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CBA0E618(v5, a2, &v11);
      uint64_t v9 = v11;
      uint64_t v10 = a2[1];
      void *v11 = *a2;
      v9[1] = v10;
      a2[1] = 0;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void *sub_1CBFF6864(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    uint64_t v10 = 0;
LABEL_8:
    uint64_t v6 = sub_1CBFF69C0(a1, (uint64_t)a2, a2, v10);
    *uint64_t v6 = *a2;
    *((_DWORD *)v6 + 2) = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  uint64_t v6 = (void *)(*(void *)a1 + 16 * v5);
  uint64_t v7 = *v6;
  if (*a2 != *v6)
  {
    uint64_t v8 = 0;
    int v9 = 1;
    while (v7 != -4096)
    {
      if (v8) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v7 == -8192;
      }
      if (v12) {
        uint64_t v8 = v6;
      }
      unsigned int v13 = v5 + v9++;
      unsigned int v5 = v13 & v4;
      uint64_t v6 = (void *)(*(void *)a1 + 16 * (v13 & v4));
      uint64_t v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v8) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = v6;
    }
    goto LABEL_8;
  }
  return v6;
}

uint64_t sub_1CBFF6924(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      int v9 = 0;
      int v10 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v9) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          int v9 = v7;
        }
        unsigned int v13 = v6 + v10++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 16 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_7;
        }
      }
      uint64_t result = 0;
      if (v9) {
        uint64_t v7 = v9;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void *sub_1CBFF69C0(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CBFF6AF4(a1, v7);
      int v17 = 0;
      sub_1CBFF6924((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CBFF6AF4(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    unsigned int v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        unsigned int v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 16 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CBFF6AF4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CBFF6BC0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CBFF6BC0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    uint64_t v4 = *(void **)result;
    uint64_t v5 = 16 * v3;
    do
    {
      *uint64_t v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    uint64_t v6 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      int v7 = *(_DWORD *)(result + 16) - 1;
      unsigned int v8 = v7 & ((v6 >> 4) ^ (v6 >> 9));
      uint64_t v9 = *(void *)result + 16 * v8;
      uint64_t v10 = *(void *)v9;
      if (v6 != *(void *)v9)
      {
        uint64_t v11 = 0;
        int v12 = 1;
        while (v10 != -4096)
        {
          if (v11) {
            BOOL v13 = 0;
          }
          else {
            BOOL v13 = v10 == -8192;
          }
          if (v13) {
            uint64_t v11 = v9;
          }
          unsigned int v14 = v8 + v12++;
          unsigned int v8 = v14 & v7;
          uint64_t v9 = *(void *)result + 16 * (v14 & v7);
          uint64_t v10 = *(void *)v9;
          if (v6 == *(void *)v9) {
            goto LABEL_11;
          }
        }
        if (v11) {
          uint64_t v9 = v11;
        }
      }
LABEL_11:
      *(void *)uint64_t v9 = v6;
      *(_DWORD *)(v9 + 8) = *((_DWORD *)a2 + 2);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t sub_1CBFF6C98(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 16 * v1;
    uint64_t v3 = (void *)(*(void *)result + 8);
    do
    {
      if ((*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unint64_t v4 = *v3 & 0xFFFFFFFFFFFFFFF8;
        if (v4)
        {
          if ((*(unsigned char *)v4 & 1) == 0) {
            MEMORY[0x1D25D9CD0](*(void *)(v4 + 8), 8);
          }
          uint64_t result = MEMORY[0x1D25D9CE0](v4, 0x1000C400BDB4DB4);
        }
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1CBFF6D30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1CBFF6DCC()
{
}

void *sub_1CBFF6DE0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F26034A8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBFF6E28(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F26034A8;
  a2[1] = v2;
  return result;
}

void sub_1CBFF6E54()
{
}

void sub_1CBFF6E84()
{
}

void *sub_1CBFF6E98(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F26034F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBFF6EE0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F26034F0;
  a2[1] = v2;
  return result;
}

void sub_1CBFF6F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::TargetLibraryInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::TargetLibraryInfoWrapperPass::ID);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v8 = v7 + 32;
  if (!*(unsigned char *)(v7 + 232))
  {
    uint64_t v9 = *(void *)(a2 + 40) + 216;
    __int16 v21 = 260;
    v20[0] = v9;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v20);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v33 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(void *)&long long v10 = -1;
    *((void *)&v10 + 1) = -1;
    *(_OWORD *)__src = v10;
    long long v25 = v10;
    long long v26 = v10;
    long long v27 = v10;
    long long v28 = v10;
    long long v29 = v10;
    *(_OWORD *)uint64_t v30 = v10;
    *(void *)&v30[13] = -1;
    sub_1CC153974((uint64_t)__src, (int *)__p);
    sub_1CD4D04B8(v8, (uint64_t)__src);
    sub_1CD4CFA4C((uint64_t *)__src);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1CC1569E8(__src, v8);
}

uint64_t sub_1CBFF7234()
{
  char v2 = 0;
  uint64_t v3 = &v2;
  int v1 = 1;
  sub_1CD487FE0(&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCC5580, &dword_1CB82C000);
}

BOOL llvm::GPUAAResult::alias(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v3 = **a2;
  unsigned int v4 = *(_DWORD *)(v3 + 8);
  if (v4 != 15) {
    return 1;
  }
  uint64_t v5 = **a3;
  unsigned int v6 = *(_DWORD *)(v5 + 8);
  if (v6 != 15) {
    return 1;
  }
  if ((v4 & 0xFE) == 0x12) {
    unsigned int v4 = *(_DWORD *)(**(void **)(v3 + 16) + 8);
  }
  if ((v6 & 0xFE) == 0x12) {
    unsigned int v6 = *(_DWORD *)(**(void **)(v5 + 16) + 8);
  }
  return v6 < 0x100 || v4 < 0x100 || (v6 ^ v4) <= 0xFF;
}

BOOL llvm::GPUAAResult::pointsToConstantMemory(uint64_t a1, llvm **a2)
{
  UnderlyingObject = llvm::getUnderlyingObject(*a2, (const llvm::Value *)6);
  int v3 = *(_DWORD *)(*(void *)UnderlyingObject + 8);
  if ((v3 & 0xFE) == 0x12) {
    int v3 = *(_DWORD *)(**(void **)(*(void *)UnderlyingObject + 16) + 8);
  }
  return (v3 & 0xFFFFFF00) == 512;
}

void llvm::GPUAA::run()
{
}

uint64_t llvm::GPUAAResult::getModRefBehavior(llvm::GPUAAResult *this, const llvm::CallBase *a2)
{
  uint64_t v2 = *((void *)a2 - 4);
  if (!v2 || *(unsigned char *)(v2 + 16) || *(void *)(v2 + 24) != *((void *)a2 + 9)) {
    return 63;
  }
  uint64_t v4 = *(void *)(v2 + 112);
  if (v4)
  {
    if ((*(unsigned char *)(v4 + 17) & 0x10) != 0) {
      return 4;
    }
    if ((*(unsigned char *)(v4 + 17) & 0x20) != 0) {
      unsigned int v5 = 61;
    }
    else {
      unsigned int v5 = 63;
    }
    if ((*(unsigned char *)(v4 + 12) & 8) != 0) {
      uint64_t result = v5 & 0xF;
    }
    else {
      uint64_t result = v5;
    }
  }
  else
  {
    uint64_t result = 63;
  }
  uint64_t v7 = (void *)*((void *)this + 1);
  if ((*(unsigned char *)(v7[1] + 40) & 0x80) == 0 && *(unsigned __int8 *)(*v7 + 81) >= 0x40u)
  {
    unsigned int v14 = result;
    uint64_t v13 = *((void *)a2 - 4);
    Name = llvm::Value::getName((llvm::Value *)v2);
    if (v9 == 16
      && (*(void *)Name == 0x705F7465736D656DLL ? (BOOL v10 = *((void *)Name + 1) == 0x36316E7265747461) : (BOOL v10 = 0),
          v10
       && (uint64_t v11 = *(void *)(v13 + 24), *(_DWORD *)(v11 + 8) <= 0xFFu)
       && *(_DWORD *)(v11 + 12) == 4
       && (uint64_t v12 = *(void **)(v11 + 16), *(unsigned char *)(v12[1] + 8) == 15)
       && *(unsigned char *)(v12[2] + 8) == 15
       && *(unsigned char *)(v12[3] + 8) == 13))
    {
      return 15;
    }
    else
    {
      return v14;
    }
  }
  return result;
}

uint64_t llvm::GPUAAResult::getModRefBehavior(llvm::GPUAAResult *this, const llvm::Function *a2)
{
  uint64_t v3 = *((void *)a2 + 14);
  if (v3)
  {
    if ((*(unsigned char *)(v3 + 17) & 0x10) != 0) {
      return 4;
    }
    if ((*(unsigned char *)(v3 + 17) & 0x20) != 0) {
      unsigned int v4 = 61;
    }
    else {
      unsigned int v4 = 63;
    }
    if ((*(unsigned char *)(v3 + 12) & 8) != 0) {
      uint64_t result = v4 & 0xF;
    }
    else {
      uint64_t result = v4;
    }
  }
  else
  {
    uint64_t result = 63;
  }
  unsigned int v6 = (void *)*((void *)this + 1);
  if ((*(unsigned char *)(v6[1] + 40) & 0x80) == 0 && *(unsigned __int8 *)(*v6 + 81) >= 0x40u)
  {
    unsigned int v13 = result;
    Name = llvm::Value::getName(a2);
    if (v8 == 16
      && (*(void *)Name == 0x705F7465736D656DLL ? (BOOL v9 = *((void *)Name + 1) == 0x36316E7265747461) : (BOOL v9 = 0),
          v9
       && (uint64_t v10 = *((void *)a2 + 3), *(_DWORD *)(v10 + 8) <= 0xFFu)
       && *(_DWORD *)(v10 + 12) == 4
       && (uint64_t v11 = *(void **)(v10 + 16), *(unsigned char *)(v11[1] + 8) == 15)
       && *(unsigned char *)(v11[2] + 8) == 15
       && *(unsigned char *)(v11[3] + 8) == 13))
    {
      return 15;
    }
    else
    {
      return v13;
    }
  }
  return result;
}

uint64_t llvm::GPUAAWrapperPass::doInitialization(llvm::GPUAAWrapperPass *this, llvm::Module *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t *)*((void *)this + 1);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::TargetLibraryInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::TargetLibraryInfoWrapperPass::ID);
  uint64_t v8 = (void *)*((void *)a2 + 4);
  if (v8 != (void *)((char *)a2 + 24))
  {
    uint64_t v9 = v7;
    do
    {
      if (v8) {
        uint64_t v10 = v8 - 7;
      }
      else {
        uint64_t v10 = 0;
      }
      if (v8 && *((unsigned char *)v10 + 16) == 3)
      {
        if ((*((_DWORD *)v10 + 5) & 0x7FFFFFF) != 0) {
          goto LABEL_18;
        }
      }
      else if (*((unsigned char *)v10 + 16) || (void *)v10[9] != v10 + 9 || (*((unsigned char *)v10 + 34) & 0x80) != 0)
      {
LABEL_18:
        if (!*(unsigned char *)(v7 + 232))
        {
          uint64_t v12 = v10[5] + 216;
          __int16 v15 = 260;
          v14[0] = v12;
          llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v14);
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          int v27 = 0;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          *(void *)&long long v13 = -1;
          *((void *)&v13 + 1) = -1;
          *(_OWORD *)__src = v13;
          long long v19 = v13;
          long long v20 = v13;
          long long v21 = v13;
          long long v22 = v13;
          long long v23 = v13;
          *(_OWORD *)unsigned int v24 = v13;
          *(void *)&v24[13] = -1;
          sub_1CC153974((uint64_t)__src, (int *)__p);
          sub_1CD4D04B8(v9 + 32, (uint64_t)__src);
          sub_1CD4CFA4C((uint64_t *)__src);
          if (v17 < 0) {
            operator delete(__p[0]);
          }
        }
        sub_1CC1569E8(__src, v9 + 32);
      }
      uint64_t v8 = (void *)v8[1];
    }
    while (v8 != (void *)((char *)a2 + 24));
  }
  return 0;
}

uint64_t llvm::GPUAAWrapperPass::doFinalization(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    MEMORY[0x1D25D9CE0](v2, 0x60C4082687C62);
  }
  return 0;
}

void sub_1CBFF7A28(uint64_t a1)
{
}

void sub_1CBFF7AD4(llvm::Pass *this)
{
  *(void *)this = &unk_1F2603538;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    MEMORY[0x1D25D9CE0](v2, 0x60C4082687C62);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CBFF7B44(llvm::Pass *this)
{
  *(void *)this = &unk_1F2603538;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    MEMORY[0x1D25D9CE0](v2, 0x60C4082687C62);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

BOOL llvm::isGuard(uint64_t a1)
{
  BOOL result = 0;
  if (a1 && *(unsigned char *)(a1 + 16) == 84)
  {
    uint64_t v3 = *(void *)(a1 - 32);
    return v3 && !*(unsigned char *)(v3 + 16) && *(void *)(v3 + 24) == *(void *)(a1 + 72) && *(_DWORD *)(v3 + 36) == 125;
  }
  return result;
}

uint64_t llvm::isWidenableBranch(llvm *this, const llvm::User *a2)
{
  uint64_t v11 = 0;
  uint64_t v13 = 0;
  uint64_t result = llvm::parseWidenableBranch((uint64_t)this, &v13, &v12, &v11, &v10);
  if (result)
  {
    if (!v13)
    {
      uint64_t v4 = ***v11;
      if (!*(void *)(v4 + 1560))
      {
        unsigned int v9 = result;
        uint64_t v5 = *(llvm::ConstantInt **)(v4 + 1888);
        unsigned int v6 = *(_DWORD *)(v4 + 1896);
        unsigned int v15 = v6 >> 8;
        if (v6 >> 8 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v14);
        }
        if (v6 <= 0xFF) {
          char v7 = 0;
        }
        else {
          char v7 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v6);
        }
        uint64_t v14 = v7 & 1;
        uint64_t v8 = llvm::ConstantInt::get(v5, (llvm::LLVMContext *)&v14, v3);
        if (v15 >= 0x41)
        {
          if (v14) {
            MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
          }
        }
        *(void *)(v4 + 1560) = v8;
        return v9;
      }
    }
  }
  return result;
}

uint64_t llvm::parseWidenableBranch(llvm *this, const llvm::User *a2, llvm::Value **a3, llvm::ConstantInt ****a4, llvm::BasicBlock **a5, llvm::BasicBlock **a6)
{
  uint64_t v14 = 0;
  unsigned int v15 = 0;
  uint64_t result = llvm::parseWidenableBranch((uint64_t)this, &v15, &v14, a4, a5);
  if (result)
  {
    unsigned int v13 = result;
    if (v15) {
      True = (void *)*v15;
    }
    else {
      True = llvm::ConstantInt::getTrue(***a4, v10, v11);
    }
    *(void *)a2 = True;
    *a3 = *v14;
    return v13;
  }
  return result;
}

uint64_t llvm::isGuardAsWidenableBranch(llvm *this, const llvm::User *a2)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  uint64_t result = llvm::parseWidenableBranch((uint64_t)this, &v16, &v15, &v14, &v13);
  if (result)
  {
    if (!v16)
    {
      uint64_t v4 = ***v14;
      if (!*(void *)(v4 + 1560))
      {
        unsigned int v9 = *(llvm::ConstantInt **)(v4 + 1888);
        unsigned int v10 = *(_DWORD *)(v4 + 1896);
        unsigned int v18 = v10 >> 8;
        if (v10 >> 8 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v17);
        }
        if (v10 <= 0xFF) {
          char v11 = 0;
        }
        else {
          char v11 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v10);
        }
        uint64_t v17 = v11 & 1;
        uint64_t v12 = llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v17, v3);
        if (v18 >= 0x41 && v17) {
          MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
        }
        *(void *)(v4 + 1560) = v12;
      }
    }
    uint64_t v5 = v13 + 40;
    uint64_t v6 = *(void *)(v13 + 48);
    if (v6 == v13 + 40)
    {
      return 0;
    }
    else
    {
      while (1)
      {
        uint64_t v7 = v6 ? v6 - 24 : 0;
        if (v6)
        {
          if (*(unsigned char *)(v7 + 16) == 84)
          {
            uint64_t v8 = *(void *)(v7 - 32);
            if (v8)
            {
              if (!*(unsigned char *)(v8 + 16) && *(void *)(v8 + 24) == *(void *)(v7 + 72) && *(_DWORD *)(v8 + 36) == 119) {
                break;
              }
            }
          }
        }
        uint64_t result = llvm::Instruction::mayHaveSideEffects((llvm::Instruction *)v7);
        if (result) {
          return 0;
        }
        uint64_t v6 = *(void *)(v6 + 8);
        if (v6 == v5) {
          return result;
        }
      }
      return 1;
    }
  }
  return result;
}

uint64_t llvm::parseWidenableBranch(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v5 = 0;
  if (a1 && *(unsigned char *)(a1 + 16) == 30)
  {
    if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFF) != 3) {
      return 0;
    }
    uint64_t v6 = *(void *)(a1 - 96);
    uint64_t v7 = *(void *)(v6 + 8);
    if (!v7 || *(void *)(v7 + 8)) {
      return 0;
    }
    *a4 = *(void *)(a1 - 32);
    *a5 = *(void *)(a1 - 64);
    int v9 = *(unsigned __int8 *)(v6 + 16);
    if (v9 == 56)
    {
      uint64_t v13 = *(void *)(v6 - 64);
      if (v13)
      {
        uint64_t v14 = *(void *)(v6 - 32);
        if (v14)
        {
          if (*(unsigned char *)(v13 + 16) == 84)
          {
            uint64_t v15 = *(void *)(v13 - 32);
            if (v15)
            {
              if (!*(unsigned char *)(v15 + 16)
                && *(void *)(v15 + 24) == *(void *)(v13 + 72)
                && *(_DWORD *)(v15 + 36) == 138)
              {
                uint64_t v16 = *(void *)(v13 + 8);
                if (v16)
                {
                  if (!*(void *)(v16 + 8))
                  {
                    int v22 = *(_DWORD *)(v6 + 20);
                    if ((v22 & 0x40000000) != 0) {
                      uint64_t v23 = *(void *)(v6 - 8);
                    }
                    else {
                      uint64_t v23 = v6 - 32 * (v22 & 0x7FFFFFF);
                    }
                    *a3 = v23;
                    int v25 = *(_DWORD *)(v6 + 20);
                    if ((v25 & 0x40000000) != 0) {
                      uint64_t v26 = *(void *)(v6 - 8);
                    }
                    else {
                      uint64_t v26 = v6 - 32 * (v25 & 0x7FFFFFF);
                    }
                    uint64_t v21 = v26 + 32;
                    goto LABEL_36;
                  }
                }
              }
            }
          }
          if (*(unsigned char *)(v14 + 16) == 84)
          {
            uint64_t v17 = *(void *)(v14 - 32);
            if (v17)
            {
              if (!*(unsigned char *)(v17 + 16)
                && *(void *)(v17 + 24) == *(void *)(v14 + 72)
                && *(_DWORD *)(v17 + 36) == 138)
              {
                uint64_t v18 = *(void *)(v14 + 8);
                if (v18)
                {
                  if (!*(void *)(v18 + 8))
                  {
                    int v19 = *(_DWORD *)(v6 + 20);
                    if ((v19 & 0x40000000) != 0) {
                      uint64_t v20 = *(void *)(v6 - 8);
                    }
                    else {
                      uint64_t v20 = v6 - 32 * (v19 & 0x7FFFFFF);
                    }
                    *a3 = v20 + 32;
                    int v24 = *(_DWORD *)(v6 + 20);
                    if ((v24 & 0x40000000) != 0) {
                      uint64_t v21 = *(void *)(v6 - 8);
                    }
                    else {
                      uint64_t v21 = v6 - 32 * (v24 & 0x7FFFFFF);
                    }
                    goto LABEL_36;
                  }
                }
              }
            }
          }
        }
      }
    }
    else if (v9 == 84)
    {
      uint64_t v10 = *(void *)(v6 - 32);
      if (v10)
      {
        if (!*(unsigned char *)(v10 + 16) && *(void *)(v10 + 24) == *(void *)(v6 + 72) && *(_DWORD *)(v10 + 36) == 138)
        {
          int v11 = *(_DWORD *)(a1 + 20);
          if ((v11 & 0x40000000) != 0) {
            uint64_t v12 = *(void *)(a1 - 8);
          }
          else {
            uint64_t v12 = a1 - 32 * (v11 & 0x7FFFFFF);
          }
          uint64_t v21 = 0;
          *a3 = v12;
LABEL_36:
          *a2 = v21;
          return 1;
        }
      }
    }
    return 0;
  }
  return v5;
}

uint64_t llvm::getNumOfCalls(llvm *this, Function *a2, Function *a3)
{
  uint64_t v3 = *((void *)a2 + 1);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = *(void *)(v3 + 24);
    if (v5 && *(unsigned char *)(v5 + 16) == 84 && *(llvm **)(*(void *)(v5 + 40) + 56) == this) {
      ++v4;
    }
    uint64_t v3 = *(void *)(v3 + 8);
  }
  while (v3);
  return v4;
}

uint64_t llvm::IRSimilarity::IRInstructionData::IRInstructionData(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a1 + 40;
  *(void *)(a1 + 32) = 0x400000000;
  *(unsigned char *)(a1 + 72) = a3;
  *(unsigned char *)(a1 + 76) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a1 + 136;
  *(void *)(a1 + 128) = 0x400000000;
  *(void *)(a1 + 152) = a4;
  llvm::IRSimilarity::IRInstructionData::initializeInstruction(a1);
  return a1;
}

{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a1 + 40;
  *(void *)(a1 + 32) = 0x400000000;
  *(unsigned char *)(a1 + 72) = a3;
  *(unsigned char *)(a1 + 76) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a1 + 136;
  *(void *)(a1 + 128) = 0x400000000;
  *(void *)(a1 + 152) = a4;
  llvm::IRSimilarity::IRInstructionData::initializeInstruction(a1);
  return a1;
}

uint64_t llvm::IRSimilarity::IRInstructionData::initializeInstruction(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 16);
  if (v2) {
    BOOL v3 = *(unsigned __int8 *)(v2 + 16) - 83 >= 0xFFFFFFFE;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    unsigned int v4 = *(_WORD *)(v2 + 18) & 0x3F;
    if (v4 <= 0x27 && ((1 << v4) & 0xCC00000C0CLL) != 0)
    {
      int v6 = 40;
      switch(*(_WORD *)(v2 + 18) & 0x3F)
      {
        case 3:
          int v6 = 5;
          goto LABEL_24;
        case 4:
          int v6 = 2;
          goto LABEL_24;
        case 5:
          int v6 = 3;
          goto LABEL_24;
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xE:
        case 0xF:
        case 0x20:
        case 0x21:
          break;
        case 0xA:
          int v6 = 12;
          goto LABEL_24;
        case 0xB:
          int v6 = 13;
          goto LABEL_24;
        case 0xC:
          int v6 = 10;
          goto LABEL_24;
        case 0xD:
          int v6 = 11;
          goto LABEL_24;
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
          __break(1u);
          JUMPOUT(0x1CBFF841CLL);
        case 0x22:
          int v6 = 36;
          goto LABEL_24;
        case 0x23:
          int v6 = 37;
          goto LABEL_24;
        case 0x24:
          int v6 = 34;
          goto LABEL_24;
        case 0x25:
          int v6 = 35;
          goto LABEL_24;
        case 0x26:
          goto LABEL_24;
        case 0x27:
          int v6 = 41;
          goto LABEL_24;
        default:
          int v6 = 4;
LABEL_24:
          if (v6 != v4)
          {
            int v7 = *(unsigned __int8 *)(this + 80);
            *(_DWORD *)(this + 76) = v6;
            if (!v7) {
              *(unsigned char *)(this + 80) = 1;
            }
          }
          break;
      }
    }
  }
  int v8 = *(_DWORD *)(v2 + 20);
  if ((v8 & 0x40000000) != 0)
  {
    uint64_t v10 = *(uint64_t **)(v2 - 8);
    uint64_t v9 = v8 & 0x7FFFFFF;
    if (!v9) {
      goto LABEL_40;
    }
  }
  else
  {
    uint64_t v9 = v8 & 0x7FFFFFF;
    uint64_t v10 = (uint64_t *)(v2 - 32 * v9);
    if (!v9) {
      goto LABEL_40;
    }
  }
  int v11 = (uint64_t *)(this + 24);
  uint64_t v12 = 32 * v9;
  do
  {
    if (*(unsigned __int8 *)(*(void *)(v1 + 16) + 16) - 81 <= 1 && *(unsigned char *)(v1 + 80))
    {
      uint64_t v14 = *v11;
      uint64_t v21 = *v10;
      this = sub_1CD48B518((uint64_t *)(v1 + 24), v14, &v21);
    }
    else
    {
      unint64_t v13 = *(unsigned int *)(v1 + 32);
      if (v13 >= *(unsigned int *)(v1 + 36)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v1 + 24) + 8 * v13) = *v10;
      ++*(_DWORD *)(v1 + 32);
    }
    v10 += 4;
    v12 -= 32;
  }
  while (v12);
  uint64_t v2 = *(void *)(v1 + 16);
LABEL_40:
  if (v2 && *(unsigned char *)(v2 + 16) == 83)
  {
    int v15 = *(_DWORD *)(v2 + 20);
    if ((v15 & 0x40000000) != 0)
    {
      uint64_t v17 = *(void *)(v2 - 8);
      uint64_t v16 = v15 & 0x7FFFFFF;
      if (!v16) {
        return this;
      }
    }
    else
    {
      uint64_t v16 = v15 & 0x7FFFFFF;
      uint64_t v17 = v2 - 32 * v16;
      if (!v16) {
        return this;
      }
    }
    uint64_t v18 = (void *)(v17 + 32 * *(unsigned int *)(v2 + 60));
    unsigned int v19 = *(_DWORD *)(v1 + 32);
    uint64_t v20 = 8 * v16;
    do
    {
      if (v19 >= *(_DWORD *)(v1 + 36)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v1 + 24) + 8 * v19) = *v18;
      unsigned int v19 = *(_DWORD *)(v1 + 32) + 1;
      *(_DWORD *)(v1 + 32) = v19;
      ++v18;
      v20 -= 8;
    }
    while (v20);
  }
  return this;
}

uint64_t llvm::IRSimilarity::IRInstructionData::predicateForConsistency(uint64_t a1)
{
  uint64_t result = *(_WORD *)(a1 + 18) & 0x3F;
  if (result <= 0x27 && ((1 << result) & 0xCC00000C0CLL) != 0) {
    return dword_1CFAC3518[result - 2];
  }
  return result;
}

double llvm::IRSimilarity::IRInstructionData::IRInstructionData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a1 + 40;
  *(void *)&double result = 0x400000000;
  *(void *)(a1 + 32) = 0x400000000;
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 76) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a1 + 136;
  *(void *)(a1 + 128) = 0x400000000;
  *(void *)(a1 + 152) = a2;
  return result;
}

{
  double result;

  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a1 + 40;
  *(void *)&double result = 0x400000000;
  *(void *)(a1 + 32) = 0x400000000;
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 76) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a1 + 136;
  *(void *)(a1 + 128) = 0x400000000;
  *(void *)(a1 + 152) = a2;
  return result;
}

double llvm::IRSimilarity::IRInstructionData::setCalleeName(llvm::IRSimilarity::IRInstructionData *this, int a2)
{
  uint64_t v4 = *((void *)this + 2);
  if (*(unsigned char *)(v4 + 16) == 84) {
    uint64_t v5 = *((void *)this + 2);
  }
  else {
    uint64_t v5 = 0;
  }
  if (*((unsigned char *)this + 112))
  {
    if (*((char *)this + 111) < 0)
    {
      operator delete(*((void **)this + 11));
      uint64_t v4 = *((void *)this + 2);
    }
    *((void *)this + 11) = 0;
    *((unsigned char *)this + 111) = 0;
  }
  else
  {
    *((void *)this + 11) = 0;
    *(_WORD *)((char *)this + 111) = 256;
  }
  int v7 = (void **)((char *)this + 88);
  if (*(unsigned char *)(v4 + 16) == 84)
  {
    uint64_t v8 = *(void *)(v4 - 32);
    if (v8)
    {
      if (!*(unsigned char *)(v8 + 16))
      {
        uint64_t v9 = *(void *)(v8 + 24);
        if (v9 == *(void *)(v4 + 72) && (*(unsigned char *)(v8 + 33) & 0x20) != 0)
        {
          unint64_t v29 = *(unsigned int *)(v8 + 36);
          if ((byte_1CFADA6F7[v29 >> 3] >> (v29 & 7)))
          {
            sub_1CC5B8334(v29, *(void *)(v9 + 16) + 8, (8 * *(unsigned int *)(v9 + 12) - 8) >> 3, *(uint64_t ***)(*(void *)(*(void *)(v4 + 40) + 56) + 40), v9, &__dst);
          }
          else
          {
            int v24 = off_1E6830B58[v29];
            if (v24)
            {
              size_t v30 = strlen(off_1E6830B58[v29]);
              if (v30 <= 0x7FFFFFFFFFFFFFF7)
              {
                std::string::size_type v23 = v30;
                goto LABEL_33;
              }
LABEL_53:
              abort();
            }
            memset(&__dst, 0, sizeof(__dst));
          }
LABEL_41:
          if (*((unsigned char *)this + 112))
          {
            if (*((char *)this + 111) < 0) {
              operator delete(*v7);
            }
            double result = *(double *)&__dst.__r_.__value_.__l.__data_;
            *(_OWORD *)int v7 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
            *((void *)this + 13) = *((void *)&__dst.__r_.__value_.__l + 2);
          }
          else
          {
            double result = *(double *)&__dst.__r_.__value_.__l.__data_;
            *(_OWORD *)int v7 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
            *((void *)this + 13) = *((void *)&__dst.__r_.__value_.__l + 2);
            *((unsigned char *)this + 112) = 1;
          }
          return result;
        }
      }
    }
  }
  uint64_t v10 = *(uint64_t ****)(v5 - 32);
  unsigned int v11 = *((unsigned __int8 *)v10 + 16);
  if ((v11 == 24 || v11 <= 0x14) && a2 != 0)
  {
    if (*((unsigned char *)v10 + 16) || v10[3] != *(uint64_t ***)(v5 + 72)) {
      uint64_t v10 = 0;
    }
    if ((*((unsigned char *)v10 + 23) & 0x10) == 0)
    {
      std::string::size_type v23 = 0;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_40;
    }
    uint64_t v14 = ***v10;
    uint64_t v15 = *(void *)(v14 + 152);
    uint64_t v16 = *(unsigned int *)(v14 + 168);
    if (v16)
    {
      LODWORD(v17) = (v16 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      uint64_t v18 = (uint64_t ****)(v15 + 16 * v17);
      unsigned int v19 = *v18;
      if (*v18 == v10) {
        goto LABEL_32;
      }
      int v20 = 1;
      while (v19 != (uint64_t ***)-4096)
      {
        int v21 = v17 + v20++;
        uint64_t v17 = v21 & (v16 - 1);
        unsigned int v19 = *(uint64_t ****)(v15 + 16 * v17);
        if (v19 == v10)
        {
          uint64_t v18 = (uint64_t ****)(v15 + 16 * v17);
          goto LABEL_32;
        }
      }
    }
    uint64_t v18 = (uint64_t ****)(v15 + 16 * v16);
LABEL_32:
    int v22 = v18[1];
    unint64_t v25 = (unint64_t)*v22;
    int v24 = (char *)(v22 + 2);
    std::string::size_type v23 = v25;
    if (v25 <= 0x7FFFFFFFFFFFFFF7)
    {
LABEL_33:
      if (v23 >= 0x17)
      {
        uint64_t v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17) {
          uint64_t v27 = v23 | 7;
        }
        uint64_t v28 = v27 + 1;
        p_dst = (std::string *)operator new(v27 + 1);
        __dst.__r_.__value_.__l.__size_ = v23;
        __dst.__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v23;
        p_dst = &__dst;
        if (!v23) {
          goto LABEL_40;
        }
      }
      memmove(p_dst, v24, v23);
LABEL_40:
      p_dst->__r_.__value_.__s.__data_[v23] = 0;
      goto LABEL_41;
    }
    goto LABEL_53;
  }
  return result;
}

uint64_t llvm::IRSimilarity::IRInstructionData::getPredicate(llvm::IRSimilarity::IRInstructionData *this)
{
  if (*((unsigned char *)this + 80)) {
    return *((unsigned int *)this + 19);
  }
  else {
    return *(_WORD *)(*((void *)this + 2) + 18) & 0x3F;
  }
}

char *llvm::IRSimilarity::IRInstructionData::getCalleeName(llvm::IRSimilarity::IRInstructionData *this)
{
  uint64_t v3 = *((void *)this + 11);
  uint64_t v1 = (char *)this + 88;
  uint64_t v2 = v3;
  if (v1[23] >= 0) {
    return v1;
  }
  return (char *)v2;
}

BOOL llvm::IRSimilarity::isClose(llvm::IRSimilarity *this, const llvm::IRSimilarity::IRInstructionData *a2, const llvm::IRSimilarity::IRInstructionData *a3)
{
  if (*((unsigned char *)this + 72)) {
    BOOL v3 = *((unsigned char *)a2 + 72) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0;
  }
  char isSameOperationAs = llvm::Instruction::isSameOperationAs(*((llvm::Instruction **)this + 2), *((const llvm::Instruction **)a2 + 2), 0);
  uint64_t v8 = *((void *)this + 2);
  int v9 = *(unsigned __int8 *)(v8 + 16);
  if (isSameOperationAs)
  {
    if (v9 != 84)
    {
      if (v9 == 62)
      {
        uint64_t v10 = *((void *)a2 + 2);
        if (((*(unsigned __int8 *)(v8 + 17) ^ *(unsigned __int8 *)(v10 + 17)) & 2) == 0)
        {
          unsigned int v11 = 32 * *(_DWORD *)(v8 + 20);
          BOOL result = 1;
          if (v11 != 64)
          {
            unsigned int v12 = 32 * *(_DWORD *)(v10 + 20);
            if (v12 != 64)
            {
              uint64_t v13 = -(uint64_t)v12;
              uint64_t v14 = v10 + 64;
              uint64_t v15 = -(uint64_t)v11;
              uint64_t v16 = v8 + 64;
              do
              {
                uint64_t v17 = *(void *)(v16 + v15);
                uint64_t v18 = *(void *)(v14 + v13);
                BOOL result = v17 == v18;
                if (v17 != v18) {
                  break;
                }
                if (v15 == -96) {
                  break;
                }
                v15 += 32;
                BOOL v3 = v13 == -96;
                v13 += 32;
              }
              while (!v3);
            }
          }
          return result;
        }
        return 0;
      }
      return v9 != 30 || *(unsigned char *)(*((void *)a2 + 2) + 16) != 30 || *((_DWORD *)this + 32) == *((_DWORD *)a2 + 32);
    }
    if (*(unsigned char *)(*((void *)a2 + 2) + 16) != 84) {
      return 1;
    }
    char v21 = *((unsigned char *)this + 111);
    if (v21 >= 0) {
      int v22 = (char *)this + 88;
    }
    else {
      int v22 = (char *)*((void *)this + 11);
    }
    if (!v22)
    {
      std::string __dst = 0;
      size_t __n = 0;
      int64_t v66 = 0;
      goto LABEL_54;
    }
    int v23 = v21;
    size_t v24 = v21 & 0x7F;
    if (v23 >= 0) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = *((void *)this + 12);
    }
    if (v25 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_103;
    }
    if (v25 >= 0x17)
    {
      uint64_t v37 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17) {
        uint64_t v37 = v25 | 7;
      }
      uint64_t v38 = v37 + 1;
      p_dst = (void **)operator new(v37 + 1);
      size_t __n = v25;
      int64_t v66 = v38 | 0x8000000000000000;
      std::string __dst = p_dst;
    }
    else
    {
      HIBYTE(v66) = v25;
      p_dst = (void **)&__dst;
      if (!v25) {
        goto LABEL_53;
      }
    }
    memmove(p_dst, v22, v25);
LABEL_53:
    *((unsigned char *)p_dst + v25) = 0;
LABEL_54:
    char v39 = *((unsigned char *)a2 + 111);
    if (v39 >= 0) {
      v40 = (char *)a2 + 88;
    }
    else {
      v40 = (char *)*((void *)a2 + 11);
    }
    if (!v40)
    {
      size_t v45 = 0;
      char v46 = 0;
      __p = 0;
      size_t v62 = 0;
      unint64_t v63 = 0;
      goto LABEL_71;
    }
    int v41 = v39;
    size_t v42 = v39 & 0x7F;
    if (v41 >= 0) {
      size_t v43 = v42;
    }
    else {
      size_t v43 = *((void *)a2 + 12);
    }
    if (v43 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v43 >= 0x17)
      {
        uint64_t v47 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v43 | 7) != 0x17) {
          uint64_t v47 = v43 | 7;
        }
        uint64_t v48 = v47 + 1;
        p_p = operator new(v47 + 1);
        size_t v62 = v43;
        unint64_t v63 = v48 | 0x8000000000000000;
        __p = p_p;
      }
      else
      {
        HIBYTE(v63) = v43;
        p_p = &__p;
        if (!v43) {
          goto LABEL_70;
        }
      }
      memmove(p_p, v40, v43);
LABEL_70:
      *((unsigned char *)p_p + v43) = 0;
      char v46 = HIBYTE(v63);
      size_t v45 = v62;
LABEL_71:
      char v49 = HIBYTE(v66);
      if (v66 >= 0) {
        size_t v50 = HIBYTE(v66) & 0x7F;
      }
      else {
        size_t v50 = __n;
      }
      if (v46 >= 0) {
        size_t v45 = v46 & 0x7F;
      }
      if (v50 == v45)
      {
        if (v46 >= 0) {
          BOOL v51 = (unsigned __int8 *)&__p;
        }
        else {
          BOOL v51 = (unsigned __int8 *)__p;
        }
        if (v66 < 0)
        {
          BOOL v60 = memcmp(__dst, v51, __n) == 0;
        }
        else if ((v66 & 0x7F00000000000000) != 0)
        {
          uint64_t v52 = (HIBYTE(v66) & 0x7F) - 1;
          BOOL v53 = (void **)&__dst;
          do
          {
            int v55 = *(unsigned __int8 *)v53;
            BOOL v53 = (void **)((char *)v53 + 1);
            int v54 = v55;
            int v57 = *v51++;
            int v56 = v57;
            BOOL v59 = v52-- != 0;
            BOOL v60 = v54 == v56;
          }
          while (v54 == v56 && v59);
        }
        else
        {
          BOOL v60 = 1;
        }
      }
      else
      {
        BOOL v60 = 0;
      }
      if (v46 < 0)
      {
        operator delete(__p);
        if ((v49 & 0x80) == 0)
        {
LABEL_94:
          if (!v60) {
            return 0;
          }
          goto LABEL_98;
        }
      }
      else if ((v49 & 0x80) == 0)
      {
        goto LABEL_94;
      }
      operator delete(__dst);
      if (!v60) {
        return 0;
      }
LABEL_98:
      int v9 = *(unsigned __int8 *)(*((void *)this + 2) + 16);
      return v9 != 30 || *(unsigned char *)(*((void *)a2 + 2) + 16) != 30 || *((_DWORD *)this + 32) == *((_DWORD *)a2 + 32);
    }
LABEL_103:
    abort();
  }
  if ((v9 - 81) > 1) {
    return 0;
  }
  uint64_t v19 = *((void *)a2 + 2);
  if (*(unsigned __int8 *)(v19 + 16) - 81 > 1) {
    return 0;
  }
  int v20 = *((unsigned char *)this + 80) ? *((_DWORD *)this + 19) : *(_WORD *)(v8 + 18) & 0x3F;
  int v27 = *((unsigned char *)a2 + 80) ? *((_DWORD *)a2 + 19) : *(_WORD *)(v19 + 18) & 0x3F;
  if (v20 != v27) {
    return 0;
  }
  uint64_t v28 = *((unsigned int *)this + 8);
  BOOL result = 1;
  if (v28)
  {
    uint64_t v29 = *((unsigned int *)a2 + 8);
    if (v29)
    {
      size_t v30 = (uint64_t **)*((void *)this + 3);
      uint64_t v31 = (uint64_t **)*((void *)a2 + 3);
      uint64_t v32 = 8 * v29 - 8;
      uint64_t v33 = 8 * v28 - 8;
      do
      {
        uint64_t v34 = **v30;
        uint64_t v35 = **v31;
        BOOL result = v34 == v35;
        if (v34 != v35) {
          break;
        }
        if (!v33) {
          break;
        }
        ++v30;
        ++v31;
        uint64_t v36 = v32;
        v32 -= 8;
        v33 -= 8;
      }
      while (v36);
    }
  }
  return result;
}

uint64_t llvm::IRSimilarity::IRInstructionMapper::allocateIRInstructionData(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 64);
  *(void *)(v7 + 80) += 160;
  if (((*(void *)v7 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v7 + 160 > *(void *)(v7 + 8) - *(void *)v7)
  {
    unsigned int v10 = *(_DWORD *)(v7 + 24) >> 7;
    if (v10 >= 0x1E) {
      LOBYTE(v10) = 30;
    }
    uint64_t v11 = 4096 << v10;
    uint64_t v8 = (uint64_t)operator new(4096 << v10, (std::align_val_t)8uLL);
    unsigned int v12 = *(_DWORD *)(v7 + 24);
    if (v12 >= *(_DWORD *)(v7 + 28)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v7 + 16) + 8 * v12) = v8;
    ++*(_DWORD *)(v7 + 24);
    *(void *)(v7 + 8) = v8 + v11;
  }
  else
  {
    uint64_t v8 = (*(void *)v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)uint64_t v7 = v8 + 160;
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = v8 + 40;
  *(void *)(v8 + 32) = 0x400000000;
  *(unsigned char *)(v8 + 72) = a3;
  *(unsigned char *)(v8 + 76) = 0;
  *(unsigned char *)(v8 + 80) = 0;
  *(unsigned char *)(v8 + 88) = 0;
  *(unsigned char *)(v8 + 112) = 0;
  *(void *)(v8 + 120) = v8 + 136;
  *(void *)(v8 + 128) = 0x400000000;
  *(void *)(v8 + 152) = a4;
  llvm::IRSimilarity::IRInstructionData::initializeInstruction(v8);
  return v8;
}

unint64_t llvm::IRSimilarity::IRInstructionMapper::allocateIRInstructionData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 64);
  *(void *)(v3 + 80) += 160;
  if (((*(void *)v3 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v3 + 160 > *(void *)(v3 + 8) - *(void *)v3)
  {
    unsigned int v6 = *(_DWORD *)(v3 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    unint64_t v4 = (unint64_t)operator new(4096 << v6, (std::align_val_t)8uLL);
    unsigned int v8 = *(_DWORD *)(v3 + 24);
    if (v8 >= *(_DWORD *)(v3 + 28)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v3 + 16) + 8 * v8) = v4;
    ++*(_DWORD *)(v3 + 24);
    *(void *)(v3 + 8) = v4 + v7;
  }
  else
  {
    unint64_t v4 = (*(void *)v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)uint64_t v3 = v4 + 160;
  *(void *)unint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = v4 + 40;
  *(void *)(v4 + 32) = 0x400000000;
  *(unsigned char *)(v4 + 72) = 0;
  *(unsigned char *)(v4 + 76) = 0;
  *(unsigned char *)(v4 + 80) = 0;
  *(unsigned char *)(v4 + 88) = 0;
  *(unsigned char *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = v4 + 136;
  *(void *)(v4 + 128) = 0x400000000;
  *(void *)(v4 + 152) = a2;
  return v4;
}

unint64_t llvm::IRSimilarity::IRInstructionMapper::allocateIRInstructionDataList(llvm::IRSimilarity::IRInstructionMapper *this)
{
  uint64_t v1 = *((void *)this + 9);
  *(void *)(v1 + 80) += 16;
  if (((*(void *)v1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v1 + 16 > *(void *)(v1 + 8) - *(void *)v1)
  {
    unsigned int v4 = *(_DWORD *)(v1 + 24) >> 7;
    if (v4 >= 0x1E) {
      LOBYTE(v4) = 30;
    }
    uint64_t v5 = 4096 << v4;
    unint64_t v2 = (unint64_t)operator new(4096 << v4, (std::align_val_t)8uLL);
    unsigned int v6 = *(_DWORD *)(v1 + 24);
    if (v6 >= *(_DWORD *)(v1 + 28)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v1 + 16) + 8 * v6) = v2;
    ++*(_DWORD *)(v1 + 24);
    *(void *)(v1 + 8) = v2 + v5;
  }
  else
  {
    unint64_t v2 = (*(void *)v1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)uint64_t v1 = v2 + 16;
  *(void *)unint64_t v2 = v2 | 4;
  *(void *)(v2 + 8) = v2;
  return v2;
}

BOOL llvm::IRSimilarity::IRSimilarityCandidate::isSimilar(uint64_t a1, uint64_t a2, const llvm::IRSimilarity::IRInstructionData *a3)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(*(void *)(a2 + 16) + 8);
  while (v3 != v4 && v5 != v6)
  {
    if (*(unsigned char *)(v3 + 72)) {
      BOOL v8 = *(unsigned char *)(v5 + 72) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      return 0;
    }
    BOOL result = llvm::IRSimilarity::isClose((llvm::IRSimilarity *)v3, (const llvm::IRSimilarity::IRInstructionData *)v5, a3);
    if (!result) {
      return result;
    }
    uint64_t v3 = *(void *)(v3 + 8);
    uint64_t v5 = *(void *)(v5 + 8);
  }
  return 1;
}

BOOL llvm::IRSimilarity::IRSimilarityCandidate::compareNonCommutativeOperandMapping(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unsigned int v3 = *(_DWORD *)(v2 + 8);
  if (v3)
  {
    BOOL v6 = 0;
    unsigned int v7 = 0;
    BOOL v8 = **(void ***)(a2 + 8);
    int v9 = *(void **)v2;
    while (1)
    {
      uint64_t v10 = *(void *)(*a1 + 24);
      uint64_t v11 = *(unsigned int *)(*a1 + 40);
      if (v11)
      {
        LODWORD(v12) = ((*v9 >> 4) ^ (*v9 >> 9)) & (v11 - 1);
        uint64_t v13 = (uint64_t *)(v10 + 16 * v12);
        uint64_t v14 = *v13;
        if (*v9 == *v13) {
          goto LABEL_10;
        }
        int v15 = 1;
        while (v14 != -4096)
        {
          int v16 = v12 + v15++;
          uint64_t v12 = v16 & (v11 - 1);
          uint64_t v14 = *(void *)(v10 + 16 * v12);
          if (*v9 == v14)
          {
            uint64_t v13 = (uint64_t *)(v10 + 16 * v12);
            goto LABEL_10;
          }
        }
      }
      uint64_t v13 = (uint64_t *)(v10 + 16 * v11);
LABEL_10:
      uint64_t v17 = *(void *)(*(void *)a2 + 24);
      uint64_t v18 = *(unsigned int *)(*(void *)a2 + 40);
      if (v18)
      {
        LODWORD(v19) = ((*v8 >> 4) ^ (*v8 >> 9)) & (v18 - 1);
        int v20 = (uint64_t *)(v17 + 16 * v19);
        uint64_t v21 = *v20;
        if (*v8 == *v20) {
          goto LABEL_17;
        }
        int v22 = 1;
        while (v21 != -4096)
        {
          int v23 = v19 + v22++;
          uint64_t v19 = v23 & (v18 - 1);
          uint64_t v21 = *(void *)(v17 + 16 * v19);
          if (*v8 == v21)
          {
            int v20 = (uint64_t *)(v17 + 16 * v19);
            goto LABEL_17;
          }
        }
      }
      int v20 = (uint64_t *)(v17 + 16 * v18);
LABEL_17:
      int v24 = *((_DWORD *)v13 + 2);
      int v25 = *((_DWORD *)v20 + 2);
      if (checkNumberingAndReplace(a1[2], v24, v25) && checkNumberingAndReplace(*(void *)(a2 + 16), v25, v24))
      {
        ++v7;
        ++v9;
        ++v8;
        BOOL v6 = v7 >= v3;
        if (v7 != v3) {
          continue;
        }
      }
      return v6;
    }
  }
  return 1;
}

uint64_t sub_1CBFF92E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (!v4) {
    return 1;
  }
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  int v9 = *(uint64_t **)a3;
  uint64_t v65 = *(void *)a3 + 8 * v4;
  while (1)
  {
    uint64_t v10 = *v9;
    uint64_t v11 = *a1;
    uint64_t v12 = *((unsigned int *)a1 + 4);
    if (v12)
    {
      LODWORD(v13) = ((v10 >> 4) ^ (v10 >> 9)) & (v12 - 1);
      uint64_t v14 = (uint64_t *)(v11 + 16 * v13);
      uint64_t v15 = *v14;
      if (v10 == *v14) {
        goto LABEL_10;
      }
      int v16 = 1;
      while (v15 != -4096)
      {
        int v17 = v13 + v16++;
        uint64_t v13 = v17 & (v12 - 1);
        uint64_t v15 = *(void *)(v11 + 16 * v13);
        if (v10 == v15)
        {
          uint64_t v14 = (uint64_t *)(v11 + 16 * v13);
          goto LABEL_10;
        }
      }
    }
    uint64_t v14 = (uint64_t *)(v11 + 16 * v12);
LABEL_10:
    LODWORD(v66) = *((_DWORD *)v14 + 2);
    long long v67 = 0uLL;
    MEMORY[0x1D25D9CD0](0, 4);
    uint64_t v18 = *(unsigned int *)(a4 + 16);
    int v68 = v18;
    if (v18)
    {
      size_t v19 = 4 * v18;
      *(void *)&long long v67 = operator new(4 * v18, (std::align_val_t)4uLL);
      *((void *)&v67 + 1) = *(void *)(a4 + 8);
      memcpy((void *)v67, *(const void **)a4, v19);
    }
    else
    {
      long long v67 = 0uLL;
    }
    sub_1CD48C184((uint64_t)v69, v7, &v66, (uint64_t)&v67);
    uint64_t v20 = v69[0];
    int v21 = v70;
    MEMORY[0x1D25D9CD0](v67, 4);
    if (!v21) {
      break;
    }
LABEL_71:
    if (++v9 == (uint64_t *)v65) {
      return 1;
    }
  }
  DWORD2(v67) = 0;
  uint64_t v66 = 0;
  *(void *)&long long v67 = 0;
  uint64_t v22 = *(void *)(v20 + 8);
  uint64_t v23 = *(unsigned int *)(v20 + 24);
  int v24 = (int *)(v22 + 4 * v23);
  if (*(_DWORD *)(v20 + 16))
  {
    if (*(_DWORD *)(v20 + 24))
    {
      uint64_t v25 = 4 * v23;
      uint64_t v26 = *(int **)(v20 + 8);
      while (*v26 >= 0xFFFFFFFE)
      {
        ++v26;
        v25 -= 4;
        if (!v25) {
          goto LABEL_19;
        }
      }
    }
    else
    {
      uint64_t v26 = *(int **)(v20 + 8);
    }
  }
  else
  {
LABEL_19:
    uint64_t v26 = (int *)(v22 + 4 * v23);
  }
  int v27 = (int *)(v22 + 4 * v23);
  if (v26 == v27)
  {
    uint64_t v62 = 0;
    goto LABEL_75;
  }
  while (2)
  {
    if ((int *)(*(void *)a4 + 4 * *(unsigned int *)(a4 + 16)) != sub_1CD48C650((uint64_t *)a4, v26))
    {
      if (!DWORD2(v67))
      {
        uint64_t v35 = 0;
        goto LABEL_38;
      }
      unsigned int v28 = (37 * *v26) & (DWORD2(v67) - 1);
      uint64_t v29 = (int *)(v66 + 4 * v28);
      int v30 = *v29;
      if (*v26 != *v29)
      {
        uint64_t v31 = 0;
        int v32 = 1;
        while (v30 != -1)
        {
          if (v31) {
            BOOL v33 = 0;
          }
          else {
            BOOL v33 = v30 == -2;
          }
          if (v33) {
            uint64_t v31 = v29;
          }
          unsigned int v34 = v28 + v32++;
          unsigned int v28 = v34 & (DWORD2(v67) - 1);
          uint64_t v29 = (int *)(v66 + 4 * v28);
          int v30 = *v29;
          if (*v26 == *v29) {
            goto LABEL_39;
          }
        }
        if (v31) {
          uint64_t v35 = v31;
        }
        else {
          uint64_t v35 = v29;
        }
LABEL_38:
        *sub_1CBB29C30((uint64_t)&v66, (uint64_t)v26, v26, v35) = *v26;
      }
    }
LABEL_39:
    uint64_t v36 = (unsigned int *)(v26 + 1);
    while (v36 != (unsigned int *)v24)
    {
      unsigned int v37 = *v36++;
      if (v37 <= 0xFFFFFFFD)
      {
        uint64_t v26 = (int *)(v36 - 1);
        goto LABEL_44;
      }
    }
    uint64_t v26 = v24;
LABEL_44:
    if (v26 != v27) {
      continue;
    }
    break;
  }
  int v38 = v67;
  if (v67)
  {
    int v39 = *(_DWORD *)(v20 + 16);
    if (v67 != v39)
    {
      uint64_t v40 = *(void *)(v20 + 8);
      *(void *)(v20 + 8) = v66;
      uint64_t v66 = v40;
      *(_DWORD *)(v20 + 16) = v38;
      LODWORD(v67) = v39;
      uint64_t v41 = *(void *)(v20 + 20);
      *(void *)(v20 + 20) = *(void *)((char *)&v67 + 4);
      *(void *)((char *)&v67 + 4) = v41;
      int v38 = *(_DWORD *)(v20 + 16);
    }
    uint64_t v7 = a2;
    if (v38 != 1)
    {
      MEMORY[0x1D25D9CD0](v66, 4);
      goto LABEL_71;
    }
    LODWORD(v69[0]) = 0;
    size_t v42 = *(_DWORD **)(v20 + 8);
    uint64_t v43 = *(unsigned int *)(v20 + 24);
    if (v43)
    {
      uint64_t v44 = 4 * v43;
      size_t v45 = &v42[v43];
      while (*v42 >= 0xFFFFFFFE)
      {
        ++v42;
        v44 -= 4;
        if (!v44)
        {
          size_t v42 = v45;
          break;
        }
      }
    }
    LODWORD(v69[0]) = *v42;
    uint64_t v63 = v6;
    uint64_t v46 = *(void *)(v6 + 8);
    if (!v46)
    {
LABEL_70:
      MEMORY[0x1D25D9CD0](v66, 4);
      uint64_t v6 = v63;
      uint64_t v7 = a2;
      goto LABEL_71;
    }
    uint64_t v47 = *(uint64_t **)v6;
    uint64_t v48 = *(void *)v6 + 8 * v46;
    while (2)
    {
      uint64_t v49 = *v47;
      if (v10 == *v47)
      {
LABEL_57:
        if (++v47 == (uint64_t *)v48) {
          goto LABEL_70;
        }
        continue;
      }
      break;
    }
    uint64_t v50 = *a1;
    uint64_t v51 = *((unsigned int *)a1 + 4);
    if (v51)
    {
      LODWORD(v52) = (v51 - 1) & ((v49 >> 4) ^ (v49 >> 9));
      BOOL v53 = (uint64_t *)(v50 + 16 * v52);
      uint64_t v54 = *v53;
      if (v49 != *v53)
      {
        int v55 = 1;
        while (v54 != -4096)
        {
          int v56 = v52 + v55++;
          uint64_t v52 = v56 & (v51 - 1);
          uint64_t v54 = *(void *)(v50 + 16 * v52);
          if (v49 == v54)
          {
            BOOL v53 = (uint64_t *)(v50 + 16 * v52);
            goto LABEL_66;
          }
        }
        goto LABEL_65;
      }
    }
    else
    {
LABEL_65:
      BOOL v53 = (uint64_t *)(v50 + 16 * v51);
    }
LABEL_66:
    uint64_t v57 = *(void *)a2;
    uint64_t v58 = *(unsigned int *)(a2 + 16);
    BOOL v59 = (int32x2_t *)sub_1CD489BC0(*(void *)a2, *(_DWORD *)(a2 + 16), *((_DWORD *)v53 + 2));
    if ((int32x2_t *)(v57 + 32 * v58) != v59)
    {
      BOOL v60 = v59;
      sub_1CD48A5AC(v59 + 1, v69);
      if (!v60[2].i32[0]) {
        goto LABEL_74;
      }
    }
    goto LABEL_57;
  }
LABEL_74:
  uint64_t v62 = v66;
LABEL_75:
  MEMORY[0x1D25D9CD0](v62, 4);
  return 0;
}

BOOL llvm::IRSimilarity::IRSimilarityCandidate::compareStructure(llvm::IRSimilarity::IRSimilarityCandidate *this, const llvm::IRSimilarity::IRSimilarityCandidate *a2, const llvm::IRSimilarity::IRSimilarityCandidate *a3)
{
  v7[0] = 0;
  v7[1] = 0;
  int v8 = 0;
  v5[0] = 0;
  v5[1] = 0;
  int v6 = 0;
  BOOL v3 = llvm::IRSimilarity::IRSimilarityCandidate::compareStructure((unsigned int *)this, (uint64_t)a2, (const llvm::IRSimilarity::IRInstructionData *)v7, (uint64_t)v5);
  sub_1CD48AF5C((uint64_t)v5);
  MEMORY[0x1D25D9CD0](v5[0], 8);
  sub_1CD48AF5C((uint64_t)v7);
  MEMORY[0x1D25D9CD0](v7[0], 8);
  return v3;
}

BOOL llvm::IRSimilarity::IRSimilarityCandidate::compareStructure(unsigned int *a1, uint64_t a2, const llvm::IRSimilarity::IRInstructionData *a3, uint64_t a4)
{
  unsigned int v4 = a1[1];
  if (v4 != *(_DWORD *)(a2 + 4) || a1[8] != *(_DWORD *)(a2 + 32)) {
    return 0;
  }
  unsigned int v7 = *a1;
  unsigned int v8 = *a1 + v4;
  if (*a1 < v8)
  {
    uint64_t v11 = (const llvm::IRSimilarity::IRInstructionData **)(a2 + 8);
    uint64_t v12 = (llvm::IRSimilarity **)(a1 + 2);
    unsigned int v62 = v8;
    while (1)
    {
      uint64_t v13 = *v12;
      uint64_t v14 = *v11;
      BOOL result = llvm::IRSimilarity::isClose(*v12, *v11, a3);
      if (!result) {
        return result;
      }
      if (!*((unsigned char *)v13 + 72) || !*((unsigned char *)v14 + 72)) {
        return 0;
      }
      uint64_t v16 = *((void *)v13 + 2);
      uint64_t v17 = *((unsigned int *)v13 + 8);
      int v79 = (uint64_t *)*((void *)v13 + 3);
      uint64_t v80 = v17;
      uint64_t v18 = *((void *)v14 + 2);
      uint64_t v19 = *((unsigned int *)v14 + 8);
      uint64_t v77 = (uint64_t *)*((void *)v14 + 3);
      uint64_t v78 = v19;
      uint64_t v20 = *((void *)a1 + 3);
      uint64_t v21 = a1[10];
      if (v21)
      {
        LODWORD(v22) = (v21 - 1) & ((v16 >> 4) ^ (v16 >> 9));
        uint64_t v23 = (uint64_t *)(v20 + 16 * v22);
        uint64_t v24 = *v23;
        if (v16 == *v23) {
          goto LABEL_15;
        }
        int v25 = 1;
        while (v24 != -4096)
        {
          int v26 = v22 + v25++;
          uint64_t v22 = v26 & (v21 - 1);
          uint64_t v24 = *(void *)(v20 + 16 * v22);
          if (v16 == v24)
          {
            uint64_t v23 = (uint64_t *)(v20 + 16 * v22);
            goto LABEL_15;
          }
        }
      }
      uint64_t v23 = (uint64_t *)(v20 + 16 * v21);
LABEL_15:
      int v76 = *((_DWORD *)v23 + 2);
      uint64_t v27 = *(void *)(a2 + 24);
      uint64_t v28 = *(unsigned int *)(a2 + 40);
      if (v28)
      {
        LODWORD(v29) = (v28 - 1) & ((v18 >> 4) ^ (v18 >> 9));
        int v30 = (uint64_t *)(v27 + 16 * v29);
        uint64_t v31 = *v30;
        if (v18 == *v30) {
          goto LABEL_22;
        }
        int v32 = 1;
        while (v31 != -4096)
        {
          int v33 = v29 + v32++;
          uint64_t v29 = v33 & (v28 - 1);
          uint64_t v31 = *(void *)(v27 + 16 * v29);
          if (v18 == v31)
          {
            int v30 = (uint64_t *)(v27 + 16 * v29);
            goto LABEL_22;
          }
        }
      }
      int v30 = (uint64_t *)(v27 + 16 * v28);
LABEL_22:
      uint64_t v60 = v18;
      int v75 = *((_DWORD *)v30 + 2);
      int v67 = v75;
      sub_1CD48A510((uint64_t)&v68, &v67, 1);
      LODWORD(v71) = v76;
      uint64_t v72 = v68;
      uint64_t v73 = v69;
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      int v74 = v70;
      int v70 = 0;
      sub_1CD48C184((uint64_t)&v81, (uint64_t)a3, &v71, (uint64_t)&v72);
      uint64_t v34 = v81;
      int v35 = v83;
      MEMORY[0x1D25D9CD0](v72, 4);
      MEMORY[0x1D25D9CD0](v68, 4);
      if (!v35
        && (int *)(*(void *)(v34 + 8) + 4 * *(unsigned int *)(v34 + 24)) == sub_1CD48C650((uint64_t *)(v34 + 8), &v75))
      {
        return 0;
      }
      int v67 = v76;
      sub_1CD48A510((uint64_t)&v68, &v67, 1);
      LODWORD(v71) = v75;
      uint64_t v72 = v68;
      uint64_t v73 = v69;
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      int v74 = v70;
      int v70 = 0;
      sub_1CD48C184((uint64_t)&v81, a4, &v71, (uint64_t)&v72);
      uint64_t v36 = v81;
      int v37 = v83;
      MEMORY[0x1D25D9CD0](v72, 4);
      MEMORY[0x1D25D9CD0](v68, 4);
      if (!v37
        && (int *)(*(void *)(v36 + 8) + 4 * *(unsigned int *)(v36 + 24)) == sub_1CD48C650((uint64_t *)(v36 + 8), &v76))
      {
        return 0;
      }
      if (llvm::Instruction::isCommutative((llvm::Instruction *)v16))
      {
        if (!sub_1CB845E74(v16)
          && (*(unsigned char *)(v16 + 16) != 84
           || (uint64_t v38 = *(void *)(v16 - 32)) == 0
           || *(unsigned char *)(v38 + 16)
           || *(void *)(v38 + 24) != *(void *)(v16 + 72)
           || (*(unsigned char *)(v38 + 33) & 0x20) == 0))
        {
          v66[0] = a1;
          v66[1] = &v79;
          v66[2] = a3;
          v65[0] = a2;
          v65[1] = (uint64_t)&v77;
          v65[2] = a4;
          if ((llvm::IRSimilarity::IRSimilarityCandidate::compareCommutativeOperandMapping(v66, v65) & 1) == 0) {
            return 0;
          }
          goto LABEL_47;
        }
      }
      v64[0] = a1;
      v64[1] = &v79;
      v64[2] = a3;
      v63[0] = a2;
      v63[1] = &v77;
      v63[2] = a4;
      if (!llvm::IRSimilarity::IRSimilarityCandidate::compareNonCommutativeOperandMapping(v64, (uint64_t)v63)) {
        return 0;
      }
      int v39 = *(unsigned __int8 *)(v16 + 16);
      if (v39 == 83)
      {
        if (*(unsigned char *)(v60 + 16) != 83) {
          goto LABEL_47;
        }
      }
      else if (v39 != 30 || *(unsigned char *)(v60 + 16) != 30)
      {
        goto LABEL_47;
      }
      uint64_t v40 = *((unsigned int *)v13 + 32);
      uint64_t v41 = *((unsigned int *)v14 + 32);
      if (v40 != v41 && v80 != v78) {
        return 0;
      }
      size_t v42 = (_DWORD *)*((void *)v13 + 15);
      uint64_t v43 = (_DWORD *)*((void *)v14 + 15);
      uint64_t v44 = v79;
      size_t v45 = &v42[v40];
      uint64_t v46 = v77;
      uint64_t v47 = &v43[v41];
      uint64_t v48 = &v79[v80];
      uint64_t v49 = &v77[v78];
LABEL_41:
      uint64_t v50 = 0;
      LOBYTE(v71) = v42 != v45;
      BYTE1(v71) = v43 != v47;
      BYTE2(v71) = v44 != v48;
      BYTE3(v71) = v46 != v49;
      while (*((unsigned char *)&v71 + v50))
      {
        if (++v50 == 4)
        {
          uint64_t v57 = v49;
          uint64_t v58 = v48;
          BOOL v59 = v47;
          uint64_t v61 = v45;
          int v51 = *v42;
          int v52 = *v43;
          uint64_t v53 = *v44;
          uint64_t v54 = *v46;
          uint64_t v71 = a1;
          LODWORD(v72) = v51;
          uint64_t v73 = v53;
          uint64_t v81 = a2;
          int v82 = v52;
          uint64_t v83 = v54;
          int v55 = v43;
          int v56 = v42;
          if (!llvm::IRSimilarity::IRSimilarityCandidate::checkRelativeLocations((uint64_t)&v71, (uint64_t)&v81)) {
            return 0;
          }
          size_t v42 = v56 + 1;
          uint64_t v43 = v55 + 1;
          ++v44;
          ++v46;
          uint64_t v47 = v59;
          size_t v45 = v61;
          uint64_t v49 = v57;
          uint64_t v48 = v58;
          goto LABEL_41;
        }
      }
LABEL_47:
      uint64_t v12 = (llvm::IRSimilarity **)((char *)v13 + 8);
      uint64_t v11 = (const llvm::IRSimilarity::IRInstructionData **)((char *)v14 + 8);
      ++v7;
      BOOL result = 1;
      if (v7 == v62) {
        return result;
      }
    }
  }
  return 1;
}

BOOL llvm::IRSimilarity::IRSimilarityCandidate::overlap(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  unsigned int v4 = *a2 + a2[1] - 1;
  if (*a2 >= *a1)
  {
    BOOL v5 = v2 >= v4;
    BOOL v6 = v2 == v4;
  }
  else
  {
    BOOL v5 = 1;
    BOOL v6 = 0;
  }
  if (v6 || !v5) {
    return 1;
  }
  unsigned int v7 = v2 + a1[1] - 1;
  if (v2 >= v3)
  {
    BOOL v8 = v3 >= v7;
    BOOL v9 = v3 == v7;
  }
  else
  {
    BOOL v8 = 1;
    BOOL v9 = 0;
  }
  return v9 || !v8;
}

void llvm::IRSimilarity::IRSimilarityIdentifier::populateMapper(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    BOOL v8 = *(uint64_t **)a2;
    uint64_t v9 = 8 * v4;
    do
    {
      uint64_t v10 = *v8++;
      llvm::IRSimilarity::IRSimilarityIdentifier::populateMapper(a1, v10, a3, a4);
      v9 -= 8;
    }
    while (v9);
  }
}

{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  void *__p;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  int v25 = 0;
  int v26 = 0;
  uint64_t v27 = 0;
  BOOL v8 = (unsigned int *)(a1 + 192);
  __p = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  sub_1CD489AF4((void *)(a1 + 192), a2);
  uint64_t v9 = a2 + 24;
  uint64_t v10 = *(void *)(a2 + 32);
  if (v10 == a2 + 24)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      if (v10) {
        uint64_t v13 = v10 - 56;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = v13 + 72;
      if (*(void *)(v13 + 72) != v13 + 72)
      {
        uint64_t v15 = *(void *)(v13 + 80);
        if (v15 != v14)
        {
          do
          {
            if (v15) {
              uint64_t v16 = v15 - 24;
            }
            else {
              uint64_t v16 = 0;
            }
            llvm::IRSimilarity::IRInstructionMapper::convertToUnsignedVec((uint64_t)v8, v16, (uint64_t)&v25, (char **)&__p);
            uint64_t v15 = *(void *)(v15 + 8);
          }
          while (v15 != v14);
          uint64_t v14 = *(void *)(v13 + 80);
        }
        uint64_t v17 = v14 - 24;
        if (!v14) {
          uint64_t v17 = 0;
        }
        uint64_t v21 = v17 + 40;
        llvm::IRSimilarity::IRInstructionMapper::mapToIllegalUnsigned(v8, &v21, (uint64_t)&__p, (uint64_t)&v25, 1);
        uint64_t v12 = v25;
        uint64_t v11 = v26;
        if (v26 != v25)
        {
          uint64_t v18 = *(unint64_t **)(a1 + 272);
          uint64_t v19 = (unint64_t *)*((void *)v26 - 1);
          uint64_t v20 = *v18 & 0xFFFFFFFFFFFFFFF8;
          *uint64_t v19 = v20 | *v19 & 7;
          v19[1] = (unint64_t)v18;
          *(void *)(v20 + 8) = v19;
          *uint64_t v18 = *v18 & 7 | (unint64_t)v19;
        }
      }
      uint64_t v10 = *(void *)(v10 + 8);
    }
    while (v10 != v9);
  }
  sub_1CBFC93DC(a3, *(void *)(a3 + 8), v12, v11, (v11 - v12) >> 3);
  sub_1CBFFBF40(a4, a4[1], (char *)__p, v23, (v23 - (unsigned char *)__p) >> 2);
  if (__p)
  {
    uint64_t v23 = (char *)__p;
    operator delete(__p);
  }
  if (v12)
  {
    int v26 = v12;
    operator delete(v12);
  }
}

uint64_t llvm::IRSimilarity::IRSimilarityCandidate::createCanonicalRelationFrom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v162 = *MEMORY[0x1E4F143B8];
  v152[0] = 0;
  v152[1] = 0;
  unsigned int v153 = 0;
  uint64_t v5 = *(unsigned int *)(a3 + 16);
  uint64_t v6 = *(void *)a3 + 32 * v5;
  if (*(_DWORD *)(a3 + 8))
  {
    if (v5)
    {
      uint64_t v73 = 32 * v5;
      uint64_t v7 = *(void *)a3;
      while (*(_DWORD *)v7 >= 0xFFFFFFFE)
      {
        v7 += 32;
        v73 -= 32;
        if (!v73) {
          goto LABEL_2;
        }
      }
    }
    else
    {
      uint64_t v7 = *(void *)a3;
    }
  }
  else
  {
LABEL_2:
    uint64_t v7 = *(void *)a3 + 32 * v5;
  }
  uint64_t v8 = *(void *)a3 + 32 * v5;
  if (v7 != v8)
  {
    while (1)
    {
      LODWORD(v159) = 0;
      LODWORD(v159) = *(_DWORD *)v7;
      LODWORD(v149) = 0;
      unsigned int v13 = *(_DWORD *)(v7 + 16);
      if (v13 < 2) {
        break;
      }
      uint64_t v14 = *(unsigned int *)(v7 + 24);
      if (v14)
      {
        uint64_t v15 = 4 * v14;
        uint64_t v16 = *(unsigned int **)(v7 + 8);
        while (*v16 >= 0xFFFFFFFE)
        {
          ++v16;
          v15 -= 4;
          if (!v15) {
            goto LABEL_36;
          }
        }
      }
      else
      {
        uint64_t v16 = *(unsigned int **)(v7 + 8);
      }
      uint64_t v22 = *(void *)(v7 + 8) + 4 * v14;
      if (v16 != (unsigned int *)v22)
      {
LABEL_29:
        LODWORD(v154) = 0;
        LODWORD(v154) = *v16;
        uint64_t v23 = sub_1CD48C650(v152, &v154);
        if ((int *)(v152[0] + 4 * v153) == v23)
        {
          int v26 = sub_1CD489BC0(*(void *)a4, *(_DWORD *)(a4 + 16), v154);
          if ((int *)(*((void *)v26 + 1) + 4 * v26[6]) != sub_1CD48C650((uint64_t *)v26 + 1, &v159))
          {
            int v21 = v154;
LABEL_26:
            LODWORD(v149) = v21;
            goto LABEL_36;
          }
        }
        uint64_t v24 = v16 + 1;
        while (v24 != (unsigned int *)v22)
        {
          unsigned int v25 = *v24++;
          if (v25 <= 0xFFFFFFFD)
          {
            uint64_t v16 = v24 - 1;
            goto LABEL_29;
          }
        }
      }
LABEL_36:
      if (v153)
      {
        int v27 = (int)v149;
        unsigned int v28 = (37 * v149) & (v153 - 1);
        uint64_t v29 = (int *)(v152[0] + 4 * v28);
        int v30 = *v29;
        if (v149 == *v29) {
          goto LABEL_52;
        }
        uint64_t v31 = 0;
        int v32 = 1;
        while (v30 != -1)
        {
          if (v31) {
            BOOL v33 = 0;
          }
          else {
            BOOL v33 = v30 == -2;
          }
          if (v33) {
            uint64_t v31 = v29;
          }
          unsigned int v34 = v28 + v32++;
          unsigned int v28 = v34 & (v153 - 1);
          uint64_t v29 = (int *)(v152[0] + 4 * v28);
          int v30 = *v29;
          if (v149 == *v29) {
            goto LABEL_52;
          }
        }
        if (v31) {
          int v35 = v31;
        }
        else {
          int v35 = v29;
        }
      }
      else
      {
        int v35 = 0;
      }
      uint64_t v36 = sub_1CBB29C30((uint64_t)v152, (uint64_t)&v149, &v149, v35);
      *uint64_t v36 = (int)v149;
      int v27 = (int)v149;
LABEL_52:
      uint64_t v37 = *(void *)(a2 + 72);
      uint64_t v38 = *(unsigned int *)(a2 + 88);
      if (v38)
      {
        LODWORD(v39) = (v38 - 1) & (37 * v27);
        uint64_t v40 = (int *)(v37 + 8 * v39);
        int v41 = *v40;
        if (v27 == *v40) {
          goto LABEL_54;
        }
        int v71 = 1;
        while (v41 != -1)
        {
          int v72 = v39 + v71++;
          uint64_t v39 = v72 & (v38 - 1);
          int v41 = *(_DWORD *)(v37 + 8 * v39);
          if (v27 == v41)
          {
            uint64_t v40 = (int *)(v37 + 8 * v39);
            goto LABEL_54;
          }
        }
      }
      uint64_t v40 = (int *)(v37 + 8 * v38);
LABEL_54:
      if ((int *)(v37 + 8 * v38) == v40) {
        unsigned int v42 = 0;
      }
      else {
        unsigned int v42 = v40[1];
      }
      uint64_t v43 = v159;
      uint64_t v44 = v42;
      *(void *)&long long v154 = v42 | ((unint64_t)v159 << 32);
      int v45 = *(_DWORD *)(a1 + 112);
      if (v45)
      {
        uint64_t v46 = *(void *)(a1 + 96);
        int v47 = v45 - 1;
        unsigned int v48 = v47 & (37 * v44);
        uint64_t v49 = (_DWORD *)(v46 + 8 * v48);
        int v50 = *v49;
        if (v44 == *v49) {
          goto LABEL_72;
        }
        int v51 = 0;
        int v52 = 1;
        while (v50 != -1)
        {
          if (v51) {
            BOOL v53 = 0;
          }
          else {
            BOOL v53 = v50 == -2;
          }
          if (v53) {
            int v51 = v49;
          }
          unsigned int v54 = v48 + v52++;
          unsigned int v48 = v54 & v47;
          uint64_t v49 = (_DWORD *)(v46 + 8 * v48);
          int v50 = *v49;
          if (v44 == *v49) {
            goto LABEL_72;
          }
        }
        if (v51) {
          int v55 = v51;
        }
        else {
          int v55 = v49;
        }
      }
      else
      {
        int v55 = 0;
      }
      int v56 = sub_1CB83889C(a1 + 96, (uint64_t)&v154, &v154, v55);
      *(void *)int v56 = v154;
      uint64_t v43 = v159;
LABEL_72:
      *(void *)&long long v154 = v43 | (v44 << 32);
      int v57 = *(_DWORD *)(a1 + 88);
      if (v57)
      {
        uint64_t v58 = *(void *)(a1 + 72);
        int v59 = v57 - 1;
        unsigned int v60 = v59 & (37 * v43);
        uint64_t v61 = (_DWORD *)(v58 + 8 * v60);
        int v62 = *v61;
        if (*v61 == v43) {
          goto LABEL_87;
        }
        uint64_t v63 = 0;
        int v64 = 1;
        while (v62 != -1)
        {
          if (v63) {
            BOOL v65 = 0;
          }
          else {
            BOOL v65 = v62 == -2;
          }
          if (v65) {
            uint64_t v63 = v61;
          }
          unsigned int v66 = v60 + v64++;
          unsigned int v60 = v66 & v59;
          uint64_t v61 = (_DWORD *)(v58 + 8 * v60);
          int v62 = *v61;
          if (*v61 == v43) {
            goto LABEL_87;
          }
        }
        if (v63) {
          int v67 = v63;
        }
        else {
          int v67 = v61;
        }
      }
      else
      {
        int v67 = 0;
      }
      uint64_t v68 = sub_1CB83889C(a1 + 72, (uint64_t)&v154, &v154, v67);
      *(void *)uint64_t v68 = v154;
LABEL_87:
      uint64_t v69 = (unsigned int *)(v7 + 32);
      while (v69 != (unsigned int *)v6)
      {
        unsigned int v70 = *v69;
        v69 += 8;
        if (v70 <= 0xFFFFFFFD)
        {
          uint64_t v7 = (uint64_t)(v69 - 8);
          goto LABEL_92;
        }
      }
      uint64_t v7 = v6;
LABEL_92:
      if (v7 == v8) {
        goto LABEL_6;
      }
    }
    uint64_t v17 = *(int **)(v7 + 8);
    uint64_t v18 = *(unsigned int *)(v7 + 24);
    uint64_t v19 = &v17[v18];
    if (v13)
    {
      if (v18)
      {
        uint64_t v20 = 4 * v18;
        while (*v17 >= 0xFFFFFFFE)
        {
          ++v17;
          v20 -= 4;
          if (!v20) {
            goto LABEL_25;
          }
        }
      }
      uint64_t v19 = v17;
    }
LABEL_25:
    int v21 = *v19;
    goto LABEL_26;
  }
LABEL_6:
  v149 = 0;
  uint64_t v150 = 0;
  unsigned int v151 = 0;
  sub_1CD4894A8(a1, (uint64_t)&v149);
  uint64_t v9 = v149;
  uint64_t v10 = &v149[v151];
  if (v150)
  {
    if (v151)
    {
      uint64_t v11 = 8 * v151;
      uint64_t v12 = v149;
      while ((*v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v12;
        v11 -= 8;
        if (!v11) {
          goto LABEL_11;
        }
      }
    }
    else
    {
      uint64_t v12 = v149;
    }
  }
  else
  {
LABEL_11:
    uint64_t v12 = &v149[v151];
  }
  int v74 = &v149[v151];
  if (v12 != v74)
  {
    while (1)
    {
      int v75 = (llvm::BasicBlock *)*v12;
      uint64_t v76 = *(void *)(a1 + 24);
      uint64_t v77 = *(unsigned int *)(a1 + 40);
      if (v77)
      {
        LODWORD(v78) = ((v75 >> 4) ^ (v75 >> 9)) & (v77 - 1);
        uint64_t v79 = v76 + 16 * v78;
        uint64_t v80 = *(llvm::BasicBlock **)v79;
        if (v75 == *(llvm::BasicBlock **)v79) {
          goto LABEL_114;
        }
        int v81 = 1;
        while (v80 != (llvm::BasicBlock *)-4096)
        {
          int v82 = v78 + v81++;
          uint64_t v78 = v82 & (v77 - 1);
          uint64_t v80 = *(llvm::BasicBlock **)(v76 + 16 * v78);
          if (v75 == v80)
          {
            uint64_t v79 = v76 + 16 * v78;
            goto LABEL_114;
          }
        }
      }
      uint64_t v79 = v76 + 16 * v77;
LABEL_114:
      uint64_t v83 = *(unsigned int *)(v79 + 8);
      uint64_t v84 = *(void *)(a1 + 72);
      uint64_t v85 = *(unsigned int *)(a1 + 88);
      if (v85)
      {
        LODWORD(v86) = (v85 - 1) & (37 * v83);
        v87 = (int *)(v84 + 8 * v86);
        int v88 = *v87;
        if (v83 == *v87) {
          goto LABEL_116;
        }
        int v138 = 1;
        while (v88 != -1)
        {
          int v139 = v86 + v138++;
          uint64_t v86 = v139 & (v85 - 1);
          int v88 = *(_DWORD *)(v84 + 8 * v86);
          if (v83 == v88)
          {
            v87 = (int *)(v84 + 8 * v86);
            goto LABEL_116;
          }
        }
      }
      v87 = (int *)(v84 + 8 * v85);
LABEL_116:
      if ((int *)(v84 + 8 * v85) != v87) {
        goto LABEL_117;
      }
      uint64_t v90 = *(void *)(*(void *)(a1 + 8) + 16);
      if (v75 != *(llvm::BasicBlock **)(v90 + 40))
      {
        llvm::BasicBlock::instructionsWithoutDebug(v75, 1, (uint64_t)&v154);
        long long v159 = v154;
        if (v156)
        {
          if (v156 == v155)
          {
            v161 = v160;
            (*(void (**)(void *, void *))(v155[0] + 24))(v155, v160);
            uint64_t v91 = v161;
          }
          else
          {
            uint64_t v91 = (void *)(*(uint64_t (**)(void))(*v156 + 16))();
            v161 = v91;
          }
          if ((void)v159) {
            uint64_t v90 = v159 - 24;
          }
          else {
            uint64_t v90 = 0;
          }
          if (v91 == v160)
          {
            (*(void (**)(void *))(v160[0] + 32))(v160);
          }
          else if (v91)
          {
            (*(void (**)(void *))(*v91 + 40))(v91);
          }
        }
        else
        {
          v161 = 0;
          if ((void)v154) {
            uint64_t v90 = v154 - 24;
          }
          else {
            uint64_t v90 = 0;
          }
        }
        if (v158 == v157)
        {
          (*(void (**)(void *))(v157[0] + 32))(v157);
        }
        else if (v158)
        {
          (*(void (**)(void))(*v158 + 40))();
        }
        if (v156 == v155)
        {
          (*(void (**)(void *))(v155[0] + 32))(v155);
        }
        else if (v156)
        {
          (*(void (**)(void))(*v156 + 40))();
        }
      }
      int v92 = sub_1CBFFA82C(a1, v90);
      uint64_t v93 = *(void *)(a1 + 72);
      uint64_t v94 = *(unsigned int *)(a1 + 88);
      if (v94)
      {
        LODWORD(v95) = (v94 - 1) & (37 * v92);
        v96 = (int *)(v93 + 8 * v95);
        int v97 = *v96;
        if (*v96 == v92) {
          goto LABEL_145;
        }
        int v140 = 1;
        while (v97 != -1)
        {
          int v141 = v95 + v140++;
          uint64_t v95 = v141 & (v94 - 1);
          int v97 = *(_DWORD *)(v93 + 8 * v95);
          if (v97 == v92)
          {
            v96 = (int *)(v93 + 8 * v95);
            goto LABEL_145;
          }
        }
      }
      v96 = (int *)(v93 + 8 * v94);
LABEL_145:
      if ((int *)(v93 + 8 * v94) == v96) {
        int v98 = 0;
      }
      else {
        int v98 = v96[1];
      }
      uint64_t v99 = *(void *)(a2 + 96);
      uint64_t v100 = *(unsigned int *)(a2 + 112);
      if (v100)
      {
        LODWORD(v101) = (v100 - 1) & (37 * v98);
        v102 = (int *)(v99 + 8 * v101);
        int v103 = *v102;
        if (v98 == *v102) {
          goto LABEL_150;
        }
        int v142 = 1;
        while (v103 != -1)
        {
          int v143 = v101 + v142++;
          uint64_t v101 = v143 & (v100 - 1);
          int v103 = *(_DWORD *)(v99 + 8 * v101);
          if (v98 == v103)
          {
            v102 = (int *)(v99 + 8 * v101);
            goto LABEL_150;
          }
        }
      }
      v102 = (int *)(v99 + 8 * v100);
LABEL_150:
      if ((int *)(v99 + 8 * v100) == v102) {
        int v104 = 0;
      }
      else {
        int v104 = v102[1];
      }
      LODWORD(v154) = v104;
      v105 = sub_1CD48A634((uint64_t *)(a2 + 48), &v154);
      int v106 = sub_1CBFFA82C(a2, *(void *)(*((void *)v105 + 1) + 40));
      uint64_t v107 = *(void *)(a2 + 72);
      uint64_t v108 = *(unsigned int *)(a2 + 88);
      if (v108)
      {
        LODWORD(v109) = (v108 - 1) & (37 * v106);
        v110 = (int *)(v107 + 8 * v109);
        int v111 = *v110;
        if (*v110 == v106) {
          goto LABEL_155;
        }
        int v144 = 1;
        while (v111 != -1)
        {
          int v145 = v109 + v144++;
          uint64_t v109 = v145 & (v108 - 1);
          int v111 = *(_DWORD *)(v107 + 8 * v109);
          if (v111 == v106)
          {
            v110 = (int *)(v107 + 8 * v109);
            goto LABEL_155;
          }
        }
      }
      v110 = (int *)(v107 + 8 * v108);
LABEL_155:
      if ((int *)(v107 + 8 * v108) == v110) {
        unsigned int v112 = 0;
      }
      else {
        unsigned int v112 = v110[1];
      }
      uint64_t v113 = v112;
      *(void *)&long long v154 = v112 | (unint64_t)(v83 << 32);
      int v114 = *(_DWORD *)(a1 + 112);
      if (!v114)
      {
        v124 = 0;
LABEL_172:
        v125 = sub_1CB83889C(a1 + 96, (uint64_t)&v154, &v154, v124);
        *(void *)v125 = v154;
        goto LABEL_173;
      }
      uint64_t v115 = *(void *)(a1 + 96);
      int v116 = v114 - 1;
      unsigned int v117 = v116 & (37 * v113);
      v118 = (_DWORD *)(v115 + 8 * v117);
      int v119 = *v118;
      if (v113 != *v118)
      {
        v120 = 0;
        int v121 = 1;
        while (v119 != -1)
        {
          if (v120) {
            BOOL v122 = 0;
          }
          else {
            BOOL v122 = v119 == -2;
          }
          if (v122) {
            v120 = v118;
          }
          unsigned int v123 = v117 + v121++;
          unsigned int v117 = v123 & v116;
          v118 = (_DWORD *)(v115 + 8 * v117);
          int v119 = *v118;
          if (v113 == *v118) {
            goto LABEL_173;
          }
        }
        if (v120) {
          v124 = v120;
        }
        else {
          v124 = v118;
        }
        goto LABEL_172;
      }
LABEL_173:
      *(void *)&long long v154 = v83 | (v113 << 32);
      int v126 = *(_DWORD *)(a1 + 88);
      if (!v126)
      {
        v136 = 0;
LABEL_187:
        v137 = sub_1CB83889C(a1 + 72, (uint64_t)&v154, &v154, v136);
        *(void *)v137 = v154;
        goto LABEL_117;
      }
      uint64_t v127 = *(void *)(a1 + 72);
      int v128 = v126 - 1;
      unsigned int v129 = v128 & (37 * v83);
      v130 = (_DWORD *)(v127 + 8 * v129);
      int v131 = *v130;
      if (v83 != *v130)
      {
        v132 = 0;
        int v133 = 1;
        while (v131 != -1)
        {
          if (v132) {
            BOOL v134 = 0;
          }
          else {
            BOOL v134 = v131 == -2;
          }
          if (v134) {
            v132 = v130;
          }
          unsigned int v135 = v129 + v133++;
          unsigned int v129 = v135 & v128;
          v130 = (_DWORD *)(v127 + 8 * v129);
          int v131 = *v130;
          if (v83 == *v130) {
            goto LABEL_117;
          }
        }
        if (v132) {
          v136 = v132;
        }
        else {
          v136 = v130;
        }
        goto LABEL_187;
      }
LABEL_117:
      BOOL v89 = v12 + 1;
      uint64_t v12 = v10;
      if (v89 != v10)
      {
        uint64_t v12 = v89;
        while ((*v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (++v12 == v10)
          {
            uint64_t v12 = v10;
            break;
          }
        }
      }
      if (v12 == v74)
      {
        uint64_t v9 = v149;
        break;
      }
    }
  }
  MEMORY[0x1D25D9CD0](v9, 8);
  return MEMORY[0x1D25D9CD0](v152[0], 4);
}

uint64_t sub_1CBFFA82C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      goto LABEL_8;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  uint64_t v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3)) {
    return 0;
  }
  else {
    return *((unsigned int *)v5 + 2) | 0x100000000;
  }
}

void llvm::IRSimilarity::IRSimilarityIdentifier::findCandidates(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v137 = *MEMORY[0x1E4F143B8];
  llvm::SuffixTree::SuffixTree((uint64_t)v122, a3);
  int v106 = 0;
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  unsigned int v102 = 0;
  sub_1CD48A6A8((uint64_t)&v96, v129[2]);
  uint64_t v91 = 0;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  int v95 = 2;
  if (v96)
  {
    unsigned int v13 = 0;
    uint64_t v14 = 0;
    uint64_t v86 = v3;
    while (1)
    {
      int v15 = v97;
      if (v97 >= 2)
      {
        uint64_t v16 = v98;
        uint64_t v17 = v99;
        if (v98 != v99)
        {
          unsigned int v18 = v97 - 1;
          do
          {
            uint64_t v19 = *v16;
            unsigned int v20 = v18 + v19;
            if (__CFADD__(v18, v19))
            {
LABEL_27:
              sub_1CD48A70C((uint64_t)&v106, v19, v15, *(llvm::IRSimilarity::IRInstructionData **)(*a2 + 8 * v19), *(llvm::IRSimilarity::IRInstructionData **)(*a2 + 8 * v20));
            }
            else
            {
              unsigned int v21 = *v16;
              while (*(_DWORD *)(*v3 + 4 * v21) <= *(_DWORD *)(a1 + 192))
              {
                if (++v21 > v20) {
                  goto LABEL_27;
                }
              }
            }
            ++v16;
          }
          while (v16 != v17);
          unsigned int v13 = (char *)v107;
        }
      }
      uint64_t v22 = v106;
      if (0xEEEEEEEEEEEEEEEFLL * ((v13 - (char *)v106) >> 3) < 2) {
        goto LABEL_31;
      }
      uint64_t v23 = 0;
      v119[0] = 0;
      v119[1] = 0;
      int v120 = 0;
      v117[0] = 0;
      v117[1] = 0;
      int v118 = 0;
      v115[0] = 0;
      v115[1] = 0;
      int v116 = 0;
      if (v106 != (unsigned int *)v13) {
        break;
      }
LABEL_80:
      sub_1CD48AF5C((uint64_t)v115);
      MEMORY[0x1D25D9CD0](v115[0], 8);
      sub_1CD48AF5C((uint64_t)v117);
      MEMORY[0x1D25D9CD0](v117[0], 8);
      MEMORY[0x1D25D9CD0](v23, 8);
      int v55 = (unsigned int *)(v100 + 32 * v102);
      if (v101)
      {
        if (v102)
        {
          uint64_t v81 = 32 * v102;
          uint64_t v56 = v100;
          while (*(_DWORD *)v56 >= 0xFFFFFFFE)
          {
            v56 += 32;
            v81 -= 32;
            if (!v81) {
              goto LABEL_81;
            }
          }
        }
        else
        {
          uint64_t v56 = v100;
        }
      }
      else
      {
LABEL_81:
        uint64_t v56 = v100 + 32 * v102;
      }
      uint64_t v57 = v100 + 32 * v102;
LABEL_85:
      while (v56 != v57)
      {
        int v59 = *(long long **)(v56 + 8);
        uint64_t v58 = *(long long **)(v56 + 16);
        if (0xEEEEEEEEEEEEEEEFLL * (((char *)v58 - (char *)v59) >> 3) >= 2)
        {
          uint64_t v61 = *(void **)(a1 + 304);
          unint64_t v60 = *(void *)(a1 + 312);
          if ((unint64_t)v61 >= v60)
          {
            uint64_t v63 = *(void *)(a1 + 296);
            unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v61 - v63) >> 3);
            unint64_t v65 = v64 + 1;
            if (v64 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_120;
            }
            unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - v63) >> 3);
            if (2 * v66 > v65) {
              unint64_t v65 = 2 * v66;
            }
            if (v66 >= 0x555555555555555) {
              unint64_t v67 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v67 = v65;
            }
            if (v67 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_121;
            }
            uint64_t v68 = 3 * v67;
            uint64_t v69 = (char *)operator new(24 * v67);
            unsigned int v70 = &v69[24 * v64];
            *((void *)v70 + 1) = 0;
            *((void *)v70 + 2) = 0;
            int v71 = &v69[8 * v68];
            *(void *)unsigned int v70 = 0;
            sub_1CBFFD8EC(v70, v59, v58, 0xEEEEEEEEEEEEEEEFLL * (((char *)v58 - (char *)v59) >> 3));
            int v62 = v70 + 24;
            int v72 = *(void **)(a1 + 296);
            uint64_t v73 = *(void **)(a1 + 304);
            if (v73 == v72)
            {
              *(void *)(a1 + 296) = v70;
              *(void *)(a1 + 304) = v62;
              *(void *)(a1 + 312) = v71;
            }
            else
            {
              do
              {
                long long v74 = *(_OWORD *)(v73 - 3);
                v73 -= 3;
                *(_OWORD *)(v70 - 24) = v74;
                v70 -= 24;
                *((void *)v70 + 2) = v73[2];
                *uint64_t v73 = 0;
                v73[1] = 0;
                v73[2] = 0;
              }
              while (v73 != v72);
              uint64_t v73 = *(void **)(a1 + 296);
              int v75 = *(void **)(a1 + 304);
              *(void *)(a1 + 296) = v70;
              *(void *)(a1 + 304) = v62;
              *(void *)(a1 + 312) = v71;
              while (v75 != v73)
              {
                v75 -= 3;
                *(void *)&v136[0] = v75;
                sub_1CBFFD868((void ***)v136);
              }
            }
            if (v73) {
              operator delete(v73);
            }
          }
          else
          {
            *uint64_t v61 = 0;
            v61[1] = 0;
            v61[2] = 0;
            sub_1CBFFD8EC(v61, *(long long **)(v56 + 8), *(long long **)(v56 + 16), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(v56 + 16) - *(void *)(v56 + 8)) >> 3));
            int v62 = v61 + 3;
          }
          *(void *)(a1 + 304) = v62;
        }
        uint64_t v76 = (unsigned int *)(v56 + 32);
        while (v76 != v55)
        {
          unsigned int v77 = *v76;
          v76 += 8;
          if (v77 <= 0xFFFFFFFD)
          {
            uint64_t v56 = (uint64_t)(v76 - 8);
            goto LABEL_85;
          }
        }
        uint64_t v56 = (uint64_t)v55;
      }
      unsigned int v13 = (char *)v106;
      for (i = (char *)v107; i != v13; i = (char *)sub_1CD48A868((void *)i - 15))
        ;
      uint64_t v107 = (unsigned int *)v13;
      sub_1CD489D38(&v100);
      uint64_t v79 = v103;
      uint64_t v80 = v104;
      uint64_t v3 = v86;
      while (v80 != v79)
      {
        v80 -= 24;
        *(void *)&v136[0] = v80;
        sub_1CBFFD868((void ***)v136);
      }
      uint64_t v104 = v79;
      uint64_t v14 = v91;
LABEL_31:
      sub_1CBFFB3F8(&v96);
      if (v96 == v14) {
        goto LABEL_2;
      }
    }
    unsigned int v89 = 0;
    v87 = (unsigned int *)v13;
    while (1)
    {
      uint64_t v24 = v22;
      if (v120)
      {
        LODWORD(v25) = ((v22 >> 4) ^ (v22 >> 9)) & (v120 - 1);
        uint64_t v26 = v119[0] + 16 * v25;
        int v27 = *(unsigned int **)v26;
        if (v22 == *(unsigned int **)v26)
        {
LABEL_37:
          if (v25 != v120) {
            goto LABEL_39;
          }
        }
        else
        {
          int v53 = 1;
          while (v27 != (unsigned int *)-4096)
          {
            int v54 = v25 + v53++;
            uint64_t v25 = v54 & (v120 - 1);
            int v27 = *(unsigned int **)(v119[0] + 16 * v25);
            if (v22 == v27)
            {
              uint64_t v26 = v119[0] + 16 * v25;
              goto LABEL_37;
            }
          }
        }
      }
      unsigned int v112 = (long long *)v22;
      v113[0] = v89;
      sub_1CD40E370((uint64_t)v136, (uint64_t)v119, (uint64_t *)&v112, v113);
      uint64_t v26 = *(void *)&v136[0];
      ++v89;
LABEL_39:
      uint64_t v28 = v100;
      uint64_t v29 = v102;
      uint64_t v90 = *(unsigned int *)(v26 + 8);
      int v30 = sub_1CD489BC0(v100, v102, *(_DWORD *)(v26 + 8));
      if ((int *)(v28 + 32 * v29) == v30)
      {
        llvm::IRSimilarity::IRSimilarityCandidate::createCanonicalMappingFor(v22);
        sub_1CD48AE0C((uint64_t)v136, (long long *)v22);
        uint64_t v109 = (char *)operator new(0x78uLL);
        v110 = v109;
        uint64_t v31 = v109 + 120;
        int v111 = v109 + 120;
        sub_1CD48AE0C((uint64_t)v109, v136);
        LODWORD(v112) = v90;
        v113[0] = v109;
        v113[1] = v31;
        v113[2] = v111;
        uint64_t v109 = 0;
        v110 = 0;
        int v111 = 0;
        sub_1CD48A974((uint64_t)&v114, (uint64_t)&v100, &v112, (uint64_t)v113);
        int v30 = v114;
        int v121 = (char **)v113;
        sub_1CBFFD868((void ***)&v121);
        int v121 = &v109;
        sub_1CBFFD868((void ***)&v121);
        sub_1CD48A868(v136);
      }
      v22 += 30;
      int v32 = (long long *)v107;
      if (v24 + 30 != v107)
      {
        BOOL v33 = (long long *)(v24 + 30);
        while (1)
        {
          if (!v120) {
            goto LABEL_54;
          }
          unsigned int v34 = ((v33 >> 4) ^ (v33 >> 9)) & (v120 - 1);
          int v35 = *(long long **)(v119[0] + 16 * v34);
          if (v33 != v35) {
            break;
          }
LABEL_47:
          if (v34 == v120) {
            goto LABEL_54;
          }
LABEL_48:
          BOOL v33 = (long long *)((char *)v33 + 120);
          if (v33 == v32) {
            goto LABEL_42;
          }
        }
        int v36 = 1;
        while (v35 != (long long *)-4096)
        {
          unsigned int v37 = v34 + v36++;
          unsigned int v34 = v37 & (v120 - 1);
          int v35 = *(long long **)(v119[0] + 16 * v34);
          if (v33 == v35) {
            goto LABEL_47;
          }
        }
LABEL_54:
        sub_1CD48A8BC(v117);
        sub_1CD48A8BC(v115);
        if (llvm::IRSimilarity::IRSimilarityCandidate::compareStructure(v24, (uint64_t)v33, (const llvm::IRSimilarity::IRInstructionData *)v117, (uint64_t)v115))
        {
          llvm::IRSimilarity::IRSimilarityCandidate::createCanonicalRelationFrom((uint64_t)v33, (uint64_t)v24, (uint64_t)v117, (uint64_t)v115);
          unsigned int v112 = v33;
          v113[0] = v90;
          sub_1CD40E370((uint64_t)v136, (uint64_t)v119, (uint64_t *)&v112, v113);
          unint64_t v38 = *((void *)v30 + 2);
          unint64_t v39 = *((void *)v30 + 3);
          if (v38 >= v39)
          {
            uint64_t v41 = *((void *)v30 + 1);
            unint64_t v42 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v38 - v41) >> 3);
            unint64_t v43 = v42 + 1;
            if (v42 + 1 > 0x222222222222222) {
LABEL_120:
            }
              abort();
            unint64_t v44 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v39 - v41) >> 3);
            if (2 * v44 > v43) {
              unint64_t v43 = 2 * v44;
            }
            if (v44 >= 0x111111111111111) {
              unint64_t v45 = 0x222222222222222;
            }
            else {
              unint64_t v45 = v43;
            }
            if (v45)
            {
              if (v45 > 0x222222222222222) {
LABEL_121:
              }
                sub_1CB833614();
              uint64_t v46 = (char *)operator new(120 * v45);
            }
            else
            {
              uint64_t v46 = 0;
            }
            uint64_t v47 = (uint64_t)&v46[120 * v42];
            unsigned int v48 = &v46[120 * v45];
            uint64_t v49 = sub_1CD48AE0C(v47, v33);
            uint64_t v40 = v49 + 120;
            int v51 = (__n128 *)*((void *)v30 + 1);
            int v50 = (__n128 *)*((void *)v30 + 2);
            if (v50 == v51)
            {
              *((void *)v30 + 1) = v49;
              *((void *)v30 + 2) = v40;
              *((void *)v30 + 3) = v48;
            }
            else
            {
              do
              {
                int v50 = (__n128 *)((char *)v50 - 120);
                sub_1CD48A754((__n128 *)(v49 - 120), v50);
              }
              while (v50 != v51);
              int v50 = (__n128 *)*((void *)v30 + 1);
              int v52 = (__n128 *)*((void *)v30 + 2);
              *((void *)v30 + 1) = v49;
              *((void *)v30 + 2) = v40;
              *((void *)v30 + 3) = v48;
              while (v52 != v50)
              {
                int v52 = (__n128 *)((char *)v52 - 120);
                sub_1CD48A868(v52);
              }
            }
            if (v50) {
              operator delete(v50);
            }
          }
          else
          {
            uint64_t v40 = sub_1CD48AE0C(v38, v33) + 120;
          }
          *((void *)v30 + 2) = v40;
        }
        goto LABEL_48;
      }
LABEL_42:
      if (v22 == v87)
      {
        uint64_t v23 = v119[0];
        goto LABEL_80;
      }
    }
  }
LABEL_2:
  sub_1CD48AFB0(&v91);
  sub_1CD48AFB0(&v96);
  sub_1CD48C6C0(&v100);
  *(void *)&v136[0] = &v103;
  sub_1CBFFBCEC((void ***)v136);
  *(void *)&v136[0] = &v106;
  sub_1CBFFD868((void ***)v136);
  if (v131)
  {
    uint64_t v5 = (uint64_t *)v130;
    uint64_t v6 = 8 * v131;
    do
    {
      uint64_t v7 = *v5++;
      MEMORY[0x1D25D9CD0](v7, 8);
      v6 -= 8;
    }
    while (v6);
  }
  int v8 = (uint64_t *)v133;
  if (v134)
  {
    uint64_t v82 = 16 * v134;
    do
    {
      uint64_t v83 = *v8;
      v8 += 2;
      MEMORY[0x1D25D9CD0](v83, 8);
      v82 -= 16;
    }
    while (v82);
    int v8 = (uint64_t *)v133;
  }
  if (v8 != &v135) {
    free(v8);
  }
  if (v130 != &v132) {
    free(v130);
  }
  sub_1CD48AFF4((uint64_t)&v123);
  if (v125)
  {
    uint64_t v9 = (uint64_t *)v124;
    uint64_t v10 = 8 * v125;
    do
    {
      uint64_t v11 = *v9++;
      MEMORY[0x1D25D9CD0](v11, 8);
      v10 -= 8;
    }
    while (v10);
  }
  uint64_t v12 = (uint64_t *)v127;
  if (v128)
  {
    uint64_t v84 = 16 * v128;
    do
    {
      uint64_t v85 = *v12;
      v12 += 2;
      MEMORY[0x1D25D9CD0](v85, 8);
      v84 -= 16;
    }
    while (v84);
    uint64_t v12 = (uint64_t *)v127;
  }
  if (v12 != v129) {
    free(v12);
  }
  if (v124 != &v126) {
    free(v124);
  }
}

uint64_t llvm::IRSimilarity::IRSimilarityIdentifier::findSimilarity(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_1CD489E00(a1);
  memset(v12, 0, sizeof(v12));
  __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  *(_WORD *)(a1 + 280) = *(_WORD *)(a1 + 288);
  *(unsigned char *)(a1 + 251) = *(unsigned char *)(a1 + 290);
  *(_WORD *)(a1 + 282) = *(_WORD *)(a1 + 291);
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      uint64_t v7 = *a2++;
      llvm::IRSimilarity::IRSimilarityIdentifier::populateMapper(a1, v7, (uint64_t)v12, (char **)&__p);
      v6 -= 8;
    }
    while (v6);
  }
  llvm::IRSimilarity::IRSimilarityIdentifier::findCandidates(a1, v12, &__p);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  if (v12[0]) {
    operator delete(v12[0]);
  }
  return a1 + 296;
}

void sub_1CBFFB26C()
{
}

void *sub_1CBFFB304@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
  {
    unsigned int v18 = 0;
LABEL_17:
    BOOL result = sub_1CBFAF8D8(a1, (uint64_t)a2, a2, v18);
    *BOOL result = *a2;
    *((_DWORD *)result + 2) = *a3;
    uint64_t v9 = *(void *)a1;
    unsigned int v8 = *(_DWORD *)(a1 + 16);
    char v13 = 1;
    goto LABEL_4;
  }
  uint64_t v9 = *(void *)a1;
  unsigned int v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v8 - 1);
  BOOL result = (void *)(*(void *)a1 + 16 * v10);
  uint64_t v12 = *result;
  if (*a2 != *result)
  {
    uint64_t v14 = 0;
    int v15 = 1;
    while (v12 != -4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v12 == -8192;
      }
      if (v16) {
        uint64_t v14 = result;
      }
      unsigned int v17 = v10 + v15++;
      unsigned int v10 = v17 & (v8 - 1);
      BOOL result = (void *)(v9 + 16 * v10);
      uint64_t v12 = *result;
      if (*a2 == *result) {
        goto LABEL_3;
      }
    }
    if (v14) {
      unsigned int v18 = v14;
    }
    else {
      unsigned int v18 = result;
    }
    goto LABEL_17;
  }
LABEL_3:
  char v13 = 0;
LABEL_4:
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v9 + 16 * v8;
  *(unsigned char *)(a4 + 16) = v13;
  return result;
}

void sub_1CBFFB3F8(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v3 = a1 + 2;
  uint64_t v2 = (void *)a1[2];
  int v54 = v3;
  *((_DWORD *)v3 - 2) = 0;
  if (v2)
  {
    v1[3] = v2;
    operator delete(v2);
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  void *v1 = 0;
  v54[1] = 0;
  v54[2] = 0;
  *int v54 = 0;
  uint64_t v57 = v1;
  do
  {
    uint64_t v6 = v1[6];
    if (v1[5] == v6) {
      goto LABEL_85;
    }
    uint64_t v7 = *(void *)(v6 - 8);
    v1[6] = v6 - 8;
    uint64_t v8 = *(unsigned int *)(v7 + 16);
    uint64_t v9 = *(void *)v7 + 16 * v8;
    if (*(_DWORD *)(v7 + 8))
    {
      if (*(_DWORD *)(v7 + 16))
      {
        uint64_t v10 = 16 * v8;
        uint64_t v11 = *(void *)v7;
        while (*(_DWORD *)v11 >= 0xFFFFFFFE)
        {
          v11 += 16;
          v10 -= 16;
          if (!v10) {
            goto LABEL_10;
          }
        }
      }
      else
      {
        uint64_t v11 = *(void *)v7;
      }
    }
    else
    {
LABEL_10:
      uint64_t v11 = *(void *)v7 + 16 * v8;
    }
    uint64_t v12 = *(unsigned int *)(v7 + 56);
    uint64_t v13 = *(void *)v7 + 16 * v8;
    uint64_t v14 = v5;
    uint64_t v55 = v7;
    uint64_t v56 = v13;
    while (v11 != v13)
    {
      uint64_t v15 = *(void *)(v11 + 8);
      if (*(_DWORD *)(v15 + 40) == -1)
      {
        unsigned int v17 = (void *)v1[6];
        unint64_t v16 = v1[7];
        if ((unint64_t)v17 >= v16)
        {
          uint64_t v19 = (void *)v1[5];
          uint64_t v20 = v17 - v19;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 61) {
            goto LABEL_91;
          }
          uint64_t v22 = v12;
          uint64_t v23 = v4;
          uint64_t v24 = v16 - (void)v19;
          if (v24 >> 2 > v21) {
            unint64_t v21 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v21;
          }
          if (v25)
          {
            if (v25 >> 61) {
              goto LABEL_92;
            }
            uint64_t v26 = (char *)operator new(8 * v25);
            uint64_t v15 = *(void *)(v11 + 8);
          }
          else
          {
            uint64_t v26 = 0;
          }
          uint64_t v31 = &v26[8 * v20];
          *(void *)uint64_t v31 = v15;
          unsigned int v18 = v31 + 8;
          if (v17 == v19)
          {
            uint64_t v1 = v57;
          }
          else
          {
            do
            {
              uint64_t v32 = *--v17;
              *((void *)v31 - 1) = v32;
              v31 -= 8;
            }
            while (v17 != v19);
            uint64_t v1 = v57;
            unsigned int v17 = (void *)v57[5];
          }
          v1[5] = v31;
          v1[6] = v18;
          v1[7] = &v26[8 * v25];
          if (v17) {
            operator delete(v17);
          }
          uint64_t v4 = v23;
          uint64_t v12 = v22;
          uint64_t v13 = v56;
        }
        else
        {
          *unsigned int v17 = v15;
          unsigned int v18 = v17 + 1;
        }
        v1[6] = v18;
      }
      else if (v12 >= *((_DWORD *)v1 + 16))
      {
        if (v5 >= v4)
        {
          uint64_t v27 = (v5 - v14) >> 3;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61) {
LABEL_91:
          }
            abort();
          if ((v4 - v14) >> 2 > v28) {
            unint64_t v28 = (v4 - v14) >> 2;
          }
          if ((unint64_t)(v4 - v14) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v28;
          }
          if (v29)
          {
            if (v29 >> 61) {
LABEL_92:
            }
              sub_1CB833614();
            int v30 = (char *)operator new(8 * v29);
            uint64_t v15 = *(void *)(v11 + 8);
          }
          else
          {
            int v30 = 0;
          }
          BOOL v33 = &v30[8 * v27];
          *(void *)BOOL v33 = v15;
          unsigned int v34 = v33 + 8;
          while (v5 != v14)
          {
            uint64_t v35 = *((void *)v5 - 1);
            v5 -= 8;
            *((void *)v33 - 1) = v35;
            v33 -= 8;
          }
          uint64_t v4 = &v30[8 * v29];
          if (v14) {
            operator delete(v14);
          }
          uint64_t v5 = v34;
          uint64_t v14 = v33;
          uint64_t v1 = v57;
        }
        else
        {
          *(void *)uint64_t v5 = v15;
          v5 += 8;
        }
      }
      int v36 = (unsigned int *)(v11 + 16);
      while (v36 != (unsigned int *)v9)
      {
        unsigned int v37 = *v36;
        v36 += 4;
        if (v37 <= 0xFFFFFFFD)
        {
          uint64_t v11 = (uint64_t)(v36 - 4);
          goto LABEL_58;
        }
      }
      uint64_t v11 = v9;
LABEL_58:
      ;
    }
    unint64_t v38 = v5;
    BOOL v39 = *(_DWORD *)(v55 + 24) != -1 && (unint64_t)(v5 - v14) > 8;
    uint64_t v5 = v14;
  }
  while (!v39);
  void *v1 = v55;
  *((_DWORD *)v1 + 2) = v12;
  if (v14 != v38)
  {
    uint64_t v40 = v1;
    uint64_t v41 = (_DWORD *)v1[3];
    unint64_t v42 = v14;
    do
    {
      uint64_t v43 = *(void *)v42;
      unint64_t v44 = v40[4];
      if ((unint64_t)v41 >= v44)
      {
        uint64_t v46 = (_DWORD *)*v54;
        uint64_t v47 = ((uint64_t)v41 - *v54) >> 2;
        unint64_t v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 62) {
          goto LABEL_91;
        }
        uint64_t v49 = v44 - (void)v46;
        if (v49 >> 1 > v48) {
          unint64_t v48 = v49 >> 1;
        }
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v48;
        }
        if (v50)
        {
          if (v50 >> 62) {
            goto LABEL_92;
          }
          int v51 = (char *)operator new(4 * v50);
        }
        else
        {
          int v51 = 0;
        }
        int v52 = &v51[4 * v47];
        *(_DWORD *)int v52 = *(_DWORD *)(v43 + 40);
        unint64_t v45 = v52 + 4;
        while (v41 != v46)
        {
          int v53 = *--v41;
          *((_DWORD *)v52 - 1) = v53;
          v52 -= 4;
        }
        uint64_t v40 = v57;
        v57[2] = v52;
        v57[3] = v45;
        v57[4] = &v51[4 * v50];
        if (v46) {
          operator delete(v46);
        }
      }
      else
      {
        *uint64_t v41 = *(_DWORD *)(v43 + 40);
        unint64_t v45 = v41 + 1;
        uint64_t v40 = v57;
      }
      v40[3] = v45;
      v42 += 8;
      uint64_t v41 = v45;
    }
    while (v42 != v38);
    uint64_t v5 = v14;
LABEL_85:
    if (!v5) {
      return;
    }
    goto LABEL_86;
  }
  uint64_t v5 = v38;
  if (!v38) {
    return;
  }
LABEL_86:

  operator delete(v5);
}

__n128 *sub_1CBFFB800(__n128 **a1, unsigned int a2, int a3, llvm::IRSimilarity::IRInstructionData *a4, llvm::IRSimilarity::IRInstructionData *a5)
{
  unint64_t v5 = 0xEEEEEEEEEEEEEEEFLL * (((char *)a1[1] - (char *)*a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x222222222222222) {
    abort();
  }
  if (0xDDDDDDDDDDDDDDDELL * (((char *)a1[2] - (char *)*a1) >> 3) > v6) {
    unint64_t v6 = 0xDDDDDDDDDDDDDDDELL * (((char *)a1[2] - (char *)*a1) >> 3);
  }
  if (0xEEEEEEEEEEEEEEEFLL * (((char *)a1[2] - (char *)*a1) >> 3) >= 0x111111111111111) {
    unint64_t v12 = 0x222222222222222;
  }
  else {
    unint64_t v12 = v6;
  }
  if (v12)
  {
    if (v12 > 0x222222222222222) {
      sub_1CB833614();
    }
    uint64_t v13 = (char *)operator new(120 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = (llvm::IRSimilarity::IRSimilarityCandidate *)&v13[120 * v5];
  uint64_t v15 = (__n128 *)&v13[120 * v12];
  unint64_t v16 = llvm::IRSimilarity::IRSimilarityCandidate::IRSimilarityCandidate(v14, a2, a3, a4, a5);
  unsigned int v17 = (__n128 *)((char *)v16 + 120);
  uint64_t v19 = *a1;
  unsigned int v18 = a1[1];
  if (v18 == *a1)
  {
    *a1 = (__n128 *)v16;
    a1[1] = v17;
    a1[2] = v15;
  }
  else
  {
    do
    {
      unsigned int v18 = (__n128 *)((char *)v18 - 120);
      sub_1CD48A754((__n128 *)((char *)v16 - 120), v18);
    }
    while (v18 != v19);
    unsigned int v18 = *a1;
    uint64_t v20 = a1[1];
    *a1 = (__n128 *)v16;
    a1[1] = v17;
    a1[2] = v15;
    while (v20 != v18)
    {
      uint64_t v20 = (__n128 *)((char *)v20 - 120);
      sub_1CD48A868(v20);
    }
  }
  if (v18) {
    operator delete(v18);
  }
  return v17;
}

void *sub_1CBFFB950(uint64_t a1, uint64_t a2)
{
  BOOL result = (void *)MEMORY[0x1D25D9CD0](*(void *)a1, 4);
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if (v5)
  {
    unint64_t v6 = operator new(8 * v5, (std::align_val_t)4uLL);
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    uint64_t v7 = *(const void **)a2;
    size_t v8 = 8 * *(unsigned int *)(a1 + 16);
    return memcpy(v6, v7, v8);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  return result;
}

_DWORD *sub_1CBFFB9D0(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    BOOL result = operator new(32 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 32 * v5;
      do
      {
        *BOOL result = -1;
        result += 8;
        v6 -= 32;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)BOOL result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

uint64_t sub_1CBFFBA64(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    unint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3++;
      MEMORY[0x1D25D9CD0](v5, 8);
      v4 -= 8;
    }
    while (v4);
  }
  uint64_t v6 = *(uint64_t **)(a1 + 64);
  uint64_t v7 = *(unsigned int *)(a1 + 72);
  if (v7)
  {
    uint64_t v10 = 16 * v7;
    do
    {
      uint64_t v11 = *v6;
      v6 += 2;
      MEMORY[0x1D25D9CD0](v11, 8);
      v10 -= 16;
    }
    while (v10);
    uint64_t v6 = *(uint64_t **)(a1 + 64);
  }
  if (v6 != (uint64_t *)(a1 + 80)) {
    free(v6);
  }
  size_t v8 = *(void **)(a1 + 16);
  if (v8 != (void *)(a1 + 32)) {
    free(v8);
  }
  return a1;
}

uint64_t sub_1CBFFBB10(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 72);
  if (v2)
  {
    uint64_t v9 = *(uint64_t **)(result + 64);
    uint64_t v10 = 16 * v2;
    do
    {
      uint64_t v11 = *v9;
      v9 += 2;
      BOOL result = MEMORY[0x1D25D9CD0](v11, 8);
      v10 -= 16;
    }
    while (v10);
  }
  *(_DWORD *)(v1 + 72) = 0;
  uint64_t v3 = *(unsigned int *)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 80) = 0;
    uint64_t v4 = *(void **)(v1 + 16);
    uint64_t v5 = *v4 + 4096;
    *(void *)uint64_t v1 = *v4;
    *(void *)(v1 + 8) = v5;
    if (v3 != 1)
    {
      uint64_t v6 = v4 + 1;
      uint64_t v7 = 8 * v3 - 8;
      do
      {
        uint64_t v8 = *v6++;
        BOOL result = MEMORY[0x1D25D9CD0](v8, 8);
        v7 -= 8;
      }
      while (v7);
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

uint64_t sub_1CBFFBBB4(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v6 = *a1;
    int v7 = v3 - 1;
    unsigned int v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v4 = (void *)(*a1 + 8 * v8);
    uint64_t v9 = *v4;
    if (*a2 == *v4)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v9 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v9 == -8192;
        }
        if (v12) {
          uint64_t v10 = v4;
        }
        unsigned int v13 = v8 + v11++;
        unsigned int v8 = v13 & v7;
        uint64_t v4 = (void *)(v6 + 8 * (v13 & v7));
        uint64_t v9 = *v4;
        if (*a2 == *v4) {
          goto LABEL_3;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v4 = v10;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t result = 0;
  }
LABEL_3:
  *a3 = v4;
  return result;
}

uint64_t sub_1CBFFBC50(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    int v7 = (void *)(*a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v9) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          uint64_t v9 = v7;
        }
        unsigned int v13 = v6 + v10++;
        unsigned int v6 = v13 & v5;
        int v7 = (void *)(v4 + 16 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_13;
        }
      }
      uint64_t result = 0;
      if (v9) {
        int v7 = v9;
      }
    }
  }
  else
  {
    int v7 = 0;
    uint64_t result = 0;
  }
LABEL_13:
  *a3 = v7;
  return result;
}

void sub_1CBFFBCEC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        unsigned int v6 = v4;
        sub_1CBFFD868(&v6);
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_1CBFFBD60(char **a1, _DWORD *a2)
{
  uint64_t v2 = *a1;
  int v3 = a1[1];
  uint64_t v4 = (v3 - *a1) >> 2;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 62) {
    abort();
  }
  uint64_t v8 = a1[2] - v2;
  if (v8 >> 1 > v5) {
    unint64_t v5 = v8 >> 1;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 62) {
      sub_1CB833614();
    }
    int v10 = (char *)operator new(4 * v9);
  }
  else
  {
    int v10 = 0;
  }
  int v11 = &v10[4 * v4];
  *(_DWORD *)int v11 = *a2;
  BOOL v12 = v11 + 4;
  while (v3 != v2)
  {
    int v13 = *((_DWORD *)v3 - 1);
    v3 -= 4;
    *((_DWORD *)v11 - 1) = v13;
    v11 -= 4;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[4 * v9];
  if (v2) {
    operator delete(v2);
  }
  return v12;
}

BOOL sub_1CBFFBE34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 - 32);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(v2 + 16);
    if (!*(unsigned char *)(v2 + 16))
    {
      if (*(void *)(v2 + 24) != *(void *)(a2 + 72)) {
        return 1;
      }
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v3 = MEMORY[0x10];
  }
  BOOL v4 = v3 < 0x15 || v3 == 24;
  if (v4 || !*(unsigned char *)(a1 + 1)) {
    return 1;
  }
LABEL_11:
  unsigned int v5 = *(unsigned __int16 *)(a2 + 18);
  int v6 = (v5 >> 2) & 0x3FF;
  BOOL v7 = v6 == 20 || v6 == 18;
  return v7 && !*(unsigned char *)(a1 + 3) || (v5 & 3) == 2 && !*(unsigned char *)(a1 + 3);
}

uint64_t sub_1CBFFBEB4(uint64_t a1)
{
  int v1 = *(_DWORD *)(*(void *)(a1 - 32) + 36);
  uint64_t result = 1;
  if (v1 <= 235)
  {
    if ((v1 - 126) <= 0x2A && ((1 << (v1 - 126)) & 0x66000000001) != 0) {
      return result;
    }
    BOOL v4 = v1 > 0x3A;
    uint64_t v5 = (1 << v1) & 0x700000000000080;
    if (!v4 && v5 != 0) {
      return result;
    }
    return 0;
  }
  BOOL v7 = (v1 - 236) > 0x24 || ((1 << (v1 + 20)) & 0x1000000301) == 0;
  if (v7 && v1 != 316) {
    return 0;
  }
  return result;
}

char *sub_1CBFFBF40(char **a1, char *a2, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a2 - *a1;
  BOOL v7 = &(*a1)[v6 & 0xFFFFFFFFFFFFFFFCLL];
  if (a5 < 1) {
    return v7;
  }
  unint64_t v9 = __src;
  BOOL v12 = a1[1];
  int v11 = a1[2];
  if (a5 > (v11 - v12) >> 2)
  {
    unint64_t v13 = a5 + ((v12 - v5) >> 2);
    if (v13 >> 62) {
      abort();
    }
    uint64_t v15 = v11 - v5;
    if (v15 >> 1 > v13) {
      unint64_t v13 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v13;
    }
    if (v16)
    {
      if (v16 >> 62) {
        sub_1CB833614();
      }
      unsigned int v17 = (char *)operator new(4 * v16);
    }
    else
    {
      unsigned int v17 = 0;
    }
    uint64_t v26 = v6 >> 2;
    uint64_t v27 = &v17[4 * (v6 >> 2)];
    unint64_t v28 = &v27[4 * a5];
    uint64_t v29 = 4 * a5;
    int v30 = v27;
    do
    {
      int v31 = *(_DWORD *)v9;
      v9 += 4;
      *(_DWORD *)int v30 = v31;
      v30 += 4;
      v29 -= 4;
    }
    while (v29);
    uint64_t v32 = v27;
    if (v5 != a2)
    {
      uint64_t v33 = 4 * v26;
      do
      {
        *(_DWORD *)&v17[v33 - 4] = *(_DWORD *)&v5[v33 - 4];
        v33 -= 4;
      }
      while (v33);
      uint64_t v32 = v17;
    }
    unsigned int v34 = &v17[4 * v16];
    if (v12 != v7) {
      memmove(v28, v7, v12 - v7);
    }
    *a1 = v32;
    a1[1] = &v28[v12 - v7];
    a1[2] = v34;
    if (v5) {
      operator delete(v5);
    }
    return v27;
  }
  uint64_t v18 = (v12 - v7) >> 2;
  if (v18 >= a5)
  {
    uint64_t v19 = &__src[4 * a5];
    unint64_t v21 = a1[1];
LABEL_18:
    uint64_t v22 = &v7[4 * a5];
    uint64_t v23 = &v21[-4 * a5];
    uint64_t v24 = v21;
    if (v23 < v12)
    {
      uint64_t v24 = v21;
      do
      {
        int v25 = *(_DWORD *)v23;
        v23 += 4;
        *(_DWORD *)uint64_t v24 = v25;
        v24 += 4;
      }
      while (v23 < v12);
    }
    a1[1] = v24;
    if (v21 != v22) {
      memmove(&v21[-4 * ((v21 - v22) >> 2)], v7, v21 - v22);
    }
    if (v19 != v9) {
      memmove(v7, v9, v19 - v9);
    }
    return v7;
  }
  uint64_t v19 = &__src[4 * v18];
  int64_t v20 = a4 - v19;
  if (a4 != v19) {
    memmove(a1[1], &__src[4 * v18], a4 - v19);
  }
  unint64_t v21 = &v12[v20];
  a1[1] = &v12[v20];
  if (v12 - v7 >= 1) {
    goto LABEL_18;
  }
  return v7;
}

unint64_t sub_1CBFFC13C(uint64_t a1)
{
  v89[4] = *MEMORY[0x1E4F143B8];
  v87 = v89;
  uint64_t v88 = 0x400000000;
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  if (v2)
  {
    unsigned int v11 = 0;
    BOOL v12 = *(void ***)(a1 + 24);
    uint64_t v13 = 8 * v2;
    do
    {
      if (v11 >= HIDWORD(v88)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v87 + v11) = **v12;
      unsigned int v11 = v88 + 1;
      LODWORD(v88) = v88 + 1;
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 16);
  if ((v4 - 81) < 2)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
    {
      uint64_t v50 = v4;
      int v51 = __cxa_guard_acquire(&qword_1EBCBE588);
      uint64_t v4 = v50;
      if (v51)
      {
        unint64_t v52 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v52 = 0xFF51AFD7ED558CCDLL;
        }
        qword_1EBCBE580 = v52;
        __cxa_guard_release(&qword_1EBCBE588);
        uint64_t v4 = v50;
      }
    }
    uint64_t v5 = &unk_1EBCBE000;
    unint64_t v6 = 0x9DDFEA08EB382D69 * (qword_1EBCBE580 + ((8 * v4 + 0x7FFFFFF20) & 0x7FFFFFFF8));
    __p[0] = (void *)(0x9DDFEA08EB382D69
                    * ((0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47))) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47))) >> 47)));
    unint64_t v7 = **(void **)(a1 + 16);
    unint64_t v8 = HIDWORD(v7);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
    {
      int v53 = __cxa_guard_acquire(&qword_1EBCBE588);
      uint64_t v5 = &unk_1EBCBE000;
      if (v53)
      {
        unint64_t v54 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v54 = 0xFF51AFD7ED558CCDLL;
        }
        qword_1EBCBE580 = v54;
        __cxa_guard_release(&qword_1EBCBE588);
        uint64_t v5 = (void *)&unk_1EBCBE000;
      }
    }
    unint64_t v9 = 0x9DDFEA08EB382D69 * ((v5[176] + 8 * v7) ^ v8);
    unint64_t v86 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
    if (*(unsigned char *)(a1 + 80)) {
      unsigned int v10 = *(_DWORD *)(a1 + 76);
    }
    else {
      unsigned int v10 = *(_WORD *)(*(void *)(a1 + 16) + 18) & 0x3F;
    }
    uint64_t v16 = v10;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
    {
      uint64_t v55 = v5;
      int v56 = __cxa_guard_acquire(&qword_1EBCBE588);
      uint64_t v5 = v55;
      if (v56)
      {
        unint64_t v57 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v57 = 0xFF51AFD7ED558CCDLL;
        }
        v55[176] = v57;
        __cxa_guard_release(&qword_1EBCBE588);
        uint64_t v5 = v55;
      }
    }
    unint64_t v17 = 0x9DDFEA08EB382D69 * (v5[176] + 8 * v16);
    unint64_t v85 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v17 ^ (v17 >> 47))) ^ ((0x9DDFEA08EB382D69 * (v17 ^ (v17 >> 47))) >> 47));
    unint64_t v84 = sub_1CD48BB60(v87, (uint64_t)v87 + 8 * v88);
    unint64_t v18 = sub_1CD48B888((uint64_t *)__p, (uint64_t *)&v86, (uint64_t *)&v85, (uint64_t *)&v84);
LABEL_25:
    unint64_t v23 = v18;
    goto LABEL_26;
  }
  if (v4 != 84)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
    {
      uint64_t v58 = v4;
      int v59 = __cxa_guard_acquire(&qword_1EBCBE588);
      uint64_t v4 = v58;
      if (v59)
      {
        unint64_t v60 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v60 = 0xFF51AFD7ED558CCDLL;
        }
        qword_1EBCBE580 = v60;
        __cxa_guard_release(&qword_1EBCBE588);
        uint64_t v4 = v58;
      }
    }
    unint64_t v19 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 + ((8 * v4 + 0x7FFFFFF20) & 0x7FFFFFFF8))) ^ ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 + ((8 * v4 + 0x7FFFFFF20) & 0x7FFFFFFF8))) >> 47));
    __p[0] = (void *)(0x9DDFEA08EB382D69 * (v19 ^ (v19 >> 47)));
    unint64_t v20 = **(void **)(a1 + 16);
    unint64_t v21 = HIDWORD(v20);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
    {
      int v61 = v20;
      int v62 = __cxa_guard_acquire(&qword_1EBCBE588);
      LODWORD(v20) = v61;
      if (v62)
      {
        unint64_t v63 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v63 = 0xFF51AFD7ED558CCDLL;
        }
        qword_1EBCBE580 = v63;
        __cxa_guard_release(&qword_1EBCBE588);
        LODWORD(v20) = v61;
      }
    }
    unint64_t v22 = 0x9DDFEA08EB382D69 * ((qword_1EBCBE580 + 8 * v20) ^ v21);
    unint64_t v86 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
    unint64_t v85 = sub_1CD48BB60(v87, (uint64_t)v87 + 8 * v88);
    unint64_t v18 = sub_1CD48BA0C((uint64_t *)__p, (uint64_t *)&v86, (uint64_t *)&v85);
    goto LABEL_25;
  }
  uint64_t v14 = *(void *)(v3 - 32);
  if (v14
    && !*(unsigned char *)(v14 + 16)
    && *(void *)(v14 + 24) == *(void *)(v3 + 72)
    && (*(unsigned char *)(v14 + 33) & 0x20) != 0)
  {
    uint64_t v35 = *(unsigned int *)(v14 + 36);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
    {
      uint64_t v70 = v35;
      int v71 = __cxa_guard_acquire(&qword_1EBCBE588);
      uint64_t v35 = v70;
      if (v71)
      {
        unint64_t v72 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v72 = 0xFF51AFD7ED558CCDLL;
        }
        qword_1EBCBE580 = v72;
        __cxa_guard_release(&qword_1EBCBE588);
        uint64_t v35 = v70;
      }
    }
    int v36 = &unk_1EBCBE000;
    unint64_t v37 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * qword_1EBCBE580 + 0x47D98F9BA24F77C0) ^ ((0x9DDFEA08EB382D69 * qword_1EBCBE580
                                                                             + 0x47D98F9BA24F77C0) >> 47));
    __p[0] = (void *)(0x9DDFEA08EB382D69 * (v37 ^ (v37 >> 47)));
    unint64_t v38 = **(void **)(a1 + 16);
    unint64_t v39 = HIDWORD(v38);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
    {
      uint64_t v73 = v35;
      int v74 = __cxa_guard_acquire(&qword_1EBCBE588);
      int v36 = &unk_1EBCBE000;
      uint64_t v35 = v73;
      if (v74)
      {
        unint64_t v75 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v75 = 0xFF51AFD7ED558CCDLL;
        }
        qword_1EBCBE580 = v75;
        __cxa_guard_release(&qword_1EBCBE588);
        int v36 = (void *)&unk_1EBCBE000;
        uint64_t v35 = v73;
      }
    }
    unint64_t v40 = 0x9DDFEA08EB382D69 * ((v36[176] + 8 * v38) ^ v39);
    unint64_t v86 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v39 ^ (v40 >> 47) ^ v40)) ^ ((0x9DDFEA08EB382D69 * (v39 ^ (v40 >> 47) ^ v40)) >> 47));
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
    {
      uint64_t v76 = v35;
      unsigned int v77 = v36;
      int v78 = __cxa_guard_acquire(&qword_1EBCBE588);
      int v36 = v77;
      uint64_t v35 = v76;
      if (v78)
      {
        unint64_t v79 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v79 = 0xFF51AFD7ED558CCDLL;
        }
        v77[176] = v79;
        __cxa_guard_release(&qword_1EBCBE588);
        int v36 = v77;
        uint64_t v35 = v76;
      }
    }
    unint64_t v41 = 0x9DDFEA08EB382D69 * (v36[176] + 8 * v35);
    unint64_t v85 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47))) ^ ((0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47))) >> 47));
    uint64_t v44 = *(void *)(a1 + 88);
    uint64_t v43 = a1 + 88;
    uint64_t v42 = v44;
    char v45 = *(unsigned char *)(v43 + 23);
    int v46 = v45;
    if (v45 >= 0) {
      uint64_t v47 = v43;
    }
    else {
      uint64_t v47 = v42;
    }
    uint64_t v48 = *(void *)(v43 + 8);
    uint64_t v49 = v45 & 0x7F;
    if (v46 >= 0) {
      uint64_t v48 = v49;
    }
    unint64_t v84 = sub_1CBFFD360(v47, v47 + v48);
    unint64_t v83 = sub_1CD48BB60(v87, (uint64_t)v87 + 8 * v88);
    unint64_t v18 = sub_1CD48B940((uint64_t *)__p, (uint64_t *)&v86, (uint64_t *)&v85, (uint64_t *)&v84, (uint64_t *)&v83);
    goto LABEL_25;
  }
  if (*(char *)(a1 + 111) < 0)
  {
    sub_1CB8BDF7C((uint64_t)__p, *(const void **)(a1 + 88), *(void *)(a1 + 96));
    uint64_t v15 = (8 * *(unsigned __int8 *)(*(void *)(a1 + 16) + 16) + 0x7FFFFFF20) & 0x7FFFFFFF8;
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 88);
    uint64_t v82 = *(void *)(a1 + 104);
    uint64_t v15 = 448;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v64 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v64 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v64;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  int v25 = &unk_1EBCBE000;
  unint64_t v26 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 + v15)) ^ ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 + v15)) >> 47));
  unint64_t v86 = 0x9DDFEA08EB382D69 * (v26 ^ (v26 >> 47));
  unint64_t v27 = **(void **)(a1 + 16);
  unint64_t v28 = HIDWORD(v27);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v65 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v25 = &unk_1EBCBE000;
    if (v65)
    {
      unint64_t v66 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v66 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v66;
      __cxa_guard_release(&qword_1EBCBE588);
      int v25 = (void *)&unk_1EBCBE000;
    }
  }
  unint64_t v29 = 0x9DDFEA08EB382D69 * ((v25[176] + 8 * v27) ^ v28);
  unint64_t v85 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v28 ^ (v29 >> 47) ^ v29)) ^ ((0x9DDFEA08EB382D69 * (v28 ^ (v29 >> 47) ^ v29)) >> 47));
  unint64_t v30 = **(void **)(a1 + 16);
  unint64_t v31 = HIDWORD(v30);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    unint64_t v67 = v25;
    int v68 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v25 = v67;
    if (v68)
    {
      unint64_t v69 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v69 = 0xFF51AFD7ED558CCDLL;
      }
      v67[176] = v69;
      __cxa_guard_release(&qword_1EBCBE588);
      int v25 = v67;
    }
  }
  unint64_t v32 = 0x9DDFEA08EB382D69 * ((v25[176] + 8 * v30) ^ v31);
  unint64_t v84 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v31 ^ (v32 >> 47) ^ v32)) ^ ((0x9DDFEA08EB382D69 * (v31 ^ (v32 >> 47) ^ v32)) >> 47));
  if (v82 >= 0) {
    uint64_t v33 = __p;
  }
  else {
    uint64_t v33 = (void **)__p[0];
  }
  unsigned int v34 = (void *)(HIBYTE(v82) & 0x7F);
  if (v82 < 0) {
    unsigned int v34 = __p[1];
  }
  unint64_t v83 = sub_1CBFFD360((uint64_t)v33, (uint64_t)v34 + (void)v33);
  unint64_t v80 = sub_1CD48BB60(v87, (uint64_t)v87 + 8 * v88);
  unint64_t v23 = sub_1CD48B940((uint64_t *)&v86, (uint64_t *)&v85, (uint64_t *)&v84, (uint64_t *)&v83, (uint64_t *)&v80);
  if (SHIBYTE(v82) < 0) {
    operator delete(__p[0]);
  }
LABEL_26:
  if (v87 != v89) {
    free(v87);
  }
  return v23;
}

void *sub_1CBFFCBA0(void *a1, uint64_t *a2, void *__dst, unint64_t a4, uint64_t a5)
{
  uint64_t __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *std::string __dst = a5;
    return __dst + 1;
  }
  else
  {
    unint64_t v8 = a4 - (void)__dst;
    memcpy(__dst, &__src, a4 - (void)__dst);
    uint64_t v9 = *a2;
    if (*a2)
    {
      uint64_t v10 = a1[9];
      uint64_t v11 = a1[11];
      uint64_t v12 = a1[1];
      uint64_t v13 = a1[12];
      uint64_t v14 = a1[13];
      uint64_t v16 = a1[6];
      uint64_t v15 = a1[7];
      uint64_t v17 = a1[14];
      unint64_t v18 = v17 ^ (0xB492B66FBE98F273 * __ROR8__(v10 + a1[8] + v11 + v12, 37));
      uint64_t v19 = a1[5];
      uint64_t v20 = v19 + v11 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v10 + v16, 42);
      uint64_t v21 = __ROR8__(v14 + a1[10], 33);
      uint64_t v22 = *a1 - 0x4B6D499041670D8DLL * v13;
      uint64_t v23 = v14 + v22;
      uint64_t v25 = a1[2];
      uint64_t v24 = a1[3];
      v21 *= 0xB492B66FBE98F273;
      uint64_t v26 = v21 + v17 + a1[4];
      uint64_t v27 = v22 + v12 + v25;
      uint64_t v28 = v19 + v16 + v26;
      a1[12] = __ROR8__(v23 + v24 + v18, 21) + v22 + __ROR8__(v27, 44);
      a1[13] = v28 + v15;
      a1[14] = __ROR8__(v28, 44) + v26 + __ROR8__(v25 + v20 + v26 + v15, 21);
      a1[10] = v18;
      a1[11] = v27 + v24;
      a1[8] = v21;
      a1[9] = v20;
      uint64_t v29 = v9 + 64;
    }
    else
    {
      unint64_t v30 = a1[15];
      uint64_t v31 = __ROR8__(v30 ^ 0xB492B66FBE98F273, 49);
      unint64_t v32 = v30 ^ (v30 >> 47);
      uint64_t v33 = a1[1];
      uint64_t v34 = v33 + v30 + v31;
      uint64_t v35 = a1[6];
      uint64_t v36 = a1[7];
      uint64_t v37 = a1[5];
      uint64_t v38 = v37 + v31 - 0x4B6D499041670D8DLL * __ROR8__(v35 + v30 - 0x4B6D499041670D8DLL * v30, 42);
      unint64_t v39 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v30 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v30 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      unint64_t v40 = 0x9DDFEA08EB382D69
          * (v30 ^ (((0x9DDFEA08EB382D69 * (v32 ^ (0xB492B66FBE98F273 * v30))) ^ v30) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v32 ^ (0xB492B66FBE98F273 * v30))));
      unint64_t v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
      unint64_t v42 = 0xB492B66FBE98F273 * __ROR8__(v32 - 0x622015F714C7D297 * (v39 ^ (v39 >> 47)), 33);
      uint64_t v43 = *a1 - 0x6D8ED9027DD26057 * v30;
      uint64_t v45 = a1[2];
      uint64_t v44 = a1[3];
      uint64_t v46 = v43 + v33 + v45;
      unint64_t v47 = v41 ^ (0xB492B66FBE98F273 * __ROR8__(v34, 37));
      unint64_t v48 = v42 + a1[4] + v41;
      a1[8] = v42;
      a1[9] = v38;
      a1[10] = v47;
      a1[11] = v46 + v44;
      a1[12] = __ROR8__(v46, 44) + v43 + __ROR8__(v43 + v32 + v44 + v47, 21);
      a1[13] = v37 + v35 + v48 + v36;
      a1[14] = __ROR8__(v38 + v45 + v36 + v48, 21) + v48 + __ROR8__(v37 + v35 + v48, 44);
      uint64_t v29 = 64;
    }
    *a2 = v29;
    if ((unint64_t)a1 + 8 - v8 <= a4)
    {
      memcpy(a1, (char *)&__src + v8, 8 - v8);
      return (void *)((char *)a1 + 8 - v8);
    }
  }
  return a1;
}

uint64_t sub_1CBFFCE40@<X0>(void *a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (a2 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (a2 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
  uint64_t v4 = __ROR8__(a2 ^ 0xB492B66FBE98F273, 49);
  unint64_t v5 = a2 ^ (a2 >> 47);
  unint64_t v6 = 0x9DDFEA08EB382D69
     * (a2 ^ (((0x9DDFEA08EB382D69 * (v5 ^ (0xB492B66FBE98F273 * a2))) ^ a2) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                         * (v5 ^ (0xB492B66FBE98F273
                                                                                                * a2))));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  uint64_t v8 = v4 + a2;
  uint64_t v10 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v11 = v4 - 0x4B6D499041670D8DLL * __ROR8__(v10 + a2 - 0x4B6D499041670D8DLL * a2, 42);
  uint64_t v12 = a1[1];
  unint64_t v13 = (0xB492B66FBE98F273 * __ROR8__(v8 + v12, 37)) ^ v7;
  unint64_t v14 = v5 - 0x622015F714C7D297 * (v3 ^ (v3 >> 47));
  uint64_t v15 = *a1 - 0x6D8ED9027DD26057 * a2;
  uint64_t v17 = a1[4];
  uint64_t v16 = a1[5];
  unint64_t v18 = v11 + v16;
  unint64_t v19 = 0xB492B66FBE98F273 * __ROR8__(v14, 33);
  unint64_t v20 = v15 + v5;
  uint64_t v23 = a1 + 2;
  uint64_t v21 = a1[2];
  uint64_t v22 = v23[1];
  uint64_t v24 = v15 + v12 + v21;
  unint64_t v25 = v17 + v7 + v19;
  uint64_t result = __ROR8__(v25 + v21 + v18 + v9, 21);
  unint64_t v27 = v16 + v10 + v25;
  a3[6] = result + v25 + __ROR8__(v27, 44);
  a3[4] = __ROR8__(v20 + v22 + v13, 21) + v15 + __ROR8__(v24, 44);
  a3[5] = v27 + v9;
  a3[2] = v13;
  a3[3] = v24 + v22;
  *a3 = v19;
  a3[1] = v18;
  return result;
}

unint64_t *sub_1CBFFCF68(unint64_t *result, void *a2)
{
  unint64_t v2 = result[1];
  unint64_t v4 = result[2];
  unint64_t v3 = result[3];
  unint64_t v5 = 0xB492B66FBE98F273 * __ROR8__(v2 + *result + v3 + a2[1], 37);
  *uint64_t result = v5;
  unint64_t v6 = result[4];
  unint64_t v7 = result[5];
  uint64_t v8 = __ROR8__(v6 + v2 + a2[6], 42);
  unint64_t v9 = result[6];
  unint64_t v10 = v9 ^ v5;
  *uint64_t result = v10;
  result[1] = 0xB492B66FBE98F273 * v8;
  unint64_t v11 = 0xB492B66FBE98F273 * v8 + v3 + a2[5];
  unint64_t v12 = 0xB492B66FBE98F273 * __ROR8__(v7 + v4, 33);
  result[1] = v11;
  result[2] = v12;
  result[3] = 0xB492B66FBE98F273 * v6;
  result[4] = v7 + v10;
  uint64_t v13 = *a2 - 0x4B6D499041670D8DLL * v6;
  result[3] = v13;
  uint64_t v14 = a2[3];
  unint64_t v15 = __ROR8__(v13 + v14 + v7 + v10, 21);
  result[4] = v15;
  uint64_t v16 = __ROR8__(a2[1] + a2[2] + v13, 44);
  result[3] = a2[1] + a2[2] + v13 + v14;
  result[4] = v15 + v13 + v16;
  result[5] = v12 + v9;
  unint64_t v17 = a2[2] + v11;
  result[6] = v17;
  unint64_t v18 = a2[4] + v12 + v9;
  result[5] = v18;
  uint64_t v19 = a2[7];
  unint64_t v20 = __ROR8__(v18 + v19 + v17, 21);
  result[6] = v20;
  unint64_t v21 = v20 + v18 + __ROR8__(a2[5] + a2[6] + v18, 44);
  result[5] = a2[5] + a2[6] + v18 + v19;
  result[6] = v21;
  result[2] = v10;
  *uint64_t result = v12;
  return result;
}

unint64_t sub_1CBFFD088(char *a1, uint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v15 = a2;
  unint64_t v9 = sub_1CBFFCBA0(a1, &v15, a3, (unint64_t)a4, *a5);
  uint64_t v16 = v15;
  unint64_t v10 = (char *)sub_1CBFFCBA0(a1, &v16, v9, (unint64_t)a4, *a6);
  uint64_t v11 = v16;
  if (!v16) {
    return sub_1CBAE06B8(a1, v10 - a1, *((void *)a1 + 15));
  }
  uint64_t v14 = v10;
  if (v10 != a1 && v10 != a4) {
    sub_1CBFFD1E8(a1, v10, a4);
  }
  sub_1CBFFCF68((unint64_t *)a1 + 8, a1);
  return sub_1CBFFD150((void *)a1 + 8, (unint64_t)&v14[v11 - (void)a1]);
}

unint64_t sub_1CBFFD150(void *a1, unint64_t a2)
{
  unint64_t v2 = 0x9DDFEA08EB382D69
     * (a1[5] ^ ((0x9DDFEA08EB382D69 * (a1[5] ^ a1[3])) >> 47) ^ (0x9DDFEA08EB382D69 * (a1[5] ^ a1[3])));
  unint64_t v3 = 0x9DDFEA08EB382D69
     * (a1[6] ^ ((0x9DDFEA08EB382D69 * (a1[6] ^ a1[4])) >> 47) ^ (0x9DDFEA08EB382D69 * (a1[6] ^ a1[4])));
  uint64_t v4 = *a1 - 0x4B6D499041670D8DLL * (a2 ^ (a2 >> 47)) - 0x622015F714C7D297 * (v3 ^ (v3 >> 47));
  unint64_t v5 = 0x9DDFEA08EB382D69
     * (v4 ^ (a1[2] - 0x4B6D499041670D8DLL * (a1[1] ^ (a1[1] >> 47)) - 0x622015F714C7D297 * (v2 ^ (v2 >> 47))));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
}

char *sub_1CBFFD1E8(char *__src, char *a2, char *a3)
{
  if (__src + 1 == a2)
  {
    char v5 = *__src;
    int64_t v6 = a3 - a2;
    if (a3 != a2) {
      memmove(__src, a2, a3 - a2);
    }
    unint64_t v7 = &__src[v6];
    char *v7 = v5;
    return v7;
  }
  if (a2 + 1 == a3)
  {
    char v8 = *(a3 - 1);
    unint64_t v7 = __src + 1;
    size_t v9 = a3 - 1 - __src;
    if (v9) {
      memmove(__src + 1, __src, v9);
    }
    *uint64_t __src = v8;
    return v7;
  }

  return sub_1CBFFD29C(__src, a2, a3);
}

unsigned char *sub_1CBFFD29C(unsigned char *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2 - a1;
  if (a2 - a1 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      uint64_t v4 = 0;
      do
      {
        char v5 = a1[v4];
        a1[v4] = a2[v4];
        uint64_t v6 = (uint64_t)&a1[v4 + 1];
        a2[v4] = v5;
        uint64_t v7 = (uint64_t)&a2[++v4];
      }
      while ((unsigned char *)v6 != a2 && v7 != (void)a3);
    }
  }
  else
  {
    uint64_t v9 = a3 - a2;
    uint64_t v10 = a2 - a1;
    do
    {
      uint64_t v11 = v10;
      uint64_t v10 = v9;
      uint64_t v9 = v11 % v9;
    }
    while (v9);
    if (v10)
    {
      unint64_t v12 = &a1[v10];
      do
      {
        char v14 = *--v12;
        char v13 = v14;
        uint64_t v15 = &v12[v3];
        uint64_t v16 = v12;
        do
        {
          unint64_t v17 = v16;
          uint64_t v16 = v15;
          *unint64_t v17 = *v15;
          uint64_t v18 = a3 - v15;
          BOOL v19 = __OFSUB__(v3, v18);
          uint64_t v21 = v3 - v18;
          char v20 = (v21 < 0) ^ v19;
          uint64_t v15 = &a1[v21];
          if (v20) {
            uint64_t v15 = &v16[v3];
          }
        }
        while (v15 != v12);
        *uint64_t v16 = v13;
      }
      while (v12 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

unint64_t sub_1CBFFD360(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = sub_1CBF65470();
  if (a1 == a2)
  {
    unint64_t v6 = 0;
    return sub_1CBAE06B8(__src, v6, v4);
  }
  else
  {
    for (uint64_t i = 0; i != 64; ++i)
    {
      unint64_t v6 = i + 1;
      *((unsigned char *)__src + i) = *(unsigned char *)(a1 + i);
      uint64_t v7 = a1 + i + 1;
      if (v7 == a2) {
        return sub_1CBAE06B8(__src, v6, v4);
      }
    }
    sub_1CBFFCE40(__src, v4, v18);
    uint64_t v8 = a1 + 64;
    unint64_t v9 = 64;
    if (v8 != a2)
    {
      do
      {
        unint64_t v10 = -1;
        do
        {
          uint64_t v11 = v8 + v10;
          unint64_t v12 = (char *)__src + v10++;
          v12[1] = *(unsigned char *)(v11 + 1);
          uint64_t v13 = v11 + 2;
        }
        while (v11 + 2 != a2 && v10 < 0x3F);
        unint64_t v14 = v10 + 1;
        if (((v10 + 1) & 0x7FFFFFFFFFFFFFBFLL) != 0)
        {
          if (v10 == 62)
          {
            char v16 = v20;
            memmove((char *)__src + 1, __src, 0x3FuLL);
            LOBYTE(__src[0]) = v16;
          }
          else if (v10)
          {
            sub_1CBFFD29C(__src, (unsigned char *)__src + v14, &v21);
          }
          else
          {
            char v17 = __src[0];
            memmove(__src, (char *)__src + 1, 0x3FuLL);
            char v20 = v17;
          }
        }
        v8 += v14;
        sub_1CBFFCF68(v18, __src);
        v9 += v10 + 1;
      }
      while (v13 != a2);
    }
    return sub_1CBFFD150(v18, v9);
  }
}

uint64_t sub_1CBFFD518(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      unint64_t v9 = 0;
      int v10 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v9) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          unint64_t v9 = v7;
        }
        unsigned int v13 = v6 + v10++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 16 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_7;
        }
      }
      uint64_t result = 0;
      if (v9) {
        uint64_t v7 = v9;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t *sub_1CBFFD5B4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  if (4 * v6 + 4 >= (3 * v7))
  {
    int v10 = *(uint64_t **)a1;
    unint64_t v11 = (2 * v7 - 1) | ((unint64_t)(2 * v7 - 1) >> 1);
    unint64_t v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
    int v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
    if ((v13 + 1) > 0x40) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 64;
    }
    *(_DWORD *)(a1 + 16) = v14;
    uint64_t v15 = (uint64_t *)operator new(16 * v14, (std::align_val_t)8uLL);
    *(void *)a1 = v15;
    if (v10)
    {
      sub_1CBFF6BC0(a1, v10, &v10[2 * v7]);
      MEMORY[0x1D25D9CD0](v10, 8);
      LODWORD(v17) = *(_DWORD *)(a1 + 16);
      uint64_t v15 = *(uint64_t **)a1;
    }
    else
    {
      uint64_t v16 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v17 = *(unsigned int *)(a1 + 16);
      do
      {
        v15[v16] = -4096;
        v16 += 2;
      }
      while (2 * v17 != v16);
    }
    uint64_t v8 = *a3;
    int v18 = v17 - 1;
    unsigned int v19 = ((*a3 >> 4) ^ (*a3 >> 9)) & v18;
    a4 = &v15[2 * v19];
    uint64_t v20 = *a4;
    if (*a3 == *a4) {
      goto LABEL_5;
    }
    uint64_t v21 = 0;
    int v22 = 1;
    while (v20 != -4096)
    {
      if (v21) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = v20 == -8192;
      }
      if (v23) {
        uint64_t v21 = a4;
      }
      unsigned int v24 = v19 + v22++;
      unsigned int v19 = v24 & v18;
      a4 = &v15[2 * v19];
      uint64_t v20 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v21) {
      a4 = v21;
    }
  }
  else if ((int)v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_1CBFF6AF4(a1, *(_DWORD *)(a1 + 16));
    unint64_t v25 = 0;
    sub_1CBFFD518((uint64_t *)a1, a3, &v25);
    a4 = v25;
  }
  uint64_t v8 = *a4;
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_DWORD *sub_1CBFFD778@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)a1;
    unsigned int v10 = (37 * *a2) & (v8 - 1);
    uint64_t result = (_DWORD *)(*(void *)a1 + 8 * v10);
    int v12 = *result;
    if (*a2 == *result)
    {
LABEL_17:
      char v16 = 0;
      goto LABEL_9;
    }
    int v13 = 0;
    int v14 = 1;
    while (v12 != -1)
    {
      if (v13) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v12 == -2;
      }
      if (v17) {
        int v13 = result;
      }
      unsigned int v18 = v10 + v14++;
      unsigned int v10 = v18 & (v8 - 1);
      uint64_t result = (_DWORD *)(v9 + 8 * v10);
      int v12 = *result;
      if (*a2 == *result) {
        goto LABEL_17;
      }
    }
    if (v13) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = result;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t result = sub_1CB83889C(a1, (uint64_t)a2, a2, v15);
  *uint64_t result = *a2;
  result[1] = *a3;
  uint64_t v9 = *(void *)a1;
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  char v16 = 1;
LABEL_9:
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v9 + 8 * v8;
  *(unsigned char *)(a4 + 16) = v16;
  return result;
}

void sub_1CBFFD868(void ***a1)
{
  int v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    int v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = sub_1CD48A868(v4 - 15);
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_1CBFFD8EC(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x222222222222223) {
      abort();
    }
    int v6 = result;
    uint64_t v7 = 15 * a4;
    uint64_t result = operator new(120 * a4);
    *int v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    while (a2 != a3)
    {
      uint64_t v8 = sub_1CD48AE0C((uint64_t)result, a2);
      a2 = (long long *)((char *)a2 + 120);
      uint64_t result = (void *)(v8 + 120);
    }
    v6[1] = result;
  }
  return result;
}

uint64_t sub_1CBFFD974()
{
  char v3 = 0;
  uint64_t v4 = &v3;
  int v2 = 2;
  v1.n128_u64[0] = (unint64_t)"disable similarity matching, and outlining, across branches for debugging purposes.";
  v1.n128_u64[1] = 83;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::DisableBranches, "no-ir-sim-branch-matching", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::DisableBranches, &dword_1CB82C000);
  char v3 = 0;
  uint64_t v4 = &v3;
  int v2 = 2;
  v1.n128_u64[0] = (unint64_t)"disable outlining indirect calls.";
  v1.n128_u64[1] = 33;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::DisableIndirectCalls, "no-ir-sim-indirect-calls", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::DisableIndirectCalls, &dword_1CB82C000);
  char v3 = 0;
  uint64_t v4 = &v3;
  int v2 = 2;
  v1.n128_u64[0] = (unint64_t)"only allow matching call instructions if the name and type signature match.";
  v1.n128_u64[1] = 75;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::MatchCallsByName, "ir-sim-calls-by-name", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::MatchCallsByName, &dword_1CB82C000);
  char v3 = 0;
  uint64_t v4 = &v3;
  int v2 = 2;
  v1.n128_u64[0] = (unint64_t)"Don't match or outline intrinsics";
  v1.n128_u64[1] = 33;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::DisableIntrinsics, "no-ir-sim-intrinsics", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::DisableIntrinsics, &dword_1CB82C000);
}

uint64_t llvm::RecurrenceDescriptor::isIntegerRecurrenceKind(unsigned int a1)
{
  return (a1 < 0x11) & (0x183FEu >> a1);
}

uint64_t llvm::RecurrenceDescriptor::isFloatingPointRecurrenceKind(unsigned int a1)
{
  return (a1 > 0x10) | (0x7C00u >> a1) & 1;
}

uint64_t llvm::RecurrenceDescriptor::isArithmeticRecurrenceKind(unsigned int a1)
{
  return (a1 < 0xF) & (0x4C06u >> a1);
}

uint64_t llvm::RecurrenceDescriptor::AddReductionVar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 2 && *(void *)(a1 + 40) == **(void **)(a3 + 32)) {
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
  }
  return 0;
}

uint64_t llvm::RecurrenceDescriptor::isRecurrenceInstr@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  unsigned int v7 = a4;
  switch(*(unsigned char *)(a3 + 16))
  {
    case ')':
    case '+':
      BOOL v10 = a4 == 1;
      goto LABEL_25;
    case '*':
    case ',':
      BOOL v12 = a4 == 10;
      goto LABEL_10;
    case '-':
      BOOL v10 = a4 == 2;
      goto LABEL_25;
    case '.':
    case '1':
      BOOL v12 = a4 == 11;
      goto LABEL_10;
    case '/':
    case '0':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
LABEL_41:
      *(unsigned char *)a7 = 0;
      goto LABEL_42;
    case '8':
      BOOL v10 = a4 == 4;
      goto LABEL_25;
    case '9':
      BOOL v10 = a4 == 3;
      goto LABEL_25;
    case ':':
      BOOL v10 = a4 == 5;
LABEL_25:
      char v16 = v10;
      *(unsigned char *)a7 = v16;
LABEL_42:
      *(void *)(a7 + 8) = a3;
      *(_DWORD *)(a7 + 16) = 0;
      *(void *)(a7 + 24) = 0;
      return result;
    default:
      switch(*(unsigned char *)(a3 + 16))
      {
        case 'Q':
        case 'R':
        case 'T':
          goto LABEL_4;
        case 'S':
          int v17 = *(_DWORD *)(a5 + 16);
          uint64_t v18 = *(void *)(a5 + 24);
          *(unsigned char *)a7 = 1;
          *(void *)(a7 + 8) = a3;
          *(_DWORD *)(a7 + 16) = v17;
          *(void *)(a7 + 24) = v18;
          return result;
        case 'U':
          if ((a4 & 0xFFFFFFFE) == 0xA)
          {
            return llvm::RecurrenceDescriptor::isConditionalRdxPattern(a4, a3, a7);
          }
LABEL_4:
          if ((a4 - 15) <= 1)
          {
            return llvm::RecurrenceDescriptor::isSelectCmpPattern(result, a2, a3, a5, a7);
          }
          if ((a4 - 6) < 4) {
            goto LABEL_18;
          }
          if ((~a6 & 0xA) == 0)
          {
            if ((a4 & 0xFFFFFFFE) != 0xC) {
              goto LABEL_39;
            }
LABEL_18:
            return llvm::RecurrenceDescriptor::isMinMaxPattern(a3, v7, a5, a7);
          }
          if (sub_1CB845E74(a3)
            && (*(unsigned char *)(a3 + 17) & 4) != 0
            && (v7 & 0xFFFFFFFE) == 0xC
            && (*(unsigned char *)(a3 + 17) & 0x10) != 0)
          {
            goto LABEL_18;
          }
LABEL_39:
          uint64_t result = sub_1CBFFFD84(a3);
          if (!result) {
            goto LABEL_41;
          }
          BOOL v12 = v7 == 14;
LABEL_10:
          char v13 = v12;
          char v14 = *(unsigned char *)(a3 + 17);
          *(unsigned char *)a7 = v13;
          if ((v14 & 2) != 0) {
            uint64_t v15 = 0;
          }
          else {
            uint64_t v15 = a3;
          }
          *(void *)(a7 + 8) = a3;
          *(_DWORD *)(a7 + 16) = 0;
          *(void *)(a7 + 24) = v15;
          return result;
        default:
          goto LABEL_41;
      }
  }
}

BOOL llvm::RecurrenceDescriptor::hasMultipleUsesOf(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  int v3 = *(_DWORD *)(a1 + 20);
  if ((v3 & 0x40000000) == 0)
  {
    uint64_t v4 = v3 & 0x7FFFFFF;
    int v5 = (uint64_t *)(a1 - 32 * v4);
    if ((v3 & 0x7FFFFFF) != 0) {
      goto LABEL_3;
    }
    return 0;
  }
  int v5 = *(uint64_t **)(a1 - 8);
  uint64_t v4 = v3 & 0x7FFFFFF;
  if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 0) {
    return 0;
  }
LABEL_3:
  unsigned int v6 = 0;
  unsigned int v7 = &v5[4 * v4];
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v10 = *((unsigned int *)a2 + 5);
  int v11 = *((_DWORD *)a2 + 4) - 1;
  if (v8 == *a2) {
    unsigned int v12 = *((_DWORD *)a2 + 5);
  }
  else {
    unsigned int v12 = *((_DWORD *)a2 + 4);
  }
  char v13 = (void *)(v8 + 8 * v12);
  uint64_t v14 = a2[1];
  do
  {
    uint64_t v15 = *v5;
    if (*(unsigned __int8 *)(*v5 + 16) <= 0x1Bu) {
      uint64_t v15 = 0;
    }
    if (v14 == v9)
    {
      if (v10)
      {
        uint64_t v16 = 0;
        while (*(void *)(v9 + v16) != v15)
        {
          v16 += 8;
          if (8 * v10 == v16)
          {
            unsigned int v17 = *((_DWORD *)a2 + 5);
            goto LABEL_29;
          }
        }
        uint64_t v26 = (void *)(v9 + v16);
        unsigned int v17 = *((_DWORD *)a2 + 5);
        uint64_t v14 = *a2;
      }
      else
      {
        unsigned int v17 = 0;
LABEL_29:
        uint64_t v14 = *a2;
        uint64_t v26 = (void *)(v9 + 8 * v10);
      }
    }
    else
    {
      unsigned int v18 = v11 & ((v15 >> 4) ^ (v15 >> 9));
      unsigned int v19 = (void *)(v8 + 8 * v18);
      uint64_t v20 = *v19;
      if (*v19 == -1)
      {
        uint64_t v21 = 0;
LABEL_31:
        if (v21) {
          unsigned int v19 = v21;
        }
        uint64_t v25 = *v19;
      }
      else
      {
        uint64_t v21 = 0;
        int v22 = 1;
        while (v20 != v15)
        {
          if (v21) {
            BOOL v23 = 0;
          }
          else {
            BOOL v23 = v20 == -2;
          }
          if (v23) {
            uint64_t v21 = v19;
          }
          unsigned int v24 = v18 + v22++;
          unsigned int v18 = v24 & v11;
          unsigned int v19 = (void *)(v8 + 8 * (v24 & v11));
          uint64_t v20 = *v19;
          if (*v19 == -1) {
            goto LABEL_31;
          }
        }
        uint64_t v25 = v15;
      }
      if (v25 == v15) {
        uint64_t v26 = v19;
      }
      else {
        uint64_t v26 = v13;
      }
      unsigned int v17 = *((_DWORD *)a2 + 5);
      uint64_t v14 = a2[1];
    }
    if (v14 != v9) {
      unsigned int v17 = *((_DWORD *)a2 + 4);
    }
    if (v26 != (void *)(v14 + 8 * v17)) {
      ++v6;
    }
    BOOL result = v6 > a3;
    v5 += 4;
  }
  while (v6 <= a3 && v5 != v7);
  return result;
}

BOOL sub_1CBFFFD84(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 143;
}

uint64_t llvm::RecurrenceDescriptor::isConditionalRdxPattern@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  LOBYTE(v3) = 0;
  if (a2 && *(unsigned char *)(a2 + 16) == 85)
  {
    uint64_t v4 = *(void *)(a2 - 96);
    unsigned int v5 = *(unsigned __int8 *)(v4 + 16);
    if (v4) {
      BOOL v6 = v5 >= 0x1C;
    }
    else {
      BOOL v6 = 0;
    }
    if (!v6 || v5 - 83 < 0xFFFFFFFE) {
      goto LABEL_13;
    }
    uint64_t v3 = *(void *)(v4 + 8);
    if (v3)
    {
      if (*(void *)(v3 + 8))
      {
LABEL_13:
        LOBYTE(v3) = 0;
        goto LABEL_14;
      }
      uint64_t v8 = *(void *)(a2 - 64);
      uint64_t v9 = *(void *)(a2 - 32);
      unsigned int v10 = *(unsigned __int8 *)(v8 + 16);
      unsigned int v11 = *(unsigned __int8 *)(v9 + 16);
      if (v10 == 83)
      {
        if ((v11 == 83) == v11 > 0x1B) {
          goto LABEL_13;
        }
      }
      else
      {
        LOBYTE(v3) = 0;
        if (v10 < 0x1C || v11 != 83) {
          goto LABEL_14;
        }
        unsigned int v11 = *(unsigned __int8 *)(v8 + 16);
        uint64_t v9 = *(void *)(a2 - 64);
      }
      if (v11 - 41 > 0x11) {
        goto LABEL_13;
      }
      if (v11 == 44 || v11 == 42)
      {
        if (!*(void *)(v9 - 64) || !*(void *)(v9 - 32)) {
          goto LABEL_13;
        }
        if (*(unsigned __int8 *)(v9 + 17) > 0xFDu)
        {
          LOBYTE(v3) = result == 10;
          goto LABEL_14;
        }
        unsigned int v11 = *(unsigned __int8 *)(v9 + 16);
      }
      if (v11 == 5)
      {
        if (*(_WORD *)(v9 + 18) != 18) {
          goto LABEL_13;
        }
        unsigned int v12 = (void *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF));
        if (!*v12 || !v12[4]) {
          goto LABEL_13;
        }
      }
      else if (v11 != 46 || !*(void *)(v9 - 64) || !*(void *)(v9 - 32))
      {
        goto LABEL_13;
      }
      unsigned int v13 = *(unsigned __int8 *)(v9 + 17);
      LOBYTE(v3) = result == 11 && v13 > 0xFD;
    }
  }
LABEL_14:
  *(unsigned char *)a3 = v3;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  return result;
}

uint64_t llvm::RecurrenceDescriptor::isSelectCmpPattern@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = a3;
  uint64_t v7 = result;
  int v19 = 0;
  uint64_t v9 = *(void *)(a3 + 8);
  if (v9)
  {
    if (!*(void *)(v9 + 8) && *(unsigned __int8 *)(a3 + 16) - 81 <= 1)
    {
      int v19 = *(_WORD *)(a3 + 18) & 0x3F;
      uint64_t v10 = *(void *)(v9 + 24);
      if (v10)
      {
        if (*(unsigned char *)(v10 + 16) == 85)
        {
          int v11 = *(_DWORD *)(a4 + 16);
          char v12 = 1;
          uint64_t v5 = v10;
          goto LABEL_7;
        }
      }
    }
  }
  unsigned int v18 = &v19;
  BOOL result = sub_1CD48D1F4(&v18, a3);
  if (!result) {
    goto LABEL_21;
  }
  if (*(unsigned char *)(*(void *)(v5 - 64) + 16) == 83) {
    uint64_t v13 = *(void *)(v5 - 64);
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void *)(v5 - 32);
  if (v13 != a2)
  {
    if (*(unsigned char *)(v14 + 16) == 83) {
      uint64_t v15 = *(void *)(v5 - 32);
    }
    else {
      uint64_t v15 = 0;
    }
    if (v15 != a2) {
      goto LABEL_21;
    }
    uint64_t v14 = *(void *)(v5 - 64);
  }
  BOOL result = llvm::Loop::isLoopInvariant(v7, v14);
  if (!result)
  {
LABEL_21:
    char v12 = 0;
    int v11 = 0;
    goto LABEL_7;
  }
  int v16 = *(_DWORD *)(v5 + 20);
  if ((v16 & 0x40000000) != 0) {
    uint64_t v17 = *(void *)(v5 - 8);
  }
  else {
    uint64_t v17 = v5 - 32 * (v16 & 0x7FFFFFF);
  }
  if (*(unsigned char *)(*(void *)v17 + 16) == 81) {
    int v11 = 15;
  }
  else {
    int v11 = 16;
  }
  char v12 = 1;
LABEL_7:
  *(unsigned char *)a5 = v12;
  *(void *)(a5 + 8) = v5;
  *(_DWORD *)(a5 + 16) = v11;
  *(void *)(a5 + 24) = 0;
  return result;
}

uint64_t llvm::RecurrenceDescriptor::isMinMaxPattern@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = result;
  if (a2 <= 0xD && ((1 << a2) & 0x33C0) != 0)
  {
    int v37 = 0;
    uint64_t v7 = *(void *)(result + 8);
    if (v7)
    {
      if (!*(void *)(v7 + 8) && *(unsigned __int8 *)(result + 16) - 81 <= 1)
      {
        int v37 = *(_WORD *)(result + 18) & 0x3F;
        uint64_t v8 = *(void *)(v7 + 24);
        if (v8)
        {
          if (*(unsigned char *)(v8 + 16) == 85)
          {
            int v9 = *(_DWORD *)(a3 + 16);
            LOBYTE(v10) = 1;
            uint64_t v4 = v8;
LABEL_29:
            *(unsigned char *)a4 = v10;
            *(void *)(a4 + 8) = v4;
            *(_DWORD *)(a4 + 16) = v9;
            goto LABEL_30;
          }
        }
      }
    }
    if (*(unsigned char *)(result + 16) != 84
      || (uint64_t v11 = *(void *)(result - 32)) == 0
      || *(unsigned char *)(v11 + 16)
      || *(void *)(v11 + 24) != *(void *)(result + 72)
      || (*(_DWORD *)(v11 + 32) & 0x2000) == 0)
    {
      *(void *)uint64_t v36 = &v37;
      BOOL result = sub_1CD48D1F4((int **)v36, result);
      if ((result & 1) == 0) {
        goto LABEL_19;
      }
    }
    BOOL result = sub_1CC002EAC((uint64_t)v36, v4);
    if (result)
    {
      int v9 = 0;
      BOOL v12 = a2 == 8;
      goto LABEL_26;
    }
    BOOL result = sub_1CC002F68((uint64_t)v36, v4);
    if (result)
    {
      int v9 = 0;
      BOOL v12 = a2 == 9;
      goto LABEL_26;
    }
    BOOL result = sub_1CC003024((uint64_t)v36, v4);
    if (result)
    {
      int v9 = 0;
      BOOL v12 = a2 == 7;
      goto LABEL_26;
    }
    BOOL result = sub_1CC0030E0((uint64_t)v36, v4);
    if (result)
    {
      int v9 = 0;
      BOOL v12 = a2 == 6;
      goto LABEL_26;
    }
    int v13 = *(unsigned __int8 *)(v4 + 16);
    if (v13 != 85)
    {
      *(_DWORD *)uint64_t v36 = 202;
      *(void *)&v36[4] = 0;
      if (v13 == 84)
      {
        uint64_t v10 = *(void *)(v4 - 32);
        if (!v10) {
          goto LABEL_20;
        }
        if (!*(unsigned char *)(v10 + 16) && *(void *)(v10 + 24) == *(void *)(v4 + 72))
        {
          if (*(_DWORD *)(v10 + 36) != *(_DWORD *)v36)
          {
            int v9 = 0;
            int v20 = *(_DWORD *)(v10 + 36);
            BOOL v12 = a2 == 13 && v20 == 193;
            goto LABEL_26;
          }
          goto LABEL_73;
        }
      }
      goto LABEL_19;
    }
    LOBYTE(v10) = 0;
    uint64_t v14 = *(void *)(v4 - 96);
    if (!v14 || *(unsigned char *)(v14 + 16) != 82) {
      goto LABEL_71;
    }
    uint64_t v15 = *(void *)(v4 - 64);
    uint64_t v16 = *(void *)(v4 - 32);
    uint64_t v17 = *(void *)(v14 - 64);
    uint64_t v18 = *(void *)(v14 - 32);
    if (v15 == v17 && v16 == v18 || v15 == v18 && v16 == v17)
    {
      int v19 = *(_WORD *)(v14 + 18) & 0x3E;
      if (v15 == v17)
      {
        if (v19 == 4) {
          goto LABEL_73;
        }
      }
      else if (v19 == 10)
      {
        goto LABEL_73;
      }
    }
    uint64_t v21 = *(void *)(v4 - 64);
    uint64_t v22 = *(void *)(v4 - 32);
    uint64_t v23 = *(void *)(v14 - 64);
    uint64_t v24 = *(void *)(v14 - 32);
    if (v21 == v23 && v22 == v24 || v21 == v24 && v22 == v23)
    {
      int v25 = *(_WORD *)(v14 + 18) & 0x3E;
      if (v21 == v23)
      {
        if (v25 == 2) {
          goto LABEL_75;
        }
      }
      else if (v25 == 12)
      {
        goto LABEL_75;
      }
    }
    uint64_t v26 = *(void *)(v4 - 64);
    uint64_t v27 = *(void *)(v4 - 32);
    uint64_t v28 = *(void *)(v14 - 64);
    uint64_t v29 = *(void *)(v14 - 32);
    if ((v26 != v28 || v27 != v29) && (v26 != v29 || v27 != v28)) {
      goto LABEL_64;
    }
    int v30 = *(_WORD *)(v14 + 18) & 0x3E;
    if (v26 == v28)
    {
      if (v30 != 12)
      {
LABEL_64:
        uint64_t v31 = *(void *)(v4 - 64);
        uint64_t v32 = *(void *)(v4 - 32);
        uint64_t v33 = *(void *)(v14 - 64);
        uint64_t v34 = *(void *)(v14 - 32);
        if (v31 == v33 && v32 == v34 || (LOBYTE(v10) = 0, v31 == v34) && v32 == v33)
        {
          int v35 = *(_WORD *)(v14 + 18) & 0x3E;
          if (v31 != v33)
          {
            if (v35 == 4) {
              goto LABEL_75;
            }
LABEL_19:
            LOBYTE(v10) = 0;
LABEL_20:
            int v9 = 0;
            goto LABEL_29;
          }
          if (v35 != 10) {
            goto LABEL_19;
          }
LABEL_75:
          int v9 = 0;
          BOOL v12 = a2 == 13;
LABEL_26:
          LOBYTE(v10) = v12;
          goto LABEL_29;
        }
LABEL_71:
        int v9 = 0;
        goto LABEL_29;
      }
    }
    else if (v30 != 2)
    {
      goto LABEL_64;
    }
LABEL_73:
    int v9 = 0;
    BOOL v12 = a2 == 12;
    goto LABEL_26;
  }
  *(unsigned char *)a4 = 0;
  *(void *)(a4 + 8) = result;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_30:
  *(void *)(a4 + 24) = 0;
  return result;
}

uint64_t llvm::RecurrenceDescriptor::isFixedOrderRecurrence(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 40) == **(void **)(a2 + 32) && (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 2) {
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
  }
  return 0;
}

void llvm::RecurrenceDescriptor::getReductionOpChain(llvm::RecurrenceDescriptor *this@<X0>, llvm::PHINode *a2@<X1>, uint64_t a3@<X8>)
{
  v40[4] = *MEMORY[0x1E4F143B8];
  uint64_t v38 = v40;
  uint64_t v39 = 0x400000000;
  int v5 = *((_DWORD *)this + 8);
  char v6 = 1;
  int v7 = 13;
  switch(v5)
  {
    case 2:
      int v7 = 17;
      goto LABEL_10;
    case 3:
      int v7 = 29;
      goto LABEL_10;
    case 4:
      int v7 = 28;
      goto LABEL_10;
    case 5:
      int v7 = 30;
      goto LABEL_10;
    case 6:
    case 7:
    case 8:
    case 9:
    case 15:
      char v6 = 0;
      int v5 = 2;
      int v7 = 53;
      break;
    case 10:
    case 14:
      int v7 = 14;
      goto LABEL_10;
    case 11:
      int v7 = 18;
LABEL_10:
      int v5 = 1;
      break;
    case 12:
    case 13:
    case 16:
      char v6 = 0;
      int v5 = 2;
      int v7 = 54;
      break;
    default:
      break;
  }
  int v10 = 0;
  uint64_t v11 = *((void *)this + 3);
  if (v11 && *(unsigned char *)(v11 + 16) == 83)
  {
    int v12 = *(_DWORD *)(v11 + 20);
    if ((v12 & 0x7FFFFFF) != 2) {
      goto LABEL_42;
    }
    if ((v12 & 0x40000000) != 0) {
      int v13 = *(llvm::PHINode ***)(v11 - 8);
    }
    else {
      int v13 = (llvm::PHINode **)(v11 - 64);
    }
    uint64_t v14 = *v13;
    if (*((unsigned __int8 *)*v13 + 16) <= 0x1Bu) {
      uint64_t v14 = 0;
    }
    uint64_t v15 = (uint64_t)v13[4];
    if (*(unsigned __int8 *)(v15 + 16) <= 0x1Bu) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v15;
    }
    if (v14 == a2)
    {
      int v10 = 1;
      if (v6) {
        goto LABEL_26;
      }
      goto LABEL_30;
    }
    if ((llvm::PHINode *)v11 != a2) {
      goto LABEL_42;
    }
    int v10 = 1;
    uint64_t v11 = (uint64_t)v14;
  }
  if (v6)
  {
LABEL_26:
    if (!sub_1CBFFFD84(v11) && *(unsigned __int8 *)(v11 + 16) - 28 != v7) {
      goto LABEL_42;
    }
    goto LABEL_35;
  }
LABEL_30:
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  unsigned int matched = llvm::matchSelectPattern(v11, (uint64_t)&v37, &v36, 0, 0);
  if (matched <= 8 && ((1 << matched) & 0x181) != 0) {
    goto LABEL_42;
  }
LABEL_35:
  uint64_t v18 = *(void *)(*((void *)this + 3) + 8);
  if (v18)
  {
    uint64_t v19 = *(void *)(v18 + 8);
    if (v19)
    {
      if (!*(void *)(v19 + 8))
      {
        int v20 = v10 + v5;
        uint64_t v21 = *((void *)a2 + 1);
        uint64_t v22 = v21;
        while (v22)
        {
          uint64_t v22 = *(void *)(v22 + 8);
          if (!--v20)
          {
            if (v22) {
              break;
            }
            if (v21)
            {
              while (1)
              {
                uint64_t v23 = *(void *)(v21 + 24);
                int v24 = *(unsigned __int8 *)(v23 + 16);
                char v25 = v24 == 85 ? 1 : v6;
                if (v24 != 83 && (v25 & 1) != 0) {
                  break;
                }
                uint64_t v21 = *(void *)(v21 + 8);
                if (!v21) {
                  goto LABEL_53;
                }
              }
            }
            else
            {
LABEL_53:
              uint64_t v23 = 0;
            }
            if (v23 == v11)
            {
              unsigned int v29 = v39;
LABEL_79:
              if (v29 >= HIDWORD(v39)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v38 + v29) = v11;
              unsigned int v33 = v39 + 1;
              BOOL v34 = v39 == -1;
              LODWORD(v39) = v39 + 1;
              *(void *)a3 = a3 + 16;
              *(void *)(a3 + 8) = 0x400000000;
              if (!v34 && &v38 != (void **)a3)
              {
                if (v38 == v40)
                {
                  if (v33 >= 5) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  memcpy((void *)(a3 + 16), v40, 8 * v33);
                  *(_DWORD *)(a3 + 8) = v33;
                }
                else
                {
                  *(void *)a3 = v38;
                  int v35 = HIDWORD(v39);
                  *(_DWORD *)(a3 + 8) = v33;
                  *(_DWORD *)(a3 + 12) = v35;
                  uint64_t v38 = v40;
                  HIDWORD(v39) = 0;
                }
                LODWORD(v39) = 0;
              }
              goto LABEL_43;
            }
LABEL_55:
            if (!v23) {
              break;
            }
            if (v6)
            {
              if (!sub_1CBFFFD84(v23) && *(unsigned __int8 *)(v23 + 16) - 28 != v7) {
                break;
              }
            }
            else
            {
              uint64_t v36 = 0;
              uint64_t v37 = 0;
              unsigned int v26 = llvm::matchSelectPattern(v23, (uint64_t)&v37, &v36, 0, 0);
              if (v26 <= 8 && ((1 << v26) & 0x181) != 0) {
                break;
              }
            }
            uint64_t v27 = *(void *)(v23 + 8);
            int v28 = v5;
            while (v27)
            {
              uint64_t v27 = *(void *)(v27 + 8);
              if (!--v28)
              {
                if (v27) {
                  goto LABEL_42;
                }
                if (v39 >= (unint64_t)HIDWORD(v39)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v38 + v39) = v23;
                unsigned int v29 = v39 + 1;
                LODWORD(v39) = v39 + 1;
                uint64_t v30 = *(void *)(v23 + 8);
                if (v30)
                {
                  while (1)
                  {
                    uint64_t v23 = *(void *)(v30 + 24);
                    int v31 = *(unsigned __int8 *)(v23 + 16);
                    char v32 = v31 == 85 ? 1 : v6;
                    if (v31 != 83 && (v32 & 1) != 0) {
                      break;
                    }
                    uint64_t v30 = *(void *)(v30 + 8);
                    if (!v30) {
                      goto LABEL_74;
                    }
                  }
                }
                else
                {
LABEL_74:
                  uint64_t v23 = 0;
                }
                if (v23 != v11) {
                  goto LABEL_55;
                }
                goto LABEL_79;
              }
            }
            break;
          }
        }
      }
    }
  }
LABEL_42:
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x400000000;
LABEL_43:
  if (v38 != v40) {
    free(v38);
  }
}

llvm::ValueHandleBase *llvm::InductionDescriptor::InductionDescriptor(llvm::ValueHandleBase *this, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 6;
  if (a2)
  {
    *((void *)this + 2) = a2;
    if ((a2 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      llvm::ValueHandleBase::AddToUseList(this);
    }
  }
  *((void *)this + 7) = (char *)this + 72;
  *((_DWORD *)this + 6) = a3;
  *((void *)this + 4) = a4;
  *((void *)this + 5) = a5;
  *((void *)this + 6) = a6;
  *((void *)this + 8) = 0x200000000;
  if (a7)
  {
    uint64_t v14 = *(unsigned int *)(a7 + 8);
    if (v14)
    {
      unsigned int v15 = 0;
      uint64_t v16 = *(void **)a7;
      uint64_t v17 = 8 * v14;
      do
      {
        if (v15 >= *((_DWORD *)this + 17)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*((void *)this + 7) + 8 * v15) = *v16;
        unsigned int v15 = *((_DWORD *)this + 16) + 1;
        *((_DWORD *)this + 16) = v15;
        ++v16;
        v17 -= 8;
      }
      while (v17);
    }
  }
  return this;
}

uint64_t llvm::InductionDescriptor::isFPInductionPHI(llvm::InductionDescriptor *this, llvm::PHINode *a2, const llvm::Loop *a3, llvm::ScalarEvolution *a4, llvm::InductionDescriptor *a5)
{
  v91[2] = *MEMORY[0x1E4F143B8];
  if (**((void **)a2 + 4) != *((void *)this + 5)) {
    return 0;
  }
  int v5 = *((_DWORD *)this + 5);
  if ((v5 & 0x7FFFFFF) != 2) {
    return 0;
  }
  int v7 = (v5 & 0x40000000) != 0
     ? (llvm::InductionDescriptor *)*((void *)this - 1)
     : (llvm::InductionDescriptor *)((char *)this - 64);
  uint64_t v8 = *((void *)v7 + 4 * *((unsigned int *)this + 15));
  uint64_t v10 = *((void *)a2 + 7);
  uint64_t v9 = *((void *)a2 + 8);
  if (v9 == v10)
  {
    uint64_t v11 = *((unsigned int *)a2 + 19);
    int v12 = (void *)(v9 + 8 * v11);
    if (v11)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 8 * v11;
      while (*(void *)(v9 + v13) != v8)
      {
        v13 += 8;
        if (v14 == v13) {
          goto LABEL_24;
        }
      }
      int v12 = (void *)(v9 + v13);
    }
LABEL_24:
    uint64_t v23 = *((void *)a2 + 8);
  }
  else
  {
    uint64_t v15 = *((unsigned int *)a2 + 18);
    int v16 = v15 - 1;
    unsigned int v17 = (v15 - 1) & ((v8 >> 4) ^ (v8 >> 9));
    int v12 = (void *)(v9 + 8 * v17);
    uint64_t v18 = *v12;
    if (*v12 == -1)
    {
      uint64_t v19 = 0;
LABEL_26:
      if (v19) {
        int v12 = v19;
      }
      if (*v12 != v8) {
        int v12 = (void *)(v9 + 8 * v15);
      }
    }
    else
    {
      uint64_t v19 = 0;
      int v20 = 1;
      while (v18 != v8)
      {
        if (v19) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v18 == -2;
        }
        if (v21) {
          uint64_t v19 = v12;
        }
        unsigned int v22 = v17 + v20++;
        unsigned int v17 = v22 & v16;
        int v12 = (void *)(v9 + 8 * (v22 & v16));
        uint64_t v18 = *v12;
        if (*v12 == -1) {
          goto LABEL_26;
        }
      }
    }
    uint64_t v23 = *((void *)a2 + 7);
  }
  uint64_t v24 = 72;
  if (v9 == v23) {
    uint64_t v24 = 76;
  }
  if (v12 == (void *)(v9 + 8 * *(unsigned int *)((char *)a2 + v24)))
  {
    if ((v5 & 0x40000000) != 0)
    {
      unsigned int v26 = (int32x2_t *****)*((void *)this - 1);
      char v25 = (llvm::InductionDescriptor *)(v26 + 4);
    }
    else
    {
      unsigned int v26 = (int32x2_t *****)((char *)this - 64);
      char v25 = (llvm::InductionDescriptor *)((char *)this - 32);
    }
  }
  else
  {
    char v25 = (v5 & 0x40000000) != 0
        ? (llvm::InductionDescriptor *)*((void *)this - 1)
        : (llvm::InductionDescriptor *)((char *)this - 64);
    unsigned int v26 = (int32x2_t *****)((char *)v25 + 32);
  }
  unint64_t v27 = *(void *)v25;
  unsigned int v28 = *(unsigned __int8 *)(*(void *)v25 + 16);
  BOOL v29 = v27 && v28 >= 0x1C;
  if (!v29 || v28 - 59 < 0xFFFFFFEE) {
    return 0;
  }
  int v31 = *v26;
  if (v28 == 44)
  {
    if (*(llvm::InductionDescriptor **)(v27 - 64) == this)
    {
      uint64_t v32 = *(void *)(v27 - 32);
      goto LABEL_56;
    }
    return 0;
  }
  if (v28 != 42) {
    return 0;
  }
  uint64_t v32 = *(void *)(v27 - 32);
  if (*(llvm::InductionDescriptor **)(v27 - 64) != this)
  {
    if ((llvm::InductionDescriptor *)v32 == this)
    {
      uint64_t v32 = *(void *)(v27 - 64);
      goto LABEL_56;
    }
    return 0;
  }
LABEL_56:
  if (!v32) {
    return 0;
  }
  if (*(unsigned __int8 *)(v32 + 16) >= 0x1Cu)
  {
    unsigned int v33 = (unsigned int *)((char *)a2 + 76);
    BOOL v34 = (unsigned int *)((char *)a2 + 72);
    uint64_t v35 = *(void *)(v32 + 40);
    if (v9 == v23)
    {
      uint64_t v36 = *v33;
      uint64_t v37 = (void *)(v9 + 8 * v36);
      if (v36)
      {
        uint64_t v38 = 0;
        uint64_t v39 = 8 * v36;
        while (*(void *)(v9 + v38) != v35)
        {
          v38 += 8;
          if (v39 == v38) {
            goto LABEL_76;
          }
        }
        uint64_t v37 = (void *)(v9 + v38);
      }
LABEL_76:
      uint64_t v10 = *((void *)a2 + 8);
    }
    else
    {
      int v40 = *v34 - 1;
      unsigned int v41 = v40 & ((v35 >> 4) ^ (v35 >> 9));
      uint64_t v37 = (void *)(v9 + 8 * v41);
      uint64_t v42 = *v37;
      if (*v37 == -1)
      {
        uint64_t v43 = 0;
LABEL_134:
        if (v43) {
          uint64_t v37 = v43;
        }
        if (*v37 != v35)
        {
          if (v9 == v10) {
            unint64_t v83 = v33;
          }
          else {
            unint64_t v83 = v34;
          }
          uint64_t v37 = (void *)(v9 + 8 * *v83);
        }
      }
      else
      {
        uint64_t v43 = 0;
        int v44 = 1;
        while (v42 != v35)
        {
          if (v43) {
            BOOL v45 = 0;
          }
          else {
            BOOL v45 = v42 == -2;
          }
          if (v45) {
            uint64_t v43 = v37;
          }
          unsigned int v46 = v41 + v44++;
          unsigned int v41 = v46 & v40;
          uint64_t v37 = (void *)(v9 + 8 * (v46 & v40));
          uint64_t v42 = *v37;
          if (*v37 == -1) {
            goto LABEL_134;
          }
        }
      }
    }
    unint64_t v47 = v9 == v10 ? v33 : v34;
    if (v37 != (void *)(v9 + 8 * *v47)) {
      return 0;
    }
  }
  unint64_t Unknown = llvm::ScalarEvolution::getUnknown(a3, (llvm::Value *)v32);
  unint64_t v85 = 0;
  unint64_t v86 = 0;
  uint64_t v84 = 6;
  if (v31)
  {
    unint64_t v86 = v31;
    if (((unint64_t)v31 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v84);
      int v31 = v86;
    }
  }
  LODWORD(v87) = 3;
  *((void *)&v87 + 1) = Unknown;
  long long v88 = v27;
  unsigned int v89 = v91;
  uint64_t v90 = 0x200000000;
  uint64_t v50 = (int32x2_t ****)*((void *)a4 + 2);
  if (v50 != v31)
  {
    if (v50 != (int32x2_t ****)-4096 && v50 && v50 != (int32x2_t ****)-8192)
    {
      unint64_t v71 = *(void *)a4 & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v71 = *((void *)a4 + 1);
      unint64_t v72 = (unint64_t *)*((void *)a4 + 1);
      if (v72)
      {
        *unint64_t v72 = *v72 & 7 | v71;
      }
      else
      {
        uint64_t v73 = *((void *)a4 + 2);
        int v74 = ***(int32x2_t ****)v73;
        unint64_t v75 = (unint64_t)v74[303];
        if (v75 <= v71)
        {
          uint64_t v76 = v74[305].u32[0];
          if (v75 + 16 * v76 > v71)
          {
            unsigned int v77 = v76 - 1;
            LODWORD(v78) = v77 & ((v73 >> 4) ^ (v73 >> 9));
            unint64_t v79 = (uint64_t *)(v75 + 16 * v78);
            uint64_t v80 = *v79;
            if (v73 == *v79)
            {
LABEL_131:
              *unint64_t v79 = -8192;
              v74[304] = vadd_s32(v74[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v73 = *((void *)a4 + 2);
            }
            else
            {
              int v81 = 1;
              while (v80 != -4096)
              {
                int v82 = v78 + v81++;
                uint64_t v78 = v82 & v77;
                uint64_t v80 = *(void *)(v75 + 16 * v78);
                if (v73 == v80)
                {
                  unint64_t v79 = (uint64_t *)(v75 + 16 * v78);
                  goto LABEL_131;
                }
              }
            }
            *(unsigned char *)(v73 + 17) &= ~1u;
          }
        }
      }
      int v31 = v86;
    }
    *((void *)a4 + 2) = v31;
    if (v31 != (int32x2_t ****)-4096 && v31 != (int32x2_t ****)-8192 && v31 != 0)
    {
      uint64_t v52 = v84;
      int v53 = (void *)(v84 & 0xFFFFFFFFFFFFFFF8);
      *((void *)a4 + 1) = *(void *)(v84 & 0xFFFFFFFFFFFFFFF8);
      *int v53 = a4;
      *(void *)a4 = v52 & 0xFFFFFFFFFFFFFFF8 | *(void *)a4 & 7;
      unint64_t v54 = (unint64_t *)*((void *)a4 + 1);
      if (v54) {
        *unint64_t v54 = *v54 & 7 | ((unint64_t)a4 + 8);
      }
    }
  }
  long long v55 = v88;
  *(_OWORD *)((char *)a4 + 24) = v87;
  *(_OWORD *)((char *)a4 + 40) = v55;
  int v56 = v89;
  if (&v84 != (uint64_t *)a4)
  {
    if (v89 == v91)
    {
      unint64_t v57 = (void **)((char *)a4 + 56);
      int v58 = v90;
      uint64_t v59 = *((unsigned int *)a4 + 16);
      if (v59 >= v90)
      {
        if (v90) {
          memmove(*v57, v91, 8 * v90);
        }
      }
      else
      {
        if (*((_DWORD *)a4 + 17) < v90)
        {
          *((_DWORD *)a4 + 16) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v59)
        {
          memmove(*v57, v91, 8 * v59);
          unint64_t v57 = (void **)((char *)a4 + 56);
        }
        else
        {
          uint64_t v59 = 0;
        }
        if (v59 != v90) {
          memcpy((char *)*v57 + 8 * v59, (char *)v89 + 8 * v59, 8 * v90 - 8 * v59);
        }
      }
      *((_DWORD *)a4 + 16) = v58;
    }
    else
    {
      if (*((llvm::ScalarEvolution **)a4 + 7) != (llvm::ScalarEvolution *)((char *)a4 + 72))
      {
        free(*((void **)a4 + 7));
        int v56 = v89;
      }
      *((void *)a4 + 7) = v56;
      *((void *)a4 + 8) = v90;
      unsigned int v89 = v91;
      HIDWORD(v90) = 0;
    }
    LODWORD(v90) = 0;
    int v56 = v89;
  }
  if (v56 != v91) {
    free(v56);
  }
  if (v86 && v86 != (int32x2_t ****)-8192 && v86 != (int32x2_t ****)-4096)
  {
    unint64_t v60 = v84 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v84 & 0xFFFFFFFFFFFFFFF8) = v85;
    if (v85)
    {
      *unint64_t v85 = *v85 & 7 | v60;
    }
    else
    {
      int v61 = v86;
      int v62 = ***v86;
      unint64_t v63 = (unint64_t)v62[303];
      if (v63 <= v60)
      {
        uint64_t v64 = v62[305].u32[0];
        if (v63 + 16 * v64 > v60)
        {
          unsigned int v65 = v64 - 1;
          LODWORD(v66) = v65 & ((v86 >> 4) ^ (v86 >> 9));
          unint64_t v67 = (int32x2_t *****)(v63 + 16 * v66);
          int v68 = *v67;
          if (v86 == *v67)
          {
LABEL_117:
            *unint64_t v67 = (int32x2_t ****)-8192;
            v62[304] = vadd_s32(v62[304], (int32x2_t)0x1FFFFFFFFLL);
            int v61 = v86;
          }
          else
          {
            int v69 = 1;
            while (v68 != (int32x2_t ****)-4096)
            {
              int v70 = v66 + v69++;
              uint64_t v66 = v70 & v65;
              int v68 = *(int32x2_t *****)(v63 + 16 * v66);
              if (v86 == v68)
              {
                unint64_t v67 = (int32x2_t *****)(v63 + 16 * v66);
                goto LABEL_117;
              }
            }
          }
          *((unsigned char *)v61 + 17) &= ~1u;
        }
      }
    }
  }
  return 1;
}

uint64_t llvm::InductionDescriptor::isInductionPHI(llvm::InductionDescriptor *this, llvm::PHINode *a2, int8x16_t *a3, llvm::PredicatedScalarEvolution *a4, llvm::InductionDescriptor *a5)
{
  unsigned int v5 = *(unsigned __int8 *)(*(void *)this + 8);
  if (v5 > 0xF || ((1 << v5) & 0xA00D) == 0) {
    goto LABEL_22;
  }
  if (v5 > 6)
  {
    int v13 = (int)a5;
    uint64_t SCEV = llvm::PredicatedScalarEvolution::getSCEV(a3, this);
    uint64_t v15 = SCEV;
    if (*(_WORD *)(SCEV + 24) == 7) {
      uint64_t AsAddRec = SCEV;
    }
    else {
      uint64_t AsAddRec = 0;
    }
    if (v13 && !AsAddRec) {
      uint64_t AsAddRec = llvm::PredicatedScalarEvolution::getAsAddRec(a3, this);
    }
    if (AsAddRec)
    {
      if (v15 != AsAddRec && *(_WORD *)(v15 + 24) == 14) {
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
      }
      char isInductionPHI = llvm::InductionDescriptor::isInductionPHI((unint64_t)this, (uint64_t)a2, a3[5].i64[1], (uint64_t)a4, AsAddRec);
      return isInductionPHI & 1;
    }
LABEL_22:
    char isInductionPHI = 0;
    return isInductionPHI & 1;
  }
  uint64_t v11 = (const llvm::Loop *)a3[5].i64[1];

  return llvm::InductionDescriptor::isFPInductionPHI(this, a2, v11, a4, a5);
}

uint64_t llvm::InductionDescriptor::isInductionPHI(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((*(unsigned __int8 *)(*(void *)a1 + 8) | 2) != 0xF) {
    return 0;
  }
  uint64_t SCEVIter = a5;
  if (a5) {
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)(a3 + 104);
  unsigned int v8 = *(_DWORD *)(a3 + 120);
  if (!v8) {
    goto LABEL_9;
  }
  unsigned int v9 = (v8 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  uint64_t v10 = v7 + 48 * v9;
  uint64_t v11 = *(void *)(v10 + 24);
  if (v11 != a1)
  {
    int v12 = 1;
    while (v11 != -4096)
    {
      unsigned int v13 = v9 + v12++;
      unsigned int v9 = v13 & (v8 - 1);
      uint64_t v10 = v7 + 48 * v9;
      uint64_t v11 = *(void *)(v10 + 24);
      if (v11 == a1) {
        goto LABEL_10;
      }
    }
LABEL_9:
    uint64_t v10 = v7 + 48 * v8;
  }
LABEL_10:
  if (v10 == v7 + 48 * v8 || (uint64_t SCEVIter = *(void *)(v10 + 40)) == 0) {
    uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a3, a1);
  }
LABEL_13:
  uint64_t result = 0;
  if (SCEVIter && *(_WORD *)(SCEVIter + 24) == 7)
  {
    if (*(void *)(SCEVIter + 48) == a2) {
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
    }
    return 0;
  }
  return result;
}

void sub_1CC002B9C(llvm::SmallPtrSetImplBase *this, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  if (a2 != a4)
  {
    char v6 = a2;
    unsigned int v9 = *(unint64_t **)this;
    unsigned int v8 = (unint64_t *)*((void *)this + 1);
    while (1)
    {
      unint64_t v10 = *v6;
      uint64_t v11 = *((unsigned int *)this + 5);
      if (v8 != v9) {
        break;
      }
      if (v11)
      {
        int v12 = 0;
        uint64_t v13 = 8 * v11;
        uint64_t v14 = v9;
        while (*v14 != v10)
        {
          if (*v14 == -2) {
            int v12 = v14;
          }
          ++v14;
          v13 -= 8;
          if (!v13)
          {
            if (!v12) {
              goto LABEL_11;
            }
            unint64_t *v12 = v10;
            --*((_DWORD *)this + 6);
            goto LABEL_13;
          }
        }
        goto LABEL_13;
      }
LABEL_11:
      unsigned int v15 = *((_DWORD *)this + 4);
      if (v11 >= v15) {
        goto LABEL_20;
      }
      *((_DWORD *)this + 5) = v11 + 1;
      v9[v11] = v10;
LABEL_13:
      unsigned int v9 = *(unint64_t **)this;
      unsigned int v8 = (unint64_t *)*((void *)this + 1);
      int v16 = v6 + 1;
      while (1)
      {
        char v6 = a3;
        if (v16 == a3) {
          break;
        }
        unint64_t v17 = *v16++;
        if (v17 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          char v6 = v16 - 1;
          break;
        }
      }
      if (v6 == a4) {
        return;
      }
    }
    unsigned int v15 = *((_DWORD *)this + 4);
LABEL_20:
    if (3 * v15 <= 4 * ((int)v11 - *((_DWORD *)this + 6)))
    {
      if (v15 >= 0x40) {
        v15 *= 2;
      }
      else {
        unsigned int v15 = 128;
      }
    }
    else if (v15 - v11 >= v15 >> 3)
    {
      goto LABEL_22;
    }
    llvm::SmallPtrSetImplBase::Grow(this, v15);
    unsigned int v15 = *((_DWORD *)this + 4);
    unsigned int v8 = (unint64_t *)*((void *)this + 1);
LABEL_22:
    unsigned int v18 = v15 - 1;
    unsigned int v19 = (v15 - 1) & ((v10 >> 4) ^ (v10 >> 9));
    int v20 = &v8[v19];
    unint64_t v21 = *v20;
    if (*v20 == -1)
    {
      unsigned int v22 = 0;
LABEL_34:
      if (v22) {
        unsigned int v26 = v22;
      }
      else {
        unsigned int v26 = v20;
      }
      if (*v26 != v10)
      {
        if (*v26 == -2) {
          --*((_DWORD *)this + 6);
        }
        else {
          ++*((_DWORD *)this + 5);
        }
        *unsigned int v26 = v10;
      }
    }
    else
    {
      unsigned int v22 = 0;
      int v23 = 1;
      while (v21 != v10)
      {
        if (v22) {
          BOOL v24 = 0;
        }
        else {
          BOOL v24 = v21 == -2;
        }
        if (v24) {
          unsigned int v22 = v20;
        }
        unsigned int v25 = v19 + v23++;
        unsigned int v19 = v25 & v18;
        int v20 = &v8[v25 & v18];
        unint64_t v21 = *v20;
        if (*v20 == -1) {
          goto LABEL_34;
        }
      }
    }
    goto LABEL_13;
  }
}

uint64_t sub_1CC002D7C(llvm::ValueHandleBase *a1, uint64_t a2)
{
  uint64_t v3 = *((void *)a1 + 2);
  if (v3 != a2)
  {
    if (v3 && v3 != -8192 && v3 != -4096)
    {
      unint64_t v5 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v5 = *((void *)a1 + 1);
      char v6 = (unint64_t *)*((void *)a1 + 1);
      if (v6)
      {
        *char v6 = *v6 & 7 | v5;
      }
      else
      {
        uint64_t v7 = *((void *)a1 + 2);
        unsigned int v8 = ***(int32x2_t ****)v7;
        unint64_t v9 = (unint64_t)v8[303];
        if (v9 <= v5)
        {
          uint64_t v10 = v8[305].u32[0];
          if (v9 + 16 * v10 > v5)
          {
            unsigned int v11 = v10 - 1;
            LODWORD(v12) = v11 & ((v7 >> 4) ^ (v7 >> 9));
            uint64_t v13 = (uint64_t *)(v9 + 16 * v12);
            uint64_t v14 = *v13;
            if (v7 == *v13)
            {
LABEL_18:
              *uint64_t v13 = -8192;
              v8[304] = vadd_s32(v8[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v7 = *((void *)a1 + 2);
            }
            else
            {
              int v15 = 1;
              while (v14 != -4096)
              {
                int v16 = v12 + v15++;
                uint64_t v12 = v16 & v11;
                uint64_t v14 = *(void *)(v9 + 16 * v12);
                if (v7 == v14)
                {
                  uint64_t v13 = (uint64_t *)(v9 + 16 * v12);
                  goto LABEL_18;
                }
              }
            }
            *(unsigned char *)(v7 + 17) &= ~1u;
          }
        }
      }
    }
    *((void *)a1 + 2) = a2;
    if (a2 != -8192 && a2 != -4096 && a2) {
      llvm::ValueHandleBase::AddToUseList(a1);
    }
  }
  return a2;
}

BOOL sub_1CC002EAC(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 != 85)
  {
    if (v2 == 84)
    {
      uint64_t v3 = *(void *)(a2 - 32);
      if (v3)
      {
        if (!*(unsigned char *)(v3 + 16) && *(void *)(v3 + 24) == *(void *)(a2 + 72) && (*(unsigned char *)(v3 + 33) & 0x20) != 0) {
          return *(_DWORD *)(v3 + 36) == 306;
        }
      }
    }
    return 0;
  }
  BOOL result = 0;
  uint64_t v6 = *(void *)(a2 - 96);
  if (v6 && *(unsigned char *)(v6 + 16) == 81)
  {
    uint64_t v7 = *(void *)(a2 - 64);
    uint64_t v8 = *(void *)(a2 - 32);
    uint64_t v9 = *(void *)(v6 - 64);
    uint64_t v10 = *(void *)(v6 - 32);
    BOOL v11 = v7 == v9 && v8 == v10;
    if (v11 || (v7 == v10 ? (BOOL v12 = v8 == v9) : (BOOL v12 = 0), v12))
    {
      uint64_t v13 = *(_WORD *)(v6 + 18) & 0x3F;
      if (v7 != v9) {
        LODWORD(v13) = dword_1CFAC35F0[v13];
      }
      return (v13 & 0xFFFE) == 36;
    }
    return 0;
  }
  return result;
}

BOOL sub_1CC002F68(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 != 85)
  {
    if (v2 == 84)
    {
      uint64_t v3 = *(void *)(a2 - 32);
      if (v3)
      {
        if (!*(unsigned char *)(v3 + 16) && *(void *)(v3 + 24) == *(void *)(a2 + 72) && (*(unsigned char *)(v3 + 33) & 0x20) != 0) {
          return *(_DWORD *)(v3 + 36) == 305;
        }
      }
    }
    return 0;
  }
  BOOL result = 0;
  uint64_t v6 = *(void *)(a2 - 96);
  if (v6 && *(unsigned char *)(v6 + 16) == 81)
  {
    uint64_t v7 = *(void *)(a2 - 64);
    uint64_t v8 = *(void *)(a2 - 32);
    uint64_t v9 = *(void *)(v6 - 64);
    uint64_t v10 = *(void *)(v6 - 32);
    BOOL v11 = v7 == v9 && v8 == v10;
    if (v11 || (v7 == v10 ? (BOOL v12 = v8 == v9) : (BOOL v12 = 0), v12))
    {
      uint64_t v13 = *(_WORD *)(v6 + 18) & 0x3F;
      if (v7 != v9) {
        LODWORD(v13) = dword_1CFAC35F0[v13];
      }
      return (v13 & 0xFFFE) == 34;
    }
    return 0;
  }
  return result;
}

BOOL sub_1CC003024(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 != 85)
  {
    if (v2 == 84)
    {
      uint64_t v3 = *(void *)(a2 - 32);
      if (v3)
      {
        if (!*(unsigned char *)(v3 + 16) && *(void *)(v3 + 24) == *(void *)(a2 + 72) && (*(unsigned char *)(v3 + 33) & 0x20) != 0) {
          return *(_DWORD *)(v3 + 36) == 274;
        }
      }
    }
    return 0;
  }
  BOOL result = 0;
  uint64_t v6 = *(void *)(a2 - 96);
  if (v6 && *(unsigned char *)(v6 + 16) == 81)
  {
    uint64_t v7 = *(void *)(a2 - 64);
    uint64_t v8 = *(void *)(a2 - 32);
    uint64_t v9 = *(void *)(v6 - 64);
    uint64_t v10 = *(void *)(v6 - 32);
    BOOL v11 = v7 == v9 && v8 == v10;
    if (v11 || (v7 == v10 ? (BOOL v12 = v8 == v9) : (BOOL v12 = 0), v12))
    {
      uint64_t v13 = *(_WORD *)(v6 + 18) & 0x3F;
      if (v7 != v9) {
        LODWORD(v13) = dword_1CFAC35F0[v13];
      }
      return (v13 & 0xFFFE) == 38;
    }
    return 0;
  }
  return result;
}

BOOL sub_1CC0030E0(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 != 85)
  {
    if (v2 == 84)
    {
      uint64_t v3 = *(void *)(a2 - 32);
      if (v3)
      {
        if (!*(unsigned char *)(v3 + 16) && *(void *)(v3 + 24) == *(void *)(a2 + 72) && (*(unsigned char *)(v3 + 33) & 0x20) != 0) {
          return *(_DWORD *)(v3 + 36) == 275;
        }
      }
    }
    return 0;
  }
  BOOL result = 0;
  uint64_t v6 = *(void *)(a2 - 96);
  if (v6 && *(unsigned char *)(v6 + 16) == 81)
  {
    uint64_t v7 = *(void *)(a2 - 64);
    uint64_t v8 = *(void *)(a2 - 32);
    uint64_t v9 = *(void *)(v6 - 64);
    uint64_t v10 = *(void *)(v6 - 32);
    BOOL v11 = v7 == v9 && v8 == v10;
    if (v11 || (v7 == v10 ? (BOOL v12 = v8 == v9) : (BOOL v12 = 0), v12))
    {
      uint64_t v13 = *(_WORD *)(v6 + 18) & 0x3F;
      if (v7 != v9) {
        LODWORD(v13) = dword_1CFAC35F0[v13];
      }
      return (v13 & 0xFFFE) == 40;
    }
    return 0;
  }
  return result;
}

_OWORD *sub_1CC00319C(void **a1, _OWORD *a2)
{
  uint64_t v3 = (char *)*a1;
  int v2 = (char *)a1[1];
  uint64_t v4 = (v2 - (unsigned char *)*a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    abort();
  }
  uint64_t v8 = (unsigned char *)a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 60) {
      sub_1CB833614();
    }
    uint64_t v10 = (char *)operator new(16 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  BOOL v11 = &v10[16 * v4];
  *(_OWORD *)BOOL v11 = *a2;
  BOOL v12 = v11 + 16;
  if (v2 != v3)
  {
    do
    {
      *((_OWORD *)v11 - 1) = *((_OWORD *)v2 - 1);
      v11 -= 16;
      v2 -= 16;
    }
    while (v2 != v3);
    int v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[16 * v9];
  if (v2) {
    operator delete(v2);
  }
  return v12;
}

void *llvm::GPUFunctionAnalysisResult::analyzeLoaderState(llvm::GPUFunctionAnalysisResult *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v2 = *(llvm::Module **)(*(void *)this + 40);
  BOOL v24 = "agx.loader.state";
  __int16 v28 = 259;
  BOOL result = (void *)llvm::Module::getNamedMetadata(v2, (const char **)&v24);
  uint64_t v19 = (uint64_t)result;
  if (result)
  {
    uint64_t v18 = *(unsigned int *)(result[6] + 8);
    if (v18)
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        uint64_t v5 = *(void *)(**(void **)(v19 + 48) + 8 * i);
        uint64_t v6 = *(void *)(*(void *)(v5 - 8 * *(unsigned int *)(v5 + 8)) + 128);
        uint64_t v7 = *(void *)this;
        v20[0] = &unk_1F2603720;
        v20[1] = this;
        int v23 = v22;
        unint64_t v21 = v20;
        v22[0] = &unk_1F2603720;
        v22[1] = this;
        uint64_t v8 = *(void *)(v6 + 8);
        if (v8)
        {
          while (2)
          {
            uint64_t v9 = *(void *)(v8 + 24);
            BOOL v24 = v27;
            unsigned int v26 = 16;
            v27[0] = v9;
            unsigned int v10 = 1;
            do
            {
              uint64_t v11 = *((void *)v24 + --v10);
              unsigned int v25 = v10;
              unsigned int v12 = *(unsigned __int8 *)(v11 + 16);
              if (v12 > 0xA || ((1 << v12) & 0x728) == 0)
              {
                if (v12 >= 0x1C && *(void *)(*(void *)(v11 + 40) + 56) == v7)
                {
                  if (!v23) {
                    sub_1CB920400();
                  }
                  (*(void (**)(void *))(*v23 + 48))(v23);
                  if (v24 != v27) {
                    free(v24);
                  }
                  goto LABEL_36;
                }
              }
              else
              {
                for (uint64_t j = *(void *)(v11 + 8); j; uint64_t j = *(void *)(j + 8))
                {
                  uint64_t v15 = *(void *)(j + 24);
                  if (*(unsigned char *)(v15 + 16) != 84
                    || (uint64_t v16 = *(void *)(v15 - 32)) == 0
                    || *(unsigned char *)(v16 + 16)
                    || *(void *)(v16 + 24) != *(void *)(v15 + 72)
                    || (*(unsigned char *)(v16 + 33) & 0x20) == 0
                    || (int v17 = *(_DWORD *)(v16 + 36), (v17 - 1282) >= 0x190)
                    && (v17 - 2824) > 0xB
                    || *(void *)(v15 + 8))
                  {
                    if (v10 >= v26) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v24 + v10) = v15;
                    unsigned int v10 = ++v25;
                  }
                }
              }
            }
            while (v10);
            if (v24 != v27) {
              free(v24);
            }
            uint64_t v8 = *(void *)(v8 + 8);
            if (v8) {
              continue;
            }
            break;
          }
        }
LABEL_36:
        if (v23 == v22)
        {
          (*(void (**)(void *))(v22[0] + 32))(v22);
        }
        else if (v23)
        {
          (*(void (**)(void))(*v23 + 40))();
        }
        BOOL result = v21;
        if (v21 == v20)
        {
          BOOL result = (void *)(*(uint64_t (**)(void *))(v20[0] + 32))(v20);
        }
        else if (v21)
        {
          BOOL result = (void *)(*(uint64_t (**)(void))(*v21 + 40))();
        }
      }
    }
  }
  return result;
}

void *llvm::GPUFunctionAnalysisResult::analyze(llvm::GPUFunctionAnalysisResult *this)
{
  uint64_t v2 = *(void *)this + 72;
  for (uint64_t i = *(void *)(*(void *)this + 80); i != v2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v4 = i - 24;
    if (!i) {
      uint64_t v4 = 0;
    }
    uint64_t v5 = v4 + 40;
    for (uint64_t j = *(void *)(v4 + 48); j != v5; uint64_t j = *(void *)(j + 8))
    {
      if (j) {
        uint64_t v7 = j - 24;
      }
      else {
        uint64_t v7 = 0;
      }
      if (sub_1CD10D9B4(v7)) {
        *((unsigned char *)this + 8) = 1;
      }
    }
  }

  return llvm::GPUFunctionAnalysisResult::analyzeLoaderState(this);
}

BOOL llvm::GPUFunctionAnalysisResult::operator==(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
      && *(unsigned __int8 *)(a1 + 9) == *(unsigned __int8 *)(a2 + 9);
}

uint64_t llvm::GPUFunctionInfoCache::get(llvm::GPUFunctionInfoCache *this, const llvm::Function *a2)
{
  uint64_t v4 = a2;
  v5[0] = 0;
  if (!sub_1CBFFD518((uint64_t *)this, &v4, v5)
    || v5[0] == *(void *)this + 16 * *((unsigned int *)this + 4))
  {
    operator new();
  }
  return *(void *)(v5[0] + 8);
}

llvm::raw_ostream *llvm::GPUFunctionInfoCache::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  uint64_t v3 = *((unsigned int *)this + 4);
  uint64_t v4 = *(void *)this + 16 * v3;
  if (*((_DWORD *)this + 2))
  {
    if (v3)
    {
      uint64_t v5 = 16 * v3;
      uint64_t v6 = *(void *)this;
      while ((*(void *)v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 16;
        v5 -= 16;
        if (!v5) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      uint64_t v6 = *(void *)this;
    }
  }
  else
  {
LABEL_6:
    uint64_t v6 = *(void *)this + 16 * v3;
  }
  uint64_t v7 = *(void *)this + 16 * v3;
LABEL_9:
  while (v6 != v7)
  {
    this = llvm::GPUFunctionAnalysisResult::print(*(llvm::Value ***)(v6 + 8), a2);
    uint64_t v8 = v6 + 16;
    uint64_t v6 = v4;
    if (v8 != v4)
    {
      uint64_t v6 = v8;
      while ((*(void *)v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 16;
        if (v6 == v4)
        {
          uint64_t v6 = v4;
          goto LABEL_9;
        }
      }
    }
  }
  return this;
}

uint64_t *llvm::GPUFunctionInfoCache::verifyAnalysis(uint64_t *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v2 = *this + 16 * v1;
  if (*((_DWORD *)this + 2))
  {
    if (v1)
    {
      uint64_t v3 = 16 * v1;
      uint64_t v4 = *this;
      while ((*(void *)v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v4 += 16;
        v3 -= 16;
        if (!v3) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      uint64_t v4 = *this;
    }
  }
  else
  {
LABEL_6:
    uint64_t v4 = *this + 16 * v1;
  }
  uint64_t v5 = *this + 16 * v1;
LABEL_9:
  while (v4 != v5)
  {
    uint64_t v7 = **(void **)(v4 + 8);
    __int16 v8 = 0;
    this = llvm::GPUFunctionAnalysisResult::analyze((llvm::GPUFunctionAnalysisResult *)&v7);
    uint64_t v6 = v4 + 16;
    uint64_t v4 = v2;
    if (v6 != v2)
    {
      uint64_t v4 = v6;
      while ((*(void *)v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v4 += 16;
        if (v4 == v2)
        {
          uint64_t v4 = v2;
          goto LABEL_9;
        }
      }
    }
  }
  return this;
}

_DWORD *llvm::GPUFunctionInfoCache::releaseMemory(_DWORD *this)
{
  uint64_t v1 = this;
  if (*((void *)this + 1))
  {
    uint64_t v2 = this[4];
    if (v2 > 4 * this[2] && v2 >= 0x41)
    {
      return sub_1CC0041D8(this);
    }
    else
    {
      if (v2)
      {
        uint64_t v3 = 16 * v2;
        uint64_t v4 = (_DWORD **)(*(void *)this + 8);
        do
        {
          uint64_t v5 = (uint64_t)*(v4 - 1);
          if (v5 != -4096)
          {
            if (v5 != -8192)
            {
              this = *v4;
              *uint64_t v4 = 0;
              if (this) {
                this = (_DWORD *)MEMORY[0x1D25D9CE0](this, 0x1060C4076547154);
              }
            }
            *(v4 - 1) = (_DWORD *)-4096;
          }
          v4 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((void *)v1 + 1) = 0;
    }
  }
  return this;
}

uint64_t llvm::GPUFunctionInfoCache::invalidate(llvm::GPUFunctionInfoCache *this, llvm::Function *a2)
{
  uint64_t v3 = a2;
  return sub_1CC003A6C((uint64_t)this, &v3);
}

uint64_t sub_1CC003A6C(uint64_t a1, void *a2)
{
  uint64_t v7 = 0;
  uint64_t result = sub_1CBFFD518((uint64_t *)a1, a2, &v7);
  if (result)
  {
    unsigned int v6 = result;
    uint64_t v4 = v7;
    uint64_t v5 = v7[1];
    v7[1] = 0;
    if (v5) {
      MEMORY[0x1D25D9CE0](v5, 0x1060C4076547154);
    }
    *uint64_t v4 = -8192;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    return v6;
  }
  return result;
}

void llvm::initializeGPUFunctionAnalysisWrapperPassPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA618B40, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC003B64;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EA618B40, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC003B64()
{
}

uint64_t llvm::GPUFunctionAnalysisWrapperPass::runOnFunction(llvm::GPUFunctionAnalysisWrapperPass *this, Function *a2)
{
  return 0;
}

uint64_t *llvm::GPUFunctionAnalysisWrapperPass::verifyAnalysis(llvm::GPUFunctionAnalysisWrapperPass *this)
{
  return llvm::GPUFunctionInfoCache::verifyAnalysis((uint64_t *)this + 4);
}

llvm::raw_ostream *llvm::GPUFunctionAnalysisWrapperPass::print(llvm::GPUFunctionAnalysisWrapperPass *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  return llvm::GPUFunctionInfoCache::print((llvm::GPUFunctionAnalysisWrapperPass *)((char *)this + 32), a2);
}

_DWORD *llvm::GPUFunctionAnalysisWrapperPass::releaseMemory(llvm::GPUFunctionAnalysisWrapperPass *this)
{
  return llvm::GPUFunctionInfoCache::releaseMemory((_DWORD *)this + 8);
}

void sub_1CC003C20(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F2603680;
  sub_1CC003DD4((uint64_t)a1 + 32);
  MEMORY[0x1D25D9CD0](*((void *)a1 + 4), 8);

  llvm::Pass::~Pass(a1);
}

void sub_1CC003C80(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F2603680;
  sub_1CC003DD4((uint64_t)a1 + 32);
  MEMORY[0x1D25D9CD0](*((void *)a1 + 4), 8);
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC003CF4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

void llvm::callDefaultCtor<llvm::GPUFunctionAnalysisWrapperPass>()
{
}

uint64_t sub_1CC003DD4(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 16 * v1;
    uint64_t v3 = (uint64_t *)(*(void *)result + 8);
    do
    {
      uint64_t v4 = *(v3 - 1);
      if (v4 != -4096 && v4 != -8192)
      {
        uint64_t result = *v3;
        *uint64_t v3 = 0;
        if (result) {
          uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C4076547154);
        }
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

void sub_1CC003E50()
{
}

void *sub_1CC003E64(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2603720;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC003EAC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2603720;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC003ED8(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 8) + 9) = 1;
  return result;
}

uint64_t sub_1CC003EE8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v13 = 0;
  uint64_t result = sub_1CBFFD518((uint64_t *)a1, a2, &v13);
  uint64_t v9 = v13;
  if (result)
  {
    char v11 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CC003F80(a1, (uint64_t)a2, a2, v13);
    uint64_t v9 = (void *)result;
    *(void *)uint64_t result = *a2;
    uint64_t v10 = *a3;
    *a3 = 0;
    *(void *)(result + 8) = v10;
    char v11 = 1;
  }
  uint64_t v12 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v12;
  *(unsigned char *)(a4 + 16) = v11;
  return result;
}

void *sub_1CC003F80(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC004034(a1, v7);
  uint64_t v9 = 0;
  sub_1CBFFD518((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC004034(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC004100(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC004100(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      sub_1CBFFD518((uint64_t *)v5, a2, &v11);
      uint64_t v9 = v11;
      void *v11 = *a2;
      uint64_t v10 = a2[1];
      a2[1] = 0;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
      uint64_t result = a2[1];
      a2[1] = 0;
      if (result) {
        uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C4076547154);
      }
    }
    a2 += 2;
  }
  return result;
}

_DWORD *sub_1CC0041D8(_DWORD *a1)
{
  int v2 = a1[2];
  uint64_t result = (_DWORD *)sub_1CC003DD4((uint64_t)a1);
  if (v2)
  {
    int v4 = 1 << (33 - __clz(v2 - 1));
    if (v4 <= 64) {
      unsigned int v5 = 64;
    }
    else {
      unsigned int v5 = v4;
    }
    if (v5 == a1[4])
    {
      *((void *)a1 + 1) = 0;
      uint64_t v6 = 16 * v5;
      int v7 = *(void **)a1;
      do
      {
        void *v7 = -4096;
        v7 += 2;
        v6 -= 16;
      }
      while (v6);
      return result;
    }
  }
  else
  {
    if (!a1[4])
    {
      *((void *)a1 + 1) = 0;
      return result;
    }
    unsigned int v5 = 0;
  }
  MEMORY[0x1D25D9CD0](*(void *)a1, 8);

  return sub_1CB837D60(a1, v5);
}

llvm::GPUFunctionCallInfo *llvm::GPUFunctionCallInfo::GPUFunctionCallInfo(llvm::GPUFunctionCallInfo *this, const llvm::Module *a2)
{
  v152[22] = *MEMORY[0x1E4F143B8];
  *((void *)this + 3) = 0;
  uint64_t v3 = (char *)this + 24;
  *((void *)this + 6) = (char *)this + 80;
  v136 = (llvm::GPUFunctionCallInfo *)((char *)this + 48);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((void *)this + 7) = (char *)this + 80;
  *((void *)this + 8) = 8;
  *((_DWORD *)this + 18) = 0;
  int v4 = (uint64_t *)*((void *)a2 + 14);
  unsigned int v5 = *((_DWORD *)v4 + 8);
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = v5;
  }
  if (v5 <= 7) {
    size_t v7 = v6;
  }
  else {
    size_t v7 = 8;
  }
  uint64_t v138 = *((unsigned int *)v4 + 2);
  uint64_t v140 = *((void *)a2 + 14);
  if (v138)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    do
      int v9 = 33 * v9 + aAgcMain[v8++];
    while (v7 != v8);
    uint64_t v10 = *v4;
    uint64_t v11 = *v4 + 8 * v138 + 8;
    int v12 = 1;
    int v13 = v9;
    while (1)
    {
      uint64_t v14 = v13 & (v138 - 1);
      uint64_t v15 = *(void **)(v10 + 8 * v14);
      if (v15 != (void *)-8)
      {
        if (!v15) {
          goto LABEL_22;
        }
        if (*(_DWORD *)(v11 + 4 * v14) == v9
          && v7 == *v15
          && !memcmp("agc.main", (char *)v15 + *(unsigned int *)(v140 + 20), v7))
        {
          break;
        }
      }
      int v13 = v12 + v14;
      ++v12;
    }
    if (v14 != -1 && (int)v14 != v138)
    {
      uint64_t v16 = *(void *)(*(void *)(v10 + 8 * (int)v14) + 8);
      if (v16)
      {
        if (!*(unsigned char *)(v16 + 16))
        {
          *((_DWORD *)this + 17) = 1;
          *((void *)this + 10) = v16;
        }
      }
    }
  }
LABEL_22:
  v148 = &v150;
  uint64_t v149 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(a2, (uint64_t)&v148);
  if (v149)
  {
    int v17 = (uint64_t *)((char *)v148 + 16);
    uint64_t v18 = 24 * v149;
    while (1)
    {
      uint64_t v19 = *(void *)(*(v17 - 1) + 8);
      if (*(void *)v19 == 9)
      {
        uint64_t v20 = *(void *)(v19 + 24);
        uint64_t v21 = *(unsigned __int8 *)(v19 + 32);
        if (*(void *)"PIC Level" == v20 && aPicLevel[8] == v21) {
          break;
        }
      }
      v17 += 3;
      v18 -= 24;
      if (!v18) {
        goto LABEL_33;
      }
    }
    uint64_t v23 = *v17;
  }
  else
  {
LABEL_33:
    uint64_t v23 = 0;
  }
  if (v148 == &v150)
  {
    if (!v23)
    {
LABEL_36:
      BOOL v24 = 0;
      goto LABEL_37;
    }
  }
  else
  {
    free(v148);
    if (!v23) {
      goto LABEL_36;
    }
  }
  uint64_t v117 = *(void *)(v23 + 128);
  int v118 = (void *)(v117 + 24);
  if (*(_DWORD *)(v117 + 32) >= 0x41u) {
    int v118 = (void *)*v118;
  }
  BOOL v24 = *(_DWORD *)v118 != 0;
LABEL_37:
  *((unsigned char *)this + 144) = v24;
  *((unsigned char *)this + 145) = 0;
  *((_DWORD *)this + 37) = 0;
  v148 = v152;
  uint64_t v149 = (uint64_t)v152;
  uint64_t v150 = 8;
  int v151 = 0;
  sub_1CD3BBE1C(&v147, a2);
  unsigned int v25 = (const llvm::Module *)*((void *)a2 + 4);
  int v139 = (const llvm::Module *)((char *)a2 + 24);
  if (v25 != (const llvm::Module *)((char *)a2 + 24))
  {
    while (1)
    {
      uint64_t v26 = v25 ? (uint64_t)v25 - 56 : 0;
      int v141 = v25;
      if (!v25 || *(unsigned char *)(v26 + 16) != 3) {
        break;
      }
      if ((*(_DWORD *)(v26 + 20) & 0x7FFFFFF) != 0) {
        goto LABEL_50;
      }
      int v27 = *(_DWORD *)(v26 + 32);
LABEL_45:
      if (*(void *)(v26 + 8))
      {
        *((unsigned char *)this + 145) |= (v27 & 0x2000) == 0;
      }
      else
      {
        if ((v27 & 0x2000) != 0) {
          goto LABEL_179;
        }
        uint64_t v35 = v149;
        uint64_t v36 = HIDWORD(v150);
        if ((void *)v149 != v148)
        {
          unsigned int v40 = v150;
LABEL_158:
          if (3 * v40 <= 4 * (HIDWORD(v150) - v151))
          {
            if (v40 >= 0x40) {
              v40 *= 2;
            }
            else {
              unsigned int v40 = 128;
            }
          }
          else if (v40 - HIDWORD(v150) >= v40 >> 3)
          {
            goto LABEL_160;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v148, v40);
          unsigned int v40 = v150;
          uint64_t v35 = v149;
LABEL_160:
          unsigned int v89 = v40 - 1;
          unsigned int v90 = (v40 - 1) & ((v26 >> 4) ^ (v26 >> 9));
          uint64_t v91 = (uint64_t *)(v35 + 8 * v90);
          uint64_t v92 = *v91;
          if (*v91 == -1)
          {
            long long v93 = 0;
LABEL_172:
            if (v93) {
              unsigned int v97 = v93;
            }
            else {
              unsigned int v97 = v91;
            }
            if (*v97 != v26)
            {
              if (*v97 == -2) {
                --v151;
              }
              else {
                ++HIDWORD(v150);
              }
              *unsigned int v97 = v26;
            }
          }
          else
          {
            long long v93 = 0;
            int v94 = 1;
            while (v92 != v26)
            {
              if (v93) {
                BOOL v95 = 0;
              }
              else {
                BOOL v95 = v92 == -2;
              }
              if (v95) {
                long long v93 = v91;
              }
              unsigned int v96 = v90 + v94++;
              unsigned int v90 = v96 & v89;
              uint64_t v91 = (uint64_t *)(v35 + 8 * (v96 & v89));
              uint64_t v92 = *v91;
              if (*v91 == -1) {
                goto LABEL_172;
              }
            }
          }
          goto LABEL_179;
        }
        if (HIDWORD(v150))
        {
          uint64_t v37 = 0;
          uint64_t v38 = 8 * HIDWORD(v150);
          uint64_t v39 = (uint64_t *)v149;
          while (*v39 != v26)
          {
            if (*v39 == -2) {
              uint64_t v37 = v39;
            }
            ++v39;
            v38 -= 8;
            if (!v38)
            {
              if (!v37) {
                goto LABEL_73;
              }
              *uint64_t v37 = v26;
              --v151;
              goto LABEL_179;
            }
          }
          goto LABEL_179;
        }
LABEL_73:
        unsigned int v40 = v150;
        if (HIDWORD(v150) >= v150) {
          goto LABEL_158;
        }
        ++HIDWORD(v150);
        *(void *)(v149 + 8 * v36) = v26;
      }
LABEL_179:
      unsigned int v25 = (const llvm::Module *)*((void *)v141 + 1);
      if (v25 == v139) {
        goto LABEL_193;
      }
    }
    if (!*(unsigned char *)(v26 + 16) && *(void *)(v26 + 72) == v26 + 72)
    {
      int v27 = *(_DWORD *)(v26 + 32);
      if ((v27 & 0x800000) == 0) {
        goto LABEL_45;
      }
    }
LABEL_50:
    if (!sub_1CD3BBE9C((uint64_t)&v147, v26)) {
      goto LABEL_97;
    }
    __int16 v143 = 260;
    int v142 = (char *)a2 + 216;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)&v142);
    int v28 = v146;
    if (v145 < 0) {
      operator delete(__p[0]);
    }
    if (v28 != 29) {
      goto LABEL_97;
    }
    uint64_t v29 = *((void *)this + 7);
    uint64_t v30 = *((unsigned int *)this + 17);
    if (v29 != *((void *)this + 6))
    {
      unsigned int v34 = *((_DWORD *)this + 16);
      goto LABEL_76;
    }
    if (v30)
    {
      int v31 = 0;
      uint64_t v32 = 8 * v30;
      unsigned int v33 = (uint64_t *)*((void *)this + 7);
      do
      {
        if (*v33 == v26) {
          goto LABEL_97;
        }
        if (*v33 == -2) {
          int v31 = v33;
        }
        ++v33;
        v32 -= 8;
      }
      while (v32);
      if (v31)
      {
        *int v31 = v26;
        --*((_DWORD *)this + 18);
        goto LABEL_97;
      }
    }
    unsigned int v34 = *((_DWORD *)this + 16);
    if (v30 < v34)
    {
      *((_DWORD *)this + 17) = v30 + 1;
      *(void *)(v29 + 8 * v30) = v26;
      goto LABEL_97;
    }
LABEL_76:
    if (3 * v34 <= 4 * ((int)v30 - *((_DWORD *)this + 18)))
    {
      if (v34 >= 0x40) {
        v34 *= 2;
      }
      else {
        unsigned int v34 = 128;
      }
    }
    else if (v34 - v30 >= v34 >> 3)
    {
LABEL_78:
      unsigned int v41 = v34 - 1;
      unsigned int v42 = (v34 - 1) & ((v26 >> 4) ^ (v26 >> 9));
      uint64_t v43 = (uint64_t *)(v29 + 8 * v42);
      uint64_t v44 = *v43;
      if (*v43 == -1)
      {
        BOOL v45 = 0;
LABEL_90:
        if (v45) {
          uint64_t v49 = v45;
        }
        else {
          uint64_t v49 = v43;
        }
        if (*v49 != v26)
        {
          if (*v49 == -2) {
            --*((_DWORD *)this + 18);
          }
          else {
            ++*((_DWORD *)this + 17);
          }
          uint64_t *v49 = v26;
        }
      }
      else
      {
        BOOL v45 = 0;
        int v46 = 1;
        while (v44 != v26)
        {
          if (v45) {
            BOOL v47 = 0;
          }
          else {
            BOOL v47 = v44 == -2;
          }
          if (v47) {
            BOOL v45 = v43;
          }
          unsigned int v48 = v42 + v46++;
          unsigned int v42 = v48 & v41;
          uint64_t v43 = (uint64_t *)(v29 + 8 * (v48 & v41));
          uint64_t v44 = *v43;
          if (*v43 == -1) {
            goto LABEL_90;
          }
        }
      }
LABEL_97:
      uint64_t v50 = v26 + 72;
      uint64_t v51 = *(void *)(v26 + 80);
LABEL_98:
      if (v51 == v50) {
        goto LABEL_179;
      }
      uint64_t v52 = v51 - 24;
      if (!v51) {
        uint64_t v52 = 0;
      }
      uint64_t v53 = v52 + 40;
      for (uint64_t i = *(void *)(v52 + 48); ; uint64_t i = *(void *)(i + 8))
      {
        if (i == v53)
        {
          uint64_t v51 = *(void *)(v51 + 8);
          goto LABEL_98;
        }
        long long v55 = (uint64_t ***)(i - 24);
        if (!i) {
          long long v55 = 0;
        }
        if (*((unsigned char *)v55 + 16) == 84)
        {
          uint64_t v56 = (uint64_t)*(v55 - 4);
          if (!v56 || *(unsigned char *)(v56 + 16) || *(uint64_t ***)(v56 + 24) != v55[9])
          {
            if ((*((unsigned char *)v55 + 23) & 0x20) != 0)
            {
              uint64_t v57 = ***v55;
              __p[0] = v55;
              int v58 = *(_DWORD *)(v57 + 2496);
              if (!v58)
              {
                unint64_t v86 = 0;
                goto LABEL_148;
              }
              uint64_t v59 = *(void *)(v57 + 2480);
              int v60 = v58 - 1;
              unsigned int v61 = v60 & ((v55 >> 4) ^ (v55 >> 9));
              int v62 = (void *)(v59 + 40 * v61);
              unint64_t v63 = (void ***)*v62;
              if ((uint64_t ***)*v62 != v55)
              {
                uint64_t v64 = 0;
                int v65 = 1;
                while (v63 != (void ***)-4096)
                {
                  if (v64) {
                    BOOL v66 = 0;
                  }
                  else {
                    BOOL v66 = v63 == (void ***)-8192;
                  }
                  if (v66) {
                    uint64_t v64 = v62;
                  }
                  unsigned int v67 = v61 + v65++;
                  unsigned int v61 = v67 & v60;
                  int v62 = (void *)(v59 + 40 * v61);
                  unint64_t v63 = (void ***)*v62;
                  if ((uint64_t ***)*v62 == v55) {
                    goto LABEL_120;
                  }
                }
                if (v64) {
                  unint64_t v86 = v64;
                }
                else {
                  unint64_t v86 = v62;
                }
LABEL_148:
                int v62 = sub_1CC609054(v57 + 2480, (uint64_t)__p, (uint64_t *)__p, v86);
                long long v87 = __p[0];
                v62[4] = 0;
                v62[3] = 0;
                *int v62 = v87;
                v62[1] = v62 + 3;
                v62[2] = 0x100000000;
              }
LABEL_120:
              uint64_t v68 = *((unsigned int *)v62 + 4);
              if (v68)
              {
                int v69 = (void *)(v62[1] + 8);
                uint64_t v70 = 16 * v68;
                while (*((_DWORD *)v69 - 2) != 23)
                {
                  v69 += 2;
                  v70 -= 16;
                  if (!v70) {
                    goto LABEL_124;
                  }
                }
                uint64_t v71 = *v69;
                if (*v69)
                {
                  uint64_t v72 = *(unsigned int *)(v71 + 8);
                  if (v72)
                  {
                    uint64_t v73 = -8 * v72;
                    uint64_t v74 = -8 * v72;
                    while (*(void *)(v71 + v74))
                    {
                      v74 += 8;
                      if (!v74)
                      {
                        do
                        {
                          __p[0] = 0;
                          __p[0] = *(void **)(*(void *)(v71 + v73) + 128);
                          unint64_t v75 = sub_1CBFF6864((uint64_t)v3, (uint64_t *)__p);
                          ++*((_DWORD *)v75 + 2);
                          uint64_t v76 = sub_1CBFF6864((uint64_t)this, (uint64_t *)__p);
                          ++*((_DWORD *)v76 + 2);
                          v73 += 8;
                        }
                        while (v73);
                        goto LABEL_125;
                      }
                    }
                  }
                }
              }
            }
LABEL_124:
            ++*((_DWORD *)this + 37);
            continue;
          }
          if ((*(unsigned char *)(v56 + 33) & 0x20) == 0) {
            break;
          }
        }
LABEL_125:
        ;
      }
      __p[0] = *(v55 - 4);
      int v77 = *((_DWORD *)this + 4);
      if (v77)
      {
        int v78 = v77 - 1;
        unsigned int v79 = v78 & ((v56 >> 4) ^ (v56 >> 9));
        uint64_t v80 = (void *)(*(void *)this + 16 * v79);
        int v81 = (void *)*v80;
        if (v56 == *v80)
        {
LABEL_154:
          ++*((_DWORD *)v80 + 2);
          goto LABEL_125;
        }
        int v82 = 0;
        int v83 = 1;
        while (v81 != (void *)-4096)
        {
          if (v82) {
            BOOL v84 = 0;
          }
          else {
            BOOL v84 = v81 == (void *)-8192;
          }
          if (v84) {
            int v82 = v80;
          }
          unsigned int v85 = v79 + v83++;
          unsigned int v79 = v85 & v78;
          uint64_t v80 = (void *)(*(void *)this + 16 * v79);
          int v81 = (void *)*v80;
          if (v56 == *v80) {
            goto LABEL_154;
          }
        }
        if (v82) {
          long long v88 = v82;
        }
        else {
          long long v88 = v80;
        }
      }
      else
      {
        long long v88 = 0;
      }
      uint64_t v80 = sub_1CBFF69C0((uint64_t)this, (uint64_t)__p, (uint64_t *)__p, v88);
      *uint64_t v80 = __p[0];
      *((_DWORD *)v80 + 2) = 0;
      goto LABEL_154;
    }
    llvm::SmallPtrSetImplBase::Grow(v136, v34);
    unsigned int v34 = *((_DWORD *)this + 16);
    uint64_t v29 = *((void *)this + 7);
    goto LABEL_78;
  }
LABEL_193:
  if (*((unsigned char *)this + 145)) {
    goto LABEL_194;
  }
  uint64_t v101 = (void *)v149 == v148 ? (uint64_t *)((char *)&v150 + 4) : &v150;
  uint64_t v102 = *(unsigned int *)v101;
  if (v102)
  {
    uint64_t v103 = 8 * v102;
    uint64_t v104 = (unint64_t *)v149;
    while (*v104 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v104;
      v103 -= 8;
      if (!v103) {
        goto LABEL_194;
      }
    }
  }
  else
  {
    uint64_t v104 = (unint64_t *)v149;
  }
  uint64_t v105 = (unint64_t *)(v149 + 8 * v102);
  if (v104 == v105)
  {
LABEL_194:
    int v98 = (const llvm::Module *)*((void *)a2 + 4);
    if (*((unsigned __int8 *)this + 145) | *((_DWORD *)this + 37)) {
      BOOL v99 = v98 == v139;
    }
    else {
      BOOL v99 = 1;
    }
    if (v99) {
      goto LABEL_199;
    }
    while (1)
    {
LABEL_229:
      if (v98) {
        int v119 = (char *)v98 - 56;
      }
      else {
        int v119 = 0;
      }
      if (v98 && v119[16] == 3)
      {
        if ((*((_DWORD *)v119 + 5) & 0x7FFFFFF) == 0) {
          goto LABEL_276;
        }
      }
      else if (!v119[16] && *((char **)v119 + 9) == v119 + 72 && (v119[34] & 0x80) == 0)
      {
        goto LABEL_276;
      }
      if ((*((_DWORD *)v119 + 8) & 0xFu) - 9 >= 0xFFFFFFFE)
      {
        uint64_t v126 = *((void *)v119 + 1);
        if (!v126) {
          goto LABEL_276;
        }
        while (*(unsigned char *)(*(void *)(v126 + 24) + 16) == 84)
        {
          uint64_t v126 = *(void *)(v126 + 8);
          if (!v126) {
            goto LABEL_276;
          }
        }
      }
      uint64_t v120 = *((void *)this + 7);
      uint64_t v121 = *((unsigned int *)this + 17);
      if (v120 != *((void *)this + 6))
      {
        unsigned int v125 = *((_DWORD *)this + 16);
LABEL_255:
        if (3 * v125 <= 4 * ((int)v121 - *((_DWORD *)this + 18)))
        {
          if (v125 >= 0x40) {
            v125 *= 2;
          }
          else {
            unsigned int v125 = 128;
          }
        }
        else if (v125 - v121 >= v125 >> 3)
        {
          goto LABEL_257;
        }
        llvm::SmallPtrSetImplBase::Grow(v136, v125);
        unsigned int v125 = *((_DWORD *)this + 16);
        uint64_t v120 = *((void *)this + 7);
LABEL_257:
        unsigned int v127 = v125 - 1;
        unsigned int v128 = (v125 - 1) & ((v119 >> 4) ^ (v119 >> 9));
        unsigned int v129 = (char **)(v120 + 8 * v128);
        v130 = *v129;
        if (*v129 == (char *)-1)
        {
          unsigned int v131 = 0;
LABEL_269:
          if (v131) {
            uint64_t v135 = v131;
          }
          else {
            uint64_t v135 = v129;
          }
          if (*v135 != v119)
          {
            if (*v135 == (char *)-2) {
              --*((_DWORD *)this + 18);
            }
            else {
              ++*((_DWORD *)this + 17);
            }
            *uint64_t v135 = v119;
          }
        }
        else
        {
          unsigned int v131 = 0;
          int v132 = 1;
          while (v130 != v119)
          {
            if (v131) {
              BOOL v133 = 0;
            }
            else {
              BOOL v133 = v130 == (char *)-2;
            }
            if (v133) {
              unsigned int v131 = v129;
            }
            unsigned int v134 = v128 + v132++;
            unsigned int v128 = v134 & v127;
            unsigned int v129 = (char **)(v120 + 8 * (v134 & v127));
            v130 = *v129;
            if (*v129 == (char *)-1) {
              goto LABEL_269;
            }
          }
        }
        goto LABEL_276;
      }
      if (v121)
      {
        BOOL v122 = 0;
        uint64_t v123 = 8 * v121;
        v124 = (char **)*((void *)this + 7);
        while (*v124 != v119)
        {
          if (*v124 == (char *)-2) {
            BOOL v122 = v124;
          }
          ++v124;
          v123 -= 8;
          if (!v123)
          {
            if (!v122) {
              goto LABEL_248;
            }
            *BOOL v122 = v119;
            --*((_DWORD *)this + 18);
            goto LABEL_276;
          }
        }
        goto LABEL_276;
      }
LABEL_248:
      unsigned int v125 = *((_DWORD *)this + 16);
      if (v121 >= v125) {
        goto LABEL_255;
      }
      *((_DWORD *)this + 17) = v121 + 1;
      *(void *)(v120 + 8 * v121) = v119;
LABEL_276:
      int v98 = (const llvm::Module *)*((void *)v98 + 1);
      if (v98 == v139) {
        goto LABEL_199;
      }
    }
  }
  uint64_t v106 = *(void *)this;
  uint64_t v107 = *((unsigned int *)this + 4);
  unsigned int v108 = v107 - 1;
  unint64_t v109 = *v104;
  if (!v107) {
    goto LABEL_219;
  }
  while (1)
  {
    LODWORD(v110) = ((v109 >> 4) ^ (v109 >> 9)) & v108;
    int v111 = (uint64_t *)(v106 + 16 * v110);
    uint64_t v112 = *v111;
    if (v109 == *v111) {
      break;
    }
    int v113 = 1;
    while (v112 != -4096)
    {
      int v114 = v110 + v113++;
      uint64_t v110 = v114 & v108;
      uint64_t v112 = *(void *)(v106 + 16 * v110);
      if (v109 == v112)
      {
        int v111 = (uint64_t *)(v106 + 16 * v110);
        goto LABEL_218;
      }
    }
    do
    {
LABEL_219:
      uint64_t v115 = v104 + 1;
      do
      {
        if (v115 == v105) {
          goto LABEL_194;
        }
        unint64_t v116 = *v115++;
        unint64_t v109 = v116;
      }
      while (v116 > 0xFFFFFFFFFFFFFFFDLL);
      uint64_t v104 = v115 - 1;
    }
    while (!v107);
  }
LABEL_218:
  if (v111 == (uint64_t *)(*(void *)this + 16 * v107)) {
    goto LABEL_219;
  }
  *((unsigned char *)this + 145) = 1;
  int v98 = (const llvm::Module *)*((void *)a2 + 4);
  if (v98 != v139) {
    goto LABEL_229;
  }
LABEL_199:
  if ((void *)v149 != v148) {
    free((void *)v149);
  }
  return this;
}

void sub_1CC004EC4()
{
}

void llvm::createGPUFunctionCallInfoWrapperPass(llvm *this)
{
}

uint64_t sub_1CC004FC0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v1)
  {
    int v2 = (void *)v1[7];
    if (v2 != (void *)v1[6]) {
      free(v2);
    }
    MEMORY[0x1D25D9CD0](v1[3], 8);
    MEMORY[0x1D25D9CD0](*v1, 8);
    MEMORY[0x1D25D9CE0](v1, 0x10E0C408DED98BELL);
  }
  return 0;
}

void sub_1CC005030()
{
}

void *sub_1CC0050AC(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2 != (void *)a1[6]) {
    free(v2);
  }
  MEMORY[0x1D25D9CD0](a1[3], 8);
  MEMORY[0x1D25D9CD0](*a1, 8);
  return a1;
}

uint64_t llvm::FunctionGroup::getGlobalResource(uint64_t a1, uint64_t a2)
{
  if (!(*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 128))(&v7, a1, a2);
  uint64_t v4 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
  uint64_t v6 = v7;
  uint64_t v7 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return v4;
}

uint64_t llvm::FunctionGroup::setGlobalResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 152))(a1, a2, a3);
  }
  if (a3)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 144);
    return v7(a1, a2, a3);
  }
  return result;
}

uint64_t llvm::FunctionGroup::calcDMAListSize(llvm::FunctionGroup *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(llvm::FunctionGroup *))(*(void *)this + 112))(this);
  if (*(char *)(v4 + 239) < 0) {
    sub_1CB8BDF7C((uint64_t)&v43, *(const void **)(v4 + 216), *(void *)(v4 + 224));
  }
  else {
    std::string v43 = *(std::string *)(v4 + 216);
  }
  if (!std::string::compare(&v43, 0, 4uLL, "agx1"))
  {
    int v5 = 27;
  }
  else if (!std::string::compare(&v43, 0, 4uLL, "agx2"))
  {
    int v5 = 28;
  }
  else if (!std::string::compare(&v43, 0, 4uLL, "agx3"))
  {
    int v5 = 29;
  }
  else
  {
    int v5 = 0;
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if ((*(uint64_t (**)(llvm::FunctionGroup *))(*(void *)this + 312))(this)) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = a2 == 0;
  }
  if (v6)
  {
    int v7 = 0;
  }
  else
  {
    int v7 = 1;
    unsigned int v8 = (**(uint64_t (***)(llvm::FunctionGroup *, uint64_t, void, uint64_t, uint64_t))this)(this, 7, 0, 1, 3);
    unsigned int v9 = (**(uint64_t (***)(llvm::FunctionGroup *, uint64_t, void, uint64_t, uint64_t))this)(this, 6, 0, 1, 1);
    uint64_t v10 = (*(uint64_t (**)(llvm::FunctionGroup *))(*(void *)this + 312))(this);
    unsigned int v11 = (**(uint64_t (***)(llvm::FunctionGroup *, uint64_t, void, uint64_t, uint64_t))this)(this, 6, 0, 1, 1);
    if ((v5 - 27) <= 2)
    {
      int v12 = v8 / v9;
      unint64_t v13 = 4 * v10 / (unint64_t)v11;
      uint64_t v14 = (*(uint64_t (**)(llvm::FunctionGroup *, uint64_t))(*(void *)this + 176))(this, 24);
      if (v12 == v13) {
        int v15 = a2;
      }
      else {
        int v15 = 1;
      }
      if (v14) {
        int v16 = 2;
      }
      else {
        int v16 = 1;
      }
      if (v15) {
        int v7 = v16;
      }
      else {
        int v7 = v14 != 0;
      }
    }
  }
  (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *, uint64_t))(*(void *)this + 128))(&v41, this, 3);
  (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *, uint64_t))(*(void *)this + 136))(&v44, this, 3);
  uint64_t v17 = v41;
  uint64_t v18 = v44;
  if (v41)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v41 + 16))(&v41, v41);
    uint64_t v19 = v41;
    if (v18)
    {
LABEL_29:
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v18 + 16))(&v41, v18);
      uint64_t v20 = v41;
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v19 = 0;
    if (v44) {
      goto LABEL_29;
    }
  }
  uint64_t v20 = 0;
LABEL_30:
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v19 + 24))(v19, v20) & 1) == 0)
  {
    while (1)
    {
      uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 32))(v19);
      if ((unint64_t)(*(uint64_t (**)(llvm::FunctionGroup *, void))(*(void *)this + 400))(this, *v21) >> 32)break; {
      (*(void (**)(uint64_t))(*(void *)v19 + 40))(v19);
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v19 + 24))(v19, v20)) {
        goto LABEL_34;
      }
    }
    ++v7;
  }
LABEL_34:
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *, void))(*(void *)this + 128))(&v41, this, 0);
  (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *, void))(*(void *)this + 136))(&v44, this, 0);
  uint64_t v22 = v41;
  uint64_t v23 = v44;
  if (v41)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v41 + 16))(&v41, v41);
    uint64_t v24 = v41;
    if (v23)
    {
LABEL_42:
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v23 + 16))(&v41, v23);
      uint64_t v25 = v41;
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v24 = 0;
    if (v44) {
      goto LABEL_42;
    }
  }
  uint64_t v25 = 0;
LABEL_43:
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v24 + 24))(v24, v25) & 1) == 0)
  {
    while (1)
    {
      uint64_t v26 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 32))(v24);
      if (!llvm::Value::getMetadata(*v26, "agx.ts.dma", 0xAuLL)) {
        break;
      }
      (*(void (**)(uint64_t))(*(void *)v24 + 40))(v24);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v24 + 24))(v24, v25)) {
        goto LABEL_47;
      }
    }
    ++v7;
  }
LABEL_47:
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *, void))(*(void *)this + 128))(&v41, this, 0);
  (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *, void))(*(void *)this + 136))(&v44, this, 0);
  uint64_t v27 = v41;
  uint64_t v28 = v44;
  if (v41)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v41 + 16))(&v41, v41);
    uint64_t v29 = v41;
    if (v28)
    {
LABEL_55:
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v28 + 16))(&v41, v28);
      uint64_t v30 = v41;
      goto LABEL_56;
    }
  }
  else
  {
    uint64_t v29 = 0;
    if (v44) {
      goto LABEL_55;
    }
  }
  uint64_t v30 = 0;
LABEL_56:
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v29 + 24))(v29, v30) & 1) == 0)
  {
    while (1)
    {
      int v31 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v29 + 32))(v29);
      if (llvm::Value::getMetadata(*v31, "agx.ts.dma", 0xAuLL)) {
        break;
      }
      (*(void (**)(uint64_t))(*(void *)v29 + 40))(v29);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v29 + 24))(v29, v30)) {
        goto LABEL_60;
      }
    }
    ++v7;
  }
LABEL_60:
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  if ((*(uint64_t (**)(llvm::FunctionGroup *, uint64_t))(*(void *)this + 176))(this, 1)) {
    int v32 = v7 + 1;
  }
  else {
    int v32 = v7;
  }
  if ((*(uint64_t (**)(llvm::FunctionGroup *))(*(void *)this + 288))(this))
  {
    LOBYTE(v33) = 0;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *))(*(void *)this + 272))(&v44, this);
    (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *))(*(void *)this + 280))(&v42, this);
    uint64_t v41 = v44;
    sub_1CC006250(&v44, (uint64_t)&v41);
    sub_1CC006250(&v40, (uint64_t)&v42);
    int v33 = 0;
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v44 + 24))(v44, v40) & 1) == 0)
    {
      unsigned int v34 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v44 + 32))(v44);
      v33 |= (*(uint64_t (**)(llvm::FunctionGroup *, uint64_t, void))(*(void *)this + 184))(this, 3, *v34);
      (*(void (**)(uint64_t))(*(void *)v44 + 40))(v44);
    }
    uint64_t v35 = v40;
    uint64_t v40 = 0;
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
    }
    uint64_t v36 = v44;
    uint64_t v44 = 0;
    if (v36) {
      (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
    }
    uint64_t v37 = v42;
    uint64_t v42 = 0;
    if (v37) {
      (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
    }
    uint64_t v38 = v41;
    uint64_t v41 = 0;
    if (v38) {
      (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
    }
  }
  if ((*(uint64_t (**)(llvm::FunctionGroup *, uint64_t))(*(void *)this + 176))(this, 5)
    || ((*(uint64_t (**)(llvm::FunctionGroup *, uint64_t))(*(void *)this + 176))(this, 17) != 0) | v33 & 1)
  {
    ++v32;
  }
  if ((*(uint64_t (**)(llvm::FunctionGroup *, uint64_t))(*(void *)this + 176))(this, 2)
    || (*(uint64_t (**)(llvm::FunctionGroup *, uint64_t))(*(void *)this + 176))(this, 4))
  {
    ++v32;
  }
  return v32 + (*(unsigned int (**)(llvm::FunctionGroup *, uint64_t))(*(void *)this + 176))(this, 6);
}

void llvm::initializeFunctionGroupInfoWrapperPassPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC5660, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC00610C;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCC5660, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC00610C()
{
}

uint64_t sub_1CC0061A4(uint64_t a1)
{
  return 0;
}

void **sub_1CC0061E4(void **result, void *a2)
{
  int v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    sub_1CC003DD4((uint64_t)v2);
    MEMORY[0x1D25D9CD0](*v2, 8);
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t *sub_1CC006250(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  if (*(void *)a2)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v7);
    uint64_t v3 = v7;
    uint64_t v4 = *a1;
    uint64_t v7 = 0;
    *a1 = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      uint64_t v6 = v7;
      uint64_t v7 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_1CC006324(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(result + 16))
  {
    uint64_t v2 = result;
    __int16 v6 = 260;
    uint64_t v5 = a2 + 216;
    llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)&v5);
    int v3 = v8;
    if ((v8 & 0xFFFFFFFE) == 0x1C) {
      int v4 = 1024;
    }
    else {
      int v4 = 0x4000;
    }
    *(_DWORD *)(v2 + 760) = 1;
    *(_DWORD *)(v2 + 764) = v4;
    *(void *)(v2 + 768) = 32;
    if (v3 != 29 && v3 != 28) {
      operator new();
    }
    operator new();
  }
  return result;
}

uint64_t sub_1CC006958(uint64_t a1, uint64_t a2)
{
  v37[4] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(uint64_t, void))(*(void *)a1 + 16))(a1, *(void *)(a2 + 40));
  }
  if (a2 && *(unsigned char *)(a2 + 16) == 3)
  {
    if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) != 0) {
      goto LABEL_6;
    }
  }
  else if (*(unsigned char *)(a2 + 16) || *(void *)(a2 + 72) != a2 + 72 || (*(unsigned char *)(a2 + 34) & 0x80) != 0)
  {
LABEL_6:
    uint64_t v4 = *(void *)(a1 + 584);
    uint64_t v5 = *(unsigned int *)(a1 + 600);
    unsigned int v6 = a2 >> 4;
    if (v5)
    {
      uint64_t v7 = (v5 - 1) & (v6 ^ (a2 >> 9));
      uint64_t v8 = v4 + (v7 << 7);
      uint64_t v9 = *(void *)(v8 + 24);
      if (v9 == a2) {
        goto LABEL_8;
      }
      int v22 = 1;
      while (v9 != -4096)
      {
        int v23 = v7 + v22++;
        uint64_t v7 = v23 & (v5 - 1);
        uint64_t v8 = v4 + (v7 << 7);
        uint64_t v9 = *(void *)(v8 + 24);
        if (v9 == a2) {
          goto LABEL_8;
        }
      }
    }
    uint64_t v8 = v4 + (v5 << 7);
LABEL_8:
    if (v8 == v4 + (v5 << 7)) {
      sub_1CC009E5C();
    }
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & (v6 ^ (a2 >> 9));
      uint64_t v11 = v4 + (v10 << 7);
      uint64_t v12 = *(void *)(v11 + 24);
      if (v12 == a2) {
        goto LABEL_11;
      }
      int v24 = 1;
      while (v12 != -4096)
      {
        int v25 = v10 + v24++;
        uint64_t v10 = v25 & (v5 - 1);
        uint64_t v11 = v4 + (v10 << 7);
        uint64_t v12 = *(void *)(v11 + 24);
        if (v12 == a2) {
          goto LABEL_11;
        }
      }
    }
    uint64_t v11 = v4 + ((unint64_t)v5 << 7);
LABEL_11:
    uint64_t v13 = *(unsigned int *)(v11 + 88);
    if (v13 == 1)
    {
      uint64_t v14 = *(void **)(a1 + 544);
      if (!v14) {
        goto LABEL_23;
      }
      unint64_t v15 = **(void **)(v11 + 80);
      int v16 = (void *)(a1 + 544);
      do
      {
        unint64_t v17 = v14[4];
        BOOL v18 = v17 >= v15;
        if (v17 >= v15) {
          uint64_t v19 = v14;
        }
        else {
          uint64_t v19 = v14 + 1;
        }
        if (v18) {
          int v16 = v14;
        }
        uint64_t v14 = (void *)*v19;
      }
      while (*v19);
      if (v16 == (void *)(a1 + 544) || v15 < v16[4]) {
LABEL_23:
      }
        int v16 = (void *)(a1 + 544);
      uint64_t v20 = v16 + 5;
      return *v20;
    }
    uint64_t v26 = *(void *)(a1 + 648);
    unsigned int v27 = *(_DWORD *)(a1 + 664);
    if (v27)
    {
      unsigned int v28 = (v27 - 1) & (v6 ^ (a2 >> 9));
      uint64_t v29 = v26 + 48 * v28;
      uint64_t v30 = *(void *)(v29 + 24);
      if (v30 == a2)
      {
LABEL_40:
        if (v29 == v26 + 48 * v27)
        {
          unsigned int v36 = 0;
          if (v13)
          {
            int v33 = *(unint64_t **)(v11 + 80);
            uint64_t v34 = 8 * v13;
            do
            {
              uint64_t v35 = *sub_1CC012314(*(void **)(a1 + 544), *v33);
              if (v36 >= 4uLL) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v37[v36++] = v35;
              ++v33;
              v34 -= 8;
            }
            while (v34);
          }
          operator new();
        }
        uint64_t v20 = (void *)(v29 + 40);
        return *v20;
      }
      int v31 = 1;
      while (v30 != -4096)
      {
        unsigned int v32 = v28 + v31++;
        unsigned int v28 = v32 & (v27 - 1);
        uint64_t v29 = v26 + 48 * v28;
        uint64_t v30 = *(void *)(v29 + 24);
        if (v30 == a2) {
          goto LABEL_40;
        }
      }
    }
    uint64_t v29 = v26 + 48 * v27;
    goto LABEL_40;
  }
  return 0;
}

BOOL sub_1CC006E04(uint64_t a1, int32x2_t ****a2, unint64_t a3)
{
  unint64_t v26 = a3;
  uint64_t v6 = a1 + 584;
  uint64_t v7 = sub_1CC011FF0(a1 + 584, a2);
  uint64_t v8 = *(unsigned int *)(v7 + 48);
  if (v8)
  {
    unint64_t v17 = *(unint64_t **)(v7 + 40);
    BOOL v18 = &v17[v8];
    uint64_t v19 = (void *)(a1 + 544);
    do
    {
      uint64_t v20 = (void *)*v19;
      if (*v19)
      {
        unint64_t v21 = *v17;
        int v22 = (void *)(a1 + 544);
        do
        {
          unint64_t v23 = v20[4];
          BOOL v24 = v23 >= v21;
          if (v23 >= v21) {
            int v25 = v20;
          }
          else {
            int v25 = v20 + 1;
          }
          if (v24) {
            int v22 = v20;
          }
          uint64_t v20 = (void *)*v25;
        }
        while (*v25);
        if (v22 != v19 && v21 >= v22[4]) {
          (*(void (**)(void, int32x2_t ****))(*(void *)v22[5] + 48))(v22[5], a2);
        }
      }
      ++v17;
    }
    while (v17 != v18);
  }
  uint64_t v9 = sub_1CC011FF0(v6, a2);
  sub_1CC015140((void *)v9);
  *(_DWORD *)(v9 + 48) = 0;
  uint64_t v10 = *(void **)(a1 + 544);
  if (!v10) {
    goto LABEL_13;
  }
  uint64_t v11 = (void *)(a1 + 544);
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= a3;
    if (v12 >= a3) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = v10;
    }
    uint64_t v10 = (void *)*v14;
  }
  while (*v14);
  if (v11 == (void *)(a1 + 544) || v11[4] > a3) {
LABEL_13:
  }
    uint64_t v11 = (void *)(a1 + 544);
  (*(void (**)(void, int32x2_t ****))(*(void *)v11[5] + 40))(v11[5], a2);
  uint64_t v15 = sub_1CC011FF0(v6, a2);
  return sub_1CC00FA08(v15, (uint64_t *)&v26);
}

uint64_t sub_1CC006F88(uint64_t a1)
{
  return *(void *)(a1 + 560);
}

uint64_t sub_1CC006F90(uint64_t a1)
{
  return *(void *)(a1 + 560) + 8 * *(unsigned int *)(a1 + 568);
}

uint64_t sub_1CC006FA0(uint64_t a1)
{
  return a1 + 760;
}

_DWORD *sub_1CC006FA8(uint64_t a1)
{
  v112[52] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1 + 544;
  sub_1CC0098F4(*(void **)(a1 + 544));
  *(void *)(a1 + 536) = v2;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 568) = 0;
  int v3 = *(_DWORD *)(a1 + 592);
  if (v3 || *(_DWORD *)(a1 + 596))
  {
    uint64_t v4 = (void *)(a1 + 584);
    uint64_t v5 = *(unsigned int *)(a1 + 600);
    if (v5 > 4 * v3 && v5 >= 0x41)
    {
      sub_1CC0096B4((uint64_t *)(a1 + 584));
      int v6 = 1 << (33 - __clz(v3 - 1));
      if (v6 <= 64) {
        int v6 = 64;
      }
      if (v3) {
        int v7 = v6;
      }
      else {
        int v7 = 0;
      }
      if (v7 != *(_DWORD *)(a1 + 600))
      {
        MEMORY[0x1D25D9CD0](*v4, 8);
        if (!v7)
        {
          *uint64_t v4 = 0;
          *(void *)(a1 + 592) = 0;
          *(_DWORD *)(a1 + 600) = 0;
          goto LABEL_13;
        }
        unint64_t v8 = (4 * v7 / 3u + 1) | ((unint64_t)(4 * v7 / 3u + 1) >> 1);
        unint64_t v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
        LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
        *(_DWORD *)(a1 + 600) = v9;
        *(void *)(a1 + 584) = operator new((unint64_t)v9 << 7, (std::align_val_t)8uLL);
      }
      sub_1CC007D7C((void *)(a1 + 584));
      goto LABEL_13;
    }
    long long v107 = 2uLL;
    long long v108 = 0xFFFFFFFFFFFFF000;
    unint64_t v106 = (unint64_t)&off_1F2603940;
    *((void *)&v102 + 1) = 2;
    uint64_t v103 = 0;
    uint64_t v104 = -8192;
    uint64_t v105 = 0;
    if (v5)
    {
      uint64_t v44 = *v4;
      uint64_t v45 = v44 + (v5 << 7);
      int32x2_t v46 = (int32x2_t)0x1FFFFFFFFLL;
      do
      {
        uint64_t v47 = *(void *)(v44 + 24);
        uint64_t v48 = v108;
        if (v47 != (void)v108)
        {
          if (v47 != v104)
          {
            uint64_t v49 = *(void **)(v44 + 80);
            if (v49 != (void *)(v44 + 96))
            {
              uint64_t v100 = v45;
              int32x2_t v101 = v46;
              free(v49);
              int32x2_t v46 = v101;
              uint64_t v45 = v100;
            }
            if ((*(unsigned char *)(v44 + 40) & 1) == 0)
            {
              uint64_t v67 = v45;
              int32x2_t v68 = v46;
              MEMORY[0x1D25D9CD0](*(void *)(v44 + 48), 8);
              int32x2_t v46 = v68;
              uint64_t v45 = v67;
            }
            uint64_t v47 = *(void *)(v44 + 24);
            uint64_t v48 = v108;
          }
          if (v47 != v48)
          {
            BOOL v50 = v47 == -4096 || v47 == 0;
            if (!v50 && v47 != -8192)
            {
              unint64_t v55 = *(void *)(v44 + 8) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v55 = *(void *)(v44 + 16);
              uint64_t v56 = *(unint64_t **)(v44 + 16);
              if (v56)
              {
                *uint64_t v56 = *v56 & 7 | v55;
              }
              else
              {
                uint64_t v57 = *(void *)(v44 + 24);
                int v58 = ***(int32x2_t ****)v57;
                unint64_t v59 = (unint64_t)v58[303];
                if (v59 <= v55)
                {
                  uint64_t v60 = v58[305].u32[0];
                  if (v59 + 16 * v60 > v55)
                  {
                    unsigned int v61 = v60 - 1;
                    LODWORD(v62) = v61 & ((v57 >> 4) ^ (v57 >> 9));
                    unint64_t v63 = (uint64_t *)(v59 + 16 * v62);
                    uint64_t v64 = *v63;
                    if (v57 == *v63)
                    {
LABEL_112:
                      *unint64_t v63 = -8192;
                      v58[304] = vadd_s32(v58[304], v46);
                      uint64_t v57 = *(void *)(v44 + 24);
                    }
                    else
                    {
                      int v65 = 1;
                      while (v64 != -4096)
                      {
                        int v66 = v62 + v65++;
                        uint64_t v62 = v66 & v61;
                        uint64_t v64 = *(void *)(v59 + 16 * v62);
                        if (v57 == v64)
                        {
                          unint64_t v63 = (uint64_t *)(v59 + 16 * v62);
                          goto LABEL_112;
                        }
                      }
                    }
                    *(unsigned char *)(v57 + 17) &= ~1u;
                  }
                }
              }
              uint64_t v48 = v108;
            }
            *(void *)(v44 + 24) = v48;
            if (v48 != -4096 && v48 != -8192 && v48 != 0)
            {
              uint64_t v52 = v107;
              uint64_t v53 = (void *)(v107 & 0xFFFFFFFFFFFFFFF8);
              *(void *)(v44 + 16) = *(void *)(v107 & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v53 = v44 + 8;
              *(void *)(v44 + 8) = v52 & 0xFFFFFFFFFFFFFFF8 | *(void *)(v44 + 8) & 7;
              unint64_t v54 = *(uint64_t **)(v44 + 16);
              if (v54) {
                *unint64_t v54 = *v54 & 7 | (v44 + 16);
              }
            }
          }
          *(void *)(v44 + 32) = *((void *)&v108 + 1);
        }
        v44 += 128;
      }
      while (v44 != v45);
      uint64_t v69 = v104;
      *(void *)(a1 + 592) = 0;
      if (v69 != -8192 && v69 != -4096 && v69 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList((void *)&v102 + 1);
      }
    }
    else
    {
      *(void *)(a1 + 592) = 0;
    }
    if ((void)v108 != -4096 && (void)v108 != -8192 && (void)v108) {
      llvm::ValueHandleBase::RemoveFromUseList(&v107);
    }
  }
LABEL_13:
  if (*(unsigned char *)(a1 + 632))
  {
    sub_1CC009394(a1 + 608);
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 608), 8);
    *(unsigned char *)(a1 + 632) = 0;
  }
  int v10 = *(_DWORD *)(a1 + 656);
  if (v10 || *(_DWORD *)(a1 + 660))
  {
    uint64_t v39 = (void *)(a1 + 648);
    unsigned int v40 = *(_DWORD *)(a1 + 664);
    if (v40 > 4 * v10 && v40 >= 0x41)
    {
      sub_1CC009470((_DWORD *)(a1 + 648));
      if (v10)
      {
        int v41 = 1 << (33 - __clz(v10 - 1));
        if (v41 <= 64) {
          int v10 = 64;
        }
        else {
          int v10 = v41;
        }
      }
      if (v10 != *(_DWORD *)(a1 + 664))
      {
        MEMORY[0x1D25D9CD0](*v39, 8);
        if (!v10)
        {
          *uint64_t v39 = 0;
          *(void *)(a1 + 656) = 0;
          *(_DWORD *)(a1 + 664) = 0;
          goto LABEL_17;
        }
        unint64_t v42 = (4 * v10 / 3u + 1) | ((unint64_t)(4 * v10 / 3u + 1) >> 1);
        unint64_t v43 = v42 | (v42 >> 2) | ((v42 | (v42 >> 2)) >> 4);
        LODWORD(v43) = (((v43 | (v43 >> 8)) >> 16) | v43 | (v43 >> 8)) + 1;
        *(_DWORD *)(a1 + 664) = v43;
        *(void *)(a1 + 648) = operator new(48 * v43, (std::align_val_t)8uLL);
      }
      sub_1CC008788((void *)(a1 + 648));
      goto LABEL_17;
    }
    long long v107 = 2uLL;
    long long v108 = 0xFFFFFFFFFFFFF000;
    unint64_t v106 = (unint64_t)&off_1F2603968;
    *((void *)&v102 + 1) = 2;
    uint64_t v103 = 0;
    uint64_t v104 = -8192;
    uint64_t v105 = 0;
    if (v40)
    {
      uint64_t v71 = (void *)*v39;
      uint64_t v72 = &v71[6 * v40];
      do
      {
        uint64_t v73 = v71[3];
        uint64_t v74 = v108;
        if (v73 != (void)v108)
        {
          if (v73 != v104)
          {
            uint64_t v75 = v71[5];
            v71[5] = 0;
            if (v75)
            {
              (*(void (**)(uint64_t))(*(void *)v75 + 24))(v75);
              uint64_t v73 = v71[3];
              uint64_t v74 = v108;
            }
          }
          if (v73 != v74)
          {
            BOOL v76 = v73 == -4096 || v73 == 0;
            if (!v76 && v73 != -8192)
            {
              unint64_t v81 = v71[1] & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v81 = v71[2];
              int v82 = (unint64_t *)v71[2];
              if (v82)
              {
                unint64_t *v82 = *v82 & 7 | v81;
              }
              else
              {
                uint64_t v83 = v71[3];
                BOOL v84 = ***(int32x2_t ****)v83;
                unint64_t v85 = (unint64_t)v84[303];
                if (v85 <= v81)
                {
                  uint64_t v86 = v84[305].u32[0];
                  if (v85 + 16 * v86 > v81)
                  {
                    unsigned int v87 = v86 - 1;
                    LODWORD(v88) = v87 & ((v83 >> 4) ^ (v83 >> 9));
                    unsigned int v89 = (uint64_t *)(v85 + 16 * v88);
                    uint64_t v90 = *v89;
                    if (v83 == *v89)
                    {
LABEL_157:
                      *unsigned int v89 = -8192;
                      v84[304] = vadd_s32(v84[304], (int32x2_t)0x1FFFFFFFFLL);
                      uint64_t v83 = v71[3];
                    }
                    else
                    {
                      int v91 = 1;
                      while (v90 != -4096)
                      {
                        int v92 = v88 + v91++;
                        uint64_t v88 = v92 & v87;
                        uint64_t v90 = *(void *)(v85 + 16 * v88);
                        if (v83 == v90)
                        {
                          unsigned int v89 = (uint64_t *)(v85 + 16 * v88);
                          goto LABEL_157;
                        }
                      }
                    }
                    *(unsigned char *)(v83 + 17) &= ~1u;
                  }
                }
              }
              uint64_t v74 = v108;
            }
            v71[3] = v74;
            if (v74 != -4096 && v74 != -8192 && v74 != 0)
            {
              uint64_t v78 = v107;
              unsigned int v79 = (void *)(v107 & 0xFFFFFFFFFFFFFFF8);
              v71[2] = *(void *)(v107 & 0xFFFFFFFFFFFFFFF8);
              *unsigned int v79 = v71 + 1;
              v71[1] = v78 & 0xFFFFFFFFFFFFFFF8 | v71[1] & 7;
              uint64_t v80 = (unint64_t *)v71[2];
              if (v80) {
                *uint64_t v80 = *v80 & 7 | (unint64_t)(v71 + 2);
              }
            }
          }
          v71[4] = *((void *)&v108 + 1);
        }
        v71 += 6;
      }
      while (v71 != v72);
      uint64_t v93 = v104;
      *(void *)(a1 + 656) = 0;
      if (v93 != -8192 && v93 != -4096 && v93 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList((void *)&v102 + 1);
      }
    }
    else
    {
      *(void *)(a1 + 656) = 0;
    }
    if ((void)v108 != -4096 && (void)v108 != -8192 && (void)v108) {
      llvm::ValueHandleBase::RemoveFromUseList(&v107);
    }
  }
LABEL_17:
  if (*(unsigned char *)(a1 + 696))
  {
    sub_1CC009394(a1 + 672);
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 672), 8);
    *(unsigned char *)(a1 + 696) = 0;
  }
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 72))(v11);
  }
  memset(v112, 0, 416);
  long long v111 = 0u;
  long long v110 = 0u;
  long long v109 = 0u;
  long long v108 = 0u;
  long long v107 = 0u;
  uint64_t v12 = 8;
  unint64_t v106 = 1;
  do
  {
    *(unint64_t *)((char *)&v106 + v12) = -4096;
    v12 += 16;
  }
  while (v12 != 72);
  *(void *)&long long v111 = v112;
  *((void *)&v111 + 1) = 0x400000000;
  BOOL v13 = (uint64_t (***)(llvm::CallbackVH *__hidden))(a1 + 32);
  if ((*(unsigned char *)(a1 + 32) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 40), 8);
  }
  uint64_t v14 = 0;
  *(_DWORD *)(a1 + 32) = 1;
  uint64_t v15 = (uint64_t *)(a1 + 104);
  do
  {
    *(void *)(a1 + 40 + v14) = -4096;
    v14 += 16;
  }
  while (v14 != 64);
  int v16 = *(_DWORD *)(a1 + 32);
  int v17 = HIDWORD(v106);
  int v18 = v106 & 1;
  unsigned int v19 = v16 & 0xFFFFFFFE | v18;
  unsigned int v20 = v106 & 0xFFFFFFFE | v16 & 1;
  *(_DWORD *)(a1 + 32) = v20;
  *(_DWORD *)(a1 + 36) = v17;
  unint64_t v106 = v19;
  if ((v16 & 1) == 0)
  {
    if (!v18)
    {
      uint64_t v21 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v107;
      *(void *)&long long v107 = v21;
      LODWORD(v21) = *(_DWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 48) = DWORD2(v107);
      DWORD2(v107) = v21;
      goto LABEL_50;
    }
    unsigned int v19 = v20;
    int v22 = (uint64_t (***)(llvm::CallbackVH *__hidden))(a1 + 32);
    BOOL v13 = (uint64_t (***)(llvm::CallbackVH *__hidden))&v106;
    goto LABEL_45;
  }
  int v22 = (uint64_t (***)(llvm::CallbackVH *__hidden))&v106;
  if (!v18)
  {
LABEL_45:
    uint64_t v29 = 0;
    long long v102 = *(_OWORD *)(v22 + 1);
    *(_DWORD *)int v22 = v19 | 1;
    do
    {
      uint64_t v30 = v13[v29 + 1];
      v22[v29 + 1] = v30;
      if (((unint64_t)v30 | 0x1000) != 0xFFFFFFFFFFFFF000) {
        LODWORD(v22[v29 + 2]) = v13[v29 + 2];
      }
      v29 += 2;
    }
    while (v29 != 8);
    *(_DWORD *)v13 &= ~1u;
    *(_OWORD *)(v13 + 1) = v102;
    goto LABEL_50;
  }
  for (uint64_t i = 0; i != 64; i += 16)
  {
    uint64_t v24 = a1 + i;
    int v25 = (uint64_t (***)(llvm::CallbackVH *__hidden))((char *)&v106 + i);
    unint64_t v26 = *(uint64_t (***)(llvm::CallbackVH *__hidden))(a1 + i + 40);
    unsigned int v27 = *(uint64_t (***)(llvm::CallbackVH *__hidden))((char *)&v106 + i + 8);
    if (v26 == (uint64_t (**)(llvm::CallbackVH *__hidden))-4096
      || v26 == (uint64_t (**)(llvm::CallbackVH *__hidden))-8192
      || v27 == (uint64_t (**)(llvm::CallbackVH *__hidden))-4096
      || v27 == (uint64_t (**)(llvm::CallbackVH *__hidden))-8192)
    {
      *(void *)(v24 + 40) = v27;
      v25[1] = v26;
      if (((unint64_t)v26 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (((unint64_t)v27 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          *(_DWORD *)(a1 + i + 48) = *(_DWORD *)((char *)&v107 + i + 8);
        }
      }
      else
      {
        *(_DWORD *)((char *)&v107 + i + 8) = *(_DWORD *)(a1 + i + 48);
      }
    }
    else
    {
      int v28 = *(_DWORD *)(a1 + i + 48);
      *(void *)(v24 + 40) = v27;
      *(_DWORD *)(a1 + i + 48) = *(_DWORD *)((char *)&v107 + i + 8);
      v25[1] = v26;
      *(_DWORD *)((char *)&v107 + i + 8) = v28;
    }
  }
LABEL_50:
  if (v15 != (uint64_t *)&v111)
  {
    if ((void *)v111 == v112)
    {
      int v31 = DWORD2(v111);
      uint64_t v32 = *(unsigned int *)(a1 + 112);
      if (v32 < DWORD2(v111))
      {
        if (*(_DWORD *)(a1 + 116) < DWORD2(v111))
        {
          sub_1CC01523C(v15);
          sub_1CD48F008();
        }
        if (v32) {
          sub_1CC0152C0((uint64_t)v112, (uint64_t)&v112[13 * v32], *v15);
        }
        else {
          uint64_t v32 = 0;
        }
        if (v32 != DWORD2(v111))
        {
          BOOL v95 = (unsigned int *)(v111 + 104 * DWORD2(v111));
          uint64_t v96 = 104 * v32 + 16;
          unsigned int v97 = (unsigned int *)(*(void *)(a1 + 104) + v96);
          int v98 = (unsigned int *)(v111 + v96);
          do
          {
            *((void *)v97 - 2) = *((void *)v98 - 2);
            *((unsigned char *)v97 - 8) = *((unsigned char *)v98 - 8);
            unsigned int v97 = sub_1CC00ACE8(v97, v98) + 26;
            BOOL v99 = v98 + 22;
            v98 += 26;
          }
          while (v99 != v95);
        }
      }
      else
      {
        uint64_t v33 = *v15;
        if (DWORD2(v111))
        {
          uint64_t v34 = sub_1CC0152C0((uint64_t)v112, (uint64_t)&v112[13 * DWORD2(v111)], v33);
          uint64_t v33 = *(void *)(a1 + 104);
          LODWORD(v32) = *(_DWORD *)(a1 + 112);
        }
        else
        {
          uint64_t v34 = *v15;
        }
        if (v33 + 104 * v32 != v34)
        {
          uint64_t v36 = v33 + 104 * v32 - 32;
          do
          {
            uint64_t v37 = *(void **)(v36 - 16);
            if ((void *)v36 != v37) {
              free(v37);
            }
            if ((*(unsigned char *)(v36 - 56) & 1) == 0) {
              MEMORY[0x1D25D9CD0](*(void *)(v36 - 48), 8);
            }
            uint64_t v38 = v36 - 72;
            v36 -= 104;
          }
          while (v38 != v34);
        }
      }
      *(_DWORD *)(a1 + 112) = v31;
      sub_1CC01523C((uint64_t *)&v111);
    }
    else
    {
      sub_1CD491C70((char **)v15, (char **)&v111);
    }
  }
  sub_1CC009970((void **)&v111);
  if ((v106 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v107, 8);
  }
  sub_1CBFF5DC8((_DWORD *)(a1 + 712));
  return sub_1CBFF5DC8((_DWORD *)(a1 + 736));
}

BOOL sub_1CC007B80(uint64_t a1, llvm::Function *a2)
{
  int hasAddressTaken = llvm::Function::hasAddressTaken(a2, 0, 0, 1, 0, 0);
  BOOL result = 0;
  if (hasAddressTaken)
  {
    uint64_t v6 = a1 + 32;
    sub_1CC00B604(v6, (llvm::Type **)a2);
    int v7 = a2;
    return *(unsigned char *)(sub_1CC00C094(v6, (uint64_t *)&v7) + 8) == 0;
  }
  return result;
}

void *sub_1CC007C04(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a2;
  BOOL result = sub_1CBFF6864(a1 + 712, &v5);
  *((_DWORD *)result + 2) = a3;
  return result;
}

uint64_t sub_1CC007C40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 712);
  uint64_t v3 = *(unsigned int *)(a1 + 728);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      goto LABEL_6;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v9 = v4 + v7++;
      uint64_t v4 = v9 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_6;
      }
    }
  }
  uint64_t v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_6:
  if (v5 == (uint64_t *)(v2 + 16 * v3)) {
    return 0;
  }
  else {
    return *((unsigned int *)v5 + 2) | 0x100000000;
  }
}

void *sub_1CC007CC0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a2;
  BOOL result = sub_1CBFF6864(a1 + 736, &v5);
  *((_DWORD *)result + 2) = a3;
  return result;
}

uint64_t sub_1CC007CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 736);
  uint64_t v3 = *(unsigned int *)(a1 + 752);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      goto LABEL_6;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v9 = v4 + v7++;
      uint64_t v4 = v9 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_6;
      }
    }
  }
  uint64_t v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_6:
  if (v5 == (uint64_t *)(v2 + 16 * v3)) {
    return 0;
  }
  else {
    return *((unsigned int *)v5 + 2) | 0x100000000;
  }
}

void *sub_1CC007D7C(void *result)
{
  result[1] = 0;
  v10[0] = 2;
  v10[1] = 0;
  uint64_t v11 = -4096;
  uint64_t v12 = 0;
  uint64_t v1 = *((unsigned int *)result + 4);
  if (v1)
  {
    uint64_t v2 = result;
    BOOL result = v10;
    uint64_t v3 = *v2;
    uint64_t v4 = v1 << 7;
    uint64_t v5 = (void *)(*v2 + 16);
    do
    {
      uint64_t v6 = v10[0] & 6;
      *(v5 - 1) = v6;
      void *v5 = 0;
      uint64_t v7 = v11;
      v5[1] = v11;
      if (v7 != -4096 && v7 != -8192 && v7 != 0)
      {
        unint64_t v9 = v10[0] & 0xFFFFFFFFFFFFFFF8;
        void *v5 = *(void *)(v10[0] & 0xFFFFFFFFFFFFFFF8);
        *(void *)unint64_t v9 = v5 - 1;
        *(v5 - 1) = v9 | v6;
        if (*v5) {
          *(void *)void *v5 = *(void *)*v5 & 7 | (v3 + 16);
        }
      }
      *(v5 - 2) = &off_1F2603940;
      void v5[2] = v12;
      v5 += 16;
      v3 += 128;
      v4 -= 128;
    }
    while (v4);
    if (v11 != -8192 && v11 != -4096)
    {
      if (v11) {
        return llvm::ValueHandleBase::RemoveFromUseList(v10);
      }
    }
  }
  return result;
}

uint64_t sub_1CC007EA8(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v5 = a1 + (v4 << 7);
    uint64_t v6 = *(void *)(v5 + 24);
    if (v6 == a3)
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v7 = 0;
      int v8 = 1;
      while (v6 != -4096)
      {
        if (v7) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v6 == -8192;
        }
        if (v11) {
          uint64_t v7 = v5;
        }
        int v12 = v4 + v8++;
        uint64_t v4 = v12 & (a2 - 1);
        uint64_t v5 = a1 + (v4 << 7);
        uint64_t v6 = *(void *)(v5 + 24);
        uint64_t v9 = 1;
        if (v6 == a3) {
          goto LABEL_7;
        }
      }
      uint64_t v9 = 0;
      if (v7) {
        uint64_t v5 = v7;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v9 = 0;
  }
LABEL_7:
  *a4 = v5;
  return v9;
}

uint64_t sub_1CC007F3C(uint64_t a1, unsigned int *a2)
{
  *(void *)a1 = 1;
  int64x2_t v4 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 8) = v4;
  *(int64x2_t *)(a1 + 24) = v4;
  sub_1CC008030((unsigned int *)a1, a2);
  *(void *)(a1 + 40) = a1 + 56;
  *(void *)(a1 + 48) = 0x400000000;
  if (a2[12]) {
    sub_1CC00811C(a1 + 40, (uint64_t)(a2 + 10));
  }
  return a1;
}

void *sub_1CC007FAC(void *a1, unsigned int a2)
{
  if (a2 <= 4)
  {
    *a1 = 1;
LABEL_3:
    BOOL result = a1 + 1;
    int64x2_t v4 = a1 + 5;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  uint64_t v5 = a2;
  BOOL result = operator new(8 * a2, (std::align_val_t)8uLL);
  a1[1] = result;
  a1[2] = v5;
  int v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if (v6) {
    goto LABEL_3;
  }
  int64x2_t v4 = &result[v5];
  do
LABEL_4:
    *result++ = -4096;
  while (result != v4);
  return result;
}

unsigned int *sub_1CC008030(unsigned int *result, unsigned int *a2)
{
  unsigned int v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  unsigned int v3 = result[1];
  *BOOL result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  unsigned int v4 = *a2;
  if (*result)
  {
    if (v4)
    {
      uint64_t v5 = 0;
      int v6 = (int *)(result + 2);
      uint64_t v7 = (int *)(a2 + 2);
      do
      {
        uint64_t v8 = *(void *)&v6[v5];
        *(void *)&v6[v5] = *(void *)&v7[v5];
        *(void *)&v7[v5] = v8;
        v5 += 2;
      }
      while (v5 != 8);
      return result;
    }
    uint64_t v9 = a2;
  }
  else
  {
    if ((v4 & 1) == 0)
    {
      uint64_t v11 = *((void *)result + 1);
      *((void *)result + 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v11;
      LODWORD(v11) = result[4];
      result[4] = a2[4];
      a2[4] = v11;
      return result;
    }
    unsigned int v4 = *result;
    uint64_t v9 = result;
    BOOL result = a2;
  }
  long long v12 = *(_OWORD *)(v9 + 2);
  *uint64_t v9 = v4 | 1;
  for (uint64_t i = 2; i != 10; i += 2)
    *(void *)&v9[i] = *(void *)&result[i];
  *result &= ~1u;
  *(_OWORD *)(result + 2) = v12;
  return result;
}

uint64_t sub_1CC00811C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = a2 + 16;
    unsigned int v3 = *(const void **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      int v6 = (_DWORD *)(a2 + 8);
      uint64_t v5 = *(unsigned int *)(a2 + 8);
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7 >= v5)
      {
        if (v5) {
          memmove(*(void **)a1, *(const void **)a2, 8 * v5);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v7)
        {
          uint64_t v15 = *(unsigned int *)(a1 + 8);
          uint64_t v16 = a2;
          memmove(*(void **)a1, v3, 8 * v7);
          uint64_t v8 = v15;
          a2 = v16;
        }
        else
        {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *v6;
        if (v8 != v9) {
          memcpy((void *)(*(void *)a1 + 8 * v8), (const void *)(*(void *)a2 + 8 * v8), *(void *)a2 + 8 * v9 - (*(void *)a2 + 8 * v8));
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
    }
    else
    {
      uint64_t v11 = a2;
      long long v12 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v12);
        unsigned int v3 = *(const void **)v11;
      }
      *(void *)a1 = v3;
      uint64_t v13 = v11;
      uint64_t v14 = *(void *)(v11 + 8);
      int v6 = (_DWORD *)(v11 + 8);
      *(void *)(a1 + 8) = v14;
      *(void *)uint64_t v13 = v4;
      *(_DWORD *)(v13 + 12) = 0;
    }
    *int v6 = 0;
  }
  return a1;
}

uint64_t sub_1CC008258(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v3 = a1[2];
  unsigned int v4 = a1[4];
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[3] > v4 >> 3)
  {
    goto LABEL_3;
  }
  uint64_t v7 = a1;
  sub_1CD48E99C((uint64_t)a1, v4);
  uint64_t v8 = 0;
  sub_1CC007EA8(*(void *)v7, v7[4], *(void *)(a2 + 24), &v8);
  a1 = v7;
  a3 = v8;
LABEL_3:
  ++a1[2];
  if (*(void *)(a3 + 24) != -4096) {
    --a1[3];
  }
  return a3;
}

void sub_1CC008318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CC007D7C((void *)a1);
  v48[0] = 2;
  v48[1] = 0;
  uint64_t v49 = -4096;
  uint64_t v50 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = &off_1F2603940;
  v44[0] = 2;
  v44[1] = 0;
  uint64_t v45 = -8192;
  if (a2 != a3)
  {
    int64x2_t v43 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      uint64_t v6 = *(void *)(a2 + 24);
      if (v6 != v49 && v6 != v45)
      {
        uint64_t v51 = 0;
        sub_1CC007EA8(*(void *)a1, *(_DWORD *)(a1 + 16), v6, &v51);
        uint64_t v8 = v51;
        uint64_t v9 = v51[1].i64[1];
        uint64_t v10 = *(void *)(a2 + 24);
        if (v9 != v10)
        {
          BOOL v11 = v9 == -4096 || v9 == 0;
          if (!v11 && v9 != -8192)
          {
            unint64_t v30 = v51->i64[1] & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v30 = v51[1].i64[0];
            int v31 = (unint64_t *)v8[1].i64[0];
            if (v31)
            {
              *int v31 = *v31 & 7 | v30;
            }
            else
            {
              uint64_t v32 = v8[1].i64[1];
              uint64_t v33 = ***(int32x2_t ****)v32;
              unint64_t v34 = (unint64_t)v33[303];
              if (v34 <= v30)
              {
                uint64_t v35 = v33[305].u32[0];
                if (v34 + 16 * v35 > v30)
                {
                  unsigned int v36 = v35 - 1;
                  LODWORD(v37) = v36 & ((v32 >> 4) ^ (v32 >> 9));
                  uint64_t v38 = (uint64_t *)(v34 + 16 * v37);
                  uint64_t v39 = *v38;
                  if (v32 == *v38)
                  {
LABEL_54:
                    *uint64_t v38 = -8192;
                    v33[304] = vadd_s32(v33[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v32 = v8[1].i64[1];
                  }
                  else
                  {
                    int v40 = 1;
                    while (v39 != -4096)
                    {
                      int v41 = v37 + v40++;
                      uint64_t v37 = v41 & v36;
                      uint64_t v39 = *(void *)(v34 + 16 * v37);
                      if (v32 == v39)
                      {
                        uint64_t v38 = (uint64_t *)(v34 + 16 * v37);
                        goto LABEL_54;
                      }
                    }
                  }
                  *(unsigned char *)(v32 + 17) &= ~1u;
                }
              }
            }
            uint64_t v10 = *(void *)(a2 + 24);
          }
          v8[1].i64[1] = v10;
          if (v10 != -4096 && v10 != -8192 && v10 != 0)
          {
            uint64_t v13 = *(void *)(a2 + 8);
            v8[1].i64[0] = *(void *)(v13 & 0xFFFFFFFFFFFFFFF8);
            *(void *)(v13 & 0xFFFFFFFFFFFFFFF8) = &v8->i64[1];
            v8->i64[1] = v13 & 0xFFFFFFFFFFFFFFF8 | v8->i64[1] & 7;
            uint64_t v14 = (uint64_t *)v8[1].i64[0];
            if (v14) {
              *uint64_t v14 = *v14 & 7 | (unint64_t)&v8[1];
            }
          }
        }
        v8[2].i64[0] = *(void *)(a2 + 32);
        v8[2].i64[1] = 1;
        v8[3] = v43;
        v8[4] = v43;
        sub_1CC008030(&v8[2].u32[2], (unsigned int *)(a2 + 40));
        v8[5].i64[0] = (uint64_t)v8[6].i64;
        uint64_t i64 = (uint64_t)v8[5].i64;
        *(void *)(i64 + 8) = 0x400000000;
        if (*(_DWORD *)(a2 + 88)) {
          sub_1CC00811C(i64, a2 + 80);
        }
        ++*(_DWORD *)(a1 + 8);
        uint64_t v16 = *(void **)(a2 + 80);
        if (v16 != (void *)(a2 + 96)) {
          free(v16);
        }
        if ((*(unsigned char *)(a2 + 40) & 1) == 0) {
          MEMORY[0x1D25D9CD0](*(void *)(a2 + 48), 8);
        }
        uint64_t v6 = *(void *)(a2 + 24);
      }
      if (v6 != -4096 && v6 != -8192 && v6 != 0)
      {
        unint64_t v18 = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v18 = *(void *)(a2 + 16);
        unsigned int v19 = *(unint64_t **)(a2 + 16);
        if (v19)
        {
          *unsigned int v19 = *v19 & 7 | v18;
        }
        else
        {
          uint64_t v20 = *(void *)(a2 + 24);
          uint64_t v21 = ***(int32x2_t ****)v20;
          unint64_t v22 = (unint64_t)v21[303];
          if (v22 <= v18)
          {
            uint64_t v23 = v21[305].u32[0];
            if (v22 + 16 * v23 > v18)
            {
              unsigned int v24 = v23 - 1;
              LODWORD(v25) = v24 & ((v20 >> 4) ^ (v20 >> 9));
              unint64_t v26 = (uint64_t *)(v22 + 16 * v25);
              uint64_t v27 = *v26;
              if (v20 == *v26)
              {
LABEL_40:
                *unint64_t v26 = -8192;
                v21[304] = vadd_s32(v21[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v20 = *(void *)(a2 + 24);
              }
              else
              {
                int v28 = 1;
                while (v27 != -4096)
                {
                  int v29 = v25 + v28++;
                  uint64_t v25 = v29 & v24;
                  uint64_t v27 = *(void *)(v22 + 16 * v25);
                  if (v20 == v27)
                  {
                    unint64_t v26 = (uint64_t *)(v22 + 16 * v25);
                    goto LABEL_40;
                  }
                }
              }
              *(unsigned char *)(v20 + 17) &= ~1u;
            }
          }
        }
      }
      a2 += 128;
    }
    while (a2 != a3);
    if (v45 != -8192 && v45 != -4096 && v45 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList(v44);
    }
  }
  if (v49 != -4096 && v49 != -8192)
  {
    if (v49) {
      llvm::ValueHandleBase::RemoveFromUseList(v48);
    }
  }
}

void *sub_1CC008720(void *result, void *a2)
{
  uint64_t v2 = *a2 & 6;
  *BOOL result = v2;
  result[1] = 0;
  uint64_t v3 = a2[2];
  result[2] = v3;
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
  {
    unint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
    result[1] = *(void *)v5;
    *(void *)unint64_t v5 = result;
    *BOOL result = v5 | v2;
    uint64_t v6 = (unint64_t *)result[1];
    if (v6) {
      *uint64_t v6 = *v6 & 7 | (unint64_t)(result + 1);
    }
  }
  return result;
}

void *sub_1CC008788(void *result)
{
  result[1] = 0;
  v10[0] = 2;
  v10[1] = 0;
  uint64_t v11 = -4096;
  uint64_t v12 = 0;
  uint64_t v1 = *((unsigned int *)result + 4);
  if (v1)
  {
    uint64_t v2 = result;
    BOOL result = v10;
    uint64_t v3 = *v2;
    uint64_t v4 = 48 * v1;
    unint64_t v5 = (void *)(*v2 + 16);
    do
    {
      uint64_t v6 = v10[0] & 6;
      *(v5 - 1) = v6;
      void *v5 = 0;
      uint64_t v7 = v11;
      v5[1] = v11;
      if (v7 != -4096 && v7 != -8192 && v7 != 0)
      {
        unint64_t v9 = v10[0] & 0xFFFFFFFFFFFFFFF8;
        void *v5 = *(void *)(v10[0] & 0xFFFFFFFFFFFFFFF8);
        *(void *)unint64_t v9 = v5 - 1;
        *(v5 - 1) = v9 | v6;
        if (*v5) {
          *(void *)void *v5 = *(void *)*v5 & 7 | (v3 + 16);
        }
      }
      *(v5 - 2) = &off_1F2603968;
      void v5[2] = v12;
      v5 += 6;
      v3 += 48;
      v4 -= 48;
    }
    while (v4);
    if (v11 != -8192 && v11 != -4096)
    {
      if (v11) {
        return llvm::ValueHandleBase::RemoveFromUseList(v10);
      }
    }
  }
  return result;
}

uint64_t sub_1CC0088B8(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = a1 + 48 * v5;
    uint64_t v7 = *(void *)(v6 + 24);
    if (v7 == a3)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          uint64_t v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        uint64_t v6 = a1 + 48 * (v11 & v4);
        uint64_t v7 = *(void *)(v6 + 24);
        if (v7 == a3) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t result = 0;
  }
  *a4 = v6;
  return result;
}

uint64_t sub_1CC008944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void ****)a3;
  uint64_t v7 = 2;
  uint64_t v62 = 2;
  unint64_t v63 = 0;
  uint64_t v64 = v6;
  if (v6 != (void ***)-8192 && v6 != (void ***)-4096 && v6 != 0)
  {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v62);
    uint64_t v7 = v62;
    uint64_t v6 = v64;
  }
  uint64_t v65 = a2;
  unint64_t v67 = v7 & 6;
  int32x2_t v68 = 0;
  uint64_t v69 = v6;
  if (v6 == (void ***)-8192)
  {
    uint64_t v10 = a2;
  }
  else
  {
    BOOL v9 = v6 == (void ***)-4096 || v6 == 0;
    uint64_t v10 = a2;
    if (!v9)
    {
      int32x2_t v68 = *(unint64_t **)(v7 & 0xFFFFFFFFFFFFFFF8);
      *(void *)(v7 & 0xFFFFFFFFFFFFFFF8) = &v67;
      unint64_t v67 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (v68) {
        *int32x2_t v68 = *v68 & 7 | (unint64_t)&v68;
      }
      uint64_t v10 = v65;
      uint64_t v6 = v69;
    }
  }
  int v66 = &off_1F2603968;
  uint64_t v11 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  uint64_t v70 = v10;
  uint64_t v71 = v11;
  uint64_t v72 = 0;
  char v12 = sub_1CC0088B8(*(void *)a2, *(_DWORD *)(a2 + 16), (uint64_t)v6, &v72);
  uint64_t v13 = v72;
  unsigned int v14 = *(_DWORD *)(a2 + 16);
  if (v12)
  {
    char v23 = 0;
    goto LABEL_30;
  }
  int v15 = *(_DWORD *)(a2 + 8);
  if (4 * v15 + 4 >= 3 * v14)
  {
    v14 *= 2;
    goto LABEL_78;
  }
  if (v14 + ~v15 - *(_DWORD *)(a2 + 12) <= v14 >> 3)
  {
LABEL_78:
    sub_1CD48EE58(a2, v14);
    uint64_t v72 = 0;
    sub_1CC0088B8(*(void *)a2, *(_DWORD *)(a2 + 16), (uint64_t)v69, &v72);
    uint64_t v13 = v72;
  }
  ++*(_DWORD *)(a2 + 8);
  uint64_t v16 = (void ***)v13[3];
  if (v16 != (void ***)-4096) {
    --*(_DWORD *)(a2 + 12);
  }
  int v17 = v69;
  if (v16 != v69)
  {
    if (v16 != (void ***)-4096 && v16 && v16 != (void ***)-8192)
    {
      unint64_t v49 = v13[1] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v49 = v13[2];
      uint64_t v50 = (unint64_t *)v13[2];
      if (v50)
      {
        unint64_t *v50 = *v50 & 7 | v49;
      }
      else
      {
        uint64_t v51 = v13[3];
        uint64_t v52 = ***(int32x2_t ****)v51;
        unint64_t v53 = (unint64_t)v52[303];
        if (v53 <= v49)
        {
          uint64_t v54 = v52[305].u32[0];
          if (v53 + 16 * v54 > v49)
          {
            unsigned int v55 = v54 - 1;
            LODWORD(v56) = v55 & ((v51 >> 4) ^ (v51 >> 9));
            uint64_t v57 = (uint64_t *)(v53 + 16 * v56);
            uint64_t v58 = *v57;
            if (v51 == *v57)
            {
LABEL_73:
              *uint64_t v57 = -8192;
              v52[304] = vadd_s32(v52[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v51 = v13[3];
            }
            else
            {
              int v59 = 1;
              while (v58 != -4096)
              {
                int v60 = v56 + v59++;
                uint64_t v56 = v60 & v55;
                uint64_t v58 = *(void *)(v53 + 16 * v56);
                if (v51 == v58)
                {
                  uint64_t v57 = (uint64_t *)(v53 + 16 * v56);
                  goto LABEL_73;
                }
              }
            }
            *(unsigned char *)(v51 + 17) &= ~1u;
          }
        }
      }
      int v17 = v69;
    }
    v13[3] = v17;
    if (v17 != (void ***)-4096 && v17 != (void ***)-8192 && v17 != 0)
    {
      unint64_t v19 = v67;
      uint64_t v20 = (void *)(v67 & 0xFFFFFFFFFFFFFFF8);
      v13[2] = *(void *)(v67 & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v20 = v13 + 1;
      v13[1] = v19 & 0xFFFFFFFFFFFFFFF8 | v13[1] & 7;
      uint64_t v21 = (unint64_t *)v13[2];
      if (v21) {
        *uint64_t v21 = *v21 & 7 | (unint64_t)(v13 + 2);
      }
    }
  }
  v13[4] = v70;
  uint64_t v22 = v71;
  uint64_t v71 = 0;
  v13[5] = v22;
  unsigned int v14 = *(_DWORD *)(a2 + 16);
  char v23 = 1;
LABEL_30:
  uint64_t v24 = *(void *)a2;
  uint64_t result = v71;
  uint64_t v71 = 0;
  if (result)
  {
    unsigned int v61 = v14;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
    unsigned int v14 = v61;
  }
  if (v69 != (void ***)-8192 && v69 != (void ***)-4096 && v69)
  {
    unint64_t v26 = v67 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v67 & 0xFFFFFFFFFFFFFFF8) = v68;
    if (v68)
    {
      *int32x2_t v68 = *v68 & 7 | v26;
    }
    else
    {
      uint64_t v27 = v69;
      int v28 = (int32x2_t *)***v69;
      unint64_t v29 = (unint64_t)v28[303];
      if (v29 <= v26)
      {
        uint64_t v30 = v28[305].u32[0];
        if (v29 + 16 * v30 > v26)
        {
          unsigned int v31 = v30 - 1;
          LODWORD(v32) = v31 & ((v69 >> 4) ^ (v69 >> 9));
          uint64_t v33 = (void *)(v29 + 16 * v32);
          unint64_t v34 = (void ***)*v33;
          if (v69 == (void ***)*v33)
          {
LABEL_43:
            *uint64_t v33 = -8192;
            v28[304] = vadd_s32(v28[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v27 = v69;
          }
          else
          {
            int v35 = 1;
            while (v34 != (void ***)-4096)
            {
              int v36 = v32 + v35++;
              uint64_t v32 = v36 & v31;
              unint64_t v34 = *(void ****)(v29 + 16 * v32);
              if (v69 == v34)
              {
                uint64_t v33 = (void *)(v29 + 16 * v32);
                goto LABEL_43;
              }
            }
          }
          *((unsigned char *)v27 + 17) &= ~1u;
        }
      }
    }
  }
  if (v64 != (void ***)-8192 && v64 != (void ***)-4096 && v64 != 0)
  {
    unint64_t v38 = v62 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v62 & 0xFFFFFFFFFFFFFFF8) = v63;
    if (v63)
    {
      *unint64_t v63 = *v63 & 7 | v38;
    }
    else
    {
      uint64_t v39 = v64;
      int v40 = (int32x2_t *)***v64;
      unint64_t v41 = (unint64_t)v40[303];
      if (v41 <= v38)
      {
        uint64_t v42 = v40[305].u32[0];
        if (v41 + 16 * v42 > v38)
        {
          unsigned int v43 = v42 - 1;
          LODWORD(v44) = v43 & ((v64 >> 4) ^ (v64 >> 9));
          uint64_t v45 = (void *)(v41 + 16 * v44);
          uint64_t v46 = (void ***)*v45;
          if (v64 == (void ***)*v45)
          {
LABEL_59:
            *uint64_t v45 = -8192;
            v40[304] = vadd_s32(v40[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v39 = v64;
          }
          else
          {
            int v47 = 1;
            while (v46 != (void ***)-4096)
            {
              int v48 = v44 + v47++;
              uint64_t v44 = v48 & v43;
              uint64_t v46 = *(void ****)(v41 + 16 * v44);
              if (v64 == v46)
              {
                uint64_t v45 = (void *)(v41 + 16 * v44);
                goto LABEL_59;
              }
            }
          }
          *((unsigned char *)v39 + 17) &= ~1u;
        }
      }
    }
  }
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v24 + 48 * v14;
  *(unsigned char *)(a1 + 16) = v23;
  return result;
}

void *sub_1CC008E98(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = sub_1CC008788((void *)a1);
  v48[0] = 2;
  v48[1] = 0;
  uint64_t v49 = -4096;
  uint64_t v50 = 0;
  uint64_t v46 = 0;
  int v47 = &off_1F2603968;
  v44[0] = 2;
  v44[1] = 0;
  uint64_t v45 = -8192;
  if (a2 != a3)
  {
    do
    {
      uint64_t v7 = a2[3];
      if (v7 != v49 && v7 != v45)
      {
        uint64_t v51 = 0;
        sub_1CC0088B8(*(void *)a1, *(_DWORD *)(a1 + 16), v7, &v51);
        BOOL v9 = v51;
        uint64_t v10 = v51[3];
        uint64_t v11 = a2[3];
        if (v10 != v11)
        {
          BOOL v12 = v10 == -4096 || v10 == 0;
          if (!v12 && v10 != -8192)
          {
            unint64_t v31 = v51[1] & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v31 = v51[2];
            uint64_t v32 = (unint64_t *)v9[2];
            if (v32)
            {
              *uint64_t v32 = *v32 & 7 | v31;
            }
            else
            {
              uint64_t v33 = v9[3];
              unint64_t v34 = ***(int32x2_t ****)v33;
              unint64_t v35 = (unint64_t)v34[303];
              if (v35 <= v31)
              {
                uint64_t v36 = v34[305].u32[0];
                if (v35 + 16 * v36 > v31)
                {
                  unsigned int v37 = v36 - 1;
                  LODWORD(v38) = v37 & ((v33 >> 4) ^ (v33 >> 9));
                  uint64_t v39 = (uint64_t *)(v35 + 16 * v38);
                  uint64_t v40 = *v39;
                  if (v33 == *v39)
                  {
LABEL_48:
                    *uint64_t v39 = -8192;
                    v34[304] = vadd_s32(v34[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v33 = v9[3];
                  }
                  else
                  {
                    int v41 = 1;
                    while (v40 != -4096)
                    {
                      int v42 = v38 + v41++;
                      uint64_t v38 = v42 & v37;
                      uint64_t v40 = *(void *)(v35 + 16 * v38);
                      if (v33 == v40)
                      {
                        uint64_t v39 = (uint64_t *)(v35 + 16 * v38);
                        goto LABEL_48;
                      }
                    }
                  }
                  *(unsigned char *)(v33 + 17) &= ~1u;
                }
              }
            }
            uint64_t v11 = a2[3];
          }
          v9[3] = v11;
          if (v11 != -4096 && v11 != -8192 && v11 != 0)
          {
            uint64_t v14 = a2[1];
            v9[2] = *(void *)(v14 & 0xFFFFFFFFFFFFFFF8);
            *(void *)(v14 & 0xFFFFFFFFFFFFFFF8) = v9 + 1;
            v9[1] = v14 & 0xFFFFFFFFFFFFFFF8 | v9[1] & 7;
            int v15 = (unint64_t *)v9[2];
            if (v15) {
              *int v15 = *v15 & 7 | (unint64_t)(v9 + 2);
            }
          }
        }
        v9[4] = a2[4];
        uint64_t v16 = a2[5];
        a2[5] = 0;
        v9[5] = v16;
        ++*(_DWORD *)(a1 + 8);
        uint64_t result = (void *)a2[5];
        a2[5] = 0;
        if (result) {
          uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 24))(result);
        }
      }
      uint64_t v17 = a2[3];
      if (v17 != -4096 && v17 != -8192 && v17 != 0)
      {
        unint64_t v19 = a2[1] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v19 = a2[2];
        uint64_t v20 = (unint64_t *)a2[2];
        if (v20)
        {
          *uint64_t v20 = *v20 & 7 | v19;
        }
        else
        {
          uint64_t v21 = a2[3];
          uint64_t v22 = ***(int32x2_t ****)v21;
          unint64_t v23 = (unint64_t)v22[303];
          if (v23 <= v19)
          {
            uint64_t v24 = v22[305].u32[0];
            if (v23 + 16 * v24 > v19)
            {
              unsigned int v25 = v24 - 1;
              LODWORD(v26) = v25 & ((v21 >> 4) ^ (v21 >> 9));
              uint64_t v27 = (uint64_t *)(v23 + 16 * v26);
              uint64_t v28 = *v27;
              if (v21 == *v27)
              {
LABEL_34:
                *uint64_t v27 = -8192;
                v22[304] = vadd_s32(v22[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v21 = a2[3];
              }
              else
              {
                int v29 = 1;
                while (v28 != -4096)
                {
                  int v30 = v26 + v29++;
                  uint64_t v26 = v30 & v25;
                  uint64_t v28 = *(void *)(v23 + 16 * v26);
                  if (v21 == v28)
                  {
                    uint64_t v27 = (uint64_t *)(v23 + 16 * v26);
                    goto LABEL_34;
                  }
                }
              }
              *(unsigned char *)(v21 + 17) &= ~1u;
            }
          }
        }
      }
      a2 += 6;
    }
    while (a2 != a3);
    if (v45 != -8192 && v45 != -4096 && v45 != 0) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList(v44);
    }
  }
  if (v49 != -4096 && v49 != -8192)
  {
    if (v49) {
      return llvm::ValueHandleBase::RemoveFromUseList(v48);
    }
  }
  return result;
}

uint64_t sub_1CC00924C(uint64_t a1)
{
  *(void *)a1 = &unk_1F26038B0;
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 736), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 712), 8);
  sub_1CC009354(a1 + 672);
  sub_1CC009470((_DWORD *)(a1 + 648));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 648), 8);
  sub_1CC009354(a1 + 608);
  sub_1CC0096B4((uint64_t *)(a1 + 584));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 584), 8);
  uint64_t v2 = *(void **)(a1 + 560);
  if (v2 != (void *)(a1 + 576)) {
    free(v2);
  }
  sub_1CC0098F4(*(void **)(a1 + 544));
  sub_1CC009970((void **)(a1 + 104));
  if ((*(unsigned char *)(a1 + 32) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 40), 8);
  }
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 72))(v3);
  }
  return a1;
}

uint64_t sub_1CC009354(uint64_t result)
{
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v1 = result;
    sub_1CC009394(result);
    uint64_t result = MEMORY[0x1D25D9CD0](*(void *)v1, 8);
    *(unsigned char *)(v1 + 24) = 0;
  }
  return result;
}

uint64_t sub_1CC009394(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 16 * v1;
    uint64_t v3 = (unsigned __int8 **)(*(void *)result + 8);
    do
    {
      uint64_t v4 = (uint64_t)*(v3 - 1);
      if (v4 != -4096 && v4 != -8192)
      {
        unsigned int v5 = *v3;
        if (*v3)
        {
          int v6 = *v5;
          if ((v6 - 4) > 0x1E)
          {
            if ((v6 - 3) >= 0xFFFFFFFE) {
              uint64_t v7 = *v3;
            }
            else {
              uint64_t v7 = 0;
            }
            if ((v6 - 3) < 0xFFFFFFFE)
            {
              if (v6 == 3) {
                *((void *)v5 + 1) = 0;
              }
              goto LABEL_4;
            }
            unint64_t v8 = (unint64_t)(v7 + 8);
          }
          else
          {
            if ((v5[1] & 0x7F) != 2 && !*((_DWORD *)v5 + 3)) {
              goto LABEL_4;
            }
            uint64_t v9 = *((void *)v5 + 2);
            if ((v9 & 4) == 0) {
              goto LABEL_4;
            }
            unint64_t v8 = v9 & 0xFFFFFFFFFFFFFFF8;
            if (!v8) {
              goto LABEL_4;
            }
          }
          uint64_t v10 = v3;
          uint64_t result = sub_1CC5FA668(v8 + 16, &v10);
        }
      }
LABEL_4:
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

_DWORD *sub_1CC009470(_DWORD *result)
{
  unsigned int v1 = result[4];
  if (v1)
  {
    v24[0] = 2;
    v24[1] = 0;
    uint64_t v25 = -4096;
    uint64_t v26 = 0;
    uint64_t v22 = 0;
    unint64_t v23 = &off_1F2603968;
    v20[0] = 2;
    v20[1] = 0;
    uint64_t v21 = -8192;
    uint64_t v2 = *(void **)result;
    uint64_t v3 = *(void *)result + 48 * v1;
    do
    {
      uint64_t v4 = v2[3];
      if (v4 != v25 && v4 != v21)
      {
        uint64_t result = (_DWORD *)v2[5];
        v2[5] = 0;
        if (result)
        {
          uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 24))(result);
          uint64_t v4 = v2[3];
        }
      }
      if (v4 != -4096 && v4 != -8192 && v4 != 0)
      {
        unint64_t v7 = v2[1] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v7 = v2[2];
        unint64_t v8 = (unint64_t *)v2[2];
        if (v8)
        {
          unint64_t *v8 = *v8 & 7 | v7;
        }
        else
        {
          uint64_t v9 = v2[3];
          uint64_t v10 = ***(int32x2_t ****)v9;
          unint64_t v11 = (unint64_t)v10[303];
          if (v11 <= v7)
          {
            uint64_t v12 = v10[305].u32[0];
            if (v11 + 16 * v12 > v7)
            {
              unsigned int v13 = v12 - 1;
              LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
              int v15 = (uint64_t *)(v11 + 16 * v14);
              uint64_t v16 = *v15;
              if (v9 == *v15)
              {
LABEL_26:
                *int v15 = -8192;
                v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v9 = v2[3];
              }
              else
              {
                int v17 = 1;
                while (v16 != -4096)
                {
                  int v18 = v14 + v17++;
                  uint64_t v14 = v18 & v13;
                  uint64_t v16 = *(void *)(v11 + 16 * v14);
                  if (v9 == v16)
                  {
                    int v15 = (uint64_t *)(v11 + 16 * v14);
                    goto LABEL_26;
                  }
                }
              }
              *(unsigned char *)(v9 + 17) &= ~1u;
            }
          }
        }
      }
      v2 += 6;
    }
    while (v2 != (void *)v3);
    if (v21 != -8192 && v21 != -4096 && v21 != 0) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList(v20);
    }
    if (v25 != -4096 && v25 != -8192)
    {
      if (v25) {
        return llvm::ValueHandleBase::RemoveFromUseList(v24);
      }
    }
  }
  return result;
}

void sub_1CC0096B4(uint64_t *a1)
{
  uint64_t v1 = *((unsigned int *)a1 + 4);
  if (v1)
  {
    v25[0] = 2;
    v25[1] = 0;
    uint64_t v26 = -4096;
    uint64_t v27 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = &off_1F2603940;
    v21[0] = 2;
    v21[1] = 0;
    uint64_t v22 = -8192;
    uint64_t v2 = *a1;
    uint64_t v3 = *a1 + (v1 << 7);
    do
    {
      uint64_t v4 = *(void *)(v2 + 24);
      if (v4 != v26 && v4 != v22)
      {
        int v6 = *(void **)(v2 + 80);
        if (v6 != (void *)(v2 + 96)) {
          free(v6);
        }
        if ((*(unsigned char *)(v2 + 40) & 1) == 0) {
          MEMORY[0x1D25D9CD0](*(void *)(v2 + 48), 8);
        }
        uint64_t v4 = *(void *)(v2 + 24);
      }
      if (v4 != -4096 && v4 != -8192 && v4 != 0)
      {
        unint64_t v8 = *(void *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v8 = *(void *)(v2 + 16);
        uint64_t v9 = *(unint64_t **)(v2 + 16);
        if (v9)
        {
          *uint64_t v9 = *v9 & 7 | v8;
        }
        else
        {
          uint64_t v10 = *(void *)(v2 + 24);
          unint64_t v11 = ***(int32x2_t ****)v10;
          unint64_t v12 = (unint64_t)v11[303];
          if (v12 <= v8)
          {
            uint64_t v13 = v11[305].u32[0];
            if (v12 + 16 * v13 > v8)
            {
              unsigned int v14 = v13 - 1;
              LODWORD(v15) = v14 & ((v10 >> 4) ^ (v10 >> 9));
              uint64_t v16 = (uint64_t *)(v12 + 16 * v15);
              uint64_t v17 = *v16;
              if (v10 == *v16)
              {
LABEL_29:
                *uint64_t v16 = -8192;
                v11[304] = vadd_s32(v11[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v10 = *(void *)(v2 + 24);
              }
              else
              {
                int v18 = 1;
                while (v17 != -4096)
                {
                  int v19 = v15 + v18++;
                  uint64_t v15 = v19 & v14;
                  uint64_t v17 = *(void *)(v12 + 16 * v15);
                  if (v10 == v17)
                  {
                    uint64_t v16 = (uint64_t *)(v12 + 16 * v15);
                    goto LABEL_29;
                  }
                }
              }
              *(unsigned char *)(v10 + 17) &= ~1u;
            }
          }
        }
      }
      v2 += 128;
    }
    while (v2 != v3);
    if (v22 != -8192 && v22 != -4096 && v22 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList(v21);
    }
    if (v26 != -4096 && v26 != -8192)
    {
      if (v26) {
        llvm::ValueHandleBase::RemoveFromUseList(v25);
      }
    }
  }
}

void sub_1CC0098F4(void *a1)
{
  if (a1)
  {
    sub_1CC0098F4(*a1);
    sub_1CC0098F4(a1[1]);
    uint64_t v3 = a1[5];
    a1[5] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
    }
    operator delete(a1);
  }
}

void **sub_1CC009970(void **result)
{
  uint64_t v1 = (void **)*result;
  unsigned int v2 = *((_DWORD *)result + 2);
  if (v2)
  {
    int v6 = result;
    unint64_t v7 = (char *)*result;
    uint64_t v4 = 104 * v2;
    do
    {
      unsigned int v5 = *(char **)&v7[v4 - 48];
      if (&v7[v4 - 32] != v5) {
        free(v5);
      }
      if ((v7[v4 - 88] & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)&v7[v4 - 80], 8);
      }
      v4 -= 104;
    }
    while (v4);
    uint64_t result = v6;
    uint64_t v1 = (void **)*v6;
  }
  if (v1 != result + 2)
  {
    uint64_t v3 = result;
    free(v1);
    return v3;
  }
  return result;
}

uint64_t sub_1CC009A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v37[19] = *MEMORY[0x1E4F143B8];
  int v6 = *(llvm::Module **)(a1 + 40);
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)(a1 + 16) == 3 && (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 0) {
      return 0;
    }
  }
  else if (*(void *)(a1 + 72) == a1 + 72 && (*(unsigned char *)(a1 + 34) & 0x80) == 0)
  {
    return 0;
  }
  int v8 = (*(unsigned __int16 *)(a1 + 18) >> 4) & 0x3FF;
  if (v8 == 105)
  {
    LODWORD(v32) = 100;
    if (sub_1CC00B30C((uint64_t ***)a1, (uint64_t)".thread_invariants", 18, (uint64_t)"", 0, (__int32 *)&v32, 1)) {
      return 5;
    }
    return 6;
  }
  unsigned int v9 = v8 - 100;
  if (v9)
  {
    if (v9 < 9) {
      return 6;
    }
    uint64_t v32 = v34;
    uint64_t v33 = 0x800000000;
    llvm::Module::getModuleFlagsMetadata(v6, (uint64_t)&v32);
    if (v33)
    {
      uint64_t v10 = (uint64_t *)((char *)v32 + 16);
      uint64_t v11 = 24 * v33;
      while (1)
      {
        uint64_t v12 = *(void *)(*(v10 - 1) + 8);
        if (*(void *)v12 == 9)
        {
          uint64_t v13 = *(void *)(v12 + 24);
          uint64_t v14 = *(unsigned __int8 *)(v12 + 32);
          if (*(void *)"PIC Level" == v13 && aPicLevel[8] == v14) {
            break;
          }
        }
        v10 += 3;
        v11 -= 24;
        if (!v11) {
          goto LABEL_27;
        }
      }
      uint64_t v16 = *v10;
    }
    else
    {
LABEL_27:
      uint64_t v16 = 0;
    }
    if (v32 == v34)
    {
      if (!v16) {
        goto LABEL_30;
      }
    }
    else
    {
      free(v32);
      if (!v16) {
        goto LABEL_30;
      }
    }
    uint64_t v27 = *(void *)(v16 + 128);
    uint64_t v28 = (void *)(v27 + 24);
    if (*(_DWORD *)(v27 + 32) >= 0x41u) {
      uint64_t v28 = (void *)*v28;
    }
    if (*(_DWORD *)v28 && (*(_DWORD *)(a1 + 32) & 0xF) == 0 && (*(_DWORD *)(a1 + 32) & 0x30) != 0x10) {
      return 7;
    }
LABEL_30:
    sub_1CD3BBE1C(&v29, *(llvm::Module **)(a1 + 40));
    if (sub_1CD3BBE9C((uint64_t)&v29, a1)) {
      return 8;
    }
    if (llvm::Function::hasAddressTaken((llvm::Function *)a1, 0, 0, 1, 0, 0))
    {
      sub_1CC00B604(a2, (llvm::Type **)a1);
      uint64_t v32 = (void *)a1;
      if (*(unsigned char *)(sub_1CC00C094(a2, (uint64_t *)&v32) + 8)) {
        return 3;
      }
      else {
        return 9;
      }
    }
    for (uint64_t i = *(void *)(a1 + 8); i; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v18 = *(void *)(i + 24);
      int v19 = *(unsigned __int8 *)(v18 + 16);
      if (v19 != 4)
      {
        if (v19 != 84) {
          uint64_t v18 = 0;
        }
        BOOL v20 = v18 && v18 - 32 == i;
        if (v20 && *(void *)(*(void *)(v18 + 40) + 56) != a1) {
          return 4;
        }
      }
    }
    sub_1CC00C8B8((char *)&v32, *(void *)a3, *(_DWORD *)(a3 + 16), a1);
    if (v36)
    {
      uint64_t v21 = (uint64_t *)v35;
      do
      {
        uint64_t v22 = *v21;
        while (1)
        {
          uint64_t v22 = *(void *)(v22 + 8);
          if (!v22) {
            break;
          }
          uint64_t v23 = *(void *)(v22 + 24);
          int v24 = *(unsigned __int8 *)(v23 + 16);
          if (v24 != 4)
          {
            if (v24 != 84) {
              uint64_t v23 = 0;
            }
            BOOL v25 = v23 && v23 - 32 == v22;
            if (v25 && *(void *)(*(void *)(v23 + 40) + 56) != a1)
            {
              int v26 = 1;
              goto LABEL_66;
            }
          }
        }
        ++v21;
      }
      while (v21 != (uint64_t *)((char *)v35 + 8 * v36));
    }
    int v26 = 0;
LABEL_66:
    if (v35 != v37) {
      free(v35);
    }
    if (v32)
    {
      if (v26) {
        return 4;
      }
    }
    else
    {
      MEMORY[0x1D25D9CD0](v33, 8);
      if (v26) {
        return 4;
      }
    }
    return 10;
  }
  uint64_t v32 = (void *)0x6600000069;
  LODWORD(v33) = 101;
  if (sub_1CC00B30C((uint64_t ***)a1, (uint64_t)"", 0, (uint64_t)".thread_invariants", 18, (__int32 *)&v32, 3)) {
    return 1;
  }
  uint64_t v31 = 0x6A00000067;
  *(_OWORD *)__s = *(_OWORD *)"e";
  if (!sub_1CC00B30C((uint64_t ***)a1, (uint64_t)"", 0, (uint64_t)".constant_program", 17, __s, 6)
    && !sub_1CC00B30C((uint64_t ***)a1, (uint64_t)"", 0, (uint64_t)".constant_program.cfg", 21, __s, 6))
  {
    return 6;
  }
  return 2;
}

void sub_1CC009E5C()
{
}

void sub_1CC00A570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v44 = 1;
  int64x2_t v45 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  int64x2_t v46 = v45;
  v47[0] = v48;
  v47[1] = (void *)0x400000000;
  unsigned int v55 = v57;
  uint64_t v56 = 0x400000000;
  uint64_t v49 = 1;
  int64x2_t v50 = v45;
  int64x2_t v51 = v45;
  uint64_t v7 = a1 + 32;
  uint64_t v52 = v54;
  uint64_t v53 = 0x400000000;
  __int16 v8 = *(_WORD *)(a2 + 18);
  if (sub_1CC009A1C(a2, a1 + 32, a3) >= 5)
  {
    if ((v8 & 0x3FF0) != 0x690
      || (*(void *)__s = 0x6800000067,
          !sub_1CC00B30C((uint64_t ***)a2, (uint64_t)"", 0, (uint64_t)".sample_invariants", 18, __s, 2)))
    {
      *(void *)__s = a2;
      sub_1CC00FA08((uint64_t)&v44, (uint64_t *)__s);
    }
  }
  sub_1CC0124B4((uint64_t)&v55, (uint64_t)&v49, v7, a3, a2);
  unsigned int v9 = v56;
  if (!v56)
  {
    int v10 = 0;
    goto LABEL_8;
  }
  int v10 = 0;
  do
  {
    uint64_t v11 = v55[--v9];
    LODWORD(v56) = v9;
    uint64_t v12 = *(void *)(v11 + 8);
    if (!v12) {
      continue;
    }
    do
    {
      uint64_t v37 = *(void *)(v12 + 24);
      int v38 = *(unsigned __int8 *)(v37 + 16);
      if (v38 != 4)
      {
        if (v38 != 84) {
          uint64_t v37 = 0;
        }
        if (v37 && v37 - 32 == v12)
        {
          *(void *)__s = *(void *)(*(void *)(v37 + 40) + 56);
          unsigned int v40 = sub_1CC009A1C(*(uint64_t *)__s, v7, a3);
          if (v40 < 5)
          {
            uint64_t v43 = 0;
            uint64_t v43 = sub_1CC012358(*(uint64_t ****)__s);
            if (!v43) {
              goto LABEL_63;
            }
            int v41 = &v43;
          }
          else
          {
            v10 |= v40 == 8;
            int v41 = (uint64_t *)__s;
          }
          sub_1CC00FA08((uint64_t)&v44, v41);
LABEL_63:
          sub_1CC0124B4((uint64_t)&v55, (uint64_t)&v49, v7, a3, *(uint64_t *)__s);
        }
      }
      uint64_t v12 = *(void *)(v12 + 8);
    }
    while (v12);
    unsigned int v9 = v56;
  }
  while (v9);
LABEL_8:
  *(void *)__s = sub_1CC012358((uint64_t ***)a2);
  if (*(void *)__s) {
    sub_1CC00FA08((uint64_t)&v44, (uint64_t *)__s);
  }
  sub_1CD3BBE1C(&v43, *(llvm::Module **)(a2 + 40));
  if ((sub_1CD3BBE9C((uint64_t)&v43, a2) | v10))
  {
    uint64_t v26 = *(void *)(v6 + 32);
    if (v26 != v6 + 24)
    {
      while (2)
      {
        uint64_t v27 = v26 - 56;
        if (!v26) {
          uint64_t v27 = 0;
        }
        if ((*(unsigned char *)(v27 + 23) & 0x10) == 0) {
          goto LABEL_43;
        }
        uint64_t v28 = ***(void ***)v27;
        uint64_t v29 = *(void *)(v28 + 152);
        uint64_t v30 = *(unsigned int *)(v28 + 168);
        if (v30)
        {
          LODWORD(v31) = (v30 - 1) & ((v27 >> 4) ^ (v27 >> 9));
          uint64_t v32 = (uint64_t *)(v29 + 16 * v31);
          uint64_t v33 = *v32;
          if (*v32 != v27)
          {
            int v34 = 1;
            while (v33 != -4096)
            {
              int v35 = v31 + v34++;
              uint64_t v31 = v35 & (v30 - 1);
              uint64_t v33 = *(void *)(v29 + 16 * v31);
              if (v33 == v27)
              {
                uint64_t v32 = (uint64_t *)(v29 + 16 * v31);
                goto LABEL_42;
              }
            }
            goto LABEL_45;
          }
        }
        else
        {
LABEL_45:
          uint64_t v32 = (uint64_t *)(v29 + 16 * v30);
        }
LABEL_42:
        unsigned int v36 = (void *)v32[1];
        if (*v36 == 8 && v36[2] == 0x6E69616D2E636761)
        {
          uint64_t v42 = v27;
          sub_1CC00FA08((uint64_t)&v44, &v42);
          break;
        }
LABEL_43:
        uint64_t v26 = *(void *)(v26 + 8);
        if (v26 == v6 + 24) {
          break;
        }
        continue;
      }
    }
  }
  if (v52 != v54) {
    free(v52);
  }
  if ((v49 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v50.i64[0], 8);
  }
  if (v55 != (void *)v57) {
    free(v55);
  }
  uint64_t v13 = sub_1CC011FF0(a1 + 584, (int32x2_t ****)a2);
  sub_1CC012764(v13, (unsigned int *)&v44);
  sub_1CC00811C(v13 + 40, (uint64_t)v47);
  if (v47[0] != v48) {
    free(v47[0]);
  }
  if ((v44 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v45.i64[0], 8);
  }
  uint64_t v14 = *(void *)(a1 + 584);
  uint64_t v15 = *(unsigned int *)(a1 + 600);
  if (v15)
  {
    uint64_t v16 = (v15 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v17 = v14 + (v16 << 7);
    uint64_t v18 = *(void *)(v17 + 24);
    if (v18 == a2) {
      goto LABEL_23;
    }
    int v24 = 1;
    while (v18 != -4096)
    {
      int v25 = v16 + v24++;
      uint64_t v16 = v25 & (v15 - 1);
      uint64_t v17 = v14 + (v16 << 7);
      uint64_t v18 = *(void *)(v17 + 24);
      if (v18 == a2) {
        goto LABEL_23;
      }
    }
  }
  uint64_t v17 = v14 + (v15 << 7);
LABEL_23:
  uint64_t v19 = *(unsigned int *)(v17 + 88);
  if (v19)
  {
    BOOL v20 = *(unint64_t **)(v17 + 80);
    uint64_t v21 = 8 * v19;
    do
    {
      unint64_t v22 = *v20++;
      uint64_t v23 = sub_1CC012314(*(void **)(a1 + 544), v22);
      (*(void (**)(void, uint64_t))(*(void *)*v23 + 40))(*v23, a2);
      v21 -= 8;
    }
    while (v21);
  }
}

uint64_t sub_1CC00AA20()
{
  return 6;
}

uint64_t sub_1CC00AA28()
{
  return 2;
}

uint64_t sub_1CC00AA30(uint64_t a1, int a2)
{
  return dword_1CFAC3788[a2];
}

uint64_t sub_1CC00AA40(uint64_t a1, int a2)
{
  return llvm::AGX2CommonRegisterInfo::RegSize[qword_1CFAC37D8[a2]];
}

uint64_t sub_1CC00AA5C()
{
  return 1;
}

uint64_t sub_1CC00AA64(uint64_t a1, int a2)
{
  return llvm::AGX2CommonRegisterInfo::RegSize[a2];
}

uint64_t sub_1CC00AA74(uint64_t a1, int a2)
{
  return llvm::AGX2CommonRegisterInfo::RegLimits[a2];
}

void sub_1CC00AA84()
{
}

uint64_t sub_1CC00AA98(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 96 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      __int16 v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          __int16 v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        uint64_t v6 = (void *)(a1 + 96 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t result = 0;
  }
  *a4 = v6;
  return result;
}

void *sub_1CC00AB24(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(96 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC00ABFC(a1, v4, v4 + 96 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 96 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 12;
      v11 -= 96;
    }
    while (v11);
  }
  return result;
}

void sub_1CC00ABFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = 96 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 12;
      v8 -= 96;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v12 = 0;
      sub_1CC00AA98(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v12);
      uint64_t v10 = v12;
      *(void *)uint64_t v12 = *(void *)a2;
      sub_1CC00ACE8(v10 + 2, (unsigned int *)(a2 + 8));
      ++*(_DWORD *)(a1 + 8);
      uint64_t v11 = *(void **)(a2 + 48);
      if ((void *)(a2 + 64) != v11) {
        free(v11);
      }
      if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)(a2 + 16), 8);
      }
    }
    a2 += 96;
  }
}

unsigned int *sub_1CC00ACE8(unsigned int *a1, unsigned int *a2)
{
  int64x2_t v4 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(void *)a1 = 1;
  *(int64x2_t *)(a1 + 2) = v4;
  unint64_t v5 = (int *)(a1 + 2);
  *(int64x2_t *)(a1 + 6) = v4;
  unsigned int v6 = *a2;
  *a2 = *a1 & 0xFFFFFFFE | *a2 & 1;
  unsigned int v7 = a1[1];
  *a1 = v6 & 0xFFFFFFFE | *a1 & 1;
  a1[1] = a2[1];
  a2[1] = v7;
  unsigned int v8 = *a1;
  unsigned int v9 = *a2;
  if (*a1)
  {
    unsigned int v8 = *a2;
    uint64_t v10 = (int *)a2;
    uint64_t v11 = a1;
    if (v9)
    {
      uint64_t v12 = 0;
      uint64_t v13 = (int *)(a2 + 2);
      do
      {
        uint64_t v14 = *(void *)&v5[v12];
        *(void *)&v5[v12] = *(void *)&v13[v12];
        *(void *)&v13[v12] = v14;
        v12 += 2;
      }
      while (v12 != 8);
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v10 = (int *)a1;
    uint64_t v11 = a2;
    if ((v9 & 1) == 0)
    {
      uint64_t v18 = *((void *)a1 + 1);
      *((void *)a1 + 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v18;
      LODWORD(v18) = a1[4];
      a1[4] = a2[4];
      a2[4] = v18;
      goto LABEL_5;
    }
  }
  long long v20 = *(_OWORD *)(v10 + 2);
  *uint64_t v10 = v8 | 1;
  for (uint64_t i = 2; i != 10; i += 2)
    *(void *)&v10[i] = *(void *)&v11[i];
  *v11 &= ~1u;
  *(_OWORD *)(v11 + 2) = v20;
LABEL_5:
  *((void *)a1 + 5) = a1 + 14;
  *((void *)a1 + 6) = 0x400000000;
  unsigned int v15 = a2[12];
  if (v15 && a1 != a2)
  {
    uint64_t v16 = (int *)*((void *)a2 + 5);
    if (v16 == (int *)(a2 + 14))
    {
      if (v15 >= 5) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(a1 + 14, v16, 8 * a2[12]);
      a1[12] = v15;
    }
    else
    {
      *((void *)a1 + 5) = v16;
      a1[12] = v15;
      a1[13] = a2[13];
      *((void *)a2 + 5) = a2 + 14;
      a2[13] = 0;
    }
    a2[12] = 0;
  }
  return a1;
}

void *sub_1CC00AEB8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 4;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 < 3 * v8)
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
    {
      int v9 = *(_DWORD *)a1 & 1;
      goto LABEL_6;
    }
    sub_1CC00B090(a1, v8);
    uint64_t v18 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v19 = 4;
LABEL_22:
      int v9 = *(_DWORD *)a1 & 1;
      int v20 = v19 - 1;
      unsigned int v21 = ((*a3 >> 4) ^ (*a3 >> 9)) & v20;
      a4 = (void *)(v18 + 8 * v21);
      uint64_t v22 = *a4;
      if (*a3 == *a4) {
        goto LABEL_6;
      }
      uint64_t v16 = 0;
      int v23 = 1;
      while (v22 != -4096)
      {
        if (v16) {
          BOOL v24 = 0;
        }
        else {
          BOOL v24 = v22 == -8192;
        }
        if (v24) {
          uint64_t v16 = a4;
        }
        unsigned int v25 = v21 + v23++;
        unsigned int v21 = v25 & v20;
        a4 = (void *)(v18 + 8 * v21);
        uint64_t v22 = *a4;
        if (*a3 == *a4) {
          goto LABEL_6;
        }
      }
      goto LABEL_15;
    }
    int v19 = *(_DWORD *)(a1 + 16);
    if (v19)
    {
      uint64_t v18 = *(void *)(a1 + 8);
      goto LABEL_22;
    }
LABEL_41:
    int v9 = 0;
    a4 = 0;
    goto LABEL_6;
  }
  sub_1CC00B090(a1, 2 * v8);
  uint64_t v11 = a1 + 8;
  int v6 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v12 = 4;
  }
  else
  {
    int v12 = *(_DWORD *)(a1 + 16);
    if (!v12) {
      goto LABEL_41;
    }
    uint64_t v11 = *(void *)(a1 + 8);
  }
  int v9 = *(_DWORD *)a1 & 1;
  int v13 = v12 - 1;
  unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
  a4 = (void *)(v11 + 8 * v14);
  uint64_t v15 = *a4;
  if (*a3 == *a4) {
    goto LABEL_6;
  }
  uint64_t v16 = 0;
  int v17 = 1;
  while (v15 != -4096)
  {
    if (v16) {
      BOOL v26 = 0;
    }
    else {
      BOOL v26 = v15 == -8192;
    }
    if (v26) {
      uint64_t v16 = a4;
    }
    unsigned int v27 = v14 + v17++;
    unsigned int v14 = v27 & v13;
    a4 = (void *)(v11 + 8 * v14);
    uint64_t v15 = *a4;
    if (*a3 == *a4) {
      goto LABEL_6;
    }
  }
LABEL_15:
  if (v16) {
    a4 = v16;
  }
LABEL_6:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

int *sub_1CC00B090(uint64_t a1, unsigned int a2)
{
  uint64_t v14[4] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CC00B20C((int *)a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  int v6 = v14;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC00B20C((int *)a1, v14, v6);
}

int *sub_1CC00B20C(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    int v6 = result + 10;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    int v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v8 = 4;
        uint64_t v9 = result + 2;
      }
      else
      {
        uint64_t v9 = (int *)*((void *)result + 1);
        int v8 = result[4];
      }
      int v10 = v8 - 1;
      unsigned int v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v12 = &v9[2 * v11];
      uint64_t v13 = *(void *)v12;
      if (v7 != *(void *)v12)
      {
        unsigned int v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            unsigned int v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          uint64_t v12 = &v9[2 * (v17 & v10)];
          uint64_t v13 = *(void *)v12;
          if (v7 == *(void *)v12) {
            goto LABEL_14;
          }
        }
        if (v14) {
          uint64_t v12 = v14;
        }
      }
LABEL_14:
      *(void *)uint64_t v12 = v7;
      *result += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CC00B30C(uint64_t ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int32 *__s, uint64_t a7)
{
  uint64_t v7 = a1[5];
  int v8 = v7 + 3;
  uint64_t v9 = v7[4];
  if (v9 != (uint64_t *)(v7 + 3))
  {
    uint64_t v13 = 0;
    size_t v14 = (4 * a7) >> 2;
    int v15 = &__s[a7];
    unsigned int v58 = (a1 >> 4) ^ (a1 >> 9);
    uint64_t v59 = v15;
    size_t v60 = v14;
    while (1)
    {
      uint64_t v16 = v9 ? (uint64_t)(v9 - 7) : 0;
      unsigned int v17 = wmemchr(__s, (*(unsigned __int16 *)(v16 + 18) >> 4) & 0x3FF, v14);
      uint64_t v18 = v17 ? v17 : v15;
      if (a7 != v18 - __s) {
        break;
      }
LABEL_54:
      uint64_t v9 = (uint64_t *)v9[1];
      if (v9 == (uint64_t *)v8) {
        return v13;
      }
    }
    if ((*((unsigned char *)a1 + 23) & 0x10) == 0)
    {
      uint64_t v28 = 0;
      uint64_t v29 = &byte_1CFBCE98E;
LABEL_19:
      v69[0] = v29;
      v69[1] = v28;
      void v69[2] = a2;
      v69[3] = a3;
      __int16 v70 = 1285;
      llvm::Twine::str((llvm::Twine *)v69, &v71);
      if ((*(unsigned char *)(v16 + 23) & 0x10) == 0)
      {
        uint64_t v40 = 0;
        int v41 = &byte_1CFBCE98E;
LABEL_28:
        v65[0] = v41;
        v65[1] = v40;
        v65[2] = a4;
        uint64_t v65[3] = a5;
        __int16 v66 = 1285;
        llvm::Twine::str((llvm::Twine *)v65, __p);
        char v43 = v73;
        if (v73 >= 0) {
          size_t v44 = v73 & 0x7F;
        }
        else {
          size_t v44 = v72;
        }
        int v45 = v68;
        int64x2_t v46 = (void *)(v68 & 0x7F);
        if (v68 < 0) {
          int64x2_t v46 = __p[1];
        }
        if ((void *)v44 != v46)
        {
          BOOL v56 = 0;
          if ((v68 & 0x80000000) == 0) {
            goto LABEL_50;
          }
          goto LABEL_57;
        }
        if (v68 >= 0) {
          int v47 = __p;
        }
        else {
          int v47 = (void **)__p[0];
        }
        if (v73 < 0)
        {
          BOOL v56 = memcmp(v71, v47, v72) == 0;
        }
        else
        {
          if ((v73 & 0x7F) == 0)
          {
            BOOL v56 = 1;
            if ((v68 & 0x80000000) == 0)
            {
LABEL_50:
              if ((v43 & 0x80) == 0)
              {
LABEL_51:
                if (v56) {
                  uint64_t v13 = v16;
                }
                int v15 = v59;
                size_t v14 = v60;
                goto LABEL_54;
              }
LABEL_58:
              operator delete(v71);
              goto LABEL_51;
            }
LABEL_57:
            operator delete(__p[0]);
            if ((v73 & 0x80) == 0) {
              goto LABEL_51;
            }
            goto LABEL_58;
          }
          uint64_t v48 = (v73 & 0x7F) - 1;
          uint64_t v49 = &v71;
          do
          {
            int v51 = *(unsigned __int8 *)v49;
            uint64_t v49 = (void **)((char *)v49 + 1);
            int v50 = v51;
            int v53 = *(unsigned __int8 *)v47;
            int v47 = (void **)((char *)v47 + 1);
            int v52 = v53;
            BOOL v55 = v48-- != 0;
            BOOL v56 = v50 == v52;
          }
          while (v50 == v52 && v55);
        }
        if ((v45 & 0x80000000) == 0) {
          goto LABEL_50;
        }
        goto LABEL_57;
      }
      uint64_t v31 = ***(void ***)v16;
      uint64_t v32 = *(void *)(v31 + 152);
      uint64_t v33 = *(unsigned int *)(v31 + 168);
      if (v33)
      {
        LODWORD(v34) = (v33 - 1) & ((v16 >> 4) ^ (v16 >> 9));
        int v35 = (uint64_t *)(v32 + 16 * v34);
        uint64_t v36 = *v35;
        if (*v35 == v16)
        {
LABEL_27:
          uint64_t v39 = (void *)v35[1];
          uint64_t v42 = *v39;
          int v41 = (char *)(v39 + 2);
          uint64_t v40 = v42;
          goto LABEL_28;
        }
        int v37 = 1;
        while (v36 != -4096)
        {
          int v38 = v34 + v37++;
          uint64_t v34 = v38 & (v33 - 1);
          uint64_t v36 = *(void *)(v32 + 16 * v34);
          if (v36 == v16)
          {
            int v35 = (uint64_t *)(v32 + 16 * v34);
            goto LABEL_27;
          }
        }
      }
      int v35 = (uint64_t *)(v32 + 16 * v33);
      goto LABEL_27;
    }
    uint64_t v19 = ***a1;
    uint64_t v20 = *(void *)(v19 + 152);
    uint64_t v21 = *(unsigned int *)(v19 + 168);
    if (v21)
    {
      LODWORD(v22) = (v21 - 1) & v58;
      int v23 = (uint64_t ****)(v20 + 16 * v22);
      BOOL v24 = *v23;
      if (*v23 == a1)
      {
LABEL_18:
        unsigned int v27 = v23[1];
        uint64_t v30 = *v27;
        uint64_t v29 = (char *)(v27 + 2);
        uint64_t v28 = v30;
        goto LABEL_19;
      }
      int v25 = 1;
      while (v24 != (uint64_t ***)-4096)
      {
        int v26 = v22 + v25++;
        uint64_t v22 = v26 & (v21 - 1);
        BOOL v24 = *(uint64_t ****)(v20 + 16 * v22);
        if (v24 == a1)
        {
          int v23 = (uint64_t ****)(v20 + 16 * v22);
          goto LABEL_18;
        }
      }
    }
    int v23 = (uint64_t ****)(v20 + 16 * v21);
    goto LABEL_18;
  }
  return 0;
}

void sub_1CC00B604(uint64_t a1, llvm::Type **a2)
{
  v114[4] = *MEMORY[0x1E4F143B8];
  uint64_t v108 = (uint64_t)a2;
  v104[0] = 0;
  if (sub_1CC00C0FC(a1, &v108, v104))
  {
    uint64_t v4 = v104[0];
    int v5 = *(_DWORD *)a1;
  }
  else
  {
    uint64_t v8 = a1 + 8;
    int v5 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      uint64_t v9 = 4;
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = *(unsigned int *)(a1 + 16);
    }
    uint64_t v4 = (void *)(v8 + 16 * v9);
  }
  if (v5)
  {
    uint64_t v6 = a1 + 8;
    uint64_t v7 = 4;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
  }
  if ((void *)(v6 + 16 * v7) != v4) {
    return;
  }
  char v98 = 1;
  uint64_t v99 = 1;
  v100[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v100[1] = v100[0];
  int32x2_t v101 = v103;
  uint64_t v102 = 0x400000000;
  uint64_t v93 = 1;
  v94[0] = v100[0];
  v94[1] = v100[0];
  int v92 = a2;
  BOOL v95 = v97;
  uint64_t v96 = 0x400000000;
  v104[0] = v105;
  v104[1] = (void *)0x400000000;
  uint64_t v108 = 1;
  long long v109 = v100[0];
  long long v110 = v100[0];
  long long v111 = v113;
  uint64_t v112 = 0x400000000;
  unsigned int v10 = (a2 >> 4) ^ (a2 >> 9);
  LOBYTE(v11) = v10 & 3;
  uint64_t v12 = (char *)v94 + 8 * (v10 & 3);
  uint64_t v13 = *(void *)v12;
  if (*(llvm::Type ***)v12 == a2)
  {
LABEL_159:
    unsigned int v18 = 0;
  }
  else
  {
    size_t v14 = 0;
    int v15 = 1;
    while (v13 != -4096)
    {
      if (v14) {
        BOOL v87 = 0;
      }
      else {
        BOOL v87 = v13 == -8192;
      }
      if (v87) {
        size_t v14 = v12;
      }
      char v88 = v11 + v15++;
      unsigned int v11 = v88 & 3;
      uint64_t v12 = (char *)v94 + 8 * v11;
      uint64_t v13 = *(void *)v12;
      if (*(llvm::Type ***)v12 == a2) {
        goto LABEL_159;
      }
    }
    if (v14) {
      uint64_t v16 = v14;
    }
    else {
      uint64_t v16 = v12;
    }
    unsigned int v17 = sub_1CC00AEB8((uint64_t)&v93, (uint64_t)&v92, &v92, v16);
    *unsigned int v17 = v92;
    if (v96 >= HIDWORD(v96)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v95 + v96) = v92;
    LODWORD(v96) = v96 + 1;
    unsigned int v18 = v104[1];
    if (LODWORD(v104[1]) >= HIDWORD(v104[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  *((void *)v104[0] + v18) = a2;
  unsigned int v19 = ++LODWORD(v104[1]);
  int v92 = a2;
  if (v108)
  {
    int v20 = 4;
    uint64_t v21 = &v109;
  }
  else
  {
    int v20 = DWORD2(v109);
    if (!DWORD2(v109))
    {
      uint64_t v28 = 0;
LABEL_26:
      uint64_t v29 = sub_1CC00AEB8((uint64_t)&v108, (uint64_t)&v92, &v92, v28);
      *uint64_t v29 = v92;
      if (v112 >= HIDWORD(v112)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v111[v112] = v92;
      LODWORD(v112) = v112 + 1;
      unsigned int v19 = v104[1];
      goto LABEL_28;
    }
    uint64_t v21 = (long long *)v109;
  }
  int v22 = v20 - 1;
  unsigned int v23 = v22 & v10;
  BOOL v24 = (llvm::Type ***)v21 + (v22 & v10);
  int v25 = *v24;
  if (*v24 != a2)
  {
    int v26 = 0;
    int v27 = 1;
    while (v25 != (llvm::Type **)-4096)
    {
      if (v26) {
        BOOL v89 = 0;
      }
      else {
        BOOL v89 = v25 == (llvm::Type **)-8192;
      }
      if (v89) {
        int v26 = v24;
      }
      unsigned int v90 = v23 + v27++;
      unsigned int v23 = v90 & v22;
      BOOL v24 = (llvm::Type ***)v21 + v23;
      int v25 = *v24;
      if (*v24 == a2) {
        goto LABEL_28;
      }
    }
    if (v26) {
      uint64_t v28 = v26;
    }
    else {
      uint64_t v28 = v24;
    }
    goto LABEL_26;
  }
LABEL_28:
  if (!v19)
  {
    int v30 = 0;
    goto LABEL_89;
  }
  int v30 = 0;
  do
  {
    uint64_t v31 = *((void *)v104[0] + --v19);
    LODWORD(v104[1]) = v19;
    uint64_t v32 = *(void *)(v31 + 8);
    if (!v32) {
      continue;
    }
    do
    {
      uint64_t v33 = *(void *)(v32 + 24);
      int v34 = *(unsigned __int8 *)(v33 + 16);
      if (v34 == 4) {
        goto LABEL_35;
      }
      if (v34 == 84)
      {
        if (*(llvm::Type ***)(v33 - 32) == a2) {
          goto LABEL_35;
        }
LABEL_34:
        int v30 = 1;
        goto LABEL_35;
      }
      unsigned int v35 = *(unsigned __int8 *)(v33 + 16);
      if (v35 >= 0x15)
      {
        unsigned int v36 = v35 - 60;
        BOOL v37 = v36 > 0x19;
        int v38 = (1 << v36) & 0x2860005;
        if (v37 || v38 == 0) {
          goto LABEL_34;
        }
      }
      if (*(llvm::Type **)v33 == *a2 || llvm::Type::canLosslesslyBitCastTo(*a2, *(llvm::Type **)v33))
      {
        int v92 = (llvm::Type **)v33;
        if (v93)
        {
          int v40 = 4;
          int v41 = v94;
          goto LABEL_46;
        }
        int v40 = DWORD2(v94[0]);
        if (DWORD2(v94[0]))
        {
          int v41 = *(_OWORD **)&v94[0];
LABEL_46:
          int v42 = v40 - 1;
          unsigned int v43 = v42 & ((v33 >> 4) ^ (v33 >> 9));
          size_t v44 = (void *)v41 + v43;
          uint64_t v45 = *v44;
          if (v33 == *v44) {
            goto LABEL_35;
          }
          int64x2_t v46 = 0;
          int v47 = 1;
          while (v45 != -4096)
          {
            if (v46) {
              BOOL v60 = 0;
            }
            else {
              BOOL v60 = v45 == -8192;
            }
            if (v60) {
              int64x2_t v46 = v44;
            }
            unsigned int v61 = v43 + v47++;
            unsigned int v43 = v61 & v42;
            size_t v44 = (void *)v41 + v43;
            uint64_t v45 = *v44;
            if (v33 == *v44) {
              goto LABEL_35;
            }
          }
          if (v46) {
            uint64_t v48 = v46;
          }
          else {
            uint64_t v48 = v44;
          }
        }
        else
        {
          uint64_t v48 = 0;
        }
        uint64_t v49 = sub_1CC00AEB8((uint64_t)&v93, (uint64_t)&v92, &v92, v48);
        void *v49 = v92;
        if (v96 >= (unint64_t)HIDWORD(v96)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v95 + v96) = v92;
        LODWORD(v96) = v96 + 1;
        goto LABEL_35;
      }
      if (LODWORD(v104[1]) >= (unint64_t)HIDWORD(v104[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v104[0] + LODWORD(v104[1])) = v33;
      ++LODWORD(v104[1]);
      int v92 = (llvm::Type **)v33;
      if (v108)
      {
        int v50 = 4;
        int v51 = &v109;
LABEL_57:
        int v52 = v50 - 1;
        unsigned int v53 = v52 & ((v33 >> 4) ^ (v33 >> 9));
        uint64_t v54 = (void *)v51 + v53;
        uint64_t v55 = *v54;
        if (v33 == *v54) {
          goto LABEL_35;
        }
        BOOL v56 = 0;
        int v57 = 1;
        while (v55 != -4096)
        {
          if (v56) {
            BOOL v62 = 0;
          }
          else {
            BOOL v62 = v55 == -8192;
          }
          if (v62) {
            BOOL v56 = v54;
          }
          unsigned int v63 = v53 + v57++;
          unsigned int v53 = v63 & v52;
          uint64_t v54 = (void *)v51 + v53;
          uint64_t v55 = *v54;
          if (v33 == *v54) {
            goto LABEL_35;
          }
        }
        if (v56) {
          unsigned int v58 = v56;
        }
        else {
          unsigned int v58 = v54;
        }
        goto LABEL_63;
      }
      int v50 = DWORD2(v109);
      if (DWORD2(v109))
      {
        int v51 = (long long *)v109;
        goto LABEL_57;
      }
      unsigned int v58 = 0;
LABEL_63:
      uint64_t v59 = sub_1CC00AEB8((uint64_t)&v108, (uint64_t)&v92, &v92, v58);
      *uint64_t v59 = v92;
      if (v112 >= (unint64_t)HIDWORD(v112)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v111[v112] = v92;
      LODWORD(v112) = v112 + 1;
LABEL_35:
      uint64_t v32 = *(void *)(v32 + 8);
    }
    while (v32);
    unsigned int v19 = v104[1];
  }
  while (v19);
LABEL_89:
  if (v111 != v113) {
    free(v111);
  }
  if ((v108 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v109, 8);
  }
  if (v104[0] != v105) {
    free(v104[0]);
  }
  if (v30) {
    char v98 = 0;
  }
  if (v96)
  {
    uint64_t v64 = (void **)v95;
    uint64_t v65 = (void **)((char *)v95 + 8 * v96);
    do
    {
      v104[0] = *v64;
      uint64_t v108 = (uint64_t)&unk_1F2603A50;
      *(void *)&long long v109 = a2;
      *((void *)&v109 + 1) = &v99;
      LOBYTE(v110) = 1;
      llvm::PointerMayBeCaptured((llvm *)v104[0], (const llvm::Value *)&v108, 0);
      if (!(_BYTE)v110) {
        char v98 = 0;
      }
      if (v99)
      {
        int v66 = 4;
        unint64_t v67 = v100;
      }
      else
      {
        int v66 = DWORD2(v100[0]);
        if (!DWORD2(v100[0]))
        {
          uint64_t v74 = 0;
LABEL_109:
          uint64_t v75 = (void **)sub_1CC00AEB8((uint64_t)&v99, (uint64_t)v104, v104, v74);
          void *v75 = v104[0];
          if (v102 >= (unint64_t)HIDWORD(v102)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void **)v101 + v102) = v104[0];
          LODWORD(v102) = v102 + 1;
          goto LABEL_111;
        }
        unint64_t v67 = *(_OWORD **)&v100[0];
      }
      int v68 = v66 - 1;
      unsigned int v69 = ((LODWORD(v104[0]) >> 4) ^ (LODWORD(v104[0]) >> 9)) & v68;
      __int16 v70 = (void *)v67 + v69;
      uint64_t v71 = (void *)*v70;
      if (v104[0] != (void *)*v70)
      {
        size_t v72 = 0;
        int v73 = 1;
        while (v71 != (void *)-4096)
        {
          if (v72) {
            BOOL v85 = 0;
          }
          else {
            BOOL v85 = v71 == (void *)-8192;
          }
          if (v85) {
            size_t v72 = v70;
          }
          unsigned int v86 = v69 + v73++;
          unsigned int v69 = v86 & v68;
          __int16 v70 = (void *)v67 + v69;
          uint64_t v71 = (void *)*v70;
          if (v104[0] == (void *)*v70) {
            goto LABEL_111;
          }
        }
        if (v72) {
          uint64_t v74 = v72;
        }
        else {
          uint64_t v74 = v70;
        }
        goto LABEL_109;
      }
LABEL_111:
      ++v64;
    }
    while (v64 != v65);
  }
  uint64_t v108 = 0;
  char v76 = sub_1CC00C33C(a1, (uint64_t)a2, &v108);
  uint64_t v77 = v108;
  if (v76)
  {
    unsigned int v83 = *(_DWORD *)(v108 + 8);
  }
  else
  {
    int v78 = *(_DWORD *)a1 >> 1;
    if (*(_DWORD *)a1) {
      unsigned int v79 = 4;
    }
    else {
      unsigned int v79 = *(_DWORD *)(a1 + 16);
    }
    if (4 * v78 + 4 >= 3 * v79)
    {
      v79 *= 2;
    }
    else if (v79 + ~v78 - *(_DWORD *)(a1 + 4) > v79 >> 3)
    {
      goto LABEL_120;
    }
    sub_1CC00C3E0(a1, v79);
    uint64_t v108 = 0;
    sub_1CC00C33C(a1, (uint64_t)a2, &v108);
    uint64_t v77 = v108;
LABEL_120:
    *(_DWORD *)a1 += 2;
    if (*(void *)v77 != -4096) {
      --*(_DWORD *)(a1 + 4);
    }
    *(void *)uint64_t v77 = a2;
    *(_DWORD *)(v77 + 8) = 0;
    memset(v107, 0, sizeof(v107));
    *(_OWORD *)uint64_t v104 = 0u;
    v105[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    LOBYTE(v104[0]) = 1;
    LODWORD(v104[1]) = 1;
    v105[1] = v105[0];
    v106[0] = v107;
    v106[1] = (void *)0x400000000;
    uint64_t v108 = (uint64_t)a2;
    LOBYTE(v109) = 1;
    sub_1CC00ACE8((unsigned int *)&v109 + 2, (unsigned int *)&v104[1]);
    unint64_t v80 = *(void *)(a1 + 72);
    unsigned int v81 = *(_DWORD *)(a1 + 80);
    if (v81 >= *(_DWORD *)(a1 + 84))
    {
      BOOL v91 = v80 + 104 * v81 > (unint64_t)&v108;
      if (v80 > (unint64_t)&v108 || !v91) {
        sub_1CD48F008();
      }
      sub_1CD48F008();
    }
    uint64_t v82 = v80 + 104 * *(unsigned int *)(a1 + 80);
    *(void *)uint64_t v82 = v108;
    *(unsigned char *)(v82 + 8) = v109;
    sub_1CC00ACE8((unsigned int *)(v82 + 16), (unsigned int *)&v109 + 2);
    ++*(_DWORD *)(a1 + 80);
    if (v113[0] != v114) {
      free(v113[0]);
    }
    if ((BYTE8(v109) & 1) == 0) {
      MEMORY[0x1D25D9CD0](v110, 8);
    }
    if (v106[0] != v107) {
      free(v106[0]);
    }
    if (((uint64_t)v104[1] & 1) == 0) {
      MEMORY[0x1D25D9CD0](*(void *)&v105[0], 8);
    }
    unsigned int v83 = *(_DWORD *)(a1 + 80) - 1;
    *(_DWORD *)(v77 + 8) = v83;
  }
  uint64_t v84 = *(void *)(a1 + 72) + 104 * v83;
  *(unsigned char *)(v84 + 8) = v98;
  sub_1CC00C6F8((unsigned int *)(v84 + 16), (unsigned int *)&v99);
  sub_1CBA6E388(v84 + 56, (const void **)&v101);
  if (v95 != v97) {
    free(v95);
  }
  if ((v93 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)&v94[0], 8);
  }
  if (v101 != v103) {
    free(v101);
  }
  if ((v99 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)&v100[0], 8);
  }
}

uint64_t sub_1CC00C094(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1CC00C838(a1, *a2);
  uint64_t v4 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    uint64_t v5 = 4;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 16);
  }
  BOOL v6 = v4 + 16 * v5 == v3;
  uint64_t v7 = (unsigned int *)(v3 + 8);
  if (v6) {
    uint64_t v7 = (unsigned int *)(a1 + 80);
  }
  return *(void *)(a1 + 72) + 104 * *v7;
}

uint64_t sub_1CC00C0FC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_6;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    unsigned int v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        unsigned int v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_6;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_6:
  *a3 = v7;
  return result;
}

BOOL sub_1CC00C1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v2 + 16);
  if (v3 < 0x1C || *(void *)v2 != **(void **)(a1 + 8)) {
    return v3 > 0x1B;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v19 = *(void *)(a2 + 24);
  uint64_t v6 = v5 + 8;
  if (*(unsigned char *)v5)
  {
    int v7 = 4;
LABEL_6:
    int v8 = v7 - 1;
    unsigned int v9 = v8 & ((v2 >> 4) ^ (v2 >> 9));
    unsigned int v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (v2 == *v10) {
      return v3 > 0x1B;
    }
    BOOL v12 = 0;
    int v13 = 1;
    while (v11 != -4096)
    {
      if (v12) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v11 == -8192;
      }
      if (v17) {
        BOOL v12 = v10;
      }
      unsigned int v18 = v9 + v13++;
      unsigned int v9 = v18 & v8;
      unsigned int v10 = (void *)(v6 + 8 * v9);
      uint64_t v11 = *v10;
      if (v2 == *v10) {
        return v3 > 0x1B;
      }
    }
    if (v12) {
      size_t v14 = v12;
    }
    else {
      size_t v14 = v10;
    }
    goto LABEL_12;
  }
  int v7 = *(_DWORD *)(v5 + 16);
  if (v7)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    goto LABEL_6;
  }
  size_t v14 = 0;
LABEL_12:
  int v15 = sub_1CC00AEB8(v5, (uint64_t)&v19, &v19, v14);
  *int v15 = v19;
  unsigned int v16 = *(_DWORD *)(v5 + 48);
  if (v16 >= *(_DWORD *)(v5 + 52)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(v5 + 40) + 8 * v16) = v19;
  ++*(_DWORD *)(v5 + 48);
  return v3 > 0x1B;
}

uint64_t sub_1CC00C2F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (!v2
    || *(unsigned char *)(v2 + 16) != 81
    || ((unsigned int v3 = *(unsigned char **)(v2 - 32)) != 0 ? (v4 = v3[16] == 19) : (v4 = 0),
        !v4 || *(_DWORD *)(*(void *)v3 + 8) >= 0x100u))
  {
    *(unsigned char *)(a1 + 24) = 0;
  }
  return 0;
}

uint64_t sub_1CC00C33C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_13:
    uint64_t result = 1;
  }
  else
  {
    unsigned int v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        unsigned int v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      int v7 = (void *)(v3 + 16 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_13;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC00C3E0(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CC00C56C(a1, v11, v11 + 16 * v12);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)int v7 = v8;
      *((_DWORD *)v7 + 2) = *(_DWORD *)(a1 + v6 + 16);
      v7 += 16;
    }
    v6 += 16;
  }
  while (v6 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC00C56C(a1, (uint64_t)v14, (uint64_t)v7);
}

uint64_t sub_1CC00C56C(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    void *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v12 = 0;
      uint64_t result = sub_1CC00C33C((uint64_t)v5, v10, &v12);
      uint64_t v11 = v12;
      void *v12 = *(void *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

void sub_1CC00C630(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *a1 + 104 * v2;
    int v6 = (unsigned int *)(a2 + 16);
    uint64_t v7 = (unsigned int *)(v4 + 16);
    do
    {
      *((void *)v6 - 2) = *((void *)v7 - 2);
      *((unsigned char *)v6 - 8) = *((unsigned char *)v7 - 8);
      int v6 = sub_1CC00ACE8(v6, v7) + 26;
      uint64_t v8 = v7 + 22;
      v7 += 26;
    }
    while (v8 != (unsigned int *)v5);
    unsigned int v9 = *((_DWORD *)a1 + 2);
    if (v9)
    {
      uint64_t v10 = *a1;
      uint64_t v11 = 104 * v9;
      do
      {
        uint64_t v12 = *(void **)(v10 + v11 - 48);
        if ((void *)(v10 + v11 - 32) != v12) {
          free(v12);
        }
        if ((*(unsigned char *)(v10 + v11 - 88) & 1) == 0) {
          MEMORY[0x1D25D9CD0](*(void *)(v10 + v11 - 80), 8);
        }
        v11 -= 104;
      }
      while (v11);
    }
  }
}

unsigned int *sub_1CC00C6F8(unsigned int *result, unsigned int *a2)
{
  if ((*(unsigned char *)result & 1) == 0)
  {
    size_t v14 = a2;
    uint64_t v15 = result;
    MEMORY[0x1D25D9CD0](*((void *)result + 1), 8);
    a2 = v14;
    uint64_t result = v15;
  }
  int64x2_t v2 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(void *)uint64_t result = 1;
  *(int64x2_t *)(result + 2) = v2;
  unint64_t v3 = (int *)(result + 2);
  *(int64x2_t *)(result + 6) = v2;
  unsigned int v4 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  unsigned int v5 = result[1];
  *uint64_t result = v4 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v5;
  unsigned int v6 = *a2;
  if (*result)
  {
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (int *)(a2 + 2);
      do
      {
        uint64_t v9 = *(void *)&v3[v7];
        *(void *)&v3[v7] = *(void *)&v8[v7];
        *(void *)&v8[v7] = v9;
        v7 += 2;
      }
      while (v7 != 8);
      return result;
    }
    uint64_t v10 = (int *)a2;
    uint64_t v11 = result;
  }
  else
  {
    if ((v6 & 1) == 0)
    {
      uint64_t v13 = *((void *)result + 1);
      *((void *)result + 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v13;
      LODWORD(v13) = result[4];
      result[4] = a2[4];
      a2[4] = v13;
      return result;
    }
    unsigned int v6 = *result;
    uint64_t v10 = (int *)result;
    uint64_t v11 = a2;
  }
  long long v16 = *(_OWORD *)(v10 + 2);
  *uint64_t v10 = v6 | 1;
  for (uint64_t i = 2; i != 10; i += 2)
    *(void *)&v10[i] = *(void *)&v11[i];
  *v11 &= ~1u;
  *(_OWORD *)(v11 + 2) = v16;
  return result;
}

uint64_t sub_1CC00C838(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v8 = 0;
  int v3 = sub_1CC00C0FC(a1, &v7, &v8);
  uint64_t v4 = a1 + 8;
  if (v3) {
    return v8;
  }
  if (*(_DWORD *)a1)
  {
    uint64_t v6 = 4;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v6 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v6;
}

char *sub_1CC00C8B8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4 = result;
  if (!a3)
  {
LABEL_2:
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = 1;
    int64x2_t v5 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    *(int64x2_t *)(result + 8) = v5;
    *(int64x2_t *)(result + 24) = v5;
    *((void *)result + 5) = result + 56;
    *((void *)result + 6) = 0x400000000;
    return result;
  }
  unsigned int v6 = ((a4 >> 4) ^ (a4 >> 9)) & (a3 - 1);
  uint64_t v7 = (uint64_t *)(a2 + 96 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a4)
  {
    int v9 = 1;
    while (v8 != -4096)
    {
      unsigned int v10 = v6 + v9++;
      unsigned int v6 = v10 & (a3 - 1);
      uint64_t v7 = (uint64_t *)(a2 + 96 * v6);
      uint64_t v8 = *v7;
      if (*v7 == a4) {
        goto LABEL_8;
      }
    }
    goto LABEL_2;
  }
LABEL_8:
  int64x2_t v11 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(void *)uint64_t result = 1;
  *(int64x2_t *)(result + 8) = v11;
  uint64_t v12 = result + 8;
  *(int64x2_t *)(v4 + 24) = v11;
  int v13 = *(_DWORD *)v4;
  if ((*(_DWORD *)v4 & 1) == 0)
  {
    MEMORY[0x1D25D9CD0](*((void *)v4 + 1), 8);
    uint64_t v12 = v4 + 8;
    int v13 = *(_DWORD *)v4;
  }
  int v14 = *((_DWORD *)v7 + 2);
  if ((v14 & 1) != 0 || (uint64_t v15 = *((unsigned int *)v7 + 6), v15 <= 4))
  {
    int v16 = 0;
    int v17 = *((_DWORD *)v7 + 3);
    *(_DWORD *)uint64_t v4 = v14 | 1;
    *((_DWORD *)v4 + 1) = v17;
  }
  else
  {
    *(_DWORD *)uint64_t v4 = v13 & 0xFFFFFFFE;
    BOOL v24 = v12;
    uint64_t v20 = v15;
    uint64_t v21 = operator new(8 * v15, (std::align_val_t)8uLL);
    uint64_t v12 = v24;
    *((void *)v4 + 1) = v21;
    *((void *)v4 + 2) = v20;
    int v14 = *((_DWORD *)v7 + 2);
    int v22 = *((_DWORD *)v7 + 3);
    BOOL v23 = (*(_DWORD *)v4 & 1) == 0;
    *(_DWORD *)uint64_t v4 = *(_DWORD *)v4 & 1 | v14 & 0xFFFFFFFE;
    *((_DWORD *)v4 + 1) = v22;
    int v16 = v23;
    if (v23) {
      uint64_t v12 = v21;
    }
  }
  unsigned int v18 = v7 + 2;
  if ((v14 & 1) == 0) {
    unsigned int v18 = (void *)*v18;
  }
  if (v16) {
    size_t v19 = 8 * *((unsigned int *)v4 + 4);
  }
  else {
    size_t v19 = 32;
  }
  uint64_t result = (char *)memcpy(v12, v18, v19);
  *((void *)v4 + 5) = v4 + 56;
  *((void *)v4 + 6) = 0x400000000;
  if (*((_DWORD *)v7 + 14))
  {
    return (char *)sub_1CBB08064((uint64_t)(v4 + 40), (uint64_t)(v7 + 6));
  }
  return result;
}

uint64_t sub_1CC00CAA4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = a1 + 16 * a2;
  if (*(void *)(v3 + 6088)) {
    return *(void *)(v3 + 6080);
  }
  else {
    return a3;
  }
}

unint64_t sub_1CC00CAC0(void (***a1)(uint64_t (***)(void, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  (**a1)(a1, a2, 0, 0, a7);
  unint64_t v14 = (**a1)(a1, a2, a5, a6, a7);
  unint64_t result = sub_1CC00F788(v14, v15, a3, a4, a7);
  int v17 = &a1[2 * a2];
  v17[760] = (uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))result;
  v17[761] = (uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))v18;
  return result;
}

void sub_1CC00CBA8(uint64_t a1)
{
  sub_1CC00F850(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC00CBE0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

BOOL sub_1CC00CBE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (!*(void *)(a1 + 40)) {
    *(void *)(a1 + 40) = a2;
  }
  return sub_1CC00FA08(a1 + 48, &v3);
}

uint64_t sub_1CC00CC20(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 40) == a2) {
    *(void *)(a1 + 40) = 0;
  }
  uint64_t v3 = a1 + 48;
  uint64_t v4 = *(void **)(a1 + 88);
  uint64_t v5 = *(unsigned int *)(a1 + 96);
  if (v5)
  {
    uint64_t v6 = 8 * v5;
    uint64_t v7 = &v4[v5];
    while (*v4 != a2)
    {
      ++v4;
      v6 -= 8;
      if (!v6)
      {
        uint64_t v4 = v7;
        break;
      }
    }
  }
  uint64_t v12 = 0;
  uint64_t result = sub_1CC00FB54(v3, v4, &v12);
  if (result)
  {
    void *v12 = -8192;
    int v9 = *(_DWORD *)(a1 + 52) + 1;
    *(_DWORD *)(a1 + 48) -= 2;
    *(_DWORD *)(a1 + 52) = v9;
  }
  uint64_t v10 = *(unsigned int *)(a1 + 96);
  uint64_t v11 = *(void *)(a1 + 88) + 8 * v10;
  if ((void *)v11 != v4 + 1)
  {
    uint64_t result = (uint64_t)memmove(v4, v4 + 1, v11 - (void)(v4 + 1));
    LODWORD(v10) = *(_DWORD *)(a1 + 96);
  }
  *(_DWORD *)(a1 + 96) = v10 - 1;
  return result;
}

uint64_t sub_1CC00CCE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = a2;
  return sub_1CC00FF04(a1 + 48, &v4, &v3);
}

void sub_1CC00CD18()
{
}

void sub_1CC00CD74()
{
}

uint64_t sub_1CC00CDD8()
{
  return 0;
}

uint64_t sub_1CC00CDE0(uint64_t a1)
{
  return *(void *)(**(void **)(a1 + 88) + 40);
}

void sub_1CC00CDF0()
{
}

void sub_1CC00CE54()
{
}

void *sub_1CC00CEC0(void *result, unsigned int a2, uint64_t a3)
{
  uint64_t v18 = a3;
  uint64_t v3 = &result[11 * a2];
  char v5 = *((unsigned char *)v3 + 136);
  uint64_t v4 = (uint64_t)(v3 + 17);
  if (v5)
  {
    uint64_t v6 = v4 + 8;
    int v7 = 4;
  }
  else
  {
    int v7 = *(_DWORD *)(v4 + 16);
    if (!v7)
    {
      unint64_t v14 = 0;
      goto LABEL_9;
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  int v8 = v7 - 1;
  unsigned int v9 = v8 & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v10 = (void *)(v6 + 8 * v9);
  uint64_t v11 = *v10;
  if (*v10 == a3) {
    return result;
  }
  uint64_t v12 = 0;
  int v13 = 1;
  while (v11 != -4096)
  {
    if (v12) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v11 == -8192;
    }
    if (v16) {
      uint64_t v12 = v10;
    }
    unsigned int v17 = v9 + v13++;
    unsigned int v9 = v17 & v8;
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*v10 == a3) {
      return result;
    }
  }
  if (v12) {
    unint64_t v14 = v12;
  }
  else {
    unint64_t v14 = v10;
  }
LABEL_9:
  uint64_t result = sub_1CC0101A4(v4, (uint64_t)&v18, &v18, v14);
  *uint64_t result = v18;
  unsigned int v15 = *(_DWORD *)(v4 + 48);
  if (v15 >= *(_DWORD *)(v4 + 52)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(v4 + 40) + 8 * v15) = v18;
  ++*(_DWORD *)(v4 + 48);
  return result;
}

void *sub_1CC00CFD8(void *result, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = &result[11 * a2];
  char v5 = *((unsigned char *)v3 + 136);
  uint64_t v4 = v3 + 17;
  if (v5)
  {
    uint64_t v6 = v4 + 1;
    int v7 = 4;
  }
  else
  {
    int v7 = *((_DWORD *)v4 + 4);
    if (!v7) {
      return result;
    }
    uint64_t v6 = (void *)v4[1];
  }
  int v8 = v7 - 1;
  LODWORD(v9) = (v7 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v10 = &v6[v9];
  uint64_t v11 = *v10;
  if (*v10 == a3)
  {
LABEL_11:
    *uint64_t v10 = -8192;
    int v14 = *((_DWORD *)v4 + 1) + 1;
    *(_DWORD *)v4 -= 2;
    *((_DWORD *)v4 + 1) = v14;
    uint64_t result = (void *)v4[5];
    uint64_t v15 = *((unsigned int *)v4 + 12);
    BOOL v16 = &result[v15];
    if (v15)
    {
      uint64_t v17 = 8 * v15;
      while (*result != a3)
      {
        ++result;
        v17 -= 8;
        if (!v17)
        {
          uint64_t result = v16;
          break;
        }
      }
    }
    if (v16 != result + 1)
    {
      uint64_t result = memmove(result, result + 1, (char *)v16 - (char *)(result + 1));
      LODWORD(v15) = *((_DWORD *)v4 + 12);
    }
    *((_DWORD *)v4 + 12) = v15 - 1;
  }
  else
  {
    int v12 = 1;
    while (v11 != -4096)
    {
      int v13 = v9 + v12++;
      uint64_t v9 = v13 & v8;
      uint64_t v11 = v6[v9];
      if (v11 == a3)
      {
        uint64_t v10 = &v6[v9];
        goto LABEL_11;
      }
    }
  }
  return result;
}

BOOL sub_1CC00D0CC(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(a1 + 88 * a2 + 184) == 0;
}

void *sub_1CC00D0E4(void *result, unsigned int a2)
{
  int64x2_t v2 = &result[11 * a2];
  unsigned int v5 = *((_DWORD *)v2 + 34);
  uint64_t v3 = v2 + 17;
  unsigned int v4 = v5;
  if (v5 > 1 || *((_DWORD *)v3 + 1))
  {
    if (v4)
    {
      int v7 = v3 + 1;
      int v8 = v3 + 5;
    }
    else
    {
      uint64_t v6 = *((unsigned int *)v3 + 4);
      if (((2 * v4) & 0xFFFFFFFC) < v6 && v6 >= 0x41)
      {
        uint64_t v10 = v3;
        uint64_t result = sub_1CD48FBE8(v3);
        uint64_t v3 = v10;
        goto LABEL_10;
      }
      if (!v6)
      {
        int v9 = 0;
LABEL_9:
        *(_DWORD *)uint64_t v3 = v9;
        *((_DWORD *)v3 + 1) = 0;
        goto LABEL_10;
      }
      int v7 = (void *)v3[1];
      int v8 = &v7[v6];
    }
    do
      *v7++ = -4096;
    while (v7 != v8);
    int v9 = *(_DWORD *)v3 & 1;
    goto LABEL_9;
  }
LABEL_10:
  *((_DWORD *)v3 + 12) = 0;
  return result;
}

uint64_t sub_1CC00D194(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(a1 + 88 * a2 + 184);
}

BOOL sub_1CC00D1A4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = a1 + 88 * a2;
  char v5 = *(unsigned char *)(v3 + 136);
  uint64_t v4 = v3 + 136;
  if (v5)
  {
    uint64_t v6 = v4 + 8;
    int v7 = 4;
  }
  else
  {
    int v7 = *(_DWORD *)(v4 + 16);
    if (!v7) {
      return 0;
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  int v8 = v7 - 1;
  unsigned int v9 = v8 & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v10 = *(void *)(v6 + 8 * v9);
  if (v10 == a3) {
    return 1;
  }
  int v11 = 1;
  do
  {
    BOOL result = v10 != -4096;
    if (v10 == -4096) {
      break;
    }
    unsigned int v13 = v9 + v11++;
    unsigned int v9 = v13 & v8;
    uint64_t v10 = *(void *)(v6 + 8 * v9);
  }
  while (v10 != a3);
  return result;
}

uint64_t sub_1CC00D228(uint64_t a1)
{
  return *(void *)(a1 + 2424);
}

double sub_1CC00D238(void *a1, const void *a2, unint64_t a3)
{
  long long v6 = 0uLL;
  uint64_t v7 = 0;
  sub_1CBA85A80(&v6, a2, (uint64_t)a2 + 4 * a3, a3);
  uint64_t v4 = (void *)a1[337];
  if (v4)
  {
    a1[338] = v4;
    operator delete(v4);
  }
  double result = *(double *)&v6;
  *(_OWORD *)(a1 + 337) = v6;
  a1[339] = v7;
  return result;
}

uint64_t sub_1CC00D29C(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 2760);
  uint64_t v3 = a1 + 2768;
  if (v2)
  {
    int v4 = 64;
    uint64_t v5 = a1 + 2768;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 2768);
    int v4 = *(_DWORD *)(a1 + 2776);
    if (!v4)
    {
      uint64_t v12 = 0;
      goto LABEL_10;
    }
  }
  int v6 = v4 - 1;
  LODWORD(v7) = (v4 - 1) & (37 * a2);
  int v8 = (uint64_t *)(v5 + 16 * v7);
  uint64_t v9 = *v8;
  if (*v8 == a2) {
    goto LABEL_11;
  }
  int v10 = 1;
  while (v9 != -1)
  {
    int v11 = v7 + v10++;
    uint64_t v7 = v11 & v6;
    uint64_t v9 = *(void *)(v5 + 16 * v7);
    if (v9 == a2)
    {
      int v8 = (uint64_t *)(v5 + 16 * v7);
      goto LABEL_11;
    }
  }
  if (v2)
  {
    uint64_t v12 = 64;
    uint64_t v5 = a1 + 2768;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 2768);
    uint64_t v12 = *(unsigned int *)(a1 + 2776);
  }
LABEL_10:
  int v8 = (uint64_t *)(v5 + 16 * v12);
LABEL_11:
  if (v2)
  {
    uint64_t v13 = 64;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 2768);
    uint64_t v13 = *(unsigned int *)(a1 + 2776);
  }
  if ((uint64_t *)(v3 + 16 * v13) == v8) {
    return 0;
  }
  else {
    return *((unsigned int *)v8 + 2) | 0x100000000;
  }
}

uint64_t sub_1CC00D364(uint64_t result, uint64_t a2, int a3)
{
  unsigned int v3 = *(_DWORD *)(result + 2760);
  if (v3)
  {
    uint64_t v4 = result + 2768;
    unsigned int v5 = 64;
  }
  else
  {
    unsigned int v5 = *(_DWORD *)(result + 2776);
    if (!v5)
    {
      int v8 = 0;
      goto LABEL_17;
    }
    uint64_t v4 = *(void *)(result + 2768);
  }
  unsigned int v6 = v5 - 1;
  unsigned int v7 = v6 & (37 * a2);
  int v8 = (uint64_t *)(v4 + 16 * v7);
  uint64_t v9 = *v8;
  if (*v8 == a2) {
    goto LABEL_22;
  }
  int v10 = 0;
  int v11 = 1;
  while (v9 != -1)
  {
    if (v10) {
      BOOL v12 = 0;
    }
    else {
      BOOL v12 = v9 == -2;
    }
    if (v12) {
      int v10 = v8;
    }
    unsigned int v13 = v7 + v11++;
    unsigned int v7 = v13 & v6;
    int v8 = (uint64_t *)(v4 + 16 * (v13 & v6));
    uint64_t v9 = *v8;
    if (*v8 == a2) {
      goto LABEL_22;
    }
  }
  if (v10) {
    int v8 = v10;
  }
  if (v3) {
    unsigned int v5 = 64;
  }
  else {
    unsigned int v5 = *(_DWORD *)(result + 2776);
  }
LABEL_17:
  int v14 = (_DWORD *)(result + 2760);
  unsigned int v15 = v3 >> 1;
  if (4 * v15 + 4 >= 3 * v5)
  {
    v5 *= 2;
    goto LABEL_27;
  }
  if (v5 + ~v15 - *(_DWORD *)(result + 2764) <= v5 >> 3)
  {
LABEL_27:
    uint64_t v17 = result;
    uint64_t v19 = a2;
    int v16 = a3;
    uint64_t v18 = result + 2760;
    sub_1CC010630(result + 2760, v5);
    uint64_t v20 = 0;
    sub_1CC010598(v18, v19, &v20);
    double result = v17;
    int v14 = (_DWORD *)v18;
    a2 = v19;
    int v8 = v20;
    a3 = v16;
  }
  *v14 += 2;
  if (*v8 != -1) {
    --*(_DWORD *)(result + 2764);
  }
  uint64_t *v8 = a2;
  *((_DWORD *)v8 + 2) = 0;
LABEL_22:
  *((_DWORD *)v8 + 2) = a3;
  return result;
}

uint64_t sub_1CC00D4CC(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (int *)(a1 + 3792);
  uint64_t v14 = 0;
  if (sub_1CC0108C4(a1 + 3792, a2, &v14))
  {
    uint64_t v7 = v14;
    int v4 = *v3;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 3792);
    if (v4)
    {
      uint64_t v5 = a1 + 3800;
      uint64_t v6 = 16;
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 3800);
      uint64_t v6 = *(unsigned int *)(a1 + 3808);
    }
    uint64_t v7 = v5 + 16 * v6;
  }
  if (v4)
  {
    uint64_t v8 = a1 + 3800;
    uint64_t v9 = 16;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 3800);
    uint64_t v9 = *(unsigned int *)(a1 + 3808);
  }
  BOOL v10 = v8 + 16 * v9 == v7;
  int v11 = (unsigned int *)(v7 + 8);
  if (v10) {
    int v11 = (unsigned int *)(a1 + 4064);
  }
  uint64_t v12 = *v11;
  if (v12 == *(_DWORD *)(a1 + 4064)) {
    return 0;
  }
  else {
    return *(unsigned int *)(*(void *)(a1 + 4056) + 16 * v12 + 8) | 0x100000000;
  }
}

BOOL sub_1CC00D58C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4064) == 0;
}

void sub_1CC00D59C()
{
}

void sub_1CC00D5F8()
{
}

BOOL sub_1CC00D65C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4336) == 0;
}

void sub_1CC00D66C()
{
}

void sub_1CC00D6C8()
{
}

uint64_t sub_1CC00D72C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4480);
}

uint64_t sub_1CC00D734(uint64_t result, int a2)
{
  unsigned int v2 = *(_DWORD *)(result + 4480);
  if (v2 >= *(_DWORD *)(result + 4484)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)(result + 4472) + 4 * v2) = a2;
  ++*(_DWORD *)(result + 4480);
  return result;
}

uint64_t sub_1CC00D7A0(uint64_t a1)
{
  return *(void *)(a1 + 4520);
}

uint64_t sub_1CC00D7A8(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 4528);
  return v1 / (**(unsigned int (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a1)(a1, 6, 0, 1, 1);
}

uint64_t sub_1CC00D800(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4533);
}

uint64_t sub_1CC00D80C(unsigned char *a1, int a2)
{
  int v4 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 352))(a1);
  unsigned int v5 = (**(uint64_t (***)(unsigned char *, uint64_t, void, uint64_t, uint64_t))a1)(a1, 7, 0, 1, 3);
  unsigned int v6 = v5 / (**(unsigned int (***)(unsigned char *, uint64_t, void, uint64_t, uint64_t))a1)(a1, 6, 0, 1, 1);
  unint64_t v7 = 4 * (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 312))(a1);
  uint64_t v8 = (v7
                    / (**(unsigned int (***)(unsigned char *, uint64_t, void, uint64_t, uint64_t))a1)(a1, 6, 0, 1, 1))- v6+ v4;
  if (a2) {
    uint64_t v9 = 20;
  }
  else {
    uint64_t v9 = 19;
  }
  if (v8 >= (**(unsigned int (***)(unsigned char *, uint64_t, void, void, uint64_t))a1)(a1, v9, 0, 0, 5))return 0xFFFFFFFFLL; {
  a1[4532] = 1;
  }
  return v8;
}

uint64_t sub_1CC00DA0C(uint64_t a1)
{
  unsigned int v2 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a1)(a1, 7, 0, 1, 3);
  unsigned int v3 = v2 / (**(unsigned int (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a1)(a1, 6, 0, 1, 1);
  unint64_t v4 = 4 * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 312))(a1);
  int v5 = v4 / (**(unsigned int (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a1)(a1, 6, 0, 1, 1)
     - v3;
  return v5 + (*(unsigned int (**)(uint64_t))(*(void *)a1 + 352))(a1);
}

unint64_t sub_1CC00DB94(unsigned char *a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFFFFFF00) != 0x200
    && (*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)a1 + 184))(a1, 8, a2))
  {
    a1[4532] = 1;
    int v17 = *((_DWORD *)sub_1CC010ABC((uint64_t)(a1 + 4536), a2) + 2);
    int v18 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 352))(a1);
    unint64_t v12 = 0;
    LODWORD(v11) = v18 + v17;
    return v12 | v11;
  }
  int v4 = *((_DWORD *)a1 + 1134);
  if (v4)
  {
    int v5 = 64;
    unsigned int v6 = a1 + 4544;
  }
  else
  {
    unsigned int v6 = (unsigned char *)*((void *)a1 + 568);
    int v5 = *((_DWORD *)a1 + 1138);
    if (!v5)
    {
      unsigned int v16 = 0;
LABEL_15:
      uint64_t v9 = (uint64_t *)&v6[24 * v16];
      goto LABEL_6;
    }
  }
  int v7 = v5 - 1;
  unsigned int v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v9 = (uint64_t *)&v6[24 * v8];
  uint64_t v10 = *v9;
  if (*v9 != a2)
  {
    int v14 = 1;
    while (v10 != -4096)
    {
      unsigned int v15 = v8 + v14++;
      unsigned int v8 = v15 & v7;
      uint64_t v9 = (uint64_t *)&v6[24 * v8];
      uint64_t v10 = *v9;
      if (*v9 == a2) {
        goto LABEL_6;
      }
    }
    if (v4)
    {
      unsigned int v16 = 64;
      unsigned int v6 = a1 + 4544;
    }
    else
    {
      unsigned int v6 = (unsigned char *)*((void *)a1 + 568);
      unsigned int v16 = *((_DWORD *)a1 + 1138);
    }
    goto LABEL_15;
  }
LABEL_6:
  uint64_t v11 = v9[1];
  unint64_t v12 = v11 & 0xFFFFFFFF00000000;
  return v12 | v11;
}

BOOL sub_1CC00DD14(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 4536))
  {
    uint64_t v2 = a1 + 4544;
    int v3 = 64;
  }
  else
  {
    int v3 = *(_DWORD *)(a1 + 4552);
    if (!v3) {
      return 0;
    }
    uint64_t v2 = *(void *)(a1 + 4544);
  }
  int v4 = v3 - 1;
  unsigned int v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v6 = *(void *)(v2 + 24 * v5);
  if (v6 == a2) {
    return 1;
  }
  int v8 = 1;
  do
  {
    BOOL result = v6 != -4096;
    if (v6 == -4096) {
      break;
    }
    unsigned int v9 = v5 + v8++;
    unsigned int v5 = v9 & v4;
    uint64_t v6 = *(void *)(v2 + 24 * v5);
  }
  while (v6 != a2);
  return result;
}

void *sub_1CC00DDA0(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v22 = a2;
  BOOL result = (void *)(a1 + 4536);
  if (*(unsigned char *)result)
  {
    uint64_t v11 = a1 + 4544;
    int v12 = 64;
  }
  else
  {
    int v12 = *(_DWORD *)(a1 + 4552);
    if (!v12)
    {
      uint64_t v21 = 0;
LABEL_17:
      BOOL result = sub_1CC010C00((uint64_t)result, &v22, v21);
      unsigned int v15 = result;
      *BOOL result = a2;
      result[1] = 0;
      *((_DWORD *)result + 4) = 0;
      goto LABEL_4;
    }
    uint64_t v11 = *(void *)(a1 + 4544);
  }
  int v13 = v12 - 1;
  unsigned int v14 = v13 & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v15 = (void *)(v11 + 24 * v14);
  uint64_t v16 = *v15;
  if (*v15 != a2)
  {
    int v17 = 0;
    int v18 = 1;
    while (v16 != -4096)
    {
      if (v17) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v16 == -8192;
      }
      if (v19) {
        int v17 = v15;
      }
      unsigned int v20 = v14 + v18++;
      unsigned int v14 = v20 & v13;
      unsigned int v15 = (void *)(v11 + 24 * (v20 & v13));
      uint64_t v16 = *v15;
      if (*v15 == a2) {
        goto LABEL_4;
      }
    }
    if (v17) {
      uint64_t v21 = v17;
    }
    else {
      uint64_t v21 = v15;
    }
    goto LABEL_17;
  }
LABEL_4:
  *((_DWORD *)v15 + 2) = a3;
  *((_DWORD *)v15 + 3) = a4;
  *((_DWORD *)v15 + 4) = a5;
  return result;
}

uint64_t sub_1CC00DEA4(void *a1)
{
  uint64_t v2 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
  int v3 = *(_DWORD *)(a1[340] + 4 * (*(unsigned int (**)(uint64_t))(*(void *)v2 + 8))(v2));
  int v4 = (*(uint64_t (**)(void *))(*a1 + 312))(a1);
  return v3
       + 4 * v4
       - (*(unsigned int (**)(void *, uint64_t, void, uint64_t, uint64_t))*a1)(a1, 7, 0, 1, 3);
}

uint64_t sub_1CC00DFB8(void *a1)
{
  uint64_t v2 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
  return *(unsigned int *)(a1[340]
                         + 4 * (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, 16));
}

uint64_t sub_1CC00E034(void *a1)
{
  uint64_t v2 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 16))(v2, 0);
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
  LODWORD(v3) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 56))(v4, v3);
  uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
  uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
  unsigned int v8 = *(_DWORD *)(a1[340] + 4 * (*(unsigned int (**)(uint64_t, void))(*(void *)v7 + 16))(v7, 0));
  uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
  return v3 - v8 / (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v9 + 48))(v9, v6);
}

uint64_t sub_1CC00E25C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1);
  if ((v4 & 0xFF00000000) != 0) {
    return v4;
  }
  uint64_t v5 = 4 * (*(unsigned int (**)(uint64_t))(*(void *)a1 + 312))(a1);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 408))(a1, a2))
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 400))(a1, a2);
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v6 = (_DWORD *)sub_1CC011050(a1 + 3792, &v9);
    uint64_t v7 = 0;
    *uint64_t v6 = v5;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 328))(a1, v7);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 328))(a1, 0);
  return v5;
}

BOOL sub_1CC00E3EC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 480))(a1, 5, 8, 8);
  unint64_t v9 = HIDWORD(v8);
  if (HIDWORD(v8) <= a4)
  {
    unsigned int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 488))(a1, 5, 8, 8);
    sub_1CD4900B4(a1 + 4328, a2, v11, a3);
  }
  return v9 <= a4;
}

unint64_t sub_1CC00E4CC(void *a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
  unsigned int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, a2);
  if (a4 <= 4) {
    unint64_t v10 = 4;
  }
  else {
    unint64_t v10 = a4;
  }
  unsigned int v11 = (v10 + *(unsigned int *)(a1[340] + 4 * v9) - 1) / v10 * v10;
  return v11 | ((unint64_t)(v11 + a3) << 32);
}

uint64_t sub_1CC00E584(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 480))(a1);
  unsigned int v8 = v7;
  uint64_t v10 = v9;
  unint64_t v11 = HIDWORD(v7);
  uint64_t v12 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
  unsigned int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 24))(v12, a2);
  unsigned int v14 = v13;
  if (a4 <= 4) {
    unint64_t v15 = 4;
  }
  else {
    unint64_t v15 = a4;
  }
  unsigned int v16 = (v11 + v13 - 1) / v13;
  uint64_t v17 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
  if (v16 > (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v17 + 56))(v17, v10))
  {
    memset(v34, 0, sizeof(v34));
    sub_1CD490168((uint64_t)v32, (uint64_t)v34);
    uint64_t v21 = sub_1CB8E509C((llvm::raw_ostream *)v32, "Too many resources of type '");
    uint64_t v22 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
    BOOL v23 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v22 + 32))(v22, v10);
    BOOL v24 = sub_1CB8E509C(v21, v23);
    int v25 = sub_1CB8E509C(v24, "' used: ");
    int v26 = sub_1CD4901A4(v25, v16);
    int v27 = sub_1CB8E509C(v26, "/");
    uint64_t v28 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
    unsigned int v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v28 + 56))(v28, v10);
    sub_1CD4901A4(v27, v29);
    __int16 v31 = 260;
    v30[0] = v33;
    llvm::report_fatal_error((llvm *)v30, (const llvm::Twine *)1);
  }
  *(_DWORD *)(a1[340] + 4 * v10) = v11;
  if (a2 == 5)
  {
    unsigned int v20 = (*(uint64_t (**)(void *, uint64_t, void, uint64_t, uint64_t))*a1)(a1, 8, 0, 1, 3);
    (*(void (**)(void *, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*a1 + 8))(a1, 8, v11 - v8 - ((v15 + v20 - 1) % v15) + v15 - 1, 1, 0, 1, 3);
  }
  uint64_t v18 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, 9) == v10) {
    *((_DWORD *)a1 + 1132) = (*(_DWORD *)(a1[340] + 4 * v10) + 3) & 0xFFFFFFFC;
  }
  return v8 / v14;
}

uint64_t sub_1CC00E95C(uint64_t result, uint64_t ***a2, llvm::DataLayout *a3, uint64_t a4)
{
  uint64_t v7 = result;
  int v8 = *(_DWORD *)(result + 4536);
  uint64_t v9 = result + 4544;
  unsigned int v10 = a2 >> 4;
  if (v8)
  {
    int v11 = 64;
    uint64_t v12 = result + 4544;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 4544);
    int v11 = *(_DWORD *)(result + 4552);
    if (!v11)
    {
      unsigned int v43 = 0;
      goto LABEL_37;
    }
  }
  int v13 = v11 - 1;
  unsigned int v14 = (v11 - 1) & (v10 ^ (a2 >> 9));
  unint64_t v15 = (uint64_t ****)(v12 + 24 * v14);
  unsigned int v16 = *v15;
  if (*v15 == a2) {
    goto LABEL_4;
  }
  int v41 = 1;
  while (v16 != (uint64_t ***)-4096)
  {
    unsigned int v42 = v14 + v41++;
    unsigned int v14 = v42 & v13;
    unint64_t v15 = (uint64_t ****)(v12 + 24 * (v42 & v13));
    unsigned int v16 = *v15;
    if (*v15 == a2) {
      goto LABEL_4;
    }
  }
  if (v8)
  {
    unsigned int v43 = 64;
    uint64_t v12 = result + 4544;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 4544);
    unsigned int v43 = *(_DWORD *)(result + 4552);
  }
LABEL_37:
  unint64_t v15 = (uint64_t ****)(v12 + 24 * v43);
LABEL_4:
  if (v8)
  {
    unsigned int v17 = 64;
  }
  else
  {
    uint64_t v9 = *(void *)(result + 4544);
    unsigned int v17 = *(_DWORD *)(result + 4552);
  }
  if ((uint64_t ****)(v9 + 24 * v17) == v15)
  {
    (*(void (**)(uint64_t))(*(void *)result + 336))(result);
    unint64_t v18 = sub_1CC011260((uint64_t)a2[3], a3);
    int v19 = HIWORD(*((_DWORD *)a2 + 8)) & 0x3F;
    if (v19)
    {
      uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v7 + 488))(v7, a4, v18, 1 << (v19 - 1));
      BOOL result = (*(uint64_t (**)(uint64_t, uint64_t ***, uint64_t, unint64_t, uint64_t))(*(void *)v7 + 416))(v7, a2, v20, v18, a4);
      if ((*((unsigned char *)a2 + 23) & 0x10) == 0) {
        return result;
      }
      uint64_t v21 = ***a2;
      uint64_t v22 = *(void *)(v21 + 152);
      uint64_t v23 = *(unsigned int *)(v21 + 168);
      if (v23)
      {
        LODWORD(v24) = (v23 - 1) & (v10 ^ (a2 >> 9));
        int v25 = (uint64_t ****)(v22 + 16 * v24);
        int v26 = *v25;
        if (*v25 == a2)
        {
LABEL_15:
          unsigned int v29 = v25[1];
          if (*v29 != (uint64_t **)14
            || ((v50 = v29[2], uint64_t v51 = *(uint64_t *)((char *)v29 + 22), v50 == (uint64_t **)0x696C79642E636761)
              ? (BOOL v52 = v51 == 0x657361625F62696CLL)
              : (BOOL v52 = 0),
                !v52))
          {
            if (v23)
            {
              LODWORD(v30) = (v23 - 1) & (v10 ^ (a2 >> 9));
              __int16 v31 = (uint64_t ****)(v22 + 16 * v30);
              uint64_t v32 = *v31;
              if (*v31 == a2) {
                goto LABEL_22;
              }
              int v33 = 1;
              while (v32 != (uint64_t ***)-4096)
              {
                int v34 = v30 + v33++;
                uint64_t v30 = v34 & (v23 - 1);
                uint64_t v32 = *(uint64_t ****)(v22 + 16 * v30);
                if (v32 == a2) {
                  goto LABEL_21;
                }
              }
            }
            goto LABEL_66;
          }
          goto LABEL_51;
        }
        int v27 = 1;
        while (v26 != (uint64_t ***)-4096)
        {
          int v28 = v24 + v27++;
          uint64_t v24 = v28 & (v23 - 1);
          int v26 = *(uint64_t ****)(v22 + 16 * v24);
          if (v26 == a2)
          {
            int v25 = (uint64_t ****)(v22 + 16 * v24);
            goto LABEL_15;
          }
        }
      }
      int v25 = (uint64_t ****)(v22 + 16 * v23);
      goto LABEL_15;
    }
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, void))(*(void *)v7 + 488))(v7, a4, v18, 0);
    BOOL result = (*(uint64_t (**)(uint64_t, uint64_t ***, uint64_t, unint64_t, uint64_t))(*(void *)v7 + 416))(v7, a2, v20, v18, a4);
    if ((*((unsigned char *)a2 + 23) & 0x10) == 0) {
      return result;
    }
    uint64_t v53 = ***a2;
    uint64_t v22 = *(void *)(v53 + 152);
    uint64_t v23 = *(unsigned int *)(v53 + 168);
    if (v23)
    {
      LODWORD(v54) = (v23 - 1) & (v10 ^ (a2 >> 9));
      uint64_t v55 = (uint64_t ****)(v22 + 16 * v54);
      BOOL v56 = *v55;
      if (*v55 == a2)
      {
LABEL_59:
        uint64_t v59 = v55[1];
        if (*v59 != (uint64_t **)14
          || ((unsigned int v63 = v59[2], v64 = *(uint64_t *)((char *)v59 + 22), v63 == (uint64_t **)0x696C79642E636761)
            ? (BOOL v65 = v64 == 0x657361625F62696CLL)
            : (BOOL v65 = 0),
              !v65))
        {
          if (v23)
          {
            LODWORD(v30) = (v23 - 1) & (v10 ^ (a2 >> 9));
            __int16 v31 = (uint64_t ****)(v22 + 16 * v30);
            BOOL v60 = *v31;
            if (*v31 == a2) {
              goto LABEL_22;
            }
            int v61 = 1;
            while (v60 != (uint64_t ***)-4096)
            {
              int v62 = v30 + v61++;
              uint64_t v30 = v62 & (v23 - 1);
              BOOL v60 = *(uint64_t ****)(v22 + 16 * v30);
              if (v60 == a2)
              {
LABEL_21:
                __int16 v31 = (uint64_t ****)(v22 + 16 * v30);
                goto LABEL_22;
              }
            }
          }
LABEL_66:
          __int16 v31 = (uint64_t ****)(v22 + 16 * v23);
LABEL_22:
          unsigned int v35 = v31[1];
          if ((unint64_t)*v35 < 0x11) {
            return result;
          }
          unsigned int v36 = v35[2];
          BOOL v37 = v35[3];
          int v38 = *((unsigned __int8 *)v35 + 32);
          BOOL v39 = v36 == (uint64_t **)0x706D61732E636761 && v37 == (uint64_t **)0x706165685F72656CLL;
          if (!v39 || v38 != 46) {
            return result;
          }
          uint64_t v44 = v20;
          uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 8);
          uint64_t v46 = v7;
          uint64_t v47 = 3;
          uint64_t v48 = 0;
          uint64_t v49 = 0;
LABEL_42:
          return v45(v46, v47, v44, 1, v48, v49, 1);
        }
LABEL_51:
        uint64_t v44 = v20;
        uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 8);
        uint64_t v46 = v7;
        uint64_t v47 = 5;
        uint64_t v48 = 0xFFFFFFFFLL;
        uint64_t v49 = 1;
        goto LABEL_42;
      }
      int v57 = 1;
      while (v56 != (uint64_t ***)-4096)
      {
        int v58 = v54 + v57++;
        uint64_t v54 = v58 & (v23 - 1);
        BOOL v56 = *(uint64_t ****)(v22 + 16 * v54);
        if (v56 == a2)
        {
          uint64_t v55 = (uint64_t ****)(v22 + 16 * v54);
          goto LABEL_59;
        }
      }
    }
    uint64_t v55 = (uint64_t ****)(v22 + 16 * v23);
    goto LABEL_59;
  }
  return result;
}

uint64_t sub_1CC00EEB4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (a2)
  {
    (*(void (**)(uint64_t *))(v3 + 496))(a1);
    uint64_t v18 = a2;
    if (a1[567])
    {
      uint64_t v5 = a1 + 568;
      int v6 = 64;
    }
    else
    {
      int v6 = *((_DWORD *)a1 + 1138);
      if (!v6)
      {
        unsigned int v16 = 0;
        goto LABEL_18;
      }
      uint64_t v5 = (uint64_t *)a1[568];
    }
    int v7 = v6 - 1;
    unsigned int v8 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v9 = &v5[3 * v8];
    uint64_t v10 = *v9;
    if (*v9 == a2) {
      return *((unsigned int *)v9 + 2);
    }
    uint64_t v12 = 0;
    int v13 = 1;
    while (v10 != -4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v10 == -8192;
      }
      if (v14) {
        uint64_t v12 = v9;
      }
      unsigned int v15 = v8 + v13++;
      unsigned int v8 = v15 & v7;
      uint64_t v9 = &v5[3 * (v15 & v7)];
      uint64_t v10 = *v9;
      if (*v9 == a2) {
        return *((unsigned int *)v9 + 2);
      }
    }
    if (v12) {
      unsigned int v16 = v12;
    }
    else {
      unsigned int v16 = v9;
    }
LABEL_18:
    uint64_t v9 = sub_1CC010C00((uint64_t)(a1 + 567), &v18, v16);
    *uint64_t v9 = a2;
    v9[1] = 0;
    *((_DWORD *)v9 + 4) = 0;
    return *((unsigned int *)v9 + 2);
  }
  unsigned int v17 = *(uint64_t (**)(void))(v3 + 488);

  return v17();
}

uint64_t sub_1CC00F020(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 624))(a1);
  uint64_t v3 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 488))(a1, 4, v2, 4);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t))(*(void *)a1 + 8);

  return v4(a1, 3, v3, 1, 0, 0, 1);
}

uint64_t sub_1CC00F0F4(unsigned int *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 336))(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, a2);
  *(_DWORD *)(*((void *)a1 + 340) + 4 * result) = 0;
  if (a2 == 5) {
    uint64_t result = (*(uint64_t (**)(unsigned int *, uint64_t, void, uint64_t, void, uint64_t, void))(*(void *)a1 + 8))(a1, 8, 0, 1, 0, 1, 0);
  }
  unsigned int v6 = a1[1134];
  if (v6 <= 1)
  {
    if (v6)
    {
      BOOL v14 = a1 + 1136;
      unsigned int v15 = 64;
    }
    else
    {
      BOOL v14 = (void *)*((void *)a1 + 568);
      unsigned int v15 = a1[1138];
    }
    int v7 = &v14[3 * v15];
LABEL_28:
    unsigned int v8 = v7;
    goto LABEL_10;
  }
  if ((v6 & 1) == 0)
  {
    int v7 = (void *)*((void *)a1 + 568);
    unsigned int v13 = a1[1138];
    if (v13)
    {
      unsigned int v8 = &v7[3 * v13];
      goto LABEL_6;
    }
    goto LABEL_28;
  }
  int v7 = a1 + 1136;
  unsigned int v8 = a1 + 1520;
LABEL_6:
  while (*v7 == -4096 || *v7 == -8192)
  {
    v7 += 3;
    if (v7 == v8)
    {
      int v7 = v8;
      break;
    }
  }
LABEL_10:
  while (1)
  {
    uint64_t v9 = v7;
    if (v6)
    {
      uint64_t v10 = a1 + 1136;
      unsigned int v11 = 64;
    }
    else
    {
      uint64_t v10 = (void *)*((void *)a1 + 568);
      unsigned int v11 = a1[1138];
    }
    if (v9 == &v10[3 * v11]) {
      return result;
    }
    uint64_t v12 = v9 + 3;
    int v7 = v8;
    if (v9 + 3 != v8)
    {
      while (*v12 == -4096 || *v12 == -8192)
      {
        v12 += 3;
        if (v12 == v8)
        {
          int v7 = v8;
          goto LABEL_19;
        }
      }
      int v7 = v12;
    }
LABEL_19:
    if (*((_DWORD *)v9 + 4) == a2)
    {
      *uint64_t v9 = -8192;
      unsigned int v6 = a1[1134] - 2;
      a1[1134] = v6;
      ++a1[1135];
    }
  }
}

llvm::StructLayout *sub_1CC00F2F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = a3;
  unsigned int v4 = 0;
  uint64_t v7 = 0;
  uint64_t result = sub_1CC011370(&v4, a2);
  if (v7) {
    return (llvm::StructLayout *)(*(uint64_t (**)(uint64_t, void))(*(void *)v5 + 328))(v5, v4);
  }
  return result;
}

uint64_t sub_1CC00F364(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  unsigned int v2 = ((*(unsigned __int16 *)(result + 18) >> 4) & 0x3FF) - 101;
  BOOL v3 = v2 > 7;
  int v4 = (1 << v2) & 0xAF;
  if (v3 || v4 == 0) {
    return 0;
  }
  return result;
}

uint64_t sub_1CC00F39C(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t sub_1CC00F3A4(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 4536))
  {
    uint64_t v2 = result + 4544;
    int v3 = 64;
  }
  else
  {
    int v3 = *(_DWORD *)(result + 4552);
    if (!v3) {
      return result;
    }
    uint64_t v2 = *(void *)(result + 4544);
  }
  int v4 = v3 - 1;
  unsigned int v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v6 = (uint64_t *)(v2 + 24 * v5);
  uint64_t v7 = *v6;
  if (*v6 == a2)
  {
LABEL_4:
    *uint64_t v6 = -8192;
    *(_DWORD *)(result + 4536) -= 2;
    ++*(_DWORD *)(result + 4540);
  }
  else
  {
    int v8 = 1;
    while (v7 != -4096)
    {
      unsigned int v9 = v5 + v8++;
      unsigned int v5 = v9 & v4;
      uint64_t v6 = (uint64_t *)(v2 + 24 * v5);
      uint64_t v7 = *v6;
      if (*v6 == a2) {
        goto LABEL_4;
      }
    }
  }
  return result;
}

uint64_t sub_1CC00F440(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 96);
  if (!v2) {
    return 0;
  }
  int v3 = *(uint64_t **)(a1 + 88);
  uint64_t v4 = 8 * v2;
  while (1)
  {
    uint64_t result = *v3;
    if (((*(unsigned __int16 *)(*v3 + 18) >> 4) & 0x3FF) == a2) {
      break;
    }
    ++v3;
    v4 -= 8;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CC00F478(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 568))(a1) == a2) {
    return a1;
  }
  else {
    return 0;
  }
}

void sub_1CC00F4D0(void *a1, int a2)
{
  uint64_t v4 = (char *)a1[855];
  unint64_t v5 = a1[856];
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v7 = (char *)a1[854];
    uint64_t v8 = (v4 - v7) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      abort();
    }
    uint64_t v10 = v5 - (void)v7;
    if (v10 >> 1 > v9) {
      unint64_t v9 = v10 >> 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 62) {
        sub_1CB833614();
      }
      uint64_t v12 = (char *)operator new(4 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    unsigned int v13 = &v12[4 * v8];
    *(_DWORD *)unsigned int v13 = a2;
    uint64_t v6 = v13 + 4;
    while (v4 != v7)
    {
      int v14 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *((_DWORD *)v13 - 1) = v14;
      v13 -= 4;
    }
    a1[854] = v13;
    a1[855] = v6;
    a1[856] = &v12[4 * v11];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v4 = a2;
    uint64_t v6 = v4 + 4;
  }
  a1[855] = v6;
}

uint64_t sub_1CC00F5BC(uint64_t a1)
{
  return a1 + 6832;
}

uint64_t sub_1CC00F5C8()
{
  return 8;
}

void *sub_1CC00F5D0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a2;
  uint64_t result = sub_1CBFF6864(a1 + 16, &v5);
  *((_DWORD *)result + 2) = a3;
  return result;
}

uint64_t sub_1CC00F60C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(unsigned int *)(a1 + 32);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      goto LABEL_6;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v9 = v4 + v7++;
      uint64_t v4 = v9 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_6;
      }
    }
  }
  uint64_t v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_6:
  if (v5 == (uint64_t *)(v2 + 16 * v3)) {
    return 0;
  }
  else {
    return *((unsigned int *)v5 + 2) | 0x100000000;
  }
}

BOOL sub_1CC00F68C(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 80))(&v7, a1);
  uint64_t v6 = v8;
  BOOL v2 = sub_1CC011E14(&v6, a1);
  uint64_t v3 = v7;
  uint64_t v7 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = v6;
  uint64_t v6 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return v2;
}

unint64_t sub_1CC00F788(unint64_t a1, char a2, unint64_t a3, uint64_t a4, int a5)
{
  switch(a5)
  {
    case 0:
    case 1:
      unint64_t v5 = a3 & 0xFFFFFFFFFFFFFF00;
      return v5 | a3;
    case 2:
      a3 |= a1;
      goto LABEL_17;
    case 3:
      a3 += a1;
      goto LABEL_17;
    case 4:
      if (a2) {
        unint64_t v6 = a1;
      }
      else {
        unint64_t v6 = a3;
      }
      if (v6 > a3) {
        a3 = v6;
      }
      goto LABEL_17;
    case 5:
      if (a2) {
        unint64_t v7 = a1;
      }
      else {
        unint64_t v7 = a3;
      }
      if (a3 >= v7) {
        a3 = v7;
      }
LABEL_17:
      unint64_t v5 = a3 & 0xFFFFFFFFFFFFFF00;
      break;
    default:
      LOBYTE(a3) = 0;
      unint64_t v5 = 0;
      break;
  }
  return v5 | a3;
}

uint64_t sub_1CC00F850(uint64_t a1)
{
  *(void *)a1 = &unk_1F2603A90;
  BOOL v2 = *(void **)(a1 + 6832);
  if (v2)
  {
    *(void *)(a1 + 6840) = v2;
    operator delete(v2);
  }
  if ((*(unsigned char *)(a1 + 4536) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 4544), 8);
  }
  uint64_t v3 = *(void **)(a1 + 4472);
  if (v3 != (void *)(a1 + 4488)) {
    free(v3);
  }
  uint64_t v4 = *(void **)(a1 + 4328);
  if (v4 != (void *)(a1 + 4344)) {
    free(v4);
  }
  unint64_t v5 = *(void **)(a1 + 4056);
  if (v5 != (void *)(a1 + 4072)) {
    free(v5);
  }
  if ((*(unsigned char *)(a1 + 3792) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 3800), 8);
  }
  if ((*(unsigned char *)(a1 + 2760) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 2768), 8);
  }
  unint64_t v6 = *(void **)(a1 + 2720);
  if (v6 != (void *)(a1 + 2736)) {
    free(v6);
  }
  unint64_t v7 = *(void **)(a1 + 2696);
  if (v7)
  {
    *(void *)(a1 + 2704) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 2424);
  if (v8 != (void *)(a1 + 2440)) {
    free(v8);
  }
  uint64_t v9 = 2288;
  do
  {
    uint64_t v10 = *(void **)(a1 + v9 + 88);
    if ((void *)(a1 + v9 + 104) != v10) {
      free(v10);
    }
    if ((*(unsigned char *)(a1 + v9 + 48) & 1) == 0) {
      MEMORY[0x1D25D9CD0](*(void *)(a1 + v9 + 56), 8);
    }
    v9 -= 88;
  }
  while (v9);
  unint64_t v11 = *(void **)(a1 + 88);
  if (v11 != (void *)(a1 + 104)) {
    free(v11);
  }
  if ((*(unsigned char *)(a1 + 48) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 56), 8);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 16), 8);
  return a1;
}

BOOL sub_1CC00FA08(uint64_t a1, uint64_t *a2)
{
  sub_1CC00FA98(a1, a2, (uint64_t)&v8);
  int v4 = v9;
  if (v9)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = *(_DWORD *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return v4 != 0;
}

void *sub_1CC00FA98@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int v14 = 0;
  uint64_t result = (void *)sub_1CC00FB54(a1, a2, &v14);
  unint64_t v7 = v14;
  if (result)
  {
    uint64_t v12 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v13 = 4;
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 8);
      uint64_t v13 = *(unsigned int *)(a1 + 16);
    }
    char v11 = 0;
    uint64_t v10 = v12 + 8 * v13;
  }
  else
  {
    uint64_t result = sub_1CC00FC04((_DWORD *)a1, (uint64_t)a2, a2, v14);
    unint64_t v7 = result;
    *uint64_t result = *a2;
    uint64_t v8 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v9 = 4;
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = *(unsigned int *)(a1 + 16);
    }
    uint64_t v10 = v8 + 8 * v9;
    char v11 = 1;
  }
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v10;
  *(unsigned char *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_1CC00FB54(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      unint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  unint64_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      unint64_t v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_8;
      }
    }
    uint64_t result = 0;
    if (v9) {
      unint64_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void *sub_1CC00FC04(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1CC00FCC8((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CC00FB54((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

uint64_t sub_1CC00FCC8(uint64_t a1, unsigned int a2)
{
  uint64_t v14[4] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    char v11 = *(void **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CC00FE44(a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  int v6 = v14;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC00FE44(a1, v14, v6);
}

uint64_t sub_1CC00FE44(uint64_t result, void *a2, void *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 40);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      int v10 = 0;
      uint64_t result = sub_1CC00FB54((uint64_t)v5, a2, &v10);
      *int v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CC00FF04(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_5;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    int v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        int v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_5;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void sub_1CC00FFB4()
{
}

void sub_1CC00FFC8()
{
}

BOOL sub_1CC010028(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

uint64_t sub_1CC01003C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1CC010044(uint64_t result)
{
  *(void *)(result + 8) += 8;
  return result;
}

void sub_1CC010054()
{
}

void sub_1CC010068()
{
}

BOOL sub_1CC0100C8(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

uint64_t sub_1CC0100DC(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1CC0100E4(uint64_t result)
{
  *(void *)(result + 8) += 8;
  return result;
}

uint64_t sub_1CC0100F4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_8;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void *sub_1CC0101A4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 4;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1CC01031C(a1, 2 * v8);
    uint64_t v11 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v12 = 4;
    }
    else
    {
      int v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        int v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      uint64_t v11 = *(void *)(a1 + 8);
    }
    int v9 = *(_DWORD *)a1 & 1;
    int v13 = v12 - 1;
    unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (void *)(v11 + 8 * v14);
    uint64_t v15 = *a4;
    if (*a3 != *a4)
    {
      unsigned int v16 = 0;
      int v17 = 1;
      while (v15 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -8192;
        }
        if (v18) {
          unsigned int v16 = a4;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        a4 = (void *)(v11 + 8 * v14);
        uint64_t v15 = *a4;
        if (*a3 == *a4) {
          goto LABEL_7;
        }
      }
      if (v16) {
        a4 = v16;
      }
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1CC01031C(a1, v8);
      uint64_t v20 = 0;
      sub_1CC0100F4(a1, a3, &v20);
      a4 = v20;
      int v6 = *(_DWORD *)a1;
    }
    int v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

int *sub_1CC01031C(uint64_t a1, unsigned int a2)
{
  uint64_t v14[4] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CC010498((int *)a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  int v6 = v14;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC010498((int *)a1, v14, v6);
}

int *sub_1CC010498(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    int v6 = result + 10;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    int v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v8 = 4;
        uint64_t v9 = result + 2;
      }
      else
      {
        uint64_t v9 = (int *)*((void *)result + 1);
        int v8 = result[4];
      }
      int v10 = v8 - 1;
      unsigned int v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v12 = &v9[2 * v11];
      uint64_t v13 = *(void *)v12;
      if (v7 != *(void *)v12)
      {
        unsigned int v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            unsigned int v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          uint64_t v12 = &v9[2 * (v17 & v10)];
          uint64_t v13 = *(void *)v12;
          if (v7 == *(void *)v12) {
            goto LABEL_14;
          }
        }
        if (v14) {
          uint64_t v12 = v14;
        }
      }
LABEL_14:
      *(void *)uint64_t v12 = v7;
      *result += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CC010598(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = result + 8;
  if (*(unsigned char *)result)
  {
    int v4 = 64;
  }
  else
  {
    int v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      goto LABEL_15;
    }
    uint64_t v3 = *(void *)(result + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & (37 * a2);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -1)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -2;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_15;
      }
    }
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_15:
  *a3 = v7;
  return result;
}

int *sub_1CC010630(uint64_t a1, unsigned int a2)
{
  v14[128] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x41)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    BOOL v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x40)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CC0107C4((int *)a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  uint64_t v7 = v14;
  do
  {
    unint64_t v8 = *(void *)(a1 + v6 + 8);
    if (v8 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t *v7 = v8;
      *((_DWORD *)v7 + 2) = *(_DWORD *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 1024);
  if (a2 > 0x40)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC0107C4((int *)a1, v14, v7);
}

int *sub_1CC0107C4(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    uint64_t v6 = result + 258;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    uint64_t v6 = &v5[2 * v4];
  }
  do
  {
    void *v5 = -1;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((unint64_t)*a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      if (*(unsigned char *)result)
      {
        int v8 = 64;
        uint64_t v9 = result + 2;
      }
      else
      {
        uint64_t v9 = (int *)*((void *)result + 1);
        int v8 = result[4];
      }
      int v10 = v8 - 1;
      unsigned int v11 = (v8 - 1) & (37 * v7);
      uint64_t v12 = (uint64_t *)&v9[4 * v11];
      uint64_t v13 = *v12;
      if (v7 != *v12)
      {
        unsigned int v14 = 0;
        int v15 = 1;
        while (v13 != -1)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -2;
          }
          if (v16) {
            unsigned int v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          uint64_t v12 = (uint64_t *)&v9[4 * (v17 & v10)];
          uint64_t v13 = *v12;
          if (v7 == *v12) {
            goto LABEL_21;
          }
        }
        if (v14) {
          uint64_t v12 = v14;
        }
      }
LABEL_21:
      uint64_t *v12 = v7;
      *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CC0108C4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_13:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_13;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

BOOL sub_1CC010968(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

uint64_t sub_1CC01097C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1CC010984(uint64_t result)
{
  *(void *)(result + 8) += 16;
  return result;
}

void sub_1CC010994()
{
}

void sub_1CC0109A8()
{
}

BOOL sub_1CC010A08(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

void sub_1CC010A1C()
{
}

void sub_1CC010A30()
{
}

BOOL sub_1CC010A90(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

uint64_t sub_1CC010AA4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1CC010AAC(uint64_t result)
{
  *(void *)(result + 8) += 4;
  return result;
}

uint64_t *sub_1CC010ABC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1)
  {
    int v2 = 64;
    uint64_t v3 = a1 + 8;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 8);
    int v2 = *(_DWORD *)(a1 + 16);
    if (!v2)
    {
      unsigned int v11 = 0;
      return (uint64_t *)(v3 + 24 * v11);
    }
  }
  int v4 = v2 - 1;
  unsigned int v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v6 = (uint64_t *)(v3 + 24 * v5);
  uint64_t v7 = *v6;
  if (*v6 != a2)
  {
    int v9 = 1;
    while (v7 != -4096)
    {
      unsigned int v10 = v5 + v9++;
      unsigned int v5 = v10 & v4;
      unsigned int v6 = (uint64_t *)(v3 + 24 * (v10 & v4));
      uint64_t v7 = *v6;
      if (*v6 == a2) {
        return v6;
      }
    }
    if (*(_DWORD *)a1)
    {
      unsigned int v11 = 64;
      uint64_t v3 = a1 + 8;
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 8);
      unsigned int v11 = *(_DWORD *)(a1 + 16);
    }
    return (uint64_t *)(v3 + 24 * v11);
  }
  return v6;
}

uint64_t sub_1CC010B60(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = result + 8;
  if (*(unsigned char *)result)
  {
    int v4 = 64;
  }
  else
  {
    int v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      goto LABEL_4;
    }
    uint64_t v3 = *(void *)(result + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 24 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        int v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 24 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_4;
      }
    }
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_4:
  *a3 = v7;
  return result;
}

void *sub_1CC010C00(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)a1;
  int v6 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v7 = 64;
  }
  else {
    unsigned int v7 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CC010D7C(a1, 2 * v7);
    uint64_t v10 = a1 + 8;
    int v5 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v11 = 64;
    }
    else
    {
      int v11 = *(_DWORD *)(a1 + 16);
      if (!v11)
      {
        int v8 = 0;
        a3 = 0;
        goto LABEL_7;
      }
      uint64_t v10 = *(void *)(a1 + 8);
    }
    int v8 = *(_DWORD *)a1 & 1;
    int v12 = v11 - 1;
    unsigned int v13 = ((*a2 >> 4) ^ (*a2 >> 9)) & v12;
    a3 = (void *)(v10 + 24 * v13);
    uint64_t v14 = *a3;
    if (*a2 != *a3)
    {
      int v15 = 0;
      int v16 = 1;
      while (v14 != -4096)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v14 == -8192;
        }
        if (v17) {
          int v15 = a3;
        }
        unsigned int v18 = v13 + v16++;
        unsigned int v13 = v18 & v12;
        a3 = (void *)(v10 + 24 * v13);
        uint64_t v14 = *a3;
        if (*a2 == *a3) {
          goto LABEL_7;
        }
      }
      if (v15) {
        a3 = v15;
      }
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 4) <= v7 >> 3)
    {
      sub_1CC010D7C(a1, v7);
      unsigned int v19 = 0;
      sub_1CC010B60(a1, *a2, &v19);
      a3 = v19;
      int v5 = *(_DWORD *)a1;
    }
    int v8 = v5 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v5 & 0xFFFFFFFE | v8) + 2;
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a3;
}

int *sub_1CC010D7C(uint64_t a1, unsigned int a2)
{
  v16[192] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x41)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v13 = *(uint64_t **)(a1 + 8);
    unsigned int v14 = *(_DWORD *)(a1 + 16);
    if (a2 <= 0x40)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v15 = a2;
      *(void *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v15;
    }
    sub_1CC010F34((int *)a1, v13, &v13[3 * v14]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  unsigned int v7 = v16;
  do
  {
    uint64_t v8 = a1 + v6;
    uint64_t v9 = *(void *)(a1 + v6 + 8);
    if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t *v7 = v9;
      uint64_t v10 = *(void *)(v8 + 16);
      *((_DWORD *)v7 + 4) = *(_DWORD *)(v8 + 24);
      v7[1] = v10;
      v7 += 3;
    }
    v6 += 24;
  }
  while (v6 != 1536);
  if (a2 > 0x40)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CC010F34((int *)a1, v16, v7);
}

int *sub_1CC010F34(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    uint64_t v6 = result + 386;
    int v5 = result + 2;
  }
  else
  {
    unsigned int v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    uint64_t v6 = &v5[3 * v4];
  }
  do
  {
    void *v5 = -4096;
    v5 += 3;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v8 = 64;
        uint64_t v9 = result + 2;
      }
      else
      {
        uint64_t v9 = (int *)*((void *)result + 1);
        int v8 = result[4];
      }
      int v10 = v8 - 1;
      unsigned int v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      int v12 = (uint64_t *)&v9[6 * v11];
      uint64_t v13 = *v12;
      if (v7 != *v12)
      {
        uint64_t v15 = 0;
        int v16 = 1;
        while (v13 != -4096)
        {
          if (v15) {
            BOOL v17 = 0;
          }
          else {
            BOOL v17 = v13 == -8192;
          }
          if (v17) {
            uint64_t v15 = v12;
          }
          unsigned int v18 = v11 + v16++;
          unsigned int v11 = v18 & v10;
          int v12 = (uint64_t *)&v9[6 * (v18 & v10)];
          uint64_t v13 = *v12;
          if (v7 == *v12) {
            goto LABEL_10;
          }
        }
        if (v15) {
          int v12 = v15;
        }
      }
LABEL_10:
      uint64_t *v12 = v7;
      uint64_t v14 = a2[1];
      *((_DWORD *)v12 + 4) = *((_DWORD *)a2 + 4);
      v12[1] = v14;
      *result += 2;
    }
    a2 += 3;
  }
  return result;
}

uint64_t sub_1CC011050(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v14 = 0;
  char v5 = sub_1CC0108C4(a1, v4, &v14);
  uint64_t v6 = v14;
  if (v5)
  {
    unsigned int v12 = *(_DWORD *)(v14 + 8);
    return *(void *)(a1 + 264) + 16 * v12 + 8;
  }
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 16;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_13;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
  {
LABEL_13:
    sub_1CD48FF1C(a1, v8);
    uint64_t v14 = 0;
    sub_1CC0108C4(a1, v4, &v14);
    uint64_t v6 = v14;
  }
  *(_DWORD *)a1 += 2;
  if (*(void *)v6 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  *(void *)uint64_t v6 = v4;
  *(_DWORD *)(v6 + 8) = 0;
  uint64_t v9 = *a2;
  unsigned int v10 = *(_DWORD *)(a1 + 272);
  if (v10 >= *(_DWORD *)(a1 + 276)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v11 = (uint64_t *)(*(void *)(a1 + 264) + 16 * v10);
  uint64_t *v11 = v9;
  v11[1] = 0;
  unsigned int v12 = *(_DWORD *)(a1 + 272);
  *(_DWORD *)(a1 + 272) = v12 + 1;
  *(_DWORD *)(v6 + 8) = v12;
  return *(void *)(a1 + 264) + 16 * v12 + 8;
}

uint64_t sub_1CC01119C(uint64_t result, uint64_t a2, uint64_t a3)
{
  char v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    unsigned int v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 264);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    unsigned int v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    void *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v12 = 0;
      uint64_t result = sub_1CC0108C4((uint64_t)v5, v10, &v12);
      unsigned int v11 = v12;
      void *v12 = *(void *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

unint64_t sub_1CC011260(uint64_t a1, llvm::DataLayout *a2)
{
  uint64_t v3 = a1;
  unint64_t v5 = (unint64_t)(sub_1CB83544C((uint64_t)a2, a1) + 7) >> 3;
  if (v4 == 1)
  {
    if (!v3) {
      return v5;
    }
  }
  else if (!v3)
  {
    return v5;
  }
  if (*(unsigned char *)(v3 + 8) == 16)
  {
    do
    {
      int v6 = *(_DWORD *)(v3 + 12);
      if (!v6) {
        break;
      }
      uint64_t v7 = *((void *)llvm::DataLayout::getStructLayout(a2, (llvm::StructType *)v3) + (v6 - 1) + 2);
      uint64_t v8 = *(void *)(*(void *)(v3 + 16) + 8 * (v6 - 1));
      uint64_t v9 = sub_1CC011260(v8, a2);
      uint64_t v11 = sub_1CB83544C((uint64_t)a2, v3);
      if (v10 == 1) {
      unint64_t v5 = (v7 & 0x1FFFFFFFFFFFFFFFLL) + v5 + v9 - ((unint64_t)(v11 + 7) >> 3);
      }
      BOOL v12 = v8 && *(unsigned char *)(v8 + 8) == 16;
      uint64_t v3 = v8;
    }
    while (v12);
  }
  return v5;
}

llvm::StructLayout *sub_1CC011370(unsigned int *a1, uint64_t a2)
{
  uint64_t v4 = (llvm::DataLayout *)*((void *)a1 + 2);
  unint64_t v5 = *(llvm::Type **)a2;
  unint64_t v6 = (unint64_t)(sub_1CB83544C((uint64_t)v4, *(void *)a2) + 7) >> 3;
  BOOL v8 = v7 == 1;
  char Alignment = llvm::DataLayout::getAlignment(v4, v5, 1);
  unint64_t v11 = ((1 << Alignment) + v6 - 1) & -(1 << Alignment);
  if (v8) {
  unsigned int v12 = a1[7];
  }
  int v13 = *(unsigned __int8 *)(a2 + 16);
  if ((v13 - 11) < 3) {
    goto LABEL_6;
  }
  if (v13 == 16)
  {
    unsigned int v18 = *(_DWORD *)(a2 + 32);
    unsigned int v75 = v18;
    if (v18 > 0x40) {
      operator new[]();
    }
    uint64_t v74 = *(void **)(a2 + 24);
    if (v11 != (v18 + 7) >> 3)
    {
      __int16 v70 = "Literal constant support for weirdly sized int type not yet implemented";
      goto LABEL_87;
    }
    if (v11)
    {
      uint64_t v25 = 0;
      unsigned int v26 = a1[6];
      do
      {
        char v27 = *((unsigned char *)&v74 + v25);
        ++a1[7];
        *((unsigned char *)a1 + v26) = v27;
        unsigned int v26 = a1[6] + 1;
        a1[6] = v26;
        if (v26 == 4)
        {
          (*(void (**)(void, void))(**((void **)a1 + 1) + 328))(*((void *)a1 + 1), *a1);
          unsigned int v26 = 0;
          *a1 = 0;
          a1[6] = 0;
        }
        ++v25;
      }
      while (v11 > v25);
    }
  }
  else
  {
    if (v13 == 19)
    {
LABEL_6:
      if (v11)
      {
        unsigned int v14 = a1[6];
        unsigned int v15 = 1;
        do
        {
          ++a1[7];
          *((unsigned char *)a1 + v14) = 0;
          unsigned int v14 = a1[6] + 1;
          a1[6] = v14;
          if (v14 == 4)
          {
            (*(void (**)(void, void))(**((void **)a1 + 1) + 328))(*((void *)a1 + 1), *a1);
            unsigned int v14 = 0;
            *a1 = 0;
            a1[6] = 0;
          }
        }
        while (v11 > v15++);
      }
      goto LABEL_11;
    }
    if ((v13 & 0xFE) == 0xE)
    {
      uint64_t RawDataValues = llvm::ConstantDataSequential::getRawDataValues((llvm::ConstantDataSequential *)a2);
      if (v20)
      {
        uint64_t v21 = (char *)RawDataValues;
        uint64_t v22 = v20;
        unsigned int v23 = a1[6];
        do
        {
          char v24 = *v21;
          ++a1[7];
          *((unsigned char *)a1 + v23) = v24;
          unsigned int v23 = a1[6] + 1;
          a1[6] = v23;
          if (v23 == 4)
          {
            (*(void (**)(void, void))(**((void **)a1 + 1) + 328))(*((void *)a1 + 1), *a1);
            unsigned int v23 = 0;
            *a1 = 0;
            a1[6] = 0;
          }
          ++v21;
          --v22;
        }
        while (v22);
      }
      goto LABEL_11;
    }
    if (v13 == 17)
    {
      int v28 = (llvm::detail::DoubleAPFloat *)(a2 + 32);
      if (*(_UNKNOWN **)(a2 + 32) == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v28, (llvm::APInt *)&v74);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v28, (uint64_t)&v74);
      }
      unsigned int v29 = v75;
      if (v11 == (v75 + 7) >> 3)
      {
        if (v11)
        {
          uint64_t v30 = 0;
          if (v75 >= 0x41) {
            __int16 v31 = v74;
          }
          else {
            __int16 v31 = &v74;
          }
          unsigned int v32 = a1[6];
          do
          {
            char v33 = *((unsigned char *)v31 + v30);
            ++a1[7];
            *((unsigned char *)a1 + v32) = v33;
            unsigned int v32 = a1[6] + 1;
            a1[6] = v32;
            if (v32 == 4)
            {
              (*(void (**)(void, void))(**((void **)a1 + 1) + 328))(*((void *)a1 + 1), *a1);
              unsigned int v32 = 0;
              *a1 = 0;
              a1[6] = 0;
            }
            ++v30;
          }
          while (v11 > v30);
          unsigned int v29 = v75;
        }
        if (v29 >= 0x41 && v74) {
          MEMORY[0x1D25D9CB0](v74, 0x1000C8000313F17);
        }
        goto LABEL_11;
      }
      __int16 v70 = "Literal constant support for weirdly sized FP type not yet implemented";
LABEL_87:
      llvm::report_fatal_error((llvm *)v70, (const llvm::Twine *)1);
    }
    if ((v13 - 11) >= 0xFFFFFFFD)
    {
      unsigned int v71 = a1[7];
      if (v13 == 8 || v13 == 9) {
        unsigned int v37 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      }
      else {
        unsigned int v37 = *(_DWORD *)(*(void *)a2 + 32);
      }
      if (v37)
      {
        uint64_t v38 = 0;
        uint64_t v39 = v37;
        uint64_t v40 = a2;
        uint64_t v72 = v37;
        do
        {
          sub_1CC011370(a1, *(void *)(v40 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
          if (*(unsigned char *)(a2 + 16) == 9)
          {
            StructLayout = llvm::DataLayout::getStructLayout(*((llvm::DataLayout **)a1 + 2), *(llvm::StructType **)a2);
            unsigned int v42 = StructLayout;
            unsigned int v43 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
            if (v38 == v43 - 1)
            {
              uint64_t v44 = (llvm::DataLayout *)*((void *)a1 + 2);
              uint64_t v45 = *(llvm::Type **)a2;
              uint64_t v46 = sub_1CB83544C((uint64_t)v44, *(void *)a2);
              BOOL v48 = v47 == 1;
              char v49 = llvm::DataLayout::getAlignment(v44, v45, 1);
              if (v48)
              {
                char v60 = v49;
                char v49 = v60;
              }
              unint64_t v73 = ((1 << v49) + ((unint64_t)(v46 + 7) >> 3) - 1) & -(1 << v49);
              unsigned int v43 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
            }
            else
            {
              unint64_t v73 = *((void *)StructLayout + v38 + 3);
            }
            uint64_t v52 = *((void *)v42 + v38 + 2);
            uint64_t v53 = (llvm::DataLayout *)*((void *)a1 + 2);
            uint64_t v54 = **(llvm::Type ***)(v40 - 32 * v43);
            uint64_t v55 = sub_1CB83544C((uint64_t)v53, (uint64_t)v54);
            BOOL v57 = v56 == 1;
            char v59 = llvm::DataLayout::getAlignment(v53, v54, 1);
            if (v57) {
            int v51 = v73 - v52 - (((1 << v59) - 1 + ((unint64_t)(v55 + 7) >> 3)) & -(1 << v59));
            }
            uint64_t v39 = v72;
          }
          else
          {
            int v51 = 0;
          }
          sub_1CC011B0C((uint64_t)a1, v51);
          ++v38;
          v40 += 32;
        }
        while (v39 != v38);
      }
      if (a1[6])
      {
        (*(void (**)(void, void))(**((void **)a1 + 1) + 328))(*((void *)a1 + 1), *a1);
        *a1 = 0;
        a1[6] = 0;
      }
      unsigned int v12 = v71;
    }
    else
    {
      if (!*(unsigned char *)(a2 + 16) || v13 == 3)
      {
        (*(void (**)(void, uint64_t))(**((void **)a1 + 1) + 464))(*((void *)a1 + 1), a2);
        a1[7] += v11;
        goto LABEL_11;
      }
      if (v13 != 5)
      {
        __int16 v70 = "Unsupported literal constant";
        goto LABEL_87;
      }
      int v34 = *(unsigned __int16 *)(a2 + 18);
      if ((v34 - 49) >= 2)
      {
        if (v34 != 48) {
          goto LABEL_11;
        }
        int v61 = (llvm::Type *)(***(void ***)a2 + 1984);
        int v62 = *(void **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        if (v62 && *((unsigned char *)v62 + 16) == 16)
        {
          unsigned int v63 = v62 + 3;
          if (*((_DWORD *)v62 + 8) >= 0x41u) {
            unsigned int v63 = (unint64_t *)*v63;
          }
          int v62 = llvm::ConstantInt::get((llvm::ConstantInt *)(***(void ***)a2 + 1984), *v63, 0);
        }
        uint64_t v64 = (llvm::DataLayout *)*((void *)a1 + 2);
        unint64_t v65 = (unint64_t)(sub_1CB83544C((uint64_t)v64, (uint64_t)v61) + 7) >> 3;
        BOOL v67 = v66 == 1;
        char v68 = llvm::DataLayout::getAlignment(v64, v61, 1);
        unint64_t v11 = ((1 << v68) + v65 - 1) & -(1 << v68);
        if (v67) {
        unsigned int v36 = a1;
        }
        unsigned int v35 = v62;
      }
      else
      {
        unsigned int v35 = *(void **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        unsigned int v36 = a1;
      }
      sub_1CC011370(v36, v35);
    }
  }
LABEL_11:
  uint64_t result = (llvm::StructLayout *)sub_1CC011B0C((uint64_t)a1, v11 + v12 - a1[7]);
  if (*(unsigned char *)(a2 + 16) == 9) {
    return llvm::DataLayout::getStructLayout(*((llvm::DataLayout **)a1 + 2), *(llvm::StructType **)a2);
  }
  return result;
}

uint64_t sub_1CC011B0C(uint64_t result, int a2)
{
  if (a2)
  {
    int v2 = a2;
    uint64_t v3 = (unsigned int *)result;
    unsigned int v4 = *(_DWORD *)(result + 24);
    do
    {
      ++v3[7];
      *((unsigned char *)v3 + v4) = 0;
      unsigned int v4 = v3[6] + 1;
      v3[6] = v4;
      if (v4 == 4)
      {
        uint64_t result = (*(uint64_t (**)(void, void))(**((void **)v3 + 1) + 328))(*((void *)v3 + 1), *v3);
        unsigned int v4 = 0;
        *uint64_t v3 = 0;
        v3[6] = 0;
      }
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_1CC011BA8(void *a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 72))(&v7, a2);
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 80))(&v6, a2);
  uint64_t v5 = v6;
  *a1 = v7;
  a1[1] = v5;
  return result;
}

BOOL sub_1CC011C34(void *a1, void *a2, uint64_t a3)
{
  if ((*(uint64_t (**)(void, void))(*(void *)*a1 + 24))(*a1, *a2)) {
    return 0;
  }
  do
  {
    uint64_t v7 = (const llvm::Function **)(*(uint64_t (**)(void))(*(void *)*a1 + 32))();
    uint64_t v8 = llvm::GPUFunctionInfoCache::get(*(llvm::GPUFunctionInfoCache **)(*(void *)(a3 + 8) + 8), *v7);
    BOOL v6 = *(unsigned char *)(v8 + 8) != 0;
    if (*(unsigned char *)(v8 + 8)) {
      break;
    }
    (*(void (**)(void))(*(void *)*a1 + 40))();
  }
  while (!(*(unsigned int (**)(void, void))(*(void *)*a1 + 24))(*a1, *a2));
  return v6;
}

uint64_t *sub_1CC011D40(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  if (*(void *)a2)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v7);
    uint64_t v3 = v7;
    uint64_t v4 = *a1;
    uint64_t v7 = 0;
    *a1 = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      uint64_t v6 = v7;
      uint64_t v7 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

BOOL sub_1CC011E14(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 16))(&v12);
    uint64_t v5 = v12;
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = a1[1];
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 16))(&v12);
    uint64_t v7 = v12;
  }
  else
  {
    uint64_t v7 = 0;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 24))(v5, v7))
  {
    BOOL v8 = 0;
  }
  else
  {
    do
    {
      uint64_t v10 = (const llvm::Function **)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
      uint64_t v11 = llvm::GPUFunctionInfoCache::get(*(llvm::GPUFunctionInfoCache **)(*(void *)(a2 + 8) + 8), *v10);
      BOOL v8 = *(unsigned char *)(v11 + 9) != 0;
      if (*(unsigned char *)(v11 + 9)) {
        break;
      }
      (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    }
    while (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 24))(v5, v7));
  }
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  return v8;
}

uint64_t sub_1CC011FF0(uint64_t a1, int32x2_t ****a2)
{
  uint64_t v2 = (uint64_t)a2;
  uint64_t v41 = 2;
  unsigned int v42 = 0;
  unsigned int v43 = a2;
  if (a2 != (int32x2_t ****)-8192 && a2 != (int32x2_t ****)-4096 && a2)
  {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v41);
    uint64_t v2 = (uint64_t)v43;
  }
  uint64_t v40 = &off_1F2603940;
  uint64_t v44 = a1;
  uint64_t v45 = 0;
  char v4 = sub_1CC007EA8(*(void *)a1, *(_DWORD *)(a1 + 16), v2, &v45);
  uint64_t v5 = v45;
  if ((v4 & 1) == 0)
  {
    uint64_t v6 = sub_1CC008258((_DWORD *)a1, (uint64_t)&v40, v45);
    uint64_t v5 = v6;
    uint64_t v7 = *(int32x2_t *****)(v6 + 24);
    BOOL v8 = v43;
    if (v7 != v43)
    {
      BOOL v9 = v7 == (int32x2_t ****)-4096 || v7 == 0;
      if (!v9 && v7 != (int32x2_t ****)-8192)
      {
        unint64_t v28 = *(void *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v28 = *(void *)(v6 + 16);
        unsigned int v29 = *(unint64_t **)(v6 + 16);
        if (v29)
        {
          *unsigned int v29 = *v29 & 7 | v28;
        }
        else
        {
          uint64_t v30 = *(void *)(v6 + 24);
          __int16 v31 = ***(int32x2_t ****)v30;
          unint64_t v32 = (unint64_t)v31[303];
          if (v32 <= v28)
          {
            uint64_t v33 = v31[305].u32[0];
            if (v32 + 16 * v33 > v28)
            {
              unsigned int v34 = v33 - 1;
              LODWORD(v35) = v34 & ((v30 >> 4) ^ (v30 >> 9));
              unsigned int v36 = (uint64_t *)(v32 + 16 * v35);
              uint64_t v37 = *v36;
              if (v30 == *v36)
              {
LABEL_44:
                *unsigned int v36 = -8192;
                v31[304] = vadd_s32(v31[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v30 = *(void *)(v6 + 24);
              }
              else
              {
                int v38 = 1;
                while (v37 != -4096)
                {
                  int v39 = v35 + v38++;
                  uint64_t v35 = v39 & v34;
                  uint64_t v37 = *(void *)(v32 + 16 * v35);
                  if (v30 == v37)
                  {
                    unsigned int v36 = (uint64_t *)(v32 + 16 * v35);
                    goto LABEL_44;
                  }
                }
              }
              *(unsigned char *)(v30 + 17) &= ~1u;
            }
          }
        }
        BOOL v8 = v43;
      }
      *(void *)(v6 + 24) = v8;
      if (v8 != (int32x2_t ****)-4096 && v8 != (int32x2_t ****)-8192 && v8 != 0)
      {
        uint64_t v11 = v41;
        uint64_t v12 = (void *)(v41 & 0xFFFFFFFFFFFFFFF8);
        *(void *)(v6 + 16) = *(void *)(v41 & 0xFFFFFFFFFFFFFFF8);
        void *v12 = v6 + 8;
        *(void *)(v6 + 8) = v11 & 0xFFFFFFFFFFFFFFF8 | *(void *)(v6 + 8) & 7;
        int v13 = *(uint64_t **)(v6 + 16);
        if (v13) {
          *int v13 = *v13 & 7 | (v6 + 16);
        }
      }
    }
    uint64_t v14 = v44;
    *(_OWORD *)(v6 + 96) = 0u;
    *(void *)(v6 + 32) = v14;
    *(_OWORD *)(v6 + 80) = 0u;
    *(_OWORD *)(v6 + 112) = 0u;
    *(void *)(v6 + 40) = 1;
    int64x2_t v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    *(int64x2_t *)(v6 + 48) = v15;
    *(int64x2_t *)(v6 + 64) = v15;
    *(void *)(v6 + 80) = v6 + 96;
    *(void *)(v6 + 88) = 0x400000000;
  }
  if (v43 != (int32x2_t ****)-8192 && v43 != (int32x2_t ****)-4096 && v43)
  {
    unint64_t v16 = v41 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v41 & 0xFFFFFFFFFFFFFFF8) = v42;
    if (v42)
    {
      *unsigned int v42 = *v42 & 7 | v16;
    }
    else
    {
      BOOL v17 = v43;
      unsigned int v18 = ***v43;
      unint64_t v19 = (unint64_t)v18[303];
      if (v19 <= v16)
      {
        uint64_t v20 = v18[305].u32[0];
        if (v19 + 16 * v20 > v16)
        {
          unsigned int v21 = v20 - 1;
          LODWORD(v22) = v21 & ((v43 >> 4) ^ (v43 >> 9));
          unsigned int v23 = (int32x2_t *****)(v19 + 16 * v22);
          char v24 = *v23;
          if (v43 == *v23)
          {
LABEL_31:
            *unsigned int v23 = (int32x2_t ****)-8192;
            v18[304] = vadd_s32(v18[304], (int32x2_t)0x1FFFFFFFFLL);
            BOOL v17 = v43;
          }
          else
          {
            int v25 = 1;
            while (v24 != (int32x2_t ****)-4096)
            {
              int v26 = v22 + v25++;
              uint64_t v22 = v26 & v21;
              char v24 = *(int32x2_t *****)(v19 + 16 * v22);
              if (v43 == v24)
              {
                unsigned int v23 = (int32x2_t *****)(v19 + 16 * v22);
                goto LABEL_31;
              }
            }
          }
          *((unsigned char *)v17 + 17) &= ~1u;
        }
      }
    }
  }
  return v5 + 40;
}

void *sub_1CC012314(void *a1, unint64_t a2)
{
  if (!a1) {
LABEL_7:
  }
    abort();
  while (1)
  {
    while (1)
    {
      unint64_t v2 = a1[4];
      if (v2 <= a2) {
        break;
      }
      a1 = (void *)*a1;
      if (!a1) {
        goto LABEL_7;
      }
    }
    if (v2 >= a2) {
      return a1 + 5;
    }
    a1 = (void *)a1[1];
    if (!a1) {
      goto LABEL_7;
    }
  }
}

uint64_t sub_1CC012358(uint64_t ***a1)
{
  unsigned int v1 = a1;
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v2 = (*((unsigned __int16 *)a1 + 9) >> 4) & 0x3FF;
  if (v2 == 100)
  {
    *(void *)&long long v7 = 0x6600000069;
    DWORD2(v7) = 101;
    uint64_t result = sub_1CC00B30C(a1, (uint64_t)"", 0, (uint64_t)".thread_invariants", 18, (__int32 *)&v7, 3);
    if (result) {
      return result;
    }
    uint64_t v8 = 0x6A00000067;
    long long v7 = *(_OWORD *)"e";
    uint64_t result = sub_1CC00B30C(v1, (uint64_t)"", 0, (uint64_t)".constant_program", 17, (__int32 *)&v7, 6);
    if (result) {
      return result;
    }
    uint64_t v3 = ".constant_program.cfg";
    a1 = v1;
    uint64_t v4 = 21;
    uint64_t v5 = 6;
  }
  else
  {
    if (v2 != 105) {
      return 0;
    }
    *(void *)&long long v7 = 0x6800000067;
    uint64_t v3 = ".sample_invariants";
    uint64_t v4 = 18;
    uint64_t v5 = 2;
  }
  uint64_t result = sub_1CC00B30C(a1, (uint64_t)"", 0, (uint64_t)v3, v4, (__int32 *)&v7, v5);
  if (!result) {
    return 0;
  }
  return result;
}

void sub_1CC0124B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v37[4] = *MEMORY[0x1E4F143B8];
  uint64_t v33 = 0;
  v34[0] = a5;
  if (sub_1CC00FB54(a2, v34, &v33)) {
    return;
  }
  unsigned int v10 = *(_DWORD *)(a1 + 8);
  if (v10 >= *(_DWORD *)(a1 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a1 + 8 * v10) = a5;
  ++*(_DWORD *)(a1 + 8);
  v34[0] = a5;
  uint64_t v11 = a2 + 8;
  if (*(unsigned char *)a2)
  {
    int v12 = 4;
  }
  else
  {
    int v12 = *(_DWORD *)(a2 + 16);
    if (!v12)
    {
      unsigned int v21 = 0;
LABEL_18:
      uint64_t v22 = sub_1CC00AEB8(a2, (uint64_t)v34, v34, v21);
      void *v22 = v34[0];
      unsigned int v23 = *(_DWORD *)(a2 + 48);
      if (v23 >= *(_DWORD *)(a2 + 52)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a2 + 40) + 8 * v23) = v34[0];
      ++*(_DWORD *)(a2 + 48);
      goto LABEL_20;
    }
    uint64_t v11 = *(void *)(a2 + 8);
  }
  int v13 = v12 - 1;
  unsigned int v14 = v13 & ((a5 >> 4) ^ (a5 >> 9));
  int64x2_t v15 = (void *)(v11 + 8 * v14);
  uint64_t v16 = *v15;
  if (*v15 != a5)
  {
    BOOL v17 = 0;
    int v18 = 1;
    while (v16 != -4096)
    {
      if (v17) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v16 == -8192;
      }
      if (v19) {
        BOOL v17 = v15;
      }
      unsigned int v20 = v14 + v18++;
      unsigned int v14 = v20 & v13;
      int64x2_t v15 = (void *)(v11 + 8 * v14);
      uint64_t v16 = *v15;
      if (*v15 == a5) {
        goto LABEL_20;
      }
    }
    if (v17) {
      unsigned int v21 = v17;
    }
    else {
      unsigned int v21 = v15;
    }
    goto LABEL_18;
  }
LABEL_20:
  if (*(unsigned char *)(a5 + 16)) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = a5;
  }
  if (!*(unsigned char *)(a5 + 16))
  {
    if (llvm::Function::hasAddressTaken((llvm::Function *)a5, 0, 0, 1, 0, 0))
    {
      sub_1CC00B604(a3, (llvm::Type **)a5);
      v34[0] = a5;
      uint64_t v25 = sub_1CC00C094(a3, v34);
      uint64_t v26 = *(unsigned int *)(v25 + 64);
      if (v26)
      {
        char v27 = *(uint64_t **)(v25 + 56);
        uint64_t v28 = 8 * v26;
        do
        {
          uint64_t v29 = *v27++;
          sub_1CC0124B4(a1, a2, a3, a4, v29);
          v28 -= 8;
        }
        while (v28);
      }
    }
    sub_1CC00C8B8((char *)v34, *(void *)a4, *(_DWORD *)(a4 + 16), v24);
    uint64_t v30 = (uint64_t *)v35;
    if (v36)
    {
      uint64_t v31 = 8 * v36;
      do
      {
        uint64_t v32 = *v30++;
        sub_1CC0124B4(a1, a2, a3, a4, v32);
        v31 -= 8;
      }
      while (v31);
      uint64_t v30 = (uint64_t *)v35;
    }
    if (v30 != v37) {
      free(v30);
    }
    if ((v34[0] & 1) == 0) {
      MEMORY[0x1D25D9CD0](v34[1], 8);
    }
  }
}

uint64_t sub_1CC012764(uint64_t a1, unsigned int *a2)
{
  if ((*(unsigned char *)a1 & 1) == 0)
  {
    uint64_t v5 = a2;
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 8), 8);
    a2 = v5;
  }
  *(void *)a1 = 1;
  int64x2_t v3 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 8) = v3;
  *(int64x2_t *)(a1 + 24) = v3;
  sub_1CC008030((unsigned int *)a1, a2);
  return a1;
}

uint64_t sub_1CC0127D4(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v5 = a1 + (v4 << 7);
    uint64_t v6 = *(void *)(v5 + 24);
    if (v6 == a3)
    {
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      while (v6 != -4096)
      {
        if (v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v6 == -8192;
        }
        if (v11) {
          uint64_t v9 = v5;
        }
        int v12 = v4 + v10++;
        uint64_t v4 = v12 & (a2 - 1);
        uint64_t v5 = a1 + (v4 << 7);
        uint64_t v6 = *(void *)(v5 + 24);
        uint64_t v7 = 1;
        if (v6 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v7 = 0;
      if (v9) {
        uint64_t v5 = v9;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
LABEL_4:
  *a4 = v5;
  return v7;
}

void sub_1CC012868(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    uint64_t v2 = 96 * a2;
    int64x2_t v3 = (void *)(a1 + 64);
    do
    {
      if ((*(v3 - 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v4 = (void *)*(v3 - 2);
        if (v3 != v4) {
          free(v4);
        }
        if ((*(unsigned char *)(v3 - 7) & 1) == 0) {
          MEMORY[0x1D25D9CD0](*(v3 - 6), 8);
        }
      }
      v3 += 12;
      v2 -= 96;
    }
    while (v2);
  }
}

unint64_t sub_1CC0128E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  if (!v7) {
    return a3;
  }
  int v10 = *(uint64_t (*****)(void, uint64_t, unint64_t, uint64_t, uint64_t))(a1 + 16);
  uint64_t v11 = 8 * v7;
  unint64_t v12 = a3;
  char v13 = a4;
  do
  {
    unsigned int v14 = *v10++;
    unint64_t v15 = (**v14)(v14, a2, a3, a4, a5);
    unint64_t v12 = sub_1CC00F788(v12, v13, v15, v16, a5);
    char v13 = v17;
    v11 -= 8;
  }
  while (v11);
  return v12;
}

uint64_t sub_1CC0129B8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(unsigned int *)(result + 24);
  if (v7)
  {
    unsigned int v14 = *(uint64_t **)(result + 16);
    uint64_t v15 = 8 * v7;
    do
    {
      uint64_t v16 = *v14++;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 8))(v16, a2, a3, a4, a5, a6, a7);
      v15 -= 8;
    }
    while (v15);
  }
  return result;
}

void sub_1CC012A5C(void *a1)
{
  *a1 = &unk_1F2603E78;
  unsigned int v1 = (void *)a1[2];
  if (v1 != a1 + 4) {
    free(v1);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC012AD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 16) + 32))();
}

void sub_1CC012B04()
{
}

void sub_1CC012B60()
{
}

uint64_t sub_1CC012BB4()
{
  return 1;
}

uint64_t sub_1CC012BBC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1CC012BC4(uint64_t a1)
{
  return *(void *)(a1 + 16) + 8 * *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CC012BD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 16) + 112))();
}

void sub_1CC012C00()
{
}

void sub_1CC012C64()
{
}

uint64_t sub_1CC012CC8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(result + 24);
  if (v3)
  {
    uint64_t v6 = *(uint64_t **)(result + 16);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 144))(v8, a2, a3);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1CC012D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (!v2) {
    return 1;
  }
  uint64_t v4 = *(uint64_t **)(a1 + 16);
  uint64_t v5 = 8 * v2 - 8;
  do
  {
    uint64_t v6 = *v4++;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 160))(v6, a2);
    if (result) {
      BOOL v8 = v5 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    v5 -= 8;
  }
  while (!v8);
  return result;
}

uint64_t sub_1CC012DBC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 128))(&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 136))(&v10, a1, a2);
  if (v11)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v11 + 16))(&v12);
    uint64_t v4 = v12;
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (v10)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v10 + 16))(&v12);
    uint64_t v5 = v12;
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 24))(v4, v5) & 1) == 0)
  {
    do
    {
      ++v6;
      (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
    }
    while (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v4 + 24))(v4, v5));
  }
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = v11;
  uint64_t v11 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return v6;
}

uint64_t sub_1CC013008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v6 = *(uint64_t **)(a1 + 16);
  uint64_t v7 = 8 * v3 - 8;
  do
  {
    uint64_t v8 = *v6++;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 184))(v8, a2, a3);
    if (result) {
      break;
    }
    uint64_t v10 = v7;
    v7 -= 8;
  }
  while (v10);
  return result;
}

uint64_t sub_1CC013090(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  if (!v1) {
    return 1;
  }
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  uint64_t v3 = 8 * v1 - 8;
  do
  {
    uint64_t v4 = *v2++;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 288))(v4);
    if (result) {
      BOOL v6 = v3 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    v3 -= 8;
  }
  while (!v6);
  return result;
}

uint64_t sub_1CC013108(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 16) + 336))();
}

uint64_t sub_1CC01313C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 64);
  if (!v3)
  {
    uint64_t v5 = *(void **)(a1 + 16);
    uint64_t v6 = *(unsigned int *)(a1 + 24);
    if (v6)
    {
      uint64_t v7 = 8 * v6;
      uint64_t v8 = &v5[v6];
      while (((*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 408))(*v5, a2) & 1) == 0)
      {
        ++v5;
        v7 -= 8;
        if (!v7)
        {
          uint64_t v5 = v8;
          break;
        }
      }
    }
    uint64_t v3 = *v5;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 400))(v3);
}

uint64_t sub_1CC013210(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *(uint64_t **)(a1 + 16);
  uint64_t v5 = 8 * v2 - 8;
  do
  {
    uint64_t v6 = *v4++;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 408))(v6, a2);
    if (result) {
      break;
    }
    uint64_t v8 = v5;
    v5 -= 8;
  }
  while (v8);
  return result;
}

uint64_t sub_1CC013298(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  if (!v1) {
    return 0;
  }
  LODWORD(v2) = 0;
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  uint64_t v4 = 8 * v1;
  do
  {
    uint64_t v5 = *v3++;
    unsigned int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 440))(v5);
    if (v6 <= v2) {
      uint64_t v2 = v2;
    }
    else {
      uint64_t v2 = v6;
    }
    v4 -= 8;
  }
  while (v4);
  return v2;
}

uint64_t sub_1CC01331C(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = 0;
  uint64_t v3 = *(void **)(a1 + 16);
  uint64_t v4 = 8 * v1;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*v3 + 560))(*v3);
    if (result)
    {
      if (v2) {
        llvm::report_fatal_error((llvm *)"Assuming only one exit function.", (const llvm::Twine *)1);
      }
    }
    else
    {
      uint64_t result = v2;
    }
    ++v3;
    uint64_t v2 = result;
    v4 -= 8;
  }
  while (v4);
  return result;
}

uint64_t sub_1CC0133B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = *(uint64_t **)(a1 + 16);
  uint64_t v6 = 8 * v2;
  do
  {
    uint64_t v7 = *v5++;
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 592))(v7, a2);
    if (v8) {
      uint64_t v4 = v8;
    }
    v6 -= 8;
  }
  while (v6);
  return v4;
}

uint64_t sub_1CC013444(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v3 = *(unsigned int *)(a1 + 24);
  if (v3)
  {
    uint64_t v6 = 8 * v3;
    uint64_t v7 = &v2[v3];
    while ((*(uint64_t (**)(void))(*(void *)*v2 + 568))(*v2) != a2)
    {
      ++v2;
      v6 -= 8;
      if (!v6)
      {
        uint64_t v2 = v7;
        break;
      }
    }
    uint64_t v8 = v2;
    uint64_t v2 = *(void **)(a1 + 16);
    uint64_t v9 = *(unsigned int *)(a1 + 24);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = *(void **)(a1 + 16);
  }
  if (v8 == &v2[v9]) {
    return 0;
  }
  else {
    return *v8;
  }
}

uint64_t sub_1CC013508(uint64_t a1, uint64_t a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 640))(a1);
  if ((result & 0xFF00000000) != 0) {
    unsigned int v7 = result;
  }
  else {
    unsigned int v7 = v3;
  }
  if (v7 <= v3) {
    uint64_t v3 = v3;
  }
  else {
    uint64_t v3 = v7;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  if (v8)
  {
    uint64_t v9 = *(void **)(a1 + 16);
    uint64_t v10 = 8 * v8;
    do
    {
      uint64_t v11 = *v9;
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)*v9 + 64))(*v9, a2);
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 632))(v11, a2, v3);
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  return result;
}

unint64_t sub_1CC013604(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 24);
  if (v3)
  {
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = *(void **)(a1 + 16);
    uint64_t v9 = 8 * v3;
    do
    {
      uint64_t v10 = *v8;
      if ((*(unsigned int (**)(void, uint64_t))(*(void *)*v8 + 64))(*v8, a2))
      {
        unint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 640))(v10, a2);
        if (BYTE4(v11))
        {
          if (v7)
          {
            unsigned int v13 = v6 | (v5 << 8);
            if (v13 <= v11) {
              unsigned int v13 = v11;
            }
            unsigned int v6 = v13;
            unsigned int v5 = v13 >> 8;
          }
          else
          {
            unint64_t v2 = v11 >> 40;
            unsigned int v6 = v11;
            unsigned int v5 = v11 >> 8;
            uint64_t v7 = BYTE4(v11);
          }
        }
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    uint64_t v7 = 0;
    unsigned int v6 = 0;
    unsigned int v5 = 0;
  }
  return v6 | ((unint64_t)v5 << 8) | (v2 << 40) | (v7 << 32);
}

uint64_t sub_1CC01372C(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  if (!v1) {
    return 0;
  }
  unint64_t v2 = *(uint64_t **)(a1 + 16);
  uint64_t v3 = 8 * v1 - 8;
  do
  {
    uint64_t v4 = *v2++;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 648))(v4);
    if (result) {
      break;
    }
    uint64_t v6 = v3;
    v3 -= 8;
  }
  while (v6);
  return result;
}

uint64_t sub_1CC0137A4(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  if (!v1) {
    return 0;
  }
  unint64_t v2 = *(uint64_t **)(a1 + 16);
  uint64_t v3 = 8 * v1 - 8;
  do
  {
    uint64_t v4 = *v2++;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 656))(v4);
    if (result) {
      break;
    }
    uint64_t v6 = v3;
    v3 -= 8;
  }
  while (v6);
  return result;
}

uint64_t sub_1CC01381C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F2604120;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 1;
  int64x2_t v4 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 56) = v4;
  *(int64x2_t *)(a1 + 72) = v4;
  *(void *)(a1 + 88) = a1 + 104;
  *(void *)(a1 + 96) = 0x400000000;
  if (a2 != a3)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 72))(&v9);
    uint64_t v5 = v9;
    uint64_t v9 = 0;
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v5;
    if (v6)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      uint64_t v8 = v9;
      uint64_t v9 = 0;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
    }
    sub_1CC013944(a1);
  }
  return a1;
}

uint64_t sub_1CC013944(uint64_t a1)
{
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr))(***(void ***)(a1 + 32) + 80))(&v9);
    int v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), v9);
    uint64_t result = v9;
    uint64_t v9 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    if (!v2) {
      break;
    }
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32) + 8;
    *(void *)(a1 + 32) = v5;
    if (v5 == v4) {
      break;
    }
    (*(void (**)(uint64_t *__return_ptr))(**(void **)v5 + 72))(&v9);
    uint64_t v6 = v9;
    uint64_t v9 = 0;
    uint64_t v7 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v6;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      uint64_t v8 = v9;
      uint64_t v9 = 0;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
    }
  }
  return result;
}

void sub_1CC013AAC(uint64_t a1)
{
  *(void *)a1 = &unk_1F2604120;
  int v2 = *(void **)(a1 + 88);
  if (v2 != (void *)(a1 + 104)) {
    free(v2);
  }
  if ((*(unsigned char *)(a1 + 48) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 56), 8);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC013B6C()
{
}

uint64_t sub_1CC013CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 != *(void *)(a2 + 32)) {
    return 0;
  }
  if (v2 == *(void *)(a1 + 24)) {
    return 1;
  }
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), *(void *)(a2 + 40));
}

uint64_t sub_1CC013D40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 32))();
}

uint64_t sub_1CC013D68(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v3 = v2;
  uint64_t v5 = (unsigned int *)(a1 + 48);
  unsigned int v4 = *(_DWORD *)(a1 + 48);
  int v6 = v4 & 1;
  unsigned int v7 = v2 >> 4;
  if (v4)
  {
    int v8 = 4;
    uint64_t v9 = a1 + 56;
  }
  else
  {
    int v8 = *(_DWORD *)(a1 + 64);
    if (!v8)
    {
      int v18 = 0;
      unsigned int v19 = 0;
      goto LABEL_19;
    }
    uint64_t v9 = *(void *)(a1 + 56);
  }
  int v10 = v8 - 1;
  unsigned int v11 = v10 & (v7 ^ (v2 >> 9));
  uint64_t v12 = (uint64_t *)(v9 + 8 * v11);
  uint64_t v13 = *v12;
  if (v2 == *v12) {
    goto LABEL_26;
  }
  unsigned int v14 = 0;
  int v15 = 1;
  while (v13 != -4096)
  {
    if (v14) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v13 == -8192;
    }
    if (v16) {
      unsigned int v14 = v12;
    }
    unsigned int v17 = v11 + v15++;
    unsigned int v11 = v17 & v10;
    uint64_t v12 = (uint64_t *)(v9 + 8 * v11);
    uint64_t v13 = *v12;
    if (v2 == *v12) {
      goto LABEL_26;
    }
  }
  if (v14) {
    int v18 = v14;
  }
  else {
    int v18 = v12;
  }
  if (v4) {
    unsigned int v19 = 4;
  }
  else {
    unsigned int v19 = *(_DWORD *)(a1 + 64);
  }
LABEL_19:
  if (4 * (v4 >> 1) + 4 < 3 * v19)
  {
    if (v19 + ~(v4 >> 1) - *(_DWORD *)(a1 + 52) <= v19 >> 3)
    {
      sub_1CC0142F8(a1 + 48, v19);
      int v39 = 0;
      sub_1CC014260(a1 + 48, v3, &v39);
      int v18 = v39;
      unsigned int v4 = *v5;
      int v6 = *v5 & 1;
    }
    goto LABEL_22;
  }
  sub_1CC0142F8(a1 + 48, 2 * v19);
  unsigned int v4 = *v5;
  if (*v5)
  {
    int v30 = 4;
    uint64_t v31 = a1 + 56;
  }
  else
  {
    int v30 = *(_DWORD *)(a1 + 64);
    if (!v30)
    {
      int v6 = 0;
      int v18 = 0;
      goto LABEL_22;
    }
    uint64_t v31 = *(void *)(a1 + 56);
  }
  int v6 = *v5 & 1;
  int v32 = v30 - 1;
  unsigned int v33 = (v30 - 1) & (v7 ^ (v3 >> 9));
  int v18 = (uint64_t *)(v31 + 8 * v33);
  uint64_t v34 = *v18;
  if (v3 != *v18)
  {
    uint64_t v35 = 0;
    int v36 = 1;
    while (v34 != -4096)
    {
      if (v35) {
        BOOL v37 = 0;
      }
      else {
        BOOL v37 = v34 == -8192;
      }
      if (v37) {
        uint64_t v35 = v18;
      }
      unsigned int v38 = v33 + v36++;
      unsigned int v33 = v38 & v32;
      int v18 = (uint64_t *)(v31 + 8 * (v38 & v32));
      uint64_t v34 = *v18;
      if (v3 == *v18) {
        goto LABEL_22;
      }
    }
    if (v35) {
      int v18 = v35;
    }
  }
LABEL_22:
  unsigned int *v5 = (v4 & 0xFFFFFFFE | v6) + 2;
  if (*v18 != -4096) {
    --*(_DWORD *)(a1 + 52);
  }
  *int v18 = v3;
  unsigned int v20 = *(_DWORD *)(a1 + 96);
  if (v20 >= *(_DWORD *)(a1 + 100)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 88) + 8 * v20) = v3;
  ++*(_DWORD *)(a1 + 96);
LABEL_26:
  while (1)
  {
    (*(void (**)(void))(**(void **)(a1 + 40) + 40))(*(void *)(a1 + 40));
    sub_1CC013944(a1);
    if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
      return a1;
    }
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    if (*(unsigned char *)(a1 + 48))
    {
      int v22 = 4;
      uint64_t v23 = a1 + 56;
    }
    else
    {
      int v22 = *(_DWORD *)(a1 + 64);
      if (!v22) {
        return a1;
      }
      uint64_t v23 = *(void *)(a1 + 56);
    }
    int v24 = v22 - 1;
    unsigned int v25 = v24 & ((v21 >> 4) ^ (v21 >> 9));
    uint64_t v26 = *(void *)(v23 + 8 * v25);
    if (v21 != v26)
    {
      int v27 = 1;
      while (v26 != -4096)
      {
        unsigned int v28 = v25 + v27++;
        unsigned int v25 = v28 & v24;
        uint64_t v26 = *(void *)(v23 + 8 * v25);
        if (v21 == v26) {
          goto LABEL_26;
        }
      }
      return a1;
    }
  }
}

uint64_t sub_1CC0140B0(uint64_t a1)
{
  *(void *)a1 = &unk_1F2604120;
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2 != (void *)(a1 + 104)) {
    free(v2);
  }
  if ((*(unsigned char *)(a1 + 48) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 56), 8);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void *sub_1CC014150(unsigned int *a1, _DWORD *a2)
{
  unsigned int v2 = *a1;
  if ((*a1 & 1) == 0)
  {
    int v6 = a2;
    int v8 = a1;
    MEMORY[0x1D25D9CD0](*((void *)a1 + 1), 8);
    a2 = v6;
    a1 = v8;
    unsigned int v2 = *v8;
  }
  *a1 = v2 | 1;
  if ((*(unsigned char *)a2 & 1) == 0 && a2[4] >= 5u)
  {
    *a1 = v2 & 0xFFFFFFFE;
    if (*a2) {
      uint64_t v4 = 4;
    }
    else {
      uint64_t v4 = a2[4];
    }
    unsigned int v7 = a2;
    uint64_t v9 = a1;
    uint64_t v5 = operator new(8 * v4, (std::align_val_t)8uLL);
    a2 = v7;
    a1 = v9;
    *((void *)v9 + 1) = v5;
    *((void *)v9 + 2) = v4;
  }

  return sub_1CC014208(a1, a2);
}

void *sub_1CC014208(unsigned int *a1, _DWORD *a2)
{
  int v3 = *a1 & 1;
  *a1 = *a2 & 0xFFFFFFFE | v3;
  a1[1] = a2[1];
  uint64_t v4 = a1 + 2;
  if (!v3) {
    uint64_t v4 = (void *)*v4;
  }
  char v6 = *(unsigned char *)a2;
  uint64_t v5 = a2 + 2;
  if ((v6 & 1) == 0) {
    uint64_t v5 = (void *)*v5;
  }
  if (v3) {
    size_t v7 = 32;
  }
  else {
    size_t v7 = 8 * a1[4];
  }
  return memcpy(v4, v5, v7);
}

uint64_t sub_1CC014260(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = result + 8;
  if (*(unsigned char *)result)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      size_t v7 = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(result + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  size_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      size_t v7 = (void *)(v3 + 8 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_16;
      }
    }
    if (v9) {
      size_t v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

int *sub_1CC0142F8(uint64_t a1, unsigned int a2)
{
  uint64_t v14[4] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v6 = *(uint64_t **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v8 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v8;
    }
    sub_1CC014474((int *)a1, v6, &v6[v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v9 = v14;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    uint64_t v11 = *(void *)(a1 + i);
    if ((v11 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v9++ = v11;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v12 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v12;
  }
  return sub_1CC014474((int *)a1, v14, v9);
}

int *sub_1CC014474(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    unsigned int v6 = result + 10;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    unsigned int v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v9 = 4;
        uint64_t v8 = result + 2;
      }
      else
      {
        uint64_t v8 = (int *)*((void *)result + 1);
        int v9 = result[4];
      }
      int v10 = v9 - 1;
      unsigned int v11 = (v9 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v12 = &v8[2 * v11];
      uint64_t v13 = *(void *)v12;
      if (v7 != *(void *)v12)
      {
        unsigned int v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            unsigned int v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          uint64_t v12 = &v8[2 * (v17 & v10)];
          uint64_t v13 = *(void *)v12;
          if (v7 == *(void *)v12) {
            goto LABEL_21;
          }
        }
        if (v14) {
          uint64_t v12 = v14;
        }
      }
LABEL_21:
      *(void *)uint64_t v12 = v7;
      *result += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CC014574(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_1F2604160;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 1;
  int64x2_t v5 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 56) = v5;
  *(int64x2_t *)(a1 + 72) = v5;
  *(void *)(a1 + 88) = a1 + 104;
  *(void *)(a1 + 96) = 0x400000000;
  if (a3 != a4)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a3 + 128))(&v10);
    uint64_t v6 = v10;
    uint64_t v10 = 0;
    uint64_t v7 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v6;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      uint64_t v9 = v10;
      uint64_t v10 = 0;
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
    }
    sub_1CC0146A0(a1);
  }
  return a1;
}

uint64_t sub_1CC0146A0(uint64_t a1)
{
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr))(***(void ***)(a1 + 32) + 136))(&v9);
    int v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), v9);
    uint64_t result = v9;
    uint64_t v9 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    if (!v2) {
      break;
    }
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32) + 8;
    *(void *)(a1 + 32) = v5;
    if (v5 == v4) {
      break;
    }
    (*(void (**)(uint64_t *__return_ptr))(**(void **)v5 + 128))(&v9);
    uint64_t v6 = v9;
    uint64_t v9 = 0;
    uint64_t v7 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v6;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      uint64_t v8 = v9;
      uint64_t v9 = 0;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
    }
  }
  return result;
}

void sub_1CC014810(uint64_t a1)
{
  *(void *)a1 = &unk_1F2604160;
  int v2 = *(void **)(a1 + 88);
  if (v2 != (void *)(a1 + 104)) {
    free(v2);
  }
  if ((*(unsigned char *)(a1 + 48) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 56), 8);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC0148D0()
{
}

uint64_t sub_1CC014A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 != *(void *)(a2 + 32)) {
    return 0;
  }
  if (v2 == *(void *)(a1 + 24)) {
    return 1;
  }
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), *(void *)(a2 + 40));
}

uint64_t sub_1CC014AA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 32))();
}

uint64_t sub_1CC014ACC(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  sub_1CC014C4C(v2, &v6);
  do
  {
    (*(void (**)(void))(**(void **)(a1 + 40) + 40))(*(void *)(a1 + 40));
    sub_1CC0146A0(a1);
    if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
      break;
    }
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    uint64_t v5 = 0;
    uint64_t v6 = v3;
  }
  while ((sub_1CC014D98(v2, &v6, &v5) & 1) != 0);
  return a1;
}

uint64_t sub_1CC014BAC(uint64_t a1)
{
  *(void *)a1 = &unk_1F2604160;
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2 != (void *)(a1 + 104)) {
    free(v2);
  }
  if ((*(unsigned char *)(a1 + 48) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 56), 8);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

BOOL sub_1CC014C4C(uint64_t a1, uint64_t *a2)
{
  sub_1CC014CDC(a1, a2, (uint64_t)&v8);
  int v4 = v9;
  if (v9)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = *(_DWORD *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return v4 != 0;
}

void *sub_1CC014CDC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v14 = 0;
  uint64_t result = (void *)sub_1CC014D98(a1, a2, &v14);
  uint64_t v7 = v14;
  if (result)
  {
    uint64_t v12 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v13 = 4;
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 8);
      uint64_t v13 = *(unsigned int *)(a1 + 16);
    }
    char v11 = 0;
    uint64_t v10 = v12 + 8 * v13;
  }
  else
  {
    uint64_t result = sub_1CC014E40((_DWORD *)a1, (uint64_t)a2, a2, v14);
    uint64_t v7 = result;
    *uint64_t result = *a2;
    uint64_t v8 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v9 = 4;
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = *(unsigned int *)(a1 + 16);
    }
    uint64_t v10 = v8 + 8 * v9;
    char v11 = 1;
  }
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v10;
  *(unsigned char *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_1CC014D98(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_10;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_17:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_17;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_10:
  *a3 = v7;
  return result;
}

void *sub_1CC014E40(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1CC014F04((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CC014D98((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

uint64_t sub_1CC014F04(uint64_t a1, unsigned int a2)
{
  uint64_t v14[4] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    char v11 = *(void **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CC015080(a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  int v6 = v14;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC015080(a1, v14, v6);
}

uint64_t sub_1CC015080(uint64_t result, void *a2, void *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 40);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      int v10 = 0;
      uint64_t result = sub_1CC014D98((uint64_t)v5, a2, &v10);
      *int v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void *sub_1CC015140(void *result)
{
  int v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if (v1)
    {
      uint64_t v2 = result + 1;
      unint64_t v3 = result + 5;
      goto LABEL_5;
    }
    uint64_t v5 = *((unsigned int *)result + 4);
    if (((2 * v1) & 0xFFFFFFFC) >= v5 || v5 < 0x41)
    {
      if (!v5)
      {
        int v4 = 0;
LABEL_7:
        *(_DWORD *)uint64_t result = v4;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      uint64_t v2 = (void *)result[1];
      unint64_t v3 = &v2[v5];
      do
LABEL_5:
        *v2++ = -4096;
      while (v2 != v3);
      int v4 = *(_DWORD *)result & 1;
      goto LABEL_7;
    }
    return sub_1CD48FBE8(result);
  }
  return result;
}

int32x2_t sub_1CC0151BC(int32x2_t *a1, uint64_t a2)
{
  int32x2_t v2 = *a1;
  uint64_t v3 = a1[2].u32[0];
  if (v3)
  {
    uint64_t v4 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v5 = *(void *)&v2 + (v4 << 7);
    uint64_t v6 = *(void *)(v5 + 24);
    if (v6 == a2) {
      goto LABEL_3;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v5 = *(void *)&v2 + (v4 << 7);
      uint64_t v6 = *(void *)(v5 + 24);
      if (v6 == a2) {
        goto LABEL_3;
      }
    }
  }
  uint64_t v5 = *(void *)&v2 + (v3 << 7);
LABEL_3:
  if (*(void *)&v2 + (v3 << 7) != v5) {
    return sub_1CD48E65C(a1, v5);
  }
  return result;
}

uint64_t *sub_1CC01523C(uint64_t *result)
{
  unsigned int v1 = *((_DWORD *)result + 2);
  if (v1)
  {
    uint64_t v2 = *result;
    uint64_t v3 = 104 * v1;
    do
    {
      uint64_t v4 = result;
      uint64_t v5 = *(void **)(v2 + v3 - 48);
      if ((void *)(v2 + v3 - 32) != v5) {
        free(v5);
      }
      if ((*(unsigned char *)(v2 + v3 - 88) & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)(v2 + v3 - 80), 8);
      }
      v3 -= 104;
      int32x2_t result = v4;
    }
    while (v3);
  }
  *((_DWORD *)result + 2) = 0;
  return result;
}

uint64_t sub_1CC0152C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1 + 16;
    do
    {
      *(void *)a3 = *(void *)(v5 - 16);
      *(unsigned char *)(a3 + 8) = *(unsigned char *)(v5 - 8);
      sub_1CC00C6F8((unsigned int *)(a3 + 16), (unsigned int *)v5);
      sub_1CBA6E388(a3 + 56, (const void **)(v5 + 40));
      a3 += 104;
      uint64_t v6 = v5 + 88;
      v5 += 104;
    }
    while (v6 != a2);
  }
  return a3;
}

void sub_1CC01533C(llvm *a1)
{
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v2);
  operator new();
}

void llvm::createIVUsersPass(llvm *this)
{
}

uint64_t llvm::IVUsers::AddUsersIfInteresting(llvm::IVUsers *this, llvm::Instruction *a2)
{
  v139[4] = a2;
  uint64_t v4 = *(void *)(*(void *)(*((void *)a2 + 5) + 56) + 40);
  int v7 = (llvm::Instruction **)*((void *)this + 5);
  uint64_t v6 = (llvm::Instruction **)*((void *)this + 6);
  uint64_t v5 = (unsigned int *)((char *)this + 40);
  uint64_t v9 = v5 + 5;
  uint64_t v8 = v5[5];
  if (v6 == v7)
  {
    if (v8)
    {
      int v10 = 0;
      uint64_t v11 = 8 * v8;
      uint64_t v12 = v6;
      do
      {
        if (*v12 == a2) {
          return 1;
        }
        if (*v12 == (llvm::Instruction *)-2) {
          int v10 = v12;
        }
        ++v12;
        v11 -= 8;
      }
      while (v11);
      if (v10)
      {
        *int v10 = a2;
        --*((_DWORD *)this + 16);
        goto LABEL_33;
      }
    }
    unsigned int v13 = *((_DWORD *)this + 14);
    if (v8 < v13)
    {
      *uint64_t v9 = v8 + 1;
      v6[v8] = a2;
      goto LABEL_33;
    }
  }
  else
  {
    unsigned int v13 = *((_DWORD *)this + 14);
  }
  if (3 * v13 <= 4 * ((int)v8 - *((_DWORD *)this + 16)))
  {
    if (v13 >= 0x40) {
      v13 *= 2;
    }
    else {
      unsigned int v13 = 128;
    }
    goto LABEL_233;
  }
  if (v13 - v8 < v13 >> 3)
  {
LABEL_233:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v5, v13);
    unsigned int v13 = *((_DWORD *)this + 14);
    uint64_t v6 = (llvm::Instruction **)*((void *)this + 6);
  }
  unsigned int v14 = v13 - 1;
  unsigned int v15 = (v13 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  BOOL v16 = &v6[v15];
  unsigned int v17 = *v16;
  if (*v16 != (llvm::Instruction *)-1)
  {
    int v18 = 0;
    int v19 = 1;
    while (v17 != a2)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v17 == (llvm::Instruction *)-2;
      }
      if (v20) {
        int v18 = v16;
      }
      unsigned int v21 = v15 + v19++;
      unsigned int v15 = v21 & v14;
      BOOL v16 = &v6[v21 & v14];
      unsigned int v17 = *v16;
      if (*v16 == (llvm::Instruction *)-1) {
        goto LABEL_26;
      }
    }
    return 1;
  }
  int v18 = 0;
LABEL_26:
  if (v18) {
    int v22 = v18;
  }
  else {
    int v22 = v16;
  }
  if (*v22 == a2) {
    return 1;
  }
  if (*v22 == (llvm::Instruction *)-2) {
    --*((_DWORD *)this + 16);
  }
  else {
    ++*v9;
  }
  void *v22 = a2;
LABEL_33:
  uint64_t v23 = *(void *)a2;
  unsigned int v24 = *(_DWORD *)(*(void *)a2 + 8);
  if ((v24 & 0xFD) != 0xD) {
    return 0;
  }
  if (*((unsigned char *)a2 + 16) != 83)
  {
    if (llvm::isSafeToSpeculativelyExecute((uint64_t)a2, 0, 0, 0))
    {
      uint64_t v23 = *(void *)a2;
      unsigned int v24 = *(_DWORD *)(*(void *)a2 + 8);
      goto LABEL_37;
    }
    return 0;
  }
LABEL_37:
  uint64_t v25 = *(void *)(**((void **)this + 4) + 40);
  if (v24 == 15)
  {
    if ((v24 & 0xFE) == 0x12) {
      unsigned int v24 = *(_DWORD *)(**(void **)(v23 + 16) + 8);
    }
    uint64_t v126 = *(void *)(v25 + 504);
    if (v24 < 0x100) {
      goto LABEL_228;
    }
    unsigned int v127 = v24 >> 8;
    unint64_t v128 = *(unsigned int *)(v25 + 512);
    uint64_t v129 = v126;
    if (v128)
    {
      uint64_t v129 = v126;
      unint64_t v130 = v128;
      do
      {
        unint64_t v131 = v130 >> 1;
        uint64_t v132 = v129 + 16 * (v130 >> 1);
        unsigned int v133 = *(_DWORD *)(v132 + 8);
        uint64_t v134 = v132 + 16;
        v130 += ~(v130 >> 1);
        if (v133 < v127) {
          uint64_t v129 = v134;
        }
        else {
          unint64_t v130 = v131;
        }
      }
      while (v130);
    }
    if (v129 == v126 + 16 * v128 || *(_DWORD *)(v129 + 8) != v127) {
LABEL_228:
    }
      uint64_t v129 = v126;
    unint64_t v27 = *(unsigned int *)(v129 + 12);
  }
  else
  {
    unint64_t v27 = sub_1CB83544C(v25 + 272, v23);
    if (v26 == 1) {
  }
    }
  if (v27 > 0x40) {
    return 0;
  }
  unsigned int v28 = *(char **)(v4 + 304);
  size_t v29 = *(void *)(v4 + 312);
  int v30 = (char *)memchr(v28, v27, v29);
  uint64_t v31 = v30 ? v30 : &v28[v29];
  if (v31 - v28 == v29) {
    return 0;
  }
  uint64_t v33 = *((void *)this + 27);
  uint64_t v32 = *((void *)this + 28);
  if (v32 == v33)
  {
    uint64_t v34 = *((unsigned int *)this + 59);
    uint64_t v35 = (llvm::Instruction **)(v32 + 8 * v34);
    if (v34)
    {
      uint64_t v36 = 0;
      uint64_t v37 = 8 * v34;
      while (*(llvm::Instruction **)(v32 + v36) != a2)
      {
        v36 += 8;
        if (v37 == v36) {
          goto LABEL_65;
        }
      }
      uint64_t v35 = (llvm::Instruction **)(v32 + v36);
    }
LABEL_65:
    uint64_t v33 = *((void *)this + 28);
  }
  else
  {
    uint64_t v39 = *((unsigned int *)this + 58);
    int v40 = v39 - 1;
    unsigned int v41 = (v39 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v35 = (llvm::Instruction **)(v32 + 8 * v41);
    unsigned int v42 = *v35;
    if (*v35 == (llvm::Instruction *)-1)
    {
      unsigned int v43 = 0;
LABEL_212:
      if (v43) {
        uint64_t v35 = v43;
      }
      if (*v35 != a2) {
        uint64_t v35 = (llvm::Instruction **)(v32 + 8 * v39);
      }
    }
    else
    {
      unsigned int v43 = 0;
      int v44 = 1;
      while (v42 != a2)
      {
        if (v43) {
          BOOL v45 = 0;
        }
        else {
          BOOL v45 = v42 == (llvm::Instruction *)-2;
        }
        if (v45) {
          unsigned int v43 = v35;
        }
        unsigned int v46 = v41 + v44++;
        unsigned int v41 = v46 & v40;
        uint64_t v35 = (llvm::Instruction **)(v32 + 8 * (v46 & v40));
        unsigned int v42 = *v35;
        if (*v35 == (llvm::Instruction *)-1) {
          goto LABEL_212;
        }
      }
    }
  }
  BOOL v20 = v32 == v33;
  uint64_t v47 = 232;
  if (v20) {
    uint64_t v47 = 236;
  }
  if (v35 != (llvm::Instruction **)(v32 + 8 * *(unsigned int *)((char *)this + v47))) {
    return 0;
  }
  uint64_t v48 = *((void *)this + 4);
  uint64_t v49 = *(void *)(v48 + 104);
  unsigned int v50 = *(_DWORD *)(v48 + 120);
  if (!v50) {
    goto LABEL_75;
  }
  unsigned int v51 = v50 - 1;
  unsigned int v52 = (v50 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v53 = v49 + 48 * v52;
  uint64_t v54 = *(llvm::Instruction **)(v53 + 24);
  if (v54 != a2)
  {
    int v55 = 1;
    while (v54 != (llvm::Instruction *)-4096)
    {
      unsigned int v56 = v52 + v55++;
      unsigned int v52 = v56 & v51;
      uint64_t v53 = v49 + 48 * (v56 & v51);
      uint64_t v54 = *(llvm::Instruction **)(v53 + 24);
      if (v54 == a2) {
        goto LABEL_76;
      }
    }
LABEL_75:
    uint64_t v53 = v49 + 48 * v50;
  }
LABEL_76:
  if (v53 == v49 + 48 * v50 || (uint64_t SCEVIter = *(void *)(v53 + 40)) == 0)
  {
    uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter(*((llvm::ScalarEvolution **)this + 4), (unint64_t)a2);
    uint64_t v48 = *((void *)this + 4);
  }
  if (!sub_1CC015E4C(SCEVIter, (uint64_t)a2, *(void *)this, (llvm::ScalarEvolution *)v48, *((uint64_t **)this + 2)))return 0; {
  uint64_t v135 = (char *)v139;
  }
  v136 = (char *)v139;
  uint64_t v137 = 4;
  int v138 = 0;
  uint64_t v58 = *((void *)a2 + 1);
  if (v58)
  {
    char v59 = (unsigned int *)((char *)this + 56);
    while (1)
    {
      uint64_t v60 = *(void *)(v58 + 24);
      int v61 = v136;
      uint64_t v62 = HIDWORD(v137);
      if (v136 == v135)
      {
        if (HIDWORD(v137))
        {
          unsigned int v63 = 0;
          uint64_t v64 = 8 * HIDWORD(v137);
          unint64_t v65 = v136;
          do
          {
            if (*(void *)v65 == v60) {
              goto LABEL_177;
            }
            if (*(void *)v65 == -2) {
              unsigned int v63 = v65;
            }
            v65 += 8;
            v64 -= 8;
          }
          while (v64);
          if (v63)
          {
            *(void *)unsigned int v63 = v60;
            --v138;
            goto LABEL_114;
          }
        }
        unsigned int v66 = v137;
        if (HIDWORD(v137) < v137)
        {
          ++HIDWORD(v137);
          *(void *)&v136[8 * v62] = v60;
          goto LABEL_114;
        }
      }
      else
      {
        unsigned int v66 = v137;
      }
      if (3 * v66 <= 4 * (HIDWORD(v137) - v138)) {
        break;
      }
      if (v66 - HIDWORD(v137) < v66 >> 3) {
        goto LABEL_206;
      }
LABEL_95:
      unsigned int v67 = v66 - 1;
      unsigned int v68 = (v66 - 1) & ((v60 >> 4) ^ (v60 >> 9));
      unsigned int v69 = &v61[8 * v68];
      uint64_t v70 = *(void *)v69;
      if (*(void *)v69 != -1)
      {
        unsigned int v71 = 0;
        int v72 = 1;
        while (v70 != v60)
        {
          if (v71) {
            BOOL v73 = 0;
          }
          else {
            BOOL v73 = v70 == -2;
          }
          if (v73) {
            unsigned int v71 = v69;
          }
          unsigned int v74 = v68 + v72++;
          unsigned int v68 = v74 & v67;
          unsigned int v69 = &v61[8 * (v74 & v67)];
          uint64_t v70 = *(void *)v69;
          if (*(void *)v69 == -1) {
            goto LABEL_107;
          }
        }
        goto LABEL_177;
      }
      unsigned int v71 = 0;
LABEL_107:
      if (v71) {
        unsigned int v75 = v71;
      }
      else {
        unsigned int v75 = v69;
      }
      if (*(void *)v75 == v60) {
        goto LABEL_177;
      }
      if (*(void *)v75 == -2) {
        --v138;
      }
      else {
        ++HIDWORD(v137);
      }
      *(void *)unsigned int v75 = v60;
LABEL_114:
      int v76 = *(unsigned __int8 *)(v60 + 16);
      if (v76 != 83) {
        goto LABEL_138;
      }
      uint64_t v78 = *((void *)this + 5);
      uint64_t v77 = *((void *)this + 6);
      if (v77 == v78)
      {
        uint64_t v79 = *v9;
        unint64_t v80 = (void *)(v77 + 8 * v79);
        if (v79)
        {
          uint64_t v81 = 0;
          uint64_t v82 = 8 * v79;
          while (*(void *)(v77 + v81) != v60)
          {
            v81 += 8;
            if (v82 == v81) {
              goto LABEL_133;
            }
          }
          unint64_t v80 = (void *)(v77 + v81);
        }
LABEL_133:
        uint64_t v78 = *((void *)this + 6);
      }
      else
      {
        uint64_t v83 = *v59;
        int v84 = v83 - 1;
        unsigned int v85 = (v83 - 1) & ((v60 >> 4) ^ (v60 >> 9));
        unint64_t v80 = (void *)(v77 + 8 * v85);
        uint64_t v86 = *v80;
        if (*v80 == -1)
        {
          BOOL v87 = 0;
LABEL_197:
          if (v87) {
            unint64_t v80 = v87;
          }
          if (*v80 != v60) {
            unint64_t v80 = (void *)(v77 + 8 * v83);
          }
        }
        else
        {
          BOOL v87 = 0;
          int v88 = 1;
          while (v86 != v60)
          {
            if (v87) {
              BOOL v89 = 0;
            }
            else {
              BOOL v89 = v86 == -2;
            }
            if (v89) {
              BOOL v87 = v80;
            }
            unsigned int v90 = v85 + v88++;
            unsigned int v85 = v90 & v84;
            unint64_t v80 = (void *)(v77 + 8 * (v90 & v84));
            uint64_t v86 = *v80;
            if (*v80 == -1) {
              goto LABEL_197;
            }
          }
        }
      }
      BOOL v91 = v77 == v78 ? (llvm::IVUsers *)v9 : (llvm::IVUsers *)((char *)this + 56);
      if (v80 == (void *)(v77 + 8 * *(unsigned int *)v91))
      {
LABEL_138:
        int v92 = (uint64_t *)*((void *)this + 2);
        int v93 = *((_DWORD *)v92 + 4);
        if (!v93) {
          goto LABEL_144;
        }
        uint64_t v94 = *(void *)(v60 + 40);
        uint64_t v95 = *v92;
        unsigned int v96 = v93 - 1;
        uint64_t v97 = ((v94 >> 4) ^ (v94 >> 9)) & (v93 - 1);
        uint64_t v98 = *(void *)(v95 + 16 * v97);
        if (v94 == v98)
        {
LABEL_143:
          uint64_t v101 = *(void *)(v95 + 16 * v97 + 8);
        }
        else
        {
          int v99 = 1;
          while (v98 != -4096)
          {
            int v100 = v97 + v99++;
            uint64_t v97 = v100 & v96;
            uint64_t v98 = *(void *)(v95 + 16 * v97);
            if (v94 == v98) {
              goto LABEL_143;
            }
          }
LABEL_144:
          uint64_t v101 = 0;
        }
        if (v101 == *(void *)this)
        {
          uint64_t v103 = *((void *)this + 5);
          uint64_t v102 = *((void *)this + 6);
          if (v102 == v103)
          {
            uint64_t v108 = *v9;
            uint64_t v105 = (void *)(v102 + 8 * v108);
            if (v108)
            {
              uint64_t v106 = 0;
              uint64_t v109 = 8 * v108;
              while (*(void *)(v102 + v106) != v60)
              {
                v106 += 8;
                if (v109 == v106) {
                  goto LABEL_171;
                }
              }
LABEL_170:
              uint64_t v105 = (void *)(v102 + v106);
            }
LABEL_171:
            uint64_t v103 = v102;
          }
          else
          {
            uint64_t v110 = *v59;
            int v119 = v110 - 1;
            unsigned int v120 = (v110 - 1) & ((v60 >> 4) ^ (v60 >> 9));
            uint64_t v105 = (void *)(v102 + 8 * v120);
            uint64_t v121 = *v105;
            if (*v105 == -1) {
              goto LABEL_191;
            }
            int v114 = 0;
            int v122 = 1;
            while (v121 != v60)
            {
              if (v114) {
                BOOL v123 = 0;
              }
              else {
                BOOL v123 = v121 == -2;
              }
              if (v123) {
                int v114 = v105;
              }
              unsigned int v124 = v120 + v122++;
              unsigned int v120 = v124 & v119;
              uint64_t v105 = (void *)(v102 + 8 * (v124 & v119));
              uint64_t v121 = *v105;
              if (*v105 == -1) {
                goto LABEL_192;
              }
            }
          }
        }
        else
        {
          if (v76 == 83) {
            goto LABEL_179;
          }
          uint64_t v103 = *((void *)this + 5);
          uint64_t v102 = *((void *)this + 6);
          if (v102 == v103)
          {
            uint64_t v104 = *v9;
            uint64_t v105 = (void *)(v102 + 8 * v104);
            if (v104)
            {
              uint64_t v106 = 0;
              uint64_t v107 = 8 * v104;
              while (*(void *)(v102 + v106) != v60)
              {
                v106 += 8;
                if (v107 == v106) {
                  goto LABEL_171;
                }
              }
              goto LABEL_170;
            }
            goto LABEL_171;
          }
          uint64_t v110 = *v59;
          int v111 = v110 - 1;
          unsigned int v112 = (v110 - 1) & ((v60 >> 4) ^ (v60 >> 9));
          uint64_t v105 = (void *)(v102 + 8 * v112);
          uint64_t v113 = *v105;
          if (*v105 != -1)
          {
            int v114 = 0;
            int v115 = 1;
            while (v113 != v60)
            {
              if (v114) {
                BOOL v116 = 0;
              }
              else {
                BOOL v116 = v113 == -2;
              }
              if (v116) {
                int v114 = v105;
              }
              unsigned int v117 = v112 + v115++;
              unsigned int v112 = v117 & v111;
              uint64_t v105 = (void *)(v102 + 8 * (v117 & v111));
              uint64_t v113 = *v105;
              if (*v105 == -1) {
                goto LABEL_192;
              }
            }
            goto LABEL_172;
          }
LABEL_191:
          int v114 = 0;
LABEL_192:
          if (v114) {
            uint64_t v105 = v114;
          }
          if (*v105 != v60) {
            uint64_t v105 = (void *)(v102 + 8 * v110);
          }
        }
LABEL_172:
        if (v102 == v103) {
          int v118 = v9;
        }
        else {
          int v118 = (unsigned int *)((char *)this + 56);
        }
        if (v105 != (void *)(v102 + 8 * *v118)
          || (llvm::IVUsers::AddUsersIfInteresting(this, (llvm::Instruction *)v60) & 1) == 0)
        {
LABEL_179:
          operator new();
        }
      }
LABEL_177:
      uint64_t v58 = *(void *)(v58 + 8);
      if (!v58) {
        goto LABEL_209;
      }
    }
    if (v66 >= 0x40) {
      v66 *= 2;
    }
    else {
      unsigned int v66 = 128;
    }
LABEL_206:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v135, v66);
    unsigned int v66 = v137;
    int v61 = v136;
    goto LABEL_95;
  }
LABEL_209:
  uint64_t v38 = 1;
  if (v136 != v135) {
    free(v136);
  }
  return v38;
}

uint64_t sub_1CC015E4C(uint64_t a1, uint64_t a2, uint64_t a3, llvm::ScalarEvolution *a4, uint64_t *a5)
{
  v49[3] = *MEMORY[0x1E4F143B8];
  int v10 = *(unsigned __int16 *)(a1 + 24);
  if (!a1 || v10 != 7)
  {
    if (v10 == 4)
    {
      uint64_t v14 = *(void *)(a1 + 40);
      if (v14)
      {
        char v13 = 0;
        unsigned int v15 = *(void **)(a1 + 32);
        uint64_t v16 = 8 * v14;
        while (1)
        {
          int v17 = sub_1CC015E4C(*v15, a2, a3, a4, a5);
          if (v17)
          {
            if (v13) {
              break;
            }
          }
          v13 |= v17;
          ++v15;
          v16 -= 8;
          if (!v16) {
            return v13 & 1;
          }
        }
      }
    }
    goto LABEL_39;
  }
  if (*(void *)(a1 + 48) == a3)
  {
    if (*(void *)(a1 + 40) == 2)
    {
      char v13 = 1;
      return v13 & 1;
    }
    uint64_t v18 = *(void *)(a2 + 40);
    uint64_t v20 = *(void *)(a3 + 56);
    uint64_t v19 = *(void *)(a3 + 64);
    if (v19 == v20)
    {
      uint64_t v21 = *(unsigned int *)(a3 + 76);
      int v22 = (void *)(v19 + 8 * v21);
      if (v21)
      {
        uint64_t v23 = 0;
        uint64_t v24 = 8 * v21;
        while (*(void *)(v19 + v23) != v18)
        {
          v23 += 8;
          if (v24 == v23) {
            goto LABEL_35;
          }
        }
        int v22 = (void *)(v19 + v23);
      }
LABEL_35:
      uint64_t v20 = *(void *)(a3 + 64);
    }
    else
    {
      uint64_t v25 = *(unsigned int *)(a3 + 72);
      int v26 = v25 - 1;
      unsigned int v27 = (v25 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      int v22 = (void *)(v19 + 8 * v27);
      uint64_t v28 = *v22;
      if (*v22 == -1)
      {
        size_t v29 = 0;
LABEL_50:
        if (v29) {
          int v22 = v29;
        }
        if (*v22 != v18) {
          int v22 = (void *)(v19 + 8 * v25);
        }
      }
      else
      {
        size_t v29 = 0;
        int v30 = 1;
        while (v28 != v18)
        {
          if (v29) {
            BOOL v31 = 0;
          }
          else {
            BOOL v31 = v28 == -2;
          }
          if (v31) {
            size_t v29 = v22;
          }
          unsigned int v32 = v27 + v30++;
          unsigned int v27 = v32 & v26;
          int v22 = (void *)(v19 + 8 * (v32 & v26));
          uint64_t v28 = *v22;
          if (*v22 == -1) {
            goto LABEL_50;
          }
        }
      }
    }
    BOOL v31 = v19 == v20;
    uint64_t v33 = 72;
    if (v31) {
      uint64_t v33 = 76;
    }
    if (v22 != (void *)(v19 + 8 * *(unsigned int *)(a3 + v33)))
    {
LABEL_39:
      char v13 = 0;
      return v13 & 1;
    }
    int v35 = *((_DWORD *)a5 + 4);
    if (v35)
    {
      uint64_t v36 = *a5;
      unsigned int v37 = v35 - 1;
      uint64_t v38 = (v35 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      uint64_t v39 = *(void *)(*a5 + 16 * v38);
      if (v18 == v39)
      {
LABEL_46:
        unsigned int v42 = *(const llvm::Loop **)(v36 + 16 * v38 + 8);
LABEL_48:
        char v13 = llvm::ScalarEvolution::getSCEVAtScope(a4, (const llvm::SCEV *)a1, v42) != (const llvm::SCEV *)a1;
        return v13 & 1;
      }
      int v40 = 1;
      while (v39 != -4096)
      {
        int v41 = v38 + v40++;
        uint64_t v38 = v41 & v37;
        uint64_t v39 = *(void *)(v36 + 16 * v38);
        if (v18 == v39) {
          goto LABEL_46;
        }
      }
    }
    unsigned int v42 = 0;
    goto LABEL_48;
  }
  if (!sub_1CC015E4C(**(void **)(a1 + 32), a2, a3, a4, a5)) {
    goto LABEL_39;
  }
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11 == 2)
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  else
  {
    uint64_t v43 = *(void *)(a1 + 32);
    uint64_t v47 = v49;
    uint64_t v48 = 0x300000000;
    uint64_t v44 = v11;
    size_t v45 = 8 * v11 - 8;
    if (v45 >= 0x19) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v46 = 0;
    if (v44 != 1)
    {
      memcpy(v47, (const void *)(v43 + 8), v45);
      int v46 = v48;
    }
    LODWORD(v48) = v46 + (v45 >> 3);
    uint64_t v12 = sub_1CD478318(a4, (uint64_t)&v47, *(const llvm::Loop **)(a1 + 48), 0);
    if (v47 != v49) {
      free(v47);
    }
  }
  char v13 = sub_1CC015E4C(v12, a2, a3, a4, a5) ^ 1;
  return v13 & 1;
}

uint64_t llvm::IVUsers::getReplacementExpr(llvm::IVUsers *this, const llvm::IVStrideUse *a2)
{
  uint64_t v2 = *((void *)this + 4);
  unint64_t v3 = *((void *)a2 + 9);
  uint64_t v4 = *(void *)(v2 + 104);
  unsigned int v5 = *(_DWORD *)(v2 + 120);
  if (!v5)
  {
LABEL_7:
    uint64_t v7 = v4 + 48 * v5;
    goto LABEL_8;
  }
  unsigned int v6 = ((v3 >> 4) ^ (v3 >> 9)) & (v5 - 1);
  uint64_t v7 = v4 + 48 * v6;
  uint64_t v8 = *(void *)(v7 + 24);
  if (v8 != v3)
  {
    int v9 = 1;
    while (v8 != -4096)
    {
      unsigned int v10 = v6 + v9++;
      unsigned int v6 = v10 & (v5 - 1);
      uint64_t v7 = v4 + 48 * v6;
      uint64_t v8 = *(void *)(v7 + 24);
      if (v8 == v3) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v7 == v4 + 48 * v5 || !*(void *)(v7 + 40)) {
    return llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v2, v3);
  }
  else {
    return *(void *)(v7 + 40);
  }
}

char *llvm::IVUsers::releaseMemory(llvm::IVUsers *this)
{
  unsigned int v5 = (char *)*((void *)this + 5);
  int32x2_t result = (char *)*((void *)this + 6);
  uint64_t v4 = (void **)((char *)this + 40);
  if (result == v5) {
    goto LABEL_2;
  }
  uint64_t v7 = *((unsigned int *)this + 14);
  if (v7 < 0x21 || 4 * (*((_DWORD *)this + 15) - *((_DWORD *)this + 16)) >= v7)
  {
    int32x2_t result = (char *)memset(result, 255, 8 * v7);
LABEL_2:
    *((_DWORD *)this + 15) = 0;
    *((_DWORD *)this + 16) = 0;
    goto LABEL_3;
  }
  int32x2_t result = (char *)llvm::SmallPtrSetImplBase::shrink_and_clear(v4);
LABEL_3:
  unsigned int v6 = (llvm::IVUsers *)*((void *)this + 26);
  if ((llvm::IVUsers *)((char *)this + 200) != v6)
  {
    do
    {
      int32x2_t result = (char *)sub_1CD492848((uint64_t)this + 200, (uint64_t)v6);
      unsigned int v6 = (llvm::IVUsers *)result;
    }
    while ((char *)this + 200 != result);
  }
  return result;
}

uint64_t sub_1CC0162DC(uint64_t result, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(result + 24);
  if (result && v3 == 7)
  {
    while (*(void *)(result + 48) != a2)
    {
      int32x2_t result = **(void **)(result + 32);
      int v3 = *(unsigned __int16 *)(result + 24);
      if (result) {
        BOOL v4 = v3 == 7;
      }
      else {
        BOOL v4 = 0;
      }
      if (!v4) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    if (v3 == 4 && (uint64_t v5 = *(void *)(result + 40)) != 0)
    {
      unsigned int v6 = *(void **)(result + 32);
      uint64_t v7 = 8 * v5;
      while (1)
      {
        int32x2_t result = sub_1CC0162DC(*v6, a2);
        if (result) {
          break;
        }
        ++v6;
        v7 -= 8;
        if (!v7) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CC016370()
{
  return 0;
}

uint64_t sub_1CC016378()
{
  return 0;
}

uint64_t sub_1CC016380(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  uint64_t v3 = *(void *)(**(void **)a1 + 40);
  uint64_t v5 = *(void *)(v2 + 56);
  uint64_t v4 = *(void *)(v2 + 64);
  if (v4 == v5)
  {
    uint64_t v6 = *(unsigned int *)(v2 + 76);
    uint64_t v7 = (void *)(v4 + 8 * v6);
    if (v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 8 * v6;
      while (*(void *)(v4 + v8) != v3)
      {
        v8 += 8;
        if (v9 == v8) {
          goto LABEL_19;
        }
      }
      uint64_t v7 = (void *)(v4 + v8);
    }
LABEL_19:
    uint64_t v5 = *(void *)(v2 + 64);
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(v2 + 72);
    int v11 = v10 - 1;
    unsigned int v12 = (v10 - 1) & ((v3 >> 4) ^ (v3 >> 9));
    uint64_t v7 = (void *)(v4 + 8 * v12);
    uint64_t v13 = *v7;
    if (*v7 == -1)
    {
      uint64_t v14 = 0;
LABEL_26:
      if (v14) {
        uint64_t v7 = v14;
      }
      if (*v7 != v3) {
        uint64_t v7 = (void *)(v4 + 8 * v10);
      }
    }
    else
    {
      uint64_t v14 = 0;
      int v15 = 1;
      while (v13 != v3)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == -2;
        }
        if (v16) {
          uint64_t v14 = v7;
        }
        unsigned int v17 = v12 + v15++;
        unsigned int v12 = v17 & v11;
        uint64_t v7 = (void *)(v4 + 8 * (v17 & v11));
        uint64_t v13 = *v7;
        if (*v7 == -1) {
          goto LABEL_26;
        }
      }
    }
  }
  BOOL v16 = v4 == v5;
  uint64_t v18 = 72;
  if (v16) {
    uint64_t v18 = 76;
  }
  if (v7 == (void *)(v4 + 8 * *(unsigned int *)(v2 + v18))) {
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
  }
  return 0;
}

uint64_t sub_1CC0166DC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, const char *a5, int a6)
{
  sub_1CBF43AA8((uint64_t)v18);
  *(void *)((char *)&v19[2] + *(void *)(v19[0] - 24)) = 4;
  size_t v9 = strlen(a2);
  uint64_t v10 = sub_1CBF435C4(v19, (uint64_t)a2, v9);
  sub_1CBF435C4(v10, (uint64_t)": ", 2);
  int v11 = (void *)std::ostream::operator<<();
  sub_1CBF435C4(v11, (uint64_t)" [", 2);
  unsigned int v12 = (void *)std::ostream::operator<<();
  uint64_t v13 = sub_1CBF435C4(v12, (uint64_t)"% of ", 5);
  size_t v14 = strlen(a5);
  int v15 = sub_1CBF435C4(v13, (uint64_t)a5, v14);
  sub_1CBF435C4(v15, (uint64_t)"]", 1);
  if (a6) {
    sub_1CBF435C4(v19, (uint64_t)"\n", 1);
  }
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E4FBA408];
  uint64_t v16 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v19[0] = v16;
  v19[1] = MEMORY[0x1E4FBA470] + 16;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1D25D9C00](&v21);
}

_OWORD *sub_1CC016940(void **a1, _OWORD *a2)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  uint64_t v4 = (v2 - (unsigned char *)*a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    abort();
  }
  uint64_t v8 = (unsigned char *)a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 60) {
      sub_1CB833614();
    }
    uint64_t v10 = (char *)operator new(16 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  int v11 = &v10[16 * v4];
  *(_OWORD *)int v11 = *a2;
  unsigned int v12 = v11 + 16;
  if (v2 != v3)
  {
    do
    {
      *((_OWORD *)v11 - 1) = *((_OWORD *)v2 - 1);
      v11 -= 16;
      v2 -= 16;
    }
    while (v2 != v3);
    uint64_t v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[16 * v9];
  if (v2) {
    operator delete(v2);
  }
  return v12;
}

BOOL sub_1CC016A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a3 + 8);
  if (v5 >= v4) {
    size_t v6 = *(void *)(a2 + 8);
  }
  else {
    size_t v6 = *(void *)(a3 + 8);
  }
  if (v6 && (int v7 = memcmp(*(const void **)a2, *(const void **)a3, v6)) != 0)
  {
    int v8 = (v7 >> 31) | 1;
  }
  else
  {
    if (v4 < v5) {
      int v8 = -1;
    }
    else {
      int v8 = 1;
    }
    if (v4 == v5) {
      int v8 = 0;
    }
  }
  return v8 == -1;
}

uint64_t sub_1CC016AAC(uint64_t result, _OWORD *a2, uint64_t a3)
{
  if ((_OWORD *)result == a2) {
    return result;
  }
  uint64_t v3 = a2;
  unint64_t v4 = (void *)result;
  uint64_t v5 = result + 16;
  if ((_OWORD *)(result + 16) == a2) {
    return result;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  uint64_t v8 = result;
  do
  {
    unint64_t v9 = (_OWORD *)v5;
    int32x2_t result = sub_1CC016A40(v6, v5, v8);
    if (!result) {
      goto LABEL_27;
    }
    uint64_t v10 = *(const void **)(v8 + 16);
    size_t v11 = *(void *)(v8 + 24);
    *unint64_t v9 = *(_OWORD *)v8;
    unsigned int v12 = v4;
    if ((void *)v8 == v4) {
      goto LABEL_26;
    }
    uint64_t v13 = v7;
    while (1)
    {
      size_t v14 = (const void **)((char *)v4 + v13 - 16);
      size_t v15 = *(void *)((char *)v4 + v13 - 8);
      if (v15 >= v11) {
        size_t v16 = v11;
      }
      else {
        size_t v16 = *(void *)((char *)v4 + v13 - 8);
      }
      if (v16)
      {
        int32x2_t result = memcmp(v10, *v14, v16);
        if ((result & 0x80000000) == 0)
        {
          BOOL v17 = result || v11 == v15;
          if (v17 || v11 >= v15)
          {
            unsigned int v12 = (void *)((char *)v4 + v13);
            goto LABEL_25;
          }
        }
        goto LABEL_22;
      }
      if (v11 >= v15) {
        break;
      }
LABEL_22:
      v8 -= 16;
      *(_OWORD *)((char *)v4 + v13) = *(_OWORD *)v14;
      v13 -= 16;
      if (!v13)
      {
        unsigned int v12 = v4;
        goto LABEL_25;
      }
    }
    unsigned int v12 = (void *)v8;
LABEL_25:
    uint64_t v3 = a2;
    uint64_t v6 = a3;
LABEL_26:
    void *v12 = v10;
    v12[1] = v11;
LABEL_27:
    uint64_t v5 = (uint64_t)(v9 + 1);
    v7 += 16;
    uint64_t v8 = (uint64_t)v9;
  }
  while (v9 + 1 != v3);
  return result;
}

uint64_t sub_1CC016BDC(uint64_t result, const void **a2, uint64_t a3)
{
  if ((const void **)result != a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = result + 16;
    if ((const void **)(result + 16) != a2)
    {
      do
      {
        uint64_t v7 = (const void **)v5;
        int32x2_t result = sub_1CC016A40(a3, v5, v4);
        if (result)
        {
          uint64_t v8 = *v7;
          unint64_t v9 = *(void *)(v4 + 24);
          while (1)
          {
            while (1)
            {
              uint64_t v10 = (void *)v4;
              *(_OWORD *)(v4 + 16) = *(_OWORD *)v4;
              v4 -= 16;
              unint64_t v11 = *(v10 - 1);
              size_t v12 = v11 >= v9 ? v9 : *(v10 - 1);
              if (v12) {
                break;
              }
              if (v9 >= v11) {
                goto LABEL_20;
              }
            }
            int32x2_t result = memcmp(v8, (const void *)*(v10 - 2), v12);
            if ((result & 0x80000000) == 0)
            {
              BOOL v13 = result || v9 == v11;
              if (v13 || v9 >= v11) {
                break;
              }
            }
          }
LABEL_20:
          *uint64_t v10 = v8;
          v10[1] = v9;
        }
        uint64_t v5 = (uint64_t)(v7 + 2);
        uint64_t v4 = (uint64_t)v7;
      }
      while (v7 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_1CC016CB4(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  BOOL v8 = sub_1CC016A40(a4, (uint64_t)a2, (uint64_t)a1);
  uint64_t result = sub_1CC016A40(a4, (uint64_t)a3, (uint64_t)a2);
  if (!v8)
  {
    if (!result) {
      return result;
    }
    long long v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!sub_1CC016A40(a4, (uint64_t)a2, (uint64_t)a1)) {
      return 1;
    }
    long long v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  if (!result)
  {
    long long v13 = *a1;
    *a1 = *a2;
    *a2 = v13;
    if (!sub_1CC016A40(a4, (uint64_t)a3, (uint64_t)a2)) {
      return 1;
    }
    long long v14 = *a2;
    *a2 = *a3;
    *a3 = v14;
    return 2;
  }
  long long v10 = *a1;
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

unint64_t sub_1CC016DB0(uint64_t a1, const void **a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(const void **)a1;
  size_t v5 = *(void *)(a1 + 8);
  size_t v6 = (size_t)*(a2 - 1);
  if (v6 >= v5) {
    size_t v7 = *(void *)(a1 + 8);
  }
  else {
    size_t v7 = (size_t)*(a2 - 1);
  }
  if (v7)
  {
    int v8 = memcmp(*(const void **)a1, *(a2 - 2), v7);
    if (v8)
    {
      if ((v8 & 0x80000000) == 0) {
        goto LABEL_7;
      }
LABEL_25:
      unint64_t v15 = a1 + 16;
      do
      {
        while (1)
        {
          unint64_t i = v15;
          size_t v16 = *(void *)(v15 + 8);
          size_t v17 = v16 >= v5 ? v5 : *(void *)(v15 + 8);
          v15 += 16;
          if (v17) {
            break;
          }
          if (v5 < v16) {
            goto LABEL_40;
          }
        }
        int v18 = memcmp(v4, *(const void **)i, v17);
        if (v18 < 0) {
          break;
        }
        BOOL v19 = v18 || v5 == v16;
      }
      while (v19 || v5 >= v16);
      goto LABEL_40;
    }
  }
  if (v5 < v6) {
    goto LABEL_25;
  }
LABEL_7:
  for (unint64_t i = a1 + 16; i < (unint64_t)v2; i += 16)
  {
    size_t v10 = *(void *)(i + 8);
    if (v10 >= v5) {
      size_t v11 = v5;
    }
    else {
      size_t v11 = *(void *)(i + 8);
    }
    if (v11)
    {
      int v12 = memcmp(v4, *(const void **)i, v11);
      if (v12 < 0) {
        break;
      }
      BOOL v13 = v12 || v5 == v10;
      if (!v13 && v5 < v10) {
        break;
      }
    }
    else if (v5 < v10)
    {
      break;
    }
  }
LABEL_40:
  if (i >= (unint64_t)v2) {
    goto LABEL_87;
  }
  for (uint64_t j = v2 - 3; ; j -= 2)
  {
    size_t v22 = v6 >= v5 ? v5 : v6;
    if (v22) {
      break;
    }
    if (v5 >= v6) {
      goto LABEL_58;
    }
LABEL_57:
    int v26 = *j;
    size_t v6 = (size_t)v26;
  }
  int v23 = memcmp(v4, j[1], v22);
  if (v23 < 0) {
    goto LABEL_57;
  }
  BOOL v24 = v23 || v5 == v6;
  if (!v24 && v5 < v6) {
    goto LABEL_57;
  }
LABEL_58:
  uint64_t v2 = j + 1;
LABEL_87:
  while (i < (unint64_t)v2)
  {
    long long v39 = *(_OWORD *)i;
    *(_OWORD *)unint64_t i = *(_OWORD *)v2;
    *(_OWORD *)uint64_t v2 = v39;
    unint64_t v27 = i + 16;
    do
    {
      unint64_t i = v27;
      size_t v28 = *(void *)(v27 + 8);
      if (v28 >= v5) {
        size_t v29 = v5;
      }
      else {
        size_t v29 = *(void *)(v27 + 8);
      }
      if (v29 && (int v30 = memcmp(v4, *(const void **)v27, v29)) != 0)
      {
        int v31 = (v30 >> 31) | 1;
      }
      else if (v5 == v28)
      {
        int v31 = 0;
      }
      else
      {
        if (v5 < v28) {
          break;
        }
        int v31 = 1;
      }
      unint64_t v27 = i + 16;
    }
    while (v31 != -1);
    unsigned int v32 = v2 - 2;
    while (1)
    {
      while (1)
      {
        uint64_t v2 = v32;
        uint64_t v33 = v32[1];
        size_t v34 = (unint64_t)v33 >= v5 ? v5 : (size_t)v32[1];
        v32 -= 2;
        if (v34) {
          break;
        }
        if (v5 >= (unint64_t)v33) {
          goto LABEL_87;
        }
      }
      int v35 = memcmp(v4, *v2, v34);
      if ((v35 & 0x80000000) == 0)
      {
        BOOL v36 = v35 || v5 == (void)v33;
        if (v36 || v5 >= (unint64_t)v33) {
          break;
        }
      }
    }
  }
  if (i - 16 != a1) {
    *(_OWORD *)a1 = *(_OWORD *)(i - 16);
  }
  *(void *)(i - 16) = v4;
  *(void *)(i - 8) = v5;
  return i;
}

const void **sub_1CC016FEC(uint64_t a1, const void **a2)
{
  uint64_t v4 = 0;
  size_t v5 = *(const void **)a1;
  size_t v6 = *(void *)(a1 + 8);
  while (1)
  {
    size_t v7 = *(void *)(a1 + v4 + 24);
    size_t v8 = v6 >= v7 ? *(void *)(a1 + v4 + 24) : v6;
    if (v8) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_18;
    }
LABEL_17:
    v4 += 16;
  }
  int v9 = memcmp(*(const void **)(a1 + v4 + 16), v5, v8);
  if (v9 < 0) {
    goto LABEL_17;
  }
  BOOL v10 = v9 || v7 == v6;
  if (!v10 && v7 < v6) {
    goto LABEL_17;
  }
LABEL_18:
  unint64_t v12 = a1 + v4 + 16;
  if (v4)
  {
    BOOL v13 = a2 - 2;
    do
    {
      while (1)
      {
        a2 = v13;
        long long v14 = v13[1];
        size_t v15 = v6 >= (unint64_t)v14 ? (size_t)v13[1] : v6;
        v13 -= 2;
        if (v15) {
          break;
        }
        if ((unint64_t)v14 < v6) {
          goto LABEL_59;
        }
      }
      int v16 = memcmp(*a2, v5, v15);
      if (v16 < 0) {
        break;
      }
      BOOL v17 = v16 || v14 == (const void *)v6;
    }
    while (v17 || (unint64_t)v14 >= v6);
  }
  else if (v12 < (unint64_t)a2)
  {
    BOOL v19 = a2 - 2;
    do
    {
      while (1)
      {
        a2 = v19;
        char v20 = v19[1];
        size_t v21 = v6 >= (unint64_t)v20 ? (size_t)v19[1] : v6;
        v19 -= 2;
        if (!v21) {
          break;
        }
        int v22 = memcmp(*a2, v5, v21);
        if ((v22 & 0x80000000) == 0)
        {
          BOOL v23 = (unint64_t)v20 >= v6 || v20 == (const void *)v6;
          BOOL v24 = !v23 && v22 == 0;
          if (!v24 && v12 < (unint64_t)a2) {
            continue;
          }
        }
        goto LABEL_59;
      }
    }
    while ((unint64_t)v20 >= v6 && v12 < (unint64_t)a2);
  }
LABEL_59:
  unint64_t v27 = (const void **)v12;
  if (v12 < (unint64_t)a2)
  {
    size_t v28 = a2;
    do
    {
      long long v41 = *(_OWORD *)v27;
      *(_OWORD *)unint64_t v27 = *(_OWORD *)v28;
      *(_OWORD *)size_t v28 = v41;
      size_t v29 = v27 + 2;
      do
      {
        unint64_t v27 = (const void **)v29;
        size_t v30 = *((void *)v29 + 1);
        if (v6 >= v30) {
          size_t v31 = *((void *)v29 + 1);
        }
        else {
          size_t v31 = v6;
        }
        if (v31 && (int v32 = memcmp(*(const void **)v29, v5, v31)) != 0)
        {
          int v33 = (v32 >> 31) | 1;
        }
        else
        {
          if (v30 >= v6) {
            break;
          }
          int v33 = -1;
        }
        size_t v29 = v27 + 2;
      }
      while (v33 == -1);
      size_t v34 = v28 - 2;
      do
      {
        while (1)
        {
          size_t v28 = v34;
          int v35 = v34[1];
          size_t v36 = v6 >= (unint64_t)v35 ? (size_t)v34[1] : v6;
          v34 -= 2;
          if (v36) {
            break;
          }
          if ((unint64_t)v35 < v6) {
            goto LABEL_86;
          }
        }
        int v37 = memcmp(*v28, v5, v36);
        if (v37 < 0) {
          break;
        }
        BOOL v38 = v37 || v35 == (const void *)v6;
      }
      while (v38 || (unint64_t)v35 >= v6);
LABEL_86:
      ;
    }
    while (v27 < v28);
  }
  uint64_t result = v27 - 2;
  if (v27 - 2 != (const void **)a1) {
    *(_OWORD *)a1 = *(_OWORD *)result;
  }
  *(v27 - 2) = v5;
  *(v27 - 1) = (const void *)v6;
  return result;
}

BOOL sub_1CC01721C(long long *a1, long long *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      size_t v8 = a2 - 1;
      if (sub_1CC016A40(a3, (uint64_t)(a2 - 1), (uint64_t)a1))
      {
        long long v9 = *a1;
        *a1 = *v8;
        long long *v8 = v9;
      }
      return 1;
    case 3:
      sub_1CC016CB4(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1CC017458(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1CC017514(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      BOOL v10 = a1 + 2;
      sub_1CC016CB4(a1, a1 + 1, a1 + 2, a3);
      size_t v11 = a1 + 3;
      if (a1 + 3 == v4) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      BOOL v24 = v4;
      uint64_t v25 = v3;
      break;
  }
  while (2)
  {
    if (!sub_1CC016A40(v3, (uint64_t)v11, (uint64_t)v10)) {
      goto LABEL_29;
    }
    long long v14 = *(const void **)v11;
    size_t v15 = *((void *)v11 + 1);
    long long *v11 = *v10;
    int v16 = a1;
    if (v10 == a1) {
      goto LABEL_28;
    }
    int v26 = v13;
    uint64_t v17 = v12;
    while (1)
    {
      int v18 = (const void **)((char *)a1 + v17 + 16);
      size_t v19 = *(void *)((char *)a1 + v17 + 24);
      if (v19 >= v15) {
        size_t v20 = v15;
      }
      else {
        size_t v20 = *(void *)((char *)a1 + v17 + 24);
      }
      if (v20)
      {
        int v21 = memcmp(v14, *v18, v20);
        if ((v21 & 0x80000000) == 0)
        {
          BOOL v22 = v21 || v15 == v19;
          if (v22 || v15 >= v19)
          {
            int v16 = (long long *)((char *)a1 + v17 + 32);
            goto LABEL_27;
          }
        }
        goto LABEL_24;
      }
      if (v15 >= v19) {
        break;
      }
LABEL_24:
      --v10;
      *(long long *)((char *)a1 + v17 + 32) = *(_OWORD *)v18;
      v17 -= 16;
      if (v17 == -32)
      {
        int v16 = a1;
        goto LABEL_27;
      }
    }
    int v16 = v10;
LABEL_27:
    uint64_t v4 = v24;
    uint64_t v3 = v25;
    int v13 = v26;
LABEL_28:
    *(void *)int v16 = v14;
    *((void *)v16 + 1) = v15;
    if (++v13 != 8)
    {
LABEL_29:
      BOOL v10 = v11;
      v12 += 16;
      if (++v11 == v4) {
        return 1;
      }
      continue;
    }
    return v11 + 1 == v4;
  }
}

__n128 sub_1CC017458(long long *a1, long long *a2, long long *a3, long long *a4, uint64_t a5)
{
  sub_1CC016CB4(a1, a2, a3, a5);
  if (sub_1CC016A40(a5, (uint64_t)a4, (uint64_t)a3))
  {
    long long v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    if (sub_1CC016A40(a5, (uint64_t)a3, (uint64_t)a2))
    {
      long long v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      if (sub_1CC016A40(a5, (uint64_t)a2, (uint64_t)a1))
      {
        __n128 result = (__n128)*a1;
        *a1 = *a2;
        *a2 = (__int128)result;
      }
    }
  }
  return result;
}

__n128 sub_1CC017514(long long *a1, long long *a2, long long *a3, long long *a4, long long *a5, uint64_t a6)
{
  sub_1CC017458(a1, a2, a3, a4, a6);
  if (sub_1CC016A40(a6, (uint64_t)a5, (uint64_t)a4))
  {
    long long v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    if (sub_1CC016A40(a6, (uint64_t)a4, (uint64_t)a3))
    {
      long long v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      if (sub_1CC016A40(a6, (uint64_t)a3, (uint64_t)a2))
      {
        long long v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        if (sub_1CC016A40(a6, (uint64_t)a2, (uint64_t)a1))
        {
          __n128 result = (__n128)*a1;
          *a1 = *a2;
          *a2 = (__int128)result;
        }
      }
    }
  }
  return result;
}

void **sub_1CC0175F8(void **a1, void **a2, void **a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = &a1[2 * v10];
      do
      {
        sub_1CC0177C8((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    long long v13 = v6;
    if (v6 != a3)
    {
      long long v14 = v6;
      do
      {
        if (sub_1CC016A40(a4, (uint64_t)v14, (uint64_t)a1))
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)long long v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          sub_1CC0177C8((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 < 17)
    {
      return v13;
    }
    else
    {
      BOOL v23 = v13;
      do
      {
        uint64_t v16 = 0;
        long long v24 = *(_OWORD *)a1;
        uint64_t v17 = a1;
        do
        {
          int v18 = &v17[2 * v16 + 2];
          uint64_t v19 = (2 * v16) | 1;
          uint64_t v20 = 2 * v16 + 2;
          if (v20 < v9 && sub_1CC016A40(a4, (uint64_t)&v17[2 * v16 + 2], (uint64_t)&v17[2 * v16 + 4]))
          {
            v18 += 2;
            uint64_t v19 = v20;
          }
          *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
          uint64_t v17 = v18;
          uint64_t v16 = v19;
        }
        while (v19 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
        v6 -= 2;
        if (v18 == v6)
        {
          *(_OWORD *)int v18 = v24;
        }
        else
        {
          *(_OWORD *)int v18 = *(_OWORD *)v6;
          *(_OWORD *)uint64_t v6 = v24;
          sub_1CC01793C((uint64_t)a1, (uint64_t)(v18 + 2), a4, ((char *)(v18 + 2) - (char *)a1) >> 4);
        }
      }
      while (v9-- > 2);
      return v23;
    }
  }
  return a3;
}

uint64_t sub_1CC0177C8(uint64_t result, uint64_t a2, uint64_t a3, void **a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v6 = result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 3;
      uint64_t v11 = v10 + 1;
      long long v12 = (_OWORD *)(result + 16 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && sub_1CC016A40(a2, result + 16 * (v10 + 1), (uint64_t)(v12 + 1)))
      {
        ++v12;
        uint64_t v11 = v13;
      }
      __n128 result = sub_1CC016A40(a2, (uint64_t)v12, (uint64_t)a4);
      if ((result & 1) == 0)
      {
        size_t v14 = (size_t)a4[1];
        __s2 = *a4;
        *(_OWORD *)a4 = *v12;
        if (v7 >= v11)
        {
          while (1)
          {
            uint64_t v16 = 2 * v11;
            uint64_t v11 = (2 * v11) | 1;
            long long v15 = (_OWORD *)(v6 + 16 * v11);
            uint64_t v17 = v16 + 2;
            if (v16 + 2 < a3)
            {
              __n128 result = sub_1CC016A40(a2, v6 + 16 * v11, (uint64_t)(v15 + 1));
              if (result)
              {
                ++v15;
                uint64_t v11 = v17;
              }
            }
            size_t v18 = *((void *)v15 + 1);
            if (v14 >= v18) {
              size_t v19 = *((void *)v15 + 1);
            }
            else {
              size_t v19 = v14;
            }
            if (v19)
            {
              __n128 result = memcmp(*(const void **)v15, __s2, v19);
              if ((result & 0x80000000) != 0) {
                break;
              }
              BOOL v20 = result || v18 == v14;
              if (!v20 && v18 < v14) {
                break;
              }
            }
            else if (v18 < v14)
            {
              break;
            }
            _OWORD *v12 = *v15;
            long long v12 = v15;
            if (v7 < v11) {
              goto LABEL_9;
            }
          }
        }
        long long v15 = v12;
LABEL_9:
        *(void *)long long v15 = __s2;
        *((void *)v15 + 1) = v14;
      }
    }
  }
  return result;
}

uint64_t sub_1CC01793C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 < 2) {
    return result;
  }
  uint64_t v6 = result;
  unint64_t v7 = v4 >> 1;
  uint64_t v8 = result + 16 * (v4 >> 1);
  uint64_t v9 = (_OWORD *)(a2 - 16);
  __n128 result = sub_1CC016A40(a3, v8, a2 - 16);
  if (!result) {
    return result;
  }
  uint64_t v10 = *(const void **)(a2 - 16);
  unint64_t v11 = *(void *)(a2 - 8);
  *uint64_t v9 = *(_OWORD *)v8;
  if (v4 < 2) {
    goto LABEL_22;
  }
  while (1)
  {
    long long v12 = (_OWORD *)v8;
    unint64_t v13 = v7 - 1;
    unint64_t v7 = (v7 - 1) >> 1;
    uint64_t v8 = v6 + 16 * v7;
    unint64_t v14 = *(void *)(v8 + 8);
    size_t v15 = v11 >= v14 ? *(void *)(v8 + 8) : v11;
    if (v15) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_21;
    }
LABEL_19:
    _OWORD *v12 = *(_OWORD *)v8;
    if (v13 <= 1) {
      goto LABEL_22;
    }
  }
  __n128 result = memcmp(*(const void **)v8, v10, v15);
  if ((result & 0x80000000) != 0) {
    goto LABEL_19;
  }
  BOOL v16 = result || v14 == v11;
  if (!v16 && v14 < v11) {
    goto LABEL_19;
  }
LABEL_21:
  uint64_t v8 = (uint64_t)v12;
LABEL_22:
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  return result;
}

const void **sub_1CC017A1C(const void **a1, const void **a2)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v3 = a1;
  unint64_t v4 = a1 + 2;
  if (a1 + 2 == a2) {
    return a2;
  }
  size_t v5 = *a1;
  while (1)
  {
    size_t v6 = (size_t)*(v4 - 1);
    unint64_t v7 = *v4;
    if ((const void *)v6 == v4[1] && (!v6 || !memcmp(v5, *v4, v6))) {
      break;
    }
    v4 += 2;
    v3 += 2;
    size_t v5 = v7;
    if (v4 == a2) {
      return a2;
    }
  }
  uint64_t v9 = v4 - 2;
  if (v4 - 2 != a2)
  {
    for (unint64_t i = v4 + 2; i != a2; i += 2)
    {
      size_t v11 = (size_t)v9[1];
      if ((const void *)v11 != i[1] || v11 && memcmp(*v9, *i, v11))
      {
        *((_OWORD *)v9 + 1) = *(_OWORD *)i;
        v9 += 2;
      }
    }
    return v9 + 2;
  }
  return v3;
}

size_t **sub_1CC017AF8(size_t **result, size_t **a2, char *a3, char a4)
{
  v381 = result;
LABEL_2:
  v377 = a2 - 1;
  v379 = a2;
  v371 = a2 - 3;
  v372 = a2 - 2;
  k = v381;
  while (1)
  {
    v381 = k;
    uint64_t v9 = (char *)a2 - (char *)k;
    uint64_t v10 = a2 - k;
    if (v5 || !v4)
    {
      switch(v10)
      {
        case 0:
        case 1:
          return result;
        case 2:
          int v141 = *(a2 - 1);
          size_t v142 = v141[1];
          int v143 = *(_DWORD *)(v142 + 80);
          int v144 = *v381;
          size_t v145 = (*v381)[1];
          int v146 = *(_DWORD *)(v145 + 80);
          BOOL v147 = v143 <= v146;
          if (v143 == v146
            && (v148 = *(_DWORD *)(v142 + 84), v149 = *(_DWORD *)(v145 + 84), BOOL v147 = v148 <= v149, v148 == v149))
          {
            size_t v150 = *v141;
            size_t v151 = *v144;
            if (*v144 >= *v141) {
              size_t v152 = *v141;
            }
            else {
              size_t v152 = *v144;
            }
            if (v152 && (__n128 result = (size_t **)memcmp(v141 + 2, v144 + 2, v152), result))
            {
              if ((result & 0x80000000) == 0) {
                return result;
              }
            }
            else if (v150 >= v151)
            {
              return result;
            }
          }
          else if (v147)
          {
            return result;
          }
          *v381 = v141;
          *(a2 - 1) = v144;
          return result;
        case 3:
          return sub_1CC018D3C(v381, v381 + 1, v377);
        case 4:
          return sub_1CC01947C(v381, v381 + 1, v381 + 2, v377);
        case 5:
          unsigned int v153 = v381 + 1;
          long long v154 = v381 + 2;
          v155 = v381 + 3;
          __n128 result = sub_1CC01947C(v381, v381 + 1, v381 + 2, v381 + 3);
          v156 = *(a2 - 1);
          size_t v157 = v156[1];
          int v158 = *(_DWORD *)(v157 + 80);
          long long v159 = v381[3];
          size_t v160 = v159[1];
          int v161 = *(_DWORD *)(v160 + 80);
          BOOL v162 = v158 <= v161;
          if (v158 == v161
            && (v163 = *(_DWORD *)(v157 + 84), v164 = *(_DWORD *)(v160 + 84), BOOL v162 = v163 <= v164, v163 == v164))
          {
            size_t v165 = *v156;
            size_t v166 = *v159;
            if (*v159 >= *v156) {
              size_t v167 = *v156;
            }
            else {
              size_t v167 = *v159;
            }
            if (v167 && (__n128 result = (size_t **)memcmp(v156 + 2, v159 + 2, v167), result))
            {
              if ((result & 0x80000000) == 0) {
                return result;
              }
            }
            else if (v165 >= v166)
            {
              return result;
            }
          }
          else if (v162)
          {
            return result;
          }
          *v155 = v156;
          *(a2 - 1) = v159;
          v260 = *v155;
          size_t v261 = (*v155)[1];
          int v262 = *(_DWORD *)(v261 + 80);
          v263 = *v154;
          size_t v264 = (*v154)[1];
          int v265 = *(_DWORD *)(v264 + 80);
          BOOL v266 = v262 <= v265;
          if (v262 == v265
            && (v267 = *(_DWORD *)(v261 + 84), v268 = *(_DWORD *)(v264 + 84), BOOL v266 = v267 <= v268, v267 == v268))
          {
            size_t v269 = *v260;
            size_t v270 = *v263;
            if (*v263 >= *v260) {
              size_t v271 = *v260;
            }
            else {
              size_t v271 = *v263;
            }
            if (v271 && (__n128 result = (size_t **)memcmp(v260 + 2, v263 + 2, v271), result))
            {
              if ((result & 0x80000000) == 0) {
                return result;
              }
            }
            else if (v269 >= v270)
            {
              return result;
            }
          }
          else if (v266)
          {
            return result;
          }
          *long long v154 = v260;
          *v155 = v263;
          size_t v349 = v260[1];
          int v350 = *(_DWORD *)(v349 + 80);
          v351 = *v153;
          size_t v352 = (*v153)[1];
          int v353 = *(_DWORD *)(v352 + 80);
          BOOL v354 = v350 <= v353;
          if (v350 == v353
            && (v355 = *(_DWORD *)(v349 + 84), v356 = *(_DWORD *)(v352 + 84), BOOL v354 = v355 <= v356, v355 == v356))
          {
            size_t v357 = *v260;
            size_t v358 = *v351;
            if (*v351 >= *v260) {
              size_t v359 = *v260;
            }
            else {
              size_t v359 = *v351;
            }
            if (v359 && (__n128 result = (size_t **)memcmp(v260 + 2, v351 + 2, v359), result))
            {
              if ((result & 0x80000000) == 0) {
                return result;
              }
            }
            else if (v357 >= v358)
            {
              return result;
            }
          }
          else if (v354)
          {
            return result;
          }
          v381[1] = v260;
          v381[2] = v351;
          size_t v360 = v260[1];
          int v361 = *(_DWORD *)(v360 + 80);
          v362 = *v381;
          size_t v363 = (*v381)[1];
          int v364 = *(_DWORD *)(v363 + 80);
          BOOL v365 = v361 <= v364;
          if (v361 == v364
            && (v366 = *(_DWORD *)(v360 + 84), v367 = *(_DWORD *)(v363 + 84), BOOL v365 = v366 <= v367, v366 == v367))
          {
            size_t v368 = *v260;
            size_t v369 = *v362;
            if (*v362 >= *v260) {
              size_t v370 = *v260;
            }
            else {
              size_t v370 = *v362;
            }
            if (v370 && (__n128 result = (size_t **)memcmp(v260 + 2, v362 + 2, v370), result))
            {
              if ((result & 0x80000000) == 0) {
                return result;
              }
            }
            else if (v368 >= v369)
            {
              return result;
            }
          }
          else if (v365)
          {
            return result;
          }
          *v381 = v260;
          v381[1] = v362;
          return result;
        default:
          JUMPOUT(0);
      }
    }
    if (v9 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v381 == a2) {
        return result;
      }
      int64_t v201 = (unint64_t)(v10 - 2) >> 1;
      int64_t v202 = v201;
      do
      {
        int64_t v203 = v202;
        if (v201 < v202) {
          goto LABEL_336;
        }
        uint64_t v204 = (2 * v202) | 1;
        v205 = &v381[v204];
        if (2 * v202 + 2 < v10)
        {
          v206 = v205[1];
          v207 = *v205;
          size_t v208 = (*v205)[1];
          int v209 = *(_DWORD *)(v208 + 80);
          size_t v210 = v206[1];
          int v211 = *(_DWORD *)(v210 + 80);
          BOOL v212 = v209 <= v211;
          if (v209 == v211
            && (v213 = *(_DWORD *)(v208 + 84), v214 = *(_DWORD *)(v210 + 84), BOOL v212 = v213 <= v214, v213 == v214))
          {
            size_t v215 = *v207;
            size_t v216 = *v206;
            if (*v206 >= *v207) {
              size_t v217 = *v207;
            }
            else {
              size_t v217 = *v206;
            }
            if (v217
              && (__n128 result = (size_t **)memcmp(v207 + 2, v206 + 2, v217),
                  int64_t v201 = (unint64_t)(v10 - 2) >> 1,
                  result))
            {
              int v218 = ((int)result >> 31) | 1;
            }
            else
            {
              if (v215 < v216) {
                int v218 = -1;
              }
              else {
                int v218 = 1;
              }
              if (v215 == v216) {
                int v218 = 0;
              }
            }
            BOOL v219 = v218 == -1;
          }
          else
          {
            BOOL v219 = !v212;
          }
          if (v219)
          {
            ++v205;
            uint64_t v204 = 2 * v203 + 2;
          }
        }
        v220 = *v205;
        size_t v221 = (*v205)[1];
        int v222 = *(_DWORD *)(v221 + 80);
        v223 = v381[v203];
        size_t v224 = v223[1];
        int v225 = *(_DWORD *)(v224 + 80);
        BOOL v226 = v222 <= v225;
        if (v222 == v225
          && (v227 = *(_DWORD *)(v221 + 84), v228 = *(_DWORD *)(v224 + 84), BOOL v226 = v227 <= v228, v227 == v228))
        {
          size_t v229 = *v220;
          size_t v230 = *v223;
          if (*v223 >= *v220) {
            size_t v231 = *v220;
          }
          else {
            size_t v231 = *v223;
          }
          if (v231
            && (__n128 result = (size_t **)memcmp(v220 + 2, v223 + 2, v231),
                int64_t v201 = (unint64_t)(v10 - 2) >> 1,
                result))
          {
            if ((result & 0x80000000) != 0) {
              goto LABEL_336;
            }
          }
          else if (v229 < v230)
          {
            goto LABEL_336;
          }
        }
        else if (!v226)
        {
          goto LABEL_336;
        }
        v381[v203] = v220;
        if (v201 < v204) {
          goto LABEL_335;
        }
        while (1)
        {
          v232 = v205;
          uint64_t v233 = 2 * v204;
          uint64_t v204 = (2 * v204) | 1;
          v205 = &v381[v204];
          uint64_t v234 = v233 + 2;
          if (v233 + 2 < v10)
          {
            v235 = v205[1];
            v236 = *v205;
            size_t v237 = (*v205)[1];
            int v238 = *(_DWORD *)(v237 + 80);
            size_t v239 = v235[1];
            int v240 = *(_DWORD *)(v239 + 80);
            BOOL v241 = v238 <= v240;
            if (v238 == v240
              && (v242 = *(_DWORD *)(v237 + 84), v243 = *(_DWORD *)(v239 + 84), BOOL v241 = v242 <= v243, v242 == v243))
            {
              size_t v244 = *v236;
              size_t v245 = *v235;
              if (*v235 >= *v236) {
                size_t v246 = *v236;
              }
              else {
                size_t v246 = *v235;
              }
              if (v246
                && (__n128 result = (size_t **)memcmp(v236 + 2, v235 + 2, v246),
                    int64_t v201 = (unint64_t)(v10 - 2) >> 1,
                    result))
              {
                int v247 = ((int)result >> 31) | 1;
              }
              else
              {
                if (v244 < v245) {
                  int v247 = -1;
                }
                else {
                  int v247 = 1;
                }
                if (v244 == v245) {
                  int v247 = 0;
                }
              }
              BOOL v248 = v247 == -1;
            }
            else
            {
              BOOL v248 = !v241;
            }
            if (v248)
            {
              ++v205;
              uint64_t v204 = v234;
            }
          }
          v249 = *v205;
          size_t v250 = (*v205)[1];
          int v251 = *(_DWORD *)(v250 + 80);
          size_t v252 = v223[1];
          int v253 = *(_DWORD *)(v252 + 80);
          BOOL v254 = v251 <= v253;
          if (v251 != v253
            || (v255 = *(_DWORD *)(v250 + 84), v256 = *(_DWORD *)(v252 + 84), BOOL v254 = v255 <= v256, v255 != v256))
          {
            if (!v254) {
              break;
            }
            goto LABEL_331;
          }
          size_t v257 = *v249;
          size_t v258 = *v223;
          if (*v223 >= *v249) {
            size_t v259 = *v249;
          }
          else {
            size_t v259 = *v223;
          }
          if (v259)
          {
            __n128 result = (size_t **)memcmp(v249 + 2, v223 + 2, v259);
            int64_t v201 = (unint64_t)(v10 - 2) >> 1;
            if (result)
            {
              if ((result & 0x80000000) != 0) {
                break;
              }
              goto LABEL_331;
            }
          }
          if (v257 < v258) {
            break;
          }
LABEL_331:
          *v232 = v249;
          if (v201 < v204) {
            goto LABEL_335;
          }
        }
        v205 = v232;
LABEL_335:
        *v205 = v223;
LABEL_336:
        int64_t v202 = v203 - 1;
      }
      while (v203);
      v272 = v379;
      while (1)
      {
        uint64_t v273 = 0;
        v274 = v381;
        v378 = *v381;
        do
        {
          uint64_t v275 = (uint64_t)&v274[v273 + 1];
          uint64_t v276 = (2 * v273) | 1;
          uint64_t v277 = 2 * v273 + 2;
          if (v277 < v10)
          {
            v278 = (size_t *)v274[v273 + 2];
            v279 = *(size_t **)v275;
            uint64_t v280 = *(void *)(*(void *)v275 + 8);
            int v281 = *(_DWORD *)(v280 + 80);
            size_t v282 = v278[1];
            int v283 = *(_DWORD *)(v282 + 80);
            BOOL v284 = v281 <= v283;
            if (v281 == v283
              && (v285 = *(_DWORD *)(v280 + 84), v286 = *(_DWORD *)(v282 + 84), BOOL v284 = v285 <= v286, v285 == v286))
            {
              size_t v287 = *v279;
              size_t v288 = *v278;
              if (*v278 >= *v279) {
                size_t v289 = *v279;
              }
              else {
                size_t v289 = *v278;
              }
              if (v289 && (__n128 result = (size_t **)memcmp(v279 + 2, v278 + 2, v289), result))
              {
                int v290 = ((int)result >> 31) | 1;
              }
              else
              {
                if (v287 < v288) {
                  int v290 = -1;
                }
                else {
                  int v290 = 1;
                }
                if (v287 == v288) {
                  int v290 = 0;
                }
              }
              BOOL v291 = v290 == -1;
            }
            else
            {
              BOOL v291 = !v284;
            }
            if (v291)
            {
              v275 += 8;
              uint64_t v276 = v277;
            }
          }
          void *v274 = *(void *)v275;
          v274 = (void *)v275;
          uint64_t v273 = v276;
        }
        while (v276 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
        v292 = v272 - 1;
        v380 = v292;
        if ((size_t **)v275 == v292)
        {
          *(void *)uint64_t v275 = v378;
        }
        else
        {
          *(void *)uint64_t v275 = *v292;
          *v292 = v378;
          uint64_t v293 = v275 - (void)v381 + 8;
          if (v293 >= 9)
          {
            unint64_t v294 = ((unint64_t)v293 >> 3) - 2;
            unint64_t v295 = v294 >> 1;
            v296 = &v381[v294 >> 1];
            v297 = *v296;
            size_t v298 = (*v296)[1];
            int v299 = *(_DWORD *)(v298 + 80);
            v300 = *(size_t **)v275;
            uint64_t v301 = *(void *)(*(void *)v275 + 8);
            int v302 = *(_DWORD *)(v301 + 80);
            BOOL v303 = v299 <= v302;
            if (v299 == v302
              && (v304 = *(_DWORD *)(v298 + 84), v305 = *(_DWORD *)(v301 + 84), BOOL v303 = v304 <= v305, v304 == v305))
            {
              size_t v306 = *v297;
              size_t v307 = *v300;
              if (*v300 >= *v297) {
                size_t v308 = *v297;
              }
              else {
                size_t v308 = *v300;
              }
              if (v308 && (__n128 result = (size_t **)memcmp(v297 + 2, v300 + 2, v308), result))
              {
                if ((result & 0x80000000) != 0) {
                  goto LABEL_387;
                }
              }
              else if (v306 < v307)
              {
LABEL_387:
                *(void *)uint64_t v275 = v297;
                if (v294 >= 2)
                {
                  while (1)
                  {
                    unint64_t v310 = v295 - 1;
                    unint64_t v295 = (v295 - 1) >> 1;
                    v309 = &v381[v295];
                    v311 = *v309;
                    size_t v312 = (*v309)[1];
                    int v313 = *(_DWORD *)(v312 + 80);
                    size_t v314 = v300[1];
                    int v315 = *(_DWORD *)(v314 + 80);
                    BOOL v316 = v313 <= v315;
                    if (v313 == v315
                      && (int v317 = *(_DWORD *)(v312 + 84), v318 = *(_DWORD *)(v314 + 84),
                                                         BOOL v316 = v317 <= v318,
                                                         v317 == v318))
                    {
                      size_t v319 = *v311;
                      size_t v320 = *v300;
                      if (*v300 >= *v311) {
                        size_t v321 = *v311;
                      }
                      else {
                        size_t v321 = *v300;
                      }
                      if (v321 && (__n128 result = (size_t **)memcmp(v311 + 2, v300 + 2, v321), result))
                      {
                        if ((result & 0x80000000) == 0) {
                          break;
                        }
                      }
                      else if (v319 >= v320)
                      {
                        break;
                      }
                    }
                    else if (v316)
                    {
                      break;
                    }
                    *v296 = v311;
                    v296 = &v381[v295];
                    if (v310 <= 1) {
                      goto LABEL_389;
                    }
                  }
                }
                v309 = v296;
LABEL_389:
                *v309 = v300;
              }
            }
            else if (!v303)
            {
              goto LABEL_387;
            }
          }
        }
        BOOL v29 = v10-- <= 2;
        v272 = v380;
        if (v29) {
          return result;
        }
      }
    }
    unint64_t v11 = (unint64_t)v10 >> 1;
    long long v12 = &v381[(unint64_t)v10 >> 1];
    if ((unint64_t)v9 < 0x401)
    {
      __n128 result = sub_1CC018D3C(v12, v381, v377);
    }
    else
    {
      sub_1CC018D3C(v381, v12, v377);
      sub_1CC018D3C(v381 + 1, v12 - 1, v372);
      sub_1CC018D3C(v381 + 2, &v381[v11 + 1], v371);
      __n128 result = sub_1CC018D3C(v12 - 1, v12, &v381[v11 + 1]);
      unint64_t v13 = *v381;
      *v381 = *v12;
      _OWORD *v12 = v13;
    }
    k = v381;
    unint64_t v14 = *v381;
    __s2 = a3 - 1;
    if (a4)
    {
      size_t v15 = v14[1];
      int v16 = *(_DWORD *)(v15 + 80);
LABEL_25:
      for (uint64_t i = 1; ; ++i)
      {
        int v26 = v381[i];
        size_t v27 = v26[1];
        int v28 = *(_DWORD *)(v27 + 80);
        BOOL v29 = v28 <= v16;
        if (v28 == v16)
        {
          int v30 = *(_DWORD *)(v27 + 84);
          int v31 = *(_DWORD *)(v15 + 84);
          BOOL v29 = v30 <= v31;
          if (v30 == v31) {
            break;
          }
        }
        if (v29) {
          goto LABEL_38;
        }
LABEL_36:
        ;
      }
      size_t v32 = *v26;
      size_t v33 = *v14;
      if (*v14 >= *v26) {
        size_t v34 = *v26;
      }
      else {
        size_t v34 = *v14;
      }
      if (v34)
      {
        int v35 = memcmp(v26 + 2, v14 + 2, v34);
        if (v35)
        {
          if ((v35 & 0x80000000) == 0) {
            goto LABEL_38;
          }
          goto LABEL_36;
        }
      }
      if (v32 < v33) {
        goto LABEL_36;
      }
LABEL_38:
      k = &v381[i];
      uint64_t j = v377;
      if (i != 1)
      {
        while (1)
        {
          int v37 = *j;
          size_t v38 = (*j)[1];
          int v39 = *(_DWORD *)(v38 + 80);
          BOOL v40 = v39 <= v16;
          if (v39 == v16 && (v41 = *(_DWORD *)(v38 + 84), int v42 = *(_DWORD *)(v15 + 84), v40 = v41 <= v42, v41 == v42))
          {
            uint64_t v43 = j;
            size_t v44 = *v37;
            size_t v45 = *v14;
            if (*v14 >= *v37) {
              size_t v46 = *v37;
            }
            else {
              size_t v46 = *v14;
            }
            if (v46 && (int v47 = memcmp(v37 + 2, v14 + 2, v46)) != 0)
            {
              uint64_t j = v43;
              if (v47 < 0) {
                goto LABEL_74;
              }
            }
            else
            {
              BOOL v4 = v44 >= v45;
              uint64_t j = v43;
              if (!v4) {
                goto LABEL_74;
              }
            }
          }
          else if (!v40)
          {
            goto LABEL_74;
          }
          --j;
        }
      }
      uint64_t j = v379;
      if (k < v379)
      {
        for (uint64_t j = v377; ; --j)
        {
          uint64_t v48 = *j;
          size_t v49 = (*j)[1];
          int v50 = *(_DWORD *)(v49 + 80);
          if (v50 == v16)
          {
            int v51 = *(_DWORD *)(v49 + 84);
            int v52 = *(_DWORD *)(v15 + 84);
            if (v51 == v52)
            {
              size_t v53 = *v48;
              size_t v54 = *v14;
              if (*v14 >= *v48) {
                size_t v55 = *v48;
              }
              else {
                size_t v55 = *v14;
              }
              if (v55 && (int v56 = memcmp(v48 + 2, v14 + 2, v55)) != 0)
              {
                BOOL v57 = v56 >= 0;
              }
              else
              {
                if (v53 < v54) {
                  break;
                }
                BOOL v57 = 1;
              }
              if (k >= j || !v57) {
                break;
              }
            }
            else if (k >= j || v51 > v52)
            {
              break;
            }
          }
          else if (k >= j || v50 > v16)
          {
            break;
          }
        }
      }
LABEL_74:
      unint64_t v374 = (unint64_t)j;
      __s1 = k;
      if (k >= j) {
        goto LABEL_102;
      }
      uint64_t v58 = *j;
      char v59 = j;
      while (2)
      {
        *k++ = v58;
        *char v59 = v26;
        size_t v60 = v14[1];
        int v61 = *(_DWORD *)(v60 + 80);
        while (2)
        {
          int v26 = *k;
          size_t v62 = (*k)[1];
          int v63 = *(_DWORD *)(v62 + 80);
          BOOL v64 = v63 <= v61;
          if (v63 == v61)
          {
            int v65 = *(_DWORD *)(v62 + 84);
            int v66 = *(_DWORD *)(v60 + 84);
            BOOL v64 = v65 <= v66;
            if (v65 == v66)
            {
              size_t v67 = *v26;
              size_t v68 = *v14;
              if (*v14 >= *v26) {
                size_t v69 = *v26;
              }
              else {
                size_t v69 = *v14;
              }
              if (v69 && (int v70 = memcmp(v26 + 2, v14 + 2, v69)) != 0)
              {
                if ((v70 & 0x80000000) == 0) {
                  goto LABEL_89;
                }
              }
              else if (v67 >= v68)
              {
                goto LABEL_89;
              }
              goto LABEL_87;
            }
          }
          if (!v64)
          {
LABEL_87:
            ++k;
            continue;
          }
          break;
        }
        do
        {
          while (1)
          {
LABEL_89:
            while (1)
            {
              unsigned int v71 = *--v59;
              uint64_t v58 = v71;
              size_t v72 = v71[1];
              int v73 = *(_DWORD *)(v72 + 80);
              BOOL v74 = v73 <= v61;
              if (v73 == v61)
              {
                int v75 = *(_DWORD *)(v72 + 84);
                int v76 = *(_DWORD *)(v60 + 84);
                BOOL v74 = v75 <= v76;
                if (v75 == v76) {
                  break;
                }
              }
              if (!v74) {
                goto LABEL_101;
              }
            }
            size_t v77 = *v58;
            size_t v78 = *v14;
            size_t v79 = *v14 >= *v58 ? *v58 : *v14;
            if (!v79) {
              break;
            }
            int v80 = memcmp(v58 + 2, v14 + 2, v79);
            if (!v80) {
              break;
            }
            if (v80 < 0) {
              goto LABEL_101;
            }
          }
        }
        while (v77 >= v78);
LABEL_101:
        if (k < v59) {
          continue;
        }
        break;
      }
LABEL_102:
      uint64_t v81 = k - 1;
      if (k - 1 != v381) {
        *v381 = *v81;
      }
      *uint64_t v81 = v14;
      a2 = v379;
      a3 = __s2;
      if ((unint64_t)__s1 < v374)
      {
LABEL_107:
        __n128 result = (size_t **)sub_1CC017AF8(v381, k - 1, __s2, a4 & 1);
        a4 = 0;
      }
      else
      {
        BOOL v82 = sub_1CC018FA8(v381, k - 1);
        __n128 result = (size_t **)sub_1CC018FA8(k, v379);
        if (result)
        {
          a2 = k - 1;
          if (v82) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v82) {
          goto LABEL_107;
        }
      }
    }
    else
    {
      uint64_t v17 = *(v381 - 1);
      size_t v18 = v17[1];
      int v19 = *(_DWORD *)(v18 + 80);
      size_t v15 = v14[1];
      int v16 = *(_DWORD *)(v15 + 80);
      if (v19 == v16)
      {
        int v20 = *(_DWORD *)(v18 + 84);
        int v21 = *(_DWORD *)(v15 + 84);
        if (v20 == v21)
        {
          size_t v22 = *v17;
          size_t v23 = *v14;
          if (*v14 >= *v17) {
            size_t v24 = *v17;
          }
          else {
            size_t v24 = *v14;
          }
          if (v24 && (__n128 result = (size_t **)memcmp(v17 + 2, v14 + 2, v24), result))
          {
            if ((result & 0x80000000) != 0) {
              goto LABEL_24;
            }
          }
          else if (v22 < v23)
          {
LABEL_24:
            int v16 = v19;
            goto LABEL_25;
          }
        }
        else if (v20 > v21)
        {
          goto LABEL_24;
        }
      }
      else if (v19 > v16)
      {
        goto LABEL_25;
      }
      uint64_t v83 = *v377;
      size_t v84 = (*v377)[1];
      int v85 = *(_DWORD *)(v84 + 80);
      BOOL v86 = v16 <= v85;
      if (v16 == v85 && (v87 = *(_DWORD *)(v15 + 84), v88 = *(_DWORD *)(v84 + 84), BOOL v86 = v87 <= v88, v87 == v88))
      {
        size_t v89 = *v14;
        size_t v90 = *v83;
        if (*v83 >= *v14) {
          size_t v91 = *v14;
        }
        else {
          size_t v91 = *v83;
        }
        if (v91 && (__n128 result = (size_t **)memcmp(v14 + 2, v83 + 2, v91), result))
        {
          if ((result & 0x80000000) != 0) {
            goto LABEL_119;
          }
        }
        else if (v89 < v90)
        {
          goto LABEL_119;
        }
      }
      else if (!v86)
      {
        do
        {
          while (1)
          {
LABEL_119:
            while (1)
            {
              int v93 = k[1];
              ++k;
              int v92 = v93;
              size_t v94 = v93[1];
              int v95 = *(_DWORD *)(v94 + 80);
              BOOL v96 = v16 <= v95;
              if (v16 == v95)
              {
                int v97 = *(_DWORD *)(v15 + 84);
                int v98 = *(_DWORD *)(v94 + 84);
                BOOL v96 = v97 <= v98;
                if (v97 == v98) {
                  break;
                }
              }
              if (!v96) {
                goto LABEL_148;
              }
            }
            size_t v99 = *v14;
            size_t v100 = *v92;
            size_t v101 = *v92 >= *v14 ? *v14 : *v92;
            if (!v101) {
              break;
            }
            __n128 result = (size_t **)memcmp(v14 + 2, v92 + 2, v101);
            if (!result) {
              break;
            }
            if ((result & 0x80000000) != 0) {
              goto LABEL_148;
            }
          }
        }
        while (v99 >= v100);
        goto LABEL_148;
      }
      for (k = v381 + 1; k < v379; ++k)
      {
        uint64_t v102 = *k;
        size_t v103 = (*k)[1];
        int v104 = *(_DWORD *)(v103 + 80);
        BOOL v105 = v16 <= v104;
        if (v16 == v104
          && (int v106 = *(_DWORD *)(v15 + 84), v107 = *(_DWORD *)(v103 + 84), v105 = v106 <= v107, v106 == v107))
        {
          size_t v108 = *v14;
          size_t v109 = *v102;
          if (*v102 >= *v14) {
            size_t v110 = *v14;
          }
          else {
            size_t v110 = *v102;
          }
          if (v110 && (__n128 result = (size_t **)memcmp(v14 + 2, v102 + 2, v110), result))
          {
            if ((result & 0x80000000) != 0) {
              break;
            }
          }
          else if (v108 < v109)
          {
            break;
          }
        }
        else if (!v105)
        {
          break;
        }
      }
LABEL_148:
      int v111 = v379;
      if (k < v379)
      {
        int v111 = v377;
        while (1)
        {
          BOOL v112 = v16 <= v85;
          if (v16 == v85
            && (v113 = *(_DWORD *)(v15 + 84), v114 = *(_DWORD *)(v84 + 84), BOOL v112 = v113 <= v114, v113 == v114))
          {
            size_t v115 = *v14;
            size_t v116 = *v83;
            if (*v83 >= *v14) {
              size_t v117 = *v14;
            }
            else {
              size_t v117 = *v83;
            }
            if (v117 && (__n128 result = (size_t **)memcmp(v14 + 2, v83 + 2, v117), result))
            {
              if ((result & 0x80000000) == 0) {
                break;
              }
            }
            else if (v115 >= v116)
            {
              break;
            }
          }
          else if (v112)
          {
            break;
          }
          int v118 = *--v111;
          uint64_t v83 = v118;
          size_t v84 = v118[1];
          int v85 = *(_DWORD *)(v84 + 80);
        }
      }
      if (k >= v111) {
        goto LABEL_192;
      }
      int v119 = *k;
      unsigned int v120 = *v111;
      do
      {
        *k++ = v120;
        *int v111 = v119;
        size_t v121 = v14[1];
        int v122 = *(_DWORD *)(v121 + 80);
        while (1)
        {
          int v119 = *k;
          size_t v123 = (*k)[1];
          int v124 = *(_DWORD *)(v123 + 80);
          BOOL v125 = v122 <= v124;
          if (v122 != v124
            || (int v126 = *(_DWORD *)(v121 + 84), v127 = *(_DWORD *)(v123 + 84), v125 = v126 <= v127, v126 != v127))
          {
            if (!v125) {
              goto LABEL_178;
            }
            goto LABEL_176;
          }
          size_t v128 = *v14;
          size_t v129 = *v119;
          size_t v130 = *v119 >= *v14 ? *v14 : *v119;
          if (!v130) {
            break;
          }
          __n128 result = (size_t **)memcmp(v14 + 2, v119 + 2, v130);
          if (!result) {
            break;
          }
          if ((result & 0x80000000) != 0) {
            goto LABEL_178;
          }
LABEL_176:
          ++k;
        }
        if (v128 >= v129) {
          goto LABEL_176;
        }
        do
        {
          while (1)
          {
LABEL_178:
            while (1)
            {
              unint64_t v131 = *--v111;
              unsigned int v120 = v131;
              size_t v132 = v131[1];
              int v133 = *(_DWORD *)(v132 + 80);
              BOOL v134 = v122 <= v133;
              if (v122 == v133)
              {
                int v135 = *(_DWORD *)(v121 + 84);
                int v136 = *(_DWORD *)(v132 + 84);
                BOOL v134 = v135 <= v136;
                if (v135 == v136) {
                  break;
                }
              }
              if (v134) {
                goto LABEL_191;
              }
            }
            size_t v137 = *v14;
            size_t v138 = *v120;
            size_t v139 = *v120 >= *v14 ? *v14 : *v120;
            if (!v139) {
              break;
            }
            __n128 result = (size_t **)memcmp(v14 + 2, v120 + 2, v139);
            if (!result) {
              break;
            }
            if ((result & 0x80000000) == 0) {
              goto LABEL_191;
            }
          }
        }
        while (v137 < v138);
LABEL_191:
        ;
      }
      while (k < v111);
LABEL_192:
      uint64_t v140 = k - 1;
      BOOL v4 = k - 1 >= v381;
      BOOL v5 = k - 1 == v381;
      if (k - 1 != v381) {
        *v381 = *v140;
      }
      a4 = 0;
      *uint64_t v140 = v14;
      a2 = v379;
      a3 = __s2;
    }
  }
  v168 = v381 + 1;
  BOOL v170 = v381 == a2 || v168 == a2;
  if ((a4 & 1) == 0)
  {
    if (v170) {
      return result;
    }
    while (1)
    {
      v322 = v381;
      v323 = v168;
      v325 = *v381;
      v324 = v381[1];
      size_t v326 = v324[1];
      int v327 = *(_DWORD *)(v326 + 80);
      size_t v328 = (*v381)[1];
      int v329 = *(_DWORD *)(v328 + 80);
      BOOL v330 = v327 <= v329;
      v381 = v323;
      if (v327 == v329
        && (v331 = *(_DWORD *)(v326 + 84), v332 = *(_DWORD *)(v328 + 84), BOOL v330 = v331 <= v332, v331 == v332))
      {
        size_t v333 = *v324;
        size_t v334 = *v325;
        if (*v325 >= *v324) {
          size_t v335 = *v324;
        }
        else {
          size_t v335 = *v325;
        }
        if (v335 && (__n128 result = (size_t **)memcmp(v324 + 2, v325 + 2, v335), result))
        {
          if ((result & 0x80000000) != 0) {
            goto LABEL_420;
          }
        }
        else if (v333 < v334)
        {
          goto LABEL_420;
        }
      }
      else if (!v330)
      {
        do
        {
          while (1)
          {
LABEL_420:
            while (1)
            {
              v336 = v322;
              v337 = v325;
              v338 = *--v322;
              v325 = v338;
              v322[2] = v337;
              size_t v339 = v324[1];
              int v340 = *(_DWORD *)(v339 + 80);
              size_t v341 = v338[1];
              int v342 = *(_DWORD *)(v341 + 80);
              BOOL v343 = v340 <= v342;
              if (v340 == v342)
              {
                int v344 = *(_DWORD *)(v339 + 84);
                int v345 = *(_DWORD *)(v341 + 84);
                BOOL v343 = v344 <= v345;
                if (v344 == v345) {
                  break;
                }
              }
              if (v343) {
                goto LABEL_434;
              }
            }
            size_t v346 = *v324;
            size_t v347 = *v325;
            size_t v348 = *v325 >= *v324 ? *v324 : *v325;
            if (!v348) {
              break;
            }
            __n128 result = (size_t **)memcmp(v324 + 2, v325 + 2, v348);
            if (!result) {
              break;
            }
            v323 = v381;
            if ((result & 0x80000000) == 0) {
              goto LABEL_434;
            }
          }
          BOOL v4 = v346 >= v347;
          v323 = v381;
        }
        while (!v4);
LABEL_434:
        *v336 = v324;
      }
      v168 = v323 + 1;
      if (v323 + 1 == a2) {
        return result;
      }
    }
  }
  if (v170) {
    return result;
  }
  uint64_t v171 = 0;
  v172 = v381;
  while (2)
  {
    v173 = v172;
    v172 = v168;
    v174 = *v173;
    v175 = v173[1];
    size_t v176 = v175[1];
    int v177 = *(_DWORD *)(v176 + 80);
    size_t v178 = (*v173)[1];
    int v179 = *(_DWORD *)(v178 + 80);
    BOOL v180 = v177 <= v179;
    if (v177 == v179
      && (v181 = *(_DWORD *)(v176 + 84), v182 = *(_DWORD *)(v178 + 84), BOOL v180 = v181 <= v182, v181 == v182))
    {
      size_t v183 = *v175;
      size_t v184 = *v174;
      if (*v174 >= *v175) {
        size_t v185 = *v175;
      }
      else {
        size_t v185 = *v174;
      }
      if (v185 && (__n128 result = (size_t **)memcmp(v175 + 2, v174 + 2, v185), result))
      {
        if ((result & 0x80000000) == 0) {
          goto LABEL_263;
        }
      }
      else if (v183 >= v184)
      {
        goto LABEL_263;
      }
    }
    else if (v180)
    {
      goto LABEL_263;
    }
    v173[1] = v174;
    v186 = v381;
    v187 = v381;
    if (v173 == v381) {
      goto LABEL_262;
    }
    uint64_t v188 = v171;
    while (2)
    {
      v189 = (size_t **)((char *)v186 + v188);
      size_t v190 = v175[1];
      int v191 = *(_DWORD *)(v190 + 80);
      v192 = *(size_t **)((char *)v186 + v188 - 8);
      size_t v193 = v192[1];
      int v194 = *(_DWORD *)(v193 + 80);
      BOOL v195 = v191 <= v194;
      if (v191 == v194)
      {
        int v196 = *(_DWORD *)(v190 + 84);
        int v197 = *(_DWORD *)(v193 + 84);
        BOOL v195 = v196 <= v197;
        if (v196 == v197)
        {
          size_t v198 = *v175;
          size_t v199 = *v192;
          if (*v192 >= *v175) {
            size_t v200 = *v175;
          }
          else {
            size_t v200 = *v192;
          }
          if (v200 && (__n128 result = (size_t **)memcmp(v175 + 2, v192 + 2, v200), result))
          {
            if ((result & 0x80000000) == 0) {
              break;
            }
          }
          else if (v198 >= v199)
          {
            v187 = (size_t **)((char *)v381 + v188);
            goto LABEL_261;
          }
          goto LABEL_254;
        }
      }
      if (!v195)
      {
LABEL_254:
        --v173;
        *v189 = v192;
        v188 -= 8;
        v186 = v381;
        if (!v188)
        {
          v187 = v381;
          goto LABEL_261;
        }
        continue;
      }
      break;
    }
    v187 = v173;
LABEL_261:
    a2 = v379;
LABEL_262:
    *v187 = v175;
LABEL_263:
    v168 = v172 + 1;
    v171 += 8;
    if (v172 + 1 != a2) {
      continue;
    }
    return result;
  }
}

size_t **sub_1CC018D3C(size_t **result, size_t **a2, size_t **a3)
{
  BOOL v5 = result;
  size_t v6 = *a2;
  size_t v7 = (*a2)[1];
  int v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *result;
  size_t v10 = (*result)[1];
  int v11 = *(_DWORD *)(v10 + 80);
  BOOL v12 = v8 <= v11;
  if (v8 != v11 || (int v13 = *(_DWORD *)(v7 + 84), v14 = *(_DWORD *)(v10 + 84), v12 = v13 <= v14, v13 != v14))
  {
    if (v12) {
      goto LABEL_23;
    }
LABEL_11:
    size_t v18 = *a3;
    size_t v19 = (*a3)[1];
    int v20 = *(_DWORD *)(v19 + 80);
    BOOL v21 = v20 <= v8;
    if (v20 == v8 && (v22 = *(_DWORD *)(v19 + 84), v23 = *(_DWORD *)(v7 + 84), BOOL v21 = v22 <= v23, v22 == v23))
    {
      size_t v24 = *v18;
      size_t v25 = *v6;
      if (*v6 >= *v18) {
        size_t v26 = *v18;
      }
      else {
        size_t v26 = *v6;
      }
      if (v26)
      {
        __n128 result = (size_t **)memcmp(v18 + 2, v6 + 2, v26);
        if (result)
        {
          if ((result & 0x80000000) != 0) {
            goto LABEL_21;
          }
LABEL_47:
          const void *v5 = v6;
          *a2 = v9;
          uint64_t v48 = *a3;
          size_t v49 = (*a3)[1];
          int v50 = *(_DWORD *)(v49 + 80);
          size_t v51 = v9[1];
          int v52 = *(_DWORD *)(v51 + 80);
          BOOL v53 = v50 <= v52;
          if (v50 == v52 && (v54 = *(_DWORD *)(v49 + 84), v55 = *(_DWORD *)(v51 + 84), BOOL v53 = v54 <= v55, v54 == v55))
          {
            size_t v56 = *v48;
            size_t v57 = *v9;
            if (*v9 >= *v48) {
              size_t v58 = *v48;
            }
            else {
              size_t v58 = *v9;
            }
            if (v58 && (__n128 result = (size_t **)memcmp(v48 + 2, v9 + 2, v58), result))
            {
              if ((result & 0x80000000) == 0) {
                return result;
              }
            }
            else if (v56 >= v57)
            {
              return result;
            }
          }
          else if (v53)
          {
            return result;
          }
          *a2 = v48;
          goto LABEL_58;
        }
      }
      if (v24 >= v25) {
        goto LABEL_47;
      }
    }
    else if (v21)
    {
      goto LABEL_47;
    }
LABEL_21:
    const void *v5 = v18;
LABEL_58:
    *a3 = v9;
    return result;
  }
  size_t v15 = *v6;
  size_t v16 = *v9;
  if (*v9 >= *v6) {
    size_t v17 = *v6;
  }
  else {
    size_t v17 = *v9;
  }
  if (!v17 || (__n128 result = (size_t **)memcmp(v6 + 2, v9 + 2, v17), !result))
  {
    if (v15 >= v16) {
      goto LABEL_23;
    }
    goto LABEL_11;
  }
  if ((result & 0x80000000) != 0) {
    goto LABEL_11;
  }
LABEL_23:
  size_t v27 = *a3;
  size_t v28 = (*a3)[1];
  int v29 = *(_DWORD *)(v28 + 80);
  BOOL v30 = v29 <= v8;
  if (v29 == v8 && (v31 = *(_DWORD *)(v28 + 84), v32 = *(_DWORD *)(v7 + 84), BOOL v30 = v31 <= v32, v31 == v32))
  {
    size_t v33 = *v27;
    size_t v34 = *v6;
    if (*v6 >= *v27) {
      size_t v35 = *v27;
    }
    else {
      size_t v35 = *v6;
    }
    if (v35 && (__n128 result = (size_t **)memcmp(v27 + 2, v6 + 2, v35), result))
    {
      if ((result & 0x80000000) == 0) {
        return result;
      }
    }
    else if (v33 >= v34)
    {
      return result;
    }
  }
  else if (v30)
  {
    return result;
  }
  *a2 = v27;
  *a3 = v6;
  size_t v36 = *a2;
  size_t v37 = (*a2)[1];
  int v38 = *(_DWORD *)(v37 + 80);
  int v39 = *v5;
  size_t v40 = (*v5)[1];
  int v41 = *(_DWORD *)(v40 + 80);
  BOOL v42 = v38 <= v41;
  if (v38 != v41 || (v43 = *(_DWORD *)(v37 + 84), v44 = *(_DWORD *)(v40 + 84), BOOL v42 = v43 <= v44, v43 != v44))
  {
    if (v42) {
      return result;
    }
LABEL_43:
    const void *v5 = v36;
    *a2 = v39;
    return result;
  }
  size_t v45 = *v36;
  size_t v46 = *v39;
  if (*v39 >= *v36) {
    size_t v47 = *v36;
  }
  else {
    size_t v47 = *v39;
  }
  if (v47)
  {
    __n128 result = (size_t **)memcmp(v36 + 2, v39 + 2, v47);
    if (result)
    {
      if ((result & 0x80000000) == 0) {
        return result;
      }
      goto LABEL_43;
    }
  }
  if (v45 < v46) {
    goto LABEL_43;
  }
  return result;
}

BOOL sub_1CC018FA8(size_t **a1, size_t **a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      size_t v6 = *(a2 - 1);
      size_t v7 = v6[1];
      int v8 = *(_DWORD *)(v7 + 80);
      uint64_t v9 = *v3;
      size_t v10 = (*v3)[1];
      int v11 = *(_DWORD *)(v10 + 80);
      BOOL v12 = v8 <= v11;
      if (v8 == v11 && (int v13 = *(_DWORD *)(v7 + 84), v14 = *(_DWORD *)(v10 + 84), v12 = v13 <= v14, v13 == v14))
      {
        size_t v15 = *v6;
        size_t v16 = *v9;
        if (*v9 >= *v6) {
          size_t v17 = *v6;
        }
        else {
          size_t v17 = *v9;
        }
        if (v17)
        {
          int v18 = memcmp(v6 + 2, v9 + 2, v17);
          uint64_t v3 = a1;
          if (v18)
          {
            if ((v18 & 0x80000000) == 0) {
              return 1;
            }
            goto LABEL_58;
          }
        }
        if (v15 >= v16) {
          return 1;
        }
      }
      else if (v12)
      {
        return result;
      }
LABEL_58:
      *uint64_t v3 = v6;
      *(v2 - 1) = v9;
      return 1;
    case 3:
      sub_1CC018D3C(v3, v3 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CC01947C(v3, v3 + 1, v3 + 2, a2 - 1);
      return 1;
    case 5:
      int v52 = v3 + 1;
      BOOL v53 = v3 + 2;
      int v54 = v3 + 3;
      sub_1CC01947C(v3, v3 + 1, v3 + 2, v3 + 3);
      int v55 = a1;
      size_t v56 = *(v2 - 1);
      size_t v57 = v56[1];
      int v58 = *(_DWORD *)(v57 + 80);
      char v59 = a1[3];
      size_t v60 = v59[1];
      int v61 = *(_DWORD *)(v60 + 80);
      BOOL v62 = v58 <= v61;
      if (v58 == v61 && (v63 = *(_DWORD *)(v57 + 84), v64 = *(_DWORD *)(v60 + 84), BOOL v62 = v63 <= v64, v63 == v64))
      {
        size_t v65 = *v56;
        size_t v66 = *v59;
        if (*v59 >= *v56) {
          size_t v67 = *v56;
        }
        else {
          size_t v67 = *v59;
        }
        if (v67 && (v68 = memcmp(v56 + 2, v59 + 2, v67), int v55 = a1, v68))
        {
          if ((v68 & 0x80000000) == 0) {
            return 1;
          }
        }
        else if (v65 >= v66)
        {
          return 1;
        }
      }
      else if (v62)
      {
        return 1;
      }
      *int v54 = v56;
      *(v2 - 1) = v59;
      size_t v69 = *v54;
      size_t v70 = (*v54)[1];
      int v71 = *(_DWORD *)(v70 + 80);
      size_t v72 = *v53;
      size_t v73 = (*v53)[1];
      int v74 = *(_DWORD *)(v73 + 80);
      BOOL v75 = v71 <= v74;
      if (v71 == v74 && (int v76 = *(_DWORD *)(v70 + 84), v77 = *(_DWORD *)(v73 + 84), v75 = v76 <= v77, v76 == v77))
      {
        size_t v78 = *v69;
        size_t v79 = *v72;
        if (*v72 >= *v69) {
          size_t v80 = *v69;
        }
        else {
          size_t v80 = *v72;
        }
        if (v80 && (v81 = memcmp(v69 + 2, v72 + 2, v80), int v55 = a1, v81))
        {
          if ((v81 & 0x80000000) == 0) {
            return 1;
          }
        }
        else if (v78 >= v79)
        {
          return 1;
        }
      }
      else if (v75)
      {
        return 1;
      }
      *BOOL v53 = v69;
      *int v54 = v72;
      size_t v82 = v69[1];
      int v83 = *(_DWORD *)(v82 + 80);
      size_t v84 = *v52;
      size_t v85 = v84[1];
      int v86 = *(_DWORD *)(v85 + 80);
      BOOL v87 = v83 <= v86;
      if (v83 != v86 || (v88 = *(_DWORD *)(v82 + 84), int v89 = *(_DWORD *)(v85 + 84), v87 = v88 <= v89, v88 != v89))
      {
        if (v87) {
          return 1;
        }
LABEL_81:
        v55[1] = v69;
        v55[2] = v84;
        size_t v94 = v69[1];
        int v95 = *(_DWORD *)(v94 + 80);
        BOOL v96 = *v55;
        size_t v97 = (*v55)[1];
        int v98 = *(_DWORD *)(v97 + 80);
        BOOL v99 = v95 <= v98;
        if (v95 == v98
          && (v100 = *(_DWORD *)(v94 + 84), v101 = *(_DWORD *)(v97 + 84), BOOL v99 = v100 <= v101, v100 == v101))
        {
          size_t v102 = *v69;
          size_t v103 = *v96;
          if (*v96 >= *v69) {
            size_t v104 = *v69;
          }
          else {
            size_t v104 = *v96;
          }
          if (v104 && (v105 = memcmp(v69 + 2, v96 + 2, v104), int v55 = a1, v105))
          {
            if ((v105 & 0x80000000) == 0) {
              return 1;
            }
          }
          else if (v102 >= v103)
          {
            return 1;
          }
        }
        else if (v99)
        {
          return 1;
        }
        *int v55 = v69;
        v55[1] = v96;
        return 1;
      }
      size_t v90 = *v69;
      size_t v91 = *v84;
      if (*v84 >= *v69) {
        size_t v92 = *v69;
      }
      else {
        size_t v92 = *v84;
      }
      if (v92)
      {
        int v93 = memcmp(v69 + 2, v84 + 2, v92);
        int v55 = a1;
        if (v93)
        {
          if ((v93 & 0x80000000) == 0) {
            return 1;
          }
          goto LABEL_81;
        }
      }
      if (v90 < v91) {
        goto LABEL_81;
      }
      return 1;
    default:
      size_t v19 = v3 + 2;
      sub_1CC018D3C(v3, v3 + 1, v3 + 2);
      int v20 = a1;
      BOOL v21 = a1 + 3;
      if (a1 + 3 == v2) {
        return 1;
      }
      uint64_t v22 = 0;
      int v23 = 0;
      int v106 = v2;
      while (2)
      {
        size_t v24 = *v21;
        size_t v25 = (*v21)[1];
        int v26 = *(_DWORD *)(v25 + 80);
        size_t v27 = *v19;
        size_t v28 = (*v19)[1];
        int v29 = *(_DWORD *)(v28 + 80);
        BOOL v30 = v26 <= v29;
        if (v26 == v29 && (v31 = *(_DWORD *)(v25 + 84), v32 = *(_DWORD *)(v28 + 84), BOOL v30 = v31 <= v32, v31 == v32))
        {
          size_t v33 = *v24;
          size_t v34 = *v27;
          if (*v27 >= *v24) {
            size_t v35 = *v24;
          }
          else {
            size_t v35 = *v27;
          }
          if (v35 && (v36 = memcmp(v24 + 2, v27 + 2, v35), int v20 = a1, v36))
          {
            if ((v36 & 0x80000000) == 0) {
              goto LABEL_44;
            }
          }
          else if (v33 >= v34)
          {
            goto LABEL_44;
          }
        }
        else if (v30)
        {
          goto LABEL_44;
        }
        *BOOL v21 = v27;
        size_t v37 = v20;
        if (v19 == v20) {
          goto LABEL_43;
        }
        uint64_t v38 = v22;
        while (2)
        {
          int v39 = (char *)v20 + v38;
          size_t v40 = v24[1];
          int v41 = *(_DWORD *)(v40 + 80);
          BOOL v42 = *(size_t **)((char *)v20 + v38 + 8);
          size_t v43 = v42[1];
          int v44 = *(_DWORD *)(v43 + 80);
          BOOL v45 = v41 <= v44;
          if (v41 == v44)
          {
            int v46 = *(_DWORD *)(v40 + 84);
            int v47 = *(_DWORD *)(v43 + 84);
            BOOL v45 = v46 <= v47;
            if (v46 == v47)
            {
              size_t v48 = *v24;
              size_t v49 = *v42;
              if (*v42 >= *v24) {
                size_t v50 = *v24;
              }
              else {
                size_t v50 = *v42;
              }
              if (v50 && (v51 = memcmp(v24 + 2, v42 + 2, v50), int v20 = a1, v51))
              {
                if ((v51 & 0x80000000) == 0) {
                  break;
                }
              }
              else if (v48 >= v49)
              {
                size_t v37 = (size_t **)((char *)v20 + v38 + 16);
                goto LABEL_42;
              }
              goto LABEL_35;
            }
          }
          if (!v45)
          {
LABEL_35:
            --v19;
            *((void *)v39 + 2) = v42;
            v38 -= 8;
            if (v38 == -16)
            {
              size_t v37 = v20;
              goto LABEL_42;
            }
            continue;
          }
          break;
        }
        size_t v37 = v19;
LABEL_42:
        uint64_t v2 = v106;
LABEL_43:
        *size_t v37 = v24;
        if (++v23 != 8)
        {
LABEL_44:
          size_t v19 = v21;
          v22 += 8;
          if (++v21 == v2) {
            return 1;
          }
          continue;
        }
        return v21 + 1 == v2;
      }
  }
}

size_t **sub_1CC01947C(size_t **a1, size_t **a2, size_t **a3, size_t **a4)
{
  BOOL result = sub_1CC018D3C(a1, a2, a3);
  uint64_t v9 = *a4;
  size_t v10 = (*a4)[1];
  int v11 = *(_DWORD *)(v10 + 80);
  BOOL v12 = *a3;
  size_t v13 = (*a3)[1];
  int v14 = *(_DWORD *)(v13 + 80);
  BOOL v15 = v11 <= v14;
  if (v11 == v14 && (v16 = *(_DWORD *)(v10 + 84), v17 = *(_DWORD *)(v13 + 84), BOOL v15 = v16 <= v17, v16 == v17))
  {
    size_t v18 = *v9;
    size_t v19 = *v12;
    if (*v12 >= *v9) {
      size_t v20 = *v9;
    }
    else {
      size_t v20 = *v12;
    }
    if (v20 && (BOOL result = (size_t **)memcmp(v9 + 2, v12 + 2, v20), result))
    {
      if ((result & 0x80000000) == 0) {
        return result;
      }
    }
    else if (v18 >= v19)
    {
      return result;
    }
  }
  else if (v15)
  {
    return result;
  }
  *a3 = v9;
  *a4 = v12;
  BOOL v21 = *a3;
  size_t v22 = (*a3)[1];
  int v23 = *(_DWORD *)(v22 + 80);
  size_t v24 = *a2;
  size_t v25 = (*a2)[1];
  int v26 = *(_DWORD *)(v25 + 80);
  BOOL v27 = v23 <= v26;
  if (v23 == v26 && (v28 = *(_DWORD *)(v22 + 84), v29 = *(_DWORD *)(v25 + 84), BOOL v27 = v28 <= v29, v28 == v29))
  {
    size_t v30 = *v21;
    size_t v31 = *v24;
    if (*v24 >= *v21) {
      size_t v32 = *v21;
    }
    else {
      size_t v32 = *v24;
    }
    if (v32 && (BOOL result = (size_t **)memcmp(v21 + 2, v24 + 2, v32), result))
    {
      if ((result & 0x80000000) == 0) {
        return result;
      }
    }
    else if (v30 >= v31)
    {
      return result;
    }
  }
  else if (v27)
  {
    return result;
  }
  *a2 = v21;
  *a3 = v24;
  size_t v33 = *a2;
  size_t v34 = (*a2)[1];
  int v35 = *(_DWORD *)(v34 + 80);
  int v36 = *a1;
  size_t v37 = (*a1)[1];
  int v38 = *(_DWORD *)(v37 + 80);
  BOOL v39 = v35 <= v38;
  if (v35 != v38 || (v40 = *(_DWORD *)(v34 + 84), v41 = *(_DWORD *)(v37 + 84), BOOL v39 = v40 <= v41, v40 != v41))
  {
    if (v39) {
      return result;
    }
    goto LABEL_31;
  }
  size_t v42 = *v33;
  size_t v43 = *v36;
  if (*v36 >= *v33) {
    size_t v44 = *v33;
  }
  else {
    size_t v44 = *v36;
  }
  if (v44)
  {
    BOOL result = (size_t **)memcmp(v33 + 2, v36 + 2, v44);
    if (result)
    {
      if ((result & 0x80000000) == 0) {
        return result;
      }
      goto LABEL_31;
    }
  }
  if (v42 < v43)
  {
LABEL_31:
    *a1 = v33;
    *a2 = v36;
  }
  return result;
}

uint64_t sub_1CC019620()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v3 = 0;
  uint64_t v4 = &v3;
  v5[0] = v6;
  v6[0] = "basic";
  v6[1] = 5;
  int v7 = 1;
  int v8 = "basic statistics";
  uint64_t v9 = 16;
  size_t v10 = "verbose";
  uint64_t v11 = 7;
  int v12 = 2;
  size_t v13 = "printing of statistics for each inlined function";
  uint64_t v14 = 48;
  v5[1] = (void *)0x400000002;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Enable inliner stats for imported functions";
  v1.n128_u64[1] = 43;
  sub_1CD4937E4(&v4, (uint64_t)v5, &v2, &v1);
  if (v5[0] != v6) {
    free(v5[0]);
  }
  return __cxa_atexit((void (*)(void *))sub_1CD49298C, &InlinerFunctionImportStats, &dword_1CB82C000);
}

void llvm::ICallPromotionAnalysis::ICallPromotionAnalysis(llvm::ICallPromotionAnalysis *this)
{
  *(void *)this = 0;
  operator new[]();
}

BOOL llvm::ICallPromotionAnalysis::isPromotionProfitable(llvm::ICallPromotionAnalysis *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 100 * a2 >= (unint64_t)dword_1EBD03760 * a4
      && 100 * a2 >= (unint64_t)dword_1EBD03820 * a3;
}

uint64_t llvm::ICallPromotionAnalysis::getProfitablePromotionCandidates(void *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= dword_1EBD038E0) {
    uint64_t result = dword_1EBD038E0;
  }
  else {
    uint64_t result = a3;
  }
  if (result)
  {
    uint64_t v6 = 0;
    unint64_t v7 = dword_1EBD03820 * a4;
    int v8 = (uint64_t *)(*a1 + 8);
    while (1)
    {
      uint64_t v10 = *v8;
      v8 += 2;
      uint64_t v9 = v10;
      unint64_t v11 = 100 * v10;
      if (100 * v10 < a4 * (unint64_t)dword_1EBD03760 || v11 < v7) {
        break;
      }
      a4 -= v9;
      if (result == ++v6) {
        return result;
      }
    }
    return v6;
  }
  return result;
}

uint64_t sub_1CC019864()
{
  BOOL v5 = &v4;
  int v3 = 1;
  int v4 = 30;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"The percentage threshold against remaining unpromoted indirect call count for the promotion";
  v1.n128_u64[1] = 91;
  sub_1CD494264(&v5, &v3, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBD036E0, &dword_1CB82C000);
  int v3 = 1;
  int v4 = 5;
  BOOL v5 = &v4;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"The percentage threshold against total count for the promotion";
  v1.n128_u64[1] = 62;
  sub_1CD4943F8((llvm::cl::Option *)&unk_1EBD037A0, "icp-total-percent-threshold", &v5, &v3, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBD037A0, &dword_1CB82C000);
  int v3 = 1;
  int v4 = 3;
  BOOL v5 = &v4;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Max number of promotions for a single indirect call callsite";
  v1.n128_u64[1] = 60;
  sub_1CD494588(&v5, &v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBD03860, &dword_1CB82C000);
}

uint64_t llvm::getStringFnAttrAsInt(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  if (!v5) {
    goto LABEL_9;
  }
  if (!*(_DWORD *)(v5 + 8)) {
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(v5 + 40);
  if (!v6) {
    goto LABEL_9;
  }
  int v7 = *(_DWORD *)(v6 + 40);
  if (!v7) {
    goto LABEL_9;
  }
  uint64_t v8 = *(void *)(v6 + 24);
  int v9 = sub_1CD0B03C8(a2, (uint64_t)a2 + a3);
  unsigned int v11 = v7 - 1;
  for (int i = 1; ; ++i)
  {
    int v13 = v9 & v11;
    uint64_t v14 = v8 + 24 * (v9 & v11);
    uint64_t v15 = *(const void **)v14;
    if (*(void *)v14 == -1)
    {
      if (a2 == (void *)-1) {
        goto LABEL_17;
      }
      goto LABEL_8;
    }
    if (v15 != (const void *)-2) {
      break;
    }
    if (a2 == (void *)-2) {
      goto LABEL_17;
    }
LABEL_8:
    if (v15 == (const void *)-1) {
      goto LABEL_9;
    }
    int v9 = i + v13;
  }
  if (a3 != *(void *)(v14 + 8) || a3 && memcmp(a2, *(const void **)v14, a3)) {
    goto LABEL_8;
  }
LABEL_17:
  uint64_t v20 = *(void *)(v14 + 16);
  if (!v20) {
LABEL_9:
  }
    llvm::CallBase::getFnAttrOnCalledFunction<llvm::StringRef>();
  uint64_t v16 = *(unsigned int *)(v20 + 16);
  uint64_t v17 = v20 + *(unsigned int *)(v20 + 12) + 25;
  unint64_t v21 = 0;
  uint64_t v22 = v17;
  uint64_t v23 = v16;
  char v18 = llvm::consumeSignedInteger((llvm *)&v22, (llvm::StringRef *)0xA, &v21, v10);
  uint64_t result = 0;
  if ((v18 & 1) == 0 && !v23)
  {
    if (v21 == (int)v21) {
      return v21 | 0x100000000;
    }
    else {
      return 0;
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CC019B10(llvm *a1)
{
  int v2 = llvm::dbgs(a1);

  return sub_1CC019B4C((uint64_t)a1, v2);
}

llvm::raw_ostream *sub_1CC019B4C(uint64_t a1, llvm::raw_ostream *this)
{
  if (byte_1EBCC57B0) {
    llvm::Function::print(*(const llvm::Module ***)(a1 + 56), this, (llvm::AssemblyAnnotationWriter *)(a1 + 752), 0, 0);
  }
  int v4 = (void *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v4 > 0x16uLL)
  {
    qmemcpy(v4, "      NumConstantArgs: ", 23);
    *((void *)this + 4) += 23;
  }
  else
  {
    llvm::raw_ostream::write(this, "      NumConstantArgs: ", 0x17uLL);
  }
  sub_1CD098D14(this, *(unsigned int *)(a1 + 568), 0, 0, 0);
  uint64_t v5 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v5)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
    uint64_t v6 = (void *)*((void *)this + 4);
  }
  else
  {
    unsigned char *v5 = 10;
    uint64_t v6 = (void *)(*((void *)this + 4) + 1);
    *((void *)this + 4) = v6;
  }
  if (*((void *)this + 3) - (void)v6 > 0x1FuLL)
  {
    qmemcpy(v6, "      NumConstantOffsetPtrArgs: ", 32);
    *((void *)this + 4) += 32;
  }
  else
  {
    llvm::raw_ostream::write(this, "      NumConstantOffsetPtrArgs: ", 0x20uLL);
  }
  sub_1CD098D14(this, *(unsigned int *)(a1 + 572), 0, 0, 0);
  int v7 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v7)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
    uint64_t v8 = (void *)*((void *)this + 4);
  }
  else
  {
    unsigned char *v7 = 10;
    uint64_t v8 = (void *)(*((void *)this + 4) + 1);
    *((void *)this + 4) = v8;
  }
  if (*((void *)this + 3) - (void)v8 > 0x14uLL)
  {
    qmemcpy(v8, "      NumAllocaArgs: ", 21);
    *((void *)this + 4) += 21;
  }
  else
  {
    llvm::raw_ostream::write(this, "      NumAllocaArgs: ", 0x15uLL);
  }
  sub_1CD098D14(this, *(unsigned int *)(a1 + 576), 0, 0, 0);
  int v9 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v9)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
    uint64_t v10 = (void *)*((void *)this + 4);
  }
  else
  {
    *int v9 = 10;
    uint64_t v10 = (void *)(*((void *)this + 4) + 1);
    *((void *)this + 4) = v10;
  }
  if (*((void *)this + 3) - (void)v10 > 0x19uLL)
  {
    qmemcpy(v10, "      NumConstantPtrCmps: ", 26);
    *((void *)this + 4) += 26;
  }
  else
  {
    llvm::raw_ostream::write(this, "      NumConstantPtrCmps: ", 0x1AuLL);
  }
  sub_1CD098D14(this, *(unsigned int *)(a1 + 580), 0, 0, 0);
  unsigned int v11 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v11)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
    int v12 = (void *)*((void *)this + 4);
  }
  else
  {
    unsigned char *v11 = 10;
    int v12 = (void *)(*((void *)this + 4) + 1);
    *((void *)this + 4) = v12;
  }
  if (*((void *)this + 3) - (void)v12 > 0x1AuLL)
  {
    qmemcpy(v12, "      NumConstantPtrDiffs: ", 27);
    *((void *)this + 4) += 27;
  }
  else
  {
    llvm::raw_ostream::write(this, "      NumConstantPtrDiffs: ", 0x1BuLL);
  }
  sub_1CD098D14(this, *(unsigned int *)(a1 + 584), 0, 0, 0);
  int v13 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v13)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
    uint64_t v14 = (void *)*((void *)this + 4);
  }
  else
  {
    *int v13 = 10;
    uint64_t v14 = (void *)(*((void *)this + 4) + 1);
    *((void *)this + 4) = v14;
  }
  if (*((void *)this + 3) - (void)v14 > 0x20uLL)
  {
    qmemcpy(v14, "      NumInstructionsSimplified: ", 33);
    *((void *)this + 4) += 33;
  }
  else
  {
    llvm::raw_ostream::write(this, "      NumInstructionsSimplified: ", 0x21uLL);
  }
  sub_1CD098D14(this, *(unsigned int *)(a1 + 588), 0, 0, 0);
  uint64_t v15 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v15)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
    uint64_t v16 = (void *)*((void *)this + 4);
  }
  else
  {
    *uint64_t v15 = 10;
    uint64_t v16 = (void *)(*((void *)this + 4) + 1);
    *((void *)this + 4) = v16;
  }
  if (*((void *)this + 3) - (void)v16 > 0x16uLL)
  {
    qmemcpy(v16, "      NumInstructions: ", 23);
    *((void *)this + 4) += 23;
  }
  else
  {
    llvm::raw_ostream::write(this, "      NumInstructions: ", 0x17uLL);
  }
  sub_1CD098D14(this, *(unsigned int *)(a1 + 112), 0, 0, 0);
  uint64_t v17 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v17)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
    char v18 = (void *)*((void *)this + 4);
  }
  else
  {
    *uint64_t v17 = 10;
    char v18 = (void *)(*((void *)this + 4) + 1);
    *((void *)this + 4) = v18;
  }
  if (*((void *)this + 3) - (void)v18 > 0x16uLL)
  {
    qmemcpy(v18, "      SROACostSavings: ", 23);
    *((void *)this + 4) += 23;
  }
  else
  {
    llvm::raw_ostream::write(this, "      SROACostSavings: ", 0x17uLL);
  }
  sub_1CD098D14(this, *(unsigned int *)(a1 + 716), 0, 0, 0);
  size_t v19 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v19)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
    uint64_t v20 = (void *)*((void *)this + 4);
  }
  else
  {
    *size_t v19 = 10;
    uint64_t v20 = (void *)(*((void *)this + 4) + 1);
    *((void *)this + 4) = v20;
  }
  if (*((void *)this + 3) - (void)v20 > 0x1AuLL)
  {
    qmemcpy(v20, "      SROACostSavingsLost: ", 27);
    *((void *)this + 4) += 27;
  }
  else
  {
    llvm::raw_ostream::write(this, "      SROACostSavingsLost: ", 0x1BuLL);
  }
  sub_1CD098D14(this, *(unsigned int *)(a1 + 720), 0, 0, 0);
  unint64_t v21 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v21)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
    uint64_t v22 = (void *)*((void *)this + 4);
  }
  else
  {
    *unint64_t v21 = 10;
    uint64_t v22 = (void *)(*((void *)this + 4) + 1);
    *((void *)this + 4) = v22;
  }
  if (*((void *)this + 3) - (void)v22 > 0x1AuLL)
  {
    qmemcpy(v22, "      LoadEliminationCost: ", 27);
    *((void *)this + 4) += 27;
  }
  else
  {
    llvm::raw_ostream::write(this, "      LoadEliminationCost: ", 0x1BuLL);
  }
  unint64_t v23 = *(int *)(a1 + 600);
  if ((v23 & 0x80000000) != 0)
  {
    unint64_t v23 = -(uint64_t)v23;
    size_t v24 = this;
    int v25 = 1;
  }
  else
  {
    size_t v24 = this;
    int v25 = 0;
  }
  sub_1CD098D14(v24, v23, 0, 0, v25);
  int v26 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v26)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
    BOOL v27 = (void *)*((void *)this + 4);
  }
  else
  {
    *int v26 = 10;
    BOOL v27 = (void *)(*((void *)this + 4) + 1);
    *((void *)this + 4) = v27;
  }
  if (*((void *)this + 3) - (void)v27 > 0x1EuLL)
  {
    qmemcpy(v27, "      ContainsNoDuplicateCall: ", 31);
    *((void *)this + 4) += 31;
  }
  else
  {
    llvm::raw_ostream::write(this, "      ContainsNoDuplicateCall: ", 0x1FuLL);
  }
  sub_1CD098D14(this, *(unsigned __int8 *)(a1 + 92), 0, 0, 0);
  int v28 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v28)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
    uint64_t v29 = *((void *)this + 4);
  }
  else
  {
    *int v28 = 10;
    uint64_t v29 = *((void *)this + 4) + 1;
    *((void *)this + 4) = v29;
  }
  if ((unint64_t)(*((void *)this + 3) - v29) > 0xB)
  {
    *(_DWORD *)(v29 + 8) = 540701811;
    *(void *)uint64_t v29 = *(void *)"      Cost: ";
    *((void *)this + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(this, "      Cost: ", 0xCuLL);
  }
  unint64_t v30 = *(int *)(a1 + 656);
  if ((v30 & 0x80000000) != 0)
  {
    unint64_t v30 = -(uint64_t)v30;
    size_t v31 = this;
    int v32 = 1;
  }
  else
  {
    size_t v31 = this;
    int v32 = 0;
  }
  sub_1CD098D14(v31, v30, 0, 0, v32);
  size_t v33 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v33)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
    uint64_t v34 = *((void *)this + 4);
  }
  else
  {
    *size_t v33 = 10;
    uint64_t v34 = *((void *)this + 4) + 1;
    *((void *)this + 4) = v34;
  }
  if ((unint64_t)(*((void *)this + 3) - v34) > 0x10)
  {
    *(unsigned char *)(v34 + 16) = 32;
    *(_OWORD *)uint64_t v34 = *(_OWORD *)"      Threshold: ";
    *((void *)this + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(this, "      Threshold: ", 0x11uLL);
  }
  unint64_t v35 = *(int *)(a1 + 648);
  if ((v35 & 0x80000000) != 0)
  {
    unint64_t v35 = -(uint64_t)v35;
    int v36 = this;
    int v37 = 1;
  }
  else
  {
    int v36 = this;
    int v37 = 0;
  }
  uint64_t result = sub_1CD098D14(v36, v35, 0, 0, v37);
  BOOL v39 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v39)
  {
    return llvm::raw_ostream::write(this, "\n", 1uLL);
  }
  else
  {
    *BOOL v39 = 10;
    ++*((void *)this + 4);
  }
  return result;
}

uint64_t llvm::getCallsiteCost(llvm *this, llvm::CallBase *a2, const llvm::DataLayout *a3)
{
  int v5 = *((unsigned __int8 *)this + 16);
  if (v5 == 84)
  {
    uint64_t v6 = 0;
  }
  else if (v5 == 39)
  {
    uint64_t v6 = (*((_DWORD *)this + 20) + 1);
  }
  else
  {
    uint64_t v6 = 2;
  }
  uint64_t v7 = 0;
  int v8 = *((_DWORD *)this + 5);
  uint64_t v9 = -(uint64_t)(v8 & 0x7FFFFFF);
  if (v8 < 0)
  {
    size_t v24 = (char *)this - 32 * (v8 & 0x7FFFFFF);
    uint64_t v25 = *((void *)v24 - 1);
    if ((v25 & 0xFFFFFFFF0) != 0) {
      uint64_t v7 = (*((_DWORD *)v24 - 3) - *(_DWORD *)&v24[-v25]);
    }
    else {
      uint64_t v7 = 0;
    }
  }
  unint64_t v10 = -32 * v6 - 32 * v7 - 32 * v9 - 32;
  if ((v10 & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = (v10 >> 5);
    uint64_t v14 = this;
    do
    {
      if (llvm::CallBase::paramHasAttr((uint64_t)this, v11, 69))
      {
        int v27 = v12;
        int v26 = v14;
        uint64_t v18 = **((void **)v14 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
        uint64_t v19 = sub_1CD49471C((uint64_t)this, v11);
        int v21 = sub_1CB83544C((uint64_t)a2, v19);
        if (v20 == 1) {
        uint64_t PointerAlignElem = llvm::DataLayout::getPointerAlignElem(a2, *(_DWORD *)(v18 + 8) >> 8);
        }
        unsigned int v23 = (v21 + *(_DWORD *)(PointerAlignElem + 4) - 1) / *(_DWORD *)(PointerAlignElem + 4);
        if (v23 >= 8) {
          unsigned int v23 = 8;
        }
        int v15 = 10 * v23;
        int v12 = v27;
        uint64_t v14 = v26;
      }
      else
      {
        int v15 = 5;
      }
      v12 += v15;
      ++v11;
      uint64_t v14 = (llvm *)((char *)v14 + 32);
    }
    while (v13 != v11);
    int v16 = v12 + 5;
  }
  else
  {
    int v16 = 5;
  }
  return (dword_1EBCC5C30 + v16);
}

llvm::APInt *llvm::getInlineCost@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, llvm::BasicBlock *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(uint64_t, const llvm::Function *)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18 = *(void *)(a1 - 32);
  if (!v18 || *(unsigned char *)(v18 + 16) || *(void *)(v18 + 24) != *(void *)(a1 + 72)) {
    uint64_t v18 = 0;
  }
  return llvm::getInlineCost(a1, v18, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

llvm::APInt *llvm::getInlineCost@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, llvm::BasicBlock *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(uint64_t, const llvm::Function *)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  AttributeBasedInliningDecision = (llvm::APInt *)llvm::getAttributeBasedInliningDecision(a1, a2, a4, a7, a8);
  if (!v22)
  {
    sub_1CC01A920((uint64_t)v37, a2, a1, a3, (uint64_t)a4, a5, a6, v21, a10, a11, a12, a13, 1, 0);
    unsigned int v23 = sub_1CC01AA4C(v37);
    if (v41)
    {
      if (v23)
      {
        v33[0] = 0;
        char v34 = 0;
        if (v43)
        {
          sub_1CD494F9C((llvm::APInt *)v33, (llvm::APInt *)v42);
          char v34 = 1;
        }
        sub_1CC01CBE0((llvm::APInt *)"cost over benefit", (llvm::APInt *)v33, a9);
        if (!v34) {
          return (llvm::APInt *)sub_1CC01BFF8((uint64_t)v37);
        }
        uint64_t v25 = &v34;
        int v28 = v33;
      }
      else
      {
        v35[0] = 0;
        char v36 = 0;
        if (v43)
        {
          sub_1CD494F9C((llvm::APInt *)v35, (llvm::APInt *)v42);
          char v36 = 1;
        }
        sub_1CC01CB38((llvm::APInt *)"benefit over cost", (llvm::APInt *)v35, a9);
        if (!v36) {
          return (llvm::APInt *)sub_1CC01BFF8((uint64_t)v37);
        }
        uint64_t v25 = &v36;
        int v28 = v35;
      }
    }
    else
    {
      if (v40)
      {
        int v24 = v38;
        *(_DWORD *)a9 = v39;
        *(_DWORD *)(a9 + 4) = v24;
        *(void *)(a9 + 8) = 0;
        *(unsigned char *)(a9 + 16) = 0;
        uint64_t v25 = (char *)(a9 + 48);
LABEL_5:
        *uint64_t v25 = 0;
        return (llvm::APInt *)sub_1CC01BFF8((uint64_t)v37);
      }
      if (v23)
      {
        v29[0] = 0;
        char v30 = 0;
        sub_1CC01CBE0((llvm::APInt *)v23, (llvm::APInt *)v29, a9);
        if (!v30) {
          return (llvm::APInt *)sub_1CC01BFF8((uint64_t)v37);
        }
        uint64_t v25 = &v30;
        int v28 = v29;
      }
      else
      {
        v31[0] = 0;
        char v32 = 0;
        sub_1CC01CB38((llvm::APInt *)"empty function", (llvm::APInt *)v31, a9);
        if (!v32) {
          return (llvm::APInt *)sub_1CC01BFF8((uint64_t)v37);
        }
        uint64_t v25 = &v32;
        int v28 = v31;
      }
    }
    sub_1CD494A40((uint64_t)v28);
    goto LABEL_5;
  }
  if (AttributeBasedInliningDecision)
  {
    v44[0] = 0;
    char v45 = 0;
    uint64_t result = sub_1CC01CBE0(AttributeBasedInliningDecision, (llvm::APInt *)v44, a9);
    if (v45)
    {
      int v27 = v44;
      return (llvm::APInt *)sub_1CD494A40((uint64_t)v27);
    }
  }
  else
  {
    v46[0] = 0;
    char v47 = 0;
    uint64_t result = sub_1CC01CB38((llvm::APInt *)"always inline attribute", (llvm::APInt *)v46, a9);
    if (v47)
    {
      int v27 = v46;
      return (llvm::APInt *)sub_1CD494A40((uint64_t)v27);
    }
  }
  return result;
}

uint64_t llvm::getInliningCostEstimate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  memset(v13, 0, sizeof(v13));
  int v14 = 16843009;
  __int16 v15 = 256;
  sub_1CC01A920((uint64_t)v11, *(void *)(a1 - 32), a1, (uint64_t)v13, a2, a3, a4, a8, a5, a6, a7, a8, 1, 1);
  int v8 = sub_1CC01AA4C(v11);
  uint64_t v9 = v12;
  sub_1CC01BFF8((uint64_t)v11);
  if (v8) {
    return 0;
  }
  else {
    return v9 | 0x100000000;
  }
}

double sub_1CC01A920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char a14)
{
  sub_1CC01D2F0(a1, a2, a3, a5, a6, a7, a9, a10, a11, a12);
  *(void *)uint64_t v15 = &unk_1F26043B8;
  *(_DWORD *)(v15 + 592) = 2147483641;
  char v16 = 1;
  if (!byte_1EBD03EE0)
  {
    if (a12) {
      BOOL v17 = 0;
    }
    else {
      BOOL v17 = *(unsigned char *)(a4 + 61) == 0;
    }
    char v16 = !v17;
  }
  *(unsigned char *)(v15 + 596) = v16;
  double result = 0.0;
  *(void *)(v15 + 600) = 0;
  *(_DWORD *)(v15 + 608) = 0;
  *(void *)(v15 + 616) = a4;
  *(_OWORD *)(v15 + 624) = 0u;
  *(_DWORD *)(v15 + 640) = 0;
  *(_DWORD *)(v15 + 648) = *(_DWORD *)a4;
  *(unsigned char *)(v15 + 652) = a13;
  *(unsigned char *)(v15 + 653) = a14;
  *(unsigned char *)(v15 + 654) = 0;
  *(unsigned char *)(v15 + 672) = 0;
  *(unsigned char *)(v15 + 704) = 0;
  *(void *)(v15 + 662) = 0;
  *(void *)(v15 + 656) = 0;
  *(unsigned char *)(v15 + 712) = 1;
  *(void *)(v15 + 716) = 0;
  *(_OWORD *)(v15 + 728) = 0u;
  *(_DWORD *)(v15 + 744) = 0;
  *(void *)(v15 + 752) = &unk_1F2604558;
  *(void *)(v15 + 760) = v15;
  *(unsigned char *)(v15 + 401) = *(unsigned char *)(a4 + 64);
  return result;
}

char *sub_1CC01AA4C(unsigned char *a1)
{
  __n128 v1 = a1;
  v205[34] = *MEMORY[0x1E4F143B8];
  int v2 = (char *)(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 64))(a1);
  if (v2) {
    return v2;
  }
  uint64_t v4 = *((void *)v1 + 7);
  if (*(void *)(v4 + 72) == v4 + 72) {
    return 0;
  }
  uint64_t v5 = *((void *)v1 + 10);
  uint64_t v6 = *(void *)(*(void *)(v5 + 40) + 56);
  uint64_t v7 = *(void *)(v6 + 8);
  if (v7)
  {
    while (1)
    {
      uint64_t v8 = *(void *)(v7 + 24);
      unsigned int v9 = *(unsigned __int8 *)(v8 + 16);
      if (v9 >= 0x1C)
      {
        unsigned int v10 = v9 - 33;
        BOOL v20 = v10 > 0x33;
        uint64_t v11 = (1 << v10) & 0x8000000000041;
        BOOL v12 = v20 || v11 == 0;
        if (!v12 && *(void *)(*(void *)(v8 + 40) + 56) == v6) {
          break;
        }
      }
      uint64_t v7 = *(void *)(v7 + 8);
      if (!v7) {
        goto LABEL_15;
      }
    }
    v1[88] = 1;
  }
LABEL_15:
  int v13 = *(_DWORD *)(v5 + 20);
  if (*(_WORD *)(v4 + 18))
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)v4);
    uint64_t v14 = *(void *)(v4 + 88);
    if (*(_WORD *)(v4 + 18))
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v4);
      uint64_t v15 = *(void *)(v4 + 88);
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v14 = *(void *)(v4 + 88);
  }
  uint64_t v15 = v14;
LABEL_18:
  uint64_t v16 = v15 + 40 * *(void *)(v4 + 96);
  if (v14 == v16) {
    goto LABEL_132;
  }
  BOOL v17 = (uint64_t *)(v1 + 120);
  BOOL v162 = (uint64_t *)(v1 + 144);
  uint64_t v163 = (uint64_t)(v1 + 192);
  uint64_t v161 = (uint64_t)(v1 + 168);
  uint64_t v18 = v5 - 32 * (v13 & 0x7FFFFFF);
  size_t v160 = v1;
  do
  {
    uint64_t v19 = *(unsigned char **)v18;
    if (*(void *)v18) {
      BOOL v20 = *(unsigned __int8 *)(*(void *)v18 + 16) > 0x14u;
    }
    else {
      BOOL v20 = 1;
    }
    if (!v20)
    {
      Successor = (void *)v14;
      sub_1CC01F644(v17, &Successor)[1] = v19;
      uint64_t v19 = *(unsigned char **)v18;
    }
    unsigned int v21 = *(_DWORD *)(*(void *)v19 + 8);
    if (v21 != 15) {
      goto LABEL_124;
    }
    if ((v21 & 0xFE) == 0x12) {
      unsigned int v21 = *(_DWORD *)(**(void **)(*(void *)v19 + 16) + 8);
    }
    uint64_t v22 = *((void *)v1 + 8);
    uint64_t v23 = *(void *)(v22 + 232);
    if (v21 < 0x100) {
      goto LABEL_37;
    }
    unsigned int v24 = v21 >> 8;
    unint64_t v25 = *(unsigned int *)(v22 + 240);
    uint64_t v26 = v23;
    if (v25)
    {
      uint64_t v26 = v23;
      unint64_t v27 = v25;
      do
      {
        unint64_t v28 = v27 >> 1;
        uint64_t v29 = v26 + 16 * (v27 >> 1);
        unsigned int v30 = *(_DWORD *)(v29 + 8);
        uint64_t v31 = v29 + 16;
        v27 += ~(v27 >> 1);
        if (v30 < v24) {
          uint64_t v26 = v31;
        }
        else {
          unint64_t v27 = v28;
        }
      }
      while (v27);
    }
    if (v26 == v23 + 16 * v25 || *(_DWORD *)(v26 + 8) != v24) {
LABEL_37:
    }
      uint64_t v26 = v23;
    LODWORD(v187) = *(_DWORD *)(v26 + 12);
    if (v187 > 0x40) {
      operator new[]();
    }
    v186 = 0;
    Successor = v202;
    size_t v199 = v202;
    int v201 = 0;
    uint64_t v200 = 0x100000004;
    v202[0] = v19;
    while (1)
    {
      while (1)
      {
LABEL_40:
        unsigned int v32 = v19[16];
        if (v32 == 62)
        {
LABEL_43:
          if ((v19[17] & 2) == 0 || !sub_1CC020094((uint64_t)v1, (uint64_t)v19, (uint64_t)&v186))
          {
            Splat = 0;
            goto LABEL_107;
          }
LABEL_48:
          int v34 = *((_DWORD *)v19 + 5);
          if ((v34 & 0x40000000) != 0) {
            unint64_t v35 = (unsigned char **)*((void *)v19 - 1);
          }
          else {
            unint64_t v35 = (unsigned char **)&v19[-32 * (v34 & 0x7FFFFFF)];
          }
          goto LABEL_54;
        }
        if (v32 == 5)
        {
          unsigned int v33 = *((unsigned __int16 *)v19 + 9);
          if (v33 == 34) {
            goto LABEL_43;
          }
        }
        else
        {
          unsigned int v33 = v32 - 28;
          if (v32 < 0x1C) {
            goto LABEL_50;
          }
        }
        if (v33 == 49) {
          goto LABEL_48;
        }
LABEL_50:
        if (v32 != 1 || (llvm::GlobalValue::isInterposable((llvm::GlobalValue *)v19) & 1) != 0) {
          goto LABEL_92;
        }
        unint64_t v35 = (unsigned char **)(v19 - 32);
LABEL_54:
        uint64_t v19 = *v35;
        char v36 = (char *)v199;
        uint64_t v37 = HIDWORD(v200);
        if (v199 == Successor) {
          break;
        }
        unsigned int v41 = v200;
LABEL_65:
        if (3 * v41 <= 4 * (HIDWORD(v200) - v201))
        {
          if (v41 >= 0x40) {
            v41 *= 2;
          }
          else {
            unsigned int v41 = 128;
          }
        }
        else if (v41 - HIDWORD(v200) >= v41 >> 3)
        {
          goto LABEL_67;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&Successor, v41);
        unsigned int v41 = v200;
        char v36 = (char *)v199;
LABEL_67:
        unsigned int v42 = v41 - 1;
        unsigned int v43 = (v41 - 1) & ((v19 >> 4) ^ (v19 >> 9));
        size_t v44 = &v36[8 * v43];
        char v45 = *(unsigned char **)v44;
        if (*(void *)v44 != -1)
        {
          int v46 = 0;
          int v47 = 1;
          while (v45 != v19)
          {
            if (v46) {
              BOOL v48 = 0;
            }
            else {
              BOOL v48 = v45 == (unsigned char *)-2;
            }
            if (v48) {
              int v46 = v44;
            }
            unsigned int v49 = v43 + v47++;
            unsigned int v43 = v49 & v42;
            size_t v44 = &v36[8 * (v49 & v42)];
            char v45 = *(unsigned char **)v44;
            if (*(void *)v44 == -1) {
              goto LABEL_79;
            }
          }
          goto LABEL_92;
        }
        int v46 = 0;
LABEL_79:
        if (v46) {
          size_t v50 = v46;
        }
        else {
          size_t v50 = v44;
        }
        if (*(unsigned char **)v50 == v19) {
          goto LABEL_92;
        }
        if (*(void *)v50 == -2) {
          --v201;
        }
        else {
          ++HIDWORD(v200);
        }
        *(void *)size_t v50 = v19;
      }
      if (HIDWORD(v200)) {
        break;
      }
LABEL_62:
      unsigned int v41 = v200;
      if (HIDWORD(v200) >= v200) {
        goto LABEL_65;
      }
      ++HIDWORD(v200);
      *((void *)v199 + v37) = v19;
    }
    int v38 = 0;
    uint64_t v39 = 8 * HIDWORD(v200);
    char v40 = v199;
    while ((unsigned char *)*v40 != v19)
    {
      if (*v40 == -2) {
        int v38 = v40;
      }
      ++v40;
      v39 -= 8;
      if (!v39)
      {
        if (!v38) {
          goto LABEL_62;
        }
        *int v38 = v19;
        --v201;
        goto LABEL_40;
      }
    }
LABEL_92:
    uint64_t v51 = *(void *)v19;
    unsigned int v52 = *(_DWORD *)(*(void *)v19 + 8);
    if ((v52 & 0xFE) == 0x12) {
      unsigned int v52 = *(_DWORD *)(**(void **)(v51 + 16) + 8);
    }
    uint64_t v53 = *((void *)v1 + 8);
    uint64_t v54 = *(void *)(v53 + 232);
    if (v52 < 0x100) {
      goto LABEL_103;
    }
    unsigned int v55 = v52 >> 8;
    unint64_t v56 = *(unsigned int *)(v53 + 240);
    uint64_t v57 = v54;
    if (v56)
    {
      uint64_t v57 = v54;
      unint64_t v58 = v56;
      do
      {
        unint64_t v59 = v58 >> 1;
        uint64_t v60 = v57 + 16 * (v58 >> 1);
        unsigned int v61 = *(_DWORD *)(v60 + 8);
        uint64_t v62 = v60 + 16;
        v58 += ~(v58 >> 1);
        if (v61 < v55) {
          uint64_t v57 = v62;
        }
        else {
          unint64_t v58 = v59;
        }
      }
      while (v58);
    }
    if (v57 == v54 + 16 * v56 || *(_DWORD *)(v57 + 8) != v55) {
LABEL_103:
    }
      uint64_t v57 = v54;
    int v63 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v51, (llvm::LLVMContext *)*(unsigned int *)(v57 + 12));
    size_t v65 = v63;
    if ((*(_DWORD *)(v51 + 8) & 0xFE) == 0x12)
    {
      size_t v73 = (llvm::Type *)*(unsigned int *)(v51 + 32);
      if (*(_DWORD *)(v51 + 8) == 19) {
        llvm::ScalableVectorType::get(v63, v73);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v63, v73);
      }
      size_t v65 = v74;
      __n128 v1 = v160;
    }
    Splat = llvm::ConstantInt::get((llvm::ConstantInt *)*v65, (llvm::LLVMContext *)&v186, v64);
    if ((v65[1] & 0xFE) == 0x12) {
      Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v65 + 8) | ((unint64_t)(*((_DWORD *)v65 + 2) == 19) << 32)), (uint64_t)Splat);
    }
LABEL_107:
    if (v199 != Successor) {
      free(v199);
    }
    if (v187 >= 0x41 && v186) {
      MEMORY[0x1D25D9CB0](v186, 0x1000C8000313F17);
    }
    if (Splat)
    {
      unsigned int v67 = Splat[8];
      if (v67 > 0x40) {
        operator new[]();
      }
      uint64_t v68 = *((void *)Splat + 3);
      Successor = (void *)v14;
      uint64_t v69 = sub_1CC0206AC(v163, (uint64_t *)&Successor);
      uint64_t v70 = v69;
      *(void *)(v69 + 8) = v19;
      if (*(_DWORD *)(v69 + 24) >= 0x41u)
      {
        uint64_t v71 = *(void *)(v69 + 16);
        if (v71) {
          MEMORY[0x1D25D9CB0](v71, 0x1000C8000313F17);
        }
      }
      *(void *)(v70 + 16) = v68;
      *(_DWORD *)(v70 + 24) = v67;
      if (v19[16] == 59) {
        size_t v72 = v19;
      }
      else {
        size_t v72 = 0;
      }
      v186 = v72;
      if (v72)
      {
        Successor = (void *)v14;
        sub_1CC020864(v162, &Successor)[1] = v72;
        (*(void (**)(unsigned char *, const char *))(*(void *)v1 + 176))(v1, v186);
        sub_1CC020978(v161, (uint64_t *)&v186, (uint64_t)&Successor);
      }
    }
LABEL_124:
    v18 += 32;
    v14 += 40;
  }
  while (v14 != v16);
LABEL_132:
  *((_DWORD *)v1 + 142) = *((_DWORD *)v1 + 32);
  *((_DWORD *)v1 + 143) = *((_DWORD *)v1 + 50);
  *((_DWORD *)v1 + 144) = *((_DWORD *)v1 + 38);
  size_t v165 = v169;
  size_t v166 = v169;
  uint64_t v167 = 32;
  int v168 = 0;
  uint64_t v75 = *((void *)v1 + 7);
  int v76 = (llvm::AssumptionCache *)(*((uint64_t (**)(void, uint64_t))v1 + 2))(*((void *)v1 + 3), v75);
  llvm::CodeMetrics::collectEphemeralValues(v75, v76, (llvm::SmallPtrSetImplBase *)&v165);
  size_t v178 = v182;
  int v179 = v182;
  uint64_t v180 = 16;
  int v181 = 0;
  size_t v183 = v185;
  uint64_t v184 = 0x1000000000;
  uint64_t v77 = *(void *)(*((void *)v1 + 7) + 80);
  if (v77) {
    uint64_t v78 = v77 - 24;
  }
  else {
    uint64_t v78 = 0;
  }
  Successor = (void *)v78;
  sub_1CC01FA34((llvm::SmallPtrSetImplBase *)&v178, (uint64_t *)&Successor);
  if (!v184)
  {
LABEL_261:
    size_t v128 = (llvm::Constant *)*((void *)v1 + 7);
    if ((*((_DWORD *)v128 + 8) & 0xFu) - 7 <= 1 && llvm::Constant::hasNLiveUses(v128, 1u))
    {
      uint64_t v129 = *((void *)v1 + 10);
      uint64_t v130 = *(void *)(v129 - 32);
      if (!v130 || *(unsigned char *)(v130 + 16) || *(void *)(v130 + 24) != *(void *)(v129 + 72)) {
        uint64_t v130 = 0;
      }
      if (*((void *)v1 + 7) == v130) {
        goto LABEL_270;
      }
    }
    if (!v1[92]) {
LABEL_270:
    }
      int v2 = (char *)(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 48))(v1);
    else {
      int v2 = "noduplicate";
    }
    goto LABEL_283;
  }
  uint64_t v79 = 0;
  int v80 = 0;
  int v81 = (uint64_t ***)(v1 + 120);
  int v2 = "blockaddress used outside of callbr";
  while (2)
  {
    if ((*(uint64_t (**)(unsigned char *))(*(void *)v1 + 56))(v1)) {
      goto LABEL_261;
    }
    int v164 = 0;
    int v164 = (llvm::Function *)*((void *)v183 + v79);
    if (*((llvm::Function **)v164 + 5) == (llvm::Function *)((char *)v164 + 40))
    {
LABEL_235:
      uint64_t v79 = (v80 + 1);
      int v80 = v79;
      if (v184 == v79) {
        goto LABEL_261;
      }
      continue;
    }
    break;
  }
  (*(void (**)(unsigned char *))(*(void *)v1 + 16))(v1);
  if ((*((_WORD *)v164 + 9) & 0x7FFF) != 0)
  {
    for (uint64_t i = *((void *)llvm::BlockAddress::get(*((llvm::BlockAddress **)v164 + 7), v164, v82) + 1);
          i;
          uint64_t i = *(void *)(i + 8))
    {
      if (*(unsigned char *)(*(void *)(i + 24) + 16) != 39) {
        goto LABEL_283;
      }
    }
  }
  int v83 = v164;
  size_t v84 = (char *)v164 + 40;
  size_t v85 = (char *)*((void *)v164 + 6);
  if (v85 == (char *)v164 + 40)
  {
LABEL_194:
    size_t v102 = (llvm::Function *)*((void *)v83 + 5);
    if (v102 == (llvm::Function *)((char *)v83 + 40))
    {
      size_t v103 = 0;
    }
    else
    {
      size_t v103 = (char *)v102 - 24;
      BOOL v104 = v102 == 0;
      if (v104) {
        int v105 = 0;
      }
      else {
        int v105 = v103;
      }
      unsigned int v106 = v105[16] - 40;
      if (v106 >= 0xFFFFFFF5) {
        size_t v84 = v105;
      }
      else {
        size_t v84 = 0;
      }
      int v107 = v84[16];
      if (v106 < 0xFFFFFFF5) {
        BOOL v104 = 1;
      }
      if (v107 != 30 || v104)
      {
        char v111 = v107 != 31 || v104;
        if ((v111 & 1) == 0)
        {
          int v112 = *((_DWORD *)v84 + 5);
          int v113 = (v112 & 0x40000000) != 0 ? (uint64_t *)*((void *)v84 - 1) : (uint64_t *)&v84[-32 * (v112 & 0x7FFFFFF)];
          Successor = (void *)*v113;
          v186 = 0;
          if (sub_1CC01F5A8((uint64_t *)v1 + 15, &Successor, &v186))
          {
            uint64_t v115 = *((void *)v186 + 1);
            if (v115)
            {
              if (*(unsigned char *)(v115 + 16) == 16)
              {
                Successor = 0;
                sub_1CC025540((uint64_t)v84, v115);
                int v117 = *((_DWORD *)v84 + 5);
                if ((v117 & 0x40000000) != 0) {
                  int v118 = (char *)*((void *)v84 - 1);
                }
                else {
                  int v118 = &v84[-32 * (v117 & 0x7FFFFFF)];
                }
                if (v116 == 4294967294) {
                  uint64_t v121 = 1;
                }
                else {
                  uint64_t v121 = (2 * v116 + 3);
                }
                uint64_t v122 = *(void *)&v118[32 * v121];
LABEL_256:
                Successor = (void *)v122;
                sub_1CC01FA34((llvm::SmallPtrSetImplBase *)&v178, (uint64_t *)&Successor);
                sub_1CC025000((uint64_t *)v1 + 47, &v164)[1] = v122;
                sub_1CC01FC00((uint64_t)v1, (uint64_t)v164, v122);
                goto LABEL_235;
              }
            }
          }
        }
      }
      else if ((*((_DWORD *)v84 + 5) & 0x7FFFFFF) == 3)
      {
        Successor = (void *)*((void *)v84 - 12);
        v186 = 0;
        if (sub_1CC01F5A8((uint64_t *)v1 + 15, &Successor, &v186))
        {
          uint64_t v108 = *((void *)v186 + 1);
          if (v108)
          {
            if (*(unsigned char *)(v108 + 16) == 16)
            {
              uint64_t v109 = *(unsigned int *)(v108 + 32);
              if (v109 > 0x40)
              {
                int v123 = 0;
                int64_t v124 = (unint64_t)(v109 + 63) >> 6;
                do
                {
                  BOOL v20 = v124-- < 1;
                  if (v20) {
                    break;
                  }
                  unint64_t v125 = *(void *)(*(void *)(v108 + 24) + 8 * v124);
                  v123 += __clz(v125);
                }
                while (!v125);
                int v126 = v109 | 0xFFFFFFC0;
                if ((v109 & 0x3F) == 0) {
                  int v126 = 0;
                }
                BOOL v110 = v123 + v126 == v109;
              }
              else
              {
                BOOL v110 = *(void *)(v108 + 24) == 0;
              }
              uint64_t v127 = v110;
              uint64_t v122 = *(void *)&v84[32 * (v127 << 63 >> 63) - 32];
              goto LABEL_256;
            }
          }
        }
      }
    }
    if (v103[16] == 30)
    {
      if ((*((_DWORD *)v103 + 5) & 0x7FFFFFF) == 3) {
        LODWORD(v119) = 2;
      }
      else {
        LODWORD(v119) = 1;
      }
    }
    else
    {
      uint64_t v119 = 2;
      switch(v103[16])
      {
        case 30:
          __break(1u);
          goto LABEL_353;
        case 31:
          LODWORD(v119) = (*((_DWORD *)v103 + 5) >> 1) & 0x3FFFFFF;
          break;
        case 32:
        case 38:
          LODWORD(v119) = (*((_DWORD *)v103 + 5) & 0x7FFFFFF) - 1;
          break;
        case 33:
          goto LABEL_232;
        case 36:
          LODWORD(v119) = *((_WORD *)v103 + 9) & 1;
          break;
        case 37:
          LODWORD(v119) = 1;
          goto LABEL_232;
        case 39:
          LODWORD(v119) = *((_DWORD *)v103 + 20) + 1;
          break;
        default:
          goto LABEL_234;
      }
      if (!v119) {
        goto LABEL_234;
      }
    }
LABEL_232:
    unsigned int v120 = 0;
    do
    {
      Successor = (void *)llvm::Instruction::getSuccessor((llvm::Instruction *)v103, v120);
      sub_1CC01FA34((llvm::SmallPtrSetImplBase *)&v178, (uint64_t *)&Successor);
      ++v120;
    }
    while (v119 != v120);
LABEL_234:
    (*(void (**)(unsigned char *, llvm::Function *))(*(void *)v1 + 24))(v1, v164);
    goto LABEL_235;
  }
  while (1)
  {
    if (v85) {
      int v86 = v85 - 24;
    }
    else {
      int v86 = 0;
    }
    if (sub_1CBF63B28((uint64_t)v86) || sub_1CC27D470((uint64_t)v86)) {
      goto LABEL_186;
    }
    BOOL v87 = v165;
    if (v166 == v165)
    {
      int v88 = HIDWORD(v167);
      int v89 = &v166[8 * HIDWORD(v167)];
      if (HIDWORD(v167))
      {
        uint64_t v90 = 0;
        while (*(char **)&v166[v90] != v86)
        {
          v90 += 8;
          if (8 * HIDWORD(v167) == v90) {
            goto LABEL_165;
          }
        }
        int v89 = &v166[v90];
      }
LABEL_165:
      BOOL v87 = v166;
    }
    else
    {
      int v91 = v167 - 1;
      unsigned int v92 = (v167 - 1) & ((v86 >> 4) ^ (v86 >> 9));
      int v89 = &v166[8 * v92];
      int v93 = *(char **)v89;
      if (*(void *)v89 == -1)
      {
        size_t v94 = 0;
LABEL_189:
        if (v94) {
          int v89 = v94;
        }
        int v88 = HIDWORD(v167);
        if (*(char **)v89 != v86) {
          int v89 = &v166[8 * v167];
        }
      }
      else
      {
        size_t v94 = 0;
        int v95 = 1;
        while (v93 != v86)
        {
          if (v94) {
            BOOL v96 = 0;
          }
          else {
            BOOL v96 = v93 == (char *)-2;
          }
          if (v96) {
            size_t v94 = v89;
          }
          unsigned int v97 = v92 + v95++;
          unsigned int v92 = v97 & v91;
          int v89 = &v166[8 * (v97 & v91)];
          int v93 = *(char **)v89;
          if (*(void *)v89 == -1) {
            goto LABEL_189;
          }
        }
        int v88 = HIDWORD(v167);
      }
    }
    int v98 = v166 == v87 ? v88 : v167;
    if (v89 != &v166[8 * v98]) {
      goto LABEL_186;
    }
    ++*((_DWORD *)v1 + 28);
    if (v86[16] == 89 || (*(_DWORD *)(*(void *)v86 + 8) & 0xFE) == 0x12) {
      ++*((_DWORD *)v1 + 29);
    }
    (*(void (**)(unsigned char *, char *))(*(void *)v1 + 32))(v1, v86);
    if (sub_1CC020C2C((uint64_t)v1, (uint64_t)v86, v99, v100, v101)) {
      ++*((_DWORD *)v1 + 147);
    }
    else {
      (*(void (**)(unsigned char *))(*(void *)v1 + 168))(v1);
    }
    (*(void (**)(unsigned char *, char *))(*(void *)v1 + 40))(v1, v86);
    if (v1[89])
    {
      if (!v1[401]) {
        break;
      }
    }
    if (v1[90])
    {
      int v2 = "exposes returns twice";
      goto LABEL_280;
    }
    if (v1[91])
    {
      int v2 = "dynamic alloca";
      goto LABEL_280;
    }
    if (v1[94])
    {
      int v2 = "indirect branch";
      goto LABEL_280;
    }
    if (v1[95])
    {
      int v2 = "uninlinable intrinsic";
      goto LABEL_280;
    }
    if (v1[96])
    {
      int v2 = "varargs";
      goto LABEL_280;
    }
    if (v1[88] && *((void *)v1 + 13) >= 0x401uLL)
    {
      size_t v132 = (uint64_t ***)*((void *)v1 + 9);
      if (v132)
      {
        uint64_t v133 = *(void *)***v132;
        if (*(void *)(v133 + 128)
          || (*(unsigned int (**)(void))(**(void **)(v133 + 72) + 48))(*(void *)(v133 + 72)))
        {
          llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)&Successor, (uint64_t)"inline-cost", (uint64_t)"NeverInline", 11, *((void *)v1 + 10));
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v174, "Callee", 6uLL, *((unsigned __int8 **)v1 + 7));
          uint64_t v147 = sub_1CD3D6290((uint64_t)&Successor, (long long *)v174);
          v186 = " is ";
          uint64_t v187 = 4;
          sub_1CC59ADEC((uint64_t *)(v147 + 80), (uint64_t)&v186);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "InlineResult", 0xCuLL, "recursive and allocates too much stack space", 0x2CuLL);
          uint64_t v148 = sub_1CD3D6290(v147, (long long *)__dst);
          v186 = ". Cost is not fully computed";
          uint64_t v187 = 28;
          sub_1CC59ADEC((uint64_t *)(v148 + 80), (uint64_t)&v186);
          int v149 = *(_DWORD *)(v148 + 8);
          BYTE4(v187) = *(unsigned char *)(v148 + 12);
          LODWORD(v187) = v149;
          long long v150 = *(_OWORD *)(v148 + 16);
          uint64_t v189 = *(void *)(v148 + 32);
          long long v188 = v150;
          uint64_t v151 = *(void *)(v148 + 72);
          long long v152 = *(_OWORD *)(v148 + 56);
          long long v190 = *(_OWORD *)(v148 + 40);
          long long v191 = v152;
          v186 = (const char *)&unk_1F2616800;
          uint64_t v192 = v151;
          size_t v193 = v195;
          uint64_t v194 = 0x400000000;
          if (*(_DWORD *)(v148 + 88)) {
            sub_1CD494D68((uint64_t)&v193, v148 + 80);
          }
          uint64_t v153 = *(void *)(v148 + 360);
          uint64_t v196 = *(void *)(v148 + 352);
          uint64_t v197 = v153;
          v186 = (const char *)&unk_1F26165A8;
          if (v173 < 0) {
            operator delete(__p);
          }
          if (v171 < 0) {
            operator delete(__dst[0]);
          }
          if (v177 < 0) {
            operator delete(v176);
          }
          if (v175 < 0) {
            operator delete(v174[0]);
          }
          Successor = &unk_1F2616800;
          long long v154 = (char *)v203;
          if (v204)
          {
            unint64_t v155 = (unint64_t)v204 << 6;
            do
            {
              v156 = (void **)&v154[v155];
              if (v154[v155 - 17] < 0) {
                operator delete(*(v156 - 5));
              }
              if (*((char *)v156 - 41) < 0) {
                operator delete(*(v156 - 8));
              }
              v155 -= 64;
            }
            while (v155);
            long long v154 = (char *)v203;
          }
          if (v154 != (char *)v205) {
            free(v154);
          }
          llvm::OptimizationRemarkEmitter::emit(v132, (llvm::DiagnosticInfoOptimizationBase *)&v186);
          v186 = (const char *)&unk_1F2616800;
          size_t v157 = (char *)v193;
          if (v194)
          {
            unint64_t v158 = (unint64_t)v194 << 6;
            do
            {
              long long v159 = (void **)&v157[v158];
              if (v157[v158 - 17] < 0) {
                operator delete(*(v159 - 5));
              }
              if (*((char *)v159 - 41) < 0) {
                operator delete(*(v159 - 8));
              }
              v158 -= 64;
            }
            while (v158);
            size_t v157 = (char *)v193;
          }
          if (v157 != v195) {
            free(v157);
          }
        }
      }
      int v2 = "recursive and allocates too much stack space";
      goto LABEL_283;
    }
    if ((*(uint64_t (**)(unsigned char *))(*(void *)v1 + 56))(v1))
    {
      int v2 = "Call site analysis is not favorable to inlining.";
      goto LABEL_283;
    }
LABEL_186:
    size_t v85 = (char *)*((void *)v85 + 1);
    if (v85 == v84)
    {
      int v83 = v164;
      goto LABEL_194;
    }
  }
  int v2 = "recursive";
LABEL_280:
  int v81 = (uint64_t ***)*((void *)v1 + 9);
  if (v81)
  {
    uint64_t v131 = *(void *)***v81;
    if (*(void *)(v131 + 128)
      || (*(unsigned int (**)(void))(**(void **)(v131 + 72) + 48))(*(void *)(v131 + 72)))
    {
      llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)&Successor, (uint64_t)"inline-cost", (uint64_t)"NeverInline", 11, *((void *)v1 + 10));
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v174, "Callee", 6uLL, *((unsigned __int8 **)v1 + 7));
      uint64_t v134 = sub_1CD3D6290((uint64_t)&Successor, (long long *)v174);
      v186 = " has uninlinable pattern (";
      uint64_t v187 = 26;
      sub_1CC59ADEC((uint64_t *)(v134 + 80), (uint64_t)&v186);
      size_t v135 = strlen(v2);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "InlineResult", 0xCuLL, v2, v135);
      uint64_t v136 = sub_1CD3D6290(v134, (long long *)__dst);
      v186 = ") and cost is not fully computed";
      uint64_t v187 = 32;
      sub_1CC59ADEC((uint64_t *)(v136 + 80), (uint64_t)&v186);
      int v137 = *(_DWORD *)(v136 + 8);
      BYTE4(v187) = *(unsigned char *)(v136 + 12);
      LODWORD(v187) = v137;
      long long v138 = *(_OWORD *)(v136 + 16);
      uint64_t v189 = *(void *)(v136 + 32);
      long long v188 = v138;
      __n128 v1 = &unk_1F2616800;
      uint64_t v139 = *(void *)(v136 + 72);
      long long v140 = *(_OWORD *)(v136 + 56);
      long long v190 = *(_OWORD *)(v136 + 40);
      long long v191 = v140;
      v186 = (const char *)&unk_1F2616800;
      uint64_t v192 = v139;
      size_t v84 = v195;
      size_t v193 = v195;
      uint64_t v194 = 0x400000000;
      if (*(_DWORD *)(v136 + 88)) {
        sub_1CD494D68((uint64_t)&v193, v136 + 80);
      }
      uint64_t v141 = *(void *)(v136 + 360);
      uint64_t v196 = *(void *)(v136 + 352);
      uint64_t v197 = v141;
      v186 = (const char *)&unk_1F26165A8;
      if (v173 < 0) {
        operator delete(__p);
      }
      if (v171 < 0) {
        operator delete(__dst[0]);
      }
      if (v177 < 0) {
        operator delete(v176);
      }
      if (v175 < 0) {
        operator delete(v174[0]);
      }
      Successor = &unk_1F2616800;
      uint64_t v119 = (uint64_t)v203;
      if (v204)
      {
        unint64_t v142 = (unint64_t)v204 << 6;
        do
        {
          unint64_t v143 = v119 + v142;
          if (*(char *)(v119 + v142 - 17) < 0) {
            operator delete(*(void **)(v143 - 40));
          }
          if (*(char *)(v143 - 41) < 0) {
            operator delete(*(void **)(v143 - 64));
          }
          v142 -= 64;
        }
        while (v142);
        uint64_t v119 = (uint64_t)v203;
      }
      if ((void *)v119 != v205) {
LABEL_353:
      }
        free((void *)v119);
      llvm::OptimizationRemarkEmitter::emit(v81, (llvm::DiagnosticInfoOptimizationBase *)&v186);
      v186 = v1;
      int v144 = (char *)v193;
      if (v194)
      {
        unint64_t v145 = (unint64_t)v194 << 6;
        do
        {
          int v146 = (void **)&v144[v145];
          if (v144[v145 - 17] < 0) {
            operator delete(*(v146 - 5));
          }
          if (*((char *)v146 - 41) < 0) {
            operator delete(*(v146 - 8));
          }
          v145 -= 64;
        }
        while (v145);
        int v144 = (char *)v193;
      }
      if (v144 != v84) {
        free(v144);
      }
    }
  }
LABEL_283:
  if (v183 != v185) {
    free(v183);
  }
  if (v179 != v178) {
    free(v179);
  }
  if (v166 != v165) {
    free(v166);
  }
  return v2;
}

void *sub_1CC01BFF8(uint64_t a1)
{
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 728), 8);
  if (*(unsigned char *)(a1 + 704))
  {
    sub_1CD494A40(a1 + 672);
    *(unsigned char *)(a1 + 704) = 0;
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 624), 8);

  return sub_1CC01ECAC((void *)a1);
}

void *llvm::getInliningCostFeatures@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  sub_1CC01D2F0((uint64_t)v14, *(void *)(a1 - 32), a1, a2, a3, a4, a5, a6, a7, 0);
  v14[0] = &unk_1F26045A0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  memset(v20, 0, sizeof(v20));
  int v21 = 5;
  long long v22 = 0u;
  int v23 = 0;
  if (sub_1CC01AA4C(v14))
  {
    char v9 = 0;
    *(unsigned char *)a8 = 0;
  }
  else
  {
    long long v10 = v18;
    *(_OWORD *)(a8 + 32) = v17;
    *(_OWORD *)(a8 + 48) = v10;
    long long v11 = *(_OWORD *)v20;
    *(_OWORD *)(a8 + 64) = v19;
    *(_OWORD *)(a8 + 80) = v11;
    long long v12 = v16;
    char v9 = 1;
    *(_OWORD *)a8 = v15;
    *(_OWORD *)(a8 + 16) = v12;
  }
  *(unsigned char *)(a8 + 96) = v9;
  MEMORY[0x1D25D9CD0](v22, 8);
  return sub_1CC01ECAC(v14);
}

void *sub_1CC01C174(void *a1)
{
  MEMORY[0x1D25D9CD0](a1[88], 8);

  return sub_1CC01ECAC(a1);
}

unint64_t llvm::getAttributeBasedInliningDecision(uint64_t a1, uint64_t a2, llvm::BasicBlock *a3, uint64_t (*a4)(uint64_t, const llvm::Function *), uint64_t a5)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    long long v17 = "indirect call";
    goto LABEL_59;
  }
  uint64_t v7 = a3;
  uint64_t v8 = (const llvm::Function *)a2;
  uint64_t v10 = *(void *)(a2 + 112);
  if (v10)
  {
    if (*(_DWORD *)(v10 + 8))
    {
      uint64_t v11 = *(void *)(v10 + 40);
      if (v11)
      {
        int v12 = *(_DWORD *)(v11 + 40);
        if (v12)
        {
          uint64_t v13 = *(void *)(v11 + 24);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_1EBCBE588))
          {
            unint64_t v65 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override) {
              unint64_t v65 = 0xFF51AFD7ED558CCDLL;
            }
            qword_1EBCBE580 = v65;
            __cxa_guard_release(&qword_1EBCBE588);
          }
          uint64_t v14 = __ROR8__(qword_1EBCBE580 ^ 0x7A48DC6FE7EA5090, 30);
          unint64_t v15 = 0x9DDFEA08EB382D69
              * ((qword_1EBCBE580 - 0x2D69957673248ED7) ^ ((0x9DDFEA08EB382D69
                                                            * ((v14 - 0x574D426307C1BC2DLL) ^ (qword_1EBCBE580
                                                                                             - 0x2D69957673248ED7))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v14 - 0x574D426307C1BC2DLL) ^ (qword_1EBCBE580 - 0x2D69957673248ED7))));
          unsigned int v16 = -348639895 * ((v15 >> 47) ^ v15);
          a2 = 1;
          long long v17 = "unsplited coroutine call";
          for (int i = 1; ; ++i)
          {
            unsigned int v19 = v16 & (v12 - 1);
            BOOL v20 = (uint64_t *)(v13 + 24 * v19);
            uint64_t v21 = *v20;
            if (*v20 == -1)
            {
              if ("coroutine.presplit" == (char *)-1) {
                goto LABEL_84;
              }
            }
            else if (v21 == -2)
            {
              if ("coroutine.presplit" == (char *)-2) {
                goto LABEL_59;
              }
            }
            else if (v20[1] == 18)
            {
              a3 = *(llvm::BasicBlock **)(v21 + 8);
              BOOL v63 = *(void *)v21 == 0x6E6974756F726F63 && a3 == (llvm::BasicBlock *)0x6C70736572702E65;
              if (v63 && *(_WORD *)(v21 + 16) == 29801)
              {
LABEL_84:
                unint64_t v57 = (unint64_t)"unsplited coroutine call" & 0xFFFFFFFFFFFFFF00;
                unint64_t v58 = (unint64_t)"unsplited coroutine call" & 0xFF;
                return v57 | v58;
              }
            }
            if (v21 == -1) {
              break;
            }
            unsigned int v16 = i + v19;
          }
        }
      }
    }
  }
  int v22 = *(unsigned __int8 *)(a1 + 16);
  if (v22 == 84)
  {
    uint64_t v23 = 0;
  }
  else if (v22 == 39)
  {
    uint64_t v23 = (*(_DWORD *)(a1 + 80) + 1);
  }
  else
  {
    uint64_t v23 = 2;
  }
  int v24 = *(_DWORD *)(a1 + 20);
  if (v24 < 0 && (uint64_t v66 = a1 - 32 * (v24 & 0x7FFFFFF), v67 = *(void *)(v66 - 8), (v67 & 0xFFFFFFFF0) != 0))
  {
    uint64_t v26 = -(uint64_t)(v24 & 0x7FFFFFF);
    uint64_t v25 = (*(_DWORD *)(v66 - 12) - *(_DWORD *)(v66 - v67));
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v26 = -(uint64_t)(v24 & 0x7FFFFFF);
  }
  unint64_t v27 = -32 * v23 - 32 * v25 - 32 * v26 - 32;
  if ((v27 & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v28 = 0;
    int v29 = *(_DWORD *)(*((void *)v8 + 5) + 276);
    uint64_t v30 = (v27 >> 5);
    uint64_t v31 = a1;
    while (!llvm::CallBase::paramHasAttr(a1, v28, 69)
         || v29 == *(_DWORD *)(**(void **)(v31 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)) + 8) >> 8)
    {
      ++v28;
      v31 += 32;
      if (v30 == v28) {
        goto LABEL_19;
      }
    }
    long long v17 = "byval arguments without alloca address space";
    goto LABEL_59;
  }
LABEL_19:
  uint64_t v32 = *(void *)(a1 + 64);
  if (!v32 || (*(unsigned char *)(v32 + 12) & 4) == 0)
  {
    if (!llvm::CallBase::hasFnAttrOnCalledFunction(a1, 2))
    {
      unsigned int v33 = *(llvm::AttributeFuncs **)(*(void *)(a1 + 40) + 56);
      uint64_t v34 = a4(a5, v8);
      uint64_t v35 = v34;
      uint64_t v68 = *(void *)v34;
      __s2 = v71;
      uint64_t v70 = 0x600000000;
      uint64_t v36 = *(unsigned int *)(v34 + 16);
      if (v36 && &v68 != (uint64_t *)v34)
      {
        if (v36 >= 7) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v71, *(const void **)(v34 + 8), 8 * v36);
        LODWORD(v70) = v36;
      }
      unsigned int v72 = *(_DWORD *)(v35 + 72);
      if (byte_1EBCC56F0
        || (*(unsigned int (**)(void, llvm::AttributeFuncs *, const llvm::Function *))(**(void **)v7
                                                                                                  + 1032))(*(void *)v7, v33, v8))
      {
        uint64_t v37 = a4(a5, v33);
        uint64_t v39 = v37;
        if (byte_1EBCC5CF0)
        {
          unsigned int v40 = 0;
          unsigned int v41 = (const void **)(v37 + 8);
          __s1 = v75;
          uint64_t v74 = 0x600000000;
          unsigned int v42 = *(_DWORD *)(v37 + 16);
          if (v42 && &__s1 != (void **)(v37 + 8))
          {
            if (v42 >= 7) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v75, *v41, 8 * *(unsigned int *)(v37 + 16));
            LODWORD(v74) = v42;
            unsigned int v40 = v42;
          }
          unsigned int v43 = *(_DWORD *)(v39 + 72);
          unsigned int v76 = v43;
          unsigned int v44 = v72;
          if (v43 < v72)
          {
            int v60 = v43 & 0x3F;
            if (v60) {
              *((void *)__s1 + v40 - 1) &= ~(-1 << v60);
            }
            unsigned int v76 = v44;
            unsigned int v61 = v44 + 63;
            if (v40 != (v44 + 63) >> 6)
            {
              uint64_t v62 = v61 >> 6;
              if (v40 > v62)
              {
                LODWORD(v74) = v61 >> 6;
                unsigned int v40 = v61 >> 6;
              }
              else
              {
                if (v62 > HIDWORD(v74)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v62 != v40) {
                  bzero((char *)__s1 + 8 * v40, 8 * (v62 - v40));
                }
                unsigned int v40 = v62;
                LODWORD(v74) = v62;
                unsigned int v44 = v76;
              }
            }
            char v45 = __s1;
            if ((v44 & 0x3F) != 0) {
              *((void *)__s1 + v40 - 1) &= ~(-1 << (v44 & 0x3F));
            }
          }
          else
          {
            char v45 = __s1;
            unsigned int v44 = v43;
          }
          uint64_t v46 = v70;
          if (v70)
          {
            int v47 = (uint64_t *)__s2;
            BOOL v48 = v45;
            do
            {
              uint64_t v49 = *v47++;
              *v48++ |= v49;
              --v46;
            }
            while (v46);
          }
          BOOL v50 = v44 == *(_DWORD *)(v39 + 72) && memcmp(v45, *v41, 8 * v40) == 0;
          if (v45 != (void *)v75) {
            free(v45);
          }
          if (v50) {
            goto LABEL_43;
          }
        }
        else if (*(_DWORD *)(v37 + 72) == v72 {
               && !memcmp(*(const void **)(v37 + 8), __s2, 8 * *(unsigned int *)(v37 + 16)))
        }
        {
LABEL_43:
          int v51 = llvm::AttributeFuncs::areOutlineCompatible(v33, v8, v38);
LABEL_44:
          if (__s2 != v71) {
            free(__s2);
          }
          if (!v51)
          {
            long long v17 = "conflicting attributes";
            goto LABEL_59;
          }
          uint64_t v52 = *((void *)v33 + 14);
          if (!v52) {
            goto LABEL_50;
          }
          char v53 = *(unsigned char *)(v52 + 17);
          if ((v53 & 8) != 0)
          {
            long long v17 = "optnone attribute";
            goto LABEL_59;
          }
          if ((v53 & 1) == 0)
          {
LABEL_50:
            uint64_t v54 = *((void *)v8 + 14);
            if (v54 && (*(unsigned char *)(v54 + 17) & 1) != 0)
            {
              long long v17 = "nullptr definitions incompatible";
              goto LABEL_59;
            }
          }
          if (llvm::GlobalValue::isInterposable(v8))
          {
            long long v17 = "interposable";
            goto LABEL_59;
          }
          uint64_t v55 = *((void *)v8 + 14);
          if (v55 && (*(unsigned char *)(v55 + 15) & 8) != 0)
          {
            long long v17 = "noinline function attribute";
            goto LABEL_59;
          }
          uint64_t v56 = *(void *)(a1 + 64);
          if ((!v56 || (*(unsigned char *)(v56 + 15) & 8) == 0)
            && !llvm::CallBase::hasFnAttrOnCalledFunction(a1, 27))
          {
            LOBYTE(v58) = 0;
            unint64_t v57 = 0;
            return v57 | v58;
          }
          goto LABEL_58;
        }
      }
      int v51 = 0;
      goto LABEL_44;
    }
    uint64_t v32 = *(void *)(a1 + 64);
    if (!v32) {
      goto LABEL_88;
    }
  }
  if ((*(unsigned char *)(v32 + 15) & 8) == 0)
  {
LABEL_88:
    unint64_t v58 = (unint64_t)llvm::isInlineViable(v8, (llvm::Function *)a2, a3);
    unint64_t v57 = v58 & 0xFFFFFFFFFFFFFF00;
    return v57 | v58;
  }
LABEL_58:
  long long v17 = "noinline call site attribute";
LABEL_59:
  unint64_t v57 = (unint64_t)v17 & 0xFFFFFFFFFFFFFF00;
  LOBYTE(v58) = (_BYTE)v17;
  return v57 | v58;
}

const char *llvm::isInlineViable(llvm *this, llvm::Function *a2, llvm::BasicBlock *a3)
{
  uint64_t v4 = *((void *)this + 14);
  if (v4) {
    BOOL v5 = *(char *)(v4 + 17) < 0;
  }
  else {
    BOOL v5 = 0;
  }
  uint64_t v6 = (char *)this + 72;
  uint64_t v7 = (char *)*((void *)this + 10);
  if (v7 == (char *)this + 72) {
    return 0;
  }
  uint64_t v8 = "contains indirect branches";
  while (2)
  {
    char v9 = v7 - 24;
    if (!v7) {
      char v9 = 0;
    }
    uint64_t v11 = v9 + 40;
    uint64_t v10 = *((void *)v9 + 5);
    if (v10) {
      uint64_t v12 = v10 - 24;
    }
    else {
      uint64_t v12 = 0;
    }
    if (*(unsigned __int8 *)(v12 + 16) - 29 >= 0xB) {
      uint64_t v12 = 0;
    }
    if (*(unsigned char *)(v12 + 16) == 32) {
      return v8;
    }
    if ((*((_WORD *)v9 + 9) & 0x7FFF) == 0
      || (uint64_t v25 = v9,
          uint64_t v23 = llvm::BlockAddress::get(*((llvm::BlockAddress **)v9 + 7), (llvm::Function *)v9, a3),
          char v9 = v25,
          (uint64_t v24 = *((void *)v23 + 1)) == 0))
    {
LABEL_14:
      for (int i = (void *)*((void *)v9 + 6); i != v11; int i = (void *)i[1])
      {
        if (i) {
          uint64_t v14 = i - 3;
        }
        else {
          uint64_t v14 = 0;
        }
        unsigned int v15 = *((unsigned __int8 *)v14 + 16) - 33;
        BOOL v16 = v15 > 0x33;
        uint64_t v17 = (1 << v15) & 0x8000000000041;
        if (!v16 && v17 != 0)
        {
          uint64_t v19 = *(i - 7);
          if (v19)
          {
            if (*(unsigned char *)(v19 + 16) || *(void *)(v19 + 24) != i[6])
            {
              uint64_t v19 = 0;
            }
            else if ((llvm *)v19 == this)
            {
              return "recursive call";
            }
          }
          if (!v5 && *((unsigned char *)i - 8) == 84)
          {
            uint64_t v20 = i[5];
            if (v20)
            {
              if (*(char *)(v20 + 17) < 0) {
                return "exposes returns-twice attribute";
              }
            }
            if (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(i - 3), 47)) {
              return "exposes returns-twice attribute";
            }
          }
          if (v19)
          {
            int v21 = *(_DWORD *)(v19 + 36);
            switch(v21)
            {
              case 157:
                return "disallowed inlining of @llvm.icall.branch.funnel";
              case 173:
                return "disallowed inlining of @llvm.localescape";
              case 315:
                return "contains VarArgs initialized with va_start";
            }
          }
        }
      }
      uint64_t v7 = (char *)*((void *)v7 + 1);
      if (v7 != v6) {
        continue;
      }
      return 0;
    }
    break;
  }
  while (*(unsigned char *)(*(void *)(v24 + 24) + 16) == 39)
  {
    uint64_t v24 = *(void *)(v24 + 8);
    char v9 = v25;
    if (!v24) {
      goto LABEL_14;
    }
  }
  return "blockaddress used outside of callbr";
}

llvm::APInt *sub_1CC01CB38@<X0>(llvm::APInt *result@<X0>, llvm::APInt *a2@<X1>, uint64_t a3@<X8>)
{
  v5[0] = 0;
  char v6 = 0;
  if (*((unsigned char *)a2 + 32))
  {
    int v3 = result;
    sub_1CD494F9C((llvm::APInt *)v5, a2);
    char v6 = 1;
    *(void *)a3 = 0x80000000;
    *(void *)(a3 + 8) = v3;
    *(unsigned char *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 48) = 0;
    double result = sub_1CD494F9C((llvm::APInt *)(a3 + 16), (llvm::APInt *)v5);
    *(unsigned char *)(a3 + 48) = 1;
    if (v6) {
      return (llvm::APInt *)sub_1CD494A40((uint64_t)v5);
    }
  }
  else
  {
    *(void *)a3 = 0x80000000;
    *(void *)(a3 + 8) = result;
    *(unsigned char *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 48) = 0;
  }
  return result;
}

llvm::APInt *sub_1CC01CBE0@<X0>(llvm::APInt *result@<X0>, llvm::APInt *a2@<X1>, uint64_t a3@<X8>)
{
  v5[0] = 0;
  char v6 = 0;
  if (*((unsigned char *)a2 + 32))
  {
    int v3 = result;
    sub_1CD494F9C((llvm::APInt *)v5, a2);
    char v6 = 1;
    *(void *)a3 = 0x7FFFFFFFLL;
    *(void *)(a3 + 8) = v3;
    *(unsigned char *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 48) = 0;
    double result = sub_1CD494F9C((llvm::APInt *)(a3 + 16), (llvm::APInt *)v5);
    *(unsigned char *)(a3 + 48) = 1;
    if (v6) {
      return (llvm::APInt *)sub_1CD494A40((uint64_t)v5);
    }
  }
  else
  {
    *(void *)a3 = 0x7FFFFFFFLL;
    *(void *)(a3 + 8) = result;
    *(unsigned char *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 48) = 0;
  }
  return result;
}

void llvm::InlineCostAnnotationPrinterPass::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v17[4] = *MEMORY[0x1E4F143B8];
  v6[0] = 1;
  byte_1EBCC57B0 = 1;
  if (qword_1EBCC57E8)
  {
    (*(void (**)(uint64_t, char *))(*(void *)qword_1EBCC57E8 + 48))(qword_1EBCC57E8, v6);
    v17[0] = &unk_1F2604670;
    v17[1] = a3;
    v17[3] = v17;
    v7[0] = *(void *)(a2 + 40);
    BOOL v5 = (const llvm::Module *)v7[0];
    v7[1] = 0;
    char v8 = 0;
    char v9 = 0;
    char v10 = 0;
    char v11 = 0;
    int v12 = 0;
    uint64_t v14 = 0;
    uint64_t v13 = 0;
    int v15 = 0;
    llvm::ProfileSummaryInfo::refresh((uint64_t)v7);
    llvm::DataLayout::DataLayout((llvm::DataLayout *)v16, v5);
    operator new();
  }
  sub_1CB920400();
}

double sub_1CC01D2F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)a1 = &unk_1F2604488;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = a5;
  *(void *)(a1 + 24) = a6;
  *(void *)(a1 + 32) = a7;
  *(void *)(a1 + 40) = a8;
  *(void *)(a1 + 48) = a9;
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 64) = *(void *)(a2 + 40) + 272;
  *(void *)(a1 + 72) = a10;
  *(unsigned char *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a3;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 216) = a1 + 248;
  *(void *)(a1 + 224) = a1 + 248;
  *(void *)(a1 + 232) = 16;
  *(_DWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_WORD *)(a1 + 400) = 1;
  *(void *)(a1 + 408) = a1 + 440;
  *(void *)(a1 + 416) = a1 + 440;
  *(void *)(a1 + 424) = 16;
  *(_DWORD *)(a1 + 432) = 0;
  *(void *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  return result;
}

void sub_1CC01D3A4(uint64_t a1)
{
  sub_1CC01BFF8(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC01D3DC(uint64_t result)
{
  *(_DWORD *)(result + 660) = *(_DWORD *)(result + 656);
  return result;
}

uint64_t sub_1CC01D3E8(uint64_t result, const llvm::BasicBlock *a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 654))
  {
    char v6 = (llvm::BlockFrequencyInfoImplBase **)(*(uint64_t (**)(void, void))(result + 32))(*(void *)(result + 40), *(void *)(result + 56));
    double result = llvm::BlockFrequencyInfo::getBlockProfileCount(v6, a2, 0);
    if (!result) {
      *(_DWORD *)(v3 + 664) += *(_DWORD *)(v3 + 656) - *(_DWORD *)(v3 + 660);
    }
  }
  if (*(unsigned char *)(v3 + 712))
  {
    uint64_t v4 = (void *)*((void *)a2 + 5);
    if (v4 == (void *)((char *)a2 + 40))
    {
      BOOL v5 = 0;
    }
    else
    {
      if (v4) {
        BOOL v5 = v4 - 3;
      }
      else {
        BOOL v5 = 0;
      }
      if (*((unsigned __int8 *)v5 + 16) - 29 >= 0xB) {
        BOOL v5 = 0;
      }
    }
    if (*((unsigned char *)v5 + 16) != 30)
    {
      switch(*((unsigned char *)v5 + 16))
      {
        case 0x1E:
          __break(1u);
          goto LABEL_22;
        case 0x1F:
          unsigned int v7 = (*((_DWORD *)v5 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_19;
        case 0x20:
        case 0x26:
LABEL_22:
          unsigned int v7 = (*((_DWORD *)v5 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_19;
        case 0x21:
          goto LABEL_13;
        case 0x27:
          unsigned int v7 = *((_DWORD *)v5 + 20) + 1;
LABEL_19:
          if (v7 < 2) {
            return result;
          }
          goto LABEL_13;
        default:
          return result;
      }
    }
    if ((*((_DWORD *)v5 + 5) & 0x7FFFFFF) == 3)
    {
LABEL_13:
      *(_DWORD *)(v3 + 648) -= *(_DWORD *)(v3 + 608);
      *(unsigned char *)(v3 + 712) = 0;
    }
  }
  return result;
}

uint64_t *sub_1CC01D538(uint64_t *result, uint64_t a2)
{
  uint64_t v5 = a2;
  if (byte_1EBCC57B0)
  {
    int v2 = result;
    int v3 = *((_DWORD *)result + 164);
    uint64_t v4 = (uint64_t)(result + 78);
    *(_DWORD *)sub_1CC01F318((uint64_t)(result + 78), &v5) = v3;
    LODWORD(v2) = *((_DWORD *)v2 + 162);
    double result = sub_1CC01F318(v4, &v5);
    *((_DWORD *)result + 2) = v2;
  }
  return result;
}

uint64_t *sub_1CC01D5A4(uint64_t *result, uint64_t a2)
{
  uint64_t v5 = a2;
  if (byte_1EBCC57B0)
  {
    int v2 = result;
    int v3 = *((_DWORD *)result + 164);
    uint64_t v4 = (uint64_t)(result + 78);
    *((_DWORD *)sub_1CC01F318((uint64_t)(result + 78), &v5) + 1) = v3;
    LODWORD(v2) = *((_DWORD *)v2 + 162);
    double result = sub_1CC01F318(v4, &v5);
    *((_DWORD *)result + 3) = v2;
  }
  return result;
}

const char *sub_1CC01D610(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 80) + 40) + 56) + 112);
  if (v2 && *(char *)(v2 + 13) < 0)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t __src = v24;
    uint64_t v23 = 0x100000000;
    int v29 = 0;
    v24[1] = 0;
    void v24[2] = 0;
    int v25 = 0;
    char v28 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = v3;
    sub_1CC5A43B0((uint64_t)&__src, 0);
    int v12 = 0;
    uint64_t v13 = 0;
    int v14 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v17 = 0;
    long long v18 = v20;
    uint64_t v19 = 0x400000000;
    uint64_t v20[4] = v21;
    v20[5] = 0;
    v21[0] = 0;
    v21[1] = 1;
    llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze();
  }
  unsigned int v5 = *(_DWORD *)(a1 + 112);
  unsigned int v4 = *(_DWORD *)(a1 + 116);
  if (v4 <= v5 / 0xA)
  {
    int v6 = *(_DWORD *)(a1 + 648) - *(_DWORD *)(a1 + 604);
  }
  else
  {
    if (v4 > v5 >> 1) {
      goto LABEL_9;
    }
    int v6 = *(_DWORD *)(a1 + 648) - *(_DWORD *)(a1 + 604) / 2;
  }
  *(_DWORD *)(a1 + 648) = v6;
LABEL_9:
  unint64_t StringFnAttrAsInt = llvm::getStringFnAttrAsInt(*(void *)(a1 + 80), "function-inline-cost", 0x14uLL);
  if (HIDWORD(StringFnAttrAsInt)) {
    *(_DWORD *)(a1 + 656) = StringFnAttrAsInt;
  }
  unint64_t v8 = llvm::getStringFnAttrAsInt(*(void *)(a1 + 80), "function-inline-cost-multiplier", 0x1FuLL);
  if (HIDWORD(v8)) {
    *(_DWORD *)(a1 + 656) *= v8;
  }
  unint64_t v9 = llvm::getStringFnAttrAsInt(*(void *)(a1 + 80), "function-inline-threshold", 0x19uLL);
  if (HIDWORD(v9)) {
    *(_DWORD *)(a1 + 648) = v9;
  }
  if (*(unsigned char *)(a1 + 654) && *(_DWORD *)(a1 + 648))
  {
    (*(void (**)(void, void))(a1 + 32))(*(void *)(a1 + 40), *(void *)(a1 + 56));
    LODWORD(v23) = 128;
    operator new[]();
  }
  if (*(unsigned char *)(a1 + 653)) {
    return 0;
  }
  *(unsigned char *)(a1 + 668) = 1;
  int v11 = *(_DWORD *)(a1 + 648);
  if (v11 <= 1) {
    int v11 = 1;
  }
  if (*(_DWORD *)(a1 + 656) >= v11) {
    return "Cost over threshold.";
  }
  else {
    return 0;
  }
}

uint64_t sub_1CC01E048(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 653) || *(unsigned char *)(a1 + 596) || *(_DWORD *)(a1 + 656) < *(_DWORD *)(a1 + 648)) {
    return 0;
  }
  uint64_t v1 = 1;
  *(unsigned char *)(a1 + 668) = 1;
  return v1;
}

const char *sub_1CC01E080(uint64_t a1, uint64_t a2, const llvm::DataLayout *a3)
{
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 56);
  if (*(unsigned char *)(v4 + 16) == 33)
  {
    uint64_t v6 = *(void *)(*(void *)(v4 - 96) + 40);
    if (v6) {
      uint64_t v7 = v6 - 24;
    }
    else {
      uint64_t v7 = 0;
    }
    if (*(unsigned __int8 *)(v7 + 16) - 29 >= 0xB) {
      uint64_t v7 = 0;
    }
    if (*(unsigned char *)(v7 + 16) != 35)
    {
      uint64_t v8 = *(void *)(v4 + 40);
      goto LABEL_16;
    }
LABEL_15:
    *(_DWORD *)(a1 + 648) = 0;
    goto LABEL_101;
  }
  uint64_t v8 = *(void *)(v4 + 40);
  uint64_t v9 = *(void *)(v8 + 40);
  if (v9) {
    uint64_t v10 = v9 - 24;
  }
  else {
    uint64_t v10 = 0;
  }
  if (*(unsigned __int8 *)(v10 + 16) - 29 >= 0xB) {
    uint64_t v10 = 0;
  }
  if (*(unsigned char *)(v10 + 16) == 35) {
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v11 = *(void *)(v8 + 56);
  int v12 = (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 48))(**(void **)(a1 + 8));
  uint64_t v13 = *(void *)(v11 + 112);
  if (!v13)
  {
LABEL_19:
    int v14 = 50;
    goto LABEL_29;
  }
  if (*(char *)(v13 + 13) < 0)
  {
    int v14 = 0;
    int v12 = 0;
    long long v15 = (uint64_t *)(*(void *)(a1 + 616) + 28);
  }
  else
  {
    if ((*(unsigned char *)(v13 + 17) & 4) == 0) {
      goto LABEL_19;
    }
    long long v15 = (uint64_t *)(*(void *)(a1 + 616) + 20);
    int v14 = 50;
  }
  uint64_t v16 = *v15;
  if ((int)v16 >= *(_DWORD *)(a1 + 648)) {
    int v17 = *(_DWORD *)(a1 + 648);
  }
  else {
    int v17 = v16;
  }
  if ((v16 & 0xFF00000000) != 0) {
    int v18 = v17;
  }
  else {
    int v18 = *(_DWORD *)(a1 + 648);
  }
  *(_DWORD *)(a1 + 648) = v18;
  if (*(char *)(v13 + 13) < 0) {
    goto LABEL_84;
  }
LABEL_29:
  uint64_t v19 = *(void *)(v5 + 112);
  if (v19 && (*(unsigned char *)(v19 + 13) & 0x20) != 0)
  {
    int v20 = *(_DWORD *)(a1 + 648);
    uint64_t v21 = *(void *)(*(void *)(a1 + 616) + 4);
    if ((int)v21 <= v20) {
      int v22 = *(_DWORD *)(a1 + 648);
    }
    else {
      int v22 = *(void *)(*(void *)(a1 + 616) + 4);
    }
    if ((v21 & 0xFF00000000) != 0) {
      int v20 = v22;
    }
    *(_DWORD *)(a1 + 648) = v20;
  }
  uint64_t v23 = *(uint64_t (**)(void, uint64_t))(a1 + 32);
  if (v23) {
    uint64_t v24 = (uint64_t *)v23(*(void *)(a1 + 40), v11);
  }
  else {
    uint64_t v24 = 0;
  }
  int v25 = *(llvm::ProfileSummaryInfo **)(a1 + 48);
  if (v25
    && *((void *)v25 + 1)
    && llvm::ProfileSummaryInfo::isHotCallSite(v25, (const llvm::BasicBlock **)v4, (llvm::BlockFrequencyInfoImplBase **)v24))
  {
    uint64_t v31 = *(void *)(*(void *)(a1 + 616) + 36);
  }
  else
  {
    if (!v24 || !*(unsigned char *)(*(void *)(a1 + 616) + 48)) {
      goto LABEL_50;
    }
    uint64_t v26 = *v24;
    if (*v24)
    {
      unsigned int v27 = sub_1CBF7A45C(*v24, *(void *)(v4 + 40));
      if (v27 == -1) {
        unint64_t v28 = 0;
      }
      else {
        unint64_t v28 = *(void *)(*(void *)(v26 + 8) + 24 * v27 + 16);
      }
      uint64_t v29 = *v24;
      if (*v24) {
        uint64_t v29 = *(void *)(*(void *)(v29 + 8) + 16);
      }
    }
    else
    {
      unint64_t v28 = 0;
      uint64_t v29 = 0;
    }
    if (v28 < v29 * dword_1EBCC5B70)
    {
LABEL_50:
      unint64_t v30 = 0;
      LOBYTE(v31) = 0;
      int v32 = 0;
      goto LABEL_53;
    }
    uint64_t v31 = *(void *)(*(void *)(a1 + 616) + 44);
  }
  int v32 = v31 & 0xFFFFFF00;
  unint64_t v30 = v31 & 0xFFFFFFFF00000000;
LABEL_53:
  uint64_t v33 = *(void *)(v11 + 112);
  if (v33)
  {
    if ((*(unsigned char *)(v33 + 17) & 4) != 0) {
      goto LABEL_59;
    }
    LOBYTE(v33) = *(char *)(v33 + 13) < 0;
  }
  if ((v33 & 1) == 0 && (v30 & 0xFF00000000) != 0)
  {
    int v34 = v32 | v31;
LABEL_83:
    *(_DWORD *)(a1 + 648) = v34;
    goto LABEL_84;
  }
LABEL_59:
  uint64_t v35 = *(llvm::ProfileSummaryInfo **)(a1 + 48);
  if (v35 && *((void *)v35 + 1))
  {
    if (llvm::ProfileSummaryInfo::isColdCallSite(v35, (const llvm::BasicBlock **)v4, (llvm::BlockFrequencyInfoImplBase **)v24))
    {
      goto LABEL_72;
    }
    goto LABEL_76;
  }
  if (!v24) {
    goto LABEL_76;
  }
  unint64_t v36 = (unint64_t)(((((unint64_t)dword_1EBCC5AB0 << 31) | 0x30)
                          * (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6;
  uint64_t v37 = *v24;
  if (*v24)
  {
    unsigned int v38 = sub_1CBF7A45C(*v24, *(void *)(v4 + 40));
    if (v38 == -1) {
      unint64_t v39 = 0;
    }
    else {
      unint64_t v39 = *(void *)(*(void *)(v37 + 8) + 24 * v38 + 16);
    }
    uint64_t v40 = *v24;
    if (*v24)
    {
      uint64_t v41 = *(void *)(*(void *)(*(void *)(v4 + 40) + 56) + 80);
      uint64_t v42 = v41 ? v41 - 24 : 0;
      unsigned int v43 = sub_1CBF7A45C(*v24, v42);
      if (v43 != -1)
      {
        unint64_t v44 = *(void *)(*(void *)(v40 + 8) + 24 * v43 + 16);
        goto LABEL_71;
      }
    }
  }
  else
  {
    unint64_t v39 = 0;
  }
  unint64_t v44 = 0;
LABEL_71:
  unint64_t v57 = v44;
  if (v39 < llvm::BlockFrequency::operator*(&v57, v36))
  {
LABEL_72:
    int v14 = 0;
    int v12 = 0;
    int v45 = 0;
    int v46 = *(_DWORD *)(a1 + 648);
    uint64_t v47 = *(void *)(*(void *)(a1 + 616) + 52);
    goto LABEL_87;
  }
LABEL_76:
  BOOL v48 = *(llvm::ProfileSummaryInfo **)(a1 + 48);
  if (v48)
  {
    if (llvm::ProfileSummaryInfo::isFunctionEntryHot(v48, (uint64_t ***)v5))
    {
      int v34 = *(_DWORD *)(a1 + 648);
      uint64_t v49 = *(void *)(*(void *)(a1 + 616) + 4);
      if ((int)v49 <= v34) {
        int v50 = *(_DWORD *)(a1 + 648);
      }
      else {
        int v50 = *(void *)(*(void *)(a1 + 616) + 4);
      }
      if ((v49 & 0xFF00000000) != 0) {
        int v34 = v50;
      }
      goto LABEL_83;
    }
    if (!llvm::ProfileSummaryInfo::isFunctionEntryCold(*(llvm::ProfileSummaryInfo **)(a1 + 48), (const llvm::Function *)v5))goto LABEL_84; {
    int v14 = 0;
    }
    int v12 = 0;
    int v45 = 0;
    int v46 = *(_DWORD *)(a1 + 648);
    uint64_t v47 = *(void *)(*(void *)(a1 + 616) + 12);
LABEL_87:
    if ((int)v47 >= v46) {
      int v51 = v46;
    }
    else {
      int v51 = v47;
    }
    if ((v47 & 0xFF00000000) != 0) {
      int v46 = v51;
    }
    *(_DWORD *)(a1 + 648) = v46;
    goto LABEL_93;
  }
LABEL_84:
  int v45 = -15000;
LABEL_93:
  *(_DWORD *)(a1 + 648) += (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 8) + 40))(**(void **)(a1 + 8), v4);
  int v52 = *(_DWORD *)(a1 + 648)
      * (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 32))(**(void **)(a1 + 8));
  *(_DWORD *)(a1 + 648) = v52;
  *(_DWORD *)(a1 + 608) = v52 * v14 / 100;
  *(_DWORD *)(a1 + 604) = v52 * v12 / 100;
  char v53 = *(llvm::Constant **)(a1 + 56);
  if ((*((_DWORD *)v53 + 8) & 0xFu) - 7 <= 1 && llvm::Constant::hasNLiveUses(v53, 1u))
  {
    uint64_t v54 = *(void *)(v4 - 32);
    if (!v54 || *(unsigned char *)(v54 + 16) || *(void *)(v54 + 24) != *(void *)(v4 + 72)) {
      uint64_t v54 = 0;
    }
    if (*(void *)(a1 + 56) == v54) {
      *(_DWORD *)(a1 + 656) += v45;
    }
  }
LABEL_101:
  *(_DWORD *)(a1 + 648) += *(_DWORD *)(a1 + 604) + *(_DWORD *)(a1 + 608);
  int v55 = *(_DWORD *)(a1 + 656) - llvm::getCallsiteCost(*(llvm **)(a1 + 80), *(llvm::CallBase **)(a1 + 64), a3);
  *(_DWORD *)(a1 + 656) = v55;
  if ((*(_WORD *)(*(void *)(a1 + 56) + 18) & 0x3FF0) == 0x90)
  {
    v55 += 2000;
    *(_DWORD *)(a1 + 656) = v55;
  }
  if (v55 < *(_DWORD *)(a1 + 648) || *(unsigned char *)(a1 + 596)) {
    return 0;
  }
  else {
    return "high cost";
  }
}

int32x2_t sub_1CC01E61C(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  int v3 = sub_1CD40EA84(*(void *)(a1 + 728), *(_DWORD *)(a1 + 744), a2, &v8);
  uint64_t v5 = (void *)v8;
  if (v3) {
    BOOL v6 = v8 == *(void *)(a1 + 728) + 16 * *(unsigned int *)(a1 + 744);
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    int v7 = *(_DWORD *)(v8 + 8);
    *(_DWORD *)(a1 + 656) += v7;
    *(_DWORD *)(a1 + 716) -= v7;
    *(_DWORD *)(a1 + 720) += v7;
    void *v5 = -8192;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 736), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 736) = result;
  }
  return result;
}

uint64_t sub_1CC01E6BC(uint64_t result)
{
  *(_DWORD *)(result + 656) += *(_DWORD *)(result + 600);
  *(_DWORD *)(result + 600) = 0;
  return result;
}

uint64_t sub_1CC01E6D4(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 84)
  {
    uint64_t v3 = 0;
  }
  else if (v2 == 39)
  {
    uint64_t v3 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v3 = 2;
  }
  int v4 = 0;
  int v5 = *(_DWORD *)(a2 + 20);
  uint64_t v6 = -(uint64_t)(v5 & 0x7FFFFFF);
  if (v5 < 0)
  {
    uint64_t v7 = a2 - 32 * (v5 & 0x7FFFFFF);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((v8 & 0xFFFFFFFF0) != 0) {
      int v4 = *(_DWORD *)(v7 - 12) - *(_DWORD *)(v7 - v8);
    }
    else {
      int v4 = 0;
    }
  }
  *(_DWORD *)(result + 656) += dword_1EBCC5C30
                             + 5 * ((-32 * v3 + 32 * (unint64_t)-v4 - 32 * v6 - 32) >> 5);
  return result;
}

BOOL sub_1CC01E77C(uint64_t a1, uint64_t a2)
{
  unint64_t StringFnAttrAsInt = llvm::getStringFnAttrAsInt(a2, "call-threshold-bonus", 0x14uLL);
  if (HIDWORD(StringFnAttrAsInt)) {
    *(_DWORD *)(a1 + 648) += StringFnAttrAsInt;
  }
  unint64_t v5 = llvm::getStringFnAttrAsInt(a2, "call-inline-cost", 0x10uLL);
  if (HIDWORD(v5)) {
    *(_DWORD *)(a1 + 656) += v5;
  }
  return HIDWORD(v5) == 0;
}

uint64_t sub_1CC01E7F8(uint64_t result)
{
  *(_DWORD *)(result + 656) += dword_1EBCC5C30;
  return result;
}

uint64_t sub_1CC01E810(uint64_t result)
{
  *(_DWORD *)(result + 600) += 5;
  return result;
}

uint64_t sub_1CC01E820(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 84)
  {
    uint64_t v3 = 0;
  }
  else if (v2 == 39)
  {
    uint64_t v3 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v3 = 2;
  }
  int v4 = 0;
  int v5 = *(_DWORD *)(a2 + 20);
  uint64_t v6 = -(uint64_t)(v5 & 0x7FFFFFF);
  if (v5 < 0)
  {
    uint64_t v7 = a2 - 32 * (v5 & 0x7FFFFFF);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((v8 & 0xFFFFFFFF0) != 0) {
      int v4 = *(_DWORD *)(v7 - 12) - *(_DWORD *)(v7 - v8);
    }
    else {
      int v4 = 0;
    }
  }
  *(_DWORD *)(result + 656) += 5 * ((-32 * v3 + 32 * (unint64_t)-v4 - 32 * v6 - 32) >> 5);
  return result;
}

uint64_t sub_1CC01E8BC(uint64_t result)
{
  *(_DWORD *)(result + 656) += 15;
  return result;
}

void *sub_1CC01E8CC(void *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = result;
  int v9 = *(unsigned __int8 *)(a3 + 16);
  if (v9 == 84)
  {
    uint64_t v10 = 0;
  }
  else if (v9 == 39)
  {
    uint64_t v10 = (*(_DWORD *)(a3 + 80) + 1);
  }
  else
  {
    uint64_t v10 = 2;
  }
  int v11 = 0;
  int v12 = *(_DWORD *)(a3 + 20);
  uint64_t v13 = -(uint64_t)(v12 & 0x7FFFFFF);
  if (v12 < 0)
  {
    uint64_t v19 = a3 - 32 * (v12 & 0x7FFFFFF);
    uint64_t v20 = *(void *)(v19 - 8);
    if ((v20 & 0xFFFFFFFF0) != 0) {
      int v11 = *(_DWORD *)(v19 - 12) - *(_DWORD *)(v19 - v20);
    }
    else {
      int v11 = 0;
    }
  }
  int v14 = 5 * ((-32 * v10 + 32 * (unint64_t)-v11 - 32 * v13 - 32) >> 5) + *((_DWORD *)result + 164);
  *((_DWORD *)result + 164) = v14;
  if (a4 && *((unsigned char *)result + 652))
  {
    uint64_t v15 = result[77];
    v24[0] = *(_OWORD *)v15;
    long long v16 = *(_OWORD *)(v15 + 16);
    long long v17 = *(_OWORD *)(v15 + 32);
    long long v18 = *(_OWORD *)(v15 + 48);
    int v25 = *(_DWORD *)(v15 + 64);
    void v24[2] = v17;
    void v24[3] = v18;
    v24[1] = v16;
    LODWORD(v24[0]) = 100;
    sub_1CC01A920((uint64_t)v21, a2, a3, (uint64_t)v24, result[1], result[2], result[3], a8, result[4], result[5], result[6], result[9], 0, 0);
    if (!sub_1CC01AA4C(v21)) {
      *((_DWORD *)v8 + 164) -= (v22 - v23) & ~((v22 - v23) >> 31);
    }
    return sub_1CC01BFF8((uint64_t)v21);
  }
  else
  {
    *((_DWORD *)result + 164) = dword_1EBCC5C30 + v14;
  }
  return result;
}

uint64_t sub_1CC01EA34()
{
  return 1;
}

uint64_t sub_1CC01EA3C()
{
  return 1;
}

uint64_t sub_1CC01EA44(uint64_t result, int a2, unsigned int a3)
{
  if (a2)
  {
    int v3 = *(_DWORD *)(result + 592);
    int v4 = 5 * a2 + *(_DWORD *)(result + 656) + 20;
  }
  else
  {
    if (a3 <= 3)
    {
      int v4 = *(_DWORD *)(result + 656) + 10 * a3;
      goto LABEL_8;
    }
    int v3 = *(_DWORD *)(result + 592);
    int v4 = *(_DWORD *)(result + 656) + 10 * (3 * (int)a3 / 2) - 10;
  }
  if (v4 >= v3) {
    int v4 = v3;
  }
LABEL_8:
  *(_DWORD *)(result + 656) = v4;
  return result;
}

uint64_t sub_1CC01EAB0(uint64_t result)
{
  *(_DWORD *)(result + 656) += 5;
  return result;
}

uint64_t sub_1CC01EAC0(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t result = sub_1CC01F8D4(*(void *)(a1 + 728), *(_DWORD *)(a1 + 744), a2, &v8);
  uint64_t v5 = v8;
  if (result) {
    goto LABEL_8;
  }
  uint64_t result = a1 + 728;
  int v6 = *(_DWORD *)(a1 + 736);
  unsigned int v7 = *(_DWORD *)(a1 + 744);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 740) > v7 >> 3) {
      goto LABEL_5;
    }
  }
  else
  {
    v7 *= 2;
  }
  sub_1CC01F968(result, v7);
  uint64_t v8 = 0;
  uint64_t result = sub_1CC01F8D4(*(void *)(a1 + 728), *(_DWORD *)(a1 + 744), a2, &v8);
  uint64_t v5 = v8;
LABEL_5:
  ++*(_DWORD *)(a1 + 736);
  if (*(void *)v5 != -4096) {
    --*(_DWORD *)(a1 + 740);
  }
  *(void *)uint64_t v5 = a2;
  *(_DWORD *)(v5 + 8) = 0;
LABEL_8:
  *(_DWORD *)(v5 + 8) = 0;
  return result;
}

uint64_t sub_1CC01EBA0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  uint64_t result = sub_1CD40EA84(*(void *)(a1 + 728), *(_DWORD *)(a1 + 744), a2, &v5);
  if (result) {
    uint64_t v4 = v5;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 728) + 16 * *(unsigned int *)(a1 + 744);
  }
  *(_DWORD *)(v4 + 8) += 5;
  *(_DWORD *)(a1 + 716) += 5;
  return result;
}

void sub_1CC01EC14(void *a1)
{
  sub_1CC01ECAC(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC01EC5C()
{
  return 0;
}

uint64_t sub_1CC01EC64()
{
  return 0;
}

uint64_t sub_1CC01EC6C()
{
  return 0;
}

uint64_t sub_1CC01EC80()
{
  return 1;
}

void *sub_1CC01ECAC(void *a1)
{
  *a1 = &unk_1F2604488;
  int v2 = (void *)a1[52];
  if (v2 != (void *)a1[51]) {
    free(v2);
  }
  MEMORY[0x1D25D9CD0](a1[47], 8);
  int v3 = (void *)a1[28];
  if (v3 != (void *)a1[27]) {
    free(v3);
  }
  sub_1CC01ED54((uint64_t)(a1 + 24));
  MEMORY[0x1D25D9CD0](a1[24], 8);
  MEMORY[0x1D25D9CD0](a1[21], 8);
  MEMORY[0x1D25D9CD0](a1[18], 8);
  MEMORY[0x1D25D9CD0](a1[15], 8);
  return a1;
}

uint64_t sub_1CC01ED54(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 32 * v1;
    uint64_t v3 = *(void *)result + 16;
    do
    {
      uint64_t v4 = *(void *)(v3 - 16);
      if (v4 != -4096 && v4 != -8192 && *(_DWORD *)(v3 + 8) >= 0x41u)
      {
        uint64_t result = *(void *)v3;
        if (*(void *)v3)
        {
          uint64_t v5 = v3;
          uint64_t v6 = v2;
          uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          uint64_t v3 = v5;
          uint64_t v2 = v6;
        }
      }
      v3 += 32;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

void sub_1CC01EDE0()
{
}

void sub_1CC01EDF4(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v45 = a2;
  uint64_t v46 = 0;
  if (sub_1CC01F510(*(void *)(v6 + 624), *(_DWORD *)(v6 + 640), a2, &v46))
  {
    uint64_t v7 = v46;
    uint64_t v8 = *(void *)(v6 + 624);
    unsigned int v9 = *(_DWORD *)(v6 + 640);
  }
  else
  {
    uint64_t v8 = *(void *)(v6 + 624);
    unsigned int v9 = *(_DWORD *)(v6 + 640);
    uint64_t v7 = v8 + 24 * v9;
  }
  if (v7 == v8 + 24 * v9)
  {
    uint64_t v40 = (void *)*((void *)a3 + 4);
    if (*((void *)a3 + 3) - (void)v40 > 0x20uLL)
    {
      qmemcpy(v40, "; No analysis for the instruction", 33);
      *((void *)a3 + 4) += 33;
    }
    else
    {
      llvm::raw_ostream::write(a3, "; No analysis for the instruction", 0x21uLL);
    }
    goto LABEL_31;
  }
  uint64_t v10 = (int *)sub_1CC01F318(v6 + 624, &v45);
  unint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  unint64_t v13 = v10[2];
  unint64_t v14 = v10[3];
  uint64_t v15 = (_OWORD *)*((void *)a3 + 4);
  if (*((void *)a3 + 3) - (void)v15 > 0xFuLL)
  {
    *uint64_t v15 = *(_OWORD *)"; cost before = ";
    *((void *)a3 + 4) += 16;
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else
  {
    llvm::raw_ostream::write(a3, "; cost before = ", 0x10uLL);
    if ((v11 & 0x80000000) == 0)
    {
LABEL_7:
      long long v16 = a3;
      unint64_t v17 = v11;
      int v18 = 0;
      goto LABEL_8;
    }
  }
  unint64_t v17 = -(uint64_t)v11;
  long long v16 = a3;
  int v18 = 1;
LABEL_8:
  sub_1CD098D14(v16, v17, 0, 0, v18);
  uint64_t v19 = (void *)*((void *)a3 + 4);
  if (*((void *)a3 + 3) - (void)v19 > 0xEuLL)
  {
    qmemcpy(v19, ", cost after = ", 15);
    *((void *)a3 + 4) += 15;
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_10;
    }
  }
  else
  {
    llvm::raw_ostream::write(a3, ", cost after = ", 0xFuLL);
    if ((v12 & 0x80000000) == 0)
    {
LABEL_10:
      uint64_t v20 = a3;
      unint64_t v21 = v12;
      int v22 = 0;
      goto LABEL_11;
    }
  }
  unint64_t v21 = -(uint64_t)v12;
  uint64_t v20 = a3;
  int v22 = 1;
LABEL_11:
  sub_1CD098D14(v20, v21, 0, 0, v22);
  int v23 = (void *)*((void *)a3 + 4);
  if (*((void *)a3 + 3) - (void)v23 > 0x14uLL)
  {
    qmemcpy(v23, ", threshold before = ", 21);
    *((void *)a3 + 4) += 21;
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_13;
    }
  }
  else
  {
    llvm::raw_ostream::write(a3, ", threshold before = ", 0x15uLL);
    if ((v13 & 0x80000000) == 0)
    {
LABEL_13:
      uint64_t v24 = a3;
      unint64_t v25 = v13;
      int v26 = 0;
      goto LABEL_14;
    }
  }
  unint64_t v25 = -(uint64_t)v13;
  uint64_t v24 = a3;
  int v26 = 1;
LABEL_14:
  sub_1CD098D14(v24, v25, 0, 0, v26);
  uint64_t v27 = *((void *)a3 + 4);
  if ((unint64_t)(*((void *)a3 + 3) - v27) > 0x13)
  {
    *(_DWORD *)(v27 + 16) = 540876914;
    *(_OWORD *)uint64_t v27 = *(_OWORD *)", threshold after = ";
    *((void *)a3 + 4) += 20;
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  else
  {
    llvm::raw_ostream::write(a3, ", threshold after = ", 0x14uLL);
    if ((v14 & 0x80000000) == 0)
    {
LABEL_16:
      unint64_t v28 = a3;
      unint64_t v29 = v14;
      int v30 = 0;
      goto LABEL_17;
    }
  }
  unint64_t v29 = -(uint64_t)v14;
  unint64_t v28 = a3;
  int v30 = 1;
LABEL_17:
  sub_1CD098D14(v28, v29, 0, 0, v30);
  uint64_t v31 = (_WORD *)*((void *)a3 + 4);
  if (*((void *)a3 + 3) - (void)v31 > 1uLL)
  {
    *uint64_t v31 = 8236;
    int v32 = (void *)(*((void *)a3 + 4) + 2);
    *((void *)a3 + 4) = v32;
  }
  else
  {
    llvm::raw_ostream::write(a3, ", ", 2uLL);
    int v32 = (void *)*((void *)a3 + 4);
  }
  if (*((void *)a3 + 3) - (void)v32 > 0xCuLL)
  {
    qmemcpy(v32, "cost delta = ", 13);
    *((void *)a3 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(a3, "cost delta = ", 0xDuLL);
  }
  unint64_t v33 = v12 - v11;
  if (v12 - v11 < 0)
  {
    unint64_t v33 = v11 - v12;
    int v34 = a3;
    int v35 = 1;
  }
  else
  {
    int v34 = a3;
    int v35 = 0;
  }
  sub_1CD098D14(v34, v33, 0, 0, v35);
  if (v14 != v13)
  {
    uint64_t v36 = *((void *)a3 + 4);
    if ((unint64_t)(*((void *)a3 + 3) - v36) > 0x13)
    {
      *(_DWORD *)(v36 + 16) = 540876897;
      *(_OWORD *)uint64_t v36 = *(_OWORD *)", threshold delta = ";
      *((void *)a3 + 4) += 20;
    }
    else
    {
      llvm::raw_ostream::write(a3, ", threshold delta = ", 0x14uLL);
    }
    unint64_t v37 = (int)v14 - (int)v13;
    if ((int)v14 - (int)v13 < 0)
    {
      unint64_t v37 = -(uint64_t)((int)v14 - (int)v13);
      unsigned int v38 = a3;
      int v39 = 1;
    }
    else
    {
      unsigned int v38 = a3;
      int v39 = 0;
    }
    sub_1CD098D14(v38, v37, 0, 0, v39);
  }
LABEL_31:
  uint64_t v41 = *(void *)(a1 + 8);
  uint64_t v45 = a2;
  uint64_t v46 = 0;
  if (sub_1CC01F5A8((uint64_t *)(v41 + 120), &v45, &v46)
    && v46 != *(void *)(v41 + 120) + 16 * *(unsigned int *)(v41 + 136))
  {
    uint64_t v46 = a2;
    unsigned int v43 = (llvm::Value *)sub_1CC01F644((uint64_t *)(v41 + 120), &v46)[1];
    unint64_t v44 = (_OWORD *)*((void *)a3 + 4);
    if (*((void *)a3 + 3) - (void)v44 > 0xFuLL)
    {
      *unint64_t v44 = *(_OWORD *)", simplified to ";
      *((void *)a3 + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(a3, ", simplified to ", 0x10uLL);
    }
    llvm::Value::print(v43, a3, 1);
  }
  uint64_t v42 = (unsigned char *)*((void *)a3 + 4);
  if (*((unsigned char **)a3 + 3) == v42)
  {
    llvm::raw_ostream::write(a3, "\n", 1uLL);
  }
  else
  {
    *uint64_t v42 = 10;
    ++*((void *)a3 + 4);
  }
}

uint64_t *sub_1CC01F318(uint64_t a1, uint64_t *a2)
{
  unint64_t v25 = 0;
  char v4 = sub_1CC01F510(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v25);
  uint64_t v5 = v25;
  if (v4) {
    return v5 + 1;
  }
  int v26 = v25;
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  if (4 * v6 + 4 >= (3 * v7))
  {
    int v8 = 2 * v7;
    goto LABEL_9;
  }
  int v8 = *(_DWORD *)(a1 + 16);
  if ((int)v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    uint64_t v11 = *(void *)a1;
    unint64_t v12 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1);
    unint64_t v13 = v12 | (v12 >> 2) | ((v12 | (v12 >> 2)) >> 4);
    int v14 = ((v13 | (v13 >> 8)) >> 16) | v13 | (v13 >> 8);
    if ((v14 + 1) > 0x40) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 64;
    }
    *(_DWORD *)(a1 + 16) = v15;
    long long v16 = operator new(24 * v15, (std::align_val_t)8uLL);
    *(void *)a1 = v16;
    if (v11)
    {
      *(void *)(a1 + 8) = 0;
      uint64_t v17 = *(unsigned int *)(a1 + 16);
      if (v17)
      {
        uint64_t v18 = 24 * v17;
        do
        {
          *long long v16 = -4096;
          v16 += 3;
          v18 -= 24;
        }
        while (v18);
      }
      if (v7)
      {
        uint64_t v19 = (_OWORD *)(v11 + 8);
        uint64_t v20 = 24 * v7;
        do
        {
          uint64_t v21 = *((void *)v19 - 1);
          if ((v21 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            uint64_t v27 = 0;
            sub_1CC01F510(*(void *)a1, *(_DWORD *)(a1 + 16), v21, &v27);
            int v22 = v27;
            *uint64_t v27 = v21;
            *(_OWORD *)(v22 + 1) = *v19;
            ++*(_DWORD *)(a1 + 8);
          }
          uint64_t v19 = (_OWORD *)((char *)v19 + 24);
          v20 -= 24;
        }
        while (v20);
      }
      MEMORY[0x1D25D9CD0](v11, 8);
      long long v16 = *(void **)a1;
      LODWORD(v23) = *(_DWORD *)(a1 + 16);
    }
    else
    {
      *(void *)(a1 + 8) = 0;
      uint64_t v23 = *(unsigned int *)(a1 + 16);
      if (v23)
      {
        uint64_t v24 = 0;
        do
        {
          v16[v24] = -4096;
          v24 += 3;
        }
        while (3 * v23 != v24);
      }
    }
    sub_1CC01F510((uint64_t)v16, v23, *a2, &v26);
    int v6 = *(_DWORD *)(a1 + 8);
    uint64_t v5 = v26;
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (*v5 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  uint64_t v9 = *a2;
  v5[1] = 0;
  void v5[2] = 0;
  uint64_t *v5 = v9;
  return v5 + 1;
}

uint64_t sub_1CC01F510(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v6 = (void *)(a1 + 24 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        int v6 = (void *)(a1 + 24 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        int v6 = v10;
      }
    }
  }
  else
  {
    int v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t sub_1CC01F5A8(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v6 = *a1;
    int v7 = v3 - 1;
    unsigned int v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    int v4 = (void *)(*a1 + 16 * v8);
    uint64_t v9 = *v4;
    if (*a2 == *v4)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v9 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v9 == -8192;
        }
        if (v12) {
          uint64_t v10 = v4;
        }
        unsigned int v13 = v8 + v11++;
        unsigned int v8 = v13 & v7;
        int v4 = (void *)(v6 + 16 * (v13 & v7));
        uint64_t v9 = *v4;
        if (*a2 == *v4) {
          goto LABEL_3;
        }
      }
      uint64_t result = 0;
      if (v10) {
        int v4 = v10;
      }
    }
  }
  else
  {
    int v4 = 0;
    uint64_t result = 0;
  }
LABEL_3:
  *a3 = v4;
  return result;
}

void *sub_1CC01F644(uint64_t *a1, void *a2)
{
  int v7 = 0;
  char v4 = sub_1CBFFD518(a1, a2, &v7);
  unsigned int v5 = v7;
  if ((v4 & 1) == 0)
  {
    unsigned int v5 = sub_1CC01F6A4((uint64_t)a1, (uint64_t)a2, a2, v7);
    void *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CC01F6A4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CC01F758(a1, v7);
  uint64_t v9 = 0;
  sub_1CBFFD518((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC01F758(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC01F824(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC01F824(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      uint64_t result = sub_1CBFFD518((uint64_t *)v5, a2, &v10);
      uint64_t v9 = v10;
      *uint64_t v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CC01F8D4(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v8 = v6;
        }
        unsigned int v13 = v5 + v9++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 16 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v10 = 1;
        if (*v6 == a3) {
          goto LABEL_9;
        }
      }
      uint64_t v10 = 0;
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v10 = 0;
  }
LABEL_9:
  *a4 = v6;
  return v10;
}

void *sub_1CC01F968(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD494B28(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1CC01FA34(llvm::SmallPtrSetImplBase *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = *((unsigned int *)this + 5);
  if (v5 == *(void *)this)
  {
    if (v6)
    {
      int v7 = 0;
      uint64_t v8 = 8 * v6;
      int v9 = (void *)*((void *)this + 1);
      while (*v9 != v4)
      {
        if (*v9 == -2) {
          int v7 = v9;
        }
        ++v9;
        v8 -= 8;
        if (!v8)
        {
          if (!v7) {
            goto LABEL_9;
          }
          void *v7 = v4;
          --*((_DWORD *)this + 6);
          goto LABEL_11;
        }
      }
      return;
    }
LABEL_9:
    unsigned int v10 = *((_DWORD *)this + 4);
    if (v6 < v10)
    {
      *((_DWORD *)this + 5) = v6 + 1;
      *(void *)(v5 + 8 * v6) = v4;
LABEL_11:
      uint64_t v11 = *a2;
      unsigned int v12 = *((_DWORD *)this + 42);
      if (v12 >= *((_DWORD *)this + 43)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*((void *)this + 20) + 8 * v12) = v11;
      ++*((_DWORD *)this + 42);
      return;
    }
  }
  else
  {
    unsigned int v10 = *((_DWORD *)this + 4);
  }
  if (3 * v10 <= 4 * ((int)v6 - *((_DWORD *)this + 6)))
  {
    if (v10 >= 0x40) {
      v10 *= 2;
    }
    else {
      unsigned int v10 = 128;
    }
  }
  else if (v10 - v6 >= v10 >> 3)
  {
    goto LABEL_17;
  }
  llvm::SmallPtrSetImplBase::Grow(this, v10);
  unsigned int v10 = *((_DWORD *)this + 4);
  uint64_t v5 = *((void *)this + 1);
LABEL_17:
  unsigned int v13 = v10 - 1;
  unsigned int v14 = (v10 - 1) & ((v4 >> 4) ^ (v4 >> 9));
  unsigned int v15 = (void *)(v5 + 8 * v14);
  uint64_t v16 = *v15;
  if (*v15 != -1)
  {
    uint64_t v17 = 0;
    int v18 = 1;
    while (v16 != v4)
    {
      if (v17) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v16 == -2;
      }
      if (v19) {
        uint64_t v17 = v15;
      }
      unsigned int v20 = v14 + v18++;
      unsigned int v14 = v20 & v13;
      unsigned int v15 = (void *)(v5 + 8 * (v20 & v13));
      uint64_t v16 = *v15;
      if (*v15 == -1) {
        goto LABEL_29;
      }
    }
    return;
  }
  uint64_t v17 = 0;
LABEL_29:
  if (v17) {
    uint64_t v21 = v17;
  }
  else {
    uint64_t v21 = v15;
  }
  if (*v21 != v4)
  {
    if (*v21 == -2) {
      --*((_DWORD *)this + 6);
    }
    else {
      ++*((_DWORD *)this + 5);
    }
    *uint64_t v21 = v4;
    goto LABEL_11;
  }
}

void sub_1CC01FC00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v37[4] = *MEMORY[0x1E4F143B8];
  uint64_t v33 = a1;
  uint64_t v3 = *(void *)(a2 + 40);
  if (v3 != a2 + 40)
  {
    if (v3) {
      uint64_t v4 = v3 - 24;
    }
    else {
      uint64_t v4 = 0;
    }
    if (*(unsigned char *)(v4 + 16) != 30)
    {
      int v31 = 2;
      switch(*(unsigned char *)(v4 + 16))
      {
        case 0x1E:
LABEL_86:
          __break(1u);
          goto LABEL_87;
        case 0x1F:
          int v31 = (*(_DWORD *)(v4 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_84;
        case 0x20:
        case 0x26:
          int v31 = (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_84;
        case 0x21:
          goto LABEL_10;
        case 0x24:
          int v31 = *(_WORD *)(v4 + 18) & 1;
          goto LABEL_84;
        case 0x25:
LABEL_87:
          int v31 = 1;
          goto LABEL_10;
        case 0x27:
          int v31 = *(_DWORD *)(v4 + 80) + 1;
LABEL_84:
          if (!v31) {
            return;
          }
          goto LABEL_10;
        default:
          return;
      }
    }
    if ((*(_DWORD *)(v4 + 20) & 0x7FFFFFF) == 3) {
      int v31 = 2;
    }
    else {
      int v31 = 1;
    }
LABEL_10:
    unsigned int v6 = 0;
    while (1)
    {
      uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v4, v6);
      if (Successor != a3)
      {
        uint64_t v8 = Successor;
        if (sub_1CC025290(a1, &v33, Successor)) {
          break;
        }
      }
LABEL_80:
      if (v31 == ++v6) {
        return;
      }
    }
    int v34 = v37;
    unsigned int v36 = 4;
    unsigned int v9 = 1;
    v37[0] = v8;
    while (1)
    {
      uint64_t v10 = *((void *)v34 + v9 - 1);
      unsigned int v35 = v9 - 1;
      uint64_t v11 = *(void *)(a1 + 224);
      uint64_t v12 = *(unsigned int *)(a1 + 236);
      if (v11 == *(void *)(a1 + 216))
      {
        if (v12)
        {
          unsigned int v13 = 0;
          uint64_t v14 = 8 * v12;
          unsigned int v15 = *(void **)(a1 + 224);
          while (*v15 != v10)
          {
            if (*v15 == -2) {
              unsigned int v13 = v15;
            }
            ++v15;
            v14 -= 8;
            if (!v14)
            {
              if (!v13) {
                goto LABEL_22;
              }
              *unsigned int v13 = v10;
              --*(_DWORD *)(a1 + 240);
              goto LABEL_46;
            }
          }
          goto LABEL_63;
        }
LABEL_22:
        unsigned int v16 = *(_DWORD *)(a1 + 232);
        if (v12 < v16)
        {
          *(_DWORD *)(a1 + 236) = v12 + 1;
          *(void *)(v11 + 8 * v12) = v10;
          goto LABEL_46;
        }
      }
      else
      {
        unsigned int v16 = *(_DWORD *)(a1 + 232);
      }
      if (3 * v16 <= 4 * ((int)v12 - *(_DWORD *)(a1 + 240))) {
        break;
      }
      if (v16 - v12 < v16 >> 3) {
        goto LABEL_73;
      }
LABEL_27:
      unsigned int v17 = v16 - 1;
      unsigned int v18 = (v16 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      BOOL v19 = (void *)(v11 + 8 * v18);
      uint64_t v20 = *v19;
      if (*v19 != -1)
      {
        uint64_t v21 = 0;
        int v22 = 1;
        while (v20 != v10)
        {
          if (v21) {
            BOOL v23 = 0;
          }
          else {
            BOOL v23 = v20 == -2;
          }
          if (v23) {
            uint64_t v21 = v19;
          }
          unsigned int v24 = v18 + v22++;
          unsigned int v18 = v24 & v17;
          BOOL v19 = (void *)(v11 + 8 * (v24 & v17));
          uint64_t v20 = *v19;
          if (*v19 == -1) {
            goto LABEL_39;
          }
        }
        goto LABEL_63;
      }
      uint64_t v21 = 0;
LABEL_39:
      if (v21) {
        unint64_t v25 = v21;
      }
      else {
        unint64_t v25 = v19;
      }
      if (*v25 == v10) {
        goto LABEL_63;
      }
      if (*v25 == -2) {
        --*(_DWORD *)(a1 + 240);
      }
      else {
        ++*(_DWORD *)(a1 + 236);
      }
      *unint64_t v25 = v10;
LABEL_46:
      uint64_t v26 = *(void *)(v10 + 40);
      if (v26 != v10 + 40)
      {
        if (v26) {
          uint64_t v27 = v26 - 24;
        }
        else {
          uint64_t v27 = 0;
        }
        if (*(unsigned char *)(v27 + 16) == 30)
        {
          if ((*(_DWORD *)(v27 + 20) & 0x7FFFFFF) == 3) {
            int v30 = 2;
          }
          else {
            int v30 = 1;
          }
        }
        else
        {
          int v30 = 2;
          switch(*(unsigned char *)(v27 + 16))
          {
            case 0x1E:
              goto LABEL_86;
            case 0x1F:
              int v30 = (*(_DWORD *)(v27 + 20) >> 1) & 0x3FFFFFF;
              break;
            case 0x20:
            case 0x26:
              int v30 = (*(_DWORD *)(v27 + 20) & 0x7FFFFFF) - 1;
              break;
            case 0x21:
              goto LABEL_55;
            case 0x24:
              int v30 = *(_WORD *)(v27 + 18) & 1;
              break;
            case 0x25:
              int v30 = 1;
              goto LABEL_55;
            case 0x27:
              int v30 = *(_DWORD *)(v27 + 80) + 1;
              break;
            default:
              goto LABEL_63;
          }
          if (!v30) {
            goto LABEL_63;
          }
        }
LABEL_55:
        for (unsigned int i = 0; i != v30; ++i)
        {
          uint64_t v29 = llvm::Instruction::getSuccessor((llvm::Instruction *)v27, i);
          if (sub_1CC025290(a1, &v33, v29))
          {
            if (v35 >= (unint64_t)v36) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v34 + v35++) = v29;
          }
        }
      }
LABEL_63:
      unsigned int v9 = v35;
      if (!v35)
      {
        if (v34 != v37) {
          free(v34);
        }
        goto LABEL_80;
      }
    }
    if (v16 >= 0x40) {
      v16 *= 2;
    }
    else {
      unsigned int v16 = 128;
    }
LABEL_73:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 216), v16);
    unsigned int v16 = *(_DWORD *)(a1 + 232);
    uint64_t v11 = *(void *)(a1 + 224);
    goto LABEL_27;
  }
}

uint64_t sub_1CC020094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  unsigned int v6 = *(_DWORD *)(*(void *)a2 + 8);
  if ((v6 & 0xFE) == 0x12) {
    unsigned int v6 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  uint64_t v7 = *(void *)(v5 + 232);
  if (v6 < 0x100) {
    goto LABEL_12;
  }
  unsigned int v8 = v6 >> 8;
  unint64_t v9 = *(unsigned int *)(v5 + 240);
  uint64_t v10 = *(void *)(v5 + 232);
  if (v9)
  {
    uint64_t v10 = v7;
    unint64_t v11 = v9;
    do
    {
      unint64_t v12 = v11 >> 1;
      uint64_t v13 = v10 + 16 * (v11 >> 1);
      unsigned int v14 = *(_DWORD *)(v13 + 8);
      uint64_t v15 = v13 + 16;
      v11 += ~(v11 >> 1);
      if (v14 < v8) {
        uint64_t v10 = v15;
      }
      else {
        unint64_t v11 = v12;
      }
    }
    while (v11);
  }
  if (v10 == v7 + 16 * v9 || *(_DWORD *)(v10 + 8) != v8) {
LABEL_12:
  }
    uint64_t v10 = v7;
  uint64_t v16 = 24;
  if (*(unsigned char *)(a2 + 16) == 62) {
    uint64_t v16 = 64;
  }
  uint64_t v17 = *(void *)(a2 + v16);
  int v18 = *(_DWORD *)(a2 + 20);
  if ((v18 & 0x40000000) != 0)
  {
    uint64_t v20 = *(void *)(a2 - 8);
    uint64_t v19 = v18 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v19 = v18 & 0x7FFFFFF;
    uint64_t v20 = a2 - 32 * v19;
  }
  unsigned int v21 = *(_DWORD *)(v10 + 12);
  int v22 = (unint64_t *)(v20 + 32);
  int v81 = (llvm::Constant **)(v20 + 32);
  uint64_t v82 = v17 | 4;
  if (v19 == 1) {
    return 1;
  }
  unsigned int v24 = (llvm::Constant **)(v20 + 32 * v19);
  unint64_t v25 = (uint64_t *)(a1 + 120);
  uint64_t v74 = (uint64_t *)(a1 + 120);
  while (1)
  {
    unint64_t v26 = *v22;
    if (!v26 || *(unsigned char *)(v26 + 16) != 16)
    {
      unint64_t v79 = v26;
      uint64_t v77 = 0;
      if ((sub_1CC01F5A8(v25, &v79, &v77) & 1) == 0) {
        return 0;
      }
      unint64_t v26 = v77[1];
      if (!v26 || *(unsigned char *)(v26 + 16) != 16) {
        return 0;
      }
    }
    unint64_t v28 = (_DWORD **)(v26 + 24);
    uint64_t v29 = *(unsigned int *)(v26 + 32);
    if (v29 > 0x40)
    {
      int v33 = 0;
      int64_t v34 = (unint64_t)(v29 + 63) >> 6;
      do
      {
        if (v34-- < 1) {
          break;
        }
        unint64_t v36 = *(void *)&(*v28)[2 * v34];
        v33 += __clz(v36);
      }
      while (!v36);
      int v37 = v29 | 0xFFFFFFC0;
      if ((v29 & 0x3F) == 0) {
        int v37 = 0;
      }
      if (v33 + v37 == v29) {
        goto LABEL_81;
      }
      uint64_t v31 = v82 & 4;
      int v32 = (llvm::StructType *)(v82 & 0xFFFFFFFFFFFFFFF8);
      if ((v82 & 4) == 0 && v32)
      {
        LODWORD(v30) = **v28;
LABEL_42:
        uint64_t v38 = *((void *)llvm::DataLayout::getStructLayout(*(llvm::DataLayout **)(a1 + 64), v32) + v30 + 2);
        if (v21 > 0x40) {
          operator new[]();
        }
        unint64_t v39 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v21;
        if (!v21) {
          unint64_t v39 = 0;
        }
        uint64_t v40 = (uint64_t *)(v39 & v38);
        uint64_t v41 = *(unsigned int *)(a3 + 8);
        if (v41 >= 0x41)
        {
          uint64_t v58 = 0;
          unint64_t v59 = *(unint64_t **)a3;
          unint64_t v60 = (unint64_t)(v41 + 63) >> 6;
          unsigned int v61 = v40;
          unint64_t v62 = v60;
          do
          {
            uint64_t v63 = *v61++;
            unint64_t v64 = v63 + *v59;
            BOOL v65 = v64 + 1 <= *v59;
            if (v58)
            {
              ++v64;
              uint64_t v58 = v65;
            }
            else
            {
              uint64_t v58 = v64 < *v59;
            }
            *v59++ = v64;
            --v62;
          }
          while (v62);
          *(void *)(*(void *)a3 + 8 * (v60 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v41;
          unint64_t v25 = v74;
        }
        else
        {
          if (v41) {
            unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v41;
          }
          else {
            unint64_t v42 = 0;
          }
          *(void *)a3 = v42 & ((unint64_t)v40 + *(void *)a3);
        }
        goto LABEL_81;
      }
      goto LABEL_50;
    }
    int v30 = *v28;
    if (*v28)
    {
      uint64_t v31 = v82 & 4;
      int v32 = (llvm::StructType *)(v82 & 0xFFFFFFFFFFFFFFF8);
      if ((v82 & 4) == 0 && v32) {
        goto LABEL_42;
      }
LABEL_50:
      unsigned int v43 = *(llvm::DataLayout **)(a1 + 64);
      if (v32) {
        BOOL v44 = v31 == 0;
      }
      else {
        BOOL v44 = 1;
      }
      if (v44)
      {
        AggregateElement = *v81;
        if (*v81) {
          BOOL v46 = *((unsigned char *)*v81 + 16) == 16;
        }
        else {
          BOOL v46 = 0;
        }
        if (!v46) {
          AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement(AggregateElement, 0);
        }
        uint64_t v49 = (unsigned int *)*((void *)AggregateElement + 3);
        uint64_t v47 = (unsigned int *)((char *)AggregateElement + 24);
        BOOL v48 = v49;
        if (v47[2] < 0x41) {
          BOOL v48 = v47;
        }
        int v32 = *(llvm::StructType **)(*((void *)v32 + 2) + 8 * *v48);
      }
      uint64_t v50 = sub_1CB83544C((uint64_t)v43, (uint64_t)v32);
      BOOL v52 = v51 == 1;
      char Alignment = llvm::DataLayout::getAlignment(v43, v32, 1);
      if (v52) {
      unsigned int v80 = v21;
      }
      if (v21 > 0x40) {
        operator new[]();
      }
      unint64_t v55 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v21;
      unint64_t v25 = v74;
      if (!v21) {
        unint64_t v55 = 0;
      }
      unint64_t v79 = v55 & ((1 << Alignment) + ((unint64_t)(v50 + 7) >> 3) - 1) & -(1 << Alignment);
      llvm::APInt::sextOrTrunc((uint64_t)v28, v21, (uint64_t)&v75);
      llvm::APInt::operator*((uint64_t)&v75, &v79, (uint64_t)&v77);
      uint64_t v56 = *(unsigned int *)(a3 + 8);
      if (v56 >= 0x41)
      {
        uint64_t v66 = 0;
        uint64_t v67 = *(unint64_t **)a3;
        uint64_t v68 = v77;
        unint64_t v69 = (unint64_t)(v56 + 63) >> 6;
        unint64_t v70 = v69;
        do
        {
          uint64_t v71 = *v68++;
          unint64_t v72 = v71 + *v67;
          BOOL v73 = v72 + 1 <= *v67;
          if (v66)
          {
            ++v72;
            uint64_t v66 = v73;
          }
          else
          {
            uint64_t v66 = v72 < *v67;
          }
          *v67++ = v72;
          --v70;
        }
        while (v70);
        *(void *)(*(void *)a3 + 8 * (v69 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v56;
        unint64_t v25 = v74;
      }
      else
      {
        if (v56) {
          unint64_t v57 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v56;
        }
        else {
          unint64_t v57 = 0;
        }
        *(void *)a3 = v57 & ((unint64_t)v77 + *(void *)a3);
      }
      if (v78 >= 0x41 && v77) {
        MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
      }
      if (v76 >= 0x41 && v75) {
        MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
      }
      if (v80 >= 0x41)
      {
        if (v79) {
          MEMORY[0x1D25D9CB0](v79, 0x1000C8000313F17);
        }
      }
    }
LABEL_81:
    sub_1CB8460E4((uint64_t)&v81);
    int v22 = (unint64_t *)v81;
    if (v81 == v24) {
      return 1;
    }
  }
}

uint64_t sub_1CC0206AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = 0;
  char v4 = sub_1CBB082D8(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  uint64_t result = v9;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1CC020798(a1, v7);
    uint64_t v9 = 0;
    sub_1CBB082D8(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    uint64_t result = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  uint64_t v8 = *a2;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = v8;
  *(_DWORD *)(result + 24) = 1;
  return result;
}

void *sub_1CC020798(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD494BD8(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 32 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

void *sub_1CC020864(uint64_t *a1, void *a2)
{
  int v7 = 0;
  char v4 = sub_1CBFFD518(a1, a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = sub_1CC0208C4((uint64_t)a1, (uint64_t)a2, a2, v7);
    void *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CC0208C4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC01F758(a1, v7);
  uint64_t v9 = 0;
  sub_1CBFFD518((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC020978@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (!v6)
  {
    uint64_t v16 = 0;
LABEL_15:
    uint64_t result = sub_1CC020AF8(a1, (uint64_t)a2, a2, v16);
    *uint64_t result = *a2;
    uint64_t v7 = *(void *)a1;
    unsigned int v6 = *(_DWORD *)(a1 + 16);
    char v15 = 1;
    goto LABEL_16;
  }
  uint64_t v7 = *(void *)a1;
  unsigned int v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v6 - 1);
  uint64_t result = (void *)(*(void *)a1 + 8 * v8);
  uint64_t v10 = *result;
  if (*a2 != *result)
  {
    uint64_t v11 = 0;
    int v12 = 1;
    while (v10 != -4096)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v10 == -8192;
      }
      if (v13) {
        uint64_t v11 = result;
      }
      unsigned int v14 = v8 + v12++;
      unsigned int v8 = v14 & (v6 - 1);
      uint64_t result = (void *)(v7 + 8 * v8);
      uint64_t v10 = *result;
      if (*a2 == *result) {
        goto LABEL_11;
      }
    }
    if (v11) {
      uint64_t v16 = v11;
    }
    else {
      uint64_t v16 = result;
    }
    goto LABEL_15;
  }
LABEL_11:
  char v15 = 0;
LABEL_16:
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v7 + 8 * v6;
  *(unsigned char *)(a3 + 16) = v15;
  return result;
}

uint64_t sub_1CC020A5C(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 8 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v9) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          uint64_t v9 = v7;
        }
        unsigned int v13 = v6 + v10++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 8 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_14;
        }
      }
      uint64_t result = 0;
      if (v9) {
        uint64_t v7 = v9;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_14:
  *a3 = v7;
  return result;
}

void *sub_1CC020AF8(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CBB24F14(a1, v7);
      uint64_t v17 = 0;
      sub_1CC020A5C((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CBB24F14(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 8 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    unsigned int v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        unsigned int v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 8 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

uint64_t sub_1CC020C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  uint64_t v319 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = 0;
  switch(*(unsigned char *)(a2 + 16))
  {
    case 0x1E:
      if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 1 || *(unsigned char *)(*(void *)(a2 - 96) + 16) == 16) {
        return 1;
      }
      int v315 = *(void **)(a2 - 96);
      size_t v312 = 0;
      if ((sub_1CC01F5A8((uint64_t *)(a1 + 120), &v315, &v312) & 1) == 0) {
        return 0;
      }
      uint64_t v41 = *((void *)v312 + 1);
      if (!v41) {
        return 0;
      }
      return *(unsigned __int8 *)(v41 + 16) == 16;
    case 0x1F:
      int v30 = *(_DWORD *)(a2 + 20);
      if ((v30 & 0x40000000) != 0) {
        uint64_t v31 = *(unsigned char ***)(a2 - 8);
      }
      else {
        uint64_t v31 = (unsigned char **)(a2 - 32 * (v30 & 0x7FFFFFF));
      }
      size_t v135 = *v31;
      if (v135[16] == 16) {
        return 1;
      }
      int v315 = v135;
      size_t v312 = 0;
      if (sub_1CC01F5A8((uint64_t *)(a1 + 120), &v315, &v312))
      {
        uint64_t v136 = *((void *)v312 + 1);
        if (v136)
        {
          if (*(unsigned char *)(v136 + 16) == 16) {
            return 1;
          }
        }
      }
      LODWORD(v315) = 0;
      int v137 = *(uint64_t (**)(void, void))(a1 + 32);
      if (v137) {
        uint64_t v138 = v137(*(void *)(a1 + 40), *(void *)(a1 + 56));
      }
      else {
        uint64_t v138 = 0;
      }
      uint64_t v208 = (*(uint64_t (**)(void, uint64_t, void **, void, uint64_t))(***(void ***)(a1 + 8) + 64))(**(void **)(a1 + 8), a2, &v315, *(void *)(a1 + 48), v138);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 160))(a1, v315, v208);
      return 0;
    case 0x20:
      uint64_t v7 = 0;
      *(unsigned char *)(a1 + 94) = 1;
      return v7;
    case 0x21:
    case 0x27:
    case 0x54:
      return sub_1CC0232B8(a1, a2);
    case 0x22:
    case 0x24:
    case 0x25:
      return v7;
    case 0x23:
      return 1;
    case 0x26:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x4F:
    case 0x50:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5B:
    case 0x5E:
    case 0x5F:
      return sub_1CC023CD8((int32x2_t *)a1, a2);
    case 0x28:
      uint64_t v35 = *(void *)(a2 - 32);
      if (v35) {
        BOOL v36 = *(unsigned __int8 *)(v35 + 16) >= 0x15u;
      }
      else {
        BOOL v36 = 1;
      }
      int v37 = *(unsigned __int8 **)(a2 - 32);
      if (v36)
      {
        int v315 = *(void **)(a2 - 32);
        size_t v312 = 0;
        int v38 = sub_1CC01F5A8((uint64_t *)(a1 + 120), &v315, &v312);
        int v37 = 0;
        if (v38) {
          int v37 = (unsigned __int8 *)*((void *)v312 + 1);
        }
      }
      if (v37) {
        unint64_t v39 = v37;
      }
      else {
        unint64_t v39 = (unsigned __int8 *)v35;
      }
      int v315 = *(void **)(a1 + 64);
      *(_OWORD *)__s1 = 0u;
      long long v317 = 0u;
      __int16 v318 = 257;
      uint64_t v40 = sub_1CC03952C(v39, (uint64_t)&v315, a3, a4, a5);
      if (v40)
      {
        if (*(unsigned __int8 *)(v40 + 16) <= 0x14u)
        {
          int v315 = (void *)a2;
          sub_1CC01F644((uint64_t *)(a1 + 120), &v315)[1] = v40;
        }
        return 1;
      }
      uint64_t v203 = sub_1CC023C0C(a1, v35);
      if (v203) {
        sub_1CC023EB0((int32x2_t *)a1, v203);
      }
      return 0;
    case 0x29:
    case 0x2A:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
      return sub_1CC023F9C(a1, (unsigned __int8 *)a2);
    case 0x2B:
      size_t v94 = *(llvm::ConstantInt ****)(a2 - 64);
      int v95 = *(llvm::ConstantInt ****)(a2 - 32);
      unsigned int v311 = 1;
      unint64_t v310 = 0;
      sub_1CC0244BC((uint64_t)&v315, *(void *)(a1 + 192), *(_DWORD *)(a1 + 208), (uint64_t)v94);
      BOOL v96 = v315;
      size_t v312 = __s1[0];
      LODWORD(__s2) = __s1[1];
      if (v315
        && (sub_1CC0244BC((uint64_t)&v315, *(void *)(a1 + 192), *(_DWORD *)(a1 + 208), (uint64_t)v95),
            unint64_t v310 = __s1[0],
            unsigned int v311 = __s1[1],
            v315)
        && v96 == v315
        && (int v98 = (llvm::ConstantExpr *)llvm::ConstantInt::get(**v94, (llvm::LLVMContext *)&v312, v97),
            uint64_t v100 = (llvm::Constant *)llvm::ConstantInt::get(**v95, (llvm::LLVMContext *)&v310, v99),
            (Sub = llvm::ConstantExpr::getSub(v98, v100, 0, 0)) != 0))
      {
        int v315 = (void *)a2;
        sub_1CC01F644((uint64_t *)(a1 + 120), &v315)[1] = Sub;
        ++*(_DWORD *)(a1 + 584);
        uint64_t v7 = 1;
      }
      else
      {
        uint64_t v7 = sub_1CC023F9C(a1, (unsigned __int8 *)a2);
      }
      if (v311 >= 0x41 && v310) {
        MEMORY[0x1D25D9CB0](v310, 0x1000C8000313F17);
      }
      if (__s2 < 0x41 || !v312) {
        return v7;
      }
      goto LABEL_247;
    case 0x3B:
      uint64_t v9 = sub_1CC023C0C(a1, *(void *)(a2 - 32));
      if (v9) {
        sub_1CC023EB0((int32x2_t *)a1, v9);
      }
      if (!llvm::AllocaInst::isArrayAllocation((llvm::AllocaInst *)a2)
        || (v315 = *(void **)(a2 - 32), size_t v312 = 0, (sub_1CC01F5A8((uint64_t *)(a1 + 120), &v315, &v312) & 1) == 0)
        || (uint64_t v10 = *((void *)v312 + 1)) == 0
        || *(unsigned char *)(v10 + 16) != 16)
      {
        if (*(unsigned char *)(*(void *)(a2 - 32) + 16) == 16)
        {
          uint64_t v115 = *(void *)(a2 + 40);
          uint64_t v116 = *(void *)(*(void *)(v115 + 56) + 80);
          uint64_t v117 = v116 ? v116 - 24 : 0;
          if (v115 != v117 || (*(_WORD *)(a2 + 18) & 0x40) != 0) {
            goto LABEL_225;
          }
          int v118 = *(llvm::Type **)(a2 + 64);
          uint64_t v119 = *(llvm::DataLayout **)(a1 + 64);
          unint64_t v120 = (unint64_t)(sub_1CB83544C((uint64_t)v119, (uint64_t)v118) + 7) >> 3;
          char Alignment = llvm::DataLayout::getAlignment(v119, v118, 1);
          uint64_t v122 = ((1 << Alignment) + v120 - 1) & -(1 << Alignment);
          unint64_t v123 = *(void *)(a1 + 104);
          BOOL v36 = __CFADD__(v122, v123);
          unint64_t v124 = v122 + v123;
          int v125 = v36;
          if (v124 < v123) {
            int v126 = 1;
          }
          else {
            int v126 = v125;
          }
          if (v126) {
            unint64_t v124 = -1;
          }
          *(void *)(a1 + 104) = v124;
          if (*(unsigned char *)(*(void *)(a2 - 32) + 16) == 16)
          {
LABEL_225:
            uint64_t v127 = *(void *)(a2 + 40);
            uint64_t v128 = *(void *)(*(void *)(v127 + 56) + 80);
            uint64_t v129 = v128 ? v128 - 24 : 0;
            if (v127 == v129 && (*(_WORD *)(a2 + 18) & 0x40) == 0) {
              return 0;
            }
          }
        }
        goto LABEL_230;
      }
      unsigned int v11 = *(llvm::Type **)(a2 + 64);
      uint64_t v12 = (unint64_t *)(v10 + 24);
      uint64_t v13 = *(unsigned int *)(v10 + 32);
      if (v13 < 0x41) {
        goto LABEL_565;
      }
      int v14 = 0;
      int64_t v15 = (unint64_t)(v13 + 63) >> 6;
      do
      {
        BOOL v16 = v15-- < 1;
        if (v16) {
          break;
        }
        unint64_t v17 = *(void *)(*v12 + 8 * v15);
        v14 += __clz(v17);
      }
      while (!v17);
      int v18 = v13 | 0xFFFFFFC0;
      if ((v13 & 0x3F) == 0) {
        int v18 = 0;
      }
      if ((v13 - v14 - v18) <= 0x40)
      {
        uint64_t v12 = (unint64_t *)*v12;
LABEL_565:
        unint64_t v19 = *v12;
      }
      else
      {
        unint64_t v19 = -1;
      }
      uint64_t v277 = *(llvm::DataLayout **)(a1 + 64);
      unint64_t v278 = (unint64_t)(sub_1CB83544C((uint64_t)v277, (uint64_t)v11) + 7) >> 3;
      char v279 = llvm::DataLayout::getAlignment(v277, v11, 1);
      unint64_t v280 = ((1 << v279) + v278 - 1) & -(1 << v279);
      uint64_t v281 = *(void *)(a1 + 104);
      unsigned int v282 = __clz(v280) + __clz(v19);
      if (v282 < 0x40)
      {
        if (v282 != 63) {
          goto LABEL_579;
        }
        unint64_t v285 = v280 * (v19 >> 1);
        if ((v285 & 0x8000000000000000) != 0) {
          goto LABEL_579;
        }
        unint64_t v283 = 2 * v285;
        if (v19)
        {
          BOOL v286 = v283 + v280 >= v283 && v283 + v280 >= v280;
          v283 += v280;
          if (!v286) {
            goto LABEL_579;
          }
        }
      }
      else
      {
        unint64_t v283 = v280 * v19;
      }
      BOOL v36 = __CFADD__(v283, v281);
      unint64_t v284 = v283 + v281;
      if (!v36 && v284 >= v283)
      {
        *(void *)(a1 + 104) = v284;
        if (v284 <= 0x10000) {
          return 0;
        }
LABEL_230:
        uint64_t v7 = 0;
        *(unsigned char *)(a1 + 91) = 1;
        return v7;
      }
LABEL_579:
      *(void *)(a1 + 104) = -1;
      goto LABEL_230;
    case 0x3C:
      if (sub_1CC024554((int32x2_t *)a1, *(void *)(a2 - 32), (*(_WORD *)(a2 + 18) & 0x381) == 0)) {
        return 1;
      }
      if (!*(unsigned char *)(a1 + 400)) {
        return 0;
      }
      uint64_t v23 = *(void *)(a2 - 32);
      uint64_t v24 = *(void *)(a1 + 416);
      uint64_t v25 = *(unsigned int *)(a1 + 428);
      if (v24 == *(void *)(a1 + 408))
      {
        if (v25)
        {
          unint64_t v26 = 0;
          uint64_t v27 = 8 * v25;
          unint64_t v28 = *(void **)(a1 + 416);
          do
          {
            if (*v28 == v23) {
              goto LABEL_546;
            }
            if (*v28 == -2) {
              unint64_t v26 = v28;
            }
            ++v28;
            v27 -= 8;
          }
          while (v27);
          if (v26)
          {
            uint64_t v7 = 0;
            *unint64_t v26 = v23;
            --*(_DWORD *)(a1 + 432);
            return v7;
          }
        }
        unsigned int v29 = *(_DWORD *)(a1 + 424);
        if (v25 < v29)
        {
          uint64_t v7 = 0;
          *(_DWORD *)(a1 + 428) = v25 + 1;
          *(void *)(v24 + 8 * v25) = v23;
          return v7;
        }
      }
      else
      {
        unsigned int v29 = *(_DWORD *)(a1 + 424);
      }
      if (3 * v29 <= 4 * ((int)v25 - *(_DWORD *)(a1 + 432)))
      {
        if (v29 >= 0x40) {
          v29 *= 2;
        }
        else {
          unsigned int v29 = 128;
        }
      }
      else if (v29 - v25 >= v29 >> 3)
      {
        goto LABEL_422;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 408), v29);
      unsigned int v29 = *(_DWORD *)(a1 + 424);
      uint64_t v24 = *(void *)(a1 + 416);
LABEL_422:
      unsigned int v212 = v29 - 1;
      unsigned int v213 = (v29 - 1) & ((v23 >> 4) ^ (v23 >> 9));
      int v214 = (void *)(v24 + 8 * v213);
      uint64_t v215 = *v214;
      if (*v214 == -1)
      {
        size_t v216 = 0;
      }
      else
      {
        size_t v216 = 0;
        int v217 = 1;
        do
        {
          if (v215 == v23) {
            goto LABEL_546;
          }
          if (v216) {
            BOOL v218 = 0;
          }
          else {
            BOOL v218 = v215 == -2;
          }
          if (v218) {
            size_t v216 = v214;
          }
          unsigned int v219 = v213 + v217++;
          unsigned int v213 = v219 & v212;
          int v214 = (void *)(v24 + 8 * (v219 & v212));
          uint64_t v215 = *v214;
        }
        while (*v214 != -1);
      }
      if (v216) {
        v272 = v216;
      }
      else {
        v272 = v214;
      }
      if (*v272 != v23)
      {
        if (*v272 == -2) {
          --*(_DWORD *)(a1 + 432);
        }
        else {
          ++*(_DWORD *)(a1 + 428);
        }
        uint64_t v7 = 0;
        void *v272 = v23;
        return v7;
      }
LABEL_546:
      if ((*(_WORD *)(a2 + 18) & 0x301) != 0) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
      return 1;
    case 0x3D:
      if (sub_1CC024554((int32x2_t *)a1, *(void *)(a2 - 32), (*(_WORD *)(a2 + 18) & 0x381) == 0)) {
        return 1;
      }
      if (!*(unsigned char *)(a1 + 400)) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
      uint64_t v7 = 0;
      *(unsigned char *)(a1 + 400) = 0;
      return v7;
    case 0x3E:
      int v108 = *(_DWORD *)(a2 + 20);
      uint64_t v109 = v108 & 0x7FFFFFF;
      BOOL v110 = (uint64_t *)(a2 - 32 * v109);
      uint64_t v43 = sub_1CC023C0C(a1, *v110);
      if (byte_1EBCC5DB0) {
        goto LABEL_496;
      }
      size_t v312 = v314;
      __s2 = (void *)0x200000000;
      if ((v108 & 0x40000000) != 0) {
        BOOL v110 = *(uint64_t **)(a2 - 8);
      }
      unsigned int v111 = 0;
      if (!v109)
      {
        int v315 = &__s1[1];
        __s1[0] = (void *)0x200000000;
LABEL_486:
        v249 = &__s1[1];
        goto LABEL_487;
      }
      uint64_t v112 = 32 * v109;
      do
      {
        uint64_t v113 = *v110;
        if (*v110) {
          BOOL v114 = *(unsigned __int8 *)(*v110 + 16) >= 0x15u;
        }
        else {
          BOOL v114 = 1;
        }
        if (v114)
        {
          int v315 = (void *)*v110;
          unint64_t v310 = 0;
          if ((sub_1CC01F5A8((uint64_t *)(a1 + 120), &v315, &v310) & 1) == 0) {
            goto LABEL_491;
          }
          uint64_t v113 = v310[1];
          if (!v113) {
            goto LABEL_491;
          }
          unsigned int v111 = __s2;
        }
        if (v111 >= HIDWORD(__s2)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v312 + v111) = v113;
        unsigned int v111 = __s2 + 1;
        LODWORD(__s2) = __s2 + 1;
        v110 += 4;
        v112 -= 32;
      }
      while (v112);
      int v315 = &__s1[1];
      __s1[0] = (void *)0x200000000;
      if (v111 < 2)
      {
        unsigned int v111 = 0;
        goto LABEL_486;
      }
      unsigned int v111 = 0;
      unint64_t v220 = 1;
      do
      {
        if (v111 >= HIDWORD(__s1[0])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v315 + v111) = *((void *)v312 + v220);
        unsigned int v111 = ++LODWORD(__s1[0]);
        ++v220;
      }
      while (v220 < __s2);
      v249 = (void **)v315;
LABEL_487:
      uint64_t ElementPtr = llvm::ConstantExpr::getGetElementPtr(*(void *)(a2 + 64), *(uint64_t **)v312, (uint64_t)v249, v111, (*(unsigned char *)(a2 + 17) & 2) != 0, 0, 0);
      if (v315 != &__s1[1]) {
        free(v315);
      }
      if (ElementPtr)
      {
        int v315 = (void *)a2;
        sub_1CC01F644((uint64_t *)(a1 + 120), &v315)[1] = ElementPtr;
        char v251 = 1;
        goto LABEL_492;
      }
LABEL_491:
      char v251 = 0;
LABEL_492:
      if (v312 != v314) {
        free(v312);
      }
      if (v251) {
        return 1;
      }
      int v108 = *(_DWORD *)(a2 + 20);
LABEL_496:
      if ((*(unsigned char *)(a2 + 17) & 2) != 0)
      {
        sub_1CC0244BC((uint64_t)&v315, *(void *)(a1 + 192), *(_DWORD *)(a1 + 208), *(void *)(a2 - 32 * (v108 & 0x7FFFFFF)));
        if (v315 && sub_1CC020094(a1, a2, (uint64_t)__s1))
        {
          size_t v312 = (void *)a2;
          uint64_t v252 = sub_1CC0206AC(a1 + 192, (uint64_t *)&v312);
          uint64_t v253 = v252;
          *(void *)(v252 + 8) = v315;
          int v254 = (int)__s1[1];
          if (*(_DWORD *)(v252 + 24) > 0x40u || LODWORD(__s1[1]) > 0x40)
          {
            int v256 = (void **)(v252 + 16);
            llvm::APInt::reallocate(v252 + 16, __s1[1]);
            uint64_t v257 = *(unsigned int *)(v253 + 24);
            if (v257 <= 0x40) {
              *int v256 = __s1[0];
            }
            else {
              memcpy(*v256, __s1[0], ((unint64_t)(v257 + 63) >> 3) & 0x3FFFFFF8);
            }
          }
          else
          {
            *(void **)(v252 + 16) = __s1[0];
            *(_DWORD *)(v252 + 24) = v254;
          }
          char v255 = 1;
        }
        else
        {
          char v255 = 0;
        }
        if (LODWORD(__s1[1]) >= 0x41 && __s1[0]) {
          MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
        }
        if (v255)
        {
LABEL_517:
          if (v43)
          {
            int v315 = (void *)a2;
            v260 = sub_1CC020864((uint64_t *)(a1 + 144), &v315);
LABEL_594:
            v260[1] = v43;
          }
          return 1;
        }
        int v108 = *(_DWORD *)(a2 + 20);
      }
      uint64_t v258 = v108 & 0x7FFFFFF;
      if (a2 - 32 * v258 + 32 == a2) {
        goto LABEL_517;
      }
      uint64_t v259 = 32 - 32 * v258;
      while (1)
      {
        if (*(unsigned __int8 *)(*(void *)(a2 + v259) + 16) >= 0x15u)
        {
          int v315 = *(void **)(a2 + v259);
          size_t v312 = 0;
          if ((sub_1CC01F5A8((uint64_t *)(a1 + 120), &v315, &v312) & 1) == 0 || !*((void *)v312 + 1)) {
            break;
          }
        }
        v259 += 32;
        if (!v259) {
          goto LABEL_517;
        }
      }
      if (v43) {
        sub_1CC023EB0((int32x2_t *)a1, v43);
      }
      uint64_t v261 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      int v262 = (void **)(a2 - 32 * v261);
      v263 = *v262;
      int v315 = &__s1[1];
      __s1[1] = v263;
      __s1[0] = (void *)0x400000001;
      if (v262 + 4 == (void **)a2)
      {
        BOOL v266 = &__s1[1];
      }
      else
      {
        uint64_t v264 = 32 - 32 * v261;
        do
        {
          size_t v312 = *(void **)(a2 + v264);
          unint64_t v310 = 0;
          if ((sub_1CC01F5A8((uint64_t *)(a1 + 120), &v312, &v310) & 1) == 0 || (uint64_t v265 = v310[1]) == 0) {
            uint64_t v265 = *(void *)(a2 + v264);
          }
          if (LODWORD(__s1[0]) >= (unint64_t)HIDWORD(__s1[0])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v315 + LODWORD(__s1[0])) = v265;
          ++LODWORD(__s1[0]);
          v264 += 32;
        }
        while (v264);
        BOOL v266 = (void **)v315;
      }
      uint64_t v267 = (*(uint64_t (**)(void, uint64_t, void **))(***(void ***)(a1 + 8) + 72))(**(void **)(a1 + 8), a2, v266);
      int v269 = v268;
      if (v315 != &__s1[1]) {
        free(v315);
      }
      BOOL v270 = v267 >= 0;
      BOOL v271 = v267 < 1;
      if (v269)
      {
        BOOL v270 = v269 >= 0;
        BOOL v271 = v269 < 1;
      }
      return v270 & v271;
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4E:
      return sub_1CC0245C4(a1, (void *)a2);
    case 0x4B:
      int v315 = &__s1[1];
      __s1[0] = (void *)0x200000000;
      int v102 = *(_DWORD *)(a2 + 20);
      if ((v102 & 0x40000000) != 0)
      {
        BOOL v104 = *(void ***)(a2 - 8);
        uint64_t v103 = v102 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v103 = v102 & 0x7FFFFFF;
        BOOL v104 = (void **)(a2 - 32 * v103);
      }
      unsigned int v147 = 0;
      uint64_t v148 = 32 * v103;
      do
      {
        int v149 = *v104;
        if (*v104) {
          BOOL v150 = *((unsigned __int8 *)*v104 + 16) >= 0x15u;
        }
        else {
          BOOL v150 = 1;
        }
        if (v150)
        {
          size_t v312 = *v104;
          unint64_t v310 = 0;
          if ((sub_1CC01F5A8((uint64_t *)(a1 + 120), &v312, &v310) & 1) == 0) {
            goto LABEL_360;
          }
          int v149 = (void *)v310[1];
          if (!v149) {
            goto LABEL_360;
          }
          unsigned int v147 = __s1[0];
        }
        if (v147 >= HIDWORD(__s1[0])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v315 + v147) = v149;
        unsigned int v147 = ++LODWORD(__s1[0]);
        v104 += 4;
        v148 -= 32;
      }
      while (v148);
      char v177 = sub_1CC56C0C0((llvm *)0x2F, *(llvm::detail::IEEEFloat **)v315, *(llvm::Constant **)a2, 0);
      if (v177)
      {
        size_t v312 = (void *)a2;
        sub_1CC01F644((uint64_t *)(a1 + 120), &v312)[1] = v177;
        char v178 = 1;
        goto LABEL_361;
      }
LABEL_360:
      char v178 = 0;
LABEL_361:
      if (v315 != &__s1[1]) {
        free(v315);
      }
      if (v178) {
        return 1;
      }
      int v179 = *(llvm::Constant **)a2;
      if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
        int v179 = (llvm::Constant *)**((void **)v179 + 2);
      }
      int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v179);
      uint64_t v181 = *(void *)(a2 - 32);
      unsigned int v182 = *(_DWORD *)(*(void *)v181 + 8);
      if ((v182 & 0xFE) == 0x12) {
        unsigned int v182 = *(_DWORD *)(**(void **)(*(void *)v181 + 16) + 8);
      }
      uint64_t v183 = *(void *)(a1 + 64);
      uint64_t v184 = *(void *)(v183 + 232);
      if (v182 < 0x100) {
        goto LABEL_377;
      }
      unsigned int v185 = v182 >> 8;
      unint64_t v186 = *(unsigned int *)(v183 + 240);
      uint64_t v187 = v184;
      if (v186)
      {
        uint64_t v187 = v184;
        unint64_t v188 = v186;
        do
        {
          unint64_t v189 = v188 >> 1;
          uint64_t v190 = v187 + 16 * (v188 >> 1);
          unsigned int v191 = *(_DWORD *)(v190 + 8);
          uint64_t v192 = v190 + 16;
          v188 += ~(v188 >> 1);
          if (v191 < v185) {
            uint64_t v187 = v192;
          }
          else {
            unint64_t v188 = v189;
          }
        }
        while (v188);
      }
      if (v187 == v184 + 16 * v186 || *(_DWORD *)(v187 + 8) != v185) {
LABEL_377:
      }
        uint64_t v187 = v184;
      if (*(_DWORD *)(v187 + 4) == PrimitiveSizeInBits)
      {
        sub_1CC0244BC((uint64_t)&v315, *(void *)(a1 + 192), *(_DWORD *)(a1 + 208), v181);
        size_t v193 = v315;
        if (v315)
        {
          size_t v312 = (void *)a2;
          uint64_t v194 = sub_1CC0206AC(a1 + 192, (uint64_t *)&v312);
          uint64_t v195 = v194;
          *(void *)(v194 + 8) = v193;
          unsigned int v196 = __s1[1];
          if (*(_DWORD *)(v194 + 24) > 0x40u || LODWORD(__s1[1]) > 0x40)
          {
            size_t v231 = (void **)(v194 + 16);
            llvm::APInt::reallocate(v194 + 16, __s1[1]);
            uint64_t v232 = *(unsigned int *)(v195 + 24);
            if (v232 <= 0x40) {
              *size_t v231 = __s1[0];
            }
            else {
              memcpy(*v231, __s1[0], ((unint64_t)(v232 + 63) >> 3) & 0x3FFFFFF8);
            }
          }
          else
          {
            *(void **)(v194 + 16) = __s1[0];
            *(_DWORD *)(v194 + 24) = v196;
          }
        }
        else
        {
          unsigned int v196 = __s1[1];
        }
        if (v196 >= 0x41 && __s1[0]) {
          MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
        }
        uint64_t v181 = *(void *)(a2 - 32);
      }
      uint64_t v233 = sub_1CC023C0C(a1, v181);
      if (v233)
      {
        int v315 = (void *)a2;
        sub_1CC020864((uint64_t *)(a1 + 144), &v315)[1] = v233;
      }
      size_t v224 = *(void **)(a1 + 8);
      int v234 = *(_DWORD *)(a2 + 20);
      if ((v234 & 0x40000000) != 0)
      {
        v235 = *(void ***)(a2 - 8);
        unint64_t v226 = v234 & 0x7FFFFFF;
      }
      else
      {
        unint64_t v226 = v234 & 0x7FFFFFF;
        v235 = (void **)(a2 - 32 * v226);
      }
      int v315 = &__s1[1];
      __s1[0] = (void *)0x400000000;
      if (v226 >= 5) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (!v226) {
        goto LABEL_470;
      }
      uint64_t v236 = 32 * v226;
      size_t v237 = &__s1[1];
      do
      {
        int v238 = *v235;
        v235 += 4;
        *v237++ = v238;
        v236 -= 32;
      }
      while (v236);
      goto LABEL_469;
    case 0x4C:
      int v315 = &__s1[1];
      __s1[0] = (void *)0x200000000;
      int v32 = *(_DWORD *)(a2 + 20);
      if ((v32 & 0x40000000) != 0)
      {
        int64_t v34 = *(void ***)(a2 - 8);
        uint64_t v33 = v32 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v33 = v32 & 0x7FFFFFF;
        int64_t v34 = (void **)(a2 - 32 * v33);
      }
      unsigned int v139 = 0;
      uint64_t v140 = 32 * v33;
      do
      {
        uint64_t v141 = *v34;
        if (*v34) {
          BOOL v142 = *((unsigned __int8 *)*v34 + 16) >= 0x15u;
        }
        else {
          BOOL v142 = 1;
        }
        if (v142)
        {
          size_t v312 = *v34;
          unint64_t v310 = 0;
          if ((sub_1CC01F5A8((uint64_t *)(a1 + 120), &v312, &v310) & 1) == 0) {
            goto LABEL_329;
          }
          uint64_t v141 = (void *)v310[1];
          if (!v141) {
            goto LABEL_329;
          }
          unsigned int v139 = __s1[0];
        }
        if (v139 >= HIDWORD(__s1[0])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v315 + v139) = v141;
        unsigned int v139 = ++LODWORD(__s1[0]);
        v34 += 4;
        v140 -= 32;
      }
      while (v140);
      size_t v157 = sub_1CC56C0C0((llvm *)0x30, *(llvm::detail::IEEEFloat **)v315, *(llvm::Constant **)a2, 0);
      if (v157)
      {
        size_t v312 = (void *)a2;
        sub_1CC01F644((uint64_t *)(a1 + 120), &v312)[1] = v157;
        char v158 = 1;
        goto LABEL_330;
      }
LABEL_329:
      char v158 = 0;
LABEL_330:
      if (v315 != &__s1[1]) {
        free(v315);
      }
      if (v158) {
        return 1;
      }
      uint64_t v159 = *(void *)(a2 - 32);
      size_t v160 = *(llvm::Type **)v159;
      if ((*(_DWORD *)(*(void *)v159 + 8) & 0xFE) == 0x12) {
        size_t v160 = (llvm::Type *)**((void **)v160 + 2);
      }
      unsigned int v161 = llvm::Type::getPrimitiveSizeInBits(v160);
      uint64_t v162 = *(void *)(a1 + 64);
      unsigned int v163 = *(_DWORD *)(*(void *)a2 + 8);
      if ((v163 & 0xFE) == 0x12) {
        unsigned int v163 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
      }
      uint64_t v164 = *(void *)(v162 + 232);
      if (v163 < 0x100) {
        goto LABEL_346;
      }
      unsigned int v165 = v163 >> 8;
      unint64_t v166 = *(unsigned int *)(v162 + 240);
      uint64_t v167 = *(void *)(v162 + 232);
      if (v166)
      {
        uint64_t v167 = v164;
        unint64_t v168 = v166;
        do
        {
          unint64_t v169 = v168 >> 1;
          uint64_t v170 = v167 + 16 * (v168 >> 1);
          unsigned int v171 = *(_DWORD *)(v170 + 8);
          uint64_t v172 = v170 + 16;
          v168 += ~(v168 >> 1);
          if (v171 < v165) {
            uint64_t v167 = v172;
          }
          else {
            unint64_t v168 = v169;
          }
        }
        while (v168);
      }
      if (v167 == v164 + 16 * v166 || *(_DWORD *)(v167 + 8) != v165) {
LABEL_346:
      }
        uint64_t v167 = v164;
      if (*(_DWORD *)(v167 + 4) >= v161)
      {
        sub_1CC0244BC((uint64_t)&v315, *(void *)(a1 + 192), *(_DWORD *)(a1 + 208), v159);
        char v173 = v315;
        if (v315)
        {
          size_t v312 = (void *)a2;
          uint64_t v174 = sub_1CC0206AC(a1 + 192, (uint64_t *)&v312);
          uint64_t v175 = v174;
          *(void *)(v174 + 8) = v173;
          unsigned int v176 = __s1[1];
          if (*(_DWORD *)(v174 + 24) > 0x40u || LODWORD(__s1[1]) > 0x40)
          {
            size_t v221 = (void **)(v174 + 16);
            llvm::APInt::reallocate(v174 + 16, __s1[1]);
            uint64_t v222 = *(unsigned int *)(v175 + 24);
            if (v222 <= 0x40) {
              *size_t v221 = __s1[0];
            }
            else {
              memcpy(*v221, __s1[0], ((unint64_t)(v222 + 63) >> 3) & 0x3FFFFFF8);
            }
          }
          else
          {
            *(void **)(v174 + 16) = __s1[0];
            *(_DWORD *)(v174 + 24) = v176;
          }
        }
        else
        {
          unsigned int v176 = __s1[1];
        }
        if (v176 >= 0x41 && __s1[0]) {
          MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
        }
      }
      uint64_t v223 = sub_1CC023C0C(a1, v159);
      if (v223)
      {
        int v315 = (void *)a2;
        sub_1CC020864((uint64_t *)(a1 + 144), &v315)[1] = v223;
      }
      size_t v224 = *(void **)(a1 + 8);
      int v225 = *(_DWORD *)(a2 + 20);
      if ((v225 & 0x40000000) != 0)
      {
        int v227 = *(void ***)(a2 - 8);
        unint64_t v226 = v225 & 0x7FFFFFF;
      }
      else
      {
        unint64_t v226 = v225 & 0x7FFFFFF;
        int v227 = (void **)(a2 - 32 * v226);
      }
      int v315 = &__s1[1];
      __s1[0] = (void *)0x400000000;
      if (v226 >= 5) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v226)
      {
        uint64_t v228 = 32 * v226;
        size_t v229 = &__s1[1];
        do
        {
          size_t v230 = *v227;
          v227 += 4;
          *v229++ = v230;
          v228 -= 32;
        }
        while (v228);
LABEL_469:
        size_t v239 = (void **)v315;
      }
      else
      {
LABEL_470:
        size_t v239 = &__s1[1];
      }
      LODWORD(__s1[0]) = v226;
      uint64_t v240 = (*(uint64_t (**)(void, uint64_t, void **))(*(void *)*v224 + 72))(*v224, a2, v239);
      int v242 = v241;
      if (v315 != &__s1[1]) {
        free(v315);
      }
      BOOL v243 = v240 < 0;
      if (v242) {
        BOOL v243 = v242 < 0;
      }
      if (v243) {
        return 0;
      }
      if (v242) {
        return v242 < 1;
      }
      else {
        return v240 < 1;
      }
    case 0x4D:
      int v315 = &__s1[1];
      __s1[0] = (void *)0x200000000;
      int v105 = *(_DWORD *)(a2 + 20);
      if ((v105 & 0x40000000) != 0)
      {
        int v107 = *(void ***)(a2 - 8);
        uint64_t v106 = v105 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v106 = v105 & 0x7FFFFFF;
        int v107 = (void **)(a2 - 32 * v106);
      }
      unsigned int v151 = 0;
      uint64_t v152 = 32 * v106;
      do
      {
        uint64_t v153 = *v107;
        if (*v107) {
          BOOL v154 = *((unsigned __int8 *)*v107 + 16) >= 0x15u;
        }
        else {
          BOOL v154 = 1;
        }
        if (v154)
        {
          size_t v312 = *v107;
          unint64_t v310 = 0;
          if ((sub_1CC01F5A8((uint64_t *)(a1 + 120), &v312, &v310) & 1) == 0) {
            goto LABEL_386;
          }
          uint64_t v153 = (void *)v310[1];
          if (!v153) {
            goto LABEL_386;
          }
          unsigned int v151 = __s1[0];
        }
        if (v151 >= HIDWORD(__s1[0])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v315 + v151) = v153;
        unsigned int v151 = ++LODWORD(__s1[0]);
        v107 += 4;
        v152 -= 32;
      }
      while (v152);
      uint64_t v197 = *(llvm::detail::IEEEFloat **)v315;
      if (**(void **)v315 == *(void *)a2
        || (uint64_t v197 = sub_1CC56C0C0((llvm *)0x31, *(llvm::detail::IEEEFloat **)v315, *(llvm::Constant **)a2, 0)) != 0)
      {
        size_t v312 = (void *)a2;
        sub_1CC01F644((uint64_t *)(a1 + 120), &v312)[1] = v197;
        char v198 = 1;
        goto LABEL_387;
      }
LABEL_386:
      char v198 = 0;
LABEL_387:
      if (v315 != &__s1[1]) {
        free(v315);
      }
      if ((v198 & 1) == 0)
      {
        sub_1CC0244BC((uint64_t)&v315, *(void *)(a1 + 192), *(_DWORD *)(a1 + 208), *(void *)(a2 - 32));
        size_t v199 = v315;
        if (v315)
        {
          size_t v312 = (void *)a2;
          uint64_t v200 = sub_1CC0206AC(a1 + 192, (uint64_t *)&v312);
          uint64_t v201 = v200;
          *(void *)(v200 + 8) = v199;
          int v202 = (int)__s1[1];
          if (*(_DWORD *)(v200 + 24) > 0x40u || LODWORD(__s1[1]) > 0x40)
          {
            int v209 = (void **)(v200 + 16);
            llvm::APInt::reallocate(v200 + 16, __s1[1]);
            uint64_t v210 = *(unsigned int *)(v201 + 24);
            if (v210 <= 0x40) {
              *int v209 = __s1[0];
            }
            else {
              memcpy(*v209, __s1[0], ((unint64_t)(v210 + 63) >> 3) & 0x3FFFFFF8);
            }
          }
          else
          {
            *(void **)(v200 + 16) = __s1[0];
            *(_DWORD *)(v200 + 24) = v202;
          }
        }
        uint64_t v211 = sub_1CC023C0C(a1, *(void *)(a2 - 32));
        if (v211)
        {
          size_t v312 = (void *)a2;
          sub_1CC020864((uint64_t *)(a1 + 144), &v312)[1] = v211;
        }
        if (LODWORD(__s1[1]) >= 0x41) {
          goto LABEL_416;
        }
      }
      return 1;
    case 0x51:
    case 0x52:
      return sub_1CC024948(a1, (uint64_t ***)a2, a3, a4, (BOOL)a5);
    case 0x53:
      unsigned int v54 = *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 232) + 4);
      unsigned int v308 = v54;
      if (v54 > 0x40) {
        operator new[]();
      }
      int v305 = *(unsigned __int8 *)(*(void *)a2 + 8);
      int v315 = 0;
      __s1[0] = 0;
      LODWORD(__s1[1]) = v54;
      int v55 = *(_DWORD *)(a2 + 20);
      uint64_t v56 = v55 & 0x7FFFFFF;
      if ((v55 & 0x7FFFFFF) == 0) {
        goto LABEL_243;
      }
      uint64_t v57 = 0;
      uint64_t v58 = (uint64_t *)(a1 + 376);
      int v304 = (uint64_t *)(a1 + 120);
      uint64_t v302 = a1 + 192;
      uint64_t v303 = 0;
      uint64_t v306 = 0;
      size_t v307 = (uint64_t *)(a1 + 376);
      while (2)
      {
        uint64_t v309 = 0;
        if ((v55 & 0x40000000) != 0) {
          uint64_t v59 = *(void *)(a2 - 8);
        }
        else {
          uint64_t v59 = a2 - 32 * (v55 & 0x7FFFFFF);
        }
        uint64_t v60 = *(void *)(v59 + 32 * *(unsigned int *)(a2 + 60) + 8 * v57);
        uint64_t v309 = v60;
        uint64_t v62 = *(void *)(a1 + 216);
        uint64_t v61 = *(void *)(a1 + 224);
        if (v61 == v62)
        {
          uint64_t v63 = *(unsigned int *)(a1 + 236);
          unint64_t v64 = (void *)(v61 + 8 * v63);
          if (v63)
          {
            uint64_t v65 = 0;
            uint64_t v66 = 8 * v63;
            while (*(void *)(v61 + v65) != v60)
            {
              v65 += 8;
              if (v66 == v65) {
                goto LABEL_117;
              }
            }
            unint64_t v64 = (void *)(v61 + v65);
          }
LABEL_117:
          uint64_t v62 = *(void *)(a1 + 224);
          goto LABEL_118;
        }
        uint64_t v67 = *(unsigned int *)(a1 + 232);
        int v68 = v67 - 1;
        unsigned int v69 = (v67 - 1) & ((v60 >> 4) ^ (v60 >> 9));
        unint64_t v64 = (void *)(v61 + 8 * v69);
        uint64_t v70 = *v64;
        if (*v64 == -1)
        {
          uint64_t v71 = 0;
        }
        else
        {
          uint64_t v71 = 0;
          int v72 = 1;
          do
          {
            if (v70 == v60) {
              goto LABEL_118;
            }
            if (v71) {
              BOOL v73 = 0;
            }
            else {
              BOOL v73 = v70 == -2;
            }
            if (v73) {
              uint64_t v71 = v64;
            }
            unsigned int v74 = v69 + v72++;
            unsigned int v69 = v74 & v68;
            unint64_t v64 = (void *)(v61 + 8 * (v74 & v68));
            uint64_t v70 = *v64;
          }
          while (*v64 != -1);
        }
        if (v71) {
          unint64_t v64 = v71;
        }
        if (*v64 != v60) {
          unint64_t v64 = (void *)(v61 + 8 * v67);
        }
LABEL_118:
        if (v61 == v62) {
          uint64_t v75 = (unsigned int *)(a1 + 236);
        }
        else {
          uint64_t v75 = (unsigned int *)(a1 + 232);
        }
        if (v64 != (void *)(v61 + 8 * *v75)) {
          goto LABEL_162;
        }
        uint64_t v76 = sub_1CC025000(v58, &v309)[1];
        if (v76 && v76 != *(void *)(a2 + 40)) {
          goto LABEL_162;
        }
        int v78 = *(_DWORD *)(a2 + 20);
        uint64_t v79 = (v78 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v78 & 0x7FFFFFF);
        uint64_t v80 = *(void *)(v79 + 32 * v57);
        if (v80 == a2) {
          goto LABEL_162;
        }
        if (v80) {
          BOOL v81 = *(unsigned __int8 *)(v80 + 16) >= 0x15u;
        }
        else {
          BOOL v81 = 1;
        }
        uint64_t v82 = *(void *)(v79 + 32 * v57);
        if (v81)
        {
          size_t v312 = *(void **)(v79 + 32 * v57);
          unint64_t v310 = 0;
          uint64_t v82 = 0;
          if (sub_1CC01F5A8(v304, &v312, &v310)) {
            uint64_t v82 = v310[1];
          }
        }
        int v83 = 0;
        if (v308 >= 0x41) {
          operator new[]();
        }
        unint64_t v84 = 0;
        if (v82 || v305 != 15)
        {
          unsigned int v85 = v308;
        }
        else
        {
          sub_1CC0244BC((uint64_t)&v312, *(void *)(a1 + 192), *(_DWORD *)(a1 + 208), v80);
          unint64_t v84 = (unint64_t)v312;
          int v83 = __s2;
          unsigned int v85 = v314[0];
        }
        if (!(v82 | v84)) {
          goto LABEL_157;
        }
        if (v306)
        {
          if (v306 == v82) {
            int v86 = 4;
          }
          else {
            int v86 = 1;
          }
          goto LABEL_158;
        }
        if (!v303)
        {
          if (v82)
          {
            uint64_t v303 = 0;
            int v86 = 4;
            uint64_t v306 = v82;
          }
          else
          {
            int v315 = (void *)v84;
            if (LODWORD(__s1[1]) <= 0x40 && v85 < 0x41)
            {
              __s1[0] = v83;
              LODWORD(__s1[1]) = v85;
              if (++v57 != v56)
              {
                uint64_t v306 = 0;
                uint64_t v303 = v80;
                uint64_t v58 = v307;
                goto LABEL_163;
              }
              uint64_t v303 = v80;
              if (v84) {
                goto LABEL_406;
              }
              goto LABEL_243;
            }
            unsigned int v90 = v85;
            llvm::APInt::reallocate((uint64_t)__s1, v85);
            if (LODWORD(__s1[1]) <= 0x40)
            {
              uint64_t v306 = 0;
              int v86 = 0;
              __s1[0] = v83;
            }
            else
            {
              memcpy(__s1[0], v83, (((unint64_t)LODWORD(__s1[1]) + 63) >> 3) & 0x3FFFFFF8);
              uint64_t v306 = 0;
              int v86 = 0;
            }
            uint64_t v303 = v80;
            unsigned int v85 = v90;
          }
LABEL_158:
          if (v85 >= 0x41 && v83) {
            MEMORY[0x1D25D9CB0](v83, 0x1000C8000313F17);
          }
          int v87 = v86 | 4;
          uint64_t v58 = v307;
          if (v87 != 4) {
            goto LABEL_243;
          }
LABEL_162:
          if (++v57 != v56)
          {
LABEL_163:
            int v55 = *(_DWORD *)(a2 + 20);
            continue;
          }
          if (v306)
          {
            size_t v312 = (void *)a2;
            sub_1CC01F644(v304, &v312)[1] = v306;
            goto LABEL_243;
          }
          unint64_t v84 = (unint64_t)v315;
          if (v315)
          {
LABEL_406:
            size_t v312 = (void *)a2;
            uint64_t v205 = sub_1CC0206AC(v302, (uint64_t *)&v312);
            uint64_t v206 = v205;
            *(void *)(v205 + 8) = v84;
            int v207 = (int)__s1[1];
            if (*(_DWORD *)(v205 + 24) > 0x40u || LODWORD(__s1[1]) > 0x40)
            {
              size_t v244 = (void **)(v205 + 16);
              if ((void **)(v205 + 16) != __s1)
              {
                llvm::APInt::reallocate(v205 + 16, __s1[1]);
                uint64_t v297 = *(unsigned int *)(v206 + 24);
                if (v297 <= 0x40) {
                  *size_t v244 = __s1[0];
                }
                else {
                  memcpy(*v244, __s1[0], ((unint64_t)(v297 + 63) >> 3) & 0x3FFFFFF8);
                }
              }
            }
            else
            {
              *(void **)(v205 + 16) = __s1[0];
              *(_DWORD *)(v205 + 24) = v207;
            }
            uint64_t v245 = sub_1CC023C0C(a1, v303);
            if (v245)
            {
              size_t v312 = (void *)a2;
              sub_1CC020864((uint64_t *)(a1 + 144), &v312)[1] = v245;
            }
          }
LABEL_243:
          if (LODWORD(__s1[1]) >= 0x41 && __s1[0]) {
            MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
          }
          return 1;
        }
        break;
      }
      if (v315 != (void *)v84) {
        goto LABEL_156;
      }
      if (LODWORD(__s1[1]) > 0x40)
      {
        unsigned int v88 = v85;
        int v89 = memcmp(__s1[0], v83, (((unint64_t)LODWORD(__s1[1]) + 63) >> 3) & 0x3FFFFFF8);
        unsigned int v85 = v88;
        if (!v89)
        {
LABEL_174:
          uint64_t v306 = 0;
          int v86 = 4;
          goto LABEL_158;
        }
      }
      else if (__s1[0] == v83)
      {
        goto LABEL_174;
      }
LABEL_156:
      uint64_t v306 = 0;
LABEL_157:
      int v86 = 1;
      goto LABEL_158;
    case 0x55:
      int v42 = *(unsigned __int8 *)(*(void *)a2 + 8);
      uint64_t v43 = *(void *)(a2 - 64);
      BOOL v44 = *(unsigned __int8 **)(a2 - 32);
      if (v43) {
        BOOL v45 = *(unsigned __int8 *)(v43 + 16) >= 0x15u;
      }
      else {
        BOOL v45 = 1;
      }
      BOOL v46 = *(llvm::PoisonValue ***)(a2 - 64);
      if (v45)
      {
        int v315 = *(void **)(a2 - 64);
        size_t v312 = 0;
        BOOL v46 = 0;
        if (sub_1CC01F5A8((uint64_t *)(a1 + 120), &v315, &v312)) {
          BOOL v46 = (llvm::PoisonValue **)*((void *)v312 + 1);
        }
      }
      BOOL v47 = v44[16] > 0x14u || v44 == 0;
      BOOL v48 = (llvm::Constant *)v44;
      if (v47)
      {
        int v315 = v44;
        size_t v312 = 0;
        BOOL v48 = 0;
        if (sub_1CC01F5A8((uint64_t *)(a1 + 120), &v315, &v312)) {
          BOOL v48 = (llvm::Constant *)*((void *)v312 + 1);
        }
      }
      int v315 = *(void **)(a2 - 96);
      size_t v312 = 0;
      if ((sub_1CC01F5A8((uint64_t *)(a1 + 120), &v315, &v312) & 1) == 0 || (uint64_t v49 = *((void *)v312 + 1)) == 0)
      {
        if (v46 && v46 == (llvm::PoisonValue **)v48)
        {
          int v315 = (void *)a2;
          sub_1CC01F644((uint64_t *)(a1 + 120), &v315)[1] = v46;
          return 1;
        }
        if (v42 == 15)
        {
          sub_1CC0244BC((uint64_t)&v315, *(void *)(a1 + 192), *(_DWORD *)(a1 + 208), v43);
          sub_1CC0244BC((uint64_t)&v312, *(void *)(a1 + 192), *(_DWORD *)(a1 + 208), (uint64_t)v44);
          unsigned int v204 = v315;
          if (v315 == v312
            && ((unsigned int v246 = __s1[1], v247 = __s1[0], LODWORD(__s1[1]) <= 0x40)
              ? (BOOL v248 = __s1[0] == __s2)
              : (BOOL v248 = memcmp(__s1[0], __s2, (((unint64_t)LODWORD(__s1[1]) + 63) >> 3) & 0x3FFFFFF8) == 0),
                !v248 ? (int v273 = 0) : (int v273 = 1),
                v204 && v273))
          {
            unint64_t v310 = (void *)a2;
            uint64_t v274 = sub_1CC0206AC(a1 + 192, (uint64_t *)&v310);
            uint64_t v275 = v274;
            *(void *)(v274 + 8) = v204;
            if (*(_DWORD *)(v274 + 24) > 0x40u || v246 > 0x40)
            {
              size_t v287 = (void **)(v274 + 16);
              llvm::APInt::reallocate(v274 + 16, v246);
              uint64_t v288 = *(unsigned int *)(v275 + 24);
              if (v288 <= 0x40) {
                *size_t v287 = v247;
              }
              else {
                memcpy(*v287, v247, ((unint64_t)(v288 + 63) >> 3) & 0x3FFFFFF8);
              }
            }
            else
            {
              *(void *)(v274 + 16) = v247;
              *(_DWORD *)(v274 + 24) = v246;
            }
            uint64_t v289 = sub_1CC023C0C(a1, v43);
            if (v289)
            {
              unint64_t v310 = (void *)a2;
              sub_1CC020864((uint64_t *)(a1 + 144), &v310)[1] = v289;
            }
            uint64_t v7 = 1;
          }
          else
          {
            uint64_t v7 = sub_1CC023CD8((int32x2_t *)a1, a2);
          }
          if (v314[0] >= 0x41u && __s2) {
            MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
          }
          if (LODWORD(__s1[1]) >= 0x41 && __s1[0]) {
LABEL_247:
          }
            MEMORY[0x1D25D9CB0]();
          return v7;
        }
        return sub_1CC023CD8((int32x2_t *)a1, a2);
      }
      if (llvm::Constant::isAllOnesValue(*((llvm::Constant **)v312 + 1))) {
        goto LABEL_587;
      }
      int v51 = *(unsigned __int8 *)(v49 + 16);
      if (v51 == 16)
      {
        uint64_t v52 = *(unsigned int *)(v49 + 32);
        if (v52 < 0x41)
        {
          uint64_t v43 = (uint64_t)v44;
          if (*(void *)(v49 + 24)) {
            goto LABEL_86;
          }
LABEL_587:
          if (*(unsigned __int8 *)(v43 + 16) > 0x14u)
          {
            if (v42 == 15)
            {
              sub_1CC0244BC((uint64_t)&v315, *(void *)(a1 + 192), *(_DWORD *)(a1 + 208), v43);
              int v290 = v315;
              if (v315)
              {
                size_t v312 = (void *)a2;
                uint64_t v291 = sub_1CC0206AC(a1 + 192, (uint64_t *)&v312);
                uint64_t v292 = v291;
                *(void *)(v291 + 8) = v290;
                unsigned int v293 = __s1[1];
                if (*(_DWORD *)(v291 + 24) > 0x40u || LODWORD(__s1[1]) > 0x40)
                {
                  unint64_t v294 = (void **)(v291 + 16);
                  llvm::APInt::reallocate(v291 + 16, __s1[1]);
                  uint64_t v295 = *(unsigned int *)(v292 + 24);
                  if (v295 <= 0x40) {
                    *unint64_t v294 = __s1[0];
                  }
                  else {
                    memcpy(*v294, __s1[0], ((unint64_t)(v295 + 63) >> 3) & 0x3FFFFFF8);
                  }
                }
                else
                {
                  *(void **)(v291 + 16) = __s1[0];
                  *(_DWORD *)(v291 + 24) = v293;
                }
                uint64_t v296 = sub_1CC023C0C(a1, v43);
                if (v296)
                {
                  size_t v312 = (void *)a2;
                  sub_1CC020864((uint64_t *)(a1 + 144), &v312)[1] = v296;
                }
              }
              else
              {
                unsigned int v293 = __s1[1];
              }
              if (v293 >= 0x41)
              {
LABEL_416:
                if (__s1[0]) {
                  MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
                }
              }
            }
            return 1;
          }
LABEL_593:
          int v315 = (void *)a2;
          v260 = sub_1CC01F644((uint64_t *)(a1 + 120), &v315);
          goto LABEL_594;
        }
        int v298 = 0;
        int64_t v299 = (unint64_t)(v52 + 63) >> 6;
        do
        {
          BOOL v16 = v299-- < 1;
          if (v16) {
            break;
          }
          unint64_t v300 = *(void *)(*(void *)(v49 + 24) + 8 * v299);
          v298 += __clz(v300);
        }
        while (!v300);
        int v301 = v52 | 0xFFFFFFC0;
        if ((v52 & 0x3F) == 0) {
          int v301 = 0;
        }
        uint64_t v43 = (uint64_t)v44;
        if (v298 + v301 == v52) {
          goto LABEL_587;
        }
      }
      else
      {
        if (v51 == 17)
        {
          uint64_t v43 = (uint64_t)v44;
          if ((sub_1CB844168(v49, 0.0) & 1) == 0) {
            goto LABEL_86;
          }
          goto LABEL_587;
        }
        BOOL v276 = (v51 - 18) < 3 || v51 == 13;
        uint64_t v43 = (uint64_t)v44;
        if (v276) {
          goto LABEL_587;
        }
      }
LABEL_86:
      if (v46)
      {
        if (v48)
        {
          Select = llvm::ConstantExpr::getSelect((llvm::ConstantExpr *)v49, v46, v48, 0, v50);
          if (Select)
          {
            uint64_t v43 = (uint64_t)Select;
            goto LABEL_593;
          }
        }
      }
      return sub_1CC023CD8((int32x2_t *)a1, a2);
    case 0x5C:
      int v315 = &__s1[1];
      __s1[0] = (void *)0x200000000;
      int v91 = *(_DWORD *)(a2 + 20);
      if ((v91 & 0x40000000) != 0)
      {
        int v93 = *(void ***)(a2 - 8);
        uint64_t v92 = v91 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v92 = v91 & 0x7FFFFFF;
        int v93 = (void **)(a2 - 32 * v92);
      }
      unsigned int v143 = 0;
      uint64_t v131 = (uint64_t *)(a1 + 120);
      uint64_t v144 = 32 * v92;
      do
      {
        unint64_t v145 = *v93;
        if (*v93) {
          BOOL v146 = *((unsigned __int8 *)*v93 + 16) >= 0x15u;
        }
        else {
          BOOL v146 = 1;
        }
        if (v146)
        {
          size_t v312 = *v93;
          unint64_t v310 = 0;
          if ((sub_1CC01F5A8((uint64_t *)(a1 + 120), &v312, &v310) & 1) == 0) {
            goto LABEL_353;
          }
          unint64_t v145 = (void *)v310[1];
          if (!v145) {
            goto LABEL_353;
          }
          unsigned int v143 = __s1[0];
        }
        if (v143 >= HIDWORD(__s1[0])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v315 + v143) = v145;
        unsigned int v143 = ++LODWORD(__s1[0]);
        v93 += 4;
        v144 -= 32;
      }
      while (v144);
      Value = llvm::ConstantExpr::getExtractValue(*(llvm::Constant **)v315, *(unsigned int **)(a2 + 64), *(unsigned int *)(a2 + 72), 0);
      if (!Value) {
        goto LABEL_353;
      }
      goto LABEL_326;
    case 0x5D:
      int v315 = &__s1[1];
      __s1[0] = (void *)0x200000000;
      int v20 = *(_DWORD *)(a2 + 20);
      if ((v20 & 0x40000000) != 0)
      {
        int v22 = *(void ***)(a2 - 8);
        uint64_t v21 = v20 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v21 = v20 & 0x7FFFFFF;
        int v22 = (void **)(a2 - 32 * v21);
      }
      unsigned int v130 = 0;
      uint64_t v131 = (uint64_t *)(a1 + 120);
      uint64_t v132 = 32 * v21;
      do
      {
        uint64_t v133 = *v22;
        if (*v22) {
          BOOL v134 = *((unsigned __int8 *)*v22 + 16) >= 0x15u;
        }
        else {
          BOOL v134 = 1;
        }
        if (v134)
        {
          size_t v312 = *v22;
          unint64_t v310 = 0;
          if ((sub_1CC01F5A8((uint64_t *)(a1 + 120), &v312, &v310) & 1) == 0) {
            goto LABEL_353;
          }
          uint64_t v133 = (void *)v310[1];
          if (!v133) {
            goto LABEL_353;
          }
          unsigned int v130 = __s1[0];
        }
        if (v130 >= HIDWORD(__s1[0])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v315 + v130) = v133;
        unsigned int v130 = ++LODWORD(__s1[0]);
        v22 += 4;
        v132 -= 32;
      }
      while (v132);
      Value = llvm::ConstantExpr::getInsertValue(*(llvm::Constant **)v315, *((uint64_t **)v315 + 1), *(_DWORD **)(a2 + 64), *(unsigned int *)(a2 + 72), 0);
      if (Value)
      {
LABEL_326:
        size_t v312 = (void *)a2;
        sub_1CC01F644(v131, &v312)[1] = Value;
        char v156 = 1;
        goto LABEL_354;
      }
LABEL_353:
      char v156 = 0;
LABEL_354:
      if (v315 != &__s1[1]) {
        free(v315);
      }
      if ((v156 & 1) == 0) {
        return sub_1CC023CD8((int32x2_t *)a1, a2);
      }
      return 1;
    default:
      uint64_t v7 = *(unsigned char *)(a1 + 93) == 0;
      *(unsigned char *)(a1 + 93) = 1;
      return v7;
  }
}

uint64_t sub_1CC0232B8(uint64_t a1, uint64_t a2)
{
  v84[4] = *MEMORY[0x1E4F143B8];
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 96))(a1)) {
    return 1;
  }
  uint64_t v5 = *(void *)(a2 + 64);
  if (v5 && *(char *)(v5 + 17) < 0 || llvm::CallBase::hasFnAttrOnCalledFunction(a2, 47))
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 112);
    if (!v6 || (*(char *)(v6 + 17) & 0x80000000) == 0)
    {
      uint64_t result = 0;
      *(unsigned char *)(a1 + 90) = 1;
      return result;
    }
  }
  if (*(unsigned char *)(a2 + 16) == 84
    && ((uint64_t v8 = *(void *)(a2 + 64)) != 0 && (*(unsigned char *)(v8 + 15) & 1) != 0
     || llvm::CallBase::hasFnAttrOnCalledFunction(a2, 24)))
  {
    *(unsigned char *)(a1 + 92) = 1;
  }
  uint64_t v9 = *(void *)(a2 - 32);
  if (v9 && !*(unsigned char *)(v9 + 16) && *(void *)(v9 + 24) == *(void *)(a2 + 72))
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v81 = 0;
    uint64_t v82 = (void *)v9;
    if ((sub_1CC01F5A8((uint64_t *)(a1 + 120), &v82, &v81) & 1) == 0
      || (uint64_t v9 = *(void *)(v81 + 8)) == 0
      || *(unsigned char *)(v9 + 16)
      || *(void *)(v9 + 24) != *(void *)(a2 + 72))
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2);
      uint64_t v10 = *(void *)(a2 + 64);
      if (v10 && (*(unsigned char *)(v10 + 17) & 0x30) != 0) {
        return sub_1CC023CD8((int32x2_t *)a1, a2);
      }
      int v11 = *(_DWORD *)(a2 + 20);
      if (v11 < 0 && (uint64_t v51 = a2 - 32 * (v11 & 0x7FFFFFF), v54 = *(void *)(v51 - 8), v52 = v51 - 8, (v53 = v54) != 0))
      {
        uint64_t v55 = -v53;
        while (1)
        {
          unsigned int v56 = *(_DWORD *)(*(void *)(v52 + v55) + 8);
          BOOL v57 = v56 > 7;
          int v58 = (1 << v56) & 0x83;
          if (v57 || v58 == 0) {
            break;
          }
          v55 += 16;
          if (!v55) {
            goto LABEL_23;
          }
        }
      }
      else
      {
LABEL_23:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 45) & 1) != 0
          || (llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44) & 1) != 0)
        {
          return sub_1CC023CD8((int32x2_t *)a1, a2);
        }
      }
      goto LABEL_25;
    }
    uint64_t v12 = 1;
  }
  if (llvm::canConstantFoldCallTo((llvm *)a2, (const llvm::CallBase *)v9, v4))
  {
    uint64_t v82 = v84;
    uint64_t v83 = 0x400000000;
    int v13 = *(unsigned __int8 *)(a2 + 16);
    if (v13 == 84)
    {
      uint64_t v14 = 0;
    }
    else if (v13 == 39)
    {
      uint64_t v14 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else
    {
      uint64_t v14 = 2;
    }
    int v15 = *(_DWORD *)(a2 + 20);
    if (v15 < 0 && (uint64_t v68 = a2 - 32 * (v15 & 0x7FFFFFF), v69 = *(void *)(v68 - 8), (v69 & 0xFFFFFFFF0) != 0))
    {
      uint64_t v17 = -(uint64_t)(v15 & 0x7FFFFFF);
      int v16 = *(_DWORD *)(v68 - 12) - *(_DWORD *)(v68 - v69);
    }
    else
    {
      int v16 = 0;
      uint64_t v17 = -(uint64_t)(v15 & 0x7FFFFFF);
    }
    if (((-32 * v14 + 32 * (unint64_t)-v16 - 32 * v17 - 32) >> 5) >= 5uLL) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v13 == 84) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = v13 == 39 ? (*(_DWORD *)(a2 + 80) + 1) : 2;
    }
    uint64_t v19 = a2 + 32 * v17;
    if (v15 < 0 && (uint64_t v70 = a2 - 32 * (v15 & 0x7FFFFFF), v71 = *(void *)(v70 - 8), (v71 & 0xFFFFFFFF0) != 0)) {
      uint64_t v20 = (*(_DWORD *)(v70 - 12) - *(_DWORD *)(v70 - v71));
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19 == a2 - 32 * v18 - 32 * v20 - 32)
    {
      unsigned int v24 = v83;
LABEL_55:
      uint64_t v25 = llvm::ConstantFoldCall(a2, (uint64_t ***)v9, (uint64_t)v82, v24, 0);
      if (v25)
      {
        uint64_t v81 = a2;
        sub_1CC01F644((uint64_t *)(a1 + 120), &v81)[1] = v25;
        LOBYTE(v25) = 1;
      }
    }
    else
    {
      unint64_t v21 = ((32 * v18 + 32 * v20) ^ 0xFFFFFFFFFFFFFFE0) - 32 * v17;
      while (1)
      {
        uint64_t v22 = *(void *)v19;
        if (!*(void *)v19 || *(unsigned __int8 *)(*(void *)v19 + 16) >= 0x15u)
        {
          uint64_t v80 = 0;
          uint64_t v81 = v22;
          if ((sub_1CC01F5A8((uint64_t *)(a1 + 120), &v81, &v80) & 1) == 0) {
            break;
          }
          uint64_t v22 = *(void *)(v80 + 8);
          if (!v22) {
            break;
          }
        }
        if (v83 >= (unint64_t)HIDWORD(v83)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v82 + v83) = v22;
        unsigned int v24 = v83 + 1;
        LODWORD(v83) = v83 + 1;
        v19 += 32;
        v21 -= 32;
        if (!v21) {
          goto LABEL_55;
        }
      }
      LOBYTE(v25) = 0;
    }
    if (v82 != v84) {
      free(v82);
    }
    if (v25) {
      return 1;
    }
  }
  if (*(unsigned char *)(a2 + 16) != 84
    || (unint64_t v26 = *(uint64_t ****)(a2 - 32)) == 0
    || *((unsigned char *)v26 + 16)
    || (uint64_t v27 = v26[3], v27 != *(uint64_t ***)(a2 + 72))
    || (*((unsigned char *)v26 + 33) & 0x20) == 0)
  {
    if (v9 != *(void *)(*(void *)(a2 + 40) + 56) || (*(unsigned char *)(a1 + 89) = 1, *(unsigned char *)(a1 + 401)))
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 8) + 176))(**(void **)(a1 + 8), v9))
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, v9, a2, v12);
      }
      uint64_t v28 = *(void *)(a2 + 64);
      if (v28 && (*(unsigned char *)(v28 + 17) & 0x30) != 0) {
        return sub_1CC023CD8((int32x2_t *)a1, a2);
      }
      int v29 = *(_DWORD *)(a2 + 20);
      if (v29 < 0 && (uint64_t v60 = a2 - 32 * (v29 & 0x7FFFFFF), v63 = *(void *)(v60 - 8), v61 = v60 - 8, (v62 = v63) != 0))
      {
        uint64_t v64 = -v62;
        while (1)
        {
          unsigned int v65 = *(_DWORD *)(*(void *)(v61 + v64) + 8);
          BOOL v57 = v65 > 7;
          int v66 = (1 << v65) & 0x83;
          if (v57 || v66 == 0) {
            break;
          }
          v64 += 16;
          if (!v64) {
            goto LABEL_74;
          }
        }
      }
      else
      {
LABEL_74:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 45) & 1) != 0
          || (llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44) & 1) != 0)
        {
          return sub_1CC023CD8((int32x2_t *)a1, a2);
        }
      }
      if (!v12) {
        goto LABEL_25;
      }
      uint64_t v30 = *(void *)(v9 + 112);
      if (!v30 || (*(unsigned char *)(v30 + 17) & 0x30) == 0) {
        goto LABEL_25;
      }
      return sub_1CC023CD8((int32x2_t *)a1, a2);
    }
    return 0;
  }
  int v31 = *((_DWORD *)v26 + 9);
  if (v31 > 193)
  {
    if ((v31 - 194) <= 5 && ((1 << (v31 + 62)) & 0x29) != 0)
    {
      if (*(unsigned char *)(a1 + 400))
      {
        (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
        uint64_t result = 0;
        *(unsigned char *)(a1 + 400) = 0;
        return result;
      }
      return 0;
    }
    if (v31 == 290)
    {
LABEL_95:
      uint64_t v36 = sub_1CC023C0C(a1, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
      if (v36)
      {
        int64_t v34 = (void *)v36;
        uint64_t v82 = (void *)a2;
        uint64_t v35 = sub_1CC020864((uint64_t *)(a1 + 144), &v82);
LABEL_97:
        v35[1] = v34;
      }
      return 1;
    }
    if (v31 == 315)
    {
      uint64_t result = 0;
      *(unsigned char *)(a1 + 96) = 1;
      return result;
    }
LABEL_100:
    if ((*((unsigned char *)v26 + 23) & 0x10) == 0)
    {
LABEL_115:
      uint64_t v49 = *(void *)(a2 + 64);
      if (v49 && (*(unsigned char *)(v49 + 17) & 0x30) != 0) {
        return sub_1CC023CD8((int32x2_t *)a1, a2);
      }
      int v50 = *(_DWORD *)(a2 + 20);
      if (v50 < 0 && (uint64_t v72 = a2 - 32 * (v50 & 0x7FFFFFF), v75 = *(void *)(v72 - 8), v73 = v72 - 8, (v74 = v75) != 0))
      {
        uint64_t v76 = -v74;
        while (1)
        {
          unsigned int v77 = *(_DWORD *)(*(void *)(v73 + v76) + 8);
          BOOL v57 = v77 > 7;
          int v78 = (1 << v77) & 0x83;
          if (v57 || v78 == 0) {
            break;
          }
          v76 += 16;
          if (!v76) {
            goto LABEL_118;
          }
        }
      }
      else
      {
LABEL_118:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 45) & 1) != 0
          || (llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44) & 1) != 0)
        {
          return sub_1CC023CD8((int32x2_t *)a1, a2);
        }
      }
      if ((llvm::isAssumeLikeIntrinsic(a2) & 1) == 0)
      {
LABEL_25:
        if (*(unsigned char *)(a1 + 400))
        {
          (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
          *(unsigned char *)(a1 + 400) = 0;
        }
      }
      return sub_1CC023CD8((int32x2_t *)a1, a2);
    }
    uint64_t v37 = ***v26;
    uint64_t v38 = *(void *)(v37 + 152);
    uint64_t v39 = *(unsigned int *)(v37 + 168);
    if (v39)
    {
      LODWORD(v40) = (v39 - 1) & ((v26 >> 4) ^ (v26 >> 9));
      uint64_t v41 = (uint64_t ****)(v38 + 16 * v40);
      int v42 = *v41;
      if (*v41 == v26)
      {
LABEL_110:
        BOOL v45 = v41[1];
        if ((unint64_t)*v45 >= 9)
        {
          BOOL v46 = v45[2];
          int v47 = *((unsigned __int8 *)v45 + 24);
          if (v46 == (uint64_t **)0x6A626F2E6D766C6CLL && v47 == 99)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
            return sub_1CC023CD8((int32x2_t *)a1, a2);
          }
        }
        goto LABEL_115;
      }
      int v43 = 1;
      while (v42 != (uint64_t ***)-4096)
      {
        int v44 = v40 + v43++;
        uint64_t v40 = v44 & (v39 - 1);
        int v42 = *(uint64_t ****)(v38 + 16 * v40);
        if (v42 == v26)
        {
          uint64_t v41 = (uint64_t ****)(v38 + 16 * v40);
          goto LABEL_110;
        }
      }
    }
    uint64_t v41 = (uint64_t ****)(v38 + 16 * v39);
    goto LABEL_110;
  }
  switch(v31)
  {
    case 165:
      int v32 = *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      if (!v32 || v32[16] >= 0x15u)
      {
        uint64_t v81 = 0;
        uint64_t v82 = v32;
        int v33 = sub_1CC01F5A8((uint64_t *)(a1 + 120), &v82, &v81);
        int v32 = 0;
        if (v33) {
          int v32 = *(unsigned __int8 **)(v81 + 8);
        }
        uint64_t v27 = *(uint64_t ***)(a2 + 72);
      }
      int64_t v34 = llvm::ConstantInt::get((llvm::ConstantInt *)*v27[2], v32 != 0, 0);
      uint64_t v82 = (void *)a2;
      uint64_t v35 = sub_1CC01F644((uint64_t *)(a1 + 120), &v82);
      goto LABEL_97;
    case 166:
      goto LABEL_95;
    case 167:
    case 168:
    case 169:
    case 170:
    case 172:
      goto LABEL_100;
    case 171:
      (*(void (**)(uint64_t))(*(void *)a1 + 128))(a1);
      return 0;
    case 173:
      break;
    default:
      if (v31 != 157) {
        goto LABEL_100;
      }
      break;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 95) = 1;
  return result;
}

uint64_t sub_1CC023C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 144);
  uint64_t v3 = *(unsigned int *)(a1 + 160);
  if (v3)
  {
    LODWORD(v14) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v4 = (uint64_t *)(v2 + 16 * v14);
    uint64_t v15 = *v4;
    if (*v4 == a2) {
      goto LABEL_3;
    }
    int v16 = 1;
    while (v15 != -4096)
    {
      int v17 = v14 + v16++;
      uint64_t v14 = v17 & (v3 - 1);
      uint64_t v15 = *(void *)(v2 + 16 * v14);
      if (v15 == a2)
      {
        uint64_t v4 = (uint64_t *)(v2 + 16 * v14);
        goto LABEL_3;
      }
    }
  }
  uint64_t v4 = (uint64_t *)(v2 + 16 * v3);
LABEL_3:
  if (v4 == (uint64_t *)(v2 + 16 * v3)) {
    return 0;
  }
  int v5 = *(_DWORD *)(a1 + 184);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v4[1];
  uint64_t v7 = *(void *)(a1 + 168);
  int v8 = v5 - 1;
  unsigned int v9 = ((v6 >> 4) ^ (v6 >> 9)) & v8;
  uint64_t v10 = *(void *)(v7 + 8 * v9);
  if (v10 != v6)
  {
    int v11 = 1;
    while (v10 != -4096)
    {
      unsigned int v12 = v9 + v11++;
      unsigned int v9 = v12 & v8;
      uint64_t v10 = *(void *)(v7 + 8 * v9);
      if (v10 == v6) {
        return v6;
      }
    }
    return 0;
  }
  return v6;
}

uint64_t sub_1CC023CD8(int32x2_t *a1, uint64_t a2)
{
  v22[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)a1[1];
  int v5 = *(_DWORD *)(a2 + 20);
  if ((v5 & 0x40000000) != 0)
  {
    uint64_t v7 = *(uint64_t **)(a2 - 8);
    unint64_t v6 = v5 & 0x7FFFFFF;
  }
  else
  {
    unint64_t v6 = v5 & 0x7FFFFFF;
    uint64_t v7 = (uint64_t *)(a2 - 32 * v6);
  }
  if (v6 >= 5) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v6)
  {
    uint64_t v8 = 32 * v6;
    unsigned int v9 = v22;
    do
    {
      uint64_t v10 = *v7;
      v7 += 4;
      *v9++ = v10;
      v8 -= 32;
    }
    while (v8);
  }
  uint64_t v12 = (*(uint64_t (**)(void, uint64_t, void *))(*(void *)*v4 + 72))(*v4, a2, v22);
  BOOL v13 = v12 >= 0;
  BOOL v14 = v11 < 1;
  if (v11) {
    BOOL v13 = v11 >= 0;
  }
  else {
    BOOL v14 = v12 < 1;
  }
  uint64_t v15 = v13 & v14;
  if (!v13 || !v14)
  {
    int v16 = *(_DWORD *)(a2 + 20);
    if ((v16 & 0x40000000) != 0)
    {
      uint64_t v18 = *(uint64_t **)(a2 - 8);
      uint64_t v17 = v16 & 0x7FFFFFF;
      if (!v17) {
        return v15;
      }
    }
    else
    {
      uint64_t v17 = v16 & 0x7FFFFFF;
      uint64_t v18 = (uint64_t *)(a2 - 32 * v17);
      if (!v17) {
        return v15;
      }
    }
    uint64_t v19 = 32 * v17;
    do
    {
      uint64_t v20 = sub_1CC023C0C((uint64_t)a1, *v18);
      if (v20) {
        sub_1CC023EB0(a1, v20);
      }
      v18 += 4;
      v19 -= 32;
    }
    while (v19);
  }
  return v15;
}

uint64_t sub_1CC023EB0(int32x2_t *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(int32x2_t *))(*(void *)a1 + 72))(a1);
  __int32 v5 = a1[23].i32[0];
  if (v5)
  {
    int32x2_t v6 = a1[21];
    __int32 v7 = v5 - 1;
    LODWORD(v8) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v9 = (uint64_t *)(*(void *)&v6 + 8 * v8);
    uint64_t v10 = *v9;
    if (*v9 == a2)
    {
LABEL_7:
      *unsigned int v9 = -8192;
      a1[22] = vadd_s32(a1[22], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v11 = 1;
      while (v10 != -4096)
      {
        int v12 = v8 + v11++;
        uint64_t v8 = v12 & v7;
        uint64_t v10 = *(void *)(*(void *)&v6 + 8 * v8);
        if (v10 == a2)
        {
          unsigned int v9 = (uint64_t *)(*(void *)&v6 + 8 * v8);
          goto LABEL_7;
        }
      }
    }
  }
  if (a1[50].i8[0])
  {
    uint64_t result = (*(uint64_t (**)(int32x2_t *))(*(void *)a1 + 80))(a1);
    a1[50].i8[0] = 0;
  }
  return result;
}

BOOL sub_1CC023F9C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *((void *)a2 - 8);
  __int32 v5 = (unsigned __int8 *)*((void *)a2 - 4);
  if (v4) {
    BOOL v6 = *(unsigned __int8 *)(v4 + 16) >= 0x15u;
  }
  else {
    BOOL v6 = 1;
  }
  __int32 v7 = (llvm *)*((void *)a2 - 8);
  if (v6)
  {
    uint64_t v25 = (llvm::Constant *)*((void *)a2 - 8);
    uint64_t v29 = 0;
    __int32 v7 = 0;
    if (sub_1CC01F5A8((uint64_t *)(a1 + 120), &v25, &v29)) {
      __int32 v7 = *(llvm **)(v29 + 8);
    }
  }
  BOOL v8 = v5[16] > 0x14u || v5 == 0;
  unsigned int v9 = v5;
  if (v8)
  {
    uint64_t v25 = (llvm::Constant *)v5;
    uint64_t v29 = 0;
    unsigned int v9 = 0;
    if (sub_1CC01F5A8((uint64_t *)(a1 + 120), &v25, &v29)) {
      unsigned int v9 = *(unsigned __int8 **)(v29 + 8);
    }
  }
  BOOL v10 = sub_1CB845E74((uint64_t)a2);
  int v11 = a2[16] - 28;
  if (v7) {
    int v12 = v7;
  }
  else {
    int v12 = (llvm *)v4;
  }
  if (v9) {
    BOOL v13 = (llvm *)v9;
  }
  else {
    BOOL v13 = (llvm *)v5;
  }
  if (v10)
  {
    unint64_t v14 = (unint64_t)a2[17] >> 1;
    uint64_t v25 = *(llvm::Constant **)(a1 + 64);
    long long v26 = 0u;
    long long v27 = 0u;
    __int16 v28 = 257;
    if (v14 == 127) {
      int v15 = -1;
    }
    else {
      int v15 = v14;
    }
    int v16 = llvm::SimplifyBinOp(v11, v12, v13, v15, &v25);
  }
  else
  {
    uint64_t v25 = *(llvm::Constant **)(a1 + 64);
    long long v26 = 0u;
    long long v27 = 0u;
    __int16 v28 = 257;
    int v16 = sub_1CC03A350(v11, v12, v13, (const llvm::DataLayout *)&v25, (llvm::DSOLocalEquivalent **)3);
  }
  uint64_t v17 = v16;
  if (v16)
  {
    if (*((unsigned __int8 *)v16 + 16) <= 0x14u)
    {
      uint64_t v25 = (llvm::Constant *)a2;
      sub_1CC01F644((uint64_t *)(a1 + 120), &v25)[1] = v16;
    }
  }
  else
  {
    uint64_t v18 = sub_1CC023C0C(a1, v4);
    if (v18) {
      sub_1CC023EB0((int32x2_t *)a1, v18);
    }
    uint64_t v19 = sub_1CC023C0C(a1, (uint64_t)v5);
    if (v19) {
      sub_1CC023EB0((int32x2_t *)a1, v19);
    }
    if (*(unsigned __int8 *)(*(void *)a2 + 8) <= 6u)
    {
      uint64_t v20 = (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 632))(**(void **)(a1 + 8));
      BOOL v22 = v20 < 4;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22)
      {
        BOOL v23 = v21 < 1;
        if (!v21) {
          BOOL v23 = v20 < 5;
        }
        if (v23 && !sub_1CD494C9C((uint64_t)a2)) {
          (*(void (**)(uint64_t))(*(void *)a1 + 104))(a1);
        }
      }
    }
  }
  return v17 != 0;
}

BOOL sub_1CC0241FC(uint64_t a1, llvm::Constant *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v4 == 17)
  {
    __int32 v5 = (char *)a2 + 24;
    if (*((_UNKNOWN **)a2 + 4) == &unk_1CFB2E344) {
      __int32 v5 = (char *)*((void *)a2 + 5);
    }
    return (v5[28] & 7) == 3;
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    if (*(void *)a2) {
      BOOL v8 = (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 18;
    }
    else {
      BOOL v8 = 0;
    }
    BOOL v9 = !v8 || v4 > 0x14;
    int v10 = v9;
    if (!v9)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && *((unsigned char *)SplatValue + 16) == 17)
      {
        int v12 = (char *)(SplatValue + 3);
        if ((_UNKNOWN *)SplatValue[4] == &unk_1CFB2E344) {
          int v12 = (char *)SplatValue[5];
        }
        BOOL v2 = (v12[28] & 7) == 3;
      }
      else
      {
        if (*(unsigned char *)(v7 + 8) == 18)
        {
          int v13 = *(_DWORD *)(v7 + 32);
          if (v13)
          {
            unint64_t v14 = 0;
            BOOL v2 = 0;
            while (1)
            {
              AggregateElement = llvm::Constant::getAggregateElement(a2, v14);
              if (!AggregateElement) {
                break;
              }
              int v16 = *((unsigned __int8 *)AggregateElement + 16);
              if ((v16 - 11) >= 2)
              {
                if (v16 != 17) {
                  break;
                }
                uint64_t v17 = AggregateElement + 3;
                if ((_UNKNOWN *)AggregateElement[4] == &unk_1CFB2E344) {
                  uint64_t v17 = (void *)AggregateElement[5];
                }
                if ((*((unsigned char *)v17 + 28) & 7) != 3) {
                  break;
                }
                BOOL v2 = 1;
              }
              unint64_t v14 = (llvm::Type *)(v14 + 1);
              if (v13 == v14) {
                return (v10 ^ 1) & v2;
              }
            }
          }
        }
        BOOL v2 = 0;
      }
    }
    return (v10 ^ 1) & v2;
  }
}

BOOL sub_1CC02435C(uint64_t a1, llvm::Constant *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v4 == 17)
  {
    __int32 v5 = (char *)a2 + 24;
    if (*((_UNKNOWN **)a2 + 4) == &unk_1CFB2E344) {
      __int32 v5 = (char *)*((void *)a2 + 5);
    }
    return (v5[28] & 0xF) == 11;
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    if (*(void *)a2) {
      BOOL v8 = (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 18;
    }
    else {
      BOOL v8 = 0;
    }
    BOOL v9 = !v8 || v4 > 0x14;
    int v10 = v9;
    if (!v9)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && *((unsigned char *)SplatValue + 16) == 17)
      {
        int v12 = (char *)(SplatValue + 3);
        if ((_UNKNOWN *)SplatValue[4] == &unk_1CFB2E344) {
          int v12 = (char *)SplatValue[5];
        }
        BOOL v2 = (v12[28] & 0xF) == 11;
      }
      else
      {
        if (*(unsigned char *)(v7 + 8) == 18)
        {
          int v13 = *(_DWORD *)(v7 + 32);
          if (v13)
          {
            unint64_t v14 = 0;
            BOOL v2 = 0;
            while (1)
            {
              AggregateElement = llvm::Constant::getAggregateElement(a2, v14);
              if (!AggregateElement) {
                break;
              }
              int v16 = *((unsigned __int8 *)AggregateElement + 16);
              if ((v16 - 11) >= 2)
              {
                if (v16 != 17) {
                  break;
                }
                uint64_t v17 = AggregateElement + 3;
                if ((_UNKNOWN *)AggregateElement[4] == &unk_1CFB2E344) {
                  uint64_t v17 = (void *)AggregateElement[5];
                }
                if ((*((unsigned char *)v17 + 28) & 0xF) != 0xB) {
                  break;
                }
                BOOL v2 = 1;
              }
              unint64_t v14 = (llvm::Type *)(v14 + 1);
              if (v13 == v14) {
                return (v10 ^ 1) & v2;
              }
            }
          }
        }
        BOOL v2 = 0;
      }
    }
    return (v10 ^ 1) & v2;
  }
}

uint64_t sub_1CC0244BC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  if (!a3)
  {
LABEL_5:
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 1;
    return result;
  }
  unsigned int v4 = a3 - 1;
  __int32 v5 = (uint64_t *)(a2 + 32 * (((a4 >> 4) ^ (a4 >> 9)) & (a3 - 1)));
  uint64_t v6 = *v5;
  if (*v5 != a4)
  {
    int v7 = 1;
    LODWORD(v8) = ((a4 >> 4) ^ (a4 >> 9)) & v4;
    while (v6 != -4096)
    {
      int v9 = v8 + v7++;
      uint64_t v8 = v9 & v4;
      uint64_t v6 = *(void *)(a2 + 32 * v8);
      if (v6 == a4)
      {
        __int32 v5 = (uint64_t *)(a2 + 32 * v8);
        goto LABEL_8;
      }
    }
    goto LABEL_5;
  }
LABEL_8:
  *(void *)uint64_t result = v5[1];
  int v10 = (const llvm::APInt *)(v5 + 2);
  unsigned int v11 = *((_DWORD *)v5 + 6);
  *(_DWORD *)(result + 16) = v11;
  if (v11 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)(result + 8), v10);
  }
  *(void *)(result + 8) = *(void *)v10;
  return result;
}

uint64_t sub_1CC024554(int32x2_t *a1, uint64_t a2, int a3)
{
  uint64_t result = sub_1CC023C0C((uint64_t)a1, a2);
  if (result)
  {
    if (a3)
    {
      (*(void (**)(int32x2_t *, uint64_t))(*(void *)a1 + 184))(a1, result);
      return 1;
    }
    else
    {
      sub_1CC023EB0(a1, result);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CC0245C4(uint64_t a1, void *a2)
{
  v35[4] = *MEMORY[0x1E4F143B8];
  int v33 = v35;
  uint64_t v34 = 0x200000000;
  int v4 = *((_DWORD *)a2 + 5);
  if ((v4 & 0x40000000) != 0)
  {
    uint64_t v6 = (void *)*(a2 - 1);
    uint64_t v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v5 = v4 & 0x7FFFFFF;
    uint64_t v6 = &a2[-4 * v5];
  }
  unsigned int v7 = 0;
  uint64_t v8 = 32 * v5;
  do
  {
    int v9 = (void *)*v6;
    if (*v6) {
      BOOL v10 = *(unsigned __int8 *)(*v6 + 16) >= 0x15u;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      uint64_t v31 = 0;
      int v32 = v9;
      if ((sub_1CC01F5A8((uint64_t *)(a1 + 120), &v32, &v31) & 1) == 0) {
        goto LABEL_19;
      }
      int v9 = *(void **)(v31 + 8);
      if (!v9) {
        goto LABEL_19;
      }
      unsigned int v7 = v34;
    }
    if (v7 >= HIDWORD(v34)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v33 + v7) = v9;
    unsigned int v7 = v34 + 1;
    LODWORD(v34) = v34 + 1;
    v6 += 4;
    v8 -= 32;
  }
  while (v8);
  Cast = llvm::ConstantExpr::getCast((llvm::ConstantExpr *)(*((unsigned __int8 *)a2 + 16) - 28), *(llvm::ConstantExpr **)v33, (llvm::Constant ***)*a2, 0);
  if (Cast)
  {
    int v32 = a2;
    sub_1CC01F644((uint64_t *)(a1 + 120), &v32)[1] = Cast;
    char v12 = 1;
    goto LABEL_20;
  }
LABEL_19:
  char v12 = 0;
LABEL_20:
  if (v33 != v35) {
    free(v33);
  }
  if (v12) {
    return 1;
  }
  uint64_t v14 = sub_1CC023C0C(a1, *(a2 - 4));
  if (v14) {
    sub_1CC023EB0((int32x2_t *)a1, v14);
  }
  if (*((unsigned __int8 *)a2 + 16) - 69 <= 5)
  {
    uint64_t v15 = (*(uint64_t (**)(void, void))(***(void ***)(a1 + 8) + 632))(**(void **)(a1 + 8), *a2);
    BOOL v17 = v15 < 4;
    if (v16) {
      BOOL v17 = v16 < 0;
    }
    if (!v17)
    {
      BOOL v18 = v16 < 1;
      if (!v16) {
        BOOL v18 = v15 < 5;
      }
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)a1 + 104))(a1);
      }
    }
  }
  uint64_t v19 = *(void **)(a1 + 8);
  int v20 = *((_DWORD *)a2 + 5);
  if ((v20 & 0x40000000) != 0)
  {
    BOOL v22 = (uint64_t *)*(a2 - 1);
    unint64_t v21 = v20 & 0x7FFFFFF;
  }
  else
  {
    unint64_t v21 = v20 & 0x7FFFFFF;
    BOOL v22 = &a2[-4 * v21];
  }
  int v33 = v35;
  uint64_t v34 = 0x400000000;
  if (v21 >= 5) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v21)
  {
    uint64_t v23 = 32 * v21;
    unsigned int v24 = v35;
    do
    {
      uint64_t v25 = *v22;
      v22 += 4;
      *v24++ = v25;
      v23 -= 32;
    }
    while (v23);
    long long v26 = v33;
  }
  else
  {
    long long v26 = v35;
  }
  LODWORD(v34) = v21;
  uint64_t v27 = (*(uint64_t (**)(void, void *, void *))(*(void *)*v19 + 72))(*v19, a2, v26);
  int v29 = v28;
  if (v33 != v35) {
    free(v33);
  }
  BOOL v30 = v27 < 0;
  if (v29) {
    BOOL v30 = v29 < 0;
  }
  if (v30) {
    return 0;
  }
  if (v29) {
    return v29 < 1;
  }
  return v27 < 1;
}

uint64_t sub_1CC024948(uint64_t a1, uint64_t ***a2, uint64_t a3, uint64_t a4, BOOL a5)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = (llvm::ConstantInt ***)*(a2 - 8);
  uint64_t v8 = (llvm::ConstantInt ***)*(a2 - 4);
  uint64_t v52 = v54;
  uint64_t v53 = 0x200000000;
  int v9 = *((_DWORD *)a2 + 5);
  if ((v9 & 0x40000000) != 0)
  {
    unsigned int v11 = (uint64_t ***)*(a2 - 1);
    uint64_t v10 = v9 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v10 = v9 & 0x7FFFFFF;
    unsigned int v11 = &a2[-4 * v10];
  }
  unsigned int v12 = 0;
  int v13 = (uint64_t *)(a1 + 120);
  uint64_t v14 = 32 * v10;
  do
  {
    uint64_t v15 = *v11;
    if (*v11) {
      BOOL v16 = *((unsigned __int8 *)*v11 + 16) >= 0x15u;
    }
    else {
      BOOL v16 = 1;
    }
    if (v16)
    {
      int v50 = (void ***)*v11;
      uint64_t v48 = 0;
      if ((sub_1CC01F5A8((uint64_t *)(a1 + 120), &v50, &v48) & 1) == 0 || (uint64_t v15 = *(uint64_t ***)(v48 + 8)) == 0)
      {
        char v17 = 0;
        goto LABEL_22;
      }
      unsigned int v12 = v53;
    }
    if (v12 >= HIDWORD(v53)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v52 + v12) = v15;
    unsigned int v12 = v53 + 1;
    LODWORD(v53) = v53 + 1;
    v11 += 4;
    v14 -= 32;
  }
  while (v14);
  BOOL v18 = (llvm::ConstantExpr *)(*((_WORD *)a2 + 9) & 0x3F);
  uint64_t v19 = *(uint64_t ****)v52;
  int v20 = (llvm::Constant *)*((void *)v52 + 1);
  if (v18 <= 0xF) {
    uint64_t FCmp = llvm::ConstantExpr::getFCmp(v18, v19, v20, 0);
  }
  else {
    uint64_t FCmp = (uint64_t)llvm::ConstantExpr::getICmp(v18, (llvm::Type *)v19, v20, 0, a5);
  }
  char v17 = FCmp;
  if (FCmp)
  {
    int v50 = a2;
    sub_1CC01F644((uint64_t *)(a1 + 120), &v50)[1] = FCmp;
    char v17 = 1;
  }
LABEL_22:
  if (v52 != v54) {
    free(v52);
  }
  if (v17) {
    return 1;
  }
  if (*((unsigned char *)a2 + 16) == 82) {
    return 0;
  }
  unsigned int v49 = 1;
  uint64_t v48 = 0;
  sub_1CC0244BC((uint64_t)&v52, *(void *)(a1 + 192), *(_DWORD *)(a1 + 208), (uint64_t)v7);
  unsigned int v24 = v52;
  int v50 = (void ***)v53;
  unsigned int v51 = v54[0];
  if (v52)
  {
    sub_1CC0244BC((uint64_t)&v52, *(void *)(a1 + 192), *(_DWORD *)(a1 + 208), (uint64_t)v8);
    uint64_t v48 = v53;
    unsigned int v49 = v54[0];
    if (v52)
    {
      if (v24 == v52)
      {
        uint64_t v25 = (llvm::Type *)llvm::ConstantInt::get(**v7, (llvm::LLVMContext *)&v50, v23);
        uint64_t v27 = (llvm::Constant *)llvm::ConstantInt::get(**v8, (llvm::LLVMContext *)&v48, v26);
        ICmp = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)(*((_WORD *)a2 + 9) & 0x3F), v25, v27, 0, v28);
        if (ICmp)
        {
          uint64_t v52 = a2;
          sub_1CC01F644((uint64_t *)(a1 + 120), &v52)[1] = ICmp;
          ++*(_DWORD *)(a1 + 580);
LABEL_33:
          uint64_t v22 = 1;
          goto LABEL_58;
        }
      }
    }
  }
  unsigned int v30 = *((_WORD *)a2 + 9) & 0x3F;
  if (v30 - 32 >= 0xA)
  {
    if (v30 > 0xE || ((1 << v30) & 0x4242) == 0) {
      goto LABEL_57;
    }
  }
  else if ((*((_WORD *)a2 + 9) & 0x3E) != 0x20)
  {
    goto LABEL_57;
  }
  if (*((unsigned char *)*(a2 - 4) + 16) == 19)
  {
    uint64_t v31 = (uint64_t)*(a2 - 8);
    if (v31
      && *(unsigned char *)(v31 + 16) == 21
      && (llvm::CallBase::paramHasAttr(*(void *)(a1 + 80), *(_DWORD *)(v31 + 32), 39) & 1) != 0)
    {
      goto LABEL_40;
    }
    int v38 = *(_DWORD *)(a1 + 160);
    if (v38)
    {
      uint64_t v39 = *(void *)(a1 + 144);
      int v40 = v38 - 1;
      unsigned int v41 = v40 & ((v31 >> 4) ^ (v31 >> 9));
      uint64_t v42 = *(void *)(v39 + 16 * v41);
      if (v31 == v42)
      {
LABEL_40:
        int v32 = *a2;
        uint64_t v33 = ***a2;
        if ((*((_WORD *)a2 + 9) & 0x3F) == 0x21)
        {
          Splat = *(void **)(v33 + 1560);
          if (!Splat)
          {
            uint64_t v35 = *(llvm::ConstantInt **)(v33 + 1888);
            unsigned int v36 = *(_DWORD *)(v33 + 1896);
            LODWORD(v53) = v36 >> 8;
            if (v36 >> 8 > 0x40) {
              operator new[]();
            }
            if (v36 <= 0xFF) {
              LOBYTE(v37) = 0;
            }
            else {
              unint64_t v37 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v36) + 63);
            }
            uint64_t v52 = (void *)(v37 & 1);
            Splat = llvm::ConstantInt::get(v35, (llvm::LLVMContext *)&v52, v23);
            if (v53 >= 0x41 && v52) {
              MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
            }
            *(void *)(v33 + 1560) = Splat;
          }
        }
        else
        {
          Splat = *(void **)(v33 + 1568);
          if (!Splat)
          {
            BOOL v46 = *(llvm::ConstantInt **)(v33 + 1888);
            unsigned int v47 = *(_DWORD *)(v33 + 1896);
            LODWORD(v53) = v47 >> 8;
            if (v47 >> 8 > 0x40) {
              operator new[]();
            }
            uint64_t v52 = 0;
            Splat = llvm::ConstantInt::get(v46, (llvm::LLVMContext *)&v52, v23);
            if (v53 >= 0x41 && v52) {
              MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
            }
            *(void *)(v33 + 1568) = Splat;
          }
        }
        if ((v32[1] & 0xFE) == 0x12) {
          Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v32 + 8) | ((unint64_t)(*((_DWORD *)v32 + 2) == 19) << 32)), (uint64_t)Splat);
        }
        uint64_t v52 = a2;
        sub_1CC01F644(v13, &v52)[1] = Splat;
        goto LABEL_33;
      }
      int v43 = 1;
      while (v42 != -4096)
      {
        unsigned int v44 = v41 + v43++;
        unsigned int v41 = v44 & v40;
        uint64_t v42 = *(void *)(v39 + 16 * v41);
        if (v31 == v42) {
          goto LABEL_40;
        }
      }
    }
  }
LABEL_57:
  uint64_t v22 = sub_1CC024554((int32x2_t *)a1, (uint64_t)*(a2 - 8), *((unsigned __int8 *)*(a2 - 4) + 16) == 19);
LABEL_58:
  if (v49 >= 0x41 && v48) {
    MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
  }
  if (v51 >= 0x41 && v50) {
    MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
  }
  return v22;
}

std::string *sub_1CC024F40(std::string *__str, std::string *a2, std::string *this)
{
  int v4 = __str;
  if (__str == a2) {
    return __str;
  }
  uint64_t v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    std::string::operator=(this + 1, v4 + 1);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = *(_OWORD *)&v4[2].__r_.__value_.__l.__data_;
    this = (std::string *)((char *)this + 64);
    int v4 = (std::string *)((char *)v4 + 64);
  }
  while (v4 != v5);
  return v5;
}

uint64_t sub_1CC024FB8(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_1CC025000(uint64_t *a1, void *a2)
{
  unsigned int v7 = 0;
  char v4 = sub_1CBFF6924(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CC025060((uint64_t)a1, (uint64_t)a2, a2, v7);
    void *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CC025060(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC025114(a1, v7);
  int v9 = 0;
  sub_1CBFF6924((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC025114(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC0251E0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC0251E0(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      uint64_t result = sub_1CBFF6924((uint64_t *)v5, a2, &v10);
      int v9 = v10;
      *uint64_t v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CC025290(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 216);
  uint64_t v5 = *(void *)(a1 + 224);
  if (v5 == v6)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 236);
    uint64_t v8 = (void *)(v5 + 8 * v7);
    if (v7)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 8 * v7;
      while (*(void *)(v5 + v9) != a3)
      {
        v9 += 8;
        if (v10 == v9) {
          goto LABEL_19;
        }
      }
      uint64_t v8 = (void *)(v5 + v9);
    }
LABEL_19:
    uint64_t v6 = *(void *)(a1 + 224);
  }
  else
  {
    uint64_t v11 = *(unsigned int *)(a1 + 232);
    int v12 = v11 - 1;
    unsigned int v13 = (v11 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v8 = (void *)(v5 + 8 * v13);
    uint64_t v14 = *v8;
    if (*v8 == -1)
    {
      uint64_t v15 = 0;
LABEL_75:
      if (v15) {
        uint64_t v8 = v15;
      }
      if (*v8 != a3) {
        uint64_t v8 = (void *)(v5 + 8 * v11);
      }
    }
    else
    {
      uint64_t v15 = 0;
      int v16 = 1;
      while (v14 != a3)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v14 == -2;
        }
        if (v17) {
          uint64_t v15 = v8;
        }
        unsigned int v18 = v13 + v16++;
        unsigned int v13 = v18 & v12;
        uint64_t v8 = (void *)(v5 + 8 * (v18 & v12));
        uint64_t v14 = *v8;
        if (*v8 == -1) {
          goto LABEL_75;
        }
      }
    }
  }
  BOOL v17 = v5 == v6;
  uint64_t v19 = 232;
  if (v17) {
    uint64_t v19 = 236;
  }
  if (v8 != (void *)(v5 + 8 * *(unsigned int *)(a1 + v19))) {
    return 0;
  }
  uint64_t v21 = *(void *)(a3 + 8);
  if (v21)
  {
    while (1)
    {
      uint64_t v22 = *(void *)(v21 + 24);
      unsigned int v23 = *(unsigned __int8 *)(v22 + 16);
      BOOL v24 = v22 && v23 >= 0x1C;
      if (v24 && v23 - 29 <= 0xA) {
        break;
      }
      uint64_t v21 = *(void *)(v21 + 8);
      if (!v21) {
        return 1;
      }
    }
LABEL_35:
    uint64_t v26 = *(void *)(v22 + 40);
    uint64_t v47 = v26;
    uint64_t v27 = *a2;
    uint64_t v29 = *(void *)(*a2 + 216);
    uint64_t v28 = *(void *)(*a2 + 224);
    if (v28 == v29)
    {
      uint64_t v30 = *(unsigned int *)(v27 + 236);
      uint64_t v31 = (void *)(v28 + 8 * v30);
      if (v30)
      {
        uint64_t v32 = 0;
        uint64_t v33 = 8 * v30;
        while (*(void *)(v28 + v32) != v26)
        {
          v32 += 8;
          if (v33 == v32) {
            goto LABEL_53;
          }
        }
        uint64_t v31 = (void *)(v28 + v32);
      }
LABEL_53:
      uint64_t v29 = *(void *)(*a2 + 224);
    }
    else
    {
      uint64_t v34 = *(unsigned int *)(v27 + 232);
      int v35 = v34 - 1;
      unsigned int v36 = (v34 - 1) & ((v26 >> 4) ^ (v26 >> 9));
      uint64_t v31 = (void *)(v28 + 8 * v36);
      uint64_t v37 = *v31;
      if (*v31 == -1)
      {
        int v38 = 0;
LABEL_70:
        if (v38) {
          uint64_t v31 = v38;
        }
        if (*v31 != v26) {
          uint64_t v31 = (void *)(v28 + 8 * v34);
        }
      }
      else
      {
        int v38 = 0;
        int v39 = 1;
        while (v37 != v26)
        {
          if (v38) {
            BOOL v40 = 0;
          }
          else {
            BOOL v40 = v37 == -2;
          }
          if (v40) {
            int v38 = v31;
          }
          unsigned int v41 = v36 + v39++;
          unsigned int v36 = v41 & v35;
          uint64_t v31 = (void *)(v28 + 8 * (v41 & v35));
          uint64_t v37 = *v31;
          if (*v31 == -1) {
            goto LABEL_70;
          }
        }
      }
    }
    if (v28 == v29) {
      uint64_t v42 = 236;
    }
    else {
      uint64_t v42 = 232;
    }
    if (v31 == (void *)(v28 + 8 * *(unsigned int *)(v27 + v42)))
    {
      int v43 = (uint64_t *)(v27 + 376);
      if (!sub_1CC025000((uint64_t *)(v27 + 376), &v47)[1] || sub_1CC025000(v43, &v47)[1] == a3) {
        return 0;
      }
    }
    while (1)
    {
      uint64_t v21 = *(void *)(v21 + 8);
      if (!v21) {
        break;
      }
      uint64_t v22 = *(void *)(v21 + 24);
      unsigned int v44 = *(unsigned __int8 *)(v22 + 16);
      if (v22) {
        BOOL v45 = v44 >= 0x1C;
      }
      else {
        BOOL v45 = 0;
      }
      if (v45 && v44 - 29 < 0xB) {
        goto LABEL_35;
      }
    }
  }
  return 1;
}

uint64_t sub_1CC025540(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 20);
  if (((v2 >> 1) & 0x3FFFFFF) != 1)
  {
    uint64_t v4 = 0;
    int v5 = 2;
    do
    {
      uint64_t v6 = result - 32 * (v2 & 0x7FFFFFF);
      if ((v2 & 0x40000000) != 0) {
        uint64_t v6 = *(void *)(result - 8);
      }
      if (*(void *)(v6 + 32 * (v5 & 0xFFFFFFFE)) == a2) {
        break;
      }
      ++v4;
      v5 += 2;
    }
    while (((v2 >> 1) & 0x3FFFFFF) - 1 != v4);
  }
  return result;
}

void sub_1CC02559C(void *a1)
{
  MEMORY[0x1D25D9CD0](a1[88], 8);
  sub_1CC01ECAC(a1);

  JUMPOUT(0x1D25D9CE0);
}

_DWORD *sub_1CC0255F0(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  if (v2 == a2 + 40)
  {
    uint64_t v3 = 0;
  }
  else
  {
    if (v2) {
      uint64_t v3 = v2 - 24;
    }
    else {
      uint64_t v3 = 0;
    }
    if (*(unsigned __int8 *)(v3 + 16) - 29 >= 0xB) {
      uint64_t v3 = 0;
    }
  }
  if (*(unsigned char *)(v3 + 16) != 30)
  {
    switch(*(unsigned char *)(v3 + 16))
    {
      case 0x1E:
        __break(1u);
        goto LABEL_18;
      case 0x1F:
        unsigned int v4 = (*(_DWORD *)(v3 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_15;
      case 0x20:
      case 0x26:
LABEL_18:
        unsigned int v4 = (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_15;
      case 0x21:
        goto LABEL_11;
      case 0x27:
        unsigned int v4 = *(_DWORD *)(v3 + 80) + 1;
LABEL_15:
        if (v4 < 2) {
          goto LABEL_12;
        }
        goto LABEL_11;
      default:
        goto LABEL_12;
    }
  }
  if ((*(_DWORD *)(v3 + 20) & 0x7FFFFFF) == 3) {
LABEL_11:
  }
    result[168] = 1;
LABEL_12:
  result[175] -= result[174];
  return result;
}

uint64_t sub_1CC0256DC(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 80) + 40) + 56) + 112);
  if (v1 && *(char *)(v1 + 13) < 0)
  {
    uint64_t v2 = *(void *)(a1 + 56);
    v7[0] = v8;
    v7[1] = 0x100000000;
    int v13 = 0;
    v8[1] = 0;
    v8[2] = 0;
    int v9 = 0;
    char v12 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = v2;
    sub_1CC5A43B0((uint64_t)v7, 0);
    llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze();
  }
  *(_DWORD *)(a1 + 644) = *(_DWORD *)(a1 + 236) - *(_DWORD *)(a1 + 240);
  *(_DWORD *)(a1 + 648) = *(_DWORD *)(a1 + 588);
  *(void *)(a1 + 652) = *(void *)(a1 + 568);
  *(_DWORD *)(a1 + 592) = *(_DWORD *)(a1 + 688);
  unsigned int v4 = *(_DWORD *)(a1 + 112);
  unsigned int v3 = *(_DWORD *)(a1 + 116);
  if (v3 <= v4 / 0xA)
  {
    int v5 = *(_DWORD *)(a1 + 700) - *(_DWORD *)(a1 + 692);
LABEL_9:
    *(_DWORD *)(a1 + 700) = v5;
    goto LABEL_10;
  }
  if (v3 <= v4 >> 1)
  {
    int v5 = *(_DWORD *)(a1 + 700) - *(_DWORD *)(a1 + 692) / 2;
    goto LABEL_9;
  }
  int v5 = *(_DWORD *)(a1 + 700);
LABEL_10:
  *(_DWORD *)(a1 + 684) = v5;
  return 0;
}

uint64_t sub_1CC0259AC()
{
  return 0;
}

uint64_t sub_1CC0259B4(uint64_t a1, uint64_t a2, const llvm::DataLayout *a3)
{
  *(_DWORD *)(a1 + 660) -= llvm::getCallsiteCost(*(llvm **)(a1 + 80), *(llvm::CallBase **)(a1 + 64), a3);
  *(_DWORD *)(a1 + 664) = (*(_WORD *)(*(void *)(a1 + 56) + 18) & 0x3FF0) == 144;
  int v4 = (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 48))(**(void **)(a1 + 8));
  *(_DWORD *)(a1 + 700) += (*(uint64_t (**)(void, void))(***(void ***)(a1 + 8) + 40))(**(void **)(a1 + 8), *(void *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 700)
     * (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 32))(**(void **)(a1 + 8));
  if (v5 >= 0) {
    int v6 = v5;
  }
  else {
    int v6 = v5 + 1;
  }
  *(_DWORD *)(a1 + 696) = v6 >> 1;
  int v7 = v5 * v4 / 100;
  *(_DWORD *)(a1 + 692) = v7;
  *(_DWORD *)(a1 + 700) = v5 + (v6 >> 1) + v7;
  return 0;
}

int32x2_t sub_1CC025AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  int v3 = sub_1CBB0BF40(*(void *)(a1 + 704), *(_DWORD *)(a1 + 720), a2, &v7);
  uint64_t v5 = v7;
  if (v3) {
    BOOL v6 = v7 == *(void *)(a1 + 704) + 16 * *(unsigned int *)(a1 + 720);
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    *(_DWORD *)(a1 + 596) += *(_DWORD *)(v7 + 8);
    *(_DWORD *)(a1 + 688) -= *(_DWORD *)(v5 + 8);
    *(void *)uint64_t v5 = -8192;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 712), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 712) = result;
  }
  return result;
}

uint64_t sub_1CC025B7C(uint64_t result)
{
  *(_DWORD *)(result + 600) = 1;
  return result;
}

uint64_t sub_1CC025B88(uint64_t result)
{
  *(_DWORD *)(result + 604) += dword_1EBCC5C30;
  return result;
}

uint64_t sub_1CC025BA0(uint64_t result)
{
  return result;
}

uint64_t sub_1CC025BB0(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 84)
  {
    uint64_t v3 = 0;
  }
  else if (v2 == 39)
  {
    uint64_t v3 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v3 = 2;
  }
  int v4 = 0;
  int v5 = *(_DWORD *)(a2 + 20);
  uint64_t v6 = -(uint64_t)(v5 & 0x7FFFFFF);
  if (v5 < 0)
  {
    uint64_t v7 = a2 - 32 * (v5 & 0x7FFFFFF);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((v8 & 0xFFFFFFFF0) != 0) {
      int v4 = *(_DWORD *)(v7 - 12) - *(_DWORD *)(v7 - v8);
    }
    else {
      int v4 = 0;
    }
  }
  *(_DWORD *)(result + 608) += 5 * ((-32 * v3 + 32 * (unint64_t)-v4 - 32 * v6 - 32) >> 5);
  return result;
}

uint64_t sub_1CC025C4C(uint64_t result)
{
  *(_DWORD *)(result + 612) += 15;
  return result;
}

void *sub_1CC025C5C(void *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = result;
  int v9 = *(unsigned __int8 *)(a3 + 16);
  if (v9 == 84)
  {
    uint64_t v10 = 0;
  }
  else if (v9 == 39)
  {
    uint64_t v10 = (*(_DWORD *)(a3 + 80) + 1);
  }
  else
  {
    uint64_t v10 = 2;
  }
  int v11 = 0;
  int v12 = *(_DWORD *)(a3 + 20);
  uint64_t v13 = -(uint64_t)(v12 & 0x7FFFFFF);
  if (v12 < 0)
  {
    uint64_t v14 = a3 - 32 * (v12 & 0x7FFFFFF);
    uint64_t v15 = *(void *)(v14 - 8);
    if ((v15 & 0xFFFFFFFF0) != 0) {
      int v11 = *(_DWORD *)(v14 - 12) - *(_DWORD *)(v14 - v15);
    }
    else {
      int v11 = 0;
    }
  }
  *((_DWORD *)result + 154) += 5 * ((-32 * v10 + 32 * (unint64_t)-v11 - 32 * v13 - 32) >> 5);
  if (a4)
  {
    uint64_t v22 = 0;
    long long v21 = 0u;
    long long v20 = 0u;
    long long v19 = 0u;
    __int16 v24 = 256;
    int v23 = 16843009;
    int v18 = 100;
    sub_1CC01A920((uint64_t)v16, a2, a3, (uint64_t)&v18, result[1], result[2], result[3], a8, result[4], result[5], result[6], result[9], 0, 1);
    if (!sub_1CC01AA4C(v16))
    {
      *((_DWORD *)v8 + 170) += v17;
      ++*((_DWORD *)v8 + 169);
    }
    return sub_1CC01BFF8((uint64_t)v16);
  }
  else
  {
    *((_DWORD *)result + 151) += dword_1EBCC5C30;
  }
  return result;
}

_DWORD *sub_1CC025DC4(_DWORD *result, int a2, unsigned int a3)
{
  if (a2)
  {
    result[156] += 5 * a2 + 20;
  }
  else if (a3 > 3)
  {
    result[158] = result[158] + 10 * (3 * (int)a3 / 2) - 10;
  }
  else
  {
    result[157] += 10 * a3;
  }
  return result;
}

uint64_t sub_1CC025E28(uint64_t result)
{
  *(_DWORD *)(result + 636) += 5;
  return result;
}

void *sub_1CC025E38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  int32x2_t result = sub_1CBA7B7CC((_DWORD *)(a1 + 704), &v3);
  *((_DWORD *)result + 2) = 0;
  return result;
}

uint64_t sub_1CC025E68(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  uint64_t result = sub_1CBB0BF40(*(void *)(a1 + 704), *(_DWORD *)(a1 + 720), a2, &v5);
  if (result) {
    uint64_t v4 = v5;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 704) + 16 * *(unsigned int *)(a1 + 720);
  }
  *(_DWORD *)(v4 + 8) += 5;
  *(_DWORD *)(a1 + 688) += 5;
  return result;
}

void sub_1CC025ED8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v2 = *(void **)(a2 + 8);
    if (v2)
    {
      *(void *)(a2 + 16) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1D25D9CE0);
  }
}

llvm::cl::Option *sub_1CC025F34(llvm::cl::Option *a1, char *a2, _WORD *a3, unsigned char **a4, __n128 *a5)
{
  uint64_t v10 = sub_1CB883A14((uint64_t)a1, 0, 0);
  *(unsigned char *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = &unk_1F25EDE58;
  *(void *)(v10 + 144) = 0;
  *(void *)uint64_t v10 = &unk_1F26440A0;
  *(void *)(v10 + 152) = &unk_1F2643CC0;
  *(void *)(v10 + 160) = &unk_1F25EDE78;
  *(void *)(v10 + 184) = v10 + 160;
  sub_1CC026024(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 sub_1CC026024(uint64_t a1, char *__s, _WORD *a3, unsigned char **a4, __n128 *a5)
{
  size_t v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v10);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  int v11 = *a4;
  *(unsigned char *)(a1 + 128) = **a4;
  *(unsigned char *)(a1 + 145) = 1;
  *(unsigned char *)(a1 + 144) = *v11;
  __n128 result = *a5;
  *(__n128 *)(a1 + 32) = *a5;
  return result;
}

void sub_1CC0260BC()
{
}

void *sub_1CC0260D0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F2604670;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC026118(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2604670;
  a2[1] = v2;
  return result;
}

void sub_1CC026144()
{
}

uint64_t sub_1CC026170(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
    return v2();
  }
  else
  {
    sub_1CB920400();
    return sub_1CC0261C0();
  }
}

uint64_t sub_1CC0261C0()
{
  int v5 = 1;
  int v1 = 1;
  int v2 = 225;
  v3.n128_u64[0] = (unint64_t)"Default amount of inlining to perform";
  v3.n128_u64[1] = 37;
  uint64_t v4 = &v2;
  sub_1CD495014((llvm::cl::Option *)&unk_1EBD03920, "inlinedefault-threshold", &v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBD03920, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Ignore TTI attributes compatibility check between callee/caller during inline cost calculation";
  v3.n128_u64[1] = 94;
  uint64_t v4 = &v2;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCC5670, "ignore-tti-inline-compatible", &v5, (unsigned char **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC5670, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Prints comments for instruction based on inline cost analysis";
  v3.n128_u64[1] = 61;
  uint64_t v4 = &v2;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCC5730, "print-instruction-comments", &v5, (unsigned char **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC5730, &dword_1CB82C000);
  int v5 = 1;
  int v1 = 1;
  int v2 = 225;
  v3.n128_u64[0] = (unint64_t)"Control the amount of inlining to perform (default = 225)";
  v3.n128_u64[1] = 57;
  uint64_t v4 = &v2;
  sub_1CD4951A8(&v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBD039E0, &dword_1CB82C000);
  int v5 = 1;
  int v1 = 1;
  int v2 = 325;
  v3.n128_u64[0] = (unint64_t)"Threshold for inlining functions with inline hint";
  v3.n128_u64[1] = 49;
  uint64_t v4 = &v2;
  sub_1CD495014((llvm::cl::Option *)&unk_1EBD03AA0, "inlinehint-threshold", &v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBD03AA0, &dword_1CB82C000);
  int v5 = 1;
  int v1 = 1;
  int v2 = 45;
  v3.n128_u64[1] = 37;
  uint64_t v4 = &v2;
  v3.n128_u64[0] = (unint64_t)"Threshold for inlining cold callsites";
  sub_1CD495014((llvm::cl::Option *)&unk_1EBD03B60, "inline-cold-callsite-threshold", &v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBD03B60, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Enable the cost-benefit analysis for the inliner";
  v3.n128_u64[1] = 48;
  uint64_t v4 = &v2;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCC57F0, "inline-enable-cost-benefit-analysis", &v5, (unsigned char **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC57F0, &dword_1CB82C000);
  int v5 = 1;
  int v1 = 1;
  int v2 = 8;
  v3.n128_u64[0] = (unint64_t)"Multiplier to multiply cycle savings by during inlining";
  v3.n128_u64[1] = 55;
  uint64_t v4 = &v2;
  sub_1CD495340(&v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCC58B0, &dword_1CB82C000);
  int v5 = 1;
  int v1 = 1;
  int v2 = 100;
  v3.n128_u64[0] = (unint64_t)"The maximum size of a callee that get's inlined without sufficient cycle savings";
  v3.n128_u64[1] = 80;
  uint64_t v4 = &v2;
  sub_1CD495014((llvm::cl::Option *)&unk_1EBCC5970, "inline-size-allowance", &v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBCC5970, &dword_1CB82C000);
  int v5 = 1;
  int v1 = 1;
  int v2 = 45;
  v3.n128_u64[0] = (unint64_t)"Threshold for inlining functions with cold attribute";
  v3.n128_u64[1] = 52;
  uint64_t v4 = &v2;
  sub_1CD495014((llvm::cl::Option *)&unk_1EBD03C20, "inlinecold-threshold", &v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBD03C20, &dword_1CB82C000);
  int v5 = 1;
  int v1 = 1;
  int v2 = 3000;
  v3.n128_u64[0] = (unint64_t)"Threshold for hot callsites ";
  v3.n128_u64[1] = 28;
  uint64_t v4 = &v2;
  sub_1CD495014((llvm::cl::Option *)&unk_1EBD03CE0, "hot-callsite-threshold", &v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBD03CE0, &dword_1CB82C000);
  int v5 = 1;
  int v1 = 1;
  int v2 = 525;
  v3.n128_u64[0] = (unint64_t)"Threshold for locally hot callsites ";
  v3.n128_u64[1] = 36;
  uint64_t v4 = &v2;
  sub_1CD495014((llvm::cl::Option *)&unk_1EBD03DA0, "locally-hot-callsite-threshold", &v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBD03DA0, &dword_1CB82C000);
  int v5 = 1;
  int v1 = 1;
  int v2 = 2;
  v3.n128_u64[0] = (unint64_t)"Maximum block frequency, expressed as a percentage of caller's entry frequency, for"
                                     " a callsite to be cold in the absence of profile information.";
  v3.n128_u64[1] = 144;
  uint64_t v4 = &v2;
  sub_1CD495014((llvm::cl::Option *)&unk_1EBCC5A30, "cold-callsite-rel-freq", &v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBCC5A30, &dword_1CB82C000);
  int v5 = 1;
  int v1 = 1;
  int v2 = 60;
  v3.n128_u64[0] = (unint64_t)"Minimum block frequency, expressed as a multiple of caller's entry frequency, for a"
                                     " callsite to be hot in the absence of profile information.";
  v3.n128_u64[1] = 141;
  uint64_t v4 = &v2;
  sub_1CD495014((llvm::cl::Option *)&unk_1EBCC5AF0, "hot-callsite-rel-freq", &v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBCC5AF0, &dword_1CB82C000);
  int v5 = 1;
  int v2 = 25;
  v3.n128_u64[1] = 55;
  uint64_t v4 = &v2;
  v3.n128_u64[0] = (unint64_t)"Call penalty that is applied per callsite when inlining";
  sub_1CD4954D8((llvm::cl::Option *)&unk_1EBCC5BB0, "inline-call-penalty", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBCC5BB0, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v1) = 0;
  int v2 = 1;
  v3.n128_u64[0] = (unint64_t)"Compute the full inline cost of a call site even when the cost exceeds the threshold.";
  v3.n128_u64[1] = 85;
  uint64_t v4 = &v1;
  sub_1CD49565C((llvm::cl::Option *)&unk_1EBD03E60, "inline-cost-full", &v5, (unsigned char **)&v4, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD03E60, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v1) = 1;
  int v2 = 1;
  v3.n128_u64[0] = (unint64_t)"Allow inlining when caller has a superset of callee's nobuiltin attributes.";
  v3.n128_u64[1] = 75;
  uint64_t v4 = &v1;
  sub_1CD4957F0(&v5, (char **)&v4, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCC5C70, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Disables evaluation of GetElementPtr with constant operands";
  v3.n128_u64[1] = 59;
  uint64_t v4 = &v2;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCC5D30, "disable-gep-const-evaluation", &v5, (unsigned char **)&v4, &v3);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC5D30, &dword_1CB82C000);
}

void llvm::DefaultInlineAdvice::recordUnsuccessfulInliningImpl(uint64_t a1, const char **a2)
{
  v61[35] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(llvm::Value **)(a1 + 64);
  int v5 = *a2;
  size_t v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  std::string::size_type v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v6;
  p_dst = &__dst;
  if (v6) {
LABEL_8:
  }
    memmove(p_dst, v5, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  int v11 = std::string::append(&__dst, "; ");
  std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)unsigned int v49 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  *(void *)&v49[16] = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  llvm::inlineCostStr(a1 + 72, (uint64_t)v41);
  if (v42 >= 0) {
    uint64_t v13 = v41;
  }
  else {
    uint64_t v13 = (void **)v41[0];
  }
  if (v42 >= 0) {
    std::string::size_type v14 = v42 & 0x7F;
  }
  else {
    std::string::size_type v14 = (std::string::size_type)v41[1];
  }
  uint64_t v15 = std::string::append((std::string *)v49, (const std::string::value_type *)v13, v14);
  std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  uint64_t v58 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v58 >= 0) {
    int v17 = (unsigned __int8 *)__p;
  }
  else {
    int v17 = (unsigned __int8 *)__p[0];
  }
  if (v58 >= 0) {
    size_t v18 = HIBYTE(v58) & 0x7F;
  }
  else {
    size_t v18 = (size_t)__p[1];
  }
  llvm::setInlineRemark(v4, v17, v18);
  if (SHIBYTE(v58) < 0) {
    operator delete(__p[0]);
  }
  if (v42 < 0) {
    operator delete(v41[0]);
  }
  if ((v49[23] & 0x80000000) != 0) {
    operator delete(*(void **)v49);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  long long v19 = *(uint64_t ****)(a1 + 48);
  uint64_t v20 = *(void *)***v19;
  if (*(void *)(v20 + 128)
    || (*(unsigned int (**)(void))(**(void **)(v20 + 72) + 48))(*(void *)(v20 + 72)))
  {
    llvm::DiagnosticLocation::DiagnosticLocation(&v48, (const llvm::DebugLoc *)(a1 + 32));
    llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)__p, (uint64_t)"inline", (uint64_t)"NotInlined", 10, &v48, *(void *)(a1 + 40));
    *(void *)unsigned int v49 = "'";
    *(void *)&v49[8] = 1;
    sub_1CC59ADEC((uint64_t *)&v59, (uint64_t)v49);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&__dst, "Callee", 6uLL, *(unsigned __int8 **)(a1 + 24));
    uint64_t v21 = sub_1CD3D6290((uint64_t)__p, (long long *)&__dst);
    *(void *)unsigned int v49 = "' is not inlined into '";
    *(void *)&v49[8] = 23;
    sub_1CC59ADEC((uint64_t *)(v21 + 80), (uint64_t)v49);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v41, "Caller", 6uLL, *(unsigned __int8 **)(a1 + 16));
    uint64_t v22 = sub_1CD3D6290(v21, (long long *)v41);
    *(void *)unsigned int v49 = "': ";
    *(void *)&v49[8] = 3;
    sub_1CC59ADEC((uint64_t *)(v22 + 80), (uint64_t)v49);
    int v23 = (char *)*a2;
    if (v23) {
      size_t v24 = strlen(v23);
    }
    else {
      size_t v24 = 0;
    }
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v37, "Reason", 6uLL, v23, v24);
    uint64_t v25 = sub_1CD3D6290(v22, (long long *)v37);
    int v26 = *(_DWORD *)(v25 + 8);
    v49[12] = *(unsigned char *)(v25 + 12);
    *(_DWORD *)&v49[8] = v26;
    long long v27 = *(_OWORD *)(v25 + 16);
    uint64_t v50 = *(void *)(v25 + 32);
    *(_OWORD *)&v49[16] = v27;
    uint64_t v28 = *(void *)(v25 + 72);
    long long v29 = *(_OWORD *)(v25 + 56);
    long long v51 = *(_OWORD *)(v25 + 40);
    long long v52 = v29;
    *(void *)unsigned int v49 = &unk_1F2616800;
    uint64_t v53 = v28;
    uint64_t v54 = v56;
    uint64_t v55 = 0x400000000;
    if (*(_DWORD *)(v25 + 88)) {
      sub_1CD494D68((uint64_t)&v54, v25 + 80);
    }
    uint64_t v30 = *(void *)(v25 + 360);
    v56[32] = *(void *)(v25 + 352);
    v56[33] = v30;
    *(void *)unsigned int v49 = &unk_1F26165A8;
    if (v40 < 0) {
      operator delete(v39);
    }
    if (v38 < 0) {
      operator delete(v37[0]);
    }
    if (v44 < 0) {
      operator delete(v43);
    }
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    if (v47 < 0) {
      operator delete(v46);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    __p[0] = &unk_1F2616800;
    uint64_t v31 = (char *)v59;
    if (v60)
    {
      unint64_t v32 = (unint64_t)v60 << 6;
      do
      {
        uint64_t v33 = (void **)&v31[v32];
        if (v31[v32 - 17] < 0) {
          operator delete(*(v33 - 5));
        }
        if (*((char *)v33 - 41) < 0) {
          operator delete(*(v33 - 8));
        }
        v32 -= 64;
      }
      while (v32);
      uint64_t v31 = (char *)v59;
    }
    if (v31 != (char *)v61) {
      free(v31);
    }
    llvm::OptimizationRemarkEmitter::emit(v19, (llvm::DiagnosticInfoOptimizationBase *)v49);
    *(void *)unsigned int v49 = &unk_1F2616800;
    uint64_t v34 = (char *)v54;
    if (v55)
    {
      unint64_t v35 = (unint64_t)v55 << 6;
      do
      {
        unsigned int v36 = (void **)&v34[v35];
        if (v34[v35 - 17] < 0) {
          operator delete(*(v36 - 5));
        }
        if (*((char *)v36 - 41) < 0) {
          operator delete(*(v36 - 8));
        }
        v35 -= 64;
      }
      while (v35);
      uint64_t v34 = (char *)v54;
    }
    if (v34 != (char *)v56) {
      free(v34);
    }
  }
}

llvm::Value *llvm::setInlineRemark(llvm::Value *result, unsigned __int8 *a2, size_t a3)
{
  if (byte_1EBD03FA0)
  {
    __n128 v3 = result;
    Context = (uint64_t *)llvm::Value::getContext(result);
    std::string::size_type v7 = llvm::Attribute::get(Context, "inline-remark", 0xDuLL, a2, a3);
    uint64_t v8 = (llvm::LLVMContext *)llvm::Value::getContext(v3);
    __n128 result = (llvm::Value *)llvm::AttributeList::addAttributeAtIndex((llvm::Value *)((char *)v3 + 64), v8, -1, (uint64_t)v7);
    *((void *)v3 + 8) = result;
  }
  return result;
}

void llvm::inlineCostStr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v14 = 0;
  int v5 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  std::string::size_type v12 = v13;
  int v11 = 0;
  uint64_t v4 = &unk_1F2646F30;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_1CC027460((llvm::raw_ostream *)&v4, a1);
  if (*((char *)v12 + 23) < 0)
  {
    sub_1CB8BDF7C(a2, *v12, (unint64_t)v12[1]);
  }
  else
  {
    long long v3 = *(_OWORD *)v12;
    *(void *)(a2 + 16) = v12[2];
    *(_OWORD *)a2 = v3;
  }
  uint64_t v4 = &unk_1F2646B98;
  if (v11 == 1 && v6) {
    MEMORY[0x1D25D9CB0](v6, 0x1000C8077774924);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
}

void llvm::DefaultInlineAdvice::recordInliningWithCalleeDeletedImpl(uint64_t ****this)
{
  if (*((unsigned char *)this + 136))
  {
    int v1 = (llvm::DefaultInlineAdvice *)this;
    int v2 = this[6];
    long long v3 = (unsigned __int8 *)*((void *)v1 + 4);
    uint64_t v6 = v3;
    if (v3)
    {
      uint64_t v4 = v1;
      int v5 = v2;
      llvm::MetadataTracking::track((uint64_t)&v6, v3, 2);
      int v1 = v4;
      int v2 = v5;
    }
    llvm::emitInlinedIntoBasedOnCost(v2, &v6, *((void *)v1 + 5), *((unsigned __int8 **)v1 + 3), *((unsigned __int8 **)v1 + 2), (_DWORD *)v1 + 18, 0, 0);
    if (v6) {
      llvm::MetadataTracking::untrack((uint64_t)&v6, v6);
    }
  }
}

void llvm::emitInlinedIntoBasedOnCost(uint64_t ***a1, unsigned __int8 **a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5, _DWORD *a6, char a7, const char *a8)
{
  char v22 = a7;
  uint64_t v14 = *a2;
  uint64_t v21 = v14;
  if (v14) {
    llvm::MetadataTracking::track((uint64_t)&v21, v14, 2);
  }
  BOOL v15 = *a6 == 0x80000000;
  v20[0] = &v22;
  v20[1] = a6;
  llvm::emitInlinedInto(a1, (llvm::DebugLoc *)&v21, a3, a4, a5, v15, (void (*)(uint64_t, void *))sub_1CC028FE8, (uint64_t)v20, a8);
  if (v21)
  {
    int v16 = *v21;
    if ((v16 - 4) > 0x1E)
    {
      if ((v16 - 3) >= 0xFFFFFFFE) {
        long long v19 = v21;
      }
      else {
        long long v19 = 0;
      }
      if ((v16 - 3) < 0xFFFFFFFE)
      {
        if (v16 == 3) {
          *((void *)v21 + 1) = 0;
        }
        return;
      }
      unint64_t v18 = (unint64_t)(v19 + 8);
    }
    else
    {
      if ((v21[1] & 0x7F) != 2 && !*((_DWORD *)v21 + 3)) {
        return;
      }
      uint64_t v17 = *((void *)v21 + 2);
      if ((v17 & 4) == 0) {
        return;
      }
      unint64_t v18 = v17 & 0xFFFFFFFFFFFFFFF8;
      if (!v18) {
        return;
      }
    }
    v20[0] = &v21;
    sub_1CC5FA668(v18 + 16, v20);
  }
}

void llvm::DefaultInlineAdvice::recordInliningImpl(uint64_t ****this)
{
  if (*((unsigned char *)this + 136))
  {
    int v1 = (llvm::DefaultInlineAdvice *)this;
    int v2 = this[6];
    long long v3 = (unsigned __int8 *)*((void *)v1 + 4);
    uint64_t v6 = v3;
    if (v3)
    {
      uint64_t v4 = v1;
      int v5 = v2;
      llvm::MetadataTracking::track((uint64_t)&v6, v3, 2);
      int v1 = v4;
      int v2 = v5;
    }
    llvm::emitInlinedIntoBasedOnCost(v2, &v6, *((void *)v1 + 5), *((unsigned __int8 **)v1 + 3), *((unsigned __int8 **)v1 + 2), (_DWORD *)v1 + 18, 0, 0);
    if (v6) {
      llvm::MetadataTracking::untrack((uint64_t)&v6, v6);
    }
  }
}

void llvm::DefaultInlineAdvisor::getAdviceImpl(llvm::DefaultInlineAdvisor *this, llvm::CallBase *a2)
{
}

uint64_t llvm::InlineAdvice::InlineAdvice(uint64_t result, uint64_t a2, void *a3, uint64_t a4, char a5)
{
  *(void *)__n128 result = &unk_1F26046B8;
  *(void *)(result + 8) = a2;
  uint64_t v5 = a3[5];
  *(void *)(result + 16) = *(void *)(v5 + 56);
  uint64_t v6 = *(a3 - 4);
  if (!v6 || *(unsigned char *)(v6 + 16) || *(void *)(v6 + 24) != a3[9]) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = (unsigned __int8 *)a3[6];
  *(void *)(result + 32) = v7;
  *(void *)(result + 24) = v6;
  if (v7)
  {
    uint64_t v11 = result;
    char v10 = a5;
    uint64_t v9 = a4;
    llvm::MetadataTracking::track(result + 32, v7, 2);
    a4 = v9;
    __n128 result = v11;
    a5 = v10;
    uint64_t v5 = a3[5];
  }
  *(void *)(result + 40) = v5;
  *(void *)(result + 48) = a4;
  *(unsigned char *)(result + 56) = a5;
  *(unsigned char *)(result + 57) = 0;
  return result;
}

_OWORD *llvm::InlineAdvice::recordInlineStatsIfNeeded(_OWORD *this)
{
  if (*(void *)(*((void *)this + 1) + 24)) {
    return llvm::ImportedFunctionsInliningStatistics::recordInline(*(void ***)(*((void *)this + 1) + 24), *((const llvm::Function **)this + 2), *((const llvm::Function **)this + 3));
  }
  return this;
}

uint64_t llvm::InlineAdvice::recordInlining(llvm::InlineAdvice *this)
{
  *((unsigned char *)this + 57) = 1;
  int v1 = *(void ***)(*((void *)this + 1) + 24);
  if (v1)
  {
    uint64_t v4 = this;
    llvm::ImportedFunctionsInliningStatistics::recordInline(v1, *((const llvm::Function **)this + 2), *((const llvm::Function **)this + 3));
    this = v4;
  }
  int v2 = *(uint64_t (**)(void))(*(void *)this + 16);

  return v2();
}

uint64_t llvm::InlineAdvice::recordInliningWithCalleeDeleted(llvm::InlineAdvice *this)
{
  *((unsigned char *)this + 57) = 1;
  int v1 = *(void ***)(*((void *)this + 1) + 24);
  if (v1)
  {
    uint64_t v4 = this;
    llvm::ImportedFunctionsInliningStatistics::recordInline(v1, *((const llvm::Function **)this + 2), *((const llvm::Function **)this + 3));
    this = v4;
  }
  int v2 = *(uint64_t (**)(void))(*(void *)this + 24);

  return v2();
}

llvm::raw_ostream *sub_1CC027460(llvm::raw_ostream *a1, uint64_t a2)
{
  if (*(_DWORD *)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *((void *)a1 + 4);
    if ((unint64_t)(*((void *)a1 + 3) - v4) > 0xB)
    {
      *(_DWORD *)(v4 + 8) = 695362934;
      *(void *)uint64_t v4 = *(void *)"(cost=never)";
      *((void *)a1 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(a1, "(cost=never)", 0xCuLL);
    }
  }
  else if (*(_DWORD *)a2 == 0x80000000)
  {
    sub_1CB8E509C(a1, "(cost=always)");
  }
  else
  {
    uint64_t v11 = *((void *)a1 + 4);
    if ((unint64_t)(*((void *)a1 + 3) - v11) > 5)
    {
      *(_WORD *)(v11 + 4) = 15732;
      *(_DWORD *)uint64_t v11 = 1936679720;
      *((void *)a1 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(a1, "(cost=", 6uLL);
    }
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "Cost", 4uLL, *(_DWORD *)a2);
    if (v26 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    if (v26 >= 0) {
      size_t v13 = v26 & 0x7F;
    }
    else {
      size_t v13 = v25;
    }
    llvm::raw_ostream::write(a1, p_p, v13);
    uint64_t v14 = *((void *)a1 + 4);
    if ((unint64_t)(*((void *)a1 + 3) - v14) > 0xB)
    {
      *(_DWORD *)(v14 + 8) = 1029991535;
      *(void *)uint64_t v14 = *(void *)", threshold=";
      *((void *)a1 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(a1, ", threshold=", 0xCuLL);
    }
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v18, "Threshold", 9uLL, *(_DWORD *)(a2 + 4));
    if (v21 >= 0) {
      BOOL v15 = v20;
    }
    else {
      BOOL v15 = (void **)v20[0];
    }
    if (v21 >= 0) {
      size_t v16 = v21 & 0x7F;
    }
    else {
      size_t v16 = (size_t)v20[1];
    }
    llvm::raw_ostream::write(a1, (const char *)v15, v16);
    uint64_t v17 = (unsigned char *)*((void *)a1 + 4);
    if (*((unsigned char **)a1 + 3) == v17)
    {
      llvm::raw_ostream::write(a1, ")", 1uLL);
    }
    else
    {
      *uint64_t v17 = 41;
      ++*((void *)a1 + 4);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
    if (v26 < 0) {
      operator delete(__p);
    }
    if (v23 < 0) {
      operator delete(__dst[0]);
    }
  }
  uint64_t v5 = *(char **)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = (_WORD *)*((void *)a1 + 4);
    if (*((void *)a1 + 3) - (void)v6 > 1uLL)
    {
      *uint64_t v6 = 8250;
      *((void *)a1 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a1, ": ", 2uLL);
    }
    size_t v7 = strlen(v5);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "Reason", 6uLL, v5, v7);
    if (v26 >= 0) {
      uint64_t v8 = (const char *)&__p;
    }
    else {
      uint64_t v8 = (const char *)__p;
    }
    if (v26 >= 0) {
      size_t v9 = v26 & 0x7F;
    }
    else {
      size_t v9 = v25;
    }
    llvm::raw_ostream::write(a1, v8, v9);
    if (v26 < 0) {
      operator delete(__p);
    }
    if (v23 < 0) {
      operator delete(__dst[0]);
    }
  }
  return a1;
}

void llvm::shouldInline(llvm::Value *a1@<X0>, void (*a2)(long long *__return_ptr, uint64_t, llvm::Value *)@<X1>, uint64_t a3@<X2>, uint64_t ***a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  char v10 = a1;
  v126[34] = *MEMORY[0x1E4F143B8];
  a2(&v95, a3, a1);
  uint64_t v12 = *((void *)v10 - 4);
  if (!v12 || *(unsigned char *)(v12 + 16) || *(void *)(v12 + 24) != *((void *)v10 + 9)) {
    uint64_t v12 = 0;
  }
  int v13 = v95;
  if (v95 == 0x80000000) {
    goto LABEL_6;
  }
  uint64_t v15 = *(void *)(*((void *)v10 + 5) + 56);
  if ((int)v95 >= SDWORD1(v95))
  {
    char v22 = *(unsigned __int8 **)(*((void *)v10 + 5) + 56);
    uint64_t v23 = *(void *)***a4;
    if (*(void *)(v23 + 128))
    {
      if (v95 == 0x7FFFFFFF) {
        goto LABEL_23;
      }
    }
    else
    {
      int v24 = (*(uint64_t (**)(void))(**(void **)(v23 + 72) + 48))(*(void *)(v23 + 72));
      if (v13 == 0x7FFFFFFF)
      {
        if (v24)
        {
LABEL_23:
          llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)v121, (uint64_t)"inline", (uint64_t)"NeverInline", 11, (uint64_t)v10);
          uint64_t v109 = "'";
          uint64_t v110 = 1;
          sub_1CC59ADEC((uint64_t *)&v124, (uint64_t)&v109);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v105, "Callee", 6uLL, (unsigned __int8 *)v12);
          uint64_t v25 = sub_1CD3D6290((uint64_t)v121, (long long *)v105);
          uint64_t v109 = "' not inlined into '";
          uint64_t v110 = 20;
          sub_1CC59ADEC((uint64_t *)(v25 + 80), (uint64_t)&v109);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v101, "Caller", 6uLL, v22);
          uint64_t v26 = sub_1CD3D6290(v25, (long long *)v101);
          uint64_t v109 = "' because it should never be inlined ";
          uint64_t v110 = 37;
          sub_1CC59ADEC((uint64_t *)(v26 + 80), (uint64_t)&v109);
          sub_1CD49674C(v26, (uint64_t)&v95);
          int v27 = *(_DWORD *)(v26 + 8);
          BYTE4(v110) = *(unsigned char *)(v26 + 12);
          LODWORD(v110) = v27;
          uint64_t v28 = *(void *)(v26 + 32);
          long long v111 = *(_OWORD *)(v26 + 16);
          uint64_t v112 = v28;
          long long v29 = *(_OWORD *)(v26 + 40);
          long long v30 = *(_OWORD *)(v26 + 56);
          uint64_t v31 = *(void *)(v26 + 72);
          uint64_t v109 = (const char *)&unk_1F2616800;
          long long v114 = v30;
          long long v113 = v29;
          uint64_t v115 = v31;
          uint64_t v116 = v118;
          uint64_t v117 = 0x400000000;
          if (*(_DWORD *)(v26 + 88)) {
            sub_1CD494D68((uint64_t)&v116, v26 + 80);
          }
          uint64_t v32 = *(void *)(v26 + 360);
          uint64_t v119 = *(void *)(v26 + 352);
          uint64_t v120 = v32;
          uint64_t v109 = (const char *)&unk_1F26165A8;
          if (v104 < 0) {
            operator delete(__p);
          }
          if (v102 < 0) {
            operator delete(v101[0]);
          }
          if (v108 < 0) {
            operator delete(v107);
          }
          if (v106 < 0) {
            operator delete(v105[0]);
          }
          v121[0] = &unk_1F2616800;
          uint64_t v33 = (char *)v124;
          if (v125)
          {
            unint64_t v34 = (unint64_t)v125 << 6;
            do
            {
              unint64_t v35 = (void **)&v33[v34];
              if (v33[v34 - 17] < 0) {
                operator delete(*(v35 - 5));
              }
              if (*((char *)v35 - 41) < 0) {
                operator delete(*(v35 - 8));
              }
              v34 -= 64;
            }
            while (v34);
            uint64_t v33 = (char *)v124;
          }
          if (v33 != (char *)v126) {
            free(v33);
          }
          llvm::OptimizationRemarkEmitter::emit(a4, (llvm::DiagnosticInfoOptimizationBase *)&v109);
          uint64_t v109 = (const char *)&unk_1F2616800;
          unsigned int v60 = (char *)v116;
          if (!v117) {
            goto LABEL_170;
          }
          unint64_t v61 = (unint64_t)v117 << 6;
          do
          {
            uint64_t v62 = (void **)&v60[v61];
            if (v60[v61 - 17] < 0) {
              operator delete(*(v62 - 5));
            }
            if (*((char *)v62 - 41) < 0) {
              operator delete(*(v62 - 8));
            }
            v61 -= 64;
          }
          while (v61);
LABEL_169:
          unsigned int v60 = (char *)v116;
LABEL_170:
          if (v60 != v118) {
            free(v60);
          }
        }
LABEL_42:
        llvm::inlineCostStr((uint64_t)&v95, (uint64_t)v121);
        if (v122 >= 0) {
          unsigned int v36 = (unsigned __int8 *)v121;
        }
        else {
          unsigned int v36 = (unsigned __int8 *)v121[0];
        }
        if (v122 >= 0) {
          size_t v37 = HIBYTE(v122) & 0x7F;
        }
        else {
          size_t v37 = (size_t)v121[1];
        }
        llvm::setInlineRemark(v10, v36, v37);
        if (SHIBYTE(v122) < 0) {
          operator delete(v121[0]);
        }
        goto LABEL_95;
      }
      if (!v24) {
        goto LABEL_42;
      }
    }
    llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)v121, (uint64_t)"inline", (uint64_t)"TooCostly", 9, (uint64_t)v10);
    uint64_t v109 = "'";
    uint64_t v110 = 1;
    sub_1CC59ADEC((uint64_t *)&v124, (uint64_t)&v109);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v105, "Callee", 6uLL, (unsigned __int8 *)v12);
    uint64_t v76 = sub_1CD3D6290((uint64_t)v121, (long long *)v105);
    uint64_t v109 = "' not inlined into '";
    uint64_t v110 = 20;
    sub_1CC59ADEC((uint64_t *)(v76 + 80), (uint64_t)&v109);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v101, "Caller", 6uLL, v22);
    uint64_t v77 = sub_1CD3D6290(v76, (long long *)v101);
    uint64_t v109 = "' because too costly to inline ";
    uint64_t v110 = 31;
    sub_1CC59ADEC((uint64_t *)(v77 + 80), (uint64_t)&v109);
    sub_1CD49674C(v77, (uint64_t)&v95);
    int v78 = *(_DWORD *)(v77 + 8);
    BYTE4(v110) = *(unsigned char *)(v77 + 12);
    LODWORD(v110) = v78;
    uint64_t v79 = *(void *)(v77 + 32);
    long long v111 = *(_OWORD *)(v77 + 16);
    uint64_t v112 = v79;
    long long v80 = *(_OWORD *)(v77 + 40);
    long long v81 = *(_OWORD *)(v77 + 56);
    uint64_t v82 = *(void *)(v77 + 72);
    uint64_t v109 = (const char *)&unk_1F2616800;
    long long v114 = v81;
    long long v113 = v80;
    uint64_t v115 = v82;
    uint64_t v116 = v118;
    uint64_t v117 = 0x400000000;
    if (*(_DWORD *)(v77 + 88)) {
      sub_1CD494D68((uint64_t)&v116, v77 + 80);
    }
    uint64_t v83 = *(void *)(v77 + 360);
    uint64_t v119 = *(void *)(v77 + 352);
    uint64_t v120 = v83;
    uint64_t v109 = (const char *)&unk_1F26165A8;
    if (v104 < 0) {
      operator delete(__p);
    }
    if (v102 < 0) {
      operator delete(v101[0]);
    }
    if (v108 < 0) {
      operator delete(v107);
    }
    if (v106 < 0) {
      operator delete(v105[0]);
    }
    v121[0] = &unk_1F2616800;
    unint64_t v84 = (char *)v124;
    if (v125)
    {
      unint64_t v85 = (unint64_t)v125 << 6;
      do
      {
        int v86 = (void **)&v84[v85];
        if (v84[v85 - 17] < 0) {
          operator delete(*(v86 - 5));
        }
        if (*((char *)v86 - 41) < 0) {
          operator delete(*(v86 - 8));
        }
        v85 -= 64;
      }
      while (v85);
      unint64_t v84 = (char *)v124;
    }
    if (v84 != (char *)v126) {
      free(v84);
    }
    llvm::OptimizationRemarkEmitter::emit(a4, (llvm::DiagnosticInfoOptimizationBase *)&v109);
    uint64_t v109 = (const char *)&unk_1F2616800;
    unsigned int v60 = (char *)v116;
    if (!v117) {
      goto LABEL_170;
    }
    unint64_t v87 = (unint64_t)v117 << 6;
    do
    {
      unsigned int v88 = (void **)&v60[v87];
      if (v60[v87 - 17] < 0) {
        operator delete(*(v88 - 5));
      }
      if (*((char *)v88 - 41) < 0) {
        operator delete(*(v88 - 8));
      }
      v87 -= 64;
    }
    while (v87);
    goto LABEL_169;
  }
  if (!a5) {
    goto LABEL_6;
  }
  int v16 = 0;
  int v92 = v95;
  uint64_t v17 = (llvm::APInt *)v93;
  v93[0] = 0;
  unsigned __int8 v94 = 0;
  int v91 = v10;
  if (v100)
  {
    uint64_t v58 = v15;
    uint64_t v17 = sub_1CD494F9C((llvm::APInt *)v93, (llvm::APInt *)&v96);
    uint64_t v15 = v58;
    char v10 = v91;
    int v16 = 1;
    unsigned __int8 v94 = 1;
  }
  unsigned int v18 = *(_DWORD *)(v15 + 32) & 0xF;
  BOOL v19 = v18 > 8 || ((1 << v18) & 0x188) == 0;
  if (v19 || v92 < 1)
  {
    BOOL v38 = 0;
    goto LABEL_90;
  }
  uint64_t v20 = *(void *)(v15 + 8);
  if (v18 - 7 > 1)
  {
    BOOL v21 = 0;
    BOOL v38 = 0;
    if (v20)
    {
LABEL_52:
      int v89 = v17;
      unsigned int v90 = a4;
      int v39 = 0;
      int v40 = 0;
      int v41 = 0;
      do
      {
        uint64_t v42 = *(void *)(v20 + 24);
        unsigned int v43 = *(unsigned __int8 *)(v42 + 16);
        if (v43 < 0x1C) {
          goto LABEL_63;
        }
        unsigned int v44 = v43 - 33;
        BOOL v45 = v44 > 0x33;
        uint64_t v46 = (1 << v44) & 0x8000000000041;
        if (v45 || v46 == 0) {
          goto LABEL_63;
        }
        uint64_t v48 = *(void *)(v42 - 32);
        if (!v48 || *(unsigned char *)(v48 + 16) || *(void *)(v48 + 24) != *(void *)(v42 + 72)) {
          uint64_t v48 = 0;
        }
        if (v48 == v15)
        {
          uint64_t v49 = v15;
          ((void (*)(void **__return_ptr, uint64_t))a2)(v121, a3);
          int v50 = LODWORD(v121[0]) + v41;
          if (HIDWORD(v121[0]) - LODWORD(v121[0]) < v92)
          {
            int v51 = v40 + 1;
          }
          else
          {
            int v50 = v41;
            int v51 = v40;
          }
          if (HIDWORD(v121[0]) - LODWORD(v121[0]) < v92) {
            int v52 = 1;
          }
          else {
            int v52 = v39;
          }
          if (LODWORD(v121[0]) == 0x80000000)
          {
            int v50 = v41;
            int v51 = v40;
            int v52 = v39;
          }
          if (SHIDWORD(v121[0]) <= SLODWORD(v121[0]))
          {
            BOOL v21 = 0;
          }
          else
          {
            int v41 = v50;
            int v40 = v51;
            int v39 = v52;
          }
          if (v123) {
            sub_1CD494A40((uint64_t)&v122);
          }
          uint64_t v15 = v49;
          char v10 = v91;
        }
        else
        {
LABEL_63:
          BOOL v21 = 0;
        }
        uint64_t v20 = *(void *)(v20 + 8);
      }
      while (v20);
      if (v39)
      {
        int v53 = v41 - 15000;
        if (!v21) {
          int v53 = v41;
        }
        BOOL v54 = v53 + v92 * v40 < v92 * dword_1EBCC5F30;
        BOOL v55 = v53 < v92;
        if (dword_1EBCC5F30 < 0) {
          BOOL v38 = v55;
        }
        else {
          BOOL v38 = v54;
        }
      }
      else
      {
        BOOL v38 = 0;
      }
      uint64_t v17 = v89;
      a4 = v90;
    }
  }
  else
  {
    if (v20)
    {
      BOOL v21 = *(void *)(v20 + 8) != 0;
      goto LABEL_52;
    }
    BOOL v38 = 0;
  }
  int v16 = v94;
LABEL_90:
  if (v16)
  {
    uint64_t v59 = v15;
    sub_1CD494A40((uint64_t)v17);
    uint64_t v15 = v59;
    char v10 = v91;
    unsigned __int8 v94 = 0;
    if (v38)
    {
LABEL_92:
      unsigned int v56 = (unsigned __int8 *)v15;
      uint64_t v57 = *(void *)***a4;
      if (*(void *)(v57 + 128)
        || (*(unsigned int (**)(void))(**(void **)(v57 + 72) + 48))(*(void *)(v57 + 72)))
      {
        llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)v121, (uint64_t)"inline", (uint64_t)"IncreaseCostInOtherContexts", 27, (uint64_t)v10);
        uint64_t v109 = "Not inlining. Cost of inlining '";
        uint64_t v110 = 32;
        sub_1CC59ADEC((uint64_t *)&v124, (uint64_t)&v109);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v105, "Callee", 6uLL, (unsigned __int8 *)v12);
        uint64_t v63 = sub_1CD3D6290((uint64_t)v121, (long long *)v105);
        uint64_t v109 = "' increases the cost of inlining '";
        uint64_t v110 = 34;
        sub_1CC59ADEC((uint64_t *)(v63 + 80), (uint64_t)&v109);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v101, "Caller", 6uLL, v56);
        uint64_t v64 = sub_1CD3D6290(v63, (long long *)v101);
        uint64_t v109 = "' in other contexts";
        uint64_t v110 = 19;
        sub_1CC59ADEC((uint64_t *)(v64 + 80), (uint64_t)&v109);
        int v65 = *(_DWORD *)(v64 + 8);
        BYTE4(v110) = *(unsigned char *)(v64 + 12);
        LODWORD(v110) = v65;
        long long v66 = *(_OWORD *)(v64 + 16);
        uint64_t v112 = *(void *)(v64 + 32);
        long long v111 = v66;
        uint64_t v67 = *(void *)(v64 + 72);
        long long v68 = *(_OWORD *)(v64 + 56);
        long long v113 = *(_OWORD *)(v64 + 40);
        long long v114 = v68;
        uint64_t v109 = (const char *)&unk_1F2616800;
        uint64_t v115 = v67;
        uint64_t v116 = v118;
        uint64_t v117 = 0x400000000;
        if (*(_DWORD *)(v64 + 88)) {
          sub_1CD494D68((uint64_t)&v116, v64 + 80);
        }
        uint64_t v69 = *(void *)(v64 + 360);
        uint64_t v119 = *(void *)(v64 + 352);
        uint64_t v120 = v69;
        uint64_t v109 = (const char *)&unk_1F26165A8;
        if (v104 < 0) {
          operator delete(__p);
        }
        if (v102 < 0) {
          operator delete(v101[0]);
        }
        if (v108 < 0) {
          operator delete(v107);
        }
        if (v106 < 0) {
          operator delete(v105[0]);
        }
        v121[0] = &unk_1F2616800;
        uint64_t v70 = (char *)v124;
        if (v125)
        {
          unint64_t v71 = (unint64_t)v125 << 6;
          do
          {
            uint64_t v72 = (void **)&v70[v71];
            if (v70[v71 - 17] < 0) {
              operator delete(*(v72 - 5));
            }
            if (*((char *)v72 - 41) < 0) {
              operator delete(*(v72 - 8));
            }
            v71 -= 64;
          }
          while (v71);
          uint64_t v70 = (char *)v124;
        }
        if (v70 != (char *)v126) {
          free(v70);
        }
        llvm::OptimizationRemarkEmitter::emit(a4, (llvm::DiagnosticInfoOptimizationBase *)&v109);
        uint64_t v109 = (const char *)&unk_1F2616800;
        uint64_t v73 = (char *)v116;
        if (v117)
        {
          unint64_t v74 = (unint64_t)v117 << 6;
          do
          {
            uint64_t v75 = (void **)&v73[v74];
            if (v73[v74 - 17] < 0) {
              operator delete(*(v75 - 5));
            }
            if (*((char *)v75 - 41) < 0) {
              operator delete(*(v75 - 8));
            }
            v74 -= 64;
          }
          while (v74);
          uint64_t v73 = (char *)v116;
        }
        if (v73 != v118) {
          free(v73);
        }
      }
      llvm::setInlineRemark(v10, "deferred", 8uLL);
LABEL_95:
      char v14 = 0;
      *(unsigned char *)a6 = 0;
      goto LABEL_96;
    }
  }
  else if (v38)
  {
    goto LABEL_92;
  }
LABEL_6:
  *(_OWORD *)a6 = v95;
  *(unsigned char *)(a6 + 16) = 0;
  *(unsigned char *)(a6 + 48) = 0;
  char v14 = 1;
  if (v100)
  {
    *(_DWORD *)(a6 + 24) = v97;
    *(void *)(a6 + 16) = v96;
    *(_DWORD *)(a6 + 40) = v99;
    *(void *)(a6 + 32) = v98;
    int v97 = 0;
    int v99 = 0;
    *(unsigned char *)(a6 + 48) = 1;
  }
LABEL_96:
  *(unsigned char *)(a6 + 56) = v14;
  if (v100) {
    sub_1CD494A40((uint64_t)&v96);
  }
}

void llvm::emitInlinedInto(uint64_t ***a1, llvm::DebugLoc *a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5, int a6, void (*a7)(uint64_t, void *), uint64_t a8, const char *a9)
{
  v45[34] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = *(void *)***a1;
  if (!*(void *)(v17 + 128)
    && !(*(unsigned int (**)(void))(**(void **)(v17 + 72) + 48))(*(void *)(v17 + 72)))
  {
    return;
  }
  if (a9) {
    unsigned int v18 = a9;
  }
  else {
    unsigned int v18 = "inline";
  }
  BOOL v19 = a6 == 0;
  if (a6) {
    uint64_t v20 = 12;
  }
  else {
    uint64_t v20 = 7;
  }
  if (v19) {
    BOOL v21 = "Inlined";
  }
  else {
    BOOL v21 = "AlwaysInline";
  }
  llvm::DiagnosticLocation::DiagnosticLocation(v37, a2);
  llvm::OptimizationRemark::OptimizationRemark((uint64_t)v42, (uint64_t)v18, (uint64_t)v21, v20, v37, a3);
  v37[0] = "'";
  v37[1] = (void *)1;
  sub_1CC59ADEC((uint64_t *)&v43, (uint64_t)v37);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v37, "Callee", 6uLL, a4);
  uint64_t v22 = sub_1CD3D6290((uint64_t)v42, (long long *)v37);
  v33[0] = "' inlined into '";
  v33[1] = (void *)16;
  sub_1CC59ADEC((uint64_t *)(v22 + 80), (uint64_t)v33);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v33, "Caller", 6uLL, a5);
  uint64_t v23 = sub_1CD3D6290(v22, (long long *)v33);
  v41[0] = "'";
  v41[1] = 1;
  sub_1CC59ADEC((uint64_t *)(v23 + 80), (uint64_t)v41);
  if (v36 < 0) {
    operator delete(__p);
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  if (v40 < 0) {
    operator delete(v39);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  if (a7) {
    a7(a8, v42);
  }
  int v24 = *(unsigned __int8 **)a2;
  uint64_t v32 = v24;
  if (v24) {
    llvm::MetadataTracking::track((uint64_t)&v32, v24, 2);
  }
  llvm::addLocationToRemarks((uint64_t)v42, (llvm::DebugLoc *)&v32);
  if (v32)
  {
    int v25 = *v32;
    if ((v25 - 4) > 0x1E)
    {
      if ((v25 - 3) >= 0xFFFFFFFE) {
        long long v29 = v32;
      }
      else {
        long long v29 = 0;
      }
      if ((v25 - 3) < 0xFFFFFFFE)
      {
        if (v25 == 3) {
          *((void *)v32 + 1) = 0;
        }
        goto LABEL_29;
      }
      unint64_t v30 = (unint64_t)(v29 + 8);
    }
    else
    {
      if ((v32[1] & 0x7F) != 2 && !*((_DWORD *)v32 + 3)) {
        goto LABEL_29;
      }
      uint64_t v31 = *((void *)v32 + 2);
      if ((v31 & 4) == 0) {
        goto LABEL_29;
      }
      unint64_t v30 = v31 & 0xFFFFFFFFFFFFFFF8;
      if (!v30) {
        goto LABEL_29;
      }
    }
    v41[0] = &v32;
    sub_1CC5FA668(v30 + 16, v41);
  }
LABEL_29:
  llvm::OptimizationRemarkEmitter::emit(a1, (llvm::DiagnosticInfoOptimizationBase *)v42);
  v42[0] = &unk_1F2616800;
  uint64_t v26 = (char *)v43;
  if (v44)
  {
    unint64_t v27 = (unint64_t)v44 << 6;
    do
    {
      uint64_t v28 = (void **)&v26[v27];
      if (v26[v27 - 17] < 0) {
        operator delete(*(v28 - 5));
      }
      if (*((char *)v28 - 41) < 0) {
        operator delete(*(v28 - 8));
      }
      v27 -= 64;
    }
    while (v27);
    uint64_t v26 = (char *)v43;
  }
  if (v26 != (char *)v45) {
    free(v26);
  }
}

void llvm::InlineAdvisor::getMandatoryAdvice(llvm::InlineAdvisor *this, llvm::CallBase *a2)
{
}

void llvm::InlineAdvisor::getCallerORE(llvm::InlineAdvisor *this, llvm::CallBase *a2)
{
}

void llvm::InlineAdvisor::getMandatoryKind(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  llvm::AnalysisManager<llvm::Function>::getResultImpl();
}

uint64_t llvm::InlineAdvisor::getAdvice(llvm::InlineAdvisor *this, llvm::CallBase *a2, char a3)
{
  if (a3)
  {
    uint64_t v5 = *((void *)a2 - 4);
    if (!v5 || *(unsigned char *)(v5 + 16) || *(void *)(v5 + 24) != *((void *)a2 + 9)) {
      uint64_t v5 = 0;
    }
    if (*(void *)(*((void *)a2 + 5) + 56) != v5) {
      llvm::AnalysisManager<llvm::Function>::getResultImpl();
    }
    uint64_t v6 = *(uint64_t (**)(llvm::InlineAdvisor *, llvm::CallBase *, void))(*(void *)this + 48);
    return v6(this, a2, 0);
  }
  else
  {
    long long v3 = *(uint64_t (**)(void))(*(void *)this + 40);
    return v3();
  }
}

void sub_1CC0289D4(uint64_t a1)
{
  *(void *)a1 = &unk_1F2604740;
  if (*(unsigned char *)(a1 + 128))
  {
    if (*(unsigned char *)(a1 + 120))
    {
      uint64_t v2 = a1;
      sub_1CD494A40(a1 + 88);
      a1 = v2;
      *(unsigned char *)(v2 + 120) = 0;
    }
    *(unsigned char *)(a1 + 128) = 0;
  }
  *(void *)a1 = &unk_1F26046B8;
  int v1 = *(unsigned __int8 **)(a1 + 32);
  if (v1) {
    llvm::MetadataTracking::untrack(a1 + 32, v1);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC028AA4()
{
}

void sub_1CC028B08()
{
  v3[17] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0;
  long long v1 = 0u;
  uint64_t v0 = 1;
  v3[0] = 1;
  do
  {
    v3[v0] = -4096;
    v0 += 2;
  }
  while (v0 != 17);
  if ((v3[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v3[1], 8);
  }
}

void sub_1CC028BFC()
{
}

void sub_1CC028CFC()
{
}

void sub_1CC028D28()
{
}

void sub_1CC028D54()
{
}

void *sub_1CC028D80(void *result, char *a2, char *a3, unint64_t a4)
{
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v7 = result;
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    __n128 result = operator new(v8 + 1);
    v7[1] = a4;
    void v7[2] = v9 | 0x8000000000000000;
    void *v7 = result;
    size_t v7 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)size_t v7 = v10;
    size_t v7 = (void *)((char *)v7 + 1);
  }
  *(unsigned char *)size_t v7 = 0;
  return result;
}

uint64_t sub_1CC028E24(uint64_t result)
{
  *(void *)__n128 result = &unk_1F2604740;
  if (*(unsigned char *)(result + 128))
  {
    if (*(unsigned char *)(result + 120))
    {
      uint64_t v3 = result;
      sub_1CD494A40(result + 88);
      __n128 result = v3;
      *(unsigned char *)(v3 + 120) = 0;
    }
    *(unsigned char *)(result + 128) = 0;
  }
  *(void *)__n128 result = &unk_1F26046B8;
  long long v1 = *(unsigned __int8 **)(result + 32);
  if (v1)
  {
    uint64_t v2 = result;
    llvm::MetadataTracking::untrack(result + 32, v1);
    return v2;
  }
  return result;
}

uint64_t sub_1CC028EC8(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 56))
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    if (*(unsigned char *)(result + 48))
    {
      sub_1CD494A40(result + 16);
      *(unsigned char *)(v3 + 48) = 0;
    }
    a2 = v2;
    __n128 result = v3;
    *(unsigned char *)(v3 + 56) = 0;
  }
  *(_OWORD *)__n128 result = *(_OWORD *)a2;
  *(unsigned char *)(result + 16) = 0;
  *(unsigned char *)(result + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    uint64_t v4 = result;
    sub_1CD494F9C((llvm::APInt *)(result + 16), (llvm::APInt *)(a2 + 16));
    __n128 result = v4;
    *(unsigned char *)(v4 + 48) = 1;
  }
  *(unsigned char *)(result + 56) = 1;
  return result;
}

uint64_t sub_1CC028F64(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v10 = llvm::InlineAdvice::InlineAdvice(a1, a2, a3, a5, *(unsigned char *)(a4 + 56));
  *(void *)uint64_t v10 = &unk_1F2604740;
  *(void *)(v10 + 64) = a3;
  *(unsigned char *)(v10 + 72) = 0;
  uint64_t v11 = v10 + 72;
  *(unsigned char *)(a1 + 128) = 0;
  if (*(unsigned char *)(a4 + 56)) {
    sub_1CC028EC8(v11, a4);
  }
  *(unsigned char *)(a1 + 136) = a6;
  return a1;
}

uint64_t sub_1CC028FE8(uint64_t a1, uint64_t a2)
{
  if (**(unsigned char **)a1)
  {
    uint64_t v6 = " to match profiling context";
    uint64_t v7 = 27;
    sub_1CC59ADEC((uint64_t *)(a2 + 80), (uint64_t)&v6);
  }
  uint64_t v6 = " with ";
  uint64_t v7 = 6;
  sub_1CC59ADEC((uint64_t *)(a2 + 80), (uint64_t)&v6);
  uint64_t v4 = *(void *)(a1 + 8);

  return sub_1CD49674C(a2, v4);
}

void ***sub_1CC029070(void ***a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*v2 != v2 + 2) {
      free(*v2);
    }
    MEMORY[0x1D25D9CE0](v2, 0x1080C40232BEC51);
  }
  return a1;
}

void *sub_1CC0290CC(void *a1)
{
  *a1 = &unk_1F26046B8;
  uint64_t v2 = (unsigned __int8 *)a1[4];
  if (v2)
  {
    int v3 = *v2;
    if ((v3 - 4) > 0x1E)
    {
      if ((v3 - 3) >= 0xFFFFFFFE) {
        uint64_t v5 = a1[4];
      }
      else {
        uint64_t v5 = 0;
      }
      if ((v3 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v6 = v5 + 8;
LABEL_11:
        uint64_t v8 = a1 + 4;
        sub_1CC5FA668(v6 + 16, &v8);
        return a1;
      }
      if (v3 == 3) {
        *((void *)v2 + 1) = 0;
      }
    }
    else if ((v2[1] & 0x7F) == 2 || *((_DWORD *)v2 + 3))
    {
      uint64_t v7 = *((void *)v2 + 2);
      if ((v7 & 4) != 0)
      {
        unint64_t v6 = v7 & 0xFFFFFFFFFFFFFFF8;
        if (v6) {
          goto LABEL_11;
        }
      }
    }
  }
  return a1;
}

void sub_1CC029194(void *a1)
{
  *a1 = &unk_1F26046B8;
  long long v1 = (unsigned __int8 *)a1[4];
  if (!v1) {
    goto LABEL_5;
  }
  int v2 = *v1;
  if ((v2 - 4) > 0x1E)
  {
    if ((v2 - 3) >= 0xFFFFFFFE) {
      uint64_t v3 = a1[4];
    }
    else {
      uint64_t v3 = 0;
    }
    if ((v2 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v4 = v3 + 8;
LABEL_13:
      unint64_t v6 = a1 + 4;
      sub_1CC5FA668(v4 + 16, &v6);
      goto LABEL_5;
    }
    if (v2 == 3) {
      *((void *)v1 + 1) = 0;
    }
  }
  else if ((v1[1] & 0x7F) == 2 || *((_DWORD *)v1 + 3))
  {
    uint64_t v5 = *((void *)v1 + 2);
    if ((v5 & 4) != 0)
    {
      unint64_t v4 = v5 & 0xFFFFFFFFFFFFFFF8;
      if (v4) {
        goto LABEL_13;
      }
    }
  }
LABEL_5:

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC02927C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    int v2 = *(uint64_t ****)(a1 + 48);
    uint64_t v3 = *(unsigned __int8 **)(a1 + 32);
    uint64_t v9 = v3;
    if (v3)
    {
      llvm::MetadataTracking::track((uint64_t)&v9, v3, 2);
      BOOL v4 = *(unsigned char *)(a1 + 56) != 0;
    }
    else
    {
      BOOL v4 = 1;
    }
    llvm::emitInlinedInto(v2, (llvm::DebugLoc *)&v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 24), *(unsigned __int8 **)(a1 + 16), v4, (void (*)(uint64_t, void *))sub_1CC029788, (uint64_t)&v10, 0);
    if (v9)
    {
      int v5 = *v9;
      if ((v5 - 4) > 0x1E)
      {
        if ((v5 - 3) >= 0xFFFFFFFE) {
          unint64_t v6 = v9;
        }
        else {
          unint64_t v6 = 0;
        }
        if ((v5 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v7 = (unint64_t)(v6 + 8);
LABEL_15:
          uint64_t v10 = &v9;
          sub_1CC5FA668(v7 + 16, &v10);
          return;
        }
        if (v5 == 3) {
          *((void *)v9 + 1) = 0;
        }
      }
      else if ((v9[1] & 0x7F) == 2 || *((_DWORD *)v9 + 3))
      {
        uint64_t v8 = *((void *)v9 + 2);
        if ((v8 & 4) != 0)
        {
          unint64_t v7 = v8 & 0xFFFFFFFFFFFFFFF8;
          if (v7) {
            goto LABEL_15;
          }
        }
      }
    }
  }
}

uint64_t sub_1CC029388(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void sub_1CC0293AC(uint64_t a1, char **a2)
{
  v48[34] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 56))
  {
    BOOL v4 = *(uint64_t ****)(a1 + 48);
    uint64_t v5 = *(void *)***v4;
    if (*(void *)(v5 + 128)
      || (*(unsigned int (**)(void))(**(void **)(v5 + 72) + 48))(*(void *)(v5 + 72)))
    {
      llvm::DiagnosticLocation::DiagnosticLocation(&v34, (const llvm::DebugLoc *)(a1 + 32));
      llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)v45, (uint64_t)"inline", (uint64_t)"NotInlined", 10, &v34, *(void *)(a1 + 40));
      unint64_t v35 = "'";
      uint64_t v36 = 1;
      sub_1CC59ADEC((uint64_t *)&v46, (uint64_t)&v35);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v30, "Callee", 6uLL, *(unsigned __int8 **)(a1 + 24));
      uint64_t v6 = sub_1CD3D6290((uint64_t)v45, (long long *)v30);
      unint64_t v35 = "' is not AlwaysInline into '";
      uint64_t v36 = 28;
      sub_1CC59ADEC((uint64_t *)(v6 + 80), (uint64_t)&v35);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v26, "Caller", 6uLL, *(unsigned __int8 **)(a1 + 16));
      uint64_t v7 = sub_1CD3D6290(v6, (long long *)v26);
      unint64_t v35 = "': ";
      uint64_t v36 = 3;
      sub_1CC59ADEC((uint64_t *)(v7 + 80), (uint64_t)&v35);
      uint64_t v8 = *a2;
      if (v8) {
        size_t v9 = strlen(v8);
      }
      else {
        size_t v9 = 0;
      }
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "Reason", 6uLL, v8, v9);
      uint64_t v10 = sub_1CD3D6290(v7, (long long *)__dst);
      int v11 = *(_DWORD *)(v10 + 8);
      BYTE4(v36) = *(unsigned char *)(v10 + 12);
      LODWORD(v36) = v11;
      long long v12 = *(_OWORD *)(v10 + 16);
      uint64_t v38 = *(void *)(v10 + 32);
      long long v37 = v12;
      uint64_t v13 = *(void *)(v10 + 72);
      long long v14 = *(_OWORD *)(v10 + 56);
      long long v39 = *(_OWORD *)(v10 + 40);
      long long v40 = v14;
      unint64_t v35 = (const char *)&unk_1F2616800;
      uint64_t v41 = v13;
      uint64_t v42 = v44;
      uint64_t v43 = 0x400000000;
      if (*(_DWORD *)(v10 + 88)) {
        sub_1CD494D68((uint64_t)&v42, v10 + 80);
      }
      uint64_t v15 = *(void *)(v10 + 360);
      unsigned char v44[32] = *(void *)(v10 + 352);
      v44[33] = v15;
      unint64_t v35 = (const char *)&unk_1F26165A8;
      if (v25 < 0) {
        operator delete(__p);
      }
      if (v23 < 0) {
        operator delete(__dst[0]);
      }
      if (v29 < 0) {
        operator delete(v28);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      if (v33 < 0) {
        operator delete(v32);
      }
      if (v31 < 0) {
        operator delete(v30[0]);
      }
      v45[0] = &unk_1F2616800;
      int v16 = (char *)v46;
      if (v47)
      {
        unint64_t v17 = (unint64_t)v47 << 6;
        do
        {
          unsigned int v18 = (void **)&v16[v17];
          if (v16[v17 - 17] < 0) {
            operator delete(*(v18 - 5));
          }
          if (*((char *)v18 - 41) < 0) {
            operator delete(*(v18 - 8));
          }
          v17 -= 64;
        }
        while (v17);
        int v16 = (char *)v46;
      }
      if (v16 != (char *)v48) {
        free(v16);
      }
      llvm::OptimizationRemarkEmitter::emit(v4, (llvm::DiagnosticInfoOptimizationBase *)&v35);
      unint64_t v35 = (const char *)&unk_1F2616800;
      BOOL v19 = (char *)v42;
      if (v43)
      {
        unint64_t v20 = (unint64_t)v43 << 6;
        do
        {
          BOOL v21 = (void **)&v19[v20];
          if (v19[v20 - 17] < 0) {
            operator delete(*(v21 - 5));
          }
          if (*((char *)v21 - 41) < 0) {
            operator delete(*(v21 - 8));
          }
          v20 -= 64;
        }
        while (v20);
        BOOL v19 = (char *)v42;
      }
      if (v19 != (char *)v44) {
        free(v19);
      }
    }
  }
}

uint64_t sub_1CC029788(uint64_t a1, uint64_t a2)
{
  v3[0] = ": always inline attribute";
  v3[1] = 25;
  return sub_1CC59ADEC((uint64_t *)(a2 + 80), (uint64_t)v3);
}

void sub_1CC0297C0()
{
}

uint64_t sub_1CC0297EC()
{
  LOBYTE(v1) = 0;
  int v2 = 1;
  uint64_t v3 = &v1;
  v4.n128_u64[0] = (unint64_t)"Enable adding inline-remark attribute to callsites processed by inliner but decided"
                                     " to be not inlined";
  v4.n128_u64[1] = 101;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBD03F20, "inline-remark-attribute", (unsigned char **)&v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD03F20, &dword_1CB82C000);
  LOBYTE(v1) = 0;
  int v2 = 1;
  uint64_t v3 = &v1;
  v4.n128_u64[0] = (unint64_t)"Enable deferred inlining";
  v4.n128_u64[1] = 24;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCC5DF0, "inline-deferral", (unsigned char **)&v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC5DF0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Scale to limit the cost of inline deferral";
  v4.n128_u64[1] = 42;
  int v1 = 1;
  int v2 = 2;
  uint64_t v3 = &v2;
  sub_1CD4965C8((llvm::cl::Option *)&unk_1EBCC5EB0, "inline-deferral-scale", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBCC5EB0, &dword_1CB82C000);
}

void *llvm::InlineSizeEstimatorAnalysis::InlineSizeEstimatorAnalysis(void *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

void *llvm::InlineSizeEstimatorAnalysis::InlineSizeEstimatorAnalysis(void *result)
{
  *__n128 result = 0;
  return result;
}

{
  *__n128 result = 0;
  return result;
}

void llvm::InlineSizeEstimatorAnalysis::~InlineSizeEstimatorAnalysis(llvm::InlineSizeEstimatorAnalysis *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    MEMORY[0x1D25D9CE0](v2, 0xC400A2AC0F1);
  }
}

{
  uint64_t v1;

  int v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    MEMORY[0x1D25D9CE0](v1, 0xC400A2AC0F1);
  }
}

uint64_t llvm::InlineSizeEstimatorAnalysis::isEvaluatorRequested(llvm::InlineSizeEstimatorAnalysis *this)
{
  return 0;
}

void llvm::initializeInstCountLegacyPassPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC5F78, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC029A04;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCC5F78, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC029A04()
{
}

uint64_t sub_1CC029AA4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC5F70;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2604808;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC5F78, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC029A04;
    v5[1] = &PassRegistry;
    __n128 v4 = v5;
    std::__call_once(&qword_1EBCC5F78, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC029B54()
{
}

void sub_1CC029B94(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC029BD0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

uint64_t sub_1CC029BDC()
{
  return 0;
}

uint64_t llvm::InstructionPrecedenceTracking::getFirstSpecialInstruction(int32x2_t *this, const llvm::BasicBlock *a2)
{
  int v11 = a2;
  uint64_t v3 = this + 1;
  int32x2_t v2 = this[1];
  uint64_t v4 = this[3].u32[0];
  if (v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v6 = (const llvm::BasicBlock **)(*(void *)&v2 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a2) {
      goto LABEL_8;
    }
    int v8 = 1;
    while (v7 != (const llvm::BasicBlock *)-4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & (v4 - 1);
      uint64_t v7 = *(const llvm::BasicBlock **)(*(void *)&v2 + 16 * v5);
      if (v7 == a2)
      {
        uint64_t v6 = (const llvm::BasicBlock **)(*(void *)&v2 + 16 * v5);
        goto LABEL_8;
      }
    }
  }
  uint64_t v6 = (const llvm::BasicBlock **)(*(void *)&v2 + 16 * v4);
LABEL_8:
  if (v6 == (const llvm::BasicBlock **)(*(void *)&v2 + 16 * v4)) {
    llvm::InstructionPrecedenceTracking::fill(this, a2);
  }
  return sub_1CC02A230((uint64_t)v3, (uint64_t *)&v11)[1];
}

void *llvm::InstructionPrecedenceTracking::fill(int32x2_t *this, const llvm::BasicBlock *a2)
{
  int v16 = a2;
  uint64_t v4 = this + 1;
  int32x2_t v3 = this[1];
  __int32 v5 = this[3].i32[0];
  if (v5)
  {
    __int32 v6 = v5 - 1;
    LODWORD(v7) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    int v8 = (const llvm::BasicBlock **)(*(void *)&v3 + 16 * v7);
    int v9 = *v8;
    if (*v8 == a2)
    {
LABEL_7:
      char *v8 = (const llvm::BasicBlock *)-8192;
      this[2] = vadd_s32(this[2], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v10 = 1;
      while (v9 != (const llvm::BasicBlock *)-4096)
      {
        int v11 = v7 + v10++;
        uint64_t v7 = v11 & v6;
        int v9 = *(const llvm::BasicBlock **)(*(void *)&v3 + 16 * v7);
        if (v9 == a2)
        {
          int v8 = (const llvm::BasicBlock **)(*(void *)&v3 + 16 * v7);
          goto LABEL_7;
        }
      }
    }
  }
  long long v12 = (char *)a2 + 40;
  for (uint64_t i = *((void *)a2 + 6); (char *)i != v12; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      uint64_t v14 = i - 24;
    }
    else {
      uint64_t v14 = 0;
    }
    if ((**(unint64_t (***)(int32x2_t *, uint64_t))this)(this, v14)) {
      goto LABEL_16;
    }
  }
  uint64_t v14 = 0;
LABEL_16:
  __n128 result = sub_1CC02A230((uint64_t)v4, (uint64_t *)&v16);
  result[1] = v14;
  return result;
}

BOOL llvm::InstructionPrecedenceTracking::hasSpecialInstructions(int32x2_t *this, const llvm::BasicBlock *a2)
{
  return llvm::InstructionPrecedenceTracking::getFirstSpecialInstruction(this, a2) != 0;
}

uint64_t llvm::InstructionPrecedenceTracking::isPreceededBySpecialInstruction(int32x2_t *this, const llvm::BasicBlock **a2)
{
  uint64_t result = llvm::InstructionPrecedenceTracking::getFirstSpecialInstruction(this, a2[5]);
  if (result)
  {
    uint64_t v4 = *(void *)(result + 40);
    int v5 = *(__int16 *)(v4 + 18);
    if ((v5 & 0x80000000) == 0)
    {
      uint64_t v6 = *(void *)(v4 + 48);
      if (v6 != v4 + 40)
      {
        int v7 = 0;
        do
        {
          uint64_t v8 = v6 - 24;
          if (!v6) {
            uint64_t v8 = 0;
          }
          *(_DWORD *)(v8 + 56) = v7++;
          uint64_t v6 = *(void *)(v6 + 8);
        }
        while (v6 != v4 + 40);
      }
      *(_WORD *)(v4 + 18) = v5 | 0x8000;
    }
    return *(_DWORD *)(result + 56) < *((_DWORD *)a2 + 14);
  }
  return result;
}

int32x2_t llvm::InstructionPrecedenceTracking::insertInstructionTo(llvm::InstructionPrecedenceTracking *this, const llvm::Instruction *a2, const llvm::BasicBlock *a3)
{
  int v5 = a3;
  if ((**(unsigned int (***)(llvm::InstructionPrecedenceTracking *, const llvm::Instruction *))this)(this, a2))
  {
    uint64_t v6 = 0;
    if (sub_1CC02A194((uint64_t *)this + 1, &v5, &v6))
    {
      *uint64_t v6 = -8192;
      int32x2_t result = vadd_s32(*(int32x2_t *)((char *)this + 16), (int32x2_t)0x1FFFFFFFFLL);
      *((int32x2_t *)this + 2) = result;
    }
  }
  return result;
}

int32x2_t llvm::InstructionPrecedenceTracking::removeInstruction(int32x2_t *this, const llvm::Instruction *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  uint64_t v13 = v2;
  uint64_t v4 = (uint64_t *)&this[1];
  int32x2_t v3 = this[1];
  __int32 v5 = this[3].i32[0];
  if (v5)
  {
    __int32 v7 = v5 - 1;
    unsigned int v8 = ((v2 >> 4) ^ (v2 >> 9)) & v7;
    uint64_t v9 = *(void *)(*(void *)&v3 + 16 * v8);
    if (v2 == v9)
    {
LABEL_6:
      if ((const llvm::Instruction *)sub_1CC02A230((uint64_t)&this[1], &v13)[1] == a2)
      {
        uint64_t v14 = 0;
        if (sub_1CC02A194(v4, &v13, &v14))
        {
          *uint64_t v14 = -8192;
          int32x2_t result = vadd_s32(this[2], (int32x2_t)0x1FFFFFFFFLL);
          this[2] = result;
        }
      }
    }
    else
    {
      int v10 = 1;
      while (v9 != -4096)
      {
        unsigned int v11 = v8 + v10++;
        unsigned int v8 = v11 & v7;
        uint64_t v9 = *(void *)(*(void *)&v3 + 16 * v8);
        if (v2 == v9) {
          goto LABEL_6;
        }
      }
    }
  }
  return result;
}

void llvm::InstructionPrecedenceTracking::removeUsersOf(int32x2_t *this, const llvm::Instruction *a2)
{
  for (uint64_t i = *((void *)a2 + 1); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v4 = *(unsigned __int8 **)(i + 24);
    if (v4) {
      BOOL v5 = v4[16] >= 0x1Cu;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5) {
      llvm::InstructionPrecedenceTracking::removeInstruction(this, (const llvm::Instruction *)v4);
    }
  }
}

_DWORD *llvm::InstructionPrecedenceTracking::clear(llvm::InstructionPrecedenceTracking *this)
{
  return sub_1CBB8977C((_DWORD *)this + 2);
}

uint64_t llvm::ImplicitControlFlowTracking::isSpecialInstruction(llvm::ImplicitControlFlowTracking *this, const llvm::Instruction *a2)
{
  return llvm::isGuaranteedToTransferExecutionToSuccessor(a2, a2) ^ 1;
}

uint64_t llvm::MemoryWriteTracking::isSpecialInstruction(llvm::MemoryWriteTracking *this, const llvm::Instruction *a2)
{
  int v3 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v3 == 84)
  {
    uint64_t v6 = *((void *)a2 - 4);
    if (v6 && !*(unsigned char *)(v6 + 16) && *(void *)(v6 + 24) == *((void *)a2 + 9) && *(_DWORD *)(v6 + 36) == 138) {
      return 0;
    }
    goto LABEL_12;
  }
  uint64_t result = 0;
  uint64_t v5 = (v3 - 33);
  if (v5 > 0x37) {
    return result;
  }
  if (((1 << v5) & 0x8000000000041) != 0)
  {
LABEL_12:
    uint64_t v7 = *((void *)a2 + 8);
    if (!v7 || (*(unsigned char *)(v7 + 17) & 0x30) == 0)
    {
      int v8 = *((_DWORD *)a2 + 5);
      if (v8 < 0)
      {
        uint64_t v9 = (char *)a2 - 32 * (v8 & 0x7FFFFFF);
        uint64_t v12 = *((void *)v9 - 1);
        int v10 = v9 - 8;
        uint64_t v11 = v12;
        if (v12)
        {
          uint64_t v13 = -v11;
          do
          {
            unsigned int v14 = *(_DWORD *)(*(void *)&v10[v13] + 8);
            BOOL v15 = v14 > 7;
            int v16 = (1 << v14) & 0x83;
            if (v15 || v16 == 0) {
              return 1;
            }
            v13 += 16;
          }
          while (v13);
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 45) & 1) == 0) {
        return llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44) ^ 1;
      }
    }
    return 0;
  }
  if (((1 << v5) & 0x808001D0000010) != 0) {
    return 1;
  }
  if (v5 == 27) {
    return (*((_WORD *)a2 + 9) & 0x301) != 0;
  }
  return result;
}

uint64_t sub_1CC02A194(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v9) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          uint64_t v9 = v7;
        }
        unsigned int v13 = v6 + v10++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 16 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_16;
        }
      }
      uint64_t result = 0;
      if (v9) {
        uint64_t v7 = v9;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

void *sub_1CC02A230(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    BOOL v12 = 0;
LABEL_15:
    unsigned int v6 = sub_1CC02A2EC(a1, (uint64_t)a2, a2, v12);
    *unsigned int v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  unsigned int v6 = (void *)(*(void *)a1 + 16 * v5);
  uint64_t v7 = *v6;
  if (*a2 != *v6)
  {
    uint64_t v8 = 0;
    int v9 = 1;
    while (v7 != -4096)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == -8192;
      }
      if (v10) {
        uint64_t v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      unsigned int v6 = (void *)(*(void *)a1 + 16 * (v11 & v4));
      uint64_t v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v8) {
      BOOL v12 = v8;
    }
    else {
      BOOL v12 = v6;
    }
    goto LABEL_15;
  }
  return v6;
}

void *sub_1CC02A2EC(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CC02A420(a1, v7);
      unint64_t v17 = 0;
      sub_1CC02A194((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CC02A420(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    unsigned int v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        unsigned int v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 16 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC02A420(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = 16 * v12;
      do
      {
        *uint64_t result = -4096;
        result += 2;
        v13 -= 16;
      }
      while (v13);
    }
    if (v3)
    {
      int v14 = 0;
      int v15 = v12 - 1;
      unsigned int v16 = v4;
      do
      {
        uint64_t v17 = *v16;
        if ((*v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unsigned int v18 = ((v17 >> 4) ^ (v17 >> 9)) & v15;
          BOOL v19 = (void *)(*(void *)a1 + 16 * v18);
          uint64_t v20 = *v19;
          if (v17 != *v19)
          {
            BOOL v21 = 0;
            int v22 = 1;
            while (v20 != -4096)
            {
              if (v21) {
                BOOL v23 = 0;
              }
              else {
                BOOL v23 = v20 == -8192;
              }
              if (v23) {
                BOOL v21 = v19;
              }
              unsigned int v24 = v18 + v22++;
              unsigned int v18 = v24 & v15;
              BOOL v19 = (void *)(*(void *)a1 + 16 * (v24 & v15));
              uint64_t v20 = *v19;
              if (v17 == *v19) {
                goto LABEL_27;
              }
            }
            if (v21) {
              BOOL v19 = v21;
            }
          }
LABEL_27:
          *BOOL v19 = v17;
          v19[1] = v16[1];
          *(_DWORD *)(a1 + 8) = ++v14;
        }
        v16 += 2;
      }
      while (v16 != &v4[2 * v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

llvm::Value *llvm::SimplifyAddInst(llvm *a1, llvm::Constant *a2, char a3, int a4, uint64_t a5)
{
  return sub_1CC02A5B0(a1, a2, a3, a4, a5, (llvm::DSOLocalEquivalent **)3);
}

llvm::Value *sub_1CC02A5B0(llvm *a1, llvm::Constant *a2, char a3, int a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  int v6 = (int)a6;
  uint64_t v10 = a2;
  v61[8] = *MEMORY[0x1E4F143B8];
  if (a1 && *((unsigned __int8 *)a1 + 16) <= 0x14u)
  {
    if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
    {
      uint64_t result = llvm::ConstantFoldBinaryOpOperands((llvm *)0xD, a1, a2, *(llvm::Constant **)a5, (const llvm::DataLayout *)a5, a6);
      uint64_t v13 = a1;
      if (result) {
        return result;
      }
    }
    else
    {
      uint64_t v13 = a2;
      uint64_t v10 = a1;
    }
  }
  else
  {
    uint64_t v13 = a1;
  }
  unsigned int v14 = *((unsigned __int8 *)v10 + 16);
  if (v14 == 12) {
    return v10;
  }
  if (*(unsigned char *)(a5 + 41))
  {
    unsigned int v15 = (v14 - 11);
    if (v15 < 2) {
      return v10;
    }
    if (v15 >= 0xFD)
    {
      BOOL v55 = (llvm::SmallPtrSetImplBase **)v58;
      v56[0] = v58;
      v56[1] = (void *)8;
      int v57 = 0;
      uint64_t v59 = v61;
      uint64_t v60 = 0x800000000;
      v54[0] = (llvm::SmallPtrSetImplBase *)&v55;
      v54[1] = (llvm::SmallPtrSetImplBase *)&v59;
      BOOL v47 = 0;
      if (sub_1CC04C108(v54, (uint64_t)v10))
      {
        do
        {
          BOOL v47 = v60 == 0;
          if (!v60) {
            break;
          }
          uint64_t v53 = *((void *)v59 + v60 - 1);
          LODWORD(v60) = v60 - 1;
        }
        while ((sub_1CC04C108(v54, v53) & 1) != 0);
      }
      if (v59 != v61) {
        free(v59);
      }
      if (v56[0] == v55)
      {
        if (v47) {
          return v10;
        }
      }
      else
      {
        free(v56[0]);
        if (v47) {
          return v10;
        }
      }
      unsigned int v14 = *((unsigned __int8 *)v10 + 16);
    }
  }
  if (v14 <= 0x14)
  {
    if (v14 == 16)
    {
      uint64_t v16 = *((unsigned int *)v10 + 8);
      if (v16 >= 0x41)
      {
        int v48 = 0;
        int64_t v49 = (unint64_t)(v16 + 63) >> 6;
        do
        {
          if (v49-- < 1) {
            break;
          }
          unint64_t v51 = *(void *)(*((void *)v10 + 3) + 8 * v49);
          v48 += __clz(v51);
        }
        while (!v51);
        int v52 = v16 | 0xFFFFFFC0;
        if ((v16 & 0x3F) == 0) {
          int v52 = 0;
        }
        if (v48 + v52 == v16) {
          return v13;
        }
      }
      else if (!*((void *)v10 + 3))
      {
        return v13;
      }
    }
    else if (v14 == 17)
    {
      if (sub_1CB844168((uint64_t)v10, 0.0)) {
        return v13;
      }
    }
    else if (v14 - 18 < 3 || v14 == 13)
    {
      return v13;
    }
    if (sub_1CC03F414((uint64_t)&v55, v10)) {
      return v13;
    }
  }
  if (llvm::isKnownNegation(v13, v10, 0)) {
    return llvm::Constant::getNullValue(*(llvm::Constant **)v13, v17, v18);
  }
  v54[0] = 0;
  int v21 = *((unsigned __int8 *)v10 + 16);
  if (v21 == 5)
  {
    if (*((_WORD *)v10 + 9) != 15) {
      goto LABEL_30;
    }
    BOOL v23 = (uint64_t *)((char *)v10 - 32 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF));
    uint64_t result = (llvm::Value *)*v23;
    if (!*v23) {
      goto LABEL_30;
    }
    v54[0] = (llvm::SmallPtrSetImplBase *)*v23;
    int v22 = (llvm *)v23[4];
  }
  else
  {
    if (v21 != 43) {
      goto LABEL_30;
    }
    uint64_t result = (llvm::Value *)*((void *)v10 - 8);
    if (!result) {
      goto LABEL_30;
    }
    v54[0] = *((llvm::SmallPtrSetImplBase **)v10 - 8);
    int v22 = (llvm *)*((void *)v10 - 4);
  }
  if (v13 == v22) {
    return result;
  }
LABEL_30:
  int v24 = *((unsigned __int8 *)v13 + 16);
  if (v24 == 5)
  {
    int v26 = *((unsigned __int16 *)v13 + 9);
    if (v26 == 15)
    {
      char v27 = (uint64_t *)((char *)v13 - 32 * (*((_DWORD *)v13 + 5) & 0x7FFFFFF));
      uint64_t result = (llvm::Value *)*v27;
      if (*v27)
      {
        v54[0] = (llvm::SmallPtrSetImplBase *)*v27;
        char v25 = (llvm *)v27[4];
LABEL_37:
        if (v10 == v25) {
          return result;
        }
      }
LABEL_38:
      uint64_t v28 = *(llvm::Constant **)v13;
      BOOL v55 = (llvm::SmallPtrSetImplBase **)v10;
      goto LABEL_59;
    }
    uint64_t v28 = *(llvm::Constant **)v13;
    BOOL v55 = (llvm::SmallPtrSetImplBase **)v10;
    if (v26 == 30)
    {
      uint64_t v32 = *((_DWORD *)v13 + 5) & 0x7FFFFFF;
      char v33 = (llvm **)((char *)v13 - 32 * v32);
      if (v10 == *v33)
      {
        if (sub_1CBF68974((uint64_t)v56, v33[4])) {
          return (llvm::Value *)llvm::Constant::getAllOnesValue(v28, v30, v31);
        }
        unint64_t v35 = v55;
        uint64_t v34 = -(uint64_t)(*((_DWORD *)v13 + 5) & 0x7FFFFFF);
      }
      else
      {
        uint64_t v34 = -v32;
        unint64_t v35 = v10;
      }
      uint64_t v36 = (void **)((char *)v13 + 32 * v34);
      if (v35 == v36[4] && (sub_1CBF68974((uint64_t)v56, (llvm::Constant *)*v36) & 1) != 0) {
        return (llvm::Value *)llvm::Constant::getAllOnesValue(v28, v30, v31);
      }
    }
  }
  else
  {
    if (v24 == 43)
    {
      uint64_t result = (llvm::Value *)*((void *)v13 - 8);
      if (result)
      {
        v54[0] = *((llvm::SmallPtrSetImplBase **)v13 - 8);
        char v25 = (llvm *)*((void *)v13 - 4);
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    uint64_t v28 = *(llvm::Constant **)v13;
    BOOL v55 = (llvm::SmallPtrSetImplBase **)v10;
    if (v24 == 58)
    {
      char v29 = v10;
      if (v10 == *((llvm **)v13 - 8))
      {
        if (sub_1CBF687D0((uint64_t)v56, *((llvm::Constant **)v13 - 4))) {
          return (llvm::Value *)llvm::Constant::getAllOnesValue(v28, v30, v31);
        }
        char v29 = v55;
      }
      if (v29 == *((void **)v13 - 4) && (sub_1CBF687D0((uint64_t)v56, *((llvm::Constant **)v13 - 8)) & 1) != 0) {
        return (llvm::Value *)llvm::Constant::getAllOnesValue(v28, v30, v31);
      }
    }
  }
LABEL_59:
  uint64_t v59 = v13;
  int v37 = *((unsigned __int8 *)v10 + 16);
  if (v37 == 5)
  {
    if (*((_WORD *)v10 + 9) == 30)
    {
      uint64_t v39 = *((_DWORD *)v10 + 5) & 0x7FFFFFF;
      long long v40 = (llvm **)((char *)v10 - 32 * v39);
      if (v13 == *v40)
      {
        if (sub_1CBF68974((uint64_t)&v60, v40[4])) {
          return (llvm::Value *)llvm::Constant::getAllOnesValue(v28, v30, v31);
        }
        uint64_t v42 = v59;
        uint64_t v41 = -(uint64_t)(*((_DWORD *)v10 + 5) & 0x7FFFFFF);
      }
      else
      {
        uint64_t v41 = -v39;
        uint64_t v42 = v13;
      }
      uint64_t v43 = (void **)((char *)v10 + 32 * v41);
      if (v42 != v43[4] || (sub_1CBF68974((uint64_t)&v60, (llvm::Constant *)*v43) & 1) == 0) {
        goto LABEL_75;
      }
      return (llvm::Value *)llvm::Constant::getAllOnesValue(v28, v30, v31);
    }
  }
  else if (v37 == 58)
  {
    uint64_t v38 = v13;
    if (v13 == *((llvm **)v10 - 8))
    {
      if (sub_1CBF687D0((uint64_t)&v60, *((llvm::Constant **)v10 - 4))) {
        return (llvm::Value *)llvm::Constant::getAllOnesValue(v28, v30, v31);
      }
      uint64_t v38 = v59;
    }
    if (v38 != *((void **)v10 - 4) || (sub_1CBF687D0((uint64_t)&v60, *((llvm::Constant **)v10 - 8)) & 1) == 0) {
      goto LABEL_75;
    }
    return (llvm::Value *)llvm::Constant::getAllOnesValue(v28, v30, v31);
  }
LABEL_75:
  if ((a3 & 1) == 0 && !a4 || !sub_1CC03F5D4((uint64_t)&v59, (unsigned __int8 *)v10)) {
    goto LABEL_87;
  }
  BOOL v55 = v54;
  int v44 = *((unsigned __int8 *)v13 + 16);
  if (v44 == 5)
  {
    if (*((_WORD *)v13 + 9) != 30) {
      goto LABEL_87;
    }
    BOOL v45 = (unint64_t ***)((char *)v13 - 32 * (*((_DWORD *)v13 + 5) & 0x7FFFFFF));
    if (!*v45) {
      goto LABEL_87;
    }
    v54[0] = (llvm::SmallPtrSetImplBase *)*v45;
    if ((sub_1CC03F7B4((uint64_t)v56, v45[4]) & 1) == 0) {
      goto LABEL_87;
    }
    return v54[0];
  }
  if (v44 == 58)
  {
    if (*((void *)v13 - 8))
    {
      v54[0] = *((llvm::SmallPtrSetImplBase **)v13 - 8);
      if (sub_1CC03F5D4((uint64_t)v56, *((unsigned __int8 **)v13 - 4))) {
        return v54[0];
      }
    }
  }
LABEL_87:
  if (a4 && (sub_1CBF687D0((uint64_t)&v55, v10) & 1) != 0) {
    return v10;
  }
  if (!v6) {
    return sub_1CC03F1D8(0xDu, v13, v10, (const llvm::DataLayout *)a5, v6);
  }
  int v46 = *(_DWORD *)(*(void *)v13 + 8);
  if ((v46 & 0xFE) == 0x12) {
    int v46 = *(_DWORD *)(**(void **)(*(void *)v13 + 16) + 8);
  }
  if (v46 != 269) {
    return sub_1CC03F1D8(0xDu, v13, v10, (const llvm::DataLayout *)a5, v6);
  }
  uint64_t result = sub_1CC02EA0C(v13, v10, a5, v6 - 1, v19, v20);
  if (!result) {
    return sub_1CC03F1D8(0xDu, v13, v10, (const llvm::DataLayout *)a5, v6);
  }
  return result;
}

llvm::ConstantExpr *llvm::SimplifySubInst(uint64_t a1, uint64_t a2, const llvm::APFloat *a3, int a4, uint64_t a5)
{
  return sub_1CC02ABD8(a1, a2, a3, a4, a5, (llvm::DSOLocalEquivalent **)3);
}

llvm::ConstantExpr *sub_1CC02ABD8(uint64_t a1, uint64_t a2, const llvm::APFloat *a3, int a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  int v6 = (int)a6;
  int v9 = (int)a3;
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  unsigned int v12 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v12 <= 0x14 && a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u)
  {
    uint64_t result = llvm::ConstantFoldBinaryOpOperands((llvm *)0xF, (llvm *)a1, (llvm::Constant *)a2, *(llvm::Constant **)a5, (const llvm::DataLayout *)a5, a6);
    if (result) {
      return result;
    }
    unsigned int v12 = *(unsigned __int8 *)(a1 + 16);
  }
  if (v12 == 12 || (unsigned int v14 = *(unsigned __int8 *)(a2 + 16), v14 == 12))
  {
    unsigned int v15 = *(llvm::PoisonValue **)a1;
    return (llvm::ConstantExpr *)llvm::PoisonValue::get(v15, (llvm::Type *)a2);
  }
  if (!*(unsigned char *)(a5 + 41)) {
    goto LABEL_17;
  }
  unsigned int v16 = (v12 - 11);
  if (v16 < 2) {
    return llvm::UndefValue::get(*(llvm::UndefValue **)a1, (llvm::Type *)a2);
  }
  if (v16 >= 0xFD)
  {
    uint64_t __src = &v80;
    uint64_t v77 = &v80;
    uint64_t v78 = 8;
    LODWORD(v79) = 0;
    int v86 = &v88;
    uint64_t v87 = 0x800000000;
    p_src = (llvm::SmallPtrSetImplBase *)&__src;
    uint64_t v83 = &v86;
    BOOL v58 = 0;
    if (sub_1CC04C108(&p_src, a1))
    {
      do
      {
        BOOL v58 = v87 == 0;
        if (!v87) {
          break;
        }
        uint64_t v72 = *((void *)v86 + v87 - 1);
        LODWORD(v87) = v87 - 1;
      }
      while ((sub_1CC04C108(&p_src, v72) & 1) != 0);
    }
    if (v86 != &v88) {
      free(v86);
    }
    if (v77 == __src)
    {
      if (v58) {
        return llvm::UndefValue::get(*(llvm::UndefValue **)a1, (llvm::Type *)a2);
      }
    }
    else
    {
      free(v77);
      if (v58) {
        return llvm::UndefValue::get(*(llvm::UndefValue **)a1, (llvm::Type *)a2);
      }
    }
    unsigned int v14 = *(unsigned __int8 *)(a2 + 16);
    if (!*(unsigned char *)(a5 + 41)) {
      goto LABEL_17;
    }
  }
  unsigned int v17 = (v14 - 11);
  if (v17 < 2) {
    return llvm::UndefValue::get(*(llvm::UndefValue **)a1, (llvm::Type *)a2);
  }
  if (v17 < 0xFD) {
    goto LABEL_17;
  }
  uint64_t __src = &v80;
  uint64_t v77 = &v80;
  uint64_t v78 = 8;
  LODWORD(v79) = 0;
  int v86 = &v88;
  uint64_t v87 = 0x800000000;
  p_src = (llvm::SmallPtrSetImplBase *)&__src;
  uint64_t v83 = &v86;
  BOOL v59 = 0;
  if (sub_1CC04C108(&p_src, a2))
  {
    do
    {
      BOOL v59 = v87 == 0;
      if (!v87) {
        break;
      }
      uint64_t v73 = *((void *)v86 + v87 - 1);
      LODWORD(v87) = v87 - 1;
    }
    while ((sub_1CC04C108(&p_src, v73) & 1) != 0);
  }
  if (v86 != &v88) {
    free(v86);
  }
  if (v77 == __src)
  {
    if (v59) {
      return llvm::UndefValue::get(*(llvm::UndefValue **)a1, (llvm::Type *)a2);
    }
  }
  else
  {
    free(v77);
    if (v59) {
      return llvm::UndefValue::get(*(llvm::UndefValue **)a1, (llvm::Type *)a2);
    }
  }
  unsigned int v14 = *(unsigned __int8 *)(a2 + 16);
LABEL_17:
  if (v14 <= 0x14)
  {
    if (v14 == 16)
    {
      uint64_t v18 = *(unsigned int *)(a2 + 32);
      if (v18 >= 0x41)
      {
        int v60 = 0;
        int64_t v61 = (unint64_t)(v18 + 63) >> 6;
        do
        {
          BOOL v62 = v61-- < 1;
          if (v62) {
            break;
          }
          unint64_t v63 = *(void *)(*(void *)(a2 + 24) + 8 * v61);
          v60 += __clz(v63);
        }
        while (!v63);
        int v64 = v18 | 0xFFFFFFC0;
        if ((v18 & 0x3F) == 0) {
          int v64 = 0;
        }
        if (v60 + v64 == v18) {
          return (llvm::ConstantExpr *)a1;
        }
      }
      else if (!*(void *)(a2 + 24))
      {
        return (llvm::ConstantExpr *)a1;
      }
    }
    else if (v14 == 17)
    {
      if (sub_1CB844168(a2, 0.0)) {
        return (llvm::ConstantExpr *)a1;
      }
    }
    else if (v14 - 18 < 3 || v14 == 13)
    {
      return (llvm::ConstantExpr *)a1;
    }
    if (sub_1CC03F414((uint64_t)&__src, (llvm::Constant *)a2)) {
      return (llvm::ConstantExpr *)a1;
    }
  }
  if (a1 == a2) {
    return llvm::Constant::getNullValue(*(llvm::Constant **)a1, (llvm::Type *)a2, a3);
  }
  if (!a1 || (unsigned int v19 = *(unsigned __int8 *)(a1 + 16), v19 > 0x14))
  {
LABEL_48:
    unint64_t v74 = 0;
    if (!v6)
    {
      uint64_t v75 = (llvm *)a1;
LABEL_88:
      uint64_t __src = &v75;
      if (!sub_1CC03F934((void **)&__src, a1)) {
        goto LABEL_184;
      }
      int v86 = &v74;
      if (!sub_1CC03F934((void **)&v86, a2)) {
        goto LABEL_184;
      }
      BOOL v45 = *(llvm::Constant **)a5;
      unint64_t v84 = v74;
      unint64_t v85 = v75;
      sub_1CC03F9A0((uint64_t)&__src, (uint64_t)v45, &v85, 0, v42, v43, v44);
      sub_1CC03F9A0((uint64_t)&v86, (uint64_t)v45, &v84, 0, v46, v47, v48);
      int v50 = v85;
      if (v85 == v84)
      {
        int v52 = **(llvm::ConstantInt ***)v85;
        if (v77 >= 0x41) {
          operator new[]();
        }
        unint64_t v53 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v77;
        if (!v77) {
          unint64_t v53 = 0;
        }
        LODWORD(v83) = v77;
        p_src = (llvm::SmallPtrSetImplBase *)(v53 & ((unsigned char *)__src - (unsigned char *)v86));
        Splat = (llvm::ConstantExpr *)llvm::ConstantInt::get(v52, (llvm::LLVMContext *)&p_src, v49);
        if (v83 >= 0x41 && p_src) {
          MEMORY[0x1D25D9CB0](p_src, 0x1000C8000313F17);
        }
        uint64_t v56 = *(void *)v50;
        if (*(void *)v50 && (*(_DWORD *)(v56 + 8) & 0xFE) == 0x12) {
          Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v56 + 32) | ((unint64_t)(*(_DWORD *)(v56 + 8) == 19) << 32)), (uint64_t)Splat);
        }
      }
      else
      {
        Splat = 0;
      }
      if (v87 >= 0x41 && v86) {
        MEMORY[0x1D25D9CB0](v86, 0x1000C8000313F17);
      }
      if (v77 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      if (Splat) {
        return llvm::ConstantExpr::getIntegerCast(Splat, *(llvm::Type ****)a1, (llvm::Type *)1);
      }
LABEL_184:
      if (!v6) {
        return 0;
      }
      int v57 = *(_DWORD *)(*(void *)a1 + 8);
      if ((v57 & 0xFE) == 0x12) {
        int v57 = *(_DWORD *)(**(void **)(*(void *)a1 + 16) + 8);
      }
      if (v57 != 269) {
        return 0;
      }
      uint64_t result = (llvm::ConstantExpr *)sub_1CC02EA0C((llvm *)a1, (llvm::Constant *)a2);
      if (!result) {
        return 0;
      }
      return result;
    }
    int v27 = *(unsigned __int8 *)(a1 + 16);
    if (v27 == 5)
    {
      if (*(_WORD *)(a1 + 18) != 13) {
        goto LABEL_62;
      }
      char v29 = (llvm **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
      if (!*v29) {
        goto LABEL_62;
      }
      uint64_t v75 = *v29;
      uint64_t v28 = v29[4];
      if (!v28) {
        goto LABEL_62;
      }
    }
    else
    {
      if (v27 != 41) {
        goto LABEL_62;
      }
      if (!*(void *)(a1 - 64)) {
        goto LABEL_62;
      }
      uint64_t v75 = *(llvm **)(a1 - 64);
      uint64_t v28 = *(llvm **)(a1 - 32);
      if (!v28) {
        goto LABEL_62;
      }
    }
    unint64_t v74 = v28;
    unint64_t v30 = (llvm::Constant *)sub_1CC02ABD8(v28, a2, 0, 0, a5, (v6 - 1));
    if (v30)
    {
      uint64_t result = (llvm::ConstantExpr *)sub_1CC02A5B0(v75, v30);
      if (result) {
        return result;
      }
    }
    char v31 = (llvm::Constant *)sub_1CC02ABD8(v75, a2, 0, 0, a5, (v6 - 1));
    if (v31)
    {
      uint64_t result = (llvm::ConstantExpr *)sub_1CC02A5B0(v74, v31);
      if (result) {
        return result;
      }
    }
LABEL_62:
    uint64_t v75 = (llvm *)a1;
    int v32 = *(unsigned __int8 *)(a2 + 16);
    if (v32 == 5)
    {
      if (*(_WORD *)(a2 + 18) != 13) {
        goto LABEL_74;
      }
      uint64_t v35 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
      char v33 = *(llvm **)v35;
      if (!*(void *)v35) {
        goto LABEL_74;
      }
      unint64_t v74 = *(llvm **)v35;
      uint64_t v34 = *(void *)(v35 + 32);
      if (!v34) {
        goto LABEL_74;
      }
    }
    else
    {
      if (v32 != 41) {
        goto LABEL_75;
      }
      char v33 = *(llvm **)(a2 - 64);
      if (!v33 || (v74 = *(llvm **)(a2 - 64), (uint64_t v34 = *(void *)(a2 - 32)) == 0))
      {
LABEL_74:
        int v32 = *(unsigned __int8 *)(a2 + 16);
LABEL_75:
        if (v32 == 5)
        {
          if (*(_WORD *)(a2 + 18) != 15
            || (v40 = (llvm **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (uint64_t v38 = *v40) == 0)
            || (v75 = *v40, (uint64_t v39 = v40[4]) == 0))
          {
LABEL_85:
            uint64_t __src = &v75;
            if (sub_1CBC5BF18((void **)&__src, a1))
            {
              int v86 = &v74;
              if (sub_1CBC5BF18((void **)&v86, a2))
              {
                if (*(void *)v75 == *(void *)v74)
                {
                  uint64_t v54 = sub_1CC02ABD8(v75, v74, 0, 0, a5, (v6 - 1));
                  if (v54)
                  {
                    uint64_t result = sub_1CC038B58((llvm *)0x26, v54, *(llvm::Constant **)a1, (llvm::Type **)a5, v55);
                    if (result) {
                      return result;
                    }
                  }
                }
              }
            }
            goto LABEL_88;
          }
        }
        else
        {
          if (v32 != 43) {
            goto LABEL_85;
          }
          uint64_t v38 = *(llvm **)(a2 - 64);
          if (!v38) {
            goto LABEL_85;
          }
          uint64_t v75 = *(llvm **)(a2 - 64);
          uint64_t v39 = *(llvm **)(a2 - 32);
          if (!v39) {
            goto LABEL_85;
          }
        }
        unint64_t v74 = v39;
        uint64_t v41 = (llvm *)sub_1CC02ABD8(a1, v38, 0, 0, a5, (v6 - 1));
        if (v41)
        {
          uint64_t result = (llvm::ConstantExpr *)sub_1CC02A5B0(v41, v74);
          if (result) {
            return result;
          }
        }
        goto LABEL_85;
      }
    }
    uint64_t v36 = sub_1CC02ABD8(a1, v33, 0, 0, a5, (v6 - 1));
    if (v36)
    {
      uint64_t result = (llvm::ConstantExpr *)sub_1CC02ABD8(v36, v34, 0, 0, a5, (v6 - 1));
      if (result) {
        return result;
      }
    }
    uint64_t v37 = sub_1CC02ABD8(v75, v34, 0, 0, a5, (v6 - 1));
    if (v37)
    {
      uint64_t result = (llvm::ConstantExpr *)sub_1CC02ABD8(v37, v74, 0, 0, a5, (v6 - 1));
      if (result) {
        return result;
      }
    }
    goto LABEL_74;
  }
  if (v19 == 16)
  {
    uint64_t v20 = *(unsigned int *)(a1 + 32);
    if (v20 >= 0x41)
    {
      int v65 = 0;
      int64_t v66 = (unint64_t)(v20 + 63) >> 6;
      do
      {
        BOOL v62 = v66-- < 1;
        if (v62) {
          break;
        }
        unint64_t v67 = *(void *)(*(void *)(a1 + 24) + 8 * v66);
        v65 += __clz(v67);
      }
      while (!v67);
      int v68 = v20 | 0xFFFFFFC0;
      if ((v20 & 0x3F) == 0) {
        int v68 = 0;
      }
      if (v65 + v68 == v20) {
        goto LABEL_30;
      }
    }
    else if (!*(void *)(a1 + 24))
    {
      goto LABEL_30;
    }
  }
  else if (v19 == 17)
  {
    if (sub_1CB844168(a1, 0.0)) {
      goto LABEL_30;
    }
  }
  else if (v19 - 18 < 3 || v19 == 13)
  {
    goto LABEL_30;
  }
  if ((sub_1CC03F414((uint64_t)&__src, (llvm::Constant *)a1) & 1) == 0) {
    goto LABEL_48;
  }
LABEL_30:
  if (a4) {
    return llvm::Constant::getNullValue(*(llvm::Constant **)a1, (llvm::Type *)a2, a3);
  }
  int v21 = *(uint64_t **)(a5 + 24);
  uint64_t v22 = *(void *)(a5 + 32);
  uint64_t v23 = *(void *)(a5 + 16);
  if (!v22 || !*(void *)(v22 + 40))
  {
    if (!a2 || *(unsigned __int8 *)(a2 + 16) < 0x1Cu || (uint64_t v22 = a2, !*(void *)(a2 + 40))) {
      uint64_t v22 = 0;
    }
  }
  uint64_t __src = *(void **)a5;
  uint64_t v77 = v21;
  uint64_t v78 = v22;
  uint64_t v79 = v23;
  uint64_t v80 = 0;
  char v81 = 1;
  sub_1CC16089C((uint64_t *)a2, 0, (const llvm::DataLayout **)&__src, (uint64_t)&v86);
  if (v87 > 0x40)
  {
    if ((*((void *)v86 + ((v87 - 1) >> 6)) >> (v87 - 1)))
    {
      BOOL v26 = 0;
      uint64_t result = 0;
      goto LABEL_45;
    }
    int v71 = v87 - 1;
    BOOL v26 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v86) == v71;
    if (v26) {
      uint64_t result = (llvm::ConstantExpr *)a2;
    }
    else {
      uint64_t result = 0;
    }
    if (v26 && v9) {
      goto LABEL_44;
    }
  }
  else
  {
    BOOL v26 = v86 == (void *)~(-1 << (v87 - 1));
    if (v86 == (void *)~(-1 << (v87 - 1))) {
      uint64_t result = (llvm::ConstantExpr *)a2;
    }
    else {
      uint64_t result = 0;
    }
    if (v86 == (void *)~(-1 << (v87 - 1)) && (v9 & 1) != 0)
    {
LABEL_44:
      uint64_t result = llvm::Constant::getNullValue(*(llvm::Constant **)a1, v24, v25);
      BOOL v26 = 1;
    }
  }
LABEL_45:
  if (v89 >= 0x41 && v88)
  {
    uint64_t v69 = result;
    MEMORY[0x1D25D9CB0](v88, 0x1000C8000313F17);
    uint64_t result = v69;
  }
  if (v87 >= 0x41 && v86)
  {
    uint64_t v70 = result;
    MEMORY[0x1D25D9CB0](v86, 0x1000C8000313F17);
    uint64_t result = v70;
  }
  if (!v26) {
    goto LABEL_48;
  }
  return result;
}

llvm::SmallPtrSetImplBase *llvm::SimplifyMulInst(llvm *a1, llvm::Constant *a2, uint64_t a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1CC02B6E8(a1, a2, a3, 3, a5, a6);
}

llvm::SmallPtrSetImplBase *sub_1CC02B6E8(llvm *a1, llvm::Constant *a2, uint64_t a3, int a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  unsigned int v8 = a2;
  v34[8] = *MEMORY[0x1E4F143B8];
  if (a1 && *((unsigned __int8 *)a1 + 16) <= 0x14u)
  {
    if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
    {
      uint64_t result = llvm::ConstantFoldBinaryOpOperands((llvm *)0x11, a1, a2, *(llvm::Constant **)a3, a5, a6);
      uint64_t v11 = a1;
      if (result) {
        return result;
      }
    }
    else
    {
      uint64_t v11 = a2;
      unsigned int v8 = a1;
    }
  }
  else
  {
    uint64_t v11 = a1;
  }
  unsigned int v12 = *((unsigned __int8 *)v8 + 16);
  if (v12 == 12) {
    return v8;
  }
  if (*(unsigned char *)(a3 + 41))
  {
    unsigned int v13 = (v12 - 11);
    if (v13 < 2) {
      return llvm::Constant::getNullValue(*(llvm::Constant **)v11, a2, (const llvm::APFloat *)a3);
    }
    if (v13 >= 0xFD)
    {
      int v27 = (llvm::SmallPtrSetImplBase **)v31;
      uint64_t v28 = (llvm::SmallPtrSetImplBase **)v31;
      uint64_t v29 = 8;
      int v30 = 0;
      int v32 = v34;
      uint64_t v33 = 0x800000000;
      v26[0] = (llvm::SmallPtrSetImplBase *)&v27;
      v26[1] = (llvm::SmallPtrSetImplBase *)&v32;
      BOOL v19 = 0;
      if (sub_1CC04C108(v26, (uint64_t)v8))
      {
        do
        {
          BOOL v19 = v33 == 0;
          if (!v33) {
            break;
          }
          uint64_t v25 = *((void *)v32 + v33 - 1);
          LODWORD(v33) = v33 - 1;
        }
        while ((sub_1CC04C108(v26, v25) & 1) != 0);
      }
      if (v32 != v34) {
        free(v32);
      }
      if (v28 == v27)
      {
        if (v19) {
          return llvm::Constant::getNullValue(*(llvm::Constant **)v11, a2, (const llvm::APFloat *)a3);
        }
      }
      else
      {
        free(v28);
        if (v19) {
          return llvm::Constant::getNullValue(*(llvm::Constant **)v11, a2, (const llvm::APFloat *)a3);
        }
      }
      unsigned int v12 = *((unsigned __int8 *)v8 + 16);
    }
  }
  if (v12 > 0x14) {
    goto LABEL_20;
  }
  if (v12 == 16)
  {
    uint64_t v14 = *((unsigned int *)v8 + 8);
    if (v14 < 0x41)
    {
      if (*((void *)v8 + 3)) {
        goto LABEL_18;
      }
      return llvm::Constant::getNullValue(*(llvm::Constant **)v11, a2, (const llvm::APFloat *)a3);
    }
    int v20 = 0;
    int64_t v21 = (unint64_t)(v14 + 63) >> 6;
    do
    {
      if (v21-- < 1) {
        break;
      }
      unint64_t v23 = *(void *)(*((void *)v8 + 3) + 8 * v21);
      v20 += __clz(v23);
    }
    while (!v23);
    int v24 = v14 | 0xFFFFFFC0;
    if ((v14 & 0x3F) == 0) {
      int v24 = 0;
    }
    if (v20 + v24 == v14) {
      return llvm::Constant::getNullValue(*(llvm::Constant **)v11, a2, (const llvm::APFloat *)a3);
    }
  }
  else if (v12 == 17)
  {
    if (sub_1CB844168((uint64_t)v8, 0.0)) {
      return llvm::Constant::getNullValue(*(llvm::Constant **)v11, a2, (const llvm::APFloat *)a3);
    }
  }
  else if (v12 - 18 < 3 || v12 == 13)
  {
    return llvm::Constant::getNullValue(*(llvm::Constant **)v11, a2, (const llvm::APFloat *)a3);
  }
LABEL_18:
  if (sub_1CC03F414((uint64_t)&v27, v8)) {
    return llvm::Constant::getNullValue(*(llvm::Constant **)v11, a2, (const llvm::APFloat *)a3);
  }
LABEL_20:
  if (sub_1CBF5250C((uint64_t)&v27, v8)) {
    return v11;
  }
  v26[0] = 0;
  if (*(unsigned char *)(a3 + 40))
  {
    int v27 = v26;
    uint64_t v28 = (llvm::SmallPtrSetImplBase **)v8;
    if (sub_1CC0401B4((uint64_t)&v27, (uint64_t)v11)) {
      return v26[0];
    }
    int v32 = v26;
    uint64_t v33 = (uint64_t)v11;
    if (sub_1CC0401B4((uint64_t)&v32, (uint64_t)v8)) {
      return v26[0];
    }
  }
  if (!a4) {
    goto LABEL_68;
  }
  int v17 = *(_DWORD *)(*(void *)v11 + 8);
  if ((v17 & 0xFE) == 0x12) {
    int v17 = *(_DWORD *)(**(void **)(*(void *)v11 + 16) + 8);
  }
  if (v17 != 269 || (uint64_t result = sub_1CC02C2C8(v11, v8, a3, a4 - 1, v15, v16)) == 0)
  {
LABEL_68:
    uint64_t result = (llvm::SmallPtrSetImplBase *)sub_1CC03F1D8(17, v11, v8);
    if (!result)
    {
      uint64_t result = sub_1CC03FBD8(17, v11, v8, 0xDu, a3, a4);
      if (!result)
      {
        int v18 = *((unsigned __int8 *)v11 + 16);
        if (v18 == 85 || *((unsigned char *)v8 + 16) == 85)
        {
          uint64_t result = sub_1CC03FC6C(17, v11, v8, a3, a4);
          if (result) {
            return result;
          }
          int v18 = *((unsigned __int8 *)v11 + 16);
        }
        if (v18 != 83 && *((unsigned char *)v8 + 16) != 83) {
          return 0;
        }
        uint64_t result = (llvm::SmallPtrSetImplBase *)sub_1CC040084(17, v11, v8, a3, a4);
        if (!result) {
          return 0;
        }
      }
    }
  }
  return result;
}

llvm::Value *llvm::SimplifySDivInst(unsigned __int8 *a1, llvm::Constant *a2, llvm::Constant **a3)
{
  return sub_1CC02BAA0(a1, a2, a3, (const llvm::DataLayout *)3);
}

llvm::Value *sub_1CC02BAA0(unsigned __int8 *a1, llvm::Constant *a2, llvm::Constant **a3, const llvm::DataLayout *a4)
{
  if (llvm::isKnownNegation((llvm *)a1, a2, (const llvm::Value *)1))
  {
    uint64_t v11 = *(llvm::Constant **)a1;
    return (llvm::Value *)llvm::Constant::getAllOnesValue(v11, v8, v9);
  }
  else
  {
    return sub_1CC040494((llvm *)0x14, a1, a2, a3, a4, v10);
  }
}

llvm::Value *llvm::SimplifyUDivInst(unsigned __int8 *a1, llvm::Constant *a2, llvm::Constant **a3, uint64_t a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1CC040494((llvm *)0x13, a1, a2, a3, (const llvm::DataLayout *)3, a6);
}

llvm::Value *llvm::SimplifySRemInst(llvm::Constant **a1, llvm::Constant *a2, uint64_t a3)
{
  return sub_1CC02BB48(a1, a2, a3, (const llvm::DataLayout *)3);
}

llvm::Value *sub_1CC02BB48(llvm::Constant **a1, llvm::Constant *a2, uint64_t a3, const llvm::DataLayout *a4)
{
  unsigned int v13 = &v14;
  uint64_t v14 = 0;
  if (sub_1CBC5BEAC(&v13, (uint64_t)a2))
  {
    int v10 = *(_DWORD *)(*(void *)v14 + 8);
    if ((v10 & 0xFE) == 0x12) {
      int v10 = *(_DWORD *)(**(void **)(*(void *)v14 + 16) + 8);
    }
    if (v10 == 269) {
      return llvm::Constant::getNullValue(*a1, v8, v9);
    }
  }
  if (llvm::isKnownNegation((llvm *)a1, a2, 0)) {
    return llvm::Constant::getNullValue(*a1, v8, v9);
  }
  else {
    return sub_1CC0415F8((llvm *)0x17, (unsigned __int8 *)a1, a2, a3, a4, v11);
  }
}

llvm::Value *llvm::SimplifyURemInst(unsigned __int8 *a1, llvm::Constant *a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1CC0415F8((llvm *)0x16, a1, a2, a3, (const llvm::DataLayout *)3, a6);
}

llvm::Value *llvm::SimplifyShlInst(unsigned __int8 *a1, llvm::Constant *a2, int a3, int a4, uint64_t a5)
{
  return sub_1CC02BC1C(a1, a2, a3, a4, a5, (llvm::DSOLocalEquivalent **)3);
}

llvm::Value *sub_1CC02BC1C(unsigned __int8 *a1, llvm::Constant *a2, int a3, int a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  char v8 = a3;
  uint64_t v10 = (uint64_t)a1;
  v30[8] = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_1CC04190C((llvm *)0x19, a1, a2, a3, a5, a6);
  if (!result)
  {
    if (*(unsigned char *)(a5 + 41))
    {
      unsigned int v14 = (*(unsigned char *)(v10 + 16) - 11);
      if (v14 >= 2)
      {
        if (v14 < 0xFD) {
          goto LABEL_5;
        }
        unint64_t v23 = (void **)v27;
        int v24 = (void **)v27;
        uint64_t v25 = 8;
        int v26 = 0;
        uint64_t v28 = v30;
        uint64_t v29 = 0x800000000;
        v22[0] = (llvm::SmallPtrSetImplBase *)&v23;
        v22[1] = (llvm::SmallPtrSetImplBase *)&v28;
        int v15 = sub_1CC04C108(v22, v10);
        int v16 = 0;
        if (v15)
        {
          while (1)
          {
            BOOL v21 = v29 == 0;
            if (!v29) {
              break;
            }
            uint64_t v19 = *((void *)v28 + v29 - 1);
            LODWORD(v29) = v29 - 1;
            char v20 = sub_1CC04C108(v22, v19);
            int v16 = v21;
            if ((v20 & 1) == 0) {
              goto LABEL_14;
            }
          }
          int v16 = 1;
        }
LABEL_14:
        if (v28 != v30)
        {
          int v17 = v16;
          free(v28);
          int v16 = v17;
        }
        if (v24 == v23)
        {
          if (!v16) {
            goto LABEL_5;
          }
        }
        else
        {
          int v18 = v16;
          free(v24);
          if (!v18) {
            goto LABEL_5;
          }
        }
      }
      if ((v8 & 1) == 0 && (a4 & 1) == 0) {
        return llvm::Constant::getNullValue(*(llvm::Constant **)v10, v12, v13);
      }
      return (llvm::Value *)v10;
    }
LABEL_5:
    uint64_t v28 = 0;
    if (*(unsigned char *)(a5 + 40))
    {
      unint64_t v23 = &v28;
      int v24 = (void **)a2;
      if (sub_1CC042284((uint64_t)&v23, v10)) {
        return (llvm::Value *)v28;
      }
    }
    if (!a4 || (sub_1CC0423A0((uint64_t)&v23, (llvm::Constant *)v10) & 1) == 0) {
      return 0;
    }
    return (llvm::Value *)v10;
  }
  return result;
}

llvm::Value *llvm::SimplifyLShrInst(uint64_t a1, llvm::Constant *a2, int a3, uint64_t a4)
{
  return sub_1CC02BE04(a1, a2, a3, a4, (llvm::DSOLocalEquivalent **)3);
}

llvm::Value *sub_1CC02BE04(uint64_t a1, llvm::Constant *a2, int a3, uint64_t a4, llvm::DSOLocalEquivalent **a5)
{
  uint64_t result = sub_1CC042500((llvm *)0x1A, a1, a2, a3, a4, a5);
  if (result) {
    return result;
  }
  int v32 = 0;
  uint64_t v33 = &v32;
  uint64_t v34 = (const void ***)a2;
  if (sub_1CC042790((uint64_t)&v33, a1)) {
    return v32;
  }
  uint64_t v30 = 0;
  char v31 = 0;
  uint64_t v29 = 0;
  uint64_t v25 = &v30;
  uint64_t v26 = 0;
  if (!sub_1CBF528D8((uint64_t)&v25, (unsigned __int8 *)a2)) {
    return 0;
  }
  uint64_t v33 = &v32;
  uint64_t v34 = &v29;
  uint64_t v35 = 0;
  uint64_t v36 = &v31;
  if (!sub_1CC042864(&v33, 29, a1)) {
    return 0;
  }
  uint64_t v9 = *(unsigned int *)(v30 + 8);
  if (v9 > 0x40)
  {
    if (memcmp(*(const void **)v30, *v29, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8)) {
      return 0;
    }
  }
  else if (*(const void **)v30 != *v29)
  {
    return 0;
  }
  uint64_t v10 = *(const void ****)(a4 + 24);
  uint64_t v11 = *(uint64_t **)(a4 + 32);
  unsigned int v12 = *(uint64_t ***)(a4 + 16);
  if (!v11 || !v11[5])
  {
    if (!v31 || *((unsigned __int8 *)v31 + 16) < 0x1Cu || (uint64_t v11 = v31, !v31[5])) {
      uint64_t v11 = 0;
    }
  }
  uint64_t v33 = *(llvm::Value ***)a4;
  uint64_t v34 = v10;
  uint64_t v35 = v11;
  uint64_t v36 = v12;
  uint64_t v37 = 0;
  char v38 = 1;
  sub_1CC16089C(v31, 0, (const llvm::DataLayout **)&v33, (uint64_t)&v25);
  unsigned int v13 = v26;
  if (v26 > 0x40)
  {
    int v14 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v25);
  }
  else if (v26)
  {
    int v14 = __clz(~((void)v25 << -(char)v26));
  }
  else
  {
    int v14 = 0;
  }
  int v15 = (void *)v30;
  uint64_t v16 = *(unsigned int *)(v30 + 8);
  if (v16 >= 0x41)
  {
    int v17 = 0;
    int64_t v18 = (unint64_t)(v16 + 63) >> 6;
    do
    {
      if (v18-- < 1) {
        break;
      }
      unint64_t v20 = *(void *)(*(void *)v30 + 8 * v18);
      v17 += __clz(v20);
    }
    while (!v20);
    int v21 = v16 | 0xFFFFFFC0;
    if ((v16 & 0x3F) == 0) {
      int v21 = 0;
    }
    if ((v16 - v17 - v21) > 0x40) {
      goto LABEL_25;
    }
    int v15 = *(void **)v30;
  }
  if (*v15 < (unint64_t)(v13 - v14))
  {
    char v22 = 0;
    uint64_t result = 0;
    goto LABEL_27;
  }
LABEL_25:
  char v22 = 1;
  uint64_t result = v32;
LABEL_27:
  if (v28 >= 0x41 && v27)
  {
    unint64_t v23 = result;
    MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
    uint64_t result = v23;
    unsigned int v13 = v26;
  }
  if (v13 >= 0x41)
  {
    if (v25)
    {
      int v24 = result;
      MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
      uint64_t result = v24;
    }
  }
  if ((v22 & 1) == 0) {
    return 0;
  }
  return result;
}

llvm::Value *llvm::SimplifyAShrInst(uint64_t a1, llvm::Constant *a2, int a3, uint64_t a4)
{
  return sub_1CC02C0A0(a1, a2, a3, a4, (llvm::DSOLocalEquivalent **)3);
}

llvm::Value *sub_1CC02C0A0(uint64_t a1, llvm::Constant *a2, int a3, uint64_t a4, llvm::DSOLocalEquivalent **a5)
{
  uint64_t result = sub_1CC042500((llvm *)0x1B, a1, a2, a3, a4, a5);
  if (result) {
    return result;
  }
  if (sub_1CBF687D0((uint64_t)&v26, (llvm::Constant *)a1)) {
    return (llvm::Value *)llvm::Constant::getAllOnesValue(*(llvm::Constant **)a1, v9, v10);
  }
  unsigned int v28 = a2;
  int v11 = *(unsigned __int8 *)(a1 + 16);
  if (v11 == 5)
  {
    if (*(_WORD *)(a1 + 18) != 25
      || !sub_1CBF68974((uint64_t)&v27, *(llvm::Constant **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF))))
    {
      goto LABEL_12;
    }
    unsigned int v12 = *(llvm::Constant **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
  }
  else
  {
    if (v11 != 53 || !sub_1CBF687D0((uint64_t)&v27, *(llvm::Constant **)(a1 - 64))) {
      goto LABEL_12;
    }
    unsigned int v12 = *(llvm::Constant **)(a1 - 32);
  }
  if (v28 == v12) {
    return (llvm::Value *)llvm::Constant::getAllOnesValue(*(llvm::Constant **)a1, v9, v10);
  }
LABEL_12:
  if (*(unsigned char *)(a4 + 40))
  {
    unsigned int v13 = *(unsigned __int8 *)(a1 + 16);
    if (v13 < 0x1C)
    {
      if (v13 == 5)
      {
        unsigned int v16 = *(unsigned __int16 *)(a1 + 18);
        HIDWORD(v18) = v16 - 13;
        LODWORD(v18) = v16 - 13;
        unsigned int v17 = v18 >> 1;
        if (v17 <= 6 && ((1 << v17) & 0x47) != 0) {
          goto LABEL_20;
        }
      }
    }
    else
    {
      HIDWORD(v15) = v13 - 41;
      LODWORD(v15) = v13 - 41;
      unsigned int v14 = v15 >> 1;
      if (v14 <= 6 && ((1 << v14) & 0x47) != 0)
      {
        unsigned int v16 = v13 - 28;
LABEL_20:
        if (v16 == 25 && (*(unsigned char *)(a1 + 17) & 4) != 0)
        {
          int v19 = *(_DWORD *)(a1 + 20);
          unint64_t v20 = (v19 & 0x40000000) != 0 ? *(llvm::Value ***)(a1 - 8) : (llvm::Value **)(a1 - 32 * (v19 & 0x7FFFFFF));
          uint64_t result = *v20;
          if (*v20)
          {
            if (v20[4] == a2) {
              return result;
            }
          }
        }
      }
    }
  }
  int v21 = *(llvm::Constant **)(a4 + 24);
  uint64_t v22 = *(void *)(a4 + 32);
  uint64_t v23 = *(void *)(a4 + 16);
  if (!v22 || !*(void *)(v22 + 40))
  {
    if (*(unsigned __int8 *)(a1 + 16) < 0x1Cu || (uint64_t v22 = a1, !*(void *)(a1 + 40))) {
      uint64_t v22 = 0;
    }
  }
  uint64_t v27 = *(void *)a4;
  unsigned int v28 = v21;
  uint64_t v29 = v22;
  uint64_t v30 = v23;
  uint64_t v31 = 0;
  char v32 = 1;
  int v24 = sub_1CC162D6C((llvm::Constant *)a1, 0, (uint64_t)&v27);
  uint64_t v25 = *(llvm::Constant **)a1;
  if ((*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x12) {
    uint64_t v25 = (llvm::Constant *)**((void **)v25 + 2);
  }
  if (v24 == llvm::Type::getPrimitiveSizeInBits(v25)) {
    return (llvm::Value *)a1;
  }
  else {
    return 0;
  }
}

llvm::Value *llvm::SimplifyAndInst(llvm *a1, llvm::Constant *a2, uint64_t a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1CC02C2C8(a1, a2, a3, 3, a5, a6);
}

llvm::Value *sub_1CC02C2C8(llvm *a1, llvm::Constant *a2, uint64_t a3, int a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  char v8 = a2;
  uint64_t v176 = *MEMORY[0x1E4F143B8];
  if (a1 && *((unsigned __int8 *)a1 + 16) <= 0x14u)
  {
    if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
    {
      uint64_t result = llvm::ConstantFoldBinaryOpOperands((llvm *)0x1C, a1, a2, *(llvm::Constant **)a3, a5, a6);
      int v11 = a1;
      if (result) {
        return result;
      }
    }
    else
    {
      int v11 = a2;
      char v8 = a1;
    }
  }
  else
  {
    int v11 = a1;
  }
  int v12 = *((unsigned __int8 *)v8 + 16);
  if (v12 == 12) {
    return v8;
  }
  if (*(unsigned char *)(a3 + 41))
  {
    unsigned int v13 = (v12 - 11);
    if (v13 < 2) {
      goto LABEL_21;
    }
    if (v13 >= 0xFD)
    {
      unint64_t v166 = (llvm::Constant *)&v170;
      uint64_t v167 = (llvm::APInt **)&v170;
      uint64_t v168 = 8;
      LODWORD(v169) = 0;
      unint64_t v172 = (unint64_t)&v174;
      uint64_t v173 = 0x800000000;
      BOOL v154 = &v166;
      unint64_t v155 = (void **)&v172;
      BOOL v50 = 0;
      if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v154, (uint64_t)v8))
      {
        do
        {
          BOOL v50 = v173 == 0;
          if (!v173) {
            break;
          }
          uint64_t v147 = *(void *)(v172 + 8 * v173 - 8);
          LODWORD(v173) = v173 - 1;
        }
        while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v154, v147) & 1) != 0);
      }
      if ((uint64_t *)v172 != &v174) {
        free((void *)v172);
      }
      if (v167 == (llvm::APInt **)v166)
      {
        if (v50) {
          goto LABEL_21;
        }
      }
      else
      {
        free(v167);
        if (v50) {
          goto LABEL_21;
        }
      }
    }
  }
  if (v11 == v8) {
    return v11;
  }
  if (v8)
  {
    unsigned int v14 = *((unsigned __int8 *)v8 + 16);
    if (v14 <= 0x14)
    {
      if (v14 == 16)
      {
        uint64_t v15 = *((unsigned int *)v8 + 8);
        if (v15 < 0x41)
        {
          if (*((void *)v8 + 3)) {
            goto LABEL_20;
          }
LABEL_21:
          unsigned int v16 = *(llvm::Constant **)v11;
          return llvm::Constant::getNullValue(v16, a2, (const llvm::APFloat *)a3);
        }
        int v85 = 0;
        int64_t v86 = (unint64_t)(v15 + 63) >> 6;
        do
        {
          BOOL v54 = v86-- < 1;
          if (v54) {
            break;
          }
          unint64_t v87 = *(void *)(*((void *)v8 + 3) + 8 * v86);
          v85 += __clz(v87);
        }
        while (!v87);
        int v88 = v15 | 0xFFFFFFC0;
        if ((v15 & 0x3F) == 0) {
          int v88 = 0;
        }
        if (v85 + v88 == v15) {
          goto LABEL_21;
        }
      }
      else if (v14 == 17)
      {
        if (sub_1CB844168((uint64_t)v8, 0.0)) {
          goto LABEL_21;
        }
      }
      else if (v14 - 18 < 3 || v14 == 13)
      {
        goto LABEL_21;
      }
LABEL_20:
      if (sub_1CC03F414((uint64_t)&v166, v8)) {
        goto LABEL_21;
      }
    }
  }
  if (sub_1CBF687D0((uint64_t)&v166, v8)) {
    return v11;
  }
  unint64_t v166 = v8;
  int v17 = *((unsigned __int8 *)v11 + 16);
  if (v17 == 5)
  {
    if (*((_WORD *)v11 + 9) == 30)
    {
      uint64_t v19 = *((_DWORD *)v11 + 5) & 0x7FFFFFF;
      unint64_t v20 = (llvm **)((char *)v11 - 32 * v19);
      if (v8 == *v20)
      {
        if (sub_1CBF68974((uint64_t)&v167, v20[4])) {
          goto LABEL_21;
        }
        uint64_t v22 = v166;
        uint64_t v21 = -(uint64_t)(*((_DWORD *)v11 + 5) & 0x7FFFFFF);
      }
      else
      {
        uint64_t v21 = -v19;
        uint64_t v22 = v8;
      }
      uint64_t v23 = (llvm::Constant **)((char *)v11 + 32 * v21);
      if (v22 == v23[4] && (sub_1CBF68974((uint64_t)&v167, *v23) & 1) != 0) {
        goto LABEL_21;
      }
    }
  }
  else if (v17 == 58)
  {
    unint64_t v18 = v8;
    if (v8 == *((llvm **)v11 - 8))
    {
      if (sub_1CBF687D0((uint64_t)&v167, *((llvm::Constant **)v11 - 4))) {
        goto LABEL_21;
      }
      unint64_t v18 = v166;
    }
    if (v18 == *((llvm **)v11 - 4) && (sub_1CBF687D0((uint64_t)&v167, *((llvm::Constant **)v11 - 8)) & 1) != 0) {
      goto LABEL_21;
    }
  }
  unint64_t v172 = (unint64_t)v11;
  int v24 = *((unsigned __int8 *)v8 + 16);
  if (v24 == 5)
  {
    if (*((_WORD *)v8 + 9) == 30)
    {
      uint64_t v26 = *((_DWORD *)v8 + 5) & 0x7FFFFFF;
      uint64_t v27 = (llvm **)((char *)v8 - 32 * v26);
      if (v11 == *v27)
      {
        if (sub_1CBF68974((uint64_t)&v173, v27[4])) {
          goto LABEL_21;
        }
        uint64_t v29 = (llvm *)v172;
        uint64_t v28 = -(uint64_t)(*((_DWORD *)v8 + 5) & 0x7FFFFFF);
      }
      else
      {
        uint64_t v28 = -v26;
        uint64_t v29 = v11;
      }
      uint64_t v30 = (llvm **)((char *)v8 + 32 * v28);
      if (v29 == v30[4] && (sub_1CBF68974((uint64_t)&v173, *v30) & 1) != 0) {
        goto LABEL_21;
      }
    }
  }
  else if (v24 == 58)
  {
    uint64_t v25 = v11;
    if (v11 == *((llvm **)v8 - 8))
    {
      if (sub_1CBF687D0((uint64_t)&v173, *((llvm::Constant **)v8 - 4))) {
        goto LABEL_21;
      }
      uint64_t v25 = (llvm *)v172;
    }
    if (v25 == *((llvm **)v8 - 4) && (sub_1CBF687D0((uint64_t)&v173, *((llvm::Constant **)v8 - 8)) & 1) != 0) {
      goto LABEL_21;
    }
  }
  int v31 = *((unsigned __int8 *)v11 + 16);
  if (v31 == 5)
  {
    if (*((_WORD *)v11 + 9) != 29) {
      goto LABEL_68;
    }
    uint64_t v33 = (llvm **)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
    if (v8 == *v33) {
      return v8;
    }
    char v32 = v33 + 4;
  }
  else
  {
    if (v31 != 57) {
      goto LABEL_68;
    }
    if (v8 == *((llvm **)v11 - 8)) {
      return v8;
    }
    char v32 = (llvm **)((char *)v11 - 32);
  }
  if (v8 == *v32) {
    return v8;
  }
LABEL_68:
  int v34 = *((unsigned __int8 *)v8 + 16);
  if (v34 == 5)
  {
    if (*((_WORD *)v8 + 9) != 29) {
      goto LABEL_76;
    }
    uint64_t v36 = (llvm **)((char *)v8 - 32 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF));
    if (v11 == *v36) {
      return v11;
    }
    uint64_t v35 = v36 + 4;
  }
  else
  {
    if (v34 != 57) {
      goto LABEL_76;
    }
    if (v11 == *((llvm **)v8 - 8)) {
      return v11;
    }
    uint64_t v35 = (llvm **)((char *)v8 - 32);
  }
  if (v11 == *v35) {
    return v11;
  }
LABEL_76:
  uint64_t v164 = 0;
  unsigned int v165 = 0;
  unint64_t v166 = (llvm::Constant *)&v165;
  uint64_t v167 = (llvm::APInt **)&v164;
  if (!sub_1CC04308C((void **)&v166, 29, (uint64_t)v11)) {
    goto LABEL_86;
  }
  int v37 = *((unsigned __int8 *)v8 + 16);
  if (v37 == 5)
  {
    if (*((_WORD *)v8 + 9) != 29) {
      goto LABEL_86;
    }
    long long v40 = (uint64_t **)((char *)v8 - 32 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF));
    char v38 = *v40;
    uint64_t result = v165;
    uint64_t v39 = v40[4];
  }
  else
  {
    if (v37 != 57) {
      goto LABEL_86;
    }
    char v38 = (uint64_t *)*((void *)v8 - 8);
    uint64_t result = v165;
    uint64_t v39 = (uint64_t *)*((void *)v8 - 4);
  }
  if (result == (llvm::Value *)v38 && v164 == v39) {
    return (llvm::Value *)v38;
  }
  if (result == (llvm::Value *)v39 && v164 == v38) {
    return result;
  }
LABEL_86:
  unint64_t v166 = (llvm::Constant *)&v165;
  uint64_t v167 = (llvm::APInt **)&v164;
  if (!sub_1CC04308C((void **)&v166, 29, (uint64_t)v8)) {
    goto LABEL_99;
  }
  int v41 = *((unsigned __int8 *)v11 + 16);
  if (v41 == 5)
  {
    if (*((_WORD *)v11 + 9) != 29) {
      goto LABEL_99;
    }
    uint64_t v43 = (uint64_t **)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
    char v38 = *v43;
    uint64_t result = v165;
    uint64_t v42 = v43[4];
  }
  else
  {
    if (v41 != 57) {
      goto LABEL_99;
    }
    char v38 = (uint64_t *)*((void *)v11 - 8);
    uint64_t result = v165;
    uint64_t v42 = (uint64_t *)*((void *)v11 - 4);
  }
  if (result == (llvm::Value *)v38 && v164 == v42) {
    return (llvm::Value *)v38;
  }
  if (result == (llvm::Value *)v42 && v164 == v38) {
    return result;
  }
LABEL_99:
  uint64_t result = sub_1CC042A3C((uint64_t)v11, (uint64_t)v8, (const llvm::APInt *)0x1C);
  if (result) {
    return result;
  }
  uint64_t v162 = 0;
  unsigned int v163 = 0;
  unint64_t v166 = (llvm::Constant *)&v163;
  uint64_t v167 = 0;
  if (sub_1CBF528D8((uint64_t)&v166, (unsigned __int8 *)v8))
  {
    unint64_t v166 = (llvm::Constant *)&v165;
    uint64_t v167 = &v162;
    uint64_t v168 = 0;
    int v45 = *((unsigned __int8 *)v11 + 16);
    if (v45 == 5)
    {
      if (*((_WORD *)v11 + 9) != 25) {
        goto LABEL_134;
      }
      uint64_t v46 = (llvm::Constant **)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
      if (!*v46) {
        goto LABEL_134;
      }
      unsigned int v165 = *v46;
      if (!sub_1CBF5295C((uint64_t)&v167, v46[4])) {
        goto LABEL_134;
      }
    }
    else
    {
      if (v45 != 53) {
        goto LABEL_134;
      }
      if (!*((void *)v11 - 8)) {
        goto LABEL_134;
      }
      unsigned int v165 = (llvm::Value *)*((void *)v11 - 8);
      if ((sub_1CBF528D8((uint64_t)&v167, *((unsigned __int8 **)v11 - 4)) & 1) == 0) {
        goto LABEL_134;
      }
    }
    unsigned int v47 = *((_DWORD *)v163 + 2);
    unsigned int v161 = v47;
    if (v47 > 0x40) {
      operator new[]();
    }
    uint64_t v48 = ~*v163;
    if (v47) {
      unint64_t v49 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v47;
    }
    else {
      unint64_t v49 = 0;
    }
    unint64_t v160 = v49 & v48;
    unsigned int v161 = 0;
    LODWORD(v173) = v47;
    unint64_t v172 = v49 & v48;
    llvm::APInt::lshrInPlace((llvm::APInt *)&v172, v162);
    if (v173 >= 0x41)
    {
      int v52 = 0;
      int64_t v53 = ((unint64_t)v173 + 63) >> 6;
      do
      {
        BOOL v54 = v53-- < 1;
        if (v54) {
          break;
        }
        unint64_t v55 = *(void *)(v172 + 8 * v53);
        v52 += __clz(v55);
      }
      while (!v55);
      if ((v173 & 0x3F) != 0) {
        unsigned int v56 = v173 | 0xFFFFFFC0;
      }
      else {
        unsigned int v56 = 0;
      }
      BOOL v51 = v52 + v56 == v173;
      if (v172) {
        MEMORY[0x1D25D9CB0](v172, 0x1000C8000313F17);
      }
    }
    else
    {
      BOOL v51 = v172 == 0;
    }
    if (v161 >= 0x41 && v160) {
      MEMORY[0x1D25D9CB0](v160, 0x1000C8000313F17);
    }
    if (v51) {
      return v11;
    }
LABEL_134:
    unint64_t v166 = (llvm::Constant *)&v165;
    uint64_t v167 = &v162;
    uint64_t v168 = 0;
    int v57 = *((unsigned __int8 *)v11 + 16);
    if (v57 == 5)
    {
      if (*((_WORD *)v11 + 9) != 26) {
        goto LABEL_156;
      }
      BOOL v58 = (llvm::Constant **)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
      if (!*v58) {
        goto LABEL_156;
      }
      unsigned int v165 = *v58;
      if (!sub_1CBF5295C((uint64_t)&v167, v58[4])) {
        goto LABEL_156;
      }
    }
    else
    {
      if (v57 != 54) {
        goto LABEL_156;
      }
      if (!*((void *)v11 - 8)) {
        goto LABEL_156;
      }
      unsigned int v165 = (llvm::Value *)*((void *)v11 - 8);
      if ((sub_1CBF528D8((uint64_t)&v167, *((unsigned __int8 **)v11 - 4)) & 1) == 0) {
        goto LABEL_156;
      }
    }
    unsigned int v59 = *((_DWORD *)v163 + 2);
    unsigned int v159 = v59;
    if (v59 > 0x40) {
      operator new[]();
    }
    uint64_t v60 = ~*v163;
    unint64_t v61 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v59;
    if (!v59) {
      unint64_t v61 = 0;
    }
    v158[1] = v61 & v60;
    unsigned int v159 = 0;
    LODWORD(v173) = v59;
    unint64_t v172 = v61 & v60;
    int v62 = v59;
    unint64_t v63 = v61 & v60;
    uint64_t v64 = *((unsigned int *)v162 + 2);
    if (v64 >= 0x41)
    {
      int v89 = 0;
      int64_t v90 = (unint64_t)(v64 + 63) >> 6;
      int v91 = *(unint64_t **)v162;
      do
      {
        BOOL v54 = v90-- < 1;
        if (v54) {
          break;
        }
        unint64_t v92 = v91[v90];
        v89 += __clz(v92);
      }
      while (!v92);
      int v93 = v64 | 0xFFFFFFC0;
      if ((v64 & 0x3F) == 0) {
        int v93 = 0;
      }
      if ((v64 - v89 - v93) > 0x40)
      {
LABEL_151:
        unint64_t v66 = v63 << v62;
        if (v59 == v62) {
          unint64_t v66 = 0;
        }
        unint64_t v67 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v59;
        if (!v59) {
          unint64_t v67 = 0;
        }
        unint64_t v172 = v67 & v66;
        if ((v67 & v66) == 0) {
          return v11;
        }
        goto LABEL_156;
      }
      unint64_t v65 = *v91;
    }
    else
    {
      unint64_t v65 = *(void *)v162;
    }
    if (v65 <= v59) {
      int v62 = v65;
    }
    goto LABEL_151;
  }
LABEL_156:
  if (llvm::isCheckForZeroAndMulWithOverflow(v11, v8, (llvm::Value *)1, &v166, v44)) {
    return v8;
  }
  if (llvm::isCheckForZeroAndMulWithOverflow(v8, v11, (llvm::Value *)1, &v166, v68)) {
    return v11;
  }
  uint64_t v167 = (llvm::APInt **)v8;
  int v69 = *((unsigned __int8 *)v11 + 16);
  if (v69 == 5)
  {
    if (*((_WORD *)v11 + 9) == 15
      && sub_1CC03F414((uint64_t)&v166, *((llvm::Constant **)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))))
    {
      uint64_t v70 = (llvm::APInt **)((void *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))[4];
LABEL_165:
      if (v167 == v70) {
        goto LABEL_174;
      }
    }
  }
  else if (v69 == 43 && sub_1CBF535C4((uint64_t)&v166, *((llvm::Constant **)v11 - 8)))
  {
    uint64_t v70 = (llvm::APInt **)*((void *)v11 - 4);
    goto LABEL_165;
  }
  uint64_t v173 = (uint64_t)v11;
  int v71 = *((unsigned __int8 *)v8 + 16);
  if (v71 == 5)
  {
    if (*((_WORD *)v8 + 9) != 15
      || !sub_1CC03F414((uint64_t)&v172, *((llvm::Constant **)v8 - 4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF))))
    {
      goto LABEL_176;
    }
    uint64_t v72 = ((void *)v8 - 4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF))[4];
  }
  else
  {
    if (v71 != 43 || !sub_1CBF535C4((uint64_t)&v172, *((llvm::Constant **)v8 - 8))) {
      goto LABEL_176;
    }
    uint64_t v72 = *((void *)v8 - 4);
  }
  if (v173 != v72) {
    goto LABEL_176;
  }
LABEL_174:
  if (llvm::isKnownToBeAPowerOfTwo(v11, *(const llvm::Value **)a3, (const llvm::DataLayout *)1, 0, *(void *)(a3 + 24), *(llvm::AssumptionCache **)(a3 + 32), *(const llvm::Instruction **)(a3 + 16), (const llvm::DominatorTree *)1, v148))return v11; {
  if (llvm::isKnownToBeAPowerOfTwo(v8, *(const llvm::Value **)a3, (const llvm::DataLayout *)1, 0, *(void *)(a3 + 24), *(llvm::AssumptionCache **)(a3 + 32), *(const llvm::Instruction **)(a3 + 16), (const llvm::DominatorTree *)1, v149))return v8;
  }
LABEL_176:
  unint64_t v166 = v8;
  int v73 = *((unsigned __int8 *)v11 + 16);
  if (v73 == 5)
  {
    if (*((_WORD *)v11 + 9) != 13) {
      goto LABEL_186;
    }
    unint64_t v74 = (llvm **)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
    if (v8 != *v74 || !sub_1CBF68974((uint64_t)&v167, v74[4])) {
      goto LABEL_186;
    }
  }
  else if (v73 != 41 {
         || v8 != *((llvm **)v11 - 8)
  }
         || (sub_1CBF687D0((uint64_t)&v167, *((llvm::Constant **)v11 - 4)) & 1) == 0)
  {
    goto LABEL_186;
  }
  if (llvm::isKnownToBeAPowerOfTwo(v8, *(const llvm::Value **)a3, (const llvm::DataLayout *)1, 0, *(void *)(a3 + 24), *(llvm::AssumptionCache **)(a3 + 32), *(const llvm::Instruction **)(a3 + 16), (const llvm::DominatorTree *)1, v148))
  {
    unsigned int v16 = *(llvm::Constant **)v8;
    return llvm::Constant::getNullValue(v16, a2, (const llvm::APFloat *)a3);
  }
LABEL_186:
  unint64_t v166 = v11;
  int v75 = *((unsigned __int8 *)v8 + 16);
  if (v75 == 5)
  {
    if (*((_WORD *)v8 + 9) != 13) {
      goto LABEL_195;
    }
    uint64_t v76 = (llvm **)((char *)v8 - 32 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF));
    if (v11 != *v76 || !sub_1CBF68974((uint64_t)&v167, v76[4])) {
      goto LABEL_195;
    }
LABEL_194:
    if (llvm::isKnownToBeAPowerOfTwo(v11, *(const llvm::Value **)a3, (const llvm::DataLayout *)1, 0, *(void *)(a3 + 24), *(llvm::AssumptionCache **)(a3 + 32), *(const llvm::Instruction **)(a3 + 16), (const llvm::DominatorTree *)1, v148))goto LABEL_21; {
    goto LABEL_195;
    }
  }
  if (v75 == 41 && v11 == *((llvm **)v8 - 8) && (sub_1CBF687D0((uint64_t)&v167, *((llvm::Constant **)v8 - 4)) & 1) != 0) {
    goto LABEL_194;
  }
LABEL_195:
  uint64_t result = sub_1CC042C30(a3, (uint64_t)v11, (uint64_t)v8, 1);
  if (result) {
    return result;
  }
  uint64_t result = (llvm::Value *)sub_1CC03F1D8(28, v11, v8);
  if (result) {
    return result;
  }
  uint64_t result = sub_1CC03FBD8(28, v11, v8, 0x1Du, a3, a4);
  if (result) {
    return result;
  }
  uint64_t result = sub_1CC03FBD8(28, v11, v8, 0x1Eu, a3, a4);
  if (result) {
    return result;
  }
  int v77 = *((unsigned __int8 *)v11 + 16);
  if (v77 == 85 || *((unsigned char *)v8 + 16) == 85)
  {
    int v78 = *(_DWORD *)(*(void *)v11 + 8);
    if ((v78 & 0xFE) == 0x12) {
      int v78 = *(_DWORD *)(**(void **)(*(void *)v11 + 16) + 8);
    }
    if (v78 == 269)
    {
      if (sub_1CC045BF4((uint64_t)v11, (uint64_t)v8)) {
        return v8;
      }
      if (sub_1CC045BF4((uint64_t)v8, (uint64_t)v11)) {
        return v11;
      }
    }
    uint64_t result = sub_1CC03FC6C(28, v11, v8, a3, a4);
    if (result) {
      return result;
    }
    int v77 = *((unsigned __int8 *)v11 + 16);
  }
  if (v77 != 83 && *((unsigned char *)v8 + 16) != 83 || (uint64_t result = (llvm::Value *)sub_1CC040084(28, v11, v8, a3, a4)) == 0)
  {
    v158[0] = 0;
    unint64_t v172 = (unint64_t)&v163;
    uint64_t v173 = 0;
    if (!sub_1CBF528D8((uint64_t)&v172, (unsigned __int8 *)v8)) {
      goto LABEL_312;
    }
    unint64_t v166 = (llvm::Constant *)&v165;
    uint64_t v167 = &v162;
    uint64_t v168 = 0;
    unint64_t v169 = v158;
    uint64_t v170 = &v164;
    int v81 = *((unsigned __int8 *)v11 + 16);
    if (v81 == 5)
    {
      if (*((_WORD *)v11 + 9) != 29) {
        goto LABEL_312;
      }
      uint64_t v94 = *((void *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
      int v95 = sub_1CC042974((void **)&v166, v94);
      if (v94 && v95)
      {
        *unint64_t v169 = v94;
        unint64_t v84 = (uint64_t *)((void *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))[4];
        if (!v84) {
          goto LABEL_217;
        }
      }
      else
      {
        uint64_t v98 = ((void *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))[4];
        int v99 = sub_1CC042974((void **)&v166, v98);
        if (!v98) {
          goto LABEL_312;
        }
        if (!v99) {
          goto LABEL_312;
        }
        *unint64_t v169 = v98;
        unint64_t v84 = (uint64_t *)*((void *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
        if (!v84) {
          goto LABEL_312;
        }
      }
    }
    else
    {
      if (v81 != 57) {
        goto LABEL_312;
      }
      uint64_t v82 = *((void *)v11 - 8);
      int v83 = sub_1CC042974((void **)&v166, v82);
      if (v82 && v83)
      {
        *unint64_t v169 = v82;
        unint64_t v84 = (uint64_t *)*((void *)v11 - 4);
        if (!v84)
        {
LABEL_217:
          sub_1CC042974((void **)&v166, 0);
          goto LABEL_312;
        }
      }
      else
      {
        uint64_t v96 = *((void *)v11 - 4);
        int v97 = sub_1CC042974((void **)&v166, v96);
        if (!v96) {
          goto LABEL_312;
        }
        if (!v97) {
          goto LABEL_312;
        }
        *unint64_t v169 = v96;
        unint64_t v84 = (uint64_t *)*((void *)v11 - 8);
        if (!v84) {
          goto LABEL_312;
        }
      }
    }
    *uint64_t v170 = v84;
    char v100 = *(llvm::Type **)v11;
    if ((*(_DWORD *)(*(void *)v11 + 8) & 0xFE) == 0x12) {
      char v100 = (llvm::Type *)**((void **)v100 + 2);
    }
    unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v100);
    char v102 = v162;
    uint64_t v103 = *((unsigned int *)v162 + 2);
    if (v103 >= 0x41)
    {
      int v104 = 0;
      int64_t v105 = (unint64_t)(v103 + 63) >> 6;
      do
      {
        BOOL v54 = v105-- < 1;
        if (v54) {
          break;
        }
        unint64_t v106 = *(void *)(*(void *)v162 + 8 * v105);
        v104 += __clz(v106);
      }
      while (!v106);
      int v107 = v103 | 0xFFFFFFC0;
      if ((v103 & 0x3F) == 0) {
        int v107 = 0;
      }
      if ((v103 - v104 - v107) > 0x40)
      {
        unsigned int v108 = PrimitiveSizeInBits;
        goto LABEL_257;
      }
      char v102 = *(llvm::APInt **)v162;
    }
    unint64_t v109 = *(void *)v102;
    unsigned int v108 = PrimitiveSizeInBits;
    if (v109 <= PrimitiveSizeInBits) {
      unsigned int v108 = v109;
    }
LABEL_257:
    uint64_t v110 = *(llvm::APInt ***)(a3 + 24);
    long long v111 = *(uint64_t **)(a3 + 32);
    uint64_t v112 = *(uint64_t **)(a3 + 16);
    if (!v111 || !v111[5])
    {
      if (!v164 || *((unsigned __int8 *)v164 + 16) < 0x1Cu || (long long v111 = v164, !v164[5])) {
        long long v111 = 0;
      }
    }
    unint64_t v166 = *(llvm::Constant **)a3;
    uint64_t v167 = v110;
    uint64_t v168 = (uint64_t)v111;
    unint64_t v169 = v112;
    uint64_t v170 = 0;
    char v171 = 1;
    sub_1CC16089C(v164, 0, &v166, (uint64_t)&v172);
    int v113 = v173;
    if (v173 > 0x40)
    {
      int v114 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v172);
    }
    else if (v173)
    {
      int v114 = __clz(~(v172 << -(char)v173));
    }
    else
    {
      int v114 = 0;
    }
    if (v113 - v114 > v108)
    {
      uint64_t v115 = 0;
      goto LABEL_307;
    }
    uint64_t v116 = *(llvm::APInt ***)(a3 + 24);
    uint64_t v117 = *(uint64_t **)(a3 + 32);
    int v118 = *(uint64_t **)(a3 + 16);
    if (!v117 || !v117[5])
    {
      if (!v165 || *((unsigned __int8 *)v165 + 16) < 0x1Cu || (uint64_t v117 = (uint64_t *)v165, !*((void *)v165 + 5))) {
        uint64_t v117 = 0;
      }
    }
    unint64_t v166 = *(llvm::Constant **)a3;
    uint64_t v167 = v116;
    uint64_t v168 = (uint64_t)v117;
    unint64_t v169 = v118;
    uint64_t v170 = 0;
    char v171 = 1;
    sub_1CC16089C((uint64_t *)v165, 0, &v166, (uint64_t)&v154);
    int v119 = (int)v155;
    if (v155 > 0x40)
    {
      int v120 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v154);
    }
    else if (v155)
    {
      int v120 = __clz(~((void)v154 << -(char)v155));
    }
    else
    {
      int v120 = 0;
    }
    LODWORD(v167) = PrimitiveSizeInBits;
    if (PrimitiveSizeInBits >= 0x41) {
      operator new[]();
    }
    unint64_t v121 = 0;
    unint64_t v166 = 0;
    if (v113 != v114)
    {
      if ((v113 - v114) <= 0x40)
      {
        unint64_t v121 = 0xFFFFFFFFFFFFFFFFLL >> (v114 - v113);
        unint64_t v166 = (llvm::Constant *)v121;
        unsigned int v151 = PrimitiveSizeInBits;
        goto LABEL_287;
      }
      llvm::APInt::setBitsSlowCase(&v166, 0, v113 - v114);
    }
    unsigned int v151 = PrimitiveSizeInBits;
LABEL_287:
    unint64_t v122 = 0;
    uint64_t v150 = 0;
    if (v119 != v120)
    {
      uint64_t v80 = (const llvm::APFloat *)(v119 - v120);
      if (v80 <= 0x40)
      {
        unint64_t v122 = 0xFFFFFFFFFFFFFFFFLL >> (v120 - v119);
        unsigned int v153 = PrimitiveSizeInBits;
        goto LABEL_292;
      }
      llvm::APInt::setBitsSlowCase(&v150, 0, v80);
    }
    unsigned int v153 = PrimitiveSizeInBits;
LABEL_292:
    unint64_t v123 = v122 << v108;
    if (PrimitiveSizeInBits == v108) {
      unint64_t v123 = 0;
    }
    if (PrimitiveSizeInBits) {
      unint64_t v124 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
    }
    else {
      unint64_t v124 = 0;
    }
    unint64_t v152 = v124 & v123;
    uint64_t v125 = *v163;
    if ((v121 & ~*v163) != 0 || (v125 & v152) != 0)
    {
      if ((v152 & ~v125) != 0)
      {
        uint64_t v115 = 0;
        int v126 = 1;
      }
      else if ((v125 & v121) != 0)
      {
        uint64_t v115 = 0;
        int v126 = 1;
      }
      else
      {
        int v126 = 0;
        uint64_t v115 = (uint64_t *)v158[0];
      }
    }
    else
    {
      int v126 = 0;
      uint64_t v115 = v164;
    }
    if (v157 >= 0x41 && v156) {
      MEMORY[0x1D25D9CB0](v156, 0x1000C8000313F17);
    }
    if (v155 >= 0x41 && v154) {
      MEMORY[0x1D25D9CB0](v154, 0x1000C8000313F17);
    }
    if (!v126)
    {
      char v127 = 0;
      goto LABEL_309;
    }
LABEL_307:
    char v127 = 1;
LABEL_309:
    if (v175 >= 0x41 && v174) {
      MEMORY[0x1D25D9CB0](v174, 0x1000C8000313F17);
    }
    if (v173 >= 0x41 && v172) {
      MEMORY[0x1D25D9CB0](v172, 0x1000C8000313F17);
    }
    if ((v127 & 1) == 0) {
      return (llvm::Value *)v115;
    }
LABEL_312:
    int v128 = *((unsigned __int8 *)v11 + 16);
    if (v128 != 5)
    {
      if (v128 != 58) {
        return 0;
      }
      uint64_t v129 = *((void *)v11 - 8);
      if (!v129)
      {
        unsigned int v130 = (uint64_t *)*((void *)v11 - 4);
        if (!v130) {
          return 0;
        }
        goto LABEL_339;
      }
      unsigned int v165 = (llvm::Value *)*((void *)v11 - 8);
      unsigned int v130 = (uint64_t *)*((void *)v11 - 4);
      if (*((unsigned char *)v130 + 16) != 57 || !v130)
      {
LABEL_339:
        uint64_t v115 = 0;
        unsigned int v165 = (llvm::Value *)v130;
        if (*(unsigned char *)(v129 + 16) != 57 || !v129) {
          return (llvm::Value *)v115;
        }
        uint64_t v140 = *(uint64_t **)(v129 - 64);
        uint64_t v132 = *(uint64_t **)(v129 - 32);
        if (v130 == v140)
        {
          if (!v132) {
            return 0;
          }
          uint64_t v164 = *(uint64_t **)(v129 - 32);
        }
        else
        {
          uint64_t v115 = 0;
          if (!v140 || v130 != v132) {
            return (llvm::Value *)v115;
          }
          uint64_t v164 = *(uint64_t **)(v129 - 64);
          uint64_t v132 = v140;
        }
        unsigned int v130 = (uint64_t *)v129;
        goto LABEL_363;
      }
      uint64_t v131 = (uint64_t *)*(v130 - 8);
      uint64_t v132 = (uint64_t *)*(v130 - 4);
      if ((uint64_t *)v129 != v131)
      {
        if (v131 && (uint64_t *)v129 == v132)
        {
          uint64_t v164 = (uint64_t *)*(v130 - 8);
          uint64_t v132 = v131;
LABEL_363:
          int v143 = *((unsigned __int8 *)v8 + 16);
          if (v143 == 5)
          {
            if (*((_WORD *)v8 + 9) != 30) {
              return 0;
            }
            BOOL v146 = (uint64_t **)((char *)v8 - 32 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF));
            uint64_t v144 = *v146;
            unint64_t v145 = v146[4];
          }
          else
          {
            if (v143 != 58) {
              return 0;
            }
            uint64_t v144 = (uint64_t *)*((void *)v8 - 8);
            unint64_t v145 = (uint64_t *)*((void *)v8 - 4);
          }
          if (v130 == v144 && v132 == v145 || v130 == v145 && v132 == v144) {
            return llvm::Constant::getNullValue(*(llvm::Constant **)v11, v79, v80);
          }
          return 0;
        }
        goto LABEL_339;
      }
      if (!v132) {
        goto LABEL_339;
      }
LABEL_362:
      uint64_t v164 = v132;
      goto LABEL_363;
    }
    if (*((_WORD *)v11 + 9) != 30) {
      return 0;
    }
    uint64_t v133 = (uint64_t **)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
    BOOL v134 = *v133;
    if (*v133)
    {
      unsigned int v165 = (llvm::Value *)*v133;
      unsigned int v130 = v133[4];
      unsigned int v135 = *((unsigned __int8 *)v130 + 16);
      BOOL v136 = v135 != 57 || v130 == 0;
      if (!v136 && v135 >= 0x1C && v135 - 59 >= 0xFFFFFFEE)
      {
        uint64_t v132 = (uint64_t *)*(v130 - 8);
        unsigned int v139 = (uint64_t *)*(v130 - 4);
        if (v134 == v132)
        {
          uint64_t v132 = (uint64_t *)*(v130 - 4);
          if (v139) {
            goto LABEL_362;
          }
        }
        else if (v132 && v134 == v139)
        {
          goto LABEL_362;
        }
      }
    }
    else
    {
      unsigned int v130 = v133[4];
      if (!v130) {
        return 0;
      }
    }
    unsigned int v165 = (llvm::Value *)v130;
    if (*((unsigned char *)v134 + 16) != 57 || v134 == 0) {
      return 0;
    }
    uint64_t v132 = (uint64_t *)*(v134 - 8);
    BOOL v142 = (uint64_t *)*(v134 - 4);
    if (v130 == v132)
    {
      unsigned int v130 = v134;
      uint64_t v132 = (uint64_t *)*(v134 - 4);
      if (!v142) {
        return 0;
      }
    }
    else
    {
      uint64_t v115 = 0;
      if (!v132) {
        return (llvm::Value *)v115;
      }
      BOOL v136 = v130 == v142;
      unsigned int v130 = v134;
      if (!v136) {
        return (llvm::Value *)v115;
      }
    }
    goto LABEL_362;
  }
  return result;
}

llvm::SmallPtrSetImplBase *llvm::SimplifyOrInst(llvm *a1, llvm::Constant *a2, uint64_t a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1CC02DBDC(a1, a2, a3, 3, a5, a6);
}

llvm::SmallPtrSetImplBase *sub_1CC02DBDC(llvm *a1, llvm::Constant *a2, uint64_t a3, int a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  char v8 = a2;
  v113[8] = *MEMORY[0x1E4F143B8];
  if (a1 && *((unsigned __int8 *)a1 + 16) <= 0x14u)
  {
    if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
    {
      uint64_t result = llvm::ConstantFoldBinaryOpOperands((llvm *)0x1D, a1, a2, *(llvm::Constant **)a3, a5, a6);
      int v11 = a1;
      if (result) {
        return result;
      }
    }
    else
    {
      int v11 = a2;
      char v8 = a1;
    }
  }
  else
  {
    int v11 = a1;
  }
  int v12 = *((unsigned __int8 *)v8 + 16);
  if (v12 == 12) {
    return v8;
  }
  if (*(unsigned char *)(a3 + 41))
  {
    unsigned int v13 = (v12 - 11);
    if (v13 <= 1)
    {
LABEL_15:
      unsigned int v14 = *(llvm::Constant **)v11;
      return (llvm::SmallPtrSetImplBase *)llvm::Constant::getAllOnesValue(v14, a2, (const llvm::APInt *)a3);
    }
    if (v13 > 0xFC)
    {
      uint64_t v107 = (uint64_t)&v110 + 8;
      unsigned int v108 = (llvm::APInt **)&v110 + 1;
      uint64_t v109 = 8;
      LODWORD(v110) = 0;
      *(void *)&long long v112 = v113;
      *((void *)&v112 + 1) = 0x800000000;
      int64_t v105 = (llvm::SmallPtrSetImplBase *)&v107;
      unint64_t v106 = (uint64_t *)&v112;
      BOOL v21 = 0;
      if (sub_1CC04C108(&v105, (uint64_t)v8))
      {
        do
        {
          BOOL v21 = DWORD2(v112) == 0;
          if (!DWORD2(v112)) {
            break;
          }
          uint64_t v97 = *(void *)(v112 + 8 * DWORD2(v112) - 8);
          --DWORD2(v112);
        }
        while ((sub_1CC04C108(&v105, v97) & 1) != 0);
      }
      if ((void *)v112 != v113) {
        free((void *)v112);
      }
      if (v108 == (llvm::APInt **)v107)
      {
        if (v21) {
          goto LABEL_15;
        }
      }
      else
      {
        free(v108);
        if (v21) {
          goto LABEL_15;
        }
      }
    }
  }
  if (sub_1CBF687D0((uint64_t)&v107, v8)) {
    goto LABEL_15;
  }
  if (v11 == v8) {
    return v11;
  }
  if (v8)
  {
    unsigned int v15 = *((unsigned __int8 *)v8 + 16);
    if (v15 <= 0x14)
    {
      if (v15 == 16)
      {
        uint64_t v16 = *((unsigned int *)v8 + 8);
        if (v16 >= 0x41)
        {
          int v59 = 0;
          int64_t v60 = (unint64_t)(v16 + 63) >> 6;
          do
          {
            BOOL v38 = v60-- < 1;
            if (v38) {
              break;
            }
            unint64_t v61 = *(void *)(*((void *)v8 + 3) + 8 * v60);
            v59 += __clz(v61);
          }
          while (!v61);
          int v62 = v16 | 0xFFFFFFC0;
          if ((v16 & 0x3F) == 0) {
            int v62 = 0;
          }
          if (v59 + v62 == v16) {
            return v11;
          }
        }
        else if (!*((void *)v8 + 3))
        {
          return v11;
        }
      }
      else if (v15 == 17)
      {
        if (sub_1CB844168((uint64_t)v8, 0.0)) {
          return v11;
        }
      }
      else if (v15 - 18 < 3 || v15 == 13)
      {
        return v11;
      }
      if (sub_1CC03F414((uint64_t)&v107, v8)) {
        return v11;
      }
    }
  }
  uint64_t result = (llvm::SmallPtrSetImplBase *)sub_1CC045D00((llvm::Constant **)v11, (uint64_t)v8);
  if (result) {
    return result;
  }
  uint64_t result = (llvm::SmallPtrSetImplBase *)sub_1CC045D00((llvm::Constant **)v8, (uint64_t)v11);
  if (result) {
    return result;
  }
  uint64_t result = sub_1CC042A3C((uint64_t)v11, (uint64_t)v8, (const llvm::APInt *)0x1D);
  if (result) {
    return result;
  }
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  unsigned int v108 = (llvm::APInt **)&v104;
  int v17 = *((unsigned __int8 *)v11 + 16);
  if (v17 == 5)
  {
    if (*((_WORD *)v11 + 9) != 25) {
      goto LABEL_57;
    }
    if (!sub_1CBF68974((uint64_t)&v107, *((llvm::Constant **)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))))goto LABEL_57; {
    unint64_t v18 = (llvm::APInt *)((void *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))[4];
    }
    if (!v18) {
      goto LABEL_57;
    }
  }
  else
  {
    if (v17 != 53) {
      goto LABEL_57;
    }
    if (!sub_1CBF687D0((uint64_t)&v107, *((llvm::Constant **)v11 - 8))) {
      goto LABEL_57;
    }
    unint64_t v18 = (llvm::APInt *)*((void *)v11 - 4);
    if (!v18) {
      goto LABEL_57;
    }
  }
  *unsigned int v108 = v18;
  *((void *)&v112 + 1) = &v103;
  int v19 = *((unsigned __int8 *)v8 + 16);
  if (v19 == 5)
  {
    if (*((_WORD *)v8 + 9) != 26) {
      goto LABEL_57;
    }
    if (!sub_1CBF68974((uint64_t)&v112, *((llvm::Constant **)v8 - 4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)))) {
      goto LABEL_57;
    }
    uint64_t v20 = ((void *)v8 - 4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF))[4];
    if (!v20) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  if (v19 == 54)
  {
    if (!sub_1CBF687D0((uint64_t)&v112, *((llvm::Constant **)v8 - 8)) || (uint64_t v20 = *((void *)v8 - 4)) == 0)
    {
LABEL_57:
      int v19 = *((unsigned __int8 *)v8 + 16);
      goto LABEL_58;
    }
LABEL_56:
    uint64_t v22 = (uint64_t *)*((void *)&v112 + 1);
    goto LABEL_75;
  }
LABEL_58:
  unint64_t v106 = &v104;
  if (v19 == 5)
  {
    if (*((_WORD *)v8 + 9) != 25) {
      goto LABEL_102;
    }
    if (!sub_1CBF68974((uint64_t)&v105, *((llvm::Constant **)v8 - 4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)))) {
      goto LABEL_102;
    }
    uint64_t v23 = ((void *)v8 - 4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF))[4];
    if (!v23) {
      goto LABEL_102;
    }
  }
  else
  {
    if (v19 != 53) {
      goto LABEL_102;
    }
    if (!sub_1CBF687D0((uint64_t)&v105, *((llvm::Constant **)v8 - 8))) {
      goto LABEL_102;
    }
    uint64_t v23 = *((void *)v8 - 4);
    if (!v23) {
      goto LABEL_102;
    }
  }
  *unint64_t v106 = v23;
  char v102 = &v103;
  int v24 = *((unsigned __int8 *)v11 + 16);
  if (v24 == 5)
  {
    if (*((_WORD *)v11 + 9) != 26) {
      goto LABEL_102;
    }
    if (!sub_1CBF68974((uint64_t)&v101, *((llvm::Constant **)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))))goto LABEL_102; {
    uint64_t v20 = ((void *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))[4];
    }
    if (!v20) {
      goto LABEL_102;
    }
  }
  else
  {
    if (v24 != 54) {
      goto LABEL_102;
    }
    if (!sub_1CBF687D0((uint64_t)&v101, *((llvm::Constant **)v11 - 8))) {
      goto LABEL_102;
    }
    uint64_t v20 = *((void *)v11 - 4);
    if (!v20) {
      goto LABEL_102;
    }
  }
  uint64_t v22 = v102;
LABEL_75:
  uint64_t *v22 = v20;
  int64_t v105 = 0;
  uint64_t v25 = v104;
  uint64_t v107 = (uint64_t)&v105;
  unsigned int v108 = 0;
  uint64_t v109 = v103;
  int v26 = *(unsigned __int8 *)(v104 + 16);
  if (v26 == 5)
  {
    if (*(_WORD *)(v104 + 18) == 15
      && sub_1CBF5295C((uint64_t)&v107, *(llvm::Constant **)(v104 - 32 * (*(_DWORD *)(v104 + 20) & 0x7FFFFFF))))
    {
      uint64_t v27 = *(void *)(v25 - 32 * (*(_DWORD *)(v25 + 20) & 0x7FFFFFF) + 32);
LABEL_82:
      if (v109 == v27) {
        goto LABEL_91;
      }
    }
  }
  else if (v26 == 43 && sub_1CBF528D8((uint64_t)&v107, *(unsigned __int8 **)(v104 - 64)))
  {
    uint64_t v27 = *(void *)(v25 - 32);
    goto LABEL_82;
  }
  uint64_t v28 = v103;
  *(void *)&long long v112 = &v105;
  *((void *)&v112 + 1) = 0;
  v113[0] = v104;
  int v29 = *(unsigned __int8 *)(v103 + 16);
  if (v29 == 5)
  {
    if (*(_WORD *)(v103 + 18) != 15
      || !sub_1CBF5295C((uint64_t)&v112, *(llvm::Constant **)(v103 - 32 * (*(_DWORD *)(v103 + 20) & 0x7FFFFFF))))
    {
      goto LABEL_102;
    }
    uint64_t v30 = *(void *)(v28 - 32 * (*(_DWORD *)(v28 + 20) & 0x7FFFFFF) + 32);
  }
  else
  {
    if (v29 != 43 || !sub_1CBF528D8((uint64_t)&v112, *(unsigned __int8 **)(v103 - 64))) {
      goto LABEL_102;
    }
    uint64_t v30 = *(void *)(v28 - 32);
  }
  if (v113[0] != v30) {
    goto LABEL_102;
  }
LABEL_91:
  int v31 = (llvm::Constant **)v104;
  char v32 = v105;
  uint64_t v33 = *(llvm::Type **)v104;
  if ((*(_DWORD *)(*(void *)v104 + 8) & 0xFE) == 0x12) {
    uint64_t v33 = (llvm::Type *)**((void **)v33 + 2);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v33);
  uint64_t v35 = *((unsigned int *)v32 + 2);
  if (v35 >= 0x41)
  {
    int v36 = 0;
    int64_t v37 = (unint64_t)(v35 + 63) >> 6;
    do
    {
      BOOL v38 = v37-- < 1;
      if (v38) {
        break;
      }
      unint64_t v39 = *(void *)(*(void *)v32 + 8 * v37);
      v36 += __clz(v39);
    }
    while (!v39);
    int v40 = v35 | 0xFFFFFFC0;
    if ((v35 & 0x3F) == 0) {
      int v40 = 0;
    }
    if ((v35 - v36 - v40) > 0x40) {
      goto LABEL_102;
    }
    char v32 = *(llvm::SmallPtrSetImplBase **)v32;
  }
  if (*(void *)v32 <= (unint64_t)PrimitiveSizeInBits)
  {
    unsigned int v14 = *v31;
    return (llvm::SmallPtrSetImplBase *)llvm::Constant::getAllOnesValue(v14, a2, (const llvm::APInt *)a3);
  }
LABEL_102:
  LODWORD(v107) = 148;
  unsigned int v108 = 0;
  uint64_t v109 = (uint64_t)&v104;
  BOOL v98 = 1;
  long long v110 = xmmword_1CDF53750;
  long long v111 = &v103;
  if (!sub_1CC0471F4((uint64_t)&v107, (uint64_t)v11)) {
    goto LABEL_111;
  }
  int v41 = *((unsigned __int8 *)v8 + 16);
  if (v41 == 5)
  {
    if (*((_WORD *)v8 + 9) != 25) {
      goto LABEL_111;
    }
    uint64_t v43 = (void *)((char *)v8 - 32 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF));
    if (v104 != *v43) {
      goto LABEL_111;
    }
    uint64_t v42 = v43[4];
  }
  else
  {
    if (v41 != 53 || v104 != *((void *)v8 - 8)) {
      goto LABEL_111;
    }
    uint64_t v42 = *((void *)v8 - 4);
  }
  if (v103 == v42) {
    return v11;
  }
LABEL_111:
  LODWORD(v107) = 148;
  unsigned int v108 = 0;
  uint64_t v109 = (uint64_t)&v104;
  long long v110 = xmmword_1CDF53750;
  long long v111 = &v103;
  if (!sub_1CC0471F4((uint64_t)&v107, (uint64_t)v8)) {
    goto LABEL_120;
  }
  int v44 = *((unsigned __int8 *)v11 + 16);
  if (v44 == 5)
  {
    if (*((_WORD *)v11 + 9) != 25) {
      goto LABEL_120;
    }
    uint64_t v46 = (void *)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
    if (v104 != *v46) {
      goto LABEL_120;
    }
    uint64_t v45 = v46[4];
  }
  else
  {
    if (v44 != 53 || v104 != *((void *)v11 - 8)) {
      goto LABEL_120;
    }
    uint64_t v45 = *((void *)v11 - 4);
  }
  if (v103 == v45) {
    return v8;
  }
LABEL_120:
  LODWORD(v112) = 149;
  *(void *)((char *)&v112 + 4) = 0;
  uint64_t v107 = 149;
  LODWORD(v108) = 0;
  uint64_t v109 = 1;
  *(void *)&long long v110 = &v104;
  *((void *)&v110 + 1) = 2;
  long long v111 = &v103;
  if (!sub_1CC047264((uint64_t)&v107, (uint64_t)v11)) {
    goto LABEL_129;
  }
  int v47 = *((unsigned __int8 *)v8 + 16);
  if (v47 == 5)
  {
    if (*((_WORD *)v8 + 9) != 26) {
      goto LABEL_129;
    }
    unint64_t v49 = (void *)((char *)v8 - 32 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF));
    if (v104 != *v49) {
      goto LABEL_129;
    }
    uint64_t v48 = v49[4];
  }
  else
  {
    if (v47 != 54 || v104 != *((void *)v8 - 8)) {
      goto LABEL_129;
    }
    uint64_t v48 = *((void *)v8 - 4);
  }
  if (v103 == v48) {
    return v11;
  }
LABEL_129:
  LODWORD(v112) = 149;
  *(void *)((char *)&v112 + 4) = 0;
  uint64_t v107 = 149;
  LODWORD(v108) = 0;
  uint64_t v109 = 1;
  *(void *)&long long v110 = &v104;
  *((void *)&v110 + 1) = 2;
  long long v111 = &v103;
  if (sub_1CC047264((uint64_t)&v107, (uint64_t)v8))
  {
    int v50 = *((unsigned __int8 *)v11 + 16);
    if (v50 == 5)
    {
      if (*((_WORD *)v11 + 9) == 26)
      {
        int v52 = (void *)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
        if (v104 == *v52)
        {
          uint64_t v51 = v52[4];
LABEL_137:
          if (v103 == v51) {
            return v8;
          }
        }
      }
    }
    else if (v50 == 54 && v104 == *((void *)v11 - 8))
    {
      uint64_t v51 = *((void *)v11 - 4);
      goto LABEL_137;
    }
  }
  uint64_t result = sub_1CC042C30(a3, (uint64_t)v11, (uint64_t)v8, 0);
  if (!result)
  {
    if (llvm::isCheckForZeroAndMulWithOverflow(v11, v8, 0, &v107, v53)) {
      return v8;
    }
    if (llvm::isCheckForZeroAndMulWithOverflow(v8, v11, 0, &v107, v54)) {
      return v11;
    }
    uint64_t result = (llvm::SmallPtrSetImplBase *)sub_1CC03F1D8(29, v11, v8);
    if (!result)
    {
      uint64_t result = sub_1CC03FBD8(29, v11, v8, 0x1Cu, a3, a4);
      if (!result)
      {
        int v55 = *((unsigned __int8 *)v11 + 16);
        if (v55 != 85 && *((unsigned char *)v8 + 16) != 85)
        {
LABEL_153:
          int64_t v105 = 0;
          char v100 = 0;
          int v101 = 0;
          int v99 = 0;
          uint64_t v107 = (uint64_t)&v105;
          unsigned int v108 = &v100;
          uint64_t v109 = 0;
          if (v55 == 5)
          {
            if (*((_WORD *)v11 + 9) != 28) {
              goto LABEL_240;
            }
            int v57 = (llvm::Constant **)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
            if (!*v57) {
              goto LABEL_240;
            }
            int64_t v105 = *v57;
            if ((sub_1CBF5295C((uint64_t)&v108, v57[4]) & 1) == 0) {
              goto LABEL_240;
            }
          }
          else
          {
            if (v55 != 56) {
              goto LABEL_240;
            }
            if (!*((void *)v11 - 8)) {
              goto LABEL_240;
            }
            int64_t v105 = (llvm::SmallPtrSetImplBase *)*((void *)v11 - 8);
            if (!sub_1CBF528D8((uint64_t)&v108, *((unsigned __int8 **)v11 - 4))) {
              goto LABEL_240;
            }
          }
          *(void *)&long long v112 = &v101;
          *((void *)&v112 + 1) = &v99;
          v113[0] = 0;
          int v58 = *((unsigned __int8 *)v8 + 16);
          if (v58 == 5)
          {
            if (*((_WORD *)v8 + 9) != 28) {
              goto LABEL_240;
            }
            unint64_t v63 = (llvm::Constant **)((char *)v8 - 32 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF));
            if (!*v63) {
              goto LABEL_240;
            }
            int v101 = *v63;
            if ((sub_1CBF5295C((uint64_t)&v112 + 8, v63[4]) & 1) == 0) {
              goto LABEL_240;
            }
          }
          else
          {
            if (v58 != 56) {
              goto LABEL_240;
            }
            if (!*((void *)v8 - 8)) {
              goto LABEL_240;
            }
            int v101 = (llvm *)*((void *)v8 - 8);
            if (!sub_1CBF528D8((uint64_t)&v112 + 8, *((unsigned __int8 **)v8 - 4))) {
              goto LABEL_240;
            }
          }
          unsigned int v64 = *((_DWORD *)v99 + 2);
          if (v64 > 0x40) {
            operator new[]();
          }
          if (v64) {
            unint64_t v65 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v64;
          }
          else {
            unint64_t v65 = 0;
          }
          unint64_t v66 = (const void *)(v65 & ~*(void *)v99);
          uint64_t v67 = *((unsigned int *)v100 + 2);
          if (v67 > 0x40) {
            BOOL v68 = memcmp(*(const void **)v100, v66, ((unint64_t)(v67 + 63) >> 3) & 0x3FFFFFF8) == 0;
          }
          else {
            BOOL v68 = *(void *)v100 == (void)v66;
          }
          if (!v68) {
            goto LABEL_240;
          }
          uint64_t v70 = v99;
          uint64_t v71 = *((unsigned int *)v99 + 2);
          if (v71 > 0x40)
          {
            int v78 = llvm::APInt::countTrailingOnesSlowCase(v99);
            if (!v78) {
              goto LABEL_213;
            }
            int v89 = 0;
            int64_t v90 = (unint64_t)(v71 + 63) >> 6;
            do
            {
              BOOL v38 = v90-- < 1;
              if (v38) {
                break;
              }
              unint64_t v91 = *(void *)(*(void *)v70 + 8 * v90);
              v89 += __clz(v91);
            }
            while (!v91);
            int v92 = v71 | 0xFFFFFFC0;
            if ((v71 & 0x3F) == 0) {
              int v92 = 0;
            }
            if (v78 + v89 + v92 != v71) {
              goto LABEL_213;
            }
          }
          else if (!*(void *)v99 || ((*(void *)v99 + 1) & *(void *)v99) != 0)
          {
            goto LABEL_213;
          }
          int v72 = *((unsigned __int8 *)v105 + 16);
          if (v72 == 5)
          {
            if (*((_WORD *)v105 + 9) != 13) {
              goto LABEL_213;
            }
            uint64_t v76 = (llvm **)((char *)v105 - 32 * (*((_DWORD *)v105 + 5) & 0x7FFFFFF));
            unint64_t v74 = v76[4];
            if (v101 != *v76 || !v74)
            {
              BOOL v77 = *v76 && v101 == v74;
              unint64_t v74 = *v76;
              if (!v77) {
                goto LABEL_213;
              }
            }
          }
          else
          {
            if (v72 != 41) {
              goto LABEL_213;
            }
            int v73 = (llvm *)*((void *)v105 - 8);
            unint64_t v74 = (llvm *)*((void *)v105 - 4);
            if (v101 != v73 || !v74)
            {
              BOOL v75 = v73 && v101 == v74;
              unint64_t v74 = (llvm *)*((void *)v105 - 8);
              if (!v75) {
                goto LABEL_213;
              }
            }
          }
          if (llvm::MaskedValueIsZero(v74, v70, *(const llvm::APInt **)a3, 0, *(const llvm::DataLayout **)(a3 + 24), *(llvm::AssumptionCache **)(a3 + 32), *(const llvm::Instruction **)(a3 + 16), (const llvm::DominatorTree *)1, 1))
          {
            return v105;
          }
LABEL_213:
          uint64_t v79 = v100;
          uint64_t v80 = *((unsigned int *)v100 + 2);
          if (v80 > 0x40)
          {
            int v88 = llvm::APInt::countTrailingOnesSlowCase(v100);
            if (!v88) {
              goto LABEL_240;
            }
            int v93 = 0;
            int64_t v94 = (unint64_t)(v80 + 63) >> 6;
            do
            {
              BOOL v38 = v94-- < 1;
              if (v38) {
                break;
              }
              unint64_t v95 = *(void *)(*(void *)v79 + 8 * v94);
              v93 += __clz(v95);
            }
            while (!v95);
            int v96 = v80 | 0xFFFFFFC0;
            if ((v80 & 0x3F) == 0) {
              int v96 = 0;
            }
            if (v88 + v93 + v96 != v80) {
              goto LABEL_240;
            }
          }
          else
          {
            if (*(void *)v100) {
              BOOL v81 = ((*(void *)v100 + 1) & *(void *)v100) == 0;
            }
            else {
              BOOL v81 = 0;
            }
            if (!v81)
            {
LABEL_240:
              if (*((unsigned char *)v11 + 16) != 83 && *((unsigned char *)v8 + 16) != 83) {
                return 0;
              }
              uint64_t result = (llvm::SmallPtrSetImplBase *)sub_1CC040084(29, v11, v8, a3, a4);
              if (!result) {
                return 0;
              }
              return result;
            }
          }
          int v82 = *((unsigned __int8 *)v101 + 16);
          if (v82 == 5)
          {
            if (*((_WORD *)v101 + 9) != 13) {
              goto LABEL_240;
            }
            int64_t v86 = (llvm::SmallPtrSetImplBase **)((char *)v101 - 32 * (*((_DWORD *)v101 + 5) & 0x7FFFFFF));
            unint64_t v84 = v86[4];
            if (v105 != *v86 || !v84)
            {
              BOOL v87 = *v86 && v105 == v84;
              unint64_t v84 = *v86;
              if (!v87) {
                goto LABEL_240;
              }
            }
          }
          else
          {
            if (v82 != 41) {
              goto LABEL_240;
            }
            int v83 = (llvm::SmallPtrSetImplBase *)*((void *)v101 - 8);
            unint64_t v84 = (llvm::SmallPtrSetImplBase *)*((void *)v101 - 4);
            if (v105 != v83 || !v84)
            {
              BOOL v85 = v83 && v105 == v84;
              unint64_t v84 = (llvm::SmallPtrSetImplBase *)*((void *)v101 - 8);
              if (!v85) {
                goto LABEL_240;
              }
            }
          }
          if (llvm::MaskedValueIsZero(v84, v79, *(const llvm::APInt **)a3, 0, *(const llvm::DataLayout **)(a3 + 24), *(llvm::AssumptionCache **)(a3 + 32), *(const llvm::Instruction **)(a3 + 16), (const llvm::DominatorTree *)1, v98))
          {
            return v101;
          }
          goto LABEL_240;
        }
        int v56 = *(_DWORD *)(*(void *)v11 + 8);
        if ((v56 & 0xFE) == 0x12) {
          int v56 = *(_DWORD *)(**(void **)(*(void *)v11 + 16) + 8);
        }
        if (v56 == 269)
        {
          uint64_t v107 = (uint64_t)v11;
          if (sub_1CC047354(&v107, (uint64_t)v8)) {
            return v8;
          }
          uint64_t v107 = (uint64_t)v8;
          if (sub_1CC047354(&v107, (uint64_t)v11)) {
            return v11;
          }
        }
        uint64_t result = sub_1CC03FC6C(29, v11, v8, a3, a4);
        if (!result)
        {
          int v55 = *((unsigned __int8 *)v11 + 16);
          goto LABEL_153;
        }
      }
    }
  }
  return result;
}

llvm::Constant *llvm::SimplifyXorInst(llvm *a1, llvm::Constant *a2, uint64_t a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1CC02EA0C(a1, a2, a3, 3, a5, a6);
}

llvm::Constant *sub_1CC02EA0C(llvm *a1, llvm::Constant *a2, uint64_t a3, int a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  char v8 = a2;
  v63[8] = *MEMORY[0x1E4F143B8];
  if (a1 && *((unsigned __int8 *)a1 + 16) <= 0x14u)
  {
    if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
    {
      uint64_t result = llvm::ConstantFoldBinaryOpOperands((llvm *)0x1E, a1, a2, *(llvm::Constant **)a3, a5, a6);
      int v11 = a1;
      if (result) {
        return result;
      }
    }
    else
    {
      int v11 = a2;
      char v8 = a1;
    }
  }
  else
  {
    int v11 = a1;
  }
  unsigned int v12 = *((unsigned __int8 *)v8 + 16);
  if (v12 == 12) {
    return v8;
  }
  if (*(unsigned char *)(a3 + 41))
  {
    unsigned int v13 = (v12 - 11);
    if (v13 < 2) {
      return v8;
    }
    if (v13 >= 0xFD)
    {
      int v55 = (void **)v59;
      int v56 = (llvm::Constant **)v59;
      uint64_t v57 = 8;
      int v58 = 0;
      unint64_t v61 = v63;
      uint64_t v62 = 0x800000000;
      v54[0] = (llvm::SmallPtrSetImplBase *)&v55;
      v54[1] = (llvm::SmallPtrSetImplBase *)&v61;
      BOOL v47 = 0;
      if (sub_1CC04C108(v54, (uint64_t)v8))
      {
        do
        {
          BOOL v47 = v62 == 0;
          if (!v62) {
            break;
          }
          uint64_t v53 = *((void *)v61 + v62 - 1);
          LODWORD(v62) = v62 - 1;
        }
        while ((sub_1CC04C108(v54, v53) & 1) != 0);
      }
      if (v61 != v63) {
        free(v61);
      }
      if (v56 == (llvm::Constant **)v55)
      {
        if (v47) {
          return v8;
        }
      }
      else
      {
        free(v56);
        if (v47) {
          return v8;
        }
      }
      unsigned int v12 = *((unsigned __int8 *)v8 + 16);
    }
  }
  if (v12 <= 0x14)
  {
    if (v12 == 16)
    {
      uint64_t v14 = *((unsigned int *)v8 + 8);
      if (v14 >= 0x41)
      {
        int v48 = 0;
        int64_t v49 = (unint64_t)(v14 + 63) >> 6;
        do
        {
          if (v49-- < 1) {
            break;
          }
          unint64_t v51 = *(void *)(*((void *)v8 + 3) + 8 * v49);
          v48 += __clz(v51);
        }
        while (!v51);
        int v52 = v14 | 0xFFFFFFC0;
        if ((v14 & 0x3F) == 0) {
          int v52 = 0;
        }
        if (v48 + v52 == v14) {
          return v11;
        }
      }
      else if (!*((void *)v8 + 3))
      {
        return v11;
      }
    }
    else if (v12 == 17)
    {
      if (sub_1CB844168((uint64_t)v8, 0.0)) {
        return v11;
      }
    }
    else if (v12 - 18 < 3 || v12 == 13)
    {
      return v11;
    }
    if (sub_1CC03F414((uint64_t)&v55, v8)) {
      return v11;
    }
  }
  if (v11 == v8) {
    return llvm::Constant::getNullValue(*(llvm::Constant **)v11, a2, (const llvm::APFloat *)a3);
  }
  int v55 = (void **)v8;
  int v15 = *((unsigned __int8 *)v11 + 16);
  if (v15 == 5)
  {
    if (*((_WORD *)v11 + 9) == 30)
    {
      uint64_t v19 = *((_DWORD *)v11 + 5) & 0x7FFFFFF;
      uint64_t v20 = (llvm **)((char *)v11 - 32 * v19);
      if (v8 == *v20)
      {
        if (sub_1CBF68974((uint64_t)&v56, v20[4])) {
          return (llvm::Constant *)llvm::Constant::getAllOnesValue(*(llvm::Constant **)v11, v17, v18);
        }
        uint64_t v22 = v55;
        uint64_t v21 = -(uint64_t)(*((_DWORD *)v11 + 5) & 0x7FFFFFF);
      }
      else
      {
        uint64_t v21 = -v19;
        uint64_t v22 = v8;
      }
      uint64_t v23 = (char *)v11 + 32 * v21;
      if (v22 == *((void **)v23 + 4) && (sub_1CBF68974((uint64_t)&v56, *(llvm::Constant **)v23) & 1) != 0) {
        return (llvm::Constant *)llvm::Constant::getAllOnesValue(*(llvm::Constant **)v11, v17, v18);
      }
    }
  }
  else if (v15 == 58)
  {
    uint64_t v16 = v8;
    if (v8 == *((llvm **)v11 - 8))
    {
      if (sub_1CBF687D0((uint64_t)&v56, *((llvm::Constant **)v11 - 4))) {
        return (llvm::Constant *)llvm::Constant::getAllOnesValue(*(llvm::Constant **)v11, v17, v18);
      }
      uint64_t v16 = v55;
    }
    if (v16 == *((void **)v11 - 4) && (sub_1CBF687D0((uint64_t)&v56, *((llvm::Constant **)v11 - 8)) & 1) != 0) {
      return (llvm::Constant *)llvm::Constant::getAllOnesValue(*(llvm::Constant **)v11, v17, v18);
    }
  }
  unint64_t v61 = v11;
  int v24 = *((unsigned __int8 *)v8 + 16);
  if (v24 != 5)
  {
    if (v24 != 58) {
      goto LABEL_57;
    }
    uint64_t v25 = v11;
    if (v11 == *((llvm **)v8 - 8))
    {
      if (sub_1CBF687D0((uint64_t)&v62, *((llvm::Constant **)v8 - 4))) {
        return (llvm::Constant *)llvm::Constant::getAllOnesValue(*(llvm::Constant **)v11, v17, v18);
      }
      uint64_t v25 = v61;
    }
    if (v25 != *((void **)v8 - 4) || (sub_1CBF687D0((uint64_t)&v62, *((llvm::Constant **)v8 - 8)) & 1) == 0) {
      goto LABEL_57;
    }
    return (llvm::Constant *)llvm::Constant::getAllOnesValue(*(llvm::Constant **)v11, v17, v18);
  }
  if (*((_WORD *)v8 + 9) != 30) {
    goto LABEL_57;
  }
  uint64_t v26 = *((_DWORD *)v8 + 5) & 0x7FFFFFF;
  uint64_t v27 = (llvm **)((char *)v8 - 32 * v26);
  if (v11 == *v27)
  {
    if (sub_1CBF68974((uint64_t)&v62, v27[4])) {
      return (llvm::Constant *)llvm::Constant::getAllOnesValue(*(llvm::Constant **)v11, v17, v18);
    }
    int v29 = v61;
    uint64_t v28 = -(uint64_t)(*((_DWORD *)v8 + 5) & 0x7FFFFFF);
  }
  else
  {
    uint64_t v28 = -v26;
    int v29 = v11;
  }
  uint64_t v30 = (void **)((char *)v8 + 32 * v28);
  if (v29 == v30[4] && (sub_1CBF68974((uint64_t)&v62, (llvm::Constant *)*v30) & 1) != 0) {
    return (llvm::Constant *)llvm::Constant::getAllOnesValue(*(llvm::Constant **)v11, v17, v18);
  }
LABEL_57:
  unint64_t v61 = 0;
  v54[0] = 0;
  int v55 = &v61;
  uint64_t v57 = (uint64_t)v54;
  if (!sub_1CC046BB0(&v55, 28, (uint64_t)v11)) {
    goto LABEL_67;
  }
  uint64_t result = (llvm::Constant *)v61;
  int v31 = *((unsigned __int8 *)v8 + 16);
  if (v31 == 5)
  {
    if (*((_WORD *)v8 + 9) != 29) {
      goto LABEL_67;
    }
    int v34 = (char *)v8 - 32 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF);
    char v32 = *(llvm::SmallPtrSetImplBase **)v34;
    uint64_t v33 = (llvm::SmallPtrSetImplBase *)*((void *)v34 + 4);
  }
  else
  {
    if (v31 != 57) {
      goto LABEL_67;
    }
    char v32 = (llvm::SmallPtrSetImplBase *)*((void *)v8 - 8);
    uint64_t v33 = (llvm::SmallPtrSetImplBase *)*((void *)v8 - 4);
  }
  if ((v61 != v32 || v54[0] != v33) && (v61 != v33 || v54[0] != v32))
  {
LABEL_67:
    int64_t v60 = 0;
    int v55 = &v61;
    int v56 = &v60;
    uint64_t v57 = (uint64_t)v54;
    if (sub_1CC04739C(&v55, 29, (uint64_t)v11))
    {
      int v35 = *((unsigned __int8 *)v8 + 16);
      if (v35 == 5)
      {
        if (*((_WORD *)v8 + 9) == 28)
        {
          BOOL v38 = (char *)v8 - 32 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF);
          int v36 = *(llvm::SmallPtrSetImplBase **)v38;
          int64_t v37 = (llvm::SmallPtrSetImplBase *)*((void *)v38 + 4);
LABEL_73:
          if (v61 == v36 && v54[0] == v37 || v61 == v37 && v54[0] == v36)
          {
            uint64_t result = v60;
            goto LABEL_79;
          }
        }
      }
      else if (v35 == 56)
      {
        int v36 = (llvm::SmallPtrSetImplBase *)*((void *)v8 - 8);
        int64_t v37 = (llvm::SmallPtrSetImplBase *)*((void *)v8 - 4);
        goto LABEL_73;
      }
    }
    uint64_t result = 0;
  }
LABEL_79:
  if (result) {
    return result;
  }
  unint64_t v61 = 0;
  v54[0] = 0;
  int v55 = &v61;
  uint64_t v57 = (uint64_t)v54;
  if (sub_1CC046BB0(&v55, 28, (uint64_t)v8))
  {
    uint64_t result = (llvm::Constant *)v61;
    int v39 = *((unsigned __int8 *)v11 + 16);
    if (v39 == 5)
    {
      if (*((_WORD *)v11 + 9) != 29) {
        goto LABEL_90;
      }
      uint64_t v42 = (char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF);
      int v40 = *(llvm::SmallPtrSetImplBase **)v42;
      int v41 = (llvm::SmallPtrSetImplBase *)*((void *)v42 + 4);
    }
    else
    {
      if (v39 != 57) {
        goto LABEL_90;
      }
      int v40 = (llvm::SmallPtrSetImplBase *)*((void *)v11 - 8);
      int v41 = (llvm::SmallPtrSetImplBase *)*((void *)v11 - 4);
    }
    if (v61 == v40 && v54[0] == v41 || v61 == v41 && v54[0] == v40) {
      goto LABEL_104;
    }
  }
LABEL_90:
  int64_t v60 = 0;
  int v55 = &v61;
  int v56 = &v60;
  uint64_t v57 = (uint64_t)v54;
  if (sub_1CC04739C(&v55, 29, (uint64_t)v8))
  {
    int v43 = *((unsigned __int8 *)v11 + 16);
    if (v43 == 5)
    {
      if (*((_WORD *)v11 + 9) != 28) {
        goto LABEL_103;
      }
      uint64_t v46 = (char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF);
      int v44 = *(llvm::SmallPtrSetImplBase **)v46;
      uint64_t v45 = (llvm::SmallPtrSetImplBase *)*((void *)v46 + 4);
    }
    else
    {
      if (v43 != 56) {
        goto LABEL_103;
      }
      int v44 = (llvm::SmallPtrSetImplBase *)*((void *)v11 - 8);
      uint64_t v45 = (llvm::SmallPtrSetImplBase *)*((void *)v11 - 4);
    }
    if (v61 == v44 && v54[0] == v45 || v61 == v45 && v54[0] == v44)
    {
      uint64_t result = v60;
      goto LABEL_104;
    }
  }
LABEL_103:
  uint64_t result = 0;
LABEL_104:
  if (!result)
  {
    uint64_t result = sub_1CC042A3C((uint64_t)v11, (uint64_t)v8, (const llvm::APInt *)0x1E);
    if (!result) {
      return sub_1CC03F1D8(0x1Eu, v11, v8, (const llvm::DataLayout *)a3, a4);
    }
  }
  return result;
}

llvm::UndefValue *llvm::SimplifyICmpInst(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1CC02F0F0(a1, a2, a3, a4, (llvm::SmallPtrSetImplBase *)3);
}

llvm::UndefValue *sub_1CC02F0F0(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, llvm::SmallPtrSetImplBase *a5)
{
  uint64_t v9 = (llvm::SmallPtrSetImplBase *)a3;
  uint64_t v10 = a1;
  uint64_t v561 = *MEMORY[0x1E4F143B8];
  if (a2 && a2[16] <= 0x14u)
  {
    if (a3 && a3[16] < 0x15u)
    {
      int v11 = *(llvm::DataLayout **)a4;
      uint64_t v12 = *(void *)(a4 + 8);
      return llvm::ConstantFoldCompareInstOperands(a1, (llvm::ConstantExpr *)a2, (llvm::Constant *)a3, v11, v12);
    }
    uint64_t v14 = (llvm::SmallPtrSetImplBase *)a2;
    switch((int)a1)
    {
      case 2:
        uint64_t v10 = 4;
        goto LABEL_26;
      case 3:
        uint64_t v10 = 5;
        goto LABEL_26;
      case 4:
        uint64_t v10 = 2;
        goto LABEL_26;
      case 5:
        uint64_t v10 = 3;
        goto LABEL_26;
      case 10:
        uint64_t v10 = 12;
        goto LABEL_26;
      case 11:
        uint64_t v10 = 13;
        goto LABEL_26;
      case 12:
        uint64_t v10 = 10;
        goto LABEL_26;
      case 13:
        uint64_t v10 = 11;
        goto LABEL_26;
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
LABEL_1294:
        __break(1u);
        goto LABEL_1295;
      case 34:
        uint64_t v10 = 36;
        goto LABEL_26;
      case 35:
        uint64_t v10 = 37;
        goto LABEL_26;
      case 36:
        uint64_t v10 = 34;
        goto LABEL_26;
      case 37:
        uint64_t v10 = 35;
        goto LABEL_26;
      case 38:
        uint64_t v10 = 40;
        goto LABEL_26;
      case 39:
        uint64_t v10 = 41;
        goto LABEL_26;
      case 40:
        uint64_t v10 = 38;
        goto LABEL_26;
      case 41:
        uint64_t v10 = 39;
LABEL_26:
        uint64_t v14 = (llvm::SmallPtrSetImplBase *)a2;
        break;
      default:
        break;
    }
  }
  else
  {
    uint64_t v14 = (llvm::SmallPtrSetImplBase *)a3;
    uint64_t v9 = (llvm::SmallPtrSetImplBase *)a2;
  }
  uint64_t v15 = ***(void ***)v9;
  uint64_t v16 = (llvm::UndefValue *)(v15 + 1888);
  if (*(void *)v9) {
    BOOL v17 = (*(_DWORD *)(*(void *)v9 + 8) & 0xFE) == 18;
  }
  else {
    BOOL v17 = 0;
  }
  if (v17)
  {
    uint64_t v129 = (llvm::Type *)*(unsigned int *)(*(void *)v9 + 32);
    unsigned int v130 = (uint64_t **)(v15 + 1888);
    if (*(_DWORD *)(*(void *)v9 + 8) == 19) {
      llvm::ScalableVectorType::get(v130, v129);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v130, v129);
    }
    uint64_t v16 = v131;
  }
  if (*(unsigned char *)(a4 + 41))
  {
    unsigned int v18 = (*((unsigned char *)v14 + 16) - 11);
    if (v18 < 2)
    {
      BOOL v89 = 1;
    }
    else
    {
      if (v18 < 0xFD) {
        goto LABEL_34;
      }
      unint64_t v555 = (unint64_t)&v559;
      uint64_t v556 = (uint64_t)&v559;
      unint64_t v557 = 8;
      LODWORD(v558) = 0;
      uint64_t p_s2 = (uint64_t)&__s2;
      __s1 = &__s2;
      uint64_t v552 = 0x800000000;
      v545 = (llvm::SmallPtrSetImplBase *)&v555;
      p_s1 = &__s1;
      BOOL v89 = 0;
      if (sub_1CC04C108(&v545, (uint64_t)v14))
      {
        do
        {
          BOOL v89 = v552 == 0;
          if (!v552) {
            break;
          }
          uint64_t v523 = *((void *)__s1 + v552 - 1);
          LODWORD(v552) = v552 - 1;
        }
        while ((sub_1CC04C108(&v545, v523) & 1) != 0);
      }
      if (__s1 != &__s2) {
        free(__s1);
      }
      if (v556 != v555) {
        free((void *)v556);
      }
    }
    if ((v10 & 0xFFFFFFFE) == 0x20 && v89) {
      return llvm::UndefValue::get(v16, (llvm::Type *)a2);
    }
  }
LABEL_34:
  if (v9 == v14) {
    goto LABEL_341;
  }
  if (*(unsigned char *)(a4 + 41))
  {
    unsigned int v19 = (*((unsigned char *)v14 + 16) - 11);
    if (v19 >= 2)
    {
      if (v19 < 0xFD) {
        goto LABEL_38;
      }
      unint64_t v555 = (unint64_t)&v559;
      uint64_t v556 = (uint64_t)&v559;
      unint64_t v557 = 8;
      LODWORD(v558) = 0;
      uint64_t p_s2 = (uint64_t)&__s2;
      __s1 = &__s2;
      uint64_t v552 = 0x800000000;
      v545 = (llvm::SmallPtrSetImplBase *)&v555;
      p_s1 = &__s1;
      BOOL v162 = 0;
      if (sub_1CC04C108(&v545, (uint64_t)v14))
      {
        do
        {
          BOOL v162 = v552 == 0;
          if (!v552) {
            break;
          }
          uint64_t v524 = *((void *)__s1 + v552 - 1);
          LODWORD(v552) = v552 - 1;
        }
        while ((sub_1CC04C108(&v545, v524) & 1) != 0);
      }
      if (__s1 != &__s2) {
        free(__s1);
      }
      if (v556 == v555)
      {
        if (!v162) {
          goto LABEL_38;
        }
      }
      else
      {
        free((void *)v556);
        if (!v162) {
          goto LABEL_38;
        }
      }
    }
LABEL_341:
    unint64_t v163 = v10 <= 0x29 && ((1 << v10) & 0x2A90000AA00) != 0;
    return (llvm::UndefValue *)llvm::ConstantInt::get(v16, v163, 0);
  }
LABEL_38:
  uint64_t v20 = *(uint64_t ***)v9;
  uint64_t v21 = (uint64_t **)(***(void ***)v9 + 1888);
  if (*(void *)v9 && (v20[1] & 0xFE) == 0x12)
  {
    uint64_t v132 = (llvm::Type *)*((unsigned int *)v20 + 8);
    if (*((_DWORD *)v20 + 2) == 19) {
      llvm::ScalableVectorType::get(v21, v132);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v21, v132);
    }
    uint64_t v21 = v133;
  }
  int v536 = (int)a5;
  int v22 = *(_DWORD *)(*(void *)v9 + 8);
  if ((v22 & 0xFE) == 0x12) {
    int v22 = *(_DWORD *)(**(void **)(*(void *)v9 + 16) + 8);
  }
  if (v22 != 269) {
    goto LABEL_77;
  }
  if (v14)
  {
    unsigned int v23 = *((unsigned __int8 *)v14 + 16);
    if (v23 <= 0x14)
    {
      if (v23 == 16)
      {
        uint64_t v24 = *((unsigned int *)v14 + 8);
        if (v24 < 0x41)
        {
          if (*((void *)v14 + 3)) {
            goto LABEL_48;
          }
LABEL_49:
          uint64_t p_s2 = (uint64_t)v9;
          switch((int)v10)
          {
            case ' ':
            case '%':
            case '\'':
              goto LABEL_52;
            case '!':
            case '""':
            case '(':
              return (llvm::UndefValue *)p_s2;
            case '#':
            case ')':
              goto LABEL_67;
            case '$':
            case '&':
              goto LABEL_74;
            default:
              goto LABEL_77;
          }
        }
        int v437 = 0;
        int64_t v438 = (unint64_t)(v24 + 63) >> 6;
        do
        {
          BOOL v217 = v438-- < 1;
          if (v217) {
            break;
          }
          unint64_t v439 = *(void *)(*((void *)v14 + 3) + 8 * v438);
          v437 += __clz(v439);
        }
        while (!v439);
        int v440 = v24 | 0xFFFFFFC0;
        if ((v24 & 0x3F) == 0) {
          int v440 = 0;
        }
        if (v437 + v440 == v24) {
          goto LABEL_49;
        }
      }
      else if (v23 == 17)
      {
        if (sub_1CB844168((uint64_t)v14, 0.0)) {
          goto LABEL_49;
        }
      }
      else if (v23 - 18 < 3 || v23 == 13)
      {
        goto LABEL_49;
      }
LABEL_48:
      if (sub_1CC03F414((uint64_t)&v555, v14)) {
        goto LABEL_49;
      }
    }
  }
  if (sub_1CBF5250C((uint64_t)&v555, v14))
  {
    uint64_t p_s2 = (uint64_t)v9;
    switch((int)v10)
    {
      case ' ':
      case '#':
      case ')':
        return (llvm::UndefValue *)p_s2;
      case '!':
      case '$':
      case '&':
LABEL_52:
        __s1 = 0;
        unint64_t v555 = (unint64_t)&__s1;
        if (!sub_1CBF686A0((void **)&v555, 30, (uint64_t)v9)) {
          break;
        }
        uint64_t p_s2 = (uint64_t)__s1;
        if (!__s1) {
          break;
        }
        return (llvm::UndefValue *)p_s2;
      case '""':
      case '(':
LABEL_74:
        uint64_t v37 = **v21;
        uint64_t p_s2 = *(void *)(v37 + 1568);
        if (!p_s2)
        {
          unint64_t v166 = *(llvm::ConstantInt **)(v37 + 1888);
          unsigned int v167 = *(_DWORD *)(v37 + 1896);
          LODWORD(v556) = v167 >> 8;
          if (v167 >> 8 > 0x40) {
            operator new[]();
          }
          unint64_t v555 = 0;
          uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v166, (llvm::LLVMContext *)&v555, (const llvm::APInt *)a3);
          if (v556 >= 0x41 && v555) {
            MEMORY[0x1D25D9CB0](v555, 0x1000C8000313F17);
          }
          *(void *)(v37 + 1568) = p_s2;
        }
        goto LABEL_75;
      case '%':
      case '\'':
        goto LABEL_67;
      default:
        goto LABEL_77;
    }
  }
  if (v10 == 39 || v10 == 37)
  {
    LOBYTE(isImpliedCondition) = 0;
    if (v14)
    {
      int v26 = 0;
      if (*((unsigned char *)v14 + 16) != 81) {
        goto LABEL_64;
      }
      uint64_t v27 = *(const llvm::DataLayout **)a4;
      uint64_t v28 = *((_WORD *)v14 + 9) & 0x3F;
      uint64_t v29 = *((void *)v14 - 8);
      uint64_t v30 = *((void *)v14 - 4);
      int v31 = (uint64_t *)v9;
      goto LABEL_63;
    }
  }
  else
  {
    if (v10 != 35) {
      goto LABEL_77;
    }
    LOBYTE(isImpliedCondition) = 0;
    if (v9)
    {
      int v26 = 0;
      if (*((unsigned char *)v9 + 16) != 81) {
        goto LABEL_64;
      }
      uint64_t v27 = *(const llvm::DataLayout **)a4;
      uint64_t v28 = *((_WORD *)v9 + 9) & 0x3F;
      uint64_t v29 = *((void *)v9 - 8);
      uint64_t v30 = *((void *)v9 - 4);
      int v31 = (uint64_t *)v14;
LABEL_63:
      __int16 isImpliedCondition = llvm::isImpliedCondition(v31, v28, v29, v30, v27, 1, 0);
      int v26 = HIBYTE(isImpliedCondition);
      goto LABEL_64;
    }
  }
  int v26 = 0;
LABEL_64:
  unsigned int v32 = isImpliedCondition | (v26 << 8);
  if (v32 <= 0x100) {
    LOBYTE(v32) = 0;
  }
  if ((_BYTE)v32)
  {
LABEL_67:
    uint64_t v33 = **v21;
    uint64_t p_s2 = *(void *)(v33 + 1560);
    if (!p_s2)
    {
      int v34 = *(llvm::ConstantInt **)(v33 + 1888);
      unsigned int v35 = *(_DWORD *)(v33 + 1896);
      LODWORD(v556) = v35 >> 8;
      if (v35 >> 8 > 0x40) {
        operator new[]();
      }
      if (v35 <= 0xFF) {
        char v36 = 0;
      }
      else {
        char v36 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v35) + 63);
      }
      unint64_t v555 = v36 & 1;
      uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v34, (llvm::LLVMContext *)&v555, (const llvm::APInt *)a3);
      if (v556 >= 0x41 && v555) {
        MEMORY[0x1D25D9CB0](v555, 0x1000C8000313F17);
      }
      *(void *)(v33 + 1560) = p_s2;
    }
LABEL_75:
    if ((v21[1] & 0xFE) == 0x12)
    {
      uint64_t p_s2 = (uint64_t)llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v21 + 8) | ((unint64_t)(*((_DWORD *)v21 + 2) == 19) << 32)), p_s2);
      if (p_s2) {
        return (llvm::UndefValue *)p_s2;
      }
    }
    else if (p_s2)
    {
      return (llvm::UndefValue *)p_s2;
    }
  }
LABEL_77:
  if (!v14) {
    goto LABEL_174;
  }
  unsigned int v38 = *((unsigned __int8 *)v14 + 16);
  if (v38 > 0x14) {
    goto LABEL_174;
  }
  if (v38 == 16)
  {
    uint64_t v39 = *((unsigned int *)v14 + 8);
    if (v39 < 0x41)
    {
      if (*((void *)v14 + 3)) {
        goto LABEL_82;
      }
LABEL_83:
      int v40 = *(uint64_t ***)v9;
      int v41 = (uint64_t **)(***(void ***)v9 + 1888);
      if (*(void *)v9 && (v40[1] & 0xFE) == 0x12)
      {
        uint64_t v168 = (llvm::Type *)*((unsigned int *)v40 + 8);
        if (*((_DWORD *)v40 + 2) == 19) {
          llvm::ScalableVectorType::get(v41, v168);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v41, v168);
        }
        int v41 = v169;
      }
      switch((int)v10)
      {
        case '!':
        case '""':
          uint64_t v49 = *(void *)(a4 + 24);
          int v50 = *(llvm::SmallPtrSetImplBase **)(a4 + 32);
          uint64_t v51 = *(void *)(a4 + 16);
          char v52 = *(unsigned char *)(a4 + 40);
          if (!v50 || !*((void *)v50 + 5))
          {
            if (*((unsigned __int8 *)v9 + 16) < 0x1Cu || (int v50 = v9, !*((void *)v9 + 5))) {
              int v50 = 0;
            }
          }
          unint64_t v555 = *(void *)a4;
          uint64_t v556 = v49;
          unint64_t v557 = (unint64_t)v50;
          uint64_t v558 = v51;
          uint64_t v559 = 0;
          char v560 = v52;
          if (sub_1CC1620B8((uint64_t)v9, 0, (uint64_t)&v555)) {
            goto LABEL_100;
          }
          goto LABEL_174;
        case '#':
LABEL_100:
          uint64_t v53 = **v41;
          uint64_t p_s2 = *(void *)(v53 + 1560);
          if (!p_s2)
          {
            char v178 = *(llvm::ConstantInt **)(v53 + 1888);
            unsigned int v179 = *(_DWORD *)(v53 + 1896);
            LODWORD(v556) = v179 >> 8;
            if (v179 >> 8 > 0x40) {
              operator new[]();
            }
            if (v179 <= 0xFF) {
              char v180 = 0;
            }
            else {
              char v180 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v179) + 63);
            }
            unint64_t v555 = v180 & 1;
            uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v178, (llvm::LLVMContext *)&v555, (const llvm::APInt *)a3);
            if (v556 >= 0x41 && v555) {
              MEMORY[0x1D25D9CB0](v555, 0x1000C8000313F17);
            }
            *(void *)(v53 + 1560) = p_s2;
          }
          goto LABEL_101;
        case '$':
          goto LABEL_89;
        case '&':
          uint64_t v71 = *(void *)(a4 + 24);
          int v72 = *(llvm::SmallPtrSetImplBase **)(a4 + 32);
          uint64_t v73 = *(void *)(a4 + 16);
          if (!v72 || !*((void *)v72 + 5))
          {
            if (*((unsigned __int8 *)v9 + 16) < 0x1Cu || (int v72 = v9, !*((void *)v9 + 5))) {
              int v72 = 0;
            }
          }
          unint64_t v555 = *(void *)a4;
          uint64_t v556 = v71;
          unint64_t v557 = (unint64_t)v72;
          uint64_t v558 = v73;
          uint64_t v559 = 0;
          char v560 = 1;
          sub_1CC16089C((uint64_t *)v9, 0, (const llvm::DataLayout **)&v555, (uint64_t)&__s1);
          unint64_t v74 = &__s2;
          unsigned int v75 = v554 - 1;
          if (v554 >= 0x41) {
            unint64_t v74 = (void **)((char *)__s2 + 8 * (v75 >> 6));
          }
          if (((unint64_t)*v74 >> v75)) {
            goto LABEL_166;
          }
          if (v552 >= 0x41) {
            uint64_t v76 = (void **)((char *)__s1 + 8 * ((v552 - 1) >> 6));
          }
          else {
            uint64_t v76 = &__s1;
          }
          if ((((unint64_t)*v76 >> (v552 - 1)) & 1) == 0) {
            goto LABEL_238;
          }
          uint64_t v77 = *(void *)(a4 + 24);
          int v78 = *(llvm::SmallPtrSetImplBase **)(a4 + 32);
          uint64_t v79 = *(void *)(a4 + 16);
          if (!v78 || !*((void *)v78 + 5))
          {
            if (*((unsigned __int8 *)v9 + 16) < 0x1Cu || (int v78 = v9, !*((void *)v9 + 5))) {
              int v78 = 0;
            }
          }
          unint64_t v555 = *(void *)a4;
          uint64_t v556 = v77;
          unint64_t v557 = (unint64_t)v78;
          uint64_t v558 = v79;
          uint64_t v559 = 0;
          char v64 = 1;
          char v560 = 1;
          if (!sub_1CC1620B8((uint64_t)v9, 0, (uint64_t)&v555)) {
            goto LABEL_170;
          }
LABEL_148:
          uint64_t v85 = **v41;
          uint64_t p_s2 = *(void *)(v85 + 1560);
          if (!p_s2)
          {
            int64_t v86 = *(llvm::ConstantInt **)(v85 + 1888);
            unsigned int v87 = *(_DWORD *)(v85 + 1896);
            LODWORD(v556) = v87 >> 8;
            if (v87 >> 8 > 0x40) {
              operator new[]();
            }
            if (v87 <= 0xFF) {
              char v88 = 0;
            }
            else {
              char v88 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v87) + 63);
            }
            unint64_t v555 = v88 & 1;
            uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v86, (llvm::LLVMContext *)&v555, v57);
            if (v556 >= 0x41 && v555) {
              MEMORY[0x1D25D9CB0](v555, 0x1000C8000313F17);
            }
            *(void *)(v85 + 1560) = p_s2;
          }
          goto LABEL_167;
        case '\'':
          uint64_t v65 = *(void *)(a4 + 24);
          unint64_t v66 = *(llvm::SmallPtrSetImplBase **)(a4 + 32);
          uint64_t v67 = *(void *)(a4 + 16);
          if (!v66 || !*((void *)v66 + 5))
          {
            if (*((unsigned __int8 *)v9 + 16) < 0x1Cu || (unint64_t v66 = v9, !*((void *)v9 + 5))) {
              unint64_t v66 = 0;
            }
          }
          unint64_t v555 = *(void *)a4;
          uint64_t v556 = v65;
          unint64_t v557 = (unint64_t)v66;
          uint64_t v558 = v67;
          uint64_t v559 = 0;
          char v560 = 1;
          sub_1CC16089C((uint64_t *)v9, 0, (const llvm::DataLayout **)&v555, (uint64_t)&__s1);
          BOOL v68 = &__s2;
          unsigned int v69 = v554 - 1;
          if (v554 >= 0x41) {
            BOOL v68 = (void **)((char *)__s2 + 8 * (v69 >> 6));
          }
          if (((unint64_t)*v68 >> v69)) {
            goto LABEL_166;
          }
          if (v552 >= 0x41) {
            uint64_t v70 = (void **)((char *)__s1 + 8 * ((v552 - 1) >> 6));
          }
          else {
            uint64_t v70 = &__s1;
          }
          if ((((unint64_t)*v70 >> (v552 - 1)) & 1) == 0) {
            goto LABEL_238;
          }
          goto LABEL_148;
        case '(':
          uint64_t v80 = *(void *)(a4 + 24);
          BOOL v81 = *(llvm::SmallPtrSetImplBase **)(a4 + 32);
          uint64_t v82 = *(void *)(a4 + 16);
          if (!v81 || !*((void *)v81 + 5))
          {
            if (*((unsigned __int8 *)v9 + 16) < 0x1Cu || (BOOL v81 = v9, !*((void *)v9 + 5))) {
              BOOL v81 = 0;
            }
          }
          unint64_t v555 = *(void *)a4;
          uint64_t v556 = v80;
          unint64_t v557 = (unint64_t)v81;
          uint64_t v558 = v82;
          uint64_t v559 = 0;
          char v560 = 1;
          sub_1CC16089C((uint64_t *)v9, 0, (const llvm::DataLayout **)&v555, (uint64_t)&__s1);
          int v83 = &__s2;
          unsigned int v84 = v554 - 1;
          if (v554 >= 0x41) {
            int v83 = (void **)((char *)__s2 + 8 * (v84 >> 6));
          }
          if (((unint64_t)*v83 >> v84)) {
            goto LABEL_148;
          }
          if (v552 >= 0x41) {
            unint64_t v91 = (void **)((char *)__s1 + 8 * ((v552 - 1) >> 6));
          }
          else {
            unint64_t v91 = &__s1;
          }
          if (((unint64_t)*v91 >> (v552 - 1))) {
            goto LABEL_166;
          }
          goto LABEL_238;
        case ')':
          uint64_t v54 = *(void *)(a4 + 24);
          int v55 = *(llvm::SmallPtrSetImplBase **)(a4 + 32);
          uint64_t v56 = *(void *)(a4 + 16);
          if (!v55 || !*((void *)v55 + 5))
          {
            if (*((unsigned __int8 *)v9 + 16) < 0x1Cu || (int v55 = v9, !*((void *)v9 + 5))) {
              int v55 = 0;
            }
          }
          unint64_t v555 = *(void *)a4;
          uint64_t v556 = v54;
          unint64_t v557 = (unint64_t)v55;
          uint64_t v558 = v56;
          uint64_t v559 = 0;
          char v560 = 1;
          sub_1CC16089C((uint64_t *)v9, 0, (const llvm::DataLayout **)&v555, (uint64_t)&__s1);
          int v58 = &__s2;
          unsigned int v59 = v554 - 1;
          if (v554 >= 0x41) {
            int v58 = (void **)((char *)__s2 + 8 * (v59 >> 6));
          }
          if (((unint64_t)*v58 >> v59)) {
            goto LABEL_148;
          }
          if (v552 >= 0x41) {
            int64_t v60 = (void **)((char *)__s1 + 8 * ((v552 - 1) >> 6));
          }
          else {
            int64_t v60 = &__s1;
          }
          if (((unint64_t)*v60 >> (v552 - 1)))
          {
            uint64_t v61 = *(void *)(a4 + 24);
            uint64_t v62 = *(llvm::SmallPtrSetImplBase **)(a4 + 32);
            uint64_t v63 = *(void *)(a4 + 16);
            if (!v62 || !*((void *)v62 + 5))
            {
              if (*((unsigned __int8 *)v9 + 16) < 0x1Cu || (uint64_t v62 = v9, !*((void *)v9 + 5))) {
                uint64_t v62 = 0;
              }
            }
            unint64_t v555 = *(void *)a4;
            uint64_t v556 = v61;
            unint64_t v557 = (unint64_t)v62;
            uint64_t v558 = v63;
            uint64_t v559 = 0;
            char v64 = 1;
            char v560 = 1;
            if (sub_1CC1620B8((uint64_t)v9, 0, (uint64_t)&v555))
            {
LABEL_166:
              uint64_t v92 = **v41;
              uint64_t p_s2 = *(void *)(v92 + 1568);
              if (!p_s2)
              {
                uint64_t v176 = *(llvm::ConstantInt **)(v92 + 1888);
                unsigned int v177 = *(_DWORD *)(v92 + 1896);
                LODWORD(v556) = v177 >> 8;
                if (v177 >> 8 > 0x40) {
                  operator new[]();
                }
                unint64_t v555 = 0;
                uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v176, (llvm::LLVMContext *)&v555, v57);
                if (v556 >= 0x41 && v555) {
                  MEMORY[0x1D25D9CB0](v555, 0x1000C8000313F17);
                }
                *(void *)(v92 + 1568) = p_s2;
              }
LABEL_167:
              if ((v41[1] & 0xFE) == 0x12) {
                uint64_t p_s2 = (uint64_t)llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v41 + 8) | ((unint64_t)(*((_DWORD *)v41 + 2) == 19) << 32)), p_s2);
              }
              char v64 = 0;
            }
          }
          else
          {
LABEL_238:
            char v64 = 1;
          }
LABEL_170:
          if (v554 >= 0x41 && __s2) {
            MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
          }
          if (v552 >= 0x41 && __s1) {
            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
          if (v64) {
            goto LABEL_174;
          }
LABEL_173:
          if (!p_s2) {
            goto LABEL_174;
          }
          return (llvm::UndefValue *)p_s2;
        default:
          uint64_t v42 = *(void *)(a4 + 24);
          int v43 = *(llvm::SmallPtrSetImplBase **)(a4 + 32);
          uint64_t v44 = *(void *)(a4 + 16);
          char v45 = *(unsigned char *)(a4 + 40);
          if (!v43 || !*((void *)v43 + 5))
          {
            if (*((unsigned __int8 *)v9 + 16) < 0x1Cu || (int v43 = v9, !*((void *)v9 + 5))) {
              int v43 = 0;
            }
          }
          unint64_t v555 = *(void *)a4;
          uint64_t v556 = v42;
          unint64_t v557 = (unint64_t)v43;
          uint64_t v558 = v44;
          uint64_t v559 = 0;
          char v560 = v45;
          if (!sub_1CC1620B8((uint64_t)v9, 0, (uint64_t)&v555)) {
            goto LABEL_174;
          }
LABEL_89:
          uint64_t v46 = **v41;
          uint64_t p_s2 = *(void *)(v46 + 1568);
          if (!p_s2)
          {
            BOOL v47 = *(llvm::ConstantInt **)(v46 + 1888);
            unsigned int v48 = *(_DWORD *)(v46 + 1896);
            LODWORD(v556) = v48 >> 8;
            if (v48 >> 8 > 0x40) {
              operator new[]();
            }
            unint64_t v555 = 0;
            uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v47, (llvm::LLVMContext *)&v555, (const llvm::APInt *)a3);
            if (v556 >= 0x41 && v555) {
              MEMORY[0x1D25D9CB0](v555, 0x1000C8000313F17);
            }
            *(void *)(v46 + 1568) = p_s2;
          }
LABEL_101:
          if ((v41[1] & 0xFE) == 0x12) {
            uint64_t p_s2 = (uint64_t)llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v41 + 8) | ((unint64_t)(*((_DWORD *)v41 + 2) == 19) << 32)), p_s2);
          }
          goto LABEL_173;
      }
    }
    int v426 = 0;
    int64_t v427 = (unint64_t)(v39 + 63) >> 6;
    do
    {
      BOOL v217 = v427-- < 1;
      if (v217) {
        break;
      }
      unint64_t v428 = *(void *)(*((void *)v14 + 3) + 8 * v427);
      v426 += __clz(v428);
    }
    while (!v428);
    int v429 = v39 | 0xFFFFFFC0;
    if ((v39 & 0x3F) == 0) {
      int v429 = 0;
    }
    if (v426 + v429 == v39) {
      goto LABEL_83;
    }
  }
  else if (v38 == 17)
  {
    if (sub_1CB844168((uint64_t)v14, 0.0)) {
      goto LABEL_83;
    }
  }
  else if (v38 - 18 < 3 || v38 == 13)
  {
    goto LABEL_83;
  }
LABEL_82:
  if (sub_1CC03F414((uint64_t)&v555, v14)) {
    goto LABEL_83;
  }
LABEL_174:
  int v93 = *(uint64_t ***)v14;
  int64_t v94 = (uint64_t **)(***(void ***)v14 + 1888);
  if (*(void *)v14 && (v93[1] & 0xFE) == 0x12)
  {
    BOOL v134 = (llvm::Type *)*((unsigned int *)v93 + 8);
    if (*((_DWORD *)v93 + 2) == 19) {
      llvm::ScalableVectorType::get(v94, v134);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v94, v134);
    }
    int64_t v94 = v135;
  }
  v550 = 0;
  unint64_t v555 = (unint64_t)&v550;
  unsigned int v95 = *((unsigned __int8 *)v9 + 16);
  if (v95 <= 0x1B && v95 != 5) {
    goto LABEL_181;
  }
  int v96 = v95 <= 0x1B ? *((unsigned __int16 *)v9 + 9) : v95 - 28;
  if (v96 != 49) {
    goto LABEL_181;
  }
  int v108 = *((_DWORD *)v9 + 5);
  uint64_t v109 = (v108 & 0x40000000) != 0 ? (uint64_t *)*((void *)v9 - 1) : (uint64_t *)((char *)v9 - 32 * (v108 & 0x7FFFFFF));
  if (!sub_1CC0488B8((void **)&v555, *v109)) {
    goto LABEL_181;
  }
  if (v10 != 40)
  {
    if (v10 == 38 && sub_1CBF687D0((uint64_t)&v555, v14))
    {
      uint64_t v128 = **v94;
      uint64_t p_s2 = *(void *)(v128 + 1560);
      if (!p_s2)
      {
        v434 = *(llvm::ConstantInt **)(v128 + 1888);
        unsigned int v435 = *(_DWORD *)(v128 + 1896);
        LODWORD(v556) = v435 >> 8;
        if (v435 >> 8 > 0x40) {
          operator new[]();
        }
        if (v435 <= 0xFF) {
          char v436 = 0;
        }
        else {
          char v436 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v435) + 63);
        }
        unint64_t v555 = v436 & 1;
        uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v434, (llvm::LLVMContext *)&v555, NullValue);
        if (v556 >= 0x41 && v555) {
          MEMORY[0x1D25D9CB0](v555, 0x1000C8000313F17);
        }
        *(void *)(v128 + 1560) = p_s2;
      }
      goto LABEL_243;
    }
    goto LABEL_181;
  }
  unsigned int v110 = *((unsigned __int8 *)v14 + 16);
  if (v110 > 0x14) {
    goto LABEL_181;
  }
  if (!v14 || v110 != 16)
  {
    if (v14 && v110 == 17)
    {
      if ((sub_1CB844168((uint64_t)v14, 0.0) & 1) == 0) {
        goto LABEL_210;
      }
    }
    else if (((1 << v110) & 0x1C2000) == 0)
    {
      goto LABEL_210;
    }
LABEL_211:
    uint64_t v112 = **v94;
    uint64_t p_s2 = *(void *)(v112 + 1568);
    if (!p_s2)
    {
      int v113 = *(llvm::ConstantInt **)(v112 + 1888);
      unsigned int v114 = *(_DWORD *)(v112 + 1896);
      LODWORD(v556) = v114 >> 8;
      if (v114 >> 8 > 0x40) {
        operator new[]();
      }
      unint64_t v555 = 0;
      uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v113, (llvm::LLVMContext *)&v555, NullValue);
      if (v556 >= 0x41 && v555) {
        MEMORY[0x1D25D9CB0](v555, 0x1000C8000313F17);
      }
      *(void *)(v112 + 1568) = p_s2;
    }
LABEL_243:
    if ((v94[1] & 0xFE) == 0x12) {
      uint64_t p_s2 = (uint64_t)llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v94 + 8) | ((unint64_t)(*((_DWORD *)v94 + 2) == 19) << 32)), p_s2);
    }
    goto LABEL_414;
  }
  uint64_t v111 = *((unsigned int *)v14 + 8);
  if (v111 >= 0x41)
  {
    int v514 = 0;
    int64_t v515 = (unint64_t)(v111 + 63) >> 6;
    do
    {
      BOOL v217 = v515-- < 1;
      if (v217) {
        break;
      }
      unint64_t v516 = *(void *)(*((void *)v14 + 3) + 8 * v515);
      v514 += __clz(v516);
    }
    while (!v516);
    int v517 = v111 | 0xFFFFFFC0;
    if ((v111 & 0x3F) == 0) {
      int v517 = 0;
    }
    if (v514 + v517 == v111) {
      goto LABEL_211;
    }
  }
  else if (!*((void *)v14 + 3))
  {
    goto LABEL_211;
  }
LABEL_210:
  if (sub_1CC03F414((uint64_t)&v555, v14)) {
    goto LABEL_211;
  }
LABEL_181:
  v549 = 0;
  unint64_t v555 = (unint64_t)&v549;
  uint64_t v556 = 1;
  uint64_t p_s2 = 0;
  if (!sub_1CBF528D8((uint64_t)&v555, (unsigned __int8 *)v14)) {
    goto LABEL_414;
  }
  llvm::ConstantRange::makeExactICmpRegion(v10, (uint64_t)v549, (uint64_t)&v555);
  int v99 = v556;
  if (v556 < 0x41)
  {
    if (v557 | v555)
    {
      if (v555 == v557 && (!v556 || v555 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v556)) {
        goto LABEL_217;
      }
LABEL_185:
      llvm::computeConstantRange(v9, (const llvm::Value *)((v10 - 38) < 4), 0, 0, 0, *(unsigned __int8 *)(a4 + 40), 0, &__s1);
      int v100 = v552;
      if (v552 > 0x40)
      {
        if (!memcmp(__s1, __s2, (((unint64_t)v552 + 63) >> 3) & 0x3FFFFFF8)
          && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__s1) == v100)
        {
          goto LABEL_226;
        }
      }
      else if (__s1 == __s2 && (!v552 || __s1 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v552)))
      {
        goto LABEL_226;
      }
      if (llvm::ConstantRange::contains((llvm::ConstantRange *)&v555, (const llvm::ConstantRange *)&__s1))
      {
        uint64_t v101 = **v94;
        uint64_t p_s2 = *(void *)(v101 + 1560);
        if (!p_s2)
        {
          char v102 = *(llvm::ConstantInt **)(v101 + 1888);
          unsigned int v103 = *(_DWORD *)(v101 + 1896);
          LODWORD(p_s1) = v103 >> 8;
          if (v103 >> 8 > 0x40) {
            operator new[]();
          }
          if (v103 <= 0xFF) {
            char v104 = 0;
          }
          else {
            char v104 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v103) + 63);
          }
          v545 = (llvm::SmallPtrSetImplBase *)(v104 & 1);
          uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v102, (llvm::LLVMContext *)&v545, NullValue);
          if (p_s1 >= 0x41 && v545) {
            MEMORY[0x1D25D9CB0](v545, 0x1000C8000313F17);
          }
          *(void *)(v101 + 1560) = p_s2;
        }
LABEL_199:
        if ((v94[1] & 0xFE) != 0x12) {
          goto LABEL_395;
        }
        Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v94 + 8) | ((unint64_t)(*((_DWORD *)v94 + 2) == 19) << 32)), p_s2);
        goto LABEL_323;
      }
      llvm::ConstantRange::inverse((uint64_t)&v555, (uint64_t)&v545);
      BOOL v105 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v545, (const llvm::ConstantRange *)&__s1);
      if (v548 >= 0x41 && v547) {
        MEMORY[0x1D25D9CB0](v547, 0x1000C8000313F17);
      }
      if (p_s1 >= 0x41 && v545) {
        MEMORY[0x1D25D9CB0](v545, 0x1000C8000313F17);
      }
      if (v105)
      {
        uint64_t v106 = **v94;
        uint64_t p_s2 = *(void *)(v106 + 1568);
        if (!p_s2)
        {
          uint64_t v174 = *(llvm::ConstantInt **)(v106 + 1888);
          unsigned int v175 = *(_DWORD *)(v106 + 1896);
          LODWORD(p_s1) = v175 >> 8;
          if (v175 >> 8 > 0x40) {
            operator new[]();
          }
          v545 = 0;
          uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v174, (llvm::LLVMContext *)&v545, NullValue);
          if (p_s1 >= 0x41 && v545) {
            MEMORY[0x1D25D9CB0](v545, 0x1000C8000313F17);
          }
          *(void *)(v106 + 1568) = p_s2;
        }
        goto LABEL_199;
      }
LABEL_226:
      v544 = 0;
      if ((v10 & 0xFFFFFFFE) != 0x20) {
        goto LABEL_394;
      }
      p_s1 = &v544;
      uint64_t v547 = 1;
      unsigned int v119 = *((unsigned __int8 *)v9 + 16);
      if (v119 < 0x1C)
      {
        if (v119 != 5)
        {
          char v120 = 0;
          v540 = &v544;
          uint64_t v541 = 1;
          goto LABEL_296;
        }
        char v120 = 0;
        unsigned int v123 = *((unsigned __int16 *)v9 + 9);
        HIDWORD(v125) = v123 - 13;
        LODWORD(v125) = v123 - 13;
        unsigned int v124 = v125 >> 1;
        if (v124 > 6 || ((1 << v124) & 0x47) == 0)
        {
LABEL_290:
          unsigned int v119 = *((unsigned __int8 *)v9 + 16);
          v540 = &v544;
          uint64_t v541 = 1;
          if (v119 >= 0x1C)
          {
            HIDWORD(v149) = v119 - 41;
            LODWORD(v149) = v119 - 41;
            unsigned int v148 = v149 >> 1;
            if (v148 > 6 || ((1 << v148) & 0x47) == 0) {
              goto LABEL_316;
            }
            unsigned int v151 = v119 - 28;
LABEL_299:
            if (v151 == 17 && (*((unsigned char *)v9 + 17) & 4) != 0)
            {
              int v154 = *((_DWORD *)v9 + 5);
              unint64_t v155 = (v154 & 0x40000000) != 0
                   ? (llvm::SmallPtrSetImplBase *)*((void *)v9 - 1)
                   : (llvm::SmallPtrSetImplBase *)((char *)v9 - 32 * (v154 & 0x7FFFFFF));
              if (sub_1CBF528D8((uint64_t)&v540, *((unsigned __int8 **)v155 + 4)))
              {
                uint64_t v97 = v544;
                uint64_t v156 = *((unsigned int *)v544 + 2);
                unsigned int v157 = v544;
                if (v156 >= 0x41)
                {
                  int v158 = 0;
                  int64_t v159 = (unint64_t)(v156 + 63) >> 6;
                  do
                  {
                    BOOL v217 = v159-- < 1;
                    if (v217) {
                      break;
                    }
                    unint64_t v160 = *(void *)(*(void *)v544 + 8 * v159);
                    v158 += __clz(v160);
                  }
                  while (!v160);
                  int v161 = v156 | 0xFFFFFFC0;
                  if ((v156 & 0x3F) == 0) {
                    int v161 = 0;
                  }
                  if ((v156 - v158 - v161) > 0x40)
                  {
LABEL_314:
                    llvm::APInt::srem(v549, v544, (uint64_t)&v537);
                    if (v538 >= 0x41)
                    {
                      int v170 = 0;
                      int64_t v171 = ((unint64_t)v538 + 63) >> 6;
                      do
                      {
                        BOOL v217 = v171-- < 1;
                        if (v217) {
                          break;
                        }
                        unint64_t v172 = *(void *)&v537[2 * v171];
                        v170 += __clz(v172);
                      }
                      while (!v172);
                      unsigned int v173 = v538 | 0xFFFFFFC0;
                      if ((v538 & 0x3F) == 0) {
                        unsigned int v173 = 0;
                      }
                      if (v538 - v170 - v173 > 0x40)
                      {
                        if (!v537)
                        {
                          if (v120) {
                            goto LABEL_288;
                          }
LABEL_322:
                          Splat = llvm::ConstantInt::get((llvm::ConstantInt *)v94, v10 == 33, 0);
LABEL_323:
                          uint64_t p_s2 = (uint64_t)Splat;
                          goto LABEL_395;
                        }
                        BOOL v147 = 1;
                      }
                      else
                      {
                        BOOL v147 = *(void *)v537 != 0;
                      }
                      MEMORY[0x1D25D9CB0](v537, 0x1000C8000313F17);
                    }
                    else
                    {
                      BOOL v147 = v537 != 0;
                    }
                    if (v120) {
                      goto LABEL_318;
                    }
                    if (!v147) {
                      goto LABEL_394;
                    }
                    goto LABEL_322;
                  }
                  unsigned int v157 = *(llvm::APInt **)v544;
                }
                if (*(void *)v157) {
                  goto LABEL_314;
                }
              }
            }
LABEL_316:
            if ((v120 & 1) == 0) {
              goto LABEL_394;
            }
            LOBYTE(v147) = 0;
            goto LABEL_318;
          }
LABEL_296:
          if (v119 != 5) {
            goto LABEL_316;
          }
          unsigned int v151 = *((unsigned __int16 *)v9 + 9);
          HIDWORD(v153) = v151 - 13;
          LODWORD(v153) = v151 - 13;
          unsigned int v152 = v153 >> 1;
          if (v152 > 6 || ((1 << v152) & 0x47) == 0) {
            goto LABEL_316;
          }
          goto LABEL_299;
        }
      }
      else
      {
        char v120 = 0;
        HIDWORD(v122) = v119 - 41;
        LODWORD(v122) = v119 - 41;
        unsigned int v121 = v122 >> 1;
        if (v121 > 6 || ((1 << v121) & 0x47) == 0) {
          goto LABEL_290;
        }
        unsigned int v123 = v119 - 28;
      }
      if (v123 == 17 && (*((unsigned char *)v9 + 17) & 2) != 0)
      {
        int v126 = *((_DWORD *)v9 + 5);
        char v127 = (v126 & 0x40000000) != 0
             ? (llvm::SmallPtrSetImplBase *)*((void *)v9 - 1)
             : (llvm::SmallPtrSetImplBase *)((char *)v9 - 32 * (v126 & 0x7FFFFFF));
        if (sub_1CBF528D8((uint64_t)&p_s1, *((unsigned __int8 **)v127 + 4)))
        {
          uint64_t v97 = v544;
          uint64_t v136 = *((unsigned int *)v544 + 2);
          int v137 = v544;
          if (v136 >= 0x41)
          {
            int v138 = 0;
            int64_t v139 = (unint64_t)(v136 + 63) >> 6;
            do
            {
              BOOL v217 = v139-- < 1;
              if (v217) {
                break;
              }
              unint64_t v140 = *(void *)(*(void *)v544 + 8 * v139);
              v138 += __clz(v140);
            }
            while (!v140);
            int v141 = v136 | 0xFFFFFFC0;
            if ((v136 & 0x3F) == 0) {
              int v141 = 0;
            }
            if ((v136 - v138 - v141) > 0x40) {
              goto LABEL_279;
            }
            int v137 = *(llvm::APInt **)v544;
          }
          if (*(void *)v137)
          {
LABEL_279:
            llvm::APInt::urem(v549, v544, (uint64_t)&v542);
            BOOL v142 = v542;
            if (v543 >= 0x41)
            {
              int v143 = 0;
              int64_t v144 = ((unint64_t)v543 + 63) >> 6;
              do
              {
                BOOL v217 = v144-- < 1;
                if (v217) {
                  break;
                }
                unint64_t v145 = v542[v144];
                v143 += __clz(v145);
              }
              while (!v145);
              unsigned int v146 = v543 | 0xFFFFFFC0;
              if ((v543 & 0x3F) == 0) {
                unsigned int v146 = 0;
              }
              if (v543 - v143 - v146 > 0x40) {
                goto LABEL_288;
              }
              BOOL v142 = (void *)*v542;
            }
            if (v142)
            {
LABEL_288:
              LOBYTE(v147) = 1;
LABEL_318:
              if (v543 >= 0x41 && v542) {
                MEMORY[0x1D25D9CB0](v542, 0x1000C8000313F17);
              }
              if (v147) {
                goto LABEL_322;
              }
LABEL_394:
              uint64_t p_s2 = 0;
LABEL_395:
              if (v554 >= 0x41 && __s2) {
                MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
              }
              if (v552 >= 0x41 && __s1) {
                MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
              }
              goto LABEL_412;
            }
            char v120 = 1;
            goto LABEL_290;
          }
        }
      }
      char v120 = 0;
      goto LABEL_290;
    }
LABEL_409:
    uint64_t v185 = **v94;
    uint64_t p_s2 = *(void *)(v185 + 1568);
    if (!p_s2)
    {
      int v241 = *(llvm::ConstantInt **)(v185 + 1888);
      unsigned int v242 = *(_DWORD *)(v185 + 1896);
      LODWORD(v552) = v242 >> 8;
      if (v242 >> 8 > 0x40) {
        operator new[]();
      }
      __s1 = 0;
      uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v241, (llvm::LLVMContext *)&__s1, NullValue);
      if (v552 >= 0x41 && __s1) {
        MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
      }
      *(void *)(v185 + 1568) = p_s2;
    }
    goto LABEL_410;
  }
  uint64_t v164 = (void *)v555;
  unsigned int v165 = (const void *)v557;
  unint64_t v533 = v556 + 63;
  if (!memcmp((const void *)v555, (const void *)v557, (v533 >> 3) & 0x3FFFFFF8))
  {
    int v181 = 0;
    uint64_t v182 = v533 >> 6;
    do
    {
      BOOL v217 = v182-- < 1;
      if (v217) {
        break;
      }
      unint64_t v183 = v164[v182];
      v181 += __clz(v183);
    }
    while (!v183);
    unsigned int v184 = v99 | 0xFFFFFFC0;
    if ((v99 & 0x3F) == 0) {
      unsigned int v184 = 0;
    }
    if (v181 + v184 == v99) {
      goto LABEL_409;
    }
  }
  if (memcmp(v164, v165, (v533 >> 3) & 0x3FFFFFF8)
    || llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v555) != v99)
  {
    goto LABEL_185;
  }
LABEL_217:
  uint64_t v115 = **v94;
  uint64_t p_s2 = *(void *)(v115 + 1560);
  if (!p_s2)
  {
    uint64_t v116 = *(llvm::ConstantInt **)(v115 + 1888);
    unsigned int v117 = *(_DWORD *)(v115 + 1896);
    LODWORD(v552) = v117 >> 8;
    if (v117 >> 8 > 0x40) {
      operator new[]();
    }
    if (v117 <= 0xFF) {
      char v118 = 0;
    }
    else {
      char v118 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v117) + 63);
    }
    __s1 = (void *)(v118 & 1);
    uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v116, (llvm::LLVMContext *)&__s1, NullValue);
    if (v552 >= 0x41 && __s1) {
      MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
    }
    *(void *)(v115 + 1560) = p_s2;
  }
LABEL_410:
  if ((v94[1] & 0xFE) == 0x12) {
    uint64_t p_s2 = (uint64_t)llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v94 + 8) | ((unint64_t)(*((_DWORD *)v94 + 2) == 19) << 32)), p_s2);
  }
LABEL_412:
  if (v558 >= 0x41 && v557) {
    MEMORY[0x1D25D9CB0](v557, 0x1000C8000313F17);
  }
  if (v556 >= 0x41 && v555) {
    MEMORY[0x1D25D9CB0](v555, 0x1000C8000313F17);
  }
LABEL_414:
  if (p_s2) {
    return (llvm::UndefValue *)p_s2;
  }
  if (*((unsigned __int8 *)v14 + 16) < 0x1Cu) {
    goto LABEL_454;
  }
  unsigned int v186 = *((unsigned __int8 *)v9 + 16);
  if (v186 < 0x1C) {
    goto LABEL_551;
  }
  if (*(unsigned char *)(a4 + 40))
  {
    if ((*((unsigned char *)v14 + 23) & 0x20) != 0)
    {
      uint64_t v187 = ***(void ***)v14;
      unint64_t v555 = (unint64_t)v14;
      int v188 = *(_DWORD *)(v187 + 2496);
      unsigned int v189 = v14 >> 4;
      if (v188)
      {
        uint64_t v190 = *(void *)(v187 + 2480);
        int v191 = v188 - 1;
        unsigned int v192 = v191 & (v189 ^ (v14 >> 9));
        size_t v193 = (llvm::SmallPtrSetImplBase **)(v190 + 40 * v192);
        uint64_t v194 = *v193;
        if (*v193 == v14)
        {
LABEL_430:
          uint64_t v199 = *((unsigned int *)v193 + 4);
          if (!v199) {
            goto LABEL_454;
          }
          uint64_t v200 = (void *)((char *)v193[1] + 8);
          uint64_t v201 = 16 * v199;
          while (*((_DWORD *)v200 - 2) != 4)
          {
            v200 += 2;
            v201 -= 16;
            if (!v201) {
              goto LABEL_454;
            }
          }
          BOOL v202 = !*v200 || *(unsigned char *)(a4 + 40) == 0;
          if (v202 || (*((unsigned char *)v9 + 23) & 0x20) == 0) {
            goto LABEL_454;
          }
          uint64_t v203 = ***(void ***)v9;
          unint64_t v555 = (unint64_t)v9;
          int v204 = *(_DWORD *)(v203 + 2496);
          uint64_t p_s2 = v9 >> 4;
          if (v204)
          {
            uint64_t v205 = *(void *)(v203 + 2480);
            int v206 = v204 - 1;
            unsigned int v207 = v206 & (p_s2 ^ (v9 >> 9));
            uint64_t v208 = (llvm::SmallPtrSetImplBase **)(v205 + 40 * v207);
            int v209 = *v208;
            if (*v208 == v9)
            {
LABEL_450:
              uint64_t v214 = *((unsigned int *)v208 + 4);
              if (!v214) {
                goto LABEL_454;
              }
              uint64_t v215 = (void *)((char *)v208[1] + 8);
              uint64_t v216 = 16 * v214;
              while (*((_DWORD *)v215 - 2) != 4)
              {
                v215 += 2;
                v216 -= 16;
                if (!v216) {
                  goto LABEL_454;
                }
              }
              if (!*v215) {
                goto LABEL_454;
              }
              uint64_t v373 = ***(void ***)v14;
              unint64_t v555 = (unint64_t)v14;
              int v374 = *(_DWORD *)(v373 + 2496);
              if (v374)
              {
                uint64_t v375 = *(void *)(v373 + 2480);
                int v376 = v374 - 1;
                unsigned int v377 = v376 & (v189 ^ (v14 >> 9));
                v378 = (llvm::SmallPtrSetImplBase **)(v375 + 40 * v377);
                v379 = *v378;
                if (*v378 == v14) {
                  goto LABEL_933;
                }
                v380 = 0;
                int v381 = 1;
                while (v379 != (llvm::SmallPtrSetImplBase *)-4096)
                {
                  if (v380) {
                    BOOL v382 = 0;
                  }
                  else {
                    BOOL v382 = v379 == (llvm::SmallPtrSetImplBase *)-8192;
                  }
                  if (v382) {
                    v380 = v378;
                  }
                  unsigned int v383 = v377 + v381++;
                  unsigned int v377 = v383 & v376;
                  v378 = (llvm::SmallPtrSetImplBase **)(v375 + 40 * v377);
                  v379 = *v378;
                  if (*v378 == v14) {
                    goto LABEL_933;
                  }
                }
                if (v380) {
                  v488 = v380;
                }
                else {
                  v488 = v378;
                }
              }
              else
              {
                v488 = 0;
              }
              v378 = (llvm::SmallPtrSetImplBase **)sub_1CC609054(v373 + 2480, (uint64_t)&v555, (uint64_t *)&v555, v488);
              unint64_t v489 = v555;
              v378[3] = 0;
              v378[4] = 0;
              size_t *v378 = (llvm::SmallPtrSetImplBase *)v489;
              v378[1] = (llvm::SmallPtrSetImplBase *)(v378 + 3);
              v378[2] = (llvm::SmallPtrSetImplBase *)0x100000000;
LABEL_933:
              v384 = v378[1];
              if (*(_DWORD *)v384 != 4)
              {
                uint64_t v385 = 16 * *((unsigned int *)v378 + 4) - 16;
                do
                {
                  int v386 = *((_DWORD *)v384 + 4);
                  v384 = (llvm::SmallPtrSetImplBase *)((char *)v384 + 16);
                  v385 -= 16;
                }
                while (v386 != 4);
              }
              llvm::getConstantRangeFromMetadata(*((void *)v384 + 1), (uint64_t)&v555);
              uint64_t v387 = ***(void ***)v9;
              __s1 = v9;
              int v388 = *(_DWORD *)(v387 + 2496);
              if (v388)
              {
                uint64_t v389 = *(void *)(v387 + 2480);
                int v390 = v388 - 1;
                unsigned int v391 = v390 & (p_s2 ^ (v9 >> 9));
                v392 = (llvm::SmallPtrSetImplBase **)(v389 + 40 * v391);
                v393 = *v392;
                if (*v392 == v9) {
                  goto LABEL_946;
                }
                v394 = 0;
                int v395 = 1;
                while (v393 != (llvm::SmallPtrSetImplBase *)-4096)
                {
                  if (v394) {
                    BOOL v396 = 0;
                  }
                  else {
                    BOOL v396 = v393 == (llvm::SmallPtrSetImplBase *)-8192;
                  }
                  if (v396) {
                    v394 = v392;
                  }
                  unsigned int v397 = v391 + v395++;
                  unsigned int v391 = v397 & v390;
                  v392 = (llvm::SmallPtrSetImplBase **)(v389 + 40 * v391);
                  v393 = *v392;
                  if (*v392 == v9) {
                    goto LABEL_946;
                  }
                }
                if (v394) {
                  v490 = v394;
                }
                else {
                  v490 = v392;
                }
              }
              else
              {
                v490 = 0;
              }
              v392 = (llvm::SmallPtrSetImplBase **)sub_1CC609054(v387 + 2480, (uint64_t)&__s1, (uint64_t *)&__s1, v490);
              v491 = (llvm::SmallPtrSetImplBase *)__s1;
              v392[3] = 0;
              v392[4] = 0;
              *v392 = v491;
              v392[1] = (llvm::SmallPtrSetImplBase *)(v392 + 3);
              v392[2] = (llvm::SmallPtrSetImplBase *)0x100000000;
LABEL_946:
              v398 = v392[1];
              if (*(_DWORD *)v398 != 4)
              {
                uint64_t v399 = 16 * *((unsigned int *)v392 + 4) - 16;
                do
                {
                  int v400 = *((_DWORD *)v398 + 4);
                  v398 = (llvm::SmallPtrSetImplBase *)((char *)v398 + 16);
                  v399 -= 16;
                }
                while (v400 != 4);
              }
              llvm::getConstantRangeFromMetadata(*((void *)v398 + 1), (uint64_t)&__s1);
              if (llvm::ConstantRange::icmp((const llvm::ConstantRange *)&__s1, v10, (llvm::ConstantRange *)&v555))
              {
                v401 = **(uint64_t ***)v14;
                uint64_t v402 = *v401;
                uint64_t p_s2 = *(void *)(*v401 + 1560);
                if (!p_s2)
                {
                  v403 = *(llvm::ConstantInt **)(v402 + 1888);
                  unsigned int v404 = *(_DWORD *)(v402 + 1896);
                  LODWORD(p_s1) = v404 >> 8;
                  if (v404 >> 8 > 0x40) {
                    operator new[]();
                  }
                  if (v404 <= 0xFF) {
                    char v405 = 0;
                  }
                  else {
                    char v405 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v404) + 63);
                  }
                  v545 = (llvm::SmallPtrSetImplBase *)(v405 & 1);
                  uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v403, (llvm::LLVMContext *)&v545, NullValue);
                  if (p_s1 >= 0x41 && v545) {
                    MEMORY[0x1D25D9CB0](v545, 0x1000C8000313F17);
                  }
                  int v406 = 0;
                  *(void *)(v402 + 1560) = p_s2;
                  goto LABEL_1006;
                }
              }
              else
              {
                if (!llvm::ConstantRange::icmp((const llvm::ConstantRange *)&__s1, dword_1CFAC396C[(int)v10], (llvm::ConstantRange *)&v555))
                {
                  int v406 = 1;
                  goto LABEL_1006;
                }
                v409 = **(uint64_t ***)v14;
                uint64_t v410 = *v409;
                uint64_t p_s2 = *(void *)(*v409 + 1568);
                if (!p_s2)
                {
                  v512 = *(llvm::ConstantInt **)(v410 + 1888);
                  unsigned int v513 = *(_DWORD *)(v410 + 1896);
                  LODWORD(p_s1) = v513 >> 8;
                  if (v513 >> 8 > 0x40) {
                    operator new[]();
                  }
                  v545 = 0;
                  uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v512, (llvm::LLVMContext *)&v545, NullValue);
                  if (p_s1 >= 0x41 && v545) {
                    MEMORY[0x1D25D9CB0](v545, 0x1000C8000313F17);
                  }
                  int v406 = 0;
                  *(void *)(v410 + 1568) = p_s2;
LABEL_1006:
                  if (v554 >= 0x41 && __s2) {
                    MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
                  }
                  if (v552 >= 0x41 && __s1) {
                    MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
                  }
                  if (v558 >= 0x41 && v557) {
                    MEMORY[0x1D25D9CB0](v557, 0x1000C8000313F17);
                  }
                  if (v556 >= 0x41 && v555) {
                    MEMORY[0x1D25D9CB0](v555, 0x1000C8000313F17);
                  }
                  if (!v406) {
                    return (llvm::UndefValue *)p_s2;
                  }
                  goto LABEL_454;
                }
              }
              int v406 = 0;
              goto LABEL_1006;
            }
            uint64_t v210 = 0;
            int v211 = 1;
            while (v209 != (llvm::SmallPtrSetImplBase *)-4096)
            {
              if (v210) {
                BOOL v212 = 0;
              }
              else {
                BOOL v212 = v209 == (llvm::SmallPtrSetImplBase *)-8192;
              }
              if (v212) {
                uint64_t v210 = v208;
              }
              unsigned int v213 = v207 + v211++;
              unsigned int v207 = v213 & v206;
              uint64_t v208 = (llvm::SmallPtrSetImplBase **)(v205 + 40 * v207);
              int v209 = *v208;
              if (*v208 == v9) {
                goto LABEL_450;
              }
            }
            if (v210) {
              v414 = v210;
            }
            else {
              v414 = v208;
            }
          }
          else
          {
            v414 = 0;
          }
          uint64_t v208 = (llvm::SmallPtrSetImplBase **)sub_1CC609054(v203 + 2480, (uint64_t)&v555, (uint64_t *)&v555, v414);
          unint64_t v415 = v555;
          v208[3] = 0;
          v208[4] = 0;
          *uint64_t v208 = (llvm::SmallPtrSetImplBase *)v415;
          v208[1] = (llvm::SmallPtrSetImplBase *)(v208 + 3);
          v208[2] = (llvm::SmallPtrSetImplBase *)0x100000000;
          goto LABEL_450;
        }
        uint64_t v195 = 0;
        int v196 = 1;
        while (v194 != (llvm::SmallPtrSetImplBase *)-4096)
        {
          if (v195) {
            BOOL v197 = 0;
          }
          else {
            BOOL v197 = v194 == (llvm::SmallPtrSetImplBase *)-8192;
          }
          if (v197) {
            uint64_t v195 = v193;
          }
          unsigned int v198 = v192 + v196++;
          unsigned int v192 = v198 & v191;
          size_t v193 = (llvm::SmallPtrSetImplBase **)(v190 + 40 * v192);
          uint64_t v194 = *v193;
          if (*v193 == v14) {
            goto LABEL_430;
          }
        }
        if (v195) {
          char v255 = v195;
        }
        else {
          char v255 = v193;
        }
      }
      else
      {
        char v255 = 0;
      }
      size_t v193 = (llvm::SmallPtrSetImplBase **)sub_1CC609054(v187 + 2480, (uint64_t)&v555, (uint64_t *)&v555, v255);
      unint64_t v256 = v555;
      v193[3] = 0;
      v193[4] = 0;
      *size_t v193 = (llvm::SmallPtrSetImplBase *)v256;
      v193[1] = (llvm::SmallPtrSetImplBase *)(v193 + 3);
      v193[2] = (llvm::SmallPtrSetImplBase *)0x100000000;
      goto LABEL_430;
    }
LABEL_454:
    unsigned int v186 = *((unsigned __int8 *)v9 + 16);
  }
  BOOL v217 = v186 < 0x1C || v186 - 66 > 0xC;
  if (v217) {
    goto LABEL_551;
  }
  unsigned int v218 = *((unsigned __int8 *)v14 + 16);
  if (v218 >= 0x15 && (v218 < 0x1C || v218 - 66 > 0xC)) {
    goto LABEL_551;
  }
  int v219 = *((_DWORD *)v9 + 5);
  if ((v219 & 0x40000000) != 0) {
    unint64_t v220 = (llvm::Constant ***)*((void *)v9 - 1);
  }
  else {
    unint64_t v220 = (llvm::Constant ***)((char *)v9 - 32 * (v219 & 0x7FFFFFF));
  }
  size_t v221 = *v220;
  uint64_t v222 = **v220;
  uint64_t v223 = *(llvm::Type **)v9;
  if (v536 && v186 == 75)
  {
    uint64_t v224 = sub_1CB83544C(*(void *)a4, (uint64_t)v222);
    int v226 = v225;
    if (v224 == llvm::Type::getPrimitiveSizeInBits(v223) && v226 == v97)
    {
      unsigned int v230 = *((unsigned __int8 *)v14 + 16);
      if (v230 <= 0x14)
      {
        NullValue = sub_1CC56C0C0((llvm *)0x30, v14, v222, 0);
      }
      else
      {
        if (v230 != 75) {
          goto LABEL_471;
        }
        NullValue = (llvm::detail::IEEEFloat *)*((void *)v14 - 4);
        if (*(llvm::Constant **)NullValue != v222) {
          goto LABEL_471;
        }
      }
      uint64_t p_s2 = sub_1CC02F0F0(v10, v221, NullValue, a4, (v536 - 1));
      if (p_s2) {
        return (llvm::UndefValue *)p_s2;
      }
    }
  }
LABEL_471:
  int v228 = *((unsigned __int8 *)v9 + 16);
  if (v228 == 67)
  {
    int v229 = *((unsigned __int8 *)v14 + 16);
    switch(v229)
    {
      case 16:
        size_t v231 = sub_1CC56C0C0((llvm *)0x26, v14, v222, 0);
        uint64_t v232 = sub_1CC56C0C0((llvm *)0x27, v231, v223, 0);
        uint64_t v233 = v232;
        if (v536)
        {
          if (v232 == v14)
          {
            uint64_t p_s2 = sub_1CC02F0F0(dword_1CFAC38D0[(int)v10 - 32], v221, v231, a4, (v536 - 1));
            if (p_s2) {
              return (llvm::UndefValue *)p_s2;
            }
          }
        }
        if (v233 != v14)
        {
          switch((int)v10)
          {
            case '!':
            case '$':
            case '%':
LABEL_521:
              uint64_t v243 = ***(void ***)v14;
              goto LABEL_532;
            case '&':
            case '\'':
LABEL_529:
              v249 = (void *)((char *)v14 + 24);
              unsigned int v250 = *((_DWORD *)v14 + 8);
              unsigned int v251 = v250 - 1;
              if (v250 >= 0x41) {
                v249 = (void *)(*v249 + 8 * (v251 >> 6));
              }
              uint64_t v243 = ***(void ***)v14;
              if ((*v249 >> v251)) {
                goto LABEL_532;
              }
              goto LABEL_525;
            case '(':
            case ')':
LABEL_522:
              size_t v244 = (void *)((char *)v14 + 24);
              unsigned int v245 = *((_DWORD *)v14 + 8);
              unsigned int v246 = v245 - 1;
              if (v245 >= 0x41) {
                size_t v244 = (void *)(*v244 + 8 * (v246 >> 6));
              }
              uint64_t v243 = ***(void ***)v14;
              if ((*v244 >> v246)) {
                goto LABEL_525;
              }
LABEL_532:
              uint64_t p_s2 = *(void *)(v243 + 1560);
              if (!p_s2)
              {
                uint64_t v252 = *(llvm::ConstantInt **)(v243 + 1888);
                unsigned int v253 = *(_DWORD *)(v243 + 1896);
                LODWORD(v556) = v253 >> 8;
                if (v253 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v253 <= 0xFF) {
                  LOBYTE(v254) = 0;
                }
                else {
                  unint64_t v254 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v253) + 63);
                }
                unint64_t v555 = v254 & 1;
                uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v252, (llvm::LLVMContext *)&v555, NullValue);
                if (v556 >= 0x41 && v555) {
                  MEMORY[0x1D25D9CB0](v555, 0x1000C8000313F17);
                }
                *(void *)(v243 + 1560) = p_s2;
              }
              break;
            default:
LABEL_520:
              uint64_t v243 = ***(void ***)v14;
LABEL_525:
              uint64_t p_s2 = *(void *)(v243 + 1568);
              if (!p_s2)
              {
                int v247 = *(llvm::ConstantInt **)(v243 + 1888);
                unsigned int v248 = *(_DWORD *)(v243 + 1896);
                LODWORD(v556) = v248 >> 8;
                if (v248 >> 8 > 0x40) {
                  operator new[]();
                }
                unint64_t v555 = 0;
                uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v247, (llvm::LLVMContext *)&v555, NullValue);
                if (v556 >= 0x41 && v555) {
                  MEMORY[0x1D25D9CB0](v555, 0x1000C8000313F17);
                }
                *(void *)(v243 + 1568) = p_s2;
              }
              break;
          }
          return (llvm::UndefValue *)p_s2;
        }
        break;
      case 68:
        if (v221 == *((llvm::Constant ***)v14 - 4))
        {
          if ((v10 & 0xFFFFFFFD) == 0x25) {
            goto LABEL_509;
          }
          if (v10 == 40 || v10 == 34) {
            goto LABEL_544;
          }
        }
        break;
      case 67:
        if (!v536) {
          goto LABEL_551;
        }
        NullValue = (llvm::detail::IEEEFloat *)*((void *)v14 - 4);
        if (v222 == *(llvm::Constant **)NullValue)
        {
          uint64_t p_s2 = sub_1CC02F0F0(dword_1CFAC38D0[(int)v10 - 32], v221, NullValue, a4, (v536 - 1));
          if (p_s2) {
            return (llvm::UndefValue *)p_s2;
          }
        }
        break;
    }
    int v228 = *((unsigned __int8 *)v9 + 16);
  }
  if (v228 != 68) {
    goto LABEL_551;
  }
  int v234 = *((unsigned __int8 *)v14 + 16);
  if (v234 != 16)
  {
    if (v234 != 67)
    {
      if (v234 != 68) {
        goto LABEL_551;
      }
      if (!v536) {
        goto LABEL_551;
      }
      NullValue = (llvm::detail::IEEEFloat *)*((void *)v14 - 4);
      if (v222 != *(llvm::Constant **)NullValue) {
        goto LABEL_551;
      }
      uint64_t v235 = (v536 - 1);
      uint64_t v236 = v10;
      goto LABEL_504;
    }
    if (v221 != *((llvm::Constant ***)v14 - 4)) {
      goto LABEL_551;
    }
    if (v10 == 41 || v10 == 35)
    {
LABEL_509:
      uint64_t v237 = **(void **)v16;
      goto LABEL_562;
    }
    if ((v10 & 0xFFFFFFFD) != 0x24) {
      goto LABEL_551;
    }
LABEL_544:
    uint64_t v237 = **(void **)v16;
    goto LABEL_569;
  }
  int v238 = sub_1CC56C0C0((llvm *)0x26, v14, v222, 0);
  size_t v239 = sub_1CC56C0C0((llvm *)0x28, v238, v223, 0);
  uint64_t v240 = v239;
  if (v536)
  {
    if (v239 == v14)
    {
      uint64_t p_s2 = sub_1CC02F0F0(v10, v221, v238, a4, (v536 - 1));
      if (p_s2) {
        return (llvm::UndefValue *)p_s2;
      }
    }
  }
  if (v240 != v14)
  {
    switch((int)v10)
    {
      case '!':
        goto LABEL_521;
      case '""':
      case '#':
        if (!v536) {
          goto LABEL_551;
        }
        NullValue = llvm::Constant::getNullValue(v222, v97, NullValue);
        uint64_t v235 = (v536 - 1);
        uint64_t v236 = 40;
        break;
      case '$':
      case '%':
        if (!v536) {
          goto LABEL_551;
        }
        NullValue = llvm::Constant::getNullValue(v222, v97, NullValue);
        uint64_t v235 = (v536 - 1);
        uint64_t v236 = 39;
        break;
      case '&':
      case '\'':
        goto LABEL_529;
      case '(':
      case ')':
        goto LABEL_522;
      default:
        goto LABEL_520;
    }
LABEL_504:
    uint64_t p_s2 = sub_1CC02F0F0(v236, v221, NullValue, a4, v235);
    if (p_s2) {
      return (llvm::UndefValue *)p_s2;
    }
  }
LABEL_551:
  int v534 = v10 & 0xFFFFFFFE;
  if ((v10 & 0xFFFFFFFE) != 0x20) {
    goto LABEL_583;
  }
  if (v14)
  {
    unsigned int v257 = *((unsigned __int8 *)v14 + 16);
    if (v257 <= 0x14)
    {
      if (v257 == 16)
      {
        uint64_t v258 = *((unsigned int *)v14 + 8);
        if (v258 >= 0x41)
        {
          int v492 = 0;
          int64_t v493 = (unint64_t)(v258 + 63) >> 6;
          do
          {
            BOOL v217 = v493-- < 1;
            if (v217) {
              break;
            }
            unint64_t v494 = *(void *)(*((void *)v14 + 3) + 8 * v493);
            v492 += __clz(v494);
          }
          while (!v494);
          int v495 = v258 | 0xFFFFFFC0;
          if ((v258 & 0x3F) == 0) {
            int v495 = 0;
          }
          if (v492 + v495 == v258) {
            goto LABEL_583;
          }
        }
        else if (!*((void *)v14 + 3))
        {
          goto LABEL_583;
        }
      }
      else if (v257 == 17)
      {
        if (sub_1CB844168((uint64_t)v14, 0.0)) {
          goto LABEL_583;
        }
      }
      else if (v257 - 18 < 3 || v257 == 13)
      {
        goto LABEL_583;
      }
      if (sub_1CC03F414((uint64_t)&v555, v14)) {
        goto LABEL_583;
      }
    }
  }
  uint64_t v259 = *(void *)(a4 + 24);
  v260 = *(llvm::SmallPtrSetImplBase **)(a4 + 32);
  uint64_t v261 = *(void *)(a4 + 16);
  char v262 = *(unsigned char *)(a4 + 40);
  if (!v260 || !*((void *)v260 + 5))
  {
    if (!v14 || *((unsigned __int8 *)v14 + 16) < 0x1Cu || (v260 = v14, !*((void *)v14 + 5)))
    {
      if (!v9 || *((unsigned __int8 *)v9 + 16) < 0x1Cu || (v260 = v9, !*((void *)v9 + 5))) {
        v260 = 0;
      }
    }
  }
  unint64_t v555 = *(void *)a4;
  uint64_t v556 = v259;
  unint64_t v557 = (unint64_t)v260;
  uint64_t v558 = v261;
  uint64_t v559 = 0;
  char v560 = v262;
  if (sub_1CC1624EC((uint64_t *)v9, (uint64_t *)v14, 0, (uint64_t)&v555))
  {
    uint64_t v237 = **(void **)v16;
    if (v10 == 33)
    {
LABEL_562:
      uint64_t p_s2 = *(void *)(v237 + 1560);
      if (!p_s2)
      {
        v263 = *(llvm::ConstantInt **)(v237 + 1888);
        unsigned int v264 = *(_DWORD *)(v237 + 1896);
        LODWORD(v556) = v264 >> 8;
        if (v264 >> 8 > 0x40) {
          operator new[]();
        }
        if (v264 <= 0xFF) {
          LOBYTE(v265) = 0;
        }
        else {
          unint64_t v265 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v264) + 63);
        }
        unint64_t v555 = v265 & 1;
        uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v263, (llvm::LLVMContext *)&v555, NullValue);
        if (v556 >= 0x41 && v555) {
          MEMORY[0x1D25D9CB0](v555, 0x1000C8000313F17);
        }
        *(void *)(v237 + 1560) = p_s2;
      }
LABEL_570:
      if ((*((_DWORD *)v16 + 2) & 0xFE) != 0x12) {
        return (llvm::UndefValue *)p_s2;
      }
      return llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v16 + 8) | ((unint64_t)(*((_DWORD *)v16 + 2) == 19) << 32)), p_s2);
    }
LABEL_569:
    uint64_t p_s2 = *(void *)(v237 + 1568);
    if (!p_s2)
    {
      uint64_t v303 = *(llvm::ConstantInt **)(v237 + 1888);
      unsigned int v304 = *(_DWORD *)(v237 + 1896);
      LODWORD(v556) = v304 >> 8;
      if (v304 >> 8 > 0x40) {
        operator new[]();
      }
      unint64_t v555 = 0;
      uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v303, (llvm::LLVMContext *)&v555, NullValue);
      if (v556 >= 0x41 && v555) {
        MEMORY[0x1D25D9CB0](v555, 0x1000C8000313F17);
      }
      *(void *)(v237 + 1568) = p_s2;
    }
    goto LABEL_570;
  }
LABEL_583:
  unsigned int v266 = *((unsigned __int8 *)v9 + 16);
  BOOL v267 = v266 > 0x1B;
  BOOL v268 = v266 - 41 < 0x12;
  uint64_t v5 = v267 & v268;
  if (v267 && v268) {
    int v269 = v9;
  }
  else {
    int v269 = 0;
  }
  v532 = v269;
  unsigned int v270 = *((unsigned __int8 *)v14 + 16);
  BOOL v271 = v270 > 0x1B && v270 - 41 < 0x12;
  if (v271) {
    v272 = v14;
  }
  else {
    v272 = 0;
  }
  v531 = v272;
  if (v536)
  {
    if (!(v5 & 1 | (v270 > 0x1B) & (v270 - 41 < 0x12)))
    {
      int v275 = 0;
      uint64_t v5 = 0;
      goto LABEL_710;
    }
    if (v266 != 41)
    {
      v530 = 0;
      int v273 = 0;
      BOOL v276 = 0;
      goto LABEL_604;
    }
    v530 = (llvm::SmallPtrSetImplBase *)*((void *)v9 - 8);
    int v273 = (llvm::SmallPtrSetImplBase *)*((void *)v9 - 4);
    if (v534 == 32)
    {
      if (v270 != 41)
      {
        uint64_t v277 = 0;
        v529 = 0;
        int v526 = 0;
        BOOL v276 = 1;
        goto LABEL_617;
      }
      uint64_t v277 = (llvm::SmallPtrSetImplBase *)*((void *)v14 - 8);
      v529 = (llvm::SmallPtrSetImplBase *)*((void *)v14 - 4);
      BOOL v276 = 1;
      goto LABEL_610;
    }
    if ((v10 - 34) <= 3 && *(unsigned char *)(a4 + 40))
    {
      char v274 = 2;
    }
    else
    {
      BOOL v276 = 0;
      if ((v10 - 38) > 3 || !*(unsigned char *)(a4 + 40))
      {
LABEL_604:
        if (v270 != 41)
        {
          uint64_t v277 = 0;
          v529 = 0;
          int v526 = 0;
LABEL_617:
          v528 = v273;
          BOOL v279 = v273 == v14 || v530 == v14;
          int v280 = !v276;
          if (v279 && (v280 & 1) == 0)
          {
            uint64_t v281 = v530 == v14 ? v273 : v530;
            BOOL v282 = v271;
            uint64_t v283 = v5;
            unint64_t v284 = v277;
            unint64_t v285 = llvm::Constant::getNullValue(*(llvm::Constant **)v14, v97, NullValue);
            uint64_t p_s2 = sub_1CC02F0F0(v10, v281, v285, a4, (v536 - 1));
            uint64_t v277 = v284;
            uint64_t v5 = v283;
            BOOL v271 = v282;
            if (p_s2) {
              return (llvm::UndefValue *)p_s2;
            }
          }
          BOOL v286 = v529 == v9 || v277 == v9;
          int v287 = v526 ^ 1;
          if (v286 && (v287 & 1) == 0)
          {
            uint64_t v288 = v277;
            uint64_t v289 = llvm::Constant::getNullValue(*(llvm::Constant **)v9, v97, NullValue);
            int v290 = v288 == v9 ? v529 : v288;
            uint64_t p_s2 = sub_1CC02F0F0(v10, v289, v290, a4, (v536 - 1));
            uint64_t v277 = v288;
            if (p_s2) {
              return (llvm::UndefValue *)p_s2;
            }
          }
          if ((v280 | v287) != 1)
          {
            unsigned int v297 = 1;
            goto LABEL_680;
          }
          if (v10 != 40) {
            goto LABEL_679;
          }
          uint64_t v291 = v277;
          int v292 = sub_1CC04A1E0((uint64_t)v14);
          if (v292) {
            uint64_t v293 = (uint64_t)v14;
          }
          else {
            uint64_t v293 = (uint64_t)v9;
          }
          if (!sub_1CC04A1E0(v293)) {
            goto LABEL_668;
          }
          if (v292) {
            unint64_t v294 = v9;
          }
          else {
            unint64_t v294 = v14;
          }
          v545 = 0;
          v539 = 0;
          v537 = 0;
          unint64_t v555 = (unint64_t)&v545;
          uint64_t v556 = (uint64_t)&v539;
          unint64_t v557 = 0;
          int v295 = *((unsigned __int8 *)v294 + 16);
          if (v295 == 5)
          {
            if (*((_WORD *)v294 + 9) != 13) {
              goto LABEL_668;
            }
            uint64_t v298 = *((_DWORD *)v294 + 5) & 0x7FFFFFF;
            if (*((void *)v294 - 4 * v298))
            {
              v545 = (llvm::SmallPtrSetImplBase *)*((void *)v294 - 4 * v298);
              if (sub_1CBF5295C((uint64_t)&v556, ((llvm::Constant **)v294 - 4 * (*((_DWORD *)v294 + 5) & 0x7FFFFFF))[4]))goto LABEL_660; {
              uint64_t v298 = *((_DWORD *)v294 + 5) & 0x7FFFFFF;
              }
            }
            uint64_t v299 = ((void *)v294 - 4 * v298)[4];
            if (!v299
              || (*(void *)unint64_t v555 = v299,
                  !sub_1CBF5295C((uint64_t)&v556, *((llvm::Constant **)v294 - 4 * (*((_DWORD *)v294 + 5) & 0x7FFFFFF)))))
            {
LABEL_668:
              unsigned int v297 = 0;
              uint64_t v277 = v291;
              goto LABEL_680;
            }
          }
          else
          {
            if (v295 != 41) {
              goto LABEL_668;
            }
            if (!*((void *)v294 - 8)
              || (v545 = (llvm::SmallPtrSetImplBase *)*((void *)v294 - 8),
                  (sub_1CBF528D8((uint64_t)&v556, *((unsigned __int8 **)v294 - 4)) & 1) == 0))
            {
              uint64_t v296 = *((void *)v294 - 4);
              if (!v296) {
                goto LABEL_668;
              }
              *(void *)unint64_t v555 = v296;
              if ((sub_1CBF528D8((uint64_t)&v556, *((unsigned __int8 **)v294 - 8)) & 1) == 0) {
                goto LABEL_668;
              }
            }
          }
LABEL_660:
          unint64_t v300 = v545;
          __s1 = v545;
          uint64_t v552 = (uint64_t)&v537;
          __s2 = 0;
          int v301 = *(unsigned __int8 *)(v293 + 16);
          if (v301 == 5)
          {
            uint64_t v277 = v291;
            if (*(_WORD *)(v293 + 18) == 13)
            {
              unsigned int v525 = 40;
              BOOL v527 = v271;
              uint64_t v302 = v5;
              uint64_t v305 = *(_DWORD *)(v293 + 20) & 0x7FFFFFF;
              uint64_t v306 = (llvm::SmallPtrSetImplBase **)(v293 - 32 * v305);
              if (v545 == *v306)
              {
                if (sub_1CBF5295C((uint64_t)&v552, v306[4])) {
                  goto LABEL_988;
                }
                unint64_t v300 = (llvm::SmallPtrSetImplBase *)__s1;
                uint64_t v305 = *(_DWORD *)(v293 + 20) & 0x7FFFFFF;
              }
              size_t v307 = (llvm::Constant **)(v293 - 32 * v305);
              uint64_t v277 = v291;
              uint64_t v10 = v10;
              if (v300 == v307[4])
              {
                if ((sub_1CBF5295C((uint64_t)&v552, *v307) & 1) == 0) {
                  goto LABEL_1182;
                }
                goto LABEL_988;
              }
            }
          }
          else
          {
            uint64_t v277 = v291;
            if (v301 == 41)
            {
              if (v545 == *(llvm::SmallPtrSetImplBase **)(v293 - 64))
              {
                unsigned int v525 = 40;
                BOOL v527 = v271;
                uint64_t v302 = v5;
                if (sub_1CBF528D8((uint64_t)&v552, *(unsigned __int8 **)(v293 - 32))) {
                  goto LABEL_988;
                }
                unint64_t v300 = (llvm::SmallPtrSetImplBase *)__s1;
                uint64_t v277 = v291;
                uint64_t v10 = v10;
              }
              if (v300 == *(llvm::SmallPtrSetImplBase **)(v293 - 32))
              {
                unsigned int v525 = v10;
                BOOL v527 = v271;
                uint64_t v302 = v5;
                if ((sub_1CBF528D8((uint64_t)&v552, *(unsigned __int8 **)(v293 - 64)) & 1) == 0) {
                  goto LABEL_1182;
                }
LABEL_988:
                v416 = v539;
                uint64_t v417 = v539[2];
                if (v417 > 0x40)
                {
                  unint64_t v418 = *(void *)v539;
                  uint64_t v420 = *(void *)(*(void *)v539 + 8 * ((v417 - 1) >> 6)) & (1 << (v417 - 1));
                  unsigned int v496 = v537[2];
                  unsigned int v497 = v496 - 1;
                  uint64_t v419 = *(void *)v537;
                  if (v496 >= 0x41) {
                    v498 = (unsigned int *)(*(void *)v537 + 8 * (v497 >> 6));
                  }
                  else {
                    v498 = v537;
                  }
                  if ((((v420 != 0) ^ (*(void *)v498 >> v497)) & 1) == 0)
                  {
                    unint64_t v499 = ((unint64_t)(v417 + 63) >> 3) & 0x3FFFFFF8;
                    while (v499)
                    {
                      unint64_t v500 = *(void *)(v418 + v499 - 8);
                      unint64_t v501 = *(void *)(v419 + v499 - 8);
                      v499 -= 8;
                      if (v500 != v501)
                      {
                        if (v500 <= v501) {
                          goto LABEL_991;
                        }
                        break;
                      }
                    }
                  }
                }
                else
                {
                  unint64_t v418 = *(void *)v539;
                  uint64_t v419 = *(void *)v537;
                  if ((uint64_t)(*(void *)v539 << -(char)v417) >> -(char)v417 < (uint64_t)(*(void *)v537 << -(char)v417) >> -(char)v417)
                  {
                    uint64_t v420 = (1 << (v417 - 1)) & v418;
LABEL_991:
                    if (!v420) {
                      goto LABEL_1228;
                    }
                  }
                }
                uint64_t v421 = v537[2];
                if (v421 > 0x40)
                {
                  uint64_t v506 = *(void *)(v419 + 8 * ((v421 - 1) >> 6)) & (1 << (v421 - 1));
                  if (v417 >= 0x41) {
                    v416 = (unsigned int *)(v418 + 8 * ((v417 - 1) >> 6));
                  }
                  uint64_t v507 = *(void *)v416 >> (v417 - 1);
                  unsigned int v422 = v417 - 1;
                  if ((v506 != 0) == (v507 & 1))
                  {
                    unint64_t v508 = ((unint64_t)(v421 + 63) >> 3) & 0x3FFFFFF8;
                    uint64_t v509 = v419 - 8;
                    while (v508)
                    {
                      unint64_t v510 = *(void *)(v509 + v508);
                      unint64_t v511 = *(void *)(v418 - 8 + v508);
                      v508 -= 8;
                      if (v510 != v511)
                      {
                        if (v510 <= v511) {
                          goto LABEL_995;
                        }
                        goto LABEL_1182;
                      }
                    }
                    goto LABEL_1182;
                  }
                  if (v506) {
                    goto LABEL_995;
                  }
                }
                else if (v419 << -(char)v421 >> -(char)v421 < (uint64_t)(v418 << -(char)v421) >> -(char)v421)
                {
                  unsigned int v422 = v417 - 1;
LABEL_995:
                  if (v417 <= 0x40)
                  {
                    unsigned int v297 = (v418 == 0) | (v418 >> v422);
LABEL_1229:
                    uint64_t v277 = v291;
                    uint64_t v5 = v302;
                    uint64_t v10 = v525;
                    BOOL v271 = v527;
LABEL_680:
                    if (v530 && v277)
                    {
                      BOOL v309 = v530 == v277 || v530 == v529;
                      char v310 = (v528 != v277) & ~v309;
                      if (v528 == v529) {
                        char v310 = 0;
                      }
                      if ((v310 & 1) == 0 && ((v297 ^ 1) & 1) == 0)
                      {
                        if (v528 == v277) {
                          unsigned int v311 = v529;
                        }
                        else {
                          unsigned int v311 = v277;
                        }
                        if (v530 == v529) {
                          unsigned int v311 = v277;
                        }
                        size_t v312 = v309 ? v528 : v530;
                        int v313 = v530 == v277 ? v529 : v311;
                        uint64_t p_s2 = sub_1CC02F0F0(v10, v312, v313, a4, (v536 - 1));
                        if (p_s2) {
                          return (llvm::UndefValue *)p_s2;
                        }
                      }
                    }
                    goto LABEL_704;
                  }
                  if (((*(void *)(v418 + 8 * (v422 >> 6)) >> v422) & 1) == 0)
                  {
                    int v518 = 0;
                    int64_t v519 = (unint64_t)(v417 + 63) >> 6;
                    do
                    {
                      BOOL v217 = v519-- < 1;
                      if (v217) {
                        break;
                      }
                      unint64_t v520 = *(void *)(v418 + 8 * v519);
                      v518 += __clz(v520);
                    }
                    while (!v520);
                    int v521 = v417 | 0xFFFFFFC0;
                    if ((v417 & 0x3F) == 0) {
                      int v521 = 0;
                    }
                    unsigned int v297 = v518 + v521 == v417;
                    goto LABEL_1229;
                  }
LABEL_1228:
                  unsigned int v297 = 1;
                  goto LABEL_1229;
                }
LABEL_1182:
                unsigned int v297 = 0;
                goto LABEL_1229;
              }
            }
          }
LABEL_679:
          unsigned int v297 = 0;
          goto LABEL_680;
        }
        uint64_t v277 = (llvm::SmallPtrSetImplBase *)*((void *)v14 - 8);
        v529 = (llvm::SmallPtrSetImplBase *)*((void *)v14 - 4);
        if (v534 != 32)
        {
          if ((v10 - 34) <= 3 && *(unsigned char *)(a4 + 40))
          {
            int v278 = (*((unsigned __int8 *)v14 + 17) >> 1) & 1;
          }
          else
          {
            if ((v10 - 38) > 3 || !*(unsigned char *)(a4 + 40))
            {
              int v526 = 0;
              goto LABEL_617;
            }
            int v278 = (*((unsigned __int8 *)v14 + 17) >> 2) & 1;
          }
          goto LABEL_611;
        }
LABEL_610:
        int v278 = 1;
LABEL_611:
        int v526 = v278;
        goto LABEL_617;
      }
      char v274 = 4;
    }
    BOOL v276 = (*((unsigned char *)v9 + 17) & v274) != 0;
    goto LABEL_604;
  }
LABEL_704:
  if (v5)
  {
    uint64_t p_s2 = (uint64_t)sub_1CC048924(v10, (uint64_t)v9, (uint64_t)v14, a4);
    if (p_s2) {
      return (llvm::UndefValue *)p_s2;
    }
  }
  if (v271)
  {
    uint64_t p_s2 = (uint64_t)sub_1CC048924(dword_1CFAC3A14[(int)v10], (uint64_t)v14, (uint64_t)v9, a4);
    if (p_s2) {
      return (llvm::UndefValue *)p_s2;
    }
    int v275 = 1;
  }
  else
  {
    int v275 = 0;
  }
LABEL_710:
  int v314 = v536;
  if ((v10 - 34) < 4) {
    goto LABEL_738;
  }
  LOWORD(v555) = 0;
  int v315 = *((unsigned __int8 *)v9 + 16);
  if (v315 == 5)
  {
    if (*((_WORD *)v9 + 9) != 15
      || !sub_1CC03F414((uint64_t)&v555, *((llvm::Constant **)v9 - 4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF))))
    {
      goto LABEL_738;
    }
    BOOL v316 = (void **)((void *)v9 - 4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF))[4];
  }
  else
  {
    if (v315 != 43 || !sub_1CBF535C4((uint64_t)&v555, *((llvm::Constant **)v9 - 8))) {
      goto LABEL_738;
    }
    BOOL v316 = (void **)*((void *)v9 - 4);
  }
  unsigned int v317 = *((unsigned __int8 *)v316 + 16);
  unsigned int v318 = v317 - 28;
  BOOL v320 = v317 < 0x1C && v317 != 5;
  if (v316 && !v320)
  {
    if (v317 <= 0x1B) {
      unsigned int v318 = *((unsigned __int16 *)v316 + 9);
    }
    if (v318 == 39)
    {
      __s1 = 0;
      unint64_t v555 = (unint64_t)&__s1;
      uint64_t v556 = 0;
      if (sub_1CBF528D8((uint64_t)&v555, (unsigned __int8 *)v14))
      {
        uint64_t v322 = *((unsigned int *)__s1 + 2);
        unsigned int v323 = v322 - 1;
        if (v322 > 0x40)
        {
          unint64_t v324 = *(void *)__s1;
          uint64_t v325 = v323 >> 6;
          if ((*(void *)(*(void *)__s1 + 8 * v325) >> v323))
          {
            unint64_t v324 = *(void *)(v324 + 8 * v325);
            int v314 = v536;
            goto LABEL_737;
          }
          int v502 = 0;
          int64_t v503 = (unint64_t)(v322 + 63) >> 6;
          do
          {
            BOOL v217 = v503-- < 1;
            if (v217) {
              break;
            }
            unint64_t v504 = *(void *)(v324 + 8 * v503);
            v502 += __clz(v504);
          }
          while (!v504);
          int v505 = v322 | 0xFFFFFFC0;
          if ((v322 & 0x3F) == 0) {
            int v505 = 0;
          }
          int v314 = v536;
          if (v502 + v505 == v322)
          {
LABEL_736:
            unint64_t v324 = *(void *)(v324 + 8 * v325);
LABEL_737:
            if (((v324 >> v323) & 1) == 0)
            {
              if (v10 == 38)
              {
LABEL_780:
                int v340 = *(llvm::Constant **)v14;
                uint64_t v5 = ***(void ***)v14 + 1888;
                if (*(void *)v14 && (*((_DWORD *)v340 + 2) & 0xFE) == 0x12)
                {
                  v430 = (llvm::Type *)*((unsigned int *)v340 + 8);
                  if (*((_DWORD *)v340 + 2) == 19) {
                    llvm::ScalableVectorType::get((uint64_t **)v5, v430);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v5, v430);
                  }
                  uint64_t v5 = v431;
                }
                uint64_t v341 = **(void **)v5;
                uint64_t p_s2 = *(void *)(v341 + 1568);
                if (!p_s2)
                {
                  int v342 = *(llvm::ConstantInt **)(v341 + 1888);
                  unsigned int v343 = *(_DWORD *)(v341 + 1896);
                  LODWORD(v556) = v343 >> 8;
                  if (v343 >> 8 > 0x40) {
                    operator new[]();
                  }
                  unint64_t v555 = 0;
                  uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v342, (llvm::LLVMContext *)&v555, v321);
                  if (v556 >= 0x41 && v555) {
                    MEMORY[0x1D25D9CB0](v555, 0x1000C8000313F17);
                  }
                  *(void *)(v341 + 1568) = p_s2;
                }
LABEL_919:
                if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12) {
                  uint64_t p_s2 = (uint64_t)llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v5 + 32) | ((unint64_t)(*(_DWORD *)(v5 + 8) == 19) << 32)), p_s2);
                }
                goto LABEL_791;
              }
              if (v10 == 41)
              {
LABEL_916:
                v371 = *(llvm::Constant **)v14;
                uint64_t v5 = ***(void ***)v14 + 1888;
                if (*(void *)v14 && (*((_DWORD *)v371 + 2) & 0xFE) == 0x12)
                {
                  v432 = (llvm::Type *)*((unsigned int *)v371 + 8);
                  if (*((_DWORD *)v371 + 2) == 19) {
                    llvm::ScalableVectorType::get((uint64_t **)v5, v432);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v5, v432);
                  }
                  uint64_t v5 = v433;
                }
                uint64_t v372 = **(void **)v5;
                uint64_t p_s2 = *(void *)(v372 + 1560);
                if (!p_s2)
                {
                  v411 = *(llvm::ConstantInt **)(v372 + 1888);
                  unsigned int v412 = *(_DWORD *)(v372 + 1896);
                  LODWORD(v556) = v412 >> 8;
                  if (v412 >> 8 > 0x40) {
                    operator new[]();
                  }
                  if (v412 <= 0xFF) {
                    char v413 = 0;
                  }
                  else {
                    char v413 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v412) + 63);
                  }
                  unint64_t v555 = v413 & 1;
                  uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v411, (llvm::LLVMContext *)&v555, v321);
                  if (v556 >= 0x41 && v555) {
                    MEMORY[0x1D25D9CB0](v555, 0x1000C8000313F17);
                  }
                  *(void *)(v372 + 1560) = p_s2;
                }
                goto LABEL_919;
              }
            }
            goto LABEL_738;
          }
        }
        else
        {
          unint64_t v324 = *(void *)__s1;
          if (((*(void *)__s1 >> v323) & 1) != 0 || !v324) {
            goto LABEL_737;
          }
        }
        switch((int)v10)
        {
          case ' ':
          case '\'':
            goto LABEL_780;
          case '!':
          case '(':
            goto LABEL_916;
          default:
            if (v322 < 0x41) {
              goto LABEL_737;
            }
            uint64_t v325 = v323 >> 6;
            break;
        }
        goto LABEL_736;
      }
    }
  }
LABEL_738:
  __s1 = 0;
  int v326 = *((unsigned __int8 *)v9 + 16);
  if (v326 == 5)
  {
    if (*((_WORD *)v9 + 9) != 25
      || !sub_1CC04A470((uint64_t)&v545, *((llvm::Constant **)v9 - 4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF))))
    {
      goto LABEL_771;
    }
  }
  else if (v326 != 53 || !sub_1CC04A274((uint64_t)&v545, *((llvm::Constant **)v9 - 8)))
  {
    goto LABEL_771;
  }
  unint64_t v555 = (unint64_t)&__s1;
  uint64_t v556 = 1;
  if (!sub_1CBF528D8((uint64_t)&v555, (unsigned __int8 *)v14)) {
    goto LABEL_771;
  }
  uint64_t v327 = *((unsigned int *)__s1 + 2);
  if (v327 > 0x40)
  {
    int v328 = 0;
    unint64_t v329 = (unint64_t)(v327 + 63) >> 6;
    BOOL v330 = *(int8x8_t **)__s1;
    do
    {
      int8x8_t v331 = *v330++;
      uint8x8_t v332 = (uint8x8_t)vcnt_s8(v331);
      v332.i16[0] = vaddlv_u8(v332);
      v328 += v332.i32[0];
      --v329;
    }
    while (v329);
    if (v328 == 1) {
      goto LABEL_771;
    }
  }
  else if (*(void *)__s1 && (*(void *)__s1 & (*(void *)__s1 - 1)) == 0)
  {
    goto LABEL_771;
  }
  if (*(unsigned char *)(a4 + 40) && (*((unsigned char *)v532 + 17) & 6) != 0) {
    goto LABEL_769;
  }
  int v333 = *((unsigned __int8 *)v9 + 16);
  if (v333 == 5)
  {
    if (*((_WORD *)v9 + 9) == 25
      && (sub_1CBF5270C((uint64_t)&v555, *((llvm::Constant **)v9 - 4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF))) & 1) != 0)
    {
      goto LABEL_769;
    }
  }
  else if (v333 == 53 && (sub_1CBF5250C((uint64_t)&v555, *((llvm::Constant **)v9 - 8)) & 1) != 0)
  {
    goto LABEL_769;
  }
  uint64_t v334 = *((unsigned int *)__s1 + 2);
  if (v334 > 0x40)
  {
    int v335 = 0;
    int64_t v336 = (unint64_t)(v334 + 63) >> 6;
    do
    {
      BOOL v217 = v336-- < 1;
      if (v217) {
        break;
      }
      unint64_t v337 = *(void *)(*(void *)__s1 + 8 * v336);
      v335 += __clz(v337);
    }
    while (!v337);
    int v338 = v334 | 0xFFFFFFC0;
    if ((v334 & 0x3F) == 0) {
      int v338 = 0;
    }
    if (v335 + v338 == v334) {
      goto LABEL_771;
    }
  }
  else if (!*(void *)__s1)
  {
    goto LABEL_771;
  }
LABEL_769:
  if (v10 == 33) {
    goto LABEL_916;
  }
  if (v10 == 32) {
    goto LABEL_780;
  }
LABEL_771:
  int v339 = *((unsigned __int8 *)v9 + 16);
  if (v339 == 5)
  {
    if (*((_WORD *)v9 + 9) != 25
      || !sub_1CBF5270C((uint64_t)&v555, *((llvm::Constant **)v9 - 4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF))))
    {
      goto LABEL_786;
    }
  }
  else if (v339 != 53 || (sub_1CBF5250C((uint64_t)&v555, *((llvm::Constant **)v9 - 8)) & 1) == 0)
  {
    goto LABEL_786;
  }
  if (sub_1CC03F5D4((uint64_t)&v545, (unsigned __int8 *)v14))
  {
    if (v10 == 37) {
      goto LABEL_916;
    }
    if (v10 == 34) {
      goto LABEL_780;
    }
  }
LABEL_786:
  if (v314)
  {
    if ((v275 & v5) != 0)
    {
      unsigned int v344 = *((unsigned __int8 *)v532 + 16);
      if (v344 == *((unsigned __int8 *)v531 + 16) && *((void *)v532 - 4) == *((void *)v531 - 4))
      {
        switch(*((unsigned char *)v532 + 16))
        {
          case '/':
          case '6':
            if ((v10 - 38) < 4
              || !*(unsigned char *)(a4 + 40)
              || v344 > 0x36
              || ((1 << v344) & 0x41800000000000) == 0
              || (*((unsigned char *)v532 + 17) & 2) == 0
              || ((1 << v344) & 0x41800000000000) == 0)
            {
              break;
            }
            goto LABEL_867;
          case '0':
            if (v534 != 32) {
              break;
            }
            goto LABEL_865;
          case '5':
            LOBYTE(v357) = *(unsigned char *)(a4 + 40);
            if ((_BYTE)v357
              && ((*((unsigned char *)v532 + 17) & 2) != 0
                ? (int v357 = (*((unsigned __int8 *)v531 + 17) >> 1) & 1)
                : (LOBYTE(v357) = 0),
                  (*((unsigned char *)v532 + 17) & 4) != 0))
            {
              int v369 = (*((unsigned __int8 *)v531 + 17) >> 2) & 1;
            }
            else
            {
              int v369 = 0;
            }
            if ((v357 & 1) == 0 && !v369) {
              break;
            }
            char v370 = v369 ^ 1;
            if ((v10 - 42) <= 0xFFFFFFFB) {
              char v370 = 0;
            }
            if (v370) {
              break;
            }
            goto LABEL_912;
          case '7':
LABEL_865:
            if (!*(unsigned char *)(a4 + 40) || (*((unsigned char *)v532 + 17) & 2) == 0) {
              break;
            }
LABEL_867:
            if ((*((unsigned char *)v531 + 17) & 2) == 0) {
              break;
            }
LABEL_912:
            uint64_t p_s2 = sub_1CC02F0F0(v10, *((void *)v532 - 8), *((void *)v531 - 8), a4, (v314 - 1));
            if (!p_s2) {
              break;
            }
            goto LABEL_791;
          default:
            break;
        }
      }
    }
  }
  uint64_t p_s2 = 0;
LABEL_791:
  if (p_s2) {
    return (llvm::UndefValue *)p_s2;
  }
  uint64_t v345 = *(void *)v9;
  size_t v346 = (uint64_t **)(***(void ***)v9 + 1888);
  if (*(void *)v9 && (*(_DWORD *)(v345 + 8) & 0xFE) == 0x12)
  {
    v407 = (llvm::Type *)*(unsigned int *)(v345 + 32);
    if (*(_DWORD *)(v345 + 8) == 19) {
      llvm::ScalableVectorType::get(v346, v407);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v346, v407);
    }
    size_t v346 = v408;
  }
  v545 = 0;
  v539 = 0;
  unint64_t v555 = (unint64_t)&v545;
  uint64_t v556 = (uint64_t)&v539;
  if (sub_1CC04A6C4((void **)&v555, (uint64_t)v9)
    && ((a5 = v545, uint64_t v347 = (uint64_t)v539, v545 == v14) || v539 == (unsigned int *)v14))
  {
    int v349 = 0;
    if (v545 == v14)
    {
      uint64_t v348 = 39;
      a5 = (llvm::SmallPtrSetImplBase *)v539;
      uint64_t v347 = (uint64_t)v14;
    }
    else
    {
      v545 = (llvm::SmallPtrSetImplBase *)v539;
      v539 = (unsigned int *)a5;
      uint64_t v348 = 39;
    }
  }
  else
  {
    unint64_t v555 = (unint64_t)&v545;
    uint64_t v556 = (uint64_t)&v539;
    if (sub_1CC04A6C4((void **)&v555, (uint64_t)v14))
    {
      a5 = v545;
      uint64_t v347 = (uint64_t)v539;
      if (v545 == v9 || v539 == (unsigned int *)v9)
      {
        if (v545 == v9)
        {
          a5 = (llvm::SmallPtrSetImplBase *)v539;
          uint64_t v347 = (uint64_t)v9;
        }
        else
        {
          v545 = (llvm::SmallPtrSetImplBase *)v539;
          v539 = (unsigned int *)a5;
        }
        uint64_t v348 = 39;
        int v349 = 0;
        uint64_t v5 = v10;
        uint64_t v350 = v10;
        switch((int)v10)
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 10:
          case 11:
          case 12:
          case 13:
          case 34:
          case 35:
          case 36:
          case 37:
            goto LABEL_841;
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
            goto LABEL_1294;
          case 38:
LABEL_880:
            uint64_t v360 = **v346;
            uint64_t p_s2 = *(void *)(v360 + 1568);
            if (p_s2) {
              goto LABEL_885;
            }
            int v361 = v346;
            v362 = *(llvm::ConstantInt **)(v360 + 1888);
            unsigned int v363 = *(_DWORD *)(v360 + 1896);
            LODWORD(v556) = v363 >> 8;
            if (v363 >> 8 > 0x40) {
              operator new[]();
            }
            unint64_t v555 = 0;
            uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v362, (llvm::LLVMContext *)&v555, (const llvm::APInt *)a3);
            if (v556 >= 0x41 && v555) {
              MEMORY[0x1D25D9CB0](v555, 0x1000C8000313F17);
            }
            *(void *)(v360 + 1568) = p_s2;
            goto LABEL_1003;
          case 39:
LABEL_829:
            uint64_t v90 = sub_1CC04A648((uint64_t)v9, v5, v347, (uint64_t)a5);
            if (v90) {
              return (llvm::UndefValue *)v90;
            }
            uint64_t p_s2 = sub_1CC04A648((uint64_t)v14, v5, v347, (uint64_t)a5);
            if (p_s2) {
              return (llvm::UndefValue *)p_s2;
            }
            if (!v536) {
              goto LABEL_841;
            }
            uint64_t v351 = (v536 - 1);
            uint64_t v352 = v5;
            goto LABEL_840;
          case 40:
            goto LABEL_836;
          case 41:
LABEL_884:
            uint64_t v364 = **v346;
            uint64_t p_s2 = *(void *)(v364 + 1560);
            if (p_s2) {
              goto LABEL_885;
            }
            int v361 = v346;
            v423 = *(llvm::ConstantInt **)(v364 + 1888);
            unsigned int v424 = *(_DWORD *)(v364 + 1896);
            LODWORD(v556) = v424 >> 8;
            if (v424 >> 8 > 0x40) {
              operator new[]();
            }
            if (v424 <= 0xFF) {
              char v425 = 0;
            }
            else {
              char v425 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v424) + 63);
            }
            unint64_t v555 = v425 & 1;
            uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v423, (llvm::LLVMContext *)&v555, (const llvm::APInt *)a3);
            if (v556 >= 0x41 && v555) {
              MEMORY[0x1D25D9CB0](v555, 0x1000C8000313F17);
            }
            *(void *)(v364 + 1560) = p_s2;
LABEL_1003:
            size_t v346 = v361;
LABEL_885:
            if ((v346[1] & 0xFE) != 0x12) {
              goto LABEL_1072;
            }
            int v365 = *((_DWORD *)v346 + 2);
            uint64_t v366 = *((unsigned int *)v346 + 8);
            goto LABEL_1184;
          default:
            goto LABEL_828;
        }
      }
    }
    unint64_t v555 = (unint64_t)&v545;
    uint64_t v556 = (uint64_t)&v539;
    if (sub_1CC04A7E0((void **)&v555, (uint64_t)v9))
    {
      a5 = v545;
      uint64_t v347 = (uint64_t)v539;
      if (v545 == v14 || v539 == (unsigned int *)v14)
      {
        if (v545 == v14)
        {
          a5 = (llvm::SmallPtrSetImplBase *)v539;
          uint64_t v347 = (uint64_t)v14;
        }
        else
        {
          v545 = (llvm::SmallPtrSetImplBase *)v539;
          v539 = (unsigned int *)a5;
        }
        uint64_t v348 = 41;
        int v349 = 1;
        uint64_t v5 = 41;
        switch((int)v10)
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 10:
          case 11:
          case 12:
          case 13:
          case 34:
          case 35:
          case 36:
          case 37:
            goto LABEL_841;
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
            goto LABEL_1294;
          case 38:
            goto LABEL_880;
          case 39:
            goto LABEL_829;
          case 40:
LABEL_834:
            uint64_t v350 = 38;
            goto LABEL_836;
          case 41:
            goto LABEL_884;
          default:
            goto LABEL_828;
        }
      }
    }
    unint64_t v555 = (unint64_t)&v545;
    uint64_t v556 = (uint64_t)&v539;
    if (!sub_1CC04A7E0((void **)&v555, (uint64_t)v14)) {
      goto LABEL_841;
    }
    a5 = v545;
    uint64_t v347 = (uint64_t)v539;
    if (v545 != v9 && v539 != (unsigned int *)v9) {
      goto LABEL_841;
    }
    if (v545 == v9)
    {
      uint64_t v348 = 41;
      int v349 = 1;
      a5 = (llvm::SmallPtrSetImplBase *)v539;
      uint64_t v347 = (uint64_t)v9;
    }
    else
    {
      v545 = (llvm::SmallPtrSetImplBase *)v539;
      v539 = (unsigned int *)a5;
      uint64_t v348 = 41;
      int v349 = 1;
    }
  }
LABEL_828:
  uint64_t v5 = v348;
  switch((int)v10)
  {
    case ' ':
    case ')':
      goto LABEL_829;
    case '!':
    case '&':
      if (v349) {
        goto LABEL_834;
      }
      uint64_t v350 = 40;
      break;
    case '\'':
      goto LABEL_884;
    case '(':
      goto LABEL_880;
    default:
      goto LABEL_841;
  }
LABEL_836:
  uint64_t v90 = sub_1CC04A648((uint64_t)v9, v350, v347, (uint64_t)a5);
  if (v90) {
    return (llvm::UndefValue *)v90;
  }
  uint64_t p_s2 = sub_1CC04A648((uint64_t)v14, v350, v347, (uint64_t)a5);
  if (p_s2) {
    return (llvm::UndefValue *)p_s2;
  }
  if (v536)
  {
    uint64_t v351 = (v536 - 1);
    uint64_t v352 = v350;
LABEL_840:
    uint64_t p_s2 = sub_1CC02F0F0(v352, v347, a5, a4, v351);
    if (p_s2) {
      return (llvm::UndefValue *)p_s2;
    }
  }
LABEL_841:
  unint64_t v555 = (unint64_t)&v545;
  uint64_t v556 = (uint64_t)&v539;
  if (sub_1CC04A914((void **)&v555, (uint64_t)v9)
    && ((a5 = v545, uint64_t v353 = (uint64_t)v539, v545 == v14) || v539 == (unsigned int *)v14))
  {
    int v355 = 0;
    if (v545 == v14)
    {
      uint64_t v354 = 35;
      a5 = (llvm::SmallPtrSetImplBase *)v539;
      uint64_t v353 = (uint64_t)v14;
    }
    else
    {
      v545 = (llvm::SmallPtrSetImplBase *)v539;
      v539 = (unsigned int *)a5;
      uint64_t v354 = 35;
    }
  }
  else
  {
    unint64_t v555 = (unint64_t)&v545;
    uint64_t v556 = (uint64_t)&v539;
    if (sub_1CC04A914((void **)&v555, (uint64_t)v14))
    {
      a5 = v545;
      uint64_t v353 = (uint64_t)v539;
      if (v545 == v9 || v539 == (unsigned int *)v9)
      {
        if (v545 == v9)
        {
          a5 = (llvm::SmallPtrSetImplBase *)v539;
          uint64_t v353 = (uint64_t)v9;
        }
        else
        {
          v545 = (llvm::SmallPtrSetImplBase *)v539;
          v539 = (unsigned int *)a5;
        }
        uint64_t v354 = 35;
        int v355 = 0;
        uint64_t v5 = v10;
        uint64_t v356 = v10;
        switch((int)v10)
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 10:
          case 11:
          case 12:
          case 13:
          case 38:
          case 39:
          case 40:
          case 41:
            goto LABEL_895;
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
            goto LABEL_1294;
          case 34:
            goto LABEL_880;
          case 35:
LABEL_876:
            uint64_t p_s2 = sub_1CC04A648((uint64_t)v9, v5, v353, (uint64_t)a5);
            if (p_s2) {
              return (llvm::UndefValue *)p_s2;
            }
            uint64_t p_s2 = sub_1CC04A648((uint64_t)v14, v5, v353, (uint64_t)a5);
            if (p_s2) {
              return (llvm::UndefValue *)p_s2;
            }
            if (!v536) {
              goto LABEL_895;
            }
            uint64_t v358 = (v536 - 1);
            uint64_t v359 = v5;
            break;
          case 36:
            goto LABEL_890;
          case 37:
            goto LABEL_884;
          default:
            goto LABEL_875;
        }
LABEL_894:
        uint64_t p_s2 = sub_1CC02F0F0(v359, v353, a5, a4, v358);
        if (p_s2) {
          return (llvm::UndefValue *)p_s2;
        }
        goto LABEL_895;
      }
    }
    unint64_t v555 = (unint64_t)&v545;
    uint64_t v556 = (uint64_t)&v539;
    if (sub_1CC04AA3C((void **)&v555, (uint64_t)v9))
    {
      a5 = v545;
      uint64_t v353 = (uint64_t)v539;
      if (v545 == v14 || v539 == (unsigned int *)v14)
      {
        if (v545 == v14)
        {
          a5 = (llvm::SmallPtrSetImplBase *)v539;
          uint64_t v353 = (uint64_t)v14;
        }
        else
        {
          v545 = (llvm::SmallPtrSetImplBase *)v539;
          v539 = (unsigned int *)a5;
        }
        uint64_t v354 = 37;
        int v355 = 1;
        uint64_t v5 = 37;
        switch((int)v10)
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 10:
          case 11:
          case 12:
          case 13:
          case 38:
          case 39:
          case 40:
          case 41:
            goto LABEL_895;
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
            goto LABEL_1294;
          case 34:
            goto LABEL_880;
          case 35:
            goto LABEL_876;
          case 36:
LABEL_888:
            uint64_t v356 = 34;
            goto LABEL_890;
          case 37:
            goto LABEL_884;
          default:
            goto LABEL_875;
        }
      }
    }
    unint64_t v555 = (unint64_t)&v545;
    uint64_t v556 = (uint64_t)&v539;
    if (!sub_1CC04AA3C((void **)&v555, (uint64_t)v14)) {
      goto LABEL_895;
    }
    a5 = v545;
    uint64_t v353 = (uint64_t)v539;
    if (v545 != v9 && v539 != (unsigned int *)v9) {
      goto LABEL_895;
    }
    if (v545 == v9)
    {
      uint64_t v354 = 37;
      int v355 = 1;
      a5 = (llvm::SmallPtrSetImplBase *)v539;
      uint64_t v353 = (uint64_t)v9;
    }
    else
    {
      v545 = (llvm::SmallPtrSetImplBase *)v539;
      v539 = (unsigned int *)a5;
      uint64_t v354 = 37;
      int v355 = 1;
    }
  }
LABEL_875:
  uint64_t v5 = v354;
  switch((int)v10)
  {
    case ' ':
    case '%':
      goto LABEL_876;
    case '!':
    case '""':
      if (v355) {
        goto LABEL_888;
      }
      uint64_t v356 = 36;
      break;
    case '#':
      goto LABEL_884;
    case '$':
      goto LABEL_880;
    default:
      goto LABEL_895;
  }
LABEL_890:
  uint64_t p_s2 = sub_1CC04A648((uint64_t)v9, v356, v353, (uint64_t)a5);
  if (p_s2) {
    return (llvm::UndefValue *)p_s2;
  }
  uint64_t p_s2 = sub_1CC04A648((uint64_t)v14, v356, v353, (uint64_t)a5);
  if (p_s2) {
    return (llvm::UndefValue *)p_s2;
  }
  if (v536)
  {
    uint64_t v358 = (v536 - 1);
    uint64_t v359 = v356;
    goto LABEL_894;
  }
LABEL_895:
  a5 = (llvm::SmallPtrSetImplBase *)v346;
  if (sub_1CC04AB64((uint64_t)&v555, (uint64_t)v9)
    || (p_s2 = (uint64_t)v14, uint64_t v367 = (uint64_t)v9, v368 = v10, sub_1CC04AC20((uint64_t)&__s1, (uint64_t)v9)))
  {
    uint64_t p_s2 = (uint64_t)v9;
    uint64_t v367 = (uint64_t)v14;
    int v368 = v10;
    switch((int)v10)
    {
      case 0:
      case 1:
      case 6:
      case 7:
      case 8:
      case 9:
      case 14:
      case 15:
      case 32:
      case 33:
        break;
      case 2:
        int v368 = 4;
        goto LABEL_1041;
      case 3:
        int v368 = 5;
        goto LABEL_1041;
      case 4:
        int v368 = 2;
        goto LABEL_1041;
      case 5:
        int v368 = 3;
        goto LABEL_1041;
      case 10:
        int v368 = 12;
        goto LABEL_1041;
      case 11:
        int v368 = 13;
        goto LABEL_1041;
      case 12:
        int v368 = 10;
        goto LABEL_1041;
      case 13:
        int v368 = 11;
        goto LABEL_1041;
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
        goto LABEL_1294;
      case 34:
        int v368 = 36;
        goto LABEL_1041;
      case 35:
        int v368 = 37;
        goto LABEL_1041;
      case 36:
        int v368 = 34;
        goto LABEL_1041;
      case 37:
        int v368 = 35;
        goto LABEL_1041;
      case 38:
        int v368 = 40;
        goto LABEL_1041;
      case 39:
        int v368 = 41;
        goto LABEL_1041;
      case 40:
        int v368 = 38;
        goto LABEL_1041;
      case 41:
        int v368 = 39;
LABEL_1041:
        uint64_t p_s2 = (uint64_t)v9;
        uint64_t v367 = (uint64_t)v14;
        break;
      default:
        JUMPOUT(0);
    }
  }
  v537 = 0;
  v550 = 0;
  unint64_t v555 = (unint64_t)&v545;
  uint64_t v556 = (uint64_t)&v539;
  if (!sub_1CC04A6C4((void **)&v555, v367)
    || (__s1 = &v537, uint64_t v552 = (uint64_t)&v550, !sub_1CC04A7E0((void **)&__s1, p_s2))
    || v545 != (llvm::SmallPtrSetImplBase *)v537 && v545 != v550 && v539 != v537 && v539 != (unsigned int *)v550)
  {
    unint64_t v555 = (unint64_t)&v545;
    uint64_t v556 = (uint64_t)&v539;
    if (!sub_1CC04A914((void **)&v555, v367)) {
      goto LABEL_1073;
    }
    __s1 = &v537;
    uint64_t v552 = (uint64_t)&v550;
    if (!sub_1CC04AA3C((void **)&__s1, p_s2)
      || v545 != (llvm::SmallPtrSetImplBase *)v537 && v545 != v550 && v539 != v537 && v539 != (unsigned int *)v550)
    {
      goto LABEL_1073;
    }
    if (v368 != 36)
    {
      if (v368 == 35)
      {
        v441 = a5;
        uint64_t v5 = **(void **)a5;
        uint64_t p_s2 = *(void *)(v5 + 1560);
        if (p_s2) {
          goto LABEL_1071;
        }
        uint64_t p_s2 = *(void *)(v5 + 1888);
        unsigned int v442 = *(_DWORD *)(v5 + 1896);
        LODWORD(v556) = v442 >> 8;
        if (v442 >> 8 <= 0x40)
        {
          if (v442 <= 0xFF) {
LABEL_1295:
          }
            LOBYTE(v443) = 0;
          else {
            unint64_t v443 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v442) + 63);
          }
          goto LABEL_1067;
        }
        goto LABEL_1274;
      }
      goto LABEL_1073;
    }
LABEL_1070:
    v441 = a5;
    uint64_t v444 = **(void **)a5;
    uint64_t p_s2 = *(void *)(v444 + 1568);
    if (p_s2) {
      goto LABEL_1071;
    }
    v464 = *(llvm::ConstantInt **)(v444 + 1888);
    unsigned int v465 = *(_DWORD *)(v444 + 1896);
    LODWORD(v556) = v465 >> 8;
    if (v465 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v555 = 0;
    uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get(v464, (llvm::LLVMContext *)&v555, (const llvm::APInt *)a3);
    if (v556 >= 0x41 && v555) {
      MEMORY[0x1D25D9CB0](v555, 0x1000C8000313F17);
    }
    *(void *)(v444 + 1568) = p_s2;
LABEL_1099:
    v441 = a5;
LABEL_1071:
    if ((*((_DWORD *)v441 + 2) & 0xFE) == 0x12)
    {
      int v365 = *((_DWORD *)v441 + 2);
      uint64_t v366 = *((unsigned int *)v441 + 8);
LABEL_1184:
      uint64_t p_s2 = (uint64_t)llvm::ConstantVector::getSplat((llvm::Type *)(v366 | ((unint64_t)(v365 == 19) << 32)), p_s2);
      if (p_s2) {
        return (llvm::UndefValue *)p_s2;
      }
    }
    else
    {
LABEL_1072:
      if (p_s2) {
        return (llvm::UndefValue *)p_s2;
      }
    }
    goto LABEL_1073;
  }
  if (v368 == 40) {
    goto LABEL_1070;
  }
  if (v368 == 39)
  {
    v441 = a5;
    uint64_t v5 = **(void **)a5;
    uint64_t p_s2 = *(void *)(v5 + 1560);
    if (p_s2) {
      goto LABEL_1071;
    }
    uint64_t p_s2 = *(void *)(v5 + 1888);
    LODWORD(v443) = *(_DWORD *)(v5 + 1896);
    LODWORD(v556) = v443 >> 8;
    if (v443 >> 8 <= 0x40)
    {
      if (v443 <= 0xFF) {
        LOBYTE(v443) = 0;
      }
      else {
        LOBYTE(v443) = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v443) + 63);
      }
LABEL_1067:
      unint64_t v555 = v443 & 1;
      uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get((llvm::ConstantInt *)p_s2, (llvm::LLVMContext *)&v555, (const llvm::APInt *)a3);
      if (v556 >= 0x41 && v555) {
        MEMORY[0x1D25D9CB0](v555, 0x1000C8000313F17);
      }
      *(void *)(v5 + 1560) = p_s2;
      goto LABEL_1099;
    }
LABEL_1274:
    operator new[]();
  }
LABEL_1073:
  if (!*(void *)(a4 + 24)) {
    goto LABEL_1103;
  }
  uint64_t v445 = *(void *)(a4 + 32);
  if (!v445 || !*(void *)(v445 + 40)) {
    goto LABEL_1103;
  }
  char v446 = 0;
  uint64_t v447 = 0;
  unint64_t v555 = (unint64_t)v9;
  uint64_t v556 = (uint64_t)v14;
  while (1)
  {
    char v448 = v446;
    v449 = (void *)*(&v555 + v447);
    uint64_t v450 = *(void *)(a4 + 24);
    if (!*(unsigned char *)(v450 + 184)) {
      llvm::AssumptionCache::scanFunction(*(llvm::AssumptionCache **)(a4 + 24));
    }
    uint64_t v451 = *(void *)(v450 + 160);
    unsigned int v452 = *(_DWORD *)(v450 + 176);
    if (v452)
    {
      unsigned int v454 = v452 - 1;
      unsigned int v455 = (v452 - 1) & ((v449 >> 4) ^ (v449 >> 9));
      uint64_t v453 = v451 + 88 * v455;
      v456 = *(void **)(v453 + 24);
      if (v456 == v449) {
        goto LABEL_1081;
      }
      int v457 = 1;
      while (v456 != (void *)-4096)
      {
        unsigned int v458 = v455 + v457++;
        unsigned int v455 = v458 & v454;
        uint64_t v453 = v451 + 88 * (v458 & v454);
        v456 = *(void **)(v453 + 24);
        if (v456 == v449) {
          goto LABEL_1081;
        }
      }
    }
    uint64_t v453 = v451 + 88 * v452;
LABEL_1081:
    if (v453 != v451 + 88 * v452)
    {
      uint64_t v459 = *(unsigned int *)(v453 + 48);
      if (v459) {
        break;
      }
    }
LABEL_1082:
    char v446 = 1;
    uint64_t v447 = 1;
    if (v448) {
      goto LABEL_1103;
    }
  }
  uint64_t v460 = 32 * v459;
  v461 = (llvm **)(*(void *)(v453 + 40) + 16);
  while (1)
  {
    v462 = *v461;
    if (*v461)
    {
      unsigned __int16 v535 = llvm::isImpliedCondition(*((uint64_t **)v462 - 4 * (*((_DWORD *)v462 + 5) & 0x7FFFFFF)), v10, (uint64_t)v9, (uint64_t)v14, *(const llvm::DataLayout **)a4, 1, 0);
      if (v535 >= 0x100u)
      {
        if (llvm::isValidAssumeForContext(v462, *(const llvm::Instruction **)(a4 + 32), *(const llvm::Instruction **)(a4 + 16), v463))break; {
      }
        }
    }
    v461 += 4;
    v460 -= 32;
    if (!v460) {
      goto LABEL_1082;
    }
  }
  uint64_t v466 = *(void *)v9;
  v467 = (uint64_t **)(***(void ***)v9 + 1888);
  if (*(void *)v9 && (*(_DWORD *)(v466 + 8) & 0xFE) == 0x12)
  {
    v522 = (llvm::Type *)*(unsigned int *)(v466 + 32);
    if (*(_DWORD *)(v466 + 8) == 19) {
      llvm::ScalableVectorType::get(v467, v522);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v467, v522);
    }
  }
  uint64_t p_s2 = (uint64_t)llvm::ConstantInt::get((llvm::ConstantInt *)v467, v535, 0);
  if (p_s2) {
    return (llvm::UndefValue *)p_s2;
  }
LABEL_1103:
  if (*(unsigned char *)(*(void *)v9 + 8) == 15)
  {
    uint64_t p_s2 = (uint64_t)sub_1CC047528(v10, v9, v14, a4);
    if (p_s2) {
      return (llvm::UndefValue *)p_s2;
    }
  }
  int v468 = *((unsigned __int8 *)v9 + 16);
  if (v468 == 75) {
    goto LABEL_1108;
  }
  if (v468 != 5)
  {
LABEL_1120:
    if (v468 == 85) {
      goto LABEL_1122;
    }
    goto LABEL_1121;
  }
  if (*((_WORD *)v9 + 9) != 47)
  {
    int v468 = 5;
LABEL_1121:
    if (*((unsigned char *)v14 + 16) != 85)
    {
LABEL_1124:
      if (v468 != 83 && *((unsigned char *)v14 + 16) != 83) {
        return 0;
      }
      uint64_t p_s2 = sub_1CC048604(v10, v9, v14, a4, v536);
      if (!p_s2) {
        return 0;
      }
      return (llvm::UndefValue *)p_s2;
    }
LABEL_1122:
    uint64_t p_s2 = (uint64_t)sub_1CC047F34(v10, (unsigned __int8 *)v9, v14, a4, v536);
    if (p_s2) {
      return (llvm::UndefValue *)p_s2;
    }
    int v468 = *((unsigned __int8 *)v9 + 16);
    goto LABEL_1124;
  }
LABEL_1108:
  int v469 = *((unsigned __int8 *)v14 + 16);
  if (v469 != 75 && (v469 != 5 || *((_WORD *)v14 + 9) != 47)) {
    goto LABEL_1119;
  }
  int v470 = *((_DWORD *)v9 + 5);
  v471 = (v470 & 0x40000000) != 0 ? (uint64_t **)*((void *)v9 - 1) : (uint64_t **)((char *)v9 - 32 * (v470 & 0x7FFFFFF));
  uint64_t v472 = sub_1CB83544C(*(void *)a4, **v471);
  int v474 = v473;
  if (v472 != sub_1CB83544C(*(void *)a4, *(void *)v9) || v474 != v475) {
    goto LABEL_1119;
  }
  int v477 = *((_DWORD *)v14 + 5);
  v478 = (v477 & 0x40000000) != 0
       ? (uint64_t **)*((void *)v14 - 1)
       : (uint64_t **)((char *)v14 - 32 * (v477 & 0x7FFFFFF));
  uint64_t v479 = sub_1CB83544C(*(void *)a4, **v478);
  int v481 = v480;
  if (v479 != sub_1CB83544C(*(void *)a4, *(void *)v14) || v481 != v482) {
    goto LABEL_1119;
  }
  int v483 = *((_DWORD *)v9 + 5);
  v484 = (v483 & 0x40000000) != 0
       ? (llvm::Value **)*((void *)v9 - 1)
       : (llvm::Value **)((char *)v9 - 32 * (v483 & 0x7FFFFFF));
  v485 = *v484;
  int v486 = *((_DWORD *)v14 + 5);
  v487 = (v486 & 0x40000000) != 0
       ? (llvm::Value **)*((void *)v14 - 1)
       : (llvm::Value **)((char *)v14 - 32 * (v486 & 0x7FFFFFF));
  uint64_t p_s2 = (uint64_t)sub_1CC047528(v10, v485, *v487, a4);
  if (!p_s2)
  {
LABEL_1119:
    int v468 = *((unsigned __int8 *)v9 + 16);
    goto LABEL_1120;
  }
  return (llvm::UndefValue *)p_s2;
}

llvm::Value *llvm::SimplifyFCmpInst(uint64_t a1, llvm::ConstantExpr *a2, unsigned __int8 *a3, char a4, uint64_t a5)
{
  return sub_1CC0347BC(a1, a2, a3, a4, a5, 3);
}

llvm::Value *sub_1CC0347BC(uint64_t a1, llvm::ConstantExpr *a2, unsigned __int8 *a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = (llvm::Instruction *)a3;
  uint64_t v10 = a1;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
  {
    if (a3 && a3[16] < 0x15u)
    {
      int v11 = *(llvm::DataLayout **)a5;
      uint64_t v12 = *(void *)(a5 + 8);
      return llvm::ConstantFoldCompareInstOperands(a1, a2, (llvm::Constant *)a3, v11, v12);
    }
    uint64_t v14 = (unsigned __int8 *)a2;
    switch((int)a1)
    {
      case 2:
        uint64_t v10 = 4;
        break;
      case 3:
        uint64_t v10 = 5;
        break;
      case 4:
        uint64_t v10 = 2;
        break;
      case 5:
        uint64_t v10 = 3;
        break;
      case 10:
        uint64_t v10 = 12;
        break;
      case 11:
        uint64_t v10 = 13;
        break;
      case 12:
        uint64_t v10 = 10;
        break;
      case 13:
        uint64_t v10 = 11;
        break;
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
LABEL_180:
        __break(1u);
        goto LABEL_181;
      case 34:
        uint64_t v10 = 36;
        break;
      case 35:
        uint64_t v10 = 37;
        break;
      case 36:
        uint64_t v10 = 34;
        break;
      case 37:
        uint64_t v10 = 35;
        break;
      case 38:
        uint64_t v10 = 40;
        break;
      case 39:
        uint64_t v10 = 41;
        break;
      case 40:
        uint64_t v10 = 38;
        break;
      case 41:
        uint64_t v10 = 39;
        break;
      default:
        goto LABEL_27;
    }
    uint64_t v14 = (unsigned __int8 *)a2;
  }
  else
  {
    uint64_t v14 = a3;
    uint64_t v9 = a2;
  }
LABEL_27:
  uint64_t v15 = ***(void ***)v9;
  uint64_t v16 = (llvm::PoisonValue *)(v15 + 1888);
  if (*(void *)v9) {
    BOOL v17 = (*(_DWORD *)(*(void *)v9 + 8) & 0xFE) == 18;
  }
  else {
    BOOL v17 = 0;
  }
  if (v17)
  {
    a2 = (llvm::ConstantExpr *)*(unsigned int *)(*(void *)v9 + 32);
    a1 = v15 + 1888;
    if (*(_DWORD *)(*(void *)v9 + 8) == 19) {
LABEL_181:
    }
      llvm::ScalableVectorType::get((uint64_t **)a1, a2);
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)a1, a2);
    }
    uint64_t v16 = v33;
  }
  if (v10 == 15) {
    goto LABEL_62;
  }
  if (!v10) {
    goto LABEL_33;
  }
  if ((v10 - 7) > 1
    || (a4 & 2) == 0
    && (!llvm::isKnownNeverNaN((uint64_t)v9, *(uint64_t **)(a5 + 8), 0)
     || !llvm::isKnownNeverNaN((uint64_t)v14, *(uint64_t **)(a5 + 8), 0)))
  {
    if (sub_1CC04AE9C((uint64_t)&v64, (llvm::Constant *)v14)) {
      goto LABEL_45;
    }
    int v25 = *((unsigned __int8 *)v9 + 16);
    if (v25 == 12) {
      return (llvm::Value *)llvm::PoisonValue::get(v16, v22);
    }
    int v26 = v14[16];
    if (v26 == 12) {
      return (llvm::Value *)llvm::PoisonValue::get(v16, v22);
    }
    if (!*(unsigned char *)(a5 + 41)) {
      goto LABEL_56;
    }
    unsigned int v27 = (v25 - 11);
    if (v27 >= 2)
    {
      if (v27 >= 0xFD)
      {
        uint64_t v64 = (uint64_t)v68;
        uint64_t v65 = v68;
        uint64_t v66 = 8;
        LODWORD(v67) = 0;
        *(void *)&long long v69 = &v70;
        *((void *)&v69 + 1) = 0x800000000;
        *(void *)&long long v63 = &v64;
        *((void *)&v63 + 1) = &v69;
        BOOL v49 = 0;
        if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v63, (uint64_t)v9))
        {
          do
          {
            BOOL v49 = DWORD2(v69) == 0;
            if (!DWORD2(v69)) {
              break;
            }
            uint64_t v59 = *(void *)(v69 + 8 * DWORD2(v69) - 8);
            --DWORD2(v69);
          }
          while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v63, v59) & 1) != 0);
        }
        if ((int *)v69 != &v70) {
          free((void *)v69);
        }
        if (v65 == (void *)v64)
        {
          if (v49) {
            goto LABEL_45;
          }
        }
        else
        {
          free(v65);
          if (v49) {
            goto LABEL_45;
          }
        }
        if (!*(unsigned char *)(a5 + 41)) {
          goto LABEL_56;
        }
        LOBYTE(v26) = v14[16];
      }
      unsigned int v28 = (v26 - 11);
      if (v28 >= 2)
      {
        if (v28 < 0xFD) {
          goto LABEL_56;
        }
        uint64_t v64 = (uint64_t)v68;
        uint64_t v65 = v68;
        uint64_t v66 = 8;
        LODWORD(v67) = 0;
        *(void *)&long long v69 = &v70;
        *((void *)&v69 + 1) = 0x800000000;
        *(void *)&long long v63 = &v64;
        *((void *)&v63 + 1) = &v69;
        BOOL v50 = 0;
        if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v63, (uint64_t)v14))
        {
          do
          {
            BOOL v50 = DWORD2(v69) == 0;
            if (!DWORD2(v69)) {
              break;
            }
            uint64_t v60 = *(void *)(v69 + 8 * DWORD2(v69) - 8);
            --DWORD2(v69);
          }
          while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v63, v60) & 1) != 0);
        }
        if ((int *)v69 != &v70) {
          free((void *)v69);
        }
        if (v65 == (void *)v64)
        {
          if (!v50) {
            goto LABEL_56;
          }
        }
        else
        {
          free(v65);
          if (!v50)
          {
LABEL_56:
            if (v9 == (llvm::Instruction *)v14 && v10 <= 0x29)
            {
              if (((1 << v10) & 0x2A90000AA00) != 0) {
                goto LABEL_62;
              }
              if (((1 << v10) & 0x15600000055) != 0) {
                goto LABEL_33;
              }
            }
            uint64_t v62 = 0;
            uint64_t v64 = (uint64_t)&v62;
            uint64_t v65 = 0;
            if (!sub_1CC04AFFC((uint64_t)&v64, v14)) {
              goto LABEL_136;
            }
            uint64_t v29 = v62;
            uint64_t v30 = *(void **)(v62 + 8);
            if (v30 == &unk_1CFB2E344) {
              char v31 = *(unsigned char *)(*(void *)(v62 + 16) + 28);
            }
            else {
              char v31 = *(unsigned char *)(v62 + 28);
            }
            if ((v31 & 7) != 0)
            {
              if ((v31 & 8) == 0) {
                goto LABEL_96;
              }
LABEL_71:
              if ((v31 & 7) == 3 || v10 > 0xE) {
                goto LABEL_96;
              }
              if (((1 << v10) & 0x32) == 0)
              {
                if (((1 << v10) & 0x4C00) != 0
                  && sub_1CC164EB8((uint64_t)v9, *(uint64_t **)(a5 + 8), 0, 0))
                {
LABEL_112:
                  uint64_t v32 = **(void **)v16;
                  uint64_t v19 = *(void *)(v32 + 1560);
                  if (v19) {
                    goto LABEL_63;
                  }
                  int v34 = *(llvm::ConstantInt **)(v32 + 1888);
                  unsigned int v48 = *(_DWORD *)(v32 + 1896);
                  LODWORD(v65) = v48 >> 8;
                  if (v48 >> 8 <= 0x40)
                  {
                    if (v48 <= 0xFF) {
                      LOBYTE(v36) = 0;
                    }
                    else {
                      unint64_t v36 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v48) + 63);
                    }
LABEL_87:
                    uint64_t v64 = v36 & 1;
                    uint64_t v19 = (uint64_t)llvm::ConstantInt::get(v34, (llvm::LLVMContext *)&v64, (const llvm::APInt *)a3);
                    if (v65 >= 0x41 && v64) {
                      MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
                    }
                    *(void *)(v32 + 1560) = v19;
                    goto LABEL_63;
                  }
LABEL_164:
                  operator new[]();
                }
                goto LABEL_96;
              }
              if (!sub_1CC164EB8((uint64_t)v9, *(uint64_t **)(a5 + 8), 0, 0))
              {
LABEL_96:
                uint64_t v61 = 0;
                LODWORD(v69) = 202;
                *(void *)((char *)&v69 + 4) = 0;
                uint64_t v64 = 202;
                LODWORD(v65) = 0;
                LODWORD(v66) = 1;
                uint64_t v67 = &v61;
                v68[0] = 0;
                if (sub_1CC04B080(&v64, (uint64_t)v9))
                {
                  uint64_t v37 = v61;
                  unsigned int v38 = (llvm::detail::IEEEFloat *)(v61 + 8);
                  a2 = (llvm::ConstantExpr *)(v62 + 8);
                  if (*(_UNKNOWN **)(v61 + 8) != &unk_1CFB2E344)
                  {
                    unsigned int v39 = *(unsigned __int8 *)(v61 + 28);
                    unsigned int v40 = *(unsigned __int8 *)(v62 + 28);
                    switch(4 * (v39 & 7) + (v40 & 7))
                    {
                      case 1u:
                      case 4u:
                      case 5u:
                      case 6u:
                      case 7u:
                      case 9u:
                      case 0xDu:
                      case 0xFu:
                        goto LABEL_103;
                      case 2u:
                      case 3u:
                      case 0xBu:
                        a1 = ~(v39 >> 2) & 2;
                        goto LABEL_102;
                      case 8u:
                      case 0xCu:
                      case 0xEu:
                        a1 = (v40 >> 2) & 2;
                        goto LABEL_102;
                      case 0xAu:
                        int v41 = (v39 >> 3) & 1;
                        if (v41 != ((v40 >> 3) & 1)) {
                          goto LABEL_170;
                        }
                        a1 = llvm::detail::IEEEFloat::compareAbsoluteValue(v38, a2);
                        if ((*(unsigned char *)(v37 + 28) & 8) == 0) {
                          goto LABEL_102;
                        }
                        if (a1 == 2) {
                          goto LABEL_110;
                        }
                        goto LABEL_103;
                      default:
                        int v41 = (v39 >> 3) & 1;
                        if (v41 == ((v40 >> 3) & 1)) {
                          goto LABEL_103;
                        }
LABEL_170:
                        a1 = (2 * v41) ^ 2u;
                        goto LABEL_102;
                    }
                  }
                  a1 = llvm::detail::DoubleAPFloat::compare(v38, a2);
LABEL_102:
                  if (!a1)
                  {
LABEL_110:
                    int v47 = *(_DWORD *)(*((void *)v9 - 4) + 36);
                    switch((int)v10)
                    {
                      case 2:
                      case 3:
                      case 10:
                      case 11:
                        unint64_t v23 = v47 == 193;
                        return (llvm::Value *)llvm::ConstantInt::get(v16, v23, 0);
                      case 4:
                      case 5:
                      case 12:
                      case 13:
                        unint64_t v23 = v47 != 193;
                        return (llvm::Value *)llvm::ConstantInt::get(v16, v23, 0);
                      case 6:
                      case 14:
                        goto LABEL_112;
                      case 7:
                      case 8:
                        goto LABEL_180;
                      default:
                        goto LABEL_33;
                    }
                  }
                }
LABEL_103:
                LODWORD(v63) = 193;
                *(void *)((char *)&v63 + 4) = 0;
                *(void *)&long long v69 = 193;
                DWORD2(v69) = 0;
                int v70 = 1;
                uint64_t v71 = &v61;
                uint64_t v72 = 0;
                if (sub_1CC04B080(&v69, (uint64_t)v9))
                {
                  uint64_t v42 = v61;
                  int v43 = (llvm::detail::IEEEFloat *)(v61 + 8);
                  a2 = (llvm::ConstantExpr *)(v62 + 8);
                  if (*(_UNKNOWN **)(v61 + 8) != &unk_1CFB2E344)
                  {
                    unsigned int v44 = *(unsigned __int8 *)(v61 + 28);
                    unsigned int v45 = *(unsigned __int8 *)(v62 + 28);
                    switch(4 * (v44 & 7) + (v45 & 7))
                    {
                      case 1u:
                      case 4u:
                      case 5u:
                      case 6u:
                      case 7u:
                      case 9u:
                      case 0xDu:
                      case 0xFu:
                        goto LABEL_136;
                      case 2u:
                      case 3u:
                      case 0xBu:
                        a1 = ~(v44 >> 2) & 2;
                        goto LABEL_109;
                      case 8u:
                      case 0xCu:
                      case 0xEu:
                        a1 = (v45 >> 2) & 2;
                        goto LABEL_109;
                      case 0xAu:
                        int v46 = (v44 >> 3) & 1;
                        if (v46 != ((v45 >> 3) & 1)) {
                          goto LABEL_172;
                        }
                        a1 = llvm::detail::IEEEFloat::compareAbsoluteValue(v43, a2);
                        if ((*(unsigned char *)(v42 + 28) & 8) == 0) {
                          goto LABEL_109;
                        }
                        if (a1) {
                          goto LABEL_136;
                        }
                        goto LABEL_110;
                      default:
                        int v46 = (v44 >> 3) & 1;
                        if (v46 == ((v45 >> 3) & 1)) {
                          goto LABEL_136;
                        }
LABEL_172:
                        a1 = (2 * v46) ^ 2u;
                        goto LABEL_109;
                    }
                  }
                  a1 = llvm::detail::DoubleAPFloat::compare(v43, a2);
LABEL_109:
                  if (a1 == 2) {
                    goto LABEL_110;
                  }
                }
LABEL_136:
                if (!sub_1CC0241FC((uint64_t)&v64, (llvm::Constant *)v14))
                {
LABEL_155:
                  int v58 = *((unsigned __int8 *)v9 + 16);
                  if (v58 == 85 || v14[16] == 85)
                  {
                    uint64_t v19 = sub_1CC047F34(v10, v9, v14, a5, a6);
                    if (v19) {
                      return (llvm::Value *)v19;
                    }
                    int v58 = *((unsigned __int8 *)v9 + 16);
                  }
                  if (v58 != 83 && v14[16] != 83) {
                    return 0;
                  }
                  uint64_t v19 = sub_1CC048604(v10, v9, (llvm::Value *)v14, a5, a6);
                  if (!v19) {
                    return 0;
                  }
                  return (llvm::Value *)v19;
                }
                switch((int)v10)
                {
                  case 3:
                  case 12:
                    if ((a4 & 2) == 0 && !llvm::isKnownNeverNaN((uint64_t)v9, *(uint64_t **)(a5 + 8), 0)
                      || !sub_1CC164EB8((uint64_t)v9, *(uint64_t **)(a5 + 8), 0, 0))
                    {
                      goto LABEL_155;
                    }
                    uint64_t v52 = **(void **)v16;
                    if (v10 != 3) {
                      goto LABEL_142;
                    }
                    goto LABEL_148;
                  case 4:
                  case 11:
                    if (!sub_1CC164EB8((uint64_t)v9, *(uint64_t **)(a5 + 8), 0, 0)) {
                      goto LABEL_155;
                    }
                    uint64_t v52 = **(void **)v16;
                    if (v10 == 11)
                    {
LABEL_148:
                      uint64_t v19 = *(void *)(v52 + 1560);
                      if (!v19)
                      {
                        int v55 = *(llvm::ConstantInt **)(v52 + 1888);
                        unsigned int v56 = *(_DWORD *)(v52 + 1896);
                        LODWORD(v65) = v56 >> 8;
                        if (v56 >> 8 > 0x40) {
                          operator new[]();
                        }
                        if (v56 <= 0xFF) {
                          LOBYTE(v57) = 0;
                        }
                        else {
                          unint64_t v57 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v56) + 63);
                        }
                        uint64_t v64 = v57 & 1;
                        uint64_t v19 = (uint64_t)llvm::ConstantInt::get(v55, (llvm::LLVMContext *)&v64, v51);
                        if (v65 >= 0x41 && v64) {
                          MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
                        }
                        *(void *)(v52 + 1560) = v19;
                      }
                    }
                    else
                    {
LABEL_142:
                      uint64_t v19 = *(void *)(v52 + 1568);
                      if (!v19)
                      {
                        uint64_t v53 = *(llvm::ConstantInt **)(v52 + 1888);
                        unsigned int v54 = *(_DWORD *)(v52 + 1896);
                        LODWORD(v65) = v54 >> 8;
                        if (v54 >> 8 > 0x40) {
                          operator new[]();
                        }
                        uint64_t v64 = 0;
                        uint64_t v19 = (uint64_t)llvm::ConstantInt::get(v53, (llvm::LLVMContext *)&v64, v51);
                        if (v65 >= 0x41 && v64) {
                          MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
                        }
                        *(void *)(v52 + 1568) = v19;
                      }
                    }
                    break;
                  default:
                    goto LABEL_155;
                }
                goto LABEL_63;
              }
LABEL_33:
              uint64_t v18 = **(void **)v16;
              uint64_t v19 = *(void *)(v18 + 1568);
              if (!v19)
              {
                uint64_t v20 = *(llvm::ConstantInt **)(v18 + 1888);
                unsigned int v21 = *(_DWORD *)(v18 + 1896);
                LODWORD(v65) = v21 >> 8;
                if (v21 >> 8 > 0x40) {
                  operator new[]();
                }
                uint64_t v64 = 0;
                uint64_t v19 = (uint64_t)llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&v64, (const llvm::APInt *)a3);
                if (v65 >= 0x41 && v64) {
                  MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
                }
                *(void *)(v18 + 1568) = v19;
              }
              goto LABEL_63;
            }
            if ((v31 & 8) != 0)
            {
              if (v10 != 11)
              {
                if (v10 == 4) {
                  goto LABEL_33;
                }
                goto LABEL_91;
              }
            }
            else if (v10 != 13)
            {
              if (v10 == 2) {
                goto LABEL_33;
              }
LABEL_91:
              if (v30 == &unk_1CFB2E344) {
                uint64_t v29 = *(void *)(v62 + 16);
              }
              char v31 = *(unsigned char *)(v29 + 28);
              if ((v31 & 8) == 0) {
                goto LABEL_96;
              }
              goto LABEL_71;
            }
LABEL_62:
            uint64_t v32 = **(void **)v16;
            uint64_t v19 = *(void *)(v32 + 1560);
            if (v19)
            {
LABEL_63:
              if ((*((_DWORD *)v16 + 2) & 0xFE) != 0x12) {
                return (llvm::Value *)v19;
              }
              return llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v16 + 8) | ((unint64_t)(*((_DWORD *)v16 + 2) == 19) << 32)), v19);
            }
            int v34 = *(llvm::ConstantInt **)(v32 + 1888);
            unsigned int v35 = *(_DWORD *)(v32 + 1896);
            LODWORD(v65) = v35 >> 8;
            if (v35 >> 8 <= 0x40)
            {
              if (v35 <= 0xFF) {
                LOBYTE(v36) = 0;
              }
              else {
                unint64_t v36 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v35) + 63);
              }
              goto LABEL_87;
            }
            goto LABEL_164;
          }
        }
      }
    }
LABEL_45:
    unint64_t v23 = (v10 - 8) < 7;
    return (llvm::Value *)llvm::ConstantInt::get(v16, v23, 0);
  }

  return (llvm::Value *)llvm::ConstantInt::get(v16, v10 == 7, 0);
}

const llvm::detail::DoubleAPFloat *llvm::simplifyWithOpReplaced(llvm *a1, unsigned __int8 *a2, unsigned __int8 *a3, llvm::DSOLocalEquivalent ***a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1CC035650(a1, a2, a3, a4, a5, 3, a7);
}

const llvm::detail::DoubleAPFloat *sub_1CC035650(llvm *this, unsigned __int8 *a2, unsigned __int8 *a3, llvm::DSOLocalEquivalent ***a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v56[8] = *MEMORY[0x1E4F143B8];
  if (this == (llvm *)a2) {
    return (const llvm::detail::DoubleAPFloat *)a3;
  }
  if (a2[16] < 0x15u) {
    return 0;
  }
  uint64_t v9 = 0;
  if (this && *((unsigned __int8 *)this + 16) >= 0x1Cu)
  {
    int v12 = a6;
    char v13 = a5;
    int v15 = *((_DWORD *)this + 5);
    if ((v15 & 0x40000000) != 0)
    {
      BOOL v17 = (char *)*((void *)this - 1);
      uint64_t v16 = v15 & 0x7FFFFFF;
      if ((*((_DWORD *)this + 5) & 0x7FFFFFF) != 0)
      {
LABEL_10:
        uint64_t v18 = 32 * v16;
        uint64_t v19 = v17;
        while (*(unsigned __int8 **)v19 != a2)
        {
          v19 += 32;
          v18 -= 32;
          if (!v18)
          {
            uint64_t v19 = &v17[32 * v16];
            break;
          }
        }
LABEL_16:
        if (v16 == (v19 - v17) >> 5) {
          return 0;
        }
        uint64_t v53 = v56;
        int v55 = 8;
        if (v16 >= 9)
        {
          unsigned int v54 = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v16) {
          bzero(v56, 8 * v16);
        }
        unsigned int v54 = v16;
        if ((v15 & 0x40000000) != 0)
        {
          unsigned int v21 = (unsigned __int8 **)*((void *)this - 1);
          uint64_t v20 = v15 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v20 = v15 & 0x7FFFFFF;
          unsigned int v21 = (unsigned __int8 **)((char *)this - 32 * v20);
        }
        if (v20)
        {
          int v22 = (unsigned __int8 **)v53;
          uint64_t v23 = 32 * v20;
          do
          {
            int v25 = *v21;
            v21 += 4;
            uint64_t v24 = v25;
            if (v25 == a2) {
              uint64_t v24 = a3;
            }
            *v22++ = v24;
            v23 -= 32;
          }
          while (v23);
        }
        if (v13)
        {
          if (!v12) {
            goto LABEL_53;
          }
          int v26 = *((unsigned __int8 *)this + 16);
          if ((v26 - 59) >= 0xFFFFFFEE)
          {
            unsigned int v27 = sub_1CC03A350(v26 - 28, *(llvm **)v53, *((llvm::Constant **)v53 + 1), (const llvm::DataLayout *)a4, (llvm::DSOLocalEquivalent **)(v12 - 1));
          }
          else if ((v26 - 83) >= 0xFFFFFFFE)
          {
            unsigned int v27 = sub_1CC03A634(*((_WORD *)this + 9) & 0x3F, *(llvm::ConstantExpr **)v53, *((unsigned __int8 **)v53 + 1), (uint64_t)a4, (v12 - 1));
          }
          else
          {
            if (v26 != 85)
            {
              if (v26 == 62)
              {
                unsigned int v27 = sub_1CC036F6C(*((llvm::Type **)this + 8), *(unsigned __int8 **)v53, (uint64_t *)v53 + 1, v16 - 1, (*((unsigned __int8 *)this + 17) >> 1) & 1, (uint64_t)a4);
                goto LABEL_85;
              }
LABEL_53:
              BOOL v50 = v52;
              uint64_t v51 = 0x800000000;
              if (v54)
              {
                unsigned int v35 = 0;
                unint64_t v36 = (char *)v53;
                uint64_t v37 = 8 * v54;
                while (*(void *)v36 && *(unsigned __int8 *)(*(void *)v36 + 16) <= 0x14u)
                {
                  if (v35 >= HIDWORD(v51)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v50 + v35) = *(void *)v36;
                  unsigned int v35 = v51 + 1;
                  LODWORD(v51) = v51 + 1;
                  v36 += 8;
                  v37 -= 8;
                  if (!v37) {
                    goto LABEL_63;
                  }
                }
                goto LABEL_65;
              }
LABEL_63:
              if (v13 & 1) == 0 && (sub_1CC169B54((uint64_t)this, 1, 1))
              {
LABEL_65:
                uint64_t v9 = 0;
                goto LABEL_82;
              }
              int v39 = *((unsigned __int8 *)this + 16);
              if ((v39 - 83) < 0xFFFFFFFE)
              {
                if (v39 == 60)
                {
                  unsigned int v40 = (uint64_t **)v50;
                  if ((*((_WORD *)this + 9) & 1) == 0)
                  {
                    int v41 = (const llvm::detail::DoubleAPFloat *)llvm::ConstantFoldLoadFromConstPtr(*(llvm **)v50, *(llvm::Constant **)this, (llvm::Type *)*a4, (const llvm::DataLayout *)a4, a5, a6, a7);
LABEL_81:
                    uint64_t v9 = v41;
LABEL_82:
                    if (v50 != v52) {
                      free(v50);
                    }
                    goto LABEL_88;
                  }
                }
                else
                {
                  unsigned int v40 = (uint64_t **)v50;
                }
                int v41 = sub_1CBFB8E50(this, (llvm *)(v39 - 28), v40, v51, (llvm::Type *)*a4, a4[1]);
                goto LABEL_81;
              }
              int v41 = llvm::ConstantFoldCompareInstOperands(*((_WORD *)this + 9) & 0x3F, *(llvm::ConstantExpr **)v50, *((llvm::Constant **)v50 + 1), (llvm::DataLayout *)*a4, (BOOL)a4[1]);
              goto LABEL_81;
            }
            unsigned int v27 = (llvm *)sub_1CC035B70(*(void *)v53, *((void *)v53 + 1), *((void *)v53 + 2), a4, (v12 - 1));
          }
LABEL_85:
          if (v27 == this) {
            uint64_t v9 = 0;
          }
          else {
            uint64_t v9 = v27;
          }
          goto LABEL_88;
        }
        int v28 = *((unsigned __int8 *)this + 16);
        if ((v28 - 59) >= 0xFFFFFFEE)
        {
          uint64_t v42 = (llvm::ConstantExpr *)(v28 - 28);
          int v43 = *(llvm **)v53;
          BinOpIdentity = llvm::ConstantExpr::getBinOpIdentity(v42, *(llvm::ConstantFP **)this, 0, 0);
          uint64_t v9 = (const llvm::detail::DoubleAPFloat *)*((void *)v53 + 1);
          if (v43 == BinOpIdentity) {
            goto LABEL_88;
          }
          if (v9 == llvm::ConstantExpr::getBinOpIdentity(v42, *(llvm::ConstantFP **)this, (llvm::Type *)1, 0)) {
            goto LABEL_77;
          }
          if ((v42 & 0xFFFFFFFE) == 0x1C)
          {
            uint64_t v9 = *(const llvm::detail::DoubleAPFloat **)v53;
            if (*(void *)v53 == *((void *)v53 + 1))
            {
LABEL_88:
              if (v53 != v56) {
                free(v53);
              }
              return v9;
            }
          }
        }
        if (*((unsigned char *)this + 16) == 62) {
          uint64_t v29 = this;
        }
        else {
          uint64_t v29 = 0;
        }
        if (v29) {
          BOOL v30 = v54 == 2;
        }
        else {
          BOOL v30 = 0;
        }
        if (!v30) {
          goto LABEL_53;
        }
        uint64_t v31 = *((void *)v53 + 1);
        unsigned int v32 = *(unsigned __int8 *)(v31 + 16);
        BOOL v33 = !v31 || v32 > 0x14;
        if (v33) {
          goto LABEL_53;
        }
        if (v32 == 16)
        {
          uint64_t v34 = *(unsigned int *)(v31 + 32);
          if (v34 >= 0x41)
          {
            int v46 = 0;
            int64_t v47 = (unint64_t)(v34 + 63) >> 6;
            do
            {
              BOOL v33 = v47-- < 1;
              if (v33) {
                break;
              }
              unint64_t v48 = *(void *)(*(void *)(v31 + 24) + 8 * v47);
              v46 += __clz(v48);
            }
            while (!v48);
            int v49 = v34 | 0xFFFFFFC0;
            if ((v34 & 0x3F) == 0) {
              int v49 = 0;
            }
            if (v46 + v49 == v34) {
              goto LABEL_52;
            }
          }
          else if (!*(void *)(v31 + 24))
          {
            goto LABEL_52;
          }
        }
        else if (v32 == 17)
        {
          if (sub_1CB844168(*((void *)v53 + 1), 0.0)) {
            goto LABEL_52;
          }
        }
        else if (v32 - 18 < 3 || v32 == 13)
        {
          goto LABEL_52;
        }
        if ((sub_1CC03F414((uint64_t)&v50, (llvm::Constant *)v31) & 1) == 0) {
          goto LABEL_53;
        }
LABEL_52:
        if ((*((unsigned char *)v29 + 17) & 2) != 0) {
          goto LABEL_53;
        }
LABEL_77:
        uint64_t v9 = *(const llvm::detail::DoubleAPFloat **)v53;
        goto LABEL_88;
      }
    }
    else
    {
      uint64_t v16 = v15 & 0x7FFFFFF;
      BOOL v17 = (char *)this - 32 * v16;
      if ((*((_DWORD *)this + 5) & 0x7FFFFFF) != 0) {
        goto LABEL_10;
      }
    }
    uint64_t v19 = v17;
    goto LABEL_16;
  }
  return v9;
}

llvm::Constant *llvm::SimplifySelectInst(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1CC035B70(a1, a2, a3, a4, 3);
}

llvm::Constant *sub_1CC035B70(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  if (!a1 || (unsigned int v10 = *(unsigned __int8 *)(a1 + 16), v10 > 0x14))
  {
LABEL_22:
    if (*(void *)a1 == *(void *)a2)
    {
      if (sub_1CBF5250C((uint64_t)&__src, (llvm::Constant *)a2)
        && (sub_1CBF535C4((uint64_t)&v137, (llvm::Constant *)a3) & 1) != 0)
      {
        return (llvm::Constant *)a1;
      }
      p_src = 0;
      uint64_t v116 = 0;
      if (sub_1CBF535C4((uint64_t)&__src, (llvm::Constant *)a3))
      {
        *(void *)&long long __src = &p_src;
        *((void *)&__src + 1) = &v116;
        if (sub_1CC04B108((uint64_t **)&__src, a1))
        {
          int v137 = (uint64_t *)p_src;
          uint64_t v138 = (uint64_t)v116;
          if (sub_1CC04B234(&v137, (uint64_t)a2)) {
            return (llvm::Constant *)p_src;
          }
        }
        *(void *)&long long __src = &p_src;
        *((void *)&__src + 1) = &v116;
        if (sub_1CC04B108((uint64_t **)&__src, (uint64_t)a2))
        {
          int v137 = (uint64_t *)p_src;
          uint64_t v138 = (uint64_t)v116;
          if (sub_1CC04B234(&v137, a1)) {
            return (llvm::Constant *)p_src;
          }
        }
      }
    }
    if (a2 != a3)
    {
      int v16 = a2[16];
      if (v16 == 12) {
        return (llvm::Constant *)a3;
      }
      if (*(unsigned char *)(a4 + 41))
      {
        unsigned int v18 = (v16 - 11);
        if (v18 >= 2)
        {
          if (v18 < 0xFD) {
            goto LABEL_38;
          }
          *(void *)&long long __src = v125;
          *((void *)&__src + 1) = v125;
          uint64_t v123 = 8;
          LODWORD(v124) = 0;
          int v137 = &v139;
          uint64_t v138 = 0x800000000;
          p_src = &__src;
          uint64_t v134 = (uint64_t)&v137;
          BOOL v90 = 0;
          if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&p_src, (uint64_t)a2))
          {
            do
            {
              BOOL v90 = v138 == 0;
              if (!v138) {
                break;
              }
              uint64_t v108 = v137[v138 - 1];
              LODWORD(v138) = v138 - 1;
            }
            while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&p_src, v108) & 1) != 0);
          }
          if (v137 != &v139) {
            free(v137);
          }
          if (*((void *)&__src + 1) == (void)__src)
          {
            if (!v90) {
              goto LABEL_38;
            }
          }
          else
          {
            free(*((void **)&__src + 1));
            if (!v90) {
              goto LABEL_38;
            }
          }
        }
        if (sub_1CC16A22C((uint64_t ***)a3, *(void *)(a4 + 24), *(void *)(a4 + 32), *(void *)(a4 + 16), 0, 1)) {
          return (llvm::Constant *)a3;
        }
      }
LABEL_38:
      int v19 = a3[16];
      if (v19 == 12) {
        return (llvm::Constant *)a2;
      }
      if (*(unsigned char *)(a4 + 41))
      {
        unsigned int v20 = (v19 - 11);
        if (v20 >= 2)
        {
          if (v20 < 0xFD) {
            goto LABEL_44;
          }
          *(void *)&long long __src = v125;
          *((void *)&__src + 1) = v125;
          uint64_t v123 = 8;
          LODWORD(v124) = 0;
          int v137 = &v139;
          uint64_t v138 = 0x800000000;
          p_src = &__src;
          uint64_t v134 = (uint64_t)&v137;
          BOOL v96 = 0;
          if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&p_src, (uint64_t)a3))
          {
            do
            {
              BOOL v96 = v138 == 0;
              if (!v138) {
                break;
              }
              uint64_t v109 = v137[v138 - 1];
              LODWORD(v138) = v138 - 1;
            }
            while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&p_src, v109) & 1) != 0);
          }
          if (v137 != &v139) {
            free(v137);
          }
          if (*((void *)&__src + 1) == (void)__src)
          {
            if (!v96) {
              goto LABEL_44;
            }
          }
          else
          {
            free(*((void **)&__src + 1));
            if (!v96) {
              goto LABEL_44;
            }
          }
        }
        if (sub_1CC16A22C((uint64_t ***)a2, *(void *)(a4 + 24), *(void *)(a4 + 32), *(void *)(a4 + 16), 0, 1)) {
          return (llvm::Constant *)a2;
        }
      }
LABEL_44:
      if (*(unsigned char *)(*(void *)a2 + 8) == 18 && a2[16] <= 0x14u && a3 && a3[16] <= 0x14u)
      {
        uint64_t v21 = *(unsigned int *)(*(void *)a2 + 32);
        *(void *)&long long __src = &v123;
        *((void *)&__src + 1) = 0x1000000000;
        if (v21)
        {
          int v22 = 0;
          while (1)
          {
            AggregateElement = (uint64_t ***)llvm::Constant::getAggregateElement((llvm::Constant *)a2, v22);
            uint64_t v24 = (uint64_t ***)llvm::Constant::getAggregateElement((llvm::Constant *)a3, v22);
            if (!AggregateElement || (uint64_t v25 = (uint64_t)v24) == 0)
            {
LABEL_93:
              int v35 = DWORD2(__src);
              unint64_t v36 = (llvm::FixedVectorType ***)__src;
              goto LABEL_95;
            }
            if (AggregateElement == v24) {
              goto LABEL_59;
            }
            int v26 = *((unsigned __int8 *)AggregateElement + 16);
            if (v26 != 12)
            {
              if (!*(unsigned char *)(a4 + 41)) {
                break;
              }
              unsigned int v29 = (v26 - 11);
              if (v29 >= 2)
              {
                if (v29 < 0xFD) {
                  break;
                }
                uint64_t v112 = v24;
                int v137 = (uint64_t *)&v140 + 1;
                uint64_t v138 = (uint64_t)&v140 + 8;
                uint64_t v139 = 8;
                LODWORD(v140) = 0;
                p_src = &v135;
                uint64_t v134 = 0x800000000;
                uint64_t v116 = &v137;
                p_p_src = &p_src;
                BOOL __n = 0;
                if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v116, (uint64_t)AggregateElement))
                {
                  do
                  {
                    BOOL __n = v134 == 0;
                    if (!v134) {
                      break;
                    }
                    uint64_t v33 = *((void *)p_src + v134 - 1);
                    LODWORD(v134) = v134 - 1;
                  }
                  while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v116, v33) & 1) != 0);
                }
                if (p_src != &v135) {
                  free(p_src);
                }
                if ((uint64_t *)v138 != v137) {
                  free((void *)v138);
                }
                uint64_t v25 = (uint64_t)v112;
                if (!__n) {
                  break;
                }
              }
              uint64_t v113 = v25;
              int v32 = sub_1CC16A22C((uint64_t ***)v25, 0, 0, 0, 0, 1);
              uint64_t v25 = v113;
              if (!v32) {
                break;
              }
            }
            unint64_t v27 = DWORD2(__src);
            unint64_t v28 = HIDWORD(__src);
LABEL_60:
            if (v27 >= v28) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(__src + 8 * v27) = v25;
            ++DWORD2(__src);
            int v22 = (llvm::Type *)(v22 + 1);
            if (v22 == v21) {
              goto LABEL_93;
            }
          }
          int v30 = *(unsigned __int8 *)(v25 + 16);
          if (v30 != 12)
          {
            if (!*(unsigned char *)(a4 + 41)) {
              goto LABEL_93;
            }
            unsigned int v31 = (v30 - 11);
            if (v31 >= 2)
            {
              if (v31 < 0xFD) {
                goto LABEL_93;
              }
              int v137 = (uint64_t *)&v140 + 1;
              uint64_t v138 = (uint64_t)&v140 + 8;
              uint64_t v139 = 8;
              LODWORD(v140) = 0;
              p_src = &v135;
              uint64_t v134 = 0x800000000;
              uint64_t v116 = &v137;
              p_p_src = &p_src;
              BOOL v111 = 0;
              if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v116, v25))
              {
                do
                {
                  BOOL v111 = v134 == 0;
                  if (!v134) {
                    break;
                  }
                  uint64_t v34 = *((void *)p_src + v134 - 1);
                  LODWORD(v134) = v134 - 1;
                }
                while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v116, v34) & 1) != 0);
              }
              if (p_src != &v135) {
                free(p_src);
              }
              if ((uint64_t *)v138 != v137) {
                free((void *)v138);
              }
              if (!v111) {
                goto LABEL_93;
              }
            }
            if (!sub_1CC16A22C(AggregateElement, 0, 0, 0, 0, 1)) {
              goto LABEL_93;
            }
          }
LABEL_59:
          unint64_t v27 = DWORD2(__src);
          unint64_t v28 = HIDWORD(__src);
          uint64_t v25 = (uint64_t)AggregateElement;
          goto LABEL_60;
        }
        int v35 = 0;
        unint64_t v36 = (llvm::FixedVectorType ***)&v123;
LABEL_95:
        if (v35 == v21)
        {
          uint64_t Impl = (uint64_t)llvm::ConstantVector::getImpl(v36, (llvm::Type *)v21);
          if (!Impl)
          {
            llvm::FixedVectorType::get(**v36, (llvm::Type *)v21);
            uint64_t Impl = sub_1CC56A4DC(**v37 + 1288, (uint64_t)v37, v36, v21);
          }
          unint64_t v36 = (llvm::FixedVectorType ***)__src;
        }
        else
        {
          uint64_t Impl = (uint64_t)a3;
        }
        if (v36 != (llvm::FixedVectorType ***)&v123) {
          free(v36);
        }
        if (v35 == v21) {
          return (llvm::Constant *)Impl;
        }
      }
      if (*(unsigned char *)(a1 + 16) != 81 || (uint64_t v38 = *(void *)(a1 - 64)) == 0 || (v39 = *(void *)(a1 - 32)) == 0)
      {
LABEL_199:
        if (!a1 || *(unsigned char *)(a1 + 16) != 82) {
          goto LABEL_221;
        }
        uint64_t v65 = *(unsigned __int8 **)(a1 - 64);
        if ((v65 != a2 || *(unsigned __int8 **)(a1 - 32) != a3) && (v65 != a3 || *(unsigned __int8 **)(a1 - 32) != a2)) {
          goto LABEL_221;
        }
        __int16 v66 = *(_WORD *)(a1 + 18);
        uint64_t v67 = *(void *)(a4 + 32);
        if (v67 && sub_1CB845E74(v67))
        {
          char v68 = *(unsigned char *)(*(void *)(a4 + 32) + 17);
          p_src = 0;
          if ((v68 & 0x10) != 0)
          {
LABEL_218:
            uint64_t Impl = (uint64_t)a3;
            if ((v66 & 0x3F) == 1 || (uint64_t Impl = (uint64_t)a2, (v66 & 0x3F) == 0xE))
            {
              if (Impl) {
                return (llvm::Constant *)Impl;
              }
            }
LABEL_221:
            if (!a1) {
              goto LABEL_244;
            }
            unsigned int v71 = *(unsigned __int8 *)(a1 + 16);
            unsigned int v72 = v71 - 28;
            if (v71 < 0x1C || v71 - 59 < 0xFFFFFFEE) {
              goto LABEL_244;
            }
            if (v71 == 57)
            {
              int v73 = 33;
            }
            else
            {
              if (v71 != 56) {
                goto LABEL_244;
              }
              int v73 = 32;
            }
            uint64_t v74 = *(void *)(a1 - 64);
            if (v74) {
              BOOL v75 = *(unsigned char *)(v74 + 16) == 81;
            }
            else {
              BOOL v75 = 0;
            }
            char v76 = !v75;
            if (!v75) {
              goto LABEL_239;
            }
            uint64_t v77 = *(unsigned __int8 **)(v74 - 64);
            int v78 = *(unsigned __int8 **)(v74 - 32);
            if (v77 == a2 && v78 == a3)
            {
              int v91 = *(_WORD *)(v74 + 18) & 0x3F;
            }
            else
            {
              if (v78 != a2 || v77 != a3)
              {
LABEL_239:
                uint64_t v79 = *(void *)(a1 - 32);
                if (!v79 || *(unsigned char *)(v79 + 16) != 81) {
                  goto LABEL_244;
                }
                uint64_t v80 = *(unsigned __int8 **)(v79 - 64);
                BOOL v81 = *(unsigned __int8 **)(v79 - 32);
                if (v80 == a2 && v81 == a3)
                {
                  int v91 = *(_WORD *)(v79 + 18) & 0x3F;
                  if (v76) {
                    goto LABEL_244;
                  }
                }
                else
                {
                  if (v81 != a2) {
                    goto LABEL_244;
                  }
                  if (v80 != a3) {
                    goto LABEL_244;
                  }
                  int v91 = dword_1CFAC3A14[*(_WORD *)(v79 + 18) & 0x3F];
                  if (v76) {
                    goto LABEL_244;
                  }
                }
                int v93 = *(unsigned __int8 **)(v74 - 64);
                if (!v93) {
                  goto LABEL_244;
                }
                int64_t v94 = *(unsigned __int8 **)(v74 - 32);
                if (!v94) {
                  goto LABEL_244;
                }
                uint64_t v92 = *(void *)(a1 - 64);
LABEL_281:
                if (v91 != v73 || v91 != (*(_WORD *)(v92 + 18) & 0x3F)) {
                  goto LABEL_244;
                }
                if (v93 == a2 || v93 == a3)
                {
                  if (v72 == 29) {
                    uint64_t Impl = (uint64_t)a2;
                  }
                  else {
                    uint64_t Impl = (uint64_t)a3;
                  }
                }
                else
                {
                  if (v72 == 29) {
                    uint64_t Impl = (uint64_t)a2;
                  }
                  else {
                    uint64_t Impl = (uint64_t)a3;
                  }
                  if (v94 != a3 && v94 != a2) {
                    goto LABEL_244;
                  }
                }
                if (Impl) {
                  return (llvm::Constant *)Impl;
                }
LABEL_244:
                uint64_t v82 = *(void *)(a4 + 32);
                int v83 = *(llvm::DSOLocalEquivalent ***)a4;
                unsigned int v84 = (uint64_t *)sub_1CC16FA94(v82);
                if (!v84) {
                  return 0;
                }
                uint64_t v86 = v85 & 1;
                if (v84 == (uint64_t *)a1)
                {
                  BOOL v88 = 0;
                }
                else
                {
                  if (!a1 || *(unsigned char *)(a1 + 16) != 81) {
                    return 0;
                  }
                  unsigned __int16 isImpliedCondition = llvm::isImpliedCondition(v84, *(_WORD *)(a1 + 18) & 0x3F, *(void *)(a1 - 64), *(void *)(a1 - 32), (const llvm::DataLayout *)v83, v86, 0);
                  LOBYTE(v86) = isImpliedCondition;
                  BOOL v88 = isImpliedCondition < 0x100u;
                }
                if ((_BYTE)v86) {
                  uint64_t Impl = (uint64_t)a2;
                }
                else {
                  uint64_t Impl = (uint64_t)a3;
                }
                if (!v88) {
                  return (llvm::Constant *)Impl;
                }
                return 0;
              }
              int v91 = dword_1CFAC3A14[*(_WORD *)(v74 + 18) & 0x3F];
            }
            uint64_t v92 = *(void *)(a1 - 32);
            if (v92)
            {
              if (*(unsigned char *)(v92 + 16) == 81)
              {
                int v93 = *(unsigned __int8 **)(v92 - 64);
                if (v93)
                {
                  int64_t v94 = *(unsigned __int8 **)(v92 - 32);
                  if (v94) {
                    goto LABEL_281;
                  }
                }
              }
            }
            goto LABEL_239;
          }
        }
        else
        {
          p_src = 0;
        }
        *(void *)&long long __src = &p_src;
        *((void *)&__src + 1) = 0;
        if (!sub_1CC04AFFC((uint64_t)&__src, a2)) {
          goto LABEL_217;
        }
        long long v69 = p_src;
        if (*((_UNKNOWN **)p_src + 1) == &unk_1CFB2E344) {
          long long v69 = (unsigned char *)*((void *)p_src + 2);
        }
        if ((v69[28] & 7) == 3)
        {
LABEL_217:
          int v137 = (uint64_t *)&p_src;
          uint64_t v138 = 0;
          if (!sub_1CC04AFFC((uint64_t)&v137, a3)) {
            goto LABEL_221;
          }
          int v70 = p_src;
          if (*((_UNKNOWN **)p_src + 1) == &unk_1CFB2E344) {
            int v70 = (unsigned char *)*((void *)p_src + 2);
          }
          if ((v70[28] & 7) == 3) {
            goto LABEL_221;
          }
        }
        goto LABEL_218;
      }
      int v40 = *(_WORD *)(a1 + 18) & 0x3F;
      BOOL v41 = v40 == 33;
      if (v40 == 33) {
        int v42 = 32;
      }
      else {
        int v42 = *(_WORD *)(a1 + 18) & 0x3F;
      }
      if (v40 == 33) {
        int v43 = a2;
      }
      else {
        int v43 = a3;
      }
      uint64_t v115 = (llvm *)v43;
      if (v41) {
        uint64_t v44 = (uint64_t)a3;
      }
      else {
        uint64_t v44 = (uint64_t)a2;
      }
      if ((*(_DWORD *)(*(void *)v44 + 8) & 0xFE) == 0x12) {
        int v45 = *(unsigned __int8 *)(**(void **)(*(void *)v44 + 16) + 8);
      }
      else {
        int v45 = *(_DWORD *)(*(void *)v44 + 8);
      }
      if (v45 == 13)
      {
        p_src = 0;
        uint64_t v116 = 0;
        int matched = llvm::matchDecomposedSelectPattern(a1, (unsigned __int8 *)v44, (unsigned __int8 *)v115, (uint64_t)&p_src, &v116, 0, 0);
        int v47 = 40;
        switch(matched)
        {
          case 0:
          case 7:
          case 8:
            goto LABEL_120;
          case 1:
            break;
          case 2:
            int v47 = 36;
            break;
          case 3:
            int v47 = 38;
            break;
          case 4:
            int v47 = 34;
            break;
          case 5:
            int v47 = 12;
            break;
          default:
            int v47 = 10;
            break;
        }
        if (v47 == v42)
        {
          if ((matched - 1) > 2) {
            uint64_t v51 = 2;
          }
          else {
            uint64_t v51 = dword_1CFAC38F8[matched - 1];
          }
          unsigned int v56 = *(llvm::Type **)p_src;
          if ((*(_DWORD *)(*(void *)p_src + 8) & 0xFE) == 0x12) {
            unsigned int v56 = (llvm::Type *)**((void **)v56 + 2);
          }
          unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v56);
          llvm::getMinMaxLimit(v51, PrimitiveSizeInBits, (llvm::APInt *)&__src);
          if (DWORD2(__src) > 0x40) {
            operator new[]();
          }
          LODWORD(v138) = DWORD2(__src);
          int v137 = (uint64_t *)__src;
          BOOL v58 = sub_1CBF53154((llvm::APInt *)&v137, (unsigned __int8 *)v116);
          BOOL v59 = v58;
          if (v138 >= 0x41 && v137)
          {
            BOOL v60 = v58;
            MEMORY[0x1D25D9CB0](v137, 0x1000C8000313F17);
            BOOL v59 = v60;
          }
          uint64_t Impl = (uint64_t)p_src;
          if (DWORD2(__src) >= 0x41 && (void)__src)
          {
            BOOL v114 = v59;
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
            BOOL v59 = v114;
          }
          if (v59)
          {
LABEL_198:
            if (Impl) {
              return (llvm::Constant *)Impl;
            }
            goto LABEL_199;
          }
        }
      }
LABEL_120:
      if (v42 != 32) {
        goto LABEL_184;
      }
      unsigned int v48 = *(unsigned __int8 *)(v39 + 16);
      if (v48 > 0x14) {
        goto LABEL_184;
      }
      if (v48 == 16)
      {
        uint64_t v49 = *(unsigned int *)(v39 + 32);
        if (v49 >= 0x41)
        {
          int v103 = 0;
          int64_t v104 = (unint64_t)(v49 + 63) >> 6;
          do
          {
            BOOL v100 = v104-- < 1;
            if (v100) {
              break;
            }
            unint64_t v105 = *(void *)(*(void *)(v39 + 24) + 8 * v104);
            v103 += __clz(v105);
          }
          while (!v105);
          int v106 = v49 | 0xFFFFFFC0;
          if ((v49 & 0x3F) == 0) {
            int v106 = 0;
          }
          if (v103 + v106 == v49) {
            goto LABEL_126;
          }
        }
        else if (!*(void *)(v39 + 24))
        {
          goto LABEL_126;
        }
      }
      else if (v48 == 17)
      {
        if (sub_1CB844168(v39, 0.0)) {
          goto LABEL_126;
        }
      }
      else if (v48 - 18 < 3 || v48 == 13)
      {
        goto LABEL_126;
      }
      if ((sub_1CC03F414((uint64_t)&__src, (llvm::Constant *)v39) & 1) == 0) {
        goto LABEL_184;
      }
LABEL_126:
      char v120 = 0;
      unsigned int v121 = 0;
      *(void *)&long long __src = &v121;
      *((void *)&__src + 1) = &v120;
      uint64_t v123 = 0;
      int v50 = *(unsigned __int8 *)(v38 + 16);
      if (v50 == 5)
      {
        if (*(_WORD *)(v38 + 18) != 28) {
          goto LABEL_142;
        }
        uint64_t v52 = v38 - 32 * (*(_DWORD *)(v38 + 20) & 0x7FFFFFF);
        if (!*(void *)v52) {
          goto LABEL_142;
        }
        unsigned int v121 = *(llvm **)v52;
        if ((sub_1CBF5295C((uint64_t)&__src + 8, *(llvm::Constant **)(v52 + 32)) & 1) == 0) {
          goto LABEL_142;
        }
      }
      else if (v50 != 56 {
             || !*(void *)(v38 - 64)
      }
             || (unsigned int v121 = *(llvm **)(v38 - 64),
                 !sub_1CBF528D8((uint64_t)&__src + 8, *(unsigned __int8 **)(v38 - 32))))
      {
LABEL_142:
        uint64_t v119 = 0;
        LODWORD(__src) = 149;
        *(void *)((char *)&__src + 4) = 0;
        LODWORD(v137) = 148;
        uint64_t v138 = 0;
        uint64_t v139 = (uint64_t)&v121;
        long long v140 = xmmword_1CDF53750;
        int v141 = &v119;
        uint64_t v142 = 149;
        int v143 = 0;
        uint64_t v144 = 1;
        unint64_t v145 = (uint64_t *)&v121;
        uint64_t v146 = 2;
        BOOL v147 = &v119;
        if (((sub_1CC0471F4((uint64_t)&v137, v44) & 1) != 0 || sub_1CC047264((uint64_t)&v142, v44))
          && v115 == v121
          && v38 == v119)
        {
          goto LABEL_183;
        }
        LODWORD(__src) = 148;
        *((void *)&__src + 1) = 0;
        uint64_t v123 = (uint64_t)&v121;
        uint64_t v124 = 1;
        v125[0] = &v121;
        v125[1] = 2;
        v125[2] = &v119;
        int v126 = 149;
        uint64_t v127 = 0;
        uint64_t v128 = (uint64_t *)&v121;
        uint64_t v129 = 1;
        unsigned int v130 = (uint64_t *)&v121;
        uint64_t v131 = 2;
        uint64_t v132 = &v119;
        if (((sub_1CC04B864((uint64_t)&__src, (uint64_t)v115) & 1) != 0
           || sub_1CC04B864((uint64_t)&v126, (uint64_t)v115))
          && (llvm *)v44 == v121
          && v38 == v119)
        {
          goto LABEL_183;
        }
        if (*(unsigned char *)(v44 + 16) == 84)
        {
          uint64_t v54 = *(void *)(v44 - 32);
          if (v54)
          {
            if (!*(unsigned char *)(v54 + 16)
              && *(void *)(v54 + 24) == *(void *)(v44 + 72)
              && *(_DWORD *)(v54 + 36) == 1
              && v38 == *(void *)(v44 - 32 * (*(_DWORD *)(v44 + 20) & 0x7FFFFFF)))
            {
              LODWORD(v134) = 1;
              uint64_t v135 = 0;
              uint64_t v136 = v38;
              int v97 = *((unsigned __int8 *)v115 + 16);
              if (v97 == 5)
              {
                if (*((_WORD *)v115 + 9) == 15
                  && sub_1CC03F414((uint64_t)&p_src, *((llvm::Constant **)v115 - 4 * (*((_DWORD *)v115 + 5) & 0x7FFFFFF)))&& sub_1CC04B964((uint64_t)&v134, ((void *)v115 - 4 * (*((_DWORD *)v115 + 5) & 0x7FFFFFF))[4]))
                {
                  goto LABEL_183;
                }
              }
              else if (v97 == 43 {
                     && sub_1CBF535C4((uint64_t)&p_src, *((llvm::Constant **)v115 - 8))
              }
                     && sub_1CC04B8F0((uint64_t)&v134, *((void *)v115 - 4)))
              {
                goto LABEL_183;
              }
            }
          }
        }
        LODWORD(v134) = 1;
        uint64_t v135 = 0;
        uint64_t v136 = v38;
        int v55 = *(unsigned __int8 *)(v44 + 16);
        if (v55 != 5)
        {
          if (v55 != 43
            || !sub_1CBF535C4((uint64_t)&p_src, *(llvm::Constant **)(v44 - 64))
            || !sub_1CC04B8F0((uint64_t)&v134, *(void *)(v44 - 32)))
          {
            goto LABEL_184;
          }
          goto LABEL_182;
        }
        if (*(_WORD *)(v44 + 18) == 15
          && sub_1CC03F414((uint64_t)&p_src, *(llvm::Constant **)(v44 - 32 * (*(_DWORD *)(v44 + 20) & 0x7FFFFFF)))&& sub_1CC04B964((uint64_t)&v134, *(void *)(v44 - 32 * (*(_DWORD *)(v44 + 20) & 0x7FFFFFF) + 32)))
        {
LABEL_182:
          LODWORD(v116) = 1;
          p_p_src = 0;
          uint64_t v118 = v38;
          if (!sub_1CC04B8F0((uint64_t)&v116, (uint64_t)v115)) {
            goto LABEL_184;
          }
LABEL_183:
          uint64_t Impl = (uint64_t)v115;
          goto LABEL_198;
        }
LABEL_184:
        LODWORD(p_src) = v42;
        int v137 = 0;
        DWORD2(__src) = 1;
        *(void *)&long long __src = 0;
        uint64_t Impl = 0;
        if (llvm::decomposeBitTestICmp(v38, (unsigned __int8 *)v39, (int *)&p_src, (uint64_t *)&v137, (int8x8_t ***)&__src, 1))uint64_t Impl = sub_1CC04B350(v44, (uint64_t)v115, (uint64_t)v137, (int8x8_t *)&__src, p_src == 32); {
        if (DWORD2(__src) >= 0x41 && (void)__src)
        }
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        if (v42 == 32 && !Impl)
        {
          if ((*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x12) {
            goto LABEL_199;
          }
          if (sub_1CC035650(v115, (unsigned __int8 *)v38, (unsigned __int8 *)v39, (llvm::DSOLocalEquivalent ***)a4, 0, a5, v61) == (const llvm::detail::DoubleAPFloat *)v44|| sub_1CC035650(v115, (unsigned __int8 *)v39, (unsigned __int8 *)v38, (llvm::DSOLocalEquivalent ***)a4, 0, a5, v62) == (const llvm::detail::DoubleAPFloat *)v44|| sub_1CC035650((llvm *)v44, (unsigned __int8 *)v38, (unsigned __int8 *)v39,
                 (llvm::DSOLocalEquivalent ***)a4,
                 1,
                 a5,
                 v63) == v115)
          {
            uint64_t Impl = (uint64_t)v115;
          }
          else
          {
            uint64_t Impl = (uint64_t)v115;
            if (sub_1CC035650((llvm *)v44, (unsigned __int8 *)v39, (unsigned __int8 *)v38, (llvm::DSOLocalEquivalent ***)a4, 1, a5, v64) != v115)goto LABEL_199; {
          }
            }
        }
        goto LABEL_198;
      }
      uint64_t v53 = sub_1CC04B350(v44, (uint64_t)v115, (uint64_t)v121, v120, 1);
      if (v53) {
        return (llvm::Constant *)v53;
      }
      goto LABEL_142;
    }
    return (llvm::Constant *)a2;
  }
  if (a2 && a2[16] <= 0x14u && a3 && a3[16] <= 0x14u)
  {
    return llvm::ConstantFoldSelectInstruction((llvm *)a1, (llvm::PoisonValue **)a2, (llvm::Constant *)a3, (llvm::Constant *)a4);
  }
  if (v10 != 12)
  {
    if (!*(unsigned char *)(a4 + 41)) {
      goto LABEL_17;
    }
    unsigned int v13 = (v10 - 11);
    if (v13 >= 2)
    {
      if (v13 < 0xFD) {
        goto LABEL_17;
      }
      *(void *)&long long __src = v125;
      *((void *)&__src + 1) = v125;
      uint64_t v123 = 8;
      LODWORD(v124) = 0;
      int v137 = &v139;
      uint64_t v138 = 0x800000000;
      p_src = &__src;
      uint64_t v134 = (uint64_t)&v137;
      BOOL v89 = 0;
      if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&p_src, a1))
      {
        do
        {
          BOOL v89 = v138 == 0;
          if (!v138) {
            break;
          }
          uint64_t v107 = v137[v138 - 1];
          LODWORD(v138) = v138 - 1;
        }
        while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&p_src, v107) & 1) != 0);
      }
      if (v137 != &v139) {
        free(v137);
      }
      if (*((void *)&__src + 1) == (void)__src)
      {
        if (v89) {
          goto LABEL_260;
        }
LABEL_17:
        if (sub_1CBF5270C((uint64_t)&__src, (llvm::Constant *)a1)) {
          return (llvm::Constant *)a2;
        }
        int v14 = *(unsigned __int8 *)(a1 + 16);
        if (v14 == 16)
        {
          uint64_t v15 = *(unsigned int *)(a1 + 32);
          if (v15 >= 0x41)
          {
            int v98 = 0;
            int64_t v99 = (unint64_t)(v15 + 63) >> 6;
            do
            {
              BOOL v100 = v99-- < 1;
              if (v100) {
                break;
              }
              unint64_t v101 = *(void *)(*(void *)(a1 + 24) + 8 * v99);
              v98 += __clz(v101);
            }
            while (!v101);
            int v102 = v15 | 0xFFFFFFC0;
            if ((v15 & 0x3F) == 0) {
              int v102 = 0;
            }
            if (v98 + v102 == v15) {
              return (llvm::Constant *)a3;
            }
          }
          else if (!*(void *)(a1 + 24))
          {
            return (llvm::Constant *)a3;
          }
        }
        else if (v14 == 17)
        {
          if (sub_1CB844168(a1, 0.0)) {
            return (llvm::Constant *)a3;
          }
        }
        else if ((v14 - 18) < 3 || v14 == 13)
        {
          return (llvm::Constant *)a3;
        }
        if ((sub_1CC03F414((uint64_t)&__src, (llvm::Constant *)a1) & 1) == 0) {
          goto LABEL_22;
        }
        return (llvm::Constant *)a3;
      }
      free(*((void **)&__src + 1));
      if (!v89) {
        goto LABEL_17;
      }
    }
LABEL_260:
    if (a3[16] >= 0x15u) {
      return (llvm::Constant *)a2;
    }
    else {
      return (llvm::Constant *)a3;
    }
  }
  int v12 = *(llvm::PoisonValue **)a2;

  return (llvm::Constant *)llvm::PoisonValue::get(v12, (llvm::Type *)a2);
}

llvm::UndefValue *sub_1CC036F6C(llvm::Type *a1, unsigned __int8 *a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6)
{
  unsigned int v10 = a2;
  v153[8] = *MEMORY[0x1E4F143B8];
  unsigned int v11 = *(_DWORD *)(*(void *)a2 + 8);
  if ((v11 & 0xFE) == 0x12) {
    unsigned int v11 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  if (!a4) {
    return (llvm::UndefValue *)v10;
  }
  unsigned int v12 = v11 >> 8;
  IndexedType = (llvm::PointerType *)llvm::GetElementPtrInst::getIndexedType((uint64_t)a1, (uint64_t)a3, a4);
  int v14 = (uint64_t **)llvm::PointerType::get(IndexedType, (llvm::Type *)(v11 >> 8));
  int v16 = (llvm::detail::IEEEFloat *)v14;
  BOOL v17 = *(llvm::detail::IEEEFloat **)v10;
  if (*(void *)v10 && (*((_DWORD *)v17 + 2) & 0xFE) == 0x12)
  {
    int v18 = *((_DWORD *)v17 + 2);
  }
  else
  {
    uint64_t v19 = 8 * a4;
    unsigned int v20 = a3;
    while (1)
    {
      BOOL v17 = *(llvm::detail::IEEEFloat **)*v20;
      if (v17 && (*((_DWORD *)v17 + 2) & 0xFE) == 18) {
        break;
      }
      ++v20;
      v19 -= 8;
      if (!v19) {
        goto LABEL_18;
      }
    }
    int v18 = *((_DWORD *)v17 + 2);
  }
  int v22 = (llvm::Type *)*((unsigned int *)v17 + 8);
  if (v18 == 19) {
    llvm::ScalableVectorType::get(v14, v22);
  }
  else {
    llvm::FixedVectorType::get((llvm::FixedVectorType *)v14, v22);
  }
  int v16 = v23;
LABEL_18:
  uint64_t v24 = *(llvm::detail::IEEEFloat **)v10;
  uint64_t v142 = a6;
  int v140 = a5;
  if ((*(_DWORD *)(*(void *)v10 + 8) & 0xFE) == 0x12)
  {
    uint64_t v25 = (llvm::detail::IEEEFloat *)**((void **)v24 + 2);
    int v26 = *((unsigned __int8 *)v25 + 8);
  }
  else
  {
    int v26 = *(_DWORD *)(*(void *)v10 + 8);
    uint64_t v25 = *(llvm::detail::IEEEFloat **)v10;
  }
  if (v26 == 15 && !*((void *)v25 + 3) && v24 == v16)
  {
    uint64_t v34 = a3;
    while (1)
    {
      uint64_t v35 = *v34;
      unsigned int v36 = *(unsigned __int8 *)(*v34 + 16);
      if (*v34) {
        BOOL v37 = v36 > 0x14;
      }
      else {
        BOOL v37 = 1;
      }
      if (v37) {
        break;
      }
      if (v36 == 16)
      {
        uint64_t v38 = *(unsigned int *)(v35 + 32);
        if (v38 >= 0x41)
        {
          int v40 = 0;
          int64_t v41 = (unint64_t)(v38 + 63) >> 6;
          do
          {
            BOOL v37 = v41-- < 1;
            if (v37) {
              break;
            }
            unint64_t v42 = *(void *)(*(void *)(v35 + 24) + 8 * v41);
            v40 += __clz(v42);
          }
          while (!v42);
          int v43 = v38 | 0xFFFFFFC0;
          if ((v38 & 0x3F) == 0) {
            int v43 = 0;
          }
          if (v40 + v43 != v38)
          {
LABEL_46:
            if ((sub_1CC03F414((uint64_t)&__src, (llvm::Constant *)v35) & 1) == 0) {
              break;
            }
          }
        }
        else if (*(void *)(v35 + 24))
        {
          goto LABEL_46;
        }
      }
      else if (v36 == 17)
      {
        if ((sub_1CB844168(*v34, 0.0) & 1) == 0) {
          goto LABEL_46;
        }
      }
      else if (v36 - 18 >= 3 && v36 != 13)
      {
        goto LABEL_46;
      }
      if (++v34 == &a3[a4]) {
        return (llvm::UndefValue *)v10;
      }
    }
  }
  int v28 = v10[16];
  if (v28 == 12) {
    return (llvm::UndefValue *)llvm::PoisonValue::get(v16, v15);
  }
  unint64_t v30 = 0;
  uint64_t v31 = 8 * a4;
  do
  {
    if (*(unsigned char *)(a3[v30 / 8] + 16) == 12) {
      return (llvm::UndefValue *)llvm::PoisonValue::get(v16, v15);
    }
    v30 += 8;
  }
  while (v31 != v30);
  if (*(unsigned char *)(v142 + 41))
  {
    unsigned int v32 = (v28 - 11);
    if (v32 < 2) {
      goto LABEL_229;
    }
    if (v32 < 0xFD) {
      goto LABEL_35;
    }
    long long __src = v153;
    uint64_t v150 = (unsigned __int8 *)v153;
    uint64_t v151 = 8;
    unsigned int v152 = 0;
    v145[1] = (llvm::SmallPtrSetImplBase *)&v146;
    uint64_t v146 = (llvm *)v148;
    uint64_t v147 = 0x800000000;
    v145[0] = (llvm::SmallPtrSetImplBase *)&__src;
    BOOL v126 = 0;
    if (sub_1CC04C108(v145, (uint64_t)v10))
    {
      do
      {
        BOOL v126 = v147 == 0;
        if (!v147) {
          break;
        }
        uint64_t v137 = *((void *)v146 + v147 - 1);
        LODWORD(v147) = v147 - 1;
      }
      while ((sub_1CC04C108(v145, v137) & 1) != 0);
    }
    if (v146 != (llvm *)v148) {
      free(v146);
    }
    if (v150 == __src)
    {
      if (v126) {
        goto LABEL_229;
      }
    }
    else
    {
      free(v150);
      if (v126)
      {
LABEL_229:
        if (!v140) {
          return llvm::UndefValue::get(v16, v15);
        }
        return (llvm::UndefValue *)llvm::PoisonValue::get(v16, v15);
      }
    }
  }
LABEL_35:
  if (*((unsigned char *)a1 + 8) == 19)
  {
    if (a4 != 1) {
      goto LABEL_213;
    }
    BOOL v33 = 1;
  }
  else
  {
    uint64_t v44 = v31 - 8;
    int v45 = a3;
    do
    {
      uint64_t v46 = *v45++;
      int v47 = *(unsigned __int8 *)(*(void *)v46 + 8);
      BOOL v33 = v47 == 19;
      BOOL v48 = v47 == 19 || v44 == 0;
      v44 -= 8;
    }
    while (!v48);
    if (a4 != 1)
    {
      if (v47 == 19) {
        goto LABEL_213;
      }
      goto LABEL_109;
    }
  }
  uint64_t v49 = *a3;
  unsigned int v50 = *(unsigned __int8 *)(*a3 + 16);
  if (*a3) {
    BOOL v51 = v50 > 0x14;
  }
  else {
    BOOL v51 = 1;
  }
  if (v51) {
    goto LABEL_81;
  }
  if (v50 != 16)
  {
    if (v50 == 17)
    {
      if ((sub_1CB844168(*a3, 0.0) & 1) == 0) {
        goto LABEL_79;
      }
    }
    else if (v50 - 18 >= 3 && v50 != 13)
    {
      goto LABEL_79;
    }
    goto LABEL_80;
  }
  uint64_t v52 = *(unsigned int *)(v49 + 32);
  if (v52 >= 0x41)
  {
    int v133 = 0;
    int64_t v134 = (unint64_t)(v52 + 63) >> 6;
    do
    {
      BOOL v37 = v134-- < 1;
      if (v37) {
        break;
      }
      unint64_t v135 = *(void *)(*(void *)(v49 + 24) + 8 * v134);
      v133 += __clz(v135);
    }
    while (!v135);
    int v136 = v52 | 0xFFFFFFC0;
    if ((v52 & 0x3F) == 0) {
      int v136 = 0;
    }
    if (v133 + v136 != v52) {
      goto LABEL_79;
    }
LABEL_80:
    if (*(llvm::detail::IEEEFloat **)v10 == v16) {
      return (llvm::UndefValue *)v10;
    }
    goto LABEL_81;
  }
  if (!*(void *)(v49 + 24)) {
    goto LABEL_80;
  }
LABEL_79:
  if (sub_1CC03F414((uint64_t)&__src, (llvm::Constant *)v49)) {
    goto LABEL_80;
  }
LABEL_81:
  if (v33) {
    goto LABEL_213;
  }
  unsigned int v53 = *((unsigned __int8 *)a1 + 8);
  if (v53 > 0x11) {
    goto LABEL_172;
  }
  if (((1 << v53) & 0xAC7F) != 0) {
    goto LABEL_84;
  }
  if (((1 << v53) & 0x30000) == 0)
  {
LABEL_172:
    if ((v53 & 0xFE) != 0x12 && v53 != 21) {
      goto LABEL_109;
    }
  }
  if (!llvm::Type::isSizedDerivedType((uint64_t)a1, 0)) {
    goto LABEL_109;
  }
LABEL_84:
  uint64_t v146 = 0;
  v145[0] = 0;
  uint64_t v54 = *(llvm::DataLayout **)v142;
  unint64_t v138 = (unint64_t)(sub_1CB83544C(*(void *)v142, (uint64_t)a1) + 7) >> 3;
  BOOL v139 = v55 == 1;
  char Alignment = llvm::DataLayout::getAlignment(v54, a1, 1);
  uint64_t v58 = ((1 << Alignment) + v138 - 1) & -(1 << Alignment);
  if (!v139)
  {
    if (v58) {
      goto LABEL_87;
    }
LABEL_86:
    if (*(llvm::detail::IEEEFloat **)v10 != v16) {
      goto LABEL_87;
    }
    return (llvm::UndefValue *)v10;
  }
  if (!v58) {
    goto LABEL_86;
  }
LABEL_87:
  uint64_t v59 = *a3;
  uint64_t v60 = *(void *)*a3;
  if ((*(_DWORD *)(v60 + 8) & 0xFE) == 0x12) {
    uint64_t v60 = **(void **)(v60 + 16);
  }
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v60);
  if (v11 < 0x100) {
    goto LABEL_98;
  }
  uint64_t v62 = *(unsigned int *)(*(void *)v142 + 240);
  uint64_t v63 = *(void *)(*(void *)v142 + 232);
  if (v62)
  {
    uint64_t v63 = *(void *)(*(void *)v142 + 232);
    unint64_t v64 = *(unsigned int *)(*(void *)v142 + 240);
    do
    {
      unint64_t v65 = v64 >> 1;
      uint64_t v66 = v63 + 16 * (v64 >> 1);
      unsigned int v67 = *(_DWORD *)(v66 + 8);
      uint64_t v68 = v66 + 16;
      v64 += ~(v64 >> 1);
      if (v67 < v12) {
        uint64_t v63 = v68;
      }
      else {
        unint64_t v64 = v65;
      }
    }
    while (v64);
  }
  if (v63 == *(void *)(*(void *)v142 + 232) + 16 * v62 || *(_DWORD *)(v63 + 8) != v12) {
LABEL_98:
  }
    uint64_t v63 = *(void *)(*(void *)v142 + 232);
  if (*(_DWORD *)(v63 + 4) == PrimitiveSizeInBits)
  {
    if (v58 == 1)
    {
      long long __src = &v146;
      uint64_t v150 = v10;
      int v69 = *(unsigned __int8 *)(v59 + 16);
      if (v69 == 5)
      {
        if (*(_WORD *)(v59 + 18) == 15
          && sub_1CC03F934((void **)&__src, *(void *)(v59 - 32 * (*(_DWORD *)(v59 + 20) & 0x7FFFFFF)))&& sub_1CD497D64(&v150, *(void *)(v59 - 32 * (*(_DWORD *)(v59 + 20) & 0x7FFFFFF) + 32)))
        {
LABEL_105:
          if (*(llvm::detail::IEEEFloat **)v146 == v16)
          {
            UnderlyingObject = llvm::getUnderlyingObject(v146, (const llvm::Value *)6);
            if (UnderlyingObject == llvm::getUnderlyingObject((llvm *)v10, (const llvm::Value *)6)) {
              return v146;
            }
          }
        }
      }
      else if (v69 == 43 {
             && sub_1CC03F934((void **)&__src, *(void *)(v59 - 64))
      }
             && (sub_1CC0452A0(&v150, *(void *)(v59 - 32)) & 1) != 0)
      {
        goto LABEL_105;
      }
    }
    uint64_t v109 = *a3;
    long long __src = &v146;
    uint64_t v150 = v10;
    uint64_t v151 = (uint64_t)v145;
    if (sub_1CC04B9D0((uint64_t)&__src, 27, v109))
    {
      if (v58 == 1 << SLOBYTE(v145[0]) && *(llvm::detail::IEEEFloat **)v146 == v16)
      {
        unsigned int v110 = llvm::getUnderlyingObject(v146, (const llvm::Value *)6);
        if (v110 == llvm::getUnderlyingObject((llvm *)v10, (const llvm::Value *)6)) {
          return v146;
        }
      }
    }
    uint64_t v111 = *a3;
    long long __src = &v146;
    uint64_t v150 = v10;
    unsigned int v152 = 64;
    uint64_t v151 = v58;
    if (sub_1CC04BBF4((uint64_t)&__src, 20, v111))
    {
      if (*(llvm::detail::IEEEFloat **)v146 == v16)
      {
        uint64_t v113 = llvm::getUnderlyingObject(v146, (const llvm::Value *)6);
        BOOL v112 = v113 == llvm::getUnderlyingObject((llvm *)v10, (const llvm::Value *)6);
      }
      else
      {
        BOOL v112 = 0;
      }
      if (v152 >= 0x41 && v151) {
        MEMORY[0x1D25D9CB0](v151, 0x1000C8000313F17);
      }
      if (v112) {
        return v146;
      }
    }
    else if (v152 >= 0x41 && v151)
    {
      MEMORY[0x1D25D9CB0](v151, 0x1000C8000313F17);
    }
  }
LABEL_109:
  unsigned int v71 = *(llvm::DataLayout **)v142;
  unint64_t v72 = (unint64_t)(sub_1CB83544C(*(void *)v142, (uint64_t)IndexedType) + 7) >> 3;
  BOOL v74 = v73 == 1;
  char v75 = llvm::DataLayout::getAlignment(v71, IndexedType, 1);
  uint64_t v77 = ((1 << v75) + v72 - 1) & -(1 << v75);
  if (v74) {
  if (v77 == 1)
  }
  {
    int v78 = (uint64_t **)&a3[a4 - 1];
    if (a4 != 1)
    {
      for (uint64_t i = a3; i != (uint64_t *)v78; ++i)
      {
        uint64_t v80 = *i;
        unsigned int v81 = *(unsigned __int8 *)(*i + 16);
        if (*i) {
          BOOL v82 = v81 > 0x14;
        }
        else {
          BOOL v82 = 1;
        }
        if (v82) {
          goto LABEL_213;
        }
        if (v81 == 16)
        {
          uint64_t v83 = *(unsigned int *)(v80 + 32);
          if (v83 >= 0x41)
          {
            int v85 = 0;
            int64_t v86 = (unint64_t)(v83 + 63) >> 6;
            do
            {
              BOOL v37 = v86-- < 1;
              if (v37) {
                break;
              }
              unint64_t v87 = *(void *)(*(void *)(v80 + 24) + 8 * v86);
              v85 += __clz(v87);
            }
            while (!v87);
            int v88 = v83 | 0xFFFFFFC0;
            if ((v83 & 0x3F) == 0) {
              int v88 = 0;
            }
            if (v85 + v88 != v83)
            {
LABEL_121:
              if ((sub_1CC03F414((uint64_t)&__src, (llvm::Constant *)v80) & 1) == 0) {
                goto LABEL_213;
              }
            }
          }
          else if (*(void *)(v80 + 24))
          {
            goto LABEL_121;
          }
        }
        else if (v81 == 17)
        {
          if ((sub_1CB844168(*i, 0.0) & 1) == 0) {
            goto LABEL_121;
          }
        }
        else if (v81 - 18 >= 3 && v81 != 13)
        {
          goto LABEL_121;
        }
      }
    }
    uint64_t v89 = *(void *)v142;
    unsigned int v90 = *(_DWORD *)(*(void *)v10 + 8);
    if ((v90 & 0xFE) == 0x12) {
      unsigned int v90 = *(_DWORD *)(**(void **)(*(void *)v10 + 16) + 8);
    }
    if (v90 < 0x100) {
      goto LABEL_151;
    }
    unsigned int v91 = v90 >> 8;
    uint64_t v92 = *(unsigned int *)(v89 + 240);
    uint64_t v93 = *(void *)(v89 + 232);
    if (v92)
    {
      uint64_t v93 = *(void *)(v89 + 232);
      unint64_t v94 = *(unsigned int *)(v89 + 240);
      do
      {
        unint64_t v95 = v94 >> 1;
        uint64_t v96 = v93 + 16 * (v94 >> 1);
        unsigned int v97 = *(_DWORD *)(v96 + 8);
        uint64_t v98 = v96 + 16;
        v94 += ~(v94 >> 1);
        if (v97 < v91) {
          uint64_t v93 = v98;
        }
        else {
          unint64_t v94 = v95;
        }
      }
      while (v94);
    }
    if (v93 == *(void *)(v89 + 232) + 16 * v92 || *(_DWORD *)(v93 + 8) != v91) {
LABEL_151:
    }
      uint64_t v93 = *(void *)(v89 + 232);
    uint64_t v99 = *(unsigned int *)(v93 + 12);
    uint64_t v102 = sub_1CB83544C(v89, **v78);
    if (v100 == 1) {
    if (v102 == v99)
    }
    {
      LODWORD(v150) = v99;
      if (v99 > 0x40) {
        operator new[]();
      }
      long long __src = 0;
      int v103 = llvm::Value::stripAndAccumulateConstantOffsets((llvm::GlobalValue *)v10, *(llvm::DataLayout **)v142, (llvm::APInt *)&__src, 0, 0, 0, v101);
      int64_t v104 = *v78;
      uint64_t v147 = (uint64_t)v103;
      if (sub_1CC04BDA4((uint64_t)&v146, 15, (uint64_t)v104))
      {
        if (v150 > 0x40)
        {
          int v115 = 0;
          int64_t v116 = ((unint64_t)v150 + 63) >> 6;
          do
          {
            BOOL v37 = v116-- < 1;
            if (v37) {
              break;
            }
            unint64_t v117 = *((void *)__src + v116);
            v115 += __clz(v117);
          }
          while (!v117);
          unsigned int v118 = v150 | 0xFFFFFFC0;
          if ((v150 & 0x3F) == 0) {
            unsigned int v118 = 0;
          }
          if (v115 + v118 != v150) {
            goto LABEL_159;
          }
        }
        else if (__src)
        {
LABEL_159:
          int v106 = (llvm::detail::IEEEFloat *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v16, (llvm::LLVMContext *)&__src, v105);
LABEL_160:
          int v16 = sub_1CC56C0C0((llvm *)0x30, v106, v16, 0);
          int v107 = 0;
LABEL_209:
          if (v150 >= 0x41 && __src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
          if (!v107) {
            return v16;
          }
          goto LABEL_213;
        }
      }
      uint64_t v119 = *v78;
      uint64_t v146 = v103;
      int v120 = *((unsigned __int8 *)v119 + 16);
      if (v120 == 5)
      {
        if (*((_WORD *)v119 + 9) != 30
          || !sub_1CD497D64(&v146, v119[-4 * (*((_DWORD *)v119 + 5) & 0x7FFFFFF)])
          || !sub_1CBF68974((uint64_t)&v147, (llvm::Constant *)v119[-4 * (*((_DWORD *)v119 + 5) & 0x7FFFFFF) + 4]))
        {
          goto LABEL_208;
        }
      }
      else if (v120 != 58 {
             || !sub_1CC0452A0(&v146, *(v119 - 8))
      }
             || (sub_1CBF687D0((uint64_t)&v147, (llvm::Constant *)*(v119 - 4)) & 1) == 0)
      {
        goto LABEL_208;
      }
      if (v150 > 0x40)
      {
        int v127 = 0;
        int64_t v128 = ((unint64_t)v150 + 63) >> 6;
        do
        {
          BOOL v37 = v128-- < 1;
          if (v37) {
            break;
          }
          unint64_t v129 = *((void *)__src + v128);
          v127 += __clz(v129);
        }
        while (!v129);
        unsigned int v130 = v150 | 0xFFFFFFC0;
        if ((v150 & 0x3F) == 0) {
          unsigned int v130 = 0;
        }
        if (v127 + v130 != v150 - 1)
        {
          unsigned int v144 = v150;
          operator new[]();
        }
      }
      else if (__src != (void *)1)
      {
        unsigned int v121 = *(llvm::ConstantInt **)v16;
        unsigned int v144 = v150;
        int v143 = (llvm *)__src;
        llvm::APInt::operator-=((uint64_t)&v143, 1uLL);
        LODWORD(v147) = v144;
        uint64_t v146 = v143;
        unsigned int v144 = 0;
        uint64_t v132 = (llvm::detail::IEEEFloat *)llvm::ConstantInt::get(v121, (llvm::LLVMContext *)&v146, v131);
        if (v147 >= 0x41 && v146) {
          MEMORY[0x1D25D9CB0](v146, 0x1000C8000313F17);
        }
        if (v144 >= 0x41 && v143) {
          MEMORY[0x1D25D9CB0](v143, 0x1000C8000313F17);
        }
        int v106 = v132;
        goto LABEL_160;
      }
LABEL_208:
      int v107 = 1;
      goto LABEL_209;
    }
  }
LABEL_213:
  if (v10[16] <= 0x14u)
  {
    for (uint64_t j = a3; *(unsigned __int8 *)(*j + 16) < 0x15u; ++j)
    {
      v31 -= 8;
      if (!v31)
      {
        uint64_t ElementPtr = llvm::ConstantExpr::getGetElementPtr((uint64_t)a1, (uint64_t *)v10, (uint64_t)a3, a4, v140, 0, 0);
        uint64_t v124 = *(llvm::DataLayout **)v142;
        long long __src = (void *)1;
        for (uint64_t k = 8; k != 72; k += 16)
          *(void **)((char *)&__src + k) = (void *)-4096;
        int v16 = sub_1CBFB8694(ElementPtr, v124, 0, (uint64_t)&__src);
        if ((__src & 1) == 0) {
          MEMORY[0x1D25D9CD0](v150, 8);
        }
        return v16;
      }
    }
  }
  return 0;
}

llvm::Value *llvm::SimplifyInsertValueInst(llvm::Constant *a1, uint64_t a2, _DWORD *__s2, uint64_t a4, uint64_t a5)
{
  v29[8] = *MEMORY[0x1E4F143B8];
  if (a1 && *((unsigned __int8 *)a1 + 16) <= 0x14u && a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u)
  {
    return llvm::ConstantFoldInsertValueInstruction(a1, a2, __s2, a4);
  }
  else
  {
    if (!*(unsigned char *)(a5 + 41)) {
      goto LABEL_44;
    }
    unsigned int v10 = (*(unsigned char *)(a2 + 16) - 11);
    if (v10 < 2) {
      return a1;
    }
    if (v10 < 0xFD) {
      goto LABEL_44;
    }
    int v22 = v26;
    uint64_t v23 = v26;
    uint64_t v24 = 8;
    int v25 = 0;
    unint64_t v27 = v29;
    uint64_t v28 = 0x800000000;
    unsigned int v20 = (llvm::SmallPtrSetImplBase *)&v22;
    uint64_t v21 = &v27;
    BOOL v16 = 0;
    if (sub_1CC04C108(&v20, a2))
    {
      do
      {
        BOOL v16 = v28 == 0;
        if (!v28) {
          break;
        }
        uint64_t v18 = *((void *)v27 + v28 - 1);
        LODWORD(v28) = v28 - 1;
      }
      while ((sub_1CC04C108(&v20, v18) & 1) != 0);
    }
    if (v27 != v29) {
      free(v27);
    }
    if (v23 != v22) {
      free(v23);
    }
    if (v16) {
      return a1;
    }
LABEL_44:
    if (!a2) {
      return 0;
    }
    if (*(unsigned char *)(a2 + 16) != 92) {
      return 0;
    }
    unsigned int v11 = *(llvm::Constant **)(a2 - 32);
    if (*(void *)v11 != *(void *)a1) {
      return 0;
    }
    uint64_t v12 = *(unsigned int *)(a2 + 72);
    if (a4 != v12 || memcmp(*(const void **)(a2 + 64), __s2, 4 * v12)) {
      return 0;
    }
    if (!*(unsigned char *)(a5 + 41)) {
      goto LABEL_45;
    }
    unsigned int v13 = (*((unsigned char *)a1 + 16) - 11);
    if (v13 >= 2)
    {
      if (v13 < 0xFD) {
        goto LABEL_45;
      }
      int v22 = v26;
      uint64_t v23 = v26;
      uint64_t v24 = 8;
      int v25 = 0;
      unint64_t v27 = v29;
      uint64_t v28 = 0x800000000;
      unsigned int v20 = (llvm::SmallPtrSetImplBase *)&v22;
      uint64_t v21 = &v27;
      BOOL v17 = 0;
      if (sub_1CC04C108(&v20, (uint64_t)a1))
      {
        do
        {
          BOOL v17 = v28 == 0;
          if (!v28) {
            break;
          }
          uint64_t v19 = *((void *)v27 + v28 - 1);
          LODWORD(v28) = v28 - 1;
        }
        while ((sub_1CC04C108(&v20, v19) & 1) != 0);
      }
      if (v27 != v29) {
        free(v27);
      }
      if (v23 != v22) {
        free(v23);
      }
      unsigned int v11 = *(llvm::Constant **)(a2 - 32);
      if (!v17)
      {
LABEL_45:
        BOOL v14 = v11 == a1;
        unsigned int v11 = a1;
        if (!v14) {
          return 0;
        }
      }
    }
    return v11;
  }
}

llvm *llvm::SimplifyInsertElementInst(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  uint64_t v6 = a3;
  uint64_t v7 = (uint64_t)a2;
  char v8 = (uint64_t ***)a1;
  v55[8] = *MEMORY[0x1E4F143B8];
  if (a1[16] >= 0x15u) {
    a1 = 0;
  }
  unsigned int v9 = a2[16];
  if (v9 >= 0x15) {
    a2 = 0;
  }
  unsigned __int8 v10 = *(unsigned char *)(a3 + 16);
  if (a1) {
    BOOL v11 = a2 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  char v12 = v11;
  if (v10 <= 0x14u && (v12 & 1) != 0)
  {
    if (*(unsigned char *)(a3 + 16) != 16 || (unsigned int v13 = *v8, *((unsigned char *)*v8 + 8) != 18))
    {
LABEL_17:
      if (!*(unsigned char *)(a4 + 41)) {
        goto LABEL_20;
      }
      unsigned int v17 = (v10 - 11);
      if (v17 >= 2)
      {
        if (v17 < 0xFD) {
          goto LABEL_20;
        }
        BOOL v48 = v52;
        uint64_t v49 = v52;
        uint64_t v50 = 8;
        int v51 = 0;
        unsigned int v53 = v55;
        uint64_t v54 = 0x800000000;
        uint64_t v46 = (llvm::SmallPtrSetImplBase *)&v48;
        int v47 = &v53;
        BOOL v30 = 0;
        if (sub_1CC04C108(&v46, v6))
        {
          do
          {
            BOOL v30 = v54 == 0;
            if (!v54) {
              break;
            }
            uint64_t v35 = *((void *)v53 + v54 - 1);
            LODWORD(v54) = v54 - 1;
          }
          while ((sub_1CC04C108(&v46, v35) & 1) != 0);
        }
        if (v53 != v55) {
          free(v53);
        }
        if (v49 != v48) {
          free(v49);
        }
        if (!v30)
        {
          unsigned int v9 = *(unsigned __int8 *)(v7 + 16);
LABEL_20:
          if (v9 != 12)
          {
            if (!*(unsigned char *)(a4 + 41))
            {
LABEL_25:
              if (v9 != 89) {
                return 0;
              }
              int v20 = *(_DWORD *)(v7 + 20);
              uint64_t v21 = (v20 & 0x40000000) != 0 ? *(uint64_t *****)(v7 - 8) : (uint64_t ****)(v7 - 32 * (v20 & 0x7FFFFFF));
              if (*v21 != v8) {
                return 0;
              }
              if (v21[4] != (uint64_t ***)v6) {
                return 0;
              }
              return (llvm *)v8;
            }
            unsigned int v18 = (v9 - 11);
            if (v18 >= 2)
            {
              if (v18 < 0xFD) {
                goto LABEL_24;
              }
              BOOL v48 = v52;
              uint64_t v49 = v52;
              uint64_t v50 = 8;
              int v51 = 0;
              unsigned int v53 = v55;
              uint64_t v54 = 0x800000000;
              uint64_t v46 = (llvm::SmallPtrSetImplBase *)&v48;
              int v47 = &v53;
              BOOL v31 = 0;
              if (sub_1CC04C108(&v46, v7))
              {
                do
                {
                  BOOL v31 = v54 == 0;
                  if (!v54) {
                    break;
                  }
                  uint64_t v36 = *((void *)v53 + v54 - 1);
                  LODWORD(v54) = v54 - 1;
                }
                while ((sub_1CC04C108(&v46, v36) & 1) != 0);
              }
              if (v53 != v55) {
                free(v53);
              }
              if (v49 != v48) {
                free(v49);
              }
              if (!v31)
              {
LABEL_24:
                unsigned int v9 = *(unsigned __int8 *)(v7 + 16);
                goto LABEL_25;
              }
            }
LABEL_75:
            if (sub_1CC16A22C(v8, 0, 0, 0, 0, 1)) {
              return (llvm *)v8;
            }
            goto LABEL_24;
          }
          return (llvm *)v8;
        }
      }
      return (llvm *)llvm::PoisonValue::get((llvm::PoisonValue *)*v8, (llvm::Type *)a2);
    }
    unint64_t v14 = *((unsigned int *)v13 + 8);
    uint64_t v15 = (llvm::APInt *)(a3 + 24);
    unsigned int v16 = *(_DWORD *)(a3 + 32);
    if (v16 < 0x41) {
      goto LABEL_16;
    }
    uint64_t v39 = (llvm::APInt **)(a3 + 24);
    int v40 = *v8;
    unsigned __int8 v42 = *(unsigned char *)(a3 + 16);
    unsigned int v44 = v9;
    int v33 = llvm::APInt::countLeadingZerosSlowCase(v15);
    unsigned __int8 v10 = v42;
    unsigned int v9 = v44;
    unsigned int v13 = v40;
    if (v16 - v33 <= 0x40)
    {
      uint64_t v15 = *v39;
LABEL_16:
      if (*(void *)v15 < v14) {
        goto LABEL_17;
      }
      goto LABEL_93;
    }
    goto LABEL_93;
  }
  if (v10 >= 0x15u) {
    a3 = 0;
  }
  if (a1) {
    BOOL v22 = a2 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (v22 || a3 == 0)
  {
    if (v10 != 16) {
      goto LABEL_110;
    }
    unsigned int v13 = *v8;
    if (*((unsigned char *)*v8 + 8) != 18) {
      goto LABEL_110;
    }
    unint64_t v24 = *((unsigned int *)v13 + 8);
    int v25 = (llvm::APInt *)(v6 + 24);
    unsigned int v26 = *(_DWORD *)(v6 + 32);
    if (v26 > 0x40)
    {
      int64_t v41 = *v8;
      unsigned __int8 v43 = v10;
      unsigned int v45 = v9;
      int v34 = llvm::APInt::countLeadingZerosSlowCase(v25);
      unsigned __int8 v10 = v43;
      unsigned int v9 = v45;
      unsigned int v13 = v41;
      if (v26 - v34 > 0x40) {
        goto LABEL_93;
      }
      int v25 = *(llvm::APInt **)(v6 + 24);
    }
    if (*(void *)v25 < v24)
    {
LABEL_110:
      if (*(unsigned char *)(a4 + 41))
      {
        unsigned int v27 = (v10 - 11);
        if (v27 <= 1) {
          return (llvm *)llvm::PoisonValue::get((llvm::PoisonValue *)*v8, (llvm::Type *)a2);
        }
        if (v27 >= 0xFD)
        {
          BOOL v48 = v52;
          uint64_t v49 = v52;
          uint64_t v50 = 8;
          int v51 = 0;
          unsigned int v53 = v55;
          uint64_t v54 = 0x800000000;
          uint64_t v46 = (llvm::SmallPtrSetImplBase *)&v48;
          int v47 = &v53;
          BOOL v32 = 0;
          if (sub_1CC04C108(&v46, v6))
          {
            do
            {
              BOOL v32 = v54 == 0;
              if (!v54) {
                break;
              }
              uint64_t v38 = *((void *)v53 + v54 - 1);
              LODWORD(v54) = v54 - 1;
            }
            while ((sub_1CC04C108(&v46, v38) & 1) != 0);
          }
          if (v53 != v55) {
            free(v53);
          }
          if (v49 != v48) {
            free(v49);
          }
          if (v32) {
            return (llvm *)llvm::PoisonValue::get((llvm::PoisonValue *)*v8, (llvm::Type *)a2);
          }
          unsigned int v9 = *(unsigned __int8 *)(v7 + 16);
        }
      }
      if (v9 != 12)
      {
        if (!*(unsigned char *)(a4 + 41)) {
          goto LABEL_25;
        }
        unsigned int v28 = (v9 - 11);
        if (v28 > 1)
        {
          if (v28 < 0xFD) {
            goto LABEL_24;
          }
          BOOL v48 = v52;
          uint64_t v49 = v52;
          uint64_t v50 = 8;
          int v51 = 0;
          unsigned int v53 = v55;
          uint64_t v54 = 0x800000000;
          uint64_t v46 = (llvm::SmallPtrSetImplBase *)&v48;
          int v47 = &v53;
          BOOL v29 = 0;
          if (sub_1CC04C108(&v46, v7))
          {
            do
            {
              BOOL v29 = v54 == 0;
              if (!v54) {
                break;
              }
              uint64_t v37 = *((void *)v53 + v54 - 1);
              LODWORD(v54) = v54 - 1;
            }
            while ((sub_1CC04C108(&v46, v37) & 1) != 0);
          }
          if (v53 != v55) {
            free(v53);
          }
          if (v49 != v48) {
            free(v49);
          }
          if (!v29) {
            goto LABEL_24;
          }
        }
        goto LABEL_75;
      }
      return (llvm *)v8;
    }
LABEL_93:
    return (llvm *)llvm::PoisonValue::get((llvm::PoisonValue *)v13, (llvm::Type *)a2);
  }

  return llvm::ConstantExpr::getInsertElement((llvm::ConstantExpr *)a1, (llvm::Constant *)a2, (llvm::Constant *)a3, 0, a5);
}

unsigned __int8 *llvm::SimplifyExtractValueInst(unsigned __int8 *result, char *__s2, uint64_t a3)
{
  uint64_t v3 = a3;
  unsigned int v5 = result[16];
  if (result && v5 <= 0x14)
  {
    if (a3)
    {
      do
      {
        uint64_t result = (unsigned __int8 *)llvm::Constant::getAggregateElement((llvm::Constant *)result, (llvm::Type *)*(unsigned int *)__s2);
        if (!result) {
          break;
        }
        __s2 += 4;
        --v3;
      }
      while (v3);
    }
  }
  else
  {
    if (v5 != 93) {
      return 0;
    }
    uint64_t v6 = result;
    do
    {
      unsigned int v7 = *((_DWORD *)v6 + 18);
      unsigned int v8 = v7 >= v3 ? v3 : *((_DWORD *)v6 + 18);
      if (!memcmp(*((const void **)v6 + 8), __s2, 4 * v8)) {
        break;
      }
      uint64_t result = 0;
      uint64_t v6 = (unsigned __int8 *)*((void *)v6 - 8);
    }
    while (v6 && v6[16] == 93);
    if (v7 == v3) {
      return (unsigned __int8 *)*((void *)v6 - 4);
    }
    else {
      return 0;
    }
  }
  return result;
}

llvm::UndefValue *llvm::SimplifyExtractElementInst(unsigned __int8 *a1, uint64_t a2, llvm::Constant *a3)
{
  v37[8] = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *(void ***)a1;
  unsigned int v6 = a1[16];
  if (v6 <= 0x14)
  {
    if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u)
    {
      uint64_t result = (llvm::UndefValue *)llvm::ConstantFoldExtractElementInstruction((llvm *)a1, (llvm::Constant *)a2, a3);
      if (result) {
        return result;
      }
      uint64_t v15 = *(void ***)a1;
      uint64_t v16 = *(void *)(*(void *)a1 + 24);
      if (v16)
      {
        uint64_t v35 = a1;
        uint64_t v36 = a2;
        uint64_t v17 = **v15 + 1512;
        LODWORD(v30) = 61;
        BOOL v31 = &v35;
        uint64_t v32 = 2;
        memset(v33, 0, sizeof(v33));
        uint64_t v34 = 0;
        return (llvm::UndefValue *)sub_1CC56C20C(v17, v16, (unsigned __int8 *)&v30);
      }
      return 0;
    }
    if (*((unsigned char *)a3 + 41))
    {
      unsigned int v18 = (v6 - 11);
      if (v18 < 2) {
        return llvm::UndefValue::get((llvm::UndefValue *)v5[3], (llvm::Type *)a2);
      }
      if (v18 >= 0xFD)
      {
        uint64_t v19 = a3;
        BOOL v30 = (void **)v33 + 1;
        BOOL v31 = (void **)v33 + 1;
        uint64_t v32 = 8;
        LODWORD(v33[0]) = 0;
        uint64_t v35 = v37;
        uint64_t v36 = 0x800000000;
        unsigned int v28 = &v30;
        BOOL v29 = &v35;
        BOOL v20 = 0;
        if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v28, (uint64_t)a1))
        {
          do
          {
            BOOL v20 = v36 == 0;
            if (!v36) {
              break;
            }
            uint64_t v26 = *((void *)v35 + v36 - 1);
            LODWORD(v36) = v36 - 1;
          }
          while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v28, v26) & 1) != 0);
        }
        if (v35 != v37) {
          free(v35);
        }
        if (v31 != v30) {
          free(v31);
        }
        a3 = v19;
        if (v20) {
          return llvm::UndefValue::get((llvm::UndefValue *)v5[3], (llvm::Type *)a2);
        }
      }
    }
  }
  if (*((unsigned char *)a3 + 41))
  {
    unsigned int v7 = (*(unsigned char *)(a2 + 16) - 11);
    if (v7 < 2) {
      return (llvm::UndefValue *)llvm::PoisonValue::get((llvm::PoisonValue *)v5[3], (llvm::Type *)a2);
    }
    if (v7 >= 0xFD)
    {
      BOOL v30 = (void **)v33 + 1;
      BOOL v31 = (void **)v33 + 1;
      uint64_t v32 = 8;
      LODWORD(v33[0]) = 0;
      uint64_t v35 = v37;
      uint64_t v36 = 0x800000000;
      unsigned int v28 = &v30;
      BOOL v29 = &v35;
      BOOL v14 = 0;
      if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v28, a2))
      {
        do
        {
          BOOL v14 = v36 == 0;
          if (!v36) {
            break;
          }
          uint64_t v27 = *((void *)v35 + v36 - 1);
          LODWORD(v36) = v36 - 1;
        }
        while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v28, v27) & 1) != 0);
      }
      if (v35 != v37) {
        free(v35);
      }
      if (v31 != v30) {
        free(v31);
      }
      if (v14) {
        return (llvm::UndefValue *)llvm::PoisonValue::get((llvm::PoisonValue *)v5[3], (llvm::Type *)a2);
      }
    }
  }
  if (!a2 || *(unsigned char *)(a2 + 16) != 16)
  {
    if ((*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x12 && a1[16] <= 0x14u)
    {
      uint64_t result = (llvm::UndefValue *)llvm::Constant::getSplatValue((llvm::Constant *)a1, 0);
LABEL_19:
      if (result) {
        return result;
      }
      return 0;
    }
    uint64_t v35 = 0;
    BOOL v31 = &v35;
    if (sub_1CC189A5C((uint64_t)&v30, (uint64_t)a1))
    {
      uint64_t result = (llvm::UndefValue *)v35;
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v8 = *((unsigned int *)v5 + 8);
  if (*((unsigned char *)v5 + 8) == 18)
  {
    unsigned int v9 = (unint64_t *)(a2 + 24);
    unsigned int v10 = *(_DWORD *)(a2 + 32);
    if (v10 >= 0x41)
    {
      unint64_t v21 = *((unsigned int *)v5 + 8);
      unsigned int v22 = *(_DWORD *)(a2 + 32);
      if (v22 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a2 + 24)) > 0x40) {
        return (llvm::UndefValue *)llvm::PoisonValue::get((llvm::PoisonValue *)v5[3], (llvm::Type *)a2);
      }
      unsigned int v10 = v22;
      unint64_t v8 = v21;
      unsigned int v9 = (unint64_t *)*v9;
    }
    if (*v9 < v8) {
      goto LABEL_10;
    }
    return (llvm::UndefValue *)llvm::PoisonValue::get((llvm::PoisonValue *)v5[3], (llvm::Type *)a2);
  }
  unsigned int v10 = *(_DWORD *)(a2 + 32);
LABEL_10:
  BOOL v11 = (unint64_t **)(a2 + 24);
  char v12 = (unint64_t *)(a2 + 24);
  if (v10 >= 0x41)
  {
    unint64_t v23 = v8;
    unsigned int v24 = v10;
    int v25 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a2 + 24));
    unsigned int v10 = v24;
    unint64_t v8 = v23;
    char v12 = *v11;
    if (v24 - v25 > 0x40) {
      goto LABEL_18;
    }
  }
  if (*v12 >= v8)
  {
LABEL_16:
    if (v10 >= 0x41) {
      char v12 = *v11;
    }
    else {
      char v12 = (unint64_t *)(a2 + 24);
    }
LABEL_18:
    uint64_t result = llvm::findScalarElement((llvm *)a1, (llvm::Value *)*(unsigned int *)v12);
    goto LABEL_19;
  }
  if ((*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x12 && a1[16] <= 0x14u)
  {
    uint64_t result = (llvm::UndefValue *)llvm::Constant::getSplatValue((llvm::Constant *)a1, 0);
  }
  else
  {
    uint64_t v35 = 0;
    BOOL v31 = &v35;
    if (!sub_1CC189A5C((uint64_t)&v30, (uint64_t)a1))
    {
LABEL_15:
      unsigned int v10 = *(_DWORD *)(a2 + 32);
      goto LABEL_16;
    }
    uint64_t result = (llvm::UndefValue *)v35;
  }
  if (!result) {
    goto LABEL_15;
  }
  return result;
}

llvm::ConstantExpr *sub_1CC038B58(llvm *this, uint64_t a2, llvm::Constant *a3, llvm::Type **a4, const llvm::DataLayout *a5)
{
  unsigned int v9 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v9 <= 0x14)
  {
    unsigned int v10 = *a4;
    return llvm::ConstantFoldCastOperand(this, a2, a3, v10, a5);
  }
  else
  {
    if (!a2) {
      goto LABEL_77;
    }
    if (v9 < 0x1C || v9 - 79 < 0xFFFFFFF3) {
      goto LABEL_77;
    }
    unsigned int v13 = *(llvm::Constant ***)(a2 - 32);
    if (*v13 != a3) {
      goto LABEL_77;
    }
    BOOL v14 = *(llvm::Constant **)a2;
    unsigned int v15 = *((_DWORD *)a3 + 2);
    if ((v15 & 0xFE) == 0x12) {
      unsigned int v15 = *(_DWORD *)(**((void **)a3 + 2) + 8);
    }
    if (v15 == 15)
    {
      if (v15 < 0x100) {
        goto LABEL_25;
      }
      unsigned int v16 = v15 >> 8;
      uint64_t v17 = *((unsigned int *)*a4 + 60);
      uint64_t v18 = *((void *)*a4 + 29);
      if (v17)
      {
        uint64_t v18 = *((void *)*a4 + 29);
        unint64_t v19 = *((unsigned int *)*a4 + 60);
        do
        {
          unint64_t v20 = v19 >> 1;
          uint64_t v21 = v18 + 16 * (v19 >> 1);
          unsigned int v22 = *(_DWORD *)(v21 + 8);
          uint64_t v23 = v21 + 16;
          v19 += ~(v19 >> 1);
          if (v22 < v16) {
            uint64_t v18 = v23;
          }
          else {
            unint64_t v19 = v20;
          }
        }
        while (v19);
      }
      if (v18 == *((void *)*a4 + 29) + 16 * v17 || *(_DWORD *)(v18 + 8) != v16) {
LABEL_25:
      }
        uint64_t v18 = *((void *)*a4 + 29);
      unsigned int v24 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)a3, (llvm::LLVMContext *)*(unsigned int *)(v18 + 4));
      uint64_t v25 = (uint64_t)v24;
      if ((*((_DWORD *)a3 + 2) & 0xFE) == 0x12)
      {
        uint64_t v26 = (llvm::Type *)*((unsigned int *)a3 + 8);
        if (*((_DWORD *)a3 + 2) == 19) {
          llvm::ScalableVectorType::get(v24, v26);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v24, v26);
        }
        uint64_t v25 = v27;
      }
    }
    else
    {
      uint64_t v25 = 0;
    }
    uint64_t v28 = v9 - 28;
    unsigned int v29 = *((_DWORD *)v14 + 2);
    if ((v29 & 0xFE) == 0x12) {
      unsigned int v29 = *(_DWORD *)(**((void **)v14 + 2) + 8);
    }
    if (v29 == 15)
    {
      if (v29 < 0x100) {
        goto LABEL_43;
      }
      unsigned int v30 = v29 >> 8;
      uint64_t v31 = *((unsigned int *)*a4 + 60);
      uint64_t v32 = *((void *)*a4 + 29);
      if (v31)
      {
        uint64_t v32 = *((void *)*a4 + 29);
        unint64_t v33 = *((unsigned int *)*a4 + 60);
        do
        {
          unint64_t v34 = v33 >> 1;
          uint64_t v35 = v32 + 16 * (v33 >> 1);
          unsigned int v36 = *(_DWORD *)(v35 + 8);
          uint64_t v37 = v35 + 16;
          v33 += ~(v33 >> 1);
          if (v36 < v30) {
            uint64_t v32 = v37;
          }
          else {
            unint64_t v33 = v34;
          }
        }
        while (v33);
      }
      if (v32 == *((void *)*a4 + 29) + 16 * v31 || *(_DWORD *)(v32 + 8) != v30) {
LABEL_43:
      }
        uint64_t v32 = *((void *)*a4 + 29);
      uint64_t v38 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v14, (llvm::LLVMContext *)*(unsigned int *)(v32 + 4));
      uint64_t v39 = (llvm::Type *)v38;
      if ((*((_DWORD *)v14 + 2) & 0xFE) == 0x12)
      {
        int v40 = (llvm::Type *)*((unsigned int *)v14 + 8);
        if (*((_DWORD *)v14 + 2) == 19) {
          llvm::ScalableVectorType::get(v38, v40);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v38, v40);
        }
        uint64_t v39 = v41;
      }
    }
    else
    {
      uint64_t v39 = 0;
    }
    unsigned int v42 = *((_DWORD *)a3 + 2);
    if ((v42 & 0xFE) == 0x12) {
      unsigned int v42 = *(_DWORD *)(**((void **)a3 + 2) + 8);
    }
    if (v42 == 15)
    {
      if (v42 < 0x100) {
        goto LABEL_61;
      }
      unsigned int v43 = v42 >> 8;
      uint64_t v44 = *((unsigned int *)*a4 + 60);
      uint64_t v45 = *((void *)*a4 + 29);
      if (v44)
      {
        uint64_t v45 = *((void *)*a4 + 29);
        unint64_t v46 = *((unsigned int *)*a4 + 60);
        do
        {
          unint64_t v47 = v46 >> 1;
          uint64_t v48 = v45 + 16 * (v46 >> 1);
          unsigned int v49 = *(_DWORD *)(v48 + 8);
          uint64_t v50 = v48 + 16;
          v46 += ~(v46 >> 1);
          if (v49 < v43) {
            uint64_t v45 = v50;
          }
          else {
            unint64_t v46 = v47;
          }
        }
        while (v46);
      }
      if (v45 == *((void *)*a4 + 29) + 16 * v44 || *(_DWORD *)(v45 + 8) != v43) {
LABEL_61:
      }
        uint64_t v45 = *((void *)*a4 + 29);
      int v51 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)a3, (llvm::LLVMContext *)*(unsigned int *)(v45 + 4));
      uint64_t v52 = (uint64_t)v51;
      if ((*((_DWORD *)a3 + 2) & 0xFE) == 0x12)
      {
        unsigned int v53 = (llvm::Type *)*((unsigned int *)a3 + 8);
        if (*((_DWORD *)a3 + 2) == 19) {
          llvm::ScalableVectorType::get(v51, v53);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v51, v53);
        }
        uint64_t v52 = v54;
      }
    }
    else
    {
      uint64_t v52 = 0;
    }
    if (llvm::CastInst::isEliminableCastPair(v28, (uint64_t)this, (llvm::Type ***)a3, v14, (uint64_t)a3, v25, v39, v52) != 49)
    {
LABEL_77:
      if (this != 49) {
        return 0;
      }
      unsigned int v13 = (llvm::Constant **)a2;
      if (*(llvm::Constant **)a2 != a3) {
        return 0;
      }
    }
    return (llvm::ConstantExpr *)v13;
  }
}

llvm::UndefValue *llvm::SimplifyShuffleVectorInst(llvm *a1, llvm::Type *a2, char *__src, llvm::Type *a4, llvm::UndefValue *a5, uint64_t a6)
{
  v85[8] = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
LABEL_5:
    return llvm::UndefValue::get(a5, a2);
  }
  unsigned int v9 = a2;
  unsigned int v10 = a1;
  uint64_t v11 = 0;
  while (*(_DWORD *)&__src[v11] == -1)
  {
    v11 += 4;
    if (4 * (void)a4 == v11) {
      goto LABEL_5;
    }
  }
  unsigned int v13 = *(llvm::PoisonValue **)a1;
  unsigned int v14 = *(_DWORD *)(*(void *)a1 + 32);
  int v15 = *(unsigned __int8 *)(*(void *)a1 + 8);
  __s = (__int32 *)v82;
  size_t __n = 0x2000000000;
  size_t v16 = 4 * (void)a4;
  if ((unint64_t)(4 * (void)a4) >= 0x81) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  memcpy(v82, __src, v16);
  LODWORD(__n) = __n + (v16 >> 2);
  if (v15 != 19)
  {
    if (a4)
    {
      int v18 = 0;
      int v19 = 0;
      unint64_t v20 = __s;
      uint64_t v21 = a4;
      do
      {
        unsigned int v22 = *v20++;
        int v23 = (v22 < v14) | v19;
        int v24 = (v22 >= v14) | v18;
        if (v22 != -1)
        {
          int v19 = v23;
          int v18 = v24;
        }
        --v21;
      }
      while (v21);
      if ((v19 & 1) == 0) {
        unsigned int v10 = (llvm *)llvm::PoisonValue::get(v13, v17);
      }
      if (v18) {
        goto LABEL_21;
      }
    }
    else
    {
      unsigned int v10 = (llvm *)llvm::PoisonValue::get(v13, v17);
    }
    unsigned int v9 = (llvm *)llvm::PoisonValue::get(v13, v17);
  }
LABEL_21:
  if (*((unsigned __int8 *)v10 + 16) >= 0x15u) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = v10;
  }
  unsigned int v26 = *((unsigned __int8 *)v9 + 16);
  if (v26 >= 0x15) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = v9;
  }
  if (v25) {
    BOOL v28 = v27 == 0;
  }
  else {
    BOOL v28 = 1;
  }
  if (v28)
  {
    if (v15 == 19 || !v25 || v27)
    {
      unint64_t v33 = v9;
    }
    else
    {
      if (!__n)
      {
LABEL_46:
        if (v26 == 90)
        {
          int v35 = *((_DWORD *)v9 + 5);
          if ((v35 & 0x40000000) != 0) {
            unsigned int v36 = (void *)*((void *)v9 - 1);
          }
          else {
            unsigned int v36 = (void *)((char *)v9 - 32 * (v35 & 0x7FFFFFF));
          }
          uint64_t v39 = v36[4];
          if (v39) {
            BOOL v40 = *(unsigned __int8 *)(v39 + 16) > 0x14u;
          }
          else {
            BOOL v40 = 1;
          }
          if (v40) {
            goto LABEL_63;
          }
          uint64_t v57 = v36[8];
          if (!v57 || *(unsigned char *)(v57 + 16) != 16) {
            goto LABEL_63;
          }
          uint64_t v58 = (void *)(v57 + 24);
          if (*(_DWORD *)(v57 + 32) >= 0x41u) {
            uint64_t v58 = (void *)*v58;
          }
          if (!__n)
          {
LABEL_107:
            char v75 = &v77;
            uint64_t v76 = 0x1000000000;
            sub_1CBFC6B20((uint64_t)&v75, a4, v39);
            if (a4)
            {
              uint64_t v64 = 0;
              do
              {
                if (__s[v64] == -1)
                {
                  unint64_t v65 = llvm::UndefValue::get(*(llvm::UndefValue **)v39, v63);
                  *((void *)v75 + v64) = v65;
                }
                ++v64;
              }
              while (a4 != v64);
            }
            uint64_t v66 = (llvm::FixedVectorType ***)v75;
            uint64_t v67 = v76;
            uint64_t Impl = (uint64_t)llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v75, (llvm::Type *)v76);
            if (!Impl)
            {
              llvm::FixedVectorType::get(**v66, (llvm::Type *)v67);
              uint64_t Impl = sub_1CC56A4DC(**v68 + 1288, (uint64_t)v68, v66, v67);
            }
            if (v75 != &v77) {
              free(v75);
            }
            goto LABEL_116;
          }
          int v59 = *(_DWORD *)v58;
          uint64_t v60 = __s;
          uint64_t v61 = 4 * __n;
          while (*v60 == v59 || *v60 == -1)
          {
            ++v60;
            v61 -= 4;
            if (!v61) {
              goto LABEL_107;
            }
          }
          goto LABEL_55;
        }
LABEL_49:
        if (v26 == 91 && *(unsigned char *)(a6 + 41) != 0)
        {
          unsigned int v38 = (*((unsigned char *)v10 + 16) - 11);
          if (v38 < 2)
          {
            BOOL v69 = 1;
          }
          else
          {
            if (v38 < 0xFD) {
              goto LABEL_55;
            }
            char v75 = v79;
            uint64_t v76 = (uint64_t)v79;
            uint64_t v77 = 8;
            int v78 = 0;
            uint64_t v83 = v85;
            uint64_t v84 = 0x800000000;
            v74[0] = (llvm::SmallPtrSetImplBase *)&v75;
            v74[1] = (llvm::SmallPtrSetImplBase *)&v83;
            BOOL v69 = 0;
            if (sub_1CC04C108(v74, (uint64_t)v10))
            {
              do
              {
                BOOL v69 = v84 == 0;
                if (!v84) {
                  break;
                }
                uint64_t v72 = v83[v84 - 1];
                LODWORD(v84) = v84 - 1;
              }
              while ((sub_1CC04C108(v74, v72) & 1) != 0);
            }
            if (v83 != v85) {
              free(v83);
            }
            if ((void *)v76 != v75) {
              free((void *)v76);
            }
          }
          if (v13 == a5 && v69)
          {
            uint64_t v70 = *((unsigned int *)v9 + 18);
            if (v70)
            {
              if (v70 == 1)
              {
                uint64_t Impl = (uint64_t)v9;
                goto LABEL_116;
              }
              int v71 = memcmp((const void *)(*((void *)v9 + 8) + 4), *((const void **)v9 + 8), 4 * v70 - 4);
              if (v71) {
                uint64_t Impl = 0;
              }
              else {
                uint64_t Impl = (uint64_t)v9;
              }
              if (!v71 || v15 == 19) {
                goto LABEL_116;
              }
              goto LABEL_63;
            }
          }
        }
LABEL_55:
        if (v15 == 19)
        {
LABEL_56:
          uint64_t Impl = 0;
          goto LABEL_116;
        }
LABEL_63:
        int64_t v41 = &__s[__n];
        unsigned int v42 = wmemchr(__s, -1, __n);
        uint64_t Impl = 0;
        if (v42) {
          unsigned int v43 = v42;
        }
        else {
          unsigned int v43 = v41;
        }
        if (!a4 || v43 != &__s[__n]) {
          goto LABEL_116;
        }
        uint64_t v44 = 0;
        uint64_t v45 = 0;
        while (1)
        {
          __int32 v46 = __s[v44];
          if (v46 == -1) {
            goto LABEL_56;
          }
          int v47 = -2;
          uint64_t v48 = v10;
          unsigned int v49 = v9;
          while (1)
          {
            __int32 v50 = *(_DWORD *)(*(void *)v49 + 32);
            int v51 = v50 <= v46 ? *(_DWORD *)(*(void *)v49 + 32) : 0;
            uint64_t v52 = (uint64_t)(v50 <= v46 ? v48 : v49);
            uint64_t v53 = (v46 - v51);
            if (*(unsigned char *)(v52 + 16) != 91 || v52 == 0) {
              break;
            }
            uint64_t Impl = 0;
            if (v47)
            {
              unsigned int v49 = *(llvm **)(v52 - 64);
              uint64_t v48 = *(llvm **)(v52 - 32);
              __int32 v46 = *(_DWORD *)(*(void *)(v52 + 64) + 4 * v53);
              ++v47;
              if (v46 != -1) {
                continue;
              }
            }
            goto LABEL_116;
          }
          BOOL v55 = v52 == v45 || v45 == 0;
          BOOL v56 = v55 && v44 == v53;
          if (!v56 || *(llvm::UndefValue **)v52 != a5) {
            goto LABEL_56;
          }
          ++v44;
          uint64_t v45 = v52;
          uint64_t Impl = v52;
          if (v44 == a4) {
            goto LABEL_116;
          }
        }
      }
      unsigned int v29 = __s;
      uint64_t v30 = 4 * __n;
      do
      {
        __int32 v31 = *v29;
        if (*v29 != -1)
        {
          if (v31 >= (int)v14) {
            int v32 = -v14;
          }
          else {
            int v32 = v14;
          }
          *unsigned int v29 = v32 + v31;
        }
        ++v29;
        v30 -= 4;
      }
      while (v30);
      unint64_t v33 = v10;
      unsigned int v10 = v9;
    }
    unsigned int v26 = *((unsigned __int8 *)v10 + 16);
    unsigned int v9 = v10;
    unsigned int v10 = v33;
    if (v15 == 19) {
      goto LABEL_49;
    }
    goto LABEL_46;
  }
  uint64_t Impl = (uint64_t)llvm::ConstantExpr::getShuffleVector(v25, v27, (int *)__src, a4, 0);
LABEL_116:
  if (__s != (__int32 *)v82) {
    free(__s);
  }
  return (llvm::UndefValue *)Impl;
}

uint64_t sub_1CC03952C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  if (!a1 || a1[16] > 0x14u || (uint64_t result = llvm::ConstantExpr::get((llvm::ConstantExpr *)0xC, a1, 0, 0, a5)) == 0)
  {
    unsigned int v7 = &v8;
    uint64_t v8 = 0;
    if (sub_1CC04C34C(&v7, (uint64_t)a1)) {
      return v8;
    }
    else {
      return 0;
    }
  }
  return result;
}

const llvm::detail::DoubleAPFloat *llvm::SimplifyFAddInst(llvm *a1, llvm::Constant *a2, int a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1CC0395A4(a1, a2, a3, a4, a5, a6);
}

const llvm::detail::DoubleAPFloat *sub_1CC0395A4(llvm *a1, llvm::Constant *a2, int a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  int v6 = (int)a6;
  int v7 = (int)a5;
  uint64_t v11 = a1;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a5) {
    BOOL v12 = 0;
  }
  else {
    BOOL v12 = a6 == 1;
  }
  int v13 = v12;
  if (v12 && a1 && *((unsigned __int8 *)a1 + 16) <= 0x14u)
  {
    if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
    {
      uint64_t result = llvm::ConstantFoldBinaryOpOperands((llvm *)0xE, a1, a2, *(llvm::Constant **)a4, a5, a6);
      int v15 = a2;
      if (result) {
        return result;
      }
    }
    else
    {
      int v15 = a1;
      uint64_t v11 = a2;
    }
  }
  else
  {
    int v15 = a2;
  }
  int v32 = (llvm::PoisonValue **)v11;
  unint64_t v33 = v15;
  uint64_t result = sub_1CC04C468(&v32, (llvm::Type *)2, a3, a4, v7, v6);
  if (!result)
  {
    if (!v7 || (a3 & 2) != 0)
    {
      if (((v6 | 4) != 7 || (a3 & 8) != 0) && sub_1CC02435C((uint64_t)&v32, v15)) {
        return v11;
      }
      if (sub_1CC04C850((uint64_t)&v32, v15))
      {
        if ((a3 & 8) == 0)
        {
          int v16 = llvm::CannotBeNegativeZero((uint64_t)v11, *(uint64_t **)(a4 + 8), 0);
          char v17 = v16;
          if (v16) {
            uint64_t result = v11;
          }
          else {
            uint64_t result = 0;
          }
          if (v17 & 1) != 0 || ((v13 ^ 1)) {
            return result;
          }
          goto LABEL_31;
        }
        return v11;
      }
    }
    if (!v13) {
      return 0;
    }
LABEL_31:
    if ((a3 & 2) == 0) {
      goto LABEL_32;
    }
    unint64_t v33 = v15;
    int v20 = *((unsigned __int8 *)v11 + 16);
    if (v20 == 5)
    {
      if (*((_WORD *)v11 + 9) != 16
        || !sub_1CC04C9B0((uint64_t)&v32, *((llvm::Constant **)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))))
      {
        goto LABEL_47;
      }
      int v23 = (llvm *)((void *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))[4];
    }
    else
    {
      if (v20 != 44 || !sub_1CC0241FC((uint64_t)&v32, *((llvm::Constant **)v11 - 8))) {
        goto LABEL_47;
      }
      int v23 = (llvm *)*((void *)v11 - 4);
    }
    if (v33 == v23) {
      return llvm::Constant::getNullValue(*(llvm::Constant **)v11, v21, v22);
    }
LABEL_47:
    __int32 v31 = v11;
    int v24 = *((unsigned __int8 *)v15 + 16);
    if (v24 == 5)
    {
      if (*((_WORD *)v15 + 9) == 16
        && sub_1CC04C9B0((uint64_t)&v30, *((llvm::Constant **)v15 - 4 * (*((_DWORD *)v15 + 5) & 0x7FFFFFF))))
      {
        uint64_t v25 = (llvm *)((void *)v15 - 4 * (*((_DWORD *)v15 + 5) & 0x7FFFFFF))[4];
LABEL_54:
        if (v31 == v25) {
          return llvm::Constant::getNullValue(*(llvm::Constant **)v11, v21, v22);
        }
      }
    }
    else if (v24 == 44 && sub_1CC0241FC((uint64_t)&v30, *((llvm::Constant **)v15 - 8)))
    {
      uint64_t v25 = (llvm *)*((void *)v15 - 4);
      goto LABEL_54;
    }
    int v32 = (llvm::PoisonValue **)v15;
    if (!sub_1CC04CADC(&v32, (uint64_t)v11))
    {
      uint64_t v30 = v11;
      if (!sub_1CC04CADC(&v30, (uint64_t)v15))
      {
LABEL_32:
        if ((~a3 & 9) != 0) {
          return 0;
        }
        int v18 = *((unsigned __int8 *)v11 + 16);
        if (v18 == 5)
        {
          if (*((_WORD *)v11 + 9) != 16) {
            goto LABEL_62;
          }
          unsigned int v26 = (uint64_t *)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
          uint64_t result = (const llvm::detail::DoubleAPFloat *)*v26;
          if (!*v26) {
            goto LABEL_62;
          }
          int v19 = (llvm *)v26[4];
        }
        else
        {
          if (v18 != 44) {
            goto LABEL_62;
          }
          uint64_t result = (const llvm::detail::DoubleAPFloat *)*((void *)v11 - 8);
          if (!result) {
            goto LABEL_62;
          }
          int v19 = (llvm *)*((void *)v11 - 4);
        }
        if (v15 == v19) {
          return result;
        }
LABEL_62:
        int v27 = *((unsigned __int8 *)v15 + 16);
        if (v27 == 5)
        {
          if (*((_WORD *)v15 + 9) == 16)
          {
            unsigned int v29 = (uint64_t *)((char *)v15 - 32 * (*((_DWORD *)v15 + 5) & 0x7FFFFFF));
            uint64_t result = (const llvm::detail::DoubleAPFloat *)*v29;
            if (!*v29) {
              return result;
            }
            BOOL v28 = (llvm *)v29[4];
LABEL_69:
            if (v11 == v28) {
              return result;
            }
          }
        }
        else if (v27 == 44)
        {
          uint64_t result = (const llvm::detail::DoubleAPFloat *)*((void *)v15 - 8);
          if (!result) {
            return result;
          }
          BOOL v28 = (llvm *)*((void *)v15 - 4);
          goto LABEL_69;
        }
        return 0;
      }
    }
    return llvm::Constant::getNullValue(*(llvm::Constant **)v11, v21, v22);
  }
  return result;
}

llvm::Constant *llvm::SimplifyFSubInst(llvm *a1, llvm::Constant *a2, int a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1CC0398F4(a1, a2, a3, a4, a5, a6);
}

llvm::Constant *sub_1CC0398F4(llvm *a1, llvm::Constant *a2, int a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  int v6 = (int)a6;
  int v7 = (int)a5;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a5) {
    BOOL v12 = 0;
  }
  else {
    BOOL v12 = a6 == 1;
  }
  int v13 = v12;
  if (v12)
  {
    if (a1)
    {
      if (*((unsigned __int8 *)a1 + 16) <= 0x14u)
      {
        if (a2)
        {
          if (*((unsigned __int8 *)a2 + 16) <= 0x14u)
          {
            uint64_t result = llvm::ConstantFoldBinaryOpOperands((llvm *)0x10, a1, a2, *(llvm::Constant **)a4, a5, a6);
            if (result) {
              return result;
            }
          }
        }
      }
    }
  }
  uint64_t v30 = (uint64_t *)a1;
  __int32 v31 = a2;
  uint64_t result = sub_1CC04C468((llvm::PoisonValue ***)&v30, (llvm::Type *)2, a3, a4, v7, v6);
  if (result) {
    return result;
  }
  if (!v7 || (a3 & 2) != 0)
  {
    if (((v6 | 4) != 7 || (a3 & 8) != 0) && sub_1CC04C850((uint64_t)&v30, a2)
      || sub_1CC02435C((uint64_t)&v30, a2)
      && ((a3 & 8) != 0 || (llvm::CannotBeNegativeZero((uint64_t)a1, *(uint64_t **)(a4 + 8), 0) & 1) != 0))
    {
      return a1;
    }
    uint64_t v29 = 0;
    if (sub_1CC02435C((uint64_t)&v27, a1))
    {
      uint64_t v30 = &v29;
      if (sub_1CC04C34C(&v30, (uint64_t)a2)) {
        return (llvm::Constant *)v29;
      }
    }
  }
  else
  {
    uint64_t v29 = 0;
  }
  if (!v13) {
    return 0;
  }
  if ((a3 & 8) == 0 || !sub_1CC0241FC((uint64_t)&v28, a1)) {
    goto LABEL_42;
  }
  __int32 v31 = (llvm::Constant *)&v29;
  int v17 = *((unsigned __int8 *)a2 + 16);
  if (v17 != 5)
  {
    if (v17 != 44) {
      goto LABEL_40;
    }
    if (!sub_1CC0241FC((uint64_t)&v30, *((llvm::Constant **)a2 - 8))) {
      goto LABEL_40;
    }
    uint64_t v18 = *((void *)a2 - 4);
    if (!v18) {
      goto LABEL_40;
    }
LABEL_39:
    *(void *)__int32 v31 = v18;
    return (llvm::Constant *)v29;
  }
  if (*((_WORD *)a2 + 9) == 16
    && sub_1CC04C9B0((uint64_t)&v30, *((llvm::Constant **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))))
  {
    uint64_t v18 = ((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
    if (v18) {
      goto LABEL_39;
    }
  }
LABEL_40:
  int v27 = &v29;
  if (sub_1CC04C34C(&v27, (uint64_t)a2)) {
    return (llvm::Constant *)v29;
  }
LABEL_42:
  if (a1 == a2 && (a3 & 2) != 0) {
    return llvm::Constant::getNullValue(*(llvm::Constant **)a1, v15, v16);
  }
  if ((~a3 & 9) != 0) {
    return 0;
  }
  int v19 = *((unsigned __int8 *)a2 + 16);
  if (v19 == 5)
  {
    if (*((_WORD *)a2 + 9) == 16)
    {
      int v20 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
      if (*(llvm **)v20 == a1)
      {
        uint64_t result = (llvm::Constant *)*((void *)v20 + 4);
        if (result) {
          return result;
        }
      }
    }
  }
  else if (v19 == 44 && *((llvm **)a2 - 8) == a1)
  {
    uint64_t result = (llvm::Constant *)*((void *)a2 - 4);
    if (result) {
      return result;
    }
  }
  int v21 = *((unsigned __int8 *)a1 + 16);
  if (v21 == 5)
  {
    if (*((_WORD *)a1 + 9) == 14)
    {
      int v24 = (char *)a1 - 32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF);
      uint64_t v25 = *(llvm::Constant **)v24;
      unsigned int v26 = (llvm::Constant *)*((void *)v24 + 4);
      if (v25 == a2)
      {
        uint64_t v25 = v26;
        if (!v26) {
          return 0;
        }
      }
      else
      {
        uint64_t result = 0;
        if (!v25 || v26 != a2) {
          return result;
        }
      }
      return v25;
    }
    return 0;
  }
  if (v21 != 42) {
    return 0;
  }
  unsigned int v22 = (llvm::Constant *)*((void *)a1 - 8);
  uint64_t result = (llvm::Constant *)*((void *)a1 - 4);
  if (v22 != a2)
  {
    if (result != a2 || v22 == 0) {
      return 0;
    }
    else {
      return (llvm::Constant *)*((void *)a1 - 8);
    }
  }
  return result;
}

const llvm::detail::DoubleAPFloat *llvm::SimplifyFMulInst(llvm *a1, llvm::Constant *a2, int a3, llvm::Constant **a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1CC039C30(a1, a2, a3, a4, a5, a6);
}

const llvm::detail::DoubleAPFloat *sub_1CC039C30(llvm *a1, llvm::Constant *a2, int a3, llvm::Constant **a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  int v6 = (int)a6;
  int v7 = (int)a5;
  unsigned int v10 = (unsigned __int8 *)a2;
  uint64_t v11 = a1;
  if (!a5 && a6 == 1 && a1 && *((unsigned __int8 *)a1 + 16) <= 0x14u)
  {
    if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
    {
      BOOL v12 = llvm::ConstantFoldBinaryOpOperands((llvm *)0x12, a1, a2, *a4, a5, a6);
      a1 = v11;
      if (v12) {
        return v12;
      }
    }
    else
    {
      a1 = a2;
      unsigned int v10 = (unsigned __int8 *)v11;
    }
  }

  return sub_1CC039D14((uint64_t)a1, v10, a3, (uint64_t)a4, v7, v6);
}

const llvm::detail::DoubleAPFloat *llvm::SimplifyFMAFMul(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4, int a5, int a6)
{
  return sub_1CC039D14(a1, a2, a3, a4, a5, a6);
}

const llvm::detail::DoubleAPFloat *sub_1CC039D14(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4, int a5, int a6)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v20 = (llvm::PoisonValue **)a1;
  int v21 = a2;
  uint64_t result = sub_1CC04C468(&v20, (llvm::Type *)2, a3, a4, a5, a6);
  if (!result && !a5 && a6 == 1)
  {
    unsigned int v12 = a2[16];
    if (a2 && (SplatValue = a2, v12 == 17)
      || v12 <= 0x14
      && (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12
      && (SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)a2, 0)) != 0
      && SplatValue[16] == 17)
    {
      if (sub_1CB844168((uint64_t)SplatValue, 1.0)) {
        return (const llvm::detail::DoubleAPFloat *)a1;
      }
    }
    unsigned int v14 = *(unsigned __int8 *)(a1 + 16);
    if (a1 && (int v15 = (unsigned char *)a1, v14 == 17)
      || v14 <= 0x14
      && (*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x12
      && (int v15 = llvm::Constant::getSplatValue((llvm::Constant *)a1, 0)) != 0
      && v15[16] == 17)
    {
      if (sub_1CB844168((uint64_t)v15, 1.0)) {
        return (const llvm::detail::DoubleAPFloat *)a2;
      }
    }
    if ((~a3 & 0xA) == 0)
    {
      if (sub_1CC0241FC((uint64_t)&v20, (llvm::Constant *)a2))
      {
        uint64_t v18 = *(llvm::Constant **)a1;
        return llvm::Constant::getNullValue(v18, v16, v17);
      }
      if (sub_1CC0241FC((uint64_t)&v20, (llvm::Constant *)a1))
      {
        uint64_t v18 = *(llvm::Constant **)a2;
        return llvm::Constant::getNullValue(v18, v16, v17);
      }
    }
    uint64_t v19 = 0;
    if ((unsigned __int8 *)a1 == a2
      && (LODWORD(v20) = 280, int v21 = 0, v22 = &v19, sub_1CC045310((uint64_t)&v20, (uint64_t)a2))
      && (a3 & 3) == 3)
    {
      if ((a3 & 8) != 0) {
        return (const llvm::detail::DoubleAPFloat *)v19;
      }
      else {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::Value *llvm::SimplifyFDivInst(llvm::PoisonValue **a1, llvm::Constant *a2, int a3, llvm::Constant **a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1CC039F04(a1, a2, a3, a4, a5, a6);
}

llvm::Value *sub_1CC039F04(llvm::PoisonValue **a1, llvm::Constant *a2, int a3, llvm::Constant **a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  int v6 = (int)a6;
  int v7 = (int)a5;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a5) {
    BOOL v12 = 0;
  }
  else {
    BOOL v12 = a6 == 1;
  }
  char v13 = !v12;
  if (!v12
    || !a1
    || *((unsigned __int8 *)a1 + 16) > 0x14u
    || !a2
    || *((unsigned __int8 *)a2 + 16) > 0x14u
    || (uint64_t result = llvm::ConstantFoldBinaryOpOperands((llvm *)0x15, (llvm *)a1, a2, *a4, a5, a6)) == 0)
  {
    uint64_t v30 = a1;
    __int32 v31 = a2;
    uint64_t result = sub_1CC04C468(&v30, (llvm::Type *)2, a3, (uint64_t)a4, v7, v6);
    char v16 = result ? 1 : v13;
    if ((v16 & 1) == 0)
    {
      unsigned int v17 = *((unsigned __int8 *)a2 + 16);
      if (a2 && (SplatValue = a2, v17 == 17)
        || v17 <= 0x14
        && (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12
        && (SplatValue = (llvm::Constant *)llvm::Constant::getSplatValue(a2, 0)) != 0
        && *((unsigned char *)SplatValue + 16) == 17)
      {
        if (sub_1CB844168((uint64_t)SplatValue, 1.0)) {
          return (llvm::Value *)a1;
        }
      }
      if ((~a3 & 0xA) == 0 && sub_1CC0241FC((uint64_t)&v30, (llvm::Constant *)a1)) {
        return llvm::Constant::getNullValue(*a1, v15, v19);
      }
      if ((a3 & 2) == 0) {
        return 0;
      }
      if (a1 == (llvm::PoisonValue **)a2)
      {
        unsigned int v22 = *a1;
        double v23 = 1.0;
        return llvm::ConstantFP::get((llvm::ConstantFP **)v22, v15, v23);
      }
      int v20 = *((unsigned __int8 *)a1 + 16);
      if ((a3 & 1) == 0)
      {
LABEL_39:
        __int32 v31 = a2;
        if (v20 == 44)
        {
          if (!sub_1CC0241FC((uint64_t)&v30, *(a1 - 8))) {
            goto LABEL_48;
          }
          uint64_t v25 = *(a1 - 4);
          goto LABEL_47;
        }
LABEL_43:
        if (v20 != 5
          || *((_WORD *)a1 + 9) != 16
          || !sub_1CC04C9B0((uint64_t)&v30, a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)]))
        {
          goto LABEL_48;
        }
        uint64_t v25 = a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF) + 4];
LABEL_47:
        if (v31 == v25)
        {
LABEL_56:
          unsigned int v22 = *a1;
          double v23 = -1.0;
          return llvm::ConstantFP::get((llvm::ConstantFP **)v22, v15, v23);
        }
LABEL_48:
        uint64_t v29 = a1;
        int v26 = *((unsigned __int8 *)a2 + 16);
        if (v26 == 5)
        {
          if (*((_WORD *)a2 + 9) != 16
            || !sub_1CC04C9B0((uint64_t)v28, *((llvm::Constant **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))))
          {
            return 0;
          }
          int v27 = (llvm::PoisonValue **)((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
        }
        else
        {
          if (v26 != 44 || !sub_1CC0241FC((uint64_t)v28, *((llvm::Constant **)a2 - 8))) {
            return 0;
          }
          int v27 = (llvm::PoisonValue **)*((void *)a2 - 4);
        }
        if (v29 != v27) {
          return 0;
        }
        goto LABEL_56;
      }
      if (v20 == 5)
      {
        if (*((_WORD *)a1 + 9) != 18) {
          goto LABEL_42;
        }
        int v24 = (uint64_t *)&a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
        uint64_t result = (llvm::Value *)*v24;
        int v21 = (llvm::Constant *)v24[4];
        if (!result)
        {
LABEL_37:
          if (v21)
          {
            BOOL v12 = result == a2;
            uint64_t result = v21;
            if (v12) {
              return result;
            }
            goto LABEL_39;
          }
LABEL_42:
          __int32 v31 = a2;
          goto LABEL_43;
        }
      }
      else
      {
        if (v20 != 46) {
          goto LABEL_39;
        }
        uint64_t result = *(a1 - 8);
        int v21 = *(a1 - 4);
        if (!result) {
          goto LABEL_37;
        }
      }
      if (v21 == a2) {
        return result;
      }
      goto LABEL_37;
    }
  }
  return result;
}

llvm::Value *llvm::SimplifyFRemInst(llvm::PoisonValue **a1, llvm::PoisonValue **a2, char a3, llvm::Constant **a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1CC03A200(a1, a2, a3, a4, a5, a6);
}

llvm::Value *sub_1CC03A200(llvm::PoisonValue **a1, llvm::PoisonValue **a2, char a3, llvm::Constant **a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  int v6 = (int)a6;
  int v7 = (int)a5;
  v19[2] = *(llvm::PoisonValue ***)MEMORY[0x1E4F143B8];
  if (a5) {
    BOOL v12 = 0;
  }
  else {
    BOOL v12 = a6 == 1;
  }
  char v13 = !v12;
  if (!v12
    || !a1
    || *((unsigned __int8 *)a1 + 16) > 0x14u
    || !a2
    || *((unsigned __int8 *)a2 + 16) > 0x14u
    || (uint64_t result = llvm::ConstantFoldBinaryOpOperands((llvm *)0x18, (llvm *)a1, (llvm::Constant *)a2, *a4, a5, a6)) == 0)
  {
    v19[0] = a1;
    v19[1] = a2;
    uint64_t result = sub_1CC04C468(v19, (llvm::Type *)2, a3, (uint64_t)a4, v7, v6);
    char v15 = result ? 1 : v13;
    if ((v15 & 1) == 0)
    {
      if ((a3 & 2) == 0) {
        return 0;
      }
      if (sub_1CC04C850((uint64_t)v19, (llvm::Constant *)a1)) {
        return llvm::Constant::getNullValue(*a1, v16, v17);
      }
      if (sub_1CC02435C((uint64_t)v19, (llvm::Constant *)a1)) {
        return llvm::ConstantFP::getZero(*a1, (llvm::Type *)1, v18);
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t llvm::SimplifyUnOp(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  return sub_1CC03952C(a2, (uint64_t)a2, a3, a4, a5);
}

{
  return sub_1CC03952C(a2, (uint64_t)a2, a3, a4, a5);
}

const llvm::detail::DoubleAPFloat *llvm::SimplifyBinOp(int a1, llvm *a2, llvm::Constant *a3, const llvm::DataLayout *a4)
{
  return sub_1CC03A350(a1, a2, a3, a4, (llvm::DSOLocalEquivalent **)3);
}

const llvm::detail::DoubleAPFloat *sub_1CC03A350(int a1, llvm *a2, llvm::Constant *a3, const llvm::DataLayout *a4, llvm::DSOLocalEquivalent **a5)
{
  switch(a1)
  {
    case 14:
      uint64_t result = sub_1CC0395A4(a2, a3, 0, (uint64_t)a4, 0, (llvm::DSOLocalEquivalent **)1);
      break;
    case 15:
      uint64_t result = sub_1CC02ABD8((uint64_t)a2, (uint64_t)a3, 0, 0, (uint64_t)a4, a5);
      break;
    case 16:
      uint64_t result = sub_1CC0398F4(a2, a3, 0, (uint64_t)a4, 0, (llvm::DSOLocalEquivalent **)1);
      break;
    case 17:
      uint64_t result = sub_1CC02B6E8(a2, a3, (uint64_t)a4, (int)a5, a4, a5);
      break;
    case 18:
      uint64_t result = sub_1CC039C30(a2, a3, 0, (llvm::Constant **)a4, 0, (llvm::DSOLocalEquivalent **)1);
      break;
    case 19:
      uint64_t result = sub_1CC040494((llvm *)0x13, (unsigned __int8 *)a2, a3, (llvm::Constant **)a4, (const llvm::DataLayout *)a5, a5);
      break;
    case 20:
      uint64_t result = sub_1CC02BAA0((unsigned __int8 *)a2, a3, (llvm::Constant **)a4, (const llvm::DataLayout *)a5);
      break;
    case 21:
      uint64_t result = sub_1CC039F04((llvm::PoisonValue **)a2, a3, 0, (llvm::Constant **)a4, 0, (llvm::DSOLocalEquivalent **)1);
      break;
    case 22:
      uint64_t result = sub_1CC0415F8((llvm *)0x16, (unsigned __int8 *)a2, a3, (uint64_t)a4, (const llvm::DataLayout *)a5, a5);
      break;
    case 23:
      uint64_t result = sub_1CC02BB48((llvm::Constant **)a2, a3, (uint64_t)a4, (const llvm::DataLayout *)a5);
      break;
    case 24:
      uint64_t result = sub_1CC03A200((llvm::PoisonValue **)a2, (llvm::PoisonValue **)a3, 0, (llvm::Constant **)a4, 0, (llvm::DSOLocalEquivalent **)1);
      break;
    case 25:
      uint64_t result = sub_1CC02BC1C((unsigned __int8 *)a2, a3, 0, 0, (uint64_t)a4, a5);
      break;
    case 26:
      uint64_t result = sub_1CC02BE04((uint64_t)a2, a3, 0, (uint64_t)a4, a5);
      break;
    case 27:
      uint64_t result = sub_1CC02C0A0((uint64_t)a2, a3, 0, (uint64_t)a4, a5);
      break;
    case 28:
      uint64_t result = sub_1CC02C2C8(a2, a3, (uint64_t)a4, (int)a5, a4, a5);
      break;
    case 29:
      uint64_t result = sub_1CC02DBDC(a2, a3, (uint64_t)a4, (int)a5, a4, a5);
      break;
    case 30:
      uint64_t result = (const llvm::detail::DoubleAPFloat *)sub_1CC02EA0C(a2, a3);
      break;
    default:
      uint64_t result = (const llvm::detail::DoubleAPFloat *)sub_1CC02A5B0(a2, a3);
      break;
  }
  return result;
}

const llvm::detail::DoubleAPFloat *llvm::SimplifyBinOp(int a1, llvm *a2, llvm *a3, int a4, llvm::Constant **a5)
{
  switch(a1)
  {
    case 14:
      uint64_t result = sub_1CC0395A4(a2, a3, a4, (uint64_t)a5, 0, (llvm::DSOLocalEquivalent **)1);
      break;
    case 16:
      uint64_t result = sub_1CC0398F4(a2, a3, a4, (uint64_t)a5, 0, (llvm::DSOLocalEquivalent **)1);
      break;
    case 18:
      uint64_t result = sub_1CC039C30(a2, a3, a4, a5, 0, (llvm::DSOLocalEquivalent **)1);
      break;
    case 21:
      uint64_t result = sub_1CC039F04((llvm::PoisonValue **)a2, a3, a4, a5, 0, (llvm::DSOLocalEquivalent **)1);
      break;
    default:
      uint64_t result = sub_1CC03A350(a1, a2, a3, (const llvm::DataLayout *)a5, (llvm::DSOLocalEquivalent **)3);
      break;
  }
  return result;
}

llvm::Value *llvm::SimplifyCmpInst(uint64_t a1, llvm::ConstantExpr *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1CC03A634(a1, a2, a3, a4, 3);
}

llvm::Value *sub_1CC03A634(uint64_t a1, llvm::ConstantExpr *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if ((a1 - 32) > 9) {
    return sub_1CC0347BC(a1, a2, a3, 0, a4, a5);
  }
  else {
    return (llvm::Value *)sub_1CC02F0F0();
  }
}

llvm::Value *llvm::SimplifyCall(llvm *this, uint64_t **a2, unint64_t a3)
{
  v26[4] = *MEMORY[0x1E4F143B8];
  if (this && *((unsigned char *)this + 16) == 84 && (*((_WORD *)this + 9) & 3) == 2) {
    return 0;
  }
  uint64_t v5 = *((void *)this - 4);
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if ((v6 - 11) >= 2)
  {
    if (*(unsigned char *)(v5 + 16))
    {
      if (v6 == 19) {
        goto LABEL_7;
      }
    }
    else
    {
      if (llvm::canConstantFoldCallTo(this, *((const llvm::CallBase **)this - 4), (const llvm::Function *)a3))
      {
        unsigned int v25 = 0;
        int v9 = *((unsigned __int8 *)this + 16);
        if (v9 == 84)
        {
          uint64_t v10 = 0;
        }
        else if (v9 == 39)
        {
          uint64_t v10 = (*((_DWORD *)this + 20) + 1);
        }
        else
        {
          uint64_t v10 = 2;
        }
        int v11 = 0;
        int v12 = *((_DWORD *)this + 5);
        uint64_t v13 = -(uint64_t)(v12 & 0x7FFFFFF);
        if (v12 < 0)
        {
          int v21 = (char *)this - 32 * (v12 & 0x7FFFFFF);
          uint64_t v22 = *((void *)v21 - 1);
          if ((v22 & 0xFFFFFFFF0) != 0) {
            int v11 = *((_DWORD *)v21 - 3) - *(_DWORD *)&v21[-v22];
          }
          else {
            int v11 = 0;
          }
        }
        a3 = ((-32 * v10 + 32 * -v11 - -32 * (unint64_t)(v12 & 0x7FFFFFF) - 32) >> 5);
        if (a3 >= 5) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v9 == 84)
        {
          uint64_t v14 = 0;
        }
        else if (v9 == 39)
        {
          uint64_t v14 = (*((_DWORD *)this + 20) + 1);
        }
        else
        {
          uint64_t v14 = 2;
        }
        char v15 = (llvm *)((char *)this - 32 * (v12 & 0x7FFFFFF));
        if (v12 < 0
          && (v23 = (char *)this - 32 * (v12 & 0x7FFFFFF), uint64_t v24 = *((void *)v23 - 1), (v24 & 0xFFFFFFFF0) != 0))
        {
          uint64_t v16 = (*((_DWORD *)v23 - 3) - *(_DWORD *)&v23[-v24]);
        }
        else
        {
          uint64_t v16 = 0;
        }
        if (v15 != (llvm *)((char *)this + -32 * v16 + -32 * v14 - 32))
        {
          for (unint64_t i = ((32 * v14 + 32 * v16) ^ 0xFFFFFFFFFFFFFFE0) - 32 * v13; i; i -= 32)
          {
            unsigned int v18 = *(unsigned __int8 *)(*(void *)v15 + 16);
            if (*(void *)v15) {
              BOOL v19 = v18 >= 0x15;
            }
            else {
              BOOL v19 = 1;
            }
            if (v19)
            {
              if (v18 != 23)
              {
                int v20 = 0;
                goto LABEL_35;
              }
            }
            else
            {
              if (v25 >= 4uLL) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v26[v25++] = *(void *)v15;
            }
            char v15 = (llvm *)((char *)v15 + 32);
          }
        }
        int v20 = llvm::ConstantFoldCall((uint64_t)this, (uint64_t ***)v5, (uint64_t)v26, v25, a2[1]);
LABEL_35:
        if (v20) {
          return v20;
        }
      }
      int v6 = *(unsigned __int8 *)(v5 + 16);
    }
    if (!v6 && (*(unsigned char *)(v5 + 33) & 0x20) != 0)
    {
      int v20 = sub_1CC03A980(this, (uint64_t)a2, (const llvm::APFloat *)a3);
      if (v20) {
        return v20;
      }
    }
    return 0;
  }
LABEL_7:
  int v7 = *(llvm::PoisonValue **)this;

  return (llvm::Value *)llvm::PoisonValue::get(v7, (llvm::Type *)a2);
}

llvm::Constant *sub_1CC03A980(llvm::ConstrainedFPIntrinsic *this, uint64_t a2, const llvm::APFloat *a3)
{
  uint64_t v379 = *MEMORY[0x1E4F143B8];
  int v5 = *((unsigned __int8 *)this + 16);
  if (v5 == 84)
  {
    uint64_t v6 = 0;
  }
  else if (v5 == 39)
  {
    uint64_t v6 = (*((_DWORD *)this + 20) + 1);
  }
  else
  {
    uint64_t v6 = 2;
  }
  int v7 = *((_DWORD *)this + 5);
  if (v7 < 0
    && (int v342 = (char *)this - 32 * (v7 & 0x7FFFFFF), v343 = *((void *)v342 - 1), (v343 & 0xFFFFFFFF0) != 0))
  {
    uint64_t v9 = -(uint64_t)(v7 & 0x7FFFFFF);
    int v8 = *((_DWORD *)v342 - 3) - *(_DWORD *)&v342[-v343];
  }
  else
  {
    int v8 = 0;
    uint64_t v9 = -(uint64_t)(v7 & 0x7FFFFFF);
  }
  uint64_t v10 = (char *)this + 32 * -v8 + -32 * v6;
  int v11 = (char *)this + 32 * v9;
  uint64_t v12 = *((void *)this - 4);
  if (!v12 || *(unsigned char *)(v12 + 16) || *(void *)(v12 + 24) != *((void *)this + 9)) {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(unsigned int *)(v12 + 36);
  switch(((unint64_t)(v10 - v11 - 32) >> 5))
  {
    case 0u:
      if (v13 != 382) {
        return 0;
      }
      uint64_t v14 = *((void *)this + 5);
      if (!v14) {
        return 0;
      }
      uint64_t v15 = *(void *)(v14 + 56);
      if (!v15) {
        return 0;
      }
      uint64_t AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex((uint64_t *)(v15 + 112), -1, 80);
      *(void *)&long long v373 = AttributeAtIndex;
      if (!AttributeAtIndex) {
        return 0;
      }
      unint64_t v20 = *(void *)(AttributeAtIndex + 16);
      unint64_t v17 = HIDWORD(v20);
      BOOL v38 = v20 == 0;
      uint64_t v18 = v20 != 0;
      uint64_t v19 = v20 & 0xFFFFFF00;
      unint64_t v20 = v20;
      *(_DWORD *)__s2 = v17;
      if (v38) {
        unint64_t v20 = 0;
      }
      *(void *)&__s2[4] = v20 | v19 | (v18 << 32);
      unsigned int v21 = *(_DWORD *)__s2;
      uint64_t VScaleRangeMax = llvm::Attribute::getVScaleRangeMax((llvm::Attribute *)&v373);
      uint64_t Splat = 0;
      if ((VScaleRangeMax & 0xFF00000000) == 0 || v21 != VScaleRangeMax) {
        return (llvm::Constant *)Splat;
      }
      return (llvm::Constant *)llvm::ConstantInt::get(**(llvm::ConstantInt ***)(*(void *)(v12 + 24) + 16), v21, 0);
    case 1u:
      uint64_t Splat = *(void *)v11;
      uint64_t v56 = sub_1CC04CBF4(*(_DWORD *)(v12 + 36));
      if (v56)
      {
        if (*(unsigned char *)(Splat + 16) == 84)
        {
          uint64_t v57 = *(void *)(Splat - 32);
          if (v57)
          {
            if (!*(unsigned char *)(v57 + 16)
              && *(void *)(v57 + 24) == *(void *)(Splat + 72)
              && (*(unsigned char *)(v57 + 33) & 0x20) != 0
              && *(_DWORD *)(v57 + 36) == v13)
            {
              return (llvm::Constant *)Splat;
            }
          }
        }
      }
      uint64_t v370 = 0;
      if ((int)v13 <= 175)
      {
        if ((int)v13 <= 75)
        {
          if ((int)v13 > 13)
          {
            if (v13 != 14)
            {
              if (v13 == 53)
              {
                unint64_t v172 = *(llvm::Type **)Splat;
                if ((*(_DWORD *)(*(void *)Splat + 8) & 0xFE) == 0x12) {
                  unint64_t v172 = (llvm::Type *)**((void **)v172 + 2);
                }
                unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v172);
                *(_DWORD *)&__s2[8] = PrimitiveSizeInBits;
                if (PrimitiveSizeInBits > 0x40) {
                  operator new[]();
                }
                *(void *)__s2 = 0;
                if (PrimitiveSizeInBits != 1) {
                  *(void *)__s2 = 2 * (0xFFFFFFFFFFFFFFFFLL >> (65 - PrimitiveSizeInBits));
                }
                BOOL IsZero = llvm::MaskedValueIsZero((llvm *)Splat, (const llvm::Value *)__s2, *(const llvm::APInt **)a2, 0, *(const llvm::DataLayout **)(a2 + 24), *(llvm::AssumptionCache **)(a2 + 32), *(const llvm::Instruction **)(a2 + 16), (const llvm::DominatorTree *)1, v363);
                if (*(_DWORD *)&__s2[8] >= 0x41u && *(void *)__s2) {
                  MEMORY[0x1D25D9CB0](*(void *)__s2, 0x1000C8000313F17);
                }
                if (IsZero) {
                  return (llvm::Constant *)Splat;
                }
              }
              else if (v13 == 75 && (*(unsigned char *)(*(void *)(a2 + 32) + 17) & 2) != 0)
              {
                int v58 = 175;
                goto LABEL_332;
              }
              return 0;
            }
            goto LABEL_176;
          }
          if (v13 == 8)
          {
            int v58 = 8;
          }
          else
          {
            if (v13 != 9) {
              return 0;
            }
            int v58 = 9;
          }
LABEL_332:
          *(_DWORD *)__s2 = v58;
          *(void *)&__s2[8] = 0;
          *(void *)&__s2[16] = &v370;
          if (!sub_1CC045310((uint64_t)__s2, Splat)) {
            return 0;
          }
          return (llvm::Constant *)v370;
        }
        if ((int)v13 > 138)
        {
          if (v13 == 139)
          {
            char isSplatValue = sub_1CC164EB8(Splat, *(uint64_t **)(a2 + 8), 1, 0);
            goto LABEL_504;
          }
          if (v13 != 140)
          {
            if (v13 == 175 && (*(unsigned char *)(*(void *)(a2 + 32) + 17) & 2) != 0)
            {
              int v58 = 75;
              goto LABEL_332;
            }
            return 0;
          }
LABEL_176:
          unsigned int v102 = *(unsigned __int8 *)(Splat + 16);
          unsigned int v103 = v102 - 28;
          BOOL v105 = v102 < 0x1C && v102 != 5;
          if (Splat && !v105)
          {
            if (v102 > 0x1B)
            {
              if (v102 == 72) {
                return (llvm::Constant *)Splat;
              }
            }
            else
            {
              unsigned int v103 = *(unsigned __int16 *)(Splat + 18);
              if (v103 == 44) {
                return (llvm::Constant *)Splat;
              }
            }
            if (v103 == 43) {
              return (llvm::Constant *)Splat;
            }
          }
          return 0;
        }
        if (v13 == 76)
        {
          if ((*(unsigned char *)(*(void *)(a2 + 32) + 17) & 2) == 0) {
            return 0;
          }
          int v58 = 177;
          goto LABEL_332;
        }
        if (v13 != 133) {
          return 0;
        }
        *(_DWORD *)__s2 = 133;
        *(void *)&__s2[8] = 0;
        *(void *)&__s2[16] = &v370;
        if (!sub_1CC045310((uint64_t)__s2, Splat))
        {
          char isSplatValue = llvm::isSplatValue((const void **)Splat, (const llvm::Value *)0xFFFFFFFFLL, 0, v149);
          goto LABEL_504;
        }
        return (llvm::Constant *)v370;
      }
      if ((int)v13 <= 257)
      {
        switch(v13)
        {
          case 0xB0:
            if ((*(unsigned char *)(*(void *)(a2 + 32) + 17) & 2) == 0) {
              return 0;
            }
            *(_DWORD *)__s2 = 238;
            *(_OWORD *)&__s2[8] = xmmword_1CFAC38A0;
            *(void *)&__s2[24] = 1;
            *(void *)&v378[0] = &v370;
            if (!sub_1CC04CC84((uint64_t)__s2, Splat)) {
              return 0;
            }
            break;
          case 0xB1:
            if ((*(unsigned char *)(*(void *)(a2 + 32) + 17) & 2) == 0) {
              return 0;
            }
            LODWORD(v373) = 76;
            *((void *)&v373 + 1) = 0;
            int v374 = &v370;
            if ((sub_1CC045310((uint64_t)&v373, Splat) & 1) == 0)
            {
              *(_DWORD *)__s2 = 238;
              *(_OWORD *)&__s2[8] = xmmword_1CFAC38B0;
              *(void *)&__s2[24] = 1;
              *(void *)&v378[0] = &v370;
              if ((sub_1CC04CC84((uint64_t)__s2, Splat) & 1) == 0) {
                return 0;
              }
            }
            break;
          case 0xCB:
            goto LABEL_176;
          default:
            return 0;
        }
        return (llvm::Constant *)v370;
      }
      if ((v13 - 258) <= 0x26 && ((1 << (v13 - 2)) & 0x4000000007) != 0) {
        goto LABEL_176;
      }
      if (v13 != 1851 && v13 != 2131) {
        return 0;
      }
      if (!Splat || *(unsigned char *)(Splat + 16) != 17) {
        return 0;
      }
      int v71 = *(llvm::Type **)Splat;
      if ((*(unsigned __int8 *)(*(void *)Splat + 8) | 2) != 2) {
        return 0;
      }
      uint64_t v72 = *(void *)(Splat + 32);
      if ((_UNKNOWN *)v72 == &unk_1CFB2E344)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&__s2[8], (const llvm::detail::DoubleAPFloat *)(Splat + 32));
      }
      else
      {
        *(void *)&__s2[8] = *(void *)(Splat + 32);
        if ((*(_DWORD *)(v72 + 8) + 64) >= 0x80) {
          operator new[]();
        }
        char v73 = *(unsigned char *)(Splat + 52);
        int v74 = v73 & 7;
        __s2[28] = v73 & 0xF;
        *(_DWORD *)&__s2[24] = *(_DWORD *)(Splat + 48);
        BOOL v76 = (v73 & 6) != 0 && v74 != 3;
        if (v74 == 1 || v76)
        {
          uint64_t v78 = *(unsigned int *)(v72 + 8);
          if ((v78 - 64) <= 0xFFFFFF7F) {
            uint64_t v79 = (void *)v56;
          }
          else {
            uint64_t v79 = &__s2[16];
          }
          BOOL v82 = *(uint64_t **)(Splat + 40);
          unsigned int v81 = (uint64_t *)(Splat + 40);
          uint64_t v80 = v82;
          if ((*(_DWORD *)(*(v81 - 1) + 8) - 64) >= 0xFFFFFF80) {
            uint64_t v80 = v81;
          }
          if (v78 <= 0xFFFFFFBF)
          {
            unint64_t v83 = (unint64_t)(v78 + 64) >> 6;
            do
            {
              uint64_t v84 = *v80++;
              *v79++ = v84;
              --v83;
            }
            while (v83);
            char v85 = v376 & 0xF0;
            goto LABEL_910;
          }
        }
      }
      char v85 = 0;
LABEL_910:
      llvm::APFloat::convert((uint64_t)__s2, &unk_1CFB2E31C, 1, &v369);
      *(float *)&unsigned int v344 = fmin(fmax(llvm::APFloat::convertToDouble((llvm::APFloat *)__s2), 0.0), 1.0);
      LODWORD(v372) = 32;
      v371 = (llvm::APInt *)v344;
      llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v365, &v371);
      *((void *)&v373 + 1) = v365;
      int v374 = v366;
      int v375 = (int)v367;
      char v376 = v85 | BYTE4(v367) & 0xF;
      sub_1CB9190C0((uint64_t *)&__s2[8], (void **)&v373 + 1);
      if (*((_UNKNOWN **)&v373 + 1) == &unk_1CFB2E344)
      {
        sub_1CB845718((uint64_t *)&v374);
      }
      else if ((*(_DWORD *)(*((void *)&v373 + 1) + 8) - 64) <= 0xFFFFFF7F && v374)
      {
        MEMORY[0x1D25D9CB0](v374, 0x1000C8000313F17);
      }
      if (!*((unsigned char *)v71 + 8)) {
        llvm::APFloat::convert((uint64_t)__s2, &unk_1CFB2E2E0, 1, &v369);
      }
      uint64_t Splat = (uint64_t)llvm::ConstantFP::get(*(llvm::ConstantFP **)v71, (llvm::LLVMContext *)__s2, v345);
      uint64_t v48 = *(void *)&__s2[8];
      if (*(_UNKNOWN **)&__s2[8] == &unk_1CFB2E344)
      {
LABEL_907:
        sub_1CB845718((uint64_t *)&__s2[16]);
        return (llvm::Constant *)Splat;
      }
LABEL_67:
      if ((*(_DWORD *)(v48 + 8) - 64) > 0xFFFFFF7F || !*(void *)&__s2[16]) {
        return (llvm::Constant *)Splat;
      }
LABEL_464:
      MEMORY[0x1D25D9CB0]();
      return (llvm::Constant *)Splat;
    case 2u:
      uint64_t Splat = *(void *)v11;
      uint64_t v25 = *((void *)v11 + 4);
      uint64_t v26 = **(void **)(*(void *)(v12 + 24) + 16);
      int v27 = (llvm::Type *)v26;
      if ((*(_DWORD *)(v26 + 8) & 0xFE) == 0x12) {
        int v27 = **(llvm::Type ***)(v26 + 16);
      }
      unsigned int v28 = llvm::Type::getPrimitiveSizeInBits(v27);
      if ((int)v13 > 273)
      {
        unsigned int v68 = v28;
        switch((int)v13)
        {
          case 300:
            if ((sub_1CBF687D0((uint64_t)__s2, (llvm::Constant *)Splat) & 1) != 0
              || (sub_1CBF687D0((uint64_t)&v373, (llvm::Constant *)v25) & 1) != 0)
            {
              goto LABEL_111;
            }
            goto LABEL_415;
          case 301:
            goto LABEL_404;
          case 302:
          case 303:
          case 304:
          case 307:
          case 308:
          case 310:
            goto LABEL_465;
          case 305:
          case 306:
LABEL_151:
            if (Splat == v25) {
              return (llvm::Constant *)Splat;
            }
            unsigned int v86 = *(unsigned __int8 *)(Splat + 16);
            if (v86 >= 0x15) {
              uint64_t v32 = v25;
            }
            else {
              uint64_t v32 = Splat;
            }
            if (v86 >= 0x15) {
              uint64_t v25 = Splat;
            }
            if (!*(unsigned char *)(a2 + 41)) {
              goto LABEL_160;
            }
            unsigned int v87 = (*(unsigned char *)(v32 + 16) - 11);
            if (v87 < 2) {
              goto LABEL_721;
            }
            if (v87 < 0xFD) {
              goto LABEL_160;
            }
            *(void *)__s2 = v378;
            *(void *)&__s2[8] = v378;
            *(void *)&__s2[16] = 8;
            *(_DWORD *)&__s2[24] = 0;
            *(void *)&long long v373 = &v374;
            *((void *)&v373 + 1) = 0x800000000;
            int v365 = (llvm::APInt *)__s2;
            uint64_t v366 = (uint64_t *)&v373;
            BOOL v275 = 0;
            if (sub_1CC04C108(&v365, v32))
            {
              do
              {
                BOOL v275 = DWORD2(v373) == 0;
                if (!DWORD2(v373)) {
                  break;
                }
                uint64_t v349 = *(void *)(v373 + 8 * DWORD2(v373) - 8);
                --DWORD2(v373);
              }
              while ((sub_1CC04C108(&v365, v349) & 1) != 0);
            }
            if ((uint64_t **)v373 != &v374) {
              free((void *)v373);
            }
            if (*(void *)&__s2[8] == *(void *)__s2)
            {
              if (v275) {
                goto LABEL_721;
              }
            }
            else
            {
              free(*(void **)&__s2[8]);
              if (v275)
              {
LABEL_721:
                sub_1CBFC7388(v13, v68, (llvm::APInt *)__s2);
                uint64_t Splat = (uint64_t)llvm::ConstantInt::get(*(llvm::ConstantInt **)v26, (llvm::LLVMContext *)__s2, v276);
                if ((*(_DWORD *)(v26 + 8) & 0xFE) == 0x12) {
                  uint64_t Splat = (uint64_t)llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v26 + 32) | ((unint64_t)(*(_DWORD *)(v26 + 8) == 19) << 32)), Splat);
                }
                if (*(_DWORD *)&__s2[8] >= 0x41u && *(void *)__s2) {
                  goto LABEL_464;
                }
                return (llvm::Constant *)Splat;
              }
            }
LABEL_160:
            int v365 = 0;
            *(void *)__s2 = &v365;
            *(void *)&__s2[8] = 1;
            if (sub_1CBF528D8((uint64_t)__s2, (unsigned __int8 *)v32))
            {
              int v88 = v365;
              sub_1CBFC7388(v13, v68, (llvm::APInt *)__s2);
              uint64_t v90 = *((unsigned int *)v88 + 2);
              if (v90 > 0x40)
              {
                int v228 = *(const void **)v88;
                uint64_t v92 = *(void *)__s2;
                BOOL v93 = memcmp(v228, *(const void **)__s2, ((unint64_t)(v90 + 63) >> 3) & 0x3FFFFFF8) == 0;
              }
              else
              {
                unsigned int v91 = *(const void **)v88;
                uint64_t v92 = *(void *)__s2;
                BOOL v93 = v91 == *(const void **)__s2;
              }
              int v229 = v93;
              if (*(_DWORD *)&__s2[8] >= 0x41u && v92) {
                MEMORY[0x1D25D9CB0](v92, 0x1000C8000313F17);
              }
              unsigned int v230 = v365;
              if (v229)
              {
                uint64_t Splat = (uint64_t)llvm::ConstantInt::get(*(llvm::ConstantInt **)v26, v365, v89);
                if ((*(_DWORD *)(v26 + 8) & 0xFE) != 0x12) {
                  return (llvm::Constant *)Splat;
                }
                return llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v26 + 32) | ((unint64_t)(*(_DWORD *)(v26 + 8) == 19) << 32)), Splat);
              }
              switch(v13)
              {
                case 0x132:
                  uint64_t v231 = 305;
                  break;
                case 0x112:
                  uint64_t v231 = 275;
                  break;
                case 0x113:
                  uint64_t v231 = 274;
                  break;
                default:
                  uint64_t v231 = 306;
                  break;
              }
              sub_1CBFC7388(v231, v68, (llvm::APInt *)__s2);
              uint64_t v232 = *((unsigned int *)v230 + 2);
              if (v232 > 0x40)
              {
                int v238 = *(const void **)v230;
                uint64_t v234 = *(void *)__s2;
                BOOL v235 = memcmp(v238, *(const void **)__s2, ((unint64_t)(v232 + 63) >> 3) & 0x3FFFFFF8) == 0;
              }
              else
              {
                uint64_t v233 = *(const void **)v230;
                uint64_t v234 = *(void *)__s2;
                BOOL v235 = v233 == *(const void **)__s2;
              }
              char v239 = v235;
              if (*(_DWORD *)&__s2[8] >= 0x41u && v234) {
                MEMORY[0x1D25D9CB0](v234, 0x1000C8000313F17);
              }
              if (v239) {
                return (llvm::Constant *)v25;
              }
              if (*(unsigned char *)(v25 + 16) == 84)
              {
                uint64_t v240 = *(void *)(v25 - 32);
                if (v240)
                {
                  if (!*(unsigned char *)(v240 + 16)
                    && *(void *)(v240 + 24) == *(void *)(v25 + 72)
                    && (*(unsigned char *)(v240 + 33) & 0x20) != 0
                    && *(_DWORD *)(v240 + 36) == v13)
                  {
                    int v241 = (unsigned __int8 **)(v25 - 32 * (*(_DWORD *)(v25 + 20) & 0x7FFFFFF));
                    unsigned int v242 = *v241;
                    uint64_t v243 = v241[4];
                    v371 = 0;
                    *(void *)__s2 = &v371;
                    *(void *)&__s2[8] = 0;
                    if ((sub_1CBF528D8((uint64_t)__s2, v242) & 1) != 0
                      || (*(void *)&long long v373 = &v371,
                          *((void *)&v373 + 1) = 0,
                          sub_1CBF528D8((uint64_t)&v373, v243)))
                    {
                      if ((int)v13 > 304)
                      {
                        if (v13 == 306) {
                          int v244 = 36;
                        }
                        else {
                          int v244 = 34;
                        }
                      }
                      else if (v13 == 274)
                      {
                        int v244 = 38;
                      }
                      else
                      {
                        int v244 = 40;
                      }
                      unsigned int v291 = (v244 - 2) >> 1;
                      if (v291 <= 0x13 && ((0xF0033u >> v291) & 1) != 0) {
                        int v244 = dword_1CFAC3904[v291];
                      }
                      if (llvm::ICmpInst::compare((uint64_t)v371, (uint64_t)v365, v244)) {
                        return (llvm::Constant *)v25;
                      }
                    }
                  }
                }
              }
            }
            uint64_t Splat = sub_1CC04CD8C(v13, v25, v32);
            if (Splat) {
              return (llvm::Constant *)Splat;
            }
            uint64_t Splat = sub_1CC04CD8C(v13, v32, v25);
            if (Splat) {
              return (llvm::Constant *)Splat;
            }
            if ((int)v13 > 304)
            {
              if (v13 == 306) {
                uint64_t v292 = 36;
              }
              else {
                uint64_t v292 = 34;
              }
            }
            else if (v13 == 274)
            {
              uint64_t v292 = 38;
            }
            else
            {
              uint64_t v292 = 40;
            }
            unsigned int v293 = (v292 - 2) >> 1;
            if (v293 <= 0x13 && ((0xF0033u >> v293) & 1) != 0) {
              uint64_t v292 = dword_1CFAC3904[v293];
            }
            long long v294 = *(_OWORD *)(a2 + 32);
            *(_OWORD *)&__s2[16] = *(_OWORD *)(a2 + 16);
            v378[0] = v294;
            *(_OWORD *)__s2 = *(_OWORD *)a2;
            BYTE9(v378[0]) = 0;
            int v295 = (unsigned __int8 *)sub_1CC02F0F0(v292, (unsigned __int8 *)v25, (unsigned __int8 *)v32, (uint64_t)__s2, (llvm::SmallPtrSetImplBase *)3);
            if (!v295 || v295[16] > 0x14u || !llvm::Constant::isAllOnesValue((llvm::Constant *)v295))
            {
              long long v296 = *(_OWORD *)(a2 + 32);
              *(_OWORD *)&__s2[16] = *(_OWORD *)(a2 + 16);
              v378[0] = v296;
              *(_OWORD *)__s2 = *(_OWORD *)a2;
              BYTE9(v378[0]) = 0;
              unsigned int v297 = (unsigned __int8 *)sub_1CC02F0F0(v292, (unsigned __int8 *)v32, (unsigned __int8 *)v25, (uint64_t)__s2, (llvm::SmallPtrSetImplBase *)3);
              if (v297 && v297[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)v297)) {
                return (llvm::Constant *)v32;
              }
              uint64_t v298 = *(const llvm::DataLayout **)a2;
              uint64_t v299 = (uint64_t *)sub_1CC16FA94(*(void *)(a2 + 32));
              if (!v299
                || ((unsigned __int16 v304 = llvm::isImpliedCondition(v299, v292, v25, v32, v298, v300 & 1, 0), (_BYTE)v304)
                  ? (uint64_t Splat = v25)
                  : (uint64_t Splat = v32),
                    v304 < 0x100u))
              {
                int v301 = *(const llvm::DataLayout **)a2;
                uint64_t v302 = (uint64_t *)sub_1CC16FA94(*(void *)(a2 + 32));
                if (!v302) {
                  return 0;
                }
                unsigned __int16 isImpliedCondition = llvm::isImpliedCondition(v302, v292, v32, v25, v301, v303 & 1, 0);
                uint64_t Splat = (_BYTE)isImpliedCondition ? v32 : v25;
                if (isImpliedCondition < 0x100u) {
                  return 0;
                }
              }
              return (llvm::Constant *)Splat;
            }
            return (llvm::Constant *)v25;
          case 309:
LABEL_262:
            unsigned int v154 = *(unsigned __int8 *)(Splat + 16);
            if (Splat) {
              BOOL v155 = v154 > 0x14;
            }
            else {
              BOOL v155 = 1;
            }
            if (v155) {
              goto LABEL_270;
            }
            if (v154 == 16)
            {
              uint64_t v156 = *(unsigned int *)(Splat + 32);
              if (v156 >= 0x41)
              {
                int v314 = 0;
                int64_t v315 = (unint64_t)(v156 + 63) >> 6;
                do
                {
                  BOOL v112 = v315-- < 1;
                  if (v112) {
                    break;
                  }
                  unint64_t v316 = *(void *)(*(void *)(Splat + 24) + 8 * v315);
                  v314 += __clz(v316);
                }
                while (!v316);
                int v317 = v156 | 0xFFFFFFC0;
                if ((v156 & 0x3F) == 0) {
                  int v317 = 0;
                }
                if (v314 + v317 == v156) {
                  break;
                }
              }
              else if (!*(void *)(Splat + 24))
              {
                break;
              }
            }
            else if (v154 == 17)
            {
              if (sub_1CB844168(Splat, 0.0)) {
                break;
              }
            }
            else if (v154 - 18 < 3 || v154 == 13)
            {
              break;
            }
            if (sub_1CC03F414((uint64_t)__s2, (llvm::Constant *)Splat)) {
              break;
            }
LABEL_270:
            if (v25)
            {
              unsigned int v157 = *(unsigned __int8 *)(v25 + 16);
              if (v157 <= 0x14)
              {
                if (v157 == 16)
                {
                  uint64_t v158 = *(unsigned int *)(v25 + 32);
                  if (v158 >= 0x41)
                  {
                    int v322 = 0;
                    int64_t v323 = (unint64_t)(v158 + 63) >> 6;
                    do
                    {
                      BOOL v112 = v323-- < 1;
                      if (v112) {
                        break;
                      }
                      unint64_t v324 = *(void *)(*(void *)(v25 + 24) + 8 * v323);
                      v322 += __clz(v324);
                    }
                    while (!v324);
                    int v325 = v158 | 0xFFFFFFC0;
                    if ((v158 & 0x3F) == 0) {
                      int v325 = 0;
                    }
                    if (v322 + v325 == v158) {
                      break;
                    }
                  }
                  else if (!*(void *)(v25 + 24))
                  {
                    break;
                  }
                }
                else if (v157 == 17)
                {
                  if (sub_1CB844168(v25, 0.0)) {
                    break;
                  }
                }
                else if (v157 - 18 < 3 || v157 == 13)
                {
                  break;
                }
                if (sub_1CC03F414((uint64_t)__s2, (llvm::Constant *)v25)) {
                  break;
                }
              }
            }
            if (!*(unsigned char *)(a2 + 41)) {
              return 0;
            }
            unsigned int v159 = (*(unsigned char *)(Splat + 16) - 11);
            if (v159 >= 2)
            {
              if (v159 >= 0xFD)
              {
                *(void *)__s2 = v378;
                *(void *)&__s2[8] = v378;
                *(void *)&__s2[16] = 8;
                *(_DWORD *)&__s2[24] = 0;
                *(void *)&long long v373 = &v374;
                *((void *)&v373 + 1) = 0x800000000;
                int v365 = (llvm::APInt *)__s2;
                uint64_t v366 = (uint64_t *)&v373;
                int v286 = sub_1CC04C108(&v365, Splat);
                BOOL v287 = 0;
                if (v286)
                {
                  do
                  {
                    BOOL v287 = DWORD2(v373) == 0;
                    if (!DWORD2(v373)) {
                      break;
                    }
                    uint64_t v357 = *(void *)(v373 + 8 * DWORD2(v373) - 8);
                    --DWORD2(v373);
                  }
                  while ((sub_1CC04C108(&v365, v357) & 1) != 0);
                }
                if ((uint64_t **)v373 != &v374) {
                  free((void *)v373);
                }
                if (*(void *)&__s2[8] == *(void *)__s2)
                {
                  if (v287) {
                    break;
                  }
                }
                else
                {
                  free(*(void **)&__s2[8]);
                  if (v287) {
                    break;
                  }
                }
                if (!*(unsigned char *)(a2 + 41)) {
                  return 0;
                }
              }
              unsigned int v160 = (*(unsigned char *)(v25 + 16) - 11);
              if (v160 >= 2)
              {
                if (v160 < 0xFD) {
                  return 0;
                }
                *(void *)__s2 = v378;
                *(void *)&__s2[8] = v378;
                *(void *)&__s2[16] = 8;
                *(_DWORD *)&__s2[24] = 0;
                *(void *)&long long v373 = &v374;
                *((void *)&v373 + 1) = 0x800000000;
                int v365 = (llvm::APInt *)__s2;
                uint64_t v366 = (uint64_t *)&v373;
                BOOL v161 = 0;
                if (sub_1CC04C108(&v365, v25))
                {
                  do
                  {
                    BOOL v161 = DWORD2(v373) == 0;
                    if (!DWORD2(v373)) {
                      break;
                    }
                    uint64_t v358 = *(void *)(v373 + 8 * DWORD2(v373) - 8);
                    --DWORD2(v373);
                  }
                  while ((sub_1CC04C108(&v365, v358) & 1) != 0);
                }
                if ((uint64_t **)v373 != &v374) {
                  free((void *)v373);
                }
                if (*(void *)&__s2[8] != *(void *)__s2) {
                  free(*(void **)&__s2[8]);
                }
                if (!v161) {
                  return 0;
                }
              }
            }
            break;
          case 311:
            unsigned int v217 = *(unsigned __int8 *)(Splat + 16);
            if (Splat) {
              BOOL v218 = v217 > 0x14;
            }
            else {
              BOOL v218 = 1;
            }
            if (v218) {
              goto LABEL_475;
            }
            if (v217 == 16)
            {
              uint64_t v219 = *(unsigned int *)(Splat + 32);
              if (v219 >= 0x41)
              {
                int v330 = 0;
                int64_t v331 = (unint64_t)(v219 + 63) >> 6;
                do
                {
                  BOOL v112 = v331-- < 1;
                  if (v112) {
                    break;
                  }
                  unint64_t v332 = *(void *)(*(void *)(Splat + 24) + 8 * v331);
                  v330 += __clz(v332);
                }
                while (!v332);
                int v333 = v219 | 0xFFFFFFC0;
                if ((v219 & 0x3F) == 0) {
                  int v333 = 0;
                }
                if (v330 + v333 == v219) {
                  break;
                }
              }
              else if (!*(void *)(Splat + 24))
              {
                break;
              }
            }
            else if (v217 == 17)
            {
              if (sub_1CB844168(Splat, 0.0)) {
                break;
              }
            }
            else if (v217 - 18 < 3 || v217 == 13)
            {
              break;
            }
            if (sub_1CC03F414((uint64_t)__s2, (llvm::Constant *)Splat)) {
              break;
            }
LABEL_475:
            if (sub_1CBF687D0((uint64_t)__s2, (llvm::Constant *)v25)) {
              break;
            }
LABEL_476:
            if (Splat == v25) {
              break;
            }
            if (!*(unsigned char *)(a2 + 41)) {
              goto LABEL_482;
            }
            unsigned int v220 = (*(unsigned char *)(Splat + 16) - 11);
            if (v220 < 2) {
              break;
            }
            if (v220 < 0xFD) {
              goto LABEL_480;
            }
            *(void *)__s2 = v378;
            *(void *)&__s2[8] = v378;
            *(void *)&__s2[16] = 8;
            *(_DWORD *)&__s2[24] = 0;
            *(void *)&long long v373 = &v374;
            *((void *)&v373 + 1) = 0x800000000;
            int v365 = (llvm::APInt *)__s2;
            uint64_t v366 = (uint64_t *)&v373;
            BOOL v288 = 0;
            if (sub_1CC04C108(&v365, Splat))
            {
              do
              {
                BOOL v288 = DWORD2(v373) == 0;
                if (!DWORD2(v373)) {
                  break;
                }
                uint64_t v359 = *(void *)(v373 + 8 * DWORD2(v373) - 8);
                --DWORD2(v373);
              }
              while ((sub_1CC04C108(&v365, v359) & 1) != 0);
            }
            if ((uint64_t **)v373 != &v374) {
              free((void *)v373);
            }
            if (*(void *)&__s2[8] == *(void *)__s2)
            {
              if (v288) {
                break;
              }
            }
            else
            {
              free(*(void **)&__s2[8]);
              if (v288) {
                break;
              }
            }
            if (!*(unsigned char *)(a2 + 41)) {
              goto LABEL_482;
            }
LABEL_480:
            unsigned int v221 = (*(unsigned char *)(v25 + 16) - 11);
            if (v221 < 2) {
              break;
            }
            if (v221 < 0xFD)
            {
LABEL_482:
              if (v25)
              {
                unsigned int v222 = *(unsigned __int8 *)(v25 + 16);
                if (v222 <= 0x14)
                {
                  if (v222 == 16)
                  {
                    uint64_t v223 = *(unsigned int *)(v25 + 32);
                    if (v223 >= 0x41)
                    {
                      int v334 = 0;
                      int64_t v335 = (unint64_t)(v223 + 63) >> 6;
                      do
                      {
                        BOOL v112 = v335-- < 1;
                        if (v112) {
                          break;
                        }
                        unint64_t v336 = *(void *)(*(void *)(v25 + 24) + 8 * v335);
                        v334 += __clz(v336);
                      }
                      while (!v336);
                      int v337 = v223 | 0xFFFFFFC0;
                      if ((v223 & 0x3F) == 0) {
                        int v337 = 0;
                      }
                      if (v334 + v337 == v223) {
                        return (llvm::Constant *)Splat;
                      }
                    }
                    else if (!*(void *)(v25 + 24))
                    {
                      return (llvm::Constant *)Splat;
                    }
                  }
                  else if (v222 == 17)
                  {
                    if (sub_1CB844168(v25, 0.0)) {
                      return (llvm::Constant *)Splat;
                    }
                  }
                  else if (v222 - 18 < 3 || v222 == 13)
                  {
                    return (llvm::Constant *)Splat;
                  }
                  char isSplatValue = sub_1CC03F414((uint64_t)__s2, (llvm::Constant *)v25);
                  goto LABEL_504;
                }
              }
              return 0;
            }
            *(void *)__s2 = v378;
            *(void *)&__s2[8] = v378;
            *(void *)&__s2[16] = 8;
            *(_DWORD *)&__s2[24] = 0;
            *(void *)&long long v373 = &v374;
            *((void *)&v373 + 1) = 0x800000000;
            int v365 = (llvm::APInt *)__s2;
            uint64_t v366 = (uint64_t *)&v373;
            BOOL v289 = 0;
            if (sub_1CC04C108(&v365, v25))
            {
              do
              {
                BOOL v289 = DWORD2(v373) == 0;
                if (!DWORD2(v373)) {
                  break;
                }
                uint64_t v360 = *(void *)(v373 + 8 * DWORD2(v373) - 8);
                --DWORD2(v373);
              }
              while ((sub_1CC04C108(&v365, v360) & 1) != 0);
            }
            if ((uint64_t **)v373 != &v374) {
              free((void *)v373);
            }
            if (*(void *)&__s2[8] == *(void *)__s2)
            {
              if (!v289) {
                goto LABEL_482;
              }
            }
            else
            {
              free(*(void **)&__s2[8]);
              if (!v289) {
                goto LABEL_482;
              }
            }
            break;
          case 312:
LABEL_250:
            if (Splat == v25) {
              goto LABEL_745;
            }
            if (!*(unsigned char *)(a2 + 41)) {
              return 0;
            }
            unsigned int v151 = (*(unsigned char *)(Splat + 16) - 11);
            if (v151 < 2) {
              goto LABEL_745;
            }
            if (v151 < 0xFD) {
              goto LABEL_254;
            }
            *(void *)__s2 = v378;
            *(void *)&__s2[8] = v378;
            *(void *)&__s2[16] = 8;
            *(_DWORD *)&__s2[24] = 0;
            *(void *)&long long v373 = &v374;
            *((void *)&v373 + 1) = 0x800000000;
            int v365 = (llvm::APInt *)__s2;
            uint64_t v366 = (uint64_t *)&v373;
            int v282 = sub_1CC04C108(&v365, Splat);
            BOOL v283 = 0;
            if (v282)
            {
              do
              {
                BOOL v283 = DWORD2(v373) == 0;
                if (!DWORD2(v373)) {
                  break;
                }
                uint64_t v353 = *(void *)(v373 + 8 * DWORD2(v373) - 8);
                --DWORD2(v373);
              }
              while ((sub_1CC04C108(&v365, v353) & 1) != 0);
            }
            if ((uint64_t **)v373 != &v374) {
              free((void *)v373);
            }
            if (*(void *)&__s2[8] == *(void *)__s2)
            {
              if (v283) {
                goto LABEL_745;
              }
            }
            else
            {
              free(*(void **)&__s2[8]);
              if (v283) {
                goto LABEL_745;
              }
            }
            if (!*(unsigned char *)(a2 + 41)) {
              return 0;
            }
LABEL_254:
            unsigned int v152 = (*(unsigned char *)(v25 + 16) - 11);
            if (v152 >= 2)
            {
              if (v152 < 0xFD) {
                return 0;
              }
              *(void *)__s2 = v378;
              *(void *)&__s2[8] = v378;
              *(void *)&__s2[16] = 8;
              *(_DWORD *)&__s2[24] = 0;
              *(void *)&long long v373 = &v374;
              *((void *)&v373 + 1) = 0x800000000;
              int v365 = (llvm::APInt *)__s2;
              uint64_t v366 = (uint64_t *)&v373;
              BOOL v153 = 0;
              if (sub_1CC04C108(&v365, v25))
              {
                do
                {
                  BOOL v153 = DWORD2(v373) == 0;
                  if (!DWORD2(v373)) {
                    break;
                  }
                  uint64_t v355 = *(void *)(v373 + 8 * DWORD2(v373) - 8);
                  --DWORD2(v373);
                }
                while ((sub_1CC04C108(&v365, v355) & 1) != 0);
              }
              if ((uint64_t **)v373 != &v374) {
                free((void *)v373);
              }
              if (*(void *)&__s2[8] == *(void *)__s2)
              {
                if (!v153) {
                  return 0;
                }
              }
              else
              {
                free(*(void **)&__s2[8]);
                if (!v153) {
                  return 0;
                }
              }
            }
LABEL_745:
            return llvm::Constant::getNullValue((llvm::Constant *)v26, (llvm::Type *)a2, a3);
          default:
            switch((int)v13)
            {
              case 274:
              case 275:
                goto LABEL_151;
              case 276:
              case 277:
              case 279:
              case 280:
              case 281:
              case 282:
                goto LABEL_465;
              case 278:
                goto LABEL_262;
              case 283:
                goto LABEL_476;
              case 284:
                goto LABEL_250;
              default:
                if (v13 != 1847) {
                  goto LABEL_465;
                }
                if (Splat) {
                  BOOL v189 = *(unsigned char *)(Splat + 16) == 17;
                }
                else {
                  BOOL v189 = 0;
                }
                if (!v189) {
                  return 0;
                }
                if (*(_UNKNOWN **)(Splat + 32) == &unk_1CFB2E344) {
                  uint64_t v190 = *(void *)(Splat + 40);
                }
                else {
                  uint64_t v190 = Splat + 24;
                }
                if ((*(unsigned char *)(v190 + 28) & 7) == 1) {
                  uint64_t Splat = v25;
                }
                break;
            }
            return (llvm::Constant *)Splat;
        }
LABEL_713:
        int64_t v171 = (llvm::Constant *)v26;
        return llvm::Constant::getNullValue(v171, (llvm::Type *)a2, a3);
      }
      if ((int)v13 <= 191)
      {
        if ((int)v13 <= 53)
        {
          switch(v13)
          {
            case 1:
              *(_DWORD *)__s2 = 1;
              *(void *)&__s2[4] = 0;
              if (Splat)
              {
                if (*(unsigned char *)(Splat + 16) == 84)
                {
                  uint64_t v224 = *(void *)(Splat - 32);
                  if (v224)
                  {
                    if (!*(unsigned char *)(v224 + 16)
                      && *(void *)(v224 + 24) == *(void *)(Splat + 72)
                      && *(_DWORD *)(v224 + 36) == *(_DWORD *)__s2)
                    {
                      return (llvm::Constant *)Splat;
                    }
                  }
                }
              }
              return 0;
            case 0x13:
              if (Splat == v25) {
                return (llvm::Constant *)Splat;
              }
              *(void *)__s2 = v25;
              if (!sub_1CC04CADC(__s2, Splat))
              {
                *(void *)&long long v373 = Splat;
                char isSplatValue = sub_1CC04CADC(&v373, v25);
                goto LABEL_503;
              }
              return (llvm::Constant *)v25;
            case 0x34:
              *(void *)&long long v373 = 0;
              *(void *)&__s2[8] = &v373;
              int v94 = *(unsigned __int8 *)(Splat + 16);
              if (v94 == 5)
              {
                if (*(_WORD *)(Splat + 18) != 26
                  || !sub_1CC04D2B0((uint64_t)__s2, *(llvm::Constant **)(Splat - 32 * (*(_DWORD *)(Splat + 20) & 0x7FFFFFF)))|| (uint64_t v95 = *(void *)(Splat - 32 * (*(_DWORD *)(Splat + 20) & 0x7FFFFFF) + 32)) == 0)
                {
LABEL_550:
                  int v237 = *(unsigned __int8 *)(Splat + 16);
                  if (v237 == 5)
                  {
                    if (*(_WORD *)(Splat + 18) != 27
                      || !sub_1CC04D2B0((uint64_t)__s2, *(llvm::Constant **)(Splat - 32 * (*(_DWORD *)(Splat + 20) & 0x7FFFFFF))))
                    {
                      return 0;
                    }
                  }
                  else if (v237 != 55 || (sub_1CC0423A0((uint64_t)__s2, *(llvm::Constant **)(Splat - 64)) & 1) == 0)
                  {
                    return 0;
                  }
                  goto LABEL_713;
                }
              }
              else
              {
                if (v94 != 54) {
                  goto LABEL_550;
                }
                if (!sub_1CC0423A0((uint64_t)__s2, *(llvm::Constant **)(Splat - 64))) {
                  goto LABEL_550;
                }
                uint64_t v95 = *(void *)(Splat - 32);
                if (!v95) {
                  goto LABEL_550;
                }
              }
LABEL_549:
              **(void **)&__s2[8] = v95;
              return (llvm::Constant *)v373;
          }
          goto LABEL_465;
        }
        if (v13 == 54)
        {
          *(void *)&long long v373 = 0;
          *(void *)&__s2[8] = &v373;
          int v225 = *(unsigned __int8 *)(Splat + 16);
          if (v225 == 5)
          {
            if (*(_WORD *)(Splat + 18) != 25) {
              return 0;
            }
            if (!sub_1CBF5270C((uint64_t)__s2, *(llvm::Constant **)(Splat - 32 * (*(_DWORD *)(Splat + 20) & 0x7FFFFFF))))return 0; {
            uint64_t v95 = *(void *)(Splat - 32 * (*(_DWORD *)(Splat + 20) & 0x7FFFFFF) + 32);
            }
            if (!v95) {
              return 0;
            }
          }
          else
          {
            if (v225 != 53) {
              return 0;
            }
            if (!sub_1CBF5250C((uint64_t)__s2, *(llvm::Constant **)(Splat - 64))) {
              return 0;
            }
            uint64_t v95 = *(void *)(Splat - 32);
            if (!v95) {
              return 0;
            }
          }
          goto LABEL_549;
        }
        if (v13 == 131)
        {
          int v226 = (unsigned int *)(v25 + 24);
          if (*(_DWORD *)(v25 + 32) >= 0x41u) {
            int v226 = *(unsigned int **)v226;
          }
          uint64_t v227 = *v226;
          int v365 = 0;
          LODWORD(v373) = 132;
          *(void *)((char *)&v373 + 4) = 0;
          *(void *)__s2 = 132;
          *(_DWORD *)&__s2[8] = 0;
          *(void *)&__s2[16] = 1;
          *(void *)&__s2[24] = &v365;
          *(void *)&v378[0] = 2;
          if (sub_1CC0472D4((uint64_t)__s2, Splat))
          {
            if (sub_1CC04D3D4(v378[0], Splat))
            {
              if (!v227)
              {
                uint64_t Splat = (uint64_t)v365;
                if (*(void *)v365 == v26) {
                  return (llvm::Constant *)Splat;
                }
              }
            }
          }
          return 0;
        }
        if (v13 != 171)
        {
LABEL_465:
          char isSplatValue = sub_1CC04CBF4(v13);
          if (Splat != v25) {
            return 0;
          }
          goto LABEL_504;
        }
        if (Splat) {
          BOOL v112 = *(unsigned __int8 *)(Splat + 16) > 0x14u;
        }
        else {
          BOOL v112 = 1;
        }
        if (v112 || !v25 || *(unsigned __int8 *)(v25 + 16) > 0x14u) {
          return 0;
        }
        uint64_t v113 = *(llvm::APInt **)a2;
        int v365 = 0;
        *(_DWORD *)&__s2[8] = 1;
        *(void *)__s2 = 0;
        BOOL v114 = 0;
        if (!llvm::IsConstantOffsetFromGlobal((llvm *)Splat, (uint64_t **)&v365, (llvm::GlobalValue **)__s2, v113, 0, v29))
        {
LABEL_662:
          if (*(_DWORD *)&__s2[8] >= 0x41u && *(void *)__s2) {
            MEMORY[0x1D25D9CB0](*(void *)__s2, 0x1000C8000313F17);
          }
          return v114;
        }
        int v115 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(***(void ***)Splat + 1912), 0);
        int64_t v116 = (llvm::PointerType *)(***(void ***)Splat + 1960);
        unint64_t v117 = (llvm::Constant *)llvm::PointerType::get(v116, 0);
        if (*(unsigned char *)(v25 + 16) != 16 || *(_DWORD *)(*(void *)v25 + 8) >> 8 > 0x40u) {
          goto LABEL_661;
        }
        unsigned int v118 = *(_DWORD *)(v25 + 32);
        unint64_t v119 = v118 > 0x40 ? **(void **)(v25 + 24) : (uint64_t)(*(void *)(v25 + 24) << -(char)v118) >> -(char)v118;
        if ((v119 & 3) != 0) {
          goto LABEL_661;
        }
        uint64_t v258 = (llvm::ConstantInt *)(***(void ***)Splat + 1984);
        if (*(llvm::Constant **)Splat != v117) {
          uint64_t Splat = (uint64_t)sub_1CC56C0C0((llvm *)0x31, (llvm::detail::IEEEFloat *)Splat, v117, 0);
        }
        *(void *)&long long v373 = llvm::ConstantInt::get(v258, v119 >> 2, 0);
        uint64_t ElementPtr = (llvm *)llvm::ConstantExpr::getGetElementPtr((uint64_t)v116, (uint64_t *)Splat, (uint64_t)&v373, 1, 0, 0, 0);
        unsigned int v264 = llvm::ConstantFoldLoadFromConstPtr(ElementPtr, v116, v113, v260, v261, v262, v263);
        if (!v264 || v264[16] != 5) {
          goto LABEL_661;
        }
        int v266 = *((unsigned __int16 *)v264 + 9);
        if (v266 == 38)
        {
          unsigned int v264 = *(unsigned char **)&v264[-32 * (*((_DWORD *)v264 + 5) & 0x7FFFFFF)];
          if (v264) {
            BOOL v267 = v264[16] == 5;
          }
          else {
            BOOL v267 = 0;
          }
          if (!v267) {
            goto LABEL_661;
          }
          int v266 = *((unsigned __int16 *)v264 + 9);
        }
        if (v266 != 15
          || ((BOOL v268 = &v264[-32 * (*((_DWORD *)v264 + 5) & 0x7FFFFFF)], (v269 = *v268) != 0)
            ? (BOOL v270 = *(unsigned char *)(*v268 + 16) == 5)
            : (BOOL v270 = 0),
              !v270 || *(_WORD *)(v269 + 18) != 47))
        {
LABEL_661:
          BOOL v114 = 0;
          goto LABEL_662;
        }
        BOOL v271 = *(llvm::detail::IEEEFloat **)(v269 - 32 * (*(_DWORD *)(v269 + 20) & 0x7FFFFFF));
        v272 = (llvm *)v268[4];
        v371 = 0;
        DWORD2(v373) = 1;
        *(void *)&long long v373 = 0;
        BOOL v114 = 0;
        if (llvm::IsConstantOffsetFromGlobal(v272, (uint64_t **)&v371, (llvm::GlobalValue **)&v373, v113, 0, v265))
        {
          if (v365 != v371)
          {
LABEL_688:
            BOOL v114 = 0;
            goto LABEL_689;
          }
          if (*(_DWORD *)&__s2[8] > 0x40u)
          {
            if (memcmp(*(const void **)__s2, (const void *)v373, (((unint64_t)*(unsigned int *)&__s2[8] + 63) >> 3) & 0x3FFFFFF8))
            {
              goto LABEL_688;
            }
          }
          else if (*(void *)__s2 != (void)v373)
          {
            goto LABEL_688;
          }
          if (*(llvm::Constant **)v271 == v115) {
            BOOL v114 = v271;
          }
          else {
            BOOL v114 = sub_1CC56C0C0((llvm *)0x31, v271, v115, 0);
          }
        }
LABEL_689:
        if (DWORD2(v373) >= 0x41 && (void)v373) {
          MEMORY[0x1D25D9CB0](v373, 0x1000C8000313F17);
        }
        goto LABEL_662;
      }
      uint64_t v30 = (v13 - 192);
      if (v30 > 0x2F) {
        goto LABEL_402;
      }
      if (((1 << (v13 + 64)) & 0x603) != 0)
      {
        if (Splat != v25)
        {
          unsigned int v31 = *(unsigned __int8 *)(Splat + 16);
          if (v31 >= 0x15) {
            uint64_t v32 = v25;
          }
          else {
            uint64_t v32 = Splat;
          }
          if (v31 < 0x15) {
            uint64_t Splat = v25;
          }
          if (!*(unsigned char *)(a2 + 41)) {
            goto LABEL_34;
          }
          unsigned int v33 = (*(unsigned char *)(v32 + 16) - 11);
          if (v33 >= 2)
          {
            if (v33 >= 0xFD)
            {
              *(void *)__s2 = v378;
              *(void *)&__s2[8] = v378;
              *(void *)&__s2[16] = 8;
              *(_DWORD *)&__s2[24] = 0;
              *(void *)&long long v373 = &v374;
              *((void *)&v373 + 1) = 0x800000000;
              int v365 = (llvm::APInt *)__s2;
              uint64_t v366 = (uint64_t *)&v373;
              BOOL v277 = 0;
              if (sub_1CC04C108(&v365, v32))
              {
                do
                {
                  BOOL v277 = DWORD2(v373) == 0;
                  if (!DWORD2(v373)) {
                    break;
                  }
                  uint64_t v350 = *(void *)(v373 + 8 * DWORD2(v373) - 8);
                  --DWORD2(v373);
                }
                while ((sub_1CC04C108(&v365, v350) & 1) != 0);
              }
              if ((uint64_t **)v373 != &v374) {
                free((void *)v373);
              }
              if (*(void *)&__s2[8] == *(void *)__s2)
              {
                if (v277) {
                  return (llvm::Constant *)Splat;
                }
              }
              else
              {
                free(*(void **)&__s2[8]);
                if (v277) {
                  return (llvm::Constant *)Splat;
                }
              }
            }
LABEL_34:
            if (sub_1CC04AE9C((uint64_t)__s2, (llvm::Constant *)v32))
            {
              if (v13 != 201 && v13 != 192) {
                return (llvm::Constant *)Splat;
              }
              if (llvm::Constant::isNaN((llvm::Constant *)v32)) {
                return (llvm::Constant *)v32;
              }
              return llvm::ConstantFP::getNaN(*(llvm::ConstantFP **)v32, 0, 0);
            }
            *(void *)&long long v373 = 0;
            *(void *)__s2 = &v373;
            *(void *)&__s2[8] = 0;
            if (sub_1CC04AFFC((uint64_t)__s2, (unsigned __int8 *)v32))
            {
              uint64_t v176 = v373;
              unsigned int v177 = (llvm::detail::DoubleAPFloat *)(v373 + 8);
              uint64_t v178 = *(void *)(v373 + 8);
              uint64_t v179 = v373;
              if ((_UNKNOWN *)v178 == &unk_1CFB2E344) {
                uint64_t v179 = *(void *)(v373 + 16);
              }
              if ((*(unsigned char *)(v179 + 28) & 7) != 0)
              {
                if ((*(unsigned char *)(*(void *)(a2 + 32) + 17) & 8) == 0) {
                  goto LABEL_369;
                }
                if ((_UNKNOWN *)v178 == &unk_1CFB2E344)
                {
                  if (!llvm::detail::DoubleAPFloat::isLargest(v177)) {
                    goto LABEL_369;
                  }
                  uint64_t v176 = v373;
                }
                else
                {
                  BOOL v181 = (*(unsigned char *)(v373 + 28) & 6) != 0 && (*(unsigned char *)(v373 + 28) & 7) != 3;
                  if (*(_DWORD *)(v178 + 16) == 1)
                  {
                    if (!v181
                      || *(_DWORD *)(v373 + 24) != *(_DWORD *)v178
                      || !llvm::detail::IEEEFloat::isSignificandAllOnesExceptLSB(v177))
                    {
                      goto LABEL_369;
                    }
                  }
                  else if (!v181 {
                         || *(_DWORD *)(v373 + 24) != *(_DWORD *)v178
                  }
                         || !llvm::detail::IEEEFloat::isSignificandAllOnes(v177))
                  {
                    goto LABEL_369;
                  }
                }
              }
              unsigned int v182 = v13 - 201;
              unint64_t v183 = *(void **)(v176 + 8);
              uint64_t v184 = v176;
              if (v183 == &unk_1CFB2E344) {
                uint64_t v184 = *(void *)(v176 + 16);
              }
              if ((((v182 < 2) ^ ((*(unsigned char *)(v184 + 28) & 8) >> 3)) & 1) == 0
                && (v13 != 201 && v13 != 192 || (*(unsigned char *)(*(void *)(a2 + 32) + 17) & 4) != 0))
              {
                return llvm::ConstantFP::get((llvm::ConstantFP **)v26, (llvm::Type *)v176, v175);
              }
              if (v183 == &unk_1CFB2E344) {
                uint64_t v176 = *(void *)(v176 + 16);
              }
              if (v182 < 2 != (*(unsigned char *)(v176 + 28) & 8) >> 3
                && (v13 == 192 || v13 == 201 || (*(unsigned char *)(*(void *)(a2 + 32) + 17) & 4) != 0))
              {
                return (llvm::Constant *)Splat;
              }
            }
LABEL_369:
            if (*(unsigned char *)(Splat + 16) == 84)
            {
              uint64_t v185 = *(void *)(Splat - 32);
              if (v185)
              {
                if (!*(unsigned char *)(v185 + 16)
                  && *(void *)(v185 + 24) == *(void *)(Splat + 72)
                  && (*(unsigned char *)(v185 + 33) & 0x20) != 0
                  && *(_DWORD *)(v185 + 36) == v13)
                {
                  unsigned int v186 = (void *)(Splat - 32 * (*(_DWORD *)(Splat + 20) & 0x7FFFFFF));
                  if (*v186 == v32 || v186[4] == v32) {
                    return (llvm::Constant *)Splat;
                  }
                }
              }
            }
            if (*(unsigned char *)(v32 + 16) != 84) {
              return 0;
            }
            uint64_t v187 = *(void *)(v32 - 32);
            if (!v187
              || *(unsigned char *)(v187 + 16)
              || *(void *)(v187 + 24) != *(void *)(v32 + 72)
              || (*(unsigned char *)(v187 + 33) & 0x20) == 0
              || *(_DWORD *)(v187 + 36) != v13)
            {
              return 0;
            }
            int v188 = (void *)(v32 - 32 * (*(_DWORD *)(v32 + 20) & 0x7FFFFFF));
            if (*v188 != Splat)
            {
              BOOL v38 = v188[4] == Splat;
              uint64_t Splat = v32;
              if (v38) {
                return (llvm::Constant *)Splat;
              }
              return 0;
            }
            return (llvm::Constant *)v32;
          }
        }
        return (llvm::Constant *)Splat;
      }
      if (v30 != 47)
      {
LABEL_402:
        if (v13 != 262)
        {
          if (v13 == 263)
          {
LABEL_404:
            if (!*(unsigned char *)(a2 + 41)) {
              return 0;
            }
            unsigned int v193 = (*(unsigned char *)(Splat + 16) - 11);
            if (v193 < 2) {
              goto LABEL_737;
            }
            if (v193 < 0xFD) {
              goto LABEL_407;
            }
            *(void *)__s2 = v378;
            *(void *)&__s2[8] = v378;
            *(void *)&__s2[16] = 8;
            *(_DWORD *)&__s2[24] = 0;
            *(void *)&long long v373 = &v374;
            *((void *)&v373 + 1) = 0x800000000;
            int v365 = (llvm::APInt *)__s2;
            uint64_t v366 = (uint64_t *)&v373;
            int v278 = sub_1CC04C108(&v365, Splat);
            BOOL v279 = 0;
            if (v278)
            {
              do
              {
                BOOL v279 = DWORD2(v373) == 0;
                if (!DWORD2(v373)) {
                  break;
                }
                uint64_t v351 = *(void *)(v373 + 8 * DWORD2(v373) - 8);
                --DWORD2(v373);
              }
              while ((sub_1CC04C108(&v365, v351) & 1) != 0);
            }
            if ((uint64_t **)v373 != &v374) {
              free((void *)v373);
            }
            if (*(void *)&__s2[8] == *(void *)__s2)
            {
              if (v279)
              {
LABEL_737:
                *(void *)__s2 = llvm::Constant::getAllOnesValue(**(llvm::Constant ***)(v26 + 16), (llvm::Type *)a2, a3);
                *(void *)&__s2[8] = llvm::Constant::getNullValue(*(llvm::Constant **)(*(void *)(v26 + 16) + 8), v280, v281);
                return (llvm::Constant *)llvm::ConstantStruct::get((llvm::PoisonValue *)v26, (llvm::Type *)__s2, 2);
              }
            }
            else
            {
              free(*(void **)&__s2[8]);
              if (v279) {
                goto LABEL_737;
              }
            }
            if (!*(unsigned char *)(a2 + 41)) {
              return 0;
            }
LABEL_407:
            unsigned int v194 = (*(unsigned char *)(v25 + 16) - 11);
            if (v194 >= 2)
            {
              if (v194 < 0xFD) {
                return 0;
              }
              *(void *)__s2 = v378;
              *(void *)&__s2[8] = v378;
              *(void *)&__s2[16] = 8;
              *(_DWORD *)&__s2[24] = 0;
              *(void *)&long long v373 = &v374;
              *((void *)&v373 + 1) = 0x800000000;
              int v365 = (llvm::APInt *)__s2;
              uint64_t v366 = (uint64_t *)&v373;
              BOOL v195 = 0;
              if (sub_1CC04C108(&v365, v25))
              {
                do
                {
                  BOOL v195 = DWORD2(v373) == 0;
                  if (!DWORD2(v373)) {
                    break;
                  }
                  uint64_t v352 = *(void *)(v373 + 8 * DWORD2(v373) - 8);
                  --DWORD2(v373);
                }
                while ((sub_1CC04C108(&v365, v352) & 1) != 0);
              }
              if ((uint64_t **)v373 != &v374) {
                free((void *)v373);
              }
              if (*(void *)&__s2[8] == *(void *)__s2)
              {
                if (!v195) {
                  return 0;
                }
              }
              else
              {
                free(*(void **)&__s2[8]);
                if (!v195) {
                  return 0;
                }
              }
            }
            goto LABEL_737;
          }
          goto LABEL_465;
        }
LABEL_415:
        if (!*(unsigned char *)(a2 + 41))
        {
LABEL_420:
          if (v25)
          {
            unsigned int v198 = *(unsigned __int8 *)(v25 + 16);
            if (v198 <= 0x14)
            {
              if (v198 == 16)
              {
                uint64_t v199 = *(unsigned int *)(v25 + 32);
                if (v199 >= 0x41)
                {
                  int v326 = 0;
                  int64_t v327 = (unint64_t)(v199 + 63) >> 6;
                  do
                  {
                    BOOL v112 = v327-- < 1;
                    if (v112) {
                      break;
                    }
                    unint64_t v328 = *(void *)(*(void *)(v25 + 24) + 8 * v327);
                    v326 += __clz(v328);
                  }
                  while (!v328);
                  int v329 = v199 | 0xFFFFFFC0;
                  if ((v199 & 0x3F) == 0) {
                    int v329 = 0;
                  }
                  if (v326 + v329 == v199) {
                    return (llvm::Constant *)Splat;
                  }
                }
                else if (!*(void *)(v25 + 24))
                {
                  return (llvm::Constant *)Splat;
                }
              }
              else if (v198 == 17)
              {
                if (sub_1CB844168(v25, 0.0)) {
                  return (llvm::Constant *)Splat;
                }
              }
              else if (v198 - 18 < 3 || v198 == 13)
              {
                return (llvm::Constant *)Splat;
              }
              if (sub_1CC03F414((uint64_t)__s2, (llvm::Constant *)v25)) {
                return (llvm::Constant *)Splat;
              }
            }
          }
          if (!Splat) {
            return 0;
          }
          unsigned int v200 = *(unsigned __int8 *)(Splat + 16);
          if (v200 > 0x14) {
            return 0;
          }
          if (v200 == 16)
          {
            uint64_t v201 = *(unsigned int *)(Splat + 32);
            if (v201 >= 0x41)
            {
              int v338 = 0;
              int64_t v339 = (unint64_t)(v201 + 63) >> 6;
              do
              {
                BOOL v112 = v339-- < 1;
                if (v112) {
                  break;
                }
                unint64_t v340 = *(void *)(*(void *)(Splat + 24) + 8 * v339);
                v338 += __clz(v340);
              }
              while (!v340);
              int v341 = v201 | 0xFFFFFFC0;
              if ((v201 & 0x3F) == 0) {
                int v341 = 0;
              }
              if (v338 + v341 != v201) {
                goto LABEL_431;
              }
            }
            else if (*(void *)(Splat + 24))
            {
LABEL_431:
              char isSplatValue = sub_1CC03F414((uint64_t)__s2, (llvm::Constant *)Splat);
LABEL_503:
              uint64_t Splat = v25;
LABEL_504:
              if ((isSplatValue & 1) == 0) {
                return 0;
              }
              return (llvm::Constant *)Splat;
            }
          }
          else if (v200 == 17)
          {
            if ((sub_1CB844168(Splat, 0.0) & 1) == 0) {
              goto LABEL_431;
            }
          }
          else if (v200 - 18 >= 3 && v200 != 13)
          {
            goto LABEL_431;
          }
          return (llvm::Constant *)v25;
        }
        unsigned int v196 = (*(unsigned char *)(Splat + 16) - 11);
        if (v196 < 2) {
          goto LABEL_111;
        }
        if (v196 < 0xFD) {
          goto LABEL_418;
        }
        *(void *)__s2 = v378;
        *(void *)&__s2[8] = v378;
        *(void *)&__s2[16] = 8;
        *(_DWORD *)&__s2[24] = 0;
        *(void *)&long long v373 = &v374;
        *((void *)&v373 + 1) = 0x800000000;
        int v365 = (llvm::APInt *)__s2;
        uint64_t v366 = (uint64_t *)&v373;
        BOOL v284 = 0;
        if (sub_1CC04C108(&v365, Splat))
        {
          do
          {
            BOOL v284 = DWORD2(v373) == 0;
            if (!DWORD2(v373)) {
              break;
            }
            uint64_t v354 = *(void *)(v373 + 8 * DWORD2(v373) - 8);
            --DWORD2(v373);
          }
          while ((sub_1CC04C108(&v365, v354) & 1) != 0);
        }
        if ((uint64_t **)v373 != &v374) {
          free((void *)v373);
        }
        if (*(void *)&__s2[8] == *(void *)__s2)
        {
          if (!v284) {
            goto LABEL_753;
          }
        }
        else
        {
          free(*(void **)&__s2[8]);
          if (!v284)
          {
LABEL_753:
            if (!*(unsigned char *)(a2 + 41)) {
              goto LABEL_420;
            }
LABEL_418:
            unsigned int v197 = (*(unsigned char *)(v25 + 16) - 11);
            if (v197 >= 2)
            {
              if (v197 < 0xFD) {
                goto LABEL_420;
              }
              *(void *)__s2 = v378;
              *(void *)&__s2[8] = v378;
              *(void *)&__s2[16] = 8;
              *(_DWORD *)&__s2[24] = 0;
              *(void *)&long long v373 = &v374;
              *((void *)&v373 + 1) = 0x800000000;
              int v365 = (llvm::APInt *)__s2;
              uint64_t v366 = (uint64_t *)&v373;
              BOOL v285 = 0;
              if (sub_1CC04C108(&v365, v25))
              {
                do
                {
                  BOOL v285 = DWORD2(v373) == 0;
                  if (!DWORD2(v373)) {
                    break;
                  }
                  uint64_t v356 = *(void *)(v373 + 8 * DWORD2(v373) - 8);
                  --DWORD2(v373);
                }
                while ((sub_1CC04C108(&v365, v356) & 1) != 0);
              }
              if ((uint64_t **)v373 != &v374) {
                free((void *)v373);
              }
              if (*(void *)&__s2[8] == *(void *)__s2)
              {
                if (!v285) {
                  goto LABEL_420;
                }
              }
              else
              {
                free(*(void **)&__s2[8]);
                if (!v285) {
                  goto LABEL_420;
                }
              }
            }
          }
        }
LABEL_111:
        BOOL v69 = (llvm::Constant *)v26;
        return (llvm::Constant *)llvm::Constant::getAllOnesValue(v69, (llvm::Type *)a2, a3);
      }
      if (!v25 || *(unsigned char *)(v25 + 16) != 16) {
        return 0;
      }
      uint64_t v191 = *(unsigned int *)(v25 + 32);
      if (v191 > 0x40)
      {
        int v245 = 0;
        int64_t v246 = (unint64_t)(v191 + 63) >> 6;
        do
        {
          BOOL v112 = v246-- < 1;
          if (v112) {
            break;
          }
          unint64_t v247 = *(void *)(*(void *)(v25 + 24) + 8 * v246);
          v245 += __clz(v247);
        }
        while (!v247);
        int v248 = v191 | 0xFFFFFFC0;
        if ((v191 & 0x3F) == 0) {
          int v248 = 0;
        }
        int v249 = v245 + v248;
        if (v249 != v191)
        {
          if (v249 == v191 - 1) {
            return (llvm::Constant *)Splat;
          }
          return 0;
        }
      }
      else
      {
        uint64_t v192 = *(void *)(v25 + 24);
        if (v192)
        {
          if (v192 != 1) {
            return 0;
          }
          return (llvm::Constant *)Splat;
        }
      }
      unsigned int v250 = *(llvm::ConstantFP ***)Splat;
      return llvm::ConstantFP::get(v250, (llvm::Type *)a2, 1.0);
    case 3u:
      uint64_t Splat = *((void *)v11 + 8);
      if (*(unsigned char *)(Splat + 16) == 17) {
        uint64_t v34 = *((void *)v11 + 8);
      }
      else {
        uint64_t v34 = 0;
      }
      if (!v34 || v13 != 2483) {
        goto LABEL_70;
      }
      uint64_t v35 = *(void *)(v34 + 32);
      if ((_UNKNOWN *)v35 == &unk_1CFB2E344)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&__s2[8], (const llvm::detail::DoubleAPFloat *)(v34 + 32));
      }
      else
      {
        *(void *)&__s2[8] = *(void *)(v34 + 32);
        if ((*(_DWORD *)(v35 + 8) + 64) >= 0x80) {
          operator new[]();
        }
        char v36 = *(unsigned char *)(v34 + 52);
        int v37 = v36 & 7;
        __s2[28] = v36 & 0xF;
        *(_DWORD *)&__s2[24] = *(_DWORD *)(v34 + 48);
        BOOL v38 = (v36 & 6) == 0 || v37 == 3;
        int v39 = !v38;
        if (v37 == 1 || v39 != 0)
        {
          uint64_t v41 = *(unsigned int *)(v35 + 8);
          if ((v41 - 64) <= 0xFFFFFF7F) {
            unsigned int v42 = this;
          }
          else {
            unsigned int v42 = (llvm::ConstrainedFPIntrinsic *)&__s2[16];
          }
          uint64_t v45 = *(uint64_t **)(v34 + 40);
          uint64_t v44 = (uint64_t *)(v34 + 40);
          unsigned int v43 = v45;
          if ((*(_DWORD *)(*(v44 - 1) + 8) - 64) >= 0xFFFFFF80) {
            unsigned int v43 = v44;
          }
          if (v41 <= 0xFFFFFFBF)
          {
            unint64_t v46 = (unint64_t)(v41 + 64) >> 6;
            do
            {
              uint64_t v47 = *v43++;
              *(void *)unsigned int v42 = v47;
              unsigned int v42 = (llvm::ConstrainedFPIntrinsic *)((char *)v42 + 8);
              --v46;
            }
            while (v46);
          }
        }
      }
      if (*(void *)Splat != *(void *)this) {
        uint64_t Splat = 0;
      }
      uint64_t v48 = *(void *)&__s2[8];
      if (*(_UNKNOWN **)&__s2[8] != &unk_1CFB2E344) {
        goto LABEL_67;
      }
      goto LABEL_907;
    default:
LABEL_70:
      uint64_t Splat = 0;
      if ((int)v13 <= 141)
      {
        switch((int)v13)
        {
          case 'S':
            unsigned int v49 = *(llvm **)v11;
            __int32 v50 = (llvm::Constant *)*((void *)v11 + 4);
            unint64_t v51 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
            unsigned __int8 ExceptionBehavior = llvm::ConstrainedFPIntrinsic::getExceptionBehavior(this);
            char RoundingMode = llvm::ConstrainedFPIntrinsic::getRoundingMode(this);
            if (v51 == 127) {
              int v54 = -1;
            }
            else {
              int v54 = v51;
            }
            return sub_1CC0395A4(v49, v50, v54, a2, (const llvm::DataLayout *)ExceptionBehavior, (llvm::DSOLocalEquivalent **)RoundingMode);
          case 'T':
          case 'U':
          case 'W':
          case 'Z':
          case '[':
          case '\\':
          case ']':
          case '^':
            return (llvm::Constant *)Splat;
          case 'V':
            uint64_t v137 = *(llvm::PoisonValue ***)v11;
            unint64_t v138 = (llvm::Constant *)*((void *)v11 + 4);
            unint64_t v139 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
            unsigned __int8 v140 = llvm::ConstrainedFPIntrinsic::getExceptionBehavior(this);
            char v141 = llvm::ConstrainedFPIntrinsic::getRoundingMode(this);
            if (v139 == 127) {
              int v142 = -1;
            }
            else {
              int v142 = v139;
            }
            return sub_1CC039F04(v137, v138, v142, (llvm::Constant **)a2, (const llvm::DataLayout *)v140, (llvm::DSOLocalEquivalent **)v141);
          case 'X':
            uint64_t v132 = *(void *)v11;
            uint64_t v133 = *((void *)v11 + 4);
            uint64_t v134 = *((void *)v11 + 8);
            *(void *)__s2 = v132;
            *(void *)&__s2[8] = v133;
            *(void *)&__s2[16] = v134;
            unsigned __int8 v135 = llvm::ConstrainedFPIntrinsic::getExceptionBehavior(this);
            char v136 = llvm::ConstrainedFPIntrinsic::getRoundingMode(this);
            int v100 = v135;
            int v101 = v136;
            uint64_t v99 = a2;
            return sub_1CC04C468((llvm::PoisonValue ***)__s2, (llvm::Type *)3, 0, v99, v100, v101);
          case 'Y':
            int v143 = *(llvm **)v11;
            unsigned int v144 = (llvm::Constant *)*((void *)v11 + 4);
            unint64_t v145 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
            unsigned __int8 v146 = llvm::ConstrainedFPIntrinsic::getExceptionBehavior(this);
            char v147 = llvm::ConstrainedFPIntrinsic::getRoundingMode(this);
            if (v145 == 127) {
              int v148 = -1;
            }
            else {
              int v148 = v145;
            }
            return sub_1CC039C30(v143, v144, v148, (llvm::Constant **)a2, (const llvm::DataLayout *)v146, (llvm::DSOLocalEquivalent **)v147);
          case '_':
            int v120 = *(llvm::PoisonValue ***)v11;
            unsigned int v121 = (llvm::PoisonValue **)*((void *)v11 + 4);
            unint64_t v122 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
            unsigned __int8 v123 = llvm::ConstrainedFPIntrinsic::getExceptionBehavior(this);
            char v124 = llvm::ConstrainedFPIntrinsic::getRoundingMode(this);
            if (v122 == 127) {
              char v125 = -1;
            }
            else {
              char v125 = v122;
            }
            return sub_1CC03A200(v120, v121, v125, (llvm::Constant **)a2, (const llvm::DataLayout *)v123, (llvm::DSOLocalEquivalent **)v124);
            BOOL v126 = *(llvm **)v11;
            int v127 = (llvm::Constant *)*((void *)v11 + 4);
            unint64_t v128 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
            unsigned __int8 v129 = llvm::ConstrainedFPIntrinsic::getExceptionBehavior(this);
            char v130 = llvm::ConstrainedFPIntrinsic::getRoundingMode(this);
            if (v128 == 127) {
              int v131 = -1;
            }
            else {
              int v131 = v128;
            }
            return sub_1CC0398F4(v126, v127, v131, a2, (const llvm::DataLayout *)v129, (llvm::DSOLocalEquivalent **)v130);
          default:
            if (v13 != 132) {
              return (llvm::Constant *)Splat;
            }
            uint64_t v106 = *((void *)v11 + 4);
            uint64_t v107 = *((void *)v11 + 8);
            uint64_t v108 = (void *)(v107 + 24);
            if (*(_DWORD *)(v107 + 32) >= 0x41u) {
              uint64_t v108 = (void *)*v108;
            }
            uint64_t Splat = *(void *)v11;
            uint64_t v109 = **(void **)(*(void *)(v12 + 24) + 16);
            int v110 = *(_DWORD *)v108;
            uint64_t v370 = 0;
            LODWORD(v365) = 131;
            uint64_t v366 = 0;
            uint64_t v367 = &v370;
            uint64_t v368 = 1;
            if (!sub_1CC045310((uint64_t)&v365, v106) || !sub_1CC04D3D4(v368, v106)) {
              return 0;
            }
            if (!*(unsigned char *)(a2 + 41)) {
              goto LABEL_195;
            }
            unsigned int v111 = (*(unsigned char *)(Splat + 16) - 11);
            if (v111 < 2) {
              goto LABEL_789;
            }
            if (v111 < 0xFD) {
              goto LABEL_195;
            }
            *(void *)__s2 = v378;
            *(void *)&__s2[8] = v378;
            *(void *)&__s2[16] = 8;
            *(_DWORD *)&__s2[24] = 0;
            uint64_t v372 = &v373;
            *(void *)&long long v373 = &v374;
            *((void *)&v373 + 1) = 0x800000000;
            v371 = (llvm::APInt *)__s2;
            BOOL v290 = 0;
            if (sub_1CC04C108(&v371, Splat))
            {
              do
              {
                BOOL v290 = DWORD2(v373) == 0;
                if (!DWORD2(v373)) {
                  break;
                }
                uint64_t v361 = *(void *)(v373 + 8 * DWORD2(v373) - 8);
                --DWORD2(v373);
              }
              while ((sub_1CC04C108(&v371, v361) & 1) != 0);
            }
            if ((uint64_t **)v373 != &v374) {
              free((void *)v373);
            }
            if (*(void *)&__s2[8] == *(void *)__s2)
            {
              if (v290)
              {
LABEL_789:
                if (v110) {
                  return 0;
                }
                uint64_t Splat = v370;
                goto LABEL_197;
              }
            }
            else
            {
              free(*(void **)&__s2[8]);
              if (v290) {
                goto LABEL_789;
              }
            }
LABEL_195:
            if (Splat != v370 || v110) {
              return 0;
            }
LABEL_197:
            if (*(void *)Splat != v109) {
              return 0;
            }
            return (llvm::Constant *)Splat;
        }
      }
      char v59 = v13 + 114;
      if ((v13 - 142) > 0x2B) {
        goto LABEL_433;
      }
      if (((1 << v59) & 3) != 0)
      {
        uint64_t v96 = *(void *)v11;
        uint64_t v97 = *((void *)v11 + 4);
        uint64_t v98 = *((void *)v11 + 8);
        *(void *)__s2 = v96;
        *(void *)&__s2[8] = v97;
        *(void *)&__s2[16] = v98;
        uint64_t v99 = a2;
        int v100 = 0;
        int v101 = 1;
        return sub_1CC04C468((llvm::PoisonValue ***)__s2, (llvm::Type *)3, 0, v99, v100, v101);
      }
      if (((1 << v59) & 0xC0) == 0)
      {
        if (((1 << v59) & 0xC0000000000) != 0)
        {
          uint64_t Splat = *((void *)v11 + 12);
          if (!llvm::maskIsAllZeroOrUndef(*((llvm **)v11 + 8), (llvm::Value *)a2)) {
            return 0;
          }
          return (llvm::Constant *)Splat;
        }
LABEL_433:
        if ((v13 - 276) >= 2) {
          return (llvm::Constant *)Splat;
        }
        uint64_t v202 = *(void *)v11;
        uint64_t v203 = *((void *)v11 + 4);
        uint64_t v204 = *((void *)v11 + 8);
        uint64_t v26 = **(void **)(*(void *)(v12 + 24) + 16);
        unsigned int v205 = *(unsigned __int8 *)(*(void *)v11 + 16);
        if (v205 >= 0x15) {
          uint64_t v206 = v203;
        }
        else {
          uint64_t v206 = v202;
        }
        if (v205 >= 0x15) {
          uint64_t v207 = v202;
        }
        else {
          uint64_t v207 = v203;
        }
        unsigned int v208 = *(unsigned __int8 *)(v206 + 16);
        if (v208 <= 0x14 && v206 != 0)
        {
          if (v208 == 16)
          {
            uint64_t v210 = *(unsigned int *)(v206 + 32);
            if (v210 >= 0x41)
            {
              int v306 = 0;
              int64_t v307 = (unint64_t)(v210 + 63) >> 6;
              do
              {
                BOOL v112 = v307-- < 1;
                if (v112) {
                  break;
                }
                unint64_t v308 = *(void *)(*(void *)(v206 + 24) + 8 * v307);
                v306 += __clz(v308);
              }
              while (!v308);
              int v309 = v210 | 0xFFFFFFC0;
              if ((v210 & 0x3F) == 0) {
                int v309 = 0;
              }
              if (v306 + v309 == v210) {
                goto LABEL_713;
              }
            }
            else if (!*(void *)(v206 + 24))
            {
              goto LABEL_713;
            }
          }
          else if (v208 == 17)
          {
            if (sub_1CB844168(v206, 0.0)) {
              goto LABEL_713;
            }
          }
          else if (v208 - 18 < 3 || v208 == 13)
          {
            goto LABEL_713;
          }
          if (sub_1CC03F414((uint64_t)__s2, (llvm::Constant *)v206)) {
            goto LABEL_713;
          }
        }
        if (*(unsigned char *)(a2 + 41))
        {
          unsigned int v211 = (*(unsigned char *)(v206 + 16) - 11);
          if (v211 < 2) {
            goto LABEL_713;
          }
          if (v211 >= 0xFD)
          {
            *(void *)__s2 = v378;
            *(void *)&__s2[8] = v378;
            *(void *)&__s2[16] = 8;
            *(_DWORD *)&__s2[24] = 0;
            *(void *)&long long v373 = &v374;
            *((void *)&v373 + 1) = 0x800000000;
            int v365 = (llvm::APInt *)__s2;
            uint64_t v366 = (uint64_t *)&v373;
            BOOL v274 = 0;
            if (sub_1CC04C108(&v365, v206))
            {
              do
              {
                BOOL v274 = DWORD2(v373) == 0;
                if (!DWORD2(v373)) {
                  break;
                }
                uint64_t v348 = *(void *)(v373 + 8 * DWORD2(v373) - 8);
                --DWORD2(v373);
              }
              while ((sub_1CC04C108(&v365, v348) & 1) != 0);
            }
            if ((uint64_t **)v373 != &v374) {
              free((void *)v373);
            }
            if (*(void *)&__s2[8] == *(void *)__s2)
            {
              if (v274) {
                goto LABEL_713;
              }
            }
            else
            {
              free(*(void **)&__s2[8]);
              if (v274) {
                goto LABEL_713;
              }
            }
          }
        }
        if ((*(_DWORD *)(v26 + 8) & 0xFE) == 0x12) {
          uint64_t v26 = **(void **)(v26 + 16);
        }
        unsigned int v212 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v26);
        unsigned int v213 = v212;
        uint64_t v214 = (void *)(v204 + 24);
        if (*(_DWORD *)(v204 + 32) >= 0x41u) {
          uint64_t v214 = (void *)*v214;
        }
        uint64_t v215 = (void *)*v214;
        if (v212 > 0x40) {
          operator new[]();
        }
        if (((unint64_t)(1 << (char)v215) >> (v212 - 1))) {
          return 0;
        }
        *(_DWORD *)&__s2[8] = v212;
        *(void *)__s2 = 1 << (char)v215;
        BOOL v216 = sub_1CBF53154((llvm::APInt *)__s2, (unsigned __int8 *)v206);
        if (*(_DWORD *)&__s2[8] >= 0x41u && *(void *)__s2) {
          MEMORY[0x1D25D9CB0](*(void *)__s2, 0x1000C8000313F17);
        }
        if (v216) {
          uint64_t Splat = v207;
        }
        else {
          uint64_t Splat = 0;
        }
        if (v213 < 0x41) {
          return (llvm::Constant *)Splat;
        }
        goto LABEL_464;
      }
      uint64_t v60 = *(void *)v11;
      uint64_t v61 = *((void *)v11 + 4);
      uint64_t v62 = (unsigned __int8 *)*((void *)v11 + 8);
      if (!*(unsigned char *)(a2 + 41)) {
        goto LABEL_101;
      }
      unsigned int v63 = (*(unsigned char *)(v60 + 16) - 11);
      if (v63 < 2)
      {
        int v253 = 1;
        int v254 = 1;
      }
      else
      {
        if (v63 < 0xFD)
        {
LABEL_99:
          unsigned int v64 = (v62[16] - 11);
          if (v64 < 2) {
            return (llvm::Constant *)*((void *)this
          }
                                     + 4 * (v13 != 148)
                                     + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
          if (v64 < 0xFD) {
            goto LABEL_101;
          }
          *(void *)__s2 = v378;
          *(void *)&__s2[8] = v378;
          *(void *)&__s2[16] = 8;
          *(_DWORD *)&__s2[24] = 0;
          *(void *)&long long v373 = &v374;
          *((void *)&v373 + 1) = 0x800000000;
          int v365 = (llvm::APInt *)__s2;
          uint64_t v366 = (uint64_t *)&v373;
          BOOL v273 = 0;
          if (sub_1CC04C108(&v365, (uint64_t)v62))
          {
            do
            {
              BOOL v273 = DWORD2(v373) == 0;
              if (!DWORD2(v373)) {
                break;
              }
              uint64_t v347 = *(void *)(v373 + 8 * DWORD2(v373) - 8);
              --DWORD2(v373);
            }
            while ((sub_1CC04C108(&v365, v347) & 1) != 0);
          }
          if ((uint64_t **)v373 != &v374) {
            free((void *)v373);
          }
          if (*(void *)&__s2[8] == *(void *)__s2)
          {
            if (v273) {
              return (llvm::Constant *)*((void *)this
            }
                                       + 4 * (v13 != 148)
                                       + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
          }
          else
          {
            free(*(void **)&__s2[8]);
            if (v273) {
              return (llvm::Constant *)*((void *)this
            }
                                       + 4 * (v13 != 148)
                                       + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
          }
LABEL_101:
          int v365 = 0;
          *(void *)__s2 = &v365;
          *(void *)&__s2[8] = 0;
          if (!sub_1CBF528D8((uint64_t)__s2, v62)) {
            goto LABEL_301;
          }
          uint64_t v65 = *((unsigned int *)v365 + 2);
          *(_DWORD *)&__s2[8] = v65;
          if (v65 > 0x40) {
            operator new[]();
          }
          unint64_t v66 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v65;
          if (!v65) {
            unint64_t v66 = 0;
          }
          *(void *)__s2 = v66 & v65;
          llvm::APInt::urem(v365, (const llvm::APInt *)__s2, (uint64_t)&v373);
          uint64_t Splat = DWORD2(v373);
          if (DWORD2(v373) > 0x40)
          {
            int v162 = 0;
            int64_t v163 = ((unint64_t)DWORD2(v373) + 63) >> 6;
            do
            {
              BOOL v112 = v163-- < 1;
              if (v112) {
                break;
              }
              unint64_t v164 = *(void *)(v373 + 8 * v163);
              v162 += __clz(v164);
            }
            while (!v164);
            unsigned int v165 = DWORD2(v373) | 0xFFFFFFC0;
            if ((BYTE8(v373) & 0x3F) == 0) {
              unsigned int v165 = 0;
            }
            int v166 = v162 + v165;
            if ((void)v373) {
              MEMORY[0x1D25D9CB0](v373, 0x1000C8000313F17);
            }
            if (v166 != Splat) {
              goto LABEL_107;
            }
          }
          else if ((void)v373)
          {
LABEL_107:
            char v67 = 0;
LABEL_297:
            if (*(_DWORD *)&__s2[8] >= 0x41u && *(void *)__s2) {
              MEMORY[0x1D25D9CB0](*(void *)__s2, 0x1000C8000313F17);
            }
            if (v67) {
              return (llvm::Constant *)Splat;
            }
LABEL_301:
            if (!v60) {
              goto LABEL_314;
            }
            unsigned int v167 = *(unsigned __int8 *)(v60 + 16);
            if (v167 > 0x14) {
              goto LABEL_314;
            }
            if (v167 == 16)
            {
              uint64_t v168 = *(unsigned int *)(v60 + 32);
              if (v168 < 0x41)
              {
                if (*(void *)(v60 + 24)) {
                  goto LABEL_306;
                }
LABEL_307:
                if (v61)
                {
                  unsigned int v169 = *(unsigned __int8 *)(v61 + 16);
                  if (v169 <= 0x14)
                  {
                    if (v169 == 16)
                    {
                      uint64_t v170 = *(unsigned int *)(v61 + 32);
                      if (v170 >= 0x41)
                      {
                        int v318 = 0;
                        int64_t v319 = (unint64_t)(v170 + 63) >> 6;
                        do
                        {
                          BOOL v112 = v319-- < 1;
                          if (v112) {
                            break;
                          }
                          unint64_t v320 = *(void *)(*(void *)(v61 + 24) + 8 * v319);
                          v318 += __clz(v320);
                        }
                        while (!v320);
                        int v321 = v170 | 0xFFFFFFC0;
                        if ((v170 & 0x3F) == 0) {
                          int v321 = 0;
                        }
                        if (v318 + v321 == v170) {
                          goto LABEL_313;
                        }
                      }
                      else if (!*(void *)(v61 + 24))
                      {
LABEL_313:
                        int64_t v171 = **(llvm::Constant ***)(*(void *)(v12 + 24) + 16);
                        return llvm::Constant::getNullValue(v171, (llvm::Type *)a2, a3);
                      }
                    }
                    else if (v169 == 17)
                    {
                      if (sub_1CB844168(v61, 0.0)) {
                        goto LABEL_313;
                      }
                    }
                    else if (v169 - 18 < 3 || v169 == 13)
                    {
                      goto LABEL_313;
                    }
                    if (sub_1CC03F414((uint64_t)__s2, (llvm::Constant *)v61)) {
                      goto LABEL_313;
                    }
                  }
                }
LABEL_314:
                if (!sub_1CBF687D0((uint64_t)__s2, (llvm::Constant *)v60)
                  || !sub_1CBF687D0((uint64_t)&v373, (llvm::Constant *)v61))
                {
                  return 0;
                }
                BOOL v69 = **(llvm::Constant ***)(*(void *)(v12 + 24) + 16);
                return (llvm::Constant *)llvm::Constant::getAllOnesValue(v69, (llvm::Type *)a2, a3);
              }
              int v310 = 0;
              int64_t v311 = (unint64_t)(v168 + 63) >> 6;
              do
              {
                BOOL v112 = v311-- < 1;
                if (v112) {
                  break;
                }
                unint64_t v312 = *(void *)(*(void *)(v60 + 24) + 8 * v311);
                v310 += __clz(v312);
              }
              while (!v312);
              int v313 = v168 | 0xFFFFFFC0;
              if ((v168 & 0x3F) == 0) {
                int v313 = 0;
              }
              if (v310 + v313 == v168) {
                goto LABEL_307;
              }
            }
            else if (v167 == 17)
            {
              if (sub_1CB844168(v60, 0.0)) {
                goto LABEL_307;
              }
            }
            else if (v167 - 18 < 3 || v167 == 13)
            {
              goto LABEL_307;
            }
LABEL_306:
            if ((sub_1CC03F414((uint64_t)__s2, (llvm::Constant *)v60) & 1) == 0) {
              goto LABEL_314;
            }
            goto LABEL_307;
          }
          uint64_t Splat = *((void *)this + 4 * (v13 != 148) + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
          char v67 = 1;
          goto LABEL_297;
        }
        *(void *)__s2 = v378;
        *(void *)&__s2[8] = v378;
        *(void *)&__s2[16] = 8;
        *(_DWORD *)&__s2[24] = 0;
        *(void *)&long long v373 = &v374;
        *((void *)&v373 + 1) = 0x800000000;
        int v365 = (llvm::APInt *)__s2;
        uint64_t v366 = (uint64_t *)&v373;
        BOOL v364 = 0;
        if (sub_1CC04C108(&v365, v60))
        {
          do
          {
            BOOL v364 = DWORD2(v373) == 0;
            if (!DWORD2(v373)) {
              break;
            }
            uint64_t v346 = *(void *)(v373 + 8 * DWORD2(v373) - 8);
            --DWORD2(v373);
          }
          while ((sub_1CC04C108(&v365, v346) & 1) != 0);
        }
        if ((uint64_t **)v373 != &v374) {
          free((void *)v373);
        }
        if (*(void *)&__s2[8] != *(void *)__s2) {
          free(*(void **)&__s2[8]);
        }
        int v253 = *(unsigned __int8 *)(a2 + 41);
        int v254 = v364;
      }
      if (v254) {
        BOOL v255 = v253 == 0;
      }
      else {
        BOOL v255 = 1;
      }
      if (v255)
      {
        if (!v253) {
          goto LABEL_101;
        }
        goto LABEL_99;
      }
      unsigned int v256 = (*(unsigned char *)(v61 + 16) - 11);
      if (v256 < 2) {
        return llvm::UndefValue::get(**(llvm::UndefValue ***)(*(void *)(v12 + 24) + 16), (llvm::Type *)a2);
      }
      if (v256 < 0xFD) {
        goto LABEL_99;
      }
      *(void *)__s2 = v378;
      *(void *)&__s2[8] = v378;
      *(void *)&__s2[16] = 8;
      *(_DWORD *)&__s2[24] = 0;
      *(void *)&long long v373 = &v374;
      *((void *)&v373 + 1) = 0x800000000;
      int v365 = (llvm::APInt *)__s2;
      uint64_t v366 = (uint64_t *)&v373;
      BOOL v257 = 0;
      if (sub_1CC04C108(&v365, v61))
      {
        do
        {
          BOOL v257 = DWORD2(v373) == 0;
          if (!DWORD2(v373)) {
            break;
          }
          uint64_t v362 = *(void *)(v373 + 8 * DWORD2(v373) - 8);
          --DWORD2(v373);
        }
        while ((sub_1CC04C108(&v365, v362) & 1) != 0);
      }
      if ((uint64_t **)v373 != &v374) {
        free((void *)v373);
      }
      if (*(void *)&__s2[8] == *(void *)__s2)
      {
        if (v257) {
          return llvm::UndefValue::get(**(llvm::UndefValue ***)(*(void *)(v12 + 24) + 16), (llvm::Type *)a2);
        }
      }
      else
      {
        free(*(void **)&__s2[8]);
        if (v257) {
          return llvm::UndefValue::get(**(llvm::UndefValue ***)(*(void *)(v12 + 24) + 16), (llvm::Type *)a2);
        }
      }
      if (!*(unsigned char *)(a2 + 41)) {
        goto LABEL_101;
      }
      goto LABEL_99;
  }
}

uint64_t ***llvm::SimplifyFreezeInst(uint64_t ***a1, uint64_t *a2)
{
  if (sub_1CC16A22C(a1, a2[3], a2[4], a2[2], 0, 0)) {
    return a1;
  }
  else {
    return 0;
  }
}

llvm::UndefValue *llvm::SimplifyInstructionWithOperands(llvm *this, uint64_t a2, unint64_t a3, uint64_t a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6, uint64_t a7)
{
  uint64_t v8 = a2;
  v115[8] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a4 + 32);
  long long v11 = *(_OWORD *)(a4 + 16);
  long long v104 = *(_OWORD *)a4;
  *(_OWORD *)BOOL v105 = v11;
  long long v106 = *(_OWORD *)(a4 + 32);
  if (!v10) {
    *(void *)&long long v106 = this;
  }
  AggregateElement = 0;
  switch(*((unsigned char *)this + 16))
  {
    case '(':
      uint64_t ElementInst = sub_1CC03952C(*(unsigned __int8 **)a2, a2, a3, a4, a5);
      goto LABEL_5;
    case ')':
      uint64_t v45 = *(unsigned __int8 **)a2;
      unint64_t v46 = *(llvm::Constant **)(a2 + 8);
      if (BYTE8(v106))
      {
        unsigned int v47 = *((unsigned __int8 *)this + 17);
        int v48 = (v47 >> 2) & 1;
        int v49 = (v47 >> 1) & 1;
      }
      else
      {
        LOBYTE(v48) = 0;
        int v49 = 0;
      }
      uint64_t ElementInst = (uint64_t)sub_1CC02A5B0((llvm *)v45, v46, v48, v49, (uint64_t)&v104, (llvm::DSOLocalEquivalent **)3);
      goto LABEL_5;
    case '*':
      char v36 = *(unsigned __int8 **)a2;
      int v37 = *(llvm::Constant **)(a2 + 8);
      if ((unint64_t)*((unsigned __int8 *)this + 17) >> 1 == 127) {
        LODWORD(v38) = -1;
      }
      else {
        unint64_t v38 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
      }
      uint64_t ElementInst = (uint64_t)sub_1CC0395A4((llvm *)v36, v37, v38, (uint64_t)&v104, 0, (llvm::DSOLocalEquivalent **)1);
      goto LABEL_5;
    case '+':
      BOOL v40 = *(unsigned __int8 **)a2;
      uint64_t v41 = *(void *)(a2 + 8);
      if (BYTE8(v106))
      {
        unsigned int v42 = *((unsigned __int8 *)this + 17);
        unsigned int v43 = (const llvm::APFloat *)((v42 >> 2) & 1);
        int v44 = (v42 >> 1) & 1;
      }
      else
      {
        unsigned int v43 = 0;
        int v44 = 0;
      }
      uint64_t ElementInst = (uint64_t)sub_1CC02ABD8((uint64_t)v40, v41, v43, v44, (uint64_t)&v104, (llvm::DSOLocalEquivalent **)3);
      goto LABEL_5;
    case ',':
      unsigned int v33 = *(unsigned __int8 **)a2;
      uint64_t v34 = *(llvm::Constant **)(a2 + 8);
      if ((unint64_t)*((unsigned __int8 *)this + 17) >> 1 == 127) {
        LODWORD(v35) = -1;
      }
      else {
        unint64_t v35 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
      }
      uint64_t ElementInst = (uint64_t)sub_1CC0398F4((llvm *)v33, v34, v35, (uint64_t)&v104, 0, (llvm::DSOLocalEquivalent **)1);
      goto LABEL_5;
    case '-':
      uint64_t ElementInst = (uint64_t)sub_1CC02B6E8(*(llvm **)a2, *(llvm::Constant **)(a2 + 8), (uint64_t)&v104, 3, a5, a6);
      goto LABEL_5;
    case '.':
      uint64_t v18 = *(unsigned __int8 **)a2;
      uint64_t v19 = *(llvm::Constant **)(a2 + 8);
      if ((unint64_t)*((unsigned __int8 *)this + 17) >> 1 == 127) {
        LODWORD(v20) = -1;
      }
      else {
        unint64_t v20 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
      }
      uint64_t ElementInst = (uint64_t)sub_1CC039C30((llvm *)v18, v19, v20, (llvm::Constant **)&v104, 0, (llvm::DSOLocalEquivalent **)1);
      goto LABEL_5;
    case '/':
      uint64_t ElementInst = (uint64_t)sub_1CC040494((llvm *)0x13, *(unsigned __int8 **)a2, *(llvm::Constant **)(a2 + 8), (llvm::Constant **)&v104, (const llvm::DataLayout *)3, a6);
      goto LABEL_5;
    case '0':
      uint64_t ElementInst = (uint64_t)sub_1CC02BAA0(*(unsigned __int8 **)a2, *(llvm::Constant **)(a2 + 8), (llvm::Constant **)&v104, (const llvm::DataLayout *)3);
      goto LABEL_5;
    case '1':
      unsigned int v21 = *(unsigned __int8 **)a2;
      uint64_t v22 = *(llvm::Constant **)(a2 + 8);
      if ((unint64_t)*((unsigned __int8 *)this + 17) >> 1 == 127) {
        LODWORD(v23) = -1;
      }
      else {
        unint64_t v23 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
      }
      uint64_t ElementInst = (uint64_t)sub_1CC039F04((llvm::PoisonValue **)v21, v22, v23, (llvm::Constant **)&v104, 0, (llvm::DSOLocalEquivalent **)1);
      goto LABEL_5;
    case '2':
      uint64_t ElementInst = (uint64_t)sub_1CC0415F8((llvm *)0x16, *(unsigned __int8 **)a2, *(llvm::Constant **)(a2 + 8), (uint64_t)&v104, (const llvm::DataLayout *)3, a6);
      goto LABEL_5;
    case '3':
      uint64_t ElementInst = (uint64_t)sub_1CC02BB48(*(llvm::Constant ***)a2, *(llvm::Constant **)(a2 + 8), (uint64_t)&v104, (const llvm::DataLayout *)3);
      goto LABEL_5;
    case '4':
      uint64_t v15 = *(unsigned __int8 **)a2;
      uint64_t v16 = *(llvm::PoisonValue ***)(a2 + 8);
      if ((unint64_t)*((unsigned __int8 *)this + 17) >> 1 == 127) {
        LOBYTE(v17) = -1;
      }
      else {
        unint64_t v17 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
      }
      uint64_t ElementInst = (uint64_t)sub_1CC03A200((llvm::PoisonValue **)v15, v16, v17, (llvm::Constant **)&v104, 0, (llvm::DSOLocalEquivalent **)1);
      goto LABEL_5;
    case '5':
      __int32 v50 = *(unsigned __int8 **)a2;
      unint64_t v51 = *(llvm::Constant **)(a2 + 8);
      if (BYTE8(v106))
      {
        unsigned int v52 = *((unsigned __int8 *)this + 17);
        int v53 = (v52 >> 2) & 1;
        int v54 = (v52 >> 1) & 1;
      }
      else
      {
        int v53 = 0;
        int v54 = 0;
      }
      uint64_t ElementInst = (uint64_t)sub_1CC02BC1C(v50, v51, v53, v54, (uint64_t)&v104, (llvm::DSOLocalEquivalent **)3);
      goto LABEL_5;
    case '6':
      BOOL v55 = *(unsigned __int8 **)a2;
      uint64_t v56 = *(llvm::Constant **)(a2 + 8);
      if (BYTE8(v106)) {
        int v57 = (*((unsigned __int8 *)this + 17) >> 1) & 1;
      }
      else {
        int v57 = 0;
      }
      uint64_t ElementInst = (uint64_t)sub_1CC02BE04((uint64_t)v55, v56, v57, (uint64_t)&v104, (llvm::DSOLocalEquivalent **)3);
      goto LABEL_5;
    case '7':
      int v58 = *(unsigned __int8 **)a2;
      char v59 = *(llvm::Constant **)(a2 + 8);
      if (BYTE8(v106)) {
        int v60 = (*((unsigned __int8 *)this + 17) >> 1) & 1;
      }
      else {
        int v60 = 0;
      }
      uint64_t ElementInst = (uint64_t)sub_1CC02C0A0((uint64_t)v58, v59, v60, (uint64_t)&v104, (llvm::DSOLocalEquivalent **)3);
      goto LABEL_5;
    case '8':
      uint64_t ElementInst = (uint64_t)sub_1CC02C2C8(*(llvm **)a2, *(llvm::Constant **)(a2 + 8), (uint64_t)&v104, 3, a5, a6);
      goto LABEL_5;
    case '9':
      uint64_t ElementInst = (uint64_t)sub_1CC02DBDC(*(llvm **)a2, *(llvm::Constant **)(a2 + 8), (uint64_t)&v104, 3, a5, a6);
      goto LABEL_5;
    case ':':
      uint64_t ElementInst = (uint64_t)sub_1CC02EA0C(*(llvm **)a2, *(llvm::Constant **)(a2 + 8), (uint64_t)&v104, 3, a5, a6);
      goto LABEL_5;
    case ';':
      goto LABEL_6;
    case '<':
      if (*((_WORD *)this + 9)) {
        goto LABEL_124;
      }
      uint64_t v61 = *(unsigned __int8 **)a2;
      unsigned int v62 = *(_DWORD *)(**(void **)a2 + 8);
      if ((v62 & 0xFE) == 0x12) {
        unsigned int v62 = *(_DWORD *)(**(void **)(*(void *)v61 + 16) + 8);
      }
      if (v62 < 0x100) {
        goto LABEL_94;
      }
      unsigned int v63 = v62 >> 8;
      uint64_t v64 = *(unsigned int *)(v104 + 240);
      uint64_t v65 = *(void *)(v104 + 232);
      if (v64)
      {
        uint64_t v65 = *(void *)(v104 + 232);
        unint64_t v66 = *(unsigned int *)(v104 + 240);
        do
        {
          unint64_t v67 = v66 >> 1;
          uint64_t v68 = v65 + 16 * (v66 >> 1);
          unsigned int v69 = *(_DWORD *)(v68 + 8);
          uint64_t v70 = v68 + 16;
          v66 += ~(v66 >> 1);
          if (v69 < v63) {
            uint64_t v65 = v70;
          }
          else {
            unint64_t v66 = v67;
          }
        }
        while (v66);
      }
      if (v65 == *(void *)(v104 + 232) + 16 * v64 || *(_DWORD *)(v65 + 8) != v63) {
LABEL_94:
      }
        uint64_t v65 = *(void *)(v104 + 232);
      unsigned int v71 = *(_DWORD *)(v65 + 12);
      LODWORD(v112) = v71;
      if (v71 > 0x40) {
        operator new[]();
      }
      uint64_t v72 = 0;
      long long __src = 0;
      if (v61[16] < 0x15u) {
        goto LABEL_114;
      }
      if (*((unsigned __int8 *)llvm::getUnderlyingObject((llvm *)v61, (const llvm::Value *)6) + 16) > 0x14u)
      {
        AggregateElement = 0;
      }
      else
      {
        int v74 = llvm::Value::stripAndAccumulateConstantOffsets((llvm::GlobalValue *)v61, (llvm::DataLayout *)v104, (llvm::APInt *)&__src, 1, 1, 0, v73);
        uint64_t v61 = (unsigned __int8 *)v74;
        unsigned int v75 = *(_DWORD *)(*(void *)v74 + 8);
        if ((v75 & 0xFE) == 0x12) {
          unsigned int v75 = *(_DWORD *)(**(void **)(*(void *)v74 + 16) + 8);
        }
        if (v75 < 0x100) {
          goto LABEL_109;
        }
        unsigned int v76 = v75 >> 8;
        uint64_t v77 = *(unsigned int *)(v104 + 240);
        uint64_t v78 = *(void *)(v104 + 232);
        if (v77)
        {
          uint64_t v78 = *(void *)(v104 + 232);
          unint64_t v79 = *(unsigned int *)(v104 + 240);
          do
          {
            unint64_t v80 = v79 >> 1;
            uint64_t v81 = v78 + 16 * (v79 >> 1);
            unsigned int v82 = *(_DWORD *)(v81 + 8);
            uint64_t v83 = v81 + 16;
            v79 += ~(v79 >> 1);
            if (v82 < v76) {
              uint64_t v78 = v83;
            }
            else {
              unint64_t v79 = v80;
            }
          }
          while (v79);
        }
        if (v78 == *(void *)(v104 + 232) + 16 * v77 || *(_DWORD *)(v78 + 8) != v76) {
LABEL_109:
        }
          uint64_t v78 = *(void *)(v104 + 232);
        llvm::APInt::sextOrTrunc((uint64_t)&__src, *(_DWORD *)(v78 + 12), (uint64_t)&v108);
        if (v112 >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
        uint64_t v72 = v108;
        long long __src = v108;
        unsigned int v71 = v109;
        LODWORD(v112) = v109;
        if (v61[16] > 0x14u)
        {
          AggregateElement = 0;
LABEL_166:
          if (v71 >= 0x41 && __src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
          goto LABEL_6;
        }
LABEL_114:
        uint64_t v84 = *(void *)this;
        LODWORD(v109) = v71;
        if (v71 > 0x40) {
          operator new[]();
        }
        uint64_t v108 = v72;
        int v100 = (unsigned __int8 *)llvm::ConstantFoldLoadFromConstPtr((llvm::GlobalValue *)v61, v84, (llvm::APInt *)&v108, (llvm::DataLayout *)v104, (uint64_t)a5, (uint64_t)a6, a7);
        AggregateElement = v100;
        if (v109 >= 0x41 && v108) {
          MEMORY[0x1D25D9CB0](v108, 0x1000C8000313F17);
        }
      }
      unsigned int v71 = v112;
      goto LABEL_166;
    case '>':
      uint64_t ElementInst = (uint64_t)sub_1CC036F6C(*((llvm::Type **)this + 8), *(unsigned __int8 **)a2, (uint64_t *)(a2 + 8), a3 - 1, (*((unsigned __int8 *)this + 17) >> 1) & 1, (uint64_t)&v104);
      goto LABEL_5;
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
      uint64_t ElementInst = (uint64_t)sub_1CC038B58((llvm *)(*((unsigned __int8 *)this + 16) - 28), *(void *)a2, *(llvm::Constant **)this, (llvm::Type **)&v104, a5);
      goto LABEL_5;
    case 'Q':
      uint64_t ElementInst = (uint64_t)sub_1CC02F0F0(*((_WORD *)this + 9) & 0x3F, *(unsigned __int8 **)a2, *(unsigned __int8 **)(a2 + 8), (uint64_t)&v104, (llvm::SmallPtrSetImplBase *)3);
      goto LABEL_5;
    case 'R':
      uint64_t v85 = *((_WORD *)this + 9) & 0x3F;
      unsigned int v86 = *(unsigned __int8 **)a2;
      if ((unint64_t)*((unsigned __int8 *)this + 17) >> 1 == 127) {
        LOBYTE(v87) = -1;
      }
      else {
        unint64_t v87 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
      }
      uint64_t ElementInst = (uint64_t)sub_1CC0347BC(v85, (llvm::ConstantExpr *)v86, *(unsigned __int8 **)(v8 + 8), v87, (uint64_t)&v104, 3);
      goto LABEL_5;
    case 'S':
      if (!a3) {
        goto LABEL_141;
      }
      AggregateElement = 0;
      char v24 = 0;
      unint64_t v25 = a2 + 8 * a3;
      break;
    case 'T':
      uint64_t ElementInst = (uint64_t)llvm::SimplifyCall(this, (uint64_t **)&v104, a3);
      goto LABEL_5;
    case 'U':
      uint64_t ElementInst = (uint64_t)sub_1CC035B70(*(void *)a2, *(unsigned __int8 **)(a2 + 8), *(unsigned __int8 **)(a2 + 16), (uint64_t)&v104, 3);
      goto LABEL_5;
    case 'Y':
      uint64_t ElementInst = (uint64_t)llvm::SimplifyExtractElementInst(*(unsigned __int8 **)a2, *(void *)(a2 + 8), (llvm::Constant *)&v104);
      goto LABEL_5;
    case 'Z':
      uint64_t ElementInst = (uint64_t)llvm::SimplifyInsertElementInst(*(unsigned __int8 **)a2, *(unsigned __int8 **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)&v104, a5);
      goto LABEL_5;
    case '[':
      uint64_t ElementInst = (uint64_t)llvm::SimplifyShuffleVectorInst(*(llvm **)a2, *(llvm::Type **)(a2 + 8), *((char **)this + 8), (llvm::Type *)*((unsigned int *)this + 18), *(llvm::UndefValue **)this, (uint64_t)&v104);
      goto LABEL_5;
    case '\\':
      AggregateElement = *(unsigned __int8 **)a2;
      int v88 = (unsigned int *)*((void *)this + 8);
      uint64_t v89 = *((unsigned int *)this + 18);
      unsigned int v90 = *(unsigned __int8 *)(*(void *)a2 + 16);
      if (*(void *)a2 && v90 <= 0x14)
      {
        if (v89)
        {
          do
          {
            AggregateElement = (unsigned __int8 *)llvm::Constant::getAggregateElement((llvm::Constant *)AggregateElement, (llvm::Type *)*v88);
            if (!AggregateElement) {
              break;
            }
            ++v88;
            --v89;
          }
          while (v89);
        }
      }
      else
      {
        if (v90 != 93) {
          goto LABEL_124;
        }
        uint64_t v97 = *(unsigned __int8 **)a2;
        while (1)
        {
          unsigned int v98 = *((_DWORD *)v97 + 18);
          unsigned int v99 = v98 >= v89 ? v89 : *((_DWORD *)v97 + 18);
          if (!memcmp(*((const void **)v97 + 8), v88, 4 * v99)) {
            break;
          }
          AggregateElement = 0;
          uint64_t v97 = (unsigned __int8 *)*((void *)v97 - 8);
          if (!v97 || v97[16] != 93) {
            goto LABEL_6;
          }
        }
        if (v98 != v89) {
          goto LABEL_124;
        }
        AggregateElement = (unsigned __int8 *)*((void *)v97 - 4);
      }
      goto LABEL_6;
    case ']':
      uint64_t ElementInst = (uint64_t)llvm::SimplifyInsertValueInst(*(llvm::Constant **)a2, *(void *)(a2 + 8), *((_DWORD **)this + 8), *((unsigned int *)this + 18), (uint64_t)&v104);
      goto LABEL_5;
    case '_':
      AggregateElement = *(unsigned __int8 **)a2;
      int v39 = sub_1CC16A22C(*(uint64_t ****)a2, (uint64_t)v105[1], v106, (uint64_t)v105[0], 0, 0);
      goto LABEL_63;
    default:
      uint64_t v91 = 8 * a3;
      if (!a3) {
        goto LABEL_130;
      }
      uint64_t v92 = 8 * a3;
      uint64_t v93 = a2;
      do
      {
        if (*(unsigned __int8 *)(*(void *)v93 + 16) >= 0x15u) {
          goto LABEL_124;
        }
        v93 += 8;
        v92 -= 8;
      }
      while (v92);
LABEL_130:
      long long __src = &v113;
      uint64_t v112 = 0x800000000;
      sub_1CBFC6B20((uint64_t)&__src, a3, 0);
      int v94 = (uint64_t **)__src;
      if (a3)
      {
        do
        {
          uint64_t v95 = *(llvm **)v8;
          v8 += 8;
          *v94++ = (uint64_t *)v95;
          v91 -= 8;
        }
        while (v91);
        int v94 = (uint64_t **)__src;
      }
      AggregateElement = (unsigned __int8 *)sub_1CBFB8E50(this, (llvm *)(*((unsigned __int8 *)this + 16) - 28), v94, v112, (llvm::Type *)v104, *((llvm::DSOLocalEquivalent ***)&v104 + 1));
      if (__src != &v113) {
        free(__src);
      }
      goto LABEL_6;
  }
  do
  {
    uint64_t v26 = *(void *)v8;
    if (*(llvm **)v8 == this) {
      goto LABEL_39;
    }
    if (BYTE9(v106))
    {
      unsigned int v27 = (*(unsigned char *)(v26 + 16) - 11);
      if (v27 < 2) {
        goto LABEL_46;
      }
      if (v27 >= 0xFD)
      {
        long long __src = v115;
        uint64_t v112 = (uint64_t)v115;
        uint64_t v113 = 8;
        int v114 = 0;
        v107[1] = (llvm::SmallPtrSetImplBase *)&v108;
        uint64_t v108 = v110;
        uint64_t v109 = 0x800000000;
        v107[0] = (llvm::SmallPtrSetImplBase *)&__src;
        int v29 = sub_1CC04C108(v107, v26);
        char v30 = 0;
        if (v29)
        {
          while (1)
          {
            BOOL v101 = v109 == 0;
            if (!v109) {
              break;
            }
            uint64_t v31 = *((void *)v108 + v109 - 1);
            LODWORD(v109) = v109 - 1;
            char v32 = sub_1CC04C108(v107, v31);
            char v30 = v101;
            if ((v32 & 1) == 0) {
              goto LABEL_42;
            }
          }
          char v30 = 1;
        }
LABEL_42:
        if (v108 != v110)
        {
          char v102 = v30;
          free(v108);
          char v30 = v102;
        }
        if ((void *)v112 == __src)
        {
          if (v30) {
            goto LABEL_46;
          }
        }
        else
        {
          char v103 = v30;
          free((void *)v112);
          if (v103)
          {
LABEL_46:
            char v24 = 1;
            goto LABEL_39;
          }
        }
      }
    }
    if (AggregateElement)
    {
      BOOL v28 = v26 == (void)AggregateElement;
      AggregateElement = (unsigned __int8 *)v26;
      if (!v28) {
        goto LABEL_124;
      }
    }
    else
    {
      AggregateElement = (unsigned __int8 *)v26;
    }
LABEL_39:
    v8 += 8;
  }
  while (v8 != v25);
  if (AggregateElement)
  {
    if (v24)
    {
      if (AggregateElement[16] == 5)
      {
        long long __src = v115;
        uint64_t v112 = (uint64_t)v115;
        uint64_t v113 = 4;
        int v114 = 0;
        BOOL v96 = sub_1CC565AD0((uint64_t)AggregateElement, (uint64_t)&__src);
        if ((void *)v112 == __src)
        {
          if (!v96) {
            goto LABEL_140;
          }
        }
        else
        {
          free((void *)v112);
          if (!v96) {
            goto LABEL_140;
          }
        }
LABEL_124:
        AggregateElement = 0;
      }
      else
      {
LABEL_140:
        int v39 = sub_1CC04041C((llvm::Value *)AggregateElement, this, v105[0]);
LABEL_63:
        if (!v39) {
          AggregateElement = 0;
        }
      }
    }
  }
  else
  {
LABEL_141:
    uint64_t ElementInst = (uint64_t)llvm::UndefValue::get(*(llvm::UndefValue **)this, (llvm::Type *)a2);
LABEL_5:
    AggregateElement = (unsigned __int8 *)ElementInst;
  }
LABEL_6:
  if (AggregateElement == (unsigned __int8 *)this) {
    return llvm::UndefValue::get(*(llvm::UndefValue **)this, (llvm::Type *)a2);
  }
  return (llvm::UndefValue *)AggregateElement;
}

llvm::UndefValue *llvm::SimplifyInstruction(llvm *this, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6, uint64_t a7)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  int v7 = *((_DWORD *)this + 5);
  if ((v7 & 0x40000000) != 0)
  {
    uint64_t v9 = (uint64_t *)*((void *)this - 1);
    unint64_t v8 = v7 & 0x7FFFFFF;
  }
  else
  {
    unint64_t v8 = v7 & 0x7FFFFFF;
    uint64_t v9 = (uint64_t *)((char *)this - 32 * v8);
  }
  if (v8 >= 9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v8)
  {
    uint64_t v10 = 32 * v8;
    long long v11 = v14;
    do
    {
      uint64_t v12 = *v9;
      v9 += 4;
      *v11++ = v12;
      v10 -= 32;
    }
    while (v10);
  }
  return llvm::SimplifyInstructionWithOperands(this, (uint64_t)v14, v8, a2, a5, a6, a7);
}

void llvm::getBestSimplifyQuery<llvm::Function>()
{
}

{
  while (1)
    ;
}

llvm::AssumptionCacheTracker *llvm::getBestSimplifyQuery@<X0>(llvm *this@<X0>, llvm::Pass *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v7 = *(llvm::PMDataManager **)(*((void *)this + 1) + 24);
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(v7, &llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::DominatorTreeWrapperPass::ID);
    int v7 = *(llvm::PMDataManager **)(*((void *)this + 1) + 24);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = llvm::PMDataManager::findAnalysisPass(v7, llvm::TargetLibraryInfoWrapperPass::ID, 1);
  if (v10)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v10 + 96))(v10, llvm::TargetLibraryInfoWrapperPass::ID);
    if (v11)
    {
      uint64_t v12 = v11 + 32;
      if (!*(unsigned char *)(v11 + 232))
      {
        uint64_t v15 = *((void *)a2 + 5) + 216;
        __int16 v18 = 260;
        v17[0] = v15;
        llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v17);
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        int v30 = 0;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        *(void *)&long long v16 = -1;
        *((void *)&v16 + 1) = -1;
        *(_OWORD *)long long __src = v16;
        long long v22 = v16;
        long long v23 = v16;
        long long v24 = v16;
        long long v25 = v16;
        long long v26 = v16;
        *(_OWORD *)unsigned int v27 = v16;
        *(void *)&v27[13] = -1;
        sub_1CC153974((uint64_t)__src, (int *)__p);
        sub_1CD4D04B8(v12, (uint64_t)__src);
        sub_1CD4CFA4C((uint64_t *)__src);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }
      sub_1CC1569E8(__src, v12);
    }
  }
  uint64_t result = (llvm::AssumptionCacheTracker *)llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((void *)this + 1) + 24), llvm::AssumptionCacheTracker::ID, 1);
  if (result)
  {
    uint64_t result = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(llvm::AssumptionCacheTracker *, char *))(*(void *)result + 96))(result, llvm::AssumptionCacheTracker::ID);
    if (result) {
      uint64_t result = (llvm::AssumptionCacheTracker *)llvm::AssumptionCacheTracker::getAssumptionCache(result, a2);
    }
  }
  uint64_t v14 = v9 + 32;
  if (!v9) {
    uint64_t v14 = 0;
  }
  *(void *)a3 = *((void *)a2 + 5) + 272;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = v14;
  *(void *)(a3 + 24) = result;
  *(void *)(a3 + 32) = 0;
  *(_WORD *)(a3 + 40) = 257;
  return result;
}

int8x16_t llvm::getBestSimplifyQuery@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int8x16_t *a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 40);
  a3->i64[0] = a2;
  a3->i64[1] = v3;
  int8x16_t result = vextq_s8(*(int8x16_t *)(a1 + 8), *(int8x16_t *)(a1 + 8), 8uLL);
  a3[1] = result;
  a3[2].i64[0] = 0;
  a3[2].i16[4] = 257;
  return result;
}

llvm::Value *sub_1CC03F154(uint64_t a1, llvm *a2, llvm::Constant *a3, char a4, int a5)
{
  return sub_1CC02A5B0(a2, a3, a4, a5, a1 + 24, (llvm::DSOLocalEquivalent **)3);
}

const llvm::detail::DoubleAPFloat *sub_1CC03F174(llvm *a1, unsigned __int8 **a2, llvm::Constant **a3, llvm::Constant *a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  int v7 = *a2;
  if (v7) {
    BOOL v8 = v7[16] > 0x14u;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (*a3) {
      BOOL v9 = *((unsigned __int8 *)*a3 + 16) > 0x14u;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      return llvm::ConstantFoldBinaryOpOperands(a1, (llvm *)v7, *a3, a4, a5, a6);
    }
    if (a1 <= 0x1E && ((1 << (char)a1) & 0x70066000) != 0)
    {
      *a2 = (unsigned __int8 *)*a3;
      *a3 = (llvm::Constant *)v7;
    }
  }
  return 0;
}

llvm::Constant *sub_1CC03F1D8(unsigned int a1, llvm *a2, llvm *a3, const llvm::DataLayout *a4, int a5)
{
  if (!a5) {
    return 0;
  }
  uint64_t v6 = a3;
  BOOL v9 = (llvm::DSOLocalEquivalent **)(a5 - 1);
  unsigned int v10 = *((unsigned __int8 *)a2 + 16);
  if (v10 - 41 < 0x12 && v10 > 0x1B) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = 0;
  }
  unsigned int v13 = *((unsigned __int8 *)a3 + 16);
  if (v13 - 41 < 0x12 && v13 > 0x1B) {
    uint64_t v15 = a3;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v12)
  {
    if (*((unsigned __int8 *)v12 + 16) - 28 == a1)
    {
      long long v16 = (llvm *)*((void *)v12 - 8);
      unint64_t v17 = (llvm *)*((void *)v12 - 4);
      __int16 v18 = sub_1CC03A350(a1, v17, a3, a4, (llvm::DSOLocalEquivalent **)(a5 - 1));
      if (v18)
      {
        if (v18 == v17) {
          return a2;
        }
        int8x16_t result = sub_1CC03A350(a1, v16, v18, a4, v9);
        if (result) {
          return result;
        }
      }
    }
  }
  if (v15)
  {
    if (*((unsigned __int8 *)v15 + 16) - 28 == a1)
    {
      char v20 = (llvm::Constant *)*((void *)v15 - 8);
      unsigned int v21 = (llvm::Constant *)*((void *)v15 - 4);
      long long v22 = sub_1CC03A350(a1, a2, v20, a4, v9);
      if (v22)
      {
        if (v22 == v20) {
          return v6;
        }
        int8x16_t result = sub_1CC03A350(a1, v22, v21, a4, v9);
        if (result) {
          return result;
        }
      }
    }
  }
  int8x16_t result = 0;
  if (a1 <= 0x1E && ((1 << a1) & 0x70066000) != 0)
  {
    if (!v12
      || *((unsigned __int8 *)v12 + 16) - 28 != a1
      || (long long v23 = (llvm::Constant *)*((void *)v12 - 8),
          long long v24 = (llvm::Constant *)*((void *)v12 - 4),
          (long long v25 = sub_1CC03A350(a1, v6, v23, a4, v9)) == 0))
    {
      if (!v15) {
        return 0;
      }
      goto LABEL_35;
    }
    if (v25 != v23)
    {
      int8x16_t result = sub_1CC03A350(a1, v25, v24, a4, v9);
      if (!v15 || result) {
        return result;
      }
LABEL_35:
      if (*((unsigned __int8 *)v15 + 16) - 28 == a1)
      {
        long long v26 = (llvm *)*((void *)v15 - 8);
        unsigned int v27 = (llvm *)*((void *)v15 - 4);
        int8x16_t result = sub_1CC03A350(a1, v27, a2, a4, v9);
        if (!result) {
          return result;
        }
        if (result != v27)
        {
          int8x16_t result = sub_1CC03A350(a1, v26, result, a4, v9);
          uint64_t v6 = result;
          if (!result) {
            return result;
          }
        }
        return v6;
      }
      return 0;
    }
    return a2;
  }
  return result;
}

uint64_t sub_1CC03F414(uint64_t a1, llvm::Constant *a2)
{
  if (!a2 || *((unsigned char *)a2 + 16) != 16)
  {
    uint64_t v6 = *(void *)a2;
    if (*(void *)a2) {
      BOOL v7 = (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 18;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && *((unsigned char *)SplatValue + 16) == 16)
      {
        uint64_t v3 = *((unsigned int *)SplatValue + 8);
        if (v3 <= 0x40)
        {
          uint64_t v4 = SplatValue[3];
          goto LABEL_5;
        }
        int v9 = 0;
        int64_t v25 = (unint64_t)(v3 + 63) >> 6;
        do
        {
          BOOL v11 = v25-- < 1;
          if (v11) {
            break;
          }
          unint64_t v26 = *(void *)(SplatValue[3] + 8 * v25);
          v9 += __clz(v26);
        }
        while (!v26);
LABEL_18:
        int v13 = v3 | 0xFFFFFFC0;
        if ((v3 & 0x3F) == 0) {
          int v13 = 0;
        }
        BOOL v5 = v9 + v13 == v3;
        goto LABEL_21;
      }
      if (*(unsigned char *)(v6 + 8) == 18)
      {
        int v15 = *(_DWORD *)(v6 + 32);
        if (v15)
        {
          long long v16 = 0;
          char v14 = 0;
          while (1)
          {
            AggregateElement = llvm::Constant::getAggregateElement(a2, v16);
            if (!AggregateElement) {
              break;
            }
            int v18 = *((unsigned __int8 *)AggregateElement + 16);
            if ((v18 - 11) >= 2)
            {
              if (v18 != 16) {
                break;
              }
              uint64_t v19 = *((unsigned int *)AggregateElement + 8);
              if (v19 > 0x40)
              {
                int v20 = 0;
                int64_t v21 = (unint64_t)(v19 + 63) >> 6;
                do
                {
                  BOOL v11 = v21-- < 1;
                  if (v11) {
                    break;
                  }
                  unint64_t v22 = *(void *)(AggregateElement[3] + 8 * v21);
                  v20 += __clz(v22);
                }
                while (!v22);
                int v23 = v19 | 0xFFFFFFC0;
                if ((v19 & 0x3F) == 0) {
                  int v23 = 0;
                }
                if (v20 + v23 != v19) {
                  break;
                }
              }
              else if (AggregateElement[3])
              {
                break;
              }
              char v14 = 1;
            }
            long long v16 = (llvm::Type *)(v16 + 1);
            if (v16 == v15) {
              return v14 & 1;
            }
          }
        }
      }
    }
    char v14 = 0;
    return v14 & 1;
  }
  uint64_t v3 = *((unsigned int *)a2 + 8);
  if (v3 > 0x40)
  {
    int v9 = 0;
    int64_t v10 = (unint64_t)(v3 + 63) >> 6;
    do
    {
      BOOL v11 = v10-- < 1;
      if (v11) {
        break;
      }
      unint64_t v12 = *(void *)(*((void *)a2 + 3) + 8 * v10);
      v9 += __clz(v12);
    }
    while (!v12);
    goto LABEL_18;
  }
  uint64_t v4 = *((void *)a2 + 3);
LABEL_5:
  BOOL v5 = v4 == 0;
LABEL_21:
  char v14 = v5;
  return v14 & 1;
}

uint64_t sub_1CC03F5D4(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v4 = a2[16];
  if (!a2 || v4 != 16)
  {
    uint64_t v9 = *(void *)a2;
    if (*(void *)a2) {
      BOOL v10 = (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 18;
    }
    else {
      BOOL v10 = 0;
    }
    BOOL v11 = !v10 || v4 > 0x14;
    int v12 = v11;
    if (v11) {
      return (v12 ^ 1) & v2;
    }
    SplatValue = (char *)llvm::Constant::getSplatValue((llvm::Constant *)a2, 0);
    if (SplatValue && (char v14 = SplatValue, SplatValue[16] == 16))
    {
      int v15 = (unint64_t **)(SplatValue + 24);
      unsigned int v16 = *((_DWORD *)v14 + 8);
      if (v16 <= 0x40)
      {
        BOOL v17 = *v15 == (unint64_t *)(1 << (v16 - 1));
        goto LABEL_22;
      }
      if (((*v15)[(v16 - 1) >> 6] >> (v16 - 1)))
      {
        BOOL v17 = llvm::APInt::countTrailingZerosSlowCase(v15) == v16 - 1;
LABEL_22:
        int v2 = v17;
        return (v12 ^ 1) & v2;
      }
    }
    else if (*(unsigned char *)(v9 + 8) == 18)
    {
      int v18 = *(_DWORD *)(v9 + 32);
      if (v18)
      {
        uint64_t v19 = 0;
        int v2 = 0;
        while (1)
        {
          AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)a2, v19);
          if (!AggregateElement) {
            break;
          }
          int64_t v21 = AggregateElement;
          int v22 = *((unsigned __int8 *)AggregateElement + 16);
          if ((v22 - 11) >= 2)
          {
            if (v22 != 16) {
              break;
            }
            int v23 = (unint64_t **)(AggregateElement + 3);
            unsigned int v24 = *((_DWORD *)v21 + 8);
            if (v24 > 0x40)
            {
              if ((((*v23)[(v24 - 1) >> 6] >> (v24 - 1)) & 1) == 0
                || llvm::APInt::countTrailingZerosSlowCase(v23) != v24 - 1)
              {
                break;
              }
              int v2 = 1;
            }
            else
            {
              int v2 = 1;
              if (*v23 != (unint64_t *)(1 << (v24 - 1))) {
                break;
              }
            }
          }
          uint64_t v19 = (llvm::Type *)(v19 + 1);
          if (v18 == v19) {
            return (v12 ^ 1) & v2;
          }
        }
      }
    }
    int v2 = 0;
    return (v12 ^ 1) & v2;
  }
  BOOL v5 = (unint64_t **)(a2 + 24);
  unsigned int v6 = *((_DWORD *)a2 + 8);
  if (v6 > 0x40)
  {
    if ((((*v5)[(v6 - 1) >> 6] >> (v6 - 1)) & 1) == 0) {
      return 0;
    }
    return llvm::APInt::countTrailingZerosSlowCase(v5) == v6 - 1;
  }
  else
  {
    return *v5 == (unint64_t *)(1 << (v6 - 1));
  }
}

uint64_t sub_1CC03F7B4(uint64_t a1, unint64_t **a2)
{
  if (a2 && *((unsigned char *)a2 + 16) == 16)
  {
    uint64_t v3 = a2 + 3;
    unsigned int v4 = *((_DWORD *)a2 + 8);
  }
  else
  {
    BOOL v7 = *a2;
    if (*a2) {
      BOOL v8 = ((*a2)[1] & 0xFE) == 18;
    }
    else {
      BOOL v8 = 0;
    }
    if (!v8) {
      goto LABEL_31;
    }
    SplatValue = (char *)llvm::Constant::getSplatValue((llvm::Constant *)a2, 0);
    if (!SplatValue || (BOOL v10 = SplatValue, SplatValue[16] != 16))
    {
      if (*((unsigned char *)v7 + 8) == 18)
      {
        int v11 = *((_DWORD *)v7 + 8);
        if (v11)
        {
          int v12 = 0;
          char v6 = 0;
          while (1)
          {
            AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)a2, v12);
            if (!AggregateElement) {
              break;
            }
            char v14 = AggregateElement;
            int v15 = *((unsigned __int8 *)AggregateElement + 16);
            if ((v15 - 11) >= 2)
            {
              if (v15 != 16) {
                goto LABEL_31;
              }
              unsigned int v16 = (unint64_t **)(AggregateElement + 3);
              unsigned int v17 = *((_DWORD *)v14 + 8);
              if (v17 > 0x40)
              {
                if ((((*v16)[(v17 - 1) >> 6] >> (v17 - 1)) & 1) == 0
                  || llvm::APInt::countTrailingZerosSlowCase(v16) != v17 - 1)
                {
                  goto LABEL_31;
                }
                char v6 = 1;
              }
              else
              {
                char v6 = 1;
                if (*v16 != (unint64_t *)(1 << (v17 - 1))) {
                  goto LABEL_31;
                }
              }
            }
            int v12 = (llvm::Type *)(v12 + 1);
            if (v11 == v12) {
              return v6 & 1;
            }
          }
        }
      }
      goto LABEL_31;
    }
    uint64_t v3 = (unint64_t **)(SplatValue + 24);
    unsigned int v4 = *((_DWORD *)v10 + 8);
  }
  if (v4 <= 0x40)
  {
    BOOL v5 = *v3 == (unint64_t *)(1 << (v4 - 1));
    goto LABEL_6;
  }
  if ((((*v3)[(v4 - 1) >> 6] >> (v4 - 1)) & 1) == 0)
  {
LABEL_31:
    char v6 = 0;
    return v6 & 1;
  }
  BOOL v5 = llvm::APInt::countTrailingZerosSlowCase(v3) == v4 - 1;
LABEL_6:
  char v6 = v5;
  return v6 & 1;
}

uint64_t sub_1CC03F934(void **a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
  unsigned int v4 = v3 - 28;
  BOOL v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  int v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B) {
      unsigned int v4 = *(unsigned __int16 *)(a2 + 18);
    }
    if (v4 == 47
      && ((int v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (uint64_t v9 = *(uint64_t **)(a2 - 8))
        : (uint64_t v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (uint64_t v10 = *v9) != 0))
    {
      **a1 = v10;
      int v2 = 1;
    }
    else
    {
      int v2 = 0;
    }
  }
  return v2 & (v7 ^ 1u);
}

uint64_t sub_1CC03F9A0(uint64_t a1, uint64_t a2, llvm::GlobalValue **a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = *a3;
  uint64_t v11 = *(void *)*a3;
  unsigned int v12 = *(_DWORD *)(v11 + 8);
  if ((v12 & 0xFE) == 0x12) {
    unsigned int v12 = *(_DWORD *)(**(void **)(v11 + 16) + 8);
  }
  if (v12 < 0x100) {
    goto LABEL_12;
  }
  unsigned int v13 = v12 >> 8;
  uint64_t v14 = *(unsigned int *)(a2 + 240);
  uint64_t v15 = *(void *)(a2 + 232);
  if (v14)
  {
    uint64_t v15 = *(void *)(a2 + 232);
    unint64_t v16 = *(unsigned int *)(a2 + 240);
    do
    {
      unint64_t v17 = v16 >> 1;
      uint64_t v18 = v15 + 16 * (v16 >> 1);
      unsigned int v19 = *(_DWORD *)(v18 + 8);
      uint64_t v20 = v18 + 16;
      v16 += ~(v16 >> 1);
      if (v19 < v13) {
        uint64_t v15 = v20;
      }
      else {
        unint64_t v16 = v17;
      }
    }
    while (v16);
  }
  if (v15 == *(void *)(a2 + 232) + 16 * v14 || *(_DWORD *)(v15 + 8) != v13) {
LABEL_12:
  }
    uint64_t v15 = *(void *)(a2 + 232);
  unsigned int v33 = *(_DWORD *)(v15 + 12);
  if (v33 > 0x40) {
    operator new[]();
  }
  uint64_t v32 = 0;
  int64_t v21 = llvm::Value::stripAndAccumulateConstantOffsets(v10, (llvm::DataLayout *)a2, (llvm::APInt *)&v32, a4, 0, 0, a7);
  *a3 = v21;
  unsigned int v22 = *(_DWORD *)(*(void *)v21 + 8);
  if ((v22 & 0xFE) == 0x12) {
    unsigned int v22 = *(_DWORD *)(**(void **)(*(void *)v21 + 16) + 8);
  }
  if (v22 < 0x100) {
    goto LABEL_25;
  }
  unsigned int v23 = v22 >> 8;
  uint64_t v24 = *(unsigned int *)(a2 + 240);
  uint64_t v25 = *(void *)(a2 + 232);
  if (v24)
  {
    uint64_t v25 = *(void *)(a2 + 232);
    unint64_t v26 = *(unsigned int *)(a2 + 240);
    do
    {
      unint64_t v27 = v26 >> 1;
      uint64_t v28 = v25 + 16 * (v26 >> 1);
      unsigned int v29 = *(_DWORD *)(v28 + 8);
      uint64_t v30 = v28 + 16;
      v26 += ~(v26 >> 1);
      if (v29 < v23) {
        uint64_t v25 = v30;
      }
      else {
        unint64_t v26 = v27;
      }
    }
    while (v26);
  }
  if (v25 == *(void *)(a2 + 232) + 16 * v24 || *(_DWORD *)(v25 + 8) != v23) {
LABEL_25:
  }
    uint64_t v25 = *(void *)(a2 + 232);
  uint64_t result = llvm::APInt::sextOrTrunc((uint64_t)&v32, *(_DWORD *)(v25 + 12), a1);
  if (v33 >= 0x41)
  {
    uint64_t result = v32;
    if (v32) {
      return MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
    }
  }
  return result;
}

llvm *sub_1CC03FBD8(int a1, llvm::Constant *a2, llvm::Constant *a3, unsigned int a4, uint64_t a5, int a6)
{
  if (!a6) {
    return 0;
  }
  uint64_t result = sub_1CC0402D0(a1, (uint64_t)a2, a3, a4);
  if (!result)
  {
    return sub_1CC0402D0(a1, (uint64_t)a3, a2, a4);
  }
  return result;
}

llvm *sub_1CC03FC6C(int a1, llvm *a2, llvm::Constant *a3, uint64_t a4, int a5)
{
  v48[8] = *MEMORY[0x1E4F143B8];
  if (!a5) {
    return 0;
  }
  BOOL v6 = a3;
  int v7 = a2;
  if (*((unsigned char *)a2 + 16) == 85) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = a3;
  }
  if (v9 == a2)
  {
    uint64_t v10 = sub_1CC03A350(a1, *((llvm **)a2 - 8), a3);
    unsigned int v13 = (llvm *)*((void *)v7 - 4);
    int v12 = a1;
    uint64_t v11 = v6;
  }
  else
  {
    uint64_t v10 = sub_1CC03A350(a1, a2, *((llvm::Constant **)v9 - 8));
    uint64_t v11 = (llvm::Constant *)*((void *)v9 - 4);
    int v12 = a1;
    unsigned int v13 = v7;
  }
  uint64_t v14 = sub_1CC03A350(v12, v13, v11);
  uint64_t v15 = v14;
  if (v10 == v14) {
    return (llvm *)v10;
  }
  int v16 = *(unsigned __int8 *)(a4 + 41);
  if (v10) {
    BOOL v17 = v16 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
LABEL_16:
    if (!v14) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  unsigned int v18 = (*(unsigned char *)(v10 + 16) - 11);
  if (v18 < 2) {
    return (llvm *)v15;
  }
  if (v18 < 0xFD)
  {
    int v16 = 1;
    goto LABEL_16;
  }
  uint64_t v41 = v45;
  unsigned int v42 = v45;
  uint64_t v43 = 8;
  int v44 = 0;
  unint64_t v46 = v48;
  uint64_t v47 = 0x800000000;
  int v39 = (llvm::SmallPtrSetImplBase *)&v41;
  BOOL v40 = &v46;
  int v30 = sub_1CC04C108(&v39, v10);
  char v31 = 0;
  if (v30)
  {
    while (1)
    {
      BOOL v38 = v47 == 0;
      if (!v47) {
        break;
      }
      uint64_t v35 = *((void *)v46 + v47 - 1);
      LODWORD(v47) = v47 - 1;
      char v36 = sub_1CC04C108(&v39, v35);
      char v31 = v38;
      if ((v36 & 1) == 0) {
        goto LABEL_60;
      }
    }
    char v31 = 1;
  }
LABEL_60:
  if (v46 != v48)
  {
    char v33 = v31;
    free(v46);
    char v31 = v33;
  }
  if (v42 == v41)
  {
    if (v31) {
      return (llvm *)v15;
    }
  }
  else
  {
    char v34 = v31;
    free(v42);
    if (v34) {
      return (llvm *)v15;
    }
  }
  int v16 = *(unsigned __int8 *)(a4 + 41);
  if (!v15) {
    goto LABEL_20;
  }
LABEL_17:
  if (v16)
  {
    unsigned int v19 = (*(unsigned char *)(v15 + 16) - 11);
    if (v19 < 2) {
      return (llvm *)v10;
    }
    if (v19 >= 0xFD)
    {
      uint64_t v41 = v45;
      unsigned int v42 = v45;
      uint64_t v43 = 8;
      int v44 = 0;
      unint64_t v46 = v48;
      uint64_t v47 = 0x800000000;
      int v39 = (llvm::SmallPtrSetImplBase *)&v41;
      BOOL v40 = &v46;
      BOOL v32 = 0;
      if (sub_1CC04C108(&v39, v15))
      {
        do
        {
          BOOL v32 = v47 == 0;
          if (!v47) {
            break;
          }
          uint64_t v37 = *((void *)v46 + v47 - 1);
          LODWORD(v47) = v47 - 1;
        }
        while ((sub_1CC04C108(&v39, v37) & 1) != 0);
      }
      if (v46 != v48) {
        free(v46);
      }
      if (v42 == v41)
      {
        if (v32) {
          return (llvm *)v10;
        }
      }
      else
      {
        free(v42);
        if (v32) {
          return (llvm *)v10;
        }
      }
    }
  }
LABEL_20:
  if (v10 == *((void *)v9 - 8) && v15 == *((void *)v9 - 4)) {
    return v9;
  }
  BOOL v20 = v10 == 0;
  if (v15) {
    BOOL v21 = 1;
  }
  else {
    BOOL v21 = v10 == 0;
  }
  if (!v15) {
    BOOL v20 = 0;
  }
  if (!v20 && v21) {
    return 0;
  }
  if (v15) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v10;
  }
  uint64_t v10 = 0;
  if (v23)
  {
    unsigned int v24 = *(unsigned __int8 *)(v23 + 16);
    if (v24 >= 0x1C && v24 - 28 == a1)
    {
      uint64_t v10 = v23;
      uint64_t v25 = -32;
      if (v15) {
        uint64_t v25 = -64;
      }
      unint64_t v26 = *(llvm **)((char *)v9 + v25);
      if (v9 == v7) {
        int v7 = v26;
      }
      else {
        BOOL v6 = v26;
      }
      int v27 = *(_DWORD *)(v23 + 20);
      if ((v27 & 0x40000000) != 0)
      {
        uint64_t v28 = *(llvm ***)(v23 - 8);
        if (*v28 != v7)
        {
          if ((llvm::Instruction::isCommutative((llvm::Instruction *)v23) & 1) == 0) {
            return 0;
          }
          goto LABEL_56;
        }
      }
      else
      {
        uint64_t v28 = (llvm **)(v23 - 32 * (v27 & 0x7FFFFFF));
        if (*v28 != v7)
        {
          if ((llvm::Instruction::isCommutative((llvm::Instruction *)v23) & 1) == 0) {
            return 0;
          }
          uint64_t v29 = -(uint64_t)(v27 & 0x7FFFFFF);
          goto LABEL_54;
        }
      }
      if (v28[4] == v6) {
        return (llvm *)v10;
      }
      if ((llvm::Instruction::isCommutative((llvm::Instruction *)v23) & 1) == 0) {
        return 0;
      }
      if ((v27 & 0x40000000) != 0)
      {
        uint64_t v28 = *(llvm ***)(v23 - 8);
        goto LABEL_56;
      }
      uint64_t v29 = -(uint64_t)(v27 & 0x7FFFFFF);
LABEL_54:
      uint64_t v28 = (llvm **)(v23 + 32 * v29);
LABEL_56:
      if (v28[4] == v7 && *v28 == v6) {
        return (llvm *)v10;
      }
      return 0;
    }
  }
  return (llvm *)v10;
}

uint64_t sub_1CC040084(int a1, llvm::Value *a2, llvm::Instruction *a3, uint64_t a4, int a5)
{
  if (!a5) {
    return 0;
  }
  int v8 = *(llvm::DominatorTree **)(a4 + 16);
  if (*((unsigned char *)a2 + 16) == 83)
  {
    uint64_t v9 = a2;
    if ((sub_1CC04041C(a3, a2, v8) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t v9 = a3;
    if (!sub_1CC04041C(a2, a3, v8)) {
      return 0;
    }
  }
  int v11 = *((_DWORD *)v9 + 5);
  if ((v11 & 0x40000000) == 0)
  {
    uint64_t v12 = v11 & 0x7FFFFFF;
    unsigned int v13 = (llvm::Constant **)((char *)v9 - 32 * v12);
    if (!v12) {
      return 0;
    }
LABEL_11:
    uint64_t v14 = 0;
    uint64_t v15 = 32 * v12;
    while (1)
    {
      int v16 = *v13;
      if (*v13 == v9)
      {
        uint64_t result = v14;
      }
      else
      {
        if (v9 == a2)
        {
          BOOL v17 = *v13;
          int v16 = a3;
        }
        else
        {
          BOOL v17 = a2;
        }
        uint64_t result = sub_1CC03A350(a1, v17, v16);
        if (!result) {
          return result;
        }
        if (v14 && result != v14) {
          return 0;
        }
      }
      v13 += 4;
      uint64_t v14 = result;
      v15 -= 32;
      if (!v15) {
        return result;
      }
    }
  }
  unsigned int v13 = (llvm::Constant **)*((void *)v9 - 1);
  uint64_t v12 = v11 & 0x7FFFFFF;
  if (v12) {
    goto LABEL_11;
  }
  return 0;
}

BOOL sub_1CC0401B4(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 < 0x1C)
  {
    if (v2 != 5) {
      return 0;
    }
    unsigned int v6 = *(unsigned __int16 *)(a2 + 18);
    BOOL v3 = v6 > 0x1B;
    int v7 = (1 << v6) & 0xC180000;
    if (v3 || v7 == 0) {
      return 0;
    }
  }
  else
  {
    BOOL v3 = v2 > 0x37;
    uint64_t v4 = (1 << v2) & 0xC1800000000000;
    if (v3 || v4 == 0) {
      return 0;
    }
  }
  if ((*(unsigned char *)(a2 + 17) & 2) == 0) {
    return 0;
  }
  return sub_1CC04021C(a1, a2);
}

BOOL sub_1CC04021C(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  if (!a2 || v2 < 0x1C)
  {
    if (v2 == 5 && *(unsigned __int16 *)(a2 + 18) - 19 <= 1)
    {
      uint64_t v5 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      if (v5)
      {
        **(void **)a1 = v5;
        int v6 = *(_DWORD *)(a2 + 20);
        goto LABEL_13;
      }
    }
    return 0;
  }
  if (v2 - 47 > 1) {
    return 0;
  }
  int v3 = *(_DWORD *)(a2 + 20);
  uint64_t v4 = (v3 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v3 & 0x7FFFFFF));
  uint64_t v7 = *v4;
  if (!v7) {
    return 0;
  }
  **(void **)a1 = v7;
  int v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0)
  {
    uint64_t v8 = *(void *)(a2 - 8);
    return *(void *)(a1 + 8) == *(void *)(v8 + 32);
  }
LABEL_13:
  uint64_t v8 = a2 - 32 * (v6 & 0x7FFFFFF);
  return *(void *)(a1 + 8) == *(void *)(v8 + 32);
}

llvm *sub_1CC0402D0(int a1, uint64_t a2, llvm::Constant *a3, unsigned int a4)
{
  uint64_t result = 0;
  if (a2)
  {
    unsigned int v8 = *(unsigned __int8 *)(a2 + 16);
    BOOL v9 = v8 >= 0x1C && v8 - 59 >= 0xFFFFFFEE;
    if (v9 && v8 - 28 == a4)
    {
      uint64_t v12 = *(llvm **)(a2 - 64);
      unsigned int v13 = *(llvm **)(a2 - 32);
      uint64_t result = (llvm *)sub_1CC03A350(a1, v12, a3);
      if (result)
      {
        uint64_t v14 = result;
        uint64_t result = (llvm *)sub_1CC03A350(a1, v13, a3);
        if (result)
        {
          uint64_t v15 = result;
          if (v14 == v12 && result == v13)
          {
            return (llvm *)a2;
          }
          else
          {
            if (a4 > 0x1E) {
              return (llvm *)sub_1CC03A350(a4, v14, v15);
            }
            if (((1 << a4) & 0x70066000) == 0) {
              return (llvm *)sub_1CC03A350(a4, v14, v15);
            }
            if (v14 != v13) {
              return (llvm *)sub_1CC03A350(a4, v14, v15);
            }
            uint64_t result = (llvm *)a2;
            if (v15 != v12) {
              return (llvm *)sub_1CC03A350(a4, v14, v15);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC04041C(llvm::Value *a1, llvm::Instruction *a2, llvm::DominatorTree *this)
{
  uint64_t result = 1;
  if (a1)
  {
    unsigned int v6 = *((unsigned __int8 *)a1 + 16);
    if (v6 >= 0x1C)
    {
      uint64_t v7 = *((void *)a1 + 5);
      if (!v7) {
        return 0;
      }
      if (!*((void *)a2 + 5)) {
        return 0;
      }
      uint64_t v8 = *(void *)(v7 + 56);
      if (!v8) {
        return 0;
      }
      if (this) {
        return llvm::DominatorTree::dominates(this, a1, a2);
      }
      uint64_t v9 = *(void *)(v8 + 80);
      uint64_t v10 = v9 ? v9 - 24 : 0;
      return v10 == v7 && v6 != 33 && v6 != 39;
    }
  }
  return result;
}

llvm::Value *sub_1CC040494(llvm *a1, unsigned __int8 *a2, llvm::Constant *a3, llvm::Constant **a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  int v6 = (int)a5;
  int v8 = (int)a1;
  int v27 = a3;
  uint64_t v28 = (llvm::Type *)a2;
  uint64_t result = sub_1CC03F174(a1, (unsigned __int8 **)&v28, &v27, *a4, a5, a6);
  if (result) {
    return result;
  }
  int v11 = v27;
  uint64_t v10 = (unsigned __int8 *)v28;
  uint64_t result = sub_1CC040720(v8, v28, (uint64_t)v27, (uint64_t)a4);
  if (result) {
    return result;
  }
  int v14 = v10[16];
  if (v8 != 20)
  {
    switch(v14)
    {
      case 5:
        int v17 = *((unsigned __int16 *)v10 + 9);
        if (v17 != 22) {
          goto LABEL_21;
        }
        int v16 = &v10[-32 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF) + 32];
        break;
      case 47:
        uint64_t v18 = *((void *)v10 - 4);
        if (v18) {
          BOOL v21 = *(unsigned char *)(v18 + 16) == 16;
        }
        else {
          BOOL v21 = 0;
        }
        if (!v21)
        {
          int v14 = 47;
          goto LABEL_43;
        }
        goto LABEL_35;
      case 50:
        int v16 = v10 - 32;
        break;
      default:
        goto LABEL_42;
    }
    if (v11 == *(llvm::Constant **)v16)
    {
LABEL_27:
      BOOL v20 = *(llvm::Constant **)v10;
      return llvm::Constant::getNullValue(v20, v12, v13);
    }
    if (v14 != 5)
    {
LABEL_43:
      if (*((unsigned char *)v11 + 16) != 85) {
        goto LABEL_46;
      }
      goto LABEL_44;
    }
    int v17 = *((unsigned __int16 *)v10 + 9);
LABEL_21:
    if (v17 != 19) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)&v10[-32 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF) + 32];
    if (!v18 || *(unsigned char *)(v18 + 16) != 16) {
      goto LABEL_26;
    }
LABEL_35:
    if (!v11 || *((unsigned char *)v11 + 16) != 16) {
      goto LABEL_43;
    }
    BOOL v26 = 0;
    llvm::APInt::umul_ov((llvm::APInt *)(v18 + 24), (llvm::Constant *)((char *)v11 + 24), &v26, (uint64_t)&v24);
    if (v25 >= 0x41 && v24) {
      MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
    }
    if (v26) {
      return llvm::Constant::getNullValue(*(llvm::Constant **)v10, v22, v23);
    }
    int v14 = v10[16];
    goto LABEL_42;
  }
  if (v14 == 5)
  {
    if (*((_WORD *)v10 + 9) == 23)
    {
      uint64_t v15 = &v10[-32 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF) + 32];
LABEL_14:
      if (v11 == *(llvm::Constant **)v15) {
        goto LABEL_27;
      }
      goto LABEL_43;
    }
LABEL_26:
    int v14 = 5;
    goto LABEL_43;
  }
  if (v14 == 51)
  {
    uint64_t v15 = v10 - 32;
    goto LABEL_14;
  }
LABEL_42:
  if (v14 != 85) {
    goto LABEL_43;
  }
LABEL_44:
  uint64_t result = sub_1CC03FC6C(v8, (llvm *)v10, v11, (uint64_t)a4, v6);
  if (result) {
    return result;
  }
  int v14 = v10[16];
LABEL_46:
  if (v14 != 83 && *((unsigned char *)v11 + 16) != 83
    || (uint64_t result = (llvm::Value *)sub_1CC040084(v8, (llvm::Value *)v10, v11, (uint64_t)a4, v6)) == 0)
  {
    if (!sub_1CC040F0C((uint64_t)v10, (unsigned __int8 *)v11, (uint64_t)a4, v6, v8 == 20)) {
      return 0;
    }
    return llvm::Constant::getNullValue(*(llvm::Constant **)v10, v22, v23);
  }
  return result;
}

llvm::Value *sub_1CC040720(int a1, llvm::Type *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t)a2;
  v70[8] = *MEMORY[0x1E4F143B8];
  int v8 = *(llvm::Constant **)a2;
  if (*(unsigned char *)(a4 + 41))
  {
    unsigned int v9 = (*(unsigned char *)(a3 + 16) - 11);
    if (v9 < 2) {
      return (llvm::Value *)llvm::PoisonValue::get(v8, a2);
    }
    if (v9 >= 0xFD)
    {
      unsigned int v63 = v67;
      uint64_t v64 = v67;
      uint64_t v65 = 8;
      int v66 = 0;
      uint64_t v68 = v70;
      uint64_t v69 = 0x800000000;
      uint64_t v61 = (llvm::SmallPtrSetImplBase *)&v63;
      unsigned int v62 = &v68;
      BOOL v44 = 0;
      if (sub_1CC04C108(&v61, a3))
      {
        do
        {
          BOOL v44 = v69 == 0;
          if (!v69) {
            break;
          }
          uint64_t v59 = *((void *)v68 + v69 - 1);
          LODWORD(v69) = v69 - 1;
        }
        while ((sub_1CC04C108(&v61, v59) & 1) != 0);
      }
      if (v68 != v70) {
        free(v68);
      }
      if (v64 == v63)
      {
        if (v44) {
          return (llvm::Value *)llvm::PoisonValue::get(v8, a2);
        }
      }
      else
      {
        free(v64);
        if (v44) {
          return (llvm::Value *)llvm::PoisonValue::get(v8, a2);
        }
      }
    }
  }
  unsigned int v10 = *(unsigned __int8 *)(a3 + 16);
  if (v10 == 12) {
    return (llvm::Value *)llvm::PoisonValue::get(v8, a2);
  }
  if (v10 <= 0x14)
  {
    if (v10 == 16)
    {
      uint64_t v13 = *(unsigned int *)(a3 + 32);
      if (v13 >= 0x41)
      {
        int v51 = 0;
        int64_t v52 = (unint64_t)(v13 + 63) >> 6;
        do
        {
          BOOL v29 = v52-- < 1;
          if (v29) {
            break;
          }
          unint64_t v53 = *(void *)(*(void *)(a3 + 24) + 8 * v52);
          v51 += __clz(v53);
        }
        while (!v53);
        int v54 = v13 | 0xFFFFFFC0;
        if ((v13 & 0x3F) == 0) {
          int v54 = 0;
        }
        if (v51 + v54 == v13) {
          return (llvm::Value *)llvm::PoisonValue::get(v8, a2);
        }
      }
      else if (!*(void *)(a3 + 24))
      {
        return (llvm::Value *)llvm::PoisonValue::get(v8, a2);
      }
    }
    else if (v10 == 17)
    {
      if (sub_1CB844168(a3, 0.0)) {
        return (llvm::Value *)llvm::PoisonValue::get(v8, a2);
      }
    }
    else if (v10 - 18 < 3 || v10 == 13)
    {
      return (llvm::Value *)llvm::PoisonValue::get(v8, a2);
    }
    if (sub_1CC03F414((uint64_t)&v63, (llvm::Constant *)a3)) {
      return (llvm::Value *)llvm::PoisonValue::get(v8, a2);
    }
    unsigned int v10 = *(unsigned __int8 *)(a3 + 16);
  }
  if (v10 >= 0x15) {
    int v14 = 0;
  }
  else {
    int v14 = (llvm::Constant *)a3;
  }
  if (*((unsigned char *)v8 + 8) == 18) {
    uint64_t v15 = v8;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v14) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    int v17 = *((_DWORD *)v15 + 8);
    if (v17)
    {
      uint64_t v18 = 0;
      do
      {
        AggregateElement = llvm::Constant::getAggregateElement(v14, v18);
        if (AggregateElement)
        {
          uint64_t v20 = (uint64_t)AggregateElement;
          int v21 = *((unsigned __int8 *)AggregateElement + 16);
          if (v21 == 16)
          {
            uint64_t v22 = *((unsigned int *)AggregateElement + 8);
            if (v22 >= 0x41)
            {
              int v27 = 0;
              int64_t v28 = (unint64_t)(v22 + 63) >> 6;
              do
              {
                BOOL v29 = v28-- < 1;
                if (v29) {
                  break;
                }
                unint64_t v30 = *(void *)(AggregateElement[3] + 8 * v28);
                v27 += __clz(v30);
              }
              while (!v30);
              int v31 = v22 | 0xFFFFFFC0;
              if ((v22 & 0x3F) == 0) {
                int v31 = 0;
              }
              if (v27 + v31 == v22) {
                return (llvm::Value *)llvm::PoisonValue::get(v8, a2);
              }
            }
            else if (!AggregateElement[3])
            {
              return (llvm::Value *)llvm::PoisonValue::get(v8, a2);
            }
          }
          else if (v21 == 17)
          {
            if (sub_1CB844168((uint64_t)AggregateElement, 0.0)) {
              return (llvm::Value *)llvm::PoisonValue::get(v8, a2);
            }
          }
          else if ((v21 - 18) < 3 || v21 == 13)
          {
            return (llvm::Value *)llvm::PoisonValue::get(v8, a2);
          }
          if (*(unsigned char *)(a4 + 41))
          {
            unsigned int v23 = (*(unsigned char *)(v20 + 16) - 11);
            if (v23 < 2) {
              return (llvm::Value *)llvm::PoisonValue::get(v8, a2);
            }
            if (v23 >= 0xFD)
            {
              unsigned int v63 = v67;
              uint64_t v64 = v67;
              uint64_t v65 = 8;
              int v66 = 0;
              uint64_t v68 = v70;
              uint64_t v69 = 0x800000000;
              uint64_t v61 = (llvm::SmallPtrSetImplBase *)&v63;
              unsigned int v62 = &v68;
              int v25 = sub_1CC04C108(&v61, v20);
              BOOL v26 = 0;
              if (v25)
              {
                do
                {
                  BOOL v26 = v69 == 0;
                  if (!v69) {
                    break;
                  }
                  uint64_t v32 = *((void *)v68 + v69 - 1);
                  LODWORD(v69) = v69 - 1;
                }
                while ((sub_1CC04C108(&v61, v32) & 1) != 0);
              }
              if (v68 != v70) {
                free(v68);
              }
              if (v64 == v63)
              {
                if (v26) {
                  return (llvm::Value *)llvm::PoisonValue::get(v8, a2);
                }
              }
              else
              {
                free(v64);
                if (v26) {
                  return (llvm::Value *)llvm::PoisonValue::get(v8, a2);
                }
              }
            }
          }
        }
        uint64_t v18 = (llvm::Type *)(v18 + 1);
      }
      while (v18 != v17);
    }
  }
  unsigned int v33 = *(unsigned __int8 *)(v6 + 16);
  if (v33 != 12)
  {
    if (*(unsigned char *)(a4 + 41))
    {
      unsigned int v34 = (v33 - 11);
      if (v34 < 2)
      {
LABEL_145:
        char v36 = v8;
        return llvm::Constant::getNullValue(v36, a2, (const llvm::APFloat *)a3);
      }
      if (v34 >= 0xFD)
      {
        unsigned int v63 = v67;
        uint64_t v64 = v67;
        uint64_t v65 = 8;
        int v66 = 0;
        uint64_t v68 = v70;
        uint64_t v69 = 0x800000000;
        uint64_t v61 = (llvm::SmallPtrSetImplBase *)&v63;
        unsigned int v62 = &v68;
        BOOL v50 = 0;
        if (sub_1CC04C108(&v61, v6))
        {
          do
          {
            BOOL v50 = v69 == 0;
            if (!v69) {
              break;
            }
            uint64_t v60 = *((void *)v68 + v69 - 1);
            LODWORD(v69) = v69 - 1;
          }
          while ((sub_1CC04C108(&v61, v60) & 1) != 0);
        }
        if (v68 != v70) {
          free(v68);
        }
        if (v64 == v63)
        {
          if (v50) {
            goto LABEL_145;
          }
        }
        else
        {
          free(v64);
          if (v50) {
            goto LABEL_145;
          }
        }
        unsigned int v33 = *(unsigned __int8 *)(v6 + 16);
      }
    }
    if (v33 <= 0x14)
    {
      if (v33 == 16)
      {
        uint64_t v35 = *(unsigned int *)(v6 + 32);
        if (v35 >= 0x41)
        {
          int v55 = 0;
          int64_t v56 = (unint64_t)(v35 + 63) >> 6;
          do
          {
            BOOL v29 = v56-- < 1;
            if (v29) {
              break;
            }
            unint64_t v57 = *(void *)(*(void *)(v6 + 24) + 8 * v56);
            v55 += __clz(v57);
          }
          while (!v57);
          int v58 = v35 | 0xFFFFFFC0;
          if ((v35 & 0x3F) == 0) {
            int v58 = 0;
          }
          if (v55 + v58 == v35) {
            goto LABEL_71;
          }
        }
        else if (!*(void *)(v6 + 24))
        {
LABEL_71:
          char v36 = *(llvm::Constant **)v6;
          return llvm::Constant::getNullValue(v36, a2, (const llvm::APFloat *)a3);
        }
      }
      else if (v33 == 17)
      {
        if (sub_1CB844168(v6, 0.0)) {
          goto LABEL_71;
        }
      }
      else if (v33 - 18 < 3 || v33 == 13)
      {
        goto LABEL_71;
      }
      if (sub_1CC03F414((uint64_t)&v63, (llvm::Constant *)v6)) {
        goto LABEL_71;
      }
    }
    unsigned int v37 = a1 - 19;
    if (v6 == a3)
    {
      if (v37 <= 1) {
        return (llvm::Value *)llvm::ConstantInt::get(v8, 1uLL, 0);
      }
      goto LABEL_145;
    }
    unsigned int v63 = 0;
    if (sub_1CBF5250C((uint64_t)&v61, (llvm::Constant *)a3)) {
      goto LABEL_77;
    }
    int v38 = *((_DWORD *)v8 + 2);
    if ((v38 & 0xFE) == 0x12) {
      int v38 = *(_DWORD *)(**((void **)v8 + 2) + 8);
    }
    if (v38 == 269) {
      goto LABEL_77;
    }
    uint64_t v68 = &v63;
    if (sub_1CBC5BE40((void **)&v68, a3))
    {
      int v39 = *(_DWORD *)(*(void *)v63 + 8);
      if ((v39 & 0xFE) == 0x12) {
        int v39 = *(_DWORD *)(**(void **)(*(void *)v63 + 16) + 8);
      }
      if (v39 == 269)
      {
LABEL_77:
        uint64_t v11 = v6;
        if (v37 < 2) {
          return (llvm::Value *)v11;
        }
        goto LABEL_145;
      }
    }
    int v40 = *(unsigned __int8 *)(v6 + 16);
    if (v40 == 5)
    {
      if (*(_WORD *)(v6 + 18) != 17) {
        return 0;
      }
      uint64_t v43 = (void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
      uint64_t v41 = (unsigned char *)*v43;
      if (!*v43)
      {
        unsigned int v42 = (unsigned char *)v43[4];
        goto LABEL_114;
      }
      unsigned int v63 = (unsigned char *)*v43;
      unsigned int v42 = (unsigned char *)v43[4];
    }
    else
    {
      if (v40 != 45) {
        return 0;
      }
      uint64_t v41 = *(unsigned char **)(v6 - 64);
      if (!v41)
      {
        unsigned int v42 = *(unsigned char **)(v6 - 32);
        goto LABEL_114;
      }
      unsigned int v63 = *(unsigned char **)(v6 - 64);
      unsigned int v42 = *(unsigned char **)(v6 - 32);
    }
    if (v42 == (unsigned char *)a3)
    {
LABEL_117:
      if (a1 == 20 || a1 == 23)
      {
        if (!*(unsigned char *)(a4 + 40) || (*(unsigned char *)(v6 + 17) & 4) == 0)
        {
          int v45 = v41[16];
          if (v45 == 5)
          {
            if (*((_WORD *)v41 + 9) == 20)
            {
              unint64_t v46 = &v41[-32 * (*((_DWORD *)v41 + 5) & 0x7FFFFFF) + 32];
LABEL_130:
              if (*v46 != a3) {
                return 0;
              }
              goto LABEL_135;
            }
          }
          else if (v45 == 48)
          {
            unint64_t v46 = v41 - 32;
            goto LABEL_130;
          }
          return 0;
        }
LABEL_135:
        uint64_t v11 = (uint64_t)v41;
        if (v37 < 2) {
          return (llvm::Value *)v11;
        }
        goto LABEL_144;
      }
      if (*(unsigned char *)(a4 + 40) && (*(unsigned char *)(v6 + 17) & 2) != 0) {
        goto LABEL_135;
      }
      int v47 = v41[16];
      if (v47 == 5)
      {
        if (*((_WORD *)v41 + 9) == 19)
        {
          int v48 = (uint64_t *)&v41[-32 * (*((_DWORD *)v41 + 5) & 0x7FFFFFF) + 32];
LABEL_139:
          uint64_t v49 = *v48;
          if (v49 == a3) {
            uint64_t v11 = (uint64_t)v41;
          }
          else {
            uint64_t v11 = 0;
          }
          if (v37 < 2 || v49 != a3) {
            return (llvm::Value *)v11;
          }
LABEL_144:
          int v8 = *(llvm::Constant **)v6;
          goto LABEL_145;
        }
      }
      else if (v47 == 47)
      {
        int v48 = (uint64_t *)(v41 - 32);
        goto LABEL_139;
      }
      return 0;
    }
LABEL_114:
    if (!v42) {
      return 0;
    }
    unsigned int v63 = v42;
    BOOL v16 = v41 == (unsigned char *)a3;
    uint64_t v41 = v42;
    if (!v16) {
      return 0;
    }
    goto LABEL_117;
  }
  return (llvm::Value *)v6;
}

uint64_t sub_1CC040F0C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4, int a5)
{
  if (!a4) {
    return 0;
  }
  int v8 = (llvm::SmallPtrSetImplBase *)(a4 - 1);
  if (!a5)
  {
    v39[1] = 0;
    int v40 = 0;
    v39[0] = &v40;
    if ((sub_1CBF528D8((uint64_t)v39, a2) & 1) == 0) {
      goto LABEL_46;
    }
    uint64_t v23 = *(void *)(a3 + 24);
    uint64_t v24 = *(void *)(a3 + 32);
    uint64_t v25 = *(void *)(a3 + 16);
    if (!v24 || !*(void *)(v24 + 40))
    {
      if (!a1 || *(unsigned __int8 *)(a1 + 16) < 0x1Cu || (uint64_t v24 = a1, !*(void *)(a1 + 40))) {
        uint64_t v24 = 0;
      }
    }
    p_src = *(void ***)a3;
    uint64_t v46 = v23;
    uint64_t v47 = v24;
    uint64_t v48 = v25;
    uint64_t v49 = 0;
    char v50 = 1;
    sub_1CC16089C((uint64_t *)a1, 0, (const llvm::DataLayout **)&p_src, (uint64_t)&__src);
    LODWORD(v46) = v36;
    if (v36 > 0x40) {
      operator new[]();
    }
    if (v36) {
      unint64_t v26 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v36;
    }
    else {
      unint64_t v26 = 0;
    }
    BOOL v27 = (v26 & ~(unint64_t)__src) < *v40;
    if (v38 >= 0x41 && v37) {
      MEMORY[0x1D25D9CB0](v37, 0x1000C8000313F17);
    }
    if (v36 >= 0x41 && __src) {
      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
    if (!v27)
    {
LABEL_46:
      uint64_t v22 = 36;
      goto LABEL_47;
    }
    return 1;
  }
  uint64_t v9 = *(void *)a1;
  long long __src = 0;
  p_src = &__src;
  uint64_t v46 = 0;
  if (sub_1CBF528D8((uint64_t)&p_src, (unsigned __int8 *)a1))
  {
    unsigned int v10 = (const llvm::APInt *)__src;
    unsigned int v11 = *((_DWORD *)__src + 2);
    if (v11 > 0x40)
    {
      if (((*(void *)(*(void *)__src + 8 * ((v11 - 1) >> 6)) >> (v11 - 1)) & 1) != 0
        && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)__src) == v11 - 1)
      {
        goto LABEL_30;
      }
    }
    else if (*(void *)__src == 1 << (v11 - 1))
    {
      goto LABEL_30;
    }
    sub_1CBF71A98(v10, (llvm::APInt *)&p_src);
    uint64_t Splat = (unsigned __int8 *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v9, (llvm::LLVMContext *)&p_src, v12);
    if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12) {
      uint64_t Splat = (unsigned __int8 *)llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v9 + 32) | ((unint64_t)(*(_DWORD *)(v9 + 8) == 19) << 32)), (uint64_t)Splat);
    }
    if (v46 >= 0x41 && p_src) {
      MEMORY[0x1D25D9CB0](p_src, 0x1000C8000313F17);
    }
    sub_1CBF71A98((const llvm::APInt *)__src, (llvm::APInt *)&v43);
    if (v44 > 0x40)
    {
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v43);
    }
    else
    {
      if (v44) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v44;
      }
      else {
        unint64_t v14 = 0;
      }
      unint64_t v43 = v14 & ~v43;
    }
    llvm::APInt::operator++((uint64_t)&v43);
    LODWORD(v46) = v44;
    p_src = (void **)v43;
    unsigned int v44 = 0;
    BOOL v16 = (unsigned __int8 *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v9, (llvm::LLVMContext *)&p_src, v15);
    if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12) {
      BOOL v16 = (unsigned __int8 *)llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v9 + 32) | ((unint64_t)(*(_DWORD *)(v9 + 8) == 19) << 32)), (uint64_t)v16);
    }
    if (v46 >= 0x41 && p_src) {
      MEMORY[0x1D25D9CB0](p_src, 0x1000C8000313F17);
    }
    if (v44 >= 0x41 && v43) {
      MEMORY[0x1D25D9CB0](v43, 0x1000C8000313F17);
    }
    int v17 = (unsigned __int8 *)sub_1CC02F0F0(40, a2, v16, a3, v8);
    if (v17 && v17[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)v17)) {
      return 1;
    }
    uint64_t v18 = (unsigned __int8 *)sub_1CC02F0F0(38, a2, Splat, a3, v8);
    if (v18)
    {
      if (v18[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)v18)) {
        return 1;
      }
    }
  }
LABEL_30:
  p_src = &__src;
  uint64_t v46 = 0;
  uint64_t result = sub_1CBF528D8((uint64_t)&p_src, a2);
  if (!result) {
    return result;
  }
  uint64_t v20 = (const llvm::APInt *)__src;
  unsigned int v21 = *((_DWORD *)__src + 2);
  if (v21 > 0x40)
  {
    if (((*(void *)(*(void *)__src + 8 * ((v21 - 1) >> 6)) >> (v21 - 1)) & 1) != 0
      && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)__src) == v21 - 1)
    {
      goto LABEL_33;
    }
    goto LABEL_64;
  }
  if (*(void *)__src != 1 << (v21 - 1))
  {
LABEL_64:
    sub_1CBF71A98(v20, (llvm::APInt *)&p_src);
    BOOL v29 = (unsigned __int8 *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v9, (llvm::LLVMContext *)&p_src, v28);
    if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12) {
      BOOL v29 = (unsigned __int8 *)llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v9 + 32) | ((unint64_t)(*(_DWORD *)(v9 + 8) == 19) << 32)), (uint64_t)v29);
    }
    if (v46 >= 0x41 && p_src) {
      MEMORY[0x1D25D9CB0](p_src, 0x1000C8000313F17);
    }
    sub_1CBF71A98((const llvm::APInt *)__src, (llvm::APInt *)&v41);
    if (v42 > 0x40)
    {
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v41);
    }
    else
    {
      if (v42) {
        unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v42;
      }
      else {
        unint64_t v30 = 0;
      }
      unint64_t v41 = v30 & ~v41;
    }
    llvm::APInt::operator++((uint64_t)&v41);
    LODWORD(v46) = v42;
    p_src = (void **)v41;
    unsigned int v42 = 0;
    uint64_t v32 = (unsigned __int8 *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v9, (llvm::LLVMContext *)&p_src, v31);
    if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12) {
      uint64_t v32 = (unsigned __int8 *)llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v9 + 32) | ((unint64_t)(*(_DWORD *)(v9 + 8) == 19) << 32)), (uint64_t)v32);
    }
    if (v46 >= 0x41 && p_src) {
      MEMORY[0x1D25D9CB0](p_src, 0x1000C8000313F17);
    }
    if (v42 >= 0x41 && v41) {
      MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
    }
    unsigned int v33 = (unsigned __int8 *)sub_1CC02F0F0(38, (unsigned __int8 *)a1, v32, a3, v8);
    if (!v33) {
      return 0;
    }
    if (v33[16] > 0x14u) {
      return 0;
    }
    if (!llvm::Constant::isAllOnesValue((llvm::Constant *)v33)) {
      return 0;
    }
    unsigned int v34 = (unsigned __int8 *)sub_1CC02F0F0(40, (unsigned __int8 *)a1, v29, a3, v8);
    return v34 && v34[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)v34);
  }
LABEL_33:
  uint64_t v22 = 33;
LABEL_47:
  uint64_t result = (uint64_t)sub_1CC02F0F0(v22, (unsigned __int8 *)a1, a2, a3, v8);
  if (!result) {
    return result;
  }
  if (*(unsigned __int8 *)(result + 16) <= 0x14u) {
    return llvm::Constant::isAllOnesValue((llvm::Constant *)result);
  }
  return 0;
}

llvm::Value *sub_1CC0415F8(llvm *a1, unsigned __int8 *a2, llvm::Constant *a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  int v6 = (int)a5;
  int v8 = (int)a1;
  int v40 = a3;
  unint64_t v41 = (llvm::Type *)a2;
  uint64_t result = sub_1CC03F174(a1, (unsigned __int8 **)&v41, &v40, *(llvm::Constant **)a4, a5, a6);
  if (result) {
    return result;
  }
  unsigned int v11 = (unsigned __int8 *)v40;
  unsigned int v10 = (unsigned __int8 *)v41;
  uint64_t result = sub_1CC040720(v8, v41, (uint64_t)v40, a4);
  if (result) {
    return result;
  }
  if (v8 == 23)
  {
    unsigned int v14 = v10[16];
    if (v14 != 5)
    {
      if (v14 != 51)
      {
LABEL_15:
        if (!*(unsigned char *)(a4 + 40)) {
          goto LABEL_58;
        }
        if (v14 >= 0x1C)
        {
          HIDWORD(v19) = v14 - 41;
          LODWORD(v19) = v14 - 41;
          unsigned int v18 = v19 >> 1;
          BOOL v20 = v18 > 6;
          int v21 = (1 << v18) & 0x47;
          if (!v20 && v21 != 0)
          {
            unsigned int v17 = v14 - 28;
            goto LABEL_40;
          }
LABEL_58:
          unsigned int v38 = v10 + 16;
          if (v14 == 85) {
            goto LABEL_60;
          }
          goto LABEL_59;
        }
        if (v14 != 5)
        {
LABEL_55:
          unsigned int v38 = v10 + 16;
LABEL_59:
          if (v11[16] != 85)
          {
LABEL_62:
            if (v14 != 83 && v11[16] != 83
              || (uint64_t result = (llvm::Value *)sub_1CC040084(v8, (llvm::Value *)v10, (llvm::Instruction *)v11, a4, v6)) == 0)
            {
              if (sub_1CC040F0C((uint64_t)v10, v11, a4, v6, v8 == 23)) {
                return (llvm::Value *)v10;
              }
              else {
                return 0;
              }
            }
            return result;
          }
LABEL_60:
          uint64_t result = sub_1CC03FC6C(v8, (llvm *)v10, (llvm::Constant *)v11, a4, v6);
          if (result) {
            return result;
          }
          unsigned int v14 = *v38;
          goto LABEL_62;
        }
        unsigned int v17 = *((unsigned __int16 *)v10 + 9);
        goto LABEL_36;
      }
      uint64_t v15 = v10 - 32;
      goto LABEL_14;
    }
    unsigned int v17 = *((unsigned __int16 *)v10 + 9);
    if (v17 == 23)
    {
      uint64_t v15 = &v10[-32 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF) + 32];
LABEL_14:
      if (v11 != *(unsigned __int8 **)v15) {
        goto LABEL_15;
      }
      return (llvm::Value *)v10;
    }
    if (*(unsigned char *)(a4 + 40))
    {
LABEL_36:
      HIDWORD(v29) = v17 - 13;
      LODWORD(v29) = v17 - 13;
      unsigned int v28 = v29 >> 1;
      BOOL v20 = v28 > 6;
      int v30 = (1 << v28) & 0x47;
      if (!v20 && v30 != 0)
      {
LABEL_40:
        if (v17 != 25 || (v10[17] & 4) == 0) {
          goto LABEL_58;
        }
        goto LABEL_52;
      }
    }
LABEL_54:
    unsigned int v14 = 5;
    goto LABEL_55;
  }
  unsigned int v14 = v10[16];
  if (v8 != 22) {
    goto LABEL_58;
  }
  if (v14 == 5)
  {
    if (*((_WORD *)v10 + 9) != 22)
    {
      if (!*(unsigned char *)(a4 + 40)) {
        goto LABEL_54;
      }
      goto LABEL_46;
    }
    BOOL v16 = &v10[-32 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF) + 32];
    goto LABEL_26;
  }
  if (v14 == 50)
  {
    BOOL v16 = v10 - 32;
LABEL_26:
    if (v11 == *(unsigned __int8 **)v16) {
      return (llvm::Value *)v10;
    }
  }
  if (!*(unsigned char *)(a4 + 40)) {
    goto LABEL_58;
  }
  if (v14 >= 0x1C)
  {
    HIDWORD(v24) = v14 - 41;
    LODWORD(v24) = v14 - 41;
    unsigned int v23 = v24 >> 1;
    BOOL v20 = v23 > 6;
    int v25 = (1 << v23) & 0x47;
    if (v20 || v25 == 0) {
      goto LABEL_58;
    }
    unsigned int v27 = v14 - 28;
    goto LABEL_50;
  }
  if (v14 != 5) {
    goto LABEL_55;
  }
LABEL_46:
  unsigned int v27 = *((unsigned __int16 *)v10 + 9);
  HIDWORD(v33) = v27 - 13;
  LODWORD(v33) = v27 - 13;
  unsigned int v32 = v33 >> 1;
  BOOL v20 = v32 > 6;
  int v34 = (1 << v32) & 0x47;
  if (v20 || v34 == 0) {
    goto LABEL_54;
  }
LABEL_50:
  if (v27 != 25 || (v10[17] & 2) == 0) {
    goto LABEL_58;
  }
LABEL_52:
  int v36 = *((_DWORD *)v10 + 5);
  if ((v36 & 0x40000000) != 0) {
    uint64_t v37 = (unsigned __int8 **)*((void *)v10 - 1);
  }
  else {
    uint64_t v37 = (unsigned __int8 **)&v10[-32 * (v36 & 0x7FFFFFF)];
  }
  if (*v37 != v11) {
    goto LABEL_58;
  }
  int v39 = *(llvm::Constant **)v10;

  return llvm::Constant::getNullValue(v39, v12, v13);
}

llvm::Value *sub_1CC04190C(llvm *a1, unsigned __int8 *a2, llvm::Constant *a3, int a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  int v6 = (int)a6;
  int v9 = (int)a1;
  uint64_t v70 = a3;
  unsigned int v71 = a2;
  uint64_t v12 = sub_1CC03F174(a1, &v71, &v70, *(llvm::Constant **)a5, (const llvm::DataLayout *)a5, a6);
  if (!v12)
  {
    uint64_t v12 = (const llvm::detail::DoubleAPFloat *)v71;
    unsigned int v13 = v71[16];
    if (v13 != 12)
    {
      if (v13 <= 0x14)
      {
        if (v13 == 16)
        {
          uint64_t v14 = *((unsigned int *)v71 + 8);
          if (v14 >= 0x41)
          {
            int v47 = 0;
            int64_t v48 = (unint64_t)(v14 + 63) >> 6;
            do
            {
              BOOL v49 = v48-- < 1;
              if (v49) {
                break;
              }
              unint64_t v50 = *(void *)(*((void *)v71 + 3) + 8 * v48);
              v47 += __clz(v50);
            }
            while (!v50);
            int v51 = v14 | 0xFFFFFFC0;
            if ((v14 & 0x3F) == 0) {
              int v51 = 0;
            }
            if (v47 + v51 == v14) {
              return llvm::Constant::getNullValue(*(llvm::Constant **)v12, v10, v11);
            }
          }
          else if (!*((void *)v71 + 3))
          {
            return llvm::Constant::getNullValue(*(llvm::Constant **)v12, v10, v11);
          }
        }
        else if (v13 == 17)
        {
          if (sub_1CB844168((uint64_t)v71, 0.0)) {
            return llvm::Constant::getNullValue(*(llvm::Constant **)v12, v10, v11);
          }
        }
        else if (v13 - 18 < 3 || v13 == 13)
        {
          return llvm::Constant::getNullValue(*(llvm::Constant **)v12, v10, v11);
        }
        if (sub_1CC03F414((uint64_t)&v72, v12)) {
          return llvm::Constant::getNullValue(*(llvm::Constant **)v12, v10, v11);
        }
      }
      uint64_t v69 = 0;
      BOOL v16 = v70;
      if (!v70 || (unsigned int v17 = *((unsigned __int8 *)v70 + 16), v17 > 0x14))
      {
LABEL_15:
        unint64_t v72 = (unint64_t)&v69;
        if (sub_1CBC5BEAC((void **)&v72, (uint64_t)v16))
        {
          int v19 = *(_DWORD *)(*(void *)v69 + 8);
          if ((v19 & 0xFE) == 0x12) {
            int v19 = *(_DWORD *)(**(void **)(*(void *)v69 + 16) + 8);
          }
          if (v19 == 269) {
            return v12;
          }
        }
        if (sub_1CC042044(v16, a5)) {
          return (llvm::Value *)llvm::PoisonValue::get(*(llvm::PoisonValue **)v12, v20);
        }
        int v21 = *((unsigned __int8 *)v12 + 16);
        if (v21 == 85 || *((unsigned char *)v16 + 16) == 85)
        {
          uint64_t v15 = (uint64_t)sub_1CC03FC6C(v9, v12, v16, a5, v6);
          if (v15) {
            return (llvm::Value *)v15;
          }
          int v21 = *((unsigned __int8 *)v12 + 16);
        }
        if (v21 == 83 || *((unsigned char *)v16 + 16) == 83)
        {
          uint64_t v15 = sub_1CC040084(v9, v12, v16, a5, v6);
          if (v15) {
            return (llvm::Value *)v15;
          }
        }
        uint64_t v22 = *(void *)(a5 + 24);
        unsigned int v23 = *(llvm::Constant **)(a5 + 32);
        uint64_t v24 = *(void *)(a5 + 16);
        if (!v23 || !*((void *)v23 + 5))
        {
          if (!v16 || *((unsigned __int8 *)v16 + 16) < 0x1Cu || (unsigned int v23 = v16, !*((void *)v16 + 5))) {
            unsigned int v23 = 0;
          }
        }
        unint64_t v72 = *(void *)a5;
        uint64_t v73 = v22;
        int v74 = v23;
        uint64_t v75 = v24;
        uint64_t v76 = 0;
        char v77 = 1;
        sub_1CC16089C((uint64_t *)v16, 0, (const llvm::DataLayout **)&v72, (uint64_t)&v65);
        if (v68 >= 0x41) {
          operator new[]();
        }
        if ((unint64_t)__src >= v66)
        {
          uint64_t v15 = (uint64_t)llvm::PoisonValue::get(*(llvm::PoisonValue **)v12, v25);
          goto LABEL_91;
        }
        unsigned int v28 = 32 - __clz(v66 - 1);
        if (v66 > 0x40) {
          unsigned int v29 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v65);
        }
        else {
          unsigned int v29 = __clz(__rbit64(~*(void *)&v65));
        }
        if (v29 >= v28)
        {
          uint64_t v15 = (uint64_t)v12;
          goto LABEL_91;
        }
        if (!a4)
        {
LABEL_90:
          uint64_t v15 = 0;
LABEL_91:
          if (v68 >= 0x41 && __src)
          {
            uint64_t v56 = v15;
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
            uint64_t v15 = v56;
          }
          if (v66 < 0x41 || !*(void *)&v65) {
            return (llvm::Value *)v15;
          }
          uint64_t v12 = (const llvm::detail::DoubleAPFloat *)v15;
          MEMORY[0x1D25D9CB0](*(void *)&v65, 0x1000C8000313F17);
          return v12;
        }
        uint64_t v30 = *(void *)(a5 + 24);
        int v31 = *(const llvm::detail::DoubleAPFloat **)(a5 + 32);
        uint64_t v32 = *(void *)(a5 + 16);
        if (!v31 || !*((void *)v31 + 5))
        {
          if (!v12 || *((unsigned __int8 *)v12 + 16) < 0x1Cu || (int v31 = v12, !*((void *)v12 + 5))) {
            int v31 = 0;
          }
        }
        unint64_t v72 = *(void *)a5;
        uint64_t v73 = v30;
        int v74 = v31;
        uint64_t v75 = v32;
        uint64_t v76 = 0;
        char v77 = 1;
        sub_1CC16089C((uint64_t *)v12, 0, (const llvm::DataLayout **)&v72, (uint64_t)&v61);
        llvm::KnownBits::shl((llvm::KnownBits *)&v61, &v65, (uint64_t)&v72);
        if (v62 >= 0x41) {
          int v34 = (uint64_t *)(v61 + 8 * ((v62 - 1) >> 6));
        }
        else {
          int v34 = &v61;
        }
        if (((unint64_t)*v34 >> (v62 - 1)))
        {
          uint64_t v35 = 1 << (v73 - 1);
          if (v73 > 0x40) {
            *(void *)(v72 + 8 * ((v73 - 1) >> 6)) |= v35;
          }
          else {
            v72 |= v35;
          }
        }
        int v36 = &v63;
        unsigned int v37 = v64 - 1;
        if (v64 >= 0x41) {
          int v36 = (uint64_t *)(v63 + 8 * (v37 >> 6));
        }
        if (((unint64_t)*v36 >> v37))
        {
          unsigned int v38 = &v74;
          if (v75 >= 0x41) {
            unsigned int v38 = (void *)((char *)v74 + 8 * ((v75 - 1) >> 6));
          }
          *v38 |= 1 << (v75 - 1);
        }
        if (v73 > 0x40)
        {
          unint64_t v40 = ((unint64_t)v73 + 63) >> 6;
          unint64_t v41 = (uint64_t *)v72;
          unsigned int v42 = v74;
          while (1)
          {
            uint64_t v44 = *v41++;
            uint64_t v43 = v44;
            uint64_t v45 = *(void *)v42;
            unsigned int v42 = (llvm::Constant *)((char *)v42 + 8);
            if ((v45 & v43) != 0) {
              break;
            }
            if (!--v40) {
              goto LABEL_84;
            }
          }
        }
        else if (((unint64_t)v74 & v72) == 0)
        {
LABEL_84:
          char v39 = 0;
          uint64_t v15 = 0;
          goto LABEL_85;
        }
        uint64_t v15 = (uint64_t)llvm::PoisonValue::get(*(llvm::PoisonValue **)v12, v33);
        char v39 = 1;
LABEL_85:
        if (v75 >= 0x41 && v74)
        {
          uint64_t v57 = v15;
          MEMORY[0x1D25D9CB0](v74, 0x1000C8000313F17);
          uint64_t v15 = v57;
        }
        if (v73 >= 0x41 && v72)
        {
          uint64_t v58 = v15;
          MEMORY[0x1D25D9CB0](v72, 0x1000C8000313F17);
          uint64_t v15 = v58;
        }
        if (v64 >= 0x41 && v63)
        {
          uint64_t v59 = v15;
          MEMORY[0x1D25D9CB0](v63, 0x1000C8000313F17);
          uint64_t v15 = v59;
        }
        if (v62 >= 0x41 && v61)
        {
          uint64_t v60 = v15;
          MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
          uint64_t v15 = v60;
        }
        if (v39) {
          goto LABEL_91;
        }
        goto LABEL_90;
      }
      if (v17 == 16)
      {
        uint64_t v18 = *((unsigned int *)v70 + 8);
        if (v18 >= 0x41)
        {
          int v52 = 0;
          int64_t v53 = (unint64_t)(v18 + 63) >> 6;
          do
          {
            BOOL v49 = v53-- < 1;
            if (v49) {
              break;
            }
            unint64_t v54 = *(void *)(*((void *)v70 + 3) + 8 * v53);
            v52 += __clz(v54);
          }
          while (!v54);
          int v55 = v18 | 0xFFFFFFC0;
          if ((v18 & 0x3F) == 0) {
            int v55 = 0;
          }
          if (v52 + v55 == v18) {
            return v12;
          }
        }
        else if (!*((void *)v70 + 3))
        {
          return v12;
        }
      }
      else if (v17 == 17)
      {
        if (sub_1CB844168((uint64_t)v70, 0.0)) {
          return v12;
        }
      }
      else if (v17 - 18 < 3 || v17 == 13)
      {
        return v12;
      }
      if ((sub_1CC03F414((uint64_t)&v72, v16) & 1) == 0) {
        goto LABEL_15;
      }
      return v12;
    }
  }
  return v12;
}

uint64_t sub_1CC042044(llvm::Constant *a1, uint64_t a2)
{
  uint64_t result = 0;
  v31[8] = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return result;
  }
  unsigned int v4 = *((unsigned __int8 *)a1 + 16);
  if (v4 > 0x14) {
    return result;
  }
  if (*(unsigned char *)(a2 + 41))
  {
    unsigned int v6 = (v4 - 11);
    if (v6 < 2) {
      return 1;
    }
    if (v6 >= 0xFD)
    {
      uint64_t v24 = v28;
      int v25 = v28;
      uint64_t v26 = 8;
      int v27 = 0;
      unsigned int v29 = v31;
      uint64_t v30 = 0x800000000;
      v23[0] = (llvm::SmallPtrSetImplBase *)&v24;
      v23[1] = (llvm::SmallPtrSetImplBase *)&v29;
      BOOL v21 = 0;
      if (sub_1CC04C108(v23, (uint64_t)a1))
      {
        do
        {
          BOOL v21 = v30 == 0;
          if (!v30) {
            break;
          }
          uint64_t v22 = *((void *)v29 + v30 - 1);
          LODWORD(v30) = v30 - 1;
        }
        while ((sub_1CC04C108(v23, v22) & 1) != 0);
      }
      if (v29 != v31) {
        free(v29);
      }
      if (v25 == v24)
      {
        if (v21) {
          return 1;
        }
      }
      else
      {
        free(v25);
        if (v21) {
          return 1;
        }
      }
      unsigned int v4 = *((unsigned __int8 *)a1 + 16);
    }
  }
  BOOL v7 = v4 == 10 || v4 == 15;
  if (!v7)
  {
    if (v4 != 16) {
      return 0;
    }
    unsigned int v13 = (void *)((char *)a1 + 24);
    uint64_t v12 = *(llvm::Type **)a1;
    if ((*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x12) {
      uint64_t v12 = (llvm::Type *)**((void **)v12 + 2);
    }
    unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v12);
    uint64_t v15 = *((unsigned int *)a1 + 8);
    if (v15 < 0x41) {
      return *v13 >= (unint64_t)PrimitiveSizeInBits;
    }
    int v16 = 0;
    int64_t v17 = (unint64_t)(v15 + 63) >> 6;
    do
    {
      if (v17-- < 1) {
        break;
      }
      unint64_t v19 = *(void *)(*v13 + 8 * v17);
      v16 += __clz(v19);
    }
    while (!v19);
    int v20 = v15 | 0xFFFFFFC0;
    if ((v15 & 0x3F) == 0) {
      int v20 = 0;
    }
    if ((v15 - v16 - v20) <= 0x40)
    {
      unsigned int v13 = (void *)*v13;
      return *v13 >= (unint64_t)PrimitiveSizeInBits;
    }
    return 1;
  }
  int v8 = *(_DWORD *)(*(void *)a1 + 32);
  if (!v8) {
    return 1;
  }
  int v9 = 0;
  int v10 = v8 - 1;
  do
  {
    AggregateElement = llvm::Constant::getAggregateElement(a1, v9);
    uint64_t result = sub_1CC042044(AggregateElement, a2);
    if (!result) {
      break;
    }
    BOOL v7 = v10 == v9;
    int v9 = (llvm::Type *)(v9 + 1);
  }
  while (!v7);
  return result;
}

BOOL sub_1CC042284(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 < 0x1C)
  {
    if (v2 != 5) {
      return 0;
    }
    unsigned int v6 = *(unsigned __int16 *)(a2 + 18);
    BOOL v3 = v6 > 0x1B;
    int v7 = (1 << v6) & 0xC180000;
    if (v3 || v7 == 0) {
      return 0;
    }
  }
  else
  {
    BOOL v3 = v2 > 0x37;
    uint64_t v4 = (1 << v2) & 0xC1800000000000;
    if (v3 || v4 == 0) {
      return 0;
    }
  }
  if ((*(unsigned char *)(a2 + 17) & 2) == 0) {
    return 0;
  }
  return sub_1CC0422EC(a1, a2);
}

BOOL sub_1CC0422EC(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  if (!a2 || v2 < 0x1C)
  {
    if (v2 == 5 && (*(_WORD *)(a2 + 18) & 0xFFFE) == 0x1A)
    {
      uint64_t v5 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      if (v5)
      {
        **(void **)a1 = v5;
        int v6 = *(_DWORD *)(a2 + 20);
        goto LABEL_13;
      }
    }
    return 0;
  }
  if ((v2 & 0xFE) != 0x36) {
    return 0;
  }
  int v3 = *(_DWORD *)(a2 + 20);
  uint64_t v4 = (v3 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v3 & 0x7FFFFFF));
  uint64_t v7 = *v4;
  if (!v7) {
    return 0;
  }
  **(void **)a1 = v7;
  int v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0)
  {
    uint64_t v8 = *(void *)(a2 - 8);
    return *(void *)(a1 + 8) == *(void *)(v8 + 32);
  }
LABEL_13:
  uint64_t v8 = a2 - 32 * (v6 & 0x7FFFFFF);
  return *(void *)(a1 + 8) == *(void *)(v8 + 32);
}

uint64_t sub_1CC0423A0(uint64_t a1, llvm::Constant *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v4 == 16)
  {
    unsigned int v5 = *((_DWORD *)a2 + 8);
    int v6 = (void *)(*((void *)a2 + 3) + 8 * ((v5 - 1) >> 6));
    if (v5 < 0x41) {
      int v6 = (void *)((char *)a2 + 24);
    }
    return (*v6 >> (v5 - 1)) & 1;
  }
  else
  {
    uint64_t v8 = *(void *)a2;
    if (*(void *)a2) {
      BOOL v9 = (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 18;
    }
    else {
      BOOL v9 = 0;
    }
    BOOL v10 = !v9 || v4 > 0x14;
    int v11 = v10;
    if (!v10)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && *((unsigned char *)SplatValue + 16) == 16)
      {
        uint64_t v14 = SplatValue[3];
        unsigned int v13 = (char *)(SplatValue + 3);
        unsigned int v15 = *((_DWORD *)v13 + 2);
        int v16 = (void *)(v14 + 8 * ((v15 - 1) >> 6));
        if (v15 < 0x41) {
          int v16 = v13;
        }
        uint64_t v2 = (*v16 >> (v15 - 1)) & 1;
      }
      else
      {
        if (*(unsigned char *)(v8 + 8) == 18)
        {
          int v17 = *(_DWORD *)(v8 + 32);
          if (v17)
          {
            uint64_t v18 = 0;
            LODWORD(v2) = 0;
            while (1)
            {
              AggregateElement = llvm::Constant::getAggregateElement(a2, v18);
              if (!AggregateElement) {
                break;
              }
              int v20 = *((unsigned __int8 *)AggregateElement + 16);
              if ((v20 - 11) >= 2)
              {
                if (v20 != 16) {
                  break;
                }
                uint64_t v22 = AggregateElement[3];
                BOOL v21 = AggregateElement + 3;
                unsigned int v23 = *((_DWORD *)v21 + 2);
                uint64_t v24 = (void *)(v22 + 8 * ((v23 - 1) >> 6));
                if (v23 < 0x41) {
                  uint64_t v24 = v21;
                }
                if (((*v24 >> (v23 - 1)) & 1) == 0) {
                  break;
                }
                LODWORD(v2) = 1;
              }
              uint64_t v18 = (llvm::Type *)(v18 + 1);
              if (v17 == v18) {
                return (v11 ^ 1) & v2;
              }
            }
          }
        }
        LODWORD(v2) = 0;
      }
    }
    return (v11 ^ 1) & v2;
  }
}

llvm::Value *sub_1CC042500(llvm *a1, uint64_t a2, llvm::Constant *a3, int a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_1CC04190C(a1, (unsigned __int8 *)a2, a3, 0, a5, a6);
  if (result) {
    return result;
  }
  if ((llvm::Constant *)a2 != a3)
  {
    if (*(unsigned char *)(a5 + 41))
    {
      unsigned int v13 = (*(unsigned char *)(a2 + 16) - 11);
      if (v13 >= 2)
      {
        if (v13 < 0xFD) {
          goto LABEL_6;
        }
        unsigned int v23 = (const llvm::DataLayout *)&v27;
        uint64_t v24 = (const llvm::DataLayout *)&v27;
        uint64_t v25 = 8;
        LODWORD(v26) = 0;
        unsigned int v29 = &v31;
        uint64_t v30 = 0x800000000;
        v22[0] = (llvm::SmallPtrSetImplBase *)&v23;
        v22[1] = (llvm::SmallPtrSetImplBase *)&v29;
        BOOL v20 = 0;
        if (sub_1CC04C108(v22, a2))
        {
          do
          {
            BOOL v20 = v30 == 0;
            if (!v30) {
              break;
            }
            uint64_t v21 = *((void *)v29 + v30 - 1);
            LODWORD(v30) = v30 - 1;
          }
          while ((sub_1CC04C108(v22, v21) & 1) != 0);
        }
        if (v29 != &v31) {
          free(v29);
        }
        if (v24 == v23)
        {
          if (!v20) {
            goto LABEL_6;
          }
        }
        else
        {
          free(v24);
          if (!v20) {
            goto LABEL_6;
          }
        }
      }
      if (a4) {
        return (llvm::Value *)a2;
      }
      else {
        return llvm::Constant::getNullValue(*(llvm::Constant **)a2, v11, v12);
      }
    }
LABEL_6:
    if (!a4) {
      return 0;
    }
    uint64_t v14 = *(const llvm::DataLayout **)(a5 + 24);
    uint64_t v15 = *(void *)(a5 + 32);
    uint64_t v16 = *(void *)(a5 + 16);
    if (!v15 || !*(void *)(v15 + 40))
    {
      if (!a2 || *(unsigned __int8 *)(a2 + 16) < 0x1Cu || (uint64_t v15 = a2, !*(void *)(a2 + 40))) {
        uint64_t v15 = 0;
      }
    }
    unsigned int v23 = *(const llvm::DataLayout **)a5;
    uint64_t v24 = v14;
    uint64_t v25 = v15;
    uint64_t v26 = v16;
    uint64_t v27 = 0;
    char v28 = 1;
    sub_1CC16089C((uint64_t *)a2, 0, &v23, (uint64_t)&v29);
    int v17 = (uint64_t *)&v31;
    if (v32 >= 0x41) {
      int v17 = v31;
    }
    uint64_t v18 = *v17;
    if (v32 >= 0x41 && v31) {
      MEMORY[0x1D25D9CB0]();
    }
    if (v30 >= 0x41)
    {
      if (v29) {
        MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
      }
    }
    uint64_t result = (llvm::Value *)a2;
    if ((v18 & 1) == 0) {
      return 0;
    }
    return result;
  }
  unint64_t v19 = *(llvm::Constant **)a2;

  return llvm::Constant::getNullValue(v19, v11, v12);
}

BOOL sub_1CC042790(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 < 0x1C)
  {
    if (v2 != 5) {
      return 0;
    }
    unsigned int v8 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v10) = v8 - 13;
    LODWORD(v10) = v8 - 13;
    unsigned int v9 = v10 >> 1;
    BOOL v5 = v9 > 6;
    int v11 = (1 << v9) & 0x47;
    if (v5 || v11 == 0) {
      return 0;
    }
  }
  else
  {
    HIDWORD(v4) = v2 - 41;
    LODWORD(v4) = v2 - 41;
    unsigned int v3 = v4 >> 1;
    BOOL v5 = v3 > 6;
    int v6 = (1 << v3) & 0x47;
    if (v5 || v6 == 0) {
      return 0;
    }
    unsigned int v8 = v2 - 28;
  }
  if (v8 != 25 || (*(unsigned char *)(a2 + 17) & 2) == 0) {
    return 0;
  }
  int v13 = *(_DWORD *)(a2 + 20);
  uint64_t v14 = (v13 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v13 & 0x7FFFFFF));
  uint64_t v15 = *v14;
  if (!v15) {
    return 0;
  }
  **(void **)a1 = v15;
  int v16 = *(_DWORD *)(a2 + 20);
  if ((v16 & 0x40000000) != 0) {
    uint64_t v17 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v17 = a2 - 32 * (v16 & 0x7FFFFFF);
  }
  return *(void *)(a1 + 8) == *(void *)(v17 + 32);
}

uint64_t sub_1CC042864(void **a1, int a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 16);
  char v6 = a2 + 28;
  if (a2 + 28 == v5)
  {
    int v7 = sub_1CC042974(a1, *(void *)(a3 - 64));
    uint64_t v8 = *(void *)(a3 - 32);
    if (v7 && v8)
    {
      *a1[3] = v8;
      return 1;
    }
    uint64_t result = sub_1CC042974(a1, v8);
    if (result)
    {
      uint64_t v12 = *(void *)(a3 - 64);
      if (v12)
      {
        *a1[3] = v12;
        return 1;
      }
      return 0;
    }
  }
  else
  {
    if (v5 == 5)
    {
      if (*(unsigned __int16 *)(a3 + 18) == a2
        && ((int v9 = sub_1CC042974(a1, *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF))),
             uint64_t v10 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32),
             v9)
         && v10
         || sub_1CC042974(a1, v10)
         && (uint64_t v10 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF))) != 0))
      {
        *a1[3] = v10;
        char v6 = 1;
      }
      else
      {
        char v6 = 0;
      }
    }
    return (v5 == 5) & v6;
  }
  return result;
}

uint64_t sub_1CC042974(void **a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 < 0x1C)
  {
    if (v2 != 5) {
      return 0;
    }
    unsigned int v8 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v10) = v8 - 13;
    LODWORD(v10) = v8 - 13;
    unsigned int v9 = v10 >> 1;
    BOOL v5 = v9 > 6;
    int v11 = (1 << v9) & 0x47;
    if (v5 || v11 == 0) {
      return 0;
    }
  }
  else
  {
    HIDWORD(v4) = v2 - 41;
    LODWORD(v4) = v2 - 41;
    unsigned int v3 = v4 >> 1;
    BOOL v5 = v3 > 6;
    int v6 = (1 << v3) & 0x47;
    if (v5 || v6 == 0) {
      return 0;
    }
    unsigned int v8 = v2 - 28;
  }
  if (v8 != 25 || (*(unsigned char *)(a2 + 17) & 2) == 0) {
    return 0;
  }
  int v13 = *(_DWORD *)(a2 + 20);
  uint64_t v14 = (v13 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v13 & 0x7FFFFFF));
  uint64_t v15 = *v14;
  if (!v15) {
    return 0;
  }
  uint64_t v17 = *a1;
  uint64_t v16 = (uint64_t)(a1 + 1);
  *uint64_t v17 = v15;
  int v18 = *(_DWORD *)(a2 + 20);
  if ((v18 & 0x40000000) != 0) {
    uint64_t v19 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v19 = a2 - 32 * (v18 & 0x7FFFFFF);
  }
  return sub_1CBF528D8(v16, *(unsigned __int8 **)(v19 + 32));
}

llvm::Value *sub_1CC042A3C(uint64_t a1, uint64_t a2, const llvm::APInt *a3)
{
  int v3 = (int)a3;
  int v5 = *(unsigned __int8 *)(a1 + 16);
  if (v5 != 5)
  {
    if (v5 != 41) {
      goto LABEL_19;
    }
    uint64_t v6 = *(void *)(a1 - 64);
    if (!v6) {
      goto LABEL_19;
    }
    uint64_t v7 = *(void *)(a1 - 32);
    if (!v7 || *(unsigned __int8 *)(v7 + 16) > 0x14u) {
      goto LABEL_19;
    }
LABEL_10:
    int v9 = *(unsigned __int8 *)(a2 + 16);
    if (v9 == 5)
    {
      if (*(_WORD *)(a2 + 18) != 15) {
        goto LABEL_19;
      }
      uint64_t v12 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
      unint64_t v10 = *(unsigned __int8 **)v12;
      if (!*(void *)v12) {
        goto LABEL_19;
      }
      uint64_t v11 = *(void *)(v12 + 32);
    }
    else
    {
      if (v9 != 43) {
        goto LABEL_19;
      }
      unint64_t v10 = *(unsigned __int8 **)(a2 - 64);
      if (!v10 || v10[16] > 0x14u) {
        goto LABEL_19;
      }
      uint64_t v11 = *(void *)(a2 - 32);
    }
    if (v6 == v11) {
      goto LABEL_37;
    }
    goto LABEL_19;
  }
  if (*(_WORD *)(a1 + 18) == 13)
  {
    unsigned int v8 = (uint64_t *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
    uint64_t v6 = *v8;
    if (*v8)
    {
      uint64_t v7 = v8[4];
      if (v7) {
        goto LABEL_10;
      }
    }
  }
LABEL_19:
  int v13 = *(unsigned __int8 *)(a2 + 16);
  if (v13 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 13) {
      return 0;
    }
    uint64_t v15 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    uint64_t v14 = *v15;
    if (!*v15) {
      return 0;
    }
    uint64_t v7 = v15[4];
    if (!v7) {
      return 0;
    }
  }
  else
  {
    if (v13 != 41) {
      return 0;
    }
    uint64_t v14 = *(void *)(a2 - 64);
    if (!v14) {
      return 0;
    }
    uint64_t v7 = *(void *)(a2 - 32);
    if (!v7 || *(unsigned __int8 *)(v7 + 16) > 0x14u) {
      return 0;
    }
  }
  if (v5 == 5)
  {
    if (*(_WORD *)(a1 + 18) != 15) {
      return 0;
    }
    uint64_t v17 = a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF);
    unint64_t v10 = *(unsigned __int8 **)v17;
    if (!*(void *)v17) {
      return 0;
    }
    uint64_t v16 = *(void *)(v17 + 32);
  }
  else
  {
    if (v5 != 43) {
      return 0;
    }
    unint64_t v10 = *(unsigned __int8 **)(a1 - 64);
    if (!v10 || v10[16] > 0x14u) {
      return 0;
    }
    uint64_t v16 = *(void *)(a1 - 32);
  }
  if (v14 != v16) {
    return 0;
  }
LABEL_37:
  if (llvm::ConstantExpr::getNot((llvm::Constant **)v7, (llvm::Constant *)a2, a3) != (const llvm::detail::DoubleAPFloat *)v10) {
    return 0;
  }
  uint64_t v21 = *(llvm::Constant **)a1;
  if (v3 == 28)
  {
    return llvm::Constant::getNullValue(v21, v18, v19);
  }
  else
  {
    return (llvm::Value *)llvm::Constant::getAllOnesValue(v21, v18, v19);
  }
}

llvm::ConstantExpr *sub_1CC042C30(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v5 = (uint64_t ***)a3;
  uint64_t v6 = a2;
  unsigned int v8 = *(unsigned __int8 *)(a2 + 16);
  if (v8 - 66 < 0xD && v8 > 0x1B) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = 0;
  }
  unsigned int v11 = *(unsigned __int8 *)(a3 + 16);
  if (v11 - 66 < 0xD && v11 > 0x1B) {
    uint64_t v13 = a3;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v10) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14 && *(unsigned __int8 *)(v10 + 16) == *(unsigned __int8 *)(v13 + 16))
  {
    uint64_t v15 = *(uint64_t ****)(v13 - 32);
    if (**(uint64_t ****)(v10 - 32) == *v15)
    {
      uint64_t v6 = *(void *)(v10 - 32);
      int v5 = v15;
    }
    unsigned int v8 = *(unsigned __int8 *)(v6 + 16);
    unsigned int v11 = *((unsigned __int8 *)v5 + 16);
  }
  uint64_t v16 = 0;
  if (v8 == 81) {
    uint64_t v17 = (uint64_t ***)v6;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v11 == 81) {
    int v18 = v5;
  }
  else {
    int v18 = 0;
  }
  if (v17) {
    BOOL v19 = v18 == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    if (a4)
    {
      uint64_t v16 = (unsigned __int8 *)sub_1CC0431CC((uint64_t)v17, v18, 1, (int **)a1);
      if (v16) {
        goto LABEL_55;
      }
      uint64_t v16 = (unsigned __int8 *)sub_1CC0431CC((uint64_t)v18, v17, 1, (int **)a1);
      if (v16) {
        goto LABEL_55;
      }
      uint64_t v16 = (unsigned __int8 *)sub_1CC04381C(v17, (uint64_t)v18);
      if (v16) {
        goto LABEL_55;
      }
      uint64_t v16 = (unsigned __int8 *)sub_1CC04381C(v18, (uint64_t)v17);
      if (v16) {
        goto LABEL_55;
      }
      uint64_t v16 = (unsigned __int8 *)sub_1CC043A34(v17, v18, 1);
      if (v16) {
        goto LABEL_55;
      }
      uint64_t v16 = (unsigned __int8 *)sub_1CC043FA0((uint64_t)v17, (uint64_t)v18, 1);
      if (v16) {
        goto LABEL_55;
      }
      uint64_t v16 = (unsigned __int8 *)sub_1CC044660((uint64_t)v17, (uint64_t)v18, 1);
      if (v16) {
        goto LABEL_55;
      }
      uint64_t v16 = (unsigned __int8 *)sub_1CC0449DC((uint64_t)v17, (uint64_t)v18, 1);
      if (v16) {
        goto LABEL_55;
      }
      uint64_t v16 = (unsigned __int8 *)sub_1CC0449DC((uint64_t)v18, (uint64_t)v17, 1);
      if (v16) {
        goto LABEL_55;
      }
      uint64_t v16 = (unsigned __int8 *)sub_1CC044B44(v17, (uint64_t)v18, (unsigned char *)(a1 + 40));
      if (v16) {
        goto LABEL_55;
      }
      BOOL v20 = sub_1CC044B44(v18, (uint64_t)v17, (unsigned char *)(a1 + 40));
    }
    else
    {
      uint64_t v16 = (unsigned __int8 *)sub_1CC0431CC((uint64_t)v17, v18, 0, (int **)a1);
      if (v16) {
        goto LABEL_55;
      }
      uint64_t v16 = (unsigned __int8 *)sub_1CC0431CC((uint64_t)v18, v17, 0, (int **)a1);
      if (v16) {
        goto LABEL_55;
      }
      uint64_t v16 = (unsigned __int8 *)sub_1CC045390(v17, (uint64_t)v18);
      if (v16) {
        goto LABEL_55;
      }
      uint64_t v16 = (unsigned __int8 *)sub_1CC045390(v18, (uint64_t)v17);
      if (v16) {
        goto LABEL_55;
      }
      uint64_t v16 = (unsigned __int8 *)sub_1CC043A34(v17, v18, 0);
      if (v16) {
        goto LABEL_55;
      }
      uint64_t v16 = (unsigned __int8 *)sub_1CC043FA0((uint64_t)v17, (uint64_t)v18, 0);
      if (v16) {
        goto LABEL_55;
      }
      uint64_t v16 = (unsigned __int8 *)sub_1CC044660((uint64_t)v17, (uint64_t)v18, 0);
      if (v16) {
        goto LABEL_55;
      }
      uint64_t v16 = (unsigned __int8 *)sub_1CC0449DC((uint64_t)v17, (uint64_t)v18, 0);
      if (v16) {
        goto LABEL_55;
      }
      uint64_t v16 = (unsigned __int8 *)sub_1CC0449DC((uint64_t)v18, (uint64_t)v17, 0);
      if (v16) {
        goto LABEL_55;
      }
      uint64_t v16 = (unsigned __int8 *)sub_1CC0455B8(v17, (uint64_t)v18, (unsigned char *)(a1 + 40));
      if (v16) {
        goto LABEL_55;
      }
      BOOL v20 = sub_1CC0455B8(v18, (uint64_t)v17, (unsigned char *)(a1 + 40));
    }
    uint64_t v16 = (unsigned __int8 *)v20;
  }
LABEL_55:
  if (*(unsigned char *)(v6 + 16) == 82) {
    uint64_t v21 = v6;
  }
  else {
    uint64_t v21 = 0;
  }
  if (*((unsigned char *)v5 + 16) == 82) {
    uint64_t v22 = v5;
  }
  else {
    uint64_t v22 = 0;
  }
  if (!v21 || !v22) {
    goto LABEL_93;
  }
  unsigned int v23 = *(void **)(v21 - 64);
  uint64_t v24 = *(v22 - 8);
  if (*v23 != *v24) {
    return 0;
  }
  uint64_t v25 = *(uint64_t **)(a1 + 8);
  uint64_t v26 = *(void *)(v21 - 32);
  uint64_t v27 = (uint64_t)*(v22 - 4);
  int v28 = *(_WORD *)(v21 + 18) & 0x3F;
  int v29 = *((_WORD *)v22 + 9) & 0x3F;
  if (v28 != 7 || v29 != 7 || a4 == 0)
  {
    uint64_t v16 = 0;
    BOOL v32 = v28 == 8 && v29 == 8;
    if (!v32 || (a4 & 1) != 0) {
      return (llvm::ConstantExpr *)v16;
    }
  }
  if (llvm::isKnownNeverNaN((uint64_t)v23, v25, 0) && ((void *)v26 == v24 || v26 == v27)) {
    goto LABEL_91;
  }
  if (llvm::isKnownNeverNaN(v26, v25, 0))
  {
    if (v23 != v24)
    {
      uint64_t v16 = (unsigned __int8 *)v5;
      if (v23 == (void *)v27) {
        goto LABEL_93;
      }
      goto LABEL_84;
    }
LABEL_91:
    uint64_t v16 = (unsigned __int8 *)v5;
    goto LABEL_93;
  }
LABEL_84:
  if (llvm::isKnownNeverNaN((uint64_t)v24, v25, 0) && ((void *)v27 == v23 || v27 == v26)) {
    goto LABEL_92;
  }
  if (!llvm::isKnownNeverNaN(v27, v25, 0)) {
    return 0;
  }
  if (v24 == v23)
  {
LABEL_92:
    uint64_t v16 = (unsigned __int8 *)v6;
  }
  else
  {
    uint64_t v16 = (unsigned __int8 *)v6;
    if (v24 != (void *)v26) {
      return 0;
    }
  }
LABEL_93:
  if (v10) {
    BOOL v33 = v16 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (v33) {
    return (llvm::ConstantExpr *)v16;
  }
  if (v16[16] > 0x14u) {
    return 0;
  }
  uint64_t v35 = (llvm::ConstantExpr *)(*(unsigned __int8 *)(v10 + 16) - 28);
  int v36 = *(llvm::Constant ****)v10;

  return llvm::ConstantExpr::getCast(v35, (llvm::ConstantExpr *)v16, v36, 0);
}

uint64_t sub_1CC04308C(void **a1, int a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 16);
  if (a2 + 28 == v5)
  {
    uint64_t v6 = *(void *)(a3 - 64);
    if (!v6 || (**a1 = v6, (sub_1CBF686A0(a1 + 1, 30, *(void *)(a3 - 32)) & 1) == 0))
    {
      uint64_t v7 = *(void *)(a3 - 32);
      if (v7)
      {
        **a1 = v7;
        uint64_t v8 = *(void *)(a3 - 64);
        int v9 = a1 + 1;
        return sub_1CBF686A0(v9, 30, v8);
      }
      return 0;
    }
    return 1;
  }
  if (v5 == 5 && *(unsigned __int16 *)(a3 + 18) == a2)
  {
    uint64_t v11 = *(_DWORD *)(a3 + 20) & 0x7FFFFFF;
    uint64_t v12 = *(void *)(a3 - 32 * v11);
    if (v12)
    {
      **a1 = v12;
      if (sub_1CBF686A0(a1 + 1, 30, *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32))) {
        return 1;
      }
      uint64_t v11 = *(_DWORD *)(a3 + 20) & 0x7FFFFFF;
    }
    uint64_t v13 = *(void *)(a3 - 32 * v11 + 32);
    if (v13)
    {
      **a1 = v13;
      uint64_t v8 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
      int v9 = a1 + 1;
      return sub_1CBF686A0(v9, 30, v8);
    }
  }
  return 0;
}

llvm::Value *sub_1CC0431CC(uint64_t a1, uint64_t ***a2, int a3, int **a4)
{
  uint64_t v7 = (void *)a1;
  int v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = &v44;
  int v47 = (int *)&v45;
  if (!sub_1CC04517C((uint64_t)&v46, a1) || (v44 & 0xFFFFFFFE) != 0x20) {
    return 0;
  }
  int v43 = 0;
  int v9 = *(unsigned __int8 *)(v45 + 16);
  if (v9 == 5)
  {
    if (*(_WORD *)(v45 + 18) != 15) {
      goto LABEL_11;
    }
    uint64_t v12 = (int **)(v45 - 32 * (*(_DWORD *)(v45 + 20) & 0x7FFFFFF));
    uint64_t v10 = *v12;
    if (!*v12) {
      goto LABEL_11;
    }
    uint64_t v11 = (uint64_t)v12[4];
    if (!v11) {
      goto LABEL_11;
    }
  }
  else
  {
    if (v9 != 43) {
      goto LABEL_11;
    }
    uint64_t v10 = *(int **)(v45 - 64);
    if (!v10) {
      goto LABEL_11;
    }
    uint64_t v11 = *(void *)(v45 - 32);
    if (!v11) {
      goto LABEL_11;
    }
  }
  uint64_t v46 = &v43;
  int v47 = v10;
  uint64_t v48 = v11;
  if (sub_1CD497CC8((uint64_t)&v46, (uint64_t)a2) && (v43 - 34) <= 3)
  {
    BOOL v24 = v43 == 37 || v43 == 35;
    if (v24 && v44 == 33 && (a3 & 1) == 0)
    {
LABEL_58:
      uint64_t v25 = *a2;
      uint64_t v26 = **a2;
      uint64_t v27 = *v26;
      uint64_t v7 = *(void **)(*v26 + 1560);
      if (!v7)
      {
        int v28 = *(llvm::ConstantInt **)(v27 + 1888);
        unsigned int v29 = *(_DWORD *)(v27 + 1896);
        LODWORD(v47) = v29 >> 8;
        if (v29 >> 8 > 0x40) {
          operator new[]();
        }
        if (v29 <= 0xFF) {
          LOBYTE(v30) = 0;
        }
        else {
          unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v29) + 63);
        }
        uint64_t v46 = (int *)(v30 & 1);
        uint64_t v7 = llvm::ConstantInt::get(v28, (llvm::LLVMContext *)&v46, v8);
        if (v47 >= 0x41 && v46) {
          MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
        }
        *(void *)(v27 + 1560) = v7;
      }
LABEL_73:
      if ((v25[1] & 0xFE) == 0x12) {
        return llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v25 + 8) | ((unint64_t)(*((_DWORD *)v25 + 2) == 19) << 32)), (uint64_t)v7);
      }
      return (llvm::Value *)v7;
    }
    BOOL v31 = v43 == 34 || v43 == 36;
    if (v31 && v44 == 32 && a3)
    {
LABEL_72:
      uint64_t v25 = *a2;
      BOOL v32 = **a2;
      uint64_t v33 = *v32;
      uint64_t v7 = *(void **)(*v32 + 1568);
      if (!v7)
      {
        unint64_t v41 = *(llvm::ConstantInt **)(v33 + 1888);
        unsigned int v42 = *(_DWORD *)(v33 + 1896);
        LODWORD(v47) = v42 >> 8;
        if (v42 >> 8 > 0x40) {
          operator new[]();
        }
        uint64_t v46 = 0;
        uint64_t v7 = llvm::ConstantInt::get(v41, (llvm::LLVMContext *)&v46, v8);
        if (v47 >= 0x41 && v46) {
          MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
        }
        *(void *)(v33 + 1568) = v7;
      }
      goto LABEL_73;
    }
    if (v44 == 33)
    {
      if (v43 == 36 || v43 == 34) {
        goto LABEL_34;
      }
    }
    else if (v44 == 32 && (v43 == 37 || v43 == 35))
    {
      goto LABEL_39;
    }
  }
  uint64_t v46 = &v43;
  int v47 = (int *)v45;
  uint64_t v48 = (uint64_t)v10;
  if (sub_1CD497CC8((uint64_t)&v46, (uint64_t)a2))
  {
    int v34 = v43;
    if (v43 == 35)
    {
      if (!a3 || v44 != 33) {
        goto LABEL_11;
      }
      uint64_t v35 = a4[3];
      uint64_t v36 = (uint64_t)a4[4];
      unsigned int v37 = a4[2];
      if (!v36 || !*(void *)(v36 + 40))
      {
        if (*(unsigned __int8 *)(v11 + 16) < 0x1Cu || (uint64_t v36 = v11, !*(void *)(v11 + 40))) {
          uint64_t v36 = 0;
        }
      }
      uint64_t v46 = *a4;
      int v47 = v35;
      uint64_t v48 = v36;
      BOOL v49 = v37;
      uint64_t v50 = 0;
      char v51 = 1;
      if (sub_1CC1620B8(v11, 0, (uint64_t)&v46)) {
        return (llvm::Value *)a2;
      }
      int v34 = v43;
    }
    if (v34 == 36 && (a3 & 1) == 0 && v44 == 32)
    {
      unsigned int v38 = a4[3];
      uint64_t v39 = (uint64_t)a4[4];
      unint64_t v40 = a4[2];
      if (!v39 || !*(void *)(v39 + 40))
      {
        if (*(unsigned __int8 *)(v11 + 16) < 0x1Cu || (uint64_t v39 = v11, !*(void *)(v11 + 40))) {
          uint64_t v39 = 0;
        }
      }
      uint64_t v46 = *a4;
      int v47 = v38;
      uint64_t v48 = v39;
      BOOL v49 = v40;
      uint64_t v50 = 0;
      char v51 = 1;
      if (sub_1CC1620B8(v11, 0, (uint64_t)&v46)) {
        return (llvm::Value *)a2;
      }
    }
  }
LABEL_11:
  uint64_t v13 = (uint64_t)*(a2 - 8);
  if (v13)
  {
    if ((uint64_t **)v45 == *(a2 - 4))
    {
      int v14 = *((_WORD *)a2 + 9) & 0x3F;
      int v43 = v14;
      if ((v14 - 34) < 4) {
        goto LABEL_20;
      }
    }
  }
  if (v45 != v13) {
    return 0;
  }
  uint64_t v13 = (uint64_t)*(a2 - 4);
  if (!v13) {
    return 0;
  }
  uint64_t v16 = *((_WORD *)a2 + 9) & 0x3F;
  if ((v16 - 34) > 3) {
    return 0;
  }
  int v14 = dword_1CFAC38C0[v16 - 34];
  int v43 = v14;
LABEL_20:
  int v17 = v44;
  if (v14 == 34 && v44 == 32)
  {
    int v18 = a4[3];
    uint64_t v19 = (uint64_t)a4[4];
    BOOL v20 = a4[2];
    if (!v19 || !*(void *)(v19 + 40))
    {
      if (*(unsigned __int8 *)(v13 + 16) < 0x1Cu || (uint64_t v19 = v13, !*(void *)(v13 + 40))) {
        uint64_t v19 = 0;
      }
    }
    uint64_t v46 = *a4;
    int v47 = v18;
    uint64_t v48 = v19;
    BOOL v49 = v20;
    uint64_t v50 = 0;
    char v51 = 1;
    if (sub_1CC1620B8(v13, 0, (uint64_t)&v46)) {
      goto LABEL_39;
    }
    int v14 = v43;
    int v17 = v44;
  }
  if (v14 == 37 && v17 == 33)
  {
    uint64_t v21 = a4[3];
    uint64_t v22 = (uint64_t)a4[4];
    unsigned int v23 = a4[2];
    if (!v22 || !*(void *)(v22 + 40))
    {
      if (*(unsigned __int8 *)(v13 + 16) < 0x1Cu || (uint64_t v22 = v13, !*(void *)(v13 + 40))) {
        uint64_t v22 = 0;
      }
    }
    uint64_t v46 = *a4;
    int v47 = v21;
    uint64_t v48 = v22;
    BOOL v49 = v23;
    uint64_t v50 = 0;
    char v51 = 1;
    if (sub_1CC1620B8(v13, 0, (uint64_t)&v46)) {
      goto LABEL_34;
    }
    int v14 = v43;
    int v17 = v44;
  }
  if (v14 == 36 && v17 == 33)
  {
LABEL_34:
    if (a3) {
      return (llvm::Value *)a2;
    }
    return (llvm::Value *)v7;
  }
  if (v14 != 35 || v17 != 32)
  {
    if (v14 != 36 || v17 != 32 || !a3)
    {
      uint64_t v7 = 0;
      if (v14 != 35 || v17 != 33 || (a3 & 1) != 0) {
        return (llvm::Value *)v7;
      }
      goto LABEL_58;
    }
    goto LABEL_72;
  }
LABEL_39:
  if (!a3) {
    return (llvm::Value *)a2;
  }
  return (llvm::Value *)v7;
}

llvm::Value *sub_1CC04381C(uint64_t ***a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t)*(a1 - 8);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = (uint64_t)*(a1 - 4);
  if (!v4 || v2 != *(void *)(a2 - 64) || v4 != *(void *)(a2 - 32)) {
    return 0;
  }
  int v7 = *((_WORD *)a1 + 9) & 0x3F;
  uint64_t v8 = *(_WORD *)(a2 + 18) & 0x3F;
  if (llvm::CmpInst::isImpliedTrueByMatchingCmp(v7, v8)) {
    return (llvm::Value *)a1;
  }
  if (dword_1CFAC396C[v8] != v7)
  {
    if (v7 == 32)
    {
      int v5 = 0;
      if (v8 > 0x28 || ((1 << v8) & 0x15600000055) == 0) {
        return (llvm::Value *)v5;
      }
    }
    else if (v7 != 40 || v8 != 38)
    {
      int v5 = 0;
      if (v7 != 36 || v8 != 34) {
        return (llvm::Value *)v5;
      }
    }
  }
  uint64_t v10 = *a1;
  uint64_t v11 = **a1;
  uint64_t v12 = *v11;
  int v5 = *(void **)(*v11 + 1568);
  if (!v5)
  {
    uint64_t v13 = *(llvm::ConstantInt **)(v12 + 1888);
    unsigned int v14 = *(_DWORD *)(v12 + 1896);
    unsigned int v17 = v14 >> 8;
    if (v14 >> 8 > 0x40) {
      operator new[]();
    }
    uint64_t v16 = 0;
    int v5 = llvm::ConstantInt::get(v13, (llvm::LLVMContext *)&v16, v9);
    if (v17 >= 0x41 && v16)
    {
      uint64_t v15 = v5;
      MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
      int v5 = v15;
    }
    *(void *)(v12 + 1568) = v5;
  }
  if ((v10[1] & 0xFE) == 0x12) {
    return llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v10 + 8) | ((unint64_t)(*((_DWORD *)v10 + 2) == 19) << 32)), (uint64_t)v5);
  }
  return (llvm::Value *)v5;
}

void *sub_1CC043A34(uint64_t ***a1, uint64_t ***a2, int a3)
{
  if (*(a1 - 8) != *(a2 - 8)) {
    return 0;
  }
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v6 = (unsigned __int8 *)*(a1 - 4);
  int v47 = &v52;
  uint64_t v48 = 0;
  if (!sub_1CBF528D8((uint64_t)&v47, v6)) {
    return 0;
  }
  int v7 = (unsigned __int8 *)*(a2 - 4);
  int v43 = &v51;
  uint64_t v44 = 0;
  uint64_t Splat = 0;
  if (sub_1CBF528D8((uint64_t)&v43, v7))
  {
    llvm::ConstantRange::makeExactICmpRegion(*((_WORD *)a1 + 9) & 0x3F, v52, (uint64_t)&v47);
    llvm::ConstantRange::makeExactICmpRegion(*((_WORD *)a2 + 9) & 0x3F, v51, (uint64_t)&v43);
    if (a3)
    {
      llvm::ConstantRange::intersectWith((uint64_t)&v47, (llvm::ConstantRange *)&v43, 0, (uint64_t)&__s1);
      uint64_t v10 = v40;
      if (v40 > 0x40)
      {
        uint64_t v33 = __s1;
        uint64_t v11 = __s2;
        if (memcmp(__s1, __s2, (((unint64_t)v40 + 63) >> 3) & 0x3FFFFFF8))
        {
          int v13 = 0;
LABEL_10:
          if (v42 >= 0x41 && v11 != 0)
          {
            MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
            LODWORD(v10) = v40;
          }
          if (v10 >= 0x41 && __s1) {
            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
          if (v13)
          {
            uint64_t v15 = *a1;
            uint64_t v16 = **a1;
            uint64_t v17 = *v16;
            uint64_t Splat = *(void **)(*v16 + 1568);
            if (!Splat)
            {
              int v18 = *(llvm::ConstantInt **)(v17 + 1888);
              unsigned int v19 = *(_DWORD *)(v17 + 1896);
              unsigned int v40 = v19 >> 8;
              if (v19 >> 8 > 0x40) {
                operator new[]();
              }
              __s1 = 0;
              uint64_t Splat = llvm::ConstantInt::get(v18, (llvm::LLVMContext *)&__s1, v9);
              if (v40 >= 0x41 && __s1) {
                MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
              }
              *(void *)(v17 + 1568) = Splat;
            }
LABEL_30:
            if ((v15[1] & 0xFE) == 0x12) {
              uint64_t Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v15 + 8) | ((unint64_t)(*((_DWORD *)v15 + 2) == 19) << 32)), (uint64_t)Splat);
            }
            goto LABEL_42;
          }
          goto LABEL_32;
        }
        int v34 = 0;
        int64_t v35 = (unint64_t)(v10 + 63) >> 6;
        do
        {
          if (v35-- < 1) {
            break;
          }
          unint64_t v37 = v33[v35];
          v34 += __clz(v37);
        }
        while (!v37);
        int v38 = v10 | 0xFFFFFFC0;
        if ((v10 & 0x3F) == 0) {
          int v38 = 0;
        }
        BOOL v12 = v34 + v38 == v10;
      }
      else
      {
        uint64_t v11 = __s2;
        BOOL v12 = ((unint64_t)__s2 | (unint64_t)__s1) == 0;
      }
      int v13 = v12;
      goto LABEL_10;
    }
    llvm::ConstantRange::unionWith((uint64_t)&v47, (unsigned int *)&v43, 0, (uint64_t)&__s1);
    unsigned int v22 = v40;
    if (v40 > 0x40)
    {
      unsigned int v23 = __s2;
      if (memcmp(__s1, __s2, (((unint64_t)v40 + 63) >> 3) & 0x3FFFFFF8)) {
        goto LABEL_25;
      }
      BOOL v29 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__s1) == v22;
    }
    else
    {
      unsigned int v23 = __s2;
      if (__s1 != __s2)
      {
LABEL_25:
        int v24 = 0;
        goto LABEL_26;
      }
      if (!v40)
      {
        int v24 = 1;
        goto LABEL_26;
      }
      BOOL v29 = __s1 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v40);
    }
    int v24 = v29;
LABEL_26:
    if (v42 >= 0x41 && v23)
    {
      MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
      unsigned int v22 = v40;
    }
    if (v22 >= 0x41 && __s1) {
      MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
    }
    if (v24)
    {
      uint64_t v15 = *a1;
      uint64_t v25 = **a1;
      uint64_t v26 = *v25;
      uint64_t Splat = *(void **)(*v25 + 1560);
      if (!Splat)
      {
        unint64_t v30 = *(llvm::ConstantInt **)(v26 + 1888);
        unsigned int v31 = *(_DWORD *)(v26 + 1896);
        unsigned int v40 = v31 >> 8;
        if (v31 >> 8 > 0x40) {
          operator new[]();
        }
        if (v31 <= 0xFF) {
          LOBYTE(v32) = 0;
        }
        else {
          unint64_t v32 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v31) + 63);
        }
        __s1 = (void *)(v32 & 1);
        uint64_t Splat = llvm::ConstantInt::get(v30, (llvm::LLVMContext *)&__s1, v21);
        if (v40 >= 0x41 && __s1) {
          MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
        }
        *(void *)(v26 + 1560) = Splat;
      }
      goto LABEL_30;
    }
LABEL_32:
    if (llvm::ConstantRange::contains((llvm::ConstantRange *)&v47, (const llvm::ConstantRange *)&v43))
    {
      if (a3) {
        uint64_t Splat = a2;
      }
      else {
        uint64_t Splat = a1;
      }
    }
    else
    {
      BOOL v27 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v43, (const llvm::ConstantRange *)&v47);
      if (a3) {
        int v28 = a1;
      }
      else {
        int v28 = a2;
      }
      if (v27) {
        uint64_t Splat = v28;
      }
      else {
        uint64_t Splat = 0;
      }
    }
LABEL_42:
    if (v46 >= 0x41 && v45) {
      MEMORY[0x1D25D9CB0](v45, 0x1000C8000313F17);
    }
    if (v44 >= 0x41 && v43) {
      MEMORY[0x1D25D9CB0](v43, 0x1000C8000313F17);
    }
    if (v50 >= 0x41 && v49) {
      MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
    }
    if (v48 >= 0x41 && v47) {
      MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
    }
  }
  return Splat;
}

uint64_t sub_1CC043FA0(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = *(_WORD *)(a2 + 18) & 0x3E;
  if (v3 == 32) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = a2;
  }
  if (v3 == 32) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a1;
  }
  __int16 v6 = *(_WORD *)(v5 + 18);
  if ((v6 & 0x3E) != 0x20) {
    return 0;
  }
  uint64_t v8 = *(void *)(v5 - 64);
  int v43 = 0;
  std::string __dst = &v43;
  uint64_t v41 = v8;
  uint64_t v9 = *(void *)(v4 - 64);
  int v10 = *(unsigned __int8 *)(v9 + 16);
  if (v10 == 5)
  {
    if (*(_WORD *)(v9 + 18) != 30) {
      goto LABEL_23;
    }
    uint64_t v12 = *(_DWORD *)(v9 + 20) & 0x7FFFFFF;
    uint64_t v13 = v9 - 32 * v12;
    if (v8 == *(void *)v13)
    {
      if (sub_1CBF68974((uint64_t)v42, *(llvm::Constant **)(v13 + 32))) {
        goto LABEL_81;
      }
      uint64_t v15 = v41;
      uint64_t v14 = -(uint64_t)(*(_DWORD *)(v9 + 20) & 0x7FFFFFF);
    }
    else
    {
      uint64_t v14 = -v12;
      uint64_t v15 = v8;
    }
    uint64_t v16 = v9 + 32 * v14;
    if (v15 == *(void *)(v16 + 32) && sub_1CBF68974((uint64_t)v42, *(llvm::Constant **)v16)) {
      goto LABEL_81;
    }
    goto LABEL_23;
  }
  if (v10 != 58) {
    goto LABEL_23;
  }
  uint64_t v11 = v8;
  if (v8 != *(void *)(v9 - 64)) {
    goto LABEL_13;
  }
  if ((sub_1CBF687D0((uint64_t)v42, *(llvm::Constant **)(v9 - 32)) & 1) == 0)
  {
    uint64_t v11 = v41;
LABEL_13:
    if (v11 == *(void *)(v9 - 32) && (sub_1CBF687D0((uint64_t)v42, *(llvm::Constant **)(v9 - 64)) & 1) != 0) {
      goto LABEL_81;
    }
LABEL_23:
    uint64_t v17 = *(void *)(v4 - 32);
    int v18 = *(unsigned __int8 *)(v17 + 16);
    if (v18 != 5)
    {
      if (v18 != 58) {
        goto LABEL_38;
      }
      uint64_t v19 = v41;
      if (v41 != *(void *)(v17 - 64)) {
        goto LABEL_28;
      }
      if ((sub_1CBF687D0((uint64_t)v42, *(llvm::Constant **)(v17 - 32)) & 1) == 0)
      {
        uint64_t v19 = v41;
LABEL_28:
        if (v19 == *(void *)(v17 - 32) && (sub_1CBF687D0((uint64_t)v42, *(llvm::Constant **)(v17 - 64)) & 1) != 0) {
          goto LABEL_82;
        }
LABEL_38:
        if (v8 == *(void *)(v4 - 64))
        {
          int v26 = *(_WORD *)(v4 + 18) & 0x3F;
        }
        else
        {
          if (v8 != *(void *)(v4 - 32)) {
            return 0;
          }
          int v26 = dword_1CFAC3A14[*(_WORD *)(v4 + 18) & 0x3F];
        }
        int v27 = 0;
        int v43 = v26;
        goto LABEL_44;
      }
LABEL_82:
      int v37 = dword_1CFAC3A14[*(_WORD *)(v4 + 18) & 0x3F];
      goto LABEL_83;
    }
    if (*(_WORD *)(v17 + 18) != 30) {
      goto LABEL_38;
    }
    uint64_t v20 = *(_DWORD *)(v17 + 20) & 0x7FFFFFF;
    uint64_t v21 = v17 - 32 * v20;
    uint64_t v22 = v41;
    if (v41 == *(void *)v21)
    {
      if (sub_1CBF68974((uint64_t)v42, *(llvm::Constant **)(v21 + 32))) {
        goto LABEL_82;
      }
      uint64_t v22 = v41;
      uint64_t v23 = -(uint64_t)(*(_DWORD *)(v17 + 20) & 0x7FFFFFF);
    }
    else
    {
      uint64_t v23 = -v20;
    }
    uint64_t v24 = v17 + 32 * v23;
    if (v22 == *(void *)(v24 + 32) && sub_1CBF68974((uint64_t)v42, *(llvm::Constant **)v24)) {
      goto LABEL_82;
    }
    goto LABEL_38;
  }
LABEL_81:
  int v37 = *(_WORD *)(v4 + 18) & 0x3F;
LABEL_83:
  *(_DWORD *)std::string __dst = v37;
  int v27 = 1;
  int v26 = v43;
LABEL_44:
  if ((v26 & 0xFFFFFFFE) == 0x20) {
    return 0;
  }
  LODWORD(v41) = 1;
  uint64_t v39 = 0;
  std::string __dst = 0;
  int v28 = *(unsigned __int8 **)(v5 - 32);
  v38[0] = &v39;
  v38[1] = 0;
  if (sub_1CBF528D8((uint64_t)v38, v28))
  {
    unsigned int v29 = *(_DWORD *)(v39 + 8);
    if (v27)
    {
      if (v29 > 0x40) {
        operator new[]();
      }
      unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v29;
      if (!v29) {
        unint64_t v30 = 0;
      }
      unsigned int v31 = (void *)(v30 & ~*(void *)v39);
    }
    else
    {
      if (v29 > 0x40) {
        operator new[]();
      }
      unsigned int v31 = *(void **)v39;
    }
    std::string __dst = v31;
    LODWORD(v41) = v29;
  }
  else
  {
    if (*(unsigned char *)(*(void *)(v5 - 32) + 16) != 19) {
      return 0;
    }
    unsigned int v31 = 0;
    std::string __dst = 0;
    unsigned int v29 = 8;
    LODWORD(v41) = 8;
  }
  uint64_t v32 = v6 & 0x3F;
  if (a3)
  {
    int v33 = v43;
  }
  else
  {
    LODWORD(v32) = dword_1CFAC396C[v32];
    int v33 = dword_1CFAC396C[v43];
    int v43 = v33;
  }
  if ((v33 - 38) <= 3)
  {
    int v43 = v33 - 4;
    if (v29) {
      unint64_t v34 = 0xFFFFFFFFFFFFFFFFLL >> ((v29 - 1) & 0x3F ^ 0x3F);
    }
    else {
      unint64_t v34 = 0;
    }
    std::string __dst = (void *)(v34 & ((unint64_t)v31 + (1 << (v29 - 1))));
    unsigned int v29 = v41;
  }
  if (v29)
  {
    int64_t v35 = __dst;
    if (__dst == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v29) && v32 == 33 && v43 == 36) {
      return v4;
    }
  }
  else
  {
    if (v32 == 33 && v43 == 36) {
      return v4;
    }
    int64_t v35 = __dst;
  }
  if (v35) {
    return 0;
  }
  if (v43 != 34 || v32 != 33) {
    return 0;
  }
  return v4;
}

uint64_t sub_1CC044660(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a1 - 32);
  unsigned int v4 = *(unsigned __int8 *)(v3 + 16);
  if (v3) {
    BOOL v5 = v4 > 0x14;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  __int16 v9 = *(_WORD *)(a1 + 18);
  __int16 v10 = *(_WORD *)(a2 + 18);
  if (v4 == 16)
  {
    uint64_t v11 = *(unsigned int *)(v3 + 32);
    if (v11 >= 0x41)
    {
      int v33 = 0;
      int64_t v34 = (unint64_t)(v11 + 63) >> 6;
      do
      {
        BOOL v5 = v34-- < 1;
        if (v5) {
          break;
        }
        unint64_t v35 = *(void *)(*(void *)(v3 + 24) + 8 * v34);
        v33 += __clz(v35);
      }
      while (!v35);
      int v36 = v11 | 0xFFFFFFC0;
      if ((v11 & 0x3F) == 0) {
        int v36 = 0;
      }
      if (v33 + v36 == v11) {
        goto LABEL_9;
      }
    }
    else if (!*(void *)(v3 + 24))
    {
      goto LABEL_9;
    }
  }
  else if (v4 == 17)
  {
    if (sub_1CB844168(*(void *)(a1 - 32), 0.0)) {
      goto LABEL_9;
    }
  }
  else if (v4 - 18 < 3 || v4 == 13)
  {
    goto LABEL_9;
  }
  if ((sub_1CC03F414((uint64_t)v41, (llvm::Constant *)v3) & 1) == 0) {
    return 0;
  }
LABEL_9:
  uint64_t v12 = *(void *)(a2 - 32);
  unsigned int v13 = *(unsigned __int8 *)(v12 + 16);
  if (v12) {
    BOOL v14 = v13 > 0x14;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14) {
    return 0;
  }
  int v15 = v9 & 0x3F;
  int v16 = v10 & 0x3F;
  if (v13 == 16)
  {
    uint64_t v17 = *(unsigned int *)(v12 + 32);
    if (v17 < 0x41)
    {
      if (*(void *)(v12 + 24)) {
        goto LABEL_16;
      }
      goto LABEL_36;
    }
    int v37 = 0;
    int64_t v38 = (unint64_t)(v17 + 63) >> 6;
    do
    {
      BOOL v5 = v38-- < 1;
      if (v5) {
        break;
      }
      unint64_t v39 = *(void *)(*(void *)(v12 + 24) + 8 * v38);
      v37 += __clz(v39);
    }
    while (!v39);
    int v40 = v17 | 0xFFFFFFC0;
    if ((v17 & 0x3F) == 0) {
      int v40 = 0;
    }
    if (v37 + v40 == v17) {
      goto LABEL_36;
    }
  }
  else
  {
    if (v13 == 17)
    {
      if ((sub_1CB844168(*(void *)(a2 - 32), 0.0) & 1) == 0) {
        goto LABEL_16;
      }
      goto LABEL_36;
    }
    if (v13 - 18 < 3 || v13 == 13)
    {
LABEL_36:
      if (v15 == v16) {
        goto LABEL_37;
      }
      return 0;
    }
  }
LABEL_16:
  int v18 = sub_1CC03F414((uint64_t)v41, (llvm::Constant *)v12);
  uint64_t result = 0;
  if (v18 && v15 == v16)
  {
LABEL_37:
    BOOL v22 = v15 == 33;
    if (!a3) {
      BOOL v22 = v16 == 32;
    }
    if (!v22) {
      return 0;
    }
    uint64_t v23 = *(void *)(a1 - 64);
    uint64_t v24 = *(void *)(a2 - 64);
    int v25 = *(unsigned __int8 *)(v24 + 16);
    if (v25 == 5)
    {
      if (*(_WORD *)(v24 + 18) != 28) {
        goto LABEL_52;
      }
      int v28 = (uint64_t *)(v24 - 32 * (*(_DWORD *)(v24 + 20) & 0x7FFFFFF));
      if (v23 != *v28 && v23 != v28[4])
      {
        v41[0] = *(void *)(a1 - 64);
        if (!sub_1CD497D64(v41, *v28))
        {
          char v26 = sub_1CD497D64(v41, *(void *)(v24 - 32 * (*(_DWORD *)(v24 + 20) & 0x7FFFFFF) + 32));
LABEL_46:
          char v27 = v26;
          uint64_t result = a2;
          if (v27) {
            return result;
          }
LABEL_52:
          int v29 = *(unsigned __int8 *)(v23 + 16);
          if (v29 == 5)
          {
            if (*(_WORD *)(v23 + 18) != 28) {
              return 0;
            }
            unsigned int v31 = (uint64_t *)(v23 - 32 * (*(_DWORD *)(v23 + 20) & 0x7FFFFFF));
            uint64_t v32 = *v31;
            if (v24 != *v31 && v24 != v31[4])
            {
              v41[0] = v24;
              if (!sub_1CD497D64(v41, v32)
                && !sub_1CD497D64(v41, *(void *)(v23 - 32 * (*(_DWORD *)(v23 + 20) & 0x7FFFFFF) + 32)))
              {
                return 0;
              }
            }
          }
          else
          {
            if (v29 != 56) {
              return 0;
            }
            uint64_t v30 = *(void *)(v23 - 64);
            if (v24 != v30 && v24 != *(void *)(v23 - 32))
            {
              v41[0] = v24;
              if ((sub_1CC0452A0(v41, v30) & 1) == 0 && (sub_1CC0452A0(v41, *(void *)(v23 - 32)) & 1) == 0) {
                return 0;
              }
            }
          }
          return a1;
        }
      }
    }
    else
    {
      if (v25 != 56) {
        goto LABEL_52;
      }
      if (v23 != *(void *)(v24 - 64) && v23 != *(void *)(v24 - 32))
      {
        v41[0] = *(void *)(a1 - 64);
        if ((sub_1CC0452A0(v41, *(void *)(v24 - 64)) & 1) == 0)
        {
          char v26 = sub_1CC0452A0(v41, *(void *)(v24 - 32));
          goto LABEL_46;
        }
      }
    }
    return a2;
  }
  return result;
}

uint64_t sub_1CC0449DC(uint64_t a1, uint64_t a2, int a3)
{
  int v15 = (int *)&v22 + 1;
  int v16 = 53;
  uint64_t v17 = 0;
  int v18 = &v21;
  v19[0] = &v20;
  v19[1] = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  if (!sub_1CC045310((uint64_t)&v16, *(void *)(a1 - 64))) {
    return 0;
  }
  if ((sub_1CBF528D8((uint64_t)v19, *(unsigned __int8 **)(a1 - 32)) & 1) == 0) {
    return 0;
  }
  *int v15 = *(_WORD *)(a1 + 18) & 0x3F;
  if (v21 != *(void *)(a2 - 64) || !sub_1CBF535C4((uint64_t)&v14, *(llvm::Constant **)(a2 - 32))) {
    return 0;
  }
  LODWORD(v22) = *(_WORD *)(a2 + 18) & 0x3F;
  uint64_t v7 = *(unsigned int *)(v20 + 8);
  if (v7 > 0x40)
  {
    int v8 = 0;
    int64_t v9 = (unint64_t)(v7 + 63) >> 6;
    do
    {
      if (v9-- < 1) {
        break;
      }
      unint64_t v11 = *(void *)(*(void *)v20 + 8 * v9);
      v8 += __clz(v11);
    }
    while (!v11);
    int v12 = v7 | 0xFFFFFFC0;
    if ((v7 & 0x3F) == 0) {
      int v12 = 0;
    }
    if (v8 + v12 == v7) {
      return 0;
    }
  }
  else if (!*(void *)v20)
  {
    return 0;
  }
  if (a3 || v22 != 0x2000000021)
  {
    if (HIDWORD(v22) == 33) {
      unsigned __int8 v13 = a3;
    }
    else {
      unsigned __int8 v13 = 0;
    }
    if ((v13 & (v22 == 32)) == 0) {
      return 0;
    }
  }
  return a2;
}

llvm::Value *sub_1CC044B44(uint64_t ***a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v44 = &v51;
  uint64_t v45 = &v48;
  v46[0] = &v50;
  v46[1] = 0;
  v47[0] = &v49;
  v47[1] = 0;
  int v51 = 0;
  uint64_t v49 = 0;
  unsigned int v50 = 0;
  uint64_t v48 = 0;
  uint64_t v6 = (uint64_t)*(a1 - 8);
  int v7 = *(unsigned __int8 *)(v6 + 16);
  if (v7 == 5)
  {
    if (*(_WORD *)(v6 + 18) == 13)
    {
      int v8 = (uint64_t *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
      if (*v8)
      {
        uint64_t v48 = *v8;
        if (sub_1CBF5295C((uint64_t)v46, (llvm::Constant *)v8[4])) {
          goto LABEL_11;
        }
      }
    }
    return 0;
  }
  if (v7 != 41) {
    return 0;
  }
  if (!*(void *)(v6 - 64)) {
    return 0;
  }
  uint64_t v48 = *(void *)(v6 - 64);
  if ((sub_1CBF528D8((uint64_t)v46, *(unsigned __int8 **)(v6 - 32)) & 1) == 0) {
    return 0;
  }
LABEL_11:
  if ((sub_1CBF528D8((uint64_t)v47, (unsigned __int8 *)*(a1 - 4)) & 1) == 0) {
    return 0;
  }
  *uint64_t v44 = *((_WORD *)a1 + 9) & 0x3F;
  if (v48 != *(void *)(a2 - 64)) {
    return 0;
  }
  uint64_t v12 = (uint64_t)*(a1 - 8);
  int v13 = *(_DWORD *)(v12 + 20);
  uint64_t v14 = (v13 & 0x40000000) != 0 ? *(void *)(v12 - 8) : v12 - 32 * (v13 & 0x7FFFFFF);
  if (*(void *)(v14 + 32) != *(void *)(a2 - 32)) {
    return 0;
  }
  if (*a3)
  {
    unsigned int v15 = *(unsigned __int8 *)(v12 + 17);
    int v16 = (v15 >> 2) & 1;
    int v17 = (v15 >> 1) & 1;
  }
  else
  {
    LOBYTE(v16) = 0;
    int v17 = 0;
  }
  int v18 = *a1;
  unsigned int v19 = *(_DWORD *)(v49 + 8);
  if (v19 >= 0x41) {
    operator new[]();
  }
  unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
  if (!v19) {
    unint64_t v20 = 0;
  }
  unint64_t v21 = v20 & (*(void *)v49 - *v50);
  int v22 = *(_WORD *)(a2 + 18) & 0x3F;
  uint64_t v23 = *((unsigned int *)v50 + 2);
  unsigned int v24 = v23 - 1;
  if (v23 > 0x40)
  {
    unint64_t v25 = *v50;
    if ((*(void *)(*v50 + 8 * (v24 >> 6)) >> v24)) {
      goto LABEL_76;
    }
    int v35 = 0;
    int64_t v36 = (unint64_t)(v23 + 63) >> 6;
    do
    {
      BOOL v37 = v36-- < 1;
      if (v37) {
        break;
      }
      unint64_t v38 = *(void *)(v25 + 8 * v36);
      v35 += __clz(v38);
    }
    while (!v38);
    int v39 = v23 | 0xFFFFFFC0;
    if ((v23 & 0x3F) == 0) {
      int v39 = 0;
    }
    if (v35 + v39 == v23) {
      goto LABEL_76;
    }
    goto LABEL_28;
  }
  unint64_t v25 = *v50;
  if ((((unint64_t)*v50 >> v24) & 1) == 0 && v25)
  {
LABEL_28:
    if (v21 == 2
      && (v51 == 36 && v22 == 38
       || (v51 == 40 ? (BOOL v26 = v22 == 38) : (BOOL v26 = 0), v26 ? (v27 = v16) : (v27 = 0), (v27 & 1) != 0))
      || v21 == 1
      && (v51 == 37 && v22 == 38
       || (v51 == 41 ? (BOOL v28 = v22 == 38) : (BOOL v28 = 0), v28 ? (v29 = v16) : (v29 = 0), (v29 & 1) != 0)))
    {
LABEL_61:
      uint64_t v32 = **v18;
      int64_t v9 = *(void **)(v32 + 1568);
      if (!v9)
      {
        int v33 = *(llvm::ConstantInt **)(v32 + 1888);
        unsigned int v34 = *(_DWORD *)(v32 + 1896);
        LODWORD(v45) = v34 >> 8;
        if (v34 >> 8 > 0x40) {
          operator new[]();
        }
        uint64_t v44 = 0;
        int64_t v9 = llvm::ConstantInt::get(v33, (llvm::LLVMContext *)&v44, v11);
        if (v45 >= 0x41 && v44) {
          MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
        }
        *(void *)(v32 + 1568) = v9;
      }
      if ((v18[1] & 0xFE) == 0x12) {
        return llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v18 + 8) | ((unint64_t)(*((_DWORD *)v18 + 2) == 19) << 32)), (uint64_t)v9);
      }
      return (llvm::Value *)v9;
    }
    if (v23 <= 0x40) {
      goto LABEL_49;
    }
LABEL_76:
    int v40 = 0;
    int64_t v41 = (unint64_t)(v23 + 63) >> 6;
    do
    {
      BOOL v37 = v41-- < 1;
      if (v37) {
        break;
      }
      unint64_t v42 = *(void *)(v25 + 8 * v41);
      v40 += __clz(v42);
    }
    while (!v42);
    int v43 = v23 | 0xFFFFFFC0;
    if ((v23 & 0x3F) == 0) {
      int v43 = 0;
    }
    BOOL v30 = v40 + v43 == v23;
    goto LABEL_50;
  }
LABEL_49:
  BOOL v30 = v25 == 0;
LABEL_50:
  char v31 = v30;
  int64_t v9 = 0;
  if ((v31 & 1) == 0 && ((v17 ^ 1) & 1) == 0)
  {
    if (v21 == 2 && v51 == 36 && v22 == 34) {
      goto LABEL_61;
    }
    if (v21 != 1) {
      return 0;
    }
    int64_t v9 = 0;
    if (v51 == 37 && v22 == 34) {
      goto LABEL_61;
    }
  }
  return (llvm::Value *)v9;
}

uint64_t sub_1CC04517C(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = *(void *)(a2 - 64);
  if (v3)
  {
    **(void **)(a1 + 8) = v3;
    uint64_t v5 = *(void *)(a2 - 32);
    unsigned int v6 = *(unsigned __int8 *)(v5 + 16);
    BOOL v7 = !v5 || v6 > 0x14;
    if (!v7)
    {
      if (v6 == 16)
      {
        uint64_t v8 = *(unsigned int *)(v5 + 32);
        if (v8 >= 0x41)
        {
          int v11 = 0;
          int64_t v12 = (unint64_t)(v8 + 63) >> 6;
          do
          {
            BOOL v7 = v12-- < 1;
            if (v7) {
              break;
            }
            unint64_t v13 = *(void *)(*(void *)(v5 + 24) + 8 * v12);
            v11 += __clz(v13);
          }
          while (!v13);
          int v14 = v8 | 0xFFFFFFC0;
          if ((v8 & 0x3F) == 0) {
            int v14 = 0;
          }
          if (v11 + v14 == v8) {
            goto LABEL_11;
          }
        }
        else if (!*(void *)(v5 + 24))
        {
LABEL_11:
          **(_DWORD **)a1 = *(_WORD *)(a2 + 18) & 0x3F;
          return 1;
        }
      }
      else if (v6 == 17)
      {
        if (sub_1CB844168(*(void *)(a2 - 32), 0.0)) {
          goto LABEL_11;
        }
      }
      else if (v6 - 18 < 3 || v6 == 13)
      {
        goto LABEL_11;
      }
      if (sub_1CC03F414((uint64_t)&v15, (llvm::Constant *)v5)) {
        goto LABEL_11;
      }
    }
  }
  return 0;
}

uint64_t sub_1CC0452A0(void *a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  unsigned int v3 = v2 - 28;
  BOOL v5 = v2 < 0x1C && v2 != 5 || a2 == 0;
  int v6 = v5;
  if (!v5)
  {
    if (v2 <= 0x1B) {
      unsigned int v3 = *(unsigned __int16 *)(a2 + 18);
    }
    if (v3 == 47)
    {
      int v8 = *(_DWORD *)(a2 + 20);
      if ((v8 & 0x40000000) != 0) {
        int64_t v9 = *(void **)(a2 - 8);
      }
      else {
        int64_t v9 = (void *)(a2 - 32 * (v8 & 0x7FFFFFF));
      }
      unsigned int v3 = *a1 == *v9;
    }
    else
    {
      unsigned int v3 = 0;
    }
  }
  return (v6 ^ 1) & v3;
}

uint64_t sub_1CC045310(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a2)
  {
    if (*(unsigned char *)(a2 + 16) == 84)
    {
      uint64_t v2 = *(void *)(a2 - 32);
      if (v2)
      {
        if (!*(unsigned char *)(v2 + 16)
          && *(void *)(v2 + 24) == *(void *)(a2 + 72)
          && *(_DWORD *)(v2 + 36) == *(_DWORD *)a1)
        {
          uint64_t v2 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 8));
          if (v2)
          {
            **(void **)(a1 + 16) = v2;
            return 1;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v2;
}

llvm::Value *sub_1CC045390(uint64_t ***a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t)*(a1 - 8);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = (uint64_t)*(a1 - 4);
  if (!v4) {
    return 0;
  }
  BOOL v5 = (void *)a2;
  if (v2 != *(void *)(a2 - 64) || v4 != *(void *)(a2 - 32)) {
    return 0;
  }
  int v7 = *((_WORD *)a1 + 9) & 0x3F;
  uint64_t v8 = *(_WORD *)(a2 + 18) & 0x3F;
  if (llvm::CmpInst::isImpliedTrueByMatchingCmp(v7, v8)) {
    return (llvm::Value *)v5;
  }
  if (dword_1CFAC396C[v8] != v7)
  {
    if (v7 == 33)
    {
      BOOL v5 = 0;
      if (v8 > 0x29 || ((1 << v8) & 0x2A90000AA00) == 0) {
        return (llvm::Value *)v5;
      }
    }
    else if (v7 != 41 || v8 != 39)
    {
      BOOL v5 = 0;
      if (v7 != 37 || v8 != 35) {
        return (llvm::Value *)v5;
      }
    }
  }
  __int16 v10 = *a1;
  int v11 = **a1;
  uint64_t v12 = *v11;
  BOOL v5 = *(void **)(*v11 + 1560);
  if (!v5)
  {
    unint64_t v13 = *(llvm::ConstantInt **)(v12 + 1888);
    unsigned int v14 = *(_DWORD *)(v12 + 1896);
    unsigned int v17 = v14 >> 8;
    if (v14 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v14) + 63);
    if (v14 <= 0xFF) {
      LOBYTE(v15) = 0;
    }
    unint64_t v16 = v15 & 1;
    BOOL v5 = llvm::ConstantInt::get(v13, (llvm::LLVMContext *)&v16, v9);
    if (v17 >= 0x41 && v16) {
      MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
    }
    *(void *)(v12 + 1560) = v5;
  }
  if ((v10[1] & 0xFE) == 0x12) {
    return llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v10 + 8) | ((unint64_t)(*((_DWORD *)v10 + 2) == 19) << 32)), (uint64_t)v5);
  }
  return (llvm::Value *)v5;
}

llvm::Value *sub_1CC0455B8(uint64_t ***a1, uint64_t a2, unsigned char *a3)
{
  int v43 = &v50;
  uint64_t v44 = &v47;
  v45[0] = &v49;
  v45[1] = 0;
  v46[0] = &v48;
  v46[1] = 0;
  int v50 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v47 = 0;
  uint64_t v6 = (uint64_t)*(a1 - 8);
  int v7 = *(unsigned __int8 *)(v6 + 16);
  if (v7 == 5)
  {
    if (*(_WORD *)(v6 + 18) != 13) {
      return 0;
    }
    uint64_t v8 = (uint64_t *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
    if (!*v8) {
      return 0;
    }
    uint64_t v47 = *v8;
    if (!sub_1CBF5295C((uint64_t)v45, (llvm::Constant *)v8[4])) {
      return 0;
    }
  }
  else
  {
    if (v7 != 41) {
      return 0;
    }
    if (!*(void *)(v6 - 64)) {
      return 0;
    }
    uint64_t v47 = *(void *)(v6 - 64);
    if ((sub_1CBF528D8((uint64_t)v45, *(unsigned __int8 **)(v6 - 32)) & 1) == 0) {
      return 0;
    }
  }
  if ((sub_1CBF528D8((uint64_t)v46, (unsigned __int8 *)*(a1 - 4)) & 1) == 0) {
    return 0;
  }
  *int v43 = *((_WORD *)a1 + 9) & 0x3F;
  if (v47 != *(void *)(a2 - 64)) {
    return 0;
  }
  uint64_t v12 = (uint64_t)*(a1 - 8);
  if (*(void *)(v12 - 32) != *(void *)(a2 - 32)) {
    return 0;
  }
  if (*a3)
  {
    unsigned int v13 = *(unsigned __int8 *)(v12 + 17);
    int v14 = (v13 >> 2) & 1;
    int v15 = (v13 >> 1) & 1;
  }
  else
  {
    LOBYTE(v14) = 0;
    int v15 = 0;
  }
  unint64_t v16 = *a1;
  unsigned int v17 = *(_DWORD *)(v48 + 8);
  if (v17 >= 0x41) {
    operator new[]();
  }
  unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
  if (!v17) {
    unint64_t v18 = 0;
  }
  unint64_t v19 = v18 & (*(void *)v48 - *v49);
  int v20 = *(_WORD *)(a2 + 18) & 0x3F;
  uint64_t v21 = *((unsigned int *)v49 + 2);
  unsigned int v22 = v21 - 1;
  if (v21 > 0x40)
  {
    unint64_t v23 = *v49;
    if ((*(void *)(*v49 + 8 * (v22 >> 6)) >> v22)) {
      goto LABEL_76;
    }
    int v34 = 0;
    int64_t v35 = (unint64_t)(v21 + 63) >> 6;
    do
    {
      BOOL v36 = v35-- < 1;
      if (v36) {
        break;
      }
      unint64_t v37 = *(void *)(v23 + 8 * v35);
      v34 += __clz(v37);
    }
    while (!v37);
    int v38 = v21 | 0xFFFFFFC0;
    if ((v21 & 0x3F) == 0) {
      int v38 = 0;
    }
    if (v34 + v38 == v21) {
      goto LABEL_76;
    }
    goto LABEL_25;
  }
  unint64_t v23 = *v49;
  if ((((unint64_t)*v49 >> v22) & 1) == 0 && v23)
  {
LABEL_25:
    if (v19 == 2
      && (v50 == 35 && v20 == 41
       || (v50 == 39 ? (BOOL v24 = v20 == 41) : (BOOL v24 = 0), v24 ? (v25 = v14) : (v25 = 0), (v25 & 1) != 0))
      || v19 == 1
      && (v50 == 34 && v20 == 41
       || (v50 == 38 ? (BOOL v26 = v20 == 41) : (BOOL v26 = 0), v26 ? (v27 = v14) : (v27 = 0), (v27 & 1) != 0)))
    {
LABEL_58:
      uint64_t v30 = **v16;
      int64_t v9 = *(void **)(v30 + 1560);
      if (!v9)
      {
        char v31 = *(llvm::ConstantInt **)(v30 + 1888);
        unsigned int v32 = *(_DWORD *)(v30 + 1896);
        LODWORD(v44) = v32 >> 8;
        if (v32 >> 8 > 0x40) {
          operator new[]();
        }
        if (v32 <= 0xFF) {
          LOBYTE(v33) = 0;
        }
        else {
          unint64_t v33 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v32) + 63);
        }
        int v43 = (int *)(v33 & 1);
        int64_t v9 = llvm::ConstantInt::get(v31, (llvm::LLVMContext *)&v43, v11);
        if (v44 >= 0x41 && v43) {
          MEMORY[0x1D25D9CB0](v43, 0x1000C8000313F17);
        }
        *(void *)(v30 + 1560) = v9;
      }
      if ((v16[1] & 0xFE) == 0x12) {
        return llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v16 + 8) | ((unint64_t)(*((_DWORD *)v16 + 2) == 19) << 32)), (uint64_t)v9);
      }
      return (llvm::Value *)v9;
    }
    if (v21 <= 0x40) {
      goto LABEL_46;
    }
LABEL_76:
    int v39 = 0;
    int64_t v40 = (unint64_t)(v21 + 63) >> 6;
    do
    {
      BOOL v36 = v40-- < 1;
      if (v36) {
        break;
      }
      unint64_t v41 = *(void *)(v23 + 8 * v40);
      v39 += __clz(v41);
    }
    while (!v41);
    int v42 = v21 | 0xFFFFFFC0;
    if ((v21 & 0x3F) == 0) {
      int v42 = 0;
    }
    BOOL v28 = v39 + v42 == v21;
    goto LABEL_47;
  }
LABEL_46:
  BOOL v28 = v23 == 0;
LABEL_47:
  char v29 = v28;
  int64_t v9 = 0;
  if ((v29 & 1) == 0 && ((v15 ^ 1) & 1) == 0)
  {
    if (v19 == 2 && v50 == 35 && v20 == 37) {
      goto LABEL_58;
    }
    if (v19 != 1) {
      return 0;
    }
    int64_t v9 = 0;
    if (v50 == 34 && v20 == 37) {
      goto LABEL_58;
    }
  }
  return (llvm::Value *)v9;
}

uint64_t sub_1CC045BF4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) != 85) {
    return 0;
  }
  int v2 = *(_DWORD *)(a2 + 20);
  unsigned int v3 = (v2 & 0x40000000) != 0 ? *(void **)(a2 - 8) : (void *)(a2 - 32 * (v2 & 0x7FFFFFF));
  if (*v3 != a1) {
    return 0;
  }
  uint64_t v5 = v3[8];
  unsigned int v6 = *(unsigned __int8 *)(v5 + 16);
  BOOL v7 = !v5 || v6 > 0x14;
  if (v7) {
    return 0;
  }
  if (v6 == 16)
  {
    uint64_t v8 = *(unsigned int *)(v5 + 32);
    if (v8 >= 0x41)
    {
      int v11 = 0;
      int64_t v12 = (unint64_t)(v8 + 63) >> 6;
      do
      {
        BOOL v7 = v12-- < 1;
        if (v7) {
          break;
        }
        unint64_t v13 = *(void *)(*(void *)(v5 + 24) + 8 * v12);
        v11 += __clz(v13);
      }
      while (!v13);
      int v14 = v8 | 0xFFFFFFC0;
      if ((v8 & 0x3F) == 0) {
        int v14 = 0;
      }
      if (v11 + v14 == v8) {
        return 1;
      }
    }
    else if (!*(void *)(v5 + 24))
    {
      return 1;
    }
  }
  else if (v6 == 17)
  {
    uint64_t v15 = v5;
    char v10 = sub_1CB844168(v5, 0.0);
    uint64_t v5 = v15;
    if (v10) {
      return 1;
    }
  }
  else if (v6 - 18 < 3 || v6 == 13)
  {
    return 1;
  }
  return sub_1CC03F414((uint64_t)&v16, (llvm::Constant *)v5);
}

void *sub_1CC045D00(llvm::Constant **a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (uint64_t)a1;
  uint64_t v4 = *a1;
  BOOL v126 = a1;
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 5)
  {
    if (*(_WORD *)(a2 + 18) == 30)
    {
      uint64_t v9 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      uint64_t v10 = a2 - 32 * v9;
      if (*(llvm::Constant ***)v10 == a1)
      {
        if (sub_1CBF68974((uint64_t)&v127, *(llvm::Constant **)(v10 + 32))) {
          return llvm::Constant::getAllOnesValue(v4, v7, v8);
        }
        int64_t v12 = v126;
        uint64_t v11 = -(uint64_t)(*(_DWORD *)(v2 + 20) & 0x7FFFFFF);
      }
      else
      {
        uint64_t v11 = -v9;
        int64_t v12 = a1;
      }
      uint64_t v13 = v2 + 32 * v11;
      if (v12 == *(llvm::APInt ***)(v13 + 32) && sub_1CBF68974((uint64_t)&v127, *(llvm::Constant **)v13)) {
        return llvm::Constant::getAllOnesValue(v4, v7, v8);
      }
    }
  }
  else if (v5 == 58)
  {
    unsigned int v6 = a1;
    if (*(llvm::Constant ***)(a2 - 64) == a1)
    {
      if (sub_1CBF687D0((uint64_t)&v127, *(llvm::Constant **)(a2 - 32))) {
        return llvm::Constant::getAllOnesValue(v4, v7, v8);
      }
      unsigned int v6 = v126;
    }
    if (v6 == *(llvm::APInt ***)(v2 - 32) && (sub_1CBF687D0((uint64_t)&v127, *(llvm::Constant **)(v2 - 64)) & 1) != 0) {
      return llvm::Constant::getAllOnesValue(v4, v7, v8);
    }
  }
  BOOL v126 = (llvm::APInt **)v3;
  int v14 = *(unsigned __int8 *)(v2 + 16);
  if (v14 == 5)
  {
    if (*(_WORD *)(v2 + 18) != 30) {
      goto LABEL_58;
    }
    uint64_t v18 = *(_DWORD *)(v2 + 20) & 0x7FFFFFF;
    uint64_t v19 = -v18;
    int v20 = (llvm::Constant **)(v2 - 32 * v18);
    uint64_t v21 = *v20;
    int v22 = *((unsigned __int8 *)*v20 + 16);
    if (v22 == 5)
    {
      if (*((_WORD *)v21 + 9) != 28) {
        goto LABEL_48;
      }
      uint64_t v30 = (void *)((char *)v21 - 32 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF));
      if (*v30 != v3)
      {
        unint64_t v23 = v30 + 4;
LABEL_45:
        if (*v23 != v3) {
          goto LABEL_48;
        }
      }
    }
    else
    {
      if (v22 != 56) {
        goto LABEL_48;
      }
      if (*((void *)v21 - 8) != v3)
      {
        unint64_t v23 = (void *)((char *)v21 - 32);
        goto LABEL_45;
      }
    }
    if (sub_1CBF68974((uint64_t)&v128, v20[4])) {
      return llvm::Constant::getAllOnesValue(v4, v7, v8);
    }
    uint64_t v19 = -(uint64_t)(*(_DWORD *)(v2 + 20) & 0x7FFFFFF);
LABEL_48:
    uint64_t v31 = v2 + 32 * v19;
    uint64_t v32 = *(void *)(v31 + 32);
    int v33 = *(unsigned __int8 *)(v32 + 16);
    if (v33 == 5)
    {
      if (*(_WORD *)(v32 + 18) != 28) {
        goto LABEL_58;
      }
      BOOL v36 = (llvm::APInt ***)(v32 - 32 * (*(_DWORD *)(v32 + 20) & 0x7FFFFFF));
      int v34 = v126;
      if (v126 == *v36) {
        goto LABEL_56;
      }
      int64_t v35 = v36 + 4;
    }
    else
    {
      if (v33 != 56) {
        goto LABEL_58;
      }
      int v34 = v126;
      if (v126 == *(llvm::APInt ***)(v32 - 64)) {
        goto LABEL_56;
      }
      int64_t v35 = (llvm::APInt ***)(v32 - 32);
    }
    if (v34 != *v35) {
      goto LABEL_58;
    }
LABEL_56:
    if (!sub_1CBF68974((uint64_t)&v128, *(llvm::Constant **)v31)) {
      goto LABEL_58;
    }
    return llvm::Constant::getAllOnesValue(v4, v7, v8);
  }
  if (v14 != 58) {
    goto LABEL_58;
  }
  uint64_t v15 = *(void *)(v2 - 64);
  int v16 = *(unsigned __int8 *)(v15 + 16);
  if (v16 == 5)
  {
    if (*(_WORD *)(v15 + 18) != 28) {
      goto LABEL_32;
    }
    BOOL v24 = (void *)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF));
    if (*v24 != v3)
    {
      unsigned int v17 = v24 + 4;
LABEL_30:
      if (*v17 != v3) {
        goto LABEL_32;
      }
    }
  }
  else
  {
    if (v16 != 56) {
      goto LABEL_32;
    }
    if (*(void *)(v15 - 64) != v3)
    {
      unsigned int v17 = (void *)(v15 - 32);
      goto LABEL_30;
    }
  }
  if (sub_1CBF687D0((uint64_t)&v128, *(llvm::Constant **)(v2 - 32))) {
    return llvm::Constant::getAllOnesValue(v4, v7, v8);
  }
LABEL_32:
  uint64_t v25 = *(void *)(v2 - 32);
  int v26 = *(unsigned __int8 *)(v25 + 16);
  if (v26 == 5)
  {
    if (*(_WORD *)(v25 + 18) != 28) {
      goto LABEL_58;
    }
    char v29 = (llvm::APInt ***)(v25 - 32 * (*(_DWORD *)(v25 + 20) & 0x7FFFFFF));
    char v27 = v126;
    if (v126 == *v29) {
      goto LABEL_40;
    }
    BOOL v28 = v29 + 4;
  }
  else
  {
    if (v26 != 56) {
      goto LABEL_58;
    }
    char v27 = v126;
    if (v126 == *(llvm::APInt ***)(v25 - 64)) {
      goto LABEL_40;
    }
    BOOL v28 = (llvm::APInt ***)(v25 - 32);
  }
  if (v27 != *v28) {
    goto LABEL_58;
  }
LABEL_40:
  if ((sub_1CBF687D0((uint64_t)&v128, *(llvm::Constant **)(v2 - 64)) & 1) == 0)
  {
LABEL_58:
    int v37 = *(unsigned __int8 *)(v2 + 16);
    if (v37 == 5)
    {
      if (*(_WORD *)(v2 + 18) != 28) {
        goto LABEL_66;
      }
      int v39 = (void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
      if (*v39 == v3) {
        return (void *)v3;
      }
      int v38 = v39 + 4;
    }
    else
    {
      if (v37 != 56) {
        goto LABEL_66;
      }
      if (*(void *)(v2 - 64) == v3) {
        return (void *)v3;
      }
      int v38 = (void *)(v2 - 32);
    }
    if (*v38 == v3) {
      return (void *)v3;
    }
LABEL_66:
    uint64_t v124 = 0;
    uint64_t v125 = 0;
    int v40 = *(unsigned __int8 *)(v3 + 16);
    if (v40 == 5)
    {
      int v43 = *(unsigned __int16 *)(v3 + 18);
      if (v43 != 30
        || (uint64_t v44 = (uint64_t *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF)), (v41 = *v44) == 0)
        || (v125 = *v44, (uint64_t v42 = v44[4]) == 0))
      {
        BOOL v126 = (llvm::APInt **)&v125;
        int v127 = (llvm::APInt **)&v124;
        goto LABEL_93;
      }
    }
    else
    {
      if (v40 != 58) {
        goto LABEL_84;
      }
      uint64_t v41 = *(void *)(v3 - 64);
      if (!v41 || (v125 = *(void *)(v3 - 64), (uint64_t v42 = *(void *)(v3 - 32)) == 0))
      {
        BOOL v126 = (llvm::APInt **)&v125;
        int v127 = (llvm::APInt **)&v124;
LABEL_87:
        int v48 = *(unsigned __int8 *)(v41 + 16);
        if (v48 == 5)
        {
          if (*(_WORD *)(v41 + 18) != 30) {
            goto LABEL_103;
          }
          if (!*(void *)(v41 - 32 * (*(_DWORD *)(v41 + 20) & 0x7FFFFFF))) {
            goto LABEL_103;
          }
          uint64_t v125 = *(void *)(v41 - 32 * (*(_DWORD *)(v41 + 20) & 0x7FFFFFF));
          uint64_t v49 = *(llvm::APInt **)(v41 - 32 * (*(_DWORD *)(v41 + 20) & 0x7FFFFFF) + 32);
          if (!v49) {
            goto LABEL_103;
          }
        }
        else
        {
          if (v48 != 58) {
            goto LABEL_103;
          }
          if (!*(void *)(v41 - 64)) {
            goto LABEL_103;
          }
          uint64_t v125 = *(void *)(v41 - 64);
          uint64_t v49 = *(llvm::APInt **)(v41 - 32);
          if (!v49) {
            goto LABEL_103;
          }
        }
        *int v127 = v49;
        if ((sub_1CBF687D0((uint64_t)&v128, *(llvm::Constant **)(v3 - 32)) & 1) == 0)
        {
LABEL_103:
          uint64_t v55 = *(void *)(v3 - 32);
          int v56 = *(unsigned __int8 *)(v55 + 16);
          if (v56 == 5)
          {
            if (*(_WORD *)(v55 + 18) != 30) {
              goto LABEL_135;
            }
            uint64_t v59 = *(llvm::APInt **)(v55 - 32 * (*(_DWORD *)(v55 + 20) & 0x7FFFFFF));
            if (!v59) {
              goto LABEL_135;
            }
            *BOOL v126 = v59;
            uint64_t v58 = *(llvm::APInt **)(v55 - 32 * (*(_DWORD *)(v55 + 20) & 0x7FFFFFF) + 32);
            if (!v58) {
              goto LABEL_135;
            }
          }
          else
          {
            if (v56 != 58) {
              goto LABEL_135;
            }
            uint64_t v57 = *(llvm::APInt **)(v55 - 64);
            if (!v57) {
              goto LABEL_135;
            }
            *BOOL v126 = v57;
            uint64_t v58 = *(llvm::APInt **)(v55 - 32);
            if (!v58) {
              goto LABEL_135;
            }
          }
          *int v127 = v58;
          if ((sub_1CBF687D0((uint64_t)&v128, *(llvm::Constant **)(v3 - 64)) & 1) == 0) {
            goto LABEL_135;
          }
        }
LABEL_126:
        int v65 = *(unsigned __int8 *)(v2 + 16);
        if (v65 == 5)
        {
          if (*(_WORD *)(v2 + 18) != 29) {
            goto LABEL_135;
          }
          unsigned int v68 = (uint64_t *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
          uint64_t v66 = *v68;
          uint64_t v67 = v68[4];
        }
        else
        {
          if (v65 != 57) {
            goto LABEL_135;
          }
          uint64_t v66 = *(void *)(v2 - 64);
          uint64_t v67 = *(void *)(v2 - 32);
        }
        if (v125 == v66 && v124 == v67 || v125 == v67 && v124 == v66) {
          return llvm::Constant::getAllOnesValue(v4, v53, v54);
        }
LABEL_135:
        BOOL v126 = (llvm::APInt **)&v125;
        int v127 = (llvm::APInt **)&v124;
        if (!sub_1CC04308C(&v126, 28, v3)) {
          goto LABEL_145;
        }
        int v69 = *(unsigned __int8 *)(v2 + 16);
        if (v69 == 5)
        {
          if (*(_WORD *)(v2 + 18) != 30) {
            goto LABEL_145;
          }
          unint64_t v72 = (uint64_t *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
          uint64_t v70 = *v72;
          uint64_t v71 = v72[4];
        }
        else
        {
          if (v69 != 58) {
            goto LABEL_145;
          }
          uint64_t v70 = *(void *)(v2 - 64);
          uint64_t v71 = *(void *)(v2 - 32);
        }
        if (v125 == v70 && v124 == v71 || v125 == v71 && v124 == v70) {
          return (void *)v2;
        }
LABEL_145:
        BOOL v126 = (llvm::APInt **)&v125;
        unint64_t v128 = &v124;
        if (sub_1CC046BB0(&v126, 30, v3))
        {
          int v73 = *(unsigned __int8 *)(v2 + 16);
          if (v73 == 5)
          {
            if (*(_WORD *)(v2 + 18) == 28)
            {
              uint64_t v76 = (uint64_t *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
              uint64_t v74 = *v76;
              uint64_t v75 = v76[4];
LABEL_151:
              if (v125 == v74 && v124 == v75 || v125 == v75 && v124 == v74) {
                return (void *)v3;
              }
            }
          }
          else if (v73 == 56)
          {
            uint64_t v74 = *(void *)(v2 - 64);
            uint64_t v75 = *(void *)(v2 - 32);
            goto LABEL_151;
          }
        }
        BOOL v126 = (llvm::APInt **)&v125;
        unint64_t v128 = &v124;
        if (!sub_1CC046BB0(&v126, 29, v3)) {
          goto LABEL_166;
        }
        int v77 = *(unsigned __int8 *)(v2 + 16);
        if (v77 == 5)
        {
          if (*(_WORD *)(v2 + 18) != 30) {
            goto LABEL_166;
          }
          unint64_t v80 = (uint64_t *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
          uint64_t v78 = *v80;
          uint64_t v79 = v80[4];
        }
        else
        {
          if (v77 != 58) {
            goto LABEL_166;
          }
          uint64_t v78 = *(void *)(v2 - 64);
          uint64_t v79 = *(void *)(v2 - 32);
        }
        if ((v125 != v78 || v124 != v79) && (v125 != v79 || v124 != v78))
        {
LABEL_166:
          uint64_t v123 = 0;
          BOOL v126 = (llvm::APInt **)&v123;
          int v127 = (llvm::APInt **)&v125;
          unint64_t v128 = &v124;
          int v81 = *(unsigned __int8 *)(v3 + 16);
          if (v81 != 5)
          {
            if (v81 != 56) {
              goto LABEL_186;
            }
            uint64_t v82 = *(void *)(v3 - 64);
            if (!v82
              || (uint64_t v123 = *(void *)(v3 - 64), !sub_1CC046CD0(&v127, v82))
              || (uint64_t v83 = *(void *)(v3 - 32)) == 0)
            {
              uint64_t v84 = *(void *)(v3 - 32);
              if (!v84) {
                goto LABEL_186;
              }
              uint64_t v123 = *(void *)(v3 - 32);
              if (!sub_1CC046CD0(&v127, v84)) {
                goto LABEL_186;
              }
              uint64_t v83 = *(void *)(v3 - 64);
              if (!v83) {
                goto LABEL_186;
              }
            }
            goto LABEL_184;
          }
          if (*(_WORD *)(v3 + 18) != 28) {
            goto LABEL_186;
          }
          uint64_t v85 = *(_DWORD *)(v3 + 20) & 0x7FFFFFF;
          unsigned int v86 = (uint64_t *)(v3 - 32 * v85);
          uint64_t v87 = *v86;
          if (*v86)
          {
            uint64_t v123 = *v86;
            int v88 = sub_1CC046CD0(&v127, v87);
            uint64_t v89 = *(_DWORD *)(v3 + 20) & 0x7FFFFFF;
            uint64_t v90 = -v89;
            if (v88)
            {
              uint64_t v83 = *(void *)(v3 - 32 * v89 + 32);
              if (v83)
              {
LABEL_184:
                uint64_t v124 = v83;
                v122[0] = v125;
                v122[1] = v83;
                if (sub_1CC046E98(v122, 30, v2)) {
                  return (void *)v123;
                }
LABEL_186:
                v122[0] = 0;
                unsigned __int8 v129 = 0;
                BOOL v126 = (llvm::APInt **)v122;
                int v127 = &v129;
                unint64_t v128 = 0;
                int v93 = *(unsigned __int8 *)(v3 + 16);
                if (v93 == 5)
                {
                  if (*(_WORD *)(v3 + 18) != 30) {
                    goto LABEL_194;
                  }
                  uint64_t v94 = v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF);
                  if (!*(void *)v94) {
                    goto LABEL_194;
                  }
                  v122[0] = *(void *)v94;
                  if (!sub_1CBF5295C((uint64_t)&v127, *(llvm::Constant **)(v94 + 32))) {
                    goto LABEL_194;
                  }
                }
                else
                {
                  if (v93 != 58) {
                    goto LABEL_194;
                  }
                  if (!*(void *)(v3 - 64)) {
                    goto LABEL_194;
                  }
                  v122[0] = *(void *)(v3 - 64);
                  if ((sub_1CBF528D8((uint64_t)&v127, *(unsigned __int8 **)(v3 - 32)) & 1) == 0) {
                    goto LABEL_194;
                  }
                }
                unsigned int v98 = *((_DWORD *)v129 + 2);
                if (!v98) {
                  goto LABEL_211;
                }
                if (v98 > 0x40)
                {
                  if (llvm::APInt::countTrailingOnesSlowCase(v129) == v98) {
                    goto LABEL_211;
                  }
                }
                else if (*(void *)v129 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v98)
                {
                  goto LABEL_211;
                }
LABEL_194:
                BOOL v126 = &v129;
                int v127 = 0;
                unint64_t v128 = v122;
                int v95 = *(unsigned __int8 *)(v3 + 16);
                if (v95 == 5)
                {
                  if (*(_WORD *)(v3 + 18) != 30) {
                    goto LABEL_228;
                  }
                  if (!sub_1CBF5295C((uint64_t)&v126, *(llvm::Constant **)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF))))goto LABEL_228; {
                  uint64_t v96 = *(void *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) + 32);
                  }
                  if (!v96) {
                    goto LABEL_228;
                  }
                }
                else
                {
                  if (v95 != 58) {
                    goto LABEL_228;
                  }
                  if (!sub_1CBF528D8((uint64_t)&v126, *(unsigned __int8 **)(v3 - 64))) {
                    goto LABEL_228;
                  }
                  uint64_t v96 = *(void *)(v3 - 32);
                  if (!v96) {
                    goto LABEL_228;
                  }
                }
                *unint64_t v128 = v96;
                unsigned int v97 = *((_DWORD *)v129 + 2);
                if (v97)
                {
                  if (v97 > 0x40)
                  {
                    if (llvm::APInt::countTrailingOnesSlowCase(v129) != v97) {
                      goto LABEL_228;
                    }
                  }
                  else if (*(void *)v129 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v97)
                  {
                    goto LABEL_228;
                  }
                }
LABEL_211:
                int v99 = *(unsigned __int8 *)(v122[0] + 16);
                if (v99 == 5)
                {
                  if (*(_WORD *)(v122[0] + 18) != 30) {
                    goto LABEL_228;
                  }
                  char v102 = (uint64_t *)(v122[0] - 32 * (*(_DWORD *)(v122[0] + 20) & 0x7FFFFFF));
                  uint64_t v100 = *v102;
                  if (!*v102) {
                    goto LABEL_228;
                  }
                  uint64_t v125 = *v102;
                  uint64_t v101 = v102[4];
                  if (!v101) {
                    goto LABEL_228;
                  }
                }
                else
                {
                  if (v99 != 58) {
                    goto LABEL_228;
                  }
                  uint64_t v100 = *(void *)(v122[0] - 64);
                  if (!v100) {
                    goto LABEL_228;
                  }
                  uint64_t v125 = *(void *)(v122[0] - 64);
                  uint64_t v101 = *(void *)(v122[0] - 32);
                  if (!v101) {
                    goto LABEL_228;
                  }
                }
                uint64_t v124 = v101;
                int v103 = *(unsigned __int8 *)(v2 + 16);
                if (v103 == 5)
                {
                  if (*(_WORD *)(v2 + 18) != 28) {
                    goto LABEL_228;
                  }
                  long long v106 = (uint64_t *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
                  uint64_t v104 = *v106;
                  uint64_t v105 = v106[4];
                }
                else
                {
                  if (v103 != 56) {
                    goto LABEL_228;
                  }
                  uint64_t v104 = *(void *)(v2 - 64);
                  uint64_t v105 = *(void *)(v2 - 32);
                }
                if (v100 == v104 && v101 == v105 || v100 == v105 && v101 == v104) {
                  return (void *)v3;
                }
LABEL_228:
                v122[0] = 0;
                unsigned __int8 v129 = 0;
                BOOL v126 = (llvm::APInt **)v122;
                int v127 = &v129;
                unint64_t v128 = 0;
                int v107 = *(unsigned __int8 *)(v3 + 16);
                if (v107 == 5)
                {
                  if (*(_WORD *)(v3 + 18) != 30) {
                    goto LABEL_236;
                  }
                  uint64_t v108 = v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF);
                  if (!*(void *)v108) {
                    goto LABEL_236;
                  }
                  v122[0] = *(void *)v108;
                  if (!sub_1CBF5295C((uint64_t)&v127, *(llvm::Constant **)(v108 + 32))) {
                    goto LABEL_236;
                  }
                }
                else
                {
                  if (v107 != 58) {
                    goto LABEL_236;
                  }
                  if (!*(void *)(v3 - 64)) {
                    goto LABEL_236;
                  }
                  v122[0] = *(void *)(v3 - 64);
                  if ((sub_1CBF528D8((uint64_t)&v127, *(unsigned __int8 **)(v3 - 32)) & 1) == 0) {
                    goto LABEL_236;
                  }
                }
                unsigned int v112 = *((_DWORD *)v129 + 2);
                if (!v112) {
                  goto LABEL_253;
                }
                if (v112 > 0x40)
                {
                  if (llvm::APInt::countTrailingOnesSlowCase(v129) == v112) {
                    goto LABEL_253;
                  }
                }
                else if (*(void *)v129 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v112)
                {
                  goto LABEL_253;
                }
LABEL_236:
                BOOL v126 = &v129;
                int v127 = 0;
                unint64_t v128 = v122;
                int v109 = *(unsigned __int8 *)(v3 + 16);
                if (v109 == 5)
                {
                  if (*(_WORD *)(v3 + 18) != 30) {
                    return 0;
                  }
                  if (!sub_1CBF5295C((uint64_t)&v126, *(llvm::Constant **)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF))))return 0; {
                  uint64_t v110 = *(void *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) + 32);
                  }
                  if (!v110) {
                    return 0;
                  }
                }
                else
                {
                  if (v109 != 58) {
                    return 0;
                  }
                  if (!sub_1CBF528D8((uint64_t)&v126, *(unsigned __int8 **)(v3 - 64))) {
                    return 0;
                  }
                  uint64_t v110 = *(void *)(v3 - 32);
                  if (!v110) {
                    return 0;
                  }
                }
                *unint64_t v128 = v110;
                unsigned int v111 = *((_DWORD *)v129 + 2);
                if (v111)
                {
                  if (v111 > 0x40)
                  {
                    if (llvm::APInt::countTrailingOnesSlowCase(v129) != v111) {
                      return 0;
                    }
                  }
                  else if (*(void *)v129 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v111)
                  {
                    return 0;
                  }
                }
LABEL_253:
                int v113 = *(unsigned __int8 *)(v122[0] + 16);
                if (v113 == 5)
                {
                  if (*(_WORD *)(v122[0] + 18) != 28) {
                    return 0;
                  }
                  int64_t v116 = (uint64_t *)(v122[0] - 32 * (*(_DWORD *)(v122[0] + 20) & 0x7FFFFFF));
                  uint64_t v114 = *v116;
                  if (!*v116) {
                    return 0;
                  }
                  uint64_t v125 = *v116;
                  uint64_t v115 = v116[4];
                  if (!v115) {
                    return 0;
                  }
                }
                else
                {
                  if (v113 != 56) {
                    return 0;
                  }
                  uint64_t v114 = *(void *)(v122[0] - 64);
                  if (!v114) {
                    return 0;
                  }
                  uint64_t v125 = *(void *)(v122[0] - 64);
                  uint64_t v115 = *(void *)(v122[0] - 32);
                  if (!v115) {
                    return 0;
                  }
                }
                int v117 = *(unsigned __int8 *)(v2 + 16);
                if (v117 == 5)
                {
                  if (*(_WORD *)(v2 + 18) == 30)
                  {
                    int v120 = (uint64_t *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
                    uint64_t v118 = *v120;
                    uint64_t v119 = v120[4];
LABEL_266:
                    if (v114 == v118 && v115 == v119 || v114 == v119 && v115 == v118) {
                      return (void *)v3;
                    }
                  }
                }
                else if (v117 == 58)
                {
                  uint64_t v118 = *(void *)(v2 - 64);
                  uint64_t v119 = *(void *)(v2 - 32);
                  goto LABEL_266;
                }
                return 0;
              }
            }
          }
          else
          {
            uint64_t v90 = -v85;
          }
          uint64_t v91 = v3 + 32 * v90;
          uint64_t v92 = *(void *)(v91 + 32);
          if (!v92) {
            goto LABEL_186;
          }
          uint64_t v123 = *(void *)(v91 + 32);
          if (!sub_1CC046CD0(&v127, v92)) {
            goto LABEL_186;
          }
          uint64_t v83 = *(void *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF));
          if (!v83) {
            goto LABEL_186;
          }
          goto LABEL_184;
        }
        return llvm::Constant::getAllOnesValue(v4, v53, v54);
      }
    }
    uint64_t v124 = v42;
    if (v37 == 5)
    {
      if (*(_WORD *)(v2 + 18) == 29)
      {
        uint64_t v47 = (uint64_t *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
        uint64_t v45 = *v47;
        uint64_t v46 = v47[4];
LABEL_80:
        if (v41 == v45 && v42 == v46 || v41 == v46 && v42 == v45) {
          return (void *)v2;
        }
      }
    }
    else if (v37 == 57)
    {
      uint64_t v45 = *(void *)(v2 - 64);
      uint64_t v46 = *(void *)(v2 - 32);
      goto LABEL_80;
    }
LABEL_84:
    BOOL v126 = (llvm::APInt **)&v125;
    int v127 = (llvm::APInt **)&v124;
    if (v40 != 5)
    {
      if (v40 != 58) {
        goto LABEL_135;
      }
      uint64_t v41 = *(void *)(v3 - 64);
      goto LABEL_87;
    }
    int v43 = *(unsigned __int16 *)(v3 + 18);
LABEL_93:
    if (v43 != 30) {
      goto LABEL_135;
    }
    uint64_t v50 = *(void *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF));
    int v51 = *(unsigned __int8 *)(v50 + 16);
    if (v51 == 5)
    {
      if (*(_WORD *)(v50 + 18) != 30) {
        goto LABEL_117;
      }
      if (!*(void *)(v50 - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF))) {
        goto LABEL_117;
      }
      uint64_t v125 = *(void *)(v50 - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF));
      uint64_t v52 = *(llvm::APInt **)(v50 - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF) + 32);
      if (!v52) {
        goto LABEL_117;
      }
    }
    else if (v51 != 58 {
           || !*(void *)(v50 - 64)
    }
           || (v125 = *(void *)(v50 - 64), (uint64_t v52 = *(llvm::APInt **)(v50 - 32)) == 0))
    {
LABEL_117:
      uint64_t v60 = *(void *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) + 32);
      int v61 = *(unsigned __int8 *)(v60 + 16);
      if (v61 == 5)
      {
        if (*(_WORD *)(v60 + 18) != 30) {
          goto LABEL_135;
        }
        unsigned int v64 = *(llvm::APInt **)(v60 - 32 * (*(_DWORD *)(v60 + 20) & 0x7FFFFFF));
        if (!v64) {
          goto LABEL_135;
        }
        *BOOL v126 = v64;
        uint64_t v63 = *(llvm::APInt **)(v60 - 32 * (*(_DWORD *)(v60 + 20) & 0x7FFFFFF) + 32);
        if (!v63) {
          goto LABEL_135;
        }
      }
      else
      {
        if (v61 != 58) {
          goto LABEL_135;
        }
        unsigned int v62 = *(llvm::APInt **)(v60 - 64);
        if (!v62) {
          goto LABEL_135;
        }
        *BOOL v126 = v62;
        uint64_t v63 = *(llvm::APInt **)(v60 - 32);
        if (!v63) {
          goto LABEL_135;
        }
      }
      *int v127 = v63;
      if (!sub_1CBF68974((uint64_t)&v128, *(llvm::Constant **)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF))))goto LABEL_135; {
      goto LABEL_126;
      }
    }
    *int v127 = v52;
    if (sub_1CBF68974((uint64_t)&v128, *(llvm::Constant **)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) + 32))) {
      goto LABEL_126;
    }
    goto LABEL_117;
  }
  return llvm::Constant::getAllOnesValue(v4, v7, v8);
}

uint64_t sub_1CC046BB0(void **a1, int a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 16);
  char v6 = a2 + 28;
  if (a2 + 28 == v5)
  {
    int v7 = sub_1CBF686A0(a1, 30, *(void *)(a3 - 64));
    uint64_t v8 = *(void *)(a3 - 32);
    if (v7 && v8)
    {
      *a1[2] = v8;
      return 1;
    }
    uint64_t result = sub_1CBF686A0(a1, 30, v8);
    if (result)
    {
      uint64_t v12 = *(void *)(a3 - 64);
      if (v12)
      {
        *a1[2] = v12;
        return 1;
      }
      return 0;
    }
  }
  else
  {
    if (v5 == 5)
    {
      if (*(unsigned __int16 *)(a3 + 18) == a2
        && ((int v9 = sub_1CBF686A0(a1, 30, *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF))),
             uint64_t v10 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32),
             v9)
         && v10
         || sub_1CBF686A0(a1, 30, v10)
         && (uint64_t v10 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF))) != 0))
      {
        *a1[2] = v10;
        char v6 = 1;
      }
      else
      {
        char v6 = 0;
      }
    }
    return (v5 == 5) & v6;
  }
  return result;
}

uint64_t sub_1CC046CD0(void **a1, uint64_t a2)
{
  int v14 = 0;
  uint64_t v15 = 0;
  uint64_t v11 = (llvm::APInt **)&v15;
  uint64_t v12 = &v14;
  uint64_t v13 = 0;
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 30) {
      goto LABEL_14;
    }
    int v5 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    if (!*v5) {
      goto LABEL_14;
    }
    uint64_t v15 = *v5;
    if (!sub_1CBF5295C((uint64_t)&v12, (llvm::Constant *)v5[4])) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v4 != 58) {
      goto LABEL_14;
    }
    if (!*(void *)(a2 - 64)) {
      goto LABEL_14;
    }
    uint64_t v15 = *(void *)(a2 - 64);
    if ((sub_1CBF528D8((uint64_t)&v12, *(unsigned __int8 **)(a2 - 32)) & 1) == 0) {
      goto LABEL_14;
    }
  }
  unsigned int v6 = *((_DWORD *)v14 + 2);
  if (!v6) {
    goto LABEL_27;
  }
  if (v6 > 0x40)
  {
    if (llvm::APInt::countTrailingOnesSlowCase(v14) == v6) {
      goto LABEL_27;
    }
  }
  else if (*(void *)v14 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v6)
  {
    goto LABEL_27;
  }
LABEL_14:
  uint64_t v11 = &v14;
  uint64_t v12 = 0;
  uint64_t v13 = &v15;
  int v7 = *(unsigned __int8 *)(a2 + 16);
  if (v7 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 30) {
      return 0;
    }
    if (!sub_1CBF5295C((uint64_t)&v11, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))))return 0; {
    uint64_t v8 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    }
    if (!v8) {
      return 0;
    }
  }
  else
  {
    if (v7 != 58) {
      return 0;
    }
    if (!sub_1CBF528D8((uint64_t)&v11, *(unsigned __int8 **)(a2 - 64))) {
      return 0;
    }
    uint64_t v8 = *(void *)(a2 - 32);
    if (!v8) {
      return 0;
    }
  }
  *uint64_t v13 = v8;
  unsigned int v9 = *((_DWORD *)v14 + 2);
  if (v9)
  {
    if (v9 > 0x40)
    {
      if (llvm::APInt::countTrailingOnesSlowCase(v14) != v9) {
        return 0;
      }
    }
    else if (*(void *)v14 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v9)
    {
      return 0;
    }
  }
LABEL_27:
  if (v15)
  {
    **a1 = v15;
    return 1;
  }
  return 0;
}

uint64_t sub_1CC046E98(void *a1, int a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 16);
  if (a2 + 28 == v5)
  {
    uint64_t v6 = *(void *)(a3 - 64);
    int v7 = *(unsigned __int8 *)(v6 + 16);
    if (v7 != 5)
    {
      if (v7 != 57) {
        goto LABEL_26;
      }
      uint64_t v8 = *(void *)(v6 - 64);
      if (*a1 != v8)
      {
        uint64_t v9 = *(void *)(v6 - 32);
        goto LABEL_16;
      }
      uint64_t v9 = *(void *)(v6 - 32);
      if (a1[1] != v9)
      {
LABEL_16:
        if (*a1 != v9) {
          goto LABEL_26;
        }
        goto LABEL_23;
      }
LABEL_24:
      if (sub_1CBF687D0((uint64_t)(a1 + 2), *(llvm::Constant **)(a3 - 32))) {
        return 1;
      }
LABEL_26:
      uint64_t v22 = *(void *)(a3 - 32);
      int v23 = *(unsigned __int8 *)(v22 + 16);
      if (v23 != 5)
      {
        if (v23 != 57) {
          return 0;
        }
        uint64_t v24 = *(void *)(v22 - 64);
        if (*a1 != v24)
        {
          uint64_t v25 = *(void *)(v22 - 32);
          goto LABEL_34;
        }
        uint64_t v25 = *(void *)(v22 - 32);
        if (a1[1] != v25)
        {
LABEL_34:
          if (*a1 != v25) {
            return 0;
          }
          goto LABEL_38;
        }
LABEL_39:
        BOOL v28 = *(llvm::Constant **)(a3 - 64);
        return sub_1CBF687D0((uint64_t)(a1 + 2), v28);
      }
      if (*(_WORD *)(v22 + 18) != 29) {
        return 0;
      }
      int v26 = (uint64_t *)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF));
      uint64_t v24 = *v26;
      if (*a1 == *v26)
      {
        uint64_t v27 = v26[4];
        if (a1[1] == v27) {
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t v27 = v26[4];
      }
      if (*a1 != v27) {
        return 0;
      }
LABEL_38:
      if (a1[1] == v24) {
        goto LABEL_39;
      }
      return 0;
    }
    if (*(_WORD *)(v6 + 18) != 29) {
      goto LABEL_26;
    }
    unsigned int v17 = (uint64_t *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
    uint64_t v8 = *v17;
    if (*a1 == *v17)
    {
      uint64_t v18 = v17[4];
      if (a1[1] == v18) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v18 = v17[4];
    }
    if (*a1 != v18) {
      goto LABEL_26;
    }
LABEL_23:
    if (a1[1] != v8) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  if (v5 != 5 || *(unsigned __int16 *)(a3 + 18) != a2) {
    return 0;
  }
  uint64_t v10 = *(_DWORD *)(a3 + 20) & 0x7FFFFFF;
  uint64_t v11 = -v10;
  uint64_t v12 = (llvm::Constant **)(a3 - 32 * v10);
  uint64_t v13 = *v12;
  int v14 = *((unsigned __int8 *)*v12 + 16);
  if (v14 == 5)
  {
    if (*((_WORD *)v13 + 9) != 29) {
      goto LABEL_50;
    }
    uint64_t v19 = (uint64_t *)((char *)v13 - 32 * (*((_DWORD *)v13 + 5) & 0x7FFFFFF));
    uint64_t v15 = *v19;
    if (*a1 == *v19)
    {
      uint64_t v20 = v19[4];
      if (a1[1] == v20) {
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v20 = v19[4];
    }
    if (*a1 != v20) {
      goto LABEL_50;
    }
LABEL_47:
    if (a1[1] != v15) {
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  if (v14 != 57) {
    goto LABEL_50;
  }
  uint64_t v15 = *((void *)v13 - 8);
  if (*a1 != v15)
  {
    uint64_t v16 = *((void *)v13 - 4);
    goto LABEL_43;
  }
  uint64_t v16 = *((void *)v13 - 4);
  if (a1[1] != v16)
  {
LABEL_43:
    if (*a1 != v16) {
      goto LABEL_50;
    }
    goto LABEL_47;
  }
LABEL_48:
  if (sub_1CBF68974((uint64_t)(a1 + 2), v12[4])) {
    return 1;
  }
  uint64_t v11 = -(uint64_t)(*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
LABEL_50:
  uint64_t v29 = a3 + 32 * v11;
  uint64_t v30 = *(void *)(v29 + 32);
  int v31 = *(unsigned __int8 *)(v30 + 16);
  if (v31 == 5)
  {
    if (*(_WORD *)(v30 + 18) != 29) {
      return 0;
    }
    int v34 = (uint64_t *)(v30 - 32 * (*(_DWORD *)(v30 + 20) & 0x7FFFFFF));
    uint64_t v32 = *v34;
    if (*a1 == *v34)
    {
      uint64_t v35 = v34[4];
      if (a1[1] == v35) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v35 = v34[4];
    }
    if (*a1 != v35) {
      return 0;
    }
  }
  else
  {
    if (v31 != 57) {
      return 0;
    }
    uint64_t v32 = *(void *)(v30 - 64);
    if (*a1 == v32)
    {
      uint64_t v33 = *(void *)(v30 - 32);
      if (a1[1] == v33) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v33 = *(void *)(v30 - 32);
    }
    if (*a1 != v33) {
      return 0;
    }
  }
  if (a1[1] != v32) {
    return 0;
  }
LABEL_64:
  BOOL v36 = *(llvm::Constant **)v29;

  return sub_1CBF68974((uint64_t)(a1 + 2), v36);
}

uint64_t sub_1CC0471F4(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1CC045310(a1, a2);
  if (result)
  {
    uint64_t result = 0;
    if (a2)
    {
      if (*(unsigned char *)(a2 + 16) == 84)
      {
        uint64_t v5 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 32));
        if (v5)
        {
          **(void **)(a1 + 40) = v5;
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC047264(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1CC0472D4(a1, a2);
  if (result)
  {
    uint64_t result = 0;
    if (a2)
    {
      if (*(unsigned char *)(a2 + 16) == 84)
      {
        uint64_t v5 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 32));
        if (v5)
        {
          **(void **)(a1 + 40) = v5;
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC0472D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a2)
  {
    if (*(unsigned char *)(a2 + 16) == 84)
    {
      uint64_t v2 = *(void *)(a2 - 32);
      if (v2)
      {
        if (!*(unsigned char *)(v2 + 16)
          && *(void *)(v2 + 24) == *(void *)(a2 + 72)
          && *(_DWORD *)(v2 + 36) == *(_DWORD *)a1)
        {
          uint64_t v2 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 16));
          if (v2)
          {
            **(void **)(a1 + 24) = v2;
            return 1;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v2;
}

uint64_t sub_1CC047354(void *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) == 85
    && ((int v2 = *(_DWORD *)(a2 + 20), (v2 & 0x40000000) != 0)
      ? (uint64_t v3 = *(void *)(a2 - 8))
      : (uint64_t v3 = a2 - 32 * (v2 & 0x7FFFFFF)),
        *a1 == *(void *)v3))
  {
    return sub_1CBF5250C((uint64_t)(a1 + 1), *(llvm::Constant **)(v3 + 32));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1CC04739C(void **a1, int a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 16);
  LOBYTE(v6) = a2 + 28;
  if (a2 + 28 != v5)
  {
    if (v5 != 5) {
      return (v5 == 5) & v6;
    }
    if (*(unsigned __int16 *)(a3 + 18) == a2)
    {
      uint64_t v14 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
      int v15 = sub_1CC046CD0(a1, v14);
      if (v14) {
        BOOL v16 = v15 == 0;
      }
      else {
        BOOL v16 = 1;
      }
      if (v16)
      {
        uint64_t v17 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32);
        int v18 = sub_1CC046CD0(a1, v17);
        if (v17) {
          BOOL v19 = v18 == 0;
        }
        else {
          BOOL v19 = 1;
        }
        if (!v19)
        {
          *a1[1] = v17;
          uint64_t v6 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
          if (!v6) {
            return (v5 == 5) & v6;
          }
          goto LABEL_29;
        }
      }
      else
      {
        *a1[1] = v14;
        uint64_t v6 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32);
        if (v6)
        {
LABEL_29:
          *a1[2] = v6;
          LOBYTE(v6) = 1;
          return (v5 == 5) & v6;
        }
        sub_1CC046CD0(a1, 0);
      }
    }
    LOBYTE(v6) = 0;
    return (v5 == 5) & v6;
  }
  uint64_t v7 = *(void *)(a3 - 64);
  int v8 = sub_1CC046CD0(a1, v7);
  if (v7) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    *a1[1] = v7;
    uint64_t v13 = *(void *)(a3 - 32);
    if (v13) {
      goto LABEL_25;
    }
    sub_1CC046CD0(a1, 0);
    return 0;
  }
  uint64_t v10 = *(void *)(a3 - 32);
  int v11 = sub_1CC046CD0(a1, v10);
  uint64_t result = 0;
  if (v10 && v11)
  {
    *a1[1] = v10;
    uint64_t v13 = *(void *)(a3 - 64);
    if (v13)
    {
LABEL_25:
      *a1[2] = v13;
      return 1;
    }
    return 0;
  }
  return result;
}

void *sub_1CC047528(int a1, llvm::Value *this, llvm::Value *a3, uint64_t a4)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(uint64_t **)a4;
  int v8 = *(uint64_t **)(a4 + 8);
  uint64_t v9 = *(void *)(a4 + 16);
  uint64_t v10 = *(llvm::GlobalValue **)(a4 + 32);
  int v11 = llvm::Value::stripPointerCasts(this);
  uint64_t v108 = v11;
  uint64_t v12 = llvm::Value::stripPointerCasts(a3);
  int v107 = v12;
  if ((a1 & 0xFFFFFFFE) != 0x20 || *((unsigned char *)v12 + 16) != 19) {
    goto LABEL_12;
  }
  char v16 = *(unsigned char *)(a4 + 40);
  if (!v11 || *((unsigned __int8 *)v11 + 16) < 0x1Cu || (uint64_t v17 = v11, !*((void *)v11 + 5))) {
    uint64_t v17 = 0;
  }
  uint64_t v118 = v7;
  uint64_t v119 = 0;
  v120[1] = 0;
  v120[2] = 0;
  v120[0] = v17;
  char v121 = v16;
  if (!sub_1CC1620B8((uint64_t)v11, 0, (uint64_t)&v118))
  {
LABEL_12:
    unsigned int v21 = a1 - 32;
    if (v21 > 5) {
      return 0;
    }
    uint64_t v22 = dword_1CFAC3954[v21];
    sub_1CC03F9A0((uint64_t)&v105, (uint64_t)v7, &v108, v21 < 2, v13, v14, v15);
    sub_1CC03F9A0((uint64_t)&v103, (uint64_t)v7, &v107, v21 < 2, v23, v24, v25);
    BOOL v28 = v107;
    uint64_t v27 = v108;
    if (v108 == v107)
    {
      int v39 = *(void ***)v108;
      int v40 = (uint64_t **)(***(void ***)v108 + 1888);
      if (*(void *)v108 && (v39[1] & 0xFE) == 0x12)
      {
        unsigned int v98 = (llvm::Type *)*((unsigned int *)v39 + 8);
        if (*((_DWORD *)v39 + 2) == 19) {
          llvm::ScalableVectorType::get(v40, v98);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v40, v98);
        }
        int v40 = v99;
      }
      unint64_t v41 = llvm::ICmpInst::compare((uint64_t)&v105, (uint64_t)&v103, v22);
      uint64_t v42 = v40;
      goto LABEL_41;
    }
    if (v21 > 1)
    {
LABEL_139:
      uint64_t v38 = 0;
LABEL_140:
      if (v104 >= 0x41 && v103) {
        MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
      }
      if (v106 >= 0x41 && v105) {
        MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
      }
      return (void *)v38;
    }
    unsigned int v29 = *((unsigned __int8 *)v108 + 16);
    if (v108) {
      BOOL v30 = v29 == 21;
    }
    else {
      BOOL v30 = 0;
    }
    char v31 = !v30;
    if (v30 && *(unsigned char *)(*(void *)v108 + 8) == 15)
    {
      uint64_t v32 = *(void *)(*((void *)v108 + 3) + 112);
      if (v32)
      {
        unsigned int v33 = *((_DWORD *)v108 + 8) + 2;
        if (v33 < *(_DWORD *)(v32 + 8))
        {
          uint64_t v43 = *(void *)(v32 + 8 * v33 + 40);
          if (v43)
          {
            if ((*(unsigned char *)(v43 + 20) & 0x20) != 0)
            {
              int v44 = *((unsigned __int8 *)v107 + 16);
              if (v44 == 3 || v44 == 59)
              {
LABEL_62:
                uint64_t v118 = 0;
                uint64_t v115 = 0;
                goto LABEL_63;
              }
              if (v44 != 21) {
                goto LABEL_76;
              }
              if (*(unsigned char *)(*(void *)v107 + 8) != 15) {
                goto LABEL_76;
              }
              uint64_t v45 = *(void *)(*((void *)v107 + 3) + 112);
              if (!v45) {
                goto LABEL_76;
              }
              int v46 = *((_DWORD *)v107 + 8);
LABEL_59:
              unsigned int v48 = v46 + 2;
              if (v48 >= *(_DWORD *)(v45 + 8)) {
                goto LABEL_76;
              }
              uint64_t v49 = *(void *)(v45 + 8 * v48 + 40);
              if (!v49 || (*(unsigned char *)(v49 + 20) & 0x20) == 0) {
                goto LABEL_76;
              }
              goto LABEL_62;
            }
          }
        }
      }
    }
    int v34 = *((unsigned __int8 *)v107 + 16);
    if (v107
      && v34 == 21
      && *(unsigned char *)(*(void *)v107 + 8) == 15
      && (uint64_t v35 = *(void *)(*((void *)v107 + 3) + 112)) != 0
      && (unsigned int v36 = *((_DWORD *)v107 + 8) + 2, v36 < *(_DWORD *)(v35 + 8))
      && (uint64_t v47 = *(void *)(v35 + 8 * v36 + 40)) != 0
      && (*(unsigned char *)(v47 + 20) & 0x20) != 0)
    {
      if (v29 != 3 && v29 != 59)
      {
        if (v31) {
          goto LABEL_76;
        }
        if (*(unsigned char *)(*(void *)v108 + 8) != 15) {
          goto LABEL_76;
        }
        uint64_t v45 = *(void *)(*((void *)v108 + 3) + 112);
        if (!v45) {
          goto LABEL_76;
        }
        int v46 = *((_DWORD *)v108 + 8);
        goto LABEL_59;
      }
    }
    else if (v29 != 59 || v34 != 3 && v34 != 59)
    {
      goto LABEL_76;
    }
    uint64_t v118 = 0;
    uint64_t v115 = 0;
    if (v108 && v29 >= 0x1C)
    {
      int v37 = (uint64_t *)(*((void *)v108 + 5) + 56);
LABEL_64:
      uint64_t v50 = *v37;
      if (v50 && (uint64_t v51 = *(void *)(v50 + 112)) != 0 && (*(unsigned char *)(v51 + 17) & 1) != 0) {
        uint64_t v52 = 65537;
      }
      else {
        uint64_t v52 = 1;
      }
      if (!llvm::getObjectSize(v108, &v118, (uint64_t)v7, (uint64_t)v8, v52, 0, v26)
        || !llvm::getObjectSize(v28, &v115, (uint64_t)v7, (uint64_t)v8, v52, 0, v53))
      {
        goto LABEL_76;
      }
      unint64_t v54 = (unint64_t)v105;
      uint64_t v55 = &v105[(v106 - 1) >> 6];
      if (v106 < 0x41) {
        uint64_t v55 = (unint64_t *)&v105;
      }
      if ((*v55 >> (v106 - 1))) {
        goto LABEL_76;
      }
      unint64_t v56 = (unint64_t)v103;
      uint64_t v57 = &v103[(v104 - 1) >> 6];
      if (v104 < 0x41) {
        uint64_t v57 = (unint64_t *)&v103;
      }
      if ((*v57 >> (v104 - 1)))
      {
LABEL_76:
        uint64_t v102 = v22;
        uint64_t v118 = v120;
        uint64_t v119 = 0x800000000;
        uint64_t v115 = v117;
        uint64_t v116 = 0x800000000;
        llvm::getUnderlyingObjects((uint64_t)v27, (uint64_t)&v118, 0, (llvm::Value *)6);
        llvm::getUnderlyingObjects((uint64_t)v28, (uint64_t)&v115, 0, (llvm::Value *)6);
        if (v119)
        {
          uint64_t v58 = v118;
          uint64_t v59 = 8 * v119;
          while (1)
          {
            unsigned int v60 = *(unsigned __int8 *)(*v58 + 16);
            if (v60 < 0x1C) {
              break;
            }
            unsigned int v61 = v60 - 33;
            BOOL v62 = v61 > 0x33;
            uint64_t v63 = (1 << v61) & 0x8000000000041;
            BOOL v64 = v62 || v63 == 0;
            if (v64 || (sub_1CBF5BCC4(*v58, 19) & 1) == 0) {
              break;
            }
            ++v58;
            v59 -= 8;
            if (!v59) {
              goto LABEL_85;
            }
          }
          if (v116)
          {
            uint64_t v66 = (uint64_t *)v115;
            uint64_t v67 = (uint64_t *)((char *)v115 + 8 * v116);
            goto LABEL_92;
          }
LABEL_99:
          if (v119)
          {
            int v73 = v118;
            uint64_t v74 = 8 * v119;
            while (sub_1CC04ACDC(*v73))
            {
              ++v73;
              v74 -= 8;
              if (!v74) {
                goto LABEL_103;
              }
            }
            goto LABEL_107;
          }
        }
        else
        {
LABEL_85:
          if (v116)
          {
            unint64_t v65 = 0;
            uint64_t v66 = (uint64_t *)v115;
            uint64_t v67 = (uint64_t *)((char *)v115 + 8 * v116);
            uint64_t v68 = 8 * v116;
            while (sub_1CC04ACDC(v66[v65 / 8]))
            {
              v65 += 8;
              if (v68 == v65) {
                goto LABEL_103;
              }
            }
LABEL_92:
            while (1)
            {
              unsigned int v69 = *(unsigned __int8 *)(*v66 + 16);
              if (v69 < 0x1C) {
                break;
              }
              unsigned int v70 = v69 - 33;
              BOOL v62 = v70 > 0x33;
              uint64_t v71 = (1 << v70) & 0x8000000000041;
              BOOL v72 = v62 || v71 == 0;
              if (v72 || (sub_1CBF5BCC4(*v66, 19) & 1) == 0) {
                break;
              }
              if (++v66 == v67) {
                goto LABEL_99;
              }
            }
LABEL_107:
            uint64_t v38 = 47;
            if (byte_1EBD04470) {
              int v79 = 43;
            }
            else {
              int v79 = 47;
            }
            sub_1CC095244((uint64_t)v27, v79, v8, &v109);
            if (!(_BYTE)v112) {
              goto LABEL_114;
            }
            if (!v10 || (unint64_t v80 = v10, !*((void *)v10 + 5)))
            {
              if (!v28 || *((unsigned __int8 *)v28 + 16) < 0x1Cu || (unint64_t v80 = v28, !*((void *)v28 + 5))) {
                unint64_t v80 = 0;
              }
            }
            int v109 = v7;
            uint64_t v110 = 0;
            unsigned int v111 = v80;
            uint64_t v112 = v9;
            uint64_t v113 = 0;
            char v114 = 1;
            char v81 = sub_1CC1620B8((uint64_t)v28, 0, (uint64_t)&v109);
            uint64_t v82 = v27;
            if ((v81 & 1) == 0)
            {
LABEL_114:
              if (byte_1EBD04470) {
                int v83 = 43;
              }
              else {
                int v83 = 47;
              }
              sub_1CC095244((uint64_t)v28, v83, v8, &v109);
              if (!(_BYTE)v112)
              {
LABEL_133:
                int v84 = 1;
                goto LABEL_134;
              }
              if (!v10 || !*((void *)v10 + 5))
              {
                if (!v27 || *((unsigned __int8 *)v27 + 16) < 0x1Cu || (uint64_t v10 = v27, !*((void *)v27 + 5))) {
                  uint64_t v10 = 0;
                }
              }
              int v109 = v7;
              uint64_t v110 = 0;
              unsigned int v111 = v10;
              uint64_t v112 = v9;
              uint64_t v113 = 0;
              int v84 = 1;
              char v114 = 1;
              int v85 = sub_1CC1620B8((uint64_t)v27, 0, (uint64_t)&v109);
              uint64_t v82 = v28;
              if (!v85)
              {
LABEL_134:
                if (v115 != v117) {
                  free(v115);
                }
                if (v118 != v120) {
                  free(v118);
                }
                if (!v84) {
                  goto LABEL_140;
                }
                goto LABEL_139;
              }
            }
            uint64_t v38 = v102;
            if (v82)
            {
              int v84 = 1;
              if (llvm::PointerMayBeCaptured(v82, (const llvm::Value *)1, 1, 0)) {
                goto LABEL_134;
              }
              unsigned int v86 = *(void ***)v27;
              uint64_t v76 = (uint64_t **)(***(void ***)v27 + 1888);
              if (*(void *)v27 && (v86[1] & 0xFE) == 0x12)
              {
                uint64_t v100 = (llvm::Type *)*((unsigned int *)v86 + 8);
                if (*((_DWORD *)v86 + 2) == 19) {
                  llvm::ScalableVectorType::get(v76, v100);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v76, v100);
                }
                LODWORD(v38) = v102;
              }
              unint64_t v87 = v38 <= 0x28 && ((1 << v38) & 0x15600000055) != 0;
              goto LABEL_132;
            }
            goto LABEL_133;
          }
        }
LABEL_103:
        uint64_t v75 = *(void *)v27;
        uint64_t v76 = (uint64_t **)(***(void ***)v27 + 1888);
        if (*(void *)v27)
        {
          unsigned int v77 = v102;
          if ((*(_DWORD *)(v75 + 8) & 0xFE) == 0x12)
          {
            uint64_t v78 = (llvm::Type *)*(unsigned int *)(v75 + 32);
            if (*(_DWORD *)(v75 + 8) == 19) {
              llvm::ScalableVectorType::get(v76, v78);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v76, v78);
            }
          }
        }
        else
        {
          unsigned int v77 = v102;
        }
        unint64_t v87 = v77 > 0x29 || ((1 << v77) & 0x2A90000AA00) == 0;
LABEL_132:
        uint64_t v38 = (uint64_t)llvm::ConstantInt::get((llvm::ConstantInt *)v76, v87, 0);
        int v84 = 0;
        goto LABEL_134;
      }
      if (v106 >= 0x41)
      {
        int v88 = 0;
        int64_t v89 = ((unint64_t)v106 + 63) >> 6;
        do
        {
          BOOL v62 = v89-- < 1;
          if (v62) {
            break;
          }
          unint64_t v90 = v105[v89];
          v88 += __clz(v90);
        }
        while (!v90);
        unsigned int v91 = v106 | 0xFFFFFFC0;
        if ((v106 & 0x3F) == 0) {
          unsigned int v91 = 0;
        }
        if (v106 - v88 - v91 > 0x40) {
          goto LABEL_76;
        }
        unint64_t v54 = *v105;
      }
      if (v54 >= (unint64_t)v118) {
        goto LABEL_76;
      }
      if (v104 >= 0x41)
      {
        int v92 = 0;
        int64_t v93 = ((unint64_t)v104 + 63) >> 6;
        do
        {
          BOOL v62 = v93-- < 1;
          if (v62) {
            break;
          }
          unint64_t v94 = v103[v93];
          v92 += __clz(v94);
        }
        while (!v94);
        unsigned int v95 = v104 | 0xFFFFFFC0;
        if ((v104 & 0x3F) == 0) {
          unsigned int v95 = 0;
        }
        if (v104 - v92 - v95 > 0x40) {
          goto LABEL_76;
        }
        unint64_t v56 = *v103;
      }
      if (v56 >= (unint64_t)v115) {
        goto LABEL_76;
      }
      uint64_t v96 = *(void *)v27;
      uint64_t v42 = (uint64_t **)(***(void ***)v27 + 1888);
      if (*(void *)v27 && (*(_DWORD *)(v96 + 8) & 0xFE) == 0x12)
      {
        uint64_t v101 = (llvm::Type *)*(unsigned int *)(v96 + 32);
        if (*(_DWORD *)(v96 + 8) == 19) {
          llvm::ScalableVectorType::get(v42, v101);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v42, v101);
        }
      }
      unint64_t v41 = v22 > 0x29 || ((1 << v22) & 0x2A90000AA00) == 0;
LABEL_41:
      uint64_t v38 = (uint64_t)llvm::ConstantInt::get((llvm::ConstantInt *)v42, v41, 0);
      goto LABEL_140;
    }
LABEL_63:
    int v37 = (uint64_t *)((char *)v108 + 24);
    goto LABEL_64;
  }
  uint64_t v18 = *(void *)v11;
  BOOL v19 = (uint64_t **)(***(void ***)v11 + 1888);
  if (*(void *)v11 && (*(_DWORD *)(v18 + 8) & 0xFE) == 0x12)
  {
    unsigned int v97 = (llvm::Type *)*(unsigned int *)(v18 + 32);
    if (*(_DWORD *)(v18 + 8) == 19) {
      llvm::ScalableVectorType::get(v19, v97);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v19, v97);
    }
  }

  return llvm::ConstantInt::get((llvm::ConstantInt *)v19, a1 != 32, 0);
}

llvm::Value *sub_1CC047F34(uint64_t a1, unsigned __int8 *a2, const llvm::APInt *a3, uint64_t a4, int a5)
{
  if (!a5) {
    return 0;
  }
  uint64_t v10 = a2;
  uint64_t v11 = a1;
  if (a2[16] == 85)
  {
    uint64_t v12 = (const llvm::APInt *)a2;
    uint64_t v10 = (unsigned __int8 *)a3;
  }
  else
  {
    uint64_t v12 = a3;
    switch((int)a1)
    {
      case 2:
        uint64_t v11 = 4;
        break;
      case 3:
        uint64_t v11 = 5;
        break;
      case 4:
        uint64_t v11 = 2;
        break;
      case 5:
        uint64_t v11 = 3;
        break;
      case 10:
        uint64_t v11 = 12;
        break;
      case 11:
        uint64_t v11 = 13;
        break;
      case 12:
        uint64_t v11 = 10;
        break;
      case 13:
        uint64_t v11 = 11;
        break;
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
        __break(1u);
        unint64_t v56 = 0;
        uint64_t v35 = v50;
        BOOL v19 = v51;
        uint64_t v21 = v52;
        goto LABEL_54;
      case 34:
        uint64_t v11 = 36;
        break;
      case 35:
        uint64_t v11 = 37;
        break;
      case 36:
        uint64_t v11 = 34;
        break;
      case 37:
        uint64_t v11 = 35;
        break;
      case 38:
        uint64_t v11 = 40;
        break;
      case 39:
        uint64_t v11 = 41;
        break;
      case 40:
        uint64_t v11 = 38;
        break;
      case 41:
        uint64_t v11 = 39;
        break;
      default:
        goto LABEL_22;
    }
    uint64_t v12 = a3;
  }
LABEL_22:
  uint64_t v5 = (a5 - 1);
  uint64_t v6 = (llvm *)*((void *)v12 - 12);
  uint64_t v13 = (llvm::ConstantExpr *)*((void *)v12 - 8);
  int v8 = (llvm::ConstantExpr *)*((void *)v12 - 4);
  uint64_t v14 = *(uint64_t ***)v6;
  uint64_t v15 = **(uint64_t ***)v6;
  uint64_t v16 = *v15;
  uint64_t Splat = *(void **)(*v15 + 1560);
  if (!Splat)
  {
    int v37 = *(llvm::ConstantInt **)(v16 + 1888);
    unsigned int v38 = *(_DWORD *)(v16 + 1896);
    unsigned int v57 = v38 >> 8;
    if (v38 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v39 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v38) + 63);
    if (v38 <= 0xFF) {
      LOBYTE(v39) = 0;
    }
    unint64_t v56 = v39 & 1;
    uint64_t Splat = llvm::ConstantInt::get(v37, (llvm::LLVMContext *)&v56, a3);
    if (v57 >= 0x41 && v56)
    {
      unint64_t v54 = Splat;
      MEMORY[0x1D25D9CB0](v56, 0x1000C8000313F17);
      uint64_t Splat = v54;
    }
    *(void *)(v16 + 1560) = Splat;
  }
  if ((v14[1] & 0xFE) == 0x12) {
    uint64_t Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v14 + 8) | ((unint64_t)(*((_DWORD *)v14 + 2) == 19) << 32)), (uint64_t)Splat);
  }
  uint64_t result = sub_1CC04ADD0(v11, v13, v10, (uint64_t)v6, a4, v5, (uint64_t)Splat);
  if (!result) {
    return result;
  }
  uint64_t v7 = (uint64_t)result;
  BOOL v19 = *(uint64_t ***)v6;
  uint64_t v20 = **(uint64_t ***)v6;
  uint64_t v21 = *v20;
  uint64_t v22 = *(void **)(*v20 + 1568);
  if (!v22)
  {
    uint64_t v35 = *(llvm::ConstantInt **)(v21 + 1888);
    unsigned int v36 = *(_DWORD *)(v21 + 1896);
    unsigned int v57 = v36 >> 8;
    if (v36 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v56 = 0;
LABEL_54:
    uint64_t v22 = llvm::ConstantInt::get(v35, (llvm::LLVMContext *)&v56, a3);
    if (v57 >= 0x41 && v56)
    {
      uint64_t v53 = v22;
      MEMORY[0x1D25D9CB0](v56, 0x1000C8000313F17);
      uint64_t v22 = v53;
    }
    *(void *)(v21 + 1568) = v22;
  }
  if ((v19[1] & 0xFE) == 0x12) {
    uint64_t v22 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v19 + 8) | ((unint64_t)(*((_DWORD *)v19 + 2) == 19) << 32)), (uint64_t)v22);
  }
  uint64_t result = sub_1CC04ADD0(v11, v8, v10, (uint64_t)v6, a4, v5, (uint64_t)v22);
  if (!result) {
    return result;
  }
  uint64_t v23 = result;
  if ((llvm::Value *)v7 == result) {
    return (llvm::Value *)v7;
  }
  if (((*(_DWORD *)(*(void *)v6 + 8) & 0xFE) == 18) != ((*(_DWORD *)(*(void *)v10 + 8) & 0xFE) == 18)) {
    return 0;
  }
  unsigned int v24 = *((unsigned __int8 *)result + 16);
  if (v24 > 0x14) {
    goto LABEL_39;
  }
  if (v24 == 16)
  {
    uint64_t v25 = *((unsigned int *)result + 8);
    if (v25 < 0x41)
    {
      if (*((void *)result + 3)) {
        goto LABEL_36;
      }
LABEL_37:
      if (sub_1CC16A138(v7, (uint64_t)v6, 0))
      {
        uint64_t result = sub_1CC02C2C8(v6, (llvm::Constant *)v7, a4, v5, v26, v27);
        if (result) {
          return result;
        }
      }
      goto LABEL_39;
    }
    int v41 = 0;
    int64_t v42 = (unint64_t)(v25 + 63) >> 6;
    do
    {
      BOOL v43 = v42-- < 1;
      if (v43) {
        break;
      }
      unint64_t v44 = *(void *)(*((void *)result + 3) + 8 * v42);
      v41 += __clz(v44);
    }
    while (!v44);
    int v45 = v25 | 0xFFFFFFC0;
    if ((v25 & 0x3F) == 0) {
      int v45 = 0;
    }
    if (v41 + v45 == v25) {
      goto LABEL_37;
    }
  }
  else if (v24 == 17)
  {
    if (sub_1CB844168((uint64_t)result, 0.0)) {
      goto LABEL_37;
    }
  }
  else if (v24 - 18 < 3 || v24 == 13)
  {
    goto LABEL_37;
  }
LABEL_36:
  if (sub_1CC03F414((uint64_t)&v56, v23)) {
    goto LABEL_37;
  }
LABEL_39:
  if (!sub_1CBF5250C((uint64_t)&v56, (llvm::Constant *)v7)
    || !sub_1CC16A138((uint64_t)v23, (uint64_t)v6, 0)
    || (uint64_t result = sub_1CC02DBDC(v6, v23, a4, v5, v28, v29)) == 0)
  {
    if (!sub_1CBF5250C((uint64_t)&v55, v23)) {
      return 0;
    }
    unsigned int v32 = *(unsigned __int8 *)(v7 + 16);
    if (v32 > 0x14) {
      return 0;
    }
    if (v32 == 16)
    {
      uint64_t v33 = *(unsigned int *)(v7 + 32);
      if (v33 < 0x41)
      {
        if (!*(void *)(v7 + 24)) {
          goto LABEL_48;
        }
LABEL_47:
        if (sub_1CC03F414((uint64_t)&v56, (llvm::Constant *)v7)) {
          goto LABEL_48;
        }
        return 0;
      }
      int v46 = 0;
      int64_t v47 = (unint64_t)(v33 + 63) >> 6;
      do
      {
        BOOL v43 = v47-- < 1;
        if (v43) {
          break;
        }
        unint64_t v48 = *(void *)(*(void *)(v7 + 24) + 8 * v47);
        v46 += __clz(v48);
      }
      while (!v48);
      int v49 = v33 | 0xFFFFFFC0;
      if ((v33 & 0x3F) == 0) {
        int v49 = 0;
      }
      if (v46 + v49 != v33) {
        goto LABEL_47;
      }
    }
    else if (v32 == 17)
    {
      if ((sub_1CB844168(v7, 0.0) & 1) == 0) {
        goto LABEL_47;
      }
    }
    else if (v32 - 18 >= 3 && v32 != 13)
    {
      goto LABEL_47;
    }
LABEL_48:
    AllOnesValue = (llvm::Constant *)llvm::Constant::getAllOnesValue(*(llvm::Constant **)v6, v30, v31);
    uint64_t result = (llvm::Value *)sub_1CC02EA0C(v6, AllOnesValue);
    if (result) {
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CC048604(uint64_t a1, llvm::Instruction *a2, llvm::Value *a3, uint64_t a4, int a5)
{
  if (a5)
  {
    uint64_t v7 = a2;
    uint64_t v8 = a1;
    if (*((unsigned char *)a2 + 16) == 83)
    {
      uint64_t v9 = a2;
      uint64_t v7 = a3;
    }
    else
    {
      uint64_t v9 = a3;
      switch((int)a1)
      {
        case 2:
          uint64_t v8 = 4;
          goto LABEL_21;
        case 3:
          uint64_t v8 = 5;
          goto LABEL_21;
        case 4:
          uint64_t v8 = 2;
          goto LABEL_21;
        case 5:
          uint64_t v8 = 3;
          goto LABEL_21;
        case 10:
          uint64_t v8 = 12;
          goto LABEL_21;
        case 11:
          uint64_t v8 = 13;
          goto LABEL_21;
        case 12:
          uint64_t v8 = 10;
          goto LABEL_21;
        case 13:
          uint64_t v8 = 11;
          goto LABEL_21;
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
          __break(1u);
          JUMPOUT(0x1CC048810);
        case 34:
          uint64_t v8 = 36;
          goto LABEL_21;
        case 35:
          uint64_t v8 = 37;
          goto LABEL_21;
        case 36:
          uint64_t v8 = 34;
          goto LABEL_21;
        case 37:
          uint64_t v8 = 35;
          goto LABEL_21;
        case 38:
          uint64_t v8 = 40;
          goto LABEL_21;
        case 39:
          uint64_t v8 = 41;
          goto LABEL_21;
        case 40:
          uint64_t v8 = 38;
          goto LABEL_21;
        case 41:
          uint64_t v8 = 39;
LABEL_21:
          uint64_t v9 = a3;
          break;
        default:
          break;
      }
    }
    if (sub_1CC04041C(v7, v9, *(llvm::DominatorTree **)(a4 + 16)))
    {
      uint64_t v10 = *((_DWORD *)v9 + 5) & 0x7FFFFFF;
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = (a5 - 1);
        uint64_t v15 = 32 * v10;
        while (1)
        {
          int v16 = *((_DWORD *)v9 + 5);
          if ((v16 & 0x40000000) != 0) {
            uint64_t v17 = (char *)*((void *)v9 - 1);
          }
          else {
            uint64_t v17 = (char *)v9 - 32 * (v16 & 0x7FFFFFF);
          }
          uint64_t v18 = *(void *)&v17[32 * *((unsigned int *)v9 + 15) + v11];
          uint64_t v19 = *(void *)(v18 + 40);
          if (v19 == v18 + 40)
          {
            uint64_t v20 = 0;
          }
          else
          {
            if (v19) {
              uint64_t v20 = v19 - 24;
            }
            else {
              uint64_t v20 = 0;
            }
            if (*(unsigned __int8 *)(v20 + 16) - 29 >= 0xB) {
              uint64_t v20 = 0;
            }
          }
          uint64_t v21 = *(llvm::Instruction **)&v17[v12];
          if (v21 == v9)
          {
            uint64_t result = v13;
          }
          else
          {
            long long v22 = *(_OWORD *)(a4 + 32);
            v24[1] = *(_OWORD *)(a4 + 16);
            long long v25 = v22;
            v24[0] = *(_OWORD *)a4;
            *(void *)&long long v25 = v20;
            uint64_t result = sub_1CC03A634(v8, v21, v7, v24, v14);
            if (!result) {
              return result;
            }
            if (v13 && result != v13) {
              return 0;
            }
          }
          v12 += 32;
          v11 += 8;
          uint64_t v13 = result;
          if (v15 == v12) {
            return result;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CC0488B8(void **a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
  unsigned int v4 = v3 - 28;
  BOOL v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  int v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B) {
      unsigned int v4 = *(unsigned __int16 *)(a2 + 18);
    }
    if (v4 == 43
      && ((int v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (uint64_t v9 = *(uint64_t **)(a2 - 8))
        : (uint64_t v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (uint64_t v10 = *v9) != 0))
    {
      **a1 = v10;
      int v2 = 1;
    }
    else
    {
      int v2 = 0;
    }
  }
  return v2 & (v7 ^ 1u);
}

llvm::Value *sub_1CC048924(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (uint64_t **)(***(void ***)a3 + 1888);
  if (*(void *)a3) {
    BOOL v10 = (*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 18;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v124 = (llvm::Type *)*(unsigned int *)(*(void *)a3 + 32);
    uint64_t v125 = (uint64_t **)(***(void ***)a3 + 1888);
    if (*(_DWORD *)(*(void *)a3 + 8) == 19) {
      llvm::ScalableVectorType::get(v125, v124);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v125, v124);
    }
    uint64_t v9 = v126;
  }
  int v11 = *(unsigned __int8 *)(a2 + 16);
  if (v11 == 5)
  {
    int v14 = *(unsigned __int16 *)(a2 + 18);
    if (v14 != 29) {
      goto LABEL_71;
    }
    uint64_t v15 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    uint64_t Splat = *(void **)v15;
    uint64_t v13 = *(void **)(v15 + 32);
    if (Splat) {
      BOOL v16 = v13 == (void *)a3;
    }
    else {
      BOOL v16 = 0;
    }
    if (v16) {
      goto LABEL_18;
    }
    goto LABEL_15;
  }
  if (v11 != 57)
  {
LABEL_67:
    if (v11 == 56)
    {
      if (*(void *)(a2 - 32) == a3)
      {
        int v42 = 56;
        goto LABEL_79;
      }
      int v41 = (void *)(a2 - 64);
      int v42 = 56;
LABEL_76:
      if (*v41 != a3)
      {
LABEL_81:
        if (v42 != 5) {
          goto LABEL_87;
        }
        int v14 = *(unsigned __int16 *)(a2 + 18);
        goto LABEL_83;
      }
LABEL_79:
      if (a1 == 37) {
        goto LABEL_282;
      }
      if (a1 == 34) {
        goto LABEL_270;
      }
      goto LABEL_81;
    }
    if (v11 == 50)
    {
      BOOL v43 = (void *)(a2 - 32);
      goto LABEL_86;
    }
    if (v11 != 5) {
      goto LABEL_87;
    }
    int v14 = *(unsigned __int16 *)(a2 + 18);
LABEL_71:
    if (v14 != 28)
    {
LABEL_83:
      if (v14 != 22) {
        goto LABEL_87;
      }
      BOOL v43 = (void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
LABEL_86:
      if (*v43 == a3)
      {
        switch(a1)
        {
          case ' ':
          case '""':
          case '#':
            goto LABEL_270;
          case '!':
          case '$':
          case '%':
            goto LABEL_282;
          case '&':
          case '\'':
            int64_t v47 = *(uint64_t **)(a4 + 24);
            uint64_t v48 = *(void *)(a4 + 32);
            int v49 = *(uint64_t **)(a4 + 16);
            if (!v48 || !*(void *)(v48 + 40))
            {
              if (*(unsigned __int8 *)(a3 + 16) < 0x1Cu || (uint64_t v48 = a3, !*(void *)(a3 + 40))) {
                uint64_t v48 = 0;
              }
            }
            unsigned int v152 = *(const llvm::DataLayout **)a4;
            BOOL v153 = v47;
            unsigned int v154 = (void *)v48;
            BOOL v155 = v49;
            uint64_t v156 = 0;
            char v157 = 1;
            sub_1CC16089C((uint64_t *)a3, 0, &v152, (uint64_t)&v145);
            unsigned int v50 = v146;
            uint64_t v51 = (uint64_t *)(v145 + 8 * ((v146 - 1) >> 6));
            if (v146 < 0x41) {
              uint64_t v51 = &v145;
            }
            uint64_t v52 = 1 << (v146 - 1);
            uint64_t v53 = *v51;
            if (LODWORD(v148[0]) >= 0x41 && v147)
            {
              MEMORY[0x1D25D9CB0](v147, 0x1000C8000313F17);
              unsigned int v50 = v146;
            }
            uint64_t v54 = v52 & v53;
            if (v50 >= 0x41 && v145) {
              MEMORY[0x1D25D9CB0](v145, 0x1000C8000313F17);
            }
            if (!v54) {
              break;
            }
            goto LABEL_270;
          case '(':
          case ')':
            char v114 = *(uint64_t **)(a4 + 24);
            uint64_t v115 = *(void *)(a4 + 32);
            uint64_t v116 = *(uint64_t **)(a4 + 16);
            if (!v115 || !*(void *)(v115 + 40))
            {
              if (*(unsigned __int8 *)(a3 + 16) < 0x1Cu || (uint64_t v115 = a3, !*(void *)(a3 + 40))) {
                uint64_t v115 = 0;
              }
            }
            unsigned int v152 = *(const llvm::DataLayout **)a4;
            BOOL v153 = v114;
            unsigned int v154 = (void *)v115;
            BOOL v155 = v116;
            uint64_t v156 = 0;
            char v157 = 1;
            sub_1CC16089C((uint64_t *)a3, 0, &v152, (uint64_t)&v145);
            unsigned int v117 = v146;
            uint64_t v118 = (uint64_t *)(v145 + 8 * ((v146 - 1) >> 6));
            if (v146 < 0x41) {
              uint64_t v118 = &v145;
            }
            uint64_t v119 = 1 << (v146 - 1);
            uint64_t v120 = *v118;
            if (LODWORD(v148[0]) >= 0x41 && v147)
            {
              MEMORY[0x1D25D9CB0](v147, 0x1000C8000313F17);
              unsigned int v117 = v146;
            }
            uint64_t v121 = v119 & v120;
            if (v117 >= 0x41 && v145) {
              MEMORY[0x1D25D9CB0](v145, 0x1000C8000313F17);
            }
            if (v121) {
              goto LABEL_282;
            }
            break;
          default:
            break;
        }
      }
LABEL_87:
      unsigned int v44 = *(unsigned __int8 *)(a2 + 16);
      uint64_t v45 = -2;
      if (v44 > 0x31)
      {
        if (v44 != 50)
        {
          if (v44 != 54) {
            goto LABEL_118;
          }
          goto LABEL_101;
        }
      }
      else
      {
        if (v44 != 5)
        {
          if (v44 != 47) {
            goto LABEL_118;
          }
LABEL_115:
          if (*(void *)(a2 + 32 * v45) == a3) {
            goto LABEL_116;
          }
          goto LABEL_118;
        }
        int v46 = *(unsigned __int16 *)(a2 + 18);
        if (v46 != 22) {
          goto LABEL_99;
        }
        uint64_t v45 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
      }
      if (*(void *)(a2 + 32 * v45) == a3)
      {
        if (a1 == 34) {
          goto LABEL_270;
        }
        if (a1 == 37) {
          goto LABEL_282;
        }
      }
      if (v44 != 5) {
        goto LABEL_118;
      }
      int v46 = *(unsigned __int16 *)(a2 + 18);
LABEL_99:
      if (v46 != 26)
      {
LABEL_104:
        if (v46 != 19)
        {
          uint64_t v151 = 0;
          unsigned int v152 = (const llvm::DataLayout *)a3;
          BOOL v153 = &v151;
          unsigned int v154 = 0;
          goto LABEL_128;
        }
        uint64_t v45 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
        goto LABEL_115;
      }
      uint64_t v45 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
LABEL_101:
      if (*(void *)(a2 + 32 * v45) == a3)
      {
LABEL_116:
        if (a1 == 37) {
          goto LABEL_282;
        }
        if (a1 == 34) {
          goto LABEL_270;
        }
        goto LABEL_118;
      }
      if (v44 != 5)
      {
LABEL_118:
        uint64_t v151 = 0;
        unsigned int v152 = (const llvm::DataLayout *)a3;
        BOOL v153 = &v151;
        unsigned int v154 = 0;
        if (v44 == 54)
        {
          if (*(void *)(a2 - 64) != a3
            || !sub_1CBF528D8((uint64_t)&v153, *(unsigned __int8 **)(a2 - 32)))
          {
            goto LABEL_140;
          }
LABEL_131:
          unint64_t v56 = (void *)v151;
          uint64_t v57 = *(unsigned int *)(v151 + 8);
          if (v57 >= 0x41)
          {
            int v58 = 0;
            int64_t v59 = (unint64_t)(v57 + 63) >> 6;
            do
            {
              BOOL v81 = v59-- < 1;
              if (v81) {
                break;
              }
              unint64_t v60 = *(void *)(*(void *)v151 + 8 * v59);
              v58 += __clz(v60);
            }
            while (!v60);
            int v61 = v57 | 0xFFFFFFC0;
            if ((v57 & 0x3F) == 0) {
              int v61 = 0;
            }
            if ((v57 - v58 - v61) > 0x40) {
              goto LABEL_157;
            }
            unint64_t v56 = *(void **)v151;
          }
          if (*v56)
          {
LABEL_157:
            unsigned int v70 = *(uint64_t **)(a4 + 24);
            uint64_t v71 = *(void *)(a4 + 32);
            BOOL v72 = *(uint64_t **)(a4 + 16);
            if (!v71 || !*(void *)(v71 + 40))
            {
              if (!a3 || *(unsigned __int8 *)(a3 + 16) < 0x1Cu || (uint64_t v71 = a3, !*(void *)(a3 + 40))) {
                uint64_t v71 = 0;
              }
            }
            unsigned int v152 = *(const llvm::DataLayout **)a4;
            BOOL v153 = v70;
            unsigned int v154 = (void *)v71;
            BOOL v155 = v72;
            uint64_t v156 = 0;
            char v157 = 1;
            if (sub_1CC1620B8(a3, 0, (uint64_t)&v152))
            {
              switch(a1)
              {
                case ' ':
                case '#':
                  goto LABEL_270;
                case '!':
                case '$':
                  goto LABEL_282;
                default:
                  break;
              }
            }
LABEL_161:
            uint64_t v149 = 0;
            uint64_t v150 = 0;
            unsigned int v152 = (const llvm::DataLayout *)a3;
            BOOL v153 = &v150;
            unsigned int v154 = 0;
            BOOL v155 = &v149;
            uint64_t v156 = 0;
            int v73 = *(unsigned __int8 *)(a2 + 16);
            if (v73 == 5)
            {
              if (*(_WORD *)(a2 + 18) != 19) {
                goto LABEL_187;
              }
              uint64_t v76 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
              int v77 = *(unsigned __int8 *)(v76 + 16);
              if (v77 == 5)
              {
                if (*(_WORD *)(v76 + 18) != 17) {
                  goto LABEL_187;
                }
                uint64_t v79 = v76 - 32 * (*(_DWORD *)(v76 + 20) & 0x7FFFFFF);
                if (*(void *)v79 != a3
                  || !sub_1CBF5295C((uint64_t)&v153, *(llvm::Constant **)(v79 + 32)))
                {
                  goto LABEL_187;
                }
              }
              else if (v77 != 45 {
                     || *(void *)(v76 - 64) != a3
              }
                     || (sub_1CBF528D8((uint64_t)&v153, *(unsigned __int8 **)(v76 - 32)) & 1) == 0)
              {
                goto LABEL_187;
              }
              if ((sub_1CBF5295C((uint64_t)&v155, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) == 0)goto LABEL_187; {
            }
              }
            else
            {
              if (v73 != 47) {
                goto LABEL_187;
              }
              uint64_t v74 = *(void *)(a2 - 64);
              int v75 = *(unsigned __int8 *)(v74 + 16);
              if (v75 == 5)
              {
                if (*(_WORD *)(v74 + 18) != 17) {
                  goto LABEL_187;
                }
                uint64_t v78 = v74 - 32 * (*(_DWORD *)(v74 + 20) & 0x7FFFFFF);
                if (*(void *)v78 != a3
                  || !sub_1CBF5295C((uint64_t)&v153, *(llvm::Constant **)(v78 + 32)))
                {
                  goto LABEL_187;
                }
              }
              else if (v75 != 45 {
                     || *(void *)(v74 - 64) != a3
              }
                     || (sub_1CBF528D8((uint64_t)&v153, *(unsigned __int8 **)(v74 - 32)) & 1) == 0)
              {
                goto LABEL_187;
              }
              if (!sub_1CBF528D8((uint64_t)&v155, *(unsigned __int8 **)(a2 - 32))) {
                goto LABEL_187;
              }
            }
            uint64_t v80 = *(unsigned int *)(v150 + 8);
            if (v80 > 0x40)
            {
              unint64_t v132 = ((unint64_t)(v80 + 63) >> 3) & 0x3FFFFFF8;
              while (v132)
              {
                unint64_t v133 = *(void *)(*(void *)v150 - 8 + v132);
                unint64_t v134 = *(void *)(*(void *)v149 - 8 + v132);
                v132 -= 8;
                BOOL v81 = v133 > v134;
                if (v133 != v134) {
                  goto LABEL_185;
                }
              }
              goto LABEL_268;
            }
            BOOL v81 = *(void *)v150 > *(void *)v149;
LABEL_185:
            if (!v81) {
              goto LABEL_268;
            }
LABEL_187:
            uint64_t v145 = a3;
            unsigned __int8 v146 = &v150;
            uint64_t v82 = v148;
            uint64_t v147 = 0;
            v148[0] = &v149;
            v148[1] = 0;
            int v83 = *(unsigned __int8 *)(a2 + 16);
            if (v83 == 5)
            {
              if (*(_WORD *)(a2 + 18) != 26) {
                goto LABEL_221;
              }
              uint64_t v86 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
              int v87 = *(unsigned __int8 *)(v86 + 16);
              if (v87 == 5)
              {
                if (*(_WORD *)(v86 + 18) != 17) {
                  goto LABEL_221;
                }
                uint64_t v89 = v86 - 32 * (*(_DWORD *)(v86 + 20) & 0x7FFFFFF);
                if (*(void *)v89 != a3
                  || !sub_1CBF5295C((uint64_t)&v146, *(llvm::Constant **)(v89 + 32)))
                {
                  goto LABEL_221;
                }
              }
              else if (v87 != 45 {
                     || *(void *)(v86 - 64) != a3
              }
                     || (sub_1CBF528D8((uint64_t)&v146, *(unsigned __int8 **)(v86 - 32)) & 1) == 0)
              {
                goto LABEL_221;
              }
              if (!sub_1CBF5295C((uint64_t)v148, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)))goto LABEL_221; {
            }
              }
            else
            {
              if (v83 != 54) {
                goto LABEL_221;
              }
              uint64_t v84 = *(void *)(a2 - 64);
              int v85 = *(unsigned __int8 *)(v84 + 16);
              if (v85 == 5)
              {
                if (*(_WORD *)(v84 + 18) != 17) {
                  goto LABEL_221;
                }
                uint64_t v88 = v84 - 32 * (*(_DWORD *)(v84 + 20) & 0x7FFFFFF);
                if (*(void *)v88 != a3
                  || !sub_1CBF5295C((uint64_t)&v146, *(llvm::Constant **)(v88 + 32)))
                {
                  goto LABEL_221;
                }
              }
              else if (v85 != 45 {
                     || *(void *)(v84 - 64) != a3
              }
                     || (sub_1CBF528D8((uint64_t)&v146, *(unsigned __int8 **)(v84 - 32)) & 1) == 0)
              {
                goto LABEL_221;
              }
              if ((sub_1CBF528D8((uint64_t)v148, *(unsigned __int8 **)(a2 - 32)) & 1) == 0)
              {
LABEL_221:
                int v96 = 0;
LABEL_222:
                uint64_t v139 = a3;
                unsigned __int8 v140 = &v150;
                uint64_t v141 = 0;
                v142[0] = &v149;
                v142[1] = 0;
                int v97 = *(unsigned __int8 *)(a2 + 16);
                if (v97 == 5)
                {
                  if (*(_WORD *)(a2 + 18) != 19) {
                    goto LABEL_259;
                  }
                  uint64_t v100 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
                  int v101 = *(unsigned __int8 *)(v100 + 16);
                  if (v101 == 5)
                  {
                    if (*(_WORD *)(v100 + 18) != 25) {
                      goto LABEL_259;
                    }
                    uint64_t v103 = v100 - 32 * (*(_DWORD *)(v100 + 20) & 0x7FFFFFF);
                    if (*(void *)v103 != a3
                      || !sub_1CBF5295C((uint64_t)&v140, *(llvm::Constant **)(v103 + 32)))
                    {
                      goto LABEL_259;
                    }
                  }
                  else if (v101 != 53 {
                         || *(void *)(v100 - 64) != a3
                  }
                         || (sub_1CBF528D8((uint64_t)&v140, *(unsigned __int8 **)(v100 - 32)) & 1) == 0)
                  {
                    goto LABEL_259;
                  }
                  if (!sub_1CBF5295C((uint64_t)v142, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)))goto LABEL_259; {
                }
                  }
                else
                {
                  if (v97 != 47) {
                    goto LABEL_259;
                  }
                  uint64_t v98 = *(void *)(a2 - 64);
                  int v99 = *(unsigned __int8 *)(v98 + 16);
                  if (v99 == 5)
                  {
                    if (*(_WORD *)(v98 + 18) != 25) {
                      goto LABEL_259;
                    }
                    uint64_t v102 = v98 - 32 * (*(_DWORD *)(v98 + 20) & 0x7FFFFFF);
                    if (*(void *)v102 != a3
                      || !sub_1CBF5295C((uint64_t)&v140, *(llvm::Constant **)(v102 + 32)))
                    {
                      goto LABEL_259;
                    }
                  }
                  else if (v99 != 53 {
                         || *(void *)(v98 - 64) != a3
                  }
                         || (sub_1CBF528D8((uint64_t)&v140, *(unsigned __int8 **)(v98 - 32)) & 1) == 0)
                  {
                    goto LABEL_259;
                  }
                  if ((sub_1CBF528D8((uint64_t)v142, *(unsigned __int8 **)(a2 - 32)) & 1) == 0)
                  {
LABEL_259:
                    if ((v96 & 1) == 0) {
                      return 0;
                    }
                    BOOL v95 = 0;
                    goto LABEL_261;
                  }
                }
                unint64_t v104 = *(unsigned int *)(v150 + 8);
                if (v104 > 0x40) {
                  operator new[]();
                }
                unint64_t v105 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v104;
                if (!v104) {
                  LOBYTE(v105) = 0;
                }
                int v106 = *(_DWORD *)(v150 + 8);
                if (*(void *)v150 <= v104) {
                  int v106 = *(void *)v150;
                }
                unint64_t v107 = (v105 & 1) << v106;
                if (v104 == v106) {
                  unint64_t v107 = 0;
                }
                unint64_t v108 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v104;
                if (!v104) {
                  unint64_t v108 = 0;
                }
                unint64_t v138 = v108 & v107;
                BOOL v109 = (v108 & v107) > *(void *)v149;
                if (v138 < *(void *)v149) {
                  int v110 = -1;
                }
                else {
                  int v110 = v109;
                }
                BOOL v95 = v110 < 1;
                if (!v96)
                {
                  if (v110 > 0) {
                    return 0;
                  }
LABEL_268:
                  if (a1 != 37)
                  {
                    if (a1 == 34)
                    {
LABEL_270:
                      uint64_t v111 = **v9;
                      uint64_t Splat = *(void **)(v111 + 1568);
                      if (!Splat)
                      {
                        uint64_t v112 = *(llvm::ConstantInt **)(v111 + 1888);
                        unsigned int v113 = *(_DWORD *)(v111 + 1896);
                        LODWORD(v153) = v113 >> 8;
                        if (v113 >> 8 > 0x40) {
                          operator new[]();
                        }
                        unsigned int v152 = 0;
                        uint64_t Splat = llvm::ConstantInt::get(v112, (llvm::LLVMContext *)&v152, (const llvm::APInt *)a3);
                        if (v153 >= 0x41 && v152) {
                          MEMORY[0x1D25D9CB0](v152, 0x1000C8000313F17);
                        }
                        *(void *)(v111 + 1568) = Splat;
                      }
LABEL_283:
                      if ((v9[1] & 0xFE) == 0x12) {
                        return llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v9 + 8) | ((unint64_t)(*((_DWORD *)v9 + 2) == 19) << 32)), (uint64_t)Splat);
                      }
                      return (llvm::Value *)Splat;
                    }
                    return 0;
                  }
LABEL_282:
                  uint64_t v122 = **v9;
                  uint64_t Splat = *(void **)(v122 + 1560);
                  if (!Splat)
                  {
                    int v127 = *(llvm::ConstantInt **)(v122 + 1888);
                    unsigned int v128 = *(_DWORD *)(v122 + 1896);
                    LODWORD(v153) = v128 >> 8;
                    if (v128 >> 8 > 0x40) {
                      operator new[]();
                    }
                    if (v128 <= 0xFF) {
                      LOBYTE(v129) = 0;
                    }
                    else {
                      unint64_t v129 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v128) + 63);
                    }
                    unsigned int v152 = (const llvm::DataLayout *)(v129 & 1);
                    uint64_t Splat = llvm::ConstantInt::get(v127, (llvm::LLVMContext *)&v152, (const llvm::APInt *)a3);
                    if (v153 >= 0x41 && v152) {
                      MEMORY[0x1D25D9CB0](v152, 0x1000C8000313F17);
                    }
                    *(void *)(v122 + 1560) = Splat;
                  }
                  goto LABEL_283;
                }
LABEL_261:
                if (v144 >= 0x41 && v143) {
                  MEMORY[0x1D25D9CB0](v143, 0x1000C8000313F17);
                }
                if (v4 >= 0x41 && v82) {
                  MEMORY[0x1D25D9CB0](v82, 0x1000C8000313F17);
                }
                if (!v95) {
                  return 0;
                }
                goto LABEL_268;
              }
            }
            unint64_t v4 = *(unsigned int *)(v149 + 8);
            if (v4 > 0x40) {
              operator new[]();
            }
            unint64_t v90 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
            if (!v4) {
              LOBYTE(v90) = 0;
            }
            uint64_t v82 = (void *)(v90 & 1);
            unsigned int v144 = *(_DWORD *)(v149 + 8);
            int v143 = v82;
            int v91 = v4;
            if (*(void *)v149 <= v4) {
              int v91 = *(void *)v149;
            }
            unint64_t v92 = (v90 & 1) << v91;
            if (v4 == v91) {
              unint64_t v92 = 0;
            }
            unint64_t v93 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
            if (!v4) {
              unint64_t v93 = 0;
            }
            int v143 = (void *)(v93 & v92);
            uint64_t v94 = *(unsigned int *)(v150 + 8);
            if (v94 > 0x40)
            {
              unint64_t v135 = ((unint64_t)(v94 + 63) >> 3) & 0x3FFFFFF8;
              while (v135)
              {
                unint64_t v136 = *(void *)(*(void *)v150 - 8 + v135);
                unint64_t v137 = *(void *)((char *)v143 + v135 - 8);
                v135 -= 8;
                if (v136 != v137)
                {
                  if (v136 <= v137) {
                    break;
                  }
                  goto LABEL_323;
                }
              }
            }
            else if (*(void *)v150 > (unint64_t)v143)
            {
LABEL_323:
              int v96 = 1;
              goto LABEL_222;
            }
            BOOL v95 = 1;
            goto LABEL_261;
          }
LABEL_140:
          uint64_t v145 = a3;
          unsigned __int8 v146 = &v151;
          uint64_t v147 = 0;
          int v62 = *(unsigned __int8 *)(a2 + 16);
          if (v62 == 5)
          {
            if (*(_WORD *)(a2 + 18) != 19) {
              goto LABEL_161;
            }
            uint64_t v63 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
            if (*(void *)v63 != a3 || !sub_1CBF5295C((uint64_t)&v146, *(llvm::Constant **)(v63 + 32))) {
              goto LABEL_161;
            }
          }
          else if (v62 != 47 {
                 || *(void *)(a2 - 64) != a3
          }
                 || (sub_1CBF528D8((uint64_t)&v146, *(unsigned __int8 **)(a2 - 32)) & 1) == 0)
          {
            goto LABEL_161;
          }
          BOOL v64 = (void *)v151;
          uint64_t v65 = *(unsigned int *)(v151 + 8);
          if (v65 < 0x41) {
            goto LABEL_156;
          }
          int v66 = 0;
          int64_t v67 = (unint64_t)(v65 + 63) >> 6;
          do
          {
            BOOL v81 = v67-- < 1;
            if (v81) {
              break;
            }
            unint64_t v68 = *(void *)(*(void *)v151 + 8 * v67);
            v66 += __clz(v68);
          }
          while (!v68);
          int v69 = v65 | 0xFFFFFFC0;
          if ((v65 & 0x3F) == 0) {
            int v69 = 0;
          }
          if ((v65 - v66 - v69) <= 0x40)
          {
            BOOL v64 = *(void **)v151;
LABEL_156:
            if (*v64 == 1) {
              goto LABEL_161;
            }
            goto LABEL_157;
          }
          goto LABEL_157;
        }
        if (v44 != 5) {
          goto LABEL_140;
        }
        int v46 = *(unsigned __int16 *)(a2 + 18);
LABEL_128:
        if (v46 != 26) {
          goto LABEL_140;
        }
        uint64_t v55 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
        if (*(void *)v55 != a3 || (sub_1CBF5295C((uint64_t)&v153, *(llvm::Constant **)(v55 + 32)) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_131;
      }
      int v46 = *(unsigned __int16 *)(a2 + 18);
      goto LABEL_104;
    }
    int v41 = (void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    int v42 = 5;
    if (v41[4] == a3) {
      goto LABEL_79;
    }
    goto LABEL_76;
  }
  uint64_t Splat = *(void **)(a2 - 64);
  uint64_t v13 = *(void **)(a2 - 32);
  if (!Splat || v13 != (void *)a3)
  {
LABEL_15:
    if (!v13) {
      goto LABEL_87;
    }
    BOOL v10 = Splat == (void *)a3;
    uint64_t Splat = v13;
    if (!v10) {
      goto LABEL_67;
    }
  }
LABEL_18:
  if (a1 == 35) {
    goto LABEL_282;
  }
  if (a1 == 36) {
    goto LABEL_270;
  }
  if ((a1 - 39) > 1) {
    goto LABEL_67;
  }
  uint64_t v17 = *(uint64_t **)(a4 + 24);
  uint64_t v18 = *(void *)(a4 + 32);
  uint64_t v19 = *(uint64_t **)(a4 + 16);
  if (!v18 || !*(void *)(v18 + 40))
  {
    if (*(unsigned __int8 *)(a3 + 16) < 0x1Cu || (uint64_t v18 = a3, !*(void *)(a3 + 40))) {
      uint64_t v18 = 0;
    }
  }
  unsigned int v152 = *(const llvm::DataLayout **)a4;
  BOOL v153 = v17;
  unsigned int v154 = (void *)v18;
  BOOL v155 = v19;
  uint64_t v156 = 0;
  char v157 = 1;
  sub_1CC16089C((uint64_t *)a3, 0, &v152, (uint64_t)&v145);
  uint64_t v20 = *(uint64_t **)(a4 + 24);
  uint64_t v21 = *(void **)(a4 + 32);
  long long v22 = *(uint64_t **)(a4 + 16);
  if (!v21 || !v21[5])
  {
    if (*((unsigned __int8 *)Splat + 16) < 0x1Cu || (uint64_t v21 = Splat, !Splat[5])) {
      uint64_t v21 = 0;
    }
  }
  unsigned int v152 = *(const llvm::DataLayout **)a4;
  BOOL v153 = v20;
  unsigned int v154 = v21;
  BOOL v155 = v22;
  uint64_t v156 = 0;
  char v157 = 1;
  sub_1CC16089C(Splat, 0, &v152, (uint64_t)&v139);
  uint64_t v23 = (uint64_t *)(v145 + 8 * ((v146 - 1) >> 6));
  if (v146 < 0x41) {
    uint64_t v23 = &v145;
  }
  if ((((unint64_t)*v23 >> (v146 - 1)) & 1) == 0) {
    goto LABEL_39;
  }
  unsigned int v24 = &v141;
  unsigned int v25 = LODWORD(v142[0]) - 1;
  if (LODWORD(v142[0]) >= 0x41) {
    unsigned int v24 = (uint64_t *)(v141 + 8 * (v25 >> 6));
  }
  if (((unint64_t)*v24 >> v25))
  {
    uint64_t v26 = **v9;
    if (a1 == 40)
    {
      uint64_t Splat = *(void **)(v26 + 1560);
      if (!Splat)
      {
        uint64_t v27 = *(llvm::ConstantInt **)(v26 + 1888);
        unint64_t v4 = **v9;
        unsigned int v28 = *(_DWORD *)(v26 + 1896);
        LODWORD(v153) = v28 >> 8;
        if (v28 >> 8 > 0x40) {
          operator new[]();
        }
        if (v28 <= 0xFF) {
          char v29 = 0;
        }
        else {
          char v29 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v28) + 63);
        }
        unsigned int v152 = (const llvm::DataLayout *)(v29 & 1);
        uint64_t Splat = llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v152, (const llvm::APInt *)a3);
        if (v153 >= 0x41 && v152) {
          MEMORY[0x1D25D9CB0](v152, 0x1000C8000313F17);
        }
        *(void *)(v4 + 1560) = Splat;
      }
    }
    else
    {
      uint64_t Splat = *(void **)(v26 + 1568);
      if (!Splat)
      {
        char v130 = *(llvm::ConstantInt **)(v26 + 1888);
        unsigned int v131 = *(_DWORD *)(v26 + 1896);
        LODWORD(v153) = v131 >> 8;
        if (v131 >> 8 > 0x40) {
          operator new[]();
        }
        unsigned int v152 = 0;
        uint64_t Splat = llvm::ConstantInt::get(v130, (llvm::LLVMContext *)&v152, (const llvm::APInt *)a3);
        if (v153 >= 0x41 && v152) {
          MEMORY[0x1D25D9CB0](v152, 0x1000C8000313F17);
        }
        *(void *)(v26 + 1568) = Splat;
      }
    }
  }
  else
  {
LABEL_39:
    BOOL v30 = &v147;
    unsigned int v31 = LODWORD(v148[0]) - 1;
    if (LODWORD(v148[0]) >= 0x41) {
      BOOL v30 = (uint64_t *)(v147 + 8 * (v31 >> 6));
    }
    if ((((unint64_t)*v30 >> v31) & 1) == 0)
    {
      unsigned int v32 = v140 - 1;
      uint64_t v33 = &v139;
      if (v140 >= 0x41) {
        uint64_t v33 = (uint64_t *)(v139 + 8 * (v32 >> 6));
      }
      if ((((unint64_t)*v33 >> v32) & 1) == 0)
      {
        int v40 = 1;
        goto LABEL_61;
      }
    }
    uint64_t v34 = **v9;
    if (a1 == 40)
    {
      uint64_t Splat = *(void **)(v34 + 1568);
      if (!Splat)
      {
        uint64_t v35 = *(llvm::ConstantInt **)(v34 + 1888);
        unsigned int v36 = *(_DWORD *)(v34 + 1896);
        LODWORD(v153) = v36 >> 8;
        if (v36 >> 8 > 0x40) {
          operator new[]();
        }
        unsigned int v152 = 0;
        uint64_t Splat = llvm::ConstantInt::get(v35, (llvm::LLVMContext *)&v152, (const llvm::APInt *)a3);
        if (v153 >= 0x41 && v152) {
          MEMORY[0x1D25D9CB0](v152, 0x1000C8000313F17);
        }
        *(void *)(v34 + 1568) = Splat;
      }
    }
    else
    {
      uint64_t Splat = *(void **)(v34 + 1560);
      if (!Splat)
      {
        int v37 = *(llvm::ConstantInt **)(v34 + 1888);
        unsigned int v38 = *(_DWORD *)(v34 + 1896);
        LODWORD(v153) = v38 >> 8;
        if (v38 >> 8 > 0x40) {
          operator new[]();
        }
        if (v38 <= 0xFF) {
          char v39 = 0;
        }
        else {
          char v39 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v38) + 63);
        }
        unsigned int v152 = (const llvm::DataLayout *)(v39 & 1);
        uint64_t Splat = llvm::ConstantInt::get(v37, (llvm::LLVMContext *)&v152, (const llvm::APInt *)a3);
        if (v153 >= 0x41 && v152) {
          MEMORY[0x1D25D9CB0](v152, 0x1000C8000313F17);
        }
        *(void *)(v34 + 1560) = Splat;
      }
    }
  }
  if ((v9[1] & 0xFE) == 0x12) {
    uint64_t Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v9 + 8) | ((unint64_t)(*((_DWORD *)v9 + 2) == 19) << 32)), (uint64_t)Splat);
  }
  int v40 = 0;
LABEL_61:
  if (LODWORD(v142[0]) >= 0x41 && v141) {
    MEMORY[0x1D25D9CB0](v141, 0x1000C8000313F17);
  }
  if (v140 >= 0x41 && v139) {
    MEMORY[0x1D25D9CB0](v139, 0x1000C8000313F17);
  }
  if (LODWORD(v148[0]) >= 0x41 && v147) {
    MEMORY[0x1D25D9CB0](v147, 0x1000C8000313F17);
  }
  if (v146 >= 0x41 && v145) {
    MEMORY[0x1D25D9CB0](v145, 0x1000C8000313F17);
  }
  if (v40)
  {
    int v11 = *(unsigned __int8 *)(a2 + 16);
    goto LABEL_67;
  }
  return (llvm::Value *)Splat;
}

uint64_t sub_1CC04A1E0(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 < 0x1C)
  {
    if (v1 == 5)
    {
      unsigned int v1 = *(unsigned __int16 *)(a1 + 18);
      HIDWORD(v8) = v1 - 13;
      LODWORD(v8) = v1 - 13;
      unsigned int v7 = v8 >> 1;
      BOOL v4 = v7 > 6;
      int v9 = (1 << v7) & 0x47;
      if (!v4 && v9 != 0) {
        goto LABEL_12;
      }
    }
LABEL_14:
    int v11 = 0;
    return v11 & v1;
  }
  HIDWORD(v3) = v1 - 41;
  LODWORD(v3) = v1 - 41;
  unsigned int v2 = v3 >> 1;
  BOOL v4 = v2 > 6;
  int v5 = (1 << v2) & 0x47;
  if (v4 || v5 == 0) {
    goto LABEL_14;
  }
  v1 -= 28;
LABEL_12:
  if (v1 == 13) {
    unsigned int v1 = (*(unsigned __int8 *)(a1 + 17) >> 2) & 1;
  }
  else {
    unsigned int v1 = 0;
  }
  int v11 = 1;
  return v11 & v1;
}

BOOL sub_1CC04A274(uint64_t a1, llvm::Constant *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v4 == 16)
  {
    uint64_t v5 = *((unsigned int *)a2 + 8);
    if (v5 > 0x40)
    {
      int v15 = 0;
      unint64_t v16 = (unint64_t)(v5 + 63) >> 6;
      uint64_t v17 = (int8x8_t *)*((void *)a2 + 3);
      do
      {
        int8x8_t v18 = *v17++;
        uint8x8_t v19 = (uint8x8_t)vcnt_s8(v18);
        v19.i16[0] = vaddlv_u8(v19);
        v15 += v19.i32[0];
        --v16;
      }
      while (v16);
      return v15 == 1;
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 3);
      return v6 && (v6 & (v6 - 1)) == 0;
    }
  }
  else
  {
    uint64_t v8 = *(void *)a2;
    if (*(void *)a2) {
      BOOL v9 = (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 18;
    }
    else {
      BOOL v9 = 0;
    }
    BOOL v10 = !v9 || v4 > 0x14;
    int v11 = v10;
    if (!v10)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && *((unsigned char *)SplatValue + 16) == 16)
      {
        uint64_t v13 = *((unsigned int *)SplatValue + 8);
        if (v13 > 0x40)
        {
          int v31 = 0;
          unint64_t v32 = (unint64_t)(v13 + 63) >> 6;
          uint64_t v33 = (int8x8_t *)SplatValue[3];
          do
          {
            int8x8_t v34 = *v33++;
            uint8x8_t v35 = (uint8x8_t)vcnt_s8(v34);
            v35.i16[0] = vaddlv_u8(v35);
            v31 += v35.i32[0];
            --v32;
          }
          while (v32);
          BOOL v2 = v31 == 1;
        }
        else
        {
          uint64_t v14 = SplatValue[3];
          if (v14) {
            BOOL v2 = (v14 & (v14 - 1)) == 0;
          }
          else {
            BOOL v2 = 0;
          }
        }
      }
      else
      {
        if (*(unsigned char *)(v8 + 8) == 18)
        {
          int v20 = *(_DWORD *)(v8 + 32);
          if (v20)
          {
            uint64_t v21 = 0;
            BOOL v2 = 0;
            while (1)
            {
              AggregateElement = (int8x8_t *)llvm::Constant::getAggregateElement(a2, v21);
              if (!AggregateElement) {
                break;
              }
              int v23 = AggregateElement[2].u8[0];
              if ((v23 - 11) >= 2)
              {
                if (v23 != 16) {
                  break;
                }
                uint64_t v24 = AggregateElement[4].u32[0];
                if (v24 > 0x40)
                {
                  int v26 = 0;
                  unint64_t v27 = (unint64_t)(v24 + 63) >> 6;
                  unsigned int v28 = (int8x8_t *)AggregateElement[3];
                  do
                  {
                    int8x8_t v29 = *v28++;
                    uint8x8_t v30 = (uint8x8_t)vcnt_s8(v29);
                    v30.i16[0] = vaddlv_u8(v30);
                    v26 += v30.i32[0];
                    --v27;
                  }
                  while (v27);
                  if (v26 != 1) {
                    break;
                  }
                }
                else
                {
                  uint8x8_t v25 = (uint8x8_t)vcnt_s8(AggregateElement[3]);
                  v25.i16[0] = vaddlv_u8(v25);
                  if (v25.u32[0] != 1) {
                    break;
                  }
                }
                BOOL v2 = 1;
              }
              uint64_t v21 = (llvm::Type *)(v21 + 1);
              if (v21 == v20) {
                return (v11 ^ 1) & v2;
              }
            }
          }
        }
        BOOL v2 = 0;
      }
    }
    return (v11 ^ 1) & v2;
  }
}

BOOL sub_1CC04A470(uint64_t a1, llvm::Constant *a2)
{
  if (a2 && *((unsigned char *)a2 + 16) == 16)
  {
    uint64_t v3 = *((unsigned int *)a2 + 8);
    if (v3 <= 0x40)
    {
      uint64_t v4 = *((void *)a2 + 3);
      return v4 && (v4 & (v4 - 1)) == 0;
    }
    int v12 = 0;
    unint64_t v13 = (unint64_t)(v3 + 63) >> 6;
    uint64_t v14 = (int8x8_t *)*((void *)a2 + 3);
    do
    {
      int8x8_t v15 = *v14++;
      uint8x8_t v16 = (uint8x8_t)vcnt_s8(v15);
      v16.i16[0] = vaddlv_u8(v16);
      v12 += v16.i32[0];
      --v13;
    }
    while (v13);
    return v12 == 1;
  }
  uint64_t v6 = *(void *)a2;
  if (*(void *)a2) {
    BOOL v7 = (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 18;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7) {
    return 0;
  }
  SplatValue = llvm::Constant::getSplatValue(a2, 0);
  if (!SplatValue || SplatValue[16] != 16)
  {
    if (*(unsigned char *)(v6 + 8) == 18)
    {
      int v17 = *(_DWORD *)(v6 + 32);
      if (v17)
      {
        int8x8_t v18 = 0;
        BOOL v5 = 0;
        while (1)
        {
          AggregateElement = (int8x8_t *)llvm::Constant::getAggregateElement(a2, v18);
          if (!AggregateElement) {
            break;
          }
          int v20 = AggregateElement[2].u8[0];
          if ((v20 - 11) >= 2)
          {
            if (v20 != 16) {
              return 0;
            }
            uint64_t v21 = AggregateElement[4].u32[0];
            if (v21 > 0x40)
            {
              int v23 = 0;
              unint64_t v24 = (unint64_t)(v21 + 63) >> 6;
              uint8x8_t v25 = (int8x8_t *)AggregateElement[3];
              do
              {
                int8x8_t v26 = *v25++;
                uint8x8_t v27 = (uint8x8_t)vcnt_s8(v26);
                v27.i16[0] = vaddlv_u8(v27);
                v23 += v27.i32[0];
                --v24;
              }
              while (v24);
              if (v23 != 1) {
                return 0;
              }
            }
            else
            {
              uint8x8_t v22 = (uint8x8_t)vcnt_s8(AggregateElement[3]);
              v22.i16[0] = vaddlv_u8(v22);
              if (v22.u32[0] != 1) {
                return 0;
              }
            }
            BOOL v5 = 1;
          }
          int8x8_t v18 = (llvm::Type *)(v18 + 1);
          if (v18 == v17) {
            return v5;
          }
        }
      }
    }
    return 0;
  }
  uint64_t v9 = *((unsigned int *)SplatValue + 8);
  if (v9 <= 0x40)
  {
    uint64_t v10 = *((void *)SplatValue + 3);
    if (v10) {
      return (v10 & (v10 - 1)) == 0;
    }
    return 0;
  }
  int v12 = 0;
  unint64_t v29 = (unint64_t)(v9 + 63) >> 6;
  uint8x8_t v30 = (int8x8_t *)*((void *)SplatValue + 3);
  do
  {
    int8x8_t v31 = *v30++;
    uint8x8_t v32 = (uint8x8_t)vcnt_s8(v31);
    v32.i16[0] = vaddlv_u8(v32);
    v12 += v32.i32[0];
    --v29;
  }
  while (v29);
  return v12 == 1;
}

uint64_t sub_1CC04A648(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0;
  if (a1 && *(unsigned char *)(a1 + 16) == 85)
  {
    uint64_t result = *(void *)(a1 - 96);
    unsigned int v6 = *(unsigned __int8 *)(result + 16);
    if (result) {
      BOOL v7 = v6 >= 0x1C;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7 && v6 - 83 >= 0xFFFFFFFE)
    {
      uint64_t v9 = *(void *)(result - 64);
      uint64_t v10 = *(void *)(result - 32);
      uint64_t v11 = *(_WORD *)(result + 18) & 0x3F;
      if (v11 != a2 || v9 != a3 || v10 != a4)
      {
        int v14 = dword_1CFAC3A14[v11];
        if (v9 != a4 || v10 != a3 || v14 != a2) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CC04A6C4(void **a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 85)
  {
    uint64_t v3 = 0;
    uint64_t v6 = *(void *)(a2 - 96);
    if (!v6 || *(unsigned char *)(v6 + 16) != 81) {
      return v3;
    }
    uint64_t v7 = *(void *)(a2 - 64);
    uint64_t v8 = *(void *)(a2 - 32);
    uint64_t v9 = *(void *)(v6 - 64);
    uint64_t v5 = *(void *)(v6 - 32);
    if ((v7 != v9 || v8 != v5) && (v7 != v5 || v8 != v9)) {
      return 0;
    }
    unsigned int v12 = *(_WORD *)(v6 + 18) & 0x3F;
    if (v7 != v9)
    {
      if (v12 - 32 < 8 || v12 < 0x10) {
        return 0;
      }
      if (v12 == 40) {
        LOBYTE(v12) = 39;
      }
      else {
        LOBYTE(v12) = 38;
      }
    }
    uint64_t v3 = 0;
    if (!v9 || (v12 & 0x3E) != 0x26) {
      return v3;
    }
    **a1 = v9;
    if (v5) {
      goto LABEL_35;
    }
    return 0;
  }
  if (v2 != 84) {
    return 0;
  }
  uint64_t v3 = *(void *)(a2 - 32);
  if (v3)
  {
    if (*(unsigned char *)(v3 + 16)
      || *(void *)(v3 + 24) != *(void *)(a2 + 72)
      || (*(unsigned char *)(v3 + 33) & 0x20) == 0
      || *(_DWORD *)(v3 + 36) != 274)
    {
      return 0;
    }
    uint64_t v4 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    uint64_t v3 = *v4;
    if (*v4)
    {
      uint64_t v5 = v4[4];
      **a1 = v3;
      if (!v5) {
        return 0;
      }
LABEL_35:
      *a1[1] = v5;
      return 1;
    }
  }
  return v3;
}

uint64_t sub_1CC04A7E0(void **a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 85)
  {
    uint64_t v3 = 0;
    uint64_t v6 = *(void *)(a2 - 96);
    if (!v6 || *(unsigned char *)(v6 + 16) != 81) {
      return v3;
    }
    uint64_t v7 = *(void *)(a2 - 64);
    uint64_t v8 = *(void *)(a2 - 32);
    uint64_t v9 = *(void *)(v6 - 64);
    uint64_t v5 = *(void *)(v6 - 32);
    if ((v7 != v9 || v8 != v5) && (v7 != v5 || v8 != v9)) {
      return 0;
    }
    uint64_t v13 = *(_WORD *)(v6 + 18) & 0x3F;
    if (v7 != v9)
    {
      uint64_t v3 = 0;
      if ((v13 - 32) < 6 || ((1 << v13) & 0x3000000FFFFLL) != 0) {
        return v3;
      }
      if (v13 == 38) {
        LOBYTE(v13) = 41;
      }
      else {
        LOBYTE(v13) = 40;
      }
    }
    uint64_t v3 = 0;
    if (!v9 || (v13 & 0x3E) != 0x28) {
      return v3;
    }
    **a1 = v9;
    if (v5) {
      goto LABEL_32;
    }
    return 0;
  }
  if (v2 != 84) {
    return 0;
  }
  uint64_t v3 = *(void *)(a2 - 32);
  if (v3)
  {
    if (*(unsigned char *)(v3 + 16)
      || *(void *)(v3 + 24) != *(void *)(a2 + 72)
      || (*(unsigned char *)(v3 + 33) & 0x20) == 0
      || *(_DWORD *)(v3 + 36) != 275)
    {
      return 0;
    }
    uint64_t v4 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    uint64_t v3 = *v4;
    if (*v4)
    {
      uint64_t v5 = v4[4];
      **a1 = v3;
      if (!v5) {
        return 0;
      }
LABEL_32:
      *a1[1] = v5;
      return 1;
    }
  }
  return v3;
}

uint64_t sub_1CC04A914(void **a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 != 85)
  {
    if (v2 == 84)
    {
      uint64_t v3 = *(void *)(a2 - 32);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 16)
          || *(void *)(v3 + 24) != *(void *)(a2 + 72)
          || (*(unsigned char *)(v3 + 33) & 0x20) == 0
          || *(_DWORD *)(v3 + 36) != 305)
        {
          return 0;
        }
        uint64_t v4 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        uint64_t v3 = *v4;
        if (*v4)
        {
          uint64_t v5 = v4[4];
          **a1 = v3;
          if (!v5) {
            return 0;
          }
          goto LABEL_30;
        }
      }
      return v3;
    }
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v6 = *(void *)(a2 - 96);
  if (v6 && *(unsigned char *)(v6 + 16) == 81)
  {
    uint64_t v7 = *(void *)(a2 - 64);
    uint64_t v8 = *(void *)(a2 - 32);
    uint64_t v9 = *(void *)(v6 - 64);
    uint64_t v5 = *(void *)(v6 - 32);
    if ((v7 != v9 || v8 != v5) && (v7 != v5 || v8 != v9)) {
      return 0;
    }
    uint64_t v12 = *(_WORD *)(v6 + 18) & 0x3F;
    if (v7 != v9)
    {
      uint64_t v3 = 0;
      if (((1 << v12) & 0x3CF0000FFFFLL) != 0) {
        return v3;
      }
      if (v12 == 36) {
        LOBYTE(v12) = 35;
      }
      else {
        LOBYTE(v12) = 34;
      }
    }
    uint64_t v3 = 0;
    if (v9)
    {
      if ((v12 & 0x3E) == 0x22)
      {
        **a1 = v9;
        if (v5)
        {
LABEL_30:
          *a1[1] = v5;
          return 1;
        }
        return 0;
      }
    }
  }
  return v3;
}

uint64_t sub_1CC04AA3C(void **a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 85)
  {
    uint64_t v3 = 0;
    uint64_t v6 = *(void *)(a2 - 96);
    if (!v6 || *(unsigned char *)(v6 + 16) != 81) {
      return v3;
    }
    uint64_t v7 = *(void *)(a2 - 64);
    uint64_t v8 = *(void *)(a2 - 32);
    uint64_t v9 = *(void *)(v6 - 64);
    uint64_t v5 = *(void *)(v6 - 32);
    if ((v7 != v9 || v8 != v5) && (v7 != v5 || v8 != v9)) {
      return 0;
    }
    uint64_t v13 = *(_WORD *)(v6 + 18) & 0x3F;
    if (v7 != v9)
    {
      uint64_t v3 = 0;
      if (((1 << v13) & 0x3F30000FFFFLL) != 0) {
        return v3;
      }
      if (v13 == 34) {
        LOBYTE(v13) = 37;
      }
      else {
        LOBYTE(v13) = 36;
      }
    }
    uint64_t v3 = 0;
    if (!v9 || (v13 & 0x3E) != 0x24) {
      return v3;
    }
    **a1 = v9;
    if (v5) {
      goto LABEL_31;
    }
    return 0;
  }
  if (v2 != 84) {
    return 0;
  }
  uint64_t v3 = *(void *)(a2 - 32);
  if (v3)
  {
    if (*(unsigned char *)(v3 + 16)
      || *(void *)(v3 + 24) != *(void *)(a2 + 72)
      || (*(unsigned char *)(v3 + 33) & 0x20) == 0
      || *(_DWORD *)(v3 + 36) != 306)
    {
      return 0;
    }
    uint64_t v4 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    uint64_t v3 = *v4;
    if (*v4)
    {
      uint64_t v5 = v4[4];
      **a1 = v3;
      if (!v5) {
        return 0;
      }
LABEL_31:
      *a1[1] = v5;
      return 1;
    }
  }
  return v3;
}

BOOL sub_1CC04AB64(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 != 85)
  {
    if (v2 == 84)
    {
      uint64_t v3 = *(void *)(a2 - 32);
      if (v3)
      {
        if (!*(unsigned char *)(v3 + 16) && *(void *)(v3 + 24) == *(void *)(a2 + 72) && (*(unsigned char *)(v3 + 33) & 0x20) != 0) {
          return *(_DWORD *)(v3 + 36) == 306;
        }
      }
    }
    return 0;
  }
  BOOL result = 0;
  uint64_t v6 = *(void *)(a2 - 96);
  if (v6 && *(unsigned char *)(v6 + 16) == 81)
  {
    uint64_t v7 = *(void *)(a2 - 64);
    uint64_t v8 = *(void *)(a2 - 32);
    uint64_t v9 = *(void *)(v6 - 64);
    uint64_t v10 = *(void *)(v6 - 32);
    BOOL v11 = v7 == v9 && v8 == v10;
    if (v11 || (v7 == v10 ? (BOOL v12 = v8 == v9) : (BOOL v12 = 0), v12))
    {
      uint64_t v13 = *(_WORD *)(v6 + 18) & 0x3F;
      if (v7 != v9) {
        LODWORD(v13) = dword_1CFAC396C[v13];
      }
      return (v13 & 0xFFFE) == 36;
    }
    return 0;
  }
  return result;
}

BOOL sub_1CC04AC20(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 != 85)
  {
    if (v2 == 84)
    {
      uint64_t v3 = *(void *)(a2 - 32);
      if (v3)
      {
        if (!*(unsigned char *)(v3 + 16) && *(void *)(v3 + 24) == *(void *)(a2 + 72) && (*(unsigned char *)(v3 + 33) & 0x20) != 0) {
          return *(_DWORD *)(v3 + 36) == 275;
        }
      }
    }
    return 0;
  }
  BOOL result = 0;
  uint64_t v6 = *(void *)(a2 - 96);
  if (v6 && *(unsigned char *)(v6 + 16) == 81)
  {
    uint64_t v7 = *(void *)(a2 - 64);
    uint64_t v8 = *(void *)(a2 - 32);
    uint64_t v9 = *(void *)(v6 - 64);
    uint64_t v10 = *(void *)(v6 - 32);
    BOOL v11 = v7 == v9 && v8 == v10;
    if (v11 || (v7 == v10 ? (BOOL v12 = v8 == v9) : (BOOL v12 = 0), v12))
    {
      uint64_t v13 = *(_WORD *)(v6 + 18) & 0x3F;
      if (v7 != v9) {
        LODWORD(v13) = dword_1CFAC396C[v13];
      }
      return (v13 & 0xFFFE) == 40;
    }
    return 0;
  }
  return result;
}

BOOL sub_1CC04ACDC(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v1 == 59)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 56);
      if (v3)
      {
        if (*(unsigned char *)(*(void *)(a1 - 32) + 16) == 16)
        {
          uint64_t v4 = *(void *)(v3 + 80);
          uint64_t v5 = v4 ? v4 - 24 : 0;
          if (v2 == v5) {
            return (*(_WORD *)(a1 + 18) & 0x40) == 0;
          }
        }
      }
    }
    return 0;
  }
  if (!a1 || v1 > 3)
  {
    if (v1 == 21 && *(unsigned char *)(*(void *)a1 + 8) == 15)
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 24) + 112);
      if (v11)
      {
        unsigned int v12 = *(_DWORD *)(a1 + 32) + 2;
        if (v12 < *(_DWORD *)(v11 + 8))
        {
          uint64_t v13 = *(void *)(v11 + 8 * v12 + 40);
          if (v13) {
            return (*(unsigned __int8 *)(v13 + 20) >> 5) & 1;
          }
        }
      }
    }
    return 0;
  }
  int v7 = *(_DWORD *)(a1 + 32);
  int v8 = v7 & 0x30;
  BOOL v9 = (v7 & 0xFu) - 7 < 2 || v8 == 16;
  if (!v9 && v8 != 32 && (v7 & 0xC0) != 0x80) {
    return 0;
  }
  return (v7 & 0x1C00) == 0;
}

llvm::Value *sub_1CC04ADD0(uint64_t a1, llvm::ConstantExpr *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v11 = a1;
  unsigned int v12 = sub_1CC03A634(a1, a2, a3, a5, a6);
  if (v12 != (llvm::Value *)a4)
  {
    if (v12) {
      return v12;
    }
    if (!a4) {
      return v12;
    }
    unsigned int v14 = *(unsigned __int8 *)(a4 + 16);
    if (v14 < 0x1C || v14 - 83 < 0xFFFFFFFE) {
      return v12;
    }
    int v15 = *(_WORD *)(a4 + 18) & 0x3F;
    uint8x8_t v16 = *(llvm::ConstantExpr **)(a4 - 64);
    int v17 = *(unsigned __int8 **)(a4 - 32);
    if ((v15 != v11 || v16 != a2 || v17 != a3)
      && (dword_1CFAC3A14[v11] != v15 || v16 != (llvm::ConstantExpr *)a3 || v17 != (unsigned __int8 *)a2))
    {
      return v12;
    }
  }
  return (llvm::Value *)a7;
}

BOOL sub_1CC04AE9C(uint64_t a1, llvm::Constant *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v4 == 17)
  {
    uint64_t v5 = (char *)a2 + 24;
    if (*((_UNKNOWN **)a2 + 4) == &unk_1CFB2E344) {
      uint64_t v5 = (char *)*((void *)a2 + 5);
    }
    return (v5[28] & 7) == 1;
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    if (*(void *)a2) {
      BOOL v8 = (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 18;
    }
    else {
      BOOL v8 = 0;
    }
    BOOL v9 = !v8 || v4 > 0x14;
    int v10 = v9;
    if (!v9)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && *((unsigned char *)SplatValue + 16) == 17)
      {
        unsigned int v12 = (char *)(SplatValue + 3);
        if ((_UNKNOWN *)SplatValue[4] == &unk_1CFB2E344) {
          unsigned int v12 = (char *)SplatValue[5];
        }
        BOOL v2 = (v12[28] & 7) == 1;
      }
      else
      {
        if (*(unsigned char *)(v7 + 8) == 18)
        {
          int v13 = *(_DWORD *)(v7 + 32);
          if (v13)
          {
            unsigned int v14 = 0;
            BOOL v2 = 0;
            while (1)
            {
              AggregateElement = llvm::Constant::getAggregateElement(a2, v14);
              if (!AggregateElement) {
                break;
              }
              int v16 = *((unsigned __int8 *)AggregateElement + 16);
              if ((v16 - 11) >= 2)
              {
                if (v16 != 17) {
                  break;
                }
                int v17 = AggregateElement + 3;
                if ((_UNKNOWN *)AggregateElement[4] == &unk_1CFB2E344) {
                  int v17 = (void *)AggregateElement[5];
                }
                if ((*((unsigned char *)v17 + 28) & 7) != 1) {
                  break;
                }
                BOOL v2 = 1;
              }
              unsigned int v14 = (llvm::Type *)(v14 + 1);
              if (v13 == v14) {
                return (v10 ^ 1) & v2;
              }
            }
          }
        }
        BOOL v2 = 0;
      }
    }
    return (v10 ^ 1) & v2;
  }
}

uint64_t sub_1CC04AFFC(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v3 = a2[16];
  if (a2 && v3 == 17) {
    goto LABEL_3;
  }
  if (v3 <= 0x14 && (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 18)
  {
    uint64_t result = (uint64_t)llvm::Constant::getSplatValue((llvm::Constant *)a2, (llvm::Type *)*(unsigned __int8 *)(a1 + 8));
    if (!result) {
      return result;
    }
    a2 = (unsigned __int8 *)result;
    if (*(unsigned char *)(result + 16) == 17)
    {
LABEL_3:
      **(void **)a1 = a2 + 24;
      return 1;
    }
  }
  return 0;
}

BOOL sub_1CC04B080(_DWORD *a1, uint64_t a2)
{
  BOOL result = 0;
  if (a2)
  {
    if (*(unsigned char *)(a2 + 16) == 84)
    {
      uint64_t v3 = *(void *)(a2 - 32);
      if (v3)
      {
        if (!*(unsigned char *)(v3 + 16)
          && *(void *)(v3 + 24) == *(void *)(a2 + 72)
          && *(_DWORD *)(v3 + 36) == *a1
          && (sub_1CC04AFFC((uint64_t)(a1 + 6), *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * a1[4])) & 1) != 0)
        {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC04B108(uint64_t **a1, uint64_t a2)
{
  uint64_t result = 0;
  if (!a2) {
    return result;
  }
  unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 < 0x1C) {
    return result;
  }
  int v5 = *(_DWORD *)(*(void *)a2 + 8);
  if ((v5 & 0xFE) == 0x12) {
    int v5 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  if (v5 != 269) {
    return 0;
  }
  if (v4 != 85)
  {
    if (v4 == 57)
    {
      int v6 = *(_DWORD *)(a2 + 20);
      if ((v6 & 0x40000000) != 0) {
        uint64_t v7 = *(uint64_t **)(a2 - 8);
      }
      else {
        uint64_t v7 = (uint64_t *)(a2 - 32 * (v6 & 0x7FFFFFF));
      }
      uint64_t v9 = *v7;
      uint64_t v10 = v7[4];
      if (!*v7) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
    return 0;
  }
  uint64_t result = 0;
  uint64_t v8 = *(void *)(a2 - 64);
  if (!v8) {
    return result;
  }
  if (*(unsigned __int8 *)(v8 + 16) > 0x14u) {
    return result;
  }
  uint64_t v9 = *(void *)(a2 - 96);
  uint64_t v10 = *(void *)(a2 - 32);
  uint64_t result = (uint64_t)llvm::Constant::isOneValue(*(llvm::Constant **)(a2 - 64));
  if (!result) {
    return result;
  }
  if (v9)
  {
LABEL_17:
    **a1 = v9;
    if (sub_1CBF686A0(a1 + 1, 30, v10)) {
      return 1;
    }
  }
LABEL_19:
  if (!v10) {
    return 0;
  }
  **a1 = v10;

  return sub_1CBF686A0(a1 + 1, 30, v9);
}

uint64_t sub_1CC04B234(void *a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
    if (v4 >= 0x1C)
    {
      int v5 = *(_DWORD *)(*(void *)a2 + 8);
      if ((v5 & 0xFE) == 0x12) {
        int v5 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
      }
      if (v5 != 269) {
        return 0;
      }
      if (v4 != 85)
      {
        if (v4 == 57)
        {
          int v6 = *(_DWORD *)(a2 + 20);
          if ((v6 & 0x40000000) != 0) {
            uint64_t v7 = *(uint64_t **)(a2 - 8);
          }
          else {
            uint64_t v7 = (uint64_t *)(a2 - 32 * (v6 & 0x7FFFFFF));
          }
          uint64_t v9 = *v7;
          uint64_t v11 = v7[4];
          if (*a1 != v9 || a1[1] != v11)
          {
            if (*a1 != v11) {
              return 0;
            }
            return a1[1] == v9;
          }
          return 1;
        }
        return 0;
      }
      uint64_t result = 0;
      uint64_t v8 = *(void *)(a2 - 64);
      if (v8)
      {
        if (*(unsigned __int8 *)(v8 + 16) <= 0x14u)
        {
          uint64_t v9 = *(void *)(a2 - 96);
          uint64_t v10 = *(void *)(a2 - 32);
          uint64_t result = (uint64_t)llvm::Constant::isOneValue(*(llvm::Constant **)(a2 - 64));
          if (result)
          {
            if (*a1 == v9 && a1[1] == v10) {
              return 1;
            }
            if (*a1 == v10) {
              return a1[1] == v9;
            }
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC04B350(uint64_t a1, uint64_t a2, uint64_t a3, int8x8_t *a4, int a5)
{
  uint64_t v45 = 0;
  if (a2 == a3)
  {
    BOOL v43 = &v45;
    uint64_t v44 = 0;
    int v18 = *(unsigned __int8 *)(a1 + 16);
    if (v18 == 5)
    {
      if (*(_WORD *)(a1 + 18) != 28) {
        goto LABEL_2;
      }
      uint64_t v22 = a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF);
      if (*(void *)v22 != a2 || !sub_1CBF5295C((uint64_t)&v43, *(llvm::Constant **)(v22 + 32))) {
        goto LABEL_2;
      }
    }
    else if (v18 != 56 {
           || *(void *)(a1 - 64) != a2
    }
           || (sub_1CBF528D8((uint64_t)&v43, *(unsigned __int8 **)(a1 - 32)) & 1) == 0)
    {
      goto LABEL_2;
    }
    unsigned int v23 = *(_DWORD *)(v45 + 8);
    if (v23 > 0x40) {
      operator new[]();
    }
    unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v23;
    if (!v23) {
      unint64_t v24 = 0;
    }
    uint8x8_t v25 = (const void *)(v24 & ~*(void *)v45);
    uint64_t v35 = a4[1].u32[0];
    if (v35 > 0x40) {
      BOOL v36 = memcmp(*(const void **)a4, v25, ((unint64_t)(v35 + 63) >> 3) & 0x3FFFFFF8) == 0;
    }
    else {
      BOOL v36 = *a4 == (void)v25;
    }
    if (v36)
    {
      if (a5) {
        return a2;
      }
      else {
        return a1;
      }
    }
  }
LABEL_2:
  if (a1 != a3) {
    goto LABEL_3;
  }
  BOOL v43 = &v45;
  uint64_t v44 = 0;
  int v19 = *(unsigned __int8 *)(a2 + 16);
  if (v19 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 28) {
      goto LABEL_3;
    }
    uint64_t v26 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    if (*(void *)v26 != a3 || !sub_1CBF5295C((uint64_t)&v43, *(llvm::Constant **)(v26 + 32))) {
      goto LABEL_3;
    }
  }
  else if (v19 != 56 {
         || *(void *)(a2 - 64) != a3
  }
         || (sub_1CBF528D8((uint64_t)&v43, *(unsigned __int8 **)(a2 - 32)) & 1) == 0)
  {
    goto LABEL_3;
  }
  unsigned int v27 = *(_DWORD *)(v45 + 8);
  if (v27 > 0x40) {
    operator new[]();
  }
  unint64_t v28 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v27;
  if (!v27) {
    unint64_t v28 = 0;
  }
  unint64_t v29 = (const void *)(v28 & ~*(void *)v45);
  uint64_t v37 = a4[1].u32[0];
  if (v37 > 0x40) {
    BOOL v38 = memcmp(*(const void **)a4, v29, ((unint64_t)(v37 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    BOOL v38 = *a4 == (void)v29;
  }
  if (v38)
  {
    if (a5) {
      return a2;
    }
    else {
      return a3;
    }
  }
LABEL_3:
  uint64_t v10 = a4[1].u32[0];
  if (v10 > 0x40)
  {
    int v12 = 0;
    unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
    unsigned int v14 = (int8x8_t *)*a4;
    do
    {
      int8x8_t v15 = *v14++;
      uint8x8_t v16 = (uint8x8_t)vcnt_s8(v15);
      v16.i16[0] = vaddlv_u8(v16);
      v12 += v16.i32[0];
      --v13;
    }
    while (v13);
    if (v12 != 1) {
      return 0;
    }
  }
  else
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8(*a4);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] != 1) {
      return 0;
    }
  }
  if (a2 == a3)
  {
    BOOL v43 = &v45;
    uint64_t v44 = 0;
    int v20 = *(unsigned __int8 *)(a1 + 16);
    if (v20 == 5)
    {
      if (*(_WORD *)(a1 + 18) != 29) {
        goto LABEL_10;
      }
      uint64_t v30 = a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF);
      if (*(void *)v30 != a2 || !sub_1CBF5295C((uint64_t)&v43, *(llvm::Constant **)(v30 + 32))) {
        goto LABEL_10;
      }
    }
    else if (v20 != 57 {
           || *(void *)(a1 - 64) != a2
    }
           || (sub_1CBF528D8((uint64_t)&v43, *(unsigned __int8 **)(a1 - 32)) & 1) == 0)
    {
      goto LABEL_10;
    }
    uint64_t v31 = a4[1].u32[0];
    if (v31 > 0x40)
    {
      if (memcmp(*(const void **)a4, *(const void **)v45, ((unint64_t)(v31 + 63) >> 3) & 0x3FFFFFF8)) {
        goto LABEL_10;
      }
    }
    else if (*a4 != *(void *)v45)
    {
      goto LABEL_10;
    }
    if (a5) {
      return a1;
    }
    else {
      return a2;
    }
  }
LABEL_10:
  if (a1 != a3) {
    return 0;
  }
  BOOL v43 = &v45;
  uint64_t v44 = 0;
  int v21 = *(unsigned __int8 *)(a2 + 16);
  if (v21 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 29) {
      return 0;
    }
    uint64_t v32 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    if (*(void *)v32 != a3 || !sub_1CBF5295C((uint64_t)&v43, *(llvm::Constant **)(v32 + 32))) {
      return 0;
    }
  }
  else if (v21 != 57 {
         || *(void *)(a2 - 64) != a3
  }
         || (sub_1CBF528D8((uint64_t)&v43, *(unsigned __int8 **)(a2 - 32)) & 1) == 0)
  {
    return 0;
  }
  uint64_t v33 = a4[1].u32[0];
  if (v33 > 0x40) {
    BOOL v34 = memcmp(*(const void **)a4, *(const void **)v45, ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    BOOL v34 = *a4 == *(void *)v45;
  }
  int v41 = v34;
  if (a5) {
    uint64_t v42 = a3;
  }
  else {
    uint64_t v42 = a2;
  }
  if (v41) {
    return v42;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CC04B864(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1CC045310(a1, a2);
  if (result)
  {
    uint64_t result = 0;
    if (a2)
    {
      if (*(unsigned char *)(a2 + 16) == 84)
      {
        uint64_t v5 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
        if (**(void **)(a1 + 32) == *(void *)(v5 + 32 * *(unsigned int *)(a1 + 24))
          && (uint64_t v6 = *(void *)(v5 + 32 * *(unsigned int *)(a1 + 40))) != 0)
        {
          **(void **)(a1 + 48) = v6;
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL sub_1CC04B8F0(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a2)
  {
    if (*(unsigned char *)(a2 + 16) == 84)
    {
      uint64_t v3 = *(void *)(a2 - 32);
      if (v3)
      {
        if (!*(unsigned char *)(v3 + 16)
          && *(void *)(v3 + 24) == *(void *)(a2 + 72)
          && *(_DWORD *)(v3 + 36) == *(_DWORD *)a1
          && *(void *)(a1 + 16) == *(void *)(a2
                                               - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)
                                               + 32 * *(unsigned int *)(a1 + 8)))
        {
          return 1;
        }
      }
    }
  }
  return result;
}

BOOL sub_1CC04B964(uint64_t a1, uint64_t a2)
{
  return sub_1CD497DD0((_DWORD *)a1, a2)
      && a2
      && *(unsigned char *)(a2 + 16) == 84
      && *(void *)(a1 + 16) == *(void *)(a2
                                           - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)
                                           + 32 * *(unsigned int *)(a1 + 8));
}

uint64_t sub_1CC04B9D0(uint64_t a1, int a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 16);
  char v6 = a2 + 28;
  if (a2 + 28 != v5)
  {
    if (v5 != 5) {
      return (v5 == 5) & v6;
    }
    if (*(unsigned __int16 *)(a3 + 18) == a2)
    {
      uint64_t v13 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
      int v14 = *(unsigned __int8 *)(v13 + 16);
      if (v14 == 5)
      {
        if (*(_WORD *)(v13 + 18) != 15
          || !sub_1CC03F934((void **)a1, *(void *)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF)))
          || !sub_1CD497D64((void *)(a1 + 8), *(void *)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF) + 32)))
        {
          goto LABEL_25;
        }
      }
      else if (v14 != 43 {
             || !sub_1CC03F934((void **)a1, *(void *)(v13 - 64))
      }
             || (sub_1CC0452A0((void *)(a1 + 8), *(void *)(v13 - 32)) & 1) == 0)
      {
        goto LABEL_25;
      }
      if (sub_1CD497E24((void **)(a1 + 16), *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32)))
      {
        char v6 = 1;
        return (v5 == 5) & v6;
      }
    }
LABEL_25:
    char v6 = 0;
    return (v5 == 5) & v6;
  }
  uint64_t v7 = *(void *)(a3 - 64);
  int v8 = *(unsigned __int8 *)(v7 + 16);
  if (v8 == 5)
  {
    if (*(_WORD *)(v7 + 18) == 15)
    {
      uint64_t result = sub_1CC03F934((void **)a1, *(void *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF)));
      if (!result) {
        return result;
      }
      uint64_t result = sub_1CD497D64((void *)(a1 + 8), *(void *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 32));
      if (!result) {
        return result;
      }
      goto LABEL_6;
    }
    return 0;
  }
  if (v8 != 43) {
    return 0;
  }
  uint64_t result = sub_1CC03F934((void **)a1, *(void *)(v7 - 64));
  if (!result) {
    return result;
  }
  if ((sub_1CC0452A0((void *)(a1 + 8), *(void *)(v7 - 32)) & 1) == 0) {
    return 0;
  }
LABEL_6:
  uint64_t result = 0;
  uint64_t v10 = *(void *)(a3 - 32);
  if (v10 && *(unsigned char *)(v10 + 16) == 16)
  {
    uint8x8_t v11 = (void *)(v10 + 24);
    uint64_t v12 = *(unsigned int *)(v10 + 32);
    if (v12 < 0x41)
    {
LABEL_9:
      **(void **)(a1 + 16) = *v11;
      return 1;
    }
    int v15 = 0;
    int64_t v16 = (unint64_t)(v12 + 63) >> 6;
    do
    {
      if (v16-- < 1) {
        break;
      }
      unint64_t v18 = *(void *)(*v11 + 8 * v16);
      v15 += __clz(v18);
    }
    while (!v18);
    uint64_t result = 0;
    int v19 = v12 | 0xFFFFFFC0;
    if ((v12 & 0x3F) == 0) {
      int v19 = 0;
    }
    if ((v12 - v15 - v19) <= 0x40)
    {
      uint8x8_t v11 = (void *)*v11;
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t sub_1CC04BBF4(uint64_t a1, int a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 16);
  char v6 = a2 + 28;
  if (a2 + 28 == v5)
  {
    uint64_t v7 = *(void *)(a3 - 64);
    int v8 = *(unsigned __int8 *)(v7 + 16);
    if (v8 == 5)
    {
      if (*(_WORD *)(v7 + 18) == 15
        && sub_1CC03F934((void **)a1, *(void *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF)))
        && sub_1CD497D64((void *)(a1 + 8), *(void *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 32)))
      {
LABEL_6:
        if (sub_1CBF53154((llvm::APInt *)(a1 + 16), *(unsigned __int8 **)(a3 - 32))) {
          return 1;
        }
      }
    }
    else if (v8 == 43 {
           && sub_1CC03F934((void **)a1, *(void *)(v7 - 64))
    }
           && (sub_1CC0452A0((void *)(a1 + 8), *(void *)(v7 - 32)) & 1) != 0)
    {
      goto LABEL_6;
    }
    return 0;
  }
  if (v5 == 5)
  {
    if (*(unsigned __int16 *)(a3 + 18) == a2)
    {
      uint64_t v10 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
      int v11 = *(unsigned __int8 *)(v10 + 16);
      if (v11 == 5)
      {
        if (*(_WORD *)(v10 + 18) != 15
          || !sub_1CC03F934((void **)a1, *(void *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF)))
          || !sub_1CD497D64((void *)(a1 + 8), *(void *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) + 32)))
        {
          goto LABEL_21;
        }
      }
      else if (v11 != 43 {
             || !sub_1CC03F934((void **)a1, *(void *)(v10 - 64))
      }
             || (sub_1CC0452A0((void *)(a1 + 8), *(void *)(v10 - 32)) & 1) == 0)
      {
        goto LABEL_21;
      }
      if (sub_1CBF531E4((llvm::APInt *)(a1 + 16), *(llvm::Constant **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32)))
      {
        char v6 = 1;
        return (v5 == 5) & v6;
      }
    }
LABEL_21:
    char v6 = 0;
  }
  return (v5 == 5) & v6;
}

BOOL sub_1CC04BDA4(uint64_t a1, int a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 16);
  char v6 = a2 + 28;
  if (a2 + 28 != v5)
  {
    if (v5 != 5) {
      return (v5 == 5) & v6;
    }
    if (*(unsigned __int16 *)(a3 + 18) != a2
      || (uint64_t v12 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF))) == 0)
    {
LABEL_19:
      char v6 = 0;
      return (v5 == 5) & v6;
    }
    int v13 = *(unsigned __int8 *)(v12 + 16);
    if (v13 == 16)
    {
      uint64_t v14 = *(unsigned int *)(v12 + 32);
      if (v14 >= 0x41)
      {
        int v21 = 0;
        int64_t v22 = (unint64_t)(v14 + 63) >> 6;
        do
        {
          BOOL v9 = v22-- < 1;
          if (v9) {
            break;
          }
          unint64_t v23 = *(void *)(*(void *)(v12 + 24) + 8 * v22);
          v21 += __clz(v23);
        }
        while (!v23);
        int v24 = v14 | 0xFFFFFFC0;
        if ((v14 & 0x3F) == 0) {
          int v24 = 0;
        }
        if (v21 + v24 == v14) {
          goto LABEL_36;
        }
      }
      else if (!*(void *)(v12 + 24))
      {
        goto LABEL_36;
      }
    }
    else if (v13 == 17)
    {
      if (sub_1CB844168(v12, 0.0)) {
        goto LABEL_36;
      }
    }
    else if ((v13 - 18) < 3 || v13 == 13)
    {
      goto LABEL_36;
    }
    if ((sub_1CC03F414((uint64_t)&v26, (llvm::Constant *)v12) & 1) == 0) {
      goto LABEL_19;
    }
LABEL_36:
    if (sub_1CD497D64((void *)(a1 + 8), *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32)))
    {
      char v6 = 1;
      return (v5 == 5) & v6;
    }
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(a3 - 64);
  unsigned int v8 = *(unsigned __int8 *)(v7 + 16);
  if (v7) {
    BOOL v9 = v8 > 0x14;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return 0;
  }
  if (v8 != 16)
  {
    if (v8 == 17)
    {
      if ((sub_1CB844168(*(void *)(a3 - 64), 0.0) & 1) == 0) {
        goto LABEL_9;
      }
    }
    else if (v8 - 18 >= 3 && v8 != 13)
    {
      goto LABEL_9;
    }
    return (sub_1CC0452A0((void *)(a1 + 8), *(void *)(a3 - 32)) & 1) != 0;
  }
  uint64_t v10 = *(unsigned int *)(v7 + 32);
  if (v10 >= 0x41)
  {
    int v17 = 0;
    int64_t v18 = (unint64_t)(v10 + 63) >> 6;
    do
    {
      BOOL v9 = v18-- < 1;
      if (v9) {
        break;
      }
      unint64_t v19 = *(void *)(*(void *)(v7 + 24) + 8 * v18);
      v17 += __clz(v19);
    }
    while (!v19);
    int v20 = v10 | 0xFFFFFFC0;
    if ((v10 & 0x3F) == 0) {
      int v20 = 0;
    }
    if (v17 + v20 != v10) {
      goto LABEL_9;
    }
    return (sub_1CC0452A0((void *)(a1 + 8), *(void *)(a3 - 32)) & 1) != 0;
  }
  if (!*(void *)(v7 + 24)) {
    return (sub_1CC0452A0((void *)(a1 + 8), *(void *)(a3 - 32)) & 1) != 0;
  }
LABEL_9:
  if (sub_1CC03F414((uint64_t)&v25, (llvm::Constant *)v7)) {
    return (sub_1CC0452A0((void *)(a1 + 8), *(void *)(a3 - 32)) & 1) != 0;
  }
  return 0;
}

uint64_t sub_1CC04BFB8(uint64_t a1)
{
  v17[8] = *MEMORY[0x1E4F143B8];
  unsigned int v1 = (*(unsigned char *)(a1 + 16) - 11);
  if (v1 < 2) {
    return 1;
  }
  if (v1 < 0xFD) {
    return 0;
  }
  uint64_t v10 = v14;
  int v11 = v14;
  uint64_t v12 = 8;
  int v13 = 0;
  int v15 = v17;
  uint64_t v16 = 0x800000000;
  v9[0] = (llvm::SmallPtrSetImplBase *)&v10;
  v9[1] = (llvm::SmallPtrSetImplBase *)&v15;
  int v3 = sub_1CC04C108(v9, a1);
  uint64_t result = 0;
  if (v3)
  {
    while (1)
    {
      BOOL v8 = v16 == 0;
      if (!v16) {
        break;
      }
      uint64_t v6 = v15[v16 - 1];
      LODWORD(v16) = v16 - 1;
      char v7 = sub_1CC04C108(v9, v6);
      uint64_t result = v8;
      if ((v7 & 1) == 0) {
        goto LABEL_7;
      }
    }
    uint64_t result = 1;
  }
LABEL_7:
  if (v15 != v17)
  {
    uint64_t v5 = result;
    free(v15);
    uint64_t result = v5;
  }
  if (v11 != v10)
  {
    uint64_t v4 = result;
    free(v11);
    return v4;
  }
  return result;
}

uint64_t sub_1CC04C108(llvm::SmallPtrSetImplBase **a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 20);
  if ((v3 & 0x40000000) != 0)
  {
    uint64_t v5 = *(uint64_t **)(a2 - 8);
    uint64_t v4 = v3 & 0x7FFFFFF;
    if (!v4) {
      return 1;
    }
  }
  else
  {
    uint64_t v4 = v3 & 0x7FFFFFF;
    uint64_t v5 = (uint64_t *)(a2 - 32 * v4);
    if (!v4) {
      return 1;
    }
  }
  uint64_t v6 = &v5[4 * v4];
  while (1)
  {
    uint64_t v7 = *v5;
    unsigned int v8 = (*(unsigned char *)(*v5 + 16) - 11);
    if (v8 >= 2) {
      break;
    }
LABEL_42:
    v5 += 4;
    if (v5 == v6) {
      return 1;
    }
  }
  if (v8 >= 0xFD)
  {
    BOOL v9 = *a1;
    uint64_t v10 = *((void *)*a1 + 1);
    uint64_t v11 = *((unsigned int *)*a1 + 5);
    if (v10 == *(void *)*a1)
    {
      if (v11)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 8 * v11;
        uint64_t v14 = (void *)*((void *)*a1 + 1);
        while (*v14 != v7)
        {
          if (*v14 == -2) {
            uint64_t v12 = v14;
          }
          ++v14;
          v13 -= 8;
          if (!v13)
          {
            if (!v12) {
              goto LABEL_16;
            }
            void *v12 = v7;
            --*((_DWORD *)v9 + 6);
            goto LABEL_40;
          }
        }
        goto LABEL_42;
      }
LABEL_16:
      unsigned int v15 = *((_DWORD *)v9 + 4);
      if (v11 < v15)
      {
        *((_DWORD *)v9 + 5) = v11 + 1;
        *(void *)(v10 + 8 * v11) = v7;
LABEL_40:
        char v25 = a1[1];
        uint64_t v26 = *((unsigned int *)v25 + 2);
        if (v26 >= *((_DWORD *)v25 + 3)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)v25 + 8 * v26) = v7;
        *((_DWORD *)v25 + 2) = v26 + 1;
        goto LABEL_42;
      }
    }
    else
    {
      unsigned int v15 = *((_DWORD *)v9 + 4);
    }
    if (3 * v15 <= 4 * ((int)v11 - *((_DWORD *)v9 + 6)))
    {
      if (v15 >= 0x40) {
        v15 *= 2;
      }
      else {
        unsigned int v15 = 128;
      }
    }
    else if (v15 - v11 >= v15 >> 3)
    {
LABEL_21:
      unsigned int v16 = v15 - 1;
      unsigned int v17 = (v15 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      int64_t v18 = (void *)(v10 + 8 * v17);
      uint64_t v19 = *v18;
      if (*v18 != -1)
      {
        int v20 = 0;
        int v21 = 1;
        while (v19 != v7)
        {
          if (v20) {
            BOOL v22 = 0;
          }
          else {
            BOOL v22 = v19 == -2;
          }
          if (v22) {
            int v20 = v18;
          }
          unsigned int v23 = v17 + v21++;
          unsigned int v17 = v23 & v16;
          int64_t v18 = (void *)(v10 + 8 * (v23 & v16));
          uint64_t v19 = *v18;
          if (*v18 == -1) {
            goto LABEL_33;
          }
        }
        goto LABEL_42;
      }
      int v20 = 0;
LABEL_33:
      if (v20) {
        int v24 = v20;
      }
      else {
        int v24 = v18;
      }
      if (*v24 == v7) {
        goto LABEL_42;
      }
      if (*v24 == -2) {
        --*((_DWORD *)v9 + 6);
      }
      else {
        ++*((_DWORD *)v9 + 5);
      }
      *int v24 = v7;
      goto LABEL_40;
    }
    llvm::SmallPtrSetImplBase::Grow(*a1, v15);
    unsigned int v15 = *((_DWORD *)v9 + 4);
    uint64_t v10 = *((void *)v9 + 1);
    goto LABEL_21;
  }
  return 0;
}

BOOL sub_1CC04C34C(void **a1, uint64_t a2)
{
  BOOL v4 = sub_1CB845E74(a2);
  BOOL result = 0;
  if (!a2 || !v4) {
    return result;
  }
  unsigned int v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 > 0x1B) {
    unsigned int v7 = v6 - 28;
  }
  else {
    unsigned int v7 = *(unsigned __int16 *)(a2 + 18);
  }
  if (v7 == 12)
  {
    int v8 = *(_DWORD *)(a2 + 20);
    if ((v8 & 0x40000000) != 0) {
      BOOL v9 = *(uint64_t **)(a2 - 8);
    }
    else {
      BOOL v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF));
    }
    uint64_t v12 = *v9;
    if (v12)
    {
LABEL_15:
      **a1 = v12;
      return 1;
    }
    return 0;
  }
  if (v7 != 16) {
    return 0;
  }
  if ((*(unsigned char *)(a2 + 17) & 0x10) != 0)
  {
    int v13 = *(_DWORD *)(a2 + 20);
    if ((v13 & 0x40000000) != 0) {
      uint64_t v14 = *(llvm::Constant ***)(a2 - 8);
    }
    else {
      uint64_t v14 = (llvm::Constant **)(a2 - 32 * (v13 & 0x7FFFFFF));
    }
    if (sub_1CC0241FC((uint64_t)&v18, *v14))
    {
LABEL_23:
      int v15 = *(_DWORD *)(a2 + 20);
      if ((v15 & 0x40000000) != 0) {
        uint64_t v16 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v16 = a2 - 32 * (v15 & 0x7FFFFFF);
      }
      uint64_t v12 = *(void *)(v16 + 32);
      if (v12) {
        goto LABEL_15;
      }
    }
    return 0;
  }
  int v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0) {
    uint64_t v11 = *(llvm::Constant ***)(a2 - 8);
  }
  else {
    uint64_t v11 = (llvm::Constant **)(a2 - 32 * (v10 & 0x7FFFFFF));
  }
  BOOL result = sub_1CC02435C((uint64_t)&v17, *v11);
  if (result) {
    goto LABEL_23;
  }
  return result;
}

const llvm::detail::DoubleAPFloat *sub_1CC04C468(llvm::PoisonValue ***a1, llvm::Type *a2, char a3, uint64_t a4, int a5, int a6)
{
  v52[8] = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  char v7 = a3;
  int v8 = (llvm::Constant **)a1;
  BOOL v9 = 0;
  int v10 = (llvm::Constant **)&a1[(void)a2];
  do
  {
    if (*(unsigned char *)(*(void *)((char *)v9 + (void)a1) + 16) == 12)
    {
      char v39 = **a1;
      return (const llvm::detail::DoubleAPFloat *)llvm::PoisonValue::get(v39, a2);
    }
    BOOL v9 = (llvm::Type *)((char *)v9 + 8);
  }
  while ((llvm::Type *)(8 * (void)a2) != v9);
  uint64_t v11 = v52;
  if (a5) {
    BOOL v12 = 0;
  }
  else {
    BOOL v12 = a6 == 1;
  }
  uint64_t v13 = v12;
  while (1)
  {
    uint64_t v14 = *v8;
    BOOL v16 = sub_1CC04AE9C((uint64_t)&v45, *v8);
    unsigned int v17 = *((unsigned __int8 *)v14 + 16);
    if (v14) {
      BOOL v18 = v17 == 17;
    }
    else {
      BOOL v18 = 0;
    }
    if (v18)
    {
      unint64_t v28 = (char *)v14 + 24;
      if (*((_UNKNOWN **)v14 + 4) == &unk_1CFB2E344) {
        unint64_t v28 = (char *)*((void *)v14 + 5);
      }
      unsigned int v29 = (v28[28] & 7) == 0;
    }
    else
    {
      uint64_t v19 = a4;
      int v20 = v10;
      uint64_t v21 = v13;
      uint64_t v22 = *(void *)v14;
      if (*(void *)v14) {
        BOOL v23 = (*(_DWORD *)(*(void *)v14 + 8) & 0xFE) == 18;
      }
      else {
        BOOL v23 = 0;
      }
      BOOL v24 = !v23 || v17 > 0x14;
      int v25 = v24;
      if (!v24)
      {
        SplatValue = llvm::Constant::getSplatValue(v14, 0);
        if (SplatValue && *((unsigned char *)SplatValue + 16) == 17)
        {
          unsigned int v27 = (char *)(SplatValue + 3);
          if ((_UNKNOWN *)SplatValue[4] == &unk_1CFB2E344) {
            unsigned int v27 = (char *)SplatValue[5];
          }
          LODWORD(v11) = (v27[28] & 7) == 0;
        }
        else
        {
          if (*(unsigned char *)(v22 + 8) == 18)
          {
            int v30 = *(_DWORD *)(v22 + 32);
            if (v30)
            {
              uint64_t v31 = 0;
              LODWORD(v11) = 0;
              while (1)
              {
                AggregateElement = llvm::Constant::getAggregateElement(v14, v31);
                if (!AggregateElement) {
                  break;
                }
                int v33 = *((unsigned __int8 *)AggregateElement + 16);
                if ((v33 - 11) >= 2)
                {
                  if (v33 != 17) {
                    break;
                  }
                  BOOL v34 = AggregateElement + 3;
                  if ((_UNKNOWN *)AggregateElement[4] == &unk_1CFB2E344) {
                    BOOL v34 = (void *)AggregateElement[5];
                  }
                  if ((*((unsigned char *)v34 + 28) & 7) != 0) {
                    break;
                  }
                  LODWORD(v11) = 1;
                }
                uint64_t v31 = (llvm::Type *)(v31 + 1);
                if (v30 == v31) {
                  goto LABEL_46;
                }
              }
            }
          }
          LODWORD(v11) = 0;
        }
      }
LABEL_46:
      unsigned int v29 = (v25 ^ 1) & v11;
      uint64_t v13 = v21;
      int v10 = v20;
      a4 = v19;
      char v7 = a3;
      uint64_t v11 = v52;
    }
    if (!*(unsigned char *)(a4 + 41))
    {
LABEL_50:
      BOOL v36 = 0;
      goto LABEL_51;
    }
    unsigned int v35 = (*((unsigned char *)v14 + 16) - 11);
    if (v35 < 2)
    {
      BOOL v36 = 1;
    }
    else
    {
      if (v35 < 0xFD) {
        goto LABEL_50;
      }
      uint64_t v45 = v49;
      int v46 = v49;
      uint64_t v47 = 8;
      int v48 = 0;
      unsigned int v50 = v52;
      uint64_t v51 = 0x800000000;
      v44[0] = (llvm::SmallPtrSetImplBase *)&v45;
      v44[1] = (llvm::SmallPtrSetImplBase *)&v50;
      BOOL v36 = 0;
      if (sub_1CC04C108(v44, (uint64_t)v14))
      {
        while (1)
        {
          BOOL v36 = v51 == 0;
          if (!v51) {
            break;
          }
          uint64_t v38 = *((void *)v50 + v51 - 1);
          LODWORD(v51) = v51 - 1;
          char v7 = a3;
          uint64_t v11 = v52;
          if ((sub_1CC04C108(v44, v38) & 1) == 0) {
            goto LABEL_65;
          }
        }
        char v7 = a3;
        uint64_t v11 = v52;
      }
LABEL_65:
      if (v50 != v52) {
        free(v50);
      }
      if (v46 != v45) {
        free(v46);
      }
    }
LABEL_51:
    if ((v7 & 2) != 0 && (v16 || v36) || (v7 & 4) != 0 && v29 | v36) {
      return (const llvm::detail::DoubleAPFloat *)llvm::PoisonValue::get(*(llvm::PoisonValue **)v14, v15);
    }
    if (v13) {
      int v37 = v36 || v16;
    }
    else {
      int v37 = a5 != 2 && v16;
    }
    if (v37 == 1) {
      break;
    }
    if (++v8 == v10) {
      return 0;
    }
  }
  if ((llvm::Constant::isNaN(v14) & 1) == 0) {
    return llvm::ConstantFP::getNaN(*(llvm::ConstantFP **)v14, 0, 0);
  }
  return v14;
}

BOOL sub_1CC04C850(uint64_t a1, llvm::Constant *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v4 == 17)
  {
    uint64_t v5 = (char *)a2 + 24;
    if (*((_UNKNOWN **)a2 + 4) == &unk_1CFB2E344) {
      uint64_t v5 = (char *)*((void *)a2 + 5);
    }
    return (v5[28] & 0xF) == 3;
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    if (*(void *)a2) {
      BOOL v8 = (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 18;
    }
    else {
      BOOL v8 = 0;
    }
    BOOL v9 = !v8 || v4 > 0x14;
    int v10 = v9;
    if (!v9)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && *((unsigned char *)SplatValue + 16) == 17)
      {
        BOOL v12 = (char *)(SplatValue + 3);
        if ((_UNKNOWN *)SplatValue[4] == &unk_1CFB2E344) {
          BOOL v12 = (char *)SplatValue[5];
        }
        BOOL v2 = (v12[28] & 0xF) == 3;
      }
      else
      {
        if (*(unsigned char *)(v7 + 8) == 18)
        {
          int v13 = *(_DWORD *)(v7 + 32);
          if (v13)
          {
            uint64_t v14 = 0;
            BOOL v2 = 0;
            while (1)
            {
              AggregateElement = llvm::Constant::getAggregateElement(a2, v14);
              if (!AggregateElement) {
                break;
              }
              int v16 = *((unsigned __int8 *)AggregateElement + 16);
              if ((v16 - 11) >= 2)
              {
                if (v16 != 17) {
                  break;
                }
                unsigned int v17 = AggregateElement + 3;
                if ((_UNKNOWN *)AggregateElement[4] == &unk_1CFB2E344) {
                  unsigned int v17 = (void *)AggregateElement[5];
                }
                if ((*((unsigned char *)v17 + 28) & 0xF) != 3) {
                  break;
                }
                BOOL v2 = 1;
              }
              uint64_t v14 = (llvm::Type *)(v14 + 1);
              if (v13 == v14) {
                return (v10 ^ 1) & v2;
              }
            }
          }
        }
        BOOL v2 = 0;
      }
    }
    return (v10 ^ 1) & v2;
  }
}

BOOL sub_1CC04C9B0(uint64_t a1, llvm::Constant *a2)
{
  if (!a2 || *((unsigned char *)a2 + 16) != 17)
  {
    uint64_t v6 = *(void *)a2;
    if (*(void *)a2) {
      BOOL v7 = (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 18;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && SplatValue[16] == 17) {
        goto LABEL_4;
      }
      if (*(unsigned char *)(v6 + 8) == 18)
      {
        int v8 = *(_DWORD *)(v6 + 32);
        if (v8)
        {
          BOOL v9 = 0;
          BOOL v5 = 0;
          while (1)
          {
            AggregateElement = llvm::Constant::getAggregateElement(a2, v9);
            if (!AggregateElement) {
              break;
            }
            int v11 = *((unsigned __int8 *)AggregateElement + 16);
            if ((v11 - 11) >= 2)
            {
              if (v11 != 17) {
                break;
              }
              BOOL v12 = AggregateElement + 3;
              if ((_UNKNOWN *)AggregateElement[4] == &unk_1CFB2E344) {
                BOOL v12 = (void *)AggregateElement[5];
              }
              if ((*((unsigned char *)v12 + 28) & 7) != 3) {
                break;
              }
              BOOL v5 = 1;
            }
            BOOL v9 = (llvm::Type *)(v9 + 1);
            if (v8 == v9) {
              return v5;
            }
          }
        }
      }
    }
    return 0;
  }
  SplatValue = a2;
LABEL_4:
  unsigned int v4 = SplatValue + 24;
  if (*((_UNKNOWN **)SplatValue + 4) == &unk_1CFB2E344) {
    unsigned int v4 = (char *)*((void *)SplatValue + 5);
  }
  return (v4[28] & 7) == 3;
}

BOOL sub_1CC04CADC(void *a1, uint64_t a2)
{
  BOOL v4 = sub_1CB845E74(a2);
  BOOL result = 0;
  if (a2 && v4)
  {
    unsigned int v6 = *(unsigned __int8 *)(a2 + 16);
    if (v6 <= 0x1B) {
      unsigned int v7 = *(unsigned __int16 *)(a2 + 18);
    }
    else {
      unsigned int v7 = v6 - 28;
    }
    if (v7 == 12)
    {
      int v13 = *(_DWORD *)(a2 + 20);
      if ((v13 & 0x40000000) != 0) {
        BOOL v12 = *(void **)(a2 - 8);
      }
      else {
        BOOL v12 = (void *)(a2 - 32 * (v13 & 0x7FFFFFF));
      }
      return *a1 == *v12;
    }
    if (v7 != 16) {
      return 0;
    }
    if ((*(unsigned char *)(a2 + 17) & 0x10) != 0)
    {
      int v8 = *(_DWORD *)(a2 + 20);
      if ((v8 & 0x40000000) != 0) {
        BOOL v9 = *(llvm::Constant ***)(a2 - 8);
      }
      else {
        BOOL v9 = (llvm::Constant **)(a2 - 32 * (v8 & 0x7FFFFFF));
      }
      if (!sub_1CC0241FC((uint64_t)&v17, *v9)) {
        return 0;
      }
      goto LABEL_13;
    }
    int v14 = *(_DWORD *)(a2 + 20);
    if ((v14 & 0x40000000) != 0) {
      int v15 = *(llvm::Constant ***)(a2 - 8);
    }
    else {
      int v15 = (llvm::Constant **)(a2 - 32 * (v14 & 0x7FFFFFF));
    }
    BOOL result = sub_1CC02435C((uint64_t)&v16, *v15);
    if (result)
    {
LABEL_13:
      int v10 = *(_DWORD *)(a2 + 20);
      if ((v10 & 0x40000000) != 0) {
        uint64_t v11 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v11 = a2 - 32 * (v10 & 0x7FFFFFF);
      }
      BOOL v12 = (void *)(v11 + 32);
      return *a1 == *v12;
    }
  }
  return result;
}

uint64_t sub_1CC04CBF4(int a1)
{
  uint64_t result = 0;
  if (a1 <= 257)
  {
    if ((a1 - 13) >= 2 && (a1 - 139) >= 2 && a1 != 203) {
      return result;
    }
    return 1;
  }
  if ((a1 - 258) <= 0x26 && ((1 << (a1 - 2)) & 0x4000000007) != 0
    || (a1 - 1830) <= 0x15 && ((1 << (a1 - 38)) & 0x220001) != 0
    || a1 == 2131)
  {
    return 1;
  }
  return result;
}

uint64_t sub_1CC04CC84(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (!a2 || *(unsigned char *)(a2 + 16) != 84) {
    return result;
  }
  uint64_t v5 = *(void *)(a2 - 32);
  if (!v5
    || *(unsigned char *)(v5 + 16)
    || *(void *)(v5 + 24) != *(void *)(a2 + 72)
    || *(_DWORD *)(v5 + 36) != *(_DWORD *)a1)
  {
    return 0;
  }
  uint64_t result = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 8));
  unsigned int v6 = *(unsigned __int8 *)(result + 16);
  if (result) {
    BOOL v7 = v6 == 17;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
LABEL_19:
    uint64_t result = sub_1CB844168(result, *(double *)(a1 + 16));
    if (result)
    {
      if (*(unsigned char *)(a2 + 16) == 84)
      {
        uint64_t v9 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 24));
        if (v9)
        {
          **(void **)(a1 + 32) = v9;
          return 1;
        }
      }
      return 0;
    }
    return result;
  }
  if (v6 > 0x14 || (*(_DWORD *)(*(void *)result + 8) & 0xFE) != 18) {
    return 0;
  }
  uint64_t result = (uint64_t)llvm::Constant::getSplatValue((llvm::Constant *)result, 0);
  if (result)
  {
    if (*(unsigned char *)(result + 16) == 17) {
      goto LABEL_19;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CC04CD8C(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  v33[0] = &v38;
  v33[1] = &v37;
  v34[0] = &v38;
  v34[1] = &v37;
  v35[0] = &v38;
  v35[1] = &v37;
  v36[0] = &v38;
  v36[1] = &v37;
  if ((sub_1CC04A6C4(v33, a2) & 1) == 0
    && (sub_1CC04A7E0(v34, v4) & 1) == 0
    && !sub_1CC04A914(v35, v4)
    && !sub_1CC04AA3C(v36, v4))
  {
    return 0;
  }
  if (*(unsigned char *)(v4 + 16) != 84) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 - 32);
  if (!v6 || *(unsigned char *)(v6 + 16) || *(void *)(v6 + 24) != *(void *)(v4 + 72) || (*(unsigned char *)(v6 + 33) & 0x20) == 0) {
    return 0;
  }
  int v8 = *(_DWORD *)(v6 + 36);
  if (v38 == a3 || v37 == a3) {
    goto LABEL_86;
  }
  int v9 = *(unsigned __int8 *)(a3 + 16);
  if (v9 != 85)
  {
    if (v9 != 84) {
      return 0;
    }
    uint64_t v10 = *(void *)(a3 - 32);
    if (!v10) {
      return 0;
    }
    if (*(unsigned char *)(v10 + 16)
      || *(void *)(v10 + 24) != *(void *)(a3 + 72)
      || (*(unsigned char *)(v10 + 33) & 0x20) == 0
      || *(_DWORD *)(v10 + 36) != 274)
    {
      goto LABEL_103;
    }
    uint64_t v11 = (uint64_t *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
    uint64_t v12 = *v11;
    uint64_t v13 = v11[4];
    if (v38 == v12 && v37 == v13) {
      goto LABEL_86;
    }
    if (v38 != v13) {
      goto LABEL_103;
    }
    goto LABEL_38;
  }
  uint64_t v14 = *(void *)(a3 - 96);
  int v15 = *(unsigned __int8 *)(v14 + 16);
  if (!v14 || v15 != 81)
  {
LABEL_41:
    if (v15 != 81) {
      return 0;
    }
    goto LABEL_42;
  }
  uint64_t v16 = *(void *)(a3 - 64);
  uint64_t v17 = *(void *)(a3 - 32);
  uint64_t v12 = *(void *)(v14 - 64);
  uint64_t v18 = *(void *)(v14 - 32);
  if ((v16 != v12 || v17 != v18) && (v16 != v18 || v17 != v12)) {
    goto LABEL_42;
  }
  int v19 = *(_WORD *)(v14 + 18) & 0x3E;
  if (v16 != v12)
  {
    if (v19 == 40) {
      goto LABEL_35;
    }
LABEL_42:
    uint64_t v20 = *(void *)(a3 - 64);
    uint64_t v10 = *(void *)(a3 - 32);
    uint64_t v21 = *(void *)(v14 - 64);
    uint64_t v22 = *(void *)(v14 - 32);
    if ((v20 != v21 || v10 != v22) && (v20 != v22 || v10 != v21)) {
      goto LABEL_59;
    }
    int v23 = *(_WORD *)(v14 + 18) & 0x3E;
    if (v20 == v21)
    {
      if (v23 != 40)
      {
        uint64_t v21 = *(void *)(a3 - 64);
        goto LABEL_59;
      }
    }
    else if (v23 != 38)
    {
      goto LABEL_59;
    }
    if (v38 == v21 && v37 == v22) {
      goto LABEL_86;
    }
    if (v38 != v22) {
      goto LABEL_59;
    }
LABEL_53:
    if (v37 == v21) {
      goto LABEL_86;
    }
    if (v9 != 85)
    {
      if (!v10 || *(unsigned char *)(v10 + 16)) {
        return 0;
      }
      goto LABEL_110;
    }
    uint64_t v14 = *(void *)(a3 - 96);
    if (*(unsigned char *)(v14 + 16) != 81) {
      return 0;
    }
    uint64_t v20 = *(void *)(a3 - 64);
    uint64_t v21 = *(void *)(v14 - 64);
    uint64_t v22 = *(void *)(v14 - 32);
LABEL_59:
    if ((v20 != v21 || v10 != v22) && (v20 != v22 || v10 != v21)) {
      goto LABEL_76;
    }
    int v24 = *(_WORD *)(v14 + 18) & 0x3E;
    if (v20 == v21)
    {
      if (v24 != 34)
      {
        uint64_t v20 = v21;
        goto LABEL_76;
      }
    }
    else if (v24 != 36)
    {
      goto LABEL_76;
    }
    if (v38 == v21 && v37 == v22) {
      goto LABEL_86;
    }
    if (v38 != v22)
    {
LABEL_76:
      if ((v20 != v21 || v10 != v22) && (v20 != v22 || v10 != v21)) {
        return 0;
      }
      int v25 = *(_WORD *)(v14 + 18) & 0x3E;
      if (v20 == v21)
      {
        if (v25 != 36) {
          return 0;
        }
      }
      else if (v25 != 34)
      {
        return 0;
      }
      if (v38 == v21 && v37 == v22) {
        goto LABEL_86;
      }
      if (v38 != v22) {
        return 0;
      }
LABEL_96:
      if (v37 == v21) {
        goto LABEL_86;
      }
      return 0;
    }
    goto LABEL_70;
  }
  if (v19 != 38) {
    goto LABEL_42;
  }
LABEL_35:
  if (v38 == v12 && v37 == v18) {
    goto LABEL_86;
  }
  if (v38 != v18) {
    goto LABEL_42;
  }
LABEL_38:
  if (v37 == v12) {
    goto LABEL_86;
  }
  if (v9 != 84)
  {
    uint64_t v14 = *(void *)(a3 - 96);
    int v15 = *(unsigned __int8 *)(v14 + 16);
    goto LABEL_41;
  }
  uint64_t v10 = *(void *)(a3 - 32);
  if (!v10) {
    return 0;
  }
LABEL_103:
  if (*(unsigned char *)(v10 + 16)) {
    return 0;
  }
  if (*(void *)(v10 + 24) == *(void *)(a3 + 72)
    && (*(unsigned char *)(v10 + 33) & 0x20) != 0
    && *(_DWORD *)(v10 + 36) == 275)
  {
    unsigned int v27 = (uint64_t *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
    uint64_t v21 = *v27;
    uint64_t v28 = v27[4];
    if (v38 == v21 && v37 == v28) {
      goto LABEL_86;
    }
    if (v38 == v28) {
      goto LABEL_53;
    }
  }
LABEL_110:
  if (*(void *)(v10 + 24) != *(void *)(a3 + 72)
    || (*(unsigned char *)(v10 + 33) & 0x20) == 0
    || *(_DWORD *)(v10 + 36) != 305)
  {
    goto LABEL_116;
  }
  unsigned int v29 = (uint64_t *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
  uint64_t v21 = *v29;
  uint64_t v30 = v29[4];
  if (v38 == v21 && v37 == v30) {
    goto LABEL_86;
  }
  if (v38 != v30) {
    goto LABEL_116;
  }
LABEL_70:
  if (v37 != v21)
  {
    if (v9 != 85)
    {
      if (!v10 || *(unsigned char *)(v10 + 16)) {
        return 0;
      }
LABEL_116:
      if (*(void *)(v10 + 24) != *(void *)(a3 + 72)
        || (*(unsigned char *)(v10 + 33) & 0x20) == 0
        || *(_DWORD *)(v10 + 36) != 306)
      {
        return 0;
      }
      uint64_t v31 = (uint64_t *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
      uint64_t v21 = *v31;
      uint64_t v32 = v31[4];
      if (v38 == v21 && v37 == v32) {
        goto LABEL_86;
      }
      if (v38 != v32) {
        return 0;
      }
      goto LABEL_96;
    }
    uint64_t v14 = *(void *)(a3 - 96);
    if (*(unsigned char *)(v14 + 16) != 81) {
      return 0;
    }
    uint64_t v20 = *(void *)(a3 - 64);
    uint64_t v21 = *(void *)(v14 - 64);
    uint64_t v22 = *(void *)(v14 - 32);
    goto LABEL_76;
  }
LABEL_86:
  if (v8 != a1)
  {
    if (a1 == 306)
    {
      int v26 = 305;
    }
    else if (a1 == 274)
    {
      int v26 = 275;
    }
    else
    {
      int v26 = a1 == 275 ? 274 : 306;
    }
    uint64_t v4 = a3;
    if (v8 != v26) {
      return 0;
    }
  }
  return v4;
}

uint64_t sub_1CC04D2B0(uint64_t a1, llvm::Constant *a2)
{
  if (!a2 || *((unsigned char *)a2 + 16) != 16)
  {
    uint64_t v9 = *(void *)a2;
    if (*(void *)a2) {
      BOOL v10 = (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 18;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && SplatValue[16] == 16) {
        goto LABEL_4;
      }
      if (*(unsigned char *)(v9 + 8) == 18)
      {
        int v11 = *(_DWORD *)(v9 + 32);
        if (v11)
        {
          uint64_t v12 = 0;
          LOBYTE(v8) = 0;
          while (1)
          {
            AggregateElement = llvm::Constant::getAggregateElement(a2, v12);
            if (!AggregateElement) {
              break;
            }
            int v14 = *((unsigned __int8 *)AggregateElement + 16);
            if ((v14 - 11) >= 2)
            {
              if (v14 != 16) {
                break;
              }
              uint64_t v16 = AggregateElement[3];
              int v15 = AggregateElement + 3;
              unsigned int v17 = *((_DWORD *)v15 + 2);
              uint64_t v18 = (void *)(v16 + 8 * ((v17 - 1) >> 6));
              if (v17 < 0x41) {
                uint64_t v18 = v15;
              }
              if (((*v18 >> (v17 - 1)) & 1) == 0) {
                break;
              }
              LOBYTE(v8) = 1;
            }
            uint64_t v12 = (llvm::Type *)(v12 + 1);
            if (v11 == v12) {
              return v8 & 1;
            }
          }
        }
      }
    }
    LOBYTE(v8) = 0;
    return v8 & 1;
  }
  SplatValue = a2;
LABEL_4:
  uint64_t v5 = *((void *)SplatValue + 3);
  uint64_t v4 = SplatValue + 24;
  unsigned int v6 = *((_DWORD *)v4 + 2);
  BOOL v7 = (void *)(v5 + 8 * ((v6 - 1) >> 6));
  if (v6 < 0x41) {
    BOOL v7 = v4;
  }
  uint64_t v8 = (*v7 >> (v6 - 1)) & 1;
  return v8 & 1;
}

uint64_t sub_1CC04D3D4(unsigned int a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a2 && *(unsigned char *)(a2 + 16) == 84)
  {
    uint64_t v4 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * a1);
    unsigned int v5 = *(unsigned __int8 *)(v4 + 16);
    if (v4) {
      BOOL v6 = v5 > 0x14;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6) {
      return 0;
    }
    if (v5 == 16)
    {
      uint64_t v7 = *(unsigned int *)(v4 + 32);
      if (v7 >= 0x41)
      {
        int v9 = 0;
        int64_t v10 = (unint64_t)(v7 + 63) >> 6;
        do
        {
          BOOL v6 = v10-- < 1;
          if (v6) {
            break;
          }
          unint64_t v11 = *(void *)(*(void *)(v4 + 24) + 8 * v10);
          v9 += __clz(v11);
        }
        while (!v11);
        int v12 = v7 | 0xFFFFFFC0;
        if ((v7 & 0x3F) == 0) {
          int v12 = 0;
        }
        if (v9 + v12 != v7) {
          return sub_1CC03F414((uint64_t)&v13, (llvm::Constant *)v4);
        }
      }
      else if (*(void *)(v4 + 24))
      {
        return sub_1CC03F414((uint64_t)&v13, (llvm::Constant *)v4);
      }
    }
    else if (v5 == 17)
    {
      if ((sub_1CB844168(v4, 0.0) & 1) == 0) {
        return sub_1CC03F414((uint64_t)&v13, (llvm::Constant *)v4);
      }
    }
    else if (v5 - 18 >= 3 && v5 != 13)
    {
      return sub_1CC03F414((uint64_t)&v13, (llvm::Constant *)v4);
    }
    return 1;
  }
  return result;
}

BOOL sub_1CC04D4E0(uint64_t a1, uint64_t *a2)
{
  sub_1CC04D570(a1, a2, (uint64_t)v8);
  int v4 = v9;
  if (v9)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = *(_DWORD *)(a1 + 80);
    if (v6 >= *(_DWORD *)(a1 + 84)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 72) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 80);
  }
  return v4 != 0;
}

void *sub_1CC04D570@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int v14 = 0;
  uint64_t result = (void *)sub_1CC04D62C(a1, a2, &v14);
  uint64_t v7 = v14;
  if (result)
  {
    uint64_t v12 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v13 = 8;
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 8);
      uint64_t v13 = *(unsigned int *)(a1 + 16);
    }
    char v11 = 0;
    uint64_t v10 = v12 + 8 * v13;
  }
  else
  {
    uint64_t result = sub_1CC04D6D4((_DWORD *)a1, (uint64_t)a2, a2, v14);
    uint64_t v7 = result;
    *uint64_t result = *a2;
    uint64_t v8 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v9 = 8;
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = *(unsigned int *)(a1 + 16);
    }
    uint64_t v10 = v8 + 8 * v9;
    char v11 = 1;
  }
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v10;
  *(unsigned char *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_1CC04D62C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_15:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_15;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void *sub_1CC04D6D4(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v4 = *a1 >> 1;
  if (*a1) {
    unsigned int v5 = 8;
  }
  else {
    unsigned int v5 = a1[4];
  }
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - a1[1] > v5 >> 3)
  {
    goto LABEL_5;
  }
  uint64_t v8 = (uint64_t)a1;
  sub_1CD497EA4((uint64_t)a1, v5);
  uint64_t v9 = 0;
  sub_1CC04D62C(v8, a3, &v9);
  a1 = (_DWORD *)v8;
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

void llvm::initializeIntervalPartitionPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC5F80, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC04D804;
    v3[1] = &v1;
    BOOL v2 = v3;
    std::__call_once(&qword_1EBCC5F80, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC04D804()
{
}

llvm::IntervalPartition *llvm::IntervalPartition::IntervalPartition(llvm::IntervalPartition *this, uint64_t ***a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = &llvm::IntervalPartition::ID;
  *((_DWORD *)this + 6) = 2;
  *(void *)this = &unk_1F2604AA0;
  *((void *)this + 6) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 4) = (char *)this + 40;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  uint64_t v16 = 0;
  unsigned int v17 = 0;
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v18 = 0;
  int v19 = v20;
  char v21 = 0;
  void v20[2] = a2;
  sub_1CC04E318((uint64_t)&v16, a2[7]);
  uint64_t v3 = *((void *)v17 - 2);
  *((void *)this + 7) = v3;
  llvm::IntervalPartition::addIntervalToPartition((uint64_t)this, v3);
  sub_1CC04DA0C((uint64_t)&v16);
  int v4 = 0;
  uint64_t v5 = 0;
  memset(v15, 0, sizeof(v15));
  long long v12 = 0u;
  uint64_t v13 = 0;
  int v14 = v15;
  while (1)
  {
    unsigned int v6 = v16;
    if (v17 - v16 == v5 - (void)v4) {
      break;
    }
LABEL_10:
    llvm::IntervalPartition::addIntervalToPartition((uint64_t)this, *((void *)v17 - 2));
    sub_1CC04DA0C((uint64_t)&v16);
    uint64_t v5 = *((void *)&v12 + 1);
    int v4 = (void *)v12;
  }
  while (v6 != v17)
  {
    if (*(void *)v6 != *v4 || *((void *)v6 + 1) != v4[1]) {
      goto LABEL_10;
    }
    v6 += 16;
    v4 += 2;
  }
  sub_1CD4987C8((char **)&v12);
  uint64_t v8 = (uint64_t **)*((void *)this + 8);
  uint64_t v9 = (uint64_t **)*((void *)this + 9);
  while (v8 != v9)
  {
    int v10 = *v8++;
    llvm::IntervalPartition::updatePredecessors(this, v10);
  }
  sub_1CD4987C8(&v16);
  return this;
}

{
  return llvm::IntervalPartition::IntervalPartition(this, a2);
}

uint64_t sub_1CC04DA0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  while (1)
  {
    uint64_t v3 = *(unint64_t **)(v2 - 8);
    int v4 = *(unint64_t **)(*(void *)(v2 - 16) + 40);
    if (v3 != v4) {
      break;
    }
LABEL_21:
    if (*(unsigned char *)(a1 + 56))
    {
      unsigned int v17 = *(void **)(v2 - 16);
      if (v17)
      {
        uint64_t v18 = sub_1CD49870C(v17);
        MEMORY[0x1D25D9CE0](v18, 0xA0C40CC6163FFLL);
        uint64_t v2 = *(void *)(a1 + 8);
      }
    }
    v2 -= 16;
    *(void *)(a1 + 8) = v2;
    if (*(void *)a1 == v2) {
      return a1;
    }
  }
  while (1)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v8 = *(void **)(v5 + 40);
    unsigned int v6 = (void *)(v5 + 40);
    uint64_t v7 = v8;
    if (v8)
    {
      unint64_t v9 = *v3;
      int v10 = v6;
      do
      {
        unint64_t v11 = v7[4];
        BOOL v12 = v11 >= v9;
        if (v11 >= v9) {
          uint64_t v13 = v7;
        }
        else {
          uint64_t v13 = v7 + 1;
        }
        if (v12) {
          int v10 = v7;
        }
        uint64_t v7 = (void *)*v13;
      }
      while (*v13);
      int v14 = v10 == v6 || v10[4] > v9 ? 0 : (uint64_t **)v10[5];
      uint64_t v15 = a1;
    }
    else
    {
      uint64_t v15 = a1;
      int v14 = 0;
    }
    char v16 = sub_1CC04E318(v15, v14);
    uint64_t v3 = (unint64_t *)(*(void *)(v2 - 8) + 8);
    *(void *)(v2 - 8) = v3;
    if (v16) {
      return a1;
    }
    if (v3 == v4)
    {
      uint64_t v2 = *(void *)(a1 + 8);
      goto LABEL_21;
    }
  }
}

uint64_t sub_1CC04DB1C(uint64_t a1, uint64_t *a2)
{
  int v4 = a2;
  sub_1CD3CFB98((uint64_t **)(a1 + 24), (unint64_t *)&v4, &v4);
  if (v2) {
    operator new();
  }
  return v2 & 1;
}

void sub_1CC04DDAC(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v60 = a3;
  unsigned int v6 = *(void **)(a1 + 32);
  if (!v6)
  {
LABEL_6:
    uint64_t v8 = a3[1];
    if (v8)
    {
      while (1)
      {
        uint64_t v9 = *(void *)(v8 + 24);
        unsigned int v10 = *(unsigned __int8 *)(v9 + 16);
        BOOL v11 = v9 && v10 >= 0x1C;
        if (v11 && v10 - 29 < 0xB) {
          break;
        }
        uint64_t v8 = *(void *)(v8 + 8);
        if (!v8) {
          goto LABEL_16;
        }
      }
      uint64_t v13 = (uint64_t **)a2[2];
      if ((uint64_t **)a2[1] == v13)
      {
LABEL_33:
        char v21 = (char *)a2[4];
        uint64_t v22 = (char *)a2[5];
        if (v21 != v22)
        {
          int v23 = (uint64_t **)a2[4];
          while (*v23 != a3)
          {
            if (++v23 == (uint64_t **)v22) {
              goto LABEL_37;
            }
          }
          return;
        }
LABEL_37:
        unint64_t v24 = a2[6];
        if ((unint64_t)v22 >= v24)
        {
          uint64_t v26 = (v22 - v21) >> 3;
          unint64_t v27 = v26 + 1;
          if (!((unint64_t)(v26 + 1) >> 61))
          {
            uint64_t v28 = v24 - (void)v21;
            if (v28 >> 2 > v27) {
              unint64_t v27 = v28 >> 2;
            }
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v27;
            }
            if (v29)
            {
              if (v29 >> 61) {
                goto LABEL_117;
              }
              uint64_t v30 = (char *)operator new(8 * v29);
            }
            else
            {
              uint64_t v30 = 0;
            }
            char v39 = (uint64_t **)&v30[8 * v26];
            int v40 = &v30[8 * v29];
            *char v39 = a3;
            int v25 = v39 + 1;
            if (v21 == v22) {
              goto LABEL_70;
            }
            do
            {
              int v41 = (uint64_t *)*((void *)v22 - 1);
              v22 -= 8;
              *--char v39 = v41;
            }
            while (v22 != v21);
            goto LABEL_69;
          }
          goto LABEL_116;
        }
LABEL_38:
        *(void *)uint64_t v22 = a3;
        int v25 = v22 + 8;
LABEL_72:
        a2[5] = v25;
        return;
      }
LABEL_20:
      uint64_t v16 = *(void *)(v9 + 40);
      unsigned int v17 = (void *)a2[1];
      while (*v17 != v16)
      {
        if (++v17 == v13) {
          goto LABEL_33;
        }
      }
      while (1)
      {
        uint64_t v8 = *(void *)(v8 + 8);
        if (!v8) {
          break;
        }
        uint64_t v9 = *(void *)(v8 + 24);
        unsigned int v18 = *(unsigned __int8 *)(v9 + 16);
        if (v9) {
          BOOL v19 = v18 >= 0x1C;
        }
        else {
          BOOL v19 = 0;
        }
        if (v19 && v18 - 29 < 0xB) {
          goto LABEL_20;
        }
      }
    }
    else
    {
LABEL_16:
      uint64_t v13 = (uint64_t **)a2[2];
    }
    unint64_t v14 = a2[3];
    if ((unint64_t)v13 >= v14)
    {
      uint64_t v42 = (void *)a2[1];
      uint64_t v43 = v13 - (uint64_t **)v42;
      unint64_t v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 61) {
        goto LABEL_116;
      }
      uint64_t v45 = v14 - (void)v42;
      if (v45 >> 2 > v44) {
        unint64_t v44 = v45 >> 2;
      }
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v44;
      }
      if (v46)
      {
        if (v46 >> 61) {
          goto LABEL_117;
        }
        uint64_t v47 = (char *)operator new(8 * v46);
      }
      else
      {
        uint64_t v47 = 0;
      }
      int v48 = (uint64_t **)&v47[8 * v43];
      *int v48 = a3;
      uint64_t v15 = v48 + 1;
      if (v13 != v42)
      {
        do
        {
          int v49 = *--v13;
          *--int v48 = v49;
        }
        while (v13 != v42);
        uint64_t v13 = (uint64_t **)a2[1];
      }
      a2[1] = v48;
      a2[2] = v15;
      a2[3] = &v47[8 * v46];
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      *uint64_t v13 = a3;
      uint64_t v15 = v13 + 1;
    }
    a2[2] = v15;
    sub_1CD3CFB98((uint64_t **)(a1 + 24), (unint64_t *)&v60, &v60);
    unsigned int v50 = (uint64_t **)a2[4];
    uint64_t v51 = (uint64_t **)a2[5];
    if (v50 != v51)
    {
      while (*v50 != v60)
      {
        if (++v50 == v51) {
          goto LABEL_94;
        }
      }
      sub_1CC04E254((uint64_t)(a2 + 4), (uint64_t)v60);
    }
LABEL_94:
    uint64_t v52 = (uint64_t *)a3[5];
    if (v52 != a3 + 5)
    {
      if (v52) {
        uint64_t v53 = v52 - 3;
      }
      else {
        uint64_t v53 = 0;
      }
      int v54 = *((unsigned __int8 *)v53 + 16);
      if ((v54 - 29) >= 0xB) {
        uint64_t v55 = 0;
      }
      else {
        uint64_t v55 = (llvm::Instruction *)v53;
      }
      if (v54 != 30)
      {
        int v56 = 2;
        switch(*((unsigned char *)v53 + 16))
        {
          case 0x1E:
            __break(1u);
            goto LABEL_119;
          case 0x1F:
            int v56 = (*((_DWORD *)v53 + 5) >> 1) & 0x3FFFFFF;
            goto LABEL_114;
          case 0x20:
          case 0x26:
LABEL_119:
            int v56 = (*((_DWORD *)v53 + 5) & 0x7FFFFFF) - 1;
            goto LABEL_114;
          case 0x21:
            goto LABEL_105;
          case 0x24:
            int v56 = *((_WORD *)v53 + 9) & 1;
            goto LABEL_114;
          case 0x25:
            int v56 = 1;
            goto LABEL_105;
          case 0x27:
            int v56 = *((_DWORD *)v53 + 20) + 1;
LABEL_114:
            if (!v56) {
              return;
            }
            goto LABEL_105;
          default:
            return;
        }
      }
      if ((*((_DWORD *)v53 + 5) & 0x7FFFFFF) == 3) {
        int v56 = 2;
      }
      else {
        int v56 = 1;
      }
LABEL_105:
      for (unsigned int i = 0; i != v56; ++i)
      {
        uint64_t Successor = llvm::Instruction::getSuccessor(v55, i);
        sub_1CC04DDAC(a1, a2, Successor);
      }
    }
    return;
  }
  while (1)
  {
    unint64_t v7 = v6[4];
    if (v7 <= (unint64_t)a3) {
      break;
    }
LABEL_5:
    unsigned int v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_6;
    }
  }
  if (v7 < (unint64_t)a3)
  {
    ++v6;
    goto LABEL_5;
  }
  for (uint64_t j = (uint64_t **)a2[1]; j != (uint64_t **)a2[2]; ++j)
  {
    if (*j == a3) {
      return;
    }
  }
  char v21 = (char *)a2[4];
  uint64_t v22 = (char *)a2[5];
  if (v21 == v22)
  {
LABEL_56:
    unint64_t v33 = a2[6];
    if ((unint64_t)v22 >= v33)
    {
      uint64_t v34 = (v22 - v21) >> 3;
      unint64_t v35 = v34 + 1;
      if (!((unint64_t)(v34 + 1) >> 61))
      {
        uint64_t v36 = v33 - (void)v21;
        if (v36 >> 2 > v35) {
          unint64_t v35 = v36 >> 2;
        }
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v35;
        }
        if (!v37)
        {
          uint64_t v38 = 0;
          goto LABEL_109;
        }
        if (!(v37 >> 61))
        {
          uint64_t v38 = (char *)operator new(8 * v37);
LABEL_109:
          char v39 = (uint64_t **)&v38[8 * v34];
          int v40 = &v38[8 * v37];
          *char v39 = a3;
          int v25 = v39 + 1;
          if (v21 == v22)
          {
LABEL_70:
            a2[4] = v39;
            a2[5] = v25;
            a2[6] = v40;
            if (v21) {
              operator delete(v21);
            }
            goto LABEL_72;
          }
          do
          {
            int64_t v59 = (uint64_t *)*((void *)v22 - 1);
            v22 -= 8;
            *--char v39 = v59;
          }
          while (v22 != v21);
LABEL_69:
          char v21 = (char *)a2[4];
          goto LABEL_70;
        }
LABEL_117:
        sub_1CB833614();
      }
LABEL_116:
      abort();
    }
    goto LABEL_38;
  }
  uint64_t v32 = (uint64_t **)a2[4];
  while (*v32 != a3)
  {
    if (++v32 == (uint64_t **)v22) {
      goto LABEL_56;
    }
  }
}

uint64_t sub_1CC04E254(uint64_t result, uint64_t a2)
{
  char v2 = *(void **)(result + 8);
  uint64_t v3 = *(void **)result;
  if (*(void **)result != v2)
  {
    while (*v3 != a2)
    {
      if (++v3 == v2)
      {
        uint64_t v3 = *(void **)(result + 8);
        break;
      }
    }
  }
  int v4 = v3 + 1;
  if (v3 != v2 && v4 != v2)
  {
    do
    {
      if (*v4 != a2) {
        *v3++ = *v4;
      }
      ++v4;
    }
    while (v4 != v2);
    char v2 = *(void **)(result + 8);
  }
  if (v3 != v2) {
    *(void *)(result + 8) = v3;
  }
  return result;
}

uint64_t sub_1CC04E318(uint64_t a1, uint64_t **a2)
{
  int v4 = *a2;
  sub_1CD3CFB98((uint64_t **)(a1 + 24), (unint64_t *)&v4, &v4);
  if (v2) {
    operator new();
  }
  return v2 & 1;
}

void sub_1CC04E510(uint64_t a1, void *a2, uint64_t **a3)
{
  unsigned int v6 = *a3;
  uint64_t v84 = *a3;
  unint64_t v7 = *(void **)(a1 + 32);
  if (!v7)
  {
LABEL_6:
    uint64_t v9 = a3[7];
    unsigned int v10 = a3[8];
    if (v9 == v10)
    {
      BOOL v12 = (char *)a2[1];
      BOOL v11 = (char *)a2[2];
    }
    else
    {
      BOOL v12 = (char *)a2[1];
      BOOL v11 = (char *)a2[2];
      if (v12 == v11)
      {
LABEL_14:
        unint64_t v14 = (char *)a2[4];
        uint64_t v15 = (char *)a2[5];
        if (v14 != v15)
        {
          uint64_t v16 = (uint64_t **)a2[4];
          while (*v16 != v6)
          {
            if (++v16 == (uint64_t **)v15) {
              goto LABEL_18;
            }
          }
          return;
        }
LABEL_18:
        unint64_t v17 = a2[6];
        if ((unint64_t)v15 >= v17)
        {
          uint64_t v19 = (v15 - v14) >> 3;
          unint64_t v20 = v19 + 1;
          if (!((unint64_t)(v19 + 1) >> 61))
          {
            uint64_t v21 = v17 - (void)v14;
            if (v21 >> 2 > v20) {
              unint64_t v20 = v21 >> 2;
            }
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v22 = v20;
            }
            if (v22)
            {
              if (v22 >> 61) {
                goto LABEL_117;
              }
              int v23 = (char *)operator new(8 * v22);
            }
            else
            {
              int v23 = 0;
            }
            uint64_t v32 = (uint64_t **)&v23[8 * v19];
            unint64_t v33 = &v23[8 * v22];
            *uint64_t v32 = v6;
            unsigned int v18 = v32 + 1;
            if (v14 == v15) {
              goto LABEL_51;
            }
            do
            {
              uint64_t v34 = (uint64_t *)*((void *)v15 - 1);
              v15 -= 8;
              *--uint64_t v32 = v34;
            }
            while (v15 != v14);
            goto LABEL_50;
          }
          goto LABEL_116;
        }
LABEL_19:
        *(void *)uint64_t v15 = v6;
        unsigned int v18 = v15 + 8;
LABEL_53:
        a2[5] = v18;
        return;
      }
      do
      {
        uint64_t v13 = (void *)a2[1];
        while (*v13 != *v9)
        {
          if (++v13 == (void *)v11) {
            goto LABEL_14;
          }
        }
        ++v9;
      }
      while (v9 != v10);
    }
    uint64_t v36 = a3[1];
    unint64_t v35 = a3[2];
    if ((char *)v35 - (char *)v36 >= 1)
    {
      uint64_t v37 = v35 - v36;
      uint64_t v38 = v11 - v12;
      char v39 = &v12[(v11 - v12) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v40 = a2[3];
      if (v37 <= (v40 - (uint64_t)v11) >> 3)
      {
        uint64_t v47 = v11 - v39;
        uint64_t v48 = (v11 - v39) >> 3;
        if (v48 >= v37)
        {
          int v49 = (char *)&v36[v37];
          uint64_t v52 = v11;
        }
        else
        {
          int v49 = (char *)&v36[v48];
          int64_t v50 = (char *)v35 - v49;
          if (v35 != (uint64_t *)v49)
          {
            uint64_t v51 = v39;
            memmove(v11, &v36[v48], (char *)v35 - v49);
            char v39 = v51;
          }
          uint64_t v52 = &v11[v50];
          a2[2] = &v11[v50];
          if (v47 < 1) {
            goto LABEL_95;
          }
        }
        uint64_t v53 = &v39[8 * v37];
        int v54 = &v52[-8 * v37];
        uint64_t v55 = v52;
        if (v54 < v11)
        {
          uint64_t v55 = v52;
          do
          {
            uint64_t v56 = *(void *)v54;
            v54 += 8;
            *v55++ = v56;
          }
          while (v54 < v11);
        }
        a2[2] = v55;
        if (v52 != v53)
        {
          uint64_t v57 = v39;
          memmove(&v52[-8 * ((v52 - v53) >> 3)], v39, v52 - v53);
          char v39 = v57;
        }
        if (v49 != (char *)v36) {
          memmove(v39, v36, v49 - (char *)v36);
        }
      }
      else
      {
        uint64_t v41 = v38 >> 3;
        unint64_t v42 = (v38 >> 3) + v37;
        if (v42 >> 61) {
          goto LABEL_116;
        }
        uint64_t v43 = v40 - (void)v12;
        if (v43 >> 2 > v42) {
          unint64_t v42 = v43 >> 2;
        }
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v42;
        }
        if (v44)
        {
          if (v44 >> 61) {
            goto LABEL_117;
          }
          unint64_t v58 = v44;
          uint64_t v45 = (char *)operator new(8 * v44);
          unint64_t v44 = v58;
          char v39 = &v12[(v11 - v12) & 0xFFFFFFFFFFFFFFF8];
        }
        else
        {
          uint64_t v45 = 0;
        }
        int64_t v59 = &v45[8 * v41];
        unint64_t v60 = &v59[8 * v37];
        uint64_t v61 = 8 * v37;
        int v62 = v59;
        do
        {
          uint64_t v63 = *v36++;
          *(void *)int v62 = v63;
          v62 += 8;
          v61 -= 8;
        }
        while (v61);
        if ((unint64_t)v38 >= 8)
        {
          uint64_t v64 = 8 * v41;
          do
          {
            *(void *)&v45[v64 - 8] = *(void *)&v12[v64 - 8];
            v64 -= 8;
          }
          while (v64);
          BOOL v11 = (char *)a2[2];
          int64_t v59 = v45;
        }
        uint64_t v65 = &v45[8 * v44];
        int64_t v66 = v11 - v39;
        if (v11 != v39)
        {
          size_t v67 = v11 - v39;
          unint64_t v68 = v60;
          memmove(v60, v39, v67);
          unint64_t v60 = v68;
        }
        int v69 = (void *)a2[1];
        a2[1] = v59;
        a2[2] = &v60[v66];
        a2[3] = v65;
        if (v69) {
          operator delete(v69);
        }
      }
    }
LABEL_95:
    sub_1CD3CFB98((uint64_t **)(a1 + 24), (unint64_t *)&v84, &v84);
    unsigned int v70 = (uint64_t **)a2[4];
    uint64_t v71 = (uint64_t **)a2[5];
    if (v70 != v71)
    {
      while (*v70 != v84)
      {
        if (++v70 == v71) {
          goto LABEL_100;
        }
      }
      sub_1CC04E254((uint64_t)(a2 + 4), (uint64_t)v84);
    }
LABEL_100:
    int v73 = a3[4];
    BOOL v72 = a3[5];
    while (v73 != v72)
    {
      uint64_t v74 = *(void *)(a1 + 48);
      int v77 = *(void **)(v74 + 40);
      int v75 = (void *)(v74 + 40);
      uint64_t v76 = v77;
      if (!v77) {
        goto LABEL_113;
      }
      unint64_t v78 = *v73;
      uint64_t v79 = v75;
      do
      {
        unint64_t v80 = v76[4];
        BOOL v81 = v80 >= v78;
        if (v80 >= v78) {
          uint64_t v82 = v76;
        }
        else {
          uint64_t v82 = v76 + 1;
        }
        if (v81) {
          uint64_t v79 = v76;
        }
        uint64_t v76 = (void *)*v82;
      }
      while (*v82);
      if (v79 != v75 && v79[4] <= v78) {
        uint64_t v83 = v79[5];
      }
      else {
LABEL_113:
      }
        uint64_t v83 = 0;
      sub_1CC04E510(a1, a2, v83);
      ++v73;
    }
    return;
  }
  while (1)
  {
    unint64_t v8 = v7[4];
    if ((unint64_t)v6 >= v8) {
      break;
    }
LABEL_5:
    unint64_t v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_6;
    }
  }
  if (v8 < (unint64_t)v6)
  {
    ++v7;
    goto LABEL_5;
  }
  for (unsigned int i = (uint64_t **)a2[1]; i != (uint64_t **)a2[2]; ++i)
  {
    if (*i == v6) {
      return;
    }
  }
  unint64_t v14 = (char *)a2[4];
  uint64_t v15 = (char *)a2[5];
  if (v14 == v15)
  {
LABEL_37:
    unint64_t v26 = a2[6];
    if ((unint64_t)v15 >= v26)
    {
      uint64_t v27 = (v15 - v14) >> 3;
      unint64_t v28 = v27 + 1;
      if (!((unint64_t)(v27 + 1) >> 61))
      {
        uint64_t v29 = v26 - (void)v14;
        if (v29 >> 2 > v28) {
          unint64_t v28 = v29 >> 2;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (!v30)
        {
          uint64_t v31 = 0;
          goto LABEL_67;
        }
        if (!(v30 >> 61))
        {
          uint64_t v31 = (char *)operator new(8 * v30);
LABEL_67:
          uint64_t v32 = (uint64_t **)&v31[8 * v27];
          unint64_t v33 = &v31[8 * v30];
          *uint64_t v32 = v6;
          unsigned int v18 = v32 + 1;
          if (v14 == v15)
          {
LABEL_51:
            a2[4] = v32;
            a2[5] = v18;
            a2[6] = v33;
            if (v14) {
              operator delete(v14);
            }
            goto LABEL_53;
          }
          do
          {
            unint64_t v46 = (uint64_t *)*((void *)v15 - 1);
            v15 -= 8;
            *--uint64_t v32 = v46;
          }
          while (v15 != v14);
LABEL_50:
          unint64_t v14 = (char *)a2[4];
          goto LABEL_51;
        }
LABEL_117:
        sub_1CB833614();
      }
LABEL_116:
      abort();
    }
    goto LABEL_19;
  }
  int v25 = (uint64_t **)a2[4];
  while (*v25 != v6)
  {
    if (++v25 == (uint64_t **)v15) {
      goto LABEL_37;
    }
  }
}

void llvm::initializeLazyBranchProbabilityInfoPassPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC5F88, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC04EA78;
    v3[1] = &v1;
    char v2 = v3;
    std::__call_once(&qword_1EBCC5F88, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC04EA78(uint64_t a1)
{
}

uint64_t llvm::LazyBranchProbabilityInfoPass::releaseMemory(llvm::LazyBranchProbabilityInfoPass *this)
{
  uint64_t result = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (result)
  {
    sub_1CBF8AF10(result);
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

void llvm::LazyBranchProbabilityInfoPass::runOnFunction(llvm::LazyBranchProbabilityInfoPass *this, llvm::Function *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v4 = (uint64_t *)*((void *)this + 1);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::LoopInfoWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::LoopInfoWrapperPass::ID);
  unint64_t v8 = (uint64_t *)*((void *)this + 1);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (v9 == v10)
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v9 != &llvm::TargetLibraryInfoWrapperPass::ID)
    {
      v9 += 16;
      if (v9 == v10) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = *(void *)(v9 + 8);
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v11 + 96))(v11, &llvm::TargetLibraryInfoWrapperPass::ID);
  uint64_t v13 = v12 + 32;
  if (!*(unsigned char *)(v12 + 232))
  {
    uint64_t v14 = *((void *)a2 + 5) + 216;
    __int16 v17 = 260;
    v16[0] = v14;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v16);
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    int v29 = 0;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    *(void *)&long long v15 = -1;
    *((void *)&v15 + 1) = -1;
    *(_OWORD *)long long __src = v15;
    long long v21 = v15;
    long long v22 = v15;
    long long v23 = v15;
    long long v24 = v15;
    long long v25 = v15;
    *(_OWORD *)unint64_t v26 = v15;
    *(void *)&v26[13] = -1;
    sub_1CC153974((uint64_t)__src, (int *)__p);
    sub_1CD4D04B8(v13, (uint64_t)__src);
    sub_1CD4CFA4C((uint64_t *)__src);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1CC1569E8(__src, v13);
}

void sub_1CC04EF88(llvm *a1, llvm::PassRegistry *a2)
{
}

uint64_t llvm::LazyBlockFrequencyInfoPass::releaseMemory(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 32);
  *(void *)(this + 32) = 0;
  if (v1)
  {
    uint64_t v2 = this;
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    this = v2;
  }
  *(unsigned char *)(this + 40) = 0;
  *(void *)(this + 56) = 0;
  *(void *)(this + 64) = 0;
  *(void *)(this + 48) = 0;
  return this;
}

uint64_t llvm::LazyBlockFrequencyInfoPass::runOnFunction(llvm::LazyBlockFrequencyInfoPass *this, Function *a2)
{
  int v4 = (uint64_t *)*((void *)this + 1);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_11:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::LazyBranchProbabilityInfoPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_11;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::LazyBranchProbabilityInfoPass::ID);
  uint64_t v9 = (uint64_t *)*((void *)this + 1);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v10 == v11)
  {
LABEL_7:
    uint64_t v12 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v10 != &llvm::LoopInfoWrapperPass::ID)
    {
      v10 += 16;
      if (v10 == v11) {
        goto LABEL_7;
      }
    }
    uint64_t v12 = *(void *)(v10 + 8);
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::LoopInfoWrapperPass::ID);
  *((void *)this + 6) = a2;
  *((void *)this + 7) = v8;
  *((void *)this + 8) = v13 + 32;
  return 0;
}

uint64_t llvm::LazyCallGraph::EdgeSequence::setEdgeKind(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v9 = a2;
  uint64_t v10 = 0;
  uint64_t result = sub_1CB915048((uint64_t *)(a1 + 48), &v9, &v10);
  if (result) {
    uint64_t v6 = v10;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
  }
  uint64_t v7 = *(int *)(v6 + 8);
  uint64_t v8 = 4;
  if (!a3) {
    uint64_t v8 = 0;
  }
  *(void *)(*(void *)a1 + 8 * v7) = *(void *)(*(void *)a1 + 8 * v7) & 0xFFFFFFFFFFFFFFFBLL | v8;
  return result;
}

BOOL llvm::LazyCallGraph::EdgeSequence::removeEdgeInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v8 = 0;
  int v3 = sub_1CB915048((uint64_t *)(a1 + 48), &v7, &v8);
  uint64_t v4 = v8;
  uint64_t v5 = *(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
  if (!v3) {
    uint64_t v4 = *(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
  }
  if (v4 != v5)
  {
    *(void *)(*(void *)a1 + 8 * *(int *)(v4 + 8)) = 0;
    *(void *)uint64_t v4 = -8192;
    *(int32x2_t *)(a1 + 56) = vadd_s32(*(int32x2_t *)(a1 + 56), (int32x2_t)0x1FFFFFFFFLL);
  }
  return v4 != v5;
}

char *llvm::LazyCallGraph::Node::populateSlow(llvm::LazyCallGraph::Node *this)
{
  v130[16] = *MEMORY[0x1E4F143B8];
  long long v125 = 0u;
  uint64_t v127 = 0;
  long long v124 = 0u;
  uint64_t v122 = &v124;
  uint64_t v123 = 0x400000000;
  uint64_t v2 = (char *)this + 24;
  long long v126 = 0uLL;
  if (*((unsigned char *)this + 96))
  {
    sub_1CD49A500((uint64_t)this + 24, (const void **)&v122);
    MEMORY[0x1D25D9CD0](*((void *)this + 9), 8);
    *(_OWORD *)((char *)this + 72) = v126;
    long long v126 = 0uLL;
    *((_DWORD *)this + 22) = v127;
    LODWORD(v127) = 0;
  }
  else
  {
    *((void *)this + 3) = (char *)this + 40;
    *((void *)this + 4) = 0x400000000;
    *((void *)this + 9) = 0;
    *(void *)&long long v126 = 0;
    *((void *)this + 10) = 0;
    *((void *)&v126 + 1) = 0;
    *((_DWORD *)this + 22) = 0;
    LODWORD(v127) = 0;
    *((unsigned char *)this + 96) = 1;
  }
  MEMORY[0x1D25D9CD0](0, 8);
  if (v122 != &v124) {
    free(v122);
  }
  unsigned int v128 = v130;
  uint64_t v129 = 0x1000000000;
  unsigned int v113 = v117;
  char v114 = v117;
  uint64_t v115 = 4;
  int v116 = 0;
  uint64_t v122 = &v125;
  uint64_t v123 = (uint64_t)&v125;
  *(void *)&long long v124 = 16;
  DWORD2(v124) = 0;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = *(void *)(v3 + 80);
  uint64_t v110 = v3 + 72;
  if (v4 != v3 + 72)
  {
    while (1)
    {
      uint64_t v5 = v4 - 24;
      if (!v4) {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(void *)(v5 + 48);
      uint64_t v111 = v4;
      uint64_t v112 = v5 + 40;
      if (v6 != v5 + 40) {
        break;
      }
LABEL_200:
      uint64_t v4 = *(void *)(v111 + 8);
      if (v4 == v110) {
        goto LABEL_201;
      }
    }
    while (1)
    {
      uint64_t v7 = (uint64_t ***)(v6 - 24);
      if (v6) {
        uint64_t v8 = v6 - 24;
      }
      else {
        uint64_t v8 = 0;
      }
      unsigned int v9 = *(unsigned __int8 *)(v8 + 16) - 33;
      BOOL v74 = v9 > 0x33;
      uint64_t v10 = (1 << v9) & 0x8000000000041;
      if (v74 || v10 == 0) {
        goto LABEL_142;
      }
      uint64_t v119 = &v121;
      uint64_t v120 = 0x100000000;
      uint64_t v12 = *(void *)(v6 - 56);
      if (v12)
      {
        if (!*(unsigned char *)(v12 + 16) && *(void *)(v12 + 24) == *(void *)(v6 + 48)) {
          break;
        }
      }
      if ((*(unsigned char *)(v6 - 1) & 0x20) == 0) {
        goto LABEL_34;
      }
      uint64_t v13 = ***v7;
      uint64_t v118 = v6 - 24;
      int v14 = *(_DWORD *)(v13 + 2496);
      if (v14)
      {
        uint64_t v15 = *(void *)(v13 + 2480);
        int v16 = v14 - 1;
        unsigned int v17 = v16 & ((v7 >> 4) ^ (v7 >> 9));
        unsigned int v18 = (uint64_t ****)(v15 + 40 * v17);
        char v19 = *v18;
        if (*v18 == v7) {
          goto LABEL_30;
        }
        unint64_t v20 = 0;
        int v21 = 1;
        while (v19 != (uint64_t ***)-4096)
        {
          if (v20) {
            BOOL v22 = 0;
          }
          else {
            BOOL v22 = v19 == (uint64_t ***)-8192;
          }
          if (v22) {
            unint64_t v20 = v18;
          }
          unsigned int v23 = v17 + v21++;
          unsigned int v17 = v23 & v16;
          unsigned int v18 = (uint64_t ****)(v15 + 40 * v17);
          char v19 = *v18;
          if (*v18 == v7) {
            goto LABEL_30;
          }
        }
        if (v20) {
          unint64_t v90 = v20;
        }
        else {
          unint64_t v90 = v18;
        }
      }
      else
      {
        unint64_t v90 = 0;
      }
      unsigned int v18 = (uint64_t ****)sub_1CC609054(v13 + 2480, (uint64_t)&v118, &v118, v90);
      uint64_t v91 = v118;
      v18[4] = 0;
      v18[3] = 0;
      *unsigned int v18 = (uint64_t ***)v91;
      v18[1] = (uint64_t ***)(v18 + 3);
      void v18[2] = (uint64_t ***)0x100000000;
LABEL_30:
      uint64_t v24 = *((unsigned int *)v18 + 4);
      if (v24)
      {
        long long v25 = v18[1] + 1;
        uint64_t v26 = 16 * v24;
        while (*((_DWORD *)v25 - 2) != 23)
        {
          v25 += 2;
          v26 -= 16;
          if (!v26) {
            goto LABEL_34;
          }
        }
        uint64_t v29 = *v25;
        if (*v25)
        {
          uint64_t v30 = *(unsigned int *)(v29 + 8);
          if (v30)
          {
            uint64_t v31 = -8 * v30;
            do
            {
              uint64_t v32 = *(void *)(v29 + v31);
              if (v32)
              {
                uint64_t v33 = *(void *)(v32 + 128);
                if (v33)
                {
                  if (v120 >= (unint64_t)HIDWORD(v120)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v119 + v120) = v33;
                  LODWORD(v120) = v120 + 1;
                }
              }
              v31 += 8;
            }
            while (v31);
          }
        }
      }
LABEL_34:
      uint64_t v27 = (uint64_t *)v119;
      if (v120)
      {
        uint64_t v28 = (void **)((char *)v119 + 8 * v120);
        goto LABEL_60;
      }
LABEL_140:
      if (v27 != &v121) {
        free(v27);
      }
LABEL_142:
      int v69 = *(_DWORD *)(v8 + 20);
      if ((v69 & 0x40000000) != 0)
      {
        uint64_t v71 = *(uint64_t **)(v8 - 8);
        uint64_t v70 = v69 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v70 = v69 & 0x7FFFFFF;
        uint64_t v71 = (uint64_t *)(v8 - 32 * v70);
      }
      BOOL v72 = &v71[4 * v70];
      if (v70)
      {
        while (1)
        {
          uint64_t v73 = *v71;
          BOOL v74 = !*v71 || *(unsigned __int8 *)(*v71 + 16) > 0x14u;
          if (!v74) {
            break;
          }
LABEL_184:
          v71 += 4;
          if (v71 == v72) {
            goto LABEL_193;
          }
        }
        uint64_t v75 = v123;
        uint64_t v76 = DWORD1(v124);
        if ((void *)v123 == v122)
        {
          if (DWORD1(v124))
          {
            int v77 = 0;
            uint64_t v78 = 8 * DWORD1(v124);
            uint64_t v79 = (void *)v123;
            while (*v79 != v73)
            {
              if (*v79 == -2) {
                int v77 = v79;
              }
              ++v79;
              v78 -= 8;
              if (!v78)
              {
                if (!v77) {
                  goto LABEL_158;
                }
                *int v77 = v73;
                --DWORD2(v124);
                goto LABEL_182;
              }
            }
            goto LABEL_184;
          }
LABEL_158:
          unsigned int v80 = v124;
          if (DWORD1(v124) < v124)
          {
            ++DWORD1(v124);
            *(void *)(v123 + 8 * v76) = v73;
LABEL_182:
            if (v129 >= (unint64_t)HIDWORD(v129)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v128[v129] = v73;
            LODWORD(v129) = v129 + 1;
            goto LABEL_184;
          }
        }
        else
        {
          unsigned int v80 = v124;
        }
        if (3 * v80 <= 4 * (DWORD1(v124) - DWORD2(v124)))
        {
          if (v80 >= 0x40) {
            v80 *= 2;
          }
          else {
            unsigned int v80 = 128;
          }
        }
        else if (v80 - DWORD1(v124) >= v80 >> 3)
        {
LABEL_163:
          unsigned int v81 = v80 - 1;
          unsigned int v82 = (v80 - 1) & ((v73 >> 4) ^ (v73 >> 9));
          uint64_t v83 = (void *)(v75 + 8 * v82);
          uint64_t v84 = *v83;
          if (*v83 != -1)
          {
            int v85 = 0;
            int v86 = 1;
            while (v84 != v73)
            {
              if (v85) {
                BOOL v87 = 0;
              }
              else {
                BOOL v87 = v84 == -2;
              }
              if (v87) {
                int v85 = v83;
              }
              unsigned int v88 = v82 + v86++;
              unsigned int v82 = v88 & v81;
              uint64_t v83 = (void *)(v75 + 8 * (v88 & v81));
              uint64_t v84 = *v83;
              if (*v83 == -1) {
                goto LABEL_175;
              }
            }
            goto LABEL_184;
          }
          int v85 = 0;
LABEL_175:
          if (v85) {
            uint64_t v89 = v85;
          }
          else {
            uint64_t v89 = v83;
          }
          if (*v89 == v73) {
            goto LABEL_184;
          }
          if (*v89 == -2) {
            --DWORD2(v124);
          }
          else {
            ++DWORD1(v124);
          }
          *uint64_t v89 = v73;
          goto LABEL_182;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v122, v80);
        unsigned int v80 = v124;
        uint64_t v75 = v123;
        goto LABEL_163;
      }
LABEL_193:
      uint64_t v6 = *(void *)(v6 + 8);
      if (v6 == v112) {
        goto LABEL_200;
      }
    }
    uint64_t v121 = *(void *)(v6 - 56);
    LODWORD(v120) = 1;
    uint64_t v28 = &v122;
    uint64_t v27 = &v121;
    while (1)
    {
LABEL_60:
      uint64_t v39 = *v27;
      if (*v27) {
        BOOL v40 = *(unsigned char *)(*v27 + 16) == 3;
      }
      else {
        BOOL v40 = 0;
      }
      if (v40)
      {
        if ((*(_DWORD *)(v39 + 20) & 0x7FFFFFF) != 0) {
          goto LABEL_69;
        }
      }
      else if (*(unsigned char *)(*v27 + 16) || *(void *)(v39 + 72) != v39 + 72 || (*(unsigned char *)(v39 + 34) & 0x80) != 0)
      {
LABEL_69:
        uint64_t v36 = v114;
        uint64_t v41 = HIDWORD(v115);
        if (v114 == v113)
        {
          if (HIDWORD(v115))
          {
            unint64_t v42 = 0;
            uint64_t v43 = 8 * HIDWORD(v115);
            unint64_t v44 = (uint64_t *)v114;
            while (*v44 != v39)
            {
              if (*v44 == -2) {
                unint64_t v42 = v44;
              }
              ++v44;
              v43 -= 8;
              if (!v43)
              {
                if (v42)
                {
                  *unint64_t v42 = v39;
                  --v116;
                  goto LABEL_101;
                }
                goto LABEL_77;
              }
            }
            goto LABEL_138;
          }
LABEL_77:
          unsigned int v35 = v115;
          if (HIDWORD(v115) < v115)
          {
            ++HIDWORD(v115);
            *(void *)&v114[8 * v41] = v39;
            goto LABEL_101;
          }
        }
        else
        {
          unsigned int v35 = v115;
        }
        if (3 * v35 <= 4 * (HIDWORD(v115) - v116))
        {
          if (v35 >= 0x40) {
            v35 *= 2;
          }
          else {
            unsigned int v35 = 128;
          }
        }
        else if (v35 - HIDWORD(v115) >= v35 >> 3)
        {
          goto LABEL_82;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v113, v35);
        unsigned int v35 = v115;
        uint64_t v36 = v114;
LABEL_82:
        unsigned int v45 = v35 - 1;
        unsigned int v46 = (v35 - 1) & ((v39 >> 4) ^ (v39 >> 9));
        uint64_t v47 = &v36[8 * v46];
        uint64_t v48 = *(void *)v47;
        if (*(void *)v47 != -1)
        {
          int v49 = 0;
          int v50 = 1;
          while (v48 != v39)
          {
            if (v49) {
              BOOL v51 = 0;
            }
            else {
              BOOL v51 = v48 == -2;
            }
            if (v51) {
              int v49 = (uint64_t *)v47;
            }
            unsigned int v52 = v46 + v50++;
            unsigned int v46 = v52 & v45;
            uint64_t v47 = &v36[8 * (v52 & v45)];
            uint64_t v48 = *(void *)v47;
            if (*(void *)v47 == -1) {
              goto LABEL_94;
            }
          }
          goto LABEL_138;
        }
        int v49 = 0;
LABEL_94:
        if (v49) {
          uint64_t v53 = v49;
        }
        else {
          uint64_t v53 = (uint64_t *)v47;
        }
        if (*v53 == v39) {
          goto LABEL_138;
        }
        if (*v53 == -2) {
          --v116;
        }
        else {
          ++HIDWORD(v115);
        }
        *uint64_t v53 = v39;
LABEL_101:
        uint64_t v38 = v123;
        uint64_t v54 = DWORD1(v124);
        if ((void *)v123 == v122)
        {
          if (DWORD1(v124))
          {
            uint64_t v55 = 0;
            uint64_t v56 = 8 * DWORD1(v124);
            uint64_t v57 = (uint64_t *)v123;
            while (*v57 != v39)
            {
              if (*v57 == -2) {
                uint64_t v55 = v57;
              }
              ++v57;
              v56 -= 8;
              if (!v56)
              {
                if (v55)
                {
                  *uint64_t v55 = v39;
                  --DWORD2(v124);
                  goto LABEL_133;
                }
                goto LABEL_109;
              }
            }
            goto LABEL_133;
          }
LABEL_109:
          unsigned int v37 = v124;
          if (DWORD1(v124) < v124)
          {
            ++DWORD1(v124);
            *(void *)(v123 + 8 * v54) = v39;
LABEL_133:
            uint64_t v67 = *(void *)(v6 - 56);
            BOOL v34 = v67 && !*(unsigned char *)(v67 + 16) && *(void *)(v67 + 24) == *(void *)(v6 + 48);
            unint64_t v68 = sub_1CC04FE44(*(void *)this, v39);
            sub_1CC04FD88((uint64_t)v2, (uint64_t)this + 72, v68, v34);
            goto LABEL_138;
          }
        }
        else
        {
          unsigned int v37 = v124;
        }
        if (3 * v37 <= 4 * (DWORD1(v124) - DWORD2(v124)))
        {
          if (v37 >= 0x40) {
            v37 *= 2;
          }
          else {
            unsigned int v37 = 128;
          }
        }
        else if (v37 - DWORD1(v124) >= v37 >> 3)
        {
LABEL_114:
          unsigned int v58 = v37 - 1;
          unsigned int v59 = (v37 - 1) & ((v39 >> 4) ^ (v39 >> 9));
          unint64_t v60 = (uint64_t *)(v38 + 8 * v59);
          uint64_t v61 = *v60;
          if (*v60 == -1)
          {
            int v62 = 0;
LABEL_126:
            if (v62) {
              int64_t v66 = v62;
            }
            else {
              int64_t v66 = v60;
            }
            if (*v66 != v39)
            {
              if (*v66 == -2) {
                --DWORD2(v124);
              }
              else {
                ++DWORD1(v124);
              }
              *int64_t v66 = v39;
            }
          }
          else
          {
            int v62 = 0;
            int v63 = 1;
            while (v61 != v39)
            {
              if (v62) {
                BOOL v64 = 0;
              }
              else {
                BOOL v64 = v61 == -2;
              }
              if (v64) {
                int v62 = v60;
              }
              unsigned int v65 = v59 + v63++;
              unsigned int v59 = v65 & v58;
              unint64_t v60 = (uint64_t *)(v38 + 8 * (v65 & v58));
              uint64_t v61 = *v60;
              if (*v60 == -1) {
                goto LABEL_126;
              }
            }
          }
          goto LABEL_133;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v122, v37);
        unsigned int v37 = v124;
        uint64_t v38 = v123;
        goto LABEL_114;
      }
LABEL_138:
      if (++v27 == (uint64_t *)v28)
      {
        uint64_t v27 = (uint64_t *)v119;
        goto LABEL_140;
      }
    }
  }
LABEL_201:
  uint64_t v119 = this;
  llvm::LazyCallGraph::visitReferences((uint64_t)&v128, (llvm::SmallPtrSetImplBase *)&v122, (void (*)(uint64_t))sub_1CC05696C, (uint64_t)&v119);
  uint64_t v92 = *(unsigned int *)(*(void *)this + 624);
  if (v92)
  {
    unint64_t v93 = *(uint64_t **)(*(void *)this + 616);
    uint64_t v94 = &v93[v92];
    do
    {
      uint64_t v95 = *v93;
      int v96 = v122;
      if ((void *)v123 == v122)
      {
        unsigned int v97 = DWORD1(v124);
        uint64_t v98 = (char *)(v123 + 8 * DWORD1(v124));
        if (DWORD1(v124))
        {
          uint64_t v99 = 0;
          while (*(void *)(v123 + v99) != v95)
          {
            v99 += 8;
            if (8 * DWORD1(v124) == v99) {
              goto LABEL_222;
            }
          }
          uint64_t v98 = (char *)(v123 + v99);
        }
LABEL_222:
        int v96 = (void *)v123;
      }
      else
      {
        int v100 = v124 - 1;
        unsigned int v101 = (v124 - 1) & ((v95 >> 4) ^ (v95 >> 9));
        uint64_t v98 = (char *)(v123 + 8 * v101);
        uint64_t v102 = *(void *)v98;
        if (*(void *)v98 == -1)
        {
          uint64_t v103 = 0;
LABEL_231:
          if (v103) {
            uint64_t v98 = v103;
          }
          unsigned int v97 = DWORD1(v124);
          if (*(void *)v98 != v95) {
            uint64_t v98 = (char *)(v123 + 8 * v124);
          }
        }
        else
        {
          uint64_t v103 = 0;
          int v104 = 1;
          while (v102 != v95)
          {
            if (v103) {
              BOOL v105 = 0;
            }
            else {
              BOOL v105 = v102 == -2;
            }
            if (v105) {
              uint64_t v103 = v98;
            }
            unsigned int v106 = v101 + v104++;
            unsigned int v101 = v106 & v100;
            uint64_t v98 = (char *)(v123 + 8 * (v106 & v100));
            uint64_t v102 = *(void *)v98;
            if (*(void *)v98 == -1) {
              goto LABEL_231;
            }
          }
          unsigned int v97 = DWORD1(v124);
        }
      }
      if ((void *)v123 == v96) {
        unsigned int v107 = v97;
      }
      else {
        unsigned int v107 = v124;
      }
      if (v98 == (char *)(v123 + 8 * v107))
      {
        unint64_t v108 = sub_1CC04FE44(*(void *)this, v95);
        sub_1CC04FD88((uint64_t)v2, (uint64_t)this + 72, v108, 0);
      }
      ++v93;
    }
    while (v93 != v94);
  }
  if ((void *)v123 != v122) {
    free((void *)v123);
  }
  if (v114 != v113) {
    free(v114);
  }
  if (v128 != v130) {
    free(v128);
  }
  return v2;
}

uint64_t sub_1CC04FD88(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v7 = *(_DWORD *)(a1 + 8);
  uint64_t v12 = a3;
  int v13 = v7;
  uint64_t result = sub_1CC0566DC(a2, &v12, &v13, (uint64_t)v14);
  if (v14[16])
  {
    uint64_t v9 = 4;
    if (!a4) {
      uint64_t v9 = 0;
    }
    uint64_t v10 = v9 | a3;
    uint64_t v11 = *(unsigned int *)(a1 + 8);
    if (v11 >= *(_DWORD *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a1 + 8 * v11) = v10;
    *(_DWORD *)(a1 + 8) = v11 + 1;
  }
  return result;
}

unint64_t sub_1CC04FE44(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = a2;
  uint64_t v4 = sub_1CC05667C((uint64_t *)(a1 + 96), &v11);
  unint64_t v5 = v4[1];
  if (!v5)
  {
    uint64_t v6 = v4;
    *(void *)(a1 + 80) += 104;
    if (((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 104 > *(void *)(a1 + 8) - *(void *)a1)
    {
      unsigned int v8 = *(_DWORD *)(a1 + 24) >> 7;
      if (v8 >= 0x1E) {
        LOBYTE(v8) = 30;
      }
      uint64_t v9 = 4096 << v8;
      unint64_t v5 = (unint64_t)operator new(4096 << v8, (std::align_val_t)8uLL);
      unsigned int v10 = *(_DWORD *)(a1 + 24);
      if (v10 >= *(_DWORD *)(a1 + 28)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 16) + 8 * v10) = v5;
      ++*(_DWORD *)(a1 + 24);
      *(void *)(a1 + 8) = v5 + v9;
    }
    else
    {
      unint64_t v5 = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)a1 = v5 + 104;
    v6[1] = v5;
    *(void *)unint64_t v5 = a1;
    *(void *)(v5 + 8) = a2;
    *(unsigned char *)(v5 + 96) = 0;
    *(void *)(v5 + 16) = 0;
    *(unsigned char *)(v5 + 24) = 0;
  }
  return v5;
}

void llvm::LazyCallGraph::visitReferences(uint64_t a1, llvm::SmallPtrSetImplBase *this, void (*a3)(uint64_t), uint64_t a4)
{
  for (unsigned int i = *(_DWORD *)(a1 + 8); i; unsigned int i = *(_DWORD *)(a1 + 8))
  {
    uint64_t v9 = *(void *)(*(void *)a1 + 8 * i - 8);
    *(_DWORD *)(a1 + 8) = i - 1;
    int v10 = *(unsigned __int8 *)(v9 + 16);
    if (v9) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 0;
    }
    if (v11)
    {
      if (*(void *)(v9 + 72) != v9 + 72 || (*(unsigned char *)(v9 + 34) & 0x80) != 0) {
        a3(a4);
      }
    }
    else if (v10 != 4)
    {
      int v12 = *(_DWORD *)(v9 + 20);
      if ((v12 & 0x40000000) == 0)
      {
        uint64_t v13 = v12 & 0x7FFFFFF;
        int v14 = (uint64_t *)(v9 - 32 * v13);
        if (v13) {
          goto LABEL_16;
        }
        continue;
      }
      int v14 = *(uint64_t **)(v9 - 8);
      uint64_t v13 = v12 & 0x7FFFFFF;
      if (v13)
      {
LABEL_16:
        uint64_t v15 = &v14[4 * v13];
        while (1)
        {
          uint64_t v16 = *v14;
          uint64_t v17 = *((void *)this + 1);
          uint64_t v18 = *((unsigned int *)this + 5);
          if (v17 == *(void *)this)
          {
            if (v18)
            {
              char v19 = 0;
              uint64_t v20 = 8 * v18;
              int v21 = (void *)*((void *)this + 1);
              while (*v21 != v16)
              {
                if (*v21 == -2) {
                  char v19 = v21;
                }
                ++v21;
                v20 -= 8;
                if (!v20)
                {
                  if (!v19) {
                    goto LABEL_25;
                  }
                  *char v19 = v16;
                  --*((_DWORD *)this + 6);
                  goto LABEL_49;
                }
              }
              goto LABEL_51;
            }
LABEL_25:
            unsigned int v22 = *((_DWORD *)this + 4);
            if (v18 < v22)
            {
              *((_DWORD *)this + 5) = v18 + 1;
              *(void *)(v17 + 8 * v18) = v16;
              goto LABEL_49;
            }
          }
          else
          {
            unsigned int v22 = *((_DWORD *)this + 4);
          }
          if (3 * v22 <= 4 * ((int)v18 - *((_DWORD *)this + 6))) {
            break;
          }
          if (v22 - v18 < v22 >> 3) {
            goto LABEL_58;
          }
LABEL_30:
          unsigned int v23 = v22 - 1;
          unsigned int v24 = (v22 - 1) & ((v16 >> 4) ^ (v16 >> 9));
          long long v25 = (void *)(v17 + 8 * v24);
          uint64_t v26 = *v25;
          if (*v25 != -1)
          {
            uint64_t v27 = 0;
            int v28 = 1;
            while (v26 != v16)
            {
              if (v27) {
                BOOL v29 = 0;
              }
              else {
                BOOL v29 = v26 == -2;
              }
              if (v29) {
                uint64_t v27 = v25;
              }
              unsigned int v30 = v24 + v28++;
              unsigned int v24 = v30 & v23;
              long long v25 = (void *)(v17 + 8 * (v30 & v23));
              uint64_t v26 = *v25;
              if (*v25 == -1) {
                goto LABEL_42;
              }
            }
            goto LABEL_51;
          }
          uint64_t v27 = 0;
LABEL_42:
          if (v27) {
            uint64_t v31 = v27;
          }
          else {
            uint64_t v31 = v25;
          }
          if (*v31 == v16) {
            goto LABEL_51;
          }
          if (*v31 == -2) {
            --*((_DWORD *)this + 6);
          }
          else {
            ++*((_DWORD *)this + 5);
          }
          *uint64_t v31 = v16;
LABEL_49:
          unint64_t v32 = *(unsigned int *)(a1 + 8);
          if (v32 >= *(unsigned int *)(a1 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a1 + 8 * v32) = v16;
          ++*(_DWORD *)(a1 + 8);
LABEL_51:
          v14 += 4;
          if (v14 == v15) {
            goto LABEL_13;
          }
        }
        if (v22 >= 0x40) {
          v22 *= 2;
        }
        else {
          unsigned int v22 = 128;
        }
LABEL_58:
        llvm::SmallPtrSetImplBase::Grow(this, v22);
        unsigned int v22 = *((_DWORD *)this + 4);
        uint64_t v17 = *((void *)this + 1);
        goto LABEL_30;
      }
    }
LABEL_13:
    ;
  }
}

uint64_t llvm::LazyCallGraph::Node::replaceFunction(uint64_t this, Function *a2)
{
  *(void *)(this + 8) = a2;
  return this;
}

llvm::raw_ostream *sub_1CC0501EC(llvm::raw_ostream *this, uint64_t a2)
{
  uint64_t v3 = *(uint64_t ****)(a2 + 8);
  if ((*((unsigned char *)v3 + 23) & 0x10) == 0) {
    return this;
  }
  uint64_t v4 = ***v3;
  uint64_t v5 = *(void *)(v4 + 152);
  uint64_t v6 = *(unsigned int *)(v4 + 168);
  if (v6)
  {
    LODWORD(v7) = (v6 - 1) & ((v3 >> 4) ^ (v3 >> 9));
    unsigned int v8 = (uint64_t ****)(v5 + 16 * v7);
    uint64_t v9 = *v8;
    if (*v8 == v3) {
      goto LABEL_8;
    }
    int v10 = 1;
    while (v9 != (uint64_t ***)-4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v6 - 1);
      uint64_t v9 = *(uint64_t ****)(v5 + 16 * v7);
      if (v9 == v3)
      {
        unsigned int v8 = (uint64_t ****)(v5 + 16 * v7);
        goto LABEL_8;
      }
    }
  }
  unsigned int v8 = (uint64_t ****)(v5 + 16 * v6);
LABEL_8:
  int v12 = (size_t *)v8[1];
  size_t v15 = *v12;
  uint64_t v13 = v12 + 2;
  size_t v14 = v15;
  uint64_t v16 = (void *)*((void *)this + 4);
  if (v15 <= *((void *)this + 3) - (void)v16)
  {
    if (v14)
    {
      size_t v18 = v14;
      memcpy(v16, v13, v14);
      *((void *)this + 4) += v18;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, (const char *)v13, v14);
  }
  return this;
}

uint64_t llvm::LazyCallGraph::LazyCallGraph(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t, uint64_t ***), uint64_t a4)
{
  v61[16] = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 16) = a1 + 32;
  *(void *)(a1 + 24) = 0x400000000;
  *(void *)(a1 + 64) = a1 + 80;
  *(void *)(a1 + 120) = a1 + 136;
  uint64_t v5 = a1 + 120;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(void *)(a1 + 128) = 0x400000000;
  *(_OWORD *)(a1 + 168) = 0u;
  uint64_t v6 = a1 + 168;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = a1 + 224;
  *(void *)(a1 + 216) = 0x400000000;
  *(void *)(a1 + 256) = a1 + 272;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(void *)(a1 + 328) = a1 + 344;
  *(void *)(a1 + 336) = 0x400000000;
  *(void *)(a1 + 376) = a1 + 392;
  *(_OWORD *)(a1 + 384) = 0u;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = a1 + 424;
  *(void *)(a1 + 416) = 0x1000000000;
  *(_DWORD *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(void *)(a1 + 576) = 1;
  int64x2_t v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 584) = v7;
  *(int64x2_t *)(a1 + ++*(_DWORD *)(result + 600) = v7;
  *(void *)(a1 + 616) = a1 + 632;
  *(void *)(a1 + 624) = 0x400000000;
  unsigned int v8 = a2 + 3;
  uint64_t v9 = (void *)a2[4];
  if (v9 != a2 + 3)
  {
    do
    {
      if (v9) {
        int v12 = (uint64_t ***)(v9 - 7);
      }
      else {
        int v12 = 0;
      }
      if (v9 && *((unsigned char *)v12 + 16) == 3)
      {
        if ((*((_DWORD *)v12 + 5) & 0x7FFFFFF) != 0) {
          goto LABEL_12;
        }
      }
      else if (*((unsigned char *)v12 + 16) || v12[9] != (uint64_t **)(v12 + 9) || (*((unsigned char *)v12 + 34) & 0x80) != 0)
      {
LABEL_12:
        uint64_t v13 = (uint64_t *)a3(a4, v12);
        LODWORD(v54) = 0;
        if (llvm::TargetLibraryInfoImpl::getLibFunc(*v13, v12, &v54)) {
          goto LABEL_23;
        }
        if ((*((unsigned char *)v12 + 23) & 0x10) != 0)
        {
          uint64_t v14 = ***v12;
          uint64_t v15 = *(void *)(v14 + 152);
          uint64_t v16 = *(unsigned int *)(v14 + 168);
          if (!v16) {
            goto LABEL_20;
          }
          LODWORD(v17) = (v16 - 1) & ((v12 >> 4) ^ (v12 >> 9));
          size_t v18 = (uint64_t ****)(v15 + 16 * v17);
          char v19 = *v18;
          if (*v18 != v12)
          {
            int v20 = 1;
            while (v19 != (uint64_t ***)-4096)
            {
              int v21 = v17 + v20++;
              uint64_t v17 = v21 & (v16 - 1);
              char v19 = *(uint64_t ****)(v15 + 16 * v17);
              if (v19 == v12)
              {
                size_t v18 = (uint64_t ****)(v15 + 16 * v17);
                goto LABEL_21;
              }
            }
LABEL_20:
            size_t v18 = (uint64_t ****)(v15 + 16 * v16);
          }
LABEL_21:
          unsigned int v22 = v18[1];
          size_t v25 = (size_t)*v22;
          unsigned int v23 = (char *)(v22 + 2);
          size_t v24 = v25;
        }
        else
        {
          size_t v24 = 0;
          unsigned int v23 = &byte_1CFBCE98E;
        }
        if (llvm::TargetLibraryInfoImpl::isFunctionVectorizable(*v13, v23, v24))
        {
LABEL_23:
          uint64_t v54 = (char *)v12;
          sub_1CC00FA08(a1 + 576, (uint64_t *)&v54);
        }
        if ((v12[4] & 0xFu) - 7 >= 2)
        {
          unint64_t v26 = sub_1CC04FE44(a1, (uint64_t)v12);
          sub_1CC04FD88(v5, v6, v26, 0);
        }
      }
      uint64_t v9 = (void *)v9[1];
    }
    while (v9 != v8);
  }
  for (unsigned int i = (void *)a2[6]; i != a2 + 5; unsigned int i = (void *)i[1])
  {
    int v28 = i - 6;
    if (!i) {
      int v28 = 0;
    }
    if ((v28[4] & 0xFu) - 7 >= 2)
    {
      uint64_t v29 = *(v28 - 4);
      if (v29) {
        BOOL v30 = *(unsigned char *)(v29 + 16) == 0;
      }
      else {
        BOOL v30 = 0;
      }
      if (v30)
      {
        unint64_t v31 = sub_1CC04FE44(a1, v29);
        sub_1CC04FD88(v5, v6, v31, 0);
      }
    }
  }
  unsigned int v59 = v61;
  uint64_t v60 = 0x1000000000;
  uint64_t v54 = v58;
  uint64_t v55 = v58;
  uint64_t v56 = 16;
  int v57 = 0;
  for (uint64_t j = (void *)a2[2]; j != a2 + 1; uint64_t j = (void *)j[1])
  {
    if (j) {
      uint64_t v33 = j - 7;
    }
    else {
      uint64_t v33 = 0;
    }
    if (j && *((unsigned char *)v33 + 16) == 3)
    {
      if ((*((_DWORD *)v33 + 5) & 0x7FFFFFF) != 0) {
        goto LABEL_52;
      }
    }
    else if (*((unsigned char *)v33 + 16) || (void *)v33[9] != v33 + 9 || (*((unsigned char *)v33 + 34) & 0x80) != 0)
    {
LABEL_52:
      uint64_t v34 = *(v33 - 4);
      unsigned int v35 = v55;
      uint64_t v36 = HIDWORD(v56);
      if (v55 == v54)
      {
        if (HIDWORD(v56))
        {
          unsigned int v37 = 0;
          uint64_t v38 = 8 * HIDWORD(v56);
          uint64_t v39 = v55;
          while (*(void *)v39 != v34)
          {
            if (*(void *)v39 == -2) {
              unsigned int v37 = v39;
            }
            v39 += 8;
            v38 -= 8;
            if (!v38)
            {
              if (!v37) {
                goto LABEL_60;
              }
              *(void *)unsigned int v37 = v34;
              --v57;
              goto LABEL_84;
            }
          }
          continue;
        }
LABEL_60:
        unsigned int v40 = v56;
        if (HIDWORD(v56) < v56)
        {
          ++HIDWORD(v56);
          *(void *)&v55[8 * v36] = v34;
LABEL_84:
          uint64_t v50 = *(v33 - 4);
          if (v60 >= (unint64_t)HIDWORD(v60)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v59 + v60) = v50;
          LODWORD(v60) = v60 + 1;
          continue;
        }
      }
      else
      {
        unsigned int v40 = v56;
      }
      if (3 * v40 <= 4 * (HIDWORD(v56) - v57))
      {
        if (v40 >= 0x40) {
          v40 *= 2;
        }
        else {
          unsigned int v40 = 128;
        }
      }
      else if (v40 - HIDWORD(v56) >= v40 >> 3)
      {
LABEL_65:
        unsigned int v41 = v40 - 1;
        unsigned int v42 = (v40 - 1) & ((v34 >> 4) ^ (v34 >> 9));
        uint64_t v43 = &v35[8 * v42];
        uint64_t v44 = *(void *)v43;
        if (*(void *)v43 != -1)
        {
          unsigned int v45 = 0;
          int v46 = 1;
          while (v44 != v34)
          {
            if (v45) {
              BOOL v47 = 0;
            }
            else {
              BOOL v47 = v44 == -2;
            }
            if (v47) {
              unsigned int v45 = v43;
            }
            unsigned int v48 = v42 + v46++;
            unsigned int v42 = v48 & v41;
            uint64_t v43 = &v35[8 * (v48 & v41)];
            uint64_t v44 = *(void *)v43;
            if (*(void *)v43 == -1) {
              goto LABEL_77;
            }
          }
          continue;
        }
        unsigned int v45 = 0;
LABEL_77:
        if (v45) {
          int v49 = v45;
        }
        else {
          int v49 = v43;
        }
        if (*(void *)v49 == v34) {
          continue;
        }
        if (*(void *)v49 == -2) {
          --v57;
        }
        else {
          ++HIDWORD(v56);
        }
        *(void *)int v49 = v34;
        goto LABEL_84;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v54, v40);
      unsigned int v40 = v56;
      unsigned int v35 = v55;
      goto LABEL_65;
    }
  }
  uint64_t v53 = a1;
  llvm::LazyCallGraph::visitReferences((uint64_t)&v59, (llvm::SmallPtrSetImplBase *)&v54, (void (*)(uint64_t))sub_1CC0569B8, (uint64_t)&v53);
  if (v55 != v54) {
    free(v55);
  }
  if (v59 != v61) {
    free(v59);
  }
  return a1;
}

uint64_t llvm::LazyCallGraph::updateGraphPtrs(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 96);
  uint64_t v2 = *(unsigned int *)(this + 112);
  uint64_t v3 = v1 + 16 * v2;
  if (*(_DWORD *)(this + 104))
  {
    if (v2)
    {
      uint64_t v4 = 16 * v2;
      uint64_t v5 = *(void *)(this + 96);
      while (*(void *)v5 == -4096 || *(void *)v5 == -8192)
      {
        v5 += 16;
        v4 -= 16;
        if (!v4) {
          goto LABEL_17;
        }
      }
    }
    else
    {
      uint64_t v5 = *(void *)(this + 96);
    }
  }
  else
  {
LABEL_17:
    uint64_t v5 = v1 + 16 * v2;
  }
  uint64_t v6 = v1 + 16 * v2;
LABEL_9:
  while (v5 != v6)
  {
    **(void **)(v5 + 8) = this;
    uint64_t v7 = v5 + 16;
    uint64_t v5 = v3;
    if (v7 != v3)
    {
      uint64_t v5 = v7;
      while ((*(void *)v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v5 += 16;
        if (v5 == v3)
        {
          uint64_t v5 = v3;
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v8 = *(unsigned int *)(this + 416);
  if (v8)
  {
    uint64_t v9 = *(void ***)(this + 408);
    uint64_t v10 = 8 * v8;
    do
    {
      int v11 = *v9++;
      void *v11 = this;
      v10 -= 8;
    }
    while (v10);
  }
  return this;
}

uint64_t llvm::LazyCallGraph::operator=(uint64_t a1, uint64_t a2)
{
  sub_1CD49A7EC(a1, a2);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 96), 8);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  int v4 = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = v4;
  int v5 = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = v5;
  sub_1CD49A500(a1 + 120, (const void **)(a2 + 120));
  sub_1CD46A1B4(a1 + 168, a2 + 168);
  sub_1CD49A7EC(a1 + 192, a2 + 192);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 288), 8);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a2 + 288) = 0;
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(_DWORD *)(a2 + 296) = 0;
  int v6 = *(_DWORD *)(a1 + 300);
  *(_DWORD *)(a1 + 300) = *(_DWORD *)(a2 + 300);
  *(_DWORD *)(a2 + 300) = v6;
  int v7 = *(_DWORD *)(a1 + 304);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a2 + 304) = v7;
  sub_1CC012764(a1 + 576, (unsigned int *)(a2 + 576));
  sub_1CC00811C(a1 + 616, a2 + 616);
  llvm::LazyCallGraph::updateGraphPtrs(a1);
  return a1;
}

llvm::raw_ostream *sub_1CC050A50(llvm::raw_ostream *this, uint64_t a2)
{
  int v4 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v4 >= *((void *)this + 3))
  {
    llvm::raw_ostream::write(this, 40);
  }
  else
  {
    *((void *)this + 4) = v4 + 1;
    *int v4 = 40;
  }
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v8 = 8 * v5;
    while (1)
    {
      uint64_t v9 = *(void *)(v7 + 8 * v6);
      if (v6)
      {
        uint64_t v10 = (_WORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v10 > 1uLL)
        {
          *uint64_t v10 = 8236;
          *((void *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, ", ", 2uLL);
        }
        if (v6 >= 9) {
          break;
        }
      }
      sub_1CC0501EC(this, v9);
      ++v6;
      v8 -= 8;
      if (!v8) {
        goto LABEL_16;
      }
    }
    uint64_t v11 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v11) > 4)
    {
      *(unsigned char *)(v11 + 4) = 32;
      *(_DWORD *)uint64_t v11 = 741223982;
      *((void *)this + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(this, "..., ", 5uLL);
    }
    sub_1CC0501EC(this, *(void *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a2 + 16) - 8));
  }
LABEL_16:
  int v12 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v12 >= *((void *)this + 3))
  {
    llvm::raw_ostream::write(this, 41);
  }
  else
  {
    *((void *)this + 4) = v12 + 1;
    unsigned char *v12 = 41;
  }
  return this;
}

uint64_t llvm::LazyCallGraph::SCC::isParentOf(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 0;
  }
  v17[7] = v2;
  v17[8] = v3;
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = v7 + 8 * v5;
  while (1)
  {
    uint64_t v9 = *(unsigned int *)(*(void *)v7 + 32);
    if (v9)
    {
      uint64_t v10 = 8 * v9;
      uint64_t v11 = *(uint64_t **)(*(void *)v7 + 24);
      while ((*v11 & 0xFFFFFFFFFFFFFFF8) == 0 || (*v11 & 4) == 0 || !*(void *)(*v11 & 0xFFFFFFFFFFFFFFF8))
      {
        ++v11;
        v10 -= 8;
        if (!v10) {
          goto LABEL_21;
        }
      }
    }
    else
    {
      uint64_t v11 = *(uint64_t **)(*(void *)v7 + 24);
    }
    uint64_t v12 = *(void *)(*(void *)v7 + 24) + 8 * v9;
    if (v11 == (uint64_t *)v12) {
      goto LABEL_21;
    }
    uint64_t v13 = *v11;
LABEL_14:
    uint64_t v14 = (uint64_t *)(**(void **)a1 + 288);
    uint64_t v16 = 0;
    v17[0] = v13 & 0xFFFFFFFFFFFFFFF8;
    if ((sub_1CBFA3AF4(v14, v17, &v16) & 1) != 0 && *(void *)(v16 + 8) == a2) {
      return 1;
    }
    while (++v11 != (uint64_t *)v12)
    {
      uint64_t v13 = *v11;
      if ((*v11 & 0xFFFFFFFFFFFFFFF8) != 0 && (v13 & 4) != 0 && *(void *)(*v11 & 0xFFFFFFFFFFFFFFF8))
      {
        if (v11 != (uint64_t *)v12) {
          goto LABEL_14;
        }
        break;
      }
    }
LABEL_21:
    v7 += 8;
    if (v7 == v8) {
      return 0;
    }
  }
}

uint64_t llvm::LazyCallGraph::SCC::isAncestorOf(uint64_t **a1, uint64_t **a2)
{
  v43[16] = *MEMORY[0x1E4F143B8];
  if (a1 == a2) {
    return 0;
  }
  uint64_t v3 = **a1;
  uint64_t v33 = (char *)v37;
  uint64_t v34 = (char *)v37;
  int v36 = 0;
  uint64_t v35 = 0x100000010;
  v37[0] = a1;
  unsigned int v40 = v43;
  unsigned int v42 = 16;
  v43[0] = a1;
  int v4 = (uint64_t *)(v3 + 288);
  unsigned int v5 = 1;
  while (1)
  {
    uint64_t v6 = *((void *)v40 + --v5);
    unsigned int v41 = v5;
    uint64_t v7 = *(unsigned int *)(v6 + 16);
    if (v7) {
      break;
    }
LABEL_67:
    if (!v5)
    {
      uint64_t v31 = 0;
      goto LABEL_70;
    }
  }
  uint64_t v8 = *(void *)(v6 + 8);
  uint64_t v9 = v8 + 8 * v7;
  while (1)
  {
    uint64_t v10 = *(unsigned int *)(*(void *)v8 + 32);
    if (v10)
    {
      uint64_t v11 = 8 * v10;
      uint64_t v12 = *(uint64_t **)(*(void *)v8 + 24);
      while ((*v12 & 0xFFFFFFFFFFFFFFF8) == 0 || (*v12 & 4) == 0 || !*(void *)(*v12 & 0xFFFFFFFFFFFFFFF8))
      {
        ++v12;
        v11 -= 8;
        if (!v11) {
          goto LABEL_65;
        }
      }
    }
    else
    {
      uint64_t v12 = *(uint64_t **)(*(void *)v8 + 24);
    }
    uint64_t v13 = *(void *)(*(void *)v8 + 24) + 8 * v10;
    if (v12 != (uint64_t *)v13) {
      break;
    }
LABEL_65:
    v8 += 8;
    if (v8 == v9)
    {
      unsigned int v5 = v41;
      goto LABEL_67;
    }
  }
  uint64_t v14 = *v12;
  while (1)
  {
    uint64_t v38 = 0;
    unint64_t v39 = v14 & 0xFFFFFFFFFFFFFFF8;
    if ((sub_1CBFA3AF4(v4, &v39, &v38) & 1) == 0) {
      goto LABEL_52;
    }
    uint64_t v15 = *(uint64_t ***)(v38 + 8);
    if (!v15) {
      goto LABEL_52;
    }
    if (v15 == a2) {
      break;
    }
    uint64_t v16 = v34;
    uint64_t v17 = HIDWORD(v35);
    if (v34 == v33)
    {
      if (HIDWORD(v35))
      {
        size_t v18 = 0;
        uint64_t v19 = 8 * HIDWORD(v35);
        int v20 = v34;
        do
        {
          if (*(uint64_t ***)v20 == v15) {
            goto LABEL_52;
          }
          if (*(void *)v20 == -2) {
            size_t v18 = v20;
          }
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
        if (v18)
        {
          *(void *)size_t v18 = v15;
          --v36;
          goto LABEL_50;
        }
      }
      unsigned int v21 = v35;
      if (HIDWORD(v35) < v35)
      {
        ++HIDWORD(v35);
        *(void *)&v34[8 * v17] = v15;
LABEL_50:
        if (v41 >= (unint64_t)v42) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v40 + v41++) = v15;
        goto LABEL_52;
      }
    }
    else
    {
      unsigned int v21 = v35;
    }
    if (3 * v21 <= 4 * (HIDWORD(v35) - v36))
    {
      if (v21 >= 0x40) {
        v21 *= 2;
      }
      else {
        unsigned int v21 = 128;
      }
    }
    else if (v21 - HIDWORD(v35) >= v21 >> 3)
    {
      goto LABEL_31;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v33, v21);
    unsigned int v21 = v35;
    uint64_t v16 = v34;
LABEL_31:
    unsigned int v22 = v21 - 1;
    unsigned int v23 = (v21 - 1) & ((v15 >> 4) ^ (v15 >> 9));
    size_t v24 = &v16[8 * v23];
    size_t v25 = *(uint64_t ***)v24;
    if (*(void *)v24 == -1)
    {
      unint64_t v26 = 0;
    }
    else
    {
      unint64_t v26 = 0;
      int v27 = 1;
      do
      {
        if (v25 == v15) {
          goto LABEL_52;
        }
        if (v26) {
          BOOL v28 = 0;
        }
        else {
          BOOL v28 = v25 == (uint64_t **)-2;
        }
        if (v28) {
          unint64_t v26 = v24;
        }
        unsigned int v29 = v23 + v27++;
        unsigned int v23 = v29 & v22;
        size_t v24 = &v16[8 * (v29 & v22)];
        size_t v25 = *(uint64_t ***)v24;
      }
      while (*(void *)v24 != -1);
    }
    if (v26) {
      BOOL v30 = v26;
    }
    else {
      BOOL v30 = v24;
    }
    if (*(uint64_t ***)v30 != v15)
    {
      if (*(void *)v30 == -2) {
        --v36;
      }
      else {
        ++HIDWORD(v35);
      }
      *(void *)BOOL v30 = v15;
      goto LABEL_50;
    }
    do
    {
LABEL_52:
      if (++v12 == (uint64_t *)v13) {
        goto LABEL_65;
      }
      uint64_t v14 = *v12;
    }
    while ((*v12 & 0xFFFFFFFFFFFFFFF8) == 0 || (v14 & 4) == 0 || !*(void *)(*v12 & 0xFFFFFFFFFFFFFFF8));
    if (v12 == (uint64_t *)v13) {
      goto LABEL_65;
    }
  }
  uint64_t v31 = 1;
LABEL_70:
  if (v40 != v43) {
    free(v40);
  }
  if (v34 != v33) {
    free(v34);
  }
  return v31;
}

void *llvm::LazyCallGraph::RefSCC::RefSCC(void *this, llvm::LazyCallGraph *a2)
{
  *this = a2;
  this[1] = this + 3;
  this[2] = 0x400000000;
  this[7] = 1;
  for (uint64_t i = 8; i != 16; i += 2)
    this[i] = -4096;
  return this;
}

{
  uint64_t i;

  *this = a2;
  this[1] = this + 3;
  this[2] = 0x400000000;
  this[7] = 1;
  for (uint64_t i = 8; i != 16; i += 2)
    this[i] = -4096;
  return this;
}

llvm::raw_ostream *sub_1CC0510EC(llvm::raw_ostream *this, uint64_t a2)
{
  int v4 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v4 >= *((void *)this + 3))
  {
    llvm::raw_ostream::write(this, 91);
  }
  else
  {
    *((void *)this + 4) = v4 + 1;
    *int v4 = 91;
  }
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v8 = 8 * v5;
    while (1)
    {
      uint64_t v9 = *(void *)(v7 + 8 * v6);
      if (v6)
      {
        uint64_t v10 = (_WORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v10 > 1uLL)
        {
          *uint64_t v10 = 8236;
          *((void *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, ", ", 2uLL);
        }
        if (v6 >= 5) {
          break;
        }
      }
      sub_1CC050A50(this, v9);
      ++v6;
      v8 -= 8;
      if (!v8) {
        goto LABEL_16;
      }
    }
    uint64_t v11 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v11) > 4)
    {
      *(unsigned char *)(v11 + 4) = 32;
      *(_DWORD *)uint64_t v11 = 741223982;
      *((void *)this + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(this, "..., ", 5uLL);
    }
    sub_1CC050A50(this, *(void *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a2 + 16) - 8));
  }
LABEL_16:
  uint64_t v12 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v12 >= *((void *)this + 3))
  {
    llvm::raw_ostream::write(this, 93);
  }
  else
  {
    *((void *)this + 4) = v12 + 1;
    unsigned char *v12 = 93;
  }
  return this;
}

uint64_t llvm::LazyCallGraph::RefSCC::isParentOf(llvm::LazyCallGraph::RefSCC *this, const llvm::LazyCallGraph::RefSCC *a2)
{
  if (a2 == this) {
    return 0;
  }
  v21[9] = v2;
  v21[10] = v3;
  uint64_t v5 = *((unsigned int *)this + 4);
  if (!v5) {
    return 0;
  }
  uint64_t v7 = *((void *)this + 1);
  uint64_t v8 = v7 + 8 * v5;
  while (1)
  {
    uint64_t v9 = *(unsigned int *)(*(void *)v7 + 16);
    if (v9) {
      break;
    }
LABEL_23:
    v7 += 8;
    if (v7 == v8) {
      return 0;
    }
  }
  uint64_t v10 = *(void *)(*(void *)v7 + 8);
  uint64_t v11 = v10 + 8 * v9;
  while (1)
  {
    uint64_t v12 = *(unsigned int *)(*(void *)v10 + 32);
    if (v12)
    {
      uint64_t v13 = 8 * v12;
      uint64_t v14 = *(uint64_t **)(*(void *)v10 + 24);
      while ((*v14 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(void *)(*v14 & 0xFFFFFFFFFFFFFFF8))
      {
        ++v14;
        v13 -= 8;
        if (!v13) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      uint64_t v14 = *(uint64_t **)(*(void *)v10 + 24);
    }
    uint64_t v15 = *(void *)(*(void *)v10 + 24) + 8 * v12;
    if (v14 == (uint64_t *)v15) {
      goto LABEL_22;
    }
    uint64_t v16 = *v14;
LABEL_15:
    uint64_t v17 = (uint64_t *)(*(void *)this + 288);
    uint64_t v20 = 0;
    v21[0] = v16 & 0xFFFFFFFFFFFFFFF8;
    if (sub_1CBFA3AF4(v17, v21, &v20))
    {
      size_t v18 = *(const llvm::LazyCallGraph::RefSCC ***)(v20 + 8);
      if (v18)
      {
        if (*v18 == a2) {
          return 1;
        }
      }
    }
    while (++v14 != (uint64_t *)v15)
    {
      uint64_t v16 = *v14;
      if ((*v14 & 0xFFFFFFFFFFFFFFF8) != 0 && *(void *)(*v14 & 0xFFFFFFFFFFFFFFF8))
      {
        if (v14 != (uint64_t *)v15) {
          goto LABEL_15;
        }
        break;
      }
    }
LABEL_22:
    v10 += 8;
    if (v10 == v11) {
      goto LABEL_23;
    }
  }
}

uint64_t llvm::LazyCallGraph::RefSCC::isAncestorOf(llvm::LazyCallGraph::RefSCC *this, const llvm::LazyCallGraph::RefSCC *a2)
{
  v47[4] = *MEMORY[0x1E4F143B8];
  if (a2 == this) {
    return 0;
  }
  uint64_t v44 = v47;
  unsigned int v46 = 4;
  unsigned int v37 = (char *)v41;
  uint64_t v38 = (char *)v41;
  int v40 = 0;
  v47[0] = this;
  uint64_t v39 = 0x100000004;
  v41[0] = this;
  unsigned int v4 = 1;
  while (1)
  {
    uint64_t v5 = *((void *)v44 + --v4);
    unsigned int v45 = v4;
    uint64_t v6 = *(unsigned int *)(v5 + 16);
    if (v6) {
      break;
    }
LABEL_69:
    if (!v4)
    {
      uint64_t v35 = 0;
      goto LABEL_72;
    }
  }
  uint64_t v7 = *(void *)(v5 + 8);
  uint64_t v8 = v7 + 8 * v6;
  while (1)
  {
    uint64_t v9 = *(unsigned int *)(*(void *)v7 + 16);
    if (v9) {
      break;
    }
LABEL_67:
    v7 += 8;
    if (v7 == v8)
    {
      unsigned int v4 = v45;
      goto LABEL_69;
    }
  }
  uint64_t v10 = *(void *)(*(void *)v7 + 8);
  uint64_t v11 = v10 + 8 * v9;
  while (1)
  {
    uint64_t v12 = *(unsigned int *)(*(void *)v10 + 32);
    if (v12)
    {
      uint64_t v13 = 8 * v12;
      uint64_t v14 = *(uint64_t **)(*(void *)v10 + 24);
      while ((*v14 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(void *)(*v14 & 0xFFFFFFFFFFFFFFF8))
      {
        ++v14;
        v13 -= 8;
        if (!v13) {
          goto LABEL_66;
        }
      }
    }
    else
    {
      uint64_t v14 = *(uint64_t **)(*(void *)v10 + 24);
    }
    uint64_t v15 = *(void *)(*(void *)v10 + 24) + 8 * v12;
    if (v14 != (uint64_t *)v15) {
      break;
    }
LABEL_66:
    v10 += 8;
    if (v10 == v11) {
      goto LABEL_67;
    }
  }
  uint64_t v16 = *v14;
  while (1)
  {
    uint64_t v17 = (uint64_t *)(*(void *)this + 288);
    uint64_t v42 = 0;
    unint64_t v43 = v16 & 0xFFFFFFFFFFFFFFF8;
    if ((sub_1CBFA3AF4(v17, &v43, &v42) & 1) == 0) {
      goto LABEL_54;
    }
    size_t v18 = *(const llvm::LazyCallGraph::RefSCC ***)(v42 + 8);
    if (!v18) {
      goto LABEL_54;
    }
    uint64_t v19 = *v18;
    if (*v18 == a2) {
      break;
    }
    if (!v19) {
      goto LABEL_54;
    }
    uint64_t v20 = v38;
    uint64_t v21 = HIDWORD(v39);
    if (v38 == v37)
    {
      if (HIDWORD(v39))
      {
        unsigned int v22 = 0;
        uint64_t v23 = 8 * HIDWORD(v39);
        size_t v24 = (const llvm::LazyCallGraph::RefSCC **)v38;
        do
        {
          if (*v24 == v19) {
            goto LABEL_54;
          }
          if (*v24 == (const llvm::LazyCallGraph::RefSCC *)-2) {
            unsigned int v22 = v24;
          }
          ++v24;
          v23 -= 8;
        }
        while (v23);
        if (v22)
        {
          char *v22 = v19;
          --v40;
          goto LABEL_52;
        }
      }
      unsigned int v25 = v39;
      if (HIDWORD(v39) < v39)
      {
        ++HIDWORD(v39);
        *(void *)&v38[8 * v21] = v19;
LABEL_52:
        if (v45 >= (unint64_t)v46) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v44 + v45++) = v19;
        goto LABEL_54;
      }
    }
    else
    {
      unsigned int v25 = v39;
    }
    if (3 * v25 <= 4 * (HIDWORD(v39) - v40))
    {
      if (v25 >= 0x40) {
        v25 *= 2;
      }
      else {
        unsigned int v25 = 128;
      }
    }
    else if (v25 - HIDWORD(v39) >= v25 >> 3)
    {
      goto LABEL_33;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v37, v25);
    unsigned int v25 = v39;
    uint64_t v20 = v38;
LABEL_33:
    unsigned int v26 = v25 - 1;
    unsigned int v27 = (v25 - 1) & ((v19 >> 4) ^ (v19 >> 9));
    BOOL v28 = &v20[8 * v27];
    unsigned int v29 = *(const llvm::LazyCallGraph::RefSCC **)v28;
    if (*(void *)v28 == -1)
    {
      BOOL v30 = 0;
    }
    else
    {
      BOOL v30 = 0;
      int v31 = 1;
      do
      {
        if (v29 == v19) {
          goto LABEL_54;
        }
        if (v30) {
          BOOL v32 = 0;
        }
        else {
          BOOL v32 = v29 == (const llvm::LazyCallGraph::RefSCC *)-2;
        }
        if (v32) {
          BOOL v30 = (const llvm::LazyCallGraph::RefSCC **)v28;
        }
        unsigned int v33 = v27 + v31++;
        unsigned int v27 = v33 & v26;
        BOOL v28 = &v20[8 * (v33 & v26)];
        unsigned int v29 = *(const llvm::LazyCallGraph::RefSCC **)v28;
      }
      while (*(void *)v28 != -1);
    }
    if (v30) {
      uint64_t v34 = v30;
    }
    else {
      uint64_t v34 = (const llvm::LazyCallGraph::RefSCC **)v28;
    }
    if (*v34 != v19)
    {
      if (*v34 == (const llvm::LazyCallGraph::RefSCC *)-2) {
        --v40;
      }
      else {
        ++HIDWORD(v39);
      }
      *uint64_t v34 = v19;
      goto LABEL_52;
    }
    do
    {
LABEL_54:
      if (++v14 == (uint64_t *)v15) {
        goto LABEL_66;
      }
      uint64_t v16 = *v14;
    }
    while ((*v14 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(void *)(*v14 & 0xFFFFFFFFFFFFFFF8));
    if (v14 == (uint64_t *)v15) {
      goto LABEL_66;
    }
  }
  uint64_t v35 = 1;
LABEL_72:
  if (v38 != v37) {
    free(v38);
  }
  if (v44 != v47) {
    free(v44);
  }
  return v35;
}

uint64_t llvm::LazyCallGraph::RefSCC::switchInternalEdgeToCall(uint64_t a1, uint64_t a2, unsigned int *a3, void (*a4)(uint64_t, void **, int64_t), uint64_t a5)
{
  v243[4] = *MEMORY[0x1E4F143B8];
  int v237 = &v239;
  uint64_t v238 = 0x100000000;
  uint64_t v10 = (uint64_t *)(*(void *)a1 + 288);
  unsigned int v230 = (unsigned int *)a2;
  uint64_t v240 = 0;
  uint64_t v11 = 0;
  if (sub_1CBFA3AF4(v10, &v230, &v240)) {
    uint64_t v11 = (unsigned int *)v240[1];
  }
  uint64_t v12 = (uint64_t *)(*(void *)a1 + 288);
  unsigned int v230 = a3;
  uint64_t v240 = 0;
  uint64_t v13 = 0;
  if (sub_1CBFA3AF4(v12, &v230, &v240)) {
    uint64_t v13 = (unsigned int *)v240[1];
  }
  if (v11 == v13) {
    goto LABEL_6;
  }
  uint64_t v226 = a5;
  uint64_t v227 = a4;
  unsigned int v230 = v11;
  uint64_t v18 = *((int *)sub_1CD49A8AC((_DWORD *)(a1 + 56), (uint64_t *)&v230) + 2);
  unsigned int v230 = v13;
  uint64_t v19 = *((int *)sub_1CD49A8AC((_DWORD *)(a1 + 56), (uint64_t *)&v230) + 2);
  if ((int)v19 < (int)v18) {
    goto LABEL_6;
  }
  unsigned int v230 = v11;
  int v219 = *((_DWORD *)sub_1CD49A8AC((_DWORD *)(a1 + 56), (uint64_t *)&v230) + 2);
  unsigned int v230 = v13;
  uint64_t v223 = (_DWORD *)(a1 + 56);
  uint64_t v20 = *((int *)sub_1CD49A8AC((_DWORD *)(a1 + 56), (uint64_t *)&v230) + 2);
  unsigned int v230 = (unsigned int *)v234;
  uint64_t v231 = (unsigned int *)v234;
  int v233 = 0;
  uint64_t v232 = 0x100000004;
  v234[0] = v11;
  uint64_t v21 = *(void *)(a1 + 8);
  uint64_t v221 = v20;
  int v222 = v18;
  if (v18 != v19)
  {
    uint64_t v224 = (void *)(v21 + 8 * v19);
    unsigned int v22 = (void *)(v21 + 8 * v18);
    while (1)
    {
      uint64_t v23 = v22[1];
      long long __src = v22 + 1;
      uint64_t v24 = *(unsigned int *)(v23 + 16);
      if (!v24) {
        goto LABEL_97;
      }
      uint64_t v25 = *(void *)(v23 + 8);
      uint64_t v26 = v25 + 8 * v24;
      while (1)
      {
        uint64_t v27 = *(unsigned int *)(*(void *)v25 + 32);
        if (v27)
        {
          uint64_t v28 = 8 * v27;
          unsigned int v29 = *(uint64_t **)(*(void *)v25 + 24);
          while ((*v29 & 0xFFFFFFFFFFFFFFF8) == 0 || (*v29 & 4) == 0 || !*(void *)(*v29 & 0xFFFFFFFFFFFFFFF8))
          {
            ++v29;
            v28 -= 8;
            if (!v28) {
              goto LABEL_64;
            }
          }
        }
        else
        {
          unsigned int v29 = *(uint64_t **)(*(void *)v25 + 24);
        }
        uint64_t v30 = *(void *)(*(void *)v25 + 24) + 8 * v27;
        if (v29 == (uint64_t *)v30) {
          goto LABEL_64;
        }
        uint64_t v31 = *v29;
LABEL_26:
        BOOL v32 = (uint64_t *)(*(void *)a1 + 288);
        uint64_t v240 = (void **)(v31 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v236 = 0;
        int v33 = sub_1CBFA3AF4(v32, &v240, &v236);
        uint64_t v34 = 0;
        if (v33) {
          uint64_t v34 = *(void *)(v236 + 8);
        }
        int v36 = v230;
        uint64_t v35 = (char *)v231;
        if (v231 == v230)
        {
          unsigned int v37 = HIDWORD(v232);
          uint64_t v38 = (char *)&v231[2 * HIDWORD(v232)];
          if (HIDWORD(v232))
          {
            uint64_t v39 = 0;
            while (*(void *)&v231[v39] != v34)
            {
              v39 += 2;
              if (2 * HIDWORD(v232) == v39) {
                goto LABEL_47;
              }
            }
            uint64_t v38 = (char *)&v231[v39];
          }
LABEL_47:
          int v36 = v231;
        }
        else
        {
          int v40 = v232 - 1;
          unsigned int v41 = (v232 - 1) & ((v34 >> 4) ^ (v34 >> 9));
          uint64_t v38 = (char *)&v231[2 * v41];
          uint64_t v42 = *(void *)v38;
          if (*(void *)v38 == -1)
          {
            unint64_t v43 = 0;
LABEL_59:
            if (v43) {
              uint64_t v38 = v43;
            }
            unsigned int v37 = HIDWORD(v232);
            if (*(void *)v38 != v34) {
              uint64_t v38 = (char *)&v231[2 * v232];
            }
          }
          else
          {
            unint64_t v43 = 0;
            int v44 = 1;
            while (v42 != v34)
            {
              if (v43) {
                BOOL v45 = 0;
              }
              else {
                BOOL v45 = v42 == -2;
              }
              if (v45) {
                unint64_t v43 = v38;
              }
              unsigned int v46 = v41 + v44++;
              unsigned int v41 = v46 & v40;
              uint64_t v38 = (char *)&v231[2 * (v46 & v40)];
              uint64_t v42 = *(void *)v38;
              if (*(void *)v38 == -1) {
                goto LABEL_59;
              }
            }
            unsigned int v37 = HIDWORD(v232);
          }
        }
        unsigned int v47 = v232;
        int v48 = v231 == v36 ? v37 : v232;
        if (v38 != (char *)&v231[2 * v48]) {
          break;
        }
        while (++v29 != (uint64_t *)v30)
        {
          uint64_t v31 = *v29;
          if ((*v29 & 0xFFFFFFFFFFFFFFF8) != 0 && (v31 & 4) != 0 && *(void *)(*v29 & 0xFFFFFFFFFFFFFFF8))
          {
            if (v29 != (uint64_t *)v30) {
              goto LABEL_26;
            }
            break;
          }
        }
LABEL_64:
        v25 += 8;
        if (v25 == v26) {
          goto LABEL_97;
        }
      }
      if (v231 != v36) {
        goto LABEL_76;
      }
      if (!v37)
      {
LABEL_74:
        if (v232 > v37)
        {
          HIDWORD(v232) = v37 + 1;
          *(void *)&v231[2 * v37] = v23;
          goto LABEL_97;
        }
LABEL_76:
        if (3 * (int)v232 <= 4 * (v37 - v233))
        {
          if (v232 >= 0x40) {
            unsigned int v47 = 2 * v232;
          }
          else {
            unsigned int v47 = 128;
          }
        }
        else if (v232 - v37 >= v232 >> 3)
        {
          goto LABEL_78;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v230, v47);
        unsigned int v47 = v232;
        uint64_t v35 = (char *)v231;
LABEL_78:
        unsigned int v52 = v47 - 1;
        unsigned int v53 = (v47 - 1) & ((v23 >> 4) ^ (v23 >> 9));
        uint64_t v54 = &v35[8 * v53];
        uint64_t v55 = *(void *)v54;
        if (*(void *)v54 == -1)
        {
          uint64_t v56 = 0;
LABEL_90:
          if (v56) {
            uint64_t v60 = v56;
          }
          else {
            uint64_t v60 = v54;
          }
          if (*(void *)v60 != v23)
          {
            if (*(void *)v60 == -2) {
              --v233;
            }
            else {
              ++HIDWORD(v232);
            }
            *(void *)uint64_t v60 = v23;
          }
        }
        else
        {
          uint64_t v56 = 0;
          int v57 = 1;
          while (v55 != v23)
          {
            if (v56) {
              BOOL v58 = 0;
            }
            else {
              BOOL v58 = v55 == -2;
            }
            if (v58) {
              uint64_t v56 = v54;
            }
            unsigned int v59 = v53 + v57++;
            unsigned int v53 = v59 & v52;
            uint64_t v54 = &v35[8 * (v59 & v52)];
            uint64_t v55 = *(void *)v54;
            if (*(void *)v54 == -1) {
              goto LABEL_90;
            }
          }
        }
        goto LABEL_97;
      }
      int v49 = 0;
      uint64_t v50 = 8 * v37;
      BOOL v51 = v231;
      while (*(void *)v51 != v23)
      {
        if (*(void *)v51 == -2) {
          int v49 = v51;
        }
        v51 += 2;
        v50 -= 8;
        if (!v50)
        {
          if (!v49) {
            goto LABEL_74;
          }
          *(void *)int v49 = v23;
          --v233;
          break;
        }
      }
LABEL_97:
      unsigned int v22 = __src;
      if (__src == v224)
      {
        uint64_t v21 = *(void *)(a1 + 8);
        uint64_t v20 = v221;
        break;
      }
    }
  }
  uint64_t v61 = (int8x16_t *)(v21 + 8 * v219);
  uint64_t v62 = v21 + 8 * v20;
  int v63 = (unint64_t *)(v62 + 8);
  uint64_t v240 = (void **)&v230;
  if (v61 != (int8x16_t *)(v62 + 8))
  {
    int v64 = v232 - 1;
    uint64_t v65 = 8 * HIDWORD(v232);
    while (1)
    {
      uint64_t v66 = v61->i64[0];
      if (v231 == v230)
      {
        uint64_t v67 = v231;
        unint64_t v68 = (char *)&v231[2 * HIDWORD(v232)];
        if (HIDWORD(v232))
        {
          unint64_t v69 = 0;
          while (*(void *)&v231[v69 / 4] != v66)
          {
            v69 += 8;
            if (v65 == v69)
            {
              uint64_t v67 = v231;
              unint64_t v68 = (char *)&v231[2 * HIDWORD(v232)];
              goto LABEL_133;
            }
          }
          unint64_t v68 = (char *)&v231[v69 / 4];
          uint64_t v67 = v231;
        }
      }
      else
      {
        unsigned int v70 = v64 & ((v66 >> 4) ^ (v66 >> 9));
        unint64_t v68 = (char *)&v231[2 * v70];
        uint64_t v71 = *(void *)v68;
        if (*(void *)v68 == -1)
        {
          BOOL v72 = 0;
LABEL_127:
          if (v72) {
            unint64_t v68 = v72;
          }
          uint64_t v76 = *(void *)v68;
        }
        else
        {
          BOOL v72 = 0;
          int v73 = 1;
          while (v71 != v66)
          {
            if (v72) {
              BOOL v74 = 0;
            }
            else {
              BOOL v74 = v71 == -2;
            }
            if (v74) {
              BOOL v72 = v68;
            }
            unsigned int v75 = v70 + v73++;
            unsigned int v70 = v75 & v64;
            unint64_t v68 = (char *)&v231[2 * (v75 & v64)];
            uint64_t v71 = *(void *)v68;
            if (*(void *)v68 == -1) {
              goto LABEL_127;
            }
          }
          uint64_t v76 = v61->i64[0];
        }
        if (v76 != v66) {
          unint64_t v68 = (char *)&v231[2 * v232];
        }
        uint64_t v67 = v230;
      }
LABEL_133:
      int v77 = v231 == v67 ? HIDWORD(v232) : v232;
      if (v68 != (char *)&v231[2 * v77]) {
        break;
      }
      uint64_t v78 = &v61->i64[1];
      BOOL v45 = v61 == (int8x16_t *)v62;
      uint64_t v61 = (int8x16_t *)((char *)v61 + 8);
      if (v45) {
        goto LABEL_179;
      }
    }
    while (v61 != (int8x16_t *)--v63)
    {
      unint64_t v79 = *v63;
      if (v231 == v230)
      {
        unsigned int v80 = v231;
        unsigned int v81 = (char *)&v231[2 * HIDWORD(v232)];
        if (HIDWORD(v232))
        {
          unint64_t v82 = 0;
          while (*(void *)&v231[v82 / 4] != v79)
          {
            v82 += 8;
            if (v65 == v82)
            {
              unsigned int v80 = v231;
              unsigned int v81 = (char *)&v231[2 * HIDWORD(v232)];
              goto LABEL_167;
            }
          }
          unsigned int v81 = (char *)&v231[v82 / 4];
          unsigned int v80 = v231;
        }
      }
      else
      {
        unsigned int v83 = v64 & ((v79 >> 4) ^ (v79 >> 9));
        unsigned int v81 = (char *)&v231[2 * v83];
        uint64_t v84 = *(void *)v81;
        if (*(void *)v81 == -1)
        {
          int v85 = 0;
LABEL_161:
          if (v85) {
            unsigned int v81 = v85;
          }
          unint64_t v89 = *(void *)v81;
        }
        else
        {
          int v85 = 0;
          int v86 = 1;
          while (v84 != v79)
          {
            if (v85) {
              BOOL v87 = 0;
            }
            else {
              BOOL v87 = v84 == -2;
            }
            if (v87) {
              int v85 = v81;
            }
            unsigned int v88 = v83 + v86++;
            unsigned int v83 = v88 & v64;
            unsigned int v81 = (char *)&v231[2 * (v88 & v64)];
            uint64_t v84 = *(void *)v81;
            if (*(void *)v81 == -1) {
              goto LABEL_161;
            }
          }
          unint64_t v89 = *v63;
        }
        if (v89 != v79) {
          unsigned int v81 = (char *)&v231[2 * v232];
        }
        unsigned int v80 = v230;
      }
LABEL_167:
      if (v231 == v80) {
        int v90 = HIDWORD(v232);
      }
      else {
        int v90 = v232;
      }
      if (v81 == (char *)&v231[2 * v90])
      {
        if ((char *)v63 - (char *)v61 < 17)
        {
LABEL_177:
          uint64_t v94 = 0;
          unint64_t v91 = 0;
        }
        else
        {
          if ((((char *)v63 - (char *)v61) >> 3) + 1 >= 0xFFFFFFFFFFFFFFFLL) {
            unint64_t v91 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v91 = (((char *)v63 - (char *)v61) >> 3) + 1;
          }
          while (1)
          {
            uint64_t v92 = (uint64_t *)operator new(8 * v91, MEMORY[0x1E4FBA2D0]);
            if (v92) {
              break;
            }
            BOOL v93 = v91 > 1;
            v91 >>= 1;
            if (!v93) {
              goto LABEL_177;
            }
          }
          uint64_t v94 = v92;
        }
        uint64_t v121 = v94;
        uint64_t v78 = sub_1CC056BFC(v61, v63, (uint64_t **)&v240, (((char *)v63 - (char *)v61) >> 3) + 1, v94, v91);
        if (v121) {
          operator delete(v121);
        }
        goto LABEL_179;
      }
    }
  }
  uint64_t v78 = (uint64_t *)v61;
LABEL_179:
  int v95 = v219;
  if (v219 <= (int)v221)
  {
    uint64_t v96 = 8 * v219;
    do
    {
      *(_DWORD *)(sub_1CD49AB60((uint64_t)v223, *(void *)(*(void *)(a1 + 8) + v96)) + 8) = v95++;
      v96 += 8;
    }
    while (v221 + 1 != v95);
  }
  uint64_t v98 = v230;
  unsigned int v97 = v231;
  if (v231 == v230)
  {
    int v99 = HIDWORD(v232);
    int v100 = (char *)&v231[2 * HIDWORD(v232)];
    if (HIDWORD(v232))
    {
      uint64_t v101 = 0;
      while (*(unsigned int **)&v231[v101] != v13)
      {
        v101 += 2;
        if (2 * HIDWORD(v232) == v101) {
          goto LABEL_201;
        }
      }
      int v100 = (char *)&v231[v101];
    }
LABEL_201:
    uint64_t v98 = v231;
  }
  else
  {
    int v102 = v232 - 1;
    unsigned int v103 = (v232 - 1) & ((v13 >> 4) ^ (v13 >> 9));
    int v100 = (char *)&v231[2 * v103];
    int v104 = *(unsigned int **)v100;
    if (*(void *)v100 == -1)
    {
      BOOL v105 = 0;
LABEL_214:
      if (v105) {
        int v100 = v105;
      }
      int v99 = HIDWORD(v232);
      if (*(unsigned int **)v100 != v13) {
        int v100 = (char *)&v231[2 * v232];
      }
    }
    else
    {
      BOOL v105 = 0;
      int v106 = 1;
      while (v104 != v13)
      {
        if (v105) {
          BOOL v107 = 0;
        }
        else {
          BOOL v107 = v104 == (unsigned int *)-2;
        }
        if (v107) {
          BOOL v105 = v100;
        }
        unsigned int v108 = v103 + v106++;
        unsigned int v103 = v108 & v102;
        int v100 = (char *)&v231[2 * (v108 & v102)];
        int v104 = *(unsigned int **)v100;
        if (*(void *)v100 == -1) {
          goto LABEL_214;
        }
      }
      int v99 = HIDWORD(v232);
    }
  }
  if (v231 == v98) {
    int v109 = v99;
  }
  else {
    int v109 = v232;
  }
  if (v100 == (char *)&v231[2 * v109])
  {
    unsigned int v117 = (void **)(v78 - 1);
    uint64_t v118 = v78 - 1;
    goto LABEL_405;
  }
  uint64_t v110 = *(void *)(a1 + 8);
  if ((int)((((unint64_t)v78 - v110) >> 3) + 1) >= (int)v221)
  {
    uint64_t v119 = (int)(((uint64_t)v78 - v110) >> 3);
    uint64_t v120 = v221;
    goto LABEL_404;
  }
  unint64_t v220 = ((unint64_t)v78 - v110) >> 3;
  uint64_t v225 = (uint64_t)v78 - v110;
  uint64_t v111 = a1 + 56;
  if (v231 == v98)
  {
LABEL_208:
    unsigned int v112 = 0;
    unsigned int v113 = 0;
    HIDWORD(v232) = 0;
    int v233 = 0;
    char v114 = (char *)v231;
    uint64_t v115 = (unsigned int **)v231;
    if (v231 == v230) {
      goto LABEL_209;
    }
LABEL_235:
    unsigned int v116 = v232;
    unsigned int v113 = v112;
LABEL_236:
    if (3 * v116 <= 4 * (v113 - v233))
    {
      if (v116 >= 0x40) {
        v116 *= 2;
      }
      else {
        unsigned int v116 = 128;
      }
    }
    else if (v116 - v113 >= v116 >> 3)
    {
      goto LABEL_238;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v230, v116);
    unsigned int v116 = v232;
    char v114 = (char *)v231;
LABEL_238:
    unsigned int v125 = v116 - 1;
    unsigned int v126 = (v116 - 1) & ((v13 >> 4) ^ (v13 >> 9));
    uint64_t v127 = &v114[8 * v126];
    unsigned int v128 = *(unsigned int **)v127;
    if (*(void *)v127 == -1)
    {
      uint64_t v129 = 0;
LABEL_250:
      if (v129) {
        unint64_t v133 = v129;
      }
      else {
        unint64_t v133 = (unsigned int **)v127;
      }
      if (*v133 != v13)
      {
        if (*v133 == (unsigned int *)-2) {
          --v233;
        }
        else {
          ++HIDWORD(v232);
        }
        *unint64_t v133 = v13;
      }
    }
    else
    {
      uint64_t v129 = 0;
      int v130 = 1;
      while (v128 != v13)
      {
        if (v129) {
          BOOL v131 = 0;
        }
        else {
          BOOL v131 = v128 == (unsigned int *)-2;
        }
        if (v131) {
          uint64_t v129 = (unsigned int **)v127;
        }
        unsigned int v132 = v126 + v130++;
        unsigned int v126 = v132 & v125;
        uint64_t v127 = &v114[8 * (v132 & v125)];
        unsigned int v128 = *(unsigned int **)v127;
        if (*(void *)v127 == -1) {
          goto LABEL_250;
        }
      }
    }
    goto LABEL_257;
  }
  if (v232 < 0x21 || 4 * (v99 - v233) >= v232)
  {
    memset(v231, 255, 8 * v232);
    goto LABEL_208;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v230);
  unsigned int v113 = HIDWORD(v232);
  char v114 = (char *)v231;
  if (v231 != v230)
  {
    unsigned int v112 = HIDWORD(v232);
    uint64_t v111 = a1 + 56;
    goto LABEL_235;
  }
  uint64_t v115 = (unsigned int **)&v231[2 * HIDWORD(v232)];
  if (HIDWORD(v232))
  {
    uint64_t v122 = 0;
    uint64_t v123 = 0;
    uint64_t v111 = a1 + 56;
    while (1)
    {
      long long v124 = *(unsigned int **)&v231[v122];
      if (v124 == v13) {
        goto LABEL_257;
      }
      if (v124 == (unsigned int *)-2) {
        uint64_t v123 = (unsigned int **)&v231[v122];
      }
      v122 += 2;
      if (2 * HIDWORD(v232) == v122)
      {
        uint64_t v111 = a1 + 56;
        if (!v123) {
          goto LABEL_209;
        }
        *uint64_t v123 = v13;
        --v233;
        goto LABEL_257;
      }
    }
  }
  uint64_t v111 = a1 + 56;
LABEL_209:
  unsigned int v116 = v232;
  if (v113 >= v232) {
    goto LABEL_236;
  }
  HIDWORD(v232) = v113 + 1;
  *uint64_t v115 = v13;
LABEL_257:
  uint64_t v240 = (void **)v243;
  unsigned int v242 = 4;
  v243[0] = v13;
  unsigned int v134 = 1;
  do
  {
    uint64_t v135 = (uint64_t)v240[--v134];
    unsigned int v241 = v134;
    uint64_t v136 = *(unsigned int *)(v135 + 16);
    if (!v136) {
      continue;
    }
    uint64_t v137 = *(void *)(v135 + 8);
    uint64_t v138 = v137 + 8 * v136;
    do
    {
      uint64_t v139 = *(unsigned int *)(*(void *)v137 + 32);
      if (v139)
      {
        uint64_t v140 = 8 * v139;
        uint64_t v141 = *(uint64_t **)(*(void *)v137 + 24);
        while ((*v141 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(void *)(*v141 & 0xFFFFFFFFFFFFFFF8))
        {
          ++v141;
          v140 -= 8;
          if (!v140) {
            goto LABEL_320;
          }
        }
      }
      else
      {
        uint64_t v141 = *(uint64_t **)(*(void *)v137 + 24);
      }
      uint64_t v142 = *(void *)(*(void *)v137 + 24) + 8 * v139;
      if (v141 != (uint64_t *)v142)
      {
        uint64_t v143 = *v141;
        do
        {
          if ((v143 & 4) == 0) {
            goto LABEL_273;
          }
          unsigned int v144 = (uint64_t *)(*(void *)a1 + 288);
          uint64_t v235 = 0;
          unint64_t v236 = v143 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v145 = 0;
          if (sub_1CBFA3AF4(v144, &v236, &v235)) {
            uint64_t v145 = *(void **)(v235 + 8);
          }
          if (*v145 != a1 || *(_DWORD *)(sub_1CD49AB60((uint64_t)v223, (uint64_t)v145) + 8) <= v222) {
            goto LABEL_273;
          }
          unsigned __int8 v146 = (char *)v231;
          uint64_t v147 = HIDWORD(v232);
          if (v231 == v230)
          {
            if (HIDWORD(v232))
            {
              int v148 = 0;
              uint64_t v149 = 8 * HIDWORD(v232);
              uint64_t v150 = v231;
              do
              {
                if (*(void **)v150 == v145) {
                  goto LABEL_273;
                }
                if (*(void *)v150 == -2) {
                  int v148 = v150;
                }
                v150 += 2;
                v149 -= 8;
              }
              while (v149);
              if (v148)
              {
                *(void *)int v148 = v145;
                --v233;
                goto LABEL_311;
              }
            }
            unsigned int v151 = v232;
            if (HIDWORD(v232) < v232)
            {
              ++HIDWORD(v232);
              *(void *)&v231[2 * v147] = v145;
LABEL_311:
              if (v241 >= (unint64_t)v242) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v240[v241++] = v145;
              goto LABEL_273;
            }
          }
          else
          {
            unsigned int v151 = v232;
          }
          if (3 * v151 <= 4 * (HIDWORD(v232) - v233))
          {
            if (v151 >= 0x40) {
              v151 *= 2;
            }
            else {
              unsigned int v151 = 128;
            }
          }
          else if (v151 - HIDWORD(v232) >= v151 >> 3)
          {
            goto LABEL_292;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v230, v151);
          unsigned int v151 = v232;
          unsigned __int8 v146 = (char *)v231;
LABEL_292:
          unsigned int v152 = v151 - 1;
          unsigned int v153 = (v151 - 1) & ((v145 >> 4) ^ (v145 >> 9));
          unsigned int v154 = &v146[8 * v153];
          BOOL v155 = *(void **)v154;
          if (*(void *)v154 == -1)
          {
            uint64_t v156 = 0;
          }
          else
          {
            uint64_t v156 = 0;
            int v157 = 1;
            do
            {
              if (v155 == v145) {
                goto LABEL_273;
              }
              if (v156) {
                BOOL v158 = 0;
              }
              else {
                BOOL v158 = v155 == (void *)-2;
              }
              if (v158) {
                uint64_t v156 = v154;
              }
              unsigned int v159 = v153 + v157++;
              unsigned int v153 = v159 & v152;
              unsigned int v154 = &v146[8 * (v159 & v152)];
              BOOL v155 = *(void **)v154;
            }
            while (*(void *)v154 != -1);
          }
          if (v156) {
            unsigned int v160 = v156;
          }
          else {
            unsigned int v160 = v154;
          }
          if (*(void **)v160 != v145)
          {
            if (*(void *)v160 == -2) {
              --v233;
            }
            else {
              ++HIDWORD(v232);
            }
            *(void *)unsigned int v160 = v145;
            goto LABEL_311;
          }
          do
          {
LABEL_273:
            if (++v141 == (uint64_t *)v142) {
              goto LABEL_320;
            }
            uint64_t v143 = *v141;
          }
          while ((*v141 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(void *)(*v141 & 0xFFFFFFFFFFFFFFF8));
        }
        while (v141 != (uint64_t *)v142);
      }
LABEL_320:
      v137 += 8;
    }
    while (v137 != v138);
    unsigned int v134 = v241;
    uint64_t v111 = a1 + 56;
  }
  while (v134);
  if (v240 != v243) {
    free(v240);
  }
  uint64_t v161 = *(void *)(a1 + 8);
  int v162 = (int8x16_t *)(v161 + 8 * (int)v220);
  int64_t v163 = (uint64_t *)(v161 + 8 * v221);
  unint64_t v164 = (unint64_t *)(v163 + 1);
  uint64_t v240 = (void **)&v230;
  int v165 = v232 - 1;
  uint64_t v166 = 8 * HIDWORD(v232);
  while (1)
  {
    unsigned int v167 = (uint64_t *)v162;
    int v162 = (int8x16_t *)((char *)v162 + 8);
    if (v167 == v163) {
      break;
    }
    uint64_t v168 = v162->i64[0];
    if (v231 == v230)
    {
      unsigned int v169 = v231;
      uint64_t v170 = (char *)&v231[2 * HIDWORD(v232)];
      if (HIDWORD(v232))
      {
        unint64_t v171 = 0;
        while (*(void *)&v231[v171 / 4] != v168)
        {
          v171 += 8;
          if (v166 == v171)
          {
            unsigned int v169 = v231;
            uint64_t v170 = (char *)&v231[2 * HIDWORD(v232)];
            goto LABEL_353;
          }
        }
        uint64_t v170 = (char *)&v231[v171 / 4];
        unsigned int v169 = v231;
      }
    }
    else
    {
      unsigned int v172 = v165 & ((v168 >> 4) ^ (v168 >> 9));
      uint64_t v170 = (char *)&v231[2 * v172];
      uint64_t v173 = *(void *)v170;
      if (*(void *)v170 == -1)
      {
        uint64_t v174 = 0;
LABEL_347:
        if (v174) {
          uint64_t v170 = v174;
        }
        uint64_t v178 = *(void *)v170;
      }
      else
      {
        uint64_t v174 = 0;
        int v175 = 1;
        while (v173 != v168)
        {
          if (v174) {
            BOOL v176 = 0;
          }
          else {
            BOOL v176 = v173 == -2;
          }
          if (v176) {
            uint64_t v174 = v170;
          }
          unsigned int v177 = v172 + v175++;
          unsigned int v172 = v177 & v165;
          uint64_t v170 = (char *)&v231[2 * (v177 & v165)];
          uint64_t v173 = *(void *)v170;
          if (*(void *)v170 == -1) {
            goto LABEL_347;
          }
        }
        uint64_t v178 = v162->i64[0];
      }
      if (v178 != v168) {
        uint64_t v170 = (char *)&v231[2 * v232];
      }
      unsigned int v169 = v230;
    }
LABEL_353:
    if (v231 == v169) {
      int v179 = HIDWORD(v232);
    }
    else {
      int v179 = v232;
    }
    if (v170 == (char *)&v231[2 * v179])
    {
      while (1)
      {
        if (v162 == (int8x16_t *)--v164) {
          goto LABEL_401;
        }
        unint64_t v180 = *v164;
        if (v231 == v230)
        {
          BOOL v181 = v231;
          unsigned int v182 = (char *)&v231[2 * HIDWORD(v232)];
          if (HIDWORD(v232))
          {
            unint64_t v183 = 0;
            while (*(void *)&v231[v183 / 4] != v180)
            {
              v183 += 8;
              if (v166 == v183)
              {
                BOOL v181 = v231;
                unsigned int v182 = (char *)&v231[2 * HIDWORD(v232)];
                goto LABEL_384;
              }
            }
            unsigned int v182 = (char *)&v231[v183 / 4];
            BOOL v181 = v231;
          }
        }
        else
        {
          unsigned int v184 = v165 & ((v180 >> 4) ^ (v180 >> 9));
          unsigned int v182 = (char *)&v231[2 * v184];
          uint64_t v185 = *(void *)v182;
          if (*(void *)v182 == -1)
          {
            unsigned int v186 = 0;
LABEL_378:
            if (v186) {
              unsigned int v182 = v186;
            }
            unint64_t v190 = *(void *)v182;
          }
          else
          {
            unsigned int v186 = 0;
            int v187 = 1;
            while (v185 != v180)
            {
              if (v186) {
                BOOL v188 = 0;
              }
              else {
                BOOL v188 = v185 == -2;
              }
              if (v188) {
                unsigned int v186 = v182;
              }
              unsigned int v189 = v184 + v187++;
              unsigned int v184 = v189 & v165;
              unsigned int v182 = (char *)&v231[2 * (v189 & v165)];
              uint64_t v185 = *(void *)v182;
              if (*(void *)v182 == -1) {
                goto LABEL_378;
              }
            }
            unint64_t v190 = *v164;
          }
          if (v190 != v180) {
            unsigned int v182 = (char *)&v231[2 * v232];
          }
          BOOL v181 = v230;
        }
LABEL_384:
        if (v231 == v181) {
          int v191 = HIDWORD(v232);
        }
        else {
          int v191 = v232;
        }
        if (v182 != (char *)&v231[2 * v191])
        {
          uint64_t v192 = (((char *)v164 - (char *)v162) >> 3) + 1;
          if ((char *)v164 - (char *)v162 < 17)
          {
            BOOL v195 = 0;
            unint64_t v193 = 0;
          }
          else
          {
            if (v192 >= 0xFFFFFFFFFFFFFFFLL) {
              unint64_t v193 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v193 = (((char *)v164 - (char *)v162) >> 3) + 1;
            }
            while (1)
            {
              unsigned int v194 = (uint64_t *)operator new(8 * v193, MEMORY[0x1E4FBA2D0]);
              if (v194) {
                break;
              }
              BOOL v93 = v193 > 1;
              v193 >>= 1;
              if (!v93)
              {
                BOOL v195 = 0;
                unint64_t v193 = 0;
                goto LABEL_397;
              }
            }
            BOOL v195 = v194;
LABEL_397:
            uint64_t v192 = (((char *)v164 - (char *)v162) >> 3) + 1;
          }
          unsigned int v196 = v162;
          unsigned int v197 = v195;
          unsigned int v198 = sub_1CC0572E0(v196, v164, (uint64_t **)&v240, v192, v195, v193);
          uint64_t v199 = v197;
          int v162 = (int8x16_t *)v198;
          if (v199) {
            operator delete(v199);
          }
          uint64_t v111 = a1 + 56;
          goto LABEL_401;
        }
      }
    }
  }
LABEL_401:
  uint64_t v119 = (int)(v225 >> 3);
  int v200 = v221 - ((unint64_t)v225 >> 3);
  uint64_t v201 = v119;
  do
  {
    uint64_t v202 = sub_1CD49AB60(v111, *(void *)(*(void *)(a1 + 8) + 8 * v201++ + 8));
    *(_DWORD *)(v202 + 8) = v201;
    --v200;
  }
  while (v200);
  uint64_t v110 = *(void *)(a1 + 8);
  uint64_t v98 = v230;
  unsigned int v97 = v231;
  uint64_t v120 = (int)(((uint64_t)&v162->i64[-1] - v110) >> 3);
LABEL_404:
  unsigned int v117 = (void **)(v110 + 8 * v119);
  uint64_t v118 = (uint64_t *)(v110 + 8 * v120);
LABEL_405:
  if (v97 != v98) {
    free(v97);
  }
  if (v227) {
    v227(v226, v117, ((char *)v118 - (char *)v117) >> 3);
  }
  if (v117 != (void **)v118)
  {
    __srca = v118;
    uint64_t v203 = (uint64_t *)v117;
    do
    {
      uint64_t v204 = *v203;
      unsigned int v230 = 0;
      if (sub_1CC056A94((uint64_t)v223, v204, &v230))
      {
        *(void *)unsigned int v230 = -8192;
        int v205 = *(_DWORD *)(a1 + 60) + 1;
        *(_DWORD *)(a1 + 56) -= 2;
        *(_DWORD *)(a1 + 60) = v205;
      }
      sub_1CD47792C(v13 + 2, *(unsigned char **)(v204 + 8), (unsigned char *)(*(void *)(v204 + 8) + 8 * *(unsigned int *)(v204 + 16)));
      uint64_t v206 = *(unsigned int *)(v204 + 16);
      if (v206)
      {
        uint64_t v207 = *(void ***)(v204 + 8);
        uint64_t v208 = 8 * v206;
        do
        {
          int v209 = (unsigned int *)*v207++;
          unsigned int v230 = v209;
          sub_1CD49ABC4(*(void *)a1 + 288, (uint64_t *)&v230)[1] = v13;
          v208 -= 8;
        }
        while (v208);
      }
      *(void *)uint64_t v204 = 0;
      *(_DWORD *)(v204 + 16) = 0;
      if (v238 >= (unint64_t)HIDWORD(v238)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v237 + v238) = v204;
      LODWORD(v238) = v238 + 1;
      ++v203;
    }
    while (v203 != __srca);
    uint64_t v210 = *(void *)(a1 + 8);
    unsigned int v211 = (uint64_t *)(v210 + 8 * *(unsigned int *)(a1 + 16));
    int64_t v212 = (char *)v211 - (char *)__srca;
    if (v211 != __srca)
    {
      memmove(v117, __srca, (char *)v211 - (char *)__srca);
      uint64_t v210 = *(void *)(a1 + 8);
    }
    unint64_t v213 = (unint64_t)v117 + v212 - v210;
    *(_DWORD *)(a1 + 16) = v213 >> 3;
    uint64_t v214 = (void **)(v210 + (v213 & 0x7FFFFFFF8));
    if (v214 != v117)
    {
      unint64_t v215 = (unint64_t)((char *)__srca - (char *)v117) >> 3;
      do
      {
        BOOL v216 = (unsigned int *)*v117++;
        unsigned int v230 = v216;
        unsigned int v217 = sub_1CD49A8AC(v223, (uint64_t *)&v230);
        *((_DWORD *)v217 + 2) -= v215;
      }
      while (v117 != v214);
    }
    uint64_t v240 = (void **)a3;
    unsigned int v230 = 0;
    int v218 = sub_1CB915048((uint64_t *)(a2 + 72), &v240, &v230);
    uint64_t v16 = v230;
    if (!v218) {
      uint64_t v16 = (unsigned int *)(*(void *)(a2 + 72) + 16 * *(unsigned int *)(a2 + 88));
    }
    uint64_t v15 = 1;
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v240 = (void **)a3;
  unsigned int v230 = 0;
  int v14 = sub_1CB915048((uint64_t *)(a2 + 72), &v240, &v230);
  uint64_t v15 = 0;
  uint64_t v16 = v230;
  if (!v14) {
    uint64_t v16 = (unsigned int *)(*(void *)(a2 + 72) + 16 * *(unsigned int *)(a2 + 88));
  }
LABEL_8:
  *(void *)(*(void *)(a2 + 24) + 8 * (int)v16[2]) |= 4uLL;
  if (v237 != &v239) {
    free(v237);
  }
  return v15;
}

uint64_t llvm::LazyCallGraph::RefSCC::switchInternalEdgeToRef(llvm::LazyCallGraph::RefSCC *this, llvm::LazyCallGraph::Node *a2, llvm::LazyCallGraph::Node *a3)
{
  v98[48] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (uint64_t *)(*(void *)this + 288);
  uint64_t v96 = a3;
  long long __src = 0;
  uint64_t v7 = 0;
  if (sub_1CBFA3AF4(v6, &v96, &__src)) {
    uint64_t v7 = (llvm::LazyCallGraph::Node *)*((void *)__src + 1);
  }
  long long __src = a3;
  uint64_t v96 = 0;
  int v8 = sub_1CB915048((uint64_t *)a2 + 9, &__src, &v96);
  uint64_t v9 = (int *)v96;
  if (!v8) {
    uint64_t v9 = (int *)(*((void *)a2 + 9) + 16 * *((unsigned int *)a2 + 22));
  }
  *(void *)(*((void *)a2 + 3) + 8 * v9[2]) &= ~4uLL;
  uint64_t v96 = v98;
  uint64_t v97 = 0x1000000000;
  long long __src = v95;
  uint64_t v94 = 0x1000000000;
  int v90 = v92;
  uint64_t v91 = 0x400000000;
  BOOL v87 = v89;
  uint64_t v88 = 0x1000000000;
  unsigned int v81 = (unsigned int *)((char *)v7 + 8);
  sub_1CD499474(&v87, (_DWORD *)v7 + 2);
  if (v88)
  {
    uint64_t v10 = (uint64_t *)v87;
    uint64_t v11 = 8 * v88;
    do
    {
      uint64_t v12 = *v10;
      *(void *)(v12 + 16) = 0;
      uint64_t v13 = *(void *)this;
      unsigned int v83 = 0;
      if (sub_1CBF8BDAC(*(void *)(v13 + 288), *(_DWORD *)(v13 + 304), v12, &v83))
      {
        *(void *)unsigned int v83 = -8192;
        *(int32x2_t *)(v13 + 296) = vadd_s32(*(int32x2_t *)(v13 + 296), (int32x2_t)0x1FFFFFFFFLL);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  *((void *)a3 + 2) = -1;
  unsigned int v14 = *((_DWORD *)v7 + 4);
  if (v14 >= *((_DWORD *)v7 + 5)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*((void *)v7 + 1) + 8 * v14) = a3;
  ++*((_DWORD *)v7 + 4);
  uint64_t v15 = *(void *)this + 288;
  unsigned int v83 = a3;
  sub_1CD49ABC4(v15, (uint64_t *)&v83)[1] = v7;
  if (v88)
  {
    uint64_t v26 = (llvm::LazyCallGraph::Node **)v87;
    unint64_t v82 = (llvm::LazyCallGraph::Node **)((char *)v87 + 8 * v88);
    do
    {
      uint64_t v27 = *v26;
      if (*((_DWORD *)*v26 + 4)) {
        goto LABEL_26;
      }
      *((void *)v27 + 2) = 0x100000001;
      uint64_t v28 = (void *)*((void *)v27 + 3);
      uint64_t v29 = *((unsigned int *)v27 + 8);
      uint64_t v30 = &v28[v29];
      if (v29)
      {
        uint64_t v31 = 8 * v29;
        do
        {
          if ((*v28 & 0xFFFFFFFFFFFFFFF8) != 0 && (*v28 & 4) != 0 && *(void *)(*v28 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_35;
          }
          ++v28;
          v31 -= 8;
        }
        while (v31);
        uint64_t v28 = v30;
      }
LABEL_35:
      unsigned int v83 = v27;
      uint64_t v84 = v28;
      int v85 = v30;
      unint64_t v32 = sub_1CD46398C((uint64_t)&v96, (unint64_t)&v83);
      int v33 = (char *)v96 + 24 * v97;
      long long v34 = *(_OWORD *)v32;
      *((void *)v33 + 2) = *(void *)(v32 + 16);
      *(_OWORD *)int v33 = v34;
      unsigned int v35 = v97 + 1;
      LODWORD(v97) = v97 + 1;
      uint64_t v36 = 2;
      do
      {
        unsigned int v37 = (char *)v96 + 24 * v35;
        uint64_t v38 = (llvm::LazyCallGraph::Node *)*((void *)v37 - 3);
        uint64_t v39 = (void *)*((void *)v37 - 2);
        int v40 = (void *)*((void *)v37 - 1);
        LODWORD(v97) = v35 - 1;
        uint64_t v41 = *((void *)v38 + 3) + 8 * *((unsigned int *)v38 + 8);
        if (v39 == (void *)v41) {
          goto LABEL_66;
        }
        do
        {
          unint64_t v42 = *v39 & 0xFFFFFFFFFFFFFFF8;
          int v43 = *(_DWORD *)(v42 + 16);
          if (v43 == -1)
          {
            uint64_t v50 = (uint64_t *)(*(void *)this + 288);
            unsigned int v83 = (llvm::LazyCallGraph::Node *)(*v39 & 0xFFFFFFFFFFFFFFF8);
            uint64_t v86 = 0;
            int v51 = sub_1CBFA3AF4(v50, &v83, &v86);
            unsigned int v52 = 0;
            if (v51) {
              unsigned int v52 = *(llvm::LazyCallGraph::Node **)(v86 + 8);
            }
            if (v52 == v7)
            {
              unsigned int v73 = *((_DWORD *)v7 + 4);
              if (v73 >= *((_DWORD *)v7 + 5)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*((void *)v7 + 1) + 8 * v73) = v38;
              ++*((_DWORD *)v7 + 4);
              sub_1CD47792C(v81, __src, (unsigned char *)__src + 8 * v94);
              LODWORD(v94) = 0;
              unsigned int v74 = v97;
              for (i = *((_DWORD *)v7 + 4); v97; unsigned int v74 = v97)
              {
                uint64_t v76 = *((void *)v96 + 3 * v74 - 3);
                LODWORD(v97) = v74 - 1;
                if (i >= *((_DWORD *)v7 + 5)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*((void *)v7 + 1) + 8 * i) = v76;
                unsigned int i = *((_DWORD *)v7 + 4) + 1;
                *((_DWORD *)v7 + 4) = i;
              }
              if (v73 != (unint64_t)i)
              {
                int v77 = (llvm::LazyCallGraph::Node **)(*(void *)v81 + 8 * (int)v73);
                uint64_t v78 = 8 * i - 8 * (int)v73;
                do
                {
                  unint64_t v79 = *v77++;
                  *((void *)v79 + 2) = -1;
                  uint64_t v80 = *(void *)this + 288;
                  unsigned int v83 = v79;
                  sub_1CD49ABC4(v80, (uint64_t *)&v83)[1] = v7;
                  v78 -= 8;
                }
                while (v78);
              }
              goto LABEL_26;
            }
            while (++v39 != v40)
            {
              if ((*v39 & 0xFFFFFFFFFFFFFFF8) != 0 && (*v39 & 4) != 0 && *(void *)(*v39 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_62;
              }
            }
          }
          else
          {
            if (!v43)
            {
              unsigned int v83 = v38;
              uint64_t v84 = v39;
              int v85 = v40;
              unint64_t v44 = sub_1CD46398C((uint64_t)&v96, (unint64_t)&v83);
              BOOL v45 = (char *)v96 + 24 * v97;
              long long v46 = *(_OWORD *)v44;
              *((void *)v45 + 2) = *(void *)(v44 + 16);
              *(_OWORD *)BOOL v45 = v46;
              LODWORD(v97) = v97 + 1;
              uint64_t v47 = (v36 + 1);
              *(_DWORD *)(v42 + 16) = v36;
              *(_DWORD *)(v42 + 20) = v36;
              uint64_t v39 = *(void **)(v42 + 24);
              uint64_t v48 = *(unsigned int *)(v42 + 32);
              int v40 = &v39[v48];
              if (v48)
              {
                uint64_t v49 = 8 * v48;
                while ((*v39 & 0xFFFFFFFFFFFFFFF8) == 0
                     || (*v39 & 4) == 0
                     || !*(void *)(*v39 & 0xFFFFFFFFFFFFFFF8))
                {
                  ++v39;
                  v49 -= 8;
                  if (!v49)
                  {
                    uint64_t v38 = (llvm::LazyCallGraph::Node *)v42;
                    goto LABEL_65;
                  }
                }
              }
              uint64_t v38 = (llvm::LazyCallGraph::Node *)v42;
              uint64_t v41 = (uint64_t)v40;
              goto LABEL_64;
            }
            int v53 = *(_DWORD *)(v42 + 20);
            if (v53 < *((_DWORD *)v38 + 5)) {
              *((_DWORD *)v38 + 5) = v53;
            }
            while (++v39 != v40)
            {
              if ((*v39 & 0xFFFFFFFFFFFFFFF8) != 0 && (*v39 & 4) != 0 && *(void *)(*v39 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_62;
              }
            }
          }
          uint64_t v39 = v40;
LABEL_62:
          uint64_t v47 = v36;
LABEL_64:
          uint64_t v36 = v47;
        }
        while (v39 != (void *)v41);
LABEL_65:
        uint64_t v36 = v47;
        if (!v38) {
          break;
        }
LABEL_66:
        if (v94 >= (unint64_t)HIDWORD(v94)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)__src + v94) = v38;
        unsigned int v54 = v94 + 1;
        LODWORD(v94) = v94 + 1;
        int v55 = *((_DWORD *)v38 + 5);
        if (v55 == *((_DWORD *)v38 + 4))
        {
          uint64_t v56 = (char *)__src;
          int v57 = (char *)__src + 8 * v54;
          uint64_t v58 = 8 * v54;
          while (v58)
          {
            int v59 = *(_DWORD *)(*(void *)((char *)__src + v58 - 8) + 16);
            v58 -= 8;
            if (v59 < v55)
            {
              uint64_t v56 = (char *)__src + v58 + 8;
              break;
            }
          }
          uint64_t v60 = *(void *)this;
          *(void *)(v60 + 272) = *(void *)(*(void *)this + 272) + 32;
          uint64_t v61 = *(void *)(v60 + 192);
          if (((v61 + 7) & 0xFFFFFFFFFFFFFFF8) - v61 + 32 > *(void *)(v60 + 200) - v61)
          {
            unsigned int v70 = *(_DWORD *)(v60 + 216) >> 7;
            if (v70 >= 0x1E) {
              LOBYTE(v70) = 30;
            }
            uint64_t v71 = 4096 << v70;
            uint64_t v62 = operator new(4096 << v70, (std::align_val_t)8uLL);
            unint64_t v72 = *(unsigned int *)(v60 + 216);
            if (v72 >= *(unsigned int *)(v60 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v60 + 208) + 8 * v72) = v62;
            ++*(_DWORD *)(v60 + 216);
            *(void *)(v60 + 200) = (char *)v62 + v71;
          }
          else
          {
            uint64_t v62 = (void *)((v61 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
          *(void *)(v60 + 192) = v62 + 4;
          *uint64_t v62 = this;
          v62[1] = v62 + 3;
          v62[2] = 0x100000000;
          sub_1CC0579B0((uint64_t)(v62 + 1), (uint64_t)v57, (uint64_t)v57, (uint64_t)v57, (uint64_t)v56);
          if (v91 >= (unint64_t)HIDWORD(v91)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v90 + v91) = v62;
          LODWORD(v91) = v91 + 1;
          uint64_t v63 = *((void *)v90 + v91 - 1);
          uint64_t v64 = *(unsigned int *)(v63 + 16);
          if (v64)
          {
            uint64_t v65 = *(llvm::LazyCallGraph::Node ***)(v63 + 8);
            uint64_t v66 = 8 * v64;
            do
            {
              uint64_t v67 = *v65++;
              *((void *)v67 + 2) = -1;
              uint64_t v68 = *((void *)v90 + v91 - 1);
              uint64_t v69 = *(void *)this + 288;
              unsigned int v83 = v67;
              sub_1CD49ABC4(v69, (uint64_t *)&v83)[1] = v68;
              v66 -= 8;
            }
            while (v66);
          }
          LODWORD(v94) = (unint64_t)(v56 - (unsigned char *)__src) >> 3;
        }
        unsigned int v35 = v97;
      }
      while (v97);
LABEL_26:
      ++v26;
    }
    while (v26 != v82);
  }
  uint64_t v16 = (_DWORD *)((char *)this + 56);
  unsigned int v83 = v7;
  uint64_t v17 = sub_1CD49A8AC((_DWORD *)this + 14, (uint64_t *)&v83);
  uint64_t v19 = *((void *)this + 1);
  uint64_t v18 = (unsigned int *)((char *)this + 8);
  signed int v20 = *((_DWORD *)v17 + 2);
  uint64_t v21 = v20;
  sub_1CD4832F4(v18, v19 + 8 * v20, (uint64_t *)v90, (uint64_t *)v90 + v91);
  signed int v22 = v18[2];
  if (v20 < v22)
  {
    uint64_t v23 = 8 * v20;
    do
    {
      *((_DWORD *)sub_1CD49A8AC(v16, (uint64_t *)(*(void *)v18 + v23)) + 2) = v20++;
      v23 += 8;
    }
    while (v22 != v20);
  }
  uint64_t v24 = *(void *)v18;
  if (v87 != v89) {
    free(v87);
  }
  if (v90 != v92) {
    free(v90);
  }
  if (__src != v95) {
    free(__src);
  }
  if (v96 != v98) {
    free(v96);
  }
  return v24 + 8 * v21;
}

uint64_t llvm::LazyCallGraph::RefSCC::insertInternalRefEdge(llvm::LazyCallGraph::RefSCC *this, llvm::LazyCallGraph::Node *a2, llvm::LazyCallGraph::Node *a3)
{
  return llvm::LazyCallGraph::EdgeSequence::insertEdgeInternal((uint64_t)a2 + 24, (uint64_t)a3, 0);
}

uint64_t llvm::LazyCallGraph::RefSCC::insertOutgoingEdge(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return llvm::LazyCallGraph::EdgeSequence::insertEdgeInternal(a2 + 24, a3, a4);
}

void llvm::LazyCallGraph::RefSCC::insertIncomingRefEdge(llvm::LazyCallGraph::RefSCC *this@<X0>, llvm::LazyCallGraph::Node *a2@<X1>, llvm::LazyCallGraph::Node *a3@<X2>, void *a4@<X8>)
{
  v291[16] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (uint64_t *)(*(void *)this + 288);
  int v282 = (char *)a2;
  BOOL v289 = 0;
  if ((sub_1CBFA3AF4(v6, &v282, &v289) & 1) != 0 && (uint64_t v7 = (void **)v289[1]) != 0) {
    int v8 = (char *)*v7;
  }
  else {
    int v8 = 0;
  }
  *a4 = a4 + 2;
  BOOL v279 = a4;
  a4[1] = 0x100000000;
  uint64_t v9 = *(void *)this + 552;
  int v282 = v8;
  uint64_t v10 = *((int *)sub_1CC057A3C(v9, (uint64_t *)&v282) + 2);
  uint64_t v11 = *(void *)this + 552;
  int v282 = (char *)this;
  uint64_t v12 = *((int *)sub_1CC057A3C(v11, (uint64_t *)&v282) + 2);
  std::string __dst = *(void **)this;
  int v282 = v8;
  int v13 = *((_DWORD *)sub_1CC057A3C((uint64_t)(__dst + 69), (uint64_t *)&v282) + 2);
  int v282 = (char *)this;
  uint64_t v274 = *((int *)sub_1CC057A3C((uint64_t)(__dst + 69), (uint64_t *)&v282) + 2);
  int v282 = (char *)v286;
  BOOL v283 = (char *)v286;
  int v285 = 0;
  uint64_t v284 = 0x100000004;
  v286[0] = v8;
  if (v10 == v12) {
    goto LABEL_6;
  }
  uint64_t v21 = *(void *)(*(void *)this + 408);
  uint64_t v277 = v21 + 8 * v12;
  uint64_t v22 = v21 + 8 * v10;
  do
  {
    uint64_t v23 = *(void *)(v22 + 8);
    uint64_t v280 = v22 + 8;
    uint64_t v24 = *(unsigned int *)(v23 + 16);
    if (!v24) {
      goto LABEL_96;
    }
    uint64_t v25 = *(void *)(v23 + 8);
    uint64_t v26 = v25 + 8 * v24;
    while (1)
    {
      uint64_t v27 = *(unsigned int *)(*(void *)v25 + 16);
      if (v27) {
        break;
      }
LABEL_63:
      v25 += 8;
      if (v25 == v26) {
        goto LABEL_96;
      }
    }
    uint64_t v28 = *(void *)(*(void *)v25 + 8);
    uint64_t v29 = v28 + 8 * v27;
    while (1)
    {
      uint64_t v30 = *(unsigned int *)(*(void *)v28 + 32);
      if (v30)
      {
        uint64_t v31 = 8 * v30;
        unint64_t v32 = *(uint64_t **)(*(void *)v28 + 24);
        while ((*v32 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(void *)(*v32 & 0xFFFFFFFFFFFFFFF8))
        {
          ++v32;
          v31 -= 8;
          if (!v31) {
            goto LABEL_62;
          }
        }
      }
      else
      {
        unint64_t v32 = *(uint64_t **)(*(void *)v28 + 24);
      }
      uint64_t v33 = *(void *)(*(void *)v28 + 24) + 8 * v30;
      if (v32 == (uint64_t *)v33) {
        goto LABEL_62;
      }
      uint64_t v34 = *v32;
LABEL_23:
      unsigned int v35 = (uint64_t *)(*(void *)this + 288);
      BOOL v289 = (uint64_t *)(v34 & 0xFFFFFFFFFFFFFFF8);
      BOOL v288 = 0;
      if ((sub_1CBFA3AF4(v35, &v289, &v288) & 1) != 0 && (uint64_t v36 = (uint64_t *)v288[1]) != 0) {
        uint64_t v37 = *v36;
      }
      else {
        uint64_t v37 = 0;
      }
      uint64_t v39 = v282;
      uint64_t v38 = v283;
      if (v283 == v282)
      {
        unsigned int v40 = HIDWORD(v284);
        uint64_t v41 = &v283[8 * HIDWORD(v284)];
        if (HIDWORD(v284))
        {
          uint64_t v42 = 0;
          while (*(void *)&v283[v42] != v37)
          {
            v42 += 8;
            if (8 * HIDWORD(v284) == v42) {
              goto LABEL_46;
            }
          }
          uint64_t v41 = &v283[v42];
        }
LABEL_46:
        uint64_t v39 = v283;
      }
      else
      {
        int v43 = v284 - 1;
        unsigned int v44 = (v284 - 1) & ((v37 >> 4) ^ (v37 >> 9));
        uint64_t v41 = &v283[8 * v44];
        uint64_t v45 = *(void *)v41;
        if (*(void *)v41 == -1)
        {
          long long v46 = 0;
LABEL_57:
          if (v46) {
            uint64_t v41 = v46;
          }
          unsigned int v40 = HIDWORD(v284);
          if (*(void *)v41 != v37) {
            uint64_t v41 = &v283[8 * v284];
          }
        }
        else
        {
          long long v46 = 0;
          int v47 = 1;
          while (v45 != v37)
          {
            if (v46) {
              BOOL v48 = 0;
            }
            else {
              BOOL v48 = v45 == -2;
            }
            if (v48) {
              long long v46 = v41;
            }
            unsigned int v49 = v44 + v47++;
            unsigned int v44 = v49 & v43;
            uint64_t v41 = &v283[8 * (v49 & v43)];
            uint64_t v45 = *(void *)v41;
            if (*(void *)v41 == -1) {
              goto LABEL_57;
            }
          }
          unsigned int v40 = HIDWORD(v284);
        }
      }
      unsigned int v50 = v284;
      int v51 = v283 == v39 ? v40 : v284;
      if (v41 != &v283[8 * v51]) {
        break;
      }
      while (++v32 != (uint64_t *)v33)
      {
        uint64_t v34 = *v32;
        if ((*v32 & 0xFFFFFFFFFFFFFFF8) != 0 && *(void *)(*v32 & 0xFFFFFFFFFFFFFFF8))
        {
          if (v32 != (uint64_t *)v33) {
            goto LABEL_23;
          }
          break;
        }
      }
LABEL_62:
      v28 += 8;
      if (v28 == v29) {
        goto LABEL_63;
      }
    }
    if (v283 != v39) {
      goto LABEL_75;
    }
    if (!v40)
    {
LABEL_73:
      if (v284 > v40)
      {
        HIDWORD(v284) = v40 + 1;
        *(void *)&v283[8 * v40] = v23;
        goto LABEL_96;
      }
LABEL_75:
      if (3 * (int)v284 <= 4 * (v40 - v285))
      {
        if (v284 >= 0x40) {
          unsigned int v50 = 2 * v284;
        }
        else {
          unsigned int v50 = 128;
        }
      }
      else if (v284 - v40 >= v284 >> 3)
      {
        goto LABEL_77;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v282, v50);
      unsigned int v50 = v284;
      uint64_t v38 = v283;
LABEL_77:
      unsigned int v55 = v50 - 1;
      unsigned int v56 = (v50 - 1) & ((v23 >> 4) ^ (v23 >> 9));
      int v57 = &v38[8 * v56];
      uint64_t v58 = *(void *)v57;
      if (*(void *)v57 == -1)
      {
        int v59 = 0;
LABEL_89:
        if (v59) {
          uint64_t v63 = v59;
        }
        else {
          uint64_t v63 = v57;
        }
        if (*(void *)v63 != v23)
        {
          if (*(void *)v63 == -2) {
            --v285;
          }
          else {
            ++HIDWORD(v284);
          }
          *(void *)uint64_t v63 = v23;
        }
      }
      else
      {
        int v59 = 0;
        int v60 = 1;
        while (v58 != v23)
        {
          if (v59) {
            BOOL v61 = 0;
          }
          else {
            BOOL v61 = v58 == -2;
          }
          if (v61) {
            int v59 = v57;
          }
          unsigned int v62 = v56 + v60++;
          unsigned int v56 = v62 & v55;
          int v57 = &v38[8 * (v62 & v55)];
          uint64_t v58 = *(void *)v57;
          if (*(void *)v57 == -1) {
            goto LABEL_89;
          }
        }
      }
      goto LABEL_96;
    }
    unsigned int v52 = 0;
    uint64_t v53 = 8 * v40;
    unsigned int v54 = v283;
    while (*(void *)v54 != v23)
    {
      if (*(void *)v54 == -2) {
        unsigned int v52 = v54;
      }
      v54 += 8;
      v53 -= 8;
      if (!v53)
      {
        if (!v52) {
          goto LABEL_73;
        }
        *(void *)unsigned int v52 = v23;
        --v285;
        break;
      }
    }
LABEL_96:
    uint64_t v22 = v280;
  }
  while (v280 != v277);
LABEL_6:
  unsigned int v14 = __dst;
  uint64_t v15 = __dst[51];
  uint64_t v16 = (int8x16_t *)(v15 + 8 * v13);
  uint64_t v17 = v15 + 8 * v274;
  uint64_t v18 = (unint64_t *)(v17 + 8);
  BOOL v289 = (uint64_t *)&v282;
  if (v16 == (int8x16_t *)(v17 + 8))
  {
    uint64_t v19 = (uint64_t *)(v15 + 8 * v13);
  }
  else
  {
    int v64 = v284 - 1;
    uint64_t v65 = 8 * HIDWORD(v284);
    signed int v20 = __dst + 69;
    while (1)
    {
      uint64_t v66 = v16->i64[0];
      if (v283 == v282)
      {
        uint64_t v67 = v283;
        uint64_t v68 = &v283[8 * HIDWORD(v284)];
        if (HIDWORD(v284))
        {
          unint64_t v69 = 0;
          while (*(void *)&v283[v69] != v66)
          {
            v69 += 8;
            if (v65 == v69)
            {
              uint64_t v67 = v283;
              uint64_t v68 = &v283[8 * HIDWORD(v284)];
              goto LABEL_131;
            }
          }
          uint64_t v68 = &v283[v69];
          uint64_t v67 = v283;
        }
      }
      else
      {
        unsigned int v70 = v64 & ((v66 >> 4) ^ (v66 >> 9));
        uint64_t v68 = &v283[8 * v70];
        uint64_t v71 = *(void *)v68;
        if (*(void *)v68 == -1)
        {
          unint64_t v72 = 0;
LABEL_125:
          if (v72) {
            uint64_t v68 = v72;
          }
          uint64_t v76 = *(void *)v68;
        }
        else
        {
          unint64_t v72 = 0;
          int v73 = 1;
          while (v71 != v66)
          {
            if (v72) {
              BOOL v74 = 0;
            }
            else {
              BOOL v74 = v71 == -2;
            }
            if (v74) {
              unint64_t v72 = v68;
            }
            unsigned int v75 = v70 + v73++;
            unsigned int v70 = v75 & v64;
            uint64_t v68 = &v283[8 * (v75 & v64)];
            uint64_t v71 = *(void *)v68;
            if (*(void *)v68 == -1) {
              goto LABEL_125;
            }
          }
          uint64_t v76 = v16->i64[0];
        }
        if (v76 != v66) {
          uint64_t v68 = &v283[8 * v284];
        }
        uint64_t v67 = v282;
      }
LABEL_131:
      int v77 = v283 == v67 ? HIDWORD(v284) : v284;
      if (v68 != &v283[8 * v77]) {
        break;
      }
      uint64_t v19 = &v16->i64[1];
      BOOL v48 = v16 == (int8x16_t *)v17;
      uint64_t v16 = (int8x16_t *)((char *)v16 + 8);
      if (v48) {
        goto LABEL_178;
      }
    }
    do
    {
      if (v16 == (int8x16_t *)--v18)
      {
        uint64_t v19 = (uint64_t *)v16;
        goto LABEL_178;
      }
      unint64_t v78 = *v18;
      if (v283 == v282)
      {
        unint64_t v79 = v283;
        uint64_t v80 = &v283[8 * HIDWORD(v284)];
        if (HIDWORD(v284))
        {
          unint64_t v81 = 0;
          while (*(void *)&v283[v81] != v78)
          {
            v81 += 8;
            if (v65 == v81)
            {
              unint64_t v79 = v283;
              uint64_t v80 = &v283[8 * HIDWORD(v284)];
              goto LABEL_165;
            }
          }
          uint64_t v80 = &v283[v81];
          unint64_t v79 = v283;
        }
      }
      else
      {
        unsigned int v82 = v64 & ((v78 >> 4) ^ (v78 >> 9));
        uint64_t v80 = &v283[8 * v82];
        uint64_t v83 = *(void *)v80;
        if (*(void *)v80 == -1)
        {
          uint64_t v84 = 0;
LABEL_159:
          if (v84) {
            uint64_t v80 = v84;
          }
          unint64_t v88 = *(void *)v80;
        }
        else
        {
          uint64_t v84 = 0;
          int v85 = 1;
          while (v83 != v78)
          {
            if (v84) {
              BOOL v86 = 0;
            }
            else {
              BOOL v86 = v83 == -2;
            }
            if (v86) {
              uint64_t v84 = v80;
            }
            unsigned int v87 = v82 + v85++;
            unsigned int v82 = v87 & v64;
            uint64_t v80 = &v283[8 * (v87 & v64)];
            uint64_t v83 = *(void *)v80;
            if (*(void *)v80 == -1) {
              goto LABEL_159;
            }
          }
          unint64_t v88 = *v18;
        }
        if (v88 != v78) {
          uint64_t v80 = &v283[8 * v284];
        }
        unint64_t v79 = v282;
      }
LABEL_165:
      if (v283 == v79) {
        int v89 = HIDWORD(v284);
      }
      else {
        int v89 = v284;
      }
    }
    while (v80 != &v283[8 * v89]);
    if ((char *)v18 - (char *)v16 < 17)
    {
LABEL_176:
      uint64_t v94 = 0;
      unint64_t v90 = 0;
    }
    else
    {
      if ((((char *)v18 - (char *)v16) >> 3) + 1 >= 0xFFFFFFFFFFFFFFFLL) {
        unint64_t v90 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v90 = (((char *)v18 - (char *)v16) >> 3) + 1;
      }
      uint64_t v91 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
      while (1)
      {
        uint64_t v92 = (uint64_t *)operator new(8 * v90, v91);
        if (v92) {
          break;
        }
        BOOL v93 = v90 > 1;
        v90 >>= 1;
        if (!v93) {
          goto LABEL_176;
        }
      }
      uint64_t v94 = v92;
    }
    uint64_t v19 = sub_1CC056BFC(v16, v18, &v289, (((char *)v18 - (char *)v16) >> 3) + 1, v94, v90);
    if (v94) {
      operator delete(v94);
    }
    unsigned int v14 = __dst;
  }
  signed int v20 = __dst + 69;
LABEL_178:
  if (v13 <= (int)v274)
  {
    uint64_t v95 = 8 * v13;
    do
    {
      BOOL v288 = *(void **)(v14[51] + v95);
      BOOL v289 = 0;
      int v96 = sub_1CBFA3AF4(v20, &v288, &v289);
      uint64_t v97 = v289;
      if (!v96) {
        uint64_t v97 = (uint64_t *)(v14[69] + 16 * *((unsigned int *)v14 + 142));
      }
      *((_DWORD *)v97 + 2) = v13++;
      v95 += 8;
    }
    while (v274 + 1 != v13);
  }
  int v99 = v282;
  uint64_t v98 = v283;
  if (v283 == v282)
  {
    int v100 = HIDWORD(v284);
    uint64_t v101 = &v283[8 * HIDWORD(v284)];
    if (HIDWORD(v284))
    {
      uint64_t v102 = 0;
      while (*(llvm::LazyCallGraph::RefSCC **)&v283[v102] != this)
      {
        v102 += 8;
        if (8 * HIDWORD(v284) == v102) {
          goto LABEL_202;
        }
      }
      uint64_t v101 = &v283[v102];
    }
LABEL_202:
    int v99 = v283;
  }
  else
  {
    int v103 = v284 - 1;
    unsigned int v104 = (v284 - 1) & ((this >> 4) ^ (this >> 9));
    uint64_t v101 = &v283[8 * v104];
    BOOL v105 = *(llvm::LazyCallGraph::RefSCC **)v101;
    if (*(void *)v101 == -1)
    {
      int v106 = 0;
LABEL_215:
      if (v106) {
        uint64_t v101 = v106;
      }
      int v100 = HIDWORD(v284);
      if (*(llvm::LazyCallGraph::RefSCC **)v101 != this) {
        uint64_t v101 = &v283[8 * v284];
      }
    }
    else
    {
      int v106 = 0;
      int v107 = 1;
      while (v105 != this)
      {
        if (v106) {
          BOOL v108 = 0;
        }
        else {
          BOOL v108 = v105 == (llvm::LazyCallGraph::RefSCC *)-2;
        }
        if (v108) {
          int v106 = v101;
        }
        unsigned int v109 = v104 + v107++;
        unsigned int v104 = v109 & v103;
        uint64_t v101 = &v283[8 * (v109 & v103)];
        BOOL v105 = *(llvm::LazyCallGraph::RefSCC **)v101;
        if (*(void *)v101 == -1) {
          goto LABEL_215;
        }
      }
      int v100 = HIDWORD(v284);
    }
  }
  if (v283 == v99) {
    int v110 = v100;
  }
  else {
    int v110 = v284;
  }
  if (v101 == &v283[8 * v110])
  {
    uint64_t v111 = v19 - 1;
    unsigned int v112 = v19 - 1;
    goto LABEL_414;
  }
  uint64_t v113 = v14[51];
  char v114 = (char *)v19 - v113;
  unint64_t v115 = ((unint64_t)v19 - v113) >> 3;
  uint64_t v116 = (int)(((uint64_t)v19 - v113) >> 3);
  if ((int)v115 + 1 >= (int)v274)
  {
    uint64_t v122 = v274;
    goto LABEL_413;
  }
  if (v283 == v99)
  {
LABEL_210:
    unsigned int v117 = 0;
    unsigned int v118 = 0;
    HIDWORD(v284) = 0;
    int v285 = 0;
    uint64_t v119 = v283;
    uint64_t v120 = v283;
    if (v283 == v282) {
      goto LABEL_211;
    }
LABEL_237:
    unsigned int v121 = v284;
    unsigned int v118 = v117;
LABEL_238:
    if (3 * v121 <= 4 * (v118 - v285))
    {
      if (v121 >= 0x40) {
        v121 *= 2;
      }
      else {
        unsigned int v121 = 128;
      }
    }
    else if (v121 - v118 >= v121 >> 3)
    {
LABEL_240:
      unsigned int v126 = v121 - 1;
      unsigned int v127 = (v121 - 1) & ((this >> 4) ^ (this >> 9));
      unsigned int v128 = (llvm::LazyCallGraph::RefSCC **)&v119[8 * v127];
      uint64_t v129 = *v128;
      if (*v128 == (llvm::LazyCallGraph::RefSCC *)-1)
      {
        int v130 = 0;
LABEL_252:
        if (v130) {
          unsigned int v134 = v130;
        }
        else {
          unsigned int v134 = v128;
        }
        if (*v134 != this)
        {
          if (*v134 == (llvm::LazyCallGraph::RefSCC *)-2) {
            --v285;
          }
          else {
            ++HIDWORD(v284);
          }
          *unsigned int v134 = this;
        }
      }
      else
      {
        int v130 = 0;
        int v131 = 1;
        while (v129 != this)
        {
          if (v130) {
            BOOL v132 = 0;
          }
          else {
            BOOL v132 = v129 == (llvm::LazyCallGraph::RefSCC *)-2;
          }
          if (v132) {
            int v130 = v128;
          }
          unsigned int v133 = v127 + v131++;
          unsigned int v127 = v133 & v126;
          unsigned int v128 = (llvm::LazyCallGraph::RefSCC **)&v119[8 * (v133 & v126)];
          uint64_t v129 = *v128;
          if (*v128 == (llvm::LazyCallGraph::RefSCC *)-1) {
            goto LABEL_252;
          }
        }
      }
      goto LABEL_259;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v282, v121);
    unsigned int v121 = v284;
    uint64_t v119 = v283;
    goto LABEL_240;
  }
  if (v284 < 0x21 || 4 * (v100 - v285) >= v284)
  {
    memset(v283, 255, 8 * v284);
    goto LABEL_210;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v282);
  unsigned int v118 = HIDWORD(v284);
  uint64_t v119 = v283;
  if (v283 != v282)
  {
    unsigned int v117 = HIDWORD(v284);
    goto LABEL_237;
  }
  uint64_t v120 = &v283[8 * HIDWORD(v284)];
  if (HIDWORD(v284))
  {
    uint64_t v123 = 0;
    long long v124 = 0;
    while (1)
    {
      unsigned int v125 = *(llvm::LazyCallGraph::RefSCC **)&v283[v123];
      if (v125 == this) {
        break;
      }
      if (v125 == (llvm::LazyCallGraph::RefSCC *)-2) {
        long long v124 = &v283[v123];
      }
      v123 += 8;
      if (8 * HIDWORD(v284) == v123)
      {
        if (!v124) {
          goto LABEL_211;
        }
        *(void *)long long v124 = this;
        --v285;
        break;
      }
    }
  }
  else
  {
LABEL_211:
    unsigned int v121 = v284;
    if (v118 >= v284) {
      goto LABEL_238;
    }
    HIDWORD(v284) = v118 + 1;
    *(void *)uint64_t v120 = this;
  }
LABEL_259:
  unint64_t v269 = (unint64_t)v114;
  int v270 = v115;
  uint64_t v271 = v116;
  BOOL v289 = v291;
  HIDWORD(v290) = 4;
  v291[0] = this;
  unsigned int v135 = 1;
  while (2)
  {
    uint64_t v136 = v289[--v135];
    LODWORD(v290) = v135;
    uint64_t v137 = *(unsigned int *)(v136 + 16);
    if (!v137) {
      goto LABEL_330;
    }
    uint64_t v138 = *(void *)(v136 + 8);
    uint64_t v281 = v138 + 8 * v137;
    while (2)
    {
      uint64_t v139 = *(unsigned int *)(*(void *)v138 + 16);
      if (v139)
      {
        uint64_t v140 = *(void *)(*(void *)v138 + 8);
        uint64_t v141 = v140 + 8 * v139;
        while (1)
        {
          uint64_t v142 = *(unsigned int *)(*(void *)v140 + 32);
          if (v142)
          {
            uint64_t v143 = 8 * v142;
            unsigned int v144 = *(uint64_t **)(*(void *)v140 + 24);
            while ((*v144 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(void *)(*v144 & 0xFFFFFFFFFFFFFFF8))
            {
              ++v144;
              v143 -= 8;
              if (!v143) {
                goto LABEL_327;
              }
            }
          }
          else
          {
            unsigned int v144 = *(uint64_t **)(*(void *)v140 + 24);
          }
          uint64_t v145 = *(void *)(*(void *)v140 + 24) + 8 * v142;
          if (v144 != (uint64_t *)v145) {
            break;
          }
LABEL_327:
          v140 += 8;
          if (v140 == v141) {
            goto LABEL_328;
          }
        }
        uint64_t v146 = *v144;
        while (2)
        {
          uint64_t v147 = (uint64_t *)(*(void *)this + 288);
          uint64_t v287 = 0;
          BOOL v288 = (void *)(v146 & 0xFFFFFFFFFFFFFFF8);
          if ((sub_1CBFA3AF4(v147, &v288, &v287) & 1) != 0 && (int v148 = *(uint64_t **)(v287 + 8)) != 0) {
            uint64_t v149 = *v148;
          }
          else {
            uint64_t v149 = 0;
          }
          uint64_t v150 = *(void *)this;
          unsigned int v151 = (uint64_t *)(*(void *)this + 552);
          uint64_t v287 = v149;
          BOOL v288 = 0;
          if (sub_1CBFA3AF4(v151, &v287, &v288)) {
            unsigned int v152 = v288;
          }
          else {
            unsigned int v152 = (void *)(*(void *)(v150 + 552) + 16 * *(unsigned int *)(v150 + 568));
          }
          if (*((_DWORD *)v152 + 2) <= (int)v10) {
            goto LABEL_315;
          }
          unsigned int v153 = v283;
          uint64_t v154 = HIDWORD(v284);
          if (v283 == v282)
          {
            if (HIDWORD(v284))
            {
              BOOL v155 = 0;
              uint64_t v156 = 8 * HIDWORD(v284);
              int v157 = (uint64_t *)v283;
              do
              {
                if (*v157 == v149) {
                  goto LABEL_315;
                }
                if (*v157 == -2) {
                  BOOL v155 = v157;
                }
                ++v157;
                v156 -= 8;
              }
              while (v156);
              if (v155)
              {
                *BOOL v155 = v149;
                --v285;
                goto LABEL_313;
              }
            }
            unsigned int v158 = v284;
            if (HIDWORD(v284) < v284)
            {
              ++HIDWORD(v284);
              *(void *)&v283[8 * v154] = v149;
LABEL_313:
              if (v290 >= (unint64_t)HIDWORD(v290)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v289[v290] = v149;
              LODWORD(v290) = v290 + 1;
              goto LABEL_315;
            }
          }
          else
          {
            unsigned int v158 = v284;
          }
          if (3 * v158 <= 4 * (HIDWORD(v284) - v285))
          {
            if (v158 >= 0x40) {
              v158 *= 2;
            }
            else {
              unsigned int v158 = 128;
            }
          }
          else if (v158 - HIDWORD(v284) >= v158 >> 3)
          {
LABEL_294:
            unsigned int v159 = v158 - 1;
            unsigned int v160 = (v158 - 1) & ((v149 >> 4) ^ (v149 >> 9));
            uint64_t v161 = &v153[8 * v160];
            uint64_t v162 = *(void *)v161;
            if (*(void *)v161 == -1)
            {
              int64_t v163 = 0;
            }
            else
            {
              int64_t v163 = 0;
              int v164 = 1;
              do
              {
                if (v162 == v149) {
                  goto LABEL_315;
                }
                if (v163) {
                  BOOL v165 = 0;
                }
                else {
                  BOOL v165 = v162 == -2;
                }
                if (v165) {
                  int64_t v163 = (uint64_t *)v161;
                }
                unsigned int v166 = v160 + v164++;
                unsigned int v160 = v166 & v159;
                uint64_t v161 = &v153[8 * (v166 & v159)];
                uint64_t v162 = *(void *)v161;
              }
              while (*(void *)v161 != -1);
            }
            if (v163) {
              unsigned int v167 = v163;
            }
            else {
              unsigned int v167 = (uint64_t *)v161;
            }
            if (*v167 != v149)
            {
              if (*v167 == -2) {
                --v285;
              }
              else {
                ++HIDWORD(v284);
              }
              *unsigned int v167 = v149;
              goto LABEL_313;
            }
            do
            {
LABEL_315:
              if (++v144 == (uint64_t *)v145) {
                goto LABEL_327;
              }
              uint64_t v146 = *v144;
            }
            while ((*v144 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(void *)(*v144 & 0xFFFFFFFFFFFFFFF8));
            if (v144 == (uint64_t *)v145) {
              goto LABEL_327;
            }
            continue;
          }
          break;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v282, v158);
        unsigned int v158 = v284;
        unsigned int v153 = v283;
        goto LABEL_294;
      }
LABEL_328:
      v138 += 8;
      if (v138 != v281) {
        continue;
      }
      break;
    }
    unsigned int v135 = v290;
    signed int v20 = __dst + 69;
    unsigned int v14 = __dst;
LABEL_330:
    if (v135) {
      continue;
    }
    break;
  }
  if (v289 != v291) {
    free(v289);
  }
  uint64_t v168 = v14[51];
  unsigned int v169 = (int8x16_t *)(v168 + 8 * v270);
  uint64_t v170 = (int8x16_t *)(v168 + 8 * v274);
  unint64_t v171 = &v170->u64[1];
  BOOL v289 = (uint64_t *)&v282;
  int v172 = v284 - 1;
  uint64_t v173 = 8 * HIDWORD(v284);
  while (1)
  {
    uint64_t v174 = v169;
    unsigned int v169 = (int8x16_t *)((char *)v169 + 8);
    if (v174 == v170) {
      break;
    }
    uint64_t v175 = v169->i64[0];
    if (v283 == v282)
    {
      BOOL v176 = v283;
      unsigned int v177 = &v283[8 * HIDWORD(v284)];
      if (HIDWORD(v284))
      {
        unint64_t v178 = 0;
        while (*(void *)&v283[v178] != v175)
        {
          v178 += 8;
          if (v173 == v178)
          {
            BOOL v176 = v283;
            unsigned int v177 = &v283[8 * HIDWORD(v284)];
            goto LABEL_361;
          }
        }
        unsigned int v177 = &v283[v178];
        BOOL v176 = v283;
      }
    }
    else
    {
      unsigned int v179 = v172 & ((v175 >> 4) ^ (v175 >> 9));
      unsigned int v177 = &v283[8 * v179];
      uint64_t v180 = *(void *)v177;
      if (*(void *)v177 == -1)
      {
        BOOL v181 = 0;
LABEL_355:
        if (v181) {
          unsigned int v177 = v181;
        }
        uint64_t v185 = *(void *)v177;
      }
      else
      {
        BOOL v181 = 0;
        int v182 = 1;
        while (v180 != v175)
        {
          if (v181) {
            BOOL v183 = 0;
          }
          else {
            BOOL v183 = v180 == -2;
          }
          if (v183) {
            BOOL v181 = v177;
          }
          unsigned int v184 = v179 + v182++;
          unsigned int v179 = v184 & v172;
          unsigned int v177 = &v283[8 * (v184 & v172)];
          uint64_t v180 = *(void *)v177;
          if (*(void *)v177 == -1) {
            goto LABEL_355;
          }
        }
        uint64_t v185 = v169->i64[0];
      }
      if (v185 != v175) {
        unsigned int v177 = &v283[8 * v284];
      }
      BOOL v176 = v282;
    }
LABEL_361:
    if (v283 == v176) {
      int v186 = HIDWORD(v284);
    }
    else {
      int v186 = v284;
    }
    if (v177 == &v283[8 * v186])
    {
      while (1)
      {
        if (v169 == (int8x16_t *)--v171) {
          goto LABEL_408;
        }
        unint64_t v187 = *v171;
        if (v283 == v282)
        {
          BOOL v188 = v283;
          unsigned int v189 = &v283[8 * HIDWORD(v284)];
          if (HIDWORD(v284))
          {
            unint64_t v190 = 0;
            while (*(void *)&v283[v190] != v187)
            {
              v190 += 8;
              if (v173 == v190)
              {
                BOOL v188 = v283;
                unsigned int v189 = &v283[8 * HIDWORD(v284)];
                goto LABEL_392;
              }
            }
            unsigned int v189 = &v283[v190];
            BOOL v188 = v283;
          }
        }
        else
        {
          unsigned int v191 = v172 & ((v187 >> 4) ^ (v187 >> 9));
          unsigned int v189 = &v283[8 * v191];
          uint64_t v192 = *(void *)v189;
          if (*(void *)v189 == -1)
          {
            unint64_t v193 = 0;
LABEL_386:
            if (v193) {
              unsigned int v189 = v193;
            }
            unint64_t v197 = *(void *)v189;
          }
          else
          {
            unint64_t v193 = 0;
            int v194 = 1;
            while (v192 != v187)
            {
              if (v193) {
                BOOL v195 = 0;
              }
              else {
                BOOL v195 = v192 == -2;
              }
              if (v195) {
                unint64_t v193 = v189;
              }
              unsigned int v196 = v191 + v194++;
              unsigned int v191 = v196 & v172;
              unsigned int v189 = &v283[8 * (v196 & v172)];
              uint64_t v192 = *(void *)v189;
              if (*(void *)v189 == -1) {
                goto LABEL_386;
              }
            }
            unint64_t v197 = *v171;
          }
          if (v197 != v187) {
            unsigned int v189 = &v283[8 * v284];
          }
          BOOL v188 = v282;
        }
LABEL_392:
        if (v283 == v188) {
          int v198 = HIDWORD(v284);
        }
        else {
          int v198 = v284;
        }
        if (v189 != &v283[8 * v198])
        {
          if ((char *)v171 - (char *)v169 < 17)
          {
LABEL_403:
            uint64_t v202 = 0;
            unint64_t v199 = 0;
          }
          else
          {
            if ((((char *)v171 - (char *)v169) >> 3) + 1 >= 0xFFFFFFFFFFFFFFFLL) {
              unint64_t v199 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v199 = (((char *)v171 - (char *)v169) >> 3) + 1;
            }
            int v200 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
            while (1)
            {
              uint64_t v201 = (uint64_t *)operator new(8 * v199, v200);
              if (v201) {
                break;
              }
              BOOL v93 = v199 > 1;
              v199 >>= 1;
              if (!v93) {
                goto LABEL_403;
              }
            }
            uint64_t v202 = v201;
          }
          unsigned int v169 = (int8x16_t *)sub_1CC0572E0(v169, v171, &v289, (((char *)v171 - (char *)v169) >> 3) + 1, v202, v199);
          if (v202) {
            operator delete(v202);
          }
          signed int v20 = __dst + 69;
          unsigned int v14 = __dst;
          goto LABEL_408;
        }
      }
    }
  }
LABEL_408:
  uint64_t v116 = v271;
  int v203 = v274 - (v269 >> 3);
  uint64_t v204 = v271;
  do
  {
    BOOL v288 = *(void **)(v14[51] + 8 * v204 + 8);
    BOOL v289 = 0;
    int v205 = sub_1CBFA3AF4(v20, &v288, &v289);
    uint64_t v206 = v289;
    if (!v205) {
      uint64_t v206 = (uint64_t *)(v14[69] + 16 * *((unsigned int *)v14 + 142));
    }
    *((_DWORD *)v206 + 2) = ++v204;
    --v203;
  }
  while (v203);
  uint64_t v113 = v14[51];
  int v99 = v282;
  uint64_t v98 = v283;
  uint64_t v122 = (int)(((uint64_t)&v169->i64[-1] - v113) >> 3);
LABEL_413:
  uint64_t v111 = (uint64_t *)(v113 + 8 * v116);
  unsigned int v112 = (uint64_t *)(v113 + 8 * v122);
LABEL_414:
  if (v98 != v99) {
    free(v98);
  }
  uint64_t v207 = (char *)v286;
  int v282 = (char *)v286;
  BOOL v283 = (char *)v286;
  uint64_t v284 = 16;
  int v285 = 0;
  __dsta = v111;
  if (v111 == v112)
  {
    unsigned int v208 = 0;
LABEL_418:
    HIDWORD(v284) = v208 + 1;
    *(void *)uint64_t v207 = this;
    goto LABEL_482;
  }
  unsigned int v209 = 16;
  uint64_t v210 = (char *)v286;
  while (2)
  {
    uint64_t v211 = *v111;
    uint64_t v212 = HIDWORD(v284);
    if (v210 != v207)
    {
LABEL_430:
      if (3 * v209 <= 4 * (HIDWORD(v284) - v285))
      {
        if (v209 >= 0x40) {
          v209 *= 2;
        }
        else {
          unsigned int v209 = 128;
        }
      }
      else if (v209 - HIDWORD(v284) >= v209 >> 3)
      {
        goto LABEL_432;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v282, v209);
      unsigned int v209 = v284;
      uint64_t v210 = v283;
LABEL_432:
      unsigned int v216 = v209 - 1;
      unsigned int v217 = (v209 - 1) & ((v211 >> 4) ^ (v211 >> 9));
      int v218 = &v210[8 * v217];
      uint64_t v219 = *(void *)v218;
      if (*(void *)v218 == -1)
      {
        unint64_t v220 = 0;
LABEL_444:
        if (v220) {
          uint64_t v224 = v220;
        }
        else {
          uint64_t v224 = (uint64_t *)v218;
        }
        if (*v224 != v211)
        {
          if (*v224 == -2) {
            --v285;
          }
          else {
            ++HIDWORD(v284);
          }
          *uint64_t v224 = v211;
        }
      }
      else
      {
        unint64_t v220 = 0;
        int v221 = 1;
        while (v219 != v211)
        {
          if (v220) {
            BOOL v222 = 0;
          }
          else {
            BOOL v222 = v219 == -2;
          }
          if (v222) {
            unint64_t v220 = (uint64_t *)v218;
          }
          unsigned int v223 = v217 + v221++;
          unsigned int v217 = v223 & v216;
          int v218 = &v210[8 * (v223 & v216)];
          uint64_t v219 = *(void *)v218;
          if (*(void *)v218 == -1) {
            goto LABEL_444;
          }
        }
      }
      goto LABEL_451;
    }
    if (!HIDWORD(v284))
    {
LABEL_428:
      if (HIDWORD(v284) < v209)
      {
        ++HIDWORD(v284);
        *(void *)&v207[8 * v212] = v211;
        goto LABEL_451;
      }
      goto LABEL_430;
    }
    unint64_t v213 = 0;
    uint64_t v214 = 8 * HIDWORD(v284);
    unint64_t v215 = v207;
    while (*(void *)v215 != v211)
    {
      if (*(void *)v215 == -2) {
        unint64_t v213 = v215;
      }
      v215 += 8;
      v214 -= 8;
      if (!v214)
      {
        if (!v213) {
          goto LABEL_428;
        }
        *unint64_t v213 = v211;
        --v285;
        break;
      }
    }
LABEL_451:
    uint64_t v207 = v282;
    uint64_t v210 = v283;
    if (++v111 != v112) {
      continue;
    }
    break;
  }
  unsigned int v225 = HIDWORD(v284);
  if (v283 != v282)
  {
    uint64_t v111 = __dsta;
    goto LABEL_461;
  }
  uint64_t v111 = __dsta;
  if (!HIDWORD(v284))
  {
    unsigned int v208 = 0;
LABEL_524:
    if (v208 < v209)
    {
      uint64_t v207 = &v282[8 * HIDWORD(v284)];
      goto LABEL_418;
    }
    unsigned int v225 = v208;
LABEL_461:
    if (3 * v209 <= 4 * (v225 - v285))
    {
      if (v209 >= 0x40) {
        v209 *= 2;
      }
      else {
        unsigned int v209 = 128;
      }
    }
    else if (v209 - v225 >= v209 >> 3)
    {
      goto LABEL_463;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v282, v209);
    unsigned int v209 = v284;
    uint64_t v210 = v283;
LABEL_463:
    unsigned int v226 = v209 - 1;
    unsigned int v227 = (v209 - 1) & ((this >> 4) ^ (this >> 9));
    int v228 = (llvm::LazyCallGraph::RefSCC **)&v210[8 * v227];
    int v229 = *v228;
    if (*v228 == (llvm::LazyCallGraph::RefSCC *)-1)
    {
      unsigned int v230 = 0;
LABEL_475:
      if (v230) {
        uint64_t v234 = v230;
      }
      else {
        uint64_t v234 = v228;
      }
      if (*v234 != this)
      {
        if (*v234 == (llvm::LazyCallGraph::RefSCC *)-2) {
          --v285;
        }
        else {
          ++HIDWORD(v284);
        }
        *uint64_t v234 = this;
      }
    }
    else
    {
      unsigned int v230 = 0;
      int v231 = 1;
      while (v229 != this)
      {
        if (v230) {
          BOOL v232 = 0;
        }
        else {
          BOOL v232 = v229 == (llvm::LazyCallGraph::RefSCC *)-2;
        }
        if (v232) {
          unsigned int v230 = v228;
        }
        unsigned int v233 = v227 + v231++;
        unsigned int v227 = v233 & v226;
        int v228 = (llvm::LazyCallGraph::RefSCC **)&v210[8 * (v233 & v226)];
        int v229 = *v228;
        if (*v228 == (llvm::LazyCallGraph::RefSCC *)-1) {
          goto LABEL_475;
        }
      }
    }
    goto LABEL_482;
  }
  int v266 = 0;
  uint64_t v267 = 8 * HIDWORD(v284);
  BOOL v268 = v282;
  while ((llvm::LazyCallGraph::RefSCC *)*v268 != this)
  {
    if (*v268 == -2) {
      int v266 = v268;
    }
    ++v268;
    v267 -= 8;
    if (!v267)
    {
      unsigned int v208 = HIDWORD(v284);
      if (!v266) {
        goto LABEL_524;
      }
      *int v266 = this;
      --v285;
      break;
    }
  }
LABEL_482:
  BOOL v289 = v291;
  uint64_t v290 = 0x1000000000;
  if (v111 == v112)
  {
    int v235 = 0;
  }
  else
  {
    int v235 = 0;
    int v278 = v112;
    do
    {
      uint64_t v239 = *v111;
      uint64_t v240 = (void *)(*v111 + 8);
      unsigned int v241 = (void **)*v240;
      uint64_t v242 = *(unsigned int *)(*v111 + 16);
      if (v242)
      {
        uint64_t v243 = &v241[v242];
        do
        {
          int v244 = *v241;
          *int v244 = this;
          BOOL v288 = v244;
          *((_DWORD *)sub_1CD49A8AC((_DWORD *)this + 14, (uint64_t *)&v288) + 2) = v235;
          uint64_t v245 = *((unsigned int *)v244 + 4);
          if (v245)
          {
            int64_t v246 = (void *)v244[1];
            uint64_t v247 = 8 * v245;
            do
            {
              int v248 = (void *)*v246++;
              uint64_t v249 = *(void *)this + 288;
              BOOL v288 = v248;
              sub_1CD49ABC4(v249, (uint64_t *)&v288)[1] = v244;
              v247 -= 8;
            }
            while (v247);
          }
          ++v235;
          ++v241;
        }
        while (v241 != v243);
      }
      if (v290) {
        sub_1CD47792C((unsigned int *)&v289, *(unsigned char **)(v239 + 8), (unsigned char *)(*(void *)(v239 + 8) + 8 * *(unsigned int *)(v239 + 16)));
      }
      else {
        sub_1CC057B60((uint64_t)&v289, (uint64_t)v240);
      }
      unsigned int v112 = v278;
      *(_DWORD *)(v239 + 16) = 0;
      unint64_t v250 = *((unsigned int *)v279 + 2);
      if (v250 >= *((unsigned int *)v279 + 3)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*v279 + 8 * v250) = v239;
      ++*((_DWORD *)v279 + 2);
      ++v111;
    }
    while (v111 != v278);
  }
  unint64_t v236 = (unsigned char *)*((void *)this + 1);
  uint64_t v237 = *((unsigned int *)this + 4);
  if (v237)
  {
    uint64_t v251 = 8 * v237;
    do
    {
      uint64_t v252 = *(void **)v236;
      v236 += 8;
      BOOL v288 = v252;
      *((_DWORD *)sub_1CD49A8AC((_DWORD *)this + 14, (uint64_t *)&v288) + 2) = v235++;
      v251 -= 8;
    }
    while (v251);
    unint64_t v236 = (unsigned char *)*((void *)this + 1);
    uint64_t v238 = *((unsigned int *)this + 4);
  }
  else
  {
    uint64_t v238 = 0;
  }
  sub_1CD47792C((unsigned int *)&v289, v236, &v236[8 * v238]);
  sub_1CC057B60((uint64_t)this + 8, (uint64_t)&v289);
  int v253 = __dsta;
  if (__dsta != v112)
  {
    int v254 = __dsta;
    do
    {
      uint64_t v255 = *v254;
      uint64_t v256 = *(void *)this;
      BOOL v288 = 0;
      if (sub_1CBF8BDAC(*(void *)(v256 + 552), *(_DWORD *)(v256 + 568), v255, &v288))
      {
        *BOOL v288 = -8192;
        *(int32x2_t *)(v256 + 560) = vadd_s32(*(int32x2_t *)(v256 + 560), (int32x2_t)0x1FFFFFFFFLL);
      }
      ++v254;
    }
    while (v254 != v112);
  }
  uint64_t v257 = *(void *)this;
  uint64_t v258 = *(void *)(*(void *)this + 408);
  uint64_t v259 = (uint64_t *)(v258 + 8 * *(unsigned int *)(*(void *)this + 416));
  uint64_t v260 = *(void *)this;
  uint64_t v261 = v258;
  int64_t v262 = (char *)v259 - (char *)v112;
  if (v259 != v112)
  {
    memmove(__dsta, v112, (char *)v259 - (char *)v112);
    uint64_t v261 = *(void *)(v257 + 408);
    uint64_t v260 = *(void *)this;
    uint64_t v258 = *(void *)(*(void *)this + 408);
  }
  *(_DWORD *)(v257 + 416) = ((unint64_t)__dsta + v262 - v261) >> 3;
  uint64_t v263 = (uint64_t *)(v258 + 8 * *(unsigned int *)(v260 + 416));
  if (v263 != __dsta)
  {
    do
    {
      unsigned int v264 = (void *)*v253++;
      BOOL v288 = v264;
      unint64_t v265 = sub_1CC057A3C(*(void *)this + 552, (uint64_t *)&v288);
      *((_DWORD *)v265 + 2) -= (unint64_t)((char *)v112 - (char *)__dsta) >> 3;
    }
    while (v253 != v263);
  }
  llvm::LazyCallGraph::EdgeSequence::insertEdgeInternal((uint64_t)a2 + 24, (uint64_t)a3, 0);
  if (v289 != v291) {
    free(v289);
  }
  if (v283 != v282) {
    free(v283);
  }
}

BOOL llvm::LazyCallGraph::RefSCC::removeOutgoingEdge(llvm::LazyCallGraph::RefSCC *this, llvm::LazyCallGraph::Node *a2, llvm::LazyCallGraph::Node *a3)
{
  return llvm::LazyCallGraph::EdgeSequence::removeEdgeInternal((uint64_t)a2 + 24, (uint64_t)a3);
}

void llvm::LazyCallGraph::RefSCC::removeInternalRefEdge(uint64_t *a1@<X0>, void *a2@<X1>, void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v105[8] = *MEMORY[0x1E4F143B8];
  *(void *)a5 = a5 + 16;
  *(void *)(a5 + 8) = 0x100000000;
  if (!a4) {
    return;
  }
  uint64_t v5 = a3;
  uint64_t v9 = 8 * a4;
  uint64_t v10 = 8 * a4;
  uint64_t v11 = (uint64_t *)a3;
  do
  {
    uint64_t v12 = *v11++;
    llvm::LazyCallGraph::EdgeSequence::removeEdgeInternal((uint64_t)a2 + 24, v12);
    v10 -= 8;
  }
  while (v10);
  uint64_t v13 = v9;
  unsigned int v14 = v5;
  uint64_t v15 = a2;
  while (*v14 == v15)
  {
    ++v14;
    v13 -= 8;
    uint64_t v15 = a2;
    if (!v13) {
      return;
    }
  }
  uint64_t v16 = (uint64_t *)(*a1 + 288);
  int v100 = a2;
  int v103 = 0;
  uint64_t v17 = 0;
  if (sub_1CBFA3AF4(v16, &v100, &v103)) {
    uint64_t v17 = v103[1];
  }
  uint64_t v18 = a1;
  while (1)
  {
    uint64_t v19 = (uint64_t *)(*v18 + 288);
    int v100 = *v5;
    int v103 = 0;
    int v20 = sub_1CBFA3AF4(v19, &v100, &v103);
    uint64_t v21 = 0;
    if (v20) {
      uint64_t v21 = v103[1];
    }
    if (v21 != v17) {
      break;
    }
    ++v5;
    v9 -= 8;
    uint64_t v18 = a1;
    if (!v9) {
      return;
    }
  }
  int v103 = v105;
  uint64_t v104 = 0x800000000;
  uint64_t v22 = *((unsigned int *)a1 + 4);
  if (v22)
  {
    uint64_t v23 = a1[1];
    uint64_t v24 = v23 + 8 * v22;
    do
    {
      uint64_t v25 = *(unsigned char **)(*(void *)v23 + 8);
      uint64_t v26 = *(unsigned int *)(*(void *)v23 + 16);
      if (v26)
      {
        uint64_t v27 = 8 * v26;
        uint64_t v28 = *(uint64_t **)(*(void *)v23 + 8);
        do
        {
          uint64_t v29 = *v28++;
          *(void *)(v29 + 16) = 0;
          v27 -= 8;
        }
        while (v27);
      }
      sub_1CD47792C((unsigned int *)&v103, v25, &v25[8 * v26]);
      v23 += 8;
    }
    while (v23 != v24);
    LODWORD(v22) = v104;
  }
  int v30 = 0;
  int v100 = v102;
  uint64_t v101 = 0x400000000;
  uint64_t v97 = v99;
  uint64_t v98 = 0x400000000;
  uint64_t v92 = (int)v22;
  while (1)
  {
    uint64_t v31 = v103[v22 - 1];
    LODWORD(v22) = v22 - 1;
    LODWORD(v104) = v22;
    if (!*(_DWORD *)(v31 + 16)) {
      break;
    }
LABEL_26:
    if (!v22)
    {
      if (v30 >= 1)
      {
        for (int i = 0; i != v30; ++i)
        {
          uint64_t v64 = *a1;
          uint64_t v65 = (void *)sub_1CB906F34((uint64_t *)(*a1 + 312), 128, 3);
          uint64_t v66 = 0;
          void *v65 = v64;
          v65[1] = v65 + 3;
          v65[2] = 0x400000000;
          v65[7] = 1;
          do
          {
            v65[v66 + 8] = -4096;
            v66 += 2;
          }
          while (v66 != 8);
          unint64_t v67 = *(unsigned int *)(a5 + 8);
          if (v67 >= *(unsigned int *)(a5 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a5 + 8 * v67) = v65;
          ++*(_DWORD *)(a5 + 8);
        }
      }
      uint64_t v68 = *a1;
      unint64_t v69 = (uint64_t *)(*a1 + 552);
      int v96 = a1;
      uint64_t v93 = 0;
      if (sub_1CBFA3AF4(v69, &v96, &v93)) {
        uint64_t v70 = v93;
      }
      else {
        uint64_t v70 = *(void *)(v68 + 552) + 16 * *(unsigned int *)(v68 + 568);
      }
      int v71 = *(_DWORD *)(v70 + 8);
      uint64_t v72 = *a1;
      uint64_t v73 = *(void *)(*a1 + 408);
      uint64_t v74 = v73 + 8 * v71;
      uint64_t v75 = *(unsigned int *)(*a1 + 416);
      uint64_t v76 = v73 + 8 * v75;
      if (v76 == v74 + 8)
      {
        uint64_t v77 = *a1;
      }
      else
      {
        memmove((void *)v74, (const void *)(v74 + 8), v76 - (v74 + 8));
        LODWORD(v75) = *(_DWORD *)(v72 + 416);
        uint64_t v77 = *a1;
        uint64_t v73 = *(void *)(*a1 + 408);
      }
      *(_DWORD *)(v72 + 416) = v75 - 1;
      sub_1CD4832F4((unsigned int *)(v77 + 408), v73 + 8 * v71, *(uint64_t **)a5, (uint64_t *)(*(void *)a5 + 8 * *(unsigned int *)(a5 + 8)));
      uint64_t v78 = *(int *)(*a1 + 416);
      if (v71 != v78)
      {
        uint64_t v79 = v78 - v71;
        uint64_t v80 = (uint64_t)v71 << 32;
        do
        {
          *((_DWORD *)sub_1CC057A3C(*a1 + 552, (uint64_t *)(*(void *)(*a1 + 408) + (v80 >> 29))) + 2) = v71;
          v80 += 0x100000000;
          ++v71;
          --v79;
        }
        while (v79);
      }
      uint64_t v81 = *((unsigned int *)a1 + 4);
      if (v81)
      {
        unsigned int v82 = (uint64_t *)a1[1];
        uint64_t v83 = &v82[v81];
        do
        {
          uint64_t v84 = *v82;
          uint64_t v93 = v84;
          int v85 = *(uint64_t **)(v84 + 8);
          uint64_t v86 = *(int *)(*v85 + 20);
          uint64_t v87 = *(unsigned int *)(v84 + 16);
          if (v87)
          {
            uint64_t v88 = 8 * v87;
            do
            {
              uint64_t v89 = *v85++;
              *(_DWORD *)(v89 + 20) = -1;
              v88 -= 8;
            }
            while (v88);
          }
          uint64_t v90 = *(void *)(*(void *)a5 + 8 * v86);
          unint64_t v91 = *(unsigned int *)(v90 + 16);
          if (v91 >= *(unsigned int *)(v90 + 20)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v90 + 8) + 8 * v91) = v84;
          ++*(_DWORD *)(v90 + 16);
          *((_DWORD *)sub_1CD49A8AC((_DWORD *)(v90 + 56), &v93) + 2) = v91;
          *(void *)uint64_t v84 = v90;
          ++v82;
        }
        while (v82 != v83);
      }
      *a1 = 0;
      *((_DWORD *)a1 + 4) = 0;
      sub_1CC055140(a1 + 7);
      int v57 = (char *)v97;
      goto LABEL_75;
    }
  }
  *(void *)(v31 + 16) = 0x100000001;
  unint64_t v32 = *(void **)(v31 + 24);
  uint64_t v33 = *(unsigned int *)(v31 + 32);
  uint64_t v34 = &v32[v33];
  if (v33)
  {
    uint64_t v35 = 8 * v33;
    while ((*v32 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(void *)(*v32 & 0xFFFFFFFFFFFFFFF8))
    {
      ++v32;
      v35 -= 8;
      if (!v35)
      {
        unint64_t v32 = v34;
        break;
      }
    }
  }
  uint64_t v93 = v31;
  uint64_t v94 = v32;
  uint64_t v95 = v34;
  unint64_t v36 = sub_1CD46398C((uint64_t)&v100, (unint64_t)&v93);
  uint64_t v37 = (char *)v100 + 24 * v101;
  long long v38 = *(_OWORD *)v36;
  *((void *)v37 + 2) = *(void *)(v36 + 16);
  *(_OWORD *)uint64_t v37 = v38;
  unsigned int v39 = v101 + 1;
  LODWORD(v101) = v101 + 1;
  uint64_t v40 = 2;
  while (1)
  {
    uint64_t v41 = (char *)v100 + 24 * v39;
    uint64_t v43 = *((void *)v41 - 3);
    uint64_t v42 = (void *)*((void *)v41 - 2);
    unsigned int v44 = (void *)*((void *)v41 - 1);
    LODWORD(v101) = v39 - 1;
    uint64_t v45 = *(void *)(v43 + 24) + 8 * *(unsigned int *)(v43 + 32);
    if (v42 != (void *)v45)
    {
      uint64_t v46 = v40;
      do
      {
        unint64_t v47 = *v42 & 0xFFFFFFFFFFFFFFF8;
        int v48 = *(_DWORD *)(v47 + 16);
        if (v48)
        {
          if (v48 == -1)
          {
            while (++v42 != v44)
            {
              if ((*v42 & 0xFFFFFFFFFFFFFFF8) != 0 && *(void *)(*v42 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_57;
              }
            }
          }
          else
          {
            int v54 = *(_DWORD *)(v47 + 20);
            if ((v54 & 0x80000000) == 0 && v54 < *(_DWORD *)(v43 + 20)) {
              *(_DWORD *)(v43 + 20) = v54;
            }
            while (++v42 != v44)
            {
              if ((*v42 & 0xFFFFFFFFFFFFFFF8) != 0 && *(void *)(*v42 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_57;
              }
            }
          }
          uint64_t v42 = v44;
LABEL_57:
          uint64_t v40 = v46;
        }
        else
        {
          uint64_t v93 = v43;
          uint64_t v94 = v42;
          uint64_t v95 = v44;
          unint64_t v49 = sub_1CD46398C((uint64_t)&v100, (unint64_t)&v93);
          unsigned int v50 = (char *)v100 + 24 * v101;
          long long v51 = *(_OWORD *)v49;
          *((void *)v50 + 2) = *(void *)(v49 + 16);
          *(_OWORD *)unsigned int v50 = v51;
          LODWORD(v101) = v101 + 1;
          uint64_t v40 = (v46 + 1);
          *(_DWORD *)(v47 + 16) = v46;
          *(_DWORD *)(v47 + 20) = v46;
          uint64_t v42 = *(void **)(v47 + 24);
          uint64_t v52 = *(unsigned int *)(v47 + 32);
          unsigned int v44 = &v42[v52];
          if (v52)
          {
            uint64_t v53 = 8 * v52;
            while ((*v42 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(void *)(*v42 & 0xFFFFFFFFFFFFFFF8))
            {
              ++v42;
              v53 -= 8;
              if (!v53)
              {
                uint64_t v43 = v47;
                goto LABEL_61;
              }
            }
          }
          uint64_t v43 = v47;
          uint64_t v45 = (uint64_t)v44;
        }
        uint64_t v46 = v40;
      }
      while (v42 != (void *)v45);
    }
LABEL_61:
    if (v98 >= (unint64_t)HIDWORD(v98)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v97 + v98) = v43;
    uint64_t v55 = (v98 + 1);
    LODWORD(v98) = v98 + 1;
    int v56 = *(_DWORD *)(v43 + 20);
    if (v56 != *(_DWORD *)(v43 + 16)) {
      goto LABEL_71;
    }
    int v57 = (char *)v97;
    uint64_t v58 = (char *)v97 + 8 * v55;
    if (v55)
    {
      uint64_t v59 = 8 * v55;
      while (1)
      {
        int v60 = &v57[v59];
        uint64_t v61 = *(void *)&v57[v59 - 8];
        if (*(_DWORD *)(v61 + 16) < v56) {
          break;
        }
        *(_DWORD *)(v61 + 16) = -1;
        *(_DWORD *)(v61 + 20) = v30;
        v59 -= 8;
        if (!v59)
        {
          int v60 = v57;
          break;
        }
      }
    }
    else
    {
      int v60 = (char *)v97;
    }
    if (v92 == (v58 - v60) >> 3) {
      break;
    }
    ++v30;
    LODWORD(v98) = (unint64_t)(v60 - v57) >> 3;
LABEL_71:
    unsigned int v39 = v101;
    if (!v101)
    {
      LODWORD(v22) = v104;
      goto LABEL_26;
    }
  }
  for (; v60 != v58; *(_DWORD *)(v62 + 20) = -1)
  {
    uint64_t v62 = *(void *)v60;
    v60 += 8;
  }
LABEL_75:
  if (v57 != v99) {
    free(v57);
  }
  if (v100 != v102) {
    free(v100);
  }
  if (v103 != v105) {
    free(v103);
  }
}

void *sub_1CC055140(void *result)
{
  int v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if (v1)
    {
      uint64_t v2 = result + 1;
      uint64_t v3 = result + 9;
    }
    else
    {
      uint64_t v5 = *((unsigned int *)result + 4);
      if (((2 * v1) & 0xFFFFFFFC) < v5)
      {
        if (v5 > 0x40) {
          return sub_1CD463F6C(result);
        }
      }
      else if (!v5)
      {
        int v4 = 0;
LABEL_6:
        *(_DWORD *)uint64_t result = v4;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      uint64_t v2 = (void *)result[1];
      uint64_t v3 = &v2[2 * v5];
    }
    do
    {
      void *v2 = -4096;
      v2 += 2;
    }
    while (v2 != v3);
    int v4 = *(_DWORD *)result & 1;
    goto LABEL_6;
  }
  return result;
}

uint64_t llvm::LazyCallGraph::RefSCC::insertTrivialCallEdge(llvm::LazyCallGraph::RefSCC *this, llvm::LazyCallGraph::Node *a2, uint64_t a3)
{
  uint64_t v5 = (void *)((char *)a2 + 24);
  int v6 = *((_DWORD *)a2 + 8);
  uint64_t v11 = a3;
  int v12 = v6;
  uint64_t result = sub_1CC0566DC((uint64_t)a2 + 72, &v11, &v12, (uint64_t)&v13);
  if (v14)
  {
    LOBYTE(v11) = 1;
    uint64_t v8 = *((unsigned int *)a2 + 8);
    if (v8 >= *((_DWORD *)a2 + 9))
    {
      return sub_1CD49AC2C((uint64_t)v5, a3, &v11);
    }
    else
    {
      *(void *)(*((void *)a2 + 3) + 8 * v8) = a3 | 4;
      *((_DWORD *)a2 + 8) = v8 + 1;
    }
  }
  else
  {
    uint64_t v9 = *(int *)(v13 + 8);
    uint64_t v10 = *(void *)(*v5 + 8 * v9);
    if ((v10 & 4) == 0) {
      *(void *)(*v5 + 8 * v9) = v10 | 4;
    }
  }
  return result;
}

uint64_t llvm::LazyCallGraph::insertEdge(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return llvm::LazyCallGraph::EdgeSequence::insertEdgeInternal(a2 + 24, a3, a4);
}

BOOL llvm::LazyCallGraph::removeEdge(llvm::LazyCallGraph *this, llvm::LazyCallGraph::Node *a2, llvm::LazyCallGraph::Node *a3)
{
  return llvm::LazyCallGraph::EdgeSequence::removeEdgeInternal((uint64_t)a2 + 24, (uint64_t)a3);
}

uint64_t llvm::LazyCallGraph::removeDeadFunction(llvm::LazyCallGraph *this, llvm::Function *a2)
{
  uint64_t v10 = a2;
  uint64_t v11 = 0;
  uint64_t result = sub_1CB915048((uint64_t *)this + 12, &v10, &v11);
  int v4 = v11;
  if ((result & 1) == 0) {
    int v4 = (void *)(*((void *)this + 12) + 16 * *((unsigned int *)this + 28));
  }
  if (v4 != (void *)(*((void *)this + 12) + 16 * *((unsigned int *)this + 28)))
  {
    uint64_t v5 = v4[1];
    *int v4 = -8192;
    *((int32x2_t *)this + 13) = vadd_s32(*(int32x2_t *)((char *)this + 104), (int32x2_t)0x1FFFFFFFFLL);
    llvm::LazyCallGraph::EdgeSequence::removeEdgeInternal((uint64_t)this + 120, v5);
    uint64_t v10 = (llvm::Function *)v5;
    uint64_t v11 = 0;
    if (sub_1CBFA3AF4((uint64_t *)this + 36, &v10, &v11)) {
      int v6 = v11;
    }
    else {
      int v6 = (void *)(*((void *)this + 36) + 16 * *((unsigned int *)this + 76));
    }
    uint64_t v7 = (uint64_t *)v6[1];
    *int v6 = -8192;
    *((int32x2_t *)this + 37) = vadd_s32(*(int32x2_t *)((char *)this + 296), (int32x2_t)0x1FFFFFFFFLL);
    uint64_t v8 = *v7;
    if (*(unsigned char *)(v5 + 96))
    {
      MEMORY[0x1D25D9CD0](*(void *)(v5 + 72), 8);
      uint64_t v9 = *(void **)(v5 + 24);
      if (v9 != (void *)(v5 + 40)) {
        free(v9);
      }
      *(unsigned char *)(v5 + 96) = 0;
    }
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    uint64_t *v7 = 0;
    *((_DWORD *)v7 + 4) = 0;
    *(_DWORD *)(v8 + 16) = 0;
    uint64_t result = (uint64_t)sub_1CC055140((void *)(v8 + 56));
    *(void *)uint64_t v8 = 0;
  }
  return result;
}

uint64_t llvm::LazyCallGraph::addSplitFunction(llvm::LazyCallGraph *this, llvm::Function *a2, llvm::Function *a3)
{
  v69[1] = *MEMORY[0x1E4F143B8];
  int v6 = (void *)sub_1CC04FE44((uint64_t)this, (uint64_t)a2);
  uint64_t v7 = (char *)this + 288;
  uint64_t v66 = 0;
  unint64_t v67 = v6;
  uint64_t v8 = 0;
  if (sub_1CBFA3AF4((uint64_t *)this + 36, &v67, &v66)) {
    uint64_t v8 = *((void *)v66 + 1);
  }
  uint64_t v65 = v8;
  uint64_t v66 = 0;
  unint64_t v67 = v6;
  if ((sub_1CBFA3AF4((uint64_t *)this + 36, &v67, &v66) & 1) != 0 && (uint64_t v9 = (unsigned int **)*((void *)v66 + 1)) != 0) {
    uint64_t v10 = *v9;
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t inited = llvm::LazyCallGraph::initNode(this, a3);
  uint64_t v12 = inited;
  uint64_t v13 = (char *)a2 + 72;
  char v14 = (char *)*((void *)a2 + 10);
  uint64_t v63 = v6;
  if (v14 == (char *)a2 + 72)
  {
LABEL_12:
    int v18 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v15 = v14 - 24;
      if (!v14) {
        uint64_t v15 = 0;
      }
      uint64_t v16 = v15 + 40;
      uint64_t v17 = (void *)*((void *)v15 + 6);
      if (v17 != v16) {
        break;
      }
      char v14 = (char *)*((void *)v14 + 1);
      if (v14 == v13) {
        goto LABEL_12;
      }
    }
    while (1)
    {
      long long v38 = v17 - 3;
      if (!v17) {
        long long v38 = 0;
      }
      unsigned int v39 = *((unsigned __int8 *)v38 + 16) - 33;
      BOOL v40 = v39 > 0x33;
      uint64_t v41 = (1 << v39) & 0x8000000000041;
      if (!v40 && v41 != 0)
      {
        uint64_t v43 = *(v17 - 7);
        if (v43)
        {
          if (!*(unsigned char *)(v43 + 16) && (llvm::Function *)v43 == a3 && *(void *)(v43 + 24) == v17[6]) {
            break;
          }
        }
      }
      uint64_t v17 = (void *)v17[1];
      unsigned int v44 = v14 - 24;
      if (!v14) {
        unsigned int v44 = 0;
      }
      uint64_t v45 = v44 + 40;
      while (v17 == v45)
      {
        char v14 = (char *)*((void *)v14 + 1);
        if (v14 == v13) {
          goto LABEL_12;
        }
        uint64_t v46 = v14 - 24;
        if (!v14) {
          uint64_t v46 = 0;
        }
        uint64_t v45 = v46 + 40;
        uint64_t v17 = (void *)*((void *)v46 + 6);
      }
      if (v14 == v13) {
        goto LABEL_12;
      }
    }
    int v18 = 1;
  }
  uint64_t v64 = 0;
  uint64_t v19 = *(unsigned int *)(inited + 32);
  if (v19)
  {
    uint64_t v25 = 8 * v19;
    int v20 = *(uint64_t **)(inited + 24);
    while ((*v20 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(void *)(*v20 & 0xFFFFFFFFFFFFFFF8))
    {
      ++v20;
      v25 -= 8;
      if (!v25) {
        goto LABEL_30;
      }
    }
  }
  else
  {
    int v20 = *(uint64_t **)(inited + 24);
  }
  uint64_t v21 = *(void *)(inited + 24) + 8 * v19;
  if (v20 != (uint64_t *)v21)
  {
    uint64_t v22 = *v20;
LABEL_17:
    if ((v18 & ((v22 & 4) != 0)) == 1)
    {
      uint64_t v66 = 0;
      unint64_t v67 = (void *)(v22 & 0xFFFFFFFFFFFFFFF8);
      int v23 = sub_1CBFA3AF4((uint64_t *)this + 36, &v67, &v66);
      uint64_t v24 = 0;
      if (v23) {
        uint64_t v24 = *((void *)v66 + 1);
      }
      if (v24 == v8)
      {
        uint64_t v64 = (void *)v8;
        uint64_t v59 = *(unsigned int *)(v8 + 16);
        if (v59 >= *(_DWORD *)(v8 + 20)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v8 + 8) + 8 * v59) = v12;
        ++*(_DWORD *)(v8 + 16);
        goto LABEL_82;
      }
    }
    while (++v20 != (uint64_t *)v21)
    {
      uint64_t v22 = *v20;
      if ((*v20 & 0xFFFFFFFFFFFFFFF8) != 0 && *(void *)(*v20 & 0xFFFFFFFFFFFFFFF8))
      {
        if (v20 != (uint64_t *)v21) {
          goto LABEL_17;
        }
        break;
      }
    }
  }
LABEL_30:
  uint64_t v26 = *(unsigned int *)(v12 + 32);
  if (v26)
  {
    uint64_t v31 = 8 * v26;
    uint64_t v27 = *(uint64_t **)(v12 + 24);
    while ((*v27 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(void *)(*v27 & 0xFFFFFFFFFFFFFFF8))
    {
      ++v27;
      v31 -= 8;
      if (!v31) {
        goto LABEL_48;
      }
    }
  }
  else
  {
    uint64_t v27 = *(uint64_t **)(v12 + 24);
  }
  uint64_t v28 = *(void *)(v12 + 24) + 8 * v26;
  if (v27 != (uint64_t *)v28)
  {
    uint64_t v29 = *v27;
LABEL_34:
    uint64_t v66 = 0;
    unint64_t v67 = (void *)(v29 & 0xFFFFFFFFFFFFFFF8);
    if (sub_1CBFA3AF4((uint64_t *)this + 36, &v67, &v66))
    {
      int v30 = (unsigned int *)*((void *)v66 + 1);
      if (v30) {
        int v30 = *(unsigned int **)v30;
      }
    }
    else
    {
      int v30 = 0;
    }
    if (v30 == v10)
    {
      unint64_t v67 = v69;
      v69[0] = v12;
      uint64_t v68 = 0x100000001;
      int v57 = sub_1CD499848((uint64_t)this, (uint64_t)v10, (uint64_t)&v67);
      uint64_t v64 = v57;
      if (v67 != v69) {
        free(v67);
      }
      if (v18)
      {
        signed int v58 = *((_DWORD *)sub_1CD49A8AC(v10 + 14, &v65) + 2);
        int v57 = v64;
      }
      else
      {
        signed int v58 = v10[14] >> 1;
      }
      uint64_t v60 = *((void *)v10 + 1) + 8 * v58;
      unint64_t v67 = v57;
      sub_1CD49ACAC(v10 + 2, v60, &v67);
      signed int v61 = v10[4];
      if (v58 < v61)
      {
        uint64_t v62 = 8 * v58;
        do
        {
          *((_DWORD *)sub_1CD49A8AC(v10 + 14, (uint64_t *)(*((void *)v10 + 1) + v62)) + 2) = v58++;
          v62 += 8;
        }
        while (v61 != v58);
      }
    }
    else
    {
      while (++v27 != (uint64_t *)v28)
      {
        uint64_t v29 = *v27;
        if ((*v27 & 0xFFFFFFFFFFFFFFF8) != 0 && *(void *)(*v27 & 0xFFFFFFFFFFFFFFF8))
        {
          if (v27 != (uint64_t *)v28) {
            goto LABEL_34;
          }
          break;
        }
      }
    }
  }
LABEL_48:
  if (!v64)
  {
    *((void *)this + 49) += 128;
    uint64_t v32 = *((void *)this + 39);
    if (((v32 + 7) & 0xFFFFFFFFFFFFFFF8) - v32 + 128 > *((void *)this + 40) - v32)
    {
      unsigned int v54 = *((_DWORD *)this + 84) >> 7;
      if (v54 >= 0x1E) {
        LOBYTE(v54) = 30;
      }
      uint64_t v55 = 4096 << v54;
      uint64_t v33 = operator new(4096 << v54, (std::align_val_t)8uLL);
      unsigned int v56 = *((_DWORD *)this + 84);
      if (v56 >= *((_DWORD *)this + 85)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*((void *)this + 41) + 8 * v56) = v33;
      ++*((_DWORD *)this + 84);
      *((void *)this + 40) = (char *)v33 + v55;
    }
    else
    {
      uint64_t v33 = (void *)((v32 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    *((void *)this + 39) = v33 + 16;
    *uint64_t v33 = this;
    v33[1] = v33 + 3;
    _OWORD v33[2] = 0x400000000;
    v33[7] = 1;
    for (uint64_t i = 8; i != 16; i += 2)
      v33[i] = -4096;
    unint64_t v67 = v69;
    v69[0] = v12;
    uint64_t v68 = 0x100000001;
    uint64_t v64 = sub_1CD499848((uint64_t)this, (uint64_t)v33, (uint64_t)&v67);
    if (v67 != v69) {
      free(v67);
    }
    *((_DWORD *)sub_1CD49A8AC((_DWORD *)v33 + 14, (uint64_t *)&v64) + 2) = 0;
    unsigned int v35 = *((_DWORD *)v33 + 4);
    if (v35 >= *((_DWORD *)v33 + 5)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(v33[1] + 8 * v35) = v64;
    ++*((_DWORD *)v33 + 4);
    unint64_t v36 = (char *)this + 552;
    uint64_t v66 = v10;
    unint64_t v67 = 0;
    if (sub_1CBFA3AF4((uint64_t *)this + 69, &v66, &v67)) {
      uint64_t v37 = v67;
    }
    else {
      uint64_t v37 = (_DWORD *)(*((void *)this + 69) + 16 * *((unsigned int *)this + 142));
    }
    int v47 = v37[2];
    int v48 = (void *)((char *)this + 408);
    uint64_t v49 = *((void *)this + 51) + 8 * v47;
    unint64_t v67 = v33;
    sub_1CD49ACAC((unsigned int *)this + 102, v49, &v67);
    int v50 = *((_DWORD *)this + 104);
    if (v47 < v50)
    {
      uint64_t v51 = 8 * v47;
      do
      {
        *((_DWORD *)sub_1CC057A3C((uint64_t)v36, (uint64_t *)(*v48 + v51)) + 2) = v47++;
        v51 += 8;
      }
      while (v50 != v47);
    }
  }
LABEL_82:
  uint64_t v52 = v64;
  unint64_t v67 = (void *)v12;
  sub_1CD49ABC4((uint64_t)v7, (uint64_t *)&v67)[1] = v52;
  return llvm::LazyCallGraph::EdgeSequence::insertEdgeInternal((uint64_t)v63 + 24, v12, v18);
}

void llvm::LazyCallGraph::buildSCCs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v64[48] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v6 = *(void *)(a3 + 24);
  if (v5 == v6)
  {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  else
  {
    do
    {
      uint64_t v7 = *(void *)(v5 - 8);
      v5 -= 8;
      *(void *)(v7 + 16) = 0;
    }
    while (v5 != v6);
    uint64_t v8 = *(void *)(a3 + 8);
    uint64_t v5 = *(void *)(a3 + 24);
  }
  uint64_t v62 = v64;
  uint64_t v63 = 0x1000000000;
  uint64_t v59 = v61;
  uint64_t v60 = 0x1000000000;
  if (v8 != v5)
  {
    do
    {
      uint64_t v9 = *(void *)(v8 - 8);
      uint64_t v55 = v8 - 8;
      if (!*(_DWORD *)(v9 + 16))
      {
        *(void *)(v9 + 16) = 0x100000001;
        uint64_t v10 = *(void **)(v9 + 24);
        uint64_t v11 = *(unsigned int *)(v9 + 32);
        uint64_t v12 = &v10[v11];
        if (v11)
        {
          uint64_t v13 = 8 * v11;
          while ((*v10 & 0xFFFFFFFFFFFFFFF8) == 0 || (*v10 & 4) == 0 || !*(void *)(*v10 & 0xFFFFFFFFFFFFFFF8))
          {
            ++v10;
            v13 -= 8;
            if (!v13)
            {
              uint64_t v10 = v12;
              break;
            }
          }
        }
        uint64_t v56 = v9;
        int v57 = v10;
        signed int v58 = v12;
        unint64_t v14 = sub_1CD46398C((uint64_t)&v62, (unint64_t)&v56);
        uint64_t v15 = (char *)v62 + 24 * v63;
        long long v16 = *(_OWORD *)v14;
        *((void *)v15 + 2) = *(void *)(v14 + 16);
        *(_OWORD *)uint64_t v15 = v16;
        unsigned int v17 = v63 + 1;
        LODWORD(v63) = v63 + 1;
        uint64_t v18 = 2;
        do
        {
          uint64_t v19 = (char *)v62 + 24 * v17;
          uint64_t v21 = *((void *)v19 - 3);
          int v20 = (void *)*((void *)v19 - 2);
          uint64_t v22 = (void *)*((void *)v19 - 1);
          LODWORD(v63) = v17 - 1;
          uint64_t v23 = *(void *)(v21 + 24) + 8 * *(unsigned int *)(v21 + 32);
          if (v20 != (void *)v23)
          {
            uint64_t v24 = v18;
            do
            {
              unint64_t v25 = *v20 & 0xFFFFFFFFFFFFFFF8;
              int v26 = *(_DWORD *)(v25 + 16);
              if (v26)
              {
                if (v26 == -1)
                {
                  while (++v20 != v22)
                  {
                    if ((*v20 & 0xFFFFFFFFFFFFFFF8) != 0
                      && (*v20 & 4) != 0
                      && *(void *)(*v20 & 0xFFFFFFFFFFFFFFF8))
                    {
                      goto LABEL_41;
                    }
                  }
                }
                else
                {
                  int v32 = *(_DWORD *)(v25 + 20);
                  if (v32 < *(_DWORD *)(v21 + 20)) {
                    *(_DWORD *)(v21 + 20) = v32;
                  }
                  while (++v20 != v22)
                  {
                    if ((*v20 & 0xFFFFFFFFFFFFFFF8) != 0
                      && (*v20 & 4) != 0
                      && *(void *)(*v20 & 0xFFFFFFFFFFFFFFF8))
                    {
                      goto LABEL_41;
                    }
                  }
                }
                int v20 = v22;
LABEL_41:
                uint64_t v18 = v24;
              }
              else
              {
                uint64_t v56 = v21;
                int v57 = v20;
                signed int v58 = v22;
                unint64_t v27 = sub_1CD46398C((uint64_t)&v62, (unint64_t)&v56);
                uint64_t v28 = (char *)v62 + 24 * v63;
                long long v29 = *(_OWORD *)v27;
                *((void *)v28 + 2) = *(void *)(v27 + 16);
                *(_OWORD *)uint64_t v28 = v29;
                LODWORD(v63) = v63 + 1;
                uint64_t v18 = (v24 + 1);
                *(_DWORD *)(v25 + 16) = v24;
                *(_DWORD *)(v25 + 20) = v24;
                int v20 = *(void **)(v25 + 24);
                uint64_t v30 = *(unsigned int *)(v25 + 32);
                uint64_t v22 = &v20[v30];
                if (v30)
                {
                  uint64_t v31 = 8 * v30;
                  while ((*v20 & 0xFFFFFFFFFFFFFFF8) == 0
                       || (*v20 & 4) == 0
                       || !*(void *)(*v20 & 0xFFFFFFFFFFFFFFF8))
                  {
                    ++v20;
                    v31 -= 8;
                    if (!v31)
                    {
                      uint64_t v21 = v25;
                      goto LABEL_44;
                    }
                  }
                }
                uint64_t v21 = v25;
                uint64_t v23 = (uint64_t)v22;
              }
              uint64_t v24 = v18;
            }
            while (v20 != (void *)v23);
          }
LABEL_44:
          if (v60 >= (unint64_t)HIDWORD(v60)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v59 + v60) = v21;
          unsigned int v33 = v60 + 1;
          LODWORD(v60) = v60 + 1;
          int v34 = *(_DWORD *)(v21 + 20);
          if (v34 == *(_DWORD *)(v21 + 16))
          {
            unsigned int v35 = (char *)v59;
            unint64_t v36 = (char *)v59 + 8 * v33;
            uint64_t v37 = 8 * v33;
            while (v37)
            {
              int v38 = *(_DWORD *)(*(void *)((char *)v59 + v37 - 8) + 16);
              v37 -= 8;
              if (v38 < v34)
              {
                unsigned int v35 = (char *)v59 + v37 + 8;
                break;
              }
            }
            *(void *)(a1 + 272) += 32;
            uint64_t v39 = *(void *)(a1 + 192);
            if (((v39 + 7) & 0xFFFFFFFFFFFFFFF8) - v39 + 32 > *(void *)(a1 + 200) - v39)
            {
              unsigned int v49 = *(_DWORD *)(a1 + 216) >> 7;
              if (v49 >= 0x1E) {
                LOBYTE(v49) = 30;
              }
              uint64_t v50 = 4096 << v49;
              BOOL v40 = operator new(4096 << v49, (std::align_val_t)8uLL);
              unint64_t v51 = *(unsigned int *)(a1 + 216);
              if (v51 >= *(unsigned int *)(a1 + 220)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(a1 + 208) + 8 * v51) = v40;
              ++*(_DWORD *)(a1 + 216);
              *(void *)(a1 + 200) = (char *)v40 + v50;
            }
            else
            {
              BOOL v40 = (void *)((v39 + 7) & 0xFFFFFFFFFFFFFFF8);
            }
            *(void *)(a1 + 192) = v40 + 4;
            void *v40 = a2;
            v40[1] = v40 + 3;
            v40[2] = 0x100000000;
            sub_1CC0579B0((uint64_t)(v40 + 1), (uint64_t)v36, (uint64_t)v36, (uint64_t)v36, (uint64_t)v35);
            unint64_t v41 = *(unsigned int *)(a2 + 16);
            if (v41 >= *(unsigned int *)(a2 + 20)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(a2 + 8) + 8 * v41) = v40;
            unsigned int v42 = *(_DWORD *)(a2 + 16) + 1;
            *(_DWORD *)(a2 + 16) = v42;
            uint64_t v43 = *(void *)(*(void *)(a2 + 8) + 8 * v42 - 8);
            uint64_t v44 = *(unsigned int *)(v43 + 16);
            if (v44)
            {
              uint64_t v45 = *(uint64_t **)(v43 + 8);
              uint64_t v46 = 8 * v44;
              do
              {
                uint64_t v47 = *v45++;
                *(void *)(v47 + 16) = -1;
                uint64_t v48 = *(void *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a2 + 16) - 8);
                uint64_t v56 = v47;
                sub_1CD49ABC4(a1 + 288, &v56)[1] = v48;
                v46 -= 8;
              }
              while (v46);
            }
            LODWORD(v60) = (unint64_t)(v35 - (unsigned char *)v59) >> 3;
          }
          unsigned int v17 = v63;
        }
        while (v63);
      }
      uint64_t v8 = v55;
    }
    while (v55 != v5);
    if (v59 != v61) {
      free(v59);
    }
  }
  if (v62 != v64) {
    free(v62);
  }
  uint64_t v52 = *(unsigned int *)(a2 + 16);
  if ((int)v52 >= 1)
  {
    uint64_t v53 = 0;
    for (uint64_t i = 0; i != v52; ++i)
    {
      *((_DWORD *)sub_1CD49A8AC((_DWORD *)(a2 + 56), (uint64_t *)(*(void *)(a2 + 8) + v53)) + 2) = i;
      v53 += 8;
    }
  }
}

void llvm::LazyCallGraph::buildRefSCCs(llvm::LazyCallGraph *this)
{
  v64[48] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((unsigned int *)this + 32);
  if (v1)
  {
    uint64_t v3 = (void *)*((void *)this + 15);
    int v4 = &v3[v1];
    uint64_t v5 = 8 * v1;
    uint64_t v6 = v5;
    for (uint64_t i = v3; (*i & 0xFFFFFFFFFFFFFFF8) == 0 || !*(void *)(*i & 0xFFFFFFFFFFFFFFF8); ++i)
    {
      v6 -= 8;
      if (!v6) {
        return;
      }
    }
    if (!*((_DWORD *)this + 104))
    {
      uint64_t v56 = v58;
      uint64_t v57 = 0x1000000000;
      while (1)
      {
        uint64_t v8 = *v3;
        if ((*v3 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if (*(void *)(*v3 & 0xFFFFFFFFFFFFFFF8)) {
            break;
          }
        }
        ++v3;
        v5 -= 8;
        if (!v5) {
          goto LABEL_90;
        }
      }
      if (v5)
      {
        LODWORD(v5) = 0;
        do
        {
          if (v5 >= HIDWORD(v57)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v56 + v5) = v8 & 0xFFFFFFFFFFFFFFF8;
          LODWORD(v5) = v57 + 1;
          LODWORD(v57) = v57 + 1;
          do
          {
            if (++v3 == v4) {
              goto LABEL_22;
            }
            uint64_t v8 = *v3;
          }
          while ((*v3 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(void *)(*v3 & 0xFFFFFFFFFFFFFFF8));
        }
        while (v3 != v4);
LABEL_22:
        uint64_t v9 = v56;
      }
      else
      {
LABEL_90:
        uint64_t v9 = v58;
      }
      uint64_t v62 = v64;
      uint64_t v63 = 0x1000000000;
      uint64_t v59 = v61;
      uint64_t v60 = 0x1000000000;
      if (!v5) {
        goto LABEL_77;
      }
      uint64_t v10 = &v9[8 * v5];
LABEL_25:
      uint64_t v11 = *(char **)v9;
      if (*(_DWORD *)(*(void *)v9 + 16)) {
        goto LABEL_68;
      }
      *((void *)v11 + 2) = 0x100000001;
      if (!v11[96]) {
        llvm::LazyCallGraph::Node::populateSlow((llvm::LazyCallGraph::Node *)v11);
      }
      uint64_t v12 = (void *)*((void *)v11 + 3);
      uint64_t v13 = *((unsigned int *)v11 + 8);
      unint64_t v14 = &v12[v13];
      if (v13)
      {
        uint64_t v15 = 8 * v13;
        do
        {
          if ((*v12 & 0xFFFFFFFFFFFFFFF8) != 0 && *(void *)(*v12 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_34;
          }
          ++v12;
          v15 -= 8;
        }
        while (v15);
        uint64_t v12 = v14;
      }
LABEL_34:
      unint64_t v51 = v11;
      uint64_t v52 = v12;
      uint64_t v53 = (char *)v14;
      unint64_t v16 = sub_1CD46398C((uint64_t)&v62, (unint64_t)&v51);
      unsigned int v17 = (char *)v62 + 24 * v63;
      long long v18 = *(_OWORD *)v16;
      *((void *)v17 + 2) = *(void *)(v16 + 16);
      *(_OWORD *)unsigned int v17 = v18;
      unsigned int v19 = v63 + 1;
      LODWORD(v63) = v63 + 1;
      int v20 = 2;
LABEL_35:
      uint64_t v21 = (char *)v62 + 24 * v19;
      unint64_t v23 = *((void *)v21 - 3);
      uint64_t v22 = (void *)*((void *)v21 - 2);
      uint64_t v24 = (void *)*((void *)v21 - 1);
      LODWORD(v63) = v19 - 1;
      uint64_t v25 = *(void *)(v23 + 24) + 8 * *(unsigned int *)(v23 + 32);
      while (1)
      {
LABEL_36:
        if (v22 == (void *)v25)
        {
LABEL_53:
          if (v60 >= (unint64_t)HIDWORD(v60)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v59 + v60) = v23;
          unsigned int v33 = v60 + 1;
          LODWORD(v60) = v60 + 1;
          int v34 = *(_DWORD *)(v23 + 20);
          if (v34 == *(_DWORD *)(v23 + 16))
          {
            unsigned int v35 = (char *)v59;
            unint64_t v36 = (char *)v59 + 8 * v33;
            uint64_t v37 = 8 * v33;
            while (v37)
            {
              int v38 = *(_DWORD *)(*(void *)((char *)v59 + v37 - 8) + 16);
              v37 -= 8;
              if (v38 < v34)
              {
                unsigned int v35 = (char *)v59 + v37 + 8;
                break;
              }
            }
            *((void *)this + 49) += 128;
            uint64_t v39 = *((void *)this + 39);
            if (((v39 + 7) & 0xFFFFFFFFFFFFFFF8) - v39 + 128 > *((void *)this + 40) - v39)
            {
              unsigned int v45 = *((_DWORD *)this + 84) >> 7;
              if (v45 >= 0x1E) {
                LOBYTE(v45) = 30;
              }
              uint64_t v48 = 4096 << v45;
              BOOL v40 = operator new(4096 << v45, (std::align_val_t)8uLL);
              unint64_t v46 = *((unsigned int *)this + 84);
              if (v46 >= *((unsigned int *)this + 85)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*((void *)this + 41) + 8 * v46) = v40;
              ++*((_DWORD *)this + 84);
              *((void *)this + 40) = (char *)v40 + v48;
            }
            else
            {
              BOOL v40 = (void *)((v39 + 7) & 0xFFFFFFFFFFFFFFF8);
            }
            *((void *)this + 39) = v40 + 16;
            void *v40 = this;
            v40[1] = v40 + 3;
            v40[2] = 0x400000000;
            uint64_t v41 = 8;
            v40[7] = 1;
            do
            {
              v40[v41] = -4096;
              v41 += 2;
            }
            while (v41 != 16);
            unint64_t v51 = v36;
            uint64_t v52 = v36;
            uint64_t v53 = v36;
            unsigned int v54 = v35;
            llvm::LazyCallGraph::buildSCCs((uint64_t)this, (uint64_t)v40, (uint64_t)&v51);
            int v42 = *((_DWORD *)this + 104);
            unsigned int v49 = v40;
            int v50 = v42;
            uint64_t v55 = 0;
            if ((sub_1CBF8BDAC(*((void *)this + 69), *((_DWORD *)this + 142), (uint64_t)v40, &v55) & 1) == 0)
            {
              uint64_t v43 = sub_1CC057AA8((uint64_t)this + 552, (uint64_t *)&v49, v55);
              *uint64_t v43 = v40;
              *((_DWORD *)v43 + 2) = v42;
            }
            unint64_t v44 = *((unsigned int *)this + 104);
            if (v44 >= *((unsigned int *)this + 105)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*((void *)this + 51) + 8 * v44) = v40;
            ++*((_DWORD *)this + 104);
            LODWORD(v60) = (unint64_t)(v35 - (unsigned char *)v59) >> 3;
          }
          unsigned int v19 = v63;
          if (!v63)
          {
LABEL_68:
            v9 += 8;
            if (v9 == v10)
            {
              if (v59 != v61) {
                free(v59);
              }
LABEL_77:
              if (v62 != v64) {
                free(v62);
              }
              if (v56 != v58) {
                free(v56);
              }
              return;
            }
            goto LABEL_25;
          }
          goto LABEL_35;
        }
        unint64_t v26 = *v22 & 0xFFFFFFFFFFFFFFF8;
        int v27 = *(_DWORD *)(v26 + 16);
        if (v27 == -1) {
          break;
        }
        if (v27)
        {
          int v47 = *(_DWORD *)(v26 + 20);
          if (v47 < *(_DWORD *)(v23 + 20)) {
            *(_DWORD *)(v23 + 20) = v47;
          }
          while (++v22 != v24)
          {
            if ((*v22 & 0xFFFFFFFFFFFFFFF8) != 0 && *(void *)(*v22 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_36;
            }
          }
LABEL_51:
          uint64_t v22 = v24;
        }
        else
        {
          unint64_t v51 = (char *)v23;
          uint64_t v52 = v22;
          uint64_t v53 = (char *)v24;
          unint64_t v28 = sub_1CD46398C((uint64_t)&v62, (unint64_t)&v51);
          long long v29 = (char *)v62 + 24 * v63;
          long long v30 = *(_OWORD *)v28;
          *((void *)v29 + 2) = *(void *)(v28 + 16);
          *(_OWORD *)long long v29 = v30;
          LODWORD(v63) = v63 + 1;
          *(_DWORD *)(v26 + 16) = v20;
          *(_DWORD *)(v26 + 20) = v20;
          if (!*(unsigned char *)(v26 + 96)) {
            llvm::LazyCallGraph::Node::populateSlow((llvm::LazyCallGraph::Node *)v26);
          }
          ++v20;
          uint64_t v22 = *(void **)(v26 + 24);
          uint64_t v31 = *(unsigned int *)(v26 + 32);
          uint64_t v24 = &v22[v31];
          if (v31)
          {
            uint64_t v32 = 8 * v31;
            while ((*v22 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(void *)(*v22 & 0xFFFFFFFFFFFFFFF8))
            {
              ++v22;
              v32 -= 8;
              if (!v32)
              {
                unint64_t v23 = v26;
                goto LABEL_53;
              }
            }
          }
          unint64_t v23 = v26;
          uint64_t v25 = (uint64_t)v24;
        }
      }
      while (1)
      {
        if (++v22 == v24) {
          goto LABEL_51;
        }
        if ((*v22 & 0xFFFFFFFFFFFFFFF8) != 0 && *(void *)(*v22 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_36;
        }
      }
    }
  }
}

void *llvm::LazyCallGraphPrinterPass::LazyCallGraphPrinterPass(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

void *llvm::LazyCallGraphDOTPrinterPass::LazyCallGraphDOTPrinterPass(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t sub_1CC0565F4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = result + 16;
  *(void *)(result + 8) = 0x400000000;
  if (*(_DWORD *)(a2 + 8)) {
    uint64_t result = sub_1CD49A500(result, (const void **)a2);
  }
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  int v3 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v3;
  int v4 = *(_DWORD *)(result + 64);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v4;
  return result;
}

void *sub_1CC05667C(uint64_t *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CB915048(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CBF74714((uint64_t)a1, (uint64_t)a2, a2, v7);
    void *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1CC0566DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v14 = 0;
  uint64_t result = sub_1CBF8BDAC(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v14);
  uint64_t v9 = v14;
  if (result)
  {
    char v12 = 0;
    goto LABEL_7;
  }
  int v10 = *(_DWORD *)(a1 + 8);
  unsigned int v11 = *(_DWORD *)(a1 + 16);
  if (4 * v10 + 4 >= 3 * v11)
  {
    v11 *= 2;
    goto LABEL_9;
  }
  if (v11 + ~v10 - *(_DWORD *)(a1 + 12) <= v11 >> 3)
  {
LABEL_9:
    sub_1CC0567F0(a1, v11);
    uint64_t v14 = 0;
    uint64_t result = sub_1CBF8BDAC(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v14);
    uint64_t v9 = v14;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)v9 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)uint64_t v9 = *a2;
  *(_DWORD *)(v9 + 8) = *a3;
  char v12 = 1;
LABEL_7:
  uint64_t v13 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v13;
  *(unsigned char *)(a4 + 16) = v12;
  return result;
}

void *sub_1CC0567F0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC0568BC(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC0568BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CBF8BDAC(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      uint64_t v10 = v11;
      void *v11 = *(void *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1CC05696C(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t)(*a1 + 3);
  uint64_t v3 = (uint64_t)(*a1 + 9);
  unint64_t v4 = sub_1CC04FE44(**a1, a2);

  return sub_1CC04FD88(v2, v3, v4, 0);
}

uint64_t sub_1CC0569B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = v2 + 120;
  uint64_t v4 = v2 + 168;
  unint64_t v5 = sub_1CC04FE44(v2, a2);

  return sub_1CC04FD88(v3, v4, v5, 0);
}

uint64_t sub_1CC056A04(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = a1 + 32;
  uint64_t v4 = a1 + 16;
  *(void *)(a1 + 24) = 0x400000000;
  if (*(_DWORD *)(a2 + 24)) {
    sub_1CBA6E388(v4, (const void **)(a2 + 16));
  }
  *(void *)(a1 + 64) = a1 + 80;
  *(void *)(a1 + 72) = 0;
  if (*(_DWORD *)(a2 + 72)) {
    sub_1CD49A6B8(a1 + 64, a2 + 64);
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 72) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  return a1;
}

uint64_t sub_1CC056A94(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      int v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_17;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void *sub_1CC056B38(_DWORD *a1, uint64_t *a2, void *a3)
{
  int v3 = *a1 >> 1;
  if (*a1) {
    unsigned int v4 = 4;
  }
  else {
    unsigned int v4 = a1[4];
  }
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[1] > v4 >> 3)
  {
    goto LABEL_5;
  }
  uint64_t v7 = (uint64_t)a1;
  sub_1CD49A910((uint64_t)a1, v4);
  uint64_t v8 = 0;
  sub_1CC056A94(v7, *a2, &v8);
  a1 = (_DWORD *)v7;
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -4096) {
    --a1[1];
  }
  return a3;
}

uint64_t *sub_1CC056BFC(int8x16_t *a1, unint64_t *a2, uint64_t **a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v7 = (uint64_t *)a2;
  uint64_t v8 = (uint64_t *)a1;
  if (a4 == 3)
  {
    uint64_t v11 = a1->i64[1];
    BOOL v12 = *a3;
    uint64_t v14 = **a3;
    uint64_t v13 = (*a3)[1];
    if (v13 == v14)
    {
      uint64_t v15 = *((unsigned int *)v12 + 5);
      unint64_t v16 = (void *)(v13 + 8 * v15);
      if (v15)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 8 * v15;
        while (*(void *)(v13 + v17) != v11)
        {
          v17 += 8;
          if (v18 == v17) {
            goto LABEL_135;
          }
        }
        unint64_t v16 = (void *)(v13 + v17);
      }
LABEL_135:
      uint64_t v14 = (*a3)[1];
    }
    else
    {
      uint64_t v66 = *((unsigned int *)v12 + 4);
      int v67 = v66 - 1;
      unsigned int v68 = (v66 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      unint64_t v16 = (void *)(v13 + 8 * v68);
      uint64_t v69 = *v16;
      if (*v16 == -1)
      {
        uint64_t v70 = 0;
LABEL_145:
        if (v70) {
          unint64_t v16 = v70;
        }
        if (*v16 != v11) {
          unint64_t v16 = (void *)(v13 + 8 * v66);
        }
      }
      else
      {
        uint64_t v70 = 0;
        int v71 = 1;
        while (v69 != v11)
        {
          if (v70) {
            BOOL v72 = 0;
          }
          else {
            BOOL v72 = v69 == -2;
          }
          if (v72) {
            uint64_t v70 = v16;
          }
          unsigned int v73 = v68 + v71++;
          unsigned int v68 = v73 & v67;
          unint64_t v16 = (void *)(v13 + 8 * (v73 & v67));
          uint64_t v69 = *v16;
          if (*v16 == -1) {
            goto LABEL_145;
          }
        }
      }
    }
    BOOL v43 = v13 == v14;
    uint64_t v95 = 16;
    if (v43) {
      uint64_t v95 = 20;
    }
    if (v16 == (void *)(v13 + 8 * *(unsigned int *)((char *)v12 + v95)))
    {
      uint64_t v10 = a1->i64[0];
      a1->i64[0] = v11;
      a1->i64[1] = v10;
      a1->i64[1] = *v7;
      goto LABEL_141;
    }
    a1->i64[1] = *v7;
    uint64_t *v7 = v11;
    *a1 = vextq_s8(*a1, *a1, 8uLL);
    return &a1->i64[1];
  }
  if (a4 == 2)
  {
    uint64_t v10 = a1->i64[0];
    a1->i64[0] = *a2;
LABEL_141:
    uint64_t *v7 = v10;
    return v7;
  }
  if (a6 >= a4)
  {
    int v47 = &a1->i64[1];
    *a5 = a1->i64[0];
    uint64_t v48 = a5 + 1;
    if (&a1->u64[1] == a2)
    {
      a1->i64[0] = *a2;
    }
    else
    {
      do
      {
        uint64_t v49 = *v47;
        int v50 = *a3;
        uint64_t v52 = **a3;
        uint64_t v51 = (*a3)[1];
        if (v51 == v52)
        {
          uint64_t v53 = *((unsigned int *)v50 + 5);
          unsigned int v54 = (void *)(v51 + 8 * v53);
          if (v53)
          {
            uint64_t v55 = 0;
            uint64_t v56 = 8 * v53;
            while (*(void *)(v51 + v55) != v49)
            {
              v55 += 8;
              if (v56 == v55) {
                goto LABEL_65;
              }
            }
            unsigned int v54 = (void *)(v51 + v55);
          }
LABEL_65:
          uint64_t v52 = (*a3)[1];
        }
        else
        {
          uint64_t v57 = *((unsigned int *)v50 + 4);
          int v58 = v57 - 1;
          unsigned int v59 = (v57 - 1) & ((v49 >> 4) ^ (v49 >> 9));
          unsigned int v54 = (void *)(v51 + 8 * v59);
          uint64_t v60 = *v54;
          if (*v54 == -1)
          {
            signed int v61 = 0;
LABEL_75:
            if (v61) {
              unsigned int v54 = v61;
            }
            if (*v54 != v49) {
              unsigned int v54 = (void *)(v51 + 8 * v57);
            }
          }
          else
          {
            signed int v61 = 0;
            int v62 = 1;
            while (v60 != v49)
            {
              if (v61) {
                BOOL v63 = 0;
              }
              else {
                BOOL v63 = v60 == -2;
              }
              if (v63) {
                signed int v61 = v54;
              }
              unsigned int v64 = v59 + v62++;
              unsigned int v59 = v64 & v58;
              unsigned int v54 = (void *)(v51 + 8 * (v64 & v58));
              uint64_t v60 = *v54;
              if (*v54 == -1) {
                goto LABEL_75;
              }
            }
          }
        }
        if (v51 == v52) {
          uint64_t v65 = 20;
        }
        else {
          uint64_t v65 = 16;
        }
        if (v54 == (void *)(v51 + 8 * *(unsigned int *)((char *)v50 + v65))) {
          *v8++ = v49;
        }
        else {
          *v48++ = v49;
        }
        ++v47;
      }
      while (v47 != v7);
      uint64_t *v8 = *v7;
      uint64_t v7 = v8 + 1;
      if (v48 <= a5) {
        return v7;
      }
    }
    uint64_t v94 = 0;
    do
    {
      v7[v94] = a5[v94];
      ++v94;
    }
    while (&a5[v94] < v48);
    return v7;
  }
  if (a4 >= 0) {
    uint64_t v21 = a4;
  }
  else {
    uint64_t v21 = a4 + 1;
  }
  uint64_t v22 = v21 >> 1;
  unint64_t v23 = &a1->i8[8 * (v21 >> 1)];
  uint64_t v24 = *a3;
  unint64_t v26 = (void *)**a3;
  uint64_t v25 = (void *)(*a3)[1];
  int v27 = (unsigned int *)*a3 + 5;
  unint64_t v28 = (unsigned int *)(*a3 + 2);
  uint64_t v29 = v22;
  long long v30 = v23;
  while (1)
  {
    uint64_t v32 = *((void *)v30 - 1);
    v30 -= 8;
    uint64_t v31 = v32;
    if (v25 == v26)
    {
      uint64_t v33 = *v27;
      int v34 = &v25[v33];
      if (v33)
      {
        unint64_t v35 = 0;
        uint64_t v36 = 8 * v33;
        while (v25[v35 / 8] != v31)
        {
          v35 += 8;
          if (v36 == v35) {
            goto LABEL_33;
          }
        }
        int v34 = &v25[v35 / 8];
      }
LABEL_33:
      unsigned int v45 = (void *)(*a3)[1];
    }
    else
    {
      uint64_t v37 = *v28;
      int v38 = v37 - 1;
      unsigned int v39 = (v37 - 1) & ((v31 >> 4) ^ (v31 >> 9));
      int v34 = &v25[v39];
      uint64_t v40 = *v34;
      if (*v34 == -1)
      {
        uint64_t v41 = 0;
LABEL_35:
        if (v41) {
          int v34 = v41;
        }
        if (*v34 != v31) {
          int v34 = &v25[v37];
        }
      }
      else
      {
        uint64_t v41 = 0;
        int v42 = 1;
        while (v40 != v31)
        {
          if (v41) {
            BOOL v43 = 0;
          }
          else {
            BOOL v43 = v40 == -2;
          }
          if (v43) {
            uint64_t v41 = v34;
          }
          unsigned int v44 = v39 + v42++;
          unsigned int v39 = v44 & v38;
          int v34 = &v25[v44 & v38];
          uint64_t v40 = *v34;
          if (*v34 == -1) {
            goto LABEL_35;
          }
        }
      }
      unsigned int v45 = (void *)**a3;
    }
    unint64_t v46 = v25 == v45 ? (unsigned int *)((char *)*a3 + 20) : (unsigned int *)(*a3 + 2);
    if (v34 == &v25[*v46]) {
      break;
    }
    if (v30 == (char *)v8) {
      goto LABEL_93;
    }
    --v29;
  }
  uint64_t v8 = (uint64_t *)sub_1CC056BFC(v8, v30, a3, v29, a5, a6);
  uint64_t v24 = *a3;
  unint64_t v26 = (void *)**a3;
  uint64_t v25 = (void *)(*a3)[1];
LABEL_93:
  uint64_t v74 = (char *)(v7 + 1);
  uint64_t v75 = a4 - v22;
  uint64_t v76 = (unsigned int *)v24 + 5;
  uint64_t v77 = (unsigned int *)(v24 + 2);
  uint64_t v78 = v23;
  while (1)
  {
    uint64_t v79 = *(void *)v78;
    if (v25 == v26)
    {
      uint64_t v80 = *v76;
      uint64_t v81 = &v26[v80];
      if (v80)
      {
        uint64_t v82 = 8 * v80;
        uint64_t v83 = v26;
        while (*v83 != v79)
        {
          ++v83;
          v82 -= 8;
          if (!v82) {
            goto LABEL_99;
          }
        }
        uint64_t v84 = v76;
      }
      else
      {
LABEL_99:
        uint64_t v84 = v76;
        uint64_t v83 = v81;
      }
    }
    else
    {
      uint64_t v85 = *v77;
      int v86 = v85 - 1;
      unsigned int v87 = (v85 - 1) & ((v79 >> 4) ^ (v79 >> 9));
      uint64_t v83 = &v25[v87];
      uint64_t v88 = *v83;
      if (*v83 == -1)
      {
        uint64_t v89 = 0;
LABEL_113:
        if (v89) {
          uint64_t v83 = v89;
        }
        if (*v83 != v79) {
          uint64_t v83 = &v25[v85];
        }
      }
      else
      {
        uint64_t v89 = 0;
        int v90 = 1;
        while (v88 != v79)
        {
          if (v89) {
            BOOL v91 = 0;
          }
          else {
            BOOL v91 = v88 == -2;
          }
          if (v91) {
            uint64_t v89 = v83;
          }
          unsigned int v92 = v87 + v90++;
          unsigned int v87 = v92 & v86;
          uint64_t v83 = &v25[v92 & v86];
          uint64_t v88 = *v83;
          if (*v83 == -1) {
            goto LABEL_113;
          }
        }
      }
      uint64_t v84 = v77;
    }
    if (v83 != &v25[*v84]) {
      break;
    }
    v78 += 8;
    if (v78 == (char *)v7) {
      goto LABEL_122;
    }
    --v75;
  }
  uint64_t v74 = (char *)sub_1CC056BFC(v78, v7, a3, v75, a5, a6);
LABEL_122:
  if (v8 == (uint64_t *)v23) {
    return (uint64_t *)v74;
  }
  if (v23 == v74) {
    return v8;
  }
  if (v8 + 1 == (uint64_t *)v23)
  {
    uint64_t v96 = *v8;
    int64_t v97 = v74 - v23;
    memmove(v8, v23, v74 - v23);
    uint64_t v7 = (uint64_t *)((char *)v8 + v97);
    uint64_t *v7 = v96;
    return v7;
  }
  if (v23 + 8 == v74)
  {
    uint64_t v98 = *((void *)v74 - 1);
    uint64_t v7 = v8 + 1;
    size_t v99 = v74 - 8 - (char *)v8;
    if (v99) {
      memmove(v8 + 1, v8, v99);
    }
    uint64_t *v8 = v98;
    return v7;
  }

  return sub_1CC057214(v8, v23, v74);
}

void *sub_1CC057214(void *a1, void *a2, void *a3)
{
  uint64_t v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = a1[v4];
        a1[v4] = a2[v4];
        uint64_t v6 = (uint64_t)&a1[v4 + 1];
        a2[v4] = v5;
        uint64_t v7 = (uint64_t)&a2[++v4];
      }
      while ((void *)v6 != a2 && v7 != (void)a3);
    }
  }
  else
  {
    uint64_t v9 = a3 - a2;
    uint64_t v10 = a2 - a1;
    do
    {
      uint64_t v11 = v10;
      uint64_t v10 = v9;
      uint64_t v9 = v11 % v9;
    }
    while (v9);
    if (v10)
    {
      BOOL v12 = &a1[v10];
      do
      {
        uint64_t v14 = *--v12;
        uint64_t v13 = v14;
        uint64_t v15 = &v12[v3];
        unint64_t v16 = v12;
        do
        {
          uint64_t v17 = v16;
          unint64_t v16 = v15;
          *uint64_t v17 = *v15;
          BOOL v18 = __OFSUB__(v3, a3 - v15);
          uint64_t v20 = v3 - (a3 - v15);
          char v19 = (v20 < 0) ^ v18;
          uint64_t v15 = &a1[v20];
          if (v19) {
            uint64_t v15 = &v16[v3];
          }
        }
        while (v15 != v12);
        *unint64_t v16 = v13;
      }
      while (v12 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

uint64_t *sub_1CC0572E0(int8x16_t *a1, unint64_t *a2, uint64_t **a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v7 = (uint64_t *)a2;
  uint64_t v8 = (uint64_t *)a1;
  if (a4 == 3)
  {
    uint64_t v11 = a1->i64[1];
    BOOL v12 = *a3;
    uint64_t v14 = **a3;
    uint64_t v13 = (*a3)[1];
    if (v13 == v14)
    {
      uint64_t v15 = *((unsigned int *)v12 + 5);
      unint64_t v16 = (void *)(v13 + 8 * v15);
      if (v15)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 8 * v15;
        while (*(void *)(v13 + v17) != v11)
        {
          v17 += 8;
          if (v18 == v17) {
            goto LABEL_135;
          }
        }
        unint64_t v16 = (void *)(v13 + v17);
      }
LABEL_135:
      uint64_t v14 = (*a3)[1];
    }
    else
    {
      uint64_t v66 = *((unsigned int *)v12 + 4);
      int v67 = v66 - 1;
      unsigned int v68 = (v66 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      unint64_t v16 = (void *)(v13 + 8 * v68);
      uint64_t v69 = *v16;
      if (*v16 == -1)
      {
        uint64_t v70 = 0;
LABEL_145:
        if (v70) {
          unint64_t v16 = v70;
        }
        if (*v16 != v11) {
          unint64_t v16 = (void *)(v13 + 8 * v66);
        }
      }
      else
      {
        uint64_t v70 = 0;
        int v71 = 1;
        while (v69 != v11)
        {
          if (v70) {
            BOOL v72 = 0;
          }
          else {
            BOOL v72 = v69 == -2;
          }
          if (v72) {
            uint64_t v70 = v16;
          }
          unsigned int v73 = v68 + v71++;
          unsigned int v68 = v73 & v67;
          unint64_t v16 = (void *)(v13 + 8 * (v73 & v67));
          uint64_t v69 = *v16;
          if (*v16 == -1) {
            goto LABEL_145;
          }
        }
      }
    }
    BOOL v43 = v13 == v14;
    uint64_t v95 = 16;
    if (v43) {
      uint64_t v95 = 20;
    }
    if (v16 == (void *)(v13 + 8 * *(unsigned int *)((char *)v12 + v95)))
    {
      a1->i64[1] = *v7;
      uint64_t *v7 = v11;
      *a1 = vextq_s8(*a1, *a1, 8uLL);
      return &a1->i64[1];
    }
    uint64_t v10 = a1->i64[0];
    a1->i64[0] = v11;
    a1->i64[1] = v10;
    a1->i64[1] = *v7;
    goto LABEL_140;
  }
  if (a4 == 2)
  {
    uint64_t v10 = a1->i64[0];
    a1->i64[0] = *a2;
LABEL_140:
    uint64_t *v7 = v10;
    return v7;
  }
  if (a6 >= a4)
  {
    int v47 = &a1->i64[1];
    *a5 = a1->i64[0];
    uint64_t v48 = a5 + 1;
    if (&a1->u64[1] == a2)
    {
      a1->i64[0] = *a2;
    }
    else
    {
      do
      {
        uint64_t v49 = *v47;
        int v50 = *a3;
        uint64_t v52 = **a3;
        uint64_t v51 = (*a3)[1];
        if (v51 == v52)
        {
          uint64_t v53 = *((unsigned int *)v50 + 5);
          unsigned int v54 = (void *)(v51 + 8 * v53);
          if (v53)
          {
            uint64_t v55 = 0;
            uint64_t v56 = 8 * v53;
            while (*(void *)(v51 + v55) != v49)
            {
              v55 += 8;
              if (v56 == v55) {
                goto LABEL_65;
              }
            }
            unsigned int v54 = (void *)(v51 + v55);
          }
LABEL_65:
          uint64_t v52 = (*a3)[1];
        }
        else
        {
          uint64_t v57 = *((unsigned int *)v50 + 4);
          int v58 = v57 - 1;
          unsigned int v59 = (v57 - 1) & ((v49 >> 4) ^ (v49 >> 9));
          unsigned int v54 = (void *)(v51 + 8 * v59);
          uint64_t v60 = *v54;
          if (*v54 == -1)
          {
            signed int v61 = 0;
LABEL_75:
            if (v61) {
              unsigned int v54 = v61;
            }
            if (*v54 != v49) {
              unsigned int v54 = (void *)(v51 + 8 * v57);
            }
          }
          else
          {
            signed int v61 = 0;
            int v62 = 1;
            while (v60 != v49)
            {
              if (v61) {
                BOOL v63 = 0;
              }
              else {
                BOOL v63 = v60 == -2;
              }
              if (v63) {
                signed int v61 = v54;
              }
              unsigned int v64 = v59 + v62++;
              unsigned int v59 = v64 & v58;
              unsigned int v54 = (void *)(v51 + 8 * (v64 & v58));
              uint64_t v60 = *v54;
              if (*v54 == -1) {
                goto LABEL_75;
              }
            }
          }
        }
        if (v51 == v52) {
          uint64_t v65 = 20;
        }
        else {
          uint64_t v65 = 16;
        }
        if (v54 == (void *)(v51 + 8 * *(unsigned int *)((char *)v50 + v65))) {
          *v48++ = v49;
        }
        else {
          *v8++ = v49;
        }
        ++v47;
      }
      while (v47 != v7);
      uint64_t *v8 = *v7;
      uint64_t v7 = v8 + 1;
      if (v48 <= a5) {
        return v7;
      }
    }
    uint64_t v94 = 0;
    do
    {
      v7[v94] = a5[v94];
      ++v94;
    }
    while (&a5[v94] < v48);
    return v7;
  }
  if (a4 >= 0) {
    uint64_t v21 = a4;
  }
  else {
    uint64_t v21 = a4 + 1;
  }
  uint64_t v22 = v21 >> 1;
  unint64_t v23 = &a1->i8[8 * (v21 >> 1)];
  uint64_t v24 = *a3;
  unint64_t v26 = (void *)**a3;
  uint64_t v25 = (void *)(*a3)[1];
  int v27 = (unsigned int *)*a3 + 5;
  unint64_t v28 = (unsigned int *)(*a3 + 2);
  uint64_t v29 = v22;
  long long v30 = v23;
  while (1)
  {
    uint64_t v32 = *((void *)v30 - 1);
    v30 -= 8;
    uint64_t v31 = v32;
    if (v25 == v26)
    {
      uint64_t v33 = *v27;
      int v34 = &v25[v33];
      if (v33)
      {
        unint64_t v35 = 0;
        uint64_t v36 = 8 * v33;
        while (v25[v35 / 8] != v31)
        {
          v35 += 8;
          if (v36 == v35) {
            goto LABEL_33;
          }
        }
        int v34 = &v25[v35 / 8];
      }
LABEL_33:
      unsigned int v45 = (void *)(*a3)[1];
    }
    else
    {
      uint64_t v37 = *v28;
      int v38 = v37 - 1;
      unsigned int v39 = (v37 - 1) & ((v31 >> 4) ^ (v31 >> 9));
      int v34 = &v25[v39];
      uint64_t v40 = *v34;
      if (*v34 == -1)
      {
        uint64_t v41 = 0;
LABEL_35:
        if (v41) {
          int v34 = v41;
        }
        if (*v34 != v31) {
          int v34 = &v25[v37];
        }
      }
      else
      {
        uint64_t v41 = 0;
        int v42 = 1;
        while (v40 != v31)
        {
          if (v41) {
            BOOL v43 = 0;
          }
          else {
            BOOL v43 = v40 == -2;
          }
          if (v43) {
            uint64_t v41 = v34;
          }
          unsigned int v44 = v39 + v42++;
          unsigned int v39 = v44 & v38;
          int v34 = &v25[v44 & v38];
          uint64_t v40 = *v34;
          if (*v34 == -1) {
            goto LABEL_35;
          }
        }
      }
      unsigned int v45 = (void *)**a3;
    }
    unint64_t v46 = v25 == v45 ? (unsigned int *)((char *)*a3 + 20) : (unsigned int *)(*a3 + 2);
    if (v34 != &v25[*v46]) {
      break;
    }
    if (v30 == (char *)v8) {
      goto LABEL_93;
    }
    --v29;
  }
  uint64_t v8 = (uint64_t *)sub_1CC0572E0(v8, v30, a3, v29, a5, a6);
  uint64_t v24 = *a3;
  unint64_t v26 = (void *)**a3;
  uint64_t v25 = (void *)(*a3)[1];
LABEL_93:
  uint64_t v74 = (char *)(v7 + 1);
  uint64_t v75 = a4 - v22;
  uint64_t v76 = (unsigned int *)v24 + 5;
  uint64_t v77 = (unsigned int *)(v24 + 2);
  uint64_t v78 = v23;
  while (1)
  {
    uint64_t v79 = *(void *)v78;
    if (v25 == v26)
    {
      uint64_t v80 = *v76;
      uint64_t v81 = &v26[v80];
      if (v80)
      {
        uint64_t v82 = 8 * v80;
        uint64_t v83 = v26;
        while (*v83 != v79)
        {
          ++v83;
          v82 -= 8;
          if (!v82) {
            goto LABEL_99;
          }
        }
        uint64_t v84 = v76;
      }
      else
      {
LABEL_99:
        uint64_t v84 = v76;
        uint64_t v83 = v81;
      }
    }
    else
    {
      uint64_t v85 = *v77;
      int v86 = v85 - 1;
      unsigned int v87 = (v85 - 1) & ((v79 >> 4) ^ (v79 >> 9));
      uint64_t v83 = &v25[v87];
      uint64_t v88 = *v83;
      if (*v83 == -1)
      {
        uint64_t v89 = 0;
LABEL_113:
        if (v89) {
          uint64_t v83 = v89;
        }
        if (*v83 != v79) {
          uint64_t v83 = &v25[v85];
        }
      }
      else
      {
        uint64_t v89 = 0;
        int v90 = 1;
        while (v88 != v79)
        {
          if (v89) {
            BOOL v91 = 0;
          }
          else {
            BOOL v91 = v88 == -2;
          }
          if (v91) {
            uint64_t v89 = v83;
          }
          unsigned int v92 = v87 + v90++;
          unsigned int v87 = v92 & v86;
          uint64_t v83 = &v25[v92 & v86];
          uint64_t v88 = *v83;
          if (*v83 == -1) {
            goto LABEL_113;
          }
        }
      }
      uint64_t v84 = v77;
    }
    if (v83 == &v25[*v84]) {
      break;
    }
    v78 += 8;
    if (v78 == (char *)v7) {
      goto LABEL_122;
    }
    --v75;
  }
  uint64_t v74 = (char *)sub_1CC0572E0(v78, v7, a3, v75, a5, a6);
LABEL_122:
  if (v8 == (uint64_t *)v23) {
    return (uint64_t *)v74;
  }
  if (v23 == v74) {
    return v8;
  }
  if (v8 + 1 == (uint64_t *)v23)
  {
    uint64_t v96 = *v8;
    int64_t v97 = v74 - v23;
    memmove(v8, v23, v74 - v23);
    uint64_t v7 = (uint64_t *)((char *)v8 + v97);
    uint64_t *v7 = v96;
    return v7;
  }
  if (v23 + 8 == v74)
  {
    uint64_t v98 = *((void *)v74 - 1);
    uint64_t v7 = v8 + 1;
    size_t v99 = v74 - 8 - (char *)v8;
    if (v99) {
      memmove(v8 + 1, v8, v99);
    }
    uint64_t *v8 = v98;
    return v7;
  }

  return sub_1CC057214(v8, v23, v74);
}

void *sub_1CC0578F8(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CBFB070C(a1, v6);
  uint64_t v8 = 0;
  sub_1CBF8BDAC(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_1CC0579B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a3 - a5;
  uint64_t v6 = *(unsigned int *)(result + 8);
  if (v6 + ((a3 - a5) >> 3) > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a3 != a5)
  {
    uint64_t v7 = (void *)(*(void *)result + 8 * v6);
    do
    {
      uint64_t v8 = *(void *)(a3 - 8);
      a3 -= 8;
      *v7++ = v8;
    }
    while (a3 != a5);
  }
  *(_DWORD *)(result + 8) = v6 + (v5 >> 3);
  return result;
}

void *sub_1CC057A3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CBF8BDAC(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = sub_1CC057AA8(a1, a2, v7);
    void *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

void *sub_1CC057AA8(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC0567F0(a1, v6);
  uint64_t v8 = 0;
  sub_1CBF8BDAC(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_1CC057B60(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v5 = (const void *)(a2 + 16);
    char v4 = *(const void **)a2;
    if (v4 == v5)
    {
      uint64_t v7 = (_DWORD *)(a2 + 8);
      uint64_t v8 = *(unsigned int *)(a2 + 8);
      uint64_t v9 = *(unsigned int *)(a1 + 8);
      if (v9 >= v8)
      {
        if (v8) {
          memmove(*(void **)a1, v4, 8 * v8);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v8)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v9) {
          memmove(*(void **)a1, v4, 8 * v9);
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *v7;
        if (v9 != v10) {
          memcpy((void *)(*(void *)a1 + 8 * v9), (const void *)(*(void *)a2 + 8 * v9), *(void *)a2 + 8 * v10 - (*(void *)a2 + 8 * v9));
        }
      }
      *(_DWORD *)(a1 + 8) = v8;
    }
    else
    {
      unsigned int v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        char v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      uint64_t v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    _DWORD *v7 = 0;
  }
  return a1;
}

void sub_1CC057C80(uint64_t a1)
{
}

void llvm::LazyValueInfoWrapperPass::runOnFunction(llvm::LazyValueInfoWrapperPass *this, llvm::Function *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  char v4 = (uint64_t *)*((void *)this + 1);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_12:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::AssumptionCacheTracker::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_12;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::AssumptionCacheTracker::ID);
  *((void *)this + 4) = llvm::AssumptionCacheTracker::getAssumptionCache(v8, a2);
  uint64_t v9 = (uint64_t *)*((void *)this + 1);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v10 == v11)
  {
LABEL_7:
    uint64_t v12 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v10 != &llvm::TargetLibraryInfoWrapperPass::ID)
    {
      v10 += 16;
      if (v10 == v11) {
        goto LABEL_7;
      }
    }
    uint64_t v12 = *(void *)(v10 + 8);
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::TargetLibraryInfoWrapperPass::ID);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  int v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  int v25 = 0;
  uint64_t v14 = v13 + 32;
  if (!*(unsigned char *)(v13 + 232))
  {
    uint64_t v15 = *((void *)a2 + 5) + 216;
    __int16 v27 = 260;
    v26[0] = v15;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v26);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v39 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    *(void *)&long long v16 = -1;
    *((void *)&v16 + 1) = -1;
    *(_OWORD *)long long __src = v16;
    long long v31 = v16;
    long long v32 = v16;
    long long v33 = v16;
    long long v34 = v16;
    long long v35 = v16;
    *(_OWORD *)uint64_t v36 = v16;
    *(void *)&v36[13] = -1;
    sub_1CC153974((uint64_t)__src, (int *)__p);
    sub_1CD4D04B8(v14, (uint64_t)__src);
    sub_1CD4CFA4C((uint64_t *)__src);
    if (v29 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1CC1569E8(__src, v14);
}

uint64_t sub_1CC0580B0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    char v4 = *(uint64_t **)(a3 + 112);
    unsigned int v5 = *((_DWORD *)v4 + 8);
    if (v5 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v5;
    }
    if (v5 <= 0x16) {
      size_t v7 = v6;
    }
    else {
      size_t v7 = 23;
    }
    uint64_t v8 = *((unsigned int *)v4 + 2);
    if (v8)
    {
      uint64_t v9 = 0;
      int v10 = 0;
      do
        int v10 = 33 * v10 + aLlvmExperiment_45[v9++];
      while (v7 != v9);
      uint64_t v11 = *v4;
      uint64_t v12 = *v4 + 8 * v8 + 8;
      int v13 = 1;
      int v14 = v10;
      while (1)
      {
        uint64_t v15 = v14 & (v8 - 1);
        long long v16 = *(void **)(v11 + 8 * v15);
        if (v16 != (void *)-8
          && (!v16
           || *(_DWORD *)(v12 + 4 * v15) == v10
           && v7 == *v16
           && !memcmp("llvm.experimental.guard", (char *)v16 + *((unsigned int *)v4 + 5), v7)))
        {
          break;
        }
        int v14 = v13 + v15;
        ++v13;
      }
    }
    operator new();
  }
  return result;
}

uint64_t sub_1CC058280(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 8);
  if (!v2 && !*(_DWORD *)(result + 12)) {
    goto LABEL_25;
  }
  uint64_t v3 = *(unsigned int *)(result + 16);
  uint64_t v4 = *(void *)result;
  if (v3 <= 4 * v2 || v3 < 0x41)
  {
    if (!v3)
    {
LABEL_24:
      *(void *)(v1 + 8) = 0;
      goto LABEL_25;
    }
    uint64_t v10 = 16 * v3;
    uint64_t result = v4 + 8;
    while (1)
    {
      uint64_t v11 = *(void *)(result - 8);
      if (v11 == -8192) {
        goto LABEL_22;
      }
      if (v11 != -4096) {
        break;
      }
LABEL_23:
      result += 16;
      v10 -= 16;
      if (!v10) {
        goto LABEL_24;
      }
    }
    uint64_t result = (uint64_t)sub_1CC05AD94((uint64_t *)result);
LABEL_22:
    *(void *)(result - 8) = -4096;
    goto LABEL_23;
  }
  uint64_t v5 = 16 * v3;
  uint64_t result = v4 + 8;
  do
  {
    if ((*(void *)(result - 8) | 0x1000) != 0xFFFFFFFFFFFFF000) {
      uint64_t result = (uint64_t)sub_1CC05AD94((uint64_t *)result);
    }
    result += 16;
    v5 -= 16;
  }
  while (v5);
  if (!v2)
  {
    if (*(_DWORD *)(v1 + 16))
    {
      uint64_t result = MEMORY[0x1D25D9CD0](*(void *)v1, 8);
      *(void *)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
      *(_DWORD *)(v1 + 16) = 0;
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  int v6 = 1 << (33 - __clz(v2 - 1));
  if (v6 <= 64) {
    unsigned int v7 = 64;
  }
  else {
    unsigned int v7 = v6;
  }
  if (v7 == *(_DWORD *)(v1 + 16))
  {
    *(void *)(v1 + 8) = 0;
    uint64_t v8 = 16 * v7;
    uint64_t v9 = *(void **)v1;
    do
    {
      *uint64_t v9 = -4096;
      v9 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)v1, 8);
    unint64_t v32 = (4 * v7 / 3 + 1) | ((unint64_t)(4 * v7 / 3 + 1) >> 1);
    unint64_t v33 = v32 | (v32 >> 2) | ((v32 | (v32 >> 2)) >> 4);
    LODWORD(v33) = (((v33 | (v33 >> 8)) >> 16) | v33 | (v33 >> 8)) + 1;
    *(_DWORD *)(v1 + 16) = v33;
    uint64_t result = (uint64_t)operator new(16 * v33, (std::align_val_t)8uLL);
    *(void *)uint64_t v1 = result;
    *(void *)(v1 + 8) = 0;
    uint64_t v34 = *(unsigned int *)(v1 + 16);
    if (v34)
    {
      uint64_t v35 = 16 * v34;
      do
      {
        *(void *)uint64_t result = -4096;
        result += 16;
        v35 -= 16;
      }
      while (v35);
    }
  }
LABEL_25:
  int v12 = *(_DWORD *)(v1 + 32);
  if (v12 || *(_DWORD *)(v1 + 36))
  {
    int v13 = (void *)(v1 + 24);
    unsigned int v14 = *(_DWORD *)(v1 + 40);
    if (v14 <= 4 * v12 || v14 < 0x41)
    {
      if (v14)
      {
        int v19 = (void *)*v13;
        uint64_t v20 = *v13 + 40 * v14;
        do
        {
          uint64_t v21 = v19[3];
          if (v21 != -4096)
          {
            if (v21 && v21 != -8192)
            {
              unint64_t v22 = v19[1] & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v22 = v19[2];
              uint64_t v23 = (unint64_t *)v19[2];
              if (v23)
              {
                *uint64_t v23 = *v23 & 7 | v22;
              }
              else
              {
                uint64_t v24 = v19[3];
                int v25 = ***(int32x2_t ****)v24;
                unint64_t v26 = (unint64_t)v25[303];
                if (v26 <= v22)
                {
                  uint64_t v27 = v25[305].u32[0];
                  if (v26 + 16 * v27 > v22)
                  {
                    unsigned int v28 = v27 - 1;
                    LODWORD(v29) = v28 & ((v24 >> 4) ^ (v24 >> 9));
                    uint64_t result = v26 + 16 * v29;
                    uint64_t v30 = *(void *)result;
                    if (v24 == *(void *)result)
                    {
LABEL_53:
                      *(void *)uint64_t result = -8192;
                      v25[304] = vadd_s32(v25[304], (int32x2_t)0x1FFFFFFFFLL);
                      uint64_t v24 = v19[3];
                    }
                    else
                    {
                      uint64_t result = 1;
                      while (v30 != -4096)
                      {
                        int v31 = v29 + result;
                        uint64_t result = (result + 1);
                        uint64_t v29 = v31 & v28;
                        uint64_t v30 = *(void *)(v26 + 16 * v29);
                        if (v24 == v30)
                        {
                          uint64_t result = v26 + 16 * v29;
                          goto LABEL_53;
                        }
                      }
                    }
                    *(unsigned char *)(v24 + 17) &= ~1u;
                  }
                }
              }
            }
            v19[3] = -4096;
          }
          v19[4] = 0;
          v19 += 5;
        }
        while (v19 != (void *)v20);
      }
      *(void *)(v1 + 32) = 0;
    }
    else
    {
      sub_1CC05AF30(v1 + 24);
      int v15 = 1 << (33 - __clz(v12 - 1));
      if (v15 <= 64) {
        int v15 = 64;
      }
      if (v12) {
        int v16 = v15;
      }
      else {
        int v16 = 0;
      }
      if (v16 != *(_DWORD *)(v1 + 40))
      {
        uint64_t result = MEMORY[0x1D25D9CD0](*v13, 8);
        if (!v16)
        {
          *int v13 = 0;
          *(void *)(v1 + 32) = 0;
          *(_DWORD *)(v1 + 40) = 0;
          return result;
        }
        unint64_t v17 = (4 * v16 / 3u + 1) | ((unint64_t)(4 * v16 / 3u + 1) >> 1);
        unint64_t v18 = v17 | (v17 >> 2) | ((v17 | (v17 >> 2)) >> 4);
        LODWORD(v18) = (((v18 | (v18 >> 8)) >> 16) | v18 | (v18 >> 8)) + 1;
        *(_DWORD *)(v1 + 40) = v18;
        *(void *)(v1 + 24) = operator new(40 * v18, (std::align_val_t)8uLL);
      }
      return (uint64_t)sub_1CC05A758((uint64_t *)(v1 + 24));
    }
  }
  return result;
}

uint64_t llvm::LazyValueInfoWrapperPass::getLVI(llvm::LazyValueInfoWrapperPass *this)
{
  return (uint64_t)this + 32;
}

void llvm::LazyValueInfo::~LazyValueInfo(llvm::LazyValueInfo *this)
{
}

{
  llvm::LazyValueInfo::releaseMemory((uint64_t *)this);
}

uint64_t *llvm::LazyValueInfo::releaseMemory(uint64_t *this)
{
  uint64_t v1 = this + 3;
  if (this[3])
  {
    uint64_t v2 = sub_1CC0580B0(this + 3, *this, 0);
    MEMORY[0x1D25D9CD0](*(void *)(v2 + 192), 8);
    uint64_t v3 = *(void **)(v2 + 48);
    if (v3 != (void *)(v2 + 64)) {
      free(v3);
    }
    sub_1CC05AF30(v2 + 24);
    MEMORY[0x1D25D9CD0](*(void *)(v2 + 24), 8);
    uint64_t v4 = *(unsigned int *)(v2 + 16);
    uint64_t v5 = *(void *)v2;
    if (v4)
    {
      uint64_t v6 = 16 * v4;
      unsigned int v7 = (uint64_t *)(v5 + 8);
      do
      {
        uint64_t v8 = *(v7 - 1);
        if (v8 != -4096 && v8 != -8192) {
          unsigned int v7 = sub_1CC05AD94(v7);
        }
        v7 += 2;
        v6 -= 16;
      }
      while (v6);
      uint64_t v5 = *(void *)v2;
    }
    MEMORY[0x1D25D9CD0](v5, 8);
    this = (uint64_t *)MEMORY[0x1D25D9CE0](v2, 0x10E0C401BD65BB8);
    void *v1 = 0;
  }
  return this;
}

BOOL llvm::LazyValueInfo::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v18[0] = (void **)a3;
  v18[1] = (void **)&llvm::LazyValueAnalysis::Key;
  uint64_t v4 = *(void *)(a3 + 48);
  uint64_t v3 = *(void *)(a3 + 56);
  if (v3 == v4)
  {
    uint64_t v5 = *(unsigned int *)(a3 + 68);
    uint64_t v6 = (void **)(v3 + 8 * v5);
    if (v5)
    {
      uint64_t v7 = 0;
      while (*(_UNKNOWN **)(v3 + v7) != &llvm::LazyValueAnalysis::Key)
      {
        v7 += 8;
        if (8 * v5 == v7) {
          goto LABEL_6;
        }
      }
      uint64_t v6 = (void **)(v3 + v7);
    }
LABEL_6:
    uint64_t v4 = *(void *)(a3 + 56);
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a3 + 64);
    int v11 = v10 - 1;
    unsigned int v12 = (v10 - 1) & ((&llvm::LazyValueAnalysis::Key >> 4) ^ (&llvm::LazyValueAnalysis::Key >> 9));
    uint64_t v6 = (void **)(v3 + 8 * v12);
    int v13 = *v6;
    if (*v6 == (void *)-1)
    {
      unsigned int v14 = 0;
LABEL_26:
      if (v14) {
        uint64_t v6 = v14;
      }
      if (*v6 != &llvm::LazyValueAnalysis::Key)
      {
        LODWORD(v5) = *(_DWORD *)(a3 + 68);
        uint64_t v6 = (void **)(v3 + 8 * v10);
        goto LABEL_7;
      }
    }
    else
    {
      unsigned int v14 = 0;
      int v15 = 1;
      while (v13 != &llvm::LazyValueAnalysis::Key)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == (void *)-2;
        }
        if (v16) {
          unsigned int v14 = v6;
        }
        unsigned int v17 = v12 + v15++;
        unsigned int v12 = v17 & v11;
        uint64_t v6 = (void **)(v3 + 8 * (v17 & v11));
        int v13 = *v6;
        if (*v6 == (void *)-1) {
          goto LABEL_26;
        }
      }
    }
    LODWORD(v5) = *(_DWORD *)(a3 + 68);
  }
LABEL_7:
  if (v3 == v4) {
    unsigned int v8 = v5;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a3 + 64);
  }
  BOOL v19 = v6 != (void **)(v3 + 8 * v8);
  return !sub_1CBF75724(v18) && !sub_1CBF7593C((uint64_t)v18);
}

uint64_t *llvm::LazyValueInfoWrapperPass::releaseMemory(llvm::LazyValueInfoWrapperPass *this)
{
  return llvm::LazyValueInfo::releaseMemory((uint64_t *)this + 4);
}

void llvm::LazyValueAnalysis::run()
{
}

void *llvm::LazyValueInfo::getConstant(llvm::LazyValueInfo *this, llvm::Value *a2, llvm::Instruction *a3)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)llvm::Value::stripPointerCasts(a2) + 16) == 59) {
    return 0;
  }
  uint64_t v6 = *((void *)a3 + 5);
  uint64_t v7 = sub_1CC0580B0((uint64_t *)this + 3, *(void *)this, *(void *)(*(void *)(v6 + 56) + 40));
  sub_1CC058A30(v7, (uint64_t)a2, v6, a3, (uint64_t)&v12);
  if (v12 == 2)
  {
    unsigned int v8 = (void *)v13[0];
  }
  else if ((v12 & 0xFE) == 4 && (uint64_t v10 = (llvm::LLVMContext *)sub_1CC058CAC((uint64_t)v13)) != 0)
  {
    unsigned int v8 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)a2, v10, v11);
  }
  else
  {
    unsigned int v8 = 0;
  }
  if ((v12 & 0xFE) == 4) {
    sub_1CC05EB8C((uint64_t)v13);
  }
  return v8;
}

void sub_1CC058A30(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, llvm::Instruction *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  sub_1CC05B040((uint64_t)&v20, a1, a2, a3, a4);
  if (!v25)
  {
    sub_1CC05B720(a1);
    sub_1CC05B040((uint64_t)v14, a1, a2, a3, a4);
    sub_1CC067B7C((uint64_t)&v20, v14);
    if (v19)
    {
      if ((v14[0] & 0xFE) == 4)
      {
        if (v18 >= 0x41 && v17) {
          MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
        }
        if (v16 >= 0x41 && v15) {
          MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
        }
      }
    }
  }
  char v10 = v20;
  int v11 = v20;
  *(_WORD *)a5 = v20;
  if ((v11 - 4) < 2)
  {
    unsigned int v12 = v22;
    *(_DWORD *)(a5 + 16) = v22;
    if (v12 > 0x40) {
      operator new[]();
    }
    *(void *)(a5 + 8) = __src;
    unsigned int v13 = v24;
    *(_DWORD *)(a5 + 32) = v24;
    if (v13 > 0x40) {
      operator new[]();
    }
    *(void *)(a5 + 24) = v23;
    char v10 = v20;
    *(_WORD *)a5 = v20 & 0xFF00 | v11;
  }
  else if ((v11 - 2) < 2)
  {
    *(void *)(a5 + 8) = __src;
  }
  if (v25 && (v10 & 0xFE) == 4)
  {
    if (v24 >= 0x41 && v23) {
      MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
    }
    if (v22 >= 0x41)
    {
      if (__src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
    }
  }
}

uint64_t sub_1CC058CAC(uint64_t a1)
{
  unsigned int v11 = *(_DWORD *)(a1 + 8);
  if (v11 > 0x40) {
    operator new[]();
  }
  __s2 = *(void **)a1;
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  unsigned int v2 = v11;
  uint64_t v3 = __s2;
  unsigned int v11 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 > 0x40)
  {
    uint64_t v9 = __s2;
    int v8 = memcmp(*(const void **)(a1 + 16), __s2, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8);
    uint64_t v3 = v9;
    BOOL v5 = v8 == 0;
  }
  else
  {
    BOOL v5 = *(void *)(a1 + 16) == (void)__s2;
  }
  int v6 = v5;
  if (v2 >= 0x41)
  {
    if (v3)
    {
      MEMORY[0x1D25D9CB0](v3, 0x1000C8000313F17);
      if (v11 >= 0x41)
      {
        if (__s2) {
          MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
        }
      }
    }
  }
  if (v6) {
    return a1;
  }
  else {
    return 0;
  }
}

unint64_t *llvm::LazyValueInfo::getConstantRange@<X0>(llvm::LazyValueInfo *this@<X0>, llvm::Value *a2@<X1>, llvm::Instruction *a3@<X2>, char a4@<W3>, unint64_t *a5@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unsigned int v9 = *(_DWORD *)(*(void *)a2 + 8) >> 8;
  uint64_t v10 = *((void *)a3 + 5);
  uint64_t v11 = sub_1CC0580B0((uint64_t *)this + 3, *(void *)this, *(void *)(*(void *)(v10 + 56) + 40));
  sub_1CC058A30(v11, (uint64_t)a2, v10, a3, (uint64_t)&v18);
  if (!(_BYTE)v18)
  {
    unsigned int v12 = a5;
    unsigned int v13 = v9;
    int v14 = 0;
    goto LABEL_5;
  }
  if (v18 != 4 && (v18 != 5 || (a4 & 1) == 0 && !sub_1CC058CAC((uint64_t)&v19)))
  {
    unsigned int v12 = a5;
    unsigned int v13 = v9;
    int v14 = 1;
LABEL_5:
    uint64_t result = llvm::ConstantRange::ConstantRange(v12, v13, v14);
    goto LABEL_6;
  }
  unsigned int v16 = v20;
  *((_DWORD *)a5 + 2) = v20;
  if (v16 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)a5, (const llvm::APInt *)&v19);
  }
  *a5 = (unint64_t)v19;
  uint64_t result = a5 + 2;
  unsigned int v17 = v22;
  *((_DWORD *)a5 + 6) = v22;
  if (v17 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)result, (const llvm::APInt *)&v21);
  }
  *uint64_t result = (unint64_t)v21;
LABEL_6:
  if ((v18 & 0xFE) == 4)
  {
    if (v22 >= 0x41)
    {
      uint64_t result = v21;
      if (v21) {
        uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
      }
    }
    if (v20 >= 0x41)
    {
      uint64_t result = v19;
      if (v19) {
        return (unint64_t *)MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
      }
    }
  }
  return result;
}

void *llvm::LazyValueInfo::getConstantOnEdge(llvm::LazyValueInfo *this, llvm::ConstantInt ***a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4, llvm::Instruction *a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = sub_1CC0580B0((uint64_t *)this + 3, *(void *)this, *(void *)(*((void *)a3 + 7) + 40));
  sub_1CC0591D8(v9, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)&v22);
  char v10 = v22;
  if (v22 == 2)
  {
    uint64_t v11 = __src;
  }
  else
  {
    if ((v22 & 0xFE) != 4) {
      goto LABEL_3;
    }
    unsigned int v21 = v24;
    if (v24 > 0x40) {
      operator new[]();
    }
    __s2 = __src;
    llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    unsigned int v14 = v21;
    uint64_t v15 = __s2;
    unsigned int v21 = 0;
    if (v26 > 0x40)
    {
      char v19 = __s2;
      int v18 = memcmp(__s1, __s2, (((unint64_t)v26 + 63) >> 3) & 0x3FFFFFF8);
      uint64_t v15 = v19;
      BOOL v16 = v18 == 0;
    }
    else
    {
      BOOL v16 = __s1 == __s2;
    }
    int v17 = v16;
    if (v14 >= 0x41)
    {
      if (v15)
      {
        MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
        if (v21 >= 0x41)
        {
          if (__s2) {
            MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
          }
        }
      }
    }
    if (v17)
    {
      uint64_t v11 = llvm::ConstantInt::get(**a2, (llvm::LLVMContext *)&__src, v13);
      char v10 = v22;
    }
    else
    {
LABEL_3:
      uint64_t v11 = 0;
    }
  }
  if ((v10 & 0xFE) == 4)
  {
    if (v26 >= 0x41 && __s1) {
      MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
    }
    if (v24 >= 0x41 && __src) {
      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
  }
  return v11;
}

void sub_1CC0591D8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, llvm::Instruction *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  sub_1CC0650E8((uint64_t)&v22, a1, a2, a3, a4, a5);
  if (!v27)
  {
    sub_1CC05B720(a1);
    sub_1CC0650E8((uint64_t)v16, a1, a2, a3, a4, a5);
    sub_1CC067B7C((uint64_t)&v22, v16);
    if (v21)
    {
      if ((v16[0] & 0xFE) == 4)
      {
        if (v20 >= 0x41 && v19) {
          MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
        }
        if (v18 >= 0x41 && v17) {
          MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
        }
      }
    }
  }
  char v12 = v22;
  int v13 = v22;
  *(_WORD *)a6 = v22;
  if ((v13 - 4) < 2)
  {
    unsigned int v14 = v24;
    *(_DWORD *)(a6 + 16) = v24;
    if (v14 > 0x40) {
      operator new[]();
    }
    *(void *)(a6 + 8) = __src;
    unsigned int v15 = v26;
    *(_DWORD *)(a6 + 32) = v26;
    if (v15 > 0x40) {
      operator new[]();
    }
    *(void *)(a6 + 24) = v25;
    char v12 = v22;
    *(_WORD *)a6 = v22 & 0xFF00 | v13;
  }
  else if ((v13 - 2) < 2)
  {
    *(void *)(a6 + 8) = __src;
  }
  if (v27 && (v12 & 0xFE) == 4)
  {
    if (v26 >= 0x41 && v25) {
      MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
    }
    if (v24 >= 0x41)
    {
      if (__src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
    }
  }
}

uint64_t llvm::LazyValueInfo::getPredicateOnEdge(llvm::LazyValueInfo *this, uint64_t a2, llvm::Value *a3, llvm::Constant *a4, llvm::BasicBlock *a5, llvm::BasicBlock *a6, llvm::Instruction *a7)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = *(void *)(*((void *)a5 + 7) + 40);
  uint64_t v15 = sub_1CC0580B0((uint64_t *)this + 3, *(void *)this, v14);
  sub_1CC0591D8(v15, (uint64_t)a3, (uint64_t)a5, (uint64_t)a6, a7, (uint64_t)&v18);
  uint64_t v16 = sub_1CC05959C(a2, a4, (uint64_t)&v18, (llvm::DataLayout *)(v14 + 272), *((void *)this + 2));
  if ((v18 & 0xFE) == 4)
  {
    if (v22 >= 0x41 && v21) {
      MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
    }
    if (v20 >= 0x41 && v19) {
      MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
    }
  }
  return v16;
}

uint64_t sub_1CC05959C(uint64_t a1, unsigned char *a2, uint64_t a3, llvm::DataLayout *a4, BOOL a5)
{
  int v6 = *(_WORD *)a3;
  if (v6 != 2)
  {
    if ((*(_WORD *)a3 & 0xFE) == 4)
    {
      uint64_t v11 = 0xFFFFFFFFLL;
      if (!a2 || a2[16] != 16) {
        return v11;
      }
      char v12 = (void **)(a3 + 8);
      int v13 = (const llvm::APInt *)(a2 + 24);
      if (a1 == 33)
      {
        if (!llvm::ConstantRange::contains((llvm::ConstantRange *)(a3 + 8), v13)) {
          return 1;
        }
        unsigned int v52 = *(_DWORD *)(a3 + 16);
        if (v52 > 0x40) {
          operator new[]();
        }
        __s2 = *v12;
        llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
        unsigned int v30 = v52;
        int v31 = __s2;
        unsigned int v52 = 0;
        uint64_t v32 = *(unsigned int *)(a3 + 32);
        if (v32 > 0x40) {
          BOOL v33 = memcmp(*(const void **)(a3 + 24), __s2, ((unint64_t)(v32 + 63) >> 3) & 0x3FFFFFF8) == 0;
        }
        else {
          BOOL v33 = *(void *)(a3 + 24) == (void)__s2;
        }
        char v34 = v33;
        if (v30 >= 0x41)
        {
          if (v31)
          {
            MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
            if (v52 >= 0x41)
            {
              if (__s2) {
                MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
              }
            }
          }
        }
        if ((v34 & 1) == 0) {
          return 0xFFFFFFFFLL;
        }
      }
      else
      {
        if (a1 != 32)
        {
          llvm::ConstantRange::makeExactICmpRegion(a1, (uint64_t)v13, (uint64_t)&__s2);
          if (llvm::ConstantRange::contains((llvm::ConstantRange *)&__s2, (const llvm::ConstantRange *)(a3 + 8)))
          {
            int v35 = 0;
            uint64_t v11 = 1;
          }
          else
          {
            llvm::ConstantRange::inverse((uint64_t)&__s2, (uint64_t)&v47);
            BOOL v36 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v47, (const llvm::ConstantRange *)(a3 + 8));
            if (v50 >= 0x41 && v49) {
              MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
            }
            if (v48 >= 0x41 && v47) {
              MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
            }
            uint64_t v11 = 0;
            int v35 = !v36;
          }
          if (v54 >= 0x41 && v53) {
            MEMORY[0x1D25D9CB0](v53, 0x1000C8000313F17);
          }
          if (v52 >= 0x41 && __s2) {
            MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
          }
          if (v35) {
            return 0xFFFFFFFFLL;
          }
          return v11;
        }
        if (llvm::ConstantRange::contains((llvm::ConstantRange *)(a3 + 8), v13))
        {
          unsigned int v52 = *(_DWORD *)(a3 + 16);
          if (v52 > 0x40) {
            operator new[]();
          }
          __s2 = *v12;
          llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
          unsigned int v14 = v52;
          uint64_t v15 = __s2;
          unsigned int v52 = 0;
          uint64_t v16 = *(unsigned int *)(a3 + 32);
          if (v16 > 0x40) {
            BOOL v17 = memcmp(*(const void **)(a3 + 24), __s2, ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8) == 0;
          }
          else {
            BOOL v17 = *(void *)(a3 + 24) == (void)__s2;
          }
          char v18 = v17;
          if (v14 >= 0x41)
          {
            if (v15)
            {
              MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
              if (v52 >= 0x41)
              {
                if (__s2) {
                  MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
                }
              }
            }
          }
          if ((v18 & 1) == 0) {
            return 0xFFFFFFFFLL;
          }
          return 1;
        }
      }
      return 0;
    }
    if (v6 == 3)
    {
      if (a1 == 33)
      {
        uint64_t v28 = llvm::ConstantFoldCompareInstOperands(33, *(llvm::ConstantExpr **)(a3 + 8), (llvm::Constant *)a2, a4, a5);
        LODWORD(v20) = *((unsigned __int8 *)v28 + 16);
        if (v28 && v20 == 16)
        {
          uint64_t v29 = *((unsigned int *)v28 + 8);
          if (v29 >= 0x41)
          {
            int v43 = 0;
            int64_t v44 = (unint64_t)(v29 + 63) >> 6;
            do
            {
              BOOL v24 = v44-- < 1;
              if (v24) {
                break;
              }
              unint64_t v45 = *(void *)(*((void *)v28 + 3) + 8 * v44);
              v43 += __clz(v45);
            }
            while (!v45);
            int v46 = v29 | 0xFFFFFFC0;
            if ((v29 & 0x3F) == 0) {
              int v46 = 0;
            }
            if (v43 + v46 != v29) {
              return 0xFFFFFFFFLL;
            }
            return 1;
          }
          if (!*((void *)v28 + 3)) {
            return 1;
          }
          return 0xFFFFFFFFLL;
        }
        if (v28 && v20 == 17)
        {
          if (sub_1CB844168((uint64_t)v28, 0.0)) {
            return 1;
          }
          return 0xFFFFFFFFLL;
        }
        LOBYTE(v20) = v20 - 13;
        if (v20 >= 8u) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v20 = (char)v20;
        uint64_t v38 = (unsigned int *)&unk_1CFAC3ADC;
      }
      else
      {
        if (a1 != 32) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v19 = llvm::ConstantFoldCompareInstOperands(33, *(llvm::ConstantExpr **)(a3 + 8), (llvm::Constant *)a2, a4, a5);
        LODWORD(v20) = *((unsigned __int8 *)v19 + 16);
        if (v19 && v20 == 16)
        {
          uint64_t v21 = *((unsigned int *)v19 + 8);
          if (v21 >= 0x41)
          {
            int v39 = 0;
            int64_t v40 = (unint64_t)(v21 + 63) >> 6;
            do
            {
              BOOL v24 = v40-- < 1;
              if (v24) {
                break;
              }
              unint64_t v41 = *(void *)(*((void *)v19 + 3) + 8 * v40);
              v39 += __clz(v41);
            }
            while (!v41);
            uint64_t v11 = 0;
            int v42 = v21 | 0xFFFFFFC0;
            if ((v21 & 0x3F) == 0) {
              int v42 = 0;
            }
            if (v39 + v42 != v21) {
              return 0xFFFFFFFFLL;
            }
            return v11;
          }
          if (!*((void *)v19 + 3)) {
            return 0;
          }
          return 0xFFFFFFFFLL;
        }
        if (v19 && v20 == 17)
        {
          if (sub_1CB844168((uint64_t)v19, 0.0)) {
            return 0;
          }
          return 0xFFFFFFFFLL;
        }
        LOBYTE(v20) = v20 - 13;
        if (v20 >= 8u) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v20 = (char)v20;
        uint64_t v38 = (unsigned int *)&unk_1CFAC3ABC;
      }
      return v38[v20];
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = llvm::ConstantFoldCompareInstOperands(a1, *(llvm::ConstantExpr **)(a3 + 8), (llvm::Constant *)a2, a4, a5);
  if (v7) {
    BOOL v8 = *((unsigned char *)v7 + 16) == 16;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = *((unsigned int *)v7 + 8);
  if (v9 > 0x40)
  {
    int v22 = 0;
    int64_t v23 = (unint64_t)(v9 + 63) >> 6;
    do
    {
      BOOL v24 = v23-- < 1;
      if (v24) {
        break;
      }
      unint64_t v25 = *(void *)(*((void *)v7 + 3) + 8 * v23);
      v22 += __clz(v25);
    }
    while (!v25);
    int v26 = v9 | 0xFFFFFFC0;
    if ((v9 & 0x3F) == 0) {
      int v26 = 0;
    }
    BOOL v10 = v22 + v26 == v9;
  }
  else
  {
    BOOL v10 = *((void *)v7 + 3) == 0;
  }
  int v27 = v10;
  return v27 ^ 1u;
}

uint64_t llvm::LazyValueInfo::getPredicateAt(llvm::LazyValueInfo *this, uint64_t a2, llvm::Value *a3, llvm::Constant *a4, llvm::Instruction *a5, int a6)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(*(void *)(*((void *)a5 + 5) + 56) + 40);
  int v13 = (llvm::DataLayout *)(v12 + 272);
  if (*(unsigned char *)(*(void *)a3 + 8) != 15) {
    goto LABEL_20;
  }
  unsigned int v14 = *((unsigned __int8 *)a4 + 16);
  if (a4 && v14 == 16)
  {
    uint64_t v15 = *((unsigned int *)a4 + 8);
    if (v15 >= 0x41)
    {
      int v43 = 0;
      int64_t v44 = (unint64_t)(v15 + 63) >> 6;
      do
      {
        BOOL v41 = v44-- < 1;
        if (v41) {
          break;
        }
        unint64_t v45 = *(void *)(*((void *)a4 + 3) + 8 * v44);
        v43 += __clz(v45);
      }
      while (!v45);
      int v46 = v15 | 0xFFFFFFC0;
      if ((v15 & 0x3F) == 0) {
        int v46 = 0;
      }
      if (v43 + v46 != v15) {
        goto LABEL_20;
      }
    }
    else if (*((void *)a4 + 3))
    {
      goto LABEL_20;
    }
  }
  else if (a4 && v14 == 17)
  {
    if ((sub_1CB844168((uint64_t)a4, 0.0) & 1) == 0) {
      goto LABEL_20;
    }
  }
  else
  {
    BOOL v41 = v14 > 0x14;
    int v19 = (1 << v14) & 0x1C2000;
    if (v41 || v19 == 0) {
      goto LABEL_20;
    }
  }
  uint64_t v16 = llvm::Value::stripPointerCastsSameRepresentation(a3);
  if (!v16 || *((unsigned __int8 *)v16 + 16) < 0x1Cu || (BOOL v17 = v16, !*((void *)v16 + 5))) {
    BOOL v17 = 0;
  }
  uint64_t v52 = v12 + 272;
  uint64_t v53 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  unsigned int v54 = v17;
  char v57 = 1;
  if (sub_1CC1620B8((uint64_t)v16, 0, (uint64_t)&v52))
  {
    if (a2 == 32) {
      return 0;
    }
    if (a2 == 33) {
      return 1;
    }
  }
LABEL_20:
  uint64_t v21 = sub_1CC0580B0((uint64_t *)this + 3, *(void *)this, v12);
  uint64_t v22 = v21;
  if (a6)
  {
    sub_1CC058A30(v21, (uint64_t)a3, *((void *)a5 + 5), a5, (uint64_t)&v47);
  }
  else
  {
    unsigned int v23 = *((unsigned __int8 *)a3 + 16);
    if (v23 <= 0x14)
    {
      __int16 v47 = 0;
      if (v23 - 11 > 1) {
        sub_1CC05E6A4((uint64_t)&v47, (uint64_t)a3, 0);
      }
      else {
        __int16 v47 = 1;
      }
    }
    else
    {
      __int16 v47 = 6;
      if (v23 >= 0x1C)
      {
        sub_1CC064DB0((uint64_t)&v52, (uint64_t)a3);
        if ((v47 & 0xFE) == 4)
        {
          if (v51 >= 0x41 && v50) {
            MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
          }
          if (v49 >= 0x41 && v48) {
            MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
          }
        }
        __int16 v47 = v52;
        if (v52 - 2 < 2)
        {
          uint64_t v48 = v53;
        }
        else if (v52 - 4 <= 1)
        {
          unsigned int v49 = v54;
          uint64_t v48 = v53;
          LODWORD(v54) = 0;
          unsigned int v51 = v56;
          uint64_t v50 = v55;
          __int16 v47 = v52;
        }
      }
      sub_1CC05DD58(v22, (uint64_t)a3, (uint64_t)&v47, a5);
    }
  }
  uint64_t v18 = sub_1CC05959C(a2, a4, (uint64_t)&v47, v13, *((void *)this + 2));
  if (v18 != -1) {
    goto LABEL_80;
  }
  BOOL v24 = (llvm::BasicBlock *)*((void *)a5 + 5);
  uint64_t v25 = *((void *)v24 + 1);
  if (v25)
  {
    while (1)
    {
      uint64_t v26 = *(void *)(v25 + 24);
      unsigned int v27 = *(unsigned __int8 *)(v26 + 16);
      BOOL v28 = v26 && v27 >= 0x1C;
      if (v28 && v27 - 29 < 0xB) {
        break;
      }
      uint64_t v25 = *(void *)(v25 + 8);
      if (!v25) {
        goto LABEL_79;
      }
    }
    unsigned int v30 = *((unsigned __int8 *)a3 + 16);
    if (v30 == 83)
    {
      if (*((llvm::BasicBlock **)a3 + 5) != v24) {
        goto LABEL_68;
      }
      int v31 = *((_DWORD *)a3 + 5);
      uint64_t v32 = v31 & 0x7FFFFFF;
      if ((v31 & 0x7FFFFFF) == 0) {
        goto LABEL_68;
      }
      uint64_t v33 = 0;
      LODWORD(v18) = -1;
      while (1)
      {
        int v34 = *((_DWORD *)a3 + 5);
        int v35 = (v34 & 0x40000000) != 0
            ? (llvm::Value *)*((void *)a3 - 1)
            : (llvm::Value *)((char *)a3 - 32 * (v34 & 0x7FFFFFF));
        unsigned int PredicateOnEdge = llvm::LazyValueInfo::getPredicateOnEdge(this, a2, *((llvm::Value **)v35 + 4 * v33), a4, *((llvm::BasicBlock **)v35 + 4 * *((unsigned int *)a3 + 15) + v33), v24, a5);
        unsigned int v37 = v18 == PredicateOnEdge ? v18 : -1;
        uint64_t v18 = v33 ? v37 : PredicateOnEdge;
        if (v18 == -1) {
          break;
        }
        if (++v33 == v32) {
          goto LABEL_80;
        }
      }
      unsigned int v30 = *((unsigned __int8 *)a3 + 16);
    }
    if (v30 < 0x1C) {
      goto LABEL_69;
    }
LABEL_68:
    if (*((llvm::BasicBlock **)a3 + 5) != v24)
    {
LABEL_69:
      uint64_t v18 = llvm::LazyValueInfo::getPredicateOnEdge(this, a2, a3, a4, *(llvm::BasicBlock **)(*(void *)(v25 + 24) + 40), v24, a5);
      if (v18 != -1)
      {
        while (1)
        {
          uint64_t v25 = *(void *)(v25 + 8);
          if (!v25) {
            break;
          }
          uint64_t v38 = *(void *)(v25 + 24);
          unsigned int v39 = *(unsigned __int8 *)(v38 + 16);
          if (v38) {
            BOOL v40 = v39 >= 0x1C;
          }
          else {
            BOOL v40 = 0;
          }
          BOOL v41 = !v40 || v39 - 29 > 0xA;
          if (!v41
            && llvm::LazyValueInfo::getPredicateOnEdge(this, a2, a3, a4, *(llvm::BasicBlock **)(v38 + 40), v24, a5) != v18)
          {
            goto LABEL_79;
          }
        }
      }
      goto LABEL_80;
    }
  }
LABEL_79:
  uint64_t v18 = 0xFFFFFFFFLL;
LABEL_80:
  if ((v47 & 0xFE) == 4)
  {
    if (v51 >= 0x41 && v50) {
      MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
    }
    if (v49 >= 0x41 && v48) {
      MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
    }
  }
  return v18;
}

void llvm::LazyValueInfo::threadEdge(llvm::LazyValueInfo *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4)
{
  v67[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)this + 3);
  BOOL v5 = (uint64_t *)((char *)this + 24);
  if (!v6) {
    return;
  }
  uint64_t v9 = sub_1CC0580B0(v5, *(void *)this, *(void *)(*((void *)a2 + 7) + 40));
  BOOL v10 = (char *)operator new(8uLL);
  *(void *)BOOL v10 = a3;
  uint64_t v11 = v10 + 8;
  uint64_t v65 = 0;
  if (sub_1CBB0BF40(*(void *)v9, *(_DWORD *)(v9 + 16), (uint64_t)a3, &v65)) {
    BOOL v12 = v65 == (void *)(*(void *)v9 + 16 * *(unsigned int *)(v9 + 16));
  }
  else {
    BOOL v12 = 1;
  }
  if (v12 || (uint64_t v13 = *((void *)v65 + 1)) == 0 || (v14 = *(_DWORD *)(v13 + 200), v14 < 2))
  {
LABEL_8:
    operator delete(v10);
    return;
  }
  uint64_t v16 = (uint64_t *)sub_1CD49B408((int *)(v13 + 200));
  if (v14)
  {
    uint64_t v17 = v13 + 208;
    uint64_t v18 = 4;
  }
  else
  {
    uint64_t v17 = *(void *)(v13 + 208);
    uint64_t v18 = *(unsigned int *)(v13 + 216);
  }
  uint64_t v65 = v67;
  uint64_t v66 = 0x400000000;
  sub_1CD49B480((uint64_t)&v65, v16, v15, (uint64_t *)(v17 + 8 * v18));
  int v19 = v10 + 8;
  uint64_t v20 = v10 + 8;
  BOOL v63 = a4;
  do
  {
    uint64_t v22 = (llvm::BasicBlock *)*((void *)v20 - 1);
    v20 -= 8;
    uint64_t v21 = (uint64_t)v22;
    if (v22 != a4)
    {
      uint64_t v64 = 0;
      if (sub_1CBB0BF40(*(void *)v9, *(_DWORD *)(v9 + 16), v21, &v64)
        && v64 != *(void *)v9 + 16 * *(unsigned int *)(v9 + 16))
      {
        uint64_t v24 = *(void *)(v64 + 8);
        unsigned int v26 = *(_DWORD *)(v24 + 200);
        uint64_t v25 = v24 + 200;
        if (v26 >= 2)
        {
          if (v66)
          {
            int v27 = 0;
            BOOL v28 = (uint64_t *)v65;
            uint64_t v29 = 8 * v66;
            do
            {
              uint64_t v30 = *v28++;
              v27 |= sub_1CC05ABB4(v25, v30);
              v29 -= 8;
            }
            while (v29);
            a4 = v63;
            if (v27)
            {
              uint64_t v31 = *(void *)(v21 + 40);
              if (v31 != v21 + 40)
              {
                uint64_t v32 = v31 - 24;
                if (v31) {
                  uint64_t v33 = v31 - 24;
                }
                else {
                  uint64_t v33 = 0;
                }
                int v34 = *(unsigned __int8 *)(v33 + 16);
                int v35 = v34 - 29;
                if (v34 != 30)
                {
                  unsigned int v58 = 2;
                  switch(v35)
                  {
                    case 1:
                      __break(1u);
                      JUMPOUT(0x1CC05A4F8);
                    case 2:
                      unsigned int v58 = (*(_DWORD *)(v33 + 20) >> 1) & 0x3FFFFFF;
                      goto LABEL_33;
                    case 3:
                    case 9:
                      unsigned int v58 = (*(_DWORD *)(v33 + 20) & 0x7FFFFFF) - 1;
                      goto LABEL_33;
                    case 4:
                      goto LABEL_34;
                    case 7:
                      unsigned int v58 = *(_WORD *)(v33 + 18) & 1;
                      goto LABEL_33;
                    case 8:
                      unsigned int v58 = 1;
                      goto LABEL_34;
                    case 10:
                      unsigned int v58 = *(_DWORD *)(v33 + 80) + 1;
                      goto LABEL_33;
                    default:
                      goto LABEL_74;
                  }
                }
                unsigned int v58 = (*(_DWORD *)(v33 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
LABEL_33:
                if ((int)v58 >= 1)
                {
LABEL_34:
                  uint64_t v36 = v20 - v10;
                  uint64_t v37 = v58;
                  uint64_t v38 = &v10[(v20 - v10) & 0xFFFFFFFFFFFFFFF8];
                  if (v58 > (v11 - v20) >> 3)
                  {
                    uint64_t v39 = v36 >> 3;
                    unint64_t v40 = (v36 >> 3) + v58;
                    if (v40 >> 61) {
                      abort();
                    }
                    if ((v11 - v10) >> 2 > v40) {
                      unint64_t v40 = (v11 - v10) >> 2;
                    }
                    unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
                    if ((unint64_t)(v11 - v10) < 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v41 = v40;
                    }
                    unint64_t v60 = v41;
                    long long __src = &v10[(v20 - v10) & 0xFFFFFFFFFFFFFFF8];
                    if (v41)
                    {
                      if (v41 >> 61) {
                        sub_1CB833614();
                      }
                      int v42 = (char *)operator new(8 * v41);
                    }
                    else
                    {
                      int v42 = 0;
                    }
                    uint64_t v47 = 0;
                    uint64_t v48 = &v42[8 * v39];
                    unsigned int v59 = &v48[8 * v37];
                    uint64_t v49 = 8 * v37;
                    do
                    {
                      *(void *)&v48[8 * v47] = llvm::Instruction::getSuccessor((llvm::Instruction *)v33, v47);
                      ++v47;
                      v49 -= 8;
                    }
                    while (v49);
                    if ((unint64_t)(v20 - v10) >= 8)
                    {
                      uint64_t v50 = 8 * v39;
                      do
                      {
                        *(void *)&v42[v50 - 8] = *(void *)&v10[v50 - 8];
                        v50 -= 8;
                      }
                      while (v50);
                      uint64_t v48 = v42;
                    }
                    if (v20 != __src) {
                      memmove(v59, __src, v20 - __src);
                    }
                    uint64_t v11 = &v42[8 * v60];
                    uint64_t v20 = &v59[v20 - __src];
                    if (v10) {
                      operator delete(v10);
                    }
                    BOOL v10 = v48;
                    goto LABEL_73;
                  }
                  unint64_t v43 = v20 - v38;
                  uint64_t v44 = (v20 - v38) >> 3;
                  if (v44 < v37)
                  {
                    uint64_t v61 = v20 - v38;
                    unint64_t v45 = v43 >> 3;
                    if (v37 == (v43 >> 3))
                    {
                      unsigned int v51 = v20;
                    }
                    else
                    {
                      unsigned int v51 = v19 - 8;
                      uint64_t v52 = v20;
                      do
                      {
                        *(void *)uint64_t v52 = llvm::Instruction::getSuccessor((llvm::Instruction *)v33, v45);
                        v52 += 8;
                        LODWORD(v45) = v45 + 1;
                        v51 += 8;
                      }
                      while (v37 != v45);
                    }
                    int v46 = v51;
                    if (v61 < 1)
                    {
                      uint64_t v20 = v51;
LABEL_73:
                      a4 = v63;
                      goto LABEL_74;
                    }
                    uint64_t v38 = &v10[(v20 - v10) & 0xFFFFFFFFFFFFFFF8];
                  }
                  else
                  {
                    uint64_t v33 = v32;
                    int v46 = v20;
                    LODWORD(v44) = v37;
                  }
                  uint64_t v53 = &v46[-8 * v37];
                  unsigned int v54 = v46;
                  while (v53 < v20)
                  {
                    uint64_t v55 = *(void *)v53;
                    v53 += 8;
                    *(void *)unsigned int v54 = v55;
                    v54 += 8;
                  }
                  uint64_t v56 = &v38[8 * v37];
                  if (v46 != v56) {
                    memmove(&v46[-8 * ((v46 - v56) >> 3)], v38, v46 - v56);
                  }
                  if (v44)
                  {
                    uint64_t v57 = 0;
                    do
                    {
                      *(void *)&v38[8 * v57] = llvm::Instruction::getSuccessor((llvm::Instruction *)v33, v57);
                      ++v57;
                    }
                    while (v44 != v57);
                  }
                  uint64_t v20 = v54;
                  goto LABEL_73;
                }
              }
            }
          }
        }
      }
    }
LABEL_74:
    int v19 = v20;
  }
  while (v10 != v20);
  if (v65 != v67) {
    free(v65);
  }
  if (v10) {
    goto LABEL_8;
  }
}

int32x2_t llvm::LazyValueInfo::eraseBlock(llvm::LazyValueInfo *this, llvm::BasicBlock *a2)
{
  uint64_t v4 = *((void *)this + 3);
  uint64_t v3 = (uint64_t *)((char *)this + 24);
  if (v4)
  {
    uint64_t v6 = sub_1CC0580B0(v3, *(void *)this, *(void *)(*((void *)a2 + 7) + 40));
    uint64_t v9 = a2;
    BOOL v10 = 0;
    if (sub_1CC063874((uint64_t *)v6, &v9, &v10))
    {
      BOOL v8 = v10;
      sub_1CC05AD94(v10 + 1);
      void *v8 = -8192;
      int32x2_t result = vadd_s32(*(int32x2_t *)(v6 + 8), (int32x2_t)0x1FFFFFFFFLL);
      *(int32x2_t *)(v6 + 8) = result;
    }
  }
  return result;
}

uint64_t *llvm::LazyValueInfo::clear(llvm::LazyValueInfo *this, const llvm::Module *a2)
{
  uint64_t v4 = *((void *)this + 3);
  int32x2_t result = (uint64_t *)((char *)this + 24);
  if (v4)
  {
    uint64_t v5 = sub_1CC0580B0(result, *(void *)this, (uint64_t)a2);
    return (uint64_t *)sub_1CC058280(v5);
  }
  return result;
}

void llvm::initializeLazyValueInfoPrinterPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC5FA8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC05A660;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCC5FA8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC05A660(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC5FA0, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC057C80;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCC5FA0, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
  operator new();
}

uint64_t *sub_1CC05A758(uint64_t *result)
{
  result[1] = 0;
  uint64_t v1 = *((unsigned int *)result + 4);
  if (v1)
  {
    uint64_t v2 = 5 * v1;
    uint64_t v3 = *result;
    uint64_t v4 = 8 * v2;
    uint64_t v5 = (void *)(*result + 16);
    do
    {
      *(v5 - 1) = 2;
      void *v5 = 0;
      v5[1] = -4096;
      void v5[2] = 0;
      *(v5 - 2) = &unk_1F2604D20;
      v5 += 5;
      v3 += 40;
      v4 -= 40;
    }
    while (v4);
  }
  return result;
}

int32x2_t sub_1CC05A7B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(int32x2_t **)(a1 + 32);
  uint64_t v3 = v2[2].u32[0];
  uint64_t v4 = *(void *)v2 + 16 * v3;
  if (v2[1].i32[0])
  {
    if (v3)
    {
      uint64_t v5 = 16 * v3;
      uint64_t v6 = (void *)*v2;
      while ((*v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 2;
        v5 -= 16;
        if (!v5) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      uint64_t v6 = (void *)*v2;
    }
  }
  else
  {
LABEL_6:
    uint64_t v6 = (void *)(*(void *)v2 + 16 * v3);
  }
  uint64_t v7 = *(void *)v2 + 16 * v3;
  while (v6 != (void *)v7)
  {
    BOOL v8 = (_DWORD *)v6[1];
    uint64_t v34 = 0;
    if (sub_1CC05AB0C((uint64_t)v8, v1, &v34))
    {
      uint64_t v12 = v34;
      if ((*(_WORD *)(v34 + 8) & 0xFE) == 4)
      {
        if (*(_DWORD *)(v34 + 40) >= 0x41u)
        {
          uint64_t v14 = *(void *)(v34 + 32);
          if (v14) {
            MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
          }
        }
        if (*(_DWORD *)(v12 + 24) >= 0x41u)
        {
          uint64_t v15 = *(void *)(v12 + 16);
          if (v15) {
            MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
          }
        }
      }
      *(void *)uint64_t v12 = -8192;
      int v13 = v8[1] + 1;
      *v8 -= 2;
      v8[1] = v13;
    }
    sub_1CC05ABB4(v6[1] + 200, v1);
    uint64_t v9 = v6[1];
    if (*(unsigned char *)(v9 + 264))
    {
      uint64_t v34 = 0;
      if (sub_1CC05AC44(v9 + 240, v1, &v34))
      {
        *(void *)uint64_t v34 = -8192;
        int v10 = *(_DWORD *)(v9 + 244) + 1;
        *(_DWORD *)(v9 + 240) -= 2;
        *(_DWORD *)(v9 + 244) = v10;
      }
    }
    uint64_t v11 = v6 + 2;
    uint64_t v6 = (void *)v4;
    if (v11 != (void *)v4)
    {
      uint64_t v6 = v11;
      while ((*v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 2;
        if (v6 == (void *)v4)
        {
          uint64_t v6 = (void *)v4;
          break;
        }
      }
    }
  }
  uint64_t v16 = (uint64_t)v2[3];
  unsigned int v17 = v2[5].u32[0];
  uint64_t v18 = (void *)sub_1CC05AAA8(v16, v17, v1);
  if ((void *)(v16 + 40 * v17) != v18)
  {
    uint64_t v20 = v18[3];
    if (v20 != -8192)
    {
      if (v20 != -4096 && v20 != 0)
      {
        unint64_t v22 = v18[1] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v22 = v18[2];
        unsigned int v23 = (unint64_t *)v18[2];
        if (v23)
        {
          *unsigned int v23 = *v23 & 7 | v22;
        }
        else
        {
          uint64_t v24 = v18[3];
          uint64_t v25 = ***(int32x2_t ****)v24;
          unint64_t v26 = (unint64_t)v25[303];
          if (v26 <= v22)
          {
            uint64_t v27 = v25[305].u32[0];
            if (v26 + 16 * v27 > v22)
            {
              unsigned int v28 = v27 - 1;
              LODWORD(v29) = v28 & ((v24 >> 4) ^ (v24 >> 9));
              uint64_t v30 = (uint64_t *)(v26 + 16 * v29);
              uint64_t v31 = *v30;
              if (v24 == *v30)
              {
LABEL_46:
                *uint64_t v30 = -8192;
                v25[304] = vadd_s32(v25[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v24 = v18[3];
              }
              else
              {
                int v32 = 1;
                while (v31 != -4096)
                {
                  int v33 = v29 + v32++;
                  uint64_t v29 = v33 & v28;
                  uint64_t v31 = *(void *)(v26 + 16 * v29);
                  if (v24 == v31)
                  {
                    uint64_t v30 = (uint64_t *)(v26 + 16 * v29);
                    goto LABEL_46;
                  }
                }
              }
              *(unsigned char *)(v24 + 17) &= ~1u;
            }
          }
        }
      }
      v18[3] = -8192;
    }
    v18[4] = 0;
    int32x2_t result = vadd_s32(v2[4], (int32x2_t)0x1FFFFFFFFLL);
    v2[4] = result;
  }
  return result;
}

uint64_t sub_1CC05AAA8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return a1 + 40 * a2;
  }
  unsigned int v3 = a2 - 1;
  unsigned int v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  uint64_t v5 = a1 + 40 * v4;
  uint64_t v6 = *(void *)(v5 + 24);
  if (v6 != a3)
  {
    int v7 = 1;
    while (v6 != -4096)
    {
      unsigned int v8 = v4 + v7++;
      unsigned int v4 = v8 & v3;
      uint64_t v5 = a1 + 40 * (v8 & v3);
      uint64_t v6 = *(void *)(v5 + 24);
      if (v6 == a3) {
        return v5;
      }
    }
    return a1 + 40 * a2;
  }
  return v5;
}

uint64_t sub_1CC05AB0C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v7 = (void *)(v3 + 48 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      int v7 = (void *)(v3 + 48 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_17;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC05ABB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v3 = 4;
  }
  else
  {
    int v3 = *(_DWORD *)(a1 + 16);
    if (!v3) {
      return 0;
    }
    uint64_t v2 = *(void *)(a1 + 8);
  }
  int v4 = v3 - 1;
  LODWORD(v5) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v6 = (uint64_t *)(v2 + 8 * v5);
  uint64_t v7 = *v6;
  if (*v6 == a2)
  {
LABEL_10:
    *unsigned int v6 = -8192;
    int v10 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)a1 -= 2;
    *(_DWORD *)(a1 + 4) = v10;
    return 1;
  }
  int v8 = 1;
  while (v7 != -4096)
  {
    int v9 = v5 + v8++;
    uint64_t v5 = v9 & v4;
    uint64_t v7 = *(void *)(v2 + 8 * v5);
    if (v7 == a2)
    {
      unsigned int v6 = (uint64_t *)(v2 + 8 * v5);
      goto LABEL_10;
    }
  }
  return 0;
}

uint64_t sub_1CC05AC44(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 2;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    int v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        int v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_8;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void sub_1CC05ACF0(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v4;
    int v5 = operator new(16 * v4, (std::align_val_t)8uLL);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = 0;
    uint64_t v6 = *(unsigned int *)(a1 + 16);
    if (v6)
    {
      memset_pattern16(v5, &unk_1CFAC3070, 16 * v6);
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
}

uint64_t *sub_1CC05AD94(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(v2 + 264))
    {
      if ((*(unsigned char *)(v2 + 240) & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)(v2 + 248), 8);
      }
      *(unsigned char *)(v2 + 264) = 0;
    }
    if ((*(unsigned char *)(v2 + 200) & 1) == 0) {
      MEMORY[0x1D25D9CD0](*(void *)(v2 + 208), 8);
    }
    uint64_t v3 = sub_1CC05AE1C(v2);
    MEMORY[0x1D25D9CE0](v3, 0x1000C40F44D7D81);
  }
  return a1;
}

uint64_t sub_1CC05AE1C(uint64_t a1)
{
  if ((*(unsigned char *)a1 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 8), 8);
  }
  return a1;
}

uint64_t sub_1CC05AE5C(uint64_t result)
{
  if (*(unsigned char *)result)
  {
    uint64_t v1 = result + 8;
    uint64_t v2 = 4;
  }
  else
  {
    uint64_t v2 = *(unsigned int *)(result + 16);
    if (!v2) {
      return result;
    }
    uint64_t v1 = *(void *)(result + 8);
  }
  uint64_t v3 = 48 * v2;
  uint64_t v4 = v1 + 24;
  do
  {
    uint64_t v5 = *(void *)(v4 - 24);
    if (v5 != -4096 && v5 != -8192 && (*(_WORD *)(v4 - 16) & 0xFE) == 4)
    {
      if (*(_DWORD *)(v4 + 16) >= 0x41u)
      {
        uint64_t result = *(void *)(v4 + 8);
        if (result) {
          uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
        }
      }
      if (*(_DWORD *)v4 >= 0x41u)
      {
        uint64_t result = *(void *)(v4 - 8);
        if (result) {
          uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
        }
      }
    }
    v4 += 48;
    v3 -= 48;
  }
  while (v3);
  return result;
}

uint64_t sub_1CC05AF30(uint64_t result)
{
  unsigned int v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void **)result;
    uint64_t v3 = *(void *)result + 40 * v1;
    do
    {
      uint64_t v4 = v2[3];
      if (v4 != -8192 && v4 != -4096 && v4 != 0)
      {
        unint64_t v6 = v2[1] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v6 = v2[2];
        uint64_t v7 = (unint64_t *)v2[2];
        if (v7)
        {
          unint64_t *v7 = *v7 & 7 | v6;
        }
        else
        {
          uint64_t v8 = v2[3];
          int v9 = ***(int32x2_t ****)v8;
          unint64_t v10 = (unint64_t)v9[303];
          if (v10 <= v6)
          {
            uint64_t v11 = v9[305].u32[0];
            if (v10 + 16 * v11 > v6)
            {
              unsigned int v12 = v11 - 1;
              LODWORD(v13) = v12 & ((v8 >> 4) ^ (v8 >> 9));
              uint64_t v14 = (uint64_t *)(v10 + 16 * v13);
              uint64_t v15 = *v14;
              if (v8 == *v14)
              {
LABEL_19:
                *uint64_t v14 = -8192;
                v9[304] = vadd_s32(v9[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v8 = v2[3];
              }
              else
              {
                int v16 = 1;
                while (v15 != -4096)
                {
                  int v17 = v13 + v16++;
                  uint64_t v13 = v17 & v12;
                  uint64_t v15 = *(void *)(v10 + 16 * v13);
                  if (v8 == v15)
                  {
                    uint64_t v14 = (uint64_t *)(v10 + 16 * v13);
                    goto LABEL_19;
                  }
                }
              }
              *(unsigned char *)(v8 + 17) &= ~1u;
            }
          }
        }
      }
      v2 += 5;
    }
    while (v2 != (void *)v3);
  }
  return result;
}

void sub_1CC05B040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Instruction *a5)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unsigned int v10 = *(unsigned __int8 *)(a3 + 16);
    if (v10 <= 0x14)
    {
      LOWORD(v97) = 0;
      if (v10 - 11 <= 1)
      {
        __int16 v11 = 1;
LABEL_62:
        *(_WORD *)a1 = v11;
        goto LABEL_63;
      }
      sub_1CC05E6A4((uint64_t)&v97, a3, 0);
      __int16 v11 = v97;
      int v19 = v97;
      *(_WORD *)a1 = v97;
      if ((v19 - 2) < 2)
      {
        *(void *)(a1 + 8) = v98;
      }
      else if ((v19 - 4) <= 1)
      {
        *(_DWORD *)(a1 + 16) = v99;
        *(void *)(a1 + 8) = v98;
        *(_DWORD *)(a1 + 32) = v101;
        *(void *)(a1 + 24) = v100;
        goto LABEL_62;
      }
LABEL_63:
      *(unsigned char *)(a1 + 40) = 1;
      return;
    }
  }
  uint64_t v97 = 0;
  if (sub_1CBB0BF40(*(void *)a2, *(_DWORD *)(a2 + 16), a4, &v97))
  {
    uint64_t v12 = v97;
    uint64_t v13 = *(void *)a2;
    uint64_t v14 = *(unsigned int *)(a2 + 16);
  }
  else
  {
    uint64_t v13 = *(void *)a2;
    uint64_t v14 = *(unsigned int *)(a2 + 16);
    uint64_t v12 = *(void *)a2 + 16 * v14;
  }
  unsigned int v15 = a3 >> 4;
  if (v12 == v13 + 16 * v14) {
    goto LABEL_40;
  }
  int v16 = *(int **)(v12 + 8);
  if (!v16) {
    goto LABEL_40;
  }
  if (v16[50])
  {
    int v17 = v16 + 52;
    int v18 = 4;
  }
  else
  {
    int v18 = v16[54];
    if (!v18) {
      goto LABEL_23;
    }
    int v17 = (int *)*((void *)v16 + 26);
  }
  int v20 = v18 - 1;
  unsigned int v21 = v20 & (v15 ^ (a3 >> 9));
  uint64_t v22 = *(void *)&v17[2 * v21];
  if (v22 == a3)
  {
LABEL_22:
    __int16 v25 = 6;
    goto LABEL_78;
  }
  int v23 = 1;
  while (v22 != -4096)
  {
    unsigned int v24 = v21 + v23++;
    unsigned int v21 = v24 & v20;
    uint64_t v22 = *(void *)&v17[2 * v21];
    if (v22 == a3) {
      goto LABEL_22;
    }
  }
LABEL_23:
  unint64_t v26 = v16 + 2;
  int v27 = *v16;
  if (*v16)
  {
    int v28 = 4;
    uint64_t v29 = v16 + 2;
  }
  else
  {
    uint64_t v29 = (int *)*((void *)v16 + 1);
    int v28 = v16[4];
    if (!v28)
    {
      unsigned int v36 = 0;
      goto LABEL_32;
    }
  }
  int v30 = v28 - 1;
  unsigned int v31 = (v28 - 1) & (v15 ^ (a3 >> 9));
  int v32 = (uint64_t *)&v29[12 * v31];
  uint64_t v33 = *v32;
  if (*v32 == a3) {
    goto LABEL_33;
  }
  int v34 = 1;
  while (v33 != -4096)
  {
    unsigned int v35 = v31 + v34++;
    unsigned int v31 = v35 & v30;
    int v32 = (uint64_t *)&v29[12 * (v35 & v30)];
    uint64_t v33 = *v32;
    if (*v32 == a3) {
      goto LABEL_33;
    }
  }
  if (v27)
  {
    unsigned int v36 = 4;
    uint64_t v29 = v16 + 2;
  }
  else
  {
    uint64_t v29 = (int *)*((void *)v16 + 1);
    unsigned int v36 = v16[4];
  }
LABEL_32:
  int v32 = (uint64_t *)&v29[12 * v36];
LABEL_33:
  if (v27)
  {
    unsigned int v37 = 4;
  }
  else
  {
    unint64_t v26 = (int *)*((void *)v16 + 1);
    unsigned int v37 = v16[4];
  }
  if (&v26[12 * v37] != (int *)v32)
  {
    __int16 v38 = *((unsigned __int8 *)v32 + 8);
    *(_WORD *)a1 = v38;
    int v39 = *((unsigned __int8 *)v32 + 8);
    if ((v39 - 4) >= 2)
    {
      if ((v39 - 2) < 2) {
        *(void *)(a1 + 8) = v32[2];
      }
      goto LABEL_79;
    }
    unsigned int v62 = *((_DWORD *)v32 + 6);
    *(_DWORD *)(a1 + 16) = v62;
    if (v62 > 0x40) {
      operator new[]();
    }
    *(void *)(a1 + 8) = v32[2];
    unsigned int v63 = *((_DWORD *)v32 + 10);
    *(_DWORD *)(a1 + 32) = v63;
    if (v63 > 0x40) {
      operator new[]();
    }
    *(void *)(a1 + 24) = v32[4];
    __int16 v25 = v38 | (*((unsigned __int8 *)v32 + 9) << 8);
LABEL_78:
    *(_WORD *)a1 = v25;
LABEL_79:
    *(unsigned char *)(a1 + 40) = 1;
    sub_1CC05DD58(a2, a3, a1, a5);
    return;
  }
LABEL_40:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v40 = a2 + 192;
  uint64_t v41 = *(void *)(a2 + 192);
  unsigned int v42 = *(_DWORD *)(a2 + 208);
  unsigned int v43 = a4 >> 4;
  if (v42)
  {
    unint64_t v44 = ~((unint64_t)(v15 ^ (a3 >> 9)) << 32)
        + (v15 ^ (a3 >> 9))
        + ((unint64_t)(v43 ^ (a4 >> 9)) << 32);
    unint64_t v45 = (v44 ^ (v44 >> 22)) + ~((v44 ^ (v44 >> 22)) << 13);
    unint64_t v46 = (9 * (v45 ^ (v45 >> 8))) ^ ((9 * (v45 ^ (v45 >> 8))) >> 15);
    unsigned int v47 = (v42 - 1) & (((v46 + ~(v46 << 27)) >> 31) ^ (v46 + ~(v46 << 27)));
    uint64_t v48 = (uint64_t *)(v41 + 16 * v47);
    uint64_t v49 = *v48;
    uint64_t v50 = v48[1];
    if (*v48 == a4 && v50 == a3)
    {
LABEL_61:
      __int16 v11 = 6;
      goto LABEL_62;
    }
    uint64_t v52 = 0;
    int v53 = 1;
    while (v49 != -4096 || v50 != -4096)
    {
      if (v52) {
        BOOL v54 = 0;
      }
      else {
        BOOL v54 = v50 == -8192;
      }
      if (v54 && v49 == -8192) {
        uint64_t v52 = v48;
      }
      unsigned int v56 = v47 + v53++;
      unsigned int v47 = v56 & (v42 - 1);
      uint64_t v48 = (uint64_t *)(v41 + 16 * v47);
      uint64_t v49 = *v48;
      uint64_t v50 = v48[1];
      if (*v48 == a4 && v50 == a3) {
        goto LABEL_61;
      }
    }
    if (v52) {
      unsigned int v58 = v52;
    }
    else {
      unsigned int v58 = v48;
    }
  }
  else
  {
    unsigned int v58 = 0;
  }
  int v59 = *(_DWORD *)(a2 + 200);
  if (4 * v59 + 4 >= 3 * v42)
  {
    sub_1CC063FBC(v40, 2 * v42);
    int v64 = *(_DWORD *)(a2 + 208);
    if (v64)
    {
      uint64_t v65 = *(void *)(a2 + 192);
      unint64_t v66 = ~((unint64_t)(v15 ^ (a3 >> 9)) << 32)
          + (v15 ^ (a3 >> 9))
          + ((unint64_t)(v43 ^ (a4 >> 9)) << 32);
      unint64_t v67 = (v66 ^ (v66 >> 22)) + ~((v66 ^ (v66 >> 22)) << 13);
      unint64_t v68 = (9 * (v67 ^ (v67 >> 8))) ^ ((9 * (v67 ^ (v67 >> 8))) >> 15);
      int v69 = ((v68 + ~(v68 << 27)) >> 31) ^ (v68 + ~(v68 << 27));
      int v70 = v64 - 1;
      unsigned int v71 = (v64 - 1) & v69;
      unsigned int v58 = (uint64_t *)(v65 + 16 * v71);
      uint64_t v72 = *v58;
      uint64_t v73 = v58[1];
      if (*v58 == a4 && v73 == a3) {
        goto LABEL_69;
      }
      uint64_t v75 = 0;
      int v76 = 1;
      while (v72 != -4096 || v73 != -4096)
      {
        if (v75) {
          BOOL v77 = 0;
        }
        else {
          BOOL v77 = v73 == -8192;
        }
        if (v77 && v72 == -8192) {
          uint64_t v75 = v58;
        }
        unsigned int v79 = v71 + v76++;
        unsigned int v71 = v79 & v70;
        unsigned int v58 = (uint64_t *)(v65 + 16 * (v79 & v70));
        uint64_t v72 = *v58;
        uint64_t v73 = v58[1];
        if (*v58 == a4 && v73 == a3) {
          goto LABEL_69;
        }
      }
      goto LABEL_130;
    }
  }
  else
  {
    if (v42 + ~v59 - *(_DWORD *)(a2 + 204) > v42 >> 3) {
      goto LABEL_69;
    }
    sub_1CC063FBC(v40, v42);
    int v81 = *(_DWORD *)(a2 + 208);
    if (v81)
    {
      uint64_t v82 = *(void *)(a2 + 192);
      unint64_t v83 = ~((unint64_t)(v15 ^ (a3 >> 9)) << 32)
          + (v15 ^ (a3 >> 9))
          + ((unint64_t)(v43 ^ (a4 >> 9)) << 32);
      unint64_t v84 = (v83 ^ (v83 >> 22)) + ~((v83 ^ (v83 >> 22)) << 13);
      unint64_t v85 = (9 * (v84 ^ (v84 >> 8))) ^ ((9 * (v84 ^ (v84 >> 8))) >> 15);
      int v86 = ((v85 + ~(v85 << 27)) >> 31) ^ (v85 + ~(v85 << 27));
      int v87 = v81 - 1;
      unsigned int v88 = (v81 - 1) & v86;
      unsigned int v58 = (uint64_t *)(v82 + 16 * v88);
      uint64_t v89 = *v58;
      uint64_t v90 = v58[1];
      if (*v58 == a4 && v90 == a3) {
        goto LABEL_69;
      }
      uint64_t v75 = 0;
      int v92 = 1;
      while (v89 != -4096 || v90 != -4096)
      {
        if (v75) {
          BOOL v93 = 0;
        }
        else {
          BOOL v93 = v90 == -8192;
        }
        if (v93 && v89 == -8192) {
          uint64_t v75 = v58;
        }
        unsigned int v95 = v88 + v92++;
        unsigned int v88 = v95 & v87;
        unsigned int v58 = (uint64_t *)(v82 + 16 * (v95 & v87));
        uint64_t v89 = *v58;
        uint64_t v90 = v58[1];
        if (*v58 == a4 && v90 == a3) {
          goto LABEL_69;
        }
      }
LABEL_130:
      if (v75) {
        unsigned int v58 = v75;
      }
      goto LABEL_69;
    }
  }
  unsigned int v58 = 0;
LABEL_69:
  ++*(_DWORD *)(a2 + 200);
  if (*v58 != -4096 || v58[1] != -4096) {
    --*(_DWORD *)(a2 + 204);
  }
  uint64_t *v58 = a4;
  v58[1] = a3;
  unsigned int v60 = *(_DWORD *)(a2 + 56);
  if (v60 >= *(_DWORD *)(a2 + 60)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v61 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v60);
  *uint64_t v61 = a4;
  v61[1] = a3;
  ++*(_DWORD *)(a2 + 56);
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 40) = 0;
}

void sub_1CC05B720(uint64_t a1)
{
  uint64_t v223 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(const void **)(a1 + 48);
  uint64_t v3 = *(unsigned int *)(a1 + 56);
  uint64_t v4 = v194;
  uint64_t v192 = v194;
  uint64_t v193 = 0x800000000;
  if (v3 >= 9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v3)
  {
    memcpy(v192, v2, 16 * v3);
    int v5 = v193;
  }
  else
  {
    int v5 = 0;
  }
  LODWORD(v193) = v5 + v3;
  unsigned int v6 = *(_DWORD *)(a1 + 56);
  if (v6)
  {
    int v7 = 0;
    uint64_t v8 = a1 + 192;
    while (1)
    {
      if (v7 == 500)
      {
        for (unsigned int i = v193; v193; LODWORD(v193) = v193 - 1)
        {
          int v148 = (char *)v192 + 16 * i;
          uint64_t v150 = *((void *)v148 - 2);
          uint64_t v149 = *((void *)v148 - 1);
          LOWORD(v217) = 6;
          sub_1CC0641D8(a1, v149, v150, (uint64_t)&v217);
          unsigned int i = v193 - 1;
        }
        sub_1CC064CA0(v8);
        *(_DWORD *)(a1 + 56) = 0;
        goto LABEL_568;
      }
      uint64_t v9 = *(void *)(a1 + 48) + 16 * v6;
      uint64_t v10 = *(void *)(v9 - 16);
      uint64_t v11 = *(void *)(v9 - 8);
      unsigned int v12 = *(unsigned __int8 *)(v11 + 16);
      if (v11) {
        BOOL v13 = v12 >= 0x1C;
      }
      else {
        BOOL v13 = 0;
      }
      if (!v13 || *(void *)(v11 + 40) != v10)
      {
        LOWORD(v211) = 0;
        uint64_t v14 = *(void *)(*(void *)(v10 + 56) + 80);
        if (v14) {
          uint64_t v15 = v14 - 24;
        }
        else {
          uint64_t v15 = 0;
        }
        if (v15 == v10) {
          goto LABEL_278;
        }
        uint64_t v16 = *(void *)(v10 + 8);
        if (!v16)
        {
LABEL_27:
          LOWORD(v21) = 0;
          goto LABEL_28;
        }
        while (1)
        {
          uint64_t v17 = *(void *)(v16 + 24);
          unsigned int v18 = *(unsigned __int8 *)(v17 + 16);
          BOOL v19 = v17 && v18 >= 0x1C;
          BOOL v20 = !v19 || v18 - 29 > 0xA;
          if (!v20) {
            break;
          }
          uint64_t v16 = *(void *)(v16 + 8);
          if (!v16) {
            goto LABEL_27;
          }
        }
LABEL_71:
        sub_1CC0650E8((uint64_t)&v217, a1, v11, *(void *)(v17 + 40), v10, 0);
        if (!v222)
        {
          LOBYTE(v195) = 0;
          char v200 = 0;
          goto LABEL_78;
        }
        sub_1CC061B28((uint64_t)&v211, (unsigned __int8 *)&v217, 0x100000000);
        if (v211 == 6)
        {
          __int16 v195 = 6;
          LOWORD(v211) = v211 & 0xFF00;
          char v200 = 1;
          if (v222)
          {
LABEL_205:
            if ((v217 & 0xFE) == 4)
            {
              if (v221 >= 0x41 && v220) {
                MEMORY[0x1D25D9CB0](v220, 0x1000C8000313F17);
              }
              if (v219 >= 0x41 && v218) {
                MEMORY[0x1D25D9CB0](v218, 0x1000C8000313F17);
              }
            }
          }
          goto LABEL_78;
        }
        if (v222 && (v217 & 0xFE) == 4)
        {
          if (v221 >= 0x41 && v220) {
            MEMORY[0x1D25D9CB0](v220, 0x1000C8000313F17);
          }
          if (v219 >= 0x41 && v218) {
            MEMORY[0x1D25D9CB0](v218, 0x1000C8000313F17);
          }
        }
        while (1)
        {
          uint64_t v16 = *(void *)(v16 + 8);
          if (!v16) {
            break;
          }
          uint64_t v17 = *(void *)(v16 + 24);
          unsigned int v31 = *(unsigned __int8 *)(v17 + 16);
          if (v17) {
            BOOL v32 = v31 >= 0x1C;
          }
          else {
            BOOL v32 = 0;
          }
          if (v32 && v31 - 29 <= 0xA) {
            goto LABEL_71;
          }
        }
        LOWORD(v21) = v211;
        __int16 v195 = v211;
        if (v211 - 2 < 2)
        {
          uint64_t v196 = v212;
        }
        else if (v211 - 4 <= 1)
        {
          unsigned int v197 = v213;
          uint64_t v196 = v212;
          unsigned int v199 = v215;
          int v198 = v214;
          LODWORD(v213) = 0;
          unsigned int v215 = 0;
          __int16 v195 = v211;
        }
LABEL_29:
        __int16 v22 = v21 & 0xFF00;
        LOWORD(v211) = v22;
        char v200 = 1;
        goto LABEL_30;
      }
      if (v12 == 85) {
        break;
      }
      if (v12 == 83)
      {
        LOWORD(v211) = 0;
        uint64_t v21 = *(_DWORD *)(v11 + 20) & 0x7FFFFFF;
        if (v21)
        {
          uint64_t v24 = v8;
          __int16 v25 = v4;
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          uint64_t v28 = 8 * v21;
          while (1)
          {
            int v29 = *(_DWORD *)(v11 + 20);
            if ((v29 & 0x40000000) != 0) {
              uint64_t v30 = *(void *)(v11 - 8);
            }
            else {
              uint64_t v30 = v11 - 32 * (v29 & 0x7FFFFFF);
            }
            sub_1CC0650E8((uint64_t)&v217, a1, *(void *)(v30 + v26), *(void *)(v30 + 32 * *(unsigned int *)(v11 + 60) + v27), v10, (llvm::Instruction *)v11);
            if (!v222)
            {
              LOBYTE(v195) = 0;
              char v200 = 0;
              uint64_t v4 = v25;
              uint64_t v8 = v24;
              goto LABEL_78;
            }
            sub_1CC061B28((uint64_t)&v211, (unsigned __int8 *)&v217, 0x100000000);
            if (v211 == 6) {
              break;
            }
            if (v222 && (v217 & 0xFE) == 4)
            {
              if (v221 >= 0x41 && v220) {
                MEMORY[0x1D25D9CB0](v220, 0x1000C8000313F17);
              }
              if (v219 >= 0x41 && v218) {
                MEMORY[0x1D25D9CB0](v218, 0x1000C8000313F17);
              }
            }
            v27 += 8;
            v26 += 32;
            if (v28 == v27)
            {
              LOWORD(v21) = v211;
              __int16 v195 = v211;
              if (v211 - 2 < 2)
              {
                uint64_t v196 = v212;
                uint64_t v4 = v25;
              }
              else
              {
                uint64_t v4 = v25;
                if (v211 - 4 <= 1)
                {
                  unsigned int v197 = v213;
                  uint64_t v196 = v212;
                  unsigned int v199 = v215;
                  int v198 = v214;
                  LODWORD(v213) = 0;
                  unsigned int v215 = 0;
                  __int16 v195 = v211;
                }
              }
              uint64_t v8 = v24;
              goto LABEL_29;
            }
          }
          __int16 v195 = 6;
          uint64_t v4 = v25;
          LOWORD(v211) = v211 & 0xFF00;
          char v200 = 1;
          uint64_t v8 = v24;
          if (v222) {
            goto LABEL_205;
          }
LABEL_78:
          LOBYTE(v22) = v211;
LABEL_30:
          if ((v22 & 0xFE) == 4)
          {
            if (v215 >= 0x41 && v214) {
              MEMORY[0x1D25D9CB0](v214, 0x1000C8000313F17);
            }
            if (v213 >= 0x41)
            {
              unint64_t v23 = v212;
              if (v212) {
                goto LABEL_34;
              }
            }
          }
          goto LABEL_280;
        }
LABEL_28:
        __int16 v195 = 0;
        goto LABEL_29;
      }
      unsigned int v35 = *(llvm::ConstantPointerNull **)v11;
      int v36 = *(unsigned __int8 *)(*(void *)v11 + 8);
      if (*(void *)v11) {
        BOOL v37 = v36 == 15;
      }
      else {
        BOOL v37 = 0;
      }
      if (v37)
      {
        if (v10) {
          uint64_t v38 = v11;
        }
        else {
          uint64_t v38 = 0;
        }
        unint64_t v217 = *(void *)(a1 + 224);
        uint64_t v218 = 0;
        unint64_t v219 = v38;
        unint64_t v220 = 0;
        uint64_t v221 = 0;
        char v222 = 1;
        if (sub_1CC1620B8(v11, 0, (uint64_t)&v217))
        {
          uint64_t v40 = llvm::ConstantPointerNull::get(v35, v39);
          LOWORD(v217) = 0;
          sub_1CC063DD8((uint64_t)&v217, (uint64_t)v40);
          goto LABEL_226;
        }
        int v36 = *(unsigned __int8 *)(*(void *)v11 + 8);
      }
      if (v36 != 13) {
        goto LABEL_225;
      }
      int v41 = *(unsigned __int8 *)(v11 + 16);
      if ((v41 - 79) >= 0xFFFFFFF3)
      {
        uint64_t v50 = **(void **)(v11 - 32);
        unsigned int v51 = *(unsigned __int8 *)(v50 + 8);
        if (v51 > 0x11) {
          goto LABEL_274;
        }
        if (((1 << v51) & 0xAC7F) != 0) {
          goto LABEL_129;
        }
        if (((1 << v51) & 0x30000) == 0)
        {
LABEL_274:
          if ((v51 & 0xFE) != 0x12 && v51 != 21)
          {
LABEL_278:
            __int16 v195 = 6;
LABEL_279:
            char v200 = 1;
            goto LABEL_280;
          }
        }
        if (!llvm::Type::isSizedDerivedType(v50, 0)) {
          goto LABEL_278;
        }
        int v41 = *(unsigned __int8 *)(v11 + 16);
LABEL_129:
        unsigned int v52 = v41 - 66;
        BOOL v20 = v52 > 0xB;
        int v53 = (1 << v52) & 0x807;
        if (v20 || v53 == 0) {
          goto LABEL_278;
        }
        sub_1CC0672C0((uint64_t)&v217, a1, *(uint64_t **)(v11 - 32), (llvm::Instruction *)v11, v10);
        if (!(_BYTE)v221)
        {
LABEL_142:
          LOBYTE(v195) = 0;
          char v200 = 0;
          goto LABEL_280;
        }
        BOOL v165 = v4;
        llvm::ConstantRange::castOp(&v217, *(unsigned __int8 *)(v11 + 16) - 28, *(_DWORD *)(*(void *)v11 + 8) >> 8, (uint64_t)&v201);
        int v55 = v202;
        if (v202 <= 0x40)
        {
          unsigned int v56 = v201;
          uint64_t v57 = v203;
          if (v201 == v203 && (!v202 || v201 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v202)))
          {
LABEL_273:
            LOWORD(v211) = 6;
            goto LABEL_139;
          }
          LOWORD(v211) = 0;
          if (!((unint64_t)v203 | (unint64_t)v201)) {
            goto LABEL_139;
          }
          goto LABEL_137;
        }
        unsigned int v56 = v201;
        uint64_t v57 = v203;
        unint64_t v161 = v202 + 63;
        if (memcmp(v201, v203, (v161 >> 3) & 0x3FFFFFF8))
        {
          LOWORD(v211) = 0;
          goto LABEL_137;
        }
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v201) == v55) {
          goto LABEL_273;
        }
        int v110 = 0;
        uint64_t v111 = v161 >> 6;
        do
        {
          BOOL v20 = v111-- < 1;
          if (v20) {
            break;
          }
          unint64_t v112 = v56[v111];
          v110 += __clz(v112);
        }
        while (!v112);
        unsigned int v113 = v55 | 0xFFFFFFC0;
        if ((v55 & 0x3F) == 0) {
          unsigned int v113 = 0;
        }
        LOWORD(v211) = 0;
        if (v110 + v113 != v55)
        {
LABEL_137:
          LODWORD(v207) = v55;
          uint64_t v206 = v56;
          LODWORD(v209) = v204;
          unsigned int v208 = v57;
          LODWORD(v202) = 0;
          LODWORD(v204) = 0;
          sub_1CC05E860((__int16 *)&v211, (uint64_t)&v206, 0x100000000);
          if (v209 >= 0x41 && v208) {
            MEMORY[0x1D25D9CB0](v208, 0x1000C8000313F17);
          }
          if (v207 >= 0x41 && v206) {
            MEMORY[0x1D25D9CB0](v206, 0x1000C8000313F17);
          }
        }
LABEL_139:
        __int16 v195 = v211;
        if (v211 - 2 < 2)
        {
          uint64_t v196 = v212;
          uint64_t v4 = v165;
        }
        else
        {
          uint64_t v4 = v165;
          if (v211 - 4 <= 1)
          {
            unsigned int v197 = v213;
            uint64_t v196 = v212;
            unsigned int v199 = v215;
            int v198 = v214;
            LODWORD(v213) = 0;
            unsigned int v215 = 0;
            __int16 v195 = v211;
          }
        }
        LOWORD(v211) = v211 & 0xFF00;
        char v200 = 1;
        if (v204 >= 0x41 && v203) {
          MEMORY[0x1D25D9CB0](v203, 0x1000C8000313F17);
        }
        if (v202 >= 0x41 && v201) {
          MEMORY[0x1D25D9CB0](v201, 0x1000C8000313F17);
        }
        if ((_BYTE)v221)
        {
          if (v220 >= 0x41 && v219) {
            MEMORY[0x1D25D9CB0](v219, 0x1000C8000313F17);
          }
          if (v218 >= 0x41)
          {
            unint64_t v23 = v217;
            if (v217) {
              goto LABEL_34;
            }
          }
        }
        goto LABEL_280;
      }
      if ((v41 - 59) >= 0xFFFFFFEE)
      {
        if (v41 == 58) {
          goto LABEL_278;
        }
        HIDWORD(v59) = v41 - 41;
        LODWORD(v59) = v41 - 41;
        unsigned int v58 = v59 >> 1;
        BOOL v20 = v58 > 6;
        int v60 = (1 << v58) & 0x47;
        if (v20 || v60 == 0)
        {
          unint64_t v217 = (unint64_t)&unk_1F2604D90;
          uint64_t v218 = v11;
        }
        else
        {
          unint64_t v62 = ((unint64_t)*(unsigned __int8 *)(v11 + 17) >> 1) & 3;
          unint64_t v217 = (unint64_t)&unk_1F2604D48;
          uint64_t v218 = v11;
          unint64_t v219 = v62;
        }
        unint64_t v220 = &v217;
        sub_1CC0673F4((uint64_t)&v195, a1, (_DWORD *)v11, v10, (uint64_t)&v217);
        unsigned int v63 = v220;
        if (v220 != &v217)
        {
          if (!v220) {
            goto LABEL_280;
          }
LABEL_151:
          (*(void (**)(unint64_t *))(*v63 + 40))(v63);
          goto LABEL_280;
        }
        (*(void (**)(unint64_t *))(v217 + 32))(&v217);
      }
      else
      {
        if (v41 == 84)
        {
          uint64_t v75 = v11 - 32;
          uint64_t v74 = *(void *)(v11 - 32);
          if (!v74
            || *(unsigned char *)(v74 + 16)
            || *(void *)(v74 + 24) != *(void *)(v11 + 72)
            || (*(unsigned char *)(v74 + 33) & 0x20) == 0)
          {
LABEL_225:
            sub_1CC064DB0((uint64_t)&v217, v11);
LABEL_226:
            __int16 v195 = v217;
            if (v217 - 2 < 2)
            {
              uint64_t v196 = v218;
            }
            else if (v217 - 4 <= 1)
            {
              unsigned int v197 = v219;
              uint64_t v196 = v218;
              LODWORD(v219) = 0;
              unsigned int v199 = v221;
              int v198 = v220;
              __int16 v195 = v217;
            }
            char v200 = 1;
LABEL_281:
            sub_1CC0641D8(a1, v11, v10, (uint64_t)&v195);
            if (v200 && (v195 & 0xFE) == 4)
            {
              if (v199 >= 0x41 && v198) {
                MEMORY[0x1D25D9CB0](v198, 0x1000C8000313F17);
              }
              if (v197 >= 0x41 && v196) {
                MEMORY[0x1D25D9CB0](v196, 0x1000C8000313F17);
              }
            }
            unsigned int v6 = *(_DWORD *)(a1 + 56) - 1;
            *(_DWORD *)(a1 + 56) = v6;
            int v85 = *(_DWORD *)(a1 + 208);
            if (v85)
            {
              uint64_t v86 = *(void *)(a1 + 192);
              unint64_t v87 = ((v11 >> 4) ^ (v11 >> 9) | ((unint64_t)((v10 >> 4) ^ (v10 >> 9)) << 32))
                  + ~((unint64_t)((v11 >> 4) ^ (v11 >> 9)) << 32);
              unint64_t v88 = (v87 ^ (v87 >> 22)) + ~((v87 ^ (v87 >> 22)) << 13);
              unint64_t v89 = (9 * (v88 ^ (v88 >> 8))) ^ ((9 * (v88 ^ (v88 >> 8))) >> 15);
              int v90 = v85 - 1;
              unsigned int v91 = v90 & (((v89 + ~(v89 << 27)) >> 31) ^ (v89 + ~(v89 << 27)));
              int v92 = (uint64_t *)(v86 + 16 * v91);
              uint64_t v94 = *v92;
              uint64_t v93 = v92[1];
              if (v10 == *v92 && v11 == v93)
              {
LABEL_298:
                *int v92 = -8192;
                v92[1] = -8192;
                *(int32x2_t *)(a1 + 200) = vadd_s32(*(int32x2_t *)(a1 + 200), (int32x2_t)0x1FFFFFFFFLL);
              }
              else
              {
                int v96 = 1;
                while (v94 != -4096 || v93 != -4096)
                {
                  unsigned int v97 = v91 + v96++;
                  unsigned int v91 = v97 & v90;
                  int v92 = (uint64_t *)(v86 + 16 * v91);
                  uint64_t v94 = *v92;
                  uint64_t v93 = v92[1];
                  if (v10 == *v92 && v11 == v93) {
                    goto LABEL_298;
                  }
                }
              }
            }
            goto LABEL_300;
          }
          int v107 = *(_DWORD *)(v74 + 36);
          if (((v107 - 262) > 0x31 || ((1 << (v107 - 6)) & 0x2184000203001) == 0)
            && v107 != 1)
          {
            sub_1CC064DB0((uint64_t)&v217, v11);
            __int16 v195 = v217;
            if (v217 - 2 < 2)
            {
              uint64_t v196 = v218;
            }
            else if (v217 - 4 <= 1)
            {
              unsigned int v197 = v219;
              uint64_t v196 = v218;
              LODWORD(v219) = 0;
              unsigned int v199 = v221;
              int v198 = v220;
              __int16 v195 = v217;
            }
            goto LABEL_279;
          }
          unsigned int v169 = v4;
          unint64_t v217 = (unint64_t)&v219;
          uint64_t v218 = 0x200000000;
          int v114 = *(_DWORD *)(v11 + 20);
          uint64_t v115 = v114 & 0x7FFFFFF;
          uint64_t v116 = v11 - 32 * v115;
          if (v114 < 0 && (uint64_t v146 = *(void *)(v116 - 8), (v146 & 0xFFFFFFFF0) != 0)) {
            uint64_t v117 = (*(_DWORD *)(v116 - 12) - *(_DWORD *)(v116 - v146));
          }
          else {
            uint64_t v117 = 0;
          }
          if (v116 != v75 - 32 * v117)
          {
            uint64_t v118 = -32 * v115;
            uint64_t v119 = 32 * ~v117;
            while (1)
            {
              sub_1CC0672C0((uint64_t)&v211, a1, *(uint64_t **)(v11 + v118), (llvm::Instruction *)v11, v10);
              if (!(_BYTE)v215) {
                break;
              }
              sub_1CC067A30(&v217, (unint64_t)&v211);
              if ((_BYTE)v215)
              {
                if (v214 >= 0x41 && v213) {
                  MEMORY[0x1D25D9CB0](v213, 0x1000C8000313F17);
                }
                if (v212 >= 0x41 && v211) {
                  MEMORY[0x1D25D9CB0](v211, 0x1000C8000313F17);
                }
              }
              v118 += 32;
              if (v119 == v118)
              {
                unsigned int v128 = (const void **)v217;
                goto LABEL_514;
              }
            }
            LOBYTE(v195) = 0;
            char v200 = 0;
            goto LABEL_525;
          }
          unsigned int v128 = (const void **)&v219;
LABEL_514:
          llvm::ConstantRange::intrinsic(v128, *(_DWORD *)(*(void *)v75 + 36), (unint64_t *)&v201);
          int v129 = v202;
          if (v202 > 0x40)
          {
            int v130 = v201;
            int v131 = v203;
            unint64_t v162 = v202 + 63;
            if (memcmp(v201, v203, (v162 >> 3) & 0x3FFFFFF8))
            {
              LOWORD(v211) = 0;
              goto LABEL_517;
            }
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v201) == v129) {
              goto LABEL_540;
            }
            int v142 = 0;
            uint64_t v143 = v162 >> 6;
            do
            {
              BOOL v20 = v143-- < 1;
              if (v20) {
                break;
              }
              unint64_t v144 = v130[v143];
              v142 += __clz(v144);
            }
            while (!v144);
            unsigned int v145 = v129 | 0xFFFFFFC0;
            if ((v129 & 0x3F) == 0) {
              unsigned int v145 = 0;
            }
            LOWORD(v211) = 0;
            if (v142 + v145 != v129) {
              goto LABEL_517;
            }
          }
          else
          {
            int v130 = v201;
            int v131 = v203;
            if (v201 == v203 && (!v202 || v201 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v202)))
            {
LABEL_540:
              LOWORD(v211) = 6;
              goto LABEL_519;
            }
            LOWORD(v211) = 0;
            if ((unint64_t)v203 | (unint64_t)v201)
            {
LABEL_517:
              LODWORD(v207) = v129;
              uint64_t v206 = v130;
              LODWORD(v209) = v204;
              unsigned int v208 = v131;
              LODWORD(v202) = 0;
              LODWORD(v204) = 0;
              sub_1CC05E860((__int16 *)&v211, (uint64_t)&v206, 0x100000000);
              if (v209 >= 0x41 && v208) {
                MEMORY[0x1D25D9CB0](v208, 0x1000C8000313F17);
              }
              if (v207 >= 0x41 && v206) {
                MEMORY[0x1D25D9CB0](v206, 0x1000C8000313F17);
              }
            }
          }
LABEL_519:
          __int16 v195 = v211;
          if (v211 - 2 < 2)
          {
            uint64_t v196 = v212;
          }
          else if (v211 - 4 <= 1)
          {
            unsigned int v197 = v213;
            uint64_t v196 = v212;
            unsigned int v199 = v215;
            int v198 = v214;
            LODWORD(v213) = 0;
            unsigned int v215 = 0;
            __int16 v195 = v211;
          }
          LOWORD(v211) = v211 & 0xFF00;
          char v200 = 1;
          if (v204 >= 0x41 && v203) {
            MEMORY[0x1D25D9CB0](v203, 0x1000C8000313F17);
          }
          if (v202 >= 0x41 && v201) {
            MEMORY[0x1D25D9CB0](v201, 0x1000C8000313F17);
          }
LABEL_525:
          BOOL v132 = (unint64_t *)v217;
          if (v218)
          {
            uint64_t v133 = 4 * v218;
            do
            {
              unsigned int v134 = (char *)&v132[v133];
              if (LODWORD(v132[v133 - 1]) >= 0x41)
              {
                uint64_t v135 = *((void *)v134 - 2);
                if (v135) {
                  MEMORY[0x1D25D9CB0](v135, 0x1000C8000313F17);
                }
              }
              if (*((_DWORD *)v134 - 6) >= 0x41u)
              {
                uint64_t v136 = *((void *)v134 - 4);
                if (v136) {
                  MEMORY[0x1D25D9CB0](v136, 0x1000C8000313F17);
                }
              }
              v133 -= 4;
            }
            while (v133 * 8);
            BOOL v132 = (unint64_t *)v217;
          }
          if (v132 != &v219) {
            free(v132);
          }
          uint64_t v4 = v169;
          goto LABEL_280;
        }
        if (v41 != 92) {
          goto LABEL_225;
        }
        int v164 = v4;
        unsigned int v42 = *(_DWORD **)(v11 - 32);
        int v43 = sub_1CC062BC4((uint64_t)v42);
        uint64_t v44 = *(unsigned int *)(v11 + 72);
        unint64_t v45 = *(_DWORD **)(v11 + 64);
        if (v42) {
          BOOL v46 = v43 == 0;
        }
        else {
          BOOL v46 = 1;
        }
        if (v46 || v44 != 1)
        {
          uint64_t v48 = *(void *)(v11 - 32);
          unsigned int v49 = *(unsigned __int8 *)(v48 + 16);
          if (v48 && v49 <= 0x14)
          {
            if (v44) {
              goto LABEL_541;
            }
            goto LABEL_370;
          }
LABEL_269:
          if (v49 != 93) {
            goto LABEL_270;
          }
          uint64_t v163 = v8;
          while (1)
          {
            unsigned int v99 = *(_DWORD *)(v48 + 72);
            uint64_t v100 = v44;
            unsigned int v101 = v99 >= v44 ? v44 : *(_DWORD *)(v48 + 72);
            uint64_t v102 = v45;
            if (!memcmp(*(const void **)(v48 + 64), v45, 4 * v101)) {
              break;
            }
            uint64_t v48 = *(void *)(v48 - 64);
            unint64_t v45 = v102;
            uint64_t v8 = v163;
            if (v48)
            {
              uint64_t v44 = v100;
              if (*(unsigned char *)(v48 + 16) == 93) {
                continue;
              }
            }
            goto LABEL_270;
          }
          uint64_t v8 = v163;
          if (v99 != v100) {
            goto LABEL_270;
          }
          uint64_t v48 = *(void *)(v48 - 32);
          if (!v48) {
            goto LABEL_270;
          }
LABEL_370:
          sub_1CC05B040((uint64_t)&v195, a1, v48, v10, (llvm::Instruction *)v11);
LABEL_371:
          uint64_t v4 = v164;
          goto LABEL_280;
        }
        if (*v45)
        {
          uint64_t v48 = *(void *)(v11 - 32);
          unsigned int v49 = *(unsigned __int8 *)(v48 + 16);
          uint64_t v44 = 1;
          if (v48 && v49 <= 0x14)
          {
LABEL_541:
            uint64_t v137 = v44;
            while (1)
            {
              uint64_t v138 = v8;
              uint64_t v139 = v45;
              AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v48, (llvm::Type *)*v45);
              uint64_t v141 = v139;
              uint64_t v8 = v138;
              if (!AggregateElement) {
                break;
              }
              uint64_t v48 = (uint64_t)AggregateElement;
              unint64_t v45 = v141 + 1;
              if (!--v137) {
                goto LABEL_370;
              }
            }
LABEL_270:
            __int16 v195 = 6;
            char v200 = 1;
            uint64_t v4 = v164;
            goto LABEL_281;
          }
          goto LABEL_269;
        }
        unint64_t v217 = (unint64_t)&unk_1F2604DD8;
        uint64_t v218 = (uint64_t)v42;
        unint64_t v220 = &v217;
        sub_1CC0673F4((uint64_t)&v195, a1, v42, v10, (uint64_t)&v217);
        unsigned int v63 = v220;
        if (v220 == &v217)
        {
          (*(void (**)(unint64_t *))(v217 + 32))(&v217);
          goto LABEL_371;
        }
        uint64_t v4 = v164;
        if (v220) {
          goto LABEL_151;
        }
      }
LABEL_280:
      if (v200) {
        goto LABEL_281;
      }
      unsigned int v6 = *(_DWORD *)(a1 + 56);
LABEL_300:
      ++v7;
      if (!v6) {
        goto LABEL_568;
      }
    }
    sub_1CC05B040((uint64_t)&v217, a1, *(void *)(v11 - 64), v10, (llvm::Instruction *)v11);
    if (!v222) {
      goto LABEL_142;
    }
    sub_1CC05B040((uint64_t)&v211, a1, *(void *)(v11 - 32), v10, (llvm::Instruction *)v11);
    if (!v216)
    {
      LOBYTE(v195) = 0;
      char v200 = 0;
      goto LABEL_358;
    }
    if ((v217 & 0xFE) != 4 && (v211 & 0xFE) != 4) {
      goto LABEL_173;
    }
    sub_1CC067178((unint64_t *)&v188, (uint64_t)&v217, *(void *)v11, *(void *)(a1 + 224));
    sub_1CC067178((unint64_t *)&v184, (uint64_t)&v211, *(void *)v11, *(void *)(a1 + 224));
    uint64_t v182 = 0;
    uint64_t v183 = 0;
    int matched = llvm::matchSelectPattern(v11, (uint64_t)&v183, &v182, 0, 0);
    if (!matched) {
      goto LABEL_169;
    }
    if (matched != 7)
    {
      if (matched == 8)
      {
        if (v189 > 0x40) {
          operator new[]();
        }
        unsigned int v179 = v189;
        __s1 = 0;
        LODWORD(v207) = v189;
        uint64_t v206 = 0;
        llvm::APInt::operator+=((uint64_t)&v206, 1uLL);
        unsigned int v181 = v207;
        __s2 = v206;
        if (v183 == *(void *)(v11 - 64))
        {
          unsigned int v167 = v4;
          llvm::ConstantRange::abs((llvm::ConstantRange *)&v188, 0, (uint64_t)&v170);
          llvm::ConstantRange::sub((llvm::ConstantRange *)&__s1, (const llvm::ConstantRange *)&v170, (uint64_t)&v174);
          int v76 = v211;
          unsigned int v77 = v175;
          if (v175 <= 0x40) {
            goto LABEL_252;
          }
          int v159 = v211;
          uint64_t v78 = v8;
          int v156 = v7;
          unsigned int v79 = v174;
          uint64_t v80 = v176;
          unint64_t v152 = v175 + 63;
          if (memcmp(v174, v176, (v152 >> 3) & 0x3FFFFFF8))
          {
LABEL_464:
            int v7 = v156;
            uint64_t v8 = v78;
            int v76 = v159;
            goto LABEL_254;
          }
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v174) != v77)
          {
            int v81 = 0;
            uint64_t v82 = v152 >> 6;
            do
            {
              BOOL v20 = v82-- < 1;
              if (v20) {
                break;
              }
              unint64_t v83 = v79[v82];
              v81 += __clz(v83);
            }
            while (!v83);
LABEL_508:
            unsigned int v126 = v77 | 0xFFFFFFC0;
            if ((v77 & 0x3F) == 0) {
              unsigned int v126 = 0;
            }
            int v127 = v81 + v126;
            int v7 = v156;
            uint64_t v8 = v78;
            int v76 = v159;
            if (v127 == v77) {
              goto LABEL_511;
            }
LABEL_254:
            LOWORD(v206) = 0;
            LODWORD(v202) = v77;
            uint64_t v201 = v79;
            LODWORD(v204) = v177;
            int v203 = v80;
            unsigned int v175 = 0;
            unsigned int v177 = 0;
            sub_1CC05E860((__int16 *)&v206, (uint64_t)&v201, (v76 == 5) | 0x100000000);
            if (v204 >= 0x41 && v203) {
              MEMORY[0x1D25D9CB0](v203, 0x1000C8000313F17);
            }
            uint64_t v4 = v167;
            if (v202 >= 0x41 && v201) {
              MEMORY[0x1D25D9CB0](v201, 0x1000C8000313F17);
            }
LABEL_256:
            __int16 v195 = v206;
            if (v206 - 2 < 2)
            {
              uint64_t v196 = v207;
            }
            else if (v206 - 4 <= 1)
            {
              unsigned int v197 = v208;
              uint64_t v196 = v207;
              unsigned int v199 = v210;
              int v198 = v209;
              LODWORD(v208) = 0;
              unsigned int v210 = 0;
              __int16 v195 = (__int16)v206;
            }
            LOWORD(v206) = (unsigned __int16)v206 & 0xFF00;
            char v200 = 1;
            if (v177 >= 0x41 && v176) {
              MEMORY[0x1D25D9CB0](v176, 0x1000C8000313F17);
            }
            if (v175 >= 0x41 && v174) {
              MEMORY[0x1D25D9CB0](v174, 0x1000C8000313F17);
            }
            if (v173 >= 0x41 && v172) {
              MEMORY[0x1D25D9CB0](v172, 0x1000C8000313F17);
            }
            if (v171 < 0x41 || !v170) {
              goto LABEL_348;
            }
            goto LABEL_462;
          }
        }
        else
        {
          if (v183 != *(void *)(v11 - 32))
          {
            if (v207 >= 0x41 && v206) {
              MEMORY[0x1D25D9CB0]();
            }
            if (v179 >= 0x41 && __s1) {
              MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
            }
            goto LABEL_169;
          }
          unsigned int v167 = v4;
          llvm::ConstantRange::abs((llvm::ConstantRange *)&v184, 0, (uint64_t)&v170);
          llvm::ConstantRange::sub((llvm::ConstantRange *)&__s1, (const llvm::ConstantRange *)&v170, (uint64_t)&v174);
          int v76 = v211;
          unsigned int v77 = v175;
          if (v175 <= 0x40)
          {
LABEL_252:
            unsigned int v79 = v174;
            uint64_t v80 = v176;
            if (v174 == v176 && (!v77 || v174 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v77))) {
              goto LABEL_318;
            }
            if ((unint64_t)v176 | (unint64_t)v174) {
              goto LABEL_254;
            }
LABEL_511:
            LOWORD(v206) = v76 == 5;
            uint64_t v4 = v167;
            goto LABEL_256;
          }
          int v159 = v211;
          uint64_t v78 = v8;
          int v156 = v7;
          unsigned int v79 = v174;
          uint64_t v80 = v176;
          unint64_t v154 = v175 + 63;
          if (memcmp(v174, v176, (v154 >> 3) & 0x3FFFFFF8)) {
            goto LABEL_464;
          }
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v174) != v77)
          {
            int v81 = 0;
            uint64_t v124 = v154 >> 6;
            do
            {
              BOOL v20 = v124-- < 1;
              if (v20) {
                break;
              }
              unint64_t v125 = v79[v124];
              v81 += __clz(v125);
            }
            while (!v125);
            goto LABEL_508;
          }
        }
LABEL_318:
        LOWORD(v206) = 6;
        uint64_t v4 = v167;
        goto LABEL_256;
      }
      uint64_t v72 = *(void *)(v11 - 64);
      if (v183 == v72 && v182 == *(void *)(v11 - 32) || v182 == v72 && v183 == *(void *)(v11 - 32))
      {
        switch(matched)
        {
          case 2:
            llvm::ConstantRange::umin(&v188, (const void **)&v184, (unint64_t *)&__s1);
            break;
          case 3:
            llvm::ConstantRange::smax(&v188, (const llvm::ConstantRange *)&v184, (unint64_t *)&__s1);
            break;
          case 4:
            llvm::ConstantRange::umax(&v188, &v184, (unint64_t *)&__s1);
            break;
          default:
            llvm::ConstantRange::smin(&v188, (const llvm::ConstantRange *)&v184, (unint64_t *)&__s1);
            break;
        }
        unsigned int v103 = v179;
        unsigned int v175 = v179;
        uint64_t v168 = v4;
        if (v179 > 0x40) {
          operator new[]();
        }
        uint64_t v174 = __s1;
        unsigned int v104 = v181;
        unsigned int v177 = v181;
        unsigned int v160 = __s1;
        if (v181 > 0x40) {
          operator new[]();
        }
        BOOL v176 = __s2;
        BOOL v106 = v217 == 5 || v211 == 5;
        int v157 = __s2;
        if (__s1 == __s2 && (!v179 || (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v179) == __s1))
        {
          LOWORD(v206) = 6;
        }
        else if ((unint64_t)__s2 | (unint64_t)__s1)
        {
          LOWORD(v206) = 0;
          LODWORD(v202) = v179;
          uint64_t v201 = __s1;
          LODWORD(v204) = v181;
          int v203 = __s2;
          unsigned int v175 = 0;
          unsigned int v177 = 0;
          sub_1CC05E860((__int16 *)&v206, (uint64_t)&v201, v106 | 0x100000000);
          if (v204 >= 0x41 && v203) {
            MEMORY[0x1D25D9CB0](v203, 0x1000C8000313F17);
          }
          if (v202 >= 0x41)
          {
            if (v201) {
              MEMORY[0x1D25D9CB0](v201, 0x1000C8000313F17);
            }
            unsigned int v103 = 0;
            unsigned int v104 = 0;
          }
          else
          {
            unsigned int v103 = 0;
            unsigned int v104 = 0;
          }
        }
        else
        {
          LOWORD(v206) = v106;
        }
        __int16 v195 = v206;
        if (v206 - 2 < 2)
        {
          uint64_t v196 = v207;
        }
        else if (v206 - 4 <= 1)
        {
          unsigned int v197 = v208;
          uint64_t v196 = v207;
          unsigned int v199 = v210;
          int v198 = v209;
          LODWORD(v208) = 0;
          unsigned int v210 = 0;
          __int16 v195 = (__int16)v206;
        }
        LOWORD(v206) = (unsigned __int16)v206 & 0xFF00;
        char v200 = 1;
        if (v104 >= 0x41 && v157) {
          MEMORY[0x1D25D9CB0](v157, 0x1000C8000313F17);
        }
        uint64_t v4 = v168;
        if (v103 < 0x41 || !v160) {
          goto LABEL_348;
        }
LABEL_462:
        MEMORY[0x1D25D9CB0]();
LABEL_348:
        if (v181 >= 0x41 && __s2) {
          MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
        }
        if (v179 >= 0x41 && __s1) {
          MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
        }
        if (v187 >= 0x41 && v186) {
          MEMORY[0x1D25D9CB0](v186, 0x1000C8000313F17);
        }
        if (v185 >= 0x41 && v184) {
          MEMORY[0x1D25D9CB0](v184, 0x1000C8000313F17);
        }
        if (v191 >= 0x41 && v190) {
          MEMORY[0x1D25D9CB0](v190, 0x1000C8000313F17);
        }
        if (v189 >= 0x41 && v188) {
          MEMORY[0x1D25D9CB0](v188, 0x1000C8000313F17);
        }
        goto LABEL_354;
      }
LABEL_169:
      if (v187 >= 0x41 && v186) {
        MEMORY[0x1D25D9CB0](v186, 0x1000C8000313F17);
      }
      if (v185 >= 0x41 && v184) {
        MEMORY[0x1D25D9CB0](v184, 0x1000C8000313F17);
      }
      if (v191 >= 0x41 && v190) {
        MEMORY[0x1D25D9CB0](v190, 0x1000C8000313F17);
      }
      if (v189 >= 0x41 && v188) {
        MEMORY[0x1D25D9CB0](v188, 0x1000C8000313F17);
      }
LABEL_173:
      uint64_t v73 = *(void **)(v11 - 96);
      sub_1CC05F3C8((unint64_t)&v201, *(llvm::Type ***)(v11 - 64), v73, 1);
      sub_1CC05EC7C((uint64_t)&v206, (unsigned __int8 *)&v217, (__int16 *)&v201);
      if ((v217 & 0xFE) == 4)
      {
        if (v221 >= 0x41 && v220) {
          MEMORY[0x1D25D9CB0](v220, 0x1000C8000313F17);
        }
        if (v219 >= 0x41 && v218) {
          MEMORY[0x1D25D9CB0](v218, 0x1000C8000313F17);
        }
      }
      LOWORD(v217) = v206;
      if (v206 - 2 < 2)
      {
        uint64_t v218 = v207;
      }
      else if (v206 - 4 <= 1)
      {
        LODWORD(v219) = v208;
        uint64_t v218 = v207;
        LODWORD(v221) = v210;
        unint64_t v220 = v209;
        LODWORD(v208) = 0;
        unsigned int v210 = 0;
        LOWORD(v217) = (_WORD)v206;
      }
      LOWORD(v206) = (unsigned __int16)v206 & 0xFF00;
      if ((v201 & 0xFE) == 4)
      {
        if (v205 >= 0x41 && v204) {
          MEMORY[0x1D25D9CB0](v204, 0x1000C8000313F17);
        }
        if (v203 >= 0x41 && v202) {
          MEMORY[0x1D25D9CB0](v202, 0x1000C8000313F17);
        }
      }
      sub_1CC05F3C8((unint64_t)&v201, *(llvm::Type ***)(v11 - 32), v73, 0);
      sub_1CC05EC7C((uint64_t)&v206, (unsigned __int8 *)&v211, (__int16 *)&v201);
      if ((v211 & 0xFE) == 4)
      {
        if (v215 >= 0x41 && v214) {
          MEMORY[0x1D25D9CB0](v214, 0x1000C8000313F17);
        }
        if (v213 >= 0x41 && v212) {
          MEMORY[0x1D25D9CB0](v212, 0x1000C8000313F17);
        }
      }
      LOWORD(v211) = v206;
      if (v206 - 2 < 2)
      {
        unint64_t v212 = v207;
      }
      else if (v206 - 4 <= 1)
      {
        LODWORD(v213) = v208;
        unint64_t v212 = v207;
        unsigned int v215 = v210;
        uint64_t v214 = v209;
        LODWORD(v208) = 0;
        unsigned int v210 = 0;
        LOWORD(v211) = (_WORD)v206;
      }
      LOWORD(v206) = (unsigned __int16)v206 & 0xFF00;
      if ((v201 & 0xFE) == 4)
      {
        if (v205 >= 0x41 && v204) {
          MEMORY[0x1D25D9CB0](v204, 0x1000C8000313F17);
        }
        if (v203 >= 0x41 && v202) {
          MEMORY[0x1D25D9CB0](v202, 0x1000C8000313F17);
        }
      }
      LOWORD(v206) = v217;
      if (v217 - 4 < 2)
      {
        LODWORD(v208) = v219;
        if (v219 > 0x40) {
          operator new[]();
        }
        uint64_t v207 = v218;
        unsigned int v210 = v221;
        if (v221 > 0x40) {
          operator new[]();
        }
        unsigned int v209 = v220;
        BYTE1(v206) = BYTE1(v217);
      }
      else if (v217 - 2 < 2)
      {
        uint64_t v207 = v218;
      }
      sub_1CC061B28((uint64_t)&v206, (unsigned __int8 *)&v211, 0x100000000);
      __int16 v195 = v206;
      if (v206 - 2 < 2)
      {
        uint64_t v196 = v207;
      }
      else if (v206 - 4 <= 1)
      {
        unsigned int v197 = v208;
        uint64_t v196 = v207;
        LODWORD(v208) = 0;
        unsigned int v199 = v210;
        int v198 = v209;
        __int16 v195 = (__int16)v206;
      }
      char v200 = 1;
LABEL_354:
      if (v216 && (v211 & 0xFE) == 4)
      {
        if (v215 >= 0x41 && v214) {
          MEMORY[0x1D25D9CB0](v214, 0x1000C8000313F17);
        }
        if (v213 >= 0x41 && v212) {
          MEMORY[0x1D25D9CB0](v212, 0x1000C8000313F17);
        }
      }
LABEL_358:
      if (v222 && (v217 & 0xFE) == 4)
      {
        if (v221 >= 0x41 && v220) {
          MEMORY[0x1D25D9CB0](v220, 0x1000C8000313F17);
        }
        if (v219 >= 0x41)
        {
          unint64_t v23 = v218;
          if (v218)
          {
LABEL_34:
            MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
            goto LABEL_280;
          }
        }
      }
      goto LABEL_280;
    }
    if (v183 == *(void *)(v11 - 64))
    {
      unsigned int v166 = v4;
      llvm::ConstantRange::abs((llvm::ConstantRange *)&v188, 0, (uint64_t)&__s1);
      int v64 = v217;
      unsigned int v65 = v179;
      if (v179 > 0x40)
      {
        int v158 = v217;
        uint64_t v66 = v8;
        int v155 = v7;
        unint64_t v67 = __s1;
        unint64_t v68 = __s2;
        unint64_t v153 = v179 + 63;
        if (!memcmp(__s1, __s2, (v153 >> 3) & 0x3FFFFFF8))
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__s1) != v65)
          {
            int v69 = 0;
            uint64_t v120 = v153 >> 6;
            do
            {
              BOOL v20 = v120-- < 1;
              if (v20) {
                break;
              }
              unint64_t v121 = v67[v120];
              v69 += __clz(v121);
            }
            while (!v121);
LABEL_498:
            unsigned int v122 = v65 | 0xFFFFFFC0;
            if ((v65 & 0x3F) == 0) {
              unsigned int v122 = 0;
            }
            int v123 = v69 + v122;
            int v7 = v155;
            uint64_t v8 = v66;
            int v64 = v158;
            if (v123 == v65) {
              goto LABEL_501;
            }
            goto LABEL_234;
          }
LABEL_315:
          LOWORD(v206) = 6;
          uint64_t v4 = v166;
LABEL_236:
          __int16 v195 = v206;
          if (v206 - 2 < 2)
          {
            uint64_t v196 = v207;
          }
          else if (v206 - 4 <= 1)
          {
            unsigned int v197 = v208;
            uint64_t v196 = v207;
            unsigned int v199 = v210;
            int v198 = v209;
            LODWORD(v208) = 0;
            unsigned int v210 = 0;
            __int16 v195 = (__int16)v206;
          }
          LOWORD(v206) = (unsigned __int16)v206 & 0xFF00;
          char v200 = 1;
          goto LABEL_348;
        }
LABEL_454:
        int v7 = v155;
        uint64_t v8 = v66;
        int v64 = v158;
        goto LABEL_234;
      }
    }
    else
    {
      if (v183 != *(void *)(v11 - 32)) {
        goto LABEL_169;
      }
      unsigned int v166 = v4;
      llvm::ConstantRange::abs((llvm::ConstantRange *)&v184, 0, (uint64_t)&__s1);
      int v64 = v211;
      unsigned int v65 = v179;
      if (v179 > 0x40)
      {
        int v158 = v211;
        uint64_t v66 = v8;
        int v155 = v7;
        unint64_t v67 = __s1;
        unint64_t v68 = __s2;
        unint64_t v151 = v179 + 63;
        if (!memcmp(__s1, __s2, (v151 >> 3) & 0x3FFFFFF8))
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__s1) != v65)
          {
            int v69 = 0;
            uint64_t v70 = v151 >> 6;
            do
            {
              BOOL v20 = v70-- < 1;
              if (v20) {
                break;
              }
              unint64_t v71 = v67[v70];
              v69 += __clz(v71);
            }
            while (!v71);
            goto LABEL_498;
          }
          goto LABEL_315;
        }
        goto LABEL_454;
      }
    }
    unint64_t v67 = __s1;
    unint64_t v68 = __s2;
    if (__s1 != __s2 || v65 && __s1 != (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v65))
    {
      if (!((unint64_t)__s2 | (unint64_t)__s1))
      {
LABEL_501:
        LOWORD(v206) = v64 == 5;
        uint64_t v4 = v166;
        goto LABEL_236;
      }
LABEL_234:
      LOWORD(v206) = 0;
      LODWORD(v202) = v65;
      uint64_t v201 = v67;
      LODWORD(v204) = v181;
      int v203 = v68;
      unsigned int v179 = 0;
      unsigned int v181 = 0;
      sub_1CC05E860((__int16 *)&v206, (uint64_t)&v201, (v64 == 5) | 0x100000000);
      if (v204 >= 0x41 && v203) {
        MEMORY[0x1D25D9CB0](v203, 0x1000C8000313F17);
      }
      uint64_t v4 = v166;
      if (v202 >= 0x41 && v201) {
        MEMORY[0x1D25D9CB0](v201, 0x1000C8000313F17);
      }
      goto LABEL_236;
    }
    goto LABEL_315;
  }
LABEL_568:
  if (v192 != v4) {
    free(v192);
  }
}